
SMCONTROLLER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018394  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00008c00  08018528  08018528  00019528  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08021128  08021128  00023634  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08021128  08021128  00022128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08021130  08021130  00023634  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08021130  08021130  00022130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08021134  08021134  00022134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000634  20000000  08021138  00023000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00023634  2**0
                  CONTENTS
 10 .bss          00008eb4  20000638  20000638  00023638  2**3
                  ALLOC
 11 ._user_heap_stack 00006004  200094ec  200094ec  00023638  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00023634  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003072c  00000000  00000000  00023664  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007818  00000000  00000000  00053d90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002888  00000000  00000000  0005b5a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00002054  00000000  00000000  0005de30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000136fc  00000000  00000000  0005fe84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003cd28  00000000  00000000  00073580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fd9ae  00000000  00000000  000b02a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001adc56  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000c0f0  00000000  00000000  001adc9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  001b9d8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000638 	.word	0x20000638
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801850c 	.word	0x0801850c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000063c 	.word	0x2000063c
 80001cc:	0801850c 	.word	0x0801850c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_frsub>:
 8000c38:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000c3c:	e002      	b.n	8000c44 <__addsf3>
 8000c3e:	bf00      	nop

08000c40 <__aeabi_fsub>:
 8000c40:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000c44 <__addsf3>:
 8000c44:	0042      	lsls	r2, r0, #1
 8000c46:	bf1f      	itttt	ne
 8000c48:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c4c:	ea92 0f03 	teqne	r2, r3
 8000c50:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c54:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c58:	d06a      	beq.n	8000d30 <__addsf3+0xec>
 8000c5a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c5e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c62:	bfc1      	itttt	gt
 8000c64:	18d2      	addgt	r2, r2, r3
 8000c66:	4041      	eorgt	r1, r0
 8000c68:	4048      	eorgt	r0, r1
 8000c6a:	4041      	eorgt	r1, r0
 8000c6c:	bfb8      	it	lt
 8000c6e:	425b      	neglt	r3, r3
 8000c70:	2b19      	cmp	r3, #25
 8000c72:	bf88      	it	hi
 8000c74:	4770      	bxhi	lr
 8000c76:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c7a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c7e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c82:	bf18      	it	ne
 8000c84:	4240      	negne	r0, r0
 8000c86:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c8a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c8e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c92:	bf18      	it	ne
 8000c94:	4249      	negne	r1, r1
 8000c96:	ea92 0f03 	teq	r2, r3
 8000c9a:	d03f      	beq.n	8000d1c <__addsf3+0xd8>
 8000c9c:	f1a2 0201 	sub.w	r2, r2, #1
 8000ca0:	fa41 fc03 	asr.w	ip, r1, r3
 8000ca4:	eb10 000c 	adds.w	r0, r0, ip
 8000ca8:	f1c3 0320 	rsb	r3, r3, #32
 8000cac:	fa01 f103 	lsl.w	r1, r1, r3
 8000cb0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000cb4:	d502      	bpl.n	8000cbc <__addsf3+0x78>
 8000cb6:	4249      	negs	r1, r1
 8000cb8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cbc:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000cc0:	d313      	bcc.n	8000cea <__addsf3+0xa6>
 8000cc2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000cc6:	d306      	bcc.n	8000cd6 <__addsf3+0x92>
 8000cc8:	0840      	lsrs	r0, r0, #1
 8000cca:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cce:	f102 0201 	add.w	r2, r2, #1
 8000cd2:	2afe      	cmp	r2, #254	@ 0xfe
 8000cd4:	d251      	bcs.n	8000d7a <__addsf3+0x136>
 8000cd6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000cda:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cde:	bf08      	it	eq
 8000ce0:	f020 0001 	biceq.w	r0, r0, #1
 8000ce4:	ea40 0003 	orr.w	r0, r0, r3
 8000ce8:	4770      	bx	lr
 8000cea:	0049      	lsls	r1, r1, #1
 8000cec:	eb40 0000 	adc.w	r0, r0, r0
 8000cf0:	3a01      	subs	r2, #1
 8000cf2:	bf28      	it	cs
 8000cf4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000cf8:	d2ed      	bcs.n	8000cd6 <__addsf3+0x92>
 8000cfa:	fab0 fc80 	clz	ip, r0
 8000cfe:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d02:	ebb2 020c 	subs.w	r2, r2, ip
 8000d06:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d0a:	bfaa      	itet	ge
 8000d0c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d10:	4252      	neglt	r2, r2
 8000d12:	4318      	orrge	r0, r3
 8000d14:	bfbc      	itt	lt
 8000d16:	40d0      	lsrlt	r0, r2
 8000d18:	4318      	orrlt	r0, r3
 8000d1a:	4770      	bx	lr
 8000d1c:	f092 0f00 	teq	r2, #0
 8000d20:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000d24:	bf06      	itte	eq
 8000d26:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000d2a:	3201      	addeq	r2, #1
 8000d2c:	3b01      	subne	r3, #1
 8000d2e:	e7b5      	b.n	8000c9c <__addsf3+0x58>
 8000d30:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d34:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d38:	bf18      	it	ne
 8000d3a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d3e:	d021      	beq.n	8000d84 <__addsf3+0x140>
 8000d40:	ea92 0f03 	teq	r2, r3
 8000d44:	d004      	beq.n	8000d50 <__addsf3+0x10c>
 8000d46:	f092 0f00 	teq	r2, #0
 8000d4a:	bf08      	it	eq
 8000d4c:	4608      	moveq	r0, r1
 8000d4e:	4770      	bx	lr
 8000d50:	ea90 0f01 	teq	r0, r1
 8000d54:	bf1c      	itt	ne
 8000d56:	2000      	movne	r0, #0
 8000d58:	4770      	bxne	lr
 8000d5a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000d5e:	d104      	bne.n	8000d6a <__addsf3+0x126>
 8000d60:	0040      	lsls	r0, r0, #1
 8000d62:	bf28      	it	cs
 8000d64:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d68:	4770      	bx	lr
 8000d6a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d6e:	bf3c      	itt	cc
 8000d70:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d74:	4770      	bxcc	lr
 8000d76:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d7a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d7e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d82:	4770      	bx	lr
 8000d84:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d88:	bf16      	itet	ne
 8000d8a:	4608      	movne	r0, r1
 8000d8c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d90:	4601      	movne	r1, r0
 8000d92:	0242      	lsls	r2, r0, #9
 8000d94:	bf06      	itte	eq
 8000d96:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d9a:	ea90 0f01 	teqeq	r0, r1
 8000d9e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000da2:	4770      	bx	lr

08000da4 <__aeabi_ui2f>:
 8000da4:	f04f 0300 	mov.w	r3, #0
 8000da8:	e004      	b.n	8000db4 <__aeabi_i2f+0x8>
 8000daa:	bf00      	nop

08000dac <__aeabi_i2f>:
 8000dac:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000db0:	bf48      	it	mi
 8000db2:	4240      	negmi	r0, r0
 8000db4:	ea5f 0c00 	movs.w	ip, r0
 8000db8:	bf08      	it	eq
 8000dba:	4770      	bxeq	lr
 8000dbc:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000dc0:	4601      	mov	r1, r0
 8000dc2:	f04f 0000 	mov.w	r0, #0
 8000dc6:	e01c      	b.n	8000e02 <__aeabi_l2f+0x2a>

08000dc8 <__aeabi_ul2f>:
 8000dc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000dcc:	bf08      	it	eq
 8000dce:	4770      	bxeq	lr
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	e00a      	b.n	8000dec <__aeabi_l2f+0x14>
 8000dd6:	bf00      	nop

08000dd8 <__aeabi_l2f>:
 8000dd8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ddc:	bf08      	it	eq
 8000dde:	4770      	bxeq	lr
 8000de0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000de4:	d502      	bpl.n	8000dec <__aeabi_l2f+0x14>
 8000de6:	4240      	negs	r0, r0
 8000de8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dec:	ea5f 0c01 	movs.w	ip, r1
 8000df0:	bf02      	ittt	eq
 8000df2:	4684      	moveq	ip, r0
 8000df4:	4601      	moveq	r1, r0
 8000df6:	2000      	moveq	r0, #0
 8000df8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000dfc:	bf08      	it	eq
 8000dfe:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e02:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e06:	fabc f28c 	clz	r2, ip
 8000e0a:	3a08      	subs	r2, #8
 8000e0c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e10:	db10      	blt.n	8000e34 <__aeabi_l2f+0x5c>
 8000e12:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e16:	4463      	add	r3, ip
 8000e18:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e1c:	f1c2 0220 	rsb	r2, r2, #32
 8000e20:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000e24:	fa20 f202 	lsr.w	r2, r0, r2
 8000e28:	eb43 0002 	adc.w	r0, r3, r2
 8000e2c:	bf08      	it	eq
 8000e2e:	f020 0001 	biceq.w	r0, r0, #1
 8000e32:	4770      	bx	lr
 8000e34:	f102 0220 	add.w	r2, r2, #32
 8000e38:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e3c:	f1c2 0220 	rsb	r2, r2, #32
 8000e40:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e44:	fa21 f202 	lsr.w	r2, r1, r2
 8000e48:	eb43 0002 	adc.w	r0, r3, r2
 8000e4c:	bf08      	it	eq
 8000e4e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e52:	4770      	bx	lr

08000e54 <__aeabi_uldivmod>:
 8000e54:	b953      	cbnz	r3, 8000e6c <__aeabi_uldivmod+0x18>
 8000e56:	b94a      	cbnz	r2, 8000e6c <__aeabi_uldivmod+0x18>
 8000e58:	2900      	cmp	r1, #0
 8000e5a:	bf08      	it	eq
 8000e5c:	2800      	cmpeq	r0, #0
 8000e5e:	bf1c      	itt	ne
 8000e60:	f04f 31ff 	movne.w	r1, #4294967295
 8000e64:	f04f 30ff 	movne.w	r0, #4294967295
 8000e68:	f000 b9be 	b.w	80011e8 <__aeabi_idiv0>
 8000e6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e74:	f000 f83c 	bl	8000ef0 <__udivmoddi4>
 8000e78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e80:	b004      	add	sp, #16
 8000e82:	4770      	bx	lr

08000e84 <__aeabi_d2lz>:
 8000e84:	b538      	push	{r3, r4, r5, lr}
 8000e86:	2200      	movs	r2, #0
 8000e88:	2300      	movs	r3, #0
 8000e8a:	4604      	mov	r4, r0
 8000e8c:	460d      	mov	r5, r1
 8000e8e:	f7ff fe25 	bl	8000adc <__aeabi_dcmplt>
 8000e92:	b928      	cbnz	r0, 8000ea0 <__aeabi_d2lz+0x1c>
 8000e94:	4620      	mov	r0, r4
 8000e96:	4629      	mov	r1, r5
 8000e98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000e9c:	f000 b80a 	b.w	8000eb4 <__aeabi_d2ulz>
 8000ea0:	4620      	mov	r0, r4
 8000ea2:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000ea6:	f000 f805 	bl	8000eb4 <__aeabi_d2ulz>
 8000eaa:	4240      	negs	r0, r0
 8000eac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000eb0:	bd38      	pop	{r3, r4, r5, pc}
 8000eb2:	bf00      	nop

08000eb4 <__aeabi_d2ulz>:
 8000eb4:	b5d0      	push	{r4, r6, r7, lr}
 8000eb6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ee8 <__aeabi_d2ulz+0x34>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	4606      	mov	r6, r0
 8000ebc:	460f      	mov	r7, r1
 8000ebe:	f7ff fb9b 	bl	80005f8 <__aeabi_dmul>
 8000ec2:	f7ff fe49 	bl	8000b58 <__aeabi_d2uiz>
 8000ec6:	4604      	mov	r4, r0
 8000ec8:	f7ff fb1c 	bl	8000504 <__aeabi_ui2d>
 8000ecc:	4b07      	ldr	r3, [pc, #28]	@ (8000eec <__aeabi_d2ulz+0x38>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	f7ff fb92 	bl	80005f8 <__aeabi_dmul>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	460b      	mov	r3, r1
 8000ed8:	4630      	mov	r0, r6
 8000eda:	4639      	mov	r1, r7
 8000edc:	f7ff f9d4 	bl	8000288 <__aeabi_dsub>
 8000ee0:	f7ff fe3a 	bl	8000b58 <__aeabi_d2uiz>
 8000ee4:	4621      	mov	r1, r4
 8000ee6:	bdd0      	pop	{r4, r6, r7, pc}
 8000ee8:	3df00000 	.word	0x3df00000
 8000eec:	41f00000 	.word	0x41f00000

08000ef0 <__udivmoddi4>:
 8000ef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ef4:	9d08      	ldr	r5, [sp, #32]
 8000ef6:	468e      	mov	lr, r1
 8000ef8:	4604      	mov	r4, r0
 8000efa:	4688      	mov	r8, r1
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d14a      	bne.n	8000f96 <__udivmoddi4+0xa6>
 8000f00:	428a      	cmp	r2, r1
 8000f02:	4617      	mov	r7, r2
 8000f04:	d962      	bls.n	8000fcc <__udivmoddi4+0xdc>
 8000f06:	fab2 f682 	clz	r6, r2
 8000f0a:	b14e      	cbz	r6, 8000f20 <__udivmoddi4+0x30>
 8000f0c:	f1c6 0320 	rsb	r3, r6, #32
 8000f10:	fa01 f806 	lsl.w	r8, r1, r6
 8000f14:	fa20 f303 	lsr.w	r3, r0, r3
 8000f18:	40b7      	lsls	r7, r6
 8000f1a:	ea43 0808 	orr.w	r8, r3, r8
 8000f1e:	40b4      	lsls	r4, r6
 8000f20:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f24:	fa1f fc87 	uxth.w	ip, r7
 8000f28:	fbb8 f1fe 	udiv	r1, r8, lr
 8000f2c:	0c23      	lsrs	r3, r4, #16
 8000f2e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000f32:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f36:	fb01 f20c 	mul.w	r2, r1, ip
 8000f3a:	429a      	cmp	r2, r3
 8000f3c:	d909      	bls.n	8000f52 <__udivmoddi4+0x62>
 8000f3e:	18fb      	adds	r3, r7, r3
 8000f40:	f101 30ff 	add.w	r0, r1, #4294967295
 8000f44:	f080 80ea 	bcs.w	800111c <__udivmoddi4+0x22c>
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	f240 80e7 	bls.w	800111c <__udivmoddi4+0x22c>
 8000f4e:	3902      	subs	r1, #2
 8000f50:	443b      	add	r3, r7
 8000f52:	1a9a      	subs	r2, r3, r2
 8000f54:	b2a3      	uxth	r3, r4
 8000f56:	fbb2 f0fe 	udiv	r0, r2, lr
 8000f5a:	fb0e 2210 	mls	r2, lr, r0, r2
 8000f5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000f62:	fb00 fc0c 	mul.w	ip, r0, ip
 8000f66:	459c      	cmp	ip, r3
 8000f68:	d909      	bls.n	8000f7e <__udivmoddi4+0x8e>
 8000f6a:	18fb      	adds	r3, r7, r3
 8000f6c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f70:	f080 80d6 	bcs.w	8001120 <__udivmoddi4+0x230>
 8000f74:	459c      	cmp	ip, r3
 8000f76:	f240 80d3 	bls.w	8001120 <__udivmoddi4+0x230>
 8000f7a:	443b      	add	r3, r7
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000f82:	eba3 030c 	sub.w	r3, r3, ip
 8000f86:	2100      	movs	r1, #0
 8000f88:	b11d      	cbz	r5, 8000f92 <__udivmoddi4+0xa2>
 8000f8a:	40f3      	lsrs	r3, r6
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	e9c5 3200 	strd	r3, r2, [r5]
 8000f92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f96:	428b      	cmp	r3, r1
 8000f98:	d905      	bls.n	8000fa6 <__udivmoddi4+0xb6>
 8000f9a:	b10d      	cbz	r5, 8000fa0 <__udivmoddi4+0xb0>
 8000f9c:	e9c5 0100 	strd	r0, r1, [r5]
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	4608      	mov	r0, r1
 8000fa4:	e7f5      	b.n	8000f92 <__udivmoddi4+0xa2>
 8000fa6:	fab3 f183 	clz	r1, r3
 8000faa:	2900      	cmp	r1, #0
 8000fac:	d146      	bne.n	800103c <__udivmoddi4+0x14c>
 8000fae:	4573      	cmp	r3, lr
 8000fb0:	d302      	bcc.n	8000fb8 <__udivmoddi4+0xc8>
 8000fb2:	4282      	cmp	r2, r0
 8000fb4:	f200 8105 	bhi.w	80011c2 <__udivmoddi4+0x2d2>
 8000fb8:	1a84      	subs	r4, r0, r2
 8000fba:	eb6e 0203 	sbc.w	r2, lr, r3
 8000fbe:	2001      	movs	r0, #1
 8000fc0:	4690      	mov	r8, r2
 8000fc2:	2d00      	cmp	r5, #0
 8000fc4:	d0e5      	beq.n	8000f92 <__udivmoddi4+0xa2>
 8000fc6:	e9c5 4800 	strd	r4, r8, [r5]
 8000fca:	e7e2      	b.n	8000f92 <__udivmoddi4+0xa2>
 8000fcc:	2a00      	cmp	r2, #0
 8000fce:	f000 8090 	beq.w	80010f2 <__udivmoddi4+0x202>
 8000fd2:	fab2 f682 	clz	r6, r2
 8000fd6:	2e00      	cmp	r6, #0
 8000fd8:	f040 80a4 	bne.w	8001124 <__udivmoddi4+0x234>
 8000fdc:	1a8a      	subs	r2, r1, r2
 8000fde:	0c03      	lsrs	r3, r0, #16
 8000fe0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fe4:	b280      	uxth	r0, r0
 8000fe6:	b2bc      	uxth	r4, r7
 8000fe8:	2101      	movs	r1, #1
 8000fea:	fbb2 fcfe 	udiv	ip, r2, lr
 8000fee:	fb0e 221c 	mls	r2, lr, ip, r2
 8000ff2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000ff6:	fb04 f20c 	mul.w	r2, r4, ip
 8000ffa:	429a      	cmp	r2, r3
 8000ffc:	d907      	bls.n	800100e <__udivmoddi4+0x11e>
 8000ffe:	18fb      	adds	r3, r7, r3
 8001000:	f10c 38ff 	add.w	r8, ip, #4294967295
 8001004:	d202      	bcs.n	800100c <__udivmoddi4+0x11c>
 8001006:	429a      	cmp	r2, r3
 8001008:	f200 80e0 	bhi.w	80011cc <__udivmoddi4+0x2dc>
 800100c:	46c4      	mov	ip, r8
 800100e:	1a9b      	subs	r3, r3, r2
 8001010:	fbb3 f2fe 	udiv	r2, r3, lr
 8001014:	fb0e 3312 	mls	r3, lr, r2, r3
 8001018:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800101c:	fb02 f404 	mul.w	r4, r2, r4
 8001020:	429c      	cmp	r4, r3
 8001022:	d907      	bls.n	8001034 <__udivmoddi4+0x144>
 8001024:	18fb      	adds	r3, r7, r3
 8001026:	f102 30ff 	add.w	r0, r2, #4294967295
 800102a:	d202      	bcs.n	8001032 <__udivmoddi4+0x142>
 800102c:	429c      	cmp	r4, r3
 800102e:	f200 80ca 	bhi.w	80011c6 <__udivmoddi4+0x2d6>
 8001032:	4602      	mov	r2, r0
 8001034:	1b1b      	subs	r3, r3, r4
 8001036:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800103a:	e7a5      	b.n	8000f88 <__udivmoddi4+0x98>
 800103c:	f1c1 0620 	rsb	r6, r1, #32
 8001040:	408b      	lsls	r3, r1
 8001042:	fa22 f706 	lsr.w	r7, r2, r6
 8001046:	431f      	orrs	r7, r3
 8001048:	fa0e f401 	lsl.w	r4, lr, r1
 800104c:	fa20 f306 	lsr.w	r3, r0, r6
 8001050:	fa2e fe06 	lsr.w	lr, lr, r6
 8001054:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8001058:	4323      	orrs	r3, r4
 800105a:	fa00 f801 	lsl.w	r8, r0, r1
 800105e:	fa1f fc87 	uxth.w	ip, r7
 8001062:	fbbe f0f9 	udiv	r0, lr, r9
 8001066:	0c1c      	lsrs	r4, r3, #16
 8001068:	fb09 ee10 	mls	lr, r9, r0, lr
 800106c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8001070:	fb00 fe0c 	mul.w	lr, r0, ip
 8001074:	45a6      	cmp	lr, r4
 8001076:	fa02 f201 	lsl.w	r2, r2, r1
 800107a:	d909      	bls.n	8001090 <__udivmoddi4+0x1a0>
 800107c:	193c      	adds	r4, r7, r4
 800107e:	f100 3aff 	add.w	sl, r0, #4294967295
 8001082:	f080 809c 	bcs.w	80011be <__udivmoddi4+0x2ce>
 8001086:	45a6      	cmp	lr, r4
 8001088:	f240 8099 	bls.w	80011be <__udivmoddi4+0x2ce>
 800108c:	3802      	subs	r0, #2
 800108e:	443c      	add	r4, r7
 8001090:	eba4 040e 	sub.w	r4, r4, lr
 8001094:	fa1f fe83 	uxth.w	lr, r3
 8001098:	fbb4 f3f9 	udiv	r3, r4, r9
 800109c:	fb09 4413 	mls	r4, r9, r3, r4
 80010a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80010a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80010a8:	45a4      	cmp	ip, r4
 80010aa:	d908      	bls.n	80010be <__udivmoddi4+0x1ce>
 80010ac:	193c      	adds	r4, r7, r4
 80010ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80010b2:	f080 8082 	bcs.w	80011ba <__udivmoddi4+0x2ca>
 80010b6:	45a4      	cmp	ip, r4
 80010b8:	d97f      	bls.n	80011ba <__udivmoddi4+0x2ca>
 80010ba:	3b02      	subs	r3, #2
 80010bc:	443c      	add	r4, r7
 80010be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80010c2:	eba4 040c 	sub.w	r4, r4, ip
 80010c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80010ca:	4564      	cmp	r4, ip
 80010cc:	4673      	mov	r3, lr
 80010ce:	46e1      	mov	r9, ip
 80010d0:	d362      	bcc.n	8001198 <__udivmoddi4+0x2a8>
 80010d2:	d05f      	beq.n	8001194 <__udivmoddi4+0x2a4>
 80010d4:	b15d      	cbz	r5, 80010ee <__udivmoddi4+0x1fe>
 80010d6:	ebb8 0203 	subs.w	r2, r8, r3
 80010da:	eb64 0409 	sbc.w	r4, r4, r9
 80010de:	fa04 f606 	lsl.w	r6, r4, r6
 80010e2:	fa22 f301 	lsr.w	r3, r2, r1
 80010e6:	431e      	orrs	r6, r3
 80010e8:	40cc      	lsrs	r4, r1
 80010ea:	e9c5 6400 	strd	r6, r4, [r5]
 80010ee:	2100      	movs	r1, #0
 80010f0:	e74f      	b.n	8000f92 <__udivmoddi4+0xa2>
 80010f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80010f6:	0c01      	lsrs	r1, r0, #16
 80010f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80010fc:	b280      	uxth	r0, r0
 80010fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8001102:	463b      	mov	r3, r7
 8001104:	4638      	mov	r0, r7
 8001106:	463c      	mov	r4, r7
 8001108:	46b8      	mov	r8, r7
 800110a:	46be      	mov	lr, r7
 800110c:	2620      	movs	r6, #32
 800110e:	fbb1 f1f7 	udiv	r1, r1, r7
 8001112:	eba2 0208 	sub.w	r2, r2, r8
 8001116:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800111a:	e766      	b.n	8000fea <__udivmoddi4+0xfa>
 800111c:	4601      	mov	r1, r0
 800111e:	e718      	b.n	8000f52 <__udivmoddi4+0x62>
 8001120:	4610      	mov	r0, r2
 8001122:	e72c      	b.n	8000f7e <__udivmoddi4+0x8e>
 8001124:	f1c6 0220 	rsb	r2, r6, #32
 8001128:	fa2e f302 	lsr.w	r3, lr, r2
 800112c:	40b7      	lsls	r7, r6
 800112e:	40b1      	lsls	r1, r6
 8001130:	fa20 f202 	lsr.w	r2, r0, r2
 8001134:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001138:	430a      	orrs	r2, r1
 800113a:	fbb3 f8fe 	udiv	r8, r3, lr
 800113e:	b2bc      	uxth	r4, r7
 8001140:	fb0e 3318 	mls	r3, lr, r8, r3
 8001144:	0c11      	lsrs	r1, r2, #16
 8001146:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800114a:	fb08 f904 	mul.w	r9, r8, r4
 800114e:	40b0      	lsls	r0, r6
 8001150:	4589      	cmp	r9, r1
 8001152:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8001156:	b280      	uxth	r0, r0
 8001158:	d93e      	bls.n	80011d8 <__udivmoddi4+0x2e8>
 800115a:	1879      	adds	r1, r7, r1
 800115c:	f108 3cff 	add.w	ip, r8, #4294967295
 8001160:	d201      	bcs.n	8001166 <__udivmoddi4+0x276>
 8001162:	4589      	cmp	r9, r1
 8001164:	d81f      	bhi.n	80011a6 <__udivmoddi4+0x2b6>
 8001166:	eba1 0109 	sub.w	r1, r1, r9
 800116a:	fbb1 f9fe 	udiv	r9, r1, lr
 800116e:	fb09 f804 	mul.w	r8, r9, r4
 8001172:	fb0e 1119 	mls	r1, lr, r9, r1
 8001176:	b292      	uxth	r2, r2
 8001178:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800117c:	4542      	cmp	r2, r8
 800117e:	d229      	bcs.n	80011d4 <__udivmoddi4+0x2e4>
 8001180:	18ba      	adds	r2, r7, r2
 8001182:	f109 31ff 	add.w	r1, r9, #4294967295
 8001186:	d2c4      	bcs.n	8001112 <__udivmoddi4+0x222>
 8001188:	4542      	cmp	r2, r8
 800118a:	d2c2      	bcs.n	8001112 <__udivmoddi4+0x222>
 800118c:	f1a9 0102 	sub.w	r1, r9, #2
 8001190:	443a      	add	r2, r7
 8001192:	e7be      	b.n	8001112 <__udivmoddi4+0x222>
 8001194:	45f0      	cmp	r8, lr
 8001196:	d29d      	bcs.n	80010d4 <__udivmoddi4+0x1e4>
 8001198:	ebbe 0302 	subs.w	r3, lr, r2
 800119c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80011a0:	3801      	subs	r0, #1
 80011a2:	46e1      	mov	r9, ip
 80011a4:	e796      	b.n	80010d4 <__udivmoddi4+0x1e4>
 80011a6:	eba7 0909 	sub.w	r9, r7, r9
 80011aa:	4449      	add	r1, r9
 80011ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80011b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80011b4:	fb09 f804 	mul.w	r8, r9, r4
 80011b8:	e7db      	b.n	8001172 <__udivmoddi4+0x282>
 80011ba:	4673      	mov	r3, lr
 80011bc:	e77f      	b.n	80010be <__udivmoddi4+0x1ce>
 80011be:	4650      	mov	r0, sl
 80011c0:	e766      	b.n	8001090 <__udivmoddi4+0x1a0>
 80011c2:	4608      	mov	r0, r1
 80011c4:	e6fd      	b.n	8000fc2 <__udivmoddi4+0xd2>
 80011c6:	443b      	add	r3, r7
 80011c8:	3a02      	subs	r2, #2
 80011ca:	e733      	b.n	8001034 <__udivmoddi4+0x144>
 80011cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80011d0:	443b      	add	r3, r7
 80011d2:	e71c      	b.n	800100e <__udivmoddi4+0x11e>
 80011d4:	4649      	mov	r1, r9
 80011d6:	e79c      	b.n	8001112 <__udivmoddi4+0x222>
 80011d8:	eba1 0109 	sub.w	r1, r1, r9
 80011dc:	46c4      	mov	ip, r8
 80011de:	fbb1 f9fe 	udiv	r9, r1, lr
 80011e2:	fb09 f804 	mul.w	r8, r9, r4
 80011e6:	e7c4      	b.n	8001172 <__udivmoddi4+0x282>

080011e8 <__aeabi_idiv0>:
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop

080011ec <driverFunctionsInit>:
/** Функция приема указателя на функцию получения времени в микросекундах.
 *  Используется таймер микроконтроллера и его регистр счетчика - TIMx->CNT
 *  function(1...n) ОБЯЗАТЕЛЬНО должны быть определены в файле main.c
 */
void driverFunctionsInit(timeFunction_void_ptr function1, timeFunction_void_ptr function2, timeFunction_uint32_t_ptr function3, timeFunction_void_ptr function4)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b085      	sub	sp, #20
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	60f8      	str	r0, [r7, #12]
 80011f4:	60b9      	str	r1, [r7, #8]
 80011f6:	607a      	str	r2, [r7, #4]
 80011f8:	603b      	str	r3, [r7, #0]
	startTimer = function1;
 80011fa:	4a09      	ldr	r2, [pc, #36]	@ (8001220 <driverFunctionsInit+0x34>)
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	6013      	str	r3, [r2, #0]
	stopTimer = function2;
 8001200:	4a08      	ldr	r2, [pc, #32]	@ (8001224 <driverFunctionsInit+0x38>)
 8001202:	68bb      	ldr	r3, [r7, #8]
 8001204:	6013      	str	r3, [r2, #0]
	getMicros = function3;
 8001206:	4a08      	ldr	r2, [pc, #32]	@ (8001228 <driverFunctionsInit+0x3c>)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6013      	str	r3, [r2, #0]
	resetTimer = function4;
 800120c:	4a07      	ldr	r2, [pc, #28]	@ (800122c <driverFunctionsInit+0x40>)
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	6013      	str	r3, [r2, #0]
}
 8001212:	bf00      	nop
 8001214:	3714      	adds	r7, #20
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	20000654 	.word	0x20000654
 8001224:	20000658 	.word	0x20000658
 8001228:	2000065c 	.word	0x2000065c
 800122c:	20000660 	.word	0x20000660

08001230 <driverInit>:

/** Функция инициализации драйвера шагового мотора
 */
void driverInit(DRIVER_StructDef* driver, STEPPER_StructDef* stepper, DRIVER_LIMIT_SWITCH_PINS_StructDef* pins, uint32_t stepsPerRev, movement_type_t type)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	60f8      	str	r0, [r7, #12]
 8001238:	60b9      	str	r1, [r7, #8]
 800123a:	607a      	str	r2, [r7, #4]
 800123c:	603b      	str	r3, [r7, #0]
	/* Структура шагового мотора */
	driver->stepper = stepper;
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	68ba      	ldr	r2, [r7, #8]
 8001242:	601a      	str	r2, [r3, #0]

	/* Структура пинов концевых переключателей и датчика нуля драйвера шагового мотора */
	driver->driver_pins = pins;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	687a      	ldr	r2, [r7, #4]
 8001248:	605a      	str	r2, [r3, #4]

	/* ------------- Общие переменные движения ----------- */

	driver->tickUs = 0;
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	2200      	movs	r2, #0
 800124e:	609a      	str	r2, [r3, #8]
	driver->_prevTime = 0;
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	2200      	movs	r2, #0
 8001254:	60da      	str	r2, [r3, #12]
	driver->stepTime = 0;
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	2200      	movs	r2, #0
 800125a:	611a      	str	r2, [r3, #16]
	driver->_axisType = type;
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	7e3a      	ldrb	r2, [r7, #24]
 8001260:	751a      	strb	r2, [r3, #20]
	driver->_runMode = POSITION_MODE;
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	2200      	movs	r2, #0
 8001266:	755a      	strb	r2, [r3, #21]
	driver->_autoPower = false;
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	2200      	movs	r2, #0
 800126c:	759a      	strb	r2, [r3, #22]
	driver->_workState = DRIVER_INIT;
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	2201      	movs	r2, #1
 8001272:	75da      	strb	r2, [r3, #23]
	driver->_stepsPerDeg = stepsPerRev / 360.0;
 8001274:	6838      	ldr	r0, [r7, #0]
 8001276:	f7ff f945 	bl	8000504 <__aeabi_ui2d>
 800127a:	f04f 0200 	mov.w	r2, #0
 800127e:	4b25      	ldr	r3, [pc, #148]	@ (8001314 <driverInit+0xe4>)
 8001280:	f7ff fae4 	bl	800084c <__aeabi_ddiv>
 8001284:	4602      	mov	r2, r0
 8001286:	460b      	mov	r3, r1
 8001288:	4610      	mov	r0, r2
 800128a:	4619      	mov	r1, r3
 800128c:	f7ff fc84 	bl	8000b98 <__aeabi_d2f>
 8001290:	4602      	mov	r2, r0
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	619a      	str	r2, [r3, #24]
	driver->_accel = 500;
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800129c:	839a      	strh	r2, [r3, #28]

	/* ------------ Переменные POSITION_MODE ------------- */

	driver->_positionPlannerTime = 0;
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	2200      	movs	r2, #0
 80012a2:	621a      	str	r2, [r3, #32]
	driver->_maxSpeed = 0;
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	f04f 0200 	mov.w	r2, #0
 80012aa:	625a      	str	r2, [r3, #36]	@ 0x24
	driver->_targetPosition = 0;
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	2200      	movs	r2, #0
 80012b0:	629a      	str	r2, [r3, #40]	@ 0x28

	driver->_s1 = 0;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	2200      	movs	r2, #0
 80012b6:	62da      	str	r2, [r3, #44]	@ 0x2c
	driver->_s2 = 0;
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	2200      	movs	r2, #0
 80012bc:	631a      	str	r2, [r3, #48]	@ 0x30
	driver->_s3 = 0;
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	2200      	movs	r2, #0
 80012c2:	635a      	str	r2, [r3, #52]	@ 0x34
	driver->_k = 0;
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	2200      	movs	r2, #0
 80012c8:	639a      	str	r2, [r3, #56]	@ 0x38

	/* ------------ Переменные VELOCITY_MODE ------------- */

	driver->_speedPlannerTime = 0;
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	2200      	movs	r2, #0
 80012ce:	63da      	str	r2, [r3, #60]	@ 0x3c
	driver->_curSpeed = 0;
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	f04f 0200 	mov.w	r2, #0
 80012d6:	641a      	str	r2, [r3, #64]	@ 0x40
	driver->_targetSpeed = 0;
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	f04f 0200 	mov.w	r2, #0
 80012de:	645a      	str	r2, [r3, #68]	@ 0x44
	driver->_stopFlag = false;
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	2200      	movs	r2, #0
 80012e4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

	/* ------ Переменные алгоритма плавного разгона ------ */

	driver->_c0 = 0;
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	f04f 0200 	mov.w	r2, #0
 80012ee:	64da      	str	r2, [r3, #76]	@ 0x4c
	driver->_cn = 0;
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	f04f 0200 	mov.w	r2, #0
 80012f6:	651a      	str	r2, [r3, #80]	@ 0x50
	driver->_n = 0;
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	2200      	movs	r2, #0
 80012fc:	655a      	str	r2, [r3, #84]	@ 0x54
	driver->N = 0;
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	2200      	movs	r2, #0
 8001302:	659a      	str	r2, [r3, #88]	@ 0x58
	driver->_cmin = 1.0;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800130a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800130c:	bf00      	nop
 800130e:	3710      	adds	r7, #16
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	40768000 	.word	0x40768000

08001318 <setRunMode>:
/** Установка режима работы, _runMode:
 * 	POSITION_MODE - режим следования к позиции
 * 	VELOCITY_MODE - режим удержания заданной скорости
 */
void setRunMode(DRIVER_StructDef* driver, run_mode_t mode)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	460b      	mov	r3, r1
 8001322:	70fb      	strb	r3, [r7, #3]
	driver->_runMode = mode;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	78fa      	ldrb	r2, [r7, #3]
 8001328:	755a      	strb	r2, [r3, #21]
}
 800132a:	bf00      	nop
 800132c:	370c      	adds	r7, #12
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
	...

08001338 <resetDriverTimers>:

/** Функция сброса всех таймеров
 */
void resetDriverTimers(DRIVER_StructDef* driver)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
	driver->_speedPlannerTime = driver->_positionPlannerTime = driver->_prevTime = getMicros();
 8001340:	4b08      	ldr	r3, [pc, #32]	@ (8001364 <resetDriverTimers+0x2c>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4798      	blx	r3
 8001346:	4602      	mov	r2, r0
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	60da      	str	r2, [r3, #12]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	68da      	ldr	r2, [r3, #12]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	621a      	str	r2, [r3, #32]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6a1a      	ldr	r2, [r3, #32]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800135c:	bf00      	nop
 800135e:	3708      	adds	r7, #8
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	2000065c 	.word	0x2000065c

08001368 <resetMotor>:

/** Установка текущей скорости мотора в ноль
 */
void resetMotor(DRIVER_StructDef* driver)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
	driver->_curSpeed = 0;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f04f 0200 	mov.w	r2, #0
 8001376:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001378:	bf00      	nop
 800137a:	370c      	adds	r7, #12
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr

08001384 <setDriverDir>:
/** Задать направление мотора
 * 	dir = 1 - по часовой стрелки независимо
 * 	dir = -1 - против часовой стрелки независимо
 */
void setDriverDir(DRIVER_StructDef* driver, uint8_t dir)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	460b      	mov	r3, r1
 800138e:	70fb      	strb	r3, [r7, #3]
	setDir(driver->stepper, dir);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8001398:	4611      	mov	r1, r2
 800139a:	4618      	mov	r0, r3
 800139c:	f002 ffe6 	bl	800436c <setDir>
}
 80013a0:	bf00      	nop
 80013a2:	3708      	adds	r7, #8
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <enableDriver>:
}

/** Включить мотор (пин EN)
 */
void enableDriver(DRIVER_StructDef* driver)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
	driver->_workState = DRIVER_READY;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2202      	movs	r2, #2
 80013b4:	75da      	strb	r2, [r3, #23]
	resetDriverTimers(driver);
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f7ff ffbe 	bl	8001338 <resetDriverTimers>
	enableStepper(driver->stepper);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4618      	mov	r0, r3
 80013c2:	f003 f81d 	bl	8004400 <enableStepper>
}
 80013c6:	bf00      	nop
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <disableDriver>:

/** Выключить мотор (пин EN)
 */
void disableDriver(DRIVER_StructDef* driver)
{
 80013ce:	b580      	push	{r7, lr}
 80013d0:	b082      	sub	sp, #8
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
	driver->_workState = DRIVER_BRAKE;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2204      	movs	r2, #4
 80013da:	75da      	strb	r2, [r3, #23]
	disableStepper(driver->stepper);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4618      	mov	r0, r3
 80013e2:	f003 f833 	bl	800444c <disableStepper>
}
 80013e6:	bf00      	nop
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}

080013ee <brakeDriver>:
}

/* Резкая остановка + выключение мотора
 */
void brakeDriver(DRIVER_StructDef* driver)
{
 80013ee:	b580      	push	{r7, lr}
 80013f0:	b082      	sub	sp, #8
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	6078      	str	r0, [r7, #4]
	driver->_workState = DRIVER_READY;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2202      	movs	r2, #2
 80013fa:	75da      	strb	r2, [r3, #23]
	driver->stepTime = 0;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2200      	movs	r2, #0
 8001400:	611a      	str	r2, [r3, #16]
	driver->_curSpeed = 0;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f04f 0200 	mov.w	r2, #0
 8001408:	641a      	str	r2, [r3, #64]	@ 0x40
	driver->_n = 0;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2200      	movs	r2, #0
 800140e:	655a      	str	r2, [r3, #84]	@ 0x54

	resetMotor(driver);
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f7ff ffa9 	bl	8001368 <resetMotor>

	if(driver->_autoPower == true) disableDriver(driver);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	7d9b      	ldrb	r3, [r3, #22]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d002      	beq.n	8001424 <brakeDriver+0x36>
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f7ff ffd5 	bl	80013ce <disableDriver>
}
 8001424:	bf00      	nop
 8001426:	3708      	adds	r7, #8
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}

0800142c <stepDriver>:
}

/** Сделать шаг мотором
 */
void stepDriver(DRIVER_StructDef* driver)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
	step(driver->stepper);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4618      	mov	r0, r3
 800143a:	f002 ff6b 	bl	8004314 <step>
}
 800143e:	bf00      	nop
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
	...

08001448 <setTargetPos>:

/** Установка целевой позиции в шагах (для режима POSITION_MODE)
 * 	и движение к указанной цели с максимальной скоростью
 */
param_change_t setTargetPos(DRIVER_StructDef* driver, int32_t target_pos)
{
 8001448:	b5b0      	push	{r4, r5, r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	6039      	str	r1, [r7, #0]
	uint32_t steps = abs(target_pos - driver->stepper->pos);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	699b      	ldr	r3, [r3, #24]
 8001458:	683a      	ldr	r2, [r7, #0]
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	2b00      	cmp	r3, #0
 800145e:	bfb8      	it	lt
 8001460:	425b      	neglt	r3, r3
 8001462:	60fb      	str	r3, [r7, #12]

	/* Если драйвер в режиме POSITION_MODE */
	if(driver->_runMode != POSITION_MODE) return PARAM_CHANGE_ERR;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	7d5b      	ldrb	r3, [r3, #21]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d002      	beq.n	8001472 <setTargetPos+0x2a>
 800146c:	f04f 33ff 	mov.w	r3, #4294967295
 8001470:	e0ab      	b.n	80015ca <setTargetPos+0x182>

	/* Если мотор в движении */
	if(driver->_workState == DRIVER_RUN) return PARAM_CHANGE_ERR;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	f993 3017 	ldrsb.w	r3, [r3, #23]
 8001478:	2b03      	cmp	r3, #3
 800147a:	d102      	bne.n	8001482 <setTargetPos+0x3a>
 800147c:	f04f 33ff 	mov.w	r3, #4294967295
 8001480:	e0a3      	b.n	80015ca <setTargetPos+0x182>

	driver->_targetPosition = target_pos;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	683a      	ldr	r2, [r7, #0]
 8001486:	629a      	str	r2, [r3, #40]	@ 0x28

	if(driver->_targetPosition != driver->stepper->pos)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	699b      	ldr	r3, [r3, #24]
 8001492:	429a      	cmp	r2, r3
 8001494:	f000 8098 	beq.w	80015c8 <setTargetPos+0x180>
	{
		driver->stepper->dir = (driver->_targetPosition > driver->stepper->pos) ? 1 : -1;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	699b      	ldr	r3, [r3, #24]
 80014a2:	429a      	cmp	r2, r3
 80014a4:	dd01      	ble.n	80014aa <setTargetPos+0x62>
 80014a6:	2201      	movs	r2, #1
 80014a8:	e001      	b.n	80014ae <setTargetPos+0x66>
 80014aa:	f04f 32ff 	mov.w	r2, #4294967295
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	771a      	strb	r2, [r3, #28]

		if (driver->_accel == 0 || driver->_maxSpeed < MIN_SPEED_POS_MODE)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	8b9b      	ldrh	r3, [r3, #28]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d009      	beq.n	80014d0 <setTargetPos+0x88>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80014c2:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 80014c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ce:	d515      	bpl.n	80014fc <setTargetPos+0xb4>
		{
			driver->stepTime = 1000000.0 / driver->_maxSpeed;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff f837 	bl	8000548 <__aeabi_f2d>
 80014da:	4602      	mov	r2, r0
 80014dc:	460b      	mov	r3, r1
 80014de:	a13e      	add	r1, pc, #248	@ (adr r1, 80015d8 <setTargetPos+0x190>)
 80014e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80014e4:	f7ff f9b2 	bl	800084c <__aeabi_ddiv>
 80014e8:	4602      	mov	r2, r0
 80014ea:	460b      	mov	r3, r1
 80014ec:	4610      	mov	r0, r2
 80014ee:	4619      	mov	r1, r3
 80014f0:	f7ff fb32 	bl	8000b58 <__aeabi_d2uiz>
 80014f4:	4602      	mov	r2, r0
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	611a      	str	r2, [r3, #16]
 80014fa:	e062      	b.n	80015c2 <setTargetPos+0x17a>
		}
		else
		{
			driver->N = driver->_maxSpeed * driver->_maxSpeed / (2.0 * driver->_accel);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001508:	ee67 7a27 	vmul.f32	s15, s14, s15
 800150c:	ee17 0a90 	vmov	r0, s15
 8001510:	f7ff f81a 	bl	8000548 <__aeabi_f2d>
 8001514:	4604      	mov	r4, r0
 8001516:	460d      	mov	r5, r1
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	8b9b      	ldrh	r3, [r3, #28]
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff f801 	bl	8000524 <__aeabi_i2d>
 8001522:	4602      	mov	r2, r0
 8001524:	460b      	mov	r3, r1
 8001526:	f7fe feb1 	bl	800028c <__adddf3>
 800152a:	4602      	mov	r2, r0
 800152c:	460b      	mov	r3, r1
 800152e:	4620      	mov	r0, r4
 8001530:	4629      	mov	r1, r5
 8001532:	f7ff f98b 	bl	800084c <__aeabi_ddiv>
 8001536:	4602      	mov	r2, r0
 8001538:	460b      	mov	r3, r1
 800153a:	4610      	mov	r0, r2
 800153c:	4619      	mov	r1, r3
 800153e:	f7ff fb0b 	bl	8000b58 <__aeabi_d2uiz>
 8001542:	4602      	mov	r2, r0
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	659a      	str	r2, [r3, #88]	@ 0x58

			if(steps > 2 * driver->N)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800154c:	005b      	lsls	r3, r3, #1
 800154e:	68fa      	ldr	r2, [r7, #12]
 8001550:	429a      	cmp	r2, r3
 8001552:	d915      	bls.n	8001580 <setTargetPos+0x138>
			{
				driver->_s1 = driver->N;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	62da      	str	r2, [r3, #44]	@ 0x2c
				driver->_s2 = driver->_s1 + steps - 2 * driver->N;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	441a      	add	r2, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001568:	005b      	lsls	r3, r3, #1
 800156a:	1ad2      	subs	r2, r2, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	631a      	str	r2, [r3, #48]	@ 0x30
				driver->_s3 = driver->_s2 + driver->N;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001578:	441a      	add	r2, r3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	635a      	str	r2, [r3, #52]	@ 0x34
 800157e:	e01d      	b.n	80015bc <setTargetPos+0x174>
			}
			else
			{
				driver->_s1 = steps / 2;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	085a      	lsrs	r2, r3, #1
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	62da      	str	r2, [r3, #44]	@ 0x2c
				driver->_s2 = driver->_s1 + (steps % 2 == 0) ? 0 : 1;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800158c:	68fa      	ldr	r2, [r7, #12]
 800158e:	f002 0201 	and.w	r2, r2, #1
 8001592:	2a00      	cmp	r2, #0
 8001594:	bf0c      	ite	eq
 8001596:	2201      	moveq	r2, #1
 8001598:	2200      	movne	r2, #0
 800159a:	b2d2      	uxtb	r2, r2
 800159c:	4413      	add	r3, r2
 800159e:	2b00      	cmp	r3, #0
 80015a0:	bf0c      	ite	eq
 80015a2:	2301      	moveq	r3, #1
 80015a4:	2300      	movne	r3, #0
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	461a      	mov	r2, r3
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	631a      	str	r2, [r3, #48]	@ 0x30
				driver->_s3 = driver->_s2 + driver->_s1;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015b6:	441a      	add	r2, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	635a      	str	r2, [r3, #52]	@ 0x34
			}

			driver->_k = 0;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2200      	movs	r2, #0
 80015c0:	639a      	str	r2, [r3, #56]	@ 0x38
		}

		driver->_workState = DRIVER_RUN;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2203      	movs	r2, #3
 80015c6:	75da      	strb	r2, [r3, #23]
	}

	return PARAM_CHANGE_OK;
 80015c8:	2300      	movs	r3, #0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bdb0      	pop	{r4, r5, r7, pc}
 80015d2:	bf00      	nop
 80015d4:	f3af 8000 	nop.w
 80015d8:	00000000 	.word	0x00000000
 80015dc:	412e8480 	.word	0x412e8480

080015e0 <setTargetPosDeg>:

/* Установка целевой позиции в градусах
 */
param_change_t setTargetPosDeg(DRIVER_StructDef* driver, float target_pos_deg)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	ed87 0a00 	vstr	s0, [r7]
	return setTargetPos(driver, target_pos_deg * driver->_stepsPerDeg);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	ed93 7a06 	vldr	s14, [r3, #24]
 80015f2:	edd7 7a00 	vldr	s15, [r7]
 80015f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015fe:	ee17 1a90 	vmov	r1, s15
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	f7ff ff20 	bl	8001448 <setTargetPos>
 8001608:	4603      	mov	r3, r0
}
 800160a:	4618      	mov	r0, r3
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	0000      	movs	r0, r0
 8001614:	0000      	movs	r0, r0
	...

08001618 <setMaxSpeed>:

/** Установка максимальной скорости (по модулю) в шагах/секунду (для режима POSITION_MODE)
 *  по умолчанию 300
 */
param_change_t setMaxSpeed(DRIVER_StructDef* driver, float speed)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	ed87 0a00 	vstr	s0, [r7]
	if(driver->_workState == DRIVER_RUN) return PARAM_CHANGE_ERR;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	f993 3017 	ldrsb.w	r3, [r3, #23]
 800162a:	2b03      	cmp	r3, #3
 800162c:	d102      	bne.n	8001634 <setMaxSpeed+0x1c>
 800162e:	f04f 33ff 	mov.w	r3, #4294967295
 8001632:	e019      	b.n	8001668 <setMaxSpeed+0x50>

	/* Ограничения минимальной скорости - 1 шаг/час */
	driver->_maxSpeed = fmax(fabs(speed), MIN_STEP_SPEED);
 8001634:	edd7 7a00 	vldr	s15, [r7]
 8001638:	eef0 7ae7 	vabs.f32	s15, s15
 800163c:	ee17 0a90 	vmov	r0, s15
 8001640:	f7fe ff82 	bl	8000548 <__aeabi_f2d>
 8001644:	4602      	mov	r2, r0
 8001646:	460b      	mov	r3, r1
 8001648:	ed9f 1b09 	vldr	d1, [pc, #36]	@ 8001670 <setMaxSpeed+0x58>
 800164c:	ec43 2b10 	vmov	d0, r2, r3
 8001650:	f016 fdf2 	bl	8018238 <fmax>
 8001654:	ec53 2b10 	vmov	r2, r3, d0
 8001658:	4610      	mov	r0, r2
 800165a:	4619      	mov	r1, r3
 800165c:	f7ff fa9c 	bl	8000b98 <__aeabi_d2f>
 8001660:	4602      	mov	r2, r0
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	625a      	str	r2, [r3, #36]	@ 0x24

	return PARAM_CHANGE_OK;
 8001666:	2300      	movs	r3, #0
}
 8001668:	4618      	mov	r0, r3
 800166a:	3708      	adds	r7, #8
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	789abcdf 	.word	0x789abcdf
 8001674:	3f323456 	.word	0x3f323456

08001678 <setMaxSpeedDeg>:

/** Установка максимальной скорости (по модулю) в градусах/секунду (для режима POSITION_MODE)
 */
param_change_t setMaxSpeedDeg(DRIVER_StructDef* driver, float speed)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	ed87 0a00 	vstr	s0, [r7]
	return setMaxSpeed(driver, fabs(speed) * driver->_stepsPerDeg);
 8001684:	edd7 7a00 	vldr	s15, [r7]
 8001688:	eeb0 7ae7 	vabs.f32	s14, s15
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	edd3 7a06 	vldr	s15, [r3, #24]
 8001692:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001696:	eeb0 0a67 	vmov.f32	s0, s15
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f7ff ffbc 	bl	8001618 <setMaxSpeed>
 80016a0:	4603      	mov	r3, r0
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3708      	adds	r7, #8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	0000      	movs	r0, r0
 80016ac:	0000      	movs	r0, r0
	...

080016b0 <setAcceleration>:
 * 	при значении 0 ускорение отключается и мотор работает
 * 	по профилю постоянной максимальной скорости setMaxSpeed().
 * 	по умолчанию 500 ш/с^2
 */
param_change_t setAcceleration(DRIVER_StructDef* driver, uint16_t accel)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	460b      	mov	r3, r1
 80016ba:	807b      	strh	r3, [r7, #2]
	if(driver->_workState == DRIVER_RUN) return PARAM_CHANGE_ERR;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	f993 3017 	ldrsb.w	r3, [r3, #23]
 80016c2:	2b03      	cmp	r3, #3
 80016c4:	d102      	bne.n	80016cc <setAcceleration+0x1c>
 80016c6:	f04f 33ff 	mov.w	r3, #4294967295
 80016ca:	e032      	b.n	8001732 <setAcceleration+0x82>

	driver->_accel = abs(accel);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	887a      	ldrh	r2, [r7, #2]
 80016d0:	839a      	strh	r2, [r3, #28]

	/* Считаем значение _c0 и _N по алгоритму плавного старта */
	if(accel != 0)
 80016d2:	887b      	ldrh	r3, [r7, #2]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d027      	beq.n	8001728 <setAcceleration+0x78>
	{
		driver->_c0 = 1000000.0 * sqrt(2.0 / driver->_accel);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	8b9b      	ldrh	r3, [r3, #28]
 80016dc:	4618      	mov	r0, r3
 80016de:	f7fe ff21 	bl	8000524 <__aeabi_i2d>
 80016e2:	4602      	mov	r2, r0
 80016e4:	460b      	mov	r3, r1
 80016e6:	f04f 0000 	mov.w	r0, #0
 80016ea:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80016ee:	f7ff f8ad 	bl	800084c <__aeabi_ddiv>
 80016f2:	4602      	mov	r2, r0
 80016f4:	460b      	mov	r3, r1
 80016f6:	ec43 2b17 	vmov	d7, r2, r3
 80016fa:	eeb0 0a47 	vmov.f32	s0, s14
 80016fe:	eef0 0a67 	vmov.f32	s1, s15
 8001702:	f016 fbcb 	bl	8017e9c <sqrt>
 8001706:	ec51 0b10 	vmov	r0, r1, d0
 800170a:	a30d      	add	r3, pc, #52	@ (adr r3, 8001740 <setAcceleration+0x90>)
 800170c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001710:	f7fe ff72 	bl	80005f8 <__aeabi_dmul>
 8001714:	4602      	mov	r2, r0
 8001716:	460b      	mov	r3, r1
 8001718:	4610      	mov	r0, r2
 800171a:	4619      	mov	r1, r3
 800171c:	f7ff fa3c 	bl	8000b98 <__aeabi_d2f>
 8001720:	4602      	mov	r2, r0
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001726:	e003      	b.n	8001730 <setAcceleration+0x80>
	}
	else driver->_c0 = 0;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f04f 0200 	mov.w	r2, #0
 800172e:	64da      	str	r2, [r3, #76]	@ 0x4c

	return PARAM_CHANGE_OK;
 8001730:	2300      	movs	r3, #0
}
 8001732:	4618      	mov	r0, r3
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	f3af 8000 	nop.w
 8001740:	00000000 	.word	0x00000000
 8001744:	412e8480 	.word	0x412e8480

08001748 <setAccelerationDeg>:
/** Установка ускорения в градусах в секунду^2 (для режима POSITION_MODE)
 * 	при значении 0 ускорение отключается и мотор работает
 * 	по профилю постоянной максимальной скорости setMaxSpeedDeg().
 */
param_change_t setAccelerationDeg(DRIVER_StructDef* driver, float accel)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	ed87 0a00 	vstr	s0, [r7]
	return setAcceleration(driver, accel * driver->_stepsPerDeg);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	ed93 7a06 	vldr	s14, [r3, #24]
 800175a:	edd7 7a00 	vldr	s15, [r7]
 800175e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001762:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001766:	ee17 3a90 	vmov	r3, s15
 800176a:	b29b      	uxth	r3, r3
 800176c:	4619      	mov	r1, r3
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f7ff ff9e 	bl	80016b0 <setAcceleration>
 8001774:	4603      	mov	r3, r0
}
 8001776:	4618      	mov	r0, r3
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}

0800177e <getCurrentPosDeg>:
}

/** Чтение текущей позиции мотора в градусах
 */
float getCurrentPosDeg(DRIVER_StructDef* driver)
{
 800177e:	b480      	push	{r7}
 8001780:	b083      	sub	sp, #12
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
	return ((float)driver->stepper->pos) / driver->_stepsPerDeg;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	699b      	ldr	r3, [r3, #24]
 800178c:	ee07 3a90 	vmov	s15, r3
 8001790:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	edd3 7a06 	vldr	s15, [r3, #24]
 800179a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800179e:	eef0 7a66 	vmov.f32	s15, s13
}
 80017a2:	eeb0 0a67 	vmov.f32	s0, s15
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr

080017b0 <setTargetSpeed>:

/** Установка целевой скорости в шагах/секунду (для режима VELOCITY_MODE)
 * 	В соответствии с минимальной скоростью, определенной в макросах
 */
param_change_t setTargetSpeed(DRIVER_StructDef* driver, float speed)
{
 80017b0:	b5b0      	push	{r4, r5, r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	ed87 0a00 	vstr	s0, [r7]
	/* Если драйвер в режиме POSITION_MODE */
	if(driver->_runMode != VELOCITY_MODE) return PARAM_CHANGE_ERR;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	7d5b      	ldrb	r3, [r3, #21]
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d002      	beq.n	80017ca <setTargetSpeed+0x1a>
 80017c4:	f04f 33ff 	mov.w	r3, #4294967295
 80017c8:	e0b6      	b.n	8001938 <setTargetSpeed+0x188>

	driver->_targetSpeed = speed;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	683a      	ldr	r2, [r7, #0]
 80017ce:	645a      	str	r2, [r3, #68]	@ 0x44
	driver->_stopFlag = (driver->_targetSpeed == 0);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 80017d6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80017da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017de:	bf0c      	ite	eq
 80017e0:	2301      	moveq	r3, #1
 80017e2:	2300      	movne	r3, #0
 80017e4:	b2da      	uxtb	r2, r3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

	if(driver->_targetSpeed == 0 && driver->_accel == 0)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 80017f2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80017f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017fa:	d10b      	bne.n	8001814 <setTargetSpeed+0x64>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	8b9b      	ldrh	r3, [r3, #28]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d107      	bne.n	8001814 <setTargetSpeed+0x64>
	{
		driver->stepTime = 0;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2200      	movs	r2, #0
 8001808:	611a      	str	r2, [r3, #16]
		brakeDriver(driver);
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f7ff fdef 	bl	80013ee <brakeDriver>

		return PARAM_CHANGE_OK;
 8001810:	2300      	movs	r3, #0
 8001812:	e091      	b.n	8001938 <setTargetSpeed+0x188>
	}

	driver->stepper->dir = (speed > 0) ? 1 : -1;
 8001814:	edd7 7a00 	vldr	s15, [r7]
 8001818:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800181c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001820:	dd01      	ble.n	8001826 <setTargetSpeed+0x76>
 8001822:	2201      	movs	r2, #1
 8001824:	e001      	b.n	800182a <setTargetSpeed+0x7a>
 8001826:	f04f 32ff 	mov.w	r2, #4294967295
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	771a      	strb	r2, [r3, #28]

	/* Ограничение минимальной скорости */
	if (fabs(speed) < MIN_STEP_SPEED) driver->_targetSpeed = MIN_STEP_SPEED * driver->stepper->dir;
 8001830:	edd7 7a00 	vldr	s15, [r7]
 8001834:	eef0 7ae7 	vabs.f32	s15, s15
 8001838:	ee17 0a90 	vmov	r0, s15
 800183c:	f7fe fe84 	bl	8000548 <__aeabi_f2d>
 8001840:	a342      	add	r3, pc, #264	@ (adr r3, 800194c <setTargetSpeed+0x19c>)
 8001842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001846:	f7ff f949 	bl	8000adc <__aeabi_dcmplt>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d014      	beq.n	800187a <setTargetSpeed+0xca>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	7f1b      	ldrb	r3, [r3, #28]
 8001856:	b25b      	sxtb	r3, r3
 8001858:	4618      	mov	r0, r3
 800185a:	f7fe fe63 	bl	8000524 <__aeabi_i2d>
 800185e:	a33b      	add	r3, pc, #236	@ (adr r3, 800194c <setTargetSpeed+0x19c>)
 8001860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001864:	f7fe fec8 	bl	80005f8 <__aeabi_dmul>
 8001868:	4602      	mov	r2, r0
 800186a:	460b      	mov	r3, r1
 800186c:	4610      	mov	r0, r2
 800186e:	4619      	mov	r1, r3
 8001870:	f7ff f992 	bl	8000b98 <__aeabi_d2f>
 8001874:	4602      	mov	r2, r0
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	645a      	str	r2, [r3, #68]	@ 0x44

	if(driver->_accel == 0)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	8b9b      	ldrh	r3, [r3, #28]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d125      	bne.n	80018ce <setTargetSpeed+0x11e>
	{
		driver->_curSpeed = driver->_targetSpeed;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	641a      	str	r2, [r3, #64]	@ 0x40
		driver->stepTime = fabs(1000000.0 / driver->_targetSpeed) - STEP_TIME;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800188e:	4618      	mov	r0, r3
 8001890:	f7fe fe5a 	bl	8000548 <__aeabi_f2d>
 8001894:	4602      	mov	r2, r0
 8001896:	460b      	mov	r3, r1
 8001898:	a12e      	add	r1, pc, #184	@ (adr r1, 8001954 <setTargetSpeed+0x1a4>)
 800189a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800189e:	f7fe ffd5 	bl	800084c <__aeabi_ddiv>
 80018a2:	4602      	mov	r2, r0
 80018a4:	460b      	mov	r3, r1
 80018a6:	4614      	mov	r4, r2
 80018a8:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 80018ac:	f04f 0200 	mov.w	r2, #0
 80018b0:	4b25      	ldr	r3, [pc, #148]	@ (8001948 <setTargetSpeed+0x198>)
 80018b2:	4620      	mov	r0, r4
 80018b4:	4629      	mov	r1, r5
 80018b6:	f7fe fce7 	bl	8000288 <__aeabi_dsub>
 80018ba:	4602      	mov	r2, r0
 80018bc:	460b      	mov	r3, r1
 80018be:	4610      	mov	r0, r2
 80018c0:	4619      	mov	r1, r3
 80018c2:	f7ff f949 	bl	8000b58 <__aeabi_d2uiz>
 80018c6:	4602      	mov	r2, r0
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	611a      	str	r2, [r3, #16]
 80018cc:	e030      	b.n	8001930 <setTargetSpeed+0x180>
	}
	else
	{
		if(driver->_curSpeed == 0)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80018d4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80018d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018dc:	d114      	bne.n	8001908 <setTargetSpeed+0x158>
		{
			driver->stepper->dir = _signf(driver->_targetSpeed);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7fe fe30 	bl	8000548 <__aeabi_f2d>
 80018e8:	a315      	add	r3, pc, #84	@ (adr r3, 8001940 <setTargetSpeed+0x190>)
 80018ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ee:	f7ff f913 	bl	8000b18 <__aeabi_dcmpgt>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d001      	beq.n	80018fc <setTargetSpeed+0x14c>
 80018f8:	2201      	movs	r2, #1
 80018fa:	e001      	b.n	8001900 <setTargetSpeed+0x150>
 80018fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	771a      	strb	r2, [r3, #28]
 8001906:	e013      	b.n	8001930 <setTargetSpeed+0x180>
		}
		else driver->stepper->dir = _signf(driver->_curSpeed);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800190c:	4618      	mov	r0, r3
 800190e:	f7fe fe1b 	bl	8000548 <__aeabi_f2d>
 8001912:	a30b      	add	r3, pc, #44	@ (adr r3, 8001940 <setTargetSpeed+0x190>)
 8001914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001918:	f7ff f8fe 	bl	8000b18 <__aeabi_dcmpgt>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <setTargetSpeed+0x176>
 8001922:	2201      	movs	r2, #1
 8001924:	e001      	b.n	800192a <setTargetSpeed+0x17a>
 8001926:	f04f 32ff 	mov.w	r2, #4294967295
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	771a      	strb	r2, [r3, #28]
	}

	driver->_workState = DRIVER_RUN;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2203      	movs	r2, #3
 8001934:	75da      	strb	r2, [r3, #23]

	return PARAM_CHANGE_OK;
 8001936:	2300      	movs	r3, #0
}
 8001938:	4618      	mov	r0, r3
 800193a:	3708      	adds	r7, #8
 800193c:	46bd      	mov	sp, r7
 800193e:	bdb0      	pop	{r4, r5, r7, pc}
 8001940:	812dea11 	.word	0x812dea11
 8001944:	3d719799 	.word	0x3d719799
 8001948:	40140000 	.word	0x40140000
 800194c:	789abcdf 	.word	0x789abcdf
 8001950:	3f323456 	.word	0x3f323456
 8001954:	00000000 	.word	0x00000000
 8001958:	412e8480 	.word	0x412e8480

0800195c <setTargetSpeedDeg>:

/** Установка целевой скорости в градусах/секунду (для режима VELOCITY_MODE)
 */
param_change_t setTargetSpeedDeg(DRIVER_StructDef* driver, float speed)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	ed87 0a00 	vstr	s0, [r7]
	return setTargetSpeed(driver, speed * driver->_stepsPerDeg);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	ed93 7a06 	vldr	s14, [r3, #24]
 800196e:	edd7 7a00 	vldr	s15, [r7]
 8001972:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001976:	eeb0 0a67 	vmov.f32	s0, s15
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f7ff ff18 	bl	80017b0 <setTargetSpeed>
 8001980:	4603      	mov	r3, r0
}
 8001982:	4618      	mov	r0, r3
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
	...

0800198c <DWT_usDelay>:
  * @brief  This function produces a time delay in us.
  * @param[in] Time in us
  * @return None
  */
void DWT_usDelay(uint32_t us)
{
 800198c:	b480      	push	{r7}
 800198e:	b085      	sub	sp, #20
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
	/* Convert microseconds to processor ticks */
	uint32_t us_count_tic =  us * (SystemCoreClock / 1000000);
 8001994:	4b0c      	ldr	r3, [pc, #48]	@ (80019c8 <DWT_usDelay+0x3c>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a0c      	ldr	r2, [pc, #48]	@ (80019cc <DWT_usDelay+0x40>)
 800199a:	fba2 2303 	umull	r2, r3, r2, r3
 800199e:	0c9a      	lsrs	r2, r3, #18
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	fb02 f303 	mul.w	r3, r2, r3
 80019a6:	60fb      	str	r3, [r7, #12]
	/* Reset the counter */
	DWT_CYCCNT = 0;
 80019a8:	4b09      	ldr	r3, [pc, #36]	@ (80019d0 <DWT_usDelay+0x44>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	601a      	str	r2, [r3, #0]
	while(DWT_CYCCNT < us_count_tic);
 80019ae:	bf00      	nop
 80019b0:	4b07      	ldr	r3, [pc, #28]	@ (80019d0 <DWT_usDelay+0x44>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	68fa      	ldr	r2, [r7, #12]
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d8fa      	bhi.n	80019b0 <DWT_usDelay+0x24>
}
 80019ba:	bf00      	nop
 80019bc:	bf00      	nop
 80019be:	3714      	adds	r7, #20
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr
 80019c8:	20000440 	.word	0x20000440
 80019cc:	431bde83 	.word	0x431bde83
 80019d0:	e0001004 	.word	0xe0001004

080019d4 <fifoInit>:
  /** Функция инициализации fifo буфера
	* При инициализации передается указатель на
	* статический массив/структуру данных и его длина
	*/
fifo_state_t fifoInit(FIFO_StructDef* buf, int8_t* data, uint32_t size)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b085      	sub	sp, #20
 80019d8:	af00      	add	r7, sp, #0
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	60b9      	str	r1, [r7, #8]
 80019de:	607a      	str	r2, [r7, #4]
	buf->size = size;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	60da      	str	r2, [r3, #12]
	buf->data = data;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	68ba      	ldr	r2, [r7, #8]
 80019ea:	601a      	str	r2, [r3, #0]

	if (buf->data == NULL) return FIFO_ERR;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d102      	bne.n	80019fa <fifoInit+0x26>
 80019f4:	f04f 33ff 	mov.w	r3, #4294967295
 80019f8:	e000      	b.n	80019fc <fifoInit+0x28>

	return FIFO_INIT;
 80019fa:	2301      	movs	r3, #1
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3714      	adds	r7, #20
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <fifoClear>:

/** Очистка буфера
 */
fifo_state_t fifoClear(FIFO_StructDef* buf)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b085      	sub	sp, #20
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
	for (uint32_t i = 0; i < buf->size; i++)
 8001a10:	2300      	movs	r3, #0
 8001a12:	60fb      	str	r3, [r7, #12]
 8001a14:	e008      	b.n	8001a28 <fifoClear+0x20>
	{
		buf->data[i] = 0;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	2200      	movs	r2, #0
 8001a20:	701a      	strb	r2, [r3, #0]
	for (uint32_t i = 0; i < buf->size; i++)
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	3301      	adds	r3, #1
 8001a26:	60fb      	str	r3, [r7, #12]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	68fa      	ldr	r2, [r7, #12]
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d3f1      	bcc.n	8001a16 <fifoClear+0xe>
	}

	buf->head = 1;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2201      	movs	r2, #1
 8001a36:	609a      	str	r2, [r3, #8]
	buf->tail = 0;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	605a      	str	r2, [r3, #4]

	return FIFO_CLEARED;
 8001a3e:	2304      	movs	r3, #4
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3714      	adds	r7, #20
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr

08001a4c <cellsForRead>:

/** Число ячеек доступных для ЧТЕНИЯ (заполненное пространство)
 */
uint16_t cellsForRead(FIFO_StructDef* buf)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
	if (buf->head < buf->tail)  return buf->size - buf->tail + buf->head - 1;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	689a      	ldr	r2, [r3, #8]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d20f      	bcs.n	8001a80 <cellsForRead+0x34>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	b29a      	uxth	r2, r3
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	b29b      	uxth	r3, r3
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	b29a      	uxth	r2, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	4413      	add	r3, r2
 8001a78:	b29b      	uxth	r3, r3
 8001a7a:	3b01      	subs	r3, #1
 8001a7c:	b29b      	uxth	r3, r3
 8001a7e:	e009      	b.n	8001a94 <cellsForRead+0x48>
	else return buf->head - buf->tail - 1;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	b29a      	uxth	r2, r3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	b29b      	uxth	r3, r3
 8001a90:	3b01      	subs	r3, #1
 8001a92:	b29b      	uxth	r3, r3
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr

08001aa0 <availableForRead>:

/** Функция определения наличия доступных ячеек для ЧТЕНИЯ (заполненное пространство)
 */
fifo_state_t availableForRead(FIFO_StructDef* buf)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
	if (cellsForRead(buf) > 0) return FIFO_OK;
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f7ff ffcf 	bl	8001a4c <cellsForRead>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <availableForRead+0x18>
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	e000      	b.n	8001aba <availableForRead+0x1a>
	else return FIFO_EMPTY;
 8001ab8:	2302      	movs	r3, #2
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <cellsForWrite>:

/** Число ячеек доступных для ЗАПИСИ (доступное пространство)
 */
uint16_t cellsForWrite(FIFO_StructDef* buf)
{
 8001ac2:	b590      	push	{r4, r7, lr}
 8001ac4:	b083      	sub	sp, #12
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]
	return buf->size - cellsForRead(buf) - 2;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	68db      	ldr	r3, [r3, #12]
 8001ace:	b29c      	uxth	r4, r3
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f7ff ffbb 	bl	8001a4c <cellsForRead>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	1ae3      	subs	r3, r4, r3
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	3b02      	subs	r3, #2
 8001ade:	b29b      	uxth	r3, r3
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	370c      	adds	r7, #12
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd90      	pop	{r4, r7, pc}

08001ae8 <availableForWrite>:

/** Функция определения наличия доступных ячеек для ЗАПИСИ (доступное пространство)
 */
fifo_state_t availableForWrite(FIFO_StructDef* buf)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
	if (cellsForWrite(buf) == 0) return FIFO_OVERFLOW;
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f7ff ffe6 	bl	8001ac2 <cellsForWrite>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d101      	bne.n	8001b00 <availableForWrite+0x18>
 8001afc:	2303      	movs	r3, #3
 8001afe:	e000      	b.n	8001b02 <availableForWrite+0x1a>
	else return FIFO_OK;
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <fifoWrite>:

/** Записать ячейку данных в буфер и переместить указатель "голова" на одну позицию
 */
fifo_state_t fifoWrite(FIFO_StructDef* buf, int8_t value)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	b083      	sub	sp, #12
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
 8001b12:	460b      	mov	r3, r1
 8001b14:	70fb      	strb	r3, [r7, #3]
	if (buf->head >= buf->size) buf->head = 0;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	689a      	ldr	r2, [r3, #8]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	68db      	ldr	r3, [r3, #12]
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d302      	bcc.n	8001b28 <fifoWrite+0x1e>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2200      	movs	r2, #0
 8001b26:	609a      	str	r2, [r3, #8]

	buf->data[buf->head] = value;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	4413      	add	r3, r2
 8001b32:	78fa      	ldrb	r2, [r7, #3]
 8001b34:	701a      	strb	r2, [r3, #0]
	buf->head++;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	1c5a      	adds	r2, r3, #1
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	609a      	str	r2, [r3, #8]

	return FIFO_OK;
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr

08001b4e <fifoRead>:
/** Прочитать ячейку данных из буфера и переместить указатель "хвост" на одну позицию
 * 	Функция принимает указатель на переменную, в которую записывается значение последней
 * 	ячейки fifo буфера
 */
fifo_state_t fifoRead(FIFO_StructDef* buf, int8_t* value)
{
 8001b4e:	b480      	push	{r7}
 8001b50:	b083      	sub	sp, #12
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
 8001b56:	6039      	str	r1, [r7, #0]
	if (value == NULL) return FIFO_ERR;
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d102      	bne.n	8001b64 <fifoRead+0x16>
 8001b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b62:	e017      	b.n	8001b94 <fifoRead+0x46>

	buf->tail++;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	1c5a      	adds	r2, r3, #1
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	605a      	str	r2, [r3, #4]
	if (buf->tail >= buf->size) buf->tail = 0;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685a      	ldr	r2, [r3, #4]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	68db      	ldr	r3, [r3, #12]
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d302      	bcc.n	8001b80 <fifoRead+0x32>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	605a      	str	r2, [r3, #4]

	*value = buf->data[buf->tail];
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	4413      	add	r3, r2
 8001b8a:	f993 2000 	ldrsb.w	r2, [r3]
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	701a      	strb	r2, [r3, #0]

	return FIFO_OK;
 8001b92:	2300      	movs	r3, #0
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <fifoInitChar>:
/** Функция инициализации fifo буфера
 * При инициализации передается указатель на
 * статический массив/структуру данных и его длина
 */
fifo_state_t fifoInitChar(FIFO_CHAR_StructDef* buf, char** data, uint32_t size)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b085      	sub	sp, #20
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	60f8      	str	r0, [r7, #12]
 8001ba8:	60b9      	str	r1, [r7, #8]
 8001baa:	607a      	str	r2, [r7, #4]
	buf->size = size;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	60da      	str	r2, [r3, #12]
	buf->data = data;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	68ba      	ldr	r2, [r7, #8]
 8001bb6:	601a      	str	r2, [r3, #0]

	if (buf->data == NULL) return FIFO_ERR;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d102      	bne.n	8001bc6 <fifoInitChar+0x26>
 8001bc0:	f04f 33ff 	mov.w	r3, #4294967295
 8001bc4:	e000      	b.n	8001bc8 <fifoInitChar+0x28>

	return FIFO_INIT;
 8001bc6:	2301      	movs	r3, #1
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3714      	adds	r7, #20
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr

08001bd4 <cellsForReadChar>:
}

/** Число ячеек доступных для ЧТЕНИЯ (заполненное пространство)
 */
uint16_t cellsForReadChar(FIFO_CHAR_StructDef* buf)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
	if (buf->head < buf->tail)  return buf->size - buf->tail + buf->head - 1;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	689a      	ldr	r2, [r3, #8]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d20f      	bcs.n	8001c08 <cellsForReadChar+0x34>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	b29a      	uxth	r2, r3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	b29a      	uxth	r2, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	b29b      	uxth	r3, r3
 8001bfe:	4413      	add	r3, r2
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	3b01      	subs	r3, #1
 8001c04:	b29b      	uxth	r3, r3
 8001c06:	e009      	b.n	8001c1c <cellsForReadChar+0x48>
	else return buf->head - buf->tail - 1;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	b29a      	uxth	r2, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	3b01      	subs	r3, #1
 8001c1a:	b29b      	uxth	r3, r3
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <availableForReadChar>:

/** Функция определения наличия доступных ячеек для ЧТЕНИЯ (заполненное пространство)
 */
fifo_state_t availableForReadChar(FIFO_CHAR_StructDef* buf)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
	if (cellsForReadChar(buf) > 0) return FIFO_OK;
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f7ff ffcf 	bl	8001bd4 <cellsForReadChar>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <availableForReadChar+0x18>
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	e000      	b.n	8001c42 <availableForReadChar+0x1a>
	else return FIFO_EMPTY;
 8001c40:	2302      	movs	r3, #2
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3708      	adds	r7, #8
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <fifoReadChar>:
/** Прочитать ячейку данных из буфера и переместить указатель "хвост" на одну позицию
 * 	Функция принимает указатель на переменную, в которую записывается значение последней
 * 	ячейки fifo буфера
 */
fifo_state_t fifoReadChar(FIFO_CHAR_StructDef* buf, char* str)
{
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	b082      	sub	sp, #8
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
 8001c52:	6039      	str	r1, [r7, #0]
	if (str == NULL) return FIFO_ERR;
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d102      	bne.n	8001c60 <fifoReadChar+0x16>
 8001c5a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c5e:	e019      	b.n	8001c94 <fifoReadChar+0x4a>

	buf->tail++;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	1c5a      	adds	r2, r3, #1
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	605a      	str	r2, [r3, #4]
	if (buf->tail >= buf->size) buf->tail = 0;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	685a      	ldr	r2, [r3, #4]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	68db      	ldr	r3, [r3, #12]
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d302      	bcc.n	8001c7c <fifoReadChar+0x32>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	605a      	str	r2, [r3, #4]

	strcpy(str, buf->data[buf->tail]);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	4413      	add	r3, r2
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	6838      	ldr	r0, [r7, #0]
 8001c8e:	f014 f924 	bl	8015eda <strcpy>

	return FIFO_OK;
 8001c92:	2300      	movs	r3, #0
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3708      	adds	r7, #8
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}

08001c9c <handlerGcodeInit>:
extern FIFO_StructDef fifoBufSteps;

/** Инициализация структуры обработчика G - команд
 */
void handlerGcodeInit(HANDLER_GCODE_StructDef* ghandler)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
	ghandler->interpolator = &interpolator;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	4a0d      	ldr	r2, [pc, #52]	@ (8001cdc <handlerGcodeInit+0x40>)
 8001ca8:	601a      	str	r2, [r3, #0]

	ghandler->_workState = HANDLER_GCODE_READY;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2202      	movs	r2, #2
 8001cae:	711a      	strb	r2, [r3, #4]
	ghandler->_command = NONE;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	22ff      	movs	r2, #255	@ 0xff
 8001cb4:	715a      	strb	r2, [r3, #5]

	/* Инициализация структуры интерполятора */
	interpolatorInit(ghandler->interpolator);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f000 fa02 	bl	80020c4 <interpolatorInit>

	/* Инициализация FIFO буфера G - команд */
	fifoInitChar(&fifoGcodeBuf, GcodeBuffer4, 256);
 8001cc0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001cc4:	4906      	ldr	r1, [pc, #24]	@ (8001ce0 <handlerGcodeInit+0x44>)
 8001cc6:	4807      	ldr	r0, [pc, #28]	@ (8001ce4 <handlerGcodeInit+0x48>)
 8001cc8:	f7ff ff6a 	bl	8001ba0 <fifoInitChar>
	fifoGcodeBuf.head = 243;
 8001ccc:	4b05      	ldr	r3, [pc, #20]	@ (8001ce4 <handlerGcodeInit+0x48>)
 8001cce:	22f3      	movs	r2, #243	@ 0xf3
 8001cd0:	609a      	str	r2, [r3, #8]
}
 8001cd2:	bf00      	nop
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	20000664 	.word	0x20000664
 8001ce0:	20000000 	.word	0x20000000
 8001ce4:	20000740 	.word	0x20000740

08001ce8 <handlerGcode>:
/** Обработчик G - команд, на вход поступает строка (в будущем будет бинарное представление команды)
 * 	На выходе передается статус, что G команда обработана, и выставлен статус обработчика - номер G - команды,
 * 	по которой необходимо считать шаги
 */
void handlerGcode(HANDLER_GCODE_StructDef* ghandler)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b0a2      	sub	sp, #136	@ 0x88
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
	if(ghandler->_workState == HANDLER_GCODE_READY)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	f040 814a 	bne.w	8001f90 <handlerGcode+0x2a8>
	{
		char str[128] = {0};
 8001cfc:	f107 0308 	add.w	r3, r7, #8
 8001d00:	2280      	movs	r2, #128	@ 0x80
 8001d02:	2100      	movs	r1, #0
 8001d04:	4618      	mov	r0, r3
 8001d06:	f014 f83a 	bl	8015d7e <memset>

		fifoReadChar(&fifoGcodeBuf, str);
 8001d0a:	f107 0308 	add.w	r3, r7, #8
 8001d0e:	4619      	mov	r1, r3
 8001d10:	48a3      	ldr	r0, [pc, #652]	@ (8001fa0 <handlerGcode+0x2b8>)
 8001d12:	f7ff ff9a 	bl	8001c4a <fifoReadChar>

		if (str[0] == 'G')
 8001d16:	7a3b      	ldrb	r3, [r7, #8]
 8001d18:	2b47      	cmp	r3, #71	@ 0x47
 8001d1a:	f040 8135 	bne.w	8001f88 <handlerGcode+0x2a0>
		{
			/* Конечные координаты участка траектории в соответствии с g - командой (мм) */
			Xk = atof(strchr(str, 'X') + 1);
 8001d1e:	f107 0308 	add.w	r3, r7, #8
 8001d22:	2158      	movs	r1, #88	@ 0x58
 8001d24:	4618      	mov	r0, r3
 8001d26:	f014 f832 	bl	8015d8e <strchr>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f012 ffee 	bl	8014d10 <atof>
 8001d34:	eeb0 7a40 	vmov.f32	s14, s0
 8001d38:	eef0 7a60 	vmov.f32	s15, s1
 8001d3c:	4b99      	ldr	r3, [pc, #612]	@ (8001fa4 <handlerGcode+0x2bc>)
 8001d3e:	ed83 7b00 	vstr	d7, [r3]
			Yk = atof(strchr(str, 'Y') + 1);
 8001d42:	f107 0308 	add.w	r3, r7, #8
 8001d46:	2159      	movs	r1, #89	@ 0x59
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f014 f820 	bl	8015d8e <strchr>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	3301      	adds	r3, #1
 8001d52:	4618      	mov	r0, r3
 8001d54:	f012 ffdc 	bl	8014d10 <atof>
 8001d58:	eeb0 7a40 	vmov.f32	s14, s0
 8001d5c:	eef0 7a60 	vmov.f32	s15, s1
 8001d60:	4b91      	ldr	r3, [pc, #580]	@ (8001fa8 <handlerGcode+0x2c0>)
 8001d62:	ed83 7b00 	vstr	d7, [r3]

			if (str[2] == '0')
 8001d66:	7abb      	ldrb	r3, [r7, #10]
 8001d68:	2b30      	cmp	r3, #48	@ 0x30
 8001d6a:	d14c      	bne.n	8001e06 <handlerGcode+0x11e>
			{
				x = round(Xk / MM_PER_STEP); y = round(Yk / MM_PER_STEP);
 8001d6c:	4b8d      	ldr	r3, [pc, #564]	@ (8001fa4 <handlerGcode+0x2bc>)
 8001d6e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d72:	a389      	add	r3, pc, #548	@ (adr r3, 8001f98 <handlerGcode+0x2b0>)
 8001d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d78:	f7fe fd68 	bl	800084c <__aeabi_ddiv>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	460b      	mov	r3, r1
 8001d80:	ec43 2b17 	vmov	d7, r2, r3
 8001d84:	eeb0 0a47 	vmov.f32	s0, s14
 8001d88:	eef0 0a67 	vmov.f32	s1, s15
 8001d8c:	f016 fb78 	bl	8018480 <round>
 8001d90:	ec53 2b10 	vmov	r2, r3, d0
 8001d94:	4610      	mov	r0, r2
 8001d96:	4619      	mov	r1, r3
 8001d98:	f7ff f874 	bl	8000e84 <__aeabi_d2lz>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	460b      	mov	r3, r1
 8001da0:	4982      	ldr	r1, [pc, #520]	@ (8001fac <handlerGcode+0x2c4>)
 8001da2:	e9c1 2300 	strd	r2, r3, [r1]
 8001da6:	4b80      	ldr	r3, [pc, #512]	@ (8001fa8 <handlerGcode+0x2c0>)
 8001da8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001dac:	a37a      	add	r3, pc, #488	@ (adr r3, 8001f98 <handlerGcode+0x2b0>)
 8001dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001db2:	f7fe fd4b 	bl	800084c <__aeabi_ddiv>
 8001db6:	4602      	mov	r2, r0
 8001db8:	460b      	mov	r3, r1
 8001dba:	ec43 2b17 	vmov	d7, r2, r3
 8001dbe:	eeb0 0a47 	vmov.f32	s0, s14
 8001dc2:	eef0 0a67 	vmov.f32	s1, s15
 8001dc6:	f016 fb5b 	bl	8018480 <round>
 8001dca:	ec53 2b10 	vmov	r2, r3, d0
 8001dce:	4610      	mov	r0, r2
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	f7ff f857 	bl	8000e84 <__aeabi_d2lz>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	460b      	mov	r3, r1
 8001dda:	4975      	ldr	r1, [pc, #468]	@ (8001fb0 <handlerGcode+0x2c8>)
 8001ddc:	e9c1 2300 	strd	r2, r3, [r1]
				X = Xk; Y = Yk;
 8001de0:	4b70      	ldr	r3, [pc, #448]	@ (8001fa4 <handlerGcode+0x2bc>)
 8001de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001de6:	4973      	ldr	r1, [pc, #460]	@ (8001fb4 <handlerGcode+0x2cc>)
 8001de8:	e9c1 2300 	strd	r2, r3, [r1]
 8001dec:	4b6e      	ldr	r3, [pc, #440]	@ (8001fa8 <handlerGcode+0x2c0>)
 8001dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001df2:	4971      	ldr	r1, [pc, #452]	@ (8001fb8 <handlerGcode+0x2d0>)
 8001df4:	e9c1 2300 	strd	r2, r3, [r1]

//				printf("G00 X%.6f Y%.6f\n", x * MM_PER_STEP, y * MM_PER_STEP);

				ghandler->_command = G00;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	715a      	strb	r2, [r3, #5]

				ghandler->_workState = HANDLER_GCODE_DONE;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2201      	movs	r2, #1
 8001e02:	711a      	strb	r2, [r3, #4]
				return ;
 8001e04:	e0c5      	b.n	8001f92 <handlerGcode+0x2aa>
			}

			if (str[2] == '1')
 8001e06:	7abb      	ldrb	r3, [r7, #10]
 8001e08:	2b31      	cmp	r3, #49	@ 0x31
 8001e0a:	d11a      	bne.n	8001e42 <handlerGcode+0x15a>
			{
				/* Инициализация и расчет параметров отрезка */
				if (setLine(&line, Xk, Yk) == INTERPOLATOR_DONE)
 8001e0c:	4b65      	ldr	r3, [pc, #404]	@ (8001fa4 <handlerGcode+0x2bc>)
 8001e0e:	ed93 7b00 	vldr	d7, [r3]
 8001e12:	4b65      	ldr	r3, [pc, #404]	@ (8001fa8 <handlerGcode+0x2c0>)
 8001e14:	ed93 6b00 	vldr	d6, [r3]
 8001e18:	eeb0 1a46 	vmov.f32	s2, s12
 8001e1c:	eef0 1a66 	vmov.f32	s3, s13
 8001e20:	eeb0 0a47 	vmov.f32	s0, s14
 8001e24:	eef0 0a67 	vmov.f32	s1, s15
 8001e28:	4864      	ldr	r0, [pc, #400]	@ (8001fbc <handlerGcode+0x2d4>)
 8001e2a:	f000 f961 	bl	80020f0 <setLine>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d106      	bne.n	8001e42 <handlerGcode+0x15a>
				{
					ghandler->_command = G01;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2201      	movs	r2, #1
 8001e38:	715a      	strb	r2, [r3, #5]

					ghandler->_workState = HANDLER_GCODE_DONE;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	711a      	strb	r2, [r3, #4]
					return ;
 8001e40:	e0a7      	b.n	8001f92 <handlerGcode+0x2aa>
				}
			}

			if (str[2] == '2')
 8001e42:	7abb      	ldrb	r3, [r7, #10]
 8001e44:	2b32      	cmp	r3, #50	@ 0x32
 8001e46:	d14d      	bne.n	8001ee4 <handlerGcode+0x1fc>
			{
				/* Относительные координаты центра дуги (мм) */
				I = atof(strchr(str, 'I') + 1);
 8001e48:	f107 0308 	add.w	r3, r7, #8
 8001e4c:	2149      	movs	r1, #73	@ 0x49
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f013 ff9d 	bl	8015d8e <strchr>
 8001e54:	4603      	mov	r3, r0
 8001e56:	3301      	adds	r3, #1
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f012 ff59 	bl	8014d10 <atof>
 8001e5e:	eeb0 7a40 	vmov.f32	s14, s0
 8001e62:	eef0 7a60 	vmov.f32	s15, s1
 8001e66:	4b56      	ldr	r3, [pc, #344]	@ (8001fc0 <handlerGcode+0x2d8>)
 8001e68:	ed83 7b00 	vstr	d7, [r3]
				J = atof(strchr(str, 'J') + 1);
 8001e6c:	f107 0308 	add.w	r3, r7, #8
 8001e70:	214a      	movs	r1, #74	@ 0x4a
 8001e72:	4618      	mov	r0, r3
 8001e74:	f013 ff8b 	bl	8015d8e <strchr>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f012 ff47 	bl	8014d10 <atof>
 8001e82:	eeb0 7a40 	vmov.f32	s14, s0
 8001e86:	eef0 7a60 	vmov.f32	s15, s1
 8001e8a:	4b4e      	ldr	r3, [pc, #312]	@ (8001fc4 <handlerGcode+0x2dc>)
 8001e8c:	ed83 7b00 	vstr	d7, [r3]

				/* Инициализация и расчет параметров дуги G02 */
				if (setArc(&arc, Xk, Yk, I, J, 1) == INTERPOLATOR_DONE)
 8001e90:	4b44      	ldr	r3, [pc, #272]	@ (8001fa4 <handlerGcode+0x2bc>)
 8001e92:	ed93 7b00 	vldr	d7, [r3]
 8001e96:	4b44      	ldr	r3, [pc, #272]	@ (8001fa8 <handlerGcode+0x2c0>)
 8001e98:	ed93 6b00 	vldr	d6, [r3]
 8001e9c:	4b48      	ldr	r3, [pc, #288]	@ (8001fc0 <handlerGcode+0x2d8>)
 8001e9e:	ed93 5b00 	vldr	d5, [r3]
 8001ea2:	4b48      	ldr	r3, [pc, #288]	@ (8001fc4 <handlerGcode+0x2dc>)
 8001ea4:	ed93 4b00 	vldr	d4, [r3]
 8001ea8:	2101      	movs	r1, #1
 8001eaa:	eeb0 3a44 	vmov.f32	s6, s8
 8001eae:	eef0 3a64 	vmov.f32	s7, s9
 8001eb2:	eeb0 2a45 	vmov.f32	s4, s10
 8001eb6:	eef0 2a65 	vmov.f32	s5, s11
 8001eba:	eeb0 1a46 	vmov.f32	s2, s12
 8001ebe:	eef0 1a66 	vmov.f32	s3, s13
 8001ec2:	eeb0 0a47 	vmov.f32	s0, s14
 8001ec6:	eef0 0a67 	vmov.f32	s1, s15
 8001eca:	483f      	ldr	r0, [pc, #252]	@ (8001fc8 <handlerGcode+0x2e0>)
 8001ecc:	f000 fab4 	bl	8002438 <setArc>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d106      	bne.n	8001ee4 <handlerGcode+0x1fc>
				{
					ghandler->_command = G02;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2202      	movs	r2, #2
 8001eda:	715a      	strb	r2, [r3, #5]

					ghandler->_workState = HANDLER_GCODE_DONE;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	711a      	strb	r2, [r3, #4]
					return ;
 8001ee2:	e056      	b.n	8001f92 <handlerGcode+0x2aa>
				}
			}

			if (str[2] == '3')
 8001ee4:	7abb      	ldrb	r3, [r7, #10]
 8001ee6:	2b33      	cmp	r3, #51	@ 0x33
 8001ee8:	d152      	bne.n	8001f90 <handlerGcode+0x2a8>
			{
				/* Относительные координаты центра дуги (мм) */
				I = atof(strchr(str, 'I') + 1);
 8001eea:	f107 0308 	add.w	r3, r7, #8
 8001eee:	2149      	movs	r1, #73	@ 0x49
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f013 ff4c 	bl	8015d8e <strchr>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	3301      	adds	r3, #1
 8001efa:	4618      	mov	r0, r3
 8001efc:	f012 ff08 	bl	8014d10 <atof>
 8001f00:	eeb0 7a40 	vmov.f32	s14, s0
 8001f04:	eef0 7a60 	vmov.f32	s15, s1
 8001f08:	4b2d      	ldr	r3, [pc, #180]	@ (8001fc0 <handlerGcode+0x2d8>)
 8001f0a:	ed83 7b00 	vstr	d7, [r3]
				J = atof(strchr(str, 'J') + 1);
 8001f0e:	f107 0308 	add.w	r3, r7, #8
 8001f12:	214a      	movs	r1, #74	@ 0x4a
 8001f14:	4618      	mov	r0, r3
 8001f16:	f013 ff3a 	bl	8015d8e <strchr>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f012 fef6 	bl	8014d10 <atof>
 8001f24:	eeb0 7a40 	vmov.f32	s14, s0
 8001f28:	eef0 7a60 	vmov.f32	s15, s1
 8001f2c:	4b25      	ldr	r3, [pc, #148]	@ (8001fc4 <handlerGcode+0x2dc>)
 8001f2e:	ed83 7b00 	vstr	d7, [r3]

				/* Инициализация и расчет параметров дуги G03 */
				if (setArc(&arc, Xk, Yk, I, J, -1) == INTERPOLATOR_DONE)
 8001f32:	4b1c      	ldr	r3, [pc, #112]	@ (8001fa4 <handlerGcode+0x2bc>)
 8001f34:	ed93 7b00 	vldr	d7, [r3]
 8001f38:	4b1b      	ldr	r3, [pc, #108]	@ (8001fa8 <handlerGcode+0x2c0>)
 8001f3a:	ed93 6b00 	vldr	d6, [r3]
 8001f3e:	4b20      	ldr	r3, [pc, #128]	@ (8001fc0 <handlerGcode+0x2d8>)
 8001f40:	ed93 5b00 	vldr	d5, [r3]
 8001f44:	4b1f      	ldr	r3, [pc, #124]	@ (8001fc4 <handlerGcode+0x2dc>)
 8001f46:	ed93 4b00 	vldr	d4, [r3]
 8001f4a:	f04f 31ff 	mov.w	r1, #4294967295
 8001f4e:	eeb0 3a44 	vmov.f32	s6, s8
 8001f52:	eef0 3a64 	vmov.f32	s7, s9
 8001f56:	eeb0 2a45 	vmov.f32	s4, s10
 8001f5a:	eef0 2a65 	vmov.f32	s5, s11
 8001f5e:	eeb0 1a46 	vmov.f32	s2, s12
 8001f62:	eef0 1a66 	vmov.f32	s3, s13
 8001f66:	eeb0 0a47 	vmov.f32	s0, s14
 8001f6a:	eef0 0a67 	vmov.f32	s1, s15
 8001f6e:	4816      	ldr	r0, [pc, #88]	@ (8001fc8 <handlerGcode+0x2e0>)
 8001f70:	f000 fa62 	bl	8002438 <setArc>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d10a      	bne.n	8001f90 <handlerGcode+0x2a8>
				{
					ghandler->_command = G03;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2203      	movs	r2, #3
 8001f7e:	715a      	strb	r2, [r3, #5]

					ghandler->_workState = HANDLER_GCODE_DONE;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2201      	movs	r2, #1
 8001f84:	711a      	strb	r2, [r3, #4]
					return ;
 8001f86:	e004      	b.n	8001f92 <handlerGcode+0x2aa>
				}
			}
		}
		else
		{
			ghandler->_workState = HANDLER_GCODE_READY;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2202      	movs	r2, #2
 8001f8c:	711a      	strb	r2, [r3, #4]
			return ;
 8001f8e:	e000      	b.n	8001f92 <handlerGcode+0x2aa>
		}
	}

	return ;
 8001f90:	bf00      	nop
}
 8001f92:	3788      	adds	r7, #136	@ 0x88
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	a0000000 	.word	0xa0000000
 8001f9c:	3f699999 	.word	0x3f699999
 8001fa0:	20000740 	.word	0x20000740
 8001fa4:	20000668 	.word	0x20000668
 8001fa8:	20000670 	.word	0x20000670
 8001fac:	20000750 	.word	0x20000750
 8001fb0:	20000758 	.word	0x20000758
 8001fb4:	20000760 	.word	0x20000760
 8001fb8:	20000768 	.word	0x20000768
 8001fbc:	20000688 	.word	0x20000688
 8001fc0:	20000678 	.word	0x20000678
 8001fc4:	20000680 	.word	0x20000680
 8001fc8:	200006e8 	.word	0x200006e8

08001fcc <handlerGcommand>:

/** Расчетный обработчик конкретной g - команды
 */
void handlerGcommand(HANDLER_GCODE_StructDef* ghandler)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af02      	add	r7, sp, #8
 8001fd2:	6078      	str	r0, [r7, #4]
	if(ghandler->_workState == HANDLER_GCODE_DONE)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d14c      	bne.n	8002078 <handlerGcommand+0xac>
	{

		switch(ghandler->_command)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	2b04      	cmp	r3, #4
 8001fe8:	d846      	bhi.n	8002078 <handlerGcommand+0xac>
 8001fea:	a201      	add	r2, pc, #4	@ (adr r2, 8001ff0 <handlerGcommand+0x24>)
 8001fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ff0:	08002005 	.word	0x08002005
 8001ff4:	0800200d 	.word	0x0800200d
 8001ff8:	08002015 	.word	0x08002015
 8001ffc:	08002033 	.word	0x08002033
 8002000:	08002051 	.word	0x08002051
		{
			case NONE:
			{
				ghandler->_workState = HANDLER_GCODE_READY;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2202      	movs	r2, #2
 8002008:	711a      	strb	r2, [r3, #4]
				return ;
 800200a:	e036      	b.n	800207a <handlerGcommand+0xae>
			}

			/* Расчет команды G00 */
			case G00:
			{
				ghandler->_workState = HANDLER_GCODE_READY;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2202      	movs	r2, #2
 8002010:	711a      	strb	r2, [r3, #4]
				return;
 8002012:	e032      	b.n	800207a <handlerGcommand+0xae>
			}

			/* Расчет команды G01 */
			case G01:
			{
				if(handlerLine(&interpolator, &fifoBufSteps, &line, 0, 1) == INTERPOLATOR_DONE)
 8002014:	2301      	movs	r3, #1
 8002016:	9300      	str	r3, [sp, #0]
 8002018:	2300      	movs	r3, #0
 800201a:	4a19      	ldr	r2, [pc, #100]	@ (8002080 <handlerGcommand+0xb4>)
 800201c:	4919      	ldr	r1, [pc, #100]	@ (8002084 <handlerGcommand+0xb8>)
 800201e:	481a      	ldr	r0, [pc, #104]	@ (8002088 <handlerGcommand+0xbc>)
 8002020:	f000 fc02 	bl	8002828 <handlerLine>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d121      	bne.n	800206e <handlerGcommand+0xa2>
				{
					ghandler->_workState = HANDLER_GCODE_READY;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2202      	movs	r2, #2
 800202e:	711a      	strb	r2, [r3, #4]
				}
				break;
 8002030:	e01d      	b.n	800206e <handlerGcommand+0xa2>
			}

			/* Расчет команды G02 */
			case G02:
			{
				if(handlerArc(&interpolator, &fifoBufSteps, &arc, 0, 1) == INTERPOLATOR_DONE)
 8002032:	2301      	movs	r3, #1
 8002034:	9300      	str	r3, [sp, #0]
 8002036:	2300      	movs	r3, #0
 8002038:	4a14      	ldr	r2, [pc, #80]	@ (800208c <handlerGcommand+0xc0>)
 800203a:	4912      	ldr	r1, [pc, #72]	@ (8002084 <handlerGcommand+0xb8>)
 800203c:	4812      	ldr	r0, [pc, #72]	@ (8002088 <handlerGcommand+0xbc>)
 800203e:	f000 fdd7 	bl	8002bf0 <handlerArc>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d114      	bne.n	8002072 <handlerGcommand+0xa6>
				{
					ghandler->_workState = HANDLER_GCODE_READY;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2202      	movs	r2, #2
 800204c:	711a      	strb	r2, [r3, #4]
				}
				break;
 800204e:	e010      	b.n	8002072 <handlerGcommand+0xa6>
			}

			/* Расчет команды G03 */
			case G03:
			{
				if(handlerArc(&interpolator, &fifoBufSteps, &arc, 0, 1) == INTERPOLATOR_DONE)
 8002050:	2301      	movs	r3, #1
 8002052:	9300      	str	r3, [sp, #0]
 8002054:	2300      	movs	r3, #0
 8002056:	4a0d      	ldr	r2, [pc, #52]	@ (800208c <handlerGcommand+0xc0>)
 8002058:	490a      	ldr	r1, [pc, #40]	@ (8002084 <handlerGcommand+0xb8>)
 800205a:	480b      	ldr	r0, [pc, #44]	@ (8002088 <handlerGcommand+0xbc>)
 800205c:	f000 fdc8 	bl	8002bf0 <handlerArc>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d107      	bne.n	8002076 <handlerGcommand+0xaa>
				{
					ghandler->_workState = HANDLER_GCODE_READY;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2202      	movs	r2, #2
 800206a:	711a      	strb	r2, [r3, #4]
				}
				break;
 800206c:	e003      	b.n	8002076 <handlerGcommand+0xaa>
				break;
 800206e:	bf00      	nop
 8002070:	e002      	b.n	8002078 <handlerGcommand+0xac>
				break;
 8002072:	bf00      	nop
 8002074:	e000      	b.n	8002078 <handlerGcommand+0xac>
				break;
 8002076:	bf00      	nop
			}
		}
	}

	return;
 8002078:	bf00      	nop
}
 800207a:	3708      	adds	r7, #8
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	20000688 	.word	0x20000688
 8002084:	20001b70 	.word	0x20001b70
 8002088:	20000664 	.word	0x20000664
 800208c:	200006e8 	.word	0x200006e8

08002090 <handlerStateCalculate>:

void handlerStateCalculate(HANDLER_GCODE_StructDef* ghandler)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
	if (ghandler->_workState == HANDLER_GCODE_READY)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d109      	bne.n	80020b6 <handlerStateCalculate+0x26>
	{
		if (ghandler->interpolator->_workState == INTERPOLATOR_READY) ghandler->_workState = HANDLER_GCODE_END;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f993 3000 	ldrsb.w	r3, [r3]
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d103      	bne.n	80020b6 <handlerStateCalculate+0x26>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	711a      	strb	r2, [r3, #4]
	}

	return;
 80020b4:	bf00      	nop
 80020b6:	bf00      	nop
}
 80020b8:	370c      	adds	r7, #12
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
	...

080020c4 <interpolatorInit>:
FIFO_StructDef fifoBufSteps;

/** Инициализация структура интерполятора
 */
void interpolatorInit(INTERPOLATOR_StructDef* interpolator)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
	interpolator->_workState = INTERPOLATOR_READY;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2201      	movs	r2, #1
 80020d0:	701a      	strb	r2, [r3, #0]

	fifoInit(&fifoBufSteps, bufSteps, FIFO_STEPS_SIZE);
 80020d2:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 80020d6:	4904      	ldr	r1, [pc, #16]	@ (80020e8 <interpolatorInit+0x24>)
 80020d8:	4804      	ldr	r0, [pc, #16]	@ (80020ec <interpolatorInit+0x28>)
 80020da:	f7ff fc7b 	bl	80019d4 <fifoInit>
}
 80020de:	bf00      	nop
 80020e0:	3708      	adds	r7, #8
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	20000770 	.word	0x20000770
 80020ec:	20001b70 	.word	0x20001b70

080020f0 <setLine>:

/** Функция определения параметров отрезка
 */
handler_interpolator_state_t setLine(LINE_StructDef* line, double Xk, double Yk)
{
 80020f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020f4:	b088      	sub	sp, #32
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	61f8      	str	r0, [r7, #28]
 80020fa:	ed87 0b04 	vstr	d0, [r7, #16]
 80020fe:	ed87 1b02 	vstr	d1, [r7, #8]
    /* Координаты отрезка в абсолютных координатах (мм) */
    line->X0 = X;
 8002102:	4b95      	ldr	r3, [pc, #596]	@ (8002358 <setLine+0x268>)
 8002104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002108:	69f9      	ldr	r1, [r7, #28]
 800210a:	e9c1 2300 	strd	r2, r3, [r1]
    line->Y0 = Y;
 800210e:	4b93      	ldr	r3, [pc, #588]	@ (800235c <setLine+0x26c>)
 8002110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002114:	69f9      	ldr	r1, [r7, #28]
 8002116:	e9c1 2302 	strd	r2, r3, [r1, #8]
    line->Xk = Xk;
 800211a:	69f9      	ldr	r1, [r7, #28]
 800211c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002120:	e9c1 2304 	strd	r2, r3, [r1, #16]
    line->Yk = Yk;
 8002124:	69f9      	ldr	r1, [r7, #28]
 8002126:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800212a:	e9c1 2306 	strd	r2, r3, [r1, #24]

    /* Проверка существования прямой */
    if(fabs(X - Xk) <= MM_PER_STEP && fabs(Y - Yk) <= MM_PER_STEP) return INTERPOLATOR_ERROR;
 800212e:	4b8a      	ldr	r3, [pc, #552]	@ (8002358 <setLine+0x268>)
 8002130:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002134:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002138:	f7fe f8a6 	bl	8000288 <__aeabi_dsub>
 800213c:	4602      	mov	r2, r0
 800213e:	460b      	mov	r3, r1
 8002140:	603a      	str	r2, [r7, #0]
 8002142:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002146:	607b      	str	r3, [r7, #4]
 8002148:	a381      	add	r3, pc, #516	@ (adr r3, 8002350 <setLine+0x260>)
 800214a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800214e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002152:	f7fe fccd 	bl	8000af0 <__aeabi_dcmple>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d018      	beq.n	800218e <setLine+0x9e>
 800215c:	4b7f      	ldr	r3, [pc, #508]	@ (800235c <setLine+0x26c>)
 800215e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002162:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002166:	f7fe f88f 	bl	8000288 <__aeabi_dsub>
 800216a:	4602      	mov	r2, r0
 800216c:	460b      	mov	r3, r1
 800216e:	4692      	mov	sl, r2
 8002170:	f023 4b00 	bic.w	fp, r3, #2147483648	@ 0x80000000
 8002174:	a376      	add	r3, pc, #472	@ (adr r3, 8002350 <setLine+0x260>)
 8002176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800217a:	4650      	mov	r0, sl
 800217c:	4659      	mov	r1, fp
 800217e:	f7fe fcb7 	bl	8000af0 <__aeabi_dcmple>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d002      	beq.n	800218e <setLine+0x9e>
 8002188:	f04f 33ff 	mov.w	r3, #4294967295
 800218c:	e144      	b.n	8002418 <setLine+0x328>

    /* Определение смещения по осям */
    line->dX = line->Xk - line->X0;
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800219a:	f7fe f875 	bl	8000288 <__aeabi_dsub>
 800219e:	4602      	mov	r2, r0
 80021a0:	460b      	mov	r3, r1
 80021a2:	69f9      	ldr	r1, [r7, #28]
 80021a4:	e9c1 2308 	strd	r2, r3, [r1, #32]
    line->dY = line->Yk - line->Y0;
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80021b4:	f7fe f868 	bl	8000288 <__aeabi_dsub>
 80021b8:	4602      	mov	r2, r0
 80021ba:	460b      	mov	r3, r1
 80021bc:	69f9      	ldr	r1, [r7, #28]
 80021be:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28

    /* Определение координат станка в относительной СК начала отрезка (мм) */
    line->x_rel = x * MM_PER_STEP - line->X0;
 80021c2:	4b67      	ldr	r3, [pc, #412]	@ (8002360 <setLine+0x270>)
 80021c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021c8:	4610      	mov	r0, r2
 80021ca:	4619      	mov	r1, r3
 80021cc:	f7fe fe04 	bl	8000dd8 <__aeabi_l2f>
 80021d0:	ee07 0a10 	vmov	s14, r0
 80021d4:	eddf 7a63 	vldr	s15, [pc, #396]	@ 8002364 <setLine+0x274>
 80021d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021dc:	ee17 0a90 	vmov	r0, s15
 80021e0:	f7fe f9b2 	bl	8000548 <__aeabi_f2d>
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ea:	f7fe f84d 	bl	8000288 <__aeabi_dsub>
 80021ee:	4602      	mov	r2, r0
 80021f0:	460b      	mov	r3, r1
 80021f2:	69f9      	ldr	r1, [r7, #28]
 80021f4:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    line->y_rel = y * MM_PER_STEP - line->Y0;
 80021f8:	4b5b      	ldr	r3, [pc, #364]	@ (8002368 <setLine+0x278>)
 80021fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021fe:	4610      	mov	r0, r2
 8002200:	4619      	mov	r1, r3
 8002202:	f7fe fde9 	bl	8000dd8 <__aeabi_l2f>
 8002206:	ee07 0a10 	vmov	s14, r0
 800220a:	eddf 7a56 	vldr	s15, [pc, #344]	@ 8002364 <setLine+0x274>
 800220e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002212:	ee17 0a90 	vmov	r0, s15
 8002216:	f7fe f997 	bl	8000548 <__aeabi_f2d>
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002220:	f7fe f832 	bl	8000288 <__aeabi_dsub>
 8002224:	4602      	mov	r2, r0
 8002226:	460b      	mov	r3, r1
 8002228:	69f9      	ldr	r1, [r7, #28]
 800222a:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38

    /* Начальное значения оценочной функции */
    line->F = line->dX * line->y_rel - line->dY * line->x_rel;
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800223a:	f7fe f9dd 	bl	80005f8 <__aeabi_dmul>
 800223e:	4602      	mov	r2, r0
 8002240:	460b      	mov	r3, r1
 8002242:	4692      	mov	sl, r2
 8002244:	469b      	mov	fp, r3
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8002252:	f7fe f9d1 	bl	80005f8 <__aeabi_dmul>
 8002256:	4602      	mov	r2, r0
 8002258:	460b      	mov	r3, r1
 800225a:	4650      	mov	r0, sl
 800225c:	4659      	mov	r1, fp
 800225e:	f7fe f813 	bl	8000288 <__aeabi_dsub>
 8002262:	4602      	mov	r2, r0
 8002264:	460b      	mov	r3, r1
 8002266:	69f9      	ldr	r1, [r7, #28]
 8002268:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    /* Определение четверти, в которой расположен отрезок */
    if (line->dX >= 0 && line->dY > 0) { line->dx = 1; line->dy = 1; line->s = 1; }             	//< 1 четверть
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8002272:	f04f 0200 	mov.w	r2, #0
 8002276:	f04f 0300 	mov.w	r3, #0
 800227a:	f7fe fc43 	bl	8000b04 <__aeabi_dcmpge>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d018      	beq.n	80022b6 <setLine+0x1c6>
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800228a:	f04f 0200 	mov.w	r2, #0
 800228e:	f04f 0300 	mov.w	r3, #0
 8002292:	f7fe fc41 	bl	8000b18 <__aeabi_dcmpgt>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d00c      	beq.n	80022b6 <setLine+0x1c6>
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	2201      	movs	r2, #1
 80022a8:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	2201      	movs	r2, #1
 80022b0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80022b4:	e07e      	b.n	80023b4 <setLine+0x2c4>
    else if (line->dY <= 0 && line->dX > 0) { line->dx = 1; line->dy = -1; line->s = -1; }       	//< 4 четверть
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 80022bc:	f04f 0200 	mov.w	r2, #0
 80022c0:	f04f 0300 	mov.w	r3, #0
 80022c4:	f7fe fc14 	bl	8000af0 <__aeabi_dcmple>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d018      	beq.n	8002300 <setLine+0x210>
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80022d4:	f04f 0200 	mov.w	r2, #0
 80022d8:	f04f 0300 	mov.w	r3, #0
 80022dc:	f7fe fc1c 	bl	8000b18 <__aeabi_dcmpgt>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d00c      	beq.n	8002300 <setLine+0x210>
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	2201      	movs	r2, #1
 80022ea:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	22ff      	movs	r2, #255	@ 0xff
 80022f2:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	22ff      	movs	r2, #255	@ 0xff
 80022fa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80022fe:	e059      	b.n	80023b4 <setLine+0x2c4>
    else if (line->dX <= 0 && line->dY < 0) { line->dx = -1; line->dy = -1; line->s = 1; }      	//< 3 четверть
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8002306:	f04f 0200 	mov.w	r2, #0
 800230a:	f04f 0300 	mov.w	r3, #0
 800230e:	f7fe fbef 	bl	8000af0 <__aeabi_dcmple>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d029      	beq.n	800236c <setLine+0x27c>
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800231e:	f04f 0200 	mov.w	r2, #0
 8002322:	f04f 0300 	mov.w	r3, #0
 8002326:	f7fe fbd9 	bl	8000adc <__aeabi_dcmplt>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d01d      	beq.n	800236c <setLine+0x27c>
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	22ff      	movs	r2, #255	@ 0xff
 8002334:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	22ff      	movs	r2, #255	@ 0xff
 800233c:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	2201      	movs	r2, #1
 8002344:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8002348:	e034      	b.n	80023b4 <setLine+0x2c4>
 800234a:	bf00      	nop
 800234c:	f3af 8000 	nop.w
 8002350:	a0000000 	.word	0xa0000000
 8002354:	3f699999 	.word	0x3f699999
 8002358:	20000760 	.word	0x20000760
 800235c:	20000768 	.word	0x20000768
 8002360:	20000750 	.word	0x20000750
 8002364:	3b4ccccd 	.word	0x3b4ccccd
 8002368:	20000758 	.word	0x20000758
    else if (line->dY >= 0 && line->dX < 0) { line->dx = -1; line->dy = 1; line->s = -1; }       	//< 2 четверть
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8002372:	f04f 0200 	mov.w	r2, #0
 8002376:	f04f 0300 	mov.w	r3, #0
 800237a:	f7fe fbc3 	bl	8000b04 <__aeabi_dcmpge>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d017      	beq.n	80023b4 <setLine+0x2c4>
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800238a:	f04f 0200 	mov.w	r2, #0
 800238e:	f04f 0300 	mov.w	r3, #0
 8002392:	f7fe fba3 	bl	8000adc <__aeabi_dcmplt>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d00b      	beq.n	80023b4 <setLine+0x2c4>
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	22ff      	movs	r2, #255	@ 0xff
 80023a0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	2201      	movs	r2, #1
 80023a8:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	22ff      	movs	r2, #255	@ 0xff
 80023b0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Определение угла между отрезком и осью OX (радианы) */
    if (fabs(line->dX) <= MM_PER_STEP)
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80023ba:	4690      	mov	r8, r2
 80023bc:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 80023c0:	a319      	add	r3, pc, #100	@ (adr r3, 8002428 <setLine+0x338>)
 80023c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023c6:	4640      	mov	r0, r8
 80023c8:	4649      	mov	r1, r9
 80023ca:	f7fe fb91 	bl	8000af0 <__aeabi_dcmple>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d006      	beq.n	80023e2 <setLine+0x2f2>
    {
        line->alfa = M_PI_2;
 80023d4:	69f9      	ldr	r1, [r7, #28]
 80023d6:	a316      	add	r3, pc, #88	@ (adr r3, 8002430 <setLine+0x340>)
 80023d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023dc:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 80023e0:	e019      	b.n	8002416 <setLine+0x326>
    }
    else line->alfa = fabs(atan(line->dY / line->dX));
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80023ee:	f7fe fa2d 	bl	800084c <__aeabi_ddiv>
 80023f2:	4602      	mov	r2, r0
 80023f4:	460b      	mov	r3, r1
 80023f6:	ec43 2b17 	vmov	d7, r2, r3
 80023fa:	eeb0 0a47 	vmov.f32	s0, s14
 80023fe:	eef0 0a67 	vmov.f32	s1, s15
 8002402:	f015 fd79 	bl	8017ef8 <atan>
 8002406:	ec53 2b10 	vmov	r2, r3, d0
 800240a:	4614      	mov	r4, r2
 800240c:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	e9c3 4514 	strd	r4, r5, [r3, #80]	@ 0x50

    return INTERPOLATOR_DONE;
 8002416:	2300      	movs	r3, #0
}
 8002418:	4618      	mov	r0, r3
 800241a:	3720      	adds	r7, #32
 800241c:	46bd      	mov	sp, r7
 800241e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002422:	bf00      	nop
 8002424:	f3af 8000 	nop.w
 8002428:	a0000000 	.word	0xa0000000
 800242c:	3f699999 	.word	0x3f699999
 8002430:	54442d18 	.word	0x54442d18
 8002434:	3ff921fb 	.word	0x3ff921fb

08002438 <setArc>:

/** Функция определения параметров дуги
 */
handler_interpolator_state_t setArc(ARC_StructDef* arc, double Xk, double Yk, double I, double J, int8_t dir)
{
 8002438:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800243c:	b08a      	sub	sp, #40	@ 0x28
 800243e:	af00      	add	r7, sp, #0
 8002440:	6278      	str	r0, [r7, #36]	@ 0x24
 8002442:	ed87 0b06 	vstr	d0, [r7, #24]
 8002446:	ed87 1b04 	vstr	d1, [r7, #16]
 800244a:	ed87 2b02 	vstr	d2, [r7, #8]
 800244e:	ed87 3b00 	vstr	d3, [r7]
 8002452:	460b      	mov	r3, r1
 8002454:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    /* Координаты точек дуги в абсолютной СК (мм) */
    arc->X0 = X;
 8002458:	4ba3      	ldr	r3, [pc, #652]	@ (80026e8 <setArc+0x2b0>)
 800245a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800245e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002460:	e9c1 2300 	strd	r2, r3, [r1]
    arc->Y0 = Y;
 8002464:	4ba1      	ldr	r3, [pc, #644]	@ (80026ec <setArc+0x2b4>)
 8002466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800246a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800246c:	e9c1 2302 	strd	r2, r3, [r1, #8]
    arc->Xk = Xk;
 8002470:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002472:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002476:	e9c1 2304 	strd	r2, r3, [r1, #16]
    arc->Yk = Yk;
 800247a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800247c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002480:	e9c1 2306 	strd	r2, r3, [r1, #24]
    arc->Xc = arc->X0 + I;
 8002484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002486:	e9d3 0100 	ldrd	r0, r1, [r3]
 800248a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800248e:	f7fd fefd 	bl	800028c <__adddf3>
 8002492:	4602      	mov	r2, r0
 8002494:	460b      	mov	r3, r1
 8002496:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002498:	e9c1 2308 	strd	r2, r3, [r1, #32]
    arc->Yc = arc->Y0 + J;
 800249c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800249e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80024a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80024a6:	f7fd fef1 	bl	800028c <__adddf3>
 80024aa:	4602      	mov	r2, r0
 80024ac:	460b      	mov	r3, r1
 80024ae:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80024b0:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28

    /* Проверка существования дуги */
    if (fabs(X - Xk) <= MM_PER_STEP && fabs(Y - Yk) <= MM_PER_STEP) return INTERPOLATOR_ERROR;
 80024b4:	4b8c      	ldr	r3, [pc, #560]	@ (80026e8 <setArc+0x2b0>)
 80024b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024ba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024be:	f7fd fee3 	bl	8000288 <__aeabi_dsub>
 80024c2:	4602      	mov	r2, r0
 80024c4:	460b      	mov	r3, r1
 80024c6:	4690      	mov	r8, r2
 80024c8:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 80024cc:	a384      	add	r3, pc, #528	@ (adr r3, 80026e0 <setArc+0x2a8>)
 80024ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024d2:	4640      	mov	r0, r8
 80024d4:	4649      	mov	r1, r9
 80024d6:	f7fe fb0b 	bl	8000af0 <__aeabi_dcmple>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d018      	beq.n	8002512 <setArc+0xda>
 80024e0:	4b82      	ldr	r3, [pc, #520]	@ (80026ec <setArc+0x2b4>)
 80024e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024e6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80024ea:	f7fd fecd 	bl	8000288 <__aeabi_dsub>
 80024ee:	4602      	mov	r2, r0
 80024f0:	460b      	mov	r3, r1
 80024f2:	4614      	mov	r4, r2
 80024f4:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 80024f8:	a379      	add	r3, pc, #484	@ (adr r3, 80026e0 <setArc+0x2a8>)
 80024fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024fe:	4620      	mov	r0, r4
 8002500:	4629      	mov	r1, r5
 8002502:	f7fe faf5 	bl	8000af0 <__aeabi_dcmple>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d002      	beq.n	8002512 <setArc+0xda>
 800250c:	f04f 33ff 	mov.w	r3, #4294967295
 8002510:	e185      	b.n	800281e <setArc+0x3e6>

    /* Переход в относительную систему координаты центра дуги (мм) */
    arc->x_rel = x * MM_PER_STEP - arc->Xc;
 8002512:	4b77      	ldr	r3, [pc, #476]	@ (80026f0 <setArc+0x2b8>)
 8002514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002518:	4610      	mov	r0, r2
 800251a:	4619      	mov	r1, r3
 800251c:	f7fe fc5c 	bl	8000dd8 <__aeabi_l2f>
 8002520:	ee07 0a10 	vmov	s14, r0
 8002524:	eddf 7a73 	vldr	s15, [pc, #460]	@ 80026f4 <setArc+0x2bc>
 8002528:	ee67 7a27 	vmul.f32	s15, s14, s15
 800252c:	ee17 0a90 	vmov	r0, s15
 8002530:	f7fe f80a 	bl	8000548 <__aeabi_f2d>
 8002534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002536:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800253a:	f7fd fea5 	bl	8000288 <__aeabi_dsub>
 800253e:	4602      	mov	r2, r0
 8002540:	460b      	mov	r3, r1
 8002542:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002544:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    arc->y_rel = y * MM_PER_STEP - arc->Yc;
 8002548:	4b6b      	ldr	r3, [pc, #428]	@ (80026f8 <setArc+0x2c0>)
 800254a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800254e:	4610      	mov	r0, r2
 8002550:	4619      	mov	r1, r3
 8002552:	f7fe fc41 	bl	8000dd8 <__aeabi_l2f>
 8002556:	ee07 0a10 	vmov	s14, r0
 800255a:	eddf 7a66 	vldr	s15, [pc, #408]	@ 80026f4 <setArc+0x2bc>
 800255e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002562:	ee17 0a90 	vmov	r0, s15
 8002566:	f7fd ffef 	bl	8000548 <__aeabi_f2d>
 800256a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800256c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8002570:	f7fd fe8a 	bl	8000288 <__aeabi_dsub>
 8002574:	4602      	mov	r2, r0
 8002576:	460b      	mov	r3, r1
 8002578:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800257a:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    arc->X0 -= arc->Xc;
 800257e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002580:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002586:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800258a:	f7fd fe7d 	bl	8000288 <__aeabi_dsub>
 800258e:	4602      	mov	r2, r0
 8002590:	460b      	mov	r3, r1
 8002592:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002594:	e9c1 2300 	strd	r2, r3, [r1]
    arc->Y0 -= arc->Yc;
 8002598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800259a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800259e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80025a4:	f7fd fe70 	bl	8000288 <__aeabi_dsub>
 80025a8:	4602      	mov	r2, r0
 80025aa:	460b      	mov	r3, r1
 80025ac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80025ae:	e9c1 2302 	strd	r2, r3, [r1, #8]
    arc->Xk -= arc->Xc;
 80025b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025b4:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80025b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ba:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80025be:	f7fd fe63 	bl	8000288 <__aeabi_dsub>
 80025c2:	4602      	mov	r2, r0
 80025c4:	460b      	mov	r3, r1
 80025c6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80025c8:	e9c1 2304 	strd	r2, r3, [r1, #16]
    arc->Yk -= arc->Yc;
 80025cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ce:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80025d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d4:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80025d8:	f7fd fe56 	bl	8000288 <__aeabi_dsub>
 80025dc:	4602      	mov	r2, r0
 80025de:	460b      	mov	r3, r1
 80025e0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80025e2:	e9c1 2306 	strd	r2, r3, [r1, #24]

    /* Квадрат радиуса дуги (мм^2) */
    arc->R2 = I * I + J * J;
 80025e6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80025ea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80025ee:	f7fe f803 	bl	80005f8 <__aeabi_dmul>
 80025f2:	4602      	mov	r2, r0
 80025f4:	460b      	mov	r3, r1
 80025f6:	4614      	mov	r4, r2
 80025f8:	461d      	mov	r5, r3
 80025fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80025fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002602:	f7fd fff9 	bl	80005f8 <__aeabi_dmul>
 8002606:	4602      	mov	r2, r0
 8002608:	460b      	mov	r3, r1
 800260a:	4620      	mov	r0, r4
 800260c:	4629      	mov	r1, r5
 800260e:	f7fd fe3d 	bl	800028c <__adddf3>
 8002612:	4602      	mov	r2, r0
 8002614:	460b      	mov	r3, r1
 8002616:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002618:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    /* Начальное значения оценочной функции */
    arc->F = arc->x_rel * arc->x_rel + arc->y_rel * arc->y_rel - arc->R2;
 800261c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800261e:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8002622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002624:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8002628:	f7fd ffe6 	bl	80005f8 <__aeabi_dmul>
 800262c:	4602      	mov	r2, r0
 800262e:	460b      	mov	r3, r1
 8002630:	4614      	mov	r4, r2
 8002632:	461d      	mov	r5, r3
 8002634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002636:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800263a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800263c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8002640:	f7fd ffda 	bl	80005f8 <__aeabi_dmul>
 8002644:	4602      	mov	r2, r0
 8002646:	460b      	mov	r3, r1
 8002648:	4620      	mov	r0, r4
 800264a:	4629      	mov	r1, r5
 800264c:	f7fd fe1e 	bl	800028c <__adddf3>
 8002650:	4602      	mov	r2, r0
 8002652:	460b      	mov	r3, r1
 8002654:	4610      	mov	r0, r2
 8002656:	4619      	mov	r1, r3
 8002658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800265a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 800265e:	f7fd fe13 	bl	8000288 <__aeabi_dsub>
 8002662:	4602      	mov	r2, r0
 8002664:	460b      	mov	r3, r1
 8002666:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002668:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48

    /* Направление вращения по дуге 1 - по часовой стрелки, -1 - против */
    arc->dir = dir;
 800266c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800266e:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8002672:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53

    /* Определение четверти, в которой расположено начало дуги */
    if (arc->x_rel >= 0 && arc->y_rel > 0) { arc->dx = 1 * arc->dir; arc->dy = -1 * arc->dir; arc->s = -1 * arc->dir; }             //< 1 четверть
 8002676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002678:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 800267c:	f04f 0200 	mov.w	r2, #0
 8002680:	f04f 0300 	mov.w	r3, #0
 8002684:	f7fe fa3e 	bl	8000b04 <__aeabi_dcmpge>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d036      	beq.n	80026fc <setArc+0x2c4>
 800268e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002690:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8002694:	f04f 0200 	mov.w	r2, #0
 8002698:	f04f 0300 	mov.w	r3, #0
 800269c:	f7fe fa3c 	bl	8000b18 <__aeabi_dcmpgt>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d02a      	beq.n	80026fc <setArc+0x2c4>
 80026a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a8:	f993 2053 	ldrsb.w	r2, [r3, #83]	@ 0x53
 80026ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80026b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026b4:	f993 3053 	ldrsb.w	r3, [r3, #83]	@ 0x53
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	425b      	negs	r3, r3
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	b25a      	sxtb	r2, r3
 80026c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 80026c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026c8:	f993 3053 	ldrsb.w	r3, [r3, #83]	@ 0x53
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	425b      	negs	r3, r3
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	b25a      	sxtb	r2, r3
 80026d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d6:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
 80026da:	e09f      	b.n	800281c <setArc+0x3e4>
 80026dc:	f3af 8000 	nop.w
 80026e0:	a0000000 	.word	0xa0000000
 80026e4:	3f699999 	.word	0x3f699999
 80026e8:	20000760 	.word	0x20000760
 80026ec:	20000768 	.word	0x20000768
 80026f0:	20000750 	.word	0x20000750
 80026f4:	3b4ccccd 	.word	0x3b4ccccd
 80026f8:	20000758 	.word	0x20000758
    else if (arc->y_rel <= 0 && arc->x_rel > 0) { arc->dx = -1 * arc->dir; arc->dy = -1 * arc->dir; arc->s = 1 * arc->dir; }        //< 4 четверть
 80026fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026fe:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8002702:	f04f 0200 	mov.w	r2, #0
 8002706:	f04f 0300 	mov.w	r3, #0
 800270a:	f7fe f9f1 	bl	8000af0 <__aeabi_dcmple>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d026      	beq.n	8002762 <setArc+0x32a>
 8002714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002716:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 800271a:	f04f 0200 	mov.w	r2, #0
 800271e:	f04f 0300 	mov.w	r3, #0
 8002722:	f7fe f9f9 	bl	8000b18 <__aeabi_dcmpgt>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d01a      	beq.n	8002762 <setArc+0x32a>
 800272c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800272e:	f993 3053 	ldrsb.w	r3, [r3, #83]	@ 0x53
 8002732:	b2db      	uxtb	r3, r3
 8002734:	425b      	negs	r3, r3
 8002736:	b2db      	uxtb	r3, r3
 8002738:	b25a      	sxtb	r2, r3
 800273a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800273c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002742:	f993 3053 	ldrsb.w	r3, [r3, #83]	@ 0x53
 8002746:	b2db      	uxtb	r3, r3
 8002748:	425b      	negs	r3, r3
 800274a:	b2db      	uxtb	r3, r3
 800274c:	b25a      	sxtb	r2, r3
 800274e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002750:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8002754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002756:	f993 2053 	ldrsb.w	r2, [r3, #83]	@ 0x53
 800275a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800275c:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
 8002760:	e05c      	b.n	800281c <setArc+0x3e4>
    else if (arc->x_rel <= 0 && arc->y_rel < 0) { arc->dx = -1 * arc->dir; arc->dy = 1 * arc->dir; arc->s = -1 * arc->dir; }        //< 3 четверть
 8002762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002764:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8002768:	f04f 0200 	mov.w	r2, #0
 800276c:	f04f 0300 	mov.w	r3, #0
 8002770:	f7fe f9be 	bl	8000af0 <__aeabi_dcmple>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d026      	beq.n	80027c8 <setArc+0x390>
 800277a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800277c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8002780:	f04f 0200 	mov.w	r2, #0
 8002784:	f04f 0300 	mov.w	r3, #0
 8002788:	f7fe f9a8 	bl	8000adc <__aeabi_dcmplt>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d01a      	beq.n	80027c8 <setArc+0x390>
 8002792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002794:	f993 3053 	ldrsb.w	r3, [r3, #83]	@ 0x53
 8002798:	b2db      	uxtb	r3, r3
 800279a:	425b      	negs	r3, r3
 800279c:	b2db      	uxtb	r3, r3
 800279e:	b25a      	sxtb	r2, r3
 80027a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80027a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027a8:	f993 2053 	ldrsb.w	r2, [r3, #83]	@ 0x53
 80027ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 80027b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027b4:	f993 3053 	ldrsb.w	r3, [r3, #83]	@ 0x53
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	425b      	negs	r3, r3
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	b25a      	sxtb	r2, r3
 80027c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027c2:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
 80027c6:	e029      	b.n	800281c <setArc+0x3e4>
    else if (arc->y_rel >= 0 && arc->x_rel < 0) { arc->dx = 1 * arc->dir; arc->dy = 1 * arc->dir; arc->s = 1 * arc->dir; }          //< 2 четверть
 80027c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ca:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 80027ce:	f04f 0200 	mov.w	r2, #0
 80027d2:	f04f 0300 	mov.w	r3, #0
 80027d6:	f7fe f995 	bl	8000b04 <__aeabi_dcmpge>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d01d      	beq.n	800281c <setArc+0x3e4>
 80027e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027e2:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 80027e6:	f04f 0200 	mov.w	r2, #0
 80027ea:	f04f 0300 	mov.w	r3, #0
 80027ee:	f7fe f975 	bl	8000adc <__aeabi_dcmplt>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d011      	beq.n	800281c <setArc+0x3e4>
 80027f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027fa:	f993 2053 	ldrsb.w	r2, [r3, #83]	@ 0x53
 80027fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002800:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002806:	f993 2053 	ldrsb.w	r2, [r3, #83]	@ 0x53
 800280a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800280c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8002810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002812:	f993 2053 	ldrsb.w	r2, [r3, #83]	@ 0x53
 8002816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002818:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52

    return INTERPOLATOR_DONE;
 800281c:	2300      	movs	r3, #0
}
 800281e:	4618      	mov	r0, r3
 8002820:	3728      	adds	r7, #40	@ 0x28
 8002822:	46bd      	mov	sp, r7
 8002824:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08002828 <handlerLine>:

/** Обработчик команды G01 - интерполяционное движение по прямой (оценочная функция)
 */
handler_interpolator_state_t handlerLine(INTERPOLATOR_StructDef* interpolator, FIFO_StructDef* buf, LINE_StructDef* line, uint8_t axis1, uint8_t axis2)
{
 8002828:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800282c:	b094      	sub	sp, #80	@ 0x50
 800282e:	af00      	add	r7, sp, #0
 8002830:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8002832:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002834:	647a      	str	r2, [r7, #68]	@ 0x44
 8002836:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
	if(interpolator->_workState == INTERPOLATOR_READY && availableForWrite(buf) == FIFO_OK)
 800283a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800283c:	f993 3000 	ldrsb.w	r3, [r3]
 8002840:	2b01      	cmp	r3, #1
 8002842:	f040 81c2 	bne.w	8002bca <handlerLine+0x3a2>
 8002846:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8002848:	f7ff f94e 	bl	8001ae8 <availableForWrite>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	f040 81bb 	bne.w	8002bca <handlerLine+0x3a2>
	{
		interpolator->_workState = INTERPOLATOR_PROCESSING;
 8002854:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002856:	2302      	movs	r3, #2
 8002858:	7013      	strb	r3, [r2, #0]

		/* Основные вычисления на основе анализа знака оценочной функции */
		if (fabs(line->F) <= EPS)
 800285a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800285c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8002860:	4614      	mov	r4, r2
 8002862:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8002866:	a380      	add	r3, pc, #512	@ (adr r3, 8002a68 <handlerLine+0x240>)
 8002868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800286c:	4620      	mov	r0, r4
 800286e:	4629      	mov	r1, r5
 8002870:	f7fe f93e 	bl	8000af0 <__aeabi_dcmple>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	f000 808f 	beq.w	800299a <handlerLine+0x172>
		{
			if (line->alfa < M_PI_4)
 800287c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800287e:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8002882:	a37b      	add	r3, pc, #492	@ (adr r3, 8002a70 <handlerLine+0x248>)
 8002884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002888:	f7fe f928 	bl	8000adc <__aeabi_dcmplt>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d041      	beq.n	8002916 <handlerLine+0xee>
			{
				line->x_rel += line->dx * MM_PER_STEP;
 8002892:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002894:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8002898:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800289a:	f993 3048 	ldrsb.w	r3, [r3, #72]	@ 0x48
 800289e:	ee07 3a90 	vmov	s15, r3
 80028a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028a6:	ed9f 7a74 	vldr	s14, [pc, #464]	@ 8002a78 <handlerLine+0x250>
 80028aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028ae:	ee17 0a90 	vmov	r0, s15
 80028b2:	f7fd fe49 	bl	8000548 <__aeabi_f2d>
 80028b6:	4602      	mov	r2, r0
 80028b8:	460b      	mov	r3, r1
 80028ba:	4620      	mov	r0, r4
 80028bc:	4629      	mov	r1, r5
 80028be:	f7fd fce5 	bl	800028c <__adddf3>
 80028c2:	4602      	mov	r2, r0
 80028c4:	460b      	mov	r3, r1
 80028c6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80028c8:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
				x += line->dx;
 80028cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80028ce:	f993 3048 	ldrsb.w	r3, [r3, #72]	@ 0x48
 80028d2:	b25b      	sxtb	r3, r3
 80028d4:	17da      	asrs	r2, r3, #31
 80028d6:	469a      	mov	sl, r3
 80028d8:	4693      	mov	fp, r2
 80028da:	4b61      	ldr	r3, [pc, #388]	@ (8002a60 <handlerLine+0x238>)
 80028dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028e0:	eb1a 0102 	adds.w	r1, sl, r2
 80028e4:	63b9      	str	r1, [r7, #56]	@ 0x38
 80028e6:	eb4b 0303 	adc.w	r3, fp, r3
 80028ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80028ec:	4b5c      	ldr	r3, [pc, #368]	@ (8002a60 <handlerLine+0x238>)
 80028ee:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80028f2:	e9c3 1200 	strd	r1, r2, [r3]

				fifoWrite(buf, setBinarySteps(axis1, line->dx));
 80028f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80028f8:	f993 2048 	ldrsb.w	r2, [r3, #72]	@ 0x48
 80028fc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8002900:	4611      	mov	r1, r2
 8002902:	4618      	mov	r0, r3
 8002904:	f000 fc3a 	bl	800317c <setBinarySteps>
 8002908:	4603      	mov	r3, r0
 800290a:	b25b      	sxtb	r3, r3
 800290c:	4619      	mov	r1, r3
 800290e:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8002910:	f7ff f8fb 	bl	8001b0a <fifoWrite>
 8002914:	e0f6      	b.n	8002b04 <handlerLine+0x2dc>
			}
			else
			{
				line->y_rel += line->dy * MM_PER_STEP;
 8002916:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002918:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 800291c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800291e:	f993 3049 	ldrsb.w	r3, [r3, #73]	@ 0x49
 8002922:	ee07 3a90 	vmov	s15, r3
 8002926:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800292a:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 8002a78 <handlerLine+0x250>
 800292e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002932:	ee17 0a90 	vmov	r0, s15
 8002936:	f7fd fe07 	bl	8000548 <__aeabi_f2d>
 800293a:	4602      	mov	r2, r0
 800293c:	460b      	mov	r3, r1
 800293e:	4620      	mov	r0, r4
 8002940:	4629      	mov	r1, r5
 8002942:	f7fd fca3 	bl	800028c <__adddf3>
 8002946:	4602      	mov	r2, r0
 8002948:	460b      	mov	r3, r1
 800294a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800294c:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
				y += line->dy;
 8002950:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002952:	f993 3049 	ldrsb.w	r3, [r3, #73]	@ 0x49
 8002956:	b25b      	sxtb	r3, r3
 8002958:	17da      	asrs	r2, r3, #31
 800295a:	4698      	mov	r8, r3
 800295c:	4691      	mov	r9, r2
 800295e:	4b41      	ldr	r3, [pc, #260]	@ (8002a64 <handlerLine+0x23c>)
 8002960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002964:	eb18 0102 	adds.w	r1, r8, r2
 8002968:	6339      	str	r1, [r7, #48]	@ 0x30
 800296a:	eb49 0303 	adc.w	r3, r9, r3
 800296e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002970:	4b3c      	ldr	r3, [pc, #240]	@ (8002a64 <handlerLine+0x23c>)
 8002972:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8002976:	e9c3 1200 	strd	r1, r2, [r3]

				fifoWrite(buf, setBinarySteps(axis2, line->dy));
 800297a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800297c:	f993 2049 	ldrsb.w	r2, [r3, #73]	@ 0x49
 8002980:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8002984:	4611      	mov	r1, r2
 8002986:	4618      	mov	r0, r3
 8002988:	f000 fbf8 	bl	800317c <setBinarySteps>
 800298c:	4603      	mov	r3, r0
 800298e:	b25b      	sxtb	r3, r3
 8002990:	4619      	mov	r1, r3
 8002992:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8002994:	f7ff f8b9 	bl	8001b0a <fifoWrite>
 8002998:	e0b4      	b.n	8002b04 <handlerLine+0x2dc>
			}
		}
		else
		{
			if (line->F * line->s > 0)
 800299a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800299c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 80029a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80029a2:	f993 3058 	ldrsb.w	r3, [r3, #88]	@ 0x58
 80029a6:	4618      	mov	r0, r3
 80029a8:	f7fd fdbc 	bl	8000524 <__aeabi_i2d>
 80029ac:	4602      	mov	r2, r0
 80029ae:	460b      	mov	r3, r1
 80029b0:	4620      	mov	r0, r4
 80029b2:	4629      	mov	r1, r5
 80029b4:	f7fd fe20 	bl	80005f8 <__aeabi_dmul>
 80029b8:	4602      	mov	r2, r0
 80029ba:	460b      	mov	r3, r1
 80029bc:	4610      	mov	r0, r2
 80029be:	4619      	mov	r1, r3
 80029c0:	f04f 0200 	mov.w	r2, #0
 80029c4:	f04f 0300 	mov.w	r3, #0
 80029c8:	f7fe f8a6 	bl	8000b18 <__aeabi_dcmpgt>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d054      	beq.n	8002a7c <handlerLine+0x254>
			{
				line->x_rel += line->dx * MM_PER_STEP;
 80029d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80029d4:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 80029d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80029da:	f993 3048 	ldrsb.w	r3, [r3, #72]	@ 0x48
 80029de:	ee07 3a90 	vmov	s15, r3
 80029e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029e6:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8002a78 <handlerLine+0x250>
 80029ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029ee:	ee17 0a90 	vmov	r0, s15
 80029f2:	f7fd fda9 	bl	8000548 <__aeabi_f2d>
 80029f6:	4602      	mov	r2, r0
 80029f8:	460b      	mov	r3, r1
 80029fa:	4620      	mov	r0, r4
 80029fc:	4629      	mov	r1, r5
 80029fe:	f7fd fc45 	bl	800028c <__adddf3>
 8002a02:	4602      	mov	r2, r0
 8002a04:	460b      	mov	r3, r1
 8002a06:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002a08:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
				x += line->dx;
 8002a0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a0e:	f993 3048 	ldrsb.w	r3, [r3, #72]	@ 0x48
 8002a12:	b25b      	sxtb	r3, r3
 8002a14:	17da      	asrs	r2, r3, #31
 8002a16:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002a18:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002a1a:	4b11      	ldr	r3, [pc, #68]	@ (8002a60 <handlerLine+0x238>)
 8002a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a20:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8002a24:	4621      	mov	r1, r4
 8002a26:	1889      	adds	r1, r1, r2
 8002a28:	6239      	str	r1, [r7, #32]
 8002a2a:	4629      	mov	r1, r5
 8002a2c:	eb43 0101 	adc.w	r1, r3, r1
 8002a30:	6279      	str	r1, [r7, #36]	@ 0x24
 8002a32:	4b0b      	ldr	r3, [pc, #44]	@ (8002a60 <handlerLine+0x238>)
 8002a34:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8002a38:	e9c3 1200 	strd	r1, r2, [r3]

				fifoWrite(buf, setBinarySteps(axis1, line->dx));
 8002a3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a3e:	f993 2048 	ldrsb.w	r2, [r3, #72]	@ 0x48
 8002a42:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8002a46:	4611      	mov	r1, r2
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f000 fb97 	bl	800317c <setBinarySteps>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	b25b      	sxtb	r3, r3
 8002a52:	4619      	mov	r1, r3
 8002a54:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8002a56:	f7ff f858 	bl	8001b0a <fifoWrite>
 8002a5a:	e053      	b.n	8002b04 <handlerLine+0x2dc>
 8002a5c:	f3af 8000 	nop.w
 8002a60:	20000750 	.word	0x20000750
 8002a64:	20000758 	.word	0x20000758
 8002a68:	e826d695 	.word	0xe826d695
 8002a6c:	3e112e0b 	.word	0x3e112e0b
 8002a70:	54442d18 	.word	0x54442d18
 8002a74:	3fe921fb 	.word	0x3fe921fb
 8002a78:	3b4ccccd 	.word	0x3b4ccccd
			}
		        else
		        {
		            line->y_rel += line->dy * MM_PER_STEP;
 8002a7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a7e:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 8002a82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a84:	f993 3049 	ldrsb.w	r3, [r3, #73]	@ 0x49
 8002a88:	ee07 3a90 	vmov	s15, r3
 8002a8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a90:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8002a78 <handlerLine+0x250>
 8002a94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a98:	ee17 0a90 	vmov	r0, s15
 8002a9c:	f7fd fd54 	bl	8000548 <__aeabi_f2d>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	460b      	mov	r3, r1
 8002aa4:	4620      	mov	r0, r4
 8002aa6:	4629      	mov	r1, r5
 8002aa8:	f7fd fbf0 	bl	800028c <__adddf3>
 8002aac:	4602      	mov	r2, r0
 8002aae:	460b      	mov	r3, r1
 8002ab0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002ab2:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
		            y += line->dy;
 8002ab6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ab8:	f993 3049 	ldrsb.w	r3, [r3, #73]	@ 0x49
 8002abc:	b25b      	sxtb	r3, r3
 8002abe:	17da      	asrs	r2, r3, #31
 8002ac0:	61bb      	str	r3, [r7, #24]
 8002ac2:	61fa      	str	r2, [r7, #28]
 8002ac4:	4b46      	ldr	r3, [pc, #280]	@ (8002be0 <handlerLine+0x3b8>)
 8002ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aca:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8002ace:	4621      	mov	r1, r4
 8002ad0:	1889      	adds	r1, r1, r2
 8002ad2:	6139      	str	r1, [r7, #16]
 8002ad4:	4629      	mov	r1, r5
 8002ad6:	eb43 0101 	adc.w	r1, r3, r1
 8002ada:	6179      	str	r1, [r7, #20]
 8002adc:	4b40      	ldr	r3, [pc, #256]	@ (8002be0 <handlerLine+0x3b8>)
 8002ade:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002ae2:	e9c3 1200 	strd	r1, r2, [r3]

		            fifoWrite(buf, setBinarySteps(axis2, line->dy));
 8002ae6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ae8:	f993 2049 	ldrsb.w	r2, [r3, #73]	@ 0x49
 8002aec:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8002af0:	4611      	mov	r1, r2
 8002af2:	4618      	mov	r0, r3
 8002af4:	f000 fb42 	bl	800317c <setBinarySteps>
 8002af8:	4603      	mov	r3, r0
 8002afa:	b25b      	sxtb	r3, r3
 8002afc:	4619      	mov	r1, r3
 8002afe:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8002b00:	f7ff f803 	bl	8001b0a <fifoWrite>
		}

//		printf("G01 X%.6f Y%.6f\n", x * MM_PER_STEP, y * MM_PER_STEP);

		/* Пересчет оценочной функции */
		line->F = line->dX * line->y_rel - line->dY * line->x_rel;
 8002b04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b06:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8002b0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b0c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8002b10:	f7fd fd72 	bl	80005f8 <__aeabi_dmul>
 8002b14:	4602      	mov	r2, r0
 8002b16:	460b      	mov	r3, r1
 8002b18:	4614      	mov	r4, r2
 8002b1a:	461d      	mov	r5, r3
 8002b1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b1e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8002b22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b24:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8002b28:	f7fd fd66 	bl	80005f8 <__aeabi_dmul>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	460b      	mov	r3, r1
 8002b30:	4620      	mov	r0, r4
 8002b32:	4629      	mov	r1, r5
 8002b34:	f7fd fba8 	bl	8000288 <__aeabi_dsub>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	460b      	mov	r3, r1
 8002b3c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002b3e:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

		/* Проверка достижения конечной точки */
		if ((fabs(line->x_rel - line->dX) < MM_PER_STEP) && (fabs(line->y_rel - line->dY) < MM_PER_STEP))
 8002b42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b44:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8002b48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b4a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002b4e:	f7fd fb9b 	bl	8000288 <__aeabi_dsub>
 8002b52:	4602      	mov	r2, r0
 8002b54:	460b      	mov	r3, r1
 8002b56:	60ba      	str	r2, [r7, #8]
 8002b58:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002b5c:	60fb      	str	r3, [r7, #12]
 8002b5e:	a31e      	add	r3, pc, #120	@ (adr r3, 8002bd8 <handlerLine+0x3b0>)
 8002b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b64:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002b68:	f7fd ffb8 	bl	8000adc <__aeabi_dcmplt>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d028      	beq.n	8002bc4 <handlerLine+0x39c>
 8002b72:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b74:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8002b78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b7a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8002b7e:	f7fd fb83 	bl	8000288 <__aeabi_dsub>
 8002b82:	4602      	mov	r2, r0
 8002b84:	460b      	mov	r3, r1
 8002b86:	603a      	str	r2, [r7, #0]
 8002b88:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002b8c:	607b      	str	r3, [r7, #4]
 8002b8e:	a312      	add	r3, pc, #72	@ (adr r3, 8002bd8 <handlerLine+0x3b0>)
 8002b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b94:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002b98:	f7fd ffa0 	bl	8000adc <__aeabi_dcmplt>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d010      	beq.n	8002bc4 <handlerLine+0x39c>
		{
			X = line->Xk;
 8002ba2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ba4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002ba8:	490e      	ldr	r1, [pc, #56]	@ (8002be4 <handlerLine+0x3bc>)
 8002baa:	e9c1 2300 	strd	r2, r3, [r1]
			Y = line->Yk;
 8002bae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002bb0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002bb4:	490c      	ldr	r1, [pc, #48]	@ (8002be8 <handlerLine+0x3c0>)
 8002bb6:	e9c1 2300 	strd	r2, r3, [r1]

			interpolator->_workState = INTERPOLATOR_READY;
 8002bba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	701a      	strb	r2, [r3, #0]
			return INTERPOLATOR_DONE;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	e003      	b.n	8002bcc <handlerLine+0x3a4>
		}

		interpolator->_workState = INTERPOLATOR_READY;
 8002bc4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	701a      	strb	r2, [r3, #0]
	}

	return INTERPOLATOR_PROCESSING;
 8002bca:	2302      	movs	r3, #2
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3750      	adds	r7, #80	@ 0x50
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002bd6:	bf00      	nop
 8002bd8:	a0000000 	.word	0xa0000000
 8002bdc:	3f699999 	.word	0x3f699999
 8002be0:	20000758 	.word	0x20000758
 8002be4:	20000760 	.word	0x20000760
 8002be8:	20000768 	.word	0x20000768
 8002bec:	00000000 	.word	0x00000000

08002bf0 <handlerArc>:

/** Обработчик команд G02, G03 - интерполяционное движение по окружности по/против часовой стрелке (оценочная функция)
 */
handler_interpolator_state_t handlerArc(INTERPOLATOR_StructDef* interpolator, FIFO_StructDef* buf, ARC_StructDef* arc, uint8_t axis1, uint8_t axis2)
{
 8002bf0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bf4:	b098      	sub	sp, #96	@ 0x60
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	65f8      	str	r0, [r7, #92]	@ 0x5c
 8002bfa:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002bfc:	657a      	str	r2, [r7, #84]	@ 0x54
 8002bfe:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
	if(interpolator->_workState == INTERPOLATOR_READY && availableForWrite(buf) == FIFO_OK)
 8002c02:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002c04:	f993 3000 	ldrsb.w	r3, [r3]
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	f040 82b0 	bne.w	800316e <handlerArc+0x57e>
 8002c0e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002c10:	f7fe ff6a 	bl	8001ae8 <availableForWrite>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	f040 82a9 	bne.w	800316e <handlerArc+0x57e>
	{
		interpolator->_workState = INTERPOLATOR_PROCESSING;
 8002c1c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002c1e:	2302      	movs	r3, #2
 8002c20:	7013      	strb	r3, [r2, #0]

		/* Основные вычисления на основе анализа знака оценочной функции */
		if (arc->s == -1)
 8002c22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c24:	f993 3052 	ldrsb.w	r3, [r3, #82]	@ 0x52
 8002c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c2c:	f040 809a 	bne.w	8002d64 <handlerArc+0x174>
		{
			if (arc->F >= 0)
 8002c30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c32:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 8002c36:	f04f 0200 	mov.w	r2, #0
 8002c3a:	f04f 0300 	mov.w	r3, #0
 8002c3e:	f7fd ff61 	bl	8000b04 <__aeabi_dcmpge>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d046      	beq.n	8002cd6 <handlerArc+0xe6>
			{
				arc->y_rel += arc->dy * MM_PER_STEP;
 8002c48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c4a:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 8002c4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c50:	f993 3051 	ldrsb.w	r3, [r3, #81]	@ 0x51
 8002c54:	ee07 3a90 	vmov	s15, r3
 8002c58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c5c:	ed9f 7a6b 	vldr	s14, [pc, #428]	@ 8002e0c <handlerArc+0x21c>
 8002c60:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c64:	ee17 0a90 	vmov	r0, s15
 8002c68:	f7fd fc6e 	bl	8000548 <__aeabi_f2d>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	460b      	mov	r3, r1
 8002c70:	4620      	mov	r0, r4
 8002c72:	4629      	mov	r1, r5
 8002c74:	f7fd fb0a 	bl	800028c <__adddf3>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	460b      	mov	r3, r1
 8002c7c:	4610      	mov	r0, r2
 8002c7e:	4619      	mov	r1, r3
 8002c80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c82:	e9c3 010e 	strd	r0, r1, [r3, #56]	@ 0x38
				y += arc->dy;
 8002c86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c88:	f993 3051 	ldrsb.w	r3, [r3, #81]	@ 0x51
 8002c8c:	b25b      	sxtb	r3, r3
 8002c8e:	17da      	asrs	r2, r3, #31
 8002c90:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002c92:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002c94:	4b5b      	ldr	r3, [pc, #364]	@ (8002e04 <handlerArc+0x214>)
 8002c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c9a:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8002c9e:	4621      	mov	r1, r4
 8002ca0:	1889      	adds	r1, r1, r2
 8002ca2:	6439      	str	r1, [r7, #64]	@ 0x40
 8002ca4:	4629      	mov	r1, r5
 8002ca6:	eb43 0101 	adc.w	r1, r3, r1
 8002caa:	6479      	str	r1, [r7, #68]	@ 0x44
 8002cac:	4b55      	ldr	r3, [pc, #340]	@ (8002e04 <handlerArc+0x214>)
 8002cae:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8002cb2:	e9c3 1200 	strd	r1, r2, [r3]

				fifoWrite(buf, setBinarySteps(axis2, arc->dy));
 8002cb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cb8:	f993 2051 	ldrsb.w	r2, [r3, #81]	@ 0x51
 8002cbc:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
 8002cc0:	4611      	mov	r1, r2
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f000 fa5a 	bl	800317c <setBinarySteps>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	b25b      	sxtb	r3, r3
 8002ccc:	4619      	mov	r1, r3
 8002cce:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002cd0:	f7fe ff1b 	bl	8001b0a <fifoWrite>
 8002cd4:	e0df      	b.n	8002e96 <handlerArc+0x2a6>
			}
			else
			{
				arc->x_rel += arc->dx * MM_PER_STEP;
 8002cd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cd8:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8002cdc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cde:	f993 3050 	ldrsb.w	r3, [r3, #80]	@ 0x50
 8002ce2:	ee07 3a90 	vmov	s15, r3
 8002ce6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002cea:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8002e0c <handlerArc+0x21c>
 8002cee:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cf2:	ee17 0a90 	vmov	r0, s15
 8002cf6:	f7fd fc27 	bl	8000548 <__aeabi_f2d>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	460b      	mov	r3, r1
 8002cfe:	4620      	mov	r0, r4
 8002d00:	4629      	mov	r1, r5
 8002d02:	f7fd fac3 	bl	800028c <__adddf3>
 8002d06:	4602      	mov	r2, r0
 8002d08:	460b      	mov	r3, r1
 8002d0a:	4610      	mov	r0, r2
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d10:	e9c3 010c 	strd	r0, r1, [r3, #48]	@ 0x30
				x += arc->dx;
 8002d14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d16:	f993 3050 	ldrsb.w	r3, [r3, #80]	@ 0x50
 8002d1a:	b25b      	sxtb	r3, r3
 8002d1c:	17da      	asrs	r2, r3, #31
 8002d1e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002d20:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002d22:	4b39      	ldr	r3, [pc, #228]	@ (8002e08 <handlerArc+0x218>)
 8002d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d28:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8002d2c:	4621      	mov	r1, r4
 8002d2e:	1889      	adds	r1, r1, r2
 8002d30:	6339      	str	r1, [r7, #48]	@ 0x30
 8002d32:	4629      	mov	r1, r5
 8002d34:	eb43 0101 	adc.w	r1, r3, r1
 8002d38:	6379      	str	r1, [r7, #52]	@ 0x34
 8002d3a:	4b33      	ldr	r3, [pc, #204]	@ (8002e08 <handlerArc+0x218>)
 8002d3c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8002d40:	e9c3 1200 	strd	r1, r2, [r3]

				fifoWrite(buf, setBinarySteps(axis1, arc->dx));
 8002d44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d46:	f993 2050 	ldrsb.w	r2, [r3, #80]	@ 0x50
 8002d4a:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8002d4e:	4611      	mov	r1, r2
 8002d50:	4618      	mov	r0, r3
 8002d52:	f000 fa13 	bl	800317c <setBinarySteps>
 8002d56:	4603      	mov	r3, r0
 8002d58:	b25b      	sxtb	r3, r3
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002d5e:	f7fe fed4 	bl	8001b0a <fifoWrite>
 8002d62:	e098      	b.n	8002e96 <handlerArc+0x2a6>
			}
		}
		else
		{
			if (arc->F >= 0)
 8002d64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d66:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 8002d6a:	f04f 0200 	mov.w	r2, #0
 8002d6e:	f04f 0300 	mov.w	r3, #0
 8002d72:	f7fd fec7 	bl	8000b04 <__aeabi_dcmpge>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d049      	beq.n	8002e10 <handlerArc+0x220>
			{
				arc->x_rel += arc->dx * MM_PER_STEP;
 8002d7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d7e:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8002d82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d84:	f993 3050 	ldrsb.w	r3, [r3, #80]	@ 0x50
 8002d88:	ee07 3a90 	vmov	s15, r3
 8002d8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d90:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8002e0c <handlerArc+0x21c>
 8002d94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d98:	ee17 0a90 	vmov	r0, s15
 8002d9c:	f7fd fbd4 	bl	8000548 <__aeabi_f2d>
 8002da0:	4602      	mov	r2, r0
 8002da2:	460b      	mov	r3, r1
 8002da4:	4620      	mov	r0, r4
 8002da6:	4629      	mov	r1, r5
 8002da8:	f7fd fa70 	bl	800028c <__adddf3>
 8002dac:	4602      	mov	r2, r0
 8002dae:	460b      	mov	r3, r1
 8002db0:	4610      	mov	r0, r2
 8002db2:	4619      	mov	r1, r3
 8002db4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002db6:	e9c3 010c 	strd	r0, r1, [r3, #48]	@ 0x30
				x += arc->dx;
 8002dba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002dbc:	f993 3050 	ldrsb.w	r3, [r3, #80]	@ 0x50
 8002dc0:	b25b      	sxtb	r3, r3
 8002dc2:	17da      	asrs	r2, r3, #31
 8002dc4:	469a      	mov	sl, r3
 8002dc6:	4693      	mov	fp, r2
 8002dc8:	4b0f      	ldr	r3, [pc, #60]	@ (8002e08 <handlerArc+0x218>)
 8002dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dce:	eb1a 0102 	adds.w	r1, sl, r2
 8002dd2:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002dd4:	eb4b 0303 	adc.w	r3, fp, r3
 8002dd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002dda:	4b0b      	ldr	r3, [pc, #44]	@ (8002e08 <handlerArc+0x218>)
 8002ddc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8002de0:	e9c3 1200 	strd	r1, r2, [r3]

				fifoWrite(buf, setBinarySteps(axis1, arc->dx));
 8002de4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002de6:	f993 2050 	ldrsb.w	r2, [r3, #80]	@ 0x50
 8002dea:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8002dee:	4611      	mov	r1, r2
 8002df0:	4618      	mov	r0, r3
 8002df2:	f000 f9c3 	bl	800317c <setBinarySteps>
 8002df6:	4603      	mov	r3, r0
 8002df8:	b25b      	sxtb	r3, r3
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002dfe:	f7fe fe84 	bl	8001b0a <fifoWrite>
 8002e02:	e048      	b.n	8002e96 <handlerArc+0x2a6>
 8002e04:	20000758 	.word	0x20000758
 8002e08:	20000750 	.word	0x20000750
 8002e0c:	3b4ccccd 	.word	0x3b4ccccd

			}
			else
			{
				arc->y_rel += arc->dy * MM_PER_STEP;
 8002e10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e12:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 8002e16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e18:	f993 3051 	ldrsb.w	r3, [r3, #81]	@ 0x51
 8002e1c:	ee07 3a90 	vmov	s15, r3
 8002e20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e24:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8002e0c <handlerArc+0x21c>
 8002e28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e2c:	ee17 0a90 	vmov	r0, s15
 8002e30:	f7fd fb8a 	bl	8000548 <__aeabi_f2d>
 8002e34:	4602      	mov	r2, r0
 8002e36:	460b      	mov	r3, r1
 8002e38:	4620      	mov	r0, r4
 8002e3a:	4629      	mov	r1, r5
 8002e3c:	f7fd fa26 	bl	800028c <__adddf3>
 8002e40:	4602      	mov	r2, r0
 8002e42:	460b      	mov	r3, r1
 8002e44:	4610      	mov	r0, r2
 8002e46:	4619      	mov	r1, r3
 8002e48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e4a:	e9c3 010e 	strd	r0, r1, [r3, #56]	@ 0x38
				y += arc->dy;
 8002e4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e50:	f993 3051 	ldrsb.w	r3, [r3, #81]	@ 0x51
 8002e54:	b25b      	sxtb	r3, r3
 8002e56:	17da      	asrs	r2, r3, #31
 8002e58:	4698      	mov	r8, r3
 8002e5a:	4691      	mov	r9, r2
 8002e5c:	4baa      	ldr	r3, [pc, #680]	@ (8003108 <handlerArc+0x518>)
 8002e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e62:	eb18 0102 	adds.w	r1, r8, r2
 8002e66:	6239      	str	r1, [r7, #32]
 8002e68:	eb49 0303 	adc.w	r3, r9, r3
 8002e6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e6e:	4ba6      	ldr	r3, [pc, #664]	@ (8003108 <handlerArc+0x518>)
 8002e70:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8002e74:	e9c3 1200 	strd	r1, r2, [r3]

				fifoWrite(buf, setBinarySteps(axis2, arc->dy));
 8002e78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e7a:	f993 2051 	ldrsb.w	r2, [r3, #81]	@ 0x51
 8002e7e:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
 8002e82:	4611      	mov	r1, r2
 8002e84:	4618      	mov	r0, r3
 8002e86:	f000 f979 	bl	800317c <setBinarySteps>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	b25b      	sxtb	r3, r3
 8002e8e:	4619      	mov	r1, r3
 8002e90:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002e92:	f7fe fe3a 	bl	8001b0a <fifoWrite>
		}

//		printf("G01 X%.6f Y%.6f\n", x * MM_PER_STEP, y * MM_PER_STEP);

		/* Пересчет оценочной функции */
		arc->F = arc->x_rel * arc->x_rel + arc->y_rel * arc->y_rel - arc->R2;
 8002e96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e98:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8002e9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e9e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8002ea2:	f7fd fba9 	bl	80005f8 <__aeabi_dmul>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	460b      	mov	r3, r1
 8002eaa:	4614      	mov	r4, r2
 8002eac:	461d      	mov	r5, r3
 8002eae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002eb0:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8002eb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002eb6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8002eba:	f7fd fb9d 	bl	80005f8 <__aeabi_dmul>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	460b      	mov	r3, r1
 8002ec2:	4620      	mov	r0, r4
 8002ec4:	4629      	mov	r1, r5
 8002ec6:	f7fd f9e1 	bl	800028c <__adddf3>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	460b      	mov	r3, r1
 8002ece:	4610      	mov	r0, r2
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ed4:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8002ed8:	f7fd f9d6 	bl	8000288 <__aeabi_dsub>
 8002edc:	4602      	mov	r2, r0
 8002ede:	460b      	mov	r3, r1
 8002ee0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002ee2:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48

		/* Проверка достижения конечной точки */
		if ((fabs(arc->x_rel - arc->Xk) < MM_PER_STEP) && (fabs(arc->y_rel - arc->Yk) < MM_PER_STEP))
 8002ee6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ee8:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8002eec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002eee:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002ef2:	f7fd f9c9 	bl	8000288 <__aeabi_dsub>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	460b      	mov	r3, r1
 8002efa:	61ba      	str	r2, [r7, #24]
 8002efc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002f00:	61fb      	str	r3, [r7, #28]
 8002f02:	a37f      	add	r3, pc, #508	@ (adr r3, 8003100 <handlerArc+0x510>)
 8002f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f08:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002f0c:	f7fd fde6 	bl	8000adc <__aeabi_dcmplt>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d036      	beq.n	8002f84 <handlerArc+0x394>
 8002f16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f18:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8002f1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f1e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002f22:	f7fd f9b1 	bl	8000288 <__aeabi_dsub>
 8002f26:	4602      	mov	r2, r0
 8002f28:	460b      	mov	r3, r1
 8002f2a:	613a      	str	r2, [r7, #16]
 8002f2c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002f30:	617b      	str	r3, [r7, #20]
 8002f32:	a373      	add	r3, pc, #460	@ (adr r3, 8003100 <handlerArc+0x510>)
 8002f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f38:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002f3c:	f7fd fdce 	bl	8000adc <__aeabi_dcmplt>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d01e      	beq.n	8002f84 <handlerArc+0x394>
		{
			X = arc->Xk + arc->Xc;
 8002f46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f48:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002f4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f4e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002f52:	f7fd f99b 	bl	800028c <__adddf3>
 8002f56:	4602      	mov	r2, r0
 8002f58:	460b      	mov	r3, r1
 8002f5a:	496c      	ldr	r1, [pc, #432]	@ (800310c <handlerArc+0x51c>)
 8002f5c:	e9c1 2300 	strd	r2, r3, [r1]
			Y = arc->Yk + arc->Yc;
 8002f60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f62:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002f66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f68:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8002f6c:	f7fd f98e 	bl	800028c <__adddf3>
 8002f70:	4602      	mov	r2, r0
 8002f72:	460b      	mov	r3, r1
 8002f74:	4966      	ldr	r1, [pc, #408]	@ (8003110 <handlerArc+0x520>)
 8002f76:	e9c1 2300 	strd	r2, r3, [r1]

			interpolator->_workState = INTERPOLATOR_READY;
 8002f7a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	701a      	strb	r2, [r3, #0]
			return INTERPOLATOR_DONE;
 8002f80:	2300      	movs	r3, #0
 8002f82:	e0f5      	b.n	8003170 <handlerArc+0x580>
		}

		/* Условие прохождения оси координат */
		if (fabs(arc->x_rel) <= MM_PER_STEP || fabs(arc->y_rel) <= MM_PER_STEP)
 8002f84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f86:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8002f8a:	60ba      	str	r2, [r7, #8]
 8002f8c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002f90:	60fb      	str	r3, [r7, #12]
 8002f92:	a35b      	add	r3, pc, #364	@ (adr r3, 8003100 <handlerArc+0x510>)
 8002f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f98:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002f9c:	f7fd fda8 	bl	8000af0 <__aeabi_dcmple>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d111      	bne.n	8002fca <handlerArc+0x3da>
 8002fa6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fa8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8002fac:	603a      	str	r2, [r7, #0]
 8002fae:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002fb2:	607b      	str	r3, [r7, #4]
 8002fb4:	a352      	add	r3, pc, #328	@ (adr r3, 8003100 <handlerArc+0x510>)
 8002fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fba:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002fbe:	f7fd fd97 	bl	8000af0 <__aeabi_dcmple>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	f000 80cf 	beq.w	8003168 <handlerArc+0x578>
		{
			/* Переопределение четверти, в которой расположена текущая точка дуги */
			if (arc->x_rel >= 0 && arc->y_rel > 0) { arc->dx = 1 * arc->dir; arc->dy = -1 * arc->dir; arc->s = -1 * arc->dir; }             //< 1 четверть
 8002fca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fcc:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8002fd0:	f04f 0200 	mov.w	r2, #0
 8002fd4:	f04f 0300 	mov.w	r3, #0
 8002fd8:	f7fd fd94 	bl	8000b04 <__aeabi_dcmpge>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d026      	beq.n	8003030 <handlerArc+0x440>
 8002fe2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fe4:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8002fe8:	f04f 0200 	mov.w	r2, #0
 8002fec:	f04f 0300 	mov.w	r3, #0
 8002ff0:	f7fd fd92 	bl	8000b18 <__aeabi_dcmpgt>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d01a      	beq.n	8003030 <handlerArc+0x440>
 8002ffa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ffc:	f993 2053 	ldrsb.w	r2, [r3, #83]	@ 0x53
 8003000:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003002:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8003006:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003008:	f993 3053 	ldrsb.w	r3, [r3, #83]	@ 0x53
 800300c:	b2db      	uxtb	r3, r3
 800300e:	425b      	negs	r3, r3
 8003010:	b2db      	uxtb	r3, r3
 8003012:	b25a      	sxtb	r2, r3
 8003014:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003016:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 800301a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800301c:	f993 3053 	ldrsb.w	r3, [r3, #83]	@ 0x53
 8003020:	b2db      	uxtb	r3, r3
 8003022:	425b      	negs	r3, r3
 8003024:	b2db      	uxtb	r3, r3
 8003026:	b25a      	sxtb	r2, r3
 8003028:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800302a:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
 800302e:	e09b      	b.n	8003168 <handlerArc+0x578>
			else if (arc->y_rel <= 0 && arc->x_rel > 0) { arc->dx = -1 * arc->dir; arc->dy = -1 * arc->dir; arc->s = 1 * arc->dir; }        //< 4 четверть
 8003030:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003032:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8003036:	f04f 0200 	mov.w	r2, #0
 800303a:	f04f 0300 	mov.w	r3, #0
 800303e:	f7fd fd57 	bl	8000af0 <__aeabi_dcmple>
 8003042:	4603      	mov	r3, r0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d026      	beq.n	8003096 <handlerArc+0x4a6>
 8003048:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800304a:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 800304e:	f04f 0200 	mov.w	r2, #0
 8003052:	f04f 0300 	mov.w	r3, #0
 8003056:	f7fd fd5f 	bl	8000b18 <__aeabi_dcmpgt>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d01a      	beq.n	8003096 <handlerArc+0x4a6>
 8003060:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003062:	f993 3053 	ldrsb.w	r3, [r3, #83]	@ 0x53
 8003066:	b2db      	uxtb	r3, r3
 8003068:	425b      	negs	r3, r3
 800306a:	b2db      	uxtb	r3, r3
 800306c:	b25a      	sxtb	r2, r3
 800306e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003070:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8003074:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003076:	f993 3053 	ldrsb.w	r3, [r3, #83]	@ 0x53
 800307a:	b2db      	uxtb	r3, r3
 800307c:	425b      	negs	r3, r3
 800307e:	b2db      	uxtb	r3, r3
 8003080:	b25a      	sxtb	r2, r3
 8003082:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003084:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8003088:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800308a:	f993 2053 	ldrsb.w	r2, [r3, #83]	@ 0x53
 800308e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003090:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
 8003094:	e068      	b.n	8003168 <handlerArc+0x578>
			else if (arc->x_rel <= 0 && arc->y_rel < 0) { arc->dx = -1 * arc->dir; arc->dy = 1 * arc->dir; arc->s = -1 * arc->dir; }        //< 3 четверть
 8003096:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003098:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 800309c:	f04f 0200 	mov.w	r2, #0
 80030a0:	f04f 0300 	mov.w	r3, #0
 80030a4:	f7fd fd24 	bl	8000af0 <__aeabi_dcmple>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d032      	beq.n	8003114 <handlerArc+0x524>
 80030ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030b0:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 80030b4:	f04f 0200 	mov.w	r2, #0
 80030b8:	f04f 0300 	mov.w	r3, #0
 80030bc:	f7fd fd0e 	bl	8000adc <__aeabi_dcmplt>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d026      	beq.n	8003114 <handlerArc+0x524>
 80030c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030c8:	f993 3053 	ldrsb.w	r3, [r3, #83]	@ 0x53
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	425b      	negs	r3, r3
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	b25a      	sxtb	r2, r3
 80030d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80030da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030dc:	f993 2053 	ldrsb.w	r2, [r3, #83]	@ 0x53
 80030e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 80030e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030e8:	f993 3053 	ldrsb.w	r3, [r3, #83]	@ 0x53
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	425b      	negs	r3, r3
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	b25a      	sxtb	r2, r3
 80030f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030f6:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
 80030fa:	e035      	b.n	8003168 <handlerArc+0x578>
 80030fc:	f3af 8000 	nop.w
 8003100:	a0000000 	.word	0xa0000000
 8003104:	3f699999 	.word	0x3f699999
 8003108:	20000758 	.word	0x20000758
 800310c:	20000760 	.word	0x20000760
 8003110:	20000768 	.word	0x20000768
			else if (arc->y_rel >= 0 && arc->x_rel < 0) { arc->dx = 1 * arc->dir; arc->dy = 1 * arc->dir; arc->s = 1 * arc->dir; }          //< 2 четверть
 8003114:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003116:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800311a:	f04f 0200 	mov.w	r2, #0
 800311e:	f04f 0300 	mov.w	r3, #0
 8003122:	f7fd fcef 	bl	8000b04 <__aeabi_dcmpge>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d01d      	beq.n	8003168 <handlerArc+0x578>
 800312c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800312e:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8003132:	f04f 0200 	mov.w	r2, #0
 8003136:	f04f 0300 	mov.w	r3, #0
 800313a:	f7fd fccf 	bl	8000adc <__aeabi_dcmplt>
 800313e:	4603      	mov	r3, r0
 8003140:	2b00      	cmp	r3, #0
 8003142:	d011      	beq.n	8003168 <handlerArc+0x578>
 8003144:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003146:	f993 2053 	ldrsb.w	r2, [r3, #83]	@ 0x53
 800314a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800314c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8003150:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003152:	f993 2053 	ldrsb.w	r2, [r3, #83]	@ 0x53
 8003156:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003158:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 800315c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800315e:	f993 2053 	ldrsb.w	r2, [r3, #83]	@ 0x53
 8003162:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003164:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
		}

		interpolator->_workState = INTERPOLATOR_READY;
 8003168:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800316a:	2201      	movs	r2, #1
 800316c:	701a      	strb	r2, [r3, #0]

	}

    return INTERPOLATOR_PROCESSING;
 800316e:	2302      	movs	r3, #2
}
 8003170:	4618      	mov	r0, r3
 8003172:	3760      	adds	r7, #96	@ 0x60
 8003174:	46bd      	mov	sp, r7
 8003176:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800317a:	bf00      	nop

0800317c <setBinarySteps>:

/** Функция формирования двоичного представления шагов по осям
  * step - шаг по оси, может быть 1 или -1
  */
uint8_t setBinarySteps(uint8_t axis, int8_t step)
{
 800317c:	b480      	push	{r7}
 800317e:	b085      	sub	sp, #20
 8003180:	af00      	add	r7, sp, #0
 8003182:	4603      	mov	r3, r0
 8003184:	460a      	mov	r2, r1
 8003186:	71fb      	strb	r3, [r7, #7]
 8003188:	4613      	mov	r3, r2
 800318a:	71bb      	strb	r3, [r7, #6]
    int8_t bin = 0b00000000;
 800318c:	2300      	movs	r3, #0
 800318e:	73fb      	strb	r3, [r7, #15]

    if (step == 1)
 8003190:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003194:	2b01      	cmp	r3, #1
 8003196:	d109      	bne.n	80031ac <setBinarySteps+0x30>
    {
        bin |= 0b00000001 << axis * 2;
 8003198:	79fb      	ldrb	r3, [r7, #7]
 800319a:	005b      	lsls	r3, r3, #1
 800319c:	2201      	movs	r2, #1
 800319e:	fa02 f303 	lsl.w	r3, r2, r3
 80031a2:	b25a      	sxtb	r2, r3
 80031a4:	7bfb      	ldrb	r3, [r7, #15]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	73fb      	strb	r3, [r7, #15]
 80031aa:	e00d      	b.n	80031c8 <setBinarySteps+0x4c>
    }
    else if (step == -1)
 80031ac:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80031b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031b4:	d108      	bne.n	80031c8 <setBinarySteps+0x4c>
    {
        bin |= 0b00000011 << axis * 2;
 80031b6:	79fb      	ldrb	r3, [r7, #7]
 80031b8:	005b      	lsls	r3, r3, #1
 80031ba:	2203      	movs	r2, #3
 80031bc:	fa02 f303 	lsl.w	r3, r2, r3
 80031c0:	b25a      	sxtb	r2, r3
 80031c2:	7bfb      	ldrb	r3, [r7, #15]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	73fb      	strb	r3, [r7, #15]
    }

    return bin;
 80031c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3714      	adds	r7, #20
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr
	...

080031d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80031de:	f001 fe99 	bl	8004f14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80031e2:	f000 f8e3 	bl	80033ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80031e6:	f000 fbd7 	bl	8003998 <MX_GPIO_Init>
  MX_ADC1_Init();
 80031ea:	f000 f949 	bl	8003480 <MX_ADC1_Init>
  MX_CAN1_Init();
 80031ee:	f000 f999 	bl	8003524 <MX_CAN1_Init>
  MX_DAC_Init();
 80031f2:	f000 f9cb 	bl	800358c <MX_DAC_Init>
  MX_I2C1_Init();
 80031f6:	f000 f9fd 	bl	80035f4 <MX_I2C1_Init>
  MX_TIM13_Init();
 80031fa:	f000 fafd 	bl	80037f8 <MX_TIM13_Init>
  MX_USART1_UART_Init();
 80031fe:	f000 fb49 	bl	8003894 <MX_USART1_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8003202:	f000 fb9b 	bl	800393c <MX_USB_OTG_FS_PCD_Init>
  MX_SPI3_Init();
 8003206:	f000 fa23 	bl	8003650 <MX_SPI3_Init>
  MX_USART3_UART_Init();
 800320a:	f000 fb6d 	bl	80038e8 <MX_USART3_UART_Init>
  MX_LWIP_Init();
 800320e:	f006 fbb7 	bl	8009980 <MX_LWIP_Init>
  MX_TIM2_Init();
 8003212:	f000 faa5 	bl	8003760 <MX_TIM2_Init>
  MX_TIM1_Init();
 8003216:	f000 fa51 	bl	80036bc <MX_TIM1_Init>

  /* Инициализация таймер DWT для одного шага в библиотеке stepper.h */
//  DWT_Init();

  /* Инициализация UDP сокета */
  udpSocketInit();
 800321a:	f000 feb9 	bl	8003f90 <udpSocketInit>

  /* Инициализация указателей на функции HAL для работы библиотек stepper.h и driver.h */
  stepperFunctionsInit(function_pin_1);
 800321e:	4b50      	ldr	r3, [pc, #320]	@ (8003360 <main+0x188>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4618      	mov	r0, r3
 8003224:	f001 f836 	bl	8004294 <stepperFunctionsInit>
  driverFunctionsInit(function_time_1, function_time_2, function_time_3, function_time_4);
 8003228:	4b4e      	ldr	r3, [pc, #312]	@ (8003364 <main+0x18c>)
 800322a:	6818      	ldr	r0, [r3, #0]
 800322c:	4b4e      	ldr	r3, [pc, #312]	@ (8003368 <main+0x190>)
 800322e:	6819      	ldr	r1, [r3, #0]
 8003230:	4b4e      	ldr	r3, [pc, #312]	@ (800336c <main+0x194>)
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	4b4e      	ldr	r3, [pc, #312]	@ (8003370 <main+0x198>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f7fd ffd8 	bl	80011ec <driverFunctionsInit>

  /* Инициализация шаговых моторов */
  stepperInit(&stepper1, &stepper1_pins);
 800323c:	494d      	ldr	r1, [pc, #308]	@ (8003374 <main+0x19c>)
 800323e:	484e      	ldr	r0, [pc, #312]	@ (8003378 <main+0x1a0>)
 8003240:	f001 f838 	bl	80042b4 <stepperInit>
  stepperInit(&stepper2, &stepper2_pins);
 8003244:	494d      	ldr	r1, [pc, #308]	@ (800337c <main+0x1a4>)
 8003246:	484e      	ldr	r0, [pc, #312]	@ (8003380 <main+0x1a8>)
 8003248:	f001 f834 	bl	80042b4 <stepperInit>

  /* Инициализация драйверов шаговых моторов */
  driverInit(&driver1, &stepper1, &driver1_pins, 1600, LINEAR);
 800324c:	2300      	movs	r3, #0
 800324e:	9300      	str	r3, [sp, #0]
 8003250:	f44f 63c8 	mov.w	r3, #1600	@ 0x640
 8003254:	4a4b      	ldr	r2, [pc, #300]	@ (8003384 <main+0x1ac>)
 8003256:	4948      	ldr	r1, [pc, #288]	@ (8003378 <main+0x1a0>)
 8003258:	484b      	ldr	r0, [pc, #300]	@ (8003388 <main+0x1b0>)
 800325a:	f7fd ffe9 	bl	8001230 <driverInit>
  driverInit(&driver2, &stepper2, &driver2_pins, 1600, LINEAR);
 800325e:	2300      	movs	r3, #0
 8003260:	9300      	str	r3, [sp, #0]
 8003262:	f44f 63c8 	mov.w	r3, #1600	@ 0x640
 8003266:	4a49      	ldr	r2, [pc, #292]	@ (800338c <main+0x1b4>)
 8003268:	4945      	ldr	r1, [pc, #276]	@ (8003380 <main+0x1a8>)
 800326a:	4849      	ldr	r0, [pc, #292]	@ (8003390 <main+0x1b8>)
 800326c:	f7fd ffe0 	bl	8001230 <driverInit>

  /* Инициализация планировщика*/
  plannerInit(&planner);
 8003270:	4848      	ldr	r0, [pc, #288]	@ (8003394 <main+0x1bc>)
 8003272:	f000 ff41 	bl	80040f8 <plannerInit>
  plannerFunctionsInit(function_time_3);
 8003276:	4b3d      	ldr	r3, [pc, #244]	@ (800336c <main+0x194>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4618      	mov	r0, r3
 800327c:	f000 ff2c 	bl	80040d8 <plannerFunctionsInit>

  /* Инициализация обработчика g - команд*/
  handlerGcodeInit(&ghandler);
 8003280:	4845      	ldr	r0, [pc, #276]	@ (8003398 <main+0x1c0>)
 8003282:	f7fe fd0b 	bl	8001c9c <handlerGcodeInit>

  /* ----------------------------------------------- Инициализация -------------------------------------------- */

  /* Добавить драйверы в планировщик */
  addDriver(&planner, &driver1, 0);
 8003286:	2200      	movs	r2, #0
 8003288:	493f      	ldr	r1, [pc, #252]	@ (8003388 <main+0x1b0>)
 800328a:	4842      	ldr	r0, [pc, #264]	@ (8003394 <main+0x1bc>)
 800328c:	f000 fff0 	bl	8004270 <addDriver>
  addDriver(&planner, &driver2, 1);
 8003290:	2201      	movs	r2, #1
 8003292:	493f      	ldr	r1, [pc, #252]	@ (8003390 <main+0x1b8>)
 8003294:	483f      	ldr	r0, [pc, #252]	@ (8003394 <main+0x1bc>)
 8003296:	f000 ffeb 	bl	8004270 <addDriver>

  /* Запуск таймера TIM2 */
  startTimerTIM2();
 800329a:	f000 fccb 	bl	8003c34 <startTimerTIM2>

  /* Запуск таймера TIM1 */
//  startTimerTIM1();

  /* Включить драйверы моторов */
  enableDriver(&driver1);
 800329e:	483a      	ldr	r0, [pc, #232]	@ (8003388 <main+0x1b0>)
 80032a0:	f7fe f882 	bl	80013a8 <enableDriver>
  enableDriver(&driver2);
 80032a4:	483a      	ldr	r0, [pc, #232]	@ (8003390 <main+0x1b8>)
 80032a6:	f7fe f87f 	bl	80013a8 <enableDriver>

  /* Тест */
  driver1.stepper->_globDir = true;
 80032aa:	4b37      	ldr	r3, [pc, #220]	@ (8003388 <main+0x1b0>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	2201      	movs	r2, #1
 80032b0:	77da      	strb	r2, [r3, #31]

  planner._maxSpeed = 5000;
 80032b2:	4b38      	ldr	r3, [pc, #224]	@ (8003394 <main+0x1bc>)
 80032b4:	4a39      	ldr	r2, [pc, #228]	@ (800339c <main+0x1c4>)
 80032b6:	611a      	str	r2, [r3, #16]
  planner._curSpeed = planner._maxSpeed;
 80032b8:	4b36      	ldr	r3, [pc, #216]	@ (8003394 <main+0x1bc>)
 80032ba:	691b      	ldr	r3, [r3, #16]
 80032bc:	4a35      	ldr	r2, [pc, #212]	@ (8003394 <main+0x1bc>)
 80032be:	60d3      	str	r3, [r2, #12]
  planner.stepTime = 1000000.0 / planner._maxSpeed;
 80032c0:	4b34      	ldr	r3, [pc, #208]	@ (8003394 <main+0x1bc>)
 80032c2:	691b      	ldr	r3, [r3, #16]
 80032c4:	4618      	mov	r0, r3
 80032c6:	f7fd f93f 	bl	8000548 <__aeabi_f2d>
 80032ca:	4602      	mov	r2, r0
 80032cc:	460b      	mov	r3, r1
 80032ce:	a122      	add	r1, pc, #136	@ (adr r1, 8003358 <main+0x180>)
 80032d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80032d4:	f7fd faba 	bl	800084c <__aeabi_ddiv>
 80032d8:	4602      	mov	r2, r0
 80032da:	460b      	mov	r3, r1
 80032dc:	4610      	mov	r0, r2
 80032de:	4619      	mov	r1, r3
 80032e0:	f7fd fc3a 	bl	8000b58 <__aeabi_d2uiz>
 80032e4:	4603      	mov	r3, r0
 80032e6:	4a2b      	ldr	r2, [pc, #172]	@ (8003394 <main+0x1bc>)
 80032e8:	6253      	str	r3, [r2, #36]	@ 0x24


	  /* Основные функции управления драйверами */
//	  tickDriver(&driver1);

	  if(RUN == true)
 80032ea:	4b2d      	ldr	r3, [pc, #180]	@ (80033a0 <main+0x1c8>)
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d02f      	beq.n	8003352 <main+0x17a>
	  {
		  if(availableForReadChar(&fifoGcodeBuf) == FIFO_OK)
 80032f2:	482c      	ldr	r0, [pc, #176]	@ (80033a4 <main+0x1cc>)
 80032f4:	f7fe fc98 	bl	8001c28 <availableForReadChar>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d102      	bne.n	8003304 <main+0x12c>
		  {
			  handlerGcode(&ghandler);
 80032fe:	4826      	ldr	r0, [pc, #152]	@ (8003398 <main+0x1c0>)
 8003300:	f7fe fcf2 	bl	8001ce8 <handlerGcode>
		  }

		  handlerGcommand(&ghandler);
 8003304:	4824      	ldr	r0, [pc, #144]	@ (8003398 <main+0x1c0>)
 8003306:	f7fe fe61 	bl	8001fcc <handlerGcommand>

		  if(availableForWrite(&fifoBufSteps) == FIFO_OVERFLOW) planner._workState = PLANNER_RUN;
 800330a:	4827      	ldr	r0, [pc, #156]	@ (80033a8 <main+0x1d0>)
 800330c:	f7fe fbec 	bl	8001ae8 <availableForWrite>
 8003310:	4603      	mov	r3, r0
 8003312:	2b03      	cmp	r3, #3
 8003314:	d102      	bne.n	800331c <main+0x144>
 8003316:	4b1f      	ldr	r3, [pc, #124]	@ (8003394 <main+0x1bc>)
 8003318:	2203      	movs	r2, #3
 800331a:	769a      	strb	r2, [r3, #26]

		  if (availableForRead(&fifoBufSteps) == FIFO_OK)
 800331c:	4822      	ldr	r0, [pc, #136]	@ (80033a8 <main+0x1d0>)
 800331e:	f7fe fbbf 	bl	8001aa0 <availableForRead>
 8003322:	4603      	mov	r3, r0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d102      	bne.n	800332e <main+0x156>
		  {
			  /* Тикер планировщика многоосевого движения */
			  plannerTickTest(&planner);
 8003328:	481a      	ldr	r0, [pc, #104]	@ (8003394 <main+0x1bc>)
 800332a:	f000 ff35 	bl	8004198 <plannerTickTest>
		  }

		  if(availableForReadChar(&fifoGcodeBuf) == FIFO_EMPTY && availableForRead(&fifoBufSteps) == FIFO_EMPTY)
 800332e:	481d      	ldr	r0, [pc, #116]	@ (80033a4 <main+0x1cc>)
 8003330:	f7fe fc7a 	bl	8001c28 <availableForReadChar>
 8003334:	4603      	mov	r3, r0
 8003336:	2b02      	cmp	r3, #2
 8003338:	d10b      	bne.n	8003352 <main+0x17a>
 800333a:	481b      	ldr	r0, [pc, #108]	@ (80033a8 <main+0x1d0>)
 800333c:	f7fe fbb0 	bl	8001aa0 <availableForRead>
 8003340:	4603      	mov	r3, r0
 8003342:	2b02      	cmp	r3, #2
 8003344:	d105      	bne.n	8003352 <main+0x17a>
		  {
			  handlerStateCalculate(&ghandler);
 8003346:	4814      	ldr	r0, [pc, #80]	@ (8003398 <main+0x1c0>)
 8003348:	f7fe fea2 	bl	8002090 <handlerStateCalculate>
			  RUN = false;
 800334c:	4b14      	ldr	r3, [pc, #80]	@ (80033a0 <main+0x1c8>)
 800334e:	2200      	movs	r2, #0
 8003350:	701a      	strb	r2, [r3, #0]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  /* Ethernet */
	  MX_LWIP_Process();
 8003352:	f006 fc55 	bl	8009c00 <MX_LWIP_Process>
	  if(RUN == true)
 8003356:	e7c8      	b.n	80032ea <main+0x112>
 8003358:	00000000 	.word	0x00000000
 800335c:	412e8480 	.word	0x412e8480
 8003360:	200003cc 	.word	0x200003cc
 8003364:	200003d0 	.word	0x200003d0
 8003368:	200003d4 	.word	0x200003d4
 800336c:	200003d8 	.word	0x200003d8
 8003370:	200003dc 	.word	0x200003dc
 8003374:	200003e0 	.word	0x200003e0
 8003378:	200022fc 	.word	0x200022fc
 800337c:	200003f8 	.word	0x200003f8
 8003380:	2000231c 	.word	0x2000231c
 8003384:	20000410 	.word	0x20000410
 8003388:	2000233c 	.word	0x2000233c
 800338c:	20000428 	.word	0x20000428
 8003390:	2000239c 	.word	0x2000239c
 8003394:	200023fc 	.word	0x200023fc
 8003398:	200024a4 	.word	0x200024a4
 800339c:	459c4000 	.word	0x459c4000
 80033a0:	200024ac 	.word	0x200024ac
 80033a4:	20000740 	.word	0x20000740
 80033a8:	20001b70 	.word	0x20001b70

080033ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b094      	sub	sp, #80	@ 0x50
 80033b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80033b2:	f107 0320 	add.w	r3, r7, #32
 80033b6:	2230      	movs	r2, #48	@ 0x30
 80033b8:	2100      	movs	r1, #0
 80033ba:	4618      	mov	r0, r3
 80033bc:	f012 fcdf 	bl	8015d7e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80033c0:	f107 030c 	add.w	r3, r7, #12
 80033c4:	2200      	movs	r2, #0
 80033c6:	601a      	str	r2, [r3, #0]
 80033c8:	605a      	str	r2, [r3, #4]
 80033ca:	609a      	str	r2, [r3, #8]
 80033cc:	60da      	str	r2, [r3, #12]
 80033ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80033d0:	2300      	movs	r3, #0
 80033d2:	60bb      	str	r3, [r7, #8]
 80033d4:	4b28      	ldr	r3, [pc, #160]	@ (8003478 <SystemClock_Config+0xcc>)
 80033d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033d8:	4a27      	ldr	r2, [pc, #156]	@ (8003478 <SystemClock_Config+0xcc>)
 80033da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033de:	6413      	str	r3, [r2, #64]	@ 0x40
 80033e0:	4b25      	ldr	r3, [pc, #148]	@ (8003478 <SystemClock_Config+0xcc>)
 80033e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033e8:	60bb      	str	r3, [r7, #8]
 80033ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80033ec:	2300      	movs	r3, #0
 80033ee:	607b      	str	r3, [r7, #4]
 80033f0:	4b22      	ldr	r3, [pc, #136]	@ (800347c <SystemClock_Config+0xd0>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a21      	ldr	r2, [pc, #132]	@ (800347c <SystemClock_Config+0xd0>)
 80033f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80033fa:	6013      	str	r3, [r2, #0]
 80033fc:	4b1f      	ldr	r3, [pc, #124]	@ (800347c <SystemClock_Config+0xd0>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003404:	607b      	str	r3, [r7, #4]
 8003406:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003408:	2301      	movs	r3, #1
 800340a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800340c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003410:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003412:	2302      	movs	r3, #2
 8003414:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003416:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800341a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800341c:	2304      	movs	r3, #4
 800341e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003420:	23a8      	movs	r3, #168	@ 0xa8
 8003422:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003424:	2302      	movs	r3, #2
 8003426:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003428:	2307      	movs	r3, #7
 800342a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800342c:	f107 0320 	add.w	r3, r7, #32
 8003430:	4618      	mov	r0, r3
 8003432:	f004 f847 	bl	80074c4 <HAL_RCC_OscConfig>
 8003436:	4603      	mov	r3, r0
 8003438:	2b00      	cmp	r3, #0
 800343a:	d001      	beq.n	8003440 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800343c:	f000 fda2 	bl	8003f84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003440:	230f      	movs	r3, #15
 8003442:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003444:	2302      	movs	r3, #2
 8003446:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003448:	2300      	movs	r3, #0
 800344a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800344c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003450:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003452:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003456:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003458:	f107 030c 	add.w	r3, r7, #12
 800345c:	2105      	movs	r1, #5
 800345e:	4618      	mov	r0, r3
 8003460:	f004 faa8 	bl	80079b4 <HAL_RCC_ClockConfig>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d001      	beq.n	800346e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800346a:	f000 fd8b 	bl	8003f84 <Error_Handler>
  }
}
 800346e:	bf00      	nop
 8003470:	3750      	adds	r7, #80	@ 0x50
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	40023800 	.word	0x40023800
 800347c:	40007000 	.word	0x40007000

08003480 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b084      	sub	sp, #16
 8003484:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003486:	463b      	mov	r3, r7
 8003488:	2200      	movs	r2, #0
 800348a:	601a      	str	r2, [r3, #0]
 800348c:	605a      	str	r2, [r3, #4]
 800348e:	609a      	str	r2, [r3, #8]
 8003490:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003492:	4b21      	ldr	r3, [pc, #132]	@ (8003518 <MX_ADC1_Init+0x98>)
 8003494:	4a21      	ldr	r2, [pc, #132]	@ (800351c <MX_ADC1_Init+0x9c>)
 8003496:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003498:	4b1f      	ldr	r3, [pc, #124]	@ (8003518 <MX_ADC1_Init+0x98>)
 800349a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800349e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80034a0:	4b1d      	ldr	r3, [pc, #116]	@ (8003518 <MX_ADC1_Init+0x98>)
 80034a2:	2200      	movs	r2, #0
 80034a4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80034a6:	4b1c      	ldr	r3, [pc, #112]	@ (8003518 <MX_ADC1_Init+0x98>)
 80034a8:	2200      	movs	r2, #0
 80034aa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80034ac:	4b1a      	ldr	r3, [pc, #104]	@ (8003518 <MX_ADC1_Init+0x98>)
 80034ae:	2200      	movs	r2, #0
 80034b0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80034b2:	4b19      	ldr	r3, [pc, #100]	@ (8003518 <MX_ADC1_Init+0x98>)
 80034b4:	2200      	movs	r2, #0
 80034b6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80034ba:	4b17      	ldr	r3, [pc, #92]	@ (8003518 <MX_ADC1_Init+0x98>)
 80034bc:	2200      	movs	r2, #0
 80034be:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80034c0:	4b15      	ldr	r3, [pc, #84]	@ (8003518 <MX_ADC1_Init+0x98>)
 80034c2:	4a17      	ldr	r2, [pc, #92]	@ (8003520 <MX_ADC1_Init+0xa0>)
 80034c4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80034c6:	4b14      	ldr	r3, [pc, #80]	@ (8003518 <MX_ADC1_Init+0x98>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80034cc:	4b12      	ldr	r3, [pc, #72]	@ (8003518 <MX_ADC1_Init+0x98>)
 80034ce:	2201      	movs	r2, #1
 80034d0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80034d2:	4b11      	ldr	r3, [pc, #68]	@ (8003518 <MX_ADC1_Init+0x98>)
 80034d4:	2200      	movs	r2, #0
 80034d6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80034da:	4b0f      	ldr	r3, [pc, #60]	@ (8003518 <MX_ADC1_Init+0x98>)
 80034dc:	2201      	movs	r2, #1
 80034de:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80034e0:	480d      	ldr	r0, [pc, #52]	@ (8003518 <MX_ADC1_Init+0x98>)
 80034e2:	f001 fdad 	bl	8005040 <HAL_ADC_Init>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d001      	beq.n	80034f0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80034ec:	f000 fd4a 	bl	8003f84 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80034f0:	2300      	movs	r3, #0
 80034f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80034f4:	2301      	movs	r3, #1
 80034f6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80034f8:	2300      	movs	r3, #0
 80034fa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80034fc:	463b      	mov	r3, r7
 80034fe:	4619      	mov	r1, r3
 8003500:	4805      	ldr	r0, [pc, #20]	@ (8003518 <MX_ADC1_Init+0x98>)
 8003502:	f001 fde1 	bl	80050c8 <HAL_ADC_ConfigChannel>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d001      	beq.n	8003510 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800350c:	f000 fd3a 	bl	8003f84 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003510:	bf00      	nop
 8003512:	3710      	adds	r7, #16
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}
 8003518:	20001b80 	.word	0x20001b80
 800351c:	40012000 	.word	0x40012000
 8003520:	0f000001 	.word	0x0f000001

08003524 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8003528:	4b16      	ldr	r3, [pc, #88]	@ (8003584 <MX_CAN1_Init+0x60>)
 800352a:	4a17      	ldr	r2, [pc, #92]	@ (8003588 <MX_CAN1_Init+0x64>)
 800352c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800352e:	4b15      	ldr	r3, [pc, #84]	@ (8003584 <MX_CAN1_Init+0x60>)
 8003530:	2210      	movs	r2, #16
 8003532:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8003534:	4b13      	ldr	r3, [pc, #76]	@ (8003584 <MX_CAN1_Init+0x60>)
 8003536:	2200      	movs	r2, #0
 8003538:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800353a:	4b12      	ldr	r3, [pc, #72]	@ (8003584 <MX_CAN1_Init+0x60>)
 800353c:	2200      	movs	r2, #0
 800353e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8003540:	4b10      	ldr	r3, [pc, #64]	@ (8003584 <MX_CAN1_Init+0x60>)
 8003542:	2200      	movs	r2, #0
 8003544:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8003546:	4b0f      	ldr	r3, [pc, #60]	@ (8003584 <MX_CAN1_Init+0x60>)
 8003548:	2200      	movs	r2, #0
 800354a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800354c:	4b0d      	ldr	r3, [pc, #52]	@ (8003584 <MX_CAN1_Init+0x60>)
 800354e:	2200      	movs	r2, #0
 8003550:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8003552:	4b0c      	ldr	r3, [pc, #48]	@ (8003584 <MX_CAN1_Init+0x60>)
 8003554:	2200      	movs	r2, #0
 8003556:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8003558:	4b0a      	ldr	r3, [pc, #40]	@ (8003584 <MX_CAN1_Init+0x60>)
 800355a:	2200      	movs	r2, #0
 800355c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800355e:	4b09      	ldr	r3, [pc, #36]	@ (8003584 <MX_CAN1_Init+0x60>)
 8003560:	2200      	movs	r2, #0
 8003562:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8003564:	4b07      	ldr	r3, [pc, #28]	@ (8003584 <MX_CAN1_Init+0x60>)
 8003566:	2200      	movs	r2, #0
 8003568:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800356a:	4b06      	ldr	r3, [pc, #24]	@ (8003584 <MX_CAN1_Init+0x60>)
 800356c:	2200      	movs	r2, #0
 800356e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8003570:	4804      	ldr	r0, [pc, #16]	@ (8003584 <MX_CAN1_Init+0x60>)
 8003572:	f001 ffc7 	bl	8005504 <HAL_CAN_Init>
 8003576:	4603      	mov	r3, r0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d001      	beq.n	8003580 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 800357c:	f000 fd02 	bl	8003f84 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8003580:	bf00      	nop
 8003582:	bd80      	pop	{r7, pc}
 8003584:	20001bc8 	.word	0x20001bc8
 8003588:	40006400 	.word	0x40006400

0800358c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8003592:	463b      	mov	r3, r7
 8003594:	2200      	movs	r2, #0
 8003596:	601a      	str	r2, [r3, #0]
 8003598:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800359a:	4b14      	ldr	r3, [pc, #80]	@ (80035ec <MX_DAC_Init+0x60>)
 800359c:	4a14      	ldr	r2, [pc, #80]	@ (80035f0 <MX_DAC_Init+0x64>)
 800359e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80035a0:	4812      	ldr	r0, [pc, #72]	@ (80035ec <MX_DAC_Init+0x60>)
 80035a2:	f002 f9bc 	bl	800591e <HAL_DAC_Init>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d001      	beq.n	80035b0 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80035ac:	f000 fcea 	bl	8003f84 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80035b0:	2300      	movs	r3, #0
 80035b2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80035b4:	2300      	movs	r3, #0
 80035b6:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80035b8:	463b      	mov	r3, r7
 80035ba:	2200      	movs	r2, #0
 80035bc:	4619      	mov	r1, r3
 80035be:	480b      	ldr	r0, [pc, #44]	@ (80035ec <MX_DAC_Init+0x60>)
 80035c0:	f002 f9cf 	bl	8005962 <HAL_DAC_ConfigChannel>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d001      	beq.n	80035ce <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80035ca:	f000 fcdb 	bl	8003f84 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80035ce:	463b      	mov	r3, r7
 80035d0:	2210      	movs	r2, #16
 80035d2:	4619      	mov	r1, r3
 80035d4:	4805      	ldr	r0, [pc, #20]	@ (80035ec <MX_DAC_Init+0x60>)
 80035d6:	f002 f9c4 	bl	8005962 <HAL_DAC_ConfigChannel>
 80035da:	4603      	mov	r3, r0
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d001      	beq.n	80035e4 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 80035e0:	f000 fcd0 	bl	8003f84 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80035e4:	bf00      	nop
 80035e6:	3708      	adds	r7, #8
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	20001bf0 	.word	0x20001bf0
 80035f0:	40007400 	.word	0x40007400

080035f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80035f8:	4b12      	ldr	r3, [pc, #72]	@ (8003644 <MX_I2C1_Init+0x50>)
 80035fa:	4a13      	ldr	r2, [pc, #76]	@ (8003648 <MX_I2C1_Init+0x54>)
 80035fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80035fe:	4b11      	ldr	r3, [pc, #68]	@ (8003644 <MX_I2C1_Init+0x50>)
 8003600:	4a12      	ldr	r2, [pc, #72]	@ (800364c <MX_I2C1_Init+0x58>)
 8003602:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003604:	4b0f      	ldr	r3, [pc, #60]	@ (8003644 <MX_I2C1_Init+0x50>)
 8003606:	2200      	movs	r2, #0
 8003608:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800360a:	4b0e      	ldr	r3, [pc, #56]	@ (8003644 <MX_I2C1_Init+0x50>)
 800360c:	2200      	movs	r2, #0
 800360e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003610:	4b0c      	ldr	r3, [pc, #48]	@ (8003644 <MX_I2C1_Init+0x50>)
 8003612:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003616:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003618:	4b0a      	ldr	r3, [pc, #40]	@ (8003644 <MX_I2C1_Init+0x50>)
 800361a:	2200      	movs	r2, #0
 800361c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800361e:	4b09      	ldr	r3, [pc, #36]	@ (8003644 <MX_I2C1_Init+0x50>)
 8003620:	2200      	movs	r2, #0
 8003622:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003624:	4b07      	ldr	r3, [pc, #28]	@ (8003644 <MX_I2C1_Init+0x50>)
 8003626:	2200      	movs	r2, #0
 8003628:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800362a:	4b06      	ldr	r3, [pc, #24]	@ (8003644 <MX_I2C1_Init+0x50>)
 800362c:	2200      	movs	r2, #0
 800362e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003630:	4804      	ldr	r0, [pc, #16]	@ (8003644 <MX_I2C1_Init+0x50>)
 8003632:	f003 fcf3 	bl	800701c <HAL_I2C_Init>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	d001      	beq.n	8003640 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800363c:	f000 fca2 	bl	8003f84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003640:	bf00      	nop
 8003642:	bd80      	pop	{r7, pc}
 8003644:	20001c04 	.word	0x20001c04
 8003648:	40005400 	.word	0x40005400
 800364c:	000186a0 	.word	0x000186a0

08003650 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8003654:	4b17      	ldr	r3, [pc, #92]	@ (80036b4 <MX_SPI3_Init+0x64>)
 8003656:	4a18      	ldr	r2, [pc, #96]	@ (80036b8 <MX_SPI3_Init+0x68>)
 8003658:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800365a:	4b16      	ldr	r3, [pc, #88]	@ (80036b4 <MX_SPI3_Init+0x64>)
 800365c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003660:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8003662:	4b14      	ldr	r3, [pc, #80]	@ (80036b4 <MX_SPI3_Init+0x64>)
 8003664:	2200      	movs	r2, #0
 8003666:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8003668:	4b12      	ldr	r3, [pc, #72]	@ (80036b4 <MX_SPI3_Init+0x64>)
 800366a:	2200      	movs	r2, #0
 800366c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800366e:	4b11      	ldr	r3, [pc, #68]	@ (80036b4 <MX_SPI3_Init+0x64>)
 8003670:	2200      	movs	r2, #0
 8003672:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003674:	4b0f      	ldr	r3, [pc, #60]	@ (80036b4 <MX_SPI3_Init+0x64>)
 8003676:	2200      	movs	r2, #0
 8003678:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800367a:	4b0e      	ldr	r3, [pc, #56]	@ (80036b4 <MX_SPI3_Init+0x64>)
 800367c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003680:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003682:	4b0c      	ldr	r3, [pc, #48]	@ (80036b4 <MX_SPI3_Init+0x64>)
 8003684:	2200      	movs	r2, #0
 8003686:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003688:	4b0a      	ldr	r3, [pc, #40]	@ (80036b4 <MX_SPI3_Init+0x64>)
 800368a:	2200      	movs	r2, #0
 800368c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800368e:	4b09      	ldr	r3, [pc, #36]	@ (80036b4 <MX_SPI3_Init+0x64>)
 8003690:	2200      	movs	r2, #0
 8003692:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003694:	4b07      	ldr	r3, [pc, #28]	@ (80036b4 <MX_SPI3_Init+0x64>)
 8003696:	2200      	movs	r2, #0
 8003698:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 800369a:	4b06      	ldr	r3, [pc, #24]	@ (80036b4 <MX_SPI3_Init+0x64>)
 800369c:	220a      	movs	r2, #10
 800369e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80036a0:	4804      	ldr	r0, [pc, #16]	@ (80036b4 <MX_SPI3_Init+0x64>)
 80036a2:	f004 fba7 	bl	8007df4 <HAL_SPI_Init>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d001      	beq.n	80036b0 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80036ac:	f000 fc6a 	bl	8003f84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80036b0:	bf00      	nop
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	20001c58 	.word	0x20001c58
 80036b8:	40003c00 	.word	0x40003c00

080036bc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b086      	sub	sp, #24
 80036c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80036c2:	f107 0308 	add.w	r3, r7, #8
 80036c6:	2200      	movs	r2, #0
 80036c8:	601a      	str	r2, [r3, #0]
 80036ca:	605a      	str	r2, [r3, #4]
 80036cc:	609a      	str	r2, [r3, #8]
 80036ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036d0:	463b      	mov	r3, r7
 80036d2:	2200      	movs	r2, #0
 80036d4:	601a      	str	r2, [r3, #0]
 80036d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80036d8:	4b1f      	ldr	r3, [pc, #124]	@ (8003758 <MX_TIM1_Init+0x9c>)
 80036da:	4a20      	ldr	r2, [pc, #128]	@ (800375c <MX_TIM1_Init+0xa0>)
 80036dc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1680 - 1;
 80036de:	4b1e      	ldr	r3, [pc, #120]	@ (8003758 <MX_TIM1_Init+0x9c>)
 80036e0:	f240 628f 	movw	r2, #1679	@ 0x68f
 80036e4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036e6:	4b1c      	ldr	r3, [pc, #112]	@ (8003758 <MX_TIM1_Init+0x9c>)
 80036e8:	2200      	movs	r2, #0
 80036ea:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50000 - 1;
 80036ec:	4b1a      	ldr	r3, [pc, #104]	@ (8003758 <MX_TIM1_Init+0x9c>)
 80036ee:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 80036f2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036f4:	4b18      	ldr	r3, [pc, #96]	@ (8003758 <MX_TIM1_Init+0x9c>)
 80036f6:	2200      	movs	r2, #0
 80036f8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80036fa:	4b17      	ldr	r3, [pc, #92]	@ (8003758 <MX_TIM1_Init+0x9c>)
 80036fc:	2200      	movs	r2, #0
 80036fe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003700:	4b15      	ldr	r3, [pc, #84]	@ (8003758 <MX_TIM1_Init+0x9c>)
 8003702:	2200      	movs	r2, #0
 8003704:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003706:	4814      	ldr	r0, [pc, #80]	@ (8003758 <MX_TIM1_Init+0x9c>)
 8003708:	f004 fbfd 	bl	8007f06 <HAL_TIM_Base_Init>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d001      	beq.n	8003716 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8003712:	f000 fc37 	bl	8003f84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003716:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800371a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800371c:	f107 0308 	add.w	r3, r7, #8
 8003720:	4619      	mov	r1, r3
 8003722:	480d      	ldr	r0, [pc, #52]	@ (8003758 <MX_TIM1_Init+0x9c>)
 8003724:	f004 fee8 	bl	80084f8 <HAL_TIM_ConfigClockSource>
 8003728:	4603      	mov	r3, r0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d001      	beq.n	8003732 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800372e:	f000 fc29 	bl	8003f84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003732:	2320      	movs	r3, #32
 8003734:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003736:	2300      	movs	r3, #0
 8003738:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800373a:	463b      	mov	r3, r7
 800373c:	4619      	mov	r1, r3
 800373e:	4806      	ldr	r0, [pc, #24]	@ (8003758 <MX_TIM1_Init+0x9c>)
 8003740:	f005 faca 	bl	8008cd8 <HAL_TIMEx_MasterConfigSynchronization>
 8003744:	4603      	mov	r3, r0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d001      	beq.n	800374e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800374a:	f000 fc1b 	bl	8003f84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800374e:	bf00      	nop
 8003750:	3718      	adds	r7, #24
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	20001cb0 	.word	0x20001cb0
 800375c:	40010000 	.word	0x40010000

08003760 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b086      	sub	sp, #24
 8003764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003766:	f107 0308 	add.w	r3, r7, #8
 800376a:	2200      	movs	r2, #0
 800376c:	601a      	str	r2, [r3, #0]
 800376e:	605a      	str	r2, [r3, #4]
 8003770:	609a      	str	r2, [r3, #8]
 8003772:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003774:	463b      	mov	r3, r7
 8003776:	2200      	movs	r2, #0
 8003778:	601a      	str	r2, [r3, #0]
 800377a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800377c:	4b1d      	ldr	r3, [pc, #116]	@ (80037f4 <MX_TIM2_Init+0x94>)
 800377e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003782:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8003784:	4b1b      	ldr	r3, [pc, #108]	@ (80037f4 <MX_TIM2_Init+0x94>)
 8003786:	2253      	movs	r2, #83	@ 0x53
 8003788:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800378a:	4b1a      	ldr	r3, [pc, #104]	@ (80037f4 <MX_TIM2_Init+0x94>)
 800378c:	2200      	movs	r2, #0
 800378e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8003790:	4b18      	ldr	r3, [pc, #96]	@ (80037f4 <MX_TIM2_Init+0x94>)
 8003792:	f04f 32ff 	mov.w	r2, #4294967295
 8003796:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003798:	4b16      	ldr	r3, [pc, #88]	@ (80037f4 <MX_TIM2_Init+0x94>)
 800379a:	2200      	movs	r2, #0
 800379c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800379e:	4b15      	ldr	r3, [pc, #84]	@ (80037f4 <MX_TIM2_Init+0x94>)
 80037a0:	2200      	movs	r2, #0
 80037a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80037a4:	4813      	ldr	r0, [pc, #76]	@ (80037f4 <MX_TIM2_Init+0x94>)
 80037a6:	f004 fbae 	bl	8007f06 <HAL_TIM_Base_Init>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d001      	beq.n	80037b4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80037b0:	f000 fbe8 	bl	8003f84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80037b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80037b8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80037ba:	f107 0308 	add.w	r3, r7, #8
 80037be:	4619      	mov	r1, r3
 80037c0:	480c      	ldr	r0, [pc, #48]	@ (80037f4 <MX_TIM2_Init+0x94>)
 80037c2:	f004 fe99 	bl	80084f8 <HAL_TIM_ConfigClockSource>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d001      	beq.n	80037d0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80037cc:	f000 fbda 	bl	8003f84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037d0:	2300      	movs	r3, #0
 80037d2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037d4:	2300      	movs	r3, #0
 80037d6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80037d8:	463b      	mov	r3, r7
 80037da:	4619      	mov	r1, r3
 80037dc:	4805      	ldr	r0, [pc, #20]	@ (80037f4 <MX_TIM2_Init+0x94>)
 80037de:	f005 fa7b 	bl	8008cd8 <HAL_TIMEx_MasterConfigSynchronization>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d001      	beq.n	80037ec <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80037e8:	f000 fbcc 	bl	8003f84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80037ec:	bf00      	nop
 80037ee:	3718      	adds	r7, #24
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	20001cf8 	.word	0x20001cf8

080037f8 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b088      	sub	sp, #32
 80037fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80037fe:	1d3b      	adds	r3, r7, #4
 8003800:	2200      	movs	r2, #0
 8003802:	601a      	str	r2, [r3, #0]
 8003804:	605a      	str	r2, [r3, #4]
 8003806:	609a      	str	r2, [r3, #8]
 8003808:	60da      	str	r2, [r3, #12]
 800380a:	611a      	str	r2, [r3, #16]
 800380c:	615a      	str	r2, [r3, #20]
 800380e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8003810:	4b1e      	ldr	r3, [pc, #120]	@ (800388c <MX_TIM13_Init+0x94>)
 8003812:	4a1f      	ldr	r2, [pc, #124]	@ (8003890 <MX_TIM13_Init+0x98>)
 8003814:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 8003816:	4b1d      	ldr	r3, [pc, #116]	@ (800388c <MX_TIM13_Init+0x94>)
 8003818:	2200      	movs	r2, #0
 800381a:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800381c:	4b1b      	ldr	r3, [pc, #108]	@ (800388c <MX_TIM13_Init+0x94>)
 800381e:	2200      	movs	r2, #0
 8003820:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8003822:	4b1a      	ldr	r3, [pc, #104]	@ (800388c <MX_TIM13_Init+0x94>)
 8003824:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003828:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800382a:	4b18      	ldr	r3, [pc, #96]	@ (800388c <MX_TIM13_Init+0x94>)
 800382c:	2200      	movs	r2, #0
 800382e:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003830:	4b16      	ldr	r3, [pc, #88]	@ (800388c <MX_TIM13_Init+0x94>)
 8003832:	2200      	movs	r2, #0
 8003834:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8003836:	4815      	ldr	r0, [pc, #84]	@ (800388c <MX_TIM13_Init+0x94>)
 8003838:	f004 fb65 	bl	8007f06 <HAL_TIM_Base_Init>
 800383c:	4603      	mov	r3, r0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d001      	beq.n	8003846 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8003842:	f000 fb9f 	bl	8003f84 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8003846:	4811      	ldr	r0, [pc, #68]	@ (800388c <MX_TIM13_Init+0x94>)
 8003848:	f004 fc4b 	bl	80080e2 <HAL_TIM_PWM_Init>
 800384c:	4603      	mov	r3, r0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d001      	beq.n	8003856 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8003852:	f000 fb97 	bl	8003f84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003856:	2360      	movs	r3, #96	@ 0x60
 8003858:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800385a:	2300      	movs	r3, #0
 800385c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800385e:	2300      	movs	r3, #0
 8003860:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003862:	2300      	movs	r3, #0
 8003864:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003866:	1d3b      	adds	r3, r7, #4
 8003868:	2200      	movs	r2, #0
 800386a:	4619      	mov	r1, r3
 800386c:	4807      	ldr	r0, [pc, #28]	@ (800388c <MX_TIM13_Init+0x94>)
 800386e:	f004 fd81 	bl	8008374 <HAL_TIM_PWM_ConfigChannel>
 8003872:	4603      	mov	r3, r0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d001      	beq.n	800387c <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8003878:	f000 fb84 	bl	8003f84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 800387c:	4803      	ldr	r0, [pc, #12]	@ (800388c <MX_TIM13_Init+0x94>)
 800387e:	f000 ffed 	bl	800485c <HAL_TIM_MspPostInit>

}
 8003882:	bf00      	nop
 8003884:	3720      	adds	r7, #32
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	20001d40 	.word	0x20001d40
 8003890:	40001c00 	.word	0x40001c00

08003894 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003898:	4b11      	ldr	r3, [pc, #68]	@ (80038e0 <MX_USART1_UART_Init+0x4c>)
 800389a:	4a12      	ldr	r2, [pc, #72]	@ (80038e4 <MX_USART1_UART_Init+0x50>)
 800389c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800389e:	4b10      	ldr	r3, [pc, #64]	@ (80038e0 <MX_USART1_UART_Init+0x4c>)
 80038a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80038a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80038a6:	4b0e      	ldr	r3, [pc, #56]	@ (80038e0 <MX_USART1_UART_Init+0x4c>)
 80038a8:	2200      	movs	r2, #0
 80038aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80038ac:	4b0c      	ldr	r3, [pc, #48]	@ (80038e0 <MX_USART1_UART_Init+0x4c>)
 80038ae:	2200      	movs	r2, #0
 80038b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80038b2:	4b0b      	ldr	r3, [pc, #44]	@ (80038e0 <MX_USART1_UART_Init+0x4c>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80038b8:	4b09      	ldr	r3, [pc, #36]	@ (80038e0 <MX_USART1_UART_Init+0x4c>)
 80038ba:	220c      	movs	r2, #12
 80038bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80038be:	4b08      	ldr	r3, [pc, #32]	@ (80038e0 <MX_USART1_UART_Init+0x4c>)
 80038c0:	2200      	movs	r2, #0
 80038c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80038c4:	4b06      	ldr	r3, [pc, #24]	@ (80038e0 <MX_USART1_UART_Init+0x4c>)
 80038c6:	2200      	movs	r2, #0
 80038c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80038ca:	4805      	ldr	r0, [pc, #20]	@ (80038e0 <MX_USART1_UART_Init+0x4c>)
 80038cc:	f005 fa94 	bl	8008df8 <HAL_UART_Init>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d001      	beq.n	80038da <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80038d6:	f000 fb55 	bl	8003f84 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80038da:	bf00      	nop
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	20001d88 	.word	0x20001d88
 80038e4:	40011000 	.word	0x40011000

080038e8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80038ec:	4b11      	ldr	r3, [pc, #68]	@ (8003934 <MX_USART3_UART_Init+0x4c>)
 80038ee:	4a12      	ldr	r2, [pc, #72]	@ (8003938 <MX_USART3_UART_Init+0x50>)
 80038f0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80038f2:	4b10      	ldr	r3, [pc, #64]	@ (8003934 <MX_USART3_UART_Init+0x4c>)
 80038f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80038f8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80038fa:	4b0e      	ldr	r3, [pc, #56]	@ (8003934 <MX_USART3_UART_Init+0x4c>)
 80038fc:	2200      	movs	r2, #0
 80038fe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003900:	4b0c      	ldr	r3, [pc, #48]	@ (8003934 <MX_USART3_UART_Init+0x4c>)
 8003902:	2200      	movs	r2, #0
 8003904:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003906:	4b0b      	ldr	r3, [pc, #44]	@ (8003934 <MX_USART3_UART_Init+0x4c>)
 8003908:	2200      	movs	r2, #0
 800390a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800390c:	4b09      	ldr	r3, [pc, #36]	@ (8003934 <MX_USART3_UART_Init+0x4c>)
 800390e:	220c      	movs	r2, #12
 8003910:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003912:	4b08      	ldr	r3, [pc, #32]	@ (8003934 <MX_USART3_UART_Init+0x4c>)
 8003914:	2200      	movs	r2, #0
 8003916:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003918:	4b06      	ldr	r3, [pc, #24]	@ (8003934 <MX_USART3_UART_Init+0x4c>)
 800391a:	2200      	movs	r2, #0
 800391c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800391e:	4805      	ldr	r0, [pc, #20]	@ (8003934 <MX_USART3_UART_Init+0x4c>)
 8003920:	f005 fa6a 	bl	8008df8 <HAL_UART_Init>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d001      	beq.n	800392e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800392a:	f000 fb2b 	bl	8003f84 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800392e:	bf00      	nop
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	20001dd0 	.word	0x20001dd0
 8003938:	40004800 	.word	0x40004800

0800393c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8003940:	4b14      	ldr	r3, [pc, #80]	@ (8003994 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003942:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8003946:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8003948:	4b12      	ldr	r3, [pc, #72]	@ (8003994 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800394a:	2204      	movs	r2, #4
 800394c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800394e:	4b11      	ldr	r3, [pc, #68]	@ (8003994 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003950:	2202      	movs	r2, #2
 8003952:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8003954:	4b0f      	ldr	r3, [pc, #60]	@ (8003994 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003956:	2200      	movs	r2, #0
 8003958:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800395a:	4b0e      	ldr	r3, [pc, #56]	@ (8003994 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800395c:	2202      	movs	r2, #2
 800395e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8003960:	4b0c      	ldr	r3, [pc, #48]	@ (8003994 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003962:	2200      	movs	r2, #0
 8003964:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8003966:	4b0b      	ldr	r3, [pc, #44]	@ (8003994 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003968:	2200      	movs	r2, #0
 800396a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800396c:	4b09      	ldr	r3, [pc, #36]	@ (8003994 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800396e:	2200      	movs	r2, #0
 8003970:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8003972:	4b08      	ldr	r3, [pc, #32]	@ (8003994 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003974:	2200      	movs	r2, #0
 8003976:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8003978:	4b06      	ldr	r3, [pc, #24]	@ (8003994 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800397a:	2200      	movs	r2, #0
 800397c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800397e:	4805      	ldr	r0, [pc, #20]	@ (8003994 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003980:	f003 fc90 	bl	80072a4 <HAL_PCD_Init>
 8003984:	4603      	mov	r3, r0
 8003986:	2b00      	cmp	r3, #0
 8003988:	d001      	beq.n	800398e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800398a:	f000 fafb 	bl	8003f84 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800398e:	bf00      	nop
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	20001e18 	.word	0x20001e18

08003998 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b08c      	sub	sp, #48	@ 0x30
 800399c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800399e:	f107 031c 	add.w	r3, r7, #28
 80039a2:	2200      	movs	r2, #0
 80039a4:	601a      	str	r2, [r3, #0]
 80039a6:	605a      	str	r2, [r3, #4]
 80039a8:	609a      	str	r2, [r3, #8]
 80039aa:	60da      	str	r2, [r3, #12]
 80039ac:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80039ae:	2300      	movs	r3, #0
 80039b0:	61bb      	str	r3, [r7, #24]
 80039b2:	4b9a      	ldr	r3, [pc, #616]	@ (8003c1c <MX_GPIO_Init+0x284>)
 80039b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039b6:	4a99      	ldr	r2, [pc, #612]	@ (8003c1c <MX_GPIO_Init+0x284>)
 80039b8:	f043 0310 	orr.w	r3, r3, #16
 80039bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80039be:	4b97      	ldr	r3, [pc, #604]	@ (8003c1c <MX_GPIO_Init+0x284>)
 80039c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039c2:	f003 0310 	and.w	r3, r3, #16
 80039c6:	61bb      	str	r3, [r7, #24]
 80039c8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80039ca:	2300      	movs	r3, #0
 80039cc:	617b      	str	r3, [r7, #20]
 80039ce:	4b93      	ldr	r3, [pc, #588]	@ (8003c1c <MX_GPIO_Init+0x284>)
 80039d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039d2:	4a92      	ldr	r2, [pc, #584]	@ (8003c1c <MX_GPIO_Init+0x284>)
 80039d4:	f043 0304 	orr.w	r3, r3, #4
 80039d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80039da:	4b90      	ldr	r3, [pc, #576]	@ (8003c1c <MX_GPIO_Init+0x284>)
 80039dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039de:	f003 0304 	and.w	r3, r3, #4
 80039e2:	617b      	str	r3, [r7, #20]
 80039e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80039e6:	2300      	movs	r3, #0
 80039e8:	613b      	str	r3, [r7, #16]
 80039ea:	4b8c      	ldr	r3, [pc, #560]	@ (8003c1c <MX_GPIO_Init+0x284>)
 80039ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ee:	4a8b      	ldr	r2, [pc, #556]	@ (8003c1c <MX_GPIO_Init+0x284>)
 80039f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80039f6:	4b89      	ldr	r3, [pc, #548]	@ (8003c1c <MX_GPIO_Init+0x284>)
 80039f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039fe:	613b      	str	r3, [r7, #16]
 8003a00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a02:	2300      	movs	r3, #0
 8003a04:	60fb      	str	r3, [r7, #12]
 8003a06:	4b85      	ldr	r3, [pc, #532]	@ (8003c1c <MX_GPIO_Init+0x284>)
 8003a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a0a:	4a84      	ldr	r2, [pc, #528]	@ (8003c1c <MX_GPIO_Init+0x284>)
 8003a0c:	f043 0301 	orr.w	r3, r3, #1
 8003a10:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a12:	4b82      	ldr	r3, [pc, #520]	@ (8003c1c <MX_GPIO_Init+0x284>)
 8003a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a16:	f003 0301 	and.w	r3, r3, #1
 8003a1a:	60fb      	str	r3, [r7, #12]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a1e:	2300      	movs	r3, #0
 8003a20:	60bb      	str	r3, [r7, #8]
 8003a22:	4b7e      	ldr	r3, [pc, #504]	@ (8003c1c <MX_GPIO_Init+0x284>)
 8003a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a26:	4a7d      	ldr	r2, [pc, #500]	@ (8003c1c <MX_GPIO_Init+0x284>)
 8003a28:	f043 0302 	orr.w	r3, r3, #2
 8003a2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a2e:	4b7b      	ldr	r3, [pc, #492]	@ (8003c1c <MX_GPIO_Init+0x284>)
 8003a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a32:	f003 0302 	and.w	r3, r3, #2
 8003a36:	60bb      	str	r3, [r7, #8]
 8003a38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	607b      	str	r3, [r7, #4]
 8003a3e:	4b77      	ldr	r3, [pc, #476]	@ (8003c1c <MX_GPIO_Init+0x284>)
 8003a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a42:	4a76      	ldr	r2, [pc, #472]	@ (8003c1c <MX_GPIO_Init+0x284>)
 8003a44:	f043 0308 	orr.w	r3, r3, #8
 8003a48:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a4a:	4b74      	ldr	r3, [pc, #464]	@ (8003c1c <MX_GPIO_Init+0x284>)
 8003a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a4e:	f003 0308 	and.w	r3, r3, #8
 8003a52:	607b      	str	r3, [r7, #4]
 8003a54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ZERO_POS2_Pin|DIR1_Pin|DIR2_Pin|STEP1_Pin
 8003a56:	2200      	movs	r2, #0
 8003a58:	f64f 7188 	movw	r1, #65416	@ 0xff88
 8003a5c:	4870      	ldr	r0, [pc, #448]	@ (8003c20 <MX_GPIO_Init+0x288>)
 8003a5e:	f003 faa9 	bl	8006fb4 <HAL_GPIO_WritePin>
                          |DIR3_Pin|STEP2_Pin|DIR4_Pin|STEP3_Pin
                          |STEP4_Pin|DIR5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ACK_LINE0_Pin|ACK_LINE1_Pin|ACK_LINE2_Pin|STEP6_Pin, GPIO_PIN_RESET);
 8003a62:	2200      	movs	r2, #0
 8003a64:	f24e 0180 	movw	r1, #57472	@ 0xe080
 8003a68:	486e      	ldr	r0, [pc, #440]	@ (8003c24 <MX_GPIO_Init+0x28c>)
 8003a6a:	f003 faa3 	bl	8006fb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, STEP7_Pin|STEP8_Pin|DIR6_Pin|DIR7_Pin
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f24c 7113 	movw	r1, #50963	@ 0xc713
 8003a74:	486c      	ldr	r0, [pc, #432]	@ (8003c28 <MX_GPIO_Init+0x290>)
 8003a76:	f003 fa9d 	bl	8006fb4 <HAL_GPIO_WritePin>
                          |DIR8_Pin|STEP5_Pin|SPI3_NSS1_Pin|SPI3_NSS0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_STATE_Pin|SPI3_NSS2_Pin, GPIO_PIN_RESET);
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f44f 4101 	mov.w	r1, #33024	@ 0x8100
 8003a80:	486a      	ldr	r0, [pc, #424]	@ (8003c2c <MX_GPIO_Init+0x294>)
 8003a82:	f003 fa97 	bl	8006fb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(READY_GPIO_Port, READY_Pin, GPIO_PIN_RESET);
 8003a86:	2200      	movs	r2, #0
 8003a88:	2108      	movs	r1, #8
 8003a8a:	4869      	ldr	r0, [pc, #420]	@ (8003c30 <MX_GPIO_Init+0x298>)
 8003a8c:	f003 fa92 	bl	8006fb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ZERO_POS3_Pin ZERO_POS1_Pin ZERO_POS4_Pin */
  GPIO_InitStruct.Pin = ZERO_POS3_Pin|ZERO_POS1_Pin|ZERO_POS4_Pin;
 8003a90:	2345      	movs	r3, #69	@ 0x45
 8003a92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a94:	2300      	movs	r3, #0
 8003a96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003a9c:	f107 031c 	add.w	r3, r7, #28
 8003aa0:	4619      	mov	r1, r3
 8003aa2:	485f      	ldr	r0, [pc, #380]	@ (8003c20 <MX_GPIO_Init+0x288>)
 8003aa4:	f003 f8ea 	bl	8006c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : ZERO_POS2_Pin */
  GPIO_InitStruct.Pin = ZERO_POS2_Pin;
 8003aa8:	2308      	movs	r3, #8
 8003aaa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003aac:	2301      	movs	r3, #1
 8003aae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ZERO_POS2_GPIO_Port, &GPIO_InitStruct);
 8003ab8:	f107 031c 	add.w	r3, r7, #28
 8003abc:	4619      	mov	r1, r3
 8003abe:	4858      	ldr	r0, [pc, #352]	@ (8003c20 <MX_GPIO_Init+0x288>)
 8003ac0:	f003 f8dc 	bl	8006c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : EXTI_4_LS3_P_Pin EXTI_5_LS3_N_Pin EXTI_1_LS1_N_Pin */
  GPIO_InitStruct.Pin = EXTI_4_LS3_P_Pin|EXTI_5_LS3_N_Pin|EXTI_1_LS1_N_Pin;
 8003ac4:	2332      	movs	r3, #50	@ 0x32
 8003ac6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003ac8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003acc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003ad2:	f107 031c 	add.w	r3, r7, #28
 8003ad6:	4619      	mov	r1, r3
 8003ad8:	4851      	ldr	r0, [pc, #324]	@ (8003c20 <MX_GPIO_Init+0x288>)
 8003ada:	f003 f8cf 	bl	8006c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : ACK_LINE0_Pin ACK_LINE1_Pin ACK_LINE2_Pin */
  GPIO_InitStruct.Pin = ACK_LINE0_Pin|ACK_LINE1_Pin|ACK_LINE2_Pin;
 8003ade:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8003ae2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003aec:	2300      	movs	r3, #0
 8003aee:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003af0:	f107 031c 	add.w	r3, r7, #28
 8003af4:	4619      	mov	r1, r3
 8003af6:	484b      	ldr	r0, [pc, #300]	@ (8003c24 <MX_GPIO_Init+0x28c>)
 8003af8:	f003 f8c0 	bl	8006c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : EXTI_0_LS1_P_Pin EXTI_2_LS2_P_Pin EXTI_3_LS2_N_Pin EXTI_6_LS4_P_Pin
                           EXTI_8_LS5_P_Pin EXTI_9_LS5_N_Pin */
  GPIO_InitStruct.Pin = EXTI_0_LS1_P_Pin|EXTI_2_LS2_P_Pin|EXTI_3_LS2_N_Pin|EXTI_6_LS4_P_Pin
 8003afc:	f240 334d 	movw	r3, #845	@ 0x34d
 8003b00:	61fb      	str	r3, [r7, #28]
                          |EXTI_8_LS5_P_Pin|EXTI_9_LS5_N_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003b02:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003b06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b0c:	f107 031c 	add.w	r3, r7, #28
 8003b10:	4619      	mov	r1, r3
 8003b12:	4844      	ldr	r0, [pc, #272]	@ (8003c24 <MX_GPIO_Init+0x28c>)
 8003b14:	f003 f8b2 	bl	8006c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : STEP7_Pin STEP8_Pin DIR6_Pin DIR7_Pin
                           DIR8_Pin STEP5_Pin */
  GPIO_InitStruct.Pin = STEP7_Pin|STEP8_Pin|DIR6_Pin|DIR7_Pin
 8003b18:	f24c 4313 	movw	r3, #50195	@ 0xc413
 8003b1c:	61fb      	str	r3, [r7, #28]
                          |DIR8_Pin|STEP5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b22:	2300      	movs	r3, #0
 8003b24:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b26:	2303      	movs	r3, #3
 8003b28:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b2a:	f107 031c 	add.w	r3, r7, #28
 8003b2e:	4619      	mov	r1, r3
 8003b30:	483d      	ldr	r0, [pc, #244]	@ (8003c28 <MX_GPIO_Init+0x290>)
 8003b32:	f003 f8a3 	bl	8006c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR1_Pin DIR2_Pin STEP1_Pin DIR3_Pin
                           STEP2_Pin DIR4_Pin STEP3_Pin STEP4_Pin
                           DIR5_Pin */
  GPIO_InitStruct.Pin = DIR1_Pin|DIR2_Pin|STEP1_Pin|DIR3_Pin
 8003b36:	f64f 7380 	movw	r3, #65408	@ 0xff80
 8003b3a:	61fb      	str	r3, [r7, #28]
                          |STEP2_Pin|DIR4_Pin|STEP3_Pin|STEP4_Pin
                          |DIR5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b40:	2300      	movs	r3, #0
 8003b42:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b44:	2303      	movs	r3, #3
 8003b46:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003b48:	f107 031c 	add.w	r3, r7, #28
 8003b4c:	4619      	mov	r1, r3
 8003b4e:	4834      	ldr	r0, [pc, #208]	@ (8003c20 <MX_GPIO_Init+0x288>)
 8003b50:	f003 f894 	bl	8006c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : EXTI_10_LS6_P_Pin EXTI_11_LS6_N_Pin EXTI_12_LS7_P_Pin EXTI_13_LS7_N_Pin
                           EXTI_14_LS8_P_Pin EXTI_15_LS8_N_Pin EXTI_7_LS4_N_Pin */
  GPIO_InitStruct.Pin = EXTI_10_LS6_P_Pin|EXTI_11_LS6_N_Pin|EXTI_12_LS7_P_Pin|EXTI_13_LS7_N_Pin
 8003b54:	f64f 4380 	movw	r3, #64640	@ 0xfc80
 8003b58:	61fb      	str	r3, [r7, #28]
                          |EXTI_14_LS8_P_Pin|EXTI_15_LS8_N_Pin|EXTI_7_LS4_N_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003b5a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003b5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b60:	2300      	movs	r3, #0
 8003b62:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003b64:	f107 031c 	add.w	r3, r7, #28
 8003b68:	4619      	mov	r1, r3
 8003b6a:	4831      	ldr	r0, [pc, #196]	@ (8003c30 <MX_GPIO_Init+0x298>)
 8003b6c:	f003 f886 	bl	8006c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : STEP6_Pin */
  GPIO_InitStruct.Pin = STEP6_Pin;
 8003b70:	2380      	movs	r3, #128	@ 0x80
 8003b72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b74:	2301      	movs	r3, #1
 8003b76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(STEP6_GPIO_Port, &GPIO_InitStruct);
 8003b80:	f107 031c 	add.w	r3, r7, #28
 8003b84:	4619      	mov	r1, r3
 8003b86:	4827      	ldr	r0, [pc, #156]	@ (8003c24 <MX_GPIO_Init+0x28c>)
 8003b88:	f003 f878 	bl	8006c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_STATE_Pin SPI3_NSS2_Pin */
  GPIO_InitStruct.Pin = LED_STATE_Pin|SPI3_NSS2_Pin;
 8003b8c:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 8003b90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b92:	2301      	movs	r3, #1
 8003b94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b96:	2300      	movs	r3, #0
 8003b98:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b9e:	f107 031c 	add.w	r3, r7, #28
 8003ba2:	4619      	mov	r1, r3
 8003ba4:	4821      	ldr	r0, [pc, #132]	@ (8003c2c <MX_GPIO_Init+0x294>)
 8003ba6:	f003 f869 	bl	8006c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : STARTUP_OPTION1_Pin ZERO_POS8_Pin ZERO_POS7_Pin ZERO_POS6_Pin */
  GPIO_InitStruct.Pin = STARTUP_OPTION1_Pin|ZERO_POS8_Pin|ZERO_POS7_Pin|ZERO_POS6_Pin;
 8003baa:	2374      	movs	r3, #116	@ 0x74
 8003bac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003bb6:	f107 031c 	add.w	r3, r7, #28
 8003bba:	4619      	mov	r1, r3
 8003bbc:	481c      	ldr	r0, [pc, #112]	@ (8003c30 <MX_GPIO_Init+0x298>)
 8003bbe:	f003 f85d 	bl	8006c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : READY_Pin */
  GPIO_InitStruct.Pin = READY_Pin;
 8003bc2:	2308      	movs	r3, #8
 8003bc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(READY_GPIO_Port, &GPIO_InitStruct);
 8003bd2:	f107 031c 	add.w	r3, r7, #28
 8003bd6:	4619      	mov	r1, r3
 8003bd8:	4815      	ldr	r0, [pc, #84]	@ (8003c30 <MX_GPIO_Init+0x298>)
 8003bda:	f003 f84f 	bl	8006c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : ZERO_POS5_Pin */
  GPIO_InitStruct.Pin = ZERO_POS5_Pin;
 8003bde:	2320      	movs	r3, #32
 8003be0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003be2:	2300      	movs	r3, #0
 8003be4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003be6:	2300      	movs	r3, #0
 8003be8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ZERO_POS5_GPIO_Port, &GPIO_InitStruct);
 8003bea:	f107 031c 	add.w	r3, r7, #28
 8003bee:	4619      	mov	r1, r3
 8003bf0:	480d      	ldr	r0, [pc, #52]	@ (8003c28 <MX_GPIO_Init+0x290>)
 8003bf2:	f003 f843 	bl	8006c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI3_NSS1_Pin SPI3_NSS0_Pin */
  GPIO_InitStruct.Pin = SPI3_NSS1_Pin|SPI3_NSS0_Pin;
 8003bf6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003bfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c00:	2300      	movs	r3, #0
 8003c02:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c04:	2300      	movs	r3, #0
 8003c06:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c08:	f107 031c 	add.w	r3, r7, #28
 8003c0c:	4619      	mov	r1, r3
 8003c0e:	4806      	ldr	r0, [pc, #24]	@ (8003c28 <MX_GPIO_Init+0x290>)
 8003c10:	f003 f834 	bl	8006c7c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8003c14:	bf00      	nop
 8003c16:	3730      	adds	r7, #48	@ 0x30
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	40023800 	.word	0x40023800
 8003c20:	40021000 	.word	0x40021000
 8003c24:	40020800 	.word	0x40020800
 8003c28:	40020400 	.word	0x40020400
 8003c2c:	40020000 	.word	0x40020000
 8003c30:	40020c00 	.word	0x40020c00

08003c34 <startTimerTIM2>:

/** Запуск таймера для отсчета времени в микросекундах
 * 	Используется таймер TIM2
 */
void startTimerTIM2(void)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8003c38:	4802      	ldr	r0, [pc, #8]	@ (8003c44 <startTimerTIM2+0x10>)
 8003c3a:	f004 f9b3 	bl	8007fa4 <HAL_TIM_Base_Start_IT>
}
 8003c3e:	bf00      	nop
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	20001cf8 	.word	0x20001cf8

08003c48 <stopTimerTIM2>:

/** Остановка таймера для отсчета времени в микросекундах
 * 	Используется таймер TIM2
 */
void stopTimerTIM2(void)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim2);
 8003c4c:	4802      	ldr	r0, [pc, #8]	@ (8003c58 <stopTimerTIM2+0x10>)
 8003c4e:	f004 fa19 	bl	8008084 <HAL_TIM_Base_Stop_IT>
}
 8003c52:	bf00      	nop
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	20001cf8 	.word	0x20001cf8

08003c5c <resetTimerTIM2>:

/** Функция сброса счетчика таймера в 0
 * 	Используется таймер TIM2
 */
void resetTimerTIM2(void)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	af00      	add	r7, sp, #0
	TIM2->CNT = 0;
 8003c60:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003c64:	2200      	movs	r2, #0
 8003c66:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8003c68:	bf00      	nop
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr

08003c72 <getMicrosecondsTIM2>:
 * Используется таймер TIM2
 * Частота работы таймера 1МГц
 * 1 тик таймера = 1 мкс
 */
uint32_t getMicrosecondsTIM2(void)
{
 8003c72:	b480      	push	{r7}
 8003c74:	af00      	add	r7, sp, #0
	return TIM2->CNT;
 8003c76:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr
	...

08003c88 <udpReceiveHandler>:

/**
 *
 */
void udpReceiveHandler(void)
{
 8003c88:	b590      	push	{r4, r7, lr}
 8003c8a:	f5ad 7d43 	sub.w	sp, sp, #780	@ 0x30c
 8003c8e:	af00      	add	r7, sp, #0
	if(rxBuf[0] == '5' && rxBuf[1] == '5')
 8003c90:	4baa      	ldr	r3, [pc, #680]	@ (8003f3c <udpReceiveHandler+0x2b4>)
 8003c92:	781b      	ldrb	r3, [r3, #0]
 8003c94:	2b35      	cmp	r3, #53	@ 0x35
 8003c96:	d10c      	bne.n	8003cb2 <udpReceiveHandler+0x2a>
 8003c98:	4ba8      	ldr	r3, [pc, #672]	@ (8003f3c <udpReceiveHandler+0x2b4>)
 8003c9a:	785b      	ldrb	r3, [r3, #1]
 8003c9c:	2b35      	cmp	r3, #53	@ 0x35
 8003c9e:	d108      	bne.n	8003cb2 <udpReceiveHandler+0x2a>
	{
		RUN = true;
 8003ca0:	4ba7      	ldr	r3, [pc, #668]	@ (8003f40 <udpReceiveHandler+0x2b8>)
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	701a      	strb	r2, [r3, #0]
		memset(rxBuf, 0, 128);
 8003ca6:	2280      	movs	r2, #128	@ 0x80
 8003ca8:	2100      	movs	r1, #0
 8003caa:	48a4      	ldr	r0, [pc, #656]	@ (8003f3c <udpReceiveHandler+0x2b4>)
 8003cac:	f012 f867 	bl	8015d7e <memset>
		return;
 8003cb0:	e140      	b.n	8003f34 <udpReceiveHandler+0x2ac>
	}

	if(rxBuf[0] == '1' && rxBuf[1] == '7')
 8003cb2:	4ba2      	ldr	r3, [pc, #648]	@ (8003f3c <udpReceiveHandler+0x2b4>)
 8003cb4:	781b      	ldrb	r3, [r3, #0]
 8003cb6:	2b31      	cmp	r3, #49	@ 0x31
 8003cb8:	d115      	bne.n	8003ce6 <udpReceiveHandler+0x5e>
 8003cba:	4ba0      	ldr	r3, [pc, #640]	@ (8003f3c <udpReceiveHandler+0x2b4>)
 8003cbc:	785b      	ldrb	r3, [r3, #1]
 8003cbe:	2b37      	cmp	r3, #55	@ 0x37
 8003cc0:	d111      	bne.n	8003ce6 <udpReceiveHandler+0x5e>
	{
		fifoClear(&fifoBufSteps);
 8003cc2:	48a0      	ldr	r0, [pc, #640]	@ (8003f44 <udpReceiveHandler+0x2bc>)
 8003cc4:	f7fd fea0 	bl	8001a08 <fifoClear>

		/* Переинициализация FIFO буфера G - команд */
		fifoGcodeBuf.tail = 0;
 8003cc8:	4b9f      	ldr	r3, [pc, #636]	@ (8003f48 <udpReceiveHandler+0x2c0>)
 8003cca:	2200      	movs	r2, #0
 8003ccc:	605a      	str	r2, [r3, #4]
		fifoGcodeBuf.head = 243;
 8003cce:	4b9e      	ldr	r3, [pc, #632]	@ (8003f48 <udpReceiveHandler+0x2c0>)
 8003cd0:	22f3      	movs	r2, #243	@ 0xf3
 8003cd2:	609a      	str	r2, [r3, #8]

		ghandler._workState = HANDLER_GCODE_READY;
 8003cd4:	4b9d      	ldr	r3, [pc, #628]	@ (8003f4c <udpReceiveHandler+0x2c4>)
 8003cd6:	2202      	movs	r2, #2
 8003cd8:	711a      	strb	r2, [r3, #4]

		memset(rxBuf, 0, 128);
 8003cda:	2280      	movs	r2, #128	@ 0x80
 8003cdc:	2100      	movs	r1, #0
 8003cde:	4897      	ldr	r0, [pc, #604]	@ (8003f3c <udpReceiveHandler+0x2b4>)
 8003ce0:	f012 f84d 	bl	8015d7e <memset>
		return;
 8003ce4:	e126      	b.n	8003f34 <udpReceiveHandler+0x2ac>
	}

	if(rxBuf[0] == 'S')
 8003ce6:	4b95      	ldr	r3, [pc, #596]	@ (8003f3c <udpReceiveHandler+0x2b4>)
 8003ce8:	781b      	ldrb	r3, [r3, #0]
 8003cea:	2b53      	cmp	r3, #83	@ 0x53
 8003cec:	f040 80e9 	bne.w	8003ec2 <udpReceiveHandler+0x23a>
	{
		/* MOVE_MODE */
		if(rxBuf[1] == 'R' && rxBuf[2] == 'M') // Задать тип управление драйвером
 8003cf0:	4b92      	ldr	r3, [pc, #584]	@ (8003f3c <udpReceiveHandler+0x2b4>)
 8003cf2:	785b      	ldrb	r3, [r3, #1]
 8003cf4:	2b52      	cmp	r3, #82	@ 0x52
 8003cf6:	d134      	bne.n	8003d62 <udpReceiveHandler+0xda>
 8003cf8:	4b90      	ldr	r3, [pc, #576]	@ (8003f3c <udpReceiveHandler+0x2b4>)
 8003cfa:	789b      	ldrb	r3, [r3, #2]
 8003cfc:	2b4d      	cmp	r3, #77	@ 0x4d
 8003cfe:	d130      	bne.n	8003d62 <udpReceiveHandler+0xda>
		{
			char data[256];

			if(rxBuf[3] == 'V')
 8003d00:	4b8e      	ldr	r3, [pc, #568]	@ (8003f3c <udpReceiveHandler+0x2b4>)
 8003d02:	78db      	ldrb	r3, [r3, #3]
 8003d04:	2b56      	cmp	r3, #86	@ 0x56
 8003d06:	d10b      	bne.n	8003d20 <udpReceiveHandler+0x98>
			{
				sprintf(data, "%ld - STM32: Movement mode = VELOCITY_MODE;\n", counter);
 8003d08:	4b91      	ldr	r3, [pc, #580]	@ (8003f50 <udpReceiveHandler+0x2c8>)
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	463b      	mov	r3, r7
 8003d0e:	4991      	ldr	r1, [pc, #580]	@ (8003f54 <udpReceiveHandler+0x2cc>)
 8003d10:	4618      	mov	r0, r3
 8003d12:	f011 ffa5 	bl	8015c60 <siprintf>
				setRunMode(&driver1, VELOCITY_MODE);
 8003d16:	2101      	movs	r1, #1
 8003d18:	488f      	ldr	r0, [pc, #572]	@ (8003f58 <udpReceiveHandler+0x2d0>)
 8003d1a:	f7fd fafd 	bl	8001318 <setRunMode>
 8003d1e:	e016      	b.n	8003d4e <udpReceiveHandler+0xc6>
			}
			else if(rxBuf[3] == 'P')
 8003d20:	4b86      	ldr	r3, [pc, #536]	@ (8003f3c <udpReceiveHandler+0x2b4>)
 8003d22:	78db      	ldrb	r3, [r3, #3]
 8003d24:	2b50      	cmp	r3, #80	@ 0x50
 8003d26:	d10b      	bne.n	8003d40 <udpReceiveHandler+0xb8>
			{
				sprintf(data, "%ld - STM32: Movement mode = POSITION_MODE;\n", counter);
 8003d28:	4b89      	ldr	r3, [pc, #548]	@ (8003f50 <udpReceiveHandler+0x2c8>)
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	463b      	mov	r3, r7
 8003d2e:	498b      	ldr	r1, [pc, #556]	@ (8003f5c <udpReceiveHandler+0x2d4>)
 8003d30:	4618      	mov	r0, r3
 8003d32:	f011 ff95 	bl	8015c60 <siprintf>
				setRunMode(&driver1, POSITION_MODE);
 8003d36:	2100      	movs	r1, #0
 8003d38:	4887      	ldr	r0, [pc, #540]	@ (8003f58 <udpReceiveHandler+0x2d0>)
 8003d3a:	f7fd faed 	bl	8001318 <setRunMode>
 8003d3e:	e006      	b.n	8003d4e <udpReceiveHandler+0xc6>
			}
			else
			{
				sprintf(data, "%ld - STM32: Error changing movement mode;\n", counter);
 8003d40:	4b83      	ldr	r3, [pc, #524]	@ (8003f50 <udpReceiveHandler+0x2c8>)
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	463b      	mov	r3, r7
 8003d46:	4986      	ldr	r1, [pc, #536]	@ (8003f60 <udpReceiveHandler+0x2d8>)
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f011 ff89 	bl	8015c60 <siprintf>
			}

			udpClientSend(data);
 8003d4e:	463b      	mov	r3, r7
 8003d50:	4618      	mov	r0, r3
 8003d52:	f000 f97f 	bl	8004054 <udpClientSend>

			memset(rxBuf, 0, 128);
 8003d56:	2280      	movs	r2, #128	@ 0x80
 8003d58:	2100      	movs	r1, #0
 8003d5a:	4878      	ldr	r0, [pc, #480]	@ (8003f3c <udpReceiveHandler+0x2b4>)
 8003d5c:	f012 f80f 	bl	8015d7e <memset>
 8003d60:	e0e8      	b.n	8003f34 <udpReceiveHandler+0x2ac>
			return;
		}

		/* ACCELERATION */
		if(rxBuf[1] == 'A') // Задать ускорение
 8003d62:	4b76      	ldr	r3, [pc, #472]	@ (8003f3c <udpReceiveHandler+0x2b4>)
 8003d64:	785b      	ldrb	r3, [r3, #1]
 8003d66:	2b41      	cmp	r3, #65	@ 0x41
 8003d68:	d124      	bne.n	8003db4 <udpReceiveHandler+0x12c>
		{
			uint16_t acceleration = strtol(&rxBuf[2], NULL, 10);
 8003d6a:	220a      	movs	r2, #10
 8003d6c:	2100      	movs	r1, #0
 8003d6e:	487d      	ldr	r0, [pc, #500]	@ (8003f64 <udpReceiveHandler+0x2dc>)
 8003d70:	f011 fe98 	bl	8015aa4 <strtol>
 8003d74:	4603      	mov	r3, r0
 8003d76:	f8a7 3300 	strh.w	r3, [r7, #768]	@ 0x300
			setAccelerationDeg(&driver1, acceleration);
 8003d7a:	f8b7 3300 	ldrh.w	r3, [r7, #768]	@ 0x300
 8003d7e:	ee07 3a90 	vmov	s15, r3
 8003d82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d86:	eeb0 0a67 	vmov.f32	s0, s15
 8003d8a:	4873      	ldr	r0, [pc, #460]	@ (8003f58 <udpReceiveHandler+0x2d0>)
 8003d8c:	f7fd fcdc 	bl	8001748 <setAccelerationDeg>

			char data[256];
			sprintf(data, "%ld - STM32: Acceleration (deg/sec^2) = %d;\n", counter, acceleration);
 8003d90:	4b6f      	ldr	r3, [pc, #444]	@ (8003f50 <udpReceiveHandler+0x2c8>)
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	f8b7 3300 	ldrh.w	r3, [r7, #768]	@ 0x300
 8003d98:	4638      	mov	r0, r7
 8003d9a:	4973      	ldr	r1, [pc, #460]	@ (8003f68 <udpReceiveHandler+0x2e0>)
 8003d9c:	f011 ff60 	bl	8015c60 <siprintf>
			udpClientSend(data);
 8003da0:	463b      	mov	r3, r7
 8003da2:	4618      	mov	r0, r3
 8003da4:	f000 f956 	bl	8004054 <udpClientSend>

			memset(rxBuf, 0, 128);
 8003da8:	2280      	movs	r2, #128	@ 0x80
 8003daa:	2100      	movs	r1, #0
 8003dac:	4863      	ldr	r0, [pc, #396]	@ (8003f3c <udpReceiveHandler+0x2b4>)
 8003dae:	f011 ffe6 	bl	8015d7e <memset>
 8003db2:	e0bf      	b.n	8003f34 <udpReceiveHandler+0x2ac>
			return;
		}

		/* VELOCITY_MODE */
		if(rxBuf[1] == 'T' && rxBuf[2] == 'S') // Задать целевую скорость
 8003db4:	4b61      	ldr	r3, [pc, #388]	@ (8003f3c <udpReceiveHandler+0x2b4>)
 8003db6:	785b      	ldrb	r3, [r3, #1]
 8003db8:	2b54      	cmp	r3, #84	@ 0x54
 8003dba:	d128      	bne.n	8003e0e <udpReceiveHandler+0x186>
 8003dbc:	4b5f      	ldr	r3, [pc, #380]	@ (8003f3c <udpReceiveHandler+0x2b4>)
 8003dbe:	789b      	ldrb	r3, [r3, #2]
 8003dc0:	2b53      	cmp	r3, #83	@ 0x53
 8003dc2:	d124      	bne.n	8003e0e <udpReceiveHandler+0x186>
		{
			int16_t speed = strtol(&rxBuf[3], NULL, 10);
 8003dc4:	220a      	movs	r2, #10
 8003dc6:	2100      	movs	r1, #0
 8003dc8:	4868      	ldr	r0, [pc, #416]	@ (8003f6c <udpReceiveHandler+0x2e4>)
 8003dca:	f011 fe6b 	bl	8015aa4 <strtol>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	f8a7 3306 	strh.w	r3, [r7, #774]	@ 0x306
			setTargetSpeedDeg(&driver1, speed);
 8003dd4:	f9b7 3306 	ldrsh.w	r3, [r7, #774]	@ 0x306
 8003dd8:	ee07 3a90 	vmov	s15, r3
 8003ddc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003de0:	eeb0 0a67 	vmov.f32	s0, s15
 8003de4:	485c      	ldr	r0, [pc, #368]	@ (8003f58 <udpReceiveHandler+0x2d0>)
 8003de6:	f7fd fdb9 	bl	800195c <setTargetSpeedDeg>

			char data[256];
			sprintf(data, "%ld - STM32: Target velocity (deg/sec) = %d;\n", counter, speed);
 8003dea:	4b59      	ldr	r3, [pc, #356]	@ (8003f50 <udpReceiveHandler+0x2c8>)
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	f9b7 3306 	ldrsh.w	r3, [r7, #774]	@ 0x306
 8003df2:	4638      	mov	r0, r7
 8003df4:	495e      	ldr	r1, [pc, #376]	@ (8003f70 <udpReceiveHandler+0x2e8>)
 8003df6:	f011 ff33 	bl	8015c60 <siprintf>
			udpClientSend(data);
 8003dfa:	463b      	mov	r3, r7
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f000 f929 	bl	8004054 <udpClientSend>

			memset(rxBuf, 0, 128);
 8003e02:	2280      	movs	r2, #128	@ 0x80
 8003e04:	2100      	movs	r1, #0
 8003e06:	484d      	ldr	r0, [pc, #308]	@ (8003f3c <udpReceiveHandler+0x2b4>)
 8003e08:	f011 ffb9 	bl	8015d7e <memset>
 8003e0c:	e092      	b.n	8003f34 <udpReceiveHandler+0x2ac>
			return;
		}

		/* POSITION_MODE */
		if(rxBuf[1] == 'M' && rxBuf[2] == 'S') // Задать максимальную скорость
 8003e0e:	4b4b      	ldr	r3, [pc, #300]	@ (8003f3c <udpReceiveHandler+0x2b4>)
 8003e10:	785b      	ldrb	r3, [r3, #1]
 8003e12:	2b4d      	cmp	r3, #77	@ 0x4d
 8003e14:	d128      	bne.n	8003e68 <udpReceiveHandler+0x1e0>
 8003e16:	4b49      	ldr	r3, [pc, #292]	@ (8003f3c <udpReceiveHandler+0x2b4>)
 8003e18:	789b      	ldrb	r3, [r3, #2]
 8003e1a:	2b53      	cmp	r3, #83	@ 0x53
 8003e1c:	d124      	bne.n	8003e68 <udpReceiveHandler+0x1e0>
		{
			uint16_t speed = strtol(&rxBuf[3], NULL, 10);
 8003e1e:	220a      	movs	r2, #10
 8003e20:	2100      	movs	r1, #0
 8003e22:	4852      	ldr	r0, [pc, #328]	@ (8003f6c <udpReceiveHandler+0x2e4>)
 8003e24:	f011 fe3e 	bl	8015aa4 <strtol>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	f8a7 3304 	strh.w	r3, [r7, #772]	@ 0x304
			setMaxSpeedDeg(&driver1, speed);
 8003e2e:	f8b7 3304 	ldrh.w	r3, [r7, #772]	@ 0x304
 8003e32:	ee07 3a90 	vmov	s15, r3
 8003e36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e3a:	eeb0 0a67 	vmov.f32	s0, s15
 8003e3e:	4846      	ldr	r0, [pc, #280]	@ (8003f58 <udpReceiveHandler+0x2d0>)
 8003e40:	f7fd fc1a 	bl	8001678 <setMaxSpeedDeg>

			char data[256];
			sprintf(data, "%ld - STM32: Max speed (deg/sec) = %d;\n", counter, speed);
 8003e44:	4b42      	ldr	r3, [pc, #264]	@ (8003f50 <udpReceiveHandler+0x2c8>)
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	f8b7 3304 	ldrh.w	r3, [r7, #772]	@ 0x304
 8003e4c:	4638      	mov	r0, r7
 8003e4e:	4949      	ldr	r1, [pc, #292]	@ (8003f74 <udpReceiveHandler+0x2ec>)
 8003e50:	f011 ff06 	bl	8015c60 <siprintf>
			udpClientSend(data);
 8003e54:	463b      	mov	r3, r7
 8003e56:	4618      	mov	r0, r3
 8003e58:	f000 f8fc 	bl	8004054 <udpClientSend>

			memset(rxBuf, 0, 128);
 8003e5c:	2280      	movs	r2, #128	@ 0x80
 8003e5e:	2100      	movs	r1, #0
 8003e60:	4836      	ldr	r0, [pc, #216]	@ (8003f3c <udpReceiveHandler+0x2b4>)
 8003e62:	f011 ff8c 	bl	8015d7e <memset>
 8003e66:	e065      	b.n	8003f34 <udpReceiveHandler+0x2ac>
			return;
		}

		if(rxBuf[1] == 'T' && rxBuf[2] == 'P') // Задать целевую позицию
 8003e68:	4b34      	ldr	r3, [pc, #208]	@ (8003f3c <udpReceiveHandler+0x2b4>)
 8003e6a:	785b      	ldrb	r3, [r3, #1]
 8003e6c:	2b54      	cmp	r3, #84	@ 0x54
 8003e6e:	d128      	bne.n	8003ec2 <udpReceiveHandler+0x23a>
 8003e70:	4b32      	ldr	r3, [pc, #200]	@ (8003f3c <udpReceiveHandler+0x2b4>)
 8003e72:	789b      	ldrb	r3, [r3, #2]
 8003e74:	2b50      	cmp	r3, #80	@ 0x50
 8003e76:	d124      	bne.n	8003ec2 <udpReceiveHandler+0x23a>
		{
			int16_t target_pos = strtol(&rxBuf[3], NULL, 10);
 8003e78:	220a      	movs	r2, #10
 8003e7a:	2100      	movs	r1, #0
 8003e7c:	483b      	ldr	r0, [pc, #236]	@ (8003f6c <udpReceiveHandler+0x2e4>)
 8003e7e:	f011 fe11 	bl	8015aa4 <strtol>
 8003e82:	4603      	mov	r3, r0
 8003e84:	f8a7 3302 	strh.w	r3, [r7, #770]	@ 0x302
			setTargetPosDeg(&driver1, target_pos);
 8003e88:	f9b7 3302 	ldrsh.w	r3, [r7, #770]	@ 0x302
 8003e8c:	ee07 3a90 	vmov	s15, r3
 8003e90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e94:	eeb0 0a67 	vmov.f32	s0, s15
 8003e98:	482f      	ldr	r0, [pc, #188]	@ (8003f58 <udpReceiveHandler+0x2d0>)
 8003e9a:	f7fd fba1 	bl	80015e0 <setTargetPosDeg>

			char data[512];
			sprintf(data, "%ld - STM32: Target position (deg) = %d;\n", counter, target_pos);
 8003e9e:	4b2c      	ldr	r3, [pc, #176]	@ (8003f50 <udpReceiveHandler+0x2c8>)
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	f9b7 3302 	ldrsh.w	r3, [r7, #770]	@ 0x302
 8003ea6:	4638      	mov	r0, r7
 8003ea8:	4933      	ldr	r1, [pc, #204]	@ (8003f78 <udpReceiveHandler+0x2f0>)
 8003eaa:	f011 fed9 	bl	8015c60 <siprintf>
			udpClientSend(data);
 8003eae:	463b      	mov	r3, r7
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f000 f8cf 	bl	8004054 <udpClientSend>

			memset(rxBuf, 0, 128);
 8003eb6:	2280      	movs	r2, #128	@ 0x80
 8003eb8:	2100      	movs	r1, #0
 8003eba:	4820      	ldr	r0, [pc, #128]	@ (8003f3c <udpReceiveHandler+0x2b4>)
 8003ebc:	f011 ff5f 	bl	8015d7e <memset>
 8003ec0:	e038      	b.n	8003f34 <udpReceiveHandler+0x2ac>
			return;
		}

	}

	if(rxBuf[0] == 'G')
 8003ec2:	4b1e      	ldr	r3, [pc, #120]	@ (8003f3c <udpReceiveHandler+0x2b4>)
 8003ec4:	781b      	ldrb	r3, [r3, #0]
 8003ec6:	2b47      	cmp	r3, #71	@ 0x47
 8003ec8:	d121      	bne.n	8003f0e <udpReceiveHandler+0x286>
	{
		if(rxBuf[1] == 'C' && rxBuf[2] == 'P') // Получить позицию
 8003eca:	4b1c      	ldr	r3, [pc, #112]	@ (8003f3c <udpReceiveHandler+0x2b4>)
 8003ecc:	785b      	ldrb	r3, [r3, #1]
 8003ece:	2b43      	cmp	r3, #67	@ 0x43
 8003ed0:	d11d      	bne.n	8003f0e <udpReceiveHandler+0x286>
 8003ed2:	4b1a      	ldr	r3, [pc, #104]	@ (8003f3c <udpReceiveHandler+0x2b4>)
 8003ed4:	789b      	ldrb	r3, [r3, #2]
 8003ed6:	2b50      	cmp	r3, #80	@ 0x50
 8003ed8:	d119      	bne.n	8003f0e <udpReceiveHandler+0x286>
		{
			char data[256];
			sprintf(data, "%ld - STM32: Current position = %ld;\n", counter, (int32_t)getCurrentPosDeg(&driver1));
 8003eda:	4b1d      	ldr	r3, [pc, #116]	@ (8003f50 <udpReceiveHandler+0x2c8>)
 8003edc:	681c      	ldr	r4, [r3, #0]
 8003ede:	481e      	ldr	r0, [pc, #120]	@ (8003f58 <udpReceiveHandler+0x2d0>)
 8003ee0:	f7fd fc4d 	bl	800177e <getCurrentPosDeg>
 8003ee4:	eef0 7a40 	vmov.f32	s15, s0
 8003ee8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003eec:	4638      	mov	r0, r7
 8003eee:	ee17 3a90 	vmov	r3, s15
 8003ef2:	4622      	mov	r2, r4
 8003ef4:	4921      	ldr	r1, [pc, #132]	@ (8003f7c <udpReceiveHandler+0x2f4>)
 8003ef6:	f011 feb3 	bl	8015c60 <siprintf>
			udpClientSend(data);
 8003efa:	463b      	mov	r3, r7
 8003efc:	4618      	mov	r0, r3
 8003efe:	f000 f8a9 	bl	8004054 <udpClientSend>

			memset(rxBuf, 0, 128);
 8003f02:	2280      	movs	r2, #128	@ 0x80
 8003f04:	2100      	movs	r1, #0
 8003f06:	480d      	ldr	r0, [pc, #52]	@ (8003f3c <udpReceiveHandler+0x2b4>)
 8003f08:	f011 ff39 	bl	8015d7e <memset>
 8003f0c:	e012      	b.n	8003f34 <udpReceiveHandler+0x2ac>
			return;
		}
	}

	char data[256];
	sprintf(data, "%ld - STM32: Echo - %s\n", counter, rxBuf);
 8003f0e:	4b10      	ldr	r3, [pc, #64]	@ (8003f50 <udpReceiveHandler+0x2c8>)
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	f507 7000 	add.w	r0, r7, #512	@ 0x200
 8003f16:	4b09      	ldr	r3, [pc, #36]	@ (8003f3c <udpReceiveHandler+0x2b4>)
 8003f18:	4919      	ldr	r1, [pc, #100]	@ (8003f80 <udpReceiveHandler+0x2f8>)
 8003f1a:	f011 fea1 	bl	8015c60 <siprintf>
	udpClientSend(data);
 8003f1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f22:	4618      	mov	r0, r3
 8003f24:	f000 f896 	bl	8004054 <udpClientSend>

	memset(rxBuf, 0, 128);
 8003f28:	2280      	movs	r2, #128	@ 0x80
 8003f2a:	2100      	movs	r1, #0
 8003f2c:	4803      	ldr	r0, [pc, #12]	@ (8003f3c <udpReceiveHandler+0x2b4>)
 8003f2e:	f011 ff26 	bl	8015d7e <memset>
	return;
 8003f32:	bf00      	nop
}
 8003f34:	f507 7743 	add.w	r7, r7, #780	@ 0x30c
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd90      	pop	{r4, r7, pc}
 8003f3c:	200024b4 	.word	0x200024b4
 8003f40:	200024ac 	.word	0x200024ac
 8003f44:	20001b70 	.word	0x20001b70
 8003f48:	20000740 	.word	0x20000740
 8003f4c:	200024a4 	.word	0x200024a4
 8003f50:	20002534 	.word	0x20002534
 8003f54:	0801dfac 	.word	0x0801dfac
 8003f58:	2000233c 	.word	0x2000233c
 8003f5c:	0801dfdc 	.word	0x0801dfdc
 8003f60:	0801e00c 	.word	0x0801e00c
 8003f64:	200024b6 	.word	0x200024b6
 8003f68:	0801e038 	.word	0x0801e038
 8003f6c:	200024b7 	.word	0x200024b7
 8003f70:	0801e068 	.word	0x0801e068
 8003f74:	0801e098 	.word	0x0801e098
 8003f78:	0801e0c0 	.word	0x0801e0c0
 8003f7c:	0801e0ec 	.word	0x0801e0ec
 8003f80:	0801e114 	.word	0x0801e114

08003f84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003f84:	b480      	push	{r7}
 8003f86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003f88:	b672      	cpsid	i
}
 8003f8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003f8c:	bf00      	nop
 8003f8e:	e7fd      	b.n	8003f8c <Error_Handler+0x8>

08003f90 <udpSocketInit>:
int32_t netBuf[FIFO_NET_SIZE];

/** Функция инициализации UDP сетевого интерфейса
 */
void udpSocketInit(void)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b084      	sub	sp, #16
 8003f94:	af00      	add	r7, sp, #0
	/* Переменная ошибок работы UDP интерфейса */
	err_t err;

	/* Новый UDP управляющий блок */
	upcb = udp_new();
 8003f96:	f00e fbad 	bl	80126f4 <udp_new>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	4a16      	ldr	r2, [pc, #88]	@ (8003ff8 <udpSocketInit+0x68>)
 8003f9e:	6013      	str	r3, [r2, #0]

	/* Связать IP адрес и порт */
	ip_addr_t myIPaddr;

	/* IP адрес устройства */
	IP_ADDR4(&myIPaddr, 192, 168, 1, 156);
 8003fa0:	4b16      	ldr	r3, [pc, #88]	@ (8003ffc <udpSocketInit+0x6c>)
 8003fa2:	60bb      	str	r3, [r7, #8]
	udp_bind(upcb, &myIPaddr, 1556);
 8003fa4:	4b14      	ldr	r3, [pc, #80]	@ (8003ff8 <udpSocketInit+0x68>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f107 0108 	add.w	r1, r7, #8
 8003fac:	f240 6214 	movw	r2, #1556	@ 0x614
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f00e fa47 	bl	8012444 <udp_bind>

	/* Конфигурация IP адреса и порта назначения - ПК */
	ip_addr_t DestIPaddr;
	IP_ADDR4(&DestIPaddr, 192, 168, 1, 2);
 8003fb6:	4b12      	ldr	r3, [pc, #72]	@ (8004000 <udpSocketInit+0x70>)
 8003fb8:	607b      	str	r3, [r7, #4]
	err = udp_connect(upcb, &DestIPaddr, 1555);
 8003fba:	4b0f      	ldr	r3, [pc, #60]	@ (8003ff8 <udpSocketInit+0x68>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	1d39      	adds	r1, r7, #4
 8003fc0:	f240 6213 	movw	r2, #1555	@ 0x613
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f00e fac5 	bl	8012554 <udp_connect>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	73fb      	strb	r3, [r7, #15]

	if (err == ERR_OK)
 8003fce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d106      	bne.n	8003fe4 <udpSocketInit+0x54>
	{
		/* Передача указателя на функцию обработчика входящих пакетов в структуру UDP интерфейса */
		udp_recv(upcb, udpReceiveCallback, NULL);
 8003fd6:	4b08      	ldr	r3, [pc, #32]	@ (8003ff8 <udpSocketInit+0x68>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	4909      	ldr	r1, [pc, #36]	@ (8004004 <udpSocketInit+0x74>)
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f00e fb26 	bl	8012630 <udp_recv>
	}

	/* Инициализация буфера сетевого интерфейса с размеров 64 * 2 байта = 128 байт*/
	fifoInit(&fifoNetBuf, netBuf, FIFO_NET_SIZE);
 8003fe4:	2240      	movs	r2, #64	@ 0x40
 8003fe6:	4908      	ldr	r1, [pc, #32]	@ (8004008 <udpSocketInit+0x78>)
 8003fe8:	4808      	ldr	r0, [pc, #32]	@ (800400c <udpSocketInit+0x7c>)
 8003fea:	f7fd fcf3 	bl	80019d4 <fifoInit>
}
 8003fee:	bf00      	nop
 8003ff0:	3710      	adds	r7, #16
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	200024b0 	.word	0x200024b0
 8003ffc:	9c01a8c0 	.word	0x9c01a8c0
 8004000:	0201a8c0 	.word	0x0201a8c0
 8004004:	08004011 	.word	0x08004011
 8004008:	20002548 	.word	0x20002548
 800400c:	20002538 	.word	0x20002538

08004010 <udpReceiveCallback>:

/** Функция обработки принятых пакетов UDP
 */
void udpReceiveCallback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b084      	sub	sp, #16
 8004014:	af00      	add	r7, sp, #0
 8004016:	60f8      	str	r0, [r7, #12]
 8004018:	60b9      	str	r1, [r7, #8]
 800401a:	607a      	str	r2, [r7, #4]
 800401c:	603b      	str	r3, [r7, #0]
	strncpy(rxBuf, (char *)p->payload, p->len);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6859      	ldr	r1, [r3, #4]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	895b      	ldrh	r3, [r3, #10]
 8004026:	461a      	mov	r2, r3
 8004028:	4808      	ldr	r0, [pc, #32]	@ (800404c <udpReceiveCallback+0x3c>)
 800402a:	f011 fecf 	bl	8015dcc <strncpy>
	counter ++;
 800402e:	4b08      	ldr	r3, [pc, #32]	@ (8004050 <udpReceiveCallback+0x40>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	3301      	adds	r3, #1
 8004034:	4a06      	ldr	r2, [pc, #24]	@ (8004050 <udpReceiveCallback+0x40>)
 8004036:	6013      	str	r3, [r2, #0]
	pbuf_free(p);
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f007 ffbd 	bl	800bfb8 <pbuf_free>

	/* Вызов обработчик принятных сообщений */
	udpReceiveHandler();
 800403e:	f7ff fe23 	bl	8003c88 <udpReceiveHandler>
}
 8004042:	bf00      	nop
 8004044:	3710      	adds	r7, #16
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	200024b4 	.word	0x200024b4
 8004050:	20002534 	.word	0x20002534

08004054 <udpClientSend>:

/** Функция отправки сообщения по UDP
 */
void udpClientSend(char *buf)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b0c4      	sub	sp, #272	@ 0x110
 8004058:	af00      	add	r7, sp, #0
 800405a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800405e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004062:	6018      	str	r0, [r3, #0]
	struct pbuf *txBuf;
	char data[256];

	int len = sprintf(data, "%s\n", (char *)buf);
 8004064:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004068:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800406c:	f107 0008 	add.w	r0, r7, #8
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	4917      	ldr	r1, [pc, #92]	@ (80040d0 <udpClientSend+0x7c>)
 8004074:	f011 fdf4 	bl	8015c60 <siprintf>
 8004078:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c

	/* Выделить память под данные в буфере */
	txBuf = pbuf_alloc(PBUF_TRANSPORT, len, PBUF_RAM);
 800407c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004080:	b29b      	uxth	r3, r3
 8004082:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8004086:	4619      	mov	r1, r3
 8004088:	2036      	movs	r0, #54	@ 0x36
 800408a:	f007 fcb1 	bl	800b9f0 <pbuf_alloc>
 800408e:	f8c7 0108 	str.w	r0, [r7, #264]	@ 0x108

	if (txBuf != NULL)
 8004092:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8004096:	2b00      	cmp	r3, #0
 8004098:	d014      	beq.n	80040c4 <udpClientSend+0x70>
	{
		pbuf_take(txBuf, data, len);
 800409a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800409e:	b29a      	uxth	r2, r3
 80040a0:	f107 0308 	add.w	r3, r7, #8
 80040a4:	4619      	mov	r1, r3
 80040a6:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 80040aa:	f008 fa2d 	bl	800c508 <pbuf_take>
		udp_send(upcb, txBuf);
 80040ae:	4b09      	ldr	r3, [pc, #36]	@ (80040d4 <udpClientSend+0x80>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f8d7 1108 	ldr.w	r1, [r7, #264]	@ 0x108
 80040b6:	4618      	mov	r0, r3
 80040b8:	f00d ffda 	bl	8012070 <udp_send>
    	pbuf_free(txBuf);
 80040bc:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 80040c0:	f007 ff7a 	bl	800bfb8 <pbuf_free>
	}
}
 80040c4:	bf00      	nop
 80040c6:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	0801e12c 	.word	0x0801e12c
 80040d4:	200024b0 	.word	0x200024b0

080040d8 <plannerFunctionsInit>:

/* Указатель на функцию для измерения времени */
static timeFunction_uint32_t_ptr getTime;

void plannerFunctionsInit(timeFunction_uint32_t_ptr function1)
{
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
	getTime = function1;
 80040e0:	4a04      	ldr	r2, [pc, #16]	@ (80040f4 <plannerFunctionsInit+0x1c>)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6013      	str	r3, [r2, #0]
}
 80040e6:	bf00      	nop
 80040e8:	370c      	adds	r7, #12
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr
 80040f2:	bf00      	nop
 80040f4:	20002648 	.word	0x20002648

080040f8 <plannerInit>:

/** Инициализация планироващика
 *
 */
void plannerInit(PLANNER_StructDef* planner)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b085      	sub	sp, #20
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
	/* Указатели на структуры драйверов моторов */
	for(uint8_t i = 0; i < AXES; i ++)
 8004100:	2300      	movs	r3, #0
 8004102:	73fb      	strb	r3, [r7, #15]
 8004104:	e007      	b.n	8004116 <plannerInit+0x1e>
	{
		planner->driver[i] = 0;
 8004106:	7bfa      	ldrb	r2, [r7, #15]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2100      	movs	r1, #0
 800410c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(uint8_t i = 0; i < AXES; i ++)
 8004110:	7bfb      	ldrb	r3, [r7, #15]
 8004112:	3301      	adds	r3, #1
 8004114:	73fb      	strb	r3, [r7, #15]
 8004116:	7bfb      	ldrb	r3, [r7, #15]
 8004118:	2b01      	cmp	r3, #1
 800411a:	d9f4      	bls.n	8004106 <plannerInit+0xe>
	}

	planner->_PlannerTime = 0;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	609a      	str	r2, [r3, #8]

	planner->_curSpeed = 0;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f04f 0200 	mov.w	r2, #0
 8004128:	60da      	str	r2, [r3, #12]
	planner->_maxSpeed = 20 * 160; /* 20 мм/c --> 20 * 160 шаг/c */
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4a19      	ldr	r2, [pc, #100]	@ (8004194 <plannerInit+0x9c>)
 800412e:	611a      	str	r2, [r3, #16]
	planner->stepTime = 0;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	625a      	str	r2, [r3, #36]	@ 0x24

	planner->_stopFlag = false;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	761a      	strb	r2, [r3, #24]
	planner->_workState = PLANNER_INIT;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2201      	movs	r2, #1
 8004140:	769a      	strb	r2, [r3, #26]
	planner->_phase = STAND;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2202      	movs	r2, #2
 8004146:	765a      	strb	r2, [r3, #25]

	planner->_c0 = 0;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f04f 0200 	mov.w	r2, #0
 800414e:	629a      	str	r2, [r3, #40]	@ 0x28
	planner->_cn = 0;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f04f 0200 	mov.w	r2, #0
 8004156:	62da      	str	r2, [r3, #44]	@ 0x2c
	planner->_n = 0;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2200      	movs	r2, #0
 800415c:	631a      	str	r2, [r3, #48]	@ 0x30
	planner->N = 0;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	635a      	str	r2, [r3, #52]	@ 0x34
	planner->_cmin = 1.0;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800416a:	639a      	str	r2, [r3, #56]	@ 0x38
	planner->_s1 = 0;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	63da      	str	r2, [r3, #60]	@ 0x3c
	planner->_s2 = 0;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	planner->_s3 = 0;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2200      	movs	r2, #0
 800417e:	645a      	str	r2, [r3, #68]	@ 0x44
	planner->_k = 0;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8004186:	bf00      	nop
 8004188:	3714      	adds	r7, #20
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop
 8004194:	45480000 	.word	0x45480000

08004198 <plannerTickTest>:
}

/** Планировщик шагов
 */
void plannerTickTest(PLANNER_StructDef* planner)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b084      	sub	sp, #16
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
	if (planner->_workState == PLANNER_RUN)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f993 301a 	ldrsb.w	r3, [r3, #26]
 80041a6:	2b03      	cmp	r3, #3
 80041a8:	d15a      	bne.n	8004260 <plannerTickTest+0xc8>
	{
		planner->tickUs = getTime();
 80041aa:	4b2f      	ldr	r3, [pc, #188]	@ (8004268 <plannerTickTest+0xd0>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4798      	blx	r3
 80041b0:	4602      	mov	r2, r0
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	61da      	str	r2, [r3, #28]

		/* Основной таймер степпера */
		if (planner->tickUs - planner->_prevTime >= planner->stepTime)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	69da      	ldr	r2, [r3, #28]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a1b      	ldr	r3, [r3, #32]
 80041be:	1ad2      	subs	r2, r2, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d34b      	bcc.n	8004260 <plannerTickTest+0xc8>
		{
			planner->_prevTime = planner->tickUs;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	69da      	ldr	r2, [r3, #28]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	621a      	str	r2, [r3, #32]
				brakePlanner(planner);
			}*/

			/* Чтение ячейки FIFO буфера шагов и воспроизведение шагов */
			int8_t rx_bin;
			fifoRead(&fifoBufSteps, &rx_bin);
 80041d0:	f107 030e 	add.w	r3, r7, #14
 80041d4:	4619      	mov	r1, r3
 80041d6:	4825      	ldr	r0, [pc, #148]	@ (800426c <plannerTickTest+0xd4>)
 80041d8:	f7fd fcb9 	bl	8001b4e <fifoRead>

			for(uint8_t i = 0; i < AXES; i ++)
 80041dc:	2300      	movs	r3, #0
 80041de:	73fb      	strb	r3, [r7, #15]
 80041e0:	e03a      	b.n	8004258 <plannerTickTest+0xc0>
			{
				if((rx_bin & 3) == 1)
 80041e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	f003 0303 	and.w	r3, r3, #3
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d10f      	bne.n	8004210 <plannerTickTest+0x78>
				{
					/* Устанавливаем направление и производим шаг мотором */
					setDriverDir(planner->driver[i], 1);
 80041f0:	7bfa      	ldrb	r2, [r7, #15]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041f8:	2101      	movs	r1, #1
 80041fa:	4618      	mov	r0, r3
 80041fc:	f7fd f8c2 	bl	8001384 <setDriverDir>
					stepDriver(planner->driver[i]);
 8004200:	7bfa      	ldrb	r2, [r7, #15]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004208:	4618      	mov	r0, r3
 800420a:	f7fd f90f 	bl	800142c <stepDriver>

					break;
 800420e:	e027      	b.n	8004260 <plannerTickTest+0xc8>
				}
				else if((rx_bin & 3) == 3)
 8004210:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004214:	b2db      	uxtb	r3, r3
 8004216:	f003 0303 	and.w	r3, r3, #3
 800421a:	2b03      	cmp	r3, #3
 800421c:	d10f      	bne.n	800423e <plannerTickTest+0xa6>
				{
					/* Устанавливаем направление и производим шаг мотором */
					setDriverDir(planner->driver[i], -1);
 800421e:	7bfa      	ldrb	r2, [r7, #15]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004226:	21ff      	movs	r1, #255	@ 0xff
 8004228:	4618      	mov	r0, r3
 800422a:	f7fd f8ab 	bl	8001384 <setDriverDir>
					stepDriver(planner->driver[i]);
 800422e:	7bfa      	ldrb	r2, [r7, #15]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004236:	4618      	mov	r0, r3
 8004238:	f7fd f8f8 	bl	800142c <stepDriver>

					break;
 800423c:	e010      	b.n	8004260 <plannerTickTest+0xc8>
				}

				rx_bin >>= (i + 1) * 2;
 800423e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004242:	461a      	mov	r2, r3
 8004244:	7bfb      	ldrb	r3, [r7, #15]
 8004246:	3301      	adds	r3, #1
 8004248:	005b      	lsls	r3, r3, #1
 800424a:	fa42 f303 	asr.w	r3, r2, r3
 800424e:	b25b      	sxtb	r3, r3
 8004250:	73bb      	strb	r3, [r7, #14]
			for(uint8_t i = 0; i < AXES; i ++)
 8004252:	7bfb      	ldrb	r3, [r7, #15]
 8004254:	3301      	adds	r3, #1
 8004256:	73fb      	strb	r3, [r7, #15]
 8004258:	7bfb      	ldrb	r3, [r7, #15]
 800425a:	2b01      	cmp	r3, #1
 800425c:	d9c1      	bls.n	80041e2 <plannerTickTest+0x4a>
			}
		}
	}
}
 800425e:	e7ff      	b.n	8004260 <plannerTickTest+0xc8>
 8004260:	bf00      	nop
 8004262:	3710      	adds	r7, #16
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}
 8004268:	20002648 	.word	0x20002648
 800426c:	20001b70 	.word	0x20001b70

08004270 <addDriver>:
}

/** Подключить драйвер мотора driver на ось axis к планировщику
 */
void addDriver(PLANNER_StructDef* planner, DRIVER_StructDef* driver, uint8_t axis)
{
 8004270:	b480      	push	{r7}
 8004272:	b085      	sub	sp, #20
 8004274:	af00      	add	r7, sp, #0
 8004276:	60f8      	str	r0, [r7, #12]
 8004278:	60b9      	str	r1, [r7, #8]
 800427a:	4613      	mov	r3, r2
 800427c:	71fb      	strb	r3, [r7, #7]
	planner->driver[axis] = driver;
 800427e:	79fa      	ldrb	r2, [r7, #7]
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	68b9      	ldr	r1, [r7, #8]
 8004284:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8004288:	bf00      	nop
 800428a:	3714      	adds	r7, #20
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr

08004294 <stepperFunctionsInit>:

/**	Функция инициализации указателей на функции из других областей программы
 * 	для использования в данной библиотеке
 */
void stepperFunctionsInit(writePinFunction_void_ptr function)
{
 8004294:	b480      	push	{r7}
 8004296:	b083      	sub	sp, #12
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
	setPin = function;
 800429c:	4a04      	ldr	r2, [pc, #16]	@ (80042b0 <stepperFunctionsInit+0x1c>)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6013      	str	r3, [r2, #0]
}
 80042a2:	bf00      	nop
 80042a4:	370c      	adds	r7, #12
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr
 80042ae:	bf00      	nop
 80042b0:	2000264c 	.word	0x2000264c

080042b4 <stepperInit>:
 *
 * 	Функция определяет пины шагового мотора и инициализирует начальные данные мотора -
 * 	позицию, направление, статус включения, глобальное определение поведения пинов DIR, EN
 */
void stepperInit(STEPPER_StructDef* stepper, STEPPER_PINS_StructDef* pins)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	6039      	str	r1, [r7, #0]
	stepper->stepper_pins.GPIOx_step = pins->GPIOx_step;
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	601a      	str	r2, [r3, #0]
	stepper->stepper_pins.GPIO_Pin_step = pins->GPIO_Pin_step;
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	889a      	ldrh	r2, [r3, #4]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	809a      	strh	r2, [r3, #4]

	stepper->stepper_pins.GPIOx_dir = pins->GPIOx_dir;
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	689a      	ldr	r2, [r3, #8]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	609a      	str	r2, [r3, #8]
	stepper->stepper_pins.GPIO_Pin_dir = pins->GPIO_Pin_dir;
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	899a      	ldrh	r2, [r3, #12]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	819a      	strh	r2, [r3, #12]

	stepper->stepper_pins.GPIOx_en = 0x0;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	611a      	str	r2, [r3, #16]
	stepper->stepper_pins.GPIO_Pin_en = 0x0;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2200      	movs	r2, #0
 80042e8:	829a      	strh	r2, [r3, #20]

	stepper->pos = 0;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	619a      	str	r2, [r3, #24]
	stepper->dir = 1;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	771a      	strb	r2, [r3, #28]
	stepper->en = OFF;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	775a      	strb	r2, [r3, #29]

	stepper->_globEn = false;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	779a      	strb	r2, [r3, #30]
	stepper->_globDir = false;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	77da      	strb	r2, [r3, #31]
}
 8004308:	bf00      	nop
 800430a:	370c      	adds	r7, #12
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr

08004314 <step>:

/** Сделать шаг мотором
 */
void step(STEPPER_StructDef* stepper)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b082      	sub	sp, #8
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
	stepper->pos += stepper->dir;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	7f1b      	ldrb	r3, [r3, #28]
 8004320:	b25a      	sxtb	r2, r3
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	699b      	ldr	r3, [r3, #24]
 8004326:	441a      	add	r2, r3
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	619a      	str	r2, [r3, #24]
	setDir(stepper, stepper->dir); /* Установить пин DIR в нужное состояние в соответствии с направлением вращения */
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	7f1b      	ldrb	r3, [r3, #28]
 8004330:	b25b      	sxtb	r3, r3
 8004332:	4619      	mov	r1, r3
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f000 f819 	bl	800436c <setDir>

	setPin(stepper->stepper_pins.GPIOx_step, stepper->stepper_pins.GPIO_Pin_step, PIN_SET);
 800433a:	4b0b      	ldr	r3, [pc, #44]	@ (8004368 <step+0x54>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	6810      	ldr	r0, [r2, #0]
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	8891      	ldrh	r1, [r2, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	4798      	blx	r3
	DWT_usDelay(STEP_TIME);
 800434a:	2005      	movs	r0, #5
 800434c:	f7fd fb1e 	bl	800198c <DWT_usDelay>
	setPin(stepper->stepper_pins.GPIOx_step, stepper->stepper_pins.GPIO_Pin_step, PIN_RESET);
 8004350:	4b05      	ldr	r3, [pc, #20]	@ (8004368 <step+0x54>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	6810      	ldr	r0, [r2, #0]
 8004358:	687a      	ldr	r2, [r7, #4]
 800435a:	8891      	ldrh	r1, [r2, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	4798      	blx	r3
}
 8004360:	bf00      	nop
 8004362:	3708      	adds	r7, #8
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}
 8004368:	2000264c 	.word	0x2000264c

0800436c <setDir>:
 * 	dir = -1 - против часовой стрелки независимо от _globDir
 * 	Направление вращения определяется со стороны задней части мотора,
 * 	т.е. вал мотора смотрит от нас!
 */
void setDir(STEPPER_StructDef* stepper, int8_t dir)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b082      	sub	sp, #8
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
 8004374:	460b      	mov	r3, r1
 8004376:	70fb      	strb	r3, [r7, #3]
	if(stepper->_globDir == false)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	7fdb      	ldrb	r3, [r3, #31]
 800437c:	f083 0301 	eor.w	r3, r3, #1
 8004380:	b2db      	uxtb	r3, r3
 8004382:	2b00      	cmp	r3, #0
 8004384:	d01b      	beq.n	80043be <setDir+0x52>
	{
		if(dir == 1)
 8004386:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800438a:	2b01      	cmp	r3, #1
 800438c:	d10b      	bne.n	80043a6 <setDir+0x3a>
		{
			stepper->dir = 1;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2201      	movs	r2, #1
 8004392:	771a      	strb	r2, [r3, #28]
			setPin(stepper->stepper_pins.GPIOx_dir, stepper->stepper_pins.GPIO_Pin_dir, PIN_SET);
 8004394:	4b19      	ldr	r3, [pc, #100]	@ (80043fc <setDir+0x90>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	6890      	ldr	r0, [r2, #8]
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	8991      	ldrh	r1, [r2, #12]
 80043a0:	2201      	movs	r2, #1
 80043a2:	4798      	blx	r3
		else
		{
			stepper->dir = -1;
			setPin(stepper->stepper_pins.GPIOx_dir, stepper->stepper_pins.GPIO_Pin_dir, PIN_SET);
		}
}
 80043a4:	e026      	b.n	80043f4 <setDir+0x88>
			stepper->dir = -1;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	22ff      	movs	r2, #255	@ 0xff
 80043aa:	771a      	strb	r2, [r3, #28]
			setPin(stepper->stepper_pins.GPIOx_dir, stepper->stepper_pins.GPIO_Pin_dir, PIN_RESET);
 80043ac:	4b13      	ldr	r3, [pc, #76]	@ (80043fc <setDir+0x90>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	687a      	ldr	r2, [r7, #4]
 80043b2:	6890      	ldr	r0, [r2, #8]
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	8991      	ldrh	r1, [r2, #12]
 80043b8:	2200      	movs	r2, #0
 80043ba:	4798      	blx	r3
}
 80043bc:	e01a      	b.n	80043f4 <setDir+0x88>
	else if(dir == 1)
 80043be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d10b      	bne.n	80043de <setDir+0x72>
		stepper->dir = 1;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2201      	movs	r2, #1
 80043ca:	771a      	strb	r2, [r3, #28]
		setPin(stepper->stepper_pins.GPIOx_dir, stepper->stepper_pins.GPIO_Pin_dir, PIN_RESET);
 80043cc:	4b0b      	ldr	r3, [pc, #44]	@ (80043fc <setDir+0x90>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	687a      	ldr	r2, [r7, #4]
 80043d2:	6890      	ldr	r0, [r2, #8]
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	8991      	ldrh	r1, [r2, #12]
 80043d8:	2200      	movs	r2, #0
 80043da:	4798      	blx	r3
}
 80043dc:	e00a      	b.n	80043f4 <setDir+0x88>
			stepper->dir = -1;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	22ff      	movs	r2, #255	@ 0xff
 80043e2:	771a      	strb	r2, [r3, #28]
			setPin(stepper->stepper_pins.GPIOx_dir, stepper->stepper_pins.GPIO_Pin_dir, PIN_SET);
 80043e4:	4b05      	ldr	r3, [pc, #20]	@ (80043fc <setDir+0x90>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	687a      	ldr	r2, [r7, #4]
 80043ea:	6890      	ldr	r0, [r2, #8]
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	8991      	ldrh	r1, [r2, #12]
 80043f0:	2201      	movs	r2, #1
 80043f2:	4798      	blx	r3
}
 80043f4:	bf00      	nop
 80043f6:	3708      	adds	r7, #8
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}
 80043fc:	2000264c 	.word	0x2000264c

08004400 <enableStepper>:

/** Включение мотора
 */
void enableStepper(STEPPER_StructDef* stepper)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b082      	sub	sp, #8
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
	stepper->en = ON;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	775a      	strb	r2, [r3, #29]

	if(stepper->_globEn == false)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	7f9b      	ldrb	r3, [r3, #30]
 8004412:	f083 0301 	eor.w	r3, r3, #1
 8004416:	b2db      	uxtb	r3, r3
 8004418:	2b00      	cmp	r3, #0
 800441a:	d008      	beq.n	800442e <enableStepper+0x2e>
	{
		setPin(stepper->stepper_pins.GPIOx_en, stepper->stepper_pins.GPIO_Pin_en, PIN_SET);
 800441c:	4b0a      	ldr	r3, [pc, #40]	@ (8004448 <enableStepper+0x48>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	6910      	ldr	r0, [r2, #16]
 8004424:	687a      	ldr	r2, [r7, #4]
 8004426:	8a91      	ldrh	r1, [r2, #20]
 8004428:	2201      	movs	r2, #1
 800442a:	4798      	blx	r3
	}
	else setPin(stepper->stepper_pins.GPIOx_en, stepper->stepper_pins.GPIO_Pin_en, PIN_RESET);
}
 800442c:	e007      	b.n	800443e <enableStepper+0x3e>
	else setPin(stepper->stepper_pins.GPIOx_en, stepper->stepper_pins.GPIO_Pin_en, PIN_RESET);
 800442e:	4b06      	ldr	r3, [pc, #24]	@ (8004448 <enableStepper+0x48>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	6910      	ldr	r0, [r2, #16]
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	8a91      	ldrh	r1, [r2, #20]
 800443a:	2200      	movs	r2, #0
 800443c:	4798      	blx	r3
}
 800443e:	bf00      	nop
 8004440:	3708      	adds	r7, #8
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	2000264c 	.word	0x2000264c

0800444c <disableStepper>:

/** Выключение мотора
 */
void disableStepper(STEPPER_StructDef* stepper)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b082      	sub	sp, #8
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
	stepper->en = OFF;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	775a      	strb	r2, [r3, #29]

	if(stepper->_globEn == false)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	7f9b      	ldrb	r3, [r3, #30]
 800445e:	f083 0301 	eor.w	r3, r3, #1
 8004462:	b2db      	uxtb	r3, r3
 8004464:	2b00      	cmp	r3, #0
 8004466:	d008      	beq.n	800447a <disableStepper+0x2e>
	{
		setPin(stepper->stepper_pins.GPIOx_en, stepper->stepper_pins.GPIO_Pin_en, PIN_RESET);
 8004468:	4b0a      	ldr	r3, [pc, #40]	@ (8004494 <disableStepper+0x48>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	6910      	ldr	r0, [r2, #16]
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	8a91      	ldrh	r1, [r2, #20]
 8004474:	2200      	movs	r2, #0
 8004476:	4798      	blx	r3
	}
	else setPin(stepper->stepper_pins.GPIOx_en, stepper->stepper_pins.GPIO_Pin_en, PIN_SET);
}
 8004478:	e007      	b.n	800448a <disableStepper+0x3e>
	else setPin(stepper->stepper_pins.GPIOx_en, stepper->stepper_pins.GPIO_Pin_en, PIN_SET);
 800447a:	4b06      	ldr	r3, [pc, #24]	@ (8004494 <disableStepper+0x48>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	6910      	ldr	r0, [r2, #16]
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	8a91      	ldrh	r1, [r2, #20]
 8004486:	2201      	movs	r2, #1
 8004488:	4798      	blx	r3
}
 800448a:	bf00      	nop
 800448c:	3708      	adds	r7, #8
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
 8004492:	bf00      	nop
 8004494:	2000264c 	.word	0x2000264c

08004498 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004498:	b480      	push	{r7}
 800449a:	b083      	sub	sp, #12
 800449c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800449e:	2300      	movs	r3, #0
 80044a0:	607b      	str	r3, [r7, #4]
 80044a2:	4b10      	ldr	r3, [pc, #64]	@ (80044e4 <HAL_MspInit+0x4c>)
 80044a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044a6:	4a0f      	ldr	r2, [pc, #60]	@ (80044e4 <HAL_MspInit+0x4c>)
 80044a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80044ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80044ae:	4b0d      	ldr	r3, [pc, #52]	@ (80044e4 <HAL_MspInit+0x4c>)
 80044b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80044b6:	607b      	str	r3, [r7, #4]
 80044b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80044ba:	2300      	movs	r3, #0
 80044bc:	603b      	str	r3, [r7, #0]
 80044be:	4b09      	ldr	r3, [pc, #36]	@ (80044e4 <HAL_MspInit+0x4c>)
 80044c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044c2:	4a08      	ldr	r2, [pc, #32]	@ (80044e4 <HAL_MspInit+0x4c>)
 80044c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80044ca:	4b06      	ldr	r3, [pc, #24]	@ (80044e4 <HAL_MspInit+0x4c>)
 80044cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044d2:	603b      	str	r3, [r7, #0]
 80044d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80044d6:	bf00      	nop
 80044d8:	370c      	adds	r7, #12
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr
 80044e2:	bf00      	nop
 80044e4:	40023800 	.word	0x40023800

080044e8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b08a      	sub	sp, #40	@ 0x28
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044f0:	f107 0314 	add.w	r3, r7, #20
 80044f4:	2200      	movs	r2, #0
 80044f6:	601a      	str	r2, [r3, #0]
 80044f8:	605a      	str	r2, [r3, #4]
 80044fa:	609a      	str	r2, [r3, #8]
 80044fc:	60da      	str	r2, [r3, #12]
 80044fe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a17      	ldr	r2, [pc, #92]	@ (8004564 <HAL_ADC_MspInit+0x7c>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d127      	bne.n	800455a <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800450a:	2300      	movs	r3, #0
 800450c:	613b      	str	r3, [r7, #16]
 800450e:	4b16      	ldr	r3, [pc, #88]	@ (8004568 <HAL_ADC_MspInit+0x80>)
 8004510:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004512:	4a15      	ldr	r2, [pc, #84]	@ (8004568 <HAL_ADC_MspInit+0x80>)
 8004514:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004518:	6453      	str	r3, [r2, #68]	@ 0x44
 800451a:	4b13      	ldr	r3, [pc, #76]	@ (8004568 <HAL_ADC_MspInit+0x80>)
 800451c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800451e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004522:	613b      	str	r3, [r7, #16]
 8004524:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004526:	2300      	movs	r3, #0
 8004528:	60fb      	str	r3, [r7, #12]
 800452a:	4b0f      	ldr	r3, [pc, #60]	@ (8004568 <HAL_ADC_MspInit+0x80>)
 800452c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800452e:	4a0e      	ldr	r2, [pc, #56]	@ (8004568 <HAL_ADC_MspInit+0x80>)
 8004530:	f043 0301 	orr.w	r3, r3, #1
 8004534:	6313      	str	r3, [r2, #48]	@ 0x30
 8004536:	4b0c      	ldr	r3, [pc, #48]	@ (8004568 <HAL_ADC_MspInit+0x80>)
 8004538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800453a:	f003 0301 	and.w	r3, r3, #1
 800453e:	60fb      	str	r3, [r7, #12]
 8004540:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8004542:	2309      	movs	r3, #9
 8004544:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004546:	2303      	movs	r3, #3
 8004548:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800454a:	2300      	movs	r3, #0
 800454c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800454e:	f107 0314 	add.w	r3, r7, #20
 8004552:	4619      	mov	r1, r3
 8004554:	4805      	ldr	r0, [pc, #20]	@ (800456c <HAL_ADC_MspInit+0x84>)
 8004556:	f002 fb91 	bl	8006c7c <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800455a:	bf00      	nop
 800455c:	3728      	adds	r7, #40	@ 0x28
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	40012000 	.word	0x40012000
 8004568:	40023800 	.word	0x40023800
 800456c:	40020000 	.word	0x40020000

08004570 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b08a      	sub	sp, #40	@ 0x28
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004578:	f107 0314 	add.w	r3, r7, #20
 800457c:	2200      	movs	r2, #0
 800457e:	601a      	str	r2, [r3, #0]
 8004580:	605a      	str	r2, [r3, #4]
 8004582:	609a      	str	r2, [r3, #8]
 8004584:	60da      	str	r2, [r3, #12]
 8004586:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a19      	ldr	r2, [pc, #100]	@ (80045f4 <HAL_CAN_MspInit+0x84>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d12b      	bne.n	80045ea <HAL_CAN_MspInit+0x7a>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8004592:	2300      	movs	r3, #0
 8004594:	613b      	str	r3, [r7, #16]
 8004596:	4b18      	ldr	r3, [pc, #96]	@ (80045f8 <HAL_CAN_MspInit+0x88>)
 8004598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800459a:	4a17      	ldr	r2, [pc, #92]	@ (80045f8 <HAL_CAN_MspInit+0x88>)
 800459c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80045a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80045a2:	4b15      	ldr	r3, [pc, #84]	@ (80045f8 <HAL_CAN_MspInit+0x88>)
 80045a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045aa:	613b      	str	r3, [r7, #16]
 80045ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80045ae:	2300      	movs	r3, #0
 80045b0:	60fb      	str	r3, [r7, #12]
 80045b2:	4b11      	ldr	r3, [pc, #68]	@ (80045f8 <HAL_CAN_MspInit+0x88>)
 80045b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045b6:	4a10      	ldr	r2, [pc, #64]	@ (80045f8 <HAL_CAN_MspInit+0x88>)
 80045b8:	f043 0308 	orr.w	r3, r3, #8
 80045bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80045be:	4b0e      	ldr	r3, [pc, #56]	@ (80045f8 <HAL_CAN_MspInit+0x88>)
 80045c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045c2:	f003 0308 	and.w	r3, r3, #8
 80045c6:	60fb      	str	r3, [r7, #12]
 80045c8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80045ca:	2303      	movs	r3, #3
 80045cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045ce:	2302      	movs	r3, #2
 80045d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045d2:	2300      	movs	r3, #0
 80045d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045d6:	2303      	movs	r3, #3
 80045d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80045da:	2309      	movs	r3, #9
 80045dc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80045de:	f107 0314 	add.w	r3, r7, #20
 80045e2:	4619      	mov	r1, r3
 80045e4:	4805      	ldr	r0, [pc, #20]	@ (80045fc <HAL_CAN_MspInit+0x8c>)
 80045e6:	f002 fb49 	bl	8006c7c <HAL_GPIO_Init>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 80045ea:	bf00      	nop
 80045ec:	3728      	adds	r7, #40	@ 0x28
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	bf00      	nop
 80045f4:	40006400 	.word	0x40006400
 80045f8:	40023800 	.word	0x40023800
 80045fc:	40020c00 	.word	0x40020c00

08004600 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b08a      	sub	sp, #40	@ 0x28
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004608:	f107 0314 	add.w	r3, r7, #20
 800460c:	2200      	movs	r2, #0
 800460e:	601a      	str	r2, [r3, #0]
 8004610:	605a      	str	r2, [r3, #4]
 8004612:	609a      	str	r2, [r3, #8]
 8004614:	60da      	str	r2, [r3, #12]
 8004616:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a17      	ldr	r2, [pc, #92]	@ (800467c <HAL_DAC_MspInit+0x7c>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d127      	bne.n	8004672 <HAL_DAC_MspInit+0x72>
  {
    /* USER CODE BEGIN DAC_MspInit 0 */

    /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8004622:	2300      	movs	r3, #0
 8004624:	613b      	str	r3, [r7, #16]
 8004626:	4b16      	ldr	r3, [pc, #88]	@ (8004680 <HAL_DAC_MspInit+0x80>)
 8004628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800462a:	4a15      	ldr	r2, [pc, #84]	@ (8004680 <HAL_DAC_MspInit+0x80>)
 800462c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004630:	6413      	str	r3, [r2, #64]	@ 0x40
 8004632:	4b13      	ldr	r3, [pc, #76]	@ (8004680 <HAL_DAC_MspInit+0x80>)
 8004634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004636:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800463a:	613b      	str	r3, [r7, #16]
 800463c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800463e:	2300      	movs	r3, #0
 8004640:	60fb      	str	r3, [r7, #12]
 8004642:	4b0f      	ldr	r3, [pc, #60]	@ (8004680 <HAL_DAC_MspInit+0x80>)
 8004644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004646:	4a0e      	ldr	r2, [pc, #56]	@ (8004680 <HAL_DAC_MspInit+0x80>)
 8004648:	f043 0301 	orr.w	r3, r3, #1
 800464c:	6313      	str	r3, [r2, #48]	@ 0x30
 800464e:	4b0c      	ldr	r3, [pc, #48]	@ (8004680 <HAL_DAC_MspInit+0x80>)
 8004650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004652:	f003 0301 	and.w	r3, r3, #1
 8004656:	60fb      	str	r3, [r7, #12]
 8004658:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800465a:	2330      	movs	r3, #48	@ 0x30
 800465c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800465e:	2303      	movs	r3, #3
 8004660:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004662:	2300      	movs	r3, #0
 8004664:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004666:	f107 0314 	add.w	r3, r7, #20
 800466a:	4619      	mov	r1, r3
 800466c:	4805      	ldr	r0, [pc, #20]	@ (8004684 <HAL_DAC_MspInit+0x84>)
 800466e:	f002 fb05 	bl	8006c7c <HAL_GPIO_Init>

    /* USER CODE END DAC_MspInit 1 */

  }

}
 8004672:	bf00      	nop
 8004674:	3728      	adds	r7, #40	@ 0x28
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
 800467a:	bf00      	nop
 800467c:	40007400 	.word	0x40007400
 8004680:	40023800 	.word	0x40023800
 8004684:	40020000 	.word	0x40020000

08004688 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b08a      	sub	sp, #40	@ 0x28
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004690:	f107 0314 	add.w	r3, r7, #20
 8004694:	2200      	movs	r2, #0
 8004696:	601a      	str	r2, [r3, #0]
 8004698:	605a      	str	r2, [r3, #4]
 800469a:	609a      	str	r2, [r3, #8]
 800469c:	60da      	str	r2, [r3, #12]
 800469e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a19      	ldr	r2, [pc, #100]	@ (800470c <HAL_I2C_MspInit+0x84>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d12b      	bne.n	8004702 <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80046aa:	2300      	movs	r3, #0
 80046ac:	613b      	str	r3, [r7, #16]
 80046ae:	4b18      	ldr	r3, [pc, #96]	@ (8004710 <HAL_I2C_MspInit+0x88>)
 80046b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046b2:	4a17      	ldr	r2, [pc, #92]	@ (8004710 <HAL_I2C_MspInit+0x88>)
 80046b4:	f043 0302 	orr.w	r3, r3, #2
 80046b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80046ba:	4b15      	ldr	r3, [pc, #84]	@ (8004710 <HAL_I2C_MspInit+0x88>)
 80046bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046be:	f003 0302 	and.w	r3, r3, #2
 80046c2:	613b      	str	r3, [r7, #16]
 80046c4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80046c6:	23c0      	movs	r3, #192	@ 0xc0
 80046c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80046ca:	2312      	movs	r3, #18
 80046cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046ce:	2300      	movs	r3, #0
 80046d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046d2:	2303      	movs	r3, #3
 80046d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80046d6:	2304      	movs	r3, #4
 80046d8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046da:	f107 0314 	add.w	r3, r7, #20
 80046de:	4619      	mov	r1, r3
 80046e0:	480c      	ldr	r0, [pc, #48]	@ (8004714 <HAL_I2C_MspInit+0x8c>)
 80046e2:	f002 facb 	bl	8006c7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80046e6:	2300      	movs	r3, #0
 80046e8:	60fb      	str	r3, [r7, #12]
 80046ea:	4b09      	ldr	r3, [pc, #36]	@ (8004710 <HAL_I2C_MspInit+0x88>)
 80046ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ee:	4a08      	ldr	r2, [pc, #32]	@ (8004710 <HAL_I2C_MspInit+0x88>)
 80046f0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80046f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80046f6:	4b06      	ldr	r3, [pc, #24]	@ (8004710 <HAL_I2C_MspInit+0x88>)
 80046f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80046fe:	60fb      	str	r3, [r7, #12]
 8004700:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8004702:	bf00      	nop
 8004704:	3728      	adds	r7, #40	@ 0x28
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}
 800470a:	bf00      	nop
 800470c:	40005400 	.word	0x40005400
 8004710:	40023800 	.word	0x40023800
 8004714:	40020400 	.word	0x40020400

08004718 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b08a      	sub	sp, #40	@ 0x28
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004720:	f107 0314 	add.w	r3, r7, #20
 8004724:	2200      	movs	r2, #0
 8004726:	601a      	str	r2, [r3, #0]
 8004728:	605a      	str	r2, [r3, #4]
 800472a:	609a      	str	r2, [r3, #8]
 800472c:	60da      	str	r2, [r3, #12]
 800472e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a19      	ldr	r2, [pc, #100]	@ (800479c <HAL_SPI_MspInit+0x84>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d12c      	bne.n	8004794 <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI3_MspInit 0 */

    /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800473a:	2300      	movs	r3, #0
 800473c:	613b      	str	r3, [r7, #16]
 800473e:	4b18      	ldr	r3, [pc, #96]	@ (80047a0 <HAL_SPI_MspInit+0x88>)
 8004740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004742:	4a17      	ldr	r2, [pc, #92]	@ (80047a0 <HAL_SPI_MspInit+0x88>)
 8004744:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004748:	6413      	str	r3, [r2, #64]	@ 0x40
 800474a:	4b15      	ldr	r3, [pc, #84]	@ (80047a0 <HAL_SPI_MspInit+0x88>)
 800474c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800474e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004752:	613b      	str	r3, [r7, #16]
 8004754:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004756:	2300      	movs	r3, #0
 8004758:	60fb      	str	r3, [r7, #12]
 800475a:	4b11      	ldr	r3, [pc, #68]	@ (80047a0 <HAL_SPI_MspInit+0x88>)
 800475c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800475e:	4a10      	ldr	r2, [pc, #64]	@ (80047a0 <HAL_SPI_MspInit+0x88>)
 8004760:	f043 0304 	orr.w	r3, r3, #4
 8004764:	6313      	str	r3, [r2, #48]	@ 0x30
 8004766:	4b0e      	ldr	r3, [pc, #56]	@ (80047a0 <HAL_SPI_MspInit+0x88>)
 8004768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800476a:	f003 0304 	and.w	r3, r3, #4
 800476e:	60fb      	str	r3, [r7, #12]
 8004770:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8004772:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8004776:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004778:	2302      	movs	r3, #2
 800477a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800477c:	2300      	movs	r3, #0
 800477e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004780:	2303      	movs	r3, #3
 8004782:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004784:	2306      	movs	r3, #6
 8004786:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004788:	f107 0314 	add.w	r3, r7, #20
 800478c:	4619      	mov	r1, r3
 800478e:	4805      	ldr	r0, [pc, #20]	@ (80047a4 <HAL_SPI_MspInit+0x8c>)
 8004790:	f002 fa74 	bl	8006c7c <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8004794:	bf00      	nop
 8004796:	3728      	adds	r7, #40	@ 0x28
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}
 800479c:	40003c00 	.word	0x40003c00
 80047a0:	40023800 	.word	0x40023800
 80047a4:	40020800 	.word	0x40020800

080047a8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b086      	sub	sp, #24
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a26      	ldr	r2, [pc, #152]	@ (8004850 <HAL_TIM_Base_MspInit+0xa8>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d116      	bne.n	80047e8 <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80047ba:	2300      	movs	r3, #0
 80047bc:	617b      	str	r3, [r7, #20]
 80047be:	4b25      	ldr	r3, [pc, #148]	@ (8004854 <HAL_TIM_Base_MspInit+0xac>)
 80047c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047c2:	4a24      	ldr	r2, [pc, #144]	@ (8004854 <HAL_TIM_Base_MspInit+0xac>)
 80047c4:	f043 0301 	orr.w	r3, r3, #1
 80047c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80047ca:	4b22      	ldr	r3, [pc, #136]	@ (8004854 <HAL_TIM_Base_MspInit+0xac>)
 80047cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047ce:	f003 0301 	and.w	r3, r3, #1
 80047d2:	617b      	str	r3, [r7, #20]
 80047d4:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80047d6:	2200      	movs	r2, #0
 80047d8:	2100      	movs	r1, #0
 80047da:	2019      	movs	r0, #25
 80047dc:	f001 f869 	bl	80058b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80047e0:	2019      	movs	r0, #25
 80047e2:	f001 f882 	bl	80058ea <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM13_MspInit 1 */

    /* USER CODE END TIM13_MspInit 1 */
  }

}
 80047e6:	e02e      	b.n	8004846 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM2)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047f0:	d10e      	bne.n	8004810 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80047f2:	2300      	movs	r3, #0
 80047f4:	613b      	str	r3, [r7, #16]
 80047f6:	4b17      	ldr	r3, [pc, #92]	@ (8004854 <HAL_TIM_Base_MspInit+0xac>)
 80047f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047fa:	4a16      	ldr	r2, [pc, #88]	@ (8004854 <HAL_TIM_Base_MspInit+0xac>)
 80047fc:	f043 0301 	orr.w	r3, r3, #1
 8004800:	6413      	str	r3, [r2, #64]	@ 0x40
 8004802:	4b14      	ldr	r3, [pc, #80]	@ (8004854 <HAL_TIM_Base_MspInit+0xac>)
 8004804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004806:	f003 0301 	and.w	r3, r3, #1
 800480a:	613b      	str	r3, [r7, #16]
 800480c:	693b      	ldr	r3, [r7, #16]
}
 800480e:	e01a      	b.n	8004846 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM13)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a10      	ldr	r2, [pc, #64]	@ (8004858 <HAL_TIM_Base_MspInit+0xb0>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d115      	bne.n	8004846 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800481a:	2300      	movs	r3, #0
 800481c:	60fb      	str	r3, [r7, #12]
 800481e:	4b0d      	ldr	r3, [pc, #52]	@ (8004854 <HAL_TIM_Base_MspInit+0xac>)
 8004820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004822:	4a0c      	ldr	r2, [pc, #48]	@ (8004854 <HAL_TIM_Base_MspInit+0xac>)
 8004824:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004828:	6413      	str	r3, [r2, #64]	@ 0x40
 800482a:	4b0a      	ldr	r3, [pc, #40]	@ (8004854 <HAL_TIM_Base_MspInit+0xac>)
 800482c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800482e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004832:	60fb      	str	r3, [r7, #12]
 8004834:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8004836:	2200      	movs	r2, #0
 8004838:	2100      	movs	r1, #0
 800483a:	202c      	movs	r0, #44	@ 0x2c
 800483c:	f001 f839 	bl	80058b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8004840:	202c      	movs	r0, #44	@ 0x2c
 8004842:	f001 f852 	bl	80058ea <HAL_NVIC_EnableIRQ>
}
 8004846:	bf00      	nop
 8004848:	3718      	adds	r7, #24
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	40010000 	.word	0x40010000
 8004854:	40023800 	.word	0x40023800
 8004858:	40001c00 	.word	0x40001c00

0800485c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b088      	sub	sp, #32
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004864:	f107 030c 	add.w	r3, r7, #12
 8004868:	2200      	movs	r2, #0
 800486a:	601a      	str	r2, [r3, #0]
 800486c:	605a      	str	r2, [r3, #4]
 800486e:	609a      	str	r2, [r3, #8]
 8004870:	60da      	str	r2, [r3, #12]
 8004872:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM13)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a12      	ldr	r2, [pc, #72]	@ (80048c4 <HAL_TIM_MspPostInit+0x68>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d11d      	bne.n	80048ba <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM13_MspPostInit 0 */

    /* USER CODE END TIM13_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800487e:	2300      	movs	r3, #0
 8004880:	60bb      	str	r3, [r7, #8]
 8004882:	4b11      	ldr	r3, [pc, #68]	@ (80048c8 <HAL_TIM_MspPostInit+0x6c>)
 8004884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004886:	4a10      	ldr	r2, [pc, #64]	@ (80048c8 <HAL_TIM_MspPostInit+0x6c>)
 8004888:	f043 0301 	orr.w	r3, r3, #1
 800488c:	6313      	str	r3, [r2, #48]	@ 0x30
 800488e:	4b0e      	ldr	r3, [pc, #56]	@ (80048c8 <HAL_TIM_MspPostInit+0x6c>)
 8004890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004892:	f003 0301 	and.w	r3, r3, #1
 8004896:	60bb      	str	r3, [r7, #8]
 8004898:	68bb      	ldr	r3, [r7, #8]
    /**TIM13 GPIO Configuration
    PA6     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GATE_LASER_TIM13_CH1_Pin;
 800489a:	2340      	movs	r3, #64	@ 0x40
 800489c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800489e:	2302      	movs	r3, #2
 80048a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048a2:	2300      	movs	r3, #0
 80048a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048a6:	2300      	movs	r3, #0
 80048a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 80048aa:	2309      	movs	r3, #9
 80048ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GATE_LASER_TIM13_CH1_GPIO_Port, &GPIO_InitStruct);
 80048ae:	f107 030c 	add.w	r3, r7, #12
 80048b2:	4619      	mov	r1, r3
 80048b4:	4805      	ldr	r0, [pc, #20]	@ (80048cc <HAL_TIM_MspPostInit+0x70>)
 80048b6:	f002 f9e1 	bl	8006c7c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM13_MspPostInit 1 */

    /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 80048ba:	bf00      	nop
 80048bc:	3720      	adds	r7, #32
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	bf00      	nop
 80048c4:	40001c00 	.word	0x40001c00
 80048c8:	40023800 	.word	0x40023800
 80048cc:	40020000 	.word	0x40020000

080048d0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b08c      	sub	sp, #48	@ 0x30
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048d8:	f107 031c 	add.w	r3, r7, #28
 80048dc:	2200      	movs	r2, #0
 80048de:	601a      	str	r2, [r3, #0]
 80048e0:	605a      	str	r2, [r3, #4]
 80048e2:	609a      	str	r2, [r3, #8]
 80048e4:	60da      	str	r2, [r3, #12]
 80048e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a33      	ldr	r2, [pc, #204]	@ (80049bc <HAL_UART_MspInit+0xec>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d12d      	bne.n	800494e <HAL_UART_MspInit+0x7e>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80048f2:	2300      	movs	r3, #0
 80048f4:	61bb      	str	r3, [r7, #24]
 80048f6:	4b32      	ldr	r3, [pc, #200]	@ (80049c0 <HAL_UART_MspInit+0xf0>)
 80048f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048fa:	4a31      	ldr	r2, [pc, #196]	@ (80049c0 <HAL_UART_MspInit+0xf0>)
 80048fc:	f043 0310 	orr.w	r3, r3, #16
 8004900:	6453      	str	r3, [r2, #68]	@ 0x44
 8004902:	4b2f      	ldr	r3, [pc, #188]	@ (80049c0 <HAL_UART_MspInit+0xf0>)
 8004904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004906:	f003 0310 	and.w	r3, r3, #16
 800490a:	61bb      	str	r3, [r7, #24]
 800490c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800490e:	2300      	movs	r3, #0
 8004910:	617b      	str	r3, [r7, #20]
 8004912:	4b2b      	ldr	r3, [pc, #172]	@ (80049c0 <HAL_UART_MspInit+0xf0>)
 8004914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004916:	4a2a      	ldr	r2, [pc, #168]	@ (80049c0 <HAL_UART_MspInit+0xf0>)
 8004918:	f043 0301 	orr.w	r3, r3, #1
 800491c:	6313      	str	r3, [r2, #48]	@ 0x30
 800491e:	4b28      	ldr	r3, [pc, #160]	@ (80049c0 <HAL_UART_MspInit+0xf0>)
 8004920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004922:	f003 0301 	and.w	r3, r3, #1
 8004926:	617b      	str	r3, [r7, #20]
 8004928:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800492a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800492e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004930:	2302      	movs	r3, #2
 8004932:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004934:	2300      	movs	r3, #0
 8004936:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004938:	2303      	movs	r3, #3
 800493a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800493c:	2307      	movs	r3, #7
 800493e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004940:	f107 031c 	add.w	r3, r7, #28
 8004944:	4619      	mov	r1, r3
 8004946:	481f      	ldr	r0, [pc, #124]	@ (80049c4 <HAL_UART_MspInit+0xf4>)
 8004948:	f002 f998 	bl	8006c7c <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 800494c:	e031      	b.n	80049b2 <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART3)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a1d      	ldr	r2, [pc, #116]	@ (80049c8 <HAL_UART_MspInit+0xf8>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d12c      	bne.n	80049b2 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004958:	2300      	movs	r3, #0
 800495a:	613b      	str	r3, [r7, #16]
 800495c:	4b18      	ldr	r3, [pc, #96]	@ (80049c0 <HAL_UART_MspInit+0xf0>)
 800495e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004960:	4a17      	ldr	r2, [pc, #92]	@ (80049c0 <HAL_UART_MspInit+0xf0>)
 8004962:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004966:	6413      	str	r3, [r2, #64]	@ 0x40
 8004968:	4b15      	ldr	r3, [pc, #84]	@ (80049c0 <HAL_UART_MspInit+0xf0>)
 800496a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800496c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004970:	613b      	str	r3, [r7, #16]
 8004972:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004974:	2300      	movs	r3, #0
 8004976:	60fb      	str	r3, [r7, #12]
 8004978:	4b11      	ldr	r3, [pc, #68]	@ (80049c0 <HAL_UART_MspInit+0xf0>)
 800497a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800497c:	4a10      	ldr	r2, [pc, #64]	@ (80049c0 <HAL_UART_MspInit+0xf0>)
 800497e:	f043 0308 	orr.w	r3, r3, #8
 8004982:	6313      	str	r3, [r2, #48]	@ 0x30
 8004984:	4b0e      	ldr	r3, [pc, #56]	@ (80049c0 <HAL_UART_MspInit+0xf0>)
 8004986:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004988:	f003 0308 	and.w	r3, r3, #8
 800498c:	60fb      	str	r3, [r7, #12]
 800498e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004990:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004994:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004996:	2302      	movs	r3, #2
 8004998:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800499a:	2300      	movs	r3, #0
 800499c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800499e:	2303      	movs	r3, #3
 80049a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80049a2:	2307      	movs	r3, #7
 80049a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80049a6:	f107 031c 	add.w	r3, r7, #28
 80049aa:	4619      	mov	r1, r3
 80049ac:	4807      	ldr	r0, [pc, #28]	@ (80049cc <HAL_UART_MspInit+0xfc>)
 80049ae:	f002 f965 	bl	8006c7c <HAL_GPIO_Init>
}
 80049b2:	bf00      	nop
 80049b4:	3730      	adds	r7, #48	@ 0x30
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}
 80049ba:	bf00      	nop
 80049bc:	40011000 	.word	0x40011000
 80049c0:	40023800 	.word	0x40023800
 80049c4:	40020000 	.word	0x40020000
 80049c8:	40004800 	.word	0x40004800
 80049cc:	40020c00 	.word	0x40020c00

080049d0 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b08a      	sub	sp, #40	@ 0x28
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049d8:	f107 0314 	add.w	r3, r7, #20
 80049dc:	2200      	movs	r2, #0
 80049de:	601a      	str	r2, [r3, #0]
 80049e0:	605a      	str	r2, [r3, #4]
 80049e2:	609a      	str	r2, [r3, #8]
 80049e4:	60da      	str	r2, [r3, #12]
 80049e6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80049f0:	d132      	bne.n	8004a58 <HAL_PCD_MspInit+0x88>
  {
    /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

    /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80049f2:	2300      	movs	r3, #0
 80049f4:	613b      	str	r3, [r7, #16]
 80049f6:	4b1a      	ldr	r3, [pc, #104]	@ (8004a60 <HAL_PCD_MspInit+0x90>)
 80049f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049fa:	4a19      	ldr	r2, [pc, #100]	@ (8004a60 <HAL_PCD_MspInit+0x90>)
 80049fc:	f043 0301 	orr.w	r3, r3, #1
 8004a00:	6313      	str	r3, [r2, #48]	@ 0x30
 8004a02:	4b17      	ldr	r3, [pc, #92]	@ (8004a60 <HAL_PCD_MspInit+0x90>)
 8004a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a06:	f003 0301 	and.w	r3, r3, #1
 8004a0a:	613b      	str	r3, [r7, #16]
 8004a0c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8004a0e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8004a12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a14:	2302      	movs	r3, #2
 8004a16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a1c:	2303      	movs	r3, #3
 8004a1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8004a20:	230a      	movs	r3, #10
 8004a22:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a24:	f107 0314 	add.w	r3, r7, #20
 8004a28:	4619      	mov	r1, r3
 8004a2a:	480e      	ldr	r0, [pc, #56]	@ (8004a64 <HAL_PCD_MspInit+0x94>)
 8004a2c:	f002 f926 	bl	8006c7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8004a30:	4b0b      	ldr	r3, [pc, #44]	@ (8004a60 <HAL_PCD_MspInit+0x90>)
 8004a32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a34:	4a0a      	ldr	r2, [pc, #40]	@ (8004a60 <HAL_PCD_MspInit+0x90>)
 8004a36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a3a:	6353      	str	r3, [r2, #52]	@ 0x34
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	60fb      	str	r3, [r7, #12]
 8004a40:	4b07      	ldr	r3, [pc, #28]	@ (8004a60 <HAL_PCD_MspInit+0x90>)
 8004a42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a44:	4a06      	ldr	r2, [pc, #24]	@ (8004a60 <HAL_PCD_MspInit+0x90>)
 8004a46:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004a4a:	6453      	str	r3, [r2, #68]	@ 0x44
 8004a4c:	4b04      	ldr	r3, [pc, #16]	@ (8004a60 <HAL_PCD_MspInit+0x90>)
 8004a4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a50:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a54:	60fb      	str	r3, [r7, #12]
 8004a56:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8004a58:	bf00      	nop
 8004a5a:	3728      	adds	r7, #40	@ 0x28
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}
 8004a60:	40023800 	.word	0x40023800
 8004a64:	40020000 	.word	0x40020000

08004a68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004a6c:	bf00      	nop
 8004a6e:	e7fd      	b.n	8004a6c <NMI_Handler+0x4>

08004a70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004a70:	b480      	push	{r7}
 8004a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004a74:	bf00      	nop
 8004a76:	e7fd      	b.n	8004a74 <HardFault_Handler+0x4>

08004a78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004a7c:	bf00      	nop
 8004a7e:	e7fd      	b.n	8004a7c <MemManage_Handler+0x4>

08004a80 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004a80:	b480      	push	{r7}
 8004a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004a84:	bf00      	nop
 8004a86:	e7fd      	b.n	8004a84 <BusFault_Handler+0x4>

08004a88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004a8c:	bf00      	nop
 8004a8e:	e7fd      	b.n	8004a8c <UsageFault_Handler+0x4>

08004a90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004a90:	b480      	push	{r7}
 8004a92:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004a94:	bf00      	nop
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr

08004a9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004a9e:	b480      	push	{r7}
 8004aa0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004aa2:	bf00      	nop
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr

08004aac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004aac:	b480      	push	{r7}
 8004aae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004ab0:	bf00      	nop
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr

08004aba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004aba:	b580      	push	{r7, lr}
 8004abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004abe:	f000 fa7b 	bl	8004fb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004ac2:	bf00      	nop
 8004ac4:	bd80      	pop	{r7, pc}
	...

08004ac8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004acc:	4804      	ldr	r0, [pc, #16]	@ (8004ae0 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8004ace:	f003 fb61 	bl	8008194 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */
  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_9);
 8004ad2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004ad6:	4803      	ldr	r0, [pc, #12]	@ (8004ae4 <TIM1_UP_TIM10_IRQHandler+0x1c>)
 8004ad8:	f002 fa85 	bl	8006fe6 <HAL_GPIO_TogglePin>
  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004adc:	bf00      	nop
 8004ade:	bd80      	pop	{r7, pc}
 8004ae0:	20001cb0 	.word	0x20001cb0
 8004ae4:	40021000 	.word	0x40021000

08004ae8 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8004aec:	4802      	ldr	r0, [pc, #8]	@ (8004af8 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8004aee:	f003 fb51 	bl	8008194 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8004af2:	bf00      	nop
 8004af4:	bd80      	pop	{r7, pc}
 8004af6:	bf00      	nop
 8004af8:	20001d40 	.word	0x20001d40

08004afc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004afc:	b480      	push	{r7}
 8004afe:	af00      	add	r7, sp, #0
  return 1;
 8004b00:	2301      	movs	r3, #1
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr

08004b0c <_kill>:

int _kill(int pid, int sig)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004b16:	4b05      	ldr	r3, [pc, #20]	@ (8004b2c <_kill+0x20>)
 8004b18:	2216      	movs	r2, #22
 8004b1a:	601a      	str	r2, [r3, #0]
  return -1;
 8004b1c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	370c      	adds	r7, #12
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr
 8004b2c:	200094dc 	.word	0x200094dc

08004b30 <_exit>:

void _exit (int status)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b082      	sub	sp, #8
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004b38:	f04f 31ff 	mov.w	r1, #4294967295
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f7ff ffe5 	bl	8004b0c <_kill>
  while (1) {}    /* Make sure we hang here */
 8004b42:	bf00      	nop
 8004b44:	e7fd      	b.n	8004b42 <_exit+0x12>

08004b46 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004b46:	b580      	push	{r7, lr}
 8004b48:	b086      	sub	sp, #24
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	60f8      	str	r0, [r7, #12]
 8004b4e:	60b9      	str	r1, [r7, #8]
 8004b50:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b52:	2300      	movs	r3, #0
 8004b54:	617b      	str	r3, [r7, #20]
 8004b56:	e00a      	b.n	8004b6e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004b58:	f3af 8000 	nop.w
 8004b5c:	4601      	mov	r1, r0
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	1c5a      	adds	r2, r3, #1
 8004b62:	60ba      	str	r2, [r7, #8]
 8004b64:	b2ca      	uxtb	r2, r1
 8004b66:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	3301      	adds	r3, #1
 8004b6c:	617b      	str	r3, [r7, #20]
 8004b6e:	697a      	ldr	r2, [r7, #20]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	429a      	cmp	r2, r3
 8004b74:	dbf0      	blt.n	8004b58 <_read+0x12>
  }

  return len;
 8004b76:	687b      	ldr	r3, [r7, #4]
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3718      	adds	r7, #24
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}

08004b80 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b086      	sub	sp, #24
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	60f8      	str	r0, [r7, #12]
 8004b88:	60b9      	str	r1, [r7, #8]
 8004b8a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	617b      	str	r3, [r7, #20]
 8004b90:	e009      	b.n	8004ba6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	1c5a      	adds	r2, r3, #1
 8004b96:	60ba      	str	r2, [r7, #8]
 8004b98:	781b      	ldrb	r3, [r3, #0]
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	3301      	adds	r3, #1
 8004ba4:	617b      	str	r3, [r7, #20]
 8004ba6:	697a      	ldr	r2, [r7, #20]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	429a      	cmp	r2, r3
 8004bac:	dbf1      	blt.n	8004b92 <_write+0x12>
  }
  return len;
 8004bae:	687b      	ldr	r3, [r7, #4]
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3718      	adds	r7, #24
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}

08004bb8 <_close>:

int _close(int file)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b083      	sub	sp, #12
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004bc0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	370c      	adds	r7, #12
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr

08004bd0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b083      	sub	sp, #12
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004be0:	605a      	str	r2, [r3, #4]
  return 0;
 8004be2:	2300      	movs	r3, #0
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	370c      	adds	r7, #12
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr

08004bf0 <_isatty>:

int _isatty(int file)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b083      	sub	sp, #12
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004bf8:	2301      	movs	r3, #1
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	370c      	adds	r7, #12
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr

08004c06 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004c06:	b480      	push	{r7}
 8004c08:	b085      	sub	sp, #20
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	60f8      	str	r0, [r7, #12]
 8004c0e:	60b9      	str	r1, [r7, #8]
 8004c10:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004c12:	2300      	movs	r3, #0
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	3714      	adds	r7, #20
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr

08004c20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b087      	sub	sp, #28
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004c28:	4a14      	ldr	r2, [pc, #80]	@ (8004c7c <_sbrk+0x5c>)
 8004c2a:	4b15      	ldr	r3, [pc, #84]	@ (8004c80 <_sbrk+0x60>)
 8004c2c:	1ad3      	subs	r3, r2, r3
 8004c2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004c34:	4b13      	ldr	r3, [pc, #76]	@ (8004c84 <_sbrk+0x64>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d102      	bne.n	8004c42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004c3c:	4b11      	ldr	r3, [pc, #68]	@ (8004c84 <_sbrk+0x64>)
 8004c3e:	4a12      	ldr	r2, [pc, #72]	@ (8004c88 <_sbrk+0x68>)
 8004c40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004c42:	4b10      	ldr	r3, [pc, #64]	@ (8004c84 <_sbrk+0x64>)
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	4413      	add	r3, r2
 8004c4a:	693a      	ldr	r2, [r7, #16]
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d205      	bcs.n	8004c5c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8004c50:	4b0e      	ldr	r3, [pc, #56]	@ (8004c8c <_sbrk+0x6c>)
 8004c52:	220c      	movs	r2, #12
 8004c54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004c56:	f04f 33ff 	mov.w	r3, #4294967295
 8004c5a:	e009      	b.n	8004c70 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8004c5c:	4b09      	ldr	r3, [pc, #36]	@ (8004c84 <_sbrk+0x64>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004c62:	4b08      	ldr	r3, [pc, #32]	@ (8004c84 <_sbrk+0x64>)
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4413      	add	r3, r2
 8004c6a:	4a06      	ldr	r2, [pc, #24]	@ (8004c84 <_sbrk+0x64>)
 8004c6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	371c      	adds	r7, #28
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr
 8004c7c:	20020000 	.word	0x20020000
 8004c80:	00004000 	.word	0x00004000
 8004c84:	20002650 	.word	0x20002650
 8004c88:	200094f0 	.word	0x200094f0
 8004c8c:	200094dc 	.word	0x200094dc

08004c90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004c90:	b480      	push	{r7}
 8004c92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004c94:	4b06      	ldr	r3, [pc, #24]	@ (8004cb0 <SystemInit+0x20>)
 8004c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c9a:	4a05      	ldr	r2, [pc, #20]	@ (8004cb0 <SystemInit+0x20>)
 8004c9c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004ca0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004ca4:	bf00      	nop
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr
 8004cae:	bf00      	nop
 8004cb0:	e000ed00 	.word	0xe000ed00

08004cb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004cb4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004cec <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8004cb8:	f7ff ffea 	bl	8004c90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004cbc:	480c      	ldr	r0, [pc, #48]	@ (8004cf0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004cbe:	490d      	ldr	r1, [pc, #52]	@ (8004cf4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004cc0:	4a0d      	ldr	r2, [pc, #52]	@ (8004cf8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004cc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004cc4:	e002      	b.n	8004ccc <LoopCopyDataInit>

08004cc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004cc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004cc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004cca:	3304      	adds	r3, #4

08004ccc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004ccc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004cce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004cd0:	d3f9      	bcc.n	8004cc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004cd2:	4a0a      	ldr	r2, [pc, #40]	@ (8004cfc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004cd4:	4c0a      	ldr	r4, [pc, #40]	@ (8004d00 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004cd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004cd8:	e001      	b.n	8004cde <LoopFillZerobss>

08004cda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004cda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004cdc:	3204      	adds	r2, #4

08004cde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004cde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004ce0:	d3fb      	bcc.n	8004cda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004ce2:	f011 f8d3 	bl	8015e8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004ce6:	f7fe fa77 	bl	80031d8 <main>
  bx  lr    
 8004cea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004cec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004cf0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004cf4:	20000634 	.word	0x20000634
  ldr r2, =_sidata
 8004cf8:	08021138 	.word	0x08021138
  ldr r2, =_sbss
 8004cfc:	20000638 	.word	0x20000638
  ldr r4, =_ebss
 8004d00:	200094ec 	.word	0x200094ec

08004d04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004d04:	e7fe      	b.n	8004d04 <ADC_IRQHandler>

08004d06 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8004d06:	b480      	push	{r7}
 8004d08:	b083      	sub	sp, #12
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	6078      	str	r0, [r7, #4]
 8004d0e:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d00b      	beq.n	8004d2e <LAN8742_RegisterBusIO+0x28>
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	68db      	ldr	r3, [r3, #12]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d007      	beq.n	8004d2e <LAN8742_RegisterBusIO+0x28>
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d003      	beq.n	8004d2e <LAN8742_RegisterBusIO+0x28>
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	691b      	ldr	r3, [r3, #16]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d102      	bne.n	8004d34 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8004d2e:	f04f 33ff 	mov.w	r3, #4294967295
 8004d32:	e014      	b.n	8004d5e <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	685a      	ldr	r2, [r3, #4]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	68da      	ldr	r2, [r3, #12]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	689a      	ldr	r2, [r3, #8]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	691a      	ldr	r2, [r3, #16]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8004d5c:	2300      	movs	r3, #0
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	370c      	adds	r7, #12
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr

08004d6a <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8004d6a:	b580      	push	{r7, lr}
 8004d6c:	b086      	sub	sp, #24
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8004d72:	2300      	movs	r3, #0
 8004d74:	60fb      	str	r3, [r7, #12]
 8004d76:	2300      	movs	r3, #0
 8004d78:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d139      	bne.n	8004dfa <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d002      	beq.n	8004d94 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2220      	movs	r2, #32
 8004d98:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	617b      	str	r3, [r7, #20]
 8004d9e:	e01c      	b.n	8004dda <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	695b      	ldr	r3, [r3, #20]
 8004da4:	f107 020c 	add.w	r2, r7, #12
 8004da8:	2112      	movs	r1, #18
 8004daa:	6978      	ldr	r0, [r7, #20]
 8004dac:	4798      	blx	r3
 8004dae:	4603      	mov	r3, r0
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	da03      	bge.n	8004dbc <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8004db4:	f06f 0304 	mvn.w	r3, #4
 8004db8:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8004dba:	e00b      	b.n	8004dd4 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f003 031f 	and.w	r3, r3, #31
 8004dc2:	697a      	ldr	r2, [r7, #20]
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d105      	bne.n	8004dd4 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	697a      	ldr	r2, [r7, #20]
 8004dcc:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	613b      	str	r3, [r7, #16]
         break;
 8004dd2:	e005      	b.n	8004de0 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	3301      	adds	r3, #1
 8004dd8:	617b      	str	r3, [r7, #20]
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	2b1f      	cmp	r3, #31
 8004dde:	d9df      	bls.n	8004da0 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	2b1f      	cmp	r3, #31
 8004de6:	d902      	bls.n	8004dee <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8004de8:	f06f 0302 	mvn.w	r3, #2
 8004dec:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d102      	bne.n	8004dfa <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2201      	movs	r2, #1
 8004df8:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8004dfa:	693b      	ldr	r3, [r7, #16]
 }
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3718      	adds	r7, #24
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}

08004e04 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b084      	sub	sp, #16
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	695b      	ldr	r3, [r3, #20]
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	6810      	ldr	r0, [r2, #0]
 8004e18:	f107 020c 	add.w	r2, r7, #12
 8004e1c:	2101      	movs	r1, #1
 8004e1e:	4798      	blx	r3
 8004e20:	4603      	mov	r3, r0
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	da02      	bge.n	8004e2c <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8004e26:	f06f 0304 	mvn.w	r3, #4
 8004e2a:	e06e      	b.n	8004f0a <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	695b      	ldr	r3, [r3, #20]
 8004e30:	687a      	ldr	r2, [r7, #4]
 8004e32:	6810      	ldr	r0, [r2, #0]
 8004e34:	f107 020c 	add.w	r2, r7, #12
 8004e38:	2101      	movs	r1, #1
 8004e3a:	4798      	blx	r3
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	da02      	bge.n	8004e48 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8004e42:	f06f 0304 	mvn.w	r3, #4
 8004e46:	e060      	b.n	8004f0a <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f003 0304 	and.w	r3, r3, #4
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d101      	bne.n	8004e56 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8004e52:	2301      	movs	r3, #1
 8004e54:	e059      	b.n	8004f0a <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	695b      	ldr	r3, [r3, #20]
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	6810      	ldr	r0, [r2, #0]
 8004e5e:	f107 020c 	add.w	r2, r7, #12
 8004e62:	2100      	movs	r1, #0
 8004e64:	4798      	blx	r3
 8004e66:	4603      	mov	r3, r0
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	da02      	bge.n	8004e72 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8004e6c:	f06f 0304 	mvn.w	r3, #4
 8004e70:	e04b      	b.n	8004f0a <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d11b      	bne.n	8004eb4 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d006      	beq.n	8004e94 <LAN8742_GetLinkState+0x90>
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d001      	beq.n	8004e94 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8004e90:	2302      	movs	r3, #2
 8004e92:	e03a      	b.n	8004f0a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d001      	beq.n	8004ea2 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8004e9e:	2303      	movs	r3, #3
 8004ea0:	e033      	b.n	8004f0a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d001      	beq.n	8004eb0 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8004eac:	2304      	movs	r3, #4
 8004eae:	e02c      	b.n	8004f0a <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8004eb0:	2305      	movs	r3, #5
 8004eb2:	e02a      	b.n	8004f0a <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	695b      	ldr	r3, [r3, #20]
 8004eb8:	687a      	ldr	r2, [r7, #4]
 8004eba:	6810      	ldr	r0, [r2, #0]
 8004ebc:	f107 020c 	add.w	r2, r7, #12
 8004ec0:	211f      	movs	r1, #31
 8004ec2:	4798      	blx	r3
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	da02      	bge.n	8004ed0 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8004eca:	f06f 0304 	mvn.w	r3, #4
 8004ece:	e01c      	b.n	8004f0a <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d101      	bne.n	8004ede <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8004eda:	2306      	movs	r3, #6
 8004edc:	e015      	b.n	8004f0a <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	f003 031c 	and.w	r3, r3, #28
 8004ee4:	2b18      	cmp	r3, #24
 8004ee6:	d101      	bne.n	8004eec <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8004ee8:	2302      	movs	r3, #2
 8004eea:	e00e      	b.n	8004f0a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f003 031c 	and.w	r3, r3, #28
 8004ef2:	2b08      	cmp	r3, #8
 8004ef4:	d101      	bne.n	8004efa <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8004ef6:	2303      	movs	r3, #3
 8004ef8:	e007      	b.n	8004f0a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	f003 031c 	and.w	r3, r3, #28
 8004f00:	2b14      	cmp	r3, #20
 8004f02:	d101      	bne.n	8004f08 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8004f04:	2304      	movs	r3, #4
 8004f06:	e000      	b.n	8004f0a <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8004f08:	2305      	movs	r3, #5
    }
  }
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3710      	adds	r7, #16
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}
	...

08004f14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004f18:	4b0e      	ldr	r3, [pc, #56]	@ (8004f54 <HAL_Init+0x40>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a0d      	ldr	r2, [pc, #52]	@ (8004f54 <HAL_Init+0x40>)
 8004f1e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004f22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004f24:	4b0b      	ldr	r3, [pc, #44]	@ (8004f54 <HAL_Init+0x40>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a0a      	ldr	r2, [pc, #40]	@ (8004f54 <HAL_Init+0x40>)
 8004f2a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004f2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004f30:	4b08      	ldr	r3, [pc, #32]	@ (8004f54 <HAL_Init+0x40>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a07      	ldr	r2, [pc, #28]	@ (8004f54 <HAL_Init+0x40>)
 8004f36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004f3c:	2003      	movs	r0, #3
 8004f3e:	f000 fcad 	bl	800589c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004f42:	200f      	movs	r0, #15
 8004f44:	f000 f808 	bl	8004f58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004f48:	f7ff faa6 	bl	8004498 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004f4c:	2300      	movs	r3, #0
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	bf00      	nop
 8004f54:	40023c00 	.word	0x40023c00

08004f58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b082      	sub	sp, #8
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004f60:	4b12      	ldr	r3, [pc, #72]	@ (8004fac <HAL_InitTick+0x54>)
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	4b12      	ldr	r3, [pc, #72]	@ (8004fb0 <HAL_InitTick+0x58>)
 8004f66:	781b      	ldrb	r3, [r3, #0]
 8004f68:	4619      	mov	r1, r3
 8004f6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004f6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f76:	4618      	mov	r0, r3
 8004f78:	f000 fcc5 	bl	8005906 <HAL_SYSTICK_Config>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d001      	beq.n	8004f86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	e00e      	b.n	8004fa4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2b0f      	cmp	r3, #15
 8004f8a:	d80a      	bhi.n	8004fa2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	6879      	ldr	r1, [r7, #4]
 8004f90:	f04f 30ff 	mov.w	r0, #4294967295
 8004f94:	f000 fc8d 	bl	80058b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004f98:	4a06      	ldr	r2, [pc, #24]	@ (8004fb4 <HAL_InitTick+0x5c>)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	e000      	b.n	8004fa4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3708      	adds	r7, #8
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}
 8004fac:	20000440 	.word	0x20000440
 8004fb0:	20000448 	.word	0x20000448
 8004fb4:	20000444 	.word	0x20000444

08004fb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004fbc:	4b06      	ldr	r3, [pc, #24]	@ (8004fd8 <HAL_IncTick+0x20>)
 8004fbe:	781b      	ldrb	r3, [r3, #0]
 8004fc0:	461a      	mov	r2, r3
 8004fc2:	4b06      	ldr	r3, [pc, #24]	@ (8004fdc <HAL_IncTick+0x24>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4413      	add	r3, r2
 8004fc8:	4a04      	ldr	r2, [pc, #16]	@ (8004fdc <HAL_IncTick+0x24>)
 8004fca:	6013      	str	r3, [r2, #0]
}
 8004fcc:	bf00      	nop
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr
 8004fd6:	bf00      	nop
 8004fd8:	20000448 	.word	0x20000448
 8004fdc:	20002654 	.word	0x20002654

08004fe0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	af00      	add	r7, sp, #0
  return uwTick;
 8004fe4:	4b03      	ldr	r3, [pc, #12]	@ (8004ff4 <HAL_GetTick+0x14>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr
 8004ff2:	bf00      	nop
 8004ff4:	20002654 	.word	0x20002654

08004ff8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b084      	sub	sp, #16
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005000:	f7ff ffee 	bl	8004fe0 <HAL_GetTick>
 8005004:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005010:	d005      	beq.n	800501e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005012:	4b0a      	ldr	r3, [pc, #40]	@ (800503c <HAL_Delay+0x44>)
 8005014:	781b      	ldrb	r3, [r3, #0]
 8005016:	461a      	mov	r2, r3
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	4413      	add	r3, r2
 800501c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800501e:	bf00      	nop
 8005020:	f7ff ffde 	bl	8004fe0 <HAL_GetTick>
 8005024:	4602      	mov	r2, r0
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	1ad3      	subs	r3, r2, r3
 800502a:	68fa      	ldr	r2, [r7, #12]
 800502c:	429a      	cmp	r2, r3
 800502e:	d8f7      	bhi.n	8005020 <HAL_Delay+0x28>
  {
  }
}
 8005030:	bf00      	nop
 8005032:	bf00      	nop
 8005034:	3710      	adds	r7, #16
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}
 800503a:	bf00      	nop
 800503c:	20000448 	.word	0x20000448

08005040 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b084      	sub	sp, #16
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005048:	2300      	movs	r3, #0
 800504a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d101      	bne.n	8005056 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	e033      	b.n	80050be <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800505a:	2b00      	cmp	r3, #0
 800505c:	d109      	bne.n	8005072 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f7ff fa42 	bl	80044e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2200      	movs	r2, #0
 8005068:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2200      	movs	r2, #0
 800506e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005076:	f003 0310 	and.w	r3, r3, #16
 800507a:	2b00      	cmp	r3, #0
 800507c:	d118      	bne.n	80050b0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005082:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005086:	f023 0302 	bic.w	r3, r3, #2
 800508a:	f043 0202 	orr.w	r2, r3, #2
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f000 f93a 	bl	800530c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2200      	movs	r2, #0
 800509c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050a2:	f023 0303 	bic.w	r3, r3, #3
 80050a6:	f043 0201 	orr.w	r2, r3, #1
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	641a      	str	r2, [r3, #64]	@ 0x40
 80050ae:	e001      	b.n	80050b4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2200      	movs	r2, #0
 80050b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80050bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3710      	adds	r7, #16
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
	...

080050c8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b085      	sub	sp, #20
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80050d2:	2300      	movs	r3, #0
 80050d4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d101      	bne.n	80050e4 <HAL_ADC_ConfigChannel+0x1c>
 80050e0:	2302      	movs	r3, #2
 80050e2:	e105      	b.n	80052f0 <HAL_ADC_ConfigChannel+0x228>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	2b09      	cmp	r3, #9
 80050f2:	d925      	bls.n	8005140 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	68d9      	ldr	r1, [r3, #12]
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	b29b      	uxth	r3, r3
 8005100:	461a      	mov	r2, r3
 8005102:	4613      	mov	r3, r2
 8005104:	005b      	lsls	r3, r3, #1
 8005106:	4413      	add	r3, r2
 8005108:	3b1e      	subs	r3, #30
 800510a:	2207      	movs	r2, #7
 800510c:	fa02 f303 	lsl.w	r3, r2, r3
 8005110:	43da      	mvns	r2, r3
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	400a      	ands	r2, r1
 8005118:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	68d9      	ldr	r1, [r3, #12]
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	689a      	ldr	r2, [r3, #8]
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	b29b      	uxth	r3, r3
 800512a:	4618      	mov	r0, r3
 800512c:	4603      	mov	r3, r0
 800512e:	005b      	lsls	r3, r3, #1
 8005130:	4403      	add	r3, r0
 8005132:	3b1e      	subs	r3, #30
 8005134:	409a      	lsls	r2, r3
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	430a      	orrs	r2, r1
 800513c:	60da      	str	r2, [r3, #12]
 800513e:	e022      	b.n	8005186 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	6919      	ldr	r1, [r3, #16]
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	b29b      	uxth	r3, r3
 800514c:	461a      	mov	r2, r3
 800514e:	4613      	mov	r3, r2
 8005150:	005b      	lsls	r3, r3, #1
 8005152:	4413      	add	r3, r2
 8005154:	2207      	movs	r2, #7
 8005156:	fa02 f303 	lsl.w	r3, r2, r3
 800515a:	43da      	mvns	r2, r3
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	400a      	ands	r2, r1
 8005162:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	6919      	ldr	r1, [r3, #16]
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	689a      	ldr	r2, [r3, #8]
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	b29b      	uxth	r3, r3
 8005174:	4618      	mov	r0, r3
 8005176:	4603      	mov	r3, r0
 8005178:	005b      	lsls	r3, r3, #1
 800517a:	4403      	add	r3, r0
 800517c:	409a      	lsls	r2, r3
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	430a      	orrs	r2, r1
 8005184:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	2b06      	cmp	r3, #6
 800518c:	d824      	bhi.n	80051d8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	685a      	ldr	r2, [r3, #4]
 8005198:	4613      	mov	r3, r2
 800519a:	009b      	lsls	r3, r3, #2
 800519c:	4413      	add	r3, r2
 800519e:	3b05      	subs	r3, #5
 80051a0:	221f      	movs	r2, #31
 80051a2:	fa02 f303 	lsl.w	r3, r2, r3
 80051a6:	43da      	mvns	r2, r3
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	400a      	ands	r2, r1
 80051ae:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	b29b      	uxth	r3, r3
 80051bc:	4618      	mov	r0, r3
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	685a      	ldr	r2, [r3, #4]
 80051c2:	4613      	mov	r3, r2
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	4413      	add	r3, r2
 80051c8:	3b05      	subs	r3, #5
 80051ca:	fa00 f203 	lsl.w	r2, r0, r3
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	430a      	orrs	r2, r1
 80051d4:	635a      	str	r2, [r3, #52]	@ 0x34
 80051d6:	e04c      	b.n	8005272 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	2b0c      	cmp	r3, #12
 80051de:	d824      	bhi.n	800522a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	685a      	ldr	r2, [r3, #4]
 80051ea:	4613      	mov	r3, r2
 80051ec:	009b      	lsls	r3, r3, #2
 80051ee:	4413      	add	r3, r2
 80051f0:	3b23      	subs	r3, #35	@ 0x23
 80051f2:	221f      	movs	r2, #31
 80051f4:	fa02 f303 	lsl.w	r3, r2, r3
 80051f8:	43da      	mvns	r2, r3
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	400a      	ands	r2, r1
 8005200:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	b29b      	uxth	r3, r3
 800520e:	4618      	mov	r0, r3
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	685a      	ldr	r2, [r3, #4]
 8005214:	4613      	mov	r3, r2
 8005216:	009b      	lsls	r3, r3, #2
 8005218:	4413      	add	r3, r2
 800521a:	3b23      	subs	r3, #35	@ 0x23
 800521c:	fa00 f203 	lsl.w	r2, r0, r3
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	430a      	orrs	r2, r1
 8005226:	631a      	str	r2, [r3, #48]	@ 0x30
 8005228:	e023      	b.n	8005272 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	685a      	ldr	r2, [r3, #4]
 8005234:	4613      	mov	r3, r2
 8005236:	009b      	lsls	r3, r3, #2
 8005238:	4413      	add	r3, r2
 800523a:	3b41      	subs	r3, #65	@ 0x41
 800523c:	221f      	movs	r2, #31
 800523e:	fa02 f303 	lsl.w	r3, r2, r3
 8005242:	43da      	mvns	r2, r3
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	400a      	ands	r2, r1
 800524a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	b29b      	uxth	r3, r3
 8005258:	4618      	mov	r0, r3
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	685a      	ldr	r2, [r3, #4]
 800525e:	4613      	mov	r3, r2
 8005260:	009b      	lsls	r3, r3, #2
 8005262:	4413      	add	r3, r2
 8005264:	3b41      	subs	r3, #65	@ 0x41
 8005266:	fa00 f203 	lsl.w	r2, r0, r3
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	430a      	orrs	r2, r1
 8005270:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005272:	4b22      	ldr	r3, [pc, #136]	@ (80052fc <HAL_ADC_ConfigChannel+0x234>)
 8005274:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a21      	ldr	r2, [pc, #132]	@ (8005300 <HAL_ADC_ConfigChannel+0x238>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d109      	bne.n	8005294 <HAL_ADC_ConfigChannel+0x1cc>
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	2b12      	cmp	r3, #18
 8005286:	d105      	bne.n	8005294 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a19      	ldr	r2, [pc, #100]	@ (8005300 <HAL_ADC_ConfigChannel+0x238>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d123      	bne.n	80052e6 <HAL_ADC_ConfigChannel+0x21e>
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	2b10      	cmp	r3, #16
 80052a4:	d003      	beq.n	80052ae <HAL_ADC_ConfigChannel+0x1e6>
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	2b11      	cmp	r3, #17
 80052ac:	d11b      	bne.n	80052e6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	2b10      	cmp	r3, #16
 80052c0:	d111      	bne.n	80052e6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80052c2:	4b10      	ldr	r3, [pc, #64]	@ (8005304 <HAL_ADC_ConfigChannel+0x23c>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a10      	ldr	r2, [pc, #64]	@ (8005308 <HAL_ADC_ConfigChannel+0x240>)
 80052c8:	fba2 2303 	umull	r2, r3, r2, r3
 80052cc:	0c9a      	lsrs	r2, r3, #18
 80052ce:	4613      	mov	r3, r2
 80052d0:	009b      	lsls	r3, r3, #2
 80052d2:	4413      	add	r3, r2
 80052d4:	005b      	lsls	r3, r3, #1
 80052d6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80052d8:	e002      	b.n	80052e0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	3b01      	subs	r3, #1
 80052de:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d1f9      	bne.n	80052da <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80052ee:	2300      	movs	r3, #0
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3714      	adds	r7, #20
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr
 80052fc:	40012300 	.word	0x40012300
 8005300:	40012000 	.word	0x40012000
 8005304:	20000440 	.word	0x20000440
 8005308:	431bde83 	.word	0x431bde83

0800530c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800530c:	b480      	push	{r7}
 800530e:	b085      	sub	sp, #20
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005314:	4b79      	ldr	r3, [pc, #484]	@ (80054fc <ADC_Init+0x1f0>)
 8005316:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	685a      	ldr	r2, [r3, #4]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	431a      	orrs	r2, r3
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	685a      	ldr	r2, [r3, #4]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005340:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	6859      	ldr	r1, [r3, #4]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	691b      	ldr	r3, [r3, #16]
 800534c:	021a      	lsls	r2, r3, #8
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	430a      	orrs	r2, r1
 8005354:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	685a      	ldr	r2, [r3, #4]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8005364:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	6859      	ldr	r1, [r3, #4]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	689a      	ldr	r2, [r3, #8]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	430a      	orrs	r2, r1
 8005376:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	689a      	ldr	r2, [r3, #8]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005386:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	6899      	ldr	r1, [r3, #8]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	68da      	ldr	r2, [r3, #12]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	430a      	orrs	r2, r1
 8005398:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800539e:	4a58      	ldr	r2, [pc, #352]	@ (8005500 <ADC_Init+0x1f4>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d022      	beq.n	80053ea <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	689a      	ldr	r2, [r3, #8]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80053b2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	6899      	ldr	r1, [r3, #8]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	430a      	orrs	r2, r1
 80053c4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	689a      	ldr	r2, [r3, #8]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80053d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	6899      	ldr	r1, [r3, #8]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	430a      	orrs	r2, r1
 80053e6:	609a      	str	r2, [r3, #8]
 80053e8:	e00f      	b.n	800540a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	689a      	ldr	r2, [r3, #8]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80053f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	689a      	ldr	r2, [r3, #8]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005408:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	689a      	ldr	r2, [r3, #8]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f022 0202 	bic.w	r2, r2, #2
 8005418:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	6899      	ldr	r1, [r3, #8]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	7e1b      	ldrb	r3, [r3, #24]
 8005424:	005a      	lsls	r2, r3, #1
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	430a      	orrs	r2, r1
 800542c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d01b      	beq.n	8005470 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	685a      	ldr	r2, [r3, #4]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005446:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	685a      	ldr	r2, [r3, #4]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8005456:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	6859      	ldr	r1, [r3, #4]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005462:	3b01      	subs	r3, #1
 8005464:	035a      	lsls	r2, r3, #13
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	430a      	orrs	r2, r1
 800546c:	605a      	str	r2, [r3, #4]
 800546e:	e007      	b.n	8005480 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	685a      	ldr	r2, [r3, #4]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800547e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800548e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	69db      	ldr	r3, [r3, #28]
 800549a:	3b01      	subs	r3, #1
 800549c:	051a      	lsls	r2, r3, #20
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	430a      	orrs	r2, r1
 80054a4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	689a      	ldr	r2, [r3, #8]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80054b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	6899      	ldr	r1, [r3, #8]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80054c2:	025a      	lsls	r2, r3, #9
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	430a      	orrs	r2, r1
 80054ca:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	689a      	ldr	r2, [r3, #8]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80054da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	6899      	ldr	r1, [r3, #8]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	695b      	ldr	r3, [r3, #20]
 80054e6:	029a      	lsls	r2, r3, #10
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	430a      	orrs	r2, r1
 80054ee:	609a      	str	r2, [r3, #8]
}
 80054f0:	bf00      	nop
 80054f2:	3714      	adds	r7, #20
 80054f4:	46bd      	mov	sp, r7
 80054f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fa:	4770      	bx	lr
 80054fc:	40012300 	.word	0x40012300
 8005500:	0f000001 	.word	0x0f000001

08005504 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b084      	sub	sp, #16
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d101      	bne.n	8005516 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	e0ed      	b.n	80056f2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f893 3020 	ldrb.w	r3, [r3, #32]
 800551c:	b2db      	uxtb	r3, r3
 800551e:	2b00      	cmp	r3, #0
 8005520:	d102      	bne.n	8005528 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f7ff f824 	bl	8004570 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f042 0201 	orr.w	r2, r2, #1
 8005536:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005538:	f7ff fd52 	bl	8004fe0 <HAL_GetTick>
 800553c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800553e:	e012      	b.n	8005566 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005540:	f7ff fd4e 	bl	8004fe0 <HAL_GetTick>
 8005544:	4602      	mov	r2, r0
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	1ad3      	subs	r3, r2, r3
 800554a:	2b0a      	cmp	r3, #10
 800554c:	d90b      	bls.n	8005566 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005552:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2205      	movs	r2, #5
 800555e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	e0c5      	b.n	80056f2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	f003 0301 	and.w	r3, r3, #1
 8005570:	2b00      	cmp	r3, #0
 8005572:	d0e5      	beq.n	8005540 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f022 0202 	bic.w	r2, r2, #2
 8005582:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005584:	f7ff fd2c 	bl	8004fe0 <HAL_GetTick>
 8005588:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800558a:	e012      	b.n	80055b2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800558c:	f7ff fd28 	bl	8004fe0 <HAL_GetTick>
 8005590:	4602      	mov	r2, r0
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	1ad3      	subs	r3, r2, r3
 8005596:	2b0a      	cmp	r3, #10
 8005598:	d90b      	bls.n	80055b2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800559e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2205      	movs	r2, #5
 80055aa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	e09f      	b.n	80056f2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	f003 0302 	and.w	r3, r3, #2
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d1e5      	bne.n	800558c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	7e1b      	ldrb	r3, [r3, #24]
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d108      	bne.n	80055da <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	681a      	ldr	r2, [r3, #0]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80055d6:	601a      	str	r2, [r3, #0]
 80055d8:	e007      	b.n	80055ea <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	681a      	ldr	r2, [r3, #0]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80055e8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	7e5b      	ldrb	r3, [r3, #25]
 80055ee:	2b01      	cmp	r3, #1
 80055f0:	d108      	bne.n	8005604 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005600:	601a      	str	r2, [r3, #0]
 8005602:	e007      	b.n	8005614 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005612:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	7e9b      	ldrb	r3, [r3, #26]
 8005618:	2b01      	cmp	r3, #1
 800561a:	d108      	bne.n	800562e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f042 0220 	orr.w	r2, r2, #32
 800562a:	601a      	str	r2, [r3, #0]
 800562c:	e007      	b.n	800563e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	681a      	ldr	r2, [r3, #0]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f022 0220 	bic.w	r2, r2, #32
 800563c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	7edb      	ldrb	r3, [r3, #27]
 8005642:	2b01      	cmp	r3, #1
 8005644:	d108      	bne.n	8005658 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f022 0210 	bic.w	r2, r2, #16
 8005654:	601a      	str	r2, [r3, #0]
 8005656:	e007      	b.n	8005668 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f042 0210 	orr.w	r2, r2, #16
 8005666:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	7f1b      	ldrb	r3, [r3, #28]
 800566c:	2b01      	cmp	r3, #1
 800566e:	d108      	bne.n	8005682 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f042 0208 	orr.w	r2, r2, #8
 800567e:	601a      	str	r2, [r3, #0]
 8005680:	e007      	b.n	8005692 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f022 0208 	bic.w	r2, r2, #8
 8005690:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	7f5b      	ldrb	r3, [r3, #29]
 8005696:	2b01      	cmp	r3, #1
 8005698:	d108      	bne.n	80056ac <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f042 0204 	orr.w	r2, r2, #4
 80056a8:	601a      	str	r2, [r3, #0]
 80056aa:	e007      	b.n	80056bc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f022 0204 	bic.w	r2, r2, #4
 80056ba:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	689a      	ldr	r2, [r3, #8]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	68db      	ldr	r3, [r3, #12]
 80056c4:	431a      	orrs	r2, r3
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	691b      	ldr	r3, [r3, #16]
 80056ca:	431a      	orrs	r2, r3
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	695b      	ldr	r3, [r3, #20]
 80056d0:	ea42 0103 	orr.w	r1, r2, r3
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	1e5a      	subs	r2, r3, #1
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	430a      	orrs	r2, r1
 80056e0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2200      	movs	r2, #0
 80056e6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2201      	movs	r2, #1
 80056ec:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80056f0:	2300      	movs	r3, #0
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3710      	adds	r7, #16
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}
	...

080056fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b085      	sub	sp, #20
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f003 0307 	and.w	r3, r3, #7
 800570a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800570c:	4b0c      	ldr	r3, [pc, #48]	@ (8005740 <__NVIC_SetPriorityGrouping+0x44>)
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005712:	68ba      	ldr	r2, [r7, #8]
 8005714:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005718:	4013      	ands	r3, r2
 800571a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005724:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005728:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800572c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800572e:	4a04      	ldr	r2, [pc, #16]	@ (8005740 <__NVIC_SetPriorityGrouping+0x44>)
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	60d3      	str	r3, [r2, #12]
}
 8005734:	bf00      	nop
 8005736:	3714      	adds	r7, #20
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr
 8005740:	e000ed00 	.word	0xe000ed00

08005744 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005744:	b480      	push	{r7}
 8005746:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005748:	4b04      	ldr	r3, [pc, #16]	@ (800575c <__NVIC_GetPriorityGrouping+0x18>)
 800574a:	68db      	ldr	r3, [r3, #12]
 800574c:	0a1b      	lsrs	r3, r3, #8
 800574e:	f003 0307 	and.w	r3, r3, #7
}
 8005752:	4618      	mov	r0, r3
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr
 800575c:	e000ed00 	.word	0xe000ed00

08005760 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005760:	b480      	push	{r7}
 8005762:	b083      	sub	sp, #12
 8005764:	af00      	add	r7, sp, #0
 8005766:	4603      	mov	r3, r0
 8005768:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800576a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800576e:	2b00      	cmp	r3, #0
 8005770:	db0b      	blt.n	800578a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005772:	79fb      	ldrb	r3, [r7, #7]
 8005774:	f003 021f 	and.w	r2, r3, #31
 8005778:	4907      	ldr	r1, [pc, #28]	@ (8005798 <__NVIC_EnableIRQ+0x38>)
 800577a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800577e:	095b      	lsrs	r3, r3, #5
 8005780:	2001      	movs	r0, #1
 8005782:	fa00 f202 	lsl.w	r2, r0, r2
 8005786:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800578a:	bf00      	nop
 800578c:	370c      	adds	r7, #12
 800578e:	46bd      	mov	sp, r7
 8005790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005794:	4770      	bx	lr
 8005796:	bf00      	nop
 8005798:	e000e100 	.word	0xe000e100

0800579c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800579c:	b480      	push	{r7}
 800579e:	b083      	sub	sp, #12
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	4603      	mov	r3, r0
 80057a4:	6039      	str	r1, [r7, #0]
 80057a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80057a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	db0a      	blt.n	80057c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	b2da      	uxtb	r2, r3
 80057b4:	490c      	ldr	r1, [pc, #48]	@ (80057e8 <__NVIC_SetPriority+0x4c>)
 80057b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057ba:	0112      	lsls	r2, r2, #4
 80057bc:	b2d2      	uxtb	r2, r2
 80057be:	440b      	add	r3, r1
 80057c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80057c4:	e00a      	b.n	80057dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	b2da      	uxtb	r2, r3
 80057ca:	4908      	ldr	r1, [pc, #32]	@ (80057ec <__NVIC_SetPriority+0x50>)
 80057cc:	79fb      	ldrb	r3, [r7, #7]
 80057ce:	f003 030f 	and.w	r3, r3, #15
 80057d2:	3b04      	subs	r3, #4
 80057d4:	0112      	lsls	r2, r2, #4
 80057d6:	b2d2      	uxtb	r2, r2
 80057d8:	440b      	add	r3, r1
 80057da:	761a      	strb	r2, [r3, #24]
}
 80057dc:	bf00      	nop
 80057de:	370c      	adds	r7, #12
 80057e0:	46bd      	mov	sp, r7
 80057e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e6:	4770      	bx	lr
 80057e8:	e000e100 	.word	0xe000e100
 80057ec:	e000ed00 	.word	0xe000ed00

080057f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b089      	sub	sp, #36	@ 0x24
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	60f8      	str	r0, [r7, #12]
 80057f8:	60b9      	str	r1, [r7, #8]
 80057fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f003 0307 	and.w	r3, r3, #7
 8005802:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005804:	69fb      	ldr	r3, [r7, #28]
 8005806:	f1c3 0307 	rsb	r3, r3, #7
 800580a:	2b04      	cmp	r3, #4
 800580c:	bf28      	it	cs
 800580e:	2304      	movcs	r3, #4
 8005810:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005812:	69fb      	ldr	r3, [r7, #28]
 8005814:	3304      	adds	r3, #4
 8005816:	2b06      	cmp	r3, #6
 8005818:	d902      	bls.n	8005820 <NVIC_EncodePriority+0x30>
 800581a:	69fb      	ldr	r3, [r7, #28]
 800581c:	3b03      	subs	r3, #3
 800581e:	e000      	b.n	8005822 <NVIC_EncodePriority+0x32>
 8005820:	2300      	movs	r3, #0
 8005822:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005824:	f04f 32ff 	mov.w	r2, #4294967295
 8005828:	69bb      	ldr	r3, [r7, #24]
 800582a:	fa02 f303 	lsl.w	r3, r2, r3
 800582e:	43da      	mvns	r2, r3
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	401a      	ands	r2, r3
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005838:	f04f 31ff 	mov.w	r1, #4294967295
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	fa01 f303 	lsl.w	r3, r1, r3
 8005842:	43d9      	mvns	r1, r3
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005848:	4313      	orrs	r3, r2
         );
}
 800584a:	4618      	mov	r0, r3
 800584c:	3724      	adds	r7, #36	@ 0x24
 800584e:	46bd      	mov	sp, r7
 8005850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005854:	4770      	bx	lr
	...

08005858 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b082      	sub	sp, #8
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	3b01      	subs	r3, #1
 8005864:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005868:	d301      	bcc.n	800586e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800586a:	2301      	movs	r3, #1
 800586c:	e00f      	b.n	800588e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800586e:	4a0a      	ldr	r2, [pc, #40]	@ (8005898 <SysTick_Config+0x40>)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	3b01      	subs	r3, #1
 8005874:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005876:	210f      	movs	r1, #15
 8005878:	f04f 30ff 	mov.w	r0, #4294967295
 800587c:	f7ff ff8e 	bl	800579c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005880:	4b05      	ldr	r3, [pc, #20]	@ (8005898 <SysTick_Config+0x40>)
 8005882:	2200      	movs	r2, #0
 8005884:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005886:	4b04      	ldr	r3, [pc, #16]	@ (8005898 <SysTick_Config+0x40>)
 8005888:	2207      	movs	r2, #7
 800588a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800588c:	2300      	movs	r3, #0
}
 800588e:	4618      	mov	r0, r3
 8005890:	3708      	adds	r7, #8
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}
 8005896:	bf00      	nop
 8005898:	e000e010 	.word	0xe000e010

0800589c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b082      	sub	sp, #8
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f7ff ff29 	bl	80056fc <__NVIC_SetPriorityGrouping>
}
 80058aa:	bf00      	nop
 80058ac:	3708      	adds	r7, #8
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}

080058b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80058b2:	b580      	push	{r7, lr}
 80058b4:	b086      	sub	sp, #24
 80058b6:	af00      	add	r7, sp, #0
 80058b8:	4603      	mov	r3, r0
 80058ba:	60b9      	str	r1, [r7, #8]
 80058bc:	607a      	str	r2, [r7, #4]
 80058be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80058c0:	2300      	movs	r3, #0
 80058c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80058c4:	f7ff ff3e 	bl	8005744 <__NVIC_GetPriorityGrouping>
 80058c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80058ca:	687a      	ldr	r2, [r7, #4]
 80058cc:	68b9      	ldr	r1, [r7, #8]
 80058ce:	6978      	ldr	r0, [r7, #20]
 80058d0:	f7ff ff8e 	bl	80057f0 <NVIC_EncodePriority>
 80058d4:	4602      	mov	r2, r0
 80058d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80058da:	4611      	mov	r1, r2
 80058dc:	4618      	mov	r0, r3
 80058de:	f7ff ff5d 	bl	800579c <__NVIC_SetPriority>
}
 80058e2:	bf00      	nop
 80058e4:	3718      	adds	r7, #24
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}

080058ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80058ea:	b580      	push	{r7, lr}
 80058ec:	b082      	sub	sp, #8
 80058ee:	af00      	add	r7, sp, #0
 80058f0:	4603      	mov	r3, r0
 80058f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80058f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058f8:	4618      	mov	r0, r3
 80058fa:	f7ff ff31 	bl	8005760 <__NVIC_EnableIRQ>
}
 80058fe:	bf00      	nop
 8005900:	3708      	adds	r7, #8
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}

08005906 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005906:	b580      	push	{r7, lr}
 8005908:	b082      	sub	sp, #8
 800590a:	af00      	add	r7, sp, #0
 800590c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f7ff ffa2 	bl	8005858 <SysTick_Config>
 8005914:	4603      	mov	r3, r0
}
 8005916:	4618      	mov	r0, r3
 8005918:	3708      	adds	r7, #8
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}

0800591e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800591e:	b580      	push	{r7, lr}
 8005920:	b082      	sub	sp, #8
 8005922:	af00      	add	r7, sp, #0
 8005924:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d101      	bne.n	8005930 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800592c:	2301      	movs	r3, #1
 800592e:	e014      	b.n	800595a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	791b      	ldrb	r3, [r3, #4]
 8005934:	b2db      	uxtb	r3, r3
 8005936:	2b00      	cmp	r3, #0
 8005938:	d105      	bne.n	8005946 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2200      	movs	r2, #0
 800593e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f7fe fe5d 	bl	8004600 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2202      	movs	r2, #2
 800594a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2201      	movs	r2, #1
 8005956:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005958:	2300      	movs	r3, #0
}
 800595a:	4618      	mov	r0, r3
 800595c:	3708      	adds	r7, #8
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}

08005962 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005962:	b480      	push	{r7}
 8005964:	b089      	sub	sp, #36	@ 0x24
 8005966:	af00      	add	r7, sp, #0
 8005968:	60f8      	str	r0, [r7, #12]
 800596a:	60b9      	str	r1, [r7, #8]
 800596c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800596e:	2300      	movs	r3, #0
 8005970:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d002      	beq.n	800597e <HAL_DAC_ConfigChannel+0x1c>
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d101      	bne.n	8005982 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	e042      	b.n	8005a08 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	795b      	ldrb	r3, [r3, #5]
 8005986:	2b01      	cmp	r3, #1
 8005988:	d101      	bne.n	800598e <HAL_DAC_ConfigChannel+0x2c>
 800598a:	2302      	movs	r3, #2
 800598c:	e03c      	b.n	8005a08 <HAL_DAC_ConfigChannel+0xa6>
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2201      	movs	r2, #1
 8005992:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2202      	movs	r2, #2
 8005998:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f003 0310 	and.w	r3, r3, #16
 80059a8:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80059ac:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 80059b0:	43db      	mvns	r3, r3
 80059b2:	69ba      	ldr	r2, [r7, #24]
 80059b4:	4013      	ands	r3, r2
 80059b6:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	681a      	ldr	r2, [r3, #0]
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	4313      	orrs	r3, r2
 80059c2:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f003 0310 	and.w	r3, r3, #16
 80059ca:	697a      	ldr	r2, [r7, #20]
 80059cc:	fa02 f303 	lsl.w	r3, r2, r3
 80059d0:	69ba      	ldr	r2, [r7, #24]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	69ba      	ldr	r2, [r7, #24]
 80059dc:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	6819      	ldr	r1, [r3, #0]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f003 0310 	and.w	r3, r3, #16
 80059ea:	22c0      	movs	r2, #192	@ 0xc0
 80059ec:	fa02 f303 	lsl.w	r3, r2, r3
 80059f0:	43da      	mvns	r2, r3
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	400a      	ands	r2, r1
 80059f8:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2201      	movs	r2, #1
 80059fe:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2200      	movs	r2, #0
 8005a04:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8005a06:	7ffb      	ldrb	r3, [r7, #31]
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3724      	adds	r7, #36	@ 0x24
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr

08005a14 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b084      	sub	sp, #16
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d101      	bne.n	8005a26 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	e08a      	b.n	8005b3c <HAL_ETH_Init+0x128>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d106      	bne.n	8005a3e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2223      	movs	r2, #35	@ 0x23
 8005a34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f004 faa5 	bl	8009f88 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a3e:	2300      	movs	r3, #0
 8005a40:	60bb      	str	r3, [r7, #8]
 8005a42:	4b40      	ldr	r3, [pc, #256]	@ (8005b44 <HAL_ETH_Init+0x130>)
 8005a44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a46:	4a3f      	ldr	r2, [pc, #252]	@ (8005b44 <HAL_ETH_Init+0x130>)
 8005a48:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005a4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8005a4e:	4b3d      	ldr	r3, [pc, #244]	@ (8005b44 <HAL_ETH_Init+0x130>)
 8005a50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a56:	60bb      	str	r3, [r7, #8]
 8005a58:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8005a5a:	4b3b      	ldr	r3, [pc, #236]	@ (8005b48 <HAL_ETH_Init+0x134>)
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	4a3a      	ldr	r2, [pc, #232]	@ (8005b48 <HAL_ETH_Init+0x134>)
 8005a60:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005a64:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8005a66:	4b38      	ldr	r3, [pc, #224]	@ (8005b48 <HAL_ETH_Init+0x134>)
 8005a68:	685a      	ldr	r2, [r3, #4]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	4936      	ldr	r1, [pc, #216]	@ (8005b48 <HAL_ETH_Init+0x134>)
 8005a70:	4313      	orrs	r3, r2
 8005a72:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8005a74:	4b34      	ldr	r3, [pc, #208]	@ (8005b48 <HAL_ETH_Init+0x134>)
 8005a76:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	687a      	ldr	r2, [r7, #4]
 8005a84:	6812      	ldr	r2, [r2, #0]
 8005a86:	f043 0301 	orr.w	r3, r3, #1
 8005a8a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005a8e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005a90:	f7ff faa6 	bl	8004fe0 <HAL_GetTick>
 8005a94:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8005a96:	e011      	b.n	8005abc <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8005a98:	f7ff faa2 	bl	8004fe0 <HAL_GetTick>
 8005a9c:	4602      	mov	r2, r0
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	1ad3      	subs	r3, r2, r3
 8005aa2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8005aa6:	d909      	bls.n	8005abc <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2204      	movs	r2, #4
 8005aac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	22e0      	movs	r2, #224	@ 0xe0
 8005ab4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	e03f      	b.n	8005b3c <HAL_ETH_Init+0x128>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f003 0301 	and.w	r3, r3, #1
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d1e4      	bne.n	8005a98 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f000 fe16 	bl	8006700 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f000 fec1 	bl	800685c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f000 ff17 	bl	800690e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	2100      	movs	r1, #0
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f000 fe7f 	bl	80067ec <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8005afc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8005b06:	687a      	ldr	r2, [r7, #4]
 8005b08:	6812      	ldr	r2, [r2, #0]
 8005b0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b0e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005b12:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8005b26:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2210      	movs	r2, #16
 8005b36:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005b3a:	2300      	movs	r3, #0
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3710      	adds	r7, #16
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}
 8005b44:	40023800 	.word	0x40023800
 8005b48:	40013800 	.word	0x40013800

08005b4c <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b084      	sub	sp, #16
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b5a:	2b10      	cmp	r3, #16
 8005b5c:	d150      	bne.n	8005c00 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2223      	movs	r2, #35	@ 0x23
 8005b62:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2204      	movs	r2, #4
 8005b6a:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f000 f9f8 	bl	8005f62 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f042 0208 	orr.w	r2, r2, #8
 8005b80:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8005b8a:	2001      	movs	r0, #1
 8005b8c:	f7ff fa34 	bl	8004ff8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	68fa      	ldr	r2, [r7, #12]
 8005b96:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	681a      	ldr	r2, [r3, #0]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f042 0204 	orr.w	r2, r2, #4
 8005ba6:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8005bb0:	2001      	movs	r0, #1
 8005bb2:	f7ff fa21 	bl	8004ff8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	68fa      	ldr	r2, [r7, #12]
 8005bbc:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f000 fc3a 	bl	8006438 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005bcc:	699b      	ldr	r3, [r3, #24]
 8005bce:	687a      	ldr	r2, [r7, #4]
 8005bd0:	6812      	ldr	r2, [r2, #0]
 8005bd2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005bd6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005bda:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005be4:	699b      	ldr	r3, [r3, #24]
 8005be6:	687a      	ldr	r2, [r7, #4]
 8005be8:	6812      	ldr	r2, [r2, #0]
 8005bea:	f043 0302 	orr.w	r3, r3, #2
 8005bee:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005bf2:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2223      	movs	r2, #35	@ 0x23
 8005bf8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_OK;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	e000      	b.n	8005c02 <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
  }
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3710      	adds	r7, #16
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}

08005c0a <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8005c0a:	b580      	push	{r7, lr}
 8005c0c:	b084      	sub	sp, #16
 8005c0e:	af00      	add	r7, sp, #0
 8005c10:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c18:	2b23      	cmp	r3, #35	@ 0x23
 8005c1a:	d14a      	bne.n	8005cb2 <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2223      	movs	r2, #35	@ 0x23
 8005c20:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c2c:	699b      	ldr	r3, [r3, #24]
 8005c2e:	687a      	ldr	r2, [r7, #4]
 8005c30:	6812      	ldr	r2, [r2, #0]
 8005c32:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005c36:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005c3a:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c44:	699b      	ldr	r3, [r3, #24]
 8005c46:	687a      	ldr	r2, [r7, #4]
 8005c48:	6812      	ldr	r2, [r2, #0]
 8005c4a:	f023 0302 	bic.w	r3, r3, #2
 8005c4e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005c52:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	681a      	ldr	r2, [r3, #0]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f022 0204 	bic.w	r2, r2, #4
 8005c62:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8005c6c:	2001      	movs	r0, #1
 8005c6e:	f7ff f9c3 	bl	8004ff8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	68fa      	ldr	r2, [r7, #12]
 8005c78:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f000 fbdc 	bl	8006438 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	681a      	ldr	r2, [r3, #0]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f022 0208 	bic.w	r2, r2, #8
 8005c8e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8005c98:	2001      	movs	r0, #1
 8005c9a:	f7ff f9ad 	bl	8004ff8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	68fa      	ldr	r2, [r7, #12]
 8005ca4:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2210      	movs	r2, #16
 8005caa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	e000      	b.n	8005cb4 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 8005cb2:	2301      	movs	r3, #1
  }
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	3710      	adds	r7, #16
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}

08005cbc <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig, uint32_t Timeout)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b086      	sub	sp, #24
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	60f8      	str	r0, [r7, #12]
 8005cc4:	60b9      	str	r1, [r7, #8]
 8005cc6:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d109      	bne.n	8005ce2 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cd4:	f043 0201 	orr.w	r2, r3, #1
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	e07c      	b.n	8005ddc <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ce8:	2b23      	cmp	r3, #35	@ 0x23
 8005cea:	d176      	bne.n	8005dda <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8005cec:	2200      	movs	r2, #0
 8005cee:	68b9      	ldr	r1, [r7, #8]
 8005cf0:	68f8      	ldr	r0, [r7, #12]
 8005cf2:	f000 fe7b 	bl	80069ec <ETH_Prepare_Tx_Descriptors>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d009      	beq.n	8005d10 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d02:	f043 0202 	orr.w	r2, r3, #2
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	e065      	b.n	8005ddc <HAL_ETH_Transmit+0x120>
  __ASM volatile ("dsb 0xF":::"memory");
 8005d10:	f3bf 8f4f 	dsb	sy
}
 8005d14:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	3206      	adds	r2, #6
 8005d1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d22:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d28:	1c5a      	adds	r2, r3, #1
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	629a      	str	r2, [r3, #40]	@ 0x28
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d32:	2b03      	cmp	r3, #3
 8005d34:	d904      	bls.n	8005d40 <HAL_ETH_Transmit+0x84>
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d3a:	1f1a      	subs	r2, r3, #4
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681a      	ldr	r2, [r3, #0]
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	3106      	adds	r1, #6
 8005d4c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005d50:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005d54:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 8005d56:	f7ff f943 	bl	8004fe0 <HAL_GetTick>
 8005d5a:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8005d5c:	e037      	b.n	8005dce <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d66:	695b      	ldr	r3, [r3, #20]
 8005d68:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d011      	beq.n	8005d94 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d76:	f043 0208 	orr.w	r2, r3, #8
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d88:	695a      	ldr	r2, [r3, #20]
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        /* Return function status */
        return HAL_ERROR;
 8005d90:	2301      	movs	r3, #1
 8005d92:	e023      	b.n	8005ddc <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d9a:	d018      	beq.n	8005dce <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005d9c:	f7ff f920 	bl	8004fe0 <HAL_GetTick>
 8005da0:	4602      	mov	r2, r0
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	1ad3      	subs	r3, r2, r3
 8005da6:	687a      	ldr	r2, [r7, #4]
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d302      	bcc.n	8005db2 <HAL_ETH_Transmit+0xf6>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d10d      	bne.n	8005dce <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005db8:	f043 0204 	orr.w	r2, r3, #4
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8005dc8:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e006      	b.n	8005ddc <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	dbc3      	blt.n	8005d5e <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	e000      	b.n	8005ddc <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 8005dda:	2301      	movs	r3, #1
  }
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3718      	adds	r7, #24
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}

08005de4 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b088      	sub	sp, #32
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8005dee:	2300      	movs	r3, #0
 8005df0:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8005df2:	2300      	movs	r3, #0
 8005df4:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d109      	bne.n	8005e10 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e02:	f043 0201 	orr.w	r2, r3, #1
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	e0a4      	b.n	8005f5a <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e16:	2b23      	cmp	r3, #35	@ 0x23
 8005e18:	d001      	beq.n	8005e1e <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	e09d      	b.n	8005f5a <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e22:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	69fa      	ldr	r2, [r7, #28]
 8005e28:	3212      	adds	r2, #18
 8005e2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e2e:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e34:	f1c3 0304 	rsb	r3, r3, #4
 8005e38:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8005e3a:	e066      	b.n	8005f0a <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8005e3c:	69bb      	ldr	r3, [r7, #24]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d007      	beq.n	8005e58 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8005e48:	69bb      	ldr	r3, [r7, #24]
 8005e4a:	69da      	ldr	r2, [r3, #28]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8005e50:	69bb      	ldr	r3, [r7, #24]
 8005e52:	699a      	ldr	r2, [r3, #24]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8005e58:	69bb      	ldr	r3, [r7, #24]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d103      	bne.n	8005e6c <HAL_ETH_ReadData+0x88>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d03c      	beq.n	8005ee6 <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8005e6c:	69bb      	ldr	r3, [r7, #24]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d005      	beq.n	8005e84 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2200      	movs	r2, #0
 8005e82:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 8005e84:	69bb      	ldr	r3, [r7, #24]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	0c1b      	lsrs	r3, r3, #16
 8005e8a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8005e8e:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8005e90:	69bb      	ldr	r3, [r7, #24]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d005      	beq.n	8005ea8 <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8005e9c:	69bb      	ldr	r3, [r7, #24]
 8005e9e:	681a      	ldr	r2, [r3, #0]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8005ea8:	69bb      	ldr	r3, [r7, #24]
 8005eaa:	689a      	ldr	r2, [r3, #8]
 8005eac:	69bb      	ldr	r3, [r7, #24]
 8005eae:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8005ebc:	69bb      	ldr	r3, [r7, #24]
 8005ebe:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8005ec0:	461a      	mov	r2, r3
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	b29b      	uxth	r3, r3
 8005ec6:	f004 fa0f 	bl	800a2e8 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ece:	1c5a      	adds	r2, r3, #1
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	441a      	add	r2, r3
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8005ee0:	69bb      	ldr	r3, [r7, #24]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8005ee6:	69fb      	ldr	r3, [r7, #28]
 8005ee8:	3301      	adds	r3, #1
 8005eea:	61fb      	str	r3, [r7, #28]
 8005eec:	69fb      	ldr	r3, [r7, #28]
 8005eee:	2b03      	cmp	r3, #3
 8005ef0:	d902      	bls.n	8005ef8 <HAL_ETH_ReadData+0x114>
 8005ef2:	69fb      	ldr	r3, [r7, #28]
 8005ef4:	3b04      	subs	r3, #4
 8005ef6:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	69fa      	ldr	r2, [r7, #28]
 8005efc:	3212      	adds	r2, #18
 8005efe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f02:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	3301      	adds	r3, #1
 8005f08:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8005f0a:	69bb      	ldr	r3, [r7, #24]
 8005f0c:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	db06      	blt.n	8005f20 <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8005f12:	697a      	ldr	r2, [r7, #20]
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	429a      	cmp	r2, r3
 8005f18:	d202      	bcs.n	8005f20 <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 8005f1a:	7cfb      	ldrb	r3, [r7, #19]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d08d      	beq.n	8005e3c <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	441a      	add	r2, r3
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d002      	beq.n	8005f3a <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f000 f814 	bl	8005f62 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	69fa      	ldr	r2, [r7, #28]
 8005f3e:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8005f40:	7cfb      	ldrb	r3, [r7, #19]
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d108      	bne.n	8005f58 <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2200      	movs	r2, #0
 8005f52:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005f54:	2300      	movs	r3, #0
 8005f56:	e000      	b.n	8005f5a <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8005f58:	2301      	movs	r3, #1
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	3720      	adds	r7, #32
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}

08005f62 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8005f62:	b580      	push	{r7, lr}
 8005f64:	b088      	sub	sp, #32
 8005f66:	af00      	add	r7, sp, #0
 8005f68:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8005f6e:	2301      	movs	r3, #1
 8005f70:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005f76:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	69fa      	ldr	r2, [r7, #28]
 8005f7c:	3212      	adds	r2, #18
 8005f7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f82:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f88:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8005f8a:	e044      	b.n	8006016 <ETH_UpdateDescriptor+0xb4>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	6a1b      	ldr	r3, [r3, #32]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d112      	bne.n	8005fba <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8005f94:	f107 0308 	add.w	r3, r7, #8
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f004 f975 	bl	800a288 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d102      	bne.n	8005faa <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	74fb      	strb	r3, [r7, #19]
 8005fa8:	e007      	b.n	8005fba <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	461a      	mov	r2, r3
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	461a      	mov	r2, r3
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8005fba:	7cfb      	ldrb	r3, [r7, #19]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d02a      	beq.n	8006016 <ETH_UpdateDescriptor+0xb4>
    {
      if (heth->RxDescList.ItMode == 0U)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d108      	bne.n	8005fda <ETH_UpdateDescriptor+0x78>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	695b      	ldr	r3, [r3, #20]
 8005fcc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005fd0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005fd4:	697a      	ldr	r2, [r7, #20]
 8005fd6:	6053      	str	r3, [r2, #4]
 8005fd8:	e005      	b.n	8005fe6 <ETH_UpdateDescriptor+0x84>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	695b      	ldr	r3, [r3, #20]
 8005fde:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8005ff2:	69fb      	ldr	r3, [r7, #28]
 8005ff4:	3301      	adds	r3, #1
 8005ff6:	61fb      	str	r3, [r7, #28]
 8005ff8:	69fb      	ldr	r3, [r7, #28]
 8005ffa:	2b03      	cmp	r3, #3
 8005ffc:	d902      	bls.n	8006004 <ETH_UpdateDescriptor+0xa2>
 8005ffe:	69fb      	ldr	r3, [r7, #28]
 8006000:	3b04      	subs	r3, #4
 8006002:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	69fa      	ldr	r2, [r7, #28]
 8006008:	3212      	adds	r2, #18
 800600a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800600e:	617b      	str	r3, [r7, #20]
      desccount--;
 8006010:	69bb      	ldr	r3, [r7, #24]
 8006012:	3b01      	subs	r3, #1
 8006014:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8006016:	69bb      	ldr	r3, [r7, #24]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d002      	beq.n	8006022 <ETH_UpdateDescriptor+0xc0>
 800601c:	7cfb      	ldrb	r3, [r7, #19]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d1b4      	bne.n	8005f8c <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006026:	69ba      	ldr	r2, [r7, #24]
 8006028:	429a      	cmp	r2, r3
 800602a:	d01a      	beq.n	8006062 <ETH_UpdateDescriptor+0x100>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 800602c:	69fb      	ldr	r3, [r7, #28]
 800602e:	3301      	adds	r3, #1
 8006030:	f003 0303 	and.w	r3, r3, #3
 8006034:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8006036:	f3bf 8f5f 	dmb	sy
}
 800603a:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6919      	ldr	r1, [r3, #16]
 8006040:	68fa      	ldr	r2, [r7, #12]
 8006042:	4613      	mov	r3, r2
 8006044:	009b      	lsls	r3, r3, #2
 8006046:	4413      	add	r3, r2
 8006048:	00db      	lsls	r3, r3, #3
 800604a:	18ca      	adds	r2, r1, r3
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006054:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	69fa      	ldr	r2, [r7, #28]
 800605a:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	69ba      	ldr	r2, [r7, #24]
 8006060:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8006062:	bf00      	nop
 8006064:	3720      	adds	r7, #32
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}

0800606a <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 800606a:	b580      	push	{r7, lr}
 800606c:	b086      	sub	sp, #24
 800606e:	af00      	add	r7, sp, #0
 8006070:	60f8      	str	r0, [r7, #12]
 8006072:	60b9      	str	r1, [r7, #8]
 8006074:	607a      	str	r2, [r7, #4]
 8006076:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	691b      	ldr	r3, [r3, #16]
 800607e:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	f003 031c 	and.w	r3, r3, #28
 8006086:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	02db      	lsls	r3, r3, #11
 800608c:	b29b      	uxth	r3, r3
 800608e:	697a      	ldr	r2, [r7, #20]
 8006090:	4313      	orrs	r3, r2
 8006092:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	019b      	lsls	r3, r3, #6
 8006098:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 800609c:	697a      	ldr	r2, [r7, #20]
 800609e:	4313      	orrs	r3, r2
 80060a0:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	f023 0302 	bic.w	r3, r3, #2
 80060a8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	f043 0301 	orr.w	r3, r3, #1
 80060b0:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	697a      	ldr	r2, [r7, #20]
 80060b8:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 80060ba:	f7fe ff91 	bl	8004fe0 <HAL_GetTick>
 80060be:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80060c0:	e00d      	b.n	80060de <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 80060c2:	f7fe ff8d 	bl	8004fe0 <HAL_GetTick>
 80060c6:	4602      	mov	r2, r0
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	1ad3      	subs	r3, r2, r3
 80060cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060d0:	d301      	bcc.n	80060d6 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 80060d2:	2301      	movs	r3, #1
 80060d4:	e010      	b.n	80060f8 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	691b      	ldr	r3, [r3, #16]
 80060dc:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	f003 0301 	and.w	r3, r3, #1
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d1ec      	bne.n	80060c2 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	695b      	ldr	r3, [r3, #20]
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	461a      	mov	r2, r3
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80060f6:	2300      	movs	r3, #0
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	3718      	adds	r7, #24
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd80      	pop	{r7, pc}

08006100 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b086      	sub	sp, #24
 8006104:	af00      	add	r7, sp, #0
 8006106:	60f8      	str	r0, [r7, #12]
 8006108:	60b9      	str	r1, [r7, #8]
 800610a:	607a      	str	r2, [r7, #4]
 800610c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	691b      	ldr	r3, [r3, #16]
 8006114:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	f003 031c 	and.w	r3, r3, #28
 800611c:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	02db      	lsls	r3, r3, #11
 8006122:	b29b      	uxth	r3, r3
 8006124:	697a      	ldr	r2, [r7, #20]
 8006126:	4313      	orrs	r3, r2
 8006128:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	019b      	lsls	r3, r3, #6
 800612e:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8006132:	697a      	ldr	r2, [r7, #20]
 8006134:	4313      	orrs	r3, r2
 8006136:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	f043 0302 	orr.w	r3, r3, #2
 800613e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	f043 0301 	orr.w	r3, r3, #1
 8006146:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	b29a      	uxth	r2, r3
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	697a      	ldr	r2, [r7, #20]
 8006158:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 800615a:	f7fe ff41 	bl	8004fe0 <HAL_GetTick>
 800615e:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8006160:	e00d      	b.n	800617e <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8006162:	f7fe ff3d 	bl	8004fe0 <HAL_GetTick>
 8006166:	4602      	mov	r2, r0
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	1ad3      	subs	r3, r2, r3
 800616c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006170:	d301      	bcc.n	8006176 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8006172:	2301      	movs	r3, #1
 8006174:	e009      	b.n	800618a <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	691b      	ldr	r3, [r3, #16]
 800617c:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	f003 0301 	and.w	r3, r3, #1
 8006184:	2b00      	cmp	r3, #0
 8006186:	d1ec      	bne.n	8006162 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8006188:	2300      	movs	r3, #0
}
 800618a:	4618      	mov	r0, r3
 800618c:	3718      	adds	r7, #24
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}

08006192 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8006192:	b480      	push	{r7}
 8006194:	b083      	sub	sp, #12
 8006196:	af00      	add	r7, sp, #0
 8006198:	6078      	str	r0, [r7, #4]
 800619a:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d101      	bne.n	80061a6 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80061a2:	2301      	movs	r3, #1
 80061a4:	e0e6      	b.n	8006374 <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f003 0310 	and.w	r3, r3, #16
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	bf14      	ite	ne
 80061b4:	2301      	movne	r3, #1
 80061b6:	2300      	moveq	r3, #0
 80061b8:	b2db      	uxtb	r3, r3
 80061ba:	461a      	mov	r2, r3
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80061da:	2b00      	cmp	r3, #0
 80061dc:	bf0c      	ite	eq
 80061de:	2301      	moveq	r3, #1
 80061e0:	2300      	movne	r3, #0
 80061e2:	b2db      	uxtb	r3, r3
 80061e4:	461a      	mov	r2, r3
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	bf14      	ite	ne
 80061fa:	2301      	movne	r3, #1
 80061fc:	2300      	moveq	r3, #0
 80061fe:	b2db      	uxtb	r3, r3
 8006200:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006210:	2b00      	cmp	r3, #0
 8006212:	bf0c      	ite	eq
 8006214:	2301      	moveq	r3, #1
 8006216:	2300      	movne	r3, #0
 8006218:	b2db      	uxtb	r3, r3
 800621a:	461a      	mov	r2, r3
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800622a:	2b00      	cmp	r3, #0
 800622c:	bf14      	ite	ne
 800622e:	2301      	movne	r3, #1
 8006230:	2300      	moveq	r3, #0
 8006232:	b2db      	uxtb	r3, r3
 8006234:	461a      	mov	r2, r3
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006260:	2b00      	cmp	r3, #0
 8006262:	bf0c      	ite	eq
 8006264:	2301      	moveq	r3, #1
 8006266:	2300      	movne	r3, #0
 8006268:	b2db      	uxtb	r3, r3
 800626a:	461a      	mov	r2, r3
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800627a:	2b00      	cmp	r3, #0
 800627c:	bf0c      	ite	eq
 800627e:	2301      	moveq	r3, #1
 8006280:	2300      	movne	r3, #0
 8006282:	b2db      	uxtb	r3, r3
 8006284:	461a      	mov	r2, r3
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006294:	2b00      	cmp	r3, #0
 8006296:	bf14      	ite	ne
 8006298:	2301      	movne	r3, #1
 800629a:	2300      	moveq	r3, #0
 800629c:	b2db      	uxtb	r3, r3
 800629e:	461a      	mov	r2, r3
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80062bc:	2b00      	cmp	r3, #0
 80062be:	bf14      	ite	ne
 80062c0:	2301      	movne	r3, #1
 80062c2:	2300      	moveq	r3, #0
 80062c4:	b2db      	uxtb	r3, r3
 80062c6:	461a      	mov	r2, r3
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	bf14      	ite	ne
 80062da:	2301      	movne	r3, #1
 80062dc:	2300      	moveq	r3, #0
 80062de:	b2db      	uxtb	r3, r3
 80062e0:	461a      	mov	r2, r3
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	699b      	ldr	r3, [r3, #24]
 80062ec:	f003 0302 	and.w	r3, r3, #2
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	bf14      	ite	ne
 80062f4:	2301      	movne	r3, #1
 80062f6:	2300      	moveq	r3, #0
 80062f8:	b2db      	uxtb	r3, r3
 80062fa:	461a      	mov	r2, r3
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	699b      	ldr	r3, [r3, #24]
 8006308:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800630c:	2b00      	cmp	r3, #0
 800630e:	bf0c      	ite	eq
 8006310:	2301      	moveq	r3, #1
 8006312:	2300      	movne	r3, #0
 8006314:	b2db      	uxtb	r3, r3
 8006316:	461a      	mov	r2, r3
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	699b      	ldr	r3, [r3, #24]
 8006324:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	699b      	ldr	r3, [r3, #24]
 8006332:	0c1b      	lsrs	r3, r3, #16
 8006334:	b29a      	uxth	r2, r3
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	699b      	ldr	r3, [r3, #24]
 8006340:	f003 0304 	and.w	r3, r3, #4
 8006344:	2b00      	cmp	r3, #0
 8006346:	bf14      	ite	ne
 8006348:	2301      	movne	r3, #1
 800634a:	2300      	moveq	r3, #0
 800634c:	b2db      	uxtb	r3, r3
 800634e:	461a      	mov	r2, r3
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	699b      	ldr	r3, [r3, #24]
 800635c:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8006360:	2b00      	cmp	r3, #0
 8006362:	bf14      	ite	ne
 8006364:	2301      	movne	r3, #1
 8006366:	2300      	moveq	r3, #0
 8006368:	b2db      	uxtb	r3, r3
 800636a:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8006372:	2300      	movs	r3, #0
}
 8006374:	4618      	mov	r0, r3
 8006376:	370c      	adds	r7, #12
 8006378:	46bd      	mov	sp, r7
 800637a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637e:	4770      	bx	lr

08006380 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b082      	sub	sp, #8
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
 8006388:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d101      	bne.n	8006394 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8006390:	2301      	movs	r3, #1
 8006392:	e00b      	b.n	80063ac <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800639a:	2b10      	cmp	r3, #16
 800639c:	d105      	bne.n	80063aa <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 800639e:	6839      	ldr	r1, [r7, #0]
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f000 f86f 	bl	8006484 <ETH_SetMACConfig>

    return HAL_OK;
 80063a6:	2300      	movs	r3, #0
 80063a8:	e000      	b.n	80063ac <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 80063aa:	2301      	movs	r3, #1
  }
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	3708      	adds	r7, #8
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}

080063b4 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b084      	sub	sp, #16
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	691b      	ldr	r3, [r3, #16]
 80063c2:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f023 031c 	bic.w	r3, r3, #28
 80063ca:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80063cc:	f001 fcde 	bl	8007d8c <HAL_RCC_GetHCLKFreq>
 80063d0:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	4a14      	ldr	r2, [pc, #80]	@ (8006428 <HAL_ETH_SetMDIOClockRange+0x74>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d804      	bhi.n	80063e4 <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	f043 0308 	orr.w	r3, r3, #8
 80063e0:	60fb      	str	r3, [r7, #12]
 80063e2:	e019      	b.n	8006418 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	4a11      	ldr	r2, [pc, #68]	@ (800642c <HAL_ETH_SetMDIOClockRange+0x78>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d204      	bcs.n	80063f6 <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f043 030c 	orr.w	r3, r3, #12
 80063f2:	60fb      	str	r3, [r7, #12]
 80063f4:	e010      	b.n	8006418 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	4a0d      	ldr	r2, [pc, #52]	@ (8006430 <HAL_ETH_SetMDIOClockRange+0x7c>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d90c      	bls.n	8006418 <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	4a0c      	ldr	r2, [pc, #48]	@ (8006434 <HAL_ETH_SetMDIOClockRange+0x80>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d804      	bhi.n	8006410 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	f043 0304 	orr.w	r3, r3, #4
 800640c:	60fb      	str	r3, [r7, #12]
 800640e:	e003      	b.n	8006418 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f043 0310 	orr.w	r3, r3, #16
 8006416:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	68fa      	ldr	r2, [r7, #12]
 800641e:	611a      	str	r2, [r3, #16]
}
 8006420:	bf00      	nop
 8006422:	3710      	adds	r7, #16
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}
 8006428:	02160ebf 	.word	0x02160ebf
 800642c:	03938700 	.word	0x03938700
 8006430:	05f5e0ff 	.word	0x05f5e0ff
 8006434:	08f0d17f 	.word	0x08f0d17f

08006438 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b084      	sub	sp, #16
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8006440:	2300      	movs	r3, #0
 8006442:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800644c:	699b      	ldr	r3, [r3, #24]
 800644e:	687a      	ldr	r2, [r7, #4]
 8006450:	6812      	ldr	r2, [r2, #0]
 8006452:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006456:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800645a:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006464:	699b      	ldr	r3, [r3, #24]
 8006466:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8006468:	2001      	movs	r0, #1
 800646a:	f7fe fdc5 	bl	8004ff8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681a      	ldr	r2, [r3, #0]
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006478:	6193      	str	r3, [r2, #24]
}
 800647a:	bf00      	nop
 800647c:	3710      	adds	r7, #16
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}
	...

08006484 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b084      	sub	sp, #16
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
 800648c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8006496:	68fa      	ldr	r2, [r7, #12]
 8006498:	4b53      	ldr	r3, [pc, #332]	@ (80065e8 <ETH_SetMACConfig+0x164>)
 800649a:	4013      	ands	r3, r2
 800649c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	7b9b      	ldrb	r3, [r3, #14]
 80064a2:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80064a4:	683a      	ldr	r2, [r7, #0]
 80064a6:	7c12      	ldrb	r2, [r2, #16]
 80064a8:	2a00      	cmp	r2, #0
 80064aa:	d102      	bne.n	80064b2 <ETH_SetMACConfig+0x2e>
 80064ac:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80064b0:	e000      	b.n	80064b4 <ETH_SetMACConfig+0x30>
 80064b2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80064b4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80064b6:	683a      	ldr	r2, [r7, #0]
 80064b8:	7c52      	ldrb	r2, [r2, #17]
 80064ba:	2a00      	cmp	r2, #0
 80064bc:	d102      	bne.n	80064c4 <ETH_SetMACConfig+0x40>
 80064be:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80064c2:	e000      	b.n	80064c6 <ETH_SetMACConfig+0x42>
 80064c4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80064c6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80064cc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	7fdb      	ldrb	r3, [r3, #31]
 80064d2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80064d4:	431a      	orrs	r2, r3
                        macconf->Speed |
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80064da:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80064dc:	683a      	ldr	r2, [r7, #0]
 80064de:	7f92      	ldrb	r2, [r2, #30]
 80064e0:	2a00      	cmp	r2, #0
 80064e2:	d102      	bne.n	80064ea <ETH_SetMACConfig+0x66>
 80064e4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80064e8:	e000      	b.n	80064ec <ETH_SetMACConfig+0x68>
 80064ea:	2200      	movs	r2, #0
                        macconf->Speed |
 80064ec:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	7f1b      	ldrb	r3, [r3, #28]
 80064f2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80064f4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80064fa:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	791b      	ldrb	r3, [r3, #4]
 8006500:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8006502:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8006504:	683a      	ldr	r2, [r7, #0]
 8006506:	f892 2020 	ldrb.w	r2, [r2, #32]
 800650a:	2a00      	cmp	r2, #0
 800650c:	d102      	bne.n	8006514 <ETH_SetMACConfig+0x90>
 800650e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006512:	e000      	b.n	8006516 <ETH_SetMACConfig+0x92>
 8006514:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8006516:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	7bdb      	ldrb	r3, [r3, #15]
 800651c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800651e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8006524:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800652c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800652e:	4313      	orrs	r3, r2
 8006530:	68fa      	ldr	r2, [r7, #12]
 8006532:	4313      	orrs	r3, r2
 8006534:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	68fa      	ldr	r2, [r7, #12]
 800653c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8006546:	2001      	movs	r0, #1
 8006548:	f7fe fd56 	bl	8004ff8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	68fa      	ldr	r2, [r7, #12]
 8006552:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	699b      	ldr	r3, [r3, #24]
 800655a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800655c:	68fa      	ldr	r2, [r7, #12]
 800655e:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8006562:	4013      	ands	r3, r2
 8006564:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800656a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800656c:	683a      	ldr	r2, [r7, #0]
 800656e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8006572:	2a00      	cmp	r2, #0
 8006574:	d101      	bne.n	800657a <ETH_SetMACConfig+0xf6>
 8006576:	2280      	movs	r2, #128	@ 0x80
 8006578:	e000      	b.n	800657c <ETH_SetMACConfig+0xf8>
 800657a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800657c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8006582:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8006584:	683a      	ldr	r2, [r7, #0]
 8006586:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 800658a:	2a01      	cmp	r2, #1
 800658c:	d101      	bne.n	8006592 <ETH_SetMACConfig+0x10e>
 800658e:	2208      	movs	r2, #8
 8006590:	e000      	b.n	8006594 <ETH_SetMACConfig+0x110>
 8006592:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8006594:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8006596:	683a      	ldr	r2, [r7, #0]
 8006598:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 800659c:	2a01      	cmp	r2, #1
 800659e:	d101      	bne.n	80065a4 <ETH_SetMACConfig+0x120>
 80065a0:	2204      	movs	r2, #4
 80065a2:	e000      	b.n	80065a6 <ETH_SetMACConfig+0x122>
 80065a4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80065a6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80065a8:	683a      	ldr	r2, [r7, #0]
 80065aa:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80065ae:	2a01      	cmp	r2, #1
 80065b0:	d101      	bne.n	80065b6 <ETH_SetMACConfig+0x132>
 80065b2:	2202      	movs	r2, #2
 80065b4:	e000      	b.n	80065b8 <ETH_SetMACConfig+0x134>
 80065b6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80065b8:	4313      	orrs	r3, r2
 80065ba:	68fa      	ldr	r2, [r7, #12]
 80065bc:	4313      	orrs	r3, r2
 80065be:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	68fa      	ldr	r2, [r7, #12]
 80065c6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	699b      	ldr	r3, [r3, #24]
 80065ce:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80065d0:	2001      	movs	r0, #1
 80065d2:	f7fe fd11 	bl	8004ff8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	68fa      	ldr	r2, [r7, #12]
 80065dc:	619a      	str	r2, [r3, #24]
}
 80065de:	bf00      	nop
 80065e0:	3710      	adds	r7, #16
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}
 80065e6:	bf00      	nop
 80065e8:	fd20810f 	.word	0xfd20810f

080065ec <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b084      	sub	sp, #16
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
 80065f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80065fe:	699b      	ldr	r3, [r3, #24]
 8006600:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8006602:	68fa      	ldr	r2, [r7, #12]
 8006604:	4b3d      	ldr	r3, [pc, #244]	@ (80066fc <ETH_SetDMAConfig+0x110>)
 8006606:	4013      	ands	r3, r2
 8006608:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	7b1b      	ldrb	r3, [r3, #12]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d102      	bne.n	8006618 <ETH_SetDMAConfig+0x2c>
 8006612:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8006616:	e000      	b.n	800661a <ETH_SetDMAConfig+0x2e>
 8006618:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	7b5b      	ldrb	r3, [r3, #13]
 800661e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8006620:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8006622:	683a      	ldr	r2, [r7, #0]
 8006624:	7f52      	ldrb	r2, [r2, #29]
 8006626:	2a00      	cmp	r2, #0
 8006628:	d102      	bne.n	8006630 <ETH_SetDMAConfig+0x44>
 800662a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800662e:	e000      	b.n	8006632 <ETH_SetDMAConfig+0x46>
 8006630:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8006632:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	7b9b      	ldrb	r3, [r3, #14]
 8006638:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800663a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8006640:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	7f1b      	ldrb	r3, [r3, #28]
 8006646:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8006648:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	7f9b      	ldrb	r3, [r3, #30]
 800664e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8006650:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8006656:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800665e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8006660:	4313      	orrs	r3, r2
 8006662:	68fa      	ldr	r2, [r7, #12]
 8006664:	4313      	orrs	r3, r2
 8006666:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006670:	461a      	mov	r2, r3
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800667e:	699b      	ldr	r3, [r3, #24]
 8006680:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8006682:	2001      	movs	r0, #1
 8006684:	f7fe fcb8 	bl	8004ff8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006690:	461a      	mov	r2, r3
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	791b      	ldrb	r3, [r3, #4]
 800669a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80066a0:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80066a6:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80066ac:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80066b4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80066b6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066bc:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80066be:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80066c4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80066c6:	687a      	ldr	r2, [r7, #4]
 80066c8:	6812      	ldr	r2, [r2, #0]
 80066ca:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80066ce:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80066d2:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80066e0:	2001      	movs	r0, #1
 80066e2:	f7fe fc89 	bl	8004ff8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80066ee:	461a      	mov	r2, r3
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	6013      	str	r3, [r2, #0]
}
 80066f4:	bf00      	nop
 80066f6:	3710      	adds	r7, #16
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}
 80066fc:	f8de3f23 	.word	0xf8de3f23

08006700 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b0a6      	sub	sp, #152	@ 0x98
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8006708:	2301      	movs	r3, #1
 800670a:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 800670e:	2301      	movs	r3, #1
 8006710:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8006714:	2300      	movs	r3, #0
 8006716:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8006718:	2300      	movs	r3, #0
 800671a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800671e:	2301      	movs	r3, #1
 8006720:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8006724:	2300      	movs	r3, #0
 8006726:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800672a:	2301      	movs	r3, #1
 800672c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8006730:	2301      	movs	r3, #1
 8006732:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8006736:	2300      	movs	r3, #0
 8006738:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800673c:	2300      	movs	r3, #0
 800673e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8006742:	2300      	movs	r3, #0
 8006744:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8006746:	2300      	movs	r3, #0
 8006748:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800674c:	2300      	movs	r3, #0
 800674e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8006750:	2300      	movs	r3, #0
 8006752:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8006756:	2300      	movs	r3, #0
 8006758:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800675c:	2300      	movs	r3, #0
 800675e:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8006762:	2300      	movs	r3, #0
 8006764:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8006768:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800676c:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800676e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006772:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8006774:	2300      	movs	r3, #0
 8006776:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800677a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800677e:	4619      	mov	r1, r3
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	f7ff fe7f 	bl	8006484 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8006786:	2301      	movs	r3, #1
 8006788:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800678a:	2301      	movs	r3, #1
 800678c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800678e:	2301      	movs	r3, #1
 8006790:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8006794:	2301      	movs	r3, #1
 8006796:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8006798:	2300      	movs	r3, #0
 800679a:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800679c:	2300      	movs	r3, #0
 800679e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80067a2:	2300      	movs	r3, #0
 80067a4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80067a8:	2300      	movs	r3, #0
 80067aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80067ac:	2301      	movs	r3, #1
 80067ae:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80067b2:	2301      	movs	r3, #1
 80067b4:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80067b6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80067ba:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80067bc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80067c0:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80067c2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80067c6:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80067c8:	2301      	movs	r3, #1
 80067ca:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80067ce:	2300      	movs	r3, #0
 80067d0:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80067d2:	2300      	movs	r3, #0
 80067d4:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80067d6:	f107 0308 	add.w	r3, r7, #8
 80067da:	4619      	mov	r1, r3
 80067dc:	6878      	ldr	r0, [r7, #4]
 80067de:	f7ff ff05 	bl	80065ec <ETH_SetDMAConfig>
}
 80067e2:	bf00      	nop
 80067e4:	3798      	adds	r7, #152	@ 0x98
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}
	...

080067ec <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b087      	sub	sp, #28
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	60f8      	str	r0, [r7, #12]
 80067f4:	60b9      	str	r1, [r7, #8]
 80067f6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	3305      	adds	r3, #5
 80067fc:	781b      	ldrb	r3, [r3, #0]
 80067fe:	021b      	lsls	r3, r3, #8
 8006800:	687a      	ldr	r2, [r7, #4]
 8006802:	3204      	adds	r2, #4
 8006804:	7812      	ldrb	r2, [r2, #0]
 8006806:	4313      	orrs	r3, r2
 8006808:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800680a:	68ba      	ldr	r2, [r7, #8]
 800680c:	4b11      	ldr	r3, [pc, #68]	@ (8006854 <ETH_MACAddressConfig+0x68>)
 800680e:	4413      	add	r3, r2
 8006810:	461a      	mov	r2, r3
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	3303      	adds	r3, #3
 800681a:	781b      	ldrb	r3, [r3, #0]
 800681c:	061a      	lsls	r2, r3, #24
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	3302      	adds	r3, #2
 8006822:	781b      	ldrb	r3, [r3, #0]
 8006824:	041b      	lsls	r3, r3, #16
 8006826:	431a      	orrs	r2, r3
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	3301      	adds	r3, #1
 800682c:	781b      	ldrb	r3, [r3, #0]
 800682e:	021b      	lsls	r3, r3, #8
 8006830:	4313      	orrs	r3, r2
 8006832:	687a      	ldr	r2, [r7, #4]
 8006834:	7812      	ldrb	r2, [r2, #0]
 8006836:	4313      	orrs	r3, r2
 8006838:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800683a:	68ba      	ldr	r2, [r7, #8]
 800683c:	4b06      	ldr	r3, [pc, #24]	@ (8006858 <ETH_MACAddressConfig+0x6c>)
 800683e:	4413      	add	r3, r2
 8006840:	461a      	mov	r2, r3
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	6013      	str	r3, [r2, #0]
}
 8006846:	bf00      	nop
 8006848:	371c      	adds	r7, #28
 800684a:	46bd      	mov	sp, r7
 800684c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006850:	4770      	bx	lr
 8006852:	bf00      	nop
 8006854:	40028040 	.word	0x40028040
 8006858:	40028044 	.word	0x40028044

0800685c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800685c:	b480      	push	{r7}
 800685e:	b085      	sub	sp, #20
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8006864:	2300      	movs	r3, #0
 8006866:	60fb      	str	r3, [r7, #12]
 8006868:	e03e      	b.n	80068e8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	68d9      	ldr	r1, [r3, #12]
 800686e:	68fa      	ldr	r2, [r7, #12]
 8006870:	4613      	mov	r3, r2
 8006872:	009b      	lsls	r3, r3, #2
 8006874:	4413      	add	r3, r2
 8006876:	00db      	lsls	r3, r3, #3
 8006878:	440b      	add	r3, r1
 800687a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	2200      	movs	r2, #0
 8006880:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	2200      	movs	r2, #0
 8006886:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	2200      	movs	r2, #0
 800688c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	2200      	movs	r2, #0
 8006892:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8006894:	68b9      	ldr	r1, [r7, #8]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	68fa      	ldr	r2, [r7, #12]
 800689a:	3206      	adds	r2, #6
 800689c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2b02      	cmp	r3, #2
 80068b0:	d80c      	bhi.n	80068cc <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	68d9      	ldr	r1, [r3, #12]
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	1c5a      	adds	r2, r3, #1
 80068ba:	4613      	mov	r3, r2
 80068bc:	009b      	lsls	r3, r3, #2
 80068be:	4413      	add	r3, r2
 80068c0:	00db      	lsls	r3, r3, #3
 80068c2:	440b      	add	r3, r1
 80068c4:	461a      	mov	r2, r3
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	60da      	str	r2, [r3, #12]
 80068ca:	e004      	b.n	80068d6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	68db      	ldr	r3, [r3, #12]
 80068d0:	461a      	mov	r2, r3
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	3301      	adds	r3, #1
 80068e6:	60fb      	str	r3, [r7, #12]
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2b03      	cmp	r3, #3
 80068ec:	d9bd      	bls.n	800686a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2200      	movs	r2, #0
 80068f2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	68da      	ldr	r2, [r3, #12]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006900:	611a      	str	r2, [r3, #16]
}
 8006902:	bf00      	nop
 8006904:	3714      	adds	r7, #20
 8006906:	46bd      	mov	sp, r7
 8006908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690c:	4770      	bx	lr

0800690e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800690e:	b480      	push	{r7}
 8006910:	b085      	sub	sp, #20
 8006912:	af00      	add	r7, sp, #0
 8006914:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8006916:	2300      	movs	r3, #0
 8006918:	60fb      	str	r3, [r7, #12]
 800691a:	e048      	b.n	80069ae <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6919      	ldr	r1, [r3, #16]
 8006920:	68fa      	ldr	r2, [r7, #12]
 8006922:	4613      	mov	r3, r2
 8006924:	009b      	lsls	r3, r3, #2
 8006926:	4413      	add	r3, r2
 8006928:	00db      	lsls	r3, r3, #3
 800692a:	440b      	add	r3, r1
 800692c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	2200      	movs	r2, #0
 8006932:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	2200      	movs	r2, #0
 8006938:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	2200      	movs	r2, #0
 800693e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	2200      	movs	r2, #0
 8006944:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	2200      	movs	r2, #0
 800694a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	2200      	movs	r2, #0
 8006950:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006958:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	695b      	ldr	r3, [r3, #20]
 800695e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8006972:	68b9      	ldr	r1, [r7, #8]
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	68fa      	ldr	r2, [r7, #12]
 8006978:	3212      	adds	r2, #18
 800697a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2b02      	cmp	r3, #2
 8006982:	d80c      	bhi.n	800699e <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6919      	ldr	r1, [r3, #16]
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	1c5a      	adds	r2, r3, #1
 800698c:	4613      	mov	r3, r2
 800698e:	009b      	lsls	r3, r3, #2
 8006990:	4413      	add	r3, r2
 8006992:	00db      	lsls	r3, r3, #3
 8006994:	440b      	add	r3, r1
 8006996:	461a      	mov	r2, r3
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	60da      	str	r2, [r3, #12]
 800699c:	e004      	b.n	80069a8 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	691b      	ldr	r3, [r3, #16]
 80069a2:	461a      	mov	r2, r3
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	3301      	adds	r3, #1
 80069ac:	60fb      	str	r3, [r7, #12]
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2b03      	cmp	r3, #3
 80069b2:	d9b3      	bls.n	800691c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2200      	movs	r2, #0
 80069b8:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2200      	movs	r2, #0
 80069be:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2200      	movs	r2, #0
 80069c4:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2200      	movs	r2, #0
 80069ca:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2200      	movs	r2, #0
 80069d0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	691a      	ldr	r2, [r3, #16]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80069de:	60da      	str	r2, [r3, #12]
}
 80069e0:	bf00      	nop
 80069e2:	3714      	adds	r7, #20
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	4770      	bx	lr

080069ec <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b091      	sub	sp, #68	@ 0x44
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	60f8      	str	r0, [r7, #12]
 80069f4:	60b9      	str	r1, [r7, #8]
 80069f6:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	3318      	adds	r3, #24
 80069fc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80069fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a00:	691b      	ldr	r3, [r3, #16]
 8006a02:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8006a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a06:	691b      	ldr	r3, [r3, #16]
 8006a08:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8006a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a10:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006a12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a16:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8006a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006a2a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006a2e:	d007      	beq.n	8006a40 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8006a30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a34:	3304      	adds	r3, #4
 8006a36:	009b      	lsls	r3, r3, #2
 8006a38:	4413      	add	r3, r2
 8006a3a:	685b      	ldr	r3, [r3, #4]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d001      	beq.n	8006a44 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8006a40:	2302      	movs	r3, #2
 8006a42:	e115      	b.n	8006c70 <ETH_Prepare_Tx_Descriptors+0x284>
  }


  descnbr += 1U;
 8006a44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a46:	3301      	adds	r3, #1
 8006a48:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8006a4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	461a      	mov	r2, r3
 8006a50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a52:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8006a54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 8006a5c:	f023 031f 	bic.w	r3, r3, #31
 8006a60:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a62:	6852      	ldr	r2, [r2, #4]
 8006a64:	431a      	orrs	r2, r3
 8006a66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a68:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f003 0301 	and.w	r3, r3, #1
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d008      	beq.n	8006a88 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8006a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	695b      	ldr	r3, [r3, #20]
 8006a82:	431a      	orrs	r2, r3
 8006a84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a86:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f003 0320 	and.w	r3, r3, #32
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d008      	beq.n	8006aa6 <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8006a94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	691b      	ldr	r3, [r3, #16]
 8006aa0:	431a      	orrs	r2, r3
 8006aa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aa4:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f003 0304 	and.w	r3, r3, #4
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d005      	beq.n	8006abe <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8006ab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006aba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006abc:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8006abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8006ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ac8:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8006aca:	e084      	b.n	8006bd6 <ETH_Prepare_Tx_Descriptors+0x1ea>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8006acc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006ad4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ad6:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d006      	beq.n	8006aec <ETH_Prepare_Tx_Descriptors+0x100>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8006ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006ae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ae8:	601a      	str	r2, [r3, #0]
 8006aea:	e005      	b.n	8006af8 <ETH_Prepare_Tx_Descriptors+0x10c>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8006aec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8006af4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006af6:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8006af8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006afa:	3301      	adds	r3, #1
 8006afc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006afe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b00:	2b03      	cmp	r3, #3
 8006b02:	d902      	bls.n	8006b0a <ETH_Prepare_Tx_Descriptors+0x11e>
 8006b04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b06:	3b04      	subs	r3, #4
 8006b08:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8006b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b0c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006b0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b12:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8006b14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006b1c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006b20:	d007      	beq.n	8006b32 <ETH_Prepare_Tx_Descriptors+0x146>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8006b22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b26:	3304      	adds	r3, #4
 8006b28:	009b      	lsls	r3, r3, #2
 8006b2a:	4413      	add	r3, r2
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d029      	beq.n	8006b86 <ETH_Prepare_Tx_Descriptors+0x19a>
    {
      descidx = firstdescidx;
 8006b32:	6a3b      	ldr	r3, [r7, #32]
 8006b34:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8006b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b38:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006b3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b3e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8006b40:	2300      	movs	r3, #0
 8006b42:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006b44:	e019      	b.n	8006b7a <ETH_Prepare_Tx_Descriptors+0x18e>
  __ASM volatile ("dmb 0xF":::"memory");
 8006b46:	f3bf 8f5f 	dmb	sy
}
 8006b4a:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8006b4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006b54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b56:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8006b58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b5a:	3301      	adds	r3, #1
 8006b5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006b5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b60:	2b03      	cmp	r3, #3
 8006b62:	d902      	bls.n	8006b6a <ETH_Prepare_Tx_Descriptors+0x17e>
 8006b64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b66:	3b04      	subs	r3, #4
 8006b68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8006b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b6c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006b6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b72:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8006b74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b76:	3301      	adds	r3, #1
 8006b78:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006b7a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006b7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b7e:	429a      	cmp	r2, r3
 8006b80:	d3e1      	bcc.n	8006b46 <ETH_Prepare_Tx_Descriptors+0x15a>
      }

      return HAL_ETH_ERROR_BUSY;
 8006b82:	2302      	movs	r3, #2
 8006b84:	e074      	b.n	8006c70 <ETH_Prepare_Tx_Descriptors+0x284>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8006b86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006b8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b90:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 8006b92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b94:	3301      	adds	r3, #1
 8006b96:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8006b98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b9a:	689b      	ldr	r3, [r3, #8]
 8006b9c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8006b9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	461a      	mov	r2, r3
 8006ba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ba6:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8006ba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006baa:	685b      	ldr	r3, [r3, #4]
 8006bac:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 8006bb0:	f023 031f 	bic.w	r3, r3, #31
 8006bb4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006bb6:	6852      	ldr	r2, [r2, #4]
 8006bb8:	431a      	orrs	r2, r3
 8006bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bbc:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8006bbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bc0:	3301      	adds	r3, #1
 8006bc2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8006bc4:	f3bf 8f5f 	dmb	sy
}
 8006bc8:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8006bca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006bd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bd4:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8006bd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bd8:	689b      	ldr	r3, [r3, #8]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	f47f af76 	bne.w	8006acc <ETH_Prepare_Tx_Descriptors+0xe0>
  }

  if (ItMode != ((uint32_t)RESET))
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d006      	beq.n	8006bf4 <ETH_Prepare_Tx_Descriptors+0x208>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8006be6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006bee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bf0:	601a      	str	r2, [r3, #0]
 8006bf2:	e005      	b.n	8006c00 <ETH_Prepare_Tx_Descriptors+0x214>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8006bf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8006bfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bfe:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8006c00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006c08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c0a:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8006c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c0e:	6a3a      	ldr	r2, [r7, #32]
 8006c10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c14:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8006c16:	f3bf 8f5f 	dmb	sy
}
 8006c1a:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8006c1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006c24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c26:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8006c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c2a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006c2c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006c2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c30:	3304      	adds	r3, #4
 8006c32:	009b      	lsls	r3, r3, #2
 8006c34:	440b      	add	r3, r1
 8006c36:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8006c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c3a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006c3c:	611a      	str	r2, [r3, #16]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8006c3e:	f3ef 8310 	mrs	r3, PRIMASK
 8006c42:	613b      	str	r3, [r7, #16]
  return(result);
 8006c44:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8006c46:	61fb      	str	r3, [r7, #28]
 8006c48:	2301      	movs	r3, #1
 8006c4a:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	f383 8810 	msr	PRIMASK, r3
}
 8006c52:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8006c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c56:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006c58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c5a:	4413      	add	r3, r2
 8006c5c:	1c5a      	adds	r2, r3, #1
 8006c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c60:	629a      	str	r2, [r3, #40]	@ 0x28
 8006c62:	69fb      	ldr	r3, [r7, #28]
 8006c64:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c66:	69bb      	ldr	r3, [r7, #24]
 8006c68:	f383 8810 	msr	PRIMASK, r3
}
 8006c6c:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8006c6e:	2300      	movs	r3, #0
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	3744      	adds	r7, #68	@ 0x44
 8006c74:	46bd      	mov	sp, r7
 8006c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7a:	4770      	bx	lr

08006c7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b089      	sub	sp, #36	@ 0x24
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
 8006c84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006c86:	2300      	movs	r3, #0
 8006c88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006c92:	2300      	movs	r3, #0
 8006c94:	61fb      	str	r3, [r7, #28]
 8006c96:	e16b      	b.n	8006f70 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006c98:	2201      	movs	r2, #1
 8006c9a:	69fb      	ldr	r3, [r7, #28]
 8006c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8006ca0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	697a      	ldr	r2, [r7, #20]
 8006ca8:	4013      	ands	r3, r2
 8006caa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006cac:	693a      	ldr	r2, [r7, #16]
 8006cae:	697b      	ldr	r3, [r7, #20]
 8006cb0:	429a      	cmp	r2, r3
 8006cb2:	f040 815a 	bne.w	8006f6a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	685b      	ldr	r3, [r3, #4]
 8006cba:	f003 0303 	and.w	r3, r3, #3
 8006cbe:	2b01      	cmp	r3, #1
 8006cc0:	d005      	beq.n	8006cce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006cca:	2b02      	cmp	r3, #2
 8006ccc:	d130      	bne.n	8006d30 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	689b      	ldr	r3, [r3, #8]
 8006cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006cd4:	69fb      	ldr	r3, [r7, #28]
 8006cd6:	005b      	lsls	r3, r3, #1
 8006cd8:	2203      	movs	r2, #3
 8006cda:	fa02 f303 	lsl.w	r3, r2, r3
 8006cde:	43db      	mvns	r3, r3
 8006ce0:	69ba      	ldr	r2, [r7, #24]
 8006ce2:	4013      	ands	r3, r2
 8006ce4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	68da      	ldr	r2, [r3, #12]
 8006cea:	69fb      	ldr	r3, [r7, #28]
 8006cec:	005b      	lsls	r3, r3, #1
 8006cee:	fa02 f303 	lsl.w	r3, r2, r3
 8006cf2:	69ba      	ldr	r2, [r7, #24]
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	69ba      	ldr	r2, [r7, #24]
 8006cfc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006d04:	2201      	movs	r2, #1
 8006d06:	69fb      	ldr	r3, [r7, #28]
 8006d08:	fa02 f303 	lsl.w	r3, r2, r3
 8006d0c:	43db      	mvns	r3, r3
 8006d0e:	69ba      	ldr	r2, [r7, #24]
 8006d10:	4013      	ands	r3, r2
 8006d12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	685b      	ldr	r3, [r3, #4]
 8006d18:	091b      	lsrs	r3, r3, #4
 8006d1a:	f003 0201 	and.w	r2, r3, #1
 8006d1e:	69fb      	ldr	r3, [r7, #28]
 8006d20:	fa02 f303 	lsl.w	r3, r2, r3
 8006d24:	69ba      	ldr	r2, [r7, #24]
 8006d26:	4313      	orrs	r3, r2
 8006d28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	69ba      	ldr	r2, [r7, #24]
 8006d2e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	685b      	ldr	r3, [r3, #4]
 8006d34:	f003 0303 	and.w	r3, r3, #3
 8006d38:	2b03      	cmp	r3, #3
 8006d3a:	d017      	beq.n	8006d6c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	68db      	ldr	r3, [r3, #12]
 8006d40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006d42:	69fb      	ldr	r3, [r7, #28]
 8006d44:	005b      	lsls	r3, r3, #1
 8006d46:	2203      	movs	r2, #3
 8006d48:	fa02 f303 	lsl.w	r3, r2, r3
 8006d4c:	43db      	mvns	r3, r3
 8006d4e:	69ba      	ldr	r2, [r7, #24]
 8006d50:	4013      	ands	r3, r2
 8006d52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	689a      	ldr	r2, [r3, #8]
 8006d58:	69fb      	ldr	r3, [r7, #28]
 8006d5a:	005b      	lsls	r3, r3, #1
 8006d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8006d60:	69ba      	ldr	r2, [r7, #24]
 8006d62:	4313      	orrs	r3, r2
 8006d64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	69ba      	ldr	r2, [r7, #24]
 8006d6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	f003 0303 	and.w	r3, r3, #3
 8006d74:	2b02      	cmp	r3, #2
 8006d76:	d123      	bne.n	8006dc0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006d78:	69fb      	ldr	r3, [r7, #28]
 8006d7a:	08da      	lsrs	r2, r3, #3
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	3208      	adds	r2, #8
 8006d80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006d86:	69fb      	ldr	r3, [r7, #28]
 8006d88:	f003 0307 	and.w	r3, r3, #7
 8006d8c:	009b      	lsls	r3, r3, #2
 8006d8e:	220f      	movs	r2, #15
 8006d90:	fa02 f303 	lsl.w	r3, r2, r3
 8006d94:	43db      	mvns	r3, r3
 8006d96:	69ba      	ldr	r2, [r7, #24]
 8006d98:	4013      	ands	r3, r2
 8006d9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	691a      	ldr	r2, [r3, #16]
 8006da0:	69fb      	ldr	r3, [r7, #28]
 8006da2:	f003 0307 	and.w	r3, r3, #7
 8006da6:	009b      	lsls	r3, r3, #2
 8006da8:	fa02 f303 	lsl.w	r3, r2, r3
 8006dac:	69ba      	ldr	r2, [r7, #24]
 8006dae:	4313      	orrs	r3, r2
 8006db0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006db2:	69fb      	ldr	r3, [r7, #28]
 8006db4:	08da      	lsrs	r2, r3, #3
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	3208      	adds	r2, #8
 8006dba:	69b9      	ldr	r1, [r7, #24]
 8006dbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006dc6:	69fb      	ldr	r3, [r7, #28]
 8006dc8:	005b      	lsls	r3, r3, #1
 8006dca:	2203      	movs	r2, #3
 8006dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8006dd0:	43db      	mvns	r3, r3
 8006dd2:	69ba      	ldr	r2, [r7, #24]
 8006dd4:	4013      	ands	r3, r2
 8006dd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	f003 0203 	and.w	r2, r3, #3
 8006de0:	69fb      	ldr	r3, [r7, #28]
 8006de2:	005b      	lsls	r3, r3, #1
 8006de4:	fa02 f303 	lsl.w	r3, r2, r3
 8006de8:	69ba      	ldr	r2, [r7, #24]
 8006dea:	4313      	orrs	r3, r2
 8006dec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	69ba      	ldr	r2, [r7, #24]
 8006df2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	f000 80b4 	beq.w	8006f6a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006e02:	2300      	movs	r3, #0
 8006e04:	60fb      	str	r3, [r7, #12]
 8006e06:	4b60      	ldr	r3, [pc, #384]	@ (8006f88 <HAL_GPIO_Init+0x30c>)
 8006e08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e0a:	4a5f      	ldr	r2, [pc, #380]	@ (8006f88 <HAL_GPIO_Init+0x30c>)
 8006e0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006e10:	6453      	str	r3, [r2, #68]	@ 0x44
 8006e12:	4b5d      	ldr	r3, [pc, #372]	@ (8006f88 <HAL_GPIO_Init+0x30c>)
 8006e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006e1a:	60fb      	str	r3, [r7, #12]
 8006e1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006e1e:	4a5b      	ldr	r2, [pc, #364]	@ (8006f8c <HAL_GPIO_Init+0x310>)
 8006e20:	69fb      	ldr	r3, [r7, #28]
 8006e22:	089b      	lsrs	r3, r3, #2
 8006e24:	3302      	adds	r3, #2
 8006e26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006e2c:	69fb      	ldr	r3, [r7, #28]
 8006e2e:	f003 0303 	and.w	r3, r3, #3
 8006e32:	009b      	lsls	r3, r3, #2
 8006e34:	220f      	movs	r2, #15
 8006e36:	fa02 f303 	lsl.w	r3, r2, r3
 8006e3a:	43db      	mvns	r3, r3
 8006e3c:	69ba      	ldr	r2, [r7, #24]
 8006e3e:	4013      	ands	r3, r2
 8006e40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	4a52      	ldr	r2, [pc, #328]	@ (8006f90 <HAL_GPIO_Init+0x314>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d02b      	beq.n	8006ea2 <HAL_GPIO_Init+0x226>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	4a51      	ldr	r2, [pc, #324]	@ (8006f94 <HAL_GPIO_Init+0x318>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d025      	beq.n	8006e9e <HAL_GPIO_Init+0x222>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	4a50      	ldr	r2, [pc, #320]	@ (8006f98 <HAL_GPIO_Init+0x31c>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d01f      	beq.n	8006e9a <HAL_GPIO_Init+0x21e>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	4a4f      	ldr	r2, [pc, #316]	@ (8006f9c <HAL_GPIO_Init+0x320>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d019      	beq.n	8006e96 <HAL_GPIO_Init+0x21a>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	4a4e      	ldr	r2, [pc, #312]	@ (8006fa0 <HAL_GPIO_Init+0x324>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d013      	beq.n	8006e92 <HAL_GPIO_Init+0x216>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	4a4d      	ldr	r2, [pc, #308]	@ (8006fa4 <HAL_GPIO_Init+0x328>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d00d      	beq.n	8006e8e <HAL_GPIO_Init+0x212>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	4a4c      	ldr	r2, [pc, #304]	@ (8006fa8 <HAL_GPIO_Init+0x32c>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d007      	beq.n	8006e8a <HAL_GPIO_Init+0x20e>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	4a4b      	ldr	r2, [pc, #300]	@ (8006fac <HAL_GPIO_Init+0x330>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d101      	bne.n	8006e86 <HAL_GPIO_Init+0x20a>
 8006e82:	2307      	movs	r3, #7
 8006e84:	e00e      	b.n	8006ea4 <HAL_GPIO_Init+0x228>
 8006e86:	2308      	movs	r3, #8
 8006e88:	e00c      	b.n	8006ea4 <HAL_GPIO_Init+0x228>
 8006e8a:	2306      	movs	r3, #6
 8006e8c:	e00a      	b.n	8006ea4 <HAL_GPIO_Init+0x228>
 8006e8e:	2305      	movs	r3, #5
 8006e90:	e008      	b.n	8006ea4 <HAL_GPIO_Init+0x228>
 8006e92:	2304      	movs	r3, #4
 8006e94:	e006      	b.n	8006ea4 <HAL_GPIO_Init+0x228>
 8006e96:	2303      	movs	r3, #3
 8006e98:	e004      	b.n	8006ea4 <HAL_GPIO_Init+0x228>
 8006e9a:	2302      	movs	r3, #2
 8006e9c:	e002      	b.n	8006ea4 <HAL_GPIO_Init+0x228>
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	e000      	b.n	8006ea4 <HAL_GPIO_Init+0x228>
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	69fa      	ldr	r2, [r7, #28]
 8006ea6:	f002 0203 	and.w	r2, r2, #3
 8006eaa:	0092      	lsls	r2, r2, #2
 8006eac:	4093      	lsls	r3, r2
 8006eae:	69ba      	ldr	r2, [r7, #24]
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006eb4:	4935      	ldr	r1, [pc, #212]	@ (8006f8c <HAL_GPIO_Init+0x310>)
 8006eb6:	69fb      	ldr	r3, [r7, #28]
 8006eb8:	089b      	lsrs	r3, r3, #2
 8006eba:	3302      	adds	r3, #2
 8006ebc:	69ba      	ldr	r2, [r7, #24]
 8006ebe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006ec2:	4b3b      	ldr	r3, [pc, #236]	@ (8006fb0 <HAL_GPIO_Init+0x334>)
 8006ec4:	689b      	ldr	r3, [r3, #8]
 8006ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	43db      	mvns	r3, r3
 8006ecc:	69ba      	ldr	r2, [r7, #24]
 8006ece:	4013      	ands	r3, r2
 8006ed0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d003      	beq.n	8006ee6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8006ede:	69ba      	ldr	r2, [r7, #24]
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006ee6:	4a32      	ldr	r2, [pc, #200]	@ (8006fb0 <HAL_GPIO_Init+0x334>)
 8006ee8:	69bb      	ldr	r3, [r7, #24]
 8006eea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006eec:	4b30      	ldr	r3, [pc, #192]	@ (8006fb0 <HAL_GPIO_Init+0x334>)
 8006eee:	68db      	ldr	r3, [r3, #12]
 8006ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	43db      	mvns	r3, r3
 8006ef6:	69ba      	ldr	r2, [r7, #24]
 8006ef8:	4013      	ands	r3, r2
 8006efa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d003      	beq.n	8006f10 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006f08:	69ba      	ldr	r2, [r7, #24]
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006f10:	4a27      	ldr	r2, [pc, #156]	@ (8006fb0 <HAL_GPIO_Init+0x334>)
 8006f12:	69bb      	ldr	r3, [r7, #24]
 8006f14:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006f16:	4b26      	ldr	r3, [pc, #152]	@ (8006fb0 <HAL_GPIO_Init+0x334>)
 8006f18:	685b      	ldr	r3, [r3, #4]
 8006f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	43db      	mvns	r3, r3
 8006f20:	69ba      	ldr	r2, [r7, #24]
 8006f22:	4013      	ands	r3, r2
 8006f24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	685b      	ldr	r3, [r3, #4]
 8006f2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d003      	beq.n	8006f3a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8006f32:	69ba      	ldr	r2, [r7, #24]
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	4313      	orrs	r3, r2
 8006f38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006f3a:	4a1d      	ldr	r2, [pc, #116]	@ (8006fb0 <HAL_GPIO_Init+0x334>)
 8006f3c:	69bb      	ldr	r3, [r7, #24]
 8006f3e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006f40:	4b1b      	ldr	r3, [pc, #108]	@ (8006fb0 <HAL_GPIO_Init+0x334>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006f46:	693b      	ldr	r3, [r7, #16]
 8006f48:	43db      	mvns	r3, r3
 8006f4a:	69ba      	ldr	r2, [r7, #24]
 8006f4c:	4013      	ands	r3, r2
 8006f4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	685b      	ldr	r3, [r3, #4]
 8006f54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d003      	beq.n	8006f64 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006f5c:	69ba      	ldr	r2, [r7, #24]
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	4313      	orrs	r3, r2
 8006f62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006f64:	4a12      	ldr	r2, [pc, #72]	@ (8006fb0 <HAL_GPIO_Init+0x334>)
 8006f66:	69bb      	ldr	r3, [r7, #24]
 8006f68:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006f6a:	69fb      	ldr	r3, [r7, #28]
 8006f6c:	3301      	adds	r3, #1
 8006f6e:	61fb      	str	r3, [r7, #28]
 8006f70:	69fb      	ldr	r3, [r7, #28]
 8006f72:	2b0f      	cmp	r3, #15
 8006f74:	f67f ae90 	bls.w	8006c98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006f78:	bf00      	nop
 8006f7a:	bf00      	nop
 8006f7c:	3724      	adds	r7, #36	@ 0x24
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f84:	4770      	bx	lr
 8006f86:	bf00      	nop
 8006f88:	40023800 	.word	0x40023800
 8006f8c:	40013800 	.word	0x40013800
 8006f90:	40020000 	.word	0x40020000
 8006f94:	40020400 	.word	0x40020400
 8006f98:	40020800 	.word	0x40020800
 8006f9c:	40020c00 	.word	0x40020c00
 8006fa0:	40021000 	.word	0x40021000
 8006fa4:	40021400 	.word	0x40021400
 8006fa8:	40021800 	.word	0x40021800
 8006fac:	40021c00 	.word	0x40021c00
 8006fb0:	40013c00 	.word	0x40013c00

08006fb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b083      	sub	sp, #12
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
 8006fbc:	460b      	mov	r3, r1
 8006fbe:	807b      	strh	r3, [r7, #2]
 8006fc0:	4613      	mov	r3, r2
 8006fc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006fc4:	787b      	ldrb	r3, [r7, #1]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d003      	beq.n	8006fd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006fca:	887a      	ldrh	r2, [r7, #2]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006fd0:	e003      	b.n	8006fda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006fd2:	887b      	ldrh	r3, [r7, #2]
 8006fd4:	041a      	lsls	r2, r3, #16
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	619a      	str	r2, [r3, #24]
}
 8006fda:	bf00      	nop
 8006fdc:	370c      	adds	r7, #12
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe4:	4770      	bx	lr

08006fe6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006fe6:	b480      	push	{r7}
 8006fe8:	b085      	sub	sp, #20
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	6078      	str	r0, [r7, #4]
 8006fee:	460b      	mov	r3, r1
 8006ff0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	695b      	ldr	r3, [r3, #20]
 8006ff6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006ff8:	887a      	ldrh	r2, [r7, #2]
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	4013      	ands	r3, r2
 8006ffe:	041a      	lsls	r2, r3, #16
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	43d9      	mvns	r1, r3
 8007004:	887b      	ldrh	r3, [r7, #2]
 8007006:	400b      	ands	r3, r1
 8007008:	431a      	orrs	r2, r3
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	619a      	str	r2, [r3, #24]
}
 800700e:	bf00      	nop
 8007010:	3714      	adds	r7, #20
 8007012:	46bd      	mov	sp, r7
 8007014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007018:	4770      	bx	lr
	...

0800701c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b084      	sub	sp, #16
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d101      	bne.n	800702e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800702a:	2301      	movs	r3, #1
 800702c:	e12b      	b.n	8007286 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007034:	b2db      	uxtb	r3, r3
 8007036:	2b00      	cmp	r3, #0
 8007038:	d106      	bne.n	8007048 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2200      	movs	r2, #0
 800703e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f7fd fb20 	bl	8004688 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2224      	movs	r2, #36	@ 0x24
 800704c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	681a      	ldr	r2, [r3, #0]
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f022 0201 	bic.w	r2, r2, #1
 800705e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	681a      	ldr	r2, [r3, #0]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800706e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	681a      	ldr	r2, [r3, #0]
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800707e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007080:	f000 fe90 	bl	8007da4 <HAL_RCC_GetPCLK1Freq>
 8007084:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	685b      	ldr	r3, [r3, #4]
 800708a:	4a81      	ldr	r2, [pc, #516]	@ (8007290 <HAL_I2C_Init+0x274>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d807      	bhi.n	80070a0 <HAL_I2C_Init+0x84>
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	4a80      	ldr	r2, [pc, #512]	@ (8007294 <HAL_I2C_Init+0x278>)
 8007094:	4293      	cmp	r3, r2
 8007096:	bf94      	ite	ls
 8007098:	2301      	movls	r3, #1
 800709a:	2300      	movhi	r3, #0
 800709c:	b2db      	uxtb	r3, r3
 800709e:	e006      	b.n	80070ae <HAL_I2C_Init+0x92>
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	4a7d      	ldr	r2, [pc, #500]	@ (8007298 <HAL_I2C_Init+0x27c>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	bf94      	ite	ls
 80070a8:	2301      	movls	r3, #1
 80070aa:	2300      	movhi	r3, #0
 80070ac:	b2db      	uxtb	r3, r3
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d001      	beq.n	80070b6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80070b2:	2301      	movs	r3, #1
 80070b4:	e0e7      	b.n	8007286 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	4a78      	ldr	r2, [pc, #480]	@ (800729c <HAL_I2C_Init+0x280>)
 80070ba:	fba2 2303 	umull	r2, r3, r2, r3
 80070be:	0c9b      	lsrs	r3, r3, #18
 80070c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	685b      	ldr	r3, [r3, #4]
 80070c8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	68ba      	ldr	r2, [r7, #8]
 80070d2:	430a      	orrs	r2, r1
 80070d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	6a1b      	ldr	r3, [r3, #32]
 80070dc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	4a6a      	ldr	r2, [pc, #424]	@ (8007290 <HAL_I2C_Init+0x274>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d802      	bhi.n	80070f0 <HAL_I2C_Init+0xd4>
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	3301      	adds	r3, #1
 80070ee:	e009      	b.n	8007104 <HAL_I2C_Init+0xe8>
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80070f6:	fb02 f303 	mul.w	r3, r2, r3
 80070fa:	4a69      	ldr	r2, [pc, #420]	@ (80072a0 <HAL_I2C_Init+0x284>)
 80070fc:	fba2 2303 	umull	r2, r3, r2, r3
 8007100:	099b      	lsrs	r3, r3, #6
 8007102:	3301      	adds	r3, #1
 8007104:	687a      	ldr	r2, [r7, #4]
 8007106:	6812      	ldr	r2, [r2, #0]
 8007108:	430b      	orrs	r3, r1
 800710a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	69db      	ldr	r3, [r3, #28]
 8007112:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8007116:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	685b      	ldr	r3, [r3, #4]
 800711e:	495c      	ldr	r1, [pc, #368]	@ (8007290 <HAL_I2C_Init+0x274>)
 8007120:	428b      	cmp	r3, r1
 8007122:	d819      	bhi.n	8007158 <HAL_I2C_Init+0x13c>
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	1e59      	subs	r1, r3, #1
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	005b      	lsls	r3, r3, #1
 800712e:	fbb1 f3f3 	udiv	r3, r1, r3
 8007132:	1c59      	adds	r1, r3, #1
 8007134:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8007138:	400b      	ands	r3, r1
 800713a:	2b00      	cmp	r3, #0
 800713c:	d00a      	beq.n	8007154 <HAL_I2C_Init+0x138>
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	1e59      	subs	r1, r3, #1
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	685b      	ldr	r3, [r3, #4]
 8007146:	005b      	lsls	r3, r3, #1
 8007148:	fbb1 f3f3 	udiv	r3, r1, r3
 800714c:	3301      	adds	r3, #1
 800714e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007152:	e051      	b.n	80071f8 <HAL_I2C_Init+0x1dc>
 8007154:	2304      	movs	r3, #4
 8007156:	e04f      	b.n	80071f8 <HAL_I2C_Init+0x1dc>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	689b      	ldr	r3, [r3, #8]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d111      	bne.n	8007184 <HAL_I2C_Init+0x168>
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	1e58      	subs	r0, r3, #1
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6859      	ldr	r1, [r3, #4]
 8007168:	460b      	mov	r3, r1
 800716a:	005b      	lsls	r3, r3, #1
 800716c:	440b      	add	r3, r1
 800716e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007172:	3301      	adds	r3, #1
 8007174:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007178:	2b00      	cmp	r3, #0
 800717a:	bf0c      	ite	eq
 800717c:	2301      	moveq	r3, #1
 800717e:	2300      	movne	r3, #0
 8007180:	b2db      	uxtb	r3, r3
 8007182:	e012      	b.n	80071aa <HAL_I2C_Init+0x18e>
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	1e58      	subs	r0, r3, #1
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6859      	ldr	r1, [r3, #4]
 800718c:	460b      	mov	r3, r1
 800718e:	009b      	lsls	r3, r3, #2
 8007190:	440b      	add	r3, r1
 8007192:	0099      	lsls	r1, r3, #2
 8007194:	440b      	add	r3, r1
 8007196:	fbb0 f3f3 	udiv	r3, r0, r3
 800719a:	3301      	adds	r3, #1
 800719c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	bf0c      	ite	eq
 80071a4:	2301      	moveq	r3, #1
 80071a6:	2300      	movne	r3, #0
 80071a8:	b2db      	uxtb	r3, r3
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d001      	beq.n	80071b2 <HAL_I2C_Init+0x196>
 80071ae:	2301      	movs	r3, #1
 80071b0:	e022      	b.n	80071f8 <HAL_I2C_Init+0x1dc>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	689b      	ldr	r3, [r3, #8]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d10e      	bne.n	80071d8 <HAL_I2C_Init+0x1bc>
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	1e58      	subs	r0, r3, #1
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6859      	ldr	r1, [r3, #4]
 80071c2:	460b      	mov	r3, r1
 80071c4:	005b      	lsls	r3, r3, #1
 80071c6:	440b      	add	r3, r1
 80071c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80071cc:	3301      	adds	r3, #1
 80071ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80071d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80071d6:	e00f      	b.n	80071f8 <HAL_I2C_Init+0x1dc>
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	1e58      	subs	r0, r3, #1
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6859      	ldr	r1, [r3, #4]
 80071e0:	460b      	mov	r3, r1
 80071e2:	009b      	lsls	r3, r3, #2
 80071e4:	440b      	add	r3, r1
 80071e6:	0099      	lsls	r1, r3, #2
 80071e8:	440b      	add	r3, r1
 80071ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80071ee:	3301      	adds	r3, #1
 80071f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80071f4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80071f8:	6879      	ldr	r1, [r7, #4]
 80071fa:	6809      	ldr	r1, [r1, #0]
 80071fc:	4313      	orrs	r3, r2
 80071fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	69da      	ldr	r2, [r3, #28]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6a1b      	ldr	r3, [r3, #32]
 8007212:	431a      	orrs	r2, r3
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	430a      	orrs	r2, r1
 800721a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	689b      	ldr	r3, [r3, #8]
 8007222:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8007226:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800722a:	687a      	ldr	r2, [r7, #4]
 800722c:	6911      	ldr	r1, [r2, #16]
 800722e:	687a      	ldr	r2, [r7, #4]
 8007230:	68d2      	ldr	r2, [r2, #12]
 8007232:	4311      	orrs	r1, r2
 8007234:	687a      	ldr	r2, [r7, #4]
 8007236:	6812      	ldr	r2, [r2, #0]
 8007238:	430b      	orrs	r3, r1
 800723a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	68db      	ldr	r3, [r3, #12]
 8007242:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	695a      	ldr	r2, [r3, #20]
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	699b      	ldr	r3, [r3, #24]
 800724e:	431a      	orrs	r2, r3
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	430a      	orrs	r2, r1
 8007256:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	681a      	ldr	r2, [r3, #0]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f042 0201 	orr.w	r2, r2, #1
 8007266:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2200      	movs	r2, #0
 800726c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2220      	movs	r2, #32
 8007272:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2200      	movs	r2, #0
 800727a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2200      	movs	r2, #0
 8007280:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8007284:	2300      	movs	r3, #0
}
 8007286:	4618      	mov	r0, r3
 8007288:	3710      	adds	r7, #16
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}
 800728e:	bf00      	nop
 8007290:	000186a0 	.word	0x000186a0
 8007294:	001e847f 	.word	0x001e847f
 8007298:	003d08ff 	.word	0x003d08ff
 800729c:	431bde83 	.word	0x431bde83
 80072a0:	10624dd3 	.word	0x10624dd3

080072a4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b086      	sub	sp, #24
 80072a8:	af02      	add	r7, sp, #8
 80072aa:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d101      	bne.n	80072b6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80072b2:	2301      	movs	r3, #1
 80072b4:	e101      	b.n	80074ba <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80072c2:	b2db      	uxtb	r3, r3
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d106      	bne.n	80072d6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2200      	movs	r2, #0
 80072cc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f7fd fb7d 	bl	80049d0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2203      	movs	r2, #3
 80072da:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80072e4:	d102      	bne.n	80072ec <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2200      	movs	r2, #0
 80072ea:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4618      	mov	r0, r3
 80072f2:	f002 f8a9 	bl	8009448 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6818      	ldr	r0, [r3, #0]
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	7c1a      	ldrb	r2, [r3, #16]
 80072fe:	f88d 2000 	strb.w	r2, [sp]
 8007302:	3304      	adds	r3, #4
 8007304:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007306:	f002 f83b 	bl	8009380 <USB_CoreInit>
 800730a:	4603      	mov	r3, r0
 800730c:	2b00      	cmp	r3, #0
 800730e:	d005      	beq.n	800731c <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2202      	movs	r2, #2
 8007314:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8007318:	2301      	movs	r3, #1
 800731a:	e0ce      	b.n	80074ba <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	2100      	movs	r1, #0
 8007322:	4618      	mov	r0, r3
 8007324:	f002 f8a1 	bl	800946a <USB_SetCurrentMode>
 8007328:	4603      	mov	r3, r0
 800732a:	2b00      	cmp	r3, #0
 800732c:	d005      	beq.n	800733a <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2202      	movs	r2, #2
 8007332:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8007336:	2301      	movs	r3, #1
 8007338:	e0bf      	b.n	80074ba <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800733a:	2300      	movs	r3, #0
 800733c:	73fb      	strb	r3, [r7, #15]
 800733e:	e04a      	b.n	80073d6 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007340:	7bfa      	ldrb	r2, [r7, #15]
 8007342:	6879      	ldr	r1, [r7, #4]
 8007344:	4613      	mov	r3, r2
 8007346:	00db      	lsls	r3, r3, #3
 8007348:	4413      	add	r3, r2
 800734a:	009b      	lsls	r3, r3, #2
 800734c:	440b      	add	r3, r1
 800734e:	3315      	adds	r3, #21
 8007350:	2201      	movs	r2, #1
 8007352:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007354:	7bfa      	ldrb	r2, [r7, #15]
 8007356:	6879      	ldr	r1, [r7, #4]
 8007358:	4613      	mov	r3, r2
 800735a:	00db      	lsls	r3, r3, #3
 800735c:	4413      	add	r3, r2
 800735e:	009b      	lsls	r3, r3, #2
 8007360:	440b      	add	r3, r1
 8007362:	3314      	adds	r3, #20
 8007364:	7bfa      	ldrb	r2, [r7, #15]
 8007366:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007368:	7bfa      	ldrb	r2, [r7, #15]
 800736a:	7bfb      	ldrb	r3, [r7, #15]
 800736c:	b298      	uxth	r0, r3
 800736e:	6879      	ldr	r1, [r7, #4]
 8007370:	4613      	mov	r3, r2
 8007372:	00db      	lsls	r3, r3, #3
 8007374:	4413      	add	r3, r2
 8007376:	009b      	lsls	r3, r3, #2
 8007378:	440b      	add	r3, r1
 800737a:	332e      	adds	r3, #46	@ 0x2e
 800737c:	4602      	mov	r2, r0
 800737e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007380:	7bfa      	ldrb	r2, [r7, #15]
 8007382:	6879      	ldr	r1, [r7, #4]
 8007384:	4613      	mov	r3, r2
 8007386:	00db      	lsls	r3, r3, #3
 8007388:	4413      	add	r3, r2
 800738a:	009b      	lsls	r3, r3, #2
 800738c:	440b      	add	r3, r1
 800738e:	3318      	adds	r3, #24
 8007390:	2200      	movs	r2, #0
 8007392:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007394:	7bfa      	ldrb	r2, [r7, #15]
 8007396:	6879      	ldr	r1, [r7, #4]
 8007398:	4613      	mov	r3, r2
 800739a:	00db      	lsls	r3, r3, #3
 800739c:	4413      	add	r3, r2
 800739e:	009b      	lsls	r3, r3, #2
 80073a0:	440b      	add	r3, r1
 80073a2:	331c      	adds	r3, #28
 80073a4:	2200      	movs	r2, #0
 80073a6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80073a8:	7bfa      	ldrb	r2, [r7, #15]
 80073aa:	6879      	ldr	r1, [r7, #4]
 80073ac:	4613      	mov	r3, r2
 80073ae:	00db      	lsls	r3, r3, #3
 80073b0:	4413      	add	r3, r2
 80073b2:	009b      	lsls	r3, r3, #2
 80073b4:	440b      	add	r3, r1
 80073b6:	3320      	adds	r3, #32
 80073b8:	2200      	movs	r2, #0
 80073ba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80073bc:	7bfa      	ldrb	r2, [r7, #15]
 80073be:	6879      	ldr	r1, [r7, #4]
 80073c0:	4613      	mov	r3, r2
 80073c2:	00db      	lsls	r3, r3, #3
 80073c4:	4413      	add	r3, r2
 80073c6:	009b      	lsls	r3, r3, #2
 80073c8:	440b      	add	r3, r1
 80073ca:	3324      	adds	r3, #36	@ 0x24
 80073cc:	2200      	movs	r2, #0
 80073ce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80073d0:	7bfb      	ldrb	r3, [r7, #15]
 80073d2:	3301      	adds	r3, #1
 80073d4:	73fb      	strb	r3, [r7, #15]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	791b      	ldrb	r3, [r3, #4]
 80073da:	7bfa      	ldrb	r2, [r7, #15]
 80073dc:	429a      	cmp	r2, r3
 80073de:	d3af      	bcc.n	8007340 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80073e0:	2300      	movs	r3, #0
 80073e2:	73fb      	strb	r3, [r7, #15]
 80073e4:	e044      	b.n	8007470 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80073e6:	7bfa      	ldrb	r2, [r7, #15]
 80073e8:	6879      	ldr	r1, [r7, #4]
 80073ea:	4613      	mov	r3, r2
 80073ec:	00db      	lsls	r3, r3, #3
 80073ee:	4413      	add	r3, r2
 80073f0:	009b      	lsls	r3, r3, #2
 80073f2:	440b      	add	r3, r1
 80073f4:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80073f8:	2200      	movs	r2, #0
 80073fa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80073fc:	7bfa      	ldrb	r2, [r7, #15]
 80073fe:	6879      	ldr	r1, [r7, #4]
 8007400:	4613      	mov	r3, r2
 8007402:	00db      	lsls	r3, r3, #3
 8007404:	4413      	add	r3, r2
 8007406:	009b      	lsls	r3, r3, #2
 8007408:	440b      	add	r3, r1
 800740a:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800740e:	7bfa      	ldrb	r2, [r7, #15]
 8007410:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007412:	7bfa      	ldrb	r2, [r7, #15]
 8007414:	6879      	ldr	r1, [r7, #4]
 8007416:	4613      	mov	r3, r2
 8007418:	00db      	lsls	r3, r3, #3
 800741a:	4413      	add	r3, r2
 800741c:	009b      	lsls	r3, r3, #2
 800741e:	440b      	add	r3, r1
 8007420:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8007424:	2200      	movs	r2, #0
 8007426:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007428:	7bfa      	ldrb	r2, [r7, #15]
 800742a:	6879      	ldr	r1, [r7, #4]
 800742c:	4613      	mov	r3, r2
 800742e:	00db      	lsls	r3, r3, #3
 8007430:	4413      	add	r3, r2
 8007432:	009b      	lsls	r3, r3, #2
 8007434:	440b      	add	r3, r1
 8007436:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800743a:	2200      	movs	r2, #0
 800743c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800743e:	7bfa      	ldrb	r2, [r7, #15]
 8007440:	6879      	ldr	r1, [r7, #4]
 8007442:	4613      	mov	r3, r2
 8007444:	00db      	lsls	r3, r3, #3
 8007446:	4413      	add	r3, r2
 8007448:	009b      	lsls	r3, r3, #2
 800744a:	440b      	add	r3, r1
 800744c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007450:	2200      	movs	r2, #0
 8007452:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007454:	7bfa      	ldrb	r2, [r7, #15]
 8007456:	6879      	ldr	r1, [r7, #4]
 8007458:	4613      	mov	r3, r2
 800745a:	00db      	lsls	r3, r3, #3
 800745c:	4413      	add	r3, r2
 800745e:	009b      	lsls	r3, r3, #2
 8007460:	440b      	add	r3, r1
 8007462:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8007466:	2200      	movs	r2, #0
 8007468:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800746a:	7bfb      	ldrb	r3, [r7, #15]
 800746c:	3301      	adds	r3, #1
 800746e:	73fb      	strb	r3, [r7, #15]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	791b      	ldrb	r3, [r3, #4]
 8007474:	7bfa      	ldrb	r2, [r7, #15]
 8007476:	429a      	cmp	r2, r3
 8007478:	d3b5      	bcc.n	80073e6 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6818      	ldr	r0, [r3, #0]
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	7c1a      	ldrb	r2, [r3, #16]
 8007482:	f88d 2000 	strb.w	r2, [sp]
 8007486:	3304      	adds	r3, #4
 8007488:	cb0e      	ldmia	r3, {r1, r2, r3}
 800748a:	f002 f83b 	bl	8009504 <USB_DevInit>
 800748e:	4603      	mov	r3, r0
 8007490:	2b00      	cmp	r3, #0
 8007492:	d005      	beq.n	80074a0 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2202      	movs	r2, #2
 8007498:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800749c:	2301      	movs	r3, #1
 800749e:	e00c      	b.n	80074ba <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2200      	movs	r2, #0
 80074a4:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2201      	movs	r2, #1
 80074aa:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4618      	mov	r0, r3
 80074b4:	f002 fa03 	bl	80098be <USB_DevDisconnect>

  return HAL_OK;
 80074b8:	2300      	movs	r3, #0
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	3710      	adds	r7, #16
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}
	...

080074c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b086      	sub	sp, #24
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d101      	bne.n	80074d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80074d2:	2301      	movs	r3, #1
 80074d4:	e267      	b.n	80079a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f003 0301 	and.w	r3, r3, #1
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d075      	beq.n	80075ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80074e2:	4b88      	ldr	r3, [pc, #544]	@ (8007704 <HAL_RCC_OscConfig+0x240>)
 80074e4:	689b      	ldr	r3, [r3, #8]
 80074e6:	f003 030c 	and.w	r3, r3, #12
 80074ea:	2b04      	cmp	r3, #4
 80074ec:	d00c      	beq.n	8007508 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80074ee:	4b85      	ldr	r3, [pc, #532]	@ (8007704 <HAL_RCC_OscConfig+0x240>)
 80074f0:	689b      	ldr	r3, [r3, #8]
 80074f2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80074f6:	2b08      	cmp	r3, #8
 80074f8:	d112      	bne.n	8007520 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80074fa:	4b82      	ldr	r3, [pc, #520]	@ (8007704 <HAL_RCC_OscConfig+0x240>)
 80074fc:	685b      	ldr	r3, [r3, #4]
 80074fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007502:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007506:	d10b      	bne.n	8007520 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007508:	4b7e      	ldr	r3, [pc, #504]	@ (8007704 <HAL_RCC_OscConfig+0x240>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007510:	2b00      	cmp	r3, #0
 8007512:	d05b      	beq.n	80075cc <HAL_RCC_OscConfig+0x108>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	685b      	ldr	r3, [r3, #4]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d157      	bne.n	80075cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800751c:	2301      	movs	r3, #1
 800751e:	e242      	b.n	80079a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007528:	d106      	bne.n	8007538 <HAL_RCC_OscConfig+0x74>
 800752a:	4b76      	ldr	r3, [pc, #472]	@ (8007704 <HAL_RCC_OscConfig+0x240>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	4a75      	ldr	r2, [pc, #468]	@ (8007704 <HAL_RCC_OscConfig+0x240>)
 8007530:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007534:	6013      	str	r3, [r2, #0]
 8007536:	e01d      	b.n	8007574 <HAL_RCC_OscConfig+0xb0>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	685b      	ldr	r3, [r3, #4]
 800753c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007540:	d10c      	bne.n	800755c <HAL_RCC_OscConfig+0x98>
 8007542:	4b70      	ldr	r3, [pc, #448]	@ (8007704 <HAL_RCC_OscConfig+0x240>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4a6f      	ldr	r2, [pc, #444]	@ (8007704 <HAL_RCC_OscConfig+0x240>)
 8007548:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800754c:	6013      	str	r3, [r2, #0]
 800754e:	4b6d      	ldr	r3, [pc, #436]	@ (8007704 <HAL_RCC_OscConfig+0x240>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	4a6c      	ldr	r2, [pc, #432]	@ (8007704 <HAL_RCC_OscConfig+0x240>)
 8007554:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007558:	6013      	str	r3, [r2, #0]
 800755a:	e00b      	b.n	8007574 <HAL_RCC_OscConfig+0xb0>
 800755c:	4b69      	ldr	r3, [pc, #420]	@ (8007704 <HAL_RCC_OscConfig+0x240>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4a68      	ldr	r2, [pc, #416]	@ (8007704 <HAL_RCC_OscConfig+0x240>)
 8007562:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007566:	6013      	str	r3, [r2, #0]
 8007568:	4b66      	ldr	r3, [pc, #408]	@ (8007704 <HAL_RCC_OscConfig+0x240>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4a65      	ldr	r2, [pc, #404]	@ (8007704 <HAL_RCC_OscConfig+0x240>)
 800756e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007572:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	685b      	ldr	r3, [r3, #4]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d013      	beq.n	80075a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800757c:	f7fd fd30 	bl	8004fe0 <HAL_GetTick>
 8007580:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007582:	e008      	b.n	8007596 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007584:	f7fd fd2c 	bl	8004fe0 <HAL_GetTick>
 8007588:	4602      	mov	r2, r0
 800758a:	693b      	ldr	r3, [r7, #16]
 800758c:	1ad3      	subs	r3, r2, r3
 800758e:	2b64      	cmp	r3, #100	@ 0x64
 8007590:	d901      	bls.n	8007596 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007592:	2303      	movs	r3, #3
 8007594:	e207      	b.n	80079a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007596:	4b5b      	ldr	r3, [pc, #364]	@ (8007704 <HAL_RCC_OscConfig+0x240>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d0f0      	beq.n	8007584 <HAL_RCC_OscConfig+0xc0>
 80075a2:	e014      	b.n	80075ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075a4:	f7fd fd1c 	bl	8004fe0 <HAL_GetTick>
 80075a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80075aa:	e008      	b.n	80075be <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80075ac:	f7fd fd18 	bl	8004fe0 <HAL_GetTick>
 80075b0:	4602      	mov	r2, r0
 80075b2:	693b      	ldr	r3, [r7, #16]
 80075b4:	1ad3      	subs	r3, r2, r3
 80075b6:	2b64      	cmp	r3, #100	@ 0x64
 80075b8:	d901      	bls.n	80075be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80075ba:	2303      	movs	r3, #3
 80075bc:	e1f3      	b.n	80079a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80075be:	4b51      	ldr	r3, [pc, #324]	@ (8007704 <HAL_RCC_OscConfig+0x240>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d1f0      	bne.n	80075ac <HAL_RCC_OscConfig+0xe8>
 80075ca:	e000      	b.n	80075ce <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80075cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f003 0302 	and.w	r3, r3, #2
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d063      	beq.n	80076a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80075da:	4b4a      	ldr	r3, [pc, #296]	@ (8007704 <HAL_RCC_OscConfig+0x240>)
 80075dc:	689b      	ldr	r3, [r3, #8]
 80075de:	f003 030c 	and.w	r3, r3, #12
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d00b      	beq.n	80075fe <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80075e6:	4b47      	ldr	r3, [pc, #284]	@ (8007704 <HAL_RCC_OscConfig+0x240>)
 80075e8:	689b      	ldr	r3, [r3, #8]
 80075ea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80075ee:	2b08      	cmp	r3, #8
 80075f0:	d11c      	bne.n	800762c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80075f2:	4b44      	ldr	r3, [pc, #272]	@ (8007704 <HAL_RCC_OscConfig+0x240>)
 80075f4:	685b      	ldr	r3, [r3, #4]
 80075f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d116      	bne.n	800762c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80075fe:	4b41      	ldr	r3, [pc, #260]	@ (8007704 <HAL_RCC_OscConfig+0x240>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f003 0302 	and.w	r3, r3, #2
 8007606:	2b00      	cmp	r3, #0
 8007608:	d005      	beq.n	8007616 <HAL_RCC_OscConfig+0x152>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	68db      	ldr	r3, [r3, #12]
 800760e:	2b01      	cmp	r3, #1
 8007610:	d001      	beq.n	8007616 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007612:	2301      	movs	r3, #1
 8007614:	e1c7      	b.n	80079a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007616:	4b3b      	ldr	r3, [pc, #236]	@ (8007704 <HAL_RCC_OscConfig+0x240>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	691b      	ldr	r3, [r3, #16]
 8007622:	00db      	lsls	r3, r3, #3
 8007624:	4937      	ldr	r1, [pc, #220]	@ (8007704 <HAL_RCC_OscConfig+0x240>)
 8007626:	4313      	orrs	r3, r2
 8007628:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800762a:	e03a      	b.n	80076a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	68db      	ldr	r3, [r3, #12]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d020      	beq.n	8007676 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007634:	4b34      	ldr	r3, [pc, #208]	@ (8007708 <HAL_RCC_OscConfig+0x244>)
 8007636:	2201      	movs	r2, #1
 8007638:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800763a:	f7fd fcd1 	bl	8004fe0 <HAL_GetTick>
 800763e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007640:	e008      	b.n	8007654 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007642:	f7fd fccd 	bl	8004fe0 <HAL_GetTick>
 8007646:	4602      	mov	r2, r0
 8007648:	693b      	ldr	r3, [r7, #16]
 800764a:	1ad3      	subs	r3, r2, r3
 800764c:	2b02      	cmp	r3, #2
 800764e:	d901      	bls.n	8007654 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007650:	2303      	movs	r3, #3
 8007652:	e1a8      	b.n	80079a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007654:	4b2b      	ldr	r3, [pc, #172]	@ (8007704 <HAL_RCC_OscConfig+0x240>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f003 0302 	and.w	r3, r3, #2
 800765c:	2b00      	cmp	r3, #0
 800765e:	d0f0      	beq.n	8007642 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007660:	4b28      	ldr	r3, [pc, #160]	@ (8007704 <HAL_RCC_OscConfig+0x240>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	691b      	ldr	r3, [r3, #16]
 800766c:	00db      	lsls	r3, r3, #3
 800766e:	4925      	ldr	r1, [pc, #148]	@ (8007704 <HAL_RCC_OscConfig+0x240>)
 8007670:	4313      	orrs	r3, r2
 8007672:	600b      	str	r3, [r1, #0]
 8007674:	e015      	b.n	80076a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007676:	4b24      	ldr	r3, [pc, #144]	@ (8007708 <HAL_RCC_OscConfig+0x244>)
 8007678:	2200      	movs	r2, #0
 800767a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800767c:	f7fd fcb0 	bl	8004fe0 <HAL_GetTick>
 8007680:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007682:	e008      	b.n	8007696 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007684:	f7fd fcac 	bl	8004fe0 <HAL_GetTick>
 8007688:	4602      	mov	r2, r0
 800768a:	693b      	ldr	r3, [r7, #16]
 800768c:	1ad3      	subs	r3, r2, r3
 800768e:	2b02      	cmp	r3, #2
 8007690:	d901      	bls.n	8007696 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007692:	2303      	movs	r3, #3
 8007694:	e187      	b.n	80079a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007696:	4b1b      	ldr	r3, [pc, #108]	@ (8007704 <HAL_RCC_OscConfig+0x240>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f003 0302 	and.w	r3, r3, #2
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d1f0      	bne.n	8007684 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f003 0308 	and.w	r3, r3, #8
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d036      	beq.n	800771c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	695b      	ldr	r3, [r3, #20]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d016      	beq.n	80076e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80076b6:	4b15      	ldr	r3, [pc, #84]	@ (800770c <HAL_RCC_OscConfig+0x248>)
 80076b8:	2201      	movs	r2, #1
 80076ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076bc:	f7fd fc90 	bl	8004fe0 <HAL_GetTick>
 80076c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80076c2:	e008      	b.n	80076d6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80076c4:	f7fd fc8c 	bl	8004fe0 <HAL_GetTick>
 80076c8:	4602      	mov	r2, r0
 80076ca:	693b      	ldr	r3, [r7, #16]
 80076cc:	1ad3      	subs	r3, r2, r3
 80076ce:	2b02      	cmp	r3, #2
 80076d0:	d901      	bls.n	80076d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80076d2:	2303      	movs	r3, #3
 80076d4:	e167      	b.n	80079a6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80076d6:	4b0b      	ldr	r3, [pc, #44]	@ (8007704 <HAL_RCC_OscConfig+0x240>)
 80076d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80076da:	f003 0302 	and.w	r3, r3, #2
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d0f0      	beq.n	80076c4 <HAL_RCC_OscConfig+0x200>
 80076e2:	e01b      	b.n	800771c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80076e4:	4b09      	ldr	r3, [pc, #36]	@ (800770c <HAL_RCC_OscConfig+0x248>)
 80076e6:	2200      	movs	r2, #0
 80076e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80076ea:	f7fd fc79 	bl	8004fe0 <HAL_GetTick>
 80076ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80076f0:	e00e      	b.n	8007710 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80076f2:	f7fd fc75 	bl	8004fe0 <HAL_GetTick>
 80076f6:	4602      	mov	r2, r0
 80076f8:	693b      	ldr	r3, [r7, #16]
 80076fa:	1ad3      	subs	r3, r2, r3
 80076fc:	2b02      	cmp	r3, #2
 80076fe:	d907      	bls.n	8007710 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007700:	2303      	movs	r3, #3
 8007702:	e150      	b.n	80079a6 <HAL_RCC_OscConfig+0x4e2>
 8007704:	40023800 	.word	0x40023800
 8007708:	42470000 	.word	0x42470000
 800770c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007710:	4b88      	ldr	r3, [pc, #544]	@ (8007934 <HAL_RCC_OscConfig+0x470>)
 8007712:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007714:	f003 0302 	and.w	r3, r3, #2
 8007718:	2b00      	cmp	r3, #0
 800771a:	d1ea      	bne.n	80076f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f003 0304 	and.w	r3, r3, #4
 8007724:	2b00      	cmp	r3, #0
 8007726:	f000 8097 	beq.w	8007858 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800772a:	2300      	movs	r3, #0
 800772c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800772e:	4b81      	ldr	r3, [pc, #516]	@ (8007934 <HAL_RCC_OscConfig+0x470>)
 8007730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007732:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007736:	2b00      	cmp	r3, #0
 8007738:	d10f      	bne.n	800775a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800773a:	2300      	movs	r3, #0
 800773c:	60bb      	str	r3, [r7, #8]
 800773e:	4b7d      	ldr	r3, [pc, #500]	@ (8007934 <HAL_RCC_OscConfig+0x470>)
 8007740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007742:	4a7c      	ldr	r2, [pc, #496]	@ (8007934 <HAL_RCC_OscConfig+0x470>)
 8007744:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007748:	6413      	str	r3, [r2, #64]	@ 0x40
 800774a:	4b7a      	ldr	r3, [pc, #488]	@ (8007934 <HAL_RCC_OscConfig+0x470>)
 800774c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800774e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007752:	60bb      	str	r3, [r7, #8]
 8007754:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007756:	2301      	movs	r3, #1
 8007758:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800775a:	4b77      	ldr	r3, [pc, #476]	@ (8007938 <HAL_RCC_OscConfig+0x474>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007762:	2b00      	cmp	r3, #0
 8007764:	d118      	bne.n	8007798 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007766:	4b74      	ldr	r3, [pc, #464]	@ (8007938 <HAL_RCC_OscConfig+0x474>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	4a73      	ldr	r2, [pc, #460]	@ (8007938 <HAL_RCC_OscConfig+0x474>)
 800776c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007770:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007772:	f7fd fc35 	bl	8004fe0 <HAL_GetTick>
 8007776:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007778:	e008      	b.n	800778c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800777a:	f7fd fc31 	bl	8004fe0 <HAL_GetTick>
 800777e:	4602      	mov	r2, r0
 8007780:	693b      	ldr	r3, [r7, #16]
 8007782:	1ad3      	subs	r3, r2, r3
 8007784:	2b02      	cmp	r3, #2
 8007786:	d901      	bls.n	800778c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007788:	2303      	movs	r3, #3
 800778a:	e10c      	b.n	80079a6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800778c:	4b6a      	ldr	r3, [pc, #424]	@ (8007938 <HAL_RCC_OscConfig+0x474>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007794:	2b00      	cmp	r3, #0
 8007796:	d0f0      	beq.n	800777a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	689b      	ldr	r3, [r3, #8]
 800779c:	2b01      	cmp	r3, #1
 800779e:	d106      	bne.n	80077ae <HAL_RCC_OscConfig+0x2ea>
 80077a0:	4b64      	ldr	r3, [pc, #400]	@ (8007934 <HAL_RCC_OscConfig+0x470>)
 80077a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077a4:	4a63      	ldr	r2, [pc, #396]	@ (8007934 <HAL_RCC_OscConfig+0x470>)
 80077a6:	f043 0301 	orr.w	r3, r3, #1
 80077aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80077ac:	e01c      	b.n	80077e8 <HAL_RCC_OscConfig+0x324>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	689b      	ldr	r3, [r3, #8]
 80077b2:	2b05      	cmp	r3, #5
 80077b4:	d10c      	bne.n	80077d0 <HAL_RCC_OscConfig+0x30c>
 80077b6:	4b5f      	ldr	r3, [pc, #380]	@ (8007934 <HAL_RCC_OscConfig+0x470>)
 80077b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077ba:	4a5e      	ldr	r2, [pc, #376]	@ (8007934 <HAL_RCC_OscConfig+0x470>)
 80077bc:	f043 0304 	orr.w	r3, r3, #4
 80077c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80077c2:	4b5c      	ldr	r3, [pc, #368]	@ (8007934 <HAL_RCC_OscConfig+0x470>)
 80077c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077c6:	4a5b      	ldr	r2, [pc, #364]	@ (8007934 <HAL_RCC_OscConfig+0x470>)
 80077c8:	f043 0301 	orr.w	r3, r3, #1
 80077cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80077ce:	e00b      	b.n	80077e8 <HAL_RCC_OscConfig+0x324>
 80077d0:	4b58      	ldr	r3, [pc, #352]	@ (8007934 <HAL_RCC_OscConfig+0x470>)
 80077d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077d4:	4a57      	ldr	r2, [pc, #348]	@ (8007934 <HAL_RCC_OscConfig+0x470>)
 80077d6:	f023 0301 	bic.w	r3, r3, #1
 80077da:	6713      	str	r3, [r2, #112]	@ 0x70
 80077dc:	4b55      	ldr	r3, [pc, #340]	@ (8007934 <HAL_RCC_OscConfig+0x470>)
 80077de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077e0:	4a54      	ldr	r2, [pc, #336]	@ (8007934 <HAL_RCC_OscConfig+0x470>)
 80077e2:	f023 0304 	bic.w	r3, r3, #4
 80077e6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	689b      	ldr	r3, [r3, #8]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d015      	beq.n	800781c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077f0:	f7fd fbf6 	bl	8004fe0 <HAL_GetTick>
 80077f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80077f6:	e00a      	b.n	800780e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80077f8:	f7fd fbf2 	bl	8004fe0 <HAL_GetTick>
 80077fc:	4602      	mov	r2, r0
 80077fe:	693b      	ldr	r3, [r7, #16]
 8007800:	1ad3      	subs	r3, r2, r3
 8007802:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007806:	4293      	cmp	r3, r2
 8007808:	d901      	bls.n	800780e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800780a:	2303      	movs	r3, #3
 800780c:	e0cb      	b.n	80079a6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800780e:	4b49      	ldr	r3, [pc, #292]	@ (8007934 <HAL_RCC_OscConfig+0x470>)
 8007810:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007812:	f003 0302 	and.w	r3, r3, #2
 8007816:	2b00      	cmp	r3, #0
 8007818:	d0ee      	beq.n	80077f8 <HAL_RCC_OscConfig+0x334>
 800781a:	e014      	b.n	8007846 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800781c:	f7fd fbe0 	bl	8004fe0 <HAL_GetTick>
 8007820:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007822:	e00a      	b.n	800783a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007824:	f7fd fbdc 	bl	8004fe0 <HAL_GetTick>
 8007828:	4602      	mov	r2, r0
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	1ad3      	subs	r3, r2, r3
 800782e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007832:	4293      	cmp	r3, r2
 8007834:	d901      	bls.n	800783a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007836:	2303      	movs	r3, #3
 8007838:	e0b5      	b.n	80079a6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800783a:	4b3e      	ldr	r3, [pc, #248]	@ (8007934 <HAL_RCC_OscConfig+0x470>)
 800783c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800783e:	f003 0302 	and.w	r3, r3, #2
 8007842:	2b00      	cmp	r3, #0
 8007844:	d1ee      	bne.n	8007824 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007846:	7dfb      	ldrb	r3, [r7, #23]
 8007848:	2b01      	cmp	r3, #1
 800784a:	d105      	bne.n	8007858 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800784c:	4b39      	ldr	r3, [pc, #228]	@ (8007934 <HAL_RCC_OscConfig+0x470>)
 800784e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007850:	4a38      	ldr	r2, [pc, #224]	@ (8007934 <HAL_RCC_OscConfig+0x470>)
 8007852:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007856:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	699b      	ldr	r3, [r3, #24]
 800785c:	2b00      	cmp	r3, #0
 800785e:	f000 80a1 	beq.w	80079a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007862:	4b34      	ldr	r3, [pc, #208]	@ (8007934 <HAL_RCC_OscConfig+0x470>)
 8007864:	689b      	ldr	r3, [r3, #8]
 8007866:	f003 030c 	and.w	r3, r3, #12
 800786a:	2b08      	cmp	r3, #8
 800786c:	d05c      	beq.n	8007928 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	699b      	ldr	r3, [r3, #24]
 8007872:	2b02      	cmp	r3, #2
 8007874:	d141      	bne.n	80078fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007876:	4b31      	ldr	r3, [pc, #196]	@ (800793c <HAL_RCC_OscConfig+0x478>)
 8007878:	2200      	movs	r2, #0
 800787a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800787c:	f7fd fbb0 	bl	8004fe0 <HAL_GetTick>
 8007880:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007882:	e008      	b.n	8007896 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007884:	f7fd fbac 	bl	8004fe0 <HAL_GetTick>
 8007888:	4602      	mov	r2, r0
 800788a:	693b      	ldr	r3, [r7, #16]
 800788c:	1ad3      	subs	r3, r2, r3
 800788e:	2b02      	cmp	r3, #2
 8007890:	d901      	bls.n	8007896 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007892:	2303      	movs	r3, #3
 8007894:	e087      	b.n	80079a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007896:	4b27      	ldr	r3, [pc, #156]	@ (8007934 <HAL_RCC_OscConfig+0x470>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d1f0      	bne.n	8007884 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	69da      	ldr	r2, [r3, #28]
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6a1b      	ldr	r3, [r3, #32]
 80078aa:	431a      	orrs	r2, r3
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078b0:	019b      	lsls	r3, r3, #6
 80078b2:	431a      	orrs	r2, r3
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078b8:	085b      	lsrs	r3, r3, #1
 80078ba:	3b01      	subs	r3, #1
 80078bc:	041b      	lsls	r3, r3, #16
 80078be:	431a      	orrs	r2, r3
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078c4:	061b      	lsls	r3, r3, #24
 80078c6:	491b      	ldr	r1, [pc, #108]	@ (8007934 <HAL_RCC_OscConfig+0x470>)
 80078c8:	4313      	orrs	r3, r2
 80078ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80078cc:	4b1b      	ldr	r3, [pc, #108]	@ (800793c <HAL_RCC_OscConfig+0x478>)
 80078ce:	2201      	movs	r2, #1
 80078d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078d2:	f7fd fb85 	bl	8004fe0 <HAL_GetTick>
 80078d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80078d8:	e008      	b.n	80078ec <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80078da:	f7fd fb81 	bl	8004fe0 <HAL_GetTick>
 80078de:	4602      	mov	r2, r0
 80078e0:	693b      	ldr	r3, [r7, #16]
 80078e2:	1ad3      	subs	r3, r2, r3
 80078e4:	2b02      	cmp	r3, #2
 80078e6:	d901      	bls.n	80078ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80078e8:	2303      	movs	r3, #3
 80078ea:	e05c      	b.n	80079a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80078ec:	4b11      	ldr	r3, [pc, #68]	@ (8007934 <HAL_RCC_OscConfig+0x470>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d0f0      	beq.n	80078da <HAL_RCC_OscConfig+0x416>
 80078f8:	e054      	b.n	80079a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80078fa:	4b10      	ldr	r3, [pc, #64]	@ (800793c <HAL_RCC_OscConfig+0x478>)
 80078fc:	2200      	movs	r2, #0
 80078fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007900:	f7fd fb6e 	bl	8004fe0 <HAL_GetTick>
 8007904:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007906:	e008      	b.n	800791a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007908:	f7fd fb6a 	bl	8004fe0 <HAL_GetTick>
 800790c:	4602      	mov	r2, r0
 800790e:	693b      	ldr	r3, [r7, #16]
 8007910:	1ad3      	subs	r3, r2, r3
 8007912:	2b02      	cmp	r3, #2
 8007914:	d901      	bls.n	800791a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007916:	2303      	movs	r3, #3
 8007918:	e045      	b.n	80079a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800791a:	4b06      	ldr	r3, [pc, #24]	@ (8007934 <HAL_RCC_OscConfig+0x470>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007922:	2b00      	cmp	r3, #0
 8007924:	d1f0      	bne.n	8007908 <HAL_RCC_OscConfig+0x444>
 8007926:	e03d      	b.n	80079a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	699b      	ldr	r3, [r3, #24]
 800792c:	2b01      	cmp	r3, #1
 800792e:	d107      	bne.n	8007940 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007930:	2301      	movs	r3, #1
 8007932:	e038      	b.n	80079a6 <HAL_RCC_OscConfig+0x4e2>
 8007934:	40023800 	.word	0x40023800
 8007938:	40007000 	.word	0x40007000
 800793c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007940:	4b1b      	ldr	r3, [pc, #108]	@ (80079b0 <HAL_RCC_OscConfig+0x4ec>)
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	699b      	ldr	r3, [r3, #24]
 800794a:	2b01      	cmp	r3, #1
 800794c:	d028      	beq.n	80079a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007958:	429a      	cmp	r2, r3
 800795a:	d121      	bne.n	80079a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007966:	429a      	cmp	r2, r3
 8007968:	d11a      	bne.n	80079a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800796a:	68fa      	ldr	r2, [r7, #12]
 800796c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007970:	4013      	ands	r3, r2
 8007972:	687a      	ldr	r2, [r7, #4]
 8007974:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007976:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007978:	4293      	cmp	r3, r2
 800797a:	d111      	bne.n	80079a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007986:	085b      	lsrs	r3, r3, #1
 8007988:	3b01      	subs	r3, #1
 800798a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800798c:	429a      	cmp	r2, r3
 800798e:	d107      	bne.n	80079a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800799a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800799c:	429a      	cmp	r2, r3
 800799e:	d001      	beq.n	80079a4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80079a0:	2301      	movs	r3, #1
 80079a2:	e000      	b.n	80079a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80079a4:	2300      	movs	r3, #0
}
 80079a6:	4618      	mov	r0, r3
 80079a8:	3718      	adds	r7, #24
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}
 80079ae:	bf00      	nop
 80079b0:	40023800 	.word	0x40023800

080079b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b084      	sub	sp, #16
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
 80079bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d101      	bne.n	80079c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80079c4:	2301      	movs	r3, #1
 80079c6:	e0cc      	b.n	8007b62 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80079c8:	4b68      	ldr	r3, [pc, #416]	@ (8007b6c <HAL_RCC_ClockConfig+0x1b8>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f003 0307 	and.w	r3, r3, #7
 80079d0:	683a      	ldr	r2, [r7, #0]
 80079d2:	429a      	cmp	r2, r3
 80079d4:	d90c      	bls.n	80079f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80079d6:	4b65      	ldr	r3, [pc, #404]	@ (8007b6c <HAL_RCC_ClockConfig+0x1b8>)
 80079d8:	683a      	ldr	r2, [r7, #0]
 80079da:	b2d2      	uxtb	r2, r2
 80079dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80079de:	4b63      	ldr	r3, [pc, #396]	@ (8007b6c <HAL_RCC_ClockConfig+0x1b8>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f003 0307 	and.w	r3, r3, #7
 80079e6:	683a      	ldr	r2, [r7, #0]
 80079e8:	429a      	cmp	r2, r3
 80079ea:	d001      	beq.n	80079f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80079ec:	2301      	movs	r3, #1
 80079ee:	e0b8      	b.n	8007b62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f003 0302 	and.w	r3, r3, #2
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d020      	beq.n	8007a3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f003 0304 	and.w	r3, r3, #4
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d005      	beq.n	8007a14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007a08:	4b59      	ldr	r3, [pc, #356]	@ (8007b70 <HAL_RCC_ClockConfig+0x1bc>)
 8007a0a:	689b      	ldr	r3, [r3, #8]
 8007a0c:	4a58      	ldr	r2, [pc, #352]	@ (8007b70 <HAL_RCC_ClockConfig+0x1bc>)
 8007a0e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007a12:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f003 0308 	and.w	r3, r3, #8
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d005      	beq.n	8007a2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007a20:	4b53      	ldr	r3, [pc, #332]	@ (8007b70 <HAL_RCC_ClockConfig+0x1bc>)
 8007a22:	689b      	ldr	r3, [r3, #8]
 8007a24:	4a52      	ldr	r2, [pc, #328]	@ (8007b70 <HAL_RCC_ClockConfig+0x1bc>)
 8007a26:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007a2a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007a2c:	4b50      	ldr	r3, [pc, #320]	@ (8007b70 <HAL_RCC_ClockConfig+0x1bc>)
 8007a2e:	689b      	ldr	r3, [r3, #8]
 8007a30:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	689b      	ldr	r3, [r3, #8]
 8007a38:	494d      	ldr	r1, [pc, #308]	@ (8007b70 <HAL_RCC_ClockConfig+0x1bc>)
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f003 0301 	and.w	r3, r3, #1
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d044      	beq.n	8007ad4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	685b      	ldr	r3, [r3, #4]
 8007a4e:	2b01      	cmp	r3, #1
 8007a50:	d107      	bne.n	8007a62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a52:	4b47      	ldr	r3, [pc, #284]	@ (8007b70 <HAL_RCC_ClockConfig+0x1bc>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d119      	bne.n	8007a92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007a5e:	2301      	movs	r3, #1
 8007a60:	e07f      	b.n	8007b62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	685b      	ldr	r3, [r3, #4]
 8007a66:	2b02      	cmp	r3, #2
 8007a68:	d003      	beq.n	8007a72 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007a6e:	2b03      	cmp	r3, #3
 8007a70:	d107      	bne.n	8007a82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a72:	4b3f      	ldr	r3, [pc, #252]	@ (8007b70 <HAL_RCC_ClockConfig+0x1bc>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d109      	bne.n	8007a92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007a7e:	2301      	movs	r3, #1
 8007a80:	e06f      	b.n	8007b62 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a82:	4b3b      	ldr	r3, [pc, #236]	@ (8007b70 <HAL_RCC_ClockConfig+0x1bc>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f003 0302 	and.w	r3, r3, #2
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d101      	bne.n	8007a92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007a8e:	2301      	movs	r3, #1
 8007a90:	e067      	b.n	8007b62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007a92:	4b37      	ldr	r3, [pc, #220]	@ (8007b70 <HAL_RCC_ClockConfig+0x1bc>)
 8007a94:	689b      	ldr	r3, [r3, #8]
 8007a96:	f023 0203 	bic.w	r2, r3, #3
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	685b      	ldr	r3, [r3, #4]
 8007a9e:	4934      	ldr	r1, [pc, #208]	@ (8007b70 <HAL_RCC_ClockConfig+0x1bc>)
 8007aa0:	4313      	orrs	r3, r2
 8007aa2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007aa4:	f7fd fa9c 	bl	8004fe0 <HAL_GetTick>
 8007aa8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007aaa:	e00a      	b.n	8007ac2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007aac:	f7fd fa98 	bl	8004fe0 <HAL_GetTick>
 8007ab0:	4602      	mov	r2, r0
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	1ad3      	subs	r3, r2, r3
 8007ab6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d901      	bls.n	8007ac2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007abe:	2303      	movs	r3, #3
 8007ac0:	e04f      	b.n	8007b62 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ac2:	4b2b      	ldr	r3, [pc, #172]	@ (8007b70 <HAL_RCC_ClockConfig+0x1bc>)
 8007ac4:	689b      	ldr	r3, [r3, #8]
 8007ac6:	f003 020c 	and.w	r2, r3, #12
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	685b      	ldr	r3, [r3, #4]
 8007ace:	009b      	lsls	r3, r3, #2
 8007ad0:	429a      	cmp	r2, r3
 8007ad2:	d1eb      	bne.n	8007aac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007ad4:	4b25      	ldr	r3, [pc, #148]	@ (8007b6c <HAL_RCC_ClockConfig+0x1b8>)
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f003 0307 	and.w	r3, r3, #7
 8007adc:	683a      	ldr	r2, [r7, #0]
 8007ade:	429a      	cmp	r2, r3
 8007ae0:	d20c      	bcs.n	8007afc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ae2:	4b22      	ldr	r3, [pc, #136]	@ (8007b6c <HAL_RCC_ClockConfig+0x1b8>)
 8007ae4:	683a      	ldr	r2, [r7, #0]
 8007ae6:	b2d2      	uxtb	r2, r2
 8007ae8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007aea:	4b20      	ldr	r3, [pc, #128]	@ (8007b6c <HAL_RCC_ClockConfig+0x1b8>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f003 0307 	and.w	r3, r3, #7
 8007af2:	683a      	ldr	r2, [r7, #0]
 8007af4:	429a      	cmp	r2, r3
 8007af6:	d001      	beq.n	8007afc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007af8:	2301      	movs	r3, #1
 8007afa:	e032      	b.n	8007b62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f003 0304 	and.w	r3, r3, #4
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d008      	beq.n	8007b1a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007b08:	4b19      	ldr	r3, [pc, #100]	@ (8007b70 <HAL_RCC_ClockConfig+0x1bc>)
 8007b0a:	689b      	ldr	r3, [r3, #8]
 8007b0c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	68db      	ldr	r3, [r3, #12]
 8007b14:	4916      	ldr	r1, [pc, #88]	@ (8007b70 <HAL_RCC_ClockConfig+0x1bc>)
 8007b16:	4313      	orrs	r3, r2
 8007b18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f003 0308 	and.w	r3, r3, #8
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d009      	beq.n	8007b3a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007b26:	4b12      	ldr	r3, [pc, #72]	@ (8007b70 <HAL_RCC_ClockConfig+0x1bc>)
 8007b28:	689b      	ldr	r3, [r3, #8]
 8007b2a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	691b      	ldr	r3, [r3, #16]
 8007b32:	00db      	lsls	r3, r3, #3
 8007b34:	490e      	ldr	r1, [pc, #56]	@ (8007b70 <HAL_RCC_ClockConfig+0x1bc>)
 8007b36:	4313      	orrs	r3, r2
 8007b38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007b3a:	f000 f821 	bl	8007b80 <HAL_RCC_GetSysClockFreq>
 8007b3e:	4602      	mov	r2, r0
 8007b40:	4b0b      	ldr	r3, [pc, #44]	@ (8007b70 <HAL_RCC_ClockConfig+0x1bc>)
 8007b42:	689b      	ldr	r3, [r3, #8]
 8007b44:	091b      	lsrs	r3, r3, #4
 8007b46:	f003 030f 	and.w	r3, r3, #15
 8007b4a:	490a      	ldr	r1, [pc, #40]	@ (8007b74 <HAL_RCC_ClockConfig+0x1c0>)
 8007b4c:	5ccb      	ldrb	r3, [r1, r3]
 8007b4e:	fa22 f303 	lsr.w	r3, r2, r3
 8007b52:	4a09      	ldr	r2, [pc, #36]	@ (8007b78 <HAL_RCC_ClockConfig+0x1c4>)
 8007b54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8007b56:	4b09      	ldr	r3, [pc, #36]	@ (8007b7c <HAL_RCC_ClockConfig+0x1c8>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	f7fd f9fc 	bl	8004f58 <HAL_InitTick>

  return HAL_OK;
 8007b60:	2300      	movs	r3, #0
}
 8007b62:	4618      	mov	r0, r3
 8007b64:	3710      	adds	r7, #16
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bd80      	pop	{r7, pc}
 8007b6a:	bf00      	nop
 8007b6c:	40023c00 	.word	0x40023c00
 8007b70:	40023800 	.word	0x40023800
 8007b74:	08020bbc 	.word	0x08020bbc
 8007b78:	20000440 	.word	0x20000440
 8007b7c:	20000444 	.word	0x20000444

08007b80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007b80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b84:	b094      	sub	sp, #80	@ 0x50
 8007b86:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007b88:	2300      	movs	r3, #0
 8007b8a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8007b90:	2300      	movs	r3, #0
 8007b92:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8007b94:	2300      	movs	r3, #0
 8007b96:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007b98:	4b79      	ldr	r3, [pc, #484]	@ (8007d80 <HAL_RCC_GetSysClockFreq+0x200>)
 8007b9a:	689b      	ldr	r3, [r3, #8]
 8007b9c:	f003 030c 	and.w	r3, r3, #12
 8007ba0:	2b08      	cmp	r3, #8
 8007ba2:	d00d      	beq.n	8007bc0 <HAL_RCC_GetSysClockFreq+0x40>
 8007ba4:	2b08      	cmp	r3, #8
 8007ba6:	f200 80e1 	bhi.w	8007d6c <HAL_RCC_GetSysClockFreq+0x1ec>
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d002      	beq.n	8007bb4 <HAL_RCC_GetSysClockFreq+0x34>
 8007bae:	2b04      	cmp	r3, #4
 8007bb0:	d003      	beq.n	8007bba <HAL_RCC_GetSysClockFreq+0x3a>
 8007bb2:	e0db      	b.n	8007d6c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007bb4:	4b73      	ldr	r3, [pc, #460]	@ (8007d84 <HAL_RCC_GetSysClockFreq+0x204>)
 8007bb6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007bb8:	e0db      	b.n	8007d72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007bba:	4b73      	ldr	r3, [pc, #460]	@ (8007d88 <HAL_RCC_GetSysClockFreq+0x208>)
 8007bbc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007bbe:	e0d8      	b.n	8007d72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007bc0:	4b6f      	ldr	r3, [pc, #444]	@ (8007d80 <HAL_RCC_GetSysClockFreq+0x200>)
 8007bc2:	685b      	ldr	r3, [r3, #4]
 8007bc4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007bc8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007bca:	4b6d      	ldr	r3, [pc, #436]	@ (8007d80 <HAL_RCC_GetSysClockFreq+0x200>)
 8007bcc:	685b      	ldr	r3, [r3, #4]
 8007bce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d063      	beq.n	8007c9e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007bd6:	4b6a      	ldr	r3, [pc, #424]	@ (8007d80 <HAL_RCC_GetSysClockFreq+0x200>)
 8007bd8:	685b      	ldr	r3, [r3, #4]
 8007bda:	099b      	lsrs	r3, r3, #6
 8007bdc:	2200      	movs	r2, #0
 8007bde:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007be0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8007be2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007be4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007be8:	633b      	str	r3, [r7, #48]	@ 0x30
 8007bea:	2300      	movs	r3, #0
 8007bec:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8007bf2:	4622      	mov	r2, r4
 8007bf4:	462b      	mov	r3, r5
 8007bf6:	f04f 0000 	mov.w	r0, #0
 8007bfa:	f04f 0100 	mov.w	r1, #0
 8007bfe:	0159      	lsls	r1, r3, #5
 8007c00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007c04:	0150      	lsls	r0, r2, #5
 8007c06:	4602      	mov	r2, r0
 8007c08:	460b      	mov	r3, r1
 8007c0a:	4621      	mov	r1, r4
 8007c0c:	1a51      	subs	r1, r2, r1
 8007c0e:	6139      	str	r1, [r7, #16]
 8007c10:	4629      	mov	r1, r5
 8007c12:	eb63 0301 	sbc.w	r3, r3, r1
 8007c16:	617b      	str	r3, [r7, #20]
 8007c18:	f04f 0200 	mov.w	r2, #0
 8007c1c:	f04f 0300 	mov.w	r3, #0
 8007c20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007c24:	4659      	mov	r1, fp
 8007c26:	018b      	lsls	r3, r1, #6
 8007c28:	4651      	mov	r1, sl
 8007c2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007c2e:	4651      	mov	r1, sl
 8007c30:	018a      	lsls	r2, r1, #6
 8007c32:	4651      	mov	r1, sl
 8007c34:	ebb2 0801 	subs.w	r8, r2, r1
 8007c38:	4659      	mov	r1, fp
 8007c3a:	eb63 0901 	sbc.w	r9, r3, r1
 8007c3e:	f04f 0200 	mov.w	r2, #0
 8007c42:	f04f 0300 	mov.w	r3, #0
 8007c46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007c4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007c4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007c52:	4690      	mov	r8, r2
 8007c54:	4699      	mov	r9, r3
 8007c56:	4623      	mov	r3, r4
 8007c58:	eb18 0303 	adds.w	r3, r8, r3
 8007c5c:	60bb      	str	r3, [r7, #8]
 8007c5e:	462b      	mov	r3, r5
 8007c60:	eb49 0303 	adc.w	r3, r9, r3
 8007c64:	60fb      	str	r3, [r7, #12]
 8007c66:	f04f 0200 	mov.w	r2, #0
 8007c6a:	f04f 0300 	mov.w	r3, #0
 8007c6e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007c72:	4629      	mov	r1, r5
 8007c74:	024b      	lsls	r3, r1, #9
 8007c76:	4621      	mov	r1, r4
 8007c78:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007c7c:	4621      	mov	r1, r4
 8007c7e:	024a      	lsls	r2, r1, #9
 8007c80:	4610      	mov	r0, r2
 8007c82:	4619      	mov	r1, r3
 8007c84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c86:	2200      	movs	r2, #0
 8007c88:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007c8a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007c8c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007c90:	f7f9 f8e0 	bl	8000e54 <__aeabi_uldivmod>
 8007c94:	4602      	mov	r2, r0
 8007c96:	460b      	mov	r3, r1
 8007c98:	4613      	mov	r3, r2
 8007c9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007c9c:	e058      	b.n	8007d50 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007c9e:	4b38      	ldr	r3, [pc, #224]	@ (8007d80 <HAL_RCC_GetSysClockFreq+0x200>)
 8007ca0:	685b      	ldr	r3, [r3, #4]
 8007ca2:	099b      	lsrs	r3, r3, #6
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	4611      	mov	r1, r2
 8007caa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007cae:	623b      	str	r3, [r7, #32]
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	627b      	str	r3, [r7, #36]	@ 0x24
 8007cb4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007cb8:	4642      	mov	r2, r8
 8007cba:	464b      	mov	r3, r9
 8007cbc:	f04f 0000 	mov.w	r0, #0
 8007cc0:	f04f 0100 	mov.w	r1, #0
 8007cc4:	0159      	lsls	r1, r3, #5
 8007cc6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007cca:	0150      	lsls	r0, r2, #5
 8007ccc:	4602      	mov	r2, r0
 8007cce:	460b      	mov	r3, r1
 8007cd0:	4641      	mov	r1, r8
 8007cd2:	ebb2 0a01 	subs.w	sl, r2, r1
 8007cd6:	4649      	mov	r1, r9
 8007cd8:	eb63 0b01 	sbc.w	fp, r3, r1
 8007cdc:	f04f 0200 	mov.w	r2, #0
 8007ce0:	f04f 0300 	mov.w	r3, #0
 8007ce4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007ce8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007cec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007cf0:	ebb2 040a 	subs.w	r4, r2, sl
 8007cf4:	eb63 050b 	sbc.w	r5, r3, fp
 8007cf8:	f04f 0200 	mov.w	r2, #0
 8007cfc:	f04f 0300 	mov.w	r3, #0
 8007d00:	00eb      	lsls	r3, r5, #3
 8007d02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007d06:	00e2      	lsls	r2, r4, #3
 8007d08:	4614      	mov	r4, r2
 8007d0a:	461d      	mov	r5, r3
 8007d0c:	4643      	mov	r3, r8
 8007d0e:	18e3      	adds	r3, r4, r3
 8007d10:	603b      	str	r3, [r7, #0]
 8007d12:	464b      	mov	r3, r9
 8007d14:	eb45 0303 	adc.w	r3, r5, r3
 8007d18:	607b      	str	r3, [r7, #4]
 8007d1a:	f04f 0200 	mov.w	r2, #0
 8007d1e:	f04f 0300 	mov.w	r3, #0
 8007d22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007d26:	4629      	mov	r1, r5
 8007d28:	028b      	lsls	r3, r1, #10
 8007d2a:	4621      	mov	r1, r4
 8007d2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007d30:	4621      	mov	r1, r4
 8007d32:	028a      	lsls	r2, r1, #10
 8007d34:	4610      	mov	r0, r2
 8007d36:	4619      	mov	r1, r3
 8007d38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	61bb      	str	r3, [r7, #24]
 8007d3e:	61fa      	str	r2, [r7, #28]
 8007d40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007d44:	f7f9 f886 	bl	8000e54 <__aeabi_uldivmod>
 8007d48:	4602      	mov	r2, r0
 8007d4a:	460b      	mov	r3, r1
 8007d4c:	4613      	mov	r3, r2
 8007d4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8007d50:	4b0b      	ldr	r3, [pc, #44]	@ (8007d80 <HAL_RCC_GetSysClockFreq+0x200>)
 8007d52:	685b      	ldr	r3, [r3, #4]
 8007d54:	0c1b      	lsrs	r3, r3, #16
 8007d56:	f003 0303 	and.w	r3, r3, #3
 8007d5a:	3301      	adds	r3, #1
 8007d5c:	005b      	lsls	r3, r3, #1
 8007d5e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8007d60:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007d62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d68:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007d6a:	e002      	b.n	8007d72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007d6c:	4b05      	ldr	r3, [pc, #20]	@ (8007d84 <HAL_RCC_GetSysClockFreq+0x204>)
 8007d6e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007d70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007d72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	3750      	adds	r7, #80	@ 0x50
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007d7e:	bf00      	nop
 8007d80:	40023800 	.word	0x40023800
 8007d84:	00f42400 	.word	0x00f42400
 8007d88:	007a1200 	.word	0x007a1200

08007d8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007d90:	4b03      	ldr	r3, [pc, #12]	@ (8007da0 <HAL_RCC_GetHCLKFreq+0x14>)
 8007d92:	681b      	ldr	r3, [r3, #0]
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	46bd      	mov	sp, r7
 8007d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9c:	4770      	bx	lr
 8007d9e:	bf00      	nop
 8007da0:	20000440 	.word	0x20000440

08007da4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007da8:	f7ff fff0 	bl	8007d8c <HAL_RCC_GetHCLKFreq>
 8007dac:	4602      	mov	r2, r0
 8007dae:	4b05      	ldr	r3, [pc, #20]	@ (8007dc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007db0:	689b      	ldr	r3, [r3, #8]
 8007db2:	0a9b      	lsrs	r3, r3, #10
 8007db4:	f003 0307 	and.w	r3, r3, #7
 8007db8:	4903      	ldr	r1, [pc, #12]	@ (8007dc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007dba:	5ccb      	ldrb	r3, [r1, r3]
 8007dbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	bd80      	pop	{r7, pc}
 8007dc4:	40023800 	.word	0x40023800
 8007dc8:	08020bcc 	.word	0x08020bcc

08007dcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007dd0:	f7ff ffdc 	bl	8007d8c <HAL_RCC_GetHCLKFreq>
 8007dd4:	4602      	mov	r2, r0
 8007dd6:	4b05      	ldr	r3, [pc, #20]	@ (8007dec <HAL_RCC_GetPCLK2Freq+0x20>)
 8007dd8:	689b      	ldr	r3, [r3, #8]
 8007dda:	0b5b      	lsrs	r3, r3, #13
 8007ddc:	f003 0307 	and.w	r3, r3, #7
 8007de0:	4903      	ldr	r1, [pc, #12]	@ (8007df0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007de2:	5ccb      	ldrb	r3, [r1, r3]
 8007de4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	bd80      	pop	{r7, pc}
 8007dec:	40023800 	.word	0x40023800
 8007df0:	08020bcc 	.word	0x08020bcc

08007df4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b082      	sub	sp, #8
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d101      	bne.n	8007e06 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007e02:	2301      	movs	r3, #1
 8007e04:	e07b      	b.n	8007efe <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d108      	bne.n	8007e20 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	685b      	ldr	r3, [r3, #4]
 8007e12:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007e16:	d009      	beq.n	8007e2c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	61da      	str	r2, [r3, #28]
 8007e1e:	e005      	b.n	8007e2c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2200      	movs	r2, #0
 8007e24:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2200      	movs	r2, #0
 8007e2a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007e38:	b2db      	uxtb	r3, r3
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d106      	bne.n	8007e4c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2200      	movs	r2, #0
 8007e42:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f7fc fc66 	bl	8004718 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2202      	movs	r2, #2
 8007e50:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	681a      	ldr	r2, [r3, #0]
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007e62:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	685b      	ldr	r3, [r3, #4]
 8007e68:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	689b      	ldr	r3, [r3, #8]
 8007e70:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007e74:	431a      	orrs	r2, r3
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	68db      	ldr	r3, [r3, #12]
 8007e7a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007e7e:	431a      	orrs	r2, r3
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	691b      	ldr	r3, [r3, #16]
 8007e84:	f003 0302 	and.w	r3, r3, #2
 8007e88:	431a      	orrs	r2, r3
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	695b      	ldr	r3, [r3, #20]
 8007e8e:	f003 0301 	and.w	r3, r3, #1
 8007e92:	431a      	orrs	r2, r3
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	699b      	ldr	r3, [r3, #24]
 8007e98:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007e9c:	431a      	orrs	r2, r3
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	69db      	ldr	r3, [r3, #28]
 8007ea2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007ea6:	431a      	orrs	r2, r3
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6a1b      	ldr	r3, [r3, #32]
 8007eac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007eb0:	ea42 0103 	orr.w	r1, r2, r3
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007eb8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	430a      	orrs	r2, r1
 8007ec2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	699b      	ldr	r3, [r3, #24]
 8007ec8:	0c1b      	lsrs	r3, r3, #16
 8007eca:	f003 0104 	and.w	r1, r3, #4
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ed2:	f003 0210 	and.w	r2, r3, #16
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	430a      	orrs	r2, r1
 8007edc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	69da      	ldr	r2, [r3, #28]
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007eec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007efc:	2300      	movs	r3, #0
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	3708      	adds	r7, #8
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}

08007f06 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007f06:	b580      	push	{r7, lr}
 8007f08:	b082      	sub	sp, #8
 8007f0a:	af00      	add	r7, sp, #0
 8007f0c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d101      	bne.n	8007f18 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007f14:	2301      	movs	r3, #1
 8007f16:	e041      	b.n	8007f9c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007f1e:	b2db      	uxtb	r3, r3
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d106      	bne.n	8007f32 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2200      	movs	r2, #0
 8007f28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f7fc fc3b 	bl	80047a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2202      	movs	r2, #2
 8007f36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681a      	ldr	r2, [r3, #0]
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	3304      	adds	r3, #4
 8007f42:	4619      	mov	r1, r3
 8007f44:	4610      	mov	r0, r2
 8007f46:	f000 fbd1 	bl	80086ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2201      	movs	r2, #1
 8007f4e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2201      	movs	r2, #1
 8007f56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2201      	movs	r2, #1
 8007f5e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2201      	movs	r2, #1
 8007f66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2201      	movs	r2, #1
 8007f6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2201      	movs	r2, #1
 8007f76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2201      	movs	r2, #1
 8007f7e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2201      	movs	r2, #1
 8007f86:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2201      	movs	r2, #1
 8007f8e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2201      	movs	r2, #1
 8007f96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007f9a:	2300      	movs	r3, #0
}
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	3708      	adds	r7, #8
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bd80      	pop	{r7, pc}

08007fa4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	b085      	sub	sp, #20
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007fb2:	b2db      	uxtb	r3, r3
 8007fb4:	2b01      	cmp	r3, #1
 8007fb6:	d001      	beq.n	8007fbc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007fb8:	2301      	movs	r3, #1
 8007fba:	e04e      	b.n	800805a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2202      	movs	r2, #2
 8007fc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	68da      	ldr	r2, [r3, #12]
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f042 0201 	orr.w	r2, r2, #1
 8007fd2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a23      	ldr	r2, [pc, #140]	@ (8008068 <HAL_TIM_Base_Start_IT+0xc4>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d022      	beq.n	8008024 <HAL_TIM_Base_Start_IT+0x80>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007fe6:	d01d      	beq.n	8008024 <HAL_TIM_Base_Start_IT+0x80>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	4a1f      	ldr	r2, [pc, #124]	@ (800806c <HAL_TIM_Base_Start_IT+0xc8>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d018      	beq.n	8008024 <HAL_TIM_Base_Start_IT+0x80>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	4a1e      	ldr	r2, [pc, #120]	@ (8008070 <HAL_TIM_Base_Start_IT+0xcc>)
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	d013      	beq.n	8008024 <HAL_TIM_Base_Start_IT+0x80>
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	4a1c      	ldr	r2, [pc, #112]	@ (8008074 <HAL_TIM_Base_Start_IT+0xd0>)
 8008002:	4293      	cmp	r3, r2
 8008004:	d00e      	beq.n	8008024 <HAL_TIM_Base_Start_IT+0x80>
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	4a1b      	ldr	r2, [pc, #108]	@ (8008078 <HAL_TIM_Base_Start_IT+0xd4>)
 800800c:	4293      	cmp	r3, r2
 800800e:	d009      	beq.n	8008024 <HAL_TIM_Base_Start_IT+0x80>
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	4a19      	ldr	r2, [pc, #100]	@ (800807c <HAL_TIM_Base_Start_IT+0xd8>)
 8008016:	4293      	cmp	r3, r2
 8008018:	d004      	beq.n	8008024 <HAL_TIM_Base_Start_IT+0x80>
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4a18      	ldr	r2, [pc, #96]	@ (8008080 <HAL_TIM_Base_Start_IT+0xdc>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d111      	bne.n	8008048 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	689b      	ldr	r3, [r3, #8]
 800802a:	f003 0307 	and.w	r3, r3, #7
 800802e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	2b06      	cmp	r3, #6
 8008034:	d010      	beq.n	8008058 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	681a      	ldr	r2, [r3, #0]
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f042 0201 	orr.w	r2, r2, #1
 8008044:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008046:	e007      	b.n	8008058 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	681a      	ldr	r2, [r3, #0]
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f042 0201 	orr.w	r2, r2, #1
 8008056:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008058:	2300      	movs	r3, #0
}
 800805a:	4618      	mov	r0, r3
 800805c:	3714      	adds	r7, #20
 800805e:	46bd      	mov	sp, r7
 8008060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008064:	4770      	bx	lr
 8008066:	bf00      	nop
 8008068:	40010000 	.word	0x40010000
 800806c:	40000400 	.word	0x40000400
 8008070:	40000800 	.word	0x40000800
 8008074:	40000c00 	.word	0x40000c00
 8008078:	40010400 	.word	0x40010400
 800807c:	40014000 	.word	0x40014000
 8008080:	40001800 	.word	0x40001800

08008084 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008084:	b480      	push	{r7}
 8008086:	b083      	sub	sp, #12
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	68da      	ldr	r2, [r3, #12]
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f022 0201 	bic.w	r2, r2, #1
 800809a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	6a1a      	ldr	r2, [r3, #32]
 80080a2:	f241 1311 	movw	r3, #4369	@ 0x1111
 80080a6:	4013      	ands	r3, r2
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d10f      	bne.n	80080cc <HAL_TIM_Base_Stop_IT+0x48>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	6a1a      	ldr	r2, [r3, #32]
 80080b2:	f240 4344 	movw	r3, #1092	@ 0x444
 80080b6:	4013      	ands	r3, r2
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d107      	bne.n	80080cc <HAL_TIM_Base_Stop_IT+0x48>
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	681a      	ldr	r2, [r3, #0]
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f022 0201 	bic.w	r2, r2, #1
 80080ca:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2201      	movs	r2, #1
 80080d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80080d4:	2300      	movs	r3, #0
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	370c      	adds	r7, #12
 80080da:	46bd      	mov	sp, r7
 80080dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e0:	4770      	bx	lr

080080e2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80080e2:	b580      	push	{r7, lr}
 80080e4:	b082      	sub	sp, #8
 80080e6:	af00      	add	r7, sp, #0
 80080e8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d101      	bne.n	80080f4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80080f0:	2301      	movs	r3, #1
 80080f2:	e041      	b.n	8008178 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80080fa:	b2db      	uxtb	r3, r3
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d106      	bne.n	800810e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2200      	movs	r2, #0
 8008104:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f000 f839 	bl	8008180 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2202      	movs	r2, #2
 8008112:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681a      	ldr	r2, [r3, #0]
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	3304      	adds	r3, #4
 800811e:	4619      	mov	r1, r3
 8008120:	4610      	mov	r0, r2
 8008122:	f000 fae3 	bl	80086ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2201      	movs	r2, #1
 800812a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2201      	movs	r2, #1
 8008132:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2201      	movs	r2, #1
 800813a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2201      	movs	r2, #1
 8008142:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2201      	movs	r2, #1
 800814a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2201      	movs	r2, #1
 8008152:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2201      	movs	r2, #1
 800815a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2201      	movs	r2, #1
 8008162:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2201      	movs	r2, #1
 800816a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2201      	movs	r2, #1
 8008172:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008176:	2300      	movs	r3, #0
}
 8008178:	4618      	mov	r0, r3
 800817a:	3708      	adds	r7, #8
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}

08008180 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008180:	b480      	push	{r7}
 8008182:	b083      	sub	sp, #12
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008188:	bf00      	nop
 800818a:	370c      	adds	r7, #12
 800818c:	46bd      	mov	sp, r7
 800818e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008192:	4770      	bx	lr

08008194 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b084      	sub	sp, #16
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	68db      	ldr	r3, [r3, #12]
 80081a2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	691b      	ldr	r3, [r3, #16]
 80081aa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	f003 0302 	and.w	r3, r3, #2
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d020      	beq.n	80081f8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	f003 0302 	and.w	r3, r3, #2
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d01b      	beq.n	80081f8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f06f 0202 	mvn.w	r2, #2
 80081c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2201      	movs	r2, #1
 80081ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	699b      	ldr	r3, [r3, #24]
 80081d6:	f003 0303 	and.w	r3, r3, #3
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d003      	beq.n	80081e6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f000 fa65 	bl	80086ae <HAL_TIM_IC_CaptureCallback>
 80081e4:	e005      	b.n	80081f2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f000 fa57 	bl	800869a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f000 fa68 	bl	80086c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2200      	movs	r2, #0
 80081f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	f003 0304 	and.w	r3, r3, #4
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d020      	beq.n	8008244 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	f003 0304 	and.w	r3, r3, #4
 8008208:	2b00      	cmp	r3, #0
 800820a:	d01b      	beq.n	8008244 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f06f 0204 	mvn.w	r2, #4
 8008214:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2202      	movs	r2, #2
 800821a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	699b      	ldr	r3, [r3, #24]
 8008222:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008226:	2b00      	cmp	r3, #0
 8008228:	d003      	beq.n	8008232 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f000 fa3f 	bl	80086ae <HAL_TIM_IC_CaptureCallback>
 8008230:	e005      	b.n	800823e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	f000 fa31 	bl	800869a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008238:	6878      	ldr	r0, [r7, #4]
 800823a:	f000 fa42 	bl	80086c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2200      	movs	r2, #0
 8008242:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	f003 0308 	and.w	r3, r3, #8
 800824a:	2b00      	cmp	r3, #0
 800824c:	d020      	beq.n	8008290 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	f003 0308 	and.w	r3, r3, #8
 8008254:	2b00      	cmp	r3, #0
 8008256:	d01b      	beq.n	8008290 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f06f 0208 	mvn.w	r2, #8
 8008260:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2204      	movs	r2, #4
 8008266:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	69db      	ldr	r3, [r3, #28]
 800826e:	f003 0303 	and.w	r3, r3, #3
 8008272:	2b00      	cmp	r3, #0
 8008274:	d003      	beq.n	800827e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f000 fa19 	bl	80086ae <HAL_TIM_IC_CaptureCallback>
 800827c:	e005      	b.n	800828a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f000 fa0b 	bl	800869a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f000 fa1c 	bl	80086c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2200      	movs	r2, #0
 800828e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	f003 0310 	and.w	r3, r3, #16
 8008296:	2b00      	cmp	r3, #0
 8008298:	d020      	beq.n	80082dc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	f003 0310 	and.w	r3, r3, #16
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d01b      	beq.n	80082dc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f06f 0210 	mvn.w	r2, #16
 80082ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2208      	movs	r2, #8
 80082b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	69db      	ldr	r3, [r3, #28]
 80082ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d003      	beq.n	80082ca <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f000 f9f3 	bl	80086ae <HAL_TIM_IC_CaptureCallback>
 80082c8:	e005      	b.n	80082d6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f000 f9e5 	bl	800869a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f000 f9f6 	bl	80086c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2200      	movs	r2, #0
 80082da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	f003 0301 	and.w	r3, r3, #1
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d00c      	beq.n	8008300 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	f003 0301 	and.w	r3, r3, #1
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d007      	beq.n	8008300 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f06f 0201 	mvn.w	r2, #1
 80082f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f000 f9c3 	bl	8008686 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008306:	2b00      	cmp	r3, #0
 8008308:	d00c      	beq.n	8008324 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008310:	2b00      	cmp	r3, #0
 8008312:	d007      	beq.n	8008324 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800831c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f000 fd60 	bl	8008de4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800832a:	2b00      	cmp	r3, #0
 800832c:	d00c      	beq.n	8008348 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008334:	2b00      	cmp	r3, #0
 8008336:	d007      	beq.n	8008348 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008340:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f000 f9c7 	bl	80086d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	f003 0320 	and.w	r3, r3, #32
 800834e:	2b00      	cmp	r3, #0
 8008350:	d00c      	beq.n	800836c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	f003 0320 	and.w	r3, r3, #32
 8008358:	2b00      	cmp	r3, #0
 800835a:	d007      	beq.n	800836c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f06f 0220 	mvn.w	r2, #32
 8008364:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f000 fd32 	bl	8008dd0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800836c:	bf00      	nop
 800836e:	3710      	adds	r7, #16
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}

08008374 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b086      	sub	sp, #24
 8008378:	af00      	add	r7, sp, #0
 800837a:	60f8      	str	r0, [r7, #12]
 800837c:	60b9      	str	r1, [r7, #8]
 800837e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008380:	2300      	movs	r3, #0
 8008382:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800838a:	2b01      	cmp	r3, #1
 800838c:	d101      	bne.n	8008392 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800838e:	2302      	movs	r3, #2
 8008390:	e0ae      	b.n	80084f0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	2201      	movs	r2, #1
 8008396:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2b0c      	cmp	r3, #12
 800839e:	f200 809f 	bhi.w	80084e0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80083a2:	a201      	add	r2, pc, #4	@ (adr r2, 80083a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80083a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083a8:	080083dd 	.word	0x080083dd
 80083ac:	080084e1 	.word	0x080084e1
 80083b0:	080084e1 	.word	0x080084e1
 80083b4:	080084e1 	.word	0x080084e1
 80083b8:	0800841d 	.word	0x0800841d
 80083bc:	080084e1 	.word	0x080084e1
 80083c0:	080084e1 	.word	0x080084e1
 80083c4:	080084e1 	.word	0x080084e1
 80083c8:	0800845f 	.word	0x0800845f
 80083cc:	080084e1 	.word	0x080084e1
 80083d0:	080084e1 	.word	0x080084e1
 80083d4:	080084e1 	.word	0x080084e1
 80083d8:	0800849f 	.word	0x0800849f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	68b9      	ldr	r1, [r7, #8]
 80083e2:	4618      	mov	r0, r3
 80083e4:	f000 fa2e 	bl	8008844 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	699a      	ldr	r2, [r3, #24]
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f042 0208 	orr.w	r2, r2, #8
 80083f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	699a      	ldr	r2, [r3, #24]
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f022 0204 	bic.w	r2, r2, #4
 8008406:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	6999      	ldr	r1, [r3, #24]
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	691a      	ldr	r2, [r3, #16]
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	430a      	orrs	r2, r1
 8008418:	619a      	str	r2, [r3, #24]
      break;
 800841a:	e064      	b.n	80084e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	68b9      	ldr	r1, [r7, #8]
 8008422:	4618      	mov	r0, r3
 8008424:	f000 fa7e 	bl	8008924 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	699a      	ldr	r2, [r3, #24]
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008436:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	699a      	ldr	r2, [r3, #24]
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008446:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	6999      	ldr	r1, [r3, #24]
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	691b      	ldr	r3, [r3, #16]
 8008452:	021a      	lsls	r2, r3, #8
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	430a      	orrs	r2, r1
 800845a:	619a      	str	r2, [r3, #24]
      break;
 800845c:	e043      	b.n	80084e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	68b9      	ldr	r1, [r7, #8]
 8008464:	4618      	mov	r0, r3
 8008466:	f000 fad3 	bl	8008a10 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	69da      	ldr	r2, [r3, #28]
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f042 0208 	orr.w	r2, r2, #8
 8008478:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	69da      	ldr	r2, [r3, #28]
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f022 0204 	bic.w	r2, r2, #4
 8008488:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	69d9      	ldr	r1, [r3, #28]
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	691a      	ldr	r2, [r3, #16]
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	430a      	orrs	r2, r1
 800849a:	61da      	str	r2, [r3, #28]
      break;
 800849c:	e023      	b.n	80084e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	68b9      	ldr	r1, [r7, #8]
 80084a4:	4618      	mov	r0, r3
 80084a6:	f000 fb27 	bl	8008af8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	69da      	ldr	r2, [r3, #28]
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80084b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	69da      	ldr	r2, [r3, #28]
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80084c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	69d9      	ldr	r1, [r3, #28]
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	691b      	ldr	r3, [r3, #16]
 80084d4:	021a      	lsls	r2, r3, #8
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	430a      	orrs	r2, r1
 80084dc:	61da      	str	r2, [r3, #28]
      break;
 80084de:	e002      	b.n	80084e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80084e0:	2301      	movs	r3, #1
 80084e2:	75fb      	strb	r3, [r7, #23]
      break;
 80084e4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	2200      	movs	r2, #0
 80084ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80084ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80084f0:	4618      	mov	r0, r3
 80084f2:	3718      	adds	r7, #24
 80084f4:	46bd      	mov	sp, r7
 80084f6:	bd80      	pop	{r7, pc}

080084f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b084      	sub	sp, #16
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
 8008500:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008502:	2300      	movs	r3, #0
 8008504:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800850c:	2b01      	cmp	r3, #1
 800850e:	d101      	bne.n	8008514 <HAL_TIM_ConfigClockSource+0x1c>
 8008510:	2302      	movs	r3, #2
 8008512:	e0b4      	b.n	800867e <HAL_TIM_ConfigClockSource+0x186>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2201      	movs	r2, #1
 8008518:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2202      	movs	r2, #2
 8008520:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	689b      	ldr	r3, [r3, #8]
 800852a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800852c:	68bb      	ldr	r3, [r7, #8]
 800852e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008532:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008534:	68bb      	ldr	r3, [r7, #8]
 8008536:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800853a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	68ba      	ldr	r2, [r7, #8]
 8008542:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800854c:	d03e      	beq.n	80085cc <HAL_TIM_ConfigClockSource+0xd4>
 800854e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008552:	f200 8087 	bhi.w	8008664 <HAL_TIM_ConfigClockSource+0x16c>
 8008556:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800855a:	f000 8086 	beq.w	800866a <HAL_TIM_ConfigClockSource+0x172>
 800855e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008562:	d87f      	bhi.n	8008664 <HAL_TIM_ConfigClockSource+0x16c>
 8008564:	2b70      	cmp	r3, #112	@ 0x70
 8008566:	d01a      	beq.n	800859e <HAL_TIM_ConfigClockSource+0xa6>
 8008568:	2b70      	cmp	r3, #112	@ 0x70
 800856a:	d87b      	bhi.n	8008664 <HAL_TIM_ConfigClockSource+0x16c>
 800856c:	2b60      	cmp	r3, #96	@ 0x60
 800856e:	d050      	beq.n	8008612 <HAL_TIM_ConfigClockSource+0x11a>
 8008570:	2b60      	cmp	r3, #96	@ 0x60
 8008572:	d877      	bhi.n	8008664 <HAL_TIM_ConfigClockSource+0x16c>
 8008574:	2b50      	cmp	r3, #80	@ 0x50
 8008576:	d03c      	beq.n	80085f2 <HAL_TIM_ConfigClockSource+0xfa>
 8008578:	2b50      	cmp	r3, #80	@ 0x50
 800857a:	d873      	bhi.n	8008664 <HAL_TIM_ConfigClockSource+0x16c>
 800857c:	2b40      	cmp	r3, #64	@ 0x40
 800857e:	d058      	beq.n	8008632 <HAL_TIM_ConfigClockSource+0x13a>
 8008580:	2b40      	cmp	r3, #64	@ 0x40
 8008582:	d86f      	bhi.n	8008664 <HAL_TIM_ConfigClockSource+0x16c>
 8008584:	2b30      	cmp	r3, #48	@ 0x30
 8008586:	d064      	beq.n	8008652 <HAL_TIM_ConfigClockSource+0x15a>
 8008588:	2b30      	cmp	r3, #48	@ 0x30
 800858a:	d86b      	bhi.n	8008664 <HAL_TIM_ConfigClockSource+0x16c>
 800858c:	2b20      	cmp	r3, #32
 800858e:	d060      	beq.n	8008652 <HAL_TIM_ConfigClockSource+0x15a>
 8008590:	2b20      	cmp	r3, #32
 8008592:	d867      	bhi.n	8008664 <HAL_TIM_ConfigClockSource+0x16c>
 8008594:	2b00      	cmp	r3, #0
 8008596:	d05c      	beq.n	8008652 <HAL_TIM_ConfigClockSource+0x15a>
 8008598:	2b10      	cmp	r3, #16
 800859a:	d05a      	beq.n	8008652 <HAL_TIM_ConfigClockSource+0x15a>
 800859c:	e062      	b.n	8008664 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80085ae:	f000 fb73 	bl	8008c98 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	689b      	ldr	r3, [r3, #8]
 80085b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80085c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	68ba      	ldr	r2, [r7, #8]
 80085c8:	609a      	str	r2, [r3, #8]
      break;
 80085ca:	e04f      	b.n	800866c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80085dc:	f000 fb5c 	bl	8008c98 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	689a      	ldr	r2, [r3, #8]
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80085ee:	609a      	str	r2, [r3, #8]
      break;
 80085f0:	e03c      	b.n	800866c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80085fe:	461a      	mov	r2, r3
 8008600:	f000 fad0 	bl	8008ba4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	2150      	movs	r1, #80	@ 0x50
 800860a:	4618      	mov	r0, r3
 800860c:	f000 fb29 	bl	8008c62 <TIM_ITRx_SetConfig>
      break;
 8008610:	e02c      	b.n	800866c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800861e:	461a      	mov	r2, r3
 8008620:	f000 faef 	bl	8008c02 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	2160      	movs	r1, #96	@ 0x60
 800862a:	4618      	mov	r0, r3
 800862c:	f000 fb19 	bl	8008c62 <TIM_ITRx_SetConfig>
      break;
 8008630:	e01c      	b.n	800866c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800863e:	461a      	mov	r2, r3
 8008640:	f000 fab0 	bl	8008ba4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	2140      	movs	r1, #64	@ 0x40
 800864a:	4618      	mov	r0, r3
 800864c:	f000 fb09 	bl	8008c62 <TIM_ITRx_SetConfig>
      break;
 8008650:	e00c      	b.n	800866c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681a      	ldr	r2, [r3, #0]
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	4619      	mov	r1, r3
 800865c:	4610      	mov	r0, r2
 800865e:	f000 fb00 	bl	8008c62 <TIM_ITRx_SetConfig>
      break;
 8008662:	e003      	b.n	800866c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008664:	2301      	movs	r3, #1
 8008666:	73fb      	strb	r3, [r7, #15]
      break;
 8008668:	e000      	b.n	800866c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800866a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2201      	movs	r2, #1
 8008670:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2200      	movs	r2, #0
 8008678:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800867c:	7bfb      	ldrb	r3, [r7, #15]
}
 800867e:	4618      	mov	r0, r3
 8008680:	3710      	adds	r7, #16
 8008682:	46bd      	mov	sp, r7
 8008684:	bd80      	pop	{r7, pc}

08008686 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008686:	b480      	push	{r7}
 8008688:	b083      	sub	sp, #12
 800868a:	af00      	add	r7, sp, #0
 800868c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800868e:	bf00      	nop
 8008690:	370c      	adds	r7, #12
 8008692:	46bd      	mov	sp, r7
 8008694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008698:	4770      	bx	lr

0800869a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800869a:	b480      	push	{r7}
 800869c:	b083      	sub	sp, #12
 800869e:	af00      	add	r7, sp, #0
 80086a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80086a2:	bf00      	nop
 80086a4:	370c      	adds	r7, #12
 80086a6:	46bd      	mov	sp, r7
 80086a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ac:	4770      	bx	lr

080086ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80086ae:	b480      	push	{r7}
 80086b0:	b083      	sub	sp, #12
 80086b2:	af00      	add	r7, sp, #0
 80086b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80086b6:	bf00      	nop
 80086b8:	370c      	adds	r7, #12
 80086ba:	46bd      	mov	sp, r7
 80086bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c0:	4770      	bx	lr

080086c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80086c2:	b480      	push	{r7}
 80086c4:	b083      	sub	sp, #12
 80086c6:	af00      	add	r7, sp, #0
 80086c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80086ca:	bf00      	nop
 80086cc:	370c      	adds	r7, #12
 80086ce:	46bd      	mov	sp, r7
 80086d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d4:	4770      	bx	lr

080086d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80086d6:	b480      	push	{r7}
 80086d8:	b083      	sub	sp, #12
 80086da:	af00      	add	r7, sp, #0
 80086dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80086de:	bf00      	nop
 80086e0:	370c      	adds	r7, #12
 80086e2:	46bd      	mov	sp, r7
 80086e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e8:	4770      	bx	lr
	...

080086ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80086ec:	b480      	push	{r7}
 80086ee:	b085      	sub	sp, #20
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
 80086f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	4a46      	ldr	r2, [pc, #280]	@ (8008818 <TIM_Base_SetConfig+0x12c>)
 8008700:	4293      	cmp	r3, r2
 8008702:	d013      	beq.n	800872c <TIM_Base_SetConfig+0x40>
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800870a:	d00f      	beq.n	800872c <TIM_Base_SetConfig+0x40>
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	4a43      	ldr	r2, [pc, #268]	@ (800881c <TIM_Base_SetConfig+0x130>)
 8008710:	4293      	cmp	r3, r2
 8008712:	d00b      	beq.n	800872c <TIM_Base_SetConfig+0x40>
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	4a42      	ldr	r2, [pc, #264]	@ (8008820 <TIM_Base_SetConfig+0x134>)
 8008718:	4293      	cmp	r3, r2
 800871a:	d007      	beq.n	800872c <TIM_Base_SetConfig+0x40>
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	4a41      	ldr	r2, [pc, #260]	@ (8008824 <TIM_Base_SetConfig+0x138>)
 8008720:	4293      	cmp	r3, r2
 8008722:	d003      	beq.n	800872c <TIM_Base_SetConfig+0x40>
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	4a40      	ldr	r2, [pc, #256]	@ (8008828 <TIM_Base_SetConfig+0x13c>)
 8008728:	4293      	cmp	r3, r2
 800872a:	d108      	bne.n	800873e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008732:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	685b      	ldr	r3, [r3, #4]
 8008738:	68fa      	ldr	r2, [r7, #12]
 800873a:	4313      	orrs	r3, r2
 800873c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	4a35      	ldr	r2, [pc, #212]	@ (8008818 <TIM_Base_SetConfig+0x12c>)
 8008742:	4293      	cmp	r3, r2
 8008744:	d02b      	beq.n	800879e <TIM_Base_SetConfig+0xb2>
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800874c:	d027      	beq.n	800879e <TIM_Base_SetConfig+0xb2>
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	4a32      	ldr	r2, [pc, #200]	@ (800881c <TIM_Base_SetConfig+0x130>)
 8008752:	4293      	cmp	r3, r2
 8008754:	d023      	beq.n	800879e <TIM_Base_SetConfig+0xb2>
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	4a31      	ldr	r2, [pc, #196]	@ (8008820 <TIM_Base_SetConfig+0x134>)
 800875a:	4293      	cmp	r3, r2
 800875c:	d01f      	beq.n	800879e <TIM_Base_SetConfig+0xb2>
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	4a30      	ldr	r2, [pc, #192]	@ (8008824 <TIM_Base_SetConfig+0x138>)
 8008762:	4293      	cmp	r3, r2
 8008764:	d01b      	beq.n	800879e <TIM_Base_SetConfig+0xb2>
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	4a2f      	ldr	r2, [pc, #188]	@ (8008828 <TIM_Base_SetConfig+0x13c>)
 800876a:	4293      	cmp	r3, r2
 800876c:	d017      	beq.n	800879e <TIM_Base_SetConfig+0xb2>
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	4a2e      	ldr	r2, [pc, #184]	@ (800882c <TIM_Base_SetConfig+0x140>)
 8008772:	4293      	cmp	r3, r2
 8008774:	d013      	beq.n	800879e <TIM_Base_SetConfig+0xb2>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	4a2d      	ldr	r2, [pc, #180]	@ (8008830 <TIM_Base_SetConfig+0x144>)
 800877a:	4293      	cmp	r3, r2
 800877c:	d00f      	beq.n	800879e <TIM_Base_SetConfig+0xb2>
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	4a2c      	ldr	r2, [pc, #176]	@ (8008834 <TIM_Base_SetConfig+0x148>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d00b      	beq.n	800879e <TIM_Base_SetConfig+0xb2>
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	4a2b      	ldr	r2, [pc, #172]	@ (8008838 <TIM_Base_SetConfig+0x14c>)
 800878a:	4293      	cmp	r3, r2
 800878c:	d007      	beq.n	800879e <TIM_Base_SetConfig+0xb2>
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	4a2a      	ldr	r2, [pc, #168]	@ (800883c <TIM_Base_SetConfig+0x150>)
 8008792:	4293      	cmp	r3, r2
 8008794:	d003      	beq.n	800879e <TIM_Base_SetConfig+0xb2>
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	4a29      	ldr	r2, [pc, #164]	@ (8008840 <TIM_Base_SetConfig+0x154>)
 800879a:	4293      	cmp	r3, r2
 800879c:	d108      	bne.n	80087b0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80087a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	68db      	ldr	r3, [r3, #12]
 80087aa:	68fa      	ldr	r2, [r7, #12]
 80087ac:	4313      	orrs	r3, r2
 80087ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	695b      	ldr	r3, [r3, #20]
 80087ba:	4313      	orrs	r3, r2
 80087bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	68fa      	ldr	r2, [r7, #12]
 80087c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	689a      	ldr	r2, [r3, #8]
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	681a      	ldr	r2, [r3, #0]
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	4a10      	ldr	r2, [pc, #64]	@ (8008818 <TIM_Base_SetConfig+0x12c>)
 80087d8:	4293      	cmp	r3, r2
 80087da:	d003      	beq.n	80087e4 <TIM_Base_SetConfig+0xf8>
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	4a12      	ldr	r2, [pc, #72]	@ (8008828 <TIM_Base_SetConfig+0x13c>)
 80087e0:	4293      	cmp	r3, r2
 80087e2:	d103      	bne.n	80087ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	691a      	ldr	r2, [r3, #16]
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2201      	movs	r2, #1
 80087f0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	691b      	ldr	r3, [r3, #16]
 80087f6:	f003 0301 	and.w	r3, r3, #1
 80087fa:	2b01      	cmp	r3, #1
 80087fc:	d105      	bne.n	800880a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	691b      	ldr	r3, [r3, #16]
 8008802:	f023 0201 	bic.w	r2, r3, #1
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	611a      	str	r2, [r3, #16]
  }
}
 800880a:	bf00      	nop
 800880c:	3714      	adds	r7, #20
 800880e:	46bd      	mov	sp, r7
 8008810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008814:	4770      	bx	lr
 8008816:	bf00      	nop
 8008818:	40010000 	.word	0x40010000
 800881c:	40000400 	.word	0x40000400
 8008820:	40000800 	.word	0x40000800
 8008824:	40000c00 	.word	0x40000c00
 8008828:	40010400 	.word	0x40010400
 800882c:	40014000 	.word	0x40014000
 8008830:	40014400 	.word	0x40014400
 8008834:	40014800 	.word	0x40014800
 8008838:	40001800 	.word	0x40001800
 800883c:	40001c00 	.word	0x40001c00
 8008840:	40002000 	.word	0x40002000

08008844 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008844:	b480      	push	{r7}
 8008846:	b087      	sub	sp, #28
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
 800884c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6a1b      	ldr	r3, [r3, #32]
 8008852:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6a1b      	ldr	r3, [r3, #32]
 8008858:	f023 0201 	bic.w	r2, r3, #1
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	685b      	ldr	r3, [r3, #4]
 8008864:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	699b      	ldr	r3, [r3, #24]
 800886a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008872:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	f023 0303 	bic.w	r3, r3, #3
 800887a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	68fa      	ldr	r2, [r7, #12]
 8008882:	4313      	orrs	r3, r2
 8008884:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008886:	697b      	ldr	r3, [r7, #20]
 8008888:	f023 0302 	bic.w	r3, r3, #2
 800888c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	689b      	ldr	r3, [r3, #8]
 8008892:	697a      	ldr	r2, [r7, #20]
 8008894:	4313      	orrs	r3, r2
 8008896:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	4a20      	ldr	r2, [pc, #128]	@ (800891c <TIM_OC1_SetConfig+0xd8>)
 800889c:	4293      	cmp	r3, r2
 800889e:	d003      	beq.n	80088a8 <TIM_OC1_SetConfig+0x64>
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	4a1f      	ldr	r2, [pc, #124]	@ (8008920 <TIM_OC1_SetConfig+0xdc>)
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d10c      	bne.n	80088c2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80088a8:	697b      	ldr	r3, [r7, #20]
 80088aa:	f023 0308 	bic.w	r3, r3, #8
 80088ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	68db      	ldr	r3, [r3, #12]
 80088b4:	697a      	ldr	r2, [r7, #20]
 80088b6:	4313      	orrs	r3, r2
 80088b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80088ba:	697b      	ldr	r3, [r7, #20]
 80088bc:	f023 0304 	bic.w	r3, r3, #4
 80088c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	4a15      	ldr	r2, [pc, #84]	@ (800891c <TIM_OC1_SetConfig+0xd8>)
 80088c6:	4293      	cmp	r3, r2
 80088c8:	d003      	beq.n	80088d2 <TIM_OC1_SetConfig+0x8e>
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	4a14      	ldr	r2, [pc, #80]	@ (8008920 <TIM_OC1_SetConfig+0xdc>)
 80088ce:	4293      	cmp	r3, r2
 80088d0:	d111      	bne.n	80088f6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80088d2:	693b      	ldr	r3, [r7, #16]
 80088d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80088d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80088da:	693b      	ldr	r3, [r7, #16]
 80088dc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80088e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	695b      	ldr	r3, [r3, #20]
 80088e6:	693a      	ldr	r2, [r7, #16]
 80088e8:	4313      	orrs	r3, r2
 80088ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	699b      	ldr	r3, [r3, #24]
 80088f0:	693a      	ldr	r2, [r7, #16]
 80088f2:	4313      	orrs	r3, r2
 80088f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	693a      	ldr	r2, [r7, #16]
 80088fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	68fa      	ldr	r2, [r7, #12]
 8008900:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	685a      	ldr	r2, [r3, #4]
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	697a      	ldr	r2, [r7, #20]
 800890e:	621a      	str	r2, [r3, #32]
}
 8008910:	bf00      	nop
 8008912:	371c      	adds	r7, #28
 8008914:	46bd      	mov	sp, r7
 8008916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891a:	4770      	bx	lr
 800891c:	40010000 	.word	0x40010000
 8008920:	40010400 	.word	0x40010400

08008924 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008924:	b480      	push	{r7}
 8008926:	b087      	sub	sp, #28
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
 800892c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6a1b      	ldr	r3, [r3, #32]
 8008932:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	6a1b      	ldr	r3, [r3, #32]
 8008938:	f023 0210 	bic.w	r2, r3, #16
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	685b      	ldr	r3, [r3, #4]
 8008944:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	699b      	ldr	r3, [r3, #24]
 800894a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008952:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800895a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	021b      	lsls	r3, r3, #8
 8008962:	68fa      	ldr	r2, [r7, #12]
 8008964:	4313      	orrs	r3, r2
 8008966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008968:	697b      	ldr	r3, [r7, #20]
 800896a:	f023 0320 	bic.w	r3, r3, #32
 800896e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	689b      	ldr	r3, [r3, #8]
 8008974:	011b      	lsls	r3, r3, #4
 8008976:	697a      	ldr	r2, [r7, #20]
 8008978:	4313      	orrs	r3, r2
 800897a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	4a22      	ldr	r2, [pc, #136]	@ (8008a08 <TIM_OC2_SetConfig+0xe4>)
 8008980:	4293      	cmp	r3, r2
 8008982:	d003      	beq.n	800898c <TIM_OC2_SetConfig+0x68>
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	4a21      	ldr	r2, [pc, #132]	@ (8008a0c <TIM_OC2_SetConfig+0xe8>)
 8008988:	4293      	cmp	r3, r2
 800898a:	d10d      	bne.n	80089a8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800898c:	697b      	ldr	r3, [r7, #20]
 800898e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008992:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	68db      	ldr	r3, [r3, #12]
 8008998:	011b      	lsls	r3, r3, #4
 800899a:	697a      	ldr	r2, [r7, #20]
 800899c:	4313      	orrs	r3, r2
 800899e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80089a0:	697b      	ldr	r3, [r7, #20]
 80089a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80089a6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	4a17      	ldr	r2, [pc, #92]	@ (8008a08 <TIM_OC2_SetConfig+0xe4>)
 80089ac:	4293      	cmp	r3, r2
 80089ae:	d003      	beq.n	80089b8 <TIM_OC2_SetConfig+0x94>
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	4a16      	ldr	r2, [pc, #88]	@ (8008a0c <TIM_OC2_SetConfig+0xe8>)
 80089b4:	4293      	cmp	r3, r2
 80089b6:	d113      	bne.n	80089e0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80089b8:	693b      	ldr	r3, [r7, #16]
 80089ba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80089be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80089c0:	693b      	ldr	r3, [r7, #16]
 80089c2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80089c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	695b      	ldr	r3, [r3, #20]
 80089cc:	009b      	lsls	r3, r3, #2
 80089ce:	693a      	ldr	r2, [r7, #16]
 80089d0:	4313      	orrs	r3, r2
 80089d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	699b      	ldr	r3, [r3, #24]
 80089d8:	009b      	lsls	r3, r3, #2
 80089da:	693a      	ldr	r2, [r7, #16]
 80089dc:	4313      	orrs	r3, r2
 80089de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	693a      	ldr	r2, [r7, #16]
 80089e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	68fa      	ldr	r2, [r7, #12]
 80089ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	685a      	ldr	r2, [r3, #4]
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	697a      	ldr	r2, [r7, #20]
 80089f8:	621a      	str	r2, [r3, #32]
}
 80089fa:	bf00      	nop
 80089fc:	371c      	adds	r7, #28
 80089fe:	46bd      	mov	sp, r7
 8008a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a04:	4770      	bx	lr
 8008a06:	bf00      	nop
 8008a08:	40010000 	.word	0x40010000
 8008a0c:	40010400 	.word	0x40010400

08008a10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008a10:	b480      	push	{r7}
 8008a12:	b087      	sub	sp, #28
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
 8008a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6a1b      	ldr	r3, [r3, #32]
 8008a1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6a1b      	ldr	r3, [r3, #32]
 8008a24:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	685b      	ldr	r3, [r3, #4]
 8008a30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	69db      	ldr	r3, [r3, #28]
 8008a36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	f023 0303 	bic.w	r3, r3, #3
 8008a46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	68fa      	ldr	r2, [r7, #12]
 8008a4e:	4313      	orrs	r3, r2
 8008a50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008a52:	697b      	ldr	r3, [r7, #20]
 8008a54:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008a58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	689b      	ldr	r3, [r3, #8]
 8008a5e:	021b      	lsls	r3, r3, #8
 8008a60:	697a      	ldr	r2, [r7, #20]
 8008a62:	4313      	orrs	r3, r2
 8008a64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	4a21      	ldr	r2, [pc, #132]	@ (8008af0 <TIM_OC3_SetConfig+0xe0>)
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	d003      	beq.n	8008a76 <TIM_OC3_SetConfig+0x66>
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	4a20      	ldr	r2, [pc, #128]	@ (8008af4 <TIM_OC3_SetConfig+0xe4>)
 8008a72:	4293      	cmp	r3, r2
 8008a74:	d10d      	bne.n	8008a92 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008a76:	697b      	ldr	r3, [r7, #20]
 8008a78:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008a7c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	68db      	ldr	r3, [r3, #12]
 8008a82:	021b      	lsls	r3, r3, #8
 8008a84:	697a      	ldr	r2, [r7, #20]
 8008a86:	4313      	orrs	r3, r2
 8008a88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008a8a:	697b      	ldr	r3, [r7, #20]
 8008a8c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008a90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	4a16      	ldr	r2, [pc, #88]	@ (8008af0 <TIM_OC3_SetConfig+0xe0>)
 8008a96:	4293      	cmp	r3, r2
 8008a98:	d003      	beq.n	8008aa2 <TIM_OC3_SetConfig+0x92>
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	4a15      	ldr	r2, [pc, #84]	@ (8008af4 <TIM_OC3_SetConfig+0xe4>)
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	d113      	bne.n	8008aca <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008aa2:	693b      	ldr	r3, [r7, #16]
 8008aa4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008aa8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008aaa:	693b      	ldr	r3, [r7, #16]
 8008aac:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008ab0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	695b      	ldr	r3, [r3, #20]
 8008ab6:	011b      	lsls	r3, r3, #4
 8008ab8:	693a      	ldr	r2, [r7, #16]
 8008aba:	4313      	orrs	r3, r2
 8008abc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	699b      	ldr	r3, [r3, #24]
 8008ac2:	011b      	lsls	r3, r3, #4
 8008ac4:	693a      	ldr	r2, [r7, #16]
 8008ac6:	4313      	orrs	r3, r2
 8008ac8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	693a      	ldr	r2, [r7, #16]
 8008ace:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	68fa      	ldr	r2, [r7, #12]
 8008ad4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	685a      	ldr	r2, [r3, #4]
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	697a      	ldr	r2, [r7, #20]
 8008ae2:	621a      	str	r2, [r3, #32]
}
 8008ae4:	bf00      	nop
 8008ae6:	371c      	adds	r7, #28
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aee:	4770      	bx	lr
 8008af0:	40010000 	.word	0x40010000
 8008af4:	40010400 	.word	0x40010400

08008af8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008af8:	b480      	push	{r7}
 8008afa:	b087      	sub	sp, #28
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
 8008b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	6a1b      	ldr	r3, [r3, #32]
 8008b06:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6a1b      	ldr	r3, [r3, #32]
 8008b0c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	685b      	ldr	r3, [r3, #4]
 8008b18:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	69db      	ldr	r3, [r3, #28]
 8008b1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008b26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008b2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	021b      	lsls	r3, r3, #8
 8008b36:	68fa      	ldr	r2, [r7, #12]
 8008b38:	4313      	orrs	r3, r2
 8008b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008b3c:	693b      	ldr	r3, [r7, #16]
 8008b3e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008b42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	689b      	ldr	r3, [r3, #8]
 8008b48:	031b      	lsls	r3, r3, #12
 8008b4a:	693a      	ldr	r2, [r7, #16]
 8008b4c:	4313      	orrs	r3, r2
 8008b4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	4a12      	ldr	r2, [pc, #72]	@ (8008b9c <TIM_OC4_SetConfig+0xa4>)
 8008b54:	4293      	cmp	r3, r2
 8008b56:	d003      	beq.n	8008b60 <TIM_OC4_SetConfig+0x68>
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	4a11      	ldr	r2, [pc, #68]	@ (8008ba0 <TIM_OC4_SetConfig+0xa8>)
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	d109      	bne.n	8008b74 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008b60:	697b      	ldr	r3, [r7, #20]
 8008b62:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008b66:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	695b      	ldr	r3, [r3, #20]
 8008b6c:	019b      	lsls	r3, r3, #6
 8008b6e:	697a      	ldr	r2, [r7, #20]
 8008b70:	4313      	orrs	r3, r2
 8008b72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	697a      	ldr	r2, [r7, #20]
 8008b78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	68fa      	ldr	r2, [r7, #12]
 8008b7e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	685a      	ldr	r2, [r3, #4]
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	693a      	ldr	r2, [r7, #16]
 8008b8c:	621a      	str	r2, [r3, #32]
}
 8008b8e:	bf00      	nop
 8008b90:	371c      	adds	r7, #28
 8008b92:	46bd      	mov	sp, r7
 8008b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b98:	4770      	bx	lr
 8008b9a:	bf00      	nop
 8008b9c:	40010000 	.word	0x40010000
 8008ba0:	40010400 	.word	0x40010400

08008ba4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008ba4:	b480      	push	{r7}
 8008ba6:	b087      	sub	sp, #28
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	60f8      	str	r0, [r7, #12]
 8008bac:	60b9      	str	r1, [r7, #8]
 8008bae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	6a1b      	ldr	r3, [r3, #32]
 8008bb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	6a1b      	ldr	r3, [r3, #32]
 8008bba:	f023 0201 	bic.w	r2, r3, #1
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	699b      	ldr	r3, [r3, #24]
 8008bc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008bc8:	693b      	ldr	r3, [r7, #16]
 8008bca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008bce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	011b      	lsls	r3, r3, #4
 8008bd4:	693a      	ldr	r2, [r7, #16]
 8008bd6:	4313      	orrs	r3, r2
 8008bd8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008bda:	697b      	ldr	r3, [r7, #20]
 8008bdc:	f023 030a 	bic.w	r3, r3, #10
 8008be0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008be2:	697a      	ldr	r2, [r7, #20]
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	4313      	orrs	r3, r2
 8008be8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	693a      	ldr	r2, [r7, #16]
 8008bee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	697a      	ldr	r2, [r7, #20]
 8008bf4:	621a      	str	r2, [r3, #32]
}
 8008bf6:	bf00      	nop
 8008bf8:	371c      	adds	r7, #28
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c00:	4770      	bx	lr

08008c02 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c02:	b480      	push	{r7}
 8008c04:	b087      	sub	sp, #28
 8008c06:	af00      	add	r7, sp, #0
 8008c08:	60f8      	str	r0, [r7, #12]
 8008c0a:	60b9      	str	r1, [r7, #8]
 8008c0c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	6a1b      	ldr	r3, [r3, #32]
 8008c12:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	6a1b      	ldr	r3, [r3, #32]
 8008c18:	f023 0210 	bic.w	r2, r3, #16
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	699b      	ldr	r3, [r3, #24]
 8008c24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008c26:	693b      	ldr	r3, [r7, #16]
 8008c28:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008c2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	031b      	lsls	r3, r3, #12
 8008c32:	693a      	ldr	r2, [r7, #16]
 8008c34:	4313      	orrs	r3, r2
 8008c36:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008c38:	697b      	ldr	r3, [r7, #20]
 8008c3a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008c3e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	011b      	lsls	r3, r3, #4
 8008c44:	697a      	ldr	r2, [r7, #20]
 8008c46:	4313      	orrs	r3, r2
 8008c48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	693a      	ldr	r2, [r7, #16]
 8008c4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	697a      	ldr	r2, [r7, #20]
 8008c54:	621a      	str	r2, [r3, #32]
}
 8008c56:	bf00      	nop
 8008c58:	371c      	adds	r7, #28
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c60:	4770      	bx	lr

08008c62 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008c62:	b480      	push	{r7}
 8008c64:	b085      	sub	sp, #20
 8008c66:	af00      	add	r7, sp, #0
 8008c68:	6078      	str	r0, [r7, #4]
 8008c6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	689b      	ldr	r3, [r3, #8]
 8008c70:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c78:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008c7a:	683a      	ldr	r2, [r7, #0]
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	4313      	orrs	r3, r2
 8008c80:	f043 0307 	orr.w	r3, r3, #7
 8008c84:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	68fa      	ldr	r2, [r7, #12]
 8008c8a:	609a      	str	r2, [r3, #8]
}
 8008c8c:	bf00      	nop
 8008c8e:	3714      	adds	r7, #20
 8008c90:	46bd      	mov	sp, r7
 8008c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c96:	4770      	bx	lr

08008c98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008c98:	b480      	push	{r7}
 8008c9a:	b087      	sub	sp, #28
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	60f8      	str	r0, [r7, #12]
 8008ca0:	60b9      	str	r1, [r7, #8]
 8008ca2:	607a      	str	r2, [r7, #4]
 8008ca4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	689b      	ldr	r3, [r3, #8]
 8008caa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008cac:	697b      	ldr	r3, [r7, #20]
 8008cae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008cb2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	021a      	lsls	r2, r3, #8
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	431a      	orrs	r2, r3
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	4313      	orrs	r3, r2
 8008cc0:	697a      	ldr	r2, [r7, #20]
 8008cc2:	4313      	orrs	r3, r2
 8008cc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	697a      	ldr	r2, [r7, #20]
 8008cca:	609a      	str	r2, [r3, #8]
}
 8008ccc:	bf00      	nop
 8008cce:	371c      	adds	r7, #28
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd6:	4770      	bx	lr

08008cd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008cd8:	b480      	push	{r7}
 8008cda:	b085      	sub	sp, #20
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
 8008ce0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008ce8:	2b01      	cmp	r3, #1
 8008cea:	d101      	bne.n	8008cf0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008cec:	2302      	movs	r3, #2
 8008cee:	e05a      	b.n	8008da6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2201      	movs	r2, #1
 8008cf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2202      	movs	r2, #2
 8008cfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	685b      	ldr	r3, [r3, #4]
 8008d06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	689b      	ldr	r3, [r3, #8]
 8008d0e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	68fa      	ldr	r2, [r7, #12]
 8008d1e:	4313      	orrs	r3, r2
 8008d20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	68fa      	ldr	r2, [r7, #12]
 8008d28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	4a21      	ldr	r2, [pc, #132]	@ (8008db4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008d30:	4293      	cmp	r3, r2
 8008d32:	d022      	beq.n	8008d7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d3c:	d01d      	beq.n	8008d7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	4a1d      	ldr	r2, [pc, #116]	@ (8008db8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008d44:	4293      	cmp	r3, r2
 8008d46:	d018      	beq.n	8008d7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	4a1b      	ldr	r2, [pc, #108]	@ (8008dbc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d013      	beq.n	8008d7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	4a1a      	ldr	r2, [pc, #104]	@ (8008dc0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008d58:	4293      	cmp	r3, r2
 8008d5a:	d00e      	beq.n	8008d7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	4a18      	ldr	r2, [pc, #96]	@ (8008dc4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d009      	beq.n	8008d7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	4a17      	ldr	r2, [pc, #92]	@ (8008dc8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	d004      	beq.n	8008d7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	4a15      	ldr	r2, [pc, #84]	@ (8008dcc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008d76:	4293      	cmp	r3, r2
 8008d78:	d10c      	bne.n	8008d94 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008d7a:	68bb      	ldr	r3, [r7, #8]
 8008d7c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008d80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	685b      	ldr	r3, [r3, #4]
 8008d86:	68ba      	ldr	r2, [r7, #8]
 8008d88:	4313      	orrs	r3, r2
 8008d8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	68ba      	ldr	r2, [r7, #8]
 8008d92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2201      	movs	r2, #1
 8008d98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2200      	movs	r2, #0
 8008da0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008da4:	2300      	movs	r3, #0
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	3714      	adds	r7, #20
 8008daa:	46bd      	mov	sp, r7
 8008dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db0:	4770      	bx	lr
 8008db2:	bf00      	nop
 8008db4:	40010000 	.word	0x40010000
 8008db8:	40000400 	.word	0x40000400
 8008dbc:	40000800 	.word	0x40000800
 8008dc0:	40000c00 	.word	0x40000c00
 8008dc4:	40010400 	.word	0x40010400
 8008dc8:	40014000 	.word	0x40014000
 8008dcc:	40001800 	.word	0x40001800

08008dd0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008dd0:	b480      	push	{r7}
 8008dd2:	b083      	sub	sp, #12
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008dd8:	bf00      	nop
 8008dda:	370c      	adds	r7, #12
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de2:	4770      	bx	lr

08008de4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008de4:	b480      	push	{r7}
 8008de6:	b083      	sub	sp, #12
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008dec:	bf00      	nop
 8008dee:	370c      	adds	r7, #12
 8008df0:	46bd      	mov	sp, r7
 8008df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df6:	4770      	bx	lr

08008df8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b082      	sub	sp, #8
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d101      	bne.n	8008e0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008e06:	2301      	movs	r3, #1
 8008e08:	e042      	b.n	8008e90 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008e10:	b2db      	uxtb	r3, r3
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d106      	bne.n	8008e24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2200      	movs	r2, #0
 8008e1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f7fb fd56 	bl	80048d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2224      	movs	r2, #36	@ 0x24
 8008e28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	68da      	ldr	r2, [r3, #12]
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008e3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	f000 f82b 	bl	8008e98 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	691a      	ldr	r2, [r3, #16]
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008e50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	695a      	ldr	r2, [r3, #20]
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008e60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	68da      	ldr	r2, [r3, #12]
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008e70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2200      	movs	r2, #0
 8008e76:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2220      	movs	r2, #32
 8008e7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2220      	movs	r2, #32
 8008e84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008e8e:	2300      	movs	r3, #0
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	3708      	adds	r7, #8
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}

08008e98 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008e98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008e9c:	b0c0      	sub	sp, #256	@ 0x100
 8008e9e:	af00      	add	r7, sp, #0
 8008ea0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	691b      	ldr	r3, [r3, #16]
 8008eac:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008eb4:	68d9      	ldr	r1, [r3, #12]
 8008eb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008eba:	681a      	ldr	r2, [r3, #0]
 8008ebc:	ea40 0301 	orr.w	r3, r0, r1
 8008ec0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008ec2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ec6:	689a      	ldr	r2, [r3, #8]
 8008ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ecc:	691b      	ldr	r3, [r3, #16]
 8008ece:	431a      	orrs	r2, r3
 8008ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ed4:	695b      	ldr	r3, [r3, #20]
 8008ed6:	431a      	orrs	r2, r3
 8008ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008edc:	69db      	ldr	r3, [r3, #28]
 8008ede:	4313      	orrs	r3, r2
 8008ee0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	68db      	ldr	r3, [r3, #12]
 8008eec:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008ef0:	f021 010c 	bic.w	r1, r1, #12
 8008ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ef8:	681a      	ldr	r2, [r3, #0]
 8008efa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008efe:	430b      	orrs	r3, r1
 8008f00:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008f02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	695b      	ldr	r3, [r3, #20]
 8008f0a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008f0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f12:	6999      	ldr	r1, [r3, #24]
 8008f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f18:	681a      	ldr	r2, [r3, #0]
 8008f1a:	ea40 0301 	orr.w	r3, r0, r1
 8008f1e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f24:	681a      	ldr	r2, [r3, #0]
 8008f26:	4b8f      	ldr	r3, [pc, #572]	@ (8009164 <UART_SetConfig+0x2cc>)
 8008f28:	429a      	cmp	r2, r3
 8008f2a:	d005      	beq.n	8008f38 <UART_SetConfig+0xa0>
 8008f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f30:	681a      	ldr	r2, [r3, #0]
 8008f32:	4b8d      	ldr	r3, [pc, #564]	@ (8009168 <UART_SetConfig+0x2d0>)
 8008f34:	429a      	cmp	r2, r3
 8008f36:	d104      	bne.n	8008f42 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008f38:	f7fe ff48 	bl	8007dcc <HAL_RCC_GetPCLK2Freq>
 8008f3c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008f40:	e003      	b.n	8008f4a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008f42:	f7fe ff2f 	bl	8007da4 <HAL_RCC_GetPCLK1Freq>
 8008f46:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008f4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f4e:	69db      	ldr	r3, [r3, #28]
 8008f50:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008f54:	f040 810c 	bne.w	8009170 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008f58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008f62:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008f66:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8008f6a:	4622      	mov	r2, r4
 8008f6c:	462b      	mov	r3, r5
 8008f6e:	1891      	adds	r1, r2, r2
 8008f70:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008f72:	415b      	adcs	r3, r3
 8008f74:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008f76:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008f7a:	4621      	mov	r1, r4
 8008f7c:	eb12 0801 	adds.w	r8, r2, r1
 8008f80:	4629      	mov	r1, r5
 8008f82:	eb43 0901 	adc.w	r9, r3, r1
 8008f86:	f04f 0200 	mov.w	r2, #0
 8008f8a:	f04f 0300 	mov.w	r3, #0
 8008f8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008f92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008f96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008f9a:	4690      	mov	r8, r2
 8008f9c:	4699      	mov	r9, r3
 8008f9e:	4623      	mov	r3, r4
 8008fa0:	eb18 0303 	adds.w	r3, r8, r3
 8008fa4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008fa8:	462b      	mov	r3, r5
 8008faa:	eb49 0303 	adc.w	r3, r9, r3
 8008fae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008fb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008fb6:	685b      	ldr	r3, [r3, #4]
 8008fb8:	2200      	movs	r2, #0
 8008fba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008fbe:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008fc2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008fc6:	460b      	mov	r3, r1
 8008fc8:	18db      	adds	r3, r3, r3
 8008fca:	653b      	str	r3, [r7, #80]	@ 0x50
 8008fcc:	4613      	mov	r3, r2
 8008fce:	eb42 0303 	adc.w	r3, r2, r3
 8008fd2:	657b      	str	r3, [r7, #84]	@ 0x54
 8008fd4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008fd8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008fdc:	f7f7 ff3a 	bl	8000e54 <__aeabi_uldivmod>
 8008fe0:	4602      	mov	r2, r0
 8008fe2:	460b      	mov	r3, r1
 8008fe4:	4b61      	ldr	r3, [pc, #388]	@ (800916c <UART_SetConfig+0x2d4>)
 8008fe6:	fba3 2302 	umull	r2, r3, r3, r2
 8008fea:	095b      	lsrs	r3, r3, #5
 8008fec:	011c      	lsls	r4, r3, #4
 8008fee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008ff8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008ffc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009000:	4642      	mov	r2, r8
 8009002:	464b      	mov	r3, r9
 8009004:	1891      	adds	r1, r2, r2
 8009006:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009008:	415b      	adcs	r3, r3
 800900a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800900c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009010:	4641      	mov	r1, r8
 8009012:	eb12 0a01 	adds.w	sl, r2, r1
 8009016:	4649      	mov	r1, r9
 8009018:	eb43 0b01 	adc.w	fp, r3, r1
 800901c:	f04f 0200 	mov.w	r2, #0
 8009020:	f04f 0300 	mov.w	r3, #0
 8009024:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009028:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800902c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009030:	4692      	mov	sl, r2
 8009032:	469b      	mov	fp, r3
 8009034:	4643      	mov	r3, r8
 8009036:	eb1a 0303 	adds.w	r3, sl, r3
 800903a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800903e:	464b      	mov	r3, r9
 8009040:	eb4b 0303 	adc.w	r3, fp, r3
 8009044:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800904c:	685b      	ldr	r3, [r3, #4]
 800904e:	2200      	movs	r2, #0
 8009050:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009054:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009058:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800905c:	460b      	mov	r3, r1
 800905e:	18db      	adds	r3, r3, r3
 8009060:	643b      	str	r3, [r7, #64]	@ 0x40
 8009062:	4613      	mov	r3, r2
 8009064:	eb42 0303 	adc.w	r3, r2, r3
 8009068:	647b      	str	r3, [r7, #68]	@ 0x44
 800906a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800906e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8009072:	f7f7 feef 	bl	8000e54 <__aeabi_uldivmod>
 8009076:	4602      	mov	r2, r0
 8009078:	460b      	mov	r3, r1
 800907a:	4611      	mov	r1, r2
 800907c:	4b3b      	ldr	r3, [pc, #236]	@ (800916c <UART_SetConfig+0x2d4>)
 800907e:	fba3 2301 	umull	r2, r3, r3, r1
 8009082:	095b      	lsrs	r3, r3, #5
 8009084:	2264      	movs	r2, #100	@ 0x64
 8009086:	fb02 f303 	mul.w	r3, r2, r3
 800908a:	1acb      	subs	r3, r1, r3
 800908c:	00db      	lsls	r3, r3, #3
 800908e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009092:	4b36      	ldr	r3, [pc, #216]	@ (800916c <UART_SetConfig+0x2d4>)
 8009094:	fba3 2302 	umull	r2, r3, r3, r2
 8009098:	095b      	lsrs	r3, r3, #5
 800909a:	005b      	lsls	r3, r3, #1
 800909c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80090a0:	441c      	add	r4, r3
 80090a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80090a6:	2200      	movs	r2, #0
 80090a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80090ac:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80090b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80090b4:	4642      	mov	r2, r8
 80090b6:	464b      	mov	r3, r9
 80090b8:	1891      	adds	r1, r2, r2
 80090ba:	63b9      	str	r1, [r7, #56]	@ 0x38
 80090bc:	415b      	adcs	r3, r3
 80090be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80090c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80090c4:	4641      	mov	r1, r8
 80090c6:	1851      	adds	r1, r2, r1
 80090c8:	6339      	str	r1, [r7, #48]	@ 0x30
 80090ca:	4649      	mov	r1, r9
 80090cc:	414b      	adcs	r3, r1
 80090ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80090d0:	f04f 0200 	mov.w	r2, #0
 80090d4:	f04f 0300 	mov.w	r3, #0
 80090d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80090dc:	4659      	mov	r1, fp
 80090de:	00cb      	lsls	r3, r1, #3
 80090e0:	4651      	mov	r1, sl
 80090e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80090e6:	4651      	mov	r1, sl
 80090e8:	00ca      	lsls	r2, r1, #3
 80090ea:	4610      	mov	r0, r2
 80090ec:	4619      	mov	r1, r3
 80090ee:	4603      	mov	r3, r0
 80090f0:	4642      	mov	r2, r8
 80090f2:	189b      	adds	r3, r3, r2
 80090f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80090f8:	464b      	mov	r3, r9
 80090fa:	460a      	mov	r2, r1
 80090fc:	eb42 0303 	adc.w	r3, r2, r3
 8009100:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009108:	685b      	ldr	r3, [r3, #4]
 800910a:	2200      	movs	r2, #0
 800910c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009110:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009114:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009118:	460b      	mov	r3, r1
 800911a:	18db      	adds	r3, r3, r3
 800911c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800911e:	4613      	mov	r3, r2
 8009120:	eb42 0303 	adc.w	r3, r2, r3
 8009124:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009126:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800912a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800912e:	f7f7 fe91 	bl	8000e54 <__aeabi_uldivmod>
 8009132:	4602      	mov	r2, r0
 8009134:	460b      	mov	r3, r1
 8009136:	4b0d      	ldr	r3, [pc, #52]	@ (800916c <UART_SetConfig+0x2d4>)
 8009138:	fba3 1302 	umull	r1, r3, r3, r2
 800913c:	095b      	lsrs	r3, r3, #5
 800913e:	2164      	movs	r1, #100	@ 0x64
 8009140:	fb01 f303 	mul.w	r3, r1, r3
 8009144:	1ad3      	subs	r3, r2, r3
 8009146:	00db      	lsls	r3, r3, #3
 8009148:	3332      	adds	r3, #50	@ 0x32
 800914a:	4a08      	ldr	r2, [pc, #32]	@ (800916c <UART_SetConfig+0x2d4>)
 800914c:	fba2 2303 	umull	r2, r3, r2, r3
 8009150:	095b      	lsrs	r3, r3, #5
 8009152:	f003 0207 	and.w	r2, r3, #7
 8009156:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	4422      	add	r2, r4
 800915e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009160:	e106      	b.n	8009370 <UART_SetConfig+0x4d8>
 8009162:	bf00      	nop
 8009164:	40011000 	.word	0x40011000
 8009168:	40011400 	.word	0x40011400
 800916c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009170:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009174:	2200      	movs	r2, #0
 8009176:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800917a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800917e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8009182:	4642      	mov	r2, r8
 8009184:	464b      	mov	r3, r9
 8009186:	1891      	adds	r1, r2, r2
 8009188:	6239      	str	r1, [r7, #32]
 800918a:	415b      	adcs	r3, r3
 800918c:	627b      	str	r3, [r7, #36]	@ 0x24
 800918e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009192:	4641      	mov	r1, r8
 8009194:	1854      	adds	r4, r2, r1
 8009196:	4649      	mov	r1, r9
 8009198:	eb43 0501 	adc.w	r5, r3, r1
 800919c:	f04f 0200 	mov.w	r2, #0
 80091a0:	f04f 0300 	mov.w	r3, #0
 80091a4:	00eb      	lsls	r3, r5, #3
 80091a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80091aa:	00e2      	lsls	r2, r4, #3
 80091ac:	4614      	mov	r4, r2
 80091ae:	461d      	mov	r5, r3
 80091b0:	4643      	mov	r3, r8
 80091b2:	18e3      	adds	r3, r4, r3
 80091b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80091b8:	464b      	mov	r3, r9
 80091ba:	eb45 0303 	adc.w	r3, r5, r3
 80091be:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80091c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80091c6:	685b      	ldr	r3, [r3, #4]
 80091c8:	2200      	movs	r2, #0
 80091ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80091ce:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80091d2:	f04f 0200 	mov.w	r2, #0
 80091d6:	f04f 0300 	mov.w	r3, #0
 80091da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80091de:	4629      	mov	r1, r5
 80091e0:	008b      	lsls	r3, r1, #2
 80091e2:	4621      	mov	r1, r4
 80091e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80091e8:	4621      	mov	r1, r4
 80091ea:	008a      	lsls	r2, r1, #2
 80091ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80091f0:	f7f7 fe30 	bl	8000e54 <__aeabi_uldivmod>
 80091f4:	4602      	mov	r2, r0
 80091f6:	460b      	mov	r3, r1
 80091f8:	4b60      	ldr	r3, [pc, #384]	@ (800937c <UART_SetConfig+0x4e4>)
 80091fa:	fba3 2302 	umull	r2, r3, r3, r2
 80091fe:	095b      	lsrs	r3, r3, #5
 8009200:	011c      	lsls	r4, r3, #4
 8009202:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009206:	2200      	movs	r2, #0
 8009208:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800920c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009210:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009214:	4642      	mov	r2, r8
 8009216:	464b      	mov	r3, r9
 8009218:	1891      	adds	r1, r2, r2
 800921a:	61b9      	str	r1, [r7, #24]
 800921c:	415b      	adcs	r3, r3
 800921e:	61fb      	str	r3, [r7, #28]
 8009220:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009224:	4641      	mov	r1, r8
 8009226:	1851      	adds	r1, r2, r1
 8009228:	6139      	str	r1, [r7, #16]
 800922a:	4649      	mov	r1, r9
 800922c:	414b      	adcs	r3, r1
 800922e:	617b      	str	r3, [r7, #20]
 8009230:	f04f 0200 	mov.w	r2, #0
 8009234:	f04f 0300 	mov.w	r3, #0
 8009238:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800923c:	4659      	mov	r1, fp
 800923e:	00cb      	lsls	r3, r1, #3
 8009240:	4651      	mov	r1, sl
 8009242:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009246:	4651      	mov	r1, sl
 8009248:	00ca      	lsls	r2, r1, #3
 800924a:	4610      	mov	r0, r2
 800924c:	4619      	mov	r1, r3
 800924e:	4603      	mov	r3, r0
 8009250:	4642      	mov	r2, r8
 8009252:	189b      	adds	r3, r3, r2
 8009254:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009258:	464b      	mov	r3, r9
 800925a:	460a      	mov	r2, r1
 800925c:	eb42 0303 	adc.w	r3, r2, r3
 8009260:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009268:	685b      	ldr	r3, [r3, #4]
 800926a:	2200      	movs	r2, #0
 800926c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800926e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009270:	f04f 0200 	mov.w	r2, #0
 8009274:	f04f 0300 	mov.w	r3, #0
 8009278:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800927c:	4649      	mov	r1, r9
 800927e:	008b      	lsls	r3, r1, #2
 8009280:	4641      	mov	r1, r8
 8009282:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009286:	4641      	mov	r1, r8
 8009288:	008a      	lsls	r2, r1, #2
 800928a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800928e:	f7f7 fde1 	bl	8000e54 <__aeabi_uldivmod>
 8009292:	4602      	mov	r2, r0
 8009294:	460b      	mov	r3, r1
 8009296:	4611      	mov	r1, r2
 8009298:	4b38      	ldr	r3, [pc, #224]	@ (800937c <UART_SetConfig+0x4e4>)
 800929a:	fba3 2301 	umull	r2, r3, r3, r1
 800929e:	095b      	lsrs	r3, r3, #5
 80092a0:	2264      	movs	r2, #100	@ 0x64
 80092a2:	fb02 f303 	mul.w	r3, r2, r3
 80092a6:	1acb      	subs	r3, r1, r3
 80092a8:	011b      	lsls	r3, r3, #4
 80092aa:	3332      	adds	r3, #50	@ 0x32
 80092ac:	4a33      	ldr	r2, [pc, #204]	@ (800937c <UART_SetConfig+0x4e4>)
 80092ae:	fba2 2303 	umull	r2, r3, r2, r3
 80092b2:	095b      	lsrs	r3, r3, #5
 80092b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80092b8:	441c      	add	r4, r3
 80092ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80092be:	2200      	movs	r2, #0
 80092c0:	673b      	str	r3, [r7, #112]	@ 0x70
 80092c2:	677a      	str	r2, [r7, #116]	@ 0x74
 80092c4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80092c8:	4642      	mov	r2, r8
 80092ca:	464b      	mov	r3, r9
 80092cc:	1891      	adds	r1, r2, r2
 80092ce:	60b9      	str	r1, [r7, #8]
 80092d0:	415b      	adcs	r3, r3
 80092d2:	60fb      	str	r3, [r7, #12]
 80092d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80092d8:	4641      	mov	r1, r8
 80092da:	1851      	adds	r1, r2, r1
 80092dc:	6039      	str	r1, [r7, #0]
 80092de:	4649      	mov	r1, r9
 80092e0:	414b      	adcs	r3, r1
 80092e2:	607b      	str	r3, [r7, #4]
 80092e4:	f04f 0200 	mov.w	r2, #0
 80092e8:	f04f 0300 	mov.w	r3, #0
 80092ec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80092f0:	4659      	mov	r1, fp
 80092f2:	00cb      	lsls	r3, r1, #3
 80092f4:	4651      	mov	r1, sl
 80092f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80092fa:	4651      	mov	r1, sl
 80092fc:	00ca      	lsls	r2, r1, #3
 80092fe:	4610      	mov	r0, r2
 8009300:	4619      	mov	r1, r3
 8009302:	4603      	mov	r3, r0
 8009304:	4642      	mov	r2, r8
 8009306:	189b      	adds	r3, r3, r2
 8009308:	66bb      	str	r3, [r7, #104]	@ 0x68
 800930a:	464b      	mov	r3, r9
 800930c:	460a      	mov	r2, r1
 800930e:	eb42 0303 	adc.w	r3, r2, r3
 8009312:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009318:	685b      	ldr	r3, [r3, #4]
 800931a:	2200      	movs	r2, #0
 800931c:	663b      	str	r3, [r7, #96]	@ 0x60
 800931e:	667a      	str	r2, [r7, #100]	@ 0x64
 8009320:	f04f 0200 	mov.w	r2, #0
 8009324:	f04f 0300 	mov.w	r3, #0
 8009328:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800932c:	4649      	mov	r1, r9
 800932e:	008b      	lsls	r3, r1, #2
 8009330:	4641      	mov	r1, r8
 8009332:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009336:	4641      	mov	r1, r8
 8009338:	008a      	lsls	r2, r1, #2
 800933a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800933e:	f7f7 fd89 	bl	8000e54 <__aeabi_uldivmod>
 8009342:	4602      	mov	r2, r0
 8009344:	460b      	mov	r3, r1
 8009346:	4b0d      	ldr	r3, [pc, #52]	@ (800937c <UART_SetConfig+0x4e4>)
 8009348:	fba3 1302 	umull	r1, r3, r3, r2
 800934c:	095b      	lsrs	r3, r3, #5
 800934e:	2164      	movs	r1, #100	@ 0x64
 8009350:	fb01 f303 	mul.w	r3, r1, r3
 8009354:	1ad3      	subs	r3, r2, r3
 8009356:	011b      	lsls	r3, r3, #4
 8009358:	3332      	adds	r3, #50	@ 0x32
 800935a:	4a08      	ldr	r2, [pc, #32]	@ (800937c <UART_SetConfig+0x4e4>)
 800935c:	fba2 2303 	umull	r2, r3, r2, r3
 8009360:	095b      	lsrs	r3, r3, #5
 8009362:	f003 020f 	and.w	r2, r3, #15
 8009366:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	4422      	add	r2, r4
 800936e:	609a      	str	r2, [r3, #8]
}
 8009370:	bf00      	nop
 8009372:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8009376:	46bd      	mov	sp, r7
 8009378:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800937c:	51eb851f 	.word	0x51eb851f

08009380 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009380:	b084      	sub	sp, #16
 8009382:	b580      	push	{r7, lr}
 8009384:	b084      	sub	sp, #16
 8009386:	af00      	add	r7, sp, #0
 8009388:	6078      	str	r0, [r7, #4]
 800938a:	f107 001c 	add.w	r0, r7, #28
 800938e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009392:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8009396:	2b01      	cmp	r3, #1
 8009398:	d123      	bne.n	80093e2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800939e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	68db      	ldr	r3, [r3, #12]
 80093aa:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80093ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80093b2:	687a      	ldr	r2, [r7, #4]
 80093b4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	68db      	ldr	r3, [r3, #12]
 80093ba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80093c2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80093c6:	2b01      	cmp	r3, #1
 80093c8:	d105      	bne.n	80093d6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	68db      	ldr	r3, [r3, #12]
 80093ce:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	f000 faa0 	bl	800991c <USB_CoreReset>
 80093dc:	4603      	mov	r3, r0
 80093de:	73fb      	strb	r3, [r7, #15]
 80093e0:	e01b      	b.n	800941a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	68db      	ldr	r3, [r3, #12]
 80093e6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80093ee:	6878      	ldr	r0, [r7, #4]
 80093f0:	f000 fa94 	bl	800991c <USB_CoreReset>
 80093f4:	4603      	mov	r3, r0
 80093f6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80093f8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d106      	bne.n	800940e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009404:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	639a      	str	r2, [r3, #56]	@ 0x38
 800940c:	e005      	b.n	800941a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009412:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800941a:	7fbb      	ldrb	r3, [r7, #30]
 800941c:	2b01      	cmp	r3, #1
 800941e:	d10b      	bne.n	8009438 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	689b      	ldr	r3, [r3, #8]
 8009424:	f043 0206 	orr.w	r2, r3, #6
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	689b      	ldr	r3, [r3, #8]
 8009430:	f043 0220 	orr.w	r2, r3, #32
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009438:	7bfb      	ldrb	r3, [r7, #15]
}
 800943a:	4618      	mov	r0, r3
 800943c:	3710      	adds	r7, #16
 800943e:	46bd      	mov	sp, r7
 8009440:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009444:	b004      	add	sp, #16
 8009446:	4770      	bx	lr

08009448 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009448:	b480      	push	{r7}
 800944a:	b083      	sub	sp, #12
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	689b      	ldr	r3, [r3, #8]
 8009454:	f023 0201 	bic.w	r2, r3, #1
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800945c:	2300      	movs	r3, #0
}
 800945e:	4618      	mov	r0, r3
 8009460:	370c      	adds	r7, #12
 8009462:	46bd      	mov	sp, r7
 8009464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009468:	4770      	bx	lr

0800946a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800946a:	b580      	push	{r7, lr}
 800946c:	b084      	sub	sp, #16
 800946e:	af00      	add	r7, sp, #0
 8009470:	6078      	str	r0, [r7, #4]
 8009472:	460b      	mov	r3, r1
 8009474:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009476:	2300      	movs	r3, #0
 8009478:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	68db      	ldr	r3, [r3, #12]
 800947e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009486:	78fb      	ldrb	r3, [r7, #3]
 8009488:	2b01      	cmp	r3, #1
 800948a:	d115      	bne.n	80094b8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	68db      	ldr	r3, [r3, #12]
 8009490:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009498:	200a      	movs	r0, #10
 800949a:	f7fb fdad 	bl	8004ff8 <HAL_Delay>
      ms += 10U;
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	330a      	adds	r3, #10
 80094a2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80094a4:	6878      	ldr	r0, [r7, #4]
 80094a6:	f000 fa2b 	bl	8009900 <USB_GetMode>
 80094aa:	4603      	mov	r3, r0
 80094ac:	2b01      	cmp	r3, #1
 80094ae:	d01e      	beq.n	80094ee <USB_SetCurrentMode+0x84>
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	2bc7      	cmp	r3, #199	@ 0xc7
 80094b4:	d9f0      	bls.n	8009498 <USB_SetCurrentMode+0x2e>
 80094b6:	e01a      	b.n	80094ee <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80094b8:	78fb      	ldrb	r3, [r7, #3]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d115      	bne.n	80094ea <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	68db      	ldr	r3, [r3, #12]
 80094c2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80094ca:	200a      	movs	r0, #10
 80094cc:	f7fb fd94 	bl	8004ff8 <HAL_Delay>
      ms += 10U;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	330a      	adds	r3, #10
 80094d4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80094d6:	6878      	ldr	r0, [r7, #4]
 80094d8:	f000 fa12 	bl	8009900 <USB_GetMode>
 80094dc:	4603      	mov	r3, r0
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d005      	beq.n	80094ee <USB_SetCurrentMode+0x84>
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	2bc7      	cmp	r3, #199	@ 0xc7
 80094e6:	d9f0      	bls.n	80094ca <USB_SetCurrentMode+0x60>
 80094e8:	e001      	b.n	80094ee <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80094ea:	2301      	movs	r3, #1
 80094ec:	e005      	b.n	80094fa <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	2bc8      	cmp	r3, #200	@ 0xc8
 80094f2:	d101      	bne.n	80094f8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80094f4:	2301      	movs	r3, #1
 80094f6:	e000      	b.n	80094fa <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80094f8:	2300      	movs	r3, #0
}
 80094fa:	4618      	mov	r0, r3
 80094fc:	3710      	adds	r7, #16
 80094fe:	46bd      	mov	sp, r7
 8009500:	bd80      	pop	{r7, pc}
	...

08009504 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009504:	b084      	sub	sp, #16
 8009506:	b580      	push	{r7, lr}
 8009508:	b086      	sub	sp, #24
 800950a:	af00      	add	r7, sp, #0
 800950c:	6078      	str	r0, [r7, #4]
 800950e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8009512:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009516:	2300      	movs	r3, #0
 8009518:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800951e:	2300      	movs	r3, #0
 8009520:	613b      	str	r3, [r7, #16]
 8009522:	e009      	b.n	8009538 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009524:	687a      	ldr	r2, [r7, #4]
 8009526:	693b      	ldr	r3, [r7, #16]
 8009528:	3340      	adds	r3, #64	@ 0x40
 800952a:	009b      	lsls	r3, r3, #2
 800952c:	4413      	add	r3, r2
 800952e:	2200      	movs	r2, #0
 8009530:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009532:	693b      	ldr	r3, [r7, #16]
 8009534:	3301      	adds	r3, #1
 8009536:	613b      	str	r3, [r7, #16]
 8009538:	693b      	ldr	r3, [r7, #16]
 800953a:	2b0e      	cmp	r3, #14
 800953c:	d9f2      	bls.n	8009524 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800953e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009542:	2b00      	cmp	r3, #0
 8009544:	d11c      	bne.n	8009580 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800954c:	685b      	ldr	r3, [r3, #4]
 800954e:	68fa      	ldr	r2, [r7, #12]
 8009550:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009554:	f043 0302 	orr.w	r3, r3, #2
 8009558:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800955e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800956a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009576:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	639a      	str	r2, [r3, #56]	@ 0x38
 800957e:	e00b      	b.n	8009598 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009584:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009590:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800959e:	461a      	mov	r2, r3
 80095a0:	2300      	movs	r3, #0
 80095a2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80095a4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80095a8:	2b01      	cmp	r3, #1
 80095aa:	d10d      	bne.n	80095c8 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80095ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d104      	bne.n	80095be <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80095b4:	2100      	movs	r1, #0
 80095b6:	6878      	ldr	r0, [r7, #4]
 80095b8:	f000 f968 	bl	800988c <USB_SetDevSpeed>
 80095bc:	e008      	b.n	80095d0 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80095be:	2101      	movs	r1, #1
 80095c0:	6878      	ldr	r0, [r7, #4]
 80095c2:	f000 f963 	bl	800988c <USB_SetDevSpeed>
 80095c6:	e003      	b.n	80095d0 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80095c8:	2103      	movs	r1, #3
 80095ca:	6878      	ldr	r0, [r7, #4]
 80095cc:	f000 f95e 	bl	800988c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80095d0:	2110      	movs	r1, #16
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	f000 f8fa 	bl	80097cc <USB_FlushTxFifo>
 80095d8:	4603      	mov	r3, r0
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d001      	beq.n	80095e2 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80095de:	2301      	movs	r3, #1
 80095e0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80095e2:	6878      	ldr	r0, [r7, #4]
 80095e4:	f000 f924 	bl	8009830 <USB_FlushRxFifo>
 80095e8:	4603      	mov	r3, r0
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d001      	beq.n	80095f2 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80095ee:	2301      	movs	r3, #1
 80095f0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80095f8:	461a      	mov	r2, r3
 80095fa:	2300      	movs	r3, #0
 80095fc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009604:	461a      	mov	r2, r3
 8009606:	2300      	movs	r3, #0
 8009608:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009610:	461a      	mov	r2, r3
 8009612:	2300      	movs	r3, #0
 8009614:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009616:	2300      	movs	r3, #0
 8009618:	613b      	str	r3, [r7, #16]
 800961a:	e043      	b.n	80096a4 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800961c:	693b      	ldr	r3, [r7, #16]
 800961e:	015a      	lsls	r2, r3, #5
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	4413      	add	r3, r2
 8009624:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800962e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009632:	d118      	bne.n	8009666 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8009634:	693b      	ldr	r3, [r7, #16]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d10a      	bne.n	8009650 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800963a:	693b      	ldr	r3, [r7, #16]
 800963c:	015a      	lsls	r2, r3, #5
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	4413      	add	r3, r2
 8009642:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009646:	461a      	mov	r2, r3
 8009648:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800964c:	6013      	str	r3, [r2, #0]
 800964e:	e013      	b.n	8009678 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009650:	693b      	ldr	r3, [r7, #16]
 8009652:	015a      	lsls	r2, r3, #5
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	4413      	add	r3, r2
 8009658:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800965c:	461a      	mov	r2, r3
 800965e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009662:	6013      	str	r3, [r2, #0]
 8009664:	e008      	b.n	8009678 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009666:	693b      	ldr	r3, [r7, #16]
 8009668:	015a      	lsls	r2, r3, #5
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	4413      	add	r3, r2
 800966e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009672:	461a      	mov	r2, r3
 8009674:	2300      	movs	r3, #0
 8009676:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009678:	693b      	ldr	r3, [r7, #16]
 800967a:	015a      	lsls	r2, r3, #5
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	4413      	add	r3, r2
 8009680:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009684:	461a      	mov	r2, r3
 8009686:	2300      	movs	r3, #0
 8009688:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800968a:	693b      	ldr	r3, [r7, #16]
 800968c:	015a      	lsls	r2, r3, #5
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	4413      	add	r3, r2
 8009692:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009696:	461a      	mov	r2, r3
 8009698:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800969c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800969e:	693b      	ldr	r3, [r7, #16]
 80096a0:	3301      	adds	r3, #1
 80096a2:	613b      	str	r3, [r7, #16]
 80096a4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80096a8:	461a      	mov	r2, r3
 80096aa:	693b      	ldr	r3, [r7, #16]
 80096ac:	4293      	cmp	r3, r2
 80096ae:	d3b5      	bcc.n	800961c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80096b0:	2300      	movs	r3, #0
 80096b2:	613b      	str	r3, [r7, #16]
 80096b4:	e043      	b.n	800973e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80096b6:	693b      	ldr	r3, [r7, #16]
 80096b8:	015a      	lsls	r2, r3, #5
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	4413      	add	r3, r2
 80096be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80096c8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80096cc:	d118      	bne.n	8009700 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80096ce:	693b      	ldr	r3, [r7, #16]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d10a      	bne.n	80096ea <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80096d4:	693b      	ldr	r3, [r7, #16]
 80096d6:	015a      	lsls	r2, r3, #5
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	4413      	add	r3, r2
 80096dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80096e0:	461a      	mov	r2, r3
 80096e2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80096e6:	6013      	str	r3, [r2, #0]
 80096e8:	e013      	b.n	8009712 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80096ea:	693b      	ldr	r3, [r7, #16]
 80096ec:	015a      	lsls	r2, r3, #5
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	4413      	add	r3, r2
 80096f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80096f6:	461a      	mov	r2, r3
 80096f8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80096fc:	6013      	str	r3, [r2, #0]
 80096fe:	e008      	b.n	8009712 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009700:	693b      	ldr	r3, [r7, #16]
 8009702:	015a      	lsls	r2, r3, #5
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	4413      	add	r3, r2
 8009708:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800970c:	461a      	mov	r2, r3
 800970e:	2300      	movs	r3, #0
 8009710:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009712:	693b      	ldr	r3, [r7, #16]
 8009714:	015a      	lsls	r2, r3, #5
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	4413      	add	r3, r2
 800971a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800971e:	461a      	mov	r2, r3
 8009720:	2300      	movs	r3, #0
 8009722:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009724:	693b      	ldr	r3, [r7, #16]
 8009726:	015a      	lsls	r2, r3, #5
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	4413      	add	r3, r2
 800972c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009730:	461a      	mov	r2, r3
 8009732:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009736:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009738:	693b      	ldr	r3, [r7, #16]
 800973a:	3301      	adds	r3, #1
 800973c:	613b      	str	r3, [r7, #16]
 800973e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009742:	461a      	mov	r2, r3
 8009744:	693b      	ldr	r3, [r7, #16]
 8009746:	4293      	cmp	r3, r2
 8009748:	d3b5      	bcc.n	80096b6 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009750:	691b      	ldr	r3, [r3, #16]
 8009752:	68fa      	ldr	r2, [r7, #12]
 8009754:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009758:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800975c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	2200      	movs	r2, #0
 8009762:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800976a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800976c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009770:	2b00      	cmp	r3, #0
 8009772:	d105      	bne.n	8009780 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	699b      	ldr	r3, [r3, #24]
 8009778:	f043 0210 	orr.w	r2, r3, #16
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	699a      	ldr	r2, [r3, #24]
 8009784:	4b10      	ldr	r3, [pc, #64]	@ (80097c8 <USB_DevInit+0x2c4>)
 8009786:	4313      	orrs	r3, r2
 8009788:	687a      	ldr	r2, [r7, #4]
 800978a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800978c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8009790:	2b00      	cmp	r3, #0
 8009792:	d005      	beq.n	80097a0 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	699b      	ldr	r3, [r3, #24]
 8009798:	f043 0208 	orr.w	r2, r3, #8
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80097a0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80097a4:	2b01      	cmp	r3, #1
 80097a6:	d107      	bne.n	80097b8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	699b      	ldr	r3, [r3, #24]
 80097ac:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80097b0:	f043 0304 	orr.w	r3, r3, #4
 80097b4:	687a      	ldr	r2, [r7, #4]
 80097b6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80097b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80097ba:	4618      	mov	r0, r3
 80097bc:	3718      	adds	r7, #24
 80097be:	46bd      	mov	sp, r7
 80097c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80097c4:	b004      	add	sp, #16
 80097c6:	4770      	bx	lr
 80097c8:	803c3800 	.word	0x803c3800

080097cc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80097cc:	b480      	push	{r7}
 80097ce:	b085      	sub	sp, #20
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
 80097d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80097d6:	2300      	movs	r3, #0
 80097d8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	3301      	adds	r3, #1
 80097de:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80097e6:	d901      	bls.n	80097ec <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80097e8:	2303      	movs	r3, #3
 80097ea:	e01b      	b.n	8009824 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	691b      	ldr	r3, [r3, #16]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	daf2      	bge.n	80097da <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80097f4:	2300      	movs	r3, #0
 80097f6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	019b      	lsls	r3, r3, #6
 80097fc:	f043 0220 	orr.w	r2, r3, #32
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	3301      	adds	r3, #1
 8009808:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009810:	d901      	bls.n	8009816 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009812:	2303      	movs	r3, #3
 8009814:	e006      	b.n	8009824 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	691b      	ldr	r3, [r3, #16]
 800981a:	f003 0320 	and.w	r3, r3, #32
 800981e:	2b20      	cmp	r3, #32
 8009820:	d0f0      	beq.n	8009804 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009822:	2300      	movs	r3, #0
}
 8009824:	4618      	mov	r0, r3
 8009826:	3714      	adds	r7, #20
 8009828:	46bd      	mov	sp, r7
 800982a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982e:	4770      	bx	lr

08009830 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009830:	b480      	push	{r7}
 8009832:	b085      	sub	sp, #20
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009838:	2300      	movs	r3, #0
 800983a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	3301      	adds	r3, #1
 8009840:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009848:	d901      	bls.n	800984e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800984a:	2303      	movs	r3, #3
 800984c:	e018      	b.n	8009880 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	691b      	ldr	r3, [r3, #16]
 8009852:	2b00      	cmp	r3, #0
 8009854:	daf2      	bge.n	800983c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009856:	2300      	movs	r3, #0
 8009858:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	2210      	movs	r2, #16
 800985e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	3301      	adds	r3, #1
 8009864:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800986c:	d901      	bls.n	8009872 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800986e:	2303      	movs	r3, #3
 8009870:	e006      	b.n	8009880 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	691b      	ldr	r3, [r3, #16]
 8009876:	f003 0310 	and.w	r3, r3, #16
 800987a:	2b10      	cmp	r3, #16
 800987c:	d0f0      	beq.n	8009860 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800987e:	2300      	movs	r3, #0
}
 8009880:	4618      	mov	r0, r3
 8009882:	3714      	adds	r7, #20
 8009884:	46bd      	mov	sp, r7
 8009886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988a:	4770      	bx	lr

0800988c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800988c:	b480      	push	{r7}
 800988e:	b085      	sub	sp, #20
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
 8009894:	460b      	mov	r3, r1
 8009896:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80098a2:	681a      	ldr	r2, [r3, #0]
 80098a4:	78fb      	ldrb	r3, [r7, #3]
 80098a6:	68f9      	ldr	r1, [r7, #12]
 80098a8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80098ac:	4313      	orrs	r3, r2
 80098ae:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80098b0:	2300      	movs	r3, #0
}
 80098b2:	4618      	mov	r0, r3
 80098b4:	3714      	adds	r7, #20
 80098b6:	46bd      	mov	sp, r7
 80098b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098bc:	4770      	bx	lr

080098be <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80098be:	b480      	push	{r7}
 80098c0:	b085      	sub	sp, #20
 80098c2:	af00      	add	r7, sp, #0
 80098c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	68fa      	ldr	r2, [r7, #12]
 80098d4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80098d8:	f023 0303 	bic.w	r3, r3, #3
 80098dc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80098e4:	685b      	ldr	r3, [r3, #4]
 80098e6:	68fa      	ldr	r2, [r7, #12]
 80098e8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80098ec:	f043 0302 	orr.w	r3, r3, #2
 80098f0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80098f2:	2300      	movs	r3, #0
}
 80098f4:	4618      	mov	r0, r3
 80098f6:	3714      	adds	r7, #20
 80098f8:	46bd      	mov	sp, r7
 80098fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fe:	4770      	bx	lr

08009900 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8009900:	b480      	push	{r7}
 8009902:	b083      	sub	sp, #12
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	695b      	ldr	r3, [r3, #20]
 800990c:	f003 0301 	and.w	r3, r3, #1
}
 8009910:	4618      	mov	r0, r3
 8009912:	370c      	adds	r7, #12
 8009914:	46bd      	mov	sp, r7
 8009916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991a:	4770      	bx	lr

0800991c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800991c:	b480      	push	{r7}
 800991e:	b085      	sub	sp, #20
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009924:	2300      	movs	r3, #0
 8009926:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	3301      	adds	r3, #1
 800992c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009934:	d901      	bls.n	800993a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009936:	2303      	movs	r3, #3
 8009938:	e01b      	b.n	8009972 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	691b      	ldr	r3, [r3, #16]
 800993e:	2b00      	cmp	r3, #0
 8009940:	daf2      	bge.n	8009928 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009942:	2300      	movs	r3, #0
 8009944:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	691b      	ldr	r3, [r3, #16]
 800994a:	f043 0201 	orr.w	r2, r3, #1
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	3301      	adds	r3, #1
 8009956:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800995e:	d901      	bls.n	8009964 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009960:	2303      	movs	r3, #3
 8009962:	e006      	b.n	8009972 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	691b      	ldr	r3, [r3, #16]
 8009968:	f003 0301 	and.w	r3, r3, #1
 800996c:	2b01      	cmp	r3, #1
 800996e:	d0f0      	beq.n	8009952 <USB_CoreReset+0x36>

  return HAL_OK;
 8009970:	2300      	movs	r3, #0
}
 8009972:	4618      	mov	r0, r3
 8009974:	3714      	adds	r7, #20
 8009976:	46bd      	mov	sp, r7
 8009978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997c:	4770      	bx	lr
	...

08009980 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b084      	sub	sp, #16
 8009984:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8009986:	4b87      	ldr	r3, [pc, #540]	@ (8009ba4 <MX_LWIP_Init+0x224>)
 8009988:	22c0      	movs	r2, #192	@ 0xc0
 800998a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800998c:	4b85      	ldr	r3, [pc, #532]	@ (8009ba4 <MX_LWIP_Init+0x224>)
 800998e:	22a8      	movs	r2, #168	@ 0xa8
 8009990:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8009992:	4b84      	ldr	r3, [pc, #528]	@ (8009ba4 <MX_LWIP_Init+0x224>)
 8009994:	2201      	movs	r2, #1
 8009996:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 156;
 8009998:	4b82      	ldr	r3, [pc, #520]	@ (8009ba4 <MX_LWIP_Init+0x224>)
 800999a:	229c      	movs	r2, #156	@ 0x9c
 800999c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800999e:	4b82      	ldr	r3, [pc, #520]	@ (8009ba8 <MX_LWIP_Init+0x228>)
 80099a0:	22ff      	movs	r2, #255	@ 0xff
 80099a2:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80099a4:	4b80      	ldr	r3, [pc, #512]	@ (8009ba8 <MX_LWIP_Init+0x228>)
 80099a6:	22ff      	movs	r2, #255	@ 0xff
 80099a8:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80099aa:	4b7f      	ldr	r3, [pc, #508]	@ (8009ba8 <MX_LWIP_Init+0x228>)
 80099ac:	22ff      	movs	r2, #255	@ 0xff
 80099ae:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80099b0:	4b7d      	ldr	r3, [pc, #500]	@ (8009ba8 <MX_LWIP_Init+0x228>)
 80099b2:	2200      	movs	r2, #0
 80099b4:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 80099b6:	4b7d      	ldr	r3, [pc, #500]	@ (8009bac <MX_LWIP_Init+0x22c>)
 80099b8:	22c0      	movs	r2, #192	@ 0xc0
 80099ba:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 80099bc:	4b7b      	ldr	r3, [pc, #492]	@ (8009bac <MX_LWIP_Init+0x22c>)
 80099be:	22a8      	movs	r2, #168	@ 0xa8
 80099c0:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 80099c2:	4b7a      	ldr	r3, [pc, #488]	@ (8009bac <MX_LWIP_Init+0x22c>)
 80099c4:	2201      	movs	r2, #1
 80099c6:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 80099c8:	4b78      	ldr	r3, [pc, #480]	@ (8009bac <MX_LWIP_Init+0x22c>)
 80099ca:	2201      	movs	r2, #1
 80099cc:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack without RTOS */
  lwip_init();
 80099ce:	f000 ffc2 	bl	800a956 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80099d2:	4b74      	ldr	r3, [pc, #464]	@ (8009ba4 <MX_LWIP_Init+0x224>)
 80099d4:	781b      	ldrb	r3, [r3, #0]
 80099d6:	061a      	lsls	r2, r3, #24
 80099d8:	4b72      	ldr	r3, [pc, #456]	@ (8009ba4 <MX_LWIP_Init+0x224>)
 80099da:	785b      	ldrb	r3, [r3, #1]
 80099dc:	041b      	lsls	r3, r3, #16
 80099de:	431a      	orrs	r2, r3
 80099e0:	4b70      	ldr	r3, [pc, #448]	@ (8009ba4 <MX_LWIP_Init+0x224>)
 80099e2:	789b      	ldrb	r3, [r3, #2]
 80099e4:	021b      	lsls	r3, r3, #8
 80099e6:	4313      	orrs	r3, r2
 80099e8:	4a6e      	ldr	r2, [pc, #440]	@ (8009ba4 <MX_LWIP_Init+0x224>)
 80099ea:	78d2      	ldrb	r2, [r2, #3]
 80099ec:	4313      	orrs	r3, r2
 80099ee:	061a      	lsls	r2, r3, #24
 80099f0:	4b6c      	ldr	r3, [pc, #432]	@ (8009ba4 <MX_LWIP_Init+0x224>)
 80099f2:	781b      	ldrb	r3, [r3, #0]
 80099f4:	0619      	lsls	r1, r3, #24
 80099f6:	4b6b      	ldr	r3, [pc, #428]	@ (8009ba4 <MX_LWIP_Init+0x224>)
 80099f8:	785b      	ldrb	r3, [r3, #1]
 80099fa:	041b      	lsls	r3, r3, #16
 80099fc:	4319      	orrs	r1, r3
 80099fe:	4b69      	ldr	r3, [pc, #420]	@ (8009ba4 <MX_LWIP_Init+0x224>)
 8009a00:	789b      	ldrb	r3, [r3, #2]
 8009a02:	021b      	lsls	r3, r3, #8
 8009a04:	430b      	orrs	r3, r1
 8009a06:	4967      	ldr	r1, [pc, #412]	@ (8009ba4 <MX_LWIP_Init+0x224>)
 8009a08:	78c9      	ldrb	r1, [r1, #3]
 8009a0a:	430b      	orrs	r3, r1
 8009a0c:	021b      	lsls	r3, r3, #8
 8009a0e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009a12:	431a      	orrs	r2, r3
 8009a14:	4b63      	ldr	r3, [pc, #396]	@ (8009ba4 <MX_LWIP_Init+0x224>)
 8009a16:	781b      	ldrb	r3, [r3, #0]
 8009a18:	0619      	lsls	r1, r3, #24
 8009a1a:	4b62      	ldr	r3, [pc, #392]	@ (8009ba4 <MX_LWIP_Init+0x224>)
 8009a1c:	785b      	ldrb	r3, [r3, #1]
 8009a1e:	041b      	lsls	r3, r3, #16
 8009a20:	4319      	orrs	r1, r3
 8009a22:	4b60      	ldr	r3, [pc, #384]	@ (8009ba4 <MX_LWIP_Init+0x224>)
 8009a24:	789b      	ldrb	r3, [r3, #2]
 8009a26:	021b      	lsls	r3, r3, #8
 8009a28:	430b      	orrs	r3, r1
 8009a2a:	495e      	ldr	r1, [pc, #376]	@ (8009ba4 <MX_LWIP_Init+0x224>)
 8009a2c:	78c9      	ldrb	r1, [r1, #3]
 8009a2e:	430b      	orrs	r3, r1
 8009a30:	0a1b      	lsrs	r3, r3, #8
 8009a32:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009a36:	431a      	orrs	r2, r3
 8009a38:	4b5a      	ldr	r3, [pc, #360]	@ (8009ba4 <MX_LWIP_Init+0x224>)
 8009a3a:	781b      	ldrb	r3, [r3, #0]
 8009a3c:	0619      	lsls	r1, r3, #24
 8009a3e:	4b59      	ldr	r3, [pc, #356]	@ (8009ba4 <MX_LWIP_Init+0x224>)
 8009a40:	785b      	ldrb	r3, [r3, #1]
 8009a42:	041b      	lsls	r3, r3, #16
 8009a44:	4319      	orrs	r1, r3
 8009a46:	4b57      	ldr	r3, [pc, #348]	@ (8009ba4 <MX_LWIP_Init+0x224>)
 8009a48:	789b      	ldrb	r3, [r3, #2]
 8009a4a:	021b      	lsls	r3, r3, #8
 8009a4c:	430b      	orrs	r3, r1
 8009a4e:	4955      	ldr	r1, [pc, #340]	@ (8009ba4 <MX_LWIP_Init+0x224>)
 8009a50:	78c9      	ldrb	r1, [r1, #3]
 8009a52:	430b      	orrs	r3, r1
 8009a54:	0e1b      	lsrs	r3, r3, #24
 8009a56:	4313      	orrs	r3, r2
 8009a58:	4a55      	ldr	r2, [pc, #340]	@ (8009bb0 <MX_LWIP_Init+0x230>)
 8009a5a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8009a5c:	4b52      	ldr	r3, [pc, #328]	@ (8009ba8 <MX_LWIP_Init+0x228>)
 8009a5e:	781b      	ldrb	r3, [r3, #0]
 8009a60:	061a      	lsls	r2, r3, #24
 8009a62:	4b51      	ldr	r3, [pc, #324]	@ (8009ba8 <MX_LWIP_Init+0x228>)
 8009a64:	785b      	ldrb	r3, [r3, #1]
 8009a66:	041b      	lsls	r3, r3, #16
 8009a68:	431a      	orrs	r2, r3
 8009a6a:	4b4f      	ldr	r3, [pc, #316]	@ (8009ba8 <MX_LWIP_Init+0x228>)
 8009a6c:	789b      	ldrb	r3, [r3, #2]
 8009a6e:	021b      	lsls	r3, r3, #8
 8009a70:	4313      	orrs	r3, r2
 8009a72:	4a4d      	ldr	r2, [pc, #308]	@ (8009ba8 <MX_LWIP_Init+0x228>)
 8009a74:	78d2      	ldrb	r2, [r2, #3]
 8009a76:	4313      	orrs	r3, r2
 8009a78:	061a      	lsls	r2, r3, #24
 8009a7a:	4b4b      	ldr	r3, [pc, #300]	@ (8009ba8 <MX_LWIP_Init+0x228>)
 8009a7c:	781b      	ldrb	r3, [r3, #0]
 8009a7e:	0619      	lsls	r1, r3, #24
 8009a80:	4b49      	ldr	r3, [pc, #292]	@ (8009ba8 <MX_LWIP_Init+0x228>)
 8009a82:	785b      	ldrb	r3, [r3, #1]
 8009a84:	041b      	lsls	r3, r3, #16
 8009a86:	4319      	orrs	r1, r3
 8009a88:	4b47      	ldr	r3, [pc, #284]	@ (8009ba8 <MX_LWIP_Init+0x228>)
 8009a8a:	789b      	ldrb	r3, [r3, #2]
 8009a8c:	021b      	lsls	r3, r3, #8
 8009a8e:	430b      	orrs	r3, r1
 8009a90:	4945      	ldr	r1, [pc, #276]	@ (8009ba8 <MX_LWIP_Init+0x228>)
 8009a92:	78c9      	ldrb	r1, [r1, #3]
 8009a94:	430b      	orrs	r3, r1
 8009a96:	021b      	lsls	r3, r3, #8
 8009a98:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009a9c:	431a      	orrs	r2, r3
 8009a9e:	4b42      	ldr	r3, [pc, #264]	@ (8009ba8 <MX_LWIP_Init+0x228>)
 8009aa0:	781b      	ldrb	r3, [r3, #0]
 8009aa2:	0619      	lsls	r1, r3, #24
 8009aa4:	4b40      	ldr	r3, [pc, #256]	@ (8009ba8 <MX_LWIP_Init+0x228>)
 8009aa6:	785b      	ldrb	r3, [r3, #1]
 8009aa8:	041b      	lsls	r3, r3, #16
 8009aaa:	4319      	orrs	r1, r3
 8009aac:	4b3e      	ldr	r3, [pc, #248]	@ (8009ba8 <MX_LWIP_Init+0x228>)
 8009aae:	789b      	ldrb	r3, [r3, #2]
 8009ab0:	021b      	lsls	r3, r3, #8
 8009ab2:	430b      	orrs	r3, r1
 8009ab4:	493c      	ldr	r1, [pc, #240]	@ (8009ba8 <MX_LWIP_Init+0x228>)
 8009ab6:	78c9      	ldrb	r1, [r1, #3]
 8009ab8:	430b      	orrs	r3, r1
 8009aba:	0a1b      	lsrs	r3, r3, #8
 8009abc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009ac0:	431a      	orrs	r2, r3
 8009ac2:	4b39      	ldr	r3, [pc, #228]	@ (8009ba8 <MX_LWIP_Init+0x228>)
 8009ac4:	781b      	ldrb	r3, [r3, #0]
 8009ac6:	0619      	lsls	r1, r3, #24
 8009ac8:	4b37      	ldr	r3, [pc, #220]	@ (8009ba8 <MX_LWIP_Init+0x228>)
 8009aca:	785b      	ldrb	r3, [r3, #1]
 8009acc:	041b      	lsls	r3, r3, #16
 8009ace:	4319      	orrs	r1, r3
 8009ad0:	4b35      	ldr	r3, [pc, #212]	@ (8009ba8 <MX_LWIP_Init+0x228>)
 8009ad2:	789b      	ldrb	r3, [r3, #2]
 8009ad4:	021b      	lsls	r3, r3, #8
 8009ad6:	430b      	orrs	r3, r1
 8009ad8:	4933      	ldr	r1, [pc, #204]	@ (8009ba8 <MX_LWIP_Init+0x228>)
 8009ada:	78c9      	ldrb	r1, [r1, #3]
 8009adc:	430b      	orrs	r3, r1
 8009ade:	0e1b      	lsrs	r3, r3, #24
 8009ae0:	4313      	orrs	r3, r2
 8009ae2:	4a34      	ldr	r2, [pc, #208]	@ (8009bb4 <MX_LWIP_Init+0x234>)
 8009ae4:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8009ae6:	4b31      	ldr	r3, [pc, #196]	@ (8009bac <MX_LWIP_Init+0x22c>)
 8009ae8:	781b      	ldrb	r3, [r3, #0]
 8009aea:	061a      	lsls	r2, r3, #24
 8009aec:	4b2f      	ldr	r3, [pc, #188]	@ (8009bac <MX_LWIP_Init+0x22c>)
 8009aee:	785b      	ldrb	r3, [r3, #1]
 8009af0:	041b      	lsls	r3, r3, #16
 8009af2:	431a      	orrs	r2, r3
 8009af4:	4b2d      	ldr	r3, [pc, #180]	@ (8009bac <MX_LWIP_Init+0x22c>)
 8009af6:	789b      	ldrb	r3, [r3, #2]
 8009af8:	021b      	lsls	r3, r3, #8
 8009afa:	4313      	orrs	r3, r2
 8009afc:	4a2b      	ldr	r2, [pc, #172]	@ (8009bac <MX_LWIP_Init+0x22c>)
 8009afe:	78d2      	ldrb	r2, [r2, #3]
 8009b00:	4313      	orrs	r3, r2
 8009b02:	061a      	lsls	r2, r3, #24
 8009b04:	4b29      	ldr	r3, [pc, #164]	@ (8009bac <MX_LWIP_Init+0x22c>)
 8009b06:	781b      	ldrb	r3, [r3, #0]
 8009b08:	0619      	lsls	r1, r3, #24
 8009b0a:	4b28      	ldr	r3, [pc, #160]	@ (8009bac <MX_LWIP_Init+0x22c>)
 8009b0c:	785b      	ldrb	r3, [r3, #1]
 8009b0e:	041b      	lsls	r3, r3, #16
 8009b10:	4319      	orrs	r1, r3
 8009b12:	4b26      	ldr	r3, [pc, #152]	@ (8009bac <MX_LWIP_Init+0x22c>)
 8009b14:	789b      	ldrb	r3, [r3, #2]
 8009b16:	021b      	lsls	r3, r3, #8
 8009b18:	430b      	orrs	r3, r1
 8009b1a:	4924      	ldr	r1, [pc, #144]	@ (8009bac <MX_LWIP_Init+0x22c>)
 8009b1c:	78c9      	ldrb	r1, [r1, #3]
 8009b1e:	430b      	orrs	r3, r1
 8009b20:	021b      	lsls	r3, r3, #8
 8009b22:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009b26:	431a      	orrs	r2, r3
 8009b28:	4b20      	ldr	r3, [pc, #128]	@ (8009bac <MX_LWIP_Init+0x22c>)
 8009b2a:	781b      	ldrb	r3, [r3, #0]
 8009b2c:	0619      	lsls	r1, r3, #24
 8009b2e:	4b1f      	ldr	r3, [pc, #124]	@ (8009bac <MX_LWIP_Init+0x22c>)
 8009b30:	785b      	ldrb	r3, [r3, #1]
 8009b32:	041b      	lsls	r3, r3, #16
 8009b34:	4319      	orrs	r1, r3
 8009b36:	4b1d      	ldr	r3, [pc, #116]	@ (8009bac <MX_LWIP_Init+0x22c>)
 8009b38:	789b      	ldrb	r3, [r3, #2]
 8009b3a:	021b      	lsls	r3, r3, #8
 8009b3c:	430b      	orrs	r3, r1
 8009b3e:	491b      	ldr	r1, [pc, #108]	@ (8009bac <MX_LWIP_Init+0x22c>)
 8009b40:	78c9      	ldrb	r1, [r1, #3]
 8009b42:	430b      	orrs	r3, r1
 8009b44:	0a1b      	lsrs	r3, r3, #8
 8009b46:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009b4a:	431a      	orrs	r2, r3
 8009b4c:	4b17      	ldr	r3, [pc, #92]	@ (8009bac <MX_LWIP_Init+0x22c>)
 8009b4e:	781b      	ldrb	r3, [r3, #0]
 8009b50:	0619      	lsls	r1, r3, #24
 8009b52:	4b16      	ldr	r3, [pc, #88]	@ (8009bac <MX_LWIP_Init+0x22c>)
 8009b54:	785b      	ldrb	r3, [r3, #1]
 8009b56:	041b      	lsls	r3, r3, #16
 8009b58:	4319      	orrs	r1, r3
 8009b5a:	4b14      	ldr	r3, [pc, #80]	@ (8009bac <MX_LWIP_Init+0x22c>)
 8009b5c:	789b      	ldrb	r3, [r3, #2]
 8009b5e:	021b      	lsls	r3, r3, #8
 8009b60:	430b      	orrs	r3, r1
 8009b62:	4912      	ldr	r1, [pc, #72]	@ (8009bac <MX_LWIP_Init+0x22c>)
 8009b64:	78c9      	ldrb	r1, [r1, #3]
 8009b66:	430b      	orrs	r3, r1
 8009b68:	0e1b      	lsrs	r3, r3, #24
 8009b6a:	4313      	orrs	r3, r2
 8009b6c:	4a12      	ldr	r2, [pc, #72]	@ (8009bb8 <MX_LWIP_Init+0x238>)
 8009b6e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8009b70:	4b12      	ldr	r3, [pc, #72]	@ (8009bbc <MX_LWIP_Init+0x23c>)
 8009b72:	9302      	str	r3, [sp, #8]
 8009b74:	4b12      	ldr	r3, [pc, #72]	@ (8009bc0 <MX_LWIP_Init+0x240>)
 8009b76:	9301      	str	r3, [sp, #4]
 8009b78:	2300      	movs	r3, #0
 8009b7a:	9300      	str	r3, [sp, #0]
 8009b7c:	4b0e      	ldr	r3, [pc, #56]	@ (8009bb8 <MX_LWIP_Init+0x238>)
 8009b7e:	4a0d      	ldr	r2, [pc, #52]	@ (8009bb4 <MX_LWIP_Init+0x234>)
 8009b80:	490b      	ldr	r1, [pc, #44]	@ (8009bb0 <MX_LWIP_Init+0x230>)
 8009b82:	4810      	ldr	r0, [pc, #64]	@ (8009bc4 <MX_LWIP_Init+0x244>)
 8009b84:	f001 fbd4 	bl	800b330 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8009b88:	480e      	ldr	r0, [pc, #56]	@ (8009bc4 <MX_LWIP_Init+0x244>)
 8009b8a:	f001 fd83 	bl	800b694 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8009b8e:	480d      	ldr	r0, [pc, #52]	@ (8009bc4 <MX_LWIP_Init+0x244>)
 8009b90:	f001 fd90 	bl	800b6b4 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8009b94:	490c      	ldr	r1, [pc, #48]	@ (8009bc8 <MX_LWIP_Init+0x248>)
 8009b96:	480b      	ldr	r0, [pc, #44]	@ (8009bc4 <MX_LWIP_Init+0x244>)
 8009b98:	f001 fe8e 	bl	800b8b8 <netif_set_link_callback>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8009b9c:	bf00      	nop
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	bd80      	pop	{r7, pc}
 8009ba2:	bf00      	nop
 8009ba4:	2000269c 	.word	0x2000269c
 8009ba8:	200026a0 	.word	0x200026a0
 8009bac:	200026a4 	.word	0x200026a4
 8009bb0:	20002690 	.word	0x20002690
 8009bb4:	20002694 	.word	0x20002694
 8009bb8:	20002698 	.word	0x20002698
 8009bbc:	08014b65 	.word	0x08014b65
 8009bc0:	08009ee9 	.word	0x08009ee9
 8009bc4:	2000265c 	.word	0x2000265c
 8009bc8:	08009c1d 	.word	0x08009c1d

08009bcc <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b082      	sub	sp, #8
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 8009bd4:	f7fb fa04 	bl	8004fe0 <HAL_GetTick>
 8009bd8:	4602      	mov	r2, r0
 8009bda:	4b08      	ldr	r3, [pc, #32]	@ (8009bfc <Ethernet_Link_Periodic_Handle+0x30>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	1ad3      	subs	r3, r2, r3
 8009be0:	2b63      	cmp	r3, #99	@ 0x63
 8009be2:	d907      	bls.n	8009bf4 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 8009be4:	f7fb f9fc 	bl	8004fe0 <HAL_GetTick>
 8009be8:	4603      	mov	r3, r0
 8009bea:	4a04      	ldr	r2, [pc, #16]	@ (8009bfc <Ethernet_Link_Periodic_Handle+0x30>)
 8009bec:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 8009bee:	6878      	ldr	r0, [r7, #4]
 8009bf0:	f000 fabe 	bl	800a170 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 8009bf4:	bf00      	nop
 8009bf6:	3708      	adds	r7, #8
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	bd80      	pop	{r7, pc}
 8009bfc:	20002658 	.word	0x20002658

08009c00 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8009c04:	4804      	ldr	r0, [pc, #16]	@ (8009c18 <MX_LWIP_Process+0x18>)
 8009c06:	f000 f94f 	bl	8009ea8 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8009c0a:	f008 f82d 	bl	8011c68 <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 8009c0e:	4802      	ldr	r0, [pc, #8]	@ (8009c18 <MX_LWIP_Process+0x18>)
 8009c10:	f7ff ffdc 	bl	8009bcc <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8009c14:	bf00      	nop
 8009c16:	bd80      	pop	{r7, pc}
 8009c18:	2000265c 	.word	0x2000265c

08009c1c <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8009c1c:	b480      	push	{r7}
 8009c1e:	b083      	sub	sp, #12
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8009c24:	bf00      	nop
 8009c26:	370c      	adds	r7, #12
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2e:	4770      	bx	lr

08009c30 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b084      	sub	sp, #16
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8009c38:	2300      	movs	r3, #0
 8009c3a:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8009c3c:	4b44      	ldr	r3, [pc, #272]	@ (8009d50 <low_level_init+0x120>)
 8009c3e:	4a45      	ldr	r2, [pc, #276]	@ (8009d54 <low_level_init+0x124>)
 8009c40:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x50;
 8009c42:	2350      	movs	r3, #80	@ 0x50
 8009c44:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x39;
 8009c46:	2339      	movs	r3, #57	@ 0x39
 8009c48:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0x64;
 8009c4a:	2364      	movs	r3, #100	@ 0x64
 8009c4c:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0xFD;
 8009c4e:	23fd      	movs	r3, #253	@ 0xfd
 8009c50:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x60;
 8009c52:	2360      	movs	r3, #96	@ 0x60
 8009c54:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8009c56:	2300      	movs	r3, #0
 8009c58:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8009c5a:	4a3d      	ldr	r2, [pc, #244]	@ (8009d50 <low_level_init+0x120>)
 8009c5c:	f107 0308 	add.w	r3, r7, #8
 8009c60:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8009c62:	4b3b      	ldr	r3, [pc, #236]	@ (8009d50 <low_level_init+0x120>)
 8009c64:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8009c68:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8009c6a:	4b39      	ldr	r3, [pc, #228]	@ (8009d50 <low_level_init+0x120>)
 8009c6c:	4a3a      	ldr	r2, [pc, #232]	@ (8009d58 <low_level_init+0x128>)
 8009c6e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8009c70:	4b37      	ldr	r3, [pc, #220]	@ (8009d50 <low_level_init+0x120>)
 8009c72:	4a3a      	ldr	r2, [pc, #232]	@ (8009d5c <low_level_init+0x12c>)
 8009c74:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1024;
 8009c76:	4b36      	ldr	r3, [pc, #216]	@ (8009d50 <low_level_init+0x120>)
 8009c78:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009c7c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8009c7e:	4834      	ldr	r0, [pc, #208]	@ (8009d50 <low_level_init+0x120>)
 8009c80:	f7fb fec8 	bl	8005a14 <HAL_ETH_Init>
 8009c84:	4603      	mov	r3, r0
 8009c86:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8009c88:	2238      	movs	r2, #56	@ 0x38
 8009c8a:	2100      	movs	r1, #0
 8009c8c:	4834      	ldr	r0, [pc, #208]	@ (8009d60 <low_level_init+0x130>)
 8009c8e:	f00c f876 	bl	8015d7e <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8009c92:	4b33      	ldr	r3, [pc, #204]	@ (8009d60 <low_level_init+0x130>)
 8009c94:	2221      	movs	r2, #33	@ 0x21
 8009c96:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8009c98:	4b31      	ldr	r3, [pc, #196]	@ (8009d60 <low_level_init+0x130>)
 8009c9a:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8009c9e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8009ca0:	4b2f      	ldr	r3, [pc, #188]	@ (8009d60 <low_level_init+0x130>)
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8009ca6:	482f      	ldr	r0, [pc, #188]	@ (8009d64 <low_level_init+0x134>)
 8009ca8:	f001 fa0a 	bl	800b0c0 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2206      	movs	r2, #6
 8009cb0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8009cb4:	4b26      	ldr	r3, [pc, #152]	@ (8009d50 <low_level_init+0x120>)
 8009cb6:	685b      	ldr	r3, [r3, #4]
 8009cb8:	781a      	ldrb	r2, [r3, #0]
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8009cc0:	4b23      	ldr	r3, [pc, #140]	@ (8009d50 <low_level_init+0x120>)
 8009cc2:	685b      	ldr	r3, [r3, #4]
 8009cc4:	785a      	ldrb	r2, [r3, #1]
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8009ccc:	4b20      	ldr	r3, [pc, #128]	@ (8009d50 <low_level_init+0x120>)
 8009cce:	685b      	ldr	r3, [r3, #4]
 8009cd0:	789a      	ldrb	r2, [r3, #2]
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8009cd8:	4b1d      	ldr	r3, [pc, #116]	@ (8009d50 <low_level_init+0x120>)
 8009cda:	685b      	ldr	r3, [r3, #4]
 8009cdc:	78da      	ldrb	r2, [r3, #3]
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8009ce4:	4b1a      	ldr	r3, [pc, #104]	@ (8009d50 <low_level_init+0x120>)
 8009ce6:	685b      	ldr	r3, [r3, #4]
 8009ce8:	791a      	ldrb	r2, [r3, #4]
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8009cf0:	4b17      	ldr	r3, [pc, #92]	@ (8009d50 <low_level_init+0x120>)
 8009cf2:	685b      	ldr	r3, [r3, #4]
 8009cf4:	795a      	ldrb	r2, [r3, #5]
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8009d02:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8009d0a:	f043 030a 	orr.w	r3, r3, #10
 8009d0e:	b2da      	uxtb	r2, r3
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8009d16:	4914      	ldr	r1, [pc, #80]	@ (8009d68 <low_level_init+0x138>)
 8009d18:	4814      	ldr	r0, [pc, #80]	@ (8009d6c <low_level_init+0x13c>)
 8009d1a:	f7fa fff4 	bl	8004d06 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 8009d1e:	4813      	ldr	r0, [pc, #76]	@ (8009d6c <low_level_init+0x13c>)
 8009d20:	f7fb f823 	bl	8004d6a <LAN8742_Init>
 8009d24:	4603      	mov	r3, r0
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d006      	beq.n	8009d38 <low_level_init+0x108>
  {
    netif_set_link_down(netif);
 8009d2a:	6878      	ldr	r0, [r7, #4]
 8009d2c:	f001 fd94 	bl	800b858 <netif_set_link_down>
    netif_set_down(netif);
 8009d30:	6878      	ldr	r0, [r7, #4]
 8009d32:	f001 fd2b 	bl	800b78c <netif_set_down>
 8009d36:	e008      	b.n	8009d4a <low_level_init+0x11a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 8009d38:	7bfb      	ldrb	r3, [r7, #15]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d103      	bne.n	8009d46 <low_level_init+0x116>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f000 fa16 	bl	800a170 <ethernet_link_check_state>
 8009d44:	e001      	b.n	8009d4a <low_level_init+0x11a>
  }
  else
  {
    Error_Handler();
 8009d46:	f7fa f91d 	bl	8003f84 <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8009d4a:	3710      	adds	r7, #16
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	bd80      	pop	{r7, pc}
 8009d50:	20005974 	.word	0x20005974
 8009d54:	40028000 	.word	0x40028000
 8009d58:	200058d4 	.word	0x200058d4
 8009d5c:	20005834 	.word	0x20005834
 8009d60:	20005a24 	.word	0x20005a24
 8009d64:	08020bd4 	.word	0x08020bd4
 8009d68:	2000044c 	.word	0x2000044c
 8009d6c:	20005a5c 	.word	0x20005a5c

08009d70 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b092      	sub	sp, #72	@ 0x48
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
 8009d78:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 8009d7e:	2300      	movs	r3, #0
 8009d80:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 8009d82:	2300      	movs	r3, #0
 8009d84:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8009d88:	f107 030c 	add.w	r3, r7, #12
 8009d8c:	2230      	movs	r2, #48	@ 0x30
 8009d8e:	2100      	movs	r1, #0
 8009d90:	4618      	mov	r0, r3
 8009d92:	f00b fff4 	bl	8015d7e <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8009d96:	f107 030c 	add.w	r3, r7, #12
 8009d9a:	2230      	movs	r2, #48	@ 0x30
 8009d9c:	2100      	movs	r1, #0
 8009d9e:	4618      	mov	r0, r3
 8009da0:	f00b ffed 	bl	8015d7e <memset>

  for(q = p; q != NULL; q = q->next)
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	643b      	str	r3, [r7, #64]	@ 0x40
 8009da8:	e045      	b.n	8009e36 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8009daa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009dac:	2b03      	cmp	r3, #3
 8009dae:	d902      	bls.n	8009db6 <low_level_output+0x46>
      return ERR_IF;
 8009db0:	f06f 030b 	mvn.w	r3, #11
 8009db4:	e055      	b.n	8009e62 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 8009db6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009db8:	6859      	ldr	r1, [r3, #4]
 8009dba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009dbc:	4613      	mov	r3, r2
 8009dbe:	005b      	lsls	r3, r3, #1
 8009dc0:	4413      	add	r3, r2
 8009dc2:	009b      	lsls	r3, r3, #2
 8009dc4:	3348      	adds	r3, #72	@ 0x48
 8009dc6:	443b      	add	r3, r7
 8009dc8:	3b3c      	subs	r3, #60	@ 0x3c
 8009dca:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8009dcc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009dce:	895b      	ldrh	r3, [r3, #10]
 8009dd0:	4619      	mov	r1, r3
 8009dd2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009dd4:	4613      	mov	r3, r2
 8009dd6:	005b      	lsls	r3, r3, #1
 8009dd8:	4413      	add	r3, r2
 8009dda:	009b      	lsls	r3, r3, #2
 8009ddc:	3348      	adds	r3, #72	@ 0x48
 8009dde:	443b      	add	r3, r7
 8009de0:	3b38      	subs	r3, #56	@ 0x38
 8009de2:	6019      	str	r1, [r3, #0]

    if(i>0)
 8009de4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d011      	beq.n	8009e0e <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8009dea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009dec:	1e5a      	subs	r2, r3, #1
 8009dee:	f107 000c 	add.w	r0, r7, #12
 8009df2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009df4:	460b      	mov	r3, r1
 8009df6:	005b      	lsls	r3, r3, #1
 8009df8:	440b      	add	r3, r1
 8009dfa:	009b      	lsls	r3, r3, #2
 8009dfc:	18c1      	adds	r1, r0, r3
 8009dfe:	4613      	mov	r3, r2
 8009e00:	005b      	lsls	r3, r3, #1
 8009e02:	4413      	add	r3, r2
 8009e04:	009b      	lsls	r3, r3, #2
 8009e06:	3348      	adds	r3, #72	@ 0x48
 8009e08:	443b      	add	r3, r7
 8009e0a:	3b34      	subs	r3, #52	@ 0x34
 8009e0c:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8009e0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d109      	bne.n	8009e2a <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8009e16:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009e18:	4613      	mov	r3, r2
 8009e1a:	005b      	lsls	r3, r3, #1
 8009e1c:	4413      	add	r3, r2
 8009e1e:	009b      	lsls	r3, r3, #2
 8009e20:	3348      	adds	r3, #72	@ 0x48
 8009e22:	443b      	add	r3, r7
 8009e24:	3b34      	subs	r3, #52	@ 0x34
 8009e26:	2200      	movs	r2, #0
 8009e28:	601a      	str	r2, [r3, #0]
    }

    i++;
 8009e2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009e2c:	3301      	adds	r3, #1
 8009e2e:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8009e30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	643b      	str	r3, [r7, #64]	@ 0x40
 8009e36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d1b6      	bne.n	8009daa <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8009e3c:	683b      	ldr	r3, [r7, #0]
 8009e3e:	891b      	ldrh	r3, [r3, #8]
 8009e40:	461a      	mov	r2, r3
 8009e42:	4b0a      	ldr	r3, [pc, #40]	@ (8009e6c <low_level_output+0xfc>)
 8009e44:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8009e46:	4a09      	ldr	r2, [pc, #36]	@ (8009e6c <low_level_output+0xfc>)
 8009e48:	f107 030c 	add.w	r3, r7, #12
 8009e4c:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8009e4e:	4a07      	ldr	r2, [pc, #28]	@ (8009e6c <low_level_output+0xfc>)
 8009e50:	683b      	ldr	r3, [r7, #0]
 8009e52:	6353      	str	r3, [r2, #52]	@ 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8009e54:	2214      	movs	r2, #20
 8009e56:	4905      	ldr	r1, [pc, #20]	@ (8009e6c <low_level_output+0xfc>)
 8009e58:	4805      	ldr	r0, [pc, #20]	@ (8009e70 <low_level_output+0x100>)
 8009e5a:	f7fb ff2f 	bl	8005cbc <HAL_ETH_Transmit>

  return errval;
 8009e5e:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8009e62:	4618      	mov	r0, r3
 8009e64:	3748      	adds	r7, #72	@ 0x48
 8009e66:	46bd      	mov	sp, r7
 8009e68:	bd80      	pop	{r7, pc}
 8009e6a:	bf00      	nop
 8009e6c:	20005a24 	.word	0x20005a24
 8009e70:	20005974 	.word	0x20005974

08009e74 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b084      	sub	sp, #16
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8009e80:	4b07      	ldr	r3, [pc, #28]	@ (8009ea0 <low_level_input+0x2c>)
 8009e82:	781b      	ldrb	r3, [r3, #0]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d105      	bne.n	8009e94 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8009e88:	f107 030c 	add.w	r3, r7, #12
 8009e8c:	4619      	mov	r1, r3
 8009e8e:	4805      	ldr	r0, [pc, #20]	@ (8009ea4 <low_level_input+0x30>)
 8009e90:	f7fb ffa8 	bl	8005de4 <HAL_ETH_ReadData>
  }

  return p;
 8009e94:	68fb      	ldr	r3, [r7, #12]
}
 8009e96:	4618      	mov	r0, r3
 8009e98:	3710      	adds	r7, #16
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	bd80      	pop	{r7, pc}
 8009e9e:	bf00      	nop
 8009ea0:	20005830 	.word	0x20005830
 8009ea4:	20005974 	.word	0x20005974

08009ea8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b084      	sub	sp, #16
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 8009eb4:	6878      	ldr	r0, [r7, #4]
 8009eb6:	f7ff ffdd 	bl	8009e74 <low_level_input>
 8009eba:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d00a      	beq.n	8009ed8 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	691b      	ldr	r3, [r3, #16]
 8009ec6:	6879      	ldr	r1, [r7, #4]
 8009ec8:	68f8      	ldr	r0, [r7, #12]
 8009eca:	4798      	blx	r3
 8009ecc:	4603      	mov	r3, r0
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d002      	beq.n	8009ed8 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 8009ed2:	68f8      	ldr	r0, [r7, #12]
 8009ed4:	f002 f870 	bl	800bfb8 <pbuf_free>
      }
    }
  } while(p!=NULL);
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d1ea      	bne.n	8009eb4 <ethernetif_input+0xc>
}
 8009ede:	bf00      	nop
 8009ee0:	bf00      	nop
 8009ee2:	3710      	adds	r7, #16
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	bd80      	pop	{r7, pc}

08009ee8 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b082      	sub	sp, #8
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d106      	bne.n	8009f04 <ethernetif_init+0x1c>
 8009ef6:	4b0e      	ldr	r3, [pc, #56]	@ (8009f30 <ethernetif_init+0x48>)
 8009ef8:	f240 126f 	movw	r2, #367	@ 0x16f
 8009efc:	490d      	ldr	r1, [pc, #52]	@ (8009f34 <ethernetif_init+0x4c>)
 8009efe:	480e      	ldr	r0, [pc, #56]	@ (8009f38 <ethernetif_init+0x50>)
 8009f00:	f00b fe9c 	bl	8015c3c <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2273      	movs	r2, #115	@ 0x73
 8009f08:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2274      	movs	r2, #116	@ 0x74
 8009f10:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	4a09      	ldr	r2, [pc, #36]	@ (8009f3c <ethernetif_init+0x54>)
 8009f18:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	4a08      	ldr	r2, [pc, #32]	@ (8009f40 <ethernetif_init+0x58>)
 8009f1e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8009f20:	6878      	ldr	r0, [r7, #4]
 8009f22:	f7ff fe85 	bl	8009c30 <low_level_init>

  return ERR_OK;
 8009f26:	2300      	movs	r3, #0
}
 8009f28:	4618      	mov	r0, r3
 8009f2a:	3708      	adds	r7, #8
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	bd80      	pop	{r7, pc}
 8009f30:	0801e130 	.word	0x0801e130
 8009f34:	0801e14c 	.word	0x0801e14c
 8009f38:	0801e15c 	.word	0x0801e15c
 8009f3c:	0801301d 	.word	0x0801301d
 8009f40:	08009d71 	.word	0x08009d71

08009f44 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b084      	sub	sp, #16
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8009f50:	68f9      	ldr	r1, [r7, #12]
 8009f52:	4807      	ldr	r0, [pc, #28]	@ (8009f70 <pbuf_free_custom+0x2c>)
 8009f54:	f001 f996 	bl	800b284 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8009f58:	4b06      	ldr	r3, [pc, #24]	@ (8009f74 <pbuf_free_custom+0x30>)
 8009f5a:	781b      	ldrb	r3, [r3, #0]
 8009f5c:	2b01      	cmp	r3, #1
 8009f5e:	d102      	bne.n	8009f66 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8009f60:	4b04      	ldr	r3, [pc, #16]	@ (8009f74 <pbuf_free_custom+0x30>)
 8009f62:	2200      	movs	r2, #0
 8009f64:	701a      	strb	r2, [r3, #0]
  }
}
 8009f66:	bf00      	nop
 8009f68:	3710      	adds	r7, #16
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	bd80      	pop	{r7, pc}
 8009f6e:	bf00      	nop
 8009f70:	08020bd4 	.word	0x08020bd4
 8009f74:	20005830 	.word	0x20005830

08009f78 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8009f7c:	f7fb f830 	bl	8004fe0 <HAL_GetTick>
 8009f80:	4603      	mov	r3, r0
}
 8009f82:	4618      	mov	r0, r3
 8009f84:	bd80      	pop	{r7, pc}
	...

08009f88 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b08e      	sub	sp, #56	@ 0x38
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009f90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009f94:	2200      	movs	r2, #0
 8009f96:	601a      	str	r2, [r3, #0]
 8009f98:	605a      	str	r2, [r3, #4]
 8009f9a:	609a      	str	r2, [r3, #8]
 8009f9c:	60da      	str	r2, [r3, #12]
 8009f9e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	4a46      	ldr	r2, [pc, #280]	@ (800a0c0 <HAL_ETH_MspInit+0x138>)
 8009fa6:	4293      	cmp	r3, r2
 8009fa8:	f040 8085 	bne.w	800a0b6 <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8009fac:	2300      	movs	r3, #0
 8009fae:	623b      	str	r3, [r7, #32]
 8009fb0:	4b44      	ldr	r3, [pc, #272]	@ (800a0c4 <HAL_ETH_MspInit+0x13c>)
 8009fb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009fb4:	4a43      	ldr	r2, [pc, #268]	@ (800a0c4 <HAL_ETH_MspInit+0x13c>)
 8009fb6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8009fba:	6313      	str	r3, [r2, #48]	@ 0x30
 8009fbc:	4b41      	ldr	r3, [pc, #260]	@ (800a0c4 <HAL_ETH_MspInit+0x13c>)
 8009fbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009fc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009fc4:	623b      	str	r3, [r7, #32]
 8009fc6:	6a3b      	ldr	r3, [r7, #32]
 8009fc8:	2300      	movs	r3, #0
 8009fca:	61fb      	str	r3, [r7, #28]
 8009fcc:	4b3d      	ldr	r3, [pc, #244]	@ (800a0c4 <HAL_ETH_MspInit+0x13c>)
 8009fce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009fd0:	4a3c      	ldr	r2, [pc, #240]	@ (800a0c4 <HAL_ETH_MspInit+0x13c>)
 8009fd2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009fd6:	6313      	str	r3, [r2, #48]	@ 0x30
 8009fd8:	4b3a      	ldr	r3, [pc, #232]	@ (800a0c4 <HAL_ETH_MspInit+0x13c>)
 8009fda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009fdc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009fe0:	61fb      	str	r3, [r7, #28]
 8009fe2:	69fb      	ldr	r3, [r7, #28]
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	61bb      	str	r3, [r7, #24]
 8009fe8:	4b36      	ldr	r3, [pc, #216]	@ (800a0c4 <HAL_ETH_MspInit+0x13c>)
 8009fea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009fec:	4a35      	ldr	r2, [pc, #212]	@ (800a0c4 <HAL_ETH_MspInit+0x13c>)
 8009fee:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009ff2:	6313      	str	r3, [r2, #48]	@ 0x30
 8009ff4:	4b33      	ldr	r3, [pc, #204]	@ (800a0c4 <HAL_ETH_MspInit+0x13c>)
 8009ff6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ff8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009ffc:	61bb      	str	r3, [r7, #24]
 8009ffe:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a000:	2300      	movs	r3, #0
 800a002:	617b      	str	r3, [r7, #20]
 800a004:	4b2f      	ldr	r3, [pc, #188]	@ (800a0c4 <HAL_ETH_MspInit+0x13c>)
 800a006:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a008:	4a2e      	ldr	r2, [pc, #184]	@ (800a0c4 <HAL_ETH_MspInit+0x13c>)
 800a00a:	f043 0304 	orr.w	r3, r3, #4
 800a00e:	6313      	str	r3, [r2, #48]	@ 0x30
 800a010:	4b2c      	ldr	r3, [pc, #176]	@ (800a0c4 <HAL_ETH_MspInit+0x13c>)
 800a012:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a014:	f003 0304 	and.w	r3, r3, #4
 800a018:	617b      	str	r3, [r7, #20]
 800a01a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a01c:	2300      	movs	r3, #0
 800a01e:	613b      	str	r3, [r7, #16]
 800a020:	4b28      	ldr	r3, [pc, #160]	@ (800a0c4 <HAL_ETH_MspInit+0x13c>)
 800a022:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a024:	4a27      	ldr	r2, [pc, #156]	@ (800a0c4 <HAL_ETH_MspInit+0x13c>)
 800a026:	f043 0301 	orr.w	r3, r3, #1
 800a02a:	6313      	str	r3, [r2, #48]	@ 0x30
 800a02c:	4b25      	ldr	r3, [pc, #148]	@ (800a0c4 <HAL_ETH_MspInit+0x13c>)
 800a02e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a030:	f003 0301 	and.w	r3, r3, #1
 800a034:	613b      	str	r3, [r7, #16]
 800a036:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a038:	2300      	movs	r3, #0
 800a03a:	60fb      	str	r3, [r7, #12]
 800a03c:	4b21      	ldr	r3, [pc, #132]	@ (800a0c4 <HAL_ETH_MspInit+0x13c>)
 800a03e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a040:	4a20      	ldr	r2, [pc, #128]	@ (800a0c4 <HAL_ETH_MspInit+0x13c>)
 800a042:	f043 0302 	orr.w	r3, r3, #2
 800a046:	6313      	str	r3, [r2, #48]	@ 0x30
 800a048:	4b1e      	ldr	r3, [pc, #120]	@ (800a0c4 <HAL_ETH_MspInit+0x13c>)
 800a04a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a04c:	f003 0302 	and.w	r3, r3, #2
 800a050:	60fb      	str	r3, [r7, #12]
 800a052:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800a054:	2332      	movs	r3, #50	@ 0x32
 800a056:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a058:	2302      	movs	r3, #2
 800a05a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a05c:	2300      	movs	r3, #0
 800a05e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a060:	2303      	movs	r3, #3
 800a062:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a064:	230b      	movs	r3, #11
 800a066:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a068:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a06c:	4619      	mov	r1, r3
 800a06e:	4816      	ldr	r0, [pc, #88]	@ (800a0c8 <HAL_ETH_MspInit+0x140>)
 800a070:	f7fc fe04 	bl	8006c7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800a074:	2386      	movs	r3, #134	@ 0x86
 800a076:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a078:	2302      	movs	r3, #2
 800a07a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a07c:	2300      	movs	r3, #0
 800a07e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a080:	2303      	movs	r3, #3
 800a082:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a084:	230b      	movs	r3, #11
 800a086:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a088:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a08c:	4619      	mov	r1, r3
 800a08e:	480f      	ldr	r0, [pc, #60]	@ (800a0cc <HAL_ETH_MspInit+0x144>)
 800a090:	f7fc fdf4 	bl	8006c7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 800a094:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 800a098:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a09a:	2302      	movs	r3, #2
 800a09c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a09e:	2300      	movs	r3, #0
 800a0a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a0a2:	2303      	movs	r3, #3
 800a0a4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a0a6:	230b      	movs	r3, #11
 800a0a8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a0aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a0ae:	4619      	mov	r1, r3
 800a0b0:	4807      	ldr	r0, [pc, #28]	@ (800a0d0 <HAL_ETH_MspInit+0x148>)
 800a0b2:	f7fc fde3 	bl	8006c7c <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800a0b6:	bf00      	nop
 800a0b8:	3738      	adds	r7, #56	@ 0x38
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	bd80      	pop	{r7, pc}
 800a0be:	bf00      	nop
 800a0c0:	40028000 	.word	0x40028000
 800a0c4:	40023800 	.word	0x40023800
 800a0c8:	40020800 	.word	0x40020800
 800a0cc:	40020000 	.word	0x40020000
 800a0d0:	40020400 	.word	0x40020400

0800a0d4 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800a0d8:	4802      	ldr	r0, [pc, #8]	@ (800a0e4 <ETH_PHY_IO_Init+0x10>)
 800a0da:	f7fc f96b 	bl	80063b4 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800a0de:	2300      	movs	r3, #0
}
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	bd80      	pop	{r7, pc}
 800a0e4:	20005974 	.word	0x20005974

0800a0e8 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800a0e8:	b480      	push	{r7}
 800a0ea:	af00      	add	r7, sp, #0
  return 0;
 800a0ec:	2300      	movs	r3, #0
}
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f6:	4770      	bx	lr

0800a0f8 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b084      	sub	sp, #16
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	60f8      	str	r0, [r7, #12]
 800a100:	60b9      	str	r1, [r7, #8]
 800a102:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	68ba      	ldr	r2, [r7, #8]
 800a108:	68f9      	ldr	r1, [r7, #12]
 800a10a:	4807      	ldr	r0, [pc, #28]	@ (800a128 <ETH_PHY_IO_ReadReg+0x30>)
 800a10c:	f7fb ffad 	bl	800606a <HAL_ETH_ReadPHYRegister>
 800a110:	4603      	mov	r3, r0
 800a112:	2b00      	cmp	r3, #0
 800a114:	d002      	beq.n	800a11c <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800a116:	f04f 33ff 	mov.w	r3, #4294967295
 800a11a:	e000      	b.n	800a11e <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800a11c:	2300      	movs	r3, #0
}
 800a11e:	4618      	mov	r0, r3
 800a120:	3710      	adds	r7, #16
 800a122:	46bd      	mov	sp, r7
 800a124:	bd80      	pop	{r7, pc}
 800a126:	bf00      	nop
 800a128:	20005974 	.word	0x20005974

0800a12c <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800a12c:	b580      	push	{r7, lr}
 800a12e:	b084      	sub	sp, #16
 800a130:	af00      	add	r7, sp, #0
 800a132:	60f8      	str	r0, [r7, #12]
 800a134:	60b9      	str	r1, [r7, #8]
 800a136:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	68ba      	ldr	r2, [r7, #8]
 800a13c:	68f9      	ldr	r1, [r7, #12]
 800a13e:	4807      	ldr	r0, [pc, #28]	@ (800a15c <ETH_PHY_IO_WriteReg+0x30>)
 800a140:	f7fb ffde 	bl	8006100 <HAL_ETH_WritePHYRegister>
 800a144:	4603      	mov	r3, r0
 800a146:	2b00      	cmp	r3, #0
 800a148:	d002      	beq.n	800a150 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800a14a:	f04f 33ff 	mov.w	r3, #4294967295
 800a14e:	e000      	b.n	800a152 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800a150:	2300      	movs	r3, #0
}
 800a152:	4618      	mov	r0, r3
 800a154:	3710      	adds	r7, #16
 800a156:	46bd      	mov	sp, r7
 800a158:	bd80      	pop	{r7, pc}
 800a15a:	bf00      	nop
 800a15c:	20005974 	.word	0x20005974

0800a160 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800a164:	f7fa ff3c 	bl	8004fe0 <HAL_GetTick>
 800a168:	4603      	mov	r3, r0
}
 800a16a:	4618      	mov	r0, r3
 800a16c:	bd80      	pop	{r7, pc}
	...

0800a170 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b0a0      	sub	sp, #128	@ 0x80
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800a178:	f107 030c 	add.w	r3, r7, #12
 800a17c:	2264      	movs	r2, #100	@ 0x64
 800a17e:	2100      	movs	r1, #0
 800a180:	4618      	mov	r0, r3
 800a182:	f00b fdfc 	bl	8015d7e <memset>
  int32_t PHYLinkState = 0;
 800a186:	2300      	movs	r3, #0
 800a188:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800a18a:	2300      	movs	r3, #0
 800a18c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a18e:	2300      	movs	r3, #0
 800a190:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a192:	2300      	movs	r3, #0
 800a194:	677b      	str	r3, [r7, #116]	@ 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800a196:	483a      	ldr	r0, [pc, #232]	@ (800a280 <ethernet_link_check_state+0x110>)
 800a198:	f7fa fe34 	bl	8004e04 <LAN8742_GetLinkState>
 800a19c:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a1a4:	089b      	lsrs	r3, r3, #2
 800a1a6:	f003 0301 	and.w	r3, r3, #1
 800a1aa:	b2db      	uxtb	r3, r3
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d00c      	beq.n	800a1ca <ethernet_link_check_state+0x5a>
 800a1b0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a1b2:	2b01      	cmp	r3, #1
 800a1b4:	dc09      	bgt.n	800a1ca <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 800a1b6:	4833      	ldr	r0, [pc, #204]	@ (800a284 <ethernet_link_check_state+0x114>)
 800a1b8:	f7fb fd27 	bl	8005c0a <HAL_ETH_Stop>
    netif_set_down(netif);
 800a1bc:	6878      	ldr	r0, [r7, #4]
 800a1be:	f001 fae5 	bl	800b78c <netif_set_down>
    netif_set_link_down(netif);
 800a1c2:	6878      	ldr	r0, [r7, #4]
 800a1c4:	f001 fb48 	bl	800b858 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 800a1c8:	e055      	b.n	800a276 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a1d0:	f003 0304 	and.w	r3, r3, #4
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d14e      	bne.n	800a276 <ethernet_link_check_state+0x106>
 800a1d8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a1da:	2b01      	cmp	r3, #1
 800a1dc:	dd4b      	ble.n	800a276 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 800a1de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a1e0:	3b02      	subs	r3, #2
 800a1e2:	2b03      	cmp	r3, #3
 800a1e4:	d82a      	bhi.n	800a23c <ethernet_link_check_state+0xcc>
 800a1e6:	a201      	add	r2, pc, #4	@ (adr r2, 800a1ec <ethernet_link_check_state+0x7c>)
 800a1e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1ec:	0800a1fd 	.word	0x0800a1fd
 800a1f0:	0800a20f 	.word	0x0800a20f
 800a1f4:	0800a21f 	.word	0x0800a21f
 800a1f8:	0800a22f 	.word	0x0800a22f
      duplex = ETH_FULLDUPLEX_MODE;
 800a1fc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a200:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800a202:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800a206:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800a208:	2301      	movs	r3, #1
 800a20a:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800a20c:	e017      	b.n	800a23e <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800a20e:	2300      	movs	r3, #0
 800a210:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800a212:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800a216:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800a218:	2301      	movs	r3, #1
 800a21a:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800a21c:	e00f      	b.n	800a23e <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 800a21e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a222:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800a224:	2300      	movs	r3, #0
 800a226:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800a228:	2301      	movs	r3, #1
 800a22a:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800a22c:	e007      	b.n	800a23e <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800a22e:	2300      	movs	r3, #0
 800a230:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800a232:	2300      	movs	r3, #0
 800a234:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800a236:	2301      	movs	r3, #1
 800a238:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800a23a:	e000      	b.n	800a23e <ethernet_link_check_state+0xce>
      break;
 800a23c:	bf00      	nop
    if(linkchanged)
 800a23e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a240:	2b00      	cmp	r3, #0
 800a242:	d018      	beq.n	800a276 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800a244:	f107 030c 	add.w	r3, r7, #12
 800a248:	4619      	mov	r1, r3
 800a24a:	480e      	ldr	r0, [pc, #56]	@ (800a284 <ethernet_link_check_state+0x114>)
 800a24c:	f7fb ffa1 	bl	8006192 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800a250:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a252:	627b      	str	r3, [r7, #36]	@ 0x24
      MACConf.Speed = speed;
 800a254:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a256:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800a258:	f107 030c 	add.w	r3, r7, #12
 800a25c:	4619      	mov	r1, r3
 800a25e:	4809      	ldr	r0, [pc, #36]	@ (800a284 <ethernet_link_check_state+0x114>)
 800a260:	f7fc f88e 	bl	8006380 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 800a264:	4807      	ldr	r0, [pc, #28]	@ (800a284 <ethernet_link_check_state+0x114>)
 800a266:	f7fb fc71 	bl	8005b4c <HAL_ETH_Start>
      netif_set_up(netif);
 800a26a:	6878      	ldr	r0, [r7, #4]
 800a26c:	f001 fa22 	bl	800b6b4 <netif_set_up>
      netif_set_link_up(netif);
 800a270:	6878      	ldr	r0, [r7, #4]
 800a272:	f001 fabd 	bl	800b7f0 <netif_set_link_up>
}
 800a276:	bf00      	nop
 800a278:	3780      	adds	r7, #128	@ 0x80
 800a27a:	46bd      	mov	sp, r7
 800a27c:	bd80      	pop	{r7, pc}
 800a27e:	bf00      	nop
 800a280:	20005a5c 	.word	0x20005a5c
 800a284:	20005974 	.word	0x20005974

0800a288 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b086      	sub	sp, #24
 800a28c:	af02      	add	r7, sp, #8
 800a28e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800a290:	4812      	ldr	r0, [pc, #72]	@ (800a2dc <HAL_ETH_RxAllocateCallback+0x54>)
 800a292:	f000 ff89 	bl	800b1a8 <memp_malloc_pool>
 800a296:	60f8      	str	r0, [r7, #12]
  if (p)
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d014      	beq.n	800a2c8 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	f103 0220 	add.w	r2, r3, #32
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	4a0d      	ldr	r2, [pc, #52]	@ (800a2e0 <HAL_ETH_RxAllocateCallback+0x58>)
 800a2ac:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800a2b6:	9201      	str	r2, [sp, #4]
 800a2b8:	9300      	str	r3, [sp, #0]
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	2241      	movs	r2, #65	@ 0x41
 800a2be:	2100      	movs	r1, #0
 800a2c0:	2000      	movs	r0, #0
 800a2c2:	f001 fcbf 	bl	800bc44 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800a2c6:	e005      	b.n	800a2d4 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800a2c8:	4b06      	ldr	r3, [pc, #24]	@ (800a2e4 <HAL_ETH_RxAllocateCallback+0x5c>)
 800a2ca:	2201      	movs	r2, #1
 800a2cc:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	601a      	str	r2, [r3, #0]
}
 800a2d4:	bf00      	nop
 800a2d6:	3710      	adds	r7, #16
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	bd80      	pop	{r7, pc}
 800a2dc:	08020bd4 	.word	0x08020bd4
 800a2e0:	08009f45 	.word	0x08009f45
 800a2e4:	20005830 	.word	0x20005830

0800a2e8 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800a2e8:	b480      	push	{r7}
 800a2ea:	b089      	sub	sp, #36	@ 0x24
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	60f8      	str	r0, [r7, #12]
 800a2f0:	60b9      	str	r1, [r7, #8]
 800a2f2:	607a      	str	r2, [r7, #4]
 800a2f4:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800a2fa:	68bb      	ldr	r3, [r7, #8]
 800a2fc:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800a2fe:	2300      	movs	r3, #0
 800a300:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	3b20      	subs	r3, #32
 800a306:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800a308:	69fb      	ldr	r3, [r7, #28]
 800a30a:	2200      	movs	r2, #0
 800a30c:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800a30e:	69fb      	ldr	r3, [r7, #28]
 800a310:	2200      	movs	r2, #0
 800a312:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800a314:	69fb      	ldr	r3, [r7, #28]
 800a316:	887a      	ldrh	r2, [r7, #2]
 800a318:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800a31a:	69bb      	ldr	r3, [r7, #24]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d103      	bne.n	800a32a <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800a322:	69bb      	ldr	r3, [r7, #24]
 800a324:	69fa      	ldr	r2, [r7, #28]
 800a326:	601a      	str	r2, [r3, #0]
 800a328:	e003      	b.n	800a332 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800a32a:	697b      	ldr	r3, [r7, #20]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	69fa      	ldr	r2, [r7, #28]
 800a330:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800a332:	697b      	ldr	r3, [r7, #20]
 800a334:	69fa      	ldr	r2, [r7, #28]
 800a336:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800a338:	69bb      	ldr	r3, [r7, #24]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	61fb      	str	r3, [r7, #28]
 800a33e:	e009      	b.n	800a354 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800a340:	69fb      	ldr	r3, [r7, #28]
 800a342:	891a      	ldrh	r2, [r3, #8]
 800a344:	887b      	ldrh	r3, [r7, #2]
 800a346:	4413      	add	r3, r2
 800a348:	b29a      	uxth	r2, r3
 800a34a:	69fb      	ldr	r3, [r7, #28]
 800a34c:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800a34e:	69fb      	ldr	r3, [r7, #28]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	61fb      	str	r3, [r7, #28]
 800a354:	69fb      	ldr	r3, [r7, #28]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d1f2      	bne.n	800a340 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 800a35a:	bf00      	nop
 800a35c:	bf00      	nop
 800a35e:	3724      	adds	r7, #36	@ 0x24
 800a360:	46bd      	mov	sp, r7
 800a362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a366:	4770      	bx	lr

0800a368 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800a368:	b480      	push	{r7}
 800a36a:	b083      	sub	sp, #12
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	4603      	mov	r3, r0
 800a370:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800a372:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a376:	021b      	lsls	r3, r3, #8
 800a378:	b21a      	sxth	r2, r3
 800a37a:	88fb      	ldrh	r3, [r7, #6]
 800a37c:	0a1b      	lsrs	r3, r3, #8
 800a37e:	b29b      	uxth	r3, r3
 800a380:	b21b      	sxth	r3, r3
 800a382:	4313      	orrs	r3, r2
 800a384:	b21b      	sxth	r3, r3
 800a386:	b29b      	uxth	r3, r3
}
 800a388:	4618      	mov	r0, r3
 800a38a:	370c      	adds	r7, #12
 800a38c:	46bd      	mov	sp, r7
 800a38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a392:	4770      	bx	lr

0800a394 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800a394:	b480      	push	{r7}
 800a396:	b083      	sub	sp, #12
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	061a      	lsls	r2, r3, #24
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	021b      	lsls	r3, r3, #8
 800a3a4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a3a8:	431a      	orrs	r2, r3
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	0a1b      	lsrs	r3, r3, #8
 800a3ae:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a3b2:	431a      	orrs	r2, r3
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	0e1b      	lsrs	r3, r3, #24
 800a3b8:	4313      	orrs	r3, r2
}
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	370c      	adds	r7, #12
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c4:	4770      	bx	lr

0800a3c6 <dns_init>:
 * Initialize the resolver: set up the UDP pcb and configure the default server
 * (if DNS_SERVER_ADDRESS is set).
 */
void
dns_init(void)
{
 800a3c6:	b480      	push	{r7}
 800a3c8:	af00      	add	r7, sp, #0
#endif

#if DNS_LOCAL_HOSTLIST
  dns_init_local();
#endif
}
 800a3ca:	bf00      	nop
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d2:	4770      	bx	lr

0800a3d4 <dns_tmr>:
 * The DNS resolver client timer - handle retries and timeouts and should
 * be called every DNS_TMR_INTERVAL milliseconds (every second by default).
 */
void
dns_tmr(void)
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	af00      	add	r7, sp, #0
  LWIP_DEBUGF(DNS_DEBUG, ("dns_tmr: dns_check_entries\n"));
  dns_check_entries();
 800a3d8:	f000 faa8 	bl	800a92c <dns_check_entries>
}
 800a3dc:	bf00      	nop
 800a3de:	bd80      	pop	{r7, pc}

0800a3e0 <dns_send>:
 * @param idx the DNS table entry index for which to send a request
 * @return ERR_OK if packet is sent; an err_t indicating the problem otherwise
 */
static err_t
dns_send(u8_t idx)
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b090      	sub	sp, #64	@ 0x40
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	4603      	mov	r3, r0
 800a3e8:	71fb      	strb	r3, [r7, #7]
  struct pbuf *p;
  u16_t query_idx, copy_len;
  const char *hostname, *hostname_part;
  u8_t n;
  u8_t pcb_idx;
  struct dns_table_entry *entry = &dns_table[idx];
 800a3ea:	79fa      	ldrb	r2, [r7, #7]
 800a3ec:	4613      	mov	r3, r2
 800a3ee:	011b      	lsls	r3, r3, #4
 800a3f0:	4413      	add	r3, r2
 800a3f2:	011b      	lsls	r3, r3, #4
 800a3f4:	4a6c      	ldr	r2, [pc, #432]	@ (800a5a8 <dns_send+0x1c8>)
 800a3f6:	4413      	add	r3, r2
 800a3f8:	633b      	str	r3, [r7, #48]	@ 0x30

  LWIP_DEBUGF(DNS_DEBUG, ("dns_send: dns_servers[%"U16_F"] \"%s\": request\n",
                          (u16_t)(entry->server_idx), entry->name));
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 800a3fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3fc:	7adb      	ldrb	r3, [r3, #11]
 800a3fe:	2b01      	cmp	r3, #1
 800a400:	d906      	bls.n	800a410 <dns_send+0x30>
 800a402:	4b6a      	ldr	r3, [pc, #424]	@ (800a5ac <dns_send+0x1cc>)
 800a404:	f240 22fa 	movw	r2, #762	@ 0x2fa
 800a408:	4969      	ldr	r1, [pc, #420]	@ (800a5b0 <dns_send+0x1d0>)
 800a40a:	486a      	ldr	r0, [pc, #424]	@ (800a5b4 <dns_send+0x1d4>)
 800a40c:	f00b fc16 	bl	8015c3c <iprintf>
  if (ip_addr_isany_val(dns_servers[entry->server_idx])
 800a410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a412:	7adb      	ldrb	r3, [r3, #11]
 800a414:	461a      	mov	r2, r3
 800a416:	4b68      	ldr	r3, [pc, #416]	@ (800a5b8 <dns_send+0x1d8>)
 800a418:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d109      	bne.n	800a434 <dns_send+0x54>
      && !entry->is_mdns
#endif
     ) {
    /* DNS server not valid anymore, e.g. PPP netif has been shut down */
    /* call specified callback function if provided */
    dns_call_found(idx, NULL);
 800a420:	79fb      	ldrb	r3, [r7, #7]
 800a422:	2100      	movs	r1, #0
 800a424:	4618      	mov	r0, r3
 800a426:	f000 f8cb 	bl	800a5c0 <dns_call_found>
    /* flush this entry */
    entry->state = DNS_STATE_UNUSED;
 800a42a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a42c:	2200      	movs	r2, #0
 800a42e:	729a      	strb	r2, [r3, #10]
    return ERR_OK;
 800a430:	2300      	movs	r3, #0
 800a432:	e0b4      	b.n	800a59e <dns_send+0x1be>
  }

  /* if here, we have either a new query or a retry on a previous query to process */
  p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(SIZEOF_DNS_HDR + strlen(entry->name) + 2 +
 800a434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a436:	3310      	adds	r3, #16
 800a438:	4618      	mov	r0, r3
 800a43a:	f7f5 fec9 	bl	80001d0 <strlen>
 800a43e:	4603      	mov	r3, r0
 800a440:	b29b      	uxth	r3, r3
 800a442:	3312      	adds	r3, #18
 800a444:	b29b      	uxth	r3, r3
 800a446:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800a44a:	4619      	mov	r1, r3
 800a44c:	2036      	movs	r0, #54	@ 0x36
 800a44e:	f001 facf 	bl	800b9f0 <pbuf_alloc>
 800a452:	62f8      	str	r0, [r7, #44]	@ 0x2c
                                         SIZEOF_DNS_QUERY), PBUF_RAM);
  if (p != NULL) {
 800a454:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a456:	2b00      	cmp	r3, #0
 800a458:	f000 8095 	beq.w	800a586 <dns_send+0x1a6>
    const ip_addr_t *dst;
    u16_t dst_port;
    /* fill dns header */
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 800a45c:	f107 0310 	add.w	r3, r7, #16
 800a460:	220c      	movs	r2, #12
 800a462:	2100      	movs	r1, #0
 800a464:	4618      	mov	r0, r3
 800a466:	f00b fc8a 	bl	8015d7e <memset>
    hdr.id = lwip_htons(entry->txid);
 800a46a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a46c:	891b      	ldrh	r3, [r3, #8]
 800a46e:	4618      	mov	r0, r3
 800a470:	f7ff ff7a 	bl	800a368 <lwip_htons>
 800a474:	4603      	mov	r3, r0
 800a476:	823b      	strh	r3, [r7, #16]
    hdr.flags1 = DNS_FLAG1_RD;
 800a478:	2301      	movs	r3, #1
 800a47a:	74bb      	strb	r3, [r7, #18]
    hdr.numquestions = PP_HTONS(1);
 800a47c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a480:	82bb      	strh	r3, [r7, #20]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 800a482:	f107 0310 	add.w	r3, r7, #16
 800a486:	220c      	movs	r2, #12
 800a488:	4619      	mov	r1, r3
 800a48a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a48c:	f002 f83c 	bl	800c508 <pbuf_take>
    hostname = entry->name;
 800a490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a492:	3310      	adds	r3, #16
 800a494:	63bb      	str	r3, [r7, #56]	@ 0x38
    --hostname;
 800a496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a498:	3b01      	subs	r3, #1
 800a49a:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* convert hostname into suitable query format. */
    query_idx = SIZEOF_DNS_HDR;
 800a49c:	230c      	movs	r3, #12
 800a49e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    do {
      ++hostname;
 800a4a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4a2:	3301      	adds	r3, #1
 800a4a4:	63bb      	str	r3, [r7, #56]	@ 0x38
      hostname_part = hostname;
 800a4a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4a8:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a4b0:	e007      	b.n	800a4c2 <dns_send+0xe2>
        ++n;
 800a4b2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a4b6:	3301      	adds	r3, #1
 800a4b8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 800a4bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4be:	3301      	adds	r3, #1
 800a4c0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a4c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4c4:	781b      	ldrb	r3, [r3, #0]
 800a4c6:	2b2e      	cmp	r3, #46	@ 0x2e
 800a4c8:	d003      	beq.n	800a4d2 <dns_send+0xf2>
 800a4ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4cc:	781b      	ldrb	r3, [r3, #0]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d1ef      	bne.n	800a4b2 <dns_send+0xd2>
      }
      copy_len = (u16_t)(hostname - hostname_part);
 800a4d2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a4d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4d6:	1ad3      	subs	r3, r2, r3
 800a4d8:	84fb      	strh	r3, [r7, #38]	@ 0x26
      if (query_idx + n + 1 > 0xFFFF) {
 800a4da:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 800a4dc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a4e0:	4413      	add	r3, r2
 800a4e2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800a4e6:	4293      	cmp	r3, r2
 800a4e8:	dc53      	bgt.n	800a592 <dns_send+0x1b2>
        /* u16_t overflow */
        goto overflow_return;
      }
      pbuf_put_at(p, query_idx, n);
 800a4ea:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800a4ee:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800a4f0:	4619      	mov	r1, r3
 800a4f2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a4f4:	f002 f936 	bl	800c764 <pbuf_put_at>
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 800a4f8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800a4fa:	3301      	adds	r3, #1
 800a4fc:	b29b      	uxth	r3, r3
 800a4fe:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800a500:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a502:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a504:	f002 f892 	bl	800c62c <pbuf_take_at>
      query_idx = (u16_t)(query_idx + n + 1);
 800a508:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a50c:	b29a      	uxth	r2, r3
 800a50e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800a510:	4413      	add	r3, r2
 800a512:	b29b      	uxth	r3, r3
 800a514:	3301      	adds	r3, #1
 800a516:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    } while (*hostname != 0);
 800a518:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a51a:	781b      	ldrb	r3, [r3, #0]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d1bf      	bne.n	800a4a0 <dns_send+0xc0>
    pbuf_put_at(p, query_idx, 0);
 800a520:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800a522:	2200      	movs	r2, #0
 800a524:	4619      	mov	r1, r3
 800a526:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a528:	f002 f91c 	bl	800c764 <pbuf_put_at>
    query_idx++;
 800a52c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800a52e:	3301      	adds	r3, #1
 800a530:	87bb      	strh	r3, [r7, #60]	@ 0x3c

    /* fill dns query */
    if (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype)) {
      qry.type = PP_HTONS(DNS_RRTYPE_AAAA);
    } else {
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 800a532:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a536:	81bb      	strh	r3, [r7, #12]
    }
    qry.cls = PP_HTONS(DNS_RRCLASS_IN);
 800a538:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a53c:	81fb      	strh	r3, [r7, #14]
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 800a53e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800a540:	f107 010c 	add.w	r1, r7, #12
 800a544:	2204      	movs	r2, #4
 800a546:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a548:	f002 f870 	bl	800c62c <pbuf_take_at>

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
    pcb_idx = entry->pcb_idx;
 800a54c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a54e:	7bdb      	ldrb	r3, [r3, #15]
 800a550:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
      }
#endif
    } else
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
    {
      dst_port = DNS_SERVER_PORT;
 800a554:	2335      	movs	r3, #53	@ 0x35
 800a556:	847b      	strh	r3, [r7, #34]	@ 0x22
      dst = &dns_servers[entry->server_idx];
 800a558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a55a:	7adb      	ldrb	r3, [r3, #11]
 800a55c:	009b      	lsls	r3, r3, #2
 800a55e:	4a16      	ldr	r2, [pc, #88]	@ (800a5b8 <dns_send+0x1d8>)
 800a560:	4413      	add	r3, r2
 800a562:	61fb      	str	r3, [r7, #28]
    }
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 800a564:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800a568:	4a14      	ldr	r2, [pc, #80]	@ (800a5bc <dns_send+0x1dc>)
 800a56a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800a56e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a570:	69fa      	ldr	r2, [r7, #28]
 800a572:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a574:	f007 fdb0 	bl	80120d8 <udp_sendto>
 800a578:	4603      	mov	r3, r0
 800a57a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

    /* free pbuf */
    pbuf_free(p);
 800a57e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a580:	f001 fd1a 	bl	800bfb8 <pbuf_free>
 800a584:	e002      	b.n	800a58c <dns_send+0x1ac>
  } else {
    err = ERR_MEM;
 800a586:	23ff      	movs	r3, #255	@ 0xff
 800a588:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  }

  return err;
 800a58c:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800a590:	e005      	b.n	800a59e <dns_send+0x1be>
        goto overflow_return;
 800a592:	bf00      	nop
overflow_return:
  pbuf_free(p);
 800a594:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a596:	f001 fd0f 	bl	800bfb8 <pbuf_free>
  return ERR_VAL;
 800a59a:	f06f 0305 	mvn.w	r3, #5
}
 800a59e:	4618      	mov	r0, r3
 800a5a0:	3740      	adds	r7, #64	@ 0x40
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	bd80      	pop	{r7, pc}
 800a5a6:	bf00      	nop
 800a5a8:	20005a8c 	.word	0x20005a8c
 800a5ac:	0801e184 	.word	0x0801e184
 800a5b0:	0801e1b4 	.word	0x0801e1b4
 800a5b4:	0801e1cc 	.word	0x0801e1cc
 800a5b8:	20005efc 	.word	0x20005efc
 800a5bc:	20005a7c 	.word	0x20005a7c

0800a5c0 <dns_call_found>:
 * @param idx dns table index of the entry that is resolved or removed
 * @param addr IP address for the hostname (or NULL on error or memory shortage)
 */
static void
dns_call_found(u8_t idx, ip_addr_t *addr)
{
 800a5c0:	b590      	push	{r4, r7, lr}
 800a5c2:	b085      	sub	sp, #20
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	6039      	str	r1, [r7, #0]
 800a5ca:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	73fb      	strb	r3, [r7, #15]
 800a5d0:	e03d      	b.n	800a64e <dns_call_found+0x8e>
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
 800a5d2:	7bfa      	ldrb	r2, [r7, #15]
 800a5d4:	4957      	ldr	r1, [pc, #348]	@ (800a734 <dns_call_found+0x174>)
 800a5d6:	4613      	mov	r3, r2
 800a5d8:	005b      	lsls	r3, r3, #1
 800a5da:	4413      	add	r3, r2
 800a5dc:	009b      	lsls	r3, r3, #2
 800a5de:	440b      	add	r3, r1
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d030      	beq.n	800a648 <dns_call_found+0x88>
 800a5e6:	7bfa      	ldrb	r2, [r7, #15]
 800a5e8:	4952      	ldr	r1, [pc, #328]	@ (800a734 <dns_call_found+0x174>)
 800a5ea:	4613      	mov	r3, r2
 800a5ec:	005b      	lsls	r3, r3, #1
 800a5ee:	4413      	add	r3, r2
 800a5f0:	009b      	lsls	r3, r3, #2
 800a5f2:	440b      	add	r3, r1
 800a5f4:	3308      	adds	r3, #8
 800a5f6:	781b      	ldrb	r3, [r3, #0]
 800a5f8:	79fa      	ldrb	r2, [r7, #7]
 800a5fa:	429a      	cmp	r2, r3
 800a5fc:	d124      	bne.n	800a648 <dns_call_found+0x88>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 800a5fe:	7bfa      	ldrb	r2, [r7, #15]
 800a600:	494c      	ldr	r1, [pc, #304]	@ (800a734 <dns_call_found+0x174>)
 800a602:	4613      	mov	r3, r2
 800a604:	005b      	lsls	r3, r3, #1
 800a606:	4413      	add	r3, r2
 800a608:	009b      	lsls	r3, r3, #2
 800a60a:	440b      	add	r3, r1
 800a60c:	681c      	ldr	r4, [r3, #0]
 800a60e:	79fa      	ldrb	r2, [r7, #7]
 800a610:	4613      	mov	r3, r2
 800a612:	011b      	lsls	r3, r3, #4
 800a614:	4413      	add	r3, r2
 800a616:	011b      	lsls	r3, r3, #4
 800a618:	3310      	adds	r3, #16
 800a61a:	4a47      	ldr	r2, [pc, #284]	@ (800a738 <dns_call_found+0x178>)
 800a61c:	1898      	adds	r0, r3, r2
 800a61e:	7bfa      	ldrb	r2, [r7, #15]
 800a620:	4944      	ldr	r1, [pc, #272]	@ (800a734 <dns_call_found+0x174>)
 800a622:	4613      	mov	r3, r2
 800a624:	005b      	lsls	r3, r3, #1
 800a626:	4413      	add	r3, r2
 800a628:	009b      	lsls	r3, r3, #2
 800a62a:	440b      	add	r3, r1
 800a62c:	3304      	adds	r3, #4
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	461a      	mov	r2, r3
 800a632:	6839      	ldr	r1, [r7, #0]
 800a634:	47a0      	blx	r4
      /* flush this entry */
      dns_requests[i].found = NULL;
 800a636:	7bfa      	ldrb	r2, [r7, #15]
 800a638:	493e      	ldr	r1, [pc, #248]	@ (800a734 <dns_call_found+0x174>)
 800a63a:	4613      	mov	r3, r2
 800a63c:	005b      	lsls	r3, r3, #1
 800a63e:	4413      	add	r3, r2
 800a640:	009b      	lsls	r3, r3, #2
 800a642:	440b      	add	r3, r1
 800a644:	2200      	movs	r2, #0
 800a646:	601a      	str	r2, [r3, #0]
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800a648:	7bfb      	ldrb	r3, [r7, #15]
 800a64a:	3301      	adds	r3, #1
 800a64c:	73fb      	strb	r3, [r7, #15]
 800a64e:	7bfb      	ldrb	r3, [r7, #15]
 800a650:	2b03      	cmp	r3, #3
 800a652:	d9be      	bls.n	800a5d2 <dns_call_found+0x12>
  }
  dns_requests[idx].found = NULL;
#endif
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
  /* close the pcb used unless other request are using it */
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800a654:	2300      	movs	r3, #0
 800a656:	73fb      	strb	r3, [r7, #15]
 800a658:	e031      	b.n	800a6be <dns_call_found+0xfe>
    if (i == idx) {
 800a65a:	7bfa      	ldrb	r2, [r7, #15]
 800a65c:	79fb      	ldrb	r3, [r7, #7]
 800a65e:	429a      	cmp	r2, r3
 800a660:	d029      	beq.n	800a6b6 <dns_call_found+0xf6>
      continue; /* only check other requests */
    }
    if (dns_table[i].state == DNS_STATE_ASKING) {
 800a662:	7bfa      	ldrb	r2, [r7, #15]
 800a664:	4934      	ldr	r1, [pc, #208]	@ (800a738 <dns_call_found+0x178>)
 800a666:	4613      	mov	r3, r2
 800a668:	011b      	lsls	r3, r3, #4
 800a66a:	4413      	add	r3, r2
 800a66c:	011b      	lsls	r3, r3, #4
 800a66e:	440b      	add	r3, r1
 800a670:	330a      	adds	r3, #10
 800a672:	781b      	ldrb	r3, [r3, #0]
 800a674:	2b02      	cmp	r3, #2
 800a676:	d11f      	bne.n	800a6b8 <dns_call_found+0xf8>
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 800a678:	7bfa      	ldrb	r2, [r7, #15]
 800a67a:	492f      	ldr	r1, [pc, #188]	@ (800a738 <dns_call_found+0x178>)
 800a67c:	4613      	mov	r3, r2
 800a67e:	011b      	lsls	r3, r3, #4
 800a680:	4413      	add	r3, r2
 800a682:	011b      	lsls	r3, r3, #4
 800a684:	440b      	add	r3, r1
 800a686:	330f      	adds	r3, #15
 800a688:	7819      	ldrb	r1, [r3, #0]
 800a68a:	79fa      	ldrb	r2, [r7, #7]
 800a68c:	482a      	ldr	r0, [pc, #168]	@ (800a738 <dns_call_found+0x178>)
 800a68e:	4613      	mov	r3, r2
 800a690:	011b      	lsls	r3, r3, #4
 800a692:	4413      	add	r3, r2
 800a694:	011b      	lsls	r3, r3, #4
 800a696:	4403      	add	r3, r0
 800a698:	330f      	adds	r3, #15
 800a69a:	781b      	ldrb	r3, [r3, #0]
 800a69c:	4299      	cmp	r1, r3
 800a69e:	d10b      	bne.n	800a6b8 <dns_call_found+0xf8>
        /* another request is still using the same pcb */
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 800a6a0:	79fa      	ldrb	r2, [r7, #7]
 800a6a2:	4925      	ldr	r1, [pc, #148]	@ (800a738 <dns_call_found+0x178>)
 800a6a4:	4613      	mov	r3, r2
 800a6a6:	011b      	lsls	r3, r3, #4
 800a6a8:	4413      	add	r3, r2
 800a6aa:	011b      	lsls	r3, r3, #4
 800a6ac:	440b      	add	r3, r1
 800a6ae:	330f      	adds	r3, #15
 800a6b0:	2204      	movs	r2, #4
 800a6b2:	701a      	strb	r2, [r3, #0]
        break;
 800a6b4:	e006      	b.n	800a6c4 <dns_call_found+0x104>
      continue; /* only check other requests */
 800a6b6:	bf00      	nop
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800a6b8:	7bfb      	ldrb	r3, [r7, #15]
 800a6ba:	3301      	adds	r3, #1
 800a6bc:	73fb      	strb	r3, [r7, #15]
 800a6be:	7bfb      	ldrb	r3, [r7, #15]
 800a6c0:	2b03      	cmp	r3, #3
 800a6c2:	d9ca      	bls.n	800a65a <dns_call_found+0x9a>
      }
    }
  }
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
 800a6c4:	79fa      	ldrb	r2, [r7, #7]
 800a6c6:	491c      	ldr	r1, [pc, #112]	@ (800a738 <dns_call_found+0x178>)
 800a6c8:	4613      	mov	r3, r2
 800a6ca:	011b      	lsls	r3, r3, #4
 800a6cc:	4413      	add	r3, r2
 800a6ce:	011b      	lsls	r3, r3, #4
 800a6d0:	440b      	add	r3, r1
 800a6d2:	330f      	adds	r3, #15
 800a6d4:	781b      	ldrb	r3, [r3, #0]
 800a6d6:	2b03      	cmp	r3, #3
 800a6d8:	d827      	bhi.n	800a72a <dns_call_found+0x16a>
    /* if we come here, the pcb is not used any more and can be removed */
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 800a6da:	79fa      	ldrb	r2, [r7, #7]
 800a6dc:	4916      	ldr	r1, [pc, #88]	@ (800a738 <dns_call_found+0x178>)
 800a6de:	4613      	mov	r3, r2
 800a6e0:	011b      	lsls	r3, r3, #4
 800a6e2:	4413      	add	r3, r2
 800a6e4:	011b      	lsls	r3, r3, #4
 800a6e6:	440b      	add	r3, r1
 800a6e8:	330f      	adds	r3, #15
 800a6ea:	781b      	ldrb	r3, [r3, #0]
 800a6ec:	461a      	mov	r2, r3
 800a6ee:	4b13      	ldr	r3, [pc, #76]	@ (800a73c <dns_call_found+0x17c>)
 800a6f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	f007 ffbb 	bl	8012670 <udp_remove>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 800a6fa:	79fa      	ldrb	r2, [r7, #7]
 800a6fc:	490e      	ldr	r1, [pc, #56]	@ (800a738 <dns_call_found+0x178>)
 800a6fe:	4613      	mov	r3, r2
 800a700:	011b      	lsls	r3, r3, #4
 800a702:	4413      	add	r3, r2
 800a704:	011b      	lsls	r3, r3, #4
 800a706:	440b      	add	r3, r1
 800a708:	330f      	adds	r3, #15
 800a70a:	781b      	ldrb	r3, [r3, #0]
 800a70c:	4619      	mov	r1, r3
 800a70e:	4b0b      	ldr	r3, [pc, #44]	@ (800a73c <dns_call_found+0x17c>)
 800a710:	2200      	movs	r2, #0
 800a712:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
    dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 800a716:	79fa      	ldrb	r2, [r7, #7]
 800a718:	4907      	ldr	r1, [pc, #28]	@ (800a738 <dns_call_found+0x178>)
 800a71a:	4613      	mov	r3, r2
 800a71c:	011b      	lsls	r3, r3, #4
 800a71e:	4413      	add	r3, r2
 800a720:	011b      	lsls	r3, r3, #4
 800a722:	440b      	add	r3, r1
 800a724:	330f      	adds	r3, #15
 800a726:	2204      	movs	r2, #4
 800a728:	701a      	strb	r2, [r3, #0]
  }
#endif
}
 800a72a:	bf00      	nop
 800a72c:	3714      	adds	r7, #20
 800a72e:	46bd      	mov	sp, r7
 800a730:	bd90      	pop	{r4, r7, pc}
 800a732:	bf00      	nop
 800a734:	20005ecc 	.word	0x20005ecc
 800a738:	20005a8c 	.word	0x20005a8c
 800a73c:	20005a7c 	.word	0x20005a7c

0800a740 <dns_create_txid>:

/* Create a query transmission ID that is unique for all outstanding queries */
static u16_t
dns_create_txid(void)
{
 800a740:	b580      	push	{r7, lr}
 800a742:	b082      	sub	sp, #8
 800a744:	af00      	add	r7, sp, #0
  u16_t txid;
  u8_t i;

again:
  txid = (u16_t)DNS_RAND_TXID();
 800a746:	f00a fae7 	bl	8014d18 <rand>
 800a74a:	4603      	mov	r3, r0
 800a74c:	80bb      	strh	r3, [r7, #4]

  /* check whether the ID is unique */
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 800a74e:	2300      	movs	r3, #0
 800a750:	71fb      	strb	r3, [r7, #7]
 800a752:	e01a      	b.n	800a78a <dns_create_txid+0x4a>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 800a754:	79fa      	ldrb	r2, [r7, #7]
 800a756:	4911      	ldr	r1, [pc, #68]	@ (800a79c <dns_create_txid+0x5c>)
 800a758:	4613      	mov	r3, r2
 800a75a:	011b      	lsls	r3, r3, #4
 800a75c:	4413      	add	r3, r2
 800a75e:	011b      	lsls	r3, r3, #4
 800a760:	440b      	add	r3, r1
 800a762:	330a      	adds	r3, #10
 800a764:	781b      	ldrb	r3, [r3, #0]
 800a766:	2b02      	cmp	r3, #2
 800a768:	d10c      	bne.n	800a784 <dns_create_txid+0x44>
        (dns_table[i].txid == txid)) {
 800a76a:	79fa      	ldrb	r2, [r7, #7]
 800a76c:	490b      	ldr	r1, [pc, #44]	@ (800a79c <dns_create_txid+0x5c>)
 800a76e:	4613      	mov	r3, r2
 800a770:	011b      	lsls	r3, r3, #4
 800a772:	4413      	add	r3, r2
 800a774:	011b      	lsls	r3, r3, #4
 800a776:	440b      	add	r3, r1
 800a778:	3308      	adds	r3, #8
 800a77a:	881b      	ldrh	r3, [r3, #0]
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 800a77c:	88ba      	ldrh	r2, [r7, #4]
 800a77e:	429a      	cmp	r2, r3
 800a780:	d100      	bne.n	800a784 <dns_create_txid+0x44>
      /* ID already used by another pending query */
      goto again;
 800a782:	e7e0      	b.n	800a746 <dns_create_txid+0x6>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 800a784:	79fb      	ldrb	r3, [r7, #7]
 800a786:	3301      	adds	r3, #1
 800a788:	71fb      	strb	r3, [r7, #7]
 800a78a:	79fb      	ldrb	r3, [r7, #7]
 800a78c:	2b03      	cmp	r3, #3
 800a78e:	d9e1      	bls.n	800a754 <dns_create_txid+0x14>
    }
  }

  return txid;
 800a790:	88bb      	ldrh	r3, [r7, #4]
}
 800a792:	4618      	mov	r0, r3
 800a794:	3708      	adds	r7, #8
 800a796:	46bd      	mov	sp, r7
 800a798:	bd80      	pop	{r7, pc}
 800a79a:	bf00      	nop
 800a79c:	20005a8c 	.word	0x20005a8c

0800a7a0 <dns_backupserver_available>:
/**
 * Check whether there are other backup DNS servers available to try
 */
static u8_t
dns_backupserver_available(struct dns_table_entry *pentry)
{
 800a7a0:	b480      	push	{r7}
 800a7a2:	b085      	sub	sp, #20
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
  u8_t ret = 0;
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	73fb      	strb	r3, [r7, #15]

  if (pentry) {
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d00d      	beq.n	800a7ce <dns_backupserver_available+0x2e>
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	7adb      	ldrb	r3, [r3, #11]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d109      	bne.n	800a7ce <dns_backupserver_available+0x2e>
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	7adb      	ldrb	r3, [r3, #11]
 800a7be:	3301      	adds	r3, #1
 800a7c0:	4a06      	ldr	r2, [pc, #24]	@ (800a7dc <dns_backupserver_available+0x3c>)
 800a7c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d001      	beq.n	800a7ce <dns_backupserver_available+0x2e>
      ret = 1;
 800a7ca:	2301      	movs	r3, #1
 800a7cc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800a7ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	3714      	adds	r7, #20
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7da:	4770      	bx	lr
 800a7dc:	20005efc 	.word	0x20005efc

0800a7e0 <dns_check_entry>:
 *
 * @param i index of the dns_table entry to check
 */
static void
dns_check_entry(u8_t i)
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b084      	sub	sp, #16
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	4603      	mov	r3, r0
 800a7e8:	71fb      	strb	r3, [r7, #7]
  err_t err;
  struct dns_table_entry *entry = &dns_table[i];
 800a7ea:	79fa      	ldrb	r2, [r7, #7]
 800a7ec:	4613      	mov	r3, r2
 800a7ee:	011b      	lsls	r3, r3, #4
 800a7f0:	4413      	add	r3, r2
 800a7f2:	011b      	lsls	r3, r3, #4
 800a7f4:	4a48      	ldr	r2, [pc, #288]	@ (800a918 <dns_check_entry+0x138>)
 800a7f6:	4413      	add	r3, r2
 800a7f8:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 800a7fa:	79fb      	ldrb	r3, [r7, #7]
 800a7fc:	2b03      	cmp	r3, #3
 800a7fe:	d906      	bls.n	800a80e <dns_check_entry+0x2e>
 800a800:	4b46      	ldr	r3, [pc, #280]	@ (800a91c <dns_check_entry+0x13c>)
 800a802:	f240 421c 	movw	r2, #1052	@ 0x41c
 800a806:	4946      	ldr	r1, [pc, #280]	@ (800a920 <dns_check_entry+0x140>)
 800a808:	4846      	ldr	r0, [pc, #280]	@ (800a924 <dns_check_entry+0x144>)
 800a80a:	f00b fa17 	bl	8015c3c <iprintf>

  switch (entry->state) {
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	7a9b      	ldrb	r3, [r3, #10]
 800a812:	2b03      	cmp	r3, #3
 800a814:	d86f      	bhi.n	800a8f6 <dns_check_entry+0x116>
 800a816:	a201      	add	r2, pc, #4	@ (adr r2, 800a81c <dns_check_entry+0x3c>)
 800a818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a81c:	0800a907 	.word	0x0800a907
 800a820:	0800a82d 	.word	0x0800a82d
 800a824:	0800a85f 	.word	0x0800a85f
 800a828:	0800a8d5 	.word	0x0800a8d5
    case DNS_STATE_NEW:
      /* initialize new entry */
      entry->txid = dns_create_txid();
 800a82c:	f7ff ff88 	bl	800a740 <dns_create_txid>
 800a830:	4603      	mov	r3, r0
 800a832:	461a      	mov	r2, r3
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	811a      	strh	r2, [r3, #8]
      entry->state = DNS_STATE_ASKING;
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	2202      	movs	r2, #2
 800a83c:	729a      	strb	r2, [r3, #10]
      entry->server_idx = 0;
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	2200      	movs	r2, #0
 800a842:	72da      	strb	r2, [r3, #11]
      entry->tmr = 1;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	2201      	movs	r2, #1
 800a848:	731a      	strb	r2, [r3, #12]
      entry->retries = 0;
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	2200      	movs	r2, #0
 800a84e:	735a      	strb	r2, [r3, #13]

      /* send DNS packet for this entry */
      err = dns_send(i);
 800a850:	79fb      	ldrb	r3, [r7, #7]
 800a852:	4618      	mov	r0, r3
 800a854:	f7ff fdc4 	bl	800a3e0 <dns_send>
 800a858:	4603      	mov	r3, r0
 800a85a:	72fb      	strb	r3, [r7, #11]
      if (err != ERR_OK) {
        LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                    ("dns_send returned error: %s\n", lwip_strerr(err)));
      }
      break;
 800a85c:	e058      	b.n	800a910 <dns_check_entry+0x130>
    case DNS_STATE_ASKING:
      if (--entry->tmr == 0) {
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	7b1b      	ldrb	r3, [r3, #12]
 800a862:	3b01      	subs	r3, #1
 800a864:	b2da      	uxtb	r2, r3
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	731a      	strb	r2, [r3, #12]
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	7b1b      	ldrb	r3, [r3, #12]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d14b      	bne.n	800a90a <dns_check_entry+0x12a>
        if (++entry->retries == DNS_MAX_RETRIES) {
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	7b5b      	ldrb	r3, [r3, #13]
 800a876:	3301      	adds	r3, #1
 800a878:	b2da      	uxtb	r2, r3
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	735a      	strb	r2, [r3, #13]
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	7b5b      	ldrb	r3, [r3, #13]
 800a882:	2b04      	cmp	r3, #4
 800a884:	d11b      	bne.n	800a8be <dns_check_entry+0xde>
          if (dns_backupserver_available(entry)
 800a886:	68f8      	ldr	r0, [r7, #12]
 800a888:	f7ff ff8a 	bl	800a7a0 <dns_backupserver_available>
 800a88c:	4603      	mov	r3, r0
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d00c      	beq.n	800a8ac <dns_check_entry+0xcc>
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
              && !entry->is_mdns
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
             ) {
            /* change of server */
            entry->server_idx++;
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	7adb      	ldrb	r3, [r3, #11]
 800a896:	3301      	adds	r3, #1
 800a898:	b2da      	uxtb	r2, r3
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	72da      	strb	r2, [r3, #11]
            entry->tmr = 1;
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	2201      	movs	r2, #1
 800a8a2:	731a      	strb	r2, [r3, #12]
            entry->retries = 0;
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	735a      	strb	r2, [r3, #13]
 800a8aa:	e00c      	b.n	800a8c6 <dns_check_entry+0xe6>
          } else {
            LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": timeout\n", entry->name));
            /* call specified callback function if provided */
            dns_call_found(i, NULL);
 800a8ac:	79fb      	ldrb	r3, [r7, #7]
 800a8ae:	2100      	movs	r1, #0
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	f7ff fe85 	bl	800a5c0 <dns_call_found>
            /* flush this entry */
            entry->state = DNS_STATE_UNUSED;
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	729a      	strb	r2, [r3, #10]
            break;
 800a8bc:	e028      	b.n	800a910 <dns_check_entry+0x130>
          }
        } else {
          /* wait longer for the next retry */
          entry->tmr = entry->retries;
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	7b5a      	ldrb	r2, [r3, #13]
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	731a      	strb	r2, [r3, #12]
        }

        /* send DNS packet for this entry */
        err = dns_send(i);
 800a8c6:	79fb      	ldrb	r3, [r7, #7]
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	f7ff fd89 	bl	800a3e0 <dns_send>
 800a8ce:	4603      	mov	r3, r0
 800a8d0:	72fb      	strb	r3, [r7, #11]
        if (err != ERR_OK) {
          LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                      ("dns_send returned error: %s\n", lwip_strerr(err)));
        }
      }
      break;
 800a8d2:	e01a      	b.n	800a90a <dns_check_entry+0x12a>
    case DNS_STATE_DONE:
      /* if the time to live is nul */
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d008      	beq.n	800a8ee <dns_check_entry+0x10e>
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	1e5a      	subs	r2, r3, #1
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	601a      	str	r2, [r3, #0]
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d10f      	bne.n	800a90e <dns_check_entry+0x12e>
        LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": flush\n", entry->name));
        /* flush this entry, there cannot be any related pending entries in this state */
        entry->state = DNS_STATE_UNUSED;
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	729a      	strb	r2, [r3, #10]
      }
      break;
 800a8f4:	e00b      	b.n	800a90e <dns_check_entry+0x12e>
    case DNS_STATE_UNUSED:
      /* nothing to do */
      break;
    default:
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 800a8f6:	4b09      	ldr	r3, [pc, #36]	@ (800a91c <dns_check_entry+0x13c>)
 800a8f8:	f240 425b 	movw	r2, #1115	@ 0x45b
 800a8fc:	490a      	ldr	r1, [pc, #40]	@ (800a928 <dns_check_entry+0x148>)
 800a8fe:	4809      	ldr	r0, [pc, #36]	@ (800a924 <dns_check_entry+0x144>)
 800a900:	f00b f99c 	bl	8015c3c <iprintf>
      break;
 800a904:	e004      	b.n	800a910 <dns_check_entry+0x130>
      break;
 800a906:	bf00      	nop
 800a908:	e002      	b.n	800a910 <dns_check_entry+0x130>
      break;
 800a90a:	bf00      	nop
 800a90c:	e000      	b.n	800a910 <dns_check_entry+0x130>
      break;
 800a90e:	bf00      	nop
  }
}
 800a910:	bf00      	nop
 800a912:	3710      	adds	r7, #16
 800a914:	46bd      	mov	sp, r7
 800a916:	bd80      	pop	{r7, pc}
 800a918:	20005a8c 	.word	0x20005a8c
 800a91c:	0801e184 	.word	0x0801e184
 800a920:	0801e1f4 	.word	0x0801e1f4
 800a924:	0801e1cc 	.word	0x0801e1cc
 800a928:	0801e210 	.word	0x0801e210

0800a92c <dns_check_entries>:
/**
 * Call dns_check_entry for each entry in dns_table - check all entries.
 */
static void
dns_check_entries(void)
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b082      	sub	sp, #8
 800a930:	af00      	add	r7, sp, #0
  u8_t i;

  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 800a932:	2300      	movs	r3, #0
 800a934:	71fb      	strb	r3, [r7, #7]
 800a936:	e006      	b.n	800a946 <dns_check_entries+0x1a>
    dns_check_entry(i);
 800a938:	79fb      	ldrb	r3, [r7, #7]
 800a93a:	4618      	mov	r0, r3
 800a93c:	f7ff ff50 	bl	800a7e0 <dns_check_entry>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 800a940:	79fb      	ldrb	r3, [r7, #7]
 800a942:	3301      	adds	r3, #1
 800a944:	71fb      	strb	r3, [r7, #7]
 800a946:	79fb      	ldrb	r3, [r7, #7]
 800a948:	2b03      	cmp	r3, #3
 800a94a:	d9f5      	bls.n	800a938 <dns_check_entries+0xc>
  }
}
 800a94c:	bf00      	nop
 800a94e:	bf00      	nop
 800a950:	3708      	adds	r7, #8
 800a952:	46bd      	mov	sp, r7
 800a954:	bd80      	pop	{r7, pc}

0800a956 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800a956:	b580      	push	{r7, lr}
 800a958:	b082      	sub	sp, #8
 800a95a:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800a95c:	2300      	movs	r3, #0
 800a95e:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800a960:	f000 f8d6 	bl	800ab10 <mem_init>
  memp_init();
 800a964:	f000 fbdc 	bl	800b120 <memp_init>
  pbuf_init();
  netif_init();
 800a968:	f000 fcda 	bl	800b320 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800a96c:	f007 f9be 	bl	8011cec <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800a970:	f001 ff1a 	bl	800c7a8 <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
 800a974:	f7ff fd27 	bl	800a3c6 <dns_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800a978:	f007 f92e 	bl	8011bd8 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800a97c:	bf00      	nop
 800a97e:	3708      	adds	r7, #8
 800a980:	46bd      	mov	sp, r7
 800a982:	bd80      	pop	{r7, pc}

0800a984 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800a984:	b480      	push	{r7}
 800a986:	b083      	sub	sp, #12
 800a988:	af00      	add	r7, sp, #0
 800a98a:	4603      	mov	r3, r0
 800a98c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800a98e:	4b05      	ldr	r3, [pc, #20]	@ (800a9a4 <ptr_to_mem+0x20>)
 800a990:	681a      	ldr	r2, [r3, #0]
 800a992:	88fb      	ldrh	r3, [r7, #6]
 800a994:	4413      	add	r3, r2
}
 800a996:	4618      	mov	r0, r3
 800a998:	370c      	adds	r7, #12
 800a99a:	46bd      	mov	sp, r7
 800a99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a0:	4770      	bx	lr
 800a9a2:	bf00      	nop
 800a9a4:	20006330 	.word	0x20006330

0800a9a8 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800a9a8:	b480      	push	{r7}
 800a9aa:	b083      	sub	sp, #12
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800a9b0:	4b05      	ldr	r3, [pc, #20]	@ (800a9c8 <mem_to_ptr+0x20>)
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	687a      	ldr	r2, [r7, #4]
 800a9b6:	1ad3      	subs	r3, r2, r3
 800a9b8:	b29b      	uxth	r3, r3
}
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	370c      	adds	r7, #12
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c4:	4770      	bx	lr
 800a9c6:	bf00      	nop
 800a9c8:	20006330 	.word	0x20006330

0800a9cc <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800a9cc:	b590      	push	{r4, r7, lr}
 800a9ce:	b085      	sub	sp, #20
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800a9d4:	4b45      	ldr	r3, [pc, #276]	@ (800aaec <plug_holes+0x120>)
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	687a      	ldr	r2, [r7, #4]
 800a9da:	429a      	cmp	r2, r3
 800a9dc:	d206      	bcs.n	800a9ec <plug_holes+0x20>
 800a9de:	4b44      	ldr	r3, [pc, #272]	@ (800aaf0 <plug_holes+0x124>)
 800a9e0:	f240 12df 	movw	r2, #479	@ 0x1df
 800a9e4:	4943      	ldr	r1, [pc, #268]	@ (800aaf4 <plug_holes+0x128>)
 800a9e6:	4844      	ldr	r0, [pc, #272]	@ (800aaf8 <plug_holes+0x12c>)
 800a9e8:	f00b f928 	bl	8015c3c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800a9ec:	4b43      	ldr	r3, [pc, #268]	@ (800aafc <plug_holes+0x130>)
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	687a      	ldr	r2, [r7, #4]
 800a9f2:	429a      	cmp	r2, r3
 800a9f4:	d306      	bcc.n	800aa04 <plug_holes+0x38>
 800a9f6:	4b3e      	ldr	r3, [pc, #248]	@ (800aaf0 <plug_holes+0x124>)
 800a9f8:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800a9fc:	4940      	ldr	r1, [pc, #256]	@ (800ab00 <plug_holes+0x134>)
 800a9fe:	483e      	ldr	r0, [pc, #248]	@ (800aaf8 <plug_holes+0x12c>)
 800aa00:	f00b f91c 	bl	8015c3c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	791b      	ldrb	r3, [r3, #4]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d006      	beq.n	800aa1a <plug_holes+0x4e>
 800aa0c:	4b38      	ldr	r3, [pc, #224]	@ (800aaf0 <plug_holes+0x124>)
 800aa0e:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800aa12:	493c      	ldr	r1, [pc, #240]	@ (800ab04 <plug_holes+0x138>)
 800aa14:	4838      	ldr	r0, [pc, #224]	@ (800aaf8 <plug_holes+0x12c>)
 800aa16:	f00b f911 	bl	8015c3c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	881b      	ldrh	r3, [r3, #0]
 800aa1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aa22:	d906      	bls.n	800aa32 <plug_holes+0x66>
 800aa24:	4b32      	ldr	r3, [pc, #200]	@ (800aaf0 <plug_holes+0x124>)
 800aa26:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800aa2a:	4937      	ldr	r1, [pc, #220]	@ (800ab08 <plug_holes+0x13c>)
 800aa2c:	4832      	ldr	r0, [pc, #200]	@ (800aaf8 <plug_holes+0x12c>)
 800aa2e:	f00b f905 	bl	8015c3c <iprintf>

  nmem = ptr_to_mem(mem->next);
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	881b      	ldrh	r3, [r3, #0]
 800aa36:	4618      	mov	r0, r3
 800aa38:	f7ff ffa4 	bl	800a984 <ptr_to_mem>
 800aa3c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800aa3e:	687a      	ldr	r2, [r7, #4]
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	429a      	cmp	r2, r3
 800aa44:	d024      	beq.n	800aa90 <plug_holes+0xc4>
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	791b      	ldrb	r3, [r3, #4]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d120      	bne.n	800aa90 <plug_holes+0xc4>
 800aa4e:	4b2b      	ldr	r3, [pc, #172]	@ (800aafc <plug_holes+0x130>)
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	68fa      	ldr	r2, [r7, #12]
 800aa54:	429a      	cmp	r2, r3
 800aa56:	d01b      	beq.n	800aa90 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800aa58:	4b2c      	ldr	r3, [pc, #176]	@ (800ab0c <plug_holes+0x140>)
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	68fa      	ldr	r2, [r7, #12]
 800aa5e:	429a      	cmp	r2, r3
 800aa60:	d102      	bne.n	800aa68 <plug_holes+0x9c>
      lfree = mem;
 800aa62:	4a2a      	ldr	r2, [pc, #168]	@ (800ab0c <plug_holes+0x140>)
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	881a      	ldrh	r2, [r3, #0]
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	881b      	ldrh	r3, [r3, #0]
 800aa74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aa78:	d00a      	beq.n	800aa90 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	881b      	ldrh	r3, [r3, #0]
 800aa7e:	4618      	mov	r0, r3
 800aa80:	f7ff ff80 	bl	800a984 <ptr_to_mem>
 800aa84:	4604      	mov	r4, r0
 800aa86:	6878      	ldr	r0, [r7, #4]
 800aa88:	f7ff ff8e 	bl	800a9a8 <mem_to_ptr>
 800aa8c:	4603      	mov	r3, r0
 800aa8e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	885b      	ldrh	r3, [r3, #2]
 800aa94:	4618      	mov	r0, r3
 800aa96:	f7ff ff75 	bl	800a984 <ptr_to_mem>
 800aa9a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800aa9c:	68ba      	ldr	r2, [r7, #8]
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	429a      	cmp	r2, r3
 800aaa2:	d01f      	beq.n	800aae4 <plug_holes+0x118>
 800aaa4:	68bb      	ldr	r3, [r7, #8]
 800aaa6:	791b      	ldrb	r3, [r3, #4]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d11b      	bne.n	800aae4 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800aaac:	4b17      	ldr	r3, [pc, #92]	@ (800ab0c <plug_holes+0x140>)
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	687a      	ldr	r2, [r7, #4]
 800aab2:	429a      	cmp	r2, r3
 800aab4:	d102      	bne.n	800aabc <plug_holes+0xf0>
      lfree = pmem;
 800aab6:	4a15      	ldr	r2, [pc, #84]	@ (800ab0c <plug_holes+0x140>)
 800aab8:	68bb      	ldr	r3, [r7, #8]
 800aaba:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	881a      	ldrh	r2, [r3, #0]
 800aac0:	68bb      	ldr	r3, [r7, #8]
 800aac2:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	881b      	ldrh	r3, [r3, #0]
 800aac8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aacc:	d00a      	beq.n	800aae4 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	881b      	ldrh	r3, [r3, #0]
 800aad2:	4618      	mov	r0, r3
 800aad4:	f7ff ff56 	bl	800a984 <ptr_to_mem>
 800aad8:	4604      	mov	r4, r0
 800aada:	68b8      	ldr	r0, [r7, #8]
 800aadc:	f7ff ff64 	bl	800a9a8 <mem_to_ptr>
 800aae0:	4603      	mov	r3, r0
 800aae2:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800aae4:	bf00      	nop
 800aae6:	3714      	adds	r7, #20
 800aae8:	46bd      	mov	sp, r7
 800aaea:	bd90      	pop	{r4, r7, pc}
 800aaec:	20006330 	.word	0x20006330
 800aaf0:	0801e230 	.word	0x0801e230
 800aaf4:	0801e260 	.word	0x0801e260
 800aaf8:	0801e278 	.word	0x0801e278
 800aafc:	20006334 	.word	0x20006334
 800ab00:	0801e2a0 	.word	0x0801e2a0
 800ab04:	0801e2bc 	.word	0x0801e2bc
 800ab08:	0801e2d8 	.word	0x0801e2d8
 800ab0c:	20006338 	.word	0x20006338

0800ab10 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b082      	sub	sp, #8
 800ab14:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800ab16:	4b18      	ldr	r3, [pc, #96]	@ (800ab78 <mem_init+0x68>)
 800ab18:	3303      	adds	r3, #3
 800ab1a:	f023 0303 	bic.w	r3, r3, #3
 800ab1e:	461a      	mov	r2, r3
 800ab20:	4b16      	ldr	r3, [pc, #88]	@ (800ab7c <mem_init+0x6c>)
 800ab22:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800ab24:	4b15      	ldr	r3, [pc, #84]	@ (800ab7c <mem_init+0x6c>)
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800ab30:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	2200      	movs	r2, #0
 800ab36:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800ab3e:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800ab42:	f7ff ff1f 	bl	800a984 <ptr_to_mem>
 800ab46:	4603      	mov	r3, r0
 800ab48:	4a0d      	ldr	r2, [pc, #52]	@ (800ab80 <mem_init+0x70>)
 800ab4a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800ab4c:	4b0c      	ldr	r3, [pc, #48]	@ (800ab80 <mem_init+0x70>)
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	2201      	movs	r2, #1
 800ab52:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800ab54:	4b0a      	ldr	r3, [pc, #40]	@ (800ab80 <mem_init+0x70>)
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800ab5c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800ab5e:	4b08      	ldr	r3, [pc, #32]	@ (800ab80 <mem_init+0x70>)
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800ab66:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800ab68:	4b04      	ldr	r3, [pc, #16]	@ (800ab7c <mem_init+0x6c>)
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	4a05      	ldr	r2, [pc, #20]	@ (800ab84 <mem_init+0x74>)
 800ab6e:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800ab70:	bf00      	nop
 800ab72:	3708      	adds	r7, #8
 800ab74:	46bd      	mov	sp, r7
 800ab76:	bd80      	pop	{r7, pc}
 800ab78:	20005f1c 	.word	0x20005f1c
 800ab7c:	20006330 	.word	0x20006330
 800ab80:	20006334 	.word	0x20006334
 800ab84:	20006338 	.word	0x20006338

0800ab88 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	b086      	sub	sp, #24
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800ab90:	6878      	ldr	r0, [r7, #4]
 800ab92:	f7ff ff09 	bl	800a9a8 <mem_to_ptr>
 800ab96:	4603      	mov	r3, r0
 800ab98:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	881b      	ldrh	r3, [r3, #0]
 800ab9e:	4618      	mov	r0, r3
 800aba0:	f7ff fef0 	bl	800a984 <ptr_to_mem>
 800aba4:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	885b      	ldrh	r3, [r3, #2]
 800abaa:	4618      	mov	r0, r3
 800abac:	f7ff feea 	bl	800a984 <ptr_to_mem>
 800abb0:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	881b      	ldrh	r3, [r3, #0]
 800abb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800abba:	d818      	bhi.n	800abee <mem_link_valid+0x66>
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	885b      	ldrh	r3, [r3, #2]
 800abc0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800abc4:	d813      	bhi.n	800abee <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800abca:	8afa      	ldrh	r2, [r7, #22]
 800abcc:	429a      	cmp	r2, r3
 800abce:	d004      	beq.n	800abda <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	881b      	ldrh	r3, [r3, #0]
 800abd4:	8afa      	ldrh	r2, [r7, #22]
 800abd6:	429a      	cmp	r2, r3
 800abd8:	d109      	bne.n	800abee <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800abda:	4b08      	ldr	r3, [pc, #32]	@ (800abfc <mem_link_valid+0x74>)
 800abdc:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800abde:	693a      	ldr	r2, [r7, #16]
 800abe0:	429a      	cmp	r2, r3
 800abe2:	d006      	beq.n	800abf2 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800abe4:	693b      	ldr	r3, [r7, #16]
 800abe6:	885b      	ldrh	r3, [r3, #2]
 800abe8:	8afa      	ldrh	r2, [r7, #22]
 800abea:	429a      	cmp	r2, r3
 800abec:	d001      	beq.n	800abf2 <mem_link_valid+0x6a>
    return 0;
 800abee:	2300      	movs	r3, #0
 800abf0:	e000      	b.n	800abf4 <mem_link_valid+0x6c>
  }
  return 1;
 800abf2:	2301      	movs	r3, #1
}
 800abf4:	4618      	mov	r0, r3
 800abf6:	3718      	adds	r7, #24
 800abf8:	46bd      	mov	sp, r7
 800abfa:	bd80      	pop	{r7, pc}
 800abfc:	20006334 	.word	0x20006334

0800ac00 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b084      	sub	sp, #16
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d04c      	beq.n	800aca8 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	f003 0303 	and.w	r3, r3, #3
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d007      	beq.n	800ac28 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800ac18:	4b25      	ldr	r3, [pc, #148]	@ (800acb0 <mem_free+0xb0>)
 800ac1a:	f240 2273 	movw	r2, #627	@ 0x273
 800ac1e:	4925      	ldr	r1, [pc, #148]	@ (800acb4 <mem_free+0xb4>)
 800ac20:	4825      	ldr	r0, [pc, #148]	@ (800acb8 <mem_free+0xb8>)
 800ac22:	f00b f80b 	bl	8015c3c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800ac26:	e040      	b.n	800acaa <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	3b08      	subs	r3, #8
 800ac2c:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800ac2e:	4b23      	ldr	r3, [pc, #140]	@ (800acbc <mem_free+0xbc>)
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	68fa      	ldr	r2, [r7, #12]
 800ac34:	429a      	cmp	r2, r3
 800ac36:	d306      	bcc.n	800ac46 <mem_free+0x46>
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	f103 020c 	add.w	r2, r3, #12
 800ac3e:	4b20      	ldr	r3, [pc, #128]	@ (800acc0 <mem_free+0xc0>)
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	429a      	cmp	r2, r3
 800ac44:	d907      	bls.n	800ac56 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800ac46:	4b1a      	ldr	r3, [pc, #104]	@ (800acb0 <mem_free+0xb0>)
 800ac48:	f240 227f 	movw	r2, #639	@ 0x27f
 800ac4c:	491d      	ldr	r1, [pc, #116]	@ (800acc4 <mem_free+0xc4>)
 800ac4e:	481a      	ldr	r0, [pc, #104]	@ (800acb8 <mem_free+0xb8>)
 800ac50:	f00a fff4 	bl	8015c3c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800ac54:	e029      	b.n	800acaa <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	791b      	ldrb	r3, [r3, #4]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d107      	bne.n	800ac6e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800ac5e:	4b14      	ldr	r3, [pc, #80]	@ (800acb0 <mem_free+0xb0>)
 800ac60:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800ac64:	4918      	ldr	r1, [pc, #96]	@ (800acc8 <mem_free+0xc8>)
 800ac66:	4814      	ldr	r0, [pc, #80]	@ (800acb8 <mem_free+0xb8>)
 800ac68:	f00a ffe8 	bl	8015c3c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800ac6c:	e01d      	b.n	800acaa <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800ac6e:	68f8      	ldr	r0, [r7, #12]
 800ac70:	f7ff ff8a 	bl	800ab88 <mem_link_valid>
 800ac74:	4603      	mov	r3, r0
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d107      	bne.n	800ac8a <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800ac7a:	4b0d      	ldr	r3, [pc, #52]	@ (800acb0 <mem_free+0xb0>)
 800ac7c:	f240 2295 	movw	r2, #661	@ 0x295
 800ac80:	4912      	ldr	r1, [pc, #72]	@ (800accc <mem_free+0xcc>)
 800ac82:	480d      	ldr	r0, [pc, #52]	@ (800acb8 <mem_free+0xb8>)
 800ac84:	f00a ffda 	bl	8015c3c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800ac88:	e00f      	b.n	800acaa <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800ac90:	4b0f      	ldr	r3, [pc, #60]	@ (800acd0 <mem_free+0xd0>)
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	68fa      	ldr	r2, [r7, #12]
 800ac96:	429a      	cmp	r2, r3
 800ac98:	d202      	bcs.n	800aca0 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800ac9a:	4a0d      	ldr	r2, [pc, #52]	@ (800acd0 <mem_free+0xd0>)
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800aca0:	68f8      	ldr	r0, [r7, #12]
 800aca2:	f7ff fe93 	bl	800a9cc <plug_holes>
 800aca6:	e000      	b.n	800acaa <mem_free+0xaa>
    return;
 800aca8:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800acaa:	3710      	adds	r7, #16
 800acac:	46bd      	mov	sp, r7
 800acae:	bd80      	pop	{r7, pc}
 800acb0:	0801e230 	.word	0x0801e230
 800acb4:	0801e304 	.word	0x0801e304
 800acb8:	0801e278 	.word	0x0801e278
 800acbc:	20006330 	.word	0x20006330
 800acc0:	20006334 	.word	0x20006334
 800acc4:	0801e328 	.word	0x0801e328
 800acc8:	0801e344 	.word	0x0801e344
 800accc:	0801e36c 	.word	0x0801e36c
 800acd0:	20006338 	.word	0x20006338

0800acd4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b088      	sub	sp, #32
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
 800acdc:	460b      	mov	r3, r1
 800acde:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800ace0:	887b      	ldrh	r3, [r7, #2]
 800ace2:	3303      	adds	r3, #3
 800ace4:	b29b      	uxth	r3, r3
 800ace6:	f023 0303 	bic.w	r3, r3, #3
 800acea:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800acec:	8bfb      	ldrh	r3, [r7, #30]
 800acee:	2b0b      	cmp	r3, #11
 800acf0:	d801      	bhi.n	800acf6 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800acf2:	230c      	movs	r3, #12
 800acf4:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800acf6:	8bfb      	ldrh	r3, [r7, #30]
 800acf8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800acfc:	d803      	bhi.n	800ad06 <mem_trim+0x32>
 800acfe:	8bfa      	ldrh	r2, [r7, #30]
 800ad00:	887b      	ldrh	r3, [r7, #2]
 800ad02:	429a      	cmp	r2, r3
 800ad04:	d201      	bcs.n	800ad0a <mem_trim+0x36>
    return NULL;
 800ad06:	2300      	movs	r3, #0
 800ad08:	e0cc      	b.n	800aea4 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800ad0a:	4b68      	ldr	r3, [pc, #416]	@ (800aeac <mem_trim+0x1d8>)
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	687a      	ldr	r2, [r7, #4]
 800ad10:	429a      	cmp	r2, r3
 800ad12:	d304      	bcc.n	800ad1e <mem_trim+0x4a>
 800ad14:	4b66      	ldr	r3, [pc, #408]	@ (800aeb0 <mem_trim+0x1dc>)
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	687a      	ldr	r2, [r7, #4]
 800ad1a:	429a      	cmp	r2, r3
 800ad1c:	d306      	bcc.n	800ad2c <mem_trim+0x58>
 800ad1e:	4b65      	ldr	r3, [pc, #404]	@ (800aeb4 <mem_trim+0x1e0>)
 800ad20:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800ad24:	4964      	ldr	r1, [pc, #400]	@ (800aeb8 <mem_trim+0x1e4>)
 800ad26:	4865      	ldr	r0, [pc, #404]	@ (800aebc <mem_trim+0x1e8>)
 800ad28:	f00a ff88 	bl	8015c3c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800ad2c:	4b5f      	ldr	r3, [pc, #380]	@ (800aeac <mem_trim+0x1d8>)
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	687a      	ldr	r2, [r7, #4]
 800ad32:	429a      	cmp	r2, r3
 800ad34:	d304      	bcc.n	800ad40 <mem_trim+0x6c>
 800ad36:	4b5e      	ldr	r3, [pc, #376]	@ (800aeb0 <mem_trim+0x1dc>)
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	687a      	ldr	r2, [r7, #4]
 800ad3c:	429a      	cmp	r2, r3
 800ad3e:	d301      	bcc.n	800ad44 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	e0af      	b.n	800aea4 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	3b08      	subs	r3, #8
 800ad48:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800ad4a:	69b8      	ldr	r0, [r7, #24]
 800ad4c:	f7ff fe2c 	bl	800a9a8 <mem_to_ptr>
 800ad50:	4603      	mov	r3, r0
 800ad52:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800ad54:	69bb      	ldr	r3, [r7, #24]
 800ad56:	881a      	ldrh	r2, [r3, #0]
 800ad58:	8afb      	ldrh	r3, [r7, #22]
 800ad5a:	1ad3      	subs	r3, r2, r3
 800ad5c:	b29b      	uxth	r3, r3
 800ad5e:	3b08      	subs	r3, #8
 800ad60:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800ad62:	8bfa      	ldrh	r2, [r7, #30]
 800ad64:	8abb      	ldrh	r3, [r7, #20]
 800ad66:	429a      	cmp	r2, r3
 800ad68:	d906      	bls.n	800ad78 <mem_trim+0xa4>
 800ad6a:	4b52      	ldr	r3, [pc, #328]	@ (800aeb4 <mem_trim+0x1e0>)
 800ad6c:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800ad70:	4953      	ldr	r1, [pc, #332]	@ (800aec0 <mem_trim+0x1ec>)
 800ad72:	4852      	ldr	r0, [pc, #328]	@ (800aebc <mem_trim+0x1e8>)
 800ad74:	f00a ff62 	bl	8015c3c <iprintf>
  if (newsize > size) {
 800ad78:	8bfa      	ldrh	r2, [r7, #30]
 800ad7a:	8abb      	ldrh	r3, [r7, #20]
 800ad7c:	429a      	cmp	r2, r3
 800ad7e:	d901      	bls.n	800ad84 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800ad80:	2300      	movs	r3, #0
 800ad82:	e08f      	b.n	800aea4 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800ad84:	8bfa      	ldrh	r2, [r7, #30]
 800ad86:	8abb      	ldrh	r3, [r7, #20]
 800ad88:	429a      	cmp	r2, r3
 800ad8a:	d101      	bne.n	800ad90 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	e089      	b.n	800aea4 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800ad90:	69bb      	ldr	r3, [r7, #24]
 800ad92:	881b      	ldrh	r3, [r3, #0]
 800ad94:	4618      	mov	r0, r3
 800ad96:	f7ff fdf5 	bl	800a984 <ptr_to_mem>
 800ad9a:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800ad9c:	693b      	ldr	r3, [r7, #16]
 800ad9e:	791b      	ldrb	r3, [r3, #4]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d13f      	bne.n	800ae24 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800ada4:	69bb      	ldr	r3, [r7, #24]
 800ada6:	881b      	ldrh	r3, [r3, #0]
 800ada8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800adac:	d106      	bne.n	800adbc <mem_trim+0xe8>
 800adae:	4b41      	ldr	r3, [pc, #260]	@ (800aeb4 <mem_trim+0x1e0>)
 800adb0:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800adb4:	4943      	ldr	r1, [pc, #268]	@ (800aec4 <mem_trim+0x1f0>)
 800adb6:	4841      	ldr	r0, [pc, #260]	@ (800aebc <mem_trim+0x1e8>)
 800adb8:	f00a ff40 	bl	8015c3c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800adbc:	693b      	ldr	r3, [r7, #16]
 800adbe:	881b      	ldrh	r3, [r3, #0]
 800adc0:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800adc2:	8afa      	ldrh	r2, [r7, #22]
 800adc4:	8bfb      	ldrh	r3, [r7, #30]
 800adc6:	4413      	add	r3, r2
 800adc8:	b29b      	uxth	r3, r3
 800adca:	3308      	adds	r3, #8
 800adcc:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800adce:	4b3e      	ldr	r3, [pc, #248]	@ (800aec8 <mem_trim+0x1f4>)
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	693a      	ldr	r2, [r7, #16]
 800add4:	429a      	cmp	r2, r3
 800add6:	d106      	bne.n	800ade6 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800add8:	89fb      	ldrh	r3, [r7, #14]
 800adda:	4618      	mov	r0, r3
 800addc:	f7ff fdd2 	bl	800a984 <ptr_to_mem>
 800ade0:	4603      	mov	r3, r0
 800ade2:	4a39      	ldr	r2, [pc, #228]	@ (800aec8 <mem_trim+0x1f4>)
 800ade4:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800ade6:	89fb      	ldrh	r3, [r7, #14]
 800ade8:	4618      	mov	r0, r3
 800adea:	f7ff fdcb 	bl	800a984 <ptr_to_mem>
 800adee:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800adf0:	693b      	ldr	r3, [r7, #16]
 800adf2:	2200      	movs	r2, #0
 800adf4:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800adf6:	693b      	ldr	r3, [r7, #16]
 800adf8:	89ba      	ldrh	r2, [r7, #12]
 800adfa:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800adfc:	693b      	ldr	r3, [r7, #16]
 800adfe:	8afa      	ldrh	r2, [r7, #22]
 800ae00:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800ae02:	69bb      	ldr	r3, [r7, #24]
 800ae04:	89fa      	ldrh	r2, [r7, #14]
 800ae06:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800ae08:	693b      	ldr	r3, [r7, #16]
 800ae0a:	881b      	ldrh	r3, [r3, #0]
 800ae0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ae10:	d047      	beq.n	800aea2 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800ae12:	693b      	ldr	r3, [r7, #16]
 800ae14:	881b      	ldrh	r3, [r3, #0]
 800ae16:	4618      	mov	r0, r3
 800ae18:	f7ff fdb4 	bl	800a984 <ptr_to_mem>
 800ae1c:	4602      	mov	r2, r0
 800ae1e:	89fb      	ldrh	r3, [r7, #14]
 800ae20:	8053      	strh	r3, [r2, #2]
 800ae22:	e03e      	b.n	800aea2 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800ae24:	8bfb      	ldrh	r3, [r7, #30]
 800ae26:	f103 0214 	add.w	r2, r3, #20
 800ae2a:	8abb      	ldrh	r3, [r7, #20]
 800ae2c:	429a      	cmp	r2, r3
 800ae2e:	d838      	bhi.n	800aea2 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800ae30:	8afa      	ldrh	r2, [r7, #22]
 800ae32:	8bfb      	ldrh	r3, [r7, #30]
 800ae34:	4413      	add	r3, r2
 800ae36:	b29b      	uxth	r3, r3
 800ae38:	3308      	adds	r3, #8
 800ae3a:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800ae3c:	69bb      	ldr	r3, [r7, #24]
 800ae3e:	881b      	ldrh	r3, [r3, #0]
 800ae40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ae44:	d106      	bne.n	800ae54 <mem_trim+0x180>
 800ae46:	4b1b      	ldr	r3, [pc, #108]	@ (800aeb4 <mem_trim+0x1e0>)
 800ae48:	f240 3216 	movw	r2, #790	@ 0x316
 800ae4c:	491d      	ldr	r1, [pc, #116]	@ (800aec4 <mem_trim+0x1f0>)
 800ae4e:	481b      	ldr	r0, [pc, #108]	@ (800aebc <mem_trim+0x1e8>)
 800ae50:	f00a fef4 	bl	8015c3c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800ae54:	89fb      	ldrh	r3, [r7, #14]
 800ae56:	4618      	mov	r0, r3
 800ae58:	f7ff fd94 	bl	800a984 <ptr_to_mem>
 800ae5c:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800ae5e:	4b1a      	ldr	r3, [pc, #104]	@ (800aec8 <mem_trim+0x1f4>)
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	693a      	ldr	r2, [r7, #16]
 800ae64:	429a      	cmp	r2, r3
 800ae66:	d202      	bcs.n	800ae6e <mem_trim+0x19a>
      lfree = mem2;
 800ae68:	4a17      	ldr	r2, [pc, #92]	@ (800aec8 <mem_trim+0x1f4>)
 800ae6a:	693b      	ldr	r3, [r7, #16]
 800ae6c:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800ae6e:	693b      	ldr	r3, [r7, #16]
 800ae70:	2200      	movs	r2, #0
 800ae72:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800ae74:	69bb      	ldr	r3, [r7, #24]
 800ae76:	881a      	ldrh	r2, [r3, #0]
 800ae78:	693b      	ldr	r3, [r7, #16]
 800ae7a:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800ae7c:	693b      	ldr	r3, [r7, #16]
 800ae7e:	8afa      	ldrh	r2, [r7, #22]
 800ae80:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800ae82:	69bb      	ldr	r3, [r7, #24]
 800ae84:	89fa      	ldrh	r2, [r7, #14]
 800ae86:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800ae88:	693b      	ldr	r3, [r7, #16]
 800ae8a:	881b      	ldrh	r3, [r3, #0]
 800ae8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ae90:	d007      	beq.n	800aea2 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800ae92:	693b      	ldr	r3, [r7, #16]
 800ae94:	881b      	ldrh	r3, [r3, #0]
 800ae96:	4618      	mov	r0, r3
 800ae98:	f7ff fd74 	bl	800a984 <ptr_to_mem>
 800ae9c:	4602      	mov	r2, r0
 800ae9e:	89fb      	ldrh	r3, [r7, #14]
 800aea0:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800aea2:	687b      	ldr	r3, [r7, #4]
}
 800aea4:	4618      	mov	r0, r3
 800aea6:	3720      	adds	r7, #32
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	bd80      	pop	{r7, pc}
 800aeac:	20006330 	.word	0x20006330
 800aeb0:	20006334 	.word	0x20006334
 800aeb4:	0801e230 	.word	0x0801e230
 800aeb8:	0801e3a0 	.word	0x0801e3a0
 800aebc:	0801e278 	.word	0x0801e278
 800aec0:	0801e3b8 	.word	0x0801e3b8
 800aec4:	0801e3d8 	.word	0x0801e3d8
 800aec8:	20006338 	.word	0x20006338

0800aecc <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b088      	sub	sp, #32
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	4603      	mov	r3, r0
 800aed4:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800aed6:	88fb      	ldrh	r3, [r7, #6]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d101      	bne.n	800aee0 <mem_malloc+0x14>
    return NULL;
 800aedc:	2300      	movs	r3, #0
 800aede:	e0d9      	b.n	800b094 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800aee0:	88fb      	ldrh	r3, [r7, #6]
 800aee2:	3303      	adds	r3, #3
 800aee4:	b29b      	uxth	r3, r3
 800aee6:	f023 0303 	bic.w	r3, r3, #3
 800aeea:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800aeec:	8bbb      	ldrh	r3, [r7, #28]
 800aeee:	2b0b      	cmp	r3, #11
 800aef0:	d801      	bhi.n	800aef6 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800aef2:	230c      	movs	r3, #12
 800aef4:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800aef6:	8bbb      	ldrh	r3, [r7, #28]
 800aef8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aefc:	d803      	bhi.n	800af06 <mem_malloc+0x3a>
 800aefe:	8bba      	ldrh	r2, [r7, #28]
 800af00:	88fb      	ldrh	r3, [r7, #6]
 800af02:	429a      	cmp	r2, r3
 800af04:	d201      	bcs.n	800af0a <mem_malloc+0x3e>
    return NULL;
 800af06:	2300      	movs	r3, #0
 800af08:	e0c4      	b.n	800b094 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800af0a:	4b64      	ldr	r3, [pc, #400]	@ (800b09c <mem_malloc+0x1d0>)
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	4618      	mov	r0, r3
 800af10:	f7ff fd4a 	bl	800a9a8 <mem_to_ptr>
 800af14:	4603      	mov	r3, r0
 800af16:	83fb      	strh	r3, [r7, #30]
 800af18:	e0b4      	b.n	800b084 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800af1a:	8bfb      	ldrh	r3, [r7, #30]
 800af1c:	4618      	mov	r0, r3
 800af1e:	f7ff fd31 	bl	800a984 <ptr_to_mem>
 800af22:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800af24:	697b      	ldr	r3, [r7, #20]
 800af26:	791b      	ldrb	r3, [r3, #4]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	f040 80a4 	bne.w	800b076 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800af2e:	697b      	ldr	r3, [r7, #20]
 800af30:	881b      	ldrh	r3, [r3, #0]
 800af32:	461a      	mov	r2, r3
 800af34:	8bfb      	ldrh	r3, [r7, #30]
 800af36:	1ad3      	subs	r3, r2, r3
 800af38:	f1a3 0208 	sub.w	r2, r3, #8
 800af3c:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800af3e:	429a      	cmp	r2, r3
 800af40:	f0c0 8099 	bcc.w	800b076 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800af44:	697b      	ldr	r3, [r7, #20]
 800af46:	881b      	ldrh	r3, [r3, #0]
 800af48:	461a      	mov	r2, r3
 800af4a:	8bfb      	ldrh	r3, [r7, #30]
 800af4c:	1ad3      	subs	r3, r2, r3
 800af4e:	f1a3 0208 	sub.w	r2, r3, #8
 800af52:	8bbb      	ldrh	r3, [r7, #28]
 800af54:	3314      	adds	r3, #20
 800af56:	429a      	cmp	r2, r3
 800af58:	d333      	bcc.n	800afc2 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800af5a:	8bfa      	ldrh	r2, [r7, #30]
 800af5c:	8bbb      	ldrh	r3, [r7, #28]
 800af5e:	4413      	add	r3, r2
 800af60:	b29b      	uxth	r3, r3
 800af62:	3308      	adds	r3, #8
 800af64:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800af66:	8a7b      	ldrh	r3, [r7, #18]
 800af68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800af6c:	d106      	bne.n	800af7c <mem_malloc+0xb0>
 800af6e:	4b4c      	ldr	r3, [pc, #304]	@ (800b0a0 <mem_malloc+0x1d4>)
 800af70:	f240 3287 	movw	r2, #903	@ 0x387
 800af74:	494b      	ldr	r1, [pc, #300]	@ (800b0a4 <mem_malloc+0x1d8>)
 800af76:	484c      	ldr	r0, [pc, #304]	@ (800b0a8 <mem_malloc+0x1dc>)
 800af78:	f00a fe60 	bl	8015c3c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800af7c:	8a7b      	ldrh	r3, [r7, #18]
 800af7e:	4618      	mov	r0, r3
 800af80:	f7ff fd00 	bl	800a984 <ptr_to_mem>
 800af84:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	2200      	movs	r2, #0
 800af8a:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800af8c:	697b      	ldr	r3, [r7, #20]
 800af8e:	881a      	ldrh	r2, [r3, #0]
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	8bfa      	ldrh	r2, [r7, #30]
 800af98:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800af9a:	697b      	ldr	r3, [r7, #20]
 800af9c:	8a7a      	ldrh	r2, [r7, #18]
 800af9e:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800afa0:	697b      	ldr	r3, [r7, #20]
 800afa2:	2201      	movs	r2, #1
 800afa4:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	881b      	ldrh	r3, [r3, #0]
 800afaa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800afae:	d00b      	beq.n	800afc8 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	881b      	ldrh	r3, [r3, #0]
 800afb4:	4618      	mov	r0, r3
 800afb6:	f7ff fce5 	bl	800a984 <ptr_to_mem>
 800afba:	4602      	mov	r2, r0
 800afbc:	8a7b      	ldrh	r3, [r7, #18]
 800afbe:	8053      	strh	r3, [r2, #2]
 800afc0:	e002      	b.n	800afc8 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800afc2:	697b      	ldr	r3, [r7, #20]
 800afc4:	2201      	movs	r2, #1
 800afc6:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800afc8:	4b34      	ldr	r3, [pc, #208]	@ (800b09c <mem_malloc+0x1d0>)
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	697a      	ldr	r2, [r7, #20]
 800afce:	429a      	cmp	r2, r3
 800afd0:	d127      	bne.n	800b022 <mem_malloc+0x156>
          struct mem *cur = lfree;
 800afd2:	4b32      	ldr	r3, [pc, #200]	@ (800b09c <mem_malloc+0x1d0>)
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800afd8:	e005      	b.n	800afe6 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800afda:	69bb      	ldr	r3, [r7, #24]
 800afdc:	881b      	ldrh	r3, [r3, #0]
 800afde:	4618      	mov	r0, r3
 800afe0:	f7ff fcd0 	bl	800a984 <ptr_to_mem>
 800afe4:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800afe6:	69bb      	ldr	r3, [r7, #24]
 800afe8:	791b      	ldrb	r3, [r3, #4]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d004      	beq.n	800aff8 <mem_malloc+0x12c>
 800afee:	4b2f      	ldr	r3, [pc, #188]	@ (800b0ac <mem_malloc+0x1e0>)
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	69ba      	ldr	r2, [r7, #24]
 800aff4:	429a      	cmp	r2, r3
 800aff6:	d1f0      	bne.n	800afda <mem_malloc+0x10e>
          }
          lfree = cur;
 800aff8:	4a28      	ldr	r2, [pc, #160]	@ (800b09c <mem_malloc+0x1d0>)
 800affa:	69bb      	ldr	r3, [r7, #24]
 800affc:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800affe:	4b27      	ldr	r3, [pc, #156]	@ (800b09c <mem_malloc+0x1d0>)
 800b000:	681a      	ldr	r2, [r3, #0]
 800b002:	4b2a      	ldr	r3, [pc, #168]	@ (800b0ac <mem_malloc+0x1e0>)
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	429a      	cmp	r2, r3
 800b008:	d00b      	beq.n	800b022 <mem_malloc+0x156>
 800b00a:	4b24      	ldr	r3, [pc, #144]	@ (800b09c <mem_malloc+0x1d0>)
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	791b      	ldrb	r3, [r3, #4]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d006      	beq.n	800b022 <mem_malloc+0x156>
 800b014:	4b22      	ldr	r3, [pc, #136]	@ (800b0a0 <mem_malloc+0x1d4>)
 800b016:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800b01a:	4925      	ldr	r1, [pc, #148]	@ (800b0b0 <mem_malloc+0x1e4>)
 800b01c:	4822      	ldr	r0, [pc, #136]	@ (800b0a8 <mem_malloc+0x1dc>)
 800b01e:	f00a fe0d 	bl	8015c3c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800b022:	8bba      	ldrh	r2, [r7, #28]
 800b024:	697b      	ldr	r3, [r7, #20]
 800b026:	4413      	add	r3, r2
 800b028:	3308      	adds	r3, #8
 800b02a:	4a20      	ldr	r2, [pc, #128]	@ (800b0ac <mem_malloc+0x1e0>)
 800b02c:	6812      	ldr	r2, [r2, #0]
 800b02e:	4293      	cmp	r3, r2
 800b030:	d906      	bls.n	800b040 <mem_malloc+0x174>
 800b032:	4b1b      	ldr	r3, [pc, #108]	@ (800b0a0 <mem_malloc+0x1d4>)
 800b034:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800b038:	491e      	ldr	r1, [pc, #120]	@ (800b0b4 <mem_malloc+0x1e8>)
 800b03a:	481b      	ldr	r0, [pc, #108]	@ (800b0a8 <mem_malloc+0x1dc>)
 800b03c:	f00a fdfe 	bl	8015c3c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800b040:	697b      	ldr	r3, [r7, #20]
 800b042:	f003 0303 	and.w	r3, r3, #3
 800b046:	2b00      	cmp	r3, #0
 800b048:	d006      	beq.n	800b058 <mem_malloc+0x18c>
 800b04a:	4b15      	ldr	r3, [pc, #84]	@ (800b0a0 <mem_malloc+0x1d4>)
 800b04c:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800b050:	4919      	ldr	r1, [pc, #100]	@ (800b0b8 <mem_malloc+0x1ec>)
 800b052:	4815      	ldr	r0, [pc, #84]	@ (800b0a8 <mem_malloc+0x1dc>)
 800b054:	f00a fdf2 	bl	8015c3c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800b058:	697b      	ldr	r3, [r7, #20]
 800b05a:	f003 0303 	and.w	r3, r3, #3
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d006      	beq.n	800b070 <mem_malloc+0x1a4>
 800b062:	4b0f      	ldr	r3, [pc, #60]	@ (800b0a0 <mem_malloc+0x1d4>)
 800b064:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800b068:	4914      	ldr	r1, [pc, #80]	@ (800b0bc <mem_malloc+0x1f0>)
 800b06a:	480f      	ldr	r0, [pc, #60]	@ (800b0a8 <mem_malloc+0x1dc>)
 800b06c:	f00a fde6 	bl	8015c3c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800b070:	697b      	ldr	r3, [r7, #20]
 800b072:	3308      	adds	r3, #8
 800b074:	e00e      	b.n	800b094 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800b076:	8bfb      	ldrh	r3, [r7, #30]
 800b078:	4618      	mov	r0, r3
 800b07a:	f7ff fc83 	bl	800a984 <ptr_to_mem>
 800b07e:	4603      	mov	r3, r0
 800b080:	881b      	ldrh	r3, [r3, #0]
 800b082:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800b084:	8bfa      	ldrh	r2, [r7, #30]
 800b086:	8bbb      	ldrh	r3, [r7, #28]
 800b088:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 800b08c:	429a      	cmp	r2, r3
 800b08e:	f4ff af44 	bcc.w	800af1a <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800b092:	2300      	movs	r3, #0
}
 800b094:	4618      	mov	r0, r3
 800b096:	3720      	adds	r7, #32
 800b098:	46bd      	mov	sp, r7
 800b09a:	bd80      	pop	{r7, pc}
 800b09c:	20006338 	.word	0x20006338
 800b0a0:	0801e230 	.word	0x0801e230
 800b0a4:	0801e3d8 	.word	0x0801e3d8
 800b0a8:	0801e278 	.word	0x0801e278
 800b0ac:	20006334 	.word	0x20006334
 800b0b0:	0801e3ec 	.word	0x0801e3ec
 800b0b4:	0801e408 	.word	0x0801e408
 800b0b8:	0801e438 	.word	0x0801e438
 800b0bc:	0801e468 	.word	0x0801e468

0800b0c0 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800b0c0:	b480      	push	{r7}
 800b0c2:	b085      	sub	sp, #20
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	689b      	ldr	r3, [r3, #8]
 800b0cc:	2200      	movs	r2, #0
 800b0ce:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	685b      	ldr	r3, [r3, #4]
 800b0d4:	3303      	adds	r3, #3
 800b0d6:	f023 0303 	bic.w	r3, r3, #3
 800b0da:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800b0dc:	2300      	movs	r3, #0
 800b0de:	60fb      	str	r3, [r7, #12]
 800b0e0:	e011      	b.n	800b106 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	689b      	ldr	r3, [r3, #8]
 800b0e6:	681a      	ldr	r2, [r3, #0]
 800b0e8:	68bb      	ldr	r3, [r7, #8]
 800b0ea:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	689b      	ldr	r3, [r3, #8]
 800b0f0:	68ba      	ldr	r2, [r7, #8]
 800b0f2:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	881b      	ldrh	r3, [r3, #0]
 800b0f8:	461a      	mov	r2, r3
 800b0fa:	68bb      	ldr	r3, [r7, #8]
 800b0fc:	4413      	add	r3, r2
 800b0fe:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	3301      	adds	r3, #1
 800b104:	60fb      	str	r3, [r7, #12]
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	885b      	ldrh	r3, [r3, #2]
 800b10a:	461a      	mov	r2, r3
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	4293      	cmp	r3, r2
 800b110:	dbe7      	blt.n	800b0e2 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800b112:	bf00      	nop
 800b114:	bf00      	nop
 800b116:	3714      	adds	r7, #20
 800b118:	46bd      	mov	sp, r7
 800b11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11e:	4770      	bx	lr

0800b120 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800b120:	b580      	push	{r7, lr}
 800b122:	b082      	sub	sp, #8
 800b124:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b126:	2300      	movs	r3, #0
 800b128:	80fb      	strh	r3, [r7, #6]
 800b12a:	e009      	b.n	800b140 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800b12c:	88fb      	ldrh	r3, [r7, #6]
 800b12e:	4a08      	ldr	r2, [pc, #32]	@ (800b150 <memp_init+0x30>)
 800b130:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b134:	4618      	mov	r0, r3
 800b136:	f7ff ffc3 	bl	800b0c0 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b13a:	88fb      	ldrh	r3, [r7, #6]
 800b13c:	3301      	adds	r3, #1
 800b13e:	80fb      	strh	r3, [r7, #6]
 800b140:	88fb      	ldrh	r3, [r7, #6]
 800b142:	2b08      	cmp	r3, #8
 800b144:	d9f2      	bls.n	800b12c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800b146:	bf00      	nop
 800b148:	bf00      	nop
 800b14a:	3708      	adds	r7, #8
 800b14c:	46bd      	mov	sp, r7
 800b14e:	bd80      	pop	{r7, pc}
 800b150:	08020c4c 	.word	0x08020c4c

0800b154 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800b154:	b580      	push	{r7, lr}
 800b156:	b084      	sub	sp, #16
 800b158:	af00      	add	r7, sp, #0
 800b15a:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	689b      	ldr	r3, [r3, #8]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d012      	beq.n	800b190 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	689b      	ldr	r3, [r3, #8]
 800b16e:	68fa      	ldr	r2, [r7, #12]
 800b170:	6812      	ldr	r2, [r2, #0]
 800b172:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	f003 0303 	and.w	r3, r3, #3
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d006      	beq.n	800b18c <do_memp_malloc_pool+0x38>
 800b17e:	4b07      	ldr	r3, [pc, #28]	@ (800b19c <do_memp_malloc_pool+0x48>)
 800b180:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800b184:	4906      	ldr	r1, [pc, #24]	@ (800b1a0 <do_memp_malloc_pool+0x4c>)
 800b186:	4807      	ldr	r0, [pc, #28]	@ (800b1a4 <do_memp_malloc_pool+0x50>)
 800b188:	f00a fd58 	bl	8015c3c <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	e000      	b.n	800b192 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800b190:	2300      	movs	r3, #0
}
 800b192:	4618      	mov	r0, r3
 800b194:	3710      	adds	r7, #16
 800b196:	46bd      	mov	sp, r7
 800b198:	bd80      	pop	{r7, pc}
 800b19a:	bf00      	nop
 800b19c:	0801e48c 	.word	0x0801e48c
 800b1a0:	0801e4bc 	.word	0x0801e4bc
 800b1a4:	0801e4e0 	.word	0x0801e4e0

0800b1a8 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b082      	sub	sp, #8
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d106      	bne.n	800b1c4 <memp_malloc_pool+0x1c>
 800b1b6:	4b0a      	ldr	r3, [pc, #40]	@ (800b1e0 <memp_malloc_pool+0x38>)
 800b1b8:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 800b1bc:	4909      	ldr	r1, [pc, #36]	@ (800b1e4 <memp_malloc_pool+0x3c>)
 800b1be:	480a      	ldr	r0, [pc, #40]	@ (800b1e8 <memp_malloc_pool+0x40>)
 800b1c0:	f00a fd3c 	bl	8015c3c <iprintf>
  if (desc == NULL) {
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d101      	bne.n	800b1ce <memp_malloc_pool+0x26>
    return NULL;
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	e003      	b.n	800b1d6 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800b1ce:	6878      	ldr	r0, [r7, #4]
 800b1d0:	f7ff ffc0 	bl	800b154 <do_memp_malloc_pool>
 800b1d4:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	3708      	adds	r7, #8
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	bd80      	pop	{r7, pc}
 800b1de:	bf00      	nop
 800b1e0:	0801e48c 	.word	0x0801e48c
 800b1e4:	0801e508 	.word	0x0801e508
 800b1e8:	0801e4e0 	.word	0x0801e4e0

0800b1ec <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800b1ec:	b580      	push	{r7, lr}
 800b1ee:	b084      	sub	sp, #16
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	4603      	mov	r3, r0
 800b1f4:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800b1f6:	79fb      	ldrb	r3, [r7, #7]
 800b1f8:	2b08      	cmp	r3, #8
 800b1fa:	d908      	bls.n	800b20e <memp_malloc+0x22>
 800b1fc:	4b0a      	ldr	r3, [pc, #40]	@ (800b228 <memp_malloc+0x3c>)
 800b1fe:	f240 1257 	movw	r2, #343	@ 0x157
 800b202:	490a      	ldr	r1, [pc, #40]	@ (800b22c <memp_malloc+0x40>)
 800b204:	480a      	ldr	r0, [pc, #40]	@ (800b230 <memp_malloc+0x44>)
 800b206:	f00a fd19 	bl	8015c3c <iprintf>
 800b20a:	2300      	movs	r3, #0
 800b20c:	e008      	b.n	800b220 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800b20e:	79fb      	ldrb	r3, [r7, #7]
 800b210:	4a08      	ldr	r2, [pc, #32]	@ (800b234 <memp_malloc+0x48>)
 800b212:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b216:	4618      	mov	r0, r3
 800b218:	f7ff ff9c 	bl	800b154 <do_memp_malloc_pool>
 800b21c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800b21e:	68fb      	ldr	r3, [r7, #12]
}
 800b220:	4618      	mov	r0, r3
 800b222:	3710      	adds	r7, #16
 800b224:	46bd      	mov	sp, r7
 800b226:	bd80      	pop	{r7, pc}
 800b228:	0801e48c 	.word	0x0801e48c
 800b22c:	0801e51c 	.word	0x0801e51c
 800b230:	0801e4e0 	.word	0x0801e4e0
 800b234:	08020c4c 	.word	0x08020c4c

0800b238 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800b238:	b580      	push	{r7, lr}
 800b23a:	b084      	sub	sp, #16
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
 800b240:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800b242:	683b      	ldr	r3, [r7, #0]
 800b244:	f003 0303 	and.w	r3, r3, #3
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d006      	beq.n	800b25a <do_memp_free_pool+0x22>
 800b24c:	4b0a      	ldr	r3, [pc, #40]	@ (800b278 <do_memp_free_pool+0x40>)
 800b24e:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800b252:	490a      	ldr	r1, [pc, #40]	@ (800b27c <do_memp_free_pool+0x44>)
 800b254:	480a      	ldr	r0, [pc, #40]	@ (800b280 <do_memp_free_pool+0x48>)
 800b256:	f00a fcf1 	bl	8015c3c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800b25a:	683b      	ldr	r3, [r7, #0]
 800b25c:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	689b      	ldr	r3, [r3, #8]
 800b262:	681a      	ldr	r2, [r3, #0]
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	689b      	ldr	r3, [r3, #8]
 800b26c:	68fa      	ldr	r2, [r7, #12]
 800b26e:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800b270:	bf00      	nop
 800b272:	3710      	adds	r7, #16
 800b274:	46bd      	mov	sp, r7
 800b276:	bd80      	pop	{r7, pc}
 800b278:	0801e48c 	.word	0x0801e48c
 800b27c:	0801e53c 	.word	0x0801e53c
 800b280:	0801e4e0 	.word	0x0801e4e0

0800b284 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800b284:	b580      	push	{r7, lr}
 800b286:	b082      	sub	sp, #8
 800b288:	af00      	add	r7, sp, #0
 800b28a:	6078      	str	r0, [r7, #4]
 800b28c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d106      	bne.n	800b2a2 <memp_free_pool+0x1e>
 800b294:	4b0a      	ldr	r3, [pc, #40]	@ (800b2c0 <memp_free_pool+0x3c>)
 800b296:	f240 1295 	movw	r2, #405	@ 0x195
 800b29a:	490a      	ldr	r1, [pc, #40]	@ (800b2c4 <memp_free_pool+0x40>)
 800b29c:	480a      	ldr	r0, [pc, #40]	@ (800b2c8 <memp_free_pool+0x44>)
 800b29e:	f00a fccd 	bl	8015c3c <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d007      	beq.n	800b2b8 <memp_free_pool+0x34>
 800b2a8:	683b      	ldr	r3, [r7, #0]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d004      	beq.n	800b2b8 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800b2ae:	6839      	ldr	r1, [r7, #0]
 800b2b0:	6878      	ldr	r0, [r7, #4]
 800b2b2:	f7ff ffc1 	bl	800b238 <do_memp_free_pool>
 800b2b6:	e000      	b.n	800b2ba <memp_free_pool+0x36>
    return;
 800b2b8:	bf00      	nop
}
 800b2ba:	3708      	adds	r7, #8
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	bd80      	pop	{r7, pc}
 800b2c0:	0801e48c 	.word	0x0801e48c
 800b2c4:	0801e508 	.word	0x0801e508
 800b2c8:	0801e4e0 	.word	0x0801e4e0

0800b2cc <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800b2cc:	b580      	push	{r7, lr}
 800b2ce:	b082      	sub	sp, #8
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	4603      	mov	r3, r0
 800b2d4:	6039      	str	r1, [r7, #0]
 800b2d6:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800b2d8:	79fb      	ldrb	r3, [r7, #7]
 800b2da:	2b08      	cmp	r3, #8
 800b2dc:	d907      	bls.n	800b2ee <memp_free+0x22>
 800b2de:	4b0c      	ldr	r3, [pc, #48]	@ (800b310 <memp_free+0x44>)
 800b2e0:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800b2e4:	490b      	ldr	r1, [pc, #44]	@ (800b314 <memp_free+0x48>)
 800b2e6:	480c      	ldr	r0, [pc, #48]	@ (800b318 <memp_free+0x4c>)
 800b2e8:	f00a fca8 	bl	8015c3c <iprintf>
 800b2ec:	e00c      	b.n	800b308 <memp_free+0x3c>

  if (mem == NULL) {
 800b2ee:	683b      	ldr	r3, [r7, #0]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d008      	beq.n	800b306 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800b2f4:	79fb      	ldrb	r3, [r7, #7]
 800b2f6:	4a09      	ldr	r2, [pc, #36]	@ (800b31c <memp_free+0x50>)
 800b2f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b2fc:	6839      	ldr	r1, [r7, #0]
 800b2fe:	4618      	mov	r0, r3
 800b300:	f7ff ff9a 	bl	800b238 <do_memp_free_pool>
 800b304:	e000      	b.n	800b308 <memp_free+0x3c>
    return;
 800b306:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800b308:	3708      	adds	r7, #8
 800b30a:	46bd      	mov	sp, r7
 800b30c:	bd80      	pop	{r7, pc}
 800b30e:	bf00      	nop
 800b310:	0801e48c 	.word	0x0801e48c
 800b314:	0801e55c 	.word	0x0801e55c
 800b318:	0801e4e0 	.word	0x0801e4e0
 800b31c:	08020c4c 	.word	0x08020c4c

0800b320 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800b320:	b480      	push	{r7}
 800b322:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800b324:	bf00      	nop
 800b326:	46bd      	mov	sp, r7
 800b328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32c:	4770      	bx	lr
	...

0800b330 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800b330:	b580      	push	{r7, lr}
 800b332:	b086      	sub	sp, #24
 800b334:	af00      	add	r7, sp, #0
 800b336:	60f8      	str	r0, [r7, #12]
 800b338:	60b9      	str	r1, [r7, #8]
 800b33a:	607a      	str	r2, [r7, #4]
 800b33c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d108      	bne.n	800b356 <netif_add+0x26>
 800b344:	4b57      	ldr	r3, [pc, #348]	@ (800b4a4 <netif_add+0x174>)
 800b346:	f240 1227 	movw	r2, #295	@ 0x127
 800b34a:	4957      	ldr	r1, [pc, #348]	@ (800b4a8 <netif_add+0x178>)
 800b34c:	4857      	ldr	r0, [pc, #348]	@ (800b4ac <netif_add+0x17c>)
 800b34e:	f00a fc75 	bl	8015c3c <iprintf>
 800b352:	2300      	movs	r3, #0
 800b354:	e0a2      	b.n	800b49c <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800b356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d108      	bne.n	800b36e <netif_add+0x3e>
 800b35c:	4b51      	ldr	r3, [pc, #324]	@ (800b4a4 <netif_add+0x174>)
 800b35e:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800b362:	4953      	ldr	r1, [pc, #332]	@ (800b4b0 <netif_add+0x180>)
 800b364:	4851      	ldr	r0, [pc, #324]	@ (800b4ac <netif_add+0x17c>)
 800b366:	f00a fc69 	bl	8015c3c <iprintf>
 800b36a:	2300      	movs	r3, #0
 800b36c:	e096      	b.n	800b49c <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800b36e:	68bb      	ldr	r3, [r7, #8]
 800b370:	2b00      	cmp	r3, #0
 800b372:	d101      	bne.n	800b378 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800b374:	4b4f      	ldr	r3, [pc, #316]	@ (800b4b4 <netif_add+0x184>)
 800b376:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d101      	bne.n	800b382 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800b37e:	4b4d      	ldr	r3, [pc, #308]	@ (800b4b4 <netif_add+0x184>)
 800b380:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800b382:	683b      	ldr	r3, [r7, #0]
 800b384:	2b00      	cmp	r3, #0
 800b386:	d101      	bne.n	800b38c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800b388:	4b4a      	ldr	r3, [pc, #296]	@ (800b4b4 <netif_add+0x184>)
 800b38a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	2200      	movs	r2, #0
 800b390:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	2200      	movs	r2, #0
 800b396:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	2200      	movs	r2, #0
 800b39c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	4a45      	ldr	r2, [pc, #276]	@ (800b4b8 <netif_add+0x188>)
 800b3a2:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	2200      	movs	r2, #0
 800b3a8:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	2200      	movs	r2, #0
 800b3b6:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	6a3a      	ldr	r2, [r7, #32]
 800b3bc:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800b3be:	4b3f      	ldr	r3, [pc, #252]	@ (800b4bc <netif_add+0x18c>)
 800b3c0:	781a      	ldrb	r2, [r3, #0]
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b3cc:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800b3ce:	683b      	ldr	r3, [r7, #0]
 800b3d0:	687a      	ldr	r2, [r7, #4]
 800b3d2:	68b9      	ldr	r1, [r7, #8]
 800b3d4:	68f8      	ldr	r0, [r7, #12]
 800b3d6:	f000 f913 	bl	800b600 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800b3da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3dc:	68f8      	ldr	r0, [r7, #12]
 800b3de:	4798      	blx	r3
 800b3e0:	4603      	mov	r3, r0
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d001      	beq.n	800b3ea <netif_add+0xba>
    return NULL;
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	e058      	b.n	800b49c <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b3f0:	2bff      	cmp	r3, #255	@ 0xff
 800b3f2:	d103      	bne.n	800b3fc <netif_add+0xcc>
        netif->num = 0;
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800b400:	4b2f      	ldr	r3, [pc, #188]	@ (800b4c0 <netif_add+0x190>)
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	617b      	str	r3, [r7, #20]
 800b406:	e02b      	b.n	800b460 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800b408:	697a      	ldr	r2, [r7, #20]
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	429a      	cmp	r2, r3
 800b40e:	d106      	bne.n	800b41e <netif_add+0xee>
 800b410:	4b24      	ldr	r3, [pc, #144]	@ (800b4a4 <netif_add+0x174>)
 800b412:	f240 128b 	movw	r2, #395	@ 0x18b
 800b416:	492b      	ldr	r1, [pc, #172]	@ (800b4c4 <netif_add+0x194>)
 800b418:	4824      	ldr	r0, [pc, #144]	@ (800b4ac <netif_add+0x17c>)
 800b41a:	f00a fc0f 	bl	8015c3c <iprintf>
        num_netifs++;
 800b41e:	693b      	ldr	r3, [r7, #16]
 800b420:	3301      	adds	r3, #1
 800b422:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800b424:	693b      	ldr	r3, [r7, #16]
 800b426:	2bff      	cmp	r3, #255	@ 0xff
 800b428:	dd06      	ble.n	800b438 <netif_add+0x108>
 800b42a:	4b1e      	ldr	r3, [pc, #120]	@ (800b4a4 <netif_add+0x174>)
 800b42c:	f240 128d 	movw	r2, #397	@ 0x18d
 800b430:	4925      	ldr	r1, [pc, #148]	@ (800b4c8 <netif_add+0x198>)
 800b432:	481e      	ldr	r0, [pc, #120]	@ (800b4ac <netif_add+0x17c>)
 800b434:	f00a fc02 	bl	8015c3c <iprintf>
        if (netif2->num == netif->num) {
 800b438:	697b      	ldr	r3, [r7, #20]
 800b43a:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b444:	429a      	cmp	r2, r3
 800b446:	d108      	bne.n	800b45a <netif_add+0x12a>
          netif->num++;
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b44e:	3301      	adds	r3, #1
 800b450:	b2da      	uxtb	r2, r3
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 800b458:	e005      	b.n	800b466 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800b45a:	697b      	ldr	r3, [r7, #20]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	617b      	str	r3, [r7, #20]
 800b460:	697b      	ldr	r3, [r7, #20]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d1d0      	bne.n	800b408 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800b466:	697b      	ldr	r3, [r7, #20]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d1be      	bne.n	800b3ea <netif_add+0xba>
  }
  if (netif->num == 254) {
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b472:	2bfe      	cmp	r3, #254	@ 0xfe
 800b474:	d103      	bne.n	800b47e <netif_add+0x14e>
    netif_num = 0;
 800b476:	4b11      	ldr	r3, [pc, #68]	@ (800b4bc <netif_add+0x18c>)
 800b478:	2200      	movs	r2, #0
 800b47a:	701a      	strb	r2, [r3, #0]
 800b47c:	e006      	b.n	800b48c <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b484:	3301      	adds	r3, #1
 800b486:	b2da      	uxtb	r2, r3
 800b488:	4b0c      	ldr	r3, [pc, #48]	@ (800b4bc <netif_add+0x18c>)
 800b48a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800b48c:	4b0c      	ldr	r3, [pc, #48]	@ (800b4c0 <netif_add+0x190>)
 800b48e:	681a      	ldr	r2, [r3, #0]
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800b494:	4a0a      	ldr	r2, [pc, #40]	@ (800b4c0 <netif_add+0x190>)
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800b49a:	68fb      	ldr	r3, [r7, #12]
}
 800b49c:	4618      	mov	r0, r3
 800b49e:	3718      	adds	r7, #24
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	bd80      	pop	{r7, pc}
 800b4a4:	0801e578 	.word	0x0801e578
 800b4a8:	0801e60c 	.word	0x0801e60c
 800b4ac:	0801e5c8 	.word	0x0801e5c8
 800b4b0:	0801e628 	.word	0x0801e628
 800b4b4:	08020cb8 	.word	0x08020cb8
 800b4b8:	0800b8db 	.word	0x0800b8db
 800b4bc:	20009240 	.word	0x20009240
 800b4c0:	20009238 	.word	0x20009238
 800b4c4:	0801e64c 	.word	0x0801e64c
 800b4c8:	0801e660 	.word	0x0801e660

0800b4cc <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800b4cc:	b580      	push	{r7, lr}
 800b4ce:	b082      	sub	sp, #8
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	6078      	str	r0, [r7, #4]
 800b4d4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800b4d6:	6839      	ldr	r1, [r7, #0]
 800b4d8:	6878      	ldr	r0, [r7, #4]
 800b4da:	f002 fcaf 	bl	800de3c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800b4de:	6839      	ldr	r1, [r7, #0]
 800b4e0:	6878      	ldr	r0, [r7, #4]
 800b4e2:	f007 f91f 	bl	8012724 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800b4e6:	bf00      	nop
 800b4e8:	3708      	adds	r7, #8
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	bd80      	pop	{r7, pc}
	...

0800b4f0 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b086      	sub	sp, #24
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	60f8      	str	r0, [r7, #12]
 800b4f8:	60b9      	str	r1, [r7, #8]
 800b4fa:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800b4fc:	68bb      	ldr	r3, [r7, #8]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d106      	bne.n	800b510 <netif_do_set_ipaddr+0x20>
 800b502:	4b1d      	ldr	r3, [pc, #116]	@ (800b578 <netif_do_set_ipaddr+0x88>)
 800b504:	f240 12cb 	movw	r2, #459	@ 0x1cb
 800b508:	491c      	ldr	r1, [pc, #112]	@ (800b57c <netif_do_set_ipaddr+0x8c>)
 800b50a:	481d      	ldr	r0, [pc, #116]	@ (800b580 <netif_do_set_ipaddr+0x90>)
 800b50c:	f00a fb96 	bl	8015c3c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	2b00      	cmp	r3, #0
 800b514:	d106      	bne.n	800b524 <netif_do_set_ipaddr+0x34>
 800b516:	4b18      	ldr	r3, [pc, #96]	@ (800b578 <netif_do_set_ipaddr+0x88>)
 800b518:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800b51c:	4917      	ldr	r1, [pc, #92]	@ (800b57c <netif_do_set_ipaddr+0x8c>)
 800b51e:	4818      	ldr	r0, [pc, #96]	@ (800b580 <netif_do_set_ipaddr+0x90>)
 800b520:	f00a fb8c 	bl	8015c3c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800b524:	68bb      	ldr	r3, [r7, #8]
 800b526:	681a      	ldr	r2, [r3, #0]
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	3304      	adds	r3, #4
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	429a      	cmp	r2, r3
 800b530:	d01c      	beq.n	800b56c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800b532:	68bb      	ldr	r3, [r7, #8]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	3304      	adds	r3, #4
 800b53c:	681a      	ldr	r2, [r3, #0]
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800b542:	f107 0314 	add.w	r3, r7, #20
 800b546:	4619      	mov	r1, r3
 800b548:	6878      	ldr	r0, [r7, #4]
 800b54a:	f7ff ffbf 	bl	800b4cc <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800b54e:	68bb      	ldr	r3, [r7, #8]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d002      	beq.n	800b55a <netif_do_set_ipaddr+0x6a>
 800b554:	68bb      	ldr	r3, [r7, #8]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	e000      	b.n	800b55c <netif_do_set_ipaddr+0x6c>
 800b55a:	2300      	movs	r3, #0
 800b55c:	68fa      	ldr	r2, [r7, #12]
 800b55e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800b560:	2101      	movs	r1, #1
 800b562:	68f8      	ldr	r0, [r7, #12]
 800b564:	f000 f8d2 	bl	800b70c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800b568:	2301      	movs	r3, #1
 800b56a:	e000      	b.n	800b56e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800b56c:	2300      	movs	r3, #0
}
 800b56e:	4618      	mov	r0, r3
 800b570:	3718      	adds	r7, #24
 800b572:	46bd      	mov	sp, r7
 800b574:	bd80      	pop	{r7, pc}
 800b576:	bf00      	nop
 800b578:	0801e578 	.word	0x0801e578
 800b57c:	0801e690 	.word	0x0801e690
 800b580:	0801e5c8 	.word	0x0801e5c8

0800b584 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800b584:	b480      	push	{r7}
 800b586:	b085      	sub	sp, #20
 800b588:	af00      	add	r7, sp, #0
 800b58a:	60f8      	str	r0, [r7, #12]
 800b58c:	60b9      	str	r1, [r7, #8]
 800b58e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800b590:	68bb      	ldr	r3, [r7, #8]
 800b592:	681a      	ldr	r2, [r3, #0]
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	3308      	adds	r3, #8
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	429a      	cmp	r2, r3
 800b59c:	d00a      	beq.n	800b5b4 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800b59e:	68bb      	ldr	r3, [r7, #8]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d002      	beq.n	800b5aa <netif_do_set_netmask+0x26>
 800b5a4:	68bb      	ldr	r3, [r7, #8]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	e000      	b.n	800b5ac <netif_do_set_netmask+0x28>
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	68fa      	ldr	r2, [r7, #12]
 800b5ae:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800b5b0:	2301      	movs	r3, #1
 800b5b2:	e000      	b.n	800b5b6 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800b5b4:	2300      	movs	r3, #0
}
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	3714      	adds	r7, #20
 800b5ba:	46bd      	mov	sp, r7
 800b5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c0:	4770      	bx	lr

0800b5c2 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800b5c2:	b480      	push	{r7}
 800b5c4:	b085      	sub	sp, #20
 800b5c6:	af00      	add	r7, sp, #0
 800b5c8:	60f8      	str	r0, [r7, #12]
 800b5ca:	60b9      	str	r1, [r7, #8]
 800b5cc:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800b5ce:	68bb      	ldr	r3, [r7, #8]
 800b5d0:	681a      	ldr	r2, [r3, #0]
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	330c      	adds	r3, #12
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	429a      	cmp	r2, r3
 800b5da:	d00a      	beq.n	800b5f2 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800b5dc:	68bb      	ldr	r3, [r7, #8]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d002      	beq.n	800b5e8 <netif_do_set_gw+0x26>
 800b5e2:	68bb      	ldr	r3, [r7, #8]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	e000      	b.n	800b5ea <netif_do_set_gw+0x28>
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	68fa      	ldr	r2, [r7, #12]
 800b5ec:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800b5ee:	2301      	movs	r3, #1
 800b5f0:	e000      	b.n	800b5f4 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800b5f2:	2300      	movs	r3, #0
}
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	3714      	adds	r7, #20
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fe:	4770      	bx	lr

0800b600 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800b600:	b580      	push	{r7, lr}
 800b602:	b088      	sub	sp, #32
 800b604:	af00      	add	r7, sp, #0
 800b606:	60f8      	str	r0, [r7, #12]
 800b608:	60b9      	str	r1, [r7, #8]
 800b60a:	607a      	str	r2, [r7, #4]
 800b60c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800b60e:	2300      	movs	r3, #0
 800b610:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800b612:	2300      	movs	r3, #0
 800b614:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800b616:	68bb      	ldr	r3, [r7, #8]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d101      	bne.n	800b620 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800b61c:	4b1c      	ldr	r3, [pc, #112]	@ (800b690 <netif_set_addr+0x90>)
 800b61e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d101      	bne.n	800b62a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800b626:	4b1a      	ldr	r3, [pc, #104]	@ (800b690 <netif_set_addr+0x90>)
 800b628:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800b62a:	683b      	ldr	r3, [r7, #0]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d101      	bne.n	800b634 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800b630:	4b17      	ldr	r3, [pc, #92]	@ (800b690 <netif_set_addr+0x90>)
 800b632:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800b634:	68bb      	ldr	r3, [r7, #8]
 800b636:	2b00      	cmp	r3, #0
 800b638:	d003      	beq.n	800b642 <netif_set_addr+0x42>
 800b63a:	68bb      	ldr	r3, [r7, #8]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d101      	bne.n	800b646 <netif_set_addr+0x46>
 800b642:	2301      	movs	r3, #1
 800b644:	e000      	b.n	800b648 <netif_set_addr+0x48>
 800b646:	2300      	movs	r3, #0
 800b648:	617b      	str	r3, [r7, #20]
  if (remove) {
 800b64a:	697b      	ldr	r3, [r7, #20]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d006      	beq.n	800b65e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b650:	f107 0310 	add.w	r3, r7, #16
 800b654:	461a      	mov	r2, r3
 800b656:	68b9      	ldr	r1, [r7, #8]
 800b658:	68f8      	ldr	r0, [r7, #12]
 800b65a:	f7ff ff49 	bl	800b4f0 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800b65e:	69fa      	ldr	r2, [r7, #28]
 800b660:	6879      	ldr	r1, [r7, #4]
 800b662:	68f8      	ldr	r0, [r7, #12]
 800b664:	f7ff ff8e 	bl	800b584 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800b668:	69ba      	ldr	r2, [r7, #24]
 800b66a:	6839      	ldr	r1, [r7, #0]
 800b66c:	68f8      	ldr	r0, [r7, #12]
 800b66e:	f7ff ffa8 	bl	800b5c2 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800b672:	697b      	ldr	r3, [r7, #20]
 800b674:	2b00      	cmp	r3, #0
 800b676:	d106      	bne.n	800b686 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b678:	f107 0310 	add.w	r3, r7, #16
 800b67c:	461a      	mov	r2, r3
 800b67e:	68b9      	ldr	r1, [r7, #8]
 800b680:	68f8      	ldr	r0, [r7, #12]
 800b682:	f7ff ff35 	bl	800b4f0 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800b686:	bf00      	nop
 800b688:	3720      	adds	r7, #32
 800b68a:	46bd      	mov	sp, r7
 800b68c:	bd80      	pop	{r7, pc}
 800b68e:	bf00      	nop
 800b690:	08020cb8 	.word	0x08020cb8

0800b694 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800b694:	b480      	push	{r7}
 800b696:	b083      	sub	sp, #12
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800b69c:	4a04      	ldr	r2, [pc, #16]	@ (800b6b0 <netif_set_default+0x1c>)
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800b6a2:	bf00      	nop
 800b6a4:	370c      	adds	r7, #12
 800b6a6:	46bd      	mov	sp, r7
 800b6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ac:	4770      	bx	lr
 800b6ae:	bf00      	nop
 800b6b0:	2000923c 	.word	0x2000923c

0800b6b4 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b082      	sub	sp, #8
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d107      	bne.n	800b6d2 <netif_set_up+0x1e>
 800b6c2:	4b0f      	ldr	r3, [pc, #60]	@ (800b700 <netif_set_up+0x4c>)
 800b6c4:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800b6c8:	490e      	ldr	r1, [pc, #56]	@ (800b704 <netif_set_up+0x50>)
 800b6ca:	480f      	ldr	r0, [pc, #60]	@ (800b708 <netif_set_up+0x54>)
 800b6cc:	f00a fab6 	bl	8015c3c <iprintf>
 800b6d0:	e013      	b.n	800b6fa <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b6d8:	f003 0301 	and.w	r3, r3, #1
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d10c      	bne.n	800b6fa <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b6e6:	f043 0301 	orr.w	r3, r3, #1
 800b6ea:	b2da      	uxtb	r2, r3
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b6f2:	2103      	movs	r1, #3
 800b6f4:	6878      	ldr	r0, [r7, #4]
 800b6f6:	f000 f809 	bl	800b70c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800b6fa:	3708      	adds	r7, #8
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	bd80      	pop	{r7, pc}
 800b700:	0801e578 	.word	0x0801e578
 800b704:	0801e700 	.word	0x0801e700
 800b708:	0801e5c8 	.word	0x0801e5c8

0800b70c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800b70c:	b580      	push	{r7, lr}
 800b70e:	b082      	sub	sp, #8
 800b710:	af00      	add	r7, sp, #0
 800b712:	6078      	str	r0, [r7, #4]
 800b714:	460b      	mov	r3, r1
 800b716:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d106      	bne.n	800b72c <netif_issue_reports+0x20>
 800b71e:	4b18      	ldr	r3, [pc, #96]	@ (800b780 <netif_issue_reports+0x74>)
 800b720:	f240 326d 	movw	r2, #877	@ 0x36d
 800b724:	4917      	ldr	r1, [pc, #92]	@ (800b784 <netif_issue_reports+0x78>)
 800b726:	4818      	ldr	r0, [pc, #96]	@ (800b788 <netif_issue_reports+0x7c>)
 800b728:	f00a fa88 	bl	8015c3c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b732:	f003 0304 	and.w	r3, r3, #4
 800b736:	2b00      	cmp	r3, #0
 800b738:	d01e      	beq.n	800b778 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b740:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b744:	2b00      	cmp	r3, #0
 800b746:	d017      	beq.n	800b778 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b748:	78fb      	ldrb	r3, [r7, #3]
 800b74a:	f003 0301 	and.w	r3, r3, #1
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d013      	beq.n	800b77a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	3304      	adds	r3, #4
 800b756:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d00e      	beq.n	800b77a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b762:	f003 0308 	and.w	r3, r3, #8
 800b766:	2b00      	cmp	r3, #0
 800b768:	d007      	beq.n	800b77a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	3304      	adds	r3, #4
 800b76e:	4619      	mov	r1, r3
 800b770:	6878      	ldr	r0, [r7, #4]
 800b772:	f007 ff41 	bl	80135f8 <etharp_request>
 800b776:	e000      	b.n	800b77a <netif_issue_reports+0x6e>
    return;
 800b778:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800b77a:	3708      	adds	r7, #8
 800b77c:	46bd      	mov	sp, r7
 800b77e:	bd80      	pop	{r7, pc}
 800b780:	0801e578 	.word	0x0801e578
 800b784:	0801e71c 	.word	0x0801e71c
 800b788:	0801e5c8 	.word	0x0801e5c8

0800b78c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800b78c:	b580      	push	{r7, lr}
 800b78e:	b082      	sub	sp, #8
 800b790:	af00      	add	r7, sp, #0
 800b792:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	2b00      	cmp	r3, #0
 800b798:	d107      	bne.n	800b7aa <netif_set_down+0x1e>
 800b79a:	4b12      	ldr	r3, [pc, #72]	@ (800b7e4 <netif_set_down+0x58>)
 800b79c:	f240 329b 	movw	r2, #923	@ 0x39b
 800b7a0:	4911      	ldr	r1, [pc, #68]	@ (800b7e8 <netif_set_down+0x5c>)
 800b7a2:	4812      	ldr	r0, [pc, #72]	@ (800b7ec <netif_set_down+0x60>)
 800b7a4:	f00a fa4a 	bl	8015c3c <iprintf>
 800b7a8:	e019      	b.n	800b7de <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b7b0:	f003 0301 	and.w	r3, r3, #1
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d012      	beq.n	800b7de <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b7be:	f023 0301 	bic.w	r3, r3, #1
 800b7c2:	b2da      	uxtb	r2, r3
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b7d0:	f003 0308 	and.w	r3, r3, #8
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d002      	beq.n	800b7de <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800b7d8:	6878      	ldr	r0, [r7, #4]
 800b7da:	f007 facb 	bl	8012d74 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800b7de:	3708      	adds	r7, #8
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	bd80      	pop	{r7, pc}
 800b7e4:	0801e578 	.word	0x0801e578
 800b7e8:	0801e740 	.word	0x0801e740
 800b7ec:	0801e5c8 	.word	0x0801e5c8

0800b7f0 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b082      	sub	sp, #8
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d107      	bne.n	800b80e <netif_set_link_up+0x1e>
 800b7fe:	4b13      	ldr	r3, [pc, #76]	@ (800b84c <netif_set_link_up+0x5c>)
 800b800:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800b804:	4912      	ldr	r1, [pc, #72]	@ (800b850 <netif_set_link_up+0x60>)
 800b806:	4813      	ldr	r0, [pc, #76]	@ (800b854 <netif_set_link_up+0x64>)
 800b808:	f00a fa18 	bl	8015c3c <iprintf>
 800b80c:	e01b      	b.n	800b846 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b814:	f003 0304 	and.w	r3, r3, #4
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d114      	bne.n	800b846 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b822:	f043 0304 	orr.w	r3, r3, #4
 800b826:	b2da      	uxtb	r2, r3
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b82e:	2103      	movs	r1, #3
 800b830:	6878      	ldr	r0, [r7, #4]
 800b832:	f7ff ff6b 	bl	800b70c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	69db      	ldr	r3, [r3, #28]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d003      	beq.n	800b846 <netif_set_link_up+0x56>
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	69db      	ldr	r3, [r3, #28]
 800b842:	6878      	ldr	r0, [r7, #4]
 800b844:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800b846:	3708      	adds	r7, #8
 800b848:	46bd      	mov	sp, r7
 800b84a:	bd80      	pop	{r7, pc}
 800b84c:	0801e578 	.word	0x0801e578
 800b850:	0801e760 	.word	0x0801e760
 800b854:	0801e5c8 	.word	0x0801e5c8

0800b858 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800b858:	b580      	push	{r7, lr}
 800b85a:	b082      	sub	sp, #8
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	2b00      	cmp	r3, #0
 800b864:	d107      	bne.n	800b876 <netif_set_link_down+0x1e>
 800b866:	4b11      	ldr	r3, [pc, #68]	@ (800b8ac <netif_set_link_down+0x54>)
 800b868:	f240 4206 	movw	r2, #1030	@ 0x406
 800b86c:	4910      	ldr	r1, [pc, #64]	@ (800b8b0 <netif_set_link_down+0x58>)
 800b86e:	4811      	ldr	r0, [pc, #68]	@ (800b8b4 <netif_set_link_down+0x5c>)
 800b870:	f00a f9e4 	bl	8015c3c <iprintf>
 800b874:	e017      	b.n	800b8a6 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b87c:	f003 0304 	and.w	r3, r3, #4
 800b880:	2b00      	cmp	r3, #0
 800b882:	d010      	beq.n	800b8a6 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b88a:	f023 0304 	bic.w	r3, r3, #4
 800b88e:	b2da      	uxtb	r2, r3
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	69db      	ldr	r3, [r3, #28]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d003      	beq.n	800b8a6 <netif_set_link_down+0x4e>
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	69db      	ldr	r3, [r3, #28]
 800b8a2:	6878      	ldr	r0, [r7, #4]
 800b8a4:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800b8a6:	3708      	adds	r7, #8
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	bd80      	pop	{r7, pc}
 800b8ac:	0801e578 	.word	0x0801e578
 800b8b0:	0801e784 	.word	0x0801e784
 800b8b4:	0801e5c8 	.word	0x0801e5c8

0800b8b8 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800b8b8:	b480      	push	{r7}
 800b8ba:	b083      	sub	sp, #12
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	6078      	str	r0, [r7, #4]
 800b8c0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d002      	beq.n	800b8ce <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	683a      	ldr	r2, [r7, #0]
 800b8cc:	61da      	str	r2, [r3, #28]
  }
}
 800b8ce:	bf00      	nop
 800b8d0:	370c      	adds	r7, #12
 800b8d2:	46bd      	mov	sp, r7
 800b8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d8:	4770      	bx	lr

0800b8da <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800b8da:	b480      	push	{r7}
 800b8dc:	b085      	sub	sp, #20
 800b8de:	af00      	add	r7, sp, #0
 800b8e0:	60f8      	str	r0, [r7, #12]
 800b8e2:	60b9      	str	r1, [r7, #8]
 800b8e4:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800b8e6:	f06f 030b 	mvn.w	r3, #11
}
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	3714      	adds	r7, #20
 800b8ee:	46bd      	mov	sp, r7
 800b8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f4:	4770      	bx	lr
	...

0800b8f8 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800b8f8:	b480      	push	{r7}
 800b8fa:	b085      	sub	sp, #20
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	4603      	mov	r3, r0
 800b900:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800b902:	79fb      	ldrb	r3, [r7, #7]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d013      	beq.n	800b930 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800b908:	4b0d      	ldr	r3, [pc, #52]	@ (800b940 <netif_get_by_index+0x48>)
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	60fb      	str	r3, [r7, #12]
 800b90e:	e00c      	b.n	800b92a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b916:	3301      	adds	r3, #1
 800b918:	b2db      	uxtb	r3, r3
 800b91a:	79fa      	ldrb	r2, [r7, #7]
 800b91c:	429a      	cmp	r2, r3
 800b91e:	d101      	bne.n	800b924 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	e006      	b.n	800b932 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	60fb      	str	r3, [r7, #12]
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d1ef      	bne.n	800b910 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800b930:	2300      	movs	r3, #0
}
 800b932:	4618      	mov	r0, r3
 800b934:	3714      	adds	r7, #20
 800b936:	46bd      	mov	sp, r7
 800b938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93c:	4770      	bx	lr
 800b93e:	bf00      	nop
 800b940:	20009238 	.word	0x20009238

0800b944 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800b944:	b580      	push	{r7, lr}
 800b946:	b082      	sub	sp, #8
 800b948:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800b94a:	4b0c      	ldr	r3, [pc, #48]	@ (800b97c <pbuf_free_ooseq+0x38>)
 800b94c:	2200      	movs	r2, #0
 800b94e:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b950:	4b0b      	ldr	r3, [pc, #44]	@ (800b980 <pbuf_free_ooseq+0x3c>)
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	607b      	str	r3, [r7, #4]
 800b956:	e00a      	b.n	800b96e <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d003      	beq.n	800b968 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800b960:	6878      	ldr	r0, [r7, #4]
 800b962:	f002 faa9 	bl	800deb8 <tcp_free_ooseq>
      return;
 800b966:	e005      	b.n	800b974 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	68db      	ldr	r3, [r3, #12]
 800b96c:	607b      	str	r3, [r7, #4]
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	2b00      	cmp	r3, #0
 800b972:	d1f1      	bne.n	800b958 <pbuf_free_ooseq+0x14>
    }
  }
}
 800b974:	3708      	adds	r7, #8
 800b976:	46bd      	mov	sp, r7
 800b978:	bd80      	pop	{r7, pc}
 800b97a:	bf00      	nop
 800b97c:	20009241 	.word	0x20009241
 800b980:	20009250 	.word	0x20009250

0800b984 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800b984:	b480      	push	{r7}
 800b986:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800b988:	4b03      	ldr	r3, [pc, #12]	@ (800b998 <pbuf_pool_is_empty+0x14>)
 800b98a:	2201      	movs	r2, #1
 800b98c:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800b98e:	bf00      	nop
 800b990:	46bd      	mov	sp, r7
 800b992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b996:	4770      	bx	lr
 800b998:	20009241 	.word	0x20009241

0800b99c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800b99c:	b480      	push	{r7}
 800b99e:	b085      	sub	sp, #20
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	60f8      	str	r0, [r7, #12]
 800b9a4:	60b9      	str	r1, [r7, #8]
 800b9a6:	4611      	mov	r1, r2
 800b9a8:	461a      	mov	r2, r3
 800b9aa:	460b      	mov	r3, r1
 800b9ac:	80fb      	strh	r3, [r7, #6]
 800b9ae:	4613      	mov	r3, r2
 800b9b0:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	2200      	movs	r2, #0
 800b9b6:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	68ba      	ldr	r2, [r7, #8]
 800b9bc:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	88fa      	ldrh	r2, [r7, #6]
 800b9c2:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	88ba      	ldrh	r2, [r7, #4]
 800b9c8:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800b9ca:	8b3b      	ldrh	r3, [r7, #24]
 800b9cc:	b2da      	uxtb	r2, r3
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	7f3a      	ldrb	r2, [r7, #28]
 800b9d6:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	2201      	movs	r2, #1
 800b9dc:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	2200      	movs	r2, #0
 800b9e2:	73da      	strb	r2, [r3, #15]
}
 800b9e4:	bf00      	nop
 800b9e6:	3714      	adds	r7, #20
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ee:	4770      	bx	lr

0800b9f0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800b9f0:	b580      	push	{r7, lr}
 800b9f2:	b08c      	sub	sp, #48	@ 0x30
 800b9f4:	af02      	add	r7, sp, #8
 800b9f6:	4603      	mov	r3, r0
 800b9f8:	71fb      	strb	r3, [r7, #7]
 800b9fa:	460b      	mov	r3, r1
 800b9fc:	80bb      	strh	r3, [r7, #4]
 800b9fe:	4613      	mov	r3, r2
 800ba00:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800ba02:	79fb      	ldrb	r3, [r7, #7]
 800ba04:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800ba06:	887b      	ldrh	r3, [r7, #2]
 800ba08:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800ba0c:	d07f      	beq.n	800bb0e <pbuf_alloc+0x11e>
 800ba0e:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800ba12:	f300 80c8 	bgt.w	800bba6 <pbuf_alloc+0x1b6>
 800ba16:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800ba1a:	d010      	beq.n	800ba3e <pbuf_alloc+0x4e>
 800ba1c:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800ba20:	f300 80c1 	bgt.w	800bba6 <pbuf_alloc+0x1b6>
 800ba24:	2b01      	cmp	r3, #1
 800ba26:	d002      	beq.n	800ba2e <pbuf_alloc+0x3e>
 800ba28:	2b41      	cmp	r3, #65	@ 0x41
 800ba2a:	f040 80bc 	bne.w	800bba6 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800ba2e:	887a      	ldrh	r2, [r7, #2]
 800ba30:	88bb      	ldrh	r3, [r7, #4]
 800ba32:	4619      	mov	r1, r3
 800ba34:	2000      	movs	r0, #0
 800ba36:	f000 f8d1 	bl	800bbdc <pbuf_alloc_reference>
 800ba3a:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 800ba3c:	e0bd      	b.n	800bbba <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800ba3e:	2300      	movs	r3, #0
 800ba40:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800ba42:	2300      	movs	r3, #0
 800ba44:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800ba46:	88bb      	ldrh	r3, [r7, #4]
 800ba48:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800ba4a:	2008      	movs	r0, #8
 800ba4c:	f7ff fbce 	bl	800b1ec <memp_malloc>
 800ba50:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800ba52:	693b      	ldr	r3, [r7, #16]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d109      	bne.n	800ba6c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800ba58:	f7ff ff94 	bl	800b984 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800ba5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d002      	beq.n	800ba68 <pbuf_alloc+0x78>
            pbuf_free(p);
 800ba62:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ba64:	f000 faa8 	bl	800bfb8 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800ba68:	2300      	movs	r3, #0
 800ba6a:	e0a7      	b.n	800bbbc <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800ba6c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ba6e:	3303      	adds	r3, #3
 800ba70:	b29b      	uxth	r3, r3
 800ba72:	f023 0303 	bic.w	r3, r3, #3
 800ba76:	b29b      	uxth	r3, r3
 800ba78:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 800ba7c:	b29b      	uxth	r3, r3
 800ba7e:	8b7a      	ldrh	r2, [r7, #26]
 800ba80:	4293      	cmp	r3, r2
 800ba82:	bf28      	it	cs
 800ba84:	4613      	movcs	r3, r2
 800ba86:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800ba88:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ba8a:	3310      	adds	r3, #16
 800ba8c:	693a      	ldr	r2, [r7, #16]
 800ba8e:	4413      	add	r3, r2
 800ba90:	3303      	adds	r3, #3
 800ba92:	f023 0303 	bic.w	r3, r3, #3
 800ba96:	4618      	mov	r0, r3
 800ba98:	89f9      	ldrh	r1, [r7, #14]
 800ba9a:	8b7a      	ldrh	r2, [r7, #26]
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	9301      	str	r3, [sp, #4]
 800baa0:	887b      	ldrh	r3, [r7, #2]
 800baa2:	9300      	str	r3, [sp, #0]
 800baa4:	460b      	mov	r3, r1
 800baa6:	4601      	mov	r1, r0
 800baa8:	6938      	ldr	r0, [r7, #16]
 800baaa:	f7ff ff77 	bl	800b99c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800baae:	693b      	ldr	r3, [r7, #16]
 800bab0:	685b      	ldr	r3, [r3, #4]
 800bab2:	f003 0303 	and.w	r3, r3, #3
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d006      	beq.n	800bac8 <pbuf_alloc+0xd8>
 800baba:	4b42      	ldr	r3, [pc, #264]	@ (800bbc4 <pbuf_alloc+0x1d4>)
 800babc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800bac0:	4941      	ldr	r1, [pc, #260]	@ (800bbc8 <pbuf_alloc+0x1d8>)
 800bac2:	4842      	ldr	r0, [pc, #264]	@ (800bbcc <pbuf_alloc+0x1dc>)
 800bac4:	f00a f8ba 	bl	8015c3c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800bac8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800baca:	3303      	adds	r3, #3
 800bacc:	f023 0303 	bic.w	r3, r3, #3
 800bad0:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 800bad4:	d106      	bne.n	800bae4 <pbuf_alloc+0xf4>
 800bad6:	4b3b      	ldr	r3, [pc, #236]	@ (800bbc4 <pbuf_alloc+0x1d4>)
 800bad8:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800badc:	493c      	ldr	r1, [pc, #240]	@ (800bbd0 <pbuf_alloc+0x1e0>)
 800bade:	483b      	ldr	r0, [pc, #236]	@ (800bbcc <pbuf_alloc+0x1dc>)
 800bae0:	f00a f8ac 	bl	8015c3c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800bae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d102      	bne.n	800baf0 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800baea:	693b      	ldr	r3, [r7, #16]
 800baec:	627b      	str	r3, [r7, #36]	@ 0x24
 800baee:	e002      	b.n	800baf6 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800baf0:	69fb      	ldr	r3, [r7, #28]
 800baf2:	693a      	ldr	r2, [r7, #16]
 800baf4:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800baf6:	693b      	ldr	r3, [r7, #16]
 800baf8:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800bafa:	8b7a      	ldrh	r2, [r7, #26]
 800bafc:	89fb      	ldrh	r3, [r7, #14]
 800bafe:	1ad3      	subs	r3, r2, r3
 800bb00:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800bb02:	2300      	movs	r3, #0
 800bb04:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800bb06:	8b7b      	ldrh	r3, [r7, #26]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d19e      	bne.n	800ba4a <pbuf_alloc+0x5a>
      break;
 800bb0c:	e055      	b.n	800bbba <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800bb0e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800bb10:	3303      	adds	r3, #3
 800bb12:	b29b      	uxth	r3, r3
 800bb14:	f023 0303 	bic.w	r3, r3, #3
 800bb18:	b29a      	uxth	r2, r3
 800bb1a:	88bb      	ldrh	r3, [r7, #4]
 800bb1c:	3303      	adds	r3, #3
 800bb1e:	b29b      	uxth	r3, r3
 800bb20:	f023 0303 	bic.w	r3, r3, #3
 800bb24:	b29b      	uxth	r3, r3
 800bb26:	4413      	add	r3, r2
 800bb28:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800bb2a:	8b3b      	ldrh	r3, [r7, #24]
 800bb2c:	3310      	adds	r3, #16
 800bb2e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800bb30:	8b3a      	ldrh	r2, [r7, #24]
 800bb32:	88bb      	ldrh	r3, [r7, #4]
 800bb34:	3303      	adds	r3, #3
 800bb36:	f023 0303 	bic.w	r3, r3, #3
 800bb3a:	429a      	cmp	r2, r3
 800bb3c:	d306      	bcc.n	800bb4c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800bb3e:	8afa      	ldrh	r2, [r7, #22]
 800bb40:	88bb      	ldrh	r3, [r7, #4]
 800bb42:	3303      	adds	r3, #3
 800bb44:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800bb48:	429a      	cmp	r2, r3
 800bb4a:	d201      	bcs.n	800bb50 <pbuf_alloc+0x160>
        return NULL;
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	e035      	b.n	800bbbc <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800bb50:	8afb      	ldrh	r3, [r7, #22]
 800bb52:	4618      	mov	r0, r3
 800bb54:	f7ff f9ba 	bl	800aecc <mem_malloc>
 800bb58:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800bb5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d101      	bne.n	800bb64 <pbuf_alloc+0x174>
        return NULL;
 800bb60:	2300      	movs	r3, #0
 800bb62:	e02b      	b.n	800bbbc <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800bb64:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800bb66:	3310      	adds	r3, #16
 800bb68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bb6a:	4413      	add	r3, r2
 800bb6c:	3303      	adds	r3, #3
 800bb6e:	f023 0303 	bic.w	r3, r3, #3
 800bb72:	4618      	mov	r0, r3
 800bb74:	88b9      	ldrh	r1, [r7, #4]
 800bb76:	88ba      	ldrh	r2, [r7, #4]
 800bb78:	2300      	movs	r3, #0
 800bb7a:	9301      	str	r3, [sp, #4]
 800bb7c:	887b      	ldrh	r3, [r7, #2]
 800bb7e:	9300      	str	r3, [sp, #0]
 800bb80:	460b      	mov	r3, r1
 800bb82:	4601      	mov	r1, r0
 800bb84:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800bb86:	f7ff ff09 	bl	800b99c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800bb8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb8c:	685b      	ldr	r3, [r3, #4]
 800bb8e:	f003 0303 	and.w	r3, r3, #3
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d010      	beq.n	800bbb8 <pbuf_alloc+0x1c8>
 800bb96:	4b0b      	ldr	r3, [pc, #44]	@ (800bbc4 <pbuf_alloc+0x1d4>)
 800bb98:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800bb9c:	490d      	ldr	r1, [pc, #52]	@ (800bbd4 <pbuf_alloc+0x1e4>)
 800bb9e:	480b      	ldr	r0, [pc, #44]	@ (800bbcc <pbuf_alloc+0x1dc>)
 800bba0:	f00a f84c 	bl	8015c3c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800bba4:	e008      	b.n	800bbb8 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800bba6:	4b07      	ldr	r3, [pc, #28]	@ (800bbc4 <pbuf_alloc+0x1d4>)
 800bba8:	f240 1227 	movw	r2, #295	@ 0x127
 800bbac:	490a      	ldr	r1, [pc, #40]	@ (800bbd8 <pbuf_alloc+0x1e8>)
 800bbae:	4807      	ldr	r0, [pc, #28]	@ (800bbcc <pbuf_alloc+0x1dc>)
 800bbb0:	f00a f844 	bl	8015c3c <iprintf>
      return NULL;
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	e001      	b.n	800bbbc <pbuf_alloc+0x1cc>
      break;
 800bbb8:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800bbba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	3728      	adds	r7, #40	@ 0x28
 800bbc0:	46bd      	mov	sp, r7
 800bbc2:	bd80      	pop	{r7, pc}
 800bbc4:	0801e7a8 	.word	0x0801e7a8
 800bbc8:	0801e7d8 	.word	0x0801e7d8
 800bbcc:	0801e808 	.word	0x0801e808
 800bbd0:	0801e830 	.word	0x0801e830
 800bbd4:	0801e864 	.word	0x0801e864
 800bbd8:	0801e890 	.word	0x0801e890

0800bbdc <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800bbdc:	b580      	push	{r7, lr}
 800bbde:	b086      	sub	sp, #24
 800bbe0:	af02      	add	r7, sp, #8
 800bbe2:	6078      	str	r0, [r7, #4]
 800bbe4:	460b      	mov	r3, r1
 800bbe6:	807b      	strh	r3, [r7, #2]
 800bbe8:	4613      	mov	r3, r2
 800bbea:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800bbec:	883b      	ldrh	r3, [r7, #0]
 800bbee:	2b41      	cmp	r3, #65	@ 0x41
 800bbf0:	d009      	beq.n	800bc06 <pbuf_alloc_reference+0x2a>
 800bbf2:	883b      	ldrh	r3, [r7, #0]
 800bbf4:	2b01      	cmp	r3, #1
 800bbf6:	d006      	beq.n	800bc06 <pbuf_alloc_reference+0x2a>
 800bbf8:	4b0f      	ldr	r3, [pc, #60]	@ (800bc38 <pbuf_alloc_reference+0x5c>)
 800bbfa:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800bbfe:	490f      	ldr	r1, [pc, #60]	@ (800bc3c <pbuf_alloc_reference+0x60>)
 800bc00:	480f      	ldr	r0, [pc, #60]	@ (800bc40 <pbuf_alloc_reference+0x64>)
 800bc02:	f00a f81b 	bl	8015c3c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800bc06:	2007      	movs	r0, #7
 800bc08:	f7ff faf0 	bl	800b1ec <memp_malloc>
 800bc0c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d101      	bne.n	800bc18 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800bc14:	2300      	movs	r3, #0
 800bc16:	e00b      	b.n	800bc30 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800bc18:	8879      	ldrh	r1, [r7, #2]
 800bc1a:	887a      	ldrh	r2, [r7, #2]
 800bc1c:	2300      	movs	r3, #0
 800bc1e:	9301      	str	r3, [sp, #4]
 800bc20:	883b      	ldrh	r3, [r7, #0]
 800bc22:	9300      	str	r3, [sp, #0]
 800bc24:	460b      	mov	r3, r1
 800bc26:	6879      	ldr	r1, [r7, #4]
 800bc28:	68f8      	ldr	r0, [r7, #12]
 800bc2a:	f7ff feb7 	bl	800b99c <pbuf_init_alloced_pbuf>
  return p;
 800bc2e:	68fb      	ldr	r3, [r7, #12]
}
 800bc30:	4618      	mov	r0, r3
 800bc32:	3710      	adds	r7, #16
 800bc34:	46bd      	mov	sp, r7
 800bc36:	bd80      	pop	{r7, pc}
 800bc38:	0801e7a8 	.word	0x0801e7a8
 800bc3c:	0801e8ac 	.word	0x0801e8ac
 800bc40:	0801e808 	.word	0x0801e808

0800bc44 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800bc44:	b580      	push	{r7, lr}
 800bc46:	b088      	sub	sp, #32
 800bc48:	af02      	add	r7, sp, #8
 800bc4a:	607b      	str	r3, [r7, #4]
 800bc4c:	4603      	mov	r3, r0
 800bc4e:	73fb      	strb	r3, [r7, #15]
 800bc50:	460b      	mov	r3, r1
 800bc52:	81bb      	strh	r3, [r7, #12]
 800bc54:	4613      	mov	r3, r2
 800bc56:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800bc58:	7bfb      	ldrb	r3, [r7, #15]
 800bc5a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800bc5c:	8a7b      	ldrh	r3, [r7, #18]
 800bc5e:	3303      	adds	r3, #3
 800bc60:	f023 0203 	bic.w	r2, r3, #3
 800bc64:	89bb      	ldrh	r3, [r7, #12]
 800bc66:	441a      	add	r2, r3
 800bc68:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bc6a:	429a      	cmp	r2, r3
 800bc6c:	d901      	bls.n	800bc72 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800bc6e:	2300      	movs	r3, #0
 800bc70:	e018      	b.n	800bca4 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800bc72:	6a3b      	ldr	r3, [r7, #32]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d007      	beq.n	800bc88 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800bc78:	8a7b      	ldrh	r3, [r7, #18]
 800bc7a:	3303      	adds	r3, #3
 800bc7c:	f023 0303 	bic.w	r3, r3, #3
 800bc80:	6a3a      	ldr	r2, [r7, #32]
 800bc82:	4413      	add	r3, r2
 800bc84:	617b      	str	r3, [r7, #20]
 800bc86:	e001      	b.n	800bc8c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800bc88:	2300      	movs	r3, #0
 800bc8a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800bc8c:	6878      	ldr	r0, [r7, #4]
 800bc8e:	89b9      	ldrh	r1, [r7, #12]
 800bc90:	89ba      	ldrh	r2, [r7, #12]
 800bc92:	2302      	movs	r3, #2
 800bc94:	9301      	str	r3, [sp, #4]
 800bc96:	897b      	ldrh	r3, [r7, #10]
 800bc98:	9300      	str	r3, [sp, #0]
 800bc9a:	460b      	mov	r3, r1
 800bc9c:	6979      	ldr	r1, [r7, #20]
 800bc9e:	f7ff fe7d 	bl	800b99c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800bca2:	687b      	ldr	r3, [r7, #4]
}
 800bca4:	4618      	mov	r0, r3
 800bca6:	3718      	adds	r7, #24
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	bd80      	pop	{r7, pc}

0800bcac <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800bcac:	b580      	push	{r7, lr}
 800bcae:	b084      	sub	sp, #16
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]
 800bcb4:	460b      	mov	r3, r1
 800bcb6:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d106      	bne.n	800bccc <pbuf_realloc+0x20>
 800bcbe:	4b3a      	ldr	r3, [pc, #232]	@ (800bda8 <pbuf_realloc+0xfc>)
 800bcc0:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800bcc4:	4939      	ldr	r1, [pc, #228]	@ (800bdac <pbuf_realloc+0x100>)
 800bcc6:	483a      	ldr	r0, [pc, #232]	@ (800bdb0 <pbuf_realloc+0x104>)
 800bcc8:	f009 ffb8 	bl	8015c3c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	891b      	ldrh	r3, [r3, #8]
 800bcd0:	887a      	ldrh	r2, [r7, #2]
 800bcd2:	429a      	cmp	r2, r3
 800bcd4:	d263      	bcs.n	800bd9e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	891a      	ldrh	r2, [r3, #8]
 800bcda:	887b      	ldrh	r3, [r7, #2]
 800bcdc:	1ad3      	subs	r3, r2, r3
 800bcde:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800bce0:	887b      	ldrh	r3, [r7, #2]
 800bce2:	817b      	strh	r3, [r7, #10]
  q = p;
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800bce8:	e018      	b.n	800bd1c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	895b      	ldrh	r3, [r3, #10]
 800bcee:	897a      	ldrh	r2, [r7, #10]
 800bcf0:	1ad3      	subs	r3, r2, r3
 800bcf2:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	891a      	ldrh	r2, [r3, #8]
 800bcf8:	893b      	ldrh	r3, [r7, #8]
 800bcfa:	1ad3      	subs	r3, r2, r3
 800bcfc:	b29a      	uxth	r2, r3
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d106      	bne.n	800bd1c <pbuf_realloc+0x70>
 800bd0e:	4b26      	ldr	r3, [pc, #152]	@ (800bda8 <pbuf_realloc+0xfc>)
 800bd10:	f240 12af 	movw	r2, #431	@ 0x1af
 800bd14:	4927      	ldr	r1, [pc, #156]	@ (800bdb4 <pbuf_realloc+0x108>)
 800bd16:	4826      	ldr	r0, [pc, #152]	@ (800bdb0 <pbuf_realloc+0x104>)
 800bd18:	f009 ff90 	bl	8015c3c <iprintf>
  while (rem_len > q->len) {
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	895b      	ldrh	r3, [r3, #10]
 800bd20:	897a      	ldrh	r2, [r7, #10]
 800bd22:	429a      	cmp	r2, r3
 800bd24:	d8e1      	bhi.n	800bcea <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	7b1b      	ldrb	r3, [r3, #12]
 800bd2a:	f003 030f 	and.w	r3, r3, #15
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d121      	bne.n	800bd76 <pbuf_realloc+0xca>
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	895b      	ldrh	r3, [r3, #10]
 800bd36:	897a      	ldrh	r2, [r7, #10]
 800bd38:	429a      	cmp	r2, r3
 800bd3a:	d01c      	beq.n	800bd76 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	7b5b      	ldrb	r3, [r3, #13]
 800bd40:	f003 0302 	and.w	r3, r3, #2
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d116      	bne.n	800bd76 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	685a      	ldr	r2, [r3, #4]
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	1ad3      	subs	r3, r2, r3
 800bd50:	b29a      	uxth	r2, r3
 800bd52:	897b      	ldrh	r3, [r7, #10]
 800bd54:	4413      	add	r3, r2
 800bd56:	b29b      	uxth	r3, r3
 800bd58:	4619      	mov	r1, r3
 800bd5a:	68f8      	ldr	r0, [r7, #12]
 800bd5c:	f7fe ffba 	bl	800acd4 <mem_trim>
 800bd60:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d106      	bne.n	800bd76 <pbuf_realloc+0xca>
 800bd68:	4b0f      	ldr	r3, [pc, #60]	@ (800bda8 <pbuf_realloc+0xfc>)
 800bd6a:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800bd6e:	4912      	ldr	r1, [pc, #72]	@ (800bdb8 <pbuf_realloc+0x10c>)
 800bd70:	480f      	ldr	r0, [pc, #60]	@ (800bdb0 <pbuf_realloc+0x104>)
 800bd72:	f009 ff63 	bl	8015c3c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	897a      	ldrh	r2, [r7, #10]
 800bd7a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	895a      	ldrh	r2, [r3, #10]
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d004      	beq.n	800bd96 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	4618      	mov	r0, r3
 800bd92:	f000 f911 	bl	800bfb8 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	2200      	movs	r2, #0
 800bd9a:	601a      	str	r2, [r3, #0]
 800bd9c:	e000      	b.n	800bda0 <pbuf_realloc+0xf4>
    return;
 800bd9e:	bf00      	nop

}
 800bda0:	3710      	adds	r7, #16
 800bda2:	46bd      	mov	sp, r7
 800bda4:	bd80      	pop	{r7, pc}
 800bda6:	bf00      	nop
 800bda8:	0801e7a8 	.word	0x0801e7a8
 800bdac:	0801e8c0 	.word	0x0801e8c0
 800bdb0:	0801e808 	.word	0x0801e808
 800bdb4:	0801e8d8 	.word	0x0801e8d8
 800bdb8:	0801e8f0 	.word	0x0801e8f0

0800bdbc <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800bdbc:	b580      	push	{r7, lr}
 800bdbe:	b086      	sub	sp, #24
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	60f8      	str	r0, [r7, #12]
 800bdc4:	60b9      	str	r1, [r7, #8]
 800bdc6:	4613      	mov	r3, r2
 800bdc8:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d106      	bne.n	800bdde <pbuf_add_header_impl+0x22>
 800bdd0:	4b2b      	ldr	r3, [pc, #172]	@ (800be80 <pbuf_add_header_impl+0xc4>)
 800bdd2:	f240 12df 	movw	r2, #479	@ 0x1df
 800bdd6:	492b      	ldr	r1, [pc, #172]	@ (800be84 <pbuf_add_header_impl+0xc8>)
 800bdd8:	482b      	ldr	r0, [pc, #172]	@ (800be88 <pbuf_add_header_impl+0xcc>)
 800bdda:	f009 ff2f 	bl	8015c3c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d003      	beq.n	800bdec <pbuf_add_header_impl+0x30>
 800bde4:	68bb      	ldr	r3, [r7, #8]
 800bde6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bdea:	d301      	bcc.n	800bdf0 <pbuf_add_header_impl+0x34>
    return 1;
 800bdec:	2301      	movs	r3, #1
 800bdee:	e043      	b.n	800be78 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800bdf0:	68bb      	ldr	r3, [r7, #8]
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d101      	bne.n	800bdfa <pbuf_add_header_impl+0x3e>
    return 0;
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	e03e      	b.n	800be78 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800bdfa:	68bb      	ldr	r3, [r7, #8]
 800bdfc:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	891a      	ldrh	r2, [r3, #8]
 800be02:	8a7b      	ldrh	r3, [r7, #18]
 800be04:	4413      	add	r3, r2
 800be06:	b29b      	uxth	r3, r3
 800be08:	8a7a      	ldrh	r2, [r7, #18]
 800be0a:	429a      	cmp	r2, r3
 800be0c:	d901      	bls.n	800be12 <pbuf_add_header_impl+0x56>
    return 1;
 800be0e:	2301      	movs	r3, #1
 800be10:	e032      	b.n	800be78 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	7b1b      	ldrb	r3, [r3, #12]
 800be16:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800be18:	8a3b      	ldrh	r3, [r7, #16]
 800be1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d00c      	beq.n	800be3c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	685a      	ldr	r2, [r3, #4]
 800be26:	68bb      	ldr	r3, [r7, #8]
 800be28:	425b      	negs	r3, r3
 800be2a:	4413      	add	r3, r2
 800be2c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	3310      	adds	r3, #16
 800be32:	697a      	ldr	r2, [r7, #20]
 800be34:	429a      	cmp	r2, r3
 800be36:	d20d      	bcs.n	800be54 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800be38:	2301      	movs	r3, #1
 800be3a:	e01d      	b.n	800be78 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800be3c:	79fb      	ldrb	r3, [r7, #7]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d006      	beq.n	800be50 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	685a      	ldr	r2, [r3, #4]
 800be46:	68bb      	ldr	r3, [r7, #8]
 800be48:	425b      	negs	r3, r3
 800be4a:	4413      	add	r3, r2
 800be4c:	617b      	str	r3, [r7, #20]
 800be4e:	e001      	b.n	800be54 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800be50:	2301      	movs	r3, #1
 800be52:	e011      	b.n	800be78 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	697a      	ldr	r2, [r7, #20]
 800be58:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	895a      	ldrh	r2, [r3, #10]
 800be5e:	8a7b      	ldrh	r3, [r7, #18]
 800be60:	4413      	add	r3, r2
 800be62:	b29a      	uxth	r2, r3
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	891a      	ldrh	r2, [r3, #8]
 800be6c:	8a7b      	ldrh	r3, [r7, #18]
 800be6e:	4413      	add	r3, r2
 800be70:	b29a      	uxth	r2, r3
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	811a      	strh	r2, [r3, #8]


  return 0;
 800be76:	2300      	movs	r3, #0
}
 800be78:	4618      	mov	r0, r3
 800be7a:	3718      	adds	r7, #24
 800be7c:	46bd      	mov	sp, r7
 800be7e:	bd80      	pop	{r7, pc}
 800be80:	0801e7a8 	.word	0x0801e7a8
 800be84:	0801e90c 	.word	0x0801e90c
 800be88:	0801e808 	.word	0x0801e808

0800be8c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b082      	sub	sp, #8
 800be90:	af00      	add	r7, sp, #0
 800be92:	6078      	str	r0, [r7, #4]
 800be94:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800be96:	2200      	movs	r2, #0
 800be98:	6839      	ldr	r1, [r7, #0]
 800be9a:	6878      	ldr	r0, [r7, #4]
 800be9c:	f7ff ff8e 	bl	800bdbc <pbuf_add_header_impl>
 800bea0:	4603      	mov	r3, r0
}
 800bea2:	4618      	mov	r0, r3
 800bea4:	3708      	adds	r7, #8
 800bea6:	46bd      	mov	sp, r7
 800bea8:	bd80      	pop	{r7, pc}
	...

0800beac <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800beac:	b580      	push	{r7, lr}
 800beae:	b084      	sub	sp, #16
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	6078      	str	r0, [r7, #4]
 800beb4:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d106      	bne.n	800beca <pbuf_remove_header+0x1e>
 800bebc:	4b20      	ldr	r3, [pc, #128]	@ (800bf40 <pbuf_remove_header+0x94>)
 800bebe:	f240 224b 	movw	r2, #587	@ 0x24b
 800bec2:	4920      	ldr	r1, [pc, #128]	@ (800bf44 <pbuf_remove_header+0x98>)
 800bec4:	4820      	ldr	r0, [pc, #128]	@ (800bf48 <pbuf_remove_header+0x9c>)
 800bec6:	f009 feb9 	bl	8015c3c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d003      	beq.n	800bed8 <pbuf_remove_header+0x2c>
 800bed0:	683b      	ldr	r3, [r7, #0]
 800bed2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bed6:	d301      	bcc.n	800bedc <pbuf_remove_header+0x30>
    return 1;
 800bed8:	2301      	movs	r3, #1
 800beda:	e02c      	b.n	800bf36 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800bedc:	683b      	ldr	r3, [r7, #0]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d101      	bne.n	800bee6 <pbuf_remove_header+0x3a>
    return 0;
 800bee2:	2300      	movs	r3, #0
 800bee4:	e027      	b.n	800bf36 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800bee6:	683b      	ldr	r3, [r7, #0]
 800bee8:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	895b      	ldrh	r3, [r3, #10]
 800beee:	89fa      	ldrh	r2, [r7, #14]
 800bef0:	429a      	cmp	r2, r3
 800bef2:	d908      	bls.n	800bf06 <pbuf_remove_header+0x5a>
 800bef4:	4b12      	ldr	r3, [pc, #72]	@ (800bf40 <pbuf_remove_header+0x94>)
 800bef6:	f240 2255 	movw	r2, #597	@ 0x255
 800befa:	4914      	ldr	r1, [pc, #80]	@ (800bf4c <pbuf_remove_header+0xa0>)
 800befc:	4812      	ldr	r0, [pc, #72]	@ (800bf48 <pbuf_remove_header+0x9c>)
 800befe:	f009 fe9d 	bl	8015c3c <iprintf>
 800bf02:	2301      	movs	r3, #1
 800bf04:	e017      	b.n	800bf36 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	685b      	ldr	r3, [r3, #4]
 800bf0a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	685a      	ldr	r2, [r3, #4]
 800bf10:	683b      	ldr	r3, [r7, #0]
 800bf12:	441a      	add	r2, r3
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	895a      	ldrh	r2, [r3, #10]
 800bf1c:	89fb      	ldrh	r3, [r7, #14]
 800bf1e:	1ad3      	subs	r3, r2, r3
 800bf20:	b29a      	uxth	r2, r3
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	891a      	ldrh	r2, [r3, #8]
 800bf2a:	89fb      	ldrh	r3, [r7, #14]
 800bf2c:	1ad3      	subs	r3, r2, r3
 800bf2e:	b29a      	uxth	r2, r3
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800bf34:	2300      	movs	r3, #0
}
 800bf36:	4618      	mov	r0, r3
 800bf38:	3710      	adds	r7, #16
 800bf3a:	46bd      	mov	sp, r7
 800bf3c:	bd80      	pop	{r7, pc}
 800bf3e:	bf00      	nop
 800bf40:	0801e7a8 	.word	0x0801e7a8
 800bf44:	0801e90c 	.word	0x0801e90c
 800bf48:	0801e808 	.word	0x0801e808
 800bf4c:	0801e918 	.word	0x0801e918

0800bf50 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800bf50:	b580      	push	{r7, lr}
 800bf52:	b082      	sub	sp, #8
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	6078      	str	r0, [r7, #4]
 800bf58:	460b      	mov	r3, r1
 800bf5a:	807b      	strh	r3, [r7, #2]
 800bf5c:	4613      	mov	r3, r2
 800bf5e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800bf60:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	da08      	bge.n	800bf7a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800bf68:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bf6c:	425b      	negs	r3, r3
 800bf6e:	4619      	mov	r1, r3
 800bf70:	6878      	ldr	r0, [r7, #4]
 800bf72:	f7ff ff9b 	bl	800beac <pbuf_remove_header>
 800bf76:	4603      	mov	r3, r0
 800bf78:	e007      	b.n	800bf8a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800bf7a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bf7e:	787a      	ldrb	r2, [r7, #1]
 800bf80:	4619      	mov	r1, r3
 800bf82:	6878      	ldr	r0, [r7, #4]
 800bf84:	f7ff ff1a 	bl	800bdbc <pbuf_add_header_impl>
 800bf88:	4603      	mov	r3, r0
  }
}
 800bf8a:	4618      	mov	r0, r3
 800bf8c:	3708      	adds	r7, #8
 800bf8e:	46bd      	mov	sp, r7
 800bf90:	bd80      	pop	{r7, pc}

0800bf92 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800bf92:	b580      	push	{r7, lr}
 800bf94:	b082      	sub	sp, #8
 800bf96:	af00      	add	r7, sp, #0
 800bf98:	6078      	str	r0, [r7, #4]
 800bf9a:	460b      	mov	r3, r1
 800bf9c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800bf9e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bfa2:	2201      	movs	r2, #1
 800bfa4:	4619      	mov	r1, r3
 800bfa6:	6878      	ldr	r0, [r7, #4]
 800bfa8:	f7ff ffd2 	bl	800bf50 <pbuf_header_impl>
 800bfac:	4603      	mov	r3, r0
}
 800bfae:	4618      	mov	r0, r3
 800bfb0:	3708      	adds	r7, #8
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	bd80      	pop	{r7, pc}
	...

0800bfb8 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	b086      	sub	sp, #24
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d10b      	bne.n	800bfde <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d106      	bne.n	800bfda <pbuf_free+0x22>
 800bfcc:	4b38      	ldr	r3, [pc, #224]	@ (800c0b0 <pbuf_free+0xf8>)
 800bfce:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800bfd2:	4938      	ldr	r1, [pc, #224]	@ (800c0b4 <pbuf_free+0xfc>)
 800bfd4:	4838      	ldr	r0, [pc, #224]	@ (800c0b8 <pbuf_free+0x100>)
 800bfd6:	f009 fe31 	bl	8015c3c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800bfda:	2300      	movs	r3, #0
 800bfdc:	e063      	b.n	800c0a6 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800bfde:	2300      	movs	r3, #0
 800bfe0:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800bfe2:	e05c      	b.n	800c09e <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	7b9b      	ldrb	r3, [r3, #14]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d106      	bne.n	800bffa <pbuf_free+0x42>
 800bfec:	4b30      	ldr	r3, [pc, #192]	@ (800c0b0 <pbuf_free+0xf8>)
 800bfee:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800bff2:	4932      	ldr	r1, [pc, #200]	@ (800c0bc <pbuf_free+0x104>)
 800bff4:	4830      	ldr	r0, [pc, #192]	@ (800c0b8 <pbuf_free+0x100>)
 800bff6:	f009 fe21 	bl	8015c3c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	7b9b      	ldrb	r3, [r3, #14]
 800bffe:	3b01      	subs	r3, #1
 800c000:	b2da      	uxtb	r2, r3
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	739a      	strb	r2, [r3, #14]
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	7b9b      	ldrb	r3, [r3, #14]
 800c00a:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800c00c:	7dbb      	ldrb	r3, [r7, #22]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d143      	bne.n	800c09a <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	7b1b      	ldrb	r3, [r3, #12]
 800c01c:	f003 030f 	and.w	r3, r3, #15
 800c020:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	7b5b      	ldrb	r3, [r3, #13]
 800c026:	f003 0302 	and.w	r3, r3, #2
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d011      	beq.n	800c052 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800c032:	68bb      	ldr	r3, [r7, #8]
 800c034:	691b      	ldr	r3, [r3, #16]
 800c036:	2b00      	cmp	r3, #0
 800c038:	d106      	bne.n	800c048 <pbuf_free+0x90>
 800c03a:	4b1d      	ldr	r3, [pc, #116]	@ (800c0b0 <pbuf_free+0xf8>)
 800c03c:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800c040:	491f      	ldr	r1, [pc, #124]	@ (800c0c0 <pbuf_free+0x108>)
 800c042:	481d      	ldr	r0, [pc, #116]	@ (800c0b8 <pbuf_free+0x100>)
 800c044:	f009 fdfa 	bl	8015c3c <iprintf>
        pc->custom_free_function(p);
 800c048:	68bb      	ldr	r3, [r7, #8]
 800c04a:	691b      	ldr	r3, [r3, #16]
 800c04c:	6878      	ldr	r0, [r7, #4]
 800c04e:	4798      	blx	r3
 800c050:	e01d      	b.n	800c08e <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800c052:	7bfb      	ldrb	r3, [r7, #15]
 800c054:	2b02      	cmp	r3, #2
 800c056:	d104      	bne.n	800c062 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800c058:	6879      	ldr	r1, [r7, #4]
 800c05a:	2008      	movs	r0, #8
 800c05c:	f7ff f936 	bl	800b2cc <memp_free>
 800c060:	e015      	b.n	800c08e <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800c062:	7bfb      	ldrb	r3, [r7, #15]
 800c064:	2b01      	cmp	r3, #1
 800c066:	d104      	bne.n	800c072 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800c068:	6879      	ldr	r1, [r7, #4]
 800c06a:	2007      	movs	r0, #7
 800c06c:	f7ff f92e 	bl	800b2cc <memp_free>
 800c070:	e00d      	b.n	800c08e <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800c072:	7bfb      	ldrb	r3, [r7, #15]
 800c074:	2b00      	cmp	r3, #0
 800c076:	d103      	bne.n	800c080 <pbuf_free+0xc8>
          mem_free(p);
 800c078:	6878      	ldr	r0, [r7, #4]
 800c07a:	f7fe fdc1 	bl	800ac00 <mem_free>
 800c07e:	e006      	b.n	800c08e <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800c080:	4b0b      	ldr	r3, [pc, #44]	@ (800c0b0 <pbuf_free+0xf8>)
 800c082:	f240 320f 	movw	r2, #783	@ 0x30f
 800c086:	490f      	ldr	r1, [pc, #60]	@ (800c0c4 <pbuf_free+0x10c>)
 800c088:	480b      	ldr	r0, [pc, #44]	@ (800c0b8 <pbuf_free+0x100>)
 800c08a:	f009 fdd7 	bl	8015c3c <iprintf>
        }
      }
      count++;
 800c08e:	7dfb      	ldrb	r3, [r7, #23]
 800c090:	3301      	adds	r3, #1
 800c092:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800c094:	693b      	ldr	r3, [r7, #16]
 800c096:	607b      	str	r3, [r7, #4]
 800c098:	e001      	b.n	800c09e <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800c09a:	2300      	movs	r3, #0
 800c09c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d19f      	bne.n	800bfe4 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800c0a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	3718      	adds	r7, #24
 800c0aa:	46bd      	mov	sp, r7
 800c0ac:	bd80      	pop	{r7, pc}
 800c0ae:	bf00      	nop
 800c0b0:	0801e7a8 	.word	0x0801e7a8
 800c0b4:	0801e90c 	.word	0x0801e90c
 800c0b8:	0801e808 	.word	0x0801e808
 800c0bc:	0801e938 	.word	0x0801e938
 800c0c0:	0801e950 	.word	0x0801e950
 800c0c4:	0801e974 	.word	0x0801e974

0800c0c8 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800c0c8:	b480      	push	{r7}
 800c0ca:	b085      	sub	sp, #20
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800c0d4:	e005      	b.n	800c0e2 <pbuf_clen+0x1a>
    ++len;
 800c0d6:	89fb      	ldrh	r3, [r7, #14]
 800c0d8:	3301      	adds	r3, #1
 800c0da:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d1f6      	bne.n	800c0d6 <pbuf_clen+0xe>
  }
  return len;
 800c0e8:	89fb      	ldrh	r3, [r7, #14]
}
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	3714      	adds	r7, #20
 800c0ee:	46bd      	mov	sp, r7
 800c0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f4:	4770      	bx	lr
	...

0800c0f8 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b082      	sub	sp, #8
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	2b00      	cmp	r3, #0
 800c104:	d010      	beq.n	800c128 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	7b9b      	ldrb	r3, [r3, #14]
 800c10a:	3301      	adds	r3, #1
 800c10c:	b2da      	uxtb	r2, r3
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	7b9b      	ldrb	r3, [r3, #14]
 800c116:	2b00      	cmp	r3, #0
 800c118:	d106      	bne.n	800c128 <pbuf_ref+0x30>
 800c11a:	4b05      	ldr	r3, [pc, #20]	@ (800c130 <pbuf_ref+0x38>)
 800c11c:	f240 3242 	movw	r2, #834	@ 0x342
 800c120:	4904      	ldr	r1, [pc, #16]	@ (800c134 <pbuf_ref+0x3c>)
 800c122:	4805      	ldr	r0, [pc, #20]	@ (800c138 <pbuf_ref+0x40>)
 800c124:	f009 fd8a 	bl	8015c3c <iprintf>
  }
}
 800c128:	bf00      	nop
 800c12a:	3708      	adds	r7, #8
 800c12c:	46bd      	mov	sp, r7
 800c12e:	bd80      	pop	{r7, pc}
 800c130:	0801e7a8 	.word	0x0801e7a8
 800c134:	0801e988 	.word	0x0801e988
 800c138:	0801e808 	.word	0x0801e808

0800c13c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800c13c:	b580      	push	{r7, lr}
 800c13e:	b084      	sub	sp, #16
 800c140:	af00      	add	r7, sp, #0
 800c142:	6078      	str	r0, [r7, #4]
 800c144:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d002      	beq.n	800c152 <pbuf_cat+0x16>
 800c14c:	683b      	ldr	r3, [r7, #0]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d107      	bne.n	800c162 <pbuf_cat+0x26>
 800c152:	4b20      	ldr	r3, [pc, #128]	@ (800c1d4 <pbuf_cat+0x98>)
 800c154:	f240 3259 	movw	r2, #857	@ 0x359
 800c158:	491f      	ldr	r1, [pc, #124]	@ (800c1d8 <pbuf_cat+0x9c>)
 800c15a:	4820      	ldr	r0, [pc, #128]	@ (800c1dc <pbuf_cat+0xa0>)
 800c15c:	f009 fd6e 	bl	8015c3c <iprintf>
 800c160:	e034      	b.n	800c1cc <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	60fb      	str	r3, [r7, #12]
 800c166:	e00a      	b.n	800c17e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	891a      	ldrh	r2, [r3, #8]
 800c16c:	683b      	ldr	r3, [r7, #0]
 800c16e:	891b      	ldrh	r3, [r3, #8]
 800c170:	4413      	add	r3, r2
 800c172:	b29a      	uxth	r2, r3
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	60fb      	str	r3, [r7, #12]
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	2b00      	cmp	r3, #0
 800c184:	d1f0      	bne.n	800c168 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	891a      	ldrh	r2, [r3, #8]
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	895b      	ldrh	r3, [r3, #10]
 800c18e:	429a      	cmp	r2, r3
 800c190:	d006      	beq.n	800c1a0 <pbuf_cat+0x64>
 800c192:	4b10      	ldr	r3, [pc, #64]	@ (800c1d4 <pbuf_cat+0x98>)
 800c194:	f240 3262 	movw	r2, #866	@ 0x362
 800c198:	4911      	ldr	r1, [pc, #68]	@ (800c1e0 <pbuf_cat+0xa4>)
 800c19a:	4810      	ldr	r0, [pc, #64]	@ (800c1dc <pbuf_cat+0xa0>)
 800c19c:	f009 fd4e 	bl	8015c3c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d006      	beq.n	800c1b6 <pbuf_cat+0x7a>
 800c1a8:	4b0a      	ldr	r3, [pc, #40]	@ (800c1d4 <pbuf_cat+0x98>)
 800c1aa:	f240 3263 	movw	r2, #867	@ 0x363
 800c1ae:	490d      	ldr	r1, [pc, #52]	@ (800c1e4 <pbuf_cat+0xa8>)
 800c1b0:	480a      	ldr	r0, [pc, #40]	@ (800c1dc <pbuf_cat+0xa0>)
 800c1b2:	f009 fd43 	bl	8015c3c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	891a      	ldrh	r2, [r3, #8]
 800c1ba:	683b      	ldr	r3, [r7, #0]
 800c1bc:	891b      	ldrh	r3, [r3, #8]
 800c1be:	4413      	add	r3, r2
 800c1c0:	b29a      	uxth	r2, r3
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	683a      	ldr	r2, [r7, #0]
 800c1ca:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800c1cc:	3710      	adds	r7, #16
 800c1ce:	46bd      	mov	sp, r7
 800c1d0:	bd80      	pop	{r7, pc}
 800c1d2:	bf00      	nop
 800c1d4:	0801e7a8 	.word	0x0801e7a8
 800c1d8:	0801e99c 	.word	0x0801e99c
 800c1dc:	0801e808 	.word	0x0801e808
 800c1e0:	0801e9d4 	.word	0x0801e9d4
 800c1e4:	0801ea04 	.word	0x0801ea04

0800c1e8 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800c1e8:	b580      	push	{r7, lr}
 800c1ea:	b082      	sub	sp, #8
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	6078      	str	r0, [r7, #4]
 800c1f0:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800c1f2:	6839      	ldr	r1, [r7, #0]
 800c1f4:	6878      	ldr	r0, [r7, #4]
 800c1f6:	f7ff ffa1 	bl	800c13c <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800c1fa:	6838      	ldr	r0, [r7, #0]
 800c1fc:	f7ff ff7c 	bl	800c0f8 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800c200:	bf00      	nop
 800c202:	3708      	adds	r7, #8
 800c204:	46bd      	mov	sp, r7
 800c206:	bd80      	pop	{r7, pc}

0800c208 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800c208:	b580      	push	{r7, lr}
 800c20a:	b086      	sub	sp, #24
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	6078      	str	r0, [r7, #4]
 800c210:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800c212:	2300      	movs	r3, #0
 800c214:	617b      	str	r3, [r7, #20]
 800c216:	2300      	movs	r3, #0
 800c218:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d008      	beq.n	800c232 <pbuf_copy+0x2a>
 800c220:	683b      	ldr	r3, [r7, #0]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d005      	beq.n	800c232 <pbuf_copy+0x2a>
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	891a      	ldrh	r2, [r3, #8]
 800c22a:	683b      	ldr	r3, [r7, #0]
 800c22c:	891b      	ldrh	r3, [r3, #8]
 800c22e:	429a      	cmp	r2, r3
 800c230:	d209      	bcs.n	800c246 <pbuf_copy+0x3e>
 800c232:	4b57      	ldr	r3, [pc, #348]	@ (800c390 <pbuf_copy+0x188>)
 800c234:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800c238:	4956      	ldr	r1, [pc, #344]	@ (800c394 <pbuf_copy+0x18c>)
 800c23a:	4857      	ldr	r0, [pc, #348]	@ (800c398 <pbuf_copy+0x190>)
 800c23c:	f009 fcfe 	bl	8015c3c <iprintf>
 800c240:	f06f 030f 	mvn.w	r3, #15
 800c244:	e09f      	b.n	800c386 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	895b      	ldrh	r3, [r3, #10]
 800c24a:	461a      	mov	r2, r3
 800c24c:	697b      	ldr	r3, [r7, #20]
 800c24e:	1ad2      	subs	r2, r2, r3
 800c250:	683b      	ldr	r3, [r7, #0]
 800c252:	895b      	ldrh	r3, [r3, #10]
 800c254:	4619      	mov	r1, r3
 800c256:	693b      	ldr	r3, [r7, #16]
 800c258:	1acb      	subs	r3, r1, r3
 800c25a:	429a      	cmp	r2, r3
 800c25c:	d306      	bcc.n	800c26c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800c25e:	683b      	ldr	r3, [r7, #0]
 800c260:	895b      	ldrh	r3, [r3, #10]
 800c262:	461a      	mov	r2, r3
 800c264:	693b      	ldr	r3, [r7, #16]
 800c266:	1ad3      	subs	r3, r2, r3
 800c268:	60fb      	str	r3, [r7, #12]
 800c26a:	e005      	b.n	800c278 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	895b      	ldrh	r3, [r3, #10]
 800c270:	461a      	mov	r2, r3
 800c272:	697b      	ldr	r3, [r7, #20]
 800c274:	1ad3      	subs	r3, r2, r3
 800c276:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	685a      	ldr	r2, [r3, #4]
 800c27c:	697b      	ldr	r3, [r7, #20]
 800c27e:	18d0      	adds	r0, r2, r3
 800c280:	683b      	ldr	r3, [r7, #0]
 800c282:	685a      	ldr	r2, [r3, #4]
 800c284:	693b      	ldr	r3, [r7, #16]
 800c286:	4413      	add	r3, r2
 800c288:	68fa      	ldr	r2, [r7, #12]
 800c28a:	4619      	mov	r1, r3
 800c28c:	f009 fe2d 	bl	8015eea <memcpy>
    offset_to += len;
 800c290:	697a      	ldr	r2, [r7, #20]
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	4413      	add	r3, r2
 800c296:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800c298:	693a      	ldr	r2, [r7, #16]
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	4413      	add	r3, r2
 800c29e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	895b      	ldrh	r3, [r3, #10]
 800c2a4:	461a      	mov	r2, r3
 800c2a6:	697b      	ldr	r3, [r7, #20]
 800c2a8:	4293      	cmp	r3, r2
 800c2aa:	d906      	bls.n	800c2ba <pbuf_copy+0xb2>
 800c2ac:	4b38      	ldr	r3, [pc, #224]	@ (800c390 <pbuf_copy+0x188>)
 800c2ae:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800c2b2:	493a      	ldr	r1, [pc, #232]	@ (800c39c <pbuf_copy+0x194>)
 800c2b4:	4838      	ldr	r0, [pc, #224]	@ (800c398 <pbuf_copy+0x190>)
 800c2b6:	f009 fcc1 	bl	8015c3c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800c2ba:	683b      	ldr	r3, [r7, #0]
 800c2bc:	895b      	ldrh	r3, [r3, #10]
 800c2be:	461a      	mov	r2, r3
 800c2c0:	693b      	ldr	r3, [r7, #16]
 800c2c2:	4293      	cmp	r3, r2
 800c2c4:	d906      	bls.n	800c2d4 <pbuf_copy+0xcc>
 800c2c6:	4b32      	ldr	r3, [pc, #200]	@ (800c390 <pbuf_copy+0x188>)
 800c2c8:	f240 32da 	movw	r2, #986	@ 0x3da
 800c2cc:	4934      	ldr	r1, [pc, #208]	@ (800c3a0 <pbuf_copy+0x198>)
 800c2ce:	4832      	ldr	r0, [pc, #200]	@ (800c398 <pbuf_copy+0x190>)
 800c2d0:	f009 fcb4 	bl	8015c3c <iprintf>
    if (offset_from >= p_from->len) {
 800c2d4:	683b      	ldr	r3, [r7, #0]
 800c2d6:	895b      	ldrh	r3, [r3, #10]
 800c2d8:	461a      	mov	r2, r3
 800c2da:	693b      	ldr	r3, [r7, #16]
 800c2dc:	4293      	cmp	r3, r2
 800c2de:	d304      	bcc.n	800c2ea <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800c2e0:	2300      	movs	r3, #0
 800c2e2:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800c2e4:	683b      	ldr	r3, [r7, #0]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	895b      	ldrh	r3, [r3, #10]
 800c2ee:	461a      	mov	r2, r3
 800c2f0:	697b      	ldr	r3, [r7, #20]
 800c2f2:	4293      	cmp	r3, r2
 800c2f4:	d114      	bne.n	800c320 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800c2f6:	2300      	movs	r3, #0
 800c2f8:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	2b00      	cmp	r3, #0
 800c304:	d10c      	bne.n	800c320 <pbuf_copy+0x118>
 800c306:	683b      	ldr	r3, [r7, #0]
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d009      	beq.n	800c320 <pbuf_copy+0x118>
 800c30c:	4b20      	ldr	r3, [pc, #128]	@ (800c390 <pbuf_copy+0x188>)
 800c30e:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800c312:	4924      	ldr	r1, [pc, #144]	@ (800c3a4 <pbuf_copy+0x19c>)
 800c314:	4820      	ldr	r0, [pc, #128]	@ (800c398 <pbuf_copy+0x190>)
 800c316:	f009 fc91 	bl	8015c3c <iprintf>
 800c31a:	f06f 030f 	mvn.w	r3, #15
 800c31e:	e032      	b.n	800c386 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800c320:	683b      	ldr	r3, [r7, #0]
 800c322:	2b00      	cmp	r3, #0
 800c324:	d013      	beq.n	800c34e <pbuf_copy+0x146>
 800c326:	683b      	ldr	r3, [r7, #0]
 800c328:	895a      	ldrh	r2, [r3, #10]
 800c32a:	683b      	ldr	r3, [r7, #0]
 800c32c:	891b      	ldrh	r3, [r3, #8]
 800c32e:	429a      	cmp	r2, r3
 800c330:	d10d      	bne.n	800c34e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c332:	683b      	ldr	r3, [r7, #0]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	2b00      	cmp	r3, #0
 800c338:	d009      	beq.n	800c34e <pbuf_copy+0x146>
 800c33a:	4b15      	ldr	r3, [pc, #84]	@ (800c390 <pbuf_copy+0x188>)
 800c33c:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800c340:	4919      	ldr	r1, [pc, #100]	@ (800c3a8 <pbuf_copy+0x1a0>)
 800c342:	4815      	ldr	r0, [pc, #84]	@ (800c398 <pbuf_copy+0x190>)
 800c344:	f009 fc7a 	bl	8015c3c <iprintf>
 800c348:	f06f 0305 	mvn.w	r3, #5
 800c34c:	e01b      	b.n	800c386 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d013      	beq.n	800c37c <pbuf_copy+0x174>
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	895a      	ldrh	r2, [r3, #10]
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	891b      	ldrh	r3, [r3, #8]
 800c35c:	429a      	cmp	r2, r3
 800c35e:	d10d      	bne.n	800c37c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	2b00      	cmp	r3, #0
 800c366:	d009      	beq.n	800c37c <pbuf_copy+0x174>
 800c368:	4b09      	ldr	r3, [pc, #36]	@ (800c390 <pbuf_copy+0x188>)
 800c36a:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800c36e:	490e      	ldr	r1, [pc, #56]	@ (800c3a8 <pbuf_copy+0x1a0>)
 800c370:	4809      	ldr	r0, [pc, #36]	@ (800c398 <pbuf_copy+0x190>)
 800c372:	f009 fc63 	bl	8015c3c <iprintf>
 800c376:	f06f 0305 	mvn.w	r3, #5
 800c37a:	e004      	b.n	800c386 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800c37c:	683b      	ldr	r3, [r7, #0]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	f47f af61 	bne.w	800c246 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800c384:	2300      	movs	r3, #0
}
 800c386:	4618      	mov	r0, r3
 800c388:	3718      	adds	r7, #24
 800c38a:	46bd      	mov	sp, r7
 800c38c:	bd80      	pop	{r7, pc}
 800c38e:	bf00      	nop
 800c390:	0801e7a8 	.word	0x0801e7a8
 800c394:	0801ea50 	.word	0x0801ea50
 800c398:	0801e808 	.word	0x0801e808
 800c39c:	0801ea80 	.word	0x0801ea80
 800c3a0:	0801ea98 	.word	0x0801ea98
 800c3a4:	0801eab4 	.word	0x0801eab4
 800c3a8:	0801eac4 	.word	0x0801eac4

0800c3ac <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800c3ac:	b580      	push	{r7, lr}
 800c3ae:	b088      	sub	sp, #32
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	60f8      	str	r0, [r7, #12]
 800c3b4:	60b9      	str	r1, [r7, #8]
 800c3b6:	4611      	mov	r1, r2
 800c3b8:	461a      	mov	r2, r3
 800c3ba:	460b      	mov	r3, r1
 800c3bc:	80fb      	strh	r3, [r7, #6]
 800c3be:	4613      	mov	r3, r2
 800c3c0:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800c3c6:	2300      	movs	r3, #0
 800c3c8:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d108      	bne.n	800c3e2 <pbuf_copy_partial+0x36>
 800c3d0:	4b2b      	ldr	r3, [pc, #172]	@ (800c480 <pbuf_copy_partial+0xd4>)
 800c3d2:	f240 420a 	movw	r2, #1034	@ 0x40a
 800c3d6:	492b      	ldr	r1, [pc, #172]	@ (800c484 <pbuf_copy_partial+0xd8>)
 800c3d8:	482b      	ldr	r0, [pc, #172]	@ (800c488 <pbuf_copy_partial+0xdc>)
 800c3da:	f009 fc2f 	bl	8015c3c <iprintf>
 800c3de:	2300      	movs	r3, #0
 800c3e0:	e04a      	b.n	800c478 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800c3e2:	68bb      	ldr	r3, [r7, #8]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d108      	bne.n	800c3fa <pbuf_copy_partial+0x4e>
 800c3e8:	4b25      	ldr	r3, [pc, #148]	@ (800c480 <pbuf_copy_partial+0xd4>)
 800c3ea:	f240 420b 	movw	r2, #1035	@ 0x40b
 800c3ee:	4927      	ldr	r1, [pc, #156]	@ (800c48c <pbuf_copy_partial+0xe0>)
 800c3f0:	4825      	ldr	r0, [pc, #148]	@ (800c488 <pbuf_copy_partial+0xdc>)
 800c3f2:	f009 fc23 	bl	8015c3c <iprintf>
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	e03e      	b.n	800c478 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	61fb      	str	r3, [r7, #28]
 800c3fe:	e034      	b.n	800c46a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800c400:	88bb      	ldrh	r3, [r7, #4]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d00a      	beq.n	800c41c <pbuf_copy_partial+0x70>
 800c406:	69fb      	ldr	r3, [r7, #28]
 800c408:	895b      	ldrh	r3, [r3, #10]
 800c40a:	88ba      	ldrh	r2, [r7, #4]
 800c40c:	429a      	cmp	r2, r3
 800c40e:	d305      	bcc.n	800c41c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800c410:	69fb      	ldr	r3, [r7, #28]
 800c412:	895b      	ldrh	r3, [r3, #10]
 800c414:	88ba      	ldrh	r2, [r7, #4]
 800c416:	1ad3      	subs	r3, r2, r3
 800c418:	80bb      	strh	r3, [r7, #4]
 800c41a:	e023      	b.n	800c464 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800c41c:	69fb      	ldr	r3, [r7, #28]
 800c41e:	895a      	ldrh	r2, [r3, #10]
 800c420:	88bb      	ldrh	r3, [r7, #4]
 800c422:	1ad3      	subs	r3, r2, r3
 800c424:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800c426:	8b3a      	ldrh	r2, [r7, #24]
 800c428:	88fb      	ldrh	r3, [r7, #6]
 800c42a:	429a      	cmp	r2, r3
 800c42c:	d901      	bls.n	800c432 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800c42e:	88fb      	ldrh	r3, [r7, #6]
 800c430:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800c432:	8b7b      	ldrh	r3, [r7, #26]
 800c434:	68ba      	ldr	r2, [r7, #8]
 800c436:	18d0      	adds	r0, r2, r3
 800c438:	69fb      	ldr	r3, [r7, #28]
 800c43a:	685a      	ldr	r2, [r3, #4]
 800c43c:	88bb      	ldrh	r3, [r7, #4]
 800c43e:	4413      	add	r3, r2
 800c440:	8b3a      	ldrh	r2, [r7, #24]
 800c442:	4619      	mov	r1, r3
 800c444:	f009 fd51 	bl	8015eea <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800c448:	8afa      	ldrh	r2, [r7, #22]
 800c44a:	8b3b      	ldrh	r3, [r7, #24]
 800c44c:	4413      	add	r3, r2
 800c44e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800c450:	8b7a      	ldrh	r2, [r7, #26]
 800c452:	8b3b      	ldrh	r3, [r7, #24]
 800c454:	4413      	add	r3, r2
 800c456:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800c458:	88fa      	ldrh	r2, [r7, #6]
 800c45a:	8b3b      	ldrh	r3, [r7, #24]
 800c45c:	1ad3      	subs	r3, r2, r3
 800c45e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800c460:	2300      	movs	r3, #0
 800c462:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c464:	69fb      	ldr	r3, [r7, #28]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	61fb      	str	r3, [r7, #28]
 800c46a:	88fb      	ldrh	r3, [r7, #6]
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d002      	beq.n	800c476 <pbuf_copy_partial+0xca>
 800c470:	69fb      	ldr	r3, [r7, #28]
 800c472:	2b00      	cmp	r3, #0
 800c474:	d1c4      	bne.n	800c400 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800c476:	8afb      	ldrh	r3, [r7, #22]
}
 800c478:	4618      	mov	r0, r3
 800c47a:	3720      	adds	r7, #32
 800c47c:	46bd      	mov	sp, r7
 800c47e:	bd80      	pop	{r7, pc}
 800c480:	0801e7a8 	.word	0x0801e7a8
 800c484:	0801eaf0 	.word	0x0801eaf0
 800c488:	0801e808 	.word	0x0801e808
 800c48c:	0801eb10 	.word	0x0801eb10

0800c490 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 800c490:	b480      	push	{r7}
 800c492:	b087      	sub	sp, #28
 800c494:	af00      	add	r7, sp, #0
 800c496:	60f8      	str	r0, [r7, #12]
 800c498:	460b      	mov	r3, r1
 800c49a:	607a      	str	r2, [r7, #4]
 800c49c:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 800c49e:	897b      	ldrh	r3, [r7, #10]
 800c4a0:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 800c4a6:	e007      	b.n	800c4b8 <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 800c4a8:	693b      	ldr	r3, [r7, #16]
 800c4aa:	895b      	ldrh	r3, [r3, #10]
 800c4ac:	8afa      	ldrh	r2, [r7, #22]
 800c4ae:	1ad3      	subs	r3, r2, r3
 800c4b0:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 800c4b2:	693b      	ldr	r3, [r7, #16]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 800c4b8:	693b      	ldr	r3, [r7, #16]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d004      	beq.n	800c4c8 <pbuf_skip_const+0x38>
 800c4be:	693b      	ldr	r3, [r7, #16]
 800c4c0:	895b      	ldrh	r3, [r3, #10]
 800c4c2:	8afa      	ldrh	r2, [r7, #22]
 800c4c4:	429a      	cmp	r2, r3
 800c4c6:	d2ef      	bcs.n	800c4a8 <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d002      	beq.n	800c4d4 <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	8afa      	ldrh	r2, [r7, #22]
 800c4d2:	801a      	strh	r2, [r3, #0]
  }
  return q;
 800c4d4:	693b      	ldr	r3, [r7, #16]
}
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	371c      	adds	r7, #28
 800c4da:	46bd      	mov	sp, r7
 800c4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e0:	4770      	bx	lr

0800c4e2 <pbuf_skip>:
 * @param out_offset resulting offset in the returned pbuf
 * @return the pbuf in the queue where the offset is
 */
struct pbuf *
pbuf_skip(struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 800c4e2:	b580      	push	{r7, lr}
 800c4e4:	b086      	sub	sp, #24
 800c4e6:	af00      	add	r7, sp, #0
 800c4e8:	60f8      	str	r0, [r7, #12]
 800c4ea:	460b      	mov	r3, r1
 800c4ec:	607a      	str	r2, [r7, #4]
 800c4ee:	817b      	strh	r3, [r7, #10]
  const struct pbuf *out = pbuf_skip_const(in, in_offset, out_offset);
 800c4f0:	897b      	ldrh	r3, [r7, #10]
 800c4f2:	687a      	ldr	r2, [r7, #4]
 800c4f4:	4619      	mov	r1, r3
 800c4f6:	68f8      	ldr	r0, [r7, #12]
 800c4f8:	f7ff ffca 	bl	800c490 <pbuf_skip_const>
 800c4fc:	6178      	str	r0, [r7, #20]
  return LWIP_CONST_CAST(struct pbuf *, out);
 800c4fe:	697b      	ldr	r3, [r7, #20]
}
 800c500:	4618      	mov	r0, r3
 800c502:	3718      	adds	r7, #24
 800c504:	46bd      	mov	sp, r7
 800c506:	bd80      	pop	{r7, pc}

0800c508 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 800c508:	b580      	push	{r7, lr}
 800c50a:	b088      	sub	sp, #32
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	60f8      	str	r0, [r7, #12]
 800c510:	60b9      	str	r1, [r7, #8]
 800c512:	4613      	mov	r3, r2
 800c514:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 800c516:	88fb      	ldrh	r3, [r7, #6]
 800c518:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 800c51a:	2300      	movs	r3, #0
 800c51c:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d109      	bne.n	800c538 <pbuf_take+0x30>
 800c524:	4b3a      	ldr	r3, [pc, #232]	@ (800c610 <pbuf_take+0x108>)
 800c526:	f240 42b3 	movw	r2, #1203	@ 0x4b3
 800c52a:	493a      	ldr	r1, [pc, #232]	@ (800c614 <pbuf_take+0x10c>)
 800c52c:	483a      	ldr	r0, [pc, #232]	@ (800c618 <pbuf_take+0x110>)
 800c52e:	f009 fb85 	bl	8015c3c <iprintf>
 800c532:	f06f 030f 	mvn.w	r3, #15
 800c536:	e067      	b.n	800c608 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800c538:	68bb      	ldr	r3, [r7, #8]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d109      	bne.n	800c552 <pbuf_take+0x4a>
 800c53e:	4b34      	ldr	r3, [pc, #208]	@ (800c610 <pbuf_take+0x108>)
 800c540:	f240 42b4 	movw	r2, #1204	@ 0x4b4
 800c544:	4935      	ldr	r1, [pc, #212]	@ (800c61c <pbuf_take+0x114>)
 800c546:	4834      	ldr	r0, [pc, #208]	@ (800c618 <pbuf_take+0x110>)
 800c548:	f009 fb78 	bl	8015c3c <iprintf>
 800c54c:	f06f 030f 	mvn.w	r3, #15
 800c550:	e05a      	b.n	800c608 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	891b      	ldrh	r3, [r3, #8]
 800c556:	88fa      	ldrh	r2, [r7, #6]
 800c558:	429a      	cmp	r2, r3
 800c55a:	d909      	bls.n	800c570 <pbuf_take+0x68>
 800c55c:	4b2c      	ldr	r3, [pc, #176]	@ (800c610 <pbuf_take+0x108>)
 800c55e:	f240 42b5 	movw	r2, #1205	@ 0x4b5
 800c562:	492f      	ldr	r1, [pc, #188]	@ (800c620 <pbuf_take+0x118>)
 800c564:	482c      	ldr	r0, [pc, #176]	@ (800c618 <pbuf_take+0x110>)
 800c566:	f009 fb69 	bl	8015c3c <iprintf>
 800c56a:	f04f 33ff 	mov.w	r3, #4294967295
 800c56e:	e04b      	b.n	800c608 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	2b00      	cmp	r3, #0
 800c574:	d007      	beq.n	800c586 <pbuf_take+0x7e>
 800c576:	68bb      	ldr	r3, [r7, #8]
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d004      	beq.n	800c586 <pbuf_take+0x7e>
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	891b      	ldrh	r3, [r3, #8]
 800c580:	88fa      	ldrh	r2, [r7, #6]
 800c582:	429a      	cmp	r2, r3
 800c584:	d902      	bls.n	800c58c <pbuf_take+0x84>
    return ERR_ARG;
 800c586:	f06f 030f 	mvn.w	r3, #15
 800c58a:	e03d      	b.n	800c608 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	61fb      	str	r3, [r7, #28]
 800c590:	e028      	b.n	800c5e4 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 800c592:	69fb      	ldr	r3, [r7, #28]
 800c594:	2b00      	cmp	r3, #0
 800c596:	d106      	bne.n	800c5a6 <pbuf_take+0x9e>
 800c598:	4b1d      	ldr	r3, [pc, #116]	@ (800c610 <pbuf_take+0x108>)
 800c59a:	f240 42bd 	movw	r2, #1213	@ 0x4bd
 800c59e:	4921      	ldr	r1, [pc, #132]	@ (800c624 <pbuf_take+0x11c>)
 800c5a0:	481d      	ldr	r0, [pc, #116]	@ (800c618 <pbuf_take+0x110>)
 800c5a2:	f009 fb4b 	bl	8015c3c <iprintf>
    buf_copy_len = total_copy_len;
 800c5a6:	697b      	ldr	r3, [r7, #20]
 800c5a8:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 800c5aa:	69fb      	ldr	r3, [r7, #28]
 800c5ac:	895b      	ldrh	r3, [r3, #10]
 800c5ae:	461a      	mov	r2, r3
 800c5b0:	69bb      	ldr	r3, [r7, #24]
 800c5b2:	4293      	cmp	r3, r2
 800c5b4:	d902      	bls.n	800c5bc <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 800c5b6:	69fb      	ldr	r3, [r7, #28]
 800c5b8:	895b      	ldrh	r3, [r3, #10]
 800c5ba:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 800c5bc:	69fb      	ldr	r3, [r7, #28]
 800c5be:	6858      	ldr	r0, [r3, #4]
 800c5c0:	68ba      	ldr	r2, [r7, #8]
 800c5c2:	693b      	ldr	r3, [r7, #16]
 800c5c4:	4413      	add	r3, r2
 800c5c6:	69ba      	ldr	r2, [r7, #24]
 800c5c8:	4619      	mov	r1, r3
 800c5ca:	f009 fc8e 	bl	8015eea <memcpy>
    total_copy_len -= buf_copy_len;
 800c5ce:	697a      	ldr	r2, [r7, #20]
 800c5d0:	69bb      	ldr	r3, [r7, #24]
 800c5d2:	1ad3      	subs	r3, r2, r3
 800c5d4:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 800c5d6:	693a      	ldr	r2, [r7, #16]
 800c5d8:	69bb      	ldr	r3, [r7, #24]
 800c5da:	4413      	add	r3, r2
 800c5dc:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 800c5de:	69fb      	ldr	r3, [r7, #28]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	61fb      	str	r3, [r7, #28]
 800c5e4:	697b      	ldr	r3, [r7, #20]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d1d3      	bne.n	800c592 <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 800c5ea:	697b      	ldr	r3, [r7, #20]
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d103      	bne.n	800c5f8 <pbuf_take+0xf0>
 800c5f0:	88fb      	ldrh	r3, [r7, #6]
 800c5f2:	693a      	ldr	r2, [r7, #16]
 800c5f4:	429a      	cmp	r2, r3
 800c5f6:	d006      	beq.n	800c606 <pbuf_take+0xfe>
 800c5f8:	4b05      	ldr	r3, [pc, #20]	@ (800c610 <pbuf_take+0x108>)
 800c5fa:	f44f 6299 	mov.w	r2, #1224	@ 0x4c8
 800c5fe:	490a      	ldr	r1, [pc, #40]	@ (800c628 <pbuf_take+0x120>)
 800c600:	4805      	ldr	r0, [pc, #20]	@ (800c618 <pbuf_take+0x110>)
 800c602:	f009 fb1b 	bl	8015c3c <iprintf>
  return ERR_OK;
 800c606:	2300      	movs	r3, #0
}
 800c608:	4618      	mov	r0, r3
 800c60a:	3720      	adds	r7, #32
 800c60c:	46bd      	mov	sp, r7
 800c60e:	bd80      	pop	{r7, pc}
 800c610:	0801e7a8 	.word	0x0801e7a8
 800c614:	0801eb80 	.word	0x0801eb80
 800c618:	0801e808 	.word	0x0801e808
 800c61c:	0801eb98 	.word	0x0801eb98
 800c620:	0801ebb4 	.word	0x0801ebb4
 800c624:	0801ebd4 	.word	0x0801ebd4
 800c628:	0801ebec 	.word	0x0801ebec

0800c62c <pbuf_take_at>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
 800c62c:	b580      	push	{r7, lr}
 800c62e:	b088      	sub	sp, #32
 800c630:	af00      	add	r7, sp, #0
 800c632:	60f8      	str	r0, [r7, #12]
 800c634:	60b9      	str	r1, [r7, #8]
 800c636:	4611      	mov	r1, r2
 800c638:	461a      	mov	r2, r3
 800c63a:	460b      	mov	r3, r1
 800c63c:	80fb      	strh	r3, [r7, #6]
 800c63e:	4613      	mov	r3, r2
 800c640:	80bb      	strh	r3, [r7, #4]
  u16_t target_offset;
  struct pbuf *q = pbuf_skip(buf, offset, &target_offset);
 800c642:	f107 0210 	add.w	r2, r7, #16
 800c646:	88bb      	ldrh	r3, [r7, #4]
 800c648:	4619      	mov	r1, r3
 800c64a:	68f8      	ldr	r0, [r7, #12]
 800c64c:	f7ff ff49 	bl	800c4e2 <pbuf_skip>
 800c650:	61f8      	str	r0, [r7, #28]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
 800c652:	69fb      	ldr	r3, [r7, #28]
 800c654:	2b00      	cmp	r3, #0
 800c656:	d047      	beq.n	800c6e8 <pbuf_take_at+0xbc>
 800c658:	69fb      	ldr	r3, [r7, #28]
 800c65a:	891b      	ldrh	r3, [r3, #8]
 800c65c:	461a      	mov	r2, r3
 800c65e:	8a3b      	ldrh	r3, [r7, #16]
 800c660:	4619      	mov	r1, r3
 800c662:	88fb      	ldrh	r3, [r7, #6]
 800c664:	440b      	add	r3, r1
 800c666:	429a      	cmp	r2, r3
 800c668:	db3e      	blt.n	800c6e8 <pbuf_take_at+0xbc>
    u16_t remaining_len = len;
 800c66a:	88fb      	ldrh	r3, [r7, #6]
 800c66c:	837b      	strh	r3, [r7, #26]
    const u8_t *src_ptr = (const u8_t *)dataptr;
 800c66e:	68bb      	ldr	r3, [r7, #8]
 800c670:	617b      	str	r3, [r7, #20]
    /* copy the part that goes into the first pbuf */
    u16_t first_copy_len;
    LWIP_ASSERT("check pbuf_skip result", target_offset < q->len);
 800c672:	69fb      	ldr	r3, [r7, #28]
 800c674:	895a      	ldrh	r2, [r3, #10]
 800c676:	8a3b      	ldrh	r3, [r7, #16]
 800c678:	429a      	cmp	r2, r3
 800c67a:	d806      	bhi.n	800c68a <pbuf_take_at+0x5e>
 800c67c:	4b1d      	ldr	r3, [pc, #116]	@ (800c6f4 <pbuf_take_at+0xc8>)
 800c67e:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 800c682:	491d      	ldr	r1, [pc, #116]	@ (800c6f8 <pbuf_take_at+0xcc>)
 800c684:	481d      	ldr	r0, [pc, #116]	@ (800c6fc <pbuf_take_at+0xd0>)
 800c686:	f009 fad9 	bl	8015c3c <iprintf>
    first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
 800c68a:	69fb      	ldr	r3, [r7, #28]
 800c68c:	895b      	ldrh	r3, [r3, #10]
 800c68e:	461a      	mov	r2, r3
 800c690:	8a3b      	ldrh	r3, [r7, #16]
 800c692:	1ad2      	subs	r2, r2, r3
 800c694:	88fb      	ldrh	r3, [r7, #6]
 800c696:	429a      	cmp	r2, r3
 800c698:	da05      	bge.n	800c6a6 <pbuf_take_at+0x7a>
 800c69a:	69fb      	ldr	r3, [r7, #28]
 800c69c:	895a      	ldrh	r2, [r3, #10]
 800c69e:	8a3b      	ldrh	r3, [r7, #16]
 800c6a0:	1ad3      	subs	r3, r2, r3
 800c6a2:	b29b      	uxth	r3, r3
 800c6a4:	e000      	b.n	800c6a8 <pbuf_take_at+0x7c>
 800c6a6:	88fb      	ldrh	r3, [r7, #6]
 800c6a8:	827b      	strh	r3, [r7, #18]
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 800c6aa:	69fb      	ldr	r3, [r7, #28]
 800c6ac:	685b      	ldr	r3, [r3, #4]
 800c6ae:	8a3a      	ldrh	r2, [r7, #16]
 800c6b0:	4413      	add	r3, r2
 800c6b2:	8a7a      	ldrh	r2, [r7, #18]
 800c6b4:	68b9      	ldr	r1, [r7, #8]
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	f009 fc17 	bl	8015eea <memcpy>
    remaining_len = (u16_t)(remaining_len - first_copy_len);
 800c6bc:	8b7a      	ldrh	r2, [r7, #26]
 800c6be:	8a7b      	ldrh	r3, [r7, #18]
 800c6c0:	1ad3      	subs	r3, r2, r3
 800c6c2:	837b      	strh	r3, [r7, #26]
    src_ptr += first_copy_len;
 800c6c4:	8a7b      	ldrh	r3, [r7, #18]
 800c6c6:	697a      	ldr	r2, [r7, #20]
 800c6c8:	4413      	add	r3, r2
 800c6ca:	617b      	str	r3, [r7, #20]
    if (remaining_len > 0) {
 800c6cc:	8b7b      	ldrh	r3, [r7, #26]
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d008      	beq.n	800c6e4 <pbuf_take_at+0xb8>
      return pbuf_take(q->next, src_ptr, remaining_len);
 800c6d2:	69fb      	ldr	r3, [r7, #28]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	8b7a      	ldrh	r2, [r7, #26]
 800c6d8:	6979      	ldr	r1, [r7, #20]
 800c6da:	4618      	mov	r0, r3
 800c6dc:	f7ff ff14 	bl	800c508 <pbuf_take>
 800c6e0:	4603      	mov	r3, r0
 800c6e2:	e003      	b.n	800c6ec <pbuf_take_at+0xc0>
    }
    return ERR_OK;
 800c6e4:	2300      	movs	r3, #0
 800c6e6:	e001      	b.n	800c6ec <pbuf_take_at+0xc0>
  }
  return ERR_MEM;
 800c6e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c6ec:	4618      	mov	r0, r3
 800c6ee:	3720      	adds	r7, #32
 800c6f0:	46bd      	mov	sp, r7
 800c6f2:	bd80      	pop	{r7, pc}
 800c6f4:	0801e7a8 	.word	0x0801e7a8
 800c6f8:	0801ec04 	.word	0x0801ec04
 800c6fc:	0801e808 	.word	0x0801e808

0800c700 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800c700:	b580      	push	{r7, lr}
 800c702:	b084      	sub	sp, #16
 800c704:	af00      	add	r7, sp, #0
 800c706:	4603      	mov	r3, r0
 800c708:	603a      	str	r2, [r7, #0]
 800c70a:	71fb      	strb	r3, [r7, #7]
 800c70c:	460b      	mov	r3, r1
 800c70e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800c710:	683b      	ldr	r3, [r7, #0]
 800c712:	8919      	ldrh	r1, [r3, #8]
 800c714:	88ba      	ldrh	r2, [r7, #4]
 800c716:	79fb      	ldrb	r3, [r7, #7]
 800c718:	4618      	mov	r0, r3
 800c71a:	f7ff f969 	bl	800b9f0 <pbuf_alloc>
 800c71e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	2b00      	cmp	r3, #0
 800c724:	d101      	bne.n	800c72a <pbuf_clone+0x2a>
    return NULL;
 800c726:	2300      	movs	r3, #0
 800c728:	e011      	b.n	800c74e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800c72a:	6839      	ldr	r1, [r7, #0]
 800c72c:	68f8      	ldr	r0, [r7, #12]
 800c72e:	f7ff fd6b 	bl	800c208 <pbuf_copy>
 800c732:	4603      	mov	r3, r0
 800c734:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800c736:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d006      	beq.n	800c74c <pbuf_clone+0x4c>
 800c73e:	4b06      	ldr	r3, [pc, #24]	@ (800c758 <pbuf_clone+0x58>)
 800c740:	f240 5224 	movw	r2, #1316	@ 0x524
 800c744:	4905      	ldr	r1, [pc, #20]	@ (800c75c <pbuf_clone+0x5c>)
 800c746:	4806      	ldr	r0, [pc, #24]	@ (800c760 <pbuf_clone+0x60>)
 800c748:	f009 fa78 	bl	8015c3c <iprintf>
  return q;
 800c74c:	68fb      	ldr	r3, [r7, #12]
}
 800c74e:	4618      	mov	r0, r3
 800c750:	3710      	adds	r7, #16
 800c752:	46bd      	mov	sp, r7
 800c754:	bd80      	pop	{r7, pc}
 800c756:	bf00      	nop
 800c758:	0801e7a8 	.word	0x0801e7a8
 800c75c:	0801ec1c 	.word	0x0801ec1c
 800c760:	0801e808 	.word	0x0801e808

0800c764 <pbuf_put_at>:
 * @param offset offset into p of the byte to write
 * @param data byte to write at an offset into p
 */
void
pbuf_put_at(struct pbuf *p, u16_t offset, u8_t data)
{
 800c764:	b580      	push	{r7, lr}
 800c766:	b084      	sub	sp, #16
 800c768:	af00      	add	r7, sp, #0
 800c76a:	6078      	str	r0, [r7, #4]
 800c76c:	460b      	mov	r3, r1
 800c76e:	807b      	strh	r3, [r7, #2]
 800c770:	4613      	mov	r3, r2
 800c772:	707b      	strb	r3, [r7, #1]
  u16_t q_idx;
  struct pbuf *q = pbuf_skip(p, offset, &q_idx);
 800c774:	f107 020a 	add.w	r2, r7, #10
 800c778:	887b      	ldrh	r3, [r7, #2]
 800c77a:	4619      	mov	r1, r3
 800c77c:	6878      	ldr	r0, [r7, #4]
 800c77e:	f7ff feb0 	bl	800c4e2 <pbuf_skip>
 800c782:	60f8      	str	r0, [r7, #12]

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	2b00      	cmp	r3, #0
 800c788:	d00a      	beq.n	800c7a0 <pbuf_put_at+0x3c>
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	895a      	ldrh	r2, [r3, #10]
 800c78e:	897b      	ldrh	r3, [r7, #10]
 800c790:	429a      	cmp	r2, r3
 800c792:	d905      	bls.n	800c7a0 <pbuf_put_at+0x3c>
    ((u8_t *)q->payload)[q_idx] = data;
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	685b      	ldr	r3, [r3, #4]
 800c798:	897a      	ldrh	r2, [r7, #10]
 800c79a:	4413      	add	r3, r2
 800c79c:	787a      	ldrb	r2, [r7, #1]
 800c79e:	701a      	strb	r2, [r3, #0]
  }
}
 800c7a0:	bf00      	nop
 800c7a2:	3710      	adds	r7, #16
 800c7a4:	46bd      	mov	sp, r7
 800c7a6:	bd80      	pop	{r7, pc}

0800c7a8 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800c7a8:	b580      	push	{r7, lr}
 800c7aa:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800c7ac:	f008 fab4 	bl	8014d18 <rand>
 800c7b0:	4603      	mov	r3, r0
 800c7b2:	b29b      	uxth	r3, r3
 800c7b4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c7b8:	b29b      	uxth	r3, r3
 800c7ba:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800c7be:	b29a      	uxth	r2, r3
 800c7c0:	4b01      	ldr	r3, [pc, #4]	@ (800c7c8 <tcp_init+0x20>)
 800c7c2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800c7c4:	bf00      	nop
 800c7c6:	bd80      	pop	{r7, pc}
 800c7c8:	20000460 	.word	0x20000460

0800c7cc <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800c7cc:	b580      	push	{r7, lr}
 800c7ce:	b082      	sub	sp, #8
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	7d1b      	ldrb	r3, [r3, #20]
 800c7d8:	2b01      	cmp	r3, #1
 800c7da:	d105      	bne.n	800c7e8 <tcp_free+0x1c>
 800c7dc:	4b06      	ldr	r3, [pc, #24]	@ (800c7f8 <tcp_free+0x2c>)
 800c7de:	22d4      	movs	r2, #212	@ 0xd4
 800c7e0:	4906      	ldr	r1, [pc, #24]	@ (800c7fc <tcp_free+0x30>)
 800c7e2:	4807      	ldr	r0, [pc, #28]	@ (800c800 <tcp_free+0x34>)
 800c7e4:	f009 fa2a 	bl	8015c3c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800c7e8:	6879      	ldr	r1, [r7, #4]
 800c7ea:	2001      	movs	r0, #1
 800c7ec:	f7fe fd6e 	bl	800b2cc <memp_free>
}
 800c7f0:	bf00      	nop
 800c7f2:	3708      	adds	r7, #8
 800c7f4:	46bd      	mov	sp, r7
 800c7f6:	bd80      	pop	{r7, pc}
 800c7f8:	0801eca8 	.word	0x0801eca8
 800c7fc:	0801ecd8 	.word	0x0801ecd8
 800c800:	0801ecec 	.word	0x0801ecec

0800c804 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800c804:	b580      	push	{r7, lr}
 800c806:	b082      	sub	sp, #8
 800c808:	af00      	add	r7, sp, #0
 800c80a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	7d1b      	ldrb	r3, [r3, #20]
 800c810:	2b01      	cmp	r3, #1
 800c812:	d105      	bne.n	800c820 <tcp_free_listen+0x1c>
 800c814:	4b06      	ldr	r3, [pc, #24]	@ (800c830 <tcp_free_listen+0x2c>)
 800c816:	22df      	movs	r2, #223	@ 0xdf
 800c818:	4906      	ldr	r1, [pc, #24]	@ (800c834 <tcp_free_listen+0x30>)
 800c81a:	4807      	ldr	r0, [pc, #28]	@ (800c838 <tcp_free_listen+0x34>)
 800c81c:	f009 fa0e 	bl	8015c3c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800c820:	6879      	ldr	r1, [r7, #4]
 800c822:	2002      	movs	r0, #2
 800c824:	f7fe fd52 	bl	800b2cc <memp_free>
}
 800c828:	bf00      	nop
 800c82a:	3708      	adds	r7, #8
 800c82c:	46bd      	mov	sp, r7
 800c82e:	bd80      	pop	{r7, pc}
 800c830:	0801eca8 	.word	0x0801eca8
 800c834:	0801ed14 	.word	0x0801ed14
 800c838:	0801ecec 	.word	0x0801ecec

0800c83c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800c83c:	b580      	push	{r7, lr}
 800c83e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800c840:	f000 fea4 	bl	800d58c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800c844:	4b07      	ldr	r3, [pc, #28]	@ (800c864 <tcp_tmr+0x28>)
 800c846:	781b      	ldrb	r3, [r3, #0]
 800c848:	3301      	adds	r3, #1
 800c84a:	b2da      	uxtb	r2, r3
 800c84c:	4b05      	ldr	r3, [pc, #20]	@ (800c864 <tcp_tmr+0x28>)
 800c84e:	701a      	strb	r2, [r3, #0]
 800c850:	4b04      	ldr	r3, [pc, #16]	@ (800c864 <tcp_tmr+0x28>)
 800c852:	781b      	ldrb	r3, [r3, #0]
 800c854:	f003 0301 	and.w	r3, r3, #1
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d001      	beq.n	800c860 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800c85c:	f000 fb54 	bl	800cf08 <tcp_slowtmr>
  }
}
 800c860:	bf00      	nop
 800c862:	bd80      	pop	{r7, pc}
 800c864:	20009259 	.word	0x20009259

0800c868 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800c868:	b580      	push	{r7, lr}
 800c86a:	b084      	sub	sp, #16
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	6078      	str	r0, [r7, #4]
 800c870:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800c872:	683b      	ldr	r3, [r7, #0]
 800c874:	2b00      	cmp	r3, #0
 800c876:	d105      	bne.n	800c884 <tcp_remove_listener+0x1c>
 800c878:	4b0d      	ldr	r3, [pc, #52]	@ (800c8b0 <tcp_remove_listener+0x48>)
 800c87a:	22ff      	movs	r2, #255	@ 0xff
 800c87c:	490d      	ldr	r1, [pc, #52]	@ (800c8b4 <tcp_remove_listener+0x4c>)
 800c87e:	480e      	ldr	r0, [pc, #56]	@ (800c8b8 <tcp_remove_listener+0x50>)
 800c880:	f009 f9dc 	bl	8015c3c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	60fb      	str	r3, [r7, #12]
 800c888:	e00a      	b.n	800c8a0 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c88e:	683a      	ldr	r2, [r7, #0]
 800c890:	429a      	cmp	r2, r3
 800c892:	d102      	bne.n	800c89a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	2200      	movs	r2, #0
 800c898:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	68db      	ldr	r3, [r3, #12]
 800c89e:	60fb      	str	r3, [r7, #12]
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d1f1      	bne.n	800c88a <tcp_remove_listener+0x22>
    }
  }
}
 800c8a6:	bf00      	nop
 800c8a8:	bf00      	nop
 800c8aa:	3710      	adds	r7, #16
 800c8ac:	46bd      	mov	sp, r7
 800c8ae:	bd80      	pop	{r7, pc}
 800c8b0:	0801eca8 	.word	0x0801eca8
 800c8b4:	0801ed30 	.word	0x0801ed30
 800c8b8:	0801ecec 	.word	0x0801ecec

0800c8bc <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800c8bc:	b580      	push	{r7, lr}
 800c8be:	b084      	sub	sp, #16
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d106      	bne.n	800c8d8 <tcp_listen_closed+0x1c>
 800c8ca:	4b14      	ldr	r3, [pc, #80]	@ (800c91c <tcp_listen_closed+0x60>)
 800c8cc:	f240 1211 	movw	r2, #273	@ 0x111
 800c8d0:	4913      	ldr	r1, [pc, #76]	@ (800c920 <tcp_listen_closed+0x64>)
 800c8d2:	4814      	ldr	r0, [pc, #80]	@ (800c924 <tcp_listen_closed+0x68>)
 800c8d4:	f009 f9b2 	bl	8015c3c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	7d1b      	ldrb	r3, [r3, #20]
 800c8dc:	2b01      	cmp	r3, #1
 800c8de:	d006      	beq.n	800c8ee <tcp_listen_closed+0x32>
 800c8e0:	4b0e      	ldr	r3, [pc, #56]	@ (800c91c <tcp_listen_closed+0x60>)
 800c8e2:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800c8e6:	4910      	ldr	r1, [pc, #64]	@ (800c928 <tcp_listen_closed+0x6c>)
 800c8e8:	480e      	ldr	r0, [pc, #56]	@ (800c924 <tcp_listen_closed+0x68>)
 800c8ea:	f009 f9a7 	bl	8015c3c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c8ee:	2301      	movs	r3, #1
 800c8f0:	60fb      	str	r3, [r7, #12]
 800c8f2:	e00b      	b.n	800c90c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800c8f4:	4a0d      	ldr	r2, [pc, #52]	@ (800c92c <tcp_listen_closed+0x70>)
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	6879      	ldr	r1, [r7, #4]
 800c900:	4618      	mov	r0, r3
 800c902:	f7ff ffb1 	bl	800c868 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	3301      	adds	r3, #1
 800c90a:	60fb      	str	r3, [r7, #12]
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	2b03      	cmp	r3, #3
 800c910:	d9f0      	bls.n	800c8f4 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800c912:	bf00      	nop
 800c914:	bf00      	nop
 800c916:	3710      	adds	r7, #16
 800c918:	46bd      	mov	sp, r7
 800c91a:	bd80      	pop	{r7, pc}
 800c91c:	0801eca8 	.word	0x0801eca8
 800c920:	0801ed58 	.word	0x0801ed58
 800c924:	0801ecec 	.word	0x0801ecec
 800c928:	0801ed64 	.word	0x0801ed64
 800c92c:	08020c88 	.word	0x08020c88

0800c930 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800c930:	b5b0      	push	{r4, r5, r7, lr}
 800c932:	b088      	sub	sp, #32
 800c934:	af04      	add	r7, sp, #16
 800c936:	6078      	str	r0, [r7, #4]
 800c938:	460b      	mov	r3, r1
 800c93a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d106      	bne.n	800c950 <tcp_close_shutdown+0x20>
 800c942:	4b63      	ldr	r3, [pc, #396]	@ (800cad0 <tcp_close_shutdown+0x1a0>)
 800c944:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800c948:	4962      	ldr	r1, [pc, #392]	@ (800cad4 <tcp_close_shutdown+0x1a4>)
 800c94a:	4863      	ldr	r0, [pc, #396]	@ (800cad8 <tcp_close_shutdown+0x1a8>)
 800c94c:	f009 f976 	bl	8015c3c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800c950:	78fb      	ldrb	r3, [r7, #3]
 800c952:	2b00      	cmp	r3, #0
 800c954:	d066      	beq.n	800ca24 <tcp_close_shutdown+0xf4>
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	7d1b      	ldrb	r3, [r3, #20]
 800c95a:	2b04      	cmp	r3, #4
 800c95c:	d003      	beq.n	800c966 <tcp_close_shutdown+0x36>
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	7d1b      	ldrb	r3, [r3, #20]
 800c962:	2b07      	cmp	r3, #7
 800c964:	d15e      	bne.n	800ca24 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d104      	bne.n	800c978 <tcp_close_shutdown+0x48>
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c972:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800c976:	d055      	beq.n	800ca24 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	8b5b      	ldrh	r3, [r3, #26]
 800c97c:	f003 0310 	and.w	r3, r3, #16
 800c980:	2b00      	cmp	r3, #0
 800c982:	d106      	bne.n	800c992 <tcp_close_shutdown+0x62>
 800c984:	4b52      	ldr	r3, [pc, #328]	@ (800cad0 <tcp_close_shutdown+0x1a0>)
 800c986:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800c98a:	4954      	ldr	r1, [pc, #336]	@ (800cadc <tcp_close_shutdown+0x1ac>)
 800c98c:	4852      	ldr	r0, [pc, #328]	@ (800cad8 <tcp_close_shutdown+0x1a8>)
 800c98e:	f009 f955 	bl	8015c3c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800c99a:	687d      	ldr	r5, [r7, #4]
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	3304      	adds	r3, #4
 800c9a0:	687a      	ldr	r2, [r7, #4]
 800c9a2:	8ad2      	ldrh	r2, [r2, #22]
 800c9a4:	6879      	ldr	r1, [r7, #4]
 800c9a6:	8b09      	ldrh	r1, [r1, #24]
 800c9a8:	9102      	str	r1, [sp, #8]
 800c9aa:	9201      	str	r2, [sp, #4]
 800c9ac:	9300      	str	r3, [sp, #0]
 800c9ae:	462b      	mov	r3, r5
 800c9b0:	4622      	mov	r2, r4
 800c9b2:	4601      	mov	r1, r0
 800c9b4:	6878      	ldr	r0, [r7, #4]
 800c9b6:	f004 fe8d 	bl	80116d4 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800c9ba:	6878      	ldr	r0, [r7, #4]
 800c9bc:	f001 f8c8 	bl	800db50 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800c9c0:	4b47      	ldr	r3, [pc, #284]	@ (800cae0 <tcp_close_shutdown+0x1b0>)
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	687a      	ldr	r2, [r7, #4]
 800c9c6:	429a      	cmp	r2, r3
 800c9c8:	d105      	bne.n	800c9d6 <tcp_close_shutdown+0xa6>
 800c9ca:	4b45      	ldr	r3, [pc, #276]	@ (800cae0 <tcp_close_shutdown+0x1b0>)
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	68db      	ldr	r3, [r3, #12]
 800c9d0:	4a43      	ldr	r2, [pc, #268]	@ (800cae0 <tcp_close_shutdown+0x1b0>)
 800c9d2:	6013      	str	r3, [r2, #0]
 800c9d4:	e013      	b.n	800c9fe <tcp_close_shutdown+0xce>
 800c9d6:	4b42      	ldr	r3, [pc, #264]	@ (800cae0 <tcp_close_shutdown+0x1b0>)
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	60fb      	str	r3, [r7, #12]
 800c9dc:	e00c      	b.n	800c9f8 <tcp_close_shutdown+0xc8>
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	68db      	ldr	r3, [r3, #12]
 800c9e2:	687a      	ldr	r2, [r7, #4]
 800c9e4:	429a      	cmp	r2, r3
 800c9e6:	d104      	bne.n	800c9f2 <tcp_close_shutdown+0xc2>
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	68da      	ldr	r2, [r3, #12]
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	60da      	str	r2, [r3, #12]
 800c9f0:	e005      	b.n	800c9fe <tcp_close_shutdown+0xce>
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	68db      	ldr	r3, [r3, #12]
 800c9f6:	60fb      	str	r3, [r7, #12]
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d1ef      	bne.n	800c9de <tcp_close_shutdown+0xae>
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	2200      	movs	r2, #0
 800ca02:	60da      	str	r2, [r3, #12]
 800ca04:	4b37      	ldr	r3, [pc, #220]	@ (800cae4 <tcp_close_shutdown+0x1b4>)
 800ca06:	2201      	movs	r2, #1
 800ca08:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800ca0a:	4b37      	ldr	r3, [pc, #220]	@ (800cae8 <tcp_close_shutdown+0x1b8>)
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	687a      	ldr	r2, [r7, #4]
 800ca10:	429a      	cmp	r2, r3
 800ca12:	d102      	bne.n	800ca1a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800ca14:	f003 fd5c 	bl	80104d0 <tcp_trigger_input_pcb_close>
 800ca18:	e002      	b.n	800ca20 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800ca1a:	6878      	ldr	r0, [r7, #4]
 800ca1c:	f7ff fed6 	bl	800c7cc <tcp_free>
      }
      return ERR_OK;
 800ca20:	2300      	movs	r3, #0
 800ca22:	e050      	b.n	800cac6 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	7d1b      	ldrb	r3, [r3, #20]
 800ca28:	2b02      	cmp	r3, #2
 800ca2a:	d03b      	beq.n	800caa4 <tcp_close_shutdown+0x174>
 800ca2c:	2b02      	cmp	r3, #2
 800ca2e:	dc44      	bgt.n	800caba <tcp_close_shutdown+0x18a>
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d002      	beq.n	800ca3a <tcp_close_shutdown+0x10a>
 800ca34:	2b01      	cmp	r3, #1
 800ca36:	d02a      	beq.n	800ca8e <tcp_close_shutdown+0x15e>
 800ca38:	e03f      	b.n	800caba <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	8adb      	ldrh	r3, [r3, #22]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d021      	beq.n	800ca86 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800ca42:	4b2a      	ldr	r3, [pc, #168]	@ (800caec <tcp_close_shutdown+0x1bc>)
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	687a      	ldr	r2, [r7, #4]
 800ca48:	429a      	cmp	r2, r3
 800ca4a:	d105      	bne.n	800ca58 <tcp_close_shutdown+0x128>
 800ca4c:	4b27      	ldr	r3, [pc, #156]	@ (800caec <tcp_close_shutdown+0x1bc>)
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	68db      	ldr	r3, [r3, #12]
 800ca52:	4a26      	ldr	r2, [pc, #152]	@ (800caec <tcp_close_shutdown+0x1bc>)
 800ca54:	6013      	str	r3, [r2, #0]
 800ca56:	e013      	b.n	800ca80 <tcp_close_shutdown+0x150>
 800ca58:	4b24      	ldr	r3, [pc, #144]	@ (800caec <tcp_close_shutdown+0x1bc>)
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	60bb      	str	r3, [r7, #8]
 800ca5e:	e00c      	b.n	800ca7a <tcp_close_shutdown+0x14a>
 800ca60:	68bb      	ldr	r3, [r7, #8]
 800ca62:	68db      	ldr	r3, [r3, #12]
 800ca64:	687a      	ldr	r2, [r7, #4]
 800ca66:	429a      	cmp	r2, r3
 800ca68:	d104      	bne.n	800ca74 <tcp_close_shutdown+0x144>
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	68da      	ldr	r2, [r3, #12]
 800ca6e:	68bb      	ldr	r3, [r7, #8]
 800ca70:	60da      	str	r2, [r3, #12]
 800ca72:	e005      	b.n	800ca80 <tcp_close_shutdown+0x150>
 800ca74:	68bb      	ldr	r3, [r7, #8]
 800ca76:	68db      	ldr	r3, [r3, #12]
 800ca78:	60bb      	str	r3, [r7, #8]
 800ca7a:	68bb      	ldr	r3, [r7, #8]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d1ef      	bne.n	800ca60 <tcp_close_shutdown+0x130>
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	2200      	movs	r2, #0
 800ca84:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800ca86:	6878      	ldr	r0, [r7, #4]
 800ca88:	f7ff fea0 	bl	800c7cc <tcp_free>
      break;
 800ca8c:	e01a      	b.n	800cac4 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800ca8e:	6878      	ldr	r0, [r7, #4]
 800ca90:	f7ff ff14 	bl	800c8bc <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800ca94:	6879      	ldr	r1, [r7, #4]
 800ca96:	4816      	ldr	r0, [pc, #88]	@ (800caf0 <tcp_close_shutdown+0x1c0>)
 800ca98:	f001 f8aa 	bl	800dbf0 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800ca9c:	6878      	ldr	r0, [r7, #4]
 800ca9e:	f7ff feb1 	bl	800c804 <tcp_free_listen>
      break;
 800caa2:	e00f      	b.n	800cac4 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800caa4:	6879      	ldr	r1, [r7, #4]
 800caa6:	480e      	ldr	r0, [pc, #56]	@ (800cae0 <tcp_close_shutdown+0x1b0>)
 800caa8:	f001 f8a2 	bl	800dbf0 <tcp_pcb_remove>
 800caac:	4b0d      	ldr	r3, [pc, #52]	@ (800cae4 <tcp_close_shutdown+0x1b4>)
 800caae:	2201      	movs	r2, #1
 800cab0:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800cab2:	6878      	ldr	r0, [r7, #4]
 800cab4:	f7ff fe8a 	bl	800c7cc <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800cab8:	e004      	b.n	800cac4 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800caba:	6878      	ldr	r0, [r7, #4]
 800cabc:	f000 f81a 	bl	800caf4 <tcp_close_shutdown_fin>
 800cac0:	4603      	mov	r3, r0
 800cac2:	e000      	b.n	800cac6 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800cac4:	2300      	movs	r3, #0
}
 800cac6:	4618      	mov	r0, r3
 800cac8:	3710      	adds	r7, #16
 800caca:	46bd      	mov	sp, r7
 800cacc:	bdb0      	pop	{r4, r5, r7, pc}
 800cace:	bf00      	nop
 800cad0:	0801eca8 	.word	0x0801eca8
 800cad4:	0801ed7c 	.word	0x0801ed7c
 800cad8:	0801ecec 	.word	0x0801ecec
 800cadc:	0801ed9c 	.word	0x0801ed9c
 800cae0:	20009250 	.word	0x20009250
 800cae4:	20009258 	.word	0x20009258
 800cae8:	20009290 	.word	0x20009290
 800caec:	20009248 	.word	0x20009248
 800caf0:	2000924c 	.word	0x2000924c

0800caf4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800caf4:	b580      	push	{r7, lr}
 800caf6:	b084      	sub	sp, #16
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d106      	bne.n	800cb10 <tcp_close_shutdown_fin+0x1c>
 800cb02:	4b2e      	ldr	r3, [pc, #184]	@ (800cbbc <tcp_close_shutdown_fin+0xc8>)
 800cb04:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800cb08:	492d      	ldr	r1, [pc, #180]	@ (800cbc0 <tcp_close_shutdown_fin+0xcc>)
 800cb0a:	482e      	ldr	r0, [pc, #184]	@ (800cbc4 <tcp_close_shutdown_fin+0xd0>)
 800cb0c:	f009 f896 	bl	8015c3c <iprintf>

  switch (pcb->state) {
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	7d1b      	ldrb	r3, [r3, #20]
 800cb14:	2b07      	cmp	r3, #7
 800cb16:	d020      	beq.n	800cb5a <tcp_close_shutdown_fin+0x66>
 800cb18:	2b07      	cmp	r3, #7
 800cb1a:	dc2b      	bgt.n	800cb74 <tcp_close_shutdown_fin+0x80>
 800cb1c:	2b03      	cmp	r3, #3
 800cb1e:	d002      	beq.n	800cb26 <tcp_close_shutdown_fin+0x32>
 800cb20:	2b04      	cmp	r3, #4
 800cb22:	d00d      	beq.n	800cb40 <tcp_close_shutdown_fin+0x4c>
 800cb24:	e026      	b.n	800cb74 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800cb26:	6878      	ldr	r0, [r7, #4]
 800cb28:	f003 fee2 	bl	80108f0 <tcp_send_fin>
 800cb2c:	4603      	mov	r3, r0
 800cb2e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800cb30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d11f      	bne.n	800cb78 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	2205      	movs	r2, #5
 800cb3c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800cb3e:	e01b      	b.n	800cb78 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800cb40:	6878      	ldr	r0, [r7, #4]
 800cb42:	f003 fed5 	bl	80108f0 <tcp_send_fin>
 800cb46:	4603      	mov	r3, r0
 800cb48:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800cb4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d114      	bne.n	800cb7c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	2205      	movs	r2, #5
 800cb56:	751a      	strb	r2, [r3, #20]
      }
      break;
 800cb58:	e010      	b.n	800cb7c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800cb5a:	6878      	ldr	r0, [r7, #4]
 800cb5c:	f003 fec8 	bl	80108f0 <tcp_send_fin>
 800cb60:	4603      	mov	r3, r0
 800cb62:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800cb64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d109      	bne.n	800cb80 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	2209      	movs	r2, #9
 800cb70:	751a      	strb	r2, [r3, #20]
      }
      break;
 800cb72:	e005      	b.n	800cb80 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800cb74:	2300      	movs	r3, #0
 800cb76:	e01c      	b.n	800cbb2 <tcp_close_shutdown_fin+0xbe>
      break;
 800cb78:	bf00      	nop
 800cb7a:	e002      	b.n	800cb82 <tcp_close_shutdown_fin+0x8e>
      break;
 800cb7c:	bf00      	nop
 800cb7e:	e000      	b.n	800cb82 <tcp_close_shutdown_fin+0x8e>
      break;
 800cb80:	bf00      	nop
  }

  if (err == ERR_OK) {
 800cb82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d103      	bne.n	800cb92 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800cb8a:	6878      	ldr	r0, [r7, #4]
 800cb8c:	f003 ffee 	bl	8010b6c <tcp_output>
 800cb90:	e00d      	b.n	800cbae <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800cb92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb9a:	d108      	bne.n	800cbae <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	8b5b      	ldrh	r3, [r3, #26]
 800cba0:	f043 0308 	orr.w	r3, r3, #8
 800cba4:	b29a      	uxth	r2, r3
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800cbaa:	2300      	movs	r3, #0
 800cbac:	e001      	b.n	800cbb2 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800cbae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	3710      	adds	r7, #16
 800cbb6:	46bd      	mov	sp, r7
 800cbb8:	bd80      	pop	{r7, pc}
 800cbba:	bf00      	nop
 800cbbc:	0801eca8 	.word	0x0801eca8
 800cbc0:	0801ed58 	.word	0x0801ed58
 800cbc4:	0801ecec 	.word	0x0801ecec

0800cbc8 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800cbc8:	b580      	push	{r7, lr}
 800cbca:	b082      	sub	sp, #8
 800cbcc:	af00      	add	r7, sp, #0
 800cbce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d109      	bne.n	800cbea <tcp_close+0x22>
 800cbd6:	4b0f      	ldr	r3, [pc, #60]	@ (800cc14 <tcp_close+0x4c>)
 800cbd8:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800cbdc:	490e      	ldr	r1, [pc, #56]	@ (800cc18 <tcp_close+0x50>)
 800cbde:	480f      	ldr	r0, [pc, #60]	@ (800cc1c <tcp_close+0x54>)
 800cbe0:	f009 f82c 	bl	8015c3c <iprintf>
 800cbe4:	f06f 030f 	mvn.w	r3, #15
 800cbe8:	e00f      	b.n	800cc0a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	7d1b      	ldrb	r3, [r3, #20]
 800cbee:	2b01      	cmp	r3, #1
 800cbf0:	d006      	beq.n	800cc00 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	8b5b      	ldrh	r3, [r3, #26]
 800cbf6:	f043 0310 	orr.w	r3, r3, #16
 800cbfa:	b29a      	uxth	r2, r3
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800cc00:	2101      	movs	r1, #1
 800cc02:	6878      	ldr	r0, [r7, #4]
 800cc04:	f7ff fe94 	bl	800c930 <tcp_close_shutdown>
 800cc08:	4603      	mov	r3, r0
}
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	3708      	adds	r7, #8
 800cc0e:	46bd      	mov	sp, r7
 800cc10:	bd80      	pop	{r7, pc}
 800cc12:	bf00      	nop
 800cc14:	0801eca8 	.word	0x0801eca8
 800cc18:	0801edb8 	.word	0x0801edb8
 800cc1c:	0801ecec 	.word	0x0801ecec

0800cc20 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800cc20:	b580      	push	{r7, lr}
 800cc22:	b08e      	sub	sp, #56	@ 0x38
 800cc24:	af04      	add	r7, sp, #16
 800cc26:	6078      	str	r0, [r7, #4]
 800cc28:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d107      	bne.n	800cc40 <tcp_abandon+0x20>
 800cc30:	4b52      	ldr	r3, [pc, #328]	@ (800cd7c <tcp_abandon+0x15c>)
 800cc32:	f240 223d 	movw	r2, #573	@ 0x23d
 800cc36:	4952      	ldr	r1, [pc, #328]	@ (800cd80 <tcp_abandon+0x160>)
 800cc38:	4852      	ldr	r0, [pc, #328]	@ (800cd84 <tcp_abandon+0x164>)
 800cc3a:	f008 ffff 	bl	8015c3c <iprintf>
 800cc3e:	e099      	b.n	800cd74 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	7d1b      	ldrb	r3, [r3, #20]
 800cc44:	2b01      	cmp	r3, #1
 800cc46:	d106      	bne.n	800cc56 <tcp_abandon+0x36>
 800cc48:	4b4c      	ldr	r3, [pc, #304]	@ (800cd7c <tcp_abandon+0x15c>)
 800cc4a:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800cc4e:	494e      	ldr	r1, [pc, #312]	@ (800cd88 <tcp_abandon+0x168>)
 800cc50:	484c      	ldr	r0, [pc, #304]	@ (800cd84 <tcp_abandon+0x164>)
 800cc52:	f008 fff3 	bl	8015c3c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	7d1b      	ldrb	r3, [r3, #20]
 800cc5a:	2b0a      	cmp	r3, #10
 800cc5c:	d107      	bne.n	800cc6e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800cc5e:	6879      	ldr	r1, [r7, #4]
 800cc60:	484a      	ldr	r0, [pc, #296]	@ (800cd8c <tcp_abandon+0x16c>)
 800cc62:	f000 ffc5 	bl	800dbf0 <tcp_pcb_remove>
    tcp_free(pcb);
 800cc66:	6878      	ldr	r0, [r7, #4]
 800cc68:	f7ff fdb0 	bl	800c7cc <tcp_free>
 800cc6c:	e082      	b.n	800cd74 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800cc6e:	2300      	movs	r3, #0
 800cc70:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 800cc72:	2300      	movs	r3, #0
 800cc74:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cc7a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc80:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cc88:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	691b      	ldr	r3, [r3, #16]
 800cc8e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	7d1b      	ldrb	r3, [r3, #20]
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d126      	bne.n	800cce6 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	8adb      	ldrh	r3, [r3, #22]
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d02e      	beq.n	800ccfe <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800cca0:	4b3b      	ldr	r3, [pc, #236]	@ (800cd90 <tcp_abandon+0x170>)
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	687a      	ldr	r2, [r7, #4]
 800cca6:	429a      	cmp	r2, r3
 800cca8:	d105      	bne.n	800ccb6 <tcp_abandon+0x96>
 800ccaa:	4b39      	ldr	r3, [pc, #228]	@ (800cd90 <tcp_abandon+0x170>)
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	68db      	ldr	r3, [r3, #12]
 800ccb0:	4a37      	ldr	r2, [pc, #220]	@ (800cd90 <tcp_abandon+0x170>)
 800ccb2:	6013      	str	r3, [r2, #0]
 800ccb4:	e013      	b.n	800ccde <tcp_abandon+0xbe>
 800ccb6:	4b36      	ldr	r3, [pc, #216]	@ (800cd90 <tcp_abandon+0x170>)
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	61fb      	str	r3, [r7, #28]
 800ccbc:	e00c      	b.n	800ccd8 <tcp_abandon+0xb8>
 800ccbe:	69fb      	ldr	r3, [r7, #28]
 800ccc0:	68db      	ldr	r3, [r3, #12]
 800ccc2:	687a      	ldr	r2, [r7, #4]
 800ccc4:	429a      	cmp	r2, r3
 800ccc6:	d104      	bne.n	800ccd2 <tcp_abandon+0xb2>
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	68da      	ldr	r2, [r3, #12]
 800cccc:	69fb      	ldr	r3, [r7, #28]
 800ccce:	60da      	str	r2, [r3, #12]
 800ccd0:	e005      	b.n	800ccde <tcp_abandon+0xbe>
 800ccd2:	69fb      	ldr	r3, [r7, #28]
 800ccd4:	68db      	ldr	r3, [r3, #12]
 800ccd6:	61fb      	str	r3, [r7, #28]
 800ccd8:	69fb      	ldr	r3, [r7, #28]
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d1ef      	bne.n	800ccbe <tcp_abandon+0x9e>
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	2200      	movs	r2, #0
 800cce2:	60da      	str	r2, [r3, #12]
 800cce4:	e00b      	b.n	800ccfe <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800cce6:	683b      	ldr	r3, [r7, #0]
 800cce8:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	8adb      	ldrh	r3, [r3, #22]
 800ccee:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800ccf0:	6879      	ldr	r1, [r7, #4]
 800ccf2:	4828      	ldr	r0, [pc, #160]	@ (800cd94 <tcp_abandon+0x174>)
 800ccf4:	f000 ff7c 	bl	800dbf0 <tcp_pcb_remove>
 800ccf8:	4b27      	ldr	r3, [pc, #156]	@ (800cd98 <tcp_abandon+0x178>)
 800ccfa:	2201      	movs	r2, #1
 800ccfc:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d004      	beq.n	800cd10 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	f000 fd1e 	bl	800d74c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d004      	beq.n	800cd22 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	f000 fd15 	bl	800d74c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d004      	beq.n	800cd34 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cd2e:	4618      	mov	r0, r3
 800cd30:	f000 fd0c 	bl	800d74c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800cd34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d00e      	beq.n	800cd58 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800cd3a:	6879      	ldr	r1, [r7, #4]
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	3304      	adds	r3, #4
 800cd40:	687a      	ldr	r2, [r7, #4]
 800cd42:	8b12      	ldrh	r2, [r2, #24]
 800cd44:	9202      	str	r2, [sp, #8]
 800cd46:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800cd48:	9201      	str	r2, [sp, #4]
 800cd4a:	9300      	str	r3, [sp, #0]
 800cd4c:	460b      	mov	r3, r1
 800cd4e:	697a      	ldr	r2, [r7, #20]
 800cd50:	69b9      	ldr	r1, [r7, #24]
 800cd52:	6878      	ldr	r0, [r7, #4]
 800cd54:	f004 fcbe 	bl	80116d4 <tcp_rst>
    }
    last_state = pcb->state;
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	7d1b      	ldrb	r3, [r3, #20]
 800cd5c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800cd5e:	6878      	ldr	r0, [r7, #4]
 800cd60:	f7ff fd34 	bl	800c7cc <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800cd64:	693b      	ldr	r3, [r7, #16]
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d004      	beq.n	800cd74 <tcp_abandon+0x154>
 800cd6a:	693b      	ldr	r3, [r7, #16]
 800cd6c:	f06f 010c 	mvn.w	r1, #12
 800cd70:	68f8      	ldr	r0, [r7, #12]
 800cd72:	4798      	blx	r3
  }
}
 800cd74:	3728      	adds	r7, #40	@ 0x28
 800cd76:	46bd      	mov	sp, r7
 800cd78:	bd80      	pop	{r7, pc}
 800cd7a:	bf00      	nop
 800cd7c:	0801eca8 	.word	0x0801eca8
 800cd80:	0801edec 	.word	0x0801edec
 800cd84:	0801ecec 	.word	0x0801ecec
 800cd88:	0801ee08 	.word	0x0801ee08
 800cd8c:	20009254 	.word	0x20009254
 800cd90:	20009248 	.word	0x20009248
 800cd94:	20009250 	.word	0x20009250
 800cd98:	20009258 	.word	0x20009258

0800cd9c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800cd9c:	b580      	push	{r7, lr}
 800cd9e:	b082      	sub	sp, #8
 800cda0:	af00      	add	r7, sp, #0
 800cda2:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800cda4:	2101      	movs	r1, #1
 800cda6:	6878      	ldr	r0, [r7, #4]
 800cda8:	f7ff ff3a 	bl	800cc20 <tcp_abandon>
}
 800cdac:	bf00      	nop
 800cdae:	3708      	adds	r7, #8
 800cdb0:	46bd      	mov	sp, r7
 800cdb2:	bd80      	pop	{r7, pc}

0800cdb4 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800cdb4:	b580      	push	{r7, lr}
 800cdb6:	b084      	sub	sp, #16
 800cdb8:	af00      	add	r7, sp, #0
 800cdba:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d106      	bne.n	800cdd0 <tcp_update_rcv_ann_wnd+0x1c>
 800cdc2:	4b25      	ldr	r3, [pc, #148]	@ (800ce58 <tcp_update_rcv_ann_wnd+0xa4>)
 800cdc4:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800cdc8:	4924      	ldr	r1, [pc, #144]	@ (800ce5c <tcp_update_rcv_ann_wnd+0xa8>)
 800cdca:	4825      	ldr	r0, [pc, #148]	@ (800ce60 <tcp_update_rcv_ann_wnd+0xac>)
 800cdcc:	f008 ff36 	bl	8015c3c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cdd4:	687a      	ldr	r2, [r7, #4]
 800cdd6:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800cdd8:	4413      	add	r3, r2
 800cdda:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cde0:	687a      	ldr	r2, [r7, #4]
 800cde2:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 800cde4:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 800cde8:	bf28      	it	cs
 800cdea:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 800cdee:	b292      	uxth	r2, r2
 800cdf0:	4413      	add	r3, r2
 800cdf2:	68fa      	ldr	r2, [r7, #12]
 800cdf4:	1ad3      	subs	r3, r2, r3
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	db08      	blt.n	800ce0c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce06:	68fa      	ldr	r2, [r7, #12]
 800ce08:	1ad3      	subs	r3, r2, r3
 800ce0a:	e020      	b.n	800ce4e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce14:	1ad3      	subs	r3, r2, r3
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	dd03      	ble.n	800ce22 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	2200      	movs	r2, #0
 800ce1e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800ce20:	e014      	b.n	800ce4c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce2a:	1ad3      	subs	r3, r2, r3
 800ce2c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800ce2e:	68bb      	ldr	r3, [r7, #8]
 800ce30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ce34:	d306      	bcc.n	800ce44 <tcp_update_rcv_ann_wnd+0x90>
 800ce36:	4b08      	ldr	r3, [pc, #32]	@ (800ce58 <tcp_update_rcv_ann_wnd+0xa4>)
 800ce38:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800ce3c:	4909      	ldr	r1, [pc, #36]	@ (800ce64 <tcp_update_rcv_ann_wnd+0xb0>)
 800ce3e:	4808      	ldr	r0, [pc, #32]	@ (800ce60 <tcp_update_rcv_ann_wnd+0xac>)
 800ce40:	f008 fefc 	bl	8015c3c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800ce44:	68bb      	ldr	r3, [r7, #8]
 800ce46:	b29a      	uxth	r2, r3
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 800ce4c:	2300      	movs	r3, #0
  }
}
 800ce4e:	4618      	mov	r0, r3
 800ce50:	3710      	adds	r7, #16
 800ce52:	46bd      	mov	sp, r7
 800ce54:	bd80      	pop	{r7, pc}
 800ce56:	bf00      	nop
 800ce58:	0801eca8 	.word	0x0801eca8
 800ce5c:	0801ef04 	.word	0x0801ef04
 800ce60:	0801ecec 	.word	0x0801ecec
 800ce64:	0801ef28 	.word	0x0801ef28

0800ce68 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800ce68:	b580      	push	{r7, lr}
 800ce6a:	b084      	sub	sp, #16
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	6078      	str	r0, [r7, #4]
 800ce70:	460b      	mov	r3, r1
 800ce72:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d107      	bne.n	800ce8a <tcp_recved+0x22>
 800ce7a:	4b1f      	ldr	r3, [pc, #124]	@ (800cef8 <tcp_recved+0x90>)
 800ce7c:	f240 32cf 	movw	r2, #975	@ 0x3cf
 800ce80:	491e      	ldr	r1, [pc, #120]	@ (800cefc <tcp_recved+0x94>)
 800ce82:	481f      	ldr	r0, [pc, #124]	@ (800cf00 <tcp_recved+0x98>)
 800ce84:	f008 feda 	bl	8015c3c <iprintf>
 800ce88:	e032      	b.n	800cef0 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	7d1b      	ldrb	r3, [r3, #20]
 800ce8e:	2b01      	cmp	r3, #1
 800ce90:	d106      	bne.n	800cea0 <tcp_recved+0x38>
 800ce92:	4b19      	ldr	r3, [pc, #100]	@ (800cef8 <tcp_recved+0x90>)
 800ce94:	f240 32d2 	movw	r2, #978	@ 0x3d2
 800ce98:	491a      	ldr	r1, [pc, #104]	@ (800cf04 <tcp_recved+0x9c>)
 800ce9a:	4819      	ldr	r0, [pc, #100]	@ (800cf00 <tcp_recved+0x98>)
 800ce9c:	f008 fece 	bl	8015c3c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800cea4:	887b      	ldrh	r3, [r7, #2]
 800cea6:	4413      	add	r3, r2
 800cea8:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800ceaa:	89fb      	ldrh	r3, [r7, #14]
 800ceac:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800ceb0:	d804      	bhi.n	800cebc <tcp_recved+0x54>
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ceb6:	89fa      	ldrh	r2, [r7, #14]
 800ceb8:	429a      	cmp	r2, r3
 800ceba:	d204      	bcs.n	800cec6 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800cec2:	851a      	strh	r2, [r3, #40]	@ 0x28
 800cec4:	e002      	b.n	800cecc <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	89fa      	ldrh	r2, [r7, #14]
 800ceca:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800cecc:	6878      	ldr	r0, [r7, #4]
 800cece:	f7ff ff71 	bl	800cdb4 <tcp_update_rcv_ann_wnd>
 800ced2:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800ced4:	68bb      	ldr	r3, [r7, #8]
 800ced6:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800ceda:	d309      	bcc.n	800cef0 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	8b5b      	ldrh	r3, [r3, #26]
 800cee0:	f043 0302 	orr.w	r3, r3, #2
 800cee4:	b29a      	uxth	r2, r3
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ceea:	6878      	ldr	r0, [r7, #4]
 800ceec:	f003 fe3e 	bl	8010b6c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800cef0:	3710      	adds	r7, #16
 800cef2:	46bd      	mov	sp, r7
 800cef4:	bd80      	pop	{r7, pc}
 800cef6:	bf00      	nop
 800cef8:	0801eca8 	.word	0x0801eca8
 800cefc:	0801ef44 	.word	0x0801ef44
 800cf00:	0801ecec 	.word	0x0801ecec
 800cf04:	0801ef5c 	.word	0x0801ef5c

0800cf08 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800cf08:	b5b0      	push	{r4, r5, r7, lr}
 800cf0a:	b090      	sub	sp, #64	@ 0x40
 800cf0c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800cf0e:	2300      	movs	r3, #0
 800cf10:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 800cf14:	4b95      	ldr	r3, [pc, #596]	@ (800d16c <tcp_slowtmr+0x264>)
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	3301      	adds	r3, #1
 800cf1a:	4a94      	ldr	r2, [pc, #592]	@ (800d16c <tcp_slowtmr+0x264>)
 800cf1c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800cf1e:	4b94      	ldr	r3, [pc, #592]	@ (800d170 <tcp_slowtmr+0x268>)
 800cf20:	781b      	ldrb	r3, [r3, #0]
 800cf22:	3301      	adds	r3, #1
 800cf24:	b2da      	uxtb	r2, r3
 800cf26:	4b92      	ldr	r3, [pc, #584]	@ (800d170 <tcp_slowtmr+0x268>)
 800cf28:	701a      	strb	r2, [r3, #0]
 800cf2a:	e000      	b.n	800cf2e <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 800cf2c:	bf00      	nop
  prev = NULL;
 800cf2e:	2300      	movs	r3, #0
 800cf30:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 800cf32:	4b90      	ldr	r3, [pc, #576]	@ (800d174 <tcp_slowtmr+0x26c>)
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800cf38:	e29f      	b.n	800d47a <tcp_slowtmr+0x572>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800cf3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf3c:	7d1b      	ldrb	r3, [r3, #20]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d106      	bne.n	800cf50 <tcp_slowtmr+0x48>
 800cf42:	4b8d      	ldr	r3, [pc, #564]	@ (800d178 <tcp_slowtmr+0x270>)
 800cf44:	f240 42be 	movw	r2, #1214	@ 0x4be
 800cf48:	498c      	ldr	r1, [pc, #560]	@ (800d17c <tcp_slowtmr+0x274>)
 800cf4a:	488d      	ldr	r0, [pc, #564]	@ (800d180 <tcp_slowtmr+0x278>)
 800cf4c:	f008 fe76 	bl	8015c3c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800cf50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf52:	7d1b      	ldrb	r3, [r3, #20]
 800cf54:	2b01      	cmp	r3, #1
 800cf56:	d106      	bne.n	800cf66 <tcp_slowtmr+0x5e>
 800cf58:	4b87      	ldr	r3, [pc, #540]	@ (800d178 <tcp_slowtmr+0x270>)
 800cf5a:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 800cf5e:	4989      	ldr	r1, [pc, #548]	@ (800d184 <tcp_slowtmr+0x27c>)
 800cf60:	4887      	ldr	r0, [pc, #540]	@ (800d180 <tcp_slowtmr+0x278>)
 800cf62:	f008 fe6b 	bl	8015c3c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800cf66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf68:	7d1b      	ldrb	r3, [r3, #20]
 800cf6a:	2b0a      	cmp	r3, #10
 800cf6c:	d106      	bne.n	800cf7c <tcp_slowtmr+0x74>
 800cf6e:	4b82      	ldr	r3, [pc, #520]	@ (800d178 <tcp_slowtmr+0x270>)
 800cf70:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 800cf74:	4984      	ldr	r1, [pc, #528]	@ (800d188 <tcp_slowtmr+0x280>)
 800cf76:	4882      	ldr	r0, [pc, #520]	@ (800d180 <tcp_slowtmr+0x278>)
 800cf78:	f008 fe60 	bl	8015c3c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800cf7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf7e:	7f9a      	ldrb	r2, [r3, #30]
 800cf80:	4b7b      	ldr	r3, [pc, #492]	@ (800d170 <tcp_slowtmr+0x268>)
 800cf82:	781b      	ldrb	r3, [r3, #0]
 800cf84:	429a      	cmp	r2, r3
 800cf86:	d105      	bne.n	800cf94 <tcp_slowtmr+0x8c>
      prev = pcb;
 800cf88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf8a:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800cf8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf8e:	68db      	ldr	r3, [r3, #12]
 800cf90:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 800cf92:	e272      	b.n	800d47a <tcp_slowtmr+0x572>
    pcb->last_timer = tcp_timer_ctr;
 800cf94:	4b76      	ldr	r3, [pc, #472]	@ (800d170 <tcp_slowtmr+0x268>)
 800cf96:	781a      	ldrb	r2, [r3, #0]
 800cf98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf9a:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 800cf9c:	2300      	movs	r3, #0
 800cf9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 800cfa2:	2300      	movs	r3, #0
 800cfa4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800cfa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfaa:	7d1b      	ldrb	r3, [r3, #20]
 800cfac:	2b02      	cmp	r3, #2
 800cfae:	d10a      	bne.n	800cfc6 <tcp_slowtmr+0xbe>
 800cfb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfb2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800cfb6:	2b05      	cmp	r3, #5
 800cfb8:	d905      	bls.n	800cfc6 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800cfba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cfbe:	3301      	adds	r3, #1
 800cfc0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800cfc4:	e11e      	b.n	800d204 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800cfc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfc8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800cfcc:	2b0b      	cmp	r3, #11
 800cfce:	d905      	bls.n	800cfdc <tcp_slowtmr+0xd4>
      ++pcb_remove;
 800cfd0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cfd4:	3301      	adds	r3, #1
 800cfd6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800cfda:	e113      	b.n	800d204 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 800cfdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfde:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d075      	beq.n	800d0d2 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800cfe6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfe8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d006      	beq.n	800cffc <tcp_slowtmr+0xf4>
 800cfee:	4b62      	ldr	r3, [pc, #392]	@ (800d178 <tcp_slowtmr+0x270>)
 800cff0:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 800cff4:	4965      	ldr	r1, [pc, #404]	@ (800d18c <tcp_slowtmr+0x284>)
 800cff6:	4862      	ldr	r0, [pc, #392]	@ (800d180 <tcp_slowtmr+0x278>)
 800cff8:	f008 fe20 	bl	8015c3c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800cffc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cffe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d000:	2b00      	cmp	r3, #0
 800d002:	d106      	bne.n	800d012 <tcp_slowtmr+0x10a>
 800d004:	4b5c      	ldr	r3, [pc, #368]	@ (800d178 <tcp_slowtmr+0x270>)
 800d006:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 800d00a:	4961      	ldr	r1, [pc, #388]	@ (800d190 <tcp_slowtmr+0x288>)
 800d00c:	485c      	ldr	r0, [pc, #368]	@ (800d180 <tcp_slowtmr+0x278>)
 800d00e:	f008 fe15 	bl	8015c3c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800d012:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d014:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800d018:	2b0b      	cmp	r3, #11
 800d01a:	d905      	bls.n	800d028 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 800d01c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d020:	3301      	adds	r3, #1
 800d022:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800d026:	e0ed      	b.n	800d204 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800d028:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d02a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800d02e:	3b01      	subs	r3, #1
 800d030:	4a58      	ldr	r2, [pc, #352]	@ (800d194 <tcp_slowtmr+0x28c>)
 800d032:	5cd3      	ldrb	r3, [r2, r3]
 800d034:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800d036:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d038:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800d03c:	7c7a      	ldrb	r2, [r7, #17]
 800d03e:	429a      	cmp	r2, r3
 800d040:	d907      	bls.n	800d052 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 800d042:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d044:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800d048:	3301      	adds	r3, #1
 800d04a:	b2da      	uxtb	r2, r3
 800d04c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d04e:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 800d052:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d054:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800d058:	7c7a      	ldrb	r2, [r7, #17]
 800d05a:	429a      	cmp	r2, r3
 800d05c:	f200 80d2 	bhi.w	800d204 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 800d060:	2301      	movs	r3, #1
 800d062:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 800d064:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d066:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d108      	bne.n	800d080 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800d06e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d070:	f004 fc24 	bl	80118bc <tcp_zero_window_probe>
 800d074:	4603      	mov	r3, r0
 800d076:	2b00      	cmp	r3, #0
 800d078:	d014      	beq.n	800d0a4 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 800d07a:	2300      	movs	r3, #0
 800d07c:	623b      	str	r3, [r7, #32]
 800d07e:	e011      	b.n	800d0a4 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800d080:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d082:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d086:	4619      	mov	r1, r3
 800d088:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d08a:	f003 fae9 	bl	8010660 <tcp_split_unsent_seg>
 800d08e:	4603      	mov	r3, r0
 800d090:	2b00      	cmp	r3, #0
 800d092:	d107      	bne.n	800d0a4 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 800d094:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d096:	f003 fd69 	bl	8010b6c <tcp_output>
 800d09a:	4603      	mov	r3, r0
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d101      	bne.n	800d0a4 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 800d0a0:	2300      	movs	r3, #0
 800d0a2:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 800d0a4:	6a3b      	ldr	r3, [r7, #32]
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	f000 80ac 	beq.w	800d204 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 800d0ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0ae:	2200      	movs	r2, #0
 800d0b0:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800d0b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0b6:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800d0ba:	2b06      	cmp	r3, #6
 800d0bc:	f200 80a2 	bhi.w	800d204 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 800d0c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0c2:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800d0c6:	3301      	adds	r3, #1
 800d0c8:	b2da      	uxtb	r2, r3
 800d0ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0cc:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 800d0d0:	e098      	b.n	800d204 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800d0d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0d4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	db0f      	blt.n	800d0fc <tcp_slowtmr+0x1f4>
 800d0dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0de:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800d0e2:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800d0e6:	4293      	cmp	r3, r2
 800d0e8:	d008      	beq.n	800d0fc <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 800d0ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0ec:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800d0f0:	b29b      	uxth	r3, r3
 800d0f2:	3301      	adds	r3, #1
 800d0f4:	b29b      	uxth	r3, r3
 800d0f6:	b21a      	sxth	r2, r3
 800d0f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0fa:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 800d0fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0fe:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800d102:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d104:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800d108:	429a      	cmp	r2, r3
 800d10a:	db7b      	blt.n	800d204 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800d10c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d10e:	f004 f821 	bl	8011154 <tcp_rexmit_rto_prepare>
 800d112:	4603      	mov	r3, r0
 800d114:	2b00      	cmp	r3, #0
 800d116:	d007      	beq.n	800d128 <tcp_slowtmr+0x220>
 800d118:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d11a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d171      	bne.n	800d204 <tcp_slowtmr+0x2fc>
 800d120:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d122:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d124:	2b00      	cmp	r3, #0
 800d126:	d06d      	beq.n	800d204 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 800d128:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d12a:	7d1b      	ldrb	r3, [r3, #20]
 800d12c:	2b02      	cmp	r3, #2
 800d12e:	d03a      	beq.n	800d1a6 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800d130:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d132:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d136:	2b0c      	cmp	r3, #12
 800d138:	bf28      	it	cs
 800d13a:	230c      	movcs	r3, #12
 800d13c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800d13e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d140:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800d144:	10db      	asrs	r3, r3, #3
 800d146:	b21b      	sxth	r3, r3
 800d148:	461a      	mov	r2, r3
 800d14a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d14c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800d150:	4413      	add	r3, r2
 800d152:	7efa      	ldrb	r2, [r7, #27]
 800d154:	4910      	ldr	r1, [pc, #64]	@ (800d198 <tcp_slowtmr+0x290>)
 800d156:	5c8a      	ldrb	r2, [r1, r2]
 800d158:	4093      	lsls	r3, r2
 800d15a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800d15c:	697b      	ldr	r3, [r7, #20]
 800d15e:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800d162:	4293      	cmp	r3, r2
 800d164:	dc1a      	bgt.n	800d19c <tcp_slowtmr+0x294>
 800d166:	697b      	ldr	r3, [r7, #20]
 800d168:	b21a      	sxth	r2, r3
 800d16a:	e019      	b.n	800d1a0 <tcp_slowtmr+0x298>
 800d16c:	20009244 	.word	0x20009244
 800d170:	2000925a 	.word	0x2000925a
 800d174:	20009250 	.word	0x20009250
 800d178:	0801eca8 	.word	0x0801eca8
 800d17c:	0801efec 	.word	0x0801efec
 800d180:	0801ecec 	.word	0x0801ecec
 800d184:	0801f018 	.word	0x0801f018
 800d188:	0801f044 	.word	0x0801f044
 800d18c:	0801f074 	.word	0x0801f074
 800d190:	0801f0a8 	.word	0x0801f0a8
 800d194:	08020c80 	.word	0x08020c80
 800d198:	08020c70 	.word	0x08020c70
 800d19c:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800d1a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1a2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 800d1a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1a8:	2200      	movs	r2, #0
 800d1aa:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800d1ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1ae:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800d1b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1b4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800d1b8:	4293      	cmp	r3, r2
 800d1ba:	bf28      	it	cs
 800d1bc:	4613      	movcs	r3, r2
 800d1be:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800d1c0:	8a7b      	ldrh	r3, [r7, #18]
 800d1c2:	085b      	lsrs	r3, r3, #1
 800d1c4:	b29a      	uxth	r2, r3
 800d1c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1c8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800d1cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1ce:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800d1d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1d4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d1d6:	005b      	lsls	r3, r3, #1
 800d1d8:	b29b      	uxth	r3, r3
 800d1da:	429a      	cmp	r2, r3
 800d1dc:	d206      	bcs.n	800d1ec <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800d1de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1e0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d1e2:	005b      	lsls	r3, r3, #1
 800d1e4:	b29a      	uxth	r2, r3
 800d1e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1e8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 800d1ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1ee:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800d1f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1f2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 800d1f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1f8:	2200      	movs	r2, #0
 800d1fa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 800d1fe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d200:	f004 f818 	bl	8011234 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 800d204:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d206:	7d1b      	ldrb	r3, [r3, #20]
 800d208:	2b06      	cmp	r3, #6
 800d20a:	d111      	bne.n	800d230 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 800d20c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d20e:	8b5b      	ldrh	r3, [r3, #26]
 800d210:	f003 0310 	and.w	r3, r3, #16
 800d214:	2b00      	cmp	r3, #0
 800d216:	d00b      	beq.n	800d230 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d218:	4b9d      	ldr	r3, [pc, #628]	@ (800d490 <tcp_slowtmr+0x588>)
 800d21a:	681a      	ldr	r2, [r3, #0]
 800d21c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d21e:	6a1b      	ldr	r3, [r3, #32]
 800d220:	1ad3      	subs	r3, r2, r3
 800d222:	2b28      	cmp	r3, #40	@ 0x28
 800d224:	d904      	bls.n	800d230 <tcp_slowtmr+0x328>
          ++pcb_remove;
 800d226:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d22a:	3301      	adds	r3, #1
 800d22c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d230:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d232:	7a5b      	ldrb	r3, [r3, #9]
 800d234:	f003 0308 	and.w	r3, r3, #8
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d04c      	beq.n	800d2d6 <tcp_slowtmr+0x3ce>
        ((pcb->state == ESTABLISHED) ||
 800d23c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d23e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d240:	2b04      	cmp	r3, #4
 800d242:	d003      	beq.n	800d24c <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 800d244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d246:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800d248:	2b07      	cmp	r3, #7
 800d24a:	d144      	bne.n	800d2d6 <tcp_slowtmr+0x3ce>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d24c:	4b90      	ldr	r3, [pc, #576]	@ (800d490 <tcp_slowtmr+0x588>)
 800d24e:	681a      	ldr	r2, [r3, #0]
 800d250:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d252:	6a1b      	ldr	r3, [r3, #32]
 800d254:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800d256:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d258:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d25c:	f503 2324 	add.w	r3, r3, #671744	@ 0xa4000
 800d260:	f603 43b8 	addw	r3, r3, #3256	@ 0xcb8
 800d264:	498b      	ldr	r1, [pc, #556]	@ (800d494 <tcp_slowtmr+0x58c>)
 800d266:	fba1 1303 	umull	r1, r3, r1, r3
 800d26a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d26c:	429a      	cmp	r2, r3
 800d26e:	d90a      	bls.n	800d286 <tcp_slowtmr+0x37e>
        ++pcb_remove;
 800d270:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d274:	3301      	adds	r3, #1
 800d276:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 800d27a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d27e:	3301      	adds	r3, #1
 800d280:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800d284:	e027      	b.n	800d2d6 <tcp_slowtmr+0x3ce>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d286:	4b82      	ldr	r3, [pc, #520]	@ (800d490 <tcp_slowtmr+0x588>)
 800d288:	681a      	ldr	r2, [r3, #0]
 800d28a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d28c:	6a1b      	ldr	r3, [r3, #32]
 800d28e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800d290:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d292:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800d296:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d298:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800d29c:	4618      	mov	r0, r3
 800d29e:	4b7e      	ldr	r3, [pc, #504]	@ (800d498 <tcp_slowtmr+0x590>)
 800d2a0:	fb00 f303 	mul.w	r3, r0, r3
 800d2a4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800d2a6:	497b      	ldr	r1, [pc, #492]	@ (800d494 <tcp_slowtmr+0x58c>)
 800d2a8:	fba1 1303 	umull	r1, r3, r1, r3
 800d2ac:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d2ae:	429a      	cmp	r2, r3
 800d2b0:	d911      	bls.n	800d2d6 <tcp_slowtmr+0x3ce>
        err = tcp_keepalive(pcb);
 800d2b2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d2b4:	f004 fac2 	bl	801183c <tcp_keepalive>
 800d2b8:	4603      	mov	r3, r0
 800d2ba:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 800d2be:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d107      	bne.n	800d2d6 <tcp_slowtmr+0x3ce>
          pcb->keep_cnt_sent++;
 800d2c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2c8:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800d2cc:	3301      	adds	r3, #1
 800d2ce:	b2da      	uxtb	r2, r3
 800d2d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2d2:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 800d2d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d011      	beq.n	800d302 <tcp_slowtmr+0x3fa>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800d2de:	4b6c      	ldr	r3, [pc, #432]	@ (800d490 <tcp_slowtmr+0x588>)
 800d2e0:	681a      	ldr	r2, [r3, #0]
 800d2e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2e4:	6a1b      	ldr	r3, [r3, #32]
 800d2e6:	1ad2      	subs	r2, r2, r3
 800d2e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2ea:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800d2ee:	4619      	mov	r1, r3
 800d2f0:	460b      	mov	r3, r1
 800d2f2:	005b      	lsls	r3, r3, #1
 800d2f4:	440b      	add	r3, r1
 800d2f6:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800d2f8:	429a      	cmp	r2, r3
 800d2fa:	d302      	bcc.n	800d302 <tcp_slowtmr+0x3fa>
      tcp_free_ooseq(pcb);
 800d2fc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d2fe:	f000 fddb 	bl	800deb8 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 800d302:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d304:	7d1b      	ldrb	r3, [r3, #20]
 800d306:	2b03      	cmp	r3, #3
 800d308:	d10b      	bne.n	800d322 <tcp_slowtmr+0x41a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d30a:	4b61      	ldr	r3, [pc, #388]	@ (800d490 <tcp_slowtmr+0x588>)
 800d30c:	681a      	ldr	r2, [r3, #0]
 800d30e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d310:	6a1b      	ldr	r3, [r3, #32]
 800d312:	1ad3      	subs	r3, r2, r3
 800d314:	2b28      	cmp	r3, #40	@ 0x28
 800d316:	d904      	bls.n	800d322 <tcp_slowtmr+0x41a>
        ++pcb_remove;
 800d318:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d31c:	3301      	adds	r3, #1
 800d31e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 800d322:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d324:	7d1b      	ldrb	r3, [r3, #20]
 800d326:	2b09      	cmp	r3, #9
 800d328:	d10b      	bne.n	800d342 <tcp_slowtmr+0x43a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d32a:	4b59      	ldr	r3, [pc, #356]	@ (800d490 <tcp_slowtmr+0x588>)
 800d32c:	681a      	ldr	r2, [r3, #0]
 800d32e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d330:	6a1b      	ldr	r3, [r3, #32]
 800d332:	1ad3      	subs	r3, r2, r3
 800d334:	2bf0      	cmp	r3, #240	@ 0xf0
 800d336:	d904      	bls.n	800d342 <tcp_slowtmr+0x43a>
        ++pcb_remove;
 800d338:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d33c:	3301      	adds	r3, #1
 800d33e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 800d342:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d346:	2b00      	cmp	r3, #0
 800d348:	d060      	beq.n	800d40c <tcp_slowtmr+0x504>
      tcp_err_fn err_fn = pcb->errf;
 800d34a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d34c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d350:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 800d352:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d354:	f000 fbfc 	bl	800db50 <tcp_pcb_purge>
      if (prev != NULL) {
 800d358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d010      	beq.n	800d380 <tcp_slowtmr+0x478>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800d35e:	4b4f      	ldr	r3, [pc, #316]	@ (800d49c <tcp_slowtmr+0x594>)
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d364:	429a      	cmp	r2, r3
 800d366:	d106      	bne.n	800d376 <tcp_slowtmr+0x46e>
 800d368:	4b4d      	ldr	r3, [pc, #308]	@ (800d4a0 <tcp_slowtmr+0x598>)
 800d36a:	f240 526d 	movw	r2, #1389	@ 0x56d
 800d36e:	494d      	ldr	r1, [pc, #308]	@ (800d4a4 <tcp_slowtmr+0x59c>)
 800d370:	484d      	ldr	r0, [pc, #308]	@ (800d4a8 <tcp_slowtmr+0x5a0>)
 800d372:	f008 fc63 	bl	8015c3c <iprintf>
        prev->next = pcb->next;
 800d376:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d378:	68da      	ldr	r2, [r3, #12]
 800d37a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d37c:	60da      	str	r2, [r3, #12]
 800d37e:	e00f      	b.n	800d3a0 <tcp_slowtmr+0x498>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800d380:	4b46      	ldr	r3, [pc, #280]	@ (800d49c <tcp_slowtmr+0x594>)
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d386:	429a      	cmp	r2, r3
 800d388:	d006      	beq.n	800d398 <tcp_slowtmr+0x490>
 800d38a:	4b45      	ldr	r3, [pc, #276]	@ (800d4a0 <tcp_slowtmr+0x598>)
 800d38c:	f240 5271 	movw	r2, #1393	@ 0x571
 800d390:	4946      	ldr	r1, [pc, #280]	@ (800d4ac <tcp_slowtmr+0x5a4>)
 800d392:	4845      	ldr	r0, [pc, #276]	@ (800d4a8 <tcp_slowtmr+0x5a0>)
 800d394:	f008 fc52 	bl	8015c3c <iprintf>
        tcp_active_pcbs = pcb->next;
 800d398:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d39a:	68db      	ldr	r3, [r3, #12]
 800d39c:	4a3f      	ldr	r2, [pc, #252]	@ (800d49c <tcp_slowtmr+0x594>)
 800d39e:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 800d3a0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d013      	beq.n	800d3d0 <tcp_slowtmr+0x4c8>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d3a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3aa:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800d3ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3ae:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800d3b0:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800d3b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3b4:	3304      	adds	r3, #4
 800d3b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d3b8:	8ad2      	ldrh	r2, [r2, #22]
 800d3ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d3bc:	8b09      	ldrh	r1, [r1, #24]
 800d3be:	9102      	str	r1, [sp, #8]
 800d3c0:	9201      	str	r2, [sp, #4]
 800d3c2:	9300      	str	r3, [sp, #0]
 800d3c4:	462b      	mov	r3, r5
 800d3c6:	4622      	mov	r2, r4
 800d3c8:	4601      	mov	r1, r0
 800d3ca:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d3cc:	f004 f982 	bl	80116d4 <tcp_rst>
      err_arg = pcb->callback_arg;
 800d3d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3d2:	691b      	ldr	r3, [r3, #16]
 800d3d4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800d3d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3d8:	7d1b      	ldrb	r3, [r3, #20]
 800d3da:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800d3dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3de:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800d3e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3e2:	68db      	ldr	r3, [r3, #12]
 800d3e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800d3e6:	6838      	ldr	r0, [r7, #0]
 800d3e8:	f7ff f9f0 	bl	800c7cc <tcp_free>
      tcp_active_pcbs_changed = 0;
 800d3ec:	4b30      	ldr	r3, [pc, #192]	@ (800d4b0 <tcp_slowtmr+0x5a8>)
 800d3ee:	2200      	movs	r2, #0
 800d3f0:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d004      	beq.n	800d402 <tcp_slowtmr+0x4fa>
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	f06f 010c 	mvn.w	r1, #12
 800d3fe:	68b8      	ldr	r0, [r7, #8]
 800d400:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800d402:	4b2b      	ldr	r3, [pc, #172]	@ (800d4b0 <tcp_slowtmr+0x5a8>)
 800d404:	781b      	ldrb	r3, [r3, #0]
 800d406:	2b00      	cmp	r3, #0
 800d408:	d037      	beq.n	800d47a <tcp_slowtmr+0x572>
        goto tcp_slowtmr_start;
 800d40a:	e590      	b.n	800cf2e <tcp_slowtmr+0x26>
      prev = pcb;
 800d40c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d40e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800d410:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d412:	68db      	ldr	r3, [r3, #12]
 800d414:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 800d416:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d418:	7f1b      	ldrb	r3, [r3, #28]
 800d41a:	3301      	adds	r3, #1
 800d41c:	b2da      	uxtb	r2, r3
 800d41e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d420:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800d422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d424:	7f1a      	ldrb	r2, [r3, #28]
 800d426:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d428:	7f5b      	ldrb	r3, [r3, #29]
 800d42a:	429a      	cmp	r2, r3
 800d42c:	d325      	bcc.n	800d47a <tcp_slowtmr+0x572>
        prev->polltmr = 0;
 800d42e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d430:	2200      	movs	r2, #0
 800d432:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 800d434:	4b1e      	ldr	r3, [pc, #120]	@ (800d4b0 <tcp_slowtmr+0x5a8>)
 800d436:	2200      	movs	r2, #0
 800d438:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800d43a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d43c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d440:	2b00      	cmp	r3, #0
 800d442:	d00b      	beq.n	800d45c <tcp_slowtmr+0x554>
 800d444:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d446:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d44a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d44c:	6912      	ldr	r2, [r2, #16]
 800d44e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d450:	4610      	mov	r0, r2
 800d452:	4798      	blx	r3
 800d454:	4603      	mov	r3, r0
 800d456:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800d45a:	e002      	b.n	800d462 <tcp_slowtmr+0x55a>
 800d45c:	2300      	movs	r3, #0
 800d45e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 800d462:	4b13      	ldr	r3, [pc, #76]	@ (800d4b0 <tcp_slowtmr+0x5a8>)
 800d464:	781b      	ldrb	r3, [r3, #0]
 800d466:	2b00      	cmp	r3, #0
 800d468:	f47f ad60 	bne.w	800cf2c <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800d46c:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800d470:	2b00      	cmp	r3, #0
 800d472:	d102      	bne.n	800d47a <tcp_slowtmr+0x572>
          tcp_output(prev);
 800d474:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d476:	f003 fb79 	bl	8010b6c <tcp_output>
  while (pcb != NULL) {
 800d47a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	f47f ad5c 	bne.w	800cf3a <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800d482:	2300      	movs	r3, #0
 800d484:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 800d486:	4b0b      	ldr	r3, [pc, #44]	@ (800d4b4 <tcp_slowtmr+0x5ac>)
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800d48c:	e067      	b.n	800d55e <tcp_slowtmr+0x656>
 800d48e:	bf00      	nop
 800d490:	20009244 	.word	0x20009244
 800d494:	10624dd3 	.word	0x10624dd3
 800d498:	000124f8 	.word	0x000124f8
 800d49c:	20009250 	.word	0x20009250
 800d4a0:	0801eca8 	.word	0x0801eca8
 800d4a4:	0801f0e0 	.word	0x0801f0e0
 800d4a8:	0801ecec 	.word	0x0801ecec
 800d4ac:	0801f10c 	.word	0x0801f10c
 800d4b0:	20009258 	.word	0x20009258
 800d4b4:	20009254 	.word	0x20009254
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800d4b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4ba:	7d1b      	ldrb	r3, [r3, #20]
 800d4bc:	2b0a      	cmp	r3, #10
 800d4be:	d006      	beq.n	800d4ce <tcp_slowtmr+0x5c6>
 800d4c0:	4b2b      	ldr	r3, [pc, #172]	@ (800d570 <tcp_slowtmr+0x668>)
 800d4c2:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 800d4c6:	492b      	ldr	r1, [pc, #172]	@ (800d574 <tcp_slowtmr+0x66c>)
 800d4c8:	482b      	ldr	r0, [pc, #172]	@ (800d578 <tcp_slowtmr+0x670>)
 800d4ca:	f008 fbb7 	bl	8015c3c <iprintf>
    pcb_remove = 0;
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d4d4:	4b29      	ldr	r3, [pc, #164]	@ (800d57c <tcp_slowtmr+0x674>)
 800d4d6:	681a      	ldr	r2, [r3, #0]
 800d4d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4da:	6a1b      	ldr	r3, [r3, #32]
 800d4dc:	1ad3      	subs	r3, r2, r3
 800d4de:	2bf0      	cmp	r3, #240	@ 0xf0
 800d4e0:	d904      	bls.n	800d4ec <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 800d4e2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d4e6:	3301      	adds	r3, #1
 800d4e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800d4ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d02f      	beq.n	800d554 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800d4f4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d4f6:	f000 fb2b 	bl	800db50 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800d4fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d010      	beq.n	800d522 <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800d500:	4b1f      	ldr	r3, [pc, #124]	@ (800d580 <tcp_slowtmr+0x678>)
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d506:	429a      	cmp	r2, r3
 800d508:	d106      	bne.n	800d518 <tcp_slowtmr+0x610>
 800d50a:	4b19      	ldr	r3, [pc, #100]	@ (800d570 <tcp_slowtmr+0x668>)
 800d50c:	f240 52af 	movw	r2, #1455	@ 0x5af
 800d510:	491c      	ldr	r1, [pc, #112]	@ (800d584 <tcp_slowtmr+0x67c>)
 800d512:	4819      	ldr	r0, [pc, #100]	@ (800d578 <tcp_slowtmr+0x670>)
 800d514:	f008 fb92 	bl	8015c3c <iprintf>
        prev->next = pcb->next;
 800d518:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d51a:	68da      	ldr	r2, [r3, #12]
 800d51c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d51e:	60da      	str	r2, [r3, #12]
 800d520:	e00f      	b.n	800d542 <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800d522:	4b17      	ldr	r3, [pc, #92]	@ (800d580 <tcp_slowtmr+0x678>)
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d528:	429a      	cmp	r2, r3
 800d52a:	d006      	beq.n	800d53a <tcp_slowtmr+0x632>
 800d52c:	4b10      	ldr	r3, [pc, #64]	@ (800d570 <tcp_slowtmr+0x668>)
 800d52e:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800d532:	4915      	ldr	r1, [pc, #84]	@ (800d588 <tcp_slowtmr+0x680>)
 800d534:	4810      	ldr	r0, [pc, #64]	@ (800d578 <tcp_slowtmr+0x670>)
 800d536:	f008 fb81 	bl	8015c3c <iprintf>
        tcp_tw_pcbs = pcb->next;
 800d53a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d53c:	68db      	ldr	r3, [r3, #12]
 800d53e:	4a10      	ldr	r2, [pc, #64]	@ (800d580 <tcp_slowtmr+0x678>)
 800d540:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800d542:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d544:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800d546:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d548:	68db      	ldr	r3, [r3, #12]
 800d54a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800d54c:	69f8      	ldr	r0, [r7, #28]
 800d54e:	f7ff f93d 	bl	800c7cc <tcp_free>
 800d552:	e004      	b.n	800d55e <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 800d554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d556:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800d558:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d55a:	68db      	ldr	r3, [r3, #12]
 800d55c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800d55e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d560:	2b00      	cmp	r3, #0
 800d562:	d1a9      	bne.n	800d4b8 <tcp_slowtmr+0x5b0>
    }
  }
}
 800d564:	bf00      	nop
 800d566:	bf00      	nop
 800d568:	3730      	adds	r7, #48	@ 0x30
 800d56a:	46bd      	mov	sp, r7
 800d56c:	bdb0      	pop	{r4, r5, r7, pc}
 800d56e:	bf00      	nop
 800d570:	0801eca8 	.word	0x0801eca8
 800d574:	0801f138 	.word	0x0801f138
 800d578:	0801ecec 	.word	0x0801ecec
 800d57c:	20009244 	.word	0x20009244
 800d580:	20009254 	.word	0x20009254
 800d584:	0801f168 	.word	0x0801f168
 800d588:	0801f190 	.word	0x0801f190

0800d58c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800d58c:	b580      	push	{r7, lr}
 800d58e:	b082      	sub	sp, #8
 800d590:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800d592:	4b2d      	ldr	r3, [pc, #180]	@ (800d648 <tcp_fasttmr+0xbc>)
 800d594:	781b      	ldrb	r3, [r3, #0]
 800d596:	3301      	adds	r3, #1
 800d598:	b2da      	uxtb	r2, r3
 800d59a:	4b2b      	ldr	r3, [pc, #172]	@ (800d648 <tcp_fasttmr+0xbc>)
 800d59c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800d59e:	4b2b      	ldr	r3, [pc, #172]	@ (800d64c <tcp_fasttmr+0xc0>)
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d5a4:	e048      	b.n	800d638 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	7f9a      	ldrb	r2, [r3, #30]
 800d5aa:	4b27      	ldr	r3, [pc, #156]	@ (800d648 <tcp_fasttmr+0xbc>)
 800d5ac:	781b      	ldrb	r3, [r3, #0]
 800d5ae:	429a      	cmp	r2, r3
 800d5b0:	d03f      	beq.n	800d632 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800d5b2:	4b25      	ldr	r3, [pc, #148]	@ (800d648 <tcp_fasttmr+0xbc>)
 800d5b4:	781a      	ldrb	r2, [r3, #0]
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	8b5b      	ldrh	r3, [r3, #26]
 800d5be:	f003 0301 	and.w	r3, r3, #1
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d010      	beq.n	800d5e8 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	8b5b      	ldrh	r3, [r3, #26]
 800d5ca:	f043 0302 	orr.w	r3, r3, #2
 800d5ce:	b29a      	uxth	r2, r3
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800d5d4:	6878      	ldr	r0, [r7, #4]
 800d5d6:	f003 fac9 	bl	8010b6c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	8b5b      	ldrh	r3, [r3, #26]
 800d5de:	f023 0303 	bic.w	r3, r3, #3
 800d5e2:	b29a      	uxth	r2, r3
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	8b5b      	ldrh	r3, [r3, #26]
 800d5ec:	f003 0308 	and.w	r3, r3, #8
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d009      	beq.n	800d608 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	8b5b      	ldrh	r3, [r3, #26]
 800d5f8:	f023 0308 	bic.w	r3, r3, #8
 800d5fc:	b29a      	uxth	r2, r3
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800d602:	6878      	ldr	r0, [r7, #4]
 800d604:	f7ff fa76 	bl	800caf4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	68db      	ldr	r3, [r3, #12]
 800d60c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d612:	2b00      	cmp	r3, #0
 800d614:	d00a      	beq.n	800d62c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800d616:	4b0e      	ldr	r3, [pc, #56]	@ (800d650 <tcp_fasttmr+0xc4>)
 800d618:	2200      	movs	r2, #0
 800d61a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800d61c:	6878      	ldr	r0, [r7, #4]
 800d61e:	f000 f819 	bl	800d654 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800d622:	4b0b      	ldr	r3, [pc, #44]	@ (800d650 <tcp_fasttmr+0xc4>)
 800d624:	781b      	ldrb	r3, [r3, #0]
 800d626:	2b00      	cmp	r3, #0
 800d628:	d000      	beq.n	800d62c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800d62a:	e7b8      	b.n	800d59e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800d62c:	683b      	ldr	r3, [r7, #0]
 800d62e:	607b      	str	r3, [r7, #4]
 800d630:	e002      	b.n	800d638 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	68db      	ldr	r3, [r3, #12]
 800d636:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d1b3      	bne.n	800d5a6 <tcp_fasttmr+0x1a>
    }
  }
}
 800d63e:	bf00      	nop
 800d640:	bf00      	nop
 800d642:	3708      	adds	r7, #8
 800d644:	46bd      	mov	sp, r7
 800d646:	bd80      	pop	{r7, pc}
 800d648:	2000925a 	.word	0x2000925a
 800d64c:	20009250 	.word	0x20009250
 800d650:	20009258 	.word	0x20009258

0800d654 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800d654:	b590      	push	{r4, r7, lr}
 800d656:	b085      	sub	sp, #20
 800d658:	af00      	add	r7, sp, #0
 800d65a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d109      	bne.n	800d676 <tcp_process_refused_data+0x22>
 800d662:	4b37      	ldr	r3, [pc, #220]	@ (800d740 <tcp_process_refused_data+0xec>)
 800d664:	f240 6209 	movw	r2, #1545	@ 0x609
 800d668:	4936      	ldr	r1, [pc, #216]	@ (800d744 <tcp_process_refused_data+0xf0>)
 800d66a:	4837      	ldr	r0, [pc, #220]	@ (800d748 <tcp_process_refused_data+0xf4>)
 800d66c:	f008 fae6 	bl	8015c3c <iprintf>
 800d670:	f06f 030f 	mvn.w	r3, #15
 800d674:	e060      	b.n	800d738 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d67a:	7b5b      	ldrb	r3, [r3, #13]
 800d67c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d682:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	2200      	movs	r2, #0
 800d688:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d690:	2b00      	cmp	r3, #0
 800d692:	d00b      	beq.n	800d6ac <tcp_process_refused_data+0x58>
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	6918      	ldr	r0, [r3, #16]
 800d69e:	2300      	movs	r3, #0
 800d6a0:	68ba      	ldr	r2, [r7, #8]
 800d6a2:	6879      	ldr	r1, [r7, #4]
 800d6a4:	47a0      	blx	r4
 800d6a6:	4603      	mov	r3, r0
 800d6a8:	73fb      	strb	r3, [r7, #15]
 800d6aa:	e007      	b.n	800d6bc <tcp_process_refused_data+0x68>
 800d6ac:	2300      	movs	r3, #0
 800d6ae:	68ba      	ldr	r2, [r7, #8]
 800d6b0:	6879      	ldr	r1, [r7, #4]
 800d6b2:	2000      	movs	r0, #0
 800d6b4:	f000 f8a4 	bl	800d800 <tcp_recv_null>
 800d6b8:	4603      	mov	r3, r0
 800d6ba:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800d6bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d12a      	bne.n	800d71a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800d6c4:	7bbb      	ldrb	r3, [r7, #14]
 800d6c6:	f003 0320 	and.w	r3, r3, #32
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d033      	beq.n	800d736 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d6d2:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800d6d6:	d005      	beq.n	800d6e4 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d6dc:	3301      	adds	r3, #1
 800d6de:	b29a      	uxth	r2, r3
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d00b      	beq.n	800d706 <tcp_process_refused_data+0xb2>
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	6918      	ldr	r0, [r3, #16]
 800d6f8:	2300      	movs	r3, #0
 800d6fa:	2200      	movs	r2, #0
 800d6fc:	6879      	ldr	r1, [r7, #4]
 800d6fe:	47a0      	blx	r4
 800d700:	4603      	mov	r3, r0
 800d702:	73fb      	strb	r3, [r7, #15]
 800d704:	e001      	b.n	800d70a <tcp_process_refused_data+0xb6>
 800d706:	2300      	movs	r3, #0
 800d708:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800d70a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d70e:	f113 0f0d 	cmn.w	r3, #13
 800d712:	d110      	bne.n	800d736 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800d714:	f06f 030c 	mvn.w	r3, #12
 800d718:	e00e      	b.n	800d738 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800d71a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d71e:	f113 0f0d 	cmn.w	r3, #13
 800d722:	d102      	bne.n	800d72a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800d724:	f06f 030c 	mvn.w	r3, #12
 800d728:	e006      	b.n	800d738 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	68ba      	ldr	r2, [r7, #8]
 800d72e:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 800d730:	f06f 0304 	mvn.w	r3, #4
 800d734:	e000      	b.n	800d738 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800d736:	2300      	movs	r3, #0
}
 800d738:	4618      	mov	r0, r3
 800d73a:	3714      	adds	r7, #20
 800d73c:	46bd      	mov	sp, r7
 800d73e:	bd90      	pop	{r4, r7, pc}
 800d740:	0801eca8 	.word	0x0801eca8
 800d744:	0801f1b8 	.word	0x0801f1b8
 800d748:	0801ecec 	.word	0x0801ecec

0800d74c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800d74c:	b580      	push	{r7, lr}
 800d74e:	b084      	sub	sp, #16
 800d750:	af00      	add	r7, sp, #0
 800d752:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800d754:	e007      	b.n	800d766 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800d75c:	6878      	ldr	r0, [r7, #4]
 800d75e:	f000 f80a 	bl	800d776 <tcp_seg_free>
    seg = next;
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d1f4      	bne.n	800d756 <tcp_segs_free+0xa>
  }
}
 800d76c:	bf00      	nop
 800d76e:	bf00      	nop
 800d770:	3710      	adds	r7, #16
 800d772:	46bd      	mov	sp, r7
 800d774:	bd80      	pop	{r7, pc}

0800d776 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800d776:	b580      	push	{r7, lr}
 800d778:	b082      	sub	sp, #8
 800d77a:	af00      	add	r7, sp, #0
 800d77c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	2b00      	cmp	r3, #0
 800d782:	d00c      	beq.n	800d79e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	685b      	ldr	r3, [r3, #4]
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d004      	beq.n	800d796 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	685b      	ldr	r3, [r3, #4]
 800d790:	4618      	mov	r0, r3
 800d792:	f7fe fc11 	bl	800bfb8 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800d796:	6879      	ldr	r1, [r7, #4]
 800d798:	2003      	movs	r0, #3
 800d79a:	f7fd fd97 	bl	800b2cc <memp_free>
  }
}
 800d79e:	bf00      	nop
 800d7a0:	3708      	adds	r7, #8
 800d7a2:	46bd      	mov	sp, r7
 800d7a4:	bd80      	pop	{r7, pc}
	...

0800d7a8 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800d7a8:	b580      	push	{r7, lr}
 800d7aa:	b084      	sub	sp, #16
 800d7ac:	af00      	add	r7, sp, #0
 800d7ae:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d106      	bne.n	800d7c4 <tcp_seg_copy+0x1c>
 800d7b6:	4b0f      	ldr	r3, [pc, #60]	@ (800d7f4 <tcp_seg_copy+0x4c>)
 800d7b8:	f240 6282 	movw	r2, #1666	@ 0x682
 800d7bc:	490e      	ldr	r1, [pc, #56]	@ (800d7f8 <tcp_seg_copy+0x50>)
 800d7be:	480f      	ldr	r0, [pc, #60]	@ (800d7fc <tcp_seg_copy+0x54>)
 800d7c0:	f008 fa3c 	bl	8015c3c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800d7c4:	2003      	movs	r0, #3
 800d7c6:	f7fd fd11 	bl	800b1ec <memp_malloc>
 800d7ca:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d101      	bne.n	800d7d6 <tcp_seg_copy+0x2e>
    return NULL;
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	e00a      	b.n	800d7ec <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800d7d6:	2210      	movs	r2, #16
 800d7d8:	6879      	ldr	r1, [r7, #4]
 800d7da:	68f8      	ldr	r0, [r7, #12]
 800d7dc:	f008 fb85 	bl	8015eea <memcpy>
  pbuf_ref(cseg->p);
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	685b      	ldr	r3, [r3, #4]
 800d7e4:	4618      	mov	r0, r3
 800d7e6:	f7fe fc87 	bl	800c0f8 <pbuf_ref>
  return cseg;
 800d7ea:	68fb      	ldr	r3, [r7, #12]
}
 800d7ec:	4618      	mov	r0, r3
 800d7ee:	3710      	adds	r7, #16
 800d7f0:	46bd      	mov	sp, r7
 800d7f2:	bd80      	pop	{r7, pc}
 800d7f4:	0801eca8 	.word	0x0801eca8
 800d7f8:	0801f1fc 	.word	0x0801f1fc
 800d7fc:	0801ecec 	.word	0x0801ecec

0800d800 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800d800:	b580      	push	{r7, lr}
 800d802:	b084      	sub	sp, #16
 800d804:	af00      	add	r7, sp, #0
 800d806:	60f8      	str	r0, [r7, #12]
 800d808:	60b9      	str	r1, [r7, #8]
 800d80a:	607a      	str	r2, [r7, #4]
 800d80c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800d80e:	68bb      	ldr	r3, [r7, #8]
 800d810:	2b00      	cmp	r3, #0
 800d812:	d109      	bne.n	800d828 <tcp_recv_null+0x28>
 800d814:	4b12      	ldr	r3, [pc, #72]	@ (800d860 <tcp_recv_null+0x60>)
 800d816:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800d81a:	4912      	ldr	r1, [pc, #72]	@ (800d864 <tcp_recv_null+0x64>)
 800d81c:	4812      	ldr	r0, [pc, #72]	@ (800d868 <tcp_recv_null+0x68>)
 800d81e:	f008 fa0d 	bl	8015c3c <iprintf>
 800d822:	f06f 030f 	mvn.w	r3, #15
 800d826:	e016      	b.n	800d856 <tcp_recv_null+0x56>

  if (p != NULL) {
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d009      	beq.n	800d842 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	891b      	ldrh	r3, [r3, #8]
 800d832:	4619      	mov	r1, r3
 800d834:	68b8      	ldr	r0, [r7, #8]
 800d836:	f7ff fb17 	bl	800ce68 <tcp_recved>
    pbuf_free(p);
 800d83a:	6878      	ldr	r0, [r7, #4]
 800d83c:	f7fe fbbc 	bl	800bfb8 <pbuf_free>
 800d840:	e008      	b.n	800d854 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800d842:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d846:	2b00      	cmp	r3, #0
 800d848:	d104      	bne.n	800d854 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800d84a:	68b8      	ldr	r0, [r7, #8]
 800d84c:	f7ff f9bc 	bl	800cbc8 <tcp_close>
 800d850:	4603      	mov	r3, r0
 800d852:	e000      	b.n	800d856 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800d854:	2300      	movs	r3, #0
}
 800d856:	4618      	mov	r0, r3
 800d858:	3710      	adds	r7, #16
 800d85a:	46bd      	mov	sp, r7
 800d85c:	bd80      	pop	{r7, pc}
 800d85e:	bf00      	nop
 800d860:	0801eca8 	.word	0x0801eca8
 800d864:	0801f218 	.word	0x0801f218
 800d868:	0801ecec 	.word	0x0801ecec

0800d86c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800d86c:	b580      	push	{r7, lr}
 800d86e:	b086      	sub	sp, #24
 800d870:	af00      	add	r7, sp, #0
 800d872:	4603      	mov	r3, r0
 800d874:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800d876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	db01      	blt.n	800d882 <tcp_kill_prio+0x16>
 800d87e:	79fb      	ldrb	r3, [r7, #7]
 800d880:	e000      	b.n	800d884 <tcp_kill_prio+0x18>
 800d882:	237f      	movs	r3, #127	@ 0x7f
 800d884:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800d886:	7afb      	ldrb	r3, [r7, #11]
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d034      	beq.n	800d8f6 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800d88c:	7afb      	ldrb	r3, [r7, #11]
 800d88e:	3b01      	subs	r3, #1
 800d890:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800d892:	2300      	movs	r3, #0
 800d894:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d896:	2300      	movs	r3, #0
 800d898:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d89a:	4b19      	ldr	r3, [pc, #100]	@ (800d900 <tcp_kill_prio+0x94>)
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	617b      	str	r3, [r7, #20]
 800d8a0:	e01f      	b.n	800d8e2 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800d8a2:	697b      	ldr	r3, [r7, #20]
 800d8a4:	7d5b      	ldrb	r3, [r3, #21]
 800d8a6:	7afa      	ldrb	r2, [r7, #11]
 800d8a8:	429a      	cmp	r2, r3
 800d8aa:	d80c      	bhi.n	800d8c6 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d8ac:	697b      	ldr	r3, [r7, #20]
 800d8ae:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800d8b0:	7afa      	ldrb	r2, [r7, #11]
 800d8b2:	429a      	cmp	r2, r3
 800d8b4:	d112      	bne.n	800d8dc <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d8b6:	4b13      	ldr	r3, [pc, #76]	@ (800d904 <tcp_kill_prio+0x98>)
 800d8b8:	681a      	ldr	r2, [r3, #0]
 800d8ba:	697b      	ldr	r3, [r7, #20]
 800d8bc:	6a1b      	ldr	r3, [r3, #32]
 800d8be:	1ad3      	subs	r3, r2, r3
 800d8c0:	68fa      	ldr	r2, [r7, #12]
 800d8c2:	429a      	cmp	r2, r3
 800d8c4:	d80a      	bhi.n	800d8dc <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800d8c6:	4b0f      	ldr	r3, [pc, #60]	@ (800d904 <tcp_kill_prio+0x98>)
 800d8c8:	681a      	ldr	r2, [r3, #0]
 800d8ca:	697b      	ldr	r3, [r7, #20]
 800d8cc:	6a1b      	ldr	r3, [r3, #32]
 800d8ce:	1ad3      	subs	r3, r2, r3
 800d8d0:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800d8d2:	697b      	ldr	r3, [r7, #20]
 800d8d4:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800d8d6:	697b      	ldr	r3, [r7, #20]
 800d8d8:	7d5b      	ldrb	r3, [r3, #21]
 800d8da:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d8dc:	697b      	ldr	r3, [r7, #20]
 800d8de:	68db      	ldr	r3, [r3, #12]
 800d8e0:	617b      	str	r3, [r7, #20]
 800d8e2:	697b      	ldr	r3, [r7, #20]
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d1dc      	bne.n	800d8a2 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800d8e8:	693b      	ldr	r3, [r7, #16]
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d004      	beq.n	800d8f8 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d8ee:	6938      	ldr	r0, [r7, #16]
 800d8f0:	f7ff fa54 	bl	800cd9c <tcp_abort>
 800d8f4:	e000      	b.n	800d8f8 <tcp_kill_prio+0x8c>
    return;
 800d8f6:	bf00      	nop
  }
}
 800d8f8:	3718      	adds	r7, #24
 800d8fa:	46bd      	mov	sp, r7
 800d8fc:	bd80      	pop	{r7, pc}
 800d8fe:	bf00      	nop
 800d900:	20009250 	.word	0x20009250
 800d904:	20009244 	.word	0x20009244

0800d908 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800d908:	b580      	push	{r7, lr}
 800d90a:	b086      	sub	sp, #24
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	4603      	mov	r3, r0
 800d910:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800d912:	79fb      	ldrb	r3, [r7, #7]
 800d914:	2b08      	cmp	r3, #8
 800d916:	d009      	beq.n	800d92c <tcp_kill_state+0x24>
 800d918:	79fb      	ldrb	r3, [r7, #7]
 800d91a:	2b09      	cmp	r3, #9
 800d91c:	d006      	beq.n	800d92c <tcp_kill_state+0x24>
 800d91e:	4b1a      	ldr	r3, [pc, #104]	@ (800d988 <tcp_kill_state+0x80>)
 800d920:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 800d924:	4919      	ldr	r1, [pc, #100]	@ (800d98c <tcp_kill_state+0x84>)
 800d926:	481a      	ldr	r0, [pc, #104]	@ (800d990 <tcp_kill_state+0x88>)
 800d928:	f008 f988 	bl	8015c3c <iprintf>

  inactivity = 0;
 800d92c:	2300      	movs	r3, #0
 800d92e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d930:	2300      	movs	r3, #0
 800d932:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d934:	4b17      	ldr	r3, [pc, #92]	@ (800d994 <tcp_kill_state+0x8c>)
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	617b      	str	r3, [r7, #20]
 800d93a:	e017      	b.n	800d96c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800d93c:	697b      	ldr	r3, [r7, #20]
 800d93e:	7d1b      	ldrb	r3, [r3, #20]
 800d940:	79fa      	ldrb	r2, [r7, #7]
 800d942:	429a      	cmp	r2, r3
 800d944:	d10f      	bne.n	800d966 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d946:	4b14      	ldr	r3, [pc, #80]	@ (800d998 <tcp_kill_state+0x90>)
 800d948:	681a      	ldr	r2, [r3, #0]
 800d94a:	697b      	ldr	r3, [r7, #20]
 800d94c:	6a1b      	ldr	r3, [r3, #32]
 800d94e:	1ad3      	subs	r3, r2, r3
 800d950:	68fa      	ldr	r2, [r7, #12]
 800d952:	429a      	cmp	r2, r3
 800d954:	d807      	bhi.n	800d966 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800d956:	4b10      	ldr	r3, [pc, #64]	@ (800d998 <tcp_kill_state+0x90>)
 800d958:	681a      	ldr	r2, [r3, #0]
 800d95a:	697b      	ldr	r3, [r7, #20]
 800d95c:	6a1b      	ldr	r3, [r3, #32]
 800d95e:	1ad3      	subs	r3, r2, r3
 800d960:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800d962:	697b      	ldr	r3, [r7, #20]
 800d964:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d966:	697b      	ldr	r3, [r7, #20]
 800d968:	68db      	ldr	r3, [r3, #12]
 800d96a:	617b      	str	r3, [r7, #20]
 800d96c:	697b      	ldr	r3, [r7, #20]
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d1e4      	bne.n	800d93c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800d972:	693b      	ldr	r3, [r7, #16]
 800d974:	2b00      	cmp	r3, #0
 800d976:	d003      	beq.n	800d980 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800d978:	2100      	movs	r1, #0
 800d97a:	6938      	ldr	r0, [r7, #16]
 800d97c:	f7ff f950 	bl	800cc20 <tcp_abandon>
  }
}
 800d980:	bf00      	nop
 800d982:	3718      	adds	r7, #24
 800d984:	46bd      	mov	sp, r7
 800d986:	bd80      	pop	{r7, pc}
 800d988:	0801eca8 	.word	0x0801eca8
 800d98c:	0801f234 	.word	0x0801f234
 800d990:	0801ecec 	.word	0x0801ecec
 800d994:	20009250 	.word	0x20009250
 800d998:	20009244 	.word	0x20009244

0800d99c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800d99c:	b580      	push	{r7, lr}
 800d99e:	b084      	sub	sp, #16
 800d9a0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800d9a2:	2300      	movs	r3, #0
 800d9a4:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800d9a6:	2300      	movs	r3, #0
 800d9a8:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d9aa:	4b12      	ldr	r3, [pc, #72]	@ (800d9f4 <tcp_kill_timewait+0x58>)
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	60fb      	str	r3, [r7, #12]
 800d9b0:	e012      	b.n	800d9d8 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d9b2:	4b11      	ldr	r3, [pc, #68]	@ (800d9f8 <tcp_kill_timewait+0x5c>)
 800d9b4:	681a      	ldr	r2, [r3, #0]
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	6a1b      	ldr	r3, [r3, #32]
 800d9ba:	1ad3      	subs	r3, r2, r3
 800d9bc:	687a      	ldr	r2, [r7, #4]
 800d9be:	429a      	cmp	r2, r3
 800d9c0:	d807      	bhi.n	800d9d2 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800d9c2:	4b0d      	ldr	r3, [pc, #52]	@ (800d9f8 <tcp_kill_timewait+0x5c>)
 800d9c4:	681a      	ldr	r2, [r3, #0]
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	6a1b      	ldr	r3, [r3, #32]
 800d9ca:	1ad3      	subs	r3, r2, r3
 800d9cc:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	68db      	ldr	r3, [r3, #12]
 800d9d6:	60fb      	str	r3, [r7, #12]
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d1e9      	bne.n	800d9b2 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800d9de:	68bb      	ldr	r3, [r7, #8]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d002      	beq.n	800d9ea <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d9e4:	68b8      	ldr	r0, [r7, #8]
 800d9e6:	f7ff f9d9 	bl	800cd9c <tcp_abort>
  }
}
 800d9ea:	bf00      	nop
 800d9ec:	3710      	adds	r7, #16
 800d9ee:	46bd      	mov	sp, r7
 800d9f0:	bd80      	pop	{r7, pc}
 800d9f2:	bf00      	nop
 800d9f4:	20009254 	.word	0x20009254
 800d9f8:	20009244 	.word	0x20009244

0800d9fc <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800d9fc:	b580      	push	{r7, lr}
 800d9fe:	b082      	sub	sp, #8
 800da00:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800da02:	4b10      	ldr	r3, [pc, #64]	@ (800da44 <tcp_handle_closepend+0x48>)
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800da08:	e014      	b.n	800da34 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	68db      	ldr	r3, [r3, #12]
 800da0e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	8b5b      	ldrh	r3, [r3, #26]
 800da14:	f003 0308 	and.w	r3, r3, #8
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d009      	beq.n	800da30 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	8b5b      	ldrh	r3, [r3, #26]
 800da20:	f023 0308 	bic.w	r3, r3, #8
 800da24:	b29a      	uxth	r2, r3
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800da2a:	6878      	ldr	r0, [r7, #4]
 800da2c:	f7ff f862 	bl	800caf4 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800da30:	683b      	ldr	r3, [r7, #0]
 800da32:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	2b00      	cmp	r3, #0
 800da38:	d1e7      	bne.n	800da0a <tcp_handle_closepend+0xe>
  }
}
 800da3a:	bf00      	nop
 800da3c:	bf00      	nop
 800da3e:	3708      	adds	r7, #8
 800da40:	46bd      	mov	sp, r7
 800da42:	bd80      	pop	{r7, pc}
 800da44:	20009250 	.word	0x20009250

0800da48 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800da48:	b580      	push	{r7, lr}
 800da4a:	b084      	sub	sp, #16
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	4603      	mov	r3, r0
 800da50:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800da52:	2001      	movs	r0, #1
 800da54:	f7fd fbca 	bl	800b1ec <memp_malloc>
 800da58:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d126      	bne.n	800daae <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800da60:	f7ff ffcc 	bl	800d9fc <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800da64:	f7ff ff9a 	bl	800d99c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800da68:	2001      	movs	r0, #1
 800da6a:	f7fd fbbf 	bl	800b1ec <memp_malloc>
 800da6e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	2b00      	cmp	r3, #0
 800da74:	d11b      	bne.n	800daae <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800da76:	2009      	movs	r0, #9
 800da78:	f7ff ff46 	bl	800d908 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800da7c:	2001      	movs	r0, #1
 800da7e:	f7fd fbb5 	bl	800b1ec <memp_malloc>
 800da82:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	2b00      	cmp	r3, #0
 800da88:	d111      	bne.n	800daae <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800da8a:	2008      	movs	r0, #8
 800da8c:	f7ff ff3c 	bl	800d908 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800da90:	2001      	movs	r0, #1
 800da92:	f7fd fbab 	bl	800b1ec <memp_malloc>
 800da96:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d107      	bne.n	800daae <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800da9e:	79fb      	ldrb	r3, [r7, #7]
 800daa0:	4618      	mov	r0, r3
 800daa2:	f7ff fee3 	bl	800d86c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800daa6:	2001      	movs	r0, #1
 800daa8:	f7fd fba0 	bl	800b1ec <memp_malloc>
 800daac:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d03f      	beq.n	800db34 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800dab4:	229c      	movs	r2, #156	@ 0x9c
 800dab6:	2100      	movs	r1, #0
 800dab8:	68f8      	ldr	r0, [r7, #12]
 800daba:	f008 f960 	bl	8015d7e <memset>
    pcb->prio = prio;
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	79fa      	ldrb	r2, [r7, #7]
 800dac2:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800daca:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800dad4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	22ff      	movs	r2, #255	@ 0xff
 800dae2:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800daea:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	2206      	movs	r2, #6
 800daf0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	2206      	movs	r2, #6
 800daf8:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800db00:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	2201      	movs	r2, #1
 800db06:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 800db0a:	4b0d      	ldr	r3, [pc, #52]	@ (800db40 <tcp_alloc+0xf8>)
 800db0c:	681a      	ldr	r2, [r3, #0]
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800db12:	4b0c      	ldr	r3, [pc, #48]	@ (800db44 <tcp_alloc+0xfc>)
 800db14:	781a      	ldrb	r2, [r3, #0]
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800db20:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	4a08      	ldr	r2, [pc, #32]	@ (800db48 <tcp_alloc+0x100>)
 800db28:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	4a07      	ldr	r2, [pc, #28]	@ (800db4c <tcp_alloc+0x104>)
 800db30:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800db34:	68fb      	ldr	r3, [r7, #12]
}
 800db36:	4618      	mov	r0, r3
 800db38:	3710      	adds	r7, #16
 800db3a:	46bd      	mov	sp, r7
 800db3c:	bd80      	pop	{r7, pc}
 800db3e:	bf00      	nop
 800db40:	20009244 	.word	0x20009244
 800db44:	2000925a 	.word	0x2000925a
 800db48:	0800d801 	.word	0x0800d801
 800db4c:	006ddd00 	.word	0x006ddd00

0800db50 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800db50:	b580      	push	{r7, lr}
 800db52:	b082      	sub	sp, #8
 800db54:	af00      	add	r7, sp, #0
 800db56:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d107      	bne.n	800db6e <tcp_pcb_purge+0x1e>
 800db5e:	4b21      	ldr	r3, [pc, #132]	@ (800dbe4 <tcp_pcb_purge+0x94>)
 800db60:	f640 0251 	movw	r2, #2129	@ 0x851
 800db64:	4920      	ldr	r1, [pc, #128]	@ (800dbe8 <tcp_pcb_purge+0x98>)
 800db66:	4821      	ldr	r0, [pc, #132]	@ (800dbec <tcp_pcb_purge+0x9c>)
 800db68:	f008 f868 	bl	8015c3c <iprintf>
 800db6c:	e037      	b.n	800dbde <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	7d1b      	ldrb	r3, [r3, #20]
 800db72:	2b00      	cmp	r3, #0
 800db74:	d033      	beq.n	800dbde <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800db7a:	2b0a      	cmp	r3, #10
 800db7c:	d02f      	beq.n	800dbde <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800db82:	2b01      	cmp	r3, #1
 800db84:	d02b      	beq.n	800dbde <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d007      	beq.n	800db9e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800db92:	4618      	mov	r0, r3
 800db94:	f7fe fa10 	bl	800bfb8 <pbuf_free>
      pcb->refused_data = NULL;
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	2200      	movs	r2, #0
 800db9c:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d002      	beq.n	800dbac <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800dba6:	6878      	ldr	r0, [r7, #4]
 800dba8:	f000 f986 	bl	800deb8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800dbb2:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dbb8:	4618      	mov	r0, r3
 800dbba:	f7ff fdc7 	bl	800d74c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dbc2:	4618      	mov	r0, r3
 800dbc4:	f7ff fdc2 	bl	800d74c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	2200      	movs	r2, #0
 800dbcc:	66da      	str	r2, [r3, #108]	@ 0x6c
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	2200      	movs	r2, #0
 800dbda:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800dbde:	3708      	adds	r7, #8
 800dbe0:	46bd      	mov	sp, r7
 800dbe2:	bd80      	pop	{r7, pc}
 800dbe4:	0801eca8 	.word	0x0801eca8
 800dbe8:	0801f2f4 	.word	0x0801f2f4
 800dbec:	0801ecec 	.word	0x0801ecec

0800dbf0 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800dbf0:	b580      	push	{r7, lr}
 800dbf2:	b084      	sub	sp, #16
 800dbf4:	af00      	add	r7, sp, #0
 800dbf6:	6078      	str	r0, [r7, #4]
 800dbf8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800dbfa:	683b      	ldr	r3, [r7, #0]
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d106      	bne.n	800dc0e <tcp_pcb_remove+0x1e>
 800dc00:	4b3e      	ldr	r3, [pc, #248]	@ (800dcfc <tcp_pcb_remove+0x10c>)
 800dc02:	f640 0283 	movw	r2, #2179	@ 0x883
 800dc06:	493e      	ldr	r1, [pc, #248]	@ (800dd00 <tcp_pcb_remove+0x110>)
 800dc08:	483e      	ldr	r0, [pc, #248]	@ (800dd04 <tcp_pcb_remove+0x114>)
 800dc0a:	f008 f817 	bl	8015c3c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d106      	bne.n	800dc22 <tcp_pcb_remove+0x32>
 800dc14:	4b39      	ldr	r3, [pc, #228]	@ (800dcfc <tcp_pcb_remove+0x10c>)
 800dc16:	f640 0284 	movw	r2, #2180	@ 0x884
 800dc1a:	493b      	ldr	r1, [pc, #236]	@ (800dd08 <tcp_pcb_remove+0x118>)
 800dc1c:	4839      	ldr	r0, [pc, #228]	@ (800dd04 <tcp_pcb_remove+0x114>)
 800dc1e:	f008 f80d 	bl	8015c3c <iprintf>

  TCP_RMV(pcblist, pcb);
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	683a      	ldr	r2, [r7, #0]
 800dc28:	429a      	cmp	r2, r3
 800dc2a:	d105      	bne.n	800dc38 <tcp_pcb_remove+0x48>
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	68da      	ldr	r2, [r3, #12]
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	601a      	str	r2, [r3, #0]
 800dc36:	e013      	b.n	800dc60 <tcp_pcb_remove+0x70>
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	60fb      	str	r3, [r7, #12]
 800dc3e:	e00c      	b.n	800dc5a <tcp_pcb_remove+0x6a>
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	68db      	ldr	r3, [r3, #12]
 800dc44:	683a      	ldr	r2, [r7, #0]
 800dc46:	429a      	cmp	r2, r3
 800dc48:	d104      	bne.n	800dc54 <tcp_pcb_remove+0x64>
 800dc4a:	683b      	ldr	r3, [r7, #0]
 800dc4c:	68da      	ldr	r2, [r3, #12]
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	60da      	str	r2, [r3, #12]
 800dc52:	e005      	b.n	800dc60 <tcp_pcb_remove+0x70>
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	68db      	ldr	r3, [r3, #12]
 800dc58:	60fb      	str	r3, [r7, #12]
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d1ef      	bne.n	800dc40 <tcp_pcb_remove+0x50>
 800dc60:	683b      	ldr	r3, [r7, #0]
 800dc62:	2200      	movs	r2, #0
 800dc64:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800dc66:	6838      	ldr	r0, [r7, #0]
 800dc68:	f7ff ff72 	bl	800db50 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800dc6c:	683b      	ldr	r3, [r7, #0]
 800dc6e:	7d1b      	ldrb	r3, [r3, #20]
 800dc70:	2b0a      	cmp	r3, #10
 800dc72:	d013      	beq.n	800dc9c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800dc74:	683b      	ldr	r3, [r7, #0]
 800dc76:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800dc78:	2b01      	cmp	r3, #1
 800dc7a:	d00f      	beq.n	800dc9c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800dc7c:	683b      	ldr	r3, [r7, #0]
 800dc7e:	8b5b      	ldrh	r3, [r3, #26]
 800dc80:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d009      	beq.n	800dc9c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800dc88:	683b      	ldr	r3, [r7, #0]
 800dc8a:	8b5b      	ldrh	r3, [r3, #26]
 800dc8c:	f043 0302 	orr.w	r3, r3, #2
 800dc90:	b29a      	uxth	r2, r3
 800dc92:	683b      	ldr	r3, [r7, #0]
 800dc94:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800dc96:	6838      	ldr	r0, [r7, #0]
 800dc98:	f002 ff68 	bl	8010b6c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800dc9c:	683b      	ldr	r3, [r7, #0]
 800dc9e:	7d1b      	ldrb	r3, [r3, #20]
 800dca0:	2b01      	cmp	r3, #1
 800dca2:	d020      	beq.n	800dce6 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800dca4:	683b      	ldr	r3, [r7, #0]
 800dca6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d006      	beq.n	800dcba <tcp_pcb_remove+0xca>
 800dcac:	4b13      	ldr	r3, [pc, #76]	@ (800dcfc <tcp_pcb_remove+0x10c>)
 800dcae:	f640 0293 	movw	r2, #2195	@ 0x893
 800dcb2:	4916      	ldr	r1, [pc, #88]	@ (800dd0c <tcp_pcb_remove+0x11c>)
 800dcb4:	4813      	ldr	r0, [pc, #76]	@ (800dd04 <tcp_pcb_remove+0x114>)
 800dcb6:	f007 ffc1 	bl	8015c3c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800dcba:	683b      	ldr	r3, [r7, #0]
 800dcbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d006      	beq.n	800dcd0 <tcp_pcb_remove+0xe0>
 800dcc2:	4b0e      	ldr	r3, [pc, #56]	@ (800dcfc <tcp_pcb_remove+0x10c>)
 800dcc4:	f640 0294 	movw	r2, #2196	@ 0x894
 800dcc8:	4911      	ldr	r1, [pc, #68]	@ (800dd10 <tcp_pcb_remove+0x120>)
 800dcca:	480e      	ldr	r0, [pc, #56]	@ (800dd04 <tcp_pcb_remove+0x114>)
 800dccc:	f007 ffb6 	bl	8015c3c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800dcd0:	683b      	ldr	r3, [r7, #0]
 800dcd2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d006      	beq.n	800dce6 <tcp_pcb_remove+0xf6>
 800dcd8:	4b08      	ldr	r3, [pc, #32]	@ (800dcfc <tcp_pcb_remove+0x10c>)
 800dcda:	f640 0296 	movw	r2, #2198	@ 0x896
 800dcde:	490d      	ldr	r1, [pc, #52]	@ (800dd14 <tcp_pcb_remove+0x124>)
 800dce0:	4808      	ldr	r0, [pc, #32]	@ (800dd04 <tcp_pcb_remove+0x114>)
 800dce2:	f007 ffab 	bl	8015c3c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800dce6:	683b      	ldr	r3, [r7, #0]
 800dce8:	2200      	movs	r2, #0
 800dcea:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800dcec:	683b      	ldr	r3, [r7, #0]
 800dcee:	2200      	movs	r2, #0
 800dcf0:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800dcf2:	bf00      	nop
 800dcf4:	3710      	adds	r7, #16
 800dcf6:	46bd      	mov	sp, r7
 800dcf8:	bd80      	pop	{r7, pc}
 800dcfa:	bf00      	nop
 800dcfc:	0801eca8 	.word	0x0801eca8
 800dd00:	0801f310 	.word	0x0801f310
 800dd04:	0801ecec 	.word	0x0801ecec
 800dd08:	0801f32c 	.word	0x0801f32c
 800dd0c:	0801f34c 	.word	0x0801f34c
 800dd10:	0801f364 	.word	0x0801f364
 800dd14:	0801f380 	.word	0x0801f380

0800dd18 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800dd18:	b580      	push	{r7, lr}
 800dd1a:	b082      	sub	sp, #8
 800dd1c:	af00      	add	r7, sp, #0
 800dd1e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d106      	bne.n	800dd34 <tcp_next_iss+0x1c>
 800dd26:	4b0a      	ldr	r3, [pc, #40]	@ (800dd50 <tcp_next_iss+0x38>)
 800dd28:	f640 02af 	movw	r2, #2223	@ 0x8af
 800dd2c:	4909      	ldr	r1, [pc, #36]	@ (800dd54 <tcp_next_iss+0x3c>)
 800dd2e:	480a      	ldr	r0, [pc, #40]	@ (800dd58 <tcp_next_iss+0x40>)
 800dd30:	f007 ff84 	bl	8015c3c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800dd34:	4b09      	ldr	r3, [pc, #36]	@ (800dd5c <tcp_next_iss+0x44>)
 800dd36:	681a      	ldr	r2, [r3, #0]
 800dd38:	4b09      	ldr	r3, [pc, #36]	@ (800dd60 <tcp_next_iss+0x48>)
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	4413      	add	r3, r2
 800dd3e:	4a07      	ldr	r2, [pc, #28]	@ (800dd5c <tcp_next_iss+0x44>)
 800dd40:	6013      	str	r3, [r2, #0]
  return iss;
 800dd42:	4b06      	ldr	r3, [pc, #24]	@ (800dd5c <tcp_next_iss+0x44>)
 800dd44:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800dd46:	4618      	mov	r0, r3
 800dd48:	3708      	adds	r7, #8
 800dd4a:	46bd      	mov	sp, r7
 800dd4c:	bd80      	pop	{r7, pc}
 800dd4e:	bf00      	nop
 800dd50:	0801eca8 	.word	0x0801eca8
 800dd54:	0801f398 	.word	0x0801f398
 800dd58:	0801ecec 	.word	0x0801ecec
 800dd5c:	20000464 	.word	0x20000464
 800dd60:	20009244 	.word	0x20009244

0800dd64 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800dd64:	b580      	push	{r7, lr}
 800dd66:	b086      	sub	sp, #24
 800dd68:	af00      	add	r7, sp, #0
 800dd6a:	4603      	mov	r3, r0
 800dd6c:	60b9      	str	r1, [r7, #8]
 800dd6e:	607a      	str	r2, [r7, #4]
 800dd70:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d106      	bne.n	800dd86 <tcp_eff_send_mss_netif+0x22>
 800dd78:	4b14      	ldr	r3, [pc, #80]	@ (800ddcc <tcp_eff_send_mss_netif+0x68>)
 800dd7a:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800dd7e:	4914      	ldr	r1, [pc, #80]	@ (800ddd0 <tcp_eff_send_mss_netif+0x6c>)
 800dd80:	4814      	ldr	r0, [pc, #80]	@ (800ddd4 <tcp_eff_send_mss_netif+0x70>)
 800dd82:	f007 ff5b 	bl	8015c3c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800dd86:	68bb      	ldr	r3, [r7, #8]
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d101      	bne.n	800dd90 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800dd8c:	89fb      	ldrh	r3, [r7, #14]
 800dd8e:	e019      	b.n	800ddc4 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800dd90:	68bb      	ldr	r3, [r7, #8]
 800dd92:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800dd94:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800dd96:	8afb      	ldrh	r3, [r7, #22]
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d012      	beq.n	800ddc2 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800dd9c:	2328      	movs	r3, #40	@ 0x28
 800dd9e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800dda0:	8afa      	ldrh	r2, [r7, #22]
 800dda2:	8abb      	ldrh	r3, [r7, #20]
 800dda4:	429a      	cmp	r2, r3
 800dda6:	d904      	bls.n	800ddb2 <tcp_eff_send_mss_netif+0x4e>
 800dda8:	8afa      	ldrh	r2, [r7, #22]
 800ddaa:	8abb      	ldrh	r3, [r7, #20]
 800ddac:	1ad3      	subs	r3, r2, r3
 800ddae:	b29b      	uxth	r3, r3
 800ddb0:	e000      	b.n	800ddb4 <tcp_eff_send_mss_netif+0x50>
 800ddb2:	2300      	movs	r3, #0
 800ddb4:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800ddb6:	8a7a      	ldrh	r2, [r7, #18]
 800ddb8:	89fb      	ldrh	r3, [r7, #14]
 800ddba:	4293      	cmp	r3, r2
 800ddbc:	bf28      	it	cs
 800ddbe:	4613      	movcs	r3, r2
 800ddc0:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800ddc2:	89fb      	ldrh	r3, [r7, #14]
}
 800ddc4:	4618      	mov	r0, r3
 800ddc6:	3718      	adds	r7, #24
 800ddc8:	46bd      	mov	sp, r7
 800ddca:	bd80      	pop	{r7, pc}
 800ddcc:	0801eca8 	.word	0x0801eca8
 800ddd0:	0801f3b4 	.word	0x0801f3b4
 800ddd4:	0801ecec 	.word	0x0801ecec

0800ddd8 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800ddd8:	b580      	push	{r7, lr}
 800ddda:	b084      	sub	sp, #16
 800dddc:	af00      	add	r7, sp, #0
 800ddde:	6078      	str	r0, [r7, #4]
 800dde0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800dde2:	683b      	ldr	r3, [r7, #0]
 800dde4:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d119      	bne.n	800de20 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800ddec:	4b10      	ldr	r3, [pc, #64]	@ (800de30 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800ddee:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800ddf2:	4910      	ldr	r1, [pc, #64]	@ (800de34 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800ddf4:	4810      	ldr	r0, [pc, #64]	@ (800de38 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800ddf6:	f007 ff21 	bl	8015c3c <iprintf>

  while (pcb != NULL) {
 800ddfa:	e011      	b.n	800de20 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	681a      	ldr	r2, [r3, #0]
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	429a      	cmp	r2, r3
 800de06:	d108      	bne.n	800de1a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	68db      	ldr	r3, [r3, #12]
 800de0c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800de0e:	68f8      	ldr	r0, [r7, #12]
 800de10:	f7fe ffc4 	bl	800cd9c <tcp_abort>
      pcb = next;
 800de14:	68bb      	ldr	r3, [r7, #8]
 800de16:	60fb      	str	r3, [r7, #12]
 800de18:	e002      	b.n	800de20 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	68db      	ldr	r3, [r3, #12]
 800de1e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	2b00      	cmp	r3, #0
 800de24:	d1ea      	bne.n	800ddfc <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800de26:	bf00      	nop
 800de28:	bf00      	nop
 800de2a:	3710      	adds	r7, #16
 800de2c:	46bd      	mov	sp, r7
 800de2e:	bd80      	pop	{r7, pc}
 800de30:	0801eca8 	.word	0x0801eca8
 800de34:	0801f3dc 	.word	0x0801f3dc
 800de38:	0801ecec 	.word	0x0801ecec

0800de3c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800de3c:	b580      	push	{r7, lr}
 800de3e:	b084      	sub	sp, #16
 800de40:	af00      	add	r7, sp, #0
 800de42:	6078      	str	r0, [r7, #4]
 800de44:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d02a      	beq.n	800dea2 <tcp_netif_ip_addr_changed+0x66>
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	2b00      	cmp	r3, #0
 800de52:	d026      	beq.n	800dea2 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800de54:	4b15      	ldr	r3, [pc, #84]	@ (800deac <tcp_netif_ip_addr_changed+0x70>)
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	4619      	mov	r1, r3
 800de5a:	6878      	ldr	r0, [r7, #4]
 800de5c:	f7ff ffbc 	bl	800ddd8 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800de60:	4b13      	ldr	r3, [pc, #76]	@ (800deb0 <tcp_netif_ip_addr_changed+0x74>)
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	4619      	mov	r1, r3
 800de66:	6878      	ldr	r0, [r7, #4]
 800de68:	f7ff ffb6 	bl	800ddd8 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800de6c:	683b      	ldr	r3, [r7, #0]
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d017      	beq.n	800dea2 <tcp_netif_ip_addr_changed+0x66>
 800de72:	683b      	ldr	r3, [r7, #0]
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	2b00      	cmp	r3, #0
 800de78:	d013      	beq.n	800dea2 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800de7a:	4b0e      	ldr	r3, [pc, #56]	@ (800deb4 <tcp_netif_ip_addr_changed+0x78>)
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	60fb      	str	r3, [r7, #12]
 800de80:	e00c      	b.n	800de9c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	681a      	ldr	r2, [r3, #0]
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	429a      	cmp	r2, r3
 800de8c:	d103      	bne.n	800de96 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800de8e:	683b      	ldr	r3, [r7, #0]
 800de90:	681a      	ldr	r2, [r3, #0]
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	68db      	ldr	r3, [r3, #12]
 800de9a:	60fb      	str	r3, [r7, #12]
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d1ef      	bne.n	800de82 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800dea2:	bf00      	nop
 800dea4:	3710      	adds	r7, #16
 800dea6:	46bd      	mov	sp, r7
 800dea8:	bd80      	pop	{r7, pc}
 800deaa:	bf00      	nop
 800deac:	20009250 	.word	0x20009250
 800deb0:	20009248 	.word	0x20009248
 800deb4:	2000924c 	.word	0x2000924c

0800deb8 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800deb8:	b580      	push	{r7, lr}
 800deba:	b082      	sub	sp, #8
 800debc:	af00      	add	r7, sp, #0
 800debe:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d007      	beq.n	800ded8 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800decc:	4618      	mov	r0, r3
 800dece:	f7ff fc3d 	bl	800d74c <tcp_segs_free>
    pcb->ooseq = NULL;
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	2200      	movs	r2, #0
 800ded6:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800ded8:	bf00      	nop
 800deda:	3708      	adds	r7, #8
 800dedc:	46bd      	mov	sp, r7
 800dede:	bd80      	pop	{r7, pc}

0800dee0 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800dee0:	b590      	push	{r4, r7, lr}
 800dee2:	b08d      	sub	sp, #52	@ 0x34
 800dee4:	af04      	add	r7, sp, #16
 800dee6:	6078      	str	r0, [r7, #4]
 800dee8:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	2b00      	cmp	r3, #0
 800deee:	d105      	bne.n	800defc <tcp_input+0x1c>
 800def0:	4b9b      	ldr	r3, [pc, #620]	@ (800e160 <tcp_input+0x280>)
 800def2:	2283      	movs	r2, #131	@ 0x83
 800def4:	499b      	ldr	r1, [pc, #620]	@ (800e164 <tcp_input+0x284>)
 800def6:	489c      	ldr	r0, [pc, #624]	@ (800e168 <tcp_input+0x288>)
 800def8:	f007 fea0 	bl	8015c3c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	685b      	ldr	r3, [r3, #4]
 800df00:	4a9a      	ldr	r2, [pc, #616]	@ (800e16c <tcp_input+0x28c>)
 800df02:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	895b      	ldrh	r3, [r3, #10]
 800df08:	2b13      	cmp	r3, #19
 800df0a:	f240 83d1 	bls.w	800e6b0 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800df0e:	4b98      	ldr	r3, [pc, #608]	@ (800e170 <tcp_input+0x290>)
 800df10:	695b      	ldr	r3, [r3, #20]
 800df12:	4a97      	ldr	r2, [pc, #604]	@ (800e170 <tcp_input+0x290>)
 800df14:	6812      	ldr	r2, [r2, #0]
 800df16:	4611      	mov	r1, r2
 800df18:	4618      	mov	r0, r3
 800df1a:	f005 ffa3 	bl	8013e64 <ip4_addr_isbroadcast_u32>
 800df1e:	4603      	mov	r3, r0
 800df20:	2b00      	cmp	r3, #0
 800df22:	f040 83c7 	bne.w	800e6b4 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800df26:	4b92      	ldr	r3, [pc, #584]	@ (800e170 <tcp_input+0x290>)
 800df28:	695b      	ldr	r3, [r3, #20]
 800df2a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800df2e:	2be0      	cmp	r3, #224	@ 0xe0
 800df30:	f000 83c0 	beq.w	800e6b4 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800df34:	4b8d      	ldr	r3, [pc, #564]	@ (800e16c <tcp_input+0x28c>)
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	899b      	ldrh	r3, [r3, #12]
 800df3a:	b29b      	uxth	r3, r3
 800df3c:	4618      	mov	r0, r3
 800df3e:	f7fc fa13 	bl	800a368 <lwip_htons>
 800df42:	4603      	mov	r3, r0
 800df44:	0b1b      	lsrs	r3, r3, #12
 800df46:	b29b      	uxth	r3, r3
 800df48:	b2db      	uxtb	r3, r3
 800df4a:	009b      	lsls	r3, r3, #2
 800df4c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800df4e:	7cbb      	ldrb	r3, [r7, #18]
 800df50:	2b13      	cmp	r3, #19
 800df52:	f240 83b1 	bls.w	800e6b8 <tcp_input+0x7d8>
 800df56:	7cbb      	ldrb	r3, [r7, #18]
 800df58:	b29a      	uxth	r2, r3
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	891b      	ldrh	r3, [r3, #8]
 800df5e:	429a      	cmp	r2, r3
 800df60:	f200 83aa 	bhi.w	800e6b8 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800df64:	7cbb      	ldrb	r3, [r7, #18]
 800df66:	b29b      	uxth	r3, r3
 800df68:	3b14      	subs	r3, #20
 800df6a:	b29a      	uxth	r2, r3
 800df6c:	4b81      	ldr	r3, [pc, #516]	@ (800e174 <tcp_input+0x294>)
 800df6e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800df70:	4b81      	ldr	r3, [pc, #516]	@ (800e178 <tcp_input+0x298>)
 800df72:	2200      	movs	r2, #0
 800df74:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	895a      	ldrh	r2, [r3, #10]
 800df7a:	7cbb      	ldrb	r3, [r7, #18]
 800df7c:	b29b      	uxth	r3, r3
 800df7e:	429a      	cmp	r2, r3
 800df80:	d309      	bcc.n	800df96 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800df82:	4b7c      	ldr	r3, [pc, #496]	@ (800e174 <tcp_input+0x294>)
 800df84:	881a      	ldrh	r2, [r3, #0]
 800df86:	4b7d      	ldr	r3, [pc, #500]	@ (800e17c <tcp_input+0x29c>)
 800df88:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800df8a:	7cbb      	ldrb	r3, [r7, #18]
 800df8c:	4619      	mov	r1, r3
 800df8e:	6878      	ldr	r0, [r7, #4]
 800df90:	f7fd ff8c 	bl	800beac <pbuf_remove_header>
 800df94:	e04e      	b.n	800e034 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d105      	bne.n	800dfaa <tcp_input+0xca>
 800df9e:	4b70      	ldr	r3, [pc, #448]	@ (800e160 <tcp_input+0x280>)
 800dfa0:	22c2      	movs	r2, #194	@ 0xc2
 800dfa2:	4977      	ldr	r1, [pc, #476]	@ (800e180 <tcp_input+0x2a0>)
 800dfa4:	4870      	ldr	r0, [pc, #448]	@ (800e168 <tcp_input+0x288>)
 800dfa6:	f007 fe49 	bl	8015c3c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800dfaa:	2114      	movs	r1, #20
 800dfac:	6878      	ldr	r0, [r7, #4]
 800dfae:	f7fd ff7d 	bl	800beac <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	895a      	ldrh	r2, [r3, #10]
 800dfb6:	4b71      	ldr	r3, [pc, #452]	@ (800e17c <tcp_input+0x29c>)
 800dfb8:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800dfba:	4b6e      	ldr	r3, [pc, #440]	@ (800e174 <tcp_input+0x294>)
 800dfbc:	881a      	ldrh	r2, [r3, #0]
 800dfbe:	4b6f      	ldr	r3, [pc, #444]	@ (800e17c <tcp_input+0x29c>)
 800dfc0:	881b      	ldrh	r3, [r3, #0]
 800dfc2:	1ad3      	subs	r3, r2, r3
 800dfc4:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800dfc6:	4b6d      	ldr	r3, [pc, #436]	@ (800e17c <tcp_input+0x29c>)
 800dfc8:	881b      	ldrh	r3, [r3, #0]
 800dfca:	4619      	mov	r1, r3
 800dfcc:	6878      	ldr	r0, [r7, #4]
 800dfce:	f7fd ff6d 	bl	800beac <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	895b      	ldrh	r3, [r3, #10]
 800dfd8:	8a3a      	ldrh	r2, [r7, #16]
 800dfda:	429a      	cmp	r2, r3
 800dfdc:	f200 836e 	bhi.w	800e6bc <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	685b      	ldr	r3, [r3, #4]
 800dfe6:	4a64      	ldr	r2, [pc, #400]	@ (800e178 <tcp_input+0x298>)
 800dfe8:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	8a3a      	ldrh	r2, [r7, #16]
 800dff0:	4611      	mov	r1, r2
 800dff2:	4618      	mov	r0, r3
 800dff4:	f7fd ff5a 	bl	800beac <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	891a      	ldrh	r2, [r3, #8]
 800dffc:	8a3b      	ldrh	r3, [r7, #16]
 800dffe:	1ad3      	subs	r3, r2, r3
 800e000:	b29a      	uxth	r2, r3
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	895b      	ldrh	r3, [r3, #10]
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d005      	beq.n	800e01a <tcp_input+0x13a>
 800e00e:	4b54      	ldr	r3, [pc, #336]	@ (800e160 <tcp_input+0x280>)
 800e010:	22df      	movs	r2, #223	@ 0xdf
 800e012:	495c      	ldr	r1, [pc, #368]	@ (800e184 <tcp_input+0x2a4>)
 800e014:	4854      	ldr	r0, [pc, #336]	@ (800e168 <tcp_input+0x288>)
 800e016:	f007 fe11 	bl	8015c3c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	891a      	ldrh	r2, [r3, #8]
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	891b      	ldrh	r3, [r3, #8]
 800e024:	429a      	cmp	r2, r3
 800e026:	d005      	beq.n	800e034 <tcp_input+0x154>
 800e028:	4b4d      	ldr	r3, [pc, #308]	@ (800e160 <tcp_input+0x280>)
 800e02a:	22e0      	movs	r2, #224	@ 0xe0
 800e02c:	4956      	ldr	r1, [pc, #344]	@ (800e188 <tcp_input+0x2a8>)
 800e02e:	484e      	ldr	r0, [pc, #312]	@ (800e168 <tcp_input+0x288>)
 800e030:	f007 fe04 	bl	8015c3c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800e034:	4b4d      	ldr	r3, [pc, #308]	@ (800e16c <tcp_input+0x28c>)
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	881b      	ldrh	r3, [r3, #0]
 800e03a:	b29b      	uxth	r3, r3
 800e03c:	4a4b      	ldr	r2, [pc, #300]	@ (800e16c <tcp_input+0x28c>)
 800e03e:	6814      	ldr	r4, [r2, #0]
 800e040:	4618      	mov	r0, r3
 800e042:	f7fc f991 	bl	800a368 <lwip_htons>
 800e046:	4603      	mov	r3, r0
 800e048:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800e04a:	4b48      	ldr	r3, [pc, #288]	@ (800e16c <tcp_input+0x28c>)
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	885b      	ldrh	r3, [r3, #2]
 800e050:	b29b      	uxth	r3, r3
 800e052:	4a46      	ldr	r2, [pc, #280]	@ (800e16c <tcp_input+0x28c>)
 800e054:	6814      	ldr	r4, [r2, #0]
 800e056:	4618      	mov	r0, r3
 800e058:	f7fc f986 	bl	800a368 <lwip_htons>
 800e05c:	4603      	mov	r3, r0
 800e05e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800e060:	4b42      	ldr	r3, [pc, #264]	@ (800e16c <tcp_input+0x28c>)
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	685b      	ldr	r3, [r3, #4]
 800e066:	4a41      	ldr	r2, [pc, #260]	@ (800e16c <tcp_input+0x28c>)
 800e068:	6814      	ldr	r4, [r2, #0]
 800e06a:	4618      	mov	r0, r3
 800e06c:	f7fc f992 	bl	800a394 <lwip_htonl>
 800e070:	4603      	mov	r3, r0
 800e072:	6063      	str	r3, [r4, #4]
 800e074:	6863      	ldr	r3, [r4, #4]
 800e076:	4a45      	ldr	r2, [pc, #276]	@ (800e18c <tcp_input+0x2ac>)
 800e078:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800e07a:	4b3c      	ldr	r3, [pc, #240]	@ (800e16c <tcp_input+0x28c>)
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	689b      	ldr	r3, [r3, #8]
 800e080:	4a3a      	ldr	r2, [pc, #232]	@ (800e16c <tcp_input+0x28c>)
 800e082:	6814      	ldr	r4, [r2, #0]
 800e084:	4618      	mov	r0, r3
 800e086:	f7fc f985 	bl	800a394 <lwip_htonl>
 800e08a:	4603      	mov	r3, r0
 800e08c:	60a3      	str	r3, [r4, #8]
 800e08e:	68a3      	ldr	r3, [r4, #8]
 800e090:	4a3f      	ldr	r2, [pc, #252]	@ (800e190 <tcp_input+0x2b0>)
 800e092:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800e094:	4b35      	ldr	r3, [pc, #212]	@ (800e16c <tcp_input+0x28c>)
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	89db      	ldrh	r3, [r3, #14]
 800e09a:	b29b      	uxth	r3, r3
 800e09c:	4a33      	ldr	r2, [pc, #204]	@ (800e16c <tcp_input+0x28c>)
 800e09e:	6814      	ldr	r4, [r2, #0]
 800e0a0:	4618      	mov	r0, r3
 800e0a2:	f7fc f961 	bl	800a368 <lwip_htons>
 800e0a6:	4603      	mov	r3, r0
 800e0a8:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800e0aa:	4b30      	ldr	r3, [pc, #192]	@ (800e16c <tcp_input+0x28c>)
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	899b      	ldrh	r3, [r3, #12]
 800e0b0:	b29b      	uxth	r3, r3
 800e0b2:	4618      	mov	r0, r3
 800e0b4:	f7fc f958 	bl	800a368 <lwip_htons>
 800e0b8:	4603      	mov	r3, r0
 800e0ba:	b2db      	uxtb	r3, r3
 800e0bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e0c0:	b2da      	uxtb	r2, r3
 800e0c2:	4b34      	ldr	r3, [pc, #208]	@ (800e194 <tcp_input+0x2b4>)
 800e0c4:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	891a      	ldrh	r2, [r3, #8]
 800e0ca:	4b33      	ldr	r3, [pc, #204]	@ (800e198 <tcp_input+0x2b8>)
 800e0cc:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800e0ce:	4b31      	ldr	r3, [pc, #196]	@ (800e194 <tcp_input+0x2b4>)
 800e0d0:	781b      	ldrb	r3, [r3, #0]
 800e0d2:	f003 0303 	and.w	r3, r3, #3
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d00c      	beq.n	800e0f4 <tcp_input+0x214>
    tcplen++;
 800e0da:	4b2f      	ldr	r3, [pc, #188]	@ (800e198 <tcp_input+0x2b8>)
 800e0dc:	881b      	ldrh	r3, [r3, #0]
 800e0de:	3301      	adds	r3, #1
 800e0e0:	b29a      	uxth	r2, r3
 800e0e2:	4b2d      	ldr	r3, [pc, #180]	@ (800e198 <tcp_input+0x2b8>)
 800e0e4:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	891a      	ldrh	r2, [r3, #8]
 800e0ea:	4b2b      	ldr	r3, [pc, #172]	@ (800e198 <tcp_input+0x2b8>)
 800e0ec:	881b      	ldrh	r3, [r3, #0]
 800e0ee:	429a      	cmp	r2, r3
 800e0f0:	f200 82e6 	bhi.w	800e6c0 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800e0f4:	2300      	movs	r3, #0
 800e0f6:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e0f8:	4b28      	ldr	r3, [pc, #160]	@ (800e19c <tcp_input+0x2bc>)
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	61fb      	str	r3, [r7, #28]
 800e0fe:	e09d      	b.n	800e23c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800e100:	69fb      	ldr	r3, [r7, #28]
 800e102:	7d1b      	ldrb	r3, [r3, #20]
 800e104:	2b00      	cmp	r3, #0
 800e106:	d105      	bne.n	800e114 <tcp_input+0x234>
 800e108:	4b15      	ldr	r3, [pc, #84]	@ (800e160 <tcp_input+0x280>)
 800e10a:	22fb      	movs	r2, #251	@ 0xfb
 800e10c:	4924      	ldr	r1, [pc, #144]	@ (800e1a0 <tcp_input+0x2c0>)
 800e10e:	4816      	ldr	r0, [pc, #88]	@ (800e168 <tcp_input+0x288>)
 800e110:	f007 fd94 	bl	8015c3c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800e114:	69fb      	ldr	r3, [r7, #28]
 800e116:	7d1b      	ldrb	r3, [r3, #20]
 800e118:	2b0a      	cmp	r3, #10
 800e11a:	d105      	bne.n	800e128 <tcp_input+0x248>
 800e11c:	4b10      	ldr	r3, [pc, #64]	@ (800e160 <tcp_input+0x280>)
 800e11e:	22fc      	movs	r2, #252	@ 0xfc
 800e120:	4920      	ldr	r1, [pc, #128]	@ (800e1a4 <tcp_input+0x2c4>)
 800e122:	4811      	ldr	r0, [pc, #68]	@ (800e168 <tcp_input+0x288>)
 800e124:	f007 fd8a 	bl	8015c3c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800e128:	69fb      	ldr	r3, [r7, #28]
 800e12a:	7d1b      	ldrb	r3, [r3, #20]
 800e12c:	2b01      	cmp	r3, #1
 800e12e:	d105      	bne.n	800e13c <tcp_input+0x25c>
 800e130:	4b0b      	ldr	r3, [pc, #44]	@ (800e160 <tcp_input+0x280>)
 800e132:	22fd      	movs	r2, #253	@ 0xfd
 800e134:	491c      	ldr	r1, [pc, #112]	@ (800e1a8 <tcp_input+0x2c8>)
 800e136:	480c      	ldr	r0, [pc, #48]	@ (800e168 <tcp_input+0x288>)
 800e138:	f007 fd80 	bl	8015c3c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e13c:	69fb      	ldr	r3, [r7, #28]
 800e13e:	7a1b      	ldrb	r3, [r3, #8]
 800e140:	2b00      	cmp	r3, #0
 800e142:	d033      	beq.n	800e1ac <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e144:	69fb      	ldr	r3, [r7, #28]
 800e146:	7a1a      	ldrb	r2, [r3, #8]
 800e148:	4b09      	ldr	r3, [pc, #36]	@ (800e170 <tcp_input+0x290>)
 800e14a:	685b      	ldr	r3, [r3, #4]
 800e14c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e150:	3301      	adds	r3, #1
 800e152:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e154:	429a      	cmp	r2, r3
 800e156:	d029      	beq.n	800e1ac <tcp_input+0x2cc>
      prev = pcb;
 800e158:	69fb      	ldr	r3, [r7, #28]
 800e15a:	61bb      	str	r3, [r7, #24]
      continue;
 800e15c:	e06b      	b.n	800e236 <tcp_input+0x356>
 800e15e:	bf00      	nop
 800e160:	0801f410 	.word	0x0801f410
 800e164:	0801f444 	.word	0x0801f444
 800e168:	0801f45c 	.word	0x0801f45c
 800e16c:	2000926c 	.word	0x2000926c
 800e170:	20005f04 	.word	0x20005f04
 800e174:	20009270 	.word	0x20009270
 800e178:	20009274 	.word	0x20009274
 800e17c:	20009272 	.word	0x20009272
 800e180:	0801f484 	.word	0x0801f484
 800e184:	0801f494 	.word	0x0801f494
 800e188:	0801f4a0 	.word	0x0801f4a0
 800e18c:	2000927c 	.word	0x2000927c
 800e190:	20009280 	.word	0x20009280
 800e194:	20009288 	.word	0x20009288
 800e198:	20009286 	.word	0x20009286
 800e19c:	20009250 	.word	0x20009250
 800e1a0:	0801f4c0 	.word	0x0801f4c0
 800e1a4:	0801f4e8 	.word	0x0801f4e8
 800e1a8:	0801f514 	.word	0x0801f514
    }

    if (pcb->remote_port == tcphdr->src &&
 800e1ac:	69fb      	ldr	r3, [r7, #28]
 800e1ae:	8b1a      	ldrh	r2, [r3, #24]
 800e1b0:	4b72      	ldr	r3, [pc, #456]	@ (800e37c <tcp_input+0x49c>)
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	881b      	ldrh	r3, [r3, #0]
 800e1b6:	b29b      	uxth	r3, r3
 800e1b8:	429a      	cmp	r2, r3
 800e1ba:	d13a      	bne.n	800e232 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800e1bc:	69fb      	ldr	r3, [r7, #28]
 800e1be:	8ada      	ldrh	r2, [r3, #22]
 800e1c0:	4b6e      	ldr	r3, [pc, #440]	@ (800e37c <tcp_input+0x49c>)
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	885b      	ldrh	r3, [r3, #2]
 800e1c6:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800e1c8:	429a      	cmp	r2, r3
 800e1ca:	d132      	bne.n	800e232 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e1cc:	69fb      	ldr	r3, [r7, #28]
 800e1ce:	685a      	ldr	r2, [r3, #4]
 800e1d0:	4b6b      	ldr	r3, [pc, #428]	@ (800e380 <tcp_input+0x4a0>)
 800e1d2:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800e1d4:	429a      	cmp	r2, r3
 800e1d6:	d12c      	bne.n	800e232 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e1d8:	69fb      	ldr	r3, [r7, #28]
 800e1da:	681a      	ldr	r2, [r3, #0]
 800e1dc:	4b68      	ldr	r3, [pc, #416]	@ (800e380 <tcp_input+0x4a0>)
 800e1de:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e1e0:	429a      	cmp	r2, r3
 800e1e2:	d126      	bne.n	800e232 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800e1e4:	69fb      	ldr	r3, [r7, #28]
 800e1e6:	68db      	ldr	r3, [r3, #12]
 800e1e8:	69fa      	ldr	r2, [r7, #28]
 800e1ea:	429a      	cmp	r2, r3
 800e1ec:	d106      	bne.n	800e1fc <tcp_input+0x31c>
 800e1ee:	4b65      	ldr	r3, [pc, #404]	@ (800e384 <tcp_input+0x4a4>)
 800e1f0:	f240 120d 	movw	r2, #269	@ 0x10d
 800e1f4:	4964      	ldr	r1, [pc, #400]	@ (800e388 <tcp_input+0x4a8>)
 800e1f6:	4865      	ldr	r0, [pc, #404]	@ (800e38c <tcp_input+0x4ac>)
 800e1f8:	f007 fd20 	bl	8015c3c <iprintf>
      if (prev != NULL) {
 800e1fc:	69bb      	ldr	r3, [r7, #24]
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d00a      	beq.n	800e218 <tcp_input+0x338>
        prev->next = pcb->next;
 800e202:	69fb      	ldr	r3, [r7, #28]
 800e204:	68da      	ldr	r2, [r3, #12]
 800e206:	69bb      	ldr	r3, [r7, #24]
 800e208:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800e20a:	4b61      	ldr	r3, [pc, #388]	@ (800e390 <tcp_input+0x4b0>)
 800e20c:	681a      	ldr	r2, [r3, #0]
 800e20e:	69fb      	ldr	r3, [r7, #28]
 800e210:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800e212:	4a5f      	ldr	r2, [pc, #380]	@ (800e390 <tcp_input+0x4b0>)
 800e214:	69fb      	ldr	r3, [r7, #28]
 800e216:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800e218:	69fb      	ldr	r3, [r7, #28]
 800e21a:	68db      	ldr	r3, [r3, #12]
 800e21c:	69fa      	ldr	r2, [r7, #28]
 800e21e:	429a      	cmp	r2, r3
 800e220:	d111      	bne.n	800e246 <tcp_input+0x366>
 800e222:	4b58      	ldr	r3, [pc, #352]	@ (800e384 <tcp_input+0x4a4>)
 800e224:	f240 1215 	movw	r2, #277	@ 0x115
 800e228:	495a      	ldr	r1, [pc, #360]	@ (800e394 <tcp_input+0x4b4>)
 800e22a:	4858      	ldr	r0, [pc, #352]	@ (800e38c <tcp_input+0x4ac>)
 800e22c:	f007 fd06 	bl	8015c3c <iprintf>
      break;
 800e230:	e009      	b.n	800e246 <tcp_input+0x366>
    }
    prev = pcb;
 800e232:	69fb      	ldr	r3, [r7, #28]
 800e234:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e236:	69fb      	ldr	r3, [r7, #28]
 800e238:	68db      	ldr	r3, [r3, #12]
 800e23a:	61fb      	str	r3, [r7, #28]
 800e23c:	69fb      	ldr	r3, [r7, #28]
 800e23e:	2b00      	cmp	r3, #0
 800e240:	f47f af5e 	bne.w	800e100 <tcp_input+0x220>
 800e244:	e000      	b.n	800e248 <tcp_input+0x368>
      break;
 800e246:	bf00      	nop
  }

  if (pcb == NULL) {
 800e248:	69fb      	ldr	r3, [r7, #28]
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	f040 80aa 	bne.w	800e3a4 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e250:	4b51      	ldr	r3, [pc, #324]	@ (800e398 <tcp_input+0x4b8>)
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	61fb      	str	r3, [r7, #28]
 800e256:	e03f      	b.n	800e2d8 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e258:	69fb      	ldr	r3, [r7, #28]
 800e25a:	7d1b      	ldrb	r3, [r3, #20]
 800e25c:	2b0a      	cmp	r3, #10
 800e25e:	d006      	beq.n	800e26e <tcp_input+0x38e>
 800e260:	4b48      	ldr	r3, [pc, #288]	@ (800e384 <tcp_input+0x4a4>)
 800e262:	f240 121f 	movw	r2, #287	@ 0x11f
 800e266:	494d      	ldr	r1, [pc, #308]	@ (800e39c <tcp_input+0x4bc>)
 800e268:	4848      	ldr	r0, [pc, #288]	@ (800e38c <tcp_input+0x4ac>)
 800e26a:	f007 fce7 	bl	8015c3c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e26e:	69fb      	ldr	r3, [r7, #28]
 800e270:	7a1b      	ldrb	r3, [r3, #8]
 800e272:	2b00      	cmp	r3, #0
 800e274:	d009      	beq.n	800e28a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e276:	69fb      	ldr	r3, [r7, #28]
 800e278:	7a1a      	ldrb	r2, [r3, #8]
 800e27a:	4b41      	ldr	r3, [pc, #260]	@ (800e380 <tcp_input+0x4a0>)
 800e27c:	685b      	ldr	r3, [r3, #4]
 800e27e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e282:	3301      	adds	r3, #1
 800e284:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e286:	429a      	cmp	r2, r3
 800e288:	d122      	bne.n	800e2d0 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800e28a:	69fb      	ldr	r3, [r7, #28]
 800e28c:	8b1a      	ldrh	r2, [r3, #24]
 800e28e:	4b3b      	ldr	r3, [pc, #236]	@ (800e37c <tcp_input+0x49c>)
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	881b      	ldrh	r3, [r3, #0]
 800e294:	b29b      	uxth	r3, r3
 800e296:	429a      	cmp	r2, r3
 800e298:	d11b      	bne.n	800e2d2 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800e29a:	69fb      	ldr	r3, [r7, #28]
 800e29c:	8ada      	ldrh	r2, [r3, #22]
 800e29e:	4b37      	ldr	r3, [pc, #220]	@ (800e37c <tcp_input+0x49c>)
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	885b      	ldrh	r3, [r3, #2]
 800e2a4:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800e2a6:	429a      	cmp	r2, r3
 800e2a8:	d113      	bne.n	800e2d2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e2aa:	69fb      	ldr	r3, [r7, #28]
 800e2ac:	685a      	ldr	r2, [r3, #4]
 800e2ae:	4b34      	ldr	r3, [pc, #208]	@ (800e380 <tcp_input+0x4a0>)
 800e2b0:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800e2b2:	429a      	cmp	r2, r3
 800e2b4:	d10d      	bne.n	800e2d2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e2b6:	69fb      	ldr	r3, [r7, #28]
 800e2b8:	681a      	ldr	r2, [r3, #0]
 800e2ba:	4b31      	ldr	r3, [pc, #196]	@ (800e380 <tcp_input+0x4a0>)
 800e2bc:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e2be:	429a      	cmp	r2, r3
 800e2c0:	d107      	bne.n	800e2d2 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800e2c2:	69f8      	ldr	r0, [r7, #28]
 800e2c4:	f000 fb56 	bl	800e974 <tcp_timewait_input>
        }
        pbuf_free(p);
 800e2c8:	6878      	ldr	r0, [r7, #4]
 800e2ca:	f7fd fe75 	bl	800bfb8 <pbuf_free>
        return;
 800e2ce:	e1fd      	b.n	800e6cc <tcp_input+0x7ec>
        continue;
 800e2d0:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e2d2:	69fb      	ldr	r3, [r7, #28]
 800e2d4:	68db      	ldr	r3, [r3, #12]
 800e2d6:	61fb      	str	r3, [r7, #28]
 800e2d8:	69fb      	ldr	r3, [r7, #28]
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d1bc      	bne.n	800e258 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800e2de:	2300      	movs	r3, #0
 800e2e0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e2e2:	4b2f      	ldr	r3, [pc, #188]	@ (800e3a0 <tcp_input+0x4c0>)
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	617b      	str	r3, [r7, #20]
 800e2e8:	e02a      	b.n	800e340 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800e2ea:	697b      	ldr	r3, [r7, #20]
 800e2ec:	7a1b      	ldrb	r3, [r3, #8]
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d00c      	beq.n	800e30c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e2f2:	697b      	ldr	r3, [r7, #20]
 800e2f4:	7a1a      	ldrb	r2, [r3, #8]
 800e2f6:	4b22      	ldr	r3, [pc, #136]	@ (800e380 <tcp_input+0x4a0>)
 800e2f8:	685b      	ldr	r3, [r3, #4]
 800e2fa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e2fe:	3301      	adds	r3, #1
 800e300:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800e302:	429a      	cmp	r2, r3
 800e304:	d002      	beq.n	800e30c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800e306:	697b      	ldr	r3, [r7, #20]
 800e308:	61bb      	str	r3, [r7, #24]
        continue;
 800e30a:	e016      	b.n	800e33a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800e30c:	697b      	ldr	r3, [r7, #20]
 800e30e:	8ada      	ldrh	r2, [r3, #22]
 800e310:	4b1a      	ldr	r3, [pc, #104]	@ (800e37c <tcp_input+0x49c>)
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	885b      	ldrh	r3, [r3, #2]
 800e316:	b29b      	uxth	r3, r3
 800e318:	429a      	cmp	r2, r3
 800e31a:	d10c      	bne.n	800e336 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800e31c:	697b      	ldr	r3, [r7, #20]
 800e31e:	681a      	ldr	r2, [r3, #0]
 800e320:	4b17      	ldr	r3, [pc, #92]	@ (800e380 <tcp_input+0x4a0>)
 800e322:	695b      	ldr	r3, [r3, #20]
 800e324:	429a      	cmp	r2, r3
 800e326:	d00f      	beq.n	800e348 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800e328:	697b      	ldr	r3, [r7, #20]
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d00d      	beq.n	800e34a <tcp_input+0x46a>
 800e32e:	697b      	ldr	r3, [r7, #20]
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	2b00      	cmp	r3, #0
 800e334:	d009      	beq.n	800e34a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800e336:	697b      	ldr	r3, [r7, #20]
 800e338:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e33a:	697b      	ldr	r3, [r7, #20]
 800e33c:	68db      	ldr	r3, [r3, #12]
 800e33e:	617b      	str	r3, [r7, #20]
 800e340:	697b      	ldr	r3, [r7, #20]
 800e342:	2b00      	cmp	r3, #0
 800e344:	d1d1      	bne.n	800e2ea <tcp_input+0x40a>
 800e346:	e000      	b.n	800e34a <tcp_input+0x46a>
            break;
 800e348:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800e34a:	697b      	ldr	r3, [r7, #20]
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d029      	beq.n	800e3a4 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800e350:	69bb      	ldr	r3, [r7, #24]
 800e352:	2b00      	cmp	r3, #0
 800e354:	d00a      	beq.n	800e36c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800e356:	697b      	ldr	r3, [r7, #20]
 800e358:	68da      	ldr	r2, [r3, #12]
 800e35a:	69bb      	ldr	r3, [r7, #24]
 800e35c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800e35e:	4b10      	ldr	r3, [pc, #64]	@ (800e3a0 <tcp_input+0x4c0>)
 800e360:	681a      	ldr	r2, [r3, #0]
 800e362:	697b      	ldr	r3, [r7, #20]
 800e364:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800e366:	4a0e      	ldr	r2, [pc, #56]	@ (800e3a0 <tcp_input+0x4c0>)
 800e368:	697b      	ldr	r3, [r7, #20]
 800e36a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800e36c:	6978      	ldr	r0, [r7, #20]
 800e36e:	f000 fa03 	bl	800e778 <tcp_listen_input>
      }
      pbuf_free(p);
 800e372:	6878      	ldr	r0, [r7, #4]
 800e374:	f7fd fe20 	bl	800bfb8 <pbuf_free>
      return;
 800e378:	e1a8      	b.n	800e6cc <tcp_input+0x7ec>
 800e37a:	bf00      	nop
 800e37c:	2000926c 	.word	0x2000926c
 800e380:	20005f04 	.word	0x20005f04
 800e384:	0801f410 	.word	0x0801f410
 800e388:	0801f53c 	.word	0x0801f53c
 800e38c:	0801f45c 	.word	0x0801f45c
 800e390:	20009250 	.word	0x20009250
 800e394:	0801f568 	.word	0x0801f568
 800e398:	20009254 	.word	0x20009254
 800e39c:	0801f594 	.word	0x0801f594
 800e3a0:	2000924c 	.word	0x2000924c
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800e3a4:	69fb      	ldr	r3, [r7, #28]
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	f000 8158 	beq.w	800e65c <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800e3ac:	4b95      	ldr	r3, [pc, #596]	@ (800e604 <tcp_input+0x724>)
 800e3ae:	2200      	movs	r2, #0
 800e3b0:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	891a      	ldrh	r2, [r3, #8]
 800e3b6:	4b93      	ldr	r3, [pc, #588]	@ (800e604 <tcp_input+0x724>)
 800e3b8:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800e3ba:	4a92      	ldr	r2, [pc, #584]	@ (800e604 <tcp_input+0x724>)
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800e3c0:	4b91      	ldr	r3, [pc, #580]	@ (800e608 <tcp_input+0x728>)
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	4a8f      	ldr	r2, [pc, #572]	@ (800e604 <tcp_input+0x724>)
 800e3c6:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800e3c8:	4b90      	ldr	r3, [pc, #576]	@ (800e60c <tcp_input+0x72c>)
 800e3ca:	2200      	movs	r2, #0
 800e3cc:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800e3ce:	4b90      	ldr	r3, [pc, #576]	@ (800e610 <tcp_input+0x730>)
 800e3d0:	2200      	movs	r2, #0
 800e3d2:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800e3d4:	4b8f      	ldr	r3, [pc, #572]	@ (800e614 <tcp_input+0x734>)
 800e3d6:	2200      	movs	r2, #0
 800e3d8:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800e3da:	4b8f      	ldr	r3, [pc, #572]	@ (800e618 <tcp_input+0x738>)
 800e3dc:	781b      	ldrb	r3, [r3, #0]
 800e3de:	f003 0308 	and.w	r3, r3, #8
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d006      	beq.n	800e3f4 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	7b5b      	ldrb	r3, [r3, #13]
 800e3ea:	f043 0301 	orr.w	r3, r3, #1
 800e3ee:	b2da      	uxtb	r2, r3
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800e3f4:	69fb      	ldr	r3, [r7, #28]
 800e3f6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d017      	beq.n	800e42c <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e3fc:	69f8      	ldr	r0, [r7, #28]
 800e3fe:	f7ff f929 	bl	800d654 <tcp_process_refused_data>
 800e402:	4603      	mov	r3, r0
 800e404:	f113 0f0d 	cmn.w	r3, #13
 800e408:	d007      	beq.n	800e41a <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e40a:	69fb      	ldr	r3, [r7, #28]
 800e40c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d00c      	beq.n	800e42c <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e412:	4b82      	ldr	r3, [pc, #520]	@ (800e61c <tcp_input+0x73c>)
 800e414:	881b      	ldrh	r3, [r3, #0]
 800e416:	2b00      	cmp	r3, #0
 800e418:	d008      	beq.n	800e42c <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800e41a:	69fb      	ldr	r3, [r7, #28]
 800e41c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e41e:	2b00      	cmp	r3, #0
 800e420:	f040 80e3 	bne.w	800e5ea <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800e424:	69f8      	ldr	r0, [r7, #28]
 800e426:	f003 f9a7 	bl	8011778 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800e42a:	e0de      	b.n	800e5ea <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800e42c:	4a7c      	ldr	r2, [pc, #496]	@ (800e620 <tcp_input+0x740>)
 800e42e:	69fb      	ldr	r3, [r7, #28]
 800e430:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800e432:	69f8      	ldr	r0, [r7, #28]
 800e434:	f000 fb18 	bl	800ea68 <tcp_process>
 800e438:	4603      	mov	r3, r0
 800e43a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800e43c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e440:	f113 0f0d 	cmn.w	r3, #13
 800e444:	f000 80d3 	beq.w	800e5ee <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800e448:	4b71      	ldr	r3, [pc, #452]	@ (800e610 <tcp_input+0x730>)
 800e44a:	781b      	ldrb	r3, [r3, #0]
 800e44c:	f003 0308 	and.w	r3, r3, #8
 800e450:	2b00      	cmp	r3, #0
 800e452:	d015      	beq.n	800e480 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800e454:	69fb      	ldr	r3, [r7, #28]
 800e456:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d008      	beq.n	800e470 <tcp_input+0x590>
 800e45e:	69fb      	ldr	r3, [r7, #28]
 800e460:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e464:	69fa      	ldr	r2, [r7, #28]
 800e466:	6912      	ldr	r2, [r2, #16]
 800e468:	f06f 010d 	mvn.w	r1, #13
 800e46c:	4610      	mov	r0, r2
 800e46e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e470:	69f9      	ldr	r1, [r7, #28]
 800e472:	486c      	ldr	r0, [pc, #432]	@ (800e624 <tcp_input+0x744>)
 800e474:	f7ff fbbc 	bl	800dbf0 <tcp_pcb_remove>
        tcp_free(pcb);
 800e478:	69f8      	ldr	r0, [r7, #28]
 800e47a:	f7fe f9a7 	bl	800c7cc <tcp_free>
 800e47e:	e0da      	b.n	800e636 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800e480:	2300      	movs	r3, #0
 800e482:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800e484:	4b63      	ldr	r3, [pc, #396]	@ (800e614 <tcp_input+0x734>)
 800e486:	881b      	ldrh	r3, [r3, #0]
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d01d      	beq.n	800e4c8 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800e48c:	4b61      	ldr	r3, [pc, #388]	@ (800e614 <tcp_input+0x734>)
 800e48e:	881b      	ldrh	r3, [r3, #0]
 800e490:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800e492:	69fb      	ldr	r3, [r7, #28]
 800e494:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d00a      	beq.n	800e4b2 <tcp_input+0x5d2>
 800e49c:	69fb      	ldr	r3, [r7, #28]
 800e49e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e4a2:	69fa      	ldr	r2, [r7, #28]
 800e4a4:	6910      	ldr	r0, [r2, #16]
 800e4a6:	89fa      	ldrh	r2, [r7, #14]
 800e4a8:	69f9      	ldr	r1, [r7, #28]
 800e4aa:	4798      	blx	r3
 800e4ac:	4603      	mov	r3, r0
 800e4ae:	74fb      	strb	r3, [r7, #19]
 800e4b0:	e001      	b.n	800e4b6 <tcp_input+0x5d6>
 800e4b2:	2300      	movs	r3, #0
 800e4b4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e4b6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e4ba:	f113 0f0d 	cmn.w	r3, #13
 800e4be:	f000 8098 	beq.w	800e5f2 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800e4c2:	4b54      	ldr	r3, [pc, #336]	@ (800e614 <tcp_input+0x734>)
 800e4c4:	2200      	movs	r2, #0
 800e4c6:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800e4c8:	69f8      	ldr	r0, [r7, #28]
 800e4ca:	f000 f915 	bl	800e6f8 <tcp_input_delayed_close>
 800e4ce:	4603      	mov	r3, r0
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	f040 8090 	bne.w	800e5f6 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800e4d6:	4b4d      	ldr	r3, [pc, #308]	@ (800e60c <tcp_input+0x72c>)
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d041      	beq.n	800e562 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800e4de:	69fb      	ldr	r3, [r7, #28]
 800e4e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d006      	beq.n	800e4f4 <tcp_input+0x614>
 800e4e6:	4b50      	ldr	r3, [pc, #320]	@ (800e628 <tcp_input+0x748>)
 800e4e8:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800e4ec:	494f      	ldr	r1, [pc, #316]	@ (800e62c <tcp_input+0x74c>)
 800e4ee:	4850      	ldr	r0, [pc, #320]	@ (800e630 <tcp_input+0x750>)
 800e4f0:	f007 fba4 	bl	8015c3c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800e4f4:	69fb      	ldr	r3, [r7, #28]
 800e4f6:	8b5b      	ldrh	r3, [r3, #26]
 800e4f8:	f003 0310 	and.w	r3, r3, #16
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d008      	beq.n	800e512 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800e500:	4b42      	ldr	r3, [pc, #264]	@ (800e60c <tcp_input+0x72c>)
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	4618      	mov	r0, r3
 800e506:	f7fd fd57 	bl	800bfb8 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800e50a:	69f8      	ldr	r0, [r7, #28]
 800e50c:	f7fe fc46 	bl	800cd9c <tcp_abort>
            goto aborted;
 800e510:	e091      	b.n	800e636 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800e512:	69fb      	ldr	r3, [r7, #28]
 800e514:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d00c      	beq.n	800e536 <tcp_input+0x656>
 800e51c:	69fb      	ldr	r3, [r7, #28]
 800e51e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800e522:	69fb      	ldr	r3, [r7, #28]
 800e524:	6918      	ldr	r0, [r3, #16]
 800e526:	4b39      	ldr	r3, [pc, #228]	@ (800e60c <tcp_input+0x72c>)
 800e528:	681a      	ldr	r2, [r3, #0]
 800e52a:	2300      	movs	r3, #0
 800e52c:	69f9      	ldr	r1, [r7, #28]
 800e52e:	47a0      	blx	r4
 800e530:	4603      	mov	r3, r0
 800e532:	74fb      	strb	r3, [r7, #19]
 800e534:	e008      	b.n	800e548 <tcp_input+0x668>
 800e536:	4b35      	ldr	r3, [pc, #212]	@ (800e60c <tcp_input+0x72c>)
 800e538:	681a      	ldr	r2, [r3, #0]
 800e53a:	2300      	movs	r3, #0
 800e53c:	69f9      	ldr	r1, [r7, #28]
 800e53e:	2000      	movs	r0, #0
 800e540:	f7ff f95e 	bl	800d800 <tcp_recv_null>
 800e544:	4603      	mov	r3, r0
 800e546:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800e548:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e54c:	f113 0f0d 	cmn.w	r3, #13
 800e550:	d053      	beq.n	800e5fa <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800e552:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e556:	2b00      	cmp	r3, #0
 800e558:	d003      	beq.n	800e562 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800e55a:	4b2c      	ldr	r3, [pc, #176]	@ (800e60c <tcp_input+0x72c>)
 800e55c:	681a      	ldr	r2, [r3, #0]
 800e55e:	69fb      	ldr	r3, [r7, #28]
 800e560:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800e562:	4b2b      	ldr	r3, [pc, #172]	@ (800e610 <tcp_input+0x730>)
 800e564:	781b      	ldrb	r3, [r3, #0]
 800e566:	f003 0320 	and.w	r3, r3, #32
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d030      	beq.n	800e5d0 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800e56e:	69fb      	ldr	r3, [r7, #28]
 800e570:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e572:	2b00      	cmp	r3, #0
 800e574:	d009      	beq.n	800e58a <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800e576:	69fb      	ldr	r3, [r7, #28]
 800e578:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e57a:	7b5a      	ldrb	r2, [r3, #13]
 800e57c:	69fb      	ldr	r3, [r7, #28]
 800e57e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e580:	f042 0220 	orr.w	r2, r2, #32
 800e584:	b2d2      	uxtb	r2, r2
 800e586:	735a      	strb	r2, [r3, #13]
 800e588:	e022      	b.n	800e5d0 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e58a:	69fb      	ldr	r3, [r7, #28]
 800e58c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e58e:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800e592:	d005      	beq.n	800e5a0 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800e594:	69fb      	ldr	r3, [r7, #28]
 800e596:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e598:	3301      	adds	r3, #1
 800e59a:	b29a      	uxth	r2, r3
 800e59c:	69fb      	ldr	r3, [r7, #28]
 800e59e:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800e5a0:	69fb      	ldr	r3, [r7, #28]
 800e5a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d00b      	beq.n	800e5c2 <tcp_input+0x6e2>
 800e5aa:	69fb      	ldr	r3, [r7, #28]
 800e5ac:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800e5b0:	69fb      	ldr	r3, [r7, #28]
 800e5b2:	6918      	ldr	r0, [r3, #16]
 800e5b4:	2300      	movs	r3, #0
 800e5b6:	2200      	movs	r2, #0
 800e5b8:	69f9      	ldr	r1, [r7, #28]
 800e5ba:	47a0      	blx	r4
 800e5bc:	4603      	mov	r3, r0
 800e5be:	74fb      	strb	r3, [r7, #19]
 800e5c0:	e001      	b.n	800e5c6 <tcp_input+0x6e6>
 800e5c2:	2300      	movs	r3, #0
 800e5c4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e5c6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e5ca:	f113 0f0d 	cmn.w	r3, #13
 800e5ce:	d016      	beq.n	800e5fe <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800e5d0:	4b13      	ldr	r3, [pc, #76]	@ (800e620 <tcp_input+0x740>)
 800e5d2:	2200      	movs	r2, #0
 800e5d4:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800e5d6:	69f8      	ldr	r0, [r7, #28]
 800e5d8:	f000 f88e 	bl	800e6f8 <tcp_input_delayed_close>
 800e5dc:	4603      	mov	r3, r0
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d128      	bne.n	800e634 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800e5e2:	69f8      	ldr	r0, [r7, #28]
 800e5e4:	f002 fac2 	bl	8010b6c <tcp_output>
 800e5e8:	e025      	b.n	800e636 <tcp_input+0x756>
        goto aborted;
 800e5ea:	bf00      	nop
 800e5ec:	e023      	b.n	800e636 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800e5ee:	bf00      	nop
 800e5f0:	e021      	b.n	800e636 <tcp_input+0x756>
              goto aborted;
 800e5f2:	bf00      	nop
 800e5f4:	e01f      	b.n	800e636 <tcp_input+0x756>
          goto aborted;
 800e5f6:	bf00      	nop
 800e5f8:	e01d      	b.n	800e636 <tcp_input+0x756>
            goto aborted;
 800e5fa:	bf00      	nop
 800e5fc:	e01b      	b.n	800e636 <tcp_input+0x756>
              goto aborted;
 800e5fe:	bf00      	nop
 800e600:	e019      	b.n	800e636 <tcp_input+0x756>
 800e602:	bf00      	nop
 800e604:	2000925c 	.word	0x2000925c
 800e608:	2000926c 	.word	0x2000926c
 800e60c:	2000928c 	.word	0x2000928c
 800e610:	20009289 	.word	0x20009289
 800e614:	20009284 	.word	0x20009284
 800e618:	20009288 	.word	0x20009288
 800e61c:	20009286 	.word	0x20009286
 800e620:	20009290 	.word	0x20009290
 800e624:	20009250 	.word	0x20009250
 800e628:	0801f410 	.word	0x0801f410
 800e62c:	0801f5c4 	.word	0x0801f5c4
 800e630:	0801f45c 	.word	0x0801f45c
          goto aborted;
 800e634:	bf00      	nop
    tcp_input_pcb = NULL;
 800e636:	4b27      	ldr	r3, [pc, #156]	@ (800e6d4 <tcp_input+0x7f4>)
 800e638:	2200      	movs	r2, #0
 800e63a:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800e63c:	4b26      	ldr	r3, [pc, #152]	@ (800e6d8 <tcp_input+0x7f8>)
 800e63e:	2200      	movs	r2, #0
 800e640:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800e642:	4b26      	ldr	r3, [pc, #152]	@ (800e6dc <tcp_input+0x7fc>)
 800e644:	685b      	ldr	r3, [r3, #4]
 800e646:	2b00      	cmp	r3, #0
 800e648:	d03f      	beq.n	800e6ca <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800e64a:	4b24      	ldr	r3, [pc, #144]	@ (800e6dc <tcp_input+0x7fc>)
 800e64c:	685b      	ldr	r3, [r3, #4]
 800e64e:	4618      	mov	r0, r3
 800e650:	f7fd fcb2 	bl	800bfb8 <pbuf_free>
      inseg.p = NULL;
 800e654:	4b21      	ldr	r3, [pc, #132]	@ (800e6dc <tcp_input+0x7fc>)
 800e656:	2200      	movs	r2, #0
 800e658:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800e65a:	e036      	b.n	800e6ca <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800e65c:	4b20      	ldr	r3, [pc, #128]	@ (800e6e0 <tcp_input+0x800>)
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	899b      	ldrh	r3, [r3, #12]
 800e662:	b29b      	uxth	r3, r3
 800e664:	4618      	mov	r0, r3
 800e666:	f7fb fe7f 	bl	800a368 <lwip_htons>
 800e66a:	4603      	mov	r3, r0
 800e66c:	b2db      	uxtb	r3, r3
 800e66e:	f003 0304 	and.w	r3, r3, #4
 800e672:	2b00      	cmp	r3, #0
 800e674:	d118      	bne.n	800e6a8 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e676:	4b1b      	ldr	r3, [pc, #108]	@ (800e6e4 <tcp_input+0x804>)
 800e678:	6819      	ldr	r1, [r3, #0]
 800e67a:	4b1b      	ldr	r3, [pc, #108]	@ (800e6e8 <tcp_input+0x808>)
 800e67c:	881b      	ldrh	r3, [r3, #0]
 800e67e:	461a      	mov	r2, r3
 800e680:	4b1a      	ldr	r3, [pc, #104]	@ (800e6ec <tcp_input+0x80c>)
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e686:	4b16      	ldr	r3, [pc, #88]	@ (800e6e0 <tcp_input+0x800>)
 800e688:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e68a:	885b      	ldrh	r3, [r3, #2]
 800e68c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e68e:	4a14      	ldr	r2, [pc, #80]	@ (800e6e0 <tcp_input+0x800>)
 800e690:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e692:	8812      	ldrh	r2, [r2, #0]
 800e694:	b292      	uxth	r2, r2
 800e696:	9202      	str	r2, [sp, #8]
 800e698:	9301      	str	r3, [sp, #4]
 800e69a:	4b15      	ldr	r3, [pc, #84]	@ (800e6f0 <tcp_input+0x810>)
 800e69c:	9300      	str	r3, [sp, #0]
 800e69e:	4b15      	ldr	r3, [pc, #84]	@ (800e6f4 <tcp_input+0x814>)
 800e6a0:	4602      	mov	r2, r0
 800e6a2:	2000      	movs	r0, #0
 800e6a4:	f003 f816 	bl	80116d4 <tcp_rst>
    pbuf_free(p);
 800e6a8:	6878      	ldr	r0, [r7, #4]
 800e6aa:	f7fd fc85 	bl	800bfb8 <pbuf_free>
  return;
 800e6ae:	e00c      	b.n	800e6ca <tcp_input+0x7ea>
    goto dropped;
 800e6b0:	bf00      	nop
 800e6b2:	e006      	b.n	800e6c2 <tcp_input+0x7e2>
    goto dropped;
 800e6b4:	bf00      	nop
 800e6b6:	e004      	b.n	800e6c2 <tcp_input+0x7e2>
    goto dropped;
 800e6b8:	bf00      	nop
 800e6ba:	e002      	b.n	800e6c2 <tcp_input+0x7e2>
      goto dropped;
 800e6bc:	bf00      	nop
 800e6be:	e000      	b.n	800e6c2 <tcp_input+0x7e2>
      goto dropped;
 800e6c0:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800e6c2:	6878      	ldr	r0, [r7, #4]
 800e6c4:	f7fd fc78 	bl	800bfb8 <pbuf_free>
 800e6c8:	e000      	b.n	800e6cc <tcp_input+0x7ec>
  return;
 800e6ca:	bf00      	nop
}
 800e6cc:	3724      	adds	r7, #36	@ 0x24
 800e6ce:	46bd      	mov	sp, r7
 800e6d0:	bd90      	pop	{r4, r7, pc}
 800e6d2:	bf00      	nop
 800e6d4:	20009290 	.word	0x20009290
 800e6d8:	2000928c 	.word	0x2000928c
 800e6dc:	2000925c 	.word	0x2000925c
 800e6e0:	2000926c 	.word	0x2000926c
 800e6e4:	20009280 	.word	0x20009280
 800e6e8:	20009286 	.word	0x20009286
 800e6ec:	2000927c 	.word	0x2000927c
 800e6f0:	20005f14 	.word	0x20005f14
 800e6f4:	20005f18 	.word	0x20005f18

0800e6f8 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800e6f8:	b580      	push	{r7, lr}
 800e6fa:	b082      	sub	sp, #8
 800e6fc:	af00      	add	r7, sp, #0
 800e6fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	2b00      	cmp	r3, #0
 800e704:	d106      	bne.n	800e714 <tcp_input_delayed_close+0x1c>
 800e706:	4b17      	ldr	r3, [pc, #92]	@ (800e764 <tcp_input_delayed_close+0x6c>)
 800e708:	f240 225a 	movw	r2, #602	@ 0x25a
 800e70c:	4916      	ldr	r1, [pc, #88]	@ (800e768 <tcp_input_delayed_close+0x70>)
 800e70e:	4817      	ldr	r0, [pc, #92]	@ (800e76c <tcp_input_delayed_close+0x74>)
 800e710:	f007 fa94 	bl	8015c3c <iprintf>

  if (recv_flags & TF_CLOSED) {
 800e714:	4b16      	ldr	r3, [pc, #88]	@ (800e770 <tcp_input_delayed_close+0x78>)
 800e716:	781b      	ldrb	r3, [r3, #0]
 800e718:	f003 0310 	and.w	r3, r3, #16
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d01c      	beq.n	800e75a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	8b5b      	ldrh	r3, [r3, #26]
 800e724:	f003 0310 	and.w	r3, r3, #16
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d10d      	bne.n	800e748 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e732:	2b00      	cmp	r3, #0
 800e734:	d008      	beq.n	800e748 <tcp_input_delayed_close+0x50>
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e73c:	687a      	ldr	r2, [r7, #4]
 800e73e:	6912      	ldr	r2, [r2, #16]
 800e740:	f06f 010e 	mvn.w	r1, #14
 800e744:	4610      	mov	r0, r2
 800e746:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e748:	6879      	ldr	r1, [r7, #4]
 800e74a:	480a      	ldr	r0, [pc, #40]	@ (800e774 <tcp_input_delayed_close+0x7c>)
 800e74c:	f7ff fa50 	bl	800dbf0 <tcp_pcb_remove>
    tcp_free(pcb);
 800e750:	6878      	ldr	r0, [r7, #4]
 800e752:	f7fe f83b 	bl	800c7cc <tcp_free>
    return 1;
 800e756:	2301      	movs	r3, #1
 800e758:	e000      	b.n	800e75c <tcp_input_delayed_close+0x64>
  }
  return 0;
 800e75a:	2300      	movs	r3, #0
}
 800e75c:	4618      	mov	r0, r3
 800e75e:	3708      	adds	r7, #8
 800e760:	46bd      	mov	sp, r7
 800e762:	bd80      	pop	{r7, pc}
 800e764:	0801f410 	.word	0x0801f410
 800e768:	0801f5e0 	.word	0x0801f5e0
 800e76c:	0801f45c 	.word	0x0801f45c
 800e770:	20009289 	.word	0x20009289
 800e774:	20009250 	.word	0x20009250

0800e778 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800e778:	b590      	push	{r4, r7, lr}
 800e77a:	b08b      	sub	sp, #44	@ 0x2c
 800e77c:	af04      	add	r7, sp, #16
 800e77e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800e780:	4b6f      	ldr	r3, [pc, #444]	@ (800e940 <tcp_listen_input+0x1c8>)
 800e782:	781b      	ldrb	r3, [r3, #0]
 800e784:	f003 0304 	and.w	r3, r3, #4
 800e788:	2b00      	cmp	r3, #0
 800e78a:	f040 80d2 	bne.w	800e932 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	2b00      	cmp	r3, #0
 800e792:	d106      	bne.n	800e7a2 <tcp_listen_input+0x2a>
 800e794:	4b6b      	ldr	r3, [pc, #428]	@ (800e944 <tcp_listen_input+0x1cc>)
 800e796:	f240 2281 	movw	r2, #641	@ 0x281
 800e79a:	496b      	ldr	r1, [pc, #428]	@ (800e948 <tcp_listen_input+0x1d0>)
 800e79c:	486b      	ldr	r0, [pc, #428]	@ (800e94c <tcp_listen_input+0x1d4>)
 800e79e:	f007 fa4d 	bl	8015c3c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800e7a2:	4b67      	ldr	r3, [pc, #412]	@ (800e940 <tcp_listen_input+0x1c8>)
 800e7a4:	781b      	ldrb	r3, [r3, #0]
 800e7a6:	f003 0310 	and.w	r3, r3, #16
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d019      	beq.n	800e7e2 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e7ae:	4b68      	ldr	r3, [pc, #416]	@ (800e950 <tcp_listen_input+0x1d8>)
 800e7b0:	6819      	ldr	r1, [r3, #0]
 800e7b2:	4b68      	ldr	r3, [pc, #416]	@ (800e954 <tcp_listen_input+0x1dc>)
 800e7b4:	881b      	ldrh	r3, [r3, #0]
 800e7b6:	461a      	mov	r2, r3
 800e7b8:	4b67      	ldr	r3, [pc, #412]	@ (800e958 <tcp_listen_input+0x1e0>)
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e7be:	4b67      	ldr	r3, [pc, #412]	@ (800e95c <tcp_listen_input+0x1e4>)
 800e7c0:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e7c2:	885b      	ldrh	r3, [r3, #2]
 800e7c4:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e7c6:	4a65      	ldr	r2, [pc, #404]	@ (800e95c <tcp_listen_input+0x1e4>)
 800e7c8:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e7ca:	8812      	ldrh	r2, [r2, #0]
 800e7cc:	b292      	uxth	r2, r2
 800e7ce:	9202      	str	r2, [sp, #8]
 800e7d0:	9301      	str	r3, [sp, #4]
 800e7d2:	4b63      	ldr	r3, [pc, #396]	@ (800e960 <tcp_listen_input+0x1e8>)
 800e7d4:	9300      	str	r3, [sp, #0]
 800e7d6:	4b63      	ldr	r3, [pc, #396]	@ (800e964 <tcp_listen_input+0x1ec>)
 800e7d8:	4602      	mov	r2, r0
 800e7da:	6878      	ldr	r0, [r7, #4]
 800e7dc:	f002 ff7a 	bl	80116d4 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800e7e0:	e0a9      	b.n	800e936 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800e7e2:	4b57      	ldr	r3, [pc, #348]	@ (800e940 <tcp_listen_input+0x1c8>)
 800e7e4:	781b      	ldrb	r3, [r3, #0]
 800e7e6:	f003 0302 	and.w	r3, r3, #2
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	f000 80a3 	beq.w	800e936 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	7d5b      	ldrb	r3, [r3, #21]
 800e7f4:	4618      	mov	r0, r3
 800e7f6:	f7ff f927 	bl	800da48 <tcp_alloc>
 800e7fa:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800e7fc:	697b      	ldr	r3, [r7, #20]
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d111      	bne.n	800e826 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	699b      	ldr	r3, [r3, #24]
 800e806:	2b00      	cmp	r3, #0
 800e808:	d00a      	beq.n	800e820 <tcp_listen_input+0xa8>
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	699b      	ldr	r3, [r3, #24]
 800e80e:	687a      	ldr	r2, [r7, #4]
 800e810:	6910      	ldr	r0, [r2, #16]
 800e812:	f04f 32ff 	mov.w	r2, #4294967295
 800e816:	2100      	movs	r1, #0
 800e818:	4798      	blx	r3
 800e81a:	4603      	mov	r3, r0
 800e81c:	73bb      	strb	r3, [r7, #14]
      return;
 800e81e:	e08b      	b.n	800e938 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e820:	23f0      	movs	r3, #240	@ 0xf0
 800e822:	73bb      	strb	r3, [r7, #14]
      return;
 800e824:	e088      	b.n	800e938 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800e826:	4b50      	ldr	r3, [pc, #320]	@ (800e968 <tcp_listen_input+0x1f0>)
 800e828:	695a      	ldr	r2, [r3, #20]
 800e82a:	697b      	ldr	r3, [r7, #20]
 800e82c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800e82e:	4b4e      	ldr	r3, [pc, #312]	@ (800e968 <tcp_listen_input+0x1f0>)
 800e830:	691a      	ldr	r2, [r3, #16]
 800e832:	697b      	ldr	r3, [r7, #20]
 800e834:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	8ada      	ldrh	r2, [r3, #22]
 800e83a:	697b      	ldr	r3, [r7, #20]
 800e83c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800e83e:	4b47      	ldr	r3, [pc, #284]	@ (800e95c <tcp_listen_input+0x1e4>)
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	881b      	ldrh	r3, [r3, #0]
 800e844:	b29a      	uxth	r2, r3
 800e846:	697b      	ldr	r3, [r7, #20]
 800e848:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800e84a:	697b      	ldr	r3, [r7, #20]
 800e84c:	2203      	movs	r2, #3
 800e84e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800e850:	4b41      	ldr	r3, [pc, #260]	@ (800e958 <tcp_listen_input+0x1e0>)
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	1c5a      	adds	r2, r3, #1
 800e856:	697b      	ldr	r3, [r7, #20]
 800e858:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800e85a:	697b      	ldr	r3, [r7, #20]
 800e85c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e85e:	697b      	ldr	r3, [r7, #20]
 800e860:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 800e862:	6978      	ldr	r0, [r7, #20]
 800e864:	f7ff fa58 	bl	800dd18 <tcp_next_iss>
 800e868:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800e86a:	697b      	ldr	r3, [r7, #20]
 800e86c:	693a      	ldr	r2, [r7, #16]
 800e86e:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 800e870:	697b      	ldr	r3, [r7, #20]
 800e872:	693a      	ldr	r2, [r7, #16]
 800e874:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 800e876:	697b      	ldr	r3, [r7, #20]
 800e878:	693a      	ldr	r2, [r7, #16]
 800e87a:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 800e87c:	697b      	ldr	r3, [r7, #20]
 800e87e:	693a      	ldr	r2, [r7, #16]
 800e880:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800e882:	4b35      	ldr	r3, [pc, #212]	@ (800e958 <tcp_listen_input+0x1e0>)
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	1e5a      	subs	r2, r3, #1
 800e888:	697b      	ldr	r3, [r7, #20]
 800e88a:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	691a      	ldr	r2, [r3, #16]
 800e890:	697b      	ldr	r3, [r7, #20]
 800e892:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800e894:	697b      	ldr	r3, [r7, #20]
 800e896:	687a      	ldr	r2, [r7, #4]
 800e898:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	7a5b      	ldrb	r3, [r3, #9]
 800e89e:	f003 030c 	and.w	r3, r3, #12
 800e8a2:	b2da      	uxtb	r2, r3
 800e8a4:	697b      	ldr	r3, [r7, #20]
 800e8a6:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	7a1a      	ldrb	r2, [r3, #8]
 800e8ac:	697b      	ldr	r3, [r7, #20]
 800e8ae:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800e8b0:	4b2e      	ldr	r3, [pc, #184]	@ (800e96c <tcp_listen_input+0x1f4>)
 800e8b2:	681a      	ldr	r2, [r3, #0]
 800e8b4:	697b      	ldr	r3, [r7, #20]
 800e8b6:	60da      	str	r2, [r3, #12]
 800e8b8:	4a2c      	ldr	r2, [pc, #176]	@ (800e96c <tcp_listen_input+0x1f4>)
 800e8ba:	697b      	ldr	r3, [r7, #20]
 800e8bc:	6013      	str	r3, [r2, #0]
 800e8be:	f003 f8cb 	bl	8011a58 <tcp_timer_needed>
 800e8c2:	4b2b      	ldr	r3, [pc, #172]	@ (800e970 <tcp_listen_input+0x1f8>)
 800e8c4:	2201      	movs	r2, #1
 800e8c6:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800e8c8:	6978      	ldr	r0, [r7, #20]
 800e8ca:	f001 fd8b 	bl	80103e4 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800e8ce:	4b23      	ldr	r3, [pc, #140]	@ (800e95c <tcp_listen_input+0x1e4>)
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	89db      	ldrh	r3, [r3, #14]
 800e8d4:	b29a      	uxth	r2, r3
 800e8d6:	697b      	ldr	r3, [r7, #20]
 800e8d8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800e8dc:	697b      	ldr	r3, [r7, #20]
 800e8de:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800e8e2:	697b      	ldr	r3, [r7, #20]
 800e8e4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800e8e8:	697b      	ldr	r3, [r7, #20]
 800e8ea:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800e8ec:	697b      	ldr	r3, [r7, #20]
 800e8ee:	3304      	adds	r3, #4
 800e8f0:	4618      	mov	r0, r3
 800e8f2:	f005 f821 	bl	8013938 <ip4_route>
 800e8f6:	4601      	mov	r1, r0
 800e8f8:	697b      	ldr	r3, [r7, #20]
 800e8fa:	3304      	adds	r3, #4
 800e8fc:	461a      	mov	r2, r3
 800e8fe:	4620      	mov	r0, r4
 800e900:	f7ff fa30 	bl	800dd64 <tcp_eff_send_mss_netif>
 800e904:	4603      	mov	r3, r0
 800e906:	461a      	mov	r2, r3
 800e908:	697b      	ldr	r3, [r7, #20]
 800e90a:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800e90c:	2112      	movs	r1, #18
 800e90e:	6978      	ldr	r0, [r7, #20]
 800e910:	f002 f83e 	bl	8010990 <tcp_enqueue_flags>
 800e914:	4603      	mov	r3, r0
 800e916:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800e918:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d004      	beq.n	800e92a <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800e920:	2100      	movs	r1, #0
 800e922:	6978      	ldr	r0, [r7, #20]
 800e924:	f7fe f97c 	bl	800cc20 <tcp_abandon>
      return;
 800e928:	e006      	b.n	800e938 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800e92a:	6978      	ldr	r0, [r7, #20]
 800e92c:	f002 f91e 	bl	8010b6c <tcp_output>
  return;
 800e930:	e001      	b.n	800e936 <tcp_listen_input+0x1be>
    return;
 800e932:	bf00      	nop
 800e934:	e000      	b.n	800e938 <tcp_listen_input+0x1c0>
  return;
 800e936:	bf00      	nop
}
 800e938:	371c      	adds	r7, #28
 800e93a:	46bd      	mov	sp, r7
 800e93c:	bd90      	pop	{r4, r7, pc}
 800e93e:	bf00      	nop
 800e940:	20009288 	.word	0x20009288
 800e944:	0801f410 	.word	0x0801f410
 800e948:	0801f608 	.word	0x0801f608
 800e94c:	0801f45c 	.word	0x0801f45c
 800e950:	20009280 	.word	0x20009280
 800e954:	20009286 	.word	0x20009286
 800e958:	2000927c 	.word	0x2000927c
 800e95c:	2000926c 	.word	0x2000926c
 800e960:	20005f14 	.word	0x20005f14
 800e964:	20005f18 	.word	0x20005f18
 800e968:	20005f04 	.word	0x20005f04
 800e96c:	20009250 	.word	0x20009250
 800e970:	20009258 	.word	0x20009258

0800e974 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800e974:	b580      	push	{r7, lr}
 800e976:	b086      	sub	sp, #24
 800e978:	af04      	add	r7, sp, #16
 800e97a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800e97c:	4b2f      	ldr	r3, [pc, #188]	@ (800ea3c <tcp_timewait_input+0xc8>)
 800e97e:	781b      	ldrb	r3, [r3, #0]
 800e980:	f003 0304 	and.w	r3, r3, #4
 800e984:	2b00      	cmp	r3, #0
 800e986:	d153      	bne.n	800ea30 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d106      	bne.n	800e99c <tcp_timewait_input+0x28>
 800e98e:	4b2c      	ldr	r3, [pc, #176]	@ (800ea40 <tcp_timewait_input+0xcc>)
 800e990:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800e994:	492b      	ldr	r1, [pc, #172]	@ (800ea44 <tcp_timewait_input+0xd0>)
 800e996:	482c      	ldr	r0, [pc, #176]	@ (800ea48 <tcp_timewait_input+0xd4>)
 800e998:	f007 f950 	bl	8015c3c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800e99c:	4b27      	ldr	r3, [pc, #156]	@ (800ea3c <tcp_timewait_input+0xc8>)
 800e99e:	781b      	ldrb	r3, [r3, #0]
 800e9a0:	f003 0302 	and.w	r3, r3, #2
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d02a      	beq.n	800e9fe <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800e9a8:	4b28      	ldr	r3, [pc, #160]	@ (800ea4c <tcp_timewait_input+0xd8>)
 800e9aa:	681a      	ldr	r2, [r3, #0]
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e9b0:	1ad3      	subs	r3, r2, r3
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	db2d      	blt.n	800ea12 <tcp_timewait_input+0x9e>
 800e9b6:	4b25      	ldr	r3, [pc, #148]	@ (800ea4c <tcp_timewait_input+0xd8>)
 800e9b8:	681a      	ldr	r2, [r3, #0]
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e9be:	6879      	ldr	r1, [r7, #4]
 800e9c0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800e9c2:	440b      	add	r3, r1
 800e9c4:	1ad3      	subs	r3, r2, r3
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	dc23      	bgt.n	800ea12 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e9ca:	4b21      	ldr	r3, [pc, #132]	@ (800ea50 <tcp_timewait_input+0xdc>)
 800e9cc:	6819      	ldr	r1, [r3, #0]
 800e9ce:	4b21      	ldr	r3, [pc, #132]	@ (800ea54 <tcp_timewait_input+0xe0>)
 800e9d0:	881b      	ldrh	r3, [r3, #0]
 800e9d2:	461a      	mov	r2, r3
 800e9d4:	4b1d      	ldr	r3, [pc, #116]	@ (800ea4c <tcp_timewait_input+0xd8>)
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e9da:	4b1f      	ldr	r3, [pc, #124]	@ (800ea58 <tcp_timewait_input+0xe4>)
 800e9dc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e9de:	885b      	ldrh	r3, [r3, #2]
 800e9e0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e9e2:	4a1d      	ldr	r2, [pc, #116]	@ (800ea58 <tcp_timewait_input+0xe4>)
 800e9e4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e9e6:	8812      	ldrh	r2, [r2, #0]
 800e9e8:	b292      	uxth	r2, r2
 800e9ea:	9202      	str	r2, [sp, #8]
 800e9ec:	9301      	str	r3, [sp, #4]
 800e9ee:	4b1b      	ldr	r3, [pc, #108]	@ (800ea5c <tcp_timewait_input+0xe8>)
 800e9f0:	9300      	str	r3, [sp, #0]
 800e9f2:	4b1b      	ldr	r3, [pc, #108]	@ (800ea60 <tcp_timewait_input+0xec>)
 800e9f4:	4602      	mov	r2, r0
 800e9f6:	6878      	ldr	r0, [r7, #4]
 800e9f8:	f002 fe6c 	bl	80116d4 <tcp_rst>
      return;
 800e9fc:	e01b      	b.n	800ea36 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800e9fe:	4b0f      	ldr	r3, [pc, #60]	@ (800ea3c <tcp_timewait_input+0xc8>)
 800ea00:	781b      	ldrb	r3, [r3, #0]
 800ea02:	f003 0301 	and.w	r3, r3, #1
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d003      	beq.n	800ea12 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800ea0a:	4b16      	ldr	r3, [pc, #88]	@ (800ea64 <tcp_timewait_input+0xf0>)
 800ea0c:	681a      	ldr	r2, [r3, #0]
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800ea12:	4b10      	ldr	r3, [pc, #64]	@ (800ea54 <tcp_timewait_input+0xe0>)
 800ea14:	881b      	ldrh	r3, [r3, #0]
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d00c      	beq.n	800ea34 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	8b5b      	ldrh	r3, [r3, #26]
 800ea1e:	f043 0302 	orr.w	r3, r3, #2
 800ea22:	b29a      	uxth	r2, r3
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ea28:	6878      	ldr	r0, [r7, #4]
 800ea2a:	f002 f89f 	bl	8010b6c <tcp_output>
  }
  return;
 800ea2e:	e001      	b.n	800ea34 <tcp_timewait_input+0xc0>
    return;
 800ea30:	bf00      	nop
 800ea32:	e000      	b.n	800ea36 <tcp_timewait_input+0xc2>
  return;
 800ea34:	bf00      	nop
}
 800ea36:	3708      	adds	r7, #8
 800ea38:	46bd      	mov	sp, r7
 800ea3a:	bd80      	pop	{r7, pc}
 800ea3c:	20009288 	.word	0x20009288
 800ea40:	0801f410 	.word	0x0801f410
 800ea44:	0801f628 	.word	0x0801f628
 800ea48:	0801f45c 	.word	0x0801f45c
 800ea4c:	2000927c 	.word	0x2000927c
 800ea50:	20009280 	.word	0x20009280
 800ea54:	20009286 	.word	0x20009286
 800ea58:	2000926c 	.word	0x2000926c
 800ea5c:	20005f14 	.word	0x20005f14
 800ea60:	20005f18 	.word	0x20005f18
 800ea64:	20009244 	.word	0x20009244

0800ea68 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800ea68:	b590      	push	{r4, r7, lr}
 800ea6a:	b08d      	sub	sp, #52	@ 0x34
 800ea6c:	af04      	add	r7, sp, #16
 800ea6e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800ea70:	2300      	movs	r3, #0
 800ea72:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800ea74:	2300      	movs	r3, #0
 800ea76:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d106      	bne.n	800ea8c <tcp_process+0x24>
 800ea7e:	4b9d      	ldr	r3, [pc, #628]	@ (800ecf4 <tcp_process+0x28c>)
 800ea80:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800ea84:	499c      	ldr	r1, [pc, #624]	@ (800ecf8 <tcp_process+0x290>)
 800ea86:	489d      	ldr	r0, [pc, #628]	@ (800ecfc <tcp_process+0x294>)
 800ea88:	f007 f8d8 	bl	8015c3c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800ea8c:	4b9c      	ldr	r3, [pc, #624]	@ (800ed00 <tcp_process+0x298>)
 800ea8e:	781b      	ldrb	r3, [r3, #0]
 800ea90:	f003 0304 	and.w	r3, r3, #4
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d04e      	beq.n	800eb36 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	7d1b      	ldrb	r3, [r3, #20]
 800ea9c:	2b02      	cmp	r3, #2
 800ea9e:	d108      	bne.n	800eab2 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800eaa4:	4b97      	ldr	r3, [pc, #604]	@ (800ed04 <tcp_process+0x29c>)
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	429a      	cmp	r2, r3
 800eaaa:	d123      	bne.n	800eaf4 <tcp_process+0x8c>
        acceptable = 1;
 800eaac:	2301      	movs	r3, #1
 800eaae:	76fb      	strb	r3, [r7, #27]
 800eab0:	e020      	b.n	800eaf4 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800eab6:	4b94      	ldr	r3, [pc, #592]	@ (800ed08 <tcp_process+0x2a0>)
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	429a      	cmp	r2, r3
 800eabc:	d102      	bne.n	800eac4 <tcp_process+0x5c>
        acceptable = 1;
 800eabe:	2301      	movs	r3, #1
 800eac0:	76fb      	strb	r3, [r7, #27]
 800eac2:	e017      	b.n	800eaf4 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800eac4:	4b90      	ldr	r3, [pc, #576]	@ (800ed08 <tcp_process+0x2a0>)
 800eac6:	681a      	ldr	r2, [r3, #0]
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eacc:	1ad3      	subs	r3, r2, r3
 800eace:	2b00      	cmp	r3, #0
 800ead0:	db10      	blt.n	800eaf4 <tcp_process+0x8c>
 800ead2:	4b8d      	ldr	r3, [pc, #564]	@ (800ed08 <tcp_process+0x2a0>)
 800ead4:	681a      	ldr	r2, [r3, #0]
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eada:	6879      	ldr	r1, [r7, #4]
 800eadc:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800eade:	440b      	add	r3, r1
 800eae0:	1ad3      	subs	r3, r2, r3
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	dc06      	bgt.n	800eaf4 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	8b5b      	ldrh	r3, [r3, #26]
 800eaea:	f043 0302 	orr.w	r3, r3, #2
 800eaee:	b29a      	uxth	r2, r3
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800eaf4:	7efb      	ldrb	r3, [r7, #27]
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d01b      	beq.n	800eb32 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	7d1b      	ldrb	r3, [r3, #20]
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d106      	bne.n	800eb10 <tcp_process+0xa8>
 800eb02:	4b7c      	ldr	r3, [pc, #496]	@ (800ecf4 <tcp_process+0x28c>)
 800eb04:	f44f 724e 	mov.w	r2, #824	@ 0x338
 800eb08:	4980      	ldr	r1, [pc, #512]	@ (800ed0c <tcp_process+0x2a4>)
 800eb0a:	487c      	ldr	r0, [pc, #496]	@ (800ecfc <tcp_process+0x294>)
 800eb0c:	f007 f896 	bl	8015c3c <iprintf>
      recv_flags |= TF_RESET;
 800eb10:	4b7f      	ldr	r3, [pc, #508]	@ (800ed10 <tcp_process+0x2a8>)
 800eb12:	781b      	ldrb	r3, [r3, #0]
 800eb14:	f043 0308 	orr.w	r3, r3, #8
 800eb18:	b2da      	uxtb	r2, r3
 800eb1a:	4b7d      	ldr	r3, [pc, #500]	@ (800ed10 <tcp_process+0x2a8>)
 800eb1c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	8b5b      	ldrh	r3, [r3, #26]
 800eb22:	f023 0301 	bic.w	r3, r3, #1
 800eb26:	b29a      	uxth	r2, r3
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800eb2c:	f06f 030d 	mvn.w	r3, #13
 800eb30:	e37a      	b.n	800f228 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800eb32:	2300      	movs	r3, #0
 800eb34:	e378      	b.n	800f228 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800eb36:	4b72      	ldr	r3, [pc, #456]	@ (800ed00 <tcp_process+0x298>)
 800eb38:	781b      	ldrb	r3, [r3, #0]
 800eb3a:	f003 0302 	and.w	r3, r3, #2
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d010      	beq.n	800eb64 <tcp_process+0xfc>
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	7d1b      	ldrb	r3, [r3, #20]
 800eb46:	2b02      	cmp	r3, #2
 800eb48:	d00c      	beq.n	800eb64 <tcp_process+0xfc>
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	7d1b      	ldrb	r3, [r3, #20]
 800eb4e:	2b03      	cmp	r3, #3
 800eb50:	d008      	beq.n	800eb64 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	8b5b      	ldrh	r3, [r3, #26]
 800eb56:	f043 0302 	orr.w	r3, r3, #2
 800eb5a:	b29a      	uxth	r2, r3
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800eb60:	2300      	movs	r3, #0
 800eb62:	e361      	b.n	800f228 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	8b5b      	ldrh	r3, [r3, #26]
 800eb68:	f003 0310 	and.w	r3, r3, #16
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d103      	bne.n	800eb78 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800eb70:	4b68      	ldr	r3, [pc, #416]	@ (800ed14 <tcp_process+0x2ac>)
 800eb72:	681a      	ldr	r2, [r3, #0]
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	2200      	movs	r2, #0
 800eb7c:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	2200      	movs	r2, #0
 800eb84:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 800eb88:	6878      	ldr	r0, [r7, #4]
 800eb8a:	f001 fc2b 	bl	80103e4 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	7d1b      	ldrb	r3, [r3, #20]
 800eb92:	3b02      	subs	r3, #2
 800eb94:	2b07      	cmp	r3, #7
 800eb96:	f200 8337 	bhi.w	800f208 <tcp_process+0x7a0>
 800eb9a:	a201      	add	r2, pc, #4	@ (adr r2, 800eba0 <tcp_process+0x138>)
 800eb9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eba0:	0800ebc1 	.word	0x0800ebc1
 800eba4:	0800edf1 	.word	0x0800edf1
 800eba8:	0800ef69 	.word	0x0800ef69
 800ebac:	0800ef93 	.word	0x0800ef93
 800ebb0:	0800f0b7 	.word	0x0800f0b7
 800ebb4:	0800ef69 	.word	0x0800ef69
 800ebb8:	0800f143 	.word	0x0800f143
 800ebbc:	0800f1d3 	.word	0x0800f1d3
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800ebc0:	4b4f      	ldr	r3, [pc, #316]	@ (800ed00 <tcp_process+0x298>)
 800ebc2:	781b      	ldrb	r3, [r3, #0]
 800ebc4:	f003 0310 	and.w	r3, r3, #16
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	f000 80e4 	beq.w	800ed96 <tcp_process+0x32e>
 800ebce:	4b4c      	ldr	r3, [pc, #304]	@ (800ed00 <tcp_process+0x298>)
 800ebd0:	781b      	ldrb	r3, [r3, #0]
 800ebd2:	f003 0302 	and.w	r3, r3, #2
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	f000 80dd 	beq.w	800ed96 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ebe0:	1c5a      	adds	r2, r3, #1
 800ebe2:	4b48      	ldr	r3, [pc, #288]	@ (800ed04 <tcp_process+0x29c>)
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	429a      	cmp	r2, r3
 800ebe8:	f040 80d5 	bne.w	800ed96 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800ebec:	4b46      	ldr	r3, [pc, #280]	@ (800ed08 <tcp_process+0x2a0>)
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	1c5a      	adds	r2, r3, #1
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 800ebfe:	4b41      	ldr	r3, [pc, #260]	@ (800ed04 <tcp_process+0x29c>)
 800ec00:	681a      	ldr	r2, [r3, #0]
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800ec06:	4b44      	ldr	r3, [pc, #272]	@ (800ed18 <tcp_process+0x2b0>)
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	89db      	ldrh	r3, [r3, #14]
 800ec0c:	b29a      	uxth	r2, r3
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800ec20:	4b39      	ldr	r3, [pc, #228]	@ (800ed08 <tcp_process+0x2a0>)
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	1e5a      	subs	r2, r3, #1
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	2204      	movs	r2, #4
 800ec2e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	3304      	adds	r3, #4
 800ec38:	4618      	mov	r0, r3
 800ec3a:	f004 fe7d 	bl	8013938 <ip4_route>
 800ec3e:	4601      	mov	r1, r0
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	3304      	adds	r3, #4
 800ec44:	461a      	mov	r2, r3
 800ec46:	4620      	mov	r0, r4
 800ec48:	f7ff f88c 	bl	800dd64 <tcp_eff_send_mss_netif>
 800ec4c:	4603      	mov	r3, r0
 800ec4e:	461a      	mov	r2, r3
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ec58:	009a      	lsls	r2, r3, #2
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ec5e:	005b      	lsls	r3, r3, #1
 800ec60:	f241 111c 	movw	r1, #4380	@ 0x111c
 800ec64:	428b      	cmp	r3, r1
 800ec66:	bf38      	it	cc
 800ec68:	460b      	movcc	r3, r1
 800ec6a:	429a      	cmp	r2, r3
 800ec6c:	d204      	bcs.n	800ec78 <tcp_process+0x210>
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ec72:	009b      	lsls	r3, r3, #2
 800ec74:	b29b      	uxth	r3, r3
 800ec76:	e00d      	b.n	800ec94 <tcp_process+0x22c>
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ec7c:	005b      	lsls	r3, r3, #1
 800ec7e:	f241 121c 	movw	r2, #4380	@ 0x111c
 800ec82:	4293      	cmp	r3, r2
 800ec84:	d904      	bls.n	800ec90 <tcp_process+0x228>
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ec8a:	005b      	lsls	r3, r3, #1
 800ec8c:	b29b      	uxth	r3, r3
 800ec8e:	e001      	b.n	800ec94 <tcp_process+0x22c>
 800ec90:	f241 131c 	movw	r3, #4380	@ 0x111c
 800ec94:	687a      	ldr	r2, [r7, #4]
 800ec96:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d106      	bne.n	800ecb2 <tcp_process+0x24a>
 800eca4:	4b13      	ldr	r3, [pc, #76]	@ (800ecf4 <tcp_process+0x28c>)
 800eca6:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 800ecaa:	491c      	ldr	r1, [pc, #112]	@ (800ed1c <tcp_process+0x2b4>)
 800ecac:	4813      	ldr	r0, [pc, #76]	@ (800ecfc <tcp_process+0x294>)
 800ecae:	f006 ffc5 	bl	8015c3c <iprintf>
        --pcb->snd_queuelen;
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800ecb8:	3b01      	subs	r3, #1
 800ecba:	b29a      	uxth	r2, r3
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ecc6:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800ecc8:	69fb      	ldr	r3, [r7, #28]
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d12a      	bne.n	800ed24 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ecd2:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800ecd4:	69fb      	ldr	r3, [r7, #28]
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d106      	bne.n	800ece8 <tcp_process+0x280>
 800ecda:	4b06      	ldr	r3, [pc, #24]	@ (800ecf4 <tcp_process+0x28c>)
 800ecdc:	f44f 725d 	mov.w	r2, #884	@ 0x374
 800ece0:	490f      	ldr	r1, [pc, #60]	@ (800ed20 <tcp_process+0x2b8>)
 800ece2:	4806      	ldr	r0, [pc, #24]	@ (800ecfc <tcp_process+0x294>)
 800ece4:	f006 ffaa 	bl	8015c3c <iprintf>
          pcb->unsent = rseg->next;
 800ece8:	69fb      	ldr	r3, [r7, #28]
 800ecea:	681a      	ldr	r2, [r3, #0]
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	66da      	str	r2, [r3, #108]	@ 0x6c
 800ecf0:	e01c      	b.n	800ed2c <tcp_process+0x2c4>
 800ecf2:	bf00      	nop
 800ecf4:	0801f410 	.word	0x0801f410
 800ecf8:	0801f648 	.word	0x0801f648
 800ecfc:	0801f45c 	.word	0x0801f45c
 800ed00:	20009288 	.word	0x20009288
 800ed04:	20009280 	.word	0x20009280
 800ed08:	2000927c 	.word	0x2000927c
 800ed0c:	0801f664 	.word	0x0801f664
 800ed10:	20009289 	.word	0x20009289
 800ed14:	20009244 	.word	0x20009244
 800ed18:	2000926c 	.word	0x2000926c
 800ed1c:	0801f684 	.word	0x0801f684
 800ed20:	0801f69c 	.word	0x0801f69c
        } else {
          pcb->unacked = rseg->next;
 800ed24:	69fb      	ldr	r3, [r7, #28]
 800ed26:	681a      	ldr	r2, [r3, #0]
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 800ed2c:	69f8      	ldr	r0, [r7, #28]
 800ed2e:	f7fe fd22 	bl	800d776 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d104      	bne.n	800ed44 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ed40:	861a      	strh	r2, [r3, #48]	@ 0x30
 800ed42:	e006      	b.n	800ed52 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	2200      	movs	r2, #0
 800ed48:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	2200      	movs	r2, #0
 800ed4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d00a      	beq.n	800ed72 <tcp_process+0x30a>
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ed62:	687a      	ldr	r2, [r7, #4]
 800ed64:	6910      	ldr	r0, [r2, #16]
 800ed66:	2200      	movs	r2, #0
 800ed68:	6879      	ldr	r1, [r7, #4]
 800ed6a:	4798      	blx	r3
 800ed6c:	4603      	mov	r3, r0
 800ed6e:	76bb      	strb	r3, [r7, #26]
 800ed70:	e001      	b.n	800ed76 <tcp_process+0x30e>
 800ed72:	2300      	movs	r3, #0
 800ed74:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800ed76:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ed7a:	f113 0f0d 	cmn.w	r3, #13
 800ed7e:	d102      	bne.n	800ed86 <tcp_process+0x31e>
          return ERR_ABRT;
 800ed80:	f06f 030c 	mvn.w	r3, #12
 800ed84:	e250      	b.n	800f228 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	8b5b      	ldrh	r3, [r3, #26]
 800ed8a:	f043 0302 	orr.w	r3, r3, #2
 800ed8e:	b29a      	uxth	r2, r3
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800ed94:	e23a      	b.n	800f20c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800ed96:	4b98      	ldr	r3, [pc, #608]	@ (800eff8 <tcp_process+0x590>)
 800ed98:	781b      	ldrb	r3, [r3, #0]
 800ed9a:	f003 0310 	and.w	r3, r3, #16
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	f000 8234 	beq.w	800f20c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eda4:	4b95      	ldr	r3, [pc, #596]	@ (800effc <tcp_process+0x594>)
 800eda6:	6819      	ldr	r1, [r3, #0]
 800eda8:	4b95      	ldr	r3, [pc, #596]	@ (800f000 <tcp_process+0x598>)
 800edaa:	881b      	ldrh	r3, [r3, #0]
 800edac:	461a      	mov	r2, r3
 800edae:	4b95      	ldr	r3, [pc, #596]	@ (800f004 <tcp_process+0x59c>)
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800edb4:	4b94      	ldr	r3, [pc, #592]	@ (800f008 <tcp_process+0x5a0>)
 800edb6:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800edb8:	885b      	ldrh	r3, [r3, #2]
 800edba:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800edbc:	4a92      	ldr	r2, [pc, #584]	@ (800f008 <tcp_process+0x5a0>)
 800edbe:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800edc0:	8812      	ldrh	r2, [r2, #0]
 800edc2:	b292      	uxth	r2, r2
 800edc4:	9202      	str	r2, [sp, #8]
 800edc6:	9301      	str	r3, [sp, #4]
 800edc8:	4b90      	ldr	r3, [pc, #576]	@ (800f00c <tcp_process+0x5a4>)
 800edca:	9300      	str	r3, [sp, #0]
 800edcc:	4b90      	ldr	r3, [pc, #576]	@ (800f010 <tcp_process+0x5a8>)
 800edce:	4602      	mov	r2, r0
 800edd0:	6878      	ldr	r0, [r7, #4]
 800edd2:	f002 fc7f 	bl	80116d4 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800eddc:	2b05      	cmp	r3, #5
 800edde:	f200 8215 	bhi.w	800f20c <tcp_process+0x7a4>
          pcb->rtime = 0;
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	2200      	movs	r2, #0
 800ede6:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 800ede8:	6878      	ldr	r0, [r7, #4]
 800edea:	f002 fa4b 	bl	8011284 <tcp_rexmit_rto>
      break;
 800edee:	e20d      	b.n	800f20c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800edf0:	4b81      	ldr	r3, [pc, #516]	@ (800eff8 <tcp_process+0x590>)
 800edf2:	781b      	ldrb	r3, [r3, #0]
 800edf4:	f003 0310 	and.w	r3, r3, #16
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	f000 80a1 	beq.w	800ef40 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800edfe:	4b7f      	ldr	r3, [pc, #508]	@ (800effc <tcp_process+0x594>)
 800ee00:	681a      	ldr	r2, [r3, #0]
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ee06:	1ad3      	subs	r3, r2, r3
 800ee08:	3b01      	subs	r3, #1
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	db7e      	blt.n	800ef0c <tcp_process+0x4a4>
 800ee0e:	4b7b      	ldr	r3, [pc, #492]	@ (800effc <tcp_process+0x594>)
 800ee10:	681a      	ldr	r2, [r3, #0]
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ee16:	1ad3      	subs	r3, r2, r3
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	dc77      	bgt.n	800ef0c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	2204      	movs	r2, #4
 800ee20:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d102      	bne.n	800ee30 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800ee2a:	23fa      	movs	r3, #250	@ 0xfa
 800ee2c:	76bb      	strb	r3, [r7, #26]
 800ee2e:	e01d      	b.n	800ee6c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ee34:	699b      	ldr	r3, [r3, #24]
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d106      	bne.n	800ee48 <tcp_process+0x3e0>
 800ee3a:	4b76      	ldr	r3, [pc, #472]	@ (800f014 <tcp_process+0x5ac>)
 800ee3c:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 800ee40:	4975      	ldr	r1, [pc, #468]	@ (800f018 <tcp_process+0x5b0>)
 800ee42:	4876      	ldr	r0, [pc, #472]	@ (800f01c <tcp_process+0x5b4>)
 800ee44:	f006 fefa 	bl	8015c3c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ee4c:	699b      	ldr	r3, [r3, #24]
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d00a      	beq.n	800ee68 <tcp_process+0x400>
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ee56:	699b      	ldr	r3, [r3, #24]
 800ee58:	687a      	ldr	r2, [r7, #4]
 800ee5a:	6910      	ldr	r0, [r2, #16]
 800ee5c:	2200      	movs	r2, #0
 800ee5e:	6879      	ldr	r1, [r7, #4]
 800ee60:	4798      	blx	r3
 800ee62:	4603      	mov	r3, r0
 800ee64:	76bb      	strb	r3, [r7, #26]
 800ee66:	e001      	b.n	800ee6c <tcp_process+0x404>
 800ee68:	23f0      	movs	r3, #240	@ 0xf0
 800ee6a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800ee6c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d00a      	beq.n	800ee8a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800ee74:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ee78:	f113 0f0d 	cmn.w	r3, #13
 800ee7c:	d002      	beq.n	800ee84 <tcp_process+0x41c>
              tcp_abort(pcb);
 800ee7e:	6878      	ldr	r0, [r7, #4]
 800ee80:	f7fd ff8c 	bl	800cd9c <tcp_abort>
            }
            return ERR_ABRT;
 800ee84:	f06f 030c 	mvn.w	r3, #12
 800ee88:	e1ce      	b.n	800f228 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800ee8a:	6878      	ldr	r0, [r7, #4]
 800ee8c:	f000 fae0 	bl	800f450 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800ee90:	4b63      	ldr	r3, [pc, #396]	@ (800f020 <tcp_process+0x5b8>)
 800ee92:	881b      	ldrh	r3, [r3, #0]
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d005      	beq.n	800eea4 <tcp_process+0x43c>
            recv_acked--;
 800ee98:	4b61      	ldr	r3, [pc, #388]	@ (800f020 <tcp_process+0x5b8>)
 800ee9a:	881b      	ldrh	r3, [r3, #0]
 800ee9c:	3b01      	subs	r3, #1
 800ee9e:	b29a      	uxth	r2, r3
 800eea0:	4b5f      	ldr	r3, [pc, #380]	@ (800f020 <tcp_process+0x5b8>)
 800eea2:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800eea8:	009a      	lsls	r2, r3, #2
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800eeae:	005b      	lsls	r3, r3, #1
 800eeb0:	f241 111c 	movw	r1, #4380	@ 0x111c
 800eeb4:	428b      	cmp	r3, r1
 800eeb6:	bf38      	it	cc
 800eeb8:	460b      	movcc	r3, r1
 800eeba:	429a      	cmp	r2, r3
 800eebc:	d204      	bcs.n	800eec8 <tcp_process+0x460>
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800eec2:	009b      	lsls	r3, r3, #2
 800eec4:	b29b      	uxth	r3, r3
 800eec6:	e00d      	b.n	800eee4 <tcp_process+0x47c>
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800eecc:	005b      	lsls	r3, r3, #1
 800eece:	f241 121c 	movw	r2, #4380	@ 0x111c
 800eed2:	4293      	cmp	r3, r2
 800eed4:	d904      	bls.n	800eee0 <tcp_process+0x478>
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800eeda:	005b      	lsls	r3, r3, #1
 800eedc:	b29b      	uxth	r3, r3
 800eede:	e001      	b.n	800eee4 <tcp_process+0x47c>
 800eee0:	f241 131c 	movw	r3, #4380	@ 0x111c
 800eee4:	687a      	ldr	r2, [r7, #4]
 800eee6:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800eeea:	4b4e      	ldr	r3, [pc, #312]	@ (800f024 <tcp_process+0x5bc>)
 800eeec:	781b      	ldrb	r3, [r3, #0]
 800eeee:	f003 0320 	and.w	r3, r3, #32
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d037      	beq.n	800ef66 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	8b5b      	ldrh	r3, [r3, #26]
 800eefa:	f043 0302 	orr.w	r3, r3, #2
 800eefe:	b29a      	uxth	r2, r3
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	2207      	movs	r2, #7
 800ef08:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800ef0a:	e02c      	b.n	800ef66 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ef0c:	4b3b      	ldr	r3, [pc, #236]	@ (800effc <tcp_process+0x594>)
 800ef0e:	6819      	ldr	r1, [r3, #0]
 800ef10:	4b3b      	ldr	r3, [pc, #236]	@ (800f000 <tcp_process+0x598>)
 800ef12:	881b      	ldrh	r3, [r3, #0]
 800ef14:	461a      	mov	r2, r3
 800ef16:	4b3b      	ldr	r3, [pc, #236]	@ (800f004 <tcp_process+0x59c>)
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ef1c:	4b3a      	ldr	r3, [pc, #232]	@ (800f008 <tcp_process+0x5a0>)
 800ef1e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ef20:	885b      	ldrh	r3, [r3, #2]
 800ef22:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ef24:	4a38      	ldr	r2, [pc, #224]	@ (800f008 <tcp_process+0x5a0>)
 800ef26:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ef28:	8812      	ldrh	r2, [r2, #0]
 800ef2a:	b292      	uxth	r2, r2
 800ef2c:	9202      	str	r2, [sp, #8]
 800ef2e:	9301      	str	r3, [sp, #4]
 800ef30:	4b36      	ldr	r3, [pc, #216]	@ (800f00c <tcp_process+0x5a4>)
 800ef32:	9300      	str	r3, [sp, #0]
 800ef34:	4b36      	ldr	r3, [pc, #216]	@ (800f010 <tcp_process+0x5a8>)
 800ef36:	4602      	mov	r2, r0
 800ef38:	6878      	ldr	r0, [r7, #4]
 800ef3a:	f002 fbcb 	bl	80116d4 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800ef3e:	e167      	b.n	800f210 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800ef40:	4b2d      	ldr	r3, [pc, #180]	@ (800eff8 <tcp_process+0x590>)
 800ef42:	781b      	ldrb	r3, [r3, #0]
 800ef44:	f003 0302 	and.w	r3, r3, #2
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	f000 8161 	beq.w	800f210 <tcp_process+0x7a8>
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef52:	1e5a      	subs	r2, r3, #1
 800ef54:	4b2b      	ldr	r3, [pc, #172]	@ (800f004 <tcp_process+0x59c>)
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	429a      	cmp	r2, r3
 800ef5a:	f040 8159 	bne.w	800f210 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800ef5e:	6878      	ldr	r0, [r7, #4]
 800ef60:	f002 f9b2 	bl	80112c8 <tcp_rexmit>
      break;
 800ef64:	e154      	b.n	800f210 <tcp_process+0x7a8>
 800ef66:	e153      	b.n	800f210 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800ef68:	6878      	ldr	r0, [r7, #4]
 800ef6a:	f000 fa71 	bl	800f450 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800ef6e:	4b2d      	ldr	r3, [pc, #180]	@ (800f024 <tcp_process+0x5bc>)
 800ef70:	781b      	ldrb	r3, [r3, #0]
 800ef72:	f003 0320 	and.w	r3, r3, #32
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	f000 814c 	beq.w	800f214 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	8b5b      	ldrh	r3, [r3, #26]
 800ef80:	f043 0302 	orr.w	r3, r3, #2
 800ef84:	b29a      	uxth	r2, r3
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	2207      	movs	r2, #7
 800ef8e:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ef90:	e140      	b.n	800f214 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800ef92:	6878      	ldr	r0, [r7, #4]
 800ef94:	f000 fa5c 	bl	800f450 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800ef98:	4b22      	ldr	r3, [pc, #136]	@ (800f024 <tcp_process+0x5bc>)
 800ef9a:	781b      	ldrb	r3, [r3, #0]
 800ef9c:	f003 0320 	and.w	r3, r3, #32
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d071      	beq.n	800f088 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800efa4:	4b14      	ldr	r3, [pc, #80]	@ (800eff8 <tcp_process+0x590>)
 800efa6:	781b      	ldrb	r3, [r3, #0]
 800efa8:	f003 0310 	and.w	r3, r3, #16
 800efac:	2b00      	cmp	r3, #0
 800efae:	d060      	beq.n	800f072 <tcp_process+0x60a>
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800efb4:	4b11      	ldr	r3, [pc, #68]	@ (800effc <tcp_process+0x594>)
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	429a      	cmp	r2, r3
 800efba:	d15a      	bne.n	800f072 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	d156      	bne.n	800f072 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	8b5b      	ldrh	r3, [r3, #26]
 800efc8:	f043 0302 	orr.w	r3, r3, #2
 800efcc:	b29a      	uxth	r2, r3
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800efd2:	6878      	ldr	r0, [r7, #4]
 800efd4:	f7fe fdbc 	bl	800db50 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800efd8:	4b13      	ldr	r3, [pc, #76]	@ (800f028 <tcp_process+0x5c0>)
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	687a      	ldr	r2, [r7, #4]
 800efde:	429a      	cmp	r2, r3
 800efe0:	d105      	bne.n	800efee <tcp_process+0x586>
 800efe2:	4b11      	ldr	r3, [pc, #68]	@ (800f028 <tcp_process+0x5c0>)
 800efe4:	681b      	ldr	r3, [r3, #0]
 800efe6:	68db      	ldr	r3, [r3, #12]
 800efe8:	4a0f      	ldr	r2, [pc, #60]	@ (800f028 <tcp_process+0x5c0>)
 800efea:	6013      	str	r3, [r2, #0]
 800efec:	e02e      	b.n	800f04c <tcp_process+0x5e4>
 800efee:	4b0e      	ldr	r3, [pc, #56]	@ (800f028 <tcp_process+0x5c0>)
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	617b      	str	r3, [r7, #20]
 800eff4:	e027      	b.n	800f046 <tcp_process+0x5de>
 800eff6:	bf00      	nop
 800eff8:	20009288 	.word	0x20009288
 800effc:	20009280 	.word	0x20009280
 800f000:	20009286 	.word	0x20009286
 800f004:	2000927c 	.word	0x2000927c
 800f008:	2000926c 	.word	0x2000926c
 800f00c:	20005f14 	.word	0x20005f14
 800f010:	20005f18 	.word	0x20005f18
 800f014:	0801f410 	.word	0x0801f410
 800f018:	0801f6b0 	.word	0x0801f6b0
 800f01c:	0801f45c 	.word	0x0801f45c
 800f020:	20009284 	.word	0x20009284
 800f024:	20009289 	.word	0x20009289
 800f028:	20009250 	.word	0x20009250
 800f02c:	697b      	ldr	r3, [r7, #20]
 800f02e:	68db      	ldr	r3, [r3, #12]
 800f030:	687a      	ldr	r2, [r7, #4]
 800f032:	429a      	cmp	r2, r3
 800f034:	d104      	bne.n	800f040 <tcp_process+0x5d8>
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	68da      	ldr	r2, [r3, #12]
 800f03a:	697b      	ldr	r3, [r7, #20]
 800f03c:	60da      	str	r2, [r3, #12]
 800f03e:	e005      	b.n	800f04c <tcp_process+0x5e4>
 800f040:	697b      	ldr	r3, [r7, #20]
 800f042:	68db      	ldr	r3, [r3, #12]
 800f044:	617b      	str	r3, [r7, #20]
 800f046:	697b      	ldr	r3, [r7, #20]
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d1ef      	bne.n	800f02c <tcp_process+0x5c4>
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	2200      	movs	r2, #0
 800f050:	60da      	str	r2, [r3, #12]
 800f052:	4b77      	ldr	r3, [pc, #476]	@ (800f230 <tcp_process+0x7c8>)
 800f054:	2201      	movs	r2, #1
 800f056:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	220a      	movs	r2, #10
 800f05c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800f05e:	4b75      	ldr	r3, [pc, #468]	@ (800f234 <tcp_process+0x7cc>)
 800f060:	681a      	ldr	r2, [r3, #0]
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	60da      	str	r2, [r3, #12]
 800f066:	4a73      	ldr	r2, [pc, #460]	@ (800f234 <tcp_process+0x7cc>)
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	6013      	str	r3, [r2, #0]
 800f06c:	f002 fcf4 	bl	8011a58 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800f070:	e0d2      	b.n	800f218 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	8b5b      	ldrh	r3, [r3, #26]
 800f076:	f043 0302 	orr.w	r3, r3, #2
 800f07a:	b29a      	uxth	r2, r3
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	2208      	movs	r2, #8
 800f084:	751a      	strb	r2, [r3, #20]
      break;
 800f086:	e0c7      	b.n	800f218 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f088:	4b6b      	ldr	r3, [pc, #428]	@ (800f238 <tcp_process+0x7d0>)
 800f08a:	781b      	ldrb	r3, [r3, #0]
 800f08c:	f003 0310 	and.w	r3, r3, #16
 800f090:	2b00      	cmp	r3, #0
 800f092:	f000 80c1 	beq.w	800f218 <tcp_process+0x7b0>
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f09a:	4b68      	ldr	r3, [pc, #416]	@ (800f23c <tcp_process+0x7d4>)
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	429a      	cmp	r2, r3
 800f0a0:	f040 80ba 	bne.w	800f218 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	f040 80b5 	bne.w	800f218 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	2206      	movs	r2, #6
 800f0b2:	751a      	strb	r2, [r3, #20]
      break;
 800f0b4:	e0b0      	b.n	800f218 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800f0b6:	6878      	ldr	r0, [r7, #4]
 800f0b8:	f000 f9ca 	bl	800f450 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800f0bc:	4b60      	ldr	r3, [pc, #384]	@ (800f240 <tcp_process+0x7d8>)
 800f0be:	781b      	ldrb	r3, [r3, #0]
 800f0c0:	f003 0320 	and.w	r3, r3, #32
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	f000 80a9 	beq.w	800f21c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	8b5b      	ldrh	r3, [r3, #26]
 800f0ce:	f043 0302 	orr.w	r3, r3, #2
 800f0d2:	b29a      	uxth	r2, r3
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800f0d8:	6878      	ldr	r0, [r7, #4]
 800f0da:	f7fe fd39 	bl	800db50 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800f0de:	4b59      	ldr	r3, [pc, #356]	@ (800f244 <tcp_process+0x7dc>)
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	687a      	ldr	r2, [r7, #4]
 800f0e4:	429a      	cmp	r2, r3
 800f0e6:	d105      	bne.n	800f0f4 <tcp_process+0x68c>
 800f0e8:	4b56      	ldr	r3, [pc, #344]	@ (800f244 <tcp_process+0x7dc>)
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	68db      	ldr	r3, [r3, #12]
 800f0ee:	4a55      	ldr	r2, [pc, #340]	@ (800f244 <tcp_process+0x7dc>)
 800f0f0:	6013      	str	r3, [r2, #0]
 800f0f2:	e013      	b.n	800f11c <tcp_process+0x6b4>
 800f0f4:	4b53      	ldr	r3, [pc, #332]	@ (800f244 <tcp_process+0x7dc>)
 800f0f6:	681b      	ldr	r3, [r3, #0]
 800f0f8:	613b      	str	r3, [r7, #16]
 800f0fa:	e00c      	b.n	800f116 <tcp_process+0x6ae>
 800f0fc:	693b      	ldr	r3, [r7, #16]
 800f0fe:	68db      	ldr	r3, [r3, #12]
 800f100:	687a      	ldr	r2, [r7, #4]
 800f102:	429a      	cmp	r2, r3
 800f104:	d104      	bne.n	800f110 <tcp_process+0x6a8>
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	68da      	ldr	r2, [r3, #12]
 800f10a:	693b      	ldr	r3, [r7, #16]
 800f10c:	60da      	str	r2, [r3, #12]
 800f10e:	e005      	b.n	800f11c <tcp_process+0x6b4>
 800f110:	693b      	ldr	r3, [r7, #16]
 800f112:	68db      	ldr	r3, [r3, #12]
 800f114:	613b      	str	r3, [r7, #16]
 800f116:	693b      	ldr	r3, [r7, #16]
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d1ef      	bne.n	800f0fc <tcp_process+0x694>
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	2200      	movs	r2, #0
 800f120:	60da      	str	r2, [r3, #12]
 800f122:	4b43      	ldr	r3, [pc, #268]	@ (800f230 <tcp_process+0x7c8>)
 800f124:	2201      	movs	r2, #1
 800f126:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	220a      	movs	r2, #10
 800f12c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800f12e:	4b41      	ldr	r3, [pc, #260]	@ (800f234 <tcp_process+0x7cc>)
 800f130:	681a      	ldr	r2, [r3, #0]
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	60da      	str	r2, [r3, #12]
 800f136:	4a3f      	ldr	r2, [pc, #252]	@ (800f234 <tcp_process+0x7cc>)
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	6013      	str	r3, [r2, #0]
 800f13c:	f002 fc8c 	bl	8011a58 <tcp_timer_needed>
      }
      break;
 800f140:	e06c      	b.n	800f21c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800f142:	6878      	ldr	r0, [r7, #4]
 800f144:	f000 f984 	bl	800f450 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f148:	4b3b      	ldr	r3, [pc, #236]	@ (800f238 <tcp_process+0x7d0>)
 800f14a:	781b      	ldrb	r3, [r3, #0]
 800f14c:	f003 0310 	and.w	r3, r3, #16
 800f150:	2b00      	cmp	r3, #0
 800f152:	d065      	beq.n	800f220 <tcp_process+0x7b8>
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f158:	4b38      	ldr	r3, [pc, #224]	@ (800f23c <tcp_process+0x7d4>)
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	429a      	cmp	r2, r3
 800f15e:	d15f      	bne.n	800f220 <tcp_process+0x7b8>
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f164:	2b00      	cmp	r3, #0
 800f166:	d15b      	bne.n	800f220 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800f168:	6878      	ldr	r0, [r7, #4]
 800f16a:	f7fe fcf1 	bl	800db50 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800f16e:	4b35      	ldr	r3, [pc, #212]	@ (800f244 <tcp_process+0x7dc>)
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	687a      	ldr	r2, [r7, #4]
 800f174:	429a      	cmp	r2, r3
 800f176:	d105      	bne.n	800f184 <tcp_process+0x71c>
 800f178:	4b32      	ldr	r3, [pc, #200]	@ (800f244 <tcp_process+0x7dc>)
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	68db      	ldr	r3, [r3, #12]
 800f17e:	4a31      	ldr	r2, [pc, #196]	@ (800f244 <tcp_process+0x7dc>)
 800f180:	6013      	str	r3, [r2, #0]
 800f182:	e013      	b.n	800f1ac <tcp_process+0x744>
 800f184:	4b2f      	ldr	r3, [pc, #188]	@ (800f244 <tcp_process+0x7dc>)
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	60fb      	str	r3, [r7, #12]
 800f18a:	e00c      	b.n	800f1a6 <tcp_process+0x73e>
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	68db      	ldr	r3, [r3, #12]
 800f190:	687a      	ldr	r2, [r7, #4]
 800f192:	429a      	cmp	r2, r3
 800f194:	d104      	bne.n	800f1a0 <tcp_process+0x738>
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	68da      	ldr	r2, [r3, #12]
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	60da      	str	r2, [r3, #12]
 800f19e:	e005      	b.n	800f1ac <tcp_process+0x744>
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	68db      	ldr	r3, [r3, #12]
 800f1a4:	60fb      	str	r3, [r7, #12]
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d1ef      	bne.n	800f18c <tcp_process+0x724>
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	2200      	movs	r2, #0
 800f1b0:	60da      	str	r2, [r3, #12]
 800f1b2:	4b1f      	ldr	r3, [pc, #124]	@ (800f230 <tcp_process+0x7c8>)
 800f1b4:	2201      	movs	r2, #1
 800f1b6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	220a      	movs	r2, #10
 800f1bc:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800f1be:	4b1d      	ldr	r3, [pc, #116]	@ (800f234 <tcp_process+0x7cc>)
 800f1c0:	681a      	ldr	r2, [r3, #0]
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	60da      	str	r2, [r3, #12]
 800f1c6:	4a1b      	ldr	r2, [pc, #108]	@ (800f234 <tcp_process+0x7cc>)
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	6013      	str	r3, [r2, #0]
 800f1cc:	f002 fc44 	bl	8011a58 <tcp_timer_needed>
      }
      break;
 800f1d0:	e026      	b.n	800f220 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800f1d2:	6878      	ldr	r0, [r7, #4]
 800f1d4:	f000 f93c 	bl	800f450 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f1d8:	4b17      	ldr	r3, [pc, #92]	@ (800f238 <tcp_process+0x7d0>)
 800f1da:	781b      	ldrb	r3, [r3, #0]
 800f1dc:	f003 0310 	and.w	r3, r3, #16
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d01f      	beq.n	800f224 <tcp_process+0x7bc>
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f1e8:	4b14      	ldr	r3, [pc, #80]	@ (800f23c <tcp_process+0x7d4>)
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	429a      	cmp	r2, r3
 800f1ee:	d119      	bne.n	800f224 <tcp_process+0x7bc>
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d115      	bne.n	800f224 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800f1f8:	4b11      	ldr	r3, [pc, #68]	@ (800f240 <tcp_process+0x7d8>)
 800f1fa:	781b      	ldrb	r3, [r3, #0]
 800f1fc:	f043 0310 	orr.w	r3, r3, #16
 800f200:	b2da      	uxtb	r2, r3
 800f202:	4b0f      	ldr	r3, [pc, #60]	@ (800f240 <tcp_process+0x7d8>)
 800f204:	701a      	strb	r2, [r3, #0]
      }
      break;
 800f206:	e00d      	b.n	800f224 <tcp_process+0x7bc>
    default:
      break;
 800f208:	bf00      	nop
 800f20a:	e00c      	b.n	800f226 <tcp_process+0x7be>
      break;
 800f20c:	bf00      	nop
 800f20e:	e00a      	b.n	800f226 <tcp_process+0x7be>
      break;
 800f210:	bf00      	nop
 800f212:	e008      	b.n	800f226 <tcp_process+0x7be>
      break;
 800f214:	bf00      	nop
 800f216:	e006      	b.n	800f226 <tcp_process+0x7be>
      break;
 800f218:	bf00      	nop
 800f21a:	e004      	b.n	800f226 <tcp_process+0x7be>
      break;
 800f21c:	bf00      	nop
 800f21e:	e002      	b.n	800f226 <tcp_process+0x7be>
      break;
 800f220:	bf00      	nop
 800f222:	e000      	b.n	800f226 <tcp_process+0x7be>
      break;
 800f224:	bf00      	nop
  }
  return ERR_OK;
 800f226:	2300      	movs	r3, #0
}
 800f228:	4618      	mov	r0, r3
 800f22a:	3724      	adds	r7, #36	@ 0x24
 800f22c:	46bd      	mov	sp, r7
 800f22e:	bd90      	pop	{r4, r7, pc}
 800f230:	20009258 	.word	0x20009258
 800f234:	20009254 	.word	0x20009254
 800f238:	20009288 	.word	0x20009288
 800f23c:	20009280 	.word	0x20009280
 800f240:	20009289 	.word	0x20009289
 800f244:	20009250 	.word	0x20009250

0800f248 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800f248:	b590      	push	{r4, r7, lr}
 800f24a:	b085      	sub	sp, #20
 800f24c:	af00      	add	r7, sp, #0
 800f24e:	6078      	str	r0, [r7, #4]
 800f250:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	2b00      	cmp	r3, #0
 800f256:	d106      	bne.n	800f266 <tcp_oos_insert_segment+0x1e>
 800f258:	4b3b      	ldr	r3, [pc, #236]	@ (800f348 <tcp_oos_insert_segment+0x100>)
 800f25a:	f240 421f 	movw	r2, #1055	@ 0x41f
 800f25e:	493b      	ldr	r1, [pc, #236]	@ (800f34c <tcp_oos_insert_segment+0x104>)
 800f260:	483b      	ldr	r0, [pc, #236]	@ (800f350 <tcp_oos_insert_segment+0x108>)
 800f262:	f006 fceb 	bl	8015c3c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	68db      	ldr	r3, [r3, #12]
 800f26a:	899b      	ldrh	r3, [r3, #12]
 800f26c:	b29b      	uxth	r3, r3
 800f26e:	4618      	mov	r0, r3
 800f270:	f7fb f87a 	bl	800a368 <lwip_htons>
 800f274:	4603      	mov	r3, r0
 800f276:	b2db      	uxtb	r3, r3
 800f278:	f003 0301 	and.w	r3, r3, #1
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d028      	beq.n	800f2d2 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800f280:	6838      	ldr	r0, [r7, #0]
 800f282:	f7fe fa63 	bl	800d74c <tcp_segs_free>
    next = NULL;
 800f286:	2300      	movs	r3, #0
 800f288:	603b      	str	r3, [r7, #0]
 800f28a:	e056      	b.n	800f33a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800f28c:	683b      	ldr	r3, [r7, #0]
 800f28e:	68db      	ldr	r3, [r3, #12]
 800f290:	899b      	ldrh	r3, [r3, #12]
 800f292:	b29b      	uxth	r3, r3
 800f294:	4618      	mov	r0, r3
 800f296:	f7fb f867 	bl	800a368 <lwip_htons>
 800f29a:	4603      	mov	r3, r0
 800f29c:	b2db      	uxtb	r3, r3
 800f29e:	f003 0301 	and.w	r3, r3, #1
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d00d      	beq.n	800f2c2 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	68db      	ldr	r3, [r3, #12]
 800f2aa:	899b      	ldrh	r3, [r3, #12]
 800f2ac:	b29c      	uxth	r4, r3
 800f2ae:	2001      	movs	r0, #1
 800f2b0:	f7fb f85a 	bl	800a368 <lwip_htons>
 800f2b4:	4603      	mov	r3, r0
 800f2b6:	461a      	mov	r2, r3
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	68db      	ldr	r3, [r3, #12]
 800f2bc:	4322      	orrs	r2, r4
 800f2be:	b292      	uxth	r2, r2
 800f2c0:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800f2c2:	683b      	ldr	r3, [r7, #0]
 800f2c4:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800f2c6:	683b      	ldr	r3, [r7, #0]
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800f2cc:	68f8      	ldr	r0, [r7, #12]
 800f2ce:	f7fe fa52 	bl	800d776 <tcp_seg_free>
    while (next &&
 800f2d2:	683b      	ldr	r3, [r7, #0]
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d00e      	beq.n	800f2f6 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	891b      	ldrh	r3, [r3, #8]
 800f2dc:	461a      	mov	r2, r3
 800f2de:	4b1d      	ldr	r3, [pc, #116]	@ (800f354 <tcp_oos_insert_segment+0x10c>)
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	441a      	add	r2, r3
 800f2e4:	683b      	ldr	r3, [r7, #0]
 800f2e6:	68db      	ldr	r3, [r3, #12]
 800f2e8:	685b      	ldr	r3, [r3, #4]
 800f2ea:	6839      	ldr	r1, [r7, #0]
 800f2ec:	8909      	ldrh	r1, [r1, #8]
 800f2ee:	440b      	add	r3, r1
 800f2f0:	1ad3      	subs	r3, r2, r3
    while (next &&
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	daca      	bge.n	800f28c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800f2f6:	683b      	ldr	r3, [r7, #0]
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d01e      	beq.n	800f33a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	891b      	ldrh	r3, [r3, #8]
 800f300:	461a      	mov	r2, r3
 800f302:	4b14      	ldr	r3, [pc, #80]	@ (800f354 <tcp_oos_insert_segment+0x10c>)
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	441a      	add	r2, r3
 800f308:	683b      	ldr	r3, [r7, #0]
 800f30a:	68db      	ldr	r3, [r3, #12]
 800f30c:	685b      	ldr	r3, [r3, #4]
 800f30e:	1ad3      	subs	r3, r2, r3
    if (next &&
 800f310:	2b00      	cmp	r3, #0
 800f312:	dd12      	ble.n	800f33a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800f314:	683b      	ldr	r3, [r7, #0]
 800f316:	68db      	ldr	r3, [r3, #12]
 800f318:	685b      	ldr	r3, [r3, #4]
 800f31a:	b29a      	uxth	r2, r3
 800f31c:	4b0d      	ldr	r3, [pc, #52]	@ (800f354 <tcp_oos_insert_segment+0x10c>)
 800f31e:	681b      	ldr	r3, [r3, #0]
 800f320:	b29b      	uxth	r3, r3
 800f322:	1ad3      	subs	r3, r2, r3
 800f324:	b29a      	uxth	r2, r3
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	685a      	ldr	r2, [r3, #4]
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	891b      	ldrh	r3, [r3, #8]
 800f332:	4619      	mov	r1, r3
 800f334:	4610      	mov	r0, r2
 800f336:	f7fc fcb9 	bl	800bcac <pbuf_realloc>
    }
  }
  cseg->next = next;
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	683a      	ldr	r2, [r7, #0]
 800f33e:	601a      	str	r2, [r3, #0]
}
 800f340:	bf00      	nop
 800f342:	3714      	adds	r7, #20
 800f344:	46bd      	mov	sp, r7
 800f346:	bd90      	pop	{r4, r7, pc}
 800f348:	0801f410 	.word	0x0801f410
 800f34c:	0801f6d0 	.word	0x0801f6d0
 800f350:	0801f45c 	.word	0x0801f45c
 800f354:	2000927c 	.word	0x2000927c

0800f358 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800f358:	b5b0      	push	{r4, r5, r7, lr}
 800f35a:	b086      	sub	sp, #24
 800f35c:	af00      	add	r7, sp, #0
 800f35e:	60f8      	str	r0, [r7, #12]
 800f360:	60b9      	str	r1, [r7, #8]
 800f362:	607a      	str	r2, [r7, #4]
 800f364:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800f366:	e03e      	b.n	800f3e6 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800f368:	68bb      	ldr	r3, [r7, #8]
 800f36a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800f36c:	68bb      	ldr	r3, [r7, #8]
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800f372:	697b      	ldr	r3, [r7, #20]
 800f374:	685b      	ldr	r3, [r3, #4]
 800f376:	4618      	mov	r0, r3
 800f378:	f7fc fea6 	bl	800c0c8 <pbuf_clen>
 800f37c:	4603      	mov	r3, r0
 800f37e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800f380:	68fb      	ldr	r3, [r7, #12]
 800f382:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800f386:	8a7a      	ldrh	r2, [r7, #18]
 800f388:	429a      	cmp	r2, r3
 800f38a:	d906      	bls.n	800f39a <tcp_free_acked_segments+0x42>
 800f38c:	4b2a      	ldr	r3, [pc, #168]	@ (800f438 <tcp_free_acked_segments+0xe0>)
 800f38e:	f240 4257 	movw	r2, #1111	@ 0x457
 800f392:	492a      	ldr	r1, [pc, #168]	@ (800f43c <tcp_free_acked_segments+0xe4>)
 800f394:	482a      	ldr	r0, [pc, #168]	@ (800f440 <tcp_free_acked_segments+0xe8>)
 800f396:	f006 fc51 	bl	8015c3c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 800f3a0:	8a7b      	ldrh	r3, [r7, #18]
 800f3a2:	1ad3      	subs	r3, r2, r3
 800f3a4:	b29a      	uxth	r2, r3
 800f3a6:	68fb      	ldr	r3, [r7, #12]
 800f3a8:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800f3ac:	697b      	ldr	r3, [r7, #20]
 800f3ae:	891a      	ldrh	r2, [r3, #8]
 800f3b0:	4b24      	ldr	r3, [pc, #144]	@ (800f444 <tcp_free_acked_segments+0xec>)
 800f3b2:	881b      	ldrh	r3, [r3, #0]
 800f3b4:	4413      	add	r3, r2
 800f3b6:	b29a      	uxth	r2, r3
 800f3b8:	4b22      	ldr	r3, [pc, #136]	@ (800f444 <tcp_free_acked_segments+0xec>)
 800f3ba:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800f3bc:	6978      	ldr	r0, [r7, #20]
 800f3be:	f7fe f9da 	bl	800d776 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800f3c2:	68fb      	ldr	r3, [r7, #12]
 800f3c4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d00c      	beq.n	800f3e6 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800f3cc:	68bb      	ldr	r3, [r7, #8]
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d109      	bne.n	800f3e6 <tcp_free_acked_segments+0x8e>
 800f3d2:	683b      	ldr	r3, [r7, #0]
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d106      	bne.n	800f3e6 <tcp_free_acked_segments+0x8e>
 800f3d8:	4b17      	ldr	r3, [pc, #92]	@ (800f438 <tcp_free_acked_segments+0xe0>)
 800f3da:	f240 4261 	movw	r2, #1121	@ 0x461
 800f3de:	491a      	ldr	r1, [pc, #104]	@ (800f448 <tcp_free_acked_segments+0xf0>)
 800f3e0:	4817      	ldr	r0, [pc, #92]	@ (800f440 <tcp_free_acked_segments+0xe8>)
 800f3e2:	f006 fc2b 	bl	8015c3c <iprintf>
  while (seg_list != NULL &&
 800f3e6:	68bb      	ldr	r3, [r7, #8]
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d020      	beq.n	800f42e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800f3ec:	68bb      	ldr	r3, [r7, #8]
 800f3ee:	68db      	ldr	r3, [r3, #12]
 800f3f0:	685b      	ldr	r3, [r3, #4]
 800f3f2:	4618      	mov	r0, r3
 800f3f4:	f7fa ffce 	bl	800a394 <lwip_htonl>
 800f3f8:	4604      	mov	r4, r0
 800f3fa:	68bb      	ldr	r3, [r7, #8]
 800f3fc:	891b      	ldrh	r3, [r3, #8]
 800f3fe:	461d      	mov	r5, r3
 800f400:	68bb      	ldr	r3, [r7, #8]
 800f402:	68db      	ldr	r3, [r3, #12]
 800f404:	899b      	ldrh	r3, [r3, #12]
 800f406:	b29b      	uxth	r3, r3
 800f408:	4618      	mov	r0, r3
 800f40a:	f7fa ffad 	bl	800a368 <lwip_htons>
 800f40e:	4603      	mov	r3, r0
 800f410:	b2db      	uxtb	r3, r3
 800f412:	f003 0303 	and.w	r3, r3, #3
 800f416:	2b00      	cmp	r3, #0
 800f418:	d001      	beq.n	800f41e <tcp_free_acked_segments+0xc6>
 800f41a:	2301      	movs	r3, #1
 800f41c:	e000      	b.n	800f420 <tcp_free_acked_segments+0xc8>
 800f41e:	2300      	movs	r3, #0
 800f420:	442b      	add	r3, r5
 800f422:	18e2      	adds	r2, r4, r3
 800f424:	4b09      	ldr	r3, [pc, #36]	@ (800f44c <tcp_free_acked_segments+0xf4>)
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	dd9c      	ble.n	800f368 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800f42e:	68bb      	ldr	r3, [r7, #8]
}
 800f430:	4618      	mov	r0, r3
 800f432:	3718      	adds	r7, #24
 800f434:	46bd      	mov	sp, r7
 800f436:	bdb0      	pop	{r4, r5, r7, pc}
 800f438:	0801f410 	.word	0x0801f410
 800f43c:	0801f6f8 	.word	0x0801f6f8
 800f440:	0801f45c 	.word	0x0801f45c
 800f444:	20009284 	.word	0x20009284
 800f448:	0801f720 	.word	0x0801f720
 800f44c:	20009280 	.word	0x20009280

0800f450 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800f450:	b5b0      	push	{r4, r5, r7, lr}
 800f452:	b094      	sub	sp, #80	@ 0x50
 800f454:	af00      	add	r7, sp, #0
 800f456:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800f458:	2300      	movs	r3, #0
 800f45a:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d106      	bne.n	800f470 <tcp_receive+0x20>
 800f462:	4b91      	ldr	r3, [pc, #580]	@ (800f6a8 <tcp_receive+0x258>)
 800f464:	f240 427b 	movw	r2, #1147	@ 0x47b
 800f468:	4990      	ldr	r1, [pc, #576]	@ (800f6ac <tcp_receive+0x25c>)
 800f46a:	4891      	ldr	r0, [pc, #580]	@ (800f6b0 <tcp_receive+0x260>)
 800f46c:	f006 fbe6 	bl	8015c3c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	7d1b      	ldrb	r3, [r3, #20]
 800f474:	2b03      	cmp	r3, #3
 800f476:	d806      	bhi.n	800f486 <tcp_receive+0x36>
 800f478:	4b8b      	ldr	r3, [pc, #556]	@ (800f6a8 <tcp_receive+0x258>)
 800f47a:	f240 427c 	movw	r2, #1148	@ 0x47c
 800f47e:	498d      	ldr	r1, [pc, #564]	@ (800f6b4 <tcp_receive+0x264>)
 800f480:	488b      	ldr	r0, [pc, #556]	@ (800f6b0 <tcp_receive+0x260>)
 800f482:	f006 fbdb 	bl	8015c3c <iprintf>

  if (flags & TCP_ACK) {
 800f486:	4b8c      	ldr	r3, [pc, #560]	@ (800f6b8 <tcp_receive+0x268>)
 800f488:	781b      	ldrb	r3, [r3, #0]
 800f48a:	f003 0310 	and.w	r3, r3, #16
 800f48e:	2b00      	cmp	r3, #0
 800f490:	f000 8264 	beq.w	800f95c <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f49a:	461a      	mov	r2, r3
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f4a0:	4413      	add	r3, r2
 800f4a2:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800f4a8:	4b84      	ldr	r3, [pc, #528]	@ (800f6bc <tcp_receive+0x26c>)
 800f4aa:	681b      	ldr	r3, [r3, #0]
 800f4ac:	1ad3      	subs	r3, r2, r3
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	db1b      	blt.n	800f4ea <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800f4b6:	4b81      	ldr	r3, [pc, #516]	@ (800f6bc <tcp_receive+0x26c>)
 800f4b8:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f4ba:	429a      	cmp	r2, r3
 800f4bc:	d106      	bne.n	800f4cc <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800f4c2:	4b7f      	ldr	r3, [pc, #508]	@ (800f6c0 <tcp_receive+0x270>)
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	1ad3      	subs	r3, r2, r3
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	db0e      	blt.n	800f4ea <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800f4d0:	4b7b      	ldr	r3, [pc, #492]	@ (800f6c0 <tcp_receive+0x270>)
 800f4d2:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f4d4:	429a      	cmp	r2, r3
 800f4d6:	d125      	bne.n	800f524 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f4d8:	4b7a      	ldr	r3, [pc, #488]	@ (800f6c4 <tcp_receive+0x274>)
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	89db      	ldrh	r3, [r3, #14]
 800f4de:	b29a      	uxth	r2, r3
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f4e6:	429a      	cmp	r2, r3
 800f4e8:	d91c      	bls.n	800f524 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800f4ea:	4b76      	ldr	r3, [pc, #472]	@ (800f6c4 <tcp_receive+0x274>)
 800f4ec:	681b      	ldr	r3, [r3, #0]
 800f4ee:	89db      	ldrh	r3, [r3, #14]
 800f4f0:	b29a      	uxth	r2, r3
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f504:	429a      	cmp	r2, r3
 800f506:	d205      	bcs.n	800f514 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 800f514:	4b69      	ldr	r3, [pc, #420]	@ (800f6bc <tcp_receive+0x26c>)
 800f516:	681a      	ldr	r2, [r3, #0]
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 800f51c:	4b68      	ldr	r3, [pc, #416]	@ (800f6c0 <tcp_receive+0x270>)
 800f51e:	681a      	ldr	r2, [r3, #0]
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800f524:	4b66      	ldr	r3, [pc, #408]	@ (800f6c0 <tcp_receive+0x270>)
 800f526:	681a      	ldr	r2, [r3, #0]
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f52c:	1ad3      	subs	r3, r2, r3
 800f52e:	2b00      	cmp	r3, #0
 800f530:	dc58      	bgt.n	800f5e4 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800f532:	4b65      	ldr	r3, [pc, #404]	@ (800f6c8 <tcp_receive+0x278>)
 800f534:	881b      	ldrh	r3, [r3, #0]
 800f536:	2b00      	cmp	r3, #0
 800f538:	d14b      	bne.n	800f5d2 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f53e:	687a      	ldr	r2, [r7, #4]
 800f540:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 800f544:	4413      	add	r3, r2
 800f546:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f548:	429a      	cmp	r2, r3
 800f54a:	d142      	bne.n	800f5d2 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800f552:	2b00      	cmp	r3, #0
 800f554:	db3d      	blt.n	800f5d2 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f55a:	4b59      	ldr	r3, [pc, #356]	@ (800f6c0 <tcp_receive+0x270>)
 800f55c:	681b      	ldr	r3, [r3, #0]
 800f55e:	429a      	cmp	r2, r3
 800f560:	d137      	bne.n	800f5d2 <tcp_receive+0x182>
              found_dupack = 1;
 800f562:	2301      	movs	r3, #1
 800f564:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800f56c:	2bff      	cmp	r3, #255	@ 0xff
 800f56e:	d007      	beq.n	800f580 <tcp_receive+0x130>
                ++pcb->dupacks;
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800f576:	3301      	adds	r3, #1
 800f578:	b2da      	uxtb	r2, r3
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800f586:	2b03      	cmp	r3, #3
 800f588:	d91b      	bls.n	800f5c2 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f594:	4413      	add	r3, r2
 800f596:	b29a      	uxth	r2, r3
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800f59e:	429a      	cmp	r2, r3
 800f5a0:	d30a      	bcc.n	800f5b8 <tcp_receive+0x168>
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f5ac:	4413      	add	r3, r2
 800f5ae:	b29a      	uxth	r2, r3
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800f5b6:	e004      	b.n	800f5c2 <tcp_receive+0x172>
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f5be:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800f5c8:	2b02      	cmp	r3, #2
 800f5ca:	d902      	bls.n	800f5d2 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800f5cc:	6878      	ldr	r0, [r7, #4]
 800f5ce:	f001 fee7 	bl	80113a0 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800f5d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	f040 8161 	bne.w	800f89c <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	2200      	movs	r2, #0
 800f5de:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800f5e2:	e15b      	b.n	800f89c <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f5e4:	4b36      	ldr	r3, [pc, #216]	@ (800f6c0 <tcp_receive+0x270>)
 800f5e6:	681a      	ldr	r2, [r3, #0]
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f5ec:	1ad3      	subs	r3, r2, r3
 800f5ee:	3b01      	subs	r3, #1
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	f2c0 814e 	blt.w	800f892 <tcp_receive+0x442>
 800f5f6:	4b32      	ldr	r3, [pc, #200]	@ (800f6c0 <tcp_receive+0x270>)
 800f5f8:	681a      	ldr	r2, [r3, #0]
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f5fe:	1ad3      	subs	r3, r2, r3
 800f600:	2b00      	cmp	r3, #0
 800f602:	f300 8146 	bgt.w	800f892 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	8b5b      	ldrh	r3, [r3, #26]
 800f60a:	f003 0304 	and.w	r3, r3, #4
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d010      	beq.n	800f634 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	8b5b      	ldrh	r3, [r3, #26]
 800f616:	f023 0304 	bic.w	r3, r3, #4
 800f61a:	b29a      	uxth	r2, r3
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	2200      	movs	r2, #0
 800f630:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	2200      	movs	r2, #0
 800f638:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800f642:	10db      	asrs	r3, r3, #3
 800f644:	b21b      	sxth	r3, r3
 800f646:	b29a      	uxth	r2, r3
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800f64e:	b29b      	uxth	r3, r3
 800f650:	4413      	add	r3, r2
 800f652:	b29b      	uxth	r3, r3
 800f654:	b21a      	sxth	r2, r3
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800f65c:	4b18      	ldr	r3, [pc, #96]	@ (800f6c0 <tcp_receive+0x270>)
 800f65e:	681b      	ldr	r3, [r3, #0]
 800f660:	b29a      	uxth	r2, r3
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f666:	b29b      	uxth	r3, r3
 800f668:	1ad3      	subs	r3, r2, r3
 800f66a:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	2200      	movs	r2, #0
 800f670:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 800f674:	4b12      	ldr	r3, [pc, #72]	@ (800f6c0 <tcp_receive+0x270>)
 800f676:	681a      	ldr	r2, [r3, #0]
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	7d1b      	ldrb	r3, [r3, #20]
 800f680:	2b03      	cmp	r3, #3
 800f682:	f240 8097 	bls.w	800f7b4 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800f692:	429a      	cmp	r2, r3
 800f694:	d245      	bcs.n	800f722 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	8b5b      	ldrh	r3, [r3, #26]
 800f69a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d014      	beq.n	800f6cc <tcp_receive+0x27c>
 800f6a2:	2301      	movs	r3, #1
 800f6a4:	e013      	b.n	800f6ce <tcp_receive+0x27e>
 800f6a6:	bf00      	nop
 800f6a8:	0801f410 	.word	0x0801f410
 800f6ac:	0801f740 	.word	0x0801f740
 800f6b0:	0801f45c 	.word	0x0801f45c
 800f6b4:	0801f75c 	.word	0x0801f75c
 800f6b8:	20009288 	.word	0x20009288
 800f6bc:	2000927c 	.word	0x2000927c
 800f6c0:	20009280 	.word	0x20009280
 800f6c4:	2000926c 	.word	0x2000926c
 800f6c8:	20009286 	.word	0x20009286
 800f6cc:	2302      	movs	r3, #2
 800f6ce:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800f6d2:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800f6d6:	b29a      	uxth	r2, r3
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f6dc:	fb12 f303 	smulbb	r3, r2, r3
 800f6e0:	b29b      	uxth	r3, r3
 800f6e2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800f6e4:	4293      	cmp	r3, r2
 800f6e6:	bf28      	it	cs
 800f6e8:	4613      	movcs	r3, r2
 800f6ea:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f6f2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800f6f4:	4413      	add	r3, r2
 800f6f6:	b29a      	uxth	r2, r3
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800f6fe:	429a      	cmp	r2, r3
 800f700:	d309      	bcc.n	800f716 <tcp_receive+0x2c6>
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f708:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800f70a:	4413      	add	r3, r2
 800f70c:	b29a      	uxth	r2, r3
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800f714:	e04e      	b.n	800f7b4 <tcp_receive+0x364>
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f71c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800f720:	e048      	b.n	800f7b4 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800f728:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800f72a:	4413      	add	r3, r2
 800f72c:	b29a      	uxth	r2, r3
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800f734:	429a      	cmp	r2, r3
 800f736:	d309      	bcc.n	800f74c <tcp_receive+0x2fc>
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800f73e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800f740:	4413      	add	r3, r2
 800f742:	b29a      	uxth	r2, r3
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800f74a:	e004      	b.n	800f756 <tcp_receive+0x306>
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f752:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800f762:	429a      	cmp	r2, r3
 800f764:	d326      	bcc.n	800f7b4 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800f772:	1ad3      	subs	r3, r2, r3
 800f774:	b29a      	uxth	r2, r3
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f786:	4413      	add	r3, r2
 800f788:	b29a      	uxth	r2, r3
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800f790:	429a      	cmp	r2, r3
 800f792:	d30a      	bcc.n	800f7aa <tcp_receive+0x35a>
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f79e:	4413      	add	r3, r2
 800f7a0:	b29a      	uxth	r2, r3
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800f7a8:	e004      	b.n	800f7b4 <tcp_receive+0x364>
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f7b0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f7bc:	4a98      	ldr	r2, [pc, #608]	@ (800fa20 <tcp_receive+0x5d0>)
 800f7be:	6878      	ldr	r0, [r7, #4]
 800f7c0:	f7ff fdca 	bl	800f358 <tcp_free_acked_segments>
 800f7c4:	4602      	mov	r2, r0
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f7d2:	4a94      	ldr	r2, [pc, #592]	@ (800fa24 <tcp_receive+0x5d4>)
 800f7d4:	6878      	ldr	r0, [r7, #4]
 800f7d6:	f7ff fdbf 	bl	800f358 <tcp_free_acked_segments>
 800f7da:	4602      	mov	r2, r0
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d104      	bne.n	800f7f2 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f7ee:	861a      	strh	r2, [r3, #48]	@ 0x30
 800f7f0:	e002      	b.n	800f7f8 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	2200      	movs	r2, #0
 800f7f6:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	2200      	movs	r2, #0
 800f7fc:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f802:	2b00      	cmp	r3, #0
 800f804:	d103      	bne.n	800f80e <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	2200      	movs	r2, #0
 800f80a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800f814:	4b84      	ldr	r3, [pc, #528]	@ (800fa28 <tcp_receive+0x5d8>)
 800f816:	881b      	ldrh	r3, [r3, #0]
 800f818:	4413      	add	r3, r2
 800f81a:	b29a      	uxth	r2, r3
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	8b5b      	ldrh	r3, [r3, #26]
 800f826:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	d035      	beq.n	800f89a <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f832:	2b00      	cmp	r3, #0
 800f834:	d118      	bne.n	800f868 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	d00c      	beq.n	800f858 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f846:	68db      	ldr	r3, [r3, #12]
 800f848:	685b      	ldr	r3, [r3, #4]
 800f84a:	4618      	mov	r0, r3
 800f84c:	f7fa fda2 	bl	800a394 <lwip_htonl>
 800f850:	4603      	mov	r3, r0
 800f852:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800f854:	2b00      	cmp	r3, #0
 800f856:	dc20      	bgt.n	800f89a <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	8b5b      	ldrh	r3, [r3, #26]
 800f85c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f860:	b29a      	uxth	r2, r3
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f866:	e018      	b.n	800f89a <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f870:	68db      	ldr	r3, [r3, #12]
 800f872:	685b      	ldr	r3, [r3, #4]
 800f874:	4618      	mov	r0, r3
 800f876:	f7fa fd8d 	bl	800a394 <lwip_htonl>
 800f87a:	4603      	mov	r3, r0
 800f87c:	1ae3      	subs	r3, r4, r3
 800f87e:	2b00      	cmp	r3, #0
 800f880:	dc0b      	bgt.n	800f89a <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	8b5b      	ldrh	r3, [r3, #26]
 800f886:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f88a:	b29a      	uxth	r2, r3
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f890:	e003      	b.n	800f89a <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800f892:	6878      	ldr	r0, [r7, #4]
 800f894:	f001 ff70 	bl	8011778 <tcp_send_empty_ack>
 800f898:	e000      	b.n	800f89c <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f89a:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d05b      	beq.n	800f95c <tcp_receive+0x50c>
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f8a8:	4b60      	ldr	r3, [pc, #384]	@ (800fa2c <tcp_receive+0x5dc>)
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	1ad3      	subs	r3, r2, r3
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	da54      	bge.n	800f95c <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800f8b2:	4b5f      	ldr	r3, [pc, #380]	@ (800fa30 <tcp_receive+0x5e0>)
 800f8b4:	681b      	ldr	r3, [r3, #0]
 800f8b6:	b29a      	uxth	r2, r3
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f8bc:	b29b      	uxth	r3, r3
 800f8be:	1ad3      	subs	r3, r2, r3
 800f8c0:	b29b      	uxth	r3, r3
 800f8c2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800f8c6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800f8d0:	10db      	asrs	r3, r3, #3
 800f8d2:	b21b      	sxth	r3, r3
 800f8d4:	b29b      	uxth	r3, r3
 800f8d6:	1ad3      	subs	r3, r2, r3
 800f8d8:	b29b      	uxth	r3, r3
 800f8da:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800f8e4:	b29a      	uxth	r2, r3
 800f8e6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800f8ea:	4413      	add	r3, r2
 800f8ec:	b29b      	uxth	r3, r3
 800f8ee:	b21a      	sxth	r2, r3
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 800f8f4:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	da05      	bge.n	800f908 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800f8fc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800f900:	425b      	negs	r3, r3
 800f902:	b29b      	uxth	r3, r3
 800f904:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800f908:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800f912:	109b      	asrs	r3, r3, #2
 800f914:	b21b      	sxth	r3, r3
 800f916:	b29b      	uxth	r3, r3
 800f918:	1ad3      	subs	r3, r2, r3
 800f91a:	b29b      	uxth	r3, r3
 800f91c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800f926:	b29a      	uxth	r2, r3
 800f928:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800f92c:	4413      	add	r3, r2
 800f92e:	b29b      	uxth	r3, r3
 800f930:	b21a      	sxth	r2, r3
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800f93c:	10db      	asrs	r3, r3, #3
 800f93e:	b21b      	sxth	r3, r3
 800f940:	b29a      	uxth	r2, r3
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800f948:	b29b      	uxth	r3, r3
 800f94a:	4413      	add	r3, r2
 800f94c:	b29b      	uxth	r3, r3
 800f94e:	b21a      	sxth	r2, r3
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	2200      	movs	r2, #0
 800f95a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800f95c:	4b35      	ldr	r3, [pc, #212]	@ (800fa34 <tcp_receive+0x5e4>)
 800f95e:	881b      	ldrh	r3, [r3, #0]
 800f960:	2b00      	cmp	r3, #0
 800f962:	f000 84df 	beq.w	8010324 <tcp_receive+0xed4>
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	7d1b      	ldrb	r3, [r3, #20]
 800f96a:	2b06      	cmp	r3, #6
 800f96c:	f200 84da 	bhi.w	8010324 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f974:	4b30      	ldr	r3, [pc, #192]	@ (800fa38 <tcp_receive+0x5e8>)
 800f976:	681b      	ldr	r3, [r3, #0]
 800f978:	1ad3      	subs	r3, r2, r3
 800f97a:	3b01      	subs	r3, #1
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	f2c0 808f 	blt.w	800faa0 <tcp_receive+0x650>
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f986:	4b2b      	ldr	r3, [pc, #172]	@ (800fa34 <tcp_receive+0x5e4>)
 800f988:	881b      	ldrh	r3, [r3, #0]
 800f98a:	4619      	mov	r1, r3
 800f98c:	4b2a      	ldr	r3, [pc, #168]	@ (800fa38 <tcp_receive+0x5e8>)
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	440b      	add	r3, r1
 800f992:	1ad3      	subs	r3, r2, r3
 800f994:	3301      	adds	r3, #1
 800f996:	2b00      	cmp	r3, #0
 800f998:	f300 8082 	bgt.w	800faa0 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800f99c:	4b27      	ldr	r3, [pc, #156]	@ (800fa3c <tcp_receive+0x5ec>)
 800f99e:	685b      	ldr	r3, [r3, #4]
 800f9a0:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f9a6:	4b24      	ldr	r3, [pc, #144]	@ (800fa38 <tcp_receive+0x5e8>)
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	1ad3      	subs	r3, r2, r3
 800f9ac:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800f9ae:	4b23      	ldr	r3, [pc, #140]	@ (800fa3c <tcp_receive+0x5ec>)
 800f9b0:	685b      	ldr	r3, [r3, #4]
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d106      	bne.n	800f9c4 <tcp_receive+0x574>
 800f9b6:	4b22      	ldr	r3, [pc, #136]	@ (800fa40 <tcp_receive+0x5f0>)
 800f9b8:	f240 5294 	movw	r2, #1428	@ 0x594
 800f9bc:	4921      	ldr	r1, [pc, #132]	@ (800fa44 <tcp_receive+0x5f4>)
 800f9be:	4822      	ldr	r0, [pc, #136]	@ (800fa48 <tcp_receive+0x5f8>)
 800f9c0:	f006 f93c 	bl	8015c3c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800f9c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9c6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800f9ca:	4293      	cmp	r3, r2
 800f9cc:	d906      	bls.n	800f9dc <tcp_receive+0x58c>
 800f9ce:	4b1c      	ldr	r3, [pc, #112]	@ (800fa40 <tcp_receive+0x5f0>)
 800f9d0:	f240 5295 	movw	r2, #1429	@ 0x595
 800f9d4:	491d      	ldr	r1, [pc, #116]	@ (800fa4c <tcp_receive+0x5fc>)
 800f9d6:	481c      	ldr	r0, [pc, #112]	@ (800fa48 <tcp_receive+0x5f8>)
 800f9d8:	f006 f930 	bl	8015c3c <iprintf>
      off = (u16_t)off32;
 800f9dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9de:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800f9e2:	4b16      	ldr	r3, [pc, #88]	@ (800fa3c <tcp_receive+0x5ec>)
 800f9e4:	685b      	ldr	r3, [r3, #4]
 800f9e6:	891b      	ldrh	r3, [r3, #8]
 800f9e8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800f9ec:	429a      	cmp	r2, r3
 800f9ee:	d906      	bls.n	800f9fe <tcp_receive+0x5ae>
 800f9f0:	4b13      	ldr	r3, [pc, #76]	@ (800fa40 <tcp_receive+0x5f0>)
 800f9f2:	f240 5297 	movw	r2, #1431	@ 0x597
 800f9f6:	4916      	ldr	r1, [pc, #88]	@ (800fa50 <tcp_receive+0x600>)
 800f9f8:	4813      	ldr	r0, [pc, #76]	@ (800fa48 <tcp_receive+0x5f8>)
 800f9fa:	f006 f91f 	bl	8015c3c <iprintf>
      inseg.len -= off;
 800f9fe:	4b0f      	ldr	r3, [pc, #60]	@ (800fa3c <tcp_receive+0x5ec>)
 800fa00:	891a      	ldrh	r2, [r3, #8]
 800fa02:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800fa06:	1ad3      	subs	r3, r2, r3
 800fa08:	b29a      	uxth	r2, r3
 800fa0a:	4b0c      	ldr	r3, [pc, #48]	@ (800fa3c <tcp_receive+0x5ec>)
 800fa0c:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800fa0e:	4b0b      	ldr	r3, [pc, #44]	@ (800fa3c <tcp_receive+0x5ec>)
 800fa10:	685b      	ldr	r3, [r3, #4]
 800fa12:	891a      	ldrh	r2, [r3, #8]
 800fa14:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800fa18:	1ad3      	subs	r3, r2, r3
 800fa1a:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 800fa1c:	e02a      	b.n	800fa74 <tcp_receive+0x624>
 800fa1e:	bf00      	nop
 800fa20:	0801f778 	.word	0x0801f778
 800fa24:	0801f780 	.word	0x0801f780
 800fa28:	20009284 	.word	0x20009284
 800fa2c:	20009280 	.word	0x20009280
 800fa30:	20009244 	.word	0x20009244
 800fa34:	20009286 	.word	0x20009286
 800fa38:	2000927c 	.word	0x2000927c
 800fa3c:	2000925c 	.word	0x2000925c
 800fa40:	0801f410 	.word	0x0801f410
 800fa44:	0801f788 	.word	0x0801f788
 800fa48:	0801f45c 	.word	0x0801f45c
 800fa4c:	0801f798 	.word	0x0801f798
 800fa50:	0801f7a8 	.word	0x0801f7a8
        off -= p->len;
 800fa54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fa56:	895b      	ldrh	r3, [r3, #10]
 800fa58:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800fa5c:	1ad3      	subs	r3, r2, r3
 800fa5e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800fa62:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fa64:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800fa66:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800fa68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fa6a:	2200      	movs	r2, #0
 800fa6c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800fa6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fa70:	681b      	ldr	r3, [r3, #0]
 800fa72:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 800fa74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fa76:	895b      	ldrh	r3, [r3, #10]
 800fa78:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800fa7c:	429a      	cmp	r2, r3
 800fa7e:	d8e9      	bhi.n	800fa54 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800fa80:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800fa84:	4619      	mov	r1, r3
 800fa86:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800fa88:	f7fc fa10 	bl	800beac <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fa90:	4a90      	ldr	r2, [pc, #576]	@ (800fcd4 <tcp_receive+0x884>)
 800fa92:	6013      	str	r3, [r2, #0]
 800fa94:	4b90      	ldr	r3, [pc, #576]	@ (800fcd8 <tcp_receive+0x888>)
 800fa96:	68db      	ldr	r3, [r3, #12]
 800fa98:	4a8e      	ldr	r2, [pc, #568]	@ (800fcd4 <tcp_receive+0x884>)
 800fa9a:	6812      	ldr	r2, [r2, #0]
 800fa9c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800fa9e:	e00d      	b.n	800fabc <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800faa0:	4b8c      	ldr	r3, [pc, #560]	@ (800fcd4 <tcp_receive+0x884>)
 800faa2:	681a      	ldr	r2, [r3, #0]
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800faa8:	1ad3      	subs	r3, r2, r3
 800faaa:	2b00      	cmp	r3, #0
 800faac:	da06      	bge.n	800fabc <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	8b5b      	ldrh	r3, [r3, #26]
 800fab2:	f043 0302 	orr.w	r3, r3, #2
 800fab6:	b29a      	uxth	r2, r3
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800fabc:	4b85      	ldr	r3, [pc, #532]	@ (800fcd4 <tcp_receive+0x884>)
 800fabe:	681a      	ldr	r2, [r3, #0]
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fac4:	1ad3      	subs	r3, r2, r3
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	f2c0 8427 	blt.w	801031a <tcp_receive+0xeca>
 800facc:	4b81      	ldr	r3, [pc, #516]	@ (800fcd4 <tcp_receive+0x884>)
 800face:	681a      	ldr	r2, [r3, #0]
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fad4:	6879      	ldr	r1, [r7, #4]
 800fad6:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800fad8:	440b      	add	r3, r1
 800fada:	1ad3      	subs	r3, r2, r3
 800fadc:	3301      	adds	r3, #1
 800fade:	2b00      	cmp	r3, #0
 800fae0:	f300 841b 	bgt.w	801031a <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fae8:	4b7a      	ldr	r3, [pc, #488]	@ (800fcd4 <tcp_receive+0x884>)
 800faea:	681b      	ldr	r3, [r3, #0]
 800faec:	429a      	cmp	r2, r3
 800faee:	f040 8298 	bne.w	8010022 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800faf2:	4b79      	ldr	r3, [pc, #484]	@ (800fcd8 <tcp_receive+0x888>)
 800faf4:	891c      	ldrh	r4, [r3, #8]
 800faf6:	4b78      	ldr	r3, [pc, #480]	@ (800fcd8 <tcp_receive+0x888>)
 800faf8:	68db      	ldr	r3, [r3, #12]
 800fafa:	899b      	ldrh	r3, [r3, #12]
 800fafc:	b29b      	uxth	r3, r3
 800fafe:	4618      	mov	r0, r3
 800fb00:	f7fa fc32 	bl	800a368 <lwip_htons>
 800fb04:	4603      	mov	r3, r0
 800fb06:	b2db      	uxtb	r3, r3
 800fb08:	f003 0303 	and.w	r3, r3, #3
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d001      	beq.n	800fb14 <tcp_receive+0x6c4>
 800fb10:	2301      	movs	r3, #1
 800fb12:	e000      	b.n	800fb16 <tcp_receive+0x6c6>
 800fb14:	2300      	movs	r3, #0
 800fb16:	4423      	add	r3, r4
 800fb18:	b29a      	uxth	r2, r3
 800fb1a:	4b70      	ldr	r3, [pc, #448]	@ (800fcdc <tcp_receive+0x88c>)
 800fb1c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800fb22:	4b6e      	ldr	r3, [pc, #440]	@ (800fcdc <tcp_receive+0x88c>)
 800fb24:	881b      	ldrh	r3, [r3, #0]
 800fb26:	429a      	cmp	r2, r3
 800fb28:	d274      	bcs.n	800fc14 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800fb2a:	4b6b      	ldr	r3, [pc, #428]	@ (800fcd8 <tcp_receive+0x888>)
 800fb2c:	68db      	ldr	r3, [r3, #12]
 800fb2e:	899b      	ldrh	r3, [r3, #12]
 800fb30:	b29b      	uxth	r3, r3
 800fb32:	4618      	mov	r0, r3
 800fb34:	f7fa fc18 	bl	800a368 <lwip_htons>
 800fb38:	4603      	mov	r3, r0
 800fb3a:	b2db      	uxtb	r3, r3
 800fb3c:	f003 0301 	and.w	r3, r3, #1
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d01e      	beq.n	800fb82 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800fb44:	4b64      	ldr	r3, [pc, #400]	@ (800fcd8 <tcp_receive+0x888>)
 800fb46:	68db      	ldr	r3, [r3, #12]
 800fb48:	899b      	ldrh	r3, [r3, #12]
 800fb4a:	b29b      	uxth	r3, r3
 800fb4c:	b21b      	sxth	r3, r3
 800fb4e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800fb52:	b21c      	sxth	r4, r3
 800fb54:	4b60      	ldr	r3, [pc, #384]	@ (800fcd8 <tcp_receive+0x888>)
 800fb56:	68db      	ldr	r3, [r3, #12]
 800fb58:	899b      	ldrh	r3, [r3, #12]
 800fb5a:	b29b      	uxth	r3, r3
 800fb5c:	4618      	mov	r0, r3
 800fb5e:	f7fa fc03 	bl	800a368 <lwip_htons>
 800fb62:	4603      	mov	r3, r0
 800fb64:	b2db      	uxtb	r3, r3
 800fb66:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800fb6a:	b29b      	uxth	r3, r3
 800fb6c:	4618      	mov	r0, r3
 800fb6e:	f7fa fbfb 	bl	800a368 <lwip_htons>
 800fb72:	4603      	mov	r3, r0
 800fb74:	b21b      	sxth	r3, r3
 800fb76:	4323      	orrs	r3, r4
 800fb78:	b21a      	sxth	r2, r3
 800fb7a:	4b57      	ldr	r3, [pc, #348]	@ (800fcd8 <tcp_receive+0x888>)
 800fb7c:	68db      	ldr	r3, [r3, #12]
 800fb7e:	b292      	uxth	r2, r2
 800fb80:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800fb86:	4b54      	ldr	r3, [pc, #336]	@ (800fcd8 <tcp_receive+0x888>)
 800fb88:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800fb8a:	4b53      	ldr	r3, [pc, #332]	@ (800fcd8 <tcp_receive+0x888>)
 800fb8c:	68db      	ldr	r3, [r3, #12]
 800fb8e:	899b      	ldrh	r3, [r3, #12]
 800fb90:	b29b      	uxth	r3, r3
 800fb92:	4618      	mov	r0, r3
 800fb94:	f7fa fbe8 	bl	800a368 <lwip_htons>
 800fb98:	4603      	mov	r3, r0
 800fb9a:	b2db      	uxtb	r3, r3
 800fb9c:	f003 0302 	and.w	r3, r3, #2
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d005      	beq.n	800fbb0 <tcp_receive+0x760>
            inseg.len -= 1;
 800fba4:	4b4c      	ldr	r3, [pc, #304]	@ (800fcd8 <tcp_receive+0x888>)
 800fba6:	891b      	ldrh	r3, [r3, #8]
 800fba8:	3b01      	subs	r3, #1
 800fbaa:	b29a      	uxth	r2, r3
 800fbac:	4b4a      	ldr	r3, [pc, #296]	@ (800fcd8 <tcp_receive+0x888>)
 800fbae:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800fbb0:	4b49      	ldr	r3, [pc, #292]	@ (800fcd8 <tcp_receive+0x888>)
 800fbb2:	685b      	ldr	r3, [r3, #4]
 800fbb4:	4a48      	ldr	r2, [pc, #288]	@ (800fcd8 <tcp_receive+0x888>)
 800fbb6:	8912      	ldrh	r2, [r2, #8]
 800fbb8:	4611      	mov	r1, r2
 800fbba:	4618      	mov	r0, r3
 800fbbc:	f7fc f876 	bl	800bcac <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800fbc0:	4b45      	ldr	r3, [pc, #276]	@ (800fcd8 <tcp_receive+0x888>)
 800fbc2:	891c      	ldrh	r4, [r3, #8]
 800fbc4:	4b44      	ldr	r3, [pc, #272]	@ (800fcd8 <tcp_receive+0x888>)
 800fbc6:	68db      	ldr	r3, [r3, #12]
 800fbc8:	899b      	ldrh	r3, [r3, #12]
 800fbca:	b29b      	uxth	r3, r3
 800fbcc:	4618      	mov	r0, r3
 800fbce:	f7fa fbcb 	bl	800a368 <lwip_htons>
 800fbd2:	4603      	mov	r3, r0
 800fbd4:	b2db      	uxtb	r3, r3
 800fbd6:	f003 0303 	and.w	r3, r3, #3
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d001      	beq.n	800fbe2 <tcp_receive+0x792>
 800fbde:	2301      	movs	r3, #1
 800fbe0:	e000      	b.n	800fbe4 <tcp_receive+0x794>
 800fbe2:	2300      	movs	r3, #0
 800fbe4:	4423      	add	r3, r4
 800fbe6:	b29a      	uxth	r2, r3
 800fbe8:	4b3c      	ldr	r3, [pc, #240]	@ (800fcdc <tcp_receive+0x88c>)
 800fbea:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800fbec:	4b3b      	ldr	r3, [pc, #236]	@ (800fcdc <tcp_receive+0x88c>)
 800fbee:	881b      	ldrh	r3, [r3, #0]
 800fbf0:	461a      	mov	r2, r3
 800fbf2:	4b38      	ldr	r3, [pc, #224]	@ (800fcd4 <tcp_receive+0x884>)
 800fbf4:	681b      	ldr	r3, [r3, #0]
 800fbf6:	441a      	add	r2, r3
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fbfc:	6879      	ldr	r1, [r7, #4]
 800fbfe:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800fc00:	440b      	add	r3, r1
 800fc02:	429a      	cmp	r2, r3
 800fc04:	d006      	beq.n	800fc14 <tcp_receive+0x7c4>
 800fc06:	4b36      	ldr	r3, [pc, #216]	@ (800fce0 <tcp_receive+0x890>)
 800fc08:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 800fc0c:	4935      	ldr	r1, [pc, #212]	@ (800fce4 <tcp_receive+0x894>)
 800fc0e:	4836      	ldr	r0, [pc, #216]	@ (800fce8 <tcp_receive+0x898>)
 800fc10:	f006 f814 	bl	8015c3c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	f000 80e6 	beq.w	800fdea <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800fc1e:	4b2e      	ldr	r3, [pc, #184]	@ (800fcd8 <tcp_receive+0x888>)
 800fc20:	68db      	ldr	r3, [r3, #12]
 800fc22:	899b      	ldrh	r3, [r3, #12]
 800fc24:	b29b      	uxth	r3, r3
 800fc26:	4618      	mov	r0, r3
 800fc28:	f7fa fb9e 	bl	800a368 <lwip_htons>
 800fc2c:	4603      	mov	r3, r0
 800fc2e:	b2db      	uxtb	r3, r3
 800fc30:	f003 0301 	and.w	r3, r3, #1
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	d010      	beq.n	800fc5a <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800fc38:	e00a      	b.n	800fc50 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fc3e:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fc44:	681a      	ldr	r2, [r3, #0]
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 800fc4a:	68f8      	ldr	r0, [r7, #12]
 800fc4c:	f7fd fd93 	bl	800d776 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	d1f0      	bne.n	800fc3a <tcp_receive+0x7ea>
 800fc58:	e0c7      	b.n	800fdea <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fc5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800fc60:	e051      	b.n	800fd06 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800fc62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fc64:	68db      	ldr	r3, [r3, #12]
 800fc66:	899b      	ldrh	r3, [r3, #12]
 800fc68:	b29b      	uxth	r3, r3
 800fc6a:	4618      	mov	r0, r3
 800fc6c:	f7fa fb7c 	bl	800a368 <lwip_htons>
 800fc70:	4603      	mov	r3, r0
 800fc72:	b2db      	uxtb	r3, r3
 800fc74:	f003 0301 	and.w	r3, r3, #1
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	d03c      	beq.n	800fcf6 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800fc7c:	4b16      	ldr	r3, [pc, #88]	@ (800fcd8 <tcp_receive+0x888>)
 800fc7e:	68db      	ldr	r3, [r3, #12]
 800fc80:	899b      	ldrh	r3, [r3, #12]
 800fc82:	b29b      	uxth	r3, r3
 800fc84:	4618      	mov	r0, r3
 800fc86:	f7fa fb6f 	bl	800a368 <lwip_htons>
 800fc8a:	4603      	mov	r3, r0
 800fc8c:	b2db      	uxtb	r3, r3
 800fc8e:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	d12f      	bne.n	800fcf6 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800fc96:	4b10      	ldr	r3, [pc, #64]	@ (800fcd8 <tcp_receive+0x888>)
 800fc98:	68db      	ldr	r3, [r3, #12]
 800fc9a:	899b      	ldrh	r3, [r3, #12]
 800fc9c:	b29c      	uxth	r4, r3
 800fc9e:	2001      	movs	r0, #1
 800fca0:	f7fa fb62 	bl	800a368 <lwip_htons>
 800fca4:	4603      	mov	r3, r0
 800fca6:	461a      	mov	r2, r3
 800fca8:	4b0b      	ldr	r3, [pc, #44]	@ (800fcd8 <tcp_receive+0x888>)
 800fcaa:	68db      	ldr	r3, [r3, #12]
 800fcac:	4322      	orrs	r2, r4
 800fcae:	b292      	uxth	r2, r2
 800fcb0:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800fcb2:	4b09      	ldr	r3, [pc, #36]	@ (800fcd8 <tcp_receive+0x888>)
 800fcb4:	891c      	ldrh	r4, [r3, #8]
 800fcb6:	4b08      	ldr	r3, [pc, #32]	@ (800fcd8 <tcp_receive+0x888>)
 800fcb8:	68db      	ldr	r3, [r3, #12]
 800fcba:	899b      	ldrh	r3, [r3, #12]
 800fcbc:	b29b      	uxth	r3, r3
 800fcbe:	4618      	mov	r0, r3
 800fcc0:	f7fa fb52 	bl	800a368 <lwip_htons>
 800fcc4:	4603      	mov	r3, r0
 800fcc6:	b2db      	uxtb	r3, r3
 800fcc8:	f003 0303 	and.w	r3, r3, #3
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	d00d      	beq.n	800fcec <tcp_receive+0x89c>
 800fcd0:	2301      	movs	r3, #1
 800fcd2:	e00c      	b.n	800fcee <tcp_receive+0x89e>
 800fcd4:	2000927c 	.word	0x2000927c
 800fcd8:	2000925c 	.word	0x2000925c
 800fcdc:	20009286 	.word	0x20009286
 800fce0:	0801f410 	.word	0x0801f410
 800fce4:	0801f7b8 	.word	0x0801f7b8
 800fce8:	0801f45c 	.word	0x0801f45c
 800fcec:	2300      	movs	r3, #0
 800fcee:	4423      	add	r3, r4
 800fcf0:	b29a      	uxth	r2, r3
 800fcf2:	4b98      	ldr	r3, [pc, #608]	@ (800ff54 <tcp_receive+0xb04>)
 800fcf4:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800fcf6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fcf8:	613b      	str	r3, [r7, #16]
              next = next->next;
 800fcfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fcfc:	681b      	ldr	r3, [r3, #0]
 800fcfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 800fd00:	6938      	ldr	r0, [r7, #16]
 800fd02:	f7fd fd38 	bl	800d776 <tcp_seg_free>
            while (next &&
 800fd06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d00e      	beq.n	800fd2a <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800fd0c:	4b91      	ldr	r3, [pc, #580]	@ (800ff54 <tcp_receive+0xb04>)
 800fd0e:	881b      	ldrh	r3, [r3, #0]
 800fd10:	461a      	mov	r2, r3
 800fd12:	4b91      	ldr	r3, [pc, #580]	@ (800ff58 <tcp_receive+0xb08>)
 800fd14:	681b      	ldr	r3, [r3, #0]
 800fd16:	441a      	add	r2, r3
 800fd18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fd1a:	68db      	ldr	r3, [r3, #12]
 800fd1c:	685b      	ldr	r3, [r3, #4]
 800fd1e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800fd20:	8909      	ldrh	r1, [r1, #8]
 800fd22:	440b      	add	r3, r1
 800fd24:	1ad3      	subs	r3, r2, r3
            while (next &&
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	da9b      	bge.n	800fc62 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800fd2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d059      	beq.n	800fde4 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800fd30:	4b88      	ldr	r3, [pc, #544]	@ (800ff54 <tcp_receive+0xb04>)
 800fd32:	881b      	ldrh	r3, [r3, #0]
 800fd34:	461a      	mov	r2, r3
 800fd36:	4b88      	ldr	r3, [pc, #544]	@ (800ff58 <tcp_receive+0xb08>)
 800fd38:	681b      	ldr	r3, [r3, #0]
 800fd3a:	441a      	add	r2, r3
 800fd3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fd3e:	68db      	ldr	r3, [r3, #12]
 800fd40:	685b      	ldr	r3, [r3, #4]
 800fd42:	1ad3      	subs	r3, r2, r3
            if (next &&
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	dd4d      	ble.n	800fde4 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800fd48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fd4a:	68db      	ldr	r3, [r3, #12]
 800fd4c:	685b      	ldr	r3, [r3, #4]
 800fd4e:	b29a      	uxth	r2, r3
 800fd50:	4b81      	ldr	r3, [pc, #516]	@ (800ff58 <tcp_receive+0xb08>)
 800fd52:	681b      	ldr	r3, [r3, #0]
 800fd54:	b29b      	uxth	r3, r3
 800fd56:	1ad3      	subs	r3, r2, r3
 800fd58:	b29a      	uxth	r2, r3
 800fd5a:	4b80      	ldr	r3, [pc, #512]	@ (800ff5c <tcp_receive+0xb0c>)
 800fd5c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800fd5e:	4b7f      	ldr	r3, [pc, #508]	@ (800ff5c <tcp_receive+0xb0c>)
 800fd60:	68db      	ldr	r3, [r3, #12]
 800fd62:	899b      	ldrh	r3, [r3, #12]
 800fd64:	b29b      	uxth	r3, r3
 800fd66:	4618      	mov	r0, r3
 800fd68:	f7fa fafe 	bl	800a368 <lwip_htons>
 800fd6c:	4603      	mov	r3, r0
 800fd6e:	b2db      	uxtb	r3, r3
 800fd70:	f003 0302 	and.w	r3, r3, #2
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d005      	beq.n	800fd84 <tcp_receive+0x934>
                inseg.len -= 1;
 800fd78:	4b78      	ldr	r3, [pc, #480]	@ (800ff5c <tcp_receive+0xb0c>)
 800fd7a:	891b      	ldrh	r3, [r3, #8]
 800fd7c:	3b01      	subs	r3, #1
 800fd7e:	b29a      	uxth	r2, r3
 800fd80:	4b76      	ldr	r3, [pc, #472]	@ (800ff5c <tcp_receive+0xb0c>)
 800fd82:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800fd84:	4b75      	ldr	r3, [pc, #468]	@ (800ff5c <tcp_receive+0xb0c>)
 800fd86:	685b      	ldr	r3, [r3, #4]
 800fd88:	4a74      	ldr	r2, [pc, #464]	@ (800ff5c <tcp_receive+0xb0c>)
 800fd8a:	8912      	ldrh	r2, [r2, #8]
 800fd8c:	4611      	mov	r1, r2
 800fd8e:	4618      	mov	r0, r3
 800fd90:	f7fb ff8c 	bl	800bcac <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800fd94:	4b71      	ldr	r3, [pc, #452]	@ (800ff5c <tcp_receive+0xb0c>)
 800fd96:	891c      	ldrh	r4, [r3, #8]
 800fd98:	4b70      	ldr	r3, [pc, #448]	@ (800ff5c <tcp_receive+0xb0c>)
 800fd9a:	68db      	ldr	r3, [r3, #12]
 800fd9c:	899b      	ldrh	r3, [r3, #12]
 800fd9e:	b29b      	uxth	r3, r3
 800fda0:	4618      	mov	r0, r3
 800fda2:	f7fa fae1 	bl	800a368 <lwip_htons>
 800fda6:	4603      	mov	r3, r0
 800fda8:	b2db      	uxtb	r3, r3
 800fdaa:	f003 0303 	and.w	r3, r3, #3
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d001      	beq.n	800fdb6 <tcp_receive+0x966>
 800fdb2:	2301      	movs	r3, #1
 800fdb4:	e000      	b.n	800fdb8 <tcp_receive+0x968>
 800fdb6:	2300      	movs	r3, #0
 800fdb8:	4423      	add	r3, r4
 800fdba:	b29a      	uxth	r2, r3
 800fdbc:	4b65      	ldr	r3, [pc, #404]	@ (800ff54 <tcp_receive+0xb04>)
 800fdbe:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800fdc0:	4b64      	ldr	r3, [pc, #400]	@ (800ff54 <tcp_receive+0xb04>)
 800fdc2:	881b      	ldrh	r3, [r3, #0]
 800fdc4:	461a      	mov	r2, r3
 800fdc6:	4b64      	ldr	r3, [pc, #400]	@ (800ff58 <tcp_receive+0xb08>)
 800fdc8:	681b      	ldr	r3, [r3, #0]
 800fdca:	441a      	add	r2, r3
 800fdcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fdce:	68db      	ldr	r3, [r3, #12]
 800fdd0:	685b      	ldr	r3, [r3, #4]
 800fdd2:	429a      	cmp	r2, r3
 800fdd4:	d006      	beq.n	800fde4 <tcp_receive+0x994>
 800fdd6:	4b62      	ldr	r3, [pc, #392]	@ (800ff60 <tcp_receive+0xb10>)
 800fdd8:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 800fddc:	4961      	ldr	r1, [pc, #388]	@ (800ff64 <tcp_receive+0xb14>)
 800fdde:	4862      	ldr	r0, [pc, #392]	@ (800ff68 <tcp_receive+0xb18>)
 800fde0:	f005 ff2c 	bl	8015c3c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800fde8:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800fdea:	4b5a      	ldr	r3, [pc, #360]	@ (800ff54 <tcp_receive+0xb04>)
 800fdec:	881b      	ldrh	r3, [r3, #0]
 800fdee:	461a      	mov	r2, r3
 800fdf0:	4b59      	ldr	r3, [pc, #356]	@ (800ff58 <tcp_receive+0xb08>)
 800fdf2:	681b      	ldr	r3, [r3, #0]
 800fdf4:	441a      	add	r2, r3
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800fdfe:	4b55      	ldr	r3, [pc, #340]	@ (800ff54 <tcp_receive+0xb04>)
 800fe00:	881b      	ldrh	r3, [r3, #0]
 800fe02:	429a      	cmp	r2, r3
 800fe04:	d206      	bcs.n	800fe14 <tcp_receive+0x9c4>
 800fe06:	4b56      	ldr	r3, [pc, #344]	@ (800ff60 <tcp_receive+0xb10>)
 800fe08:	f240 6207 	movw	r2, #1543	@ 0x607
 800fe0c:	4957      	ldr	r1, [pc, #348]	@ (800ff6c <tcp_receive+0xb1c>)
 800fe0e:	4856      	ldr	r0, [pc, #344]	@ (800ff68 <tcp_receive+0xb18>)
 800fe10:	f005 ff14 	bl	8015c3c <iprintf>
        pcb->rcv_wnd -= tcplen;
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800fe18:	4b4e      	ldr	r3, [pc, #312]	@ (800ff54 <tcp_receive+0xb04>)
 800fe1a:	881b      	ldrh	r3, [r3, #0]
 800fe1c:	1ad3      	subs	r3, r2, r3
 800fe1e:	b29a      	uxth	r2, r3
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800fe24:	6878      	ldr	r0, [r7, #4]
 800fe26:	f7fc ffc5 	bl	800cdb4 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800fe2a:	4b4c      	ldr	r3, [pc, #304]	@ (800ff5c <tcp_receive+0xb0c>)
 800fe2c:	685b      	ldr	r3, [r3, #4]
 800fe2e:	891b      	ldrh	r3, [r3, #8]
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	d006      	beq.n	800fe42 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800fe34:	4b49      	ldr	r3, [pc, #292]	@ (800ff5c <tcp_receive+0xb0c>)
 800fe36:	685b      	ldr	r3, [r3, #4]
 800fe38:	4a4d      	ldr	r2, [pc, #308]	@ (800ff70 <tcp_receive+0xb20>)
 800fe3a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800fe3c:	4b47      	ldr	r3, [pc, #284]	@ (800ff5c <tcp_receive+0xb0c>)
 800fe3e:	2200      	movs	r2, #0
 800fe40:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800fe42:	4b46      	ldr	r3, [pc, #280]	@ (800ff5c <tcp_receive+0xb0c>)
 800fe44:	68db      	ldr	r3, [r3, #12]
 800fe46:	899b      	ldrh	r3, [r3, #12]
 800fe48:	b29b      	uxth	r3, r3
 800fe4a:	4618      	mov	r0, r3
 800fe4c:	f7fa fa8c 	bl	800a368 <lwip_htons>
 800fe50:	4603      	mov	r3, r0
 800fe52:	b2db      	uxtb	r3, r3
 800fe54:	f003 0301 	and.w	r3, r3, #1
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	f000 80b8 	beq.w	800ffce <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800fe5e:	4b45      	ldr	r3, [pc, #276]	@ (800ff74 <tcp_receive+0xb24>)
 800fe60:	781b      	ldrb	r3, [r3, #0]
 800fe62:	f043 0320 	orr.w	r3, r3, #32
 800fe66:	b2da      	uxtb	r2, r3
 800fe68:	4b42      	ldr	r3, [pc, #264]	@ (800ff74 <tcp_receive+0xb24>)
 800fe6a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800fe6c:	e0af      	b.n	800ffce <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fe72:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fe78:	68db      	ldr	r3, [r3, #12]
 800fe7a:	685b      	ldr	r3, [r3, #4]
 800fe7c:	4a36      	ldr	r2, [pc, #216]	@ (800ff58 <tcp_receive+0xb08>)
 800fe7e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800fe80:	68bb      	ldr	r3, [r7, #8]
 800fe82:	891b      	ldrh	r3, [r3, #8]
 800fe84:	461c      	mov	r4, r3
 800fe86:	68bb      	ldr	r3, [r7, #8]
 800fe88:	68db      	ldr	r3, [r3, #12]
 800fe8a:	899b      	ldrh	r3, [r3, #12]
 800fe8c:	b29b      	uxth	r3, r3
 800fe8e:	4618      	mov	r0, r3
 800fe90:	f7fa fa6a 	bl	800a368 <lwip_htons>
 800fe94:	4603      	mov	r3, r0
 800fe96:	b2db      	uxtb	r3, r3
 800fe98:	f003 0303 	and.w	r3, r3, #3
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d001      	beq.n	800fea4 <tcp_receive+0xa54>
 800fea0:	2301      	movs	r3, #1
 800fea2:	e000      	b.n	800fea6 <tcp_receive+0xa56>
 800fea4:	2300      	movs	r3, #0
 800fea6:	191a      	adds	r2, r3, r4
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800feac:	441a      	add	r2, r3
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800feb6:	461c      	mov	r4, r3
 800feb8:	68bb      	ldr	r3, [r7, #8]
 800feba:	891b      	ldrh	r3, [r3, #8]
 800febc:	461d      	mov	r5, r3
 800febe:	68bb      	ldr	r3, [r7, #8]
 800fec0:	68db      	ldr	r3, [r3, #12]
 800fec2:	899b      	ldrh	r3, [r3, #12]
 800fec4:	b29b      	uxth	r3, r3
 800fec6:	4618      	mov	r0, r3
 800fec8:	f7fa fa4e 	bl	800a368 <lwip_htons>
 800fecc:	4603      	mov	r3, r0
 800fece:	b2db      	uxtb	r3, r3
 800fed0:	f003 0303 	and.w	r3, r3, #3
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d001      	beq.n	800fedc <tcp_receive+0xa8c>
 800fed8:	2301      	movs	r3, #1
 800feda:	e000      	b.n	800fede <tcp_receive+0xa8e>
 800fedc:	2300      	movs	r3, #0
 800fede:	442b      	add	r3, r5
 800fee0:	429c      	cmp	r4, r3
 800fee2:	d206      	bcs.n	800fef2 <tcp_receive+0xaa2>
 800fee4:	4b1e      	ldr	r3, [pc, #120]	@ (800ff60 <tcp_receive+0xb10>)
 800fee6:	f240 622b 	movw	r2, #1579	@ 0x62b
 800feea:	4923      	ldr	r1, [pc, #140]	@ (800ff78 <tcp_receive+0xb28>)
 800feec:	481e      	ldr	r0, [pc, #120]	@ (800ff68 <tcp_receive+0xb18>)
 800feee:	f005 fea5 	bl	8015c3c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800fef2:	68bb      	ldr	r3, [r7, #8]
 800fef4:	891b      	ldrh	r3, [r3, #8]
 800fef6:	461c      	mov	r4, r3
 800fef8:	68bb      	ldr	r3, [r7, #8]
 800fefa:	68db      	ldr	r3, [r3, #12]
 800fefc:	899b      	ldrh	r3, [r3, #12]
 800fefe:	b29b      	uxth	r3, r3
 800ff00:	4618      	mov	r0, r3
 800ff02:	f7fa fa31 	bl	800a368 <lwip_htons>
 800ff06:	4603      	mov	r3, r0
 800ff08:	b2db      	uxtb	r3, r3
 800ff0a:	f003 0303 	and.w	r3, r3, #3
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	d001      	beq.n	800ff16 <tcp_receive+0xac6>
 800ff12:	2301      	movs	r3, #1
 800ff14:	e000      	b.n	800ff18 <tcp_receive+0xac8>
 800ff16:	2300      	movs	r3, #0
 800ff18:	1919      	adds	r1, r3, r4
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800ff1e:	b28b      	uxth	r3, r1
 800ff20:	1ad3      	subs	r3, r2, r3
 800ff22:	b29a      	uxth	r2, r3
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800ff28:	6878      	ldr	r0, [r7, #4]
 800ff2a:	f7fc ff43 	bl	800cdb4 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800ff2e:	68bb      	ldr	r3, [r7, #8]
 800ff30:	685b      	ldr	r3, [r3, #4]
 800ff32:	891b      	ldrh	r3, [r3, #8]
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	d028      	beq.n	800ff8a <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800ff38:	4b0d      	ldr	r3, [pc, #52]	@ (800ff70 <tcp_receive+0xb20>)
 800ff3a:	681b      	ldr	r3, [r3, #0]
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d01d      	beq.n	800ff7c <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800ff40:	4b0b      	ldr	r3, [pc, #44]	@ (800ff70 <tcp_receive+0xb20>)
 800ff42:	681a      	ldr	r2, [r3, #0]
 800ff44:	68bb      	ldr	r3, [r7, #8]
 800ff46:	685b      	ldr	r3, [r3, #4]
 800ff48:	4619      	mov	r1, r3
 800ff4a:	4610      	mov	r0, r2
 800ff4c:	f7fc f8f6 	bl	800c13c <pbuf_cat>
 800ff50:	e018      	b.n	800ff84 <tcp_receive+0xb34>
 800ff52:	bf00      	nop
 800ff54:	20009286 	.word	0x20009286
 800ff58:	2000927c 	.word	0x2000927c
 800ff5c:	2000925c 	.word	0x2000925c
 800ff60:	0801f410 	.word	0x0801f410
 800ff64:	0801f7f0 	.word	0x0801f7f0
 800ff68:	0801f45c 	.word	0x0801f45c
 800ff6c:	0801f82c 	.word	0x0801f82c
 800ff70:	2000928c 	.word	0x2000928c
 800ff74:	20009289 	.word	0x20009289
 800ff78:	0801f84c 	.word	0x0801f84c
            } else {
              recv_data = cseg->p;
 800ff7c:	68bb      	ldr	r3, [r7, #8]
 800ff7e:	685b      	ldr	r3, [r3, #4]
 800ff80:	4a70      	ldr	r2, [pc, #448]	@ (8010144 <tcp_receive+0xcf4>)
 800ff82:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800ff84:	68bb      	ldr	r3, [r7, #8]
 800ff86:	2200      	movs	r2, #0
 800ff88:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800ff8a:	68bb      	ldr	r3, [r7, #8]
 800ff8c:	68db      	ldr	r3, [r3, #12]
 800ff8e:	899b      	ldrh	r3, [r3, #12]
 800ff90:	b29b      	uxth	r3, r3
 800ff92:	4618      	mov	r0, r3
 800ff94:	f7fa f9e8 	bl	800a368 <lwip_htons>
 800ff98:	4603      	mov	r3, r0
 800ff9a:	b2db      	uxtb	r3, r3
 800ff9c:	f003 0301 	and.w	r3, r3, #1
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	d00d      	beq.n	800ffc0 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800ffa4:	4b68      	ldr	r3, [pc, #416]	@ (8010148 <tcp_receive+0xcf8>)
 800ffa6:	781b      	ldrb	r3, [r3, #0]
 800ffa8:	f043 0320 	orr.w	r3, r3, #32
 800ffac:	b2da      	uxtb	r2, r3
 800ffae:	4b66      	ldr	r3, [pc, #408]	@ (8010148 <tcp_receive+0xcf8>)
 800ffb0:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	7d1b      	ldrb	r3, [r3, #20]
 800ffb6:	2b04      	cmp	r3, #4
 800ffb8:	d102      	bne.n	800ffc0 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	2207      	movs	r2, #7
 800ffbe:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800ffc0:	68bb      	ldr	r3, [r7, #8]
 800ffc2:	681a      	ldr	r2, [r3, #0]
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 800ffc8:	68b8      	ldr	r0, [r7, #8]
 800ffca:	f7fd fbd4 	bl	800d776 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	d008      	beq.n	800ffe8 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ffda:	68db      	ldr	r3, [r3, #12]
 800ffdc:	685a      	ldr	r2, [r3, #4]
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 800ffe2:	429a      	cmp	r2, r3
 800ffe4:	f43f af43 	beq.w	800fe6e <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	8b5b      	ldrh	r3, [r3, #26]
 800ffec:	f003 0301 	and.w	r3, r3, #1
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d00e      	beq.n	8010012 <tcp_receive+0xbc2>
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	8b5b      	ldrh	r3, [r3, #26]
 800fff8:	f023 0301 	bic.w	r3, r3, #1
 800fffc:	b29a      	uxth	r2, r3
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	835a      	strh	r2, [r3, #26]
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	8b5b      	ldrh	r3, [r3, #26]
 8010006:	f043 0302 	orr.w	r3, r3, #2
 801000a:	b29a      	uxth	r2, r3
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8010010:	e187      	b.n	8010322 <tcp_receive+0xed2>
        tcp_ack(pcb);
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	8b5b      	ldrh	r3, [r3, #26]
 8010016:	f043 0301 	orr.w	r3, r3, #1
 801001a:	b29a      	uxth	r2, r3
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8010020:	e17f      	b.n	8010322 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010026:	2b00      	cmp	r3, #0
 8010028:	d106      	bne.n	8010038 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801002a:	4848      	ldr	r0, [pc, #288]	@ (801014c <tcp_receive+0xcfc>)
 801002c:	f7fd fbbc 	bl	800d7a8 <tcp_seg_copy>
 8010030:	4602      	mov	r2, r0
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	675a      	str	r2, [r3, #116]	@ 0x74
 8010036:	e16c      	b.n	8010312 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8010038:	2300      	movs	r3, #0
 801003a:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010040:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010042:	e156      	b.n	80102f2 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 8010044:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010046:	68db      	ldr	r3, [r3, #12]
 8010048:	685a      	ldr	r2, [r3, #4]
 801004a:	4b41      	ldr	r3, [pc, #260]	@ (8010150 <tcp_receive+0xd00>)
 801004c:	681b      	ldr	r3, [r3, #0]
 801004e:	429a      	cmp	r2, r3
 8010050:	d11d      	bne.n	801008e <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8010052:	4b3e      	ldr	r3, [pc, #248]	@ (801014c <tcp_receive+0xcfc>)
 8010054:	891a      	ldrh	r2, [r3, #8]
 8010056:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010058:	891b      	ldrh	r3, [r3, #8]
 801005a:	429a      	cmp	r2, r3
 801005c:	f240 814e 	bls.w	80102fc <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010060:	483a      	ldr	r0, [pc, #232]	@ (801014c <tcp_receive+0xcfc>)
 8010062:	f7fd fba1 	bl	800d7a8 <tcp_seg_copy>
 8010066:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8010068:	697b      	ldr	r3, [r7, #20]
 801006a:	2b00      	cmp	r3, #0
 801006c:	f000 8148 	beq.w	8010300 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 8010070:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010072:	2b00      	cmp	r3, #0
 8010074:	d003      	beq.n	801007e <tcp_receive+0xc2e>
                    prev->next = cseg;
 8010076:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010078:	697a      	ldr	r2, [r7, #20]
 801007a:	601a      	str	r2, [r3, #0]
 801007c:	e002      	b.n	8010084 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	697a      	ldr	r2, [r7, #20]
 8010082:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8010084:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8010086:	6978      	ldr	r0, [r7, #20]
 8010088:	f7ff f8de 	bl	800f248 <tcp_oos_insert_segment>
                }
                break;
 801008c:	e138      	b.n	8010300 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801008e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010090:	2b00      	cmp	r3, #0
 8010092:	d117      	bne.n	80100c4 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8010094:	4b2e      	ldr	r3, [pc, #184]	@ (8010150 <tcp_receive+0xd00>)
 8010096:	681a      	ldr	r2, [r3, #0]
 8010098:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801009a:	68db      	ldr	r3, [r3, #12]
 801009c:	685b      	ldr	r3, [r3, #4]
 801009e:	1ad3      	subs	r3, r2, r3
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	da57      	bge.n	8010154 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80100a4:	4829      	ldr	r0, [pc, #164]	@ (801014c <tcp_receive+0xcfc>)
 80100a6:	f7fd fb7f 	bl	800d7a8 <tcp_seg_copy>
 80100aa:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80100ac:	69bb      	ldr	r3, [r7, #24]
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	f000 8128 	beq.w	8010304 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	69ba      	ldr	r2, [r7, #24]
 80100b8:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 80100ba:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80100bc:	69b8      	ldr	r0, [r7, #24]
 80100be:	f7ff f8c3 	bl	800f248 <tcp_oos_insert_segment>
                  }
                  break;
 80100c2:	e11f      	b.n	8010304 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80100c4:	4b22      	ldr	r3, [pc, #136]	@ (8010150 <tcp_receive+0xd00>)
 80100c6:	681a      	ldr	r2, [r3, #0]
 80100c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80100ca:	68db      	ldr	r3, [r3, #12]
 80100cc:	685b      	ldr	r3, [r3, #4]
 80100ce:	1ad3      	subs	r3, r2, r3
 80100d0:	3b01      	subs	r3, #1
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	db3e      	blt.n	8010154 <tcp_receive+0xd04>
 80100d6:	4b1e      	ldr	r3, [pc, #120]	@ (8010150 <tcp_receive+0xd00>)
 80100d8:	681a      	ldr	r2, [r3, #0]
 80100da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80100dc:	68db      	ldr	r3, [r3, #12]
 80100de:	685b      	ldr	r3, [r3, #4]
 80100e0:	1ad3      	subs	r3, r2, r3
 80100e2:	3301      	adds	r3, #1
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	dc35      	bgt.n	8010154 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80100e8:	4818      	ldr	r0, [pc, #96]	@ (801014c <tcp_receive+0xcfc>)
 80100ea:	f7fd fb5d 	bl	800d7a8 <tcp_seg_copy>
 80100ee:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80100f0:	69fb      	ldr	r3, [r7, #28]
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	f000 8108 	beq.w	8010308 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80100f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80100fa:	68db      	ldr	r3, [r3, #12]
 80100fc:	685b      	ldr	r3, [r3, #4]
 80100fe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010100:	8912      	ldrh	r2, [r2, #8]
 8010102:	441a      	add	r2, r3
 8010104:	4b12      	ldr	r3, [pc, #72]	@ (8010150 <tcp_receive+0xd00>)
 8010106:	681b      	ldr	r3, [r3, #0]
 8010108:	1ad3      	subs	r3, r2, r3
 801010a:	2b00      	cmp	r3, #0
 801010c:	dd12      	ble.n	8010134 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801010e:	4b10      	ldr	r3, [pc, #64]	@ (8010150 <tcp_receive+0xd00>)
 8010110:	681b      	ldr	r3, [r3, #0]
 8010112:	b29a      	uxth	r2, r3
 8010114:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010116:	68db      	ldr	r3, [r3, #12]
 8010118:	685b      	ldr	r3, [r3, #4]
 801011a:	b29b      	uxth	r3, r3
 801011c:	1ad3      	subs	r3, r2, r3
 801011e:	b29a      	uxth	r2, r3
 8010120:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010122:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8010124:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010126:	685a      	ldr	r2, [r3, #4]
 8010128:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801012a:	891b      	ldrh	r3, [r3, #8]
 801012c:	4619      	mov	r1, r3
 801012e:	4610      	mov	r0, r2
 8010130:	f7fb fdbc 	bl	800bcac <pbuf_realloc>
                    }
                    prev->next = cseg;
 8010134:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010136:	69fa      	ldr	r2, [r7, #28]
 8010138:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801013a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801013c:	69f8      	ldr	r0, [r7, #28]
 801013e:	f7ff f883 	bl	800f248 <tcp_oos_insert_segment>
                  }
                  break;
 8010142:	e0e1      	b.n	8010308 <tcp_receive+0xeb8>
 8010144:	2000928c 	.word	0x2000928c
 8010148:	20009289 	.word	0x20009289
 801014c:	2000925c 	.word	0x2000925c
 8010150:	2000927c 	.word	0x2000927c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8010154:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010156:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8010158:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	2b00      	cmp	r3, #0
 801015e:	f040 80c5 	bne.w	80102ec <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8010162:	4b7f      	ldr	r3, [pc, #508]	@ (8010360 <tcp_receive+0xf10>)
 8010164:	681a      	ldr	r2, [r3, #0]
 8010166:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010168:	68db      	ldr	r3, [r3, #12]
 801016a:	685b      	ldr	r3, [r3, #4]
 801016c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801016e:	2b00      	cmp	r3, #0
 8010170:	f340 80bc 	ble.w	80102ec <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8010174:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010176:	68db      	ldr	r3, [r3, #12]
 8010178:	899b      	ldrh	r3, [r3, #12]
 801017a:	b29b      	uxth	r3, r3
 801017c:	4618      	mov	r0, r3
 801017e:	f7fa f8f3 	bl	800a368 <lwip_htons>
 8010182:	4603      	mov	r3, r0
 8010184:	b2db      	uxtb	r3, r3
 8010186:	f003 0301 	and.w	r3, r3, #1
 801018a:	2b00      	cmp	r3, #0
 801018c:	f040 80be 	bne.w	801030c <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8010190:	4874      	ldr	r0, [pc, #464]	@ (8010364 <tcp_receive+0xf14>)
 8010192:	f7fd fb09 	bl	800d7a8 <tcp_seg_copy>
 8010196:	4602      	mov	r2, r0
 8010198:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801019a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801019c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801019e:	681b      	ldr	r3, [r3, #0]
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	f000 80b5 	beq.w	8010310 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80101a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80101a8:	68db      	ldr	r3, [r3, #12]
 80101aa:	685b      	ldr	r3, [r3, #4]
 80101ac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80101ae:	8912      	ldrh	r2, [r2, #8]
 80101b0:	441a      	add	r2, r3
 80101b2:	4b6b      	ldr	r3, [pc, #428]	@ (8010360 <tcp_receive+0xf10>)
 80101b4:	681b      	ldr	r3, [r3, #0]
 80101b6:	1ad3      	subs	r3, r2, r3
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	dd12      	ble.n	80101e2 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80101bc:	4b68      	ldr	r3, [pc, #416]	@ (8010360 <tcp_receive+0xf10>)
 80101be:	681b      	ldr	r3, [r3, #0]
 80101c0:	b29a      	uxth	r2, r3
 80101c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80101c4:	68db      	ldr	r3, [r3, #12]
 80101c6:	685b      	ldr	r3, [r3, #4]
 80101c8:	b29b      	uxth	r3, r3
 80101ca:	1ad3      	subs	r3, r2, r3
 80101cc:	b29a      	uxth	r2, r3
 80101ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80101d0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80101d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80101d4:	685a      	ldr	r2, [r3, #4]
 80101d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80101d8:	891b      	ldrh	r3, [r3, #8]
 80101da:	4619      	mov	r1, r3
 80101dc:	4610      	mov	r0, r2
 80101de:	f7fb fd65 	bl	800bcac <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80101e2:	4b61      	ldr	r3, [pc, #388]	@ (8010368 <tcp_receive+0xf18>)
 80101e4:	881b      	ldrh	r3, [r3, #0]
 80101e6:	461a      	mov	r2, r3
 80101e8:	4b5d      	ldr	r3, [pc, #372]	@ (8010360 <tcp_receive+0xf10>)
 80101ea:	681b      	ldr	r3, [r3, #0]
 80101ec:	441a      	add	r2, r3
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80101f2:	6879      	ldr	r1, [r7, #4]
 80101f4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80101f6:	440b      	add	r3, r1
 80101f8:	1ad3      	subs	r3, r2, r3
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	f340 8088 	ble.w	8010310 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8010200:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010202:	681b      	ldr	r3, [r3, #0]
 8010204:	68db      	ldr	r3, [r3, #12]
 8010206:	899b      	ldrh	r3, [r3, #12]
 8010208:	b29b      	uxth	r3, r3
 801020a:	4618      	mov	r0, r3
 801020c:	f7fa f8ac 	bl	800a368 <lwip_htons>
 8010210:	4603      	mov	r3, r0
 8010212:	b2db      	uxtb	r3, r3
 8010214:	f003 0301 	and.w	r3, r3, #1
 8010218:	2b00      	cmp	r3, #0
 801021a:	d021      	beq.n	8010260 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801021c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	68db      	ldr	r3, [r3, #12]
 8010222:	899b      	ldrh	r3, [r3, #12]
 8010224:	b29b      	uxth	r3, r3
 8010226:	b21b      	sxth	r3, r3
 8010228:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801022c:	b21c      	sxth	r4, r3
 801022e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010230:	681b      	ldr	r3, [r3, #0]
 8010232:	68db      	ldr	r3, [r3, #12]
 8010234:	899b      	ldrh	r3, [r3, #12]
 8010236:	b29b      	uxth	r3, r3
 8010238:	4618      	mov	r0, r3
 801023a:	f7fa f895 	bl	800a368 <lwip_htons>
 801023e:	4603      	mov	r3, r0
 8010240:	b2db      	uxtb	r3, r3
 8010242:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8010246:	b29b      	uxth	r3, r3
 8010248:	4618      	mov	r0, r3
 801024a:	f7fa f88d 	bl	800a368 <lwip_htons>
 801024e:	4603      	mov	r3, r0
 8010250:	b21b      	sxth	r3, r3
 8010252:	4323      	orrs	r3, r4
 8010254:	b21a      	sxth	r2, r3
 8010256:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010258:	681b      	ldr	r3, [r3, #0]
 801025a:	68db      	ldr	r3, [r3, #12]
 801025c:	b292      	uxth	r2, r2
 801025e:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010264:	b29a      	uxth	r2, r3
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801026a:	4413      	add	r3, r2
 801026c:	b299      	uxth	r1, r3
 801026e:	4b3c      	ldr	r3, [pc, #240]	@ (8010360 <tcp_receive+0xf10>)
 8010270:	681b      	ldr	r3, [r3, #0]
 8010272:	b29a      	uxth	r2, r3
 8010274:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	1a8a      	subs	r2, r1, r2
 801027a:	b292      	uxth	r2, r2
 801027c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801027e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010280:	681b      	ldr	r3, [r3, #0]
 8010282:	685a      	ldr	r2, [r3, #4]
 8010284:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010286:	681b      	ldr	r3, [r3, #0]
 8010288:	891b      	ldrh	r3, [r3, #8]
 801028a:	4619      	mov	r1, r3
 801028c:	4610      	mov	r0, r2
 801028e:	f7fb fd0d 	bl	800bcac <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8010292:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010294:	681b      	ldr	r3, [r3, #0]
 8010296:	891c      	ldrh	r4, [r3, #8]
 8010298:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801029a:	681b      	ldr	r3, [r3, #0]
 801029c:	68db      	ldr	r3, [r3, #12]
 801029e:	899b      	ldrh	r3, [r3, #12]
 80102a0:	b29b      	uxth	r3, r3
 80102a2:	4618      	mov	r0, r3
 80102a4:	f7fa f860 	bl	800a368 <lwip_htons>
 80102a8:	4603      	mov	r3, r0
 80102aa:	b2db      	uxtb	r3, r3
 80102ac:	f003 0303 	and.w	r3, r3, #3
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	d001      	beq.n	80102b8 <tcp_receive+0xe68>
 80102b4:	2301      	movs	r3, #1
 80102b6:	e000      	b.n	80102ba <tcp_receive+0xe6a>
 80102b8:	2300      	movs	r3, #0
 80102ba:	4423      	add	r3, r4
 80102bc:	b29a      	uxth	r2, r3
 80102be:	4b2a      	ldr	r3, [pc, #168]	@ (8010368 <tcp_receive+0xf18>)
 80102c0:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80102c2:	4b29      	ldr	r3, [pc, #164]	@ (8010368 <tcp_receive+0xf18>)
 80102c4:	881b      	ldrh	r3, [r3, #0]
 80102c6:	461a      	mov	r2, r3
 80102c8:	4b25      	ldr	r3, [pc, #148]	@ (8010360 <tcp_receive+0xf10>)
 80102ca:	681b      	ldr	r3, [r3, #0]
 80102cc:	441a      	add	r2, r3
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80102d2:	6879      	ldr	r1, [r7, #4]
 80102d4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80102d6:	440b      	add	r3, r1
 80102d8:	429a      	cmp	r2, r3
 80102da:	d019      	beq.n	8010310 <tcp_receive+0xec0>
 80102dc:	4b23      	ldr	r3, [pc, #140]	@ (801036c <tcp_receive+0xf1c>)
 80102de:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 80102e2:	4923      	ldr	r1, [pc, #140]	@ (8010370 <tcp_receive+0xf20>)
 80102e4:	4823      	ldr	r0, [pc, #140]	@ (8010374 <tcp_receive+0xf24>)
 80102e6:	f005 fca9 	bl	8015c3c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80102ea:	e011      	b.n	8010310 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80102ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80102ee:	681b      	ldr	r3, [r3, #0]
 80102f0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80102f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	f47f aea5 	bne.w	8010044 <tcp_receive+0xbf4>
 80102fa:	e00a      	b.n	8010312 <tcp_receive+0xec2>
                break;
 80102fc:	bf00      	nop
 80102fe:	e008      	b.n	8010312 <tcp_receive+0xec2>
                break;
 8010300:	bf00      	nop
 8010302:	e006      	b.n	8010312 <tcp_receive+0xec2>
                  break;
 8010304:	bf00      	nop
 8010306:	e004      	b.n	8010312 <tcp_receive+0xec2>
                  break;
 8010308:	bf00      	nop
 801030a:	e002      	b.n	8010312 <tcp_receive+0xec2>
                  break;
 801030c:	bf00      	nop
 801030e:	e000      	b.n	8010312 <tcp_receive+0xec2>
                break;
 8010310:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8010312:	6878      	ldr	r0, [r7, #4]
 8010314:	f001 fa30 	bl	8011778 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8010318:	e003      	b.n	8010322 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801031a:	6878      	ldr	r0, [r7, #4]
 801031c:	f001 fa2c 	bl	8011778 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010320:	e01a      	b.n	8010358 <tcp_receive+0xf08>
 8010322:	e019      	b.n	8010358 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8010324:	4b0e      	ldr	r3, [pc, #56]	@ (8010360 <tcp_receive+0xf10>)
 8010326:	681a      	ldr	r2, [r3, #0]
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801032c:	1ad3      	subs	r3, r2, r3
 801032e:	2b00      	cmp	r3, #0
 8010330:	db0a      	blt.n	8010348 <tcp_receive+0xef8>
 8010332:	4b0b      	ldr	r3, [pc, #44]	@ (8010360 <tcp_receive+0xf10>)
 8010334:	681a      	ldr	r2, [r3, #0]
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801033a:	6879      	ldr	r1, [r7, #4]
 801033c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801033e:	440b      	add	r3, r1
 8010340:	1ad3      	subs	r3, r2, r3
 8010342:	3301      	adds	r3, #1
 8010344:	2b00      	cmp	r3, #0
 8010346:	dd07      	ble.n	8010358 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	8b5b      	ldrh	r3, [r3, #26]
 801034c:	f043 0302 	orr.w	r3, r3, #2
 8010350:	b29a      	uxth	r2, r3
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8010356:	e7ff      	b.n	8010358 <tcp_receive+0xf08>
 8010358:	bf00      	nop
 801035a:	3750      	adds	r7, #80	@ 0x50
 801035c:	46bd      	mov	sp, r7
 801035e:	bdb0      	pop	{r4, r5, r7, pc}
 8010360:	2000927c 	.word	0x2000927c
 8010364:	2000925c 	.word	0x2000925c
 8010368:	20009286 	.word	0x20009286
 801036c:	0801f410 	.word	0x0801f410
 8010370:	0801f7b8 	.word	0x0801f7b8
 8010374:	0801f45c 	.word	0x0801f45c

08010378 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8010378:	b480      	push	{r7}
 801037a:	b083      	sub	sp, #12
 801037c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801037e:	4b15      	ldr	r3, [pc, #84]	@ (80103d4 <tcp_get_next_optbyte+0x5c>)
 8010380:	881b      	ldrh	r3, [r3, #0]
 8010382:	1c5a      	adds	r2, r3, #1
 8010384:	b291      	uxth	r1, r2
 8010386:	4a13      	ldr	r2, [pc, #76]	@ (80103d4 <tcp_get_next_optbyte+0x5c>)
 8010388:	8011      	strh	r1, [r2, #0]
 801038a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801038c:	4b12      	ldr	r3, [pc, #72]	@ (80103d8 <tcp_get_next_optbyte+0x60>)
 801038e:	681b      	ldr	r3, [r3, #0]
 8010390:	2b00      	cmp	r3, #0
 8010392:	d004      	beq.n	801039e <tcp_get_next_optbyte+0x26>
 8010394:	4b11      	ldr	r3, [pc, #68]	@ (80103dc <tcp_get_next_optbyte+0x64>)
 8010396:	881b      	ldrh	r3, [r3, #0]
 8010398:	88fa      	ldrh	r2, [r7, #6]
 801039a:	429a      	cmp	r2, r3
 801039c:	d208      	bcs.n	80103b0 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801039e:	4b10      	ldr	r3, [pc, #64]	@ (80103e0 <tcp_get_next_optbyte+0x68>)
 80103a0:	681b      	ldr	r3, [r3, #0]
 80103a2:	3314      	adds	r3, #20
 80103a4:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80103a6:	88fb      	ldrh	r3, [r7, #6]
 80103a8:	683a      	ldr	r2, [r7, #0]
 80103aa:	4413      	add	r3, r2
 80103ac:	781b      	ldrb	r3, [r3, #0]
 80103ae:	e00b      	b.n	80103c8 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80103b0:	88fb      	ldrh	r3, [r7, #6]
 80103b2:	b2da      	uxtb	r2, r3
 80103b4:	4b09      	ldr	r3, [pc, #36]	@ (80103dc <tcp_get_next_optbyte+0x64>)
 80103b6:	881b      	ldrh	r3, [r3, #0]
 80103b8:	b2db      	uxtb	r3, r3
 80103ba:	1ad3      	subs	r3, r2, r3
 80103bc:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80103be:	4b06      	ldr	r3, [pc, #24]	@ (80103d8 <tcp_get_next_optbyte+0x60>)
 80103c0:	681a      	ldr	r2, [r3, #0]
 80103c2:	797b      	ldrb	r3, [r7, #5]
 80103c4:	4413      	add	r3, r2
 80103c6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80103c8:	4618      	mov	r0, r3
 80103ca:	370c      	adds	r7, #12
 80103cc:	46bd      	mov	sp, r7
 80103ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103d2:	4770      	bx	lr
 80103d4:	20009278 	.word	0x20009278
 80103d8:	20009274 	.word	0x20009274
 80103dc:	20009272 	.word	0x20009272
 80103e0:	2000926c 	.word	0x2000926c

080103e4 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80103e4:	b580      	push	{r7, lr}
 80103e6:	b084      	sub	sp, #16
 80103e8:	af00      	add	r7, sp, #0
 80103ea:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d106      	bne.n	8010400 <tcp_parseopt+0x1c>
 80103f2:	4b32      	ldr	r3, [pc, #200]	@ (80104bc <tcp_parseopt+0xd8>)
 80103f4:	f240 727d 	movw	r2, #1917	@ 0x77d
 80103f8:	4931      	ldr	r1, [pc, #196]	@ (80104c0 <tcp_parseopt+0xdc>)
 80103fa:	4832      	ldr	r0, [pc, #200]	@ (80104c4 <tcp_parseopt+0xe0>)
 80103fc:	f005 fc1e 	bl	8015c3c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8010400:	4b31      	ldr	r3, [pc, #196]	@ (80104c8 <tcp_parseopt+0xe4>)
 8010402:	881b      	ldrh	r3, [r3, #0]
 8010404:	2b00      	cmp	r3, #0
 8010406:	d056      	beq.n	80104b6 <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8010408:	4b30      	ldr	r3, [pc, #192]	@ (80104cc <tcp_parseopt+0xe8>)
 801040a:	2200      	movs	r2, #0
 801040c:	801a      	strh	r2, [r3, #0]
 801040e:	e046      	b.n	801049e <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8010410:	f7ff ffb2 	bl	8010378 <tcp_get_next_optbyte>
 8010414:	4603      	mov	r3, r0
 8010416:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8010418:	7bfb      	ldrb	r3, [r7, #15]
 801041a:	2b02      	cmp	r3, #2
 801041c:	d006      	beq.n	801042c <tcp_parseopt+0x48>
 801041e:	2b02      	cmp	r3, #2
 8010420:	dc2a      	bgt.n	8010478 <tcp_parseopt+0x94>
 8010422:	2b00      	cmp	r3, #0
 8010424:	d042      	beq.n	80104ac <tcp_parseopt+0xc8>
 8010426:	2b01      	cmp	r3, #1
 8010428:	d038      	beq.n	801049c <tcp_parseopt+0xb8>
 801042a:	e025      	b.n	8010478 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801042c:	f7ff ffa4 	bl	8010378 <tcp_get_next_optbyte>
 8010430:	4603      	mov	r3, r0
 8010432:	2b04      	cmp	r3, #4
 8010434:	d13c      	bne.n	80104b0 <tcp_parseopt+0xcc>
 8010436:	4b25      	ldr	r3, [pc, #148]	@ (80104cc <tcp_parseopt+0xe8>)
 8010438:	881b      	ldrh	r3, [r3, #0]
 801043a:	3301      	adds	r3, #1
 801043c:	4a22      	ldr	r2, [pc, #136]	@ (80104c8 <tcp_parseopt+0xe4>)
 801043e:	8812      	ldrh	r2, [r2, #0]
 8010440:	4293      	cmp	r3, r2
 8010442:	da35      	bge.n	80104b0 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8010444:	f7ff ff98 	bl	8010378 <tcp_get_next_optbyte>
 8010448:	4603      	mov	r3, r0
 801044a:	021b      	lsls	r3, r3, #8
 801044c:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801044e:	f7ff ff93 	bl	8010378 <tcp_get_next_optbyte>
 8010452:	4603      	mov	r3, r0
 8010454:	461a      	mov	r2, r3
 8010456:	89bb      	ldrh	r3, [r7, #12]
 8010458:	4313      	orrs	r3, r2
 801045a:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801045c:	89bb      	ldrh	r3, [r7, #12]
 801045e:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8010462:	d804      	bhi.n	801046e <tcp_parseopt+0x8a>
 8010464:	89bb      	ldrh	r3, [r7, #12]
 8010466:	2b00      	cmp	r3, #0
 8010468:	d001      	beq.n	801046e <tcp_parseopt+0x8a>
 801046a:	89ba      	ldrh	r2, [r7, #12]
 801046c:	e001      	b.n	8010472 <tcp_parseopt+0x8e>
 801046e:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 8010476:	e012      	b.n	801049e <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8010478:	f7ff ff7e 	bl	8010378 <tcp_get_next_optbyte>
 801047c:	4603      	mov	r3, r0
 801047e:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8010480:	7afb      	ldrb	r3, [r7, #11]
 8010482:	2b01      	cmp	r3, #1
 8010484:	d916      	bls.n	80104b4 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8010486:	7afb      	ldrb	r3, [r7, #11]
 8010488:	b29a      	uxth	r2, r3
 801048a:	4b10      	ldr	r3, [pc, #64]	@ (80104cc <tcp_parseopt+0xe8>)
 801048c:	881b      	ldrh	r3, [r3, #0]
 801048e:	4413      	add	r3, r2
 8010490:	b29b      	uxth	r3, r3
 8010492:	3b02      	subs	r3, #2
 8010494:	b29a      	uxth	r2, r3
 8010496:	4b0d      	ldr	r3, [pc, #52]	@ (80104cc <tcp_parseopt+0xe8>)
 8010498:	801a      	strh	r2, [r3, #0]
 801049a:	e000      	b.n	801049e <tcp_parseopt+0xba>
          break;
 801049c:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801049e:	4b0b      	ldr	r3, [pc, #44]	@ (80104cc <tcp_parseopt+0xe8>)
 80104a0:	881a      	ldrh	r2, [r3, #0]
 80104a2:	4b09      	ldr	r3, [pc, #36]	@ (80104c8 <tcp_parseopt+0xe4>)
 80104a4:	881b      	ldrh	r3, [r3, #0]
 80104a6:	429a      	cmp	r2, r3
 80104a8:	d3b2      	bcc.n	8010410 <tcp_parseopt+0x2c>
 80104aa:	e004      	b.n	80104b6 <tcp_parseopt+0xd2>
          return;
 80104ac:	bf00      	nop
 80104ae:	e002      	b.n	80104b6 <tcp_parseopt+0xd2>
            return;
 80104b0:	bf00      	nop
 80104b2:	e000      	b.n	80104b6 <tcp_parseopt+0xd2>
            return;
 80104b4:	bf00      	nop
      }
    }
  }
}
 80104b6:	3710      	adds	r7, #16
 80104b8:	46bd      	mov	sp, r7
 80104ba:	bd80      	pop	{r7, pc}
 80104bc:	0801f410 	.word	0x0801f410
 80104c0:	0801f874 	.word	0x0801f874
 80104c4:	0801f45c 	.word	0x0801f45c
 80104c8:	20009270 	.word	0x20009270
 80104cc:	20009278 	.word	0x20009278

080104d0 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80104d0:	b480      	push	{r7}
 80104d2:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80104d4:	4b05      	ldr	r3, [pc, #20]	@ (80104ec <tcp_trigger_input_pcb_close+0x1c>)
 80104d6:	781b      	ldrb	r3, [r3, #0]
 80104d8:	f043 0310 	orr.w	r3, r3, #16
 80104dc:	b2da      	uxtb	r2, r3
 80104de:	4b03      	ldr	r3, [pc, #12]	@ (80104ec <tcp_trigger_input_pcb_close+0x1c>)
 80104e0:	701a      	strb	r2, [r3, #0]
}
 80104e2:	bf00      	nop
 80104e4:	46bd      	mov	sp, r7
 80104e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ea:	4770      	bx	lr
 80104ec:	20009289 	.word	0x20009289

080104f0 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80104f0:	b580      	push	{r7, lr}
 80104f2:	b084      	sub	sp, #16
 80104f4:	af00      	add	r7, sp, #0
 80104f6:	60f8      	str	r0, [r7, #12]
 80104f8:	60b9      	str	r1, [r7, #8]
 80104fa:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80104fc:	68fb      	ldr	r3, [r7, #12]
 80104fe:	2b00      	cmp	r3, #0
 8010500:	d00a      	beq.n	8010518 <tcp_route+0x28>
 8010502:	68fb      	ldr	r3, [r7, #12]
 8010504:	7a1b      	ldrb	r3, [r3, #8]
 8010506:	2b00      	cmp	r3, #0
 8010508:	d006      	beq.n	8010518 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801050a:	68fb      	ldr	r3, [r7, #12]
 801050c:	7a1b      	ldrb	r3, [r3, #8]
 801050e:	4618      	mov	r0, r3
 8010510:	f7fb f9f2 	bl	800b8f8 <netif_get_by_index>
 8010514:	4603      	mov	r3, r0
 8010516:	e003      	b.n	8010520 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8010518:	6878      	ldr	r0, [r7, #4]
 801051a:	f003 fa0d 	bl	8013938 <ip4_route>
 801051e:	4603      	mov	r3, r0
  }
}
 8010520:	4618      	mov	r0, r3
 8010522:	3710      	adds	r7, #16
 8010524:	46bd      	mov	sp, r7
 8010526:	bd80      	pop	{r7, pc}

08010528 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8010528:	b590      	push	{r4, r7, lr}
 801052a:	b087      	sub	sp, #28
 801052c:	af00      	add	r7, sp, #0
 801052e:	60f8      	str	r0, [r7, #12]
 8010530:	60b9      	str	r1, [r7, #8]
 8010532:	603b      	str	r3, [r7, #0]
 8010534:	4613      	mov	r3, r2
 8010536:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8010538:	68fb      	ldr	r3, [r7, #12]
 801053a:	2b00      	cmp	r3, #0
 801053c:	d105      	bne.n	801054a <tcp_create_segment+0x22>
 801053e:	4b43      	ldr	r3, [pc, #268]	@ (801064c <tcp_create_segment+0x124>)
 8010540:	22a3      	movs	r2, #163	@ 0xa3
 8010542:	4943      	ldr	r1, [pc, #268]	@ (8010650 <tcp_create_segment+0x128>)
 8010544:	4843      	ldr	r0, [pc, #268]	@ (8010654 <tcp_create_segment+0x12c>)
 8010546:	f005 fb79 	bl	8015c3c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801054a:	68bb      	ldr	r3, [r7, #8]
 801054c:	2b00      	cmp	r3, #0
 801054e:	d105      	bne.n	801055c <tcp_create_segment+0x34>
 8010550:	4b3e      	ldr	r3, [pc, #248]	@ (801064c <tcp_create_segment+0x124>)
 8010552:	22a4      	movs	r2, #164	@ 0xa4
 8010554:	4940      	ldr	r1, [pc, #256]	@ (8010658 <tcp_create_segment+0x130>)
 8010556:	483f      	ldr	r0, [pc, #252]	@ (8010654 <tcp_create_segment+0x12c>)
 8010558:	f005 fb70 	bl	8015c3c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801055c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8010560:	009b      	lsls	r3, r3, #2
 8010562:	b2db      	uxtb	r3, r3
 8010564:	f003 0304 	and.w	r3, r3, #4
 8010568:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801056a:	2003      	movs	r0, #3
 801056c:	f7fa fe3e 	bl	800b1ec <memp_malloc>
 8010570:	6138      	str	r0, [r7, #16]
 8010572:	693b      	ldr	r3, [r7, #16]
 8010574:	2b00      	cmp	r3, #0
 8010576:	d104      	bne.n	8010582 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8010578:	68b8      	ldr	r0, [r7, #8]
 801057a:	f7fb fd1d 	bl	800bfb8 <pbuf_free>
    return NULL;
 801057e:	2300      	movs	r3, #0
 8010580:	e060      	b.n	8010644 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 8010582:	693b      	ldr	r3, [r7, #16]
 8010584:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8010588:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801058a:	693b      	ldr	r3, [r7, #16]
 801058c:	2200      	movs	r2, #0
 801058e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8010590:	693b      	ldr	r3, [r7, #16]
 8010592:	68ba      	ldr	r2, [r7, #8]
 8010594:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8010596:	68bb      	ldr	r3, [r7, #8]
 8010598:	891a      	ldrh	r2, [r3, #8]
 801059a:	7dfb      	ldrb	r3, [r7, #23]
 801059c:	b29b      	uxth	r3, r3
 801059e:	429a      	cmp	r2, r3
 80105a0:	d205      	bcs.n	80105ae <tcp_create_segment+0x86>
 80105a2:	4b2a      	ldr	r3, [pc, #168]	@ (801064c <tcp_create_segment+0x124>)
 80105a4:	22b0      	movs	r2, #176	@ 0xb0
 80105a6:	492d      	ldr	r1, [pc, #180]	@ (801065c <tcp_create_segment+0x134>)
 80105a8:	482a      	ldr	r0, [pc, #168]	@ (8010654 <tcp_create_segment+0x12c>)
 80105aa:	f005 fb47 	bl	8015c3c <iprintf>
  seg->len = p->tot_len - optlen;
 80105ae:	68bb      	ldr	r3, [r7, #8]
 80105b0:	891a      	ldrh	r2, [r3, #8]
 80105b2:	7dfb      	ldrb	r3, [r7, #23]
 80105b4:	b29b      	uxth	r3, r3
 80105b6:	1ad3      	subs	r3, r2, r3
 80105b8:	b29a      	uxth	r2, r3
 80105ba:	693b      	ldr	r3, [r7, #16]
 80105bc:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80105be:	2114      	movs	r1, #20
 80105c0:	68b8      	ldr	r0, [r7, #8]
 80105c2:	f7fb fc63 	bl	800be8c <pbuf_add_header>
 80105c6:	4603      	mov	r3, r0
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d004      	beq.n	80105d6 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80105cc:	6938      	ldr	r0, [r7, #16]
 80105ce:	f7fd f8d2 	bl	800d776 <tcp_seg_free>
    return NULL;
 80105d2:	2300      	movs	r3, #0
 80105d4:	e036      	b.n	8010644 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80105d6:	693b      	ldr	r3, [r7, #16]
 80105d8:	685b      	ldr	r3, [r3, #4]
 80105da:	685a      	ldr	r2, [r3, #4]
 80105dc:	693b      	ldr	r3, [r7, #16]
 80105de:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80105e0:	68fb      	ldr	r3, [r7, #12]
 80105e2:	8ada      	ldrh	r2, [r3, #22]
 80105e4:	693b      	ldr	r3, [r7, #16]
 80105e6:	68dc      	ldr	r4, [r3, #12]
 80105e8:	4610      	mov	r0, r2
 80105ea:	f7f9 febd 	bl	800a368 <lwip_htons>
 80105ee:	4603      	mov	r3, r0
 80105f0:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80105f2:	68fb      	ldr	r3, [r7, #12]
 80105f4:	8b1a      	ldrh	r2, [r3, #24]
 80105f6:	693b      	ldr	r3, [r7, #16]
 80105f8:	68dc      	ldr	r4, [r3, #12]
 80105fa:	4610      	mov	r0, r2
 80105fc:	f7f9 feb4 	bl	800a368 <lwip_htons>
 8010600:	4603      	mov	r3, r0
 8010602:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8010604:	693b      	ldr	r3, [r7, #16]
 8010606:	68dc      	ldr	r4, [r3, #12]
 8010608:	6838      	ldr	r0, [r7, #0]
 801060a:	f7f9 fec3 	bl	800a394 <lwip_htonl>
 801060e:	4603      	mov	r3, r0
 8010610:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8010612:	7dfb      	ldrb	r3, [r7, #23]
 8010614:	089b      	lsrs	r3, r3, #2
 8010616:	b2db      	uxtb	r3, r3
 8010618:	3305      	adds	r3, #5
 801061a:	b29b      	uxth	r3, r3
 801061c:	031b      	lsls	r3, r3, #12
 801061e:	b29a      	uxth	r2, r3
 8010620:	79fb      	ldrb	r3, [r7, #7]
 8010622:	b29b      	uxth	r3, r3
 8010624:	4313      	orrs	r3, r2
 8010626:	b29a      	uxth	r2, r3
 8010628:	693b      	ldr	r3, [r7, #16]
 801062a:	68dc      	ldr	r4, [r3, #12]
 801062c:	4610      	mov	r0, r2
 801062e:	f7f9 fe9b 	bl	800a368 <lwip_htons>
 8010632:	4603      	mov	r3, r0
 8010634:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8010636:	693b      	ldr	r3, [r7, #16]
 8010638:	68db      	ldr	r3, [r3, #12]
 801063a:	2200      	movs	r2, #0
 801063c:	749a      	strb	r2, [r3, #18]
 801063e:	2200      	movs	r2, #0
 8010640:	74da      	strb	r2, [r3, #19]
  return seg;
 8010642:	693b      	ldr	r3, [r7, #16]
}
 8010644:	4618      	mov	r0, r3
 8010646:	371c      	adds	r7, #28
 8010648:	46bd      	mov	sp, r7
 801064a:	bd90      	pop	{r4, r7, pc}
 801064c:	0801f890 	.word	0x0801f890
 8010650:	0801f8c4 	.word	0x0801f8c4
 8010654:	0801f8e4 	.word	0x0801f8e4
 8010658:	0801f90c 	.word	0x0801f90c
 801065c:	0801f930 	.word	0x0801f930

08010660 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8010660:	b590      	push	{r4, r7, lr}
 8010662:	b08b      	sub	sp, #44	@ 0x2c
 8010664:	af02      	add	r7, sp, #8
 8010666:	6078      	str	r0, [r7, #4]
 8010668:	460b      	mov	r3, r1
 801066a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801066c:	2300      	movs	r3, #0
 801066e:	61fb      	str	r3, [r7, #28]
 8010670:	2300      	movs	r3, #0
 8010672:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8010674:	2300      	movs	r3, #0
 8010676:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	2b00      	cmp	r3, #0
 801067c:	d106      	bne.n	801068c <tcp_split_unsent_seg+0x2c>
 801067e:	4b95      	ldr	r3, [pc, #596]	@ (80108d4 <tcp_split_unsent_seg+0x274>)
 8010680:	f240 324b 	movw	r2, #843	@ 0x34b
 8010684:	4994      	ldr	r1, [pc, #592]	@ (80108d8 <tcp_split_unsent_seg+0x278>)
 8010686:	4895      	ldr	r0, [pc, #596]	@ (80108dc <tcp_split_unsent_seg+0x27c>)
 8010688:	f005 fad8 	bl	8015c3c <iprintf>

  useg = pcb->unsent;
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010690:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8010692:	697b      	ldr	r3, [r7, #20]
 8010694:	2b00      	cmp	r3, #0
 8010696:	d102      	bne.n	801069e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8010698:	f04f 33ff 	mov.w	r3, #4294967295
 801069c:	e116      	b.n	80108cc <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801069e:	887b      	ldrh	r3, [r7, #2]
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d109      	bne.n	80106b8 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80106a4:	4b8b      	ldr	r3, [pc, #556]	@ (80108d4 <tcp_split_unsent_seg+0x274>)
 80106a6:	f240 3253 	movw	r2, #851	@ 0x353
 80106aa:	498d      	ldr	r1, [pc, #564]	@ (80108e0 <tcp_split_unsent_seg+0x280>)
 80106ac:	488b      	ldr	r0, [pc, #556]	@ (80108dc <tcp_split_unsent_seg+0x27c>)
 80106ae:	f005 fac5 	bl	8015c3c <iprintf>
    return ERR_VAL;
 80106b2:	f06f 0305 	mvn.w	r3, #5
 80106b6:	e109      	b.n	80108cc <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80106b8:	697b      	ldr	r3, [r7, #20]
 80106ba:	891b      	ldrh	r3, [r3, #8]
 80106bc:	887a      	ldrh	r2, [r7, #2]
 80106be:	429a      	cmp	r2, r3
 80106c0:	d301      	bcc.n	80106c6 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80106c2:	2300      	movs	r3, #0
 80106c4:	e102      	b.n	80108cc <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80106ca:	887a      	ldrh	r2, [r7, #2]
 80106cc:	429a      	cmp	r2, r3
 80106ce:	d906      	bls.n	80106de <tcp_split_unsent_seg+0x7e>
 80106d0:	4b80      	ldr	r3, [pc, #512]	@ (80108d4 <tcp_split_unsent_seg+0x274>)
 80106d2:	f240 325b 	movw	r2, #859	@ 0x35b
 80106d6:	4983      	ldr	r1, [pc, #524]	@ (80108e4 <tcp_split_unsent_seg+0x284>)
 80106d8:	4880      	ldr	r0, [pc, #512]	@ (80108dc <tcp_split_unsent_seg+0x27c>)
 80106da:	f005 faaf 	bl	8015c3c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80106de:	697b      	ldr	r3, [r7, #20]
 80106e0:	891b      	ldrh	r3, [r3, #8]
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d106      	bne.n	80106f4 <tcp_split_unsent_seg+0x94>
 80106e6:	4b7b      	ldr	r3, [pc, #492]	@ (80108d4 <tcp_split_unsent_seg+0x274>)
 80106e8:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 80106ec:	497e      	ldr	r1, [pc, #504]	@ (80108e8 <tcp_split_unsent_seg+0x288>)
 80106ee:	487b      	ldr	r0, [pc, #492]	@ (80108dc <tcp_split_unsent_seg+0x27c>)
 80106f0:	f005 faa4 	bl	8015c3c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80106f4:	697b      	ldr	r3, [r7, #20]
 80106f6:	7a9b      	ldrb	r3, [r3, #10]
 80106f8:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80106fa:	7bfb      	ldrb	r3, [r7, #15]
 80106fc:	009b      	lsls	r3, r3, #2
 80106fe:	b2db      	uxtb	r3, r3
 8010700:	f003 0304 	and.w	r3, r3, #4
 8010704:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8010706:	697b      	ldr	r3, [r7, #20]
 8010708:	891a      	ldrh	r2, [r3, #8]
 801070a:	887b      	ldrh	r3, [r7, #2]
 801070c:	1ad3      	subs	r3, r2, r3
 801070e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8010710:	7bbb      	ldrb	r3, [r7, #14]
 8010712:	b29a      	uxth	r2, r3
 8010714:	89bb      	ldrh	r3, [r7, #12]
 8010716:	4413      	add	r3, r2
 8010718:	b29b      	uxth	r3, r3
 801071a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801071e:	4619      	mov	r1, r3
 8010720:	2036      	movs	r0, #54	@ 0x36
 8010722:	f7fb f965 	bl	800b9f0 <pbuf_alloc>
 8010726:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010728:	693b      	ldr	r3, [r7, #16]
 801072a:	2b00      	cmp	r3, #0
 801072c:	f000 80b7 	beq.w	801089e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8010730:	697b      	ldr	r3, [r7, #20]
 8010732:	685b      	ldr	r3, [r3, #4]
 8010734:	891a      	ldrh	r2, [r3, #8]
 8010736:	697b      	ldr	r3, [r7, #20]
 8010738:	891b      	ldrh	r3, [r3, #8]
 801073a:	1ad3      	subs	r3, r2, r3
 801073c:	b29a      	uxth	r2, r3
 801073e:	887b      	ldrh	r3, [r7, #2]
 8010740:	4413      	add	r3, r2
 8010742:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8010744:	697b      	ldr	r3, [r7, #20]
 8010746:	6858      	ldr	r0, [r3, #4]
 8010748:	693b      	ldr	r3, [r7, #16]
 801074a:	685a      	ldr	r2, [r3, #4]
 801074c:	7bbb      	ldrb	r3, [r7, #14]
 801074e:	18d1      	adds	r1, r2, r3
 8010750:	897b      	ldrh	r3, [r7, #10]
 8010752:	89ba      	ldrh	r2, [r7, #12]
 8010754:	f7fb fe2a 	bl	800c3ac <pbuf_copy_partial>
 8010758:	4603      	mov	r3, r0
 801075a:	461a      	mov	r2, r3
 801075c:	89bb      	ldrh	r3, [r7, #12]
 801075e:	4293      	cmp	r3, r2
 8010760:	f040 809f 	bne.w	80108a2 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8010764:	697b      	ldr	r3, [r7, #20]
 8010766:	68db      	ldr	r3, [r3, #12]
 8010768:	899b      	ldrh	r3, [r3, #12]
 801076a:	b29b      	uxth	r3, r3
 801076c:	4618      	mov	r0, r3
 801076e:	f7f9 fdfb 	bl	800a368 <lwip_htons>
 8010772:	4603      	mov	r3, r0
 8010774:	b2db      	uxtb	r3, r3
 8010776:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801077a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801077c:	2300      	movs	r3, #0
 801077e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8010780:	7efb      	ldrb	r3, [r7, #27]
 8010782:	f003 0308 	and.w	r3, r3, #8
 8010786:	2b00      	cmp	r3, #0
 8010788:	d007      	beq.n	801079a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801078a:	7efb      	ldrb	r3, [r7, #27]
 801078c:	f023 0308 	bic.w	r3, r3, #8
 8010790:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8010792:	7ebb      	ldrb	r3, [r7, #26]
 8010794:	f043 0308 	orr.w	r3, r3, #8
 8010798:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801079a:	7efb      	ldrb	r3, [r7, #27]
 801079c:	f003 0301 	and.w	r3, r3, #1
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	d007      	beq.n	80107b4 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80107a4:	7efb      	ldrb	r3, [r7, #27]
 80107a6:	f023 0301 	bic.w	r3, r3, #1
 80107aa:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80107ac:	7ebb      	ldrb	r3, [r7, #26]
 80107ae:	f043 0301 	orr.w	r3, r3, #1
 80107b2:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80107b4:	697b      	ldr	r3, [r7, #20]
 80107b6:	68db      	ldr	r3, [r3, #12]
 80107b8:	685b      	ldr	r3, [r3, #4]
 80107ba:	4618      	mov	r0, r3
 80107bc:	f7f9 fdea 	bl	800a394 <lwip_htonl>
 80107c0:	4602      	mov	r2, r0
 80107c2:	887b      	ldrh	r3, [r7, #2]
 80107c4:	18d1      	adds	r1, r2, r3
 80107c6:	7eba      	ldrb	r2, [r7, #26]
 80107c8:	7bfb      	ldrb	r3, [r7, #15]
 80107ca:	9300      	str	r3, [sp, #0]
 80107cc:	460b      	mov	r3, r1
 80107ce:	6939      	ldr	r1, [r7, #16]
 80107d0:	6878      	ldr	r0, [r7, #4]
 80107d2:	f7ff fea9 	bl	8010528 <tcp_create_segment>
 80107d6:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80107d8:	69fb      	ldr	r3, [r7, #28]
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d063      	beq.n	80108a6 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80107de:	697b      	ldr	r3, [r7, #20]
 80107e0:	685b      	ldr	r3, [r3, #4]
 80107e2:	4618      	mov	r0, r3
 80107e4:	f7fb fc70 	bl	800c0c8 <pbuf_clen>
 80107e8:	4603      	mov	r3, r0
 80107ea:	461a      	mov	r2, r3
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80107f2:	1a9b      	subs	r3, r3, r2
 80107f4:	b29a      	uxth	r2, r3
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80107fc:	697b      	ldr	r3, [r7, #20]
 80107fe:	6858      	ldr	r0, [r3, #4]
 8010800:	697b      	ldr	r3, [r7, #20]
 8010802:	685b      	ldr	r3, [r3, #4]
 8010804:	891a      	ldrh	r2, [r3, #8]
 8010806:	89bb      	ldrh	r3, [r7, #12]
 8010808:	1ad3      	subs	r3, r2, r3
 801080a:	b29b      	uxth	r3, r3
 801080c:	4619      	mov	r1, r3
 801080e:	f7fb fa4d 	bl	800bcac <pbuf_realloc>
  useg->len -= remainder;
 8010812:	697b      	ldr	r3, [r7, #20]
 8010814:	891a      	ldrh	r2, [r3, #8]
 8010816:	89bb      	ldrh	r3, [r7, #12]
 8010818:	1ad3      	subs	r3, r2, r3
 801081a:	b29a      	uxth	r2, r3
 801081c:	697b      	ldr	r3, [r7, #20]
 801081e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8010820:	697b      	ldr	r3, [r7, #20]
 8010822:	68db      	ldr	r3, [r3, #12]
 8010824:	899b      	ldrh	r3, [r3, #12]
 8010826:	b29c      	uxth	r4, r3
 8010828:	7efb      	ldrb	r3, [r7, #27]
 801082a:	b29b      	uxth	r3, r3
 801082c:	4618      	mov	r0, r3
 801082e:	f7f9 fd9b 	bl	800a368 <lwip_htons>
 8010832:	4603      	mov	r3, r0
 8010834:	461a      	mov	r2, r3
 8010836:	697b      	ldr	r3, [r7, #20]
 8010838:	68db      	ldr	r3, [r3, #12]
 801083a:	4322      	orrs	r2, r4
 801083c:	b292      	uxth	r2, r2
 801083e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8010840:	697b      	ldr	r3, [r7, #20]
 8010842:	685b      	ldr	r3, [r3, #4]
 8010844:	4618      	mov	r0, r3
 8010846:	f7fb fc3f 	bl	800c0c8 <pbuf_clen>
 801084a:	4603      	mov	r3, r0
 801084c:	461a      	mov	r2, r3
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010854:	4413      	add	r3, r2
 8010856:	b29a      	uxth	r2, r3
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801085e:	69fb      	ldr	r3, [r7, #28]
 8010860:	685b      	ldr	r3, [r3, #4]
 8010862:	4618      	mov	r0, r3
 8010864:	f7fb fc30 	bl	800c0c8 <pbuf_clen>
 8010868:	4603      	mov	r3, r0
 801086a:	461a      	mov	r2, r3
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010872:	4413      	add	r3, r2
 8010874:	b29a      	uxth	r2, r3
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801087c:	697b      	ldr	r3, [r7, #20]
 801087e:	681a      	ldr	r2, [r3, #0]
 8010880:	69fb      	ldr	r3, [r7, #28]
 8010882:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8010884:	697b      	ldr	r3, [r7, #20]
 8010886:	69fa      	ldr	r2, [r7, #28]
 8010888:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801088a:	69fb      	ldr	r3, [r7, #28]
 801088c:	681b      	ldr	r3, [r3, #0]
 801088e:	2b00      	cmp	r3, #0
 8010890:	d103      	bne.n	801089a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	2200      	movs	r2, #0
 8010896:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801089a:	2300      	movs	r3, #0
 801089c:	e016      	b.n	80108cc <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801089e:	bf00      	nop
 80108a0:	e002      	b.n	80108a8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80108a2:	bf00      	nop
 80108a4:	e000      	b.n	80108a8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80108a6:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80108a8:	69fb      	ldr	r3, [r7, #28]
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	d006      	beq.n	80108bc <tcp_split_unsent_seg+0x25c>
 80108ae:	4b09      	ldr	r3, [pc, #36]	@ (80108d4 <tcp_split_unsent_seg+0x274>)
 80108b0:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 80108b4:	490d      	ldr	r1, [pc, #52]	@ (80108ec <tcp_split_unsent_seg+0x28c>)
 80108b6:	4809      	ldr	r0, [pc, #36]	@ (80108dc <tcp_split_unsent_seg+0x27c>)
 80108b8:	f005 f9c0 	bl	8015c3c <iprintf>
  if (p != NULL) {
 80108bc:	693b      	ldr	r3, [r7, #16]
 80108be:	2b00      	cmp	r3, #0
 80108c0:	d002      	beq.n	80108c8 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80108c2:	6938      	ldr	r0, [r7, #16]
 80108c4:	f7fb fb78 	bl	800bfb8 <pbuf_free>
  }

  return ERR_MEM;
 80108c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80108cc:	4618      	mov	r0, r3
 80108ce:	3724      	adds	r7, #36	@ 0x24
 80108d0:	46bd      	mov	sp, r7
 80108d2:	bd90      	pop	{r4, r7, pc}
 80108d4:	0801f890 	.word	0x0801f890
 80108d8:	0801fc24 	.word	0x0801fc24
 80108dc:	0801f8e4 	.word	0x0801f8e4
 80108e0:	0801fc48 	.word	0x0801fc48
 80108e4:	0801fc6c 	.word	0x0801fc6c
 80108e8:	0801fc7c 	.word	0x0801fc7c
 80108ec:	0801fc8c 	.word	0x0801fc8c

080108f0 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80108f0:	b590      	push	{r4, r7, lr}
 80108f2:	b085      	sub	sp, #20
 80108f4:	af00      	add	r7, sp, #0
 80108f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	d106      	bne.n	801090c <tcp_send_fin+0x1c>
 80108fe:	4b21      	ldr	r3, [pc, #132]	@ (8010984 <tcp_send_fin+0x94>)
 8010900:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 8010904:	4920      	ldr	r1, [pc, #128]	@ (8010988 <tcp_send_fin+0x98>)
 8010906:	4821      	ldr	r0, [pc, #132]	@ (801098c <tcp_send_fin+0x9c>)
 8010908:	f005 f998 	bl	8015c3c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010910:	2b00      	cmp	r3, #0
 8010912:	d02e      	beq.n	8010972 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010918:	60fb      	str	r3, [r7, #12]
 801091a:	e002      	b.n	8010922 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801091c:	68fb      	ldr	r3, [r7, #12]
 801091e:	681b      	ldr	r3, [r3, #0]
 8010920:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010922:	68fb      	ldr	r3, [r7, #12]
 8010924:	681b      	ldr	r3, [r3, #0]
 8010926:	2b00      	cmp	r3, #0
 8010928:	d1f8      	bne.n	801091c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801092a:	68fb      	ldr	r3, [r7, #12]
 801092c:	68db      	ldr	r3, [r3, #12]
 801092e:	899b      	ldrh	r3, [r3, #12]
 8010930:	b29b      	uxth	r3, r3
 8010932:	4618      	mov	r0, r3
 8010934:	f7f9 fd18 	bl	800a368 <lwip_htons>
 8010938:	4603      	mov	r3, r0
 801093a:	b2db      	uxtb	r3, r3
 801093c:	f003 0307 	and.w	r3, r3, #7
 8010940:	2b00      	cmp	r3, #0
 8010942:	d116      	bne.n	8010972 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8010944:	68fb      	ldr	r3, [r7, #12]
 8010946:	68db      	ldr	r3, [r3, #12]
 8010948:	899b      	ldrh	r3, [r3, #12]
 801094a:	b29c      	uxth	r4, r3
 801094c:	2001      	movs	r0, #1
 801094e:	f7f9 fd0b 	bl	800a368 <lwip_htons>
 8010952:	4603      	mov	r3, r0
 8010954:	461a      	mov	r2, r3
 8010956:	68fb      	ldr	r3, [r7, #12]
 8010958:	68db      	ldr	r3, [r3, #12]
 801095a:	4322      	orrs	r2, r4
 801095c:	b292      	uxth	r2, r2
 801095e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	8b5b      	ldrh	r3, [r3, #26]
 8010964:	f043 0320 	orr.w	r3, r3, #32
 8010968:	b29a      	uxth	r2, r3
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801096e:	2300      	movs	r3, #0
 8010970:	e004      	b.n	801097c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8010972:	2101      	movs	r1, #1
 8010974:	6878      	ldr	r0, [r7, #4]
 8010976:	f000 f80b 	bl	8010990 <tcp_enqueue_flags>
 801097a:	4603      	mov	r3, r0
}
 801097c:	4618      	mov	r0, r3
 801097e:	3714      	adds	r7, #20
 8010980:	46bd      	mov	sp, r7
 8010982:	bd90      	pop	{r4, r7, pc}
 8010984:	0801f890 	.word	0x0801f890
 8010988:	0801fc98 	.word	0x0801fc98
 801098c:	0801f8e4 	.word	0x0801f8e4

08010990 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8010990:	b580      	push	{r7, lr}
 8010992:	b08a      	sub	sp, #40	@ 0x28
 8010994:	af02      	add	r7, sp, #8
 8010996:	6078      	str	r0, [r7, #4]
 8010998:	460b      	mov	r3, r1
 801099a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801099c:	2300      	movs	r3, #0
 801099e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80109a0:	2300      	movs	r3, #0
 80109a2:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80109a4:	78fb      	ldrb	r3, [r7, #3]
 80109a6:	f003 0303 	and.w	r3, r3, #3
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	d106      	bne.n	80109bc <tcp_enqueue_flags+0x2c>
 80109ae:	4b67      	ldr	r3, [pc, #412]	@ (8010b4c <tcp_enqueue_flags+0x1bc>)
 80109b0:	f240 4211 	movw	r2, #1041	@ 0x411
 80109b4:	4966      	ldr	r1, [pc, #408]	@ (8010b50 <tcp_enqueue_flags+0x1c0>)
 80109b6:	4867      	ldr	r0, [pc, #412]	@ (8010b54 <tcp_enqueue_flags+0x1c4>)
 80109b8:	f005 f940 	bl	8015c3c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	2b00      	cmp	r3, #0
 80109c0:	d106      	bne.n	80109d0 <tcp_enqueue_flags+0x40>
 80109c2:	4b62      	ldr	r3, [pc, #392]	@ (8010b4c <tcp_enqueue_flags+0x1bc>)
 80109c4:	f240 4213 	movw	r2, #1043	@ 0x413
 80109c8:	4963      	ldr	r1, [pc, #396]	@ (8010b58 <tcp_enqueue_flags+0x1c8>)
 80109ca:	4862      	ldr	r0, [pc, #392]	@ (8010b54 <tcp_enqueue_flags+0x1c4>)
 80109cc:	f005 f936 	bl	8015c3c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80109d0:	78fb      	ldrb	r3, [r7, #3]
 80109d2:	f003 0302 	and.w	r3, r3, #2
 80109d6:	2b00      	cmp	r3, #0
 80109d8:	d001      	beq.n	80109de <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80109da:	2301      	movs	r3, #1
 80109dc:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80109de:	7ffb      	ldrb	r3, [r7, #31]
 80109e0:	009b      	lsls	r3, r3, #2
 80109e2:	b2db      	uxtb	r3, r3
 80109e4:	f003 0304 	and.w	r3, r3, #4
 80109e8:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80109ea:	7dfb      	ldrb	r3, [r7, #23]
 80109ec:	b29b      	uxth	r3, r3
 80109ee:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80109f2:	4619      	mov	r1, r3
 80109f4:	2036      	movs	r0, #54	@ 0x36
 80109f6:	f7fa fffb 	bl	800b9f0 <pbuf_alloc>
 80109fa:	6138      	str	r0, [r7, #16]
 80109fc:	693b      	ldr	r3, [r7, #16]
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	d109      	bne.n	8010a16 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	8b5b      	ldrh	r3, [r3, #26]
 8010a06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010a0a:	b29a      	uxth	r2, r3
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010a10:	f04f 33ff 	mov.w	r3, #4294967295
 8010a14:	e095      	b.n	8010b42 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8010a16:	693b      	ldr	r3, [r7, #16]
 8010a18:	895a      	ldrh	r2, [r3, #10]
 8010a1a:	7dfb      	ldrb	r3, [r7, #23]
 8010a1c:	b29b      	uxth	r3, r3
 8010a1e:	429a      	cmp	r2, r3
 8010a20:	d206      	bcs.n	8010a30 <tcp_enqueue_flags+0xa0>
 8010a22:	4b4a      	ldr	r3, [pc, #296]	@ (8010b4c <tcp_enqueue_flags+0x1bc>)
 8010a24:	f240 4239 	movw	r2, #1081	@ 0x439
 8010a28:	494c      	ldr	r1, [pc, #304]	@ (8010b5c <tcp_enqueue_flags+0x1cc>)
 8010a2a:	484a      	ldr	r0, [pc, #296]	@ (8010b54 <tcp_enqueue_flags+0x1c4>)
 8010a2c:	f005 f906 	bl	8015c3c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8010a34:	78fa      	ldrb	r2, [r7, #3]
 8010a36:	7ffb      	ldrb	r3, [r7, #31]
 8010a38:	9300      	str	r3, [sp, #0]
 8010a3a:	460b      	mov	r3, r1
 8010a3c:	6939      	ldr	r1, [r7, #16]
 8010a3e:	6878      	ldr	r0, [r7, #4]
 8010a40:	f7ff fd72 	bl	8010528 <tcp_create_segment>
 8010a44:	60f8      	str	r0, [r7, #12]
 8010a46:	68fb      	ldr	r3, [r7, #12]
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	d109      	bne.n	8010a60 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	8b5b      	ldrh	r3, [r3, #26]
 8010a50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010a54:	b29a      	uxth	r2, r3
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8010a5e:	e070      	b.n	8010b42 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8010a60:	68fb      	ldr	r3, [r7, #12]
 8010a62:	68db      	ldr	r3, [r3, #12]
 8010a64:	f003 0303 	and.w	r3, r3, #3
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	d006      	beq.n	8010a7a <tcp_enqueue_flags+0xea>
 8010a6c:	4b37      	ldr	r3, [pc, #220]	@ (8010b4c <tcp_enqueue_flags+0x1bc>)
 8010a6e:	f240 4242 	movw	r2, #1090	@ 0x442
 8010a72:	493b      	ldr	r1, [pc, #236]	@ (8010b60 <tcp_enqueue_flags+0x1d0>)
 8010a74:	4837      	ldr	r0, [pc, #220]	@ (8010b54 <tcp_enqueue_flags+0x1c4>)
 8010a76:	f005 f8e1 	bl	8015c3c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8010a7a:	68fb      	ldr	r3, [r7, #12]
 8010a7c:	891b      	ldrh	r3, [r3, #8]
 8010a7e:	2b00      	cmp	r3, #0
 8010a80:	d006      	beq.n	8010a90 <tcp_enqueue_flags+0x100>
 8010a82:	4b32      	ldr	r3, [pc, #200]	@ (8010b4c <tcp_enqueue_flags+0x1bc>)
 8010a84:	f240 4243 	movw	r2, #1091	@ 0x443
 8010a88:	4936      	ldr	r1, [pc, #216]	@ (8010b64 <tcp_enqueue_flags+0x1d4>)
 8010a8a:	4832      	ldr	r0, [pc, #200]	@ (8010b54 <tcp_enqueue_flags+0x1c4>)
 8010a8c:	f005 f8d6 	bl	8015c3c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	d103      	bne.n	8010aa0 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	68fa      	ldr	r2, [r7, #12]
 8010a9c:	66da      	str	r2, [r3, #108]	@ 0x6c
 8010a9e:	e00d      	b.n	8010abc <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010aa4:	61bb      	str	r3, [r7, #24]
 8010aa6:	e002      	b.n	8010aae <tcp_enqueue_flags+0x11e>
 8010aa8:	69bb      	ldr	r3, [r7, #24]
 8010aaa:	681b      	ldr	r3, [r3, #0]
 8010aac:	61bb      	str	r3, [r7, #24]
 8010aae:	69bb      	ldr	r3, [r7, #24]
 8010ab0:	681b      	ldr	r3, [r3, #0]
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	d1f8      	bne.n	8010aa8 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8010ab6:	69bb      	ldr	r3, [r7, #24]
 8010ab8:	68fa      	ldr	r2, [r7, #12]
 8010aba:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	2200      	movs	r2, #0
 8010ac0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8010ac4:	78fb      	ldrb	r3, [r7, #3]
 8010ac6:	f003 0302 	and.w	r3, r3, #2
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	d104      	bne.n	8010ad8 <tcp_enqueue_flags+0x148>
 8010ace:	78fb      	ldrb	r3, [r7, #3]
 8010ad0:	f003 0301 	and.w	r3, r3, #1
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d004      	beq.n	8010ae2 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010adc:	1c5a      	adds	r2, r3, #1
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8010ae2:	78fb      	ldrb	r3, [r7, #3]
 8010ae4:	f003 0301 	and.w	r3, r3, #1
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	d006      	beq.n	8010afa <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	8b5b      	ldrh	r3, [r3, #26]
 8010af0:	f043 0320 	orr.w	r3, r3, #32
 8010af4:	b29a      	uxth	r2, r3
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010afa:	68fb      	ldr	r3, [r7, #12]
 8010afc:	685b      	ldr	r3, [r3, #4]
 8010afe:	4618      	mov	r0, r3
 8010b00:	f7fb fae2 	bl	800c0c8 <pbuf_clen>
 8010b04:	4603      	mov	r3, r0
 8010b06:	461a      	mov	r2, r3
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010b0e:	4413      	add	r3, r2
 8010b10:	b29a      	uxth	r2, r3
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	d00e      	beq.n	8010b40 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010b26:	2b00      	cmp	r3, #0
 8010b28:	d10a      	bne.n	8010b40 <tcp_enqueue_flags+0x1b0>
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	d106      	bne.n	8010b40 <tcp_enqueue_flags+0x1b0>
 8010b32:	4b06      	ldr	r3, [pc, #24]	@ (8010b4c <tcp_enqueue_flags+0x1bc>)
 8010b34:	f240 4265 	movw	r2, #1125	@ 0x465
 8010b38:	490b      	ldr	r1, [pc, #44]	@ (8010b68 <tcp_enqueue_flags+0x1d8>)
 8010b3a:	4806      	ldr	r0, [pc, #24]	@ (8010b54 <tcp_enqueue_flags+0x1c4>)
 8010b3c:	f005 f87e 	bl	8015c3c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8010b40:	2300      	movs	r3, #0
}
 8010b42:	4618      	mov	r0, r3
 8010b44:	3720      	adds	r7, #32
 8010b46:	46bd      	mov	sp, r7
 8010b48:	bd80      	pop	{r7, pc}
 8010b4a:	bf00      	nop
 8010b4c:	0801f890 	.word	0x0801f890
 8010b50:	0801fcb4 	.word	0x0801fcb4
 8010b54:	0801f8e4 	.word	0x0801f8e4
 8010b58:	0801fd0c 	.word	0x0801fd0c
 8010b5c:	0801fd2c 	.word	0x0801fd2c
 8010b60:	0801fd68 	.word	0x0801fd68
 8010b64:	0801fd80 	.word	0x0801fd80
 8010b68:	0801fdac 	.word	0x0801fdac

08010b6c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8010b6c:	b5b0      	push	{r4, r5, r7, lr}
 8010b6e:	b08a      	sub	sp, #40	@ 0x28
 8010b70:	af00      	add	r7, sp, #0
 8010b72:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	d106      	bne.n	8010b88 <tcp_output+0x1c>
 8010b7a:	4b8a      	ldr	r3, [pc, #552]	@ (8010da4 <tcp_output+0x238>)
 8010b7c:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8010b80:	4989      	ldr	r1, [pc, #548]	@ (8010da8 <tcp_output+0x23c>)
 8010b82:	488a      	ldr	r0, [pc, #552]	@ (8010dac <tcp_output+0x240>)
 8010b84:	f005 f85a 	bl	8015c3c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	7d1b      	ldrb	r3, [r3, #20]
 8010b8c:	2b01      	cmp	r3, #1
 8010b8e:	d106      	bne.n	8010b9e <tcp_output+0x32>
 8010b90:	4b84      	ldr	r3, [pc, #528]	@ (8010da4 <tcp_output+0x238>)
 8010b92:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 8010b96:	4986      	ldr	r1, [pc, #536]	@ (8010db0 <tcp_output+0x244>)
 8010b98:	4884      	ldr	r0, [pc, #528]	@ (8010dac <tcp_output+0x240>)
 8010b9a:	f005 f84f 	bl	8015c3c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8010b9e:	4b85      	ldr	r3, [pc, #532]	@ (8010db4 <tcp_output+0x248>)
 8010ba0:	681b      	ldr	r3, [r3, #0]
 8010ba2:	687a      	ldr	r2, [r7, #4]
 8010ba4:	429a      	cmp	r2, r3
 8010ba6:	d101      	bne.n	8010bac <tcp_output+0x40>
    return ERR_OK;
 8010ba8:	2300      	movs	r3, #0
 8010baa:	e1ce      	b.n	8010f4a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8010bb8:	4293      	cmp	r3, r2
 8010bba:	bf28      	it	cs
 8010bbc:	4613      	movcs	r3, r2
 8010bbe:	b29b      	uxth	r3, r3
 8010bc0:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010bc6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 8010bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d10b      	bne.n	8010be6 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	8b5b      	ldrh	r3, [r3, #26]
 8010bd2:	f003 0302 	and.w	r3, r3, #2
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	f000 81aa 	beq.w	8010f30 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8010bdc:	6878      	ldr	r0, [r7, #4]
 8010bde:	f000 fdcb 	bl	8011778 <tcp_send_empty_ack>
 8010be2:	4603      	mov	r3, r0
 8010be4:	e1b1      	b.n	8010f4a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8010be6:	6879      	ldr	r1, [r7, #4]
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	3304      	adds	r3, #4
 8010bec:	461a      	mov	r2, r3
 8010bee:	6878      	ldr	r0, [r7, #4]
 8010bf0:	f7ff fc7e 	bl	80104f0 <tcp_route>
 8010bf4:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8010bf6:	697b      	ldr	r3, [r7, #20]
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	d102      	bne.n	8010c02 <tcp_output+0x96>
    return ERR_RTE;
 8010bfc:	f06f 0303 	mvn.w	r3, #3
 8010c00:	e1a3      	b.n	8010f4a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	d003      	beq.n	8010c10 <tcp_output+0xa4>
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	681b      	ldr	r3, [r3, #0]
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	d111      	bne.n	8010c34 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8010c10:	697b      	ldr	r3, [r7, #20]
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	d002      	beq.n	8010c1c <tcp_output+0xb0>
 8010c16:	697b      	ldr	r3, [r7, #20]
 8010c18:	3304      	adds	r3, #4
 8010c1a:	e000      	b.n	8010c1e <tcp_output+0xb2>
 8010c1c:	2300      	movs	r3, #0
 8010c1e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8010c20:	693b      	ldr	r3, [r7, #16]
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	d102      	bne.n	8010c2c <tcp_output+0xc0>
      return ERR_RTE;
 8010c26:	f06f 0303 	mvn.w	r3, #3
 8010c2a:	e18e      	b.n	8010f4a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8010c2c:	693b      	ldr	r3, [r7, #16]
 8010c2e:	681a      	ldr	r2, [r3, #0]
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8010c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c36:	68db      	ldr	r3, [r3, #12]
 8010c38:	685b      	ldr	r3, [r3, #4]
 8010c3a:	4618      	mov	r0, r3
 8010c3c:	f7f9 fbaa 	bl	800a394 <lwip_htonl>
 8010c40:	4602      	mov	r2, r0
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010c46:	1ad3      	subs	r3, r2, r3
 8010c48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010c4a:	8912      	ldrh	r2, [r2, #8]
 8010c4c:	4413      	add	r3, r2
 8010c4e:	69ba      	ldr	r2, [r7, #24]
 8010c50:	429a      	cmp	r2, r3
 8010c52:	d227      	bcs.n	8010ca4 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8010c5a:	461a      	mov	r2, r3
 8010c5c:	69bb      	ldr	r3, [r7, #24]
 8010c5e:	4293      	cmp	r3, r2
 8010c60:	d114      	bne.n	8010c8c <tcp_output+0x120>
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	d110      	bne.n	8010c8c <tcp_output+0x120>
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	d10b      	bne.n	8010c8c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	2200      	movs	r2, #0
 8010c78:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	2201      	movs	r2, #1
 8010c80:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	2200      	movs	r2, #0
 8010c88:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	8b5b      	ldrh	r3, [r3, #26]
 8010c90:	f003 0302 	and.w	r3, r3, #2
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	f000 814d 	beq.w	8010f34 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8010c9a:	6878      	ldr	r0, [r7, #4]
 8010c9c:	f000 fd6c 	bl	8011778 <tcp_send_empty_ack>
 8010ca0:	4603      	mov	r3, r0
 8010ca2:	e152      	b.n	8010f4a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	2200      	movs	r2, #0
 8010ca8:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010cb0:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8010cb2:	6a3b      	ldr	r3, [r7, #32]
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	f000 811c 	beq.w	8010ef2 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8010cba:	e002      	b.n	8010cc2 <tcp_output+0x156>
 8010cbc:	6a3b      	ldr	r3, [r7, #32]
 8010cbe:	681b      	ldr	r3, [r3, #0]
 8010cc0:	623b      	str	r3, [r7, #32]
 8010cc2:	6a3b      	ldr	r3, [r7, #32]
 8010cc4:	681b      	ldr	r3, [r3, #0]
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	d1f8      	bne.n	8010cbc <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8010cca:	e112      	b.n	8010ef2 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8010ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010cce:	68db      	ldr	r3, [r3, #12]
 8010cd0:	899b      	ldrh	r3, [r3, #12]
 8010cd2:	b29b      	uxth	r3, r3
 8010cd4:	4618      	mov	r0, r3
 8010cd6:	f7f9 fb47 	bl	800a368 <lwip_htons>
 8010cda:	4603      	mov	r3, r0
 8010cdc:	b2db      	uxtb	r3, r3
 8010cde:	f003 0304 	and.w	r3, r3, #4
 8010ce2:	2b00      	cmp	r3, #0
 8010ce4:	d006      	beq.n	8010cf4 <tcp_output+0x188>
 8010ce6:	4b2f      	ldr	r3, [pc, #188]	@ (8010da4 <tcp_output+0x238>)
 8010ce8:	f240 5236 	movw	r2, #1334	@ 0x536
 8010cec:	4932      	ldr	r1, [pc, #200]	@ (8010db8 <tcp_output+0x24c>)
 8010cee:	482f      	ldr	r0, [pc, #188]	@ (8010dac <tcp_output+0x240>)
 8010cf0:	f004 ffa4 	bl	8015c3c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d01f      	beq.n	8010d3c <tcp_output+0x1d0>
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	8b5b      	ldrh	r3, [r3, #26]
 8010d00:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d119      	bne.n	8010d3c <tcp_output+0x1d0>
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	d00b      	beq.n	8010d28 <tcp_output+0x1bc>
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010d14:	681b      	ldr	r3, [r3, #0]
 8010d16:	2b00      	cmp	r3, #0
 8010d18:	d110      	bne.n	8010d3c <tcp_output+0x1d0>
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010d1e:	891a      	ldrh	r2, [r3, #8]
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010d24:	429a      	cmp	r2, r3
 8010d26:	d209      	bcs.n	8010d3c <tcp_output+0x1d0>
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8010d2e:	2b00      	cmp	r3, #0
 8010d30:	d004      	beq.n	8010d3c <tcp_output+0x1d0>
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010d38:	2b08      	cmp	r3, #8
 8010d3a:	d901      	bls.n	8010d40 <tcp_output+0x1d4>
 8010d3c:	2301      	movs	r3, #1
 8010d3e:	e000      	b.n	8010d42 <tcp_output+0x1d6>
 8010d40:	2300      	movs	r3, #0
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	d106      	bne.n	8010d54 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	8b5b      	ldrh	r3, [r3, #26]
 8010d4a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	f000 80e4 	beq.w	8010f1c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	7d1b      	ldrb	r3, [r3, #20]
 8010d58:	2b02      	cmp	r3, #2
 8010d5a:	d00d      	beq.n	8010d78 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8010d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d5e:	68db      	ldr	r3, [r3, #12]
 8010d60:	899b      	ldrh	r3, [r3, #12]
 8010d62:	b29c      	uxth	r4, r3
 8010d64:	2010      	movs	r0, #16
 8010d66:	f7f9 faff 	bl	800a368 <lwip_htons>
 8010d6a:	4603      	mov	r3, r0
 8010d6c:	461a      	mov	r2, r3
 8010d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d70:	68db      	ldr	r3, [r3, #12]
 8010d72:	4322      	orrs	r2, r4
 8010d74:	b292      	uxth	r2, r2
 8010d76:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8010d78:	697a      	ldr	r2, [r7, #20]
 8010d7a:	6879      	ldr	r1, [r7, #4]
 8010d7c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010d7e:	f000 f909 	bl	8010f94 <tcp_output_segment>
 8010d82:	4603      	mov	r3, r0
 8010d84:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8010d86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	d016      	beq.n	8010dbc <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	8b5b      	ldrh	r3, [r3, #26]
 8010d92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010d96:	b29a      	uxth	r2, r3
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	835a      	strh	r2, [r3, #26]
      return err;
 8010d9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010da0:	e0d3      	b.n	8010f4a <tcp_output+0x3de>
 8010da2:	bf00      	nop
 8010da4:	0801f890 	.word	0x0801f890
 8010da8:	0801fdd4 	.word	0x0801fdd4
 8010dac:	0801f8e4 	.word	0x0801f8e4
 8010db0:	0801fdec 	.word	0x0801fdec
 8010db4:	20009290 	.word	0x20009290
 8010db8:	0801fe14 	.word	0x0801fe14
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8010dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010dbe:	681a      	ldr	r2, [r3, #0]
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	7d1b      	ldrb	r3, [r3, #20]
 8010dc8:	2b02      	cmp	r3, #2
 8010dca:	d006      	beq.n	8010dda <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	8b5b      	ldrh	r3, [r3, #26]
 8010dd0:	f023 0303 	bic.w	r3, r3, #3
 8010dd4:	b29a      	uxth	r2, r3
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8010dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ddc:	68db      	ldr	r3, [r3, #12]
 8010dde:	685b      	ldr	r3, [r3, #4]
 8010de0:	4618      	mov	r0, r3
 8010de2:	f7f9 fad7 	bl	800a394 <lwip_htonl>
 8010de6:	4604      	mov	r4, r0
 8010de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010dea:	891b      	ldrh	r3, [r3, #8]
 8010dec:	461d      	mov	r5, r3
 8010dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010df0:	68db      	ldr	r3, [r3, #12]
 8010df2:	899b      	ldrh	r3, [r3, #12]
 8010df4:	b29b      	uxth	r3, r3
 8010df6:	4618      	mov	r0, r3
 8010df8:	f7f9 fab6 	bl	800a368 <lwip_htons>
 8010dfc:	4603      	mov	r3, r0
 8010dfe:	b2db      	uxtb	r3, r3
 8010e00:	f003 0303 	and.w	r3, r3, #3
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d001      	beq.n	8010e0c <tcp_output+0x2a0>
 8010e08:	2301      	movs	r3, #1
 8010e0a:	e000      	b.n	8010e0e <tcp_output+0x2a2>
 8010e0c:	2300      	movs	r3, #0
 8010e0e:	442b      	add	r3, r5
 8010e10:	4423      	add	r3, r4
 8010e12:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010e18:	68bb      	ldr	r3, [r7, #8]
 8010e1a:	1ad3      	subs	r3, r2, r3
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	da02      	bge.n	8010e26 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	68ba      	ldr	r2, [r7, #8]
 8010e24:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8010e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e28:	891b      	ldrh	r3, [r3, #8]
 8010e2a:	461c      	mov	r4, r3
 8010e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e2e:	68db      	ldr	r3, [r3, #12]
 8010e30:	899b      	ldrh	r3, [r3, #12]
 8010e32:	b29b      	uxth	r3, r3
 8010e34:	4618      	mov	r0, r3
 8010e36:	f7f9 fa97 	bl	800a368 <lwip_htons>
 8010e3a:	4603      	mov	r3, r0
 8010e3c:	b2db      	uxtb	r3, r3
 8010e3e:	f003 0303 	and.w	r3, r3, #3
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	d001      	beq.n	8010e4a <tcp_output+0x2de>
 8010e46:	2301      	movs	r3, #1
 8010e48:	e000      	b.n	8010e4c <tcp_output+0x2e0>
 8010e4a:	2300      	movs	r3, #0
 8010e4c:	4423      	add	r3, r4
 8010e4e:	2b00      	cmp	r3, #0
 8010e50:	d049      	beq.n	8010ee6 <tcp_output+0x37a>
      seg->next = NULL;
 8010e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e54:	2200      	movs	r2, #0
 8010e56:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d105      	bne.n	8010e6c <tcp_output+0x300>
        pcb->unacked = seg;
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010e64:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 8010e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e68:	623b      	str	r3, [r7, #32]
 8010e6a:	e03f      	b.n	8010eec <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8010e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e6e:	68db      	ldr	r3, [r3, #12]
 8010e70:	685b      	ldr	r3, [r3, #4]
 8010e72:	4618      	mov	r0, r3
 8010e74:	f7f9 fa8e 	bl	800a394 <lwip_htonl>
 8010e78:	4604      	mov	r4, r0
 8010e7a:	6a3b      	ldr	r3, [r7, #32]
 8010e7c:	68db      	ldr	r3, [r3, #12]
 8010e7e:	685b      	ldr	r3, [r3, #4]
 8010e80:	4618      	mov	r0, r3
 8010e82:	f7f9 fa87 	bl	800a394 <lwip_htonl>
 8010e86:	4603      	mov	r3, r0
 8010e88:	1ae3      	subs	r3, r4, r3
 8010e8a:	2b00      	cmp	r3, #0
 8010e8c:	da24      	bge.n	8010ed8 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	3370      	adds	r3, #112	@ 0x70
 8010e92:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8010e94:	e002      	b.n	8010e9c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8010e96:	69fb      	ldr	r3, [r7, #28]
 8010e98:	681b      	ldr	r3, [r3, #0]
 8010e9a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8010e9c:	69fb      	ldr	r3, [r7, #28]
 8010e9e:	681b      	ldr	r3, [r3, #0]
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	d011      	beq.n	8010ec8 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8010ea4:	69fb      	ldr	r3, [r7, #28]
 8010ea6:	681b      	ldr	r3, [r3, #0]
 8010ea8:	68db      	ldr	r3, [r3, #12]
 8010eaa:	685b      	ldr	r3, [r3, #4]
 8010eac:	4618      	mov	r0, r3
 8010eae:	f7f9 fa71 	bl	800a394 <lwip_htonl>
 8010eb2:	4604      	mov	r4, r0
 8010eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010eb6:	68db      	ldr	r3, [r3, #12]
 8010eb8:	685b      	ldr	r3, [r3, #4]
 8010eba:	4618      	mov	r0, r3
 8010ebc:	f7f9 fa6a 	bl	800a394 <lwip_htonl>
 8010ec0:	4603      	mov	r3, r0
 8010ec2:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	dbe6      	blt.n	8010e96 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8010ec8:	69fb      	ldr	r3, [r7, #28]
 8010eca:	681a      	ldr	r2, [r3, #0]
 8010ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ece:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8010ed0:	69fb      	ldr	r3, [r7, #28]
 8010ed2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010ed4:	601a      	str	r2, [r3, #0]
 8010ed6:	e009      	b.n	8010eec <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8010ed8:	6a3b      	ldr	r3, [r7, #32]
 8010eda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010edc:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8010ede:	6a3b      	ldr	r3, [r7, #32]
 8010ee0:	681b      	ldr	r3, [r3, #0]
 8010ee2:	623b      	str	r3, [r7, #32]
 8010ee4:	e002      	b.n	8010eec <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8010ee6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010ee8:	f7fc fc45 	bl	800d776 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010ef0:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 8010ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ef4:	2b00      	cmp	r3, #0
 8010ef6:	d012      	beq.n	8010f1e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8010ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010efa:	68db      	ldr	r3, [r3, #12]
 8010efc:	685b      	ldr	r3, [r3, #4]
 8010efe:	4618      	mov	r0, r3
 8010f00:	f7f9 fa48 	bl	800a394 <lwip_htonl>
 8010f04:	4602      	mov	r2, r0
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010f0a:	1ad3      	subs	r3, r2, r3
 8010f0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010f0e:	8912      	ldrh	r2, [r2, #8]
 8010f10:	4413      	add	r3, r2
  while (seg != NULL &&
 8010f12:	69ba      	ldr	r2, [r7, #24]
 8010f14:	429a      	cmp	r2, r3
 8010f16:	f4bf aed9 	bcs.w	8010ccc <tcp_output+0x160>
 8010f1a:	e000      	b.n	8010f1e <tcp_output+0x3b2>
      break;
 8010f1c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	d108      	bne.n	8010f38 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	2200      	movs	r2, #0
 8010f2a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8010f2e:	e004      	b.n	8010f3a <tcp_output+0x3ce>
    goto output_done;
 8010f30:	bf00      	nop
 8010f32:	e002      	b.n	8010f3a <tcp_output+0x3ce>
    goto output_done;
 8010f34:	bf00      	nop
 8010f36:	e000      	b.n	8010f3a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8010f38:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	8b5b      	ldrh	r3, [r3, #26]
 8010f3e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010f42:	b29a      	uxth	r2, r3
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8010f48:	2300      	movs	r3, #0
}
 8010f4a:	4618      	mov	r0, r3
 8010f4c:	3728      	adds	r7, #40	@ 0x28
 8010f4e:	46bd      	mov	sp, r7
 8010f50:	bdb0      	pop	{r4, r5, r7, pc}
 8010f52:	bf00      	nop

08010f54 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8010f54:	b580      	push	{r7, lr}
 8010f56:	b082      	sub	sp, #8
 8010f58:	af00      	add	r7, sp, #0
 8010f5a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	2b00      	cmp	r3, #0
 8010f60:	d106      	bne.n	8010f70 <tcp_output_segment_busy+0x1c>
 8010f62:	4b09      	ldr	r3, [pc, #36]	@ (8010f88 <tcp_output_segment_busy+0x34>)
 8010f64:	f240 529a 	movw	r2, #1434	@ 0x59a
 8010f68:	4908      	ldr	r1, [pc, #32]	@ (8010f8c <tcp_output_segment_busy+0x38>)
 8010f6a:	4809      	ldr	r0, [pc, #36]	@ (8010f90 <tcp_output_segment_busy+0x3c>)
 8010f6c:	f004 fe66 	bl	8015c3c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	685b      	ldr	r3, [r3, #4]
 8010f74:	7b9b      	ldrb	r3, [r3, #14]
 8010f76:	2b01      	cmp	r3, #1
 8010f78:	d001      	beq.n	8010f7e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8010f7a:	2301      	movs	r3, #1
 8010f7c:	e000      	b.n	8010f80 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8010f7e:	2300      	movs	r3, #0
}
 8010f80:	4618      	mov	r0, r3
 8010f82:	3708      	adds	r7, #8
 8010f84:	46bd      	mov	sp, r7
 8010f86:	bd80      	pop	{r7, pc}
 8010f88:	0801f890 	.word	0x0801f890
 8010f8c:	0801fe2c 	.word	0x0801fe2c
 8010f90:	0801f8e4 	.word	0x0801f8e4

08010f94 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8010f94:	b5b0      	push	{r4, r5, r7, lr}
 8010f96:	b08c      	sub	sp, #48	@ 0x30
 8010f98:	af04      	add	r7, sp, #16
 8010f9a:	60f8      	str	r0, [r7, #12]
 8010f9c:	60b9      	str	r1, [r7, #8]
 8010f9e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8010fa0:	68fb      	ldr	r3, [r7, #12]
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	d106      	bne.n	8010fb4 <tcp_output_segment+0x20>
 8010fa6:	4b64      	ldr	r3, [pc, #400]	@ (8011138 <tcp_output_segment+0x1a4>)
 8010fa8:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 8010fac:	4963      	ldr	r1, [pc, #396]	@ (801113c <tcp_output_segment+0x1a8>)
 8010fae:	4864      	ldr	r0, [pc, #400]	@ (8011140 <tcp_output_segment+0x1ac>)
 8010fb0:	f004 fe44 	bl	8015c3c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8010fb4:	68bb      	ldr	r3, [r7, #8]
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	d106      	bne.n	8010fc8 <tcp_output_segment+0x34>
 8010fba:	4b5f      	ldr	r3, [pc, #380]	@ (8011138 <tcp_output_segment+0x1a4>)
 8010fbc:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8010fc0:	4960      	ldr	r1, [pc, #384]	@ (8011144 <tcp_output_segment+0x1b0>)
 8010fc2:	485f      	ldr	r0, [pc, #380]	@ (8011140 <tcp_output_segment+0x1ac>)
 8010fc4:	f004 fe3a 	bl	8015c3c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	d106      	bne.n	8010fdc <tcp_output_segment+0x48>
 8010fce:	4b5a      	ldr	r3, [pc, #360]	@ (8011138 <tcp_output_segment+0x1a4>)
 8010fd0:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 8010fd4:	495c      	ldr	r1, [pc, #368]	@ (8011148 <tcp_output_segment+0x1b4>)
 8010fd6:	485a      	ldr	r0, [pc, #360]	@ (8011140 <tcp_output_segment+0x1ac>)
 8010fd8:	f004 fe30 	bl	8015c3c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8010fdc:	68f8      	ldr	r0, [r7, #12]
 8010fde:	f7ff ffb9 	bl	8010f54 <tcp_output_segment_busy>
 8010fe2:	4603      	mov	r3, r0
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	d001      	beq.n	8010fec <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8010fe8:	2300      	movs	r3, #0
 8010fea:	e0a1      	b.n	8011130 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8010fec:	68bb      	ldr	r3, [r7, #8]
 8010fee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010ff0:	68fb      	ldr	r3, [r7, #12]
 8010ff2:	68dc      	ldr	r4, [r3, #12]
 8010ff4:	4610      	mov	r0, r2
 8010ff6:	f7f9 f9cd 	bl	800a394 <lwip_htonl>
 8010ffa:	4603      	mov	r3, r0
 8010ffc:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8010ffe:	68bb      	ldr	r3, [r7, #8]
 8011000:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8011002:	68fb      	ldr	r3, [r7, #12]
 8011004:	68dc      	ldr	r4, [r3, #12]
 8011006:	4610      	mov	r0, r2
 8011008:	f7f9 f9ae 	bl	800a368 <lwip_htons>
 801100c:	4603      	mov	r3, r0
 801100e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8011010:	68bb      	ldr	r3, [r7, #8]
 8011012:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011014:	68ba      	ldr	r2, [r7, #8]
 8011016:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8011018:	441a      	add	r2, r3
 801101a:	68bb      	ldr	r3, [r7, #8]
 801101c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801101e:	68fb      	ldr	r3, [r7, #12]
 8011020:	68db      	ldr	r3, [r3, #12]
 8011022:	3314      	adds	r3, #20
 8011024:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8011026:	68fb      	ldr	r3, [r7, #12]
 8011028:	7a9b      	ldrb	r3, [r3, #10]
 801102a:	f003 0301 	and.w	r3, r3, #1
 801102e:	2b00      	cmp	r3, #0
 8011030:	d015      	beq.n	801105e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8011032:	68bb      	ldr	r3, [r7, #8]
 8011034:	3304      	adds	r3, #4
 8011036:	461a      	mov	r2, r3
 8011038:	6879      	ldr	r1, [r7, #4]
 801103a:	f44f 7006 	mov.w	r0, #536	@ 0x218
 801103e:	f7fc fe91 	bl	800dd64 <tcp_eff_send_mss_netif>
 8011042:	4603      	mov	r3, r0
 8011044:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8011046:	8b7b      	ldrh	r3, [r7, #26]
 8011048:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 801104c:	4618      	mov	r0, r3
 801104e:	f7f9 f9a1 	bl	800a394 <lwip_htonl>
 8011052:	4602      	mov	r2, r0
 8011054:	69fb      	ldr	r3, [r7, #28]
 8011056:	601a      	str	r2, [r3, #0]
    opts += 1;
 8011058:	69fb      	ldr	r3, [r7, #28]
 801105a:	3304      	adds	r3, #4
 801105c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801105e:	68bb      	ldr	r3, [r7, #8]
 8011060:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8011064:	2b00      	cmp	r3, #0
 8011066:	da02      	bge.n	801106e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8011068:	68bb      	ldr	r3, [r7, #8]
 801106a:	2200      	movs	r2, #0
 801106c:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 801106e:	68bb      	ldr	r3, [r7, #8]
 8011070:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011072:	2b00      	cmp	r3, #0
 8011074:	d10c      	bne.n	8011090 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8011076:	4b35      	ldr	r3, [pc, #212]	@ (801114c <tcp_output_segment+0x1b8>)
 8011078:	681a      	ldr	r2, [r3, #0]
 801107a:	68bb      	ldr	r3, [r7, #8]
 801107c:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801107e:	68fb      	ldr	r3, [r7, #12]
 8011080:	68db      	ldr	r3, [r3, #12]
 8011082:	685b      	ldr	r3, [r3, #4]
 8011084:	4618      	mov	r0, r3
 8011086:	f7f9 f985 	bl	800a394 <lwip_htonl>
 801108a:	4602      	mov	r2, r0
 801108c:	68bb      	ldr	r3, [r7, #8]
 801108e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8011090:	68fb      	ldr	r3, [r7, #12]
 8011092:	68da      	ldr	r2, [r3, #12]
 8011094:	68fb      	ldr	r3, [r7, #12]
 8011096:	685b      	ldr	r3, [r3, #4]
 8011098:	685b      	ldr	r3, [r3, #4]
 801109a:	1ad3      	subs	r3, r2, r3
 801109c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801109e:	68fb      	ldr	r3, [r7, #12]
 80110a0:	685b      	ldr	r3, [r3, #4]
 80110a2:	8959      	ldrh	r1, [r3, #10]
 80110a4:	68fb      	ldr	r3, [r7, #12]
 80110a6:	685b      	ldr	r3, [r3, #4]
 80110a8:	8b3a      	ldrh	r2, [r7, #24]
 80110aa:	1a8a      	subs	r2, r1, r2
 80110ac:	b292      	uxth	r2, r2
 80110ae:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80110b0:	68fb      	ldr	r3, [r7, #12]
 80110b2:	685b      	ldr	r3, [r3, #4]
 80110b4:	8919      	ldrh	r1, [r3, #8]
 80110b6:	68fb      	ldr	r3, [r7, #12]
 80110b8:	685b      	ldr	r3, [r3, #4]
 80110ba:	8b3a      	ldrh	r2, [r7, #24]
 80110bc:	1a8a      	subs	r2, r1, r2
 80110be:	b292      	uxth	r2, r2
 80110c0:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80110c2:	68fb      	ldr	r3, [r7, #12]
 80110c4:	685b      	ldr	r3, [r3, #4]
 80110c6:	68fa      	ldr	r2, [r7, #12]
 80110c8:	68d2      	ldr	r2, [r2, #12]
 80110ca:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80110cc:	68fb      	ldr	r3, [r7, #12]
 80110ce:	68db      	ldr	r3, [r3, #12]
 80110d0:	2200      	movs	r2, #0
 80110d2:	741a      	strb	r2, [r3, #16]
 80110d4:	2200      	movs	r2, #0
 80110d6:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80110d8:	68fb      	ldr	r3, [r7, #12]
 80110da:	68da      	ldr	r2, [r3, #12]
 80110dc:	68fb      	ldr	r3, [r7, #12]
 80110de:	7a9b      	ldrb	r3, [r3, #10]
 80110e0:	f003 0301 	and.w	r3, r3, #1
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	d001      	beq.n	80110ec <tcp_output_segment+0x158>
 80110e8:	2318      	movs	r3, #24
 80110ea:	e000      	b.n	80110ee <tcp_output_segment+0x15a>
 80110ec:	2314      	movs	r3, #20
 80110ee:	4413      	add	r3, r2
 80110f0:	69fa      	ldr	r2, [r7, #28]
 80110f2:	429a      	cmp	r2, r3
 80110f4:	d006      	beq.n	8011104 <tcp_output_segment+0x170>
 80110f6:	4b10      	ldr	r3, [pc, #64]	@ (8011138 <tcp_output_segment+0x1a4>)
 80110f8:	f240 621c 	movw	r2, #1564	@ 0x61c
 80110fc:	4914      	ldr	r1, [pc, #80]	@ (8011150 <tcp_output_segment+0x1bc>)
 80110fe:	4810      	ldr	r0, [pc, #64]	@ (8011140 <tcp_output_segment+0x1ac>)
 8011100:	f004 fd9c 	bl	8015c3c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8011104:	68fb      	ldr	r3, [r7, #12]
 8011106:	6858      	ldr	r0, [r3, #4]
 8011108:	68b9      	ldr	r1, [r7, #8]
 801110a:	68bb      	ldr	r3, [r7, #8]
 801110c:	1d1c      	adds	r4, r3, #4
 801110e:	68bb      	ldr	r3, [r7, #8]
 8011110:	7add      	ldrb	r5, [r3, #11]
 8011112:	68bb      	ldr	r3, [r7, #8]
 8011114:	7a9b      	ldrb	r3, [r3, #10]
 8011116:	687a      	ldr	r2, [r7, #4]
 8011118:	9202      	str	r2, [sp, #8]
 801111a:	2206      	movs	r2, #6
 801111c:	9201      	str	r2, [sp, #4]
 801111e:	9300      	str	r3, [sp, #0]
 8011120:	462b      	mov	r3, r5
 8011122:	4622      	mov	r2, r4
 8011124:	f002 fdc6 	bl	8013cb4 <ip4_output_if>
 8011128:	4603      	mov	r3, r0
 801112a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801112c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011130:	4618      	mov	r0, r3
 8011132:	3720      	adds	r7, #32
 8011134:	46bd      	mov	sp, r7
 8011136:	bdb0      	pop	{r4, r5, r7, pc}
 8011138:	0801f890 	.word	0x0801f890
 801113c:	0801fe54 	.word	0x0801fe54
 8011140:	0801f8e4 	.word	0x0801f8e4
 8011144:	0801fe74 	.word	0x0801fe74
 8011148:	0801fe94 	.word	0x0801fe94
 801114c:	20009244 	.word	0x20009244
 8011150:	0801feb8 	.word	0x0801feb8

08011154 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8011154:	b5b0      	push	{r4, r5, r7, lr}
 8011156:	b084      	sub	sp, #16
 8011158:	af00      	add	r7, sp, #0
 801115a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	2b00      	cmp	r3, #0
 8011160:	d106      	bne.n	8011170 <tcp_rexmit_rto_prepare+0x1c>
 8011162:	4b31      	ldr	r3, [pc, #196]	@ (8011228 <tcp_rexmit_rto_prepare+0xd4>)
 8011164:	f240 6263 	movw	r2, #1635	@ 0x663
 8011168:	4930      	ldr	r1, [pc, #192]	@ (801122c <tcp_rexmit_rto_prepare+0xd8>)
 801116a:	4831      	ldr	r0, [pc, #196]	@ (8011230 <tcp_rexmit_rto_prepare+0xdc>)
 801116c:	f004 fd66 	bl	8015c3c <iprintf>

  if (pcb->unacked == NULL) {
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011174:	2b00      	cmp	r3, #0
 8011176:	d102      	bne.n	801117e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8011178:	f06f 0305 	mvn.w	r3, #5
 801117c:	e050      	b.n	8011220 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011182:	60fb      	str	r3, [r7, #12]
 8011184:	e00b      	b.n	801119e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8011186:	68f8      	ldr	r0, [r7, #12]
 8011188:	f7ff fee4 	bl	8010f54 <tcp_output_segment_busy>
 801118c:	4603      	mov	r3, r0
 801118e:	2b00      	cmp	r3, #0
 8011190:	d002      	beq.n	8011198 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8011192:	f06f 0305 	mvn.w	r3, #5
 8011196:	e043      	b.n	8011220 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8011198:	68fb      	ldr	r3, [r7, #12]
 801119a:	681b      	ldr	r3, [r3, #0]
 801119c:	60fb      	str	r3, [r7, #12]
 801119e:	68fb      	ldr	r3, [r7, #12]
 80111a0:	681b      	ldr	r3, [r3, #0]
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	d1ef      	bne.n	8011186 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80111a6:	68f8      	ldr	r0, [r7, #12]
 80111a8:	f7ff fed4 	bl	8010f54 <tcp_output_segment_busy>
 80111ac:	4603      	mov	r3, r0
 80111ae:	2b00      	cmp	r3, #0
 80111b0:	d002      	beq.n	80111b8 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80111b2:	f06f 0305 	mvn.w	r3, #5
 80111b6:	e033      	b.n	8011220 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80111bc:	68fb      	ldr	r3, [r7, #12]
 80111be:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	2200      	movs	r2, #0
 80111cc:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	8b5b      	ldrh	r3, [r3, #26]
 80111d2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80111d6:	b29a      	uxth	r2, r3
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80111dc:	68fb      	ldr	r3, [r7, #12]
 80111de:	68db      	ldr	r3, [r3, #12]
 80111e0:	685b      	ldr	r3, [r3, #4]
 80111e2:	4618      	mov	r0, r3
 80111e4:	f7f9 f8d6 	bl	800a394 <lwip_htonl>
 80111e8:	4604      	mov	r4, r0
 80111ea:	68fb      	ldr	r3, [r7, #12]
 80111ec:	891b      	ldrh	r3, [r3, #8]
 80111ee:	461d      	mov	r5, r3
 80111f0:	68fb      	ldr	r3, [r7, #12]
 80111f2:	68db      	ldr	r3, [r3, #12]
 80111f4:	899b      	ldrh	r3, [r3, #12]
 80111f6:	b29b      	uxth	r3, r3
 80111f8:	4618      	mov	r0, r3
 80111fa:	f7f9 f8b5 	bl	800a368 <lwip_htons>
 80111fe:	4603      	mov	r3, r0
 8011200:	b2db      	uxtb	r3, r3
 8011202:	f003 0303 	and.w	r3, r3, #3
 8011206:	2b00      	cmp	r3, #0
 8011208:	d001      	beq.n	801120e <tcp_rexmit_rto_prepare+0xba>
 801120a:	2301      	movs	r3, #1
 801120c:	e000      	b.n	8011210 <tcp_rexmit_rto_prepare+0xbc>
 801120e:	2300      	movs	r3, #0
 8011210:	442b      	add	r3, r5
 8011212:	18e2      	adds	r2, r4, r3
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	2200      	movs	r2, #0
 801121c:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 801121e:	2300      	movs	r3, #0
}
 8011220:	4618      	mov	r0, r3
 8011222:	3710      	adds	r7, #16
 8011224:	46bd      	mov	sp, r7
 8011226:	bdb0      	pop	{r4, r5, r7, pc}
 8011228:	0801f890 	.word	0x0801f890
 801122c:	0801fecc 	.word	0x0801fecc
 8011230:	0801f8e4 	.word	0x0801f8e4

08011234 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8011234:	b580      	push	{r7, lr}
 8011236:	b082      	sub	sp, #8
 8011238:	af00      	add	r7, sp, #0
 801123a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	2b00      	cmp	r3, #0
 8011240:	d106      	bne.n	8011250 <tcp_rexmit_rto_commit+0x1c>
 8011242:	4b0d      	ldr	r3, [pc, #52]	@ (8011278 <tcp_rexmit_rto_commit+0x44>)
 8011244:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8011248:	490c      	ldr	r1, [pc, #48]	@ (801127c <tcp_rexmit_rto_commit+0x48>)
 801124a:	480d      	ldr	r0, [pc, #52]	@ (8011280 <tcp_rexmit_rto_commit+0x4c>)
 801124c:	f004 fcf6 	bl	8015c3c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8011256:	2bff      	cmp	r3, #255	@ 0xff
 8011258:	d007      	beq.n	801126a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8011260:	3301      	adds	r3, #1
 8011262:	b2da      	uxtb	r2, r3
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801126a:	6878      	ldr	r0, [r7, #4]
 801126c:	f7ff fc7e 	bl	8010b6c <tcp_output>
}
 8011270:	bf00      	nop
 8011272:	3708      	adds	r7, #8
 8011274:	46bd      	mov	sp, r7
 8011276:	bd80      	pop	{r7, pc}
 8011278:	0801f890 	.word	0x0801f890
 801127c:	0801fef0 	.word	0x0801fef0
 8011280:	0801f8e4 	.word	0x0801f8e4

08011284 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8011284:	b580      	push	{r7, lr}
 8011286:	b082      	sub	sp, #8
 8011288:	af00      	add	r7, sp, #0
 801128a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	2b00      	cmp	r3, #0
 8011290:	d106      	bne.n	80112a0 <tcp_rexmit_rto+0x1c>
 8011292:	4b0a      	ldr	r3, [pc, #40]	@ (80112bc <tcp_rexmit_rto+0x38>)
 8011294:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 8011298:	4909      	ldr	r1, [pc, #36]	@ (80112c0 <tcp_rexmit_rto+0x3c>)
 801129a:	480a      	ldr	r0, [pc, #40]	@ (80112c4 <tcp_rexmit_rto+0x40>)
 801129c:	f004 fcce 	bl	8015c3c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80112a0:	6878      	ldr	r0, [r7, #4]
 80112a2:	f7ff ff57 	bl	8011154 <tcp_rexmit_rto_prepare>
 80112a6:	4603      	mov	r3, r0
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	d102      	bne.n	80112b2 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80112ac:	6878      	ldr	r0, [r7, #4]
 80112ae:	f7ff ffc1 	bl	8011234 <tcp_rexmit_rto_commit>
  }
}
 80112b2:	bf00      	nop
 80112b4:	3708      	adds	r7, #8
 80112b6:	46bd      	mov	sp, r7
 80112b8:	bd80      	pop	{r7, pc}
 80112ba:	bf00      	nop
 80112bc:	0801f890 	.word	0x0801f890
 80112c0:	0801ff14 	.word	0x0801ff14
 80112c4:	0801f8e4 	.word	0x0801f8e4

080112c8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80112c8:	b590      	push	{r4, r7, lr}
 80112ca:	b085      	sub	sp, #20
 80112cc:	af00      	add	r7, sp, #0
 80112ce:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	2b00      	cmp	r3, #0
 80112d4:	d106      	bne.n	80112e4 <tcp_rexmit+0x1c>
 80112d6:	4b2f      	ldr	r3, [pc, #188]	@ (8011394 <tcp_rexmit+0xcc>)
 80112d8:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 80112dc:	492e      	ldr	r1, [pc, #184]	@ (8011398 <tcp_rexmit+0xd0>)
 80112de:	482f      	ldr	r0, [pc, #188]	@ (801139c <tcp_rexmit+0xd4>)
 80112e0:	f004 fcac 	bl	8015c3c <iprintf>

  if (pcb->unacked == NULL) {
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	d102      	bne.n	80112f2 <tcp_rexmit+0x2a>
    return ERR_VAL;
 80112ec:	f06f 0305 	mvn.w	r3, #5
 80112f0:	e04c      	b.n	801138c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80112f6:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80112f8:	68b8      	ldr	r0, [r7, #8]
 80112fa:	f7ff fe2b 	bl	8010f54 <tcp_output_segment_busy>
 80112fe:	4603      	mov	r3, r0
 8011300:	2b00      	cmp	r3, #0
 8011302:	d002      	beq.n	801130a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8011304:	f06f 0305 	mvn.w	r3, #5
 8011308:	e040      	b.n	801138c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801130a:	68bb      	ldr	r3, [r7, #8]
 801130c:	681a      	ldr	r2, [r3, #0]
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	336c      	adds	r3, #108	@ 0x6c
 8011316:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8011318:	e002      	b.n	8011320 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801131a:	68fb      	ldr	r3, [r7, #12]
 801131c:	681b      	ldr	r3, [r3, #0]
 801131e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8011320:	68fb      	ldr	r3, [r7, #12]
 8011322:	681b      	ldr	r3, [r3, #0]
 8011324:	2b00      	cmp	r3, #0
 8011326:	d011      	beq.n	801134c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8011328:	68fb      	ldr	r3, [r7, #12]
 801132a:	681b      	ldr	r3, [r3, #0]
 801132c:	68db      	ldr	r3, [r3, #12]
 801132e:	685b      	ldr	r3, [r3, #4]
 8011330:	4618      	mov	r0, r3
 8011332:	f7f9 f82f 	bl	800a394 <lwip_htonl>
 8011336:	4604      	mov	r4, r0
 8011338:	68bb      	ldr	r3, [r7, #8]
 801133a:	68db      	ldr	r3, [r3, #12]
 801133c:	685b      	ldr	r3, [r3, #4]
 801133e:	4618      	mov	r0, r3
 8011340:	f7f9 f828 	bl	800a394 <lwip_htonl>
 8011344:	4603      	mov	r3, r0
 8011346:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8011348:	2b00      	cmp	r3, #0
 801134a:	dbe6      	blt.n	801131a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801134c:	68fb      	ldr	r3, [r7, #12]
 801134e:	681a      	ldr	r2, [r3, #0]
 8011350:	68bb      	ldr	r3, [r7, #8]
 8011352:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8011354:	68fb      	ldr	r3, [r7, #12]
 8011356:	68ba      	ldr	r2, [r7, #8]
 8011358:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801135a:	68bb      	ldr	r3, [r7, #8]
 801135c:	681b      	ldr	r3, [r3, #0]
 801135e:	2b00      	cmp	r3, #0
 8011360:	d103      	bne.n	801136a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	2200      	movs	r2, #0
 8011366:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8011370:	2bff      	cmp	r3, #255	@ 0xff
 8011372:	d007      	beq.n	8011384 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801137a:	3301      	adds	r3, #1
 801137c:	b2da      	uxtb	r2, r3
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	2200      	movs	r2, #0
 8011388:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801138a:	2300      	movs	r3, #0
}
 801138c:	4618      	mov	r0, r3
 801138e:	3714      	adds	r7, #20
 8011390:	46bd      	mov	sp, r7
 8011392:	bd90      	pop	{r4, r7, pc}
 8011394:	0801f890 	.word	0x0801f890
 8011398:	0801ff30 	.word	0x0801ff30
 801139c:	0801f8e4 	.word	0x0801f8e4

080113a0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80113a0:	b580      	push	{r7, lr}
 80113a2:	b082      	sub	sp, #8
 80113a4:	af00      	add	r7, sp, #0
 80113a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d106      	bne.n	80113bc <tcp_rexmit_fast+0x1c>
 80113ae:	4b2a      	ldr	r3, [pc, #168]	@ (8011458 <tcp_rexmit_fast+0xb8>)
 80113b0:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 80113b4:	4929      	ldr	r1, [pc, #164]	@ (801145c <tcp_rexmit_fast+0xbc>)
 80113b6:	482a      	ldr	r0, [pc, #168]	@ (8011460 <tcp_rexmit_fast+0xc0>)
 80113b8:	f004 fc40 	bl	8015c3c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80113c0:	2b00      	cmp	r3, #0
 80113c2:	d044      	beq.n	801144e <tcp_rexmit_fast+0xae>
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	8b5b      	ldrh	r3, [r3, #26]
 80113c8:	f003 0304 	and.w	r3, r3, #4
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	d13e      	bne.n	801144e <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80113d0:	6878      	ldr	r0, [r7, #4]
 80113d2:	f7ff ff79 	bl	80112c8 <tcp_rexmit>
 80113d6:	4603      	mov	r3, r0
 80113d8:	2b00      	cmp	r3, #0
 80113da:	d138      	bne.n	801144e <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80113e8:	4293      	cmp	r3, r2
 80113ea:	bf28      	it	cs
 80113ec:	4613      	movcs	r3, r2
 80113ee:	b29b      	uxth	r3, r3
 80113f0:	0fda      	lsrs	r2, r3, #31
 80113f2:	4413      	add	r3, r2
 80113f4:	105b      	asrs	r3, r3, #1
 80113f6:	b29a      	uxth	r2, r3
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8011404:	461a      	mov	r2, r3
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801140a:	005b      	lsls	r3, r3, #1
 801140c:	429a      	cmp	r2, r3
 801140e:	d206      	bcs.n	801141e <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011414:	005b      	lsls	r3, r3, #1
 8011416:	b29a      	uxth	r2, r3
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011428:	4619      	mov	r1, r3
 801142a:	0049      	lsls	r1, r1, #1
 801142c:	440b      	add	r3, r1
 801142e:	b29b      	uxth	r3, r3
 8011430:	4413      	add	r3, r2
 8011432:	b29a      	uxth	r2, r3
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	8b5b      	ldrh	r3, [r3, #26]
 801143e:	f043 0304 	orr.w	r3, r3, #4
 8011442:	b29a      	uxth	r2, r3
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	2200      	movs	r2, #0
 801144c:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 801144e:	bf00      	nop
 8011450:	3708      	adds	r7, #8
 8011452:	46bd      	mov	sp, r7
 8011454:	bd80      	pop	{r7, pc}
 8011456:	bf00      	nop
 8011458:	0801f890 	.word	0x0801f890
 801145c:	0801ff48 	.word	0x0801ff48
 8011460:	0801f8e4 	.word	0x0801f8e4

08011464 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8011464:	b580      	push	{r7, lr}
 8011466:	b086      	sub	sp, #24
 8011468:	af00      	add	r7, sp, #0
 801146a:	60f8      	str	r0, [r7, #12]
 801146c:	607b      	str	r3, [r7, #4]
 801146e:	460b      	mov	r3, r1
 8011470:	817b      	strh	r3, [r7, #10]
 8011472:	4613      	mov	r3, r2
 8011474:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8011476:	897a      	ldrh	r2, [r7, #10]
 8011478:	893b      	ldrh	r3, [r7, #8]
 801147a:	4413      	add	r3, r2
 801147c:	b29b      	uxth	r3, r3
 801147e:	3314      	adds	r3, #20
 8011480:	b29b      	uxth	r3, r3
 8011482:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8011486:	4619      	mov	r1, r3
 8011488:	2022      	movs	r0, #34	@ 0x22
 801148a:	f7fa fab1 	bl	800b9f0 <pbuf_alloc>
 801148e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8011490:	697b      	ldr	r3, [r7, #20]
 8011492:	2b00      	cmp	r3, #0
 8011494:	d04d      	beq.n	8011532 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8011496:	897b      	ldrh	r3, [r7, #10]
 8011498:	3313      	adds	r3, #19
 801149a:	697a      	ldr	r2, [r7, #20]
 801149c:	8952      	ldrh	r2, [r2, #10]
 801149e:	4293      	cmp	r3, r2
 80114a0:	db06      	blt.n	80114b0 <tcp_output_alloc_header_common+0x4c>
 80114a2:	4b26      	ldr	r3, [pc, #152]	@ (801153c <tcp_output_alloc_header_common+0xd8>)
 80114a4:	f240 7223 	movw	r2, #1827	@ 0x723
 80114a8:	4925      	ldr	r1, [pc, #148]	@ (8011540 <tcp_output_alloc_header_common+0xdc>)
 80114aa:	4826      	ldr	r0, [pc, #152]	@ (8011544 <tcp_output_alloc_header_common+0xe0>)
 80114ac:	f004 fbc6 	bl	8015c3c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80114b0:	697b      	ldr	r3, [r7, #20]
 80114b2:	685b      	ldr	r3, [r3, #4]
 80114b4:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80114b6:	8c3b      	ldrh	r3, [r7, #32]
 80114b8:	4618      	mov	r0, r3
 80114ba:	f7f8 ff55 	bl	800a368 <lwip_htons>
 80114be:	4603      	mov	r3, r0
 80114c0:	461a      	mov	r2, r3
 80114c2:	693b      	ldr	r3, [r7, #16]
 80114c4:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80114c6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80114c8:	4618      	mov	r0, r3
 80114ca:	f7f8 ff4d 	bl	800a368 <lwip_htons>
 80114ce:	4603      	mov	r3, r0
 80114d0:	461a      	mov	r2, r3
 80114d2:	693b      	ldr	r3, [r7, #16]
 80114d4:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80114d6:	693b      	ldr	r3, [r7, #16]
 80114d8:	687a      	ldr	r2, [r7, #4]
 80114da:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80114dc:	68f8      	ldr	r0, [r7, #12]
 80114de:	f7f8 ff59 	bl	800a394 <lwip_htonl>
 80114e2:	4602      	mov	r2, r0
 80114e4:	693b      	ldr	r3, [r7, #16]
 80114e6:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80114e8:	897b      	ldrh	r3, [r7, #10]
 80114ea:	089b      	lsrs	r3, r3, #2
 80114ec:	b29b      	uxth	r3, r3
 80114ee:	3305      	adds	r3, #5
 80114f0:	b29b      	uxth	r3, r3
 80114f2:	031b      	lsls	r3, r3, #12
 80114f4:	b29a      	uxth	r2, r3
 80114f6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80114fa:	b29b      	uxth	r3, r3
 80114fc:	4313      	orrs	r3, r2
 80114fe:	b29b      	uxth	r3, r3
 8011500:	4618      	mov	r0, r3
 8011502:	f7f8 ff31 	bl	800a368 <lwip_htons>
 8011506:	4603      	mov	r3, r0
 8011508:	461a      	mov	r2, r3
 801150a:	693b      	ldr	r3, [r7, #16]
 801150c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801150e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8011510:	4618      	mov	r0, r3
 8011512:	f7f8 ff29 	bl	800a368 <lwip_htons>
 8011516:	4603      	mov	r3, r0
 8011518:	461a      	mov	r2, r3
 801151a:	693b      	ldr	r3, [r7, #16]
 801151c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801151e:	693b      	ldr	r3, [r7, #16]
 8011520:	2200      	movs	r2, #0
 8011522:	741a      	strb	r2, [r3, #16]
 8011524:	2200      	movs	r2, #0
 8011526:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8011528:	693b      	ldr	r3, [r7, #16]
 801152a:	2200      	movs	r2, #0
 801152c:	749a      	strb	r2, [r3, #18]
 801152e:	2200      	movs	r2, #0
 8011530:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8011532:	697b      	ldr	r3, [r7, #20]
}
 8011534:	4618      	mov	r0, r3
 8011536:	3718      	adds	r7, #24
 8011538:	46bd      	mov	sp, r7
 801153a:	bd80      	pop	{r7, pc}
 801153c:	0801f890 	.word	0x0801f890
 8011540:	0801ff68 	.word	0x0801ff68
 8011544:	0801f8e4 	.word	0x0801f8e4

08011548 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8011548:	b5b0      	push	{r4, r5, r7, lr}
 801154a:	b08a      	sub	sp, #40	@ 0x28
 801154c:	af04      	add	r7, sp, #16
 801154e:	60f8      	str	r0, [r7, #12]
 8011550:	607b      	str	r3, [r7, #4]
 8011552:	460b      	mov	r3, r1
 8011554:	817b      	strh	r3, [r7, #10]
 8011556:	4613      	mov	r3, r2
 8011558:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801155a:	68fb      	ldr	r3, [r7, #12]
 801155c:	2b00      	cmp	r3, #0
 801155e:	d106      	bne.n	801156e <tcp_output_alloc_header+0x26>
 8011560:	4b15      	ldr	r3, [pc, #84]	@ (80115b8 <tcp_output_alloc_header+0x70>)
 8011562:	f240 7242 	movw	r2, #1858	@ 0x742
 8011566:	4915      	ldr	r1, [pc, #84]	@ (80115bc <tcp_output_alloc_header+0x74>)
 8011568:	4815      	ldr	r0, [pc, #84]	@ (80115c0 <tcp_output_alloc_header+0x78>)
 801156a:	f004 fb67 	bl	8015c3c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801156e:	68fb      	ldr	r3, [r7, #12]
 8011570:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8011572:	68fb      	ldr	r3, [r7, #12]
 8011574:	8adb      	ldrh	r3, [r3, #22]
 8011576:	68fa      	ldr	r2, [r7, #12]
 8011578:	8b12      	ldrh	r2, [r2, #24]
 801157a:	68f9      	ldr	r1, [r7, #12]
 801157c:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 801157e:	893d      	ldrh	r5, [r7, #8]
 8011580:	897c      	ldrh	r4, [r7, #10]
 8011582:	9103      	str	r1, [sp, #12]
 8011584:	2110      	movs	r1, #16
 8011586:	9102      	str	r1, [sp, #8]
 8011588:	9201      	str	r2, [sp, #4]
 801158a:	9300      	str	r3, [sp, #0]
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	462a      	mov	r2, r5
 8011590:	4621      	mov	r1, r4
 8011592:	f7ff ff67 	bl	8011464 <tcp_output_alloc_header_common>
 8011596:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8011598:	697b      	ldr	r3, [r7, #20]
 801159a:	2b00      	cmp	r3, #0
 801159c:	d006      	beq.n	80115ac <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801159e:	68fb      	ldr	r3, [r7, #12]
 80115a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80115a2:	68fa      	ldr	r2, [r7, #12]
 80115a4:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 80115a6:	441a      	add	r2, r3
 80115a8:	68fb      	ldr	r3, [r7, #12]
 80115aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 80115ac:	697b      	ldr	r3, [r7, #20]
}
 80115ae:	4618      	mov	r0, r3
 80115b0:	3718      	adds	r7, #24
 80115b2:	46bd      	mov	sp, r7
 80115b4:	bdb0      	pop	{r4, r5, r7, pc}
 80115b6:	bf00      	nop
 80115b8:	0801f890 	.word	0x0801f890
 80115bc:	0801ff98 	.word	0x0801ff98
 80115c0:	0801f8e4 	.word	0x0801f8e4

080115c4 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80115c4:	b580      	push	{r7, lr}
 80115c6:	b088      	sub	sp, #32
 80115c8:	af00      	add	r7, sp, #0
 80115ca:	60f8      	str	r0, [r7, #12]
 80115cc:	60b9      	str	r1, [r7, #8]
 80115ce:	4611      	mov	r1, r2
 80115d0:	461a      	mov	r2, r3
 80115d2:	460b      	mov	r3, r1
 80115d4:	71fb      	strb	r3, [r7, #7]
 80115d6:	4613      	mov	r3, r2
 80115d8:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80115da:	2300      	movs	r3, #0
 80115dc:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80115de:	68bb      	ldr	r3, [r7, #8]
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	d106      	bne.n	80115f2 <tcp_output_fill_options+0x2e>
 80115e4:	4b12      	ldr	r3, [pc, #72]	@ (8011630 <tcp_output_fill_options+0x6c>)
 80115e6:	f240 7256 	movw	r2, #1878	@ 0x756
 80115ea:	4912      	ldr	r1, [pc, #72]	@ (8011634 <tcp_output_fill_options+0x70>)
 80115ec:	4812      	ldr	r0, [pc, #72]	@ (8011638 <tcp_output_fill_options+0x74>)
 80115ee:	f004 fb25 	bl	8015c3c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80115f2:	68bb      	ldr	r3, [r7, #8]
 80115f4:	685b      	ldr	r3, [r3, #4]
 80115f6:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80115f8:	69bb      	ldr	r3, [r7, #24]
 80115fa:	3314      	adds	r3, #20
 80115fc:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80115fe:	8bfb      	ldrh	r3, [r7, #30]
 8011600:	009b      	lsls	r3, r3, #2
 8011602:	461a      	mov	r2, r3
 8011604:	79fb      	ldrb	r3, [r7, #7]
 8011606:	009b      	lsls	r3, r3, #2
 8011608:	f003 0304 	and.w	r3, r3, #4
 801160c:	4413      	add	r3, r2
 801160e:	3314      	adds	r3, #20
 8011610:	69ba      	ldr	r2, [r7, #24]
 8011612:	4413      	add	r3, r2
 8011614:	697a      	ldr	r2, [r7, #20]
 8011616:	429a      	cmp	r2, r3
 8011618:	d006      	beq.n	8011628 <tcp_output_fill_options+0x64>
 801161a:	4b05      	ldr	r3, [pc, #20]	@ (8011630 <tcp_output_fill_options+0x6c>)
 801161c:	f240 7275 	movw	r2, #1909	@ 0x775
 8011620:	4906      	ldr	r1, [pc, #24]	@ (801163c <tcp_output_fill_options+0x78>)
 8011622:	4805      	ldr	r0, [pc, #20]	@ (8011638 <tcp_output_fill_options+0x74>)
 8011624:	f004 fb0a 	bl	8015c3c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8011628:	bf00      	nop
 801162a:	3720      	adds	r7, #32
 801162c:	46bd      	mov	sp, r7
 801162e:	bd80      	pop	{r7, pc}
 8011630:	0801f890 	.word	0x0801f890
 8011634:	0801ffc0 	.word	0x0801ffc0
 8011638:	0801f8e4 	.word	0x0801f8e4
 801163c:	0801feb8 	.word	0x0801feb8

08011640 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8011640:	b580      	push	{r7, lr}
 8011642:	b08a      	sub	sp, #40	@ 0x28
 8011644:	af04      	add	r7, sp, #16
 8011646:	60f8      	str	r0, [r7, #12]
 8011648:	60b9      	str	r1, [r7, #8]
 801164a:	607a      	str	r2, [r7, #4]
 801164c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801164e:	68bb      	ldr	r3, [r7, #8]
 8011650:	2b00      	cmp	r3, #0
 8011652:	d106      	bne.n	8011662 <tcp_output_control_segment+0x22>
 8011654:	4b1c      	ldr	r3, [pc, #112]	@ (80116c8 <tcp_output_control_segment+0x88>)
 8011656:	f240 7287 	movw	r2, #1927	@ 0x787
 801165a:	491c      	ldr	r1, [pc, #112]	@ (80116cc <tcp_output_control_segment+0x8c>)
 801165c:	481c      	ldr	r0, [pc, #112]	@ (80116d0 <tcp_output_control_segment+0x90>)
 801165e:	f004 faed 	bl	8015c3c <iprintf>

  netif = tcp_route(pcb, src, dst);
 8011662:	683a      	ldr	r2, [r7, #0]
 8011664:	6879      	ldr	r1, [r7, #4]
 8011666:	68f8      	ldr	r0, [r7, #12]
 8011668:	f7fe ff42 	bl	80104f0 <tcp_route>
 801166c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801166e:	693b      	ldr	r3, [r7, #16]
 8011670:	2b00      	cmp	r3, #0
 8011672:	d102      	bne.n	801167a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8011674:	23fc      	movs	r3, #252	@ 0xfc
 8011676:	75fb      	strb	r3, [r7, #23]
 8011678:	e01c      	b.n	80116b4 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801167a:	68fb      	ldr	r3, [r7, #12]
 801167c:	2b00      	cmp	r3, #0
 801167e:	d006      	beq.n	801168e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8011680:	68fb      	ldr	r3, [r7, #12]
 8011682:	7adb      	ldrb	r3, [r3, #11]
 8011684:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8011686:	68fb      	ldr	r3, [r7, #12]
 8011688:	7a9b      	ldrb	r3, [r3, #10]
 801168a:	757b      	strb	r3, [r7, #21]
 801168c:	e003      	b.n	8011696 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801168e:	23ff      	movs	r3, #255	@ 0xff
 8011690:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8011692:	2300      	movs	r3, #0
 8011694:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8011696:	7dba      	ldrb	r2, [r7, #22]
 8011698:	693b      	ldr	r3, [r7, #16]
 801169a:	9302      	str	r3, [sp, #8]
 801169c:	2306      	movs	r3, #6
 801169e:	9301      	str	r3, [sp, #4]
 80116a0:	7d7b      	ldrb	r3, [r7, #21]
 80116a2:	9300      	str	r3, [sp, #0]
 80116a4:	4613      	mov	r3, r2
 80116a6:	683a      	ldr	r2, [r7, #0]
 80116a8:	6879      	ldr	r1, [r7, #4]
 80116aa:	68b8      	ldr	r0, [r7, #8]
 80116ac:	f002 fb02 	bl	8013cb4 <ip4_output_if>
 80116b0:	4603      	mov	r3, r0
 80116b2:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80116b4:	68b8      	ldr	r0, [r7, #8]
 80116b6:	f7fa fc7f 	bl	800bfb8 <pbuf_free>
  return err;
 80116ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80116be:	4618      	mov	r0, r3
 80116c0:	3718      	adds	r7, #24
 80116c2:	46bd      	mov	sp, r7
 80116c4:	bd80      	pop	{r7, pc}
 80116c6:	bf00      	nop
 80116c8:	0801f890 	.word	0x0801f890
 80116cc:	0801ffe8 	.word	0x0801ffe8
 80116d0:	0801f8e4 	.word	0x0801f8e4

080116d4 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80116d4:	b590      	push	{r4, r7, lr}
 80116d6:	b08b      	sub	sp, #44	@ 0x2c
 80116d8:	af04      	add	r7, sp, #16
 80116da:	60f8      	str	r0, [r7, #12]
 80116dc:	60b9      	str	r1, [r7, #8]
 80116de:	607a      	str	r2, [r7, #4]
 80116e0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80116e2:	683b      	ldr	r3, [r7, #0]
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	d106      	bne.n	80116f6 <tcp_rst+0x22>
 80116e8:	4b1f      	ldr	r3, [pc, #124]	@ (8011768 <tcp_rst+0x94>)
 80116ea:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 80116ee:	491f      	ldr	r1, [pc, #124]	@ (801176c <tcp_rst+0x98>)
 80116f0:	481f      	ldr	r0, [pc, #124]	@ (8011770 <tcp_rst+0x9c>)
 80116f2:	f004 faa3 	bl	8015c3c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80116f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80116f8:	2b00      	cmp	r3, #0
 80116fa:	d106      	bne.n	801170a <tcp_rst+0x36>
 80116fc:	4b1a      	ldr	r3, [pc, #104]	@ (8011768 <tcp_rst+0x94>)
 80116fe:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 8011702:	491c      	ldr	r1, [pc, #112]	@ (8011774 <tcp_rst+0xa0>)
 8011704:	481a      	ldr	r0, [pc, #104]	@ (8011770 <tcp_rst+0x9c>)
 8011706:	f004 fa99 	bl	8015c3c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801170a:	2300      	movs	r3, #0
 801170c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801170e:	f246 0308 	movw	r3, #24584	@ 0x6008
 8011712:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8011714:	7dfb      	ldrb	r3, [r7, #23]
 8011716:	b29c      	uxth	r4, r3
 8011718:	68b8      	ldr	r0, [r7, #8]
 801171a:	f7f8 fe3b 	bl	800a394 <lwip_htonl>
 801171e:	4602      	mov	r2, r0
 8011720:	8abb      	ldrh	r3, [r7, #20]
 8011722:	9303      	str	r3, [sp, #12]
 8011724:	2314      	movs	r3, #20
 8011726:	9302      	str	r3, [sp, #8]
 8011728:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801172a:	9301      	str	r3, [sp, #4]
 801172c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801172e:	9300      	str	r3, [sp, #0]
 8011730:	4613      	mov	r3, r2
 8011732:	2200      	movs	r2, #0
 8011734:	4621      	mov	r1, r4
 8011736:	6878      	ldr	r0, [r7, #4]
 8011738:	f7ff fe94 	bl	8011464 <tcp_output_alloc_header_common>
 801173c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801173e:	693b      	ldr	r3, [r7, #16]
 8011740:	2b00      	cmp	r3, #0
 8011742:	d00c      	beq.n	801175e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011744:	7dfb      	ldrb	r3, [r7, #23]
 8011746:	2200      	movs	r2, #0
 8011748:	6939      	ldr	r1, [r7, #16]
 801174a:	68f8      	ldr	r0, [r7, #12]
 801174c:	f7ff ff3a 	bl	80115c4 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8011750:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011752:	683a      	ldr	r2, [r7, #0]
 8011754:	6939      	ldr	r1, [r7, #16]
 8011756:	68f8      	ldr	r0, [r7, #12]
 8011758:	f7ff ff72 	bl	8011640 <tcp_output_control_segment>
 801175c:	e000      	b.n	8011760 <tcp_rst+0x8c>
    return;
 801175e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8011760:	371c      	adds	r7, #28
 8011762:	46bd      	mov	sp, r7
 8011764:	bd90      	pop	{r4, r7, pc}
 8011766:	bf00      	nop
 8011768:	0801f890 	.word	0x0801f890
 801176c:	08020014 	.word	0x08020014
 8011770:	0801f8e4 	.word	0x0801f8e4
 8011774:	08020030 	.word	0x08020030

08011778 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8011778:	b590      	push	{r4, r7, lr}
 801177a:	b087      	sub	sp, #28
 801177c:	af00      	add	r7, sp, #0
 801177e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8011780:	2300      	movs	r3, #0
 8011782:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8011784:	2300      	movs	r3, #0
 8011786:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	2b00      	cmp	r3, #0
 801178c:	d106      	bne.n	801179c <tcp_send_empty_ack+0x24>
 801178e:	4b28      	ldr	r3, [pc, #160]	@ (8011830 <tcp_send_empty_ack+0xb8>)
 8011790:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 8011794:	4927      	ldr	r1, [pc, #156]	@ (8011834 <tcp_send_empty_ack+0xbc>)
 8011796:	4828      	ldr	r0, [pc, #160]	@ (8011838 <tcp_send_empty_ack+0xc0>)
 8011798:	f004 fa50 	bl	8015c3c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801179c:	7dfb      	ldrb	r3, [r7, #23]
 801179e:	009b      	lsls	r3, r3, #2
 80117a0:	b2db      	uxtb	r3, r3
 80117a2:	f003 0304 	and.w	r3, r3, #4
 80117a6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80117a8:	7d7b      	ldrb	r3, [r7, #21]
 80117aa:	b29c      	uxth	r4, r3
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80117b0:	4618      	mov	r0, r3
 80117b2:	f7f8 fdef 	bl	800a394 <lwip_htonl>
 80117b6:	4603      	mov	r3, r0
 80117b8:	2200      	movs	r2, #0
 80117ba:	4621      	mov	r1, r4
 80117bc:	6878      	ldr	r0, [r7, #4]
 80117be:	f7ff fec3 	bl	8011548 <tcp_output_alloc_header>
 80117c2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80117c4:	693b      	ldr	r3, [r7, #16]
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	d109      	bne.n	80117de <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	8b5b      	ldrh	r3, [r3, #26]
 80117ce:	f043 0303 	orr.w	r3, r3, #3
 80117d2:	b29a      	uxth	r2, r3
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80117d8:	f06f 0301 	mvn.w	r3, #1
 80117dc:	e023      	b.n	8011826 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80117de:	7dbb      	ldrb	r3, [r7, #22]
 80117e0:	7dfa      	ldrb	r2, [r7, #23]
 80117e2:	6939      	ldr	r1, [r7, #16]
 80117e4:	6878      	ldr	r0, [r7, #4]
 80117e6:	f7ff feed 	bl	80115c4 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80117ea:	687a      	ldr	r2, [r7, #4]
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	3304      	adds	r3, #4
 80117f0:	6939      	ldr	r1, [r7, #16]
 80117f2:	6878      	ldr	r0, [r7, #4]
 80117f4:	f7ff ff24 	bl	8011640 <tcp_output_control_segment>
 80117f8:	4603      	mov	r3, r0
 80117fa:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80117fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011800:	2b00      	cmp	r3, #0
 8011802:	d007      	beq.n	8011814 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	8b5b      	ldrh	r3, [r3, #26]
 8011808:	f043 0303 	orr.w	r3, r3, #3
 801180c:	b29a      	uxth	r2, r3
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	835a      	strh	r2, [r3, #26]
 8011812:	e006      	b.n	8011822 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	8b5b      	ldrh	r3, [r3, #26]
 8011818:	f023 0303 	bic.w	r3, r3, #3
 801181c:	b29a      	uxth	r2, r3
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8011822:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011826:	4618      	mov	r0, r3
 8011828:	371c      	adds	r7, #28
 801182a:	46bd      	mov	sp, r7
 801182c:	bd90      	pop	{r4, r7, pc}
 801182e:	bf00      	nop
 8011830:	0801f890 	.word	0x0801f890
 8011834:	0802004c 	.word	0x0802004c
 8011838:	0801f8e4 	.word	0x0801f8e4

0801183c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801183c:	b590      	push	{r4, r7, lr}
 801183e:	b087      	sub	sp, #28
 8011840:	af00      	add	r7, sp, #0
 8011842:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011844:	2300      	movs	r3, #0
 8011846:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	2b00      	cmp	r3, #0
 801184c:	d106      	bne.n	801185c <tcp_keepalive+0x20>
 801184e:	4b18      	ldr	r3, [pc, #96]	@ (80118b0 <tcp_keepalive+0x74>)
 8011850:	f640 0224 	movw	r2, #2084	@ 0x824
 8011854:	4917      	ldr	r1, [pc, #92]	@ (80118b4 <tcp_keepalive+0x78>)
 8011856:	4818      	ldr	r0, [pc, #96]	@ (80118b8 <tcp_keepalive+0x7c>)
 8011858:	f004 f9f0 	bl	8015c3c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801185c:	7dfb      	ldrb	r3, [r7, #23]
 801185e:	b29c      	uxth	r4, r3
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011864:	3b01      	subs	r3, #1
 8011866:	4618      	mov	r0, r3
 8011868:	f7f8 fd94 	bl	800a394 <lwip_htonl>
 801186c:	4603      	mov	r3, r0
 801186e:	2200      	movs	r2, #0
 8011870:	4621      	mov	r1, r4
 8011872:	6878      	ldr	r0, [r7, #4]
 8011874:	f7ff fe68 	bl	8011548 <tcp_output_alloc_header>
 8011878:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801187a:	693b      	ldr	r3, [r7, #16]
 801187c:	2b00      	cmp	r3, #0
 801187e:	d102      	bne.n	8011886 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8011880:	f04f 33ff 	mov.w	r3, #4294967295
 8011884:	e010      	b.n	80118a8 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011886:	7dfb      	ldrb	r3, [r7, #23]
 8011888:	2200      	movs	r2, #0
 801188a:	6939      	ldr	r1, [r7, #16]
 801188c:	6878      	ldr	r0, [r7, #4]
 801188e:	f7ff fe99 	bl	80115c4 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011892:	687a      	ldr	r2, [r7, #4]
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	3304      	adds	r3, #4
 8011898:	6939      	ldr	r1, [r7, #16]
 801189a:	6878      	ldr	r0, [r7, #4]
 801189c:	f7ff fed0 	bl	8011640 <tcp_output_control_segment>
 80118a0:	4603      	mov	r3, r0
 80118a2:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80118a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80118a8:	4618      	mov	r0, r3
 80118aa:	371c      	adds	r7, #28
 80118ac:	46bd      	mov	sp, r7
 80118ae:	bd90      	pop	{r4, r7, pc}
 80118b0:	0801f890 	.word	0x0801f890
 80118b4:	0802006c 	.word	0x0802006c
 80118b8:	0801f8e4 	.word	0x0801f8e4

080118bc <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80118bc:	b590      	push	{r4, r7, lr}
 80118be:	b08b      	sub	sp, #44	@ 0x2c
 80118c0:	af00      	add	r7, sp, #0
 80118c2:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80118c4:	2300      	movs	r3, #0
 80118c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	d106      	bne.n	80118de <tcp_zero_window_probe+0x22>
 80118d0:	4b4c      	ldr	r3, [pc, #304]	@ (8011a04 <tcp_zero_window_probe+0x148>)
 80118d2:	f640 024f 	movw	r2, #2127	@ 0x84f
 80118d6:	494c      	ldr	r1, [pc, #304]	@ (8011a08 <tcp_zero_window_probe+0x14c>)
 80118d8:	484c      	ldr	r0, [pc, #304]	@ (8011a0c <tcp_zero_window_probe+0x150>)
 80118da:	f004 f9af 	bl	8015c3c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80118e2:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80118e4:	6a3b      	ldr	r3, [r7, #32]
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	d101      	bne.n	80118ee <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80118ea:	2300      	movs	r3, #0
 80118ec:	e086      	b.n	80119fc <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 80118f4:	2bff      	cmp	r3, #255	@ 0xff
 80118f6:	d007      	beq.n	8011908 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 80118fe:	3301      	adds	r3, #1
 8011900:	b2da      	uxtb	r2, r3
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8011908:	6a3b      	ldr	r3, [r7, #32]
 801190a:	68db      	ldr	r3, [r3, #12]
 801190c:	899b      	ldrh	r3, [r3, #12]
 801190e:	b29b      	uxth	r3, r3
 8011910:	4618      	mov	r0, r3
 8011912:	f7f8 fd29 	bl	800a368 <lwip_htons>
 8011916:	4603      	mov	r3, r0
 8011918:	b2db      	uxtb	r3, r3
 801191a:	f003 0301 	and.w	r3, r3, #1
 801191e:	2b00      	cmp	r3, #0
 8011920:	d005      	beq.n	801192e <tcp_zero_window_probe+0x72>
 8011922:	6a3b      	ldr	r3, [r7, #32]
 8011924:	891b      	ldrh	r3, [r3, #8]
 8011926:	2b00      	cmp	r3, #0
 8011928:	d101      	bne.n	801192e <tcp_zero_window_probe+0x72>
 801192a:	2301      	movs	r3, #1
 801192c:	e000      	b.n	8011930 <tcp_zero_window_probe+0x74>
 801192e:	2300      	movs	r3, #0
 8011930:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8011932:	7ffb      	ldrb	r3, [r7, #31]
 8011934:	2b00      	cmp	r3, #0
 8011936:	bf0c      	ite	eq
 8011938:	2301      	moveq	r3, #1
 801193a:	2300      	movne	r3, #0
 801193c:	b2db      	uxtb	r3, r3
 801193e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8011940:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011944:	b299      	uxth	r1, r3
 8011946:	6a3b      	ldr	r3, [r7, #32]
 8011948:	68db      	ldr	r3, [r3, #12]
 801194a:	685b      	ldr	r3, [r3, #4]
 801194c:	8bba      	ldrh	r2, [r7, #28]
 801194e:	6878      	ldr	r0, [r7, #4]
 8011950:	f7ff fdfa 	bl	8011548 <tcp_output_alloc_header>
 8011954:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8011956:	69bb      	ldr	r3, [r7, #24]
 8011958:	2b00      	cmp	r3, #0
 801195a:	d102      	bne.n	8011962 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801195c:	f04f 33ff 	mov.w	r3, #4294967295
 8011960:	e04c      	b.n	80119fc <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8011962:	69bb      	ldr	r3, [r7, #24]
 8011964:	685b      	ldr	r3, [r3, #4]
 8011966:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8011968:	7ffb      	ldrb	r3, [r7, #31]
 801196a:	2b00      	cmp	r3, #0
 801196c:	d011      	beq.n	8011992 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801196e:	697b      	ldr	r3, [r7, #20]
 8011970:	899b      	ldrh	r3, [r3, #12]
 8011972:	b29b      	uxth	r3, r3
 8011974:	b21b      	sxth	r3, r3
 8011976:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801197a:	b21c      	sxth	r4, r3
 801197c:	2011      	movs	r0, #17
 801197e:	f7f8 fcf3 	bl	800a368 <lwip_htons>
 8011982:	4603      	mov	r3, r0
 8011984:	b21b      	sxth	r3, r3
 8011986:	4323      	orrs	r3, r4
 8011988:	b21b      	sxth	r3, r3
 801198a:	b29a      	uxth	r2, r3
 801198c:	697b      	ldr	r3, [r7, #20]
 801198e:	819a      	strh	r2, [r3, #12]
 8011990:	e010      	b.n	80119b4 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8011992:	69bb      	ldr	r3, [r7, #24]
 8011994:	685b      	ldr	r3, [r3, #4]
 8011996:	3314      	adds	r3, #20
 8011998:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801199a:	6a3b      	ldr	r3, [r7, #32]
 801199c:	6858      	ldr	r0, [r3, #4]
 801199e:	6a3b      	ldr	r3, [r7, #32]
 80119a0:	685b      	ldr	r3, [r3, #4]
 80119a2:	891a      	ldrh	r2, [r3, #8]
 80119a4:	6a3b      	ldr	r3, [r7, #32]
 80119a6:	891b      	ldrh	r3, [r3, #8]
 80119a8:	1ad3      	subs	r3, r2, r3
 80119aa:	b29b      	uxth	r3, r3
 80119ac:	2201      	movs	r2, #1
 80119ae:	6939      	ldr	r1, [r7, #16]
 80119b0:	f7fa fcfc 	bl	800c3ac <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80119b4:	6a3b      	ldr	r3, [r7, #32]
 80119b6:	68db      	ldr	r3, [r3, #12]
 80119b8:	685b      	ldr	r3, [r3, #4]
 80119ba:	4618      	mov	r0, r3
 80119bc:	f7f8 fcea 	bl	800a394 <lwip_htonl>
 80119c0:	4603      	mov	r3, r0
 80119c2:	3301      	adds	r3, #1
 80119c4:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80119ca:	68fb      	ldr	r3, [r7, #12]
 80119cc:	1ad3      	subs	r3, r2, r3
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	da02      	bge.n	80119d8 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	68fa      	ldr	r2, [r7, #12]
 80119d6:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80119d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80119dc:	2200      	movs	r2, #0
 80119de:	69b9      	ldr	r1, [r7, #24]
 80119e0:	6878      	ldr	r0, [r7, #4]
 80119e2:	f7ff fdef 	bl	80115c4 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80119e6:	687a      	ldr	r2, [r7, #4]
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	3304      	adds	r3, #4
 80119ec:	69b9      	ldr	r1, [r7, #24]
 80119ee:	6878      	ldr	r0, [r7, #4]
 80119f0:	f7ff fe26 	bl	8011640 <tcp_output_control_segment>
 80119f4:	4603      	mov	r3, r0
 80119f6:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80119f8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80119fc:	4618      	mov	r0, r3
 80119fe:	372c      	adds	r7, #44	@ 0x2c
 8011a00:	46bd      	mov	sp, r7
 8011a02:	bd90      	pop	{r4, r7, pc}
 8011a04:	0801f890 	.word	0x0801f890
 8011a08:	08020088 	.word	0x08020088
 8011a0c:	0801f8e4 	.word	0x0801f8e4

08011a10 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8011a10:	b580      	push	{r7, lr}
 8011a12:	b082      	sub	sp, #8
 8011a14:	af00      	add	r7, sp, #0
 8011a16:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8011a18:	f7fa ff10 	bl	800c83c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8011a1c:	4b0a      	ldr	r3, [pc, #40]	@ (8011a48 <tcpip_tcp_timer+0x38>)
 8011a1e:	681b      	ldr	r3, [r3, #0]
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	d103      	bne.n	8011a2c <tcpip_tcp_timer+0x1c>
 8011a24:	4b09      	ldr	r3, [pc, #36]	@ (8011a4c <tcpip_tcp_timer+0x3c>)
 8011a26:	681b      	ldr	r3, [r3, #0]
 8011a28:	2b00      	cmp	r3, #0
 8011a2a:	d005      	beq.n	8011a38 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011a2c:	2200      	movs	r2, #0
 8011a2e:	4908      	ldr	r1, [pc, #32]	@ (8011a50 <tcpip_tcp_timer+0x40>)
 8011a30:	20fa      	movs	r0, #250	@ 0xfa
 8011a32:	f000 f8f3 	bl	8011c1c <sys_timeout>
 8011a36:	e003      	b.n	8011a40 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8011a38:	4b06      	ldr	r3, [pc, #24]	@ (8011a54 <tcpip_tcp_timer+0x44>)
 8011a3a:	2200      	movs	r2, #0
 8011a3c:	601a      	str	r2, [r3, #0]
  }
}
 8011a3e:	bf00      	nop
 8011a40:	bf00      	nop
 8011a42:	3708      	adds	r7, #8
 8011a44:	46bd      	mov	sp, r7
 8011a46:	bd80      	pop	{r7, pc}
 8011a48:	20009250 	.word	0x20009250
 8011a4c:	20009254 	.word	0x20009254
 8011a50:	08011a11 	.word	0x08011a11
 8011a54:	2000929c 	.word	0x2000929c

08011a58 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8011a58:	b580      	push	{r7, lr}
 8011a5a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8011a5c:	4b0a      	ldr	r3, [pc, #40]	@ (8011a88 <tcp_timer_needed+0x30>)
 8011a5e:	681b      	ldr	r3, [r3, #0]
 8011a60:	2b00      	cmp	r3, #0
 8011a62:	d10f      	bne.n	8011a84 <tcp_timer_needed+0x2c>
 8011a64:	4b09      	ldr	r3, [pc, #36]	@ (8011a8c <tcp_timer_needed+0x34>)
 8011a66:	681b      	ldr	r3, [r3, #0]
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	d103      	bne.n	8011a74 <tcp_timer_needed+0x1c>
 8011a6c:	4b08      	ldr	r3, [pc, #32]	@ (8011a90 <tcp_timer_needed+0x38>)
 8011a6e:	681b      	ldr	r3, [r3, #0]
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	d007      	beq.n	8011a84 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8011a74:	4b04      	ldr	r3, [pc, #16]	@ (8011a88 <tcp_timer_needed+0x30>)
 8011a76:	2201      	movs	r2, #1
 8011a78:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011a7a:	2200      	movs	r2, #0
 8011a7c:	4905      	ldr	r1, [pc, #20]	@ (8011a94 <tcp_timer_needed+0x3c>)
 8011a7e:	20fa      	movs	r0, #250	@ 0xfa
 8011a80:	f000 f8cc 	bl	8011c1c <sys_timeout>
  }
}
 8011a84:	bf00      	nop
 8011a86:	bd80      	pop	{r7, pc}
 8011a88:	2000929c 	.word	0x2000929c
 8011a8c:	20009250 	.word	0x20009250
 8011a90:	20009254 	.word	0x20009254
 8011a94:	08011a11 	.word	0x08011a11

08011a98 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8011a98:	b580      	push	{r7, lr}
 8011a9a:	b086      	sub	sp, #24
 8011a9c:	af00      	add	r7, sp, #0
 8011a9e:	60f8      	str	r0, [r7, #12]
 8011aa0:	60b9      	str	r1, [r7, #8]
 8011aa2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8011aa4:	2006      	movs	r0, #6
 8011aa6:	f7f9 fba1 	bl	800b1ec <memp_malloc>
 8011aaa:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8011aac:	693b      	ldr	r3, [r7, #16]
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	d109      	bne.n	8011ac6 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8011ab2:	693b      	ldr	r3, [r7, #16]
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	d151      	bne.n	8011b5c <sys_timeout_abs+0xc4>
 8011ab8:	4b2a      	ldr	r3, [pc, #168]	@ (8011b64 <sys_timeout_abs+0xcc>)
 8011aba:	22be      	movs	r2, #190	@ 0xbe
 8011abc:	492a      	ldr	r1, [pc, #168]	@ (8011b68 <sys_timeout_abs+0xd0>)
 8011abe:	482b      	ldr	r0, [pc, #172]	@ (8011b6c <sys_timeout_abs+0xd4>)
 8011ac0:	f004 f8bc 	bl	8015c3c <iprintf>
    return;
 8011ac4:	e04a      	b.n	8011b5c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8011ac6:	693b      	ldr	r3, [r7, #16]
 8011ac8:	2200      	movs	r2, #0
 8011aca:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8011acc:	693b      	ldr	r3, [r7, #16]
 8011ace:	68ba      	ldr	r2, [r7, #8]
 8011ad0:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8011ad2:	693b      	ldr	r3, [r7, #16]
 8011ad4:	687a      	ldr	r2, [r7, #4]
 8011ad6:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8011ad8:	693b      	ldr	r3, [r7, #16]
 8011ada:	68fa      	ldr	r2, [r7, #12]
 8011adc:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8011ade:	4b24      	ldr	r3, [pc, #144]	@ (8011b70 <sys_timeout_abs+0xd8>)
 8011ae0:	681b      	ldr	r3, [r3, #0]
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	d103      	bne.n	8011aee <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8011ae6:	4a22      	ldr	r2, [pc, #136]	@ (8011b70 <sys_timeout_abs+0xd8>)
 8011ae8:	693b      	ldr	r3, [r7, #16]
 8011aea:	6013      	str	r3, [r2, #0]
    return;
 8011aec:	e037      	b.n	8011b5e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8011aee:	693b      	ldr	r3, [r7, #16]
 8011af0:	685a      	ldr	r2, [r3, #4]
 8011af2:	4b1f      	ldr	r3, [pc, #124]	@ (8011b70 <sys_timeout_abs+0xd8>)
 8011af4:	681b      	ldr	r3, [r3, #0]
 8011af6:	685b      	ldr	r3, [r3, #4]
 8011af8:	1ad3      	subs	r3, r2, r3
 8011afa:	0fdb      	lsrs	r3, r3, #31
 8011afc:	f003 0301 	and.w	r3, r3, #1
 8011b00:	b2db      	uxtb	r3, r3
 8011b02:	2b00      	cmp	r3, #0
 8011b04:	d007      	beq.n	8011b16 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8011b06:	4b1a      	ldr	r3, [pc, #104]	@ (8011b70 <sys_timeout_abs+0xd8>)
 8011b08:	681a      	ldr	r2, [r3, #0]
 8011b0a:	693b      	ldr	r3, [r7, #16]
 8011b0c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8011b0e:	4a18      	ldr	r2, [pc, #96]	@ (8011b70 <sys_timeout_abs+0xd8>)
 8011b10:	693b      	ldr	r3, [r7, #16]
 8011b12:	6013      	str	r3, [r2, #0]
 8011b14:	e023      	b.n	8011b5e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8011b16:	4b16      	ldr	r3, [pc, #88]	@ (8011b70 <sys_timeout_abs+0xd8>)
 8011b18:	681b      	ldr	r3, [r3, #0]
 8011b1a:	617b      	str	r3, [r7, #20]
 8011b1c:	e01a      	b.n	8011b54 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8011b1e:	697b      	ldr	r3, [r7, #20]
 8011b20:	681b      	ldr	r3, [r3, #0]
 8011b22:	2b00      	cmp	r3, #0
 8011b24:	d00b      	beq.n	8011b3e <sys_timeout_abs+0xa6>
 8011b26:	693b      	ldr	r3, [r7, #16]
 8011b28:	685a      	ldr	r2, [r3, #4]
 8011b2a:	697b      	ldr	r3, [r7, #20]
 8011b2c:	681b      	ldr	r3, [r3, #0]
 8011b2e:	685b      	ldr	r3, [r3, #4]
 8011b30:	1ad3      	subs	r3, r2, r3
 8011b32:	0fdb      	lsrs	r3, r3, #31
 8011b34:	f003 0301 	and.w	r3, r3, #1
 8011b38:	b2db      	uxtb	r3, r3
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	d007      	beq.n	8011b4e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8011b3e:	697b      	ldr	r3, [r7, #20]
 8011b40:	681a      	ldr	r2, [r3, #0]
 8011b42:	693b      	ldr	r3, [r7, #16]
 8011b44:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8011b46:	697b      	ldr	r3, [r7, #20]
 8011b48:	693a      	ldr	r2, [r7, #16]
 8011b4a:	601a      	str	r2, [r3, #0]
        break;
 8011b4c:	e007      	b.n	8011b5e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8011b4e:	697b      	ldr	r3, [r7, #20]
 8011b50:	681b      	ldr	r3, [r3, #0]
 8011b52:	617b      	str	r3, [r7, #20]
 8011b54:	697b      	ldr	r3, [r7, #20]
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	d1e1      	bne.n	8011b1e <sys_timeout_abs+0x86>
 8011b5a:	e000      	b.n	8011b5e <sys_timeout_abs+0xc6>
    return;
 8011b5c:	bf00      	nop
      }
    }
  }
}
 8011b5e:	3718      	adds	r7, #24
 8011b60:	46bd      	mov	sp, r7
 8011b62:	bd80      	pop	{r7, pc}
 8011b64:	080200ac 	.word	0x080200ac
 8011b68:	080200e0 	.word	0x080200e0
 8011b6c:	08020120 	.word	0x08020120
 8011b70:	20009294 	.word	0x20009294

08011b74 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8011b74:	b580      	push	{r7, lr}
 8011b76:	b086      	sub	sp, #24
 8011b78:	af00      	add	r7, sp, #0
 8011b7a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8011b80:	697b      	ldr	r3, [r7, #20]
 8011b82:	685b      	ldr	r3, [r3, #4]
 8011b84:	4798      	blx	r3

  now = sys_now();
 8011b86:	f7f8 f9f7 	bl	8009f78 <sys_now>
 8011b8a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8011b8c:	697b      	ldr	r3, [r7, #20]
 8011b8e:	681a      	ldr	r2, [r3, #0]
 8011b90:	4b0f      	ldr	r3, [pc, #60]	@ (8011bd0 <lwip_cyclic_timer+0x5c>)
 8011b92:	681b      	ldr	r3, [r3, #0]
 8011b94:	4413      	add	r3, r2
 8011b96:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8011b98:	68fa      	ldr	r2, [r7, #12]
 8011b9a:	693b      	ldr	r3, [r7, #16]
 8011b9c:	1ad3      	subs	r3, r2, r3
 8011b9e:	0fdb      	lsrs	r3, r3, #31
 8011ba0:	f003 0301 	and.w	r3, r3, #1
 8011ba4:	b2db      	uxtb	r3, r3
 8011ba6:	2b00      	cmp	r3, #0
 8011ba8:	d009      	beq.n	8011bbe <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8011baa:	697b      	ldr	r3, [r7, #20]
 8011bac:	681a      	ldr	r2, [r3, #0]
 8011bae:	693b      	ldr	r3, [r7, #16]
 8011bb0:	4413      	add	r3, r2
 8011bb2:	687a      	ldr	r2, [r7, #4]
 8011bb4:	4907      	ldr	r1, [pc, #28]	@ (8011bd4 <lwip_cyclic_timer+0x60>)
 8011bb6:	4618      	mov	r0, r3
 8011bb8:	f7ff ff6e 	bl	8011a98 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8011bbc:	e004      	b.n	8011bc8 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8011bbe:	687a      	ldr	r2, [r7, #4]
 8011bc0:	4904      	ldr	r1, [pc, #16]	@ (8011bd4 <lwip_cyclic_timer+0x60>)
 8011bc2:	68f8      	ldr	r0, [r7, #12]
 8011bc4:	f7ff ff68 	bl	8011a98 <sys_timeout_abs>
}
 8011bc8:	bf00      	nop
 8011bca:	3718      	adds	r7, #24
 8011bcc:	46bd      	mov	sp, r7
 8011bce:	bd80      	pop	{r7, pc}
 8011bd0:	20009298 	.word	0x20009298
 8011bd4:	08011b75 	.word	0x08011b75

08011bd8 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8011bd8:	b580      	push	{r7, lr}
 8011bda:	b082      	sub	sp, #8
 8011bdc:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8011bde:	2301      	movs	r3, #1
 8011be0:	607b      	str	r3, [r7, #4]
 8011be2:	e00e      	b.n	8011c02 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8011be4:	4a0b      	ldr	r2, [pc, #44]	@ (8011c14 <sys_timeouts_init+0x3c>)
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	00db      	lsls	r3, r3, #3
 8011bf0:	4a08      	ldr	r2, [pc, #32]	@ (8011c14 <sys_timeouts_init+0x3c>)
 8011bf2:	4413      	add	r3, r2
 8011bf4:	461a      	mov	r2, r3
 8011bf6:	4908      	ldr	r1, [pc, #32]	@ (8011c18 <sys_timeouts_init+0x40>)
 8011bf8:	f000 f810 	bl	8011c1c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	3301      	adds	r3, #1
 8011c00:	607b      	str	r3, [r7, #4]
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	2b03      	cmp	r3, #3
 8011c06:	d9ed      	bls.n	8011be4 <sys_timeouts_init+0xc>
  }
}
 8011c08:	bf00      	nop
 8011c0a:	bf00      	nop
 8011c0c:	3708      	adds	r7, #8
 8011c0e:	46bd      	mov	sp, r7
 8011c10:	bd80      	pop	{r7, pc}
 8011c12:	bf00      	nop
 8011c14:	08020c98 	.word	0x08020c98
 8011c18:	08011b75 	.word	0x08011b75

08011c1c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8011c1c:	b580      	push	{r7, lr}
 8011c1e:	b086      	sub	sp, #24
 8011c20:	af00      	add	r7, sp, #0
 8011c22:	60f8      	str	r0, [r7, #12]
 8011c24:	60b9      	str	r1, [r7, #8]
 8011c26:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8011c28:	68fb      	ldr	r3, [r7, #12]
 8011c2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011c2e:	d306      	bcc.n	8011c3e <sys_timeout+0x22>
 8011c30:	4b0a      	ldr	r3, [pc, #40]	@ (8011c5c <sys_timeout+0x40>)
 8011c32:	f240 1229 	movw	r2, #297	@ 0x129
 8011c36:	490a      	ldr	r1, [pc, #40]	@ (8011c60 <sys_timeout+0x44>)
 8011c38:	480a      	ldr	r0, [pc, #40]	@ (8011c64 <sys_timeout+0x48>)
 8011c3a:	f003 ffff 	bl	8015c3c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8011c3e:	f7f8 f99b 	bl	8009f78 <sys_now>
 8011c42:	4602      	mov	r2, r0
 8011c44:	68fb      	ldr	r3, [r7, #12]
 8011c46:	4413      	add	r3, r2
 8011c48:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8011c4a:	687a      	ldr	r2, [r7, #4]
 8011c4c:	68b9      	ldr	r1, [r7, #8]
 8011c4e:	6978      	ldr	r0, [r7, #20]
 8011c50:	f7ff ff22 	bl	8011a98 <sys_timeout_abs>
#endif
}
 8011c54:	bf00      	nop
 8011c56:	3718      	adds	r7, #24
 8011c58:	46bd      	mov	sp, r7
 8011c5a:	bd80      	pop	{r7, pc}
 8011c5c:	080200ac 	.word	0x080200ac
 8011c60:	08020148 	.word	0x08020148
 8011c64:	08020120 	.word	0x08020120

08011c68 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8011c68:	b580      	push	{r7, lr}
 8011c6a:	b084      	sub	sp, #16
 8011c6c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8011c6e:	f7f8 f983 	bl	8009f78 <sys_now>
 8011c72:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 8011c74:	4b1a      	ldr	r3, [pc, #104]	@ (8011ce0 <sys_check_timeouts+0x78>)
 8011c76:	781b      	ldrb	r3, [r3, #0]
 8011c78:	b2db      	uxtb	r3, r3
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	d001      	beq.n	8011c82 <sys_check_timeouts+0x1a>
 8011c7e:	f7f9 fe61 	bl	800b944 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 8011c82:	4b18      	ldr	r3, [pc, #96]	@ (8011ce4 <sys_check_timeouts+0x7c>)
 8011c84:	681b      	ldr	r3, [r3, #0]
 8011c86:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8011c88:	68bb      	ldr	r3, [r7, #8]
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d022      	beq.n	8011cd4 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8011c8e:	68bb      	ldr	r3, [r7, #8]
 8011c90:	685b      	ldr	r3, [r3, #4]
 8011c92:	68fa      	ldr	r2, [r7, #12]
 8011c94:	1ad3      	subs	r3, r2, r3
 8011c96:	0fdb      	lsrs	r3, r3, #31
 8011c98:	f003 0301 	and.w	r3, r3, #1
 8011c9c:	b2db      	uxtb	r3, r3
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	d11a      	bne.n	8011cd8 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8011ca2:	68bb      	ldr	r3, [r7, #8]
 8011ca4:	681b      	ldr	r3, [r3, #0]
 8011ca6:	4a0f      	ldr	r2, [pc, #60]	@ (8011ce4 <sys_check_timeouts+0x7c>)
 8011ca8:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8011caa:	68bb      	ldr	r3, [r7, #8]
 8011cac:	689b      	ldr	r3, [r3, #8]
 8011cae:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8011cb0:	68bb      	ldr	r3, [r7, #8]
 8011cb2:	68db      	ldr	r3, [r3, #12]
 8011cb4:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8011cb6:	68bb      	ldr	r3, [r7, #8]
 8011cb8:	685b      	ldr	r3, [r3, #4]
 8011cba:	4a0b      	ldr	r2, [pc, #44]	@ (8011ce8 <sys_check_timeouts+0x80>)
 8011cbc:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8011cbe:	68b9      	ldr	r1, [r7, #8]
 8011cc0:	2006      	movs	r0, #6
 8011cc2:	f7f9 fb03 	bl	800b2cc <memp_free>
    if (handler != NULL) {
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	2b00      	cmp	r3, #0
 8011cca:	d0d3      	beq.n	8011c74 <sys_check_timeouts+0xc>
      handler(arg);
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	6838      	ldr	r0, [r7, #0]
 8011cd0:	4798      	blx	r3
  do {
 8011cd2:	e7cf      	b.n	8011c74 <sys_check_timeouts+0xc>
      return;
 8011cd4:	bf00      	nop
 8011cd6:	e000      	b.n	8011cda <sys_check_timeouts+0x72>
      return;
 8011cd8:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8011cda:	3710      	adds	r7, #16
 8011cdc:	46bd      	mov	sp, r7
 8011cde:	bd80      	pop	{r7, pc}
 8011ce0:	20009241 	.word	0x20009241
 8011ce4:	20009294 	.word	0x20009294
 8011ce8:	20009298 	.word	0x20009298

08011cec <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8011cec:	b580      	push	{r7, lr}
 8011cee:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8011cf0:	f003 f812 	bl	8014d18 <rand>
 8011cf4:	4603      	mov	r3, r0
 8011cf6:	b29b      	uxth	r3, r3
 8011cf8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8011cfc:	b29b      	uxth	r3, r3
 8011cfe:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8011d02:	b29a      	uxth	r2, r3
 8011d04:	4b01      	ldr	r3, [pc, #4]	@ (8011d0c <udp_init+0x20>)
 8011d06:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8011d08:	bf00      	nop
 8011d0a:	bd80      	pop	{r7, pc}
 8011d0c:	20000468 	.word	0x20000468

08011d10 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8011d10:	b480      	push	{r7}
 8011d12:	b083      	sub	sp, #12
 8011d14:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8011d16:	2300      	movs	r3, #0
 8011d18:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8011d1a:	4b17      	ldr	r3, [pc, #92]	@ (8011d78 <udp_new_port+0x68>)
 8011d1c:	881b      	ldrh	r3, [r3, #0]
 8011d1e:	1c5a      	adds	r2, r3, #1
 8011d20:	b291      	uxth	r1, r2
 8011d22:	4a15      	ldr	r2, [pc, #84]	@ (8011d78 <udp_new_port+0x68>)
 8011d24:	8011      	strh	r1, [r2, #0]
 8011d26:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011d2a:	4293      	cmp	r3, r2
 8011d2c:	d103      	bne.n	8011d36 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8011d2e:	4b12      	ldr	r3, [pc, #72]	@ (8011d78 <udp_new_port+0x68>)
 8011d30:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8011d34:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011d36:	4b11      	ldr	r3, [pc, #68]	@ (8011d7c <udp_new_port+0x6c>)
 8011d38:	681b      	ldr	r3, [r3, #0]
 8011d3a:	603b      	str	r3, [r7, #0]
 8011d3c:	e011      	b.n	8011d62 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8011d3e:	683b      	ldr	r3, [r7, #0]
 8011d40:	8a5a      	ldrh	r2, [r3, #18]
 8011d42:	4b0d      	ldr	r3, [pc, #52]	@ (8011d78 <udp_new_port+0x68>)
 8011d44:	881b      	ldrh	r3, [r3, #0]
 8011d46:	429a      	cmp	r2, r3
 8011d48:	d108      	bne.n	8011d5c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8011d4a:	88fb      	ldrh	r3, [r7, #6]
 8011d4c:	3301      	adds	r3, #1
 8011d4e:	80fb      	strh	r3, [r7, #6]
 8011d50:	88fb      	ldrh	r3, [r7, #6]
 8011d52:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8011d56:	d3e0      	bcc.n	8011d1a <udp_new_port+0xa>
        return 0;
 8011d58:	2300      	movs	r3, #0
 8011d5a:	e007      	b.n	8011d6c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011d5c:	683b      	ldr	r3, [r7, #0]
 8011d5e:	68db      	ldr	r3, [r3, #12]
 8011d60:	603b      	str	r3, [r7, #0]
 8011d62:	683b      	ldr	r3, [r7, #0]
 8011d64:	2b00      	cmp	r3, #0
 8011d66:	d1ea      	bne.n	8011d3e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8011d68:	4b03      	ldr	r3, [pc, #12]	@ (8011d78 <udp_new_port+0x68>)
 8011d6a:	881b      	ldrh	r3, [r3, #0]
}
 8011d6c:	4618      	mov	r0, r3
 8011d6e:	370c      	adds	r7, #12
 8011d70:	46bd      	mov	sp, r7
 8011d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d76:	4770      	bx	lr
 8011d78:	20000468 	.word	0x20000468
 8011d7c:	200092a0 	.word	0x200092a0

08011d80 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8011d80:	b580      	push	{r7, lr}
 8011d82:	b084      	sub	sp, #16
 8011d84:	af00      	add	r7, sp, #0
 8011d86:	60f8      	str	r0, [r7, #12]
 8011d88:	60b9      	str	r1, [r7, #8]
 8011d8a:	4613      	mov	r3, r2
 8011d8c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8011d8e:	68fb      	ldr	r3, [r7, #12]
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	d105      	bne.n	8011da0 <udp_input_local_match+0x20>
 8011d94:	4b27      	ldr	r3, [pc, #156]	@ (8011e34 <udp_input_local_match+0xb4>)
 8011d96:	2287      	movs	r2, #135	@ 0x87
 8011d98:	4927      	ldr	r1, [pc, #156]	@ (8011e38 <udp_input_local_match+0xb8>)
 8011d9a:	4828      	ldr	r0, [pc, #160]	@ (8011e3c <udp_input_local_match+0xbc>)
 8011d9c:	f003 ff4e 	bl	8015c3c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8011da0:	68bb      	ldr	r3, [r7, #8]
 8011da2:	2b00      	cmp	r3, #0
 8011da4:	d105      	bne.n	8011db2 <udp_input_local_match+0x32>
 8011da6:	4b23      	ldr	r3, [pc, #140]	@ (8011e34 <udp_input_local_match+0xb4>)
 8011da8:	2288      	movs	r2, #136	@ 0x88
 8011daa:	4925      	ldr	r1, [pc, #148]	@ (8011e40 <udp_input_local_match+0xc0>)
 8011dac:	4823      	ldr	r0, [pc, #140]	@ (8011e3c <udp_input_local_match+0xbc>)
 8011dae:	f003 ff45 	bl	8015c3c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011db2:	68fb      	ldr	r3, [r7, #12]
 8011db4:	7a1b      	ldrb	r3, [r3, #8]
 8011db6:	2b00      	cmp	r3, #0
 8011db8:	d00b      	beq.n	8011dd2 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8011dba:	68fb      	ldr	r3, [r7, #12]
 8011dbc:	7a1a      	ldrb	r2, [r3, #8]
 8011dbe:	4b21      	ldr	r3, [pc, #132]	@ (8011e44 <udp_input_local_match+0xc4>)
 8011dc0:	685b      	ldr	r3, [r3, #4]
 8011dc2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011dc6:	3301      	adds	r3, #1
 8011dc8:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011dca:	429a      	cmp	r2, r3
 8011dcc:	d001      	beq.n	8011dd2 <udp_input_local_match+0x52>
    return 0;
 8011dce:	2300      	movs	r3, #0
 8011dd0:	e02b      	b.n	8011e2a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8011dd2:	79fb      	ldrb	r3, [r7, #7]
 8011dd4:	2b00      	cmp	r3, #0
 8011dd6:	d018      	beq.n	8011e0a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011dd8:	68fb      	ldr	r3, [r7, #12]
 8011dda:	2b00      	cmp	r3, #0
 8011ddc:	d013      	beq.n	8011e06 <udp_input_local_match+0x86>
 8011dde:	68fb      	ldr	r3, [r7, #12]
 8011de0:	681b      	ldr	r3, [r3, #0]
 8011de2:	2b00      	cmp	r3, #0
 8011de4:	d00f      	beq.n	8011e06 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8011de6:	4b17      	ldr	r3, [pc, #92]	@ (8011e44 <udp_input_local_match+0xc4>)
 8011de8:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011dee:	d00a      	beq.n	8011e06 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8011df0:	68fb      	ldr	r3, [r7, #12]
 8011df2:	681a      	ldr	r2, [r3, #0]
 8011df4:	4b13      	ldr	r3, [pc, #76]	@ (8011e44 <udp_input_local_match+0xc4>)
 8011df6:	695b      	ldr	r3, [r3, #20]
 8011df8:	405a      	eors	r2, r3
 8011dfa:	68bb      	ldr	r3, [r7, #8]
 8011dfc:	3308      	adds	r3, #8
 8011dfe:	681b      	ldr	r3, [r3, #0]
 8011e00:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8011e02:	2b00      	cmp	r3, #0
 8011e04:	d110      	bne.n	8011e28 <udp_input_local_match+0xa8>
          return 1;
 8011e06:	2301      	movs	r3, #1
 8011e08:	e00f      	b.n	8011e2a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8011e0a:	68fb      	ldr	r3, [r7, #12]
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	d009      	beq.n	8011e24 <udp_input_local_match+0xa4>
 8011e10:	68fb      	ldr	r3, [r7, #12]
 8011e12:	681b      	ldr	r3, [r3, #0]
 8011e14:	2b00      	cmp	r3, #0
 8011e16:	d005      	beq.n	8011e24 <udp_input_local_match+0xa4>
 8011e18:	68fb      	ldr	r3, [r7, #12]
 8011e1a:	681a      	ldr	r2, [r3, #0]
 8011e1c:	4b09      	ldr	r3, [pc, #36]	@ (8011e44 <udp_input_local_match+0xc4>)
 8011e1e:	695b      	ldr	r3, [r3, #20]
 8011e20:	429a      	cmp	r2, r3
 8011e22:	d101      	bne.n	8011e28 <udp_input_local_match+0xa8>
        return 1;
 8011e24:	2301      	movs	r3, #1
 8011e26:	e000      	b.n	8011e2a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8011e28:	2300      	movs	r3, #0
}
 8011e2a:	4618      	mov	r0, r3
 8011e2c:	3710      	adds	r7, #16
 8011e2e:	46bd      	mov	sp, r7
 8011e30:	bd80      	pop	{r7, pc}
 8011e32:	bf00      	nop
 8011e34:	08020194 	.word	0x08020194
 8011e38:	080201c4 	.word	0x080201c4
 8011e3c:	080201e8 	.word	0x080201e8
 8011e40:	08020210 	.word	0x08020210
 8011e44:	20005f04 	.word	0x20005f04

08011e48 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8011e48:	b590      	push	{r4, r7, lr}
 8011e4a:	b08d      	sub	sp, #52	@ 0x34
 8011e4c:	af02      	add	r7, sp, #8
 8011e4e:	6078      	str	r0, [r7, #4]
 8011e50:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8011e52:	2300      	movs	r3, #0
 8011e54:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	2b00      	cmp	r3, #0
 8011e5a:	d105      	bne.n	8011e68 <udp_input+0x20>
 8011e5c:	4b7c      	ldr	r3, [pc, #496]	@ (8012050 <udp_input+0x208>)
 8011e5e:	22cf      	movs	r2, #207	@ 0xcf
 8011e60:	497c      	ldr	r1, [pc, #496]	@ (8012054 <udp_input+0x20c>)
 8011e62:	487d      	ldr	r0, [pc, #500]	@ (8012058 <udp_input+0x210>)
 8011e64:	f003 feea 	bl	8015c3c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8011e68:	683b      	ldr	r3, [r7, #0]
 8011e6a:	2b00      	cmp	r3, #0
 8011e6c:	d105      	bne.n	8011e7a <udp_input+0x32>
 8011e6e:	4b78      	ldr	r3, [pc, #480]	@ (8012050 <udp_input+0x208>)
 8011e70:	22d0      	movs	r2, #208	@ 0xd0
 8011e72:	497a      	ldr	r1, [pc, #488]	@ (801205c <udp_input+0x214>)
 8011e74:	4878      	ldr	r0, [pc, #480]	@ (8012058 <udp_input+0x210>)
 8011e76:	f003 fee1 	bl	8015c3c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	895b      	ldrh	r3, [r3, #10]
 8011e7e:	2b07      	cmp	r3, #7
 8011e80:	d803      	bhi.n	8011e8a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8011e82:	6878      	ldr	r0, [r7, #4]
 8011e84:	f7fa f898 	bl	800bfb8 <pbuf_free>
    goto end;
 8011e88:	e0de      	b.n	8012048 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	685b      	ldr	r3, [r3, #4]
 8011e8e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8011e90:	4b73      	ldr	r3, [pc, #460]	@ (8012060 <udp_input+0x218>)
 8011e92:	695b      	ldr	r3, [r3, #20]
 8011e94:	4a72      	ldr	r2, [pc, #456]	@ (8012060 <udp_input+0x218>)
 8011e96:	6812      	ldr	r2, [r2, #0]
 8011e98:	4611      	mov	r1, r2
 8011e9a:	4618      	mov	r0, r3
 8011e9c:	f001 ffe2 	bl	8013e64 <ip4_addr_isbroadcast_u32>
 8011ea0:	4603      	mov	r3, r0
 8011ea2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8011ea4:	697b      	ldr	r3, [r7, #20]
 8011ea6:	881b      	ldrh	r3, [r3, #0]
 8011ea8:	b29b      	uxth	r3, r3
 8011eaa:	4618      	mov	r0, r3
 8011eac:	f7f8 fa5c 	bl	800a368 <lwip_htons>
 8011eb0:	4603      	mov	r3, r0
 8011eb2:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8011eb4:	697b      	ldr	r3, [r7, #20]
 8011eb6:	885b      	ldrh	r3, [r3, #2]
 8011eb8:	b29b      	uxth	r3, r3
 8011eba:	4618      	mov	r0, r3
 8011ebc:	f7f8 fa54 	bl	800a368 <lwip_htons>
 8011ec0:	4603      	mov	r3, r0
 8011ec2:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8011ec4:	2300      	movs	r3, #0
 8011ec6:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 8011ec8:	2300      	movs	r3, #0
 8011eca:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8011ecc:	2300      	movs	r3, #0
 8011ece:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011ed0:	4b64      	ldr	r3, [pc, #400]	@ (8012064 <udp_input+0x21c>)
 8011ed2:	681b      	ldr	r3, [r3, #0]
 8011ed4:	627b      	str	r3, [r7, #36]	@ 0x24
 8011ed6:	e054      	b.n	8011f82 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8011ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011eda:	8a5b      	ldrh	r3, [r3, #18]
 8011edc:	89fa      	ldrh	r2, [r7, #14]
 8011ede:	429a      	cmp	r2, r3
 8011ee0:	d14a      	bne.n	8011f78 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8011ee2:	7cfb      	ldrb	r3, [r7, #19]
 8011ee4:	461a      	mov	r2, r3
 8011ee6:	6839      	ldr	r1, [r7, #0]
 8011ee8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011eea:	f7ff ff49 	bl	8011d80 <udp_input_local_match>
 8011eee:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8011ef0:	2b00      	cmp	r3, #0
 8011ef2:	d041      	beq.n	8011f78 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8011ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ef6:	7c1b      	ldrb	r3, [r3, #16]
 8011ef8:	f003 0304 	and.w	r3, r3, #4
 8011efc:	2b00      	cmp	r3, #0
 8011efe:	d11d      	bne.n	8011f3c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8011f00:	69fb      	ldr	r3, [r7, #28]
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	d102      	bne.n	8011f0c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8011f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f08:	61fb      	str	r3, [r7, #28]
 8011f0a:	e017      	b.n	8011f3c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8011f0c:	7cfb      	ldrb	r3, [r7, #19]
 8011f0e:	2b00      	cmp	r3, #0
 8011f10:	d014      	beq.n	8011f3c <udp_input+0xf4>
 8011f12:	4b53      	ldr	r3, [pc, #332]	@ (8012060 <udp_input+0x218>)
 8011f14:	695b      	ldr	r3, [r3, #20]
 8011f16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f1a:	d10f      	bne.n	8011f3c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8011f1c:	69fb      	ldr	r3, [r7, #28]
 8011f1e:	681a      	ldr	r2, [r3, #0]
 8011f20:	683b      	ldr	r3, [r7, #0]
 8011f22:	3304      	adds	r3, #4
 8011f24:	681b      	ldr	r3, [r3, #0]
 8011f26:	429a      	cmp	r2, r3
 8011f28:	d008      	beq.n	8011f3c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8011f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f2c:	681a      	ldr	r2, [r3, #0]
 8011f2e:	683b      	ldr	r3, [r7, #0]
 8011f30:	3304      	adds	r3, #4
 8011f32:	681b      	ldr	r3, [r3, #0]
 8011f34:	429a      	cmp	r2, r3
 8011f36:	d101      	bne.n	8011f3c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8011f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f3a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8011f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f3e:	8a9b      	ldrh	r3, [r3, #20]
 8011f40:	8a3a      	ldrh	r2, [r7, #16]
 8011f42:	429a      	cmp	r2, r3
 8011f44:	d118      	bne.n	8011f78 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8011f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f48:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8011f4a:	2b00      	cmp	r3, #0
 8011f4c:	d005      	beq.n	8011f5a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8011f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f50:	685a      	ldr	r2, [r3, #4]
 8011f52:	4b43      	ldr	r3, [pc, #268]	@ (8012060 <udp_input+0x218>)
 8011f54:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8011f56:	429a      	cmp	r2, r3
 8011f58:	d10e      	bne.n	8011f78 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8011f5a:	6a3b      	ldr	r3, [r7, #32]
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	d014      	beq.n	8011f8a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8011f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f62:	68da      	ldr	r2, [r3, #12]
 8011f64:	6a3b      	ldr	r3, [r7, #32]
 8011f66:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8011f68:	4b3e      	ldr	r3, [pc, #248]	@ (8012064 <udp_input+0x21c>)
 8011f6a:	681a      	ldr	r2, [r3, #0]
 8011f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f6e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8011f70:	4a3c      	ldr	r2, [pc, #240]	@ (8012064 <udp_input+0x21c>)
 8011f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f74:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8011f76:	e008      	b.n	8011f8a <udp_input+0x142>
      }
    }

    prev = pcb;
 8011f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f7a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f7e:	68db      	ldr	r3, [r3, #12]
 8011f80:	627b      	str	r3, [r7, #36]	@ 0x24
 8011f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	d1a7      	bne.n	8011ed8 <udp_input+0x90>
 8011f88:	e000      	b.n	8011f8c <udp_input+0x144>
        break;
 8011f8a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8011f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f8e:	2b00      	cmp	r3, #0
 8011f90:	d101      	bne.n	8011f96 <udp_input+0x14e>
    pcb = uncon_pcb;
 8011f92:	69fb      	ldr	r3, [r7, #28]
 8011f94:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8011f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f98:	2b00      	cmp	r3, #0
 8011f9a:	d002      	beq.n	8011fa2 <udp_input+0x15a>
    for_us = 1;
 8011f9c:	2301      	movs	r3, #1
 8011f9e:	76fb      	strb	r3, [r7, #27]
 8011fa0:	e00a      	b.n	8011fb8 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8011fa2:	683b      	ldr	r3, [r7, #0]
 8011fa4:	3304      	adds	r3, #4
 8011fa6:	681a      	ldr	r2, [r3, #0]
 8011fa8:	4b2d      	ldr	r3, [pc, #180]	@ (8012060 <udp_input+0x218>)
 8011faa:	695b      	ldr	r3, [r3, #20]
 8011fac:	429a      	cmp	r2, r3
 8011fae:	bf0c      	ite	eq
 8011fb0:	2301      	moveq	r3, #1
 8011fb2:	2300      	movne	r3, #0
 8011fb4:	b2db      	uxtb	r3, r3
 8011fb6:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8011fb8:	7efb      	ldrb	r3, [r7, #27]
 8011fba:	2b00      	cmp	r3, #0
 8011fbc:	d041      	beq.n	8012042 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8011fbe:	2108      	movs	r1, #8
 8011fc0:	6878      	ldr	r0, [r7, #4]
 8011fc2:	f7f9 ff73 	bl	800beac <pbuf_remove_header>
 8011fc6:	4603      	mov	r3, r0
 8011fc8:	2b00      	cmp	r3, #0
 8011fca:	d00a      	beq.n	8011fe2 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8011fcc:	4b20      	ldr	r3, [pc, #128]	@ (8012050 <udp_input+0x208>)
 8011fce:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8011fd2:	4925      	ldr	r1, [pc, #148]	@ (8012068 <udp_input+0x220>)
 8011fd4:	4820      	ldr	r0, [pc, #128]	@ (8012058 <udp_input+0x210>)
 8011fd6:	f003 fe31 	bl	8015c3c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8011fda:	6878      	ldr	r0, [r7, #4]
 8011fdc:	f7f9 ffec 	bl	800bfb8 <pbuf_free>
      goto end;
 8011fe0:	e032      	b.n	8012048 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8011fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011fe4:	2b00      	cmp	r3, #0
 8011fe6:	d012      	beq.n	801200e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8011fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011fea:	699b      	ldr	r3, [r3, #24]
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	d00a      	beq.n	8012006 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8011ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ff2:	699c      	ldr	r4, [r3, #24]
 8011ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ff6:	69d8      	ldr	r0, [r3, #28]
 8011ff8:	8a3b      	ldrh	r3, [r7, #16]
 8011ffa:	9300      	str	r3, [sp, #0]
 8011ffc:	4b1b      	ldr	r3, [pc, #108]	@ (801206c <udp_input+0x224>)
 8011ffe:	687a      	ldr	r2, [r7, #4]
 8012000:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8012002:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8012004:	e021      	b.n	801204a <udp_input+0x202>
        pbuf_free(p);
 8012006:	6878      	ldr	r0, [r7, #4]
 8012008:	f7f9 ffd6 	bl	800bfb8 <pbuf_free>
        goto end;
 801200c:	e01c      	b.n	8012048 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801200e:	7cfb      	ldrb	r3, [r7, #19]
 8012010:	2b00      	cmp	r3, #0
 8012012:	d112      	bne.n	801203a <udp_input+0x1f2>
 8012014:	4b12      	ldr	r3, [pc, #72]	@ (8012060 <udp_input+0x218>)
 8012016:	695b      	ldr	r3, [r3, #20]
 8012018:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801201c:	2be0      	cmp	r3, #224	@ 0xe0
 801201e:	d00c      	beq.n	801203a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8012020:	4b0f      	ldr	r3, [pc, #60]	@ (8012060 <udp_input+0x218>)
 8012022:	899b      	ldrh	r3, [r3, #12]
 8012024:	3308      	adds	r3, #8
 8012026:	b29b      	uxth	r3, r3
 8012028:	b21b      	sxth	r3, r3
 801202a:	4619      	mov	r1, r3
 801202c:	6878      	ldr	r0, [r7, #4]
 801202e:	f7f9 ffb0 	bl	800bf92 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8012032:	2103      	movs	r1, #3
 8012034:	6878      	ldr	r0, [r7, #4]
 8012036:	f001 fbf5 	bl	8013824 <icmp_dest_unreach>
      pbuf_free(p);
 801203a:	6878      	ldr	r0, [r7, #4]
 801203c:	f7f9 ffbc 	bl	800bfb8 <pbuf_free>
  return;
 8012040:	e003      	b.n	801204a <udp_input+0x202>
    pbuf_free(p);
 8012042:	6878      	ldr	r0, [r7, #4]
 8012044:	f7f9 ffb8 	bl	800bfb8 <pbuf_free>
  return;
 8012048:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801204a:	372c      	adds	r7, #44	@ 0x2c
 801204c:	46bd      	mov	sp, r7
 801204e:	bd90      	pop	{r4, r7, pc}
 8012050:	08020194 	.word	0x08020194
 8012054:	08020238 	.word	0x08020238
 8012058:	080201e8 	.word	0x080201e8
 801205c:	08020250 	.word	0x08020250
 8012060:	20005f04 	.word	0x20005f04
 8012064:	200092a0 	.word	0x200092a0
 8012068:	0802026c 	.word	0x0802026c
 801206c:	20005f14 	.word	0x20005f14

08012070 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 8012070:	b580      	push	{r7, lr}
 8012072:	b082      	sub	sp, #8
 8012074:	af00      	add	r7, sp, #0
 8012076:	6078      	str	r0, [r7, #4]
 8012078:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	2b00      	cmp	r3, #0
 801207e:	d109      	bne.n	8012094 <udp_send+0x24>
 8012080:	4b11      	ldr	r3, [pc, #68]	@ (80120c8 <udp_send+0x58>)
 8012082:	f240 12d5 	movw	r2, #469	@ 0x1d5
 8012086:	4911      	ldr	r1, [pc, #68]	@ (80120cc <udp_send+0x5c>)
 8012088:	4811      	ldr	r0, [pc, #68]	@ (80120d0 <udp_send+0x60>)
 801208a:	f003 fdd7 	bl	8015c3c <iprintf>
 801208e:	f06f 030f 	mvn.w	r3, #15
 8012092:	e015      	b.n	80120c0 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 8012094:	683b      	ldr	r3, [r7, #0]
 8012096:	2b00      	cmp	r3, #0
 8012098:	d109      	bne.n	80120ae <udp_send+0x3e>
 801209a:	4b0b      	ldr	r3, [pc, #44]	@ (80120c8 <udp_send+0x58>)
 801209c:	f44f 72eb 	mov.w	r2, #470	@ 0x1d6
 80120a0:	490c      	ldr	r1, [pc, #48]	@ (80120d4 <udp_send+0x64>)
 80120a2:	480b      	ldr	r0, [pc, #44]	@ (80120d0 <udp_send+0x60>)
 80120a4:	f003 fdca 	bl	8015c3c <iprintf>
 80120a8:	f06f 030f 	mvn.w	r3, #15
 80120ac:	e008      	b.n	80120c0 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	1d1a      	adds	r2, r3, #4
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	8a9b      	ldrh	r3, [r3, #20]
 80120b6:	6839      	ldr	r1, [r7, #0]
 80120b8:	6878      	ldr	r0, [r7, #4]
 80120ba:	f000 f80d 	bl	80120d8 <udp_sendto>
 80120be:	4603      	mov	r3, r0
}
 80120c0:	4618      	mov	r0, r3
 80120c2:	3708      	adds	r7, #8
 80120c4:	46bd      	mov	sp, r7
 80120c6:	bd80      	pop	{r7, pc}
 80120c8:	08020194 	.word	0x08020194
 80120cc:	08020288 	.word	0x08020288
 80120d0:	080201e8 	.word	0x080201e8
 80120d4:	080202a0 	.word	0x080202a0

080120d8 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 80120d8:	b580      	push	{r7, lr}
 80120da:	b088      	sub	sp, #32
 80120dc:	af02      	add	r7, sp, #8
 80120de:	60f8      	str	r0, [r7, #12]
 80120e0:	60b9      	str	r1, [r7, #8]
 80120e2:	607a      	str	r2, [r7, #4]
 80120e4:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 80120e6:	68fb      	ldr	r3, [r7, #12]
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	d109      	bne.n	8012100 <udp_sendto+0x28>
 80120ec:	4b23      	ldr	r3, [pc, #140]	@ (801217c <udp_sendto+0xa4>)
 80120ee:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80120f2:	4923      	ldr	r1, [pc, #140]	@ (8012180 <udp_sendto+0xa8>)
 80120f4:	4823      	ldr	r0, [pc, #140]	@ (8012184 <udp_sendto+0xac>)
 80120f6:	f003 fda1 	bl	8015c3c <iprintf>
 80120fa:	f06f 030f 	mvn.w	r3, #15
 80120fe:	e038      	b.n	8012172 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8012100:	68bb      	ldr	r3, [r7, #8]
 8012102:	2b00      	cmp	r3, #0
 8012104:	d109      	bne.n	801211a <udp_sendto+0x42>
 8012106:	4b1d      	ldr	r3, [pc, #116]	@ (801217c <udp_sendto+0xa4>)
 8012108:	f240 2219 	movw	r2, #537	@ 0x219
 801210c:	491e      	ldr	r1, [pc, #120]	@ (8012188 <udp_sendto+0xb0>)
 801210e:	481d      	ldr	r0, [pc, #116]	@ (8012184 <udp_sendto+0xac>)
 8012110:	f003 fd94 	bl	8015c3c <iprintf>
 8012114:	f06f 030f 	mvn.w	r3, #15
 8012118:	e02b      	b.n	8012172 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	2b00      	cmp	r3, #0
 801211e:	d109      	bne.n	8012134 <udp_sendto+0x5c>
 8012120:	4b16      	ldr	r3, [pc, #88]	@ (801217c <udp_sendto+0xa4>)
 8012122:	f240 221a 	movw	r2, #538	@ 0x21a
 8012126:	4919      	ldr	r1, [pc, #100]	@ (801218c <udp_sendto+0xb4>)
 8012128:	4816      	ldr	r0, [pc, #88]	@ (8012184 <udp_sendto+0xac>)
 801212a:	f003 fd87 	bl	8015c3c <iprintf>
 801212e:	f06f 030f 	mvn.w	r3, #15
 8012132:	e01e      	b.n	8012172 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8012134:	68fb      	ldr	r3, [r7, #12]
 8012136:	7a1b      	ldrb	r3, [r3, #8]
 8012138:	2b00      	cmp	r3, #0
 801213a:	d006      	beq.n	801214a <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 801213c:	68fb      	ldr	r3, [r7, #12]
 801213e:	7a1b      	ldrb	r3, [r3, #8]
 8012140:	4618      	mov	r0, r3
 8012142:	f7f9 fbd9 	bl	800b8f8 <netif_get_by_index>
 8012146:	6178      	str	r0, [r7, #20]
 8012148:	e003      	b.n	8012152 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 801214a:	6878      	ldr	r0, [r7, #4]
 801214c:	f001 fbf4 	bl	8013938 <ip4_route>
 8012150:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8012152:	697b      	ldr	r3, [r7, #20]
 8012154:	2b00      	cmp	r3, #0
 8012156:	d102      	bne.n	801215e <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8012158:	f06f 0303 	mvn.w	r3, #3
 801215c:	e009      	b.n	8012172 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801215e:	887a      	ldrh	r2, [r7, #2]
 8012160:	697b      	ldr	r3, [r7, #20]
 8012162:	9300      	str	r3, [sp, #0]
 8012164:	4613      	mov	r3, r2
 8012166:	687a      	ldr	r2, [r7, #4]
 8012168:	68b9      	ldr	r1, [r7, #8]
 801216a:	68f8      	ldr	r0, [r7, #12]
 801216c:	f000 f810 	bl	8012190 <udp_sendto_if>
 8012170:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8012172:	4618      	mov	r0, r3
 8012174:	3718      	adds	r7, #24
 8012176:	46bd      	mov	sp, r7
 8012178:	bd80      	pop	{r7, pc}
 801217a:	bf00      	nop
 801217c:	08020194 	.word	0x08020194
 8012180:	080202b8 	.word	0x080202b8
 8012184:	080201e8 	.word	0x080201e8
 8012188:	080202d0 	.word	0x080202d0
 801218c:	080202ec 	.word	0x080202ec

08012190 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8012190:	b580      	push	{r7, lr}
 8012192:	b088      	sub	sp, #32
 8012194:	af02      	add	r7, sp, #8
 8012196:	60f8      	str	r0, [r7, #12]
 8012198:	60b9      	str	r1, [r7, #8]
 801219a:	607a      	str	r2, [r7, #4]
 801219c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801219e:	68fb      	ldr	r3, [r7, #12]
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	d109      	bne.n	80121b8 <udp_sendto_if+0x28>
 80121a4:	4b2e      	ldr	r3, [pc, #184]	@ (8012260 <udp_sendto_if+0xd0>)
 80121a6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80121aa:	492e      	ldr	r1, [pc, #184]	@ (8012264 <udp_sendto_if+0xd4>)
 80121ac:	482e      	ldr	r0, [pc, #184]	@ (8012268 <udp_sendto_if+0xd8>)
 80121ae:	f003 fd45 	bl	8015c3c <iprintf>
 80121b2:	f06f 030f 	mvn.w	r3, #15
 80121b6:	e04f      	b.n	8012258 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 80121b8:	68bb      	ldr	r3, [r7, #8]
 80121ba:	2b00      	cmp	r3, #0
 80121bc:	d109      	bne.n	80121d2 <udp_sendto_if+0x42>
 80121be:	4b28      	ldr	r3, [pc, #160]	@ (8012260 <udp_sendto_if+0xd0>)
 80121c0:	f240 2281 	movw	r2, #641	@ 0x281
 80121c4:	4929      	ldr	r1, [pc, #164]	@ (801226c <udp_sendto_if+0xdc>)
 80121c6:	4828      	ldr	r0, [pc, #160]	@ (8012268 <udp_sendto_if+0xd8>)
 80121c8:	f003 fd38 	bl	8015c3c <iprintf>
 80121cc:	f06f 030f 	mvn.w	r3, #15
 80121d0:	e042      	b.n	8012258 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	d109      	bne.n	80121ec <udp_sendto_if+0x5c>
 80121d8:	4b21      	ldr	r3, [pc, #132]	@ (8012260 <udp_sendto_if+0xd0>)
 80121da:	f240 2282 	movw	r2, #642	@ 0x282
 80121de:	4924      	ldr	r1, [pc, #144]	@ (8012270 <udp_sendto_if+0xe0>)
 80121e0:	4821      	ldr	r0, [pc, #132]	@ (8012268 <udp_sendto_if+0xd8>)
 80121e2:	f003 fd2b 	bl	8015c3c <iprintf>
 80121e6:	f06f 030f 	mvn.w	r3, #15
 80121ea:	e035      	b.n	8012258 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 80121ec:	6a3b      	ldr	r3, [r7, #32]
 80121ee:	2b00      	cmp	r3, #0
 80121f0:	d109      	bne.n	8012206 <udp_sendto_if+0x76>
 80121f2:	4b1b      	ldr	r3, [pc, #108]	@ (8012260 <udp_sendto_if+0xd0>)
 80121f4:	f240 2283 	movw	r2, #643	@ 0x283
 80121f8:	491e      	ldr	r1, [pc, #120]	@ (8012274 <udp_sendto_if+0xe4>)
 80121fa:	481b      	ldr	r0, [pc, #108]	@ (8012268 <udp_sendto_if+0xd8>)
 80121fc:	f003 fd1e 	bl	8015c3c <iprintf>
 8012200:	f06f 030f 	mvn.w	r3, #15
 8012204:	e028      	b.n	8012258 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012206:	68fb      	ldr	r3, [r7, #12]
 8012208:	2b00      	cmp	r3, #0
 801220a:	d009      	beq.n	8012220 <udp_sendto_if+0x90>
 801220c:	68fb      	ldr	r3, [r7, #12]
 801220e:	681b      	ldr	r3, [r3, #0]
 8012210:	2b00      	cmp	r3, #0
 8012212:	d005      	beq.n	8012220 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8012214:	68fb      	ldr	r3, [r7, #12]
 8012216:	681b      	ldr	r3, [r3, #0]
 8012218:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801221c:	2be0      	cmp	r3, #224	@ 0xe0
 801221e:	d103      	bne.n	8012228 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8012220:	6a3b      	ldr	r3, [r7, #32]
 8012222:	3304      	adds	r3, #4
 8012224:	617b      	str	r3, [r7, #20]
 8012226:	e00b      	b.n	8012240 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8012228:	68fb      	ldr	r3, [r7, #12]
 801222a:	681a      	ldr	r2, [r3, #0]
 801222c:	6a3b      	ldr	r3, [r7, #32]
 801222e:	3304      	adds	r3, #4
 8012230:	681b      	ldr	r3, [r3, #0]
 8012232:	429a      	cmp	r2, r3
 8012234:	d002      	beq.n	801223c <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8012236:	f06f 0303 	mvn.w	r3, #3
 801223a:	e00d      	b.n	8012258 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801223c:	68fb      	ldr	r3, [r7, #12]
 801223e:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8012240:	887a      	ldrh	r2, [r7, #2]
 8012242:	697b      	ldr	r3, [r7, #20]
 8012244:	9301      	str	r3, [sp, #4]
 8012246:	6a3b      	ldr	r3, [r7, #32]
 8012248:	9300      	str	r3, [sp, #0]
 801224a:	4613      	mov	r3, r2
 801224c:	687a      	ldr	r2, [r7, #4]
 801224e:	68b9      	ldr	r1, [r7, #8]
 8012250:	68f8      	ldr	r0, [r7, #12]
 8012252:	f000 f811 	bl	8012278 <udp_sendto_if_src>
 8012256:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8012258:	4618      	mov	r0, r3
 801225a:	3718      	adds	r7, #24
 801225c:	46bd      	mov	sp, r7
 801225e:	bd80      	pop	{r7, pc}
 8012260:	08020194 	.word	0x08020194
 8012264:	08020308 	.word	0x08020308
 8012268:	080201e8 	.word	0x080201e8
 801226c:	08020324 	.word	0x08020324
 8012270:	08020340 	.word	0x08020340
 8012274:	08020360 	.word	0x08020360

08012278 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8012278:	b580      	push	{r7, lr}
 801227a:	b08c      	sub	sp, #48	@ 0x30
 801227c:	af04      	add	r7, sp, #16
 801227e:	60f8      	str	r0, [r7, #12]
 8012280:	60b9      	str	r1, [r7, #8]
 8012282:	607a      	str	r2, [r7, #4]
 8012284:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8012286:	68fb      	ldr	r3, [r7, #12]
 8012288:	2b00      	cmp	r3, #0
 801228a:	d109      	bne.n	80122a0 <udp_sendto_if_src+0x28>
 801228c:	4b65      	ldr	r3, [pc, #404]	@ (8012424 <udp_sendto_if_src+0x1ac>)
 801228e:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8012292:	4965      	ldr	r1, [pc, #404]	@ (8012428 <udp_sendto_if_src+0x1b0>)
 8012294:	4865      	ldr	r0, [pc, #404]	@ (801242c <udp_sendto_if_src+0x1b4>)
 8012296:	f003 fcd1 	bl	8015c3c <iprintf>
 801229a:	f06f 030f 	mvn.w	r3, #15
 801229e:	e0bc      	b.n	801241a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 80122a0:	68bb      	ldr	r3, [r7, #8]
 80122a2:	2b00      	cmp	r3, #0
 80122a4:	d109      	bne.n	80122ba <udp_sendto_if_src+0x42>
 80122a6:	4b5f      	ldr	r3, [pc, #380]	@ (8012424 <udp_sendto_if_src+0x1ac>)
 80122a8:	f240 22d2 	movw	r2, #722	@ 0x2d2
 80122ac:	4960      	ldr	r1, [pc, #384]	@ (8012430 <udp_sendto_if_src+0x1b8>)
 80122ae:	485f      	ldr	r0, [pc, #380]	@ (801242c <udp_sendto_if_src+0x1b4>)
 80122b0:	f003 fcc4 	bl	8015c3c <iprintf>
 80122b4:	f06f 030f 	mvn.w	r3, #15
 80122b8:	e0af      	b.n	801241a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	2b00      	cmp	r3, #0
 80122be:	d109      	bne.n	80122d4 <udp_sendto_if_src+0x5c>
 80122c0:	4b58      	ldr	r3, [pc, #352]	@ (8012424 <udp_sendto_if_src+0x1ac>)
 80122c2:	f240 22d3 	movw	r2, #723	@ 0x2d3
 80122c6:	495b      	ldr	r1, [pc, #364]	@ (8012434 <udp_sendto_if_src+0x1bc>)
 80122c8:	4858      	ldr	r0, [pc, #352]	@ (801242c <udp_sendto_if_src+0x1b4>)
 80122ca:	f003 fcb7 	bl	8015c3c <iprintf>
 80122ce:	f06f 030f 	mvn.w	r3, #15
 80122d2:	e0a2      	b.n	801241a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 80122d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80122d6:	2b00      	cmp	r3, #0
 80122d8:	d109      	bne.n	80122ee <udp_sendto_if_src+0x76>
 80122da:	4b52      	ldr	r3, [pc, #328]	@ (8012424 <udp_sendto_if_src+0x1ac>)
 80122dc:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 80122e0:	4955      	ldr	r1, [pc, #340]	@ (8012438 <udp_sendto_if_src+0x1c0>)
 80122e2:	4852      	ldr	r0, [pc, #328]	@ (801242c <udp_sendto_if_src+0x1b4>)
 80122e4:	f003 fcaa 	bl	8015c3c <iprintf>
 80122e8:	f06f 030f 	mvn.w	r3, #15
 80122ec:	e095      	b.n	801241a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 80122ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80122f0:	2b00      	cmp	r3, #0
 80122f2:	d109      	bne.n	8012308 <udp_sendto_if_src+0x90>
 80122f4:	4b4b      	ldr	r3, [pc, #300]	@ (8012424 <udp_sendto_if_src+0x1ac>)
 80122f6:	f240 22d5 	movw	r2, #725	@ 0x2d5
 80122fa:	4950      	ldr	r1, [pc, #320]	@ (801243c <udp_sendto_if_src+0x1c4>)
 80122fc:	484b      	ldr	r0, [pc, #300]	@ (801242c <udp_sendto_if_src+0x1b4>)
 80122fe:	f003 fc9d 	bl	8015c3c <iprintf>
 8012302:	f06f 030f 	mvn.w	r3, #15
 8012306:	e088      	b.n	801241a <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8012308:	68fb      	ldr	r3, [r7, #12]
 801230a:	8a5b      	ldrh	r3, [r3, #18]
 801230c:	2b00      	cmp	r3, #0
 801230e:	d10f      	bne.n	8012330 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8012310:	68f9      	ldr	r1, [r7, #12]
 8012312:	68fb      	ldr	r3, [r7, #12]
 8012314:	8a5b      	ldrh	r3, [r3, #18]
 8012316:	461a      	mov	r2, r3
 8012318:	68f8      	ldr	r0, [r7, #12]
 801231a:	f000 f893 	bl	8012444 <udp_bind>
 801231e:	4603      	mov	r3, r0
 8012320:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8012322:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8012326:	2b00      	cmp	r3, #0
 8012328:	d002      	beq.n	8012330 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801232a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801232e:	e074      	b.n	801241a <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8012330:	68bb      	ldr	r3, [r7, #8]
 8012332:	891b      	ldrh	r3, [r3, #8]
 8012334:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8012338:	4293      	cmp	r3, r2
 801233a:	d902      	bls.n	8012342 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 801233c:	f04f 33ff 	mov.w	r3, #4294967295
 8012340:	e06b      	b.n	801241a <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8012342:	2108      	movs	r1, #8
 8012344:	68b8      	ldr	r0, [r7, #8]
 8012346:	f7f9 fda1 	bl	800be8c <pbuf_add_header>
 801234a:	4603      	mov	r3, r0
 801234c:	2b00      	cmp	r3, #0
 801234e:	d015      	beq.n	801237c <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8012350:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8012354:	2108      	movs	r1, #8
 8012356:	2022      	movs	r0, #34	@ 0x22
 8012358:	f7f9 fb4a 	bl	800b9f0 <pbuf_alloc>
 801235c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801235e:	69fb      	ldr	r3, [r7, #28]
 8012360:	2b00      	cmp	r3, #0
 8012362:	d102      	bne.n	801236a <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8012364:	f04f 33ff 	mov.w	r3, #4294967295
 8012368:	e057      	b.n	801241a <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801236a:	68bb      	ldr	r3, [r7, #8]
 801236c:	891b      	ldrh	r3, [r3, #8]
 801236e:	2b00      	cmp	r3, #0
 8012370:	d006      	beq.n	8012380 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8012372:	68b9      	ldr	r1, [r7, #8]
 8012374:	69f8      	ldr	r0, [r7, #28]
 8012376:	f7f9 ff37 	bl	800c1e8 <pbuf_chain>
 801237a:	e001      	b.n	8012380 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801237c:	68bb      	ldr	r3, [r7, #8]
 801237e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8012380:	69fb      	ldr	r3, [r7, #28]
 8012382:	895b      	ldrh	r3, [r3, #10]
 8012384:	2b07      	cmp	r3, #7
 8012386:	d806      	bhi.n	8012396 <udp_sendto_if_src+0x11e>
 8012388:	4b26      	ldr	r3, [pc, #152]	@ (8012424 <udp_sendto_if_src+0x1ac>)
 801238a:	f240 320d 	movw	r2, #781	@ 0x30d
 801238e:	492c      	ldr	r1, [pc, #176]	@ (8012440 <udp_sendto_if_src+0x1c8>)
 8012390:	4826      	ldr	r0, [pc, #152]	@ (801242c <udp_sendto_if_src+0x1b4>)
 8012392:	f003 fc53 	bl	8015c3c <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8012396:	69fb      	ldr	r3, [r7, #28]
 8012398:	685b      	ldr	r3, [r3, #4]
 801239a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801239c:	68fb      	ldr	r3, [r7, #12]
 801239e:	8a5b      	ldrh	r3, [r3, #18]
 80123a0:	4618      	mov	r0, r3
 80123a2:	f7f7 ffe1 	bl	800a368 <lwip_htons>
 80123a6:	4603      	mov	r3, r0
 80123a8:	461a      	mov	r2, r3
 80123aa:	697b      	ldr	r3, [r7, #20]
 80123ac:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 80123ae:	887b      	ldrh	r3, [r7, #2]
 80123b0:	4618      	mov	r0, r3
 80123b2:	f7f7 ffd9 	bl	800a368 <lwip_htons>
 80123b6:	4603      	mov	r3, r0
 80123b8:	461a      	mov	r2, r3
 80123ba:	697b      	ldr	r3, [r7, #20]
 80123bc:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 80123be:	697b      	ldr	r3, [r7, #20]
 80123c0:	2200      	movs	r2, #0
 80123c2:	719a      	strb	r2, [r3, #6]
 80123c4:	2200      	movs	r2, #0
 80123c6:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 80123c8:	69fb      	ldr	r3, [r7, #28]
 80123ca:	891b      	ldrh	r3, [r3, #8]
 80123cc:	4618      	mov	r0, r3
 80123ce:	f7f7 ffcb 	bl	800a368 <lwip_htons>
 80123d2:	4603      	mov	r3, r0
 80123d4:	461a      	mov	r2, r3
 80123d6:	697b      	ldr	r3, [r7, #20]
 80123d8:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 80123da:	2311      	movs	r3, #17
 80123dc:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 80123de:	68fb      	ldr	r3, [r7, #12]
 80123e0:	7adb      	ldrb	r3, [r3, #11]
 80123e2:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 80123e4:	68fb      	ldr	r3, [r7, #12]
 80123e6:	7a9b      	ldrb	r3, [r3, #10]
 80123e8:	7cb9      	ldrb	r1, [r7, #18]
 80123ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80123ec:	9202      	str	r2, [sp, #8]
 80123ee:	7cfa      	ldrb	r2, [r7, #19]
 80123f0:	9201      	str	r2, [sp, #4]
 80123f2:	9300      	str	r3, [sp, #0]
 80123f4:	460b      	mov	r3, r1
 80123f6:	687a      	ldr	r2, [r7, #4]
 80123f8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80123fa:	69f8      	ldr	r0, [r7, #28]
 80123fc:	f001 fc84 	bl	8013d08 <ip4_output_if_src>
 8012400:	4603      	mov	r3, r0
 8012402:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8012404:	69fa      	ldr	r2, [r7, #28]
 8012406:	68bb      	ldr	r3, [r7, #8]
 8012408:	429a      	cmp	r2, r3
 801240a:	d004      	beq.n	8012416 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 801240c:	69f8      	ldr	r0, [r7, #28]
 801240e:	f7f9 fdd3 	bl	800bfb8 <pbuf_free>
    q = NULL;
 8012412:	2300      	movs	r3, #0
 8012414:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8012416:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801241a:	4618      	mov	r0, r3
 801241c:	3720      	adds	r7, #32
 801241e:	46bd      	mov	sp, r7
 8012420:	bd80      	pop	{r7, pc}
 8012422:	bf00      	nop
 8012424:	08020194 	.word	0x08020194
 8012428:	08020380 	.word	0x08020380
 801242c:	080201e8 	.word	0x080201e8
 8012430:	080203a0 	.word	0x080203a0
 8012434:	080203c0 	.word	0x080203c0
 8012438:	080203e4 	.word	0x080203e4
 801243c:	08020408 	.word	0x08020408
 8012440:	0802042c 	.word	0x0802042c

08012444 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8012444:	b580      	push	{r7, lr}
 8012446:	b086      	sub	sp, #24
 8012448:	af00      	add	r7, sp, #0
 801244a:	60f8      	str	r0, [r7, #12]
 801244c:	60b9      	str	r1, [r7, #8]
 801244e:	4613      	mov	r3, r2
 8012450:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8012452:	68bb      	ldr	r3, [r7, #8]
 8012454:	2b00      	cmp	r3, #0
 8012456:	d101      	bne.n	801245c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8012458:	4b39      	ldr	r3, [pc, #228]	@ (8012540 <udp_bind+0xfc>)
 801245a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801245c:	68fb      	ldr	r3, [r7, #12]
 801245e:	2b00      	cmp	r3, #0
 8012460:	d109      	bne.n	8012476 <udp_bind+0x32>
 8012462:	4b38      	ldr	r3, [pc, #224]	@ (8012544 <udp_bind+0x100>)
 8012464:	f240 32b7 	movw	r2, #951	@ 0x3b7
 8012468:	4937      	ldr	r1, [pc, #220]	@ (8012548 <udp_bind+0x104>)
 801246a:	4838      	ldr	r0, [pc, #224]	@ (801254c <udp_bind+0x108>)
 801246c:	f003 fbe6 	bl	8015c3c <iprintf>
 8012470:	f06f 030f 	mvn.w	r3, #15
 8012474:	e060      	b.n	8012538 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8012476:	2300      	movs	r3, #0
 8012478:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801247a:	4b35      	ldr	r3, [pc, #212]	@ (8012550 <udp_bind+0x10c>)
 801247c:	681b      	ldr	r3, [r3, #0]
 801247e:	617b      	str	r3, [r7, #20]
 8012480:	e009      	b.n	8012496 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8012482:	68fa      	ldr	r2, [r7, #12]
 8012484:	697b      	ldr	r3, [r7, #20]
 8012486:	429a      	cmp	r2, r3
 8012488:	d102      	bne.n	8012490 <udp_bind+0x4c>
      rebind = 1;
 801248a:	2301      	movs	r3, #1
 801248c:	74fb      	strb	r3, [r7, #19]
      break;
 801248e:	e005      	b.n	801249c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012490:	697b      	ldr	r3, [r7, #20]
 8012492:	68db      	ldr	r3, [r3, #12]
 8012494:	617b      	str	r3, [r7, #20]
 8012496:	697b      	ldr	r3, [r7, #20]
 8012498:	2b00      	cmp	r3, #0
 801249a:	d1f2      	bne.n	8012482 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801249c:	88fb      	ldrh	r3, [r7, #6]
 801249e:	2b00      	cmp	r3, #0
 80124a0:	d109      	bne.n	80124b6 <udp_bind+0x72>
    port = udp_new_port();
 80124a2:	f7ff fc35 	bl	8011d10 <udp_new_port>
 80124a6:	4603      	mov	r3, r0
 80124a8:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80124aa:	88fb      	ldrh	r3, [r7, #6]
 80124ac:	2b00      	cmp	r3, #0
 80124ae:	d12c      	bne.n	801250a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 80124b0:	f06f 0307 	mvn.w	r3, #7
 80124b4:	e040      	b.n	8012538 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80124b6:	4b26      	ldr	r3, [pc, #152]	@ (8012550 <udp_bind+0x10c>)
 80124b8:	681b      	ldr	r3, [r3, #0]
 80124ba:	617b      	str	r3, [r7, #20]
 80124bc:	e022      	b.n	8012504 <udp_bind+0xc0>
      if (pcb != ipcb) {
 80124be:	68fa      	ldr	r2, [r7, #12]
 80124c0:	697b      	ldr	r3, [r7, #20]
 80124c2:	429a      	cmp	r2, r3
 80124c4:	d01b      	beq.n	80124fe <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 80124c6:	697b      	ldr	r3, [r7, #20]
 80124c8:	8a5b      	ldrh	r3, [r3, #18]
 80124ca:	88fa      	ldrh	r2, [r7, #6]
 80124cc:	429a      	cmp	r2, r3
 80124ce:	d116      	bne.n	80124fe <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80124d0:	697b      	ldr	r3, [r7, #20]
 80124d2:	681a      	ldr	r2, [r3, #0]
 80124d4:	68bb      	ldr	r3, [r7, #8]
 80124d6:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80124d8:	429a      	cmp	r2, r3
 80124da:	d00d      	beq.n	80124f8 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80124dc:	68bb      	ldr	r3, [r7, #8]
 80124de:	2b00      	cmp	r3, #0
 80124e0:	d00a      	beq.n	80124f8 <udp_bind+0xb4>
 80124e2:	68bb      	ldr	r3, [r7, #8]
 80124e4:	681b      	ldr	r3, [r3, #0]
 80124e6:	2b00      	cmp	r3, #0
 80124e8:	d006      	beq.n	80124f8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80124ea:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80124ec:	2b00      	cmp	r3, #0
 80124ee:	d003      	beq.n	80124f8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80124f0:	697b      	ldr	r3, [r7, #20]
 80124f2:	681b      	ldr	r3, [r3, #0]
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	d102      	bne.n	80124fe <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80124f8:	f06f 0307 	mvn.w	r3, #7
 80124fc:	e01c      	b.n	8012538 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80124fe:	697b      	ldr	r3, [r7, #20]
 8012500:	68db      	ldr	r3, [r3, #12]
 8012502:	617b      	str	r3, [r7, #20]
 8012504:	697b      	ldr	r3, [r7, #20]
 8012506:	2b00      	cmp	r3, #0
 8012508:	d1d9      	bne.n	80124be <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801250a:	68bb      	ldr	r3, [r7, #8]
 801250c:	2b00      	cmp	r3, #0
 801250e:	d002      	beq.n	8012516 <udp_bind+0xd2>
 8012510:	68bb      	ldr	r3, [r7, #8]
 8012512:	681b      	ldr	r3, [r3, #0]
 8012514:	e000      	b.n	8012518 <udp_bind+0xd4>
 8012516:	2300      	movs	r3, #0
 8012518:	68fa      	ldr	r2, [r7, #12]
 801251a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801251c:	68fb      	ldr	r3, [r7, #12]
 801251e:	88fa      	ldrh	r2, [r7, #6]
 8012520:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8012522:	7cfb      	ldrb	r3, [r7, #19]
 8012524:	2b00      	cmp	r3, #0
 8012526:	d106      	bne.n	8012536 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8012528:	4b09      	ldr	r3, [pc, #36]	@ (8012550 <udp_bind+0x10c>)
 801252a:	681a      	ldr	r2, [r3, #0]
 801252c:	68fb      	ldr	r3, [r7, #12]
 801252e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8012530:	4a07      	ldr	r2, [pc, #28]	@ (8012550 <udp_bind+0x10c>)
 8012532:	68fb      	ldr	r3, [r7, #12]
 8012534:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8012536:	2300      	movs	r3, #0
}
 8012538:	4618      	mov	r0, r3
 801253a:	3718      	adds	r7, #24
 801253c:	46bd      	mov	sp, r7
 801253e:	bd80      	pop	{r7, pc}
 8012540:	08020cb8 	.word	0x08020cb8
 8012544:	08020194 	.word	0x08020194
 8012548:	0802045c 	.word	0x0802045c
 801254c:	080201e8 	.word	0x080201e8
 8012550:	200092a0 	.word	0x200092a0

08012554 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8012554:	b580      	push	{r7, lr}
 8012556:	b086      	sub	sp, #24
 8012558:	af00      	add	r7, sp, #0
 801255a:	60f8      	str	r0, [r7, #12]
 801255c:	60b9      	str	r1, [r7, #8]
 801255e:	4613      	mov	r3, r2
 8012560:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8012562:	68fb      	ldr	r3, [r7, #12]
 8012564:	2b00      	cmp	r3, #0
 8012566:	d109      	bne.n	801257c <udp_connect+0x28>
 8012568:	4b2c      	ldr	r3, [pc, #176]	@ (801261c <udp_connect+0xc8>)
 801256a:	f240 4235 	movw	r2, #1077	@ 0x435
 801256e:	492c      	ldr	r1, [pc, #176]	@ (8012620 <udp_connect+0xcc>)
 8012570:	482c      	ldr	r0, [pc, #176]	@ (8012624 <udp_connect+0xd0>)
 8012572:	f003 fb63 	bl	8015c3c <iprintf>
 8012576:	f06f 030f 	mvn.w	r3, #15
 801257a:	e04b      	b.n	8012614 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801257c:	68bb      	ldr	r3, [r7, #8]
 801257e:	2b00      	cmp	r3, #0
 8012580:	d109      	bne.n	8012596 <udp_connect+0x42>
 8012582:	4b26      	ldr	r3, [pc, #152]	@ (801261c <udp_connect+0xc8>)
 8012584:	f240 4236 	movw	r2, #1078	@ 0x436
 8012588:	4927      	ldr	r1, [pc, #156]	@ (8012628 <udp_connect+0xd4>)
 801258a:	4826      	ldr	r0, [pc, #152]	@ (8012624 <udp_connect+0xd0>)
 801258c:	f003 fb56 	bl	8015c3c <iprintf>
 8012590:	f06f 030f 	mvn.w	r3, #15
 8012594:	e03e      	b.n	8012614 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8012596:	68fb      	ldr	r3, [r7, #12]
 8012598:	8a5b      	ldrh	r3, [r3, #18]
 801259a:	2b00      	cmp	r3, #0
 801259c:	d10f      	bne.n	80125be <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801259e:	68f9      	ldr	r1, [r7, #12]
 80125a0:	68fb      	ldr	r3, [r7, #12]
 80125a2:	8a5b      	ldrh	r3, [r3, #18]
 80125a4:	461a      	mov	r2, r3
 80125a6:	68f8      	ldr	r0, [r7, #12]
 80125a8:	f7ff ff4c 	bl	8012444 <udp_bind>
 80125ac:	4603      	mov	r3, r0
 80125ae:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 80125b0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	d002      	beq.n	80125be <udp_connect+0x6a>
      return err;
 80125b8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80125bc:	e02a      	b.n	8012614 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 80125be:	68bb      	ldr	r3, [r7, #8]
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d002      	beq.n	80125ca <udp_connect+0x76>
 80125c4:	68bb      	ldr	r3, [r7, #8]
 80125c6:	681b      	ldr	r3, [r3, #0]
 80125c8:	e000      	b.n	80125cc <udp_connect+0x78>
 80125ca:	2300      	movs	r3, #0
 80125cc:	68fa      	ldr	r2, [r7, #12]
 80125ce:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 80125d0:	68fb      	ldr	r3, [r7, #12]
 80125d2:	88fa      	ldrh	r2, [r7, #6]
 80125d4:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 80125d6:	68fb      	ldr	r3, [r7, #12]
 80125d8:	7c1b      	ldrb	r3, [r3, #16]
 80125da:	f043 0304 	orr.w	r3, r3, #4
 80125de:	b2da      	uxtb	r2, r3
 80125e0:	68fb      	ldr	r3, [r7, #12]
 80125e2:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80125e4:	4b11      	ldr	r3, [pc, #68]	@ (801262c <udp_connect+0xd8>)
 80125e6:	681b      	ldr	r3, [r3, #0]
 80125e8:	617b      	str	r3, [r7, #20]
 80125ea:	e008      	b.n	80125fe <udp_connect+0xaa>
    if (pcb == ipcb) {
 80125ec:	68fa      	ldr	r2, [r7, #12]
 80125ee:	697b      	ldr	r3, [r7, #20]
 80125f0:	429a      	cmp	r2, r3
 80125f2:	d101      	bne.n	80125f8 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 80125f4:	2300      	movs	r3, #0
 80125f6:	e00d      	b.n	8012614 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80125f8:	697b      	ldr	r3, [r7, #20]
 80125fa:	68db      	ldr	r3, [r3, #12]
 80125fc:	617b      	str	r3, [r7, #20]
 80125fe:	697b      	ldr	r3, [r7, #20]
 8012600:	2b00      	cmp	r3, #0
 8012602:	d1f3      	bne.n	80125ec <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8012604:	4b09      	ldr	r3, [pc, #36]	@ (801262c <udp_connect+0xd8>)
 8012606:	681a      	ldr	r2, [r3, #0]
 8012608:	68fb      	ldr	r3, [r7, #12]
 801260a:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 801260c:	4a07      	ldr	r2, [pc, #28]	@ (801262c <udp_connect+0xd8>)
 801260e:	68fb      	ldr	r3, [r7, #12]
 8012610:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8012612:	2300      	movs	r3, #0
}
 8012614:	4618      	mov	r0, r3
 8012616:	3718      	adds	r7, #24
 8012618:	46bd      	mov	sp, r7
 801261a:	bd80      	pop	{r7, pc}
 801261c:	08020194 	.word	0x08020194
 8012620:	08020474 	.word	0x08020474
 8012624:	080201e8 	.word	0x080201e8
 8012628:	08020490 	.word	0x08020490
 801262c:	200092a0 	.word	0x200092a0

08012630 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8012630:	b580      	push	{r7, lr}
 8012632:	b084      	sub	sp, #16
 8012634:	af00      	add	r7, sp, #0
 8012636:	60f8      	str	r0, [r7, #12]
 8012638:	60b9      	str	r1, [r7, #8]
 801263a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801263c:	68fb      	ldr	r3, [r7, #12]
 801263e:	2b00      	cmp	r3, #0
 8012640:	d107      	bne.n	8012652 <udp_recv+0x22>
 8012642:	4b08      	ldr	r3, [pc, #32]	@ (8012664 <udp_recv+0x34>)
 8012644:	f240 428a 	movw	r2, #1162	@ 0x48a
 8012648:	4907      	ldr	r1, [pc, #28]	@ (8012668 <udp_recv+0x38>)
 801264a:	4808      	ldr	r0, [pc, #32]	@ (801266c <udp_recv+0x3c>)
 801264c:	f003 faf6 	bl	8015c3c <iprintf>
 8012650:	e005      	b.n	801265e <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8012652:	68fb      	ldr	r3, [r7, #12]
 8012654:	68ba      	ldr	r2, [r7, #8]
 8012656:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8012658:	68fb      	ldr	r3, [r7, #12]
 801265a:	687a      	ldr	r2, [r7, #4]
 801265c:	61da      	str	r2, [r3, #28]
}
 801265e:	3710      	adds	r7, #16
 8012660:	46bd      	mov	sp, r7
 8012662:	bd80      	pop	{r7, pc}
 8012664:	08020194 	.word	0x08020194
 8012668:	080204c8 	.word	0x080204c8
 801266c:	080201e8 	.word	0x080201e8

08012670 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8012670:	b580      	push	{r7, lr}
 8012672:	b084      	sub	sp, #16
 8012674:	af00      	add	r7, sp, #0
 8012676:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	2b00      	cmp	r3, #0
 801267c:	d107      	bne.n	801268e <udp_remove+0x1e>
 801267e:	4b19      	ldr	r3, [pc, #100]	@ (80126e4 <udp_remove+0x74>)
 8012680:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 8012684:	4918      	ldr	r1, [pc, #96]	@ (80126e8 <udp_remove+0x78>)
 8012686:	4819      	ldr	r0, [pc, #100]	@ (80126ec <udp_remove+0x7c>)
 8012688:	f003 fad8 	bl	8015c3c <iprintf>
 801268c:	e026      	b.n	80126dc <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801268e:	4b18      	ldr	r3, [pc, #96]	@ (80126f0 <udp_remove+0x80>)
 8012690:	681b      	ldr	r3, [r3, #0]
 8012692:	687a      	ldr	r2, [r7, #4]
 8012694:	429a      	cmp	r2, r3
 8012696:	d105      	bne.n	80126a4 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8012698:	4b15      	ldr	r3, [pc, #84]	@ (80126f0 <udp_remove+0x80>)
 801269a:	681b      	ldr	r3, [r3, #0]
 801269c:	68db      	ldr	r3, [r3, #12]
 801269e:	4a14      	ldr	r2, [pc, #80]	@ (80126f0 <udp_remove+0x80>)
 80126a0:	6013      	str	r3, [r2, #0]
 80126a2:	e017      	b.n	80126d4 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80126a4:	4b12      	ldr	r3, [pc, #72]	@ (80126f0 <udp_remove+0x80>)
 80126a6:	681b      	ldr	r3, [r3, #0]
 80126a8:	60fb      	str	r3, [r7, #12]
 80126aa:	e010      	b.n	80126ce <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 80126ac:	68fb      	ldr	r3, [r7, #12]
 80126ae:	68db      	ldr	r3, [r3, #12]
 80126b0:	2b00      	cmp	r3, #0
 80126b2:	d009      	beq.n	80126c8 <udp_remove+0x58>
 80126b4:	68fb      	ldr	r3, [r7, #12]
 80126b6:	68db      	ldr	r3, [r3, #12]
 80126b8:	687a      	ldr	r2, [r7, #4]
 80126ba:	429a      	cmp	r2, r3
 80126bc:	d104      	bne.n	80126c8 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 80126be:	687b      	ldr	r3, [r7, #4]
 80126c0:	68da      	ldr	r2, [r3, #12]
 80126c2:	68fb      	ldr	r3, [r7, #12]
 80126c4:	60da      	str	r2, [r3, #12]
        break;
 80126c6:	e005      	b.n	80126d4 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80126c8:	68fb      	ldr	r3, [r7, #12]
 80126ca:	68db      	ldr	r3, [r3, #12]
 80126cc:	60fb      	str	r3, [r7, #12]
 80126ce:	68fb      	ldr	r3, [r7, #12]
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	d1eb      	bne.n	80126ac <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80126d4:	6879      	ldr	r1, [r7, #4]
 80126d6:	2000      	movs	r0, #0
 80126d8:	f7f8 fdf8 	bl	800b2cc <memp_free>
}
 80126dc:	3710      	adds	r7, #16
 80126de:	46bd      	mov	sp, r7
 80126e0:	bd80      	pop	{r7, pc}
 80126e2:	bf00      	nop
 80126e4:	08020194 	.word	0x08020194
 80126e8:	080204e0 	.word	0x080204e0
 80126ec:	080201e8 	.word	0x080201e8
 80126f0:	200092a0 	.word	0x200092a0

080126f4 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80126f4:	b580      	push	{r7, lr}
 80126f6:	b082      	sub	sp, #8
 80126f8:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80126fa:	2000      	movs	r0, #0
 80126fc:	f7f8 fd76 	bl	800b1ec <memp_malloc>
 8012700:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	2b00      	cmp	r3, #0
 8012706:	d007      	beq.n	8012718 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8012708:	2220      	movs	r2, #32
 801270a:	2100      	movs	r1, #0
 801270c:	6878      	ldr	r0, [r7, #4]
 801270e:	f003 fb36 	bl	8015d7e <memset>
    pcb->ttl = UDP_TTL;
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	22ff      	movs	r2, #255	@ 0xff
 8012716:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8012718:	687b      	ldr	r3, [r7, #4]
}
 801271a:	4618      	mov	r0, r3
 801271c:	3708      	adds	r7, #8
 801271e:	46bd      	mov	sp, r7
 8012720:	bd80      	pop	{r7, pc}
	...

08012724 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8012724:	b480      	push	{r7}
 8012726:	b085      	sub	sp, #20
 8012728:	af00      	add	r7, sp, #0
 801272a:	6078      	str	r0, [r7, #4]
 801272c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	2b00      	cmp	r3, #0
 8012732:	d01e      	beq.n	8012772 <udp_netif_ip_addr_changed+0x4e>
 8012734:	687b      	ldr	r3, [r7, #4]
 8012736:	681b      	ldr	r3, [r3, #0]
 8012738:	2b00      	cmp	r3, #0
 801273a:	d01a      	beq.n	8012772 <udp_netif_ip_addr_changed+0x4e>
 801273c:	683b      	ldr	r3, [r7, #0]
 801273e:	2b00      	cmp	r3, #0
 8012740:	d017      	beq.n	8012772 <udp_netif_ip_addr_changed+0x4e>
 8012742:	683b      	ldr	r3, [r7, #0]
 8012744:	681b      	ldr	r3, [r3, #0]
 8012746:	2b00      	cmp	r3, #0
 8012748:	d013      	beq.n	8012772 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801274a:	4b0d      	ldr	r3, [pc, #52]	@ (8012780 <udp_netif_ip_addr_changed+0x5c>)
 801274c:	681b      	ldr	r3, [r3, #0]
 801274e:	60fb      	str	r3, [r7, #12]
 8012750:	e00c      	b.n	801276c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8012752:	68fb      	ldr	r3, [r7, #12]
 8012754:	681a      	ldr	r2, [r3, #0]
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	681b      	ldr	r3, [r3, #0]
 801275a:	429a      	cmp	r2, r3
 801275c:	d103      	bne.n	8012766 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801275e:	683b      	ldr	r3, [r7, #0]
 8012760:	681a      	ldr	r2, [r3, #0]
 8012762:	68fb      	ldr	r3, [r7, #12]
 8012764:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8012766:	68fb      	ldr	r3, [r7, #12]
 8012768:	68db      	ldr	r3, [r3, #12]
 801276a:	60fb      	str	r3, [r7, #12]
 801276c:	68fb      	ldr	r3, [r7, #12]
 801276e:	2b00      	cmp	r3, #0
 8012770:	d1ef      	bne.n	8012752 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8012772:	bf00      	nop
 8012774:	3714      	adds	r7, #20
 8012776:	46bd      	mov	sp, r7
 8012778:	f85d 7b04 	ldr.w	r7, [sp], #4
 801277c:	4770      	bx	lr
 801277e:	bf00      	nop
 8012780:	200092a0 	.word	0x200092a0

08012784 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8012784:	b580      	push	{r7, lr}
 8012786:	b082      	sub	sp, #8
 8012788:	af00      	add	r7, sp, #0
 801278a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801278c:	4915      	ldr	r1, [pc, #84]	@ (80127e4 <etharp_free_entry+0x60>)
 801278e:	687a      	ldr	r2, [r7, #4]
 8012790:	4613      	mov	r3, r2
 8012792:	005b      	lsls	r3, r3, #1
 8012794:	4413      	add	r3, r2
 8012796:	00db      	lsls	r3, r3, #3
 8012798:	440b      	add	r3, r1
 801279a:	681b      	ldr	r3, [r3, #0]
 801279c:	2b00      	cmp	r3, #0
 801279e:	d013      	beq.n	80127c8 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80127a0:	4910      	ldr	r1, [pc, #64]	@ (80127e4 <etharp_free_entry+0x60>)
 80127a2:	687a      	ldr	r2, [r7, #4]
 80127a4:	4613      	mov	r3, r2
 80127a6:	005b      	lsls	r3, r3, #1
 80127a8:	4413      	add	r3, r2
 80127aa:	00db      	lsls	r3, r3, #3
 80127ac:	440b      	add	r3, r1
 80127ae:	681b      	ldr	r3, [r3, #0]
 80127b0:	4618      	mov	r0, r3
 80127b2:	f7f9 fc01 	bl	800bfb8 <pbuf_free>
    arp_table[i].q = NULL;
 80127b6:	490b      	ldr	r1, [pc, #44]	@ (80127e4 <etharp_free_entry+0x60>)
 80127b8:	687a      	ldr	r2, [r7, #4]
 80127ba:	4613      	mov	r3, r2
 80127bc:	005b      	lsls	r3, r3, #1
 80127be:	4413      	add	r3, r2
 80127c0:	00db      	lsls	r3, r3, #3
 80127c2:	440b      	add	r3, r1
 80127c4:	2200      	movs	r2, #0
 80127c6:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80127c8:	4906      	ldr	r1, [pc, #24]	@ (80127e4 <etharp_free_entry+0x60>)
 80127ca:	687a      	ldr	r2, [r7, #4]
 80127cc:	4613      	mov	r3, r2
 80127ce:	005b      	lsls	r3, r3, #1
 80127d0:	4413      	add	r3, r2
 80127d2:	00db      	lsls	r3, r3, #3
 80127d4:	440b      	add	r3, r1
 80127d6:	3314      	adds	r3, #20
 80127d8:	2200      	movs	r2, #0
 80127da:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80127dc:	bf00      	nop
 80127de:	3708      	adds	r7, #8
 80127e0:	46bd      	mov	sp, r7
 80127e2:	bd80      	pop	{r7, pc}
 80127e4:	200092a4 	.word	0x200092a4

080127e8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80127e8:	b580      	push	{r7, lr}
 80127ea:	b082      	sub	sp, #8
 80127ec:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80127ee:	2300      	movs	r3, #0
 80127f0:	607b      	str	r3, [r7, #4]
 80127f2:	e096      	b.n	8012922 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80127f4:	494f      	ldr	r1, [pc, #316]	@ (8012934 <etharp_tmr+0x14c>)
 80127f6:	687a      	ldr	r2, [r7, #4]
 80127f8:	4613      	mov	r3, r2
 80127fa:	005b      	lsls	r3, r3, #1
 80127fc:	4413      	add	r3, r2
 80127fe:	00db      	lsls	r3, r3, #3
 8012800:	440b      	add	r3, r1
 8012802:	3314      	adds	r3, #20
 8012804:	781b      	ldrb	r3, [r3, #0]
 8012806:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8012808:	78fb      	ldrb	r3, [r7, #3]
 801280a:	2b00      	cmp	r3, #0
 801280c:	f000 8086 	beq.w	801291c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8012810:	4948      	ldr	r1, [pc, #288]	@ (8012934 <etharp_tmr+0x14c>)
 8012812:	687a      	ldr	r2, [r7, #4]
 8012814:	4613      	mov	r3, r2
 8012816:	005b      	lsls	r3, r3, #1
 8012818:	4413      	add	r3, r2
 801281a:	00db      	lsls	r3, r3, #3
 801281c:	440b      	add	r3, r1
 801281e:	3312      	adds	r3, #18
 8012820:	881b      	ldrh	r3, [r3, #0]
 8012822:	3301      	adds	r3, #1
 8012824:	b298      	uxth	r0, r3
 8012826:	4943      	ldr	r1, [pc, #268]	@ (8012934 <etharp_tmr+0x14c>)
 8012828:	687a      	ldr	r2, [r7, #4]
 801282a:	4613      	mov	r3, r2
 801282c:	005b      	lsls	r3, r3, #1
 801282e:	4413      	add	r3, r2
 8012830:	00db      	lsls	r3, r3, #3
 8012832:	440b      	add	r3, r1
 8012834:	3312      	adds	r3, #18
 8012836:	4602      	mov	r2, r0
 8012838:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801283a:	493e      	ldr	r1, [pc, #248]	@ (8012934 <etharp_tmr+0x14c>)
 801283c:	687a      	ldr	r2, [r7, #4]
 801283e:	4613      	mov	r3, r2
 8012840:	005b      	lsls	r3, r3, #1
 8012842:	4413      	add	r3, r2
 8012844:	00db      	lsls	r3, r3, #3
 8012846:	440b      	add	r3, r1
 8012848:	3312      	adds	r3, #18
 801284a:	881b      	ldrh	r3, [r3, #0]
 801284c:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8012850:	d215      	bcs.n	801287e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8012852:	4938      	ldr	r1, [pc, #224]	@ (8012934 <etharp_tmr+0x14c>)
 8012854:	687a      	ldr	r2, [r7, #4]
 8012856:	4613      	mov	r3, r2
 8012858:	005b      	lsls	r3, r3, #1
 801285a:	4413      	add	r3, r2
 801285c:	00db      	lsls	r3, r3, #3
 801285e:	440b      	add	r3, r1
 8012860:	3314      	adds	r3, #20
 8012862:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8012864:	2b01      	cmp	r3, #1
 8012866:	d10e      	bne.n	8012886 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8012868:	4932      	ldr	r1, [pc, #200]	@ (8012934 <etharp_tmr+0x14c>)
 801286a:	687a      	ldr	r2, [r7, #4]
 801286c:	4613      	mov	r3, r2
 801286e:	005b      	lsls	r3, r3, #1
 8012870:	4413      	add	r3, r2
 8012872:	00db      	lsls	r3, r3, #3
 8012874:	440b      	add	r3, r1
 8012876:	3312      	adds	r3, #18
 8012878:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801287a:	2b04      	cmp	r3, #4
 801287c:	d903      	bls.n	8012886 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801287e:	6878      	ldr	r0, [r7, #4]
 8012880:	f7ff ff80 	bl	8012784 <etharp_free_entry>
 8012884:	e04a      	b.n	801291c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8012886:	492b      	ldr	r1, [pc, #172]	@ (8012934 <etharp_tmr+0x14c>)
 8012888:	687a      	ldr	r2, [r7, #4]
 801288a:	4613      	mov	r3, r2
 801288c:	005b      	lsls	r3, r3, #1
 801288e:	4413      	add	r3, r2
 8012890:	00db      	lsls	r3, r3, #3
 8012892:	440b      	add	r3, r1
 8012894:	3314      	adds	r3, #20
 8012896:	781b      	ldrb	r3, [r3, #0]
 8012898:	2b03      	cmp	r3, #3
 801289a:	d10a      	bne.n	80128b2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801289c:	4925      	ldr	r1, [pc, #148]	@ (8012934 <etharp_tmr+0x14c>)
 801289e:	687a      	ldr	r2, [r7, #4]
 80128a0:	4613      	mov	r3, r2
 80128a2:	005b      	lsls	r3, r3, #1
 80128a4:	4413      	add	r3, r2
 80128a6:	00db      	lsls	r3, r3, #3
 80128a8:	440b      	add	r3, r1
 80128aa:	3314      	adds	r3, #20
 80128ac:	2204      	movs	r2, #4
 80128ae:	701a      	strb	r2, [r3, #0]
 80128b0:	e034      	b.n	801291c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80128b2:	4920      	ldr	r1, [pc, #128]	@ (8012934 <etharp_tmr+0x14c>)
 80128b4:	687a      	ldr	r2, [r7, #4]
 80128b6:	4613      	mov	r3, r2
 80128b8:	005b      	lsls	r3, r3, #1
 80128ba:	4413      	add	r3, r2
 80128bc:	00db      	lsls	r3, r3, #3
 80128be:	440b      	add	r3, r1
 80128c0:	3314      	adds	r3, #20
 80128c2:	781b      	ldrb	r3, [r3, #0]
 80128c4:	2b04      	cmp	r3, #4
 80128c6:	d10a      	bne.n	80128de <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80128c8:	491a      	ldr	r1, [pc, #104]	@ (8012934 <etharp_tmr+0x14c>)
 80128ca:	687a      	ldr	r2, [r7, #4]
 80128cc:	4613      	mov	r3, r2
 80128ce:	005b      	lsls	r3, r3, #1
 80128d0:	4413      	add	r3, r2
 80128d2:	00db      	lsls	r3, r3, #3
 80128d4:	440b      	add	r3, r1
 80128d6:	3314      	adds	r3, #20
 80128d8:	2202      	movs	r2, #2
 80128da:	701a      	strb	r2, [r3, #0]
 80128dc:	e01e      	b.n	801291c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80128de:	4915      	ldr	r1, [pc, #84]	@ (8012934 <etharp_tmr+0x14c>)
 80128e0:	687a      	ldr	r2, [r7, #4]
 80128e2:	4613      	mov	r3, r2
 80128e4:	005b      	lsls	r3, r3, #1
 80128e6:	4413      	add	r3, r2
 80128e8:	00db      	lsls	r3, r3, #3
 80128ea:	440b      	add	r3, r1
 80128ec:	3314      	adds	r3, #20
 80128ee:	781b      	ldrb	r3, [r3, #0]
 80128f0:	2b01      	cmp	r3, #1
 80128f2:	d113      	bne.n	801291c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80128f4:	490f      	ldr	r1, [pc, #60]	@ (8012934 <etharp_tmr+0x14c>)
 80128f6:	687a      	ldr	r2, [r7, #4]
 80128f8:	4613      	mov	r3, r2
 80128fa:	005b      	lsls	r3, r3, #1
 80128fc:	4413      	add	r3, r2
 80128fe:	00db      	lsls	r3, r3, #3
 8012900:	440b      	add	r3, r1
 8012902:	3308      	adds	r3, #8
 8012904:	6818      	ldr	r0, [r3, #0]
 8012906:	687a      	ldr	r2, [r7, #4]
 8012908:	4613      	mov	r3, r2
 801290a:	005b      	lsls	r3, r3, #1
 801290c:	4413      	add	r3, r2
 801290e:	00db      	lsls	r3, r3, #3
 8012910:	4a08      	ldr	r2, [pc, #32]	@ (8012934 <etharp_tmr+0x14c>)
 8012912:	4413      	add	r3, r2
 8012914:	3304      	adds	r3, #4
 8012916:	4619      	mov	r1, r3
 8012918:	f000 fe6e 	bl	80135f8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	3301      	adds	r3, #1
 8012920:	607b      	str	r3, [r7, #4]
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	2b09      	cmp	r3, #9
 8012926:	f77f af65 	ble.w	80127f4 <etharp_tmr+0xc>
      }
    }
  }
}
 801292a:	bf00      	nop
 801292c:	bf00      	nop
 801292e:	3708      	adds	r7, #8
 8012930:	46bd      	mov	sp, r7
 8012932:	bd80      	pop	{r7, pc}
 8012934:	200092a4 	.word	0x200092a4

08012938 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8012938:	b580      	push	{r7, lr}
 801293a:	b08a      	sub	sp, #40	@ 0x28
 801293c:	af00      	add	r7, sp, #0
 801293e:	60f8      	str	r0, [r7, #12]
 8012940:	460b      	mov	r3, r1
 8012942:	607a      	str	r2, [r7, #4]
 8012944:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8012946:	230a      	movs	r3, #10
 8012948:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801294a:	230a      	movs	r3, #10
 801294c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801294e:	230a      	movs	r3, #10
 8012950:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 8012952:	2300      	movs	r3, #0
 8012954:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8012956:	230a      	movs	r3, #10
 8012958:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801295a:	2300      	movs	r3, #0
 801295c:	83bb      	strh	r3, [r7, #28]
 801295e:	2300      	movs	r3, #0
 8012960:	837b      	strh	r3, [r7, #26]
 8012962:	2300      	movs	r3, #0
 8012964:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012966:	2300      	movs	r3, #0
 8012968:	843b      	strh	r3, [r7, #32]
 801296a:	e0ae      	b.n	8012aca <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801296c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012970:	49a6      	ldr	r1, [pc, #664]	@ (8012c0c <etharp_find_entry+0x2d4>)
 8012972:	4613      	mov	r3, r2
 8012974:	005b      	lsls	r3, r3, #1
 8012976:	4413      	add	r3, r2
 8012978:	00db      	lsls	r3, r3, #3
 801297a:	440b      	add	r3, r1
 801297c:	3314      	adds	r3, #20
 801297e:	781b      	ldrb	r3, [r3, #0]
 8012980:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8012982:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8012986:	2b0a      	cmp	r3, #10
 8012988:	d105      	bne.n	8012996 <etharp_find_entry+0x5e>
 801298a:	7dfb      	ldrb	r3, [r7, #23]
 801298c:	2b00      	cmp	r3, #0
 801298e:	d102      	bne.n	8012996 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8012990:	8c3b      	ldrh	r3, [r7, #32]
 8012992:	847b      	strh	r3, [r7, #34]	@ 0x22
 8012994:	e095      	b.n	8012ac2 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8012996:	7dfb      	ldrb	r3, [r7, #23]
 8012998:	2b00      	cmp	r3, #0
 801299a:	f000 8092 	beq.w	8012ac2 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801299e:	7dfb      	ldrb	r3, [r7, #23]
 80129a0:	2b01      	cmp	r3, #1
 80129a2:	d009      	beq.n	80129b8 <etharp_find_entry+0x80>
 80129a4:	7dfb      	ldrb	r3, [r7, #23]
 80129a6:	2b01      	cmp	r3, #1
 80129a8:	d806      	bhi.n	80129b8 <etharp_find_entry+0x80>
 80129aa:	4b99      	ldr	r3, [pc, #612]	@ (8012c10 <etharp_find_entry+0x2d8>)
 80129ac:	f240 1223 	movw	r2, #291	@ 0x123
 80129b0:	4998      	ldr	r1, [pc, #608]	@ (8012c14 <etharp_find_entry+0x2dc>)
 80129b2:	4899      	ldr	r0, [pc, #612]	@ (8012c18 <etharp_find_entry+0x2e0>)
 80129b4:	f003 f942 	bl	8015c3c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80129b8:	68fb      	ldr	r3, [r7, #12]
 80129ba:	2b00      	cmp	r3, #0
 80129bc:	d020      	beq.n	8012a00 <etharp_find_entry+0xc8>
 80129be:	68fb      	ldr	r3, [r7, #12]
 80129c0:	6819      	ldr	r1, [r3, #0]
 80129c2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80129c6:	4891      	ldr	r0, [pc, #580]	@ (8012c0c <etharp_find_entry+0x2d4>)
 80129c8:	4613      	mov	r3, r2
 80129ca:	005b      	lsls	r3, r3, #1
 80129cc:	4413      	add	r3, r2
 80129ce:	00db      	lsls	r3, r3, #3
 80129d0:	4403      	add	r3, r0
 80129d2:	3304      	adds	r3, #4
 80129d4:	681b      	ldr	r3, [r3, #0]
 80129d6:	4299      	cmp	r1, r3
 80129d8:	d112      	bne.n	8012a00 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	2b00      	cmp	r3, #0
 80129de:	d00c      	beq.n	80129fa <etharp_find_entry+0xc2>
 80129e0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80129e4:	4989      	ldr	r1, [pc, #548]	@ (8012c0c <etharp_find_entry+0x2d4>)
 80129e6:	4613      	mov	r3, r2
 80129e8:	005b      	lsls	r3, r3, #1
 80129ea:	4413      	add	r3, r2
 80129ec:	00db      	lsls	r3, r3, #3
 80129ee:	440b      	add	r3, r1
 80129f0:	3308      	adds	r3, #8
 80129f2:	681b      	ldr	r3, [r3, #0]
 80129f4:	687a      	ldr	r2, [r7, #4]
 80129f6:	429a      	cmp	r2, r3
 80129f8:	d102      	bne.n	8012a00 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80129fa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80129fe:	e100      	b.n	8012c02 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8012a00:	7dfb      	ldrb	r3, [r7, #23]
 8012a02:	2b01      	cmp	r3, #1
 8012a04:	d140      	bne.n	8012a88 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8012a06:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012a0a:	4980      	ldr	r1, [pc, #512]	@ (8012c0c <etharp_find_entry+0x2d4>)
 8012a0c:	4613      	mov	r3, r2
 8012a0e:	005b      	lsls	r3, r3, #1
 8012a10:	4413      	add	r3, r2
 8012a12:	00db      	lsls	r3, r3, #3
 8012a14:	440b      	add	r3, r1
 8012a16:	681b      	ldr	r3, [r3, #0]
 8012a18:	2b00      	cmp	r3, #0
 8012a1a:	d01a      	beq.n	8012a52 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8012a1c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012a20:	497a      	ldr	r1, [pc, #488]	@ (8012c0c <etharp_find_entry+0x2d4>)
 8012a22:	4613      	mov	r3, r2
 8012a24:	005b      	lsls	r3, r3, #1
 8012a26:	4413      	add	r3, r2
 8012a28:	00db      	lsls	r3, r3, #3
 8012a2a:	440b      	add	r3, r1
 8012a2c:	3312      	adds	r3, #18
 8012a2e:	881b      	ldrh	r3, [r3, #0]
 8012a30:	8bba      	ldrh	r2, [r7, #28]
 8012a32:	429a      	cmp	r2, r3
 8012a34:	d845      	bhi.n	8012ac2 <etharp_find_entry+0x18a>
            old_queue = i;
 8012a36:	8c3b      	ldrh	r3, [r7, #32]
 8012a38:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8012a3a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012a3e:	4973      	ldr	r1, [pc, #460]	@ (8012c0c <etharp_find_entry+0x2d4>)
 8012a40:	4613      	mov	r3, r2
 8012a42:	005b      	lsls	r3, r3, #1
 8012a44:	4413      	add	r3, r2
 8012a46:	00db      	lsls	r3, r3, #3
 8012a48:	440b      	add	r3, r1
 8012a4a:	3312      	adds	r3, #18
 8012a4c:	881b      	ldrh	r3, [r3, #0]
 8012a4e:	83bb      	strh	r3, [r7, #28]
 8012a50:	e037      	b.n	8012ac2 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8012a52:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012a56:	496d      	ldr	r1, [pc, #436]	@ (8012c0c <etharp_find_entry+0x2d4>)
 8012a58:	4613      	mov	r3, r2
 8012a5a:	005b      	lsls	r3, r3, #1
 8012a5c:	4413      	add	r3, r2
 8012a5e:	00db      	lsls	r3, r3, #3
 8012a60:	440b      	add	r3, r1
 8012a62:	3312      	adds	r3, #18
 8012a64:	881b      	ldrh	r3, [r3, #0]
 8012a66:	8b7a      	ldrh	r2, [r7, #26]
 8012a68:	429a      	cmp	r2, r3
 8012a6a:	d82a      	bhi.n	8012ac2 <etharp_find_entry+0x18a>
            old_pending = i;
 8012a6c:	8c3b      	ldrh	r3, [r7, #32]
 8012a6e:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 8012a70:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012a74:	4965      	ldr	r1, [pc, #404]	@ (8012c0c <etharp_find_entry+0x2d4>)
 8012a76:	4613      	mov	r3, r2
 8012a78:	005b      	lsls	r3, r3, #1
 8012a7a:	4413      	add	r3, r2
 8012a7c:	00db      	lsls	r3, r3, #3
 8012a7e:	440b      	add	r3, r1
 8012a80:	3312      	adds	r3, #18
 8012a82:	881b      	ldrh	r3, [r3, #0]
 8012a84:	837b      	strh	r3, [r7, #26]
 8012a86:	e01c      	b.n	8012ac2 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8012a88:	7dfb      	ldrb	r3, [r7, #23]
 8012a8a:	2b01      	cmp	r3, #1
 8012a8c:	d919      	bls.n	8012ac2 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8012a8e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012a92:	495e      	ldr	r1, [pc, #376]	@ (8012c0c <etharp_find_entry+0x2d4>)
 8012a94:	4613      	mov	r3, r2
 8012a96:	005b      	lsls	r3, r3, #1
 8012a98:	4413      	add	r3, r2
 8012a9a:	00db      	lsls	r3, r3, #3
 8012a9c:	440b      	add	r3, r1
 8012a9e:	3312      	adds	r3, #18
 8012aa0:	881b      	ldrh	r3, [r3, #0]
 8012aa2:	8b3a      	ldrh	r2, [r7, #24]
 8012aa4:	429a      	cmp	r2, r3
 8012aa6:	d80c      	bhi.n	8012ac2 <etharp_find_entry+0x18a>
            old_stable = i;
 8012aa8:	8c3b      	ldrh	r3, [r7, #32]
 8012aaa:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 8012aac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012ab0:	4956      	ldr	r1, [pc, #344]	@ (8012c0c <etharp_find_entry+0x2d4>)
 8012ab2:	4613      	mov	r3, r2
 8012ab4:	005b      	lsls	r3, r3, #1
 8012ab6:	4413      	add	r3, r2
 8012ab8:	00db      	lsls	r3, r3, #3
 8012aba:	440b      	add	r3, r1
 8012abc:	3312      	adds	r3, #18
 8012abe:	881b      	ldrh	r3, [r3, #0]
 8012ac0:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012ac2:	8c3b      	ldrh	r3, [r7, #32]
 8012ac4:	3301      	adds	r3, #1
 8012ac6:	b29b      	uxth	r3, r3
 8012ac8:	843b      	strh	r3, [r7, #32]
 8012aca:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012ace:	2b09      	cmp	r3, #9
 8012ad0:	f77f af4c 	ble.w	801296c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8012ad4:	7afb      	ldrb	r3, [r7, #11]
 8012ad6:	f003 0302 	and.w	r3, r3, #2
 8012ada:	2b00      	cmp	r3, #0
 8012adc:	d108      	bne.n	8012af0 <etharp_find_entry+0x1b8>
 8012ade:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8012ae2:	2b0a      	cmp	r3, #10
 8012ae4:	d107      	bne.n	8012af6 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8012ae6:	7afb      	ldrb	r3, [r7, #11]
 8012ae8:	f003 0301 	and.w	r3, r3, #1
 8012aec:	2b00      	cmp	r3, #0
 8012aee:	d102      	bne.n	8012af6 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8012af0:	f04f 33ff 	mov.w	r3, #4294967295
 8012af4:	e085      	b.n	8012c02 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8012af6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8012afa:	2b09      	cmp	r3, #9
 8012afc:	dc02      	bgt.n	8012b04 <etharp_find_entry+0x1cc>
    i = empty;
 8012afe:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012b00:	843b      	strh	r3, [r7, #32]
 8012b02:	e039      	b.n	8012b78 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8012b04:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8012b08:	2b09      	cmp	r3, #9
 8012b0a:	dc14      	bgt.n	8012b36 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8012b0c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012b0e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8012b10:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012b14:	493d      	ldr	r1, [pc, #244]	@ (8012c0c <etharp_find_entry+0x2d4>)
 8012b16:	4613      	mov	r3, r2
 8012b18:	005b      	lsls	r3, r3, #1
 8012b1a:	4413      	add	r3, r2
 8012b1c:	00db      	lsls	r3, r3, #3
 8012b1e:	440b      	add	r3, r1
 8012b20:	681b      	ldr	r3, [r3, #0]
 8012b22:	2b00      	cmp	r3, #0
 8012b24:	d018      	beq.n	8012b58 <etharp_find_entry+0x220>
 8012b26:	4b3a      	ldr	r3, [pc, #232]	@ (8012c10 <etharp_find_entry+0x2d8>)
 8012b28:	f240 126d 	movw	r2, #365	@ 0x16d
 8012b2c:	493b      	ldr	r1, [pc, #236]	@ (8012c1c <etharp_find_entry+0x2e4>)
 8012b2e:	483a      	ldr	r0, [pc, #232]	@ (8012c18 <etharp_find_entry+0x2e0>)
 8012b30:	f003 f884 	bl	8015c3c <iprintf>
 8012b34:	e010      	b.n	8012b58 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8012b36:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8012b3a:	2b09      	cmp	r3, #9
 8012b3c:	dc02      	bgt.n	8012b44 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8012b3e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8012b40:	843b      	strh	r3, [r7, #32]
 8012b42:	e009      	b.n	8012b58 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8012b44:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8012b48:	2b09      	cmp	r3, #9
 8012b4a:	dc02      	bgt.n	8012b52 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8012b4c:	8bfb      	ldrh	r3, [r7, #30]
 8012b4e:	843b      	strh	r3, [r7, #32]
 8012b50:	e002      	b.n	8012b58 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8012b52:	f04f 33ff 	mov.w	r3, #4294967295
 8012b56:	e054      	b.n	8012c02 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8012b58:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012b5c:	2b09      	cmp	r3, #9
 8012b5e:	dd06      	ble.n	8012b6e <etharp_find_entry+0x236>
 8012b60:	4b2b      	ldr	r3, [pc, #172]	@ (8012c10 <etharp_find_entry+0x2d8>)
 8012b62:	f240 127f 	movw	r2, #383	@ 0x17f
 8012b66:	492e      	ldr	r1, [pc, #184]	@ (8012c20 <etharp_find_entry+0x2e8>)
 8012b68:	482b      	ldr	r0, [pc, #172]	@ (8012c18 <etharp_find_entry+0x2e0>)
 8012b6a:	f003 f867 	bl	8015c3c <iprintf>
    etharp_free_entry(i);
 8012b6e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012b72:	4618      	mov	r0, r3
 8012b74:	f7ff fe06 	bl	8012784 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8012b78:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012b7c:	2b09      	cmp	r3, #9
 8012b7e:	dd06      	ble.n	8012b8e <etharp_find_entry+0x256>
 8012b80:	4b23      	ldr	r3, [pc, #140]	@ (8012c10 <etharp_find_entry+0x2d8>)
 8012b82:	f240 1283 	movw	r2, #387	@ 0x183
 8012b86:	4926      	ldr	r1, [pc, #152]	@ (8012c20 <etharp_find_entry+0x2e8>)
 8012b88:	4823      	ldr	r0, [pc, #140]	@ (8012c18 <etharp_find_entry+0x2e0>)
 8012b8a:	f003 f857 	bl	8015c3c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8012b8e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012b92:	491e      	ldr	r1, [pc, #120]	@ (8012c0c <etharp_find_entry+0x2d4>)
 8012b94:	4613      	mov	r3, r2
 8012b96:	005b      	lsls	r3, r3, #1
 8012b98:	4413      	add	r3, r2
 8012b9a:	00db      	lsls	r3, r3, #3
 8012b9c:	440b      	add	r3, r1
 8012b9e:	3314      	adds	r3, #20
 8012ba0:	781b      	ldrb	r3, [r3, #0]
 8012ba2:	2b00      	cmp	r3, #0
 8012ba4:	d006      	beq.n	8012bb4 <etharp_find_entry+0x27c>
 8012ba6:	4b1a      	ldr	r3, [pc, #104]	@ (8012c10 <etharp_find_entry+0x2d8>)
 8012ba8:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 8012bac:	491d      	ldr	r1, [pc, #116]	@ (8012c24 <etharp_find_entry+0x2ec>)
 8012bae:	481a      	ldr	r0, [pc, #104]	@ (8012c18 <etharp_find_entry+0x2e0>)
 8012bb0:	f003 f844 	bl	8015c3c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8012bb4:	68fb      	ldr	r3, [r7, #12]
 8012bb6:	2b00      	cmp	r3, #0
 8012bb8:	d00b      	beq.n	8012bd2 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8012bba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012bbe:	68fb      	ldr	r3, [r7, #12]
 8012bc0:	6819      	ldr	r1, [r3, #0]
 8012bc2:	4812      	ldr	r0, [pc, #72]	@ (8012c0c <etharp_find_entry+0x2d4>)
 8012bc4:	4613      	mov	r3, r2
 8012bc6:	005b      	lsls	r3, r3, #1
 8012bc8:	4413      	add	r3, r2
 8012bca:	00db      	lsls	r3, r3, #3
 8012bcc:	4403      	add	r3, r0
 8012bce:	3304      	adds	r3, #4
 8012bd0:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8012bd2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012bd6:	490d      	ldr	r1, [pc, #52]	@ (8012c0c <etharp_find_entry+0x2d4>)
 8012bd8:	4613      	mov	r3, r2
 8012bda:	005b      	lsls	r3, r3, #1
 8012bdc:	4413      	add	r3, r2
 8012bde:	00db      	lsls	r3, r3, #3
 8012be0:	440b      	add	r3, r1
 8012be2:	3312      	adds	r3, #18
 8012be4:	2200      	movs	r2, #0
 8012be6:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8012be8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012bec:	4907      	ldr	r1, [pc, #28]	@ (8012c0c <etharp_find_entry+0x2d4>)
 8012bee:	4613      	mov	r3, r2
 8012bf0:	005b      	lsls	r3, r3, #1
 8012bf2:	4413      	add	r3, r2
 8012bf4:	00db      	lsls	r3, r3, #3
 8012bf6:	440b      	add	r3, r1
 8012bf8:	3308      	adds	r3, #8
 8012bfa:	687a      	ldr	r2, [r7, #4]
 8012bfc:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8012bfe:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8012c02:	4618      	mov	r0, r3
 8012c04:	3728      	adds	r7, #40	@ 0x28
 8012c06:	46bd      	mov	sp, r7
 8012c08:	bd80      	pop	{r7, pc}
 8012c0a:	bf00      	nop
 8012c0c:	200092a4 	.word	0x200092a4
 8012c10:	080204f8 	.word	0x080204f8
 8012c14:	08020530 	.word	0x08020530
 8012c18:	08020570 	.word	0x08020570
 8012c1c:	08020598 	.word	0x08020598
 8012c20:	080205b0 	.word	0x080205b0
 8012c24:	080205c4 	.word	0x080205c4

08012c28 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8012c28:	b580      	push	{r7, lr}
 8012c2a:	b088      	sub	sp, #32
 8012c2c:	af02      	add	r7, sp, #8
 8012c2e:	60f8      	str	r0, [r7, #12]
 8012c30:	60b9      	str	r1, [r7, #8]
 8012c32:	607a      	str	r2, [r7, #4]
 8012c34:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8012c36:	68fb      	ldr	r3, [r7, #12]
 8012c38:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8012c3c:	2b06      	cmp	r3, #6
 8012c3e:	d006      	beq.n	8012c4e <etharp_update_arp_entry+0x26>
 8012c40:	4b48      	ldr	r3, [pc, #288]	@ (8012d64 <etharp_update_arp_entry+0x13c>)
 8012c42:	f240 12a9 	movw	r2, #425	@ 0x1a9
 8012c46:	4948      	ldr	r1, [pc, #288]	@ (8012d68 <etharp_update_arp_entry+0x140>)
 8012c48:	4848      	ldr	r0, [pc, #288]	@ (8012d6c <etharp_update_arp_entry+0x144>)
 8012c4a:	f002 fff7 	bl	8015c3c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8012c4e:	68bb      	ldr	r3, [r7, #8]
 8012c50:	2b00      	cmp	r3, #0
 8012c52:	d012      	beq.n	8012c7a <etharp_update_arp_entry+0x52>
 8012c54:	68bb      	ldr	r3, [r7, #8]
 8012c56:	681b      	ldr	r3, [r3, #0]
 8012c58:	2b00      	cmp	r3, #0
 8012c5a:	d00e      	beq.n	8012c7a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8012c5c:	68bb      	ldr	r3, [r7, #8]
 8012c5e:	681b      	ldr	r3, [r3, #0]
 8012c60:	68f9      	ldr	r1, [r7, #12]
 8012c62:	4618      	mov	r0, r3
 8012c64:	f001 f8fe 	bl	8013e64 <ip4_addr_isbroadcast_u32>
 8012c68:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8012c6a:	2b00      	cmp	r3, #0
 8012c6c:	d105      	bne.n	8012c7a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8012c6e:	68bb      	ldr	r3, [r7, #8]
 8012c70:	681b      	ldr	r3, [r3, #0]
 8012c72:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8012c76:	2be0      	cmp	r3, #224	@ 0xe0
 8012c78:	d102      	bne.n	8012c80 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8012c7a:	f06f 030f 	mvn.w	r3, #15
 8012c7e:	e06c      	b.n	8012d5a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8012c80:	78fb      	ldrb	r3, [r7, #3]
 8012c82:	68fa      	ldr	r2, [r7, #12]
 8012c84:	4619      	mov	r1, r3
 8012c86:	68b8      	ldr	r0, [r7, #8]
 8012c88:	f7ff fe56 	bl	8012938 <etharp_find_entry>
 8012c8c:	4603      	mov	r3, r0
 8012c8e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8012c90:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8012c94:	2b00      	cmp	r3, #0
 8012c96:	da02      	bge.n	8012c9e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8012c98:	8afb      	ldrh	r3, [r7, #22]
 8012c9a:	b25b      	sxtb	r3, r3
 8012c9c:	e05d      	b.n	8012d5a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8012c9e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012ca2:	4933      	ldr	r1, [pc, #204]	@ (8012d70 <etharp_update_arp_entry+0x148>)
 8012ca4:	4613      	mov	r3, r2
 8012ca6:	005b      	lsls	r3, r3, #1
 8012ca8:	4413      	add	r3, r2
 8012caa:	00db      	lsls	r3, r3, #3
 8012cac:	440b      	add	r3, r1
 8012cae:	3314      	adds	r3, #20
 8012cb0:	2202      	movs	r2, #2
 8012cb2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8012cb4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012cb8:	492d      	ldr	r1, [pc, #180]	@ (8012d70 <etharp_update_arp_entry+0x148>)
 8012cba:	4613      	mov	r3, r2
 8012cbc:	005b      	lsls	r3, r3, #1
 8012cbe:	4413      	add	r3, r2
 8012cc0:	00db      	lsls	r3, r3, #3
 8012cc2:	440b      	add	r3, r1
 8012cc4:	3308      	adds	r3, #8
 8012cc6:	68fa      	ldr	r2, [r7, #12]
 8012cc8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8012cca:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012cce:	4613      	mov	r3, r2
 8012cd0:	005b      	lsls	r3, r3, #1
 8012cd2:	4413      	add	r3, r2
 8012cd4:	00db      	lsls	r3, r3, #3
 8012cd6:	3308      	adds	r3, #8
 8012cd8:	4a25      	ldr	r2, [pc, #148]	@ (8012d70 <etharp_update_arp_entry+0x148>)
 8012cda:	4413      	add	r3, r2
 8012cdc:	3304      	adds	r3, #4
 8012cde:	2206      	movs	r2, #6
 8012ce0:	6879      	ldr	r1, [r7, #4]
 8012ce2:	4618      	mov	r0, r3
 8012ce4:	f003 f901 	bl	8015eea <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8012ce8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012cec:	4920      	ldr	r1, [pc, #128]	@ (8012d70 <etharp_update_arp_entry+0x148>)
 8012cee:	4613      	mov	r3, r2
 8012cf0:	005b      	lsls	r3, r3, #1
 8012cf2:	4413      	add	r3, r2
 8012cf4:	00db      	lsls	r3, r3, #3
 8012cf6:	440b      	add	r3, r1
 8012cf8:	3312      	adds	r3, #18
 8012cfa:	2200      	movs	r2, #0
 8012cfc:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8012cfe:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012d02:	491b      	ldr	r1, [pc, #108]	@ (8012d70 <etharp_update_arp_entry+0x148>)
 8012d04:	4613      	mov	r3, r2
 8012d06:	005b      	lsls	r3, r3, #1
 8012d08:	4413      	add	r3, r2
 8012d0a:	00db      	lsls	r3, r3, #3
 8012d0c:	440b      	add	r3, r1
 8012d0e:	681b      	ldr	r3, [r3, #0]
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	d021      	beq.n	8012d58 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8012d14:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012d18:	4915      	ldr	r1, [pc, #84]	@ (8012d70 <etharp_update_arp_entry+0x148>)
 8012d1a:	4613      	mov	r3, r2
 8012d1c:	005b      	lsls	r3, r3, #1
 8012d1e:	4413      	add	r3, r2
 8012d20:	00db      	lsls	r3, r3, #3
 8012d22:	440b      	add	r3, r1
 8012d24:	681b      	ldr	r3, [r3, #0]
 8012d26:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8012d28:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012d2c:	4910      	ldr	r1, [pc, #64]	@ (8012d70 <etharp_update_arp_entry+0x148>)
 8012d2e:	4613      	mov	r3, r2
 8012d30:	005b      	lsls	r3, r3, #1
 8012d32:	4413      	add	r3, r2
 8012d34:	00db      	lsls	r3, r3, #3
 8012d36:	440b      	add	r3, r1
 8012d38:	2200      	movs	r2, #0
 8012d3a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8012d3c:	68fb      	ldr	r3, [r7, #12]
 8012d3e:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8012d42:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8012d46:	9300      	str	r3, [sp, #0]
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	6939      	ldr	r1, [r7, #16]
 8012d4c:	68f8      	ldr	r0, [r7, #12]
 8012d4e:	f001 ff97 	bl	8014c80 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8012d52:	6938      	ldr	r0, [r7, #16]
 8012d54:	f7f9 f930 	bl	800bfb8 <pbuf_free>
  }
  return ERR_OK;
 8012d58:	2300      	movs	r3, #0
}
 8012d5a:	4618      	mov	r0, r3
 8012d5c:	3718      	adds	r7, #24
 8012d5e:	46bd      	mov	sp, r7
 8012d60:	bd80      	pop	{r7, pc}
 8012d62:	bf00      	nop
 8012d64:	080204f8 	.word	0x080204f8
 8012d68:	080205f0 	.word	0x080205f0
 8012d6c:	08020570 	.word	0x08020570
 8012d70:	200092a4 	.word	0x200092a4

08012d74 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8012d74:	b580      	push	{r7, lr}
 8012d76:	b084      	sub	sp, #16
 8012d78:	af00      	add	r7, sp, #0
 8012d7a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012d7c:	2300      	movs	r3, #0
 8012d7e:	60fb      	str	r3, [r7, #12]
 8012d80:	e01e      	b.n	8012dc0 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8012d82:	4913      	ldr	r1, [pc, #76]	@ (8012dd0 <etharp_cleanup_netif+0x5c>)
 8012d84:	68fa      	ldr	r2, [r7, #12]
 8012d86:	4613      	mov	r3, r2
 8012d88:	005b      	lsls	r3, r3, #1
 8012d8a:	4413      	add	r3, r2
 8012d8c:	00db      	lsls	r3, r3, #3
 8012d8e:	440b      	add	r3, r1
 8012d90:	3314      	adds	r3, #20
 8012d92:	781b      	ldrb	r3, [r3, #0]
 8012d94:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8012d96:	7afb      	ldrb	r3, [r7, #11]
 8012d98:	2b00      	cmp	r3, #0
 8012d9a:	d00e      	beq.n	8012dba <etharp_cleanup_netif+0x46>
 8012d9c:	490c      	ldr	r1, [pc, #48]	@ (8012dd0 <etharp_cleanup_netif+0x5c>)
 8012d9e:	68fa      	ldr	r2, [r7, #12]
 8012da0:	4613      	mov	r3, r2
 8012da2:	005b      	lsls	r3, r3, #1
 8012da4:	4413      	add	r3, r2
 8012da6:	00db      	lsls	r3, r3, #3
 8012da8:	440b      	add	r3, r1
 8012daa:	3308      	adds	r3, #8
 8012dac:	681b      	ldr	r3, [r3, #0]
 8012dae:	687a      	ldr	r2, [r7, #4]
 8012db0:	429a      	cmp	r2, r3
 8012db2:	d102      	bne.n	8012dba <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8012db4:	68f8      	ldr	r0, [r7, #12]
 8012db6:	f7ff fce5 	bl	8012784 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012dba:	68fb      	ldr	r3, [r7, #12]
 8012dbc:	3301      	adds	r3, #1
 8012dbe:	60fb      	str	r3, [r7, #12]
 8012dc0:	68fb      	ldr	r3, [r7, #12]
 8012dc2:	2b09      	cmp	r3, #9
 8012dc4:	dddd      	ble.n	8012d82 <etharp_cleanup_netif+0xe>
    }
  }
}
 8012dc6:	bf00      	nop
 8012dc8:	bf00      	nop
 8012dca:	3710      	adds	r7, #16
 8012dcc:	46bd      	mov	sp, r7
 8012dce:	bd80      	pop	{r7, pc}
 8012dd0:	200092a4 	.word	0x200092a4

08012dd4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8012dd4:	b5b0      	push	{r4, r5, r7, lr}
 8012dd6:	b08a      	sub	sp, #40	@ 0x28
 8012dd8:	af04      	add	r7, sp, #16
 8012dda:	6078      	str	r0, [r7, #4]
 8012ddc:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8012dde:	683b      	ldr	r3, [r7, #0]
 8012de0:	2b00      	cmp	r3, #0
 8012de2:	d107      	bne.n	8012df4 <etharp_input+0x20>
 8012de4:	4b3d      	ldr	r3, [pc, #244]	@ (8012edc <etharp_input+0x108>)
 8012de6:	f240 228a 	movw	r2, #650	@ 0x28a
 8012dea:	493d      	ldr	r1, [pc, #244]	@ (8012ee0 <etharp_input+0x10c>)
 8012dec:	483d      	ldr	r0, [pc, #244]	@ (8012ee4 <etharp_input+0x110>)
 8012dee:	f002 ff25 	bl	8015c3c <iprintf>
 8012df2:	e06f      	b.n	8012ed4 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8012df4:	687b      	ldr	r3, [r7, #4]
 8012df6:	685b      	ldr	r3, [r3, #4]
 8012df8:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8012dfa:	693b      	ldr	r3, [r7, #16]
 8012dfc:	881b      	ldrh	r3, [r3, #0]
 8012dfe:	b29b      	uxth	r3, r3
 8012e00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012e04:	d10c      	bne.n	8012e20 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8012e06:	693b      	ldr	r3, [r7, #16]
 8012e08:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8012e0a:	2b06      	cmp	r3, #6
 8012e0c:	d108      	bne.n	8012e20 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8012e0e:	693b      	ldr	r3, [r7, #16]
 8012e10:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8012e12:	2b04      	cmp	r3, #4
 8012e14:	d104      	bne.n	8012e20 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8012e16:	693b      	ldr	r3, [r7, #16]
 8012e18:	885b      	ldrh	r3, [r3, #2]
 8012e1a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8012e1c:	2b08      	cmp	r3, #8
 8012e1e:	d003      	beq.n	8012e28 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8012e20:	6878      	ldr	r0, [r7, #4]
 8012e22:	f7f9 f8c9 	bl	800bfb8 <pbuf_free>
    return;
 8012e26:	e055      	b.n	8012ed4 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8012e28:	693b      	ldr	r3, [r7, #16]
 8012e2a:	330e      	adds	r3, #14
 8012e2c:	681b      	ldr	r3, [r3, #0]
 8012e2e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8012e30:	693b      	ldr	r3, [r7, #16]
 8012e32:	3318      	adds	r3, #24
 8012e34:	681b      	ldr	r3, [r3, #0]
 8012e36:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8012e38:	683b      	ldr	r3, [r7, #0]
 8012e3a:	3304      	adds	r3, #4
 8012e3c:	681b      	ldr	r3, [r3, #0]
 8012e3e:	2b00      	cmp	r3, #0
 8012e40:	d102      	bne.n	8012e48 <etharp_input+0x74>
    for_us = 0;
 8012e42:	2300      	movs	r3, #0
 8012e44:	75fb      	strb	r3, [r7, #23]
 8012e46:	e009      	b.n	8012e5c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8012e48:	68ba      	ldr	r2, [r7, #8]
 8012e4a:	683b      	ldr	r3, [r7, #0]
 8012e4c:	3304      	adds	r3, #4
 8012e4e:	681b      	ldr	r3, [r3, #0]
 8012e50:	429a      	cmp	r2, r3
 8012e52:	bf0c      	ite	eq
 8012e54:	2301      	moveq	r3, #1
 8012e56:	2300      	movne	r3, #0
 8012e58:	b2db      	uxtb	r3, r3
 8012e5a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8012e5c:	693b      	ldr	r3, [r7, #16]
 8012e5e:	f103 0208 	add.w	r2, r3, #8
 8012e62:	7dfb      	ldrb	r3, [r7, #23]
 8012e64:	2b00      	cmp	r3, #0
 8012e66:	d001      	beq.n	8012e6c <etharp_input+0x98>
 8012e68:	2301      	movs	r3, #1
 8012e6a:	e000      	b.n	8012e6e <etharp_input+0x9a>
 8012e6c:	2302      	movs	r3, #2
 8012e6e:	f107 010c 	add.w	r1, r7, #12
 8012e72:	6838      	ldr	r0, [r7, #0]
 8012e74:	f7ff fed8 	bl	8012c28 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8012e78:	693b      	ldr	r3, [r7, #16]
 8012e7a:	88db      	ldrh	r3, [r3, #6]
 8012e7c:	b29b      	uxth	r3, r3
 8012e7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012e82:	d003      	beq.n	8012e8c <etharp_input+0xb8>
 8012e84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012e88:	d01e      	beq.n	8012ec8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8012e8a:	e020      	b.n	8012ece <etharp_input+0xfa>
      if (for_us) {
 8012e8c:	7dfb      	ldrb	r3, [r7, #23]
 8012e8e:	2b00      	cmp	r3, #0
 8012e90:	d01c      	beq.n	8012ecc <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8012e92:	683b      	ldr	r3, [r7, #0]
 8012e94:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8012e98:	693b      	ldr	r3, [r7, #16]
 8012e9a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8012e9e:	683b      	ldr	r3, [r7, #0]
 8012ea0:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 8012ea4:	683b      	ldr	r3, [r7, #0]
 8012ea6:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8012ea8:	693a      	ldr	r2, [r7, #16]
 8012eaa:	3208      	adds	r2, #8
        etharp_raw(netif,
 8012eac:	2102      	movs	r1, #2
 8012eae:	9103      	str	r1, [sp, #12]
 8012eb0:	f107 010c 	add.w	r1, r7, #12
 8012eb4:	9102      	str	r1, [sp, #8]
 8012eb6:	9201      	str	r2, [sp, #4]
 8012eb8:	9300      	str	r3, [sp, #0]
 8012eba:	462b      	mov	r3, r5
 8012ebc:	4622      	mov	r2, r4
 8012ebe:	4601      	mov	r1, r0
 8012ec0:	6838      	ldr	r0, [r7, #0]
 8012ec2:	f000 faeb 	bl	801349c <etharp_raw>
      break;
 8012ec6:	e001      	b.n	8012ecc <etharp_input+0xf8>
      break;
 8012ec8:	bf00      	nop
 8012eca:	e000      	b.n	8012ece <etharp_input+0xfa>
      break;
 8012ecc:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8012ece:	6878      	ldr	r0, [r7, #4]
 8012ed0:	f7f9 f872 	bl	800bfb8 <pbuf_free>
}
 8012ed4:	3718      	adds	r7, #24
 8012ed6:	46bd      	mov	sp, r7
 8012ed8:	bdb0      	pop	{r4, r5, r7, pc}
 8012eda:	bf00      	nop
 8012edc:	080204f8 	.word	0x080204f8
 8012ee0:	08020648 	.word	0x08020648
 8012ee4:	08020570 	.word	0x08020570

08012ee8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8012ee8:	b580      	push	{r7, lr}
 8012eea:	b086      	sub	sp, #24
 8012eec:	af02      	add	r7, sp, #8
 8012eee:	60f8      	str	r0, [r7, #12]
 8012ef0:	60b9      	str	r1, [r7, #8]
 8012ef2:	4613      	mov	r3, r2
 8012ef4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8012ef6:	79fa      	ldrb	r2, [r7, #7]
 8012ef8:	4944      	ldr	r1, [pc, #272]	@ (801300c <etharp_output_to_arp_index+0x124>)
 8012efa:	4613      	mov	r3, r2
 8012efc:	005b      	lsls	r3, r3, #1
 8012efe:	4413      	add	r3, r2
 8012f00:	00db      	lsls	r3, r3, #3
 8012f02:	440b      	add	r3, r1
 8012f04:	3314      	adds	r3, #20
 8012f06:	781b      	ldrb	r3, [r3, #0]
 8012f08:	2b01      	cmp	r3, #1
 8012f0a:	d806      	bhi.n	8012f1a <etharp_output_to_arp_index+0x32>
 8012f0c:	4b40      	ldr	r3, [pc, #256]	@ (8013010 <etharp_output_to_arp_index+0x128>)
 8012f0e:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8012f12:	4940      	ldr	r1, [pc, #256]	@ (8013014 <etharp_output_to_arp_index+0x12c>)
 8012f14:	4840      	ldr	r0, [pc, #256]	@ (8013018 <etharp_output_to_arp_index+0x130>)
 8012f16:	f002 fe91 	bl	8015c3c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8012f1a:	79fa      	ldrb	r2, [r7, #7]
 8012f1c:	493b      	ldr	r1, [pc, #236]	@ (801300c <etharp_output_to_arp_index+0x124>)
 8012f1e:	4613      	mov	r3, r2
 8012f20:	005b      	lsls	r3, r3, #1
 8012f22:	4413      	add	r3, r2
 8012f24:	00db      	lsls	r3, r3, #3
 8012f26:	440b      	add	r3, r1
 8012f28:	3314      	adds	r3, #20
 8012f2a:	781b      	ldrb	r3, [r3, #0]
 8012f2c:	2b02      	cmp	r3, #2
 8012f2e:	d153      	bne.n	8012fd8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8012f30:	79fa      	ldrb	r2, [r7, #7]
 8012f32:	4936      	ldr	r1, [pc, #216]	@ (801300c <etharp_output_to_arp_index+0x124>)
 8012f34:	4613      	mov	r3, r2
 8012f36:	005b      	lsls	r3, r3, #1
 8012f38:	4413      	add	r3, r2
 8012f3a:	00db      	lsls	r3, r3, #3
 8012f3c:	440b      	add	r3, r1
 8012f3e:	3312      	adds	r3, #18
 8012f40:	881b      	ldrh	r3, [r3, #0]
 8012f42:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 8012f46:	d919      	bls.n	8012f7c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8012f48:	79fa      	ldrb	r2, [r7, #7]
 8012f4a:	4613      	mov	r3, r2
 8012f4c:	005b      	lsls	r3, r3, #1
 8012f4e:	4413      	add	r3, r2
 8012f50:	00db      	lsls	r3, r3, #3
 8012f52:	4a2e      	ldr	r2, [pc, #184]	@ (801300c <etharp_output_to_arp_index+0x124>)
 8012f54:	4413      	add	r3, r2
 8012f56:	3304      	adds	r3, #4
 8012f58:	4619      	mov	r1, r3
 8012f5a:	68f8      	ldr	r0, [r7, #12]
 8012f5c:	f000 fb4c 	bl	80135f8 <etharp_request>
 8012f60:	4603      	mov	r3, r0
 8012f62:	2b00      	cmp	r3, #0
 8012f64:	d138      	bne.n	8012fd8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8012f66:	79fa      	ldrb	r2, [r7, #7]
 8012f68:	4928      	ldr	r1, [pc, #160]	@ (801300c <etharp_output_to_arp_index+0x124>)
 8012f6a:	4613      	mov	r3, r2
 8012f6c:	005b      	lsls	r3, r3, #1
 8012f6e:	4413      	add	r3, r2
 8012f70:	00db      	lsls	r3, r3, #3
 8012f72:	440b      	add	r3, r1
 8012f74:	3314      	adds	r3, #20
 8012f76:	2203      	movs	r2, #3
 8012f78:	701a      	strb	r2, [r3, #0]
 8012f7a:	e02d      	b.n	8012fd8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8012f7c:	79fa      	ldrb	r2, [r7, #7]
 8012f7e:	4923      	ldr	r1, [pc, #140]	@ (801300c <etharp_output_to_arp_index+0x124>)
 8012f80:	4613      	mov	r3, r2
 8012f82:	005b      	lsls	r3, r3, #1
 8012f84:	4413      	add	r3, r2
 8012f86:	00db      	lsls	r3, r3, #3
 8012f88:	440b      	add	r3, r1
 8012f8a:	3312      	adds	r3, #18
 8012f8c:	881b      	ldrh	r3, [r3, #0]
 8012f8e:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8012f92:	d321      	bcc.n	8012fd8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8012f94:	79fa      	ldrb	r2, [r7, #7]
 8012f96:	4613      	mov	r3, r2
 8012f98:	005b      	lsls	r3, r3, #1
 8012f9a:	4413      	add	r3, r2
 8012f9c:	00db      	lsls	r3, r3, #3
 8012f9e:	4a1b      	ldr	r2, [pc, #108]	@ (801300c <etharp_output_to_arp_index+0x124>)
 8012fa0:	4413      	add	r3, r2
 8012fa2:	1d19      	adds	r1, r3, #4
 8012fa4:	79fa      	ldrb	r2, [r7, #7]
 8012fa6:	4613      	mov	r3, r2
 8012fa8:	005b      	lsls	r3, r3, #1
 8012faa:	4413      	add	r3, r2
 8012fac:	00db      	lsls	r3, r3, #3
 8012fae:	3308      	adds	r3, #8
 8012fb0:	4a16      	ldr	r2, [pc, #88]	@ (801300c <etharp_output_to_arp_index+0x124>)
 8012fb2:	4413      	add	r3, r2
 8012fb4:	3304      	adds	r3, #4
 8012fb6:	461a      	mov	r2, r3
 8012fb8:	68f8      	ldr	r0, [r7, #12]
 8012fba:	f000 fafb 	bl	80135b4 <etharp_request_dst>
 8012fbe:	4603      	mov	r3, r0
 8012fc0:	2b00      	cmp	r3, #0
 8012fc2:	d109      	bne.n	8012fd8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8012fc4:	79fa      	ldrb	r2, [r7, #7]
 8012fc6:	4911      	ldr	r1, [pc, #68]	@ (801300c <etharp_output_to_arp_index+0x124>)
 8012fc8:	4613      	mov	r3, r2
 8012fca:	005b      	lsls	r3, r3, #1
 8012fcc:	4413      	add	r3, r2
 8012fce:	00db      	lsls	r3, r3, #3
 8012fd0:	440b      	add	r3, r1
 8012fd2:	3314      	adds	r3, #20
 8012fd4:	2203      	movs	r2, #3
 8012fd6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8012fd8:	68fb      	ldr	r3, [r7, #12]
 8012fda:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 8012fde:	79fa      	ldrb	r2, [r7, #7]
 8012fe0:	4613      	mov	r3, r2
 8012fe2:	005b      	lsls	r3, r3, #1
 8012fe4:	4413      	add	r3, r2
 8012fe6:	00db      	lsls	r3, r3, #3
 8012fe8:	3308      	adds	r3, #8
 8012fea:	4a08      	ldr	r2, [pc, #32]	@ (801300c <etharp_output_to_arp_index+0x124>)
 8012fec:	4413      	add	r3, r2
 8012fee:	3304      	adds	r3, #4
 8012ff0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8012ff4:	9200      	str	r2, [sp, #0]
 8012ff6:	460a      	mov	r2, r1
 8012ff8:	68b9      	ldr	r1, [r7, #8]
 8012ffa:	68f8      	ldr	r0, [r7, #12]
 8012ffc:	f001 fe40 	bl	8014c80 <ethernet_output>
 8013000:	4603      	mov	r3, r0
}
 8013002:	4618      	mov	r0, r3
 8013004:	3710      	adds	r7, #16
 8013006:	46bd      	mov	sp, r7
 8013008:	bd80      	pop	{r7, pc}
 801300a:	bf00      	nop
 801300c:	200092a4 	.word	0x200092a4
 8013010:	080204f8 	.word	0x080204f8
 8013014:	08020668 	.word	0x08020668
 8013018:	08020570 	.word	0x08020570

0801301c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801301c:	b580      	push	{r7, lr}
 801301e:	b08a      	sub	sp, #40	@ 0x28
 8013020:	af02      	add	r7, sp, #8
 8013022:	60f8      	str	r0, [r7, #12]
 8013024:	60b9      	str	r1, [r7, #8]
 8013026:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801302c:	68fb      	ldr	r3, [r7, #12]
 801302e:	2b00      	cmp	r3, #0
 8013030:	d106      	bne.n	8013040 <etharp_output+0x24>
 8013032:	4b73      	ldr	r3, [pc, #460]	@ (8013200 <etharp_output+0x1e4>)
 8013034:	f240 321e 	movw	r2, #798	@ 0x31e
 8013038:	4972      	ldr	r1, [pc, #456]	@ (8013204 <etharp_output+0x1e8>)
 801303a:	4873      	ldr	r0, [pc, #460]	@ (8013208 <etharp_output+0x1ec>)
 801303c:	f002 fdfe 	bl	8015c3c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8013040:	68bb      	ldr	r3, [r7, #8]
 8013042:	2b00      	cmp	r3, #0
 8013044:	d106      	bne.n	8013054 <etharp_output+0x38>
 8013046:	4b6e      	ldr	r3, [pc, #440]	@ (8013200 <etharp_output+0x1e4>)
 8013048:	f240 321f 	movw	r2, #799	@ 0x31f
 801304c:	496f      	ldr	r1, [pc, #444]	@ (801320c <etharp_output+0x1f0>)
 801304e:	486e      	ldr	r0, [pc, #440]	@ (8013208 <etharp_output+0x1ec>)
 8013050:	f002 fdf4 	bl	8015c3c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	2b00      	cmp	r3, #0
 8013058:	d106      	bne.n	8013068 <etharp_output+0x4c>
 801305a:	4b69      	ldr	r3, [pc, #420]	@ (8013200 <etharp_output+0x1e4>)
 801305c:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8013060:	496b      	ldr	r1, [pc, #428]	@ (8013210 <etharp_output+0x1f4>)
 8013062:	4869      	ldr	r0, [pc, #420]	@ (8013208 <etharp_output+0x1ec>)
 8013064:	f002 fdea 	bl	8015c3c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	681b      	ldr	r3, [r3, #0]
 801306c:	68f9      	ldr	r1, [r7, #12]
 801306e:	4618      	mov	r0, r3
 8013070:	f000 fef8 	bl	8013e64 <ip4_addr_isbroadcast_u32>
 8013074:	4603      	mov	r3, r0
 8013076:	2b00      	cmp	r3, #0
 8013078:	d002      	beq.n	8013080 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801307a:	4b66      	ldr	r3, [pc, #408]	@ (8013214 <etharp_output+0x1f8>)
 801307c:	61fb      	str	r3, [r7, #28]
 801307e:	e0af      	b.n	80131e0 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8013080:	687b      	ldr	r3, [r7, #4]
 8013082:	681b      	ldr	r3, [r3, #0]
 8013084:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8013088:	2be0      	cmp	r3, #224	@ 0xe0
 801308a:	d118      	bne.n	80130be <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801308c:	2301      	movs	r3, #1
 801308e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8013090:	2300      	movs	r3, #0
 8013092:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8013094:	235e      	movs	r3, #94	@ 0x5e
 8013096:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8013098:	687b      	ldr	r3, [r7, #4]
 801309a:	3301      	adds	r3, #1
 801309c:	781b      	ldrb	r3, [r3, #0]
 801309e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80130a2:	b2db      	uxtb	r3, r3
 80130a4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80130a6:	687b      	ldr	r3, [r7, #4]
 80130a8:	3302      	adds	r3, #2
 80130aa:	781b      	ldrb	r3, [r3, #0]
 80130ac:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80130ae:	687b      	ldr	r3, [r7, #4]
 80130b0:	3303      	adds	r3, #3
 80130b2:	781b      	ldrb	r3, [r3, #0]
 80130b4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80130b6:	f107 0310 	add.w	r3, r7, #16
 80130ba:	61fb      	str	r3, [r7, #28]
 80130bc:	e090      	b.n	80131e0 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	681a      	ldr	r2, [r3, #0]
 80130c2:	68fb      	ldr	r3, [r7, #12]
 80130c4:	3304      	adds	r3, #4
 80130c6:	681b      	ldr	r3, [r3, #0]
 80130c8:	405a      	eors	r2, r3
 80130ca:	68fb      	ldr	r3, [r7, #12]
 80130cc:	3308      	adds	r3, #8
 80130ce:	681b      	ldr	r3, [r3, #0]
 80130d0:	4013      	ands	r3, r2
 80130d2:	2b00      	cmp	r3, #0
 80130d4:	d012      	beq.n	80130fc <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	681b      	ldr	r3, [r3, #0]
 80130da:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80130dc:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 80130e0:	4293      	cmp	r3, r2
 80130e2:	d00b      	beq.n	80130fc <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80130e4:	68fb      	ldr	r3, [r7, #12]
 80130e6:	330c      	adds	r3, #12
 80130e8:	681b      	ldr	r3, [r3, #0]
 80130ea:	2b00      	cmp	r3, #0
 80130ec:	d003      	beq.n	80130f6 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80130ee:	68fb      	ldr	r3, [r7, #12]
 80130f0:	330c      	adds	r3, #12
 80130f2:	61bb      	str	r3, [r7, #24]
 80130f4:	e002      	b.n	80130fc <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80130f6:	f06f 0303 	mvn.w	r3, #3
 80130fa:	e07d      	b.n	80131f8 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80130fc:	4b46      	ldr	r3, [pc, #280]	@ (8013218 <etharp_output+0x1fc>)
 80130fe:	781b      	ldrb	r3, [r3, #0]
 8013100:	4619      	mov	r1, r3
 8013102:	4a46      	ldr	r2, [pc, #280]	@ (801321c <etharp_output+0x200>)
 8013104:	460b      	mov	r3, r1
 8013106:	005b      	lsls	r3, r3, #1
 8013108:	440b      	add	r3, r1
 801310a:	00db      	lsls	r3, r3, #3
 801310c:	4413      	add	r3, r2
 801310e:	3314      	adds	r3, #20
 8013110:	781b      	ldrb	r3, [r3, #0]
 8013112:	2b01      	cmp	r3, #1
 8013114:	d925      	bls.n	8013162 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8013116:	4b40      	ldr	r3, [pc, #256]	@ (8013218 <etharp_output+0x1fc>)
 8013118:	781b      	ldrb	r3, [r3, #0]
 801311a:	4619      	mov	r1, r3
 801311c:	4a3f      	ldr	r2, [pc, #252]	@ (801321c <etharp_output+0x200>)
 801311e:	460b      	mov	r3, r1
 8013120:	005b      	lsls	r3, r3, #1
 8013122:	440b      	add	r3, r1
 8013124:	00db      	lsls	r3, r3, #3
 8013126:	4413      	add	r3, r2
 8013128:	3308      	adds	r3, #8
 801312a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801312c:	68fa      	ldr	r2, [r7, #12]
 801312e:	429a      	cmp	r2, r3
 8013130:	d117      	bne.n	8013162 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8013132:	69bb      	ldr	r3, [r7, #24]
 8013134:	681a      	ldr	r2, [r3, #0]
 8013136:	4b38      	ldr	r3, [pc, #224]	@ (8013218 <etharp_output+0x1fc>)
 8013138:	781b      	ldrb	r3, [r3, #0]
 801313a:	4618      	mov	r0, r3
 801313c:	4937      	ldr	r1, [pc, #220]	@ (801321c <etharp_output+0x200>)
 801313e:	4603      	mov	r3, r0
 8013140:	005b      	lsls	r3, r3, #1
 8013142:	4403      	add	r3, r0
 8013144:	00db      	lsls	r3, r3, #3
 8013146:	440b      	add	r3, r1
 8013148:	3304      	adds	r3, #4
 801314a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801314c:	429a      	cmp	r2, r3
 801314e:	d108      	bne.n	8013162 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8013150:	4b31      	ldr	r3, [pc, #196]	@ (8013218 <etharp_output+0x1fc>)
 8013152:	781b      	ldrb	r3, [r3, #0]
 8013154:	461a      	mov	r2, r3
 8013156:	68b9      	ldr	r1, [r7, #8]
 8013158:	68f8      	ldr	r0, [r7, #12]
 801315a:	f7ff fec5 	bl	8012ee8 <etharp_output_to_arp_index>
 801315e:	4603      	mov	r3, r0
 8013160:	e04a      	b.n	80131f8 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8013162:	2300      	movs	r3, #0
 8013164:	75fb      	strb	r3, [r7, #23]
 8013166:	e031      	b.n	80131cc <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8013168:	7dfa      	ldrb	r2, [r7, #23]
 801316a:	492c      	ldr	r1, [pc, #176]	@ (801321c <etharp_output+0x200>)
 801316c:	4613      	mov	r3, r2
 801316e:	005b      	lsls	r3, r3, #1
 8013170:	4413      	add	r3, r2
 8013172:	00db      	lsls	r3, r3, #3
 8013174:	440b      	add	r3, r1
 8013176:	3314      	adds	r3, #20
 8013178:	781b      	ldrb	r3, [r3, #0]
 801317a:	2b01      	cmp	r3, #1
 801317c:	d923      	bls.n	80131c6 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801317e:	7dfa      	ldrb	r2, [r7, #23]
 8013180:	4926      	ldr	r1, [pc, #152]	@ (801321c <etharp_output+0x200>)
 8013182:	4613      	mov	r3, r2
 8013184:	005b      	lsls	r3, r3, #1
 8013186:	4413      	add	r3, r2
 8013188:	00db      	lsls	r3, r3, #3
 801318a:	440b      	add	r3, r1
 801318c:	3308      	adds	r3, #8
 801318e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8013190:	68fa      	ldr	r2, [r7, #12]
 8013192:	429a      	cmp	r2, r3
 8013194:	d117      	bne.n	80131c6 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8013196:	69bb      	ldr	r3, [r7, #24]
 8013198:	6819      	ldr	r1, [r3, #0]
 801319a:	7dfa      	ldrb	r2, [r7, #23]
 801319c:	481f      	ldr	r0, [pc, #124]	@ (801321c <etharp_output+0x200>)
 801319e:	4613      	mov	r3, r2
 80131a0:	005b      	lsls	r3, r3, #1
 80131a2:	4413      	add	r3, r2
 80131a4:	00db      	lsls	r3, r3, #3
 80131a6:	4403      	add	r3, r0
 80131a8:	3304      	adds	r3, #4
 80131aa:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80131ac:	4299      	cmp	r1, r3
 80131ae:	d10a      	bne.n	80131c6 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80131b0:	4a19      	ldr	r2, [pc, #100]	@ (8013218 <etharp_output+0x1fc>)
 80131b2:	7dfb      	ldrb	r3, [r7, #23]
 80131b4:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80131b6:	7dfb      	ldrb	r3, [r7, #23]
 80131b8:	461a      	mov	r2, r3
 80131ba:	68b9      	ldr	r1, [r7, #8]
 80131bc:	68f8      	ldr	r0, [r7, #12]
 80131be:	f7ff fe93 	bl	8012ee8 <etharp_output_to_arp_index>
 80131c2:	4603      	mov	r3, r0
 80131c4:	e018      	b.n	80131f8 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80131c6:	7dfb      	ldrb	r3, [r7, #23]
 80131c8:	3301      	adds	r3, #1
 80131ca:	75fb      	strb	r3, [r7, #23]
 80131cc:	7dfb      	ldrb	r3, [r7, #23]
 80131ce:	2b09      	cmp	r3, #9
 80131d0:	d9ca      	bls.n	8013168 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80131d2:	68ba      	ldr	r2, [r7, #8]
 80131d4:	69b9      	ldr	r1, [r7, #24]
 80131d6:	68f8      	ldr	r0, [r7, #12]
 80131d8:	f000 f822 	bl	8013220 <etharp_query>
 80131dc:	4603      	mov	r3, r0
 80131de:	e00b      	b.n	80131f8 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80131e0:	68fb      	ldr	r3, [r7, #12]
 80131e2:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 80131e6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80131ea:	9300      	str	r3, [sp, #0]
 80131ec:	69fb      	ldr	r3, [r7, #28]
 80131ee:	68b9      	ldr	r1, [r7, #8]
 80131f0:	68f8      	ldr	r0, [r7, #12]
 80131f2:	f001 fd45 	bl	8014c80 <ethernet_output>
 80131f6:	4603      	mov	r3, r0
}
 80131f8:	4618      	mov	r0, r3
 80131fa:	3720      	adds	r7, #32
 80131fc:	46bd      	mov	sp, r7
 80131fe:	bd80      	pop	{r7, pc}
 8013200:	080204f8 	.word	0x080204f8
 8013204:	08020648 	.word	0x08020648
 8013208:	08020570 	.word	0x08020570
 801320c:	08020698 	.word	0x08020698
 8013210:	08020638 	.word	0x08020638
 8013214:	08020cbc 	.word	0x08020cbc
 8013218:	20009394 	.word	0x20009394
 801321c:	200092a4 	.word	0x200092a4

08013220 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8013220:	b580      	push	{r7, lr}
 8013222:	b08c      	sub	sp, #48	@ 0x30
 8013224:	af02      	add	r7, sp, #8
 8013226:	60f8      	str	r0, [r7, #12]
 8013228:	60b9      	str	r1, [r7, #8]
 801322a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801322c:	68fb      	ldr	r3, [r7, #12]
 801322e:	3326      	adds	r3, #38	@ 0x26
 8013230:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8013232:	23ff      	movs	r3, #255	@ 0xff
 8013234:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 8013238:	2300      	movs	r3, #0
 801323a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801323c:	68bb      	ldr	r3, [r7, #8]
 801323e:	681b      	ldr	r3, [r3, #0]
 8013240:	68f9      	ldr	r1, [r7, #12]
 8013242:	4618      	mov	r0, r3
 8013244:	f000 fe0e 	bl	8013e64 <ip4_addr_isbroadcast_u32>
 8013248:	4603      	mov	r3, r0
 801324a:	2b00      	cmp	r3, #0
 801324c:	d10c      	bne.n	8013268 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801324e:	68bb      	ldr	r3, [r7, #8]
 8013250:	681b      	ldr	r3, [r3, #0]
 8013252:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8013256:	2be0      	cmp	r3, #224	@ 0xe0
 8013258:	d006      	beq.n	8013268 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801325a:	68bb      	ldr	r3, [r7, #8]
 801325c:	2b00      	cmp	r3, #0
 801325e:	d003      	beq.n	8013268 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8013260:	68bb      	ldr	r3, [r7, #8]
 8013262:	681b      	ldr	r3, [r3, #0]
 8013264:	2b00      	cmp	r3, #0
 8013266:	d102      	bne.n	801326e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8013268:	f06f 030f 	mvn.w	r3, #15
 801326c:	e101      	b.n	8013472 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801326e:	68fa      	ldr	r2, [r7, #12]
 8013270:	2101      	movs	r1, #1
 8013272:	68b8      	ldr	r0, [r7, #8]
 8013274:	f7ff fb60 	bl	8012938 <etharp_find_entry>
 8013278:	4603      	mov	r3, r0
 801327a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801327c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8013280:	2b00      	cmp	r3, #0
 8013282:	da02      	bge.n	801328a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8013284:	8a7b      	ldrh	r3, [r7, #18]
 8013286:	b25b      	sxtb	r3, r3
 8013288:	e0f3      	b.n	8013472 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801328a:	8a7b      	ldrh	r3, [r7, #18]
 801328c:	2b7e      	cmp	r3, #126	@ 0x7e
 801328e:	d906      	bls.n	801329e <etharp_query+0x7e>
 8013290:	4b7a      	ldr	r3, [pc, #488]	@ (801347c <etharp_query+0x25c>)
 8013292:	f240 32c1 	movw	r2, #961	@ 0x3c1
 8013296:	497a      	ldr	r1, [pc, #488]	@ (8013480 <etharp_query+0x260>)
 8013298:	487a      	ldr	r0, [pc, #488]	@ (8013484 <etharp_query+0x264>)
 801329a:	f002 fccf 	bl	8015c3c <iprintf>
  i = (netif_addr_idx_t)i_err;
 801329e:	8a7b      	ldrh	r3, [r7, #18]
 80132a0:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80132a2:	7c7a      	ldrb	r2, [r7, #17]
 80132a4:	4978      	ldr	r1, [pc, #480]	@ (8013488 <etharp_query+0x268>)
 80132a6:	4613      	mov	r3, r2
 80132a8:	005b      	lsls	r3, r3, #1
 80132aa:	4413      	add	r3, r2
 80132ac:	00db      	lsls	r3, r3, #3
 80132ae:	440b      	add	r3, r1
 80132b0:	3314      	adds	r3, #20
 80132b2:	781b      	ldrb	r3, [r3, #0]
 80132b4:	2b00      	cmp	r3, #0
 80132b6:	d115      	bne.n	80132e4 <etharp_query+0xc4>
    is_new_entry = 1;
 80132b8:	2301      	movs	r3, #1
 80132ba:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80132bc:	7c7a      	ldrb	r2, [r7, #17]
 80132be:	4972      	ldr	r1, [pc, #456]	@ (8013488 <etharp_query+0x268>)
 80132c0:	4613      	mov	r3, r2
 80132c2:	005b      	lsls	r3, r3, #1
 80132c4:	4413      	add	r3, r2
 80132c6:	00db      	lsls	r3, r3, #3
 80132c8:	440b      	add	r3, r1
 80132ca:	3314      	adds	r3, #20
 80132cc:	2201      	movs	r2, #1
 80132ce:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80132d0:	7c7a      	ldrb	r2, [r7, #17]
 80132d2:	496d      	ldr	r1, [pc, #436]	@ (8013488 <etharp_query+0x268>)
 80132d4:	4613      	mov	r3, r2
 80132d6:	005b      	lsls	r3, r3, #1
 80132d8:	4413      	add	r3, r2
 80132da:	00db      	lsls	r3, r3, #3
 80132dc:	440b      	add	r3, r1
 80132de:	3308      	adds	r3, #8
 80132e0:	68fa      	ldr	r2, [r7, #12]
 80132e2:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80132e4:	7c7a      	ldrb	r2, [r7, #17]
 80132e6:	4968      	ldr	r1, [pc, #416]	@ (8013488 <etharp_query+0x268>)
 80132e8:	4613      	mov	r3, r2
 80132ea:	005b      	lsls	r3, r3, #1
 80132ec:	4413      	add	r3, r2
 80132ee:	00db      	lsls	r3, r3, #3
 80132f0:	440b      	add	r3, r1
 80132f2:	3314      	adds	r3, #20
 80132f4:	781b      	ldrb	r3, [r3, #0]
 80132f6:	2b01      	cmp	r3, #1
 80132f8:	d011      	beq.n	801331e <etharp_query+0xfe>
 80132fa:	7c7a      	ldrb	r2, [r7, #17]
 80132fc:	4962      	ldr	r1, [pc, #392]	@ (8013488 <etharp_query+0x268>)
 80132fe:	4613      	mov	r3, r2
 8013300:	005b      	lsls	r3, r3, #1
 8013302:	4413      	add	r3, r2
 8013304:	00db      	lsls	r3, r3, #3
 8013306:	440b      	add	r3, r1
 8013308:	3314      	adds	r3, #20
 801330a:	781b      	ldrb	r3, [r3, #0]
 801330c:	2b01      	cmp	r3, #1
 801330e:	d806      	bhi.n	801331e <etharp_query+0xfe>
 8013310:	4b5a      	ldr	r3, [pc, #360]	@ (801347c <etharp_query+0x25c>)
 8013312:	f240 32cd 	movw	r2, #973	@ 0x3cd
 8013316:	495d      	ldr	r1, [pc, #372]	@ (801348c <etharp_query+0x26c>)
 8013318:	485a      	ldr	r0, [pc, #360]	@ (8013484 <etharp_query+0x264>)
 801331a:	f002 fc8f 	bl	8015c3c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801331e:	6a3b      	ldr	r3, [r7, #32]
 8013320:	2b00      	cmp	r3, #0
 8013322:	d102      	bne.n	801332a <etharp_query+0x10a>
 8013324:	687b      	ldr	r3, [r7, #4]
 8013326:	2b00      	cmp	r3, #0
 8013328:	d10c      	bne.n	8013344 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801332a:	68b9      	ldr	r1, [r7, #8]
 801332c:	68f8      	ldr	r0, [r7, #12]
 801332e:	f000 f963 	bl	80135f8 <etharp_request>
 8013332:	4603      	mov	r3, r0
 8013334:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	2b00      	cmp	r3, #0
 801333c:	d102      	bne.n	8013344 <etharp_query+0x124>
      return result;
 801333e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8013342:	e096      	b.n	8013472 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8013344:	687b      	ldr	r3, [r7, #4]
 8013346:	2b00      	cmp	r3, #0
 8013348:	d106      	bne.n	8013358 <etharp_query+0x138>
 801334a:	4b4c      	ldr	r3, [pc, #304]	@ (801347c <etharp_query+0x25c>)
 801334c:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8013350:	494f      	ldr	r1, [pc, #316]	@ (8013490 <etharp_query+0x270>)
 8013352:	484c      	ldr	r0, [pc, #304]	@ (8013484 <etharp_query+0x264>)
 8013354:	f002 fc72 	bl	8015c3c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8013358:	7c7a      	ldrb	r2, [r7, #17]
 801335a:	494b      	ldr	r1, [pc, #300]	@ (8013488 <etharp_query+0x268>)
 801335c:	4613      	mov	r3, r2
 801335e:	005b      	lsls	r3, r3, #1
 8013360:	4413      	add	r3, r2
 8013362:	00db      	lsls	r3, r3, #3
 8013364:	440b      	add	r3, r1
 8013366:	3314      	adds	r3, #20
 8013368:	781b      	ldrb	r3, [r3, #0]
 801336a:	2b01      	cmp	r3, #1
 801336c:	d917      	bls.n	801339e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801336e:	4a49      	ldr	r2, [pc, #292]	@ (8013494 <etharp_query+0x274>)
 8013370:	7c7b      	ldrb	r3, [r7, #17]
 8013372:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8013374:	7c7a      	ldrb	r2, [r7, #17]
 8013376:	4613      	mov	r3, r2
 8013378:	005b      	lsls	r3, r3, #1
 801337a:	4413      	add	r3, r2
 801337c:	00db      	lsls	r3, r3, #3
 801337e:	3308      	adds	r3, #8
 8013380:	4a41      	ldr	r2, [pc, #260]	@ (8013488 <etharp_query+0x268>)
 8013382:	4413      	add	r3, r2
 8013384:	3304      	adds	r3, #4
 8013386:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801338a:	9200      	str	r2, [sp, #0]
 801338c:	697a      	ldr	r2, [r7, #20]
 801338e:	6879      	ldr	r1, [r7, #4]
 8013390:	68f8      	ldr	r0, [r7, #12]
 8013392:	f001 fc75 	bl	8014c80 <ethernet_output>
 8013396:	4603      	mov	r3, r0
 8013398:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801339c:	e067      	b.n	801346e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801339e:	7c7a      	ldrb	r2, [r7, #17]
 80133a0:	4939      	ldr	r1, [pc, #228]	@ (8013488 <etharp_query+0x268>)
 80133a2:	4613      	mov	r3, r2
 80133a4:	005b      	lsls	r3, r3, #1
 80133a6:	4413      	add	r3, r2
 80133a8:	00db      	lsls	r3, r3, #3
 80133aa:	440b      	add	r3, r1
 80133ac:	3314      	adds	r3, #20
 80133ae:	781b      	ldrb	r3, [r3, #0]
 80133b0:	2b01      	cmp	r3, #1
 80133b2:	d15c      	bne.n	801346e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80133b4:	2300      	movs	r3, #0
 80133b6:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80133b8:	687b      	ldr	r3, [r7, #4]
 80133ba:	61fb      	str	r3, [r7, #28]
    while (p) {
 80133bc:	e01c      	b.n	80133f8 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80133be:	69fb      	ldr	r3, [r7, #28]
 80133c0:	895a      	ldrh	r2, [r3, #10]
 80133c2:	69fb      	ldr	r3, [r7, #28]
 80133c4:	891b      	ldrh	r3, [r3, #8]
 80133c6:	429a      	cmp	r2, r3
 80133c8:	d10a      	bne.n	80133e0 <etharp_query+0x1c0>
 80133ca:	69fb      	ldr	r3, [r7, #28]
 80133cc:	681b      	ldr	r3, [r3, #0]
 80133ce:	2b00      	cmp	r3, #0
 80133d0:	d006      	beq.n	80133e0 <etharp_query+0x1c0>
 80133d2:	4b2a      	ldr	r3, [pc, #168]	@ (801347c <etharp_query+0x25c>)
 80133d4:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 80133d8:	492f      	ldr	r1, [pc, #188]	@ (8013498 <etharp_query+0x278>)
 80133da:	482a      	ldr	r0, [pc, #168]	@ (8013484 <etharp_query+0x264>)
 80133dc:	f002 fc2e 	bl	8015c3c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80133e0:	69fb      	ldr	r3, [r7, #28]
 80133e2:	7b1b      	ldrb	r3, [r3, #12]
 80133e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80133e8:	2b00      	cmp	r3, #0
 80133ea:	d002      	beq.n	80133f2 <etharp_query+0x1d2>
        copy_needed = 1;
 80133ec:	2301      	movs	r3, #1
 80133ee:	61bb      	str	r3, [r7, #24]
        break;
 80133f0:	e005      	b.n	80133fe <etharp_query+0x1de>
      }
      p = p->next;
 80133f2:	69fb      	ldr	r3, [r7, #28]
 80133f4:	681b      	ldr	r3, [r3, #0]
 80133f6:	61fb      	str	r3, [r7, #28]
    while (p) {
 80133f8:	69fb      	ldr	r3, [r7, #28]
 80133fa:	2b00      	cmp	r3, #0
 80133fc:	d1df      	bne.n	80133be <etharp_query+0x19e>
    }
    if (copy_needed) {
 80133fe:	69bb      	ldr	r3, [r7, #24]
 8013400:	2b00      	cmp	r3, #0
 8013402:	d007      	beq.n	8013414 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8013404:	687a      	ldr	r2, [r7, #4]
 8013406:	f44f 7120 	mov.w	r1, #640	@ 0x280
 801340a:	200e      	movs	r0, #14
 801340c:	f7f9 f978 	bl	800c700 <pbuf_clone>
 8013410:	61f8      	str	r0, [r7, #28]
 8013412:	e004      	b.n	801341e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8013418:	69f8      	ldr	r0, [r7, #28]
 801341a:	f7f8 fe6d 	bl	800c0f8 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801341e:	69fb      	ldr	r3, [r7, #28]
 8013420:	2b00      	cmp	r3, #0
 8013422:	d021      	beq.n	8013468 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8013424:	7c7a      	ldrb	r2, [r7, #17]
 8013426:	4918      	ldr	r1, [pc, #96]	@ (8013488 <etharp_query+0x268>)
 8013428:	4613      	mov	r3, r2
 801342a:	005b      	lsls	r3, r3, #1
 801342c:	4413      	add	r3, r2
 801342e:	00db      	lsls	r3, r3, #3
 8013430:	440b      	add	r3, r1
 8013432:	681b      	ldr	r3, [r3, #0]
 8013434:	2b00      	cmp	r3, #0
 8013436:	d00a      	beq.n	801344e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8013438:	7c7a      	ldrb	r2, [r7, #17]
 801343a:	4913      	ldr	r1, [pc, #76]	@ (8013488 <etharp_query+0x268>)
 801343c:	4613      	mov	r3, r2
 801343e:	005b      	lsls	r3, r3, #1
 8013440:	4413      	add	r3, r2
 8013442:	00db      	lsls	r3, r3, #3
 8013444:	440b      	add	r3, r1
 8013446:	681b      	ldr	r3, [r3, #0]
 8013448:	4618      	mov	r0, r3
 801344a:	f7f8 fdb5 	bl	800bfb8 <pbuf_free>
      }
      arp_table[i].q = p;
 801344e:	7c7a      	ldrb	r2, [r7, #17]
 8013450:	490d      	ldr	r1, [pc, #52]	@ (8013488 <etharp_query+0x268>)
 8013452:	4613      	mov	r3, r2
 8013454:	005b      	lsls	r3, r3, #1
 8013456:	4413      	add	r3, r2
 8013458:	00db      	lsls	r3, r3, #3
 801345a:	440b      	add	r3, r1
 801345c:	69fa      	ldr	r2, [r7, #28]
 801345e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8013460:	2300      	movs	r3, #0
 8013462:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8013466:	e002      	b.n	801346e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8013468:	23ff      	movs	r3, #255	@ 0xff
 801346a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 801346e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8013472:	4618      	mov	r0, r3
 8013474:	3728      	adds	r7, #40	@ 0x28
 8013476:	46bd      	mov	sp, r7
 8013478:	bd80      	pop	{r7, pc}
 801347a:	bf00      	nop
 801347c:	080204f8 	.word	0x080204f8
 8013480:	080206a4 	.word	0x080206a4
 8013484:	08020570 	.word	0x08020570
 8013488:	200092a4 	.word	0x200092a4
 801348c:	080206b4 	.word	0x080206b4
 8013490:	08020698 	.word	0x08020698
 8013494:	20009394 	.word	0x20009394
 8013498:	080206dc 	.word	0x080206dc

0801349c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801349c:	b580      	push	{r7, lr}
 801349e:	b08a      	sub	sp, #40	@ 0x28
 80134a0:	af02      	add	r7, sp, #8
 80134a2:	60f8      	str	r0, [r7, #12]
 80134a4:	60b9      	str	r1, [r7, #8]
 80134a6:	607a      	str	r2, [r7, #4]
 80134a8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80134aa:	2300      	movs	r3, #0
 80134ac:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80134ae:	68fb      	ldr	r3, [r7, #12]
 80134b0:	2b00      	cmp	r3, #0
 80134b2:	d106      	bne.n	80134c2 <etharp_raw+0x26>
 80134b4:	4b3a      	ldr	r3, [pc, #232]	@ (80135a0 <etharp_raw+0x104>)
 80134b6:	f240 4257 	movw	r2, #1111	@ 0x457
 80134ba:	493a      	ldr	r1, [pc, #232]	@ (80135a4 <etharp_raw+0x108>)
 80134bc:	483a      	ldr	r0, [pc, #232]	@ (80135a8 <etharp_raw+0x10c>)
 80134be:	f002 fbbd 	bl	8015c3c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80134c2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80134c6:	211c      	movs	r1, #28
 80134c8:	200e      	movs	r0, #14
 80134ca:	f7f8 fa91 	bl	800b9f0 <pbuf_alloc>
 80134ce:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80134d0:	69bb      	ldr	r3, [r7, #24]
 80134d2:	2b00      	cmp	r3, #0
 80134d4:	d102      	bne.n	80134dc <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80134d6:	f04f 33ff 	mov.w	r3, #4294967295
 80134da:	e05d      	b.n	8013598 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80134dc:	69bb      	ldr	r3, [r7, #24]
 80134de:	895b      	ldrh	r3, [r3, #10]
 80134e0:	2b1b      	cmp	r3, #27
 80134e2:	d806      	bhi.n	80134f2 <etharp_raw+0x56>
 80134e4:	4b2e      	ldr	r3, [pc, #184]	@ (80135a0 <etharp_raw+0x104>)
 80134e6:	f240 4262 	movw	r2, #1122	@ 0x462
 80134ea:	4930      	ldr	r1, [pc, #192]	@ (80135ac <etharp_raw+0x110>)
 80134ec:	482e      	ldr	r0, [pc, #184]	@ (80135a8 <etharp_raw+0x10c>)
 80134ee:	f002 fba5 	bl	8015c3c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80134f2:	69bb      	ldr	r3, [r7, #24]
 80134f4:	685b      	ldr	r3, [r3, #4]
 80134f6:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80134f8:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80134fa:	4618      	mov	r0, r3
 80134fc:	f7f6 ff34 	bl	800a368 <lwip_htons>
 8013500:	4603      	mov	r3, r0
 8013502:	461a      	mov	r2, r3
 8013504:	697b      	ldr	r3, [r7, #20]
 8013506:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8013508:	68fb      	ldr	r3, [r7, #12]
 801350a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801350e:	2b06      	cmp	r3, #6
 8013510:	d006      	beq.n	8013520 <etharp_raw+0x84>
 8013512:	4b23      	ldr	r3, [pc, #140]	@ (80135a0 <etharp_raw+0x104>)
 8013514:	f240 4269 	movw	r2, #1129	@ 0x469
 8013518:	4925      	ldr	r1, [pc, #148]	@ (80135b0 <etharp_raw+0x114>)
 801351a:	4823      	ldr	r0, [pc, #140]	@ (80135a8 <etharp_raw+0x10c>)
 801351c:	f002 fb8e 	bl	8015c3c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8013520:	697b      	ldr	r3, [r7, #20]
 8013522:	3308      	adds	r3, #8
 8013524:	2206      	movs	r2, #6
 8013526:	6839      	ldr	r1, [r7, #0]
 8013528:	4618      	mov	r0, r3
 801352a:	f002 fcde 	bl	8015eea <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801352e:	697b      	ldr	r3, [r7, #20]
 8013530:	3312      	adds	r3, #18
 8013532:	2206      	movs	r2, #6
 8013534:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8013536:	4618      	mov	r0, r3
 8013538:	f002 fcd7 	bl	8015eea <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801353c:	697b      	ldr	r3, [r7, #20]
 801353e:	330e      	adds	r3, #14
 8013540:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013542:	6812      	ldr	r2, [r2, #0]
 8013544:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8013546:	697b      	ldr	r3, [r7, #20]
 8013548:	3318      	adds	r3, #24
 801354a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801354c:	6812      	ldr	r2, [r2, #0]
 801354e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8013550:	697b      	ldr	r3, [r7, #20]
 8013552:	2200      	movs	r2, #0
 8013554:	701a      	strb	r2, [r3, #0]
 8013556:	2200      	movs	r2, #0
 8013558:	f042 0201 	orr.w	r2, r2, #1
 801355c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801355e:	697b      	ldr	r3, [r7, #20]
 8013560:	2200      	movs	r2, #0
 8013562:	f042 0208 	orr.w	r2, r2, #8
 8013566:	709a      	strb	r2, [r3, #2]
 8013568:	2200      	movs	r2, #0
 801356a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801356c:	697b      	ldr	r3, [r7, #20]
 801356e:	2206      	movs	r2, #6
 8013570:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8013572:	697b      	ldr	r3, [r7, #20]
 8013574:	2204      	movs	r2, #4
 8013576:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8013578:	f640 0306 	movw	r3, #2054	@ 0x806
 801357c:	9300      	str	r3, [sp, #0]
 801357e:	687b      	ldr	r3, [r7, #4]
 8013580:	68ba      	ldr	r2, [r7, #8]
 8013582:	69b9      	ldr	r1, [r7, #24]
 8013584:	68f8      	ldr	r0, [r7, #12]
 8013586:	f001 fb7b 	bl	8014c80 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801358a:	69b8      	ldr	r0, [r7, #24]
 801358c:	f7f8 fd14 	bl	800bfb8 <pbuf_free>
  p = NULL;
 8013590:	2300      	movs	r3, #0
 8013592:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8013594:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013598:	4618      	mov	r0, r3
 801359a:	3720      	adds	r7, #32
 801359c:	46bd      	mov	sp, r7
 801359e:	bd80      	pop	{r7, pc}
 80135a0:	080204f8 	.word	0x080204f8
 80135a4:	08020648 	.word	0x08020648
 80135a8:	08020570 	.word	0x08020570
 80135ac:	080206f8 	.word	0x080206f8
 80135b0:	0802072c 	.word	0x0802072c

080135b4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80135b4:	b580      	push	{r7, lr}
 80135b6:	b088      	sub	sp, #32
 80135b8:	af04      	add	r7, sp, #16
 80135ba:	60f8      	str	r0, [r7, #12]
 80135bc:	60b9      	str	r1, [r7, #8]
 80135be:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80135c0:	68fb      	ldr	r3, [r7, #12]
 80135c2:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80135c6:	68fb      	ldr	r3, [r7, #12]
 80135c8:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 80135cc:	68fb      	ldr	r3, [r7, #12]
 80135ce:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80135d0:	2201      	movs	r2, #1
 80135d2:	9203      	str	r2, [sp, #12]
 80135d4:	68ba      	ldr	r2, [r7, #8]
 80135d6:	9202      	str	r2, [sp, #8]
 80135d8:	4a06      	ldr	r2, [pc, #24]	@ (80135f4 <etharp_request_dst+0x40>)
 80135da:	9201      	str	r2, [sp, #4]
 80135dc:	9300      	str	r3, [sp, #0]
 80135de:	4603      	mov	r3, r0
 80135e0:	687a      	ldr	r2, [r7, #4]
 80135e2:	68f8      	ldr	r0, [r7, #12]
 80135e4:	f7ff ff5a 	bl	801349c <etharp_raw>
 80135e8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80135ea:	4618      	mov	r0, r3
 80135ec:	3710      	adds	r7, #16
 80135ee:	46bd      	mov	sp, r7
 80135f0:	bd80      	pop	{r7, pc}
 80135f2:	bf00      	nop
 80135f4:	08020cc4 	.word	0x08020cc4

080135f8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80135f8:	b580      	push	{r7, lr}
 80135fa:	b082      	sub	sp, #8
 80135fc:	af00      	add	r7, sp, #0
 80135fe:	6078      	str	r0, [r7, #4]
 8013600:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8013602:	4a05      	ldr	r2, [pc, #20]	@ (8013618 <etharp_request+0x20>)
 8013604:	6839      	ldr	r1, [r7, #0]
 8013606:	6878      	ldr	r0, [r7, #4]
 8013608:	f7ff ffd4 	bl	80135b4 <etharp_request_dst>
 801360c:	4603      	mov	r3, r0
}
 801360e:	4618      	mov	r0, r3
 8013610:	3708      	adds	r7, #8
 8013612:	46bd      	mov	sp, r7
 8013614:	bd80      	pop	{r7, pc}
 8013616:	bf00      	nop
 8013618:	08020cbc 	.word	0x08020cbc

0801361c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801361c:	b580      	push	{r7, lr}
 801361e:	b08e      	sub	sp, #56	@ 0x38
 8013620:	af04      	add	r7, sp, #16
 8013622:	6078      	str	r0, [r7, #4]
 8013624:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8013626:	4b79      	ldr	r3, [pc, #484]	@ (801380c <icmp_input+0x1f0>)
 8013628:	689b      	ldr	r3, [r3, #8]
 801362a:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801362c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801362e:	781b      	ldrb	r3, [r3, #0]
 8013630:	f003 030f 	and.w	r3, r3, #15
 8013634:	b2db      	uxtb	r3, r3
 8013636:	009b      	lsls	r3, r3, #2
 8013638:	b2db      	uxtb	r3, r3
 801363a:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 801363c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801363e:	2b13      	cmp	r3, #19
 8013640:	f240 80cd 	bls.w	80137de <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	895b      	ldrh	r3, [r3, #10]
 8013648:	2b03      	cmp	r3, #3
 801364a:	f240 80ca 	bls.w	80137e2 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801364e:	687b      	ldr	r3, [r7, #4]
 8013650:	685b      	ldr	r3, [r3, #4]
 8013652:	781b      	ldrb	r3, [r3, #0]
 8013654:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8013658:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801365c:	2b00      	cmp	r3, #0
 801365e:	f000 80b7 	beq.w	80137d0 <icmp_input+0x1b4>
 8013662:	2b08      	cmp	r3, #8
 8013664:	f040 80b7 	bne.w	80137d6 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8013668:	4b69      	ldr	r3, [pc, #420]	@ (8013810 <icmp_input+0x1f4>)
 801366a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801366c:	4b67      	ldr	r3, [pc, #412]	@ (801380c <icmp_input+0x1f0>)
 801366e:	695b      	ldr	r3, [r3, #20]
 8013670:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8013674:	2be0      	cmp	r3, #224	@ 0xe0
 8013676:	f000 80bb 	beq.w	80137f0 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801367a:	4b64      	ldr	r3, [pc, #400]	@ (801380c <icmp_input+0x1f0>)
 801367c:	695b      	ldr	r3, [r3, #20]
 801367e:	4a63      	ldr	r2, [pc, #396]	@ (801380c <icmp_input+0x1f0>)
 8013680:	6812      	ldr	r2, [r2, #0]
 8013682:	4611      	mov	r1, r2
 8013684:	4618      	mov	r0, r3
 8013686:	f000 fbed 	bl	8013e64 <ip4_addr_isbroadcast_u32>
 801368a:	4603      	mov	r3, r0
 801368c:	2b00      	cmp	r3, #0
 801368e:	f040 80b1 	bne.w	80137f4 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8013692:	687b      	ldr	r3, [r7, #4]
 8013694:	891b      	ldrh	r3, [r3, #8]
 8013696:	2b07      	cmp	r3, #7
 8013698:	f240 80a5 	bls.w	80137e6 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801369c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801369e:	330e      	adds	r3, #14
 80136a0:	4619      	mov	r1, r3
 80136a2:	6878      	ldr	r0, [r7, #4]
 80136a4:	f7f8 fbf2 	bl	800be8c <pbuf_add_header>
 80136a8:	4603      	mov	r3, r0
 80136aa:	2b00      	cmp	r3, #0
 80136ac:	d04b      	beq.n	8013746 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80136ae:	687b      	ldr	r3, [r7, #4]
 80136b0:	891a      	ldrh	r2, [r3, #8]
 80136b2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80136b4:	4413      	add	r3, r2
 80136b6:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80136b8:	687b      	ldr	r3, [r7, #4]
 80136ba:	891b      	ldrh	r3, [r3, #8]
 80136bc:	8b7a      	ldrh	r2, [r7, #26]
 80136be:	429a      	cmp	r2, r3
 80136c0:	f0c0 809a 	bcc.w	80137f8 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80136c4:	8b7b      	ldrh	r3, [r7, #26]
 80136c6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80136ca:	4619      	mov	r1, r3
 80136cc:	200e      	movs	r0, #14
 80136ce:	f7f8 f98f 	bl	800b9f0 <pbuf_alloc>
 80136d2:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80136d4:	697b      	ldr	r3, [r7, #20]
 80136d6:	2b00      	cmp	r3, #0
 80136d8:	f000 8090 	beq.w	80137fc <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80136dc:	697b      	ldr	r3, [r7, #20]
 80136de:	895b      	ldrh	r3, [r3, #10]
 80136e0:	461a      	mov	r2, r3
 80136e2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80136e4:	3308      	adds	r3, #8
 80136e6:	429a      	cmp	r2, r3
 80136e8:	d203      	bcs.n	80136f2 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80136ea:	6978      	ldr	r0, [r7, #20]
 80136ec:	f7f8 fc64 	bl	800bfb8 <pbuf_free>
          goto icmperr;
 80136f0:	e085      	b.n	80137fe <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80136f2:	697b      	ldr	r3, [r7, #20]
 80136f4:	685b      	ldr	r3, [r3, #4]
 80136f6:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80136f8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80136fa:	4618      	mov	r0, r3
 80136fc:	f002 fbf5 	bl	8015eea <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8013700:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013702:	4619      	mov	r1, r3
 8013704:	6978      	ldr	r0, [r7, #20]
 8013706:	f7f8 fbd1 	bl	800beac <pbuf_remove_header>
 801370a:	4603      	mov	r3, r0
 801370c:	2b00      	cmp	r3, #0
 801370e:	d009      	beq.n	8013724 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8013710:	4b40      	ldr	r3, [pc, #256]	@ (8013814 <icmp_input+0x1f8>)
 8013712:	22b6      	movs	r2, #182	@ 0xb6
 8013714:	4940      	ldr	r1, [pc, #256]	@ (8013818 <icmp_input+0x1fc>)
 8013716:	4841      	ldr	r0, [pc, #260]	@ (801381c <icmp_input+0x200>)
 8013718:	f002 fa90 	bl	8015c3c <iprintf>
          pbuf_free(r);
 801371c:	6978      	ldr	r0, [r7, #20]
 801371e:	f7f8 fc4b 	bl	800bfb8 <pbuf_free>
          goto icmperr;
 8013722:	e06c      	b.n	80137fe <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8013724:	6879      	ldr	r1, [r7, #4]
 8013726:	6978      	ldr	r0, [r7, #20]
 8013728:	f7f8 fd6e 	bl	800c208 <pbuf_copy>
 801372c:	4603      	mov	r3, r0
 801372e:	2b00      	cmp	r3, #0
 8013730:	d003      	beq.n	801373a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8013732:	6978      	ldr	r0, [r7, #20]
 8013734:	f7f8 fc40 	bl	800bfb8 <pbuf_free>
          goto icmperr;
 8013738:	e061      	b.n	80137fe <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801373a:	6878      	ldr	r0, [r7, #4]
 801373c:	f7f8 fc3c 	bl	800bfb8 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8013740:	697b      	ldr	r3, [r7, #20]
 8013742:	607b      	str	r3, [r7, #4]
 8013744:	e00f      	b.n	8013766 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8013746:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8013748:	330e      	adds	r3, #14
 801374a:	4619      	mov	r1, r3
 801374c:	6878      	ldr	r0, [r7, #4]
 801374e:	f7f8 fbad 	bl	800beac <pbuf_remove_header>
 8013752:	4603      	mov	r3, r0
 8013754:	2b00      	cmp	r3, #0
 8013756:	d006      	beq.n	8013766 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8013758:	4b2e      	ldr	r3, [pc, #184]	@ (8013814 <icmp_input+0x1f8>)
 801375a:	22c7      	movs	r2, #199	@ 0xc7
 801375c:	4930      	ldr	r1, [pc, #192]	@ (8013820 <icmp_input+0x204>)
 801375e:	482f      	ldr	r0, [pc, #188]	@ (801381c <icmp_input+0x200>)
 8013760:	f002 fa6c 	bl	8015c3c <iprintf>
          goto icmperr;
 8013764:	e04b      	b.n	80137fe <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8013766:	687b      	ldr	r3, [r7, #4]
 8013768:	685b      	ldr	r3, [r3, #4]
 801376a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801376c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801376e:	4619      	mov	r1, r3
 8013770:	6878      	ldr	r0, [r7, #4]
 8013772:	f7f8 fb8b 	bl	800be8c <pbuf_add_header>
 8013776:	4603      	mov	r3, r0
 8013778:	2b00      	cmp	r3, #0
 801377a:	d12b      	bne.n	80137d4 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801377c:	687b      	ldr	r3, [r7, #4]
 801377e:	685b      	ldr	r3, [r3, #4]
 8013780:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8013782:	69fb      	ldr	r3, [r7, #28]
 8013784:	681a      	ldr	r2, [r3, #0]
 8013786:	68fb      	ldr	r3, [r7, #12]
 8013788:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801378a:	4b20      	ldr	r3, [pc, #128]	@ (801380c <icmp_input+0x1f0>)
 801378c:	691a      	ldr	r2, [r3, #16]
 801378e:	68fb      	ldr	r3, [r7, #12]
 8013790:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8013792:	693b      	ldr	r3, [r7, #16]
 8013794:	2200      	movs	r2, #0
 8013796:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8013798:	693b      	ldr	r3, [r7, #16]
 801379a:	2200      	movs	r2, #0
 801379c:	709a      	strb	r2, [r3, #2]
 801379e:	2200      	movs	r2, #0
 80137a0:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80137a2:	68fb      	ldr	r3, [r7, #12]
 80137a4:	22ff      	movs	r2, #255	@ 0xff
 80137a6:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80137a8:	68fb      	ldr	r3, [r7, #12]
 80137aa:	2200      	movs	r2, #0
 80137ac:	729a      	strb	r2, [r3, #10]
 80137ae:	2200      	movs	r2, #0
 80137b0:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80137b2:	683b      	ldr	r3, [r7, #0]
 80137b4:	9302      	str	r3, [sp, #8]
 80137b6:	2301      	movs	r3, #1
 80137b8:	9301      	str	r3, [sp, #4]
 80137ba:	2300      	movs	r3, #0
 80137bc:	9300      	str	r3, [sp, #0]
 80137be:	23ff      	movs	r3, #255	@ 0xff
 80137c0:	2200      	movs	r2, #0
 80137c2:	69f9      	ldr	r1, [r7, #28]
 80137c4:	6878      	ldr	r0, [r7, #4]
 80137c6:	f000 fa75 	bl	8013cb4 <ip4_output_if>
 80137ca:	4603      	mov	r3, r0
 80137cc:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80137ce:	e001      	b.n	80137d4 <icmp_input+0x1b8>
      break;
 80137d0:	bf00      	nop
 80137d2:	e000      	b.n	80137d6 <icmp_input+0x1ba>
      break;
 80137d4:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80137d6:	6878      	ldr	r0, [r7, #4]
 80137d8:	f7f8 fbee 	bl	800bfb8 <pbuf_free>
  return;
 80137dc:	e013      	b.n	8013806 <icmp_input+0x1ea>
    goto lenerr;
 80137de:	bf00      	nop
 80137e0:	e002      	b.n	80137e8 <icmp_input+0x1cc>
    goto lenerr;
 80137e2:	bf00      	nop
 80137e4:	e000      	b.n	80137e8 <icmp_input+0x1cc>
        goto lenerr;
 80137e6:	bf00      	nop
lenerr:
  pbuf_free(p);
 80137e8:	6878      	ldr	r0, [r7, #4]
 80137ea:	f7f8 fbe5 	bl	800bfb8 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80137ee:	e00a      	b.n	8013806 <icmp_input+0x1ea>
        goto icmperr;
 80137f0:	bf00      	nop
 80137f2:	e004      	b.n	80137fe <icmp_input+0x1e2>
        goto icmperr;
 80137f4:	bf00      	nop
 80137f6:	e002      	b.n	80137fe <icmp_input+0x1e2>
          goto icmperr;
 80137f8:	bf00      	nop
 80137fa:	e000      	b.n	80137fe <icmp_input+0x1e2>
          goto icmperr;
 80137fc:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80137fe:	6878      	ldr	r0, [r7, #4]
 8013800:	f7f8 fbda 	bl	800bfb8 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8013804:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8013806:	3728      	adds	r7, #40	@ 0x28
 8013808:	46bd      	mov	sp, r7
 801380a:	bd80      	pop	{r7, pc}
 801380c:	20005f04 	.word	0x20005f04
 8013810:	20005f18 	.word	0x20005f18
 8013814:	08020770 	.word	0x08020770
 8013818:	080207a8 	.word	0x080207a8
 801381c:	080207e0 	.word	0x080207e0
 8013820:	08020808 	.word	0x08020808

08013824 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8013824:	b580      	push	{r7, lr}
 8013826:	b082      	sub	sp, #8
 8013828:	af00      	add	r7, sp, #0
 801382a:	6078      	str	r0, [r7, #4]
 801382c:	460b      	mov	r3, r1
 801382e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8013830:	78fb      	ldrb	r3, [r7, #3]
 8013832:	461a      	mov	r2, r3
 8013834:	2103      	movs	r1, #3
 8013836:	6878      	ldr	r0, [r7, #4]
 8013838:	f000 f814 	bl	8013864 <icmp_send_response>
}
 801383c:	bf00      	nop
 801383e:	3708      	adds	r7, #8
 8013840:	46bd      	mov	sp, r7
 8013842:	bd80      	pop	{r7, pc}

08013844 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8013844:	b580      	push	{r7, lr}
 8013846:	b082      	sub	sp, #8
 8013848:	af00      	add	r7, sp, #0
 801384a:	6078      	str	r0, [r7, #4]
 801384c:	460b      	mov	r3, r1
 801384e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8013850:	78fb      	ldrb	r3, [r7, #3]
 8013852:	461a      	mov	r2, r3
 8013854:	210b      	movs	r1, #11
 8013856:	6878      	ldr	r0, [r7, #4]
 8013858:	f000 f804 	bl	8013864 <icmp_send_response>
}
 801385c:	bf00      	nop
 801385e:	3708      	adds	r7, #8
 8013860:	46bd      	mov	sp, r7
 8013862:	bd80      	pop	{r7, pc}

08013864 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8013864:	b580      	push	{r7, lr}
 8013866:	b08c      	sub	sp, #48	@ 0x30
 8013868:	af04      	add	r7, sp, #16
 801386a:	6078      	str	r0, [r7, #4]
 801386c:	460b      	mov	r3, r1
 801386e:	70fb      	strb	r3, [r7, #3]
 8013870:	4613      	mov	r3, r2
 8013872:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8013874:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8013878:	2124      	movs	r1, #36	@ 0x24
 801387a:	2022      	movs	r0, #34	@ 0x22
 801387c:	f7f8 f8b8 	bl	800b9f0 <pbuf_alloc>
 8013880:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8013882:	69fb      	ldr	r3, [r7, #28]
 8013884:	2b00      	cmp	r3, #0
 8013886:	d04c      	beq.n	8013922 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8013888:	69fb      	ldr	r3, [r7, #28]
 801388a:	895b      	ldrh	r3, [r3, #10]
 801388c:	2b23      	cmp	r3, #35	@ 0x23
 801388e:	d806      	bhi.n	801389e <icmp_send_response+0x3a>
 8013890:	4b26      	ldr	r3, [pc, #152]	@ (801392c <icmp_send_response+0xc8>)
 8013892:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8013896:	4926      	ldr	r1, [pc, #152]	@ (8013930 <icmp_send_response+0xcc>)
 8013898:	4826      	ldr	r0, [pc, #152]	@ (8013934 <icmp_send_response+0xd0>)
 801389a:	f002 f9cf 	bl	8015c3c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801389e:	687b      	ldr	r3, [r7, #4]
 80138a0:	685b      	ldr	r3, [r3, #4]
 80138a2:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80138a4:	69fb      	ldr	r3, [r7, #28]
 80138a6:	685b      	ldr	r3, [r3, #4]
 80138a8:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80138aa:	697b      	ldr	r3, [r7, #20]
 80138ac:	78fa      	ldrb	r2, [r7, #3]
 80138ae:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80138b0:	697b      	ldr	r3, [r7, #20]
 80138b2:	78ba      	ldrb	r2, [r7, #2]
 80138b4:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80138b6:	697b      	ldr	r3, [r7, #20]
 80138b8:	2200      	movs	r2, #0
 80138ba:	711a      	strb	r2, [r3, #4]
 80138bc:	2200      	movs	r2, #0
 80138be:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80138c0:	697b      	ldr	r3, [r7, #20]
 80138c2:	2200      	movs	r2, #0
 80138c4:	719a      	strb	r2, [r3, #6]
 80138c6:	2200      	movs	r2, #0
 80138c8:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80138ca:	69fb      	ldr	r3, [r7, #28]
 80138cc:	685b      	ldr	r3, [r3, #4]
 80138ce:	f103 0008 	add.w	r0, r3, #8
 80138d2:	687b      	ldr	r3, [r7, #4]
 80138d4:	685b      	ldr	r3, [r3, #4]
 80138d6:	221c      	movs	r2, #28
 80138d8:	4619      	mov	r1, r3
 80138da:	f002 fb06 	bl	8015eea <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80138de:	69bb      	ldr	r3, [r7, #24]
 80138e0:	68db      	ldr	r3, [r3, #12]
 80138e2:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80138e4:	f107 030c 	add.w	r3, r7, #12
 80138e8:	4618      	mov	r0, r3
 80138ea:	f000 f825 	bl	8013938 <ip4_route>
 80138ee:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80138f0:	693b      	ldr	r3, [r7, #16]
 80138f2:	2b00      	cmp	r3, #0
 80138f4:	d011      	beq.n	801391a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80138f6:	697b      	ldr	r3, [r7, #20]
 80138f8:	2200      	movs	r2, #0
 80138fa:	709a      	strb	r2, [r3, #2]
 80138fc:	2200      	movs	r2, #0
 80138fe:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8013900:	f107 020c 	add.w	r2, r7, #12
 8013904:	693b      	ldr	r3, [r7, #16]
 8013906:	9302      	str	r3, [sp, #8]
 8013908:	2301      	movs	r3, #1
 801390a:	9301      	str	r3, [sp, #4]
 801390c:	2300      	movs	r3, #0
 801390e:	9300      	str	r3, [sp, #0]
 8013910:	23ff      	movs	r3, #255	@ 0xff
 8013912:	2100      	movs	r1, #0
 8013914:	69f8      	ldr	r0, [r7, #28]
 8013916:	f000 f9cd 	bl	8013cb4 <ip4_output_if>
  }
  pbuf_free(q);
 801391a:	69f8      	ldr	r0, [r7, #28]
 801391c:	f7f8 fb4c 	bl	800bfb8 <pbuf_free>
 8013920:	e000      	b.n	8013924 <icmp_send_response+0xc0>
    return;
 8013922:	bf00      	nop
}
 8013924:	3720      	adds	r7, #32
 8013926:	46bd      	mov	sp, r7
 8013928:	bd80      	pop	{r7, pc}
 801392a:	bf00      	nop
 801392c:	08020770 	.word	0x08020770
 8013930:	0802083c 	.word	0x0802083c
 8013934:	080207e0 	.word	0x080207e0

08013938 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8013938:	b480      	push	{r7}
 801393a:	b085      	sub	sp, #20
 801393c:	af00      	add	r7, sp, #0
 801393e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8013940:	4b33      	ldr	r3, [pc, #204]	@ (8013a10 <ip4_route+0xd8>)
 8013942:	681b      	ldr	r3, [r3, #0]
 8013944:	60fb      	str	r3, [r7, #12]
 8013946:	e036      	b.n	80139b6 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8013948:	68fb      	ldr	r3, [r7, #12]
 801394a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801394e:	f003 0301 	and.w	r3, r3, #1
 8013952:	b2db      	uxtb	r3, r3
 8013954:	2b00      	cmp	r3, #0
 8013956:	d02b      	beq.n	80139b0 <ip4_route+0x78>
 8013958:	68fb      	ldr	r3, [r7, #12]
 801395a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801395e:	089b      	lsrs	r3, r3, #2
 8013960:	f003 0301 	and.w	r3, r3, #1
 8013964:	b2db      	uxtb	r3, r3
 8013966:	2b00      	cmp	r3, #0
 8013968:	d022      	beq.n	80139b0 <ip4_route+0x78>
 801396a:	68fb      	ldr	r3, [r7, #12]
 801396c:	3304      	adds	r3, #4
 801396e:	681b      	ldr	r3, [r3, #0]
 8013970:	2b00      	cmp	r3, #0
 8013972:	d01d      	beq.n	80139b0 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8013974:	687b      	ldr	r3, [r7, #4]
 8013976:	681a      	ldr	r2, [r3, #0]
 8013978:	68fb      	ldr	r3, [r7, #12]
 801397a:	3304      	adds	r3, #4
 801397c:	681b      	ldr	r3, [r3, #0]
 801397e:	405a      	eors	r2, r3
 8013980:	68fb      	ldr	r3, [r7, #12]
 8013982:	3308      	adds	r3, #8
 8013984:	681b      	ldr	r3, [r3, #0]
 8013986:	4013      	ands	r3, r2
 8013988:	2b00      	cmp	r3, #0
 801398a:	d101      	bne.n	8013990 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801398c:	68fb      	ldr	r3, [r7, #12]
 801398e:	e038      	b.n	8013a02 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8013990:	68fb      	ldr	r3, [r7, #12]
 8013992:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013996:	f003 0302 	and.w	r3, r3, #2
 801399a:	2b00      	cmp	r3, #0
 801399c:	d108      	bne.n	80139b0 <ip4_route+0x78>
 801399e:	687b      	ldr	r3, [r7, #4]
 80139a0:	681a      	ldr	r2, [r3, #0]
 80139a2:	68fb      	ldr	r3, [r7, #12]
 80139a4:	330c      	adds	r3, #12
 80139a6:	681b      	ldr	r3, [r3, #0]
 80139a8:	429a      	cmp	r2, r3
 80139aa:	d101      	bne.n	80139b0 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80139ac:	68fb      	ldr	r3, [r7, #12]
 80139ae:	e028      	b.n	8013a02 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80139b0:	68fb      	ldr	r3, [r7, #12]
 80139b2:	681b      	ldr	r3, [r3, #0]
 80139b4:	60fb      	str	r3, [r7, #12]
 80139b6:	68fb      	ldr	r3, [r7, #12]
 80139b8:	2b00      	cmp	r3, #0
 80139ba:	d1c5      	bne.n	8013948 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80139bc:	4b15      	ldr	r3, [pc, #84]	@ (8013a14 <ip4_route+0xdc>)
 80139be:	681b      	ldr	r3, [r3, #0]
 80139c0:	2b00      	cmp	r3, #0
 80139c2:	d01a      	beq.n	80139fa <ip4_route+0xc2>
 80139c4:	4b13      	ldr	r3, [pc, #76]	@ (8013a14 <ip4_route+0xdc>)
 80139c6:	681b      	ldr	r3, [r3, #0]
 80139c8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80139cc:	f003 0301 	and.w	r3, r3, #1
 80139d0:	2b00      	cmp	r3, #0
 80139d2:	d012      	beq.n	80139fa <ip4_route+0xc2>
 80139d4:	4b0f      	ldr	r3, [pc, #60]	@ (8013a14 <ip4_route+0xdc>)
 80139d6:	681b      	ldr	r3, [r3, #0]
 80139d8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80139dc:	f003 0304 	and.w	r3, r3, #4
 80139e0:	2b00      	cmp	r3, #0
 80139e2:	d00a      	beq.n	80139fa <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80139e4:	4b0b      	ldr	r3, [pc, #44]	@ (8013a14 <ip4_route+0xdc>)
 80139e6:	681b      	ldr	r3, [r3, #0]
 80139e8:	3304      	adds	r3, #4
 80139ea:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80139ec:	2b00      	cmp	r3, #0
 80139ee:	d004      	beq.n	80139fa <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80139f0:	687b      	ldr	r3, [r7, #4]
 80139f2:	681b      	ldr	r3, [r3, #0]
 80139f4:	b2db      	uxtb	r3, r3
 80139f6:	2b7f      	cmp	r3, #127	@ 0x7f
 80139f8:	d101      	bne.n	80139fe <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80139fa:	2300      	movs	r3, #0
 80139fc:	e001      	b.n	8013a02 <ip4_route+0xca>
  }

  return netif_default;
 80139fe:	4b05      	ldr	r3, [pc, #20]	@ (8013a14 <ip4_route+0xdc>)
 8013a00:	681b      	ldr	r3, [r3, #0]
}
 8013a02:	4618      	mov	r0, r3
 8013a04:	3714      	adds	r7, #20
 8013a06:	46bd      	mov	sp, r7
 8013a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a0c:	4770      	bx	lr
 8013a0e:	bf00      	nop
 8013a10:	20009238 	.word	0x20009238
 8013a14:	2000923c 	.word	0x2000923c

08013a18 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8013a18:	b580      	push	{r7, lr}
 8013a1a:	b082      	sub	sp, #8
 8013a1c:	af00      	add	r7, sp, #0
 8013a1e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013a26:	f003 0301 	and.w	r3, r3, #1
 8013a2a:	b2db      	uxtb	r3, r3
 8013a2c:	2b00      	cmp	r3, #0
 8013a2e:	d016      	beq.n	8013a5e <ip4_input_accept+0x46>
 8013a30:	687b      	ldr	r3, [r7, #4]
 8013a32:	3304      	adds	r3, #4
 8013a34:	681b      	ldr	r3, [r3, #0]
 8013a36:	2b00      	cmp	r3, #0
 8013a38:	d011      	beq.n	8013a5e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8013a3a:	4b0b      	ldr	r3, [pc, #44]	@ (8013a68 <ip4_input_accept+0x50>)
 8013a3c:	695a      	ldr	r2, [r3, #20]
 8013a3e:	687b      	ldr	r3, [r7, #4]
 8013a40:	3304      	adds	r3, #4
 8013a42:	681b      	ldr	r3, [r3, #0]
 8013a44:	429a      	cmp	r2, r3
 8013a46:	d008      	beq.n	8013a5a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8013a48:	4b07      	ldr	r3, [pc, #28]	@ (8013a68 <ip4_input_accept+0x50>)
 8013a4a:	695b      	ldr	r3, [r3, #20]
 8013a4c:	6879      	ldr	r1, [r7, #4]
 8013a4e:	4618      	mov	r0, r3
 8013a50:	f000 fa08 	bl	8013e64 <ip4_addr_isbroadcast_u32>
 8013a54:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8013a56:	2b00      	cmp	r3, #0
 8013a58:	d001      	beq.n	8013a5e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8013a5a:	2301      	movs	r3, #1
 8013a5c:	e000      	b.n	8013a60 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8013a5e:	2300      	movs	r3, #0
}
 8013a60:	4618      	mov	r0, r3
 8013a62:	3708      	adds	r7, #8
 8013a64:	46bd      	mov	sp, r7
 8013a66:	bd80      	pop	{r7, pc}
 8013a68:	20005f04 	.word	0x20005f04

08013a6c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8013a6c:	b580      	push	{r7, lr}
 8013a6e:	b086      	sub	sp, #24
 8013a70:	af00      	add	r7, sp, #0
 8013a72:	6078      	str	r0, [r7, #4]
 8013a74:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8013a76:	687b      	ldr	r3, [r7, #4]
 8013a78:	685b      	ldr	r3, [r3, #4]
 8013a7a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8013a7c:	697b      	ldr	r3, [r7, #20]
 8013a7e:	781b      	ldrb	r3, [r3, #0]
 8013a80:	091b      	lsrs	r3, r3, #4
 8013a82:	b2db      	uxtb	r3, r3
 8013a84:	2b04      	cmp	r3, #4
 8013a86:	d004      	beq.n	8013a92 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8013a88:	6878      	ldr	r0, [r7, #4]
 8013a8a:	f7f8 fa95 	bl	800bfb8 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8013a8e:	2300      	movs	r3, #0
 8013a90:	e107      	b.n	8013ca2 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8013a92:	697b      	ldr	r3, [r7, #20]
 8013a94:	781b      	ldrb	r3, [r3, #0]
 8013a96:	f003 030f 	and.w	r3, r3, #15
 8013a9a:	b2db      	uxtb	r3, r3
 8013a9c:	009b      	lsls	r3, r3, #2
 8013a9e:	b2db      	uxtb	r3, r3
 8013aa0:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8013aa2:	697b      	ldr	r3, [r7, #20]
 8013aa4:	885b      	ldrh	r3, [r3, #2]
 8013aa6:	b29b      	uxth	r3, r3
 8013aa8:	4618      	mov	r0, r3
 8013aaa:	f7f6 fc5d 	bl	800a368 <lwip_htons>
 8013aae:	4603      	mov	r3, r0
 8013ab0:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8013ab2:	687b      	ldr	r3, [r7, #4]
 8013ab4:	891b      	ldrh	r3, [r3, #8]
 8013ab6:	89ba      	ldrh	r2, [r7, #12]
 8013ab8:	429a      	cmp	r2, r3
 8013aba:	d204      	bcs.n	8013ac6 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8013abc:	89bb      	ldrh	r3, [r7, #12]
 8013abe:	4619      	mov	r1, r3
 8013ac0:	6878      	ldr	r0, [r7, #4]
 8013ac2:	f7f8 f8f3 	bl	800bcac <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8013ac6:	687b      	ldr	r3, [r7, #4]
 8013ac8:	895b      	ldrh	r3, [r3, #10]
 8013aca:	89fa      	ldrh	r2, [r7, #14]
 8013acc:	429a      	cmp	r2, r3
 8013ace:	d807      	bhi.n	8013ae0 <ip4_input+0x74>
 8013ad0:	687b      	ldr	r3, [r7, #4]
 8013ad2:	891b      	ldrh	r3, [r3, #8]
 8013ad4:	89ba      	ldrh	r2, [r7, #12]
 8013ad6:	429a      	cmp	r2, r3
 8013ad8:	d802      	bhi.n	8013ae0 <ip4_input+0x74>
 8013ada:	89fb      	ldrh	r3, [r7, #14]
 8013adc:	2b13      	cmp	r3, #19
 8013ade:	d804      	bhi.n	8013aea <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8013ae0:	6878      	ldr	r0, [r7, #4]
 8013ae2:	f7f8 fa69 	bl	800bfb8 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8013ae6:	2300      	movs	r3, #0
 8013ae8:	e0db      	b.n	8013ca2 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8013aea:	697b      	ldr	r3, [r7, #20]
 8013aec:	691b      	ldr	r3, [r3, #16]
 8013aee:	4a6f      	ldr	r2, [pc, #444]	@ (8013cac <ip4_input+0x240>)
 8013af0:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8013af2:	697b      	ldr	r3, [r7, #20]
 8013af4:	68db      	ldr	r3, [r3, #12]
 8013af6:	4a6d      	ldr	r2, [pc, #436]	@ (8013cac <ip4_input+0x240>)
 8013af8:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013afa:	4b6c      	ldr	r3, [pc, #432]	@ (8013cac <ip4_input+0x240>)
 8013afc:	695b      	ldr	r3, [r3, #20]
 8013afe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8013b02:	2be0      	cmp	r3, #224	@ 0xe0
 8013b04:	d112      	bne.n	8013b2c <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8013b06:	683b      	ldr	r3, [r7, #0]
 8013b08:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013b0c:	f003 0301 	and.w	r3, r3, #1
 8013b10:	b2db      	uxtb	r3, r3
 8013b12:	2b00      	cmp	r3, #0
 8013b14:	d007      	beq.n	8013b26 <ip4_input+0xba>
 8013b16:	683b      	ldr	r3, [r7, #0]
 8013b18:	3304      	adds	r3, #4
 8013b1a:	681b      	ldr	r3, [r3, #0]
 8013b1c:	2b00      	cmp	r3, #0
 8013b1e:	d002      	beq.n	8013b26 <ip4_input+0xba>
      netif = inp;
 8013b20:	683b      	ldr	r3, [r7, #0]
 8013b22:	613b      	str	r3, [r7, #16]
 8013b24:	e02a      	b.n	8013b7c <ip4_input+0x110>
    } else {
      netif = NULL;
 8013b26:	2300      	movs	r3, #0
 8013b28:	613b      	str	r3, [r7, #16]
 8013b2a:	e027      	b.n	8013b7c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8013b2c:	6838      	ldr	r0, [r7, #0]
 8013b2e:	f7ff ff73 	bl	8013a18 <ip4_input_accept>
 8013b32:	4603      	mov	r3, r0
 8013b34:	2b00      	cmp	r3, #0
 8013b36:	d002      	beq.n	8013b3e <ip4_input+0xd2>
      netif = inp;
 8013b38:	683b      	ldr	r3, [r7, #0]
 8013b3a:	613b      	str	r3, [r7, #16]
 8013b3c:	e01e      	b.n	8013b7c <ip4_input+0x110>
    } else {
      netif = NULL;
 8013b3e:	2300      	movs	r3, #0
 8013b40:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8013b42:	4b5a      	ldr	r3, [pc, #360]	@ (8013cac <ip4_input+0x240>)
 8013b44:	695b      	ldr	r3, [r3, #20]
 8013b46:	b2db      	uxtb	r3, r3
 8013b48:	2b7f      	cmp	r3, #127	@ 0x7f
 8013b4a:	d017      	beq.n	8013b7c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8013b4c:	4b58      	ldr	r3, [pc, #352]	@ (8013cb0 <ip4_input+0x244>)
 8013b4e:	681b      	ldr	r3, [r3, #0]
 8013b50:	613b      	str	r3, [r7, #16]
 8013b52:	e00e      	b.n	8013b72 <ip4_input+0x106>
          if (netif == inp) {
 8013b54:	693a      	ldr	r2, [r7, #16]
 8013b56:	683b      	ldr	r3, [r7, #0]
 8013b58:	429a      	cmp	r2, r3
 8013b5a:	d006      	beq.n	8013b6a <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8013b5c:	6938      	ldr	r0, [r7, #16]
 8013b5e:	f7ff ff5b 	bl	8013a18 <ip4_input_accept>
 8013b62:	4603      	mov	r3, r0
 8013b64:	2b00      	cmp	r3, #0
 8013b66:	d108      	bne.n	8013b7a <ip4_input+0x10e>
 8013b68:	e000      	b.n	8013b6c <ip4_input+0x100>
            continue;
 8013b6a:	bf00      	nop
        NETIF_FOREACH(netif) {
 8013b6c:	693b      	ldr	r3, [r7, #16]
 8013b6e:	681b      	ldr	r3, [r3, #0]
 8013b70:	613b      	str	r3, [r7, #16]
 8013b72:	693b      	ldr	r3, [r7, #16]
 8013b74:	2b00      	cmp	r3, #0
 8013b76:	d1ed      	bne.n	8013b54 <ip4_input+0xe8>
 8013b78:	e000      	b.n	8013b7c <ip4_input+0x110>
            break;
 8013b7a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8013b7c:	4b4b      	ldr	r3, [pc, #300]	@ (8013cac <ip4_input+0x240>)
 8013b7e:	691b      	ldr	r3, [r3, #16]
 8013b80:	6839      	ldr	r1, [r7, #0]
 8013b82:	4618      	mov	r0, r3
 8013b84:	f000 f96e 	bl	8013e64 <ip4_addr_isbroadcast_u32>
 8013b88:	4603      	mov	r3, r0
 8013b8a:	2b00      	cmp	r3, #0
 8013b8c:	d105      	bne.n	8013b9a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8013b8e:	4b47      	ldr	r3, [pc, #284]	@ (8013cac <ip4_input+0x240>)
 8013b90:	691b      	ldr	r3, [r3, #16]
 8013b92:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8013b96:	2be0      	cmp	r3, #224	@ 0xe0
 8013b98:	d104      	bne.n	8013ba4 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8013b9a:	6878      	ldr	r0, [r7, #4]
 8013b9c:	f7f8 fa0c 	bl	800bfb8 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8013ba0:	2300      	movs	r3, #0
 8013ba2:	e07e      	b.n	8013ca2 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8013ba4:	693b      	ldr	r3, [r7, #16]
 8013ba6:	2b00      	cmp	r3, #0
 8013ba8:	d104      	bne.n	8013bb4 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8013baa:	6878      	ldr	r0, [r7, #4]
 8013bac:	f7f8 fa04 	bl	800bfb8 <pbuf_free>
    return ERR_OK;
 8013bb0:	2300      	movs	r3, #0
 8013bb2:	e076      	b.n	8013ca2 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8013bb4:	697b      	ldr	r3, [r7, #20]
 8013bb6:	88db      	ldrh	r3, [r3, #6]
 8013bb8:	b29b      	uxth	r3, r3
 8013bba:	461a      	mov	r2, r3
 8013bbc:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8013bc0:	4013      	ands	r3, r2
 8013bc2:	2b00      	cmp	r3, #0
 8013bc4:	d00b      	beq.n	8013bde <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8013bc6:	6878      	ldr	r0, [r7, #4]
 8013bc8:	f000 fc92 	bl	80144f0 <ip4_reass>
 8013bcc:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8013bce:	687b      	ldr	r3, [r7, #4]
 8013bd0:	2b00      	cmp	r3, #0
 8013bd2:	d101      	bne.n	8013bd8 <ip4_input+0x16c>
      return ERR_OK;
 8013bd4:	2300      	movs	r3, #0
 8013bd6:	e064      	b.n	8013ca2 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8013bd8:	687b      	ldr	r3, [r7, #4]
 8013bda:	685b      	ldr	r3, [r3, #4]
 8013bdc:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8013bde:	4a33      	ldr	r2, [pc, #204]	@ (8013cac <ip4_input+0x240>)
 8013be0:	693b      	ldr	r3, [r7, #16]
 8013be2:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8013be4:	4a31      	ldr	r2, [pc, #196]	@ (8013cac <ip4_input+0x240>)
 8013be6:	683b      	ldr	r3, [r7, #0]
 8013be8:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8013bea:	4a30      	ldr	r2, [pc, #192]	@ (8013cac <ip4_input+0x240>)
 8013bec:	697b      	ldr	r3, [r7, #20]
 8013bee:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8013bf0:	697b      	ldr	r3, [r7, #20]
 8013bf2:	781b      	ldrb	r3, [r3, #0]
 8013bf4:	f003 030f 	and.w	r3, r3, #15
 8013bf8:	b2db      	uxtb	r3, r3
 8013bfa:	009b      	lsls	r3, r3, #2
 8013bfc:	b2db      	uxtb	r3, r3
 8013bfe:	461a      	mov	r2, r3
 8013c00:	4b2a      	ldr	r3, [pc, #168]	@ (8013cac <ip4_input+0x240>)
 8013c02:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8013c04:	89fb      	ldrh	r3, [r7, #14]
 8013c06:	4619      	mov	r1, r3
 8013c08:	6878      	ldr	r0, [r7, #4]
 8013c0a:	f7f8 f94f 	bl	800beac <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8013c0e:	697b      	ldr	r3, [r7, #20]
 8013c10:	7a5b      	ldrb	r3, [r3, #9]
 8013c12:	2b11      	cmp	r3, #17
 8013c14:	d006      	beq.n	8013c24 <ip4_input+0x1b8>
 8013c16:	2b11      	cmp	r3, #17
 8013c18:	dc13      	bgt.n	8013c42 <ip4_input+0x1d6>
 8013c1a:	2b01      	cmp	r3, #1
 8013c1c:	d00c      	beq.n	8013c38 <ip4_input+0x1cc>
 8013c1e:	2b06      	cmp	r3, #6
 8013c20:	d005      	beq.n	8013c2e <ip4_input+0x1c2>
 8013c22:	e00e      	b.n	8013c42 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8013c24:	6839      	ldr	r1, [r7, #0]
 8013c26:	6878      	ldr	r0, [r7, #4]
 8013c28:	f7fe f90e 	bl	8011e48 <udp_input>
        break;
 8013c2c:	e026      	b.n	8013c7c <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8013c2e:	6839      	ldr	r1, [r7, #0]
 8013c30:	6878      	ldr	r0, [r7, #4]
 8013c32:	f7fa f955 	bl	800dee0 <tcp_input>
        break;
 8013c36:	e021      	b.n	8013c7c <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8013c38:	6839      	ldr	r1, [r7, #0]
 8013c3a:	6878      	ldr	r0, [r7, #4]
 8013c3c:	f7ff fcee 	bl	801361c <icmp_input>
        break;
 8013c40:	e01c      	b.n	8013c7c <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8013c42:	4b1a      	ldr	r3, [pc, #104]	@ (8013cac <ip4_input+0x240>)
 8013c44:	695b      	ldr	r3, [r3, #20]
 8013c46:	6939      	ldr	r1, [r7, #16]
 8013c48:	4618      	mov	r0, r3
 8013c4a:	f000 f90b 	bl	8013e64 <ip4_addr_isbroadcast_u32>
 8013c4e:	4603      	mov	r3, r0
 8013c50:	2b00      	cmp	r3, #0
 8013c52:	d10f      	bne.n	8013c74 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013c54:	4b15      	ldr	r3, [pc, #84]	@ (8013cac <ip4_input+0x240>)
 8013c56:	695b      	ldr	r3, [r3, #20]
 8013c58:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8013c5c:	2be0      	cmp	r3, #224	@ 0xe0
 8013c5e:	d009      	beq.n	8013c74 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8013c60:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8013c64:	4619      	mov	r1, r3
 8013c66:	6878      	ldr	r0, [r7, #4]
 8013c68:	f7f8 f993 	bl	800bf92 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8013c6c:	2102      	movs	r1, #2
 8013c6e:	6878      	ldr	r0, [r7, #4]
 8013c70:	f7ff fdd8 	bl	8013824 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8013c74:	6878      	ldr	r0, [r7, #4]
 8013c76:	f7f8 f99f 	bl	800bfb8 <pbuf_free>
        break;
 8013c7a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8013c7c:	4b0b      	ldr	r3, [pc, #44]	@ (8013cac <ip4_input+0x240>)
 8013c7e:	2200      	movs	r2, #0
 8013c80:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8013c82:	4b0a      	ldr	r3, [pc, #40]	@ (8013cac <ip4_input+0x240>)
 8013c84:	2200      	movs	r2, #0
 8013c86:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8013c88:	4b08      	ldr	r3, [pc, #32]	@ (8013cac <ip4_input+0x240>)
 8013c8a:	2200      	movs	r2, #0
 8013c8c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8013c8e:	4b07      	ldr	r3, [pc, #28]	@ (8013cac <ip4_input+0x240>)
 8013c90:	2200      	movs	r2, #0
 8013c92:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8013c94:	4b05      	ldr	r3, [pc, #20]	@ (8013cac <ip4_input+0x240>)
 8013c96:	2200      	movs	r2, #0
 8013c98:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8013c9a:	4b04      	ldr	r3, [pc, #16]	@ (8013cac <ip4_input+0x240>)
 8013c9c:	2200      	movs	r2, #0
 8013c9e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8013ca0:	2300      	movs	r3, #0
}
 8013ca2:	4618      	mov	r0, r3
 8013ca4:	3718      	adds	r7, #24
 8013ca6:	46bd      	mov	sp, r7
 8013ca8:	bd80      	pop	{r7, pc}
 8013caa:	bf00      	nop
 8013cac:	20005f04 	.word	0x20005f04
 8013cb0:	20009238 	.word	0x20009238

08013cb4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8013cb4:	b580      	push	{r7, lr}
 8013cb6:	b08a      	sub	sp, #40	@ 0x28
 8013cb8:	af04      	add	r7, sp, #16
 8013cba:	60f8      	str	r0, [r7, #12]
 8013cbc:	60b9      	str	r1, [r7, #8]
 8013cbe:	607a      	str	r2, [r7, #4]
 8013cc0:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8013cc2:	68bb      	ldr	r3, [r7, #8]
 8013cc4:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8013cc6:	687b      	ldr	r3, [r7, #4]
 8013cc8:	2b00      	cmp	r3, #0
 8013cca:	d009      	beq.n	8013ce0 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8013ccc:	68bb      	ldr	r3, [r7, #8]
 8013cce:	2b00      	cmp	r3, #0
 8013cd0:	d003      	beq.n	8013cda <ip4_output_if+0x26>
 8013cd2:	68bb      	ldr	r3, [r7, #8]
 8013cd4:	681b      	ldr	r3, [r3, #0]
 8013cd6:	2b00      	cmp	r3, #0
 8013cd8:	d102      	bne.n	8013ce0 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8013cda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013cdc:	3304      	adds	r3, #4
 8013cde:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8013ce0:	78fa      	ldrb	r2, [r7, #3]
 8013ce2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013ce4:	9302      	str	r3, [sp, #8]
 8013ce6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8013cea:	9301      	str	r3, [sp, #4]
 8013cec:	f897 3020 	ldrb.w	r3, [r7, #32]
 8013cf0:	9300      	str	r3, [sp, #0]
 8013cf2:	4613      	mov	r3, r2
 8013cf4:	687a      	ldr	r2, [r7, #4]
 8013cf6:	6979      	ldr	r1, [r7, #20]
 8013cf8:	68f8      	ldr	r0, [r7, #12]
 8013cfa:	f000 f805 	bl	8013d08 <ip4_output_if_src>
 8013cfe:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8013d00:	4618      	mov	r0, r3
 8013d02:	3718      	adds	r7, #24
 8013d04:	46bd      	mov	sp, r7
 8013d06:	bd80      	pop	{r7, pc}

08013d08 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8013d08:	b580      	push	{r7, lr}
 8013d0a:	b088      	sub	sp, #32
 8013d0c:	af00      	add	r7, sp, #0
 8013d0e:	60f8      	str	r0, [r7, #12]
 8013d10:	60b9      	str	r1, [r7, #8]
 8013d12:	607a      	str	r2, [r7, #4]
 8013d14:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8013d16:	68fb      	ldr	r3, [r7, #12]
 8013d18:	7b9b      	ldrb	r3, [r3, #14]
 8013d1a:	2b01      	cmp	r3, #1
 8013d1c:	d006      	beq.n	8013d2c <ip4_output_if_src+0x24>
 8013d1e:	4b4b      	ldr	r3, [pc, #300]	@ (8013e4c <ip4_output_if_src+0x144>)
 8013d20:	f44f 7255 	mov.w	r2, #852	@ 0x354
 8013d24:	494a      	ldr	r1, [pc, #296]	@ (8013e50 <ip4_output_if_src+0x148>)
 8013d26:	484b      	ldr	r0, [pc, #300]	@ (8013e54 <ip4_output_if_src+0x14c>)
 8013d28:	f001 ff88 	bl	8015c3c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8013d2c:	687b      	ldr	r3, [r7, #4]
 8013d2e:	2b00      	cmp	r3, #0
 8013d30:	d060      	beq.n	8013df4 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8013d32:	2314      	movs	r3, #20
 8013d34:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8013d36:	2114      	movs	r1, #20
 8013d38:	68f8      	ldr	r0, [r7, #12]
 8013d3a:	f7f8 f8a7 	bl	800be8c <pbuf_add_header>
 8013d3e:	4603      	mov	r3, r0
 8013d40:	2b00      	cmp	r3, #0
 8013d42:	d002      	beq.n	8013d4a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8013d44:	f06f 0301 	mvn.w	r3, #1
 8013d48:	e07c      	b.n	8013e44 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8013d4a:	68fb      	ldr	r3, [r7, #12]
 8013d4c:	685b      	ldr	r3, [r3, #4]
 8013d4e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8013d50:	68fb      	ldr	r3, [r7, #12]
 8013d52:	895b      	ldrh	r3, [r3, #10]
 8013d54:	2b13      	cmp	r3, #19
 8013d56:	d806      	bhi.n	8013d66 <ip4_output_if_src+0x5e>
 8013d58:	4b3c      	ldr	r3, [pc, #240]	@ (8013e4c <ip4_output_if_src+0x144>)
 8013d5a:	f44f 7262 	mov.w	r2, #904	@ 0x388
 8013d5e:	493e      	ldr	r1, [pc, #248]	@ (8013e58 <ip4_output_if_src+0x150>)
 8013d60:	483c      	ldr	r0, [pc, #240]	@ (8013e54 <ip4_output_if_src+0x14c>)
 8013d62:	f001 ff6b 	bl	8015c3c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8013d66:	69fb      	ldr	r3, [r7, #28]
 8013d68:	78fa      	ldrb	r2, [r7, #3]
 8013d6a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8013d6c:	69fb      	ldr	r3, [r7, #28]
 8013d6e:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8013d72:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	681a      	ldr	r2, [r3, #0]
 8013d78:	69fb      	ldr	r3, [r7, #28]
 8013d7a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8013d7c:	8b7b      	ldrh	r3, [r7, #26]
 8013d7e:	089b      	lsrs	r3, r3, #2
 8013d80:	b29b      	uxth	r3, r3
 8013d82:	b2db      	uxtb	r3, r3
 8013d84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013d88:	b2da      	uxtb	r2, r3
 8013d8a:	69fb      	ldr	r3, [r7, #28]
 8013d8c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8013d8e:	69fb      	ldr	r3, [r7, #28]
 8013d90:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8013d94:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8013d96:	68fb      	ldr	r3, [r7, #12]
 8013d98:	891b      	ldrh	r3, [r3, #8]
 8013d9a:	4618      	mov	r0, r3
 8013d9c:	f7f6 fae4 	bl	800a368 <lwip_htons>
 8013da0:	4603      	mov	r3, r0
 8013da2:	461a      	mov	r2, r3
 8013da4:	69fb      	ldr	r3, [r7, #28]
 8013da6:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8013da8:	69fb      	ldr	r3, [r7, #28]
 8013daa:	2200      	movs	r2, #0
 8013dac:	719a      	strb	r2, [r3, #6]
 8013dae:	2200      	movs	r2, #0
 8013db0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8013db2:	4b2a      	ldr	r3, [pc, #168]	@ (8013e5c <ip4_output_if_src+0x154>)
 8013db4:	881b      	ldrh	r3, [r3, #0]
 8013db6:	4618      	mov	r0, r3
 8013db8:	f7f6 fad6 	bl	800a368 <lwip_htons>
 8013dbc:	4603      	mov	r3, r0
 8013dbe:	461a      	mov	r2, r3
 8013dc0:	69fb      	ldr	r3, [r7, #28]
 8013dc2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8013dc4:	4b25      	ldr	r3, [pc, #148]	@ (8013e5c <ip4_output_if_src+0x154>)
 8013dc6:	881b      	ldrh	r3, [r3, #0]
 8013dc8:	3301      	adds	r3, #1
 8013dca:	b29a      	uxth	r2, r3
 8013dcc:	4b23      	ldr	r3, [pc, #140]	@ (8013e5c <ip4_output_if_src+0x154>)
 8013dce:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8013dd0:	68bb      	ldr	r3, [r7, #8]
 8013dd2:	2b00      	cmp	r3, #0
 8013dd4:	d104      	bne.n	8013de0 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8013dd6:	4b22      	ldr	r3, [pc, #136]	@ (8013e60 <ip4_output_if_src+0x158>)
 8013dd8:	681a      	ldr	r2, [r3, #0]
 8013dda:	69fb      	ldr	r3, [r7, #28]
 8013ddc:	60da      	str	r2, [r3, #12]
 8013dde:	e003      	b.n	8013de8 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8013de0:	68bb      	ldr	r3, [r7, #8]
 8013de2:	681a      	ldr	r2, [r3, #0]
 8013de4:	69fb      	ldr	r3, [r7, #28]
 8013de6:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8013de8:	69fb      	ldr	r3, [r7, #28]
 8013dea:	2200      	movs	r2, #0
 8013dec:	729a      	strb	r2, [r3, #10]
 8013dee:	2200      	movs	r2, #0
 8013df0:	72da      	strb	r2, [r3, #11]
 8013df2:	e00f      	b.n	8013e14 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8013df4:	68fb      	ldr	r3, [r7, #12]
 8013df6:	895b      	ldrh	r3, [r3, #10]
 8013df8:	2b13      	cmp	r3, #19
 8013dfa:	d802      	bhi.n	8013e02 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8013dfc:	f06f 0301 	mvn.w	r3, #1
 8013e00:	e020      	b.n	8013e44 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8013e02:	68fb      	ldr	r3, [r7, #12]
 8013e04:	685b      	ldr	r3, [r3, #4]
 8013e06:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8013e08:	69fb      	ldr	r3, [r7, #28]
 8013e0a:	691b      	ldr	r3, [r3, #16]
 8013e0c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8013e0e:	f107 0314 	add.w	r3, r7, #20
 8013e12:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8013e14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013e16:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8013e18:	2b00      	cmp	r3, #0
 8013e1a:	d00c      	beq.n	8013e36 <ip4_output_if_src+0x12e>
 8013e1c:	68fb      	ldr	r3, [r7, #12]
 8013e1e:	891a      	ldrh	r2, [r3, #8]
 8013e20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013e22:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8013e24:	429a      	cmp	r2, r3
 8013e26:	d906      	bls.n	8013e36 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8013e28:	687a      	ldr	r2, [r7, #4]
 8013e2a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8013e2c:	68f8      	ldr	r0, [r7, #12]
 8013e2e:	f000 fd53 	bl	80148d8 <ip4_frag>
 8013e32:	4603      	mov	r3, r0
 8013e34:	e006      	b.n	8013e44 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8013e36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013e38:	695b      	ldr	r3, [r3, #20]
 8013e3a:	687a      	ldr	r2, [r7, #4]
 8013e3c:	68f9      	ldr	r1, [r7, #12]
 8013e3e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013e40:	4798      	blx	r3
 8013e42:	4603      	mov	r3, r0
}
 8013e44:	4618      	mov	r0, r3
 8013e46:	3720      	adds	r7, #32
 8013e48:	46bd      	mov	sp, r7
 8013e4a:	bd80      	pop	{r7, pc}
 8013e4c:	08020868 	.word	0x08020868
 8013e50:	0802089c 	.word	0x0802089c
 8013e54:	080208a8 	.word	0x080208a8
 8013e58:	080208d0 	.word	0x080208d0
 8013e5c:	20009396 	.word	0x20009396
 8013e60:	08020cb8 	.word	0x08020cb8

08013e64 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8013e64:	b480      	push	{r7}
 8013e66:	b085      	sub	sp, #20
 8013e68:	af00      	add	r7, sp, #0
 8013e6a:	6078      	str	r0, [r7, #4]
 8013e6c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8013e6e:	687b      	ldr	r3, [r7, #4]
 8013e70:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8013e72:	687b      	ldr	r3, [r7, #4]
 8013e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013e78:	d002      	beq.n	8013e80 <ip4_addr_isbroadcast_u32+0x1c>
 8013e7a:	687b      	ldr	r3, [r7, #4]
 8013e7c:	2b00      	cmp	r3, #0
 8013e7e:	d101      	bne.n	8013e84 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8013e80:	2301      	movs	r3, #1
 8013e82:	e02a      	b.n	8013eda <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8013e84:	683b      	ldr	r3, [r7, #0]
 8013e86:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013e8a:	f003 0302 	and.w	r3, r3, #2
 8013e8e:	2b00      	cmp	r3, #0
 8013e90:	d101      	bne.n	8013e96 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8013e92:	2300      	movs	r3, #0
 8013e94:	e021      	b.n	8013eda <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8013e96:	683b      	ldr	r3, [r7, #0]
 8013e98:	3304      	adds	r3, #4
 8013e9a:	681b      	ldr	r3, [r3, #0]
 8013e9c:	687a      	ldr	r2, [r7, #4]
 8013e9e:	429a      	cmp	r2, r3
 8013ea0:	d101      	bne.n	8013ea6 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8013ea2:	2300      	movs	r3, #0
 8013ea4:	e019      	b.n	8013eda <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8013ea6:	68fa      	ldr	r2, [r7, #12]
 8013ea8:	683b      	ldr	r3, [r7, #0]
 8013eaa:	3304      	adds	r3, #4
 8013eac:	681b      	ldr	r3, [r3, #0]
 8013eae:	405a      	eors	r2, r3
 8013eb0:	683b      	ldr	r3, [r7, #0]
 8013eb2:	3308      	adds	r3, #8
 8013eb4:	681b      	ldr	r3, [r3, #0]
 8013eb6:	4013      	ands	r3, r2
 8013eb8:	2b00      	cmp	r3, #0
 8013eba:	d10d      	bne.n	8013ed8 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8013ebc:	683b      	ldr	r3, [r7, #0]
 8013ebe:	3308      	adds	r3, #8
 8013ec0:	681b      	ldr	r3, [r3, #0]
 8013ec2:	43da      	mvns	r2, r3
 8013ec4:	687b      	ldr	r3, [r7, #4]
 8013ec6:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8013ec8:	683b      	ldr	r3, [r7, #0]
 8013eca:	3308      	adds	r3, #8
 8013ecc:	681b      	ldr	r3, [r3, #0]
 8013ece:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8013ed0:	429a      	cmp	r2, r3
 8013ed2:	d101      	bne.n	8013ed8 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8013ed4:	2301      	movs	r3, #1
 8013ed6:	e000      	b.n	8013eda <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8013ed8:	2300      	movs	r3, #0
  }
}
 8013eda:	4618      	mov	r0, r3
 8013edc:	3714      	adds	r7, #20
 8013ede:	46bd      	mov	sp, r7
 8013ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ee4:	4770      	bx	lr
	...

08013ee8 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8013ee8:	b580      	push	{r7, lr}
 8013eea:	b084      	sub	sp, #16
 8013eec:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8013eee:	2300      	movs	r3, #0
 8013ef0:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8013ef2:	4b12      	ldr	r3, [pc, #72]	@ (8013f3c <ip_reass_tmr+0x54>)
 8013ef4:	681b      	ldr	r3, [r3, #0]
 8013ef6:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8013ef8:	e018      	b.n	8013f2c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8013efa:	68fb      	ldr	r3, [r7, #12]
 8013efc:	7fdb      	ldrb	r3, [r3, #31]
 8013efe:	2b00      	cmp	r3, #0
 8013f00:	d00b      	beq.n	8013f1a <ip_reass_tmr+0x32>
      r->timer--;
 8013f02:	68fb      	ldr	r3, [r7, #12]
 8013f04:	7fdb      	ldrb	r3, [r3, #31]
 8013f06:	3b01      	subs	r3, #1
 8013f08:	b2da      	uxtb	r2, r3
 8013f0a:	68fb      	ldr	r3, [r7, #12]
 8013f0c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8013f0e:	68fb      	ldr	r3, [r7, #12]
 8013f10:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8013f12:	68fb      	ldr	r3, [r7, #12]
 8013f14:	681b      	ldr	r3, [r3, #0]
 8013f16:	60fb      	str	r3, [r7, #12]
 8013f18:	e008      	b.n	8013f2c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8013f1a:	68fb      	ldr	r3, [r7, #12]
 8013f1c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8013f1e:	68fb      	ldr	r3, [r7, #12]
 8013f20:	681b      	ldr	r3, [r3, #0]
 8013f22:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8013f24:	68b9      	ldr	r1, [r7, #8]
 8013f26:	6878      	ldr	r0, [r7, #4]
 8013f28:	f000 f80a 	bl	8013f40 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8013f2c:	68fb      	ldr	r3, [r7, #12]
 8013f2e:	2b00      	cmp	r3, #0
 8013f30:	d1e3      	bne.n	8013efa <ip_reass_tmr+0x12>
    }
  }
}
 8013f32:	bf00      	nop
 8013f34:	bf00      	nop
 8013f36:	3710      	adds	r7, #16
 8013f38:	46bd      	mov	sp, r7
 8013f3a:	bd80      	pop	{r7, pc}
 8013f3c:	20009398 	.word	0x20009398

08013f40 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8013f40:	b580      	push	{r7, lr}
 8013f42:	b088      	sub	sp, #32
 8013f44:	af00      	add	r7, sp, #0
 8013f46:	6078      	str	r0, [r7, #4]
 8013f48:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8013f4a:	2300      	movs	r3, #0
 8013f4c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8013f4e:	683a      	ldr	r2, [r7, #0]
 8013f50:	687b      	ldr	r3, [r7, #4]
 8013f52:	429a      	cmp	r2, r3
 8013f54:	d105      	bne.n	8013f62 <ip_reass_free_complete_datagram+0x22>
 8013f56:	4b45      	ldr	r3, [pc, #276]	@ (801406c <ip_reass_free_complete_datagram+0x12c>)
 8013f58:	22ab      	movs	r2, #171	@ 0xab
 8013f5a:	4945      	ldr	r1, [pc, #276]	@ (8014070 <ip_reass_free_complete_datagram+0x130>)
 8013f5c:	4845      	ldr	r0, [pc, #276]	@ (8014074 <ip_reass_free_complete_datagram+0x134>)
 8013f5e:	f001 fe6d 	bl	8015c3c <iprintf>
  if (prev != NULL) {
 8013f62:	683b      	ldr	r3, [r7, #0]
 8013f64:	2b00      	cmp	r3, #0
 8013f66:	d00a      	beq.n	8013f7e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8013f68:	683b      	ldr	r3, [r7, #0]
 8013f6a:	681b      	ldr	r3, [r3, #0]
 8013f6c:	687a      	ldr	r2, [r7, #4]
 8013f6e:	429a      	cmp	r2, r3
 8013f70:	d005      	beq.n	8013f7e <ip_reass_free_complete_datagram+0x3e>
 8013f72:	4b3e      	ldr	r3, [pc, #248]	@ (801406c <ip_reass_free_complete_datagram+0x12c>)
 8013f74:	22ad      	movs	r2, #173	@ 0xad
 8013f76:	4940      	ldr	r1, [pc, #256]	@ (8014078 <ip_reass_free_complete_datagram+0x138>)
 8013f78:	483e      	ldr	r0, [pc, #248]	@ (8014074 <ip_reass_free_complete_datagram+0x134>)
 8013f7a:	f001 fe5f 	bl	8015c3c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8013f7e:	687b      	ldr	r3, [r7, #4]
 8013f80:	685b      	ldr	r3, [r3, #4]
 8013f82:	685b      	ldr	r3, [r3, #4]
 8013f84:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8013f86:	697b      	ldr	r3, [r7, #20]
 8013f88:	889b      	ldrh	r3, [r3, #4]
 8013f8a:	b29b      	uxth	r3, r3
 8013f8c:	2b00      	cmp	r3, #0
 8013f8e:	d12a      	bne.n	8013fe6 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8013f90:	687b      	ldr	r3, [r7, #4]
 8013f92:	685b      	ldr	r3, [r3, #4]
 8013f94:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8013f96:	697b      	ldr	r3, [r7, #20]
 8013f98:	681a      	ldr	r2, [r3, #0]
 8013f9a:	687b      	ldr	r3, [r7, #4]
 8013f9c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8013f9e:	69bb      	ldr	r3, [r7, #24]
 8013fa0:	6858      	ldr	r0, [r3, #4]
 8013fa2:	687b      	ldr	r3, [r7, #4]
 8013fa4:	3308      	adds	r3, #8
 8013fa6:	2214      	movs	r2, #20
 8013fa8:	4619      	mov	r1, r3
 8013faa:	f001 ff9e 	bl	8015eea <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8013fae:	2101      	movs	r1, #1
 8013fb0:	69b8      	ldr	r0, [r7, #24]
 8013fb2:	f7ff fc47 	bl	8013844 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8013fb6:	69b8      	ldr	r0, [r7, #24]
 8013fb8:	f7f8 f886 	bl	800c0c8 <pbuf_clen>
 8013fbc:	4603      	mov	r3, r0
 8013fbe:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8013fc0:	8bfa      	ldrh	r2, [r7, #30]
 8013fc2:	8a7b      	ldrh	r3, [r7, #18]
 8013fc4:	4413      	add	r3, r2
 8013fc6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013fca:	db05      	blt.n	8013fd8 <ip_reass_free_complete_datagram+0x98>
 8013fcc:	4b27      	ldr	r3, [pc, #156]	@ (801406c <ip_reass_free_complete_datagram+0x12c>)
 8013fce:	22bc      	movs	r2, #188	@ 0xbc
 8013fd0:	492a      	ldr	r1, [pc, #168]	@ (801407c <ip_reass_free_complete_datagram+0x13c>)
 8013fd2:	4828      	ldr	r0, [pc, #160]	@ (8014074 <ip_reass_free_complete_datagram+0x134>)
 8013fd4:	f001 fe32 	bl	8015c3c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8013fd8:	8bfa      	ldrh	r2, [r7, #30]
 8013fda:	8a7b      	ldrh	r3, [r7, #18]
 8013fdc:	4413      	add	r3, r2
 8013fde:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8013fe0:	69b8      	ldr	r0, [r7, #24]
 8013fe2:	f7f7 ffe9 	bl	800bfb8 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8013fe6:	687b      	ldr	r3, [r7, #4]
 8013fe8:	685b      	ldr	r3, [r3, #4]
 8013fea:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8013fec:	e01f      	b.n	801402e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8013fee:	69bb      	ldr	r3, [r7, #24]
 8013ff0:	685b      	ldr	r3, [r3, #4]
 8013ff2:	617b      	str	r3, [r7, #20]
    pcur = p;
 8013ff4:	69bb      	ldr	r3, [r7, #24]
 8013ff6:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8013ff8:	697b      	ldr	r3, [r7, #20]
 8013ffa:	681b      	ldr	r3, [r3, #0]
 8013ffc:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8013ffe:	68f8      	ldr	r0, [r7, #12]
 8014000:	f7f8 f862 	bl	800c0c8 <pbuf_clen>
 8014004:	4603      	mov	r3, r0
 8014006:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8014008:	8bfa      	ldrh	r2, [r7, #30]
 801400a:	8a7b      	ldrh	r3, [r7, #18]
 801400c:	4413      	add	r3, r2
 801400e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014012:	db05      	blt.n	8014020 <ip_reass_free_complete_datagram+0xe0>
 8014014:	4b15      	ldr	r3, [pc, #84]	@ (801406c <ip_reass_free_complete_datagram+0x12c>)
 8014016:	22cc      	movs	r2, #204	@ 0xcc
 8014018:	4918      	ldr	r1, [pc, #96]	@ (801407c <ip_reass_free_complete_datagram+0x13c>)
 801401a:	4816      	ldr	r0, [pc, #88]	@ (8014074 <ip_reass_free_complete_datagram+0x134>)
 801401c:	f001 fe0e 	bl	8015c3c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8014020:	8bfa      	ldrh	r2, [r7, #30]
 8014022:	8a7b      	ldrh	r3, [r7, #18]
 8014024:	4413      	add	r3, r2
 8014026:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8014028:	68f8      	ldr	r0, [r7, #12]
 801402a:	f7f7 ffc5 	bl	800bfb8 <pbuf_free>
  while (p != NULL) {
 801402e:	69bb      	ldr	r3, [r7, #24]
 8014030:	2b00      	cmp	r3, #0
 8014032:	d1dc      	bne.n	8013fee <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8014034:	6839      	ldr	r1, [r7, #0]
 8014036:	6878      	ldr	r0, [r7, #4]
 8014038:	f000 f8c2 	bl	80141c0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801403c:	4b10      	ldr	r3, [pc, #64]	@ (8014080 <ip_reass_free_complete_datagram+0x140>)
 801403e:	881b      	ldrh	r3, [r3, #0]
 8014040:	8bfa      	ldrh	r2, [r7, #30]
 8014042:	429a      	cmp	r2, r3
 8014044:	d905      	bls.n	8014052 <ip_reass_free_complete_datagram+0x112>
 8014046:	4b09      	ldr	r3, [pc, #36]	@ (801406c <ip_reass_free_complete_datagram+0x12c>)
 8014048:	22d2      	movs	r2, #210	@ 0xd2
 801404a:	490e      	ldr	r1, [pc, #56]	@ (8014084 <ip_reass_free_complete_datagram+0x144>)
 801404c:	4809      	ldr	r0, [pc, #36]	@ (8014074 <ip_reass_free_complete_datagram+0x134>)
 801404e:	f001 fdf5 	bl	8015c3c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8014052:	4b0b      	ldr	r3, [pc, #44]	@ (8014080 <ip_reass_free_complete_datagram+0x140>)
 8014054:	881a      	ldrh	r2, [r3, #0]
 8014056:	8bfb      	ldrh	r3, [r7, #30]
 8014058:	1ad3      	subs	r3, r2, r3
 801405a:	b29a      	uxth	r2, r3
 801405c:	4b08      	ldr	r3, [pc, #32]	@ (8014080 <ip_reass_free_complete_datagram+0x140>)
 801405e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8014060:	8bfb      	ldrh	r3, [r7, #30]
}
 8014062:	4618      	mov	r0, r3
 8014064:	3720      	adds	r7, #32
 8014066:	46bd      	mov	sp, r7
 8014068:	bd80      	pop	{r7, pc}
 801406a:	bf00      	nop
 801406c:	08020900 	.word	0x08020900
 8014070:	0802093c 	.word	0x0802093c
 8014074:	08020948 	.word	0x08020948
 8014078:	08020970 	.word	0x08020970
 801407c:	08020984 	.word	0x08020984
 8014080:	2000939c 	.word	0x2000939c
 8014084:	080209a4 	.word	0x080209a4

08014088 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8014088:	b580      	push	{r7, lr}
 801408a:	b08a      	sub	sp, #40	@ 0x28
 801408c:	af00      	add	r7, sp, #0
 801408e:	6078      	str	r0, [r7, #4]
 8014090:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8014092:	2300      	movs	r3, #0
 8014094:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8014096:	2300      	movs	r3, #0
 8014098:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801409a:	2300      	movs	r3, #0
 801409c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801409e:	2300      	movs	r3, #0
 80140a0:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80140a2:	2300      	movs	r3, #0
 80140a4:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80140a6:	4b28      	ldr	r3, [pc, #160]	@ (8014148 <ip_reass_remove_oldest_datagram+0xc0>)
 80140a8:	681b      	ldr	r3, [r3, #0]
 80140aa:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 80140ac:	e030      	b.n	8014110 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80140ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80140b0:	695a      	ldr	r2, [r3, #20]
 80140b2:	687b      	ldr	r3, [r7, #4]
 80140b4:	68db      	ldr	r3, [r3, #12]
 80140b6:	429a      	cmp	r2, r3
 80140b8:	d10c      	bne.n	80140d4 <ip_reass_remove_oldest_datagram+0x4c>
 80140ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80140bc:	699a      	ldr	r2, [r3, #24]
 80140be:	687b      	ldr	r3, [r7, #4]
 80140c0:	691b      	ldr	r3, [r3, #16]
 80140c2:	429a      	cmp	r2, r3
 80140c4:	d106      	bne.n	80140d4 <ip_reass_remove_oldest_datagram+0x4c>
 80140c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80140c8:	899a      	ldrh	r2, [r3, #12]
 80140ca:	687b      	ldr	r3, [r7, #4]
 80140cc:	889b      	ldrh	r3, [r3, #4]
 80140ce:	b29b      	uxth	r3, r3
 80140d0:	429a      	cmp	r2, r3
 80140d2:	d014      	beq.n	80140fe <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80140d4:	693b      	ldr	r3, [r7, #16]
 80140d6:	3301      	adds	r3, #1
 80140d8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80140da:	6a3b      	ldr	r3, [r7, #32]
 80140dc:	2b00      	cmp	r3, #0
 80140de:	d104      	bne.n	80140ea <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80140e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80140e2:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80140e4:	69fb      	ldr	r3, [r7, #28]
 80140e6:	61bb      	str	r3, [r7, #24]
 80140e8:	e009      	b.n	80140fe <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80140ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80140ec:	7fda      	ldrb	r2, [r3, #31]
 80140ee:	6a3b      	ldr	r3, [r7, #32]
 80140f0:	7fdb      	ldrb	r3, [r3, #31]
 80140f2:	429a      	cmp	r2, r3
 80140f4:	d803      	bhi.n	80140fe <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80140f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80140f8:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80140fa:	69fb      	ldr	r3, [r7, #28]
 80140fc:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80140fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014100:	681b      	ldr	r3, [r3, #0]
 8014102:	2b00      	cmp	r3, #0
 8014104:	d001      	beq.n	801410a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8014106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014108:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801410a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801410c:	681b      	ldr	r3, [r3, #0]
 801410e:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8014110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014112:	2b00      	cmp	r3, #0
 8014114:	d1cb      	bne.n	80140ae <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8014116:	6a3b      	ldr	r3, [r7, #32]
 8014118:	2b00      	cmp	r3, #0
 801411a:	d008      	beq.n	801412e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801411c:	69b9      	ldr	r1, [r7, #24]
 801411e:	6a38      	ldr	r0, [r7, #32]
 8014120:	f7ff ff0e 	bl	8013f40 <ip_reass_free_complete_datagram>
 8014124:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8014126:	697a      	ldr	r2, [r7, #20]
 8014128:	68fb      	ldr	r3, [r7, #12]
 801412a:	4413      	add	r3, r2
 801412c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801412e:	697a      	ldr	r2, [r7, #20]
 8014130:	683b      	ldr	r3, [r7, #0]
 8014132:	429a      	cmp	r2, r3
 8014134:	da02      	bge.n	801413c <ip_reass_remove_oldest_datagram+0xb4>
 8014136:	693b      	ldr	r3, [r7, #16]
 8014138:	2b01      	cmp	r3, #1
 801413a:	dcac      	bgt.n	8014096 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801413c:	697b      	ldr	r3, [r7, #20]
}
 801413e:	4618      	mov	r0, r3
 8014140:	3728      	adds	r7, #40	@ 0x28
 8014142:	46bd      	mov	sp, r7
 8014144:	bd80      	pop	{r7, pc}
 8014146:	bf00      	nop
 8014148:	20009398 	.word	0x20009398

0801414c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801414c:	b580      	push	{r7, lr}
 801414e:	b084      	sub	sp, #16
 8014150:	af00      	add	r7, sp, #0
 8014152:	6078      	str	r0, [r7, #4]
 8014154:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8014156:	2004      	movs	r0, #4
 8014158:	f7f7 f848 	bl	800b1ec <memp_malloc>
 801415c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801415e:	68fb      	ldr	r3, [r7, #12]
 8014160:	2b00      	cmp	r3, #0
 8014162:	d110      	bne.n	8014186 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8014164:	6839      	ldr	r1, [r7, #0]
 8014166:	6878      	ldr	r0, [r7, #4]
 8014168:	f7ff ff8e 	bl	8014088 <ip_reass_remove_oldest_datagram>
 801416c:	4602      	mov	r2, r0
 801416e:	683b      	ldr	r3, [r7, #0]
 8014170:	4293      	cmp	r3, r2
 8014172:	dc03      	bgt.n	801417c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8014174:	2004      	movs	r0, #4
 8014176:	f7f7 f839 	bl	800b1ec <memp_malloc>
 801417a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801417c:	68fb      	ldr	r3, [r7, #12]
 801417e:	2b00      	cmp	r3, #0
 8014180:	d101      	bne.n	8014186 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8014182:	2300      	movs	r3, #0
 8014184:	e016      	b.n	80141b4 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8014186:	2220      	movs	r2, #32
 8014188:	2100      	movs	r1, #0
 801418a:	68f8      	ldr	r0, [r7, #12]
 801418c:	f001 fdf7 	bl	8015d7e <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8014190:	68fb      	ldr	r3, [r7, #12]
 8014192:	220f      	movs	r2, #15
 8014194:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8014196:	4b09      	ldr	r3, [pc, #36]	@ (80141bc <ip_reass_enqueue_new_datagram+0x70>)
 8014198:	681a      	ldr	r2, [r3, #0]
 801419a:	68fb      	ldr	r3, [r7, #12]
 801419c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801419e:	4a07      	ldr	r2, [pc, #28]	@ (80141bc <ip_reass_enqueue_new_datagram+0x70>)
 80141a0:	68fb      	ldr	r3, [r7, #12]
 80141a2:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80141a4:	68fb      	ldr	r3, [r7, #12]
 80141a6:	3308      	adds	r3, #8
 80141a8:	2214      	movs	r2, #20
 80141aa:	6879      	ldr	r1, [r7, #4]
 80141ac:	4618      	mov	r0, r3
 80141ae:	f001 fe9c 	bl	8015eea <memcpy>
  return ipr;
 80141b2:	68fb      	ldr	r3, [r7, #12]
}
 80141b4:	4618      	mov	r0, r3
 80141b6:	3710      	adds	r7, #16
 80141b8:	46bd      	mov	sp, r7
 80141ba:	bd80      	pop	{r7, pc}
 80141bc:	20009398 	.word	0x20009398

080141c0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80141c0:	b580      	push	{r7, lr}
 80141c2:	b082      	sub	sp, #8
 80141c4:	af00      	add	r7, sp, #0
 80141c6:	6078      	str	r0, [r7, #4]
 80141c8:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80141ca:	4b10      	ldr	r3, [pc, #64]	@ (801420c <ip_reass_dequeue_datagram+0x4c>)
 80141cc:	681b      	ldr	r3, [r3, #0]
 80141ce:	687a      	ldr	r2, [r7, #4]
 80141d0:	429a      	cmp	r2, r3
 80141d2:	d104      	bne.n	80141de <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80141d4:	687b      	ldr	r3, [r7, #4]
 80141d6:	681b      	ldr	r3, [r3, #0]
 80141d8:	4a0c      	ldr	r2, [pc, #48]	@ (801420c <ip_reass_dequeue_datagram+0x4c>)
 80141da:	6013      	str	r3, [r2, #0]
 80141dc:	e00d      	b.n	80141fa <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80141de:	683b      	ldr	r3, [r7, #0]
 80141e0:	2b00      	cmp	r3, #0
 80141e2:	d106      	bne.n	80141f2 <ip_reass_dequeue_datagram+0x32>
 80141e4:	4b0a      	ldr	r3, [pc, #40]	@ (8014210 <ip_reass_dequeue_datagram+0x50>)
 80141e6:	f240 1245 	movw	r2, #325	@ 0x145
 80141ea:	490a      	ldr	r1, [pc, #40]	@ (8014214 <ip_reass_dequeue_datagram+0x54>)
 80141ec:	480a      	ldr	r0, [pc, #40]	@ (8014218 <ip_reass_dequeue_datagram+0x58>)
 80141ee:	f001 fd25 	bl	8015c3c <iprintf>
    prev->next = ipr->next;
 80141f2:	687b      	ldr	r3, [r7, #4]
 80141f4:	681a      	ldr	r2, [r3, #0]
 80141f6:	683b      	ldr	r3, [r7, #0]
 80141f8:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80141fa:	6879      	ldr	r1, [r7, #4]
 80141fc:	2004      	movs	r0, #4
 80141fe:	f7f7 f865 	bl	800b2cc <memp_free>
}
 8014202:	bf00      	nop
 8014204:	3708      	adds	r7, #8
 8014206:	46bd      	mov	sp, r7
 8014208:	bd80      	pop	{r7, pc}
 801420a:	bf00      	nop
 801420c:	20009398 	.word	0x20009398
 8014210:	08020900 	.word	0x08020900
 8014214:	080209c8 	.word	0x080209c8
 8014218:	08020948 	.word	0x08020948

0801421c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801421c:	b580      	push	{r7, lr}
 801421e:	b08c      	sub	sp, #48	@ 0x30
 8014220:	af00      	add	r7, sp, #0
 8014222:	60f8      	str	r0, [r7, #12]
 8014224:	60b9      	str	r1, [r7, #8]
 8014226:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8014228:	2300      	movs	r3, #0
 801422a:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801422c:	2301      	movs	r3, #1
 801422e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8014230:	68bb      	ldr	r3, [r7, #8]
 8014232:	685b      	ldr	r3, [r3, #4]
 8014234:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8014236:	69fb      	ldr	r3, [r7, #28]
 8014238:	885b      	ldrh	r3, [r3, #2]
 801423a:	b29b      	uxth	r3, r3
 801423c:	4618      	mov	r0, r3
 801423e:	f7f6 f893 	bl	800a368 <lwip_htons>
 8014242:	4603      	mov	r3, r0
 8014244:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8014246:	69fb      	ldr	r3, [r7, #28]
 8014248:	781b      	ldrb	r3, [r3, #0]
 801424a:	f003 030f 	and.w	r3, r3, #15
 801424e:	b2db      	uxtb	r3, r3
 8014250:	009b      	lsls	r3, r3, #2
 8014252:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8014254:	7e7b      	ldrb	r3, [r7, #25]
 8014256:	b29b      	uxth	r3, r3
 8014258:	8b7a      	ldrh	r2, [r7, #26]
 801425a:	429a      	cmp	r2, r3
 801425c:	d202      	bcs.n	8014264 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801425e:	f04f 33ff 	mov.w	r3, #4294967295
 8014262:	e135      	b.n	80144d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8014264:	7e7b      	ldrb	r3, [r7, #25]
 8014266:	b29b      	uxth	r3, r3
 8014268:	8b7a      	ldrh	r2, [r7, #26]
 801426a:	1ad3      	subs	r3, r2, r3
 801426c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801426e:	69fb      	ldr	r3, [r7, #28]
 8014270:	88db      	ldrh	r3, [r3, #6]
 8014272:	b29b      	uxth	r3, r3
 8014274:	4618      	mov	r0, r3
 8014276:	f7f6 f877 	bl	800a368 <lwip_htons>
 801427a:	4603      	mov	r3, r0
 801427c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014280:	b29b      	uxth	r3, r3
 8014282:	00db      	lsls	r3, r3, #3
 8014284:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8014286:	68bb      	ldr	r3, [r7, #8]
 8014288:	685b      	ldr	r3, [r3, #4]
 801428a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 801428c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801428e:	2200      	movs	r2, #0
 8014290:	701a      	strb	r2, [r3, #0]
 8014292:	2200      	movs	r2, #0
 8014294:	705a      	strb	r2, [r3, #1]
 8014296:	2200      	movs	r2, #0
 8014298:	709a      	strb	r2, [r3, #2]
 801429a:	2200      	movs	r2, #0
 801429c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801429e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80142a0:	8afa      	ldrh	r2, [r7, #22]
 80142a2:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80142a4:	8afa      	ldrh	r2, [r7, #22]
 80142a6:	8b7b      	ldrh	r3, [r7, #26]
 80142a8:	4413      	add	r3, r2
 80142aa:	b29a      	uxth	r2, r3
 80142ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80142ae:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80142b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80142b2:	88db      	ldrh	r3, [r3, #6]
 80142b4:	b29b      	uxth	r3, r3
 80142b6:	8afa      	ldrh	r2, [r7, #22]
 80142b8:	429a      	cmp	r2, r3
 80142ba:	d902      	bls.n	80142c2 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80142bc:	f04f 33ff 	mov.w	r3, #4294967295
 80142c0:	e106      	b.n	80144d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80142c2:	68fb      	ldr	r3, [r7, #12]
 80142c4:	685b      	ldr	r3, [r3, #4]
 80142c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80142c8:	e068      	b.n	801439c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80142ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80142cc:	685b      	ldr	r3, [r3, #4]
 80142ce:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80142d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80142d2:	889b      	ldrh	r3, [r3, #4]
 80142d4:	b29a      	uxth	r2, r3
 80142d6:	693b      	ldr	r3, [r7, #16]
 80142d8:	889b      	ldrh	r3, [r3, #4]
 80142da:	b29b      	uxth	r3, r3
 80142dc:	429a      	cmp	r2, r3
 80142de:	d235      	bcs.n	801434c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80142e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80142e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80142e4:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80142e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80142e8:	2b00      	cmp	r3, #0
 80142ea:	d020      	beq.n	801432e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80142ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80142ee:	889b      	ldrh	r3, [r3, #4]
 80142f0:	b29a      	uxth	r2, r3
 80142f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80142f4:	88db      	ldrh	r3, [r3, #6]
 80142f6:	b29b      	uxth	r3, r3
 80142f8:	429a      	cmp	r2, r3
 80142fa:	d307      	bcc.n	801430c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80142fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80142fe:	88db      	ldrh	r3, [r3, #6]
 8014300:	b29a      	uxth	r2, r3
 8014302:	693b      	ldr	r3, [r7, #16]
 8014304:	889b      	ldrh	r3, [r3, #4]
 8014306:	b29b      	uxth	r3, r3
 8014308:	429a      	cmp	r2, r3
 801430a:	d902      	bls.n	8014312 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801430c:	f04f 33ff 	mov.w	r3, #4294967295
 8014310:	e0de      	b.n	80144d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8014312:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014314:	68ba      	ldr	r2, [r7, #8]
 8014316:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8014318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801431a:	88db      	ldrh	r3, [r3, #6]
 801431c:	b29a      	uxth	r2, r3
 801431e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014320:	889b      	ldrh	r3, [r3, #4]
 8014322:	b29b      	uxth	r3, r3
 8014324:	429a      	cmp	r2, r3
 8014326:	d03d      	beq.n	80143a4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8014328:	2300      	movs	r3, #0
 801432a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801432c:	e03a      	b.n	80143a4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801432e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014330:	88db      	ldrh	r3, [r3, #6]
 8014332:	b29a      	uxth	r2, r3
 8014334:	693b      	ldr	r3, [r7, #16]
 8014336:	889b      	ldrh	r3, [r3, #4]
 8014338:	b29b      	uxth	r3, r3
 801433a:	429a      	cmp	r2, r3
 801433c:	d902      	bls.n	8014344 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801433e:	f04f 33ff 	mov.w	r3, #4294967295
 8014342:	e0c5      	b.n	80144d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8014344:	68fb      	ldr	r3, [r7, #12]
 8014346:	68ba      	ldr	r2, [r7, #8]
 8014348:	605a      	str	r2, [r3, #4]
      break;
 801434a:	e02b      	b.n	80143a4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801434c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801434e:	889b      	ldrh	r3, [r3, #4]
 8014350:	b29a      	uxth	r2, r3
 8014352:	693b      	ldr	r3, [r7, #16]
 8014354:	889b      	ldrh	r3, [r3, #4]
 8014356:	b29b      	uxth	r3, r3
 8014358:	429a      	cmp	r2, r3
 801435a:	d102      	bne.n	8014362 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801435c:	f04f 33ff 	mov.w	r3, #4294967295
 8014360:	e0b6      	b.n	80144d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8014362:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014364:	889b      	ldrh	r3, [r3, #4]
 8014366:	b29a      	uxth	r2, r3
 8014368:	693b      	ldr	r3, [r7, #16]
 801436a:	88db      	ldrh	r3, [r3, #6]
 801436c:	b29b      	uxth	r3, r3
 801436e:	429a      	cmp	r2, r3
 8014370:	d202      	bcs.n	8014378 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014372:	f04f 33ff 	mov.w	r3, #4294967295
 8014376:	e0ab      	b.n	80144d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8014378:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801437a:	2b00      	cmp	r3, #0
 801437c:	d009      	beq.n	8014392 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801437e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014380:	88db      	ldrh	r3, [r3, #6]
 8014382:	b29a      	uxth	r2, r3
 8014384:	693b      	ldr	r3, [r7, #16]
 8014386:	889b      	ldrh	r3, [r3, #4]
 8014388:	b29b      	uxth	r3, r3
 801438a:	429a      	cmp	r2, r3
 801438c:	d001      	beq.n	8014392 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801438e:	2300      	movs	r3, #0
 8014390:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8014392:	693b      	ldr	r3, [r7, #16]
 8014394:	681b      	ldr	r3, [r3, #0]
 8014396:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 8014398:	693b      	ldr	r3, [r7, #16]
 801439a:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 801439c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801439e:	2b00      	cmp	r3, #0
 80143a0:	d193      	bne.n	80142ca <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80143a2:	e000      	b.n	80143a6 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80143a4:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80143a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80143a8:	2b00      	cmp	r3, #0
 80143aa:	d12d      	bne.n	8014408 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80143ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80143ae:	2b00      	cmp	r3, #0
 80143b0:	d01c      	beq.n	80143ec <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80143b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80143b4:	88db      	ldrh	r3, [r3, #6]
 80143b6:	b29a      	uxth	r2, r3
 80143b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80143ba:	889b      	ldrh	r3, [r3, #4]
 80143bc:	b29b      	uxth	r3, r3
 80143be:	429a      	cmp	r2, r3
 80143c0:	d906      	bls.n	80143d0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80143c2:	4b45      	ldr	r3, [pc, #276]	@ (80144d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80143c4:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 80143c8:	4944      	ldr	r1, [pc, #272]	@ (80144dc <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80143ca:	4845      	ldr	r0, [pc, #276]	@ (80144e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80143cc:	f001 fc36 	bl	8015c3c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80143d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80143d2:	68ba      	ldr	r2, [r7, #8]
 80143d4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80143d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80143d8:	88db      	ldrh	r3, [r3, #6]
 80143da:	b29a      	uxth	r2, r3
 80143dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80143de:	889b      	ldrh	r3, [r3, #4]
 80143e0:	b29b      	uxth	r3, r3
 80143e2:	429a      	cmp	r2, r3
 80143e4:	d010      	beq.n	8014408 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80143e6:	2300      	movs	r3, #0
 80143e8:	623b      	str	r3, [r7, #32]
 80143ea:	e00d      	b.n	8014408 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80143ec:	68fb      	ldr	r3, [r7, #12]
 80143ee:	685b      	ldr	r3, [r3, #4]
 80143f0:	2b00      	cmp	r3, #0
 80143f2:	d006      	beq.n	8014402 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80143f4:	4b38      	ldr	r3, [pc, #224]	@ (80144d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80143f6:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 80143fa:	493a      	ldr	r1, [pc, #232]	@ (80144e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80143fc:	4838      	ldr	r0, [pc, #224]	@ (80144e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80143fe:	f001 fc1d 	bl	8015c3c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8014402:	68fb      	ldr	r3, [r7, #12]
 8014404:	68ba      	ldr	r2, [r7, #8]
 8014406:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8014408:	687b      	ldr	r3, [r7, #4]
 801440a:	2b00      	cmp	r3, #0
 801440c:	d105      	bne.n	801441a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801440e:	68fb      	ldr	r3, [r7, #12]
 8014410:	7f9b      	ldrb	r3, [r3, #30]
 8014412:	f003 0301 	and.w	r3, r3, #1
 8014416:	2b00      	cmp	r3, #0
 8014418:	d059      	beq.n	80144ce <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801441a:	6a3b      	ldr	r3, [r7, #32]
 801441c:	2b00      	cmp	r3, #0
 801441e:	d04f      	beq.n	80144c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8014420:	68fb      	ldr	r3, [r7, #12]
 8014422:	685b      	ldr	r3, [r3, #4]
 8014424:	2b00      	cmp	r3, #0
 8014426:	d006      	beq.n	8014436 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8014428:	68fb      	ldr	r3, [r7, #12]
 801442a:	685b      	ldr	r3, [r3, #4]
 801442c:	685b      	ldr	r3, [r3, #4]
 801442e:	889b      	ldrh	r3, [r3, #4]
 8014430:	b29b      	uxth	r3, r3
 8014432:	2b00      	cmp	r3, #0
 8014434:	d002      	beq.n	801443c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8014436:	2300      	movs	r3, #0
 8014438:	623b      	str	r3, [r7, #32]
 801443a:	e041      	b.n	80144c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801443c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801443e:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 8014440:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014442:	681b      	ldr	r3, [r3, #0]
 8014444:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8014446:	e012      	b.n	801446e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8014448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801444a:	685b      	ldr	r3, [r3, #4]
 801444c:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 801444e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014450:	88db      	ldrh	r3, [r3, #6]
 8014452:	b29a      	uxth	r2, r3
 8014454:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014456:	889b      	ldrh	r3, [r3, #4]
 8014458:	b29b      	uxth	r3, r3
 801445a:	429a      	cmp	r2, r3
 801445c:	d002      	beq.n	8014464 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801445e:	2300      	movs	r3, #0
 8014460:	623b      	str	r3, [r7, #32]
            break;
 8014462:	e007      	b.n	8014474 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8014464:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014466:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8014468:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801446a:	681b      	ldr	r3, [r3, #0]
 801446c:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801446e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014470:	2b00      	cmp	r3, #0
 8014472:	d1e9      	bne.n	8014448 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8014474:	6a3b      	ldr	r3, [r7, #32]
 8014476:	2b00      	cmp	r3, #0
 8014478:	d022      	beq.n	80144c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801447a:	68fb      	ldr	r3, [r7, #12]
 801447c:	685b      	ldr	r3, [r3, #4]
 801447e:	2b00      	cmp	r3, #0
 8014480:	d106      	bne.n	8014490 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8014482:	4b15      	ldr	r3, [pc, #84]	@ (80144d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014484:	f240 12df 	movw	r2, #479	@ 0x1df
 8014488:	4917      	ldr	r1, [pc, #92]	@ (80144e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801448a:	4815      	ldr	r0, [pc, #84]	@ (80144e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801448c:	f001 fbd6 	bl	8015c3c <iprintf>
          LWIP_ASSERT("sanity check",
 8014490:	68fb      	ldr	r3, [r7, #12]
 8014492:	685b      	ldr	r3, [r3, #4]
 8014494:	685b      	ldr	r3, [r3, #4]
 8014496:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014498:	429a      	cmp	r2, r3
 801449a:	d106      	bne.n	80144aa <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801449c:	4b0e      	ldr	r3, [pc, #56]	@ (80144d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801449e:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80144a2:	4911      	ldr	r1, [pc, #68]	@ (80144e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80144a4:	480e      	ldr	r0, [pc, #56]	@ (80144e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80144a6:	f001 fbc9 	bl	8015c3c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80144aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80144ac:	681b      	ldr	r3, [r3, #0]
 80144ae:	2b00      	cmp	r3, #0
 80144b0:	d006      	beq.n	80144c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80144b2:	4b09      	ldr	r3, [pc, #36]	@ (80144d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80144b4:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 80144b8:	490c      	ldr	r1, [pc, #48]	@ (80144ec <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80144ba:	4809      	ldr	r0, [pc, #36]	@ (80144e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80144bc:	f001 fbbe 	bl	8015c3c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80144c0:	6a3b      	ldr	r3, [r7, #32]
 80144c2:	2b00      	cmp	r3, #0
 80144c4:	bf14      	ite	ne
 80144c6:	2301      	movne	r3, #1
 80144c8:	2300      	moveq	r3, #0
 80144ca:	b2db      	uxtb	r3, r3
 80144cc:	e000      	b.n	80144d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80144ce:	2300      	movs	r3, #0
}
 80144d0:	4618      	mov	r0, r3
 80144d2:	3730      	adds	r7, #48	@ 0x30
 80144d4:	46bd      	mov	sp, r7
 80144d6:	bd80      	pop	{r7, pc}
 80144d8:	08020900 	.word	0x08020900
 80144dc:	080209e4 	.word	0x080209e4
 80144e0:	08020948 	.word	0x08020948
 80144e4:	08020a04 	.word	0x08020a04
 80144e8:	08020a3c 	.word	0x08020a3c
 80144ec:	08020a4c 	.word	0x08020a4c

080144f0 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80144f0:	b580      	push	{r7, lr}
 80144f2:	b08e      	sub	sp, #56	@ 0x38
 80144f4:	af00      	add	r7, sp, #0
 80144f6:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80144f8:	687b      	ldr	r3, [r7, #4]
 80144fa:	685b      	ldr	r3, [r3, #4]
 80144fc:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80144fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014500:	781b      	ldrb	r3, [r3, #0]
 8014502:	f003 030f 	and.w	r3, r3, #15
 8014506:	b2db      	uxtb	r3, r3
 8014508:	009b      	lsls	r3, r3, #2
 801450a:	b2db      	uxtb	r3, r3
 801450c:	2b14      	cmp	r3, #20
 801450e:	f040 8171 	bne.w	80147f4 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8014512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014514:	88db      	ldrh	r3, [r3, #6]
 8014516:	b29b      	uxth	r3, r3
 8014518:	4618      	mov	r0, r3
 801451a:	f7f5 ff25 	bl	800a368 <lwip_htons>
 801451e:	4603      	mov	r3, r0
 8014520:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014524:	b29b      	uxth	r3, r3
 8014526:	00db      	lsls	r3, r3, #3
 8014528:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801452a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801452c:	885b      	ldrh	r3, [r3, #2]
 801452e:	b29b      	uxth	r3, r3
 8014530:	4618      	mov	r0, r3
 8014532:	f7f5 ff19 	bl	800a368 <lwip_htons>
 8014536:	4603      	mov	r3, r0
 8014538:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801453a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801453c:	781b      	ldrb	r3, [r3, #0]
 801453e:	f003 030f 	and.w	r3, r3, #15
 8014542:	b2db      	uxtb	r3, r3
 8014544:	009b      	lsls	r3, r3, #2
 8014546:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 801454a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801454e:	b29b      	uxth	r3, r3
 8014550:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8014552:	429a      	cmp	r2, r3
 8014554:	f0c0 8150 	bcc.w	80147f8 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8014558:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801455c:	b29b      	uxth	r3, r3
 801455e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8014560:	1ad3      	subs	r3, r2, r3
 8014562:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8014564:	6878      	ldr	r0, [r7, #4]
 8014566:	f7f7 fdaf 	bl	800c0c8 <pbuf_clen>
 801456a:	4603      	mov	r3, r0
 801456c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801456e:	4b8c      	ldr	r3, [pc, #560]	@ (80147a0 <ip4_reass+0x2b0>)
 8014570:	881b      	ldrh	r3, [r3, #0]
 8014572:	461a      	mov	r2, r3
 8014574:	8c3b      	ldrh	r3, [r7, #32]
 8014576:	4413      	add	r3, r2
 8014578:	2b0a      	cmp	r3, #10
 801457a:	dd10      	ble.n	801459e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801457c:	8c3b      	ldrh	r3, [r7, #32]
 801457e:	4619      	mov	r1, r3
 8014580:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014582:	f7ff fd81 	bl	8014088 <ip_reass_remove_oldest_datagram>
 8014586:	4603      	mov	r3, r0
 8014588:	2b00      	cmp	r3, #0
 801458a:	f000 8137 	beq.w	80147fc <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801458e:	4b84      	ldr	r3, [pc, #528]	@ (80147a0 <ip4_reass+0x2b0>)
 8014590:	881b      	ldrh	r3, [r3, #0]
 8014592:	461a      	mov	r2, r3
 8014594:	8c3b      	ldrh	r3, [r7, #32]
 8014596:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8014598:	2b0a      	cmp	r3, #10
 801459a:	f300 812f 	bgt.w	80147fc <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801459e:	4b81      	ldr	r3, [pc, #516]	@ (80147a4 <ip4_reass+0x2b4>)
 80145a0:	681b      	ldr	r3, [r3, #0]
 80145a2:	633b      	str	r3, [r7, #48]	@ 0x30
 80145a4:	e015      	b.n	80145d2 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80145a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80145a8:	695a      	ldr	r2, [r3, #20]
 80145aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80145ac:	68db      	ldr	r3, [r3, #12]
 80145ae:	429a      	cmp	r2, r3
 80145b0:	d10c      	bne.n	80145cc <ip4_reass+0xdc>
 80145b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80145b4:	699a      	ldr	r2, [r3, #24]
 80145b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80145b8:	691b      	ldr	r3, [r3, #16]
 80145ba:	429a      	cmp	r2, r3
 80145bc:	d106      	bne.n	80145cc <ip4_reass+0xdc>
 80145be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80145c0:	899a      	ldrh	r2, [r3, #12]
 80145c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80145c4:	889b      	ldrh	r3, [r3, #4]
 80145c6:	b29b      	uxth	r3, r3
 80145c8:	429a      	cmp	r2, r3
 80145ca:	d006      	beq.n	80145da <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80145cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80145ce:	681b      	ldr	r3, [r3, #0]
 80145d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80145d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80145d4:	2b00      	cmp	r3, #0
 80145d6:	d1e6      	bne.n	80145a6 <ip4_reass+0xb6>
 80145d8:	e000      	b.n	80145dc <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80145da:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80145dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80145de:	2b00      	cmp	r3, #0
 80145e0:	d109      	bne.n	80145f6 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80145e2:	8c3b      	ldrh	r3, [r7, #32]
 80145e4:	4619      	mov	r1, r3
 80145e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80145e8:	f7ff fdb0 	bl	801414c <ip_reass_enqueue_new_datagram>
 80145ec:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80145ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80145f0:	2b00      	cmp	r3, #0
 80145f2:	d11c      	bne.n	801462e <ip4_reass+0x13e>
      goto nullreturn;
 80145f4:	e105      	b.n	8014802 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80145f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80145f8:	88db      	ldrh	r3, [r3, #6]
 80145fa:	b29b      	uxth	r3, r3
 80145fc:	4618      	mov	r0, r3
 80145fe:	f7f5 feb3 	bl	800a368 <lwip_htons>
 8014602:	4603      	mov	r3, r0
 8014604:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014608:	2b00      	cmp	r3, #0
 801460a:	d110      	bne.n	801462e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801460c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801460e:	89db      	ldrh	r3, [r3, #14]
 8014610:	4618      	mov	r0, r3
 8014612:	f7f5 fea9 	bl	800a368 <lwip_htons>
 8014616:	4603      	mov	r3, r0
 8014618:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801461c:	2b00      	cmp	r3, #0
 801461e:	d006      	beq.n	801462e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8014620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014622:	3308      	adds	r3, #8
 8014624:	2214      	movs	r2, #20
 8014626:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8014628:	4618      	mov	r0, r3
 801462a:	f001 fc5e 	bl	8015eea <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801462e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014630:	88db      	ldrh	r3, [r3, #6]
 8014632:	b29b      	uxth	r3, r3
 8014634:	f003 0320 	and.w	r3, r3, #32
 8014638:	2b00      	cmp	r3, #0
 801463a:	bf0c      	ite	eq
 801463c:	2301      	moveq	r3, #1
 801463e:	2300      	movne	r3, #0
 8014640:	b2db      	uxtb	r3, r3
 8014642:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8014644:	69fb      	ldr	r3, [r7, #28]
 8014646:	2b00      	cmp	r3, #0
 8014648:	d00e      	beq.n	8014668 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801464a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801464c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801464e:	4413      	add	r3, r2
 8014650:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8014652:	8b7a      	ldrh	r2, [r7, #26]
 8014654:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8014656:	429a      	cmp	r2, r3
 8014658:	f0c0 80a0 	bcc.w	801479c <ip4_reass+0x2ac>
 801465c:	8b7b      	ldrh	r3, [r7, #26]
 801465e:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 8014662:	4293      	cmp	r3, r2
 8014664:	f200 809a 	bhi.w	801479c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8014668:	69fa      	ldr	r2, [r7, #28]
 801466a:	6879      	ldr	r1, [r7, #4]
 801466c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801466e:	f7ff fdd5 	bl	801421c <ip_reass_chain_frag_into_datagram_and_validate>
 8014672:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8014674:	697b      	ldr	r3, [r7, #20]
 8014676:	f1b3 3fff 	cmp.w	r3, #4294967295
 801467a:	f000 809b 	beq.w	80147b4 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801467e:	4b48      	ldr	r3, [pc, #288]	@ (80147a0 <ip4_reass+0x2b0>)
 8014680:	881a      	ldrh	r2, [r3, #0]
 8014682:	8c3b      	ldrh	r3, [r7, #32]
 8014684:	4413      	add	r3, r2
 8014686:	b29a      	uxth	r2, r3
 8014688:	4b45      	ldr	r3, [pc, #276]	@ (80147a0 <ip4_reass+0x2b0>)
 801468a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801468c:	69fb      	ldr	r3, [r7, #28]
 801468e:	2b00      	cmp	r3, #0
 8014690:	d00d      	beq.n	80146ae <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8014692:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8014694:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8014696:	4413      	add	r3, r2
 8014698:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801469a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801469c:	8a7a      	ldrh	r2, [r7, #18]
 801469e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80146a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80146a2:	7f9b      	ldrb	r3, [r3, #30]
 80146a4:	f043 0301 	orr.w	r3, r3, #1
 80146a8:	b2da      	uxtb	r2, r3
 80146aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80146ac:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80146ae:	697b      	ldr	r3, [r7, #20]
 80146b0:	2b01      	cmp	r3, #1
 80146b2:	d171      	bne.n	8014798 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80146b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80146b6:	8b9b      	ldrh	r3, [r3, #28]
 80146b8:	3314      	adds	r3, #20
 80146ba:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80146bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80146be:	685b      	ldr	r3, [r3, #4]
 80146c0:	685b      	ldr	r3, [r3, #4]
 80146c2:	681b      	ldr	r3, [r3, #0]
 80146c4:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80146c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80146c8:	685b      	ldr	r3, [r3, #4]
 80146ca:	685b      	ldr	r3, [r3, #4]
 80146cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80146ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80146d0:	3308      	adds	r3, #8
 80146d2:	2214      	movs	r2, #20
 80146d4:	4619      	mov	r1, r3
 80146d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80146d8:	f001 fc07 	bl	8015eea <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80146dc:	8a3b      	ldrh	r3, [r7, #16]
 80146de:	4618      	mov	r0, r3
 80146e0:	f7f5 fe42 	bl	800a368 <lwip_htons>
 80146e4:	4603      	mov	r3, r0
 80146e6:	461a      	mov	r2, r3
 80146e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80146ea:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80146ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80146ee:	2200      	movs	r2, #0
 80146f0:	719a      	strb	r2, [r3, #6]
 80146f2:	2200      	movs	r2, #0
 80146f4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80146f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80146f8:	2200      	movs	r2, #0
 80146fa:	729a      	strb	r2, [r3, #10]
 80146fc:	2200      	movs	r2, #0
 80146fe:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8014700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014702:	685b      	ldr	r3, [r3, #4]
 8014704:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8014706:	e00d      	b.n	8014724 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8014708:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801470a:	685b      	ldr	r3, [r3, #4]
 801470c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801470e:	2114      	movs	r1, #20
 8014710:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8014712:	f7f7 fbcb 	bl	800beac <pbuf_remove_header>
      pbuf_cat(p, r);
 8014716:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8014718:	6878      	ldr	r0, [r7, #4]
 801471a:	f7f7 fd0f 	bl	800c13c <pbuf_cat>
      r = iprh->next_pbuf;
 801471e:	68fb      	ldr	r3, [r7, #12]
 8014720:	681b      	ldr	r3, [r3, #0]
 8014722:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 8014724:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014726:	2b00      	cmp	r3, #0
 8014728:	d1ee      	bne.n	8014708 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801472a:	4b1e      	ldr	r3, [pc, #120]	@ (80147a4 <ip4_reass+0x2b4>)
 801472c:	681b      	ldr	r3, [r3, #0]
 801472e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014730:	429a      	cmp	r2, r3
 8014732:	d102      	bne.n	801473a <ip4_reass+0x24a>
      ipr_prev = NULL;
 8014734:	2300      	movs	r3, #0
 8014736:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014738:	e010      	b.n	801475c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801473a:	4b1a      	ldr	r3, [pc, #104]	@ (80147a4 <ip4_reass+0x2b4>)
 801473c:	681b      	ldr	r3, [r3, #0]
 801473e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014740:	e007      	b.n	8014752 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8014742:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014744:	681b      	ldr	r3, [r3, #0]
 8014746:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014748:	429a      	cmp	r2, r3
 801474a:	d006      	beq.n	801475a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801474c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801474e:	681b      	ldr	r3, [r3, #0]
 8014750:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014752:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014754:	2b00      	cmp	r3, #0
 8014756:	d1f4      	bne.n	8014742 <ip4_reass+0x252>
 8014758:	e000      	b.n	801475c <ip4_reass+0x26c>
          break;
 801475a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801475c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801475e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014760:	f7ff fd2e 	bl	80141c0 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8014764:	6878      	ldr	r0, [r7, #4]
 8014766:	f7f7 fcaf 	bl	800c0c8 <pbuf_clen>
 801476a:	4603      	mov	r3, r0
 801476c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801476e:	4b0c      	ldr	r3, [pc, #48]	@ (80147a0 <ip4_reass+0x2b0>)
 8014770:	881b      	ldrh	r3, [r3, #0]
 8014772:	8c3a      	ldrh	r2, [r7, #32]
 8014774:	429a      	cmp	r2, r3
 8014776:	d906      	bls.n	8014786 <ip4_reass+0x296>
 8014778:	4b0b      	ldr	r3, [pc, #44]	@ (80147a8 <ip4_reass+0x2b8>)
 801477a:	f240 229b 	movw	r2, #667	@ 0x29b
 801477e:	490b      	ldr	r1, [pc, #44]	@ (80147ac <ip4_reass+0x2bc>)
 8014780:	480b      	ldr	r0, [pc, #44]	@ (80147b0 <ip4_reass+0x2c0>)
 8014782:	f001 fa5b 	bl	8015c3c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8014786:	4b06      	ldr	r3, [pc, #24]	@ (80147a0 <ip4_reass+0x2b0>)
 8014788:	881a      	ldrh	r2, [r3, #0]
 801478a:	8c3b      	ldrh	r3, [r7, #32]
 801478c:	1ad3      	subs	r3, r2, r3
 801478e:	b29a      	uxth	r2, r3
 8014790:	4b03      	ldr	r3, [pc, #12]	@ (80147a0 <ip4_reass+0x2b0>)
 8014792:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8014794:	687b      	ldr	r3, [r7, #4]
 8014796:	e038      	b.n	801480a <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8014798:	2300      	movs	r3, #0
 801479a:	e036      	b.n	801480a <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801479c:	bf00      	nop
 801479e:	e00a      	b.n	80147b6 <ip4_reass+0x2c6>
 80147a0:	2000939c 	.word	0x2000939c
 80147a4:	20009398 	.word	0x20009398
 80147a8:	08020900 	.word	0x08020900
 80147ac:	08020a70 	.word	0x08020a70
 80147b0:	08020948 	.word	0x08020948
    goto nullreturn_ipr;
 80147b4:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80147b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80147b8:	2b00      	cmp	r3, #0
 80147ba:	d106      	bne.n	80147ca <ip4_reass+0x2da>
 80147bc:	4b15      	ldr	r3, [pc, #84]	@ (8014814 <ip4_reass+0x324>)
 80147be:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 80147c2:	4915      	ldr	r1, [pc, #84]	@ (8014818 <ip4_reass+0x328>)
 80147c4:	4815      	ldr	r0, [pc, #84]	@ (801481c <ip4_reass+0x32c>)
 80147c6:	f001 fa39 	bl	8015c3c <iprintf>
  if (ipr->p == NULL) {
 80147ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80147cc:	685b      	ldr	r3, [r3, #4]
 80147ce:	2b00      	cmp	r3, #0
 80147d0:	d116      	bne.n	8014800 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80147d2:	4b13      	ldr	r3, [pc, #76]	@ (8014820 <ip4_reass+0x330>)
 80147d4:	681b      	ldr	r3, [r3, #0]
 80147d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80147d8:	429a      	cmp	r2, r3
 80147da:	d006      	beq.n	80147ea <ip4_reass+0x2fa>
 80147dc:	4b0d      	ldr	r3, [pc, #52]	@ (8014814 <ip4_reass+0x324>)
 80147de:	f240 22ab 	movw	r2, #683	@ 0x2ab
 80147e2:	4910      	ldr	r1, [pc, #64]	@ (8014824 <ip4_reass+0x334>)
 80147e4:	480d      	ldr	r0, [pc, #52]	@ (801481c <ip4_reass+0x32c>)
 80147e6:	f001 fa29 	bl	8015c3c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80147ea:	2100      	movs	r1, #0
 80147ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80147ee:	f7ff fce7 	bl	80141c0 <ip_reass_dequeue_datagram>
 80147f2:	e006      	b.n	8014802 <ip4_reass+0x312>
    goto nullreturn;
 80147f4:	bf00      	nop
 80147f6:	e004      	b.n	8014802 <ip4_reass+0x312>
    goto nullreturn;
 80147f8:	bf00      	nop
 80147fa:	e002      	b.n	8014802 <ip4_reass+0x312>
      goto nullreturn;
 80147fc:	bf00      	nop
 80147fe:	e000      	b.n	8014802 <ip4_reass+0x312>
  }

nullreturn:
 8014800:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8014802:	6878      	ldr	r0, [r7, #4]
 8014804:	f7f7 fbd8 	bl	800bfb8 <pbuf_free>
  return NULL;
 8014808:	2300      	movs	r3, #0
}
 801480a:	4618      	mov	r0, r3
 801480c:	3738      	adds	r7, #56	@ 0x38
 801480e:	46bd      	mov	sp, r7
 8014810:	bd80      	pop	{r7, pc}
 8014812:	bf00      	nop
 8014814:	08020900 	.word	0x08020900
 8014818:	08020a8c 	.word	0x08020a8c
 801481c:	08020948 	.word	0x08020948
 8014820:	20009398 	.word	0x20009398
 8014824:	08020a98 	.word	0x08020a98

08014828 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8014828:	b580      	push	{r7, lr}
 801482a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801482c:	2005      	movs	r0, #5
 801482e:	f7f6 fcdd 	bl	800b1ec <memp_malloc>
 8014832:	4603      	mov	r3, r0
}
 8014834:	4618      	mov	r0, r3
 8014836:	bd80      	pop	{r7, pc}

08014838 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8014838:	b580      	push	{r7, lr}
 801483a:	b082      	sub	sp, #8
 801483c:	af00      	add	r7, sp, #0
 801483e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8014840:	687b      	ldr	r3, [r7, #4]
 8014842:	2b00      	cmp	r3, #0
 8014844:	d106      	bne.n	8014854 <ip_frag_free_pbuf_custom_ref+0x1c>
 8014846:	4b07      	ldr	r3, [pc, #28]	@ (8014864 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8014848:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 801484c:	4906      	ldr	r1, [pc, #24]	@ (8014868 <ip_frag_free_pbuf_custom_ref+0x30>)
 801484e:	4807      	ldr	r0, [pc, #28]	@ (801486c <ip_frag_free_pbuf_custom_ref+0x34>)
 8014850:	f001 f9f4 	bl	8015c3c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8014854:	6879      	ldr	r1, [r7, #4]
 8014856:	2005      	movs	r0, #5
 8014858:	f7f6 fd38 	bl	800b2cc <memp_free>
}
 801485c:	bf00      	nop
 801485e:	3708      	adds	r7, #8
 8014860:	46bd      	mov	sp, r7
 8014862:	bd80      	pop	{r7, pc}
 8014864:	08020900 	.word	0x08020900
 8014868:	08020ab8 	.word	0x08020ab8
 801486c:	08020948 	.word	0x08020948

08014870 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8014870:	b580      	push	{r7, lr}
 8014872:	b084      	sub	sp, #16
 8014874:	af00      	add	r7, sp, #0
 8014876:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8014878:	687b      	ldr	r3, [r7, #4]
 801487a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801487c:	68fb      	ldr	r3, [r7, #12]
 801487e:	2b00      	cmp	r3, #0
 8014880:	d106      	bne.n	8014890 <ipfrag_free_pbuf_custom+0x20>
 8014882:	4b11      	ldr	r3, [pc, #68]	@ (80148c8 <ipfrag_free_pbuf_custom+0x58>)
 8014884:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8014888:	4910      	ldr	r1, [pc, #64]	@ (80148cc <ipfrag_free_pbuf_custom+0x5c>)
 801488a:	4811      	ldr	r0, [pc, #68]	@ (80148d0 <ipfrag_free_pbuf_custom+0x60>)
 801488c:	f001 f9d6 	bl	8015c3c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8014890:	68fa      	ldr	r2, [r7, #12]
 8014892:	687b      	ldr	r3, [r7, #4]
 8014894:	429a      	cmp	r2, r3
 8014896:	d006      	beq.n	80148a6 <ipfrag_free_pbuf_custom+0x36>
 8014898:	4b0b      	ldr	r3, [pc, #44]	@ (80148c8 <ipfrag_free_pbuf_custom+0x58>)
 801489a:	f240 22cf 	movw	r2, #719	@ 0x2cf
 801489e:	490d      	ldr	r1, [pc, #52]	@ (80148d4 <ipfrag_free_pbuf_custom+0x64>)
 80148a0:	480b      	ldr	r0, [pc, #44]	@ (80148d0 <ipfrag_free_pbuf_custom+0x60>)
 80148a2:	f001 f9cb 	bl	8015c3c <iprintf>
  if (pcr->original != NULL) {
 80148a6:	68fb      	ldr	r3, [r7, #12]
 80148a8:	695b      	ldr	r3, [r3, #20]
 80148aa:	2b00      	cmp	r3, #0
 80148ac:	d004      	beq.n	80148b8 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80148ae:	68fb      	ldr	r3, [r7, #12]
 80148b0:	695b      	ldr	r3, [r3, #20]
 80148b2:	4618      	mov	r0, r3
 80148b4:	f7f7 fb80 	bl	800bfb8 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80148b8:	68f8      	ldr	r0, [r7, #12]
 80148ba:	f7ff ffbd 	bl	8014838 <ip_frag_free_pbuf_custom_ref>
}
 80148be:	bf00      	nop
 80148c0:	3710      	adds	r7, #16
 80148c2:	46bd      	mov	sp, r7
 80148c4:	bd80      	pop	{r7, pc}
 80148c6:	bf00      	nop
 80148c8:	08020900 	.word	0x08020900
 80148cc:	08020ac4 	.word	0x08020ac4
 80148d0:	08020948 	.word	0x08020948
 80148d4:	08020ad0 	.word	0x08020ad0

080148d8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80148d8:	b580      	push	{r7, lr}
 80148da:	b094      	sub	sp, #80	@ 0x50
 80148dc:	af02      	add	r7, sp, #8
 80148de:	60f8      	str	r0, [r7, #12]
 80148e0:	60b9      	str	r1, [r7, #8]
 80148e2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80148e4:	2300      	movs	r3, #0
 80148e6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80148ea:	68bb      	ldr	r3, [r7, #8]
 80148ec:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80148ee:	3b14      	subs	r3, #20
 80148f0:	2b00      	cmp	r3, #0
 80148f2:	da00      	bge.n	80148f6 <ip4_frag+0x1e>
 80148f4:	3307      	adds	r3, #7
 80148f6:	10db      	asrs	r3, r3, #3
 80148f8:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80148fa:	2314      	movs	r3, #20
 80148fc:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80148fe:	68fb      	ldr	r3, [r7, #12]
 8014900:	685b      	ldr	r3, [r3, #4]
 8014902:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 8014904:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014906:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8014908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801490a:	781b      	ldrb	r3, [r3, #0]
 801490c:	f003 030f 	and.w	r3, r3, #15
 8014910:	b2db      	uxtb	r3, r3
 8014912:	009b      	lsls	r3, r3, #2
 8014914:	b2db      	uxtb	r3, r3
 8014916:	2b14      	cmp	r3, #20
 8014918:	d002      	beq.n	8014920 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801491a:	f06f 0305 	mvn.w	r3, #5
 801491e:	e110      	b.n	8014b42 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8014920:	68fb      	ldr	r3, [r7, #12]
 8014922:	895b      	ldrh	r3, [r3, #10]
 8014924:	2b13      	cmp	r3, #19
 8014926:	d809      	bhi.n	801493c <ip4_frag+0x64>
 8014928:	4b88      	ldr	r3, [pc, #544]	@ (8014b4c <ip4_frag+0x274>)
 801492a:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 801492e:	4988      	ldr	r1, [pc, #544]	@ (8014b50 <ip4_frag+0x278>)
 8014930:	4888      	ldr	r0, [pc, #544]	@ (8014b54 <ip4_frag+0x27c>)
 8014932:	f001 f983 	bl	8015c3c <iprintf>
 8014936:	f06f 0305 	mvn.w	r3, #5
 801493a:	e102      	b.n	8014b42 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801493c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801493e:	88db      	ldrh	r3, [r3, #6]
 8014940:	b29b      	uxth	r3, r3
 8014942:	4618      	mov	r0, r3
 8014944:	f7f5 fd10 	bl	800a368 <lwip_htons>
 8014948:	4603      	mov	r3, r0
 801494a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 801494c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801494e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014952:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8014956:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8014958:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801495c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801495e:	68fb      	ldr	r3, [r7, #12]
 8014960:	891b      	ldrh	r3, [r3, #8]
 8014962:	3b14      	subs	r3, #20
 8014964:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 8014968:	e0e1      	b.n	8014b2e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801496a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801496c:	00db      	lsls	r3, r3, #3
 801496e:	b29b      	uxth	r3, r3
 8014970:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8014974:	4293      	cmp	r3, r2
 8014976:	bf28      	it	cs
 8014978:	4613      	movcs	r3, r2
 801497a:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801497c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8014980:	2114      	movs	r1, #20
 8014982:	200e      	movs	r0, #14
 8014984:	f7f7 f834 	bl	800b9f0 <pbuf_alloc>
 8014988:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 801498a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801498c:	2b00      	cmp	r3, #0
 801498e:	f000 80d5 	beq.w	8014b3c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8014992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014994:	895b      	ldrh	r3, [r3, #10]
 8014996:	2b13      	cmp	r3, #19
 8014998:	d806      	bhi.n	80149a8 <ip4_frag+0xd0>
 801499a:	4b6c      	ldr	r3, [pc, #432]	@ (8014b4c <ip4_frag+0x274>)
 801499c:	f44f 7249 	mov.w	r2, #804	@ 0x324
 80149a0:	496d      	ldr	r1, [pc, #436]	@ (8014b58 <ip4_frag+0x280>)
 80149a2:	486c      	ldr	r0, [pc, #432]	@ (8014b54 <ip4_frag+0x27c>)
 80149a4:	f001 f94a 	bl	8015c3c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80149a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80149aa:	685b      	ldr	r3, [r3, #4]
 80149ac:	2214      	movs	r2, #20
 80149ae:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80149b0:	4618      	mov	r0, r3
 80149b2:	f001 fa9a 	bl	8015eea <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80149b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80149b8:	685b      	ldr	r3, [r3, #4]
 80149ba:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 80149bc:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80149be:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 80149c2:	e064      	b.n	8014a8e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80149c4:	68fb      	ldr	r3, [r7, #12]
 80149c6:	895a      	ldrh	r2, [r3, #10]
 80149c8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80149ca:	1ad3      	subs	r3, r2, r3
 80149cc:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80149ce:	68fb      	ldr	r3, [r7, #12]
 80149d0:	895b      	ldrh	r3, [r3, #10]
 80149d2:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80149d4:	429a      	cmp	r2, r3
 80149d6:	d906      	bls.n	80149e6 <ip4_frag+0x10e>
 80149d8:	4b5c      	ldr	r3, [pc, #368]	@ (8014b4c <ip4_frag+0x274>)
 80149da:	f240 322d 	movw	r2, #813	@ 0x32d
 80149de:	495f      	ldr	r1, [pc, #380]	@ (8014b5c <ip4_frag+0x284>)
 80149e0:	485c      	ldr	r0, [pc, #368]	@ (8014b54 <ip4_frag+0x27c>)
 80149e2:	f001 f92b 	bl	8015c3c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80149e6:	8bfa      	ldrh	r2, [r7, #30]
 80149e8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80149ec:	4293      	cmp	r3, r2
 80149ee:	bf28      	it	cs
 80149f0:	4613      	movcs	r3, r2
 80149f2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80149f6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80149fa:	2b00      	cmp	r3, #0
 80149fc:	d105      	bne.n	8014a0a <ip4_frag+0x132>
        poff = 0;
 80149fe:	2300      	movs	r3, #0
 8014a00:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8014a02:	68fb      	ldr	r3, [r7, #12]
 8014a04:	681b      	ldr	r3, [r3, #0]
 8014a06:	60fb      	str	r3, [r7, #12]
        continue;
 8014a08:	e041      	b.n	8014a8e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8014a0a:	f7ff ff0d 	bl	8014828 <ip_frag_alloc_pbuf_custom_ref>
 8014a0e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8014a10:	69bb      	ldr	r3, [r7, #24]
 8014a12:	2b00      	cmp	r3, #0
 8014a14:	d103      	bne.n	8014a1e <ip4_frag+0x146>
        pbuf_free(rambuf);
 8014a16:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014a18:	f7f7 face 	bl	800bfb8 <pbuf_free>
        goto memerr;
 8014a1c:	e08f      	b.n	8014b3e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8014a1e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8014a20:	68fb      	ldr	r3, [r7, #12]
 8014a22:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8014a24:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8014a26:	4413      	add	r3, r2
 8014a28:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8014a2c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8014a30:	9201      	str	r2, [sp, #4]
 8014a32:	9300      	str	r3, [sp, #0]
 8014a34:	4603      	mov	r3, r0
 8014a36:	2241      	movs	r2, #65	@ 0x41
 8014a38:	2000      	movs	r0, #0
 8014a3a:	f7f7 f903 	bl	800bc44 <pbuf_alloced_custom>
 8014a3e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8014a40:	697b      	ldr	r3, [r7, #20]
 8014a42:	2b00      	cmp	r3, #0
 8014a44:	d106      	bne.n	8014a54 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8014a46:	69b8      	ldr	r0, [r7, #24]
 8014a48:	f7ff fef6 	bl	8014838 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8014a4c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014a4e:	f7f7 fab3 	bl	800bfb8 <pbuf_free>
        goto memerr;
 8014a52:	e074      	b.n	8014b3e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8014a54:	68f8      	ldr	r0, [r7, #12]
 8014a56:	f7f7 fb4f 	bl	800c0f8 <pbuf_ref>
      pcr->original = p;
 8014a5a:	69bb      	ldr	r3, [r7, #24]
 8014a5c:	68fa      	ldr	r2, [r7, #12]
 8014a5e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8014a60:	69bb      	ldr	r3, [r7, #24]
 8014a62:	4a3f      	ldr	r2, [pc, #252]	@ (8014b60 <ip4_frag+0x288>)
 8014a64:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8014a66:	6979      	ldr	r1, [r7, #20]
 8014a68:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014a6a:	f7f7 fb67 	bl	800c13c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8014a6e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8014a72:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8014a76:	1ad3      	subs	r3, r2, r3
 8014a78:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8014a7c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8014a80:	2b00      	cmp	r3, #0
 8014a82:	d004      	beq.n	8014a8e <ip4_frag+0x1b6>
        poff = 0;
 8014a84:	2300      	movs	r3, #0
 8014a86:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8014a88:	68fb      	ldr	r3, [r7, #12]
 8014a8a:	681b      	ldr	r3, [r3, #0]
 8014a8c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8014a8e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8014a92:	2b00      	cmp	r3, #0
 8014a94:	d196      	bne.n	80149c4 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8014a96:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8014a98:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8014a9c:	4413      	add	r3, r2
 8014a9e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8014aa0:	68bb      	ldr	r3, [r7, #8]
 8014aa2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8014aa4:	f1a3 0213 	sub.w	r2, r3, #19
 8014aa8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8014aac:	429a      	cmp	r2, r3
 8014aae:	bfcc      	ite	gt
 8014ab0:	2301      	movgt	r3, #1
 8014ab2:	2300      	movle	r3, #0
 8014ab4:	b2db      	uxtb	r3, r3
 8014ab6:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8014ab8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8014abc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014ac0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 8014ac2:	6a3b      	ldr	r3, [r7, #32]
 8014ac4:	2b00      	cmp	r3, #0
 8014ac6:	d002      	beq.n	8014ace <ip4_frag+0x1f6>
 8014ac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014aca:	2b00      	cmp	r3, #0
 8014acc:	d003      	beq.n	8014ad6 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8014ace:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8014ad0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8014ad4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8014ad6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8014ad8:	4618      	mov	r0, r3
 8014ada:	f7f5 fc45 	bl	800a368 <lwip_htons>
 8014ade:	4603      	mov	r3, r0
 8014ae0:	461a      	mov	r2, r3
 8014ae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014ae4:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8014ae6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8014ae8:	3314      	adds	r3, #20
 8014aea:	b29b      	uxth	r3, r3
 8014aec:	4618      	mov	r0, r3
 8014aee:	f7f5 fc3b 	bl	800a368 <lwip_htons>
 8014af2:	4603      	mov	r3, r0
 8014af4:	461a      	mov	r2, r3
 8014af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014af8:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8014afa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014afc:	2200      	movs	r2, #0
 8014afe:	729a      	strb	r2, [r3, #10]
 8014b00:	2200      	movs	r2, #0
 8014b02:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8014b04:	68bb      	ldr	r3, [r7, #8]
 8014b06:	695b      	ldr	r3, [r3, #20]
 8014b08:	687a      	ldr	r2, [r7, #4]
 8014b0a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8014b0c:	68b8      	ldr	r0, [r7, #8]
 8014b0e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8014b10:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014b12:	f7f7 fa51 	bl	800bfb8 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8014b16:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8014b1a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8014b1c:	1ad3      	subs	r3, r2, r3
 8014b1e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 8014b22:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8014b26:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8014b28:	4413      	add	r3, r2
 8014b2a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 8014b2e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8014b32:	2b00      	cmp	r3, #0
 8014b34:	f47f af19 	bne.w	801496a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8014b38:	2300      	movs	r3, #0
 8014b3a:	e002      	b.n	8014b42 <ip4_frag+0x26a>
      goto memerr;
 8014b3c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8014b3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014b42:	4618      	mov	r0, r3
 8014b44:	3748      	adds	r7, #72	@ 0x48
 8014b46:	46bd      	mov	sp, r7
 8014b48:	bd80      	pop	{r7, pc}
 8014b4a:	bf00      	nop
 8014b4c:	08020900 	.word	0x08020900
 8014b50:	08020adc 	.word	0x08020adc
 8014b54:	08020948 	.word	0x08020948
 8014b58:	08020af8 	.word	0x08020af8
 8014b5c:	08020b18 	.word	0x08020b18
 8014b60:	08014871 	.word	0x08014871

08014b64 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8014b64:	b580      	push	{r7, lr}
 8014b66:	b086      	sub	sp, #24
 8014b68:	af00      	add	r7, sp, #0
 8014b6a:	6078      	str	r0, [r7, #4]
 8014b6c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8014b6e:	230e      	movs	r3, #14
 8014b70:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8014b72:	687b      	ldr	r3, [r7, #4]
 8014b74:	895b      	ldrh	r3, [r3, #10]
 8014b76:	2b0e      	cmp	r3, #14
 8014b78:	d96e      	bls.n	8014c58 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8014b7a:	687b      	ldr	r3, [r7, #4]
 8014b7c:	7bdb      	ldrb	r3, [r3, #15]
 8014b7e:	2b00      	cmp	r3, #0
 8014b80:	d106      	bne.n	8014b90 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8014b82:	683b      	ldr	r3, [r7, #0]
 8014b84:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8014b88:	3301      	adds	r3, #1
 8014b8a:	b2da      	uxtb	r2, r3
 8014b8c:	687b      	ldr	r3, [r7, #4]
 8014b8e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8014b90:	687b      	ldr	r3, [r7, #4]
 8014b92:	685b      	ldr	r3, [r3, #4]
 8014b94:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8014b96:	693b      	ldr	r3, [r7, #16]
 8014b98:	7b1a      	ldrb	r2, [r3, #12]
 8014b9a:	7b5b      	ldrb	r3, [r3, #13]
 8014b9c:	021b      	lsls	r3, r3, #8
 8014b9e:	4313      	orrs	r3, r2
 8014ba0:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8014ba2:	693b      	ldr	r3, [r7, #16]
 8014ba4:	781b      	ldrb	r3, [r3, #0]
 8014ba6:	f003 0301 	and.w	r3, r3, #1
 8014baa:	2b00      	cmp	r3, #0
 8014bac:	d023      	beq.n	8014bf6 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8014bae:	693b      	ldr	r3, [r7, #16]
 8014bb0:	781b      	ldrb	r3, [r3, #0]
 8014bb2:	2b01      	cmp	r3, #1
 8014bb4:	d10f      	bne.n	8014bd6 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8014bb6:	693b      	ldr	r3, [r7, #16]
 8014bb8:	785b      	ldrb	r3, [r3, #1]
 8014bba:	2b00      	cmp	r3, #0
 8014bbc:	d11b      	bne.n	8014bf6 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8014bbe:	693b      	ldr	r3, [r7, #16]
 8014bc0:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8014bc2:	2b5e      	cmp	r3, #94	@ 0x5e
 8014bc4:	d117      	bne.n	8014bf6 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8014bc6:	687b      	ldr	r3, [r7, #4]
 8014bc8:	7b5b      	ldrb	r3, [r3, #13]
 8014bca:	f043 0310 	orr.w	r3, r3, #16
 8014bce:	b2da      	uxtb	r2, r3
 8014bd0:	687b      	ldr	r3, [r7, #4]
 8014bd2:	735a      	strb	r2, [r3, #13]
 8014bd4:	e00f      	b.n	8014bf6 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8014bd6:	693b      	ldr	r3, [r7, #16]
 8014bd8:	2206      	movs	r2, #6
 8014bda:	4928      	ldr	r1, [pc, #160]	@ (8014c7c <ethernet_input+0x118>)
 8014bdc:	4618      	mov	r0, r3
 8014bde:	f001 f8a4 	bl	8015d2a <memcmp>
 8014be2:	4603      	mov	r3, r0
 8014be4:	2b00      	cmp	r3, #0
 8014be6:	d106      	bne.n	8014bf6 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8014be8:	687b      	ldr	r3, [r7, #4]
 8014bea:	7b5b      	ldrb	r3, [r3, #13]
 8014bec:	f043 0308 	orr.w	r3, r3, #8
 8014bf0:	b2da      	uxtb	r2, r3
 8014bf2:	687b      	ldr	r3, [r7, #4]
 8014bf4:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8014bf6:	89fb      	ldrh	r3, [r7, #14]
 8014bf8:	2b08      	cmp	r3, #8
 8014bfa:	d003      	beq.n	8014c04 <ethernet_input+0xa0>
 8014bfc:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8014c00:	d014      	beq.n	8014c2c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8014c02:	e032      	b.n	8014c6a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8014c04:	683b      	ldr	r3, [r7, #0]
 8014c06:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014c0a:	f003 0308 	and.w	r3, r3, #8
 8014c0e:	2b00      	cmp	r3, #0
 8014c10:	d024      	beq.n	8014c5c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8014c12:	8afb      	ldrh	r3, [r7, #22]
 8014c14:	4619      	mov	r1, r3
 8014c16:	6878      	ldr	r0, [r7, #4]
 8014c18:	f7f7 f948 	bl	800beac <pbuf_remove_header>
 8014c1c:	4603      	mov	r3, r0
 8014c1e:	2b00      	cmp	r3, #0
 8014c20:	d11e      	bne.n	8014c60 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8014c22:	6839      	ldr	r1, [r7, #0]
 8014c24:	6878      	ldr	r0, [r7, #4]
 8014c26:	f7fe ff21 	bl	8013a6c <ip4_input>
      break;
 8014c2a:	e013      	b.n	8014c54 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8014c2c:	683b      	ldr	r3, [r7, #0]
 8014c2e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014c32:	f003 0308 	and.w	r3, r3, #8
 8014c36:	2b00      	cmp	r3, #0
 8014c38:	d014      	beq.n	8014c64 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8014c3a:	8afb      	ldrh	r3, [r7, #22]
 8014c3c:	4619      	mov	r1, r3
 8014c3e:	6878      	ldr	r0, [r7, #4]
 8014c40:	f7f7 f934 	bl	800beac <pbuf_remove_header>
 8014c44:	4603      	mov	r3, r0
 8014c46:	2b00      	cmp	r3, #0
 8014c48:	d10e      	bne.n	8014c68 <ethernet_input+0x104>
        etharp_input(p, netif);
 8014c4a:	6839      	ldr	r1, [r7, #0]
 8014c4c:	6878      	ldr	r0, [r7, #4]
 8014c4e:	f7fe f8c1 	bl	8012dd4 <etharp_input>
      break;
 8014c52:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8014c54:	2300      	movs	r3, #0
 8014c56:	e00c      	b.n	8014c72 <ethernet_input+0x10e>
    goto free_and_return;
 8014c58:	bf00      	nop
 8014c5a:	e006      	b.n	8014c6a <ethernet_input+0x106>
        goto free_and_return;
 8014c5c:	bf00      	nop
 8014c5e:	e004      	b.n	8014c6a <ethernet_input+0x106>
        goto free_and_return;
 8014c60:	bf00      	nop
 8014c62:	e002      	b.n	8014c6a <ethernet_input+0x106>
        goto free_and_return;
 8014c64:	bf00      	nop
 8014c66:	e000      	b.n	8014c6a <ethernet_input+0x106>
        goto free_and_return;
 8014c68:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8014c6a:	6878      	ldr	r0, [r7, #4]
 8014c6c:	f7f7 f9a4 	bl	800bfb8 <pbuf_free>
  return ERR_OK;
 8014c70:	2300      	movs	r3, #0
}
 8014c72:	4618      	mov	r0, r3
 8014c74:	3718      	adds	r7, #24
 8014c76:	46bd      	mov	sp, r7
 8014c78:	bd80      	pop	{r7, pc}
 8014c7a:	bf00      	nop
 8014c7c:	08020cbc 	.word	0x08020cbc

08014c80 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8014c80:	b580      	push	{r7, lr}
 8014c82:	b086      	sub	sp, #24
 8014c84:	af00      	add	r7, sp, #0
 8014c86:	60f8      	str	r0, [r7, #12]
 8014c88:	60b9      	str	r1, [r7, #8]
 8014c8a:	607a      	str	r2, [r7, #4]
 8014c8c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8014c8e:	8c3b      	ldrh	r3, [r7, #32]
 8014c90:	4618      	mov	r0, r3
 8014c92:	f7f5 fb69 	bl	800a368 <lwip_htons>
 8014c96:	4603      	mov	r3, r0
 8014c98:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8014c9a:	210e      	movs	r1, #14
 8014c9c:	68b8      	ldr	r0, [r7, #8]
 8014c9e:	f7f7 f8f5 	bl	800be8c <pbuf_add_header>
 8014ca2:	4603      	mov	r3, r0
 8014ca4:	2b00      	cmp	r3, #0
 8014ca6:	d125      	bne.n	8014cf4 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8014ca8:	68bb      	ldr	r3, [r7, #8]
 8014caa:	685b      	ldr	r3, [r3, #4]
 8014cac:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8014cae:	693b      	ldr	r3, [r7, #16]
 8014cb0:	8afa      	ldrh	r2, [r7, #22]
 8014cb2:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8014cb4:	693b      	ldr	r3, [r7, #16]
 8014cb6:	2206      	movs	r2, #6
 8014cb8:	6839      	ldr	r1, [r7, #0]
 8014cba:	4618      	mov	r0, r3
 8014cbc:	f001 f915 	bl	8015eea <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8014cc0:	693b      	ldr	r3, [r7, #16]
 8014cc2:	3306      	adds	r3, #6
 8014cc4:	2206      	movs	r2, #6
 8014cc6:	6879      	ldr	r1, [r7, #4]
 8014cc8:	4618      	mov	r0, r3
 8014cca:	f001 f90e 	bl	8015eea <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8014cce:	68fb      	ldr	r3, [r7, #12]
 8014cd0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8014cd4:	2b06      	cmp	r3, #6
 8014cd6:	d006      	beq.n	8014ce6 <ethernet_output+0x66>
 8014cd8:	4b0a      	ldr	r3, [pc, #40]	@ (8014d04 <ethernet_output+0x84>)
 8014cda:	f44f 7299 	mov.w	r2, #306	@ 0x132
 8014cde:	490a      	ldr	r1, [pc, #40]	@ (8014d08 <ethernet_output+0x88>)
 8014ce0:	480a      	ldr	r0, [pc, #40]	@ (8014d0c <ethernet_output+0x8c>)
 8014ce2:	f000 ffab 	bl	8015c3c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8014ce6:	68fb      	ldr	r3, [r7, #12]
 8014ce8:	699b      	ldr	r3, [r3, #24]
 8014cea:	68b9      	ldr	r1, [r7, #8]
 8014cec:	68f8      	ldr	r0, [r7, #12]
 8014cee:	4798      	blx	r3
 8014cf0:	4603      	mov	r3, r0
 8014cf2:	e002      	b.n	8014cfa <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8014cf4:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8014cf6:	f06f 0301 	mvn.w	r3, #1
}
 8014cfa:	4618      	mov	r0, r3
 8014cfc:	3718      	adds	r7, #24
 8014cfe:	46bd      	mov	sp, r7
 8014d00:	bd80      	pop	{r7, pc}
 8014d02:	bf00      	nop
 8014d04:	08020b28 	.word	0x08020b28
 8014d08:	08020b60 	.word	0x08020b60
 8014d0c:	08020b94 	.word	0x08020b94

08014d10 <atof>:
 8014d10:	2100      	movs	r1, #0
 8014d12:	f000 be41 	b.w	8015998 <strtod>
	...

08014d18 <rand>:
 8014d18:	4b16      	ldr	r3, [pc, #88]	@ (8014d74 <rand+0x5c>)
 8014d1a:	b510      	push	{r4, lr}
 8014d1c:	681c      	ldr	r4, [r3, #0]
 8014d1e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014d20:	b9b3      	cbnz	r3, 8014d50 <rand+0x38>
 8014d22:	2018      	movs	r0, #24
 8014d24:	f001 fc9a 	bl	801665c <malloc>
 8014d28:	4602      	mov	r2, r0
 8014d2a:	6320      	str	r0, [r4, #48]	@ 0x30
 8014d2c:	b920      	cbnz	r0, 8014d38 <rand+0x20>
 8014d2e:	4b12      	ldr	r3, [pc, #72]	@ (8014d78 <rand+0x60>)
 8014d30:	4812      	ldr	r0, [pc, #72]	@ (8014d7c <rand+0x64>)
 8014d32:	2152      	movs	r1, #82	@ 0x52
 8014d34:	f001 f8f0 	bl	8015f18 <__assert_func>
 8014d38:	4911      	ldr	r1, [pc, #68]	@ (8014d80 <rand+0x68>)
 8014d3a:	4b12      	ldr	r3, [pc, #72]	@ (8014d84 <rand+0x6c>)
 8014d3c:	e9c0 1300 	strd	r1, r3, [r0]
 8014d40:	4b11      	ldr	r3, [pc, #68]	@ (8014d88 <rand+0x70>)
 8014d42:	6083      	str	r3, [r0, #8]
 8014d44:	230b      	movs	r3, #11
 8014d46:	8183      	strh	r3, [r0, #12]
 8014d48:	2100      	movs	r1, #0
 8014d4a:	2001      	movs	r0, #1
 8014d4c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8014d50:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8014d52:	480e      	ldr	r0, [pc, #56]	@ (8014d8c <rand+0x74>)
 8014d54:	690b      	ldr	r3, [r1, #16]
 8014d56:	694c      	ldr	r4, [r1, #20]
 8014d58:	4a0d      	ldr	r2, [pc, #52]	@ (8014d90 <rand+0x78>)
 8014d5a:	4358      	muls	r0, r3
 8014d5c:	fb02 0004 	mla	r0, r2, r4, r0
 8014d60:	fba3 3202 	umull	r3, r2, r3, r2
 8014d64:	3301      	adds	r3, #1
 8014d66:	eb40 0002 	adc.w	r0, r0, r2
 8014d6a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8014d6e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8014d72:	bd10      	pop	{r4, pc}
 8014d74:	200005e4 	.word	0x200005e4
 8014d78:	08020cca 	.word	0x08020cca
 8014d7c:	08020ce1 	.word	0x08020ce1
 8014d80:	abcd330e 	.word	0xabcd330e
 8014d84:	e66d1234 	.word	0xe66d1234
 8014d88:	0005deec 	.word	0x0005deec
 8014d8c:	5851f42d 	.word	0x5851f42d
 8014d90:	4c957f2d 	.word	0x4c957f2d

08014d94 <sulp>:
 8014d94:	b570      	push	{r4, r5, r6, lr}
 8014d96:	4604      	mov	r4, r0
 8014d98:	460d      	mov	r5, r1
 8014d9a:	ec45 4b10 	vmov	d0, r4, r5
 8014d9e:	4616      	mov	r6, r2
 8014da0:	f002 f890 	bl	8016ec4 <__ulp>
 8014da4:	ec51 0b10 	vmov	r0, r1, d0
 8014da8:	b17e      	cbz	r6, 8014dca <sulp+0x36>
 8014daa:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8014dae:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8014db2:	2b00      	cmp	r3, #0
 8014db4:	dd09      	ble.n	8014dca <sulp+0x36>
 8014db6:	051b      	lsls	r3, r3, #20
 8014db8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8014dbc:	2400      	movs	r4, #0
 8014dbe:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8014dc2:	4622      	mov	r2, r4
 8014dc4:	462b      	mov	r3, r5
 8014dc6:	f7eb fc17 	bl	80005f8 <__aeabi_dmul>
 8014dca:	ec41 0b10 	vmov	d0, r0, r1
 8014dce:	bd70      	pop	{r4, r5, r6, pc}

08014dd0 <_strtod_l>:
 8014dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014dd4:	b09f      	sub	sp, #124	@ 0x7c
 8014dd6:	460c      	mov	r4, r1
 8014dd8:	9217      	str	r2, [sp, #92]	@ 0x5c
 8014dda:	2200      	movs	r2, #0
 8014ddc:	921a      	str	r2, [sp, #104]	@ 0x68
 8014dde:	9005      	str	r0, [sp, #20]
 8014de0:	f04f 0a00 	mov.w	sl, #0
 8014de4:	f04f 0b00 	mov.w	fp, #0
 8014de8:	460a      	mov	r2, r1
 8014dea:	9219      	str	r2, [sp, #100]	@ 0x64
 8014dec:	7811      	ldrb	r1, [r2, #0]
 8014dee:	292b      	cmp	r1, #43	@ 0x2b
 8014df0:	d04a      	beq.n	8014e88 <_strtod_l+0xb8>
 8014df2:	d838      	bhi.n	8014e66 <_strtod_l+0x96>
 8014df4:	290d      	cmp	r1, #13
 8014df6:	d832      	bhi.n	8014e5e <_strtod_l+0x8e>
 8014df8:	2908      	cmp	r1, #8
 8014dfa:	d832      	bhi.n	8014e62 <_strtod_l+0x92>
 8014dfc:	2900      	cmp	r1, #0
 8014dfe:	d03b      	beq.n	8014e78 <_strtod_l+0xa8>
 8014e00:	2200      	movs	r2, #0
 8014e02:	920e      	str	r2, [sp, #56]	@ 0x38
 8014e04:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8014e06:	782a      	ldrb	r2, [r5, #0]
 8014e08:	2a30      	cmp	r2, #48	@ 0x30
 8014e0a:	f040 80b2 	bne.w	8014f72 <_strtod_l+0x1a2>
 8014e0e:	786a      	ldrb	r2, [r5, #1]
 8014e10:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8014e14:	2a58      	cmp	r2, #88	@ 0x58
 8014e16:	d16e      	bne.n	8014ef6 <_strtod_l+0x126>
 8014e18:	9302      	str	r3, [sp, #8]
 8014e1a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014e1c:	9301      	str	r3, [sp, #4]
 8014e1e:	ab1a      	add	r3, sp, #104	@ 0x68
 8014e20:	9300      	str	r3, [sp, #0]
 8014e22:	4a8f      	ldr	r2, [pc, #572]	@ (8015060 <_strtod_l+0x290>)
 8014e24:	9805      	ldr	r0, [sp, #20]
 8014e26:	ab1b      	add	r3, sp, #108	@ 0x6c
 8014e28:	a919      	add	r1, sp, #100	@ 0x64
 8014e2a:	f001 f945 	bl	80160b8 <__gethex>
 8014e2e:	f010 060f 	ands.w	r6, r0, #15
 8014e32:	4604      	mov	r4, r0
 8014e34:	d005      	beq.n	8014e42 <_strtod_l+0x72>
 8014e36:	2e06      	cmp	r6, #6
 8014e38:	d128      	bne.n	8014e8c <_strtod_l+0xbc>
 8014e3a:	3501      	adds	r5, #1
 8014e3c:	2300      	movs	r3, #0
 8014e3e:	9519      	str	r5, [sp, #100]	@ 0x64
 8014e40:	930e      	str	r3, [sp, #56]	@ 0x38
 8014e42:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8014e44:	2b00      	cmp	r3, #0
 8014e46:	f040 858e 	bne.w	8015966 <_strtod_l+0xb96>
 8014e4a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014e4c:	b1cb      	cbz	r3, 8014e82 <_strtod_l+0xb2>
 8014e4e:	4652      	mov	r2, sl
 8014e50:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8014e54:	ec43 2b10 	vmov	d0, r2, r3
 8014e58:	b01f      	add	sp, #124	@ 0x7c
 8014e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e5e:	2920      	cmp	r1, #32
 8014e60:	d1ce      	bne.n	8014e00 <_strtod_l+0x30>
 8014e62:	3201      	adds	r2, #1
 8014e64:	e7c1      	b.n	8014dea <_strtod_l+0x1a>
 8014e66:	292d      	cmp	r1, #45	@ 0x2d
 8014e68:	d1ca      	bne.n	8014e00 <_strtod_l+0x30>
 8014e6a:	2101      	movs	r1, #1
 8014e6c:	910e      	str	r1, [sp, #56]	@ 0x38
 8014e6e:	1c51      	adds	r1, r2, #1
 8014e70:	9119      	str	r1, [sp, #100]	@ 0x64
 8014e72:	7852      	ldrb	r2, [r2, #1]
 8014e74:	2a00      	cmp	r2, #0
 8014e76:	d1c5      	bne.n	8014e04 <_strtod_l+0x34>
 8014e78:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8014e7a:	9419      	str	r4, [sp, #100]	@ 0x64
 8014e7c:	2b00      	cmp	r3, #0
 8014e7e:	f040 8570 	bne.w	8015962 <_strtod_l+0xb92>
 8014e82:	4652      	mov	r2, sl
 8014e84:	465b      	mov	r3, fp
 8014e86:	e7e5      	b.n	8014e54 <_strtod_l+0x84>
 8014e88:	2100      	movs	r1, #0
 8014e8a:	e7ef      	b.n	8014e6c <_strtod_l+0x9c>
 8014e8c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8014e8e:	b13a      	cbz	r2, 8014ea0 <_strtod_l+0xd0>
 8014e90:	2135      	movs	r1, #53	@ 0x35
 8014e92:	a81c      	add	r0, sp, #112	@ 0x70
 8014e94:	f002 f910 	bl	80170b8 <__copybits>
 8014e98:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8014e9a:	9805      	ldr	r0, [sp, #20]
 8014e9c:	f001 fce6 	bl	801686c <_Bfree>
 8014ea0:	3e01      	subs	r6, #1
 8014ea2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8014ea4:	2e04      	cmp	r6, #4
 8014ea6:	d806      	bhi.n	8014eb6 <_strtod_l+0xe6>
 8014ea8:	e8df f006 	tbb	[pc, r6]
 8014eac:	201d0314 	.word	0x201d0314
 8014eb0:	14          	.byte	0x14
 8014eb1:	00          	.byte	0x00
 8014eb2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8014eb6:	05e1      	lsls	r1, r4, #23
 8014eb8:	bf48      	it	mi
 8014eba:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8014ebe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8014ec2:	0d1b      	lsrs	r3, r3, #20
 8014ec4:	051b      	lsls	r3, r3, #20
 8014ec6:	2b00      	cmp	r3, #0
 8014ec8:	d1bb      	bne.n	8014e42 <_strtod_l+0x72>
 8014eca:	f000 ffd9 	bl	8015e80 <__errno>
 8014ece:	2322      	movs	r3, #34	@ 0x22
 8014ed0:	6003      	str	r3, [r0, #0]
 8014ed2:	e7b6      	b.n	8014e42 <_strtod_l+0x72>
 8014ed4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8014ed8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8014edc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8014ee0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8014ee4:	e7e7      	b.n	8014eb6 <_strtod_l+0xe6>
 8014ee6:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8015068 <_strtod_l+0x298>
 8014eea:	e7e4      	b.n	8014eb6 <_strtod_l+0xe6>
 8014eec:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8014ef0:	f04f 3aff 	mov.w	sl, #4294967295
 8014ef4:	e7df      	b.n	8014eb6 <_strtod_l+0xe6>
 8014ef6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8014ef8:	1c5a      	adds	r2, r3, #1
 8014efa:	9219      	str	r2, [sp, #100]	@ 0x64
 8014efc:	785b      	ldrb	r3, [r3, #1]
 8014efe:	2b30      	cmp	r3, #48	@ 0x30
 8014f00:	d0f9      	beq.n	8014ef6 <_strtod_l+0x126>
 8014f02:	2b00      	cmp	r3, #0
 8014f04:	d09d      	beq.n	8014e42 <_strtod_l+0x72>
 8014f06:	2301      	movs	r3, #1
 8014f08:	2700      	movs	r7, #0
 8014f0a:	9308      	str	r3, [sp, #32]
 8014f0c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8014f0e:	930c      	str	r3, [sp, #48]	@ 0x30
 8014f10:	970b      	str	r7, [sp, #44]	@ 0x2c
 8014f12:	46b9      	mov	r9, r7
 8014f14:	220a      	movs	r2, #10
 8014f16:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8014f18:	7805      	ldrb	r5, [r0, #0]
 8014f1a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8014f1e:	b2d9      	uxtb	r1, r3
 8014f20:	2909      	cmp	r1, #9
 8014f22:	d928      	bls.n	8014f76 <_strtod_l+0x1a6>
 8014f24:	494f      	ldr	r1, [pc, #316]	@ (8015064 <_strtod_l+0x294>)
 8014f26:	2201      	movs	r2, #1
 8014f28:	f000 ff3e 	bl	8015da8 <strncmp>
 8014f2c:	2800      	cmp	r0, #0
 8014f2e:	d032      	beq.n	8014f96 <_strtod_l+0x1c6>
 8014f30:	2000      	movs	r0, #0
 8014f32:	462a      	mov	r2, r5
 8014f34:	900a      	str	r0, [sp, #40]	@ 0x28
 8014f36:	464d      	mov	r5, r9
 8014f38:	4603      	mov	r3, r0
 8014f3a:	2a65      	cmp	r2, #101	@ 0x65
 8014f3c:	d001      	beq.n	8014f42 <_strtod_l+0x172>
 8014f3e:	2a45      	cmp	r2, #69	@ 0x45
 8014f40:	d114      	bne.n	8014f6c <_strtod_l+0x19c>
 8014f42:	b91d      	cbnz	r5, 8014f4c <_strtod_l+0x17c>
 8014f44:	9a08      	ldr	r2, [sp, #32]
 8014f46:	4302      	orrs	r2, r0
 8014f48:	d096      	beq.n	8014e78 <_strtod_l+0xa8>
 8014f4a:	2500      	movs	r5, #0
 8014f4c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8014f4e:	1c62      	adds	r2, r4, #1
 8014f50:	9219      	str	r2, [sp, #100]	@ 0x64
 8014f52:	7862      	ldrb	r2, [r4, #1]
 8014f54:	2a2b      	cmp	r2, #43	@ 0x2b
 8014f56:	d07a      	beq.n	801504e <_strtod_l+0x27e>
 8014f58:	2a2d      	cmp	r2, #45	@ 0x2d
 8014f5a:	d07e      	beq.n	801505a <_strtod_l+0x28a>
 8014f5c:	f04f 0c00 	mov.w	ip, #0
 8014f60:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8014f64:	2909      	cmp	r1, #9
 8014f66:	f240 8085 	bls.w	8015074 <_strtod_l+0x2a4>
 8014f6a:	9419      	str	r4, [sp, #100]	@ 0x64
 8014f6c:	f04f 0800 	mov.w	r8, #0
 8014f70:	e0a5      	b.n	80150be <_strtod_l+0x2ee>
 8014f72:	2300      	movs	r3, #0
 8014f74:	e7c8      	b.n	8014f08 <_strtod_l+0x138>
 8014f76:	f1b9 0f08 	cmp.w	r9, #8
 8014f7a:	bfd8      	it	le
 8014f7c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8014f7e:	f100 0001 	add.w	r0, r0, #1
 8014f82:	bfda      	itte	le
 8014f84:	fb02 3301 	mlale	r3, r2, r1, r3
 8014f88:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8014f8a:	fb02 3707 	mlagt	r7, r2, r7, r3
 8014f8e:	f109 0901 	add.w	r9, r9, #1
 8014f92:	9019      	str	r0, [sp, #100]	@ 0x64
 8014f94:	e7bf      	b.n	8014f16 <_strtod_l+0x146>
 8014f96:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8014f98:	1c5a      	adds	r2, r3, #1
 8014f9a:	9219      	str	r2, [sp, #100]	@ 0x64
 8014f9c:	785a      	ldrb	r2, [r3, #1]
 8014f9e:	f1b9 0f00 	cmp.w	r9, #0
 8014fa2:	d03b      	beq.n	801501c <_strtod_l+0x24c>
 8014fa4:	900a      	str	r0, [sp, #40]	@ 0x28
 8014fa6:	464d      	mov	r5, r9
 8014fa8:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8014fac:	2b09      	cmp	r3, #9
 8014fae:	d912      	bls.n	8014fd6 <_strtod_l+0x206>
 8014fb0:	2301      	movs	r3, #1
 8014fb2:	e7c2      	b.n	8014f3a <_strtod_l+0x16a>
 8014fb4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8014fb6:	1c5a      	adds	r2, r3, #1
 8014fb8:	9219      	str	r2, [sp, #100]	@ 0x64
 8014fba:	785a      	ldrb	r2, [r3, #1]
 8014fbc:	3001      	adds	r0, #1
 8014fbe:	2a30      	cmp	r2, #48	@ 0x30
 8014fc0:	d0f8      	beq.n	8014fb4 <_strtod_l+0x1e4>
 8014fc2:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8014fc6:	2b08      	cmp	r3, #8
 8014fc8:	f200 84d2 	bhi.w	8015970 <_strtod_l+0xba0>
 8014fcc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8014fce:	900a      	str	r0, [sp, #40]	@ 0x28
 8014fd0:	2000      	movs	r0, #0
 8014fd2:	930c      	str	r3, [sp, #48]	@ 0x30
 8014fd4:	4605      	mov	r5, r0
 8014fd6:	3a30      	subs	r2, #48	@ 0x30
 8014fd8:	f100 0301 	add.w	r3, r0, #1
 8014fdc:	d018      	beq.n	8015010 <_strtod_l+0x240>
 8014fde:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8014fe0:	4419      	add	r1, r3
 8014fe2:	910a      	str	r1, [sp, #40]	@ 0x28
 8014fe4:	462e      	mov	r6, r5
 8014fe6:	f04f 0e0a 	mov.w	lr, #10
 8014fea:	1c71      	adds	r1, r6, #1
 8014fec:	eba1 0c05 	sub.w	ip, r1, r5
 8014ff0:	4563      	cmp	r3, ip
 8014ff2:	dc15      	bgt.n	8015020 <_strtod_l+0x250>
 8014ff4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8014ff8:	182b      	adds	r3, r5, r0
 8014ffa:	2b08      	cmp	r3, #8
 8014ffc:	f105 0501 	add.w	r5, r5, #1
 8015000:	4405      	add	r5, r0
 8015002:	dc1a      	bgt.n	801503a <_strtod_l+0x26a>
 8015004:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8015006:	230a      	movs	r3, #10
 8015008:	fb03 2301 	mla	r3, r3, r1, r2
 801500c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801500e:	2300      	movs	r3, #0
 8015010:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8015012:	1c51      	adds	r1, r2, #1
 8015014:	9119      	str	r1, [sp, #100]	@ 0x64
 8015016:	7852      	ldrb	r2, [r2, #1]
 8015018:	4618      	mov	r0, r3
 801501a:	e7c5      	b.n	8014fa8 <_strtod_l+0x1d8>
 801501c:	4648      	mov	r0, r9
 801501e:	e7ce      	b.n	8014fbe <_strtod_l+0x1ee>
 8015020:	2e08      	cmp	r6, #8
 8015022:	dc05      	bgt.n	8015030 <_strtod_l+0x260>
 8015024:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8015026:	fb0e f606 	mul.w	r6, lr, r6
 801502a:	960b      	str	r6, [sp, #44]	@ 0x2c
 801502c:	460e      	mov	r6, r1
 801502e:	e7dc      	b.n	8014fea <_strtod_l+0x21a>
 8015030:	2910      	cmp	r1, #16
 8015032:	bfd8      	it	le
 8015034:	fb0e f707 	mulle.w	r7, lr, r7
 8015038:	e7f8      	b.n	801502c <_strtod_l+0x25c>
 801503a:	2b0f      	cmp	r3, #15
 801503c:	bfdc      	itt	le
 801503e:	230a      	movle	r3, #10
 8015040:	fb03 2707 	mlale	r7, r3, r7, r2
 8015044:	e7e3      	b.n	801500e <_strtod_l+0x23e>
 8015046:	2300      	movs	r3, #0
 8015048:	930a      	str	r3, [sp, #40]	@ 0x28
 801504a:	2301      	movs	r3, #1
 801504c:	e77a      	b.n	8014f44 <_strtod_l+0x174>
 801504e:	f04f 0c00 	mov.w	ip, #0
 8015052:	1ca2      	adds	r2, r4, #2
 8015054:	9219      	str	r2, [sp, #100]	@ 0x64
 8015056:	78a2      	ldrb	r2, [r4, #2]
 8015058:	e782      	b.n	8014f60 <_strtod_l+0x190>
 801505a:	f04f 0c01 	mov.w	ip, #1
 801505e:	e7f8      	b.n	8015052 <_strtod_l+0x282>
 8015060:	08020e9c 	.word	0x08020e9c
 8015064:	08020d39 	.word	0x08020d39
 8015068:	7ff00000 	.word	0x7ff00000
 801506c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801506e:	1c51      	adds	r1, r2, #1
 8015070:	9119      	str	r1, [sp, #100]	@ 0x64
 8015072:	7852      	ldrb	r2, [r2, #1]
 8015074:	2a30      	cmp	r2, #48	@ 0x30
 8015076:	d0f9      	beq.n	801506c <_strtod_l+0x29c>
 8015078:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 801507c:	2908      	cmp	r1, #8
 801507e:	f63f af75 	bhi.w	8014f6c <_strtod_l+0x19c>
 8015082:	3a30      	subs	r2, #48	@ 0x30
 8015084:	9209      	str	r2, [sp, #36]	@ 0x24
 8015086:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8015088:	920f      	str	r2, [sp, #60]	@ 0x3c
 801508a:	f04f 080a 	mov.w	r8, #10
 801508e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8015090:	1c56      	adds	r6, r2, #1
 8015092:	9619      	str	r6, [sp, #100]	@ 0x64
 8015094:	7852      	ldrb	r2, [r2, #1]
 8015096:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 801509a:	f1be 0f09 	cmp.w	lr, #9
 801509e:	d939      	bls.n	8015114 <_strtod_l+0x344>
 80150a0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80150a2:	1a76      	subs	r6, r6, r1
 80150a4:	2e08      	cmp	r6, #8
 80150a6:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80150aa:	dc03      	bgt.n	80150b4 <_strtod_l+0x2e4>
 80150ac:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80150ae:	4588      	cmp	r8, r1
 80150b0:	bfa8      	it	ge
 80150b2:	4688      	movge	r8, r1
 80150b4:	f1bc 0f00 	cmp.w	ip, #0
 80150b8:	d001      	beq.n	80150be <_strtod_l+0x2ee>
 80150ba:	f1c8 0800 	rsb	r8, r8, #0
 80150be:	2d00      	cmp	r5, #0
 80150c0:	d14e      	bne.n	8015160 <_strtod_l+0x390>
 80150c2:	9908      	ldr	r1, [sp, #32]
 80150c4:	4308      	orrs	r0, r1
 80150c6:	f47f aebc 	bne.w	8014e42 <_strtod_l+0x72>
 80150ca:	2b00      	cmp	r3, #0
 80150cc:	f47f aed4 	bne.w	8014e78 <_strtod_l+0xa8>
 80150d0:	2a69      	cmp	r2, #105	@ 0x69
 80150d2:	d028      	beq.n	8015126 <_strtod_l+0x356>
 80150d4:	dc25      	bgt.n	8015122 <_strtod_l+0x352>
 80150d6:	2a49      	cmp	r2, #73	@ 0x49
 80150d8:	d025      	beq.n	8015126 <_strtod_l+0x356>
 80150da:	2a4e      	cmp	r2, #78	@ 0x4e
 80150dc:	f47f aecc 	bne.w	8014e78 <_strtod_l+0xa8>
 80150e0:	499a      	ldr	r1, [pc, #616]	@ (801534c <_strtod_l+0x57c>)
 80150e2:	a819      	add	r0, sp, #100	@ 0x64
 80150e4:	f001 fa0a 	bl	80164fc <__match>
 80150e8:	2800      	cmp	r0, #0
 80150ea:	f43f aec5 	beq.w	8014e78 <_strtod_l+0xa8>
 80150ee:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80150f0:	781b      	ldrb	r3, [r3, #0]
 80150f2:	2b28      	cmp	r3, #40	@ 0x28
 80150f4:	d12e      	bne.n	8015154 <_strtod_l+0x384>
 80150f6:	4996      	ldr	r1, [pc, #600]	@ (8015350 <_strtod_l+0x580>)
 80150f8:	aa1c      	add	r2, sp, #112	@ 0x70
 80150fa:	a819      	add	r0, sp, #100	@ 0x64
 80150fc:	f001 fa12 	bl	8016524 <__hexnan>
 8015100:	2805      	cmp	r0, #5
 8015102:	d127      	bne.n	8015154 <_strtod_l+0x384>
 8015104:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8015106:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 801510a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 801510e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8015112:	e696      	b.n	8014e42 <_strtod_l+0x72>
 8015114:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8015116:	fb08 2101 	mla	r1, r8, r1, r2
 801511a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 801511e:	9209      	str	r2, [sp, #36]	@ 0x24
 8015120:	e7b5      	b.n	801508e <_strtod_l+0x2be>
 8015122:	2a6e      	cmp	r2, #110	@ 0x6e
 8015124:	e7da      	b.n	80150dc <_strtod_l+0x30c>
 8015126:	498b      	ldr	r1, [pc, #556]	@ (8015354 <_strtod_l+0x584>)
 8015128:	a819      	add	r0, sp, #100	@ 0x64
 801512a:	f001 f9e7 	bl	80164fc <__match>
 801512e:	2800      	cmp	r0, #0
 8015130:	f43f aea2 	beq.w	8014e78 <_strtod_l+0xa8>
 8015134:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8015136:	4988      	ldr	r1, [pc, #544]	@ (8015358 <_strtod_l+0x588>)
 8015138:	3b01      	subs	r3, #1
 801513a:	a819      	add	r0, sp, #100	@ 0x64
 801513c:	9319      	str	r3, [sp, #100]	@ 0x64
 801513e:	f001 f9dd 	bl	80164fc <__match>
 8015142:	b910      	cbnz	r0, 801514a <_strtod_l+0x37a>
 8015144:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8015146:	3301      	adds	r3, #1
 8015148:	9319      	str	r3, [sp, #100]	@ 0x64
 801514a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8015368 <_strtod_l+0x598>
 801514e:	f04f 0a00 	mov.w	sl, #0
 8015152:	e676      	b.n	8014e42 <_strtod_l+0x72>
 8015154:	4881      	ldr	r0, [pc, #516]	@ (801535c <_strtod_l+0x58c>)
 8015156:	f000 fed7 	bl	8015f08 <nan>
 801515a:	ec5b ab10 	vmov	sl, fp, d0
 801515e:	e670      	b.n	8014e42 <_strtod_l+0x72>
 8015160:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015162:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8015164:	eba8 0303 	sub.w	r3, r8, r3
 8015168:	f1b9 0f00 	cmp.w	r9, #0
 801516c:	bf08      	it	eq
 801516e:	46a9      	moveq	r9, r5
 8015170:	2d10      	cmp	r5, #16
 8015172:	9309      	str	r3, [sp, #36]	@ 0x24
 8015174:	462c      	mov	r4, r5
 8015176:	bfa8      	it	ge
 8015178:	2410      	movge	r4, #16
 801517a:	f7eb f9c3 	bl	8000504 <__aeabi_ui2d>
 801517e:	2d09      	cmp	r5, #9
 8015180:	4682      	mov	sl, r0
 8015182:	468b      	mov	fp, r1
 8015184:	dc13      	bgt.n	80151ae <_strtod_l+0x3de>
 8015186:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015188:	2b00      	cmp	r3, #0
 801518a:	f43f ae5a 	beq.w	8014e42 <_strtod_l+0x72>
 801518e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015190:	dd78      	ble.n	8015284 <_strtod_l+0x4b4>
 8015192:	2b16      	cmp	r3, #22
 8015194:	dc5f      	bgt.n	8015256 <_strtod_l+0x486>
 8015196:	4972      	ldr	r1, [pc, #456]	@ (8015360 <_strtod_l+0x590>)
 8015198:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801519c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80151a0:	4652      	mov	r2, sl
 80151a2:	465b      	mov	r3, fp
 80151a4:	f7eb fa28 	bl	80005f8 <__aeabi_dmul>
 80151a8:	4682      	mov	sl, r0
 80151aa:	468b      	mov	fp, r1
 80151ac:	e649      	b.n	8014e42 <_strtod_l+0x72>
 80151ae:	4b6c      	ldr	r3, [pc, #432]	@ (8015360 <_strtod_l+0x590>)
 80151b0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80151b4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80151b8:	f7eb fa1e 	bl	80005f8 <__aeabi_dmul>
 80151bc:	4682      	mov	sl, r0
 80151be:	4638      	mov	r0, r7
 80151c0:	468b      	mov	fp, r1
 80151c2:	f7eb f99f 	bl	8000504 <__aeabi_ui2d>
 80151c6:	4602      	mov	r2, r0
 80151c8:	460b      	mov	r3, r1
 80151ca:	4650      	mov	r0, sl
 80151cc:	4659      	mov	r1, fp
 80151ce:	f7eb f85d 	bl	800028c <__adddf3>
 80151d2:	2d0f      	cmp	r5, #15
 80151d4:	4682      	mov	sl, r0
 80151d6:	468b      	mov	fp, r1
 80151d8:	ddd5      	ble.n	8015186 <_strtod_l+0x3b6>
 80151da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80151dc:	1b2c      	subs	r4, r5, r4
 80151de:	441c      	add	r4, r3
 80151e0:	2c00      	cmp	r4, #0
 80151e2:	f340 8093 	ble.w	801530c <_strtod_l+0x53c>
 80151e6:	f014 030f 	ands.w	r3, r4, #15
 80151ea:	d00a      	beq.n	8015202 <_strtod_l+0x432>
 80151ec:	495c      	ldr	r1, [pc, #368]	@ (8015360 <_strtod_l+0x590>)
 80151ee:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80151f2:	4652      	mov	r2, sl
 80151f4:	465b      	mov	r3, fp
 80151f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80151fa:	f7eb f9fd 	bl	80005f8 <__aeabi_dmul>
 80151fe:	4682      	mov	sl, r0
 8015200:	468b      	mov	fp, r1
 8015202:	f034 040f 	bics.w	r4, r4, #15
 8015206:	d073      	beq.n	80152f0 <_strtod_l+0x520>
 8015208:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 801520c:	dd49      	ble.n	80152a2 <_strtod_l+0x4d2>
 801520e:	2400      	movs	r4, #0
 8015210:	46a0      	mov	r8, r4
 8015212:	940b      	str	r4, [sp, #44]	@ 0x2c
 8015214:	46a1      	mov	r9, r4
 8015216:	9a05      	ldr	r2, [sp, #20]
 8015218:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8015368 <_strtod_l+0x598>
 801521c:	2322      	movs	r3, #34	@ 0x22
 801521e:	6013      	str	r3, [r2, #0]
 8015220:	f04f 0a00 	mov.w	sl, #0
 8015224:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015226:	2b00      	cmp	r3, #0
 8015228:	f43f ae0b 	beq.w	8014e42 <_strtod_l+0x72>
 801522c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801522e:	9805      	ldr	r0, [sp, #20]
 8015230:	f001 fb1c 	bl	801686c <_Bfree>
 8015234:	9805      	ldr	r0, [sp, #20]
 8015236:	4649      	mov	r1, r9
 8015238:	f001 fb18 	bl	801686c <_Bfree>
 801523c:	9805      	ldr	r0, [sp, #20]
 801523e:	4641      	mov	r1, r8
 8015240:	f001 fb14 	bl	801686c <_Bfree>
 8015244:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8015246:	9805      	ldr	r0, [sp, #20]
 8015248:	f001 fb10 	bl	801686c <_Bfree>
 801524c:	9805      	ldr	r0, [sp, #20]
 801524e:	4621      	mov	r1, r4
 8015250:	f001 fb0c 	bl	801686c <_Bfree>
 8015254:	e5f5      	b.n	8014e42 <_strtod_l+0x72>
 8015256:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015258:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 801525c:	4293      	cmp	r3, r2
 801525e:	dbbc      	blt.n	80151da <_strtod_l+0x40a>
 8015260:	4c3f      	ldr	r4, [pc, #252]	@ (8015360 <_strtod_l+0x590>)
 8015262:	f1c5 050f 	rsb	r5, r5, #15
 8015266:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801526a:	4652      	mov	r2, sl
 801526c:	465b      	mov	r3, fp
 801526e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015272:	f7eb f9c1 	bl	80005f8 <__aeabi_dmul>
 8015276:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015278:	1b5d      	subs	r5, r3, r5
 801527a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801527e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8015282:	e78f      	b.n	80151a4 <_strtod_l+0x3d4>
 8015284:	3316      	adds	r3, #22
 8015286:	dba8      	blt.n	80151da <_strtod_l+0x40a>
 8015288:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801528a:	eba3 0808 	sub.w	r8, r3, r8
 801528e:	4b34      	ldr	r3, [pc, #208]	@ (8015360 <_strtod_l+0x590>)
 8015290:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8015294:	e9d8 2300 	ldrd	r2, r3, [r8]
 8015298:	4650      	mov	r0, sl
 801529a:	4659      	mov	r1, fp
 801529c:	f7eb fad6 	bl	800084c <__aeabi_ddiv>
 80152a0:	e782      	b.n	80151a8 <_strtod_l+0x3d8>
 80152a2:	2300      	movs	r3, #0
 80152a4:	4f2f      	ldr	r7, [pc, #188]	@ (8015364 <_strtod_l+0x594>)
 80152a6:	1124      	asrs	r4, r4, #4
 80152a8:	4650      	mov	r0, sl
 80152aa:	4659      	mov	r1, fp
 80152ac:	461e      	mov	r6, r3
 80152ae:	2c01      	cmp	r4, #1
 80152b0:	dc21      	bgt.n	80152f6 <_strtod_l+0x526>
 80152b2:	b10b      	cbz	r3, 80152b8 <_strtod_l+0x4e8>
 80152b4:	4682      	mov	sl, r0
 80152b6:	468b      	mov	fp, r1
 80152b8:	492a      	ldr	r1, [pc, #168]	@ (8015364 <_strtod_l+0x594>)
 80152ba:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80152be:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80152c2:	4652      	mov	r2, sl
 80152c4:	465b      	mov	r3, fp
 80152c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80152ca:	f7eb f995 	bl	80005f8 <__aeabi_dmul>
 80152ce:	4b26      	ldr	r3, [pc, #152]	@ (8015368 <_strtod_l+0x598>)
 80152d0:	460a      	mov	r2, r1
 80152d2:	400b      	ands	r3, r1
 80152d4:	4925      	ldr	r1, [pc, #148]	@ (801536c <_strtod_l+0x59c>)
 80152d6:	428b      	cmp	r3, r1
 80152d8:	4682      	mov	sl, r0
 80152da:	d898      	bhi.n	801520e <_strtod_l+0x43e>
 80152dc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80152e0:	428b      	cmp	r3, r1
 80152e2:	bf86      	itte	hi
 80152e4:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8015370 <_strtod_l+0x5a0>
 80152e8:	f04f 3aff 	movhi.w	sl, #4294967295
 80152ec:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80152f0:	2300      	movs	r3, #0
 80152f2:	9308      	str	r3, [sp, #32]
 80152f4:	e076      	b.n	80153e4 <_strtod_l+0x614>
 80152f6:	07e2      	lsls	r2, r4, #31
 80152f8:	d504      	bpl.n	8015304 <_strtod_l+0x534>
 80152fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80152fe:	f7eb f97b 	bl	80005f8 <__aeabi_dmul>
 8015302:	2301      	movs	r3, #1
 8015304:	3601      	adds	r6, #1
 8015306:	1064      	asrs	r4, r4, #1
 8015308:	3708      	adds	r7, #8
 801530a:	e7d0      	b.n	80152ae <_strtod_l+0x4de>
 801530c:	d0f0      	beq.n	80152f0 <_strtod_l+0x520>
 801530e:	4264      	negs	r4, r4
 8015310:	f014 020f 	ands.w	r2, r4, #15
 8015314:	d00a      	beq.n	801532c <_strtod_l+0x55c>
 8015316:	4b12      	ldr	r3, [pc, #72]	@ (8015360 <_strtod_l+0x590>)
 8015318:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801531c:	4650      	mov	r0, sl
 801531e:	4659      	mov	r1, fp
 8015320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015324:	f7eb fa92 	bl	800084c <__aeabi_ddiv>
 8015328:	4682      	mov	sl, r0
 801532a:	468b      	mov	fp, r1
 801532c:	1124      	asrs	r4, r4, #4
 801532e:	d0df      	beq.n	80152f0 <_strtod_l+0x520>
 8015330:	2c1f      	cmp	r4, #31
 8015332:	dd1f      	ble.n	8015374 <_strtod_l+0x5a4>
 8015334:	2400      	movs	r4, #0
 8015336:	46a0      	mov	r8, r4
 8015338:	940b      	str	r4, [sp, #44]	@ 0x2c
 801533a:	46a1      	mov	r9, r4
 801533c:	9a05      	ldr	r2, [sp, #20]
 801533e:	2322      	movs	r3, #34	@ 0x22
 8015340:	f04f 0a00 	mov.w	sl, #0
 8015344:	f04f 0b00 	mov.w	fp, #0
 8015348:	6013      	str	r3, [r2, #0]
 801534a:	e76b      	b.n	8015224 <_strtod_l+0x454>
 801534c:	08020d44 	.word	0x08020d44
 8015350:	08020e88 	.word	0x08020e88
 8015354:	08020d3b 	.word	0x08020d3b
 8015358:	08020d3e 	.word	0x08020d3e
 801535c:	08020d8a 	.word	0x08020d8a
 8015360:	08021010 	.word	0x08021010
 8015364:	08020fe8 	.word	0x08020fe8
 8015368:	7ff00000 	.word	0x7ff00000
 801536c:	7ca00000 	.word	0x7ca00000
 8015370:	7fefffff 	.word	0x7fefffff
 8015374:	f014 0310 	ands.w	r3, r4, #16
 8015378:	bf18      	it	ne
 801537a:	236a      	movne	r3, #106	@ 0x6a
 801537c:	4ea9      	ldr	r6, [pc, #676]	@ (8015624 <_strtod_l+0x854>)
 801537e:	9308      	str	r3, [sp, #32]
 8015380:	4650      	mov	r0, sl
 8015382:	4659      	mov	r1, fp
 8015384:	2300      	movs	r3, #0
 8015386:	07e7      	lsls	r7, r4, #31
 8015388:	d504      	bpl.n	8015394 <_strtod_l+0x5c4>
 801538a:	e9d6 2300 	ldrd	r2, r3, [r6]
 801538e:	f7eb f933 	bl	80005f8 <__aeabi_dmul>
 8015392:	2301      	movs	r3, #1
 8015394:	1064      	asrs	r4, r4, #1
 8015396:	f106 0608 	add.w	r6, r6, #8
 801539a:	d1f4      	bne.n	8015386 <_strtod_l+0x5b6>
 801539c:	b10b      	cbz	r3, 80153a2 <_strtod_l+0x5d2>
 801539e:	4682      	mov	sl, r0
 80153a0:	468b      	mov	fp, r1
 80153a2:	9b08      	ldr	r3, [sp, #32]
 80153a4:	b1b3      	cbz	r3, 80153d4 <_strtod_l+0x604>
 80153a6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80153aa:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80153ae:	2b00      	cmp	r3, #0
 80153b0:	4659      	mov	r1, fp
 80153b2:	dd0f      	ble.n	80153d4 <_strtod_l+0x604>
 80153b4:	2b1f      	cmp	r3, #31
 80153b6:	dd56      	ble.n	8015466 <_strtod_l+0x696>
 80153b8:	2b34      	cmp	r3, #52	@ 0x34
 80153ba:	bfde      	ittt	le
 80153bc:	f04f 33ff 	movle.w	r3, #4294967295
 80153c0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80153c4:	4093      	lslle	r3, r2
 80153c6:	f04f 0a00 	mov.w	sl, #0
 80153ca:	bfcc      	ite	gt
 80153cc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80153d0:	ea03 0b01 	andle.w	fp, r3, r1
 80153d4:	2200      	movs	r2, #0
 80153d6:	2300      	movs	r3, #0
 80153d8:	4650      	mov	r0, sl
 80153da:	4659      	mov	r1, fp
 80153dc:	f7eb fb74 	bl	8000ac8 <__aeabi_dcmpeq>
 80153e0:	2800      	cmp	r0, #0
 80153e2:	d1a7      	bne.n	8015334 <_strtod_l+0x564>
 80153e4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80153e6:	9300      	str	r3, [sp, #0]
 80153e8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80153ea:	9805      	ldr	r0, [sp, #20]
 80153ec:	462b      	mov	r3, r5
 80153ee:	464a      	mov	r2, r9
 80153f0:	f001 faa4 	bl	801693c <__s2b>
 80153f4:	900b      	str	r0, [sp, #44]	@ 0x2c
 80153f6:	2800      	cmp	r0, #0
 80153f8:	f43f af09 	beq.w	801520e <_strtod_l+0x43e>
 80153fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80153fe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015400:	2a00      	cmp	r2, #0
 8015402:	eba3 0308 	sub.w	r3, r3, r8
 8015406:	bfa8      	it	ge
 8015408:	2300      	movge	r3, #0
 801540a:	9312      	str	r3, [sp, #72]	@ 0x48
 801540c:	2400      	movs	r4, #0
 801540e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8015412:	9316      	str	r3, [sp, #88]	@ 0x58
 8015414:	46a0      	mov	r8, r4
 8015416:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015418:	9805      	ldr	r0, [sp, #20]
 801541a:	6859      	ldr	r1, [r3, #4]
 801541c:	f001 f9e6 	bl	80167ec <_Balloc>
 8015420:	4681      	mov	r9, r0
 8015422:	2800      	cmp	r0, #0
 8015424:	f43f aef7 	beq.w	8015216 <_strtod_l+0x446>
 8015428:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801542a:	691a      	ldr	r2, [r3, #16]
 801542c:	3202      	adds	r2, #2
 801542e:	f103 010c 	add.w	r1, r3, #12
 8015432:	0092      	lsls	r2, r2, #2
 8015434:	300c      	adds	r0, #12
 8015436:	f000 fd58 	bl	8015eea <memcpy>
 801543a:	ec4b ab10 	vmov	d0, sl, fp
 801543e:	9805      	ldr	r0, [sp, #20]
 8015440:	aa1c      	add	r2, sp, #112	@ 0x70
 8015442:	a91b      	add	r1, sp, #108	@ 0x6c
 8015444:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8015448:	f001 fdac 	bl	8016fa4 <__d2b>
 801544c:	901a      	str	r0, [sp, #104]	@ 0x68
 801544e:	2800      	cmp	r0, #0
 8015450:	f43f aee1 	beq.w	8015216 <_strtod_l+0x446>
 8015454:	9805      	ldr	r0, [sp, #20]
 8015456:	2101      	movs	r1, #1
 8015458:	f001 fb06 	bl	8016a68 <__i2b>
 801545c:	4680      	mov	r8, r0
 801545e:	b948      	cbnz	r0, 8015474 <_strtod_l+0x6a4>
 8015460:	f04f 0800 	mov.w	r8, #0
 8015464:	e6d7      	b.n	8015216 <_strtod_l+0x446>
 8015466:	f04f 32ff 	mov.w	r2, #4294967295
 801546a:	fa02 f303 	lsl.w	r3, r2, r3
 801546e:	ea03 0a0a 	and.w	sl, r3, sl
 8015472:	e7af      	b.n	80153d4 <_strtod_l+0x604>
 8015474:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8015476:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8015478:	2d00      	cmp	r5, #0
 801547a:	bfab      	itete	ge
 801547c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 801547e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8015480:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8015482:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8015484:	bfac      	ite	ge
 8015486:	18ef      	addge	r7, r5, r3
 8015488:	1b5e      	sublt	r6, r3, r5
 801548a:	9b08      	ldr	r3, [sp, #32]
 801548c:	1aed      	subs	r5, r5, r3
 801548e:	4415      	add	r5, r2
 8015490:	4b65      	ldr	r3, [pc, #404]	@ (8015628 <_strtod_l+0x858>)
 8015492:	3d01      	subs	r5, #1
 8015494:	429d      	cmp	r5, r3
 8015496:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 801549a:	da50      	bge.n	801553e <_strtod_l+0x76e>
 801549c:	1b5b      	subs	r3, r3, r5
 801549e:	2b1f      	cmp	r3, #31
 80154a0:	eba2 0203 	sub.w	r2, r2, r3
 80154a4:	f04f 0101 	mov.w	r1, #1
 80154a8:	dc3d      	bgt.n	8015526 <_strtod_l+0x756>
 80154aa:	fa01 f303 	lsl.w	r3, r1, r3
 80154ae:	9313      	str	r3, [sp, #76]	@ 0x4c
 80154b0:	2300      	movs	r3, #0
 80154b2:	9310      	str	r3, [sp, #64]	@ 0x40
 80154b4:	18bd      	adds	r5, r7, r2
 80154b6:	9b08      	ldr	r3, [sp, #32]
 80154b8:	42af      	cmp	r7, r5
 80154ba:	4416      	add	r6, r2
 80154bc:	441e      	add	r6, r3
 80154be:	463b      	mov	r3, r7
 80154c0:	bfa8      	it	ge
 80154c2:	462b      	movge	r3, r5
 80154c4:	42b3      	cmp	r3, r6
 80154c6:	bfa8      	it	ge
 80154c8:	4633      	movge	r3, r6
 80154ca:	2b00      	cmp	r3, #0
 80154cc:	bfc2      	ittt	gt
 80154ce:	1aed      	subgt	r5, r5, r3
 80154d0:	1af6      	subgt	r6, r6, r3
 80154d2:	1aff      	subgt	r7, r7, r3
 80154d4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80154d6:	2b00      	cmp	r3, #0
 80154d8:	dd16      	ble.n	8015508 <_strtod_l+0x738>
 80154da:	4641      	mov	r1, r8
 80154dc:	9805      	ldr	r0, [sp, #20]
 80154de:	461a      	mov	r2, r3
 80154e0:	f001 fb7a 	bl	8016bd8 <__pow5mult>
 80154e4:	4680      	mov	r8, r0
 80154e6:	2800      	cmp	r0, #0
 80154e8:	d0ba      	beq.n	8015460 <_strtod_l+0x690>
 80154ea:	4601      	mov	r1, r0
 80154ec:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80154ee:	9805      	ldr	r0, [sp, #20]
 80154f0:	f001 fad0 	bl	8016a94 <__multiply>
 80154f4:	900a      	str	r0, [sp, #40]	@ 0x28
 80154f6:	2800      	cmp	r0, #0
 80154f8:	f43f ae8d 	beq.w	8015216 <_strtod_l+0x446>
 80154fc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80154fe:	9805      	ldr	r0, [sp, #20]
 8015500:	f001 f9b4 	bl	801686c <_Bfree>
 8015504:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015506:	931a      	str	r3, [sp, #104]	@ 0x68
 8015508:	2d00      	cmp	r5, #0
 801550a:	dc1d      	bgt.n	8015548 <_strtod_l+0x778>
 801550c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801550e:	2b00      	cmp	r3, #0
 8015510:	dd23      	ble.n	801555a <_strtod_l+0x78a>
 8015512:	4649      	mov	r1, r9
 8015514:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8015516:	9805      	ldr	r0, [sp, #20]
 8015518:	f001 fb5e 	bl	8016bd8 <__pow5mult>
 801551c:	4681      	mov	r9, r0
 801551e:	b9e0      	cbnz	r0, 801555a <_strtod_l+0x78a>
 8015520:	f04f 0900 	mov.w	r9, #0
 8015524:	e677      	b.n	8015216 <_strtod_l+0x446>
 8015526:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 801552a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 801552e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8015532:	35e2      	adds	r5, #226	@ 0xe2
 8015534:	fa01 f305 	lsl.w	r3, r1, r5
 8015538:	9310      	str	r3, [sp, #64]	@ 0x40
 801553a:	9113      	str	r1, [sp, #76]	@ 0x4c
 801553c:	e7ba      	b.n	80154b4 <_strtod_l+0x6e4>
 801553e:	2300      	movs	r3, #0
 8015540:	9310      	str	r3, [sp, #64]	@ 0x40
 8015542:	2301      	movs	r3, #1
 8015544:	9313      	str	r3, [sp, #76]	@ 0x4c
 8015546:	e7b5      	b.n	80154b4 <_strtod_l+0x6e4>
 8015548:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801554a:	9805      	ldr	r0, [sp, #20]
 801554c:	462a      	mov	r2, r5
 801554e:	f001 fb9d 	bl	8016c8c <__lshift>
 8015552:	901a      	str	r0, [sp, #104]	@ 0x68
 8015554:	2800      	cmp	r0, #0
 8015556:	d1d9      	bne.n	801550c <_strtod_l+0x73c>
 8015558:	e65d      	b.n	8015216 <_strtod_l+0x446>
 801555a:	2e00      	cmp	r6, #0
 801555c:	dd07      	ble.n	801556e <_strtod_l+0x79e>
 801555e:	4649      	mov	r1, r9
 8015560:	9805      	ldr	r0, [sp, #20]
 8015562:	4632      	mov	r2, r6
 8015564:	f001 fb92 	bl	8016c8c <__lshift>
 8015568:	4681      	mov	r9, r0
 801556a:	2800      	cmp	r0, #0
 801556c:	d0d8      	beq.n	8015520 <_strtod_l+0x750>
 801556e:	2f00      	cmp	r7, #0
 8015570:	dd08      	ble.n	8015584 <_strtod_l+0x7b4>
 8015572:	4641      	mov	r1, r8
 8015574:	9805      	ldr	r0, [sp, #20]
 8015576:	463a      	mov	r2, r7
 8015578:	f001 fb88 	bl	8016c8c <__lshift>
 801557c:	4680      	mov	r8, r0
 801557e:	2800      	cmp	r0, #0
 8015580:	f43f ae49 	beq.w	8015216 <_strtod_l+0x446>
 8015584:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8015586:	9805      	ldr	r0, [sp, #20]
 8015588:	464a      	mov	r2, r9
 801558a:	f001 fc07 	bl	8016d9c <__mdiff>
 801558e:	4604      	mov	r4, r0
 8015590:	2800      	cmp	r0, #0
 8015592:	f43f ae40 	beq.w	8015216 <_strtod_l+0x446>
 8015596:	68c3      	ldr	r3, [r0, #12]
 8015598:	930f      	str	r3, [sp, #60]	@ 0x3c
 801559a:	2300      	movs	r3, #0
 801559c:	60c3      	str	r3, [r0, #12]
 801559e:	4641      	mov	r1, r8
 80155a0:	f001 fbe0 	bl	8016d64 <__mcmp>
 80155a4:	2800      	cmp	r0, #0
 80155a6:	da45      	bge.n	8015634 <_strtod_l+0x864>
 80155a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80155aa:	ea53 030a 	orrs.w	r3, r3, sl
 80155ae:	d16b      	bne.n	8015688 <_strtod_l+0x8b8>
 80155b0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80155b4:	2b00      	cmp	r3, #0
 80155b6:	d167      	bne.n	8015688 <_strtod_l+0x8b8>
 80155b8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80155bc:	0d1b      	lsrs	r3, r3, #20
 80155be:	051b      	lsls	r3, r3, #20
 80155c0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80155c4:	d960      	bls.n	8015688 <_strtod_l+0x8b8>
 80155c6:	6963      	ldr	r3, [r4, #20]
 80155c8:	b913      	cbnz	r3, 80155d0 <_strtod_l+0x800>
 80155ca:	6923      	ldr	r3, [r4, #16]
 80155cc:	2b01      	cmp	r3, #1
 80155ce:	dd5b      	ble.n	8015688 <_strtod_l+0x8b8>
 80155d0:	4621      	mov	r1, r4
 80155d2:	2201      	movs	r2, #1
 80155d4:	9805      	ldr	r0, [sp, #20]
 80155d6:	f001 fb59 	bl	8016c8c <__lshift>
 80155da:	4641      	mov	r1, r8
 80155dc:	4604      	mov	r4, r0
 80155de:	f001 fbc1 	bl	8016d64 <__mcmp>
 80155e2:	2800      	cmp	r0, #0
 80155e4:	dd50      	ble.n	8015688 <_strtod_l+0x8b8>
 80155e6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80155ea:	9a08      	ldr	r2, [sp, #32]
 80155ec:	0d1b      	lsrs	r3, r3, #20
 80155ee:	051b      	lsls	r3, r3, #20
 80155f0:	2a00      	cmp	r2, #0
 80155f2:	d06a      	beq.n	80156ca <_strtod_l+0x8fa>
 80155f4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80155f8:	d867      	bhi.n	80156ca <_strtod_l+0x8fa>
 80155fa:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80155fe:	f67f ae9d 	bls.w	801533c <_strtod_l+0x56c>
 8015602:	4b0a      	ldr	r3, [pc, #40]	@ (801562c <_strtod_l+0x85c>)
 8015604:	4650      	mov	r0, sl
 8015606:	4659      	mov	r1, fp
 8015608:	2200      	movs	r2, #0
 801560a:	f7ea fff5 	bl	80005f8 <__aeabi_dmul>
 801560e:	4b08      	ldr	r3, [pc, #32]	@ (8015630 <_strtod_l+0x860>)
 8015610:	400b      	ands	r3, r1
 8015612:	4682      	mov	sl, r0
 8015614:	468b      	mov	fp, r1
 8015616:	2b00      	cmp	r3, #0
 8015618:	f47f ae08 	bne.w	801522c <_strtod_l+0x45c>
 801561c:	9a05      	ldr	r2, [sp, #20]
 801561e:	2322      	movs	r3, #34	@ 0x22
 8015620:	6013      	str	r3, [r2, #0]
 8015622:	e603      	b.n	801522c <_strtod_l+0x45c>
 8015624:	08020eb0 	.word	0x08020eb0
 8015628:	fffffc02 	.word	0xfffffc02
 801562c:	39500000 	.word	0x39500000
 8015630:	7ff00000 	.word	0x7ff00000
 8015634:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8015638:	d165      	bne.n	8015706 <_strtod_l+0x936>
 801563a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801563c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015640:	b35a      	cbz	r2, 801569a <_strtod_l+0x8ca>
 8015642:	4a9f      	ldr	r2, [pc, #636]	@ (80158c0 <_strtod_l+0xaf0>)
 8015644:	4293      	cmp	r3, r2
 8015646:	d12b      	bne.n	80156a0 <_strtod_l+0x8d0>
 8015648:	9b08      	ldr	r3, [sp, #32]
 801564a:	4651      	mov	r1, sl
 801564c:	b303      	cbz	r3, 8015690 <_strtod_l+0x8c0>
 801564e:	4b9d      	ldr	r3, [pc, #628]	@ (80158c4 <_strtod_l+0xaf4>)
 8015650:	465a      	mov	r2, fp
 8015652:	4013      	ands	r3, r2
 8015654:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8015658:	f04f 32ff 	mov.w	r2, #4294967295
 801565c:	d81b      	bhi.n	8015696 <_strtod_l+0x8c6>
 801565e:	0d1b      	lsrs	r3, r3, #20
 8015660:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8015664:	fa02 f303 	lsl.w	r3, r2, r3
 8015668:	4299      	cmp	r1, r3
 801566a:	d119      	bne.n	80156a0 <_strtod_l+0x8d0>
 801566c:	4b96      	ldr	r3, [pc, #600]	@ (80158c8 <_strtod_l+0xaf8>)
 801566e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8015670:	429a      	cmp	r2, r3
 8015672:	d102      	bne.n	801567a <_strtod_l+0x8aa>
 8015674:	3101      	adds	r1, #1
 8015676:	f43f adce 	beq.w	8015216 <_strtod_l+0x446>
 801567a:	4b92      	ldr	r3, [pc, #584]	@ (80158c4 <_strtod_l+0xaf4>)
 801567c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801567e:	401a      	ands	r2, r3
 8015680:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8015684:	f04f 0a00 	mov.w	sl, #0
 8015688:	9b08      	ldr	r3, [sp, #32]
 801568a:	2b00      	cmp	r3, #0
 801568c:	d1b9      	bne.n	8015602 <_strtod_l+0x832>
 801568e:	e5cd      	b.n	801522c <_strtod_l+0x45c>
 8015690:	f04f 33ff 	mov.w	r3, #4294967295
 8015694:	e7e8      	b.n	8015668 <_strtod_l+0x898>
 8015696:	4613      	mov	r3, r2
 8015698:	e7e6      	b.n	8015668 <_strtod_l+0x898>
 801569a:	ea53 030a 	orrs.w	r3, r3, sl
 801569e:	d0a2      	beq.n	80155e6 <_strtod_l+0x816>
 80156a0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80156a2:	b1db      	cbz	r3, 80156dc <_strtod_l+0x90c>
 80156a4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80156a6:	4213      	tst	r3, r2
 80156a8:	d0ee      	beq.n	8015688 <_strtod_l+0x8b8>
 80156aa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80156ac:	9a08      	ldr	r2, [sp, #32]
 80156ae:	4650      	mov	r0, sl
 80156b0:	4659      	mov	r1, fp
 80156b2:	b1bb      	cbz	r3, 80156e4 <_strtod_l+0x914>
 80156b4:	f7ff fb6e 	bl	8014d94 <sulp>
 80156b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80156bc:	ec53 2b10 	vmov	r2, r3, d0
 80156c0:	f7ea fde4 	bl	800028c <__adddf3>
 80156c4:	4682      	mov	sl, r0
 80156c6:	468b      	mov	fp, r1
 80156c8:	e7de      	b.n	8015688 <_strtod_l+0x8b8>
 80156ca:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80156ce:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80156d2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80156d6:	f04f 3aff 	mov.w	sl, #4294967295
 80156da:	e7d5      	b.n	8015688 <_strtod_l+0x8b8>
 80156dc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80156de:	ea13 0f0a 	tst.w	r3, sl
 80156e2:	e7e1      	b.n	80156a8 <_strtod_l+0x8d8>
 80156e4:	f7ff fb56 	bl	8014d94 <sulp>
 80156e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80156ec:	ec53 2b10 	vmov	r2, r3, d0
 80156f0:	f7ea fdca 	bl	8000288 <__aeabi_dsub>
 80156f4:	2200      	movs	r2, #0
 80156f6:	2300      	movs	r3, #0
 80156f8:	4682      	mov	sl, r0
 80156fa:	468b      	mov	fp, r1
 80156fc:	f7eb f9e4 	bl	8000ac8 <__aeabi_dcmpeq>
 8015700:	2800      	cmp	r0, #0
 8015702:	d0c1      	beq.n	8015688 <_strtod_l+0x8b8>
 8015704:	e61a      	b.n	801533c <_strtod_l+0x56c>
 8015706:	4641      	mov	r1, r8
 8015708:	4620      	mov	r0, r4
 801570a:	f001 fca3 	bl	8017054 <__ratio>
 801570e:	ec57 6b10 	vmov	r6, r7, d0
 8015712:	2200      	movs	r2, #0
 8015714:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8015718:	4630      	mov	r0, r6
 801571a:	4639      	mov	r1, r7
 801571c:	f7eb f9e8 	bl	8000af0 <__aeabi_dcmple>
 8015720:	2800      	cmp	r0, #0
 8015722:	d06f      	beq.n	8015804 <_strtod_l+0xa34>
 8015724:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015726:	2b00      	cmp	r3, #0
 8015728:	d17a      	bne.n	8015820 <_strtod_l+0xa50>
 801572a:	f1ba 0f00 	cmp.w	sl, #0
 801572e:	d158      	bne.n	80157e2 <_strtod_l+0xa12>
 8015730:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015732:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015736:	2b00      	cmp	r3, #0
 8015738:	d15a      	bne.n	80157f0 <_strtod_l+0xa20>
 801573a:	4b64      	ldr	r3, [pc, #400]	@ (80158cc <_strtod_l+0xafc>)
 801573c:	2200      	movs	r2, #0
 801573e:	4630      	mov	r0, r6
 8015740:	4639      	mov	r1, r7
 8015742:	f7eb f9cb 	bl	8000adc <__aeabi_dcmplt>
 8015746:	2800      	cmp	r0, #0
 8015748:	d159      	bne.n	80157fe <_strtod_l+0xa2e>
 801574a:	4630      	mov	r0, r6
 801574c:	4639      	mov	r1, r7
 801574e:	4b60      	ldr	r3, [pc, #384]	@ (80158d0 <_strtod_l+0xb00>)
 8015750:	2200      	movs	r2, #0
 8015752:	f7ea ff51 	bl	80005f8 <__aeabi_dmul>
 8015756:	4606      	mov	r6, r0
 8015758:	460f      	mov	r7, r1
 801575a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 801575e:	9606      	str	r6, [sp, #24]
 8015760:	9307      	str	r3, [sp, #28]
 8015762:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8015766:	4d57      	ldr	r5, [pc, #348]	@ (80158c4 <_strtod_l+0xaf4>)
 8015768:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 801576c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801576e:	401d      	ands	r5, r3
 8015770:	4b58      	ldr	r3, [pc, #352]	@ (80158d4 <_strtod_l+0xb04>)
 8015772:	429d      	cmp	r5, r3
 8015774:	f040 80b2 	bne.w	80158dc <_strtod_l+0xb0c>
 8015778:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801577a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 801577e:	ec4b ab10 	vmov	d0, sl, fp
 8015782:	f001 fb9f 	bl	8016ec4 <__ulp>
 8015786:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801578a:	ec51 0b10 	vmov	r0, r1, d0
 801578e:	f7ea ff33 	bl	80005f8 <__aeabi_dmul>
 8015792:	4652      	mov	r2, sl
 8015794:	465b      	mov	r3, fp
 8015796:	f7ea fd79 	bl	800028c <__adddf3>
 801579a:	460b      	mov	r3, r1
 801579c:	4949      	ldr	r1, [pc, #292]	@ (80158c4 <_strtod_l+0xaf4>)
 801579e:	4a4e      	ldr	r2, [pc, #312]	@ (80158d8 <_strtod_l+0xb08>)
 80157a0:	4019      	ands	r1, r3
 80157a2:	4291      	cmp	r1, r2
 80157a4:	4682      	mov	sl, r0
 80157a6:	d942      	bls.n	801582e <_strtod_l+0xa5e>
 80157a8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80157aa:	4b47      	ldr	r3, [pc, #284]	@ (80158c8 <_strtod_l+0xaf8>)
 80157ac:	429a      	cmp	r2, r3
 80157ae:	d103      	bne.n	80157b8 <_strtod_l+0x9e8>
 80157b0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80157b2:	3301      	adds	r3, #1
 80157b4:	f43f ad2f 	beq.w	8015216 <_strtod_l+0x446>
 80157b8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80158c8 <_strtod_l+0xaf8>
 80157bc:	f04f 3aff 	mov.w	sl, #4294967295
 80157c0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80157c2:	9805      	ldr	r0, [sp, #20]
 80157c4:	f001 f852 	bl	801686c <_Bfree>
 80157c8:	9805      	ldr	r0, [sp, #20]
 80157ca:	4649      	mov	r1, r9
 80157cc:	f001 f84e 	bl	801686c <_Bfree>
 80157d0:	9805      	ldr	r0, [sp, #20]
 80157d2:	4641      	mov	r1, r8
 80157d4:	f001 f84a 	bl	801686c <_Bfree>
 80157d8:	9805      	ldr	r0, [sp, #20]
 80157da:	4621      	mov	r1, r4
 80157dc:	f001 f846 	bl	801686c <_Bfree>
 80157e0:	e619      	b.n	8015416 <_strtod_l+0x646>
 80157e2:	f1ba 0f01 	cmp.w	sl, #1
 80157e6:	d103      	bne.n	80157f0 <_strtod_l+0xa20>
 80157e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80157ea:	2b00      	cmp	r3, #0
 80157ec:	f43f ada6 	beq.w	801533c <_strtod_l+0x56c>
 80157f0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80158a0 <_strtod_l+0xad0>
 80157f4:	4f35      	ldr	r7, [pc, #212]	@ (80158cc <_strtod_l+0xafc>)
 80157f6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80157fa:	2600      	movs	r6, #0
 80157fc:	e7b1      	b.n	8015762 <_strtod_l+0x992>
 80157fe:	4f34      	ldr	r7, [pc, #208]	@ (80158d0 <_strtod_l+0xb00>)
 8015800:	2600      	movs	r6, #0
 8015802:	e7aa      	b.n	801575a <_strtod_l+0x98a>
 8015804:	4b32      	ldr	r3, [pc, #200]	@ (80158d0 <_strtod_l+0xb00>)
 8015806:	4630      	mov	r0, r6
 8015808:	4639      	mov	r1, r7
 801580a:	2200      	movs	r2, #0
 801580c:	f7ea fef4 	bl	80005f8 <__aeabi_dmul>
 8015810:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015812:	4606      	mov	r6, r0
 8015814:	460f      	mov	r7, r1
 8015816:	2b00      	cmp	r3, #0
 8015818:	d09f      	beq.n	801575a <_strtod_l+0x98a>
 801581a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801581e:	e7a0      	b.n	8015762 <_strtod_l+0x992>
 8015820:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80158a8 <_strtod_l+0xad8>
 8015824:	ed8d 7b06 	vstr	d7, [sp, #24]
 8015828:	ec57 6b17 	vmov	r6, r7, d7
 801582c:	e799      	b.n	8015762 <_strtod_l+0x992>
 801582e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8015832:	9b08      	ldr	r3, [sp, #32]
 8015834:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8015838:	2b00      	cmp	r3, #0
 801583a:	d1c1      	bne.n	80157c0 <_strtod_l+0x9f0>
 801583c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8015840:	0d1b      	lsrs	r3, r3, #20
 8015842:	051b      	lsls	r3, r3, #20
 8015844:	429d      	cmp	r5, r3
 8015846:	d1bb      	bne.n	80157c0 <_strtod_l+0x9f0>
 8015848:	4630      	mov	r0, r6
 801584a:	4639      	mov	r1, r7
 801584c:	f7eb fb1a 	bl	8000e84 <__aeabi_d2lz>
 8015850:	f7ea fea4 	bl	800059c <__aeabi_l2d>
 8015854:	4602      	mov	r2, r0
 8015856:	460b      	mov	r3, r1
 8015858:	4630      	mov	r0, r6
 801585a:	4639      	mov	r1, r7
 801585c:	f7ea fd14 	bl	8000288 <__aeabi_dsub>
 8015860:	460b      	mov	r3, r1
 8015862:	4602      	mov	r2, r0
 8015864:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8015868:	f3cb 0613 	ubfx	r6, fp, #0, #20
 801586c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801586e:	ea46 060a 	orr.w	r6, r6, sl
 8015872:	431e      	orrs	r6, r3
 8015874:	d06f      	beq.n	8015956 <_strtod_l+0xb86>
 8015876:	a30e      	add	r3, pc, #56	@ (adr r3, 80158b0 <_strtod_l+0xae0>)
 8015878:	e9d3 2300 	ldrd	r2, r3, [r3]
 801587c:	f7eb f92e 	bl	8000adc <__aeabi_dcmplt>
 8015880:	2800      	cmp	r0, #0
 8015882:	f47f acd3 	bne.w	801522c <_strtod_l+0x45c>
 8015886:	a30c      	add	r3, pc, #48	@ (adr r3, 80158b8 <_strtod_l+0xae8>)
 8015888:	e9d3 2300 	ldrd	r2, r3, [r3]
 801588c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8015890:	f7eb f942 	bl	8000b18 <__aeabi_dcmpgt>
 8015894:	2800      	cmp	r0, #0
 8015896:	d093      	beq.n	80157c0 <_strtod_l+0x9f0>
 8015898:	e4c8      	b.n	801522c <_strtod_l+0x45c>
 801589a:	bf00      	nop
 801589c:	f3af 8000 	nop.w
 80158a0:	00000000 	.word	0x00000000
 80158a4:	bff00000 	.word	0xbff00000
 80158a8:	00000000 	.word	0x00000000
 80158ac:	3ff00000 	.word	0x3ff00000
 80158b0:	94a03595 	.word	0x94a03595
 80158b4:	3fdfffff 	.word	0x3fdfffff
 80158b8:	35afe535 	.word	0x35afe535
 80158bc:	3fe00000 	.word	0x3fe00000
 80158c0:	000fffff 	.word	0x000fffff
 80158c4:	7ff00000 	.word	0x7ff00000
 80158c8:	7fefffff 	.word	0x7fefffff
 80158cc:	3ff00000 	.word	0x3ff00000
 80158d0:	3fe00000 	.word	0x3fe00000
 80158d4:	7fe00000 	.word	0x7fe00000
 80158d8:	7c9fffff 	.word	0x7c9fffff
 80158dc:	9b08      	ldr	r3, [sp, #32]
 80158de:	b323      	cbz	r3, 801592a <_strtod_l+0xb5a>
 80158e0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80158e4:	d821      	bhi.n	801592a <_strtod_l+0xb5a>
 80158e6:	a328      	add	r3, pc, #160	@ (adr r3, 8015988 <_strtod_l+0xbb8>)
 80158e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80158ec:	4630      	mov	r0, r6
 80158ee:	4639      	mov	r1, r7
 80158f0:	f7eb f8fe 	bl	8000af0 <__aeabi_dcmple>
 80158f4:	b1a0      	cbz	r0, 8015920 <_strtod_l+0xb50>
 80158f6:	4639      	mov	r1, r7
 80158f8:	4630      	mov	r0, r6
 80158fa:	f7eb f92d 	bl	8000b58 <__aeabi_d2uiz>
 80158fe:	2801      	cmp	r0, #1
 8015900:	bf38      	it	cc
 8015902:	2001      	movcc	r0, #1
 8015904:	f7ea fdfe 	bl	8000504 <__aeabi_ui2d>
 8015908:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801590a:	4606      	mov	r6, r0
 801590c:	460f      	mov	r7, r1
 801590e:	b9fb      	cbnz	r3, 8015950 <_strtod_l+0xb80>
 8015910:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8015914:	9014      	str	r0, [sp, #80]	@ 0x50
 8015916:	9315      	str	r3, [sp, #84]	@ 0x54
 8015918:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 801591c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8015920:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015922:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8015926:	1b5b      	subs	r3, r3, r5
 8015928:	9311      	str	r3, [sp, #68]	@ 0x44
 801592a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801592e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8015932:	f001 fac7 	bl	8016ec4 <__ulp>
 8015936:	4650      	mov	r0, sl
 8015938:	ec53 2b10 	vmov	r2, r3, d0
 801593c:	4659      	mov	r1, fp
 801593e:	f7ea fe5b 	bl	80005f8 <__aeabi_dmul>
 8015942:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8015946:	f7ea fca1 	bl	800028c <__adddf3>
 801594a:	4682      	mov	sl, r0
 801594c:	468b      	mov	fp, r1
 801594e:	e770      	b.n	8015832 <_strtod_l+0xa62>
 8015950:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8015954:	e7e0      	b.n	8015918 <_strtod_l+0xb48>
 8015956:	a30e      	add	r3, pc, #56	@ (adr r3, 8015990 <_strtod_l+0xbc0>)
 8015958:	e9d3 2300 	ldrd	r2, r3, [r3]
 801595c:	f7eb f8be 	bl	8000adc <__aeabi_dcmplt>
 8015960:	e798      	b.n	8015894 <_strtod_l+0xac4>
 8015962:	2300      	movs	r3, #0
 8015964:	930e      	str	r3, [sp, #56]	@ 0x38
 8015966:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8015968:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801596a:	6013      	str	r3, [r2, #0]
 801596c:	f7ff ba6d 	b.w	8014e4a <_strtod_l+0x7a>
 8015970:	2a65      	cmp	r2, #101	@ 0x65
 8015972:	f43f ab68 	beq.w	8015046 <_strtod_l+0x276>
 8015976:	2a45      	cmp	r2, #69	@ 0x45
 8015978:	f43f ab65 	beq.w	8015046 <_strtod_l+0x276>
 801597c:	2301      	movs	r3, #1
 801597e:	f7ff bba0 	b.w	80150c2 <_strtod_l+0x2f2>
 8015982:	bf00      	nop
 8015984:	f3af 8000 	nop.w
 8015988:	ffc00000 	.word	0xffc00000
 801598c:	41dfffff 	.word	0x41dfffff
 8015990:	94a03595 	.word	0x94a03595
 8015994:	3fcfffff 	.word	0x3fcfffff

08015998 <strtod>:
 8015998:	460a      	mov	r2, r1
 801599a:	4601      	mov	r1, r0
 801599c:	4802      	ldr	r0, [pc, #8]	@ (80159a8 <strtod+0x10>)
 801599e:	4b03      	ldr	r3, [pc, #12]	@ (80159ac <strtod+0x14>)
 80159a0:	6800      	ldr	r0, [r0, #0]
 80159a2:	f7ff ba15 	b.w	8014dd0 <_strtod_l>
 80159a6:	bf00      	nop
 80159a8:	200005e4 	.word	0x200005e4
 80159ac:	20000478 	.word	0x20000478

080159b0 <_strtol_l.isra.0>:
 80159b0:	2b24      	cmp	r3, #36	@ 0x24
 80159b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80159b6:	4686      	mov	lr, r0
 80159b8:	4690      	mov	r8, r2
 80159ba:	d801      	bhi.n	80159c0 <_strtol_l.isra.0+0x10>
 80159bc:	2b01      	cmp	r3, #1
 80159be:	d106      	bne.n	80159ce <_strtol_l.isra.0+0x1e>
 80159c0:	f000 fa5e 	bl	8015e80 <__errno>
 80159c4:	2316      	movs	r3, #22
 80159c6:	6003      	str	r3, [r0, #0]
 80159c8:	2000      	movs	r0, #0
 80159ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80159ce:	4834      	ldr	r0, [pc, #208]	@ (8015aa0 <_strtol_l.isra.0+0xf0>)
 80159d0:	460d      	mov	r5, r1
 80159d2:	462a      	mov	r2, r5
 80159d4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80159d8:	5d06      	ldrb	r6, [r0, r4]
 80159da:	f016 0608 	ands.w	r6, r6, #8
 80159de:	d1f8      	bne.n	80159d2 <_strtol_l.isra.0+0x22>
 80159e0:	2c2d      	cmp	r4, #45	@ 0x2d
 80159e2:	d110      	bne.n	8015a06 <_strtol_l.isra.0+0x56>
 80159e4:	782c      	ldrb	r4, [r5, #0]
 80159e6:	2601      	movs	r6, #1
 80159e8:	1c95      	adds	r5, r2, #2
 80159ea:	f033 0210 	bics.w	r2, r3, #16
 80159ee:	d115      	bne.n	8015a1c <_strtol_l.isra.0+0x6c>
 80159f0:	2c30      	cmp	r4, #48	@ 0x30
 80159f2:	d10d      	bne.n	8015a10 <_strtol_l.isra.0+0x60>
 80159f4:	782a      	ldrb	r2, [r5, #0]
 80159f6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80159fa:	2a58      	cmp	r2, #88	@ 0x58
 80159fc:	d108      	bne.n	8015a10 <_strtol_l.isra.0+0x60>
 80159fe:	786c      	ldrb	r4, [r5, #1]
 8015a00:	3502      	adds	r5, #2
 8015a02:	2310      	movs	r3, #16
 8015a04:	e00a      	b.n	8015a1c <_strtol_l.isra.0+0x6c>
 8015a06:	2c2b      	cmp	r4, #43	@ 0x2b
 8015a08:	bf04      	itt	eq
 8015a0a:	782c      	ldrbeq	r4, [r5, #0]
 8015a0c:	1c95      	addeq	r5, r2, #2
 8015a0e:	e7ec      	b.n	80159ea <_strtol_l.isra.0+0x3a>
 8015a10:	2b00      	cmp	r3, #0
 8015a12:	d1f6      	bne.n	8015a02 <_strtol_l.isra.0+0x52>
 8015a14:	2c30      	cmp	r4, #48	@ 0x30
 8015a16:	bf14      	ite	ne
 8015a18:	230a      	movne	r3, #10
 8015a1a:	2308      	moveq	r3, #8
 8015a1c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8015a20:	f10c 3cff 	add.w	ip, ip, #4294967295
 8015a24:	2200      	movs	r2, #0
 8015a26:	fbbc f9f3 	udiv	r9, ip, r3
 8015a2a:	4610      	mov	r0, r2
 8015a2c:	fb03 ca19 	mls	sl, r3, r9, ip
 8015a30:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8015a34:	2f09      	cmp	r7, #9
 8015a36:	d80f      	bhi.n	8015a58 <_strtol_l.isra.0+0xa8>
 8015a38:	463c      	mov	r4, r7
 8015a3a:	42a3      	cmp	r3, r4
 8015a3c:	dd1b      	ble.n	8015a76 <_strtol_l.isra.0+0xc6>
 8015a3e:	1c57      	adds	r7, r2, #1
 8015a40:	d007      	beq.n	8015a52 <_strtol_l.isra.0+0xa2>
 8015a42:	4581      	cmp	r9, r0
 8015a44:	d314      	bcc.n	8015a70 <_strtol_l.isra.0+0xc0>
 8015a46:	d101      	bne.n	8015a4c <_strtol_l.isra.0+0x9c>
 8015a48:	45a2      	cmp	sl, r4
 8015a4a:	db11      	blt.n	8015a70 <_strtol_l.isra.0+0xc0>
 8015a4c:	fb00 4003 	mla	r0, r0, r3, r4
 8015a50:	2201      	movs	r2, #1
 8015a52:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015a56:	e7eb      	b.n	8015a30 <_strtol_l.isra.0+0x80>
 8015a58:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8015a5c:	2f19      	cmp	r7, #25
 8015a5e:	d801      	bhi.n	8015a64 <_strtol_l.isra.0+0xb4>
 8015a60:	3c37      	subs	r4, #55	@ 0x37
 8015a62:	e7ea      	b.n	8015a3a <_strtol_l.isra.0+0x8a>
 8015a64:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8015a68:	2f19      	cmp	r7, #25
 8015a6a:	d804      	bhi.n	8015a76 <_strtol_l.isra.0+0xc6>
 8015a6c:	3c57      	subs	r4, #87	@ 0x57
 8015a6e:	e7e4      	b.n	8015a3a <_strtol_l.isra.0+0x8a>
 8015a70:	f04f 32ff 	mov.w	r2, #4294967295
 8015a74:	e7ed      	b.n	8015a52 <_strtol_l.isra.0+0xa2>
 8015a76:	1c53      	adds	r3, r2, #1
 8015a78:	d108      	bne.n	8015a8c <_strtol_l.isra.0+0xdc>
 8015a7a:	2322      	movs	r3, #34	@ 0x22
 8015a7c:	f8ce 3000 	str.w	r3, [lr]
 8015a80:	4660      	mov	r0, ip
 8015a82:	f1b8 0f00 	cmp.w	r8, #0
 8015a86:	d0a0      	beq.n	80159ca <_strtol_l.isra.0+0x1a>
 8015a88:	1e69      	subs	r1, r5, #1
 8015a8a:	e006      	b.n	8015a9a <_strtol_l.isra.0+0xea>
 8015a8c:	b106      	cbz	r6, 8015a90 <_strtol_l.isra.0+0xe0>
 8015a8e:	4240      	negs	r0, r0
 8015a90:	f1b8 0f00 	cmp.w	r8, #0
 8015a94:	d099      	beq.n	80159ca <_strtol_l.isra.0+0x1a>
 8015a96:	2a00      	cmp	r2, #0
 8015a98:	d1f6      	bne.n	8015a88 <_strtol_l.isra.0+0xd8>
 8015a9a:	f8c8 1000 	str.w	r1, [r8]
 8015a9e:	e794      	b.n	80159ca <_strtol_l.isra.0+0x1a>
 8015aa0:	08020ed9 	.word	0x08020ed9

08015aa4 <strtol>:
 8015aa4:	4613      	mov	r3, r2
 8015aa6:	460a      	mov	r2, r1
 8015aa8:	4601      	mov	r1, r0
 8015aaa:	4802      	ldr	r0, [pc, #8]	@ (8015ab4 <strtol+0x10>)
 8015aac:	6800      	ldr	r0, [r0, #0]
 8015aae:	f7ff bf7f 	b.w	80159b0 <_strtol_l.isra.0>
 8015ab2:	bf00      	nop
 8015ab4:	200005e4 	.word	0x200005e4

08015ab8 <std>:
 8015ab8:	2300      	movs	r3, #0
 8015aba:	b510      	push	{r4, lr}
 8015abc:	4604      	mov	r4, r0
 8015abe:	e9c0 3300 	strd	r3, r3, [r0]
 8015ac2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015ac6:	6083      	str	r3, [r0, #8]
 8015ac8:	8181      	strh	r1, [r0, #12]
 8015aca:	6643      	str	r3, [r0, #100]	@ 0x64
 8015acc:	81c2      	strh	r2, [r0, #14]
 8015ace:	6183      	str	r3, [r0, #24]
 8015ad0:	4619      	mov	r1, r3
 8015ad2:	2208      	movs	r2, #8
 8015ad4:	305c      	adds	r0, #92	@ 0x5c
 8015ad6:	f000 f952 	bl	8015d7e <memset>
 8015ada:	4b0d      	ldr	r3, [pc, #52]	@ (8015b10 <std+0x58>)
 8015adc:	6263      	str	r3, [r4, #36]	@ 0x24
 8015ade:	4b0d      	ldr	r3, [pc, #52]	@ (8015b14 <std+0x5c>)
 8015ae0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8015ae2:	4b0d      	ldr	r3, [pc, #52]	@ (8015b18 <std+0x60>)
 8015ae4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8015ae6:	4b0d      	ldr	r3, [pc, #52]	@ (8015b1c <std+0x64>)
 8015ae8:	6323      	str	r3, [r4, #48]	@ 0x30
 8015aea:	4b0d      	ldr	r3, [pc, #52]	@ (8015b20 <std+0x68>)
 8015aec:	6224      	str	r4, [r4, #32]
 8015aee:	429c      	cmp	r4, r3
 8015af0:	d006      	beq.n	8015b00 <std+0x48>
 8015af2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8015af6:	4294      	cmp	r4, r2
 8015af8:	d002      	beq.n	8015b00 <std+0x48>
 8015afa:	33d0      	adds	r3, #208	@ 0xd0
 8015afc:	429c      	cmp	r4, r3
 8015afe:	d105      	bne.n	8015b0c <std+0x54>
 8015b00:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8015b04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015b08:	f000 b9e4 	b.w	8015ed4 <__retarget_lock_init_recursive>
 8015b0c:	bd10      	pop	{r4, pc}
 8015b0e:	bf00      	nop
 8015b10:	08015ca5 	.word	0x08015ca5
 8015b14:	08015cc7 	.word	0x08015cc7
 8015b18:	08015cff 	.word	0x08015cff
 8015b1c:	08015d23 	.word	0x08015d23
 8015b20:	200093a0 	.word	0x200093a0

08015b24 <stdio_exit_handler>:
 8015b24:	4a02      	ldr	r2, [pc, #8]	@ (8015b30 <stdio_exit_handler+0xc>)
 8015b26:	4903      	ldr	r1, [pc, #12]	@ (8015b34 <stdio_exit_handler+0x10>)
 8015b28:	4803      	ldr	r0, [pc, #12]	@ (8015b38 <stdio_exit_handler+0x14>)
 8015b2a:	f000 b869 	b.w	8015c00 <_fwalk_sglue>
 8015b2e:	bf00      	nop
 8015b30:	2000046c 	.word	0x2000046c
 8015b34:	08017aad 	.word	0x08017aad
 8015b38:	200005e8 	.word	0x200005e8

08015b3c <cleanup_stdio>:
 8015b3c:	6841      	ldr	r1, [r0, #4]
 8015b3e:	4b0c      	ldr	r3, [pc, #48]	@ (8015b70 <cleanup_stdio+0x34>)
 8015b40:	4299      	cmp	r1, r3
 8015b42:	b510      	push	{r4, lr}
 8015b44:	4604      	mov	r4, r0
 8015b46:	d001      	beq.n	8015b4c <cleanup_stdio+0x10>
 8015b48:	f001 ffb0 	bl	8017aac <_fflush_r>
 8015b4c:	68a1      	ldr	r1, [r4, #8]
 8015b4e:	4b09      	ldr	r3, [pc, #36]	@ (8015b74 <cleanup_stdio+0x38>)
 8015b50:	4299      	cmp	r1, r3
 8015b52:	d002      	beq.n	8015b5a <cleanup_stdio+0x1e>
 8015b54:	4620      	mov	r0, r4
 8015b56:	f001 ffa9 	bl	8017aac <_fflush_r>
 8015b5a:	68e1      	ldr	r1, [r4, #12]
 8015b5c:	4b06      	ldr	r3, [pc, #24]	@ (8015b78 <cleanup_stdio+0x3c>)
 8015b5e:	4299      	cmp	r1, r3
 8015b60:	d004      	beq.n	8015b6c <cleanup_stdio+0x30>
 8015b62:	4620      	mov	r0, r4
 8015b64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015b68:	f001 bfa0 	b.w	8017aac <_fflush_r>
 8015b6c:	bd10      	pop	{r4, pc}
 8015b6e:	bf00      	nop
 8015b70:	200093a0 	.word	0x200093a0
 8015b74:	20009408 	.word	0x20009408
 8015b78:	20009470 	.word	0x20009470

08015b7c <global_stdio_init.part.0>:
 8015b7c:	b510      	push	{r4, lr}
 8015b7e:	4b0b      	ldr	r3, [pc, #44]	@ (8015bac <global_stdio_init.part.0+0x30>)
 8015b80:	4c0b      	ldr	r4, [pc, #44]	@ (8015bb0 <global_stdio_init.part.0+0x34>)
 8015b82:	4a0c      	ldr	r2, [pc, #48]	@ (8015bb4 <global_stdio_init.part.0+0x38>)
 8015b84:	601a      	str	r2, [r3, #0]
 8015b86:	4620      	mov	r0, r4
 8015b88:	2200      	movs	r2, #0
 8015b8a:	2104      	movs	r1, #4
 8015b8c:	f7ff ff94 	bl	8015ab8 <std>
 8015b90:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8015b94:	2201      	movs	r2, #1
 8015b96:	2109      	movs	r1, #9
 8015b98:	f7ff ff8e 	bl	8015ab8 <std>
 8015b9c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8015ba0:	2202      	movs	r2, #2
 8015ba2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015ba6:	2112      	movs	r1, #18
 8015ba8:	f7ff bf86 	b.w	8015ab8 <std>
 8015bac:	200094d8 	.word	0x200094d8
 8015bb0:	200093a0 	.word	0x200093a0
 8015bb4:	08015b25 	.word	0x08015b25

08015bb8 <__sfp_lock_acquire>:
 8015bb8:	4801      	ldr	r0, [pc, #4]	@ (8015bc0 <__sfp_lock_acquire+0x8>)
 8015bba:	f000 b98c 	b.w	8015ed6 <__retarget_lock_acquire_recursive>
 8015bbe:	bf00      	nop
 8015bc0:	200094e1 	.word	0x200094e1

08015bc4 <__sfp_lock_release>:
 8015bc4:	4801      	ldr	r0, [pc, #4]	@ (8015bcc <__sfp_lock_release+0x8>)
 8015bc6:	f000 b987 	b.w	8015ed8 <__retarget_lock_release_recursive>
 8015bca:	bf00      	nop
 8015bcc:	200094e1 	.word	0x200094e1

08015bd0 <__sinit>:
 8015bd0:	b510      	push	{r4, lr}
 8015bd2:	4604      	mov	r4, r0
 8015bd4:	f7ff fff0 	bl	8015bb8 <__sfp_lock_acquire>
 8015bd8:	6a23      	ldr	r3, [r4, #32]
 8015bda:	b11b      	cbz	r3, 8015be4 <__sinit+0x14>
 8015bdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015be0:	f7ff bff0 	b.w	8015bc4 <__sfp_lock_release>
 8015be4:	4b04      	ldr	r3, [pc, #16]	@ (8015bf8 <__sinit+0x28>)
 8015be6:	6223      	str	r3, [r4, #32]
 8015be8:	4b04      	ldr	r3, [pc, #16]	@ (8015bfc <__sinit+0x2c>)
 8015bea:	681b      	ldr	r3, [r3, #0]
 8015bec:	2b00      	cmp	r3, #0
 8015bee:	d1f5      	bne.n	8015bdc <__sinit+0xc>
 8015bf0:	f7ff ffc4 	bl	8015b7c <global_stdio_init.part.0>
 8015bf4:	e7f2      	b.n	8015bdc <__sinit+0xc>
 8015bf6:	bf00      	nop
 8015bf8:	08015b3d 	.word	0x08015b3d
 8015bfc:	200094d8 	.word	0x200094d8

08015c00 <_fwalk_sglue>:
 8015c00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015c04:	4607      	mov	r7, r0
 8015c06:	4688      	mov	r8, r1
 8015c08:	4614      	mov	r4, r2
 8015c0a:	2600      	movs	r6, #0
 8015c0c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015c10:	f1b9 0901 	subs.w	r9, r9, #1
 8015c14:	d505      	bpl.n	8015c22 <_fwalk_sglue+0x22>
 8015c16:	6824      	ldr	r4, [r4, #0]
 8015c18:	2c00      	cmp	r4, #0
 8015c1a:	d1f7      	bne.n	8015c0c <_fwalk_sglue+0xc>
 8015c1c:	4630      	mov	r0, r6
 8015c1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015c22:	89ab      	ldrh	r3, [r5, #12]
 8015c24:	2b01      	cmp	r3, #1
 8015c26:	d907      	bls.n	8015c38 <_fwalk_sglue+0x38>
 8015c28:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015c2c:	3301      	adds	r3, #1
 8015c2e:	d003      	beq.n	8015c38 <_fwalk_sglue+0x38>
 8015c30:	4629      	mov	r1, r5
 8015c32:	4638      	mov	r0, r7
 8015c34:	47c0      	blx	r8
 8015c36:	4306      	orrs	r6, r0
 8015c38:	3568      	adds	r5, #104	@ 0x68
 8015c3a:	e7e9      	b.n	8015c10 <_fwalk_sglue+0x10>

08015c3c <iprintf>:
 8015c3c:	b40f      	push	{r0, r1, r2, r3}
 8015c3e:	b507      	push	{r0, r1, r2, lr}
 8015c40:	4906      	ldr	r1, [pc, #24]	@ (8015c5c <iprintf+0x20>)
 8015c42:	ab04      	add	r3, sp, #16
 8015c44:	6808      	ldr	r0, [r1, #0]
 8015c46:	f853 2b04 	ldr.w	r2, [r3], #4
 8015c4a:	6881      	ldr	r1, [r0, #8]
 8015c4c:	9301      	str	r3, [sp, #4]
 8015c4e:	f001 fc05 	bl	801745c <_vfiprintf_r>
 8015c52:	b003      	add	sp, #12
 8015c54:	f85d eb04 	ldr.w	lr, [sp], #4
 8015c58:	b004      	add	sp, #16
 8015c5a:	4770      	bx	lr
 8015c5c:	200005e4 	.word	0x200005e4

08015c60 <siprintf>:
 8015c60:	b40e      	push	{r1, r2, r3}
 8015c62:	b510      	push	{r4, lr}
 8015c64:	b09d      	sub	sp, #116	@ 0x74
 8015c66:	ab1f      	add	r3, sp, #124	@ 0x7c
 8015c68:	9002      	str	r0, [sp, #8]
 8015c6a:	9006      	str	r0, [sp, #24]
 8015c6c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8015c70:	480a      	ldr	r0, [pc, #40]	@ (8015c9c <siprintf+0x3c>)
 8015c72:	9107      	str	r1, [sp, #28]
 8015c74:	9104      	str	r1, [sp, #16]
 8015c76:	490a      	ldr	r1, [pc, #40]	@ (8015ca0 <siprintf+0x40>)
 8015c78:	f853 2b04 	ldr.w	r2, [r3], #4
 8015c7c:	9105      	str	r1, [sp, #20]
 8015c7e:	2400      	movs	r4, #0
 8015c80:	a902      	add	r1, sp, #8
 8015c82:	6800      	ldr	r0, [r0, #0]
 8015c84:	9301      	str	r3, [sp, #4]
 8015c86:	941b      	str	r4, [sp, #108]	@ 0x6c
 8015c88:	f001 fac2 	bl	8017210 <_svfiprintf_r>
 8015c8c:	9b02      	ldr	r3, [sp, #8]
 8015c8e:	701c      	strb	r4, [r3, #0]
 8015c90:	b01d      	add	sp, #116	@ 0x74
 8015c92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015c96:	b003      	add	sp, #12
 8015c98:	4770      	bx	lr
 8015c9a:	bf00      	nop
 8015c9c:	200005e4 	.word	0x200005e4
 8015ca0:	ffff0208 	.word	0xffff0208

08015ca4 <__sread>:
 8015ca4:	b510      	push	{r4, lr}
 8015ca6:	460c      	mov	r4, r1
 8015ca8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015cac:	f000 f8c4 	bl	8015e38 <_read_r>
 8015cb0:	2800      	cmp	r0, #0
 8015cb2:	bfab      	itete	ge
 8015cb4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8015cb6:	89a3      	ldrhlt	r3, [r4, #12]
 8015cb8:	181b      	addge	r3, r3, r0
 8015cba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8015cbe:	bfac      	ite	ge
 8015cc0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8015cc2:	81a3      	strhlt	r3, [r4, #12]
 8015cc4:	bd10      	pop	{r4, pc}

08015cc6 <__swrite>:
 8015cc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015cca:	461f      	mov	r7, r3
 8015ccc:	898b      	ldrh	r3, [r1, #12]
 8015cce:	05db      	lsls	r3, r3, #23
 8015cd0:	4605      	mov	r5, r0
 8015cd2:	460c      	mov	r4, r1
 8015cd4:	4616      	mov	r6, r2
 8015cd6:	d505      	bpl.n	8015ce4 <__swrite+0x1e>
 8015cd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015cdc:	2302      	movs	r3, #2
 8015cde:	2200      	movs	r2, #0
 8015ce0:	f000 f898 	bl	8015e14 <_lseek_r>
 8015ce4:	89a3      	ldrh	r3, [r4, #12]
 8015ce6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015cea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8015cee:	81a3      	strh	r3, [r4, #12]
 8015cf0:	4632      	mov	r2, r6
 8015cf2:	463b      	mov	r3, r7
 8015cf4:	4628      	mov	r0, r5
 8015cf6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015cfa:	f000 b8af 	b.w	8015e5c <_write_r>

08015cfe <__sseek>:
 8015cfe:	b510      	push	{r4, lr}
 8015d00:	460c      	mov	r4, r1
 8015d02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015d06:	f000 f885 	bl	8015e14 <_lseek_r>
 8015d0a:	1c43      	adds	r3, r0, #1
 8015d0c:	89a3      	ldrh	r3, [r4, #12]
 8015d0e:	bf15      	itete	ne
 8015d10:	6560      	strne	r0, [r4, #84]	@ 0x54
 8015d12:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8015d16:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8015d1a:	81a3      	strheq	r3, [r4, #12]
 8015d1c:	bf18      	it	ne
 8015d1e:	81a3      	strhne	r3, [r4, #12]
 8015d20:	bd10      	pop	{r4, pc}

08015d22 <__sclose>:
 8015d22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015d26:	f000 b865 	b.w	8015df4 <_close_r>

08015d2a <memcmp>:
 8015d2a:	b510      	push	{r4, lr}
 8015d2c:	3901      	subs	r1, #1
 8015d2e:	4402      	add	r2, r0
 8015d30:	4290      	cmp	r0, r2
 8015d32:	d101      	bne.n	8015d38 <memcmp+0xe>
 8015d34:	2000      	movs	r0, #0
 8015d36:	e005      	b.n	8015d44 <memcmp+0x1a>
 8015d38:	7803      	ldrb	r3, [r0, #0]
 8015d3a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8015d3e:	42a3      	cmp	r3, r4
 8015d40:	d001      	beq.n	8015d46 <memcmp+0x1c>
 8015d42:	1b18      	subs	r0, r3, r4
 8015d44:	bd10      	pop	{r4, pc}
 8015d46:	3001      	adds	r0, #1
 8015d48:	e7f2      	b.n	8015d30 <memcmp+0x6>

08015d4a <memmove>:
 8015d4a:	4288      	cmp	r0, r1
 8015d4c:	b510      	push	{r4, lr}
 8015d4e:	eb01 0402 	add.w	r4, r1, r2
 8015d52:	d902      	bls.n	8015d5a <memmove+0x10>
 8015d54:	4284      	cmp	r4, r0
 8015d56:	4623      	mov	r3, r4
 8015d58:	d807      	bhi.n	8015d6a <memmove+0x20>
 8015d5a:	1e43      	subs	r3, r0, #1
 8015d5c:	42a1      	cmp	r1, r4
 8015d5e:	d008      	beq.n	8015d72 <memmove+0x28>
 8015d60:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015d64:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015d68:	e7f8      	b.n	8015d5c <memmove+0x12>
 8015d6a:	4402      	add	r2, r0
 8015d6c:	4601      	mov	r1, r0
 8015d6e:	428a      	cmp	r2, r1
 8015d70:	d100      	bne.n	8015d74 <memmove+0x2a>
 8015d72:	bd10      	pop	{r4, pc}
 8015d74:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015d78:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015d7c:	e7f7      	b.n	8015d6e <memmove+0x24>

08015d7e <memset>:
 8015d7e:	4402      	add	r2, r0
 8015d80:	4603      	mov	r3, r0
 8015d82:	4293      	cmp	r3, r2
 8015d84:	d100      	bne.n	8015d88 <memset+0xa>
 8015d86:	4770      	bx	lr
 8015d88:	f803 1b01 	strb.w	r1, [r3], #1
 8015d8c:	e7f9      	b.n	8015d82 <memset+0x4>

08015d8e <strchr>:
 8015d8e:	b2c9      	uxtb	r1, r1
 8015d90:	4603      	mov	r3, r0
 8015d92:	4618      	mov	r0, r3
 8015d94:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015d98:	b112      	cbz	r2, 8015da0 <strchr+0x12>
 8015d9a:	428a      	cmp	r2, r1
 8015d9c:	d1f9      	bne.n	8015d92 <strchr+0x4>
 8015d9e:	4770      	bx	lr
 8015da0:	2900      	cmp	r1, #0
 8015da2:	bf18      	it	ne
 8015da4:	2000      	movne	r0, #0
 8015da6:	4770      	bx	lr

08015da8 <strncmp>:
 8015da8:	b510      	push	{r4, lr}
 8015daa:	b16a      	cbz	r2, 8015dc8 <strncmp+0x20>
 8015dac:	3901      	subs	r1, #1
 8015dae:	1884      	adds	r4, r0, r2
 8015db0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015db4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8015db8:	429a      	cmp	r2, r3
 8015dba:	d103      	bne.n	8015dc4 <strncmp+0x1c>
 8015dbc:	42a0      	cmp	r0, r4
 8015dbe:	d001      	beq.n	8015dc4 <strncmp+0x1c>
 8015dc0:	2a00      	cmp	r2, #0
 8015dc2:	d1f5      	bne.n	8015db0 <strncmp+0x8>
 8015dc4:	1ad0      	subs	r0, r2, r3
 8015dc6:	bd10      	pop	{r4, pc}
 8015dc8:	4610      	mov	r0, r2
 8015dca:	e7fc      	b.n	8015dc6 <strncmp+0x1e>

08015dcc <strncpy>:
 8015dcc:	b510      	push	{r4, lr}
 8015dce:	3901      	subs	r1, #1
 8015dd0:	4603      	mov	r3, r0
 8015dd2:	b132      	cbz	r2, 8015de2 <strncpy+0x16>
 8015dd4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8015dd8:	f803 4b01 	strb.w	r4, [r3], #1
 8015ddc:	3a01      	subs	r2, #1
 8015dde:	2c00      	cmp	r4, #0
 8015de0:	d1f7      	bne.n	8015dd2 <strncpy+0x6>
 8015de2:	441a      	add	r2, r3
 8015de4:	2100      	movs	r1, #0
 8015de6:	4293      	cmp	r3, r2
 8015de8:	d100      	bne.n	8015dec <strncpy+0x20>
 8015dea:	bd10      	pop	{r4, pc}
 8015dec:	f803 1b01 	strb.w	r1, [r3], #1
 8015df0:	e7f9      	b.n	8015de6 <strncpy+0x1a>
	...

08015df4 <_close_r>:
 8015df4:	b538      	push	{r3, r4, r5, lr}
 8015df6:	4d06      	ldr	r5, [pc, #24]	@ (8015e10 <_close_r+0x1c>)
 8015df8:	2300      	movs	r3, #0
 8015dfa:	4604      	mov	r4, r0
 8015dfc:	4608      	mov	r0, r1
 8015dfe:	602b      	str	r3, [r5, #0]
 8015e00:	f7ee feda 	bl	8004bb8 <_close>
 8015e04:	1c43      	adds	r3, r0, #1
 8015e06:	d102      	bne.n	8015e0e <_close_r+0x1a>
 8015e08:	682b      	ldr	r3, [r5, #0]
 8015e0a:	b103      	cbz	r3, 8015e0e <_close_r+0x1a>
 8015e0c:	6023      	str	r3, [r4, #0]
 8015e0e:	bd38      	pop	{r3, r4, r5, pc}
 8015e10:	200094dc 	.word	0x200094dc

08015e14 <_lseek_r>:
 8015e14:	b538      	push	{r3, r4, r5, lr}
 8015e16:	4d07      	ldr	r5, [pc, #28]	@ (8015e34 <_lseek_r+0x20>)
 8015e18:	4604      	mov	r4, r0
 8015e1a:	4608      	mov	r0, r1
 8015e1c:	4611      	mov	r1, r2
 8015e1e:	2200      	movs	r2, #0
 8015e20:	602a      	str	r2, [r5, #0]
 8015e22:	461a      	mov	r2, r3
 8015e24:	f7ee feef 	bl	8004c06 <_lseek>
 8015e28:	1c43      	adds	r3, r0, #1
 8015e2a:	d102      	bne.n	8015e32 <_lseek_r+0x1e>
 8015e2c:	682b      	ldr	r3, [r5, #0]
 8015e2e:	b103      	cbz	r3, 8015e32 <_lseek_r+0x1e>
 8015e30:	6023      	str	r3, [r4, #0]
 8015e32:	bd38      	pop	{r3, r4, r5, pc}
 8015e34:	200094dc 	.word	0x200094dc

08015e38 <_read_r>:
 8015e38:	b538      	push	{r3, r4, r5, lr}
 8015e3a:	4d07      	ldr	r5, [pc, #28]	@ (8015e58 <_read_r+0x20>)
 8015e3c:	4604      	mov	r4, r0
 8015e3e:	4608      	mov	r0, r1
 8015e40:	4611      	mov	r1, r2
 8015e42:	2200      	movs	r2, #0
 8015e44:	602a      	str	r2, [r5, #0]
 8015e46:	461a      	mov	r2, r3
 8015e48:	f7ee fe7d 	bl	8004b46 <_read>
 8015e4c:	1c43      	adds	r3, r0, #1
 8015e4e:	d102      	bne.n	8015e56 <_read_r+0x1e>
 8015e50:	682b      	ldr	r3, [r5, #0]
 8015e52:	b103      	cbz	r3, 8015e56 <_read_r+0x1e>
 8015e54:	6023      	str	r3, [r4, #0]
 8015e56:	bd38      	pop	{r3, r4, r5, pc}
 8015e58:	200094dc 	.word	0x200094dc

08015e5c <_write_r>:
 8015e5c:	b538      	push	{r3, r4, r5, lr}
 8015e5e:	4d07      	ldr	r5, [pc, #28]	@ (8015e7c <_write_r+0x20>)
 8015e60:	4604      	mov	r4, r0
 8015e62:	4608      	mov	r0, r1
 8015e64:	4611      	mov	r1, r2
 8015e66:	2200      	movs	r2, #0
 8015e68:	602a      	str	r2, [r5, #0]
 8015e6a:	461a      	mov	r2, r3
 8015e6c:	f7ee fe88 	bl	8004b80 <_write>
 8015e70:	1c43      	adds	r3, r0, #1
 8015e72:	d102      	bne.n	8015e7a <_write_r+0x1e>
 8015e74:	682b      	ldr	r3, [r5, #0]
 8015e76:	b103      	cbz	r3, 8015e7a <_write_r+0x1e>
 8015e78:	6023      	str	r3, [r4, #0]
 8015e7a:	bd38      	pop	{r3, r4, r5, pc}
 8015e7c:	200094dc 	.word	0x200094dc

08015e80 <__errno>:
 8015e80:	4b01      	ldr	r3, [pc, #4]	@ (8015e88 <__errno+0x8>)
 8015e82:	6818      	ldr	r0, [r3, #0]
 8015e84:	4770      	bx	lr
 8015e86:	bf00      	nop
 8015e88:	200005e4 	.word	0x200005e4

08015e8c <__libc_init_array>:
 8015e8c:	b570      	push	{r4, r5, r6, lr}
 8015e8e:	4d0d      	ldr	r5, [pc, #52]	@ (8015ec4 <__libc_init_array+0x38>)
 8015e90:	4c0d      	ldr	r4, [pc, #52]	@ (8015ec8 <__libc_init_array+0x3c>)
 8015e92:	1b64      	subs	r4, r4, r5
 8015e94:	10a4      	asrs	r4, r4, #2
 8015e96:	2600      	movs	r6, #0
 8015e98:	42a6      	cmp	r6, r4
 8015e9a:	d109      	bne.n	8015eb0 <__libc_init_array+0x24>
 8015e9c:	4d0b      	ldr	r5, [pc, #44]	@ (8015ecc <__libc_init_array+0x40>)
 8015e9e:	4c0c      	ldr	r4, [pc, #48]	@ (8015ed0 <__libc_init_array+0x44>)
 8015ea0:	f002 fb34 	bl	801850c <_init>
 8015ea4:	1b64      	subs	r4, r4, r5
 8015ea6:	10a4      	asrs	r4, r4, #2
 8015ea8:	2600      	movs	r6, #0
 8015eaa:	42a6      	cmp	r6, r4
 8015eac:	d105      	bne.n	8015eba <__libc_init_array+0x2e>
 8015eae:	bd70      	pop	{r4, r5, r6, pc}
 8015eb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8015eb4:	4798      	blx	r3
 8015eb6:	3601      	adds	r6, #1
 8015eb8:	e7ee      	b.n	8015e98 <__libc_init_array+0xc>
 8015eba:	f855 3b04 	ldr.w	r3, [r5], #4
 8015ebe:	4798      	blx	r3
 8015ec0:	3601      	adds	r6, #1
 8015ec2:	e7f2      	b.n	8015eaa <__libc_init_array+0x1e>
 8015ec4:	08021130 	.word	0x08021130
 8015ec8:	08021130 	.word	0x08021130
 8015ecc:	08021130 	.word	0x08021130
 8015ed0:	08021134 	.word	0x08021134

08015ed4 <__retarget_lock_init_recursive>:
 8015ed4:	4770      	bx	lr

08015ed6 <__retarget_lock_acquire_recursive>:
 8015ed6:	4770      	bx	lr

08015ed8 <__retarget_lock_release_recursive>:
 8015ed8:	4770      	bx	lr

08015eda <strcpy>:
 8015eda:	4603      	mov	r3, r0
 8015edc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015ee0:	f803 2b01 	strb.w	r2, [r3], #1
 8015ee4:	2a00      	cmp	r2, #0
 8015ee6:	d1f9      	bne.n	8015edc <strcpy+0x2>
 8015ee8:	4770      	bx	lr

08015eea <memcpy>:
 8015eea:	440a      	add	r2, r1
 8015eec:	4291      	cmp	r1, r2
 8015eee:	f100 33ff 	add.w	r3, r0, #4294967295
 8015ef2:	d100      	bne.n	8015ef6 <memcpy+0xc>
 8015ef4:	4770      	bx	lr
 8015ef6:	b510      	push	{r4, lr}
 8015ef8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015efc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015f00:	4291      	cmp	r1, r2
 8015f02:	d1f9      	bne.n	8015ef8 <memcpy+0xe>
 8015f04:	bd10      	pop	{r4, pc}
	...

08015f08 <nan>:
 8015f08:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8015f10 <nan+0x8>
 8015f0c:	4770      	bx	lr
 8015f0e:	bf00      	nop
 8015f10:	00000000 	.word	0x00000000
 8015f14:	7ff80000 	.word	0x7ff80000

08015f18 <__assert_func>:
 8015f18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015f1a:	4614      	mov	r4, r2
 8015f1c:	461a      	mov	r2, r3
 8015f1e:	4b09      	ldr	r3, [pc, #36]	@ (8015f44 <__assert_func+0x2c>)
 8015f20:	681b      	ldr	r3, [r3, #0]
 8015f22:	4605      	mov	r5, r0
 8015f24:	68d8      	ldr	r0, [r3, #12]
 8015f26:	b14c      	cbz	r4, 8015f3c <__assert_func+0x24>
 8015f28:	4b07      	ldr	r3, [pc, #28]	@ (8015f48 <__assert_func+0x30>)
 8015f2a:	9100      	str	r1, [sp, #0]
 8015f2c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015f30:	4906      	ldr	r1, [pc, #24]	@ (8015f4c <__assert_func+0x34>)
 8015f32:	462b      	mov	r3, r5
 8015f34:	f001 fde2 	bl	8017afc <fiprintf>
 8015f38:	f001 fe96 	bl	8017c68 <abort>
 8015f3c:	4b04      	ldr	r3, [pc, #16]	@ (8015f50 <__assert_func+0x38>)
 8015f3e:	461c      	mov	r4, r3
 8015f40:	e7f3      	b.n	8015f2a <__assert_func+0x12>
 8015f42:	bf00      	nop
 8015f44:	200005e4 	.word	0x200005e4
 8015f48:	08020d4f 	.word	0x08020d4f
 8015f4c:	08020d5c 	.word	0x08020d5c
 8015f50:	08020d8a 	.word	0x08020d8a

08015f54 <_free_r>:
 8015f54:	b538      	push	{r3, r4, r5, lr}
 8015f56:	4605      	mov	r5, r0
 8015f58:	2900      	cmp	r1, #0
 8015f5a:	d041      	beq.n	8015fe0 <_free_r+0x8c>
 8015f5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015f60:	1f0c      	subs	r4, r1, #4
 8015f62:	2b00      	cmp	r3, #0
 8015f64:	bfb8      	it	lt
 8015f66:	18e4      	addlt	r4, r4, r3
 8015f68:	f000 fc34 	bl	80167d4 <__malloc_lock>
 8015f6c:	4a1d      	ldr	r2, [pc, #116]	@ (8015fe4 <_free_r+0x90>)
 8015f6e:	6813      	ldr	r3, [r2, #0]
 8015f70:	b933      	cbnz	r3, 8015f80 <_free_r+0x2c>
 8015f72:	6063      	str	r3, [r4, #4]
 8015f74:	6014      	str	r4, [r2, #0]
 8015f76:	4628      	mov	r0, r5
 8015f78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015f7c:	f000 bc30 	b.w	80167e0 <__malloc_unlock>
 8015f80:	42a3      	cmp	r3, r4
 8015f82:	d908      	bls.n	8015f96 <_free_r+0x42>
 8015f84:	6820      	ldr	r0, [r4, #0]
 8015f86:	1821      	adds	r1, r4, r0
 8015f88:	428b      	cmp	r3, r1
 8015f8a:	bf01      	itttt	eq
 8015f8c:	6819      	ldreq	r1, [r3, #0]
 8015f8e:	685b      	ldreq	r3, [r3, #4]
 8015f90:	1809      	addeq	r1, r1, r0
 8015f92:	6021      	streq	r1, [r4, #0]
 8015f94:	e7ed      	b.n	8015f72 <_free_r+0x1e>
 8015f96:	461a      	mov	r2, r3
 8015f98:	685b      	ldr	r3, [r3, #4]
 8015f9a:	b10b      	cbz	r3, 8015fa0 <_free_r+0x4c>
 8015f9c:	42a3      	cmp	r3, r4
 8015f9e:	d9fa      	bls.n	8015f96 <_free_r+0x42>
 8015fa0:	6811      	ldr	r1, [r2, #0]
 8015fa2:	1850      	adds	r0, r2, r1
 8015fa4:	42a0      	cmp	r0, r4
 8015fa6:	d10b      	bne.n	8015fc0 <_free_r+0x6c>
 8015fa8:	6820      	ldr	r0, [r4, #0]
 8015faa:	4401      	add	r1, r0
 8015fac:	1850      	adds	r0, r2, r1
 8015fae:	4283      	cmp	r3, r0
 8015fb0:	6011      	str	r1, [r2, #0]
 8015fb2:	d1e0      	bne.n	8015f76 <_free_r+0x22>
 8015fb4:	6818      	ldr	r0, [r3, #0]
 8015fb6:	685b      	ldr	r3, [r3, #4]
 8015fb8:	6053      	str	r3, [r2, #4]
 8015fba:	4408      	add	r0, r1
 8015fbc:	6010      	str	r0, [r2, #0]
 8015fbe:	e7da      	b.n	8015f76 <_free_r+0x22>
 8015fc0:	d902      	bls.n	8015fc8 <_free_r+0x74>
 8015fc2:	230c      	movs	r3, #12
 8015fc4:	602b      	str	r3, [r5, #0]
 8015fc6:	e7d6      	b.n	8015f76 <_free_r+0x22>
 8015fc8:	6820      	ldr	r0, [r4, #0]
 8015fca:	1821      	adds	r1, r4, r0
 8015fcc:	428b      	cmp	r3, r1
 8015fce:	bf04      	itt	eq
 8015fd0:	6819      	ldreq	r1, [r3, #0]
 8015fd2:	685b      	ldreq	r3, [r3, #4]
 8015fd4:	6063      	str	r3, [r4, #4]
 8015fd6:	bf04      	itt	eq
 8015fd8:	1809      	addeq	r1, r1, r0
 8015fda:	6021      	streq	r1, [r4, #0]
 8015fdc:	6054      	str	r4, [r2, #4]
 8015fde:	e7ca      	b.n	8015f76 <_free_r+0x22>
 8015fe0:	bd38      	pop	{r3, r4, r5, pc}
 8015fe2:	bf00      	nop
 8015fe4:	200094e8 	.word	0x200094e8

08015fe8 <rshift>:
 8015fe8:	6903      	ldr	r3, [r0, #16]
 8015fea:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8015fee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015ff2:	ea4f 1261 	mov.w	r2, r1, asr #5
 8015ff6:	f100 0414 	add.w	r4, r0, #20
 8015ffa:	dd45      	ble.n	8016088 <rshift+0xa0>
 8015ffc:	f011 011f 	ands.w	r1, r1, #31
 8016000:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8016004:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8016008:	d10c      	bne.n	8016024 <rshift+0x3c>
 801600a:	f100 0710 	add.w	r7, r0, #16
 801600e:	4629      	mov	r1, r5
 8016010:	42b1      	cmp	r1, r6
 8016012:	d334      	bcc.n	801607e <rshift+0x96>
 8016014:	1a9b      	subs	r3, r3, r2
 8016016:	009b      	lsls	r3, r3, #2
 8016018:	1eea      	subs	r2, r5, #3
 801601a:	4296      	cmp	r6, r2
 801601c:	bf38      	it	cc
 801601e:	2300      	movcc	r3, #0
 8016020:	4423      	add	r3, r4
 8016022:	e015      	b.n	8016050 <rshift+0x68>
 8016024:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8016028:	f1c1 0820 	rsb	r8, r1, #32
 801602c:	40cf      	lsrs	r7, r1
 801602e:	f105 0e04 	add.w	lr, r5, #4
 8016032:	46a1      	mov	r9, r4
 8016034:	4576      	cmp	r6, lr
 8016036:	46f4      	mov	ip, lr
 8016038:	d815      	bhi.n	8016066 <rshift+0x7e>
 801603a:	1a9a      	subs	r2, r3, r2
 801603c:	0092      	lsls	r2, r2, #2
 801603e:	3a04      	subs	r2, #4
 8016040:	3501      	adds	r5, #1
 8016042:	42ae      	cmp	r6, r5
 8016044:	bf38      	it	cc
 8016046:	2200      	movcc	r2, #0
 8016048:	18a3      	adds	r3, r4, r2
 801604a:	50a7      	str	r7, [r4, r2]
 801604c:	b107      	cbz	r7, 8016050 <rshift+0x68>
 801604e:	3304      	adds	r3, #4
 8016050:	1b1a      	subs	r2, r3, r4
 8016052:	42a3      	cmp	r3, r4
 8016054:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8016058:	bf08      	it	eq
 801605a:	2300      	moveq	r3, #0
 801605c:	6102      	str	r2, [r0, #16]
 801605e:	bf08      	it	eq
 8016060:	6143      	streq	r3, [r0, #20]
 8016062:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016066:	f8dc c000 	ldr.w	ip, [ip]
 801606a:	fa0c fc08 	lsl.w	ip, ip, r8
 801606e:	ea4c 0707 	orr.w	r7, ip, r7
 8016072:	f849 7b04 	str.w	r7, [r9], #4
 8016076:	f85e 7b04 	ldr.w	r7, [lr], #4
 801607a:	40cf      	lsrs	r7, r1
 801607c:	e7da      	b.n	8016034 <rshift+0x4c>
 801607e:	f851 cb04 	ldr.w	ip, [r1], #4
 8016082:	f847 cf04 	str.w	ip, [r7, #4]!
 8016086:	e7c3      	b.n	8016010 <rshift+0x28>
 8016088:	4623      	mov	r3, r4
 801608a:	e7e1      	b.n	8016050 <rshift+0x68>

0801608c <__hexdig_fun>:
 801608c:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8016090:	2b09      	cmp	r3, #9
 8016092:	d802      	bhi.n	801609a <__hexdig_fun+0xe>
 8016094:	3820      	subs	r0, #32
 8016096:	b2c0      	uxtb	r0, r0
 8016098:	4770      	bx	lr
 801609a:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801609e:	2b05      	cmp	r3, #5
 80160a0:	d801      	bhi.n	80160a6 <__hexdig_fun+0x1a>
 80160a2:	3847      	subs	r0, #71	@ 0x47
 80160a4:	e7f7      	b.n	8016096 <__hexdig_fun+0xa>
 80160a6:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80160aa:	2b05      	cmp	r3, #5
 80160ac:	d801      	bhi.n	80160b2 <__hexdig_fun+0x26>
 80160ae:	3827      	subs	r0, #39	@ 0x27
 80160b0:	e7f1      	b.n	8016096 <__hexdig_fun+0xa>
 80160b2:	2000      	movs	r0, #0
 80160b4:	4770      	bx	lr
	...

080160b8 <__gethex>:
 80160b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80160bc:	b085      	sub	sp, #20
 80160be:	468a      	mov	sl, r1
 80160c0:	9302      	str	r3, [sp, #8]
 80160c2:	680b      	ldr	r3, [r1, #0]
 80160c4:	9001      	str	r0, [sp, #4]
 80160c6:	4690      	mov	r8, r2
 80160c8:	1c9c      	adds	r4, r3, #2
 80160ca:	46a1      	mov	r9, r4
 80160cc:	f814 0b01 	ldrb.w	r0, [r4], #1
 80160d0:	2830      	cmp	r0, #48	@ 0x30
 80160d2:	d0fa      	beq.n	80160ca <__gethex+0x12>
 80160d4:	eba9 0303 	sub.w	r3, r9, r3
 80160d8:	f1a3 0b02 	sub.w	fp, r3, #2
 80160dc:	f7ff ffd6 	bl	801608c <__hexdig_fun>
 80160e0:	4605      	mov	r5, r0
 80160e2:	2800      	cmp	r0, #0
 80160e4:	d168      	bne.n	80161b8 <__gethex+0x100>
 80160e6:	49a0      	ldr	r1, [pc, #640]	@ (8016368 <__gethex+0x2b0>)
 80160e8:	2201      	movs	r2, #1
 80160ea:	4648      	mov	r0, r9
 80160ec:	f7ff fe5c 	bl	8015da8 <strncmp>
 80160f0:	4607      	mov	r7, r0
 80160f2:	2800      	cmp	r0, #0
 80160f4:	d167      	bne.n	80161c6 <__gethex+0x10e>
 80160f6:	f899 0001 	ldrb.w	r0, [r9, #1]
 80160fa:	4626      	mov	r6, r4
 80160fc:	f7ff ffc6 	bl	801608c <__hexdig_fun>
 8016100:	2800      	cmp	r0, #0
 8016102:	d062      	beq.n	80161ca <__gethex+0x112>
 8016104:	4623      	mov	r3, r4
 8016106:	7818      	ldrb	r0, [r3, #0]
 8016108:	2830      	cmp	r0, #48	@ 0x30
 801610a:	4699      	mov	r9, r3
 801610c:	f103 0301 	add.w	r3, r3, #1
 8016110:	d0f9      	beq.n	8016106 <__gethex+0x4e>
 8016112:	f7ff ffbb 	bl	801608c <__hexdig_fun>
 8016116:	fab0 f580 	clz	r5, r0
 801611a:	096d      	lsrs	r5, r5, #5
 801611c:	f04f 0b01 	mov.w	fp, #1
 8016120:	464a      	mov	r2, r9
 8016122:	4616      	mov	r6, r2
 8016124:	3201      	adds	r2, #1
 8016126:	7830      	ldrb	r0, [r6, #0]
 8016128:	f7ff ffb0 	bl	801608c <__hexdig_fun>
 801612c:	2800      	cmp	r0, #0
 801612e:	d1f8      	bne.n	8016122 <__gethex+0x6a>
 8016130:	498d      	ldr	r1, [pc, #564]	@ (8016368 <__gethex+0x2b0>)
 8016132:	2201      	movs	r2, #1
 8016134:	4630      	mov	r0, r6
 8016136:	f7ff fe37 	bl	8015da8 <strncmp>
 801613a:	2800      	cmp	r0, #0
 801613c:	d13f      	bne.n	80161be <__gethex+0x106>
 801613e:	b944      	cbnz	r4, 8016152 <__gethex+0x9a>
 8016140:	1c74      	adds	r4, r6, #1
 8016142:	4622      	mov	r2, r4
 8016144:	4616      	mov	r6, r2
 8016146:	3201      	adds	r2, #1
 8016148:	7830      	ldrb	r0, [r6, #0]
 801614a:	f7ff ff9f 	bl	801608c <__hexdig_fun>
 801614e:	2800      	cmp	r0, #0
 8016150:	d1f8      	bne.n	8016144 <__gethex+0x8c>
 8016152:	1ba4      	subs	r4, r4, r6
 8016154:	00a7      	lsls	r7, r4, #2
 8016156:	7833      	ldrb	r3, [r6, #0]
 8016158:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 801615c:	2b50      	cmp	r3, #80	@ 0x50
 801615e:	d13e      	bne.n	80161de <__gethex+0x126>
 8016160:	7873      	ldrb	r3, [r6, #1]
 8016162:	2b2b      	cmp	r3, #43	@ 0x2b
 8016164:	d033      	beq.n	80161ce <__gethex+0x116>
 8016166:	2b2d      	cmp	r3, #45	@ 0x2d
 8016168:	d034      	beq.n	80161d4 <__gethex+0x11c>
 801616a:	1c71      	adds	r1, r6, #1
 801616c:	2400      	movs	r4, #0
 801616e:	7808      	ldrb	r0, [r1, #0]
 8016170:	f7ff ff8c 	bl	801608c <__hexdig_fun>
 8016174:	1e43      	subs	r3, r0, #1
 8016176:	b2db      	uxtb	r3, r3
 8016178:	2b18      	cmp	r3, #24
 801617a:	d830      	bhi.n	80161de <__gethex+0x126>
 801617c:	f1a0 0210 	sub.w	r2, r0, #16
 8016180:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8016184:	f7ff ff82 	bl	801608c <__hexdig_fun>
 8016188:	f100 3cff 	add.w	ip, r0, #4294967295
 801618c:	fa5f fc8c 	uxtb.w	ip, ip
 8016190:	f1bc 0f18 	cmp.w	ip, #24
 8016194:	f04f 030a 	mov.w	r3, #10
 8016198:	d91e      	bls.n	80161d8 <__gethex+0x120>
 801619a:	b104      	cbz	r4, 801619e <__gethex+0xe6>
 801619c:	4252      	negs	r2, r2
 801619e:	4417      	add	r7, r2
 80161a0:	f8ca 1000 	str.w	r1, [sl]
 80161a4:	b1ed      	cbz	r5, 80161e2 <__gethex+0x12a>
 80161a6:	f1bb 0f00 	cmp.w	fp, #0
 80161aa:	bf0c      	ite	eq
 80161ac:	2506      	moveq	r5, #6
 80161ae:	2500      	movne	r5, #0
 80161b0:	4628      	mov	r0, r5
 80161b2:	b005      	add	sp, #20
 80161b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80161b8:	2500      	movs	r5, #0
 80161ba:	462c      	mov	r4, r5
 80161bc:	e7b0      	b.n	8016120 <__gethex+0x68>
 80161be:	2c00      	cmp	r4, #0
 80161c0:	d1c7      	bne.n	8016152 <__gethex+0x9a>
 80161c2:	4627      	mov	r7, r4
 80161c4:	e7c7      	b.n	8016156 <__gethex+0x9e>
 80161c6:	464e      	mov	r6, r9
 80161c8:	462f      	mov	r7, r5
 80161ca:	2501      	movs	r5, #1
 80161cc:	e7c3      	b.n	8016156 <__gethex+0x9e>
 80161ce:	2400      	movs	r4, #0
 80161d0:	1cb1      	adds	r1, r6, #2
 80161d2:	e7cc      	b.n	801616e <__gethex+0xb6>
 80161d4:	2401      	movs	r4, #1
 80161d6:	e7fb      	b.n	80161d0 <__gethex+0x118>
 80161d8:	fb03 0002 	mla	r0, r3, r2, r0
 80161dc:	e7ce      	b.n	801617c <__gethex+0xc4>
 80161de:	4631      	mov	r1, r6
 80161e0:	e7de      	b.n	80161a0 <__gethex+0xe8>
 80161e2:	eba6 0309 	sub.w	r3, r6, r9
 80161e6:	3b01      	subs	r3, #1
 80161e8:	4629      	mov	r1, r5
 80161ea:	2b07      	cmp	r3, #7
 80161ec:	dc0a      	bgt.n	8016204 <__gethex+0x14c>
 80161ee:	9801      	ldr	r0, [sp, #4]
 80161f0:	f000 fafc 	bl	80167ec <_Balloc>
 80161f4:	4604      	mov	r4, r0
 80161f6:	b940      	cbnz	r0, 801620a <__gethex+0x152>
 80161f8:	4b5c      	ldr	r3, [pc, #368]	@ (801636c <__gethex+0x2b4>)
 80161fa:	4602      	mov	r2, r0
 80161fc:	21e4      	movs	r1, #228	@ 0xe4
 80161fe:	485c      	ldr	r0, [pc, #368]	@ (8016370 <__gethex+0x2b8>)
 8016200:	f7ff fe8a 	bl	8015f18 <__assert_func>
 8016204:	3101      	adds	r1, #1
 8016206:	105b      	asrs	r3, r3, #1
 8016208:	e7ef      	b.n	80161ea <__gethex+0x132>
 801620a:	f100 0a14 	add.w	sl, r0, #20
 801620e:	2300      	movs	r3, #0
 8016210:	4655      	mov	r5, sl
 8016212:	469b      	mov	fp, r3
 8016214:	45b1      	cmp	r9, r6
 8016216:	d337      	bcc.n	8016288 <__gethex+0x1d0>
 8016218:	f845 bb04 	str.w	fp, [r5], #4
 801621c:	eba5 050a 	sub.w	r5, r5, sl
 8016220:	10ad      	asrs	r5, r5, #2
 8016222:	6125      	str	r5, [r4, #16]
 8016224:	4658      	mov	r0, fp
 8016226:	f000 fbd3 	bl	80169d0 <__hi0bits>
 801622a:	016d      	lsls	r5, r5, #5
 801622c:	f8d8 6000 	ldr.w	r6, [r8]
 8016230:	1a2d      	subs	r5, r5, r0
 8016232:	42b5      	cmp	r5, r6
 8016234:	dd54      	ble.n	80162e0 <__gethex+0x228>
 8016236:	1bad      	subs	r5, r5, r6
 8016238:	4629      	mov	r1, r5
 801623a:	4620      	mov	r0, r4
 801623c:	f000 ff5f 	bl	80170fe <__any_on>
 8016240:	4681      	mov	r9, r0
 8016242:	b178      	cbz	r0, 8016264 <__gethex+0x1ac>
 8016244:	1e6b      	subs	r3, r5, #1
 8016246:	1159      	asrs	r1, r3, #5
 8016248:	f003 021f 	and.w	r2, r3, #31
 801624c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8016250:	f04f 0901 	mov.w	r9, #1
 8016254:	fa09 f202 	lsl.w	r2, r9, r2
 8016258:	420a      	tst	r2, r1
 801625a:	d003      	beq.n	8016264 <__gethex+0x1ac>
 801625c:	454b      	cmp	r3, r9
 801625e:	dc36      	bgt.n	80162ce <__gethex+0x216>
 8016260:	f04f 0902 	mov.w	r9, #2
 8016264:	4629      	mov	r1, r5
 8016266:	4620      	mov	r0, r4
 8016268:	f7ff febe 	bl	8015fe8 <rshift>
 801626c:	442f      	add	r7, r5
 801626e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016272:	42bb      	cmp	r3, r7
 8016274:	da42      	bge.n	80162fc <__gethex+0x244>
 8016276:	9801      	ldr	r0, [sp, #4]
 8016278:	4621      	mov	r1, r4
 801627a:	f000 faf7 	bl	801686c <_Bfree>
 801627e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016280:	2300      	movs	r3, #0
 8016282:	6013      	str	r3, [r2, #0]
 8016284:	25a3      	movs	r5, #163	@ 0xa3
 8016286:	e793      	b.n	80161b0 <__gethex+0xf8>
 8016288:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 801628c:	2a2e      	cmp	r2, #46	@ 0x2e
 801628e:	d012      	beq.n	80162b6 <__gethex+0x1fe>
 8016290:	2b20      	cmp	r3, #32
 8016292:	d104      	bne.n	801629e <__gethex+0x1e6>
 8016294:	f845 bb04 	str.w	fp, [r5], #4
 8016298:	f04f 0b00 	mov.w	fp, #0
 801629c:	465b      	mov	r3, fp
 801629e:	7830      	ldrb	r0, [r6, #0]
 80162a0:	9303      	str	r3, [sp, #12]
 80162a2:	f7ff fef3 	bl	801608c <__hexdig_fun>
 80162a6:	9b03      	ldr	r3, [sp, #12]
 80162a8:	f000 000f 	and.w	r0, r0, #15
 80162ac:	4098      	lsls	r0, r3
 80162ae:	ea4b 0b00 	orr.w	fp, fp, r0
 80162b2:	3304      	adds	r3, #4
 80162b4:	e7ae      	b.n	8016214 <__gethex+0x15c>
 80162b6:	45b1      	cmp	r9, r6
 80162b8:	d8ea      	bhi.n	8016290 <__gethex+0x1d8>
 80162ba:	492b      	ldr	r1, [pc, #172]	@ (8016368 <__gethex+0x2b0>)
 80162bc:	9303      	str	r3, [sp, #12]
 80162be:	2201      	movs	r2, #1
 80162c0:	4630      	mov	r0, r6
 80162c2:	f7ff fd71 	bl	8015da8 <strncmp>
 80162c6:	9b03      	ldr	r3, [sp, #12]
 80162c8:	2800      	cmp	r0, #0
 80162ca:	d1e1      	bne.n	8016290 <__gethex+0x1d8>
 80162cc:	e7a2      	b.n	8016214 <__gethex+0x15c>
 80162ce:	1ea9      	subs	r1, r5, #2
 80162d0:	4620      	mov	r0, r4
 80162d2:	f000 ff14 	bl	80170fe <__any_on>
 80162d6:	2800      	cmp	r0, #0
 80162d8:	d0c2      	beq.n	8016260 <__gethex+0x1a8>
 80162da:	f04f 0903 	mov.w	r9, #3
 80162de:	e7c1      	b.n	8016264 <__gethex+0x1ac>
 80162e0:	da09      	bge.n	80162f6 <__gethex+0x23e>
 80162e2:	1b75      	subs	r5, r6, r5
 80162e4:	4621      	mov	r1, r4
 80162e6:	9801      	ldr	r0, [sp, #4]
 80162e8:	462a      	mov	r2, r5
 80162ea:	f000 fccf 	bl	8016c8c <__lshift>
 80162ee:	1b7f      	subs	r7, r7, r5
 80162f0:	4604      	mov	r4, r0
 80162f2:	f100 0a14 	add.w	sl, r0, #20
 80162f6:	f04f 0900 	mov.w	r9, #0
 80162fa:	e7b8      	b.n	801626e <__gethex+0x1b6>
 80162fc:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8016300:	42bd      	cmp	r5, r7
 8016302:	dd6f      	ble.n	80163e4 <__gethex+0x32c>
 8016304:	1bed      	subs	r5, r5, r7
 8016306:	42ae      	cmp	r6, r5
 8016308:	dc34      	bgt.n	8016374 <__gethex+0x2bc>
 801630a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801630e:	2b02      	cmp	r3, #2
 8016310:	d022      	beq.n	8016358 <__gethex+0x2a0>
 8016312:	2b03      	cmp	r3, #3
 8016314:	d024      	beq.n	8016360 <__gethex+0x2a8>
 8016316:	2b01      	cmp	r3, #1
 8016318:	d115      	bne.n	8016346 <__gethex+0x28e>
 801631a:	42ae      	cmp	r6, r5
 801631c:	d113      	bne.n	8016346 <__gethex+0x28e>
 801631e:	2e01      	cmp	r6, #1
 8016320:	d10b      	bne.n	801633a <__gethex+0x282>
 8016322:	9a02      	ldr	r2, [sp, #8]
 8016324:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8016328:	6013      	str	r3, [r2, #0]
 801632a:	2301      	movs	r3, #1
 801632c:	6123      	str	r3, [r4, #16]
 801632e:	f8ca 3000 	str.w	r3, [sl]
 8016332:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016334:	2562      	movs	r5, #98	@ 0x62
 8016336:	601c      	str	r4, [r3, #0]
 8016338:	e73a      	b.n	80161b0 <__gethex+0xf8>
 801633a:	1e71      	subs	r1, r6, #1
 801633c:	4620      	mov	r0, r4
 801633e:	f000 fede 	bl	80170fe <__any_on>
 8016342:	2800      	cmp	r0, #0
 8016344:	d1ed      	bne.n	8016322 <__gethex+0x26a>
 8016346:	9801      	ldr	r0, [sp, #4]
 8016348:	4621      	mov	r1, r4
 801634a:	f000 fa8f 	bl	801686c <_Bfree>
 801634e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016350:	2300      	movs	r3, #0
 8016352:	6013      	str	r3, [r2, #0]
 8016354:	2550      	movs	r5, #80	@ 0x50
 8016356:	e72b      	b.n	80161b0 <__gethex+0xf8>
 8016358:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801635a:	2b00      	cmp	r3, #0
 801635c:	d1f3      	bne.n	8016346 <__gethex+0x28e>
 801635e:	e7e0      	b.n	8016322 <__gethex+0x26a>
 8016360:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016362:	2b00      	cmp	r3, #0
 8016364:	d1dd      	bne.n	8016322 <__gethex+0x26a>
 8016366:	e7ee      	b.n	8016346 <__gethex+0x28e>
 8016368:	08020d39 	.word	0x08020d39
 801636c:	08020d8b 	.word	0x08020d8b
 8016370:	08020d9c 	.word	0x08020d9c
 8016374:	1e6f      	subs	r7, r5, #1
 8016376:	f1b9 0f00 	cmp.w	r9, #0
 801637a:	d130      	bne.n	80163de <__gethex+0x326>
 801637c:	b127      	cbz	r7, 8016388 <__gethex+0x2d0>
 801637e:	4639      	mov	r1, r7
 8016380:	4620      	mov	r0, r4
 8016382:	f000 febc 	bl	80170fe <__any_on>
 8016386:	4681      	mov	r9, r0
 8016388:	117a      	asrs	r2, r7, #5
 801638a:	2301      	movs	r3, #1
 801638c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8016390:	f007 071f 	and.w	r7, r7, #31
 8016394:	40bb      	lsls	r3, r7
 8016396:	4213      	tst	r3, r2
 8016398:	4629      	mov	r1, r5
 801639a:	4620      	mov	r0, r4
 801639c:	bf18      	it	ne
 801639e:	f049 0902 	orrne.w	r9, r9, #2
 80163a2:	f7ff fe21 	bl	8015fe8 <rshift>
 80163a6:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80163aa:	1b76      	subs	r6, r6, r5
 80163ac:	2502      	movs	r5, #2
 80163ae:	f1b9 0f00 	cmp.w	r9, #0
 80163b2:	d047      	beq.n	8016444 <__gethex+0x38c>
 80163b4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80163b8:	2b02      	cmp	r3, #2
 80163ba:	d015      	beq.n	80163e8 <__gethex+0x330>
 80163bc:	2b03      	cmp	r3, #3
 80163be:	d017      	beq.n	80163f0 <__gethex+0x338>
 80163c0:	2b01      	cmp	r3, #1
 80163c2:	d109      	bne.n	80163d8 <__gethex+0x320>
 80163c4:	f019 0f02 	tst.w	r9, #2
 80163c8:	d006      	beq.n	80163d8 <__gethex+0x320>
 80163ca:	f8da 3000 	ldr.w	r3, [sl]
 80163ce:	ea49 0903 	orr.w	r9, r9, r3
 80163d2:	f019 0f01 	tst.w	r9, #1
 80163d6:	d10e      	bne.n	80163f6 <__gethex+0x33e>
 80163d8:	f045 0510 	orr.w	r5, r5, #16
 80163dc:	e032      	b.n	8016444 <__gethex+0x38c>
 80163de:	f04f 0901 	mov.w	r9, #1
 80163e2:	e7d1      	b.n	8016388 <__gethex+0x2d0>
 80163e4:	2501      	movs	r5, #1
 80163e6:	e7e2      	b.n	80163ae <__gethex+0x2f6>
 80163e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80163ea:	f1c3 0301 	rsb	r3, r3, #1
 80163ee:	930f      	str	r3, [sp, #60]	@ 0x3c
 80163f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80163f2:	2b00      	cmp	r3, #0
 80163f4:	d0f0      	beq.n	80163d8 <__gethex+0x320>
 80163f6:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80163fa:	f104 0314 	add.w	r3, r4, #20
 80163fe:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8016402:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8016406:	f04f 0c00 	mov.w	ip, #0
 801640a:	4618      	mov	r0, r3
 801640c:	f853 2b04 	ldr.w	r2, [r3], #4
 8016410:	f1b2 3fff 	cmp.w	r2, #4294967295
 8016414:	d01b      	beq.n	801644e <__gethex+0x396>
 8016416:	3201      	adds	r2, #1
 8016418:	6002      	str	r2, [r0, #0]
 801641a:	2d02      	cmp	r5, #2
 801641c:	f104 0314 	add.w	r3, r4, #20
 8016420:	d13c      	bne.n	801649c <__gethex+0x3e4>
 8016422:	f8d8 2000 	ldr.w	r2, [r8]
 8016426:	3a01      	subs	r2, #1
 8016428:	42b2      	cmp	r2, r6
 801642a:	d109      	bne.n	8016440 <__gethex+0x388>
 801642c:	1171      	asrs	r1, r6, #5
 801642e:	2201      	movs	r2, #1
 8016430:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8016434:	f006 061f 	and.w	r6, r6, #31
 8016438:	fa02 f606 	lsl.w	r6, r2, r6
 801643c:	421e      	tst	r6, r3
 801643e:	d13a      	bne.n	80164b6 <__gethex+0x3fe>
 8016440:	f045 0520 	orr.w	r5, r5, #32
 8016444:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016446:	601c      	str	r4, [r3, #0]
 8016448:	9b02      	ldr	r3, [sp, #8]
 801644a:	601f      	str	r7, [r3, #0]
 801644c:	e6b0      	b.n	80161b0 <__gethex+0xf8>
 801644e:	4299      	cmp	r1, r3
 8016450:	f843 cc04 	str.w	ip, [r3, #-4]
 8016454:	d8d9      	bhi.n	801640a <__gethex+0x352>
 8016456:	68a3      	ldr	r3, [r4, #8]
 8016458:	459b      	cmp	fp, r3
 801645a:	db17      	blt.n	801648c <__gethex+0x3d4>
 801645c:	6861      	ldr	r1, [r4, #4]
 801645e:	9801      	ldr	r0, [sp, #4]
 8016460:	3101      	adds	r1, #1
 8016462:	f000 f9c3 	bl	80167ec <_Balloc>
 8016466:	4681      	mov	r9, r0
 8016468:	b918      	cbnz	r0, 8016472 <__gethex+0x3ba>
 801646a:	4b1a      	ldr	r3, [pc, #104]	@ (80164d4 <__gethex+0x41c>)
 801646c:	4602      	mov	r2, r0
 801646e:	2184      	movs	r1, #132	@ 0x84
 8016470:	e6c5      	b.n	80161fe <__gethex+0x146>
 8016472:	6922      	ldr	r2, [r4, #16]
 8016474:	3202      	adds	r2, #2
 8016476:	f104 010c 	add.w	r1, r4, #12
 801647a:	0092      	lsls	r2, r2, #2
 801647c:	300c      	adds	r0, #12
 801647e:	f7ff fd34 	bl	8015eea <memcpy>
 8016482:	4621      	mov	r1, r4
 8016484:	9801      	ldr	r0, [sp, #4]
 8016486:	f000 f9f1 	bl	801686c <_Bfree>
 801648a:	464c      	mov	r4, r9
 801648c:	6923      	ldr	r3, [r4, #16]
 801648e:	1c5a      	adds	r2, r3, #1
 8016490:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8016494:	6122      	str	r2, [r4, #16]
 8016496:	2201      	movs	r2, #1
 8016498:	615a      	str	r2, [r3, #20]
 801649a:	e7be      	b.n	801641a <__gethex+0x362>
 801649c:	6922      	ldr	r2, [r4, #16]
 801649e:	455a      	cmp	r2, fp
 80164a0:	dd0b      	ble.n	80164ba <__gethex+0x402>
 80164a2:	2101      	movs	r1, #1
 80164a4:	4620      	mov	r0, r4
 80164a6:	f7ff fd9f 	bl	8015fe8 <rshift>
 80164aa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80164ae:	3701      	adds	r7, #1
 80164b0:	42bb      	cmp	r3, r7
 80164b2:	f6ff aee0 	blt.w	8016276 <__gethex+0x1be>
 80164b6:	2501      	movs	r5, #1
 80164b8:	e7c2      	b.n	8016440 <__gethex+0x388>
 80164ba:	f016 061f 	ands.w	r6, r6, #31
 80164be:	d0fa      	beq.n	80164b6 <__gethex+0x3fe>
 80164c0:	4453      	add	r3, sl
 80164c2:	f1c6 0620 	rsb	r6, r6, #32
 80164c6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80164ca:	f000 fa81 	bl	80169d0 <__hi0bits>
 80164ce:	42b0      	cmp	r0, r6
 80164d0:	dbe7      	blt.n	80164a2 <__gethex+0x3ea>
 80164d2:	e7f0      	b.n	80164b6 <__gethex+0x3fe>
 80164d4:	08020d8b 	.word	0x08020d8b

080164d8 <L_shift>:
 80164d8:	f1c2 0208 	rsb	r2, r2, #8
 80164dc:	0092      	lsls	r2, r2, #2
 80164de:	b570      	push	{r4, r5, r6, lr}
 80164e0:	f1c2 0620 	rsb	r6, r2, #32
 80164e4:	6843      	ldr	r3, [r0, #4]
 80164e6:	6804      	ldr	r4, [r0, #0]
 80164e8:	fa03 f506 	lsl.w	r5, r3, r6
 80164ec:	432c      	orrs	r4, r5
 80164ee:	40d3      	lsrs	r3, r2
 80164f0:	6004      	str	r4, [r0, #0]
 80164f2:	f840 3f04 	str.w	r3, [r0, #4]!
 80164f6:	4288      	cmp	r0, r1
 80164f8:	d3f4      	bcc.n	80164e4 <L_shift+0xc>
 80164fa:	bd70      	pop	{r4, r5, r6, pc}

080164fc <__match>:
 80164fc:	b530      	push	{r4, r5, lr}
 80164fe:	6803      	ldr	r3, [r0, #0]
 8016500:	3301      	adds	r3, #1
 8016502:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016506:	b914      	cbnz	r4, 801650e <__match+0x12>
 8016508:	6003      	str	r3, [r0, #0]
 801650a:	2001      	movs	r0, #1
 801650c:	bd30      	pop	{r4, r5, pc}
 801650e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016512:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8016516:	2d19      	cmp	r5, #25
 8016518:	bf98      	it	ls
 801651a:	3220      	addls	r2, #32
 801651c:	42a2      	cmp	r2, r4
 801651e:	d0f0      	beq.n	8016502 <__match+0x6>
 8016520:	2000      	movs	r0, #0
 8016522:	e7f3      	b.n	801650c <__match+0x10>

08016524 <__hexnan>:
 8016524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016528:	680b      	ldr	r3, [r1, #0]
 801652a:	6801      	ldr	r1, [r0, #0]
 801652c:	115e      	asrs	r6, r3, #5
 801652e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8016532:	f013 031f 	ands.w	r3, r3, #31
 8016536:	b087      	sub	sp, #28
 8016538:	bf18      	it	ne
 801653a:	3604      	addne	r6, #4
 801653c:	2500      	movs	r5, #0
 801653e:	1f37      	subs	r7, r6, #4
 8016540:	4682      	mov	sl, r0
 8016542:	4690      	mov	r8, r2
 8016544:	9301      	str	r3, [sp, #4]
 8016546:	f846 5c04 	str.w	r5, [r6, #-4]
 801654a:	46b9      	mov	r9, r7
 801654c:	463c      	mov	r4, r7
 801654e:	9502      	str	r5, [sp, #8]
 8016550:	46ab      	mov	fp, r5
 8016552:	784a      	ldrb	r2, [r1, #1]
 8016554:	1c4b      	adds	r3, r1, #1
 8016556:	9303      	str	r3, [sp, #12]
 8016558:	b342      	cbz	r2, 80165ac <__hexnan+0x88>
 801655a:	4610      	mov	r0, r2
 801655c:	9105      	str	r1, [sp, #20]
 801655e:	9204      	str	r2, [sp, #16]
 8016560:	f7ff fd94 	bl	801608c <__hexdig_fun>
 8016564:	2800      	cmp	r0, #0
 8016566:	d151      	bne.n	801660c <__hexnan+0xe8>
 8016568:	9a04      	ldr	r2, [sp, #16]
 801656a:	9905      	ldr	r1, [sp, #20]
 801656c:	2a20      	cmp	r2, #32
 801656e:	d818      	bhi.n	80165a2 <__hexnan+0x7e>
 8016570:	9b02      	ldr	r3, [sp, #8]
 8016572:	459b      	cmp	fp, r3
 8016574:	dd13      	ble.n	801659e <__hexnan+0x7a>
 8016576:	454c      	cmp	r4, r9
 8016578:	d206      	bcs.n	8016588 <__hexnan+0x64>
 801657a:	2d07      	cmp	r5, #7
 801657c:	dc04      	bgt.n	8016588 <__hexnan+0x64>
 801657e:	462a      	mov	r2, r5
 8016580:	4649      	mov	r1, r9
 8016582:	4620      	mov	r0, r4
 8016584:	f7ff ffa8 	bl	80164d8 <L_shift>
 8016588:	4544      	cmp	r4, r8
 801658a:	d952      	bls.n	8016632 <__hexnan+0x10e>
 801658c:	2300      	movs	r3, #0
 801658e:	f1a4 0904 	sub.w	r9, r4, #4
 8016592:	f844 3c04 	str.w	r3, [r4, #-4]
 8016596:	f8cd b008 	str.w	fp, [sp, #8]
 801659a:	464c      	mov	r4, r9
 801659c:	461d      	mov	r5, r3
 801659e:	9903      	ldr	r1, [sp, #12]
 80165a0:	e7d7      	b.n	8016552 <__hexnan+0x2e>
 80165a2:	2a29      	cmp	r2, #41	@ 0x29
 80165a4:	d157      	bne.n	8016656 <__hexnan+0x132>
 80165a6:	3102      	adds	r1, #2
 80165a8:	f8ca 1000 	str.w	r1, [sl]
 80165ac:	f1bb 0f00 	cmp.w	fp, #0
 80165b0:	d051      	beq.n	8016656 <__hexnan+0x132>
 80165b2:	454c      	cmp	r4, r9
 80165b4:	d206      	bcs.n	80165c4 <__hexnan+0xa0>
 80165b6:	2d07      	cmp	r5, #7
 80165b8:	dc04      	bgt.n	80165c4 <__hexnan+0xa0>
 80165ba:	462a      	mov	r2, r5
 80165bc:	4649      	mov	r1, r9
 80165be:	4620      	mov	r0, r4
 80165c0:	f7ff ff8a 	bl	80164d8 <L_shift>
 80165c4:	4544      	cmp	r4, r8
 80165c6:	d936      	bls.n	8016636 <__hexnan+0x112>
 80165c8:	f1a8 0204 	sub.w	r2, r8, #4
 80165cc:	4623      	mov	r3, r4
 80165ce:	f853 1b04 	ldr.w	r1, [r3], #4
 80165d2:	f842 1f04 	str.w	r1, [r2, #4]!
 80165d6:	429f      	cmp	r7, r3
 80165d8:	d2f9      	bcs.n	80165ce <__hexnan+0xaa>
 80165da:	1b3b      	subs	r3, r7, r4
 80165dc:	f023 0303 	bic.w	r3, r3, #3
 80165e0:	3304      	adds	r3, #4
 80165e2:	3401      	adds	r4, #1
 80165e4:	3e03      	subs	r6, #3
 80165e6:	42b4      	cmp	r4, r6
 80165e8:	bf88      	it	hi
 80165ea:	2304      	movhi	r3, #4
 80165ec:	4443      	add	r3, r8
 80165ee:	2200      	movs	r2, #0
 80165f0:	f843 2b04 	str.w	r2, [r3], #4
 80165f4:	429f      	cmp	r7, r3
 80165f6:	d2fb      	bcs.n	80165f0 <__hexnan+0xcc>
 80165f8:	683b      	ldr	r3, [r7, #0]
 80165fa:	b91b      	cbnz	r3, 8016604 <__hexnan+0xe0>
 80165fc:	4547      	cmp	r7, r8
 80165fe:	d128      	bne.n	8016652 <__hexnan+0x12e>
 8016600:	2301      	movs	r3, #1
 8016602:	603b      	str	r3, [r7, #0]
 8016604:	2005      	movs	r0, #5
 8016606:	b007      	add	sp, #28
 8016608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801660c:	3501      	adds	r5, #1
 801660e:	2d08      	cmp	r5, #8
 8016610:	f10b 0b01 	add.w	fp, fp, #1
 8016614:	dd06      	ble.n	8016624 <__hexnan+0x100>
 8016616:	4544      	cmp	r4, r8
 8016618:	d9c1      	bls.n	801659e <__hexnan+0x7a>
 801661a:	2300      	movs	r3, #0
 801661c:	f844 3c04 	str.w	r3, [r4, #-4]
 8016620:	2501      	movs	r5, #1
 8016622:	3c04      	subs	r4, #4
 8016624:	6822      	ldr	r2, [r4, #0]
 8016626:	f000 000f 	and.w	r0, r0, #15
 801662a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801662e:	6020      	str	r0, [r4, #0]
 8016630:	e7b5      	b.n	801659e <__hexnan+0x7a>
 8016632:	2508      	movs	r5, #8
 8016634:	e7b3      	b.n	801659e <__hexnan+0x7a>
 8016636:	9b01      	ldr	r3, [sp, #4]
 8016638:	2b00      	cmp	r3, #0
 801663a:	d0dd      	beq.n	80165f8 <__hexnan+0xd4>
 801663c:	f1c3 0320 	rsb	r3, r3, #32
 8016640:	f04f 32ff 	mov.w	r2, #4294967295
 8016644:	40da      	lsrs	r2, r3
 8016646:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801664a:	4013      	ands	r3, r2
 801664c:	f846 3c04 	str.w	r3, [r6, #-4]
 8016650:	e7d2      	b.n	80165f8 <__hexnan+0xd4>
 8016652:	3f04      	subs	r7, #4
 8016654:	e7d0      	b.n	80165f8 <__hexnan+0xd4>
 8016656:	2004      	movs	r0, #4
 8016658:	e7d5      	b.n	8016606 <__hexnan+0xe2>
	...

0801665c <malloc>:
 801665c:	4b02      	ldr	r3, [pc, #8]	@ (8016668 <malloc+0xc>)
 801665e:	4601      	mov	r1, r0
 8016660:	6818      	ldr	r0, [r3, #0]
 8016662:	f000 b825 	b.w	80166b0 <_malloc_r>
 8016666:	bf00      	nop
 8016668:	200005e4 	.word	0x200005e4

0801666c <sbrk_aligned>:
 801666c:	b570      	push	{r4, r5, r6, lr}
 801666e:	4e0f      	ldr	r6, [pc, #60]	@ (80166ac <sbrk_aligned+0x40>)
 8016670:	460c      	mov	r4, r1
 8016672:	6831      	ldr	r1, [r6, #0]
 8016674:	4605      	mov	r5, r0
 8016676:	b911      	cbnz	r1, 801667e <sbrk_aligned+0x12>
 8016678:	f001 fae6 	bl	8017c48 <_sbrk_r>
 801667c:	6030      	str	r0, [r6, #0]
 801667e:	4621      	mov	r1, r4
 8016680:	4628      	mov	r0, r5
 8016682:	f001 fae1 	bl	8017c48 <_sbrk_r>
 8016686:	1c43      	adds	r3, r0, #1
 8016688:	d103      	bne.n	8016692 <sbrk_aligned+0x26>
 801668a:	f04f 34ff 	mov.w	r4, #4294967295
 801668e:	4620      	mov	r0, r4
 8016690:	bd70      	pop	{r4, r5, r6, pc}
 8016692:	1cc4      	adds	r4, r0, #3
 8016694:	f024 0403 	bic.w	r4, r4, #3
 8016698:	42a0      	cmp	r0, r4
 801669a:	d0f8      	beq.n	801668e <sbrk_aligned+0x22>
 801669c:	1a21      	subs	r1, r4, r0
 801669e:	4628      	mov	r0, r5
 80166a0:	f001 fad2 	bl	8017c48 <_sbrk_r>
 80166a4:	3001      	adds	r0, #1
 80166a6:	d1f2      	bne.n	801668e <sbrk_aligned+0x22>
 80166a8:	e7ef      	b.n	801668a <sbrk_aligned+0x1e>
 80166aa:	bf00      	nop
 80166ac:	200094e4 	.word	0x200094e4

080166b0 <_malloc_r>:
 80166b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80166b4:	1ccd      	adds	r5, r1, #3
 80166b6:	f025 0503 	bic.w	r5, r5, #3
 80166ba:	3508      	adds	r5, #8
 80166bc:	2d0c      	cmp	r5, #12
 80166be:	bf38      	it	cc
 80166c0:	250c      	movcc	r5, #12
 80166c2:	2d00      	cmp	r5, #0
 80166c4:	4606      	mov	r6, r0
 80166c6:	db01      	blt.n	80166cc <_malloc_r+0x1c>
 80166c8:	42a9      	cmp	r1, r5
 80166ca:	d904      	bls.n	80166d6 <_malloc_r+0x26>
 80166cc:	230c      	movs	r3, #12
 80166ce:	6033      	str	r3, [r6, #0]
 80166d0:	2000      	movs	r0, #0
 80166d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80166d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80167ac <_malloc_r+0xfc>
 80166da:	f000 f87b 	bl	80167d4 <__malloc_lock>
 80166de:	f8d8 3000 	ldr.w	r3, [r8]
 80166e2:	461c      	mov	r4, r3
 80166e4:	bb44      	cbnz	r4, 8016738 <_malloc_r+0x88>
 80166e6:	4629      	mov	r1, r5
 80166e8:	4630      	mov	r0, r6
 80166ea:	f7ff ffbf 	bl	801666c <sbrk_aligned>
 80166ee:	1c43      	adds	r3, r0, #1
 80166f0:	4604      	mov	r4, r0
 80166f2:	d158      	bne.n	80167a6 <_malloc_r+0xf6>
 80166f4:	f8d8 4000 	ldr.w	r4, [r8]
 80166f8:	4627      	mov	r7, r4
 80166fa:	2f00      	cmp	r7, #0
 80166fc:	d143      	bne.n	8016786 <_malloc_r+0xd6>
 80166fe:	2c00      	cmp	r4, #0
 8016700:	d04b      	beq.n	801679a <_malloc_r+0xea>
 8016702:	6823      	ldr	r3, [r4, #0]
 8016704:	4639      	mov	r1, r7
 8016706:	4630      	mov	r0, r6
 8016708:	eb04 0903 	add.w	r9, r4, r3
 801670c:	f001 fa9c 	bl	8017c48 <_sbrk_r>
 8016710:	4581      	cmp	r9, r0
 8016712:	d142      	bne.n	801679a <_malloc_r+0xea>
 8016714:	6821      	ldr	r1, [r4, #0]
 8016716:	1a6d      	subs	r5, r5, r1
 8016718:	4629      	mov	r1, r5
 801671a:	4630      	mov	r0, r6
 801671c:	f7ff ffa6 	bl	801666c <sbrk_aligned>
 8016720:	3001      	adds	r0, #1
 8016722:	d03a      	beq.n	801679a <_malloc_r+0xea>
 8016724:	6823      	ldr	r3, [r4, #0]
 8016726:	442b      	add	r3, r5
 8016728:	6023      	str	r3, [r4, #0]
 801672a:	f8d8 3000 	ldr.w	r3, [r8]
 801672e:	685a      	ldr	r2, [r3, #4]
 8016730:	bb62      	cbnz	r2, 801678c <_malloc_r+0xdc>
 8016732:	f8c8 7000 	str.w	r7, [r8]
 8016736:	e00f      	b.n	8016758 <_malloc_r+0xa8>
 8016738:	6822      	ldr	r2, [r4, #0]
 801673a:	1b52      	subs	r2, r2, r5
 801673c:	d420      	bmi.n	8016780 <_malloc_r+0xd0>
 801673e:	2a0b      	cmp	r2, #11
 8016740:	d917      	bls.n	8016772 <_malloc_r+0xc2>
 8016742:	1961      	adds	r1, r4, r5
 8016744:	42a3      	cmp	r3, r4
 8016746:	6025      	str	r5, [r4, #0]
 8016748:	bf18      	it	ne
 801674a:	6059      	strne	r1, [r3, #4]
 801674c:	6863      	ldr	r3, [r4, #4]
 801674e:	bf08      	it	eq
 8016750:	f8c8 1000 	streq.w	r1, [r8]
 8016754:	5162      	str	r2, [r4, r5]
 8016756:	604b      	str	r3, [r1, #4]
 8016758:	4630      	mov	r0, r6
 801675a:	f000 f841 	bl	80167e0 <__malloc_unlock>
 801675e:	f104 000b 	add.w	r0, r4, #11
 8016762:	1d23      	adds	r3, r4, #4
 8016764:	f020 0007 	bic.w	r0, r0, #7
 8016768:	1ac2      	subs	r2, r0, r3
 801676a:	bf1c      	itt	ne
 801676c:	1a1b      	subne	r3, r3, r0
 801676e:	50a3      	strne	r3, [r4, r2]
 8016770:	e7af      	b.n	80166d2 <_malloc_r+0x22>
 8016772:	6862      	ldr	r2, [r4, #4]
 8016774:	42a3      	cmp	r3, r4
 8016776:	bf0c      	ite	eq
 8016778:	f8c8 2000 	streq.w	r2, [r8]
 801677c:	605a      	strne	r2, [r3, #4]
 801677e:	e7eb      	b.n	8016758 <_malloc_r+0xa8>
 8016780:	4623      	mov	r3, r4
 8016782:	6864      	ldr	r4, [r4, #4]
 8016784:	e7ae      	b.n	80166e4 <_malloc_r+0x34>
 8016786:	463c      	mov	r4, r7
 8016788:	687f      	ldr	r7, [r7, #4]
 801678a:	e7b6      	b.n	80166fa <_malloc_r+0x4a>
 801678c:	461a      	mov	r2, r3
 801678e:	685b      	ldr	r3, [r3, #4]
 8016790:	42a3      	cmp	r3, r4
 8016792:	d1fb      	bne.n	801678c <_malloc_r+0xdc>
 8016794:	2300      	movs	r3, #0
 8016796:	6053      	str	r3, [r2, #4]
 8016798:	e7de      	b.n	8016758 <_malloc_r+0xa8>
 801679a:	230c      	movs	r3, #12
 801679c:	6033      	str	r3, [r6, #0]
 801679e:	4630      	mov	r0, r6
 80167a0:	f000 f81e 	bl	80167e0 <__malloc_unlock>
 80167a4:	e794      	b.n	80166d0 <_malloc_r+0x20>
 80167a6:	6005      	str	r5, [r0, #0]
 80167a8:	e7d6      	b.n	8016758 <_malloc_r+0xa8>
 80167aa:	bf00      	nop
 80167ac:	200094e8 	.word	0x200094e8

080167b0 <__ascii_mbtowc>:
 80167b0:	b082      	sub	sp, #8
 80167b2:	b901      	cbnz	r1, 80167b6 <__ascii_mbtowc+0x6>
 80167b4:	a901      	add	r1, sp, #4
 80167b6:	b142      	cbz	r2, 80167ca <__ascii_mbtowc+0x1a>
 80167b8:	b14b      	cbz	r3, 80167ce <__ascii_mbtowc+0x1e>
 80167ba:	7813      	ldrb	r3, [r2, #0]
 80167bc:	600b      	str	r3, [r1, #0]
 80167be:	7812      	ldrb	r2, [r2, #0]
 80167c0:	1e10      	subs	r0, r2, #0
 80167c2:	bf18      	it	ne
 80167c4:	2001      	movne	r0, #1
 80167c6:	b002      	add	sp, #8
 80167c8:	4770      	bx	lr
 80167ca:	4610      	mov	r0, r2
 80167cc:	e7fb      	b.n	80167c6 <__ascii_mbtowc+0x16>
 80167ce:	f06f 0001 	mvn.w	r0, #1
 80167d2:	e7f8      	b.n	80167c6 <__ascii_mbtowc+0x16>

080167d4 <__malloc_lock>:
 80167d4:	4801      	ldr	r0, [pc, #4]	@ (80167dc <__malloc_lock+0x8>)
 80167d6:	f7ff bb7e 	b.w	8015ed6 <__retarget_lock_acquire_recursive>
 80167da:	bf00      	nop
 80167dc:	200094e0 	.word	0x200094e0

080167e0 <__malloc_unlock>:
 80167e0:	4801      	ldr	r0, [pc, #4]	@ (80167e8 <__malloc_unlock+0x8>)
 80167e2:	f7ff bb79 	b.w	8015ed8 <__retarget_lock_release_recursive>
 80167e6:	bf00      	nop
 80167e8:	200094e0 	.word	0x200094e0

080167ec <_Balloc>:
 80167ec:	b570      	push	{r4, r5, r6, lr}
 80167ee:	69c6      	ldr	r6, [r0, #28]
 80167f0:	4604      	mov	r4, r0
 80167f2:	460d      	mov	r5, r1
 80167f4:	b976      	cbnz	r6, 8016814 <_Balloc+0x28>
 80167f6:	2010      	movs	r0, #16
 80167f8:	f7ff ff30 	bl	801665c <malloc>
 80167fc:	4602      	mov	r2, r0
 80167fe:	61e0      	str	r0, [r4, #28]
 8016800:	b920      	cbnz	r0, 801680c <_Balloc+0x20>
 8016802:	4b18      	ldr	r3, [pc, #96]	@ (8016864 <_Balloc+0x78>)
 8016804:	4818      	ldr	r0, [pc, #96]	@ (8016868 <_Balloc+0x7c>)
 8016806:	216b      	movs	r1, #107	@ 0x6b
 8016808:	f7ff fb86 	bl	8015f18 <__assert_func>
 801680c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016810:	6006      	str	r6, [r0, #0]
 8016812:	60c6      	str	r6, [r0, #12]
 8016814:	69e6      	ldr	r6, [r4, #28]
 8016816:	68f3      	ldr	r3, [r6, #12]
 8016818:	b183      	cbz	r3, 801683c <_Balloc+0x50>
 801681a:	69e3      	ldr	r3, [r4, #28]
 801681c:	68db      	ldr	r3, [r3, #12]
 801681e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8016822:	b9b8      	cbnz	r0, 8016854 <_Balloc+0x68>
 8016824:	2101      	movs	r1, #1
 8016826:	fa01 f605 	lsl.w	r6, r1, r5
 801682a:	1d72      	adds	r2, r6, #5
 801682c:	0092      	lsls	r2, r2, #2
 801682e:	4620      	mov	r0, r4
 8016830:	f001 fa21 	bl	8017c76 <_calloc_r>
 8016834:	b160      	cbz	r0, 8016850 <_Balloc+0x64>
 8016836:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801683a:	e00e      	b.n	801685a <_Balloc+0x6e>
 801683c:	2221      	movs	r2, #33	@ 0x21
 801683e:	2104      	movs	r1, #4
 8016840:	4620      	mov	r0, r4
 8016842:	f001 fa18 	bl	8017c76 <_calloc_r>
 8016846:	69e3      	ldr	r3, [r4, #28]
 8016848:	60f0      	str	r0, [r6, #12]
 801684a:	68db      	ldr	r3, [r3, #12]
 801684c:	2b00      	cmp	r3, #0
 801684e:	d1e4      	bne.n	801681a <_Balloc+0x2e>
 8016850:	2000      	movs	r0, #0
 8016852:	bd70      	pop	{r4, r5, r6, pc}
 8016854:	6802      	ldr	r2, [r0, #0]
 8016856:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801685a:	2300      	movs	r3, #0
 801685c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8016860:	e7f7      	b.n	8016852 <_Balloc+0x66>
 8016862:	bf00      	nop
 8016864:	08020cca 	.word	0x08020cca
 8016868:	08020dfc 	.word	0x08020dfc

0801686c <_Bfree>:
 801686c:	b570      	push	{r4, r5, r6, lr}
 801686e:	69c6      	ldr	r6, [r0, #28]
 8016870:	4605      	mov	r5, r0
 8016872:	460c      	mov	r4, r1
 8016874:	b976      	cbnz	r6, 8016894 <_Bfree+0x28>
 8016876:	2010      	movs	r0, #16
 8016878:	f7ff fef0 	bl	801665c <malloc>
 801687c:	4602      	mov	r2, r0
 801687e:	61e8      	str	r0, [r5, #28]
 8016880:	b920      	cbnz	r0, 801688c <_Bfree+0x20>
 8016882:	4b09      	ldr	r3, [pc, #36]	@ (80168a8 <_Bfree+0x3c>)
 8016884:	4809      	ldr	r0, [pc, #36]	@ (80168ac <_Bfree+0x40>)
 8016886:	218f      	movs	r1, #143	@ 0x8f
 8016888:	f7ff fb46 	bl	8015f18 <__assert_func>
 801688c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016890:	6006      	str	r6, [r0, #0]
 8016892:	60c6      	str	r6, [r0, #12]
 8016894:	b13c      	cbz	r4, 80168a6 <_Bfree+0x3a>
 8016896:	69eb      	ldr	r3, [r5, #28]
 8016898:	6862      	ldr	r2, [r4, #4]
 801689a:	68db      	ldr	r3, [r3, #12]
 801689c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80168a0:	6021      	str	r1, [r4, #0]
 80168a2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80168a6:	bd70      	pop	{r4, r5, r6, pc}
 80168a8:	08020cca 	.word	0x08020cca
 80168ac:	08020dfc 	.word	0x08020dfc

080168b0 <__multadd>:
 80168b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80168b4:	690d      	ldr	r5, [r1, #16]
 80168b6:	4607      	mov	r7, r0
 80168b8:	460c      	mov	r4, r1
 80168ba:	461e      	mov	r6, r3
 80168bc:	f101 0c14 	add.w	ip, r1, #20
 80168c0:	2000      	movs	r0, #0
 80168c2:	f8dc 3000 	ldr.w	r3, [ip]
 80168c6:	b299      	uxth	r1, r3
 80168c8:	fb02 6101 	mla	r1, r2, r1, r6
 80168cc:	0c1e      	lsrs	r6, r3, #16
 80168ce:	0c0b      	lsrs	r3, r1, #16
 80168d0:	fb02 3306 	mla	r3, r2, r6, r3
 80168d4:	b289      	uxth	r1, r1
 80168d6:	3001      	adds	r0, #1
 80168d8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80168dc:	4285      	cmp	r5, r0
 80168de:	f84c 1b04 	str.w	r1, [ip], #4
 80168e2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80168e6:	dcec      	bgt.n	80168c2 <__multadd+0x12>
 80168e8:	b30e      	cbz	r6, 801692e <__multadd+0x7e>
 80168ea:	68a3      	ldr	r3, [r4, #8]
 80168ec:	42ab      	cmp	r3, r5
 80168ee:	dc19      	bgt.n	8016924 <__multadd+0x74>
 80168f0:	6861      	ldr	r1, [r4, #4]
 80168f2:	4638      	mov	r0, r7
 80168f4:	3101      	adds	r1, #1
 80168f6:	f7ff ff79 	bl	80167ec <_Balloc>
 80168fa:	4680      	mov	r8, r0
 80168fc:	b928      	cbnz	r0, 801690a <__multadd+0x5a>
 80168fe:	4602      	mov	r2, r0
 8016900:	4b0c      	ldr	r3, [pc, #48]	@ (8016934 <__multadd+0x84>)
 8016902:	480d      	ldr	r0, [pc, #52]	@ (8016938 <__multadd+0x88>)
 8016904:	21ba      	movs	r1, #186	@ 0xba
 8016906:	f7ff fb07 	bl	8015f18 <__assert_func>
 801690a:	6922      	ldr	r2, [r4, #16]
 801690c:	3202      	adds	r2, #2
 801690e:	f104 010c 	add.w	r1, r4, #12
 8016912:	0092      	lsls	r2, r2, #2
 8016914:	300c      	adds	r0, #12
 8016916:	f7ff fae8 	bl	8015eea <memcpy>
 801691a:	4621      	mov	r1, r4
 801691c:	4638      	mov	r0, r7
 801691e:	f7ff ffa5 	bl	801686c <_Bfree>
 8016922:	4644      	mov	r4, r8
 8016924:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8016928:	3501      	adds	r5, #1
 801692a:	615e      	str	r6, [r3, #20]
 801692c:	6125      	str	r5, [r4, #16]
 801692e:	4620      	mov	r0, r4
 8016930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016934:	08020d8b 	.word	0x08020d8b
 8016938:	08020dfc 	.word	0x08020dfc

0801693c <__s2b>:
 801693c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016940:	460c      	mov	r4, r1
 8016942:	4615      	mov	r5, r2
 8016944:	461f      	mov	r7, r3
 8016946:	2209      	movs	r2, #9
 8016948:	3308      	adds	r3, #8
 801694a:	4606      	mov	r6, r0
 801694c:	fb93 f3f2 	sdiv	r3, r3, r2
 8016950:	2100      	movs	r1, #0
 8016952:	2201      	movs	r2, #1
 8016954:	429a      	cmp	r2, r3
 8016956:	db09      	blt.n	801696c <__s2b+0x30>
 8016958:	4630      	mov	r0, r6
 801695a:	f7ff ff47 	bl	80167ec <_Balloc>
 801695e:	b940      	cbnz	r0, 8016972 <__s2b+0x36>
 8016960:	4602      	mov	r2, r0
 8016962:	4b19      	ldr	r3, [pc, #100]	@ (80169c8 <__s2b+0x8c>)
 8016964:	4819      	ldr	r0, [pc, #100]	@ (80169cc <__s2b+0x90>)
 8016966:	21d3      	movs	r1, #211	@ 0xd3
 8016968:	f7ff fad6 	bl	8015f18 <__assert_func>
 801696c:	0052      	lsls	r2, r2, #1
 801696e:	3101      	adds	r1, #1
 8016970:	e7f0      	b.n	8016954 <__s2b+0x18>
 8016972:	9b08      	ldr	r3, [sp, #32]
 8016974:	6143      	str	r3, [r0, #20]
 8016976:	2d09      	cmp	r5, #9
 8016978:	f04f 0301 	mov.w	r3, #1
 801697c:	6103      	str	r3, [r0, #16]
 801697e:	dd16      	ble.n	80169ae <__s2b+0x72>
 8016980:	f104 0909 	add.w	r9, r4, #9
 8016984:	46c8      	mov	r8, r9
 8016986:	442c      	add	r4, r5
 8016988:	f818 3b01 	ldrb.w	r3, [r8], #1
 801698c:	4601      	mov	r1, r0
 801698e:	3b30      	subs	r3, #48	@ 0x30
 8016990:	220a      	movs	r2, #10
 8016992:	4630      	mov	r0, r6
 8016994:	f7ff ff8c 	bl	80168b0 <__multadd>
 8016998:	45a0      	cmp	r8, r4
 801699a:	d1f5      	bne.n	8016988 <__s2b+0x4c>
 801699c:	f1a5 0408 	sub.w	r4, r5, #8
 80169a0:	444c      	add	r4, r9
 80169a2:	1b2d      	subs	r5, r5, r4
 80169a4:	1963      	adds	r3, r4, r5
 80169a6:	42bb      	cmp	r3, r7
 80169a8:	db04      	blt.n	80169b4 <__s2b+0x78>
 80169aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80169ae:	340a      	adds	r4, #10
 80169b0:	2509      	movs	r5, #9
 80169b2:	e7f6      	b.n	80169a2 <__s2b+0x66>
 80169b4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80169b8:	4601      	mov	r1, r0
 80169ba:	3b30      	subs	r3, #48	@ 0x30
 80169bc:	220a      	movs	r2, #10
 80169be:	4630      	mov	r0, r6
 80169c0:	f7ff ff76 	bl	80168b0 <__multadd>
 80169c4:	e7ee      	b.n	80169a4 <__s2b+0x68>
 80169c6:	bf00      	nop
 80169c8:	08020d8b 	.word	0x08020d8b
 80169cc:	08020dfc 	.word	0x08020dfc

080169d0 <__hi0bits>:
 80169d0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80169d4:	4603      	mov	r3, r0
 80169d6:	bf36      	itet	cc
 80169d8:	0403      	lslcc	r3, r0, #16
 80169da:	2000      	movcs	r0, #0
 80169dc:	2010      	movcc	r0, #16
 80169de:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80169e2:	bf3c      	itt	cc
 80169e4:	021b      	lslcc	r3, r3, #8
 80169e6:	3008      	addcc	r0, #8
 80169e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80169ec:	bf3c      	itt	cc
 80169ee:	011b      	lslcc	r3, r3, #4
 80169f0:	3004      	addcc	r0, #4
 80169f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80169f6:	bf3c      	itt	cc
 80169f8:	009b      	lslcc	r3, r3, #2
 80169fa:	3002      	addcc	r0, #2
 80169fc:	2b00      	cmp	r3, #0
 80169fe:	db05      	blt.n	8016a0c <__hi0bits+0x3c>
 8016a00:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8016a04:	f100 0001 	add.w	r0, r0, #1
 8016a08:	bf08      	it	eq
 8016a0a:	2020      	moveq	r0, #32
 8016a0c:	4770      	bx	lr

08016a0e <__lo0bits>:
 8016a0e:	6803      	ldr	r3, [r0, #0]
 8016a10:	4602      	mov	r2, r0
 8016a12:	f013 0007 	ands.w	r0, r3, #7
 8016a16:	d00b      	beq.n	8016a30 <__lo0bits+0x22>
 8016a18:	07d9      	lsls	r1, r3, #31
 8016a1a:	d421      	bmi.n	8016a60 <__lo0bits+0x52>
 8016a1c:	0798      	lsls	r0, r3, #30
 8016a1e:	bf49      	itett	mi
 8016a20:	085b      	lsrmi	r3, r3, #1
 8016a22:	089b      	lsrpl	r3, r3, #2
 8016a24:	2001      	movmi	r0, #1
 8016a26:	6013      	strmi	r3, [r2, #0]
 8016a28:	bf5c      	itt	pl
 8016a2a:	6013      	strpl	r3, [r2, #0]
 8016a2c:	2002      	movpl	r0, #2
 8016a2e:	4770      	bx	lr
 8016a30:	b299      	uxth	r1, r3
 8016a32:	b909      	cbnz	r1, 8016a38 <__lo0bits+0x2a>
 8016a34:	0c1b      	lsrs	r3, r3, #16
 8016a36:	2010      	movs	r0, #16
 8016a38:	b2d9      	uxtb	r1, r3
 8016a3a:	b909      	cbnz	r1, 8016a40 <__lo0bits+0x32>
 8016a3c:	3008      	adds	r0, #8
 8016a3e:	0a1b      	lsrs	r3, r3, #8
 8016a40:	0719      	lsls	r1, r3, #28
 8016a42:	bf04      	itt	eq
 8016a44:	091b      	lsreq	r3, r3, #4
 8016a46:	3004      	addeq	r0, #4
 8016a48:	0799      	lsls	r1, r3, #30
 8016a4a:	bf04      	itt	eq
 8016a4c:	089b      	lsreq	r3, r3, #2
 8016a4e:	3002      	addeq	r0, #2
 8016a50:	07d9      	lsls	r1, r3, #31
 8016a52:	d403      	bmi.n	8016a5c <__lo0bits+0x4e>
 8016a54:	085b      	lsrs	r3, r3, #1
 8016a56:	f100 0001 	add.w	r0, r0, #1
 8016a5a:	d003      	beq.n	8016a64 <__lo0bits+0x56>
 8016a5c:	6013      	str	r3, [r2, #0]
 8016a5e:	4770      	bx	lr
 8016a60:	2000      	movs	r0, #0
 8016a62:	4770      	bx	lr
 8016a64:	2020      	movs	r0, #32
 8016a66:	4770      	bx	lr

08016a68 <__i2b>:
 8016a68:	b510      	push	{r4, lr}
 8016a6a:	460c      	mov	r4, r1
 8016a6c:	2101      	movs	r1, #1
 8016a6e:	f7ff febd 	bl	80167ec <_Balloc>
 8016a72:	4602      	mov	r2, r0
 8016a74:	b928      	cbnz	r0, 8016a82 <__i2b+0x1a>
 8016a76:	4b05      	ldr	r3, [pc, #20]	@ (8016a8c <__i2b+0x24>)
 8016a78:	4805      	ldr	r0, [pc, #20]	@ (8016a90 <__i2b+0x28>)
 8016a7a:	f240 1145 	movw	r1, #325	@ 0x145
 8016a7e:	f7ff fa4b 	bl	8015f18 <__assert_func>
 8016a82:	2301      	movs	r3, #1
 8016a84:	6144      	str	r4, [r0, #20]
 8016a86:	6103      	str	r3, [r0, #16]
 8016a88:	bd10      	pop	{r4, pc}
 8016a8a:	bf00      	nop
 8016a8c:	08020d8b 	.word	0x08020d8b
 8016a90:	08020dfc 	.word	0x08020dfc

08016a94 <__multiply>:
 8016a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a98:	4617      	mov	r7, r2
 8016a9a:	690a      	ldr	r2, [r1, #16]
 8016a9c:	693b      	ldr	r3, [r7, #16]
 8016a9e:	429a      	cmp	r2, r3
 8016aa0:	bfa8      	it	ge
 8016aa2:	463b      	movge	r3, r7
 8016aa4:	4689      	mov	r9, r1
 8016aa6:	bfa4      	itt	ge
 8016aa8:	460f      	movge	r7, r1
 8016aaa:	4699      	movge	r9, r3
 8016aac:	693d      	ldr	r5, [r7, #16]
 8016aae:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8016ab2:	68bb      	ldr	r3, [r7, #8]
 8016ab4:	6879      	ldr	r1, [r7, #4]
 8016ab6:	eb05 060a 	add.w	r6, r5, sl
 8016aba:	42b3      	cmp	r3, r6
 8016abc:	b085      	sub	sp, #20
 8016abe:	bfb8      	it	lt
 8016ac0:	3101      	addlt	r1, #1
 8016ac2:	f7ff fe93 	bl	80167ec <_Balloc>
 8016ac6:	b930      	cbnz	r0, 8016ad6 <__multiply+0x42>
 8016ac8:	4602      	mov	r2, r0
 8016aca:	4b41      	ldr	r3, [pc, #260]	@ (8016bd0 <__multiply+0x13c>)
 8016acc:	4841      	ldr	r0, [pc, #260]	@ (8016bd4 <__multiply+0x140>)
 8016ace:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8016ad2:	f7ff fa21 	bl	8015f18 <__assert_func>
 8016ad6:	f100 0414 	add.w	r4, r0, #20
 8016ada:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8016ade:	4623      	mov	r3, r4
 8016ae0:	2200      	movs	r2, #0
 8016ae2:	4573      	cmp	r3, lr
 8016ae4:	d320      	bcc.n	8016b28 <__multiply+0x94>
 8016ae6:	f107 0814 	add.w	r8, r7, #20
 8016aea:	f109 0114 	add.w	r1, r9, #20
 8016aee:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8016af2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8016af6:	9302      	str	r3, [sp, #8]
 8016af8:	1beb      	subs	r3, r5, r7
 8016afa:	3b15      	subs	r3, #21
 8016afc:	f023 0303 	bic.w	r3, r3, #3
 8016b00:	3304      	adds	r3, #4
 8016b02:	3715      	adds	r7, #21
 8016b04:	42bd      	cmp	r5, r7
 8016b06:	bf38      	it	cc
 8016b08:	2304      	movcc	r3, #4
 8016b0a:	9301      	str	r3, [sp, #4]
 8016b0c:	9b02      	ldr	r3, [sp, #8]
 8016b0e:	9103      	str	r1, [sp, #12]
 8016b10:	428b      	cmp	r3, r1
 8016b12:	d80c      	bhi.n	8016b2e <__multiply+0x9a>
 8016b14:	2e00      	cmp	r6, #0
 8016b16:	dd03      	ble.n	8016b20 <__multiply+0x8c>
 8016b18:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8016b1c:	2b00      	cmp	r3, #0
 8016b1e:	d055      	beq.n	8016bcc <__multiply+0x138>
 8016b20:	6106      	str	r6, [r0, #16]
 8016b22:	b005      	add	sp, #20
 8016b24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b28:	f843 2b04 	str.w	r2, [r3], #4
 8016b2c:	e7d9      	b.n	8016ae2 <__multiply+0x4e>
 8016b2e:	f8b1 a000 	ldrh.w	sl, [r1]
 8016b32:	f1ba 0f00 	cmp.w	sl, #0
 8016b36:	d01f      	beq.n	8016b78 <__multiply+0xe4>
 8016b38:	46c4      	mov	ip, r8
 8016b3a:	46a1      	mov	r9, r4
 8016b3c:	2700      	movs	r7, #0
 8016b3e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8016b42:	f8d9 3000 	ldr.w	r3, [r9]
 8016b46:	fa1f fb82 	uxth.w	fp, r2
 8016b4a:	b29b      	uxth	r3, r3
 8016b4c:	fb0a 330b 	mla	r3, sl, fp, r3
 8016b50:	443b      	add	r3, r7
 8016b52:	f8d9 7000 	ldr.w	r7, [r9]
 8016b56:	0c12      	lsrs	r2, r2, #16
 8016b58:	0c3f      	lsrs	r7, r7, #16
 8016b5a:	fb0a 7202 	mla	r2, sl, r2, r7
 8016b5e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8016b62:	b29b      	uxth	r3, r3
 8016b64:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016b68:	4565      	cmp	r5, ip
 8016b6a:	f849 3b04 	str.w	r3, [r9], #4
 8016b6e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8016b72:	d8e4      	bhi.n	8016b3e <__multiply+0xaa>
 8016b74:	9b01      	ldr	r3, [sp, #4]
 8016b76:	50e7      	str	r7, [r4, r3]
 8016b78:	9b03      	ldr	r3, [sp, #12]
 8016b7a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8016b7e:	3104      	adds	r1, #4
 8016b80:	f1b9 0f00 	cmp.w	r9, #0
 8016b84:	d020      	beq.n	8016bc8 <__multiply+0x134>
 8016b86:	6823      	ldr	r3, [r4, #0]
 8016b88:	4647      	mov	r7, r8
 8016b8a:	46a4      	mov	ip, r4
 8016b8c:	f04f 0a00 	mov.w	sl, #0
 8016b90:	f8b7 b000 	ldrh.w	fp, [r7]
 8016b94:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8016b98:	fb09 220b 	mla	r2, r9, fp, r2
 8016b9c:	4452      	add	r2, sl
 8016b9e:	b29b      	uxth	r3, r3
 8016ba0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016ba4:	f84c 3b04 	str.w	r3, [ip], #4
 8016ba8:	f857 3b04 	ldr.w	r3, [r7], #4
 8016bac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8016bb0:	f8bc 3000 	ldrh.w	r3, [ip]
 8016bb4:	fb09 330a 	mla	r3, r9, sl, r3
 8016bb8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8016bbc:	42bd      	cmp	r5, r7
 8016bbe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8016bc2:	d8e5      	bhi.n	8016b90 <__multiply+0xfc>
 8016bc4:	9a01      	ldr	r2, [sp, #4]
 8016bc6:	50a3      	str	r3, [r4, r2]
 8016bc8:	3404      	adds	r4, #4
 8016bca:	e79f      	b.n	8016b0c <__multiply+0x78>
 8016bcc:	3e01      	subs	r6, #1
 8016bce:	e7a1      	b.n	8016b14 <__multiply+0x80>
 8016bd0:	08020d8b 	.word	0x08020d8b
 8016bd4:	08020dfc 	.word	0x08020dfc

08016bd8 <__pow5mult>:
 8016bd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016bdc:	4615      	mov	r5, r2
 8016bde:	f012 0203 	ands.w	r2, r2, #3
 8016be2:	4607      	mov	r7, r0
 8016be4:	460e      	mov	r6, r1
 8016be6:	d007      	beq.n	8016bf8 <__pow5mult+0x20>
 8016be8:	4c25      	ldr	r4, [pc, #148]	@ (8016c80 <__pow5mult+0xa8>)
 8016bea:	3a01      	subs	r2, #1
 8016bec:	2300      	movs	r3, #0
 8016bee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8016bf2:	f7ff fe5d 	bl	80168b0 <__multadd>
 8016bf6:	4606      	mov	r6, r0
 8016bf8:	10ad      	asrs	r5, r5, #2
 8016bfa:	d03d      	beq.n	8016c78 <__pow5mult+0xa0>
 8016bfc:	69fc      	ldr	r4, [r7, #28]
 8016bfe:	b97c      	cbnz	r4, 8016c20 <__pow5mult+0x48>
 8016c00:	2010      	movs	r0, #16
 8016c02:	f7ff fd2b 	bl	801665c <malloc>
 8016c06:	4602      	mov	r2, r0
 8016c08:	61f8      	str	r0, [r7, #28]
 8016c0a:	b928      	cbnz	r0, 8016c18 <__pow5mult+0x40>
 8016c0c:	4b1d      	ldr	r3, [pc, #116]	@ (8016c84 <__pow5mult+0xac>)
 8016c0e:	481e      	ldr	r0, [pc, #120]	@ (8016c88 <__pow5mult+0xb0>)
 8016c10:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8016c14:	f7ff f980 	bl	8015f18 <__assert_func>
 8016c18:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016c1c:	6004      	str	r4, [r0, #0]
 8016c1e:	60c4      	str	r4, [r0, #12]
 8016c20:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8016c24:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8016c28:	b94c      	cbnz	r4, 8016c3e <__pow5mult+0x66>
 8016c2a:	f240 2171 	movw	r1, #625	@ 0x271
 8016c2e:	4638      	mov	r0, r7
 8016c30:	f7ff ff1a 	bl	8016a68 <__i2b>
 8016c34:	2300      	movs	r3, #0
 8016c36:	f8c8 0008 	str.w	r0, [r8, #8]
 8016c3a:	4604      	mov	r4, r0
 8016c3c:	6003      	str	r3, [r0, #0]
 8016c3e:	f04f 0900 	mov.w	r9, #0
 8016c42:	07eb      	lsls	r3, r5, #31
 8016c44:	d50a      	bpl.n	8016c5c <__pow5mult+0x84>
 8016c46:	4631      	mov	r1, r6
 8016c48:	4622      	mov	r2, r4
 8016c4a:	4638      	mov	r0, r7
 8016c4c:	f7ff ff22 	bl	8016a94 <__multiply>
 8016c50:	4631      	mov	r1, r6
 8016c52:	4680      	mov	r8, r0
 8016c54:	4638      	mov	r0, r7
 8016c56:	f7ff fe09 	bl	801686c <_Bfree>
 8016c5a:	4646      	mov	r6, r8
 8016c5c:	106d      	asrs	r5, r5, #1
 8016c5e:	d00b      	beq.n	8016c78 <__pow5mult+0xa0>
 8016c60:	6820      	ldr	r0, [r4, #0]
 8016c62:	b938      	cbnz	r0, 8016c74 <__pow5mult+0x9c>
 8016c64:	4622      	mov	r2, r4
 8016c66:	4621      	mov	r1, r4
 8016c68:	4638      	mov	r0, r7
 8016c6a:	f7ff ff13 	bl	8016a94 <__multiply>
 8016c6e:	6020      	str	r0, [r4, #0]
 8016c70:	f8c0 9000 	str.w	r9, [r0]
 8016c74:	4604      	mov	r4, r0
 8016c76:	e7e4      	b.n	8016c42 <__pow5mult+0x6a>
 8016c78:	4630      	mov	r0, r6
 8016c7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016c7e:	bf00      	nop
 8016c80:	08020fdc 	.word	0x08020fdc
 8016c84:	08020cca 	.word	0x08020cca
 8016c88:	08020dfc 	.word	0x08020dfc

08016c8c <__lshift>:
 8016c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016c90:	460c      	mov	r4, r1
 8016c92:	6849      	ldr	r1, [r1, #4]
 8016c94:	6923      	ldr	r3, [r4, #16]
 8016c96:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8016c9a:	68a3      	ldr	r3, [r4, #8]
 8016c9c:	4607      	mov	r7, r0
 8016c9e:	4691      	mov	r9, r2
 8016ca0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8016ca4:	f108 0601 	add.w	r6, r8, #1
 8016ca8:	42b3      	cmp	r3, r6
 8016caa:	db0b      	blt.n	8016cc4 <__lshift+0x38>
 8016cac:	4638      	mov	r0, r7
 8016cae:	f7ff fd9d 	bl	80167ec <_Balloc>
 8016cb2:	4605      	mov	r5, r0
 8016cb4:	b948      	cbnz	r0, 8016cca <__lshift+0x3e>
 8016cb6:	4602      	mov	r2, r0
 8016cb8:	4b28      	ldr	r3, [pc, #160]	@ (8016d5c <__lshift+0xd0>)
 8016cba:	4829      	ldr	r0, [pc, #164]	@ (8016d60 <__lshift+0xd4>)
 8016cbc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8016cc0:	f7ff f92a 	bl	8015f18 <__assert_func>
 8016cc4:	3101      	adds	r1, #1
 8016cc6:	005b      	lsls	r3, r3, #1
 8016cc8:	e7ee      	b.n	8016ca8 <__lshift+0x1c>
 8016cca:	2300      	movs	r3, #0
 8016ccc:	f100 0114 	add.w	r1, r0, #20
 8016cd0:	f100 0210 	add.w	r2, r0, #16
 8016cd4:	4618      	mov	r0, r3
 8016cd6:	4553      	cmp	r3, sl
 8016cd8:	db33      	blt.n	8016d42 <__lshift+0xb6>
 8016cda:	6920      	ldr	r0, [r4, #16]
 8016cdc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016ce0:	f104 0314 	add.w	r3, r4, #20
 8016ce4:	f019 091f 	ands.w	r9, r9, #31
 8016ce8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8016cec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8016cf0:	d02b      	beq.n	8016d4a <__lshift+0xbe>
 8016cf2:	f1c9 0e20 	rsb	lr, r9, #32
 8016cf6:	468a      	mov	sl, r1
 8016cf8:	2200      	movs	r2, #0
 8016cfa:	6818      	ldr	r0, [r3, #0]
 8016cfc:	fa00 f009 	lsl.w	r0, r0, r9
 8016d00:	4310      	orrs	r0, r2
 8016d02:	f84a 0b04 	str.w	r0, [sl], #4
 8016d06:	f853 2b04 	ldr.w	r2, [r3], #4
 8016d0a:	459c      	cmp	ip, r3
 8016d0c:	fa22 f20e 	lsr.w	r2, r2, lr
 8016d10:	d8f3      	bhi.n	8016cfa <__lshift+0x6e>
 8016d12:	ebac 0304 	sub.w	r3, ip, r4
 8016d16:	3b15      	subs	r3, #21
 8016d18:	f023 0303 	bic.w	r3, r3, #3
 8016d1c:	3304      	adds	r3, #4
 8016d1e:	f104 0015 	add.w	r0, r4, #21
 8016d22:	4560      	cmp	r0, ip
 8016d24:	bf88      	it	hi
 8016d26:	2304      	movhi	r3, #4
 8016d28:	50ca      	str	r2, [r1, r3]
 8016d2a:	b10a      	cbz	r2, 8016d30 <__lshift+0xa4>
 8016d2c:	f108 0602 	add.w	r6, r8, #2
 8016d30:	3e01      	subs	r6, #1
 8016d32:	4638      	mov	r0, r7
 8016d34:	612e      	str	r6, [r5, #16]
 8016d36:	4621      	mov	r1, r4
 8016d38:	f7ff fd98 	bl	801686c <_Bfree>
 8016d3c:	4628      	mov	r0, r5
 8016d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016d42:	f842 0f04 	str.w	r0, [r2, #4]!
 8016d46:	3301      	adds	r3, #1
 8016d48:	e7c5      	b.n	8016cd6 <__lshift+0x4a>
 8016d4a:	3904      	subs	r1, #4
 8016d4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8016d50:	f841 2f04 	str.w	r2, [r1, #4]!
 8016d54:	459c      	cmp	ip, r3
 8016d56:	d8f9      	bhi.n	8016d4c <__lshift+0xc0>
 8016d58:	e7ea      	b.n	8016d30 <__lshift+0xa4>
 8016d5a:	bf00      	nop
 8016d5c:	08020d8b 	.word	0x08020d8b
 8016d60:	08020dfc 	.word	0x08020dfc

08016d64 <__mcmp>:
 8016d64:	690a      	ldr	r2, [r1, #16]
 8016d66:	4603      	mov	r3, r0
 8016d68:	6900      	ldr	r0, [r0, #16]
 8016d6a:	1a80      	subs	r0, r0, r2
 8016d6c:	b530      	push	{r4, r5, lr}
 8016d6e:	d10e      	bne.n	8016d8e <__mcmp+0x2a>
 8016d70:	3314      	adds	r3, #20
 8016d72:	3114      	adds	r1, #20
 8016d74:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8016d78:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8016d7c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8016d80:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8016d84:	4295      	cmp	r5, r2
 8016d86:	d003      	beq.n	8016d90 <__mcmp+0x2c>
 8016d88:	d205      	bcs.n	8016d96 <__mcmp+0x32>
 8016d8a:	f04f 30ff 	mov.w	r0, #4294967295
 8016d8e:	bd30      	pop	{r4, r5, pc}
 8016d90:	42a3      	cmp	r3, r4
 8016d92:	d3f3      	bcc.n	8016d7c <__mcmp+0x18>
 8016d94:	e7fb      	b.n	8016d8e <__mcmp+0x2a>
 8016d96:	2001      	movs	r0, #1
 8016d98:	e7f9      	b.n	8016d8e <__mcmp+0x2a>
	...

08016d9c <__mdiff>:
 8016d9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016da0:	4689      	mov	r9, r1
 8016da2:	4606      	mov	r6, r0
 8016da4:	4611      	mov	r1, r2
 8016da6:	4648      	mov	r0, r9
 8016da8:	4614      	mov	r4, r2
 8016daa:	f7ff ffdb 	bl	8016d64 <__mcmp>
 8016dae:	1e05      	subs	r5, r0, #0
 8016db0:	d112      	bne.n	8016dd8 <__mdiff+0x3c>
 8016db2:	4629      	mov	r1, r5
 8016db4:	4630      	mov	r0, r6
 8016db6:	f7ff fd19 	bl	80167ec <_Balloc>
 8016dba:	4602      	mov	r2, r0
 8016dbc:	b928      	cbnz	r0, 8016dca <__mdiff+0x2e>
 8016dbe:	4b3f      	ldr	r3, [pc, #252]	@ (8016ebc <__mdiff+0x120>)
 8016dc0:	f240 2137 	movw	r1, #567	@ 0x237
 8016dc4:	483e      	ldr	r0, [pc, #248]	@ (8016ec0 <__mdiff+0x124>)
 8016dc6:	f7ff f8a7 	bl	8015f18 <__assert_func>
 8016dca:	2301      	movs	r3, #1
 8016dcc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8016dd0:	4610      	mov	r0, r2
 8016dd2:	b003      	add	sp, #12
 8016dd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016dd8:	bfbc      	itt	lt
 8016dda:	464b      	movlt	r3, r9
 8016ddc:	46a1      	movlt	r9, r4
 8016dde:	4630      	mov	r0, r6
 8016de0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8016de4:	bfba      	itte	lt
 8016de6:	461c      	movlt	r4, r3
 8016de8:	2501      	movlt	r5, #1
 8016dea:	2500      	movge	r5, #0
 8016dec:	f7ff fcfe 	bl	80167ec <_Balloc>
 8016df0:	4602      	mov	r2, r0
 8016df2:	b918      	cbnz	r0, 8016dfc <__mdiff+0x60>
 8016df4:	4b31      	ldr	r3, [pc, #196]	@ (8016ebc <__mdiff+0x120>)
 8016df6:	f240 2145 	movw	r1, #581	@ 0x245
 8016dfa:	e7e3      	b.n	8016dc4 <__mdiff+0x28>
 8016dfc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8016e00:	6926      	ldr	r6, [r4, #16]
 8016e02:	60c5      	str	r5, [r0, #12]
 8016e04:	f109 0310 	add.w	r3, r9, #16
 8016e08:	f109 0514 	add.w	r5, r9, #20
 8016e0c:	f104 0e14 	add.w	lr, r4, #20
 8016e10:	f100 0b14 	add.w	fp, r0, #20
 8016e14:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8016e18:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8016e1c:	9301      	str	r3, [sp, #4]
 8016e1e:	46d9      	mov	r9, fp
 8016e20:	f04f 0c00 	mov.w	ip, #0
 8016e24:	9b01      	ldr	r3, [sp, #4]
 8016e26:	f85e 0b04 	ldr.w	r0, [lr], #4
 8016e2a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8016e2e:	9301      	str	r3, [sp, #4]
 8016e30:	fa1f f38a 	uxth.w	r3, sl
 8016e34:	4619      	mov	r1, r3
 8016e36:	b283      	uxth	r3, r0
 8016e38:	1acb      	subs	r3, r1, r3
 8016e3a:	0c00      	lsrs	r0, r0, #16
 8016e3c:	4463      	add	r3, ip
 8016e3e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8016e42:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8016e46:	b29b      	uxth	r3, r3
 8016e48:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8016e4c:	4576      	cmp	r6, lr
 8016e4e:	f849 3b04 	str.w	r3, [r9], #4
 8016e52:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8016e56:	d8e5      	bhi.n	8016e24 <__mdiff+0x88>
 8016e58:	1b33      	subs	r3, r6, r4
 8016e5a:	3b15      	subs	r3, #21
 8016e5c:	f023 0303 	bic.w	r3, r3, #3
 8016e60:	3415      	adds	r4, #21
 8016e62:	3304      	adds	r3, #4
 8016e64:	42a6      	cmp	r6, r4
 8016e66:	bf38      	it	cc
 8016e68:	2304      	movcc	r3, #4
 8016e6a:	441d      	add	r5, r3
 8016e6c:	445b      	add	r3, fp
 8016e6e:	461e      	mov	r6, r3
 8016e70:	462c      	mov	r4, r5
 8016e72:	4544      	cmp	r4, r8
 8016e74:	d30e      	bcc.n	8016e94 <__mdiff+0xf8>
 8016e76:	f108 0103 	add.w	r1, r8, #3
 8016e7a:	1b49      	subs	r1, r1, r5
 8016e7c:	f021 0103 	bic.w	r1, r1, #3
 8016e80:	3d03      	subs	r5, #3
 8016e82:	45a8      	cmp	r8, r5
 8016e84:	bf38      	it	cc
 8016e86:	2100      	movcc	r1, #0
 8016e88:	440b      	add	r3, r1
 8016e8a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8016e8e:	b191      	cbz	r1, 8016eb6 <__mdiff+0x11a>
 8016e90:	6117      	str	r7, [r2, #16]
 8016e92:	e79d      	b.n	8016dd0 <__mdiff+0x34>
 8016e94:	f854 1b04 	ldr.w	r1, [r4], #4
 8016e98:	46e6      	mov	lr, ip
 8016e9a:	0c08      	lsrs	r0, r1, #16
 8016e9c:	fa1c fc81 	uxtah	ip, ip, r1
 8016ea0:	4471      	add	r1, lr
 8016ea2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8016ea6:	b289      	uxth	r1, r1
 8016ea8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8016eac:	f846 1b04 	str.w	r1, [r6], #4
 8016eb0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8016eb4:	e7dd      	b.n	8016e72 <__mdiff+0xd6>
 8016eb6:	3f01      	subs	r7, #1
 8016eb8:	e7e7      	b.n	8016e8a <__mdiff+0xee>
 8016eba:	bf00      	nop
 8016ebc:	08020d8b 	.word	0x08020d8b
 8016ec0:	08020dfc 	.word	0x08020dfc

08016ec4 <__ulp>:
 8016ec4:	b082      	sub	sp, #8
 8016ec6:	ed8d 0b00 	vstr	d0, [sp]
 8016eca:	9a01      	ldr	r2, [sp, #4]
 8016ecc:	4b0f      	ldr	r3, [pc, #60]	@ (8016f0c <__ulp+0x48>)
 8016ece:	4013      	ands	r3, r2
 8016ed0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8016ed4:	2b00      	cmp	r3, #0
 8016ed6:	dc08      	bgt.n	8016eea <__ulp+0x26>
 8016ed8:	425b      	negs	r3, r3
 8016eda:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8016ede:	ea4f 5223 	mov.w	r2, r3, asr #20
 8016ee2:	da04      	bge.n	8016eee <__ulp+0x2a>
 8016ee4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8016ee8:	4113      	asrs	r3, r2
 8016eea:	2200      	movs	r2, #0
 8016eec:	e008      	b.n	8016f00 <__ulp+0x3c>
 8016eee:	f1a2 0314 	sub.w	r3, r2, #20
 8016ef2:	2b1e      	cmp	r3, #30
 8016ef4:	bfda      	itte	le
 8016ef6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8016efa:	40da      	lsrle	r2, r3
 8016efc:	2201      	movgt	r2, #1
 8016efe:	2300      	movs	r3, #0
 8016f00:	4619      	mov	r1, r3
 8016f02:	4610      	mov	r0, r2
 8016f04:	ec41 0b10 	vmov	d0, r0, r1
 8016f08:	b002      	add	sp, #8
 8016f0a:	4770      	bx	lr
 8016f0c:	7ff00000 	.word	0x7ff00000

08016f10 <__b2d>:
 8016f10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016f14:	6906      	ldr	r6, [r0, #16]
 8016f16:	f100 0814 	add.w	r8, r0, #20
 8016f1a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8016f1e:	1f37      	subs	r7, r6, #4
 8016f20:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8016f24:	4610      	mov	r0, r2
 8016f26:	f7ff fd53 	bl	80169d0 <__hi0bits>
 8016f2a:	f1c0 0320 	rsb	r3, r0, #32
 8016f2e:	280a      	cmp	r0, #10
 8016f30:	600b      	str	r3, [r1, #0]
 8016f32:	491b      	ldr	r1, [pc, #108]	@ (8016fa0 <__b2d+0x90>)
 8016f34:	dc15      	bgt.n	8016f62 <__b2d+0x52>
 8016f36:	f1c0 0c0b 	rsb	ip, r0, #11
 8016f3a:	fa22 f30c 	lsr.w	r3, r2, ip
 8016f3e:	45b8      	cmp	r8, r7
 8016f40:	ea43 0501 	orr.w	r5, r3, r1
 8016f44:	bf34      	ite	cc
 8016f46:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8016f4a:	2300      	movcs	r3, #0
 8016f4c:	3015      	adds	r0, #21
 8016f4e:	fa02 f000 	lsl.w	r0, r2, r0
 8016f52:	fa23 f30c 	lsr.w	r3, r3, ip
 8016f56:	4303      	orrs	r3, r0
 8016f58:	461c      	mov	r4, r3
 8016f5a:	ec45 4b10 	vmov	d0, r4, r5
 8016f5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016f62:	45b8      	cmp	r8, r7
 8016f64:	bf3a      	itte	cc
 8016f66:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8016f6a:	f1a6 0708 	subcc.w	r7, r6, #8
 8016f6e:	2300      	movcs	r3, #0
 8016f70:	380b      	subs	r0, #11
 8016f72:	d012      	beq.n	8016f9a <__b2d+0x8a>
 8016f74:	f1c0 0120 	rsb	r1, r0, #32
 8016f78:	fa23 f401 	lsr.w	r4, r3, r1
 8016f7c:	4082      	lsls	r2, r0
 8016f7e:	4322      	orrs	r2, r4
 8016f80:	4547      	cmp	r7, r8
 8016f82:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8016f86:	bf8c      	ite	hi
 8016f88:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8016f8c:	2200      	movls	r2, #0
 8016f8e:	4083      	lsls	r3, r0
 8016f90:	40ca      	lsrs	r2, r1
 8016f92:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8016f96:	4313      	orrs	r3, r2
 8016f98:	e7de      	b.n	8016f58 <__b2d+0x48>
 8016f9a:	ea42 0501 	orr.w	r5, r2, r1
 8016f9e:	e7db      	b.n	8016f58 <__b2d+0x48>
 8016fa0:	3ff00000 	.word	0x3ff00000

08016fa4 <__d2b>:
 8016fa4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016fa8:	460f      	mov	r7, r1
 8016faa:	2101      	movs	r1, #1
 8016fac:	ec59 8b10 	vmov	r8, r9, d0
 8016fb0:	4616      	mov	r6, r2
 8016fb2:	f7ff fc1b 	bl	80167ec <_Balloc>
 8016fb6:	4604      	mov	r4, r0
 8016fb8:	b930      	cbnz	r0, 8016fc8 <__d2b+0x24>
 8016fba:	4602      	mov	r2, r0
 8016fbc:	4b23      	ldr	r3, [pc, #140]	@ (801704c <__d2b+0xa8>)
 8016fbe:	4824      	ldr	r0, [pc, #144]	@ (8017050 <__d2b+0xac>)
 8016fc0:	f240 310f 	movw	r1, #783	@ 0x30f
 8016fc4:	f7fe ffa8 	bl	8015f18 <__assert_func>
 8016fc8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8016fcc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016fd0:	b10d      	cbz	r5, 8016fd6 <__d2b+0x32>
 8016fd2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8016fd6:	9301      	str	r3, [sp, #4]
 8016fd8:	f1b8 0300 	subs.w	r3, r8, #0
 8016fdc:	d023      	beq.n	8017026 <__d2b+0x82>
 8016fde:	4668      	mov	r0, sp
 8016fe0:	9300      	str	r3, [sp, #0]
 8016fe2:	f7ff fd14 	bl	8016a0e <__lo0bits>
 8016fe6:	e9dd 1200 	ldrd	r1, r2, [sp]
 8016fea:	b1d0      	cbz	r0, 8017022 <__d2b+0x7e>
 8016fec:	f1c0 0320 	rsb	r3, r0, #32
 8016ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8016ff4:	430b      	orrs	r3, r1
 8016ff6:	40c2      	lsrs	r2, r0
 8016ff8:	6163      	str	r3, [r4, #20]
 8016ffa:	9201      	str	r2, [sp, #4]
 8016ffc:	9b01      	ldr	r3, [sp, #4]
 8016ffe:	61a3      	str	r3, [r4, #24]
 8017000:	2b00      	cmp	r3, #0
 8017002:	bf0c      	ite	eq
 8017004:	2201      	moveq	r2, #1
 8017006:	2202      	movne	r2, #2
 8017008:	6122      	str	r2, [r4, #16]
 801700a:	b1a5      	cbz	r5, 8017036 <__d2b+0x92>
 801700c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8017010:	4405      	add	r5, r0
 8017012:	603d      	str	r5, [r7, #0]
 8017014:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8017018:	6030      	str	r0, [r6, #0]
 801701a:	4620      	mov	r0, r4
 801701c:	b003      	add	sp, #12
 801701e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017022:	6161      	str	r1, [r4, #20]
 8017024:	e7ea      	b.n	8016ffc <__d2b+0x58>
 8017026:	a801      	add	r0, sp, #4
 8017028:	f7ff fcf1 	bl	8016a0e <__lo0bits>
 801702c:	9b01      	ldr	r3, [sp, #4]
 801702e:	6163      	str	r3, [r4, #20]
 8017030:	3020      	adds	r0, #32
 8017032:	2201      	movs	r2, #1
 8017034:	e7e8      	b.n	8017008 <__d2b+0x64>
 8017036:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801703a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801703e:	6038      	str	r0, [r7, #0]
 8017040:	6918      	ldr	r0, [r3, #16]
 8017042:	f7ff fcc5 	bl	80169d0 <__hi0bits>
 8017046:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801704a:	e7e5      	b.n	8017018 <__d2b+0x74>
 801704c:	08020d8b 	.word	0x08020d8b
 8017050:	08020dfc 	.word	0x08020dfc

08017054 <__ratio>:
 8017054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017058:	b085      	sub	sp, #20
 801705a:	e9cd 1000 	strd	r1, r0, [sp]
 801705e:	a902      	add	r1, sp, #8
 8017060:	f7ff ff56 	bl	8016f10 <__b2d>
 8017064:	9800      	ldr	r0, [sp, #0]
 8017066:	a903      	add	r1, sp, #12
 8017068:	ec55 4b10 	vmov	r4, r5, d0
 801706c:	f7ff ff50 	bl	8016f10 <__b2d>
 8017070:	9b01      	ldr	r3, [sp, #4]
 8017072:	6919      	ldr	r1, [r3, #16]
 8017074:	9b00      	ldr	r3, [sp, #0]
 8017076:	691b      	ldr	r3, [r3, #16]
 8017078:	1ac9      	subs	r1, r1, r3
 801707a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801707e:	1a9b      	subs	r3, r3, r2
 8017080:	ec5b ab10 	vmov	sl, fp, d0
 8017084:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8017088:	2b00      	cmp	r3, #0
 801708a:	bfce      	itee	gt
 801708c:	462a      	movgt	r2, r5
 801708e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8017092:	465a      	movle	r2, fp
 8017094:	462f      	mov	r7, r5
 8017096:	46d9      	mov	r9, fp
 8017098:	bfcc      	ite	gt
 801709a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801709e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80170a2:	464b      	mov	r3, r9
 80170a4:	4652      	mov	r2, sl
 80170a6:	4620      	mov	r0, r4
 80170a8:	4639      	mov	r1, r7
 80170aa:	f7e9 fbcf 	bl	800084c <__aeabi_ddiv>
 80170ae:	ec41 0b10 	vmov	d0, r0, r1
 80170b2:	b005      	add	sp, #20
 80170b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080170b8 <__copybits>:
 80170b8:	3901      	subs	r1, #1
 80170ba:	b570      	push	{r4, r5, r6, lr}
 80170bc:	1149      	asrs	r1, r1, #5
 80170be:	6914      	ldr	r4, [r2, #16]
 80170c0:	3101      	adds	r1, #1
 80170c2:	f102 0314 	add.w	r3, r2, #20
 80170c6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80170ca:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80170ce:	1f05      	subs	r5, r0, #4
 80170d0:	42a3      	cmp	r3, r4
 80170d2:	d30c      	bcc.n	80170ee <__copybits+0x36>
 80170d4:	1aa3      	subs	r3, r4, r2
 80170d6:	3b11      	subs	r3, #17
 80170d8:	f023 0303 	bic.w	r3, r3, #3
 80170dc:	3211      	adds	r2, #17
 80170de:	42a2      	cmp	r2, r4
 80170e0:	bf88      	it	hi
 80170e2:	2300      	movhi	r3, #0
 80170e4:	4418      	add	r0, r3
 80170e6:	2300      	movs	r3, #0
 80170e8:	4288      	cmp	r0, r1
 80170ea:	d305      	bcc.n	80170f8 <__copybits+0x40>
 80170ec:	bd70      	pop	{r4, r5, r6, pc}
 80170ee:	f853 6b04 	ldr.w	r6, [r3], #4
 80170f2:	f845 6f04 	str.w	r6, [r5, #4]!
 80170f6:	e7eb      	b.n	80170d0 <__copybits+0x18>
 80170f8:	f840 3b04 	str.w	r3, [r0], #4
 80170fc:	e7f4      	b.n	80170e8 <__copybits+0x30>

080170fe <__any_on>:
 80170fe:	f100 0214 	add.w	r2, r0, #20
 8017102:	6900      	ldr	r0, [r0, #16]
 8017104:	114b      	asrs	r3, r1, #5
 8017106:	4298      	cmp	r0, r3
 8017108:	b510      	push	{r4, lr}
 801710a:	db11      	blt.n	8017130 <__any_on+0x32>
 801710c:	dd0a      	ble.n	8017124 <__any_on+0x26>
 801710e:	f011 011f 	ands.w	r1, r1, #31
 8017112:	d007      	beq.n	8017124 <__any_on+0x26>
 8017114:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8017118:	fa24 f001 	lsr.w	r0, r4, r1
 801711c:	fa00 f101 	lsl.w	r1, r0, r1
 8017120:	428c      	cmp	r4, r1
 8017122:	d10b      	bne.n	801713c <__any_on+0x3e>
 8017124:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8017128:	4293      	cmp	r3, r2
 801712a:	d803      	bhi.n	8017134 <__any_on+0x36>
 801712c:	2000      	movs	r0, #0
 801712e:	bd10      	pop	{r4, pc}
 8017130:	4603      	mov	r3, r0
 8017132:	e7f7      	b.n	8017124 <__any_on+0x26>
 8017134:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8017138:	2900      	cmp	r1, #0
 801713a:	d0f5      	beq.n	8017128 <__any_on+0x2a>
 801713c:	2001      	movs	r0, #1
 801713e:	e7f6      	b.n	801712e <__any_on+0x30>

08017140 <__ascii_wctomb>:
 8017140:	4603      	mov	r3, r0
 8017142:	4608      	mov	r0, r1
 8017144:	b141      	cbz	r1, 8017158 <__ascii_wctomb+0x18>
 8017146:	2aff      	cmp	r2, #255	@ 0xff
 8017148:	d904      	bls.n	8017154 <__ascii_wctomb+0x14>
 801714a:	228a      	movs	r2, #138	@ 0x8a
 801714c:	601a      	str	r2, [r3, #0]
 801714e:	f04f 30ff 	mov.w	r0, #4294967295
 8017152:	4770      	bx	lr
 8017154:	700a      	strb	r2, [r1, #0]
 8017156:	2001      	movs	r0, #1
 8017158:	4770      	bx	lr

0801715a <__ssputs_r>:
 801715a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801715e:	688e      	ldr	r6, [r1, #8]
 8017160:	461f      	mov	r7, r3
 8017162:	42be      	cmp	r6, r7
 8017164:	680b      	ldr	r3, [r1, #0]
 8017166:	4682      	mov	sl, r0
 8017168:	460c      	mov	r4, r1
 801716a:	4690      	mov	r8, r2
 801716c:	d82d      	bhi.n	80171ca <__ssputs_r+0x70>
 801716e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017172:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8017176:	d026      	beq.n	80171c6 <__ssputs_r+0x6c>
 8017178:	6965      	ldr	r5, [r4, #20]
 801717a:	6909      	ldr	r1, [r1, #16]
 801717c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017180:	eba3 0901 	sub.w	r9, r3, r1
 8017184:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017188:	1c7b      	adds	r3, r7, #1
 801718a:	444b      	add	r3, r9
 801718c:	106d      	asrs	r5, r5, #1
 801718e:	429d      	cmp	r5, r3
 8017190:	bf38      	it	cc
 8017192:	461d      	movcc	r5, r3
 8017194:	0553      	lsls	r3, r2, #21
 8017196:	d527      	bpl.n	80171e8 <__ssputs_r+0x8e>
 8017198:	4629      	mov	r1, r5
 801719a:	f7ff fa89 	bl	80166b0 <_malloc_r>
 801719e:	4606      	mov	r6, r0
 80171a0:	b360      	cbz	r0, 80171fc <__ssputs_r+0xa2>
 80171a2:	6921      	ldr	r1, [r4, #16]
 80171a4:	464a      	mov	r2, r9
 80171a6:	f7fe fea0 	bl	8015eea <memcpy>
 80171aa:	89a3      	ldrh	r3, [r4, #12]
 80171ac:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80171b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80171b4:	81a3      	strh	r3, [r4, #12]
 80171b6:	6126      	str	r6, [r4, #16]
 80171b8:	6165      	str	r5, [r4, #20]
 80171ba:	444e      	add	r6, r9
 80171bc:	eba5 0509 	sub.w	r5, r5, r9
 80171c0:	6026      	str	r6, [r4, #0]
 80171c2:	60a5      	str	r5, [r4, #8]
 80171c4:	463e      	mov	r6, r7
 80171c6:	42be      	cmp	r6, r7
 80171c8:	d900      	bls.n	80171cc <__ssputs_r+0x72>
 80171ca:	463e      	mov	r6, r7
 80171cc:	6820      	ldr	r0, [r4, #0]
 80171ce:	4632      	mov	r2, r6
 80171d0:	4641      	mov	r1, r8
 80171d2:	f7fe fdba 	bl	8015d4a <memmove>
 80171d6:	68a3      	ldr	r3, [r4, #8]
 80171d8:	1b9b      	subs	r3, r3, r6
 80171da:	60a3      	str	r3, [r4, #8]
 80171dc:	6823      	ldr	r3, [r4, #0]
 80171de:	4433      	add	r3, r6
 80171e0:	6023      	str	r3, [r4, #0]
 80171e2:	2000      	movs	r0, #0
 80171e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80171e8:	462a      	mov	r2, r5
 80171ea:	f000 fd58 	bl	8017c9e <_realloc_r>
 80171ee:	4606      	mov	r6, r0
 80171f0:	2800      	cmp	r0, #0
 80171f2:	d1e0      	bne.n	80171b6 <__ssputs_r+0x5c>
 80171f4:	6921      	ldr	r1, [r4, #16]
 80171f6:	4650      	mov	r0, sl
 80171f8:	f7fe feac 	bl	8015f54 <_free_r>
 80171fc:	230c      	movs	r3, #12
 80171fe:	f8ca 3000 	str.w	r3, [sl]
 8017202:	89a3      	ldrh	r3, [r4, #12]
 8017204:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017208:	81a3      	strh	r3, [r4, #12]
 801720a:	f04f 30ff 	mov.w	r0, #4294967295
 801720e:	e7e9      	b.n	80171e4 <__ssputs_r+0x8a>

08017210 <_svfiprintf_r>:
 8017210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017214:	4698      	mov	r8, r3
 8017216:	898b      	ldrh	r3, [r1, #12]
 8017218:	061b      	lsls	r3, r3, #24
 801721a:	b09d      	sub	sp, #116	@ 0x74
 801721c:	4607      	mov	r7, r0
 801721e:	460d      	mov	r5, r1
 8017220:	4614      	mov	r4, r2
 8017222:	d510      	bpl.n	8017246 <_svfiprintf_r+0x36>
 8017224:	690b      	ldr	r3, [r1, #16]
 8017226:	b973      	cbnz	r3, 8017246 <_svfiprintf_r+0x36>
 8017228:	2140      	movs	r1, #64	@ 0x40
 801722a:	f7ff fa41 	bl	80166b0 <_malloc_r>
 801722e:	6028      	str	r0, [r5, #0]
 8017230:	6128      	str	r0, [r5, #16]
 8017232:	b930      	cbnz	r0, 8017242 <_svfiprintf_r+0x32>
 8017234:	230c      	movs	r3, #12
 8017236:	603b      	str	r3, [r7, #0]
 8017238:	f04f 30ff 	mov.w	r0, #4294967295
 801723c:	b01d      	add	sp, #116	@ 0x74
 801723e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017242:	2340      	movs	r3, #64	@ 0x40
 8017244:	616b      	str	r3, [r5, #20]
 8017246:	2300      	movs	r3, #0
 8017248:	9309      	str	r3, [sp, #36]	@ 0x24
 801724a:	2320      	movs	r3, #32
 801724c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017250:	f8cd 800c 	str.w	r8, [sp, #12]
 8017254:	2330      	movs	r3, #48	@ 0x30
 8017256:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80173f4 <_svfiprintf_r+0x1e4>
 801725a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801725e:	f04f 0901 	mov.w	r9, #1
 8017262:	4623      	mov	r3, r4
 8017264:	469a      	mov	sl, r3
 8017266:	f813 2b01 	ldrb.w	r2, [r3], #1
 801726a:	b10a      	cbz	r2, 8017270 <_svfiprintf_r+0x60>
 801726c:	2a25      	cmp	r2, #37	@ 0x25
 801726e:	d1f9      	bne.n	8017264 <_svfiprintf_r+0x54>
 8017270:	ebba 0b04 	subs.w	fp, sl, r4
 8017274:	d00b      	beq.n	801728e <_svfiprintf_r+0x7e>
 8017276:	465b      	mov	r3, fp
 8017278:	4622      	mov	r2, r4
 801727a:	4629      	mov	r1, r5
 801727c:	4638      	mov	r0, r7
 801727e:	f7ff ff6c 	bl	801715a <__ssputs_r>
 8017282:	3001      	adds	r0, #1
 8017284:	f000 80a7 	beq.w	80173d6 <_svfiprintf_r+0x1c6>
 8017288:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801728a:	445a      	add	r2, fp
 801728c:	9209      	str	r2, [sp, #36]	@ 0x24
 801728e:	f89a 3000 	ldrb.w	r3, [sl]
 8017292:	2b00      	cmp	r3, #0
 8017294:	f000 809f 	beq.w	80173d6 <_svfiprintf_r+0x1c6>
 8017298:	2300      	movs	r3, #0
 801729a:	f04f 32ff 	mov.w	r2, #4294967295
 801729e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80172a2:	f10a 0a01 	add.w	sl, sl, #1
 80172a6:	9304      	str	r3, [sp, #16]
 80172a8:	9307      	str	r3, [sp, #28]
 80172aa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80172ae:	931a      	str	r3, [sp, #104]	@ 0x68
 80172b0:	4654      	mov	r4, sl
 80172b2:	2205      	movs	r2, #5
 80172b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80172b8:	484e      	ldr	r0, [pc, #312]	@ (80173f4 <_svfiprintf_r+0x1e4>)
 80172ba:	f7e8 ff91 	bl	80001e0 <memchr>
 80172be:	9a04      	ldr	r2, [sp, #16]
 80172c0:	b9d8      	cbnz	r0, 80172fa <_svfiprintf_r+0xea>
 80172c2:	06d0      	lsls	r0, r2, #27
 80172c4:	bf44      	itt	mi
 80172c6:	2320      	movmi	r3, #32
 80172c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80172cc:	0711      	lsls	r1, r2, #28
 80172ce:	bf44      	itt	mi
 80172d0:	232b      	movmi	r3, #43	@ 0x2b
 80172d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80172d6:	f89a 3000 	ldrb.w	r3, [sl]
 80172da:	2b2a      	cmp	r3, #42	@ 0x2a
 80172dc:	d015      	beq.n	801730a <_svfiprintf_r+0xfa>
 80172de:	9a07      	ldr	r2, [sp, #28]
 80172e0:	4654      	mov	r4, sl
 80172e2:	2000      	movs	r0, #0
 80172e4:	f04f 0c0a 	mov.w	ip, #10
 80172e8:	4621      	mov	r1, r4
 80172ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80172ee:	3b30      	subs	r3, #48	@ 0x30
 80172f0:	2b09      	cmp	r3, #9
 80172f2:	d94b      	bls.n	801738c <_svfiprintf_r+0x17c>
 80172f4:	b1b0      	cbz	r0, 8017324 <_svfiprintf_r+0x114>
 80172f6:	9207      	str	r2, [sp, #28]
 80172f8:	e014      	b.n	8017324 <_svfiprintf_r+0x114>
 80172fa:	eba0 0308 	sub.w	r3, r0, r8
 80172fe:	fa09 f303 	lsl.w	r3, r9, r3
 8017302:	4313      	orrs	r3, r2
 8017304:	9304      	str	r3, [sp, #16]
 8017306:	46a2      	mov	sl, r4
 8017308:	e7d2      	b.n	80172b0 <_svfiprintf_r+0xa0>
 801730a:	9b03      	ldr	r3, [sp, #12]
 801730c:	1d19      	adds	r1, r3, #4
 801730e:	681b      	ldr	r3, [r3, #0]
 8017310:	9103      	str	r1, [sp, #12]
 8017312:	2b00      	cmp	r3, #0
 8017314:	bfbb      	ittet	lt
 8017316:	425b      	neglt	r3, r3
 8017318:	f042 0202 	orrlt.w	r2, r2, #2
 801731c:	9307      	strge	r3, [sp, #28]
 801731e:	9307      	strlt	r3, [sp, #28]
 8017320:	bfb8      	it	lt
 8017322:	9204      	strlt	r2, [sp, #16]
 8017324:	7823      	ldrb	r3, [r4, #0]
 8017326:	2b2e      	cmp	r3, #46	@ 0x2e
 8017328:	d10a      	bne.n	8017340 <_svfiprintf_r+0x130>
 801732a:	7863      	ldrb	r3, [r4, #1]
 801732c:	2b2a      	cmp	r3, #42	@ 0x2a
 801732e:	d132      	bne.n	8017396 <_svfiprintf_r+0x186>
 8017330:	9b03      	ldr	r3, [sp, #12]
 8017332:	1d1a      	adds	r2, r3, #4
 8017334:	681b      	ldr	r3, [r3, #0]
 8017336:	9203      	str	r2, [sp, #12]
 8017338:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801733c:	3402      	adds	r4, #2
 801733e:	9305      	str	r3, [sp, #20]
 8017340:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8017404 <_svfiprintf_r+0x1f4>
 8017344:	7821      	ldrb	r1, [r4, #0]
 8017346:	2203      	movs	r2, #3
 8017348:	4650      	mov	r0, sl
 801734a:	f7e8 ff49 	bl	80001e0 <memchr>
 801734e:	b138      	cbz	r0, 8017360 <_svfiprintf_r+0x150>
 8017350:	9b04      	ldr	r3, [sp, #16]
 8017352:	eba0 000a 	sub.w	r0, r0, sl
 8017356:	2240      	movs	r2, #64	@ 0x40
 8017358:	4082      	lsls	r2, r0
 801735a:	4313      	orrs	r3, r2
 801735c:	3401      	adds	r4, #1
 801735e:	9304      	str	r3, [sp, #16]
 8017360:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017364:	4824      	ldr	r0, [pc, #144]	@ (80173f8 <_svfiprintf_r+0x1e8>)
 8017366:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801736a:	2206      	movs	r2, #6
 801736c:	f7e8 ff38 	bl	80001e0 <memchr>
 8017370:	2800      	cmp	r0, #0
 8017372:	d036      	beq.n	80173e2 <_svfiprintf_r+0x1d2>
 8017374:	4b21      	ldr	r3, [pc, #132]	@ (80173fc <_svfiprintf_r+0x1ec>)
 8017376:	bb1b      	cbnz	r3, 80173c0 <_svfiprintf_r+0x1b0>
 8017378:	9b03      	ldr	r3, [sp, #12]
 801737a:	3307      	adds	r3, #7
 801737c:	f023 0307 	bic.w	r3, r3, #7
 8017380:	3308      	adds	r3, #8
 8017382:	9303      	str	r3, [sp, #12]
 8017384:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017386:	4433      	add	r3, r6
 8017388:	9309      	str	r3, [sp, #36]	@ 0x24
 801738a:	e76a      	b.n	8017262 <_svfiprintf_r+0x52>
 801738c:	fb0c 3202 	mla	r2, ip, r2, r3
 8017390:	460c      	mov	r4, r1
 8017392:	2001      	movs	r0, #1
 8017394:	e7a8      	b.n	80172e8 <_svfiprintf_r+0xd8>
 8017396:	2300      	movs	r3, #0
 8017398:	3401      	adds	r4, #1
 801739a:	9305      	str	r3, [sp, #20]
 801739c:	4619      	mov	r1, r3
 801739e:	f04f 0c0a 	mov.w	ip, #10
 80173a2:	4620      	mov	r0, r4
 80173a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80173a8:	3a30      	subs	r2, #48	@ 0x30
 80173aa:	2a09      	cmp	r2, #9
 80173ac:	d903      	bls.n	80173b6 <_svfiprintf_r+0x1a6>
 80173ae:	2b00      	cmp	r3, #0
 80173b0:	d0c6      	beq.n	8017340 <_svfiprintf_r+0x130>
 80173b2:	9105      	str	r1, [sp, #20]
 80173b4:	e7c4      	b.n	8017340 <_svfiprintf_r+0x130>
 80173b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80173ba:	4604      	mov	r4, r0
 80173bc:	2301      	movs	r3, #1
 80173be:	e7f0      	b.n	80173a2 <_svfiprintf_r+0x192>
 80173c0:	ab03      	add	r3, sp, #12
 80173c2:	9300      	str	r3, [sp, #0]
 80173c4:	462a      	mov	r2, r5
 80173c6:	4b0e      	ldr	r3, [pc, #56]	@ (8017400 <_svfiprintf_r+0x1f0>)
 80173c8:	a904      	add	r1, sp, #16
 80173ca:	4638      	mov	r0, r7
 80173cc:	f3af 8000 	nop.w
 80173d0:	1c42      	adds	r2, r0, #1
 80173d2:	4606      	mov	r6, r0
 80173d4:	d1d6      	bne.n	8017384 <_svfiprintf_r+0x174>
 80173d6:	89ab      	ldrh	r3, [r5, #12]
 80173d8:	065b      	lsls	r3, r3, #25
 80173da:	f53f af2d 	bmi.w	8017238 <_svfiprintf_r+0x28>
 80173de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80173e0:	e72c      	b.n	801723c <_svfiprintf_r+0x2c>
 80173e2:	ab03      	add	r3, sp, #12
 80173e4:	9300      	str	r3, [sp, #0]
 80173e6:	462a      	mov	r2, r5
 80173e8:	4b05      	ldr	r3, [pc, #20]	@ (8017400 <_svfiprintf_r+0x1f0>)
 80173ea:	a904      	add	r1, sp, #16
 80173ec:	4638      	mov	r0, r7
 80173ee:	f000 f9bb 	bl	8017768 <_printf_i>
 80173f2:	e7ed      	b.n	80173d0 <_svfiprintf_r+0x1c0>
 80173f4:	08020e55 	.word	0x08020e55
 80173f8:	08020e5f 	.word	0x08020e5f
 80173fc:	00000000 	.word	0x00000000
 8017400:	0801715b 	.word	0x0801715b
 8017404:	08020e5b 	.word	0x08020e5b

08017408 <__sfputc_r>:
 8017408:	6893      	ldr	r3, [r2, #8]
 801740a:	3b01      	subs	r3, #1
 801740c:	2b00      	cmp	r3, #0
 801740e:	b410      	push	{r4}
 8017410:	6093      	str	r3, [r2, #8]
 8017412:	da08      	bge.n	8017426 <__sfputc_r+0x1e>
 8017414:	6994      	ldr	r4, [r2, #24]
 8017416:	42a3      	cmp	r3, r4
 8017418:	db01      	blt.n	801741e <__sfputc_r+0x16>
 801741a:	290a      	cmp	r1, #10
 801741c:	d103      	bne.n	8017426 <__sfputc_r+0x1e>
 801741e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017422:	f000 bb7d 	b.w	8017b20 <__swbuf_r>
 8017426:	6813      	ldr	r3, [r2, #0]
 8017428:	1c58      	adds	r0, r3, #1
 801742a:	6010      	str	r0, [r2, #0]
 801742c:	7019      	strb	r1, [r3, #0]
 801742e:	4608      	mov	r0, r1
 8017430:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017434:	4770      	bx	lr

08017436 <__sfputs_r>:
 8017436:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017438:	4606      	mov	r6, r0
 801743a:	460f      	mov	r7, r1
 801743c:	4614      	mov	r4, r2
 801743e:	18d5      	adds	r5, r2, r3
 8017440:	42ac      	cmp	r4, r5
 8017442:	d101      	bne.n	8017448 <__sfputs_r+0x12>
 8017444:	2000      	movs	r0, #0
 8017446:	e007      	b.n	8017458 <__sfputs_r+0x22>
 8017448:	f814 1b01 	ldrb.w	r1, [r4], #1
 801744c:	463a      	mov	r2, r7
 801744e:	4630      	mov	r0, r6
 8017450:	f7ff ffda 	bl	8017408 <__sfputc_r>
 8017454:	1c43      	adds	r3, r0, #1
 8017456:	d1f3      	bne.n	8017440 <__sfputs_r+0xa>
 8017458:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801745c <_vfiprintf_r>:
 801745c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017460:	460d      	mov	r5, r1
 8017462:	b09d      	sub	sp, #116	@ 0x74
 8017464:	4614      	mov	r4, r2
 8017466:	4698      	mov	r8, r3
 8017468:	4606      	mov	r6, r0
 801746a:	b118      	cbz	r0, 8017474 <_vfiprintf_r+0x18>
 801746c:	6a03      	ldr	r3, [r0, #32]
 801746e:	b90b      	cbnz	r3, 8017474 <_vfiprintf_r+0x18>
 8017470:	f7fe fbae 	bl	8015bd0 <__sinit>
 8017474:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017476:	07d9      	lsls	r1, r3, #31
 8017478:	d405      	bmi.n	8017486 <_vfiprintf_r+0x2a>
 801747a:	89ab      	ldrh	r3, [r5, #12]
 801747c:	059a      	lsls	r2, r3, #22
 801747e:	d402      	bmi.n	8017486 <_vfiprintf_r+0x2a>
 8017480:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017482:	f7fe fd28 	bl	8015ed6 <__retarget_lock_acquire_recursive>
 8017486:	89ab      	ldrh	r3, [r5, #12]
 8017488:	071b      	lsls	r3, r3, #28
 801748a:	d501      	bpl.n	8017490 <_vfiprintf_r+0x34>
 801748c:	692b      	ldr	r3, [r5, #16]
 801748e:	b99b      	cbnz	r3, 80174b8 <_vfiprintf_r+0x5c>
 8017490:	4629      	mov	r1, r5
 8017492:	4630      	mov	r0, r6
 8017494:	f000 fb82 	bl	8017b9c <__swsetup_r>
 8017498:	b170      	cbz	r0, 80174b8 <_vfiprintf_r+0x5c>
 801749a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801749c:	07dc      	lsls	r4, r3, #31
 801749e:	d504      	bpl.n	80174aa <_vfiprintf_r+0x4e>
 80174a0:	f04f 30ff 	mov.w	r0, #4294967295
 80174a4:	b01d      	add	sp, #116	@ 0x74
 80174a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80174aa:	89ab      	ldrh	r3, [r5, #12]
 80174ac:	0598      	lsls	r0, r3, #22
 80174ae:	d4f7      	bmi.n	80174a0 <_vfiprintf_r+0x44>
 80174b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80174b2:	f7fe fd11 	bl	8015ed8 <__retarget_lock_release_recursive>
 80174b6:	e7f3      	b.n	80174a0 <_vfiprintf_r+0x44>
 80174b8:	2300      	movs	r3, #0
 80174ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80174bc:	2320      	movs	r3, #32
 80174be:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80174c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80174c6:	2330      	movs	r3, #48	@ 0x30
 80174c8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8017678 <_vfiprintf_r+0x21c>
 80174cc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80174d0:	f04f 0901 	mov.w	r9, #1
 80174d4:	4623      	mov	r3, r4
 80174d6:	469a      	mov	sl, r3
 80174d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80174dc:	b10a      	cbz	r2, 80174e2 <_vfiprintf_r+0x86>
 80174de:	2a25      	cmp	r2, #37	@ 0x25
 80174e0:	d1f9      	bne.n	80174d6 <_vfiprintf_r+0x7a>
 80174e2:	ebba 0b04 	subs.w	fp, sl, r4
 80174e6:	d00b      	beq.n	8017500 <_vfiprintf_r+0xa4>
 80174e8:	465b      	mov	r3, fp
 80174ea:	4622      	mov	r2, r4
 80174ec:	4629      	mov	r1, r5
 80174ee:	4630      	mov	r0, r6
 80174f0:	f7ff ffa1 	bl	8017436 <__sfputs_r>
 80174f4:	3001      	adds	r0, #1
 80174f6:	f000 80a7 	beq.w	8017648 <_vfiprintf_r+0x1ec>
 80174fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80174fc:	445a      	add	r2, fp
 80174fe:	9209      	str	r2, [sp, #36]	@ 0x24
 8017500:	f89a 3000 	ldrb.w	r3, [sl]
 8017504:	2b00      	cmp	r3, #0
 8017506:	f000 809f 	beq.w	8017648 <_vfiprintf_r+0x1ec>
 801750a:	2300      	movs	r3, #0
 801750c:	f04f 32ff 	mov.w	r2, #4294967295
 8017510:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017514:	f10a 0a01 	add.w	sl, sl, #1
 8017518:	9304      	str	r3, [sp, #16]
 801751a:	9307      	str	r3, [sp, #28]
 801751c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017520:	931a      	str	r3, [sp, #104]	@ 0x68
 8017522:	4654      	mov	r4, sl
 8017524:	2205      	movs	r2, #5
 8017526:	f814 1b01 	ldrb.w	r1, [r4], #1
 801752a:	4853      	ldr	r0, [pc, #332]	@ (8017678 <_vfiprintf_r+0x21c>)
 801752c:	f7e8 fe58 	bl	80001e0 <memchr>
 8017530:	9a04      	ldr	r2, [sp, #16]
 8017532:	b9d8      	cbnz	r0, 801756c <_vfiprintf_r+0x110>
 8017534:	06d1      	lsls	r1, r2, #27
 8017536:	bf44      	itt	mi
 8017538:	2320      	movmi	r3, #32
 801753a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801753e:	0713      	lsls	r3, r2, #28
 8017540:	bf44      	itt	mi
 8017542:	232b      	movmi	r3, #43	@ 0x2b
 8017544:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017548:	f89a 3000 	ldrb.w	r3, [sl]
 801754c:	2b2a      	cmp	r3, #42	@ 0x2a
 801754e:	d015      	beq.n	801757c <_vfiprintf_r+0x120>
 8017550:	9a07      	ldr	r2, [sp, #28]
 8017552:	4654      	mov	r4, sl
 8017554:	2000      	movs	r0, #0
 8017556:	f04f 0c0a 	mov.w	ip, #10
 801755a:	4621      	mov	r1, r4
 801755c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017560:	3b30      	subs	r3, #48	@ 0x30
 8017562:	2b09      	cmp	r3, #9
 8017564:	d94b      	bls.n	80175fe <_vfiprintf_r+0x1a2>
 8017566:	b1b0      	cbz	r0, 8017596 <_vfiprintf_r+0x13a>
 8017568:	9207      	str	r2, [sp, #28]
 801756a:	e014      	b.n	8017596 <_vfiprintf_r+0x13a>
 801756c:	eba0 0308 	sub.w	r3, r0, r8
 8017570:	fa09 f303 	lsl.w	r3, r9, r3
 8017574:	4313      	orrs	r3, r2
 8017576:	9304      	str	r3, [sp, #16]
 8017578:	46a2      	mov	sl, r4
 801757a:	e7d2      	b.n	8017522 <_vfiprintf_r+0xc6>
 801757c:	9b03      	ldr	r3, [sp, #12]
 801757e:	1d19      	adds	r1, r3, #4
 8017580:	681b      	ldr	r3, [r3, #0]
 8017582:	9103      	str	r1, [sp, #12]
 8017584:	2b00      	cmp	r3, #0
 8017586:	bfbb      	ittet	lt
 8017588:	425b      	neglt	r3, r3
 801758a:	f042 0202 	orrlt.w	r2, r2, #2
 801758e:	9307      	strge	r3, [sp, #28]
 8017590:	9307      	strlt	r3, [sp, #28]
 8017592:	bfb8      	it	lt
 8017594:	9204      	strlt	r2, [sp, #16]
 8017596:	7823      	ldrb	r3, [r4, #0]
 8017598:	2b2e      	cmp	r3, #46	@ 0x2e
 801759a:	d10a      	bne.n	80175b2 <_vfiprintf_r+0x156>
 801759c:	7863      	ldrb	r3, [r4, #1]
 801759e:	2b2a      	cmp	r3, #42	@ 0x2a
 80175a0:	d132      	bne.n	8017608 <_vfiprintf_r+0x1ac>
 80175a2:	9b03      	ldr	r3, [sp, #12]
 80175a4:	1d1a      	adds	r2, r3, #4
 80175a6:	681b      	ldr	r3, [r3, #0]
 80175a8:	9203      	str	r2, [sp, #12]
 80175aa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80175ae:	3402      	adds	r4, #2
 80175b0:	9305      	str	r3, [sp, #20]
 80175b2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8017688 <_vfiprintf_r+0x22c>
 80175b6:	7821      	ldrb	r1, [r4, #0]
 80175b8:	2203      	movs	r2, #3
 80175ba:	4650      	mov	r0, sl
 80175bc:	f7e8 fe10 	bl	80001e0 <memchr>
 80175c0:	b138      	cbz	r0, 80175d2 <_vfiprintf_r+0x176>
 80175c2:	9b04      	ldr	r3, [sp, #16]
 80175c4:	eba0 000a 	sub.w	r0, r0, sl
 80175c8:	2240      	movs	r2, #64	@ 0x40
 80175ca:	4082      	lsls	r2, r0
 80175cc:	4313      	orrs	r3, r2
 80175ce:	3401      	adds	r4, #1
 80175d0:	9304      	str	r3, [sp, #16]
 80175d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80175d6:	4829      	ldr	r0, [pc, #164]	@ (801767c <_vfiprintf_r+0x220>)
 80175d8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80175dc:	2206      	movs	r2, #6
 80175de:	f7e8 fdff 	bl	80001e0 <memchr>
 80175e2:	2800      	cmp	r0, #0
 80175e4:	d03f      	beq.n	8017666 <_vfiprintf_r+0x20a>
 80175e6:	4b26      	ldr	r3, [pc, #152]	@ (8017680 <_vfiprintf_r+0x224>)
 80175e8:	bb1b      	cbnz	r3, 8017632 <_vfiprintf_r+0x1d6>
 80175ea:	9b03      	ldr	r3, [sp, #12]
 80175ec:	3307      	adds	r3, #7
 80175ee:	f023 0307 	bic.w	r3, r3, #7
 80175f2:	3308      	adds	r3, #8
 80175f4:	9303      	str	r3, [sp, #12]
 80175f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80175f8:	443b      	add	r3, r7
 80175fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80175fc:	e76a      	b.n	80174d4 <_vfiprintf_r+0x78>
 80175fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8017602:	460c      	mov	r4, r1
 8017604:	2001      	movs	r0, #1
 8017606:	e7a8      	b.n	801755a <_vfiprintf_r+0xfe>
 8017608:	2300      	movs	r3, #0
 801760a:	3401      	adds	r4, #1
 801760c:	9305      	str	r3, [sp, #20]
 801760e:	4619      	mov	r1, r3
 8017610:	f04f 0c0a 	mov.w	ip, #10
 8017614:	4620      	mov	r0, r4
 8017616:	f810 2b01 	ldrb.w	r2, [r0], #1
 801761a:	3a30      	subs	r2, #48	@ 0x30
 801761c:	2a09      	cmp	r2, #9
 801761e:	d903      	bls.n	8017628 <_vfiprintf_r+0x1cc>
 8017620:	2b00      	cmp	r3, #0
 8017622:	d0c6      	beq.n	80175b2 <_vfiprintf_r+0x156>
 8017624:	9105      	str	r1, [sp, #20]
 8017626:	e7c4      	b.n	80175b2 <_vfiprintf_r+0x156>
 8017628:	fb0c 2101 	mla	r1, ip, r1, r2
 801762c:	4604      	mov	r4, r0
 801762e:	2301      	movs	r3, #1
 8017630:	e7f0      	b.n	8017614 <_vfiprintf_r+0x1b8>
 8017632:	ab03      	add	r3, sp, #12
 8017634:	9300      	str	r3, [sp, #0]
 8017636:	462a      	mov	r2, r5
 8017638:	4b12      	ldr	r3, [pc, #72]	@ (8017684 <_vfiprintf_r+0x228>)
 801763a:	a904      	add	r1, sp, #16
 801763c:	4630      	mov	r0, r6
 801763e:	f3af 8000 	nop.w
 8017642:	4607      	mov	r7, r0
 8017644:	1c78      	adds	r0, r7, #1
 8017646:	d1d6      	bne.n	80175f6 <_vfiprintf_r+0x19a>
 8017648:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801764a:	07d9      	lsls	r1, r3, #31
 801764c:	d405      	bmi.n	801765a <_vfiprintf_r+0x1fe>
 801764e:	89ab      	ldrh	r3, [r5, #12]
 8017650:	059a      	lsls	r2, r3, #22
 8017652:	d402      	bmi.n	801765a <_vfiprintf_r+0x1fe>
 8017654:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017656:	f7fe fc3f 	bl	8015ed8 <__retarget_lock_release_recursive>
 801765a:	89ab      	ldrh	r3, [r5, #12]
 801765c:	065b      	lsls	r3, r3, #25
 801765e:	f53f af1f 	bmi.w	80174a0 <_vfiprintf_r+0x44>
 8017662:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017664:	e71e      	b.n	80174a4 <_vfiprintf_r+0x48>
 8017666:	ab03      	add	r3, sp, #12
 8017668:	9300      	str	r3, [sp, #0]
 801766a:	462a      	mov	r2, r5
 801766c:	4b05      	ldr	r3, [pc, #20]	@ (8017684 <_vfiprintf_r+0x228>)
 801766e:	a904      	add	r1, sp, #16
 8017670:	4630      	mov	r0, r6
 8017672:	f000 f879 	bl	8017768 <_printf_i>
 8017676:	e7e4      	b.n	8017642 <_vfiprintf_r+0x1e6>
 8017678:	08020e55 	.word	0x08020e55
 801767c:	08020e5f 	.word	0x08020e5f
 8017680:	00000000 	.word	0x00000000
 8017684:	08017437 	.word	0x08017437
 8017688:	08020e5b 	.word	0x08020e5b

0801768c <_printf_common>:
 801768c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017690:	4616      	mov	r6, r2
 8017692:	4698      	mov	r8, r3
 8017694:	688a      	ldr	r2, [r1, #8]
 8017696:	690b      	ldr	r3, [r1, #16]
 8017698:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801769c:	4293      	cmp	r3, r2
 801769e:	bfb8      	it	lt
 80176a0:	4613      	movlt	r3, r2
 80176a2:	6033      	str	r3, [r6, #0]
 80176a4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80176a8:	4607      	mov	r7, r0
 80176aa:	460c      	mov	r4, r1
 80176ac:	b10a      	cbz	r2, 80176b2 <_printf_common+0x26>
 80176ae:	3301      	adds	r3, #1
 80176b0:	6033      	str	r3, [r6, #0]
 80176b2:	6823      	ldr	r3, [r4, #0]
 80176b4:	0699      	lsls	r1, r3, #26
 80176b6:	bf42      	ittt	mi
 80176b8:	6833      	ldrmi	r3, [r6, #0]
 80176ba:	3302      	addmi	r3, #2
 80176bc:	6033      	strmi	r3, [r6, #0]
 80176be:	6825      	ldr	r5, [r4, #0]
 80176c0:	f015 0506 	ands.w	r5, r5, #6
 80176c4:	d106      	bne.n	80176d4 <_printf_common+0x48>
 80176c6:	f104 0a19 	add.w	sl, r4, #25
 80176ca:	68e3      	ldr	r3, [r4, #12]
 80176cc:	6832      	ldr	r2, [r6, #0]
 80176ce:	1a9b      	subs	r3, r3, r2
 80176d0:	42ab      	cmp	r3, r5
 80176d2:	dc26      	bgt.n	8017722 <_printf_common+0x96>
 80176d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80176d8:	6822      	ldr	r2, [r4, #0]
 80176da:	3b00      	subs	r3, #0
 80176dc:	bf18      	it	ne
 80176de:	2301      	movne	r3, #1
 80176e0:	0692      	lsls	r2, r2, #26
 80176e2:	d42b      	bmi.n	801773c <_printf_common+0xb0>
 80176e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80176e8:	4641      	mov	r1, r8
 80176ea:	4638      	mov	r0, r7
 80176ec:	47c8      	blx	r9
 80176ee:	3001      	adds	r0, #1
 80176f0:	d01e      	beq.n	8017730 <_printf_common+0xa4>
 80176f2:	6823      	ldr	r3, [r4, #0]
 80176f4:	6922      	ldr	r2, [r4, #16]
 80176f6:	f003 0306 	and.w	r3, r3, #6
 80176fa:	2b04      	cmp	r3, #4
 80176fc:	bf02      	ittt	eq
 80176fe:	68e5      	ldreq	r5, [r4, #12]
 8017700:	6833      	ldreq	r3, [r6, #0]
 8017702:	1aed      	subeq	r5, r5, r3
 8017704:	68a3      	ldr	r3, [r4, #8]
 8017706:	bf0c      	ite	eq
 8017708:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801770c:	2500      	movne	r5, #0
 801770e:	4293      	cmp	r3, r2
 8017710:	bfc4      	itt	gt
 8017712:	1a9b      	subgt	r3, r3, r2
 8017714:	18ed      	addgt	r5, r5, r3
 8017716:	2600      	movs	r6, #0
 8017718:	341a      	adds	r4, #26
 801771a:	42b5      	cmp	r5, r6
 801771c:	d11a      	bne.n	8017754 <_printf_common+0xc8>
 801771e:	2000      	movs	r0, #0
 8017720:	e008      	b.n	8017734 <_printf_common+0xa8>
 8017722:	2301      	movs	r3, #1
 8017724:	4652      	mov	r2, sl
 8017726:	4641      	mov	r1, r8
 8017728:	4638      	mov	r0, r7
 801772a:	47c8      	blx	r9
 801772c:	3001      	adds	r0, #1
 801772e:	d103      	bne.n	8017738 <_printf_common+0xac>
 8017730:	f04f 30ff 	mov.w	r0, #4294967295
 8017734:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017738:	3501      	adds	r5, #1
 801773a:	e7c6      	b.n	80176ca <_printf_common+0x3e>
 801773c:	18e1      	adds	r1, r4, r3
 801773e:	1c5a      	adds	r2, r3, #1
 8017740:	2030      	movs	r0, #48	@ 0x30
 8017742:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8017746:	4422      	add	r2, r4
 8017748:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801774c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8017750:	3302      	adds	r3, #2
 8017752:	e7c7      	b.n	80176e4 <_printf_common+0x58>
 8017754:	2301      	movs	r3, #1
 8017756:	4622      	mov	r2, r4
 8017758:	4641      	mov	r1, r8
 801775a:	4638      	mov	r0, r7
 801775c:	47c8      	blx	r9
 801775e:	3001      	adds	r0, #1
 8017760:	d0e6      	beq.n	8017730 <_printf_common+0xa4>
 8017762:	3601      	adds	r6, #1
 8017764:	e7d9      	b.n	801771a <_printf_common+0x8e>
	...

08017768 <_printf_i>:
 8017768:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801776c:	7e0f      	ldrb	r7, [r1, #24]
 801776e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8017770:	2f78      	cmp	r7, #120	@ 0x78
 8017772:	4691      	mov	r9, r2
 8017774:	4680      	mov	r8, r0
 8017776:	460c      	mov	r4, r1
 8017778:	469a      	mov	sl, r3
 801777a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801777e:	d807      	bhi.n	8017790 <_printf_i+0x28>
 8017780:	2f62      	cmp	r7, #98	@ 0x62
 8017782:	d80a      	bhi.n	801779a <_printf_i+0x32>
 8017784:	2f00      	cmp	r7, #0
 8017786:	f000 80d1 	beq.w	801792c <_printf_i+0x1c4>
 801778a:	2f58      	cmp	r7, #88	@ 0x58
 801778c:	f000 80b8 	beq.w	8017900 <_printf_i+0x198>
 8017790:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017794:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8017798:	e03a      	b.n	8017810 <_printf_i+0xa8>
 801779a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801779e:	2b15      	cmp	r3, #21
 80177a0:	d8f6      	bhi.n	8017790 <_printf_i+0x28>
 80177a2:	a101      	add	r1, pc, #4	@ (adr r1, 80177a8 <_printf_i+0x40>)
 80177a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80177a8:	08017801 	.word	0x08017801
 80177ac:	08017815 	.word	0x08017815
 80177b0:	08017791 	.word	0x08017791
 80177b4:	08017791 	.word	0x08017791
 80177b8:	08017791 	.word	0x08017791
 80177bc:	08017791 	.word	0x08017791
 80177c0:	08017815 	.word	0x08017815
 80177c4:	08017791 	.word	0x08017791
 80177c8:	08017791 	.word	0x08017791
 80177cc:	08017791 	.word	0x08017791
 80177d0:	08017791 	.word	0x08017791
 80177d4:	08017913 	.word	0x08017913
 80177d8:	0801783f 	.word	0x0801783f
 80177dc:	080178cd 	.word	0x080178cd
 80177e0:	08017791 	.word	0x08017791
 80177e4:	08017791 	.word	0x08017791
 80177e8:	08017935 	.word	0x08017935
 80177ec:	08017791 	.word	0x08017791
 80177f0:	0801783f 	.word	0x0801783f
 80177f4:	08017791 	.word	0x08017791
 80177f8:	08017791 	.word	0x08017791
 80177fc:	080178d5 	.word	0x080178d5
 8017800:	6833      	ldr	r3, [r6, #0]
 8017802:	1d1a      	adds	r2, r3, #4
 8017804:	681b      	ldr	r3, [r3, #0]
 8017806:	6032      	str	r2, [r6, #0]
 8017808:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801780c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8017810:	2301      	movs	r3, #1
 8017812:	e09c      	b.n	801794e <_printf_i+0x1e6>
 8017814:	6833      	ldr	r3, [r6, #0]
 8017816:	6820      	ldr	r0, [r4, #0]
 8017818:	1d19      	adds	r1, r3, #4
 801781a:	6031      	str	r1, [r6, #0]
 801781c:	0606      	lsls	r6, r0, #24
 801781e:	d501      	bpl.n	8017824 <_printf_i+0xbc>
 8017820:	681d      	ldr	r5, [r3, #0]
 8017822:	e003      	b.n	801782c <_printf_i+0xc4>
 8017824:	0645      	lsls	r5, r0, #25
 8017826:	d5fb      	bpl.n	8017820 <_printf_i+0xb8>
 8017828:	f9b3 5000 	ldrsh.w	r5, [r3]
 801782c:	2d00      	cmp	r5, #0
 801782e:	da03      	bge.n	8017838 <_printf_i+0xd0>
 8017830:	232d      	movs	r3, #45	@ 0x2d
 8017832:	426d      	negs	r5, r5
 8017834:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017838:	4858      	ldr	r0, [pc, #352]	@ (801799c <_printf_i+0x234>)
 801783a:	230a      	movs	r3, #10
 801783c:	e011      	b.n	8017862 <_printf_i+0xfa>
 801783e:	6821      	ldr	r1, [r4, #0]
 8017840:	6833      	ldr	r3, [r6, #0]
 8017842:	0608      	lsls	r0, r1, #24
 8017844:	f853 5b04 	ldr.w	r5, [r3], #4
 8017848:	d402      	bmi.n	8017850 <_printf_i+0xe8>
 801784a:	0649      	lsls	r1, r1, #25
 801784c:	bf48      	it	mi
 801784e:	b2ad      	uxthmi	r5, r5
 8017850:	2f6f      	cmp	r7, #111	@ 0x6f
 8017852:	4852      	ldr	r0, [pc, #328]	@ (801799c <_printf_i+0x234>)
 8017854:	6033      	str	r3, [r6, #0]
 8017856:	bf14      	ite	ne
 8017858:	230a      	movne	r3, #10
 801785a:	2308      	moveq	r3, #8
 801785c:	2100      	movs	r1, #0
 801785e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8017862:	6866      	ldr	r6, [r4, #4]
 8017864:	60a6      	str	r6, [r4, #8]
 8017866:	2e00      	cmp	r6, #0
 8017868:	db05      	blt.n	8017876 <_printf_i+0x10e>
 801786a:	6821      	ldr	r1, [r4, #0]
 801786c:	432e      	orrs	r6, r5
 801786e:	f021 0104 	bic.w	r1, r1, #4
 8017872:	6021      	str	r1, [r4, #0]
 8017874:	d04b      	beq.n	801790e <_printf_i+0x1a6>
 8017876:	4616      	mov	r6, r2
 8017878:	fbb5 f1f3 	udiv	r1, r5, r3
 801787c:	fb03 5711 	mls	r7, r3, r1, r5
 8017880:	5dc7      	ldrb	r7, [r0, r7]
 8017882:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8017886:	462f      	mov	r7, r5
 8017888:	42bb      	cmp	r3, r7
 801788a:	460d      	mov	r5, r1
 801788c:	d9f4      	bls.n	8017878 <_printf_i+0x110>
 801788e:	2b08      	cmp	r3, #8
 8017890:	d10b      	bne.n	80178aa <_printf_i+0x142>
 8017892:	6823      	ldr	r3, [r4, #0]
 8017894:	07df      	lsls	r7, r3, #31
 8017896:	d508      	bpl.n	80178aa <_printf_i+0x142>
 8017898:	6923      	ldr	r3, [r4, #16]
 801789a:	6861      	ldr	r1, [r4, #4]
 801789c:	4299      	cmp	r1, r3
 801789e:	bfde      	ittt	le
 80178a0:	2330      	movle	r3, #48	@ 0x30
 80178a2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80178a6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80178aa:	1b92      	subs	r2, r2, r6
 80178ac:	6122      	str	r2, [r4, #16]
 80178ae:	f8cd a000 	str.w	sl, [sp]
 80178b2:	464b      	mov	r3, r9
 80178b4:	aa03      	add	r2, sp, #12
 80178b6:	4621      	mov	r1, r4
 80178b8:	4640      	mov	r0, r8
 80178ba:	f7ff fee7 	bl	801768c <_printf_common>
 80178be:	3001      	adds	r0, #1
 80178c0:	d14a      	bne.n	8017958 <_printf_i+0x1f0>
 80178c2:	f04f 30ff 	mov.w	r0, #4294967295
 80178c6:	b004      	add	sp, #16
 80178c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80178cc:	6823      	ldr	r3, [r4, #0]
 80178ce:	f043 0320 	orr.w	r3, r3, #32
 80178d2:	6023      	str	r3, [r4, #0]
 80178d4:	4832      	ldr	r0, [pc, #200]	@ (80179a0 <_printf_i+0x238>)
 80178d6:	2778      	movs	r7, #120	@ 0x78
 80178d8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80178dc:	6823      	ldr	r3, [r4, #0]
 80178de:	6831      	ldr	r1, [r6, #0]
 80178e0:	061f      	lsls	r7, r3, #24
 80178e2:	f851 5b04 	ldr.w	r5, [r1], #4
 80178e6:	d402      	bmi.n	80178ee <_printf_i+0x186>
 80178e8:	065f      	lsls	r7, r3, #25
 80178ea:	bf48      	it	mi
 80178ec:	b2ad      	uxthmi	r5, r5
 80178ee:	6031      	str	r1, [r6, #0]
 80178f0:	07d9      	lsls	r1, r3, #31
 80178f2:	bf44      	itt	mi
 80178f4:	f043 0320 	orrmi.w	r3, r3, #32
 80178f8:	6023      	strmi	r3, [r4, #0]
 80178fa:	b11d      	cbz	r5, 8017904 <_printf_i+0x19c>
 80178fc:	2310      	movs	r3, #16
 80178fe:	e7ad      	b.n	801785c <_printf_i+0xf4>
 8017900:	4826      	ldr	r0, [pc, #152]	@ (801799c <_printf_i+0x234>)
 8017902:	e7e9      	b.n	80178d8 <_printf_i+0x170>
 8017904:	6823      	ldr	r3, [r4, #0]
 8017906:	f023 0320 	bic.w	r3, r3, #32
 801790a:	6023      	str	r3, [r4, #0]
 801790c:	e7f6      	b.n	80178fc <_printf_i+0x194>
 801790e:	4616      	mov	r6, r2
 8017910:	e7bd      	b.n	801788e <_printf_i+0x126>
 8017912:	6833      	ldr	r3, [r6, #0]
 8017914:	6825      	ldr	r5, [r4, #0]
 8017916:	6961      	ldr	r1, [r4, #20]
 8017918:	1d18      	adds	r0, r3, #4
 801791a:	6030      	str	r0, [r6, #0]
 801791c:	062e      	lsls	r6, r5, #24
 801791e:	681b      	ldr	r3, [r3, #0]
 8017920:	d501      	bpl.n	8017926 <_printf_i+0x1be>
 8017922:	6019      	str	r1, [r3, #0]
 8017924:	e002      	b.n	801792c <_printf_i+0x1c4>
 8017926:	0668      	lsls	r0, r5, #25
 8017928:	d5fb      	bpl.n	8017922 <_printf_i+0x1ba>
 801792a:	8019      	strh	r1, [r3, #0]
 801792c:	2300      	movs	r3, #0
 801792e:	6123      	str	r3, [r4, #16]
 8017930:	4616      	mov	r6, r2
 8017932:	e7bc      	b.n	80178ae <_printf_i+0x146>
 8017934:	6833      	ldr	r3, [r6, #0]
 8017936:	1d1a      	adds	r2, r3, #4
 8017938:	6032      	str	r2, [r6, #0]
 801793a:	681e      	ldr	r6, [r3, #0]
 801793c:	6862      	ldr	r2, [r4, #4]
 801793e:	2100      	movs	r1, #0
 8017940:	4630      	mov	r0, r6
 8017942:	f7e8 fc4d 	bl	80001e0 <memchr>
 8017946:	b108      	cbz	r0, 801794c <_printf_i+0x1e4>
 8017948:	1b80      	subs	r0, r0, r6
 801794a:	6060      	str	r0, [r4, #4]
 801794c:	6863      	ldr	r3, [r4, #4]
 801794e:	6123      	str	r3, [r4, #16]
 8017950:	2300      	movs	r3, #0
 8017952:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017956:	e7aa      	b.n	80178ae <_printf_i+0x146>
 8017958:	6923      	ldr	r3, [r4, #16]
 801795a:	4632      	mov	r2, r6
 801795c:	4649      	mov	r1, r9
 801795e:	4640      	mov	r0, r8
 8017960:	47d0      	blx	sl
 8017962:	3001      	adds	r0, #1
 8017964:	d0ad      	beq.n	80178c2 <_printf_i+0x15a>
 8017966:	6823      	ldr	r3, [r4, #0]
 8017968:	079b      	lsls	r3, r3, #30
 801796a:	d413      	bmi.n	8017994 <_printf_i+0x22c>
 801796c:	68e0      	ldr	r0, [r4, #12]
 801796e:	9b03      	ldr	r3, [sp, #12]
 8017970:	4298      	cmp	r0, r3
 8017972:	bfb8      	it	lt
 8017974:	4618      	movlt	r0, r3
 8017976:	e7a6      	b.n	80178c6 <_printf_i+0x15e>
 8017978:	2301      	movs	r3, #1
 801797a:	4632      	mov	r2, r6
 801797c:	4649      	mov	r1, r9
 801797e:	4640      	mov	r0, r8
 8017980:	47d0      	blx	sl
 8017982:	3001      	adds	r0, #1
 8017984:	d09d      	beq.n	80178c2 <_printf_i+0x15a>
 8017986:	3501      	adds	r5, #1
 8017988:	68e3      	ldr	r3, [r4, #12]
 801798a:	9903      	ldr	r1, [sp, #12]
 801798c:	1a5b      	subs	r3, r3, r1
 801798e:	42ab      	cmp	r3, r5
 8017990:	dcf2      	bgt.n	8017978 <_printf_i+0x210>
 8017992:	e7eb      	b.n	801796c <_printf_i+0x204>
 8017994:	2500      	movs	r5, #0
 8017996:	f104 0619 	add.w	r6, r4, #25
 801799a:	e7f5      	b.n	8017988 <_printf_i+0x220>
 801799c:	08020e66 	.word	0x08020e66
 80179a0:	08020e77 	.word	0x08020e77

080179a4 <__sflush_r>:
 80179a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80179a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80179ac:	0716      	lsls	r6, r2, #28
 80179ae:	4605      	mov	r5, r0
 80179b0:	460c      	mov	r4, r1
 80179b2:	d454      	bmi.n	8017a5e <__sflush_r+0xba>
 80179b4:	684b      	ldr	r3, [r1, #4]
 80179b6:	2b00      	cmp	r3, #0
 80179b8:	dc02      	bgt.n	80179c0 <__sflush_r+0x1c>
 80179ba:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80179bc:	2b00      	cmp	r3, #0
 80179be:	dd48      	ble.n	8017a52 <__sflush_r+0xae>
 80179c0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80179c2:	2e00      	cmp	r6, #0
 80179c4:	d045      	beq.n	8017a52 <__sflush_r+0xae>
 80179c6:	2300      	movs	r3, #0
 80179c8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80179cc:	682f      	ldr	r7, [r5, #0]
 80179ce:	6a21      	ldr	r1, [r4, #32]
 80179d0:	602b      	str	r3, [r5, #0]
 80179d2:	d030      	beq.n	8017a36 <__sflush_r+0x92>
 80179d4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80179d6:	89a3      	ldrh	r3, [r4, #12]
 80179d8:	0759      	lsls	r1, r3, #29
 80179da:	d505      	bpl.n	80179e8 <__sflush_r+0x44>
 80179dc:	6863      	ldr	r3, [r4, #4]
 80179de:	1ad2      	subs	r2, r2, r3
 80179e0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80179e2:	b10b      	cbz	r3, 80179e8 <__sflush_r+0x44>
 80179e4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80179e6:	1ad2      	subs	r2, r2, r3
 80179e8:	2300      	movs	r3, #0
 80179ea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80179ec:	6a21      	ldr	r1, [r4, #32]
 80179ee:	4628      	mov	r0, r5
 80179f0:	47b0      	blx	r6
 80179f2:	1c43      	adds	r3, r0, #1
 80179f4:	89a3      	ldrh	r3, [r4, #12]
 80179f6:	d106      	bne.n	8017a06 <__sflush_r+0x62>
 80179f8:	6829      	ldr	r1, [r5, #0]
 80179fa:	291d      	cmp	r1, #29
 80179fc:	d82b      	bhi.n	8017a56 <__sflush_r+0xb2>
 80179fe:	4a2a      	ldr	r2, [pc, #168]	@ (8017aa8 <__sflush_r+0x104>)
 8017a00:	40ca      	lsrs	r2, r1
 8017a02:	07d6      	lsls	r6, r2, #31
 8017a04:	d527      	bpl.n	8017a56 <__sflush_r+0xb2>
 8017a06:	2200      	movs	r2, #0
 8017a08:	6062      	str	r2, [r4, #4]
 8017a0a:	04d9      	lsls	r1, r3, #19
 8017a0c:	6922      	ldr	r2, [r4, #16]
 8017a0e:	6022      	str	r2, [r4, #0]
 8017a10:	d504      	bpl.n	8017a1c <__sflush_r+0x78>
 8017a12:	1c42      	adds	r2, r0, #1
 8017a14:	d101      	bne.n	8017a1a <__sflush_r+0x76>
 8017a16:	682b      	ldr	r3, [r5, #0]
 8017a18:	b903      	cbnz	r3, 8017a1c <__sflush_r+0x78>
 8017a1a:	6560      	str	r0, [r4, #84]	@ 0x54
 8017a1c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017a1e:	602f      	str	r7, [r5, #0]
 8017a20:	b1b9      	cbz	r1, 8017a52 <__sflush_r+0xae>
 8017a22:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017a26:	4299      	cmp	r1, r3
 8017a28:	d002      	beq.n	8017a30 <__sflush_r+0x8c>
 8017a2a:	4628      	mov	r0, r5
 8017a2c:	f7fe fa92 	bl	8015f54 <_free_r>
 8017a30:	2300      	movs	r3, #0
 8017a32:	6363      	str	r3, [r4, #52]	@ 0x34
 8017a34:	e00d      	b.n	8017a52 <__sflush_r+0xae>
 8017a36:	2301      	movs	r3, #1
 8017a38:	4628      	mov	r0, r5
 8017a3a:	47b0      	blx	r6
 8017a3c:	4602      	mov	r2, r0
 8017a3e:	1c50      	adds	r0, r2, #1
 8017a40:	d1c9      	bne.n	80179d6 <__sflush_r+0x32>
 8017a42:	682b      	ldr	r3, [r5, #0]
 8017a44:	2b00      	cmp	r3, #0
 8017a46:	d0c6      	beq.n	80179d6 <__sflush_r+0x32>
 8017a48:	2b1d      	cmp	r3, #29
 8017a4a:	d001      	beq.n	8017a50 <__sflush_r+0xac>
 8017a4c:	2b16      	cmp	r3, #22
 8017a4e:	d11e      	bne.n	8017a8e <__sflush_r+0xea>
 8017a50:	602f      	str	r7, [r5, #0]
 8017a52:	2000      	movs	r0, #0
 8017a54:	e022      	b.n	8017a9c <__sflush_r+0xf8>
 8017a56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017a5a:	b21b      	sxth	r3, r3
 8017a5c:	e01b      	b.n	8017a96 <__sflush_r+0xf2>
 8017a5e:	690f      	ldr	r7, [r1, #16]
 8017a60:	2f00      	cmp	r7, #0
 8017a62:	d0f6      	beq.n	8017a52 <__sflush_r+0xae>
 8017a64:	0793      	lsls	r3, r2, #30
 8017a66:	680e      	ldr	r6, [r1, #0]
 8017a68:	bf08      	it	eq
 8017a6a:	694b      	ldreq	r3, [r1, #20]
 8017a6c:	600f      	str	r7, [r1, #0]
 8017a6e:	bf18      	it	ne
 8017a70:	2300      	movne	r3, #0
 8017a72:	eba6 0807 	sub.w	r8, r6, r7
 8017a76:	608b      	str	r3, [r1, #8]
 8017a78:	f1b8 0f00 	cmp.w	r8, #0
 8017a7c:	dde9      	ble.n	8017a52 <__sflush_r+0xae>
 8017a7e:	6a21      	ldr	r1, [r4, #32]
 8017a80:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8017a82:	4643      	mov	r3, r8
 8017a84:	463a      	mov	r2, r7
 8017a86:	4628      	mov	r0, r5
 8017a88:	47b0      	blx	r6
 8017a8a:	2800      	cmp	r0, #0
 8017a8c:	dc08      	bgt.n	8017aa0 <__sflush_r+0xfc>
 8017a8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017a92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017a96:	81a3      	strh	r3, [r4, #12]
 8017a98:	f04f 30ff 	mov.w	r0, #4294967295
 8017a9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017aa0:	4407      	add	r7, r0
 8017aa2:	eba8 0800 	sub.w	r8, r8, r0
 8017aa6:	e7e7      	b.n	8017a78 <__sflush_r+0xd4>
 8017aa8:	20400001 	.word	0x20400001

08017aac <_fflush_r>:
 8017aac:	b538      	push	{r3, r4, r5, lr}
 8017aae:	690b      	ldr	r3, [r1, #16]
 8017ab0:	4605      	mov	r5, r0
 8017ab2:	460c      	mov	r4, r1
 8017ab4:	b913      	cbnz	r3, 8017abc <_fflush_r+0x10>
 8017ab6:	2500      	movs	r5, #0
 8017ab8:	4628      	mov	r0, r5
 8017aba:	bd38      	pop	{r3, r4, r5, pc}
 8017abc:	b118      	cbz	r0, 8017ac6 <_fflush_r+0x1a>
 8017abe:	6a03      	ldr	r3, [r0, #32]
 8017ac0:	b90b      	cbnz	r3, 8017ac6 <_fflush_r+0x1a>
 8017ac2:	f7fe f885 	bl	8015bd0 <__sinit>
 8017ac6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017aca:	2b00      	cmp	r3, #0
 8017acc:	d0f3      	beq.n	8017ab6 <_fflush_r+0xa>
 8017ace:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8017ad0:	07d0      	lsls	r0, r2, #31
 8017ad2:	d404      	bmi.n	8017ade <_fflush_r+0x32>
 8017ad4:	0599      	lsls	r1, r3, #22
 8017ad6:	d402      	bmi.n	8017ade <_fflush_r+0x32>
 8017ad8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017ada:	f7fe f9fc 	bl	8015ed6 <__retarget_lock_acquire_recursive>
 8017ade:	4628      	mov	r0, r5
 8017ae0:	4621      	mov	r1, r4
 8017ae2:	f7ff ff5f 	bl	80179a4 <__sflush_r>
 8017ae6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8017ae8:	07da      	lsls	r2, r3, #31
 8017aea:	4605      	mov	r5, r0
 8017aec:	d4e4      	bmi.n	8017ab8 <_fflush_r+0xc>
 8017aee:	89a3      	ldrh	r3, [r4, #12]
 8017af0:	059b      	lsls	r3, r3, #22
 8017af2:	d4e1      	bmi.n	8017ab8 <_fflush_r+0xc>
 8017af4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017af6:	f7fe f9ef 	bl	8015ed8 <__retarget_lock_release_recursive>
 8017afa:	e7dd      	b.n	8017ab8 <_fflush_r+0xc>

08017afc <fiprintf>:
 8017afc:	b40e      	push	{r1, r2, r3}
 8017afe:	b503      	push	{r0, r1, lr}
 8017b00:	4601      	mov	r1, r0
 8017b02:	ab03      	add	r3, sp, #12
 8017b04:	4805      	ldr	r0, [pc, #20]	@ (8017b1c <fiprintf+0x20>)
 8017b06:	f853 2b04 	ldr.w	r2, [r3], #4
 8017b0a:	6800      	ldr	r0, [r0, #0]
 8017b0c:	9301      	str	r3, [sp, #4]
 8017b0e:	f7ff fca5 	bl	801745c <_vfiprintf_r>
 8017b12:	b002      	add	sp, #8
 8017b14:	f85d eb04 	ldr.w	lr, [sp], #4
 8017b18:	b003      	add	sp, #12
 8017b1a:	4770      	bx	lr
 8017b1c:	200005e4 	.word	0x200005e4

08017b20 <__swbuf_r>:
 8017b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017b22:	460e      	mov	r6, r1
 8017b24:	4614      	mov	r4, r2
 8017b26:	4605      	mov	r5, r0
 8017b28:	b118      	cbz	r0, 8017b32 <__swbuf_r+0x12>
 8017b2a:	6a03      	ldr	r3, [r0, #32]
 8017b2c:	b90b      	cbnz	r3, 8017b32 <__swbuf_r+0x12>
 8017b2e:	f7fe f84f 	bl	8015bd0 <__sinit>
 8017b32:	69a3      	ldr	r3, [r4, #24]
 8017b34:	60a3      	str	r3, [r4, #8]
 8017b36:	89a3      	ldrh	r3, [r4, #12]
 8017b38:	071a      	lsls	r2, r3, #28
 8017b3a:	d501      	bpl.n	8017b40 <__swbuf_r+0x20>
 8017b3c:	6923      	ldr	r3, [r4, #16]
 8017b3e:	b943      	cbnz	r3, 8017b52 <__swbuf_r+0x32>
 8017b40:	4621      	mov	r1, r4
 8017b42:	4628      	mov	r0, r5
 8017b44:	f000 f82a 	bl	8017b9c <__swsetup_r>
 8017b48:	b118      	cbz	r0, 8017b52 <__swbuf_r+0x32>
 8017b4a:	f04f 37ff 	mov.w	r7, #4294967295
 8017b4e:	4638      	mov	r0, r7
 8017b50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017b52:	6823      	ldr	r3, [r4, #0]
 8017b54:	6922      	ldr	r2, [r4, #16]
 8017b56:	1a98      	subs	r0, r3, r2
 8017b58:	6963      	ldr	r3, [r4, #20]
 8017b5a:	b2f6      	uxtb	r6, r6
 8017b5c:	4283      	cmp	r3, r0
 8017b5e:	4637      	mov	r7, r6
 8017b60:	dc05      	bgt.n	8017b6e <__swbuf_r+0x4e>
 8017b62:	4621      	mov	r1, r4
 8017b64:	4628      	mov	r0, r5
 8017b66:	f7ff ffa1 	bl	8017aac <_fflush_r>
 8017b6a:	2800      	cmp	r0, #0
 8017b6c:	d1ed      	bne.n	8017b4a <__swbuf_r+0x2a>
 8017b6e:	68a3      	ldr	r3, [r4, #8]
 8017b70:	3b01      	subs	r3, #1
 8017b72:	60a3      	str	r3, [r4, #8]
 8017b74:	6823      	ldr	r3, [r4, #0]
 8017b76:	1c5a      	adds	r2, r3, #1
 8017b78:	6022      	str	r2, [r4, #0]
 8017b7a:	701e      	strb	r6, [r3, #0]
 8017b7c:	6962      	ldr	r2, [r4, #20]
 8017b7e:	1c43      	adds	r3, r0, #1
 8017b80:	429a      	cmp	r2, r3
 8017b82:	d004      	beq.n	8017b8e <__swbuf_r+0x6e>
 8017b84:	89a3      	ldrh	r3, [r4, #12]
 8017b86:	07db      	lsls	r3, r3, #31
 8017b88:	d5e1      	bpl.n	8017b4e <__swbuf_r+0x2e>
 8017b8a:	2e0a      	cmp	r6, #10
 8017b8c:	d1df      	bne.n	8017b4e <__swbuf_r+0x2e>
 8017b8e:	4621      	mov	r1, r4
 8017b90:	4628      	mov	r0, r5
 8017b92:	f7ff ff8b 	bl	8017aac <_fflush_r>
 8017b96:	2800      	cmp	r0, #0
 8017b98:	d0d9      	beq.n	8017b4e <__swbuf_r+0x2e>
 8017b9a:	e7d6      	b.n	8017b4a <__swbuf_r+0x2a>

08017b9c <__swsetup_r>:
 8017b9c:	b538      	push	{r3, r4, r5, lr}
 8017b9e:	4b29      	ldr	r3, [pc, #164]	@ (8017c44 <__swsetup_r+0xa8>)
 8017ba0:	4605      	mov	r5, r0
 8017ba2:	6818      	ldr	r0, [r3, #0]
 8017ba4:	460c      	mov	r4, r1
 8017ba6:	b118      	cbz	r0, 8017bb0 <__swsetup_r+0x14>
 8017ba8:	6a03      	ldr	r3, [r0, #32]
 8017baa:	b90b      	cbnz	r3, 8017bb0 <__swsetup_r+0x14>
 8017bac:	f7fe f810 	bl	8015bd0 <__sinit>
 8017bb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017bb4:	0719      	lsls	r1, r3, #28
 8017bb6:	d422      	bmi.n	8017bfe <__swsetup_r+0x62>
 8017bb8:	06da      	lsls	r2, r3, #27
 8017bba:	d407      	bmi.n	8017bcc <__swsetup_r+0x30>
 8017bbc:	2209      	movs	r2, #9
 8017bbe:	602a      	str	r2, [r5, #0]
 8017bc0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017bc4:	81a3      	strh	r3, [r4, #12]
 8017bc6:	f04f 30ff 	mov.w	r0, #4294967295
 8017bca:	e033      	b.n	8017c34 <__swsetup_r+0x98>
 8017bcc:	0758      	lsls	r0, r3, #29
 8017bce:	d512      	bpl.n	8017bf6 <__swsetup_r+0x5a>
 8017bd0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017bd2:	b141      	cbz	r1, 8017be6 <__swsetup_r+0x4a>
 8017bd4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017bd8:	4299      	cmp	r1, r3
 8017bda:	d002      	beq.n	8017be2 <__swsetup_r+0x46>
 8017bdc:	4628      	mov	r0, r5
 8017bde:	f7fe f9b9 	bl	8015f54 <_free_r>
 8017be2:	2300      	movs	r3, #0
 8017be4:	6363      	str	r3, [r4, #52]	@ 0x34
 8017be6:	89a3      	ldrh	r3, [r4, #12]
 8017be8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8017bec:	81a3      	strh	r3, [r4, #12]
 8017bee:	2300      	movs	r3, #0
 8017bf0:	6063      	str	r3, [r4, #4]
 8017bf2:	6923      	ldr	r3, [r4, #16]
 8017bf4:	6023      	str	r3, [r4, #0]
 8017bf6:	89a3      	ldrh	r3, [r4, #12]
 8017bf8:	f043 0308 	orr.w	r3, r3, #8
 8017bfc:	81a3      	strh	r3, [r4, #12]
 8017bfe:	6923      	ldr	r3, [r4, #16]
 8017c00:	b94b      	cbnz	r3, 8017c16 <__swsetup_r+0x7a>
 8017c02:	89a3      	ldrh	r3, [r4, #12]
 8017c04:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8017c08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017c0c:	d003      	beq.n	8017c16 <__swsetup_r+0x7a>
 8017c0e:	4621      	mov	r1, r4
 8017c10:	4628      	mov	r0, r5
 8017c12:	f000 f898 	bl	8017d46 <__smakebuf_r>
 8017c16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017c1a:	f013 0201 	ands.w	r2, r3, #1
 8017c1e:	d00a      	beq.n	8017c36 <__swsetup_r+0x9a>
 8017c20:	2200      	movs	r2, #0
 8017c22:	60a2      	str	r2, [r4, #8]
 8017c24:	6962      	ldr	r2, [r4, #20]
 8017c26:	4252      	negs	r2, r2
 8017c28:	61a2      	str	r2, [r4, #24]
 8017c2a:	6922      	ldr	r2, [r4, #16]
 8017c2c:	b942      	cbnz	r2, 8017c40 <__swsetup_r+0xa4>
 8017c2e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8017c32:	d1c5      	bne.n	8017bc0 <__swsetup_r+0x24>
 8017c34:	bd38      	pop	{r3, r4, r5, pc}
 8017c36:	0799      	lsls	r1, r3, #30
 8017c38:	bf58      	it	pl
 8017c3a:	6962      	ldrpl	r2, [r4, #20]
 8017c3c:	60a2      	str	r2, [r4, #8]
 8017c3e:	e7f4      	b.n	8017c2a <__swsetup_r+0x8e>
 8017c40:	2000      	movs	r0, #0
 8017c42:	e7f7      	b.n	8017c34 <__swsetup_r+0x98>
 8017c44:	200005e4 	.word	0x200005e4

08017c48 <_sbrk_r>:
 8017c48:	b538      	push	{r3, r4, r5, lr}
 8017c4a:	4d06      	ldr	r5, [pc, #24]	@ (8017c64 <_sbrk_r+0x1c>)
 8017c4c:	2300      	movs	r3, #0
 8017c4e:	4604      	mov	r4, r0
 8017c50:	4608      	mov	r0, r1
 8017c52:	602b      	str	r3, [r5, #0]
 8017c54:	f7ec ffe4 	bl	8004c20 <_sbrk>
 8017c58:	1c43      	adds	r3, r0, #1
 8017c5a:	d102      	bne.n	8017c62 <_sbrk_r+0x1a>
 8017c5c:	682b      	ldr	r3, [r5, #0]
 8017c5e:	b103      	cbz	r3, 8017c62 <_sbrk_r+0x1a>
 8017c60:	6023      	str	r3, [r4, #0]
 8017c62:	bd38      	pop	{r3, r4, r5, pc}
 8017c64:	200094dc 	.word	0x200094dc

08017c68 <abort>:
 8017c68:	b508      	push	{r3, lr}
 8017c6a:	2006      	movs	r0, #6
 8017c6c:	f000 f8d0 	bl	8017e10 <raise>
 8017c70:	2001      	movs	r0, #1
 8017c72:	f7ec ff5d 	bl	8004b30 <_exit>

08017c76 <_calloc_r>:
 8017c76:	b570      	push	{r4, r5, r6, lr}
 8017c78:	fba1 5402 	umull	r5, r4, r1, r2
 8017c7c:	b934      	cbnz	r4, 8017c8c <_calloc_r+0x16>
 8017c7e:	4629      	mov	r1, r5
 8017c80:	f7fe fd16 	bl	80166b0 <_malloc_r>
 8017c84:	4606      	mov	r6, r0
 8017c86:	b928      	cbnz	r0, 8017c94 <_calloc_r+0x1e>
 8017c88:	4630      	mov	r0, r6
 8017c8a:	bd70      	pop	{r4, r5, r6, pc}
 8017c8c:	220c      	movs	r2, #12
 8017c8e:	6002      	str	r2, [r0, #0]
 8017c90:	2600      	movs	r6, #0
 8017c92:	e7f9      	b.n	8017c88 <_calloc_r+0x12>
 8017c94:	462a      	mov	r2, r5
 8017c96:	4621      	mov	r1, r4
 8017c98:	f7fe f871 	bl	8015d7e <memset>
 8017c9c:	e7f4      	b.n	8017c88 <_calloc_r+0x12>

08017c9e <_realloc_r>:
 8017c9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017ca2:	4607      	mov	r7, r0
 8017ca4:	4614      	mov	r4, r2
 8017ca6:	460d      	mov	r5, r1
 8017ca8:	b921      	cbnz	r1, 8017cb4 <_realloc_r+0x16>
 8017caa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017cae:	4611      	mov	r1, r2
 8017cb0:	f7fe bcfe 	b.w	80166b0 <_malloc_r>
 8017cb4:	b92a      	cbnz	r2, 8017cc2 <_realloc_r+0x24>
 8017cb6:	f7fe f94d 	bl	8015f54 <_free_r>
 8017cba:	4625      	mov	r5, r4
 8017cbc:	4628      	mov	r0, r5
 8017cbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017cc2:	f000 f8e3 	bl	8017e8c <_malloc_usable_size_r>
 8017cc6:	4284      	cmp	r4, r0
 8017cc8:	4606      	mov	r6, r0
 8017cca:	d802      	bhi.n	8017cd2 <_realloc_r+0x34>
 8017ccc:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8017cd0:	d8f4      	bhi.n	8017cbc <_realloc_r+0x1e>
 8017cd2:	4621      	mov	r1, r4
 8017cd4:	4638      	mov	r0, r7
 8017cd6:	f7fe fceb 	bl	80166b0 <_malloc_r>
 8017cda:	4680      	mov	r8, r0
 8017cdc:	b908      	cbnz	r0, 8017ce2 <_realloc_r+0x44>
 8017cde:	4645      	mov	r5, r8
 8017ce0:	e7ec      	b.n	8017cbc <_realloc_r+0x1e>
 8017ce2:	42b4      	cmp	r4, r6
 8017ce4:	4622      	mov	r2, r4
 8017ce6:	4629      	mov	r1, r5
 8017ce8:	bf28      	it	cs
 8017cea:	4632      	movcs	r2, r6
 8017cec:	f7fe f8fd 	bl	8015eea <memcpy>
 8017cf0:	4629      	mov	r1, r5
 8017cf2:	4638      	mov	r0, r7
 8017cf4:	f7fe f92e 	bl	8015f54 <_free_r>
 8017cf8:	e7f1      	b.n	8017cde <_realloc_r+0x40>

08017cfa <__swhatbuf_r>:
 8017cfa:	b570      	push	{r4, r5, r6, lr}
 8017cfc:	460c      	mov	r4, r1
 8017cfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017d02:	2900      	cmp	r1, #0
 8017d04:	b096      	sub	sp, #88	@ 0x58
 8017d06:	4615      	mov	r5, r2
 8017d08:	461e      	mov	r6, r3
 8017d0a:	da0d      	bge.n	8017d28 <__swhatbuf_r+0x2e>
 8017d0c:	89a3      	ldrh	r3, [r4, #12]
 8017d0e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8017d12:	f04f 0100 	mov.w	r1, #0
 8017d16:	bf14      	ite	ne
 8017d18:	2340      	movne	r3, #64	@ 0x40
 8017d1a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8017d1e:	2000      	movs	r0, #0
 8017d20:	6031      	str	r1, [r6, #0]
 8017d22:	602b      	str	r3, [r5, #0]
 8017d24:	b016      	add	sp, #88	@ 0x58
 8017d26:	bd70      	pop	{r4, r5, r6, pc}
 8017d28:	466a      	mov	r2, sp
 8017d2a:	f000 f879 	bl	8017e20 <_fstat_r>
 8017d2e:	2800      	cmp	r0, #0
 8017d30:	dbec      	blt.n	8017d0c <__swhatbuf_r+0x12>
 8017d32:	9901      	ldr	r1, [sp, #4]
 8017d34:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8017d38:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8017d3c:	4259      	negs	r1, r3
 8017d3e:	4159      	adcs	r1, r3
 8017d40:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8017d44:	e7eb      	b.n	8017d1e <__swhatbuf_r+0x24>

08017d46 <__smakebuf_r>:
 8017d46:	898b      	ldrh	r3, [r1, #12]
 8017d48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017d4a:	079d      	lsls	r5, r3, #30
 8017d4c:	4606      	mov	r6, r0
 8017d4e:	460c      	mov	r4, r1
 8017d50:	d507      	bpl.n	8017d62 <__smakebuf_r+0x1c>
 8017d52:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8017d56:	6023      	str	r3, [r4, #0]
 8017d58:	6123      	str	r3, [r4, #16]
 8017d5a:	2301      	movs	r3, #1
 8017d5c:	6163      	str	r3, [r4, #20]
 8017d5e:	b003      	add	sp, #12
 8017d60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017d62:	ab01      	add	r3, sp, #4
 8017d64:	466a      	mov	r2, sp
 8017d66:	f7ff ffc8 	bl	8017cfa <__swhatbuf_r>
 8017d6a:	9f00      	ldr	r7, [sp, #0]
 8017d6c:	4605      	mov	r5, r0
 8017d6e:	4639      	mov	r1, r7
 8017d70:	4630      	mov	r0, r6
 8017d72:	f7fe fc9d 	bl	80166b0 <_malloc_r>
 8017d76:	b948      	cbnz	r0, 8017d8c <__smakebuf_r+0x46>
 8017d78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017d7c:	059a      	lsls	r2, r3, #22
 8017d7e:	d4ee      	bmi.n	8017d5e <__smakebuf_r+0x18>
 8017d80:	f023 0303 	bic.w	r3, r3, #3
 8017d84:	f043 0302 	orr.w	r3, r3, #2
 8017d88:	81a3      	strh	r3, [r4, #12]
 8017d8a:	e7e2      	b.n	8017d52 <__smakebuf_r+0xc>
 8017d8c:	89a3      	ldrh	r3, [r4, #12]
 8017d8e:	6020      	str	r0, [r4, #0]
 8017d90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017d94:	81a3      	strh	r3, [r4, #12]
 8017d96:	9b01      	ldr	r3, [sp, #4]
 8017d98:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8017d9c:	b15b      	cbz	r3, 8017db6 <__smakebuf_r+0x70>
 8017d9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017da2:	4630      	mov	r0, r6
 8017da4:	f000 f84e 	bl	8017e44 <_isatty_r>
 8017da8:	b128      	cbz	r0, 8017db6 <__smakebuf_r+0x70>
 8017daa:	89a3      	ldrh	r3, [r4, #12]
 8017dac:	f023 0303 	bic.w	r3, r3, #3
 8017db0:	f043 0301 	orr.w	r3, r3, #1
 8017db4:	81a3      	strh	r3, [r4, #12]
 8017db6:	89a3      	ldrh	r3, [r4, #12]
 8017db8:	431d      	orrs	r5, r3
 8017dba:	81a5      	strh	r5, [r4, #12]
 8017dbc:	e7cf      	b.n	8017d5e <__smakebuf_r+0x18>

08017dbe <_raise_r>:
 8017dbe:	291f      	cmp	r1, #31
 8017dc0:	b538      	push	{r3, r4, r5, lr}
 8017dc2:	4605      	mov	r5, r0
 8017dc4:	460c      	mov	r4, r1
 8017dc6:	d904      	bls.n	8017dd2 <_raise_r+0x14>
 8017dc8:	2316      	movs	r3, #22
 8017dca:	6003      	str	r3, [r0, #0]
 8017dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8017dd0:	bd38      	pop	{r3, r4, r5, pc}
 8017dd2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8017dd4:	b112      	cbz	r2, 8017ddc <_raise_r+0x1e>
 8017dd6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017dda:	b94b      	cbnz	r3, 8017df0 <_raise_r+0x32>
 8017ddc:	4628      	mov	r0, r5
 8017dde:	f000 f853 	bl	8017e88 <_getpid_r>
 8017de2:	4622      	mov	r2, r4
 8017de4:	4601      	mov	r1, r0
 8017de6:	4628      	mov	r0, r5
 8017de8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017dec:	f000 b83a 	b.w	8017e64 <_kill_r>
 8017df0:	2b01      	cmp	r3, #1
 8017df2:	d00a      	beq.n	8017e0a <_raise_r+0x4c>
 8017df4:	1c59      	adds	r1, r3, #1
 8017df6:	d103      	bne.n	8017e00 <_raise_r+0x42>
 8017df8:	2316      	movs	r3, #22
 8017dfa:	6003      	str	r3, [r0, #0]
 8017dfc:	2001      	movs	r0, #1
 8017dfe:	e7e7      	b.n	8017dd0 <_raise_r+0x12>
 8017e00:	2100      	movs	r1, #0
 8017e02:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8017e06:	4620      	mov	r0, r4
 8017e08:	4798      	blx	r3
 8017e0a:	2000      	movs	r0, #0
 8017e0c:	e7e0      	b.n	8017dd0 <_raise_r+0x12>
	...

08017e10 <raise>:
 8017e10:	4b02      	ldr	r3, [pc, #8]	@ (8017e1c <raise+0xc>)
 8017e12:	4601      	mov	r1, r0
 8017e14:	6818      	ldr	r0, [r3, #0]
 8017e16:	f7ff bfd2 	b.w	8017dbe <_raise_r>
 8017e1a:	bf00      	nop
 8017e1c:	200005e4 	.word	0x200005e4

08017e20 <_fstat_r>:
 8017e20:	b538      	push	{r3, r4, r5, lr}
 8017e22:	4d07      	ldr	r5, [pc, #28]	@ (8017e40 <_fstat_r+0x20>)
 8017e24:	2300      	movs	r3, #0
 8017e26:	4604      	mov	r4, r0
 8017e28:	4608      	mov	r0, r1
 8017e2a:	4611      	mov	r1, r2
 8017e2c:	602b      	str	r3, [r5, #0]
 8017e2e:	f7ec fecf 	bl	8004bd0 <_fstat>
 8017e32:	1c43      	adds	r3, r0, #1
 8017e34:	d102      	bne.n	8017e3c <_fstat_r+0x1c>
 8017e36:	682b      	ldr	r3, [r5, #0]
 8017e38:	b103      	cbz	r3, 8017e3c <_fstat_r+0x1c>
 8017e3a:	6023      	str	r3, [r4, #0]
 8017e3c:	bd38      	pop	{r3, r4, r5, pc}
 8017e3e:	bf00      	nop
 8017e40:	200094dc 	.word	0x200094dc

08017e44 <_isatty_r>:
 8017e44:	b538      	push	{r3, r4, r5, lr}
 8017e46:	4d06      	ldr	r5, [pc, #24]	@ (8017e60 <_isatty_r+0x1c>)
 8017e48:	2300      	movs	r3, #0
 8017e4a:	4604      	mov	r4, r0
 8017e4c:	4608      	mov	r0, r1
 8017e4e:	602b      	str	r3, [r5, #0]
 8017e50:	f7ec fece 	bl	8004bf0 <_isatty>
 8017e54:	1c43      	adds	r3, r0, #1
 8017e56:	d102      	bne.n	8017e5e <_isatty_r+0x1a>
 8017e58:	682b      	ldr	r3, [r5, #0]
 8017e5a:	b103      	cbz	r3, 8017e5e <_isatty_r+0x1a>
 8017e5c:	6023      	str	r3, [r4, #0]
 8017e5e:	bd38      	pop	{r3, r4, r5, pc}
 8017e60:	200094dc 	.word	0x200094dc

08017e64 <_kill_r>:
 8017e64:	b538      	push	{r3, r4, r5, lr}
 8017e66:	4d07      	ldr	r5, [pc, #28]	@ (8017e84 <_kill_r+0x20>)
 8017e68:	2300      	movs	r3, #0
 8017e6a:	4604      	mov	r4, r0
 8017e6c:	4608      	mov	r0, r1
 8017e6e:	4611      	mov	r1, r2
 8017e70:	602b      	str	r3, [r5, #0]
 8017e72:	f7ec fe4b 	bl	8004b0c <_kill>
 8017e76:	1c43      	adds	r3, r0, #1
 8017e78:	d102      	bne.n	8017e80 <_kill_r+0x1c>
 8017e7a:	682b      	ldr	r3, [r5, #0]
 8017e7c:	b103      	cbz	r3, 8017e80 <_kill_r+0x1c>
 8017e7e:	6023      	str	r3, [r4, #0]
 8017e80:	bd38      	pop	{r3, r4, r5, pc}
 8017e82:	bf00      	nop
 8017e84:	200094dc 	.word	0x200094dc

08017e88 <_getpid_r>:
 8017e88:	f7ec be38 	b.w	8004afc <_getpid>

08017e8c <_malloc_usable_size_r>:
 8017e8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017e90:	1f18      	subs	r0, r3, #4
 8017e92:	2b00      	cmp	r3, #0
 8017e94:	bfbc      	itt	lt
 8017e96:	580b      	ldrlt	r3, [r1, r0]
 8017e98:	18c0      	addlt	r0, r0, r3
 8017e9a:	4770      	bx	lr

08017e9c <sqrt>:
 8017e9c:	b538      	push	{r3, r4, r5, lr}
 8017e9e:	ed2d 8b02 	vpush	{d8}
 8017ea2:	ec55 4b10 	vmov	r4, r5, d0
 8017ea6:	f000 fa15 	bl	80182d4 <__ieee754_sqrt>
 8017eaa:	4622      	mov	r2, r4
 8017eac:	462b      	mov	r3, r5
 8017eae:	4620      	mov	r0, r4
 8017eb0:	4629      	mov	r1, r5
 8017eb2:	eeb0 8a40 	vmov.f32	s16, s0
 8017eb6:	eef0 8a60 	vmov.f32	s17, s1
 8017eba:	f7e8 fe37 	bl	8000b2c <__aeabi_dcmpun>
 8017ebe:	b990      	cbnz	r0, 8017ee6 <sqrt+0x4a>
 8017ec0:	2200      	movs	r2, #0
 8017ec2:	2300      	movs	r3, #0
 8017ec4:	4620      	mov	r0, r4
 8017ec6:	4629      	mov	r1, r5
 8017ec8:	f7e8 fe08 	bl	8000adc <__aeabi_dcmplt>
 8017ecc:	b158      	cbz	r0, 8017ee6 <sqrt+0x4a>
 8017ece:	f7fd ffd7 	bl	8015e80 <__errno>
 8017ed2:	2321      	movs	r3, #33	@ 0x21
 8017ed4:	6003      	str	r3, [r0, #0]
 8017ed6:	2200      	movs	r2, #0
 8017ed8:	2300      	movs	r3, #0
 8017eda:	4610      	mov	r0, r2
 8017edc:	4619      	mov	r1, r3
 8017ede:	f7e8 fcb5 	bl	800084c <__aeabi_ddiv>
 8017ee2:	ec41 0b18 	vmov	d8, r0, r1
 8017ee6:	eeb0 0a48 	vmov.f32	s0, s16
 8017eea:	eef0 0a68 	vmov.f32	s1, s17
 8017eee:	ecbd 8b02 	vpop	{d8}
 8017ef2:	bd38      	pop	{r3, r4, r5, pc}
 8017ef4:	0000      	movs	r0, r0
	...

08017ef8 <atan>:
 8017ef8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017efc:	ec55 4b10 	vmov	r4, r5, d0
 8017f00:	4bbf      	ldr	r3, [pc, #764]	@ (8018200 <atan+0x308>)
 8017f02:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8017f06:	429e      	cmp	r6, r3
 8017f08:	46ab      	mov	fp, r5
 8017f0a:	d918      	bls.n	8017f3e <atan+0x46>
 8017f0c:	4bbd      	ldr	r3, [pc, #756]	@ (8018204 <atan+0x30c>)
 8017f0e:	429e      	cmp	r6, r3
 8017f10:	d801      	bhi.n	8017f16 <atan+0x1e>
 8017f12:	d109      	bne.n	8017f28 <atan+0x30>
 8017f14:	b144      	cbz	r4, 8017f28 <atan+0x30>
 8017f16:	4622      	mov	r2, r4
 8017f18:	462b      	mov	r3, r5
 8017f1a:	4620      	mov	r0, r4
 8017f1c:	4629      	mov	r1, r5
 8017f1e:	f7e8 f9b5 	bl	800028c <__adddf3>
 8017f22:	4604      	mov	r4, r0
 8017f24:	460d      	mov	r5, r1
 8017f26:	e006      	b.n	8017f36 <atan+0x3e>
 8017f28:	f1bb 0f00 	cmp.w	fp, #0
 8017f2c:	f340 812b 	ble.w	8018186 <atan+0x28e>
 8017f30:	a597      	add	r5, pc, #604	@ (adr r5, 8018190 <atan+0x298>)
 8017f32:	e9d5 4500 	ldrd	r4, r5, [r5]
 8017f36:	ec45 4b10 	vmov	d0, r4, r5
 8017f3a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f3e:	4bb2      	ldr	r3, [pc, #712]	@ (8018208 <atan+0x310>)
 8017f40:	429e      	cmp	r6, r3
 8017f42:	d813      	bhi.n	8017f6c <atan+0x74>
 8017f44:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8017f48:	429e      	cmp	r6, r3
 8017f4a:	d80c      	bhi.n	8017f66 <atan+0x6e>
 8017f4c:	a392      	add	r3, pc, #584	@ (adr r3, 8018198 <atan+0x2a0>)
 8017f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017f52:	4620      	mov	r0, r4
 8017f54:	4629      	mov	r1, r5
 8017f56:	f7e8 f999 	bl	800028c <__adddf3>
 8017f5a:	4bac      	ldr	r3, [pc, #688]	@ (801820c <atan+0x314>)
 8017f5c:	2200      	movs	r2, #0
 8017f5e:	f7e8 fddb 	bl	8000b18 <__aeabi_dcmpgt>
 8017f62:	2800      	cmp	r0, #0
 8017f64:	d1e7      	bne.n	8017f36 <atan+0x3e>
 8017f66:	f04f 3aff 	mov.w	sl, #4294967295
 8017f6a:	e029      	b.n	8017fc0 <atan+0xc8>
 8017f6c:	f000 f95c 	bl	8018228 <fabs>
 8017f70:	4ba7      	ldr	r3, [pc, #668]	@ (8018210 <atan+0x318>)
 8017f72:	429e      	cmp	r6, r3
 8017f74:	ec55 4b10 	vmov	r4, r5, d0
 8017f78:	f200 80bc 	bhi.w	80180f4 <atan+0x1fc>
 8017f7c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8017f80:	429e      	cmp	r6, r3
 8017f82:	f200 809e 	bhi.w	80180c2 <atan+0x1ca>
 8017f86:	4622      	mov	r2, r4
 8017f88:	462b      	mov	r3, r5
 8017f8a:	4620      	mov	r0, r4
 8017f8c:	4629      	mov	r1, r5
 8017f8e:	f7e8 f97d 	bl	800028c <__adddf3>
 8017f92:	4b9e      	ldr	r3, [pc, #632]	@ (801820c <atan+0x314>)
 8017f94:	2200      	movs	r2, #0
 8017f96:	f7e8 f977 	bl	8000288 <__aeabi_dsub>
 8017f9a:	2200      	movs	r2, #0
 8017f9c:	4606      	mov	r6, r0
 8017f9e:	460f      	mov	r7, r1
 8017fa0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8017fa4:	4620      	mov	r0, r4
 8017fa6:	4629      	mov	r1, r5
 8017fa8:	f7e8 f970 	bl	800028c <__adddf3>
 8017fac:	4602      	mov	r2, r0
 8017fae:	460b      	mov	r3, r1
 8017fb0:	4630      	mov	r0, r6
 8017fb2:	4639      	mov	r1, r7
 8017fb4:	f7e8 fc4a 	bl	800084c <__aeabi_ddiv>
 8017fb8:	f04f 0a00 	mov.w	sl, #0
 8017fbc:	4604      	mov	r4, r0
 8017fbe:	460d      	mov	r5, r1
 8017fc0:	4622      	mov	r2, r4
 8017fc2:	462b      	mov	r3, r5
 8017fc4:	4620      	mov	r0, r4
 8017fc6:	4629      	mov	r1, r5
 8017fc8:	f7e8 fb16 	bl	80005f8 <__aeabi_dmul>
 8017fcc:	4602      	mov	r2, r0
 8017fce:	460b      	mov	r3, r1
 8017fd0:	4680      	mov	r8, r0
 8017fd2:	4689      	mov	r9, r1
 8017fd4:	f7e8 fb10 	bl	80005f8 <__aeabi_dmul>
 8017fd8:	a371      	add	r3, pc, #452	@ (adr r3, 80181a0 <atan+0x2a8>)
 8017fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017fde:	4606      	mov	r6, r0
 8017fe0:	460f      	mov	r7, r1
 8017fe2:	f7e8 fb09 	bl	80005f8 <__aeabi_dmul>
 8017fe6:	a370      	add	r3, pc, #448	@ (adr r3, 80181a8 <atan+0x2b0>)
 8017fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017fec:	f7e8 f94e 	bl	800028c <__adddf3>
 8017ff0:	4632      	mov	r2, r6
 8017ff2:	463b      	mov	r3, r7
 8017ff4:	f7e8 fb00 	bl	80005f8 <__aeabi_dmul>
 8017ff8:	a36d      	add	r3, pc, #436	@ (adr r3, 80181b0 <atan+0x2b8>)
 8017ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017ffe:	f7e8 f945 	bl	800028c <__adddf3>
 8018002:	4632      	mov	r2, r6
 8018004:	463b      	mov	r3, r7
 8018006:	f7e8 faf7 	bl	80005f8 <__aeabi_dmul>
 801800a:	a36b      	add	r3, pc, #428	@ (adr r3, 80181b8 <atan+0x2c0>)
 801800c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018010:	f7e8 f93c 	bl	800028c <__adddf3>
 8018014:	4632      	mov	r2, r6
 8018016:	463b      	mov	r3, r7
 8018018:	f7e8 faee 	bl	80005f8 <__aeabi_dmul>
 801801c:	a368      	add	r3, pc, #416	@ (adr r3, 80181c0 <atan+0x2c8>)
 801801e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018022:	f7e8 f933 	bl	800028c <__adddf3>
 8018026:	4632      	mov	r2, r6
 8018028:	463b      	mov	r3, r7
 801802a:	f7e8 fae5 	bl	80005f8 <__aeabi_dmul>
 801802e:	a366      	add	r3, pc, #408	@ (adr r3, 80181c8 <atan+0x2d0>)
 8018030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018034:	f7e8 f92a 	bl	800028c <__adddf3>
 8018038:	4642      	mov	r2, r8
 801803a:	464b      	mov	r3, r9
 801803c:	f7e8 fadc 	bl	80005f8 <__aeabi_dmul>
 8018040:	a363      	add	r3, pc, #396	@ (adr r3, 80181d0 <atan+0x2d8>)
 8018042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018046:	4680      	mov	r8, r0
 8018048:	4689      	mov	r9, r1
 801804a:	4630      	mov	r0, r6
 801804c:	4639      	mov	r1, r7
 801804e:	f7e8 fad3 	bl	80005f8 <__aeabi_dmul>
 8018052:	a361      	add	r3, pc, #388	@ (adr r3, 80181d8 <atan+0x2e0>)
 8018054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018058:	f7e8 f916 	bl	8000288 <__aeabi_dsub>
 801805c:	4632      	mov	r2, r6
 801805e:	463b      	mov	r3, r7
 8018060:	f7e8 faca 	bl	80005f8 <__aeabi_dmul>
 8018064:	a35e      	add	r3, pc, #376	@ (adr r3, 80181e0 <atan+0x2e8>)
 8018066:	e9d3 2300 	ldrd	r2, r3, [r3]
 801806a:	f7e8 f90d 	bl	8000288 <__aeabi_dsub>
 801806e:	4632      	mov	r2, r6
 8018070:	463b      	mov	r3, r7
 8018072:	f7e8 fac1 	bl	80005f8 <__aeabi_dmul>
 8018076:	a35c      	add	r3, pc, #368	@ (adr r3, 80181e8 <atan+0x2f0>)
 8018078:	e9d3 2300 	ldrd	r2, r3, [r3]
 801807c:	f7e8 f904 	bl	8000288 <__aeabi_dsub>
 8018080:	4632      	mov	r2, r6
 8018082:	463b      	mov	r3, r7
 8018084:	f7e8 fab8 	bl	80005f8 <__aeabi_dmul>
 8018088:	a359      	add	r3, pc, #356	@ (adr r3, 80181f0 <atan+0x2f8>)
 801808a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801808e:	f7e8 f8fb 	bl	8000288 <__aeabi_dsub>
 8018092:	4632      	mov	r2, r6
 8018094:	463b      	mov	r3, r7
 8018096:	f7e8 faaf 	bl	80005f8 <__aeabi_dmul>
 801809a:	4602      	mov	r2, r0
 801809c:	460b      	mov	r3, r1
 801809e:	4640      	mov	r0, r8
 80180a0:	4649      	mov	r1, r9
 80180a2:	f7e8 f8f3 	bl	800028c <__adddf3>
 80180a6:	4622      	mov	r2, r4
 80180a8:	462b      	mov	r3, r5
 80180aa:	f7e8 faa5 	bl	80005f8 <__aeabi_dmul>
 80180ae:	f1ba 3fff 	cmp.w	sl, #4294967295
 80180b2:	4602      	mov	r2, r0
 80180b4:	460b      	mov	r3, r1
 80180b6:	d148      	bne.n	801814a <atan+0x252>
 80180b8:	4620      	mov	r0, r4
 80180ba:	4629      	mov	r1, r5
 80180bc:	f7e8 f8e4 	bl	8000288 <__aeabi_dsub>
 80180c0:	e72f      	b.n	8017f22 <atan+0x2a>
 80180c2:	4b52      	ldr	r3, [pc, #328]	@ (801820c <atan+0x314>)
 80180c4:	2200      	movs	r2, #0
 80180c6:	4620      	mov	r0, r4
 80180c8:	4629      	mov	r1, r5
 80180ca:	f7e8 f8dd 	bl	8000288 <__aeabi_dsub>
 80180ce:	4b4f      	ldr	r3, [pc, #316]	@ (801820c <atan+0x314>)
 80180d0:	4606      	mov	r6, r0
 80180d2:	460f      	mov	r7, r1
 80180d4:	2200      	movs	r2, #0
 80180d6:	4620      	mov	r0, r4
 80180d8:	4629      	mov	r1, r5
 80180da:	f7e8 f8d7 	bl	800028c <__adddf3>
 80180de:	4602      	mov	r2, r0
 80180e0:	460b      	mov	r3, r1
 80180e2:	4630      	mov	r0, r6
 80180e4:	4639      	mov	r1, r7
 80180e6:	f7e8 fbb1 	bl	800084c <__aeabi_ddiv>
 80180ea:	f04f 0a01 	mov.w	sl, #1
 80180ee:	4604      	mov	r4, r0
 80180f0:	460d      	mov	r5, r1
 80180f2:	e765      	b.n	8017fc0 <atan+0xc8>
 80180f4:	4b47      	ldr	r3, [pc, #284]	@ (8018214 <atan+0x31c>)
 80180f6:	429e      	cmp	r6, r3
 80180f8:	d21c      	bcs.n	8018134 <atan+0x23c>
 80180fa:	4b47      	ldr	r3, [pc, #284]	@ (8018218 <atan+0x320>)
 80180fc:	2200      	movs	r2, #0
 80180fe:	4620      	mov	r0, r4
 8018100:	4629      	mov	r1, r5
 8018102:	f7e8 f8c1 	bl	8000288 <__aeabi_dsub>
 8018106:	4b44      	ldr	r3, [pc, #272]	@ (8018218 <atan+0x320>)
 8018108:	4606      	mov	r6, r0
 801810a:	460f      	mov	r7, r1
 801810c:	2200      	movs	r2, #0
 801810e:	4620      	mov	r0, r4
 8018110:	4629      	mov	r1, r5
 8018112:	f7e8 fa71 	bl	80005f8 <__aeabi_dmul>
 8018116:	4b3d      	ldr	r3, [pc, #244]	@ (801820c <atan+0x314>)
 8018118:	2200      	movs	r2, #0
 801811a:	f7e8 f8b7 	bl	800028c <__adddf3>
 801811e:	4602      	mov	r2, r0
 8018120:	460b      	mov	r3, r1
 8018122:	4630      	mov	r0, r6
 8018124:	4639      	mov	r1, r7
 8018126:	f7e8 fb91 	bl	800084c <__aeabi_ddiv>
 801812a:	f04f 0a02 	mov.w	sl, #2
 801812e:	4604      	mov	r4, r0
 8018130:	460d      	mov	r5, r1
 8018132:	e745      	b.n	8017fc0 <atan+0xc8>
 8018134:	4622      	mov	r2, r4
 8018136:	462b      	mov	r3, r5
 8018138:	4938      	ldr	r1, [pc, #224]	@ (801821c <atan+0x324>)
 801813a:	2000      	movs	r0, #0
 801813c:	f7e8 fb86 	bl	800084c <__aeabi_ddiv>
 8018140:	f04f 0a03 	mov.w	sl, #3
 8018144:	4604      	mov	r4, r0
 8018146:	460d      	mov	r5, r1
 8018148:	e73a      	b.n	8017fc0 <atan+0xc8>
 801814a:	4b35      	ldr	r3, [pc, #212]	@ (8018220 <atan+0x328>)
 801814c:	4e35      	ldr	r6, [pc, #212]	@ (8018224 <atan+0x32c>)
 801814e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8018152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018156:	f7e8 f897 	bl	8000288 <__aeabi_dsub>
 801815a:	4622      	mov	r2, r4
 801815c:	462b      	mov	r3, r5
 801815e:	f7e8 f893 	bl	8000288 <__aeabi_dsub>
 8018162:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8018166:	4602      	mov	r2, r0
 8018168:	460b      	mov	r3, r1
 801816a:	e9d6 0100 	ldrd	r0, r1, [r6]
 801816e:	f7e8 f88b 	bl	8000288 <__aeabi_dsub>
 8018172:	f1bb 0f00 	cmp.w	fp, #0
 8018176:	4604      	mov	r4, r0
 8018178:	460d      	mov	r5, r1
 801817a:	f6bf aedc 	bge.w	8017f36 <atan+0x3e>
 801817e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8018182:	461d      	mov	r5, r3
 8018184:	e6d7      	b.n	8017f36 <atan+0x3e>
 8018186:	a51c      	add	r5, pc, #112	@ (adr r5, 80181f8 <atan+0x300>)
 8018188:	e9d5 4500 	ldrd	r4, r5, [r5]
 801818c:	e6d3      	b.n	8017f36 <atan+0x3e>
 801818e:	bf00      	nop
 8018190:	54442d18 	.word	0x54442d18
 8018194:	3ff921fb 	.word	0x3ff921fb
 8018198:	8800759c 	.word	0x8800759c
 801819c:	7e37e43c 	.word	0x7e37e43c
 80181a0:	e322da11 	.word	0xe322da11
 80181a4:	3f90ad3a 	.word	0x3f90ad3a
 80181a8:	24760deb 	.word	0x24760deb
 80181ac:	3fa97b4b 	.word	0x3fa97b4b
 80181b0:	a0d03d51 	.word	0xa0d03d51
 80181b4:	3fb10d66 	.word	0x3fb10d66
 80181b8:	c54c206e 	.word	0xc54c206e
 80181bc:	3fb745cd 	.word	0x3fb745cd
 80181c0:	920083ff 	.word	0x920083ff
 80181c4:	3fc24924 	.word	0x3fc24924
 80181c8:	5555550d 	.word	0x5555550d
 80181cc:	3fd55555 	.word	0x3fd55555
 80181d0:	2c6a6c2f 	.word	0x2c6a6c2f
 80181d4:	bfa2b444 	.word	0xbfa2b444
 80181d8:	52defd9a 	.word	0x52defd9a
 80181dc:	3fadde2d 	.word	0x3fadde2d
 80181e0:	af749a6d 	.word	0xaf749a6d
 80181e4:	3fb3b0f2 	.word	0x3fb3b0f2
 80181e8:	fe231671 	.word	0xfe231671
 80181ec:	3fbc71c6 	.word	0x3fbc71c6
 80181f0:	9998ebc4 	.word	0x9998ebc4
 80181f4:	3fc99999 	.word	0x3fc99999
 80181f8:	54442d18 	.word	0x54442d18
 80181fc:	bff921fb 	.word	0xbff921fb
 8018200:	440fffff 	.word	0x440fffff
 8018204:	7ff00000 	.word	0x7ff00000
 8018208:	3fdbffff 	.word	0x3fdbffff
 801820c:	3ff00000 	.word	0x3ff00000
 8018210:	3ff2ffff 	.word	0x3ff2ffff
 8018214:	40038000 	.word	0x40038000
 8018218:	3ff80000 	.word	0x3ff80000
 801821c:	bff00000 	.word	0xbff00000
 8018220:	080210d8 	.word	0x080210d8
 8018224:	080210f8 	.word	0x080210f8

08018228 <fabs>:
 8018228:	ec51 0b10 	vmov	r0, r1, d0
 801822c:	4602      	mov	r2, r0
 801822e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8018232:	ec43 2b10 	vmov	d0, r2, r3
 8018236:	4770      	bx	lr

08018238 <fmax>:
 8018238:	b508      	push	{r3, lr}
 801823a:	ed2d 8b04 	vpush	{d8-d9}
 801823e:	eeb0 8a40 	vmov.f32	s16, s0
 8018242:	eef0 8a60 	vmov.f32	s17, s1
 8018246:	eeb0 9a41 	vmov.f32	s18, s2
 801824a:	eef0 9a61 	vmov.f32	s19, s3
 801824e:	f000 f81d 	bl	801828c <__fpclassifyd>
 8018252:	b950      	cbnz	r0, 801826a <fmax+0x32>
 8018254:	eeb0 8a49 	vmov.f32	s16, s18
 8018258:	eef0 8a69 	vmov.f32	s17, s19
 801825c:	eeb0 0a48 	vmov.f32	s0, s16
 8018260:	eef0 0a68 	vmov.f32	s1, s17
 8018264:	ecbd 8b04 	vpop	{d8-d9}
 8018268:	bd08      	pop	{r3, pc}
 801826a:	eeb0 0a49 	vmov.f32	s0, s18
 801826e:	eef0 0a69 	vmov.f32	s1, s19
 8018272:	f000 f80b 	bl	801828c <__fpclassifyd>
 8018276:	2800      	cmp	r0, #0
 8018278:	d0f0      	beq.n	801825c <fmax+0x24>
 801827a:	ec53 2b19 	vmov	r2, r3, d9
 801827e:	ec51 0b18 	vmov	r0, r1, d8
 8018282:	f7e8 fc49 	bl	8000b18 <__aeabi_dcmpgt>
 8018286:	2800      	cmp	r0, #0
 8018288:	d0e4      	beq.n	8018254 <fmax+0x1c>
 801828a:	e7e7      	b.n	801825c <fmax+0x24>

0801828c <__fpclassifyd>:
 801828c:	ec51 0b10 	vmov	r0, r1, d0
 8018290:	460b      	mov	r3, r1
 8018292:	f031 4100 	bics.w	r1, r1, #2147483648	@ 0x80000000
 8018296:	b510      	push	{r4, lr}
 8018298:	d104      	bne.n	80182a4 <__fpclassifyd+0x18>
 801829a:	2800      	cmp	r0, #0
 801829c:	bf0c      	ite	eq
 801829e:	2002      	moveq	r0, #2
 80182a0:	2003      	movne	r0, #3
 80182a2:	bd10      	pop	{r4, pc}
 80182a4:	4a09      	ldr	r2, [pc, #36]	@ (80182cc <__fpclassifyd+0x40>)
 80182a6:	f5a1 1480 	sub.w	r4, r1, #1048576	@ 0x100000
 80182aa:	4294      	cmp	r4, r2
 80182ac:	d908      	bls.n	80182c0 <__fpclassifyd+0x34>
 80182ae:	4a08      	ldr	r2, [pc, #32]	@ (80182d0 <__fpclassifyd+0x44>)
 80182b0:	4213      	tst	r3, r2
 80182b2:	d007      	beq.n	80182c4 <__fpclassifyd+0x38>
 80182b4:	4291      	cmp	r1, r2
 80182b6:	d107      	bne.n	80182c8 <__fpclassifyd+0x3c>
 80182b8:	fab0 f080 	clz	r0, r0
 80182bc:	0940      	lsrs	r0, r0, #5
 80182be:	e7f0      	b.n	80182a2 <__fpclassifyd+0x16>
 80182c0:	2004      	movs	r0, #4
 80182c2:	e7ee      	b.n	80182a2 <__fpclassifyd+0x16>
 80182c4:	2003      	movs	r0, #3
 80182c6:	e7ec      	b.n	80182a2 <__fpclassifyd+0x16>
 80182c8:	2000      	movs	r0, #0
 80182ca:	e7ea      	b.n	80182a2 <__fpclassifyd+0x16>
 80182cc:	7fdfffff 	.word	0x7fdfffff
 80182d0:	7ff00000 	.word	0x7ff00000

080182d4 <__ieee754_sqrt>:
 80182d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80182d8:	4a66      	ldr	r2, [pc, #408]	@ (8018474 <__ieee754_sqrt+0x1a0>)
 80182da:	ec55 4b10 	vmov	r4, r5, d0
 80182de:	43aa      	bics	r2, r5
 80182e0:	462b      	mov	r3, r5
 80182e2:	4621      	mov	r1, r4
 80182e4:	d110      	bne.n	8018308 <__ieee754_sqrt+0x34>
 80182e6:	4622      	mov	r2, r4
 80182e8:	4620      	mov	r0, r4
 80182ea:	4629      	mov	r1, r5
 80182ec:	f7e8 f984 	bl	80005f8 <__aeabi_dmul>
 80182f0:	4602      	mov	r2, r0
 80182f2:	460b      	mov	r3, r1
 80182f4:	4620      	mov	r0, r4
 80182f6:	4629      	mov	r1, r5
 80182f8:	f7e7 ffc8 	bl	800028c <__adddf3>
 80182fc:	4604      	mov	r4, r0
 80182fe:	460d      	mov	r5, r1
 8018300:	ec45 4b10 	vmov	d0, r4, r5
 8018304:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018308:	2d00      	cmp	r5, #0
 801830a:	dc0e      	bgt.n	801832a <__ieee754_sqrt+0x56>
 801830c:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8018310:	4322      	orrs	r2, r4
 8018312:	d0f5      	beq.n	8018300 <__ieee754_sqrt+0x2c>
 8018314:	b19d      	cbz	r5, 801833e <__ieee754_sqrt+0x6a>
 8018316:	4622      	mov	r2, r4
 8018318:	4620      	mov	r0, r4
 801831a:	4629      	mov	r1, r5
 801831c:	f7e7 ffb4 	bl	8000288 <__aeabi_dsub>
 8018320:	4602      	mov	r2, r0
 8018322:	460b      	mov	r3, r1
 8018324:	f7e8 fa92 	bl	800084c <__aeabi_ddiv>
 8018328:	e7e8      	b.n	80182fc <__ieee754_sqrt+0x28>
 801832a:	152a      	asrs	r2, r5, #20
 801832c:	d115      	bne.n	801835a <__ieee754_sqrt+0x86>
 801832e:	2000      	movs	r0, #0
 8018330:	e009      	b.n	8018346 <__ieee754_sqrt+0x72>
 8018332:	0acb      	lsrs	r3, r1, #11
 8018334:	3a15      	subs	r2, #21
 8018336:	0549      	lsls	r1, r1, #21
 8018338:	2b00      	cmp	r3, #0
 801833a:	d0fa      	beq.n	8018332 <__ieee754_sqrt+0x5e>
 801833c:	e7f7      	b.n	801832e <__ieee754_sqrt+0x5a>
 801833e:	462a      	mov	r2, r5
 8018340:	e7fa      	b.n	8018338 <__ieee754_sqrt+0x64>
 8018342:	005b      	lsls	r3, r3, #1
 8018344:	3001      	adds	r0, #1
 8018346:	02dc      	lsls	r4, r3, #11
 8018348:	d5fb      	bpl.n	8018342 <__ieee754_sqrt+0x6e>
 801834a:	1e44      	subs	r4, r0, #1
 801834c:	1b12      	subs	r2, r2, r4
 801834e:	f1c0 0420 	rsb	r4, r0, #32
 8018352:	fa21 f404 	lsr.w	r4, r1, r4
 8018356:	4323      	orrs	r3, r4
 8018358:	4081      	lsls	r1, r0
 801835a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801835e:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8018362:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8018366:	07d2      	lsls	r2, r2, #31
 8018368:	bf5c      	itt	pl
 801836a:	005b      	lslpl	r3, r3, #1
 801836c:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8018370:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8018374:	bf58      	it	pl
 8018376:	0049      	lslpl	r1, r1, #1
 8018378:	2600      	movs	r6, #0
 801837a:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 801837e:	107f      	asrs	r7, r7, #1
 8018380:	0049      	lsls	r1, r1, #1
 8018382:	2016      	movs	r0, #22
 8018384:	4632      	mov	r2, r6
 8018386:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 801838a:	1915      	adds	r5, r2, r4
 801838c:	429d      	cmp	r5, r3
 801838e:	bfde      	ittt	le
 8018390:	192a      	addle	r2, r5, r4
 8018392:	1b5b      	suble	r3, r3, r5
 8018394:	1936      	addle	r6, r6, r4
 8018396:	0fcd      	lsrs	r5, r1, #31
 8018398:	3801      	subs	r0, #1
 801839a:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 801839e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80183a2:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80183a6:	d1f0      	bne.n	801838a <__ieee754_sqrt+0xb6>
 80183a8:	4605      	mov	r5, r0
 80183aa:	2420      	movs	r4, #32
 80183ac:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80183b0:	4293      	cmp	r3, r2
 80183b2:	eb0c 0e00 	add.w	lr, ip, r0
 80183b6:	dc02      	bgt.n	80183be <__ieee754_sqrt+0xea>
 80183b8:	d113      	bne.n	80183e2 <__ieee754_sqrt+0x10e>
 80183ba:	458e      	cmp	lr, r1
 80183bc:	d811      	bhi.n	80183e2 <__ieee754_sqrt+0x10e>
 80183be:	f1be 0f00 	cmp.w	lr, #0
 80183c2:	eb0e 000c 	add.w	r0, lr, ip
 80183c6:	da3f      	bge.n	8018448 <__ieee754_sqrt+0x174>
 80183c8:	2800      	cmp	r0, #0
 80183ca:	db3d      	blt.n	8018448 <__ieee754_sqrt+0x174>
 80183cc:	f102 0801 	add.w	r8, r2, #1
 80183d0:	1a9b      	subs	r3, r3, r2
 80183d2:	458e      	cmp	lr, r1
 80183d4:	bf88      	it	hi
 80183d6:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80183da:	eba1 010e 	sub.w	r1, r1, lr
 80183de:	4465      	add	r5, ip
 80183e0:	4642      	mov	r2, r8
 80183e2:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 80183e6:	3c01      	subs	r4, #1
 80183e8:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 80183ec:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80183f0:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80183f4:	d1dc      	bne.n	80183b0 <__ieee754_sqrt+0xdc>
 80183f6:	4319      	orrs	r1, r3
 80183f8:	d01b      	beq.n	8018432 <__ieee754_sqrt+0x15e>
 80183fa:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 8018478 <__ieee754_sqrt+0x1a4>
 80183fe:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 801847c <__ieee754_sqrt+0x1a8>
 8018402:	e9da 0100 	ldrd	r0, r1, [sl]
 8018406:	e9db 2300 	ldrd	r2, r3, [fp]
 801840a:	f7e7 ff3d 	bl	8000288 <__aeabi_dsub>
 801840e:	e9da 8900 	ldrd	r8, r9, [sl]
 8018412:	4602      	mov	r2, r0
 8018414:	460b      	mov	r3, r1
 8018416:	4640      	mov	r0, r8
 8018418:	4649      	mov	r1, r9
 801841a:	f7e8 fb69 	bl	8000af0 <__aeabi_dcmple>
 801841e:	b140      	cbz	r0, 8018432 <__ieee754_sqrt+0x15e>
 8018420:	f1b5 3fff 	cmp.w	r5, #4294967295
 8018424:	e9da 0100 	ldrd	r0, r1, [sl]
 8018428:	e9db 2300 	ldrd	r2, r3, [fp]
 801842c:	d10e      	bne.n	801844c <__ieee754_sqrt+0x178>
 801842e:	3601      	adds	r6, #1
 8018430:	4625      	mov	r5, r4
 8018432:	1073      	asrs	r3, r6, #1
 8018434:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 8018438:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 801843c:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 8018440:	086b      	lsrs	r3, r5, #1
 8018442:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 8018446:	e759      	b.n	80182fc <__ieee754_sqrt+0x28>
 8018448:	4690      	mov	r8, r2
 801844a:	e7c1      	b.n	80183d0 <__ieee754_sqrt+0xfc>
 801844c:	f7e7 ff1e 	bl	800028c <__adddf3>
 8018450:	e9da 8900 	ldrd	r8, r9, [sl]
 8018454:	4602      	mov	r2, r0
 8018456:	460b      	mov	r3, r1
 8018458:	4640      	mov	r0, r8
 801845a:	4649      	mov	r1, r9
 801845c:	f7e8 fb3e 	bl	8000adc <__aeabi_dcmplt>
 8018460:	b120      	cbz	r0, 801846c <__ieee754_sqrt+0x198>
 8018462:	1cab      	adds	r3, r5, #2
 8018464:	bf08      	it	eq
 8018466:	3601      	addeq	r6, #1
 8018468:	3502      	adds	r5, #2
 801846a:	e7e2      	b.n	8018432 <__ieee754_sqrt+0x15e>
 801846c:	1c6b      	adds	r3, r5, #1
 801846e:	f023 0501 	bic.w	r5, r3, #1
 8018472:	e7de      	b.n	8018432 <__ieee754_sqrt+0x15e>
 8018474:	7ff00000 	.word	0x7ff00000
 8018478:	08021120 	.word	0x08021120
 801847c:	08021118 	.word	0x08021118

08018480 <round>:
 8018480:	ec51 0b10 	vmov	r0, r1, d0
 8018484:	b570      	push	{r4, r5, r6, lr}
 8018486:	f3c1 540a 	ubfx	r4, r1, #20, #11
 801848a:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 801848e:	2a13      	cmp	r2, #19
 8018490:	460b      	mov	r3, r1
 8018492:	4605      	mov	r5, r0
 8018494:	dc1b      	bgt.n	80184ce <round+0x4e>
 8018496:	2a00      	cmp	r2, #0
 8018498:	da0b      	bge.n	80184b2 <round+0x32>
 801849a:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 801849e:	3201      	adds	r2, #1
 80184a0:	bf04      	itt	eq
 80184a2:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 80184a6:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 80184aa:	2200      	movs	r2, #0
 80184ac:	4619      	mov	r1, r3
 80184ae:	4610      	mov	r0, r2
 80184b0:	e015      	b.n	80184de <round+0x5e>
 80184b2:	4c15      	ldr	r4, [pc, #84]	@ (8018508 <round+0x88>)
 80184b4:	4114      	asrs	r4, r2
 80184b6:	ea04 0601 	and.w	r6, r4, r1
 80184ba:	4306      	orrs	r6, r0
 80184bc:	d00f      	beq.n	80184de <round+0x5e>
 80184be:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 80184c2:	fa41 f202 	asr.w	r2, r1, r2
 80184c6:	4413      	add	r3, r2
 80184c8:	ea23 0304 	bic.w	r3, r3, r4
 80184cc:	e7ed      	b.n	80184aa <round+0x2a>
 80184ce:	2a33      	cmp	r2, #51	@ 0x33
 80184d0:	dd08      	ble.n	80184e4 <round+0x64>
 80184d2:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 80184d6:	d102      	bne.n	80184de <round+0x5e>
 80184d8:	4602      	mov	r2, r0
 80184da:	f7e7 fed7 	bl	800028c <__adddf3>
 80184de:	ec41 0b10 	vmov	d0, r0, r1
 80184e2:	bd70      	pop	{r4, r5, r6, pc}
 80184e4:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 80184e8:	f04f 34ff 	mov.w	r4, #4294967295
 80184ec:	40f4      	lsrs	r4, r6
 80184ee:	4204      	tst	r4, r0
 80184f0:	d0f5      	beq.n	80184de <round+0x5e>
 80184f2:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 80184f6:	2201      	movs	r2, #1
 80184f8:	408a      	lsls	r2, r1
 80184fa:	1952      	adds	r2, r2, r5
 80184fc:	bf28      	it	cs
 80184fe:	3301      	addcs	r3, #1
 8018500:	ea22 0204 	bic.w	r2, r2, r4
 8018504:	e7d2      	b.n	80184ac <round+0x2c>
 8018506:	bf00      	nop
 8018508:	000fffff 	.word	0x000fffff

0801850c <_init>:
 801850c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801850e:	bf00      	nop
 8018510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018512:	bc08      	pop	{r3}
 8018514:	469e      	mov	lr, r3
 8018516:	4770      	bx	lr

08018518 <_fini>:
 8018518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801851a:	bf00      	nop
 801851c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801851e:	bc08      	pop	{r3}
 8018520:	469e      	mov	lr, r3
 8018522:	4770      	bx	lr
