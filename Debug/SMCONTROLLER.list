
SMCONTROLLER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013c20  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002d80  08013db0  08013db0  00014db0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016b30  08016b30  000180d0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08016b30  08016b30  00017b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016b38  08016b38  000180d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016b38  08016b38  00017b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08016b3c  08016b3c  00017b3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000d0  20000000  08016b40  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000180d0  2**0
                  CONTENTS
 10 .bss          00008ae4  200000d0  200000d0  000180d0  2**2
                  ALLOC
 11 ._user_heap_stack 00006004  20008bb4  20008bb4  000180d0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000180d0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002c76a  00000000  00000000  00018100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000675d  00000000  00000000  0004486a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002600  00000000  00000000  0004afc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001e5b  00000000  00000000  0004d5c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000fbfe  00000000  00000000  0004f423  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00036d61  00000000  00000000  0005f021  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fc934  00000000  00000000  00095d82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001926b6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000b128  00000000  00000000  001926fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  0019d824  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000d0 	.word	0x200000d0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08013d98 	.word	0x08013d98

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000d4 	.word	0x200000d4
 80001cc:	08013d98 	.word	0x08013d98

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2uiz>:
 8000b1c:	004a      	lsls	r2, r1, #1
 8000b1e:	d211      	bcs.n	8000b44 <__aeabi_d2uiz+0x28>
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b24:	d211      	bcs.n	8000b4a <__aeabi_d2uiz+0x2e>
 8000b26:	d50d      	bpl.n	8000b44 <__aeabi_d2uiz+0x28>
 8000b28:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d40e      	bmi.n	8000b50 <__aeabi_d2uiz+0x34>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b42:	4770      	bx	lr
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4e:	d102      	bne.n	8000b56 <__aeabi_d2uiz+0x3a>
 8000b50:	f04f 30ff 	mov.w	r0, #4294967295
 8000b54:	4770      	bx	lr
 8000b56:	f04f 0000 	mov.w	r0, #0
 8000b5a:	4770      	bx	lr

08000b5c <__aeabi_d2f>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b64:	bf24      	itt	cs
 8000b66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b6e:	d90d      	bls.n	8000b8c <__aeabi_d2f+0x30>
 8000b70:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b7c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b84:	bf08      	it	eq
 8000b86:	f020 0001 	biceq.w	r0, r0, #1
 8000b8a:	4770      	bx	lr
 8000b8c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b90:	d121      	bne.n	8000bd6 <__aeabi_d2f+0x7a>
 8000b92:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b96:	bfbc      	itt	lt
 8000b98:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b9c:	4770      	bxlt	lr
 8000b9e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ba2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba6:	f1c2 0218 	rsb	r2, r2, #24
 8000baa:	f1c2 0c20 	rsb	ip, r2, #32
 8000bae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bb2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb6:	bf18      	it	ne
 8000bb8:	f040 0001 	orrne.w	r0, r0, #1
 8000bbc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc8:	ea40 000c 	orr.w	r0, r0, ip
 8000bcc:	fa23 f302 	lsr.w	r3, r3, r2
 8000bd0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd4:	e7cc      	b.n	8000b70 <__aeabi_d2f+0x14>
 8000bd6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bda:	d107      	bne.n	8000bec <__aeabi_d2f+0x90>
 8000bdc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000be0:	bf1e      	ittt	ne
 8000be2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000be6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bea:	4770      	bxne	lr
 8000bec:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bf0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bf4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop

08000bfc <__aeabi_uldivmod>:
 8000bfc:	b953      	cbnz	r3, 8000c14 <__aeabi_uldivmod+0x18>
 8000bfe:	b94a      	cbnz	r2, 8000c14 <__aeabi_uldivmod+0x18>
 8000c00:	2900      	cmp	r1, #0
 8000c02:	bf08      	it	eq
 8000c04:	2800      	cmpeq	r0, #0
 8000c06:	bf1c      	itt	ne
 8000c08:	f04f 31ff 	movne.w	r1, #4294967295
 8000c0c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c10:	f000 b988 	b.w	8000f24 <__aeabi_idiv0>
 8000c14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c1c:	f000 f806 	bl	8000c2c <__udivmoddi4>
 8000c20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c28:	b004      	add	sp, #16
 8000c2a:	4770      	bx	lr

08000c2c <__udivmoddi4>:
 8000c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c30:	9d08      	ldr	r5, [sp, #32]
 8000c32:	468e      	mov	lr, r1
 8000c34:	4604      	mov	r4, r0
 8000c36:	4688      	mov	r8, r1
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d14a      	bne.n	8000cd2 <__udivmoddi4+0xa6>
 8000c3c:	428a      	cmp	r2, r1
 8000c3e:	4617      	mov	r7, r2
 8000c40:	d962      	bls.n	8000d08 <__udivmoddi4+0xdc>
 8000c42:	fab2 f682 	clz	r6, r2
 8000c46:	b14e      	cbz	r6, 8000c5c <__udivmoddi4+0x30>
 8000c48:	f1c6 0320 	rsb	r3, r6, #32
 8000c4c:	fa01 f806 	lsl.w	r8, r1, r6
 8000c50:	fa20 f303 	lsr.w	r3, r0, r3
 8000c54:	40b7      	lsls	r7, r6
 8000c56:	ea43 0808 	orr.w	r8, r3, r8
 8000c5a:	40b4      	lsls	r4, r6
 8000c5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c60:	fa1f fc87 	uxth.w	ip, r7
 8000c64:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c68:	0c23      	lsrs	r3, r4, #16
 8000c6a:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c6e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c72:	fb01 f20c 	mul.w	r2, r1, ip
 8000c76:	429a      	cmp	r2, r3
 8000c78:	d909      	bls.n	8000c8e <__udivmoddi4+0x62>
 8000c7a:	18fb      	adds	r3, r7, r3
 8000c7c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c80:	f080 80ea 	bcs.w	8000e58 <__udivmoddi4+0x22c>
 8000c84:	429a      	cmp	r2, r3
 8000c86:	f240 80e7 	bls.w	8000e58 <__udivmoddi4+0x22c>
 8000c8a:	3902      	subs	r1, #2
 8000c8c:	443b      	add	r3, r7
 8000c8e:	1a9a      	subs	r2, r3, r2
 8000c90:	b2a3      	uxth	r3, r4
 8000c92:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c96:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c9e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ca2:	459c      	cmp	ip, r3
 8000ca4:	d909      	bls.n	8000cba <__udivmoddi4+0x8e>
 8000ca6:	18fb      	adds	r3, r7, r3
 8000ca8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cac:	f080 80d6 	bcs.w	8000e5c <__udivmoddi4+0x230>
 8000cb0:	459c      	cmp	ip, r3
 8000cb2:	f240 80d3 	bls.w	8000e5c <__udivmoddi4+0x230>
 8000cb6:	443b      	add	r3, r7
 8000cb8:	3802      	subs	r0, #2
 8000cba:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cbe:	eba3 030c 	sub.w	r3, r3, ip
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	b11d      	cbz	r5, 8000cce <__udivmoddi4+0xa2>
 8000cc6:	40f3      	lsrs	r3, r6
 8000cc8:	2200      	movs	r2, #0
 8000cca:	e9c5 3200 	strd	r3, r2, [r5]
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d905      	bls.n	8000ce2 <__udivmoddi4+0xb6>
 8000cd6:	b10d      	cbz	r5, 8000cdc <__udivmoddi4+0xb0>
 8000cd8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cdc:	2100      	movs	r1, #0
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e7f5      	b.n	8000cce <__udivmoddi4+0xa2>
 8000ce2:	fab3 f183 	clz	r1, r3
 8000ce6:	2900      	cmp	r1, #0
 8000ce8:	d146      	bne.n	8000d78 <__udivmoddi4+0x14c>
 8000cea:	4573      	cmp	r3, lr
 8000cec:	d302      	bcc.n	8000cf4 <__udivmoddi4+0xc8>
 8000cee:	4282      	cmp	r2, r0
 8000cf0:	f200 8105 	bhi.w	8000efe <__udivmoddi4+0x2d2>
 8000cf4:	1a84      	subs	r4, r0, r2
 8000cf6:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cfa:	2001      	movs	r0, #1
 8000cfc:	4690      	mov	r8, r2
 8000cfe:	2d00      	cmp	r5, #0
 8000d00:	d0e5      	beq.n	8000cce <__udivmoddi4+0xa2>
 8000d02:	e9c5 4800 	strd	r4, r8, [r5]
 8000d06:	e7e2      	b.n	8000cce <__udivmoddi4+0xa2>
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	f000 8090 	beq.w	8000e2e <__udivmoddi4+0x202>
 8000d0e:	fab2 f682 	clz	r6, r2
 8000d12:	2e00      	cmp	r6, #0
 8000d14:	f040 80a4 	bne.w	8000e60 <__udivmoddi4+0x234>
 8000d18:	1a8a      	subs	r2, r1, r2
 8000d1a:	0c03      	lsrs	r3, r0, #16
 8000d1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d20:	b280      	uxth	r0, r0
 8000d22:	b2bc      	uxth	r4, r7
 8000d24:	2101      	movs	r1, #1
 8000d26:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d2a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d32:	fb04 f20c 	mul.w	r2, r4, ip
 8000d36:	429a      	cmp	r2, r3
 8000d38:	d907      	bls.n	8000d4a <__udivmoddi4+0x11e>
 8000d3a:	18fb      	adds	r3, r7, r3
 8000d3c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d40:	d202      	bcs.n	8000d48 <__udivmoddi4+0x11c>
 8000d42:	429a      	cmp	r2, r3
 8000d44:	f200 80e0 	bhi.w	8000f08 <__udivmoddi4+0x2dc>
 8000d48:	46c4      	mov	ip, r8
 8000d4a:	1a9b      	subs	r3, r3, r2
 8000d4c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d50:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d54:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d58:	fb02 f404 	mul.w	r4, r2, r4
 8000d5c:	429c      	cmp	r4, r3
 8000d5e:	d907      	bls.n	8000d70 <__udivmoddi4+0x144>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d66:	d202      	bcs.n	8000d6e <__udivmoddi4+0x142>
 8000d68:	429c      	cmp	r4, r3
 8000d6a:	f200 80ca 	bhi.w	8000f02 <__udivmoddi4+0x2d6>
 8000d6e:	4602      	mov	r2, r0
 8000d70:	1b1b      	subs	r3, r3, r4
 8000d72:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d76:	e7a5      	b.n	8000cc4 <__udivmoddi4+0x98>
 8000d78:	f1c1 0620 	rsb	r6, r1, #32
 8000d7c:	408b      	lsls	r3, r1
 8000d7e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d82:	431f      	orrs	r7, r3
 8000d84:	fa0e f401 	lsl.w	r4, lr, r1
 8000d88:	fa20 f306 	lsr.w	r3, r0, r6
 8000d8c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d90:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d94:	4323      	orrs	r3, r4
 8000d96:	fa00 f801 	lsl.w	r8, r0, r1
 8000d9a:	fa1f fc87 	uxth.w	ip, r7
 8000d9e:	fbbe f0f9 	udiv	r0, lr, r9
 8000da2:	0c1c      	lsrs	r4, r3, #16
 8000da4:	fb09 ee10 	mls	lr, r9, r0, lr
 8000da8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000dac:	fb00 fe0c 	mul.w	lr, r0, ip
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	fa02 f201 	lsl.w	r2, r2, r1
 8000db6:	d909      	bls.n	8000dcc <__udivmoddi4+0x1a0>
 8000db8:	193c      	adds	r4, r7, r4
 8000dba:	f100 3aff 	add.w	sl, r0, #4294967295
 8000dbe:	f080 809c 	bcs.w	8000efa <__udivmoddi4+0x2ce>
 8000dc2:	45a6      	cmp	lr, r4
 8000dc4:	f240 8099 	bls.w	8000efa <__udivmoddi4+0x2ce>
 8000dc8:	3802      	subs	r0, #2
 8000dca:	443c      	add	r4, r7
 8000dcc:	eba4 040e 	sub.w	r4, r4, lr
 8000dd0:	fa1f fe83 	uxth.w	lr, r3
 8000dd4:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd8:	fb09 4413 	mls	r4, r9, r3, r4
 8000ddc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000de0:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de4:	45a4      	cmp	ip, r4
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x1ce>
 8000de8:	193c      	adds	r4, r7, r4
 8000dea:	f103 3eff 	add.w	lr, r3, #4294967295
 8000dee:	f080 8082 	bcs.w	8000ef6 <__udivmoddi4+0x2ca>
 8000df2:	45a4      	cmp	ip, r4
 8000df4:	d97f      	bls.n	8000ef6 <__udivmoddi4+0x2ca>
 8000df6:	3b02      	subs	r3, #2
 8000df8:	443c      	add	r4, r7
 8000dfa:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dfe:	eba4 040c 	sub.w	r4, r4, ip
 8000e02:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e06:	4564      	cmp	r4, ip
 8000e08:	4673      	mov	r3, lr
 8000e0a:	46e1      	mov	r9, ip
 8000e0c:	d362      	bcc.n	8000ed4 <__udivmoddi4+0x2a8>
 8000e0e:	d05f      	beq.n	8000ed0 <__udivmoddi4+0x2a4>
 8000e10:	b15d      	cbz	r5, 8000e2a <__udivmoddi4+0x1fe>
 8000e12:	ebb8 0203 	subs.w	r2, r8, r3
 8000e16:	eb64 0409 	sbc.w	r4, r4, r9
 8000e1a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1e:	fa22 f301 	lsr.w	r3, r2, r1
 8000e22:	431e      	orrs	r6, r3
 8000e24:	40cc      	lsrs	r4, r1
 8000e26:	e9c5 6400 	strd	r6, r4, [r5]
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	e74f      	b.n	8000cce <__udivmoddi4+0xa2>
 8000e2e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e32:	0c01      	lsrs	r1, r0, #16
 8000e34:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e38:	b280      	uxth	r0, r0
 8000e3a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e3e:	463b      	mov	r3, r7
 8000e40:	4638      	mov	r0, r7
 8000e42:	463c      	mov	r4, r7
 8000e44:	46b8      	mov	r8, r7
 8000e46:	46be      	mov	lr, r7
 8000e48:	2620      	movs	r6, #32
 8000e4a:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e4e:	eba2 0208 	sub.w	r2, r2, r8
 8000e52:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e56:	e766      	b.n	8000d26 <__udivmoddi4+0xfa>
 8000e58:	4601      	mov	r1, r0
 8000e5a:	e718      	b.n	8000c8e <__udivmoddi4+0x62>
 8000e5c:	4610      	mov	r0, r2
 8000e5e:	e72c      	b.n	8000cba <__udivmoddi4+0x8e>
 8000e60:	f1c6 0220 	rsb	r2, r6, #32
 8000e64:	fa2e f302 	lsr.w	r3, lr, r2
 8000e68:	40b7      	lsls	r7, r6
 8000e6a:	40b1      	lsls	r1, r6
 8000e6c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e70:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e74:	430a      	orrs	r2, r1
 8000e76:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e7a:	b2bc      	uxth	r4, r7
 8000e7c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e80:	0c11      	lsrs	r1, r2, #16
 8000e82:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e86:	fb08 f904 	mul.w	r9, r8, r4
 8000e8a:	40b0      	lsls	r0, r6
 8000e8c:	4589      	cmp	r9, r1
 8000e8e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e92:	b280      	uxth	r0, r0
 8000e94:	d93e      	bls.n	8000f14 <__udivmoddi4+0x2e8>
 8000e96:	1879      	adds	r1, r7, r1
 8000e98:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e9c:	d201      	bcs.n	8000ea2 <__udivmoddi4+0x276>
 8000e9e:	4589      	cmp	r9, r1
 8000ea0:	d81f      	bhi.n	8000ee2 <__udivmoddi4+0x2b6>
 8000ea2:	eba1 0109 	sub.w	r1, r1, r9
 8000ea6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eaa:	fb09 f804 	mul.w	r8, r9, r4
 8000eae:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eb2:	b292      	uxth	r2, r2
 8000eb4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000eb8:	4542      	cmp	r2, r8
 8000eba:	d229      	bcs.n	8000f10 <__udivmoddi4+0x2e4>
 8000ebc:	18ba      	adds	r2, r7, r2
 8000ebe:	f109 31ff 	add.w	r1, r9, #4294967295
 8000ec2:	d2c4      	bcs.n	8000e4e <__udivmoddi4+0x222>
 8000ec4:	4542      	cmp	r2, r8
 8000ec6:	d2c2      	bcs.n	8000e4e <__udivmoddi4+0x222>
 8000ec8:	f1a9 0102 	sub.w	r1, r9, #2
 8000ecc:	443a      	add	r2, r7
 8000ece:	e7be      	b.n	8000e4e <__udivmoddi4+0x222>
 8000ed0:	45f0      	cmp	r8, lr
 8000ed2:	d29d      	bcs.n	8000e10 <__udivmoddi4+0x1e4>
 8000ed4:	ebbe 0302 	subs.w	r3, lr, r2
 8000ed8:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000edc:	3801      	subs	r0, #1
 8000ede:	46e1      	mov	r9, ip
 8000ee0:	e796      	b.n	8000e10 <__udivmoddi4+0x1e4>
 8000ee2:	eba7 0909 	sub.w	r9, r7, r9
 8000ee6:	4449      	add	r1, r9
 8000ee8:	f1a8 0c02 	sub.w	ip, r8, #2
 8000eec:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ef0:	fb09 f804 	mul.w	r8, r9, r4
 8000ef4:	e7db      	b.n	8000eae <__udivmoddi4+0x282>
 8000ef6:	4673      	mov	r3, lr
 8000ef8:	e77f      	b.n	8000dfa <__udivmoddi4+0x1ce>
 8000efa:	4650      	mov	r0, sl
 8000efc:	e766      	b.n	8000dcc <__udivmoddi4+0x1a0>
 8000efe:	4608      	mov	r0, r1
 8000f00:	e6fd      	b.n	8000cfe <__udivmoddi4+0xd2>
 8000f02:	443b      	add	r3, r7
 8000f04:	3a02      	subs	r2, #2
 8000f06:	e733      	b.n	8000d70 <__udivmoddi4+0x144>
 8000f08:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f0c:	443b      	add	r3, r7
 8000f0e:	e71c      	b.n	8000d4a <__udivmoddi4+0x11e>
 8000f10:	4649      	mov	r1, r9
 8000f12:	e79c      	b.n	8000e4e <__udivmoddi4+0x222>
 8000f14:	eba1 0109 	sub.w	r1, r1, r9
 8000f18:	46c4      	mov	ip, r8
 8000f1a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f1e:	fb09 f804 	mul.w	r8, r9, r4
 8000f22:	e7c4      	b.n	8000eae <__udivmoddi4+0x282>

08000f24 <__aeabi_idiv0>:
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop

08000f28 <fifoInit>:

/** Функция инициализации fifo буфера
 * 	при инициализации указывается размер буфера
 */
void fifoInit(uint16_t size, FIFO_StructDef* buf)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	6039      	str	r1, [r7, #0]
 8000f32:	80fb      	strh	r3, [r7, #6]
	buf->size = size;
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	88fa      	ldrh	r2, [r7, #6]
 8000f38:	811a      	strh	r2, [r3, #8]

	if(size <= FIFO_SIZE_MAX)
 8000f3a:	88fb      	ldrh	r3, [r7, #6]
 8000f3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000f40:	d809      	bhi.n	8000f56 <fifoInit+0x2e>
	{
		buf->data = (int*)calloc(size, sizeof(int16_t));
 8000f42:	88fb      	ldrh	r3, [r7, #6]
 8000f44:	2102      	movs	r1, #2
 8000f46:	4618      	mov	r0, r3
 8000f48:	f011 fc4e 	bl	80127e8 <calloc>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	461a      	mov	r2, r3
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	e008      	b.n	8000f68 <fifoInit+0x40>
	}
	else buf->data = (int*)calloc(FIFO_SIZE_MAX, sizeof(int16_t));
 8000f56:	2102      	movs	r1, #2
 8000f58:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8000f5c:	f011 fc44 	bl	80127e8 <calloc>
 8000f60:	4603      	mov	r3, r0
 8000f62:	461a      	mov	r2, r3
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	601a      	str	r2, [r3, #0]

	buf->head = 1;
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	80da      	strh	r2, [r3, #6]
	buf->tail = 0;
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	2200      	movs	r2, #0
 8000f72:	809a      	strh	r2, [r3, #4]
}
 8000f74:	bf00      	nop
 8000f76:	3708      	adds	r7, #8
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <cellsForRead>:
}

/** Число ячеек доступных для ЧТЕНИЯ (заполненное пространство)
 */
uint16_t cellsForRead(FIFO_StructDef* buf)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
    if (buf->head < buf->tail)  return buf->size - buf->tail + buf->head - 1;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	88db      	ldrh	r3, [r3, #6]
 8000f88:	b29a      	uxth	r2, r3
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	889b      	ldrh	r3, [r3, #4]
 8000f8e:	b29b      	uxth	r3, r3
 8000f90:	429a      	cmp	r2, r3
 8000f92:	d20f      	bcs.n	8000fb4 <cellsForRead+0x38>
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	891b      	ldrh	r3, [r3, #8]
 8000f98:	b29a      	uxth	r2, r3
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	889b      	ldrh	r3, [r3, #4]
 8000f9e:	b29b      	uxth	r3, r3
 8000fa0:	1ad3      	subs	r3, r2, r3
 8000fa2:	b29a      	uxth	r2, r3
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	88db      	ldrh	r3, [r3, #6]
 8000fa8:	b29b      	uxth	r3, r3
 8000faa:	4413      	add	r3, r2
 8000fac:	b29b      	uxth	r3, r3
 8000fae:	3b01      	subs	r3, #1
 8000fb0:	b29b      	uxth	r3, r3
 8000fb2:	e009      	b.n	8000fc8 <cellsForRead+0x4c>
    else return buf->head - buf->tail - 1;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	88db      	ldrh	r3, [r3, #6]
 8000fb8:	b29a      	uxth	r2, r3
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	889b      	ldrh	r3, [r3, #4]
 8000fbe:	b29b      	uxth	r3, r3
 8000fc0:	1ad3      	subs	r3, r2, r3
 8000fc2:	b29b      	uxth	r3, r3
 8000fc4:	3b01      	subs	r3, #1
 8000fc6:	b29b      	uxth	r3, r3
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	370c      	adds	r7, #12
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr

08000fd4 <availableForRead>:

/** Функция определения наличия доступных ячеек для ЧТЕНИЯ (заполненное пространство)
 */
bool availableForRead(FIFO_StructDef* buf)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
	if(cellsForRead(buf) > 0) return true;
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f7ff ffcd 	bl	8000f7c <cellsForRead>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <availableForRead+0x18>
 8000fe8:	2301      	movs	r3, #1
 8000fea:	e000      	b.n	8000fee <availableForRead+0x1a>
	else return false;
 8000fec:	2300      	movs	r3, #0
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <cellsForWrite>:

/** Число ячеек доступных для ЗАПИСИ (доступное пространство)
 */
uint16_t cellsForWrite(FIFO_StructDef* buf)
{
 8000ff6:	b590      	push	{r4, r7, lr}
 8000ff8:	b083      	sub	sp, #12
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	6078      	str	r0, [r7, #4]
	return buf->size - cellsForRead(buf) - 2;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	891b      	ldrh	r3, [r3, #8]
 8001002:	b29c      	uxth	r4, r3
 8001004:	6878      	ldr	r0, [r7, #4]
 8001006:	f7ff ffb9 	bl	8000f7c <cellsForRead>
 800100a:	4603      	mov	r3, r0
 800100c:	1ae3      	subs	r3, r4, r3
 800100e:	b29b      	uxth	r3, r3
 8001010:	3b02      	subs	r3, #2
 8001012:	b29b      	uxth	r3, r3
}
 8001014:	4618      	mov	r0, r3
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	bd90      	pop	{r4, r7, pc}

0800101c <availableForWrite>:

/** Функция определения наличия доступных ячеек для ЗАПИСИ (доступное пространство)
 */
bool availableForWrite(FIFO_StructDef* buf)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
	if(cellsForWrite(buf) == 0) return false;
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f7ff ffe6 	bl	8000ff6 <cellsForWrite>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d101      	bne.n	8001034 <availableForWrite+0x18>
 8001030:	2300      	movs	r3, #0
 8001032:	e000      	b.n	8001036 <availableForWrite+0x1a>
	else return true;
 8001034:	2301      	movs	r3, #1
}
 8001036:	4618      	mov	r0, r3
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <fifoWrite>:

/** Записать ячейку данных в буфер и переместить указатель "голова" на одну позицию
 */
fifo_state_t fifoWrite(FIFO_StructDef* buf, int32_t value)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	b082      	sub	sp, #8
 8001042:	af00      	add	r7, sp, #0
 8001044:	6078      	str	r0, [r7, #4]
 8001046:	6039      	str	r1, [r7, #0]
	if(availableForWrite(buf) == false) return FIFO_OVERFLOW;
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	f7ff ffe7 	bl	800101c <availableForWrite>
 800104e:	4603      	mov	r3, r0
 8001050:	f083 0301 	eor.w	r3, r3, #1
 8001054:	b2db      	uxtb	r3, r3
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <fifoWrite+0x20>
 800105a:	2302      	movs	r3, #2
 800105c:	e01b      	b.n	8001096 <fifoWrite+0x58>

	if (buf->head >= buf->size) buf->head = 0;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	88db      	ldrh	r3, [r3, #6]
 8001062:	b29a      	uxth	r2, r3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	891b      	ldrh	r3, [r3, #8]
 8001068:	b29b      	uxth	r3, r3
 800106a:	429a      	cmp	r2, r3
 800106c:	d302      	bcc.n	8001074 <fifoWrite+0x36>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2200      	movs	r2, #0
 8001072:	80da      	strh	r2, [r3, #6]

	buf->data[buf->head] = value;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	88db      	ldrh	r3, [r3, #6]
 800107c:	b29b      	uxth	r3, r3
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	4413      	add	r3, r2
 8001082:	683a      	ldr	r2, [r7, #0]
 8001084:	601a      	str	r2, [r3, #0]
	buf->head++;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	88db      	ldrh	r3, [r3, #6]
 800108a:	b29b      	uxth	r3, r3
 800108c:	3301      	adds	r3, #1
 800108e:	b29a      	uxth	r2, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	80da      	strh	r2, [r3, #6]

	return FIFO_OK;
 8001094:	2303      	movs	r3, #3
}
 8001096:	4618      	mov	r0, r3
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}

0800109e <fifoRead>:
/** Прочитать ячейку данных из буфера и переместить указатель "хвост" на одну позицию
 * 	Функция принимает указатель на переменную, в которую записывается значение последней
 * 	ячейки fifo буфера
 */
fifo_state_t fifoRead(FIFO_StructDef* buf, int32_t* ptr_value)
{
 800109e:	b580      	push	{r7, lr}
 80010a0:	b082      	sub	sp, #8
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]
 80010a6:	6039      	str	r1, [r7, #0]
	if(ptr_value == NULL) return FIFO_ERR;
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d101      	bne.n	80010b2 <fifoRead+0x14>
 80010ae:	2300      	movs	r3, #0
 80010b0:	e027      	b.n	8001102 <fifoRead+0x64>

	if(availableForRead(buf) == false) return FIFO_EMPTY;
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f7ff ff8e 	bl	8000fd4 <availableForRead>
 80010b8:	4603      	mov	r3, r0
 80010ba:	f083 0301 	eor.w	r3, r3, #1
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <fifoRead+0x2a>
 80010c4:	2301      	movs	r3, #1
 80010c6:	e01c      	b.n	8001102 <fifoRead+0x64>

	buf->tail++;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	889b      	ldrh	r3, [r3, #4]
 80010cc:	b29b      	uxth	r3, r3
 80010ce:	3301      	adds	r3, #1
 80010d0:	b29a      	uxth	r2, r3
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	809a      	strh	r2, [r3, #4]
	if (buf->tail >= buf->size) buf->tail = 0;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	889b      	ldrh	r3, [r3, #4]
 80010da:	b29a      	uxth	r2, r3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	891b      	ldrh	r3, [r3, #8]
 80010e0:	b29b      	uxth	r3, r3
 80010e2:	429a      	cmp	r2, r3
 80010e4:	d302      	bcc.n	80010ec <fifoRead+0x4e>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2200      	movs	r2, #0
 80010ea:	809a      	strh	r2, [r3, #4]

	*ptr_value = buf->data[buf->tail];
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	889b      	ldrh	r3, [r3, #4]
 80010f4:	b29b      	uxth	r3, r3
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	4413      	add	r3, r2
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	601a      	str	r2, [r3, #0]

	return FIFO_OK;
 8001100:	2303      	movs	r3, #3
}
 8001102:	4618      	mov	r0, r3
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
	...

0800110c <udpSocketInit>:
/* --------------------------------------- Прототипы функций библиотеки net.h --------------------------------------- */

/** Функция инициализации UDP сетевого интерфейса
 */
void udpSocketInit(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
	/* Переменная ошибок работы UDP интерфейса */
	err_t err;

	/* Новый UDP управляющий блок */
	upcb = udp_new();
 8001112:	f00f f85b 	bl	80101cc <udp_new>
 8001116:	4603      	mov	r3, r0
 8001118:	4a15      	ldr	r2, [pc, #84]	@ (8001170 <udpSocketInit+0x64>)
 800111a:	6013      	str	r3, [r2, #0]

	/* Связать IP адрес и порт */
	ip_addr_t myIPaddr;

	/* IP адрес устройства */
	IP_ADDR4(&myIPaddr, 192, 168, 1, 156);
 800111c:	4b15      	ldr	r3, [pc, #84]	@ (8001174 <udpSocketInit+0x68>)
 800111e:	60bb      	str	r3, [r7, #8]
	udp_bind(upcb, &myIPaddr, 1556);
 8001120:	4b13      	ldr	r3, [pc, #76]	@ (8001170 <udpSocketInit+0x64>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f107 0108 	add.w	r1, r7, #8
 8001128:	f240 6214 	movw	r2, #1556	@ 0x614
 800112c:	4618      	mov	r0, r3
 800112e:	f00e ff37 	bl	800ffa0 <udp_bind>

	/* Конфигурация IP адреса и порта назначения - ПК */
	ip_addr_t DestIPaddr;
	IP_ADDR4(&DestIPaddr, 192, 168, 1, 2);
 8001132:	4b11      	ldr	r3, [pc, #68]	@ (8001178 <udpSocketInit+0x6c>)
 8001134:	607b      	str	r3, [r7, #4]
	err = udp_connect(upcb, &DestIPaddr, 1555);
 8001136:	4b0e      	ldr	r3, [pc, #56]	@ (8001170 <udpSocketInit+0x64>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	1d39      	adds	r1, r7, #4
 800113c:	f240 6213 	movw	r2, #1555	@ 0x613
 8001140:	4618      	mov	r0, r3
 8001142:	f00e ffb5 	bl	80100b0 <udp_connect>
 8001146:	4603      	mov	r3, r0
 8001148:	73fb      	strb	r3, [r7, #15]

	if (err == ERR_OK)
 800114a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d106      	bne.n	8001160 <udpSocketInit+0x54>
	{
		/* Передача указателя на функцию обработчика входящих пакетов в структуру UDP интерфейса */
		udp_recv(upcb, udpReceiveCallback, NULL);
 8001152:	4b07      	ldr	r3, [pc, #28]	@ (8001170 <udpSocketInit+0x64>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	2200      	movs	r2, #0
 8001158:	4908      	ldr	r1, [pc, #32]	@ (800117c <udpSocketInit+0x70>)
 800115a:	4618      	mov	r0, r3
 800115c:	f00f f816 	bl	801018c <udp_recv>
	}

	/* Инициализация буфера сетевого интерфейса с размеров 5*(sizeof(int16_t)) = 10 байт*/
	fifoInit(5, &netBuf);
 8001160:	4907      	ldr	r1, [pc, #28]	@ (8001180 <udpSocketInit+0x74>)
 8001162:	2005      	movs	r0, #5
 8001164:	f7ff fee0 	bl	8000f28 <fifoInit>
}
 8001168:	bf00      	nop
 800116a:	3710      	adds	r7, #16
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	200000ec 	.word	0x200000ec
 8001174:	9c01a8c0 	.word	0x9c01a8c0
 8001178:	0201a8c0 	.word	0x0201a8c0
 800117c:	08001185 	.word	0x08001185
 8001180:	20000174 	.word	0x20000174

08001184 <udpReceiveCallback>:

/** Функция обработки принятых пакетов UDP
 */
void udpReceiveCallback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	60f8      	str	r0, [r7, #12]
 800118c:	60b9      	str	r1, [r7, #8]
 800118e:	607a      	str	r2, [r7, #4]
 8001190:	603b      	str	r3, [r7, #0]
	strncpy(rxBuf, (char *)p->payload, p->len);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6859      	ldr	r1, [r3, #4]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	895b      	ldrh	r3, [r3, #10]
 800119a:	461a      	mov	r2, r3
 800119c:	4808      	ldr	r0, [pc, #32]	@ (80011c0 <udpReceiveCallback+0x3c>)
 800119e:	f011 fe1a 	bl	8012dd6 <strncpy>
	counter ++;
 80011a2:	4b08      	ldr	r3, [pc, #32]	@ (80011c4 <udpReceiveCallback+0x40>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	3301      	adds	r3, #1
 80011a8:	4a06      	ldr	r2, [pc, #24]	@ (80011c4 <udpReceiveCallback+0x40>)
 80011aa:	6013      	str	r3, [r2, #0]
	pbuf_free(p);
 80011ac:	6878      	ldr	r0, [r7, #4]
 80011ae:	f008 fd79 	bl	8009ca4 <pbuf_free>

	/* Вызов обработчик принятных сообщений */
	udpReceiveHandler();
 80011b2:	f001 fa87 	bl	80026c4 <udpReceiveHandler>
}
 80011b6:	bf00      	nop
 80011b8:	3710      	adds	r7, #16
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	200000f0 	.word	0x200000f0
 80011c4:	20000170 	.word	0x20000170

080011c8 <udpClientSend>:

/** Функция отправки сообщения по UDP
 */
void udpClientSend(char *buf)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b0c4      	sub	sp, #272	@ 0x110
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80011d2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80011d6:	6018      	str	r0, [r3, #0]
	struct pbuf *txBuf;
	char data[256];

	int len = sprintf(data, "%s\n", (char *)buf);
 80011d8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80011dc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80011e0:	f107 0008 	add.w	r0, r7, #8
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	4917      	ldr	r1, [pc, #92]	@ (8001244 <udpClientSend+0x7c>)
 80011e8:	f011 fd5e 	bl	8012ca8 <siprintf>
 80011ec:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c

	/* Выделить память под данные в буфере */
	txBuf = pbuf_alloc(PBUF_TRANSPORT, len, PBUF_RAM);
 80011f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80011f4:	b29b      	uxth	r3, r3
 80011f6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80011fa:	4619      	mov	r1, r3
 80011fc:	2036      	movs	r0, #54	@ 0x36
 80011fe:	f008 fa6d 	bl	80096dc <pbuf_alloc>
 8001202:	f8c7 0108 	str.w	r0, [r7, #264]	@ 0x108

	if (txBuf != NULL)
 8001206:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800120a:	2b00      	cmp	r3, #0
 800120c:	d014      	beq.n	8001238 <udpClientSend+0x70>
	{
		pbuf_take(txBuf, data, len);
 800120e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001212:	b29a      	uxth	r2, r3
 8001214:	f107 0308 	add.w	r3, r7, #8
 8001218:	4619      	mov	r1, r3
 800121a:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 800121e:	f008 ffad 	bl	800a17c <pbuf_take>
		udp_send(upcb, txBuf);
 8001222:	4b09      	ldr	r3, [pc, #36]	@ (8001248 <udpClientSend+0x80>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f8d7 1108 	ldr.w	r1, [r7, #264]	@ 0x108
 800122a:	4618      	mov	r0, r3
 800122c:	f00e fcce 	bl	800fbcc <udp_send>
    	pbuf_free(txBuf);
 8001230:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 8001234:	f008 fd36 	bl	8009ca4 <pbuf_free>
	}
}
 8001238:	bf00      	nop
 800123a:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	08013db0 	.word	0x08013db0
 8001248:	200000ec 	.word	0x200000ec

0800124c <DWT_Init>:
  * @brief  This function initializes the DWT counter.
  * @param[in] None
  * @return None
  */
void DWT_Init()
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
	/* Allow the use of the counter DWT */
	SCB_DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001250:	4b08      	ldr	r3, [pc, #32]	@ (8001274 <DWT_Init+0x28>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a07      	ldr	r2, [pc, #28]	@ (8001274 <DWT_Init+0x28>)
 8001256:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800125a:	6013      	str	r3, [r2, #0]
	/* Turn on the counter */
	DWT_CONTROL |= DWT_CTRL_CYCCNTENA_Msk;
 800125c:	4b06      	ldr	r3, [pc, #24]	@ (8001278 <DWT_Init+0x2c>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a05      	ldr	r2, [pc, #20]	@ (8001278 <DWT_Init+0x2c>)
 8001262:	f043 0301 	orr.w	r3, r3, #1
 8001266:	6013      	str	r3, [r2, #0]

}
 8001268:	bf00      	nop
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	e000edfc 	.word	0xe000edfc
 8001278:	e0001000 	.word	0xe0001000

0800127c <DWT_usDelay>:
  * @brief  This function produces a time delay in us.
  * @param[in] Time in us
  * @return None
  */
void DWT_usDelay(uint32_t us)
{
 800127c:	b480      	push	{r7}
 800127e:	b085      	sub	sp, #20
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
	/* Convert microseconds to processor ticks */
	uint32_t us_count_tic =  us * (SystemCoreClock / 1000000);
 8001284:	4b0c      	ldr	r3, [pc, #48]	@ (80012b8 <DWT_usDelay+0x3c>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a0c      	ldr	r2, [pc, #48]	@ (80012bc <DWT_usDelay+0x40>)
 800128a:	fba2 2303 	umull	r2, r3, r2, r3
 800128e:	0c9a      	lsrs	r2, r3, #18
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	fb02 f303 	mul.w	r3, r2, r3
 8001296:	60fb      	str	r3, [r7, #12]
	/* Reset the counter */
	DWT_CYCCNT = 0;
 8001298:	4b09      	ldr	r3, [pc, #36]	@ (80012c0 <DWT_usDelay+0x44>)
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
	while(DWT_CYCCNT < us_count_tic);
 800129e:	bf00      	nop
 80012a0:	4b07      	ldr	r3, [pc, #28]	@ (80012c0 <DWT_usDelay+0x44>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	68fa      	ldr	r2, [r7, #12]
 80012a6:	429a      	cmp	r2, r3
 80012a8:	d8fa      	bhi.n	80012a0 <DWT_usDelay+0x24>
}
 80012aa:	bf00      	nop
 80012ac:	bf00      	nop
 80012ae:	3714      	adds	r7, #20
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr
 80012b8:	20000048 	.word	0x20000048
 80012bc:	431bde83 	.word	0x431bde83
 80012c0:	e0001004 	.word	0xe0001004

080012c4 <stepperFunctionsInit>:

/**	Функция инициализации указателей на функции из других областей программы
 * 	для использования в данной библиотеке
 */
void stepperFunctionsInit(writePinFunction_void_ptr function)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
	setPin = function;
 80012cc:	4a04      	ldr	r2, [pc, #16]	@ (80012e0 <stepperFunctionsInit+0x1c>)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6013      	str	r3, [r2, #0]
}
 80012d2:	bf00      	nop
 80012d4:	370c      	adds	r7, #12
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	20000180 	.word	0x20000180

080012e4 <stepperInit>:
 *
 * 	Функция определяет пины шагового мотора и инициализирует начальные данные мотора -
 * 	позицию, направление, статус включения, глобальное определение поведения пинов DIR, EN
 */
void stepperInit(STEPPER_StructDef* stepper, STEPPER_PINS_StructDef* pins)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	6039      	str	r1, [r7, #0]
	stepper->stepper_pins.GPIOx_step = pins->GPIOx_step;
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	601a      	str	r2, [r3, #0]
	stepper->stepper_pins.GPIO_Pin_step = pins->GPIO_Pin_step;
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	889a      	ldrh	r2, [r3, #4]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	809a      	strh	r2, [r3, #4]

	stepper->stepper_pins.GPIOx_dir = pins->GPIOx_dir;
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	689a      	ldr	r2, [r3, #8]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	609a      	str	r2, [r3, #8]
	stepper->stepper_pins.GPIO_Pin_dir = pins->GPIO_Pin_dir;
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	899a      	ldrh	r2, [r3, #12]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	819a      	strh	r2, [r3, #12]
//	stepper->pins.GPIOx_en = pins->GPIOx_en;
//	stepper->pins.GPIO_Pin_en = pins->GPIO_Pin_en;

	/* ------------------ НЕ ИСПОЛЬЗУЕТСЯ ----------------- */

	stepper->stepper_pins.GPIOx_en = 0x0;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2200      	movs	r2, #0
 8001312:	611a      	str	r2, [r3, #16]
	stepper->stepper_pins.GPIO_Pin_en = 0x0;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2200      	movs	r2, #0
 8001318:	829a      	strh	r2, [r3, #20]

	stepper->pos = 0;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2200      	movs	r2, #0
 800131e:	619a      	str	r2, [r3, #24]
	stepper->dir = 1;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2201      	movs	r2, #1
 8001324:	771a      	strb	r2, [r3, #28]
	stepper->en = OFF;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2200      	movs	r2, #0
 800132a:	775a      	strb	r2, [r3, #29]

	stepper->_globEn = false;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2200      	movs	r2, #0
 8001330:	779a      	strb	r2, [r3, #30]
	stepper->_globDir = false;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2200      	movs	r2, #0
 8001336:	77da      	strb	r2, [r3, #31]
}
 8001338:	bf00      	nop
 800133a:	370c      	adds	r7, #12
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr

08001344 <doStep>:

/** Сделать шаг мотором
 */
void doStep(STEPPER_StructDef* stepper)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
	stepper->pos += stepper->dir;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	7f1b      	ldrb	r3, [r3, #28]
 8001350:	b25a      	sxtb	r2, r3
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	699b      	ldr	r3, [r3, #24]
 8001356:	441a      	add	r2, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	619a      	str	r2, [r3, #24]
	setDir(stepper, stepper->dir); /* Установить пин DIR в нужное состояние в соответствии с направлением вращения */
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	7f1b      	ldrb	r3, [r3, #28]
 8001360:	b25b      	sxtb	r3, r3
 8001362:	4619      	mov	r1, r3
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	f000 f819 	bl	800139c <setDir>

	setPin(stepper->stepper_pins.GPIOx_step, stepper->stepper_pins.GPIO_Pin_step, PIN_SET);
 800136a:	4b0b      	ldr	r3, [pc, #44]	@ (8001398 <doStep+0x54>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	687a      	ldr	r2, [r7, #4]
 8001370:	6810      	ldr	r0, [r2, #0]
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	8891      	ldrh	r1, [r2, #4]
 8001376:	2201      	movs	r2, #1
 8001378:	4798      	blx	r3
	DWT_usDelay(DRIVER_STEP_TIME);
 800137a:	2005      	movs	r0, #5
 800137c:	f7ff ff7e 	bl	800127c <DWT_usDelay>
	setPin(stepper->stepper_pins.GPIOx_step, stepper->stepper_pins.GPIO_Pin_step, PIN_RESET);
 8001380:	4b05      	ldr	r3, [pc, #20]	@ (8001398 <doStep+0x54>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	687a      	ldr	r2, [r7, #4]
 8001386:	6810      	ldr	r0, [r2, #0]
 8001388:	687a      	ldr	r2, [r7, #4]
 800138a:	8891      	ldrh	r1, [r2, #4]
 800138c:	2200      	movs	r2, #0
 800138e:	4798      	blx	r3
}
 8001390:	bf00      	nop
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	20000180 	.word	0x20000180

0800139c <setDir>:
 * 	dir = -1 - против часовой стрелки независимо от _globDir
 * 	Направление вращения определяется со стороны задней части мотора,
 * 	т.е. вал мотора смотрит от нас!
 */
void setDir(STEPPER_StructDef* stepper, int8_t dir)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	460b      	mov	r3, r1
 80013a6:	70fb      	strb	r3, [r7, #3]
	if(stepper->_globDir == false)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	7fdb      	ldrb	r3, [r3, #31]
 80013ac:	f083 0301 	eor.w	r3, r3, #1
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d01b      	beq.n	80013ee <setDir+0x52>
	{
		if(dir == 1)
 80013b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d10b      	bne.n	80013d6 <setDir+0x3a>
		{
			stepper->dir = 1;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2201      	movs	r2, #1
 80013c2:	771a      	strb	r2, [r3, #28]
			setPin(stepper->stepper_pins.GPIOx_dir, stepper->stepper_pins.GPIO_Pin_dir, PIN_SET);
 80013c4:	4b19      	ldr	r3, [pc, #100]	@ (800142c <setDir+0x90>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	687a      	ldr	r2, [r7, #4]
 80013ca:	6890      	ldr	r0, [r2, #8]
 80013cc:	687a      	ldr	r2, [r7, #4]
 80013ce:	8991      	ldrh	r1, [r2, #12]
 80013d0:	2201      	movs	r2, #1
 80013d2:	4798      	blx	r3
		else
		{
			stepper->dir = -1;
			setPin(stepper->stepper_pins.GPIOx_dir, stepper->stepper_pins.GPIO_Pin_dir, PIN_SET);
		}
}
 80013d4:	e026      	b.n	8001424 <setDir+0x88>
			stepper->dir = -1;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	22ff      	movs	r2, #255	@ 0xff
 80013da:	771a      	strb	r2, [r3, #28]
			setPin(stepper->stepper_pins.GPIOx_dir, stepper->stepper_pins.GPIO_Pin_dir, PIN_RESET);
 80013dc:	4b13      	ldr	r3, [pc, #76]	@ (800142c <setDir+0x90>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	6890      	ldr	r0, [r2, #8]
 80013e4:	687a      	ldr	r2, [r7, #4]
 80013e6:	8991      	ldrh	r1, [r2, #12]
 80013e8:	2200      	movs	r2, #0
 80013ea:	4798      	blx	r3
}
 80013ec:	e01a      	b.n	8001424 <setDir+0x88>
	else if(dir == 1)
 80013ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d10b      	bne.n	800140e <setDir+0x72>
		stepper->dir = 1;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2201      	movs	r2, #1
 80013fa:	771a      	strb	r2, [r3, #28]
		setPin(stepper->stepper_pins.GPIOx_dir, stepper->stepper_pins.GPIO_Pin_dir, PIN_RESET);
 80013fc:	4b0b      	ldr	r3, [pc, #44]	@ (800142c <setDir+0x90>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	687a      	ldr	r2, [r7, #4]
 8001402:	6890      	ldr	r0, [r2, #8]
 8001404:	687a      	ldr	r2, [r7, #4]
 8001406:	8991      	ldrh	r1, [r2, #12]
 8001408:	2200      	movs	r2, #0
 800140a:	4798      	blx	r3
}
 800140c:	e00a      	b.n	8001424 <setDir+0x88>
			stepper->dir = -1;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	22ff      	movs	r2, #255	@ 0xff
 8001412:	771a      	strb	r2, [r3, #28]
			setPin(stepper->stepper_pins.GPIOx_dir, stepper->stepper_pins.GPIO_Pin_dir, PIN_SET);
 8001414:	4b05      	ldr	r3, [pc, #20]	@ (800142c <setDir+0x90>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	687a      	ldr	r2, [r7, #4]
 800141a:	6890      	ldr	r0, [r2, #8]
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	8991      	ldrh	r1, [r2, #12]
 8001420:	2201      	movs	r2, #1
 8001422:	4798      	blx	r3
}
 8001424:	bf00      	nop
 8001426:	3708      	adds	r7, #8
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	20000180 	.word	0x20000180

08001430 <enableStepper>:
/* ------------------ НЕ ИСПОЛЬЗУЕТСЯ ----------------- */

/** Включение мотора
 */
void enableStepper(STEPPER_StructDef* stepper)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
	stepper->en = ON;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2201      	movs	r2, #1
 800143c:	775a      	strb	r2, [r3, #29]

	if(stepper->_globEn == false)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	7f9b      	ldrb	r3, [r3, #30]
 8001442:	f083 0301 	eor.w	r3, r3, #1
 8001446:	b2db      	uxtb	r3, r3
 8001448:	2b00      	cmp	r3, #0
 800144a:	d008      	beq.n	800145e <enableStepper+0x2e>
	{
		setPin(stepper->stepper_pins.GPIOx_en, stepper->stepper_pins.GPIO_Pin_en, PIN_SET);
 800144c:	4b0a      	ldr	r3, [pc, #40]	@ (8001478 <enableStepper+0x48>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	687a      	ldr	r2, [r7, #4]
 8001452:	6910      	ldr	r0, [r2, #16]
 8001454:	687a      	ldr	r2, [r7, #4]
 8001456:	8a91      	ldrh	r1, [r2, #20]
 8001458:	2201      	movs	r2, #1
 800145a:	4798      	blx	r3
	}
	else setPin(stepper->stepper_pins.GPIOx_en, stepper->stepper_pins.GPIO_Pin_en, PIN_RESET);
}
 800145c:	e007      	b.n	800146e <enableStepper+0x3e>
	else setPin(stepper->stepper_pins.GPIOx_en, stepper->stepper_pins.GPIO_Pin_en, PIN_RESET);
 800145e:	4b06      	ldr	r3, [pc, #24]	@ (8001478 <enableStepper+0x48>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	6910      	ldr	r0, [r2, #16]
 8001466:	687a      	ldr	r2, [r7, #4]
 8001468:	8a91      	ldrh	r1, [r2, #20]
 800146a:	2200      	movs	r2, #0
 800146c:	4798      	blx	r3
}
 800146e:	bf00      	nop
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	20000180 	.word	0x20000180

0800147c <disableStepper>:

/** Выключение мотора
 */
void disableStepper(STEPPER_StructDef* stepper)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
	stepper->en = OFF;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2200      	movs	r2, #0
 8001488:	775a      	strb	r2, [r3, #29]

	if(stepper->_globEn == false)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	7f9b      	ldrb	r3, [r3, #30]
 800148e:	f083 0301 	eor.w	r3, r3, #1
 8001492:	b2db      	uxtb	r3, r3
 8001494:	2b00      	cmp	r3, #0
 8001496:	d008      	beq.n	80014aa <disableStepper+0x2e>
	{
		setPin(stepper->stepper_pins.GPIOx_en, stepper->stepper_pins.GPIO_Pin_en, PIN_RESET);
 8001498:	4b0a      	ldr	r3, [pc, #40]	@ (80014c4 <disableStepper+0x48>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	6910      	ldr	r0, [r2, #16]
 80014a0:	687a      	ldr	r2, [r7, #4]
 80014a2:	8a91      	ldrh	r1, [r2, #20]
 80014a4:	2200      	movs	r2, #0
 80014a6:	4798      	blx	r3
	}
	else setPin(stepper->stepper_pins.GPIOx_en, stepper->stepper_pins.GPIO_Pin_en, PIN_SET);
}
 80014a8:	e007      	b.n	80014ba <disableStepper+0x3e>
	else setPin(stepper->stepper_pins.GPIOx_en, stepper->stepper_pins.GPIO_Pin_en, PIN_SET);
 80014aa:	4b06      	ldr	r3, [pc, #24]	@ (80014c4 <disableStepper+0x48>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	687a      	ldr	r2, [r7, #4]
 80014b0:	6910      	ldr	r0, [r2, #16]
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	8a91      	ldrh	r1, [r2, #20]
 80014b6:	2201      	movs	r2, #1
 80014b8:	4798      	blx	r3
}
 80014ba:	bf00      	nop
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	20000180 	.word	0x20000180

080014c8 <driverFunctionsInit>:
/** Функция приема указателя на функцию получения времени в микросекундах.
 *  Используется таймер микроконтроллера и его регистр счетчика - TIMx->CNT
 *  function ОБЯЗАТЕЛЬНО должна быть определена в файле main.c
 */
void driverFunctionsInit(timeFunction_void_ptr function1, timeFunction_void_ptr function2, timeFunction_uint32_t_ptr function3, timeFunction_void_ptr function4)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b085      	sub	sp, #20
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	60f8      	str	r0, [r7, #12]
 80014d0:	60b9      	str	r1, [r7, #8]
 80014d2:	607a      	str	r2, [r7, #4]
 80014d4:	603b      	str	r3, [r7, #0]
	startTimer = function1;
 80014d6:	4a09      	ldr	r2, [pc, #36]	@ (80014fc <driverFunctionsInit+0x34>)
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	6013      	str	r3, [r2, #0]
	stopTimer = function2;
 80014dc:	4a08      	ldr	r2, [pc, #32]	@ (8001500 <driverFunctionsInit+0x38>)
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	6013      	str	r3, [r2, #0]
	getMicros = function3;
 80014e2:	4a08      	ldr	r2, [pc, #32]	@ (8001504 <driverFunctionsInit+0x3c>)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6013      	str	r3, [r2, #0]
	resetTimer = function4;
 80014e8:	4a07      	ldr	r2, [pc, #28]	@ (8001508 <driverFunctionsInit+0x40>)
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	6013      	str	r3, [r2, #0]
}
 80014ee:	bf00      	nop
 80014f0:	3714      	adds	r7, #20
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	20000184 	.word	0x20000184
 8001500:	20000188 	.word	0x20000188
 8001504:	2000018c 	.word	0x2000018c
 8001508:	20000190 	.word	0x20000190

0800150c <driverInit>:

/** Функция инициализации драйвера шагового мотора
 */
void driverInit(DRIVER_StructDef* driver, STEPPER_StructDef* stepper, DRIVER_LIMIT_SWITCH_PINS_StructDef* pins, uint32_t stepsPerRev)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	60f8      	str	r0, [r7, #12]
 8001514:	60b9      	str	r1, [r7, #8]
 8001516:	607a      	str	r2, [r7, #4]
 8001518:	603b      	str	r3, [r7, #0]
	driver->stepper = stepper;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	68ba      	ldr	r2, [r7, #8]
 800151e:	601a      	str	r2, [r3, #0]

	driver->driver_pins = pins;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	605a      	str	r2, [r3, #4]

	driver->_accelTime = 0;
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	f04f 0200 	mov.w	r2, #0
 800152c:	609a      	str	r2, [r3, #8]
	driver->_speedPlannerPrd = 15000;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8001534:	819a      	strh	r2, [r3, #12]
	driver->_speedPlannerTime = 0;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	2200      	movs	r2, #0
 800153a:	611a      	str	r2, [r3, #16]
	driver->_plannerTime = 0;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	2200      	movs	r2, #0
 8001540:	615a      	str	r2, [r3, #20]

	driver->_stopFlag = false;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	2200      	movs	r2, #0
 8001546:	761a      	strb	r2, [r3, #24]
	driver->_stepsPerDeg = stepsPerRev / 360.0;
 8001548:	6838      	ldr	r0, [r7, #0]
 800154a:	f7fe ffd3 	bl	80004f4 <__aeabi_ui2d>
 800154e:	f04f 0200 	mov.w	r2, #0
 8001552:	4b20      	ldr	r3, [pc, #128]	@ (80015d4 <driverInit+0xc8>)
 8001554:	f7ff f972 	bl	800083c <__aeabi_ddiv>
 8001558:	4602      	mov	r2, r0
 800155a:	460b      	mov	r3, r1
 800155c:	4610      	mov	r0, r2
 800155e:	4619      	mov	r1, r3
 8001560:	f7ff fafc 	bl	8000b5c <__aeabi_d2f>
 8001564:	4602      	mov	r2, r0
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	61da      	str	r2, [r3, #28]
	driver->_prevTime = 0;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	2200      	movs	r2, #0
 800156e:	621a      	str	r2, [r3, #32]
	driver->_accelSpeed = 0;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	f04f 0200 	mov.w	r2, #0
 8001576:	625a      	str	r2, [r3, #36]	@ 0x24
	driver->_target = 0;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	2200      	movs	r2, #0
 800157c:	629a      	str	r2, [r3, #40]	@ 0x28
	driver->tickUs = 0;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	2200      	movs	r2, #0
 8001582:	62da      	str	r2, [r3, #44]	@ 0x2c
	driver->_workState = DRIVER_INIT;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	2200      	movs	r2, #0
 8001588:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	driver->_autoPower = false;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	2200      	movs	r2, #0
 8001590:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
	driver->_stopSpeed = 0;
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	f04f 0200 	mov.w	r2, #0
 800159a:	635a      	str	r2, [r3, #52]	@ 0x34
	driver->_maxSpeed = 300;
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	4a0e      	ldr	r2, [pc, #56]	@ (80015d8 <driverInit+0xcc>)
 80015a0:	639a      	str	r2, [r3, #56]	@ 0x38
	driver->_speed = 0;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	f04f 0200 	mov.w	r2, #0
 80015a8:	63da      	str	r2, [r3, #60]	@ 0x3c
	driver->_accel = 300;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80015b0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
	driver->_accelInv = 0;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	f04f 0200 	mov.w	r2, #0
 80015ba:	645a      	str	r2, [r3, #68]	@ 0x44
	driver->_curMode = POSITION_MODE;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	2200      	movs	r2, #0
 80015c0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

	driver->stepTime = 10000;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80015ca:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 80015cc:	bf00      	nop
 80015ce:	3710      	adds	r7, #16
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	40768000 	.word	0x40768000
 80015d8:	43960000 	.word	0x43960000

080015dc <resetTimers>:
}

/** Функция сброса всех таймеров
 */
void resetTimers(DRIVER_StructDef* driver)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
	driver->_speedPlannerTime = driver->_plannerTime = driver->_prevTime = getMicros();
 80015e4:	4b08      	ldr	r3, [pc, #32]	@ (8001608 <resetTimers+0x2c>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4798      	blx	r3
 80015ea:	4602      	mov	r2, r0
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	621a      	str	r2, [r3, #32]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6a1a      	ldr	r2, [r3, #32]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	615a      	str	r2, [r3, #20]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	695a      	ldr	r2, [r3, #20]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	611a      	str	r2, [r3, #16]
}
 8001600:	bf00      	nop
 8001602:	3708      	adds	r7, #8
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	2000018c 	.word	0x2000018c

0800160c <resetMotor>:

/** Установка текущей скорости мотора в ноль
 */
void resetMotor(DRIVER_StructDef* driver)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
	driver->_accelSpeed = 0;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	f04f 0200 	mov.w	r2, #0
 800161a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800161c:	bf00      	nop
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <tickDriver>:
/** Здесь происходит движение мотора, функция должна вызываться как можно чаще,
 * 	имеется встроенный таймер на тиках микропроцессора
 * 	Возвращает BUSY, если мотор запущен в режиме POSITION_MODE или VELOCITY_MODE
 */
work_state_t tickDriver(DRIVER_StructDef* driver)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
	if (driver->_workState == DRIVER_BUSY)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001636:	2b02      	cmp	r3, #2
 8001638:	d14e      	bne.n	80016d8 <tickDriver+0xb0>
	{
		driver->tickUs = getMicros();
 800163a:	4b2b      	ldr	r3, [pc, #172]	@ (80016e8 <tickDriver+0xc0>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4798      	blx	r3
 8001640:	4602      	mov	r2, r0
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	62da      	str	r2, [r3, #44]	@ 0x2c

		/* POSITION_MODE */
		if (driver->_curMode == POSITION_MODE && driver->_accel != 0 && driver->_maxSpeed >= MIN_SPEED_POS_MODE) plannerPositionMode(driver);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800164c:	2b00      	cmp	r3, #0
 800164e:	d111      	bne.n	8001674 <tickDriver+0x4c>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001656:	2b00      	cmp	r3, #0
 8001658:	d00c      	beq.n	8001674 <tickDriver+0x4c>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8001660:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8001664:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800166c:	db02      	blt.n	8001674 <tickDriver+0x4c>
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f000 f89a 	bl	80017a8 <plannerPositionMode>

		/* VELOCITY_MODE */
		if (driver->_curMode == VELOCITY_MODE && driver->_accel != 0) plannerVelocityMode(driver);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800167a:	2b01      	cmp	r3, #1
 800167c:	d107      	bne.n	800168e <tickDriver+0x66>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001684:	2b00      	cmp	r3, #0
 8001686:	d002      	beq.n	800168e <tickDriver+0x66>
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f000 fa89 	bl	8001ba0 <plannerVelocityMode>

		/* Основной таймер степпера */
		if (driver->stepTime != 0 && driver->tickUs - driver->_prevTime >= driver->stepTime)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001692:	2b00      	cmp	r3, #0
 8001694:	d020      	beq.n	80016d8 <tickDriver+0xb0>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6a1b      	ldr	r3, [r3, #32]
 800169e:	1ad2      	subs	r2, r2, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d317      	bcc.n	80016d8 <tickDriver+0xb0>
		{
			driver->_prevTime = driver->tickUs;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	621a      	str	r2, [r3, #32]
//                    brake();
//                    return false;
//                }
//#endif
			/* Проверка достижения целевой координаты, проверка остановки для быстрого планировщика, а также работы без ускорения */
			if (driver->_curMode == POSITION_MODE && driver->_target == driver->stepper->pos)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d10b      	bne.n	80016d2 <tickDriver+0xaa>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	699b      	ldr	r3, [r3, #24]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d104      	bne.n	80016d2 <tickDriver+0xaa>
            {
				brake(driver);
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f000 f838 	bl	800173e <brake>
				return DRIVER_READY;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e005      	b.n	80016de <tickDriver+0xb6>
            }

			step(driver);  // двигаем мотор
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	f000 f84e 	bl	8001774 <step>
		}
	}

	return driver->_workState;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	2000018c 	.word	0x2000018c

080016ec <enableDriver>:

/** Включить мотор (пин EN)
 */
void enableDriver(DRIVER_StructDef* driver)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
	driver->_workState = DRIVER_READY;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2201      	movs	r2, #1
 80016f8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	driver->_stopSpeed = 0;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	f04f 0200 	mov.w	r2, #0
 8001702:	635a      	str	r2, [r3, #52]	@ 0x34

	resetTimers(driver);
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f7ff ff69 	bl	80015dc <resetTimers>

	enableStepper(driver->stepper);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4618      	mov	r0, r3
 8001710:	f7ff fe8e 	bl	8001430 <enableStepper>
}
 8001714:	bf00      	nop
 8001716:	3708      	adds	r7, #8
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}

0800171c <disableDriver>:

/** Выключить мотор (пин EN)
 */
void disableDriver(DRIVER_StructDef* driver)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
	driver->_workState = DRIVER_BRAKE;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2203      	movs	r2, #3
 8001728:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	disableStepper(driver->stepper);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff fea3 	bl	800147c <disableStepper>
}
 8001736:	bf00      	nop
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <brake>:
}

/* Резкая остановка + выключение мотора
 */
void brake(DRIVER_StructDef* driver)
{
 800173e:	b580      	push	{r7, lr}
 8001740:	b082      	sub	sp, #8
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
	driver->_workState = DRIVER_READY;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2201      	movs	r2, #1
 800174a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	driver->_stopSpeed = 0;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	f04f 0200 	mov.w	r2, #0
 8001754:	635a      	str	r2, [r3, #52]	@ 0x34

	resetMotor(driver);
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f7ff ff58 	bl	800160c <resetMotor>

	if(driver->_autoPower == true) disableDriver(driver);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001762:	2b00      	cmp	r3, #0
 8001764:	d002      	beq.n	800176c <brake+0x2e>
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f7ff ffd8 	bl	800171c <disableDriver>
}
 800176c:	bf00      	nop
 800176e:	3708      	adds	r7, #8
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}

08001774 <step>:
}

/** Сделать шаг мотором
 */
void step(DRIVER_StructDef* driver)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
	doStep(driver->stepper);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4618      	mov	r0, r3
 8001782:	f7ff fddf 	bl	8001344 <doStep>
}
 8001786:	bf00      	nop
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <getStatusDriver>:
 * 	BUSY - в движении
 * 	BRAKE - был сброшен
 * 	ERR - в ошибке
 */
work_state_t getStatusDriver(DRIVER_StructDef* driver)
{
 800178e:	b480      	push	{r7}
 8001790:	b083      	sub	sp, #12
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
	return driver->_workState;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
}
 800179c:	4618      	mov	r0, r3
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <plannerPositionMode>:
uint16_t _plannerPrd = 15000;

/**	Планировщик скорости для POSITION_MODE с разгоном и торможением
 */
void plannerPositionMode(DRIVER_StructDef* driver)
{
 80017a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017ac:	b085      	sub	sp, #20
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
	if (driver->tickUs - driver->_plannerTime >= _plannerPrd)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	695b      	ldr	r3, [r3, #20]
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	4a90      	ldr	r2, [pc, #576]	@ (8001a00 <plannerPositionMode+0x258>)
 80017be:	8812      	ldrh	r2, [r2, #0]
 80017c0:	4293      	cmp	r3, r2
 80017c2:	f0c0 8114 	bcc.w	80019ee <plannerPositionMode+0x246>
	{
		driver->_plannerTime += _plannerPrd; // ~110 us
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	695b      	ldr	r3, [r3, #20]
 80017ca:	4a8d      	ldr	r2, [pc, #564]	@ (8001a00 <plannerPositionMode+0x258>)
 80017cc:	8812      	ldrh	r2, [r2, #0]
 80017ce:	441a      	add	r2, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	615a      	str	r2, [r3, #20]

		int32_t err = driver->_target - driver->stepper->pos; // "ошибка"
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	699b      	ldr	r3, [r3, #24]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	60fb      	str	r3, [r7, #12]

		bool thisDir = (driver->_accelSpeed * driver->_accelSpeed * driver->_accel / 1000000.0 >= abs(err)); // пора тормозить
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80017ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80017f8:	ee07 3a90 	vmov	s15, r3
 80017fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001800:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001804:	ee17 0a90 	vmov	r0, s15
 8001808:	f7fe fe96 	bl	8000538 <__aeabi_f2d>
 800180c:	a37a      	add	r3, pc, #488	@ (adr r3, 80019f8 <plannerPositionMode+0x250>)
 800180e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001812:	f7ff f813 	bl	800083c <__aeabi_ddiv>
 8001816:	4602      	mov	r2, r0
 8001818:	460b      	mov	r3, r1
 800181a:	4690      	mov	r8, r2
 800181c:	4699      	mov	r9, r3
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	2b00      	cmp	r3, #0
 8001822:	bfb8      	it	lt
 8001824:	425b      	neglt	r3, r3
 8001826:	4618      	mov	r0, r3
 8001828:	f7fe fe74 	bl	8000514 <__aeabi_i2d>
 800182c:	4602      	mov	r2, r0
 800182e:	460b      	mov	r3, r1
 8001830:	2101      	movs	r1, #1
 8001832:	460e      	mov	r6, r1
 8001834:	4640      	mov	r0, r8
 8001836:	4649      	mov	r1, r9
 8001838:	f7ff f95c 	bl	8000af4 <__aeabi_dcmpge>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d101      	bne.n	8001846 <plannerPositionMode+0x9e>
 8001842:	2300      	movs	r3, #0
 8001844:	461e      	mov	r6, r3
 8001846:	72fe      	strb	r6, [r7, #11]

		driver->_accelSpeed += (driver->_accel * (_plannerPrd / 1000000.0) * (thisDir ? -_sign(driver->_accelSpeed) : _sign(err))); // разгон/торможение
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800184c:	4618      	mov	r0, r3
 800184e:	f7fe fe73 	bl	8000538 <__aeabi_f2d>
 8001852:	4680      	mov	r8, r0
 8001854:	4689      	mov	r9, r1
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800185c:	4618      	mov	r0, r3
 800185e:	f7fe fe59 	bl	8000514 <__aeabi_i2d>
 8001862:	4682      	mov	sl, r0
 8001864:	468b      	mov	fp, r1
 8001866:	4b66      	ldr	r3, [pc, #408]	@ (8001a00 <plannerPositionMode+0x258>)
 8001868:	881b      	ldrh	r3, [r3, #0]
 800186a:	4618      	mov	r0, r3
 800186c:	f7fe fe52 	bl	8000514 <__aeabi_i2d>
 8001870:	a361      	add	r3, pc, #388	@ (adr r3, 80019f8 <plannerPositionMode+0x250>)
 8001872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001876:	f7fe ffe1 	bl	800083c <__aeabi_ddiv>
 800187a:	4602      	mov	r2, r0
 800187c:	460b      	mov	r3, r1
 800187e:	4650      	mov	r0, sl
 8001880:	4659      	mov	r1, fp
 8001882:	f7fe feb1 	bl	80005e8 <__aeabi_dmul>
 8001886:	4602      	mov	r2, r0
 8001888:	460b      	mov	r3, r1
 800188a:	4692      	mov	sl, r2
 800188c:	469b      	mov	fp, r3
 800188e:	7afb      	ldrb	r3, [r7, #11]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d00f      	beq.n	80018b4 <plannerPositionMode+0x10c>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800189a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800189e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018a2:	db03      	blt.n	80018ac <plannerPositionMode+0x104>
 80018a4:	f04f 0000 	mov.w	r0, #0
 80018a8:	4956      	ldr	r1, [pc, #344]	@ (8001a04 <plannerPositionMode+0x25c>)
 80018aa:	e00d      	b.n	80018c8 <plannerPositionMode+0x120>
 80018ac:	f04f 0000 	mov.w	r0, #0
 80018b0:	4955      	ldr	r1, [pc, #340]	@ (8001a08 <plannerPositionMode+0x260>)
 80018b2:	e009      	b.n	80018c8 <plannerPositionMode+0x120>
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	db03      	blt.n	80018c2 <plannerPositionMode+0x11a>
 80018ba:	f04f 0000 	mov.w	r0, #0
 80018be:	4952      	ldr	r1, [pc, #328]	@ (8001a08 <plannerPositionMode+0x260>)
 80018c0:	e002      	b.n	80018c8 <plannerPositionMode+0x120>
 80018c2:	f04f 0000 	mov.w	r0, #0
 80018c6:	494f      	ldr	r1, [pc, #316]	@ (8001a04 <plannerPositionMode+0x25c>)
 80018c8:	4652      	mov	r2, sl
 80018ca:	465b      	mov	r3, fp
 80018cc:	f7fe fe8c 	bl	80005e8 <__aeabi_dmul>
 80018d0:	4602      	mov	r2, r0
 80018d2:	460b      	mov	r3, r1
 80018d4:	4640      	mov	r0, r8
 80018d6:	4649      	mov	r1, r9
 80018d8:	f7fe fcd0 	bl	800027c <__adddf3>
 80018dc:	4602      	mov	r2, r0
 80018de:	460b      	mov	r3, r1
 80018e0:	4610      	mov	r0, r2
 80018e2:	4619      	mov	r1, r3
 80018e4:	f7ff f93a 	bl	8000b5c <__aeabi_d2f>
 80018e8:	4602      	mov	r2, r0
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	625a      	str	r2, [r3, #36]	@ 0x24

		if (driver->_stopSpeed == 0) driver->_accelSpeed = constrain(driver->_accelSpeed, -driver->_maxSpeed, driver->_maxSpeed); // ограничение
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80018f4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80018f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018fc:	d120      	bne.n	8001940 <plannerPositionMode+0x198>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001904:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800190e:	eef1 7a67 	vneg.f32	s15, s15
 8001912:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800191c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001920:	ee17 2a90 	vmov	r2, s15
 8001924:	ee16 1a90 	vmov	r1, s13
 8001928:	ee17 0a10 	vmov	r0, s14
 800192c:	f000 f9e8 	bl	8001d00 <constrain>
 8001930:	ee07 0a90 	vmov	s15, r0
 8001934:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
 800193e:	e01f      	b.n	8001980 <plannerPositionMode+0x1d8>
		else driver->_accelSpeed = constrain(driver->_accelSpeed, -driver->_stopSpeed, driver->_stopSpeed);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001946:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8001950:	eef1 7a67 	vneg.f32	s15, s15
 8001954:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800195e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001962:	ee17 2a90 	vmov	r2, s15
 8001966:	ee16 1a90 	vmov	r1, s13
 800196a:	ee17 0a10 	vmov	r0, s14
 800196e:	f000 f9c7 	bl	8001d00 <constrain>
 8001972:	ee07 0a90 	vmov	s15, r0
 8001976:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		/* Ограничение на мин. скорость */
		if (fabs(driver->_accelSpeed) > MIN_SPEED_POS_MODE)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001986:	eef0 7ae7 	vabs.f32	s15, s15
 800198a:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800198e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001996:	dd18      	ble.n	80019ca <plannerPositionMode+0x222>
		{
			driver->stepTime = fabs(1000000.0 / driver->_accelSpeed);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800199c:	4618      	mov	r0, r3
 800199e:	f7fe fdcb 	bl	8000538 <__aeabi_f2d>
 80019a2:	4602      	mov	r2, r0
 80019a4:	460b      	mov	r3, r1
 80019a6:	a114      	add	r1, pc, #80	@ (adr r1, 80019f8 <plannerPositionMode+0x250>)
 80019a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80019ac:	f7fe ff46 	bl	800083c <__aeabi_ddiv>
 80019b0:	4602      	mov	r2, r0
 80019b2:	460b      	mov	r3, r1
 80019b4:	4614      	mov	r4, r2
 80019b6:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 80019ba:	4620      	mov	r0, r4
 80019bc:	4629      	mov	r1, r5
 80019be:	f7ff f8ad 	bl	8000b1c <__aeabi_d2uiz>
 80019c2:	4602      	mov	r2, r0
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	64da      	str	r2, [r3, #76]	@ 0x4c
 80019c8:	e002      	b.n	80019d0 <plannerPositionMode+0x228>
		}
		else driver->stepTime = MAX_PERIOD_POS_MODE;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4a0f      	ldr	r2, [pc, #60]	@ (8001a0c <plannerPositionMode+0x264>)
 80019ce:	64da      	str	r2, [r3, #76]	@ 0x4c

		driver->stepper->dir = _sign(driver->_accelSpeed); /* Направление для шагов */
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80019d6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019de:	db01      	blt.n	80019e4 <plannerPositionMode+0x23c>
 80019e0:	2201      	movs	r2, #1
 80019e2:	e001      	b.n	80019e8 <plannerPositionMode+0x240>
 80019e4:	f04f 32ff 	mov.w	r2, #4294967295
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	771a      	strb	r2, [r3, #28]
	}
}
 80019ee:	bf00      	nop
 80019f0:	3714      	adds	r7, #20
 80019f2:	46bd      	mov	sp, r7
 80019f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80019f8:	00000000 	.word	0x00000000
 80019fc:	412e8480 	.word	0x412e8480
 8001a00:	20000000 	.word	0x20000000
 8001a04:	bff00000 	.word	0xbff00000
 8001a08:	3ff00000 	.word	0x3ff00000
 8001a0c:	00030d40 	.word	0x00030d40

08001a10 <setTarget>:

/** Установка целевой позиции в шагах и градусах (для режима POSITION_MODE)
 * и движение к указанной цели с максимальной скоростью
 */
void setTarget(DRIVER_StructDef* driver, int32_t target_pos)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	6039      	str	r1, [r7, #0]
	driver->_target = target_pos;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	683a      	ldr	r2, [r7, #0]
 8001a1e:	629a      	str	r2, [r3, #40]	@ 0x28

	if(driver->_target != driver->stepper->pos)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	699b      	ldr	r3, [r3, #24]
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d035      	beq.n	8001a9a <setTarget+0x8a>
	{
		if (driver->_accel == 0 || driver->_maxSpeed < MIN_SPEED_POS_MODE)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d009      	beq.n	8001a4c <setTarget+0x3c>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8001a3e:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8001a42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a4a:	d522      	bpl.n	8001a92 <setTarget+0x82>
		{
			driver->stepTime = 1000000.0 / driver->_maxSpeed;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7fe fd71 	bl	8000538 <__aeabi_f2d>
 8001a56:	4602      	mov	r2, r0
 8001a58:	460b      	mov	r3, r1
 8001a5a:	a113      	add	r1, pc, #76	@ (adr r1, 8001aa8 <setTarget+0x98>)
 8001a5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001a60:	f7fe feec 	bl	800083c <__aeabi_ddiv>
 8001a64:	4602      	mov	r2, r0
 8001a66:	460b      	mov	r3, r1
 8001a68:	4610      	mov	r0, r2
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	f7ff f856 	bl	8000b1c <__aeabi_d2uiz>
 8001a70:	4602      	mov	r2, r0
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	64da      	str	r2, [r3, #76]	@ 0x4c
			driver->stepper->dir = (driver->_target > driver->stepper->pos) ? 1 : -1;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	699b      	ldr	r3, [r3, #24]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	dd01      	ble.n	8001a88 <setTarget+0x78>
 8001a84:	2201      	movs	r2, #1
 8001a86:	e001      	b.n	8001a8c <setTarget+0x7c>
 8001a88:	f04f 32ff 	mov.w	r2, #4294967295
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	771a      	strb	r2, [r3, #28]
		}

		driver->_workState = DRIVER_BUSY;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2202      	movs	r2, #2
 8001a96:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	}
}
 8001a9a:	bf00      	nop
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	f3af 8000 	nop.w
 8001aa8:	00000000 	.word	0x00000000
 8001aac:	412e8480 	.word	0x412e8480

08001ab0 <setMaxSpeed>:

/** Установка максимальной скорости (по модулю) в шагах/секунду (для режима POSITION_MODE)
 *  по умолчанию 300
 */
void setMaxSpeed(DRIVER_StructDef* driver, float speed)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	ed87 0a00 	vstr	s0, [r7]
	/* Ограничения минимальной скорости - 1 шаг/час */
	driver->_maxSpeed = fmax(fabs(speed), MIN_STEP_SPEED);
 8001abc:	edd7 7a00 	vldr	s15, [r7]
 8001ac0:	eef0 7ae7 	vabs.f32	s15, s15
 8001ac4:	ee17 0a90 	vmov	r0, s15
 8001ac8:	f7fe fd36 	bl	8000538 <__aeabi_f2d>
 8001acc:	4602      	mov	r2, r0
 8001ace:	460b      	mov	r3, r1
 8001ad0:	ed9f 1b1d 	vldr	d1, [pc, #116]	@ 8001b48 <setMaxSpeed+0x98>
 8001ad4:	ec43 2b10 	vmov	d0, r2, r3
 8001ad8:	f012 f910 	bl	8013cfc <fmax>
 8001adc:	ec53 2b10 	vmov	r2, r3, d0
 8001ae0:	4610      	mov	r0, r2
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	f7ff f83a 	bl	8000b5c <__aeabi_d2f>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	639a      	str	r2, [r3, #56]	@ 0x38
	driver->_maxSpeed = speed;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	683a      	ldr	r2, [r7, #0]
 8001af2:	639a      	str	r2, [r3, #56]	@ 0x38

	/* Cчитаем stepTime для низких скоростей или отключенного ускорения */
	if (driver->_accel == 0 || driver->_maxSpeed < MIN_SPEED_POS_MODE) driver->stepTime = 1000000.0 / driver->_maxSpeed;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d00a      	beq.n	8001b14 <setMaxSpeed+0x64>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8001b04:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8001b08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b10:	d400      	bmi.n	8001b14 <setMaxSpeed+0x64>
//        // период планировщка в зависимости от макс. скорости
//        _plannerPrd = map((int)_maxSpeed, 1000, 20000, 15000, 1000);
//        _plannerPrd = constrain(_plannerPrd, 15000, 1000);
//#endif

}
 8001b12:	e014      	b.n	8001b3e <setMaxSpeed+0x8e>
	if (driver->_accel == 0 || driver->_maxSpeed < MIN_SPEED_POS_MODE) driver->stepTime = 1000000.0 / driver->_maxSpeed;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7fe fd0d 	bl	8000538 <__aeabi_f2d>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	460b      	mov	r3, r1
 8001b22:	a10b      	add	r1, pc, #44	@ (adr r1, 8001b50 <setMaxSpeed+0xa0>)
 8001b24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001b28:	f7fe fe88 	bl	800083c <__aeabi_ddiv>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	460b      	mov	r3, r1
 8001b30:	4610      	mov	r0, r2
 8001b32:	4619      	mov	r1, r3
 8001b34:	f7fe fff2 	bl	8000b1c <__aeabi_d2uiz>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8001b3e:	bf00      	nop
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	789abcdf 	.word	0x789abcdf
 8001b4c:	3f323456 	.word	0x3f323456
 8001b50:	00000000 	.word	0x00000000
 8001b54:	412e8480 	.word	0x412e8480

08001b58 <setAcceleration>:
 * 	при значении 0 ускорение отключается и мотор работает
 * 	по профилю постоянной максимальной скорости setMaxSpeed().
 * 	по умолчанию 300
 */
void setAcceleration(DRIVER_StructDef* driver, uint16_t accel)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	460b      	mov	r3, r1
 8001b62:	807b      	strh	r3, [r7, #2]
	driver->_accel = abs(accel);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	887a      	ldrh	r2, [r7, #2]
 8001b68:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
	if (accel != 0) driver->_accelInv = 0.5f / accel;
 8001b6c:	887b      	ldrh	r3, [r7, #2]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d00c      	beq.n	8001b8c <setAcceleration+0x34>
 8001b72:	887b      	ldrh	r3, [r7, #2]
 8001b74:	ee07 3a90 	vmov	s15, r3
 8001b78:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b7c:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8001b80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44

//#ifdef SMOOTH_ALGORITHM
//        if (_accel) _c0 = 0.676 * sqrt(2.0 / _accel) * 1000000.0;
//        plannerSmooth();
//#endif
}
 8001b8a:	e003      	b.n	8001b94 <setAcceleration+0x3c>
	else driver->_accelInv = 0;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f04f 0200 	mov.w	r2, #0
 8001b92:	645a      	str	r2, [r3, #68]	@ 0x44
}
 8001b94:	bf00      	nop
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <plannerVelocityMode>:
 * 	Планировщик не вызывается, если ускорение _accel = 0;
 * 	Если ускорение _accel = 0, то setSpeed(...) задает сразу скорость мотора
 * 	и старт будет резким!
 */
void plannerVelocityMode(DRIVER_StructDef* driver)
{
 8001ba0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ba4:	b082      	sub	sp, #8
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
	if (driver->tickUs - driver->_speedPlannerTime >= driver->_speedPlannerPrd)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	691b      	ldr	r3, [r3, #16]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	687a      	ldr	r2, [r7, #4]
 8001bb6:	8992      	ldrh	r2, [r2, #12]
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	f0c0 808e 	bcc.w	8001cda <plannerVelocityMode+0x13a>
	{
		/* Обновляем переменную времени планировщика на величину периода планировщика */
		driver->_speedPlannerTime = driver->tickUs;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	611a      	str	r2, [r3, #16]

		/* Формула конечной скорости с учетом знака ускорения (м/с) */
		driver->_accelSpeed += (driver->_accel * (driver->_speedPlannerPrd / 1000000.0) * _sign(driver->_speed - driver->_accelSpeed));
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7fe fcb4 	bl	8000538 <__aeabi_f2d>
 8001bd0:	4680      	mov	r8, r0
 8001bd2:	4689      	mov	r9, r1
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7fe fc9a 	bl	8000514 <__aeabi_i2d>
 8001be0:	4682      	mov	sl, r0
 8001be2:	468b      	mov	fp, r1
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	899b      	ldrh	r3, [r3, #12]
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7fe fc93 	bl	8000514 <__aeabi_i2d>
 8001bee:	a33e      	add	r3, pc, #248	@ (adr r3, 8001ce8 <plannerVelocityMode+0x148>)
 8001bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bf4:	f7fe fe22 	bl	800083c <__aeabi_ddiv>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	4650      	mov	r0, sl
 8001bfe:	4659      	mov	r1, fp
 8001c00:	f7fe fcf2 	bl	80005e8 <__aeabi_dmul>
 8001c04:	4602      	mov	r2, r0
 8001c06:	460b      	mov	r3, r1
 8001c08:	4692      	mov	sl, r2
 8001c0a:	469b      	mov	fp, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001c18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c1c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c24:	db03      	blt.n	8001c2e <plannerVelocityMode+0x8e>
 8001c26:	f04f 0000 	mov.w	r0, #0
 8001c2a:	4933      	ldr	r1, [pc, #204]	@ (8001cf8 <plannerVelocityMode+0x158>)
 8001c2c:	e002      	b.n	8001c34 <plannerVelocityMode+0x94>
 8001c2e:	f04f 0000 	mov.w	r0, #0
 8001c32:	4932      	ldr	r1, [pc, #200]	@ (8001cfc <plannerVelocityMode+0x15c>)
 8001c34:	4652      	mov	r2, sl
 8001c36:	465b      	mov	r3, fp
 8001c38:	f7fe fcd6 	bl	80005e8 <__aeabi_dmul>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	460b      	mov	r3, r1
 8001c40:	4640      	mov	r0, r8
 8001c42:	4649      	mov	r1, r9
 8001c44:	f7fe fb1a 	bl	800027c <__adddf3>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	4610      	mov	r0, r2
 8001c4e:	4619      	mov	r1, r3
 8001c50:	f7fe ff84 	bl	8000b5c <__aeabi_d2f>
 8001c54:	4602      	mov	r2, r0
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	625a      	str	r2, [r3, #36]	@ 0x24

		driver->stepper->dir = _sign(driver->_accelSpeed);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001c60:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c68:	db01      	blt.n	8001c6e <plannerVelocityMode+0xce>
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	e001      	b.n	8001c72 <plannerVelocityMode+0xd2>
 8001c6e:	f04f 32ff 	mov.w	r2, #4294967295
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	771a      	strb	r2, [r3, #28]
		driver->stepTime = fabs(1000000.0 / driver->_accelSpeed);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7fe fc5b 	bl	8000538 <__aeabi_f2d>
 8001c82:	4602      	mov	r2, r0
 8001c84:	460b      	mov	r3, r1
 8001c86:	a118      	add	r1, pc, #96	@ (adr r1, 8001ce8 <plannerVelocityMode+0x148>)
 8001c88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001c8c:	f7fe fdd6 	bl	800083c <__aeabi_ddiv>
 8001c90:	4602      	mov	r2, r0
 8001c92:	460b      	mov	r3, r1
 8001c94:	4614      	mov	r4, r2
 8001c96:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8001c9a:	4620      	mov	r0, r4
 8001c9c:	4629      	mov	r1, r5
 8001c9e:	f7fe ff3d 	bl	8000b1c <__aeabi_d2uiz>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	64da      	str	r2, [r3, #76]	@ 0x4c

        if (driver->_stopFlag == true && fabs(driver->_accelSpeed) <= MIN_STEP_SPEED) brake(driver);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	7e1b      	ldrb	r3, [r3, #24]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d014      	beq.n	8001cda <plannerVelocityMode+0x13a>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001cb6:	eef0 7ae7 	vabs.f32	s15, s15
 8001cba:	ee17 0a90 	vmov	r0, s15
 8001cbe:	f7fe fc3b 	bl	8000538 <__aeabi_f2d>
 8001cc2:	a30b      	add	r3, pc, #44	@ (adr r3, 8001cf0 <plannerVelocityMode+0x150>)
 8001cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cc8:	f7fe ff0a 	bl	8000ae0 <__aeabi_dcmple>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d100      	bne.n	8001cd4 <plannerVelocityMode+0x134>
	}
}
 8001cd2:	e002      	b.n	8001cda <plannerVelocityMode+0x13a>
        if (driver->_stopFlag == true && fabs(driver->_accelSpeed) <= MIN_STEP_SPEED) brake(driver);
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f7ff fd32 	bl	800173e <brake>
}
 8001cda:	bf00      	nop
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ce4:	f3af 8000 	nop.w
 8001ce8:	00000000 	.word	0x00000000
 8001cec:	412e8480 	.word	0x412e8480
 8001cf0:	789abcdf 	.word	0x789abcdf
 8001cf4:	3f323456 	.word	0x3f323456
 8001cf8:	3ff00000 	.word	0x3ff00000
 8001cfc:	bff00000 	.word	0xbff00000

08001d00 <constrain>:
/** Функция определения принадлежности значения числа указанному отрезку
 * 	отрезок [in_min, in_max], в функцие необязательно in_min < in_max
 * 	возможна и обратная ситуация
 */
int32_t constrain(int32_t x, int32_t in_min, int32_t in_max)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b085      	sub	sp, #20
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	60f8      	str	r0, [r7, #12]
 8001d08:	60b9      	str	r1, [r7, #8]
 8001d0a:	607a      	str	r2, [r7, #4]
	if(in_min < in_max)
 8001d0c:	68ba      	ldr	r2, [r7, #8]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	da0b      	bge.n	8001d2c <constrain+0x2c>
	{
		return (x < in_min) ? in_min : ((x > in_max) ? in_max : x);
 8001d14:	68fa      	ldr	r2, [r7, #12]
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	db05      	blt.n	8001d28 <constrain+0x28>
 8001d1c:	68fa      	ldr	r2, [r7, #12]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4293      	cmp	r3, r2
 8001d22:	bfa8      	it	ge
 8001d24:	4613      	movge	r3, r2
 8001d26:	e00c      	b.n	8001d42 <constrain+0x42>
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	e00a      	b.n	8001d42 <constrain+0x42>
	}
	else return (x < in_max) ? in_max : ((x > in_min) ? in_min : x);
 8001d2c:	68fa      	ldr	r2, [r7, #12]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	db05      	blt.n	8001d40 <constrain+0x40>
 8001d34:	68fa      	ldr	r2, [r7, #12]
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	bfa8      	it	ge
 8001d3c:	4613      	movge	r3, r2
 8001d3e:	e000      	b.n	8001d42 <constrain+0x42>
 8001d40:	687b      	ldr	r3, [r7, #4]
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3714      	adds	r7, #20
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr

08001d4e <plannerInit>:

/** Инициализация планироващика
 *
 */
void plannerInit(PLANNER_StructDef* planner)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	b083      	sub	sp, #12
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
	planner->status = 0;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
	planner->speedAxis = 0;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2200      	movs	r2, #0
 8001d62:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
	planner->shift = 0;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	f883 206e 	strb.w	r2, [r3, #110]	@ 0x6e
	planner->readyF = true;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2201      	movs	r2, #1
 8001d72:	f883 206f 	strb.w	r2, [r3, #111]	@ 0x6f
	planner->changeSett = 0;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
}
 8001d7e:	bf00      	nop
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
	...

08001d8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d90:	f001 fa2c 	bl	80031ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d94:	f000 f87a 	bl	8001e8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d98:	f000 fb1c 	bl	80023d4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001d9c:	f000 f8e0 	bl	8001f60 <MX_ADC1_Init>
  MX_CAN1_Init();
 8001da0:	f000 f930 	bl	8002004 <MX_CAN1_Init>
  MX_DAC_Init();
 8001da4:	f000 f962 	bl	800206c <MX_DAC_Init>
  MX_I2C1_Init();
 8001da8:	f000 f994 	bl	80020d4 <MX_I2C1_Init>
  MX_TIM13_Init();
 8001dac:	f000 fa42 	bl	8002234 <MX_TIM13_Init>
  MX_USART1_UART_Init();
 8001db0:	f000 fa8e 	bl	80022d0 <MX_USART1_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001db4:	f000 fae0 	bl	8002378 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI3_Init();
 8001db8:	f000 f9ba 	bl	8002130 <MX_SPI3_Init>
  MX_USART3_UART_Init();
 8001dbc:	f000 fab2 	bl	8002324 <MX_USART3_UART_Init>
  MX_LWIP_Init();
 8001dc0:	f005 ff16 	bl	8007bf0 <MX_LWIP_Init>
  MX_TIM2_Init();
 8001dc4:	f000 f9ea 	bl	800219c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* Инициализация таймер DWT для одного шага в библиотеке stepper.h */
  DWT_Init();
 8001dc8:	f7ff fa40 	bl	800124c <DWT_Init>

  /* Инициализация указателей на функции HAL для работы библиотек stepper.h и driver.h */
  stepperFunctionsInit(function_pin_1);
 8001dcc:	4b22      	ldr	r3, [pc, #136]	@ (8001e58 <main+0xcc>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f7ff fa77 	bl	80012c4 <stepperFunctionsInit>
  driverFunctionsInit(function_time_1, function_time_2, function_time_3, function_time_4);
 8001dd6:	4b21      	ldr	r3, [pc, #132]	@ (8001e5c <main+0xd0>)
 8001dd8:	6818      	ldr	r0, [r3, #0]
 8001dda:	4b21      	ldr	r3, [pc, #132]	@ (8001e60 <main+0xd4>)
 8001ddc:	6819      	ldr	r1, [r3, #0]
 8001dde:	4b21      	ldr	r3, [pc, #132]	@ (8001e64 <main+0xd8>)
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	4b21      	ldr	r3, [pc, #132]	@ (8001e68 <main+0xdc>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f7ff fb6f 	bl	80014c8 <driverFunctionsInit>

  /* Инициализация шаговых моторов */
  stepperInit(&stepper1, &stepper1_pins);
 8001dea:	4920      	ldr	r1, [pc, #128]	@ (8001e6c <main+0xe0>)
 8001dec:	4820      	ldr	r0, [pc, #128]	@ (8001e70 <main+0xe4>)
 8001dee:	f7ff fa79 	bl	80012e4 <stepperInit>

  /* Инициализация драйверов шаговых моторов */
  driverInit(&driver1, &stepper1, &driver1_pins, 3200);
 8001df2:	f44f 6348 	mov.w	r3, #3200	@ 0xc80
 8001df6:	4a1f      	ldr	r2, [pc, #124]	@ (8001e74 <main+0xe8>)
 8001df8:	491d      	ldr	r1, [pc, #116]	@ (8001e70 <main+0xe4>)
 8001dfa:	481f      	ldr	r0, [pc, #124]	@ (8001e78 <main+0xec>)
 8001dfc:	f7ff fb86 	bl	800150c <driverInit>

  /* Инициализация планировщика*/
  plannerInit(&planner);
 8001e00:	481e      	ldr	r0, [pc, #120]	@ (8001e7c <main+0xf0>)
 8001e02:	f7ff ffa4 	bl	8001d4e <plannerInit>
  /* Добавить драйверы в планировщик */
//  addDriver(&planner, &driver1, 0);
//  addDriver(&planner, &driver2, 1);

  /* Инициализация UDP сокета */
  udpSocketInit();
 8001e06:	f7ff f981 	bl	800110c <udpSocketInit>

  /* Включение таймера TIM2 */
  startTimerTIM2();
 8001e0a:	f000 fc31 	bl	8002670 <startTimerTIM2>

  /* Задание максимальной скорости и ускорения шаговых моторов */
  setAcceleration(&driver1, 0);
 8001e0e:	2100      	movs	r1, #0
 8001e10:	4819      	ldr	r0, [pc, #100]	@ (8001e78 <main+0xec>)
 8001e12:	f7ff fea1 	bl	8001b58 <setAcceleration>
  setMaxSpeed(&driver1, 10000);
 8001e16:	ed9f 0a1a 	vldr	s0, [pc, #104]	@ 8001e80 <main+0xf4>
 8001e1a:	4817      	ldr	r0, [pc, #92]	@ (8001e78 <main+0xec>)
 8001e1c:	f7ff fe48 	bl	8001ab0 <setMaxSpeed>

  enableDriver(&driver1);
 8001e20:	4815      	ldr	r0, [pc, #84]	@ (8001e78 <main+0xec>)
 8001e22:	f7ff fc63 	bl	80016ec <enableDriver>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(getStatusDriver(&driver1) == DRIVER_READY)
 8001e26:	4814      	ldr	r0, [pc, #80]	@ (8001e78 <main+0xec>)
 8001e28:	f7ff fcb1 	bl	800178e <getStatusDriver>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d10c      	bne.n	8001e4c <main+0xc0>
	  {
		  if(fifoRead(&netBuf, &target) == FIFO_OK )
 8001e32:	4914      	ldr	r1, [pc, #80]	@ (8001e84 <main+0xf8>)
 8001e34:	4814      	ldr	r0, [pc, #80]	@ (8001e88 <main+0xfc>)
 8001e36:	f7ff f932 	bl	800109e <fifoRead>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b03      	cmp	r3, #3
 8001e3e:	d105      	bne.n	8001e4c <main+0xc0>
		  {
			  setTarget(&driver1, target);
 8001e40:	4b10      	ldr	r3, [pc, #64]	@ (8001e84 <main+0xf8>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4619      	mov	r1, r3
 8001e46:	480c      	ldr	r0, [pc, #48]	@ (8001e78 <main+0xec>)
 8001e48:	f7ff fde2 	bl	8001a10 <setTarget>
		  }
	  }

	  /* Основные функции управления драйверами */
	  tickDriver(&driver1);
 8001e4c:	480a      	ldr	r0, [pc, #40]	@ (8001e78 <main+0xec>)
 8001e4e:	f7ff fbeb 	bl	8001628 <tickDriver>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  /* Ethernet */
	  MX_LWIP_Process();
 8001e52:	f006 f80d 	bl	8007e70 <MX_LWIP_Process>
	  if(getStatusDriver(&driver1) == DRIVER_READY)
 8001e56:	e7e6      	b.n	8001e26 <main+0x9a>
 8001e58:	20000004 	.word	0x20000004
 8001e5c:	20000008 	.word	0x20000008
 8001e60:	2000000c 	.word	0x2000000c
 8001e64:	20000010 	.word	0x20000010
 8001e68:	20000014 	.word	0x20000014
 8001e6c:	20000018 	.word	0x20000018
 8001e70:	200008c8 	.word	0x200008c8
 8001e74:	20000030 	.word	0x20000030
 8001e78:	200008e8 	.word	0x200008e8
 8001e7c:	20000938 	.word	0x20000938
 8001e80:	461c4000 	.word	0x461c4000
 8001e84:	200009ac 	.word	0x200009ac
 8001e88:	20000174 	.word	0x20000174

08001e8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b094      	sub	sp, #80	@ 0x50
 8001e90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e92:	f107 0320 	add.w	r3, r7, #32
 8001e96:	2230      	movs	r2, #48	@ 0x30
 8001e98:	2100      	movs	r1, #0
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f010 ff93 	bl	8012dc6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ea0:	f107 030c 	add.w	r3, r7, #12
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	605a      	str	r2, [r3, #4]
 8001eaa:	609a      	str	r2, [r3, #8]
 8001eac:	60da      	str	r2, [r3, #12]
 8001eae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	60bb      	str	r3, [r7, #8]
 8001eb4:	4b28      	ldr	r3, [pc, #160]	@ (8001f58 <SystemClock_Config+0xcc>)
 8001eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb8:	4a27      	ldr	r2, [pc, #156]	@ (8001f58 <SystemClock_Config+0xcc>)
 8001eba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ebe:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ec0:	4b25      	ldr	r3, [pc, #148]	@ (8001f58 <SystemClock_Config+0xcc>)
 8001ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ec4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ec8:	60bb      	str	r3, [r7, #8]
 8001eca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ecc:	2300      	movs	r3, #0
 8001ece:	607b      	str	r3, [r7, #4]
 8001ed0:	4b22      	ldr	r3, [pc, #136]	@ (8001f5c <SystemClock_Config+0xd0>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a21      	ldr	r2, [pc, #132]	@ (8001f5c <SystemClock_Config+0xd0>)
 8001ed6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001eda:	6013      	str	r3, [r2, #0]
 8001edc:	4b1f      	ldr	r3, [pc, #124]	@ (8001f5c <SystemClock_Config+0xd0>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ee4:	607b      	str	r3, [r7, #4]
 8001ee6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001eec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001ef0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ef6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001efa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001efc:	2304      	movs	r3, #4
 8001efe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001f00:	23a8      	movs	r3, #168	@ 0xa8
 8001f02:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f04:	2302      	movs	r3, #2
 8001f06:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001f08:	2307      	movs	r3, #7
 8001f0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f0c:	f107 0320 	add.w	r3, r7, #32
 8001f10:	4618      	mov	r0, r3
 8001f12:	f003 fd45 	bl	80059a0 <HAL_RCC_OscConfig>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d001      	beq.n	8001f20 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001f1c:	f000 fc56 	bl	80027cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f20:	230f      	movs	r3, #15
 8001f22:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f24:	2302      	movs	r3, #2
 8001f26:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001f2c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001f30:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001f32:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f36:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001f38:	f107 030c 	add.w	r3, r7, #12
 8001f3c:	2105      	movs	r1, #5
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f003 ffa6 	bl	8005e90 <HAL_RCC_ClockConfig>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001f4a:	f000 fc3f 	bl	80027cc <Error_Handler>
  }
}
 8001f4e:	bf00      	nop
 8001f50:	3750      	adds	r7, #80	@ 0x50
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	40023800 	.word	0x40023800
 8001f5c:	40007000 	.word	0x40007000

08001f60 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001f66:	463b      	mov	r3, r7
 8001f68:	2200      	movs	r2, #0
 8001f6a:	601a      	str	r2, [r3, #0]
 8001f6c:	605a      	str	r2, [r3, #4]
 8001f6e:	609a      	str	r2, [r3, #8]
 8001f70:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001f72:	4b21      	ldr	r3, [pc, #132]	@ (8001ff8 <MX_ADC1_Init+0x98>)
 8001f74:	4a21      	ldr	r2, [pc, #132]	@ (8001ffc <MX_ADC1_Init+0x9c>)
 8001f76:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001f78:	4b1f      	ldr	r3, [pc, #124]	@ (8001ff8 <MX_ADC1_Init+0x98>)
 8001f7a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001f7e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001f80:	4b1d      	ldr	r3, [pc, #116]	@ (8001ff8 <MX_ADC1_Init+0x98>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001f86:	4b1c      	ldr	r3, [pc, #112]	@ (8001ff8 <MX_ADC1_Init+0x98>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001f8c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ff8 <MX_ADC1_Init+0x98>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001f92:	4b19      	ldr	r3, [pc, #100]	@ (8001ff8 <MX_ADC1_Init+0x98>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001f9a:	4b17      	ldr	r3, [pc, #92]	@ (8001ff8 <MX_ADC1_Init+0x98>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001fa0:	4b15      	ldr	r3, [pc, #84]	@ (8001ff8 <MX_ADC1_Init+0x98>)
 8001fa2:	4a17      	ldr	r2, [pc, #92]	@ (8002000 <MX_ADC1_Init+0xa0>)
 8001fa4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001fa6:	4b14      	ldr	r3, [pc, #80]	@ (8001ff8 <MX_ADC1_Init+0x98>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001fac:	4b12      	ldr	r3, [pc, #72]	@ (8001ff8 <MX_ADC1_Init+0x98>)
 8001fae:	2201      	movs	r2, #1
 8001fb0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001fb2:	4b11      	ldr	r3, [pc, #68]	@ (8001ff8 <MX_ADC1_Init+0x98>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001fba:	4b0f      	ldr	r3, [pc, #60]	@ (8001ff8 <MX_ADC1_Init+0x98>)
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001fc0:	480d      	ldr	r0, [pc, #52]	@ (8001ff8 <MX_ADC1_Init+0x98>)
 8001fc2:	f001 f9a9 	bl	8003318 <HAL_ADC_Init>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001fcc:	f000 fbfe 	bl	80027cc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001fdc:	463b      	mov	r3, r7
 8001fde:	4619      	mov	r1, r3
 8001fe0:	4805      	ldr	r0, [pc, #20]	@ (8001ff8 <MX_ADC1_Init+0x98>)
 8001fe2:	f001 f9dd 	bl	80033a0 <HAL_ADC_ConfigChannel>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001fec:	f000 fbee 	bl	80027cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001ff0:	bf00      	nop
 8001ff2:	3710      	adds	r7, #16
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	20000194 	.word	0x20000194
 8001ffc:	40012000 	.word	0x40012000
 8002000:	0f000001 	.word	0x0f000001

08002004 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8002008:	4b16      	ldr	r3, [pc, #88]	@ (8002064 <MX_CAN1_Init+0x60>)
 800200a:	4a17      	ldr	r2, [pc, #92]	@ (8002068 <MX_CAN1_Init+0x64>)
 800200c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800200e:	4b15      	ldr	r3, [pc, #84]	@ (8002064 <MX_CAN1_Init+0x60>)
 8002010:	2210      	movs	r2, #16
 8002012:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8002014:	4b13      	ldr	r3, [pc, #76]	@ (8002064 <MX_CAN1_Init+0x60>)
 8002016:	2200      	movs	r2, #0
 8002018:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800201a:	4b12      	ldr	r3, [pc, #72]	@ (8002064 <MX_CAN1_Init+0x60>)
 800201c:	2200      	movs	r2, #0
 800201e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8002020:	4b10      	ldr	r3, [pc, #64]	@ (8002064 <MX_CAN1_Init+0x60>)
 8002022:	2200      	movs	r2, #0
 8002024:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8002026:	4b0f      	ldr	r3, [pc, #60]	@ (8002064 <MX_CAN1_Init+0x60>)
 8002028:	2200      	movs	r2, #0
 800202a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800202c:	4b0d      	ldr	r3, [pc, #52]	@ (8002064 <MX_CAN1_Init+0x60>)
 800202e:	2200      	movs	r2, #0
 8002030:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8002032:	4b0c      	ldr	r3, [pc, #48]	@ (8002064 <MX_CAN1_Init+0x60>)
 8002034:	2200      	movs	r2, #0
 8002036:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8002038:	4b0a      	ldr	r3, [pc, #40]	@ (8002064 <MX_CAN1_Init+0x60>)
 800203a:	2200      	movs	r2, #0
 800203c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800203e:	4b09      	ldr	r3, [pc, #36]	@ (8002064 <MX_CAN1_Init+0x60>)
 8002040:	2200      	movs	r2, #0
 8002042:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8002044:	4b07      	ldr	r3, [pc, #28]	@ (8002064 <MX_CAN1_Init+0x60>)
 8002046:	2200      	movs	r2, #0
 8002048:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800204a:	4b06      	ldr	r3, [pc, #24]	@ (8002064 <MX_CAN1_Init+0x60>)
 800204c:	2200      	movs	r2, #0
 800204e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8002050:	4804      	ldr	r0, [pc, #16]	@ (8002064 <MX_CAN1_Init+0x60>)
 8002052:	f001 fbc3 	bl	80037dc <HAL_CAN_Init>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d001      	beq.n	8002060 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 800205c:	f000 fbb6 	bl	80027cc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8002060:	bf00      	nop
 8002062:	bd80      	pop	{r7, pc}
 8002064:	200001dc 	.word	0x200001dc
 8002068:	40006400 	.word	0x40006400

0800206c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8002072:	463b      	mov	r3, r7
 8002074:	2200      	movs	r2, #0
 8002076:	601a      	str	r2, [r3, #0]
 8002078:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800207a:	4b14      	ldr	r3, [pc, #80]	@ (80020cc <MX_DAC_Init+0x60>)
 800207c:	4a14      	ldr	r2, [pc, #80]	@ (80020d0 <MX_DAC_Init+0x64>)
 800207e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8002080:	4812      	ldr	r0, [pc, #72]	@ (80020cc <MX_DAC_Init+0x60>)
 8002082:	f001 fdb8 	bl	8003bf6 <HAL_DAC_Init>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d001      	beq.n	8002090 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 800208c:	f000 fb9e 	bl	80027cc <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8002090:	2300      	movs	r3, #0
 8002092:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002094:	2300      	movs	r3, #0
 8002096:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002098:	463b      	mov	r3, r7
 800209a:	2200      	movs	r2, #0
 800209c:	4619      	mov	r1, r3
 800209e:	480b      	ldr	r0, [pc, #44]	@ (80020cc <MX_DAC_Init+0x60>)
 80020a0:	f001 fdcb 	bl	8003c3a <HAL_DAC_ConfigChannel>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80020aa:	f000 fb8f 	bl	80027cc <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80020ae:	463b      	mov	r3, r7
 80020b0:	2210      	movs	r2, #16
 80020b2:	4619      	mov	r1, r3
 80020b4:	4805      	ldr	r0, [pc, #20]	@ (80020cc <MX_DAC_Init+0x60>)
 80020b6:	f001 fdc0 	bl	8003c3a <HAL_DAC_ConfigChannel>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 80020c0:	f000 fb84 	bl	80027cc <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80020c4:	bf00      	nop
 80020c6:	3708      	adds	r7, #8
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	20000204 	.word	0x20000204
 80020d0:	40007400 	.word	0x40007400

080020d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80020d8:	4b12      	ldr	r3, [pc, #72]	@ (8002124 <MX_I2C1_Init+0x50>)
 80020da:	4a13      	ldr	r2, [pc, #76]	@ (8002128 <MX_I2C1_Init+0x54>)
 80020dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80020de:	4b11      	ldr	r3, [pc, #68]	@ (8002124 <MX_I2C1_Init+0x50>)
 80020e0:	4a12      	ldr	r2, [pc, #72]	@ (800212c <MX_I2C1_Init+0x58>)
 80020e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80020e4:	4b0f      	ldr	r3, [pc, #60]	@ (8002124 <MX_I2C1_Init+0x50>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80020ea:	4b0e      	ldr	r3, [pc, #56]	@ (8002124 <MX_I2C1_Init+0x50>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80020f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002124 <MX_I2C1_Init+0x50>)
 80020f2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80020f6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80020f8:	4b0a      	ldr	r3, [pc, #40]	@ (8002124 <MX_I2C1_Init+0x50>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80020fe:	4b09      	ldr	r3, [pc, #36]	@ (8002124 <MX_I2C1_Init+0x50>)
 8002100:	2200      	movs	r2, #0
 8002102:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002104:	4b07      	ldr	r3, [pc, #28]	@ (8002124 <MX_I2C1_Init+0x50>)
 8002106:	2200      	movs	r2, #0
 8002108:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800210a:	4b06      	ldr	r3, [pc, #24]	@ (8002124 <MX_I2C1_Init+0x50>)
 800210c:	2200      	movs	r2, #0
 800210e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002110:	4804      	ldr	r0, [pc, #16]	@ (8002124 <MX_I2C1_Init+0x50>)
 8002112:	f003 f9f1 	bl	80054f8 <HAL_I2C_Init>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d001      	beq.n	8002120 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800211c:	f000 fb56 	bl	80027cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002120:	bf00      	nop
 8002122:	bd80      	pop	{r7, pc}
 8002124:	20000218 	.word	0x20000218
 8002128:	40005400 	.word	0x40005400
 800212c:	000186a0 	.word	0x000186a0

08002130 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002134:	4b17      	ldr	r3, [pc, #92]	@ (8002194 <MX_SPI3_Init+0x64>)
 8002136:	4a18      	ldr	r2, [pc, #96]	@ (8002198 <MX_SPI3_Init+0x68>)
 8002138:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800213a:	4b16      	ldr	r3, [pc, #88]	@ (8002194 <MX_SPI3_Init+0x64>)
 800213c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002140:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002142:	4b14      	ldr	r3, [pc, #80]	@ (8002194 <MX_SPI3_Init+0x64>)
 8002144:	2200      	movs	r2, #0
 8002146:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002148:	4b12      	ldr	r3, [pc, #72]	@ (8002194 <MX_SPI3_Init+0x64>)
 800214a:	2200      	movs	r2, #0
 800214c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800214e:	4b11      	ldr	r3, [pc, #68]	@ (8002194 <MX_SPI3_Init+0x64>)
 8002150:	2200      	movs	r2, #0
 8002152:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002154:	4b0f      	ldr	r3, [pc, #60]	@ (8002194 <MX_SPI3_Init+0x64>)
 8002156:	2200      	movs	r2, #0
 8002158:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800215a:	4b0e      	ldr	r3, [pc, #56]	@ (8002194 <MX_SPI3_Init+0x64>)
 800215c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002160:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002162:	4b0c      	ldr	r3, [pc, #48]	@ (8002194 <MX_SPI3_Init+0x64>)
 8002164:	2200      	movs	r2, #0
 8002166:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002168:	4b0a      	ldr	r3, [pc, #40]	@ (8002194 <MX_SPI3_Init+0x64>)
 800216a:	2200      	movs	r2, #0
 800216c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800216e:	4b09      	ldr	r3, [pc, #36]	@ (8002194 <MX_SPI3_Init+0x64>)
 8002170:	2200      	movs	r2, #0
 8002172:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002174:	4b07      	ldr	r3, [pc, #28]	@ (8002194 <MX_SPI3_Init+0x64>)
 8002176:	2200      	movs	r2, #0
 8002178:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 800217a:	4b06      	ldr	r3, [pc, #24]	@ (8002194 <MX_SPI3_Init+0x64>)
 800217c:	220a      	movs	r2, #10
 800217e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002180:	4804      	ldr	r0, [pc, #16]	@ (8002194 <MX_SPI3_Init+0x64>)
 8002182:	f004 f8a5 	bl	80062d0 <HAL_SPI_Init>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d001      	beq.n	8002190 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800218c:	f000 fb1e 	bl	80027cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002190:	bf00      	nop
 8002192:	bd80      	pop	{r7, pc}
 8002194:	2000026c 	.word	0x2000026c
 8002198:	40003c00 	.word	0x40003c00

0800219c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b086      	sub	sp, #24
 80021a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021a2:	f107 0308 	add.w	r3, r7, #8
 80021a6:	2200      	movs	r2, #0
 80021a8:	601a      	str	r2, [r3, #0]
 80021aa:	605a      	str	r2, [r3, #4]
 80021ac:	609a      	str	r2, [r3, #8]
 80021ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021b0:	463b      	mov	r3, r7
 80021b2:	2200      	movs	r2, #0
 80021b4:	601a      	str	r2, [r3, #0]
 80021b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80021b8:	4b1d      	ldr	r3, [pc, #116]	@ (8002230 <MX_TIM2_Init+0x94>)
 80021ba:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80021be:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 80021c0:	4b1b      	ldr	r3, [pc, #108]	@ (8002230 <MX_TIM2_Init+0x94>)
 80021c2:	2253      	movs	r2, #83	@ 0x53
 80021c4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021c6:	4b1a      	ldr	r3, [pc, #104]	@ (8002230 <MX_TIM2_Init+0x94>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80021cc:	4b18      	ldr	r3, [pc, #96]	@ (8002230 <MX_TIM2_Init+0x94>)
 80021ce:	f04f 32ff 	mov.w	r2, #4294967295
 80021d2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021d4:	4b16      	ldr	r3, [pc, #88]	@ (8002230 <MX_TIM2_Init+0x94>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021da:	4b15      	ldr	r3, [pc, #84]	@ (8002230 <MX_TIM2_Init+0x94>)
 80021dc:	2200      	movs	r2, #0
 80021de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80021e0:	4813      	ldr	r0, [pc, #76]	@ (8002230 <MX_TIM2_Init+0x94>)
 80021e2:	f004 f8fe 	bl	80063e2 <HAL_TIM_Base_Init>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d001      	beq.n	80021f0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80021ec:	f000 faee 	bl	80027cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80021f6:	f107 0308 	add.w	r3, r7, #8
 80021fa:	4619      	mov	r1, r3
 80021fc:	480c      	ldr	r0, [pc, #48]	@ (8002230 <MX_TIM2_Init+0x94>)
 80021fe:	f004 faf9 	bl	80067f4 <HAL_TIM_ConfigClockSource>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d001      	beq.n	800220c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002208:	f000 fae0 	bl	80027cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800220c:	2300      	movs	r3, #0
 800220e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002210:	2300      	movs	r3, #0
 8002212:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002214:	463b      	mov	r3, r7
 8002216:	4619      	mov	r1, r3
 8002218:	4805      	ldr	r0, [pc, #20]	@ (8002230 <MX_TIM2_Init+0x94>)
 800221a:	f004 fea9 	bl	8006f70 <HAL_TIMEx_MasterConfigSynchronization>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d001      	beq.n	8002228 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002224:	f000 fad2 	bl	80027cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002228:	bf00      	nop
 800222a:	3718      	adds	r7, #24
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	200002c4 	.word	0x200002c4

08002234 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b088      	sub	sp, #32
 8002238:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800223a:	1d3b      	adds	r3, r7, #4
 800223c:	2200      	movs	r2, #0
 800223e:	601a      	str	r2, [r3, #0]
 8002240:	605a      	str	r2, [r3, #4]
 8002242:	609a      	str	r2, [r3, #8]
 8002244:	60da      	str	r2, [r3, #12]
 8002246:	611a      	str	r2, [r3, #16]
 8002248:	615a      	str	r2, [r3, #20]
 800224a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 800224c:	4b1e      	ldr	r3, [pc, #120]	@ (80022c8 <MX_TIM13_Init+0x94>)
 800224e:	4a1f      	ldr	r2, [pc, #124]	@ (80022cc <MX_TIM13_Init+0x98>)
 8002250:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 8002252:	4b1d      	ldr	r3, [pc, #116]	@ (80022c8 <MX_TIM13_Init+0x94>)
 8002254:	2200      	movs	r2, #0
 8002256:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002258:	4b1b      	ldr	r3, [pc, #108]	@ (80022c8 <MX_TIM13_Init+0x94>)
 800225a:	2200      	movs	r2, #0
 800225c:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 800225e:	4b1a      	ldr	r3, [pc, #104]	@ (80022c8 <MX_TIM13_Init+0x94>)
 8002260:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002264:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002266:	4b18      	ldr	r3, [pc, #96]	@ (80022c8 <MX_TIM13_Init+0x94>)
 8002268:	2200      	movs	r2, #0
 800226a:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800226c:	4b16      	ldr	r3, [pc, #88]	@ (80022c8 <MX_TIM13_Init+0x94>)
 800226e:	2200      	movs	r2, #0
 8002270:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002272:	4815      	ldr	r0, [pc, #84]	@ (80022c8 <MX_TIM13_Init+0x94>)
 8002274:	f004 f8b5 	bl	80063e2 <HAL_TIM_Base_Init>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d001      	beq.n	8002282 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 800227e:	f000 faa5 	bl	80027cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8002282:	4811      	ldr	r0, [pc, #68]	@ (80022c8 <MX_TIM13_Init+0x94>)
 8002284:	f004 f99b 	bl	80065be <HAL_TIM_PWM_Init>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d001      	beq.n	8002292 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 800228e:	f000 fa9d 	bl	80027cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002292:	2360      	movs	r3, #96	@ 0x60
 8002294:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002296:	2300      	movs	r3, #0
 8002298:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800229a:	2300      	movs	r3, #0
 800229c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800229e:	2300      	movs	r3, #0
 80022a0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022a2:	1d3b      	adds	r3, r7, #4
 80022a4:	2200      	movs	r2, #0
 80022a6:	4619      	mov	r1, r3
 80022a8:	4807      	ldr	r0, [pc, #28]	@ (80022c8 <MX_TIM13_Init+0x94>)
 80022aa:	f004 f9e1 	bl	8006670 <HAL_TIM_PWM_ConfigChannel>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d001      	beq.n	80022b8 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 80022b4:	f000 fa8a 	bl	80027cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 80022b8:	4803      	ldr	r0, [pc, #12]	@ (80022c8 <MX_TIM13_Init+0x94>)
 80022ba:	f000 fc4b 	bl	8002b54 <HAL_TIM_MspPostInit>

}
 80022be:	bf00      	nop
 80022c0:	3720      	adds	r7, #32
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	2000030c 	.word	0x2000030c
 80022cc:	40001c00 	.word	0x40001c00

080022d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80022d4:	4b11      	ldr	r3, [pc, #68]	@ (800231c <MX_USART1_UART_Init+0x4c>)
 80022d6:	4a12      	ldr	r2, [pc, #72]	@ (8002320 <MX_USART1_UART_Init+0x50>)
 80022d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80022da:	4b10      	ldr	r3, [pc, #64]	@ (800231c <MX_USART1_UART_Init+0x4c>)
 80022dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80022e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80022e2:	4b0e      	ldr	r3, [pc, #56]	@ (800231c <MX_USART1_UART_Init+0x4c>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80022e8:	4b0c      	ldr	r3, [pc, #48]	@ (800231c <MX_USART1_UART_Init+0x4c>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80022ee:	4b0b      	ldr	r3, [pc, #44]	@ (800231c <MX_USART1_UART_Init+0x4c>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80022f4:	4b09      	ldr	r3, [pc, #36]	@ (800231c <MX_USART1_UART_Init+0x4c>)
 80022f6:	220c      	movs	r2, #12
 80022f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022fa:	4b08      	ldr	r3, [pc, #32]	@ (800231c <MX_USART1_UART_Init+0x4c>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002300:	4b06      	ldr	r3, [pc, #24]	@ (800231c <MX_USART1_UART_Init+0x4c>)
 8002302:	2200      	movs	r2, #0
 8002304:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002306:	4805      	ldr	r0, [pc, #20]	@ (800231c <MX_USART1_UART_Init+0x4c>)
 8002308:	f004 feae 	bl	8007068 <HAL_UART_Init>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002312:	f000 fa5b 	bl	80027cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002316:	bf00      	nop
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	20000354 	.word	0x20000354
 8002320:	40011000 	.word	0x40011000

08002324 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002328:	4b11      	ldr	r3, [pc, #68]	@ (8002370 <MX_USART3_UART_Init+0x4c>)
 800232a:	4a12      	ldr	r2, [pc, #72]	@ (8002374 <MX_USART3_UART_Init+0x50>)
 800232c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800232e:	4b10      	ldr	r3, [pc, #64]	@ (8002370 <MX_USART3_UART_Init+0x4c>)
 8002330:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002334:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002336:	4b0e      	ldr	r3, [pc, #56]	@ (8002370 <MX_USART3_UART_Init+0x4c>)
 8002338:	2200      	movs	r2, #0
 800233a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800233c:	4b0c      	ldr	r3, [pc, #48]	@ (8002370 <MX_USART3_UART_Init+0x4c>)
 800233e:	2200      	movs	r2, #0
 8002340:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002342:	4b0b      	ldr	r3, [pc, #44]	@ (8002370 <MX_USART3_UART_Init+0x4c>)
 8002344:	2200      	movs	r2, #0
 8002346:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002348:	4b09      	ldr	r3, [pc, #36]	@ (8002370 <MX_USART3_UART_Init+0x4c>)
 800234a:	220c      	movs	r2, #12
 800234c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800234e:	4b08      	ldr	r3, [pc, #32]	@ (8002370 <MX_USART3_UART_Init+0x4c>)
 8002350:	2200      	movs	r2, #0
 8002352:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002354:	4b06      	ldr	r3, [pc, #24]	@ (8002370 <MX_USART3_UART_Init+0x4c>)
 8002356:	2200      	movs	r2, #0
 8002358:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800235a:	4805      	ldr	r0, [pc, #20]	@ (8002370 <MX_USART3_UART_Init+0x4c>)
 800235c:	f004 fe84 	bl	8007068 <HAL_UART_Init>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002366:	f000 fa31 	bl	80027cc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800236a:	bf00      	nop
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	2000039c 	.word	0x2000039c
 8002374:	40004800 	.word	0x40004800

08002378 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800237c:	4b14      	ldr	r3, [pc, #80]	@ (80023d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800237e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002382:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8002384:	4b12      	ldr	r3, [pc, #72]	@ (80023d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002386:	2204      	movs	r2, #4
 8002388:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800238a:	4b11      	ldr	r3, [pc, #68]	@ (80023d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800238c:	2202      	movs	r2, #2
 800238e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002390:	4b0f      	ldr	r3, [pc, #60]	@ (80023d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002392:	2200      	movs	r2, #0
 8002394:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002396:	4b0e      	ldr	r3, [pc, #56]	@ (80023d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002398:	2202      	movs	r2, #2
 800239a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800239c:	4b0c      	ldr	r3, [pc, #48]	@ (80023d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800239e:	2200      	movs	r2, #0
 80023a0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80023a2:	4b0b      	ldr	r3, [pc, #44]	@ (80023d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80023a8:	4b09      	ldr	r3, [pc, #36]	@ (80023d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80023ae:	4b08      	ldr	r3, [pc, #32]	@ (80023d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80023b4:	4b06      	ldr	r3, [pc, #24]	@ (80023d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80023ba:	4805      	ldr	r0, [pc, #20]	@ (80023d0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80023bc:	f003 f9e0 	bl	8005780 <HAL_PCD_Init>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80023c6:	f000 fa01 	bl	80027cc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80023ca:	bf00      	nop
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	200003e4 	.word	0x200003e4

080023d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b08c      	sub	sp, #48	@ 0x30
 80023d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023da:	f107 031c 	add.w	r3, r7, #28
 80023de:	2200      	movs	r2, #0
 80023e0:	601a      	str	r2, [r3, #0]
 80023e2:	605a      	str	r2, [r3, #4]
 80023e4:	609a      	str	r2, [r3, #8]
 80023e6:	60da      	str	r2, [r3, #12]
 80023e8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80023ea:	2300      	movs	r3, #0
 80023ec:	61bb      	str	r3, [r7, #24]
 80023ee:	4b9a      	ldr	r3, [pc, #616]	@ (8002658 <MX_GPIO_Init+0x284>)
 80023f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023f2:	4a99      	ldr	r2, [pc, #612]	@ (8002658 <MX_GPIO_Init+0x284>)
 80023f4:	f043 0310 	orr.w	r3, r3, #16
 80023f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80023fa:	4b97      	ldr	r3, [pc, #604]	@ (8002658 <MX_GPIO_Init+0x284>)
 80023fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023fe:	f003 0310 	and.w	r3, r3, #16
 8002402:	61bb      	str	r3, [r7, #24]
 8002404:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002406:	2300      	movs	r3, #0
 8002408:	617b      	str	r3, [r7, #20]
 800240a:	4b93      	ldr	r3, [pc, #588]	@ (8002658 <MX_GPIO_Init+0x284>)
 800240c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800240e:	4a92      	ldr	r2, [pc, #584]	@ (8002658 <MX_GPIO_Init+0x284>)
 8002410:	f043 0304 	orr.w	r3, r3, #4
 8002414:	6313      	str	r3, [r2, #48]	@ 0x30
 8002416:	4b90      	ldr	r3, [pc, #576]	@ (8002658 <MX_GPIO_Init+0x284>)
 8002418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800241a:	f003 0304 	and.w	r3, r3, #4
 800241e:	617b      	str	r3, [r7, #20]
 8002420:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002422:	2300      	movs	r3, #0
 8002424:	613b      	str	r3, [r7, #16]
 8002426:	4b8c      	ldr	r3, [pc, #560]	@ (8002658 <MX_GPIO_Init+0x284>)
 8002428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800242a:	4a8b      	ldr	r2, [pc, #556]	@ (8002658 <MX_GPIO_Init+0x284>)
 800242c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002430:	6313      	str	r3, [r2, #48]	@ 0x30
 8002432:	4b89      	ldr	r3, [pc, #548]	@ (8002658 <MX_GPIO_Init+0x284>)
 8002434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002436:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800243a:	613b      	str	r3, [r7, #16]
 800243c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800243e:	2300      	movs	r3, #0
 8002440:	60fb      	str	r3, [r7, #12]
 8002442:	4b85      	ldr	r3, [pc, #532]	@ (8002658 <MX_GPIO_Init+0x284>)
 8002444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002446:	4a84      	ldr	r2, [pc, #528]	@ (8002658 <MX_GPIO_Init+0x284>)
 8002448:	f043 0301 	orr.w	r3, r3, #1
 800244c:	6313      	str	r3, [r2, #48]	@ 0x30
 800244e:	4b82      	ldr	r3, [pc, #520]	@ (8002658 <MX_GPIO_Init+0x284>)
 8002450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002452:	f003 0301 	and.w	r3, r3, #1
 8002456:	60fb      	str	r3, [r7, #12]
 8002458:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800245a:	2300      	movs	r3, #0
 800245c:	60bb      	str	r3, [r7, #8]
 800245e:	4b7e      	ldr	r3, [pc, #504]	@ (8002658 <MX_GPIO_Init+0x284>)
 8002460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002462:	4a7d      	ldr	r2, [pc, #500]	@ (8002658 <MX_GPIO_Init+0x284>)
 8002464:	f043 0302 	orr.w	r3, r3, #2
 8002468:	6313      	str	r3, [r2, #48]	@ 0x30
 800246a:	4b7b      	ldr	r3, [pc, #492]	@ (8002658 <MX_GPIO_Init+0x284>)
 800246c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	60bb      	str	r3, [r7, #8]
 8002474:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002476:	2300      	movs	r3, #0
 8002478:	607b      	str	r3, [r7, #4]
 800247a:	4b77      	ldr	r3, [pc, #476]	@ (8002658 <MX_GPIO_Init+0x284>)
 800247c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800247e:	4a76      	ldr	r2, [pc, #472]	@ (8002658 <MX_GPIO_Init+0x284>)
 8002480:	f043 0308 	orr.w	r3, r3, #8
 8002484:	6313      	str	r3, [r2, #48]	@ 0x30
 8002486:	4b74      	ldr	r3, [pc, #464]	@ (8002658 <MX_GPIO_Init+0x284>)
 8002488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800248a:	f003 0308 	and.w	r3, r3, #8
 800248e:	607b      	str	r3, [r7, #4]
 8002490:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ZERO_POS2_Pin|DIR1_Pin|DIR2_Pin|STEP1_Pin
 8002492:	2200      	movs	r2, #0
 8002494:	f64f 7188 	movw	r1, #65416	@ 0xff88
 8002498:	4870      	ldr	r0, [pc, #448]	@ (800265c <MX_GPIO_Init+0x288>)
 800249a:	f003 f813 	bl	80054c4 <HAL_GPIO_WritePin>
                          |DIR3_Pin|STEP2_Pin|DIR4_Pin|STEP3_Pin
                          |STEP4_Pin|DIR5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ACK_LINE0_Pin|ACK_LINE1_Pin|ACK_LINE2_Pin|STEP6_Pin, GPIO_PIN_RESET);
 800249e:	2200      	movs	r2, #0
 80024a0:	f24e 0180 	movw	r1, #57472	@ 0xe080
 80024a4:	486e      	ldr	r0, [pc, #440]	@ (8002660 <MX_GPIO_Init+0x28c>)
 80024a6:	f003 f80d 	bl	80054c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, STEP7_Pin|STEP8_Pin|DIR6_Pin|DIR7_Pin
 80024aa:	2200      	movs	r2, #0
 80024ac:	f24c 7113 	movw	r1, #50963	@ 0xc713
 80024b0:	486c      	ldr	r0, [pc, #432]	@ (8002664 <MX_GPIO_Init+0x290>)
 80024b2:	f003 f807 	bl	80054c4 <HAL_GPIO_WritePin>
                          |DIR8_Pin|STEP5_Pin|SPI3_NSS1_Pin|SPI3_NSS0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_STATE_Pin|SPI3_NSS2_Pin, GPIO_PIN_RESET);
 80024b6:	2200      	movs	r2, #0
 80024b8:	f44f 4101 	mov.w	r1, #33024	@ 0x8100
 80024bc:	486a      	ldr	r0, [pc, #424]	@ (8002668 <MX_GPIO_Init+0x294>)
 80024be:	f003 f801 	bl	80054c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(READY_GPIO_Port, READY_Pin, GPIO_PIN_RESET);
 80024c2:	2200      	movs	r2, #0
 80024c4:	2108      	movs	r1, #8
 80024c6:	4869      	ldr	r0, [pc, #420]	@ (800266c <MX_GPIO_Init+0x298>)
 80024c8:	f002 fffc 	bl	80054c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ZERO_POS3_Pin ZERO_POS1_Pin ZERO_POS4_Pin */
  GPIO_InitStruct.Pin = ZERO_POS3_Pin|ZERO_POS1_Pin|ZERO_POS4_Pin;
 80024cc:	2345      	movs	r3, #69	@ 0x45
 80024ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024d0:	2300      	movs	r3, #0
 80024d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d4:	2300      	movs	r3, #0
 80024d6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80024d8:	f107 031c 	add.w	r3, r7, #28
 80024dc:	4619      	mov	r1, r3
 80024de:	485f      	ldr	r0, [pc, #380]	@ (800265c <MX_GPIO_Init+0x288>)
 80024e0:	f002 fe54 	bl	800518c <HAL_GPIO_Init>

  /*Configure GPIO pin : ZERO_POS2_Pin */
  GPIO_InitStruct.Pin = ZERO_POS2_Pin;
 80024e4:	2308      	movs	r3, #8
 80024e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024e8:	2301      	movs	r3, #1
 80024ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ec:	2300      	movs	r3, #0
 80024ee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024f0:	2300      	movs	r3, #0
 80024f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ZERO_POS2_GPIO_Port, &GPIO_InitStruct);
 80024f4:	f107 031c 	add.w	r3, r7, #28
 80024f8:	4619      	mov	r1, r3
 80024fa:	4858      	ldr	r0, [pc, #352]	@ (800265c <MX_GPIO_Init+0x288>)
 80024fc:	f002 fe46 	bl	800518c <HAL_GPIO_Init>

  /*Configure GPIO pins : EXTI_4_LS3_P_Pin EXTI_5_LS3_N_Pin EXTI_1_LS1_N_Pin */
  GPIO_InitStruct.Pin = EXTI_4_LS3_P_Pin|EXTI_5_LS3_N_Pin|EXTI_1_LS1_N_Pin;
 8002500:	2332      	movs	r3, #50	@ 0x32
 8002502:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002504:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002508:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250a:	2300      	movs	r3, #0
 800250c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800250e:	f107 031c 	add.w	r3, r7, #28
 8002512:	4619      	mov	r1, r3
 8002514:	4851      	ldr	r0, [pc, #324]	@ (800265c <MX_GPIO_Init+0x288>)
 8002516:	f002 fe39 	bl	800518c <HAL_GPIO_Init>

  /*Configure GPIO pins : ACK_LINE0_Pin ACK_LINE1_Pin ACK_LINE2_Pin */
  GPIO_InitStruct.Pin = ACK_LINE0_Pin|ACK_LINE1_Pin|ACK_LINE2_Pin;
 800251a:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800251e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002520:	2301      	movs	r3, #1
 8002522:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002524:	2300      	movs	r3, #0
 8002526:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002528:	2300      	movs	r3, #0
 800252a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800252c:	f107 031c 	add.w	r3, r7, #28
 8002530:	4619      	mov	r1, r3
 8002532:	484b      	ldr	r0, [pc, #300]	@ (8002660 <MX_GPIO_Init+0x28c>)
 8002534:	f002 fe2a 	bl	800518c <HAL_GPIO_Init>

  /*Configure GPIO pins : EXTI_0_LS1_P_Pin EXTI_2_LS2_P_Pin EXTI_3_LS2_N_Pin EXTI_6_LS4_P_Pin
                           EXTI_8_LS5_P_Pin EXTI_9_LS5_N_Pin */
  GPIO_InitStruct.Pin = EXTI_0_LS1_P_Pin|EXTI_2_LS2_P_Pin|EXTI_3_LS2_N_Pin|EXTI_6_LS4_P_Pin
 8002538:	f240 334d 	movw	r3, #845	@ 0x34d
 800253c:	61fb      	str	r3, [r7, #28]
                          |EXTI_8_LS5_P_Pin|EXTI_9_LS5_N_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800253e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002542:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002544:	2300      	movs	r3, #0
 8002546:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002548:	f107 031c 	add.w	r3, r7, #28
 800254c:	4619      	mov	r1, r3
 800254e:	4844      	ldr	r0, [pc, #272]	@ (8002660 <MX_GPIO_Init+0x28c>)
 8002550:	f002 fe1c 	bl	800518c <HAL_GPIO_Init>

  /*Configure GPIO pins : STEP7_Pin STEP8_Pin DIR6_Pin DIR7_Pin
                           DIR8_Pin STEP5_Pin */
  GPIO_InitStruct.Pin = STEP7_Pin|STEP8_Pin|DIR6_Pin|DIR7_Pin
 8002554:	f24c 4313 	movw	r3, #50195	@ 0xc413
 8002558:	61fb      	str	r3, [r7, #28]
                          |DIR8_Pin|STEP5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800255a:	2301      	movs	r3, #1
 800255c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255e:	2300      	movs	r3, #0
 8002560:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002562:	2303      	movs	r3, #3
 8002564:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002566:	f107 031c 	add.w	r3, r7, #28
 800256a:	4619      	mov	r1, r3
 800256c:	483d      	ldr	r0, [pc, #244]	@ (8002664 <MX_GPIO_Init+0x290>)
 800256e:	f002 fe0d 	bl	800518c <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR1_Pin DIR2_Pin STEP1_Pin DIR3_Pin
                           STEP2_Pin DIR4_Pin STEP3_Pin STEP4_Pin
                           DIR5_Pin */
  GPIO_InitStruct.Pin = DIR1_Pin|DIR2_Pin|STEP1_Pin|DIR3_Pin
 8002572:	f64f 7380 	movw	r3, #65408	@ 0xff80
 8002576:	61fb      	str	r3, [r7, #28]
                          |STEP2_Pin|DIR4_Pin|STEP3_Pin|STEP4_Pin
                          |DIR5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002578:	2301      	movs	r3, #1
 800257a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257c:	2300      	movs	r3, #0
 800257e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002580:	2303      	movs	r3, #3
 8002582:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002584:	f107 031c 	add.w	r3, r7, #28
 8002588:	4619      	mov	r1, r3
 800258a:	4834      	ldr	r0, [pc, #208]	@ (800265c <MX_GPIO_Init+0x288>)
 800258c:	f002 fdfe 	bl	800518c <HAL_GPIO_Init>

  /*Configure GPIO pins : EXTI_10_LS6_P_Pin EXTI_11_LS6_N_Pin EXTI_12_LS7_P_Pin EXTI_13_LS7_N_Pin
                           EXTI_14_LS8_P_Pin EXTI_15_LS8_N_Pin EXTI_7_LS4_N_Pin */
  GPIO_InitStruct.Pin = EXTI_10_LS6_P_Pin|EXTI_11_LS6_N_Pin|EXTI_12_LS7_P_Pin|EXTI_13_LS7_N_Pin
 8002590:	f64f 4380 	movw	r3, #64640	@ 0xfc80
 8002594:	61fb      	str	r3, [r7, #28]
                          |EXTI_14_LS8_P_Pin|EXTI_15_LS8_N_Pin|EXTI_7_LS4_N_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002596:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800259a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259c:	2300      	movs	r3, #0
 800259e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025a0:	f107 031c 	add.w	r3, r7, #28
 80025a4:	4619      	mov	r1, r3
 80025a6:	4831      	ldr	r0, [pc, #196]	@ (800266c <MX_GPIO_Init+0x298>)
 80025a8:	f002 fdf0 	bl	800518c <HAL_GPIO_Init>

  /*Configure GPIO pin : STEP6_Pin */
  GPIO_InitStruct.Pin = STEP6_Pin;
 80025ac:	2380      	movs	r3, #128	@ 0x80
 80025ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025b0:	2301      	movs	r3, #1
 80025b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b4:	2300      	movs	r3, #0
 80025b6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025b8:	2303      	movs	r3, #3
 80025ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(STEP6_GPIO_Port, &GPIO_InitStruct);
 80025bc:	f107 031c 	add.w	r3, r7, #28
 80025c0:	4619      	mov	r1, r3
 80025c2:	4827      	ldr	r0, [pc, #156]	@ (8002660 <MX_GPIO_Init+0x28c>)
 80025c4:	f002 fde2 	bl	800518c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_STATE_Pin SPI3_NSS2_Pin */
  GPIO_InitStruct.Pin = LED_STATE_Pin|SPI3_NSS2_Pin;
 80025c8:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 80025cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025ce:	2301      	movs	r3, #1
 80025d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d2:	2300      	movs	r3, #0
 80025d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025d6:	2300      	movs	r3, #0
 80025d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025da:	f107 031c 	add.w	r3, r7, #28
 80025de:	4619      	mov	r1, r3
 80025e0:	4821      	ldr	r0, [pc, #132]	@ (8002668 <MX_GPIO_Init+0x294>)
 80025e2:	f002 fdd3 	bl	800518c <HAL_GPIO_Init>

  /*Configure GPIO pins : STARTUP_OPTION1_Pin ZERO_POS8_Pin ZERO_POS7_Pin ZERO_POS6_Pin */
  GPIO_InitStruct.Pin = STARTUP_OPTION1_Pin|ZERO_POS8_Pin|ZERO_POS7_Pin|ZERO_POS6_Pin;
 80025e6:	2374      	movs	r3, #116	@ 0x74
 80025e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025ea:	2300      	movs	r3, #0
 80025ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ee:	2300      	movs	r3, #0
 80025f0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025f2:	f107 031c 	add.w	r3, r7, #28
 80025f6:	4619      	mov	r1, r3
 80025f8:	481c      	ldr	r0, [pc, #112]	@ (800266c <MX_GPIO_Init+0x298>)
 80025fa:	f002 fdc7 	bl	800518c <HAL_GPIO_Init>

  /*Configure GPIO pin : READY_Pin */
  GPIO_InitStruct.Pin = READY_Pin;
 80025fe:	2308      	movs	r3, #8
 8002600:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002602:	2301      	movs	r3, #1
 8002604:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002606:	2300      	movs	r3, #0
 8002608:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800260a:	2300      	movs	r3, #0
 800260c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(READY_GPIO_Port, &GPIO_InitStruct);
 800260e:	f107 031c 	add.w	r3, r7, #28
 8002612:	4619      	mov	r1, r3
 8002614:	4815      	ldr	r0, [pc, #84]	@ (800266c <MX_GPIO_Init+0x298>)
 8002616:	f002 fdb9 	bl	800518c <HAL_GPIO_Init>

  /*Configure GPIO pin : ZERO_POS5_Pin */
  GPIO_InitStruct.Pin = ZERO_POS5_Pin;
 800261a:	2320      	movs	r3, #32
 800261c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800261e:	2300      	movs	r3, #0
 8002620:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002622:	2300      	movs	r3, #0
 8002624:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ZERO_POS5_GPIO_Port, &GPIO_InitStruct);
 8002626:	f107 031c 	add.w	r3, r7, #28
 800262a:	4619      	mov	r1, r3
 800262c:	480d      	ldr	r0, [pc, #52]	@ (8002664 <MX_GPIO_Init+0x290>)
 800262e:	f002 fdad 	bl	800518c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI3_NSS1_Pin SPI3_NSS0_Pin */
  GPIO_InitStruct.Pin = SPI3_NSS1_Pin|SPI3_NSS0_Pin;
 8002632:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002636:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002638:	2301      	movs	r3, #1
 800263a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800263c:	2300      	movs	r3, #0
 800263e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002640:	2300      	movs	r3, #0
 8002642:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002644:	f107 031c 	add.w	r3, r7, #28
 8002648:	4619      	mov	r1, r3
 800264a:	4806      	ldr	r0, [pc, #24]	@ (8002664 <MX_GPIO_Init+0x290>)
 800264c:	f002 fd9e 	bl	800518c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002650:	bf00      	nop
 8002652:	3730      	adds	r7, #48	@ 0x30
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	40023800 	.word	0x40023800
 800265c:	40021000 	.word	0x40021000
 8002660:	40020800 	.word	0x40020800
 8002664:	40020400 	.word	0x40020400
 8002668:	40020000 	.word	0x40020000
 800266c:	40020c00 	.word	0x40020c00

08002670 <startTimerTIM2>:

/** Запуск таймера для отсчета времени в микросекундах
 * 	Используется таймер TIM2
 */
void startTimerTIM2(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8002674:	4802      	ldr	r0, [pc, #8]	@ (8002680 <startTimerTIM2+0x10>)
 8002676:	f003 ff03 	bl	8006480 <HAL_TIM_Base_Start_IT>
}
 800267a:	bf00      	nop
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	200002c4 	.word	0x200002c4

08002684 <stopTimerTIM2>:

/** Остановка таймера для отсчета времени в микросекундах
 * 	Используется таймер TIM2
 */
void stopTimerTIM2(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim2);
 8002688:	4802      	ldr	r0, [pc, #8]	@ (8002694 <stopTimerTIM2+0x10>)
 800268a:	f003 ff69 	bl	8006560 <HAL_TIM_Base_Stop_IT>
}
 800268e:	bf00      	nop
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	200002c4 	.word	0x200002c4

08002698 <resetTimerTIM2>:

/** Функция сброса счетчика таймера в 0
 * 	Используется таймер TIM2
 */
void resetTimerTIM2(void)
{
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0
	TIM2->CNT = 0;
 800269c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80026a0:	2200      	movs	r2, #0
 80026a2:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80026a4:	bf00      	nop
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr

080026ae <getMicrosecondsTIM2>:
 * Используется таймер TIM2
 * Частота работы таймера 1МГц
 * 1 тик таймера = 1 мкс
 */
uint32_t getMicrosecondsTIM2(void)
{
 80026ae:	b480      	push	{r7}
 80026b0:	af00      	add	r7, sp, #0
	return TIM2->CNT;
 80026b2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80026b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
	...

080026c4 <udpReceiveHandler>:

/**
 *
 */
void udpReceiveHandler(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b0c2      	sub	sp, #264	@ 0x108
 80026c8:	af00      	add	r7, sp, #0
	if(rxBuf[0] == 'S')
 80026ca:	4b38      	ldr	r3, [pc, #224]	@ (80027ac <udpReceiveHandler+0xe8>)
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	2b53      	cmp	r3, #83	@ 0x53
 80026d0:	d124      	bne.n	800271c <udpReceiveHandler+0x58>
	{
		uint16_t speed = strtol(&rxBuf[1], NULL, 10);
 80026d2:	220a      	movs	r2, #10
 80026d4:	2100      	movs	r1, #0
 80026d6:	4836      	ldr	r0, [pc, #216]	@ (80027b0 <udpReceiveHandler+0xec>)
 80026d8:	f010 fa08 	bl	8012aec <strtol>
 80026dc:	4603      	mov	r3, r0
 80026de:	f8a7 3100 	strh.w	r3, [r7, #256]	@ 0x100
		setMaxSpeed(&driver1, speed);
 80026e2:	f8b7 3100 	ldrh.w	r3, [r7, #256]	@ 0x100
 80026e6:	ee07 3a90 	vmov	s15, r3
 80026ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026ee:	eeb0 0a67 	vmov.f32	s0, s15
 80026f2:	4830      	ldr	r0, [pc, #192]	@ (80027b4 <udpReceiveHandler+0xf0>)
 80026f4:	f7ff f9dc 	bl	8001ab0 <setMaxSpeed>

		char data[256];
		sprintf(data, "STM32: Max speed = %d; Counter received message = %d;\n", speed, counter);
 80026f8:	f8b7 2100 	ldrh.w	r2, [r7, #256]	@ 0x100
 80026fc:	4b2e      	ldr	r3, [pc, #184]	@ (80027b8 <udpReceiveHandler+0xf4>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4638      	mov	r0, r7
 8002702:	492e      	ldr	r1, [pc, #184]	@ (80027bc <udpReceiveHandler+0xf8>)
 8002704:	f010 fad0 	bl	8012ca8 <siprintf>
		udpClientSend(data);
 8002708:	463b      	mov	r3, r7
 800270a:	4618      	mov	r0, r3
 800270c:	f7fe fd5c 	bl	80011c8 <udpClientSend>

		memset(rxBuf, 0, 128);
 8002710:	2280      	movs	r2, #128	@ 0x80
 8002712:	2100      	movs	r1, #0
 8002714:	4825      	ldr	r0, [pc, #148]	@ (80027ac <udpReceiveHandler+0xe8>)
 8002716:	f010 fb56 	bl	8012dc6 <memset>
 800271a:	e042      	b.n	80027a2 <udpReceiveHandler+0xde>
		return;
	}

	if(rxBuf[0] == 'A')
 800271c:	4b23      	ldr	r3, [pc, #140]	@ (80027ac <udpReceiveHandler+0xe8>)
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	2b41      	cmp	r3, #65	@ 0x41
 8002722:	d11f      	bne.n	8002764 <udpReceiveHandler+0xa0>
	{
		uint16_t acceleration = strtol(&rxBuf[1], NULL, 10);
 8002724:	220a      	movs	r2, #10
 8002726:	2100      	movs	r1, #0
 8002728:	4821      	ldr	r0, [pc, #132]	@ (80027b0 <udpReceiveHandler+0xec>)
 800272a:	f010 f9df 	bl	8012aec <strtol>
 800272e:	4603      	mov	r3, r0
 8002730:	f8a7 3102 	strh.w	r3, [r7, #258]	@ 0x102
		setAcceleration(&driver1, acceleration);
 8002734:	f8b7 3102 	ldrh.w	r3, [r7, #258]	@ 0x102
 8002738:	4619      	mov	r1, r3
 800273a:	481e      	ldr	r0, [pc, #120]	@ (80027b4 <udpReceiveHandler+0xf0>)
 800273c:	f7ff fa0c 	bl	8001b58 <setAcceleration>

		char data[256];
		sprintf(data, "STM32: Acceleration = %d; Counter received message = %d;\n", acceleration, counter);
 8002740:	f8b7 2102 	ldrh.w	r2, [r7, #258]	@ 0x102
 8002744:	4b1c      	ldr	r3, [pc, #112]	@ (80027b8 <udpReceiveHandler+0xf4>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4638      	mov	r0, r7
 800274a:	491d      	ldr	r1, [pc, #116]	@ (80027c0 <udpReceiveHandler+0xfc>)
 800274c:	f010 faac 	bl	8012ca8 <siprintf>
		udpClientSend(data);
 8002750:	463b      	mov	r3, r7
 8002752:	4618      	mov	r0, r3
 8002754:	f7fe fd38 	bl	80011c8 <udpClientSend>

		memset(rxBuf, 0, 128);
 8002758:	2280      	movs	r2, #128	@ 0x80
 800275a:	2100      	movs	r1, #0
 800275c:	4813      	ldr	r0, [pc, #76]	@ (80027ac <udpReceiveHandler+0xe8>)
 800275e:	f010 fb32 	bl	8012dc6 <memset>
 8002762:	e01e      	b.n	80027a2 <udpReceiveHandler+0xde>
		return;
	}

	int target_pos = strtol(rxBuf, NULL, 10);
 8002764:	220a      	movs	r2, #10
 8002766:	2100      	movs	r1, #0
 8002768:	4810      	ldr	r0, [pc, #64]	@ (80027ac <udpReceiveHandler+0xe8>)
 800276a:	f010 f9bf 	bl	8012aec <strtol>
 800276e:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
	memset(rxBuf, 0, 128);
 8002772:	2280      	movs	r2, #128	@ 0x80
 8002774:	2100      	movs	r1, #0
 8002776:	480d      	ldr	r0, [pc, #52]	@ (80027ac <udpReceiveHandler+0xe8>)
 8002778:	f010 fb25 	bl	8012dc6 <memset>

	if(fifoWrite(&netBuf, target_pos) == FIFO_OVERFLOW)
 800277c:	f8d7 1104 	ldr.w	r1, [r7, #260]	@ 0x104
 8002780:	4810      	ldr	r0, [pc, #64]	@ (80027c4 <udpReceiveHandler+0x100>)
 8002782:	f7fe fc5c 	bl	800103e <fifoWrite>
 8002786:	4603      	mov	r3, r0
 8002788:	2b02      	cmp	r3, #2
 800278a:	d10a      	bne.n	80027a2 <udpReceiveHandler+0xde>
	{
		char data[256];
		sprintf(data, "STM32: Fifo-buffer is overflow! Counter received message = %d;\n", counter);
 800278c:	4b0a      	ldr	r3, [pc, #40]	@ (80027b8 <udpReceiveHandler+0xf4>)
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	463b      	mov	r3, r7
 8002792:	490d      	ldr	r1, [pc, #52]	@ (80027c8 <udpReceiveHandler+0x104>)
 8002794:	4618      	mov	r0, r3
 8002796:	f010 fa87 	bl	8012ca8 <siprintf>
		udpClientSend(data);
 800279a:	463b      	mov	r3, r7
 800279c:	4618      	mov	r0, r3
 800279e:	f7fe fd13 	bl	80011c8 <udpClientSend>
//	setTarget(&driver1, target_pos);
//	setTarget(&driver2, target_pos);
//
//	sprintf(data, "target = %d;\n", target_pos);
//	udpClientSend(data);
}
 80027a2:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	200000f0 	.word	0x200000f0
 80027b0:	200000f1 	.word	0x200000f1
 80027b4:	200008e8 	.word	0x200008e8
 80027b8:	20000170 	.word	0x20000170
 80027bc:	08013db4 	.word	0x08013db4
 80027c0:	08013dec 	.word	0x08013dec
 80027c4:	20000174 	.word	0x20000174
 80027c8:	08013e28 	.word	0x08013e28

080027cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027cc:	b480      	push	{r7}
 80027ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027d0:	b672      	cpsid	i
}
 80027d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80027d4:	bf00      	nop
 80027d6:	e7fd      	b.n	80027d4 <Error_Handler+0x8>

080027d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027de:	2300      	movs	r3, #0
 80027e0:	607b      	str	r3, [r7, #4]
 80027e2:	4b10      	ldr	r3, [pc, #64]	@ (8002824 <HAL_MspInit+0x4c>)
 80027e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027e6:	4a0f      	ldr	r2, [pc, #60]	@ (8002824 <HAL_MspInit+0x4c>)
 80027e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80027ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80027ee:	4b0d      	ldr	r3, [pc, #52]	@ (8002824 <HAL_MspInit+0x4c>)
 80027f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027f6:	607b      	str	r3, [r7, #4]
 80027f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027fa:	2300      	movs	r3, #0
 80027fc:	603b      	str	r3, [r7, #0]
 80027fe:	4b09      	ldr	r3, [pc, #36]	@ (8002824 <HAL_MspInit+0x4c>)
 8002800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002802:	4a08      	ldr	r2, [pc, #32]	@ (8002824 <HAL_MspInit+0x4c>)
 8002804:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002808:	6413      	str	r3, [r2, #64]	@ 0x40
 800280a:	4b06      	ldr	r3, [pc, #24]	@ (8002824 <HAL_MspInit+0x4c>)
 800280c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800280e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002812:	603b      	str	r3, [r7, #0]
 8002814:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002816:	bf00      	nop
 8002818:	370c      	adds	r7, #12
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr
 8002822:	bf00      	nop
 8002824:	40023800 	.word	0x40023800

08002828 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b08a      	sub	sp, #40	@ 0x28
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002830:	f107 0314 	add.w	r3, r7, #20
 8002834:	2200      	movs	r2, #0
 8002836:	601a      	str	r2, [r3, #0]
 8002838:	605a      	str	r2, [r3, #4]
 800283a:	609a      	str	r2, [r3, #8]
 800283c:	60da      	str	r2, [r3, #12]
 800283e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a17      	ldr	r2, [pc, #92]	@ (80028a4 <HAL_ADC_MspInit+0x7c>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d127      	bne.n	800289a <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800284a:	2300      	movs	r3, #0
 800284c:	613b      	str	r3, [r7, #16]
 800284e:	4b16      	ldr	r3, [pc, #88]	@ (80028a8 <HAL_ADC_MspInit+0x80>)
 8002850:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002852:	4a15      	ldr	r2, [pc, #84]	@ (80028a8 <HAL_ADC_MspInit+0x80>)
 8002854:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002858:	6453      	str	r3, [r2, #68]	@ 0x44
 800285a:	4b13      	ldr	r3, [pc, #76]	@ (80028a8 <HAL_ADC_MspInit+0x80>)
 800285c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800285e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002862:	613b      	str	r3, [r7, #16]
 8002864:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002866:	2300      	movs	r3, #0
 8002868:	60fb      	str	r3, [r7, #12]
 800286a:	4b0f      	ldr	r3, [pc, #60]	@ (80028a8 <HAL_ADC_MspInit+0x80>)
 800286c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800286e:	4a0e      	ldr	r2, [pc, #56]	@ (80028a8 <HAL_ADC_MspInit+0x80>)
 8002870:	f043 0301 	orr.w	r3, r3, #1
 8002874:	6313      	str	r3, [r2, #48]	@ 0x30
 8002876:	4b0c      	ldr	r3, [pc, #48]	@ (80028a8 <HAL_ADC_MspInit+0x80>)
 8002878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800287a:	f003 0301 	and.w	r3, r3, #1
 800287e:	60fb      	str	r3, [r7, #12]
 8002880:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8002882:	2309      	movs	r3, #9
 8002884:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002886:	2303      	movs	r3, #3
 8002888:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288a:	2300      	movs	r3, #0
 800288c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800288e:	f107 0314 	add.w	r3, r7, #20
 8002892:	4619      	mov	r1, r3
 8002894:	4805      	ldr	r0, [pc, #20]	@ (80028ac <HAL_ADC_MspInit+0x84>)
 8002896:	f002 fc79 	bl	800518c <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800289a:	bf00      	nop
 800289c:	3728      	adds	r7, #40	@ 0x28
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	40012000 	.word	0x40012000
 80028a8:	40023800 	.word	0x40023800
 80028ac:	40020000 	.word	0x40020000

080028b0 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b08a      	sub	sp, #40	@ 0x28
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028b8:	f107 0314 	add.w	r3, r7, #20
 80028bc:	2200      	movs	r2, #0
 80028be:	601a      	str	r2, [r3, #0]
 80028c0:	605a      	str	r2, [r3, #4]
 80028c2:	609a      	str	r2, [r3, #8]
 80028c4:	60da      	str	r2, [r3, #12]
 80028c6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a19      	ldr	r2, [pc, #100]	@ (8002934 <HAL_CAN_MspInit+0x84>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d12b      	bne.n	800292a <HAL_CAN_MspInit+0x7a>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80028d2:	2300      	movs	r3, #0
 80028d4:	613b      	str	r3, [r7, #16]
 80028d6:	4b18      	ldr	r3, [pc, #96]	@ (8002938 <HAL_CAN_MspInit+0x88>)
 80028d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028da:	4a17      	ldr	r2, [pc, #92]	@ (8002938 <HAL_CAN_MspInit+0x88>)
 80028dc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80028e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80028e2:	4b15      	ldr	r3, [pc, #84]	@ (8002938 <HAL_CAN_MspInit+0x88>)
 80028e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028ea:	613b      	str	r3, [r7, #16]
 80028ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80028ee:	2300      	movs	r3, #0
 80028f0:	60fb      	str	r3, [r7, #12]
 80028f2:	4b11      	ldr	r3, [pc, #68]	@ (8002938 <HAL_CAN_MspInit+0x88>)
 80028f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028f6:	4a10      	ldr	r2, [pc, #64]	@ (8002938 <HAL_CAN_MspInit+0x88>)
 80028f8:	f043 0308 	orr.w	r3, r3, #8
 80028fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80028fe:	4b0e      	ldr	r3, [pc, #56]	@ (8002938 <HAL_CAN_MspInit+0x88>)
 8002900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002902:	f003 0308 	and.w	r3, r3, #8
 8002906:	60fb      	str	r3, [r7, #12]
 8002908:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800290a:	2303      	movs	r3, #3
 800290c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800290e:	2302      	movs	r3, #2
 8002910:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002912:	2300      	movs	r3, #0
 8002914:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002916:	2303      	movs	r3, #3
 8002918:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800291a:	2309      	movs	r3, #9
 800291c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800291e:	f107 0314 	add.w	r3, r7, #20
 8002922:	4619      	mov	r1, r3
 8002924:	4805      	ldr	r0, [pc, #20]	@ (800293c <HAL_CAN_MspInit+0x8c>)
 8002926:	f002 fc31 	bl	800518c <HAL_GPIO_Init>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 800292a:	bf00      	nop
 800292c:	3728      	adds	r7, #40	@ 0x28
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	40006400 	.word	0x40006400
 8002938:	40023800 	.word	0x40023800
 800293c:	40020c00 	.word	0x40020c00

08002940 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b08a      	sub	sp, #40	@ 0x28
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002948:	f107 0314 	add.w	r3, r7, #20
 800294c:	2200      	movs	r2, #0
 800294e:	601a      	str	r2, [r3, #0]
 8002950:	605a      	str	r2, [r3, #4]
 8002952:	609a      	str	r2, [r3, #8]
 8002954:	60da      	str	r2, [r3, #12]
 8002956:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a17      	ldr	r2, [pc, #92]	@ (80029bc <HAL_DAC_MspInit+0x7c>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d127      	bne.n	80029b2 <HAL_DAC_MspInit+0x72>
  {
    /* USER CODE BEGIN DAC_MspInit 0 */

    /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8002962:	2300      	movs	r3, #0
 8002964:	613b      	str	r3, [r7, #16]
 8002966:	4b16      	ldr	r3, [pc, #88]	@ (80029c0 <HAL_DAC_MspInit+0x80>)
 8002968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800296a:	4a15      	ldr	r2, [pc, #84]	@ (80029c0 <HAL_DAC_MspInit+0x80>)
 800296c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002970:	6413      	str	r3, [r2, #64]	@ 0x40
 8002972:	4b13      	ldr	r3, [pc, #76]	@ (80029c0 <HAL_DAC_MspInit+0x80>)
 8002974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002976:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800297a:	613b      	str	r3, [r7, #16]
 800297c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800297e:	2300      	movs	r3, #0
 8002980:	60fb      	str	r3, [r7, #12]
 8002982:	4b0f      	ldr	r3, [pc, #60]	@ (80029c0 <HAL_DAC_MspInit+0x80>)
 8002984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002986:	4a0e      	ldr	r2, [pc, #56]	@ (80029c0 <HAL_DAC_MspInit+0x80>)
 8002988:	f043 0301 	orr.w	r3, r3, #1
 800298c:	6313      	str	r3, [r2, #48]	@ 0x30
 800298e:	4b0c      	ldr	r3, [pc, #48]	@ (80029c0 <HAL_DAC_MspInit+0x80>)
 8002990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002992:	f003 0301 	and.w	r3, r3, #1
 8002996:	60fb      	str	r3, [r7, #12]
 8002998:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800299a:	2330      	movs	r3, #48	@ 0x30
 800299c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800299e:	2303      	movs	r3, #3
 80029a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a2:	2300      	movs	r3, #0
 80029a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029a6:	f107 0314 	add.w	r3, r7, #20
 80029aa:	4619      	mov	r1, r3
 80029ac:	4805      	ldr	r0, [pc, #20]	@ (80029c4 <HAL_DAC_MspInit+0x84>)
 80029ae:	f002 fbed 	bl	800518c <HAL_GPIO_Init>

    /* USER CODE END DAC_MspInit 1 */

  }

}
 80029b2:	bf00      	nop
 80029b4:	3728      	adds	r7, #40	@ 0x28
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	40007400 	.word	0x40007400
 80029c0:	40023800 	.word	0x40023800
 80029c4:	40020000 	.word	0x40020000

080029c8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b08a      	sub	sp, #40	@ 0x28
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029d0:	f107 0314 	add.w	r3, r7, #20
 80029d4:	2200      	movs	r2, #0
 80029d6:	601a      	str	r2, [r3, #0]
 80029d8:	605a      	str	r2, [r3, #4]
 80029da:	609a      	str	r2, [r3, #8]
 80029dc:	60da      	str	r2, [r3, #12]
 80029de:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a19      	ldr	r2, [pc, #100]	@ (8002a4c <HAL_I2C_MspInit+0x84>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d12b      	bne.n	8002a42 <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029ea:	2300      	movs	r3, #0
 80029ec:	613b      	str	r3, [r7, #16]
 80029ee:	4b18      	ldr	r3, [pc, #96]	@ (8002a50 <HAL_I2C_MspInit+0x88>)
 80029f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029f2:	4a17      	ldr	r2, [pc, #92]	@ (8002a50 <HAL_I2C_MspInit+0x88>)
 80029f4:	f043 0302 	orr.w	r3, r3, #2
 80029f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80029fa:	4b15      	ldr	r3, [pc, #84]	@ (8002a50 <HAL_I2C_MspInit+0x88>)
 80029fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029fe:	f003 0302 	and.w	r3, r3, #2
 8002a02:	613b      	str	r3, [r7, #16]
 8002a04:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002a06:	23c0      	movs	r3, #192	@ 0xc0
 8002a08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a0a:	2312      	movs	r3, #18
 8002a0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a12:	2303      	movs	r3, #3
 8002a14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002a16:	2304      	movs	r3, #4
 8002a18:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a1a:	f107 0314 	add.w	r3, r7, #20
 8002a1e:	4619      	mov	r1, r3
 8002a20:	480c      	ldr	r0, [pc, #48]	@ (8002a54 <HAL_I2C_MspInit+0x8c>)
 8002a22:	f002 fbb3 	bl	800518c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002a26:	2300      	movs	r3, #0
 8002a28:	60fb      	str	r3, [r7, #12]
 8002a2a:	4b09      	ldr	r3, [pc, #36]	@ (8002a50 <HAL_I2C_MspInit+0x88>)
 8002a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a2e:	4a08      	ldr	r2, [pc, #32]	@ (8002a50 <HAL_I2C_MspInit+0x88>)
 8002a30:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002a34:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a36:	4b06      	ldr	r3, [pc, #24]	@ (8002a50 <HAL_I2C_MspInit+0x88>)
 8002a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a3a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a3e:	60fb      	str	r3, [r7, #12]
 8002a40:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002a42:	bf00      	nop
 8002a44:	3728      	adds	r7, #40	@ 0x28
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	40005400 	.word	0x40005400
 8002a50:	40023800 	.word	0x40023800
 8002a54:	40020400 	.word	0x40020400

08002a58 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b08a      	sub	sp, #40	@ 0x28
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a60:	f107 0314 	add.w	r3, r7, #20
 8002a64:	2200      	movs	r2, #0
 8002a66:	601a      	str	r2, [r3, #0]
 8002a68:	605a      	str	r2, [r3, #4]
 8002a6a:	609a      	str	r2, [r3, #8]
 8002a6c:	60da      	str	r2, [r3, #12]
 8002a6e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a19      	ldr	r2, [pc, #100]	@ (8002adc <HAL_SPI_MspInit+0x84>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d12c      	bne.n	8002ad4 <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI3_MspInit 0 */

    /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	613b      	str	r3, [r7, #16]
 8002a7e:	4b18      	ldr	r3, [pc, #96]	@ (8002ae0 <HAL_SPI_MspInit+0x88>)
 8002a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a82:	4a17      	ldr	r2, [pc, #92]	@ (8002ae0 <HAL_SPI_MspInit+0x88>)
 8002a84:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002a88:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a8a:	4b15      	ldr	r3, [pc, #84]	@ (8002ae0 <HAL_SPI_MspInit+0x88>)
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a8e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002a92:	613b      	str	r3, [r7, #16]
 8002a94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a96:	2300      	movs	r3, #0
 8002a98:	60fb      	str	r3, [r7, #12]
 8002a9a:	4b11      	ldr	r3, [pc, #68]	@ (8002ae0 <HAL_SPI_MspInit+0x88>)
 8002a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a9e:	4a10      	ldr	r2, [pc, #64]	@ (8002ae0 <HAL_SPI_MspInit+0x88>)
 8002aa0:	f043 0304 	orr.w	r3, r3, #4
 8002aa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002aa6:	4b0e      	ldr	r3, [pc, #56]	@ (8002ae0 <HAL_SPI_MspInit+0x88>)
 8002aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aaa:	f003 0304 	and.w	r3, r3, #4
 8002aae:	60fb      	str	r3, [r7, #12]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002ab2:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8002ab6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ab8:	2302      	movs	r3, #2
 8002aba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002abc:	2300      	movs	r3, #0
 8002abe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002ac4:	2306      	movs	r3, #6
 8002ac6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ac8:	f107 0314 	add.w	r3, r7, #20
 8002acc:	4619      	mov	r1, r3
 8002ace:	4805      	ldr	r0, [pc, #20]	@ (8002ae4 <HAL_SPI_MspInit+0x8c>)
 8002ad0:	f002 fb5c 	bl	800518c <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8002ad4:	bf00      	nop
 8002ad6:	3728      	adds	r7, #40	@ 0x28
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	40003c00 	.word	0x40003c00
 8002ae0:	40023800 	.word	0x40023800
 8002ae4:	40020800 	.word	0x40020800

08002ae8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b085      	sub	sp, #20
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002af8:	d10e      	bne.n	8002b18 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002afa:	2300      	movs	r3, #0
 8002afc:	60fb      	str	r3, [r7, #12]
 8002afe:	4b13      	ldr	r3, [pc, #76]	@ (8002b4c <HAL_TIM_Base_MspInit+0x64>)
 8002b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b02:	4a12      	ldr	r2, [pc, #72]	@ (8002b4c <HAL_TIM_Base_MspInit+0x64>)
 8002b04:	f043 0301 	orr.w	r3, r3, #1
 8002b08:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b0a:	4b10      	ldr	r3, [pc, #64]	@ (8002b4c <HAL_TIM_Base_MspInit+0x64>)
 8002b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b0e:	f003 0301 	and.w	r3, r3, #1
 8002b12:	60fb      	str	r3, [r7, #12]
 8002b14:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM13_MspInit 1 */

    /* USER CODE END TIM13_MspInit 1 */
  }

}
 8002b16:	e012      	b.n	8002b3e <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM13)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a0c      	ldr	r2, [pc, #48]	@ (8002b50 <HAL_TIM_Base_MspInit+0x68>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d10d      	bne.n	8002b3e <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002b22:	2300      	movs	r3, #0
 8002b24:	60bb      	str	r3, [r7, #8]
 8002b26:	4b09      	ldr	r3, [pc, #36]	@ (8002b4c <HAL_TIM_Base_MspInit+0x64>)
 8002b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b2a:	4a08      	ldr	r2, [pc, #32]	@ (8002b4c <HAL_TIM_Base_MspInit+0x64>)
 8002b2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b30:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b32:	4b06      	ldr	r3, [pc, #24]	@ (8002b4c <HAL_TIM_Base_MspInit+0x64>)
 8002b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b3a:	60bb      	str	r3, [r7, #8]
 8002b3c:	68bb      	ldr	r3, [r7, #8]
}
 8002b3e:	bf00      	nop
 8002b40:	3714      	adds	r7, #20
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr
 8002b4a:	bf00      	nop
 8002b4c:	40023800 	.word	0x40023800
 8002b50:	40001c00 	.word	0x40001c00

08002b54 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b088      	sub	sp, #32
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b5c:	f107 030c 	add.w	r3, r7, #12
 8002b60:	2200      	movs	r2, #0
 8002b62:	601a      	str	r2, [r3, #0]
 8002b64:	605a      	str	r2, [r3, #4]
 8002b66:	609a      	str	r2, [r3, #8]
 8002b68:	60da      	str	r2, [r3, #12]
 8002b6a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM13)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a12      	ldr	r2, [pc, #72]	@ (8002bbc <HAL_TIM_MspPostInit+0x68>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d11d      	bne.n	8002bb2 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM13_MspPostInit 0 */

    /* USER CODE END TIM13_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b76:	2300      	movs	r3, #0
 8002b78:	60bb      	str	r3, [r7, #8]
 8002b7a:	4b11      	ldr	r3, [pc, #68]	@ (8002bc0 <HAL_TIM_MspPostInit+0x6c>)
 8002b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b7e:	4a10      	ldr	r2, [pc, #64]	@ (8002bc0 <HAL_TIM_MspPostInit+0x6c>)
 8002b80:	f043 0301 	orr.w	r3, r3, #1
 8002b84:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b86:	4b0e      	ldr	r3, [pc, #56]	@ (8002bc0 <HAL_TIM_MspPostInit+0x6c>)
 8002b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b8a:	f003 0301 	and.w	r3, r3, #1
 8002b8e:	60bb      	str	r3, [r7, #8]
 8002b90:	68bb      	ldr	r3, [r7, #8]
    /**TIM13 GPIO Configuration
    PA6     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GATE_LASER_TIM13_CH1_Pin;
 8002b92:	2340      	movs	r3, #64	@ 0x40
 8002b94:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b96:	2302      	movs	r3, #2
 8002b98:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8002ba2:	2309      	movs	r3, #9
 8002ba4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GATE_LASER_TIM13_CH1_GPIO_Port, &GPIO_InitStruct);
 8002ba6:	f107 030c 	add.w	r3, r7, #12
 8002baa:	4619      	mov	r1, r3
 8002bac:	4805      	ldr	r0, [pc, #20]	@ (8002bc4 <HAL_TIM_MspPostInit+0x70>)
 8002bae:	f002 faed 	bl	800518c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM13_MspPostInit 1 */

    /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8002bb2:	bf00      	nop
 8002bb4:	3720      	adds	r7, #32
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	40001c00 	.word	0x40001c00
 8002bc0:	40023800 	.word	0x40023800
 8002bc4:	40020000 	.word	0x40020000

08002bc8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b08c      	sub	sp, #48	@ 0x30
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bd0:	f107 031c 	add.w	r3, r7, #28
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	601a      	str	r2, [r3, #0]
 8002bd8:	605a      	str	r2, [r3, #4]
 8002bda:	609a      	str	r2, [r3, #8]
 8002bdc:	60da      	str	r2, [r3, #12]
 8002bde:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a33      	ldr	r2, [pc, #204]	@ (8002cb4 <HAL_UART_MspInit+0xec>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d12d      	bne.n	8002c46 <HAL_UART_MspInit+0x7e>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002bea:	2300      	movs	r3, #0
 8002bec:	61bb      	str	r3, [r7, #24]
 8002bee:	4b32      	ldr	r3, [pc, #200]	@ (8002cb8 <HAL_UART_MspInit+0xf0>)
 8002bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bf2:	4a31      	ldr	r2, [pc, #196]	@ (8002cb8 <HAL_UART_MspInit+0xf0>)
 8002bf4:	f043 0310 	orr.w	r3, r3, #16
 8002bf8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002bfa:	4b2f      	ldr	r3, [pc, #188]	@ (8002cb8 <HAL_UART_MspInit+0xf0>)
 8002bfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bfe:	f003 0310 	and.w	r3, r3, #16
 8002c02:	61bb      	str	r3, [r7, #24]
 8002c04:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c06:	2300      	movs	r3, #0
 8002c08:	617b      	str	r3, [r7, #20]
 8002c0a:	4b2b      	ldr	r3, [pc, #172]	@ (8002cb8 <HAL_UART_MspInit+0xf0>)
 8002c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c0e:	4a2a      	ldr	r2, [pc, #168]	@ (8002cb8 <HAL_UART_MspInit+0xf0>)
 8002c10:	f043 0301 	orr.w	r3, r3, #1
 8002c14:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c16:	4b28      	ldr	r3, [pc, #160]	@ (8002cb8 <HAL_UART_MspInit+0xf0>)
 8002c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c1a:	f003 0301 	and.w	r3, r3, #1
 8002c1e:	617b      	str	r3, [r7, #20]
 8002c20:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002c22:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002c26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c28:	2302      	movs	r3, #2
 8002c2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c30:	2303      	movs	r3, #3
 8002c32:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c34:	2307      	movs	r3, #7
 8002c36:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c38:	f107 031c 	add.w	r3, r7, #28
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	481f      	ldr	r0, [pc, #124]	@ (8002cbc <HAL_UART_MspInit+0xf4>)
 8002c40:	f002 faa4 	bl	800518c <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8002c44:	e031      	b.n	8002caa <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART3)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a1d      	ldr	r2, [pc, #116]	@ (8002cc0 <HAL_UART_MspInit+0xf8>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d12c      	bne.n	8002caa <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002c50:	2300      	movs	r3, #0
 8002c52:	613b      	str	r3, [r7, #16]
 8002c54:	4b18      	ldr	r3, [pc, #96]	@ (8002cb8 <HAL_UART_MspInit+0xf0>)
 8002c56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c58:	4a17      	ldr	r2, [pc, #92]	@ (8002cb8 <HAL_UART_MspInit+0xf0>)
 8002c5a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c5e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c60:	4b15      	ldr	r3, [pc, #84]	@ (8002cb8 <HAL_UART_MspInit+0xf0>)
 8002c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c64:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c68:	613b      	str	r3, [r7, #16]
 8002c6a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	60fb      	str	r3, [r7, #12]
 8002c70:	4b11      	ldr	r3, [pc, #68]	@ (8002cb8 <HAL_UART_MspInit+0xf0>)
 8002c72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c74:	4a10      	ldr	r2, [pc, #64]	@ (8002cb8 <HAL_UART_MspInit+0xf0>)
 8002c76:	f043 0308 	orr.w	r3, r3, #8
 8002c7a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c7c:	4b0e      	ldr	r3, [pc, #56]	@ (8002cb8 <HAL_UART_MspInit+0xf0>)
 8002c7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c80:	f003 0308 	and.w	r3, r3, #8
 8002c84:	60fb      	str	r3, [r7, #12]
 8002c86:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002c88:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002c8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c8e:	2302      	movs	r3, #2
 8002c90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c92:	2300      	movs	r3, #0
 8002c94:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c96:	2303      	movs	r3, #3
 8002c98:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002c9a:	2307      	movs	r3, #7
 8002c9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c9e:	f107 031c 	add.w	r3, r7, #28
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	4807      	ldr	r0, [pc, #28]	@ (8002cc4 <HAL_UART_MspInit+0xfc>)
 8002ca6:	f002 fa71 	bl	800518c <HAL_GPIO_Init>
}
 8002caa:	bf00      	nop
 8002cac:	3730      	adds	r7, #48	@ 0x30
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	40011000 	.word	0x40011000
 8002cb8:	40023800 	.word	0x40023800
 8002cbc:	40020000 	.word	0x40020000
 8002cc0:	40004800 	.word	0x40004800
 8002cc4:	40020c00 	.word	0x40020c00

08002cc8 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b08a      	sub	sp, #40	@ 0x28
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cd0:	f107 0314 	add.w	r3, r7, #20
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	601a      	str	r2, [r3, #0]
 8002cd8:	605a      	str	r2, [r3, #4]
 8002cda:	609a      	str	r2, [r3, #8]
 8002cdc:	60da      	str	r2, [r3, #12]
 8002cde:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ce8:	d132      	bne.n	8002d50 <HAL_PCD_MspInit+0x88>
  {
    /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

    /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cea:	2300      	movs	r3, #0
 8002cec:	613b      	str	r3, [r7, #16]
 8002cee:	4b1a      	ldr	r3, [pc, #104]	@ (8002d58 <HAL_PCD_MspInit+0x90>)
 8002cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cf2:	4a19      	ldr	r2, [pc, #100]	@ (8002d58 <HAL_PCD_MspInit+0x90>)
 8002cf4:	f043 0301 	orr.w	r3, r3, #1
 8002cf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cfa:	4b17      	ldr	r3, [pc, #92]	@ (8002d58 <HAL_PCD_MspInit+0x90>)
 8002cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cfe:	f003 0301 	and.w	r3, r3, #1
 8002d02:	613b      	str	r3, [r7, #16]
 8002d04:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002d06:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002d0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d0c:	2302      	movs	r3, #2
 8002d0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d10:	2300      	movs	r3, #0
 8002d12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d14:	2303      	movs	r3, #3
 8002d16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002d18:	230a      	movs	r3, #10
 8002d1a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d1c:	f107 0314 	add.w	r3, r7, #20
 8002d20:	4619      	mov	r1, r3
 8002d22:	480e      	ldr	r0, [pc, #56]	@ (8002d5c <HAL_PCD_MspInit+0x94>)
 8002d24:	f002 fa32 	bl	800518c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002d28:	4b0b      	ldr	r3, [pc, #44]	@ (8002d58 <HAL_PCD_MspInit+0x90>)
 8002d2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d2c:	4a0a      	ldr	r2, [pc, #40]	@ (8002d58 <HAL_PCD_MspInit+0x90>)
 8002d2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d32:	6353      	str	r3, [r2, #52]	@ 0x34
 8002d34:	2300      	movs	r3, #0
 8002d36:	60fb      	str	r3, [r7, #12]
 8002d38:	4b07      	ldr	r3, [pc, #28]	@ (8002d58 <HAL_PCD_MspInit+0x90>)
 8002d3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d3c:	4a06      	ldr	r2, [pc, #24]	@ (8002d58 <HAL_PCD_MspInit+0x90>)
 8002d3e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d42:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d44:	4b04      	ldr	r3, [pc, #16]	@ (8002d58 <HAL_PCD_MspInit+0x90>)
 8002d46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d48:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d4c:	60fb      	str	r3, [r7, #12]
 8002d4e:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8002d50:	bf00      	nop
 8002d52:	3728      	adds	r7, #40	@ 0x28
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	40023800 	.word	0x40023800
 8002d5c:	40020000 	.word	0x40020000

08002d60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d60:	b480      	push	{r7}
 8002d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002d64:	bf00      	nop
 8002d66:	e7fd      	b.n	8002d64 <NMI_Handler+0x4>

08002d68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d6c:	bf00      	nop
 8002d6e:	e7fd      	b.n	8002d6c <HardFault_Handler+0x4>

08002d70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d70:	b480      	push	{r7}
 8002d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d74:	bf00      	nop
 8002d76:	e7fd      	b.n	8002d74 <MemManage_Handler+0x4>

08002d78 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d7c:	bf00      	nop
 8002d7e:	e7fd      	b.n	8002d7c <BusFault_Handler+0x4>

08002d80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d80:	b480      	push	{r7}
 8002d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d84:	bf00      	nop
 8002d86:	e7fd      	b.n	8002d84 <UsageFault_Handler+0x4>

08002d88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d8c:	bf00      	nop
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr

08002d96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d96:	b480      	push	{r7}
 8002d98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d9a:	bf00      	nop
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr

08002da4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002da4:	b480      	push	{r7}
 8002da6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002da8:	bf00      	nop
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr

08002db2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002db2:	b580      	push	{r7, lr}
 8002db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002db6:	f000 fa6b 	bl	8003290 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002dba:	bf00      	nop
 8002dbc:	bd80      	pop	{r7, pc}
	...

08002dc0 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8002dc4:	4802      	ldr	r0, [pc, #8]	@ (8002dd0 <ETH_IRQHandler+0x10>)
 8002dc6:	f001 faf3 	bl	80043b0 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8002dca:	bf00      	nop
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	200054d4 	.word	0x200054d4

08002dd4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	af00      	add	r7, sp, #0
  return 1;
 8002dd8:	2301      	movs	r3, #1
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr

08002de4 <_kill>:

int _kill(int pid, int sig)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002dee:	4b05      	ldr	r3, [pc, #20]	@ (8002e04 <_kill+0x20>)
 8002df0:	2216      	movs	r2, #22
 8002df2:	601a      	str	r2, [r3, #0]
  return -1;
 8002df4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	370c      	adds	r7, #12
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr
 8002e04:	20008bac 	.word	0x20008bac

08002e08 <_exit>:

void _exit (int status)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002e10:	f04f 31ff 	mov.w	r1, #4294967295
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f7ff ffe5 	bl	8002de4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002e1a:	bf00      	nop
 8002e1c:	e7fd      	b.n	8002e1a <_exit+0x12>

08002e1e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e1e:	b580      	push	{r7, lr}
 8002e20:	b086      	sub	sp, #24
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	60f8      	str	r0, [r7, #12]
 8002e26:	60b9      	str	r1, [r7, #8]
 8002e28:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	617b      	str	r3, [r7, #20]
 8002e2e:	e00a      	b.n	8002e46 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002e30:	f3af 8000 	nop.w
 8002e34:	4601      	mov	r1, r0
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	1c5a      	adds	r2, r3, #1
 8002e3a:	60ba      	str	r2, [r7, #8]
 8002e3c:	b2ca      	uxtb	r2, r1
 8002e3e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	3301      	adds	r3, #1
 8002e44:	617b      	str	r3, [r7, #20]
 8002e46:	697a      	ldr	r2, [r7, #20]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	dbf0      	blt.n	8002e30 <_read+0x12>
  }

  return len;
 8002e4e:	687b      	ldr	r3, [r7, #4]
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3718      	adds	r7, #24
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}

08002e58 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b086      	sub	sp, #24
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	60b9      	str	r1, [r7, #8]
 8002e62:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e64:	2300      	movs	r3, #0
 8002e66:	617b      	str	r3, [r7, #20]
 8002e68:	e009      	b.n	8002e7e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	1c5a      	adds	r2, r3, #1
 8002e6e:	60ba      	str	r2, [r7, #8]
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	4618      	mov	r0, r3
 8002e74:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	617b      	str	r3, [r7, #20]
 8002e7e:	697a      	ldr	r2, [r7, #20]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	429a      	cmp	r2, r3
 8002e84:	dbf1      	blt.n	8002e6a <_write+0x12>
  }
  return len;
 8002e86:	687b      	ldr	r3, [r7, #4]
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3718      	adds	r7, #24
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}

08002e90 <_close>:

int _close(int file)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002e98:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002eb8:	605a      	str	r2, [r3, #4]
  return 0;
 8002eba:	2300      	movs	r3, #0
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <_isatty>:

int _isatty(int file)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002ed0:	2301      	movs	r3, #1
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	370c      	adds	r7, #12
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr

08002ede <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ede:	b480      	push	{r7}
 8002ee0:	b085      	sub	sp, #20
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	60f8      	str	r0, [r7, #12]
 8002ee6:	60b9      	str	r1, [r7, #8]
 8002ee8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002eea:	2300      	movs	r3, #0
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3714      	adds	r7, #20
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr

08002ef8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b087      	sub	sp, #28
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f00:	4a14      	ldr	r2, [pc, #80]	@ (8002f54 <_sbrk+0x5c>)
 8002f02:	4b15      	ldr	r3, [pc, #84]	@ (8002f58 <_sbrk+0x60>)
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f0c:	4b13      	ldr	r3, [pc, #76]	@ (8002f5c <_sbrk+0x64>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d102      	bne.n	8002f1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f14:	4b11      	ldr	r3, [pc, #68]	@ (8002f5c <_sbrk+0x64>)
 8002f16:	4a12      	ldr	r2, [pc, #72]	@ (8002f60 <_sbrk+0x68>)
 8002f18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f1a:	4b10      	ldr	r3, [pc, #64]	@ (8002f5c <_sbrk+0x64>)
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4413      	add	r3, r2
 8002f22:	693a      	ldr	r2, [r7, #16]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d205      	bcs.n	8002f34 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8002f28:	4b0e      	ldr	r3, [pc, #56]	@ (8002f64 <_sbrk+0x6c>)
 8002f2a:	220c      	movs	r2, #12
 8002f2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f2e:	f04f 33ff 	mov.w	r3, #4294967295
 8002f32:	e009      	b.n	8002f48 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f34:	4b09      	ldr	r3, [pc, #36]	@ (8002f5c <_sbrk+0x64>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f3a:	4b08      	ldr	r3, [pc, #32]	@ (8002f5c <_sbrk+0x64>)
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4413      	add	r3, r2
 8002f42:	4a06      	ldr	r2, [pc, #24]	@ (8002f5c <_sbrk+0x64>)
 8002f44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f46:	68fb      	ldr	r3, [r7, #12]
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	371c      	adds	r7, #28
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr
 8002f54:	20020000 	.word	0x20020000
 8002f58:	00004000 	.word	0x00004000
 8002f5c:	200009b0 	.word	0x200009b0
 8002f60:	20008bb8 	.word	0x20008bb8
 8002f64:	20008bac 	.word	0x20008bac

08002f68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f6c:	4b06      	ldr	r3, [pc, #24]	@ (8002f88 <SystemInit+0x20>)
 8002f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f72:	4a05      	ldr	r2, [pc, #20]	@ (8002f88 <SystemInit+0x20>)
 8002f74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002f78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f7c:	bf00      	nop
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	e000ed00 	.word	0xe000ed00

08002f8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002f8c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002fc4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002f90:	f7ff ffea 	bl	8002f68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002f94:	480c      	ldr	r0, [pc, #48]	@ (8002fc8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002f96:	490d      	ldr	r1, [pc, #52]	@ (8002fcc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002f98:	4a0d      	ldr	r2, [pc, #52]	@ (8002fd0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002f9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f9c:	e002      	b.n	8002fa4 <LoopCopyDataInit>

08002f9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002fa0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002fa2:	3304      	adds	r3, #4

08002fa4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002fa4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002fa6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002fa8:	d3f9      	bcc.n	8002f9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002faa:	4a0a      	ldr	r2, [pc, #40]	@ (8002fd4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002fac:	4c0a      	ldr	r4, [pc, #40]	@ (8002fd8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002fae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002fb0:	e001      	b.n	8002fb6 <LoopFillZerobss>

08002fb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002fb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002fb4:	3204      	adds	r2, #4

08002fb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002fb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002fb8:	d3fb      	bcc.n	8002fb2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002fba:	f00f ff7b 	bl	8012eb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002fbe:	f7fe fee5 	bl	8001d8c <main>
  bx  lr    
 8002fc2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002fc4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002fc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002fcc:	200000d0 	.word	0x200000d0
  ldr r2, =_sidata
 8002fd0:	08016b40 	.word	0x08016b40
  ldr r2, =_sbss
 8002fd4:	200000d0 	.word	0x200000d0
  ldr r4, =_ebss
 8002fd8:	20008bb4 	.word	0x20008bb4

08002fdc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002fdc:	e7fe      	b.n	8002fdc <ADC_IRQHandler>

08002fde <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8002fde:	b480      	push	{r7}
 8002fe0:	b083      	sub	sp, #12
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	6078      	str	r0, [r7, #4]
 8002fe6:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d00b      	beq.n	8003006 <LAN8742_RegisterBusIO+0x28>
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d007      	beq.n	8003006 <LAN8742_RegisterBusIO+0x28>
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d003      	beq.n	8003006 <LAN8742_RegisterBusIO+0x28>
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	691b      	ldr	r3, [r3, #16]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d102      	bne.n	800300c <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8003006:	f04f 33ff 	mov.w	r3, #4294967295
 800300a:	e014      	b.n	8003036 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	685a      	ldr	r2, [r3, #4]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	68da      	ldr	r2, [r3, #12]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	689a      	ldr	r2, [r3, #8]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	691a      	ldr	r2, [r3, #16]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8003034:	2300      	movs	r3, #0
}
 8003036:	4618      	mov	r0, r3
 8003038:	370c      	adds	r7, #12
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr

08003042 <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8003042:	b580      	push	{r7, lr}
 8003044:	b086      	sub	sp, #24
 8003046:	af00      	add	r7, sp, #0
 8003048:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 800304a:	2300      	movs	r3, #0
 800304c:	60fb      	str	r3, [r7, #12]
 800304e:	2300      	movs	r3, #0
 8003050:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8003052:	2300      	movs	r3, #0
 8003054:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d139      	bne.n	80030d2 <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d002      	beq.n	800306c <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2220      	movs	r2, #32
 8003070:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8003072:	2300      	movs	r3, #0
 8003074:	617b      	str	r3, [r7, #20]
 8003076:	e01c      	b.n	80030b2 <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	695b      	ldr	r3, [r3, #20]
 800307c:	f107 020c 	add.w	r2, r7, #12
 8003080:	2112      	movs	r1, #18
 8003082:	6978      	ldr	r0, [r7, #20]
 8003084:	4798      	blx	r3
 8003086:	4603      	mov	r3, r0
 8003088:	2b00      	cmp	r3, #0
 800308a:	da03      	bge.n	8003094 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 800308c:	f06f 0304 	mvn.w	r3, #4
 8003090:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8003092:	e00b      	b.n	80030ac <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f003 031f 	and.w	r3, r3, #31
 800309a:	697a      	ldr	r2, [r7, #20]
 800309c:	429a      	cmp	r2, r3
 800309e:	d105      	bne.n	80030ac <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	697a      	ldr	r2, [r7, #20]
 80030a4:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80030a6:	2300      	movs	r3, #0
 80030a8:	613b      	str	r3, [r7, #16]
         break;
 80030aa:	e005      	b.n	80030b8 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	3301      	adds	r3, #1
 80030b0:	617b      	str	r3, [r7, #20]
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	2b1f      	cmp	r3, #31
 80030b6:	d9df      	bls.n	8003078 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	2b1f      	cmp	r3, #31
 80030be:	d902      	bls.n	80030c6 <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80030c0:	f06f 0302 	mvn.w	r3, #2
 80030c4:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d102      	bne.n	80030d2 <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2201      	movs	r2, #1
 80030d0:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 80030d2:	693b      	ldr	r3, [r7, #16]
 }
 80030d4:	4618      	mov	r0, r3
 80030d6:	3718      	adds	r7, #24
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}

080030dc <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b084      	sub	sp, #16
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80030e4:	2300      	movs	r3, #0
 80030e6:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	695b      	ldr	r3, [r3, #20]
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	6810      	ldr	r0, [r2, #0]
 80030f0:	f107 020c 	add.w	r2, r7, #12
 80030f4:	2101      	movs	r1, #1
 80030f6:	4798      	blx	r3
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	da02      	bge.n	8003104 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80030fe:	f06f 0304 	mvn.w	r3, #4
 8003102:	e06e      	b.n	80031e2 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	695b      	ldr	r3, [r3, #20]
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	6810      	ldr	r0, [r2, #0]
 800310c:	f107 020c 	add.w	r2, r7, #12
 8003110:	2101      	movs	r1, #1
 8003112:	4798      	blx	r3
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	da02      	bge.n	8003120 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 800311a:	f06f 0304 	mvn.w	r3, #4
 800311e:	e060      	b.n	80031e2 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f003 0304 	and.w	r3, r3, #4
 8003126:	2b00      	cmp	r3, #0
 8003128:	d101      	bne.n	800312e <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 800312a:	2301      	movs	r3, #1
 800312c:	e059      	b.n	80031e2 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	695b      	ldr	r3, [r3, #20]
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	6810      	ldr	r0, [r2, #0]
 8003136:	f107 020c 	add.w	r2, r7, #12
 800313a:	2100      	movs	r1, #0
 800313c:	4798      	blx	r3
 800313e:	4603      	mov	r3, r0
 8003140:	2b00      	cmp	r3, #0
 8003142:	da02      	bge.n	800314a <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8003144:	f06f 0304 	mvn.w	r3, #4
 8003148:	e04b      	b.n	80031e2 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003150:	2b00      	cmp	r3, #0
 8003152:	d11b      	bne.n	800318c <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d006      	beq.n	800316c <LAN8742_GetLinkState+0x90>
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003164:	2b00      	cmp	r3, #0
 8003166:	d001      	beq.n	800316c <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8003168:	2302      	movs	r3, #2
 800316a:	e03a      	b.n	80031e2 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d001      	beq.n	800317a <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8003176:	2303      	movs	r3, #3
 8003178:	e033      	b.n	80031e2 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003180:	2b00      	cmp	r3, #0
 8003182:	d001      	beq.n	8003188 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8003184:	2304      	movs	r3, #4
 8003186:	e02c      	b.n	80031e2 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8003188:	2305      	movs	r3, #5
 800318a:	e02a      	b.n	80031e2 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	695b      	ldr	r3, [r3, #20]
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	6810      	ldr	r0, [r2, #0]
 8003194:	f107 020c 	add.w	r2, r7, #12
 8003198:	211f      	movs	r1, #31
 800319a:	4798      	blx	r3
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	da02      	bge.n	80031a8 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80031a2:	f06f 0304 	mvn.w	r3, #4
 80031a6:	e01c      	b.n	80031e2 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d101      	bne.n	80031b6 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80031b2:	2306      	movs	r3, #6
 80031b4:	e015      	b.n	80031e2 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	f003 031c 	and.w	r3, r3, #28
 80031bc:	2b18      	cmp	r3, #24
 80031be:	d101      	bne.n	80031c4 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80031c0:	2302      	movs	r3, #2
 80031c2:	e00e      	b.n	80031e2 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f003 031c 	and.w	r3, r3, #28
 80031ca:	2b08      	cmp	r3, #8
 80031cc:	d101      	bne.n	80031d2 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e007      	b.n	80031e2 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	f003 031c 	and.w	r3, r3, #28
 80031d8:	2b14      	cmp	r3, #20
 80031da:	d101      	bne.n	80031e0 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80031dc:	2304      	movs	r3, #4
 80031de:	e000      	b.n	80031e2 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80031e0:	2305      	movs	r3, #5
    }
  }
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3710      	adds	r7, #16
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
	...

080031ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80031f0:	4b0e      	ldr	r3, [pc, #56]	@ (800322c <HAL_Init+0x40>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a0d      	ldr	r2, [pc, #52]	@ (800322c <HAL_Init+0x40>)
 80031f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80031fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80031fc:	4b0b      	ldr	r3, [pc, #44]	@ (800322c <HAL_Init+0x40>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a0a      	ldr	r2, [pc, #40]	@ (800322c <HAL_Init+0x40>)
 8003202:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003206:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003208:	4b08      	ldr	r3, [pc, #32]	@ (800322c <HAL_Init+0x40>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a07      	ldr	r2, [pc, #28]	@ (800322c <HAL_Init+0x40>)
 800320e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003212:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003214:	2003      	movs	r0, #3
 8003216:	f000 fcad 	bl	8003b74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800321a:	200f      	movs	r0, #15
 800321c:	f000 f808 	bl	8003230 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003220:	f7ff fada 	bl	80027d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003224:	2300      	movs	r3, #0
}
 8003226:	4618      	mov	r0, r3
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	40023c00 	.word	0x40023c00

08003230 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003238:	4b12      	ldr	r3, [pc, #72]	@ (8003284 <HAL_InitTick+0x54>)
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	4b12      	ldr	r3, [pc, #72]	@ (8003288 <HAL_InitTick+0x58>)
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	4619      	mov	r1, r3
 8003242:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003246:	fbb3 f3f1 	udiv	r3, r3, r1
 800324a:	fbb2 f3f3 	udiv	r3, r2, r3
 800324e:	4618      	mov	r0, r3
 8003250:	f000 fcc5 	bl	8003bde <HAL_SYSTICK_Config>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d001      	beq.n	800325e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e00e      	b.n	800327c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2b0f      	cmp	r3, #15
 8003262:	d80a      	bhi.n	800327a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003264:	2200      	movs	r2, #0
 8003266:	6879      	ldr	r1, [r7, #4]
 8003268:	f04f 30ff 	mov.w	r0, #4294967295
 800326c:	f000 fc8d 	bl	8003b8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003270:	4a06      	ldr	r2, [pc, #24]	@ (800328c <HAL_InitTick+0x5c>)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003276:	2300      	movs	r3, #0
 8003278:	e000      	b.n	800327c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
}
 800327c:	4618      	mov	r0, r3
 800327e:	3708      	adds	r7, #8
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}
 8003284:	20000048 	.word	0x20000048
 8003288:	20000050 	.word	0x20000050
 800328c:	2000004c 	.word	0x2000004c

08003290 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003290:	b480      	push	{r7}
 8003292:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003294:	4b06      	ldr	r3, [pc, #24]	@ (80032b0 <HAL_IncTick+0x20>)
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	461a      	mov	r2, r3
 800329a:	4b06      	ldr	r3, [pc, #24]	@ (80032b4 <HAL_IncTick+0x24>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4413      	add	r3, r2
 80032a0:	4a04      	ldr	r2, [pc, #16]	@ (80032b4 <HAL_IncTick+0x24>)
 80032a2:	6013      	str	r3, [r2, #0]
}
 80032a4:	bf00      	nop
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr
 80032ae:	bf00      	nop
 80032b0:	20000050 	.word	0x20000050
 80032b4:	200009b4 	.word	0x200009b4

080032b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032b8:	b480      	push	{r7}
 80032ba:	af00      	add	r7, sp, #0
  return uwTick;
 80032bc:	4b03      	ldr	r3, [pc, #12]	@ (80032cc <HAL_GetTick+0x14>)
 80032be:	681b      	ldr	r3, [r3, #0]
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop
 80032cc:	200009b4 	.word	0x200009b4

080032d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b084      	sub	sp, #16
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80032d8:	f7ff ffee 	bl	80032b8 <HAL_GetTick>
 80032dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032e8:	d005      	beq.n	80032f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80032ea:	4b0a      	ldr	r3, [pc, #40]	@ (8003314 <HAL_Delay+0x44>)
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	461a      	mov	r2, r3
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	4413      	add	r3, r2
 80032f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80032f6:	bf00      	nop
 80032f8:	f7ff ffde 	bl	80032b8 <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	68fa      	ldr	r2, [r7, #12]
 8003304:	429a      	cmp	r2, r3
 8003306:	d8f7      	bhi.n	80032f8 <HAL_Delay+0x28>
  {
  }
}
 8003308:	bf00      	nop
 800330a:	bf00      	nop
 800330c:	3710      	adds	r7, #16
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	20000050 	.word	0x20000050

08003318 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003320:	2300      	movs	r3, #0
 8003322:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d101      	bne.n	800332e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e033      	b.n	8003396 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003332:	2b00      	cmp	r3, #0
 8003334:	d109      	bne.n	800334a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f7ff fa76 	bl	8002828 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800334e:	f003 0310 	and.w	r3, r3, #16
 8003352:	2b00      	cmp	r3, #0
 8003354:	d118      	bne.n	8003388 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800335a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800335e:	f023 0302 	bic.w	r3, r3, #2
 8003362:	f043 0202 	orr.w	r2, r3, #2
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f000 f93a 	bl	80035e4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800337a:	f023 0303 	bic.w	r3, r3, #3
 800337e:	f043 0201 	orr.w	r2, r3, #1
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	641a      	str	r2, [r3, #64]	@ 0x40
 8003386:	e001      	b.n	800338c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2200      	movs	r2, #0
 8003390:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003394:	7bfb      	ldrb	r3, [r7, #15]
}
 8003396:	4618      	mov	r0, r3
 8003398:	3710      	adds	r7, #16
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
	...

080033a0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b085      	sub	sp, #20
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80033aa:	2300      	movs	r3, #0
 80033ac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d101      	bne.n	80033bc <HAL_ADC_ConfigChannel+0x1c>
 80033b8:	2302      	movs	r3, #2
 80033ba:	e105      	b.n	80035c8 <HAL_ADC_ConfigChannel+0x228>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2b09      	cmp	r3, #9
 80033ca:	d925      	bls.n	8003418 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	68d9      	ldr	r1, [r3, #12]
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	461a      	mov	r2, r3
 80033da:	4613      	mov	r3, r2
 80033dc:	005b      	lsls	r3, r3, #1
 80033de:	4413      	add	r3, r2
 80033e0:	3b1e      	subs	r3, #30
 80033e2:	2207      	movs	r2, #7
 80033e4:	fa02 f303 	lsl.w	r3, r2, r3
 80033e8:	43da      	mvns	r2, r3
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	400a      	ands	r2, r1
 80033f0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	68d9      	ldr	r1, [r3, #12]
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	689a      	ldr	r2, [r3, #8]
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	b29b      	uxth	r3, r3
 8003402:	4618      	mov	r0, r3
 8003404:	4603      	mov	r3, r0
 8003406:	005b      	lsls	r3, r3, #1
 8003408:	4403      	add	r3, r0
 800340a:	3b1e      	subs	r3, #30
 800340c:	409a      	lsls	r2, r3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	430a      	orrs	r2, r1
 8003414:	60da      	str	r2, [r3, #12]
 8003416:	e022      	b.n	800345e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	6919      	ldr	r1, [r3, #16]
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	b29b      	uxth	r3, r3
 8003424:	461a      	mov	r2, r3
 8003426:	4613      	mov	r3, r2
 8003428:	005b      	lsls	r3, r3, #1
 800342a:	4413      	add	r3, r2
 800342c:	2207      	movs	r2, #7
 800342e:	fa02 f303 	lsl.w	r3, r2, r3
 8003432:	43da      	mvns	r2, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	400a      	ands	r2, r1
 800343a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	6919      	ldr	r1, [r3, #16]
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	689a      	ldr	r2, [r3, #8]
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	b29b      	uxth	r3, r3
 800344c:	4618      	mov	r0, r3
 800344e:	4603      	mov	r3, r0
 8003450:	005b      	lsls	r3, r3, #1
 8003452:	4403      	add	r3, r0
 8003454:	409a      	lsls	r2, r3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	430a      	orrs	r2, r1
 800345c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	2b06      	cmp	r3, #6
 8003464:	d824      	bhi.n	80034b0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	685a      	ldr	r2, [r3, #4]
 8003470:	4613      	mov	r3, r2
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	4413      	add	r3, r2
 8003476:	3b05      	subs	r3, #5
 8003478:	221f      	movs	r2, #31
 800347a:	fa02 f303 	lsl.w	r3, r2, r3
 800347e:	43da      	mvns	r2, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	400a      	ands	r2, r1
 8003486:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	b29b      	uxth	r3, r3
 8003494:	4618      	mov	r0, r3
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	685a      	ldr	r2, [r3, #4]
 800349a:	4613      	mov	r3, r2
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	4413      	add	r3, r2
 80034a0:	3b05      	subs	r3, #5
 80034a2:	fa00 f203 	lsl.w	r2, r0, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	430a      	orrs	r2, r1
 80034ac:	635a      	str	r2, [r3, #52]	@ 0x34
 80034ae:	e04c      	b.n	800354a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	2b0c      	cmp	r3, #12
 80034b6:	d824      	bhi.n	8003502 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	685a      	ldr	r2, [r3, #4]
 80034c2:	4613      	mov	r3, r2
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	4413      	add	r3, r2
 80034c8:	3b23      	subs	r3, #35	@ 0x23
 80034ca:	221f      	movs	r2, #31
 80034cc:	fa02 f303 	lsl.w	r3, r2, r3
 80034d0:	43da      	mvns	r2, r3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	400a      	ands	r2, r1
 80034d8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	4618      	mov	r0, r3
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	685a      	ldr	r2, [r3, #4]
 80034ec:	4613      	mov	r3, r2
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	4413      	add	r3, r2
 80034f2:	3b23      	subs	r3, #35	@ 0x23
 80034f4:	fa00 f203 	lsl.w	r2, r0, r3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	430a      	orrs	r2, r1
 80034fe:	631a      	str	r2, [r3, #48]	@ 0x30
 8003500:	e023      	b.n	800354a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	685a      	ldr	r2, [r3, #4]
 800350c:	4613      	mov	r3, r2
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	4413      	add	r3, r2
 8003512:	3b41      	subs	r3, #65	@ 0x41
 8003514:	221f      	movs	r2, #31
 8003516:	fa02 f303 	lsl.w	r3, r2, r3
 800351a:	43da      	mvns	r2, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	400a      	ands	r2, r1
 8003522:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	b29b      	uxth	r3, r3
 8003530:	4618      	mov	r0, r3
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	685a      	ldr	r2, [r3, #4]
 8003536:	4613      	mov	r3, r2
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	4413      	add	r3, r2
 800353c:	3b41      	subs	r3, #65	@ 0x41
 800353e:	fa00 f203 	lsl.w	r2, r0, r3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	430a      	orrs	r2, r1
 8003548:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800354a:	4b22      	ldr	r3, [pc, #136]	@ (80035d4 <HAL_ADC_ConfigChannel+0x234>)
 800354c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a21      	ldr	r2, [pc, #132]	@ (80035d8 <HAL_ADC_ConfigChannel+0x238>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d109      	bne.n	800356c <HAL_ADC_ConfigChannel+0x1cc>
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	2b12      	cmp	r3, #18
 800355e:	d105      	bne.n	800356c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a19      	ldr	r2, [pc, #100]	@ (80035d8 <HAL_ADC_ConfigChannel+0x238>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d123      	bne.n	80035be <HAL_ADC_ConfigChannel+0x21e>
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	2b10      	cmp	r3, #16
 800357c:	d003      	beq.n	8003586 <HAL_ADC_ConfigChannel+0x1e6>
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	2b11      	cmp	r3, #17
 8003584:	d11b      	bne.n	80035be <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	2b10      	cmp	r3, #16
 8003598:	d111      	bne.n	80035be <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800359a:	4b10      	ldr	r3, [pc, #64]	@ (80035dc <HAL_ADC_ConfigChannel+0x23c>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a10      	ldr	r2, [pc, #64]	@ (80035e0 <HAL_ADC_ConfigChannel+0x240>)
 80035a0:	fba2 2303 	umull	r2, r3, r2, r3
 80035a4:	0c9a      	lsrs	r2, r3, #18
 80035a6:	4613      	mov	r3, r2
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	4413      	add	r3, r2
 80035ac:	005b      	lsls	r3, r3, #1
 80035ae:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80035b0:	e002      	b.n	80035b8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	3b01      	subs	r3, #1
 80035b6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d1f9      	bne.n	80035b2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80035c6:	2300      	movs	r3, #0
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3714      	adds	r7, #20
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr
 80035d4:	40012300 	.word	0x40012300
 80035d8:	40012000 	.word	0x40012000
 80035dc:	20000048 	.word	0x20000048
 80035e0:	431bde83 	.word	0x431bde83

080035e4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b085      	sub	sp, #20
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80035ec:	4b79      	ldr	r3, [pc, #484]	@ (80037d4 <ADC_Init+0x1f0>)
 80035ee:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	685a      	ldr	r2, [r3, #4]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	431a      	orrs	r2, r3
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	685a      	ldr	r2, [r3, #4]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003618:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	6859      	ldr	r1, [r3, #4]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	691b      	ldr	r3, [r3, #16]
 8003624:	021a      	lsls	r2, r3, #8
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	430a      	orrs	r2, r1
 800362c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	685a      	ldr	r2, [r3, #4]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800363c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	6859      	ldr	r1, [r3, #4]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	689a      	ldr	r2, [r3, #8]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	430a      	orrs	r2, r1
 800364e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	689a      	ldr	r2, [r3, #8]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800365e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	6899      	ldr	r1, [r3, #8]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	68da      	ldr	r2, [r3, #12]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	430a      	orrs	r2, r1
 8003670:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003676:	4a58      	ldr	r2, [pc, #352]	@ (80037d8 <ADC_Init+0x1f4>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d022      	beq.n	80036c2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	689a      	ldr	r2, [r3, #8]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800368a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	6899      	ldr	r1, [r3, #8]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	430a      	orrs	r2, r1
 800369c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	689a      	ldr	r2, [r3, #8]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80036ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	6899      	ldr	r1, [r3, #8]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	430a      	orrs	r2, r1
 80036be:	609a      	str	r2, [r3, #8]
 80036c0:	e00f      	b.n	80036e2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	689a      	ldr	r2, [r3, #8]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80036d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	689a      	ldr	r2, [r3, #8]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80036e0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	689a      	ldr	r2, [r3, #8]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f022 0202 	bic.w	r2, r2, #2
 80036f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	6899      	ldr	r1, [r3, #8]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	7e1b      	ldrb	r3, [r3, #24]
 80036fc:	005a      	lsls	r2, r3, #1
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	430a      	orrs	r2, r1
 8003704:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f893 3020 	ldrb.w	r3, [r3, #32]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d01b      	beq.n	8003748 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	685a      	ldr	r2, [r3, #4]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800371e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	685a      	ldr	r2, [r3, #4]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800372e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	6859      	ldr	r1, [r3, #4]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800373a:	3b01      	subs	r3, #1
 800373c:	035a      	lsls	r2, r3, #13
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	430a      	orrs	r2, r1
 8003744:	605a      	str	r2, [r3, #4]
 8003746:	e007      	b.n	8003758 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	685a      	ldr	r2, [r3, #4]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003756:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003766:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	69db      	ldr	r3, [r3, #28]
 8003772:	3b01      	subs	r3, #1
 8003774:	051a      	lsls	r2, r3, #20
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	430a      	orrs	r2, r1
 800377c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	689a      	ldr	r2, [r3, #8]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800378c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	6899      	ldr	r1, [r3, #8]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800379a:	025a      	lsls	r2, r3, #9
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	430a      	orrs	r2, r1
 80037a2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	689a      	ldr	r2, [r3, #8]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	6899      	ldr	r1, [r3, #8]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	695b      	ldr	r3, [r3, #20]
 80037be:	029a      	lsls	r2, r3, #10
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	430a      	orrs	r2, r1
 80037c6:	609a      	str	r2, [r3, #8]
}
 80037c8:	bf00      	nop
 80037ca:	3714      	adds	r7, #20
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr
 80037d4:	40012300 	.word	0x40012300
 80037d8:	0f000001 	.word	0x0f000001

080037dc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d101      	bne.n	80037ee <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e0ed      	b.n	80039ca <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d102      	bne.n	8003800 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f7ff f858 	bl	80028b0 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f042 0201 	orr.w	r2, r2, #1
 800380e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003810:	f7ff fd52 	bl	80032b8 <HAL_GetTick>
 8003814:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003816:	e012      	b.n	800383e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003818:	f7ff fd4e 	bl	80032b8 <HAL_GetTick>
 800381c:	4602      	mov	r2, r0
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	2b0a      	cmp	r3, #10
 8003824:	d90b      	bls.n	800383e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800382a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2205      	movs	r2, #5
 8003836:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e0c5      	b.n	80039ca <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f003 0301 	and.w	r3, r3, #1
 8003848:	2b00      	cmp	r3, #0
 800384a:	d0e5      	beq.n	8003818 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f022 0202 	bic.w	r2, r2, #2
 800385a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800385c:	f7ff fd2c 	bl	80032b8 <HAL_GetTick>
 8003860:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003862:	e012      	b.n	800388a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003864:	f7ff fd28 	bl	80032b8 <HAL_GetTick>
 8003868:	4602      	mov	r2, r0
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	2b0a      	cmp	r3, #10
 8003870:	d90b      	bls.n	800388a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003876:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2205      	movs	r2, #5
 8003882:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e09f      	b.n	80039ca <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	f003 0302 	and.w	r3, r3, #2
 8003894:	2b00      	cmp	r3, #0
 8003896:	d1e5      	bne.n	8003864 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	7e1b      	ldrb	r3, [r3, #24]
 800389c:	2b01      	cmp	r3, #1
 800389e:	d108      	bne.n	80038b2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80038ae:	601a      	str	r2, [r3, #0]
 80038b0:	e007      	b.n	80038c2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80038c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	7e5b      	ldrb	r3, [r3, #25]
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d108      	bne.n	80038dc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80038d8:	601a      	str	r2, [r3, #0]
 80038da:	e007      	b.n	80038ec <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80038ea:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	7e9b      	ldrb	r3, [r3, #26]
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d108      	bne.n	8003906 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f042 0220 	orr.w	r2, r2, #32
 8003902:	601a      	str	r2, [r3, #0]
 8003904:	e007      	b.n	8003916 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f022 0220 	bic.w	r2, r2, #32
 8003914:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	7edb      	ldrb	r3, [r3, #27]
 800391a:	2b01      	cmp	r3, #1
 800391c:	d108      	bne.n	8003930 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f022 0210 	bic.w	r2, r2, #16
 800392c:	601a      	str	r2, [r3, #0]
 800392e:	e007      	b.n	8003940 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f042 0210 	orr.w	r2, r2, #16
 800393e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	7f1b      	ldrb	r3, [r3, #28]
 8003944:	2b01      	cmp	r3, #1
 8003946:	d108      	bne.n	800395a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f042 0208 	orr.w	r2, r2, #8
 8003956:	601a      	str	r2, [r3, #0]
 8003958:	e007      	b.n	800396a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f022 0208 	bic.w	r2, r2, #8
 8003968:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	7f5b      	ldrb	r3, [r3, #29]
 800396e:	2b01      	cmp	r3, #1
 8003970:	d108      	bne.n	8003984 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f042 0204 	orr.w	r2, r2, #4
 8003980:	601a      	str	r2, [r3, #0]
 8003982:	e007      	b.n	8003994 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f022 0204 	bic.w	r2, r2, #4
 8003992:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	689a      	ldr	r2, [r3, #8]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	431a      	orrs	r2, r3
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	691b      	ldr	r3, [r3, #16]
 80039a2:	431a      	orrs	r2, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	695b      	ldr	r3, [r3, #20]
 80039a8:	ea42 0103 	orr.w	r1, r2, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	1e5a      	subs	r2, r3, #1
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	430a      	orrs	r2, r1
 80039b8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80039c8:	2300      	movs	r3, #0
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3710      	adds	r7, #16
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
	...

080039d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b085      	sub	sp, #20
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f003 0307 	and.w	r3, r3, #7
 80039e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039e4:	4b0c      	ldr	r3, [pc, #48]	@ (8003a18 <__NVIC_SetPriorityGrouping+0x44>)
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039ea:	68ba      	ldr	r2, [r7, #8]
 80039ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80039f0:	4013      	ands	r3, r2
 80039f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003a00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a06:	4a04      	ldr	r2, [pc, #16]	@ (8003a18 <__NVIC_SetPriorityGrouping+0x44>)
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	60d3      	str	r3, [r2, #12]
}
 8003a0c:	bf00      	nop
 8003a0e:	3714      	adds	r7, #20
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr
 8003a18:	e000ed00 	.word	0xe000ed00

08003a1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a20:	4b04      	ldr	r3, [pc, #16]	@ (8003a34 <__NVIC_GetPriorityGrouping+0x18>)
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	0a1b      	lsrs	r3, r3, #8
 8003a26:	f003 0307 	and.w	r3, r3, #7
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr
 8003a34:	e000ed00 	.word	0xe000ed00

08003a38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b083      	sub	sp, #12
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	4603      	mov	r3, r0
 8003a40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	db0b      	blt.n	8003a62 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a4a:	79fb      	ldrb	r3, [r7, #7]
 8003a4c:	f003 021f 	and.w	r2, r3, #31
 8003a50:	4907      	ldr	r1, [pc, #28]	@ (8003a70 <__NVIC_EnableIRQ+0x38>)
 8003a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a56:	095b      	lsrs	r3, r3, #5
 8003a58:	2001      	movs	r0, #1
 8003a5a:	fa00 f202 	lsl.w	r2, r0, r2
 8003a5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003a62:	bf00      	nop
 8003a64:	370c      	adds	r7, #12
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr
 8003a6e:	bf00      	nop
 8003a70:	e000e100 	.word	0xe000e100

08003a74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	6039      	str	r1, [r7, #0]
 8003a7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	db0a      	blt.n	8003a9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	b2da      	uxtb	r2, r3
 8003a8c:	490c      	ldr	r1, [pc, #48]	@ (8003ac0 <__NVIC_SetPriority+0x4c>)
 8003a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a92:	0112      	lsls	r2, r2, #4
 8003a94:	b2d2      	uxtb	r2, r2
 8003a96:	440b      	add	r3, r1
 8003a98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a9c:	e00a      	b.n	8003ab4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	b2da      	uxtb	r2, r3
 8003aa2:	4908      	ldr	r1, [pc, #32]	@ (8003ac4 <__NVIC_SetPriority+0x50>)
 8003aa4:	79fb      	ldrb	r3, [r7, #7]
 8003aa6:	f003 030f 	and.w	r3, r3, #15
 8003aaa:	3b04      	subs	r3, #4
 8003aac:	0112      	lsls	r2, r2, #4
 8003aae:	b2d2      	uxtb	r2, r2
 8003ab0:	440b      	add	r3, r1
 8003ab2:	761a      	strb	r2, [r3, #24]
}
 8003ab4:	bf00      	nop
 8003ab6:	370c      	adds	r7, #12
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr
 8003ac0:	e000e100 	.word	0xe000e100
 8003ac4:	e000ed00 	.word	0xe000ed00

08003ac8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b089      	sub	sp, #36	@ 0x24
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	60f8      	str	r0, [r7, #12]
 8003ad0:	60b9      	str	r1, [r7, #8]
 8003ad2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f003 0307 	and.w	r3, r3, #7
 8003ada:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003adc:	69fb      	ldr	r3, [r7, #28]
 8003ade:	f1c3 0307 	rsb	r3, r3, #7
 8003ae2:	2b04      	cmp	r3, #4
 8003ae4:	bf28      	it	cs
 8003ae6:	2304      	movcs	r3, #4
 8003ae8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	3304      	adds	r3, #4
 8003aee:	2b06      	cmp	r3, #6
 8003af0:	d902      	bls.n	8003af8 <NVIC_EncodePriority+0x30>
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	3b03      	subs	r3, #3
 8003af6:	e000      	b.n	8003afa <NVIC_EncodePriority+0x32>
 8003af8:	2300      	movs	r3, #0
 8003afa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003afc:	f04f 32ff 	mov.w	r2, #4294967295
 8003b00:	69bb      	ldr	r3, [r7, #24]
 8003b02:	fa02 f303 	lsl.w	r3, r2, r3
 8003b06:	43da      	mvns	r2, r3
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	401a      	ands	r2, r3
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b10:	f04f 31ff 	mov.w	r1, #4294967295
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	fa01 f303 	lsl.w	r3, r1, r3
 8003b1a:	43d9      	mvns	r1, r3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b20:	4313      	orrs	r3, r2
         );
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3724      	adds	r7, #36	@ 0x24
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr
	...

08003b30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b082      	sub	sp, #8
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	3b01      	subs	r3, #1
 8003b3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003b40:	d301      	bcc.n	8003b46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b42:	2301      	movs	r3, #1
 8003b44:	e00f      	b.n	8003b66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b46:	4a0a      	ldr	r2, [pc, #40]	@ (8003b70 <SysTick_Config+0x40>)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	3b01      	subs	r3, #1
 8003b4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b4e:	210f      	movs	r1, #15
 8003b50:	f04f 30ff 	mov.w	r0, #4294967295
 8003b54:	f7ff ff8e 	bl	8003a74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b58:	4b05      	ldr	r3, [pc, #20]	@ (8003b70 <SysTick_Config+0x40>)
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b5e:	4b04      	ldr	r3, [pc, #16]	@ (8003b70 <SysTick_Config+0x40>)
 8003b60:	2207      	movs	r2, #7
 8003b62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b64:	2300      	movs	r3, #0
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3708      	adds	r7, #8
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	e000e010 	.word	0xe000e010

08003b74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f7ff ff29 	bl	80039d4 <__NVIC_SetPriorityGrouping>
}
 8003b82:	bf00      	nop
 8003b84:	3708      	adds	r7, #8
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}

08003b8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b8a:	b580      	push	{r7, lr}
 8003b8c:	b086      	sub	sp, #24
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	4603      	mov	r3, r0
 8003b92:	60b9      	str	r1, [r7, #8]
 8003b94:	607a      	str	r2, [r7, #4]
 8003b96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b9c:	f7ff ff3e 	bl	8003a1c <__NVIC_GetPriorityGrouping>
 8003ba0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	68b9      	ldr	r1, [r7, #8]
 8003ba6:	6978      	ldr	r0, [r7, #20]
 8003ba8:	f7ff ff8e 	bl	8003ac8 <NVIC_EncodePriority>
 8003bac:	4602      	mov	r2, r0
 8003bae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bb2:	4611      	mov	r1, r2
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f7ff ff5d 	bl	8003a74 <__NVIC_SetPriority>
}
 8003bba:	bf00      	nop
 8003bbc:	3718      	adds	r7, #24
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}

08003bc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bc2:	b580      	push	{r7, lr}
 8003bc4:	b082      	sub	sp, #8
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	4603      	mov	r3, r0
 8003bca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003bcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f7ff ff31 	bl	8003a38 <__NVIC_EnableIRQ>
}
 8003bd6:	bf00      	nop
 8003bd8:	3708      	adds	r7, #8
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}

08003bde <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003bde:	b580      	push	{r7, lr}
 8003be0:	b082      	sub	sp, #8
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f7ff ffa2 	bl	8003b30 <SysTick_Config>
 8003bec:	4603      	mov	r3, r0
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3708      	adds	r7, #8
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}

08003bf6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003bf6:	b580      	push	{r7, lr}
 8003bf8:	b082      	sub	sp, #8
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d101      	bne.n	8003c08 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e014      	b.n	8003c32 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	791b      	ldrb	r3, [r3, #4]
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d105      	bne.n	8003c1e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f7fe fe91 	bl	8002940 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2202      	movs	r2, #2
 8003c22:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003c30:	2300      	movs	r3, #0
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3708      	adds	r7, #8
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}

08003c3a <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003c3a:	b480      	push	{r7}
 8003c3c:	b089      	sub	sp, #36	@ 0x24
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	60f8      	str	r0, [r7, #12]
 8003c42:	60b9      	str	r1, [r7, #8]
 8003c44:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c46:	2300      	movs	r3, #0
 8003c48:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d002      	beq.n	8003c56 <HAL_DAC_ConfigChannel+0x1c>
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d101      	bne.n	8003c5a <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e042      	b.n	8003ce0 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	795b      	ldrb	r3, [r3, #5]
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d101      	bne.n	8003c66 <HAL_DAC_ConfigChannel+0x2c>
 8003c62:	2302      	movs	r3, #2
 8003c64:	e03c      	b.n	8003ce0 <HAL_DAC_ConfigChannel+0xa6>
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2201      	movs	r2, #1
 8003c6a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2202      	movs	r2, #2
 8003c70:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f003 0310 	and.w	r3, r3, #16
 8003c80:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8003c84:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8003c88:	43db      	mvns	r3, r3
 8003c8a:	69ba      	ldr	r2, [r7, #24]
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f003 0310 	and.w	r3, r3, #16
 8003ca2:	697a      	ldr	r2, [r7, #20]
 8003ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca8:	69ba      	ldr	r2, [r7, #24]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	69ba      	ldr	r2, [r7, #24]
 8003cb4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	6819      	ldr	r1, [r3, #0]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f003 0310 	and.w	r3, r3, #16
 8003cc2:	22c0      	movs	r2, #192	@ 0xc0
 8003cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc8:	43da      	mvns	r2, r3
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	400a      	ands	r2, r1
 8003cd0:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8003cde:	7ffb      	ldrb	r3, [r7, #31]
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3724      	adds	r7, #36	@ 0x24
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr

08003cec <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d101      	bne.n	8003cfe <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e08a      	b.n	8003e14 <HAL_ETH_Init+0x128>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d106      	bne.n	8003d16 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2223      	movs	r2, #35	@ 0x23
 8003d0c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f004 fa71 	bl	80081f8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d16:	2300      	movs	r3, #0
 8003d18:	60bb      	str	r3, [r7, #8]
 8003d1a:	4b40      	ldr	r3, [pc, #256]	@ (8003e1c <HAL_ETH_Init+0x130>)
 8003d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d1e:	4a3f      	ldr	r2, [pc, #252]	@ (8003e1c <HAL_ETH_Init+0x130>)
 8003d20:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003d24:	6453      	str	r3, [r2, #68]	@ 0x44
 8003d26:	4b3d      	ldr	r3, [pc, #244]	@ (8003e1c <HAL_ETH_Init+0x130>)
 8003d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d2e:	60bb      	str	r3, [r7, #8]
 8003d30:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003d32:	4b3b      	ldr	r3, [pc, #236]	@ (8003e20 <HAL_ETH_Init+0x134>)
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	4a3a      	ldr	r2, [pc, #232]	@ (8003e20 <HAL_ETH_Init+0x134>)
 8003d38:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003d3c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003d3e:	4b38      	ldr	r3, [pc, #224]	@ (8003e20 <HAL_ETH_Init+0x134>)
 8003d40:	685a      	ldr	r2, [r3, #4]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	4936      	ldr	r1, [pc, #216]	@ (8003e20 <HAL_ETH_Init+0x134>)
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003d4c:	4b34      	ldr	r3, [pc, #208]	@ (8003e20 <HAL_ETH_Init+0x134>)
 8003d4e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	6812      	ldr	r2, [r2, #0]
 8003d5e:	f043 0301 	orr.w	r3, r3, #1
 8003d62:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003d66:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d68:	f7ff faa6 	bl	80032b8 <HAL_GetTick>
 8003d6c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003d6e:	e011      	b.n	8003d94 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003d70:	f7ff faa2 	bl	80032b8 <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8003d7e:	d909      	bls.n	8003d94 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2204      	movs	r2, #4
 8003d84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	22e0      	movs	r2, #224	@ 0xe0
 8003d8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e03f      	b.n	8003e14 <HAL_ETH_Init+0x128>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 0301 	and.w	r3, r3, #1
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d1e4      	bne.n	8003d70 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f000 ff32 	bl	8004c10 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f000 ffdd 	bl	8004d6c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f001 f833 	bl	8004e1e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	2100      	movs	r1, #0
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f000 ff9b 	bl	8004cfc <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8003dd4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	6812      	ldr	r2, [r2, #0]
 8003de2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003de6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003dea:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8003dfe:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2200      	movs	r2, #0
 8003e06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2210      	movs	r2, #16
 8003e0e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003e12:	2300      	movs	r3, #0
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3710      	adds	r7, #16
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}
 8003e1c:	40023800 	.word	0x40023800
 8003e20:	40013800 	.word	0x40013800

08003e24 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b084      	sub	sp, #16
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e32:	2b10      	cmp	r3, #16
 8003e34:	d161      	bne.n	8003efa <HAL_ETH_Start_IT+0xd6>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2223      	movs	r2, #35	@ 0x23
 8003e3a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2201      	movs	r2, #1
 8003e42:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2204      	movs	r2, #4
 8003e48:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f000 fa2c 	bl	80042a8 <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003e58:	2001      	movs	r0, #1
 8003e5a:	f7ff fa39 	bl	80032d0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	68fa      	ldr	r2, [r7, #12]
 8003e64:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e6e:	699b      	ldr	r3, [r3, #24]
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	6812      	ldr	r2, [r2, #0]
 8003e74:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003e78:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003e7c:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e86:	699b      	ldr	r3, [r3, #24]
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	6812      	ldr	r2, [r2, #0]
 8003e8c:	f043 0302 	orr.w	r3, r3, #2
 8003e90:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003e94:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f000 fd56 	bl	8004948 <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f042 0208 	orr.w	r2, r2, #8
 8003eaa:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003eb4:	2001      	movs	r0, #1
 8003eb6:	f7ff fa0b 	bl	80032d0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	68fa      	ldr	r2, [r7, #12]
 8003ec0:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f042 0204 	orr.w	r2, r2, #4
 8003ed0:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003eda:	69db      	ldr	r3, [r3, #28]
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	6812      	ldr	r2, [r2, #0]
 8003ee0:	f443 33d0 	orr.w	r3, r3, #106496	@ 0x1a000
 8003ee4:	f043 03c1 	orr.w	r3, r3, #193	@ 0xc1
 8003ee8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003eec:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2223      	movs	r2, #35	@ 0x23
 8003ef2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	e000      	b.n	8003efc <HAL_ETH_Start_IT+0xd8>
  }
  else
  {
    return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
  }
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3710      	adds	r7, #16
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b086      	sub	sp, #24
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f12:	2b23      	cmp	r3, #35	@ 0x23
 8003f14:	d170      	bne.n	8003ff8 <HAL_ETH_Stop_IT+0xf4>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2223      	movs	r2, #35	@ 0x23
 8003f1a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f26:	69db      	ldr	r3, [r3, #28]
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	6812      	ldr	r2, [r2, #0]
 8003f2c:	f423 33d0 	bic.w	r3, r3, #106496	@ 0x1a000
 8003f30:	f023 03c1 	bic.w	r3, r3, #193	@ 0xc1
 8003f34:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003f38:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f42:	699b      	ldr	r3, [r3, #24]
 8003f44:	687a      	ldr	r2, [r7, #4]
 8003f46:	6812      	ldr	r2, [r2, #0]
 8003f48:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003f4c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003f50:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f5a:	699b      	ldr	r3, [r3, #24]
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	6812      	ldr	r2, [r2, #0]
 8003f60:	f023 0302 	bic.w	r3, r3, #2
 8003f64:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003f68:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f022 0204 	bic.w	r2, r2, #4
 8003f78:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003f82:	2001      	movs	r0, #1
 8003f84:	f7ff f9a4 	bl	80032d0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	693a      	ldr	r2, [r7, #16]
 8003f8e:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f000 fcd9 	bl	8004948 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f022 0208 	bic.w	r2, r2, #8
 8003fa4:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003fae:	2001      	movs	r0, #1
 8003fb0:	f7ff f98e 	bl	80032d0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	693a      	ldr	r2, [r7, #16]
 8003fba:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	617b      	str	r3, [r7, #20]
 8003fc0:	e00e      	b.n	8003fe0 <HAL_ETH_Stop_IT+0xdc>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	697a      	ldr	r2, [r7, #20]
 8003fc6:	3212      	adds	r2, #18
 8003fc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fcc:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	3301      	adds	r3, #1
 8003fde:	617b      	str	r3, [r7, #20]
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	2b03      	cmp	r3, #3
 8003fe4:	d9ed      	bls.n	8003fc2 <HAL_ETH_Stop_IT+0xbe>
    }

    heth->RxDescList.ItMode = 0U;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2210      	movs	r2, #16
 8003ff0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	e000      	b.n	8003ffa <HAL_ETH_Stop_IT+0xf6>
  }
  else
  {
    return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
  }
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3718      	adds	r7, #24
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}

08004002 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig, uint32_t Timeout)
{
 8004002:	b580      	push	{r7, lr}
 8004004:	b086      	sub	sp, #24
 8004006:	af00      	add	r7, sp, #0
 8004008:	60f8      	str	r0, [r7, #12]
 800400a:	60b9      	str	r1, [r7, #8]
 800400c:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d109      	bne.n	8004028 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800401a:	f043 0201 	orr.w	r2, r3, #1
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	e07c      	b.n	8004122 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800402e:	2b23      	cmp	r3, #35	@ 0x23
 8004030:	d176      	bne.n	8004120 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8004032:	2200      	movs	r2, #0
 8004034:	68b9      	ldr	r1, [r7, #8]
 8004036:	68f8      	ldr	r0, [r7, #12]
 8004038:	f000 ff60 	bl	8004efc <ETH_Prepare_Tx_Descriptors>
 800403c:	4603      	mov	r3, r0
 800403e:	2b00      	cmp	r3, #0
 8004040:	d009      	beq.n	8004056 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004048:	f043 0202 	orr.w	r2, r3, #2
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e065      	b.n	8004122 <HAL_ETH_Transmit+0x120>
  __ASM volatile ("dsb 0xF":::"memory");
 8004056:	f3bf 8f4f 	dsb	sy
}
 800405a:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	3206      	adds	r2, #6
 8004064:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004068:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800406e:	1c5a      	adds	r2, r3, #1
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	629a      	str	r2, [r3, #40]	@ 0x28
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004078:	2b03      	cmp	r3, #3
 800407a:	d904      	bls.n	8004086 <HAL_ETH_Transmit+0x84>
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004080:	1f1a      	subs	r2, r3, #4
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	3106      	adds	r1, #6
 8004092:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004096:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800409a:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 800409c:	f7ff f90c 	bl	80032b8 <HAL_GetTick>
 80040a0:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80040a2:	e037      	b.n	8004114 <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80040ac:	695b      	ldr	r3, [r3, #20]
 80040ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d011      	beq.n	80040da <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040bc:	f043 0208 	orr.w	r2, r3, #8
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80040ce:	695a      	ldr	r2, [r3, #20]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        /* Return function status */
        return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e023      	b.n	8004122 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040e0:	d018      	beq.n	8004114 <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80040e2:	f7ff f8e9 	bl	80032b8 <HAL_GetTick>
 80040e6:	4602      	mov	r2, r0
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	1ad3      	subs	r3, r2, r3
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d302      	bcc.n	80040f8 <HAL_ETH_Transmit+0xf6>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d10d      	bne.n	8004114 <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040fe:	f043 0204 	orr.w	r2, r3, #4
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 800410e:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e006      	b.n	8004122 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	2b00      	cmp	r3, #0
 800411a:	dbc3      	blt.n	80040a4 <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 800411c:	2300      	movs	r3, #0
 800411e:	e000      	b.n	8004122 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 8004120:	2301      	movs	r3, #1
  }
}
 8004122:	4618      	mov	r0, r3
 8004124:	3718      	adds	r7, #24
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}

0800412a <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 800412a:	b580      	push	{r7, lr}
 800412c:	b088      	sub	sp, #32
 800412e:	af00      	add	r7, sp, #0
 8004130:	6078      	str	r0, [r7, #4]
 8004132:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8004134:	2300      	movs	r3, #0
 8004136:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8004138:	2300      	movs	r3, #0
 800413a:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d109      	bne.n	8004156 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004148:	f043 0201 	orr.w	r2, r3, #1
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e0a4      	b.n	80042a0 <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800415c:	2b23      	cmp	r3, #35	@ 0x23
 800415e:	d001      	beq.n	8004164 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e09d      	b.n	80042a0 <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004168:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	69fa      	ldr	r2, [r7, #28]
 800416e:	3212      	adds	r2, #18
 8004170:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004174:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800417a:	f1c3 0304 	rsb	r3, r3, #4
 800417e:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8004180:	e066      	b.n	8004250 <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8004182:	69bb      	ldr	r3, [r7, #24]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800418a:	2b00      	cmp	r3, #0
 800418c:	d007      	beq.n	800419e <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 800418e:	69bb      	ldr	r3, [r7, #24]
 8004190:	69da      	ldr	r2, [r3, #28]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	699a      	ldr	r2, [r3, #24]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 800419e:	69bb      	ldr	r3, [r7, #24]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d103      	bne.n	80041b2 <HAL_ETH_ReadData+0x88>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d03c      	beq.n	800422c <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80041b2:	69bb      	ldr	r3, [r7, #24]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d005      	beq.n	80041ca <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2200      	movs	r2, #0
 80041c8:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 80041ca:	69bb      	ldr	r3, [r7, #24]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	0c1b      	lsrs	r3, r3, #16
 80041d0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80041d4:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 80041d6:	69bb      	ldr	r3, [r7, #24]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d005      	beq.n	80041ee <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 80041e2:	69bb      	ldr	r3, [r7, #24]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 80041ea:	2301      	movs	r3, #1
 80041ec:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 80041ee:	69bb      	ldr	r3, [r7, #24]
 80041f0:	689a      	ldr	r2, [r3, #8]
 80041f2:	69bb      	ldr	r3, [r7, #24]
 80041f4:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8004202:	69bb      	ldr	r3, [r7, #24]
 8004204:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8004206:	461a      	mov	r2, r3
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	b29b      	uxth	r3, r3
 800420c:	f004 f9ac 	bl	8008568 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004214:	1c5a      	adds	r2, r3, #1
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	441a      	add	r2, r3
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8004226:	69bb      	ldr	r3, [r7, #24]
 8004228:	2200      	movs	r2, #0
 800422a:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 800422c:	69fb      	ldr	r3, [r7, #28]
 800422e:	3301      	adds	r3, #1
 8004230:	61fb      	str	r3, [r7, #28]
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	2b03      	cmp	r3, #3
 8004236:	d902      	bls.n	800423e <HAL_ETH_ReadData+0x114>
 8004238:	69fb      	ldr	r3, [r7, #28]
 800423a:	3b04      	subs	r3, #4
 800423c:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	69fa      	ldr	r2, [r7, #28]
 8004242:	3212      	adds	r2, #18
 8004244:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004248:	61bb      	str	r3, [r7, #24]
    desccnt++;
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	3301      	adds	r3, #1
 800424e:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8004250:	69bb      	ldr	r3, [r7, #24]
 8004252:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8004254:	2b00      	cmp	r3, #0
 8004256:	db06      	blt.n	8004266 <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8004258:	697a      	ldr	r2, [r7, #20]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	429a      	cmp	r2, r3
 800425e:	d202      	bcs.n	8004266 <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 8004260:	7cfb      	ldrb	r3, [r7, #19]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d08d      	beq.n	8004182 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	441a      	add	r2, r3
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004276:	2b00      	cmp	r3, #0
 8004278:	d002      	beq.n	8004280 <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f000 f814 	bl	80042a8 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	69fa      	ldr	r2, [r7, #28]
 8004284:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8004286:	7cfb      	ldrb	r3, [r7, #19]
 8004288:	2b01      	cmp	r3, #1
 800428a:	d108      	bne.n	800429e <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2200      	movs	r2, #0
 8004298:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800429a:	2300      	movs	r3, #0
 800429c:	e000      	b.n	80042a0 <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3720      	adds	r7, #32
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}

080042a8 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b088      	sub	sp, #32
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80042b0:	2300      	movs	r3, #0
 80042b2:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 80042b4:	2301      	movs	r3, #1
 80042b6:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80042bc:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	69fa      	ldr	r2, [r7, #28]
 80042c2:	3212      	adds	r2, #18
 80042c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042c8:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80042ce:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80042d0:	e044      	b.n	800435c <ETH_UpdateDescriptor+0xb4>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	6a1b      	ldr	r3, [r3, #32]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d112      	bne.n	8004300 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80042da:	f107 0308 	add.w	r3, r7, #8
 80042de:	4618      	mov	r0, r3
 80042e0:	f004 f912 	bl	8008508 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d102      	bne.n	80042f0 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80042ea:	2300      	movs	r3, #0
 80042ec:	74fb      	strb	r3, [r7, #19]
 80042ee:	e007      	b.n	8004300 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	461a      	mov	r2, r3
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	461a      	mov	r2, r3
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8004300:	7cfb      	ldrb	r3, [r7, #19]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d02a      	beq.n	800435c <ETH_UpdateDescriptor+0xb4>
    {
      if (heth->RxDescList.ItMode == 0U)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800430a:	2b00      	cmp	r3, #0
 800430c:	d108      	bne.n	8004320 <ETH_UpdateDescriptor+0x78>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	695b      	ldr	r3, [r3, #20]
 8004312:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004316:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800431a:	697a      	ldr	r2, [r7, #20]
 800431c:	6053      	str	r3, [r2, #4]
 800431e:	e005      	b.n	800432c <ETH_UpdateDescriptor+0x84>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	695b      	ldr	r3, [r3, #20]
 8004324:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	3301      	adds	r3, #1
 800433c:	61fb      	str	r3, [r7, #28]
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	2b03      	cmp	r3, #3
 8004342:	d902      	bls.n	800434a <ETH_UpdateDescriptor+0xa2>
 8004344:	69fb      	ldr	r3, [r7, #28]
 8004346:	3b04      	subs	r3, #4
 8004348:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	69fa      	ldr	r2, [r7, #28]
 800434e:	3212      	adds	r2, #18
 8004350:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004354:	617b      	str	r3, [r7, #20]
      desccount--;
 8004356:	69bb      	ldr	r3, [r7, #24]
 8004358:	3b01      	subs	r3, #1
 800435a:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 800435c:	69bb      	ldr	r3, [r7, #24]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d002      	beq.n	8004368 <ETH_UpdateDescriptor+0xc0>
 8004362:	7cfb      	ldrb	r3, [r7, #19]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d1b4      	bne.n	80042d2 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800436c:	69ba      	ldr	r2, [r7, #24]
 800436e:	429a      	cmp	r2, r3
 8004370:	d01a      	beq.n	80043a8 <ETH_UpdateDescriptor+0x100>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	3301      	adds	r3, #1
 8004376:	f003 0303 	and.w	r3, r3, #3
 800437a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 800437c:	f3bf 8f5f 	dmb	sy
}
 8004380:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6919      	ldr	r1, [r3, #16]
 8004386:	68fa      	ldr	r2, [r7, #12]
 8004388:	4613      	mov	r3, r2
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	4413      	add	r3, r2
 800438e:	00db      	lsls	r3, r3, #3
 8004390:	18ca      	adds	r2, r1, r3
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800439a:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	69fa      	ldr	r2, [r7, #28]
 80043a0:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	69ba      	ldr	r2, [r7, #24]
 80043a6:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 80043a8:	bf00      	nop
 80043aa:	3720      	adds	r7, #32
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}

080043b0 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b086      	sub	sp, #24
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043be:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80043c8:	695b      	ldr	r3, [r3, #20]
 80043ca:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80043d4:	69db      	ldr	r3, [r3, #28]
 80043d6:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 80043d8:	4b4b      	ldr	r3, [pc, #300]	@ (8004508 <HAL_ETH_IRQHandler+0x158>)
 80043da:	695b      	ldr	r3, [r3, #20]
 80043dc:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d00e      	beq.n	8004406 <HAL_ETH_IRQHandler+0x56>
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d009      	beq.n	8004406 <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80043fa:	461a      	mov	r2, r3
 80043fc:	4b43      	ldr	r3, [pc, #268]	@ (800450c <HAL_ETH_IRQHandler+0x15c>)
 80043fe:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f000 f891 	bl	8004528 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	f003 0301 	and.w	r3, r3, #1
 800440c:	2b00      	cmp	r3, #0
 800440e:	d00f      	beq.n	8004430 <HAL_ETH_IRQHandler+0x80>
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f003 0301 	and.w	r3, r3, #1
 8004416:	2b00      	cmp	r3, #0
 8004418:	d00a      	beq.n	8004430 <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004422:	461a      	mov	r2, r3
 8004424:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8004428:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 f872 	bl	8004514 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d042      	beq.n	80044c0 <HAL_ETH_IRQHandler+0x110>
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004440:	2b00      	cmp	r3, #0
 8004442:	d03d      	beq.n	80044c0 <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800444a:	f043 0208 	orr.w	r2, r3, #8
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800445a:	2b00      	cmp	r3, #0
 800445c:	d01a      	beq.n	8004494 <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004466:	695a      	ldr	r2, [r3, #20]
 8004468:	4b29      	ldr	r3, [pc, #164]	@ (8004510 <HAL_ETH_IRQHandler+0x160>)
 800446a:	4013      	ands	r3, r2
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800447a:	69db      	ldr	r3, [r3, #28]
 800447c:	687a      	ldr	r2, [r7, #4]
 800447e:	6812      	ldr	r2, [r2, #0]
 8004480:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 8004484:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004488:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	22e0      	movs	r2, #224	@ 0xe0
 800448e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8004492:	e012      	b.n	80044ba <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800449c:	695a      	ldr	r2, [r3, #20]
 800449e:	f248 6380 	movw	r3, #34432	@ 0x8680
 80044a2:	4013      	ands	r3, r2
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80044b2:	461a      	mov	r2, r3
 80044b4:	f248 6380 	movw	r3, #34432	@ 0x8680
 80044b8:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f000 f83e 	bl	800453c <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	f003 0308 	and.w	r3, r3, #8
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d00e      	beq.n	80044e8 <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044d0:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f000 f838 	bl	8004550 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d006      	beq.n	8004500 <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80044f2:	4b05      	ldr	r3, [pc, #20]	@ (8004508 <HAL_ETH_IRQHandler+0x158>)
 80044f4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80044f8:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f000 f832 	bl	8004564 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8004500:	bf00      	nop
 8004502:	3718      	adds	r7, #24
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}
 8004508:	40013c00 	.word	0x40013c00
 800450c:	00010040 	.word	0x00010040
 8004510:	007e2000 	.word	0x007e2000

08004514 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8004514:	b480      	push	{r7}
 8004516:	b083      	sub	sp, #12
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 800451c:	bf00      	nop
 800451e:	370c      	adds	r7, #12
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr

08004528 <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 8004530:	bf00      	nop
 8004532:	370c      	adds	r7, #12
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr

0800453c <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 800453c:	b480      	push	{r7}
 800453e:	b083      	sub	sp, #12
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 8004544:	bf00      	nop
 8004546:	370c      	adds	r7, #12
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr

08004550 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8004550:	b480      	push	{r7}
 8004552:	b083      	sub	sp, #12
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8004558:	bf00      	nop
 800455a:	370c      	adds	r7, #12
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr

08004564 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8004564:	b480      	push	{r7}
 8004566:	b083      	sub	sp, #12
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 800456c:	bf00      	nop
 800456e:	370c      	adds	r7, #12
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr

08004578 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b086      	sub	sp, #24
 800457c:	af00      	add	r7, sp, #0
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	60b9      	str	r1, [r7, #8]
 8004582:	607a      	str	r2, [r7, #4]
 8004584:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	691b      	ldr	r3, [r3, #16]
 800458c:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	f003 031c 	and.w	r3, r3, #28
 8004594:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	02db      	lsls	r3, r3, #11
 800459a:	b29b      	uxth	r3, r3
 800459c:	697a      	ldr	r2, [r7, #20]
 800459e:	4313      	orrs	r3, r2
 80045a0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	019b      	lsls	r3, r3, #6
 80045a6:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 80045aa:	697a      	ldr	r2, [r7, #20]
 80045ac:	4313      	orrs	r3, r2
 80045ae:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	f023 0302 	bic.w	r3, r3, #2
 80045b6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	f043 0301 	orr.w	r3, r3, #1
 80045be:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	697a      	ldr	r2, [r7, #20]
 80045c6:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 80045c8:	f7fe fe76 	bl	80032b8 <HAL_GetTick>
 80045cc:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80045ce:	e00d      	b.n	80045ec <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 80045d0:	f7fe fe72 	bl	80032b8 <HAL_GetTick>
 80045d4:	4602      	mov	r2, r0
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	1ad3      	subs	r3, r2, r3
 80045da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045de:	d301      	bcc.n	80045e4 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	e010      	b.n	8004606 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	f003 0301 	and.w	r3, r3, #1
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d1ec      	bne.n	80045d0 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	695b      	ldr	r3, [r3, #20]
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	461a      	mov	r2, r3
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004604:	2300      	movs	r3, #0
}
 8004606:	4618      	mov	r0, r3
 8004608:	3718      	adds	r7, #24
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}

0800460e <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 800460e:	b580      	push	{r7, lr}
 8004610:	b086      	sub	sp, #24
 8004612:	af00      	add	r7, sp, #0
 8004614:	60f8      	str	r0, [r7, #12]
 8004616:	60b9      	str	r1, [r7, #8]
 8004618:	607a      	str	r2, [r7, #4]
 800461a:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	691b      	ldr	r3, [r3, #16]
 8004622:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	f003 031c 	and.w	r3, r3, #28
 800462a:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	02db      	lsls	r3, r3, #11
 8004630:	b29b      	uxth	r3, r3
 8004632:	697a      	ldr	r2, [r7, #20]
 8004634:	4313      	orrs	r3, r2
 8004636:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	019b      	lsls	r3, r3, #6
 800463c:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8004640:	697a      	ldr	r2, [r7, #20]
 8004642:	4313      	orrs	r3, r2
 8004644:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	f043 0302 	orr.w	r3, r3, #2
 800464c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	f043 0301 	orr.w	r3, r3, #1
 8004654:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	b29a      	uxth	r2, r3
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	697a      	ldr	r2, [r7, #20]
 8004666:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004668:	f7fe fe26 	bl	80032b8 <HAL_GetTick>
 800466c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800466e:	e00d      	b.n	800468c <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8004670:	f7fe fe22 	bl	80032b8 <HAL_GetTick>
 8004674:	4602      	mov	r2, r0
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800467e:	d301      	bcc.n	8004684 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	e009      	b.n	8004698 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	691b      	ldr	r3, [r3, #16]
 800468a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	f003 0301 	and.w	r3, r3, #1
 8004692:	2b00      	cmp	r3, #0
 8004694:	d1ec      	bne.n	8004670 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8004696:	2300      	movs	r3, #0
}
 8004698:	4618      	mov	r0, r3
 800469a:	3718      	adds	r7, #24
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}

080046a0 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b083      	sub	sp, #12
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d101      	bne.n	80046b4 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e0e6      	b.n	8004882 <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 0310 	and.w	r3, r3, #16
 80046be:	2b00      	cmp	r3, #0
 80046c0:	bf14      	ite	ne
 80046c2:	2301      	movne	r3, #1
 80046c4:	2300      	moveq	r3, #0
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	461a      	mov	r2, r3
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	bf0c      	ite	eq
 80046ec:	2301      	moveq	r3, #1
 80046ee:	2300      	movne	r3, #0
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	461a      	mov	r2, r3
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 8004704:	2b00      	cmp	r3, #0
 8004706:	bf14      	ite	ne
 8004708:	2301      	movne	r3, #1
 800470a:	2300      	moveq	r3, #0
 800470c:	b2db      	uxtb	r3, r3
 800470e:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800471e:	2b00      	cmp	r3, #0
 8004720:	bf0c      	ite	eq
 8004722:	2301      	moveq	r3, #1
 8004724:	2300      	movne	r3, #0
 8004726:	b2db      	uxtb	r3, r3
 8004728:	461a      	mov	r2, r3
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004738:	2b00      	cmp	r3, #0
 800473a:	bf14      	ite	ne
 800473c:	2301      	movne	r3, #1
 800473e:	2300      	moveq	r3, #0
 8004740:	b2db      	uxtb	r3, r3
 8004742:	461a      	mov	r2, r3
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800476e:	2b00      	cmp	r3, #0
 8004770:	bf0c      	ite	eq
 8004772:	2301      	moveq	r3, #1
 8004774:	2300      	movne	r3, #0
 8004776:	b2db      	uxtb	r3, r3
 8004778:	461a      	mov	r2, r3
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004788:	2b00      	cmp	r3, #0
 800478a:	bf0c      	ite	eq
 800478c:	2301      	moveq	r3, #1
 800478e:	2300      	movne	r3, #0
 8004790:	b2db      	uxtb	r3, r3
 8004792:	461a      	mov	r2, r3
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	bf14      	ite	ne
 80047a6:	2301      	movne	r3, #1
 80047a8:	2300      	moveq	r3, #0
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	461a      	mov	r2, r3
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	bf14      	ite	ne
 80047ce:	2301      	movne	r3, #1
 80047d0:	2300      	moveq	r3, #0
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	461a      	mov	r2, r3
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	bf14      	ite	ne
 80047e8:	2301      	movne	r3, #1
 80047ea:	2300      	moveq	r3, #0
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	461a      	mov	r2, r3
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	699b      	ldr	r3, [r3, #24]
 80047fa:	f003 0302 	and.w	r3, r3, #2
 80047fe:	2b00      	cmp	r3, #0
 8004800:	bf14      	ite	ne
 8004802:	2301      	movne	r3, #1
 8004804:	2300      	moveq	r3, #0
 8004806:	b2db      	uxtb	r3, r3
 8004808:	461a      	mov	r2, r3
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	699b      	ldr	r3, [r3, #24]
 8004816:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800481a:	2b00      	cmp	r3, #0
 800481c:	bf0c      	ite	eq
 800481e:	2301      	moveq	r3, #1
 8004820:	2300      	movne	r3, #0
 8004822:	b2db      	uxtb	r3, r3
 8004824:	461a      	mov	r2, r3
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	699b      	ldr	r3, [r3, #24]
 8004832:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	699b      	ldr	r3, [r3, #24]
 8004840:	0c1b      	lsrs	r3, r3, #16
 8004842:	b29a      	uxth	r2, r3
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	699b      	ldr	r3, [r3, #24]
 800484e:	f003 0304 	and.w	r3, r3, #4
 8004852:	2b00      	cmp	r3, #0
 8004854:	bf14      	ite	ne
 8004856:	2301      	movne	r3, #1
 8004858:	2300      	moveq	r3, #0
 800485a:	b2db      	uxtb	r3, r3
 800485c:	461a      	mov	r2, r3
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	699b      	ldr	r3, [r3, #24]
 800486a:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 800486e:	2b00      	cmp	r3, #0
 8004870:	bf14      	ite	ne
 8004872:	2301      	movne	r3, #1
 8004874:	2300      	moveq	r3, #0
 8004876:	b2db      	uxtb	r3, r3
 8004878:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8004880:	2300      	movs	r3, #0
}
 8004882:	4618      	mov	r0, r3
 8004884:	370c      	adds	r7, #12
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr

0800488e <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800488e:	b580      	push	{r7, lr}
 8004890:	b082      	sub	sp, #8
 8004892:	af00      	add	r7, sp, #0
 8004894:	6078      	str	r0, [r7, #4]
 8004896:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d101      	bne.n	80048a2 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	e00b      	b.n	80048ba <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80048a8:	2b10      	cmp	r3, #16
 80048aa:	d105      	bne.n	80048b8 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 80048ac:	6839      	ldr	r1, [r7, #0]
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f000 f870 	bl	8004994 <ETH_SetMACConfig>

    return HAL_OK;
 80048b4:	2300      	movs	r3, #0
 80048b6:	e000      	b.n	80048ba <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
  }
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3708      	adds	r7, #8
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}
	...

080048c4 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b084      	sub	sp, #16
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	691b      	ldr	r3, [r3, #16]
 80048d2:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f023 031c 	bic.w	r3, r3, #28
 80048da:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80048dc:	f001 fcc4 	bl	8006268 <HAL_RCC_GetHCLKFreq>
 80048e0:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	4a14      	ldr	r2, [pc, #80]	@ (8004938 <HAL_ETH_SetMDIOClockRange+0x74>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d804      	bhi.n	80048f4 <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	f043 0308 	orr.w	r3, r3, #8
 80048f0:	60fb      	str	r3, [r7, #12]
 80048f2:	e019      	b.n	8004928 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	4a11      	ldr	r2, [pc, #68]	@ (800493c <HAL_ETH_SetMDIOClockRange+0x78>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d204      	bcs.n	8004906 <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f043 030c 	orr.w	r3, r3, #12
 8004902:	60fb      	str	r3, [r7, #12]
 8004904:	e010      	b.n	8004928 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	4a0d      	ldr	r2, [pc, #52]	@ (8004940 <HAL_ETH_SetMDIOClockRange+0x7c>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d90c      	bls.n	8004928 <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	4a0c      	ldr	r2, [pc, #48]	@ (8004944 <HAL_ETH_SetMDIOClockRange+0x80>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d804      	bhi.n	8004920 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	f043 0304 	orr.w	r3, r3, #4
 800491c:	60fb      	str	r3, [r7, #12]
 800491e:	e003      	b.n	8004928 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f043 0310 	orr.w	r3, r3, #16
 8004926:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	68fa      	ldr	r2, [r7, #12]
 800492e:	611a      	str	r2, [r3, #16]
}
 8004930:	bf00      	nop
 8004932:	3710      	adds	r7, #16
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}
 8004938:	02160ebf 	.word	0x02160ebf
 800493c:	03938700 	.word	0x03938700
 8004940:	05f5e0ff 	.word	0x05f5e0ff
 8004944:	08f0d17f 	.word	0x08f0d17f

08004948 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b084      	sub	sp, #16
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8004950:	2300      	movs	r3, #0
 8004952:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800495c:	699b      	ldr	r3, [r3, #24]
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	6812      	ldr	r2, [r2, #0]
 8004962:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004966:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800496a:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004974:	699b      	ldr	r3, [r3, #24]
 8004976:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004978:	2001      	movs	r0, #1
 800497a:	f7fe fca9 	bl	80032d0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004988:	6193      	str	r3, [r2, #24]
}
 800498a:	bf00      	nop
 800498c:	3710      	adds	r7, #16
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
	...

08004994 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b084      	sub	sp, #16
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80049a6:	68fa      	ldr	r2, [r7, #12]
 80049a8:	4b53      	ldr	r3, [pc, #332]	@ (8004af8 <ETH_SetMACConfig+0x164>)
 80049aa:	4013      	ands	r3, r2
 80049ac:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	7b9b      	ldrb	r3, [r3, #14]
 80049b2:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80049b4:	683a      	ldr	r2, [r7, #0]
 80049b6:	7c12      	ldrb	r2, [r2, #16]
 80049b8:	2a00      	cmp	r2, #0
 80049ba:	d102      	bne.n	80049c2 <ETH_SetMACConfig+0x2e>
 80049bc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80049c0:	e000      	b.n	80049c4 <ETH_SetMACConfig+0x30>
 80049c2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80049c4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80049c6:	683a      	ldr	r2, [r7, #0]
 80049c8:	7c52      	ldrb	r2, [r2, #17]
 80049ca:	2a00      	cmp	r2, #0
 80049cc:	d102      	bne.n	80049d4 <ETH_SetMACConfig+0x40>
 80049ce:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80049d2:	e000      	b.n	80049d6 <ETH_SetMACConfig+0x42>
 80049d4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80049d6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80049dc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	7fdb      	ldrb	r3, [r3, #31]
 80049e2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80049e4:	431a      	orrs	r2, r3
                        macconf->Speed |
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80049ea:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80049ec:	683a      	ldr	r2, [r7, #0]
 80049ee:	7f92      	ldrb	r2, [r2, #30]
 80049f0:	2a00      	cmp	r2, #0
 80049f2:	d102      	bne.n	80049fa <ETH_SetMACConfig+0x66>
 80049f4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80049f8:	e000      	b.n	80049fc <ETH_SetMACConfig+0x68>
 80049fa:	2200      	movs	r2, #0
                        macconf->Speed |
 80049fc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	7f1b      	ldrb	r3, [r3, #28]
 8004a02:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004a04:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8004a0a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	791b      	ldrb	r3, [r3, #4]
 8004a10:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8004a12:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004a14:	683a      	ldr	r2, [r7, #0]
 8004a16:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004a1a:	2a00      	cmp	r2, #0
 8004a1c:	d102      	bne.n	8004a24 <ETH_SetMACConfig+0x90>
 8004a1e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a22:	e000      	b.n	8004a26 <ETH_SetMACConfig+0x92>
 8004a24:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8004a26:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	7bdb      	ldrb	r3, [r3, #15]
 8004a2c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004a2e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004a34:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004a3c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	68fa      	ldr	r2, [r7, #12]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	68fa      	ldr	r2, [r7, #12]
 8004a4c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004a56:	2001      	movs	r0, #1
 8004a58:	f7fe fc3a 	bl	80032d0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	68fa      	ldr	r2, [r7, #12]
 8004a62:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	699b      	ldr	r3, [r3, #24]
 8004a6a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8004a6c:	68fa      	ldr	r2, [r7, #12]
 8004a6e:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8004a72:	4013      	ands	r3, r2
 8004a74:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a7a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004a7c:	683a      	ldr	r2, [r7, #0]
 8004a7e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8004a82:	2a00      	cmp	r2, #0
 8004a84:	d101      	bne.n	8004a8a <ETH_SetMACConfig+0xf6>
 8004a86:	2280      	movs	r2, #128	@ 0x80
 8004a88:	e000      	b.n	8004a8c <ETH_SetMACConfig+0xf8>
 8004a8a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004a8c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004a92:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004a94:	683a      	ldr	r2, [r7, #0]
 8004a96:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8004a9a:	2a01      	cmp	r2, #1
 8004a9c:	d101      	bne.n	8004aa2 <ETH_SetMACConfig+0x10e>
 8004a9e:	2208      	movs	r2, #8
 8004aa0:	e000      	b.n	8004aa4 <ETH_SetMACConfig+0x110>
 8004aa2:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8004aa4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8004aa6:	683a      	ldr	r2, [r7, #0]
 8004aa8:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8004aac:	2a01      	cmp	r2, #1
 8004aae:	d101      	bne.n	8004ab4 <ETH_SetMACConfig+0x120>
 8004ab0:	2204      	movs	r2, #4
 8004ab2:	e000      	b.n	8004ab6 <ETH_SetMACConfig+0x122>
 8004ab4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004ab6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8004ab8:	683a      	ldr	r2, [r7, #0]
 8004aba:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8004abe:	2a01      	cmp	r2, #1
 8004ac0:	d101      	bne.n	8004ac6 <ETH_SetMACConfig+0x132>
 8004ac2:	2202      	movs	r2, #2
 8004ac4:	e000      	b.n	8004ac8 <ETH_SetMACConfig+0x134>
 8004ac6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	68fa      	ldr	r2, [r7, #12]
 8004acc:	4313      	orrs	r3, r2
 8004ace:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	68fa      	ldr	r2, [r7, #12]
 8004ad6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	699b      	ldr	r3, [r3, #24]
 8004ade:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004ae0:	2001      	movs	r0, #1
 8004ae2:	f7fe fbf5 	bl	80032d0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	68fa      	ldr	r2, [r7, #12]
 8004aec:	619a      	str	r2, [r3, #24]
}
 8004aee:	bf00      	nop
 8004af0:	3710      	adds	r7, #16
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}
 8004af6:	bf00      	nop
 8004af8:	fd20810f 	.word	0xfd20810f

08004afc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b084      	sub	sp, #16
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004b0e:	699b      	ldr	r3, [r3, #24]
 8004b10:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8004b12:	68fa      	ldr	r2, [r7, #12]
 8004b14:	4b3d      	ldr	r3, [pc, #244]	@ (8004c0c <ETH_SetDMAConfig+0x110>)
 8004b16:	4013      	ands	r3, r2
 8004b18:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	7b1b      	ldrb	r3, [r3, #12]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d102      	bne.n	8004b28 <ETH_SetDMAConfig+0x2c>
 8004b22:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8004b26:	e000      	b.n	8004b2a <ETH_SetDMAConfig+0x2e>
 8004b28:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	7b5b      	ldrb	r3, [r3, #13]
 8004b2e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004b30:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004b32:	683a      	ldr	r2, [r7, #0]
 8004b34:	7f52      	ldrb	r2, [r2, #29]
 8004b36:	2a00      	cmp	r2, #0
 8004b38:	d102      	bne.n	8004b40 <ETH_SetDMAConfig+0x44>
 8004b3a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004b3e:	e000      	b.n	8004b42 <ETH_SetDMAConfig+0x46>
 8004b40:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004b42:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	7b9b      	ldrb	r3, [r3, #14]
 8004b48:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004b4a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004b50:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	7f1b      	ldrb	r3, [r3, #28]
 8004b56:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8004b58:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	7f9b      	ldrb	r3, [r3, #30]
 8004b5e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004b60:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004b66:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004b6e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004b70:	4313      	orrs	r3, r2
 8004b72:	68fa      	ldr	r2, [r7, #12]
 8004b74:	4313      	orrs	r3, r2
 8004b76:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004b80:	461a      	mov	r2, r3
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004b8e:	699b      	ldr	r3, [r3, #24]
 8004b90:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004b92:	2001      	movs	r0, #1
 8004b94:	f7fe fb9c 	bl	80032d0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004ba0:	461a      	mov	r2, r3
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	791b      	ldrb	r3, [r3, #4]
 8004baa:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004bb0:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8004bb6:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004bbc:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004bc4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8004bc6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bcc:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004bce:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004bd4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	6812      	ldr	r2, [r2, #0]
 8004bda:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004bde:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004be2:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004bf0:	2001      	movs	r0, #1
 8004bf2:	f7fe fb6d 	bl	80032d0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004bfe:	461a      	mov	r2, r3
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	6013      	str	r3, [r2, #0]
}
 8004c04:	bf00      	nop
 8004c06:	3710      	adds	r7, #16
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}
 8004c0c:	f8de3f23 	.word	0xf8de3f23

08004c10 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b0a6      	sub	sp, #152	@ 0x98
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8004c24:	2300      	movs	r3, #0
 8004c26:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8004c34:	2300      	movs	r3, #0
 8004c36:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8004c40:	2301      	movs	r3, #1
 8004c42:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8004c46:	2300      	movs	r3, #0
 8004c48:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004c52:	2300      	movs	r3, #0
 8004c54:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8004c56:	2300      	movs	r3, #0
 8004c58:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8004c60:	2300      	movs	r3, #0
 8004c62:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8004c66:	2300      	movs	r3, #0
 8004c68:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004c72:	2300      	movs	r3, #0
 8004c74:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004c78:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004c7c:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004c7e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004c82:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004c84:	2300      	movs	r3, #0
 8004c86:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004c8a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8004c8e:	4619      	mov	r1, r3
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f7ff fe7f 	bl	8004994 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8004c96:	2301      	movs	r3, #1
 8004c98:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8004cac:	2300      	movs	r3, #0
 8004cae:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004cc6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004cca:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004ccc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004cd0:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004cd2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004cd6:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004ce6:	f107 0308 	add.w	r3, r7, #8
 8004cea:	4619      	mov	r1, r3
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f7ff ff05 	bl	8004afc <ETH_SetDMAConfig>
}
 8004cf2:	bf00      	nop
 8004cf4:	3798      	adds	r7, #152	@ 0x98
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}
	...

08004cfc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b087      	sub	sp, #28
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	60f8      	str	r0, [r7, #12]
 8004d04:	60b9      	str	r1, [r7, #8]
 8004d06:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	3305      	adds	r3, #5
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	021b      	lsls	r3, r3, #8
 8004d10:	687a      	ldr	r2, [r7, #4]
 8004d12:	3204      	adds	r2, #4
 8004d14:	7812      	ldrb	r2, [r2, #0]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8004d1a:	68ba      	ldr	r2, [r7, #8]
 8004d1c:	4b11      	ldr	r3, [pc, #68]	@ (8004d64 <ETH_MACAddressConfig+0x68>)
 8004d1e:	4413      	add	r3, r2
 8004d20:	461a      	mov	r2, r3
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	3303      	adds	r3, #3
 8004d2a:	781b      	ldrb	r3, [r3, #0]
 8004d2c:	061a      	lsls	r2, r3, #24
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	3302      	adds	r3, #2
 8004d32:	781b      	ldrb	r3, [r3, #0]
 8004d34:	041b      	lsls	r3, r3, #16
 8004d36:	431a      	orrs	r2, r3
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	3301      	adds	r3, #1
 8004d3c:	781b      	ldrb	r3, [r3, #0]
 8004d3e:	021b      	lsls	r3, r3, #8
 8004d40:	4313      	orrs	r3, r2
 8004d42:	687a      	ldr	r2, [r7, #4]
 8004d44:	7812      	ldrb	r2, [r2, #0]
 8004d46:	4313      	orrs	r3, r2
 8004d48:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8004d4a:	68ba      	ldr	r2, [r7, #8]
 8004d4c:	4b06      	ldr	r3, [pc, #24]	@ (8004d68 <ETH_MACAddressConfig+0x6c>)
 8004d4e:	4413      	add	r3, r2
 8004d50:	461a      	mov	r2, r3
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	6013      	str	r3, [r2, #0]
}
 8004d56:	bf00      	nop
 8004d58:	371c      	adds	r7, #28
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr
 8004d62:	bf00      	nop
 8004d64:	40028040 	.word	0x40028040
 8004d68:	40028044 	.word	0x40028044

08004d6c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b085      	sub	sp, #20
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004d74:	2300      	movs	r3, #0
 8004d76:	60fb      	str	r3, [r7, #12]
 8004d78:	e03e      	b.n	8004df8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	68d9      	ldr	r1, [r3, #12]
 8004d7e:	68fa      	ldr	r2, [r7, #12]
 8004d80:	4613      	mov	r3, r2
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	4413      	add	r3, r2
 8004d86:	00db      	lsls	r3, r3, #3
 8004d88:	440b      	add	r3, r1
 8004d8a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	2200      	movs	r2, #0
 8004d96:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	2200      	movs	r2, #0
 8004da2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004da4:	68b9      	ldr	r1, [r7, #8]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	68fa      	ldr	r2, [r7, #12]
 8004daa:	3206      	adds	r2, #6
 8004dac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2b02      	cmp	r3, #2
 8004dc0:	d80c      	bhi.n	8004ddc <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	68d9      	ldr	r1, [r3, #12]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	1c5a      	adds	r2, r3, #1
 8004dca:	4613      	mov	r3, r2
 8004dcc:	009b      	lsls	r3, r3, #2
 8004dce:	4413      	add	r3, r2
 8004dd0:	00db      	lsls	r3, r3, #3
 8004dd2:	440b      	add	r3, r1
 8004dd4:	461a      	mov	r2, r3
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	60da      	str	r2, [r3, #12]
 8004dda:	e004      	b.n	8004de6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	461a      	mov	r2, r3
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	3301      	adds	r3, #1
 8004df6:	60fb      	str	r3, [r7, #12]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2b03      	cmp	r3, #3
 8004dfc:	d9bd      	bls.n	8004d7a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2200      	movs	r2, #0
 8004e02:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	68da      	ldr	r2, [r3, #12]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e10:	611a      	str	r2, [r3, #16]
}
 8004e12:	bf00      	nop
 8004e14:	3714      	adds	r7, #20
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr

08004e1e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004e1e:	b480      	push	{r7}
 8004e20:	b085      	sub	sp, #20
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004e26:	2300      	movs	r3, #0
 8004e28:	60fb      	str	r3, [r7, #12]
 8004e2a:	e048      	b.n	8004ebe <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6919      	ldr	r1, [r3, #16]
 8004e30:	68fa      	ldr	r2, [r7, #12]
 8004e32:	4613      	mov	r3, r2
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	4413      	add	r3, r2
 8004e38:	00db      	lsls	r3, r3, #3
 8004e3a:	440b      	add	r3, r1
 8004e3c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	2200      	movs	r2, #0
 8004e42:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	2200      	movs	r2, #0
 8004e48:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	2200      	movs	r2, #0
 8004e54:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004e68:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	695b      	ldr	r3, [r3, #20]
 8004e6e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004e82:	68b9      	ldr	r1, [r7, #8]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	68fa      	ldr	r2, [r7, #12]
 8004e88:	3212      	adds	r2, #18
 8004e8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2b02      	cmp	r3, #2
 8004e92:	d80c      	bhi.n	8004eae <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6919      	ldr	r1, [r3, #16]
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	1c5a      	adds	r2, r3, #1
 8004e9c:	4613      	mov	r3, r2
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	4413      	add	r3, r2
 8004ea2:	00db      	lsls	r3, r3, #3
 8004ea4:	440b      	add	r3, r1
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	60da      	str	r2, [r3, #12]
 8004eac:	e004      	b.n	8004eb8 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	691b      	ldr	r3, [r3, #16]
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	3301      	adds	r3, #1
 8004ebc:	60fb      	str	r3, [r7, #12]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2b03      	cmp	r3, #3
 8004ec2:	d9b3      	bls.n	8004e2c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	691a      	ldr	r2, [r3, #16]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004eee:	60da      	str	r2, [r3, #12]
}
 8004ef0:	bf00      	nop
 8004ef2:	3714      	adds	r7, #20
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr

08004efc <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b091      	sub	sp, #68	@ 0x44
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	60f8      	str	r0, [r7, #12]
 8004f04:	60b9      	str	r1, [r7, #8]
 8004f06:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	3318      	adds	r3, #24
 8004f0c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8004f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f10:	691b      	ldr	r3, [r3, #16]
 8004f12:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8004f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f16:	691b      	ldr	r3, [r3, #16]
 8004f18:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f20:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004f22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f26:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8004f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004f3a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004f3e:	d007      	beq.n	8004f50 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8004f40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f44:	3304      	adds	r3, #4
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	4413      	add	r3, r2
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d001      	beq.n	8004f54 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8004f50:	2302      	movs	r3, #2
 8004f52:	e115      	b.n	8005180 <ETH_Prepare_Tx_Descriptors+0x284>
  }


  descnbr += 1U;
 8004f54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f56:	3301      	adds	r3, #1
 8004f58:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8004f5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	461a      	mov	r2, r3
 8004f60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f62:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8004f64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 8004f6c:	f023 031f 	bic.w	r3, r3, #31
 8004f70:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f72:	6852      	ldr	r2, [r2, #4]
 8004f74:	431a      	orrs	r2, r3
 8004f76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f78:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f003 0301 	and.w	r3, r3, #1
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d008      	beq.n	8004f98 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8004f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	695b      	ldr	r3, [r3, #20]
 8004f92:	431a      	orrs	r2, r3
 8004f94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f96:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 0320 	and.w	r3, r3, #32
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d008      	beq.n	8004fb6 <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8004fa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	691b      	ldr	r3, [r3, #16]
 8004fb0:	431a      	orrs	r2, r3
 8004fb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fb4:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f003 0304 	and.w	r3, r3, #4
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d005      	beq.n	8004fce <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8004fc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004fca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fcc:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8004fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fd8:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8004fda:	e084      	b.n	80050e6 <ETH_Prepare_Tx_Descriptors+0x1ea>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8004fdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004fe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fe6:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d006      	beq.n	8004ffc <ETH_Prepare_Tx_Descriptors+0x100>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004fee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ff8:	601a      	str	r2, [r3, #0]
 8004ffa:	e005      	b.n	8005008 <ETH_Prepare_Tx_Descriptors+0x10c>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004ffc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005006:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8005008:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800500a:	3301      	adds	r3, #1
 800500c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800500e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005010:	2b03      	cmp	r3, #3
 8005012:	d902      	bls.n	800501a <ETH_Prepare_Tx_Descriptors+0x11e>
 8005014:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005016:	3b04      	subs	r3, #4
 8005018:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800501a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800501c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800501e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005022:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8005024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800502c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005030:	d007      	beq.n	8005042 <ETH_Prepare_Tx_Descriptors+0x146>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8005032:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005034:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005036:	3304      	adds	r3, #4
 8005038:	009b      	lsls	r3, r3, #2
 800503a:	4413      	add	r3, r2
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d029      	beq.n	8005096 <ETH_Prepare_Tx_Descriptors+0x19a>
    {
      descidx = firstdescidx;
 8005042:	6a3b      	ldr	r3, [r7, #32]
 8005044:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005048:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800504a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800504e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8005050:	2300      	movs	r3, #0
 8005052:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005054:	e019      	b.n	800508a <ETH_Prepare_Tx_Descriptors+0x18e>
  __ASM volatile ("dmb 0xF":::"memory");
 8005056:	f3bf 8f5f 	dmb	sy
}
 800505a:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800505c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005066:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8005068:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800506a:	3301      	adds	r3, #1
 800506c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800506e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005070:	2b03      	cmp	r3, #3
 8005072:	d902      	bls.n	800507a <ETH_Prepare_Tx_Descriptors+0x17e>
 8005074:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005076:	3b04      	subs	r3, #4
 8005078:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800507a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800507c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800507e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005082:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8005084:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005086:	3301      	adds	r3, #1
 8005088:	63bb      	str	r3, [r7, #56]	@ 0x38
 800508a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800508c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800508e:	429a      	cmp	r2, r3
 8005090:	d3e1      	bcc.n	8005056 <ETH_Prepare_Tx_Descriptors+0x15a>
      }

      return HAL_ETH_ERROR_BUSY;
 8005092:	2302      	movs	r3, #2
 8005094:	e074      	b.n	8005180 <ETH_Prepare_Tx_Descriptors+0x284>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8005096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800509e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050a0:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 80050a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050a4:	3301      	adds	r3, #1
 80050a6:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80050a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80050ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	461a      	mov	r2, r3
 80050b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050b6:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80050b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 80050c0:	f023 031f 	bic.w	r3, r3, #31
 80050c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80050c6:	6852      	ldr	r2, [r2, #4]
 80050c8:	431a      	orrs	r2, r3
 80050ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050cc:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 80050ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050d0:	3301      	adds	r3, #1
 80050d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 80050d4:	f3bf 8f5f 	dmb	sy
}
 80050d8:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80050da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80050e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050e4:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 80050e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	f47f af76 	bne.w	8004fdc <ETH_Prepare_Tx_Descriptors+0xe0>
  }

  if (ItMode != ((uint32_t)RESET))
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d006      	beq.n	8005104 <ETH_Prepare_Tx_Descriptors+0x208>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80050f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80050fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005100:	601a      	str	r2, [r3, #0]
 8005102:	e005      	b.n	8005110 <ETH_Prepare_Tx_Descriptors+0x214>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8005104:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800510c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800510e:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8005110:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800511a:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 800511c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800511e:	6a3a      	ldr	r2, [r7, #32]
 8005120:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005124:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8005126:	f3bf 8f5f 	dmb	sy
}
 800512a:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800512c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005136:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8005138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800513a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800513c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800513e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005140:	3304      	adds	r3, #4
 8005142:	009b      	lsls	r3, r3, #2
 8005144:	440b      	add	r3, r1
 8005146:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8005148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800514a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800514c:	611a      	str	r2, [r3, #16]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800514e:	f3ef 8310 	mrs	r3, PRIMASK
 8005152:	613b      	str	r3, [r7, #16]
  return(result);
 8005154:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8005156:	61fb      	str	r3, [r7, #28]
 8005158:	2301      	movs	r3, #1
 800515a:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	f383 8810 	msr	PRIMASK, r3
}
 8005162:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8005164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005166:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005168:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800516a:	4413      	add	r3, r2
 800516c:	1c5a      	adds	r2, r3, #1
 800516e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005170:	629a      	str	r2, [r3, #40]	@ 0x28
 8005172:	69fb      	ldr	r3, [r7, #28]
 8005174:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005176:	69bb      	ldr	r3, [r7, #24]
 8005178:	f383 8810 	msr	PRIMASK, r3
}
 800517c:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800517e:	2300      	movs	r3, #0
}
 8005180:	4618      	mov	r0, r3
 8005182:	3744      	adds	r7, #68	@ 0x44
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr

0800518c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800518c:	b480      	push	{r7}
 800518e:	b089      	sub	sp, #36	@ 0x24
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005196:	2300      	movs	r3, #0
 8005198:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800519a:	2300      	movs	r3, #0
 800519c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800519e:	2300      	movs	r3, #0
 80051a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80051a2:	2300      	movs	r3, #0
 80051a4:	61fb      	str	r3, [r7, #28]
 80051a6:	e16b      	b.n	8005480 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80051a8:	2201      	movs	r2, #1
 80051aa:	69fb      	ldr	r3, [r7, #28]
 80051ac:	fa02 f303 	lsl.w	r3, r2, r3
 80051b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	697a      	ldr	r2, [r7, #20]
 80051b8:	4013      	ands	r3, r2
 80051ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80051bc:	693a      	ldr	r2, [r7, #16]
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	429a      	cmp	r2, r3
 80051c2:	f040 815a 	bne.w	800547a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	f003 0303 	and.w	r3, r3, #3
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d005      	beq.n	80051de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80051da:	2b02      	cmp	r3, #2
 80051dc:	d130      	bne.n	8005240 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80051e4:	69fb      	ldr	r3, [r7, #28]
 80051e6:	005b      	lsls	r3, r3, #1
 80051e8:	2203      	movs	r2, #3
 80051ea:	fa02 f303 	lsl.w	r3, r2, r3
 80051ee:	43db      	mvns	r3, r3
 80051f0:	69ba      	ldr	r2, [r7, #24]
 80051f2:	4013      	ands	r3, r2
 80051f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	68da      	ldr	r2, [r3, #12]
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	005b      	lsls	r3, r3, #1
 80051fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005202:	69ba      	ldr	r2, [r7, #24]
 8005204:	4313      	orrs	r3, r2
 8005206:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	69ba      	ldr	r2, [r7, #24]
 800520c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005214:	2201      	movs	r2, #1
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	fa02 f303 	lsl.w	r3, r2, r3
 800521c:	43db      	mvns	r3, r3
 800521e:	69ba      	ldr	r2, [r7, #24]
 8005220:	4013      	ands	r3, r2
 8005222:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	091b      	lsrs	r3, r3, #4
 800522a:	f003 0201 	and.w	r2, r3, #1
 800522e:	69fb      	ldr	r3, [r7, #28]
 8005230:	fa02 f303 	lsl.w	r3, r2, r3
 8005234:	69ba      	ldr	r2, [r7, #24]
 8005236:	4313      	orrs	r3, r2
 8005238:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	69ba      	ldr	r2, [r7, #24]
 800523e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	f003 0303 	and.w	r3, r3, #3
 8005248:	2b03      	cmp	r3, #3
 800524a:	d017      	beq.n	800527c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	68db      	ldr	r3, [r3, #12]
 8005250:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005252:	69fb      	ldr	r3, [r7, #28]
 8005254:	005b      	lsls	r3, r3, #1
 8005256:	2203      	movs	r2, #3
 8005258:	fa02 f303 	lsl.w	r3, r2, r3
 800525c:	43db      	mvns	r3, r3
 800525e:	69ba      	ldr	r2, [r7, #24]
 8005260:	4013      	ands	r3, r2
 8005262:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	689a      	ldr	r2, [r3, #8]
 8005268:	69fb      	ldr	r3, [r7, #28]
 800526a:	005b      	lsls	r3, r3, #1
 800526c:	fa02 f303 	lsl.w	r3, r2, r3
 8005270:	69ba      	ldr	r2, [r7, #24]
 8005272:	4313      	orrs	r3, r2
 8005274:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	69ba      	ldr	r2, [r7, #24]
 800527a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	f003 0303 	and.w	r3, r3, #3
 8005284:	2b02      	cmp	r3, #2
 8005286:	d123      	bne.n	80052d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005288:	69fb      	ldr	r3, [r7, #28]
 800528a:	08da      	lsrs	r2, r3, #3
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	3208      	adds	r2, #8
 8005290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005294:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005296:	69fb      	ldr	r3, [r7, #28]
 8005298:	f003 0307 	and.w	r3, r3, #7
 800529c:	009b      	lsls	r3, r3, #2
 800529e:	220f      	movs	r2, #15
 80052a0:	fa02 f303 	lsl.w	r3, r2, r3
 80052a4:	43db      	mvns	r3, r3
 80052a6:	69ba      	ldr	r2, [r7, #24]
 80052a8:	4013      	ands	r3, r2
 80052aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	691a      	ldr	r2, [r3, #16]
 80052b0:	69fb      	ldr	r3, [r7, #28]
 80052b2:	f003 0307 	and.w	r3, r3, #7
 80052b6:	009b      	lsls	r3, r3, #2
 80052b8:	fa02 f303 	lsl.w	r3, r2, r3
 80052bc:	69ba      	ldr	r2, [r7, #24]
 80052be:	4313      	orrs	r3, r2
 80052c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80052c2:	69fb      	ldr	r3, [r7, #28]
 80052c4:	08da      	lsrs	r2, r3, #3
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	3208      	adds	r2, #8
 80052ca:	69b9      	ldr	r1, [r7, #24]
 80052cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80052d6:	69fb      	ldr	r3, [r7, #28]
 80052d8:	005b      	lsls	r3, r3, #1
 80052da:	2203      	movs	r2, #3
 80052dc:	fa02 f303 	lsl.w	r3, r2, r3
 80052e0:	43db      	mvns	r3, r3
 80052e2:	69ba      	ldr	r2, [r7, #24]
 80052e4:	4013      	ands	r3, r2
 80052e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	f003 0203 	and.w	r2, r3, #3
 80052f0:	69fb      	ldr	r3, [r7, #28]
 80052f2:	005b      	lsls	r3, r3, #1
 80052f4:	fa02 f303 	lsl.w	r3, r2, r3
 80052f8:	69ba      	ldr	r2, [r7, #24]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	69ba      	ldr	r2, [r7, #24]
 8005302:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800530c:	2b00      	cmp	r3, #0
 800530e:	f000 80b4 	beq.w	800547a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005312:	2300      	movs	r3, #0
 8005314:	60fb      	str	r3, [r7, #12]
 8005316:	4b60      	ldr	r3, [pc, #384]	@ (8005498 <HAL_GPIO_Init+0x30c>)
 8005318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800531a:	4a5f      	ldr	r2, [pc, #380]	@ (8005498 <HAL_GPIO_Init+0x30c>)
 800531c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005320:	6453      	str	r3, [r2, #68]	@ 0x44
 8005322:	4b5d      	ldr	r3, [pc, #372]	@ (8005498 <HAL_GPIO_Init+0x30c>)
 8005324:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005326:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800532a:	60fb      	str	r3, [r7, #12]
 800532c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800532e:	4a5b      	ldr	r2, [pc, #364]	@ (800549c <HAL_GPIO_Init+0x310>)
 8005330:	69fb      	ldr	r3, [r7, #28]
 8005332:	089b      	lsrs	r3, r3, #2
 8005334:	3302      	adds	r3, #2
 8005336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800533a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800533c:	69fb      	ldr	r3, [r7, #28]
 800533e:	f003 0303 	and.w	r3, r3, #3
 8005342:	009b      	lsls	r3, r3, #2
 8005344:	220f      	movs	r2, #15
 8005346:	fa02 f303 	lsl.w	r3, r2, r3
 800534a:	43db      	mvns	r3, r3
 800534c:	69ba      	ldr	r2, [r7, #24]
 800534e:	4013      	ands	r3, r2
 8005350:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	4a52      	ldr	r2, [pc, #328]	@ (80054a0 <HAL_GPIO_Init+0x314>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d02b      	beq.n	80053b2 <HAL_GPIO_Init+0x226>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	4a51      	ldr	r2, [pc, #324]	@ (80054a4 <HAL_GPIO_Init+0x318>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d025      	beq.n	80053ae <HAL_GPIO_Init+0x222>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	4a50      	ldr	r2, [pc, #320]	@ (80054a8 <HAL_GPIO_Init+0x31c>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d01f      	beq.n	80053aa <HAL_GPIO_Init+0x21e>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	4a4f      	ldr	r2, [pc, #316]	@ (80054ac <HAL_GPIO_Init+0x320>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d019      	beq.n	80053a6 <HAL_GPIO_Init+0x21a>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	4a4e      	ldr	r2, [pc, #312]	@ (80054b0 <HAL_GPIO_Init+0x324>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d013      	beq.n	80053a2 <HAL_GPIO_Init+0x216>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	4a4d      	ldr	r2, [pc, #308]	@ (80054b4 <HAL_GPIO_Init+0x328>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d00d      	beq.n	800539e <HAL_GPIO_Init+0x212>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	4a4c      	ldr	r2, [pc, #304]	@ (80054b8 <HAL_GPIO_Init+0x32c>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d007      	beq.n	800539a <HAL_GPIO_Init+0x20e>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4a4b      	ldr	r2, [pc, #300]	@ (80054bc <HAL_GPIO_Init+0x330>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d101      	bne.n	8005396 <HAL_GPIO_Init+0x20a>
 8005392:	2307      	movs	r3, #7
 8005394:	e00e      	b.n	80053b4 <HAL_GPIO_Init+0x228>
 8005396:	2308      	movs	r3, #8
 8005398:	e00c      	b.n	80053b4 <HAL_GPIO_Init+0x228>
 800539a:	2306      	movs	r3, #6
 800539c:	e00a      	b.n	80053b4 <HAL_GPIO_Init+0x228>
 800539e:	2305      	movs	r3, #5
 80053a0:	e008      	b.n	80053b4 <HAL_GPIO_Init+0x228>
 80053a2:	2304      	movs	r3, #4
 80053a4:	e006      	b.n	80053b4 <HAL_GPIO_Init+0x228>
 80053a6:	2303      	movs	r3, #3
 80053a8:	e004      	b.n	80053b4 <HAL_GPIO_Init+0x228>
 80053aa:	2302      	movs	r3, #2
 80053ac:	e002      	b.n	80053b4 <HAL_GPIO_Init+0x228>
 80053ae:	2301      	movs	r3, #1
 80053b0:	e000      	b.n	80053b4 <HAL_GPIO_Init+0x228>
 80053b2:	2300      	movs	r3, #0
 80053b4:	69fa      	ldr	r2, [r7, #28]
 80053b6:	f002 0203 	and.w	r2, r2, #3
 80053ba:	0092      	lsls	r2, r2, #2
 80053bc:	4093      	lsls	r3, r2
 80053be:	69ba      	ldr	r2, [r7, #24]
 80053c0:	4313      	orrs	r3, r2
 80053c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80053c4:	4935      	ldr	r1, [pc, #212]	@ (800549c <HAL_GPIO_Init+0x310>)
 80053c6:	69fb      	ldr	r3, [r7, #28]
 80053c8:	089b      	lsrs	r3, r3, #2
 80053ca:	3302      	adds	r3, #2
 80053cc:	69ba      	ldr	r2, [r7, #24]
 80053ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80053d2:	4b3b      	ldr	r3, [pc, #236]	@ (80054c0 <HAL_GPIO_Init+0x334>)
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	43db      	mvns	r3, r3
 80053dc:	69ba      	ldr	r2, [r7, #24]
 80053de:	4013      	ands	r3, r2
 80053e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d003      	beq.n	80053f6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80053ee:	69ba      	ldr	r2, [r7, #24]
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	4313      	orrs	r3, r2
 80053f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80053f6:	4a32      	ldr	r2, [pc, #200]	@ (80054c0 <HAL_GPIO_Init+0x334>)
 80053f8:	69bb      	ldr	r3, [r7, #24]
 80053fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80053fc:	4b30      	ldr	r3, [pc, #192]	@ (80054c0 <HAL_GPIO_Init+0x334>)
 80053fe:	68db      	ldr	r3, [r3, #12]
 8005400:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	43db      	mvns	r3, r3
 8005406:	69ba      	ldr	r2, [r7, #24]
 8005408:	4013      	ands	r3, r2
 800540a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005414:	2b00      	cmp	r3, #0
 8005416:	d003      	beq.n	8005420 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005418:	69ba      	ldr	r2, [r7, #24]
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	4313      	orrs	r3, r2
 800541e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005420:	4a27      	ldr	r2, [pc, #156]	@ (80054c0 <HAL_GPIO_Init+0x334>)
 8005422:	69bb      	ldr	r3, [r7, #24]
 8005424:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005426:	4b26      	ldr	r3, [pc, #152]	@ (80054c0 <HAL_GPIO_Init+0x334>)
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	43db      	mvns	r3, r3
 8005430:	69ba      	ldr	r2, [r7, #24]
 8005432:	4013      	ands	r3, r2
 8005434:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800543e:	2b00      	cmp	r3, #0
 8005440:	d003      	beq.n	800544a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005442:	69ba      	ldr	r2, [r7, #24]
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	4313      	orrs	r3, r2
 8005448:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800544a:	4a1d      	ldr	r2, [pc, #116]	@ (80054c0 <HAL_GPIO_Init+0x334>)
 800544c:	69bb      	ldr	r3, [r7, #24]
 800544e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005450:	4b1b      	ldr	r3, [pc, #108]	@ (80054c0 <HAL_GPIO_Init+0x334>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	43db      	mvns	r3, r3
 800545a:	69ba      	ldr	r2, [r7, #24]
 800545c:	4013      	ands	r3, r2
 800545e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005468:	2b00      	cmp	r3, #0
 800546a:	d003      	beq.n	8005474 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800546c:	69ba      	ldr	r2, [r7, #24]
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	4313      	orrs	r3, r2
 8005472:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005474:	4a12      	ldr	r2, [pc, #72]	@ (80054c0 <HAL_GPIO_Init+0x334>)
 8005476:	69bb      	ldr	r3, [r7, #24]
 8005478:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800547a:	69fb      	ldr	r3, [r7, #28]
 800547c:	3301      	adds	r3, #1
 800547e:	61fb      	str	r3, [r7, #28]
 8005480:	69fb      	ldr	r3, [r7, #28]
 8005482:	2b0f      	cmp	r3, #15
 8005484:	f67f ae90 	bls.w	80051a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005488:	bf00      	nop
 800548a:	bf00      	nop
 800548c:	3724      	adds	r7, #36	@ 0x24
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr
 8005496:	bf00      	nop
 8005498:	40023800 	.word	0x40023800
 800549c:	40013800 	.word	0x40013800
 80054a0:	40020000 	.word	0x40020000
 80054a4:	40020400 	.word	0x40020400
 80054a8:	40020800 	.word	0x40020800
 80054ac:	40020c00 	.word	0x40020c00
 80054b0:	40021000 	.word	0x40021000
 80054b4:	40021400 	.word	0x40021400
 80054b8:	40021800 	.word	0x40021800
 80054bc:	40021c00 	.word	0x40021c00
 80054c0:	40013c00 	.word	0x40013c00

080054c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b083      	sub	sp, #12
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
 80054cc:	460b      	mov	r3, r1
 80054ce:	807b      	strh	r3, [r7, #2]
 80054d0:	4613      	mov	r3, r2
 80054d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80054d4:	787b      	ldrb	r3, [r7, #1]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d003      	beq.n	80054e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80054da:	887a      	ldrh	r2, [r7, #2]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80054e0:	e003      	b.n	80054ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80054e2:	887b      	ldrh	r3, [r7, #2]
 80054e4:	041a      	lsls	r2, r3, #16
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	619a      	str	r2, [r3, #24]
}
 80054ea:	bf00      	nop
 80054ec:	370c      	adds	r7, #12
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr
	...

080054f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b084      	sub	sp, #16
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d101      	bne.n	800550a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	e12b      	b.n	8005762 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005510:	b2db      	uxtb	r3, r3
 8005512:	2b00      	cmp	r3, #0
 8005514:	d106      	bne.n	8005524 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2200      	movs	r2, #0
 800551a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f7fd fa52 	bl	80029c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2224      	movs	r2, #36	@ 0x24
 8005528:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f022 0201 	bic.w	r2, r2, #1
 800553a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800554a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800555a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800555c:	f000 fe90 	bl	8006280 <HAL_RCC_GetPCLK1Freq>
 8005560:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	4a81      	ldr	r2, [pc, #516]	@ (800576c <HAL_I2C_Init+0x274>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d807      	bhi.n	800557c <HAL_I2C_Init+0x84>
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	4a80      	ldr	r2, [pc, #512]	@ (8005770 <HAL_I2C_Init+0x278>)
 8005570:	4293      	cmp	r3, r2
 8005572:	bf94      	ite	ls
 8005574:	2301      	movls	r3, #1
 8005576:	2300      	movhi	r3, #0
 8005578:	b2db      	uxtb	r3, r3
 800557a:	e006      	b.n	800558a <HAL_I2C_Init+0x92>
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	4a7d      	ldr	r2, [pc, #500]	@ (8005774 <HAL_I2C_Init+0x27c>)
 8005580:	4293      	cmp	r3, r2
 8005582:	bf94      	ite	ls
 8005584:	2301      	movls	r3, #1
 8005586:	2300      	movhi	r3, #0
 8005588:	b2db      	uxtb	r3, r3
 800558a:	2b00      	cmp	r3, #0
 800558c:	d001      	beq.n	8005592 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800558e:	2301      	movs	r3, #1
 8005590:	e0e7      	b.n	8005762 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	4a78      	ldr	r2, [pc, #480]	@ (8005778 <HAL_I2C_Init+0x280>)
 8005596:	fba2 2303 	umull	r2, r3, r2, r3
 800559a:	0c9b      	lsrs	r3, r3, #18
 800559c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	68ba      	ldr	r2, [r7, #8]
 80055ae:	430a      	orrs	r2, r1
 80055b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	6a1b      	ldr	r3, [r3, #32]
 80055b8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	4a6a      	ldr	r2, [pc, #424]	@ (800576c <HAL_I2C_Init+0x274>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d802      	bhi.n	80055cc <HAL_I2C_Init+0xd4>
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	3301      	adds	r3, #1
 80055ca:	e009      	b.n	80055e0 <HAL_I2C_Init+0xe8>
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80055d2:	fb02 f303 	mul.w	r3, r2, r3
 80055d6:	4a69      	ldr	r2, [pc, #420]	@ (800577c <HAL_I2C_Init+0x284>)
 80055d8:	fba2 2303 	umull	r2, r3, r2, r3
 80055dc:	099b      	lsrs	r3, r3, #6
 80055de:	3301      	adds	r3, #1
 80055e0:	687a      	ldr	r2, [r7, #4]
 80055e2:	6812      	ldr	r2, [r2, #0]
 80055e4:	430b      	orrs	r3, r1
 80055e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	69db      	ldr	r3, [r3, #28]
 80055ee:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80055f2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	495c      	ldr	r1, [pc, #368]	@ (800576c <HAL_I2C_Init+0x274>)
 80055fc:	428b      	cmp	r3, r1
 80055fe:	d819      	bhi.n	8005634 <HAL_I2C_Init+0x13c>
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	1e59      	subs	r1, r3, #1
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	005b      	lsls	r3, r3, #1
 800560a:	fbb1 f3f3 	udiv	r3, r1, r3
 800560e:	1c59      	adds	r1, r3, #1
 8005610:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005614:	400b      	ands	r3, r1
 8005616:	2b00      	cmp	r3, #0
 8005618:	d00a      	beq.n	8005630 <HAL_I2C_Init+0x138>
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	1e59      	subs	r1, r3, #1
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	005b      	lsls	r3, r3, #1
 8005624:	fbb1 f3f3 	udiv	r3, r1, r3
 8005628:	3301      	adds	r3, #1
 800562a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800562e:	e051      	b.n	80056d4 <HAL_I2C_Init+0x1dc>
 8005630:	2304      	movs	r3, #4
 8005632:	e04f      	b.n	80056d4 <HAL_I2C_Init+0x1dc>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d111      	bne.n	8005660 <HAL_I2C_Init+0x168>
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	1e58      	subs	r0, r3, #1
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6859      	ldr	r1, [r3, #4]
 8005644:	460b      	mov	r3, r1
 8005646:	005b      	lsls	r3, r3, #1
 8005648:	440b      	add	r3, r1
 800564a:	fbb0 f3f3 	udiv	r3, r0, r3
 800564e:	3301      	adds	r3, #1
 8005650:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005654:	2b00      	cmp	r3, #0
 8005656:	bf0c      	ite	eq
 8005658:	2301      	moveq	r3, #1
 800565a:	2300      	movne	r3, #0
 800565c:	b2db      	uxtb	r3, r3
 800565e:	e012      	b.n	8005686 <HAL_I2C_Init+0x18e>
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	1e58      	subs	r0, r3, #1
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6859      	ldr	r1, [r3, #4]
 8005668:	460b      	mov	r3, r1
 800566a:	009b      	lsls	r3, r3, #2
 800566c:	440b      	add	r3, r1
 800566e:	0099      	lsls	r1, r3, #2
 8005670:	440b      	add	r3, r1
 8005672:	fbb0 f3f3 	udiv	r3, r0, r3
 8005676:	3301      	adds	r3, #1
 8005678:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800567c:	2b00      	cmp	r3, #0
 800567e:	bf0c      	ite	eq
 8005680:	2301      	moveq	r3, #1
 8005682:	2300      	movne	r3, #0
 8005684:	b2db      	uxtb	r3, r3
 8005686:	2b00      	cmp	r3, #0
 8005688:	d001      	beq.n	800568e <HAL_I2C_Init+0x196>
 800568a:	2301      	movs	r3, #1
 800568c:	e022      	b.n	80056d4 <HAL_I2C_Init+0x1dc>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d10e      	bne.n	80056b4 <HAL_I2C_Init+0x1bc>
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	1e58      	subs	r0, r3, #1
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6859      	ldr	r1, [r3, #4]
 800569e:	460b      	mov	r3, r1
 80056a0:	005b      	lsls	r3, r3, #1
 80056a2:	440b      	add	r3, r1
 80056a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80056a8:	3301      	adds	r3, #1
 80056aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80056b2:	e00f      	b.n	80056d4 <HAL_I2C_Init+0x1dc>
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	1e58      	subs	r0, r3, #1
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6859      	ldr	r1, [r3, #4]
 80056bc:	460b      	mov	r3, r1
 80056be:	009b      	lsls	r3, r3, #2
 80056c0:	440b      	add	r3, r1
 80056c2:	0099      	lsls	r1, r3, #2
 80056c4:	440b      	add	r3, r1
 80056c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80056ca:	3301      	adds	r3, #1
 80056cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056d0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80056d4:	6879      	ldr	r1, [r7, #4]
 80056d6:	6809      	ldr	r1, [r1, #0]
 80056d8:	4313      	orrs	r3, r2
 80056da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	69da      	ldr	r2, [r3, #28]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6a1b      	ldr	r3, [r3, #32]
 80056ee:	431a      	orrs	r2, r3
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	430a      	orrs	r2, r1
 80056f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005702:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	6911      	ldr	r1, [r2, #16]
 800570a:	687a      	ldr	r2, [r7, #4]
 800570c:	68d2      	ldr	r2, [r2, #12]
 800570e:	4311      	orrs	r1, r2
 8005710:	687a      	ldr	r2, [r7, #4]
 8005712:	6812      	ldr	r2, [r2, #0]
 8005714:	430b      	orrs	r3, r1
 8005716:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	68db      	ldr	r3, [r3, #12]
 800571e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	695a      	ldr	r2, [r3, #20]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	699b      	ldr	r3, [r3, #24]
 800572a:	431a      	orrs	r2, r3
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	430a      	orrs	r2, r1
 8005732:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f042 0201 	orr.w	r2, r2, #1
 8005742:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2200      	movs	r2, #0
 8005748:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2220      	movs	r2, #32
 800574e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2200      	movs	r2, #0
 8005756:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005760:	2300      	movs	r3, #0
}
 8005762:	4618      	mov	r0, r3
 8005764:	3710      	adds	r7, #16
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}
 800576a:	bf00      	nop
 800576c:	000186a0 	.word	0x000186a0
 8005770:	001e847f 	.word	0x001e847f
 8005774:	003d08ff 	.word	0x003d08ff
 8005778:	431bde83 	.word	0x431bde83
 800577c:	10624dd3 	.word	0x10624dd3

08005780 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b086      	sub	sp, #24
 8005784:	af02      	add	r7, sp, #8
 8005786:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d101      	bne.n	8005792 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	e101      	b.n	8005996 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d106      	bne.n	80057b2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2200      	movs	r2, #0
 80057a8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f7fd fa8b 	bl	8002cc8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2203      	movs	r2, #3
 80057b6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80057c0:	d102      	bne.n	80057c8 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2200      	movs	r2, #0
 80057c6:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4618      	mov	r0, r3
 80057ce:	f001 ff73 	bl	80076b8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6818      	ldr	r0, [r3, #0]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	7c1a      	ldrb	r2, [r3, #16]
 80057da:	f88d 2000 	strb.w	r2, [sp]
 80057de:	3304      	adds	r3, #4
 80057e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80057e2:	f001 ff05 	bl	80075f0 <USB_CoreInit>
 80057e6:	4603      	mov	r3, r0
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d005      	beq.n	80057f8 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2202      	movs	r2, #2
 80057f0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80057f4:	2301      	movs	r3, #1
 80057f6:	e0ce      	b.n	8005996 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	2100      	movs	r1, #0
 80057fe:	4618      	mov	r0, r3
 8005800:	f001 ff6b 	bl	80076da <USB_SetCurrentMode>
 8005804:	4603      	mov	r3, r0
 8005806:	2b00      	cmp	r3, #0
 8005808:	d005      	beq.n	8005816 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2202      	movs	r2, #2
 800580e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	e0bf      	b.n	8005996 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005816:	2300      	movs	r3, #0
 8005818:	73fb      	strb	r3, [r7, #15]
 800581a:	e04a      	b.n	80058b2 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800581c:	7bfa      	ldrb	r2, [r7, #15]
 800581e:	6879      	ldr	r1, [r7, #4]
 8005820:	4613      	mov	r3, r2
 8005822:	00db      	lsls	r3, r3, #3
 8005824:	4413      	add	r3, r2
 8005826:	009b      	lsls	r3, r3, #2
 8005828:	440b      	add	r3, r1
 800582a:	3315      	adds	r3, #21
 800582c:	2201      	movs	r2, #1
 800582e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005830:	7bfa      	ldrb	r2, [r7, #15]
 8005832:	6879      	ldr	r1, [r7, #4]
 8005834:	4613      	mov	r3, r2
 8005836:	00db      	lsls	r3, r3, #3
 8005838:	4413      	add	r3, r2
 800583a:	009b      	lsls	r3, r3, #2
 800583c:	440b      	add	r3, r1
 800583e:	3314      	adds	r3, #20
 8005840:	7bfa      	ldrb	r2, [r7, #15]
 8005842:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005844:	7bfa      	ldrb	r2, [r7, #15]
 8005846:	7bfb      	ldrb	r3, [r7, #15]
 8005848:	b298      	uxth	r0, r3
 800584a:	6879      	ldr	r1, [r7, #4]
 800584c:	4613      	mov	r3, r2
 800584e:	00db      	lsls	r3, r3, #3
 8005850:	4413      	add	r3, r2
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	440b      	add	r3, r1
 8005856:	332e      	adds	r3, #46	@ 0x2e
 8005858:	4602      	mov	r2, r0
 800585a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800585c:	7bfa      	ldrb	r2, [r7, #15]
 800585e:	6879      	ldr	r1, [r7, #4]
 8005860:	4613      	mov	r3, r2
 8005862:	00db      	lsls	r3, r3, #3
 8005864:	4413      	add	r3, r2
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	440b      	add	r3, r1
 800586a:	3318      	adds	r3, #24
 800586c:	2200      	movs	r2, #0
 800586e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005870:	7bfa      	ldrb	r2, [r7, #15]
 8005872:	6879      	ldr	r1, [r7, #4]
 8005874:	4613      	mov	r3, r2
 8005876:	00db      	lsls	r3, r3, #3
 8005878:	4413      	add	r3, r2
 800587a:	009b      	lsls	r3, r3, #2
 800587c:	440b      	add	r3, r1
 800587e:	331c      	adds	r3, #28
 8005880:	2200      	movs	r2, #0
 8005882:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005884:	7bfa      	ldrb	r2, [r7, #15]
 8005886:	6879      	ldr	r1, [r7, #4]
 8005888:	4613      	mov	r3, r2
 800588a:	00db      	lsls	r3, r3, #3
 800588c:	4413      	add	r3, r2
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	440b      	add	r3, r1
 8005892:	3320      	adds	r3, #32
 8005894:	2200      	movs	r2, #0
 8005896:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005898:	7bfa      	ldrb	r2, [r7, #15]
 800589a:	6879      	ldr	r1, [r7, #4]
 800589c:	4613      	mov	r3, r2
 800589e:	00db      	lsls	r3, r3, #3
 80058a0:	4413      	add	r3, r2
 80058a2:	009b      	lsls	r3, r3, #2
 80058a4:	440b      	add	r3, r1
 80058a6:	3324      	adds	r3, #36	@ 0x24
 80058a8:	2200      	movs	r2, #0
 80058aa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80058ac:	7bfb      	ldrb	r3, [r7, #15]
 80058ae:	3301      	adds	r3, #1
 80058b0:	73fb      	strb	r3, [r7, #15]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	791b      	ldrb	r3, [r3, #4]
 80058b6:	7bfa      	ldrb	r2, [r7, #15]
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d3af      	bcc.n	800581c <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80058bc:	2300      	movs	r3, #0
 80058be:	73fb      	strb	r3, [r7, #15]
 80058c0:	e044      	b.n	800594c <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80058c2:	7bfa      	ldrb	r2, [r7, #15]
 80058c4:	6879      	ldr	r1, [r7, #4]
 80058c6:	4613      	mov	r3, r2
 80058c8:	00db      	lsls	r3, r3, #3
 80058ca:	4413      	add	r3, r2
 80058cc:	009b      	lsls	r3, r3, #2
 80058ce:	440b      	add	r3, r1
 80058d0:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80058d4:	2200      	movs	r2, #0
 80058d6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80058d8:	7bfa      	ldrb	r2, [r7, #15]
 80058da:	6879      	ldr	r1, [r7, #4]
 80058dc:	4613      	mov	r3, r2
 80058de:	00db      	lsls	r3, r3, #3
 80058e0:	4413      	add	r3, r2
 80058e2:	009b      	lsls	r3, r3, #2
 80058e4:	440b      	add	r3, r1
 80058e6:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80058ea:	7bfa      	ldrb	r2, [r7, #15]
 80058ec:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80058ee:	7bfa      	ldrb	r2, [r7, #15]
 80058f0:	6879      	ldr	r1, [r7, #4]
 80058f2:	4613      	mov	r3, r2
 80058f4:	00db      	lsls	r3, r3, #3
 80058f6:	4413      	add	r3, r2
 80058f8:	009b      	lsls	r3, r3, #2
 80058fa:	440b      	add	r3, r1
 80058fc:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005900:	2200      	movs	r2, #0
 8005902:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005904:	7bfa      	ldrb	r2, [r7, #15]
 8005906:	6879      	ldr	r1, [r7, #4]
 8005908:	4613      	mov	r3, r2
 800590a:	00db      	lsls	r3, r3, #3
 800590c:	4413      	add	r3, r2
 800590e:	009b      	lsls	r3, r3, #2
 8005910:	440b      	add	r3, r1
 8005912:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8005916:	2200      	movs	r2, #0
 8005918:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800591a:	7bfa      	ldrb	r2, [r7, #15]
 800591c:	6879      	ldr	r1, [r7, #4]
 800591e:	4613      	mov	r3, r2
 8005920:	00db      	lsls	r3, r3, #3
 8005922:	4413      	add	r3, r2
 8005924:	009b      	lsls	r3, r3, #2
 8005926:	440b      	add	r3, r1
 8005928:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800592c:	2200      	movs	r2, #0
 800592e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005930:	7bfa      	ldrb	r2, [r7, #15]
 8005932:	6879      	ldr	r1, [r7, #4]
 8005934:	4613      	mov	r3, r2
 8005936:	00db      	lsls	r3, r3, #3
 8005938:	4413      	add	r3, r2
 800593a:	009b      	lsls	r3, r3, #2
 800593c:	440b      	add	r3, r1
 800593e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005942:	2200      	movs	r2, #0
 8005944:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005946:	7bfb      	ldrb	r3, [r7, #15]
 8005948:	3301      	adds	r3, #1
 800594a:	73fb      	strb	r3, [r7, #15]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	791b      	ldrb	r3, [r3, #4]
 8005950:	7bfa      	ldrb	r2, [r7, #15]
 8005952:	429a      	cmp	r2, r3
 8005954:	d3b5      	bcc.n	80058c2 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6818      	ldr	r0, [r3, #0]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	7c1a      	ldrb	r2, [r3, #16]
 800595e:	f88d 2000 	strb.w	r2, [sp]
 8005962:	3304      	adds	r3, #4
 8005964:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005966:	f001 ff05 	bl	8007774 <USB_DevInit>
 800596a:	4603      	mov	r3, r0
 800596c:	2b00      	cmp	r3, #0
 800596e:	d005      	beq.n	800597c <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2202      	movs	r2, #2
 8005974:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	e00c      	b.n	8005996 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2200      	movs	r2, #0
 8005980:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2201      	movs	r2, #1
 8005986:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4618      	mov	r0, r3
 8005990:	f002 f8cd 	bl	8007b2e <USB_DevDisconnect>

  return HAL_OK;
 8005994:	2300      	movs	r3, #0
}
 8005996:	4618      	mov	r0, r3
 8005998:	3710      	adds	r7, #16
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}
	...

080059a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b086      	sub	sp, #24
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d101      	bne.n	80059b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80059ae:	2301      	movs	r3, #1
 80059b0:	e267      	b.n	8005e82 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f003 0301 	and.w	r3, r3, #1
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d075      	beq.n	8005aaa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80059be:	4b88      	ldr	r3, [pc, #544]	@ (8005be0 <HAL_RCC_OscConfig+0x240>)
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	f003 030c 	and.w	r3, r3, #12
 80059c6:	2b04      	cmp	r3, #4
 80059c8:	d00c      	beq.n	80059e4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80059ca:	4b85      	ldr	r3, [pc, #532]	@ (8005be0 <HAL_RCC_OscConfig+0x240>)
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80059d2:	2b08      	cmp	r3, #8
 80059d4:	d112      	bne.n	80059fc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80059d6:	4b82      	ldr	r3, [pc, #520]	@ (8005be0 <HAL_RCC_OscConfig+0x240>)
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80059de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80059e2:	d10b      	bne.n	80059fc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059e4:	4b7e      	ldr	r3, [pc, #504]	@ (8005be0 <HAL_RCC_OscConfig+0x240>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d05b      	beq.n	8005aa8 <HAL_RCC_OscConfig+0x108>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d157      	bne.n	8005aa8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	e242      	b.n	8005e82 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a04:	d106      	bne.n	8005a14 <HAL_RCC_OscConfig+0x74>
 8005a06:	4b76      	ldr	r3, [pc, #472]	@ (8005be0 <HAL_RCC_OscConfig+0x240>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a75      	ldr	r2, [pc, #468]	@ (8005be0 <HAL_RCC_OscConfig+0x240>)
 8005a0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a10:	6013      	str	r3, [r2, #0]
 8005a12:	e01d      	b.n	8005a50 <HAL_RCC_OscConfig+0xb0>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005a1c:	d10c      	bne.n	8005a38 <HAL_RCC_OscConfig+0x98>
 8005a1e:	4b70      	ldr	r3, [pc, #448]	@ (8005be0 <HAL_RCC_OscConfig+0x240>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a6f      	ldr	r2, [pc, #444]	@ (8005be0 <HAL_RCC_OscConfig+0x240>)
 8005a24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005a28:	6013      	str	r3, [r2, #0]
 8005a2a:	4b6d      	ldr	r3, [pc, #436]	@ (8005be0 <HAL_RCC_OscConfig+0x240>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a6c      	ldr	r2, [pc, #432]	@ (8005be0 <HAL_RCC_OscConfig+0x240>)
 8005a30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a34:	6013      	str	r3, [r2, #0]
 8005a36:	e00b      	b.n	8005a50 <HAL_RCC_OscConfig+0xb0>
 8005a38:	4b69      	ldr	r3, [pc, #420]	@ (8005be0 <HAL_RCC_OscConfig+0x240>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a68      	ldr	r2, [pc, #416]	@ (8005be0 <HAL_RCC_OscConfig+0x240>)
 8005a3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a42:	6013      	str	r3, [r2, #0]
 8005a44:	4b66      	ldr	r3, [pc, #408]	@ (8005be0 <HAL_RCC_OscConfig+0x240>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a65      	ldr	r2, [pc, #404]	@ (8005be0 <HAL_RCC_OscConfig+0x240>)
 8005a4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005a4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d013      	beq.n	8005a80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a58:	f7fd fc2e 	bl	80032b8 <HAL_GetTick>
 8005a5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a5e:	e008      	b.n	8005a72 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a60:	f7fd fc2a 	bl	80032b8 <HAL_GetTick>
 8005a64:	4602      	mov	r2, r0
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	1ad3      	subs	r3, r2, r3
 8005a6a:	2b64      	cmp	r3, #100	@ 0x64
 8005a6c:	d901      	bls.n	8005a72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005a6e:	2303      	movs	r3, #3
 8005a70:	e207      	b.n	8005e82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a72:	4b5b      	ldr	r3, [pc, #364]	@ (8005be0 <HAL_RCC_OscConfig+0x240>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d0f0      	beq.n	8005a60 <HAL_RCC_OscConfig+0xc0>
 8005a7e:	e014      	b.n	8005aaa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a80:	f7fd fc1a 	bl	80032b8 <HAL_GetTick>
 8005a84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a86:	e008      	b.n	8005a9a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a88:	f7fd fc16 	bl	80032b8 <HAL_GetTick>
 8005a8c:	4602      	mov	r2, r0
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	1ad3      	subs	r3, r2, r3
 8005a92:	2b64      	cmp	r3, #100	@ 0x64
 8005a94:	d901      	bls.n	8005a9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005a96:	2303      	movs	r3, #3
 8005a98:	e1f3      	b.n	8005e82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a9a:	4b51      	ldr	r3, [pc, #324]	@ (8005be0 <HAL_RCC_OscConfig+0x240>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d1f0      	bne.n	8005a88 <HAL_RCC_OscConfig+0xe8>
 8005aa6:	e000      	b.n	8005aaa <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005aa8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f003 0302 	and.w	r3, r3, #2
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d063      	beq.n	8005b7e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005ab6:	4b4a      	ldr	r3, [pc, #296]	@ (8005be0 <HAL_RCC_OscConfig+0x240>)
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	f003 030c 	and.w	r3, r3, #12
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d00b      	beq.n	8005ada <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005ac2:	4b47      	ldr	r3, [pc, #284]	@ (8005be0 <HAL_RCC_OscConfig+0x240>)
 8005ac4:	689b      	ldr	r3, [r3, #8]
 8005ac6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005aca:	2b08      	cmp	r3, #8
 8005acc:	d11c      	bne.n	8005b08 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005ace:	4b44      	ldr	r3, [pc, #272]	@ (8005be0 <HAL_RCC_OscConfig+0x240>)
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d116      	bne.n	8005b08 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ada:	4b41      	ldr	r3, [pc, #260]	@ (8005be0 <HAL_RCC_OscConfig+0x240>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f003 0302 	and.w	r3, r3, #2
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d005      	beq.n	8005af2 <HAL_RCC_OscConfig+0x152>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	68db      	ldr	r3, [r3, #12]
 8005aea:	2b01      	cmp	r3, #1
 8005aec:	d001      	beq.n	8005af2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	e1c7      	b.n	8005e82 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005af2:	4b3b      	ldr	r3, [pc, #236]	@ (8005be0 <HAL_RCC_OscConfig+0x240>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	691b      	ldr	r3, [r3, #16]
 8005afe:	00db      	lsls	r3, r3, #3
 8005b00:	4937      	ldr	r1, [pc, #220]	@ (8005be0 <HAL_RCC_OscConfig+0x240>)
 8005b02:	4313      	orrs	r3, r2
 8005b04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b06:	e03a      	b.n	8005b7e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d020      	beq.n	8005b52 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b10:	4b34      	ldr	r3, [pc, #208]	@ (8005be4 <HAL_RCC_OscConfig+0x244>)
 8005b12:	2201      	movs	r2, #1
 8005b14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b16:	f7fd fbcf 	bl	80032b8 <HAL_GetTick>
 8005b1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b1c:	e008      	b.n	8005b30 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b1e:	f7fd fbcb 	bl	80032b8 <HAL_GetTick>
 8005b22:	4602      	mov	r2, r0
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	1ad3      	subs	r3, r2, r3
 8005b28:	2b02      	cmp	r3, #2
 8005b2a:	d901      	bls.n	8005b30 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005b2c:	2303      	movs	r3, #3
 8005b2e:	e1a8      	b.n	8005e82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b30:	4b2b      	ldr	r3, [pc, #172]	@ (8005be0 <HAL_RCC_OscConfig+0x240>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f003 0302 	and.w	r3, r3, #2
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d0f0      	beq.n	8005b1e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b3c:	4b28      	ldr	r3, [pc, #160]	@ (8005be0 <HAL_RCC_OscConfig+0x240>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	691b      	ldr	r3, [r3, #16]
 8005b48:	00db      	lsls	r3, r3, #3
 8005b4a:	4925      	ldr	r1, [pc, #148]	@ (8005be0 <HAL_RCC_OscConfig+0x240>)
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	600b      	str	r3, [r1, #0]
 8005b50:	e015      	b.n	8005b7e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b52:	4b24      	ldr	r3, [pc, #144]	@ (8005be4 <HAL_RCC_OscConfig+0x244>)
 8005b54:	2200      	movs	r2, #0
 8005b56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b58:	f7fd fbae 	bl	80032b8 <HAL_GetTick>
 8005b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b5e:	e008      	b.n	8005b72 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b60:	f7fd fbaa 	bl	80032b8 <HAL_GetTick>
 8005b64:	4602      	mov	r2, r0
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	1ad3      	subs	r3, r2, r3
 8005b6a:	2b02      	cmp	r3, #2
 8005b6c:	d901      	bls.n	8005b72 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005b6e:	2303      	movs	r3, #3
 8005b70:	e187      	b.n	8005e82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b72:	4b1b      	ldr	r3, [pc, #108]	@ (8005be0 <HAL_RCC_OscConfig+0x240>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f003 0302 	and.w	r3, r3, #2
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d1f0      	bne.n	8005b60 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f003 0308 	and.w	r3, r3, #8
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d036      	beq.n	8005bf8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	695b      	ldr	r3, [r3, #20]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d016      	beq.n	8005bc0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b92:	4b15      	ldr	r3, [pc, #84]	@ (8005be8 <HAL_RCC_OscConfig+0x248>)
 8005b94:	2201      	movs	r2, #1
 8005b96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b98:	f7fd fb8e 	bl	80032b8 <HAL_GetTick>
 8005b9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b9e:	e008      	b.n	8005bb2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ba0:	f7fd fb8a 	bl	80032b8 <HAL_GetTick>
 8005ba4:	4602      	mov	r2, r0
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	1ad3      	subs	r3, r2, r3
 8005baa:	2b02      	cmp	r3, #2
 8005bac:	d901      	bls.n	8005bb2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005bae:	2303      	movs	r3, #3
 8005bb0:	e167      	b.n	8005e82 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005bb2:	4b0b      	ldr	r3, [pc, #44]	@ (8005be0 <HAL_RCC_OscConfig+0x240>)
 8005bb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005bb6:	f003 0302 	and.w	r3, r3, #2
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d0f0      	beq.n	8005ba0 <HAL_RCC_OscConfig+0x200>
 8005bbe:	e01b      	b.n	8005bf8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005bc0:	4b09      	ldr	r3, [pc, #36]	@ (8005be8 <HAL_RCC_OscConfig+0x248>)
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005bc6:	f7fd fb77 	bl	80032b8 <HAL_GetTick>
 8005bca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005bcc:	e00e      	b.n	8005bec <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005bce:	f7fd fb73 	bl	80032b8 <HAL_GetTick>
 8005bd2:	4602      	mov	r2, r0
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	1ad3      	subs	r3, r2, r3
 8005bd8:	2b02      	cmp	r3, #2
 8005bda:	d907      	bls.n	8005bec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005bdc:	2303      	movs	r3, #3
 8005bde:	e150      	b.n	8005e82 <HAL_RCC_OscConfig+0x4e2>
 8005be0:	40023800 	.word	0x40023800
 8005be4:	42470000 	.word	0x42470000
 8005be8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005bec:	4b88      	ldr	r3, [pc, #544]	@ (8005e10 <HAL_RCC_OscConfig+0x470>)
 8005bee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005bf0:	f003 0302 	and.w	r3, r3, #2
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d1ea      	bne.n	8005bce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f003 0304 	and.w	r3, r3, #4
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	f000 8097 	beq.w	8005d34 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c06:	2300      	movs	r3, #0
 8005c08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c0a:	4b81      	ldr	r3, [pc, #516]	@ (8005e10 <HAL_RCC_OscConfig+0x470>)
 8005c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d10f      	bne.n	8005c36 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c16:	2300      	movs	r3, #0
 8005c18:	60bb      	str	r3, [r7, #8]
 8005c1a:	4b7d      	ldr	r3, [pc, #500]	@ (8005e10 <HAL_RCC_OscConfig+0x470>)
 8005c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c1e:	4a7c      	ldr	r2, [pc, #496]	@ (8005e10 <HAL_RCC_OscConfig+0x470>)
 8005c20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c24:	6413      	str	r3, [r2, #64]	@ 0x40
 8005c26:	4b7a      	ldr	r3, [pc, #488]	@ (8005e10 <HAL_RCC_OscConfig+0x470>)
 8005c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c2e:	60bb      	str	r3, [r7, #8]
 8005c30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c32:	2301      	movs	r3, #1
 8005c34:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c36:	4b77      	ldr	r3, [pc, #476]	@ (8005e14 <HAL_RCC_OscConfig+0x474>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d118      	bne.n	8005c74 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c42:	4b74      	ldr	r3, [pc, #464]	@ (8005e14 <HAL_RCC_OscConfig+0x474>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a73      	ldr	r2, [pc, #460]	@ (8005e14 <HAL_RCC_OscConfig+0x474>)
 8005c48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c4e:	f7fd fb33 	bl	80032b8 <HAL_GetTick>
 8005c52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c54:	e008      	b.n	8005c68 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c56:	f7fd fb2f 	bl	80032b8 <HAL_GetTick>
 8005c5a:	4602      	mov	r2, r0
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	1ad3      	subs	r3, r2, r3
 8005c60:	2b02      	cmp	r3, #2
 8005c62:	d901      	bls.n	8005c68 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005c64:	2303      	movs	r3, #3
 8005c66:	e10c      	b.n	8005e82 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c68:	4b6a      	ldr	r3, [pc, #424]	@ (8005e14 <HAL_RCC_OscConfig+0x474>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d0f0      	beq.n	8005c56 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	d106      	bne.n	8005c8a <HAL_RCC_OscConfig+0x2ea>
 8005c7c:	4b64      	ldr	r3, [pc, #400]	@ (8005e10 <HAL_RCC_OscConfig+0x470>)
 8005c7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c80:	4a63      	ldr	r2, [pc, #396]	@ (8005e10 <HAL_RCC_OscConfig+0x470>)
 8005c82:	f043 0301 	orr.w	r3, r3, #1
 8005c86:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c88:	e01c      	b.n	8005cc4 <HAL_RCC_OscConfig+0x324>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	689b      	ldr	r3, [r3, #8]
 8005c8e:	2b05      	cmp	r3, #5
 8005c90:	d10c      	bne.n	8005cac <HAL_RCC_OscConfig+0x30c>
 8005c92:	4b5f      	ldr	r3, [pc, #380]	@ (8005e10 <HAL_RCC_OscConfig+0x470>)
 8005c94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c96:	4a5e      	ldr	r2, [pc, #376]	@ (8005e10 <HAL_RCC_OscConfig+0x470>)
 8005c98:	f043 0304 	orr.w	r3, r3, #4
 8005c9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c9e:	4b5c      	ldr	r3, [pc, #368]	@ (8005e10 <HAL_RCC_OscConfig+0x470>)
 8005ca0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ca2:	4a5b      	ldr	r2, [pc, #364]	@ (8005e10 <HAL_RCC_OscConfig+0x470>)
 8005ca4:	f043 0301 	orr.w	r3, r3, #1
 8005ca8:	6713      	str	r3, [r2, #112]	@ 0x70
 8005caa:	e00b      	b.n	8005cc4 <HAL_RCC_OscConfig+0x324>
 8005cac:	4b58      	ldr	r3, [pc, #352]	@ (8005e10 <HAL_RCC_OscConfig+0x470>)
 8005cae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cb0:	4a57      	ldr	r2, [pc, #348]	@ (8005e10 <HAL_RCC_OscConfig+0x470>)
 8005cb2:	f023 0301 	bic.w	r3, r3, #1
 8005cb6:	6713      	str	r3, [r2, #112]	@ 0x70
 8005cb8:	4b55      	ldr	r3, [pc, #340]	@ (8005e10 <HAL_RCC_OscConfig+0x470>)
 8005cba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cbc:	4a54      	ldr	r2, [pc, #336]	@ (8005e10 <HAL_RCC_OscConfig+0x470>)
 8005cbe:	f023 0304 	bic.w	r3, r3, #4
 8005cc2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	689b      	ldr	r3, [r3, #8]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d015      	beq.n	8005cf8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ccc:	f7fd faf4 	bl	80032b8 <HAL_GetTick>
 8005cd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cd2:	e00a      	b.n	8005cea <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cd4:	f7fd faf0 	bl	80032b8 <HAL_GetTick>
 8005cd8:	4602      	mov	r2, r0
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	1ad3      	subs	r3, r2, r3
 8005cde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d901      	bls.n	8005cea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005ce6:	2303      	movs	r3, #3
 8005ce8:	e0cb      	b.n	8005e82 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cea:	4b49      	ldr	r3, [pc, #292]	@ (8005e10 <HAL_RCC_OscConfig+0x470>)
 8005cec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cee:	f003 0302 	and.w	r3, r3, #2
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d0ee      	beq.n	8005cd4 <HAL_RCC_OscConfig+0x334>
 8005cf6:	e014      	b.n	8005d22 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005cf8:	f7fd fade 	bl	80032b8 <HAL_GetTick>
 8005cfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005cfe:	e00a      	b.n	8005d16 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d00:	f7fd fada 	bl	80032b8 <HAL_GetTick>
 8005d04:	4602      	mov	r2, r0
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	1ad3      	subs	r3, r2, r3
 8005d0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d901      	bls.n	8005d16 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005d12:	2303      	movs	r3, #3
 8005d14:	e0b5      	b.n	8005e82 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d16:	4b3e      	ldr	r3, [pc, #248]	@ (8005e10 <HAL_RCC_OscConfig+0x470>)
 8005d18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d1a:	f003 0302 	and.w	r3, r3, #2
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d1ee      	bne.n	8005d00 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005d22:	7dfb      	ldrb	r3, [r7, #23]
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	d105      	bne.n	8005d34 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d28:	4b39      	ldr	r3, [pc, #228]	@ (8005e10 <HAL_RCC_OscConfig+0x470>)
 8005d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d2c:	4a38      	ldr	r2, [pc, #224]	@ (8005e10 <HAL_RCC_OscConfig+0x470>)
 8005d2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005d32:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	699b      	ldr	r3, [r3, #24]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	f000 80a1 	beq.w	8005e80 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005d3e:	4b34      	ldr	r3, [pc, #208]	@ (8005e10 <HAL_RCC_OscConfig+0x470>)
 8005d40:	689b      	ldr	r3, [r3, #8]
 8005d42:	f003 030c 	and.w	r3, r3, #12
 8005d46:	2b08      	cmp	r3, #8
 8005d48:	d05c      	beq.n	8005e04 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	699b      	ldr	r3, [r3, #24]
 8005d4e:	2b02      	cmp	r3, #2
 8005d50:	d141      	bne.n	8005dd6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d52:	4b31      	ldr	r3, [pc, #196]	@ (8005e18 <HAL_RCC_OscConfig+0x478>)
 8005d54:	2200      	movs	r2, #0
 8005d56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d58:	f7fd faae 	bl	80032b8 <HAL_GetTick>
 8005d5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d5e:	e008      	b.n	8005d72 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d60:	f7fd faaa 	bl	80032b8 <HAL_GetTick>
 8005d64:	4602      	mov	r2, r0
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	1ad3      	subs	r3, r2, r3
 8005d6a:	2b02      	cmp	r3, #2
 8005d6c:	d901      	bls.n	8005d72 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005d6e:	2303      	movs	r3, #3
 8005d70:	e087      	b.n	8005e82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d72:	4b27      	ldr	r3, [pc, #156]	@ (8005e10 <HAL_RCC_OscConfig+0x470>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d1f0      	bne.n	8005d60 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	69da      	ldr	r2, [r3, #28]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6a1b      	ldr	r3, [r3, #32]
 8005d86:	431a      	orrs	r2, r3
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d8c:	019b      	lsls	r3, r3, #6
 8005d8e:	431a      	orrs	r2, r3
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d94:	085b      	lsrs	r3, r3, #1
 8005d96:	3b01      	subs	r3, #1
 8005d98:	041b      	lsls	r3, r3, #16
 8005d9a:	431a      	orrs	r2, r3
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005da0:	061b      	lsls	r3, r3, #24
 8005da2:	491b      	ldr	r1, [pc, #108]	@ (8005e10 <HAL_RCC_OscConfig+0x470>)
 8005da4:	4313      	orrs	r3, r2
 8005da6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005da8:	4b1b      	ldr	r3, [pc, #108]	@ (8005e18 <HAL_RCC_OscConfig+0x478>)
 8005daa:	2201      	movs	r2, #1
 8005dac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dae:	f7fd fa83 	bl	80032b8 <HAL_GetTick>
 8005db2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005db4:	e008      	b.n	8005dc8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005db6:	f7fd fa7f 	bl	80032b8 <HAL_GetTick>
 8005dba:	4602      	mov	r2, r0
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	1ad3      	subs	r3, r2, r3
 8005dc0:	2b02      	cmp	r3, #2
 8005dc2:	d901      	bls.n	8005dc8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005dc4:	2303      	movs	r3, #3
 8005dc6:	e05c      	b.n	8005e82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005dc8:	4b11      	ldr	r3, [pc, #68]	@ (8005e10 <HAL_RCC_OscConfig+0x470>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d0f0      	beq.n	8005db6 <HAL_RCC_OscConfig+0x416>
 8005dd4:	e054      	b.n	8005e80 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005dd6:	4b10      	ldr	r3, [pc, #64]	@ (8005e18 <HAL_RCC_OscConfig+0x478>)
 8005dd8:	2200      	movs	r2, #0
 8005dda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ddc:	f7fd fa6c 	bl	80032b8 <HAL_GetTick>
 8005de0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005de2:	e008      	b.n	8005df6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005de4:	f7fd fa68 	bl	80032b8 <HAL_GetTick>
 8005de8:	4602      	mov	r2, r0
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	1ad3      	subs	r3, r2, r3
 8005dee:	2b02      	cmp	r3, #2
 8005df0:	d901      	bls.n	8005df6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005df2:	2303      	movs	r3, #3
 8005df4:	e045      	b.n	8005e82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005df6:	4b06      	ldr	r3, [pc, #24]	@ (8005e10 <HAL_RCC_OscConfig+0x470>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d1f0      	bne.n	8005de4 <HAL_RCC_OscConfig+0x444>
 8005e02:	e03d      	b.n	8005e80 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	699b      	ldr	r3, [r3, #24]
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d107      	bne.n	8005e1c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	e038      	b.n	8005e82 <HAL_RCC_OscConfig+0x4e2>
 8005e10:	40023800 	.word	0x40023800
 8005e14:	40007000 	.word	0x40007000
 8005e18:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005e1c:	4b1b      	ldr	r3, [pc, #108]	@ (8005e8c <HAL_RCC_OscConfig+0x4ec>)
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	699b      	ldr	r3, [r3, #24]
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	d028      	beq.n	8005e7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e34:	429a      	cmp	r2, r3
 8005e36:	d121      	bne.n	8005e7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e42:	429a      	cmp	r2, r3
 8005e44:	d11a      	bne.n	8005e7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e46:	68fa      	ldr	r2, [r7, #12]
 8005e48:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005e4c:	4013      	ands	r3, r2
 8005e4e:	687a      	ldr	r2, [r7, #4]
 8005e50:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005e52:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d111      	bne.n	8005e7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e62:	085b      	lsrs	r3, r3, #1
 8005e64:	3b01      	subs	r3, #1
 8005e66:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e68:	429a      	cmp	r2, r3
 8005e6a:	d107      	bne.n	8005e7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e76:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	d001      	beq.n	8005e80 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	e000      	b.n	8005e82 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005e80:	2300      	movs	r3, #0
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3718      	adds	r7, #24
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}
 8005e8a:	bf00      	nop
 8005e8c:	40023800 	.word	0x40023800

08005e90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b084      	sub	sp, #16
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
 8005e98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d101      	bne.n	8005ea4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	e0cc      	b.n	800603e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005ea4:	4b68      	ldr	r3, [pc, #416]	@ (8006048 <HAL_RCC_ClockConfig+0x1b8>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f003 0307 	and.w	r3, r3, #7
 8005eac:	683a      	ldr	r2, [r7, #0]
 8005eae:	429a      	cmp	r2, r3
 8005eb0:	d90c      	bls.n	8005ecc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005eb2:	4b65      	ldr	r3, [pc, #404]	@ (8006048 <HAL_RCC_ClockConfig+0x1b8>)
 8005eb4:	683a      	ldr	r2, [r7, #0]
 8005eb6:	b2d2      	uxtb	r2, r2
 8005eb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005eba:	4b63      	ldr	r3, [pc, #396]	@ (8006048 <HAL_RCC_ClockConfig+0x1b8>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f003 0307 	and.w	r3, r3, #7
 8005ec2:	683a      	ldr	r2, [r7, #0]
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	d001      	beq.n	8005ecc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	e0b8      	b.n	800603e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f003 0302 	and.w	r3, r3, #2
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d020      	beq.n	8005f1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f003 0304 	and.w	r3, r3, #4
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d005      	beq.n	8005ef0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005ee4:	4b59      	ldr	r3, [pc, #356]	@ (800604c <HAL_RCC_ClockConfig+0x1bc>)
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	4a58      	ldr	r2, [pc, #352]	@ (800604c <HAL_RCC_ClockConfig+0x1bc>)
 8005eea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005eee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f003 0308 	and.w	r3, r3, #8
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d005      	beq.n	8005f08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005efc:	4b53      	ldr	r3, [pc, #332]	@ (800604c <HAL_RCC_ClockConfig+0x1bc>)
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	4a52      	ldr	r2, [pc, #328]	@ (800604c <HAL_RCC_ClockConfig+0x1bc>)
 8005f02:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005f06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f08:	4b50      	ldr	r3, [pc, #320]	@ (800604c <HAL_RCC_ClockConfig+0x1bc>)
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	689b      	ldr	r3, [r3, #8]
 8005f14:	494d      	ldr	r1, [pc, #308]	@ (800604c <HAL_RCC_ClockConfig+0x1bc>)
 8005f16:	4313      	orrs	r3, r2
 8005f18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f003 0301 	and.w	r3, r3, #1
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d044      	beq.n	8005fb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d107      	bne.n	8005f3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f2e:	4b47      	ldr	r3, [pc, #284]	@ (800604c <HAL_RCC_ClockConfig+0x1bc>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d119      	bne.n	8005f6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e07f      	b.n	800603e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	2b02      	cmp	r3, #2
 8005f44:	d003      	beq.n	8005f4e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f4a:	2b03      	cmp	r3, #3
 8005f4c:	d107      	bne.n	8005f5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f4e:	4b3f      	ldr	r3, [pc, #252]	@ (800604c <HAL_RCC_ClockConfig+0x1bc>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d109      	bne.n	8005f6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	e06f      	b.n	800603e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f5e:	4b3b      	ldr	r3, [pc, #236]	@ (800604c <HAL_RCC_ClockConfig+0x1bc>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f003 0302 	and.w	r3, r3, #2
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d101      	bne.n	8005f6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	e067      	b.n	800603e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005f6e:	4b37      	ldr	r3, [pc, #220]	@ (800604c <HAL_RCC_ClockConfig+0x1bc>)
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	f023 0203 	bic.w	r2, r3, #3
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	4934      	ldr	r1, [pc, #208]	@ (800604c <HAL_RCC_ClockConfig+0x1bc>)
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005f80:	f7fd f99a 	bl	80032b8 <HAL_GetTick>
 8005f84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f86:	e00a      	b.n	8005f9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f88:	f7fd f996 	bl	80032b8 <HAL_GetTick>
 8005f8c:	4602      	mov	r2, r0
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	1ad3      	subs	r3, r2, r3
 8005f92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d901      	bls.n	8005f9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005f9a:	2303      	movs	r3, #3
 8005f9c:	e04f      	b.n	800603e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f9e:	4b2b      	ldr	r3, [pc, #172]	@ (800604c <HAL_RCC_ClockConfig+0x1bc>)
 8005fa0:	689b      	ldr	r3, [r3, #8]
 8005fa2:	f003 020c 	and.w	r2, r3, #12
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	009b      	lsls	r3, r3, #2
 8005fac:	429a      	cmp	r2, r3
 8005fae:	d1eb      	bne.n	8005f88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005fb0:	4b25      	ldr	r3, [pc, #148]	@ (8006048 <HAL_RCC_ClockConfig+0x1b8>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f003 0307 	and.w	r3, r3, #7
 8005fb8:	683a      	ldr	r2, [r7, #0]
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	d20c      	bcs.n	8005fd8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fbe:	4b22      	ldr	r3, [pc, #136]	@ (8006048 <HAL_RCC_ClockConfig+0x1b8>)
 8005fc0:	683a      	ldr	r2, [r7, #0]
 8005fc2:	b2d2      	uxtb	r2, r2
 8005fc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fc6:	4b20      	ldr	r3, [pc, #128]	@ (8006048 <HAL_RCC_ClockConfig+0x1b8>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f003 0307 	and.w	r3, r3, #7
 8005fce:	683a      	ldr	r2, [r7, #0]
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	d001      	beq.n	8005fd8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	e032      	b.n	800603e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f003 0304 	and.w	r3, r3, #4
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d008      	beq.n	8005ff6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005fe4:	4b19      	ldr	r3, [pc, #100]	@ (800604c <HAL_RCC_ClockConfig+0x1bc>)
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	68db      	ldr	r3, [r3, #12]
 8005ff0:	4916      	ldr	r1, [pc, #88]	@ (800604c <HAL_RCC_ClockConfig+0x1bc>)
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f003 0308 	and.w	r3, r3, #8
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d009      	beq.n	8006016 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006002:	4b12      	ldr	r3, [pc, #72]	@ (800604c <HAL_RCC_ClockConfig+0x1bc>)
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	691b      	ldr	r3, [r3, #16]
 800600e:	00db      	lsls	r3, r3, #3
 8006010:	490e      	ldr	r1, [pc, #56]	@ (800604c <HAL_RCC_ClockConfig+0x1bc>)
 8006012:	4313      	orrs	r3, r2
 8006014:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006016:	f000 f821 	bl	800605c <HAL_RCC_GetSysClockFreq>
 800601a:	4602      	mov	r2, r0
 800601c:	4b0b      	ldr	r3, [pc, #44]	@ (800604c <HAL_RCC_ClockConfig+0x1bc>)
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	091b      	lsrs	r3, r3, #4
 8006022:	f003 030f 	and.w	r3, r3, #15
 8006026:	490a      	ldr	r1, [pc, #40]	@ (8006050 <HAL_RCC_ClockConfig+0x1c0>)
 8006028:	5ccb      	ldrb	r3, [r1, r3]
 800602a:	fa22 f303 	lsr.w	r3, r2, r3
 800602e:	4a09      	ldr	r2, [pc, #36]	@ (8006054 <HAL_RCC_ClockConfig+0x1c4>)
 8006030:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006032:	4b09      	ldr	r3, [pc, #36]	@ (8006058 <HAL_RCC_ClockConfig+0x1c8>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4618      	mov	r0, r3
 8006038:	f7fd f8fa 	bl	8003230 <HAL_InitTick>

  return HAL_OK;
 800603c:	2300      	movs	r3, #0
}
 800603e:	4618      	mov	r0, r3
 8006040:	3710      	adds	r7, #16
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}
 8006046:	bf00      	nop
 8006048:	40023c00 	.word	0x40023c00
 800604c:	40023800 	.word	0x40023800
 8006050:	08016848 	.word	0x08016848
 8006054:	20000048 	.word	0x20000048
 8006058:	2000004c 	.word	0x2000004c

0800605c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800605c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006060:	b094      	sub	sp, #80	@ 0x50
 8006062:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006064:	2300      	movs	r3, #0
 8006066:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006068:	2300      	movs	r3, #0
 800606a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800606c:	2300      	movs	r3, #0
 800606e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006070:	2300      	movs	r3, #0
 8006072:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006074:	4b79      	ldr	r3, [pc, #484]	@ (800625c <HAL_RCC_GetSysClockFreq+0x200>)
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	f003 030c 	and.w	r3, r3, #12
 800607c:	2b08      	cmp	r3, #8
 800607e:	d00d      	beq.n	800609c <HAL_RCC_GetSysClockFreq+0x40>
 8006080:	2b08      	cmp	r3, #8
 8006082:	f200 80e1 	bhi.w	8006248 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006086:	2b00      	cmp	r3, #0
 8006088:	d002      	beq.n	8006090 <HAL_RCC_GetSysClockFreq+0x34>
 800608a:	2b04      	cmp	r3, #4
 800608c:	d003      	beq.n	8006096 <HAL_RCC_GetSysClockFreq+0x3a>
 800608e:	e0db      	b.n	8006248 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006090:	4b73      	ldr	r3, [pc, #460]	@ (8006260 <HAL_RCC_GetSysClockFreq+0x204>)
 8006092:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006094:	e0db      	b.n	800624e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006096:	4b73      	ldr	r3, [pc, #460]	@ (8006264 <HAL_RCC_GetSysClockFreq+0x208>)
 8006098:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800609a:	e0d8      	b.n	800624e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800609c:	4b6f      	ldr	r3, [pc, #444]	@ (800625c <HAL_RCC_GetSysClockFreq+0x200>)
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80060a4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80060a6:	4b6d      	ldr	r3, [pc, #436]	@ (800625c <HAL_RCC_GetSysClockFreq+0x200>)
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d063      	beq.n	800617a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060b2:	4b6a      	ldr	r3, [pc, #424]	@ (800625c <HAL_RCC_GetSysClockFreq+0x200>)
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	099b      	lsrs	r3, r3, #6
 80060b8:	2200      	movs	r2, #0
 80060ba:	63bb      	str	r3, [r7, #56]	@ 0x38
 80060bc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80060be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80060c6:	2300      	movs	r3, #0
 80060c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80060ca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80060ce:	4622      	mov	r2, r4
 80060d0:	462b      	mov	r3, r5
 80060d2:	f04f 0000 	mov.w	r0, #0
 80060d6:	f04f 0100 	mov.w	r1, #0
 80060da:	0159      	lsls	r1, r3, #5
 80060dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80060e0:	0150      	lsls	r0, r2, #5
 80060e2:	4602      	mov	r2, r0
 80060e4:	460b      	mov	r3, r1
 80060e6:	4621      	mov	r1, r4
 80060e8:	1a51      	subs	r1, r2, r1
 80060ea:	6139      	str	r1, [r7, #16]
 80060ec:	4629      	mov	r1, r5
 80060ee:	eb63 0301 	sbc.w	r3, r3, r1
 80060f2:	617b      	str	r3, [r7, #20]
 80060f4:	f04f 0200 	mov.w	r2, #0
 80060f8:	f04f 0300 	mov.w	r3, #0
 80060fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006100:	4659      	mov	r1, fp
 8006102:	018b      	lsls	r3, r1, #6
 8006104:	4651      	mov	r1, sl
 8006106:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800610a:	4651      	mov	r1, sl
 800610c:	018a      	lsls	r2, r1, #6
 800610e:	4651      	mov	r1, sl
 8006110:	ebb2 0801 	subs.w	r8, r2, r1
 8006114:	4659      	mov	r1, fp
 8006116:	eb63 0901 	sbc.w	r9, r3, r1
 800611a:	f04f 0200 	mov.w	r2, #0
 800611e:	f04f 0300 	mov.w	r3, #0
 8006122:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006126:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800612a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800612e:	4690      	mov	r8, r2
 8006130:	4699      	mov	r9, r3
 8006132:	4623      	mov	r3, r4
 8006134:	eb18 0303 	adds.w	r3, r8, r3
 8006138:	60bb      	str	r3, [r7, #8]
 800613a:	462b      	mov	r3, r5
 800613c:	eb49 0303 	adc.w	r3, r9, r3
 8006140:	60fb      	str	r3, [r7, #12]
 8006142:	f04f 0200 	mov.w	r2, #0
 8006146:	f04f 0300 	mov.w	r3, #0
 800614a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800614e:	4629      	mov	r1, r5
 8006150:	024b      	lsls	r3, r1, #9
 8006152:	4621      	mov	r1, r4
 8006154:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006158:	4621      	mov	r1, r4
 800615a:	024a      	lsls	r2, r1, #9
 800615c:	4610      	mov	r0, r2
 800615e:	4619      	mov	r1, r3
 8006160:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006162:	2200      	movs	r2, #0
 8006164:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006166:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006168:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800616c:	f7fa fd46 	bl	8000bfc <__aeabi_uldivmod>
 8006170:	4602      	mov	r2, r0
 8006172:	460b      	mov	r3, r1
 8006174:	4613      	mov	r3, r2
 8006176:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006178:	e058      	b.n	800622c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800617a:	4b38      	ldr	r3, [pc, #224]	@ (800625c <HAL_RCC_GetSysClockFreq+0x200>)
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	099b      	lsrs	r3, r3, #6
 8006180:	2200      	movs	r2, #0
 8006182:	4618      	mov	r0, r3
 8006184:	4611      	mov	r1, r2
 8006186:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800618a:	623b      	str	r3, [r7, #32]
 800618c:	2300      	movs	r3, #0
 800618e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006190:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006194:	4642      	mov	r2, r8
 8006196:	464b      	mov	r3, r9
 8006198:	f04f 0000 	mov.w	r0, #0
 800619c:	f04f 0100 	mov.w	r1, #0
 80061a0:	0159      	lsls	r1, r3, #5
 80061a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80061a6:	0150      	lsls	r0, r2, #5
 80061a8:	4602      	mov	r2, r0
 80061aa:	460b      	mov	r3, r1
 80061ac:	4641      	mov	r1, r8
 80061ae:	ebb2 0a01 	subs.w	sl, r2, r1
 80061b2:	4649      	mov	r1, r9
 80061b4:	eb63 0b01 	sbc.w	fp, r3, r1
 80061b8:	f04f 0200 	mov.w	r2, #0
 80061bc:	f04f 0300 	mov.w	r3, #0
 80061c0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80061c4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80061c8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80061cc:	ebb2 040a 	subs.w	r4, r2, sl
 80061d0:	eb63 050b 	sbc.w	r5, r3, fp
 80061d4:	f04f 0200 	mov.w	r2, #0
 80061d8:	f04f 0300 	mov.w	r3, #0
 80061dc:	00eb      	lsls	r3, r5, #3
 80061de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80061e2:	00e2      	lsls	r2, r4, #3
 80061e4:	4614      	mov	r4, r2
 80061e6:	461d      	mov	r5, r3
 80061e8:	4643      	mov	r3, r8
 80061ea:	18e3      	adds	r3, r4, r3
 80061ec:	603b      	str	r3, [r7, #0]
 80061ee:	464b      	mov	r3, r9
 80061f0:	eb45 0303 	adc.w	r3, r5, r3
 80061f4:	607b      	str	r3, [r7, #4]
 80061f6:	f04f 0200 	mov.w	r2, #0
 80061fa:	f04f 0300 	mov.w	r3, #0
 80061fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006202:	4629      	mov	r1, r5
 8006204:	028b      	lsls	r3, r1, #10
 8006206:	4621      	mov	r1, r4
 8006208:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800620c:	4621      	mov	r1, r4
 800620e:	028a      	lsls	r2, r1, #10
 8006210:	4610      	mov	r0, r2
 8006212:	4619      	mov	r1, r3
 8006214:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006216:	2200      	movs	r2, #0
 8006218:	61bb      	str	r3, [r7, #24]
 800621a:	61fa      	str	r2, [r7, #28]
 800621c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006220:	f7fa fcec 	bl	8000bfc <__aeabi_uldivmod>
 8006224:	4602      	mov	r2, r0
 8006226:	460b      	mov	r3, r1
 8006228:	4613      	mov	r3, r2
 800622a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800622c:	4b0b      	ldr	r3, [pc, #44]	@ (800625c <HAL_RCC_GetSysClockFreq+0x200>)
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	0c1b      	lsrs	r3, r3, #16
 8006232:	f003 0303 	and.w	r3, r3, #3
 8006236:	3301      	adds	r3, #1
 8006238:	005b      	lsls	r3, r3, #1
 800623a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800623c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800623e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006240:	fbb2 f3f3 	udiv	r3, r2, r3
 8006244:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006246:	e002      	b.n	800624e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006248:	4b05      	ldr	r3, [pc, #20]	@ (8006260 <HAL_RCC_GetSysClockFreq+0x204>)
 800624a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800624c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800624e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006250:	4618      	mov	r0, r3
 8006252:	3750      	adds	r7, #80	@ 0x50
 8006254:	46bd      	mov	sp, r7
 8006256:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800625a:	bf00      	nop
 800625c:	40023800 	.word	0x40023800
 8006260:	00f42400 	.word	0x00f42400
 8006264:	007a1200 	.word	0x007a1200

08006268 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006268:	b480      	push	{r7}
 800626a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800626c:	4b03      	ldr	r3, [pc, #12]	@ (800627c <HAL_RCC_GetHCLKFreq+0x14>)
 800626e:	681b      	ldr	r3, [r3, #0]
}
 8006270:	4618      	mov	r0, r3
 8006272:	46bd      	mov	sp, r7
 8006274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006278:	4770      	bx	lr
 800627a:	bf00      	nop
 800627c:	20000048 	.word	0x20000048

08006280 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006284:	f7ff fff0 	bl	8006268 <HAL_RCC_GetHCLKFreq>
 8006288:	4602      	mov	r2, r0
 800628a:	4b05      	ldr	r3, [pc, #20]	@ (80062a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	0a9b      	lsrs	r3, r3, #10
 8006290:	f003 0307 	and.w	r3, r3, #7
 8006294:	4903      	ldr	r1, [pc, #12]	@ (80062a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006296:	5ccb      	ldrb	r3, [r1, r3]
 8006298:	fa22 f303 	lsr.w	r3, r2, r3
}
 800629c:	4618      	mov	r0, r3
 800629e:	bd80      	pop	{r7, pc}
 80062a0:	40023800 	.word	0x40023800
 80062a4:	08016858 	.word	0x08016858

080062a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80062ac:	f7ff ffdc 	bl	8006268 <HAL_RCC_GetHCLKFreq>
 80062b0:	4602      	mov	r2, r0
 80062b2:	4b05      	ldr	r3, [pc, #20]	@ (80062c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	0b5b      	lsrs	r3, r3, #13
 80062b8:	f003 0307 	and.w	r3, r3, #7
 80062bc:	4903      	ldr	r1, [pc, #12]	@ (80062cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80062be:	5ccb      	ldrb	r3, [r1, r3]
 80062c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	bd80      	pop	{r7, pc}
 80062c8:	40023800 	.word	0x40023800
 80062cc:	08016858 	.word	0x08016858

080062d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b082      	sub	sp, #8
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d101      	bne.n	80062e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80062de:	2301      	movs	r3, #1
 80062e0:	e07b      	b.n	80063da <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d108      	bne.n	80062fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80062f2:	d009      	beq.n	8006308 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2200      	movs	r2, #0
 80062f8:	61da      	str	r2, [r3, #28]
 80062fa:	e005      	b.n	8006308 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2200      	movs	r2, #0
 8006300:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2200      	movs	r2, #0
 8006306:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2200      	movs	r2, #0
 800630c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006314:	b2db      	uxtb	r3, r3
 8006316:	2b00      	cmp	r3, #0
 8006318:	d106      	bne.n	8006328 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2200      	movs	r2, #0
 800631e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f7fc fb98 	bl	8002a58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2202      	movs	r2, #2
 800632c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	681a      	ldr	r2, [r3, #0]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800633e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006350:	431a      	orrs	r2, r3
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	68db      	ldr	r3, [r3, #12]
 8006356:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800635a:	431a      	orrs	r2, r3
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	691b      	ldr	r3, [r3, #16]
 8006360:	f003 0302 	and.w	r3, r3, #2
 8006364:	431a      	orrs	r2, r3
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	695b      	ldr	r3, [r3, #20]
 800636a:	f003 0301 	and.w	r3, r3, #1
 800636e:	431a      	orrs	r2, r3
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	699b      	ldr	r3, [r3, #24]
 8006374:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006378:	431a      	orrs	r2, r3
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	69db      	ldr	r3, [r3, #28]
 800637e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006382:	431a      	orrs	r2, r3
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6a1b      	ldr	r3, [r3, #32]
 8006388:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800638c:	ea42 0103 	orr.w	r1, r2, r3
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006394:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	430a      	orrs	r2, r1
 800639e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	699b      	ldr	r3, [r3, #24]
 80063a4:	0c1b      	lsrs	r3, r3, #16
 80063a6:	f003 0104 	and.w	r1, r3, #4
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063ae:	f003 0210 	and.w	r2, r3, #16
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	430a      	orrs	r2, r1
 80063b8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	69da      	ldr	r2, [r3, #28]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80063c8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2200      	movs	r2, #0
 80063ce:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2201      	movs	r2, #1
 80063d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80063d8:	2300      	movs	r3, #0
}
 80063da:	4618      	mov	r0, r3
 80063dc:	3708      	adds	r7, #8
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}

080063e2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80063e2:	b580      	push	{r7, lr}
 80063e4:	b082      	sub	sp, #8
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d101      	bne.n	80063f4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80063f0:	2301      	movs	r3, #1
 80063f2:	e041      	b.n	8006478 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80063fa:	b2db      	uxtb	r3, r3
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d106      	bne.n	800640e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2200      	movs	r2, #0
 8006404:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f7fc fb6d 	bl	8002ae8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2202      	movs	r2, #2
 8006412:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681a      	ldr	r2, [r3, #0]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	3304      	adds	r3, #4
 800641e:	4619      	mov	r1, r3
 8006420:	4610      	mov	r0, r2
 8006422:	f000 faaf 	bl	8006984 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2201      	movs	r2, #1
 800642a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2201      	movs	r2, #1
 8006432:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2201      	movs	r2, #1
 800643a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2201      	movs	r2, #1
 8006442:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2201      	movs	r2, #1
 800644a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2201      	movs	r2, #1
 8006452:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2201      	movs	r2, #1
 800645a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2201      	movs	r2, #1
 8006462:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2201      	movs	r2, #1
 800646a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2201      	movs	r2, #1
 8006472:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006476:	2300      	movs	r3, #0
}
 8006478:	4618      	mov	r0, r3
 800647a:	3708      	adds	r7, #8
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}

08006480 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006480:	b480      	push	{r7}
 8006482:	b085      	sub	sp, #20
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800648e:	b2db      	uxtb	r3, r3
 8006490:	2b01      	cmp	r3, #1
 8006492:	d001      	beq.n	8006498 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006494:	2301      	movs	r3, #1
 8006496:	e04e      	b.n	8006536 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2202      	movs	r2, #2
 800649c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	68da      	ldr	r2, [r3, #12]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f042 0201 	orr.w	r2, r2, #1
 80064ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a23      	ldr	r2, [pc, #140]	@ (8006544 <HAL_TIM_Base_Start_IT+0xc4>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d022      	beq.n	8006500 <HAL_TIM_Base_Start_IT+0x80>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064c2:	d01d      	beq.n	8006500 <HAL_TIM_Base_Start_IT+0x80>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a1f      	ldr	r2, [pc, #124]	@ (8006548 <HAL_TIM_Base_Start_IT+0xc8>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d018      	beq.n	8006500 <HAL_TIM_Base_Start_IT+0x80>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a1e      	ldr	r2, [pc, #120]	@ (800654c <HAL_TIM_Base_Start_IT+0xcc>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d013      	beq.n	8006500 <HAL_TIM_Base_Start_IT+0x80>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a1c      	ldr	r2, [pc, #112]	@ (8006550 <HAL_TIM_Base_Start_IT+0xd0>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d00e      	beq.n	8006500 <HAL_TIM_Base_Start_IT+0x80>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a1b      	ldr	r2, [pc, #108]	@ (8006554 <HAL_TIM_Base_Start_IT+0xd4>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d009      	beq.n	8006500 <HAL_TIM_Base_Start_IT+0x80>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a19      	ldr	r2, [pc, #100]	@ (8006558 <HAL_TIM_Base_Start_IT+0xd8>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d004      	beq.n	8006500 <HAL_TIM_Base_Start_IT+0x80>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a18      	ldr	r2, [pc, #96]	@ (800655c <HAL_TIM_Base_Start_IT+0xdc>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d111      	bne.n	8006524 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	689b      	ldr	r3, [r3, #8]
 8006506:	f003 0307 	and.w	r3, r3, #7
 800650a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	2b06      	cmp	r3, #6
 8006510:	d010      	beq.n	8006534 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	681a      	ldr	r2, [r3, #0]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f042 0201 	orr.w	r2, r2, #1
 8006520:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006522:	e007      	b.n	8006534 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	681a      	ldr	r2, [r3, #0]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f042 0201 	orr.w	r2, r2, #1
 8006532:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006534:	2300      	movs	r3, #0
}
 8006536:	4618      	mov	r0, r3
 8006538:	3714      	adds	r7, #20
 800653a:	46bd      	mov	sp, r7
 800653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006540:	4770      	bx	lr
 8006542:	bf00      	nop
 8006544:	40010000 	.word	0x40010000
 8006548:	40000400 	.word	0x40000400
 800654c:	40000800 	.word	0x40000800
 8006550:	40000c00 	.word	0x40000c00
 8006554:	40010400 	.word	0x40010400
 8006558:	40014000 	.word	0x40014000
 800655c:	40001800 	.word	0x40001800

08006560 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006560:	b480      	push	{r7}
 8006562:	b083      	sub	sp, #12
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	68da      	ldr	r2, [r3, #12]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f022 0201 	bic.w	r2, r2, #1
 8006576:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	6a1a      	ldr	r2, [r3, #32]
 800657e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006582:	4013      	ands	r3, r2
 8006584:	2b00      	cmp	r3, #0
 8006586:	d10f      	bne.n	80065a8 <HAL_TIM_Base_Stop_IT+0x48>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	6a1a      	ldr	r2, [r3, #32]
 800658e:	f240 4344 	movw	r3, #1092	@ 0x444
 8006592:	4013      	ands	r3, r2
 8006594:	2b00      	cmp	r3, #0
 8006596:	d107      	bne.n	80065a8 <HAL_TIM_Base_Stop_IT+0x48>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	681a      	ldr	r2, [r3, #0]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f022 0201 	bic.w	r2, r2, #1
 80065a6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2201      	movs	r2, #1
 80065ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80065b0:	2300      	movs	r3, #0
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	370c      	adds	r7, #12
 80065b6:	46bd      	mov	sp, r7
 80065b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065bc:	4770      	bx	lr

080065be <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80065be:	b580      	push	{r7, lr}
 80065c0:	b082      	sub	sp, #8
 80065c2:	af00      	add	r7, sp, #0
 80065c4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d101      	bne.n	80065d0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80065cc:	2301      	movs	r3, #1
 80065ce:	e041      	b.n	8006654 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80065d6:	b2db      	uxtb	r3, r3
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d106      	bne.n	80065ea <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2200      	movs	r2, #0
 80065e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f000 f839 	bl	800665c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2202      	movs	r2, #2
 80065ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681a      	ldr	r2, [r3, #0]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	3304      	adds	r3, #4
 80065fa:	4619      	mov	r1, r3
 80065fc:	4610      	mov	r0, r2
 80065fe:	f000 f9c1 	bl	8006984 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2201      	movs	r2, #1
 8006606:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2201      	movs	r2, #1
 800660e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2201      	movs	r2, #1
 8006616:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2201      	movs	r2, #1
 800661e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2201      	movs	r2, #1
 8006626:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2201      	movs	r2, #1
 800662e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2201      	movs	r2, #1
 8006636:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2201      	movs	r2, #1
 800663e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2201      	movs	r2, #1
 8006646:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2201      	movs	r2, #1
 800664e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006652:	2300      	movs	r3, #0
}
 8006654:	4618      	mov	r0, r3
 8006656:	3708      	adds	r7, #8
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}

0800665c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800665c:	b480      	push	{r7}
 800665e:	b083      	sub	sp, #12
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006664:	bf00      	nop
 8006666:	370c      	adds	r7, #12
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr

08006670 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b086      	sub	sp, #24
 8006674:	af00      	add	r7, sp, #0
 8006676:	60f8      	str	r0, [r7, #12]
 8006678:	60b9      	str	r1, [r7, #8]
 800667a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800667c:	2300      	movs	r3, #0
 800667e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006686:	2b01      	cmp	r3, #1
 8006688:	d101      	bne.n	800668e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800668a:	2302      	movs	r3, #2
 800668c:	e0ae      	b.n	80067ec <HAL_TIM_PWM_ConfigChannel+0x17c>
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2201      	movs	r2, #1
 8006692:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2b0c      	cmp	r3, #12
 800669a:	f200 809f 	bhi.w	80067dc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800669e:	a201      	add	r2, pc, #4	@ (adr r2, 80066a4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80066a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066a4:	080066d9 	.word	0x080066d9
 80066a8:	080067dd 	.word	0x080067dd
 80066ac:	080067dd 	.word	0x080067dd
 80066b0:	080067dd 	.word	0x080067dd
 80066b4:	08006719 	.word	0x08006719
 80066b8:	080067dd 	.word	0x080067dd
 80066bc:	080067dd 	.word	0x080067dd
 80066c0:	080067dd 	.word	0x080067dd
 80066c4:	0800675b 	.word	0x0800675b
 80066c8:	080067dd 	.word	0x080067dd
 80066cc:	080067dd 	.word	0x080067dd
 80066d0:	080067dd 	.word	0x080067dd
 80066d4:	0800679b 	.word	0x0800679b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	68b9      	ldr	r1, [r7, #8]
 80066de:	4618      	mov	r0, r3
 80066e0:	f000 f9fc 	bl	8006adc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	699a      	ldr	r2, [r3, #24]
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f042 0208 	orr.w	r2, r2, #8
 80066f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	699a      	ldr	r2, [r3, #24]
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f022 0204 	bic.w	r2, r2, #4
 8006702:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	6999      	ldr	r1, [r3, #24]
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	691a      	ldr	r2, [r3, #16]
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	430a      	orrs	r2, r1
 8006714:	619a      	str	r2, [r3, #24]
      break;
 8006716:	e064      	b.n	80067e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	68b9      	ldr	r1, [r7, #8]
 800671e:	4618      	mov	r0, r3
 8006720:	f000 fa4c 	bl	8006bbc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	699a      	ldr	r2, [r3, #24]
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006732:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	699a      	ldr	r2, [r3, #24]
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006742:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	6999      	ldr	r1, [r3, #24]
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	691b      	ldr	r3, [r3, #16]
 800674e:	021a      	lsls	r2, r3, #8
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	430a      	orrs	r2, r1
 8006756:	619a      	str	r2, [r3, #24]
      break;
 8006758:	e043      	b.n	80067e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	68b9      	ldr	r1, [r7, #8]
 8006760:	4618      	mov	r0, r3
 8006762:	f000 faa1 	bl	8006ca8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	69da      	ldr	r2, [r3, #28]
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f042 0208 	orr.w	r2, r2, #8
 8006774:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	69da      	ldr	r2, [r3, #28]
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f022 0204 	bic.w	r2, r2, #4
 8006784:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	69d9      	ldr	r1, [r3, #28]
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	691a      	ldr	r2, [r3, #16]
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	430a      	orrs	r2, r1
 8006796:	61da      	str	r2, [r3, #28]
      break;
 8006798:	e023      	b.n	80067e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	68b9      	ldr	r1, [r7, #8]
 80067a0:	4618      	mov	r0, r3
 80067a2:	f000 faf5 	bl	8006d90 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	69da      	ldr	r2, [r3, #28]
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80067b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	69da      	ldr	r2, [r3, #28]
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80067c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	69d9      	ldr	r1, [r3, #28]
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	691b      	ldr	r3, [r3, #16]
 80067d0:	021a      	lsls	r2, r3, #8
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	430a      	orrs	r2, r1
 80067d8:	61da      	str	r2, [r3, #28]
      break;
 80067da:	e002      	b.n	80067e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80067dc:	2301      	movs	r3, #1
 80067de:	75fb      	strb	r3, [r7, #23]
      break;
 80067e0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2200      	movs	r2, #0
 80067e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80067ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	3718      	adds	r7, #24
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}

080067f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b084      	sub	sp, #16
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
 80067fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80067fe:	2300      	movs	r3, #0
 8006800:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006808:	2b01      	cmp	r3, #1
 800680a:	d101      	bne.n	8006810 <HAL_TIM_ConfigClockSource+0x1c>
 800680c:	2302      	movs	r3, #2
 800680e:	e0b4      	b.n	800697a <HAL_TIM_ConfigClockSource+0x186>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2201      	movs	r2, #1
 8006814:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2202      	movs	r2, #2
 800681c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	689b      	ldr	r3, [r3, #8]
 8006826:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800682e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006836:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	68ba      	ldr	r2, [r7, #8]
 800683e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006848:	d03e      	beq.n	80068c8 <HAL_TIM_ConfigClockSource+0xd4>
 800684a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800684e:	f200 8087 	bhi.w	8006960 <HAL_TIM_ConfigClockSource+0x16c>
 8006852:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006856:	f000 8086 	beq.w	8006966 <HAL_TIM_ConfigClockSource+0x172>
 800685a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800685e:	d87f      	bhi.n	8006960 <HAL_TIM_ConfigClockSource+0x16c>
 8006860:	2b70      	cmp	r3, #112	@ 0x70
 8006862:	d01a      	beq.n	800689a <HAL_TIM_ConfigClockSource+0xa6>
 8006864:	2b70      	cmp	r3, #112	@ 0x70
 8006866:	d87b      	bhi.n	8006960 <HAL_TIM_ConfigClockSource+0x16c>
 8006868:	2b60      	cmp	r3, #96	@ 0x60
 800686a:	d050      	beq.n	800690e <HAL_TIM_ConfigClockSource+0x11a>
 800686c:	2b60      	cmp	r3, #96	@ 0x60
 800686e:	d877      	bhi.n	8006960 <HAL_TIM_ConfigClockSource+0x16c>
 8006870:	2b50      	cmp	r3, #80	@ 0x50
 8006872:	d03c      	beq.n	80068ee <HAL_TIM_ConfigClockSource+0xfa>
 8006874:	2b50      	cmp	r3, #80	@ 0x50
 8006876:	d873      	bhi.n	8006960 <HAL_TIM_ConfigClockSource+0x16c>
 8006878:	2b40      	cmp	r3, #64	@ 0x40
 800687a:	d058      	beq.n	800692e <HAL_TIM_ConfigClockSource+0x13a>
 800687c:	2b40      	cmp	r3, #64	@ 0x40
 800687e:	d86f      	bhi.n	8006960 <HAL_TIM_ConfigClockSource+0x16c>
 8006880:	2b30      	cmp	r3, #48	@ 0x30
 8006882:	d064      	beq.n	800694e <HAL_TIM_ConfigClockSource+0x15a>
 8006884:	2b30      	cmp	r3, #48	@ 0x30
 8006886:	d86b      	bhi.n	8006960 <HAL_TIM_ConfigClockSource+0x16c>
 8006888:	2b20      	cmp	r3, #32
 800688a:	d060      	beq.n	800694e <HAL_TIM_ConfigClockSource+0x15a>
 800688c:	2b20      	cmp	r3, #32
 800688e:	d867      	bhi.n	8006960 <HAL_TIM_ConfigClockSource+0x16c>
 8006890:	2b00      	cmp	r3, #0
 8006892:	d05c      	beq.n	800694e <HAL_TIM_ConfigClockSource+0x15a>
 8006894:	2b10      	cmp	r3, #16
 8006896:	d05a      	beq.n	800694e <HAL_TIM_ConfigClockSource+0x15a>
 8006898:	e062      	b.n	8006960 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80068aa:	f000 fb41 	bl	8006f30 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	689b      	ldr	r3, [r3, #8]
 80068b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80068bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	68ba      	ldr	r2, [r7, #8]
 80068c4:	609a      	str	r2, [r3, #8]
      break;
 80068c6:	e04f      	b.n	8006968 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80068d8:	f000 fb2a 	bl	8006f30 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	689a      	ldr	r2, [r3, #8]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80068ea:	609a      	str	r2, [r3, #8]
      break;
 80068ec:	e03c      	b.n	8006968 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80068fa:	461a      	mov	r2, r3
 80068fc:	f000 fa9e 	bl	8006e3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	2150      	movs	r1, #80	@ 0x50
 8006906:	4618      	mov	r0, r3
 8006908:	f000 faf7 	bl	8006efa <TIM_ITRx_SetConfig>
      break;
 800690c:	e02c      	b.n	8006968 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800691a:	461a      	mov	r2, r3
 800691c:	f000 fabd 	bl	8006e9a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	2160      	movs	r1, #96	@ 0x60
 8006926:	4618      	mov	r0, r3
 8006928:	f000 fae7 	bl	8006efa <TIM_ITRx_SetConfig>
      break;
 800692c:	e01c      	b.n	8006968 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800693a:	461a      	mov	r2, r3
 800693c:	f000 fa7e 	bl	8006e3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	2140      	movs	r1, #64	@ 0x40
 8006946:	4618      	mov	r0, r3
 8006948:	f000 fad7 	bl	8006efa <TIM_ITRx_SetConfig>
      break;
 800694c:	e00c      	b.n	8006968 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681a      	ldr	r2, [r3, #0]
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4619      	mov	r1, r3
 8006958:	4610      	mov	r0, r2
 800695a:	f000 face 	bl	8006efa <TIM_ITRx_SetConfig>
      break;
 800695e:	e003      	b.n	8006968 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006960:	2301      	movs	r3, #1
 8006962:	73fb      	strb	r3, [r7, #15]
      break;
 8006964:	e000      	b.n	8006968 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006966:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2201      	movs	r2, #1
 800696c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2200      	movs	r2, #0
 8006974:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006978:	7bfb      	ldrb	r3, [r7, #15]
}
 800697a:	4618      	mov	r0, r3
 800697c:	3710      	adds	r7, #16
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}
	...

08006984 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006984:	b480      	push	{r7}
 8006986:	b085      	sub	sp, #20
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
 800698c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	4a46      	ldr	r2, [pc, #280]	@ (8006ab0 <TIM_Base_SetConfig+0x12c>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d013      	beq.n	80069c4 <TIM_Base_SetConfig+0x40>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069a2:	d00f      	beq.n	80069c4 <TIM_Base_SetConfig+0x40>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	4a43      	ldr	r2, [pc, #268]	@ (8006ab4 <TIM_Base_SetConfig+0x130>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d00b      	beq.n	80069c4 <TIM_Base_SetConfig+0x40>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	4a42      	ldr	r2, [pc, #264]	@ (8006ab8 <TIM_Base_SetConfig+0x134>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d007      	beq.n	80069c4 <TIM_Base_SetConfig+0x40>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	4a41      	ldr	r2, [pc, #260]	@ (8006abc <TIM_Base_SetConfig+0x138>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d003      	beq.n	80069c4 <TIM_Base_SetConfig+0x40>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	4a40      	ldr	r2, [pc, #256]	@ (8006ac0 <TIM_Base_SetConfig+0x13c>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d108      	bne.n	80069d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	68fa      	ldr	r2, [r7, #12]
 80069d2:	4313      	orrs	r3, r2
 80069d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	4a35      	ldr	r2, [pc, #212]	@ (8006ab0 <TIM_Base_SetConfig+0x12c>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d02b      	beq.n	8006a36 <TIM_Base_SetConfig+0xb2>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069e4:	d027      	beq.n	8006a36 <TIM_Base_SetConfig+0xb2>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	4a32      	ldr	r2, [pc, #200]	@ (8006ab4 <TIM_Base_SetConfig+0x130>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d023      	beq.n	8006a36 <TIM_Base_SetConfig+0xb2>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	4a31      	ldr	r2, [pc, #196]	@ (8006ab8 <TIM_Base_SetConfig+0x134>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d01f      	beq.n	8006a36 <TIM_Base_SetConfig+0xb2>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	4a30      	ldr	r2, [pc, #192]	@ (8006abc <TIM_Base_SetConfig+0x138>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d01b      	beq.n	8006a36 <TIM_Base_SetConfig+0xb2>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	4a2f      	ldr	r2, [pc, #188]	@ (8006ac0 <TIM_Base_SetConfig+0x13c>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d017      	beq.n	8006a36 <TIM_Base_SetConfig+0xb2>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	4a2e      	ldr	r2, [pc, #184]	@ (8006ac4 <TIM_Base_SetConfig+0x140>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d013      	beq.n	8006a36 <TIM_Base_SetConfig+0xb2>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	4a2d      	ldr	r2, [pc, #180]	@ (8006ac8 <TIM_Base_SetConfig+0x144>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d00f      	beq.n	8006a36 <TIM_Base_SetConfig+0xb2>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	4a2c      	ldr	r2, [pc, #176]	@ (8006acc <TIM_Base_SetConfig+0x148>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d00b      	beq.n	8006a36 <TIM_Base_SetConfig+0xb2>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	4a2b      	ldr	r2, [pc, #172]	@ (8006ad0 <TIM_Base_SetConfig+0x14c>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d007      	beq.n	8006a36 <TIM_Base_SetConfig+0xb2>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	4a2a      	ldr	r2, [pc, #168]	@ (8006ad4 <TIM_Base_SetConfig+0x150>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d003      	beq.n	8006a36 <TIM_Base_SetConfig+0xb2>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	4a29      	ldr	r2, [pc, #164]	@ (8006ad8 <TIM_Base_SetConfig+0x154>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d108      	bne.n	8006a48 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	68db      	ldr	r3, [r3, #12]
 8006a42:	68fa      	ldr	r2, [r7, #12]
 8006a44:	4313      	orrs	r3, r2
 8006a46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	695b      	ldr	r3, [r3, #20]
 8006a52:	4313      	orrs	r3, r2
 8006a54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	68fa      	ldr	r2, [r7, #12]
 8006a5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	689a      	ldr	r2, [r3, #8]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	681a      	ldr	r2, [r3, #0]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	4a10      	ldr	r2, [pc, #64]	@ (8006ab0 <TIM_Base_SetConfig+0x12c>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d003      	beq.n	8006a7c <TIM_Base_SetConfig+0xf8>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	4a12      	ldr	r2, [pc, #72]	@ (8006ac0 <TIM_Base_SetConfig+0x13c>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d103      	bne.n	8006a84 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	691a      	ldr	r2, [r3, #16]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2201      	movs	r2, #1
 8006a88:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	691b      	ldr	r3, [r3, #16]
 8006a8e:	f003 0301 	and.w	r3, r3, #1
 8006a92:	2b01      	cmp	r3, #1
 8006a94:	d105      	bne.n	8006aa2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	691b      	ldr	r3, [r3, #16]
 8006a9a:	f023 0201 	bic.w	r2, r3, #1
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	611a      	str	r2, [r3, #16]
  }
}
 8006aa2:	bf00      	nop
 8006aa4:	3714      	adds	r7, #20
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aac:	4770      	bx	lr
 8006aae:	bf00      	nop
 8006ab0:	40010000 	.word	0x40010000
 8006ab4:	40000400 	.word	0x40000400
 8006ab8:	40000800 	.word	0x40000800
 8006abc:	40000c00 	.word	0x40000c00
 8006ac0:	40010400 	.word	0x40010400
 8006ac4:	40014000 	.word	0x40014000
 8006ac8:	40014400 	.word	0x40014400
 8006acc:	40014800 	.word	0x40014800
 8006ad0:	40001800 	.word	0x40001800
 8006ad4:	40001c00 	.word	0x40001c00
 8006ad8:	40002000 	.word	0x40002000

08006adc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b087      	sub	sp, #28
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
 8006ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6a1b      	ldr	r3, [r3, #32]
 8006aea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6a1b      	ldr	r3, [r3, #32]
 8006af0:	f023 0201 	bic.w	r2, r3, #1
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	699b      	ldr	r3, [r3, #24]
 8006b02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f023 0303 	bic.w	r3, r3, #3
 8006b12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	68fa      	ldr	r2, [r7, #12]
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	f023 0302 	bic.w	r3, r3, #2
 8006b24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	689b      	ldr	r3, [r3, #8]
 8006b2a:	697a      	ldr	r2, [r7, #20]
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	4a20      	ldr	r2, [pc, #128]	@ (8006bb4 <TIM_OC1_SetConfig+0xd8>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d003      	beq.n	8006b40 <TIM_OC1_SetConfig+0x64>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	4a1f      	ldr	r2, [pc, #124]	@ (8006bb8 <TIM_OC1_SetConfig+0xdc>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d10c      	bne.n	8006b5a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	f023 0308 	bic.w	r3, r3, #8
 8006b46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	68db      	ldr	r3, [r3, #12]
 8006b4c:	697a      	ldr	r2, [r7, #20]
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	f023 0304 	bic.w	r3, r3, #4
 8006b58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	4a15      	ldr	r2, [pc, #84]	@ (8006bb4 <TIM_OC1_SetConfig+0xd8>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d003      	beq.n	8006b6a <TIM_OC1_SetConfig+0x8e>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	4a14      	ldr	r2, [pc, #80]	@ (8006bb8 <TIM_OC1_SetConfig+0xdc>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d111      	bne.n	8006b8e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006b70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006b78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	695b      	ldr	r3, [r3, #20]
 8006b7e:	693a      	ldr	r2, [r7, #16]
 8006b80:	4313      	orrs	r3, r2
 8006b82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	699b      	ldr	r3, [r3, #24]
 8006b88:	693a      	ldr	r2, [r7, #16]
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	693a      	ldr	r2, [r7, #16]
 8006b92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	68fa      	ldr	r2, [r7, #12]
 8006b98:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	685a      	ldr	r2, [r3, #4]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	697a      	ldr	r2, [r7, #20]
 8006ba6:	621a      	str	r2, [r3, #32]
}
 8006ba8:	bf00      	nop
 8006baa:	371c      	adds	r7, #28
 8006bac:	46bd      	mov	sp, r7
 8006bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb2:	4770      	bx	lr
 8006bb4:	40010000 	.word	0x40010000
 8006bb8:	40010400 	.word	0x40010400

08006bbc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b087      	sub	sp, #28
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6a1b      	ldr	r3, [r3, #32]
 8006bca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6a1b      	ldr	r3, [r3, #32]
 8006bd0:	f023 0210 	bic.w	r2, r3, #16
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	699b      	ldr	r3, [r3, #24]
 8006be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006bea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006bf2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	021b      	lsls	r3, r3, #8
 8006bfa:	68fa      	ldr	r2, [r7, #12]
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	f023 0320 	bic.w	r3, r3, #32
 8006c06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	689b      	ldr	r3, [r3, #8]
 8006c0c:	011b      	lsls	r3, r3, #4
 8006c0e:	697a      	ldr	r2, [r7, #20]
 8006c10:	4313      	orrs	r3, r2
 8006c12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	4a22      	ldr	r2, [pc, #136]	@ (8006ca0 <TIM_OC2_SetConfig+0xe4>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d003      	beq.n	8006c24 <TIM_OC2_SetConfig+0x68>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	4a21      	ldr	r2, [pc, #132]	@ (8006ca4 <TIM_OC2_SetConfig+0xe8>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d10d      	bne.n	8006c40 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006c24:	697b      	ldr	r3, [r7, #20]
 8006c26:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	68db      	ldr	r3, [r3, #12]
 8006c30:	011b      	lsls	r3, r3, #4
 8006c32:	697a      	ldr	r2, [r7, #20]
 8006c34:	4313      	orrs	r3, r2
 8006c36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c3e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	4a17      	ldr	r2, [pc, #92]	@ (8006ca0 <TIM_OC2_SetConfig+0xe4>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d003      	beq.n	8006c50 <TIM_OC2_SetConfig+0x94>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	4a16      	ldr	r2, [pc, #88]	@ (8006ca4 <TIM_OC2_SetConfig+0xe8>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d113      	bne.n	8006c78 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006c56:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006c5e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	695b      	ldr	r3, [r3, #20]
 8006c64:	009b      	lsls	r3, r3, #2
 8006c66:	693a      	ldr	r2, [r7, #16]
 8006c68:	4313      	orrs	r3, r2
 8006c6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	699b      	ldr	r3, [r3, #24]
 8006c70:	009b      	lsls	r3, r3, #2
 8006c72:	693a      	ldr	r2, [r7, #16]
 8006c74:	4313      	orrs	r3, r2
 8006c76:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	693a      	ldr	r2, [r7, #16]
 8006c7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	68fa      	ldr	r2, [r7, #12]
 8006c82:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	685a      	ldr	r2, [r3, #4]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	697a      	ldr	r2, [r7, #20]
 8006c90:	621a      	str	r2, [r3, #32]
}
 8006c92:	bf00      	nop
 8006c94:	371c      	adds	r7, #28
 8006c96:	46bd      	mov	sp, r7
 8006c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9c:	4770      	bx	lr
 8006c9e:	bf00      	nop
 8006ca0:	40010000 	.word	0x40010000
 8006ca4:	40010400 	.word	0x40010400

08006ca8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b087      	sub	sp, #28
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
 8006cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6a1b      	ldr	r3, [r3, #32]
 8006cb6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6a1b      	ldr	r3, [r3, #32]
 8006cbc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	69db      	ldr	r3, [r3, #28]
 8006cce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f023 0303 	bic.w	r3, r3, #3
 8006cde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	68fa      	ldr	r2, [r7, #12]
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006cf0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	689b      	ldr	r3, [r3, #8]
 8006cf6:	021b      	lsls	r3, r3, #8
 8006cf8:	697a      	ldr	r2, [r7, #20]
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	4a21      	ldr	r2, [pc, #132]	@ (8006d88 <TIM_OC3_SetConfig+0xe0>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d003      	beq.n	8006d0e <TIM_OC3_SetConfig+0x66>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	4a20      	ldr	r2, [pc, #128]	@ (8006d8c <TIM_OC3_SetConfig+0xe4>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d10d      	bne.n	8006d2a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006d14:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	68db      	ldr	r3, [r3, #12]
 8006d1a:	021b      	lsls	r3, r3, #8
 8006d1c:	697a      	ldr	r2, [r7, #20]
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006d28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	4a16      	ldr	r2, [pc, #88]	@ (8006d88 <TIM_OC3_SetConfig+0xe0>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d003      	beq.n	8006d3a <TIM_OC3_SetConfig+0x92>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	4a15      	ldr	r2, [pc, #84]	@ (8006d8c <TIM_OC3_SetConfig+0xe4>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d113      	bne.n	8006d62 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006d40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006d48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	695b      	ldr	r3, [r3, #20]
 8006d4e:	011b      	lsls	r3, r3, #4
 8006d50:	693a      	ldr	r2, [r7, #16]
 8006d52:	4313      	orrs	r3, r2
 8006d54:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	699b      	ldr	r3, [r3, #24]
 8006d5a:	011b      	lsls	r3, r3, #4
 8006d5c:	693a      	ldr	r2, [r7, #16]
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	693a      	ldr	r2, [r7, #16]
 8006d66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	68fa      	ldr	r2, [r7, #12]
 8006d6c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	685a      	ldr	r2, [r3, #4]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	697a      	ldr	r2, [r7, #20]
 8006d7a:	621a      	str	r2, [r3, #32]
}
 8006d7c:	bf00      	nop
 8006d7e:	371c      	adds	r7, #28
 8006d80:	46bd      	mov	sp, r7
 8006d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d86:	4770      	bx	lr
 8006d88:	40010000 	.word	0x40010000
 8006d8c:	40010400 	.word	0x40010400

08006d90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d90:	b480      	push	{r7}
 8006d92:	b087      	sub	sp, #28
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
 8006d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6a1b      	ldr	r3, [r3, #32]
 8006d9e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6a1b      	ldr	r3, [r3, #32]
 8006da4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	69db      	ldr	r3, [r3, #28]
 8006db6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006dbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006dc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	021b      	lsls	r3, r3, #8
 8006dce:	68fa      	ldr	r2, [r7, #12]
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006dda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	031b      	lsls	r3, r3, #12
 8006de2:	693a      	ldr	r2, [r7, #16]
 8006de4:	4313      	orrs	r3, r2
 8006de6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	4a12      	ldr	r2, [pc, #72]	@ (8006e34 <TIM_OC4_SetConfig+0xa4>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d003      	beq.n	8006df8 <TIM_OC4_SetConfig+0x68>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	4a11      	ldr	r2, [pc, #68]	@ (8006e38 <TIM_OC4_SetConfig+0xa8>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d109      	bne.n	8006e0c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006dfe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	695b      	ldr	r3, [r3, #20]
 8006e04:	019b      	lsls	r3, r3, #6
 8006e06:	697a      	ldr	r2, [r7, #20]
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	697a      	ldr	r2, [r7, #20]
 8006e10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	68fa      	ldr	r2, [r7, #12]
 8006e16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	685a      	ldr	r2, [r3, #4]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	693a      	ldr	r2, [r7, #16]
 8006e24:	621a      	str	r2, [r3, #32]
}
 8006e26:	bf00      	nop
 8006e28:	371c      	adds	r7, #28
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e30:	4770      	bx	lr
 8006e32:	bf00      	nop
 8006e34:	40010000 	.word	0x40010000
 8006e38:	40010400 	.word	0x40010400

08006e3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b087      	sub	sp, #28
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	60f8      	str	r0, [r7, #12]
 8006e44:	60b9      	str	r1, [r7, #8]
 8006e46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	6a1b      	ldr	r3, [r3, #32]
 8006e4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	6a1b      	ldr	r3, [r3, #32]
 8006e52:	f023 0201 	bic.w	r2, r3, #1
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	699b      	ldr	r3, [r3, #24]
 8006e5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006e60:	693b      	ldr	r3, [r7, #16]
 8006e62:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006e66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	011b      	lsls	r3, r3, #4
 8006e6c:	693a      	ldr	r2, [r7, #16]
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	f023 030a 	bic.w	r3, r3, #10
 8006e78:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006e7a:	697a      	ldr	r2, [r7, #20]
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	693a      	ldr	r2, [r7, #16]
 8006e86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	697a      	ldr	r2, [r7, #20]
 8006e8c:	621a      	str	r2, [r3, #32]
}
 8006e8e:	bf00      	nop
 8006e90:	371c      	adds	r7, #28
 8006e92:	46bd      	mov	sp, r7
 8006e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e98:	4770      	bx	lr

08006e9a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e9a:	b480      	push	{r7}
 8006e9c:	b087      	sub	sp, #28
 8006e9e:	af00      	add	r7, sp, #0
 8006ea0:	60f8      	str	r0, [r7, #12]
 8006ea2:	60b9      	str	r1, [r7, #8]
 8006ea4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	6a1b      	ldr	r3, [r3, #32]
 8006eaa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	6a1b      	ldr	r3, [r3, #32]
 8006eb0:	f023 0210 	bic.w	r2, r3, #16
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	699b      	ldr	r3, [r3, #24]
 8006ebc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006ebe:	693b      	ldr	r3, [r7, #16]
 8006ec0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006ec4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	031b      	lsls	r3, r3, #12
 8006eca:	693a      	ldr	r2, [r7, #16]
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006ed6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	011b      	lsls	r3, r3, #4
 8006edc:	697a      	ldr	r2, [r7, #20]
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	693a      	ldr	r2, [r7, #16]
 8006ee6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	697a      	ldr	r2, [r7, #20]
 8006eec:	621a      	str	r2, [r3, #32]
}
 8006eee:	bf00      	nop
 8006ef0:	371c      	adds	r7, #28
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef8:	4770      	bx	lr

08006efa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006efa:	b480      	push	{r7}
 8006efc:	b085      	sub	sp, #20
 8006efe:	af00      	add	r7, sp, #0
 8006f00:	6078      	str	r0, [r7, #4]
 8006f02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	689b      	ldr	r3, [r3, #8]
 8006f08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006f12:	683a      	ldr	r2, [r7, #0]
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	4313      	orrs	r3, r2
 8006f18:	f043 0307 	orr.w	r3, r3, #7
 8006f1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	68fa      	ldr	r2, [r7, #12]
 8006f22:	609a      	str	r2, [r3, #8]
}
 8006f24:	bf00      	nop
 8006f26:	3714      	adds	r7, #20
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2e:	4770      	bx	lr

08006f30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b087      	sub	sp, #28
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	60f8      	str	r0, [r7, #12]
 8006f38:	60b9      	str	r1, [r7, #8]
 8006f3a:	607a      	str	r2, [r7, #4]
 8006f3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	689b      	ldr	r3, [r3, #8]
 8006f42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006f4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	021a      	lsls	r2, r3, #8
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	431a      	orrs	r2, r3
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	4313      	orrs	r3, r2
 8006f58:	697a      	ldr	r2, [r7, #20]
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	697a      	ldr	r2, [r7, #20]
 8006f62:	609a      	str	r2, [r3, #8]
}
 8006f64:	bf00      	nop
 8006f66:	371c      	adds	r7, #28
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6e:	4770      	bx	lr

08006f70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b085      	sub	sp, #20
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
 8006f78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	d101      	bne.n	8006f88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f84:	2302      	movs	r3, #2
 8006f86:	e05a      	b.n	800703e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2202      	movs	r2, #2
 8006f94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	689b      	ldr	r3, [r3, #8]
 8006fa6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	68fa      	ldr	r2, [r7, #12]
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	68fa      	ldr	r2, [r7, #12]
 8006fc0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a21      	ldr	r2, [pc, #132]	@ (800704c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d022      	beq.n	8007012 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fd4:	d01d      	beq.n	8007012 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a1d      	ldr	r2, [pc, #116]	@ (8007050 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d018      	beq.n	8007012 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a1b      	ldr	r2, [pc, #108]	@ (8007054 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d013      	beq.n	8007012 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a1a      	ldr	r2, [pc, #104]	@ (8007058 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d00e      	beq.n	8007012 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a18      	ldr	r2, [pc, #96]	@ (800705c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d009      	beq.n	8007012 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a17      	ldr	r2, [pc, #92]	@ (8007060 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d004      	beq.n	8007012 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a15      	ldr	r2, [pc, #84]	@ (8007064 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d10c      	bne.n	800702c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007018:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	68ba      	ldr	r2, [r7, #8]
 8007020:	4313      	orrs	r3, r2
 8007022:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	68ba      	ldr	r2, [r7, #8]
 800702a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2201      	movs	r2, #1
 8007030:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2200      	movs	r2, #0
 8007038:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800703c:	2300      	movs	r3, #0
}
 800703e:	4618      	mov	r0, r3
 8007040:	3714      	adds	r7, #20
 8007042:	46bd      	mov	sp, r7
 8007044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007048:	4770      	bx	lr
 800704a:	bf00      	nop
 800704c:	40010000 	.word	0x40010000
 8007050:	40000400 	.word	0x40000400
 8007054:	40000800 	.word	0x40000800
 8007058:	40000c00 	.word	0x40000c00
 800705c:	40010400 	.word	0x40010400
 8007060:	40014000 	.word	0x40014000
 8007064:	40001800 	.word	0x40001800

08007068 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b082      	sub	sp, #8
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d101      	bne.n	800707a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007076:	2301      	movs	r3, #1
 8007078:	e042      	b.n	8007100 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007080:	b2db      	uxtb	r3, r3
 8007082:	2b00      	cmp	r3, #0
 8007084:	d106      	bne.n	8007094 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2200      	movs	r2, #0
 800708a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f7fb fd9a 	bl	8002bc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2224      	movs	r2, #36	@ 0x24
 8007098:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	68da      	ldr	r2, [r3, #12]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80070aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f000 f82b 	bl	8007108 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	691a      	ldr	r2, [r3, #16]
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80070c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	695a      	ldr	r2, [r3, #20]
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80070d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	68da      	ldr	r2, [r3, #12]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80070e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2200      	movs	r2, #0
 80070e6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2220      	movs	r2, #32
 80070ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2220      	movs	r2, #32
 80070f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2200      	movs	r2, #0
 80070fc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80070fe:	2300      	movs	r3, #0
}
 8007100:	4618      	mov	r0, r3
 8007102:	3708      	adds	r7, #8
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}

08007108 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007108:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800710c:	b0c0      	sub	sp, #256	@ 0x100
 800710e:	af00      	add	r7, sp, #0
 8007110:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	691b      	ldr	r3, [r3, #16]
 800711c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007124:	68d9      	ldr	r1, [r3, #12]
 8007126:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800712a:	681a      	ldr	r2, [r3, #0]
 800712c:	ea40 0301 	orr.w	r3, r0, r1
 8007130:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007132:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007136:	689a      	ldr	r2, [r3, #8]
 8007138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800713c:	691b      	ldr	r3, [r3, #16]
 800713e:	431a      	orrs	r2, r3
 8007140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007144:	695b      	ldr	r3, [r3, #20]
 8007146:	431a      	orrs	r2, r3
 8007148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800714c:	69db      	ldr	r3, [r3, #28]
 800714e:	4313      	orrs	r3, r2
 8007150:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	68db      	ldr	r3, [r3, #12]
 800715c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007160:	f021 010c 	bic.w	r1, r1, #12
 8007164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007168:	681a      	ldr	r2, [r3, #0]
 800716a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800716e:	430b      	orrs	r3, r1
 8007170:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007172:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	695b      	ldr	r3, [r3, #20]
 800717a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800717e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007182:	6999      	ldr	r1, [r3, #24]
 8007184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007188:	681a      	ldr	r2, [r3, #0]
 800718a:	ea40 0301 	orr.w	r3, r0, r1
 800718e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007194:	681a      	ldr	r2, [r3, #0]
 8007196:	4b8f      	ldr	r3, [pc, #572]	@ (80073d4 <UART_SetConfig+0x2cc>)
 8007198:	429a      	cmp	r2, r3
 800719a:	d005      	beq.n	80071a8 <UART_SetConfig+0xa0>
 800719c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071a0:	681a      	ldr	r2, [r3, #0]
 80071a2:	4b8d      	ldr	r3, [pc, #564]	@ (80073d8 <UART_SetConfig+0x2d0>)
 80071a4:	429a      	cmp	r2, r3
 80071a6:	d104      	bne.n	80071b2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80071a8:	f7ff f87e 	bl	80062a8 <HAL_RCC_GetPCLK2Freq>
 80071ac:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80071b0:	e003      	b.n	80071ba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80071b2:	f7ff f865 	bl	8006280 <HAL_RCC_GetPCLK1Freq>
 80071b6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80071ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071be:	69db      	ldr	r3, [r3, #28]
 80071c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80071c4:	f040 810c 	bne.w	80073e0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80071c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80071cc:	2200      	movs	r2, #0
 80071ce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80071d2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80071d6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80071da:	4622      	mov	r2, r4
 80071dc:	462b      	mov	r3, r5
 80071de:	1891      	adds	r1, r2, r2
 80071e0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80071e2:	415b      	adcs	r3, r3
 80071e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80071e6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80071ea:	4621      	mov	r1, r4
 80071ec:	eb12 0801 	adds.w	r8, r2, r1
 80071f0:	4629      	mov	r1, r5
 80071f2:	eb43 0901 	adc.w	r9, r3, r1
 80071f6:	f04f 0200 	mov.w	r2, #0
 80071fa:	f04f 0300 	mov.w	r3, #0
 80071fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007202:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007206:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800720a:	4690      	mov	r8, r2
 800720c:	4699      	mov	r9, r3
 800720e:	4623      	mov	r3, r4
 8007210:	eb18 0303 	adds.w	r3, r8, r3
 8007214:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007218:	462b      	mov	r3, r5
 800721a:	eb49 0303 	adc.w	r3, r9, r3
 800721e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007222:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007226:	685b      	ldr	r3, [r3, #4]
 8007228:	2200      	movs	r2, #0
 800722a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800722e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007232:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007236:	460b      	mov	r3, r1
 8007238:	18db      	adds	r3, r3, r3
 800723a:	653b      	str	r3, [r7, #80]	@ 0x50
 800723c:	4613      	mov	r3, r2
 800723e:	eb42 0303 	adc.w	r3, r2, r3
 8007242:	657b      	str	r3, [r7, #84]	@ 0x54
 8007244:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007248:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800724c:	f7f9 fcd6 	bl	8000bfc <__aeabi_uldivmod>
 8007250:	4602      	mov	r2, r0
 8007252:	460b      	mov	r3, r1
 8007254:	4b61      	ldr	r3, [pc, #388]	@ (80073dc <UART_SetConfig+0x2d4>)
 8007256:	fba3 2302 	umull	r2, r3, r3, r2
 800725a:	095b      	lsrs	r3, r3, #5
 800725c:	011c      	lsls	r4, r3, #4
 800725e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007262:	2200      	movs	r2, #0
 8007264:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007268:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800726c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007270:	4642      	mov	r2, r8
 8007272:	464b      	mov	r3, r9
 8007274:	1891      	adds	r1, r2, r2
 8007276:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007278:	415b      	adcs	r3, r3
 800727a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800727c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007280:	4641      	mov	r1, r8
 8007282:	eb12 0a01 	adds.w	sl, r2, r1
 8007286:	4649      	mov	r1, r9
 8007288:	eb43 0b01 	adc.w	fp, r3, r1
 800728c:	f04f 0200 	mov.w	r2, #0
 8007290:	f04f 0300 	mov.w	r3, #0
 8007294:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007298:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800729c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80072a0:	4692      	mov	sl, r2
 80072a2:	469b      	mov	fp, r3
 80072a4:	4643      	mov	r3, r8
 80072a6:	eb1a 0303 	adds.w	r3, sl, r3
 80072aa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80072ae:	464b      	mov	r3, r9
 80072b0:	eb4b 0303 	adc.w	r3, fp, r3
 80072b4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80072b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072bc:	685b      	ldr	r3, [r3, #4]
 80072be:	2200      	movs	r2, #0
 80072c0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80072c4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80072c8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80072cc:	460b      	mov	r3, r1
 80072ce:	18db      	adds	r3, r3, r3
 80072d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80072d2:	4613      	mov	r3, r2
 80072d4:	eb42 0303 	adc.w	r3, r2, r3
 80072d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80072da:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80072de:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80072e2:	f7f9 fc8b 	bl	8000bfc <__aeabi_uldivmod>
 80072e6:	4602      	mov	r2, r0
 80072e8:	460b      	mov	r3, r1
 80072ea:	4611      	mov	r1, r2
 80072ec:	4b3b      	ldr	r3, [pc, #236]	@ (80073dc <UART_SetConfig+0x2d4>)
 80072ee:	fba3 2301 	umull	r2, r3, r3, r1
 80072f2:	095b      	lsrs	r3, r3, #5
 80072f4:	2264      	movs	r2, #100	@ 0x64
 80072f6:	fb02 f303 	mul.w	r3, r2, r3
 80072fa:	1acb      	subs	r3, r1, r3
 80072fc:	00db      	lsls	r3, r3, #3
 80072fe:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007302:	4b36      	ldr	r3, [pc, #216]	@ (80073dc <UART_SetConfig+0x2d4>)
 8007304:	fba3 2302 	umull	r2, r3, r3, r2
 8007308:	095b      	lsrs	r3, r3, #5
 800730a:	005b      	lsls	r3, r3, #1
 800730c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007310:	441c      	add	r4, r3
 8007312:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007316:	2200      	movs	r2, #0
 8007318:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800731c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007320:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007324:	4642      	mov	r2, r8
 8007326:	464b      	mov	r3, r9
 8007328:	1891      	adds	r1, r2, r2
 800732a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800732c:	415b      	adcs	r3, r3
 800732e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007330:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007334:	4641      	mov	r1, r8
 8007336:	1851      	adds	r1, r2, r1
 8007338:	6339      	str	r1, [r7, #48]	@ 0x30
 800733a:	4649      	mov	r1, r9
 800733c:	414b      	adcs	r3, r1
 800733e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007340:	f04f 0200 	mov.w	r2, #0
 8007344:	f04f 0300 	mov.w	r3, #0
 8007348:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800734c:	4659      	mov	r1, fp
 800734e:	00cb      	lsls	r3, r1, #3
 8007350:	4651      	mov	r1, sl
 8007352:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007356:	4651      	mov	r1, sl
 8007358:	00ca      	lsls	r2, r1, #3
 800735a:	4610      	mov	r0, r2
 800735c:	4619      	mov	r1, r3
 800735e:	4603      	mov	r3, r0
 8007360:	4642      	mov	r2, r8
 8007362:	189b      	adds	r3, r3, r2
 8007364:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007368:	464b      	mov	r3, r9
 800736a:	460a      	mov	r2, r1
 800736c:	eb42 0303 	adc.w	r3, r2, r3
 8007370:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007378:	685b      	ldr	r3, [r3, #4]
 800737a:	2200      	movs	r2, #0
 800737c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007380:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007384:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007388:	460b      	mov	r3, r1
 800738a:	18db      	adds	r3, r3, r3
 800738c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800738e:	4613      	mov	r3, r2
 8007390:	eb42 0303 	adc.w	r3, r2, r3
 8007394:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007396:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800739a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800739e:	f7f9 fc2d 	bl	8000bfc <__aeabi_uldivmod>
 80073a2:	4602      	mov	r2, r0
 80073a4:	460b      	mov	r3, r1
 80073a6:	4b0d      	ldr	r3, [pc, #52]	@ (80073dc <UART_SetConfig+0x2d4>)
 80073a8:	fba3 1302 	umull	r1, r3, r3, r2
 80073ac:	095b      	lsrs	r3, r3, #5
 80073ae:	2164      	movs	r1, #100	@ 0x64
 80073b0:	fb01 f303 	mul.w	r3, r1, r3
 80073b4:	1ad3      	subs	r3, r2, r3
 80073b6:	00db      	lsls	r3, r3, #3
 80073b8:	3332      	adds	r3, #50	@ 0x32
 80073ba:	4a08      	ldr	r2, [pc, #32]	@ (80073dc <UART_SetConfig+0x2d4>)
 80073bc:	fba2 2303 	umull	r2, r3, r2, r3
 80073c0:	095b      	lsrs	r3, r3, #5
 80073c2:	f003 0207 	and.w	r2, r3, #7
 80073c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4422      	add	r2, r4
 80073ce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80073d0:	e106      	b.n	80075e0 <UART_SetConfig+0x4d8>
 80073d2:	bf00      	nop
 80073d4:	40011000 	.word	0x40011000
 80073d8:	40011400 	.word	0x40011400
 80073dc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80073e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80073e4:	2200      	movs	r2, #0
 80073e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80073ea:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80073ee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80073f2:	4642      	mov	r2, r8
 80073f4:	464b      	mov	r3, r9
 80073f6:	1891      	adds	r1, r2, r2
 80073f8:	6239      	str	r1, [r7, #32]
 80073fa:	415b      	adcs	r3, r3
 80073fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80073fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007402:	4641      	mov	r1, r8
 8007404:	1854      	adds	r4, r2, r1
 8007406:	4649      	mov	r1, r9
 8007408:	eb43 0501 	adc.w	r5, r3, r1
 800740c:	f04f 0200 	mov.w	r2, #0
 8007410:	f04f 0300 	mov.w	r3, #0
 8007414:	00eb      	lsls	r3, r5, #3
 8007416:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800741a:	00e2      	lsls	r2, r4, #3
 800741c:	4614      	mov	r4, r2
 800741e:	461d      	mov	r5, r3
 8007420:	4643      	mov	r3, r8
 8007422:	18e3      	adds	r3, r4, r3
 8007424:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007428:	464b      	mov	r3, r9
 800742a:	eb45 0303 	adc.w	r3, r5, r3
 800742e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007432:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007436:	685b      	ldr	r3, [r3, #4]
 8007438:	2200      	movs	r2, #0
 800743a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800743e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007442:	f04f 0200 	mov.w	r2, #0
 8007446:	f04f 0300 	mov.w	r3, #0
 800744a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800744e:	4629      	mov	r1, r5
 8007450:	008b      	lsls	r3, r1, #2
 8007452:	4621      	mov	r1, r4
 8007454:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007458:	4621      	mov	r1, r4
 800745a:	008a      	lsls	r2, r1, #2
 800745c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007460:	f7f9 fbcc 	bl	8000bfc <__aeabi_uldivmod>
 8007464:	4602      	mov	r2, r0
 8007466:	460b      	mov	r3, r1
 8007468:	4b60      	ldr	r3, [pc, #384]	@ (80075ec <UART_SetConfig+0x4e4>)
 800746a:	fba3 2302 	umull	r2, r3, r3, r2
 800746e:	095b      	lsrs	r3, r3, #5
 8007470:	011c      	lsls	r4, r3, #4
 8007472:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007476:	2200      	movs	r2, #0
 8007478:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800747c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007480:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007484:	4642      	mov	r2, r8
 8007486:	464b      	mov	r3, r9
 8007488:	1891      	adds	r1, r2, r2
 800748a:	61b9      	str	r1, [r7, #24]
 800748c:	415b      	adcs	r3, r3
 800748e:	61fb      	str	r3, [r7, #28]
 8007490:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007494:	4641      	mov	r1, r8
 8007496:	1851      	adds	r1, r2, r1
 8007498:	6139      	str	r1, [r7, #16]
 800749a:	4649      	mov	r1, r9
 800749c:	414b      	adcs	r3, r1
 800749e:	617b      	str	r3, [r7, #20]
 80074a0:	f04f 0200 	mov.w	r2, #0
 80074a4:	f04f 0300 	mov.w	r3, #0
 80074a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80074ac:	4659      	mov	r1, fp
 80074ae:	00cb      	lsls	r3, r1, #3
 80074b0:	4651      	mov	r1, sl
 80074b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80074b6:	4651      	mov	r1, sl
 80074b8:	00ca      	lsls	r2, r1, #3
 80074ba:	4610      	mov	r0, r2
 80074bc:	4619      	mov	r1, r3
 80074be:	4603      	mov	r3, r0
 80074c0:	4642      	mov	r2, r8
 80074c2:	189b      	adds	r3, r3, r2
 80074c4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80074c8:	464b      	mov	r3, r9
 80074ca:	460a      	mov	r2, r1
 80074cc:	eb42 0303 	adc.w	r3, r2, r3
 80074d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80074d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074d8:	685b      	ldr	r3, [r3, #4]
 80074da:	2200      	movs	r2, #0
 80074dc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80074de:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80074e0:	f04f 0200 	mov.w	r2, #0
 80074e4:	f04f 0300 	mov.w	r3, #0
 80074e8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80074ec:	4649      	mov	r1, r9
 80074ee:	008b      	lsls	r3, r1, #2
 80074f0:	4641      	mov	r1, r8
 80074f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80074f6:	4641      	mov	r1, r8
 80074f8:	008a      	lsls	r2, r1, #2
 80074fa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80074fe:	f7f9 fb7d 	bl	8000bfc <__aeabi_uldivmod>
 8007502:	4602      	mov	r2, r0
 8007504:	460b      	mov	r3, r1
 8007506:	4611      	mov	r1, r2
 8007508:	4b38      	ldr	r3, [pc, #224]	@ (80075ec <UART_SetConfig+0x4e4>)
 800750a:	fba3 2301 	umull	r2, r3, r3, r1
 800750e:	095b      	lsrs	r3, r3, #5
 8007510:	2264      	movs	r2, #100	@ 0x64
 8007512:	fb02 f303 	mul.w	r3, r2, r3
 8007516:	1acb      	subs	r3, r1, r3
 8007518:	011b      	lsls	r3, r3, #4
 800751a:	3332      	adds	r3, #50	@ 0x32
 800751c:	4a33      	ldr	r2, [pc, #204]	@ (80075ec <UART_SetConfig+0x4e4>)
 800751e:	fba2 2303 	umull	r2, r3, r2, r3
 8007522:	095b      	lsrs	r3, r3, #5
 8007524:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007528:	441c      	add	r4, r3
 800752a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800752e:	2200      	movs	r2, #0
 8007530:	673b      	str	r3, [r7, #112]	@ 0x70
 8007532:	677a      	str	r2, [r7, #116]	@ 0x74
 8007534:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007538:	4642      	mov	r2, r8
 800753a:	464b      	mov	r3, r9
 800753c:	1891      	adds	r1, r2, r2
 800753e:	60b9      	str	r1, [r7, #8]
 8007540:	415b      	adcs	r3, r3
 8007542:	60fb      	str	r3, [r7, #12]
 8007544:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007548:	4641      	mov	r1, r8
 800754a:	1851      	adds	r1, r2, r1
 800754c:	6039      	str	r1, [r7, #0]
 800754e:	4649      	mov	r1, r9
 8007550:	414b      	adcs	r3, r1
 8007552:	607b      	str	r3, [r7, #4]
 8007554:	f04f 0200 	mov.w	r2, #0
 8007558:	f04f 0300 	mov.w	r3, #0
 800755c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007560:	4659      	mov	r1, fp
 8007562:	00cb      	lsls	r3, r1, #3
 8007564:	4651      	mov	r1, sl
 8007566:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800756a:	4651      	mov	r1, sl
 800756c:	00ca      	lsls	r2, r1, #3
 800756e:	4610      	mov	r0, r2
 8007570:	4619      	mov	r1, r3
 8007572:	4603      	mov	r3, r0
 8007574:	4642      	mov	r2, r8
 8007576:	189b      	adds	r3, r3, r2
 8007578:	66bb      	str	r3, [r7, #104]	@ 0x68
 800757a:	464b      	mov	r3, r9
 800757c:	460a      	mov	r2, r1
 800757e:	eb42 0303 	adc.w	r3, r2, r3
 8007582:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007588:	685b      	ldr	r3, [r3, #4]
 800758a:	2200      	movs	r2, #0
 800758c:	663b      	str	r3, [r7, #96]	@ 0x60
 800758e:	667a      	str	r2, [r7, #100]	@ 0x64
 8007590:	f04f 0200 	mov.w	r2, #0
 8007594:	f04f 0300 	mov.w	r3, #0
 8007598:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800759c:	4649      	mov	r1, r9
 800759e:	008b      	lsls	r3, r1, #2
 80075a0:	4641      	mov	r1, r8
 80075a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80075a6:	4641      	mov	r1, r8
 80075a8:	008a      	lsls	r2, r1, #2
 80075aa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80075ae:	f7f9 fb25 	bl	8000bfc <__aeabi_uldivmod>
 80075b2:	4602      	mov	r2, r0
 80075b4:	460b      	mov	r3, r1
 80075b6:	4b0d      	ldr	r3, [pc, #52]	@ (80075ec <UART_SetConfig+0x4e4>)
 80075b8:	fba3 1302 	umull	r1, r3, r3, r2
 80075bc:	095b      	lsrs	r3, r3, #5
 80075be:	2164      	movs	r1, #100	@ 0x64
 80075c0:	fb01 f303 	mul.w	r3, r1, r3
 80075c4:	1ad3      	subs	r3, r2, r3
 80075c6:	011b      	lsls	r3, r3, #4
 80075c8:	3332      	adds	r3, #50	@ 0x32
 80075ca:	4a08      	ldr	r2, [pc, #32]	@ (80075ec <UART_SetConfig+0x4e4>)
 80075cc:	fba2 2303 	umull	r2, r3, r2, r3
 80075d0:	095b      	lsrs	r3, r3, #5
 80075d2:	f003 020f 	and.w	r2, r3, #15
 80075d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4422      	add	r2, r4
 80075de:	609a      	str	r2, [r3, #8]
}
 80075e0:	bf00      	nop
 80075e2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80075e6:	46bd      	mov	sp, r7
 80075e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80075ec:	51eb851f 	.word	0x51eb851f

080075f0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80075f0:	b084      	sub	sp, #16
 80075f2:	b580      	push	{r7, lr}
 80075f4:	b084      	sub	sp, #16
 80075f6:	af00      	add	r7, sp, #0
 80075f8:	6078      	str	r0, [r7, #4]
 80075fa:	f107 001c 	add.w	r0, r7, #28
 80075fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007602:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8007606:	2b01      	cmp	r3, #1
 8007608:	d123      	bne.n	8007652 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800760e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	68db      	ldr	r3, [r3, #12]
 800761a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800761e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007622:	687a      	ldr	r2, [r7, #4]
 8007624:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	68db      	ldr	r3, [r3, #12]
 800762a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007632:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007636:	2b01      	cmp	r3, #1
 8007638:	d105      	bne.n	8007646 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	68db      	ldr	r3, [r3, #12]
 800763e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f000 faa0 	bl	8007b8c <USB_CoreReset>
 800764c:	4603      	mov	r3, r0
 800764e:	73fb      	strb	r3, [r7, #15]
 8007650:	e01b      	b.n	800768a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	68db      	ldr	r3, [r3, #12]
 8007656:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f000 fa94 	bl	8007b8c <USB_CoreReset>
 8007664:	4603      	mov	r3, r0
 8007666:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007668:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800766c:	2b00      	cmp	r3, #0
 800766e:	d106      	bne.n	800767e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007674:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	639a      	str	r2, [r3, #56]	@ 0x38
 800767c:	e005      	b.n	800768a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007682:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800768a:	7fbb      	ldrb	r3, [r7, #30]
 800768c:	2b01      	cmp	r3, #1
 800768e:	d10b      	bne.n	80076a8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	689b      	ldr	r3, [r3, #8]
 8007694:	f043 0206 	orr.w	r2, r3, #6
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	689b      	ldr	r3, [r3, #8]
 80076a0:	f043 0220 	orr.w	r2, r3, #32
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80076a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	3710      	adds	r7, #16
 80076ae:	46bd      	mov	sp, r7
 80076b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80076b4:	b004      	add	sp, #16
 80076b6:	4770      	bx	lr

080076b8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b083      	sub	sp, #12
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	689b      	ldr	r3, [r3, #8]
 80076c4:	f023 0201 	bic.w	r2, r3, #1
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80076cc:	2300      	movs	r3, #0
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	370c      	adds	r7, #12
 80076d2:	46bd      	mov	sp, r7
 80076d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d8:	4770      	bx	lr

080076da <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80076da:	b580      	push	{r7, lr}
 80076dc:	b084      	sub	sp, #16
 80076de:	af00      	add	r7, sp, #0
 80076e0:	6078      	str	r0, [r7, #4]
 80076e2:	460b      	mov	r3, r1
 80076e4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80076e6:	2300      	movs	r3, #0
 80076e8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	68db      	ldr	r3, [r3, #12]
 80076ee:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80076f6:	78fb      	ldrb	r3, [r7, #3]
 80076f8:	2b01      	cmp	r3, #1
 80076fa:	d115      	bne.n	8007728 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	68db      	ldr	r3, [r3, #12]
 8007700:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007708:	200a      	movs	r0, #10
 800770a:	f7fb fde1 	bl	80032d0 <HAL_Delay>
      ms += 10U;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	330a      	adds	r3, #10
 8007712:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f000 fa2b 	bl	8007b70 <USB_GetMode>
 800771a:	4603      	mov	r3, r0
 800771c:	2b01      	cmp	r3, #1
 800771e:	d01e      	beq.n	800775e <USB_SetCurrentMode+0x84>
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	2bc7      	cmp	r3, #199	@ 0xc7
 8007724:	d9f0      	bls.n	8007708 <USB_SetCurrentMode+0x2e>
 8007726:	e01a      	b.n	800775e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007728:	78fb      	ldrb	r3, [r7, #3]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d115      	bne.n	800775a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	68db      	ldr	r3, [r3, #12]
 8007732:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800773a:	200a      	movs	r0, #10
 800773c:	f7fb fdc8 	bl	80032d0 <HAL_Delay>
      ms += 10U;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	330a      	adds	r3, #10
 8007744:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f000 fa12 	bl	8007b70 <USB_GetMode>
 800774c:	4603      	mov	r3, r0
 800774e:	2b00      	cmp	r3, #0
 8007750:	d005      	beq.n	800775e <USB_SetCurrentMode+0x84>
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	2bc7      	cmp	r3, #199	@ 0xc7
 8007756:	d9f0      	bls.n	800773a <USB_SetCurrentMode+0x60>
 8007758:	e001      	b.n	800775e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800775a:	2301      	movs	r3, #1
 800775c:	e005      	b.n	800776a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	2bc8      	cmp	r3, #200	@ 0xc8
 8007762:	d101      	bne.n	8007768 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007764:	2301      	movs	r3, #1
 8007766:	e000      	b.n	800776a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007768:	2300      	movs	r3, #0
}
 800776a:	4618      	mov	r0, r3
 800776c:	3710      	adds	r7, #16
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}
	...

08007774 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007774:	b084      	sub	sp, #16
 8007776:	b580      	push	{r7, lr}
 8007778:	b086      	sub	sp, #24
 800777a:	af00      	add	r7, sp, #0
 800777c:	6078      	str	r0, [r7, #4]
 800777e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007782:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007786:	2300      	movs	r3, #0
 8007788:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800778e:	2300      	movs	r3, #0
 8007790:	613b      	str	r3, [r7, #16]
 8007792:	e009      	b.n	80077a8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007794:	687a      	ldr	r2, [r7, #4]
 8007796:	693b      	ldr	r3, [r7, #16]
 8007798:	3340      	adds	r3, #64	@ 0x40
 800779a:	009b      	lsls	r3, r3, #2
 800779c:	4413      	add	r3, r2
 800779e:	2200      	movs	r2, #0
 80077a0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80077a2:	693b      	ldr	r3, [r7, #16]
 80077a4:	3301      	adds	r3, #1
 80077a6:	613b      	str	r3, [r7, #16]
 80077a8:	693b      	ldr	r3, [r7, #16]
 80077aa:	2b0e      	cmp	r3, #14
 80077ac:	d9f2      	bls.n	8007794 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80077ae:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d11c      	bne.n	80077f0 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077bc:	685b      	ldr	r3, [r3, #4]
 80077be:	68fa      	ldr	r2, [r7, #12]
 80077c0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80077c4:	f043 0302 	orr.w	r3, r3, #2
 80077c8:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077ce:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077da:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077e6:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	639a      	str	r2, [r3, #56]	@ 0x38
 80077ee:	e00b      	b.n	8007808 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077f4:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007800:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800780e:	461a      	mov	r2, r3
 8007810:	2300      	movs	r3, #0
 8007812:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007814:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007818:	2b01      	cmp	r3, #1
 800781a:	d10d      	bne.n	8007838 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800781c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007820:	2b00      	cmp	r3, #0
 8007822:	d104      	bne.n	800782e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007824:	2100      	movs	r1, #0
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f000 f968 	bl	8007afc <USB_SetDevSpeed>
 800782c:	e008      	b.n	8007840 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800782e:	2101      	movs	r1, #1
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f000 f963 	bl	8007afc <USB_SetDevSpeed>
 8007836:	e003      	b.n	8007840 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007838:	2103      	movs	r1, #3
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f000 f95e 	bl	8007afc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007840:	2110      	movs	r1, #16
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f000 f8fa 	bl	8007a3c <USB_FlushTxFifo>
 8007848:	4603      	mov	r3, r0
 800784a:	2b00      	cmp	r3, #0
 800784c:	d001      	beq.n	8007852 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800784e:	2301      	movs	r3, #1
 8007850:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f000 f924 	bl	8007aa0 <USB_FlushRxFifo>
 8007858:	4603      	mov	r3, r0
 800785a:	2b00      	cmp	r3, #0
 800785c:	d001      	beq.n	8007862 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800785e:	2301      	movs	r3, #1
 8007860:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007868:	461a      	mov	r2, r3
 800786a:	2300      	movs	r3, #0
 800786c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007874:	461a      	mov	r2, r3
 8007876:	2300      	movs	r3, #0
 8007878:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007880:	461a      	mov	r2, r3
 8007882:	2300      	movs	r3, #0
 8007884:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007886:	2300      	movs	r3, #0
 8007888:	613b      	str	r3, [r7, #16]
 800788a:	e043      	b.n	8007914 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800788c:	693b      	ldr	r3, [r7, #16]
 800788e:	015a      	lsls	r2, r3, #5
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	4413      	add	r3, r2
 8007894:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800789e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80078a2:	d118      	bne.n	80078d6 <USB_DevInit+0x162>
    {
      if (i == 0U)
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d10a      	bne.n	80078c0 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	015a      	lsls	r2, r3, #5
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	4413      	add	r3, r2
 80078b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078b6:	461a      	mov	r2, r3
 80078b8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80078bc:	6013      	str	r3, [r2, #0]
 80078be:	e013      	b.n	80078e8 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80078c0:	693b      	ldr	r3, [r7, #16]
 80078c2:	015a      	lsls	r2, r3, #5
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	4413      	add	r3, r2
 80078c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078cc:	461a      	mov	r2, r3
 80078ce:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80078d2:	6013      	str	r3, [r2, #0]
 80078d4:	e008      	b.n	80078e8 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80078d6:	693b      	ldr	r3, [r7, #16]
 80078d8:	015a      	lsls	r2, r3, #5
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	4413      	add	r3, r2
 80078de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078e2:	461a      	mov	r2, r3
 80078e4:	2300      	movs	r3, #0
 80078e6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80078e8:	693b      	ldr	r3, [r7, #16]
 80078ea:	015a      	lsls	r2, r3, #5
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	4413      	add	r3, r2
 80078f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078f4:	461a      	mov	r2, r3
 80078f6:	2300      	movs	r3, #0
 80078f8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	015a      	lsls	r2, r3, #5
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	4413      	add	r3, r2
 8007902:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007906:	461a      	mov	r2, r3
 8007908:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800790c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800790e:	693b      	ldr	r3, [r7, #16]
 8007910:	3301      	adds	r3, #1
 8007912:	613b      	str	r3, [r7, #16]
 8007914:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007918:	461a      	mov	r2, r3
 800791a:	693b      	ldr	r3, [r7, #16]
 800791c:	4293      	cmp	r3, r2
 800791e:	d3b5      	bcc.n	800788c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007920:	2300      	movs	r3, #0
 8007922:	613b      	str	r3, [r7, #16]
 8007924:	e043      	b.n	80079ae <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	015a      	lsls	r2, r3, #5
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	4413      	add	r3, r2
 800792e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007938:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800793c:	d118      	bne.n	8007970 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800793e:	693b      	ldr	r3, [r7, #16]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d10a      	bne.n	800795a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007944:	693b      	ldr	r3, [r7, #16]
 8007946:	015a      	lsls	r2, r3, #5
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	4413      	add	r3, r2
 800794c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007950:	461a      	mov	r2, r3
 8007952:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007956:	6013      	str	r3, [r2, #0]
 8007958:	e013      	b.n	8007982 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800795a:	693b      	ldr	r3, [r7, #16]
 800795c:	015a      	lsls	r2, r3, #5
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	4413      	add	r3, r2
 8007962:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007966:	461a      	mov	r2, r3
 8007968:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800796c:	6013      	str	r3, [r2, #0]
 800796e:	e008      	b.n	8007982 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007970:	693b      	ldr	r3, [r7, #16]
 8007972:	015a      	lsls	r2, r3, #5
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	4413      	add	r3, r2
 8007978:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800797c:	461a      	mov	r2, r3
 800797e:	2300      	movs	r3, #0
 8007980:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007982:	693b      	ldr	r3, [r7, #16]
 8007984:	015a      	lsls	r2, r3, #5
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	4413      	add	r3, r2
 800798a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800798e:	461a      	mov	r2, r3
 8007990:	2300      	movs	r3, #0
 8007992:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007994:	693b      	ldr	r3, [r7, #16]
 8007996:	015a      	lsls	r2, r3, #5
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	4413      	add	r3, r2
 800799c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079a0:	461a      	mov	r2, r3
 80079a2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80079a6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80079a8:	693b      	ldr	r3, [r7, #16]
 80079aa:	3301      	adds	r3, #1
 80079ac:	613b      	str	r3, [r7, #16]
 80079ae:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80079b2:	461a      	mov	r2, r3
 80079b4:	693b      	ldr	r3, [r7, #16]
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d3b5      	bcc.n	8007926 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079c0:	691b      	ldr	r3, [r3, #16]
 80079c2:	68fa      	ldr	r2, [r7, #12]
 80079c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80079c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80079cc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2200      	movs	r2, #0
 80079d2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80079da:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80079dc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d105      	bne.n	80079f0 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	699b      	ldr	r3, [r3, #24]
 80079e8:	f043 0210 	orr.w	r2, r3, #16
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	699a      	ldr	r2, [r3, #24]
 80079f4:	4b10      	ldr	r3, [pc, #64]	@ (8007a38 <USB_DevInit+0x2c4>)
 80079f6:	4313      	orrs	r3, r2
 80079f8:	687a      	ldr	r2, [r7, #4]
 80079fa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80079fc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d005      	beq.n	8007a10 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	699b      	ldr	r3, [r3, #24]
 8007a08:	f043 0208 	orr.w	r2, r3, #8
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007a10:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007a14:	2b01      	cmp	r3, #1
 8007a16:	d107      	bne.n	8007a28 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	699b      	ldr	r3, [r3, #24]
 8007a1c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007a20:	f043 0304 	orr.w	r3, r3, #4
 8007a24:	687a      	ldr	r2, [r7, #4]
 8007a26:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007a28:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	3718      	adds	r7, #24
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007a34:	b004      	add	sp, #16
 8007a36:	4770      	bx	lr
 8007a38:	803c3800 	.word	0x803c3800

08007a3c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	b085      	sub	sp, #20
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
 8007a44:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007a46:	2300      	movs	r3, #0
 8007a48:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	3301      	adds	r3, #1
 8007a4e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007a56:	d901      	bls.n	8007a5c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007a58:	2303      	movs	r3, #3
 8007a5a:	e01b      	b.n	8007a94 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	691b      	ldr	r3, [r3, #16]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	daf2      	bge.n	8007a4a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007a64:	2300      	movs	r3, #0
 8007a66:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	019b      	lsls	r3, r3, #6
 8007a6c:	f043 0220 	orr.w	r2, r3, #32
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	3301      	adds	r3, #1
 8007a78:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007a80:	d901      	bls.n	8007a86 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007a82:	2303      	movs	r3, #3
 8007a84:	e006      	b.n	8007a94 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	691b      	ldr	r3, [r3, #16]
 8007a8a:	f003 0320 	and.w	r3, r3, #32
 8007a8e:	2b20      	cmp	r3, #32
 8007a90:	d0f0      	beq.n	8007a74 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007a92:	2300      	movs	r3, #0
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	3714      	adds	r7, #20
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9e:	4770      	bx	lr

08007aa0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007aa0:	b480      	push	{r7}
 8007aa2:	b085      	sub	sp, #20
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	3301      	adds	r3, #1
 8007ab0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007ab8:	d901      	bls.n	8007abe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007aba:	2303      	movs	r3, #3
 8007abc:	e018      	b.n	8007af0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	691b      	ldr	r3, [r3, #16]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	daf2      	bge.n	8007aac <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2210      	movs	r2, #16
 8007ace:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	3301      	adds	r3, #1
 8007ad4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007adc:	d901      	bls.n	8007ae2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007ade:	2303      	movs	r3, #3
 8007ae0:	e006      	b.n	8007af0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	691b      	ldr	r3, [r3, #16]
 8007ae6:	f003 0310 	and.w	r3, r3, #16
 8007aea:	2b10      	cmp	r3, #16
 8007aec:	d0f0      	beq.n	8007ad0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007aee:	2300      	movs	r3, #0
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	3714      	adds	r7, #20
 8007af4:	46bd      	mov	sp, r7
 8007af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afa:	4770      	bx	lr

08007afc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b085      	sub	sp, #20
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
 8007b04:	460b      	mov	r3, r1
 8007b06:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b12:	681a      	ldr	r2, [r3, #0]
 8007b14:	78fb      	ldrb	r3, [r7, #3]
 8007b16:	68f9      	ldr	r1, [r7, #12]
 8007b18:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007b1c:	4313      	orrs	r3, r2
 8007b1e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007b20:	2300      	movs	r3, #0
}
 8007b22:	4618      	mov	r0, r3
 8007b24:	3714      	adds	r7, #20
 8007b26:	46bd      	mov	sp, r7
 8007b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2c:	4770      	bx	lr

08007b2e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007b2e:	b480      	push	{r7}
 8007b30:	b085      	sub	sp, #20
 8007b32:	af00      	add	r7, sp, #0
 8007b34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	68fa      	ldr	r2, [r7, #12]
 8007b44:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007b48:	f023 0303 	bic.w	r3, r3, #3
 8007b4c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b54:	685b      	ldr	r3, [r3, #4]
 8007b56:	68fa      	ldr	r2, [r7, #12]
 8007b58:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007b5c:	f043 0302 	orr.w	r3, r3, #2
 8007b60:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007b62:	2300      	movs	r3, #0
}
 8007b64:	4618      	mov	r0, r3
 8007b66:	3714      	adds	r7, #20
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6e:	4770      	bx	lr

08007b70 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007b70:	b480      	push	{r7}
 8007b72:	b083      	sub	sp, #12
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	695b      	ldr	r3, [r3, #20]
 8007b7c:	f003 0301 	and.w	r3, r3, #1
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	370c      	adds	r7, #12
 8007b84:	46bd      	mov	sp, r7
 8007b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8a:	4770      	bx	lr

08007b8c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b085      	sub	sp, #20
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007b94:	2300      	movs	r3, #0
 8007b96:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	3301      	adds	r3, #1
 8007b9c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007ba4:	d901      	bls.n	8007baa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007ba6:	2303      	movs	r3, #3
 8007ba8:	e01b      	b.n	8007be2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	691b      	ldr	r3, [r3, #16]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	daf2      	bge.n	8007b98 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	691b      	ldr	r3, [r3, #16]
 8007bba:	f043 0201 	orr.w	r2, r3, #1
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	3301      	adds	r3, #1
 8007bc6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007bce:	d901      	bls.n	8007bd4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007bd0:	2303      	movs	r3, #3
 8007bd2:	e006      	b.n	8007be2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	691b      	ldr	r3, [r3, #16]
 8007bd8:	f003 0301 	and.w	r3, r3, #1
 8007bdc:	2b01      	cmp	r3, #1
 8007bde:	d0f0      	beq.n	8007bc2 <USB_CoreReset+0x36>

  return HAL_OK;
 8007be0:	2300      	movs	r3, #0
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	3714      	adds	r7, #20
 8007be6:	46bd      	mov	sp, r7
 8007be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bec:	4770      	bx	lr
	...

08007bf0 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b084      	sub	sp, #16
 8007bf4:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8007bf6:	4b87      	ldr	r3, [pc, #540]	@ (8007e14 <MX_LWIP_Init+0x224>)
 8007bf8:	22c0      	movs	r2, #192	@ 0xc0
 8007bfa:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8007bfc:	4b85      	ldr	r3, [pc, #532]	@ (8007e14 <MX_LWIP_Init+0x224>)
 8007bfe:	22a8      	movs	r2, #168	@ 0xa8
 8007c00:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8007c02:	4b84      	ldr	r3, [pc, #528]	@ (8007e14 <MX_LWIP_Init+0x224>)
 8007c04:	2201      	movs	r2, #1
 8007c06:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 156;
 8007c08:	4b82      	ldr	r3, [pc, #520]	@ (8007e14 <MX_LWIP_Init+0x224>)
 8007c0a:	229c      	movs	r2, #156	@ 0x9c
 8007c0c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8007c0e:	4b82      	ldr	r3, [pc, #520]	@ (8007e18 <MX_LWIP_Init+0x228>)
 8007c10:	22ff      	movs	r2, #255	@ 0xff
 8007c12:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8007c14:	4b80      	ldr	r3, [pc, #512]	@ (8007e18 <MX_LWIP_Init+0x228>)
 8007c16:	22ff      	movs	r2, #255	@ 0xff
 8007c18:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8007c1a:	4b7f      	ldr	r3, [pc, #508]	@ (8007e18 <MX_LWIP_Init+0x228>)
 8007c1c:	22ff      	movs	r2, #255	@ 0xff
 8007c1e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8007c20:	4b7d      	ldr	r3, [pc, #500]	@ (8007e18 <MX_LWIP_Init+0x228>)
 8007c22:	2200      	movs	r2, #0
 8007c24:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8007c26:	4b7d      	ldr	r3, [pc, #500]	@ (8007e1c <MX_LWIP_Init+0x22c>)
 8007c28:	22c0      	movs	r2, #192	@ 0xc0
 8007c2a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8007c2c:	4b7b      	ldr	r3, [pc, #492]	@ (8007e1c <MX_LWIP_Init+0x22c>)
 8007c2e:	22a8      	movs	r2, #168	@ 0xa8
 8007c30:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 8007c32:	4b7a      	ldr	r3, [pc, #488]	@ (8007e1c <MX_LWIP_Init+0x22c>)
 8007c34:	2201      	movs	r2, #1
 8007c36:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8007c38:	4b78      	ldr	r3, [pc, #480]	@ (8007e1c <MX_LWIP_Init+0x22c>)
 8007c3a:	2201      	movs	r2, #1
 8007c3c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack without RTOS */
  lwip_init();
 8007c3e:	f000 fd02 	bl	8008646 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8007c42:	4b74      	ldr	r3, [pc, #464]	@ (8007e14 <MX_LWIP_Init+0x224>)
 8007c44:	781b      	ldrb	r3, [r3, #0]
 8007c46:	061a      	lsls	r2, r3, #24
 8007c48:	4b72      	ldr	r3, [pc, #456]	@ (8007e14 <MX_LWIP_Init+0x224>)
 8007c4a:	785b      	ldrb	r3, [r3, #1]
 8007c4c:	041b      	lsls	r3, r3, #16
 8007c4e:	431a      	orrs	r2, r3
 8007c50:	4b70      	ldr	r3, [pc, #448]	@ (8007e14 <MX_LWIP_Init+0x224>)
 8007c52:	789b      	ldrb	r3, [r3, #2]
 8007c54:	021b      	lsls	r3, r3, #8
 8007c56:	4313      	orrs	r3, r2
 8007c58:	4a6e      	ldr	r2, [pc, #440]	@ (8007e14 <MX_LWIP_Init+0x224>)
 8007c5a:	78d2      	ldrb	r2, [r2, #3]
 8007c5c:	4313      	orrs	r3, r2
 8007c5e:	061a      	lsls	r2, r3, #24
 8007c60:	4b6c      	ldr	r3, [pc, #432]	@ (8007e14 <MX_LWIP_Init+0x224>)
 8007c62:	781b      	ldrb	r3, [r3, #0]
 8007c64:	0619      	lsls	r1, r3, #24
 8007c66:	4b6b      	ldr	r3, [pc, #428]	@ (8007e14 <MX_LWIP_Init+0x224>)
 8007c68:	785b      	ldrb	r3, [r3, #1]
 8007c6a:	041b      	lsls	r3, r3, #16
 8007c6c:	4319      	orrs	r1, r3
 8007c6e:	4b69      	ldr	r3, [pc, #420]	@ (8007e14 <MX_LWIP_Init+0x224>)
 8007c70:	789b      	ldrb	r3, [r3, #2]
 8007c72:	021b      	lsls	r3, r3, #8
 8007c74:	430b      	orrs	r3, r1
 8007c76:	4967      	ldr	r1, [pc, #412]	@ (8007e14 <MX_LWIP_Init+0x224>)
 8007c78:	78c9      	ldrb	r1, [r1, #3]
 8007c7a:	430b      	orrs	r3, r1
 8007c7c:	021b      	lsls	r3, r3, #8
 8007c7e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007c82:	431a      	orrs	r2, r3
 8007c84:	4b63      	ldr	r3, [pc, #396]	@ (8007e14 <MX_LWIP_Init+0x224>)
 8007c86:	781b      	ldrb	r3, [r3, #0]
 8007c88:	0619      	lsls	r1, r3, #24
 8007c8a:	4b62      	ldr	r3, [pc, #392]	@ (8007e14 <MX_LWIP_Init+0x224>)
 8007c8c:	785b      	ldrb	r3, [r3, #1]
 8007c8e:	041b      	lsls	r3, r3, #16
 8007c90:	4319      	orrs	r1, r3
 8007c92:	4b60      	ldr	r3, [pc, #384]	@ (8007e14 <MX_LWIP_Init+0x224>)
 8007c94:	789b      	ldrb	r3, [r3, #2]
 8007c96:	021b      	lsls	r3, r3, #8
 8007c98:	430b      	orrs	r3, r1
 8007c9a:	495e      	ldr	r1, [pc, #376]	@ (8007e14 <MX_LWIP_Init+0x224>)
 8007c9c:	78c9      	ldrb	r1, [r1, #3]
 8007c9e:	430b      	orrs	r3, r1
 8007ca0:	0a1b      	lsrs	r3, r3, #8
 8007ca2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007ca6:	431a      	orrs	r2, r3
 8007ca8:	4b5a      	ldr	r3, [pc, #360]	@ (8007e14 <MX_LWIP_Init+0x224>)
 8007caa:	781b      	ldrb	r3, [r3, #0]
 8007cac:	0619      	lsls	r1, r3, #24
 8007cae:	4b59      	ldr	r3, [pc, #356]	@ (8007e14 <MX_LWIP_Init+0x224>)
 8007cb0:	785b      	ldrb	r3, [r3, #1]
 8007cb2:	041b      	lsls	r3, r3, #16
 8007cb4:	4319      	orrs	r1, r3
 8007cb6:	4b57      	ldr	r3, [pc, #348]	@ (8007e14 <MX_LWIP_Init+0x224>)
 8007cb8:	789b      	ldrb	r3, [r3, #2]
 8007cba:	021b      	lsls	r3, r3, #8
 8007cbc:	430b      	orrs	r3, r1
 8007cbe:	4955      	ldr	r1, [pc, #340]	@ (8007e14 <MX_LWIP_Init+0x224>)
 8007cc0:	78c9      	ldrb	r1, [r1, #3]
 8007cc2:	430b      	orrs	r3, r1
 8007cc4:	0e1b      	lsrs	r3, r3, #24
 8007cc6:	4313      	orrs	r3, r2
 8007cc8:	4a55      	ldr	r2, [pc, #340]	@ (8007e20 <MX_LWIP_Init+0x230>)
 8007cca:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8007ccc:	4b52      	ldr	r3, [pc, #328]	@ (8007e18 <MX_LWIP_Init+0x228>)
 8007cce:	781b      	ldrb	r3, [r3, #0]
 8007cd0:	061a      	lsls	r2, r3, #24
 8007cd2:	4b51      	ldr	r3, [pc, #324]	@ (8007e18 <MX_LWIP_Init+0x228>)
 8007cd4:	785b      	ldrb	r3, [r3, #1]
 8007cd6:	041b      	lsls	r3, r3, #16
 8007cd8:	431a      	orrs	r2, r3
 8007cda:	4b4f      	ldr	r3, [pc, #316]	@ (8007e18 <MX_LWIP_Init+0x228>)
 8007cdc:	789b      	ldrb	r3, [r3, #2]
 8007cde:	021b      	lsls	r3, r3, #8
 8007ce0:	4313      	orrs	r3, r2
 8007ce2:	4a4d      	ldr	r2, [pc, #308]	@ (8007e18 <MX_LWIP_Init+0x228>)
 8007ce4:	78d2      	ldrb	r2, [r2, #3]
 8007ce6:	4313      	orrs	r3, r2
 8007ce8:	061a      	lsls	r2, r3, #24
 8007cea:	4b4b      	ldr	r3, [pc, #300]	@ (8007e18 <MX_LWIP_Init+0x228>)
 8007cec:	781b      	ldrb	r3, [r3, #0]
 8007cee:	0619      	lsls	r1, r3, #24
 8007cf0:	4b49      	ldr	r3, [pc, #292]	@ (8007e18 <MX_LWIP_Init+0x228>)
 8007cf2:	785b      	ldrb	r3, [r3, #1]
 8007cf4:	041b      	lsls	r3, r3, #16
 8007cf6:	4319      	orrs	r1, r3
 8007cf8:	4b47      	ldr	r3, [pc, #284]	@ (8007e18 <MX_LWIP_Init+0x228>)
 8007cfa:	789b      	ldrb	r3, [r3, #2]
 8007cfc:	021b      	lsls	r3, r3, #8
 8007cfe:	430b      	orrs	r3, r1
 8007d00:	4945      	ldr	r1, [pc, #276]	@ (8007e18 <MX_LWIP_Init+0x228>)
 8007d02:	78c9      	ldrb	r1, [r1, #3]
 8007d04:	430b      	orrs	r3, r1
 8007d06:	021b      	lsls	r3, r3, #8
 8007d08:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007d0c:	431a      	orrs	r2, r3
 8007d0e:	4b42      	ldr	r3, [pc, #264]	@ (8007e18 <MX_LWIP_Init+0x228>)
 8007d10:	781b      	ldrb	r3, [r3, #0]
 8007d12:	0619      	lsls	r1, r3, #24
 8007d14:	4b40      	ldr	r3, [pc, #256]	@ (8007e18 <MX_LWIP_Init+0x228>)
 8007d16:	785b      	ldrb	r3, [r3, #1]
 8007d18:	041b      	lsls	r3, r3, #16
 8007d1a:	4319      	orrs	r1, r3
 8007d1c:	4b3e      	ldr	r3, [pc, #248]	@ (8007e18 <MX_LWIP_Init+0x228>)
 8007d1e:	789b      	ldrb	r3, [r3, #2]
 8007d20:	021b      	lsls	r3, r3, #8
 8007d22:	430b      	orrs	r3, r1
 8007d24:	493c      	ldr	r1, [pc, #240]	@ (8007e18 <MX_LWIP_Init+0x228>)
 8007d26:	78c9      	ldrb	r1, [r1, #3]
 8007d28:	430b      	orrs	r3, r1
 8007d2a:	0a1b      	lsrs	r3, r3, #8
 8007d2c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007d30:	431a      	orrs	r2, r3
 8007d32:	4b39      	ldr	r3, [pc, #228]	@ (8007e18 <MX_LWIP_Init+0x228>)
 8007d34:	781b      	ldrb	r3, [r3, #0]
 8007d36:	0619      	lsls	r1, r3, #24
 8007d38:	4b37      	ldr	r3, [pc, #220]	@ (8007e18 <MX_LWIP_Init+0x228>)
 8007d3a:	785b      	ldrb	r3, [r3, #1]
 8007d3c:	041b      	lsls	r3, r3, #16
 8007d3e:	4319      	orrs	r1, r3
 8007d40:	4b35      	ldr	r3, [pc, #212]	@ (8007e18 <MX_LWIP_Init+0x228>)
 8007d42:	789b      	ldrb	r3, [r3, #2]
 8007d44:	021b      	lsls	r3, r3, #8
 8007d46:	430b      	orrs	r3, r1
 8007d48:	4933      	ldr	r1, [pc, #204]	@ (8007e18 <MX_LWIP_Init+0x228>)
 8007d4a:	78c9      	ldrb	r1, [r1, #3]
 8007d4c:	430b      	orrs	r3, r1
 8007d4e:	0e1b      	lsrs	r3, r3, #24
 8007d50:	4313      	orrs	r3, r2
 8007d52:	4a34      	ldr	r2, [pc, #208]	@ (8007e24 <MX_LWIP_Init+0x234>)
 8007d54:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8007d56:	4b31      	ldr	r3, [pc, #196]	@ (8007e1c <MX_LWIP_Init+0x22c>)
 8007d58:	781b      	ldrb	r3, [r3, #0]
 8007d5a:	061a      	lsls	r2, r3, #24
 8007d5c:	4b2f      	ldr	r3, [pc, #188]	@ (8007e1c <MX_LWIP_Init+0x22c>)
 8007d5e:	785b      	ldrb	r3, [r3, #1]
 8007d60:	041b      	lsls	r3, r3, #16
 8007d62:	431a      	orrs	r2, r3
 8007d64:	4b2d      	ldr	r3, [pc, #180]	@ (8007e1c <MX_LWIP_Init+0x22c>)
 8007d66:	789b      	ldrb	r3, [r3, #2]
 8007d68:	021b      	lsls	r3, r3, #8
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	4a2b      	ldr	r2, [pc, #172]	@ (8007e1c <MX_LWIP_Init+0x22c>)
 8007d6e:	78d2      	ldrb	r2, [r2, #3]
 8007d70:	4313      	orrs	r3, r2
 8007d72:	061a      	lsls	r2, r3, #24
 8007d74:	4b29      	ldr	r3, [pc, #164]	@ (8007e1c <MX_LWIP_Init+0x22c>)
 8007d76:	781b      	ldrb	r3, [r3, #0]
 8007d78:	0619      	lsls	r1, r3, #24
 8007d7a:	4b28      	ldr	r3, [pc, #160]	@ (8007e1c <MX_LWIP_Init+0x22c>)
 8007d7c:	785b      	ldrb	r3, [r3, #1]
 8007d7e:	041b      	lsls	r3, r3, #16
 8007d80:	4319      	orrs	r1, r3
 8007d82:	4b26      	ldr	r3, [pc, #152]	@ (8007e1c <MX_LWIP_Init+0x22c>)
 8007d84:	789b      	ldrb	r3, [r3, #2]
 8007d86:	021b      	lsls	r3, r3, #8
 8007d88:	430b      	orrs	r3, r1
 8007d8a:	4924      	ldr	r1, [pc, #144]	@ (8007e1c <MX_LWIP_Init+0x22c>)
 8007d8c:	78c9      	ldrb	r1, [r1, #3]
 8007d8e:	430b      	orrs	r3, r1
 8007d90:	021b      	lsls	r3, r3, #8
 8007d92:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007d96:	431a      	orrs	r2, r3
 8007d98:	4b20      	ldr	r3, [pc, #128]	@ (8007e1c <MX_LWIP_Init+0x22c>)
 8007d9a:	781b      	ldrb	r3, [r3, #0]
 8007d9c:	0619      	lsls	r1, r3, #24
 8007d9e:	4b1f      	ldr	r3, [pc, #124]	@ (8007e1c <MX_LWIP_Init+0x22c>)
 8007da0:	785b      	ldrb	r3, [r3, #1]
 8007da2:	041b      	lsls	r3, r3, #16
 8007da4:	4319      	orrs	r1, r3
 8007da6:	4b1d      	ldr	r3, [pc, #116]	@ (8007e1c <MX_LWIP_Init+0x22c>)
 8007da8:	789b      	ldrb	r3, [r3, #2]
 8007daa:	021b      	lsls	r3, r3, #8
 8007dac:	430b      	orrs	r3, r1
 8007dae:	491b      	ldr	r1, [pc, #108]	@ (8007e1c <MX_LWIP_Init+0x22c>)
 8007db0:	78c9      	ldrb	r1, [r1, #3]
 8007db2:	430b      	orrs	r3, r1
 8007db4:	0a1b      	lsrs	r3, r3, #8
 8007db6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007dba:	431a      	orrs	r2, r3
 8007dbc:	4b17      	ldr	r3, [pc, #92]	@ (8007e1c <MX_LWIP_Init+0x22c>)
 8007dbe:	781b      	ldrb	r3, [r3, #0]
 8007dc0:	0619      	lsls	r1, r3, #24
 8007dc2:	4b16      	ldr	r3, [pc, #88]	@ (8007e1c <MX_LWIP_Init+0x22c>)
 8007dc4:	785b      	ldrb	r3, [r3, #1]
 8007dc6:	041b      	lsls	r3, r3, #16
 8007dc8:	4319      	orrs	r1, r3
 8007dca:	4b14      	ldr	r3, [pc, #80]	@ (8007e1c <MX_LWIP_Init+0x22c>)
 8007dcc:	789b      	ldrb	r3, [r3, #2]
 8007dce:	021b      	lsls	r3, r3, #8
 8007dd0:	430b      	orrs	r3, r1
 8007dd2:	4912      	ldr	r1, [pc, #72]	@ (8007e1c <MX_LWIP_Init+0x22c>)
 8007dd4:	78c9      	ldrb	r1, [r1, #3]
 8007dd6:	430b      	orrs	r3, r1
 8007dd8:	0e1b      	lsrs	r3, r3, #24
 8007dda:	4313      	orrs	r3, r2
 8007ddc:	4a12      	ldr	r2, [pc, #72]	@ (8007e28 <MX_LWIP_Init+0x238>)
 8007dde:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8007de0:	4b12      	ldr	r3, [pc, #72]	@ (8007e2c <MX_LWIP_Init+0x23c>)
 8007de2:	9302      	str	r3, [sp, #8]
 8007de4:	4b12      	ldr	r3, [pc, #72]	@ (8007e30 <MX_LWIP_Init+0x240>)
 8007de6:	9301      	str	r3, [sp, #4]
 8007de8:	2300      	movs	r3, #0
 8007dea:	9300      	str	r3, [sp, #0]
 8007dec:	4b0e      	ldr	r3, [pc, #56]	@ (8007e28 <MX_LWIP_Init+0x238>)
 8007dee:	4a0d      	ldr	r2, [pc, #52]	@ (8007e24 <MX_LWIP_Init+0x234>)
 8007df0:	490b      	ldr	r1, [pc, #44]	@ (8007e20 <MX_LWIP_Init+0x230>)
 8007df2:	4810      	ldr	r0, [pc, #64]	@ (8007e34 <MX_LWIP_Init+0x244>)
 8007df4:	f001 f912 	bl	800901c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8007df8:	480e      	ldr	r0, [pc, #56]	@ (8007e34 <MX_LWIP_Init+0x244>)
 8007dfa:	f001 fac1 	bl	8009380 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8007dfe:	480d      	ldr	r0, [pc, #52]	@ (8007e34 <MX_LWIP_Init+0x244>)
 8007e00:	f001 face 	bl	80093a0 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8007e04:	490c      	ldr	r1, [pc, #48]	@ (8007e38 <MX_LWIP_Init+0x248>)
 8007e06:	480b      	ldr	r0, [pc, #44]	@ (8007e34 <MX_LWIP_Init+0x244>)
 8007e08:	f001 fbcc 	bl	80095a4 <netif_set_link_callback>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8007e0c:	bf00      	nop
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}
 8007e12:	bf00      	nop
 8007e14:	200009fc 	.word	0x200009fc
 8007e18:	20000a00 	.word	0x20000a00
 8007e1c:	20000a04 	.word	0x20000a04
 8007e20:	200009f0 	.word	0x200009f0
 8007e24:	200009f4 	.word	0x200009f4
 8007e28:	200009f8 	.word	0x200009f8
 8007e2c:	0801263d 	.word	0x0801263d
 8007e30:	08008159 	.word	0x08008159
 8007e34:	200009bc 	.word	0x200009bc
 8007e38:	08007e8d 	.word	0x08007e8d

08007e3c <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b082      	sub	sp, #8
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 8007e44:	f7fb fa38 	bl	80032b8 <HAL_GetTick>
 8007e48:	4602      	mov	r2, r0
 8007e4a:	4b08      	ldr	r3, [pc, #32]	@ (8007e6c <Ethernet_Link_Periodic_Handle+0x30>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	1ad3      	subs	r3, r2, r3
 8007e50:	2b63      	cmp	r3, #99	@ 0x63
 8007e52:	d907      	bls.n	8007e64 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 8007e54:	f7fb fa30 	bl	80032b8 <HAL_GetTick>
 8007e58:	4603      	mov	r3, r0
 8007e5a:	4a04      	ldr	r2, [pc, #16]	@ (8007e6c <Ethernet_Link_Periodic_Handle+0x30>)
 8007e5c:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f000 fac6 	bl	80083f0 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 8007e64:	bf00      	nop
 8007e66:	3708      	adds	r7, #8
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bd80      	pop	{r7, pc}
 8007e6c:	200009b8 	.word	0x200009b8

08007e70 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8007e74:	4804      	ldr	r0, [pc, #16]	@ (8007e88 <MX_LWIP_Process+0x18>)
 8007e76:	f000 f94f 	bl	8008118 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8007e7a:	f007 fca3 	bl	800f7c4 <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 8007e7e:	4802      	ldr	r0, [pc, #8]	@ (8007e88 <MX_LWIP_Process+0x18>)
 8007e80:	f7ff ffdc 	bl	8007e3c <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8007e84:	bf00      	nop
 8007e86:	bd80      	pop	{r7, pc}
 8007e88:	200009bc 	.word	0x200009bc

08007e8c <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b083      	sub	sp, #12
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8007e94:	bf00      	nop
 8007e96:	370c      	adds	r7, #12
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9e:	4770      	bx	lr

08007ea0 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b084      	sub	sp, #16
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8007eac:	4b44      	ldr	r3, [pc, #272]	@ (8007fc0 <low_level_init+0x120>)
 8007eae:	4a45      	ldr	r2, [pc, #276]	@ (8007fc4 <low_level_init+0x124>)
 8007eb0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x50;
 8007eb2:	2350      	movs	r3, #80	@ 0x50
 8007eb4:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x39;
 8007eb6:	2339      	movs	r3, #57	@ 0x39
 8007eb8:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0x64;
 8007eba:	2364      	movs	r3, #100	@ 0x64
 8007ebc:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0xFD;
 8007ebe:	23fd      	movs	r3, #253	@ 0xfd
 8007ec0:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x60;
 8007ec2:	2360      	movs	r3, #96	@ 0x60
 8007ec4:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8007eca:	4a3d      	ldr	r2, [pc, #244]	@ (8007fc0 <low_level_init+0x120>)
 8007ecc:	f107 0308 	add.w	r3, r7, #8
 8007ed0:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8007ed2:	4b3b      	ldr	r3, [pc, #236]	@ (8007fc0 <low_level_init+0x120>)
 8007ed4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8007ed8:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8007eda:	4b39      	ldr	r3, [pc, #228]	@ (8007fc0 <low_level_init+0x120>)
 8007edc:	4a3a      	ldr	r2, [pc, #232]	@ (8007fc8 <low_level_init+0x128>)
 8007ede:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8007ee0:	4b37      	ldr	r3, [pc, #220]	@ (8007fc0 <low_level_init+0x120>)
 8007ee2:	4a3a      	ldr	r2, [pc, #232]	@ (8007fcc <low_level_init+0x12c>)
 8007ee4:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8007ee6:	4b36      	ldr	r3, [pc, #216]	@ (8007fc0 <low_level_init+0x120>)
 8007ee8:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8007eec:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8007eee:	4834      	ldr	r0, [pc, #208]	@ (8007fc0 <low_level_init+0x120>)
 8007ef0:	f7fb fefc 	bl	8003cec <HAL_ETH_Init>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8007ef8:	2238      	movs	r2, #56	@ 0x38
 8007efa:	2100      	movs	r1, #0
 8007efc:	4834      	ldr	r0, [pc, #208]	@ (8007fd0 <low_level_init+0x130>)
 8007efe:	f00a ff62 	bl	8012dc6 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8007f02:	4b33      	ldr	r3, [pc, #204]	@ (8007fd0 <low_level_init+0x130>)
 8007f04:	2221      	movs	r2, #33	@ 0x21
 8007f06:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8007f08:	4b31      	ldr	r3, [pc, #196]	@ (8007fd0 <low_level_init+0x130>)
 8007f0a:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8007f0e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8007f10:	4b2f      	ldr	r3, [pc, #188]	@ (8007fd0 <low_level_init+0x130>)
 8007f12:	2200      	movs	r2, #0
 8007f14:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8007f16:	482f      	ldr	r0, [pc, #188]	@ (8007fd4 <low_level_init+0x134>)
 8007f18:	f000 ff48 	bl	8008dac <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2206      	movs	r2, #6
 8007f20:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8007f24:	4b26      	ldr	r3, [pc, #152]	@ (8007fc0 <low_level_init+0x120>)
 8007f26:	685b      	ldr	r3, [r3, #4]
 8007f28:	781a      	ldrb	r2, [r3, #0]
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8007f30:	4b23      	ldr	r3, [pc, #140]	@ (8007fc0 <low_level_init+0x120>)
 8007f32:	685b      	ldr	r3, [r3, #4]
 8007f34:	785a      	ldrb	r2, [r3, #1]
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8007f3c:	4b20      	ldr	r3, [pc, #128]	@ (8007fc0 <low_level_init+0x120>)
 8007f3e:	685b      	ldr	r3, [r3, #4]
 8007f40:	789a      	ldrb	r2, [r3, #2]
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8007f48:	4b1d      	ldr	r3, [pc, #116]	@ (8007fc0 <low_level_init+0x120>)
 8007f4a:	685b      	ldr	r3, [r3, #4]
 8007f4c:	78da      	ldrb	r2, [r3, #3]
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8007f54:	4b1a      	ldr	r3, [pc, #104]	@ (8007fc0 <low_level_init+0x120>)
 8007f56:	685b      	ldr	r3, [r3, #4]
 8007f58:	791a      	ldrb	r2, [r3, #4]
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8007f60:	4b17      	ldr	r3, [pc, #92]	@ (8007fc0 <low_level_init+0x120>)
 8007f62:	685b      	ldr	r3, [r3, #4]
 8007f64:	795a      	ldrb	r2, [r3, #5]
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8007f72:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007f7a:	f043 030a 	orr.w	r3, r3, #10
 8007f7e:	b2da      	uxtb	r2, r3
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8007f86:	4914      	ldr	r1, [pc, #80]	@ (8007fd8 <low_level_init+0x138>)
 8007f88:	4814      	ldr	r0, [pc, #80]	@ (8007fdc <low_level_init+0x13c>)
 8007f8a:	f7fb f828 	bl	8002fde <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 8007f8e:	4813      	ldr	r0, [pc, #76]	@ (8007fdc <low_level_init+0x13c>)
 8007f90:	f7fb f857 	bl	8003042 <LAN8742_Init>
 8007f94:	4603      	mov	r3, r0
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d006      	beq.n	8007fa8 <low_level_init+0x108>
  {
    netif_set_link_down(netif);
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f001 fad2 	bl	8009544 <netif_set_link_down>
    netif_set_down(netif);
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f001 fa69 	bl	8009478 <netif_set_down>
 8007fa6:	e008      	b.n	8007fba <low_level_init+0x11a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 8007fa8:	7bfb      	ldrb	r3, [r7, #15]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d103      	bne.n	8007fb6 <low_level_init+0x116>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f000 fa1e 	bl	80083f0 <ethernet_link_check_state>
 8007fb4:	e001      	b.n	8007fba <low_level_init+0x11a>
  }
  else
  {
    Error_Handler();
 8007fb6:	f7fa fc09 	bl	80027cc <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8007fba:	3710      	adds	r7, #16
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bd80      	pop	{r7, pc}
 8007fc0:	200054d4 	.word	0x200054d4
 8007fc4:	40028000 	.word	0x40028000
 8007fc8:	20005434 	.word	0x20005434
 8007fcc:	20005394 	.word	0x20005394
 8007fd0:	20005584 	.word	0x20005584
 8007fd4:	08016860 	.word	0x08016860
 8007fd8:	20000054 	.word	0x20000054
 8007fdc:	200055bc 	.word	0x200055bc

08007fe0 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b092      	sub	sp, #72	@ 0x48
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
 8007fe8:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8007fea:	2300      	movs	r3, #0
 8007fec:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8007ff8:	f107 030c 	add.w	r3, r7, #12
 8007ffc:	2230      	movs	r2, #48	@ 0x30
 8007ffe:	2100      	movs	r1, #0
 8008000:	4618      	mov	r0, r3
 8008002:	f00a fee0 	bl	8012dc6 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8008006:	f107 030c 	add.w	r3, r7, #12
 800800a:	2230      	movs	r2, #48	@ 0x30
 800800c:	2100      	movs	r1, #0
 800800e:	4618      	mov	r0, r3
 8008010:	f00a fed9 	bl	8012dc6 <memset>

  for(q = p; q != NULL; q = q->next)
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	643b      	str	r3, [r7, #64]	@ 0x40
 8008018:	e045      	b.n	80080a6 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800801a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800801c:	2b03      	cmp	r3, #3
 800801e:	d902      	bls.n	8008026 <low_level_output+0x46>
      return ERR_IF;
 8008020:	f06f 030b 	mvn.w	r3, #11
 8008024:	e055      	b.n	80080d2 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 8008026:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008028:	6859      	ldr	r1, [r3, #4]
 800802a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800802c:	4613      	mov	r3, r2
 800802e:	005b      	lsls	r3, r3, #1
 8008030:	4413      	add	r3, r2
 8008032:	009b      	lsls	r3, r3, #2
 8008034:	3348      	adds	r3, #72	@ 0x48
 8008036:	443b      	add	r3, r7
 8008038:	3b3c      	subs	r3, #60	@ 0x3c
 800803a:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800803c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800803e:	895b      	ldrh	r3, [r3, #10]
 8008040:	4619      	mov	r1, r3
 8008042:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008044:	4613      	mov	r3, r2
 8008046:	005b      	lsls	r3, r3, #1
 8008048:	4413      	add	r3, r2
 800804a:	009b      	lsls	r3, r3, #2
 800804c:	3348      	adds	r3, #72	@ 0x48
 800804e:	443b      	add	r3, r7
 8008050:	3b38      	subs	r3, #56	@ 0x38
 8008052:	6019      	str	r1, [r3, #0]

    if(i>0)
 8008054:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008056:	2b00      	cmp	r3, #0
 8008058:	d011      	beq.n	800807e <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800805a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800805c:	1e5a      	subs	r2, r3, #1
 800805e:	f107 000c 	add.w	r0, r7, #12
 8008062:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008064:	460b      	mov	r3, r1
 8008066:	005b      	lsls	r3, r3, #1
 8008068:	440b      	add	r3, r1
 800806a:	009b      	lsls	r3, r3, #2
 800806c:	18c1      	adds	r1, r0, r3
 800806e:	4613      	mov	r3, r2
 8008070:	005b      	lsls	r3, r3, #1
 8008072:	4413      	add	r3, r2
 8008074:	009b      	lsls	r3, r3, #2
 8008076:	3348      	adds	r3, #72	@ 0x48
 8008078:	443b      	add	r3, r7
 800807a:	3b34      	subs	r3, #52	@ 0x34
 800807c:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800807e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d109      	bne.n	800809a <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8008086:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008088:	4613      	mov	r3, r2
 800808a:	005b      	lsls	r3, r3, #1
 800808c:	4413      	add	r3, r2
 800808e:	009b      	lsls	r3, r3, #2
 8008090:	3348      	adds	r3, #72	@ 0x48
 8008092:	443b      	add	r3, r7
 8008094:	3b34      	subs	r3, #52	@ 0x34
 8008096:	2200      	movs	r2, #0
 8008098:	601a      	str	r2, [r3, #0]
    }

    i++;
 800809a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800809c:	3301      	adds	r3, #1
 800809e:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 80080a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	643b      	str	r3, [r7, #64]	@ 0x40
 80080a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d1b6      	bne.n	800801a <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	891b      	ldrh	r3, [r3, #8]
 80080b0:	461a      	mov	r2, r3
 80080b2:	4b0a      	ldr	r3, [pc, #40]	@ (80080dc <low_level_output+0xfc>)
 80080b4:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 80080b6:	4a09      	ldr	r2, [pc, #36]	@ (80080dc <low_level_output+0xfc>)
 80080b8:	f107 030c 	add.w	r3, r7, #12
 80080bc:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 80080be:	4a07      	ldr	r2, [pc, #28]	@ (80080dc <low_level_output+0xfc>)
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	6353      	str	r3, [r2, #52]	@ 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 80080c4:	2214      	movs	r2, #20
 80080c6:	4905      	ldr	r1, [pc, #20]	@ (80080dc <low_level_output+0xfc>)
 80080c8:	4805      	ldr	r0, [pc, #20]	@ (80080e0 <low_level_output+0x100>)
 80080ca:	f7fb ff9a 	bl	8004002 <HAL_ETH_Transmit>

  return errval;
 80080ce:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	3748      	adds	r7, #72	@ 0x48
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}
 80080da:	bf00      	nop
 80080dc:	20005584 	.word	0x20005584
 80080e0:	200054d4 	.word	0x200054d4

080080e4 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b084      	sub	sp, #16
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80080ec:	2300      	movs	r3, #0
 80080ee:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 80080f0:	4b07      	ldr	r3, [pc, #28]	@ (8008110 <low_level_input+0x2c>)
 80080f2:	781b      	ldrb	r3, [r3, #0]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d105      	bne.n	8008104 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 80080f8:	f107 030c 	add.w	r3, r7, #12
 80080fc:	4619      	mov	r1, r3
 80080fe:	4805      	ldr	r0, [pc, #20]	@ (8008114 <low_level_input+0x30>)
 8008100:	f7fc f813 	bl	800412a <HAL_ETH_ReadData>
  }

  return p;
 8008104:	68fb      	ldr	r3, [r7, #12]
}
 8008106:	4618      	mov	r0, r3
 8008108:	3710      	adds	r7, #16
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}
 800810e:	bf00      	nop
 8008110:	20005390 	.word	0x20005390
 8008114:	200054d4 	.word	0x200054d4

08008118 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b084      	sub	sp, #16
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8008120:	2300      	movs	r3, #0
 8008122:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f7ff ffdd 	bl	80080e4 <low_level_input>
 800812a:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d00a      	beq.n	8008148 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	691b      	ldr	r3, [r3, #16]
 8008136:	6879      	ldr	r1, [r7, #4]
 8008138:	68f8      	ldr	r0, [r7, #12]
 800813a:	4798      	blx	r3
 800813c:	4603      	mov	r3, r0
 800813e:	2b00      	cmp	r3, #0
 8008140:	d002      	beq.n	8008148 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 8008142:	68f8      	ldr	r0, [r7, #12]
 8008144:	f001 fdae 	bl	8009ca4 <pbuf_free>
      }
    }
  } while(p!=NULL);
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d1ea      	bne.n	8008124 <ethernetif_input+0xc>
}
 800814e:	bf00      	nop
 8008150:	bf00      	nop
 8008152:	3710      	adds	r7, #16
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}

08008158 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b082      	sub	sp, #8
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d106      	bne.n	8008174 <ethernetif_init+0x1c>
 8008166:	4b0e      	ldr	r3, [pc, #56]	@ (80081a0 <ethernetif_init+0x48>)
 8008168:	f240 126f 	movw	r2, #367	@ 0x16f
 800816c:	490d      	ldr	r1, [pc, #52]	@ (80081a4 <ethernetif_init+0x4c>)
 800816e:	480e      	ldr	r0, [pc, #56]	@ (80081a8 <ethernetif_init+0x50>)
 8008170:	f00a fd88 	bl	8012c84 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2273      	movs	r2, #115	@ 0x73
 8008178:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2274      	movs	r2, #116	@ 0x74
 8008180:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	4a09      	ldr	r2, [pc, #36]	@ (80081ac <ethernetif_init+0x54>)
 8008188:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	4a08      	ldr	r2, [pc, #32]	@ (80081b0 <ethernetif_init+0x58>)
 800818e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f7ff fe85 	bl	8007ea0 <low_level_init>

  return ERR_OK;
 8008196:	2300      	movs	r3, #0
}
 8008198:	4618      	mov	r0, r3
 800819a:	3708      	adds	r7, #8
 800819c:	46bd      	mov	sp, r7
 800819e:	bd80      	pop	{r7, pc}
 80081a0:	08013e68 	.word	0x08013e68
 80081a4:	08013e84 	.word	0x08013e84
 80081a8:	08013e94 	.word	0x08013e94
 80081ac:	08010af5 	.word	0x08010af5
 80081b0:	08007fe1 	.word	0x08007fe1

080081b4 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b084      	sub	sp, #16
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80081c0:	68f9      	ldr	r1, [r7, #12]
 80081c2:	4807      	ldr	r0, [pc, #28]	@ (80081e0 <pbuf_free_custom+0x2c>)
 80081c4:	f000 fed4 	bl	8008f70 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 80081c8:	4b06      	ldr	r3, [pc, #24]	@ (80081e4 <pbuf_free_custom+0x30>)
 80081ca:	781b      	ldrb	r3, [r3, #0]
 80081cc:	2b01      	cmp	r3, #1
 80081ce:	d102      	bne.n	80081d6 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 80081d0:	4b04      	ldr	r3, [pc, #16]	@ (80081e4 <pbuf_free_custom+0x30>)
 80081d2:	2200      	movs	r2, #0
 80081d4:	701a      	strb	r2, [r3, #0]
  }
}
 80081d6:	bf00      	nop
 80081d8:	3710      	adds	r7, #16
 80081da:	46bd      	mov	sp, r7
 80081dc:	bd80      	pop	{r7, pc}
 80081de:	bf00      	nop
 80081e0:	08016860 	.word	0x08016860
 80081e4:	20005390 	.word	0x20005390

080081e8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80081ec:	f7fb f864 	bl	80032b8 <HAL_GetTick>
 80081f0:	4603      	mov	r3, r0
}
 80081f2:	4618      	mov	r0, r3
 80081f4:	bd80      	pop	{r7, pc}
	...

080081f8 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b08e      	sub	sp, #56	@ 0x38
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008200:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008204:	2200      	movs	r2, #0
 8008206:	601a      	str	r2, [r3, #0]
 8008208:	605a      	str	r2, [r3, #4]
 800820a:	609a      	str	r2, [r3, #8]
 800820c:	60da      	str	r2, [r3, #12]
 800820e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	4a4a      	ldr	r2, [pc, #296]	@ (8008340 <HAL_ETH_MspInit+0x148>)
 8008216:	4293      	cmp	r3, r2
 8008218:	f040 808d 	bne.w	8008336 <HAL_ETH_MspInit+0x13e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800821c:	2300      	movs	r3, #0
 800821e:	623b      	str	r3, [r7, #32]
 8008220:	4b48      	ldr	r3, [pc, #288]	@ (8008344 <HAL_ETH_MspInit+0x14c>)
 8008222:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008224:	4a47      	ldr	r2, [pc, #284]	@ (8008344 <HAL_ETH_MspInit+0x14c>)
 8008226:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800822a:	6313      	str	r3, [r2, #48]	@ 0x30
 800822c:	4b45      	ldr	r3, [pc, #276]	@ (8008344 <HAL_ETH_MspInit+0x14c>)
 800822e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008230:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008234:	623b      	str	r3, [r7, #32]
 8008236:	6a3b      	ldr	r3, [r7, #32]
 8008238:	2300      	movs	r3, #0
 800823a:	61fb      	str	r3, [r7, #28]
 800823c:	4b41      	ldr	r3, [pc, #260]	@ (8008344 <HAL_ETH_MspInit+0x14c>)
 800823e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008240:	4a40      	ldr	r2, [pc, #256]	@ (8008344 <HAL_ETH_MspInit+0x14c>)
 8008242:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008246:	6313      	str	r3, [r2, #48]	@ 0x30
 8008248:	4b3e      	ldr	r3, [pc, #248]	@ (8008344 <HAL_ETH_MspInit+0x14c>)
 800824a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800824c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008250:	61fb      	str	r3, [r7, #28]
 8008252:	69fb      	ldr	r3, [r7, #28]
 8008254:	2300      	movs	r3, #0
 8008256:	61bb      	str	r3, [r7, #24]
 8008258:	4b3a      	ldr	r3, [pc, #232]	@ (8008344 <HAL_ETH_MspInit+0x14c>)
 800825a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800825c:	4a39      	ldr	r2, [pc, #228]	@ (8008344 <HAL_ETH_MspInit+0x14c>)
 800825e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008262:	6313      	str	r3, [r2, #48]	@ 0x30
 8008264:	4b37      	ldr	r3, [pc, #220]	@ (8008344 <HAL_ETH_MspInit+0x14c>)
 8008266:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008268:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800826c:	61bb      	str	r3, [r7, #24]
 800826e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008270:	2300      	movs	r3, #0
 8008272:	617b      	str	r3, [r7, #20]
 8008274:	4b33      	ldr	r3, [pc, #204]	@ (8008344 <HAL_ETH_MspInit+0x14c>)
 8008276:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008278:	4a32      	ldr	r2, [pc, #200]	@ (8008344 <HAL_ETH_MspInit+0x14c>)
 800827a:	f043 0304 	orr.w	r3, r3, #4
 800827e:	6313      	str	r3, [r2, #48]	@ 0x30
 8008280:	4b30      	ldr	r3, [pc, #192]	@ (8008344 <HAL_ETH_MspInit+0x14c>)
 8008282:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008284:	f003 0304 	and.w	r3, r3, #4
 8008288:	617b      	str	r3, [r7, #20]
 800828a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800828c:	2300      	movs	r3, #0
 800828e:	613b      	str	r3, [r7, #16]
 8008290:	4b2c      	ldr	r3, [pc, #176]	@ (8008344 <HAL_ETH_MspInit+0x14c>)
 8008292:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008294:	4a2b      	ldr	r2, [pc, #172]	@ (8008344 <HAL_ETH_MspInit+0x14c>)
 8008296:	f043 0301 	orr.w	r3, r3, #1
 800829a:	6313      	str	r3, [r2, #48]	@ 0x30
 800829c:	4b29      	ldr	r3, [pc, #164]	@ (8008344 <HAL_ETH_MspInit+0x14c>)
 800829e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082a0:	f003 0301 	and.w	r3, r3, #1
 80082a4:	613b      	str	r3, [r7, #16]
 80082a6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80082a8:	2300      	movs	r3, #0
 80082aa:	60fb      	str	r3, [r7, #12]
 80082ac:	4b25      	ldr	r3, [pc, #148]	@ (8008344 <HAL_ETH_MspInit+0x14c>)
 80082ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082b0:	4a24      	ldr	r2, [pc, #144]	@ (8008344 <HAL_ETH_MspInit+0x14c>)
 80082b2:	f043 0302 	orr.w	r3, r3, #2
 80082b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80082b8:	4b22      	ldr	r3, [pc, #136]	@ (8008344 <HAL_ETH_MspInit+0x14c>)
 80082ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082bc:	f003 0302 	and.w	r3, r3, #2
 80082c0:	60fb      	str	r3, [r7, #12]
 80082c2:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80082c4:	2332      	movs	r3, #50	@ 0x32
 80082c6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80082c8:	2302      	movs	r3, #2
 80082ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082cc:	2300      	movs	r3, #0
 80082ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80082d0:	2303      	movs	r3, #3
 80082d2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80082d4:	230b      	movs	r3, #11
 80082d6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80082d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80082dc:	4619      	mov	r1, r3
 80082de:	481a      	ldr	r0, [pc, #104]	@ (8008348 <HAL_ETH_MspInit+0x150>)
 80082e0:	f7fc ff54 	bl	800518c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80082e4:	2386      	movs	r3, #134	@ 0x86
 80082e6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80082e8:	2302      	movs	r3, #2
 80082ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082ec:	2300      	movs	r3, #0
 80082ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80082f0:	2303      	movs	r3, #3
 80082f2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80082f4:	230b      	movs	r3, #11
 80082f6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80082f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80082fc:	4619      	mov	r1, r3
 80082fe:	4813      	ldr	r0, [pc, #76]	@ (800834c <HAL_ETH_MspInit+0x154>)
 8008300:	f7fc ff44 	bl	800518c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8008304:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8008308:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800830a:	2302      	movs	r3, #2
 800830c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800830e:	2300      	movs	r3, #0
 8008310:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008312:	2303      	movs	r3, #3
 8008314:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008316:	230b      	movs	r3, #11
 8008318:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800831a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800831e:	4619      	mov	r1, r3
 8008320:	480b      	ldr	r0, [pc, #44]	@ (8008350 <HAL_ETH_MspInit+0x158>)
 8008322:	f7fc ff33 	bl	800518c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 8008326:	2200      	movs	r2, #0
 8008328:	2100      	movs	r1, #0
 800832a:	203d      	movs	r0, #61	@ 0x3d
 800832c:	f7fb fc2d 	bl	8003b8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8008330:	203d      	movs	r0, #61	@ 0x3d
 8008332:	f7fb fc46 	bl	8003bc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8008336:	bf00      	nop
 8008338:	3738      	adds	r7, #56	@ 0x38
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}
 800833e:	bf00      	nop
 8008340:	40028000 	.word	0x40028000
 8008344:	40023800 	.word	0x40023800
 8008348:	40020800 	.word	0x40020800
 800834c:	40020000 	.word	0x40020000
 8008350:	40020400 	.word	0x40020400

08008354 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8008358:	4802      	ldr	r0, [pc, #8]	@ (8008364 <ETH_PHY_IO_Init+0x10>)
 800835a:	f7fc fab3 	bl	80048c4 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800835e:	2300      	movs	r3, #0
}
 8008360:	4618      	mov	r0, r3
 8008362:	bd80      	pop	{r7, pc}
 8008364:	200054d4 	.word	0x200054d4

08008368 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8008368:	b480      	push	{r7}
 800836a:	af00      	add	r7, sp, #0
  return 0;
 800836c:	2300      	movs	r3, #0
}
 800836e:	4618      	mov	r0, r3
 8008370:	46bd      	mov	sp, r7
 8008372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008376:	4770      	bx	lr

08008378 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b084      	sub	sp, #16
 800837c:	af00      	add	r7, sp, #0
 800837e:	60f8      	str	r0, [r7, #12]
 8008380:	60b9      	str	r1, [r7, #8]
 8008382:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	68ba      	ldr	r2, [r7, #8]
 8008388:	68f9      	ldr	r1, [r7, #12]
 800838a:	4807      	ldr	r0, [pc, #28]	@ (80083a8 <ETH_PHY_IO_ReadReg+0x30>)
 800838c:	f7fc f8f4 	bl	8004578 <HAL_ETH_ReadPHYRegister>
 8008390:	4603      	mov	r3, r0
 8008392:	2b00      	cmp	r3, #0
 8008394:	d002      	beq.n	800839c <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8008396:	f04f 33ff 	mov.w	r3, #4294967295
 800839a:	e000      	b.n	800839e <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800839c:	2300      	movs	r3, #0
}
 800839e:	4618      	mov	r0, r3
 80083a0:	3710      	adds	r7, #16
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}
 80083a6:	bf00      	nop
 80083a8:	200054d4 	.word	0x200054d4

080083ac <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b084      	sub	sp, #16
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	60f8      	str	r0, [r7, #12]
 80083b4:	60b9      	str	r1, [r7, #8]
 80083b6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	68ba      	ldr	r2, [r7, #8]
 80083bc:	68f9      	ldr	r1, [r7, #12]
 80083be:	4807      	ldr	r0, [pc, #28]	@ (80083dc <ETH_PHY_IO_WriteReg+0x30>)
 80083c0:	f7fc f925 	bl	800460e <HAL_ETH_WritePHYRegister>
 80083c4:	4603      	mov	r3, r0
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d002      	beq.n	80083d0 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 80083ca:	f04f 33ff 	mov.w	r3, #4294967295
 80083ce:	e000      	b.n	80083d2 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 80083d0:	2300      	movs	r3, #0
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	3710      	adds	r7, #16
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd80      	pop	{r7, pc}
 80083da:	bf00      	nop
 80083dc:	200054d4 	.word	0x200054d4

080083e0 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80083e4:	f7fa ff68 	bl	80032b8 <HAL_GetTick>
 80083e8:	4603      	mov	r3, r0
}
 80083ea:	4618      	mov	r0, r3
 80083ec:	bd80      	pop	{r7, pc}
	...

080083f0 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b0a0      	sub	sp, #128	@ 0x80
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 80083f8:	f107 030c 	add.w	r3, r7, #12
 80083fc:	2264      	movs	r2, #100	@ 0x64
 80083fe:	2100      	movs	r1, #0
 8008400:	4618      	mov	r0, r3
 8008402:	f00a fce0 	bl	8012dc6 <memset>
  int32_t PHYLinkState = 0;
 8008406:	2300      	movs	r3, #0
 8008408:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800840a:	2300      	movs	r3, #0
 800840c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800840e:	2300      	movs	r3, #0
 8008410:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008412:	2300      	movs	r3, #0
 8008414:	677b      	str	r3, [r7, #116]	@ 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8008416:	483a      	ldr	r0, [pc, #232]	@ (8008500 <ethernet_link_check_state+0x110>)
 8008418:	f7fa fe60 	bl	80030dc <LAN8742_GetLinkState>
 800841c:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8008424:	089b      	lsrs	r3, r3, #2
 8008426:	f003 0301 	and.w	r3, r3, #1
 800842a:	b2db      	uxtb	r3, r3
 800842c:	2b00      	cmp	r3, #0
 800842e:	d00c      	beq.n	800844a <ethernet_link_check_state+0x5a>
 8008430:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008432:	2b01      	cmp	r3, #1
 8008434:	dc09      	bgt.n	800844a <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop_IT(&heth);
 8008436:	4833      	ldr	r0, [pc, #204]	@ (8008504 <ethernet_link_check_state+0x114>)
 8008438:	f7fb fd64 	bl	8003f04 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f001 f81b 	bl	8009478 <netif_set_down>
    netif_set_link_down(netif);
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f001 f87e 	bl	8009544 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8008448:	e055      	b.n	80084f6 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8008450:	f003 0304 	and.w	r3, r3, #4
 8008454:	2b00      	cmp	r3, #0
 8008456:	d14e      	bne.n	80084f6 <ethernet_link_check_state+0x106>
 8008458:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800845a:	2b01      	cmp	r3, #1
 800845c:	dd4b      	ble.n	80084f6 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 800845e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008460:	3b02      	subs	r3, #2
 8008462:	2b03      	cmp	r3, #3
 8008464:	d82a      	bhi.n	80084bc <ethernet_link_check_state+0xcc>
 8008466:	a201      	add	r2, pc, #4	@ (adr r2, 800846c <ethernet_link_check_state+0x7c>)
 8008468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800846c:	0800847d 	.word	0x0800847d
 8008470:	0800848f 	.word	0x0800848f
 8008474:	0800849f 	.word	0x0800849f
 8008478:	080084af 	.word	0x080084af
      duplex = ETH_FULLDUPLEX_MODE;
 800847c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008480:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8008482:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8008486:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8008488:	2301      	movs	r3, #1
 800848a:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800848c:	e017      	b.n	80084be <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800848e:	2300      	movs	r3, #0
 8008490:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8008492:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8008496:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8008498:	2301      	movs	r3, #1
 800849a:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800849c:	e00f      	b.n	80084be <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 800849e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80084a2:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 80084a4:	2300      	movs	r3, #0
 80084a6:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80084a8:	2301      	movs	r3, #1
 80084aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80084ac:	e007      	b.n	80084be <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 80084ae:	2300      	movs	r3, #0
 80084b0:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 80084b2:	2300      	movs	r3, #0
 80084b4:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80084b6:	2301      	movs	r3, #1
 80084b8:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80084ba:	e000      	b.n	80084be <ethernet_link_check_state+0xce>
      break;
 80084bc:	bf00      	nop
    if(linkchanged)
 80084be:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d018      	beq.n	80084f6 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 80084c4:	f107 030c 	add.w	r3, r7, #12
 80084c8:	4619      	mov	r1, r3
 80084ca:	480e      	ldr	r0, [pc, #56]	@ (8008504 <ethernet_link_check_state+0x114>)
 80084cc:	f7fc f8e8 	bl	80046a0 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 80084d0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80084d2:	627b      	str	r3, [r7, #36]	@ 0x24
      MACConf.Speed = speed;
 80084d4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80084d6:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 80084d8:	f107 030c 	add.w	r3, r7, #12
 80084dc:	4619      	mov	r1, r3
 80084de:	4809      	ldr	r0, [pc, #36]	@ (8008504 <ethernet_link_check_state+0x114>)
 80084e0:	f7fc f9d5 	bl	800488e <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 80084e4:	4807      	ldr	r0, [pc, #28]	@ (8008504 <ethernet_link_check_state+0x114>)
 80084e6:	f7fb fc9d 	bl	8003e24 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f000 ff58 	bl	80093a0 <netif_set_up>
      netif_set_link_up(netif);
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f000 fff3 	bl	80094dc <netif_set_link_up>
}
 80084f6:	bf00      	nop
 80084f8:	3780      	adds	r7, #128	@ 0x80
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}
 80084fe:	bf00      	nop
 8008500:	200055bc 	.word	0x200055bc
 8008504:	200054d4 	.word	0x200054d4

08008508 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b086      	sub	sp, #24
 800850c:	af02      	add	r7, sp, #8
 800850e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8008510:	4812      	ldr	r0, [pc, #72]	@ (800855c <HAL_ETH_RxAllocateCallback+0x54>)
 8008512:	f000 fcbf 	bl	8008e94 <memp_malloc_pool>
 8008516:	60f8      	str	r0, [r7, #12]
  if (p)
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d014      	beq.n	8008548 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	f103 0220 	add.w	r2, r3, #32
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	4a0d      	ldr	r2, [pc, #52]	@ (8008560 <HAL_ETH_RxAllocateCallback+0x58>)
 800852c:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8008536:	9201      	str	r2, [sp, #4]
 8008538:	9300      	str	r3, [sp, #0]
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	2241      	movs	r2, #65	@ 0x41
 800853e:	2100      	movs	r1, #0
 8008540:	2000      	movs	r0, #0
 8008542:	f001 f9f5 	bl	8009930 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8008546:	e005      	b.n	8008554 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8008548:	4b06      	ldr	r3, [pc, #24]	@ (8008564 <HAL_ETH_RxAllocateCallback+0x5c>)
 800854a:	2201      	movs	r2, #1
 800854c:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2200      	movs	r2, #0
 8008552:	601a      	str	r2, [r3, #0]
}
 8008554:	bf00      	nop
 8008556:	3710      	adds	r7, #16
 8008558:	46bd      	mov	sp, r7
 800855a:	bd80      	pop	{r7, pc}
 800855c:	08016860 	.word	0x08016860
 8008560:	080081b5 	.word	0x080081b5
 8008564:	20005390 	.word	0x20005390

08008568 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8008568:	b480      	push	{r7}
 800856a:	b089      	sub	sp, #36	@ 0x24
 800856c:	af00      	add	r7, sp, #0
 800856e:	60f8      	str	r0, [r7, #12]
 8008570:	60b9      	str	r1, [r7, #8]
 8008572:	607a      	str	r2, [r7, #4]
 8008574:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800857e:	2300      	movs	r3, #0
 8008580:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	3b20      	subs	r3, #32
 8008586:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8008588:	69fb      	ldr	r3, [r7, #28]
 800858a:	2200      	movs	r2, #0
 800858c:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800858e:	69fb      	ldr	r3, [r7, #28]
 8008590:	2200      	movs	r2, #0
 8008592:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8008594:	69fb      	ldr	r3, [r7, #28]
 8008596:	887a      	ldrh	r2, [r7, #2]
 8008598:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800859a:	69bb      	ldr	r3, [r7, #24]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d103      	bne.n	80085aa <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 80085a2:	69bb      	ldr	r3, [r7, #24]
 80085a4:	69fa      	ldr	r2, [r7, #28]
 80085a6:	601a      	str	r2, [r3, #0]
 80085a8:	e003      	b.n	80085b2 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 80085aa:	697b      	ldr	r3, [r7, #20]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	69fa      	ldr	r2, [r7, #28]
 80085b0:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 80085b2:	697b      	ldr	r3, [r7, #20]
 80085b4:	69fa      	ldr	r2, [r7, #28]
 80085b6:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 80085b8:	69bb      	ldr	r3, [r7, #24]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	61fb      	str	r3, [r7, #28]
 80085be:	e009      	b.n	80085d4 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 80085c0:	69fb      	ldr	r3, [r7, #28]
 80085c2:	891a      	ldrh	r2, [r3, #8]
 80085c4:	887b      	ldrh	r3, [r7, #2]
 80085c6:	4413      	add	r3, r2
 80085c8:	b29a      	uxth	r2, r3
 80085ca:	69fb      	ldr	r3, [r7, #28]
 80085cc:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 80085ce:	69fb      	ldr	r3, [r7, #28]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	61fb      	str	r3, [r7, #28]
 80085d4:	69fb      	ldr	r3, [r7, #28]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d1f2      	bne.n	80085c0 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 80085da:	bf00      	nop
 80085dc:	bf00      	nop
 80085de:	3724      	adds	r7, #36	@ 0x24
 80085e0:	46bd      	mov	sp, r7
 80085e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e6:	4770      	bx	lr

080085e8 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80085e8:	b480      	push	{r7}
 80085ea:	b083      	sub	sp, #12
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	4603      	mov	r3, r0
 80085f0:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80085f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80085f6:	021b      	lsls	r3, r3, #8
 80085f8:	b21a      	sxth	r2, r3
 80085fa:	88fb      	ldrh	r3, [r7, #6]
 80085fc:	0a1b      	lsrs	r3, r3, #8
 80085fe:	b29b      	uxth	r3, r3
 8008600:	b21b      	sxth	r3, r3
 8008602:	4313      	orrs	r3, r2
 8008604:	b21b      	sxth	r3, r3
 8008606:	b29b      	uxth	r3, r3
}
 8008608:	4618      	mov	r0, r3
 800860a:	370c      	adds	r7, #12
 800860c:	46bd      	mov	sp, r7
 800860e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008612:	4770      	bx	lr

08008614 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8008614:	b480      	push	{r7}
 8008616:	b083      	sub	sp, #12
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	061a      	lsls	r2, r3, #24
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	021b      	lsls	r3, r3, #8
 8008624:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008628:	431a      	orrs	r2, r3
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	0a1b      	lsrs	r3, r3, #8
 800862e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008632:	431a      	orrs	r2, r3
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	0e1b      	lsrs	r3, r3, #24
 8008638:	4313      	orrs	r3, r2
}
 800863a:	4618      	mov	r0, r3
 800863c:	370c      	adds	r7, #12
 800863e:	46bd      	mov	sp, r7
 8008640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008644:	4770      	bx	lr

08008646 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8008646:	b580      	push	{r7, lr}
 8008648:	b082      	sub	sp, #8
 800864a:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800864c:	2300      	movs	r3, #0
 800864e:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8008650:	f000 f8d4 	bl	80087fc <mem_init>
  memp_init();
 8008654:	f000 fbda 	bl	8008e0c <memp_init>
  pbuf_init();
  netif_init();
 8008658:	f000 fcd8 	bl	800900c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800865c:	f007 f8f4 	bl	800f848 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8008660:	f001 fe50 	bl	800a304 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8008664:	f007 f866 	bl	800f734 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8008668:	bf00      	nop
 800866a:	3708      	adds	r7, #8
 800866c:	46bd      	mov	sp, r7
 800866e:	bd80      	pop	{r7, pc}

08008670 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8008670:	b480      	push	{r7}
 8008672:	b083      	sub	sp, #12
 8008674:	af00      	add	r7, sp, #0
 8008676:	4603      	mov	r3, r0
 8008678:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800867a:	4b05      	ldr	r3, [pc, #20]	@ (8008690 <ptr_to_mem+0x20>)
 800867c:	681a      	ldr	r2, [r3, #0]
 800867e:	88fb      	ldrh	r3, [r7, #6]
 8008680:	4413      	add	r3, r2
}
 8008682:	4618      	mov	r0, r3
 8008684:	370c      	adds	r7, #12
 8008686:	46bd      	mov	sp, r7
 8008688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868c:	4770      	bx	lr
 800868e:	bf00      	nop
 8008690:	20005a08 	.word	0x20005a08

08008694 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8008694:	b480      	push	{r7}
 8008696:	b083      	sub	sp, #12
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800869c:	4b05      	ldr	r3, [pc, #20]	@ (80086b4 <mem_to_ptr+0x20>)
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	687a      	ldr	r2, [r7, #4]
 80086a2:	1ad3      	subs	r3, r2, r3
 80086a4:	b29b      	uxth	r3, r3
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	370c      	adds	r7, #12
 80086aa:	46bd      	mov	sp, r7
 80086ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b0:	4770      	bx	lr
 80086b2:	bf00      	nop
 80086b4:	20005a08 	.word	0x20005a08

080086b8 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80086b8:	b590      	push	{r4, r7, lr}
 80086ba:	b085      	sub	sp, #20
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80086c0:	4b45      	ldr	r3, [pc, #276]	@ (80087d8 <plug_holes+0x120>)
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	687a      	ldr	r2, [r7, #4]
 80086c6:	429a      	cmp	r2, r3
 80086c8:	d206      	bcs.n	80086d8 <plug_holes+0x20>
 80086ca:	4b44      	ldr	r3, [pc, #272]	@ (80087dc <plug_holes+0x124>)
 80086cc:	f240 12df 	movw	r2, #479	@ 0x1df
 80086d0:	4943      	ldr	r1, [pc, #268]	@ (80087e0 <plug_holes+0x128>)
 80086d2:	4844      	ldr	r0, [pc, #272]	@ (80087e4 <plug_holes+0x12c>)
 80086d4:	f00a fad6 	bl	8012c84 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80086d8:	4b43      	ldr	r3, [pc, #268]	@ (80087e8 <plug_holes+0x130>)
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	687a      	ldr	r2, [r7, #4]
 80086de:	429a      	cmp	r2, r3
 80086e0:	d306      	bcc.n	80086f0 <plug_holes+0x38>
 80086e2:	4b3e      	ldr	r3, [pc, #248]	@ (80087dc <plug_holes+0x124>)
 80086e4:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80086e8:	4940      	ldr	r1, [pc, #256]	@ (80087ec <plug_holes+0x134>)
 80086ea:	483e      	ldr	r0, [pc, #248]	@ (80087e4 <plug_holes+0x12c>)
 80086ec:	f00a faca 	bl	8012c84 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	791b      	ldrb	r3, [r3, #4]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d006      	beq.n	8008706 <plug_holes+0x4e>
 80086f8:	4b38      	ldr	r3, [pc, #224]	@ (80087dc <plug_holes+0x124>)
 80086fa:	f240 12e1 	movw	r2, #481	@ 0x1e1
 80086fe:	493c      	ldr	r1, [pc, #240]	@ (80087f0 <plug_holes+0x138>)
 8008700:	4838      	ldr	r0, [pc, #224]	@ (80087e4 <plug_holes+0x12c>)
 8008702:	f00a fabf 	bl	8012c84 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	881b      	ldrh	r3, [r3, #0]
 800870a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800870e:	d906      	bls.n	800871e <plug_holes+0x66>
 8008710:	4b32      	ldr	r3, [pc, #200]	@ (80087dc <plug_holes+0x124>)
 8008712:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 8008716:	4937      	ldr	r1, [pc, #220]	@ (80087f4 <plug_holes+0x13c>)
 8008718:	4832      	ldr	r0, [pc, #200]	@ (80087e4 <plug_holes+0x12c>)
 800871a:	f00a fab3 	bl	8012c84 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	881b      	ldrh	r3, [r3, #0]
 8008722:	4618      	mov	r0, r3
 8008724:	f7ff ffa4 	bl	8008670 <ptr_to_mem>
 8008728:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800872a:	687a      	ldr	r2, [r7, #4]
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	429a      	cmp	r2, r3
 8008730:	d024      	beq.n	800877c <plug_holes+0xc4>
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	791b      	ldrb	r3, [r3, #4]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d120      	bne.n	800877c <plug_holes+0xc4>
 800873a:	4b2b      	ldr	r3, [pc, #172]	@ (80087e8 <plug_holes+0x130>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	68fa      	ldr	r2, [r7, #12]
 8008740:	429a      	cmp	r2, r3
 8008742:	d01b      	beq.n	800877c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8008744:	4b2c      	ldr	r3, [pc, #176]	@ (80087f8 <plug_holes+0x140>)
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	68fa      	ldr	r2, [r7, #12]
 800874a:	429a      	cmp	r2, r3
 800874c:	d102      	bne.n	8008754 <plug_holes+0x9c>
      lfree = mem;
 800874e:	4a2a      	ldr	r2, [pc, #168]	@ (80087f8 <plug_holes+0x140>)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	881a      	ldrh	r2, [r3, #0]
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	881b      	ldrh	r3, [r3, #0]
 8008760:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008764:	d00a      	beq.n	800877c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	881b      	ldrh	r3, [r3, #0]
 800876a:	4618      	mov	r0, r3
 800876c:	f7ff ff80 	bl	8008670 <ptr_to_mem>
 8008770:	4604      	mov	r4, r0
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f7ff ff8e 	bl	8008694 <mem_to_ptr>
 8008778:	4603      	mov	r3, r0
 800877a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	885b      	ldrh	r3, [r3, #2]
 8008780:	4618      	mov	r0, r3
 8008782:	f7ff ff75 	bl	8008670 <ptr_to_mem>
 8008786:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8008788:	68ba      	ldr	r2, [r7, #8]
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	429a      	cmp	r2, r3
 800878e:	d01f      	beq.n	80087d0 <plug_holes+0x118>
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	791b      	ldrb	r3, [r3, #4]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d11b      	bne.n	80087d0 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8008798:	4b17      	ldr	r3, [pc, #92]	@ (80087f8 <plug_holes+0x140>)
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	687a      	ldr	r2, [r7, #4]
 800879e:	429a      	cmp	r2, r3
 80087a0:	d102      	bne.n	80087a8 <plug_holes+0xf0>
      lfree = pmem;
 80087a2:	4a15      	ldr	r2, [pc, #84]	@ (80087f8 <plug_holes+0x140>)
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	881a      	ldrh	r2, [r3, #0]
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	881b      	ldrh	r3, [r3, #0]
 80087b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80087b8:	d00a      	beq.n	80087d0 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	881b      	ldrh	r3, [r3, #0]
 80087be:	4618      	mov	r0, r3
 80087c0:	f7ff ff56 	bl	8008670 <ptr_to_mem>
 80087c4:	4604      	mov	r4, r0
 80087c6:	68b8      	ldr	r0, [r7, #8]
 80087c8:	f7ff ff64 	bl	8008694 <mem_to_ptr>
 80087cc:	4603      	mov	r3, r0
 80087ce:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80087d0:	bf00      	nop
 80087d2:	3714      	adds	r7, #20
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bd90      	pop	{r4, r7, pc}
 80087d8:	20005a08 	.word	0x20005a08
 80087dc:	08013ebc 	.word	0x08013ebc
 80087e0:	08013eec 	.word	0x08013eec
 80087e4:	08013f04 	.word	0x08013f04
 80087e8:	20005a0c 	.word	0x20005a0c
 80087ec:	08013f2c 	.word	0x08013f2c
 80087f0:	08013f48 	.word	0x08013f48
 80087f4:	08013f64 	.word	0x08013f64
 80087f8:	20005a10 	.word	0x20005a10

080087fc <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b082      	sub	sp, #8
 8008800:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8008802:	4b18      	ldr	r3, [pc, #96]	@ (8008864 <mem_init+0x68>)
 8008804:	3303      	adds	r3, #3
 8008806:	f023 0303 	bic.w	r3, r3, #3
 800880a:	461a      	mov	r2, r3
 800880c:	4b16      	ldr	r3, [pc, #88]	@ (8008868 <mem_init+0x6c>)
 800880e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8008810:	4b15      	ldr	r3, [pc, #84]	@ (8008868 <mem_init+0x6c>)
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800881c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2200      	movs	r2, #0
 8008822:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2200      	movs	r2, #0
 8008828:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800882a:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800882e:	f7ff ff1f 	bl	8008670 <ptr_to_mem>
 8008832:	4603      	mov	r3, r0
 8008834:	4a0d      	ldr	r2, [pc, #52]	@ (800886c <mem_init+0x70>)
 8008836:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8008838:	4b0c      	ldr	r3, [pc, #48]	@ (800886c <mem_init+0x70>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	2201      	movs	r2, #1
 800883e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8008840:	4b0a      	ldr	r3, [pc, #40]	@ (800886c <mem_init+0x70>)
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008848:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800884a:	4b08      	ldr	r3, [pc, #32]	@ (800886c <mem_init+0x70>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008852:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8008854:	4b04      	ldr	r3, [pc, #16]	@ (8008868 <mem_init+0x6c>)
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	4a05      	ldr	r2, [pc, #20]	@ (8008870 <mem_init+0x74>)
 800885a:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800885c:	bf00      	nop
 800885e:	3708      	adds	r7, #8
 8008860:	46bd      	mov	sp, r7
 8008862:	bd80      	pop	{r7, pc}
 8008864:	200055f4 	.word	0x200055f4
 8008868:	20005a08 	.word	0x20005a08
 800886c:	20005a0c 	.word	0x20005a0c
 8008870:	20005a10 	.word	0x20005a10

08008874 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b086      	sub	sp, #24
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f7ff ff09 	bl	8008694 <mem_to_ptr>
 8008882:	4603      	mov	r3, r0
 8008884:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	881b      	ldrh	r3, [r3, #0]
 800888a:	4618      	mov	r0, r3
 800888c:	f7ff fef0 	bl	8008670 <ptr_to_mem>
 8008890:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	885b      	ldrh	r3, [r3, #2]
 8008896:	4618      	mov	r0, r3
 8008898:	f7ff feea 	bl	8008670 <ptr_to_mem>
 800889c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	881b      	ldrh	r3, [r3, #0]
 80088a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80088a6:	d818      	bhi.n	80088da <mem_link_valid+0x66>
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	885b      	ldrh	r3, [r3, #2]
 80088ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80088b0:	d813      	bhi.n	80088da <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80088b6:	8afa      	ldrh	r2, [r7, #22]
 80088b8:	429a      	cmp	r2, r3
 80088ba:	d004      	beq.n	80088c6 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	881b      	ldrh	r3, [r3, #0]
 80088c0:	8afa      	ldrh	r2, [r7, #22]
 80088c2:	429a      	cmp	r2, r3
 80088c4:	d109      	bne.n	80088da <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80088c6:	4b08      	ldr	r3, [pc, #32]	@ (80088e8 <mem_link_valid+0x74>)
 80088c8:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80088ca:	693a      	ldr	r2, [r7, #16]
 80088cc:	429a      	cmp	r2, r3
 80088ce:	d006      	beq.n	80088de <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80088d0:	693b      	ldr	r3, [r7, #16]
 80088d2:	885b      	ldrh	r3, [r3, #2]
 80088d4:	8afa      	ldrh	r2, [r7, #22]
 80088d6:	429a      	cmp	r2, r3
 80088d8:	d001      	beq.n	80088de <mem_link_valid+0x6a>
    return 0;
 80088da:	2300      	movs	r3, #0
 80088dc:	e000      	b.n	80088e0 <mem_link_valid+0x6c>
  }
  return 1;
 80088de:	2301      	movs	r3, #1
}
 80088e0:	4618      	mov	r0, r3
 80088e2:	3718      	adds	r7, #24
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bd80      	pop	{r7, pc}
 80088e8:	20005a0c 	.word	0x20005a0c

080088ec <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b084      	sub	sp, #16
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d04c      	beq.n	8008994 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	f003 0303 	and.w	r3, r3, #3
 8008900:	2b00      	cmp	r3, #0
 8008902:	d007      	beq.n	8008914 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8008904:	4b25      	ldr	r3, [pc, #148]	@ (800899c <mem_free+0xb0>)
 8008906:	f240 2273 	movw	r2, #627	@ 0x273
 800890a:	4925      	ldr	r1, [pc, #148]	@ (80089a0 <mem_free+0xb4>)
 800890c:	4825      	ldr	r0, [pc, #148]	@ (80089a4 <mem_free+0xb8>)
 800890e:	f00a f9b9 	bl	8012c84 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8008912:	e040      	b.n	8008996 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	3b08      	subs	r3, #8
 8008918:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800891a:	4b23      	ldr	r3, [pc, #140]	@ (80089a8 <mem_free+0xbc>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	68fa      	ldr	r2, [r7, #12]
 8008920:	429a      	cmp	r2, r3
 8008922:	d306      	bcc.n	8008932 <mem_free+0x46>
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f103 020c 	add.w	r2, r3, #12
 800892a:	4b20      	ldr	r3, [pc, #128]	@ (80089ac <mem_free+0xc0>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	429a      	cmp	r2, r3
 8008930:	d907      	bls.n	8008942 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8008932:	4b1a      	ldr	r3, [pc, #104]	@ (800899c <mem_free+0xb0>)
 8008934:	f240 227f 	movw	r2, #639	@ 0x27f
 8008938:	491d      	ldr	r1, [pc, #116]	@ (80089b0 <mem_free+0xc4>)
 800893a:	481a      	ldr	r0, [pc, #104]	@ (80089a4 <mem_free+0xb8>)
 800893c:	f00a f9a2 	bl	8012c84 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8008940:	e029      	b.n	8008996 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	791b      	ldrb	r3, [r3, #4]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d107      	bne.n	800895a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800894a:	4b14      	ldr	r3, [pc, #80]	@ (800899c <mem_free+0xb0>)
 800894c:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 8008950:	4918      	ldr	r1, [pc, #96]	@ (80089b4 <mem_free+0xc8>)
 8008952:	4814      	ldr	r0, [pc, #80]	@ (80089a4 <mem_free+0xb8>)
 8008954:	f00a f996 	bl	8012c84 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8008958:	e01d      	b.n	8008996 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800895a:	68f8      	ldr	r0, [r7, #12]
 800895c:	f7ff ff8a 	bl	8008874 <mem_link_valid>
 8008960:	4603      	mov	r3, r0
 8008962:	2b00      	cmp	r3, #0
 8008964:	d107      	bne.n	8008976 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8008966:	4b0d      	ldr	r3, [pc, #52]	@ (800899c <mem_free+0xb0>)
 8008968:	f240 2295 	movw	r2, #661	@ 0x295
 800896c:	4912      	ldr	r1, [pc, #72]	@ (80089b8 <mem_free+0xcc>)
 800896e:	480d      	ldr	r0, [pc, #52]	@ (80089a4 <mem_free+0xb8>)
 8008970:	f00a f988 	bl	8012c84 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8008974:	e00f      	b.n	8008996 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	2200      	movs	r2, #0
 800897a:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800897c:	4b0f      	ldr	r3, [pc, #60]	@ (80089bc <mem_free+0xd0>)
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	68fa      	ldr	r2, [r7, #12]
 8008982:	429a      	cmp	r2, r3
 8008984:	d202      	bcs.n	800898c <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8008986:	4a0d      	ldr	r2, [pc, #52]	@ (80089bc <mem_free+0xd0>)
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800898c:	68f8      	ldr	r0, [r7, #12]
 800898e:	f7ff fe93 	bl	80086b8 <plug_holes>
 8008992:	e000      	b.n	8008996 <mem_free+0xaa>
    return;
 8008994:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8008996:	3710      	adds	r7, #16
 8008998:	46bd      	mov	sp, r7
 800899a:	bd80      	pop	{r7, pc}
 800899c:	08013ebc 	.word	0x08013ebc
 80089a0:	08013f90 	.word	0x08013f90
 80089a4:	08013f04 	.word	0x08013f04
 80089a8:	20005a08 	.word	0x20005a08
 80089ac:	20005a0c 	.word	0x20005a0c
 80089b0:	08013fb4 	.word	0x08013fb4
 80089b4:	08013fd0 	.word	0x08013fd0
 80089b8:	08013ff8 	.word	0x08013ff8
 80089bc:	20005a10 	.word	0x20005a10

080089c0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b088      	sub	sp, #32
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
 80089c8:	460b      	mov	r3, r1
 80089ca:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80089cc:	887b      	ldrh	r3, [r7, #2]
 80089ce:	3303      	adds	r3, #3
 80089d0:	b29b      	uxth	r3, r3
 80089d2:	f023 0303 	bic.w	r3, r3, #3
 80089d6:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80089d8:	8bfb      	ldrh	r3, [r7, #30]
 80089da:	2b0b      	cmp	r3, #11
 80089dc:	d801      	bhi.n	80089e2 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80089de:	230c      	movs	r3, #12
 80089e0:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80089e2:	8bfb      	ldrh	r3, [r7, #30]
 80089e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80089e8:	d803      	bhi.n	80089f2 <mem_trim+0x32>
 80089ea:	8bfa      	ldrh	r2, [r7, #30]
 80089ec:	887b      	ldrh	r3, [r7, #2]
 80089ee:	429a      	cmp	r2, r3
 80089f0:	d201      	bcs.n	80089f6 <mem_trim+0x36>
    return NULL;
 80089f2:	2300      	movs	r3, #0
 80089f4:	e0cc      	b.n	8008b90 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80089f6:	4b68      	ldr	r3, [pc, #416]	@ (8008b98 <mem_trim+0x1d8>)
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	687a      	ldr	r2, [r7, #4]
 80089fc:	429a      	cmp	r2, r3
 80089fe:	d304      	bcc.n	8008a0a <mem_trim+0x4a>
 8008a00:	4b66      	ldr	r3, [pc, #408]	@ (8008b9c <mem_trim+0x1dc>)
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	687a      	ldr	r2, [r7, #4]
 8008a06:	429a      	cmp	r2, r3
 8008a08:	d306      	bcc.n	8008a18 <mem_trim+0x58>
 8008a0a:	4b65      	ldr	r3, [pc, #404]	@ (8008ba0 <mem_trim+0x1e0>)
 8008a0c:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8008a10:	4964      	ldr	r1, [pc, #400]	@ (8008ba4 <mem_trim+0x1e4>)
 8008a12:	4865      	ldr	r0, [pc, #404]	@ (8008ba8 <mem_trim+0x1e8>)
 8008a14:	f00a f936 	bl	8012c84 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8008a18:	4b5f      	ldr	r3, [pc, #380]	@ (8008b98 <mem_trim+0x1d8>)
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	687a      	ldr	r2, [r7, #4]
 8008a1e:	429a      	cmp	r2, r3
 8008a20:	d304      	bcc.n	8008a2c <mem_trim+0x6c>
 8008a22:	4b5e      	ldr	r3, [pc, #376]	@ (8008b9c <mem_trim+0x1dc>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	687a      	ldr	r2, [r7, #4]
 8008a28:	429a      	cmp	r2, r3
 8008a2a:	d301      	bcc.n	8008a30 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	e0af      	b.n	8008b90 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	3b08      	subs	r3, #8
 8008a34:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8008a36:	69b8      	ldr	r0, [r7, #24]
 8008a38:	f7ff fe2c 	bl	8008694 <mem_to_ptr>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8008a40:	69bb      	ldr	r3, [r7, #24]
 8008a42:	881a      	ldrh	r2, [r3, #0]
 8008a44:	8afb      	ldrh	r3, [r7, #22]
 8008a46:	1ad3      	subs	r3, r2, r3
 8008a48:	b29b      	uxth	r3, r3
 8008a4a:	3b08      	subs	r3, #8
 8008a4c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8008a4e:	8bfa      	ldrh	r2, [r7, #30]
 8008a50:	8abb      	ldrh	r3, [r7, #20]
 8008a52:	429a      	cmp	r2, r3
 8008a54:	d906      	bls.n	8008a64 <mem_trim+0xa4>
 8008a56:	4b52      	ldr	r3, [pc, #328]	@ (8008ba0 <mem_trim+0x1e0>)
 8008a58:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 8008a5c:	4953      	ldr	r1, [pc, #332]	@ (8008bac <mem_trim+0x1ec>)
 8008a5e:	4852      	ldr	r0, [pc, #328]	@ (8008ba8 <mem_trim+0x1e8>)
 8008a60:	f00a f910 	bl	8012c84 <iprintf>
  if (newsize > size) {
 8008a64:	8bfa      	ldrh	r2, [r7, #30]
 8008a66:	8abb      	ldrh	r3, [r7, #20]
 8008a68:	429a      	cmp	r2, r3
 8008a6a:	d901      	bls.n	8008a70 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	e08f      	b.n	8008b90 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8008a70:	8bfa      	ldrh	r2, [r7, #30]
 8008a72:	8abb      	ldrh	r3, [r7, #20]
 8008a74:	429a      	cmp	r2, r3
 8008a76:	d101      	bne.n	8008a7c <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	e089      	b.n	8008b90 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8008a7c:	69bb      	ldr	r3, [r7, #24]
 8008a7e:	881b      	ldrh	r3, [r3, #0]
 8008a80:	4618      	mov	r0, r3
 8008a82:	f7ff fdf5 	bl	8008670 <ptr_to_mem>
 8008a86:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8008a88:	693b      	ldr	r3, [r7, #16]
 8008a8a:	791b      	ldrb	r3, [r3, #4]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d13f      	bne.n	8008b10 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8008a90:	69bb      	ldr	r3, [r7, #24]
 8008a92:	881b      	ldrh	r3, [r3, #0]
 8008a94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008a98:	d106      	bne.n	8008aa8 <mem_trim+0xe8>
 8008a9a:	4b41      	ldr	r3, [pc, #260]	@ (8008ba0 <mem_trim+0x1e0>)
 8008a9c:	f240 22f5 	movw	r2, #757	@ 0x2f5
 8008aa0:	4943      	ldr	r1, [pc, #268]	@ (8008bb0 <mem_trim+0x1f0>)
 8008aa2:	4841      	ldr	r0, [pc, #260]	@ (8008ba8 <mem_trim+0x1e8>)
 8008aa4:	f00a f8ee 	bl	8012c84 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8008aa8:	693b      	ldr	r3, [r7, #16]
 8008aaa:	881b      	ldrh	r3, [r3, #0]
 8008aac:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8008aae:	8afa      	ldrh	r2, [r7, #22]
 8008ab0:	8bfb      	ldrh	r3, [r7, #30]
 8008ab2:	4413      	add	r3, r2
 8008ab4:	b29b      	uxth	r3, r3
 8008ab6:	3308      	adds	r3, #8
 8008ab8:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8008aba:	4b3e      	ldr	r3, [pc, #248]	@ (8008bb4 <mem_trim+0x1f4>)
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	693a      	ldr	r2, [r7, #16]
 8008ac0:	429a      	cmp	r2, r3
 8008ac2:	d106      	bne.n	8008ad2 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8008ac4:	89fb      	ldrh	r3, [r7, #14]
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	f7ff fdd2 	bl	8008670 <ptr_to_mem>
 8008acc:	4603      	mov	r3, r0
 8008ace:	4a39      	ldr	r2, [pc, #228]	@ (8008bb4 <mem_trim+0x1f4>)
 8008ad0:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8008ad2:	89fb      	ldrh	r3, [r7, #14]
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	f7ff fdcb 	bl	8008670 <ptr_to_mem>
 8008ada:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8008adc:	693b      	ldr	r3, [r7, #16]
 8008ade:	2200      	movs	r2, #0
 8008ae0:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8008ae2:	693b      	ldr	r3, [r7, #16]
 8008ae4:	89ba      	ldrh	r2, [r7, #12]
 8008ae6:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8008ae8:	693b      	ldr	r3, [r7, #16]
 8008aea:	8afa      	ldrh	r2, [r7, #22]
 8008aec:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8008aee:	69bb      	ldr	r3, [r7, #24]
 8008af0:	89fa      	ldrh	r2, [r7, #14]
 8008af2:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8008af4:	693b      	ldr	r3, [r7, #16]
 8008af6:	881b      	ldrh	r3, [r3, #0]
 8008af8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008afc:	d047      	beq.n	8008b8e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8008afe:	693b      	ldr	r3, [r7, #16]
 8008b00:	881b      	ldrh	r3, [r3, #0]
 8008b02:	4618      	mov	r0, r3
 8008b04:	f7ff fdb4 	bl	8008670 <ptr_to_mem>
 8008b08:	4602      	mov	r2, r0
 8008b0a:	89fb      	ldrh	r3, [r7, #14]
 8008b0c:	8053      	strh	r3, [r2, #2]
 8008b0e:	e03e      	b.n	8008b8e <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8008b10:	8bfb      	ldrh	r3, [r7, #30]
 8008b12:	f103 0214 	add.w	r2, r3, #20
 8008b16:	8abb      	ldrh	r3, [r7, #20]
 8008b18:	429a      	cmp	r2, r3
 8008b1a:	d838      	bhi.n	8008b8e <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8008b1c:	8afa      	ldrh	r2, [r7, #22]
 8008b1e:	8bfb      	ldrh	r3, [r7, #30]
 8008b20:	4413      	add	r3, r2
 8008b22:	b29b      	uxth	r3, r3
 8008b24:	3308      	adds	r3, #8
 8008b26:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8008b28:	69bb      	ldr	r3, [r7, #24]
 8008b2a:	881b      	ldrh	r3, [r3, #0]
 8008b2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008b30:	d106      	bne.n	8008b40 <mem_trim+0x180>
 8008b32:	4b1b      	ldr	r3, [pc, #108]	@ (8008ba0 <mem_trim+0x1e0>)
 8008b34:	f240 3216 	movw	r2, #790	@ 0x316
 8008b38:	491d      	ldr	r1, [pc, #116]	@ (8008bb0 <mem_trim+0x1f0>)
 8008b3a:	481b      	ldr	r0, [pc, #108]	@ (8008ba8 <mem_trim+0x1e8>)
 8008b3c:	f00a f8a2 	bl	8012c84 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8008b40:	89fb      	ldrh	r3, [r7, #14]
 8008b42:	4618      	mov	r0, r3
 8008b44:	f7ff fd94 	bl	8008670 <ptr_to_mem>
 8008b48:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8008b4a:	4b1a      	ldr	r3, [pc, #104]	@ (8008bb4 <mem_trim+0x1f4>)
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	693a      	ldr	r2, [r7, #16]
 8008b50:	429a      	cmp	r2, r3
 8008b52:	d202      	bcs.n	8008b5a <mem_trim+0x19a>
      lfree = mem2;
 8008b54:	4a17      	ldr	r2, [pc, #92]	@ (8008bb4 <mem_trim+0x1f4>)
 8008b56:	693b      	ldr	r3, [r7, #16]
 8008b58:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8008b5a:	693b      	ldr	r3, [r7, #16]
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8008b60:	69bb      	ldr	r3, [r7, #24]
 8008b62:	881a      	ldrh	r2, [r3, #0]
 8008b64:	693b      	ldr	r3, [r7, #16]
 8008b66:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8008b68:	693b      	ldr	r3, [r7, #16]
 8008b6a:	8afa      	ldrh	r2, [r7, #22]
 8008b6c:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8008b6e:	69bb      	ldr	r3, [r7, #24]
 8008b70:	89fa      	ldrh	r2, [r7, #14]
 8008b72:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8008b74:	693b      	ldr	r3, [r7, #16]
 8008b76:	881b      	ldrh	r3, [r3, #0]
 8008b78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008b7c:	d007      	beq.n	8008b8e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8008b7e:	693b      	ldr	r3, [r7, #16]
 8008b80:	881b      	ldrh	r3, [r3, #0]
 8008b82:	4618      	mov	r0, r3
 8008b84:	f7ff fd74 	bl	8008670 <ptr_to_mem>
 8008b88:	4602      	mov	r2, r0
 8008b8a:	89fb      	ldrh	r3, [r7, #14]
 8008b8c:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8008b8e:	687b      	ldr	r3, [r7, #4]
}
 8008b90:	4618      	mov	r0, r3
 8008b92:	3720      	adds	r7, #32
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bd80      	pop	{r7, pc}
 8008b98:	20005a08 	.word	0x20005a08
 8008b9c:	20005a0c 	.word	0x20005a0c
 8008ba0:	08013ebc 	.word	0x08013ebc
 8008ba4:	0801402c 	.word	0x0801402c
 8008ba8:	08013f04 	.word	0x08013f04
 8008bac:	08014044 	.word	0x08014044
 8008bb0:	08014064 	.word	0x08014064
 8008bb4:	20005a10 	.word	0x20005a10

08008bb8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b088      	sub	sp, #32
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8008bc2:	88fb      	ldrh	r3, [r7, #6]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d101      	bne.n	8008bcc <mem_malloc+0x14>
    return NULL;
 8008bc8:	2300      	movs	r3, #0
 8008bca:	e0d9      	b.n	8008d80 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8008bcc:	88fb      	ldrh	r3, [r7, #6]
 8008bce:	3303      	adds	r3, #3
 8008bd0:	b29b      	uxth	r3, r3
 8008bd2:	f023 0303 	bic.w	r3, r3, #3
 8008bd6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8008bd8:	8bbb      	ldrh	r3, [r7, #28]
 8008bda:	2b0b      	cmp	r3, #11
 8008bdc:	d801      	bhi.n	8008be2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8008bde:	230c      	movs	r3, #12
 8008be0:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8008be2:	8bbb      	ldrh	r3, [r7, #28]
 8008be4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008be8:	d803      	bhi.n	8008bf2 <mem_malloc+0x3a>
 8008bea:	8bba      	ldrh	r2, [r7, #28]
 8008bec:	88fb      	ldrh	r3, [r7, #6]
 8008bee:	429a      	cmp	r2, r3
 8008bf0:	d201      	bcs.n	8008bf6 <mem_malloc+0x3e>
    return NULL;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	e0c4      	b.n	8008d80 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8008bf6:	4b64      	ldr	r3, [pc, #400]	@ (8008d88 <mem_malloc+0x1d0>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	f7ff fd4a 	bl	8008694 <mem_to_ptr>
 8008c00:	4603      	mov	r3, r0
 8008c02:	83fb      	strh	r3, [r7, #30]
 8008c04:	e0b4      	b.n	8008d70 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8008c06:	8bfb      	ldrh	r3, [r7, #30]
 8008c08:	4618      	mov	r0, r3
 8008c0a:	f7ff fd31 	bl	8008670 <ptr_to_mem>
 8008c0e:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8008c10:	697b      	ldr	r3, [r7, #20]
 8008c12:	791b      	ldrb	r3, [r3, #4]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	f040 80a4 	bne.w	8008d62 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8008c1a:	697b      	ldr	r3, [r7, #20]
 8008c1c:	881b      	ldrh	r3, [r3, #0]
 8008c1e:	461a      	mov	r2, r3
 8008c20:	8bfb      	ldrh	r3, [r7, #30]
 8008c22:	1ad3      	subs	r3, r2, r3
 8008c24:	f1a3 0208 	sub.w	r2, r3, #8
 8008c28:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8008c2a:	429a      	cmp	r2, r3
 8008c2c:	f0c0 8099 	bcc.w	8008d62 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8008c30:	697b      	ldr	r3, [r7, #20]
 8008c32:	881b      	ldrh	r3, [r3, #0]
 8008c34:	461a      	mov	r2, r3
 8008c36:	8bfb      	ldrh	r3, [r7, #30]
 8008c38:	1ad3      	subs	r3, r2, r3
 8008c3a:	f1a3 0208 	sub.w	r2, r3, #8
 8008c3e:	8bbb      	ldrh	r3, [r7, #28]
 8008c40:	3314      	adds	r3, #20
 8008c42:	429a      	cmp	r2, r3
 8008c44:	d333      	bcc.n	8008cae <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8008c46:	8bfa      	ldrh	r2, [r7, #30]
 8008c48:	8bbb      	ldrh	r3, [r7, #28]
 8008c4a:	4413      	add	r3, r2
 8008c4c:	b29b      	uxth	r3, r3
 8008c4e:	3308      	adds	r3, #8
 8008c50:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8008c52:	8a7b      	ldrh	r3, [r7, #18]
 8008c54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008c58:	d106      	bne.n	8008c68 <mem_malloc+0xb0>
 8008c5a:	4b4c      	ldr	r3, [pc, #304]	@ (8008d8c <mem_malloc+0x1d4>)
 8008c5c:	f240 3287 	movw	r2, #903	@ 0x387
 8008c60:	494b      	ldr	r1, [pc, #300]	@ (8008d90 <mem_malloc+0x1d8>)
 8008c62:	484c      	ldr	r0, [pc, #304]	@ (8008d94 <mem_malloc+0x1dc>)
 8008c64:	f00a f80e 	bl	8012c84 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8008c68:	8a7b      	ldrh	r3, [r7, #18]
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	f7ff fd00 	bl	8008670 <ptr_to_mem>
 8008c70:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	2200      	movs	r2, #0
 8008c76:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8008c78:	697b      	ldr	r3, [r7, #20]
 8008c7a:	881a      	ldrh	r2, [r3, #0]
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	8bfa      	ldrh	r2, [r7, #30]
 8008c84:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8008c86:	697b      	ldr	r3, [r7, #20]
 8008c88:	8a7a      	ldrh	r2, [r7, #18]
 8008c8a:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8008c8c:	697b      	ldr	r3, [r7, #20]
 8008c8e:	2201      	movs	r2, #1
 8008c90:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	881b      	ldrh	r3, [r3, #0]
 8008c96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008c9a:	d00b      	beq.n	8008cb4 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	881b      	ldrh	r3, [r3, #0]
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	f7ff fce5 	bl	8008670 <ptr_to_mem>
 8008ca6:	4602      	mov	r2, r0
 8008ca8:	8a7b      	ldrh	r3, [r7, #18]
 8008caa:	8053      	strh	r3, [r2, #2]
 8008cac:	e002      	b.n	8008cb4 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8008cae:	697b      	ldr	r3, [r7, #20]
 8008cb0:	2201      	movs	r2, #1
 8008cb2:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8008cb4:	4b34      	ldr	r3, [pc, #208]	@ (8008d88 <mem_malloc+0x1d0>)
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	697a      	ldr	r2, [r7, #20]
 8008cba:	429a      	cmp	r2, r3
 8008cbc:	d127      	bne.n	8008d0e <mem_malloc+0x156>
          struct mem *cur = lfree;
 8008cbe:	4b32      	ldr	r3, [pc, #200]	@ (8008d88 <mem_malloc+0x1d0>)
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8008cc4:	e005      	b.n	8008cd2 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8008cc6:	69bb      	ldr	r3, [r7, #24]
 8008cc8:	881b      	ldrh	r3, [r3, #0]
 8008cca:	4618      	mov	r0, r3
 8008ccc:	f7ff fcd0 	bl	8008670 <ptr_to_mem>
 8008cd0:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8008cd2:	69bb      	ldr	r3, [r7, #24]
 8008cd4:	791b      	ldrb	r3, [r3, #4]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d004      	beq.n	8008ce4 <mem_malloc+0x12c>
 8008cda:	4b2f      	ldr	r3, [pc, #188]	@ (8008d98 <mem_malloc+0x1e0>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	69ba      	ldr	r2, [r7, #24]
 8008ce0:	429a      	cmp	r2, r3
 8008ce2:	d1f0      	bne.n	8008cc6 <mem_malloc+0x10e>
          }
          lfree = cur;
 8008ce4:	4a28      	ldr	r2, [pc, #160]	@ (8008d88 <mem_malloc+0x1d0>)
 8008ce6:	69bb      	ldr	r3, [r7, #24]
 8008ce8:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8008cea:	4b27      	ldr	r3, [pc, #156]	@ (8008d88 <mem_malloc+0x1d0>)
 8008cec:	681a      	ldr	r2, [r3, #0]
 8008cee:	4b2a      	ldr	r3, [pc, #168]	@ (8008d98 <mem_malloc+0x1e0>)
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	429a      	cmp	r2, r3
 8008cf4:	d00b      	beq.n	8008d0e <mem_malloc+0x156>
 8008cf6:	4b24      	ldr	r3, [pc, #144]	@ (8008d88 <mem_malloc+0x1d0>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	791b      	ldrb	r3, [r3, #4]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d006      	beq.n	8008d0e <mem_malloc+0x156>
 8008d00:	4b22      	ldr	r3, [pc, #136]	@ (8008d8c <mem_malloc+0x1d4>)
 8008d02:	f240 32b5 	movw	r2, #949	@ 0x3b5
 8008d06:	4925      	ldr	r1, [pc, #148]	@ (8008d9c <mem_malloc+0x1e4>)
 8008d08:	4822      	ldr	r0, [pc, #136]	@ (8008d94 <mem_malloc+0x1dc>)
 8008d0a:	f009 ffbb 	bl	8012c84 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8008d0e:	8bba      	ldrh	r2, [r7, #28]
 8008d10:	697b      	ldr	r3, [r7, #20]
 8008d12:	4413      	add	r3, r2
 8008d14:	3308      	adds	r3, #8
 8008d16:	4a20      	ldr	r2, [pc, #128]	@ (8008d98 <mem_malloc+0x1e0>)
 8008d18:	6812      	ldr	r2, [r2, #0]
 8008d1a:	4293      	cmp	r3, r2
 8008d1c:	d906      	bls.n	8008d2c <mem_malloc+0x174>
 8008d1e:	4b1b      	ldr	r3, [pc, #108]	@ (8008d8c <mem_malloc+0x1d4>)
 8008d20:	f240 32b9 	movw	r2, #953	@ 0x3b9
 8008d24:	491e      	ldr	r1, [pc, #120]	@ (8008da0 <mem_malloc+0x1e8>)
 8008d26:	481b      	ldr	r0, [pc, #108]	@ (8008d94 <mem_malloc+0x1dc>)
 8008d28:	f009 ffac 	bl	8012c84 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8008d2c:	697b      	ldr	r3, [r7, #20]
 8008d2e:	f003 0303 	and.w	r3, r3, #3
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d006      	beq.n	8008d44 <mem_malloc+0x18c>
 8008d36:	4b15      	ldr	r3, [pc, #84]	@ (8008d8c <mem_malloc+0x1d4>)
 8008d38:	f240 32bb 	movw	r2, #955	@ 0x3bb
 8008d3c:	4919      	ldr	r1, [pc, #100]	@ (8008da4 <mem_malloc+0x1ec>)
 8008d3e:	4815      	ldr	r0, [pc, #84]	@ (8008d94 <mem_malloc+0x1dc>)
 8008d40:	f009 ffa0 	bl	8012c84 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8008d44:	697b      	ldr	r3, [r7, #20]
 8008d46:	f003 0303 	and.w	r3, r3, #3
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d006      	beq.n	8008d5c <mem_malloc+0x1a4>
 8008d4e:	4b0f      	ldr	r3, [pc, #60]	@ (8008d8c <mem_malloc+0x1d4>)
 8008d50:	f240 32bd 	movw	r2, #957	@ 0x3bd
 8008d54:	4914      	ldr	r1, [pc, #80]	@ (8008da8 <mem_malloc+0x1f0>)
 8008d56:	480f      	ldr	r0, [pc, #60]	@ (8008d94 <mem_malloc+0x1dc>)
 8008d58:	f009 ff94 	bl	8012c84 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8008d5c:	697b      	ldr	r3, [r7, #20]
 8008d5e:	3308      	adds	r3, #8
 8008d60:	e00e      	b.n	8008d80 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8008d62:	8bfb      	ldrh	r3, [r7, #30]
 8008d64:	4618      	mov	r0, r3
 8008d66:	f7ff fc83 	bl	8008670 <ptr_to_mem>
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	881b      	ldrh	r3, [r3, #0]
 8008d6e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8008d70:	8bfa      	ldrh	r2, [r7, #30]
 8008d72:	8bbb      	ldrh	r3, [r7, #28]
 8008d74:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 8008d78:	429a      	cmp	r2, r3
 8008d7a:	f4ff af44 	bcc.w	8008c06 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8008d7e:	2300      	movs	r3, #0
}
 8008d80:	4618      	mov	r0, r3
 8008d82:	3720      	adds	r7, #32
 8008d84:	46bd      	mov	sp, r7
 8008d86:	bd80      	pop	{r7, pc}
 8008d88:	20005a10 	.word	0x20005a10
 8008d8c:	08013ebc 	.word	0x08013ebc
 8008d90:	08014064 	.word	0x08014064
 8008d94:	08013f04 	.word	0x08013f04
 8008d98:	20005a0c 	.word	0x20005a0c
 8008d9c:	08014078 	.word	0x08014078
 8008da0:	08014094 	.word	0x08014094
 8008da4:	080140c4 	.word	0x080140c4
 8008da8:	080140f4 	.word	0x080140f4

08008dac <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8008dac:	b480      	push	{r7}
 8008dae:	b085      	sub	sp, #20
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	689b      	ldr	r3, [r3, #8]
 8008db8:	2200      	movs	r2, #0
 8008dba:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	685b      	ldr	r3, [r3, #4]
 8008dc0:	3303      	adds	r3, #3
 8008dc2:	f023 0303 	bic.w	r3, r3, #3
 8008dc6:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8008dc8:	2300      	movs	r3, #0
 8008dca:	60fb      	str	r3, [r7, #12]
 8008dcc:	e011      	b.n	8008df2 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	689b      	ldr	r3, [r3, #8]
 8008dd2:	681a      	ldr	r2, [r3, #0]
 8008dd4:	68bb      	ldr	r3, [r7, #8]
 8008dd6:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	689b      	ldr	r3, [r3, #8]
 8008ddc:	68ba      	ldr	r2, [r7, #8]
 8008dde:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	881b      	ldrh	r3, [r3, #0]
 8008de4:	461a      	mov	r2, r3
 8008de6:	68bb      	ldr	r3, [r7, #8]
 8008de8:	4413      	add	r3, r2
 8008dea:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	3301      	adds	r3, #1
 8008df0:	60fb      	str	r3, [r7, #12]
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	885b      	ldrh	r3, [r3, #2]
 8008df6:	461a      	mov	r2, r3
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	4293      	cmp	r3, r2
 8008dfc:	dbe7      	blt.n	8008dce <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8008dfe:	bf00      	nop
 8008e00:	bf00      	nop
 8008e02:	3714      	adds	r7, #20
 8008e04:	46bd      	mov	sp, r7
 8008e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0a:	4770      	bx	lr

08008e0c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b082      	sub	sp, #8
 8008e10:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8008e12:	2300      	movs	r3, #0
 8008e14:	80fb      	strh	r3, [r7, #6]
 8008e16:	e009      	b.n	8008e2c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8008e18:	88fb      	ldrh	r3, [r7, #6]
 8008e1a:	4a08      	ldr	r2, [pc, #32]	@ (8008e3c <memp_init+0x30>)
 8008e1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e20:	4618      	mov	r0, r3
 8008e22:	f7ff ffc3 	bl	8008dac <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8008e26:	88fb      	ldrh	r3, [r7, #6]
 8008e28:	3301      	adds	r3, #1
 8008e2a:	80fb      	strh	r3, [r7, #6]
 8008e2c:	88fb      	ldrh	r3, [r7, #6]
 8008e2e:	2b08      	cmp	r3, #8
 8008e30:	d9f2      	bls.n	8008e18 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8008e32:	bf00      	nop
 8008e34:	bf00      	nop
 8008e36:	3708      	adds	r7, #8
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	bd80      	pop	{r7, pc}
 8008e3c:	080168d8 	.word	0x080168d8

08008e40 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b084      	sub	sp, #16
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	689b      	ldr	r3, [r3, #8]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d012      	beq.n	8008e7c <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	689b      	ldr	r3, [r3, #8]
 8008e5a:	68fa      	ldr	r2, [r7, #12]
 8008e5c:	6812      	ldr	r2, [r2, #0]
 8008e5e:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	f003 0303 	and.w	r3, r3, #3
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d006      	beq.n	8008e78 <do_memp_malloc_pool+0x38>
 8008e6a:	4b07      	ldr	r3, [pc, #28]	@ (8008e88 <do_memp_malloc_pool+0x48>)
 8008e6c:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8008e70:	4906      	ldr	r1, [pc, #24]	@ (8008e8c <do_memp_malloc_pool+0x4c>)
 8008e72:	4807      	ldr	r0, [pc, #28]	@ (8008e90 <do_memp_malloc_pool+0x50>)
 8008e74:	f009 ff06 	bl	8012c84 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	e000      	b.n	8008e7e <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8008e7c:	2300      	movs	r3, #0
}
 8008e7e:	4618      	mov	r0, r3
 8008e80:	3710      	adds	r7, #16
 8008e82:	46bd      	mov	sp, r7
 8008e84:	bd80      	pop	{r7, pc}
 8008e86:	bf00      	nop
 8008e88:	08014118 	.word	0x08014118
 8008e8c:	08014148 	.word	0x08014148
 8008e90:	0801416c 	.word	0x0801416c

08008e94 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b082      	sub	sp, #8
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d106      	bne.n	8008eb0 <memp_malloc_pool+0x1c>
 8008ea2:	4b0a      	ldr	r3, [pc, #40]	@ (8008ecc <memp_malloc_pool+0x38>)
 8008ea4:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 8008ea8:	4909      	ldr	r1, [pc, #36]	@ (8008ed0 <memp_malloc_pool+0x3c>)
 8008eaa:	480a      	ldr	r0, [pc, #40]	@ (8008ed4 <memp_malloc_pool+0x40>)
 8008eac:	f009 feea 	bl	8012c84 <iprintf>
  if (desc == NULL) {
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d101      	bne.n	8008eba <memp_malloc_pool+0x26>
    return NULL;
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	e003      	b.n	8008ec2 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8008eba:	6878      	ldr	r0, [r7, #4]
 8008ebc:	f7ff ffc0 	bl	8008e40 <do_memp_malloc_pool>
 8008ec0:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	3708      	adds	r7, #8
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	bd80      	pop	{r7, pc}
 8008eca:	bf00      	nop
 8008ecc:	08014118 	.word	0x08014118
 8008ed0:	08014194 	.word	0x08014194
 8008ed4:	0801416c 	.word	0x0801416c

08008ed8 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b084      	sub	sp, #16
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	4603      	mov	r3, r0
 8008ee0:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8008ee2:	79fb      	ldrb	r3, [r7, #7]
 8008ee4:	2b08      	cmp	r3, #8
 8008ee6:	d908      	bls.n	8008efa <memp_malloc+0x22>
 8008ee8:	4b0a      	ldr	r3, [pc, #40]	@ (8008f14 <memp_malloc+0x3c>)
 8008eea:	f240 1257 	movw	r2, #343	@ 0x157
 8008eee:	490a      	ldr	r1, [pc, #40]	@ (8008f18 <memp_malloc+0x40>)
 8008ef0:	480a      	ldr	r0, [pc, #40]	@ (8008f1c <memp_malloc+0x44>)
 8008ef2:	f009 fec7 	bl	8012c84 <iprintf>
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	e008      	b.n	8008f0c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8008efa:	79fb      	ldrb	r3, [r7, #7]
 8008efc:	4a08      	ldr	r2, [pc, #32]	@ (8008f20 <memp_malloc+0x48>)
 8008efe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f02:	4618      	mov	r0, r3
 8008f04:	f7ff ff9c 	bl	8008e40 <do_memp_malloc_pool>
 8008f08:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
}
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	3710      	adds	r7, #16
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bd80      	pop	{r7, pc}
 8008f14:	08014118 	.word	0x08014118
 8008f18:	080141a8 	.word	0x080141a8
 8008f1c:	0801416c 	.word	0x0801416c
 8008f20:	080168d8 	.word	0x080168d8

08008f24 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b084      	sub	sp, #16
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
 8008f2c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	f003 0303 	and.w	r3, r3, #3
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d006      	beq.n	8008f46 <do_memp_free_pool+0x22>
 8008f38:	4b0a      	ldr	r3, [pc, #40]	@ (8008f64 <do_memp_free_pool+0x40>)
 8008f3a:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8008f3e:	490a      	ldr	r1, [pc, #40]	@ (8008f68 <do_memp_free_pool+0x44>)
 8008f40:	480a      	ldr	r0, [pc, #40]	@ (8008f6c <do_memp_free_pool+0x48>)
 8008f42:	f009 fe9f 	bl	8012c84 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	689b      	ldr	r3, [r3, #8]
 8008f4e:	681a      	ldr	r2, [r3, #0]
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	689b      	ldr	r3, [r3, #8]
 8008f58:	68fa      	ldr	r2, [r7, #12]
 8008f5a:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8008f5c:	bf00      	nop
 8008f5e:	3710      	adds	r7, #16
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bd80      	pop	{r7, pc}
 8008f64:	08014118 	.word	0x08014118
 8008f68:	080141c8 	.word	0x080141c8
 8008f6c:	0801416c 	.word	0x0801416c

08008f70 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b082      	sub	sp, #8
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
 8008f78:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d106      	bne.n	8008f8e <memp_free_pool+0x1e>
 8008f80:	4b0a      	ldr	r3, [pc, #40]	@ (8008fac <memp_free_pool+0x3c>)
 8008f82:	f240 1295 	movw	r2, #405	@ 0x195
 8008f86:	490a      	ldr	r1, [pc, #40]	@ (8008fb0 <memp_free_pool+0x40>)
 8008f88:	480a      	ldr	r0, [pc, #40]	@ (8008fb4 <memp_free_pool+0x44>)
 8008f8a:	f009 fe7b 	bl	8012c84 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d007      	beq.n	8008fa4 <memp_free_pool+0x34>
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d004      	beq.n	8008fa4 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8008f9a:	6839      	ldr	r1, [r7, #0]
 8008f9c:	6878      	ldr	r0, [r7, #4]
 8008f9e:	f7ff ffc1 	bl	8008f24 <do_memp_free_pool>
 8008fa2:	e000      	b.n	8008fa6 <memp_free_pool+0x36>
    return;
 8008fa4:	bf00      	nop
}
 8008fa6:	3708      	adds	r7, #8
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}
 8008fac:	08014118 	.word	0x08014118
 8008fb0:	08014194 	.word	0x08014194
 8008fb4:	0801416c 	.word	0x0801416c

08008fb8 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b082      	sub	sp, #8
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	6039      	str	r1, [r7, #0]
 8008fc2:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8008fc4:	79fb      	ldrb	r3, [r7, #7]
 8008fc6:	2b08      	cmp	r3, #8
 8008fc8:	d907      	bls.n	8008fda <memp_free+0x22>
 8008fca:	4b0c      	ldr	r3, [pc, #48]	@ (8008ffc <memp_free+0x44>)
 8008fcc:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 8008fd0:	490b      	ldr	r1, [pc, #44]	@ (8009000 <memp_free+0x48>)
 8008fd2:	480c      	ldr	r0, [pc, #48]	@ (8009004 <memp_free+0x4c>)
 8008fd4:	f009 fe56 	bl	8012c84 <iprintf>
 8008fd8:	e00c      	b.n	8008ff4 <memp_free+0x3c>

  if (mem == NULL) {
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d008      	beq.n	8008ff2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8008fe0:	79fb      	ldrb	r3, [r7, #7]
 8008fe2:	4a09      	ldr	r2, [pc, #36]	@ (8009008 <memp_free+0x50>)
 8008fe4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008fe8:	6839      	ldr	r1, [r7, #0]
 8008fea:	4618      	mov	r0, r3
 8008fec:	f7ff ff9a 	bl	8008f24 <do_memp_free_pool>
 8008ff0:	e000      	b.n	8008ff4 <memp_free+0x3c>
    return;
 8008ff2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8008ff4:	3708      	adds	r7, #8
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd80      	pop	{r7, pc}
 8008ffa:	bf00      	nop
 8008ffc:	08014118 	.word	0x08014118
 8009000:	080141e8 	.word	0x080141e8
 8009004:	0801416c 	.word	0x0801416c
 8009008:	080168d8 	.word	0x080168d8

0800900c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800900c:	b480      	push	{r7}
 800900e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8009010:	bf00      	nop
 8009012:	46bd      	mov	sp, r7
 8009014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009018:	4770      	bx	lr
	...

0800901c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b086      	sub	sp, #24
 8009020:	af00      	add	r7, sp, #0
 8009022:	60f8      	str	r0, [r7, #12]
 8009024:	60b9      	str	r1, [r7, #8]
 8009026:	607a      	str	r2, [r7, #4]
 8009028:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d108      	bne.n	8009042 <netif_add+0x26>
 8009030:	4b57      	ldr	r3, [pc, #348]	@ (8009190 <netif_add+0x174>)
 8009032:	f240 1227 	movw	r2, #295	@ 0x127
 8009036:	4957      	ldr	r1, [pc, #348]	@ (8009194 <netif_add+0x178>)
 8009038:	4857      	ldr	r0, [pc, #348]	@ (8009198 <netif_add+0x17c>)
 800903a:	f009 fe23 	bl	8012c84 <iprintf>
 800903e:	2300      	movs	r3, #0
 8009040:	e0a2      	b.n	8009188 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8009042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009044:	2b00      	cmp	r3, #0
 8009046:	d108      	bne.n	800905a <netif_add+0x3e>
 8009048:	4b51      	ldr	r3, [pc, #324]	@ (8009190 <netif_add+0x174>)
 800904a:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800904e:	4953      	ldr	r1, [pc, #332]	@ (800919c <netif_add+0x180>)
 8009050:	4851      	ldr	r0, [pc, #324]	@ (8009198 <netif_add+0x17c>)
 8009052:	f009 fe17 	bl	8012c84 <iprintf>
 8009056:	2300      	movs	r3, #0
 8009058:	e096      	b.n	8009188 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800905a:	68bb      	ldr	r3, [r7, #8]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d101      	bne.n	8009064 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8009060:	4b4f      	ldr	r3, [pc, #316]	@ (80091a0 <netif_add+0x184>)
 8009062:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d101      	bne.n	800906e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800906a:	4b4d      	ldr	r3, [pc, #308]	@ (80091a0 <netif_add+0x184>)
 800906c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d101      	bne.n	8009078 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8009074:	4b4a      	ldr	r3, [pc, #296]	@ (80091a0 <netif_add+0x184>)
 8009076:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	2200      	movs	r2, #0
 800907c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	2200      	movs	r2, #0
 8009082:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	2200      	movs	r2, #0
 8009088:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	4a45      	ldr	r2, [pc, #276]	@ (80091a4 <netif_add+0x188>)
 800908e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	2200      	movs	r2, #0
 8009094:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	2200      	movs	r2, #0
 800909a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	2200      	movs	r2, #0
 80090a2:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	6a3a      	ldr	r2, [r7, #32]
 80090a8:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 80090aa:	4b3f      	ldr	r3, [pc, #252]	@ (80091a8 <netif_add+0x18c>)
 80090ac:	781a      	ldrb	r2, [r3, #0]
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80090b8:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	687a      	ldr	r2, [r7, #4]
 80090be:	68b9      	ldr	r1, [r7, #8]
 80090c0:	68f8      	ldr	r0, [r7, #12]
 80090c2:	f000 f913 	bl	80092ec <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80090c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090c8:	68f8      	ldr	r0, [r7, #12]
 80090ca:	4798      	blx	r3
 80090cc:	4603      	mov	r3, r0
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d001      	beq.n	80090d6 <netif_add+0xba>
    return NULL;
 80090d2:	2300      	movs	r3, #0
 80090d4:	e058      	b.n	8009188 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80090dc:	2bff      	cmp	r3, #255	@ 0xff
 80090de:	d103      	bne.n	80090e8 <netif_add+0xcc>
        netif->num = 0;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	2200      	movs	r2, #0
 80090e4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 80090e8:	2300      	movs	r3, #0
 80090ea:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80090ec:	4b2f      	ldr	r3, [pc, #188]	@ (80091ac <netif_add+0x190>)
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	617b      	str	r3, [r7, #20]
 80090f2:	e02b      	b.n	800914c <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80090f4:	697a      	ldr	r2, [r7, #20]
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	429a      	cmp	r2, r3
 80090fa:	d106      	bne.n	800910a <netif_add+0xee>
 80090fc:	4b24      	ldr	r3, [pc, #144]	@ (8009190 <netif_add+0x174>)
 80090fe:	f240 128b 	movw	r2, #395	@ 0x18b
 8009102:	492b      	ldr	r1, [pc, #172]	@ (80091b0 <netif_add+0x194>)
 8009104:	4824      	ldr	r0, [pc, #144]	@ (8009198 <netif_add+0x17c>)
 8009106:	f009 fdbd 	bl	8012c84 <iprintf>
        num_netifs++;
 800910a:	693b      	ldr	r3, [r7, #16]
 800910c:	3301      	adds	r3, #1
 800910e:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8009110:	693b      	ldr	r3, [r7, #16]
 8009112:	2bff      	cmp	r3, #255	@ 0xff
 8009114:	dd06      	ble.n	8009124 <netif_add+0x108>
 8009116:	4b1e      	ldr	r3, [pc, #120]	@ (8009190 <netif_add+0x174>)
 8009118:	f240 128d 	movw	r2, #397	@ 0x18d
 800911c:	4925      	ldr	r1, [pc, #148]	@ (80091b4 <netif_add+0x198>)
 800911e:	481e      	ldr	r0, [pc, #120]	@ (8009198 <netif_add+0x17c>)
 8009120:	f009 fdb0 	bl	8012c84 <iprintf>
        if (netif2->num == netif->num) {
 8009124:	697b      	ldr	r3, [r7, #20]
 8009126:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009130:	429a      	cmp	r2, r3
 8009132:	d108      	bne.n	8009146 <netif_add+0x12a>
          netif->num++;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800913a:	3301      	adds	r3, #1
 800913c:	b2da      	uxtb	r2, r3
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 8009144:	e005      	b.n	8009152 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8009146:	697b      	ldr	r3, [r7, #20]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	617b      	str	r3, [r7, #20]
 800914c:	697b      	ldr	r3, [r7, #20]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d1d0      	bne.n	80090f4 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8009152:	697b      	ldr	r3, [r7, #20]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d1be      	bne.n	80090d6 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800915e:	2bfe      	cmp	r3, #254	@ 0xfe
 8009160:	d103      	bne.n	800916a <netif_add+0x14e>
    netif_num = 0;
 8009162:	4b11      	ldr	r3, [pc, #68]	@ (80091a8 <netif_add+0x18c>)
 8009164:	2200      	movs	r2, #0
 8009166:	701a      	strb	r2, [r3, #0]
 8009168:	e006      	b.n	8009178 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009170:	3301      	adds	r3, #1
 8009172:	b2da      	uxtb	r2, r3
 8009174:	4b0c      	ldr	r3, [pc, #48]	@ (80091a8 <netif_add+0x18c>)
 8009176:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8009178:	4b0c      	ldr	r3, [pc, #48]	@ (80091ac <netif_add+0x190>)
 800917a:	681a      	ldr	r2, [r3, #0]
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8009180:	4a0a      	ldr	r2, [pc, #40]	@ (80091ac <netif_add+0x190>)
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8009186:	68fb      	ldr	r3, [r7, #12]
}
 8009188:	4618      	mov	r0, r3
 800918a:	3718      	adds	r7, #24
 800918c:	46bd      	mov	sp, r7
 800918e:	bd80      	pop	{r7, pc}
 8009190:	08014204 	.word	0x08014204
 8009194:	08014298 	.word	0x08014298
 8009198:	08014254 	.word	0x08014254
 800919c:	080142b4 	.word	0x080142b4
 80091a0:	0801693c 	.word	0x0801693c
 80091a4:	080095c7 	.word	0x080095c7
 80091a8:	20008908 	.word	0x20008908
 80091ac:	20008900 	.word	0x20008900
 80091b0:	080142d8 	.word	0x080142d8
 80091b4:	080142ec 	.word	0x080142ec

080091b8 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b082      	sub	sp, #8
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
 80091c0:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80091c2:	6839      	ldr	r1, [r7, #0]
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	f002 fbe7 	bl	800b998 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80091ca:	6839      	ldr	r1, [r7, #0]
 80091cc:	6878      	ldr	r0, [r7, #4]
 80091ce:	f007 f815 	bl	80101fc <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80091d2:	bf00      	nop
 80091d4:	3708      	adds	r7, #8
 80091d6:	46bd      	mov	sp, r7
 80091d8:	bd80      	pop	{r7, pc}
	...

080091dc <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b086      	sub	sp, #24
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	60f8      	str	r0, [r7, #12]
 80091e4:	60b9      	str	r1, [r7, #8]
 80091e6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d106      	bne.n	80091fc <netif_do_set_ipaddr+0x20>
 80091ee:	4b1d      	ldr	r3, [pc, #116]	@ (8009264 <netif_do_set_ipaddr+0x88>)
 80091f0:	f240 12cb 	movw	r2, #459	@ 0x1cb
 80091f4:	491c      	ldr	r1, [pc, #112]	@ (8009268 <netif_do_set_ipaddr+0x8c>)
 80091f6:	481d      	ldr	r0, [pc, #116]	@ (800926c <netif_do_set_ipaddr+0x90>)
 80091f8:	f009 fd44 	bl	8012c84 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d106      	bne.n	8009210 <netif_do_set_ipaddr+0x34>
 8009202:	4b18      	ldr	r3, [pc, #96]	@ (8009264 <netif_do_set_ipaddr+0x88>)
 8009204:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 8009208:	4917      	ldr	r1, [pc, #92]	@ (8009268 <netif_do_set_ipaddr+0x8c>)
 800920a:	4818      	ldr	r0, [pc, #96]	@ (800926c <netif_do_set_ipaddr+0x90>)
 800920c:	f009 fd3a 	bl	8012c84 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8009210:	68bb      	ldr	r3, [r7, #8]
 8009212:	681a      	ldr	r2, [r3, #0]
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	3304      	adds	r3, #4
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	429a      	cmp	r2, r3
 800921c:	d01c      	beq.n	8009258 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800921e:	68bb      	ldr	r3, [r7, #8]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	3304      	adds	r3, #4
 8009228:	681a      	ldr	r2, [r3, #0]
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800922e:	f107 0314 	add.w	r3, r7, #20
 8009232:	4619      	mov	r1, r3
 8009234:	6878      	ldr	r0, [r7, #4]
 8009236:	f7ff ffbf 	bl	80091b8 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800923a:	68bb      	ldr	r3, [r7, #8]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d002      	beq.n	8009246 <netif_do_set_ipaddr+0x6a>
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	e000      	b.n	8009248 <netif_do_set_ipaddr+0x6c>
 8009246:	2300      	movs	r3, #0
 8009248:	68fa      	ldr	r2, [r7, #12]
 800924a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800924c:	2101      	movs	r1, #1
 800924e:	68f8      	ldr	r0, [r7, #12]
 8009250:	f000 f8d2 	bl	80093f8 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8009254:	2301      	movs	r3, #1
 8009256:	e000      	b.n	800925a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8009258:	2300      	movs	r3, #0
}
 800925a:	4618      	mov	r0, r3
 800925c:	3718      	adds	r7, #24
 800925e:	46bd      	mov	sp, r7
 8009260:	bd80      	pop	{r7, pc}
 8009262:	bf00      	nop
 8009264:	08014204 	.word	0x08014204
 8009268:	0801431c 	.word	0x0801431c
 800926c:	08014254 	.word	0x08014254

08009270 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8009270:	b480      	push	{r7}
 8009272:	b085      	sub	sp, #20
 8009274:	af00      	add	r7, sp, #0
 8009276:	60f8      	str	r0, [r7, #12]
 8009278:	60b9      	str	r1, [r7, #8]
 800927a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	681a      	ldr	r2, [r3, #0]
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	3308      	adds	r3, #8
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	429a      	cmp	r2, r3
 8009288:	d00a      	beq.n	80092a0 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d002      	beq.n	8009296 <netif_do_set_netmask+0x26>
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	e000      	b.n	8009298 <netif_do_set_netmask+0x28>
 8009296:	2300      	movs	r3, #0
 8009298:	68fa      	ldr	r2, [r7, #12]
 800929a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800929c:	2301      	movs	r3, #1
 800929e:	e000      	b.n	80092a2 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80092a0:	2300      	movs	r3, #0
}
 80092a2:	4618      	mov	r0, r3
 80092a4:	3714      	adds	r7, #20
 80092a6:	46bd      	mov	sp, r7
 80092a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ac:	4770      	bx	lr

080092ae <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80092ae:	b480      	push	{r7}
 80092b0:	b085      	sub	sp, #20
 80092b2:	af00      	add	r7, sp, #0
 80092b4:	60f8      	str	r0, [r7, #12]
 80092b6:	60b9      	str	r1, [r7, #8]
 80092b8:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80092ba:	68bb      	ldr	r3, [r7, #8]
 80092bc:	681a      	ldr	r2, [r3, #0]
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	330c      	adds	r3, #12
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	429a      	cmp	r2, r3
 80092c6:	d00a      	beq.n	80092de <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80092c8:	68bb      	ldr	r3, [r7, #8]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d002      	beq.n	80092d4 <netif_do_set_gw+0x26>
 80092ce:	68bb      	ldr	r3, [r7, #8]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	e000      	b.n	80092d6 <netif_do_set_gw+0x28>
 80092d4:	2300      	movs	r3, #0
 80092d6:	68fa      	ldr	r2, [r7, #12]
 80092d8:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80092da:	2301      	movs	r3, #1
 80092dc:	e000      	b.n	80092e0 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80092de:	2300      	movs	r3, #0
}
 80092e0:	4618      	mov	r0, r3
 80092e2:	3714      	adds	r7, #20
 80092e4:	46bd      	mov	sp, r7
 80092e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ea:	4770      	bx	lr

080092ec <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b088      	sub	sp, #32
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	60f8      	str	r0, [r7, #12]
 80092f4:	60b9      	str	r1, [r7, #8]
 80092f6:	607a      	str	r2, [r7, #4]
 80092f8:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80092fa:	2300      	movs	r3, #0
 80092fc:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80092fe:	2300      	movs	r3, #0
 8009300:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8009302:	68bb      	ldr	r3, [r7, #8]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d101      	bne.n	800930c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8009308:	4b1c      	ldr	r3, [pc, #112]	@ (800937c <netif_set_addr+0x90>)
 800930a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d101      	bne.n	8009316 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8009312:	4b1a      	ldr	r3, [pc, #104]	@ (800937c <netif_set_addr+0x90>)
 8009314:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d101      	bne.n	8009320 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800931c:	4b17      	ldr	r3, [pc, #92]	@ (800937c <netif_set_addr+0x90>)
 800931e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8009320:	68bb      	ldr	r3, [r7, #8]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d003      	beq.n	800932e <netif_set_addr+0x42>
 8009326:	68bb      	ldr	r3, [r7, #8]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d101      	bne.n	8009332 <netif_set_addr+0x46>
 800932e:	2301      	movs	r3, #1
 8009330:	e000      	b.n	8009334 <netif_set_addr+0x48>
 8009332:	2300      	movs	r3, #0
 8009334:	617b      	str	r3, [r7, #20]
  if (remove) {
 8009336:	697b      	ldr	r3, [r7, #20]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d006      	beq.n	800934a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800933c:	f107 0310 	add.w	r3, r7, #16
 8009340:	461a      	mov	r2, r3
 8009342:	68b9      	ldr	r1, [r7, #8]
 8009344:	68f8      	ldr	r0, [r7, #12]
 8009346:	f7ff ff49 	bl	80091dc <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800934a:	69fa      	ldr	r2, [r7, #28]
 800934c:	6879      	ldr	r1, [r7, #4]
 800934e:	68f8      	ldr	r0, [r7, #12]
 8009350:	f7ff ff8e 	bl	8009270 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8009354:	69ba      	ldr	r2, [r7, #24]
 8009356:	6839      	ldr	r1, [r7, #0]
 8009358:	68f8      	ldr	r0, [r7, #12]
 800935a:	f7ff ffa8 	bl	80092ae <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800935e:	697b      	ldr	r3, [r7, #20]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d106      	bne.n	8009372 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8009364:	f107 0310 	add.w	r3, r7, #16
 8009368:	461a      	mov	r2, r3
 800936a:	68b9      	ldr	r1, [r7, #8]
 800936c:	68f8      	ldr	r0, [r7, #12]
 800936e:	f7ff ff35 	bl	80091dc <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8009372:	bf00      	nop
 8009374:	3720      	adds	r7, #32
 8009376:	46bd      	mov	sp, r7
 8009378:	bd80      	pop	{r7, pc}
 800937a:	bf00      	nop
 800937c:	0801693c 	.word	0x0801693c

08009380 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8009380:	b480      	push	{r7}
 8009382:	b083      	sub	sp, #12
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8009388:	4a04      	ldr	r2, [pc, #16]	@ (800939c <netif_set_default+0x1c>)
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800938e:	bf00      	nop
 8009390:	370c      	adds	r7, #12
 8009392:	46bd      	mov	sp, r7
 8009394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009398:	4770      	bx	lr
 800939a:	bf00      	nop
 800939c:	20008904 	.word	0x20008904

080093a0 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b082      	sub	sp, #8
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d107      	bne.n	80093be <netif_set_up+0x1e>
 80093ae:	4b0f      	ldr	r3, [pc, #60]	@ (80093ec <netif_set_up+0x4c>)
 80093b0:	f44f 7254 	mov.w	r2, #848	@ 0x350
 80093b4:	490e      	ldr	r1, [pc, #56]	@ (80093f0 <netif_set_up+0x50>)
 80093b6:	480f      	ldr	r0, [pc, #60]	@ (80093f4 <netif_set_up+0x54>)
 80093b8:	f009 fc64 	bl	8012c84 <iprintf>
 80093bc:	e013      	b.n	80093e6 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80093c4:	f003 0301 	and.w	r3, r3, #1
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d10c      	bne.n	80093e6 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80093d2:	f043 0301 	orr.w	r3, r3, #1
 80093d6:	b2da      	uxtb	r2, r3
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80093de:	2103      	movs	r1, #3
 80093e0:	6878      	ldr	r0, [r7, #4]
 80093e2:	f000 f809 	bl	80093f8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80093e6:	3708      	adds	r7, #8
 80093e8:	46bd      	mov	sp, r7
 80093ea:	bd80      	pop	{r7, pc}
 80093ec:	08014204 	.word	0x08014204
 80093f0:	0801438c 	.word	0x0801438c
 80093f4:	08014254 	.word	0x08014254

080093f8 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b082      	sub	sp, #8
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
 8009400:	460b      	mov	r3, r1
 8009402:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d106      	bne.n	8009418 <netif_issue_reports+0x20>
 800940a:	4b18      	ldr	r3, [pc, #96]	@ (800946c <netif_issue_reports+0x74>)
 800940c:	f240 326d 	movw	r2, #877	@ 0x36d
 8009410:	4917      	ldr	r1, [pc, #92]	@ (8009470 <netif_issue_reports+0x78>)
 8009412:	4818      	ldr	r0, [pc, #96]	@ (8009474 <netif_issue_reports+0x7c>)
 8009414:	f009 fc36 	bl	8012c84 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800941e:	f003 0304 	and.w	r3, r3, #4
 8009422:	2b00      	cmp	r3, #0
 8009424:	d01e      	beq.n	8009464 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800942c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8009430:	2b00      	cmp	r3, #0
 8009432:	d017      	beq.n	8009464 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8009434:	78fb      	ldrb	r3, [r7, #3]
 8009436:	f003 0301 	and.w	r3, r3, #1
 800943a:	2b00      	cmp	r3, #0
 800943c:	d013      	beq.n	8009466 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	3304      	adds	r3, #4
 8009442:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8009444:	2b00      	cmp	r3, #0
 8009446:	d00e      	beq.n	8009466 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800944e:	f003 0308 	and.w	r3, r3, #8
 8009452:	2b00      	cmp	r3, #0
 8009454:	d007      	beq.n	8009466 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	3304      	adds	r3, #4
 800945a:	4619      	mov	r1, r3
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	f007 fe37 	bl	80110d0 <etharp_request>
 8009462:	e000      	b.n	8009466 <netif_issue_reports+0x6e>
    return;
 8009464:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8009466:	3708      	adds	r7, #8
 8009468:	46bd      	mov	sp, r7
 800946a:	bd80      	pop	{r7, pc}
 800946c:	08014204 	.word	0x08014204
 8009470:	080143a8 	.word	0x080143a8
 8009474:	08014254 	.word	0x08014254

08009478 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b082      	sub	sp, #8
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d107      	bne.n	8009496 <netif_set_down+0x1e>
 8009486:	4b12      	ldr	r3, [pc, #72]	@ (80094d0 <netif_set_down+0x58>)
 8009488:	f240 329b 	movw	r2, #923	@ 0x39b
 800948c:	4911      	ldr	r1, [pc, #68]	@ (80094d4 <netif_set_down+0x5c>)
 800948e:	4812      	ldr	r0, [pc, #72]	@ (80094d8 <netif_set_down+0x60>)
 8009490:	f009 fbf8 	bl	8012c84 <iprintf>
 8009494:	e019      	b.n	80094ca <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800949c:	f003 0301 	and.w	r3, r3, #1
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d012      	beq.n	80094ca <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80094aa:	f023 0301 	bic.w	r3, r3, #1
 80094ae:	b2da      	uxtb	r2, r3
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80094bc:	f003 0308 	and.w	r3, r3, #8
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d002      	beq.n	80094ca <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80094c4:	6878      	ldr	r0, [r7, #4]
 80094c6:	f007 f9c1 	bl	801084c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80094ca:	3708      	adds	r7, #8
 80094cc:	46bd      	mov	sp, r7
 80094ce:	bd80      	pop	{r7, pc}
 80094d0:	08014204 	.word	0x08014204
 80094d4:	080143cc 	.word	0x080143cc
 80094d8:	08014254 	.word	0x08014254

080094dc <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b082      	sub	sp, #8
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d107      	bne.n	80094fa <netif_set_link_up+0x1e>
 80094ea:	4b13      	ldr	r3, [pc, #76]	@ (8009538 <netif_set_link_up+0x5c>)
 80094ec:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 80094f0:	4912      	ldr	r1, [pc, #72]	@ (800953c <netif_set_link_up+0x60>)
 80094f2:	4813      	ldr	r0, [pc, #76]	@ (8009540 <netif_set_link_up+0x64>)
 80094f4:	f009 fbc6 	bl	8012c84 <iprintf>
 80094f8:	e01b      	b.n	8009532 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8009500:	f003 0304 	and.w	r3, r3, #4
 8009504:	2b00      	cmp	r3, #0
 8009506:	d114      	bne.n	8009532 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800950e:	f043 0304 	orr.w	r3, r3, #4
 8009512:	b2da      	uxtb	r2, r3
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800951a:	2103      	movs	r1, #3
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	f7ff ff6b 	bl	80093f8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	69db      	ldr	r3, [r3, #28]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d003      	beq.n	8009532 <netif_set_link_up+0x56>
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	69db      	ldr	r3, [r3, #28]
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8009532:	3708      	adds	r7, #8
 8009534:	46bd      	mov	sp, r7
 8009536:	bd80      	pop	{r7, pc}
 8009538:	08014204 	.word	0x08014204
 800953c:	080143ec 	.word	0x080143ec
 8009540:	08014254 	.word	0x08014254

08009544 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b082      	sub	sp, #8
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d107      	bne.n	8009562 <netif_set_link_down+0x1e>
 8009552:	4b11      	ldr	r3, [pc, #68]	@ (8009598 <netif_set_link_down+0x54>)
 8009554:	f240 4206 	movw	r2, #1030	@ 0x406
 8009558:	4910      	ldr	r1, [pc, #64]	@ (800959c <netif_set_link_down+0x58>)
 800955a:	4811      	ldr	r0, [pc, #68]	@ (80095a0 <netif_set_link_down+0x5c>)
 800955c:	f009 fb92 	bl	8012c84 <iprintf>
 8009560:	e017      	b.n	8009592 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8009568:	f003 0304 	and.w	r3, r3, #4
 800956c:	2b00      	cmp	r3, #0
 800956e:	d010      	beq.n	8009592 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8009576:	f023 0304 	bic.w	r3, r3, #4
 800957a:	b2da      	uxtb	r2, r3
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	69db      	ldr	r3, [r3, #28]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d003      	beq.n	8009592 <netif_set_link_down+0x4e>
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	69db      	ldr	r3, [r3, #28]
 800958e:	6878      	ldr	r0, [r7, #4]
 8009590:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8009592:	3708      	adds	r7, #8
 8009594:	46bd      	mov	sp, r7
 8009596:	bd80      	pop	{r7, pc}
 8009598:	08014204 	.word	0x08014204
 800959c:	08014410 	.word	0x08014410
 80095a0:	08014254 	.word	0x08014254

080095a4 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80095a4:	b480      	push	{r7}
 80095a6:	b083      	sub	sp, #12
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
 80095ac:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d002      	beq.n	80095ba <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	683a      	ldr	r2, [r7, #0]
 80095b8:	61da      	str	r2, [r3, #28]
  }
}
 80095ba:	bf00      	nop
 80095bc:	370c      	adds	r7, #12
 80095be:	46bd      	mov	sp, r7
 80095c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c4:	4770      	bx	lr

080095c6 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80095c6:	b480      	push	{r7}
 80095c8:	b085      	sub	sp, #20
 80095ca:	af00      	add	r7, sp, #0
 80095cc:	60f8      	str	r0, [r7, #12]
 80095ce:	60b9      	str	r1, [r7, #8]
 80095d0:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80095d2:	f06f 030b 	mvn.w	r3, #11
}
 80095d6:	4618      	mov	r0, r3
 80095d8:	3714      	adds	r7, #20
 80095da:	46bd      	mov	sp, r7
 80095dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e0:	4770      	bx	lr
	...

080095e4 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80095e4:	b480      	push	{r7}
 80095e6:	b085      	sub	sp, #20
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	4603      	mov	r3, r0
 80095ec:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80095ee:	79fb      	ldrb	r3, [r7, #7]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d013      	beq.n	800961c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80095f4:	4b0d      	ldr	r3, [pc, #52]	@ (800962c <netif_get_by_index+0x48>)
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	60fb      	str	r3, [r7, #12]
 80095fa:	e00c      	b.n	8009616 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009602:	3301      	adds	r3, #1
 8009604:	b2db      	uxtb	r3, r3
 8009606:	79fa      	ldrb	r2, [r7, #7]
 8009608:	429a      	cmp	r2, r3
 800960a:	d101      	bne.n	8009610 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	e006      	b.n	800961e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	60fb      	str	r3, [r7, #12]
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d1ef      	bne.n	80095fc <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800961c:	2300      	movs	r3, #0
}
 800961e:	4618      	mov	r0, r3
 8009620:	3714      	adds	r7, #20
 8009622:	46bd      	mov	sp, r7
 8009624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009628:	4770      	bx	lr
 800962a:	bf00      	nop
 800962c:	20008900 	.word	0x20008900

08009630 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b082      	sub	sp, #8
 8009634:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8009636:	4b0c      	ldr	r3, [pc, #48]	@ (8009668 <pbuf_free_ooseq+0x38>)
 8009638:	2200      	movs	r2, #0
 800963a:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800963c:	4b0b      	ldr	r3, [pc, #44]	@ (800966c <pbuf_free_ooseq+0x3c>)
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	607b      	str	r3, [r7, #4]
 8009642:	e00a      	b.n	800965a <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009648:	2b00      	cmp	r3, #0
 800964a:	d003      	beq.n	8009654 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800964c:	6878      	ldr	r0, [r7, #4]
 800964e:	f002 f9e1 	bl	800ba14 <tcp_free_ooseq>
      return;
 8009652:	e005      	b.n	8009660 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	68db      	ldr	r3, [r3, #12]
 8009658:	607b      	str	r3, [r7, #4]
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d1f1      	bne.n	8009644 <pbuf_free_ooseq+0x14>
    }
  }
}
 8009660:	3708      	adds	r7, #8
 8009662:	46bd      	mov	sp, r7
 8009664:	bd80      	pop	{r7, pc}
 8009666:	bf00      	nop
 8009668:	20008909 	.word	0x20008909
 800966c:	20008918 	.word	0x20008918

08009670 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8009670:	b480      	push	{r7}
 8009672:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8009674:	4b03      	ldr	r3, [pc, #12]	@ (8009684 <pbuf_pool_is_empty+0x14>)
 8009676:	2201      	movs	r2, #1
 8009678:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800967a:	bf00      	nop
 800967c:	46bd      	mov	sp, r7
 800967e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009682:	4770      	bx	lr
 8009684:	20008909 	.word	0x20008909

08009688 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8009688:	b480      	push	{r7}
 800968a:	b085      	sub	sp, #20
 800968c:	af00      	add	r7, sp, #0
 800968e:	60f8      	str	r0, [r7, #12]
 8009690:	60b9      	str	r1, [r7, #8]
 8009692:	4611      	mov	r1, r2
 8009694:	461a      	mov	r2, r3
 8009696:	460b      	mov	r3, r1
 8009698:	80fb      	strh	r3, [r7, #6]
 800969a:	4613      	mov	r3, r2
 800969c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	2200      	movs	r2, #0
 80096a2:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	68ba      	ldr	r2, [r7, #8]
 80096a8:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	88fa      	ldrh	r2, [r7, #6]
 80096ae:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	88ba      	ldrh	r2, [r7, #4]
 80096b4:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80096b6:	8b3b      	ldrh	r3, [r7, #24]
 80096b8:	b2da      	uxtb	r2, r3
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	7f3a      	ldrb	r2, [r7, #28]
 80096c2:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	2201      	movs	r2, #1
 80096c8:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	2200      	movs	r2, #0
 80096ce:	73da      	strb	r2, [r3, #15]
}
 80096d0:	bf00      	nop
 80096d2:	3714      	adds	r7, #20
 80096d4:	46bd      	mov	sp, r7
 80096d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096da:	4770      	bx	lr

080096dc <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b08c      	sub	sp, #48	@ 0x30
 80096e0:	af02      	add	r7, sp, #8
 80096e2:	4603      	mov	r3, r0
 80096e4:	71fb      	strb	r3, [r7, #7]
 80096e6:	460b      	mov	r3, r1
 80096e8:	80bb      	strh	r3, [r7, #4]
 80096ea:	4613      	mov	r3, r2
 80096ec:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80096ee:	79fb      	ldrb	r3, [r7, #7]
 80096f0:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80096f2:	887b      	ldrh	r3, [r7, #2]
 80096f4:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 80096f8:	d07f      	beq.n	80097fa <pbuf_alloc+0x11e>
 80096fa:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 80096fe:	f300 80c8 	bgt.w	8009892 <pbuf_alloc+0x1b6>
 8009702:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8009706:	d010      	beq.n	800972a <pbuf_alloc+0x4e>
 8009708:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800970c:	f300 80c1 	bgt.w	8009892 <pbuf_alloc+0x1b6>
 8009710:	2b01      	cmp	r3, #1
 8009712:	d002      	beq.n	800971a <pbuf_alloc+0x3e>
 8009714:	2b41      	cmp	r3, #65	@ 0x41
 8009716:	f040 80bc 	bne.w	8009892 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800971a:	887a      	ldrh	r2, [r7, #2]
 800971c:	88bb      	ldrh	r3, [r7, #4]
 800971e:	4619      	mov	r1, r3
 8009720:	2000      	movs	r0, #0
 8009722:	f000 f8d1 	bl	80098c8 <pbuf_alloc_reference>
 8009726:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 8009728:	e0bd      	b.n	80098a6 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800972a:	2300      	movs	r3, #0
 800972c:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800972e:	2300      	movs	r3, #0
 8009730:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8009732:	88bb      	ldrh	r3, [r7, #4]
 8009734:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8009736:	2008      	movs	r0, #8
 8009738:	f7ff fbce 	bl	8008ed8 <memp_malloc>
 800973c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800973e:	693b      	ldr	r3, [r7, #16]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d109      	bne.n	8009758 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8009744:	f7ff ff94 	bl	8009670 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8009748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800974a:	2b00      	cmp	r3, #0
 800974c:	d002      	beq.n	8009754 <pbuf_alloc+0x78>
            pbuf_free(p);
 800974e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009750:	f000 faa8 	bl	8009ca4 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8009754:	2300      	movs	r3, #0
 8009756:	e0a7      	b.n	80098a8 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8009758:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800975a:	3303      	adds	r3, #3
 800975c:	b29b      	uxth	r3, r3
 800975e:	f023 0303 	bic.w	r3, r3, #3
 8009762:	b29b      	uxth	r3, r3
 8009764:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 8009768:	b29b      	uxth	r3, r3
 800976a:	8b7a      	ldrh	r2, [r7, #26]
 800976c:	4293      	cmp	r3, r2
 800976e:	bf28      	it	cs
 8009770:	4613      	movcs	r3, r2
 8009772:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8009774:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009776:	3310      	adds	r3, #16
 8009778:	693a      	ldr	r2, [r7, #16]
 800977a:	4413      	add	r3, r2
 800977c:	3303      	adds	r3, #3
 800977e:	f023 0303 	bic.w	r3, r3, #3
 8009782:	4618      	mov	r0, r3
 8009784:	89f9      	ldrh	r1, [r7, #14]
 8009786:	8b7a      	ldrh	r2, [r7, #26]
 8009788:	2300      	movs	r3, #0
 800978a:	9301      	str	r3, [sp, #4]
 800978c:	887b      	ldrh	r3, [r7, #2]
 800978e:	9300      	str	r3, [sp, #0]
 8009790:	460b      	mov	r3, r1
 8009792:	4601      	mov	r1, r0
 8009794:	6938      	ldr	r0, [r7, #16]
 8009796:	f7ff ff77 	bl	8009688 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800979a:	693b      	ldr	r3, [r7, #16]
 800979c:	685b      	ldr	r3, [r3, #4]
 800979e:	f003 0303 	and.w	r3, r3, #3
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d006      	beq.n	80097b4 <pbuf_alloc+0xd8>
 80097a6:	4b42      	ldr	r3, [pc, #264]	@ (80098b0 <pbuf_alloc+0x1d4>)
 80097a8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80097ac:	4941      	ldr	r1, [pc, #260]	@ (80098b4 <pbuf_alloc+0x1d8>)
 80097ae:	4842      	ldr	r0, [pc, #264]	@ (80098b8 <pbuf_alloc+0x1dc>)
 80097b0:	f009 fa68 	bl	8012c84 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80097b4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80097b6:	3303      	adds	r3, #3
 80097b8:	f023 0303 	bic.w	r3, r3, #3
 80097bc:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 80097c0:	d106      	bne.n	80097d0 <pbuf_alloc+0xf4>
 80097c2:	4b3b      	ldr	r3, [pc, #236]	@ (80098b0 <pbuf_alloc+0x1d4>)
 80097c4:	f44f 7281 	mov.w	r2, #258	@ 0x102
 80097c8:	493c      	ldr	r1, [pc, #240]	@ (80098bc <pbuf_alloc+0x1e0>)
 80097ca:	483b      	ldr	r0, [pc, #236]	@ (80098b8 <pbuf_alloc+0x1dc>)
 80097cc:	f009 fa5a 	bl	8012c84 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80097d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d102      	bne.n	80097dc <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80097d6:	693b      	ldr	r3, [r7, #16]
 80097d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80097da:	e002      	b.n	80097e2 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80097dc:	69fb      	ldr	r3, [r7, #28]
 80097de:	693a      	ldr	r2, [r7, #16]
 80097e0:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80097e2:	693b      	ldr	r3, [r7, #16]
 80097e4:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80097e6:	8b7a      	ldrh	r2, [r7, #26]
 80097e8:	89fb      	ldrh	r3, [r7, #14]
 80097ea:	1ad3      	subs	r3, r2, r3
 80097ec:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80097ee:	2300      	movs	r3, #0
 80097f0:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 80097f2:	8b7b      	ldrh	r3, [r7, #26]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d19e      	bne.n	8009736 <pbuf_alloc+0x5a>
      break;
 80097f8:	e055      	b.n	80098a6 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80097fa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80097fc:	3303      	adds	r3, #3
 80097fe:	b29b      	uxth	r3, r3
 8009800:	f023 0303 	bic.w	r3, r3, #3
 8009804:	b29a      	uxth	r2, r3
 8009806:	88bb      	ldrh	r3, [r7, #4]
 8009808:	3303      	adds	r3, #3
 800980a:	b29b      	uxth	r3, r3
 800980c:	f023 0303 	bic.w	r3, r3, #3
 8009810:	b29b      	uxth	r3, r3
 8009812:	4413      	add	r3, r2
 8009814:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8009816:	8b3b      	ldrh	r3, [r7, #24]
 8009818:	3310      	adds	r3, #16
 800981a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800981c:	8b3a      	ldrh	r2, [r7, #24]
 800981e:	88bb      	ldrh	r3, [r7, #4]
 8009820:	3303      	adds	r3, #3
 8009822:	f023 0303 	bic.w	r3, r3, #3
 8009826:	429a      	cmp	r2, r3
 8009828:	d306      	bcc.n	8009838 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800982a:	8afa      	ldrh	r2, [r7, #22]
 800982c:	88bb      	ldrh	r3, [r7, #4]
 800982e:	3303      	adds	r3, #3
 8009830:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8009834:	429a      	cmp	r2, r3
 8009836:	d201      	bcs.n	800983c <pbuf_alloc+0x160>
        return NULL;
 8009838:	2300      	movs	r3, #0
 800983a:	e035      	b.n	80098a8 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800983c:	8afb      	ldrh	r3, [r7, #22]
 800983e:	4618      	mov	r0, r3
 8009840:	f7ff f9ba 	bl	8008bb8 <mem_malloc>
 8009844:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 8009846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009848:	2b00      	cmp	r3, #0
 800984a:	d101      	bne.n	8009850 <pbuf_alloc+0x174>
        return NULL;
 800984c:	2300      	movs	r3, #0
 800984e:	e02b      	b.n	80098a8 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8009850:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009852:	3310      	adds	r3, #16
 8009854:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009856:	4413      	add	r3, r2
 8009858:	3303      	adds	r3, #3
 800985a:	f023 0303 	bic.w	r3, r3, #3
 800985e:	4618      	mov	r0, r3
 8009860:	88b9      	ldrh	r1, [r7, #4]
 8009862:	88ba      	ldrh	r2, [r7, #4]
 8009864:	2300      	movs	r3, #0
 8009866:	9301      	str	r3, [sp, #4]
 8009868:	887b      	ldrh	r3, [r7, #2]
 800986a:	9300      	str	r3, [sp, #0]
 800986c:	460b      	mov	r3, r1
 800986e:	4601      	mov	r1, r0
 8009870:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009872:	f7ff ff09 	bl	8009688 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8009876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009878:	685b      	ldr	r3, [r3, #4]
 800987a:	f003 0303 	and.w	r3, r3, #3
 800987e:	2b00      	cmp	r3, #0
 8009880:	d010      	beq.n	80098a4 <pbuf_alloc+0x1c8>
 8009882:	4b0b      	ldr	r3, [pc, #44]	@ (80098b0 <pbuf_alloc+0x1d4>)
 8009884:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8009888:	490d      	ldr	r1, [pc, #52]	@ (80098c0 <pbuf_alloc+0x1e4>)
 800988a:	480b      	ldr	r0, [pc, #44]	@ (80098b8 <pbuf_alloc+0x1dc>)
 800988c:	f009 f9fa 	bl	8012c84 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8009890:	e008      	b.n	80098a4 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8009892:	4b07      	ldr	r3, [pc, #28]	@ (80098b0 <pbuf_alloc+0x1d4>)
 8009894:	f240 1227 	movw	r2, #295	@ 0x127
 8009898:	490a      	ldr	r1, [pc, #40]	@ (80098c4 <pbuf_alloc+0x1e8>)
 800989a:	4807      	ldr	r0, [pc, #28]	@ (80098b8 <pbuf_alloc+0x1dc>)
 800989c:	f009 f9f2 	bl	8012c84 <iprintf>
      return NULL;
 80098a0:	2300      	movs	r3, #0
 80098a2:	e001      	b.n	80098a8 <pbuf_alloc+0x1cc>
      break;
 80098a4:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80098a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80098a8:	4618      	mov	r0, r3
 80098aa:	3728      	adds	r7, #40	@ 0x28
 80098ac:	46bd      	mov	sp, r7
 80098ae:	bd80      	pop	{r7, pc}
 80098b0:	08014434 	.word	0x08014434
 80098b4:	08014464 	.word	0x08014464
 80098b8:	08014494 	.word	0x08014494
 80098bc:	080144bc 	.word	0x080144bc
 80098c0:	080144f0 	.word	0x080144f0
 80098c4:	0801451c 	.word	0x0801451c

080098c8 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b086      	sub	sp, #24
 80098cc:	af02      	add	r7, sp, #8
 80098ce:	6078      	str	r0, [r7, #4]
 80098d0:	460b      	mov	r3, r1
 80098d2:	807b      	strh	r3, [r7, #2]
 80098d4:	4613      	mov	r3, r2
 80098d6:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80098d8:	883b      	ldrh	r3, [r7, #0]
 80098da:	2b41      	cmp	r3, #65	@ 0x41
 80098dc:	d009      	beq.n	80098f2 <pbuf_alloc_reference+0x2a>
 80098de:	883b      	ldrh	r3, [r7, #0]
 80098e0:	2b01      	cmp	r3, #1
 80098e2:	d006      	beq.n	80098f2 <pbuf_alloc_reference+0x2a>
 80098e4:	4b0f      	ldr	r3, [pc, #60]	@ (8009924 <pbuf_alloc_reference+0x5c>)
 80098e6:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 80098ea:	490f      	ldr	r1, [pc, #60]	@ (8009928 <pbuf_alloc_reference+0x60>)
 80098ec:	480f      	ldr	r0, [pc, #60]	@ (800992c <pbuf_alloc_reference+0x64>)
 80098ee:	f009 f9c9 	bl	8012c84 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80098f2:	2007      	movs	r0, #7
 80098f4:	f7ff faf0 	bl	8008ed8 <memp_malloc>
 80098f8:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d101      	bne.n	8009904 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8009900:	2300      	movs	r3, #0
 8009902:	e00b      	b.n	800991c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8009904:	8879      	ldrh	r1, [r7, #2]
 8009906:	887a      	ldrh	r2, [r7, #2]
 8009908:	2300      	movs	r3, #0
 800990a:	9301      	str	r3, [sp, #4]
 800990c:	883b      	ldrh	r3, [r7, #0]
 800990e:	9300      	str	r3, [sp, #0]
 8009910:	460b      	mov	r3, r1
 8009912:	6879      	ldr	r1, [r7, #4]
 8009914:	68f8      	ldr	r0, [r7, #12]
 8009916:	f7ff feb7 	bl	8009688 <pbuf_init_alloced_pbuf>
  return p;
 800991a:	68fb      	ldr	r3, [r7, #12]
}
 800991c:	4618      	mov	r0, r3
 800991e:	3710      	adds	r7, #16
 8009920:	46bd      	mov	sp, r7
 8009922:	bd80      	pop	{r7, pc}
 8009924:	08014434 	.word	0x08014434
 8009928:	08014538 	.word	0x08014538
 800992c:	08014494 	.word	0x08014494

08009930 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b088      	sub	sp, #32
 8009934:	af02      	add	r7, sp, #8
 8009936:	607b      	str	r3, [r7, #4]
 8009938:	4603      	mov	r3, r0
 800993a:	73fb      	strb	r3, [r7, #15]
 800993c:	460b      	mov	r3, r1
 800993e:	81bb      	strh	r3, [r7, #12]
 8009940:	4613      	mov	r3, r2
 8009942:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8009944:	7bfb      	ldrb	r3, [r7, #15]
 8009946:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8009948:	8a7b      	ldrh	r3, [r7, #18]
 800994a:	3303      	adds	r3, #3
 800994c:	f023 0203 	bic.w	r2, r3, #3
 8009950:	89bb      	ldrh	r3, [r7, #12]
 8009952:	441a      	add	r2, r3
 8009954:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009956:	429a      	cmp	r2, r3
 8009958:	d901      	bls.n	800995e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800995a:	2300      	movs	r3, #0
 800995c:	e018      	b.n	8009990 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800995e:	6a3b      	ldr	r3, [r7, #32]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d007      	beq.n	8009974 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8009964:	8a7b      	ldrh	r3, [r7, #18]
 8009966:	3303      	adds	r3, #3
 8009968:	f023 0303 	bic.w	r3, r3, #3
 800996c:	6a3a      	ldr	r2, [r7, #32]
 800996e:	4413      	add	r3, r2
 8009970:	617b      	str	r3, [r7, #20]
 8009972:	e001      	b.n	8009978 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8009974:	2300      	movs	r3, #0
 8009976:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8009978:	6878      	ldr	r0, [r7, #4]
 800997a:	89b9      	ldrh	r1, [r7, #12]
 800997c:	89ba      	ldrh	r2, [r7, #12]
 800997e:	2302      	movs	r3, #2
 8009980:	9301      	str	r3, [sp, #4]
 8009982:	897b      	ldrh	r3, [r7, #10]
 8009984:	9300      	str	r3, [sp, #0]
 8009986:	460b      	mov	r3, r1
 8009988:	6979      	ldr	r1, [r7, #20]
 800998a:	f7ff fe7d 	bl	8009688 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800998e:	687b      	ldr	r3, [r7, #4]
}
 8009990:	4618      	mov	r0, r3
 8009992:	3718      	adds	r7, #24
 8009994:	46bd      	mov	sp, r7
 8009996:	bd80      	pop	{r7, pc}

08009998 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b084      	sub	sp, #16
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
 80099a0:	460b      	mov	r3, r1
 80099a2:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d106      	bne.n	80099b8 <pbuf_realloc+0x20>
 80099aa:	4b3a      	ldr	r3, [pc, #232]	@ (8009a94 <pbuf_realloc+0xfc>)
 80099ac:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 80099b0:	4939      	ldr	r1, [pc, #228]	@ (8009a98 <pbuf_realloc+0x100>)
 80099b2:	483a      	ldr	r0, [pc, #232]	@ (8009a9c <pbuf_realloc+0x104>)
 80099b4:	f009 f966 	bl	8012c84 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	891b      	ldrh	r3, [r3, #8]
 80099bc:	887a      	ldrh	r2, [r7, #2]
 80099be:	429a      	cmp	r2, r3
 80099c0:	d263      	bcs.n	8009a8a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	891a      	ldrh	r2, [r3, #8]
 80099c6:	887b      	ldrh	r3, [r7, #2]
 80099c8:	1ad3      	subs	r3, r2, r3
 80099ca:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80099cc:	887b      	ldrh	r3, [r7, #2]
 80099ce:	817b      	strh	r3, [r7, #10]
  q = p;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80099d4:	e018      	b.n	8009a08 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	895b      	ldrh	r3, [r3, #10]
 80099da:	897a      	ldrh	r2, [r7, #10]
 80099dc:	1ad3      	subs	r3, r2, r3
 80099de:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	891a      	ldrh	r2, [r3, #8]
 80099e4:	893b      	ldrh	r3, [r7, #8]
 80099e6:	1ad3      	subs	r3, r2, r3
 80099e8:	b29a      	uxth	r2, r3
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d106      	bne.n	8009a08 <pbuf_realloc+0x70>
 80099fa:	4b26      	ldr	r3, [pc, #152]	@ (8009a94 <pbuf_realloc+0xfc>)
 80099fc:	f240 12af 	movw	r2, #431	@ 0x1af
 8009a00:	4927      	ldr	r1, [pc, #156]	@ (8009aa0 <pbuf_realloc+0x108>)
 8009a02:	4826      	ldr	r0, [pc, #152]	@ (8009a9c <pbuf_realloc+0x104>)
 8009a04:	f009 f93e 	bl	8012c84 <iprintf>
  while (rem_len > q->len) {
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	895b      	ldrh	r3, [r3, #10]
 8009a0c:	897a      	ldrh	r2, [r7, #10]
 8009a0e:	429a      	cmp	r2, r3
 8009a10:	d8e1      	bhi.n	80099d6 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	7b1b      	ldrb	r3, [r3, #12]
 8009a16:	f003 030f 	and.w	r3, r3, #15
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d121      	bne.n	8009a62 <pbuf_realloc+0xca>
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	895b      	ldrh	r3, [r3, #10]
 8009a22:	897a      	ldrh	r2, [r7, #10]
 8009a24:	429a      	cmp	r2, r3
 8009a26:	d01c      	beq.n	8009a62 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	7b5b      	ldrb	r3, [r3, #13]
 8009a2c:	f003 0302 	and.w	r3, r3, #2
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d116      	bne.n	8009a62 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	685a      	ldr	r2, [r3, #4]
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	1ad3      	subs	r3, r2, r3
 8009a3c:	b29a      	uxth	r2, r3
 8009a3e:	897b      	ldrh	r3, [r7, #10]
 8009a40:	4413      	add	r3, r2
 8009a42:	b29b      	uxth	r3, r3
 8009a44:	4619      	mov	r1, r3
 8009a46:	68f8      	ldr	r0, [r7, #12]
 8009a48:	f7fe ffba 	bl	80089c0 <mem_trim>
 8009a4c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d106      	bne.n	8009a62 <pbuf_realloc+0xca>
 8009a54:	4b0f      	ldr	r3, [pc, #60]	@ (8009a94 <pbuf_realloc+0xfc>)
 8009a56:	f240 12bd 	movw	r2, #445	@ 0x1bd
 8009a5a:	4912      	ldr	r1, [pc, #72]	@ (8009aa4 <pbuf_realloc+0x10c>)
 8009a5c:	480f      	ldr	r0, [pc, #60]	@ (8009a9c <pbuf_realloc+0x104>)
 8009a5e:	f009 f911 	bl	8012c84 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	897a      	ldrh	r2, [r7, #10]
 8009a66:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	895a      	ldrh	r2, [r3, #10]
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d004      	beq.n	8009a82 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	f000 f911 	bl	8009ca4 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	2200      	movs	r2, #0
 8009a86:	601a      	str	r2, [r3, #0]
 8009a88:	e000      	b.n	8009a8c <pbuf_realloc+0xf4>
    return;
 8009a8a:	bf00      	nop

}
 8009a8c:	3710      	adds	r7, #16
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	bd80      	pop	{r7, pc}
 8009a92:	bf00      	nop
 8009a94:	08014434 	.word	0x08014434
 8009a98:	0801454c 	.word	0x0801454c
 8009a9c:	08014494 	.word	0x08014494
 8009aa0:	08014564 	.word	0x08014564
 8009aa4:	0801457c 	.word	0x0801457c

08009aa8 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b086      	sub	sp, #24
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	60f8      	str	r0, [r7, #12]
 8009ab0:	60b9      	str	r1, [r7, #8]
 8009ab2:	4613      	mov	r3, r2
 8009ab4:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d106      	bne.n	8009aca <pbuf_add_header_impl+0x22>
 8009abc:	4b2b      	ldr	r3, [pc, #172]	@ (8009b6c <pbuf_add_header_impl+0xc4>)
 8009abe:	f240 12df 	movw	r2, #479	@ 0x1df
 8009ac2:	492b      	ldr	r1, [pc, #172]	@ (8009b70 <pbuf_add_header_impl+0xc8>)
 8009ac4:	482b      	ldr	r0, [pc, #172]	@ (8009b74 <pbuf_add_header_impl+0xcc>)
 8009ac6:	f009 f8dd 	bl	8012c84 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d003      	beq.n	8009ad8 <pbuf_add_header_impl+0x30>
 8009ad0:	68bb      	ldr	r3, [r7, #8]
 8009ad2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009ad6:	d301      	bcc.n	8009adc <pbuf_add_header_impl+0x34>
    return 1;
 8009ad8:	2301      	movs	r3, #1
 8009ada:	e043      	b.n	8009b64 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8009adc:	68bb      	ldr	r3, [r7, #8]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d101      	bne.n	8009ae6 <pbuf_add_header_impl+0x3e>
    return 0;
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	e03e      	b.n	8009b64 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8009ae6:	68bb      	ldr	r3, [r7, #8]
 8009ae8:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	891a      	ldrh	r2, [r3, #8]
 8009aee:	8a7b      	ldrh	r3, [r7, #18]
 8009af0:	4413      	add	r3, r2
 8009af2:	b29b      	uxth	r3, r3
 8009af4:	8a7a      	ldrh	r2, [r7, #18]
 8009af6:	429a      	cmp	r2, r3
 8009af8:	d901      	bls.n	8009afe <pbuf_add_header_impl+0x56>
    return 1;
 8009afa:	2301      	movs	r3, #1
 8009afc:	e032      	b.n	8009b64 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	7b1b      	ldrb	r3, [r3, #12]
 8009b02:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8009b04:	8a3b      	ldrh	r3, [r7, #16]
 8009b06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d00c      	beq.n	8009b28 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	685a      	ldr	r2, [r3, #4]
 8009b12:	68bb      	ldr	r3, [r7, #8]
 8009b14:	425b      	negs	r3, r3
 8009b16:	4413      	add	r3, r2
 8009b18:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	3310      	adds	r3, #16
 8009b1e:	697a      	ldr	r2, [r7, #20]
 8009b20:	429a      	cmp	r2, r3
 8009b22:	d20d      	bcs.n	8009b40 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8009b24:	2301      	movs	r3, #1
 8009b26:	e01d      	b.n	8009b64 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8009b28:	79fb      	ldrb	r3, [r7, #7]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d006      	beq.n	8009b3c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	685a      	ldr	r2, [r3, #4]
 8009b32:	68bb      	ldr	r3, [r7, #8]
 8009b34:	425b      	negs	r3, r3
 8009b36:	4413      	add	r3, r2
 8009b38:	617b      	str	r3, [r7, #20]
 8009b3a:	e001      	b.n	8009b40 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8009b3c:	2301      	movs	r3, #1
 8009b3e:	e011      	b.n	8009b64 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	697a      	ldr	r2, [r7, #20]
 8009b44:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	895a      	ldrh	r2, [r3, #10]
 8009b4a:	8a7b      	ldrh	r3, [r7, #18]
 8009b4c:	4413      	add	r3, r2
 8009b4e:	b29a      	uxth	r2, r3
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	891a      	ldrh	r2, [r3, #8]
 8009b58:	8a7b      	ldrh	r3, [r7, #18]
 8009b5a:	4413      	add	r3, r2
 8009b5c:	b29a      	uxth	r2, r3
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	811a      	strh	r2, [r3, #8]


  return 0;
 8009b62:	2300      	movs	r3, #0
}
 8009b64:	4618      	mov	r0, r3
 8009b66:	3718      	adds	r7, #24
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	bd80      	pop	{r7, pc}
 8009b6c:	08014434 	.word	0x08014434
 8009b70:	08014598 	.word	0x08014598
 8009b74:	08014494 	.word	0x08014494

08009b78 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b082      	sub	sp, #8
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
 8009b80:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8009b82:	2200      	movs	r2, #0
 8009b84:	6839      	ldr	r1, [r7, #0]
 8009b86:	6878      	ldr	r0, [r7, #4]
 8009b88:	f7ff ff8e 	bl	8009aa8 <pbuf_add_header_impl>
 8009b8c:	4603      	mov	r3, r0
}
 8009b8e:	4618      	mov	r0, r3
 8009b90:	3708      	adds	r7, #8
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bd80      	pop	{r7, pc}
	...

08009b98 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b084      	sub	sp, #16
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
 8009ba0:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d106      	bne.n	8009bb6 <pbuf_remove_header+0x1e>
 8009ba8:	4b20      	ldr	r3, [pc, #128]	@ (8009c2c <pbuf_remove_header+0x94>)
 8009baa:	f240 224b 	movw	r2, #587	@ 0x24b
 8009bae:	4920      	ldr	r1, [pc, #128]	@ (8009c30 <pbuf_remove_header+0x98>)
 8009bb0:	4820      	ldr	r0, [pc, #128]	@ (8009c34 <pbuf_remove_header+0x9c>)
 8009bb2:	f009 f867 	bl	8012c84 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d003      	beq.n	8009bc4 <pbuf_remove_header+0x2c>
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009bc2:	d301      	bcc.n	8009bc8 <pbuf_remove_header+0x30>
    return 1;
 8009bc4:	2301      	movs	r3, #1
 8009bc6:	e02c      	b.n	8009c22 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d101      	bne.n	8009bd2 <pbuf_remove_header+0x3a>
    return 0;
 8009bce:	2300      	movs	r3, #0
 8009bd0:	e027      	b.n	8009c22 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	895b      	ldrh	r3, [r3, #10]
 8009bda:	89fa      	ldrh	r2, [r7, #14]
 8009bdc:	429a      	cmp	r2, r3
 8009bde:	d908      	bls.n	8009bf2 <pbuf_remove_header+0x5a>
 8009be0:	4b12      	ldr	r3, [pc, #72]	@ (8009c2c <pbuf_remove_header+0x94>)
 8009be2:	f240 2255 	movw	r2, #597	@ 0x255
 8009be6:	4914      	ldr	r1, [pc, #80]	@ (8009c38 <pbuf_remove_header+0xa0>)
 8009be8:	4812      	ldr	r0, [pc, #72]	@ (8009c34 <pbuf_remove_header+0x9c>)
 8009bea:	f009 f84b 	bl	8012c84 <iprintf>
 8009bee:	2301      	movs	r3, #1
 8009bf0:	e017      	b.n	8009c22 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	685b      	ldr	r3, [r3, #4]
 8009bf6:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	685a      	ldr	r2, [r3, #4]
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	441a      	add	r2, r3
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	895a      	ldrh	r2, [r3, #10]
 8009c08:	89fb      	ldrh	r3, [r7, #14]
 8009c0a:	1ad3      	subs	r3, r2, r3
 8009c0c:	b29a      	uxth	r2, r3
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	891a      	ldrh	r2, [r3, #8]
 8009c16:	89fb      	ldrh	r3, [r7, #14]
 8009c18:	1ad3      	subs	r3, r2, r3
 8009c1a:	b29a      	uxth	r2, r3
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8009c20:	2300      	movs	r3, #0
}
 8009c22:	4618      	mov	r0, r3
 8009c24:	3710      	adds	r7, #16
 8009c26:	46bd      	mov	sp, r7
 8009c28:	bd80      	pop	{r7, pc}
 8009c2a:	bf00      	nop
 8009c2c:	08014434 	.word	0x08014434
 8009c30:	08014598 	.word	0x08014598
 8009c34:	08014494 	.word	0x08014494
 8009c38:	080145a4 	.word	0x080145a4

08009c3c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b082      	sub	sp, #8
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
 8009c44:	460b      	mov	r3, r1
 8009c46:	807b      	strh	r3, [r7, #2]
 8009c48:	4613      	mov	r3, r2
 8009c4a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8009c4c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	da08      	bge.n	8009c66 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8009c54:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009c58:	425b      	negs	r3, r3
 8009c5a:	4619      	mov	r1, r3
 8009c5c:	6878      	ldr	r0, [r7, #4]
 8009c5e:	f7ff ff9b 	bl	8009b98 <pbuf_remove_header>
 8009c62:	4603      	mov	r3, r0
 8009c64:	e007      	b.n	8009c76 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8009c66:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009c6a:	787a      	ldrb	r2, [r7, #1]
 8009c6c:	4619      	mov	r1, r3
 8009c6e:	6878      	ldr	r0, [r7, #4]
 8009c70:	f7ff ff1a 	bl	8009aa8 <pbuf_add_header_impl>
 8009c74:	4603      	mov	r3, r0
  }
}
 8009c76:	4618      	mov	r0, r3
 8009c78:	3708      	adds	r7, #8
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	bd80      	pop	{r7, pc}

08009c7e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8009c7e:	b580      	push	{r7, lr}
 8009c80:	b082      	sub	sp, #8
 8009c82:	af00      	add	r7, sp, #0
 8009c84:	6078      	str	r0, [r7, #4]
 8009c86:	460b      	mov	r3, r1
 8009c88:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8009c8a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009c8e:	2201      	movs	r2, #1
 8009c90:	4619      	mov	r1, r3
 8009c92:	6878      	ldr	r0, [r7, #4]
 8009c94:	f7ff ffd2 	bl	8009c3c <pbuf_header_impl>
 8009c98:	4603      	mov	r3, r0
}
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	3708      	adds	r7, #8
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	bd80      	pop	{r7, pc}
	...

08009ca4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b086      	sub	sp, #24
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d10b      	bne.n	8009cca <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d106      	bne.n	8009cc6 <pbuf_free+0x22>
 8009cb8:	4b38      	ldr	r3, [pc, #224]	@ (8009d9c <pbuf_free+0xf8>)
 8009cba:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 8009cbe:	4938      	ldr	r1, [pc, #224]	@ (8009da0 <pbuf_free+0xfc>)
 8009cc0:	4838      	ldr	r0, [pc, #224]	@ (8009da4 <pbuf_free+0x100>)
 8009cc2:	f008 ffdf 	bl	8012c84 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	e063      	b.n	8009d92 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8009cca:	2300      	movs	r3, #0
 8009ccc:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8009cce:	e05c      	b.n	8009d8a <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	7b9b      	ldrb	r3, [r3, #14]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d106      	bne.n	8009ce6 <pbuf_free+0x42>
 8009cd8:	4b30      	ldr	r3, [pc, #192]	@ (8009d9c <pbuf_free+0xf8>)
 8009cda:	f240 22f1 	movw	r2, #753	@ 0x2f1
 8009cde:	4932      	ldr	r1, [pc, #200]	@ (8009da8 <pbuf_free+0x104>)
 8009ce0:	4830      	ldr	r0, [pc, #192]	@ (8009da4 <pbuf_free+0x100>)
 8009ce2:	f008 ffcf 	bl	8012c84 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	7b9b      	ldrb	r3, [r3, #14]
 8009cea:	3b01      	subs	r3, #1
 8009cec:	b2da      	uxtb	r2, r3
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	739a      	strb	r2, [r3, #14]
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	7b9b      	ldrb	r3, [r3, #14]
 8009cf6:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8009cf8:	7dbb      	ldrb	r3, [r7, #22]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d143      	bne.n	8009d86 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	7b1b      	ldrb	r3, [r3, #12]
 8009d08:	f003 030f 	and.w	r3, r3, #15
 8009d0c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	7b5b      	ldrb	r3, [r3, #13]
 8009d12:	f003 0302 	and.w	r3, r3, #2
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d011      	beq.n	8009d3e <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8009d1e:	68bb      	ldr	r3, [r7, #8]
 8009d20:	691b      	ldr	r3, [r3, #16]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d106      	bne.n	8009d34 <pbuf_free+0x90>
 8009d26:	4b1d      	ldr	r3, [pc, #116]	@ (8009d9c <pbuf_free+0xf8>)
 8009d28:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8009d2c:	491f      	ldr	r1, [pc, #124]	@ (8009dac <pbuf_free+0x108>)
 8009d2e:	481d      	ldr	r0, [pc, #116]	@ (8009da4 <pbuf_free+0x100>)
 8009d30:	f008 ffa8 	bl	8012c84 <iprintf>
        pc->custom_free_function(p);
 8009d34:	68bb      	ldr	r3, [r7, #8]
 8009d36:	691b      	ldr	r3, [r3, #16]
 8009d38:	6878      	ldr	r0, [r7, #4]
 8009d3a:	4798      	blx	r3
 8009d3c:	e01d      	b.n	8009d7a <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8009d3e:	7bfb      	ldrb	r3, [r7, #15]
 8009d40:	2b02      	cmp	r3, #2
 8009d42:	d104      	bne.n	8009d4e <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8009d44:	6879      	ldr	r1, [r7, #4]
 8009d46:	2008      	movs	r0, #8
 8009d48:	f7ff f936 	bl	8008fb8 <memp_free>
 8009d4c:	e015      	b.n	8009d7a <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8009d4e:	7bfb      	ldrb	r3, [r7, #15]
 8009d50:	2b01      	cmp	r3, #1
 8009d52:	d104      	bne.n	8009d5e <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8009d54:	6879      	ldr	r1, [r7, #4]
 8009d56:	2007      	movs	r0, #7
 8009d58:	f7ff f92e 	bl	8008fb8 <memp_free>
 8009d5c:	e00d      	b.n	8009d7a <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8009d5e:	7bfb      	ldrb	r3, [r7, #15]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d103      	bne.n	8009d6c <pbuf_free+0xc8>
          mem_free(p);
 8009d64:	6878      	ldr	r0, [r7, #4]
 8009d66:	f7fe fdc1 	bl	80088ec <mem_free>
 8009d6a:	e006      	b.n	8009d7a <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8009d6c:	4b0b      	ldr	r3, [pc, #44]	@ (8009d9c <pbuf_free+0xf8>)
 8009d6e:	f240 320f 	movw	r2, #783	@ 0x30f
 8009d72:	490f      	ldr	r1, [pc, #60]	@ (8009db0 <pbuf_free+0x10c>)
 8009d74:	480b      	ldr	r0, [pc, #44]	@ (8009da4 <pbuf_free+0x100>)
 8009d76:	f008 ff85 	bl	8012c84 <iprintf>
        }
      }
      count++;
 8009d7a:	7dfb      	ldrb	r3, [r7, #23]
 8009d7c:	3301      	adds	r3, #1
 8009d7e:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8009d80:	693b      	ldr	r3, [r7, #16]
 8009d82:	607b      	str	r3, [r7, #4]
 8009d84:	e001      	b.n	8009d8a <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8009d86:	2300      	movs	r3, #0
 8009d88:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d19f      	bne.n	8009cd0 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8009d90:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d92:	4618      	mov	r0, r3
 8009d94:	3718      	adds	r7, #24
 8009d96:	46bd      	mov	sp, r7
 8009d98:	bd80      	pop	{r7, pc}
 8009d9a:	bf00      	nop
 8009d9c:	08014434 	.word	0x08014434
 8009da0:	08014598 	.word	0x08014598
 8009da4:	08014494 	.word	0x08014494
 8009da8:	080145c4 	.word	0x080145c4
 8009dac:	080145dc 	.word	0x080145dc
 8009db0:	08014600 	.word	0x08014600

08009db4 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8009db4:	b480      	push	{r7}
 8009db6:	b085      	sub	sp, #20
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8009dc0:	e005      	b.n	8009dce <pbuf_clen+0x1a>
    ++len;
 8009dc2:	89fb      	ldrh	r3, [r7, #14]
 8009dc4:	3301      	adds	r3, #1
 8009dc6:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d1f6      	bne.n	8009dc2 <pbuf_clen+0xe>
  }
  return len;
 8009dd4:	89fb      	ldrh	r3, [r7, #14]
}
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	3714      	adds	r7, #20
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de0:	4770      	bx	lr
	...

08009de4 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b082      	sub	sp, #8
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d010      	beq.n	8009e14 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	7b9b      	ldrb	r3, [r3, #14]
 8009df6:	3301      	adds	r3, #1
 8009df8:	b2da      	uxtb	r2, r3
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	7b9b      	ldrb	r3, [r3, #14]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d106      	bne.n	8009e14 <pbuf_ref+0x30>
 8009e06:	4b05      	ldr	r3, [pc, #20]	@ (8009e1c <pbuf_ref+0x38>)
 8009e08:	f240 3242 	movw	r2, #834	@ 0x342
 8009e0c:	4904      	ldr	r1, [pc, #16]	@ (8009e20 <pbuf_ref+0x3c>)
 8009e0e:	4805      	ldr	r0, [pc, #20]	@ (8009e24 <pbuf_ref+0x40>)
 8009e10:	f008 ff38 	bl	8012c84 <iprintf>
  }
}
 8009e14:	bf00      	nop
 8009e16:	3708      	adds	r7, #8
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	bd80      	pop	{r7, pc}
 8009e1c:	08014434 	.word	0x08014434
 8009e20:	08014614 	.word	0x08014614
 8009e24:	08014494 	.word	0x08014494

08009e28 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b084      	sub	sp, #16
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
 8009e30:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d002      	beq.n	8009e3e <pbuf_cat+0x16>
 8009e38:	683b      	ldr	r3, [r7, #0]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d107      	bne.n	8009e4e <pbuf_cat+0x26>
 8009e3e:	4b20      	ldr	r3, [pc, #128]	@ (8009ec0 <pbuf_cat+0x98>)
 8009e40:	f240 3259 	movw	r2, #857	@ 0x359
 8009e44:	491f      	ldr	r1, [pc, #124]	@ (8009ec4 <pbuf_cat+0x9c>)
 8009e46:	4820      	ldr	r0, [pc, #128]	@ (8009ec8 <pbuf_cat+0xa0>)
 8009e48:	f008 ff1c 	bl	8012c84 <iprintf>
 8009e4c:	e034      	b.n	8009eb8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	60fb      	str	r3, [r7, #12]
 8009e52:	e00a      	b.n	8009e6a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	891a      	ldrh	r2, [r3, #8]
 8009e58:	683b      	ldr	r3, [r7, #0]
 8009e5a:	891b      	ldrh	r3, [r3, #8]
 8009e5c:	4413      	add	r3, r2
 8009e5e:	b29a      	uxth	r2, r3
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	60fb      	str	r3, [r7, #12]
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d1f0      	bne.n	8009e54 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	891a      	ldrh	r2, [r3, #8]
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	895b      	ldrh	r3, [r3, #10]
 8009e7a:	429a      	cmp	r2, r3
 8009e7c:	d006      	beq.n	8009e8c <pbuf_cat+0x64>
 8009e7e:	4b10      	ldr	r3, [pc, #64]	@ (8009ec0 <pbuf_cat+0x98>)
 8009e80:	f240 3262 	movw	r2, #866	@ 0x362
 8009e84:	4911      	ldr	r1, [pc, #68]	@ (8009ecc <pbuf_cat+0xa4>)
 8009e86:	4810      	ldr	r0, [pc, #64]	@ (8009ec8 <pbuf_cat+0xa0>)
 8009e88:	f008 fefc 	bl	8012c84 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d006      	beq.n	8009ea2 <pbuf_cat+0x7a>
 8009e94:	4b0a      	ldr	r3, [pc, #40]	@ (8009ec0 <pbuf_cat+0x98>)
 8009e96:	f240 3263 	movw	r2, #867	@ 0x363
 8009e9a:	490d      	ldr	r1, [pc, #52]	@ (8009ed0 <pbuf_cat+0xa8>)
 8009e9c:	480a      	ldr	r0, [pc, #40]	@ (8009ec8 <pbuf_cat+0xa0>)
 8009e9e:	f008 fef1 	bl	8012c84 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	891a      	ldrh	r2, [r3, #8]
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	891b      	ldrh	r3, [r3, #8]
 8009eaa:	4413      	add	r3, r2
 8009eac:	b29a      	uxth	r2, r3
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	683a      	ldr	r2, [r7, #0]
 8009eb6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8009eb8:	3710      	adds	r7, #16
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	bd80      	pop	{r7, pc}
 8009ebe:	bf00      	nop
 8009ec0:	08014434 	.word	0x08014434
 8009ec4:	08014628 	.word	0x08014628
 8009ec8:	08014494 	.word	0x08014494
 8009ecc:	08014660 	.word	0x08014660
 8009ed0:	08014690 	.word	0x08014690

08009ed4 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b082      	sub	sp, #8
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
 8009edc:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8009ede:	6839      	ldr	r1, [r7, #0]
 8009ee0:	6878      	ldr	r0, [r7, #4]
 8009ee2:	f7ff ffa1 	bl	8009e28 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8009ee6:	6838      	ldr	r0, [r7, #0]
 8009ee8:	f7ff ff7c 	bl	8009de4 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8009eec:	bf00      	nop
 8009eee:	3708      	adds	r7, #8
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	bd80      	pop	{r7, pc}

08009ef4 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b086      	sub	sp, #24
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
 8009efc:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8009efe:	2300      	movs	r3, #0
 8009f00:	617b      	str	r3, [r7, #20]
 8009f02:	2300      	movs	r3, #0
 8009f04:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d008      	beq.n	8009f1e <pbuf_copy+0x2a>
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d005      	beq.n	8009f1e <pbuf_copy+0x2a>
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	891a      	ldrh	r2, [r3, #8]
 8009f16:	683b      	ldr	r3, [r7, #0]
 8009f18:	891b      	ldrh	r3, [r3, #8]
 8009f1a:	429a      	cmp	r2, r3
 8009f1c:	d209      	bcs.n	8009f32 <pbuf_copy+0x3e>
 8009f1e:	4b57      	ldr	r3, [pc, #348]	@ (800a07c <pbuf_copy+0x188>)
 8009f20:	f240 32c9 	movw	r2, #969	@ 0x3c9
 8009f24:	4956      	ldr	r1, [pc, #344]	@ (800a080 <pbuf_copy+0x18c>)
 8009f26:	4857      	ldr	r0, [pc, #348]	@ (800a084 <pbuf_copy+0x190>)
 8009f28:	f008 feac 	bl	8012c84 <iprintf>
 8009f2c:	f06f 030f 	mvn.w	r3, #15
 8009f30:	e09f      	b.n	800a072 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	895b      	ldrh	r3, [r3, #10]
 8009f36:	461a      	mov	r2, r3
 8009f38:	697b      	ldr	r3, [r7, #20]
 8009f3a:	1ad2      	subs	r2, r2, r3
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	895b      	ldrh	r3, [r3, #10]
 8009f40:	4619      	mov	r1, r3
 8009f42:	693b      	ldr	r3, [r7, #16]
 8009f44:	1acb      	subs	r3, r1, r3
 8009f46:	429a      	cmp	r2, r3
 8009f48:	d306      	bcc.n	8009f58 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	895b      	ldrh	r3, [r3, #10]
 8009f4e:	461a      	mov	r2, r3
 8009f50:	693b      	ldr	r3, [r7, #16]
 8009f52:	1ad3      	subs	r3, r2, r3
 8009f54:	60fb      	str	r3, [r7, #12]
 8009f56:	e005      	b.n	8009f64 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	895b      	ldrh	r3, [r3, #10]
 8009f5c:	461a      	mov	r2, r3
 8009f5e:	697b      	ldr	r3, [r7, #20]
 8009f60:	1ad3      	subs	r3, r2, r3
 8009f62:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	685a      	ldr	r2, [r3, #4]
 8009f68:	697b      	ldr	r3, [r7, #20]
 8009f6a:	18d0      	adds	r0, r2, r3
 8009f6c:	683b      	ldr	r3, [r7, #0]
 8009f6e:	685a      	ldr	r2, [r3, #4]
 8009f70:	693b      	ldr	r3, [r7, #16]
 8009f72:	4413      	add	r3, r2
 8009f74:	68fa      	ldr	r2, [r7, #12]
 8009f76:	4619      	mov	r1, r3
 8009f78:	f008 ffc3 	bl	8012f02 <memcpy>
    offset_to += len;
 8009f7c:	697a      	ldr	r2, [r7, #20]
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	4413      	add	r3, r2
 8009f82:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8009f84:	693a      	ldr	r2, [r7, #16]
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	4413      	add	r3, r2
 8009f8a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	895b      	ldrh	r3, [r3, #10]
 8009f90:	461a      	mov	r2, r3
 8009f92:	697b      	ldr	r3, [r7, #20]
 8009f94:	4293      	cmp	r3, r2
 8009f96:	d906      	bls.n	8009fa6 <pbuf_copy+0xb2>
 8009f98:	4b38      	ldr	r3, [pc, #224]	@ (800a07c <pbuf_copy+0x188>)
 8009f9a:	f240 32d9 	movw	r2, #985	@ 0x3d9
 8009f9e:	493a      	ldr	r1, [pc, #232]	@ (800a088 <pbuf_copy+0x194>)
 8009fa0:	4838      	ldr	r0, [pc, #224]	@ (800a084 <pbuf_copy+0x190>)
 8009fa2:	f008 fe6f 	bl	8012c84 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8009fa6:	683b      	ldr	r3, [r7, #0]
 8009fa8:	895b      	ldrh	r3, [r3, #10]
 8009faa:	461a      	mov	r2, r3
 8009fac:	693b      	ldr	r3, [r7, #16]
 8009fae:	4293      	cmp	r3, r2
 8009fb0:	d906      	bls.n	8009fc0 <pbuf_copy+0xcc>
 8009fb2:	4b32      	ldr	r3, [pc, #200]	@ (800a07c <pbuf_copy+0x188>)
 8009fb4:	f240 32da 	movw	r2, #986	@ 0x3da
 8009fb8:	4934      	ldr	r1, [pc, #208]	@ (800a08c <pbuf_copy+0x198>)
 8009fba:	4832      	ldr	r0, [pc, #200]	@ (800a084 <pbuf_copy+0x190>)
 8009fbc:	f008 fe62 	bl	8012c84 <iprintf>
    if (offset_from >= p_from->len) {
 8009fc0:	683b      	ldr	r3, [r7, #0]
 8009fc2:	895b      	ldrh	r3, [r3, #10]
 8009fc4:	461a      	mov	r2, r3
 8009fc6:	693b      	ldr	r3, [r7, #16]
 8009fc8:	4293      	cmp	r3, r2
 8009fca:	d304      	bcc.n	8009fd6 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8009fcc:	2300      	movs	r3, #0
 8009fce:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8009fd0:	683b      	ldr	r3, [r7, #0]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	895b      	ldrh	r3, [r3, #10]
 8009fda:	461a      	mov	r2, r3
 8009fdc:	697b      	ldr	r3, [r7, #20]
 8009fde:	4293      	cmp	r3, r2
 8009fe0:	d114      	bne.n	800a00c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d10c      	bne.n	800a00c <pbuf_copy+0x118>
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d009      	beq.n	800a00c <pbuf_copy+0x118>
 8009ff8:	4b20      	ldr	r3, [pc, #128]	@ (800a07c <pbuf_copy+0x188>)
 8009ffa:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 8009ffe:	4924      	ldr	r1, [pc, #144]	@ (800a090 <pbuf_copy+0x19c>)
 800a000:	4820      	ldr	r0, [pc, #128]	@ (800a084 <pbuf_copy+0x190>)
 800a002:	f008 fe3f 	bl	8012c84 <iprintf>
 800a006:	f06f 030f 	mvn.w	r3, #15
 800a00a:	e032      	b.n	800a072 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d013      	beq.n	800a03a <pbuf_copy+0x146>
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	895a      	ldrh	r2, [r3, #10]
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	891b      	ldrh	r3, [r3, #8]
 800a01a:	429a      	cmp	r2, r3
 800a01c:	d10d      	bne.n	800a03a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d009      	beq.n	800a03a <pbuf_copy+0x146>
 800a026:	4b15      	ldr	r3, [pc, #84]	@ (800a07c <pbuf_copy+0x188>)
 800a028:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800a02c:	4919      	ldr	r1, [pc, #100]	@ (800a094 <pbuf_copy+0x1a0>)
 800a02e:	4815      	ldr	r0, [pc, #84]	@ (800a084 <pbuf_copy+0x190>)
 800a030:	f008 fe28 	bl	8012c84 <iprintf>
 800a034:	f06f 0305 	mvn.w	r3, #5
 800a038:	e01b      	b.n	800a072 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d013      	beq.n	800a068 <pbuf_copy+0x174>
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	895a      	ldrh	r2, [r3, #10]
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	891b      	ldrh	r3, [r3, #8]
 800a048:	429a      	cmp	r2, r3
 800a04a:	d10d      	bne.n	800a068 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d009      	beq.n	800a068 <pbuf_copy+0x174>
 800a054:	4b09      	ldr	r3, [pc, #36]	@ (800a07c <pbuf_copy+0x188>)
 800a056:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800a05a:	490e      	ldr	r1, [pc, #56]	@ (800a094 <pbuf_copy+0x1a0>)
 800a05c:	4809      	ldr	r0, [pc, #36]	@ (800a084 <pbuf_copy+0x190>)
 800a05e:	f008 fe11 	bl	8012c84 <iprintf>
 800a062:	f06f 0305 	mvn.w	r3, #5
 800a066:	e004      	b.n	800a072 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	f47f af61 	bne.w	8009f32 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800a070:	2300      	movs	r3, #0
}
 800a072:	4618      	mov	r0, r3
 800a074:	3718      	adds	r7, #24
 800a076:	46bd      	mov	sp, r7
 800a078:	bd80      	pop	{r7, pc}
 800a07a:	bf00      	nop
 800a07c:	08014434 	.word	0x08014434
 800a080:	080146dc 	.word	0x080146dc
 800a084:	08014494 	.word	0x08014494
 800a088:	0801470c 	.word	0x0801470c
 800a08c:	08014724 	.word	0x08014724
 800a090:	08014740 	.word	0x08014740
 800a094:	08014750 	.word	0x08014750

0800a098 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b088      	sub	sp, #32
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	60f8      	str	r0, [r7, #12]
 800a0a0:	60b9      	str	r1, [r7, #8]
 800a0a2:	4611      	mov	r1, r2
 800a0a4:	461a      	mov	r2, r3
 800a0a6:	460b      	mov	r3, r1
 800a0a8:	80fb      	strh	r3, [r7, #6]
 800a0aa:	4613      	mov	r3, r2
 800a0ac:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d108      	bne.n	800a0ce <pbuf_copy_partial+0x36>
 800a0bc:	4b2b      	ldr	r3, [pc, #172]	@ (800a16c <pbuf_copy_partial+0xd4>)
 800a0be:	f240 420a 	movw	r2, #1034	@ 0x40a
 800a0c2:	492b      	ldr	r1, [pc, #172]	@ (800a170 <pbuf_copy_partial+0xd8>)
 800a0c4:	482b      	ldr	r0, [pc, #172]	@ (800a174 <pbuf_copy_partial+0xdc>)
 800a0c6:	f008 fddd 	bl	8012c84 <iprintf>
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	e04a      	b.n	800a164 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800a0ce:	68bb      	ldr	r3, [r7, #8]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d108      	bne.n	800a0e6 <pbuf_copy_partial+0x4e>
 800a0d4:	4b25      	ldr	r3, [pc, #148]	@ (800a16c <pbuf_copy_partial+0xd4>)
 800a0d6:	f240 420b 	movw	r2, #1035	@ 0x40b
 800a0da:	4927      	ldr	r1, [pc, #156]	@ (800a178 <pbuf_copy_partial+0xe0>)
 800a0dc:	4825      	ldr	r0, [pc, #148]	@ (800a174 <pbuf_copy_partial+0xdc>)
 800a0de:	f008 fdd1 	bl	8012c84 <iprintf>
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	e03e      	b.n	800a164 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	61fb      	str	r3, [r7, #28]
 800a0ea:	e034      	b.n	800a156 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800a0ec:	88bb      	ldrh	r3, [r7, #4]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d00a      	beq.n	800a108 <pbuf_copy_partial+0x70>
 800a0f2:	69fb      	ldr	r3, [r7, #28]
 800a0f4:	895b      	ldrh	r3, [r3, #10]
 800a0f6:	88ba      	ldrh	r2, [r7, #4]
 800a0f8:	429a      	cmp	r2, r3
 800a0fa:	d305      	bcc.n	800a108 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800a0fc:	69fb      	ldr	r3, [r7, #28]
 800a0fe:	895b      	ldrh	r3, [r3, #10]
 800a100:	88ba      	ldrh	r2, [r7, #4]
 800a102:	1ad3      	subs	r3, r2, r3
 800a104:	80bb      	strh	r3, [r7, #4]
 800a106:	e023      	b.n	800a150 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800a108:	69fb      	ldr	r3, [r7, #28]
 800a10a:	895a      	ldrh	r2, [r3, #10]
 800a10c:	88bb      	ldrh	r3, [r7, #4]
 800a10e:	1ad3      	subs	r3, r2, r3
 800a110:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800a112:	8b3a      	ldrh	r2, [r7, #24]
 800a114:	88fb      	ldrh	r3, [r7, #6]
 800a116:	429a      	cmp	r2, r3
 800a118:	d901      	bls.n	800a11e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800a11a:	88fb      	ldrh	r3, [r7, #6]
 800a11c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800a11e:	8b7b      	ldrh	r3, [r7, #26]
 800a120:	68ba      	ldr	r2, [r7, #8]
 800a122:	18d0      	adds	r0, r2, r3
 800a124:	69fb      	ldr	r3, [r7, #28]
 800a126:	685a      	ldr	r2, [r3, #4]
 800a128:	88bb      	ldrh	r3, [r7, #4]
 800a12a:	4413      	add	r3, r2
 800a12c:	8b3a      	ldrh	r2, [r7, #24]
 800a12e:	4619      	mov	r1, r3
 800a130:	f008 fee7 	bl	8012f02 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800a134:	8afa      	ldrh	r2, [r7, #22]
 800a136:	8b3b      	ldrh	r3, [r7, #24]
 800a138:	4413      	add	r3, r2
 800a13a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800a13c:	8b7a      	ldrh	r2, [r7, #26]
 800a13e:	8b3b      	ldrh	r3, [r7, #24]
 800a140:	4413      	add	r3, r2
 800a142:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800a144:	88fa      	ldrh	r2, [r7, #6]
 800a146:	8b3b      	ldrh	r3, [r7, #24]
 800a148:	1ad3      	subs	r3, r2, r3
 800a14a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800a14c:	2300      	movs	r3, #0
 800a14e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800a150:	69fb      	ldr	r3, [r7, #28]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	61fb      	str	r3, [r7, #28]
 800a156:	88fb      	ldrh	r3, [r7, #6]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d002      	beq.n	800a162 <pbuf_copy_partial+0xca>
 800a15c:	69fb      	ldr	r3, [r7, #28]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d1c4      	bne.n	800a0ec <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800a162:	8afb      	ldrh	r3, [r7, #22]
}
 800a164:	4618      	mov	r0, r3
 800a166:	3720      	adds	r7, #32
 800a168:	46bd      	mov	sp, r7
 800a16a:	bd80      	pop	{r7, pc}
 800a16c:	08014434 	.word	0x08014434
 800a170:	0801477c 	.word	0x0801477c
 800a174:	08014494 	.word	0x08014494
 800a178:	0801479c 	.word	0x0801479c

0800a17c <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b088      	sub	sp, #32
 800a180:	af00      	add	r7, sp, #0
 800a182:	60f8      	str	r0, [r7, #12]
 800a184:	60b9      	str	r1, [r7, #8]
 800a186:	4613      	mov	r3, r2
 800a188:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 800a18a:	88fb      	ldrh	r3, [r7, #6]
 800a18c:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 800a18e:	2300      	movs	r3, #0
 800a190:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d109      	bne.n	800a1ac <pbuf_take+0x30>
 800a198:	4b3a      	ldr	r3, [pc, #232]	@ (800a284 <pbuf_take+0x108>)
 800a19a:	f240 42b3 	movw	r2, #1203	@ 0x4b3
 800a19e:	493a      	ldr	r1, [pc, #232]	@ (800a288 <pbuf_take+0x10c>)
 800a1a0:	483a      	ldr	r0, [pc, #232]	@ (800a28c <pbuf_take+0x110>)
 800a1a2:	f008 fd6f 	bl	8012c84 <iprintf>
 800a1a6:	f06f 030f 	mvn.w	r3, #15
 800a1aa:	e067      	b.n	800a27c <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800a1ac:	68bb      	ldr	r3, [r7, #8]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d109      	bne.n	800a1c6 <pbuf_take+0x4a>
 800a1b2:	4b34      	ldr	r3, [pc, #208]	@ (800a284 <pbuf_take+0x108>)
 800a1b4:	f240 42b4 	movw	r2, #1204	@ 0x4b4
 800a1b8:	4935      	ldr	r1, [pc, #212]	@ (800a290 <pbuf_take+0x114>)
 800a1ba:	4834      	ldr	r0, [pc, #208]	@ (800a28c <pbuf_take+0x110>)
 800a1bc:	f008 fd62 	bl	8012c84 <iprintf>
 800a1c0:	f06f 030f 	mvn.w	r3, #15
 800a1c4:	e05a      	b.n	800a27c <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	891b      	ldrh	r3, [r3, #8]
 800a1ca:	88fa      	ldrh	r2, [r7, #6]
 800a1cc:	429a      	cmp	r2, r3
 800a1ce:	d909      	bls.n	800a1e4 <pbuf_take+0x68>
 800a1d0:	4b2c      	ldr	r3, [pc, #176]	@ (800a284 <pbuf_take+0x108>)
 800a1d2:	f240 42b5 	movw	r2, #1205	@ 0x4b5
 800a1d6:	492f      	ldr	r1, [pc, #188]	@ (800a294 <pbuf_take+0x118>)
 800a1d8:	482c      	ldr	r0, [pc, #176]	@ (800a28c <pbuf_take+0x110>)
 800a1da:	f008 fd53 	bl	8012c84 <iprintf>
 800a1de:	f04f 33ff 	mov.w	r3, #4294967295
 800a1e2:	e04b      	b.n	800a27c <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d007      	beq.n	800a1fa <pbuf_take+0x7e>
 800a1ea:	68bb      	ldr	r3, [r7, #8]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d004      	beq.n	800a1fa <pbuf_take+0x7e>
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	891b      	ldrh	r3, [r3, #8]
 800a1f4:	88fa      	ldrh	r2, [r7, #6]
 800a1f6:	429a      	cmp	r2, r3
 800a1f8:	d902      	bls.n	800a200 <pbuf_take+0x84>
    return ERR_ARG;
 800a1fa:	f06f 030f 	mvn.w	r3, #15
 800a1fe:	e03d      	b.n	800a27c <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	61fb      	str	r3, [r7, #28]
 800a204:	e028      	b.n	800a258 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 800a206:	69fb      	ldr	r3, [r7, #28]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d106      	bne.n	800a21a <pbuf_take+0x9e>
 800a20c:	4b1d      	ldr	r3, [pc, #116]	@ (800a284 <pbuf_take+0x108>)
 800a20e:	f240 42bd 	movw	r2, #1213	@ 0x4bd
 800a212:	4921      	ldr	r1, [pc, #132]	@ (800a298 <pbuf_take+0x11c>)
 800a214:	481d      	ldr	r0, [pc, #116]	@ (800a28c <pbuf_take+0x110>)
 800a216:	f008 fd35 	bl	8012c84 <iprintf>
    buf_copy_len = total_copy_len;
 800a21a:	697b      	ldr	r3, [r7, #20]
 800a21c:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 800a21e:	69fb      	ldr	r3, [r7, #28]
 800a220:	895b      	ldrh	r3, [r3, #10]
 800a222:	461a      	mov	r2, r3
 800a224:	69bb      	ldr	r3, [r7, #24]
 800a226:	4293      	cmp	r3, r2
 800a228:	d902      	bls.n	800a230 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 800a22a:	69fb      	ldr	r3, [r7, #28]
 800a22c:	895b      	ldrh	r3, [r3, #10]
 800a22e:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 800a230:	69fb      	ldr	r3, [r7, #28]
 800a232:	6858      	ldr	r0, [r3, #4]
 800a234:	68ba      	ldr	r2, [r7, #8]
 800a236:	693b      	ldr	r3, [r7, #16]
 800a238:	4413      	add	r3, r2
 800a23a:	69ba      	ldr	r2, [r7, #24]
 800a23c:	4619      	mov	r1, r3
 800a23e:	f008 fe60 	bl	8012f02 <memcpy>
    total_copy_len -= buf_copy_len;
 800a242:	697a      	ldr	r2, [r7, #20]
 800a244:	69bb      	ldr	r3, [r7, #24]
 800a246:	1ad3      	subs	r3, r2, r3
 800a248:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 800a24a:	693a      	ldr	r2, [r7, #16]
 800a24c:	69bb      	ldr	r3, [r7, #24]
 800a24e:	4413      	add	r3, r2
 800a250:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 800a252:	69fb      	ldr	r3, [r7, #28]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	61fb      	str	r3, [r7, #28]
 800a258:	697b      	ldr	r3, [r7, #20]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d1d3      	bne.n	800a206 <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 800a25e:	697b      	ldr	r3, [r7, #20]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d103      	bne.n	800a26c <pbuf_take+0xf0>
 800a264:	88fb      	ldrh	r3, [r7, #6]
 800a266:	693a      	ldr	r2, [r7, #16]
 800a268:	429a      	cmp	r2, r3
 800a26a:	d006      	beq.n	800a27a <pbuf_take+0xfe>
 800a26c:	4b05      	ldr	r3, [pc, #20]	@ (800a284 <pbuf_take+0x108>)
 800a26e:	f44f 6299 	mov.w	r2, #1224	@ 0x4c8
 800a272:	490a      	ldr	r1, [pc, #40]	@ (800a29c <pbuf_take+0x120>)
 800a274:	4805      	ldr	r0, [pc, #20]	@ (800a28c <pbuf_take+0x110>)
 800a276:	f008 fd05 	bl	8012c84 <iprintf>
  return ERR_OK;
 800a27a:	2300      	movs	r3, #0
}
 800a27c:	4618      	mov	r0, r3
 800a27e:	3720      	adds	r7, #32
 800a280:	46bd      	mov	sp, r7
 800a282:	bd80      	pop	{r7, pc}
 800a284:	08014434 	.word	0x08014434
 800a288:	0801480c 	.word	0x0801480c
 800a28c:	08014494 	.word	0x08014494
 800a290:	08014824 	.word	0x08014824
 800a294:	08014840 	.word	0x08014840
 800a298:	08014860 	.word	0x08014860
 800a29c:	08014878 	.word	0x08014878

0800a2a0 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b084      	sub	sp, #16
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	4603      	mov	r3, r0
 800a2a8:	603a      	str	r2, [r7, #0]
 800a2aa:	71fb      	strb	r3, [r7, #7]
 800a2ac:	460b      	mov	r3, r1
 800a2ae:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	8919      	ldrh	r1, [r3, #8]
 800a2b4:	88ba      	ldrh	r2, [r7, #4]
 800a2b6:	79fb      	ldrb	r3, [r7, #7]
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	f7ff fa0f 	bl	80096dc <pbuf_alloc>
 800a2be:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d101      	bne.n	800a2ca <pbuf_clone+0x2a>
    return NULL;
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	e011      	b.n	800a2ee <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800a2ca:	6839      	ldr	r1, [r7, #0]
 800a2cc:	68f8      	ldr	r0, [r7, #12]
 800a2ce:	f7ff fe11 	bl	8009ef4 <pbuf_copy>
 800a2d2:	4603      	mov	r3, r0
 800a2d4:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800a2d6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d006      	beq.n	800a2ec <pbuf_clone+0x4c>
 800a2de:	4b06      	ldr	r3, [pc, #24]	@ (800a2f8 <pbuf_clone+0x58>)
 800a2e0:	f240 5224 	movw	r2, #1316	@ 0x524
 800a2e4:	4905      	ldr	r1, [pc, #20]	@ (800a2fc <pbuf_clone+0x5c>)
 800a2e6:	4806      	ldr	r0, [pc, #24]	@ (800a300 <pbuf_clone+0x60>)
 800a2e8:	f008 fccc 	bl	8012c84 <iprintf>
  return q;
 800a2ec:	68fb      	ldr	r3, [r7, #12]
}
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	3710      	adds	r7, #16
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	bd80      	pop	{r7, pc}
 800a2f6:	bf00      	nop
 800a2f8:	08014434 	.word	0x08014434
 800a2fc:	080148a8 	.word	0x080148a8
 800a300:	08014494 	.word	0x08014494

0800a304 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800a304:	b580      	push	{r7, lr}
 800a306:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800a308:	f008 fb38 	bl	801297c <rand>
 800a30c:	4603      	mov	r3, r0
 800a30e:	b29b      	uxth	r3, r3
 800a310:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800a314:	b29b      	uxth	r3, r3
 800a316:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800a31a:	b29a      	uxth	r2, r3
 800a31c:	4b01      	ldr	r3, [pc, #4]	@ (800a324 <tcp_init+0x20>)
 800a31e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800a320:	bf00      	nop
 800a322:	bd80      	pop	{r7, pc}
 800a324:	20000068 	.word	0x20000068

0800a328 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b082      	sub	sp, #8
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	7d1b      	ldrb	r3, [r3, #20]
 800a334:	2b01      	cmp	r3, #1
 800a336:	d105      	bne.n	800a344 <tcp_free+0x1c>
 800a338:	4b06      	ldr	r3, [pc, #24]	@ (800a354 <tcp_free+0x2c>)
 800a33a:	22d4      	movs	r2, #212	@ 0xd4
 800a33c:	4906      	ldr	r1, [pc, #24]	@ (800a358 <tcp_free+0x30>)
 800a33e:	4807      	ldr	r0, [pc, #28]	@ (800a35c <tcp_free+0x34>)
 800a340:	f008 fca0 	bl	8012c84 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800a344:	6879      	ldr	r1, [r7, #4]
 800a346:	2001      	movs	r0, #1
 800a348:	f7fe fe36 	bl	8008fb8 <memp_free>
}
 800a34c:	bf00      	nop
 800a34e:	3708      	adds	r7, #8
 800a350:	46bd      	mov	sp, r7
 800a352:	bd80      	pop	{r7, pc}
 800a354:	08014934 	.word	0x08014934
 800a358:	08014964 	.word	0x08014964
 800a35c:	08014978 	.word	0x08014978

0800a360 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800a360:	b580      	push	{r7, lr}
 800a362:	b082      	sub	sp, #8
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	7d1b      	ldrb	r3, [r3, #20]
 800a36c:	2b01      	cmp	r3, #1
 800a36e:	d105      	bne.n	800a37c <tcp_free_listen+0x1c>
 800a370:	4b06      	ldr	r3, [pc, #24]	@ (800a38c <tcp_free_listen+0x2c>)
 800a372:	22df      	movs	r2, #223	@ 0xdf
 800a374:	4906      	ldr	r1, [pc, #24]	@ (800a390 <tcp_free_listen+0x30>)
 800a376:	4807      	ldr	r0, [pc, #28]	@ (800a394 <tcp_free_listen+0x34>)
 800a378:	f008 fc84 	bl	8012c84 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800a37c:	6879      	ldr	r1, [r7, #4]
 800a37e:	2002      	movs	r0, #2
 800a380:	f7fe fe1a 	bl	8008fb8 <memp_free>
}
 800a384:	bf00      	nop
 800a386:	3708      	adds	r7, #8
 800a388:	46bd      	mov	sp, r7
 800a38a:	bd80      	pop	{r7, pc}
 800a38c:	08014934 	.word	0x08014934
 800a390:	080149a0 	.word	0x080149a0
 800a394:	08014978 	.word	0x08014978

0800a398 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800a39c:	f000 fea4 	bl	800b0e8 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800a3a0:	4b07      	ldr	r3, [pc, #28]	@ (800a3c0 <tcp_tmr+0x28>)
 800a3a2:	781b      	ldrb	r3, [r3, #0]
 800a3a4:	3301      	adds	r3, #1
 800a3a6:	b2da      	uxtb	r2, r3
 800a3a8:	4b05      	ldr	r3, [pc, #20]	@ (800a3c0 <tcp_tmr+0x28>)
 800a3aa:	701a      	strb	r2, [r3, #0]
 800a3ac:	4b04      	ldr	r3, [pc, #16]	@ (800a3c0 <tcp_tmr+0x28>)
 800a3ae:	781b      	ldrb	r3, [r3, #0]
 800a3b0:	f003 0301 	and.w	r3, r3, #1
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d001      	beq.n	800a3bc <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800a3b8:	f000 fb54 	bl	800aa64 <tcp_slowtmr>
  }
}
 800a3bc:	bf00      	nop
 800a3be:	bd80      	pop	{r7, pc}
 800a3c0:	20008921 	.word	0x20008921

0800a3c4 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b084      	sub	sp, #16
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
 800a3cc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800a3ce:	683b      	ldr	r3, [r7, #0]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d105      	bne.n	800a3e0 <tcp_remove_listener+0x1c>
 800a3d4:	4b0d      	ldr	r3, [pc, #52]	@ (800a40c <tcp_remove_listener+0x48>)
 800a3d6:	22ff      	movs	r2, #255	@ 0xff
 800a3d8:	490d      	ldr	r1, [pc, #52]	@ (800a410 <tcp_remove_listener+0x4c>)
 800a3da:	480e      	ldr	r0, [pc, #56]	@ (800a414 <tcp_remove_listener+0x50>)
 800a3dc:	f008 fc52 	bl	8012c84 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	60fb      	str	r3, [r7, #12]
 800a3e4:	e00a      	b.n	800a3fc <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a3ea:	683a      	ldr	r2, [r7, #0]
 800a3ec:	429a      	cmp	r2, r3
 800a3ee:	d102      	bne.n	800a3f6 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	2200      	movs	r2, #0
 800a3f4:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	68db      	ldr	r3, [r3, #12]
 800a3fa:	60fb      	str	r3, [r7, #12]
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d1f1      	bne.n	800a3e6 <tcp_remove_listener+0x22>
    }
  }
}
 800a402:	bf00      	nop
 800a404:	bf00      	nop
 800a406:	3710      	adds	r7, #16
 800a408:	46bd      	mov	sp, r7
 800a40a:	bd80      	pop	{r7, pc}
 800a40c:	08014934 	.word	0x08014934
 800a410:	080149bc 	.word	0x080149bc
 800a414:	08014978 	.word	0x08014978

0800a418 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b084      	sub	sp, #16
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d106      	bne.n	800a434 <tcp_listen_closed+0x1c>
 800a426:	4b14      	ldr	r3, [pc, #80]	@ (800a478 <tcp_listen_closed+0x60>)
 800a428:	f240 1211 	movw	r2, #273	@ 0x111
 800a42c:	4913      	ldr	r1, [pc, #76]	@ (800a47c <tcp_listen_closed+0x64>)
 800a42e:	4814      	ldr	r0, [pc, #80]	@ (800a480 <tcp_listen_closed+0x68>)
 800a430:	f008 fc28 	bl	8012c84 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	7d1b      	ldrb	r3, [r3, #20]
 800a438:	2b01      	cmp	r3, #1
 800a43a:	d006      	beq.n	800a44a <tcp_listen_closed+0x32>
 800a43c:	4b0e      	ldr	r3, [pc, #56]	@ (800a478 <tcp_listen_closed+0x60>)
 800a43e:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800a442:	4910      	ldr	r1, [pc, #64]	@ (800a484 <tcp_listen_closed+0x6c>)
 800a444:	480e      	ldr	r0, [pc, #56]	@ (800a480 <tcp_listen_closed+0x68>)
 800a446:	f008 fc1d 	bl	8012c84 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800a44a:	2301      	movs	r3, #1
 800a44c:	60fb      	str	r3, [r7, #12]
 800a44e:	e00b      	b.n	800a468 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800a450:	4a0d      	ldr	r2, [pc, #52]	@ (800a488 <tcp_listen_closed+0x70>)
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	6879      	ldr	r1, [r7, #4]
 800a45c:	4618      	mov	r0, r3
 800a45e:	f7ff ffb1 	bl	800a3c4 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	3301      	adds	r3, #1
 800a466:	60fb      	str	r3, [r7, #12]
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	2b03      	cmp	r3, #3
 800a46c:	d9f0      	bls.n	800a450 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800a46e:	bf00      	nop
 800a470:	bf00      	nop
 800a472:	3710      	adds	r7, #16
 800a474:	46bd      	mov	sp, r7
 800a476:	bd80      	pop	{r7, pc}
 800a478:	08014934 	.word	0x08014934
 800a47c:	080149e4 	.word	0x080149e4
 800a480:	08014978 	.word	0x08014978
 800a484:	080149f0 	.word	0x080149f0
 800a488:	08016914 	.word	0x08016914

0800a48c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800a48c:	b5b0      	push	{r4, r5, r7, lr}
 800a48e:	b088      	sub	sp, #32
 800a490:	af04      	add	r7, sp, #16
 800a492:	6078      	str	r0, [r7, #4]
 800a494:	460b      	mov	r3, r1
 800a496:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d106      	bne.n	800a4ac <tcp_close_shutdown+0x20>
 800a49e:	4b63      	ldr	r3, [pc, #396]	@ (800a62c <tcp_close_shutdown+0x1a0>)
 800a4a0:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800a4a4:	4962      	ldr	r1, [pc, #392]	@ (800a630 <tcp_close_shutdown+0x1a4>)
 800a4a6:	4863      	ldr	r0, [pc, #396]	@ (800a634 <tcp_close_shutdown+0x1a8>)
 800a4a8:	f008 fbec 	bl	8012c84 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800a4ac:	78fb      	ldrb	r3, [r7, #3]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d066      	beq.n	800a580 <tcp_close_shutdown+0xf4>
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	7d1b      	ldrb	r3, [r3, #20]
 800a4b6:	2b04      	cmp	r3, #4
 800a4b8:	d003      	beq.n	800a4c2 <tcp_close_shutdown+0x36>
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	7d1b      	ldrb	r3, [r3, #20]
 800a4be:	2b07      	cmp	r3, #7
 800a4c0:	d15e      	bne.n	800a580 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d104      	bne.n	800a4d4 <tcp_close_shutdown+0x48>
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a4ce:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800a4d2:	d055      	beq.n	800a580 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	8b5b      	ldrh	r3, [r3, #26]
 800a4d8:	f003 0310 	and.w	r3, r3, #16
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d106      	bne.n	800a4ee <tcp_close_shutdown+0x62>
 800a4e0:	4b52      	ldr	r3, [pc, #328]	@ (800a62c <tcp_close_shutdown+0x1a0>)
 800a4e2:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800a4e6:	4954      	ldr	r1, [pc, #336]	@ (800a638 <tcp_close_shutdown+0x1ac>)
 800a4e8:	4852      	ldr	r0, [pc, #328]	@ (800a634 <tcp_close_shutdown+0x1a8>)
 800a4ea:	f008 fbcb 	bl	8012c84 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800a4f6:	687d      	ldr	r5, [r7, #4]
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	3304      	adds	r3, #4
 800a4fc:	687a      	ldr	r2, [r7, #4]
 800a4fe:	8ad2      	ldrh	r2, [r2, #22]
 800a500:	6879      	ldr	r1, [r7, #4]
 800a502:	8b09      	ldrh	r1, [r1, #24]
 800a504:	9102      	str	r1, [sp, #8]
 800a506:	9201      	str	r2, [sp, #4]
 800a508:	9300      	str	r3, [sp, #0]
 800a50a:	462b      	mov	r3, r5
 800a50c:	4622      	mov	r2, r4
 800a50e:	4601      	mov	r1, r0
 800a510:	6878      	ldr	r0, [r7, #4]
 800a512:	f004 fe8d 	bl	800f230 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800a516:	6878      	ldr	r0, [r7, #4]
 800a518:	f001 f8c8 	bl	800b6ac <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800a51c:	4b47      	ldr	r3, [pc, #284]	@ (800a63c <tcp_close_shutdown+0x1b0>)
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	687a      	ldr	r2, [r7, #4]
 800a522:	429a      	cmp	r2, r3
 800a524:	d105      	bne.n	800a532 <tcp_close_shutdown+0xa6>
 800a526:	4b45      	ldr	r3, [pc, #276]	@ (800a63c <tcp_close_shutdown+0x1b0>)
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	68db      	ldr	r3, [r3, #12]
 800a52c:	4a43      	ldr	r2, [pc, #268]	@ (800a63c <tcp_close_shutdown+0x1b0>)
 800a52e:	6013      	str	r3, [r2, #0]
 800a530:	e013      	b.n	800a55a <tcp_close_shutdown+0xce>
 800a532:	4b42      	ldr	r3, [pc, #264]	@ (800a63c <tcp_close_shutdown+0x1b0>)
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	60fb      	str	r3, [r7, #12]
 800a538:	e00c      	b.n	800a554 <tcp_close_shutdown+0xc8>
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	68db      	ldr	r3, [r3, #12]
 800a53e:	687a      	ldr	r2, [r7, #4]
 800a540:	429a      	cmp	r2, r3
 800a542:	d104      	bne.n	800a54e <tcp_close_shutdown+0xc2>
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	68da      	ldr	r2, [r3, #12]
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	60da      	str	r2, [r3, #12]
 800a54c:	e005      	b.n	800a55a <tcp_close_shutdown+0xce>
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	68db      	ldr	r3, [r3, #12]
 800a552:	60fb      	str	r3, [r7, #12]
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	2b00      	cmp	r3, #0
 800a558:	d1ef      	bne.n	800a53a <tcp_close_shutdown+0xae>
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	2200      	movs	r2, #0
 800a55e:	60da      	str	r2, [r3, #12]
 800a560:	4b37      	ldr	r3, [pc, #220]	@ (800a640 <tcp_close_shutdown+0x1b4>)
 800a562:	2201      	movs	r2, #1
 800a564:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800a566:	4b37      	ldr	r3, [pc, #220]	@ (800a644 <tcp_close_shutdown+0x1b8>)
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	687a      	ldr	r2, [r7, #4]
 800a56c:	429a      	cmp	r2, r3
 800a56e:	d102      	bne.n	800a576 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800a570:	f003 fd5c 	bl	800e02c <tcp_trigger_input_pcb_close>
 800a574:	e002      	b.n	800a57c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800a576:	6878      	ldr	r0, [r7, #4]
 800a578:	f7ff fed6 	bl	800a328 <tcp_free>
      }
      return ERR_OK;
 800a57c:	2300      	movs	r3, #0
 800a57e:	e050      	b.n	800a622 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	7d1b      	ldrb	r3, [r3, #20]
 800a584:	2b02      	cmp	r3, #2
 800a586:	d03b      	beq.n	800a600 <tcp_close_shutdown+0x174>
 800a588:	2b02      	cmp	r3, #2
 800a58a:	dc44      	bgt.n	800a616 <tcp_close_shutdown+0x18a>
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d002      	beq.n	800a596 <tcp_close_shutdown+0x10a>
 800a590:	2b01      	cmp	r3, #1
 800a592:	d02a      	beq.n	800a5ea <tcp_close_shutdown+0x15e>
 800a594:	e03f      	b.n	800a616 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	8adb      	ldrh	r3, [r3, #22]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d021      	beq.n	800a5e2 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800a59e:	4b2a      	ldr	r3, [pc, #168]	@ (800a648 <tcp_close_shutdown+0x1bc>)
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	687a      	ldr	r2, [r7, #4]
 800a5a4:	429a      	cmp	r2, r3
 800a5a6:	d105      	bne.n	800a5b4 <tcp_close_shutdown+0x128>
 800a5a8:	4b27      	ldr	r3, [pc, #156]	@ (800a648 <tcp_close_shutdown+0x1bc>)
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	68db      	ldr	r3, [r3, #12]
 800a5ae:	4a26      	ldr	r2, [pc, #152]	@ (800a648 <tcp_close_shutdown+0x1bc>)
 800a5b0:	6013      	str	r3, [r2, #0]
 800a5b2:	e013      	b.n	800a5dc <tcp_close_shutdown+0x150>
 800a5b4:	4b24      	ldr	r3, [pc, #144]	@ (800a648 <tcp_close_shutdown+0x1bc>)
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	60bb      	str	r3, [r7, #8]
 800a5ba:	e00c      	b.n	800a5d6 <tcp_close_shutdown+0x14a>
 800a5bc:	68bb      	ldr	r3, [r7, #8]
 800a5be:	68db      	ldr	r3, [r3, #12]
 800a5c0:	687a      	ldr	r2, [r7, #4]
 800a5c2:	429a      	cmp	r2, r3
 800a5c4:	d104      	bne.n	800a5d0 <tcp_close_shutdown+0x144>
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	68da      	ldr	r2, [r3, #12]
 800a5ca:	68bb      	ldr	r3, [r7, #8]
 800a5cc:	60da      	str	r2, [r3, #12]
 800a5ce:	e005      	b.n	800a5dc <tcp_close_shutdown+0x150>
 800a5d0:	68bb      	ldr	r3, [r7, #8]
 800a5d2:	68db      	ldr	r3, [r3, #12]
 800a5d4:	60bb      	str	r3, [r7, #8]
 800a5d6:	68bb      	ldr	r3, [r7, #8]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d1ef      	bne.n	800a5bc <tcp_close_shutdown+0x130>
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	2200      	movs	r2, #0
 800a5e0:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800a5e2:	6878      	ldr	r0, [r7, #4]
 800a5e4:	f7ff fea0 	bl	800a328 <tcp_free>
      break;
 800a5e8:	e01a      	b.n	800a620 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800a5ea:	6878      	ldr	r0, [r7, #4]
 800a5ec:	f7ff ff14 	bl	800a418 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800a5f0:	6879      	ldr	r1, [r7, #4]
 800a5f2:	4816      	ldr	r0, [pc, #88]	@ (800a64c <tcp_close_shutdown+0x1c0>)
 800a5f4:	f001 f8aa 	bl	800b74c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800a5f8:	6878      	ldr	r0, [r7, #4]
 800a5fa:	f7ff feb1 	bl	800a360 <tcp_free_listen>
      break;
 800a5fe:	e00f      	b.n	800a620 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800a600:	6879      	ldr	r1, [r7, #4]
 800a602:	480e      	ldr	r0, [pc, #56]	@ (800a63c <tcp_close_shutdown+0x1b0>)
 800a604:	f001 f8a2 	bl	800b74c <tcp_pcb_remove>
 800a608:	4b0d      	ldr	r3, [pc, #52]	@ (800a640 <tcp_close_shutdown+0x1b4>)
 800a60a:	2201      	movs	r2, #1
 800a60c:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800a60e:	6878      	ldr	r0, [r7, #4]
 800a610:	f7ff fe8a 	bl	800a328 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800a614:	e004      	b.n	800a620 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800a616:	6878      	ldr	r0, [r7, #4]
 800a618:	f000 f81a 	bl	800a650 <tcp_close_shutdown_fin>
 800a61c:	4603      	mov	r3, r0
 800a61e:	e000      	b.n	800a622 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800a620:	2300      	movs	r3, #0
}
 800a622:	4618      	mov	r0, r3
 800a624:	3710      	adds	r7, #16
 800a626:	46bd      	mov	sp, r7
 800a628:	bdb0      	pop	{r4, r5, r7, pc}
 800a62a:	bf00      	nop
 800a62c:	08014934 	.word	0x08014934
 800a630:	08014a08 	.word	0x08014a08
 800a634:	08014978 	.word	0x08014978
 800a638:	08014a28 	.word	0x08014a28
 800a63c:	20008918 	.word	0x20008918
 800a640:	20008920 	.word	0x20008920
 800a644:	20008958 	.word	0x20008958
 800a648:	20008910 	.word	0x20008910
 800a64c:	20008914 	.word	0x20008914

0800a650 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b084      	sub	sp, #16
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d106      	bne.n	800a66c <tcp_close_shutdown_fin+0x1c>
 800a65e:	4b2e      	ldr	r3, [pc, #184]	@ (800a718 <tcp_close_shutdown_fin+0xc8>)
 800a660:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800a664:	492d      	ldr	r1, [pc, #180]	@ (800a71c <tcp_close_shutdown_fin+0xcc>)
 800a666:	482e      	ldr	r0, [pc, #184]	@ (800a720 <tcp_close_shutdown_fin+0xd0>)
 800a668:	f008 fb0c 	bl	8012c84 <iprintf>

  switch (pcb->state) {
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	7d1b      	ldrb	r3, [r3, #20]
 800a670:	2b07      	cmp	r3, #7
 800a672:	d020      	beq.n	800a6b6 <tcp_close_shutdown_fin+0x66>
 800a674:	2b07      	cmp	r3, #7
 800a676:	dc2b      	bgt.n	800a6d0 <tcp_close_shutdown_fin+0x80>
 800a678:	2b03      	cmp	r3, #3
 800a67a:	d002      	beq.n	800a682 <tcp_close_shutdown_fin+0x32>
 800a67c:	2b04      	cmp	r3, #4
 800a67e:	d00d      	beq.n	800a69c <tcp_close_shutdown_fin+0x4c>
 800a680:	e026      	b.n	800a6d0 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800a682:	6878      	ldr	r0, [r7, #4]
 800a684:	f003 fee2 	bl	800e44c <tcp_send_fin>
 800a688:	4603      	mov	r3, r0
 800a68a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800a68c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d11f      	bne.n	800a6d4 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	2205      	movs	r2, #5
 800a698:	751a      	strb	r2, [r3, #20]
      }
      break;
 800a69a:	e01b      	b.n	800a6d4 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800a69c:	6878      	ldr	r0, [r7, #4]
 800a69e:	f003 fed5 	bl	800e44c <tcp_send_fin>
 800a6a2:	4603      	mov	r3, r0
 800a6a4:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800a6a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d114      	bne.n	800a6d8 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	2205      	movs	r2, #5
 800a6b2:	751a      	strb	r2, [r3, #20]
      }
      break;
 800a6b4:	e010      	b.n	800a6d8 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800a6b6:	6878      	ldr	r0, [r7, #4]
 800a6b8:	f003 fec8 	bl	800e44c <tcp_send_fin>
 800a6bc:	4603      	mov	r3, r0
 800a6be:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800a6c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d109      	bne.n	800a6dc <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	2209      	movs	r2, #9
 800a6cc:	751a      	strb	r2, [r3, #20]
      }
      break;
 800a6ce:	e005      	b.n	800a6dc <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	e01c      	b.n	800a70e <tcp_close_shutdown_fin+0xbe>
      break;
 800a6d4:	bf00      	nop
 800a6d6:	e002      	b.n	800a6de <tcp_close_shutdown_fin+0x8e>
      break;
 800a6d8:	bf00      	nop
 800a6da:	e000      	b.n	800a6de <tcp_close_shutdown_fin+0x8e>
      break;
 800a6dc:	bf00      	nop
  }

  if (err == ERR_OK) {
 800a6de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d103      	bne.n	800a6ee <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800a6e6:	6878      	ldr	r0, [r7, #4]
 800a6e8:	f003 ffee 	bl	800e6c8 <tcp_output>
 800a6ec:	e00d      	b.n	800a70a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800a6ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a6f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6f6:	d108      	bne.n	800a70a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	8b5b      	ldrh	r3, [r3, #26]
 800a6fc:	f043 0308 	orr.w	r3, r3, #8
 800a700:	b29a      	uxth	r2, r3
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800a706:	2300      	movs	r3, #0
 800a708:	e001      	b.n	800a70e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800a70a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a70e:	4618      	mov	r0, r3
 800a710:	3710      	adds	r7, #16
 800a712:	46bd      	mov	sp, r7
 800a714:	bd80      	pop	{r7, pc}
 800a716:	bf00      	nop
 800a718:	08014934 	.word	0x08014934
 800a71c:	080149e4 	.word	0x080149e4
 800a720:	08014978 	.word	0x08014978

0800a724 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b082      	sub	sp, #8
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d109      	bne.n	800a746 <tcp_close+0x22>
 800a732:	4b0f      	ldr	r3, [pc, #60]	@ (800a770 <tcp_close+0x4c>)
 800a734:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800a738:	490e      	ldr	r1, [pc, #56]	@ (800a774 <tcp_close+0x50>)
 800a73a:	480f      	ldr	r0, [pc, #60]	@ (800a778 <tcp_close+0x54>)
 800a73c:	f008 faa2 	bl	8012c84 <iprintf>
 800a740:	f06f 030f 	mvn.w	r3, #15
 800a744:	e00f      	b.n	800a766 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	7d1b      	ldrb	r3, [r3, #20]
 800a74a:	2b01      	cmp	r3, #1
 800a74c:	d006      	beq.n	800a75c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	8b5b      	ldrh	r3, [r3, #26]
 800a752:	f043 0310 	orr.w	r3, r3, #16
 800a756:	b29a      	uxth	r2, r3
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800a75c:	2101      	movs	r1, #1
 800a75e:	6878      	ldr	r0, [r7, #4]
 800a760:	f7ff fe94 	bl	800a48c <tcp_close_shutdown>
 800a764:	4603      	mov	r3, r0
}
 800a766:	4618      	mov	r0, r3
 800a768:	3708      	adds	r7, #8
 800a76a:	46bd      	mov	sp, r7
 800a76c:	bd80      	pop	{r7, pc}
 800a76e:	bf00      	nop
 800a770:	08014934 	.word	0x08014934
 800a774:	08014a44 	.word	0x08014a44
 800a778:	08014978 	.word	0x08014978

0800a77c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b08e      	sub	sp, #56	@ 0x38
 800a780:	af04      	add	r7, sp, #16
 800a782:	6078      	str	r0, [r7, #4]
 800a784:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d107      	bne.n	800a79c <tcp_abandon+0x20>
 800a78c:	4b52      	ldr	r3, [pc, #328]	@ (800a8d8 <tcp_abandon+0x15c>)
 800a78e:	f240 223d 	movw	r2, #573	@ 0x23d
 800a792:	4952      	ldr	r1, [pc, #328]	@ (800a8dc <tcp_abandon+0x160>)
 800a794:	4852      	ldr	r0, [pc, #328]	@ (800a8e0 <tcp_abandon+0x164>)
 800a796:	f008 fa75 	bl	8012c84 <iprintf>
 800a79a:	e099      	b.n	800a8d0 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	7d1b      	ldrb	r3, [r3, #20]
 800a7a0:	2b01      	cmp	r3, #1
 800a7a2:	d106      	bne.n	800a7b2 <tcp_abandon+0x36>
 800a7a4:	4b4c      	ldr	r3, [pc, #304]	@ (800a8d8 <tcp_abandon+0x15c>)
 800a7a6:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800a7aa:	494e      	ldr	r1, [pc, #312]	@ (800a8e4 <tcp_abandon+0x168>)
 800a7ac:	484c      	ldr	r0, [pc, #304]	@ (800a8e0 <tcp_abandon+0x164>)
 800a7ae:	f008 fa69 	bl	8012c84 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	7d1b      	ldrb	r3, [r3, #20]
 800a7b6:	2b0a      	cmp	r3, #10
 800a7b8:	d107      	bne.n	800a7ca <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800a7ba:	6879      	ldr	r1, [r7, #4]
 800a7bc:	484a      	ldr	r0, [pc, #296]	@ (800a8e8 <tcp_abandon+0x16c>)
 800a7be:	f000 ffc5 	bl	800b74c <tcp_pcb_remove>
    tcp_free(pcb);
 800a7c2:	6878      	ldr	r0, [r7, #4]
 800a7c4:	f7ff fdb0 	bl	800a328 <tcp_free>
 800a7c8:	e082      	b.n	800a8d0 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a7d6:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7dc:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a7e4:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	691b      	ldr	r3, [r3, #16]
 800a7ea:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	7d1b      	ldrb	r3, [r3, #20]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d126      	bne.n	800a842 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	8adb      	ldrh	r3, [r3, #22]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d02e      	beq.n	800a85a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800a7fc:	4b3b      	ldr	r3, [pc, #236]	@ (800a8ec <tcp_abandon+0x170>)
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	687a      	ldr	r2, [r7, #4]
 800a802:	429a      	cmp	r2, r3
 800a804:	d105      	bne.n	800a812 <tcp_abandon+0x96>
 800a806:	4b39      	ldr	r3, [pc, #228]	@ (800a8ec <tcp_abandon+0x170>)
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	68db      	ldr	r3, [r3, #12]
 800a80c:	4a37      	ldr	r2, [pc, #220]	@ (800a8ec <tcp_abandon+0x170>)
 800a80e:	6013      	str	r3, [r2, #0]
 800a810:	e013      	b.n	800a83a <tcp_abandon+0xbe>
 800a812:	4b36      	ldr	r3, [pc, #216]	@ (800a8ec <tcp_abandon+0x170>)
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	61fb      	str	r3, [r7, #28]
 800a818:	e00c      	b.n	800a834 <tcp_abandon+0xb8>
 800a81a:	69fb      	ldr	r3, [r7, #28]
 800a81c:	68db      	ldr	r3, [r3, #12]
 800a81e:	687a      	ldr	r2, [r7, #4]
 800a820:	429a      	cmp	r2, r3
 800a822:	d104      	bne.n	800a82e <tcp_abandon+0xb2>
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	68da      	ldr	r2, [r3, #12]
 800a828:	69fb      	ldr	r3, [r7, #28]
 800a82a:	60da      	str	r2, [r3, #12]
 800a82c:	e005      	b.n	800a83a <tcp_abandon+0xbe>
 800a82e:	69fb      	ldr	r3, [r7, #28]
 800a830:	68db      	ldr	r3, [r3, #12]
 800a832:	61fb      	str	r3, [r7, #28]
 800a834:	69fb      	ldr	r3, [r7, #28]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d1ef      	bne.n	800a81a <tcp_abandon+0x9e>
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	2200      	movs	r2, #0
 800a83e:	60da      	str	r2, [r3, #12]
 800a840:	e00b      	b.n	800a85a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800a842:	683b      	ldr	r3, [r7, #0]
 800a844:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	8adb      	ldrh	r3, [r3, #22]
 800a84a:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800a84c:	6879      	ldr	r1, [r7, #4]
 800a84e:	4828      	ldr	r0, [pc, #160]	@ (800a8f0 <tcp_abandon+0x174>)
 800a850:	f000 ff7c 	bl	800b74c <tcp_pcb_remove>
 800a854:	4b27      	ldr	r3, [pc, #156]	@ (800a8f4 <tcp_abandon+0x178>)
 800a856:	2201      	movs	r2, #1
 800a858:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d004      	beq.n	800a86c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a866:	4618      	mov	r0, r3
 800a868:	f000 fd1e 	bl	800b2a8 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a870:	2b00      	cmp	r3, #0
 800a872:	d004      	beq.n	800a87e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a878:	4618      	mov	r0, r3
 800a87a:	f000 fd15 	bl	800b2a8 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a882:	2b00      	cmp	r3, #0
 800a884:	d004      	beq.n	800a890 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a88a:	4618      	mov	r0, r3
 800a88c:	f000 fd0c 	bl	800b2a8 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800a890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a892:	2b00      	cmp	r3, #0
 800a894:	d00e      	beq.n	800a8b4 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800a896:	6879      	ldr	r1, [r7, #4]
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	3304      	adds	r3, #4
 800a89c:	687a      	ldr	r2, [r7, #4]
 800a89e:	8b12      	ldrh	r2, [r2, #24]
 800a8a0:	9202      	str	r2, [sp, #8]
 800a8a2:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800a8a4:	9201      	str	r2, [sp, #4]
 800a8a6:	9300      	str	r3, [sp, #0]
 800a8a8:	460b      	mov	r3, r1
 800a8aa:	697a      	ldr	r2, [r7, #20]
 800a8ac:	69b9      	ldr	r1, [r7, #24]
 800a8ae:	6878      	ldr	r0, [r7, #4]
 800a8b0:	f004 fcbe 	bl	800f230 <tcp_rst>
    }
    last_state = pcb->state;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	7d1b      	ldrb	r3, [r3, #20]
 800a8b8:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800a8ba:	6878      	ldr	r0, [r7, #4]
 800a8bc:	f7ff fd34 	bl	800a328 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800a8c0:	693b      	ldr	r3, [r7, #16]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d004      	beq.n	800a8d0 <tcp_abandon+0x154>
 800a8c6:	693b      	ldr	r3, [r7, #16]
 800a8c8:	f06f 010c 	mvn.w	r1, #12
 800a8cc:	68f8      	ldr	r0, [r7, #12]
 800a8ce:	4798      	blx	r3
  }
}
 800a8d0:	3728      	adds	r7, #40	@ 0x28
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	bd80      	pop	{r7, pc}
 800a8d6:	bf00      	nop
 800a8d8:	08014934 	.word	0x08014934
 800a8dc:	08014a78 	.word	0x08014a78
 800a8e0:	08014978 	.word	0x08014978
 800a8e4:	08014a94 	.word	0x08014a94
 800a8e8:	2000891c 	.word	0x2000891c
 800a8ec:	20008910 	.word	0x20008910
 800a8f0:	20008918 	.word	0x20008918
 800a8f4:	20008920 	.word	0x20008920

0800a8f8 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	b082      	sub	sp, #8
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800a900:	2101      	movs	r1, #1
 800a902:	6878      	ldr	r0, [r7, #4]
 800a904:	f7ff ff3a 	bl	800a77c <tcp_abandon>
}
 800a908:	bf00      	nop
 800a90a:	3708      	adds	r7, #8
 800a90c:	46bd      	mov	sp, r7
 800a90e:	bd80      	pop	{r7, pc}

0800a910 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b084      	sub	sp, #16
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d106      	bne.n	800a92c <tcp_update_rcv_ann_wnd+0x1c>
 800a91e:	4b25      	ldr	r3, [pc, #148]	@ (800a9b4 <tcp_update_rcv_ann_wnd+0xa4>)
 800a920:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800a924:	4924      	ldr	r1, [pc, #144]	@ (800a9b8 <tcp_update_rcv_ann_wnd+0xa8>)
 800a926:	4825      	ldr	r0, [pc, #148]	@ (800a9bc <tcp_update_rcv_ann_wnd+0xac>)
 800a928:	f008 f9ac 	bl	8012c84 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a930:	687a      	ldr	r2, [r7, #4]
 800a932:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800a934:	4413      	add	r3, r2
 800a936:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a93c:	687a      	ldr	r2, [r7, #4]
 800a93e:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 800a940:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 800a944:	bf28      	it	cs
 800a946:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 800a94a:	b292      	uxth	r2, r2
 800a94c:	4413      	add	r3, r2
 800a94e:	68fa      	ldr	r2, [r7, #12]
 800a950:	1ad3      	subs	r3, r2, r3
 800a952:	2b00      	cmp	r3, #0
 800a954:	db08      	blt.n	800a968 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a962:	68fa      	ldr	r2, [r7, #12]
 800a964:	1ad3      	subs	r3, r2, r3
 800a966:	e020      	b.n	800a9aa <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a970:	1ad3      	subs	r3, r2, r3
 800a972:	2b00      	cmp	r3, #0
 800a974:	dd03      	ble.n	800a97e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	2200      	movs	r2, #0
 800a97a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800a97c:	e014      	b.n	800a9a8 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a986:	1ad3      	subs	r3, r2, r3
 800a988:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800a98a:	68bb      	ldr	r3, [r7, #8]
 800a98c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a990:	d306      	bcc.n	800a9a0 <tcp_update_rcv_ann_wnd+0x90>
 800a992:	4b08      	ldr	r3, [pc, #32]	@ (800a9b4 <tcp_update_rcv_ann_wnd+0xa4>)
 800a994:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800a998:	4909      	ldr	r1, [pc, #36]	@ (800a9c0 <tcp_update_rcv_ann_wnd+0xb0>)
 800a99a:	4808      	ldr	r0, [pc, #32]	@ (800a9bc <tcp_update_rcv_ann_wnd+0xac>)
 800a99c:	f008 f972 	bl	8012c84 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800a9a0:	68bb      	ldr	r3, [r7, #8]
 800a9a2:	b29a      	uxth	r2, r3
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 800a9a8:	2300      	movs	r3, #0
  }
}
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	3710      	adds	r7, #16
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	bd80      	pop	{r7, pc}
 800a9b2:	bf00      	nop
 800a9b4:	08014934 	.word	0x08014934
 800a9b8:	08014b90 	.word	0x08014b90
 800a9bc:	08014978 	.word	0x08014978
 800a9c0:	08014bb4 	.word	0x08014bb4

0800a9c4 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800a9c4:	b580      	push	{r7, lr}
 800a9c6:	b084      	sub	sp, #16
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	6078      	str	r0, [r7, #4]
 800a9cc:	460b      	mov	r3, r1
 800a9ce:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d107      	bne.n	800a9e6 <tcp_recved+0x22>
 800a9d6:	4b1f      	ldr	r3, [pc, #124]	@ (800aa54 <tcp_recved+0x90>)
 800a9d8:	f240 32cf 	movw	r2, #975	@ 0x3cf
 800a9dc:	491e      	ldr	r1, [pc, #120]	@ (800aa58 <tcp_recved+0x94>)
 800a9de:	481f      	ldr	r0, [pc, #124]	@ (800aa5c <tcp_recved+0x98>)
 800a9e0:	f008 f950 	bl	8012c84 <iprintf>
 800a9e4:	e032      	b.n	800aa4c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	7d1b      	ldrb	r3, [r3, #20]
 800a9ea:	2b01      	cmp	r3, #1
 800a9ec:	d106      	bne.n	800a9fc <tcp_recved+0x38>
 800a9ee:	4b19      	ldr	r3, [pc, #100]	@ (800aa54 <tcp_recved+0x90>)
 800a9f0:	f240 32d2 	movw	r2, #978	@ 0x3d2
 800a9f4:	491a      	ldr	r1, [pc, #104]	@ (800aa60 <tcp_recved+0x9c>)
 800a9f6:	4819      	ldr	r0, [pc, #100]	@ (800aa5c <tcp_recved+0x98>)
 800a9f8:	f008 f944 	bl	8012c84 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800aa00:	887b      	ldrh	r3, [r7, #2]
 800aa02:	4413      	add	r3, r2
 800aa04:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800aa06:	89fb      	ldrh	r3, [r7, #14]
 800aa08:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800aa0c:	d804      	bhi.n	800aa18 <tcp_recved+0x54>
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aa12:	89fa      	ldrh	r2, [r7, #14]
 800aa14:	429a      	cmp	r2, r3
 800aa16:	d204      	bcs.n	800aa22 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800aa1e:	851a      	strh	r2, [r3, #40]	@ 0x28
 800aa20:	e002      	b.n	800aa28 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	89fa      	ldrh	r2, [r7, #14]
 800aa26:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800aa28:	6878      	ldr	r0, [r7, #4]
 800aa2a:	f7ff ff71 	bl	800a910 <tcp_update_rcv_ann_wnd>
 800aa2e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800aa30:	68bb      	ldr	r3, [r7, #8]
 800aa32:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800aa36:	d309      	bcc.n	800aa4c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	8b5b      	ldrh	r3, [r3, #26]
 800aa3c:	f043 0302 	orr.w	r3, r3, #2
 800aa40:	b29a      	uxth	r2, r3
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800aa46:	6878      	ldr	r0, [r7, #4]
 800aa48:	f003 fe3e 	bl	800e6c8 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800aa4c:	3710      	adds	r7, #16
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	bd80      	pop	{r7, pc}
 800aa52:	bf00      	nop
 800aa54:	08014934 	.word	0x08014934
 800aa58:	08014bd0 	.word	0x08014bd0
 800aa5c:	08014978 	.word	0x08014978
 800aa60:	08014be8 	.word	0x08014be8

0800aa64 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800aa64:	b5b0      	push	{r4, r5, r7, lr}
 800aa66:	b090      	sub	sp, #64	@ 0x40
 800aa68:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 800aa70:	4b95      	ldr	r3, [pc, #596]	@ (800acc8 <tcp_slowtmr+0x264>)
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	3301      	adds	r3, #1
 800aa76:	4a94      	ldr	r2, [pc, #592]	@ (800acc8 <tcp_slowtmr+0x264>)
 800aa78:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800aa7a:	4b94      	ldr	r3, [pc, #592]	@ (800accc <tcp_slowtmr+0x268>)
 800aa7c:	781b      	ldrb	r3, [r3, #0]
 800aa7e:	3301      	adds	r3, #1
 800aa80:	b2da      	uxtb	r2, r3
 800aa82:	4b92      	ldr	r3, [pc, #584]	@ (800accc <tcp_slowtmr+0x268>)
 800aa84:	701a      	strb	r2, [r3, #0]
 800aa86:	e000      	b.n	800aa8a <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 800aa88:	bf00      	nop
  prev = NULL;
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 800aa8e:	4b90      	ldr	r3, [pc, #576]	@ (800acd0 <tcp_slowtmr+0x26c>)
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800aa94:	e29f      	b.n	800afd6 <tcp_slowtmr+0x572>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800aa96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa98:	7d1b      	ldrb	r3, [r3, #20]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d106      	bne.n	800aaac <tcp_slowtmr+0x48>
 800aa9e:	4b8d      	ldr	r3, [pc, #564]	@ (800acd4 <tcp_slowtmr+0x270>)
 800aaa0:	f240 42be 	movw	r2, #1214	@ 0x4be
 800aaa4:	498c      	ldr	r1, [pc, #560]	@ (800acd8 <tcp_slowtmr+0x274>)
 800aaa6:	488d      	ldr	r0, [pc, #564]	@ (800acdc <tcp_slowtmr+0x278>)
 800aaa8:	f008 f8ec 	bl	8012c84 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800aaac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aaae:	7d1b      	ldrb	r3, [r3, #20]
 800aab0:	2b01      	cmp	r3, #1
 800aab2:	d106      	bne.n	800aac2 <tcp_slowtmr+0x5e>
 800aab4:	4b87      	ldr	r3, [pc, #540]	@ (800acd4 <tcp_slowtmr+0x270>)
 800aab6:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 800aaba:	4989      	ldr	r1, [pc, #548]	@ (800ace0 <tcp_slowtmr+0x27c>)
 800aabc:	4887      	ldr	r0, [pc, #540]	@ (800acdc <tcp_slowtmr+0x278>)
 800aabe:	f008 f8e1 	bl	8012c84 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800aac2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aac4:	7d1b      	ldrb	r3, [r3, #20]
 800aac6:	2b0a      	cmp	r3, #10
 800aac8:	d106      	bne.n	800aad8 <tcp_slowtmr+0x74>
 800aaca:	4b82      	ldr	r3, [pc, #520]	@ (800acd4 <tcp_slowtmr+0x270>)
 800aacc:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 800aad0:	4984      	ldr	r1, [pc, #528]	@ (800ace4 <tcp_slowtmr+0x280>)
 800aad2:	4882      	ldr	r0, [pc, #520]	@ (800acdc <tcp_slowtmr+0x278>)
 800aad4:	f008 f8d6 	bl	8012c84 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800aad8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aada:	7f9a      	ldrb	r2, [r3, #30]
 800aadc:	4b7b      	ldr	r3, [pc, #492]	@ (800accc <tcp_slowtmr+0x268>)
 800aade:	781b      	ldrb	r3, [r3, #0]
 800aae0:	429a      	cmp	r2, r3
 800aae2:	d105      	bne.n	800aaf0 <tcp_slowtmr+0x8c>
      prev = pcb;
 800aae4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aae6:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800aae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aaea:	68db      	ldr	r3, [r3, #12]
 800aaec:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 800aaee:	e272      	b.n	800afd6 <tcp_slowtmr+0x572>
    pcb->last_timer = tcp_timer_ctr;
 800aaf0:	4b76      	ldr	r3, [pc, #472]	@ (800accc <tcp_slowtmr+0x268>)
 800aaf2:	781a      	ldrb	r2, [r3, #0]
 800aaf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aaf6:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 800aaf8:	2300      	movs	r3, #0
 800aafa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 800aafe:	2300      	movs	r3, #0
 800ab00:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800ab04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab06:	7d1b      	ldrb	r3, [r3, #20]
 800ab08:	2b02      	cmp	r3, #2
 800ab0a:	d10a      	bne.n	800ab22 <tcp_slowtmr+0xbe>
 800ab0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab0e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ab12:	2b05      	cmp	r3, #5
 800ab14:	d905      	bls.n	800ab22 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800ab16:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ab1a:	3301      	adds	r3, #1
 800ab1c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ab20:	e11e      	b.n	800ad60 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800ab22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab24:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ab28:	2b0b      	cmp	r3, #11
 800ab2a:	d905      	bls.n	800ab38 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 800ab2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ab30:	3301      	adds	r3, #1
 800ab32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ab36:	e113      	b.n	800ad60 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 800ab38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab3a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d075      	beq.n	800ac2e <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800ab42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d006      	beq.n	800ab58 <tcp_slowtmr+0xf4>
 800ab4a:	4b62      	ldr	r3, [pc, #392]	@ (800acd4 <tcp_slowtmr+0x270>)
 800ab4c:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 800ab50:	4965      	ldr	r1, [pc, #404]	@ (800ace8 <tcp_slowtmr+0x284>)
 800ab52:	4862      	ldr	r0, [pc, #392]	@ (800acdc <tcp_slowtmr+0x278>)
 800ab54:	f008 f896 	bl	8012c84 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800ab58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d106      	bne.n	800ab6e <tcp_slowtmr+0x10a>
 800ab60:	4b5c      	ldr	r3, [pc, #368]	@ (800acd4 <tcp_slowtmr+0x270>)
 800ab62:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 800ab66:	4961      	ldr	r1, [pc, #388]	@ (800acec <tcp_slowtmr+0x288>)
 800ab68:	485c      	ldr	r0, [pc, #368]	@ (800acdc <tcp_slowtmr+0x278>)
 800ab6a:	f008 f88b 	bl	8012c84 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800ab6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab70:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800ab74:	2b0b      	cmp	r3, #11
 800ab76:	d905      	bls.n	800ab84 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 800ab78:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ab7c:	3301      	adds	r3, #1
 800ab7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ab82:	e0ed      	b.n	800ad60 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800ab84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab86:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800ab8a:	3b01      	subs	r3, #1
 800ab8c:	4a58      	ldr	r2, [pc, #352]	@ (800acf0 <tcp_slowtmr+0x28c>)
 800ab8e:	5cd3      	ldrb	r3, [r2, r3]
 800ab90:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800ab92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab94:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800ab98:	7c7a      	ldrb	r2, [r7, #17]
 800ab9a:	429a      	cmp	r2, r3
 800ab9c:	d907      	bls.n	800abae <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 800ab9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aba0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800aba4:	3301      	adds	r3, #1
 800aba6:	b2da      	uxtb	r2, r3
 800aba8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abaa:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 800abae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abb0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800abb4:	7c7a      	ldrb	r2, [r7, #17]
 800abb6:	429a      	cmp	r2, r3
 800abb8:	f200 80d2 	bhi.w	800ad60 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 800abbc:	2301      	movs	r3, #1
 800abbe:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 800abc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abc2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d108      	bne.n	800abdc <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800abca:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800abcc:	f004 fc24 	bl	800f418 <tcp_zero_window_probe>
 800abd0:	4603      	mov	r3, r0
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d014      	beq.n	800ac00 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 800abd6:	2300      	movs	r3, #0
 800abd8:	623b      	str	r3, [r7, #32]
 800abda:	e011      	b.n	800ac00 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800abdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abde:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800abe2:	4619      	mov	r1, r3
 800abe4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800abe6:	f003 fae9 	bl	800e1bc <tcp_split_unsent_seg>
 800abea:	4603      	mov	r3, r0
 800abec:	2b00      	cmp	r3, #0
 800abee:	d107      	bne.n	800ac00 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 800abf0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800abf2:	f003 fd69 	bl	800e6c8 <tcp_output>
 800abf6:	4603      	mov	r3, r0
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d101      	bne.n	800ac00 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 800abfc:	2300      	movs	r3, #0
 800abfe:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 800ac00:	6a3b      	ldr	r3, [r7, #32]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	f000 80ac 	beq.w	800ad60 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 800ac08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800ac10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac12:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800ac16:	2b06      	cmp	r3, #6
 800ac18:	f200 80a2 	bhi.w	800ad60 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 800ac1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac1e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800ac22:	3301      	adds	r3, #1
 800ac24:	b2da      	uxtb	r2, r3
 800ac26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac28:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 800ac2c:	e098      	b.n	800ad60 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800ac2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac30:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	db0f      	blt.n	800ac58 <tcp_slowtmr+0x1f4>
 800ac38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac3a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800ac3e:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800ac42:	4293      	cmp	r3, r2
 800ac44:	d008      	beq.n	800ac58 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 800ac46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac48:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800ac4c:	b29b      	uxth	r3, r3
 800ac4e:	3301      	adds	r3, #1
 800ac50:	b29b      	uxth	r3, r3
 800ac52:	b21a      	sxth	r2, r3
 800ac54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac56:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 800ac58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac5a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800ac5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac60:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800ac64:	429a      	cmp	r2, r3
 800ac66:	db7b      	blt.n	800ad60 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800ac68:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ac6a:	f004 f821 	bl	800ecb0 <tcp_rexmit_rto_prepare>
 800ac6e:	4603      	mov	r3, r0
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d007      	beq.n	800ac84 <tcp_slowtmr+0x220>
 800ac74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d171      	bne.n	800ad60 <tcp_slowtmr+0x2fc>
 800ac7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d06d      	beq.n	800ad60 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 800ac84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac86:	7d1b      	ldrb	r3, [r3, #20]
 800ac88:	2b02      	cmp	r3, #2
 800ac8a:	d03a      	beq.n	800ad02 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800ac8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac8e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ac92:	2b0c      	cmp	r3, #12
 800ac94:	bf28      	it	cs
 800ac96:	230c      	movcs	r3, #12
 800ac98:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800ac9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac9c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800aca0:	10db      	asrs	r3, r3, #3
 800aca2:	b21b      	sxth	r3, r3
 800aca4:	461a      	mov	r2, r3
 800aca6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aca8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800acac:	4413      	add	r3, r2
 800acae:	7efa      	ldrb	r2, [r7, #27]
 800acb0:	4910      	ldr	r1, [pc, #64]	@ (800acf4 <tcp_slowtmr+0x290>)
 800acb2:	5c8a      	ldrb	r2, [r1, r2]
 800acb4:	4093      	lsls	r3, r2
 800acb6:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800acb8:	697b      	ldr	r3, [r7, #20]
 800acba:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800acbe:	4293      	cmp	r3, r2
 800acc0:	dc1a      	bgt.n	800acf8 <tcp_slowtmr+0x294>
 800acc2:	697b      	ldr	r3, [r7, #20]
 800acc4:	b21a      	sxth	r2, r3
 800acc6:	e019      	b.n	800acfc <tcp_slowtmr+0x298>
 800acc8:	2000890c 	.word	0x2000890c
 800accc:	20008922 	.word	0x20008922
 800acd0:	20008918 	.word	0x20008918
 800acd4:	08014934 	.word	0x08014934
 800acd8:	08014c78 	.word	0x08014c78
 800acdc:	08014978 	.word	0x08014978
 800ace0:	08014ca4 	.word	0x08014ca4
 800ace4:	08014cd0 	.word	0x08014cd0
 800ace8:	08014d00 	.word	0x08014d00
 800acec:	08014d34 	.word	0x08014d34
 800acf0:	0801690c 	.word	0x0801690c
 800acf4:	080168fc 	.word	0x080168fc
 800acf8:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800acfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acfe:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 800ad02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad04:	2200      	movs	r2, #0
 800ad06:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800ad08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad0a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800ad0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad10:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800ad14:	4293      	cmp	r3, r2
 800ad16:	bf28      	it	cs
 800ad18:	4613      	movcs	r3, r2
 800ad1a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800ad1c:	8a7b      	ldrh	r3, [r7, #18]
 800ad1e:	085b      	lsrs	r3, r3, #1
 800ad20:	b29a      	uxth	r2, r3
 800ad22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad24:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800ad28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad2a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800ad2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad30:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ad32:	005b      	lsls	r3, r3, #1
 800ad34:	b29b      	uxth	r3, r3
 800ad36:	429a      	cmp	r2, r3
 800ad38:	d206      	bcs.n	800ad48 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800ad3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad3c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ad3e:	005b      	lsls	r3, r3, #1
 800ad40:	b29a      	uxth	r2, r3
 800ad42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad44:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 800ad48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad4a:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800ad4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad4e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 800ad52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad54:	2200      	movs	r2, #0
 800ad56:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 800ad5a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ad5c:	f004 f818 	bl	800ed90 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 800ad60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad62:	7d1b      	ldrb	r3, [r3, #20]
 800ad64:	2b06      	cmp	r3, #6
 800ad66:	d111      	bne.n	800ad8c <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 800ad68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad6a:	8b5b      	ldrh	r3, [r3, #26]
 800ad6c:	f003 0310 	and.w	r3, r3, #16
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d00b      	beq.n	800ad8c <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ad74:	4b9d      	ldr	r3, [pc, #628]	@ (800afec <tcp_slowtmr+0x588>)
 800ad76:	681a      	ldr	r2, [r3, #0]
 800ad78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad7a:	6a1b      	ldr	r3, [r3, #32]
 800ad7c:	1ad3      	subs	r3, r2, r3
 800ad7e:	2b28      	cmp	r3, #40	@ 0x28
 800ad80:	d904      	bls.n	800ad8c <tcp_slowtmr+0x328>
          ++pcb_remove;
 800ad82:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ad86:	3301      	adds	r3, #1
 800ad88:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800ad8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad8e:	7a5b      	ldrb	r3, [r3, #9]
 800ad90:	f003 0308 	and.w	r3, r3, #8
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d04c      	beq.n	800ae32 <tcp_slowtmr+0x3ce>
        ((pcb->state == ESTABLISHED) ||
 800ad98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad9a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800ad9c:	2b04      	cmp	r3, #4
 800ad9e:	d003      	beq.n	800ada8 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 800ada0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ada2:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800ada4:	2b07      	cmp	r3, #7
 800ada6:	d144      	bne.n	800ae32 <tcp_slowtmr+0x3ce>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ada8:	4b90      	ldr	r3, [pc, #576]	@ (800afec <tcp_slowtmr+0x588>)
 800adaa:	681a      	ldr	r2, [r3, #0]
 800adac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adae:	6a1b      	ldr	r3, [r3, #32]
 800adb0:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800adb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800adb8:	f503 2324 	add.w	r3, r3, #671744	@ 0xa4000
 800adbc:	f603 43b8 	addw	r3, r3, #3256	@ 0xcb8
 800adc0:	498b      	ldr	r1, [pc, #556]	@ (800aff0 <tcp_slowtmr+0x58c>)
 800adc2:	fba1 1303 	umull	r1, r3, r1, r3
 800adc6:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800adc8:	429a      	cmp	r2, r3
 800adca:	d90a      	bls.n	800ade2 <tcp_slowtmr+0x37e>
        ++pcb_remove;
 800adcc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800add0:	3301      	adds	r3, #1
 800add2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 800add6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800adda:	3301      	adds	r3, #1
 800addc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800ade0:	e027      	b.n	800ae32 <tcp_slowtmr+0x3ce>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ade2:	4b82      	ldr	r3, [pc, #520]	@ (800afec <tcp_slowtmr+0x588>)
 800ade4:	681a      	ldr	r2, [r3, #0]
 800ade6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ade8:	6a1b      	ldr	r3, [r3, #32]
 800adea:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800adec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adee:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800adf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adf4:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800adf8:	4618      	mov	r0, r3
 800adfa:	4b7e      	ldr	r3, [pc, #504]	@ (800aff4 <tcp_slowtmr+0x590>)
 800adfc:	fb00 f303 	mul.w	r3, r0, r3
 800ae00:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800ae02:	497b      	ldr	r1, [pc, #492]	@ (800aff0 <tcp_slowtmr+0x58c>)
 800ae04:	fba1 1303 	umull	r1, r3, r1, r3
 800ae08:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ae0a:	429a      	cmp	r2, r3
 800ae0c:	d911      	bls.n	800ae32 <tcp_slowtmr+0x3ce>
        err = tcp_keepalive(pcb);
 800ae0e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ae10:	f004 fac2 	bl	800f398 <tcp_keepalive>
 800ae14:	4603      	mov	r3, r0
 800ae16:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 800ae1a:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d107      	bne.n	800ae32 <tcp_slowtmr+0x3ce>
          pcb->keep_cnt_sent++;
 800ae22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae24:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800ae28:	3301      	adds	r3, #1
 800ae2a:	b2da      	uxtb	r2, r3
 800ae2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae2e:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 800ae32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d011      	beq.n	800ae5e <tcp_slowtmr+0x3fa>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800ae3a:	4b6c      	ldr	r3, [pc, #432]	@ (800afec <tcp_slowtmr+0x588>)
 800ae3c:	681a      	ldr	r2, [r3, #0]
 800ae3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae40:	6a1b      	ldr	r3, [r3, #32]
 800ae42:	1ad2      	subs	r2, r2, r3
 800ae44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae46:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800ae4a:	4619      	mov	r1, r3
 800ae4c:	460b      	mov	r3, r1
 800ae4e:	005b      	lsls	r3, r3, #1
 800ae50:	440b      	add	r3, r1
 800ae52:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800ae54:	429a      	cmp	r2, r3
 800ae56:	d302      	bcc.n	800ae5e <tcp_slowtmr+0x3fa>
      tcp_free_ooseq(pcb);
 800ae58:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ae5a:	f000 fddb 	bl	800ba14 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 800ae5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae60:	7d1b      	ldrb	r3, [r3, #20]
 800ae62:	2b03      	cmp	r3, #3
 800ae64:	d10b      	bne.n	800ae7e <tcp_slowtmr+0x41a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ae66:	4b61      	ldr	r3, [pc, #388]	@ (800afec <tcp_slowtmr+0x588>)
 800ae68:	681a      	ldr	r2, [r3, #0]
 800ae6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae6c:	6a1b      	ldr	r3, [r3, #32]
 800ae6e:	1ad3      	subs	r3, r2, r3
 800ae70:	2b28      	cmp	r3, #40	@ 0x28
 800ae72:	d904      	bls.n	800ae7e <tcp_slowtmr+0x41a>
        ++pcb_remove;
 800ae74:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ae78:	3301      	adds	r3, #1
 800ae7a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 800ae7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae80:	7d1b      	ldrb	r3, [r3, #20]
 800ae82:	2b09      	cmp	r3, #9
 800ae84:	d10b      	bne.n	800ae9e <tcp_slowtmr+0x43a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800ae86:	4b59      	ldr	r3, [pc, #356]	@ (800afec <tcp_slowtmr+0x588>)
 800ae88:	681a      	ldr	r2, [r3, #0]
 800ae8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae8c:	6a1b      	ldr	r3, [r3, #32]
 800ae8e:	1ad3      	subs	r3, r2, r3
 800ae90:	2bf0      	cmp	r3, #240	@ 0xf0
 800ae92:	d904      	bls.n	800ae9e <tcp_slowtmr+0x43a>
        ++pcb_remove;
 800ae94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ae98:	3301      	adds	r3, #1
 800ae9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 800ae9e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d060      	beq.n	800af68 <tcp_slowtmr+0x504>
      tcp_err_fn err_fn = pcb->errf;
 800aea6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aeac:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 800aeae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800aeb0:	f000 fbfc 	bl	800b6ac <tcp_pcb_purge>
      if (prev != NULL) {
 800aeb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d010      	beq.n	800aedc <tcp_slowtmr+0x478>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800aeba:	4b4f      	ldr	r3, [pc, #316]	@ (800aff8 <tcp_slowtmr+0x594>)
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aec0:	429a      	cmp	r2, r3
 800aec2:	d106      	bne.n	800aed2 <tcp_slowtmr+0x46e>
 800aec4:	4b4d      	ldr	r3, [pc, #308]	@ (800affc <tcp_slowtmr+0x598>)
 800aec6:	f240 526d 	movw	r2, #1389	@ 0x56d
 800aeca:	494d      	ldr	r1, [pc, #308]	@ (800b000 <tcp_slowtmr+0x59c>)
 800aecc:	484d      	ldr	r0, [pc, #308]	@ (800b004 <tcp_slowtmr+0x5a0>)
 800aece:	f007 fed9 	bl	8012c84 <iprintf>
        prev->next = pcb->next;
 800aed2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aed4:	68da      	ldr	r2, [r3, #12]
 800aed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aed8:	60da      	str	r2, [r3, #12]
 800aeda:	e00f      	b.n	800aefc <tcp_slowtmr+0x498>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800aedc:	4b46      	ldr	r3, [pc, #280]	@ (800aff8 <tcp_slowtmr+0x594>)
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aee2:	429a      	cmp	r2, r3
 800aee4:	d006      	beq.n	800aef4 <tcp_slowtmr+0x490>
 800aee6:	4b45      	ldr	r3, [pc, #276]	@ (800affc <tcp_slowtmr+0x598>)
 800aee8:	f240 5271 	movw	r2, #1393	@ 0x571
 800aeec:	4946      	ldr	r1, [pc, #280]	@ (800b008 <tcp_slowtmr+0x5a4>)
 800aeee:	4845      	ldr	r0, [pc, #276]	@ (800b004 <tcp_slowtmr+0x5a0>)
 800aef0:	f007 fec8 	bl	8012c84 <iprintf>
        tcp_active_pcbs = pcb->next;
 800aef4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aef6:	68db      	ldr	r3, [r3, #12]
 800aef8:	4a3f      	ldr	r2, [pc, #252]	@ (800aff8 <tcp_slowtmr+0x594>)
 800aefa:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 800aefc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800af00:	2b00      	cmp	r3, #0
 800af02:	d013      	beq.n	800af2c <tcp_slowtmr+0x4c8>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800af04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af06:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800af08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af0a:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800af0c:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800af0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af10:	3304      	adds	r3, #4
 800af12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800af14:	8ad2      	ldrh	r2, [r2, #22]
 800af16:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800af18:	8b09      	ldrh	r1, [r1, #24]
 800af1a:	9102      	str	r1, [sp, #8]
 800af1c:	9201      	str	r2, [sp, #4]
 800af1e:	9300      	str	r3, [sp, #0]
 800af20:	462b      	mov	r3, r5
 800af22:	4622      	mov	r2, r4
 800af24:	4601      	mov	r1, r0
 800af26:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800af28:	f004 f982 	bl	800f230 <tcp_rst>
      err_arg = pcb->callback_arg;
 800af2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af2e:	691b      	ldr	r3, [r3, #16]
 800af30:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800af32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af34:	7d1b      	ldrb	r3, [r3, #20]
 800af36:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800af38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af3a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800af3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af3e:	68db      	ldr	r3, [r3, #12]
 800af40:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800af42:	6838      	ldr	r0, [r7, #0]
 800af44:	f7ff f9f0 	bl	800a328 <tcp_free>
      tcp_active_pcbs_changed = 0;
 800af48:	4b30      	ldr	r3, [pc, #192]	@ (800b00c <tcp_slowtmr+0x5a8>)
 800af4a:	2200      	movs	r2, #0
 800af4c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	2b00      	cmp	r3, #0
 800af52:	d004      	beq.n	800af5e <tcp_slowtmr+0x4fa>
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	f06f 010c 	mvn.w	r1, #12
 800af5a:	68b8      	ldr	r0, [r7, #8]
 800af5c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800af5e:	4b2b      	ldr	r3, [pc, #172]	@ (800b00c <tcp_slowtmr+0x5a8>)
 800af60:	781b      	ldrb	r3, [r3, #0]
 800af62:	2b00      	cmp	r3, #0
 800af64:	d037      	beq.n	800afd6 <tcp_slowtmr+0x572>
        goto tcp_slowtmr_start;
 800af66:	e590      	b.n	800aa8a <tcp_slowtmr+0x26>
      prev = pcb;
 800af68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af6a:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800af6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af6e:	68db      	ldr	r3, [r3, #12]
 800af70:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 800af72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af74:	7f1b      	ldrb	r3, [r3, #28]
 800af76:	3301      	adds	r3, #1
 800af78:	b2da      	uxtb	r2, r3
 800af7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af7c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800af7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af80:	7f1a      	ldrb	r2, [r3, #28]
 800af82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af84:	7f5b      	ldrb	r3, [r3, #29]
 800af86:	429a      	cmp	r2, r3
 800af88:	d325      	bcc.n	800afd6 <tcp_slowtmr+0x572>
        prev->polltmr = 0;
 800af8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af8c:	2200      	movs	r2, #0
 800af8e:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 800af90:	4b1e      	ldr	r3, [pc, #120]	@ (800b00c <tcp_slowtmr+0x5a8>)
 800af92:	2200      	movs	r2, #0
 800af94:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800af96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d00b      	beq.n	800afb8 <tcp_slowtmr+0x554>
 800afa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afa2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800afa6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800afa8:	6912      	ldr	r2, [r2, #16]
 800afaa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800afac:	4610      	mov	r0, r2
 800afae:	4798      	blx	r3
 800afb0:	4603      	mov	r3, r0
 800afb2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800afb6:	e002      	b.n	800afbe <tcp_slowtmr+0x55a>
 800afb8:	2300      	movs	r3, #0
 800afba:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 800afbe:	4b13      	ldr	r3, [pc, #76]	@ (800b00c <tcp_slowtmr+0x5a8>)
 800afc0:	781b      	ldrb	r3, [r3, #0]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	f47f ad60 	bne.w	800aa88 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800afc8:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d102      	bne.n	800afd6 <tcp_slowtmr+0x572>
          tcp_output(prev);
 800afd0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800afd2:	f003 fb79 	bl	800e6c8 <tcp_output>
  while (pcb != NULL) {
 800afd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afd8:	2b00      	cmp	r3, #0
 800afda:	f47f ad5c 	bne.w	800aa96 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800afde:	2300      	movs	r3, #0
 800afe0:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 800afe2:	4b0b      	ldr	r3, [pc, #44]	@ (800b010 <tcp_slowtmr+0x5ac>)
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800afe8:	e067      	b.n	800b0ba <tcp_slowtmr+0x656>
 800afea:	bf00      	nop
 800afec:	2000890c 	.word	0x2000890c
 800aff0:	10624dd3 	.word	0x10624dd3
 800aff4:	000124f8 	.word	0x000124f8
 800aff8:	20008918 	.word	0x20008918
 800affc:	08014934 	.word	0x08014934
 800b000:	08014d6c 	.word	0x08014d6c
 800b004:	08014978 	.word	0x08014978
 800b008:	08014d98 	.word	0x08014d98
 800b00c:	20008920 	.word	0x20008920
 800b010:	2000891c 	.word	0x2000891c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800b014:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b016:	7d1b      	ldrb	r3, [r3, #20]
 800b018:	2b0a      	cmp	r3, #10
 800b01a:	d006      	beq.n	800b02a <tcp_slowtmr+0x5c6>
 800b01c:	4b2b      	ldr	r3, [pc, #172]	@ (800b0cc <tcp_slowtmr+0x668>)
 800b01e:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 800b022:	492b      	ldr	r1, [pc, #172]	@ (800b0d0 <tcp_slowtmr+0x66c>)
 800b024:	482b      	ldr	r0, [pc, #172]	@ (800b0d4 <tcp_slowtmr+0x670>)
 800b026:	f007 fe2d 	bl	8012c84 <iprintf>
    pcb_remove = 0;
 800b02a:	2300      	movs	r3, #0
 800b02c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800b030:	4b29      	ldr	r3, [pc, #164]	@ (800b0d8 <tcp_slowtmr+0x674>)
 800b032:	681a      	ldr	r2, [r3, #0]
 800b034:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b036:	6a1b      	ldr	r3, [r3, #32]
 800b038:	1ad3      	subs	r3, r2, r3
 800b03a:	2bf0      	cmp	r3, #240	@ 0xf0
 800b03c:	d904      	bls.n	800b048 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 800b03e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b042:	3301      	adds	r3, #1
 800b044:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800b048:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d02f      	beq.n	800b0b0 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800b050:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800b052:	f000 fb2b 	bl	800b6ac <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800b056:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d010      	beq.n	800b07e <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800b05c:	4b1f      	ldr	r3, [pc, #124]	@ (800b0dc <tcp_slowtmr+0x678>)
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b062:	429a      	cmp	r2, r3
 800b064:	d106      	bne.n	800b074 <tcp_slowtmr+0x610>
 800b066:	4b19      	ldr	r3, [pc, #100]	@ (800b0cc <tcp_slowtmr+0x668>)
 800b068:	f240 52af 	movw	r2, #1455	@ 0x5af
 800b06c:	491c      	ldr	r1, [pc, #112]	@ (800b0e0 <tcp_slowtmr+0x67c>)
 800b06e:	4819      	ldr	r0, [pc, #100]	@ (800b0d4 <tcp_slowtmr+0x670>)
 800b070:	f007 fe08 	bl	8012c84 <iprintf>
        prev->next = pcb->next;
 800b074:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b076:	68da      	ldr	r2, [r3, #12]
 800b078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b07a:	60da      	str	r2, [r3, #12]
 800b07c:	e00f      	b.n	800b09e <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800b07e:	4b17      	ldr	r3, [pc, #92]	@ (800b0dc <tcp_slowtmr+0x678>)
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b084:	429a      	cmp	r2, r3
 800b086:	d006      	beq.n	800b096 <tcp_slowtmr+0x632>
 800b088:	4b10      	ldr	r3, [pc, #64]	@ (800b0cc <tcp_slowtmr+0x668>)
 800b08a:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800b08e:	4915      	ldr	r1, [pc, #84]	@ (800b0e4 <tcp_slowtmr+0x680>)
 800b090:	4810      	ldr	r0, [pc, #64]	@ (800b0d4 <tcp_slowtmr+0x670>)
 800b092:	f007 fdf7 	bl	8012c84 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800b096:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b098:	68db      	ldr	r3, [r3, #12]
 800b09a:	4a10      	ldr	r2, [pc, #64]	@ (800b0dc <tcp_slowtmr+0x678>)
 800b09c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800b09e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0a0:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800b0a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0a4:	68db      	ldr	r3, [r3, #12]
 800b0a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800b0a8:	69f8      	ldr	r0, [r7, #28]
 800b0aa:	f7ff f93d 	bl	800a328 <tcp_free>
 800b0ae:	e004      	b.n	800b0ba <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 800b0b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0b2:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800b0b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0b6:	68db      	ldr	r3, [r3, #12]
 800b0b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800b0ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d1a9      	bne.n	800b014 <tcp_slowtmr+0x5b0>
    }
  }
}
 800b0c0:	bf00      	nop
 800b0c2:	bf00      	nop
 800b0c4:	3730      	adds	r7, #48	@ 0x30
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	bdb0      	pop	{r4, r5, r7, pc}
 800b0ca:	bf00      	nop
 800b0cc:	08014934 	.word	0x08014934
 800b0d0:	08014dc4 	.word	0x08014dc4
 800b0d4:	08014978 	.word	0x08014978
 800b0d8:	2000890c 	.word	0x2000890c
 800b0dc:	2000891c 	.word	0x2000891c
 800b0e0:	08014df4 	.word	0x08014df4
 800b0e4:	08014e1c 	.word	0x08014e1c

0800b0e8 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b082      	sub	sp, #8
 800b0ec:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800b0ee:	4b2d      	ldr	r3, [pc, #180]	@ (800b1a4 <tcp_fasttmr+0xbc>)
 800b0f0:	781b      	ldrb	r3, [r3, #0]
 800b0f2:	3301      	adds	r3, #1
 800b0f4:	b2da      	uxtb	r2, r3
 800b0f6:	4b2b      	ldr	r3, [pc, #172]	@ (800b1a4 <tcp_fasttmr+0xbc>)
 800b0f8:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800b0fa:	4b2b      	ldr	r3, [pc, #172]	@ (800b1a8 <tcp_fasttmr+0xc0>)
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800b100:	e048      	b.n	800b194 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	7f9a      	ldrb	r2, [r3, #30]
 800b106:	4b27      	ldr	r3, [pc, #156]	@ (800b1a4 <tcp_fasttmr+0xbc>)
 800b108:	781b      	ldrb	r3, [r3, #0]
 800b10a:	429a      	cmp	r2, r3
 800b10c:	d03f      	beq.n	800b18e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800b10e:	4b25      	ldr	r3, [pc, #148]	@ (800b1a4 <tcp_fasttmr+0xbc>)
 800b110:	781a      	ldrb	r2, [r3, #0]
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	8b5b      	ldrh	r3, [r3, #26]
 800b11a:	f003 0301 	and.w	r3, r3, #1
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d010      	beq.n	800b144 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	8b5b      	ldrh	r3, [r3, #26]
 800b126:	f043 0302 	orr.w	r3, r3, #2
 800b12a:	b29a      	uxth	r2, r3
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800b130:	6878      	ldr	r0, [r7, #4]
 800b132:	f003 fac9 	bl	800e6c8 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	8b5b      	ldrh	r3, [r3, #26]
 800b13a:	f023 0303 	bic.w	r3, r3, #3
 800b13e:	b29a      	uxth	r2, r3
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	8b5b      	ldrh	r3, [r3, #26]
 800b148:	f003 0308 	and.w	r3, r3, #8
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d009      	beq.n	800b164 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	8b5b      	ldrh	r3, [r3, #26]
 800b154:	f023 0308 	bic.w	r3, r3, #8
 800b158:	b29a      	uxth	r2, r3
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800b15e:	6878      	ldr	r0, [r7, #4]
 800b160:	f7ff fa76 	bl	800a650 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	68db      	ldr	r3, [r3, #12]
 800b168:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d00a      	beq.n	800b188 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800b172:	4b0e      	ldr	r3, [pc, #56]	@ (800b1ac <tcp_fasttmr+0xc4>)
 800b174:	2200      	movs	r2, #0
 800b176:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800b178:	6878      	ldr	r0, [r7, #4]
 800b17a:	f000 f819 	bl	800b1b0 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800b17e:	4b0b      	ldr	r3, [pc, #44]	@ (800b1ac <tcp_fasttmr+0xc4>)
 800b180:	781b      	ldrb	r3, [r3, #0]
 800b182:	2b00      	cmp	r3, #0
 800b184:	d000      	beq.n	800b188 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800b186:	e7b8      	b.n	800b0fa <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800b188:	683b      	ldr	r3, [r7, #0]
 800b18a:	607b      	str	r3, [r7, #4]
 800b18c:	e002      	b.n	800b194 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	68db      	ldr	r3, [r3, #12]
 800b192:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	2b00      	cmp	r3, #0
 800b198:	d1b3      	bne.n	800b102 <tcp_fasttmr+0x1a>
    }
  }
}
 800b19a:	bf00      	nop
 800b19c:	bf00      	nop
 800b19e:	3708      	adds	r7, #8
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	bd80      	pop	{r7, pc}
 800b1a4:	20008922 	.word	0x20008922
 800b1a8:	20008918 	.word	0x20008918
 800b1ac:	20008920 	.word	0x20008920

0800b1b0 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800b1b0:	b590      	push	{r4, r7, lr}
 800b1b2:	b085      	sub	sp, #20
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d109      	bne.n	800b1d2 <tcp_process_refused_data+0x22>
 800b1be:	4b37      	ldr	r3, [pc, #220]	@ (800b29c <tcp_process_refused_data+0xec>)
 800b1c0:	f240 6209 	movw	r2, #1545	@ 0x609
 800b1c4:	4936      	ldr	r1, [pc, #216]	@ (800b2a0 <tcp_process_refused_data+0xf0>)
 800b1c6:	4837      	ldr	r0, [pc, #220]	@ (800b2a4 <tcp_process_refused_data+0xf4>)
 800b1c8:	f007 fd5c 	bl	8012c84 <iprintf>
 800b1cc:	f06f 030f 	mvn.w	r3, #15
 800b1d0:	e060      	b.n	800b294 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b1d6:	7b5b      	ldrb	r3, [r3, #13]
 800b1d8:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b1de:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d00b      	beq.n	800b208 <tcp_process_refused_data+0x58>
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	6918      	ldr	r0, [r3, #16]
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	68ba      	ldr	r2, [r7, #8]
 800b1fe:	6879      	ldr	r1, [r7, #4]
 800b200:	47a0      	blx	r4
 800b202:	4603      	mov	r3, r0
 800b204:	73fb      	strb	r3, [r7, #15]
 800b206:	e007      	b.n	800b218 <tcp_process_refused_data+0x68>
 800b208:	2300      	movs	r3, #0
 800b20a:	68ba      	ldr	r2, [r7, #8]
 800b20c:	6879      	ldr	r1, [r7, #4]
 800b20e:	2000      	movs	r0, #0
 800b210:	f000 f8a4 	bl	800b35c <tcp_recv_null>
 800b214:	4603      	mov	r3, r0
 800b216:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800b218:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d12a      	bne.n	800b276 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800b220:	7bbb      	ldrb	r3, [r7, #14]
 800b222:	f003 0320 	and.w	r3, r3, #32
 800b226:	2b00      	cmp	r3, #0
 800b228:	d033      	beq.n	800b292 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b22e:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800b232:	d005      	beq.n	800b240 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b238:	3301      	adds	r3, #1
 800b23a:	b29a      	uxth	r2, r3
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b246:	2b00      	cmp	r3, #0
 800b248:	d00b      	beq.n	800b262 <tcp_process_refused_data+0xb2>
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	6918      	ldr	r0, [r3, #16]
 800b254:	2300      	movs	r3, #0
 800b256:	2200      	movs	r2, #0
 800b258:	6879      	ldr	r1, [r7, #4]
 800b25a:	47a0      	blx	r4
 800b25c:	4603      	mov	r3, r0
 800b25e:	73fb      	strb	r3, [r7, #15]
 800b260:	e001      	b.n	800b266 <tcp_process_refused_data+0xb6>
 800b262:	2300      	movs	r3, #0
 800b264:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800b266:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b26a:	f113 0f0d 	cmn.w	r3, #13
 800b26e:	d110      	bne.n	800b292 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800b270:	f06f 030c 	mvn.w	r3, #12
 800b274:	e00e      	b.n	800b294 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800b276:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b27a:	f113 0f0d 	cmn.w	r3, #13
 800b27e:	d102      	bne.n	800b286 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800b280:	f06f 030c 	mvn.w	r3, #12
 800b284:	e006      	b.n	800b294 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	68ba      	ldr	r2, [r7, #8]
 800b28a:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 800b28c:	f06f 0304 	mvn.w	r3, #4
 800b290:	e000      	b.n	800b294 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800b292:	2300      	movs	r3, #0
}
 800b294:	4618      	mov	r0, r3
 800b296:	3714      	adds	r7, #20
 800b298:	46bd      	mov	sp, r7
 800b29a:	bd90      	pop	{r4, r7, pc}
 800b29c:	08014934 	.word	0x08014934
 800b2a0:	08014e44 	.word	0x08014e44
 800b2a4:	08014978 	.word	0x08014978

0800b2a8 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	b084      	sub	sp, #16
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800b2b0:	e007      	b.n	800b2c2 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800b2b8:	6878      	ldr	r0, [r7, #4]
 800b2ba:	f000 f80a 	bl	800b2d2 <tcp_seg_free>
    seg = next;
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d1f4      	bne.n	800b2b2 <tcp_segs_free+0xa>
  }
}
 800b2c8:	bf00      	nop
 800b2ca:	bf00      	nop
 800b2cc:	3710      	adds	r7, #16
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	bd80      	pop	{r7, pc}

0800b2d2 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800b2d2:	b580      	push	{r7, lr}
 800b2d4:	b082      	sub	sp, #8
 800b2d6:	af00      	add	r7, sp, #0
 800b2d8:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d00c      	beq.n	800b2fa <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	685b      	ldr	r3, [r3, #4]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d004      	beq.n	800b2f2 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	685b      	ldr	r3, [r3, #4]
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	f7fe fcd9 	bl	8009ca4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800b2f2:	6879      	ldr	r1, [r7, #4]
 800b2f4:	2003      	movs	r0, #3
 800b2f6:	f7fd fe5f 	bl	8008fb8 <memp_free>
  }
}
 800b2fa:	bf00      	nop
 800b2fc:	3708      	adds	r7, #8
 800b2fe:	46bd      	mov	sp, r7
 800b300:	bd80      	pop	{r7, pc}
	...

0800b304 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800b304:	b580      	push	{r7, lr}
 800b306:	b084      	sub	sp, #16
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d106      	bne.n	800b320 <tcp_seg_copy+0x1c>
 800b312:	4b0f      	ldr	r3, [pc, #60]	@ (800b350 <tcp_seg_copy+0x4c>)
 800b314:	f240 6282 	movw	r2, #1666	@ 0x682
 800b318:	490e      	ldr	r1, [pc, #56]	@ (800b354 <tcp_seg_copy+0x50>)
 800b31a:	480f      	ldr	r0, [pc, #60]	@ (800b358 <tcp_seg_copy+0x54>)
 800b31c:	f007 fcb2 	bl	8012c84 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800b320:	2003      	movs	r0, #3
 800b322:	f7fd fdd9 	bl	8008ed8 <memp_malloc>
 800b326:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d101      	bne.n	800b332 <tcp_seg_copy+0x2e>
    return NULL;
 800b32e:	2300      	movs	r3, #0
 800b330:	e00a      	b.n	800b348 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800b332:	2210      	movs	r2, #16
 800b334:	6879      	ldr	r1, [r7, #4]
 800b336:	68f8      	ldr	r0, [r7, #12]
 800b338:	f007 fde3 	bl	8012f02 <memcpy>
  pbuf_ref(cseg->p);
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	685b      	ldr	r3, [r3, #4]
 800b340:	4618      	mov	r0, r3
 800b342:	f7fe fd4f 	bl	8009de4 <pbuf_ref>
  return cseg;
 800b346:	68fb      	ldr	r3, [r7, #12]
}
 800b348:	4618      	mov	r0, r3
 800b34a:	3710      	adds	r7, #16
 800b34c:	46bd      	mov	sp, r7
 800b34e:	bd80      	pop	{r7, pc}
 800b350:	08014934 	.word	0x08014934
 800b354:	08014e88 	.word	0x08014e88
 800b358:	08014978 	.word	0x08014978

0800b35c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800b35c:	b580      	push	{r7, lr}
 800b35e:	b084      	sub	sp, #16
 800b360:	af00      	add	r7, sp, #0
 800b362:	60f8      	str	r0, [r7, #12]
 800b364:	60b9      	str	r1, [r7, #8]
 800b366:	607a      	str	r2, [r7, #4]
 800b368:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800b36a:	68bb      	ldr	r3, [r7, #8]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d109      	bne.n	800b384 <tcp_recv_null+0x28>
 800b370:	4b12      	ldr	r3, [pc, #72]	@ (800b3bc <tcp_recv_null+0x60>)
 800b372:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800b376:	4912      	ldr	r1, [pc, #72]	@ (800b3c0 <tcp_recv_null+0x64>)
 800b378:	4812      	ldr	r0, [pc, #72]	@ (800b3c4 <tcp_recv_null+0x68>)
 800b37a:	f007 fc83 	bl	8012c84 <iprintf>
 800b37e:	f06f 030f 	mvn.w	r3, #15
 800b382:	e016      	b.n	800b3b2 <tcp_recv_null+0x56>

  if (p != NULL) {
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	2b00      	cmp	r3, #0
 800b388:	d009      	beq.n	800b39e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	891b      	ldrh	r3, [r3, #8]
 800b38e:	4619      	mov	r1, r3
 800b390:	68b8      	ldr	r0, [r7, #8]
 800b392:	f7ff fb17 	bl	800a9c4 <tcp_recved>
    pbuf_free(p);
 800b396:	6878      	ldr	r0, [r7, #4]
 800b398:	f7fe fc84 	bl	8009ca4 <pbuf_free>
 800b39c:	e008      	b.n	800b3b0 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800b39e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d104      	bne.n	800b3b0 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800b3a6:	68b8      	ldr	r0, [r7, #8]
 800b3a8:	f7ff f9bc 	bl	800a724 <tcp_close>
 800b3ac:	4603      	mov	r3, r0
 800b3ae:	e000      	b.n	800b3b2 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800b3b0:	2300      	movs	r3, #0
}
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	3710      	adds	r7, #16
 800b3b6:	46bd      	mov	sp, r7
 800b3b8:	bd80      	pop	{r7, pc}
 800b3ba:	bf00      	nop
 800b3bc:	08014934 	.word	0x08014934
 800b3c0:	08014ea4 	.word	0x08014ea4
 800b3c4:	08014978 	.word	0x08014978

0800b3c8 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	b086      	sub	sp, #24
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	4603      	mov	r3, r0
 800b3d0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800b3d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	db01      	blt.n	800b3de <tcp_kill_prio+0x16>
 800b3da:	79fb      	ldrb	r3, [r7, #7]
 800b3dc:	e000      	b.n	800b3e0 <tcp_kill_prio+0x18>
 800b3de:	237f      	movs	r3, #127	@ 0x7f
 800b3e0:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800b3e2:	7afb      	ldrb	r3, [r7, #11]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d034      	beq.n	800b452 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800b3e8:	7afb      	ldrb	r3, [r7, #11]
 800b3ea:	3b01      	subs	r3, #1
 800b3ec:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b3f6:	4b19      	ldr	r3, [pc, #100]	@ (800b45c <tcp_kill_prio+0x94>)
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	617b      	str	r3, [r7, #20]
 800b3fc:	e01f      	b.n	800b43e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800b3fe:	697b      	ldr	r3, [r7, #20]
 800b400:	7d5b      	ldrb	r3, [r3, #21]
 800b402:	7afa      	ldrb	r2, [r7, #11]
 800b404:	429a      	cmp	r2, r3
 800b406:	d80c      	bhi.n	800b422 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800b408:	697b      	ldr	r3, [r7, #20]
 800b40a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800b40c:	7afa      	ldrb	r2, [r7, #11]
 800b40e:	429a      	cmp	r2, r3
 800b410:	d112      	bne.n	800b438 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800b412:	4b13      	ldr	r3, [pc, #76]	@ (800b460 <tcp_kill_prio+0x98>)
 800b414:	681a      	ldr	r2, [r3, #0]
 800b416:	697b      	ldr	r3, [r7, #20]
 800b418:	6a1b      	ldr	r3, [r3, #32]
 800b41a:	1ad3      	subs	r3, r2, r3
 800b41c:	68fa      	ldr	r2, [r7, #12]
 800b41e:	429a      	cmp	r2, r3
 800b420:	d80a      	bhi.n	800b438 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800b422:	4b0f      	ldr	r3, [pc, #60]	@ (800b460 <tcp_kill_prio+0x98>)
 800b424:	681a      	ldr	r2, [r3, #0]
 800b426:	697b      	ldr	r3, [r7, #20]
 800b428:	6a1b      	ldr	r3, [r3, #32]
 800b42a:	1ad3      	subs	r3, r2, r3
 800b42c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800b42e:	697b      	ldr	r3, [r7, #20]
 800b430:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800b432:	697b      	ldr	r3, [r7, #20]
 800b434:	7d5b      	ldrb	r3, [r3, #21]
 800b436:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b438:	697b      	ldr	r3, [r7, #20]
 800b43a:	68db      	ldr	r3, [r3, #12]
 800b43c:	617b      	str	r3, [r7, #20]
 800b43e:	697b      	ldr	r3, [r7, #20]
 800b440:	2b00      	cmp	r3, #0
 800b442:	d1dc      	bne.n	800b3fe <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800b444:	693b      	ldr	r3, [r7, #16]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d004      	beq.n	800b454 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800b44a:	6938      	ldr	r0, [r7, #16]
 800b44c:	f7ff fa54 	bl	800a8f8 <tcp_abort>
 800b450:	e000      	b.n	800b454 <tcp_kill_prio+0x8c>
    return;
 800b452:	bf00      	nop
  }
}
 800b454:	3718      	adds	r7, #24
 800b456:	46bd      	mov	sp, r7
 800b458:	bd80      	pop	{r7, pc}
 800b45a:	bf00      	nop
 800b45c:	20008918 	.word	0x20008918
 800b460:	2000890c 	.word	0x2000890c

0800b464 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800b464:	b580      	push	{r7, lr}
 800b466:	b086      	sub	sp, #24
 800b468:	af00      	add	r7, sp, #0
 800b46a:	4603      	mov	r3, r0
 800b46c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800b46e:	79fb      	ldrb	r3, [r7, #7]
 800b470:	2b08      	cmp	r3, #8
 800b472:	d009      	beq.n	800b488 <tcp_kill_state+0x24>
 800b474:	79fb      	ldrb	r3, [r7, #7]
 800b476:	2b09      	cmp	r3, #9
 800b478:	d006      	beq.n	800b488 <tcp_kill_state+0x24>
 800b47a:	4b1a      	ldr	r3, [pc, #104]	@ (800b4e4 <tcp_kill_state+0x80>)
 800b47c:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 800b480:	4919      	ldr	r1, [pc, #100]	@ (800b4e8 <tcp_kill_state+0x84>)
 800b482:	481a      	ldr	r0, [pc, #104]	@ (800b4ec <tcp_kill_state+0x88>)
 800b484:	f007 fbfe 	bl	8012c84 <iprintf>

  inactivity = 0;
 800b488:	2300      	movs	r3, #0
 800b48a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800b48c:	2300      	movs	r3, #0
 800b48e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b490:	4b17      	ldr	r3, [pc, #92]	@ (800b4f0 <tcp_kill_state+0x8c>)
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	617b      	str	r3, [r7, #20]
 800b496:	e017      	b.n	800b4c8 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800b498:	697b      	ldr	r3, [r7, #20]
 800b49a:	7d1b      	ldrb	r3, [r3, #20]
 800b49c:	79fa      	ldrb	r2, [r7, #7]
 800b49e:	429a      	cmp	r2, r3
 800b4a0:	d10f      	bne.n	800b4c2 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800b4a2:	4b14      	ldr	r3, [pc, #80]	@ (800b4f4 <tcp_kill_state+0x90>)
 800b4a4:	681a      	ldr	r2, [r3, #0]
 800b4a6:	697b      	ldr	r3, [r7, #20]
 800b4a8:	6a1b      	ldr	r3, [r3, #32]
 800b4aa:	1ad3      	subs	r3, r2, r3
 800b4ac:	68fa      	ldr	r2, [r7, #12]
 800b4ae:	429a      	cmp	r2, r3
 800b4b0:	d807      	bhi.n	800b4c2 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800b4b2:	4b10      	ldr	r3, [pc, #64]	@ (800b4f4 <tcp_kill_state+0x90>)
 800b4b4:	681a      	ldr	r2, [r3, #0]
 800b4b6:	697b      	ldr	r3, [r7, #20]
 800b4b8:	6a1b      	ldr	r3, [r3, #32]
 800b4ba:	1ad3      	subs	r3, r2, r3
 800b4bc:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800b4be:	697b      	ldr	r3, [r7, #20]
 800b4c0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b4c2:	697b      	ldr	r3, [r7, #20]
 800b4c4:	68db      	ldr	r3, [r3, #12]
 800b4c6:	617b      	str	r3, [r7, #20]
 800b4c8:	697b      	ldr	r3, [r7, #20]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d1e4      	bne.n	800b498 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800b4ce:	693b      	ldr	r3, [r7, #16]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d003      	beq.n	800b4dc <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800b4d4:	2100      	movs	r1, #0
 800b4d6:	6938      	ldr	r0, [r7, #16]
 800b4d8:	f7ff f950 	bl	800a77c <tcp_abandon>
  }
}
 800b4dc:	bf00      	nop
 800b4de:	3718      	adds	r7, #24
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	bd80      	pop	{r7, pc}
 800b4e4:	08014934 	.word	0x08014934
 800b4e8:	08014ec0 	.word	0x08014ec0
 800b4ec:	08014978 	.word	0x08014978
 800b4f0:	20008918 	.word	0x20008918
 800b4f4:	2000890c 	.word	0x2000890c

0800b4f8 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b084      	sub	sp, #16
 800b4fc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800b4fe:	2300      	movs	r3, #0
 800b500:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800b502:	2300      	movs	r3, #0
 800b504:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b506:	4b12      	ldr	r3, [pc, #72]	@ (800b550 <tcp_kill_timewait+0x58>)
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	60fb      	str	r3, [r7, #12]
 800b50c:	e012      	b.n	800b534 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800b50e:	4b11      	ldr	r3, [pc, #68]	@ (800b554 <tcp_kill_timewait+0x5c>)
 800b510:	681a      	ldr	r2, [r3, #0]
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	6a1b      	ldr	r3, [r3, #32]
 800b516:	1ad3      	subs	r3, r2, r3
 800b518:	687a      	ldr	r2, [r7, #4]
 800b51a:	429a      	cmp	r2, r3
 800b51c:	d807      	bhi.n	800b52e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800b51e:	4b0d      	ldr	r3, [pc, #52]	@ (800b554 <tcp_kill_timewait+0x5c>)
 800b520:	681a      	ldr	r2, [r3, #0]
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	6a1b      	ldr	r3, [r3, #32]
 800b526:	1ad3      	subs	r3, r2, r3
 800b528:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	68db      	ldr	r3, [r3, #12]
 800b532:	60fb      	str	r3, [r7, #12]
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d1e9      	bne.n	800b50e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800b53a:	68bb      	ldr	r3, [r7, #8]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d002      	beq.n	800b546 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800b540:	68b8      	ldr	r0, [r7, #8]
 800b542:	f7ff f9d9 	bl	800a8f8 <tcp_abort>
  }
}
 800b546:	bf00      	nop
 800b548:	3710      	adds	r7, #16
 800b54a:	46bd      	mov	sp, r7
 800b54c:	bd80      	pop	{r7, pc}
 800b54e:	bf00      	nop
 800b550:	2000891c 	.word	0x2000891c
 800b554:	2000890c 	.word	0x2000890c

0800b558 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800b558:	b580      	push	{r7, lr}
 800b55a:	b082      	sub	sp, #8
 800b55c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800b55e:	4b10      	ldr	r3, [pc, #64]	@ (800b5a0 <tcp_handle_closepend+0x48>)
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800b564:	e014      	b.n	800b590 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	68db      	ldr	r3, [r3, #12]
 800b56a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	8b5b      	ldrh	r3, [r3, #26]
 800b570:	f003 0308 	and.w	r3, r3, #8
 800b574:	2b00      	cmp	r3, #0
 800b576:	d009      	beq.n	800b58c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	8b5b      	ldrh	r3, [r3, #26]
 800b57c:	f023 0308 	bic.w	r3, r3, #8
 800b580:	b29a      	uxth	r2, r3
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800b586:	6878      	ldr	r0, [r7, #4]
 800b588:	f7ff f862 	bl	800a650 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800b58c:	683b      	ldr	r3, [r7, #0]
 800b58e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d1e7      	bne.n	800b566 <tcp_handle_closepend+0xe>
  }
}
 800b596:	bf00      	nop
 800b598:	bf00      	nop
 800b59a:	3708      	adds	r7, #8
 800b59c:	46bd      	mov	sp, r7
 800b59e:	bd80      	pop	{r7, pc}
 800b5a0:	20008918 	.word	0x20008918

0800b5a4 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	b084      	sub	sp, #16
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	4603      	mov	r3, r0
 800b5ac:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b5ae:	2001      	movs	r0, #1
 800b5b0:	f7fd fc92 	bl	8008ed8 <memp_malloc>
 800b5b4:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d126      	bne.n	800b60a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800b5bc:	f7ff ffcc 	bl	800b558 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800b5c0:	f7ff ff9a 	bl	800b4f8 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b5c4:	2001      	movs	r0, #1
 800b5c6:	f7fd fc87 	bl	8008ed8 <memp_malloc>
 800b5ca:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d11b      	bne.n	800b60a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800b5d2:	2009      	movs	r0, #9
 800b5d4:	f7ff ff46 	bl	800b464 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b5d8:	2001      	movs	r0, #1
 800b5da:	f7fd fc7d 	bl	8008ed8 <memp_malloc>
 800b5de:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d111      	bne.n	800b60a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800b5e6:	2008      	movs	r0, #8
 800b5e8:	f7ff ff3c 	bl	800b464 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b5ec:	2001      	movs	r0, #1
 800b5ee:	f7fd fc73 	bl	8008ed8 <memp_malloc>
 800b5f2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d107      	bne.n	800b60a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800b5fa:	79fb      	ldrb	r3, [r7, #7]
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	f7ff fee3 	bl	800b3c8 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b602:	2001      	movs	r0, #1
 800b604:	f7fd fc68 	bl	8008ed8 <memp_malloc>
 800b608:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d03f      	beq.n	800b690 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800b610:	229c      	movs	r2, #156	@ 0x9c
 800b612:	2100      	movs	r1, #0
 800b614:	68f8      	ldr	r0, [r7, #12]
 800b616:	f007 fbd6 	bl	8012dc6 <memset>
    pcb->prio = prio;
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	79fa      	ldrb	r2, [r7, #7]
 800b61e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800b626:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800b630:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	22ff      	movs	r2, #255	@ 0xff
 800b63e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800b646:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	2206      	movs	r2, #6
 800b64c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	2206      	movs	r2, #6
 800b654:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b65c:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	2201      	movs	r2, #1
 800b662:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 800b666:	4b0d      	ldr	r3, [pc, #52]	@ (800b69c <tcp_alloc+0xf8>)
 800b668:	681a      	ldr	r2, [r3, #0]
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800b66e:	4b0c      	ldr	r3, [pc, #48]	@ (800b6a0 <tcp_alloc+0xfc>)
 800b670:	781a      	ldrb	r2, [r3, #0]
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800b67c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	4a08      	ldr	r2, [pc, #32]	@ (800b6a4 <tcp_alloc+0x100>)
 800b684:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	4a07      	ldr	r2, [pc, #28]	@ (800b6a8 <tcp_alloc+0x104>)
 800b68c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800b690:	68fb      	ldr	r3, [r7, #12]
}
 800b692:	4618      	mov	r0, r3
 800b694:	3710      	adds	r7, #16
 800b696:	46bd      	mov	sp, r7
 800b698:	bd80      	pop	{r7, pc}
 800b69a:	bf00      	nop
 800b69c:	2000890c 	.word	0x2000890c
 800b6a0:	20008922 	.word	0x20008922
 800b6a4:	0800b35d 	.word	0x0800b35d
 800b6a8:	006ddd00 	.word	0x006ddd00

0800b6ac <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	b082      	sub	sp, #8
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d107      	bne.n	800b6ca <tcp_pcb_purge+0x1e>
 800b6ba:	4b21      	ldr	r3, [pc, #132]	@ (800b740 <tcp_pcb_purge+0x94>)
 800b6bc:	f640 0251 	movw	r2, #2129	@ 0x851
 800b6c0:	4920      	ldr	r1, [pc, #128]	@ (800b744 <tcp_pcb_purge+0x98>)
 800b6c2:	4821      	ldr	r0, [pc, #132]	@ (800b748 <tcp_pcb_purge+0x9c>)
 800b6c4:	f007 fade 	bl	8012c84 <iprintf>
 800b6c8:	e037      	b.n	800b73a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	7d1b      	ldrb	r3, [r3, #20]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d033      	beq.n	800b73a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800b6d6:	2b0a      	cmp	r3, #10
 800b6d8:	d02f      	beq.n	800b73a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800b6de:	2b01      	cmp	r3, #1
 800b6e0:	d02b      	beq.n	800b73a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d007      	beq.n	800b6fa <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	f7fe fad8 	bl	8009ca4 <pbuf_free>
      pcb->refused_data = NULL;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	2200      	movs	r2, #0
 800b6f8:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d002      	beq.n	800b708 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800b702:	6878      	ldr	r0, [r7, #4]
 800b704:	f000 f986 	bl	800ba14 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b70e:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b714:	4618      	mov	r0, r3
 800b716:	f7ff fdc7 	bl	800b2a8 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b71e:	4618      	mov	r0, r3
 800b720:	f7ff fdc2 	bl	800b2a8 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	2200      	movs	r2, #0
 800b728:	66da      	str	r2, [r3, #108]	@ 0x6c
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	2200      	movs	r2, #0
 800b736:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800b73a:	3708      	adds	r7, #8
 800b73c:	46bd      	mov	sp, r7
 800b73e:	bd80      	pop	{r7, pc}
 800b740:	08014934 	.word	0x08014934
 800b744:	08014f80 	.word	0x08014f80
 800b748:	08014978 	.word	0x08014978

0800b74c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800b74c:	b580      	push	{r7, lr}
 800b74e:	b084      	sub	sp, #16
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]
 800b754:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800b756:	683b      	ldr	r3, [r7, #0]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d106      	bne.n	800b76a <tcp_pcb_remove+0x1e>
 800b75c:	4b3e      	ldr	r3, [pc, #248]	@ (800b858 <tcp_pcb_remove+0x10c>)
 800b75e:	f640 0283 	movw	r2, #2179	@ 0x883
 800b762:	493e      	ldr	r1, [pc, #248]	@ (800b85c <tcp_pcb_remove+0x110>)
 800b764:	483e      	ldr	r0, [pc, #248]	@ (800b860 <tcp_pcb_remove+0x114>)
 800b766:	f007 fa8d 	bl	8012c84 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d106      	bne.n	800b77e <tcp_pcb_remove+0x32>
 800b770:	4b39      	ldr	r3, [pc, #228]	@ (800b858 <tcp_pcb_remove+0x10c>)
 800b772:	f640 0284 	movw	r2, #2180	@ 0x884
 800b776:	493b      	ldr	r1, [pc, #236]	@ (800b864 <tcp_pcb_remove+0x118>)
 800b778:	4839      	ldr	r0, [pc, #228]	@ (800b860 <tcp_pcb_remove+0x114>)
 800b77a:	f007 fa83 	bl	8012c84 <iprintf>

  TCP_RMV(pcblist, pcb);
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	683a      	ldr	r2, [r7, #0]
 800b784:	429a      	cmp	r2, r3
 800b786:	d105      	bne.n	800b794 <tcp_pcb_remove+0x48>
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	68da      	ldr	r2, [r3, #12]
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	601a      	str	r2, [r3, #0]
 800b792:	e013      	b.n	800b7bc <tcp_pcb_remove+0x70>
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	60fb      	str	r3, [r7, #12]
 800b79a:	e00c      	b.n	800b7b6 <tcp_pcb_remove+0x6a>
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	68db      	ldr	r3, [r3, #12]
 800b7a0:	683a      	ldr	r2, [r7, #0]
 800b7a2:	429a      	cmp	r2, r3
 800b7a4:	d104      	bne.n	800b7b0 <tcp_pcb_remove+0x64>
 800b7a6:	683b      	ldr	r3, [r7, #0]
 800b7a8:	68da      	ldr	r2, [r3, #12]
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	60da      	str	r2, [r3, #12]
 800b7ae:	e005      	b.n	800b7bc <tcp_pcb_remove+0x70>
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	68db      	ldr	r3, [r3, #12]
 800b7b4:	60fb      	str	r3, [r7, #12]
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d1ef      	bne.n	800b79c <tcp_pcb_remove+0x50>
 800b7bc:	683b      	ldr	r3, [r7, #0]
 800b7be:	2200      	movs	r2, #0
 800b7c0:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800b7c2:	6838      	ldr	r0, [r7, #0]
 800b7c4:	f7ff ff72 	bl	800b6ac <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800b7c8:	683b      	ldr	r3, [r7, #0]
 800b7ca:	7d1b      	ldrb	r3, [r3, #20]
 800b7cc:	2b0a      	cmp	r3, #10
 800b7ce:	d013      	beq.n	800b7f8 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800b7d0:	683b      	ldr	r3, [r7, #0]
 800b7d2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800b7d4:	2b01      	cmp	r3, #1
 800b7d6:	d00f      	beq.n	800b7f8 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800b7d8:	683b      	ldr	r3, [r7, #0]
 800b7da:	8b5b      	ldrh	r3, [r3, #26]
 800b7dc:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d009      	beq.n	800b7f8 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800b7e4:	683b      	ldr	r3, [r7, #0]
 800b7e6:	8b5b      	ldrh	r3, [r3, #26]
 800b7e8:	f043 0302 	orr.w	r3, r3, #2
 800b7ec:	b29a      	uxth	r2, r3
 800b7ee:	683b      	ldr	r3, [r7, #0]
 800b7f0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800b7f2:	6838      	ldr	r0, [r7, #0]
 800b7f4:	f002 ff68 	bl	800e6c8 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800b7f8:	683b      	ldr	r3, [r7, #0]
 800b7fa:	7d1b      	ldrb	r3, [r3, #20]
 800b7fc:	2b01      	cmp	r3, #1
 800b7fe:	d020      	beq.n	800b842 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800b800:	683b      	ldr	r3, [r7, #0]
 800b802:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b804:	2b00      	cmp	r3, #0
 800b806:	d006      	beq.n	800b816 <tcp_pcb_remove+0xca>
 800b808:	4b13      	ldr	r3, [pc, #76]	@ (800b858 <tcp_pcb_remove+0x10c>)
 800b80a:	f640 0293 	movw	r2, #2195	@ 0x893
 800b80e:	4916      	ldr	r1, [pc, #88]	@ (800b868 <tcp_pcb_remove+0x11c>)
 800b810:	4813      	ldr	r0, [pc, #76]	@ (800b860 <tcp_pcb_remove+0x114>)
 800b812:	f007 fa37 	bl	8012c84 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800b816:	683b      	ldr	r3, [r7, #0]
 800b818:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d006      	beq.n	800b82c <tcp_pcb_remove+0xe0>
 800b81e:	4b0e      	ldr	r3, [pc, #56]	@ (800b858 <tcp_pcb_remove+0x10c>)
 800b820:	f640 0294 	movw	r2, #2196	@ 0x894
 800b824:	4911      	ldr	r1, [pc, #68]	@ (800b86c <tcp_pcb_remove+0x120>)
 800b826:	480e      	ldr	r0, [pc, #56]	@ (800b860 <tcp_pcb_remove+0x114>)
 800b828:	f007 fa2c 	bl	8012c84 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800b82c:	683b      	ldr	r3, [r7, #0]
 800b82e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b830:	2b00      	cmp	r3, #0
 800b832:	d006      	beq.n	800b842 <tcp_pcb_remove+0xf6>
 800b834:	4b08      	ldr	r3, [pc, #32]	@ (800b858 <tcp_pcb_remove+0x10c>)
 800b836:	f640 0296 	movw	r2, #2198	@ 0x896
 800b83a:	490d      	ldr	r1, [pc, #52]	@ (800b870 <tcp_pcb_remove+0x124>)
 800b83c:	4808      	ldr	r0, [pc, #32]	@ (800b860 <tcp_pcb_remove+0x114>)
 800b83e:	f007 fa21 	bl	8012c84 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800b842:	683b      	ldr	r3, [r7, #0]
 800b844:	2200      	movs	r2, #0
 800b846:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800b848:	683b      	ldr	r3, [r7, #0]
 800b84a:	2200      	movs	r2, #0
 800b84c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800b84e:	bf00      	nop
 800b850:	3710      	adds	r7, #16
 800b852:	46bd      	mov	sp, r7
 800b854:	bd80      	pop	{r7, pc}
 800b856:	bf00      	nop
 800b858:	08014934 	.word	0x08014934
 800b85c:	08014f9c 	.word	0x08014f9c
 800b860:	08014978 	.word	0x08014978
 800b864:	08014fb8 	.word	0x08014fb8
 800b868:	08014fd8 	.word	0x08014fd8
 800b86c:	08014ff0 	.word	0x08014ff0
 800b870:	0801500c 	.word	0x0801500c

0800b874 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800b874:	b580      	push	{r7, lr}
 800b876:	b082      	sub	sp, #8
 800b878:	af00      	add	r7, sp, #0
 800b87a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d106      	bne.n	800b890 <tcp_next_iss+0x1c>
 800b882:	4b0a      	ldr	r3, [pc, #40]	@ (800b8ac <tcp_next_iss+0x38>)
 800b884:	f640 02af 	movw	r2, #2223	@ 0x8af
 800b888:	4909      	ldr	r1, [pc, #36]	@ (800b8b0 <tcp_next_iss+0x3c>)
 800b88a:	480a      	ldr	r0, [pc, #40]	@ (800b8b4 <tcp_next_iss+0x40>)
 800b88c:	f007 f9fa 	bl	8012c84 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800b890:	4b09      	ldr	r3, [pc, #36]	@ (800b8b8 <tcp_next_iss+0x44>)
 800b892:	681a      	ldr	r2, [r3, #0]
 800b894:	4b09      	ldr	r3, [pc, #36]	@ (800b8bc <tcp_next_iss+0x48>)
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	4413      	add	r3, r2
 800b89a:	4a07      	ldr	r2, [pc, #28]	@ (800b8b8 <tcp_next_iss+0x44>)
 800b89c:	6013      	str	r3, [r2, #0]
  return iss;
 800b89e:	4b06      	ldr	r3, [pc, #24]	@ (800b8b8 <tcp_next_iss+0x44>)
 800b8a0:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	3708      	adds	r7, #8
 800b8a6:	46bd      	mov	sp, r7
 800b8a8:	bd80      	pop	{r7, pc}
 800b8aa:	bf00      	nop
 800b8ac:	08014934 	.word	0x08014934
 800b8b0:	08015024 	.word	0x08015024
 800b8b4:	08014978 	.word	0x08014978
 800b8b8:	2000006c 	.word	0x2000006c
 800b8bc:	2000890c 	.word	0x2000890c

0800b8c0 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800b8c0:	b580      	push	{r7, lr}
 800b8c2:	b086      	sub	sp, #24
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	4603      	mov	r3, r0
 800b8c8:	60b9      	str	r1, [r7, #8]
 800b8ca:	607a      	str	r2, [r7, #4]
 800b8cc:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d106      	bne.n	800b8e2 <tcp_eff_send_mss_netif+0x22>
 800b8d4:	4b14      	ldr	r3, [pc, #80]	@ (800b928 <tcp_eff_send_mss_netif+0x68>)
 800b8d6:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800b8da:	4914      	ldr	r1, [pc, #80]	@ (800b92c <tcp_eff_send_mss_netif+0x6c>)
 800b8dc:	4814      	ldr	r0, [pc, #80]	@ (800b930 <tcp_eff_send_mss_netif+0x70>)
 800b8de:	f007 f9d1 	bl	8012c84 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800b8e2:	68bb      	ldr	r3, [r7, #8]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d101      	bne.n	800b8ec <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800b8e8:	89fb      	ldrh	r3, [r7, #14]
 800b8ea:	e019      	b.n	800b920 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800b8ec:	68bb      	ldr	r3, [r7, #8]
 800b8ee:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800b8f0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800b8f2:	8afb      	ldrh	r3, [r7, #22]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d012      	beq.n	800b91e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800b8f8:	2328      	movs	r3, #40	@ 0x28
 800b8fa:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800b8fc:	8afa      	ldrh	r2, [r7, #22]
 800b8fe:	8abb      	ldrh	r3, [r7, #20]
 800b900:	429a      	cmp	r2, r3
 800b902:	d904      	bls.n	800b90e <tcp_eff_send_mss_netif+0x4e>
 800b904:	8afa      	ldrh	r2, [r7, #22]
 800b906:	8abb      	ldrh	r3, [r7, #20]
 800b908:	1ad3      	subs	r3, r2, r3
 800b90a:	b29b      	uxth	r3, r3
 800b90c:	e000      	b.n	800b910 <tcp_eff_send_mss_netif+0x50>
 800b90e:	2300      	movs	r3, #0
 800b910:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800b912:	8a7a      	ldrh	r2, [r7, #18]
 800b914:	89fb      	ldrh	r3, [r7, #14]
 800b916:	4293      	cmp	r3, r2
 800b918:	bf28      	it	cs
 800b91a:	4613      	movcs	r3, r2
 800b91c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800b91e:	89fb      	ldrh	r3, [r7, #14]
}
 800b920:	4618      	mov	r0, r3
 800b922:	3718      	adds	r7, #24
 800b924:	46bd      	mov	sp, r7
 800b926:	bd80      	pop	{r7, pc}
 800b928:	08014934 	.word	0x08014934
 800b92c:	08015040 	.word	0x08015040
 800b930:	08014978 	.word	0x08014978

0800b934 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800b934:	b580      	push	{r7, lr}
 800b936:	b084      	sub	sp, #16
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
 800b93c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800b93e:	683b      	ldr	r3, [r7, #0]
 800b940:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d119      	bne.n	800b97c <tcp_netif_ip_addr_changed_pcblist+0x48>
 800b948:	4b10      	ldr	r3, [pc, #64]	@ (800b98c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800b94a:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800b94e:	4910      	ldr	r1, [pc, #64]	@ (800b990 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800b950:	4810      	ldr	r0, [pc, #64]	@ (800b994 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800b952:	f007 f997 	bl	8012c84 <iprintf>

  while (pcb != NULL) {
 800b956:	e011      	b.n	800b97c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	681a      	ldr	r2, [r3, #0]
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	429a      	cmp	r2, r3
 800b962:	d108      	bne.n	800b976 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	68db      	ldr	r3, [r3, #12]
 800b968:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800b96a:	68f8      	ldr	r0, [r7, #12]
 800b96c:	f7fe ffc4 	bl	800a8f8 <tcp_abort>
      pcb = next;
 800b970:	68bb      	ldr	r3, [r7, #8]
 800b972:	60fb      	str	r3, [r7, #12]
 800b974:	e002      	b.n	800b97c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	68db      	ldr	r3, [r3, #12]
 800b97a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d1ea      	bne.n	800b958 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800b982:	bf00      	nop
 800b984:	bf00      	nop
 800b986:	3710      	adds	r7, #16
 800b988:	46bd      	mov	sp, r7
 800b98a:	bd80      	pop	{r7, pc}
 800b98c:	08014934 	.word	0x08014934
 800b990:	08015068 	.word	0x08015068
 800b994:	08014978 	.word	0x08014978

0800b998 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800b998:	b580      	push	{r7, lr}
 800b99a:	b084      	sub	sp, #16
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	6078      	str	r0, [r7, #4]
 800b9a0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d02a      	beq.n	800b9fe <tcp_netif_ip_addr_changed+0x66>
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d026      	beq.n	800b9fe <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800b9b0:	4b15      	ldr	r3, [pc, #84]	@ (800ba08 <tcp_netif_ip_addr_changed+0x70>)
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	4619      	mov	r1, r3
 800b9b6:	6878      	ldr	r0, [r7, #4]
 800b9b8:	f7ff ffbc 	bl	800b934 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800b9bc:	4b13      	ldr	r3, [pc, #76]	@ (800ba0c <tcp_netif_ip_addr_changed+0x74>)
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	4619      	mov	r1, r3
 800b9c2:	6878      	ldr	r0, [r7, #4]
 800b9c4:	f7ff ffb6 	bl	800b934 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800b9c8:	683b      	ldr	r3, [r7, #0]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d017      	beq.n	800b9fe <tcp_netif_ip_addr_changed+0x66>
 800b9ce:	683b      	ldr	r3, [r7, #0]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d013      	beq.n	800b9fe <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b9d6:	4b0e      	ldr	r3, [pc, #56]	@ (800ba10 <tcp_netif_ip_addr_changed+0x78>)
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	60fb      	str	r3, [r7, #12]
 800b9dc:	e00c      	b.n	800b9f8 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	681a      	ldr	r2, [r3, #0]
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	429a      	cmp	r2, r3
 800b9e8:	d103      	bne.n	800b9f2 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800b9ea:	683b      	ldr	r3, [r7, #0]
 800b9ec:	681a      	ldr	r2, [r3, #0]
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	68db      	ldr	r3, [r3, #12]
 800b9f6:	60fb      	str	r3, [r7, #12]
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d1ef      	bne.n	800b9de <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800b9fe:	bf00      	nop
 800ba00:	3710      	adds	r7, #16
 800ba02:	46bd      	mov	sp, r7
 800ba04:	bd80      	pop	{r7, pc}
 800ba06:	bf00      	nop
 800ba08:	20008918 	.word	0x20008918
 800ba0c:	20008910 	.word	0x20008910
 800ba10:	20008914 	.word	0x20008914

0800ba14 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800ba14:	b580      	push	{r7, lr}
 800ba16:	b082      	sub	sp, #8
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d007      	beq.n	800ba34 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ba28:	4618      	mov	r0, r3
 800ba2a:	f7ff fc3d 	bl	800b2a8 <tcp_segs_free>
    pcb->ooseq = NULL;
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	2200      	movs	r2, #0
 800ba32:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800ba34:	bf00      	nop
 800ba36:	3708      	adds	r7, #8
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	bd80      	pop	{r7, pc}

0800ba3c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800ba3c:	b590      	push	{r4, r7, lr}
 800ba3e:	b08d      	sub	sp, #52	@ 0x34
 800ba40:	af04      	add	r7, sp, #16
 800ba42:	6078      	str	r0, [r7, #4]
 800ba44:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d105      	bne.n	800ba58 <tcp_input+0x1c>
 800ba4c:	4b9b      	ldr	r3, [pc, #620]	@ (800bcbc <tcp_input+0x280>)
 800ba4e:	2283      	movs	r2, #131	@ 0x83
 800ba50:	499b      	ldr	r1, [pc, #620]	@ (800bcc0 <tcp_input+0x284>)
 800ba52:	489c      	ldr	r0, [pc, #624]	@ (800bcc4 <tcp_input+0x288>)
 800ba54:	f007 f916 	bl	8012c84 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	685b      	ldr	r3, [r3, #4]
 800ba5c:	4a9a      	ldr	r2, [pc, #616]	@ (800bcc8 <tcp_input+0x28c>)
 800ba5e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	895b      	ldrh	r3, [r3, #10]
 800ba64:	2b13      	cmp	r3, #19
 800ba66:	f240 83d1 	bls.w	800c20c <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800ba6a:	4b98      	ldr	r3, [pc, #608]	@ (800bccc <tcp_input+0x290>)
 800ba6c:	695b      	ldr	r3, [r3, #20]
 800ba6e:	4a97      	ldr	r2, [pc, #604]	@ (800bccc <tcp_input+0x290>)
 800ba70:	6812      	ldr	r2, [r2, #0]
 800ba72:	4611      	mov	r1, r2
 800ba74:	4618      	mov	r0, r3
 800ba76:	f005 ff61 	bl	801193c <ip4_addr_isbroadcast_u32>
 800ba7a:	4603      	mov	r3, r0
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	f040 83c7 	bne.w	800c210 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800ba82:	4b92      	ldr	r3, [pc, #584]	@ (800bccc <tcp_input+0x290>)
 800ba84:	695b      	ldr	r3, [r3, #20]
 800ba86:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800ba8a:	2be0      	cmp	r3, #224	@ 0xe0
 800ba8c:	f000 83c0 	beq.w	800c210 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800ba90:	4b8d      	ldr	r3, [pc, #564]	@ (800bcc8 <tcp_input+0x28c>)
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	899b      	ldrh	r3, [r3, #12]
 800ba96:	b29b      	uxth	r3, r3
 800ba98:	4618      	mov	r0, r3
 800ba9a:	f7fc fda5 	bl	80085e8 <lwip_htons>
 800ba9e:	4603      	mov	r3, r0
 800baa0:	0b1b      	lsrs	r3, r3, #12
 800baa2:	b29b      	uxth	r3, r3
 800baa4:	b2db      	uxtb	r3, r3
 800baa6:	009b      	lsls	r3, r3, #2
 800baa8:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800baaa:	7cbb      	ldrb	r3, [r7, #18]
 800baac:	2b13      	cmp	r3, #19
 800baae:	f240 83b1 	bls.w	800c214 <tcp_input+0x7d8>
 800bab2:	7cbb      	ldrb	r3, [r7, #18]
 800bab4:	b29a      	uxth	r2, r3
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	891b      	ldrh	r3, [r3, #8]
 800baba:	429a      	cmp	r2, r3
 800babc:	f200 83aa 	bhi.w	800c214 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800bac0:	7cbb      	ldrb	r3, [r7, #18]
 800bac2:	b29b      	uxth	r3, r3
 800bac4:	3b14      	subs	r3, #20
 800bac6:	b29a      	uxth	r2, r3
 800bac8:	4b81      	ldr	r3, [pc, #516]	@ (800bcd0 <tcp_input+0x294>)
 800baca:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800bacc:	4b81      	ldr	r3, [pc, #516]	@ (800bcd4 <tcp_input+0x298>)
 800bace:	2200      	movs	r2, #0
 800bad0:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	895a      	ldrh	r2, [r3, #10]
 800bad6:	7cbb      	ldrb	r3, [r7, #18]
 800bad8:	b29b      	uxth	r3, r3
 800bada:	429a      	cmp	r2, r3
 800badc:	d309      	bcc.n	800baf2 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800bade:	4b7c      	ldr	r3, [pc, #496]	@ (800bcd0 <tcp_input+0x294>)
 800bae0:	881a      	ldrh	r2, [r3, #0]
 800bae2:	4b7d      	ldr	r3, [pc, #500]	@ (800bcd8 <tcp_input+0x29c>)
 800bae4:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800bae6:	7cbb      	ldrb	r3, [r7, #18]
 800bae8:	4619      	mov	r1, r3
 800baea:	6878      	ldr	r0, [r7, #4]
 800baec:	f7fe f854 	bl	8009b98 <pbuf_remove_header>
 800baf0:	e04e      	b.n	800bb90 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d105      	bne.n	800bb06 <tcp_input+0xca>
 800bafa:	4b70      	ldr	r3, [pc, #448]	@ (800bcbc <tcp_input+0x280>)
 800bafc:	22c2      	movs	r2, #194	@ 0xc2
 800bafe:	4977      	ldr	r1, [pc, #476]	@ (800bcdc <tcp_input+0x2a0>)
 800bb00:	4870      	ldr	r0, [pc, #448]	@ (800bcc4 <tcp_input+0x288>)
 800bb02:	f007 f8bf 	bl	8012c84 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800bb06:	2114      	movs	r1, #20
 800bb08:	6878      	ldr	r0, [r7, #4]
 800bb0a:	f7fe f845 	bl	8009b98 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	895a      	ldrh	r2, [r3, #10]
 800bb12:	4b71      	ldr	r3, [pc, #452]	@ (800bcd8 <tcp_input+0x29c>)
 800bb14:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800bb16:	4b6e      	ldr	r3, [pc, #440]	@ (800bcd0 <tcp_input+0x294>)
 800bb18:	881a      	ldrh	r2, [r3, #0]
 800bb1a:	4b6f      	ldr	r3, [pc, #444]	@ (800bcd8 <tcp_input+0x29c>)
 800bb1c:	881b      	ldrh	r3, [r3, #0]
 800bb1e:	1ad3      	subs	r3, r2, r3
 800bb20:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800bb22:	4b6d      	ldr	r3, [pc, #436]	@ (800bcd8 <tcp_input+0x29c>)
 800bb24:	881b      	ldrh	r3, [r3, #0]
 800bb26:	4619      	mov	r1, r3
 800bb28:	6878      	ldr	r0, [r7, #4]
 800bb2a:	f7fe f835 	bl	8009b98 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	895b      	ldrh	r3, [r3, #10]
 800bb34:	8a3a      	ldrh	r2, [r7, #16]
 800bb36:	429a      	cmp	r2, r3
 800bb38:	f200 836e 	bhi.w	800c218 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	685b      	ldr	r3, [r3, #4]
 800bb42:	4a64      	ldr	r2, [pc, #400]	@ (800bcd4 <tcp_input+0x298>)
 800bb44:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	8a3a      	ldrh	r2, [r7, #16]
 800bb4c:	4611      	mov	r1, r2
 800bb4e:	4618      	mov	r0, r3
 800bb50:	f7fe f822 	bl	8009b98 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	891a      	ldrh	r2, [r3, #8]
 800bb58:	8a3b      	ldrh	r3, [r7, #16]
 800bb5a:	1ad3      	subs	r3, r2, r3
 800bb5c:	b29a      	uxth	r2, r3
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	895b      	ldrh	r3, [r3, #10]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d005      	beq.n	800bb76 <tcp_input+0x13a>
 800bb6a:	4b54      	ldr	r3, [pc, #336]	@ (800bcbc <tcp_input+0x280>)
 800bb6c:	22df      	movs	r2, #223	@ 0xdf
 800bb6e:	495c      	ldr	r1, [pc, #368]	@ (800bce0 <tcp_input+0x2a4>)
 800bb70:	4854      	ldr	r0, [pc, #336]	@ (800bcc4 <tcp_input+0x288>)
 800bb72:	f007 f887 	bl	8012c84 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	891a      	ldrh	r2, [r3, #8]
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	891b      	ldrh	r3, [r3, #8]
 800bb80:	429a      	cmp	r2, r3
 800bb82:	d005      	beq.n	800bb90 <tcp_input+0x154>
 800bb84:	4b4d      	ldr	r3, [pc, #308]	@ (800bcbc <tcp_input+0x280>)
 800bb86:	22e0      	movs	r2, #224	@ 0xe0
 800bb88:	4956      	ldr	r1, [pc, #344]	@ (800bce4 <tcp_input+0x2a8>)
 800bb8a:	484e      	ldr	r0, [pc, #312]	@ (800bcc4 <tcp_input+0x288>)
 800bb8c:	f007 f87a 	bl	8012c84 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800bb90:	4b4d      	ldr	r3, [pc, #308]	@ (800bcc8 <tcp_input+0x28c>)
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	881b      	ldrh	r3, [r3, #0]
 800bb96:	b29b      	uxth	r3, r3
 800bb98:	4a4b      	ldr	r2, [pc, #300]	@ (800bcc8 <tcp_input+0x28c>)
 800bb9a:	6814      	ldr	r4, [r2, #0]
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	f7fc fd23 	bl	80085e8 <lwip_htons>
 800bba2:	4603      	mov	r3, r0
 800bba4:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800bba6:	4b48      	ldr	r3, [pc, #288]	@ (800bcc8 <tcp_input+0x28c>)
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	885b      	ldrh	r3, [r3, #2]
 800bbac:	b29b      	uxth	r3, r3
 800bbae:	4a46      	ldr	r2, [pc, #280]	@ (800bcc8 <tcp_input+0x28c>)
 800bbb0:	6814      	ldr	r4, [r2, #0]
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	f7fc fd18 	bl	80085e8 <lwip_htons>
 800bbb8:	4603      	mov	r3, r0
 800bbba:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800bbbc:	4b42      	ldr	r3, [pc, #264]	@ (800bcc8 <tcp_input+0x28c>)
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	685b      	ldr	r3, [r3, #4]
 800bbc2:	4a41      	ldr	r2, [pc, #260]	@ (800bcc8 <tcp_input+0x28c>)
 800bbc4:	6814      	ldr	r4, [r2, #0]
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	f7fc fd24 	bl	8008614 <lwip_htonl>
 800bbcc:	4603      	mov	r3, r0
 800bbce:	6063      	str	r3, [r4, #4]
 800bbd0:	6863      	ldr	r3, [r4, #4]
 800bbd2:	4a45      	ldr	r2, [pc, #276]	@ (800bce8 <tcp_input+0x2ac>)
 800bbd4:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800bbd6:	4b3c      	ldr	r3, [pc, #240]	@ (800bcc8 <tcp_input+0x28c>)
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	689b      	ldr	r3, [r3, #8]
 800bbdc:	4a3a      	ldr	r2, [pc, #232]	@ (800bcc8 <tcp_input+0x28c>)
 800bbde:	6814      	ldr	r4, [r2, #0]
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	f7fc fd17 	bl	8008614 <lwip_htonl>
 800bbe6:	4603      	mov	r3, r0
 800bbe8:	60a3      	str	r3, [r4, #8]
 800bbea:	68a3      	ldr	r3, [r4, #8]
 800bbec:	4a3f      	ldr	r2, [pc, #252]	@ (800bcec <tcp_input+0x2b0>)
 800bbee:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800bbf0:	4b35      	ldr	r3, [pc, #212]	@ (800bcc8 <tcp_input+0x28c>)
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	89db      	ldrh	r3, [r3, #14]
 800bbf6:	b29b      	uxth	r3, r3
 800bbf8:	4a33      	ldr	r2, [pc, #204]	@ (800bcc8 <tcp_input+0x28c>)
 800bbfa:	6814      	ldr	r4, [r2, #0]
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	f7fc fcf3 	bl	80085e8 <lwip_htons>
 800bc02:	4603      	mov	r3, r0
 800bc04:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800bc06:	4b30      	ldr	r3, [pc, #192]	@ (800bcc8 <tcp_input+0x28c>)
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	899b      	ldrh	r3, [r3, #12]
 800bc0c:	b29b      	uxth	r3, r3
 800bc0e:	4618      	mov	r0, r3
 800bc10:	f7fc fcea 	bl	80085e8 <lwip_htons>
 800bc14:	4603      	mov	r3, r0
 800bc16:	b2db      	uxtb	r3, r3
 800bc18:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bc1c:	b2da      	uxtb	r2, r3
 800bc1e:	4b34      	ldr	r3, [pc, #208]	@ (800bcf0 <tcp_input+0x2b4>)
 800bc20:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	891a      	ldrh	r2, [r3, #8]
 800bc26:	4b33      	ldr	r3, [pc, #204]	@ (800bcf4 <tcp_input+0x2b8>)
 800bc28:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800bc2a:	4b31      	ldr	r3, [pc, #196]	@ (800bcf0 <tcp_input+0x2b4>)
 800bc2c:	781b      	ldrb	r3, [r3, #0]
 800bc2e:	f003 0303 	and.w	r3, r3, #3
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d00c      	beq.n	800bc50 <tcp_input+0x214>
    tcplen++;
 800bc36:	4b2f      	ldr	r3, [pc, #188]	@ (800bcf4 <tcp_input+0x2b8>)
 800bc38:	881b      	ldrh	r3, [r3, #0]
 800bc3a:	3301      	adds	r3, #1
 800bc3c:	b29a      	uxth	r2, r3
 800bc3e:	4b2d      	ldr	r3, [pc, #180]	@ (800bcf4 <tcp_input+0x2b8>)
 800bc40:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	891a      	ldrh	r2, [r3, #8]
 800bc46:	4b2b      	ldr	r3, [pc, #172]	@ (800bcf4 <tcp_input+0x2b8>)
 800bc48:	881b      	ldrh	r3, [r3, #0]
 800bc4a:	429a      	cmp	r2, r3
 800bc4c:	f200 82e6 	bhi.w	800c21c <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800bc50:	2300      	movs	r3, #0
 800bc52:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bc54:	4b28      	ldr	r3, [pc, #160]	@ (800bcf8 <tcp_input+0x2bc>)
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	61fb      	str	r3, [r7, #28]
 800bc5a:	e09d      	b.n	800bd98 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800bc5c:	69fb      	ldr	r3, [r7, #28]
 800bc5e:	7d1b      	ldrb	r3, [r3, #20]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d105      	bne.n	800bc70 <tcp_input+0x234>
 800bc64:	4b15      	ldr	r3, [pc, #84]	@ (800bcbc <tcp_input+0x280>)
 800bc66:	22fb      	movs	r2, #251	@ 0xfb
 800bc68:	4924      	ldr	r1, [pc, #144]	@ (800bcfc <tcp_input+0x2c0>)
 800bc6a:	4816      	ldr	r0, [pc, #88]	@ (800bcc4 <tcp_input+0x288>)
 800bc6c:	f007 f80a 	bl	8012c84 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800bc70:	69fb      	ldr	r3, [r7, #28]
 800bc72:	7d1b      	ldrb	r3, [r3, #20]
 800bc74:	2b0a      	cmp	r3, #10
 800bc76:	d105      	bne.n	800bc84 <tcp_input+0x248>
 800bc78:	4b10      	ldr	r3, [pc, #64]	@ (800bcbc <tcp_input+0x280>)
 800bc7a:	22fc      	movs	r2, #252	@ 0xfc
 800bc7c:	4920      	ldr	r1, [pc, #128]	@ (800bd00 <tcp_input+0x2c4>)
 800bc7e:	4811      	ldr	r0, [pc, #68]	@ (800bcc4 <tcp_input+0x288>)
 800bc80:	f007 f800 	bl	8012c84 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800bc84:	69fb      	ldr	r3, [r7, #28]
 800bc86:	7d1b      	ldrb	r3, [r3, #20]
 800bc88:	2b01      	cmp	r3, #1
 800bc8a:	d105      	bne.n	800bc98 <tcp_input+0x25c>
 800bc8c:	4b0b      	ldr	r3, [pc, #44]	@ (800bcbc <tcp_input+0x280>)
 800bc8e:	22fd      	movs	r2, #253	@ 0xfd
 800bc90:	491c      	ldr	r1, [pc, #112]	@ (800bd04 <tcp_input+0x2c8>)
 800bc92:	480c      	ldr	r0, [pc, #48]	@ (800bcc4 <tcp_input+0x288>)
 800bc94:	f006 fff6 	bl	8012c84 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800bc98:	69fb      	ldr	r3, [r7, #28]
 800bc9a:	7a1b      	ldrb	r3, [r3, #8]
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d033      	beq.n	800bd08 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800bca0:	69fb      	ldr	r3, [r7, #28]
 800bca2:	7a1a      	ldrb	r2, [r3, #8]
 800bca4:	4b09      	ldr	r3, [pc, #36]	@ (800bccc <tcp_input+0x290>)
 800bca6:	685b      	ldr	r3, [r3, #4]
 800bca8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bcac:	3301      	adds	r3, #1
 800bcae:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800bcb0:	429a      	cmp	r2, r3
 800bcb2:	d029      	beq.n	800bd08 <tcp_input+0x2cc>
      prev = pcb;
 800bcb4:	69fb      	ldr	r3, [r7, #28]
 800bcb6:	61bb      	str	r3, [r7, #24]
      continue;
 800bcb8:	e06b      	b.n	800bd92 <tcp_input+0x356>
 800bcba:	bf00      	nop
 800bcbc:	0801509c 	.word	0x0801509c
 800bcc0:	080150d0 	.word	0x080150d0
 800bcc4:	080150e8 	.word	0x080150e8
 800bcc8:	20008934 	.word	0x20008934
 800bccc:	200055dc 	.word	0x200055dc
 800bcd0:	20008938 	.word	0x20008938
 800bcd4:	2000893c 	.word	0x2000893c
 800bcd8:	2000893a 	.word	0x2000893a
 800bcdc:	08015110 	.word	0x08015110
 800bce0:	08015120 	.word	0x08015120
 800bce4:	0801512c 	.word	0x0801512c
 800bce8:	20008944 	.word	0x20008944
 800bcec:	20008948 	.word	0x20008948
 800bcf0:	20008950 	.word	0x20008950
 800bcf4:	2000894e 	.word	0x2000894e
 800bcf8:	20008918 	.word	0x20008918
 800bcfc:	0801514c 	.word	0x0801514c
 800bd00:	08015174 	.word	0x08015174
 800bd04:	080151a0 	.word	0x080151a0
    }

    if (pcb->remote_port == tcphdr->src &&
 800bd08:	69fb      	ldr	r3, [r7, #28]
 800bd0a:	8b1a      	ldrh	r2, [r3, #24]
 800bd0c:	4b72      	ldr	r3, [pc, #456]	@ (800bed8 <tcp_input+0x49c>)
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	881b      	ldrh	r3, [r3, #0]
 800bd12:	b29b      	uxth	r3, r3
 800bd14:	429a      	cmp	r2, r3
 800bd16:	d13a      	bne.n	800bd8e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800bd18:	69fb      	ldr	r3, [r7, #28]
 800bd1a:	8ada      	ldrh	r2, [r3, #22]
 800bd1c:	4b6e      	ldr	r3, [pc, #440]	@ (800bed8 <tcp_input+0x49c>)
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	885b      	ldrh	r3, [r3, #2]
 800bd22:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800bd24:	429a      	cmp	r2, r3
 800bd26:	d132      	bne.n	800bd8e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800bd28:	69fb      	ldr	r3, [r7, #28]
 800bd2a:	685a      	ldr	r2, [r3, #4]
 800bd2c:	4b6b      	ldr	r3, [pc, #428]	@ (800bedc <tcp_input+0x4a0>)
 800bd2e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800bd30:	429a      	cmp	r2, r3
 800bd32:	d12c      	bne.n	800bd8e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800bd34:	69fb      	ldr	r3, [r7, #28]
 800bd36:	681a      	ldr	r2, [r3, #0]
 800bd38:	4b68      	ldr	r3, [pc, #416]	@ (800bedc <tcp_input+0x4a0>)
 800bd3a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800bd3c:	429a      	cmp	r2, r3
 800bd3e:	d126      	bne.n	800bd8e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800bd40:	69fb      	ldr	r3, [r7, #28]
 800bd42:	68db      	ldr	r3, [r3, #12]
 800bd44:	69fa      	ldr	r2, [r7, #28]
 800bd46:	429a      	cmp	r2, r3
 800bd48:	d106      	bne.n	800bd58 <tcp_input+0x31c>
 800bd4a:	4b65      	ldr	r3, [pc, #404]	@ (800bee0 <tcp_input+0x4a4>)
 800bd4c:	f240 120d 	movw	r2, #269	@ 0x10d
 800bd50:	4964      	ldr	r1, [pc, #400]	@ (800bee4 <tcp_input+0x4a8>)
 800bd52:	4865      	ldr	r0, [pc, #404]	@ (800bee8 <tcp_input+0x4ac>)
 800bd54:	f006 ff96 	bl	8012c84 <iprintf>
      if (prev != NULL) {
 800bd58:	69bb      	ldr	r3, [r7, #24]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d00a      	beq.n	800bd74 <tcp_input+0x338>
        prev->next = pcb->next;
 800bd5e:	69fb      	ldr	r3, [r7, #28]
 800bd60:	68da      	ldr	r2, [r3, #12]
 800bd62:	69bb      	ldr	r3, [r7, #24]
 800bd64:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800bd66:	4b61      	ldr	r3, [pc, #388]	@ (800beec <tcp_input+0x4b0>)
 800bd68:	681a      	ldr	r2, [r3, #0]
 800bd6a:	69fb      	ldr	r3, [r7, #28]
 800bd6c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800bd6e:	4a5f      	ldr	r2, [pc, #380]	@ (800beec <tcp_input+0x4b0>)
 800bd70:	69fb      	ldr	r3, [r7, #28]
 800bd72:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800bd74:	69fb      	ldr	r3, [r7, #28]
 800bd76:	68db      	ldr	r3, [r3, #12]
 800bd78:	69fa      	ldr	r2, [r7, #28]
 800bd7a:	429a      	cmp	r2, r3
 800bd7c:	d111      	bne.n	800bda2 <tcp_input+0x366>
 800bd7e:	4b58      	ldr	r3, [pc, #352]	@ (800bee0 <tcp_input+0x4a4>)
 800bd80:	f240 1215 	movw	r2, #277	@ 0x115
 800bd84:	495a      	ldr	r1, [pc, #360]	@ (800bef0 <tcp_input+0x4b4>)
 800bd86:	4858      	ldr	r0, [pc, #352]	@ (800bee8 <tcp_input+0x4ac>)
 800bd88:	f006 ff7c 	bl	8012c84 <iprintf>
      break;
 800bd8c:	e009      	b.n	800bda2 <tcp_input+0x366>
    }
    prev = pcb;
 800bd8e:	69fb      	ldr	r3, [r7, #28]
 800bd90:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bd92:	69fb      	ldr	r3, [r7, #28]
 800bd94:	68db      	ldr	r3, [r3, #12]
 800bd96:	61fb      	str	r3, [r7, #28]
 800bd98:	69fb      	ldr	r3, [r7, #28]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	f47f af5e 	bne.w	800bc5c <tcp_input+0x220>
 800bda0:	e000      	b.n	800bda4 <tcp_input+0x368>
      break;
 800bda2:	bf00      	nop
  }

  if (pcb == NULL) {
 800bda4:	69fb      	ldr	r3, [r7, #28]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	f040 80aa 	bne.w	800bf00 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800bdac:	4b51      	ldr	r3, [pc, #324]	@ (800bef4 <tcp_input+0x4b8>)
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	61fb      	str	r3, [r7, #28]
 800bdb2:	e03f      	b.n	800be34 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800bdb4:	69fb      	ldr	r3, [r7, #28]
 800bdb6:	7d1b      	ldrb	r3, [r3, #20]
 800bdb8:	2b0a      	cmp	r3, #10
 800bdba:	d006      	beq.n	800bdca <tcp_input+0x38e>
 800bdbc:	4b48      	ldr	r3, [pc, #288]	@ (800bee0 <tcp_input+0x4a4>)
 800bdbe:	f240 121f 	movw	r2, #287	@ 0x11f
 800bdc2:	494d      	ldr	r1, [pc, #308]	@ (800bef8 <tcp_input+0x4bc>)
 800bdc4:	4848      	ldr	r0, [pc, #288]	@ (800bee8 <tcp_input+0x4ac>)
 800bdc6:	f006 ff5d 	bl	8012c84 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800bdca:	69fb      	ldr	r3, [r7, #28]
 800bdcc:	7a1b      	ldrb	r3, [r3, #8]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d009      	beq.n	800bde6 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800bdd2:	69fb      	ldr	r3, [r7, #28]
 800bdd4:	7a1a      	ldrb	r2, [r3, #8]
 800bdd6:	4b41      	ldr	r3, [pc, #260]	@ (800bedc <tcp_input+0x4a0>)
 800bdd8:	685b      	ldr	r3, [r3, #4]
 800bdda:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800bdde:	3301      	adds	r3, #1
 800bde0:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800bde2:	429a      	cmp	r2, r3
 800bde4:	d122      	bne.n	800be2c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800bde6:	69fb      	ldr	r3, [r7, #28]
 800bde8:	8b1a      	ldrh	r2, [r3, #24]
 800bdea:	4b3b      	ldr	r3, [pc, #236]	@ (800bed8 <tcp_input+0x49c>)
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	881b      	ldrh	r3, [r3, #0]
 800bdf0:	b29b      	uxth	r3, r3
 800bdf2:	429a      	cmp	r2, r3
 800bdf4:	d11b      	bne.n	800be2e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800bdf6:	69fb      	ldr	r3, [r7, #28]
 800bdf8:	8ada      	ldrh	r2, [r3, #22]
 800bdfa:	4b37      	ldr	r3, [pc, #220]	@ (800bed8 <tcp_input+0x49c>)
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	885b      	ldrh	r3, [r3, #2]
 800be00:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800be02:	429a      	cmp	r2, r3
 800be04:	d113      	bne.n	800be2e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800be06:	69fb      	ldr	r3, [r7, #28]
 800be08:	685a      	ldr	r2, [r3, #4]
 800be0a:	4b34      	ldr	r3, [pc, #208]	@ (800bedc <tcp_input+0x4a0>)
 800be0c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800be0e:	429a      	cmp	r2, r3
 800be10:	d10d      	bne.n	800be2e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800be12:	69fb      	ldr	r3, [r7, #28]
 800be14:	681a      	ldr	r2, [r3, #0]
 800be16:	4b31      	ldr	r3, [pc, #196]	@ (800bedc <tcp_input+0x4a0>)
 800be18:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800be1a:	429a      	cmp	r2, r3
 800be1c:	d107      	bne.n	800be2e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800be1e:	69f8      	ldr	r0, [r7, #28]
 800be20:	f000 fb56 	bl	800c4d0 <tcp_timewait_input>
        }
        pbuf_free(p);
 800be24:	6878      	ldr	r0, [r7, #4]
 800be26:	f7fd ff3d 	bl	8009ca4 <pbuf_free>
        return;
 800be2a:	e1fd      	b.n	800c228 <tcp_input+0x7ec>
        continue;
 800be2c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800be2e:	69fb      	ldr	r3, [r7, #28]
 800be30:	68db      	ldr	r3, [r3, #12]
 800be32:	61fb      	str	r3, [r7, #28]
 800be34:	69fb      	ldr	r3, [r7, #28]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d1bc      	bne.n	800bdb4 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800be3a:	2300      	movs	r3, #0
 800be3c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800be3e:	4b2f      	ldr	r3, [pc, #188]	@ (800befc <tcp_input+0x4c0>)
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	617b      	str	r3, [r7, #20]
 800be44:	e02a      	b.n	800be9c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800be46:	697b      	ldr	r3, [r7, #20]
 800be48:	7a1b      	ldrb	r3, [r3, #8]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d00c      	beq.n	800be68 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800be4e:	697b      	ldr	r3, [r7, #20]
 800be50:	7a1a      	ldrb	r2, [r3, #8]
 800be52:	4b22      	ldr	r3, [pc, #136]	@ (800bedc <tcp_input+0x4a0>)
 800be54:	685b      	ldr	r3, [r3, #4]
 800be56:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800be5a:	3301      	adds	r3, #1
 800be5c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800be5e:	429a      	cmp	r2, r3
 800be60:	d002      	beq.n	800be68 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800be62:	697b      	ldr	r3, [r7, #20]
 800be64:	61bb      	str	r3, [r7, #24]
        continue;
 800be66:	e016      	b.n	800be96 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800be68:	697b      	ldr	r3, [r7, #20]
 800be6a:	8ada      	ldrh	r2, [r3, #22]
 800be6c:	4b1a      	ldr	r3, [pc, #104]	@ (800bed8 <tcp_input+0x49c>)
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	885b      	ldrh	r3, [r3, #2]
 800be72:	b29b      	uxth	r3, r3
 800be74:	429a      	cmp	r2, r3
 800be76:	d10c      	bne.n	800be92 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800be78:	697b      	ldr	r3, [r7, #20]
 800be7a:	681a      	ldr	r2, [r3, #0]
 800be7c:	4b17      	ldr	r3, [pc, #92]	@ (800bedc <tcp_input+0x4a0>)
 800be7e:	695b      	ldr	r3, [r3, #20]
 800be80:	429a      	cmp	r2, r3
 800be82:	d00f      	beq.n	800bea4 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800be84:	697b      	ldr	r3, [r7, #20]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d00d      	beq.n	800bea6 <tcp_input+0x46a>
 800be8a:	697b      	ldr	r3, [r7, #20]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d009      	beq.n	800bea6 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800be92:	697b      	ldr	r3, [r7, #20]
 800be94:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800be96:	697b      	ldr	r3, [r7, #20]
 800be98:	68db      	ldr	r3, [r3, #12]
 800be9a:	617b      	str	r3, [r7, #20]
 800be9c:	697b      	ldr	r3, [r7, #20]
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d1d1      	bne.n	800be46 <tcp_input+0x40a>
 800bea2:	e000      	b.n	800bea6 <tcp_input+0x46a>
            break;
 800bea4:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800bea6:	697b      	ldr	r3, [r7, #20]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d029      	beq.n	800bf00 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800beac:	69bb      	ldr	r3, [r7, #24]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d00a      	beq.n	800bec8 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800beb2:	697b      	ldr	r3, [r7, #20]
 800beb4:	68da      	ldr	r2, [r3, #12]
 800beb6:	69bb      	ldr	r3, [r7, #24]
 800beb8:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800beba:	4b10      	ldr	r3, [pc, #64]	@ (800befc <tcp_input+0x4c0>)
 800bebc:	681a      	ldr	r2, [r3, #0]
 800bebe:	697b      	ldr	r3, [r7, #20]
 800bec0:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800bec2:	4a0e      	ldr	r2, [pc, #56]	@ (800befc <tcp_input+0x4c0>)
 800bec4:	697b      	ldr	r3, [r7, #20]
 800bec6:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800bec8:	6978      	ldr	r0, [r7, #20]
 800beca:	f000 fa03 	bl	800c2d4 <tcp_listen_input>
      }
      pbuf_free(p);
 800bece:	6878      	ldr	r0, [r7, #4]
 800bed0:	f7fd fee8 	bl	8009ca4 <pbuf_free>
      return;
 800bed4:	e1a8      	b.n	800c228 <tcp_input+0x7ec>
 800bed6:	bf00      	nop
 800bed8:	20008934 	.word	0x20008934
 800bedc:	200055dc 	.word	0x200055dc
 800bee0:	0801509c 	.word	0x0801509c
 800bee4:	080151c8 	.word	0x080151c8
 800bee8:	080150e8 	.word	0x080150e8
 800beec:	20008918 	.word	0x20008918
 800bef0:	080151f4 	.word	0x080151f4
 800bef4:	2000891c 	.word	0x2000891c
 800bef8:	08015220 	.word	0x08015220
 800befc:	20008914 	.word	0x20008914
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800bf00:	69fb      	ldr	r3, [r7, #28]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	f000 8158 	beq.w	800c1b8 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800bf08:	4b95      	ldr	r3, [pc, #596]	@ (800c160 <tcp_input+0x724>)
 800bf0a:	2200      	movs	r2, #0
 800bf0c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	891a      	ldrh	r2, [r3, #8]
 800bf12:	4b93      	ldr	r3, [pc, #588]	@ (800c160 <tcp_input+0x724>)
 800bf14:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800bf16:	4a92      	ldr	r2, [pc, #584]	@ (800c160 <tcp_input+0x724>)
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800bf1c:	4b91      	ldr	r3, [pc, #580]	@ (800c164 <tcp_input+0x728>)
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	4a8f      	ldr	r2, [pc, #572]	@ (800c160 <tcp_input+0x724>)
 800bf22:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800bf24:	4b90      	ldr	r3, [pc, #576]	@ (800c168 <tcp_input+0x72c>)
 800bf26:	2200      	movs	r2, #0
 800bf28:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800bf2a:	4b90      	ldr	r3, [pc, #576]	@ (800c16c <tcp_input+0x730>)
 800bf2c:	2200      	movs	r2, #0
 800bf2e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800bf30:	4b8f      	ldr	r3, [pc, #572]	@ (800c170 <tcp_input+0x734>)
 800bf32:	2200      	movs	r2, #0
 800bf34:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800bf36:	4b8f      	ldr	r3, [pc, #572]	@ (800c174 <tcp_input+0x738>)
 800bf38:	781b      	ldrb	r3, [r3, #0]
 800bf3a:	f003 0308 	and.w	r3, r3, #8
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d006      	beq.n	800bf50 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	7b5b      	ldrb	r3, [r3, #13]
 800bf46:	f043 0301 	orr.w	r3, r3, #1
 800bf4a:	b2da      	uxtb	r2, r3
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800bf50:	69fb      	ldr	r3, [r7, #28]
 800bf52:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d017      	beq.n	800bf88 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800bf58:	69f8      	ldr	r0, [r7, #28]
 800bf5a:	f7ff f929 	bl	800b1b0 <tcp_process_refused_data>
 800bf5e:	4603      	mov	r3, r0
 800bf60:	f113 0f0d 	cmn.w	r3, #13
 800bf64:	d007      	beq.n	800bf76 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800bf66:	69fb      	ldr	r3, [r7, #28]
 800bf68:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d00c      	beq.n	800bf88 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800bf6e:	4b82      	ldr	r3, [pc, #520]	@ (800c178 <tcp_input+0x73c>)
 800bf70:	881b      	ldrh	r3, [r3, #0]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d008      	beq.n	800bf88 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800bf76:	69fb      	ldr	r3, [r7, #28]
 800bf78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	f040 80e3 	bne.w	800c146 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800bf80:	69f8      	ldr	r0, [r7, #28]
 800bf82:	f003 f9a7 	bl	800f2d4 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800bf86:	e0de      	b.n	800c146 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800bf88:	4a7c      	ldr	r2, [pc, #496]	@ (800c17c <tcp_input+0x740>)
 800bf8a:	69fb      	ldr	r3, [r7, #28]
 800bf8c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800bf8e:	69f8      	ldr	r0, [r7, #28]
 800bf90:	f000 fb18 	bl	800c5c4 <tcp_process>
 800bf94:	4603      	mov	r3, r0
 800bf96:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800bf98:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bf9c:	f113 0f0d 	cmn.w	r3, #13
 800bfa0:	f000 80d3 	beq.w	800c14a <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800bfa4:	4b71      	ldr	r3, [pc, #452]	@ (800c16c <tcp_input+0x730>)
 800bfa6:	781b      	ldrb	r3, [r3, #0]
 800bfa8:	f003 0308 	and.w	r3, r3, #8
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d015      	beq.n	800bfdc <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800bfb0:	69fb      	ldr	r3, [r7, #28]
 800bfb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d008      	beq.n	800bfcc <tcp_input+0x590>
 800bfba:	69fb      	ldr	r3, [r7, #28]
 800bfbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bfc0:	69fa      	ldr	r2, [r7, #28]
 800bfc2:	6912      	ldr	r2, [r2, #16]
 800bfc4:	f06f 010d 	mvn.w	r1, #13
 800bfc8:	4610      	mov	r0, r2
 800bfca:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800bfcc:	69f9      	ldr	r1, [r7, #28]
 800bfce:	486c      	ldr	r0, [pc, #432]	@ (800c180 <tcp_input+0x744>)
 800bfd0:	f7ff fbbc 	bl	800b74c <tcp_pcb_remove>
        tcp_free(pcb);
 800bfd4:	69f8      	ldr	r0, [r7, #28]
 800bfd6:	f7fe f9a7 	bl	800a328 <tcp_free>
 800bfda:	e0da      	b.n	800c192 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800bfdc:	2300      	movs	r3, #0
 800bfde:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800bfe0:	4b63      	ldr	r3, [pc, #396]	@ (800c170 <tcp_input+0x734>)
 800bfe2:	881b      	ldrh	r3, [r3, #0]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d01d      	beq.n	800c024 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800bfe8:	4b61      	ldr	r3, [pc, #388]	@ (800c170 <tcp_input+0x734>)
 800bfea:	881b      	ldrh	r3, [r3, #0]
 800bfec:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800bfee:	69fb      	ldr	r3, [r7, #28]
 800bff0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d00a      	beq.n	800c00e <tcp_input+0x5d2>
 800bff8:	69fb      	ldr	r3, [r7, #28]
 800bffa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bffe:	69fa      	ldr	r2, [r7, #28]
 800c000:	6910      	ldr	r0, [r2, #16]
 800c002:	89fa      	ldrh	r2, [r7, #14]
 800c004:	69f9      	ldr	r1, [r7, #28]
 800c006:	4798      	blx	r3
 800c008:	4603      	mov	r3, r0
 800c00a:	74fb      	strb	r3, [r7, #19]
 800c00c:	e001      	b.n	800c012 <tcp_input+0x5d6>
 800c00e:	2300      	movs	r3, #0
 800c010:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800c012:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c016:	f113 0f0d 	cmn.w	r3, #13
 800c01a:	f000 8098 	beq.w	800c14e <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800c01e:	4b54      	ldr	r3, [pc, #336]	@ (800c170 <tcp_input+0x734>)
 800c020:	2200      	movs	r2, #0
 800c022:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800c024:	69f8      	ldr	r0, [r7, #28]
 800c026:	f000 f915 	bl	800c254 <tcp_input_delayed_close>
 800c02a:	4603      	mov	r3, r0
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	f040 8090 	bne.w	800c152 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800c032:	4b4d      	ldr	r3, [pc, #308]	@ (800c168 <tcp_input+0x72c>)
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	2b00      	cmp	r3, #0
 800c038:	d041      	beq.n	800c0be <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800c03a:	69fb      	ldr	r3, [r7, #28]
 800c03c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d006      	beq.n	800c050 <tcp_input+0x614>
 800c042:	4b50      	ldr	r3, [pc, #320]	@ (800c184 <tcp_input+0x748>)
 800c044:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800c048:	494f      	ldr	r1, [pc, #316]	@ (800c188 <tcp_input+0x74c>)
 800c04a:	4850      	ldr	r0, [pc, #320]	@ (800c18c <tcp_input+0x750>)
 800c04c:	f006 fe1a 	bl	8012c84 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800c050:	69fb      	ldr	r3, [r7, #28]
 800c052:	8b5b      	ldrh	r3, [r3, #26]
 800c054:	f003 0310 	and.w	r3, r3, #16
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d008      	beq.n	800c06e <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800c05c:	4b42      	ldr	r3, [pc, #264]	@ (800c168 <tcp_input+0x72c>)
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	4618      	mov	r0, r3
 800c062:	f7fd fe1f 	bl	8009ca4 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800c066:	69f8      	ldr	r0, [r7, #28]
 800c068:	f7fe fc46 	bl	800a8f8 <tcp_abort>
            goto aborted;
 800c06c:	e091      	b.n	800c192 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800c06e:	69fb      	ldr	r3, [r7, #28]
 800c070:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c074:	2b00      	cmp	r3, #0
 800c076:	d00c      	beq.n	800c092 <tcp_input+0x656>
 800c078:	69fb      	ldr	r3, [r7, #28]
 800c07a:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800c07e:	69fb      	ldr	r3, [r7, #28]
 800c080:	6918      	ldr	r0, [r3, #16]
 800c082:	4b39      	ldr	r3, [pc, #228]	@ (800c168 <tcp_input+0x72c>)
 800c084:	681a      	ldr	r2, [r3, #0]
 800c086:	2300      	movs	r3, #0
 800c088:	69f9      	ldr	r1, [r7, #28]
 800c08a:	47a0      	blx	r4
 800c08c:	4603      	mov	r3, r0
 800c08e:	74fb      	strb	r3, [r7, #19]
 800c090:	e008      	b.n	800c0a4 <tcp_input+0x668>
 800c092:	4b35      	ldr	r3, [pc, #212]	@ (800c168 <tcp_input+0x72c>)
 800c094:	681a      	ldr	r2, [r3, #0]
 800c096:	2300      	movs	r3, #0
 800c098:	69f9      	ldr	r1, [r7, #28]
 800c09a:	2000      	movs	r0, #0
 800c09c:	f7ff f95e 	bl	800b35c <tcp_recv_null>
 800c0a0:	4603      	mov	r3, r0
 800c0a2:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800c0a4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c0a8:	f113 0f0d 	cmn.w	r3, #13
 800c0ac:	d053      	beq.n	800c156 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800c0ae:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d003      	beq.n	800c0be <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800c0b6:	4b2c      	ldr	r3, [pc, #176]	@ (800c168 <tcp_input+0x72c>)
 800c0b8:	681a      	ldr	r2, [r3, #0]
 800c0ba:	69fb      	ldr	r3, [r7, #28]
 800c0bc:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800c0be:	4b2b      	ldr	r3, [pc, #172]	@ (800c16c <tcp_input+0x730>)
 800c0c0:	781b      	ldrb	r3, [r3, #0]
 800c0c2:	f003 0320 	and.w	r3, r3, #32
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d030      	beq.n	800c12c <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800c0ca:	69fb      	ldr	r3, [r7, #28]
 800c0cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d009      	beq.n	800c0e6 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800c0d2:	69fb      	ldr	r3, [r7, #28]
 800c0d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c0d6:	7b5a      	ldrb	r2, [r3, #13]
 800c0d8:	69fb      	ldr	r3, [r7, #28]
 800c0da:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c0dc:	f042 0220 	orr.w	r2, r2, #32
 800c0e0:	b2d2      	uxtb	r2, r2
 800c0e2:	735a      	strb	r2, [r3, #13]
 800c0e4:	e022      	b.n	800c12c <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800c0e6:	69fb      	ldr	r3, [r7, #28]
 800c0e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c0ea:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800c0ee:	d005      	beq.n	800c0fc <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800c0f0:	69fb      	ldr	r3, [r7, #28]
 800c0f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c0f4:	3301      	adds	r3, #1
 800c0f6:	b29a      	uxth	r2, r3
 800c0f8:	69fb      	ldr	r3, [r7, #28]
 800c0fa:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800c0fc:	69fb      	ldr	r3, [r7, #28]
 800c0fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c102:	2b00      	cmp	r3, #0
 800c104:	d00b      	beq.n	800c11e <tcp_input+0x6e2>
 800c106:	69fb      	ldr	r3, [r7, #28]
 800c108:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800c10c:	69fb      	ldr	r3, [r7, #28]
 800c10e:	6918      	ldr	r0, [r3, #16]
 800c110:	2300      	movs	r3, #0
 800c112:	2200      	movs	r2, #0
 800c114:	69f9      	ldr	r1, [r7, #28]
 800c116:	47a0      	blx	r4
 800c118:	4603      	mov	r3, r0
 800c11a:	74fb      	strb	r3, [r7, #19]
 800c11c:	e001      	b.n	800c122 <tcp_input+0x6e6>
 800c11e:	2300      	movs	r3, #0
 800c120:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800c122:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c126:	f113 0f0d 	cmn.w	r3, #13
 800c12a:	d016      	beq.n	800c15a <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800c12c:	4b13      	ldr	r3, [pc, #76]	@ (800c17c <tcp_input+0x740>)
 800c12e:	2200      	movs	r2, #0
 800c130:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800c132:	69f8      	ldr	r0, [r7, #28]
 800c134:	f000 f88e 	bl	800c254 <tcp_input_delayed_close>
 800c138:	4603      	mov	r3, r0
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d128      	bne.n	800c190 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800c13e:	69f8      	ldr	r0, [r7, #28]
 800c140:	f002 fac2 	bl	800e6c8 <tcp_output>
 800c144:	e025      	b.n	800c192 <tcp_input+0x756>
        goto aborted;
 800c146:	bf00      	nop
 800c148:	e023      	b.n	800c192 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800c14a:	bf00      	nop
 800c14c:	e021      	b.n	800c192 <tcp_input+0x756>
              goto aborted;
 800c14e:	bf00      	nop
 800c150:	e01f      	b.n	800c192 <tcp_input+0x756>
          goto aborted;
 800c152:	bf00      	nop
 800c154:	e01d      	b.n	800c192 <tcp_input+0x756>
            goto aborted;
 800c156:	bf00      	nop
 800c158:	e01b      	b.n	800c192 <tcp_input+0x756>
              goto aborted;
 800c15a:	bf00      	nop
 800c15c:	e019      	b.n	800c192 <tcp_input+0x756>
 800c15e:	bf00      	nop
 800c160:	20008924 	.word	0x20008924
 800c164:	20008934 	.word	0x20008934
 800c168:	20008954 	.word	0x20008954
 800c16c:	20008951 	.word	0x20008951
 800c170:	2000894c 	.word	0x2000894c
 800c174:	20008950 	.word	0x20008950
 800c178:	2000894e 	.word	0x2000894e
 800c17c:	20008958 	.word	0x20008958
 800c180:	20008918 	.word	0x20008918
 800c184:	0801509c 	.word	0x0801509c
 800c188:	08015250 	.word	0x08015250
 800c18c:	080150e8 	.word	0x080150e8
          goto aborted;
 800c190:	bf00      	nop
    tcp_input_pcb = NULL;
 800c192:	4b27      	ldr	r3, [pc, #156]	@ (800c230 <tcp_input+0x7f4>)
 800c194:	2200      	movs	r2, #0
 800c196:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800c198:	4b26      	ldr	r3, [pc, #152]	@ (800c234 <tcp_input+0x7f8>)
 800c19a:	2200      	movs	r2, #0
 800c19c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800c19e:	4b26      	ldr	r3, [pc, #152]	@ (800c238 <tcp_input+0x7fc>)
 800c1a0:	685b      	ldr	r3, [r3, #4]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d03f      	beq.n	800c226 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800c1a6:	4b24      	ldr	r3, [pc, #144]	@ (800c238 <tcp_input+0x7fc>)
 800c1a8:	685b      	ldr	r3, [r3, #4]
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	f7fd fd7a 	bl	8009ca4 <pbuf_free>
      inseg.p = NULL;
 800c1b0:	4b21      	ldr	r3, [pc, #132]	@ (800c238 <tcp_input+0x7fc>)
 800c1b2:	2200      	movs	r2, #0
 800c1b4:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800c1b6:	e036      	b.n	800c226 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800c1b8:	4b20      	ldr	r3, [pc, #128]	@ (800c23c <tcp_input+0x800>)
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	899b      	ldrh	r3, [r3, #12]
 800c1be:	b29b      	uxth	r3, r3
 800c1c0:	4618      	mov	r0, r3
 800c1c2:	f7fc fa11 	bl	80085e8 <lwip_htons>
 800c1c6:	4603      	mov	r3, r0
 800c1c8:	b2db      	uxtb	r3, r3
 800c1ca:	f003 0304 	and.w	r3, r3, #4
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d118      	bne.n	800c204 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c1d2:	4b1b      	ldr	r3, [pc, #108]	@ (800c240 <tcp_input+0x804>)
 800c1d4:	6819      	ldr	r1, [r3, #0]
 800c1d6:	4b1b      	ldr	r3, [pc, #108]	@ (800c244 <tcp_input+0x808>)
 800c1d8:	881b      	ldrh	r3, [r3, #0]
 800c1da:	461a      	mov	r2, r3
 800c1dc:	4b1a      	ldr	r3, [pc, #104]	@ (800c248 <tcp_input+0x80c>)
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c1e2:	4b16      	ldr	r3, [pc, #88]	@ (800c23c <tcp_input+0x800>)
 800c1e4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c1e6:	885b      	ldrh	r3, [r3, #2]
 800c1e8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c1ea:	4a14      	ldr	r2, [pc, #80]	@ (800c23c <tcp_input+0x800>)
 800c1ec:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c1ee:	8812      	ldrh	r2, [r2, #0]
 800c1f0:	b292      	uxth	r2, r2
 800c1f2:	9202      	str	r2, [sp, #8]
 800c1f4:	9301      	str	r3, [sp, #4]
 800c1f6:	4b15      	ldr	r3, [pc, #84]	@ (800c24c <tcp_input+0x810>)
 800c1f8:	9300      	str	r3, [sp, #0]
 800c1fa:	4b15      	ldr	r3, [pc, #84]	@ (800c250 <tcp_input+0x814>)
 800c1fc:	4602      	mov	r2, r0
 800c1fe:	2000      	movs	r0, #0
 800c200:	f003 f816 	bl	800f230 <tcp_rst>
    pbuf_free(p);
 800c204:	6878      	ldr	r0, [r7, #4]
 800c206:	f7fd fd4d 	bl	8009ca4 <pbuf_free>
  return;
 800c20a:	e00c      	b.n	800c226 <tcp_input+0x7ea>
    goto dropped;
 800c20c:	bf00      	nop
 800c20e:	e006      	b.n	800c21e <tcp_input+0x7e2>
    goto dropped;
 800c210:	bf00      	nop
 800c212:	e004      	b.n	800c21e <tcp_input+0x7e2>
    goto dropped;
 800c214:	bf00      	nop
 800c216:	e002      	b.n	800c21e <tcp_input+0x7e2>
      goto dropped;
 800c218:	bf00      	nop
 800c21a:	e000      	b.n	800c21e <tcp_input+0x7e2>
      goto dropped;
 800c21c:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800c21e:	6878      	ldr	r0, [r7, #4]
 800c220:	f7fd fd40 	bl	8009ca4 <pbuf_free>
 800c224:	e000      	b.n	800c228 <tcp_input+0x7ec>
  return;
 800c226:	bf00      	nop
}
 800c228:	3724      	adds	r7, #36	@ 0x24
 800c22a:	46bd      	mov	sp, r7
 800c22c:	bd90      	pop	{r4, r7, pc}
 800c22e:	bf00      	nop
 800c230:	20008958 	.word	0x20008958
 800c234:	20008954 	.word	0x20008954
 800c238:	20008924 	.word	0x20008924
 800c23c:	20008934 	.word	0x20008934
 800c240:	20008948 	.word	0x20008948
 800c244:	2000894e 	.word	0x2000894e
 800c248:	20008944 	.word	0x20008944
 800c24c:	200055ec 	.word	0x200055ec
 800c250:	200055f0 	.word	0x200055f0

0800c254 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800c254:	b580      	push	{r7, lr}
 800c256:	b082      	sub	sp, #8
 800c258:	af00      	add	r7, sp, #0
 800c25a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d106      	bne.n	800c270 <tcp_input_delayed_close+0x1c>
 800c262:	4b17      	ldr	r3, [pc, #92]	@ (800c2c0 <tcp_input_delayed_close+0x6c>)
 800c264:	f240 225a 	movw	r2, #602	@ 0x25a
 800c268:	4916      	ldr	r1, [pc, #88]	@ (800c2c4 <tcp_input_delayed_close+0x70>)
 800c26a:	4817      	ldr	r0, [pc, #92]	@ (800c2c8 <tcp_input_delayed_close+0x74>)
 800c26c:	f006 fd0a 	bl	8012c84 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800c270:	4b16      	ldr	r3, [pc, #88]	@ (800c2cc <tcp_input_delayed_close+0x78>)
 800c272:	781b      	ldrb	r3, [r3, #0]
 800c274:	f003 0310 	and.w	r3, r3, #16
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d01c      	beq.n	800c2b6 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	8b5b      	ldrh	r3, [r3, #26]
 800c280:	f003 0310 	and.w	r3, r3, #16
 800c284:	2b00      	cmp	r3, #0
 800c286:	d10d      	bne.n	800c2a4 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d008      	beq.n	800c2a4 <tcp_input_delayed_close+0x50>
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c298:	687a      	ldr	r2, [r7, #4]
 800c29a:	6912      	ldr	r2, [r2, #16]
 800c29c:	f06f 010e 	mvn.w	r1, #14
 800c2a0:	4610      	mov	r0, r2
 800c2a2:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800c2a4:	6879      	ldr	r1, [r7, #4]
 800c2a6:	480a      	ldr	r0, [pc, #40]	@ (800c2d0 <tcp_input_delayed_close+0x7c>)
 800c2a8:	f7ff fa50 	bl	800b74c <tcp_pcb_remove>
    tcp_free(pcb);
 800c2ac:	6878      	ldr	r0, [r7, #4]
 800c2ae:	f7fe f83b 	bl	800a328 <tcp_free>
    return 1;
 800c2b2:	2301      	movs	r3, #1
 800c2b4:	e000      	b.n	800c2b8 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800c2b6:	2300      	movs	r3, #0
}
 800c2b8:	4618      	mov	r0, r3
 800c2ba:	3708      	adds	r7, #8
 800c2bc:	46bd      	mov	sp, r7
 800c2be:	bd80      	pop	{r7, pc}
 800c2c0:	0801509c 	.word	0x0801509c
 800c2c4:	0801526c 	.word	0x0801526c
 800c2c8:	080150e8 	.word	0x080150e8
 800c2cc:	20008951 	.word	0x20008951
 800c2d0:	20008918 	.word	0x20008918

0800c2d4 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800c2d4:	b590      	push	{r4, r7, lr}
 800c2d6:	b08b      	sub	sp, #44	@ 0x2c
 800c2d8:	af04      	add	r7, sp, #16
 800c2da:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800c2dc:	4b6f      	ldr	r3, [pc, #444]	@ (800c49c <tcp_listen_input+0x1c8>)
 800c2de:	781b      	ldrb	r3, [r3, #0]
 800c2e0:	f003 0304 	and.w	r3, r3, #4
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	f040 80d2 	bne.w	800c48e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d106      	bne.n	800c2fe <tcp_listen_input+0x2a>
 800c2f0:	4b6b      	ldr	r3, [pc, #428]	@ (800c4a0 <tcp_listen_input+0x1cc>)
 800c2f2:	f240 2281 	movw	r2, #641	@ 0x281
 800c2f6:	496b      	ldr	r1, [pc, #428]	@ (800c4a4 <tcp_listen_input+0x1d0>)
 800c2f8:	486b      	ldr	r0, [pc, #428]	@ (800c4a8 <tcp_listen_input+0x1d4>)
 800c2fa:	f006 fcc3 	bl	8012c84 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800c2fe:	4b67      	ldr	r3, [pc, #412]	@ (800c49c <tcp_listen_input+0x1c8>)
 800c300:	781b      	ldrb	r3, [r3, #0]
 800c302:	f003 0310 	and.w	r3, r3, #16
 800c306:	2b00      	cmp	r3, #0
 800c308:	d019      	beq.n	800c33e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c30a:	4b68      	ldr	r3, [pc, #416]	@ (800c4ac <tcp_listen_input+0x1d8>)
 800c30c:	6819      	ldr	r1, [r3, #0]
 800c30e:	4b68      	ldr	r3, [pc, #416]	@ (800c4b0 <tcp_listen_input+0x1dc>)
 800c310:	881b      	ldrh	r3, [r3, #0]
 800c312:	461a      	mov	r2, r3
 800c314:	4b67      	ldr	r3, [pc, #412]	@ (800c4b4 <tcp_listen_input+0x1e0>)
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c31a:	4b67      	ldr	r3, [pc, #412]	@ (800c4b8 <tcp_listen_input+0x1e4>)
 800c31c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c31e:	885b      	ldrh	r3, [r3, #2]
 800c320:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c322:	4a65      	ldr	r2, [pc, #404]	@ (800c4b8 <tcp_listen_input+0x1e4>)
 800c324:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c326:	8812      	ldrh	r2, [r2, #0]
 800c328:	b292      	uxth	r2, r2
 800c32a:	9202      	str	r2, [sp, #8]
 800c32c:	9301      	str	r3, [sp, #4]
 800c32e:	4b63      	ldr	r3, [pc, #396]	@ (800c4bc <tcp_listen_input+0x1e8>)
 800c330:	9300      	str	r3, [sp, #0]
 800c332:	4b63      	ldr	r3, [pc, #396]	@ (800c4c0 <tcp_listen_input+0x1ec>)
 800c334:	4602      	mov	r2, r0
 800c336:	6878      	ldr	r0, [r7, #4]
 800c338:	f002 ff7a 	bl	800f230 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800c33c:	e0a9      	b.n	800c492 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800c33e:	4b57      	ldr	r3, [pc, #348]	@ (800c49c <tcp_listen_input+0x1c8>)
 800c340:	781b      	ldrb	r3, [r3, #0]
 800c342:	f003 0302 	and.w	r3, r3, #2
 800c346:	2b00      	cmp	r3, #0
 800c348:	f000 80a3 	beq.w	800c492 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	7d5b      	ldrb	r3, [r3, #21]
 800c350:	4618      	mov	r0, r3
 800c352:	f7ff f927 	bl	800b5a4 <tcp_alloc>
 800c356:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800c358:	697b      	ldr	r3, [r7, #20]
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d111      	bne.n	800c382 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	699b      	ldr	r3, [r3, #24]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d00a      	beq.n	800c37c <tcp_listen_input+0xa8>
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	699b      	ldr	r3, [r3, #24]
 800c36a:	687a      	ldr	r2, [r7, #4]
 800c36c:	6910      	ldr	r0, [r2, #16]
 800c36e:	f04f 32ff 	mov.w	r2, #4294967295
 800c372:	2100      	movs	r1, #0
 800c374:	4798      	blx	r3
 800c376:	4603      	mov	r3, r0
 800c378:	73bb      	strb	r3, [r7, #14]
      return;
 800c37a:	e08b      	b.n	800c494 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800c37c:	23f0      	movs	r3, #240	@ 0xf0
 800c37e:	73bb      	strb	r3, [r7, #14]
      return;
 800c380:	e088      	b.n	800c494 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800c382:	4b50      	ldr	r3, [pc, #320]	@ (800c4c4 <tcp_listen_input+0x1f0>)
 800c384:	695a      	ldr	r2, [r3, #20]
 800c386:	697b      	ldr	r3, [r7, #20]
 800c388:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800c38a:	4b4e      	ldr	r3, [pc, #312]	@ (800c4c4 <tcp_listen_input+0x1f0>)
 800c38c:	691a      	ldr	r2, [r3, #16]
 800c38e:	697b      	ldr	r3, [r7, #20]
 800c390:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	8ada      	ldrh	r2, [r3, #22]
 800c396:	697b      	ldr	r3, [r7, #20]
 800c398:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800c39a:	4b47      	ldr	r3, [pc, #284]	@ (800c4b8 <tcp_listen_input+0x1e4>)
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	881b      	ldrh	r3, [r3, #0]
 800c3a0:	b29a      	uxth	r2, r3
 800c3a2:	697b      	ldr	r3, [r7, #20]
 800c3a4:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800c3a6:	697b      	ldr	r3, [r7, #20]
 800c3a8:	2203      	movs	r2, #3
 800c3aa:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800c3ac:	4b41      	ldr	r3, [pc, #260]	@ (800c4b4 <tcp_listen_input+0x1e0>)
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	1c5a      	adds	r2, r3, #1
 800c3b2:	697b      	ldr	r3, [r7, #20]
 800c3b4:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800c3b6:	697b      	ldr	r3, [r7, #20]
 800c3b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c3ba:	697b      	ldr	r3, [r7, #20]
 800c3bc:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 800c3be:	6978      	ldr	r0, [r7, #20]
 800c3c0:	f7ff fa58 	bl	800b874 <tcp_next_iss>
 800c3c4:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800c3c6:	697b      	ldr	r3, [r7, #20]
 800c3c8:	693a      	ldr	r2, [r7, #16]
 800c3ca:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 800c3cc:	697b      	ldr	r3, [r7, #20]
 800c3ce:	693a      	ldr	r2, [r7, #16]
 800c3d0:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 800c3d2:	697b      	ldr	r3, [r7, #20]
 800c3d4:	693a      	ldr	r2, [r7, #16]
 800c3d6:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 800c3d8:	697b      	ldr	r3, [r7, #20]
 800c3da:	693a      	ldr	r2, [r7, #16]
 800c3dc:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800c3de:	4b35      	ldr	r3, [pc, #212]	@ (800c4b4 <tcp_listen_input+0x1e0>)
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	1e5a      	subs	r2, r3, #1
 800c3e4:	697b      	ldr	r3, [r7, #20]
 800c3e6:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	691a      	ldr	r2, [r3, #16]
 800c3ec:	697b      	ldr	r3, [r7, #20]
 800c3ee:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800c3f0:	697b      	ldr	r3, [r7, #20]
 800c3f2:	687a      	ldr	r2, [r7, #4]
 800c3f4:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	7a5b      	ldrb	r3, [r3, #9]
 800c3fa:	f003 030c 	and.w	r3, r3, #12
 800c3fe:	b2da      	uxtb	r2, r3
 800c400:	697b      	ldr	r3, [r7, #20]
 800c402:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	7a1a      	ldrb	r2, [r3, #8]
 800c408:	697b      	ldr	r3, [r7, #20]
 800c40a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800c40c:	4b2e      	ldr	r3, [pc, #184]	@ (800c4c8 <tcp_listen_input+0x1f4>)
 800c40e:	681a      	ldr	r2, [r3, #0]
 800c410:	697b      	ldr	r3, [r7, #20]
 800c412:	60da      	str	r2, [r3, #12]
 800c414:	4a2c      	ldr	r2, [pc, #176]	@ (800c4c8 <tcp_listen_input+0x1f4>)
 800c416:	697b      	ldr	r3, [r7, #20]
 800c418:	6013      	str	r3, [r2, #0]
 800c41a:	f003 f8cb 	bl	800f5b4 <tcp_timer_needed>
 800c41e:	4b2b      	ldr	r3, [pc, #172]	@ (800c4cc <tcp_listen_input+0x1f8>)
 800c420:	2201      	movs	r2, #1
 800c422:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800c424:	6978      	ldr	r0, [r7, #20]
 800c426:	f001 fd8b 	bl	800df40 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800c42a:	4b23      	ldr	r3, [pc, #140]	@ (800c4b8 <tcp_listen_input+0x1e4>)
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	89db      	ldrh	r3, [r3, #14]
 800c430:	b29a      	uxth	r2, r3
 800c432:	697b      	ldr	r3, [r7, #20]
 800c434:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800c438:	697b      	ldr	r3, [r7, #20]
 800c43a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800c43e:	697b      	ldr	r3, [r7, #20]
 800c440:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800c444:	697b      	ldr	r3, [r7, #20]
 800c446:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800c448:	697b      	ldr	r3, [r7, #20]
 800c44a:	3304      	adds	r3, #4
 800c44c:	4618      	mov	r0, r3
 800c44e:	f004 ffdf 	bl	8011410 <ip4_route>
 800c452:	4601      	mov	r1, r0
 800c454:	697b      	ldr	r3, [r7, #20]
 800c456:	3304      	adds	r3, #4
 800c458:	461a      	mov	r2, r3
 800c45a:	4620      	mov	r0, r4
 800c45c:	f7ff fa30 	bl	800b8c0 <tcp_eff_send_mss_netif>
 800c460:	4603      	mov	r3, r0
 800c462:	461a      	mov	r2, r3
 800c464:	697b      	ldr	r3, [r7, #20]
 800c466:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800c468:	2112      	movs	r1, #18
 800c46a:	6978      	ldr	r0, [r7, #20]
 800c46c:	f002 f83e 	bl	800e4ec <tcp_enqueue_flags>
 800c470:	4603      	mov	r3, r0
 800c472:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800c474:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d004      	beq.n	800c486 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800c47c:	2100      	movs	r1, #0
 800c47e:	6978      	ldr	r0, [r7, #20]
 800c480:	f7fe f97c 	bl	800a77c <tcp_abandon>
      return;
 800c484:	e006      	b.n	800c494 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800c486:	6978      	ldr	r0, [r7, #20]
 800c488:	f002 f91e 	bl	800e6c8 <tcp_output>
  return;
 800c48c:	e001      	b.n	800c492 <tcp_listen_input+0x1be>
    return;
 800c48e:	bf00      	nop
 800c490:	e000      	b.n	800c494 <tcp_listen_input+0x1c0>
  return;
 800c492:	bf00      	nop
}
 800c494:	371c      	adds	r7, #28
 800c496:	46bd      	mov	sp, r7
 800c498:	bd90      	pop	{r4, r7, pc}
 800c49a:	bf00      	nop
 800c49c:	20008950 	.word	0x20008950
 800c4a0:	0801509c 	.word	0x0801509c
 800c4a4:	08015294 	.word	0x08015294
 800c4a8:	080150e8 	.word	0x080150e8
 800c4ac:	20008948 	.word	0x20008948
 800c4b0:	2000894e 	.word	0x2000894e
 800c4b4:	20008944 	.word	0x20008944
 800c4b8:	20008934 	.word	0x20008934
 800c4bc:	200055ec 	.word	0x200055ec
 800c4c0:	200055f0 	.word	0x200055f0
 800c4c4:	200055dc 	.word	0x200055dc
 800c4c8:	20008918 	.word	0x20008918
 800c4cc:	20008920 	.word	0x20008920

0800c4d0 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800c4d0:	b580      	push	{r7, lr}
 800c4d2:	b086      	sub	sp, #24
 800c4d4:	af04      	add	r7, sp, #16
 800c4d6:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800c4d8:	4b2f      	ldr	r3, [pc, #188]	@ (800c598 <tcp_timewait_input+0xc8>)
 800c4da:	781b      	ldrb	r3, [r3, #0]
 800c4dc:	f003 0304 	and.w	r3, r3, #4
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d153      	bne.n	800c58c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d106      	bne.n	800c4f8 <tcp_timewait_input+0x28>
 800c4ea:	4b2c      	ldr	r3, [pc, #176]	@ (800c59c <tcp_timewait_input+0xcc>)
 800c4ec:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800c4f0:	492b      	ldr	r1, [pc, #172]	@ (800c5a0 <tcp_timewait_input+0xd0>)
 800c4f2:	482c      	ldr	r0, [pc, #176]	@ (800c5a4 <tcp_timewait_input+0xd4>)
 800c4f4:	f006 fbc6 	bl	8012c84 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800c4f8:	4b27      	ldr	r3, [pc, #156]	@ (800c598 <tcp_timewait_input+0xc8>)
 800c4fa:	781b      	ldrb	r3, [r3, #0]
 800c4fc:	f003 0302 	and.w	r3, r3, #2
 800c500:	2b00      	cmp	r3, #0
 800c502:	d02a      	beq.n	800c55a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800c504:	4b28      	ldr	r3, [pc, #160]	@ (800c5a8 <tcp_timewait_input+0xd8>)
 800c506:	681a      	ldr	r2, [r3, #0]
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c50c:	1ad3      	subs	r3, r2, r3
 800c50e:	2b00      	cmp	r3, #0
 800c510:	db2d      	blt.n	800c56e <tcp_timewait_input+0x9e>
 800c512:	4b25      	ldr	r3, [pc, #148]	@ (800c5a8 <tcp_timewait_input+0xd8>)
 800c514:	681a      	ldr	r2, [r3, #0]
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c51a:	6879      	ldr	r1, [r7, #4]
 800c51c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800c51e:	440b      	add	r3, r1
 800c520:	1ad3      	subs	r3, r2, r3
 800c522:	2b00      	cmp	r3, #0
 800c524:	dc23      	bgt.n	800c56e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c526:	4b21      	ldr	r3, [pc, #132]	@ (800c5ac <tcp_timewait_input+0xdc>)
 800c528:	6819      	ldr	r1, [r3, #0]
 800c52a:	4b21      	ldr	r3, [pc, #132]	@ (800c5b0 <tcp_timewait_input+0xe0>)
 800c52c:	881b      	ldrh	r3, [r3, #0]
 800c52e:	461a      	mov	r2, r3
 800c530:	4b1d      	ldr	r3, [pc, #116]	@ (800c5a8 <tcp_timewait_input+0xd8>)
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c536:	4b1f      	ldr	r3, [pc, #124]	@ (800c5b4 <tcp_timewait_input+0xe4>)
 800c538:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c53a:	885b      	ldrh	r3, [r3, #2]
 800c53c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c53e:	4a1d      	ldr	r2, [pc, #116]	@ (800c5b4 <tcp_timewait_input+0xe4>)
 800c540:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c542:	8812      	ldrh	r2, [r2, #0]
 800c544:	b292      	uxth	r2, r2
 800c546:	9202      	str	r2, [sp, #8]
 800c548:	9301      	str	r3, [sp, #4]
 800c54a:	4b1b      	ldr	r3, [pc, #108]	@ (800c5b8 <tcp_timewait_input+0xe8>)
 800c54c:	9300      	str	r3, [sp, #0]
 800c54e:	4b1b      	ldr	r3, [pc, #108]	@ (800c5bc <tcp_timewait_input+0xec>)
 800c550:	4602      	mov	r2, r0
 800c552:	6878      	ldr	r0, [r7, #4]
 800c554:	f002 fe6c 	bl	800f230 <tcp_rst>
      return;
 800c558:	e01b      	b.n	800c592 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800c55a:	4b0f      	ldr	r3, [pc, #60]	@ (800c598 <tcp_timewait_input+0xc8>)
 800c55c:	781b      	ldrb	r3, [r3, #0]
 800c55e:	f003 0301 	and.w	r3, r3, #1
 800c562:	2b00      	cmp	r3, #0
 800c564:	d003      	beq.n	800c56e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800c566:	4b16      	ldr	r3, [pc, #88]	@ (800c5c0 <tcp_timewait_input+0xf0>)
 800c568:	681a      	ldr	r2, [r3, #0]
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800c56e:	4b10      	ldr	r3, [pc, #64]	@ (800c5b0 <tcp_timewait_input+0xe0>)
 800c570:	881b      	ldrh	r3, [r3, #0]
 800c572:	2b00      	cmp	r3, #0
 800c574:	d00c      	beq.n	800c590 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	8b5b      	ldrh	r3, [r3, #26]
 800c57a:	f043 0302 	orr.w	r3, r3, #2
 800c57e:	b29a      	uxth	r2, r3
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800c584:	6878      	ldr	r0, [r7, #4]
 800c586:	f002 f89f 	bl	800e6c8 <tcp_output>
  }
  return;
 800c58a:	e001      	b.n	800c590 <tcp_timewait_input+0xc0>
    return;
 800c58c:	bf00      	nop
 800c58e:	e000      	b.n	800c592 <tcp_timewait_input+0xc2>
  return;
 800c590:	bf00      	nop
}
 800c592:	3708      	adds	r7, #8
 800c594:	46bd      	mov	sp, r7
 800c596:	bd80      	pop	{r7, pc}
 800c598:	20008950 	.word	0x20008950
 800c59c:	0801509c 	.word	0x0801509c
 800c5a0:	080152b4 	.word	0x080152b4
 800c5a4:	080150e8 	.word	0x080150e8
 800c5a8:	20008944 	.word	0x20008944
 800c5ac:	20008948 	.word	0x20008948
 800c5b0:	2000894e 	.word	0x2000894e
 800c5b4:	20008934 	.word	0x20008934
 800c5b8:	200055ec 	.word	0x200055ec
 800c5bc:	200055f0 	.word	0x200055f0
 800c5c0:	2000890c 	.word	0x2000890c

0800c5c4 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800c5c4:	b590      	push	{r4, r7, lr}
 800c5c6:	b08d      	sub	sp, #52	@ 0x34
 800c5c8:	af04      	add	r7, sp, #16
 800c5ca:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800c5d0:	2300      	movs	r3, #0
 800c5d2:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d106      	bne.n	800c5e8 <tcp_process+0x24>
 800c5da:	4b9d      	ldr	r3, [pc, #628]	@ (800c850 <tcp_process+0x28c>)
 800c5dc:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800c5e0:	499c      	ldr	r1, [pc, #624]	@ (800c854 <tcp_process+0x290>)
 800c5e2:	489d      	ldr	r0, [pc, #628]	@ (800c858 <tcp_process+0x294>)
 800c5e4:	f006 fb4e 	bl	8012c84 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800c5e8:	4b9c      	ldr	r3, [pc, #624]	@ (800c85c <tcp_process+0x298>)
 800c5ea:	781b      	ldrb	r3, [r3, #0]
 800c5ec:	f003 0304 	and.w	r3, r3, #4
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d04e      	beq.n	800c692 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	7d1b      	ldrb	r3, [r3, #20]
 800c5f8:	2b02      	cmp	r3, #2
 800c5fa:	d108      	bne.n	800c60e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c600:	4b97      	ldr	r3, [pc, #604]	@ (800c860 <tcp_process+0x29c>)
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	429a      	cmp	r2, r3
 800c606:	d123      	bne.n	800c650 <tcp_process+0x8c>
        acceptable = 1;
 800c608:	2301      	movs	r3, #1
 800c60a:	76fb      	strb	r3, [r7, #27]
 800c60c:	e020      	b.n	800c650 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c612:	4b94      	ldr	r3, [pc, #592]	@ (800c864 <tcp_process+0x2a0>)
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	429a      	cmp	r2, r3
 800c618:	d102      	bne.n	800c620 <tcp_process+0x5c>
        acceptable = 1;
 800c61a:	2301      	movs	r3, #1
 800c61c:	76fb      	strb	r3, [r7, #27]
 800c61e:	e017      	b.n	800c650 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c620:	4b90      	ldr	r3, [pc, #576]	@ (800c864 <tcp_process+0x2a0>)
 800c622:	681a      	ldr	r2, [r3, #0]
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c628:	1ad3      	subs	r3, r2, r3
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	db10      	blt.n	800c650 <tcp_process+0x8c>
 800c62e:	4b8d      	ldr	r3, [pc, #564]	@ (800c864 <tcp_process+0x2a0>)
 800c630:	681a      	ldr	r2, [r3, #0]
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c636:	6879      	ldr	r1, [r7, #4]
 800c638:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800c63a:	440b      	add	r3, r1
 800c63c:	1ad3      	subs	r3, r2, r3
 800c63e:	2b00      	cmp	r3, #0
 800c640:	dc06      	bgt.n	800c650 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	8b5b      	ldrh	r3, [r3, #26]
 800c646:	f043 0302 	orr.w	r3, r3, #2
 800c64a:	b29a      	uxth	r2, r3
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800c650:	7efb      	ldrb	r3, [r7, #27]
 800c652:	2b00      	cmp	r3, #0
 800c654:	d01b      	beq.n	800c68e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	7d1b      	ldrb	r3, [r3, #20]
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d106      	bne.n	800c66c <tcp_process+0xa8>
 800c65e:	4b7c      	ldr	r3, [pc, #496]	@ (800c850 <tcp_process+0x28c>)
 800c660:	f44f 724e 	mov.w	r2, #824	@ 0x338
 800c664:	4980      	ldr	r1, [pc, #512]	@ (800c868 <tcp_process+0x2a4>)
 800c666:	487c      	ldr	r0, [pc, #496]	@ (800c858 <tcp_process+0x294>)
 800c668:	f006 fb0c 	bl	8012c84 <iprintf>
      recv_flags |= TF_RESET;
 800c66c:	4b7f      	ldr	r3, [pc, #508]	@ (800c86c <tcp_process+0x2a8>)
 800c66e:	781b      	ldrb	r3, [r3, #0]
 800c670:	f043 0308 	orr.w	r3, r3, #8
 800c674:	b2da      	uxtb	r2, r3
 800c676:	4b7d      	ldr	r3, [pc, #500]	@ (800c86c <tcp_process+0x2a8>)
 800c678:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	8b5b      	ldrh	r3, [r3, #26]
 800c67e:	f023 0301 	bic.w	r3, r3, #1
 800c682:	b29a      	uxth	r2, r3
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800c688:	f06f 030d 	mvn.w	r3, #13
 800c68c:	e37a      	b.n	800cd84 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800c68e:	2300      	movs	r3, #0
 800c690:	e378      	b.n	800cd84 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800c692:	4b72      	ldr	r3, [pc, #456]	@ (800c85c <tcp_process+0x298>)
 800c694:	781b      	ldrb	r3, [r3, #0]
 800c696:	f003 0302 	and.w	r3, r3, #2
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d010      	beq.n	800c6c0 <tcp_process+0xfc>
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	7d1b      	ldrb	r3, [r3, #20]
 800c6a2:	2b02      	cmp	r3, #2
 800c6a4:	d00c      	beq.n	800c6c0 <tcp_process+0xfc>
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	7d1b      	ldrb	r3, [r3, #20]
 800c6aa:	2b03      	cmp	r3, #3
 800c6ac:	d008      	beq.n	800c6c0 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	8b5b      	ldrh	r3, [r3, #26]
 800c6b2:	f043 0302 	orr.w	r3, r3, #2
 800c6b6:	b29a      	uxth	r2, r3
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800c6bc:	2300      	movs	r3, #0
 800c6be:	e361      	b.n	800cd84 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	8b5b      	ldrh	r3, [r3, #26]
 800c6c4:	f003 0310 	and.w	r3, r3, #16
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d103      	bne.n	800c6d4 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800c6cc:	4b68      	ldr	r3, [pc, #416]	@ (800c870 <tcp_process+0x2ac>)
 800c6ce:	681a      	ldr	r2, [r3, #0]
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	2200      	movs	r2, #0
 800c6d8:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	2200      	movs	r2, #0
 800c6e0:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 800c6e4:	6878      	ldr	r0, [r7, #4]
 800c6e6:	f001 fc2b 	bl	800df40 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	7d1b      	ldrb	r3, [r3, #20]
 800c6ee:	3b02      	subs	r3, #2
 800c6f0:	2b07      	cmp	r3, #7
 800c6f2:	f200 8337 	bhi.w	800cd64 <tcp_process+0x7a0>
 800c6f6:	a201      	add	r2, pc, #4	@ (adr r2, 800c6fc <tcp_process+0x138>)
 800c6f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6fc:	0800c71d 	.word	0x0800c71d
 800c700:	0800c94d 	.word	0x0800c94d
 800c704:	0800cac5 	.word	0x0800cac5
 800c708:	0800caef 	.word	0x0800caef
 800c70c:	0800cc13 	.word	0x0800cc13
 800c710:	0800cac5 	.word	0x0800cac5
 800c714:	0800cc9f 	.word	0x0800cc9f
 800c718:	0800cd2f 	.word	0x0800cd2f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800c71c:	4b4f      	ldr	r3, [pc, #316]	@ (800c85c <tcp_process+0x298>)
 800c71e:	781b      	ldrb	r3, [r3, #0]
 800c720:	f003 0310 	and.w	r3, r3, #16
 800c724:	2b00      	cmp	r3, #0
 800c726:	f000 80e4 	beq.w	800c8f2 <tcp_process+0x32e>
 800c72a:	4b4c      	ldr	r3, [pc, #304]	@ (800c85c <tcp_process+0x298>)
 800c72c:	781b      	ldrb	r3, [r3, #0]
 800c72e:	f003 0302 	and.w	r3, r3, #2
 800c732:	2b00      	cmp	r3, #0
 800c734:	f000 80dd 	beq.w	800c8f2 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c73c:	1c5a      	adds	r2, r3, #1
 800c73e:	4b48      	ldr	r3, [pc, #288]	@ (800c860 <tcp_process+0x29c>)
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	429a      	cmp	r2, r3
 800c744:	f040 80d5 	bne.w	800c8f2 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800c748:	4b46      	ldr	r3, [pc, #280]	@ (800c864 <tcp_process+0x2a0>)
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	1c5a      	adds	r2, r3, #1
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 800c75a:	4b41      	ldr	r3, [pc, #260]	@ (800c860 <tcp_process+0x29c>)
 800c75c:	681a      	ldr	r2, [r3, #0]
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800c762:	4b44      	ldr	r3, [pc, #272]	@ (800c874 <tcp_process+0x2b0>)
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	89db      	ldrh	r3, [r3, #14]
 800c768:	b29a      	uxth	r2, r3
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800c77c:	4b39      	ldr	r3, [pc, #228]	@ (800c864 <tcp_process+0x2a0>)
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	1e5a      	subs	r2, r3, #1
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	2204      	movs	r2, #4
 800c78a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	3304      	adds	r3, #4
 800c794:	4618      	mov	r0, r3
 800c796:	f004 fe3b 	bl	8011410 <ip4_route>
 800c79a:	4601      	mov	r1, r0
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	3304      	adds	r3, #4
 800c7a0:	461a      	mov	r2, r3
 800c7a2:	4620      	mov	r0, r4
 800c7a4:	f7ff f88c 	bl	800b8c0 <tcp_eff_send_mss_netif>
 800c7a8:	4603      	mov	r3, r0
 800c7aa:	461a      	mov	r2, r3
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c7b4:	009a      	lsls	r2, r3, #2
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c7ba:	005b      	lsls	r3, r3, #1
 800c7bc:	f241 111c 	movw	r1, #4380	@ 0x111c
 800c7c0:	428b      	cmp	r3, r1
 800c7c2:	bf38      	it	cc
 800c7c4:	460b      	movcc	r3, r1
 800c7c6:	429a      	cmp	r2, r3
 800c7c8:	d204      	bcs.n	800c7d4 <tcp_process+0x210>
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c7ce:	009b      	lsls	r3, r3, #2
 800c7d0:	b29b      	uxth	r3, r3
 800c7d2:	e00d      	b.n	800c7f0 <tcp_process+0x22c>
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c7d8:	005b      	lsls	r3, r3, #1
 800c7da:	f241 121c 	movw	r2, #4380	@ 0x111c
 800c7de:	4293      	cmp	r3, r2
 800c7e0:	d904      	bls.n	800c7ec <tcp_process+0x228>
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c7e6:	005b      	lsls	r3, r3, #1
 800c7e8:	b29b      	uxth	r3, r3
 800c7ea:	e001      	b.n	800c7f0 <tcp_process+0x22c>
 800c7ec:	f241 131c 	movw	r3, #4380	@ 0x111c
 800c7f0:	687a      	ldr	r2, [r7, #4]
 800c7f2:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d106      	bne.n	800c80e <tcp_process+0x24a>
 800c800:	4b13      	ldr	r3, [pc, #76]	@ (800c850 <tcp_process+0x28c>)
 800c802:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 800c806:	491c      	ldr	r1, [pc, #112]	@ (800c878 <tcp_process+0x2b4>)
 800c808:	4813      	ldr	r0, [pc, #76]	@ (800c858 <tcp_process+0x294>)
 800c80a:	f006 fa3b 	bl	8012c84 <iprintf>
        --pcb->snd_queuelen;
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800c814:	3b01      	subs	r3, #1
 800c816:	b29a      	uxth	r2, r3
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c822:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800c824:	69fb      	ldr	r3, [r7, #28]
 800c826:	2b00      	cmp	r3, #0
 800c828:	d12a      	bne.n	800c880 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c82e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800c830:	69fb      	ldr	r3, [r7, #28]
 800c832:	2b00      	cmp	r3, #0
 800c834:	d106      	bne.n	800c844 <tcp_process+0x280>
 800c836:	4b06      	ldr	r3, [pc, #24]	@ (800c850 <tcp_process+0x28c>)
 800c838:	f44f 725d 	mov.w	r2, #884	@ 0x374
 800c83c:	490f      	ldr	r1, [pc, #60]	@ (800c87c <tcp_process+0x2b8>)
 800c83e:	4806      	ldr	r0, [pc, #24]	@ (800c858 <tcp_process+0x294>)
 800c840:	f006 fa20 	bl	8012c84 <iprintf>
          pcb->unsent = rseg->next;
 800c844:	69fb      	ldr	r3, [r7, #28]
 800c846:	681a      	ldr	r2, [r3, #0]
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	66da      	str	r2, [r3, #108]	@ 0x6c
 800c84c:	e01c      	b.n	800c888 <tcp_process+0x2c4>
 800c84e:	bf00      	nop
 800c850:	0801509c 	.word	0x0801509c
 800c854:	080152d4 	.word	0x080152d4
 800c858:	080150e8 	.word	0x080150e8
 800c85c:	20008950 	.word	0x20008950
 800c860:	20008948 	.word	0x20008948
 800c864:	20008944 	.word	0x20008944
 800c868:	080152f0 	.word	0x080152f0
 800c86c:	20008951 	.word	0x20008951
 800c870:	2000890c 	.word	0x2000890c
 800c874:	20008934 	.word	0x20008934
 800c878:	08015310 	.word	0x08015310
 800c87c:	08015328 	.word	0x08015328
        } else {
          pcb->unacked = rseg->next;
 800c880:	69fb      	ldr	r3, [r7, #28]
 800c882:	681a      	ldr	r2, [r3, #0]
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 800c888:	69f8      	ldr	r0, [r7, #28]
 800c88a:	f7fe fd22 	bl	800b2d2 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c892:	2b00      	cmp	r3, #0
 800c894:	d104      	bne.n	800c8a0 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c89c:	861a      	strh	r2, [r3, #48]	@ 0x30
 800c89e:	e006      	b.n	800c8ae <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	2200      	movs	r2, #0
 800c8a4:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	2200      	movs	r2, #0
 800c8aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d00a      	beq.n	800c8ce <tcp_process+0x30a>
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c8be:	687a      	ldr	r2, [r7, #4]
 800c8c0:	6910      	ldr	r0, [r2, #16]
 800c8c2:	2200      	movs	r2, #0
 800c8c4:	6879      	ldr	r1, [r7, #4]
 800c8c6:	4798      	blx	r3
 800c8c8:	4603      	mov	r3, r0
 800c8ca:	76bb      	strb	r3, [r7, #26]
 800c8cc:	e001      	b.n	800c8d2 <tcp_process+0x30e>
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800c8d2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c8d6:	f113 0f0d 	cmn.w	r3, #13
 800c8da:	d102      	bne.n	800c8e2 <tcp_process+0x31e>
          return ERR_ABRT;
 800c8dc:	f06f 030c 	mvn.w	r3, #12
 800c8e0:	e250      	b.n	800cd84 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	8b5b      	ldrh	r3, [r3, #26]
 800c8e6:	f043 0302 	orr.w	r3, r3, #2
 800c8ea:	b29a      	uxth	r2, r3
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800c8f0:	e23a      	b.n	800cd68 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800c8f2:	4b98      	ldr	r3, [pc, #608]	@ (800cb54 <tcp_process+0x590>)
 800c8f4:	781b      	ldrb	r3, [r3, #0]
 800c8f6:	f003 0310 	and.w	r3, r3, #16
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	f000 8234 	beq.w	800cd68 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c900:	4b95      	ldr	r3, [pc, #596]	@ (800cb58 <tcp_process+0x594>)
 800c902:	6819      	ldr	r1, [r3, #0]
 800c904:	4b95      	ldr	r3, [pc, #596]	@ (800cb5c <tcp_process+0x598>)
 800c906:	881b      	ldrh	r3, [r3, #0]
 800c908:	461a      	mov	r2, r3
 800c90a:	4b95      	ldr	r3, [pc, #596]	@ (800cb60 <tcp_process+0x59c>)
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c910:	4b94      	ldr	r3, [pc, #592]	@ (800cb64 <tcp_process+0x5a0>)
 800c912:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c914:	885b      	ldrh	r3, [r3, #2]
 800c916:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c918:	4a92      	ldr	r2, [pc, #584]	@ (800cb64 <tcp_process+0x5a0>)
 800c91a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c91c:	8812      	ldrh	r2, [r2, #0]
 800c91e:	b292      	uxth	r2, r2
 800c920:	9202      	str	r2, [sp, #8]
 800c922:	9301      	str	r3, [sp, #4]
 800c924:	4b90      	ldr	r3, [pc, #576]	@ (800cb68 <tcp_process+0x5a4>)
 800c926:	9300      	str	r3, [sp, #0]
 800c928:	4b90      	ldr	r3, [pc, #576]	@ (800cb6c <tcp_process+0x5a8>)
 800c92a:	4602      	mov	r2, r0
 800c92c:	6878      	ldr	r0, [r7, #4]
 800c92e:	f002 fc7f 	bl	800f230 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c938:	2b05      	cmp	r3, #5
 800c93a:	f200 8215 	bhi.w	800cd68 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	2200      	movs	r2, #0
 800c942:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 800c944:	6878      	ldr	r0, [r7, #4]
 800c946:	f002 fa4b 	bl	800ede0 <tcp_rexmit_rto>
      break;
 800c94a:	e20d      	b.n	800cd68 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800c94c:	4b81      	ldr	r3, [pc, #516]	@ (800cb54 <tcp_process+0x590>)
 800c94e:	781b      	ldrb	r3, [r3, #0]
 800c950:	f003 0310 	and.w	r3, r3, #16
 800c954:	2b00      	cmp	r3, #0
 800c956:	f000 80a1 	beq.w	800ca9c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c95a:	4b7f      	ldr	r3, [pc, #508]	@ (800cb58 <tcp_process+0x594>)
 800c95c:	681a      	ldr	r2, [r3, #0]
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c962:	1ad3      	subs	r3, r2, r3
 800c964:	3b01      	subs	r3, #1
 800c966:	2b00      	cmp	r3, #0
 800c968:	db7e      	blt.n	800ca68 <tcp_process+0x4a4>
 800c96a:	4b7b      	ldr	r3, [pc, #492]	@ (800cb58 <tcp_process+0x594>)
 800c96c:	681a      	ldr	r2, [r3, #0]
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c972:	1ad3      	subs	r3, r2, r3
 800c974:	2b00      	cmp	r3, #0
 800c976:	dc77      	bgt.n	800ca68 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	2204      	movs	r2, #4
 800c97c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c982:	2b00      	cmp	r3, #0
 800c984:	d102      	bne.n	800c98c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800c986:	23fa      	movs	r3, #250	@ 0xfa
 800c988:	76bb      	strb	r3, [r7, #26]
 800c98a:	e01d      	b.n	800c9c8 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c990:	699b      	ldr	r3, [r3, #24]
 800c992:	2b00      	cmp	r3, #0
 800c994:	d106      	bne.n	800c9a4 <tcp_process+0x3e0>
 800c996:	4b76      	ldr	r3, [pc, #472]	@ (800cb70 <tcp_process+0x5ac>)
 800c998:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 800c99c:	4975      	ldr	r1, [pc, #468]	@ (800cb74 <tcp_process+0x5b0>)
 800c99e:	4876      	ldr	r0, [pc, #472]	@ (800cb78 <tcp_process+0x5b4>)
 800c9a0:	f006 f970 	bl	8012c84 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c9a8:	699b      	ldr	r3, [r3, #24]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d00a      	beq.n	800c9c4 <tcp_process+0x400>
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c9b2:	699b      	ldr	r3, [r3, #24]
 800c9b4:	687a      	ldr	r2, [r7, #4]
 800c9b6:	6910      	ldr	r0, [r2, #16]
 800c9b8:	2200      	movs	r2, #0
 800c9ba:	6879      	ldr	r1, [r7, #4]
 800c9bc:	4798      	blx	r3
 800c9be:	4603      	mov	r3, r0
 800c9c0:	76bb      	strb	r3, [r7, #26]
 800c9c2:	e001      	b.n	800c9c8 <tcp_process+0x404>
 800c9c4:	23f0      	movs	r3, #240	@ 0xf0
 800c9c6:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800c9c8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d00a      	beq.n	800c9e6 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800c9d0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c9d4:	f113 0f0d 	cmn.w	r3, #13
 800c9d8:	d002      	beq.n	800c9e0 <tcp_process+0x41c>
              tcp_abort(pcb);
 800c9da:	6878      	ldr	r0, [r7, #4]
 800c9dc:	f7fd ff8c 	bl	800a8f8 <tcp_abort>
            }
            return ERR_ABRT;
 800c9e0:	f06f 030c 	mvn.w	r3, #12
 800c9e4:	e1ce      	b.n	800cd84 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800c9e6:	6878      	ldr	r0, [r7, #4]
 800c9e8:	f000 fae0 	bl	800cfac <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800c9ec:	4b63      	ldr	r3, [pc, #396]	@ (800cb7c <tcp_process+0x5b8>)
 800c9ee:	881b      	ldrh	r3, [r3, #0]
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d005      	beq.n	800ca00 <tcp_process+0x43c>
            recv_acked--;
 800c9f4:	4b61      	ldr	r3, [pc, #388]	@ (800cb7c <tcp_process+0x5b8>)
 800c9f6:	881b      	ldrh	r3, [r3, #0]
 800c9f8:	3b01      	subs	r3, #1
 800c9fa:	b29a      	uxth	r2, r3
 800c9fc:	4b5f      	ldr	r3, [pc, #380]	@ (800cb7c <tcp_process+0x5b8>)
 800c9fe:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ca04:	009a      	lsls	r2, r3, #2
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ca0a:	005b      	lsls	r3, r3, #1
 800ca0c:	f241 111c 	movw	r1, #4380	@ 0x111c
 800ca10:	428b      	cmp	r3, r1
 800ca12:	bf38      	it	cc
 800ca14:	460b      	movcc	r3, r1
 800ca16:	429a      	cmp	r2, r3
 800ca18:	d204      	bcs.n	800ca24 <tcp_process+0x460>
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ca1e:	009b      	lsls	r3, r3, #2
 800ca20:	b29b      	uxth	r3, r3
 800ca22:	e00d      	b.n	800ca40 <tcp_process+0x47c>
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ca28:	005b      	lsls	r3, r3, #1
 800ca2a:	f241 121c 	movw	r2, #4380	@ 0x111c
 800ca2e:	4293      	cmp	r3, r2
 800ca30:	d904      	bls.n	800ca3c <tcp_process+0x478>
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ca36:	005b      	lsls	r3, r3, #1
 800ca38:	b29b      	uxth	r3, r3
 800ca3a:	e001      	b.n	800ca40 <tcp_process+0x47c>
 800ca3c:	f241 131c 	movw	r3, #4380	@ 0x111c
 800ca40:	687a      	ldr	r2, [r7, #4]
 800ca42:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800ca46:	4b4e      	ldr	r3, [pc, #312]	@ (800cb80 <tcp_process+0x5bc>)
 800ca48:	781b      	ldrb	r3, [r3, #0]
 800ca4a:	f003 0320 	and.w	r3, r3, #32
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d037      	beq.n	800cac2 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	8b5b      	ldrh	r3, [r3, #26]
 800ca56:	f043 0302 	orr.w	r3, r3, #2
 800ca5a:	b29a      	uxth	r2, r3
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	2207      	movs	r2, #7
 800ca64:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800ca66:	e02c      	b.n	800cac2 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ca68:	4b3b      	ldr	r3, [pc, #236]	@ (800cb58 <tcp_process+0x594>)
 800ca6a:	6819      	ldr	r1, [r3, #0]
 800ca6c:	4b3b      	ldr	r3, [pc, #236]	@ (800cb5c <tcp_process+0x598>)
 800ca6e:	881b      	ldrh	r3, [r3, #0]
 800ca70:	461a      	mov	r2, r3
 800ca72:	4b3b      	ldr	r3, [pc, #236]	@ (800cb60 <tcp_process+0x59c>)
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ca78:	4b3a      	ldr	r3, [pc, #232]	@ (800cb64 <tcp_process+0x5a0>)
 800ca7a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ca7c:	885b      	ldrh	r3, [r3, #2]
 800ca7e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ca80:	4a38      	ldr	r2, [pc, #224]	@ (800cb64 <tcp_process+0x5a0>)
 800ca82:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ca84:	8812      	ldrh	r2, [r2, #0]
 800ca86:	b292      	uxth	r2, r2
 800ca88:	9202      	str	r2, [sp, #8]
 800ca8a:	9301      	str	r3, [sp, #4]
 800ca8c:	4b36      	ldr	r3, [pc, #216]	@ (800cb68 <tcp_process+0x5a4>)
 800ca8e:	9300      	str	r3, [sp, #0]
 800ca90:	4b36      	ldr	r3, [pc, #216]	@ (800cb6c <tcp_process+0x5a8>)
 800ca92:	4602      	mov	r2, r0
 800ca94:	6878      	ldr	r0, [r7, #4]
 800ca96:	f002 fbcb 	bl	800f230 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800ca9a:	e167      	b.n	800cd6c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800ca9c:	4b2d      	ldr	r3, [pc, #180]	@ (800cb54 <tcp_process+0x590>)
 800ca9e:	781b      	ldrb	r3, [r3, #0]
 800caa0:	f003 0302 	and.w	r3, r3, #2
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	f000 8161 	beq.w	800cd6c <tcp_process+0x7a8>
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800caae:	1e5a      	subs	r2, r3, #1
 800cab0:	4b2b      	ldr	r3, [pc, #172]	@ (800cb60 <tcp_process+0x59c>)
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	429a      	cmp	r2, r3
 800cab6:	f040 8159 	bne.w	800cd6c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800caba:	6878      	ldr	r0, [r7, #4]
 800cabc:	f002 f9b2 	bl	800ee24 <tcp_rexmit>
      break;
 800cac0:	e154      	b.n	800cd6c <tcp_process+0x7a8>
 800cac2:	e153      	b.n	800cd6c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800cac4:	6878      	ldr	r0, [r7, #4]
 800cac6:	f000 fa71 	bl	800cfac <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800caca:	4b2d      	ldr	r3, [pc, #180]	@ (800cb80 <tcp_process+0x5bc>)
 800cacc:	781b      	ldrb	r3, [r3, #0]
 800cace:	f003 0320 	and.w	r3, r3, #32
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	f000 814c 	beq.w	800cd70 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	8b5b      	ldrh	r3, [r3, #26]
 800cadc:	f043 0302 	orr.w	r3, r3, #2
 800cae0:	b29a      	uxth	r2, r3
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	2207      	movs	r2, #7
 800caea:	751a      	strb	r2, [r3, #20]
      }
      break;
 800caec:	e140      	b.n	800cd70 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800caee:	6878      	ldr	r0, [r7, #4]
 800caf0:	f000 fa5c 	bl	800cfac <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800caf4:	4b22      	ldr	r3, [pc, #136]	@ (800cb80 <tcp_process+0x5bc>)
 800caf6:	781b      	ldrb	r3, [r3, #0]
 800caf8:	f003 0320 	and.w	r3, r3, #32
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d071      	beq.n	800cbe4 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800cb00:	4b14      	ldr	r3, [pc, #80]	@ (800cb54 <tcp_process+0x590>)
 800cb02:	781b      	ldrb	r3, [r3, #0]
 800cb04:	f003 0310 	and.w	r3, r3, #16
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d060      	beq.n	800cbce <tcp_process+0x60a>
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800cb10:	4b11      	ldr	r3, [pc, #68]	@ (800cb58 <tcp_process+0x594>)
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	429a      	cmp	r2, r3
 800cb16:	d15a      	bne.n	800cbce <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d156      	bne.n	800cbce <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	8b5b      	ldrh	r3, [r3, #26]
 800cb24:	f043 0302 	orr.w	r3, r3, #2
 800cb28:	b29a      	uxth	r2, r3
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800cb2e:	6878      	ldr	r0, [r7, #4]
 800cb30:	f7fe fdbc 	bl	800b6ac <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800cb34:	4b13      	ldr	r3, [pc, #76]	@ (800cb84 <tcp_process+0x5c0>)
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	687a      	ldr	r2, [r7, #4]
 800cb3a:	429a      	cmp	r2, r3
 800cb3c:	d105      	bne.n	800cb4a <tcp_process+0x586>
 800cb3e:	4b11      	ldr	r3, [pc, #68]	@ (800cb84 <tcp_process+0x5c0>)
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	68db      	ldr	r3, [r3, #12]
 800cb44:	4a0f      	ldr	r2, [pc, #60]	@ (800cb84 <tcp_process+0x5c0>)
 800cb46:	6013      	str	r3, [r2, #0]
 800cb48:	e02e      	b.n	800cba8 <tcp_process+0x5e4>
 800cb4a:	4b0e      	ldr	r3, [pc, #56]	@ (800cb84 <tcp_process+0x5c0>)
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	617b      	str	r3, [r7, #20]
 800cb50:	e027      	b.n	800cba2 <tcp_process+0x5de>
 800cb52:	bf00      	nop
 800cb54:	20008950 	.word	0x20008950
 800cb58:	20008948 	.word	0x20008948
 800cb5c:	2000894e 	.word	0x2000894e
 800cb60:	20008944 	.word	0x20008944
 800cb64:	20008934 	.word	0x20008934
 800cb68:	200055ec 	.word	0x200055ec
 800cb6c:	200055f0 	.word	0x200055f0
 800cb70:	0801509c 	.word	0x0801509c
 800cb74:	0801533c 	.word	0x0801533c
 800cb78:	080150e8 	.word	0x080150e8
 800cb7c:	2000894c 	.word	0x2000894c
 800cb80:	20008951 	.word	0x20008951
 800cb84:	20008918 	.word	0x20008918
 800cb88:	697b      	ldr	r3, [r7, #20]
 800cb8a:	68db      	ldr	r3, [r3, #12]
 800cb8c:	687a      	ldr	r2, [r7, #4]
 800cb8e:	429a      	cmp	r2, r3
 800cb90:	d104      	bne.n	800cb9c <tcp_process+0x5d8>
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	68da      	ldr	r2, [r3, #12]
 800cb96:	697b      	ldr	r3, [r7, #20]
 800cb98:	60da      	str	r2, [r3, #12]
 800cb9a:	e005      	b.n	800cba8 <tcp_process+0x5e4>
 800cb9c:	697b      	ldr	r3, [r7, #20]
 800cb9e:	68db      	ldr	r3, [r3, #12]
 800cba0:	617b      	str	r3, [r7, #20]
 800cba2:	697b      	ldr	r3, [r7, #20]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d1ef      	bne.n	800cb88 <tcp_process+0x5c4>
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	2200      	movs	r2, #0
 800cbac:	60da      	str	r2, [r3, #12]
 800cbae:	4b77      	ldr	r3, [pc, #476]	@ (800cd8c <tcp_process+0x7c8>)
 800cbb0:	2201      	movs	r2, #1
 800cbb2:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	220a      	movs	r2, #10
 800cbb8:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800cbba:	4b75      	ldr	r3, [pc, #468]	@ (800cd90 <tcp_process+0x7cc>)
 800cbbc:	681a      	ldr	r2, [r3, #0]
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	60da      	str	r2, [r3, #12]
 800cbc2:	4a73      	ldr	r2, [pc, #460]	@ (800cd90 <tcp_process+0x7cc>)
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	6013      	str	r3, [r2, #0]
 800cbc8:	f002 fcf4 	bl	800f5b4 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800cbcc:	e0d2      	b.n	800cd74 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	8b5b      	ldrh	r3, [r3, #26]
 800cbd2:	f043 0302 	orr.w	r3, r3, #2
 800cbd6:	b29a      	uxth	r2, r3
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	2208      	movs	r2, #8
 800cbe0:	751a      	strb	r2, [r3, #20]
      break;
 800cbe2:	e0c7      	b.n	800cd74 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800cbe4:	4b6b      	ldr	r3, [pc, #428]	@ (800cd94 <tcp_process+0x7d0>)
 800cbe6:	781b      	ldrb	r3, [r3, #0]
 800cbe8:	f003 0310 	and.w	r3, r3, #16
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	f000 80c1 	beq.w	800cd74 <tcp_process+0x7b0>
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800cbf6:	4b68      	ldr	r3, [pc, #416]	@ (800cd98 <tcp_process+0x7d4>)
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	429a      	cmp	r2, r3
 800cbfc:	f040 80ba 	bne.w	800cd74 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	f040 80b5 	bne.w	800cd74 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	2206      	movs	r2, #6
 800cc0e:	751a      	strb	r2, [r3, #20]
      break;
 800cc10:	e0b0      	b.n	800cd74 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800cc12:	6878      	ldr	r0, [r7, #4]
 800cc14:	f000 f9ca 	bl	800cfac <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800cc18:	4b60      	ldr	r3, [pc, #384]	@ (800cd9c <tcp_process+0x7d8>)
 800cc1a:	781b      	ldrb	r3, [r3, #0]
 800cc1c:	f003 0320 	and.w	r3, r3, #32
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	f000 80a9 	beq.w	800cd78 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	8b5b      	ldrh	r3, [r3, #26]
 800cc2a:	f043 0302 	orr.w	r3, r3, #2
 800cc2e:	b29a      	uxth	r2, r3
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800cc34:	6878      	ldr	r0, [r7, #4]
 800cc36:	f7fe fd39 	bl	800b6ac <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800cc3a:	4b59      	ldr	r3, [pc, #356]	@ (800cda0 <tcp_process+0x7dc>)
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	687a      	ldr	r2, [r7, #4]
 800cc40:	429a      	cmp	r2, r3
 800cc42:	d105      	bne.n	800cc50 <tcp_process+0x68c>
 800cc44:	4b56      	ldr	r3, [pc, #344]	@ (800cda0 <tcp_process+0x7dc>)
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	68db      	ldr	r3, [r3, #12]
 800cc4a:	4a55      	ldr	r2, [pc, #340]	@ (800cda0 <tcp_process+0x7dc>)
 800cc4c:	6013      	str	r3, [r2, #0]
 800cc4e:	e013      	b.n	800cc78 <tcp_process+0x6b4>
 800cc50:	4b53      	ldr	r3, [pc, #332]	@ (800cda0 <tcp_process+0x7dc>)
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	613b      	str	r3, [r7, #16]
 800cc56:	e00c      	b.n	800cc72 <tcp_process+0x6ae>
 800cc58:	693b      	ldr	r3, [r7, #16]
 800cc5a:	68db      	ldr	r3, [r3, #12]
 800cc5c:	687a      	ldr	r2, [r7, #4]
 800cc5e:	429a      	cmp	r2, r3
 800cc60:	d104      	bne.n	800cc6c <tcp_process+0x6a8>
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	68da      	ldr	r2, [r3, #12]
 800cc66:	693b      	ldr	r3, [r7, #16]
 800cc68:	60da      	str	r2, [r3, #12]
 800cc6a:	e005      	b.n	800cc78 <tcp_process+0x6b4>
 800cc6c:	693b      	ldr	r3, [r7, #16]
 800cc6e:	68db      	ldr	r3, [r3, #12]
 800cc70:	613b      	str	r3, [r7, #16]
 800cc72:	693b      	ldr	r3, [r7, #16]
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d1ef      	bne.n	800cc58 <tcp_process+0x694>
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	2200      	movs	r2, #0
 800cc7c:	60da      	str	r2, [r3, #12]
 800cc7e:	4b43      	ldr	r3, [pc, #268]	@ (800cd8c <tcp_process+0x7c8>)
 800cc80:	2201      	movs	r2, #1
 800cc82:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	220a      	movs	r2, #10
 800cc88:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800cc8a:	4b41      	ldr	r3, [pc, #260]	@ (800cd90 <tcp_process+0x7cc>)
 800cc8c:	681a      	ldr	r2, [r3, #0]
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	60da      	str	r2, [r3, #12]
 800cc92:	4a3f      	ldr	r2, [pc, #252]	@ (800cd90 <tcp_process+0x7cc>)
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	6013      	str	r3, [r2, #0]
 800cc98:	f002 fc8c 	bl	800f5b4 <tcp_timer_needed>
      }
      break;
 800cc9c:	e06c      	b.n	800cd78 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800cc9e:	6878      	ldr	r0, [r7, #4]
 800cca0:	f000 f984 	bl	800cfac <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800cca4:	4b3b      	ldr	r3, [pc, #236]	@ (800cd94 <tcp_process+0x7d0>)
 800cca6:	781b      	ldrb	r3, [r3, #0]
 800cca8:	f003 0310 	and.w	r3, r3, #16
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d065      	beq.n	800cd7c <tcp_process+0x7b8>
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ccb4:	4b38      	ldr	r3, [pc, #224]	@ (800cd98 <tcp_process+0x7d4>)
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	429a      	cmp	r2, r3
 800ccba:	d15f      	bne.n	800cd7c <tcp_process+0x7b8>
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d15b      	bne.n	800cd7c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800ccc4:	6878      	ldr	r0, [r7, #4]
 800ccc6:	f7fe fcf1 	bl	800b6ac <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800ccca:	4b35      	ldr	r3, [pc, #212]	@ (800cda0 <tcp_process+0x7dc>)
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	687a      	ldr	r2, [r7, #4]
 800ccd0:	429a      	cmp	r2, r3
 800ccd2:	d105      	bne.n	800cce0 <tcp_process+0x71c>
 800ccd4:	4b32      	ldr	r3, [pc, #200]	@ (800cda0 <tcp_process+0x7dc>)
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	68db      	ldr	r3, [r3, #12]
 800ccda:	4a31      	ldr	r2, [pc, #196]	@ (800cda0 <tcp_process+0x7dc>)
 800ccdc:	6013      	str	r3, [r2, #0]
 800ccde:	e013      	b.n	800cd08 <tcp_process+0x744>
 800cce0:	4b2f      	ldr	r3, [pc, #188]	@ (800cda0 <tcp_process+0x7dc>)
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	60fb      	str	r3, [r7, #12]
 800cce6:	e00c      	b.n	800cd02 <tcp_process+0x73e>
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	68db      	ldr	r3, [r3, #12]
 800ccec:	687a      	ldr	r2, [r7, #4]
 800ccee:	429a      	cmp	r2, r3
 800ccf0:	d104      	bne.n	800ccfc <tcp_process+0x738>
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	68da      	ldr	r2, [r3, #12]
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	60da      	str	r2, [r3, #12]
 800ccfa:	e005      	b.n	800cd08 <tcp_process+0x744>
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	68db      	ldr	r3, [r3, #12]
 800cd00:	60fb      	str	r3, [r7, #12]
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d1ef      	bne.n	800cce8 <tcp_process+0x724>
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	2200      	movs	r2, #0
 800cd0c:	60da      	str	r2, [r3, #12]
 800cd0e:	4b1f      	ldr	r3, [pc, #124]	@ (800cd8c <tcp_process+0x7c8>)
 800cd10:	2201      	movs	r2, #1
 800cd12:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	220a      	movs	r2, #10
 800cd18:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800cd1a:	4b1d      	ldr	r3, [pc, #116]	@ (800cd90 <tcp_process+0x7cc>)
 800cd1c:	681a      	ldr	r2, [r3, #0]
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	60da      	str	r2, [r3, #12]
 800cd22:	4a1b      	ldr	r2, [pc, #108]	@ (800cd90 <tcp_process+0x7cc>)
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	6013      	str	r3, [r2, #0]
 800cd28:	f002 fc44 	bl	800f5b4 <tcp_timer_needed>
      }
      break;
 800cd2c:	e026      	b.n	800cd7c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800cd2e:	6878      	ldr	r0, [r7, #4]
 800cd30:	f000 f93c 	bl	800cfac <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800cd34:	4b17      	ldr	r3, [pc, #92]	@ (800cd94 <tcp_process+0x7d0>)
 800cd36:	781b      	ldrb	r3, [r3, #0]
 800cd38:	f003 0310 	and.w	r3, r3, #16
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d01f      	beq.n	800cd80 <tcp_process+0x7bc>
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800cd44:	4b14      	ldr	r3, [pc, #80]	@ (800cd98 <tcp_process+0x7d4>)
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	429a      	cmp	r2, r3
 800cd4a:	d119      	bne.n	800cd80 <tcp_process+0x7bc>
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d115      	bne.n	800cd80 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800cd54:	4b11      	ldr	r3, [pc, #68]	@ (800cd9c <tcp_process+0x7d8>)
 800cd56:	781b      	ldrb	r3, [r3, #0]
 800cd58:	f043 0310 	orr.w	r3, r3, #16
 800cd5c:	b2da      	uxtb	r2, r3
 800cd5e:	4b0f      	ldr	r3, [pc, #60]	@ (800cd9c <tcp_process+0x7d8>)
 800cd60:	701a      	strb	r2, [r3, #0]
      }
      break;
 800cd62:	e00d      	b.n	800cd80 <tcp_process+0x7bc>
    default:
      break;
 800cd64:	bf00      	nop
 800cd66:	e00c      	b.n	800cd82 <tcp_process+0x7be>
      break;
 800cd68:	bf00      	nop
 800cd6a:	e00a      	b.n	800cd82 <tcp_process+0x7be>
      break;
 800cd6c:	bf00      	nop
 800cd6e:	e008      	b.n	800cd82 <tcp_process+0x7be>
      break;
 800cd70:	bf00      	nop
 800cd72:	e006      	b.n	800cd82 <tcp_process+0x7be>
      break;
 800cd74:	bf00      	nop
 800cd76:	e004      	b.n	800cd82 <tcp_process+0x7be>
      break;
 800cd78:	bf00      	nop
 800cd7a:	e002      	b.n	800cd82 <tcp_process+0x7be>
      break;
 800cd7c:	bf00      	nop
 800cd7e:	e000      	b.n	800cd82 <tcp_process+0x7be>
      break;
 800cd80:	bf00      	nop
  }
  return ERR_OK;
 800cd82:	2300      	movs	r3, #0
}
 800cd84:	4618      	mov	r0, r3
 800cd86:	3724      	adds	r7, #36	@ 0x24
 800cd88:	46bd      	mov	sp, r7
 800cd8a:	bd90      	pop	{r4, r7, pc}
 800cd8c:	20008920 	.word	0x20008920
 800cd90:	2000891c 	.word	0x2000891c
 800cd94:	20008950 	.word	0x20008950
 800cd98:	20008948 	.word	0x20008948
 800cd9c:	20008951 	.word	0x20008951
 800cda0:	20008918 	.word	0x20008918

0800cda4 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800cda4:	b590      	push	{r4, r7, lr}
 800cda6:	b085      	sub	sp, #20
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	6078      	str	r0, [r7, #4]
 800cdac:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d106      	bne.n	800cdc2 <tcp_oos_insert_segment+0x1e>
 800cdb4:	4b3b      	ldr	r3, [pc, #236]	@ (800cea4 <tcp_oos_insert_segment+0x100>)
 800cdb6:	f240 421f 	movw	r2, #1055	@ 0x41f
 800cdba:	493b      	ldr	r1, [pc, #236]	@ (800cea8 <tcp_oos_insert_segment+0x104>)
 800cdbc:	483b      	ldr	r0, [pc, #236]	@ (800ceac <tcp_oos_insert_segment+0x108>)
 800cdbe:	f005 ff61 	bl	8012c84 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	68db      	ldr	r3, [r3, #12]
 800cdc6:	899b      	ldrh	r3, [r3, #12]
 800cdc8:	b29b      	uxth	r3, r3
 800cdca:	4618      	mov	r0, r3
 800cdcc:	f7fb fc0c 	bl	80085e8 <lwip_htons>
 800cdd0:	4603      	mov	r3, r0
 800cdd2:	b2db      	uxtb	r3, r3
 800cdd4:	f003 0301 	and.w	r3, r3, #1
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d028      	beq.n	800ce2e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800cddc:	6838      	ldr	r0, [r7, #0]
 800cdde:	f7fe fa63 	bl	800b2a8 <tcp_segs_free>
    next = NULL;
 800cde2:	2300      	movs	r3, #0
 800cde4:	603b      	str	r3, [r7, #0]
 800cde6:	e056      	b.n	800ce96 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800cde8:	683b      	ldr	r3, [r7, #0]
 800cdea:	68db      	ldr	r3, [r3, #12]
 800cdec:	899b      	ldrh	r3, [r3, #12]
 800cdee:	b29b      	uxth	r3, r3
 800cdf0:	4618      	mov	r0, r3
 800cdf2:	f7fb fbf9 	bl	80085e8 <lwip_htons>
 800cdf6:	4603      	mov	r3, r0
 800cdf8:	b2db      	uxtb	r3, r3
 800cdfa:	f003 0301 	and.w	r3, r3, #1
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d00d      	beq.n	800ce1e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	68db      	ldr	r3, [r3, #12]
 800ce06:	899b      	ldrh	r3, [r3, #12]
 800ce08:	b29c      	uxth	r4, r3
 800ce0a:	2001      	movs	r0, #1
 800ce0c:	f7fb fbec 	bl	80085e8 <lwip_htons>
 800ce10:	4603      	mov	r3, r0
 800ce12:	461a      	mov	r2, r3
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	68db      	ldr	r3, [r3, #12]
 800ce18:	4322      	orrs	r2, r4
 800ce1a:	b292      	uxth	r2, r2
 800ce1c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800ce1e:	683b      	ldr	r3, [r7, #0]
 800ce20:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800ce22:	683b      	ldr	r3, [r7, #0]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800ce28:	68f8      	ldr	r0, [r7, #12]
 800ce2a:	f7fe fa52 	bl	800b2d2 <tcp_seg_free>
    while (next &&
 800ce2e:	683b      	ldr	r3, [r7, #0]
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d00e      	beq.n	800ce52 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	891b      	ldrh	r3, [r3, #8]
 800ce38:	461a      	mov	r2, r3
 800ce3a:	4b1d      	ldr	r3, [pc, #116]	@ (800ceb0 <tcp_oos_insert_segment+0x10c>)
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	441a      	add	r2, r3
 800ce40:	683b      	ldr	r3, [r7, #0]
 800ce42:	68db      	ldr	r3, [r3, #12]
 800ce44:	685b      	ldr	r3, [r3, #4]
 800ce46:	6839      	ldr	r1, [r7, #0]
 800ce48:	8909      	ldrh	r1, [r1, #8]
 800ce4a:	440b      	add	r3, r1
 800ce4c:	1ad3      	subs	r3, r2, r3
    while (next &&
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	daca      	bge.n	800cde8 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800ce52:	683b      	ldr	r3, [r7, #0]
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d01e      	beq.n	800ce96 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	891b      	ldrh	r3, [r3, #8]
 800ce5c:	461a      	mov	r2, r3
 800ce5e:	4b14      	ldr	r3, [pc, #80]	@ (800ceb0 <tcp_oos_insert_segment+0x10c>)
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	441a      	add	r2, r3
 800ce64:	683b      	ldr	r3, [r7, #0]
 800ce66:	68db      	ldr	r3, [r3, #12]
 800ce68:	685b      	ldr	r3, [r3, #4]
 800ce6a:	1ad3      	subs	r3, r2, r3
    if (next &&
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	dd12      	ble.n	800ce96 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800ce70:	683b      	ldr	r3, [r7, #0]
 800ce72:	68db      	ldr	r3, [r3, #12]
 800ce74:	685b      	ldr	r3, [r3, #4]
 800ce76:	b29a      	uxth	r2, r3
 800ce78:	4b0d      	ldr	r3, [pc, #52]	@ (800ceb0 <tcp_oos_insert_segment+0x10c>)
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	b29b      	uxth	r3, r3
 800ce7e:	1ad3      	subs	r3, r2, r3
 800ce80:	b29a      	uxth	r2, r3
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	685a      	ldr	r2, [r3, #4]
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	891b      	ldrh	r3, [r3, #8]
 800ce8e:	4619      	mov	r1, r3
 800ce90:	4610      	mov	r0, r2
 800ce92:	f7fc fd81 	bl	8009998 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	683a      	ldr	r2, [r7, #0]
 800ce9a:	601a      	str	r2, [r3, #0]
}
 800ce9c:	bf00      	nop
 800ce9e:	3714      	adds	r7, #20
 800cea0:	46bd      	mov	sp, r7
 800cea2:	bd90      	pop	{r4, r7, pc}
 800cea4:	0801509c 	.word	0x0801509c
 800cea8:	0801535c 	.word	0x0801535c
 800ceac:	080150e8 	.word	0x080150e8
 800ceb0:	20008944 	.word	0x20008944

0800ceb4 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800ceb4:	b5b0      	push	{r4, r5, r7, lr}
 800ceb6:	b086      	sub	sp, #24
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	60f8      	str	r0, [r7, #12]
 800cebc:	60b9      	str	r1, [r7, #8]
 800cebe:	607a      	str	r2, [r7, #4]
 800cec0:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800cec2:	e03e      	b.n	800cf42 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800cec4:	68bb      	ldr	r3, [r7, #8]
 800cec6:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800cec8:	68bb      	ldr	r3, [r7, #8]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800cece:	697b      	ldr	r3, [r7, #20]
 800ced0:	685b      	ldr	r3, [r3, #4]
 800ced2:	4618      	mov	r0, r3
 800ced4:	f7fc ff6e 	bl	8009db4 <pbuf_clen>
 800ced8:	4603      	mov	r3, r0
 800ceda:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800cee2:	8a7a      	ldrh	r2, [r7, #18]
 800cee4:	429a      	cmp	r2, r3
 800cee6:	d906      	bls.n	800cef6 <tcp_free_acked_segments+0x42>
 800cee8:	4b2a      	ldr	r3, [pc, #168]	@ (800cf94 <tcp_free_acked_segments+0xe0>)
 800ceea:	f240 4257 	movw	r2, #1111	@ 0x457
 800ceee:	492a      	ldr	r1, [pc, #168]	@ (800cf98 <tcp_free_acked_segments+0xe4>)
 800cef0:	482a      	ldr	r0, [pc, #168]	@ (800cf9c <tcp_free_acked_segments+0xe8>)
 800cef2:	f005 fec7 	bl	8012c84 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 800cefc:	8a7b      	ldrh	r3, [r7, #18]
 800cefe:	1ad3      	subs	r3, r2, r3
 800cf00:	b29a      	uxth	r2, r3
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800cf08:	697b      	ldr	r3, [r7, #20]
 800cf0a:	891a      	ldrh	r2, [r3, #8]
 800cf0c:	4b24      	ldr	r3, [pc, #144]	@ (800cfa0 <tcp_free_acked_segments+0xec>)
 800cf0e:	881b      	ldrh	r3, [r3, #0]
 800cf10:	4413      	add	r3, r2
 800cf12:	b29a      	uxth	r2, r3
 800cf14:	4b22      	ldr	r3, [pc, #136]	@ (800cfa0 <tcp_free_acked_segments+0xec>)
 800cf16:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800cf18:	6978      	ldr	r0, [r7, #20]
 800cf1a:	f7fe f9da 	bl	800b2d2 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d00c      	beq.n	800cf42 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800cf28:	68bb      	ldr	r3, [r7, #8]
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d109      	bne.n	800cf42 <tcp_free_acked_segments+0x8e>
 800cf2e:	683b      	ldr	r3, [r7, #0]
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d106      	bne.n	800cf42 <tcp_free_acked_segments+0x8e>
 800cf34:	4b17      	ldr	r3, [pc, #92]	@ (800cf94 <tcp_free_acked_segments+0xe0>)
 800cf36:	f240 4261 	movw	r2, #1121	@ 0x461
 800cf3a:	491a      	ldr	r1, [pc, #104]	@ (800cfa4 <tcp_free_acked_segments+0xf0>)
 800cf3c:	4817      	ldr	r0, [pc, #92]	@ (800cf9c <tcp_free_acked_segments+0xe8>)
 800cf3e:	f005 fea1 	bl	8012c84 <iprintf>
  while (seg_list != NULL &&
 800cf42:	68bb      	ldr	r3, [r7, #8]
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d020      	beq.n	800cf8a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800cf48:	68bb      	ldr	r3, [r7, #8]
 800cf4a:	68db      	ldr	r3, [r3, #12]
 800cf4c:	685b      	ldr	r3, [r3, #4]
 800cf4e:	4618      	mov	r0, r3
 800cf50:	f7fb fb60 	bl	8008614 <lwip_htonl>
 800cf54:	4604      	mov	r4, r0
 800cf56:	68bb      	ldr	r3, [r7, #8]
 800cf58:	891b      	ldrh	r3, [r3, #8]
 800cf5a:	461d      	mov	r5, r3
 800cf5c:	68bb      	ldr	r3, [r7, #8]
 800cf5e:	68db      	ldr	r3, [r3, #12]
 800cf60:	899b      	ldrh	r3, [r3, #12]
 800cf62:	b29b      	uxth	r3, r3
 800cf64:	4618      	mov	r0, r3
 800cf66:	f7fb fb3f 	bl	80085e8 <lwip_htons>
 800cf6a:	4603      	mov	r3, r0
 800cf6c:	b2db      	uxtb	r3, r3
 800cf6e:	f003 0303 	and.w	r3, r3, #3
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d001      	beq.n	800cf7a <tcp_free_acked_segments+0xc6>
 800cf76:	2301      	movs	r3, #1
 800cf78:	e000      	b.n	800cf7c <tcp_free_acked_segments+0xc8>
 800cf7a:	2300      	movs	r3, #0
 800cf7c:	442b      	add	r3, r5
 800cf7e:	18e2      	adds	r2, r4, r3
 800cf80:	4b09      	ldr	r3, [pc, #36]	@ (800cfa8 <tcp_free_acked_segments+0xf4>)
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	dd9c      	ble.n	800cec4 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800cf8a:	68bb      	ldr	r3, [r7, #8]
}
 800cf8c:	4618      	mov	r0, r3
 800cf8e:	3718      	adds	r7, #24
 800cf90:	46bd      	mov	sp, r7
 800cf92:	bdb0      	pop	{r4, r5, r7, pc}
 800cf94:	0801509c 	.word	0x0801509c
 800cf98:	08015384 	.word	0x08015384
 800cf9c:	080150e8 	.word	0x080150e8
 800cfa0:	2000894c 	.word	0x2000894c
 800cfa4:	080153ac 	.word	0x080153ac
 800cfa8:	20008948 	.word	0x20008948

0800cfac <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800cfac:	b5b0      	push	{r4, r5, r7, lr}
 800cfae:	b094      	sub	sp, #80	@ 0x50
 800cfb0:	af00      	add	r7, sp, #0
 800cfb2:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800cfb4:	2300      	movs	r3, #0
 800cfb6:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d106      	bne.n	800cfcc <tcp_receive+0x20>
 800cfbe:	4b91      	ldr	r3, [pc, #580]	@ (800d204 <tcp_receive+0x258>)
 800cfc0:	f240 427b 	movw	r2, #1147	@ 0x47b
 800cfc4:	4990      	ldr	r1, [pc, #576]	@ (800d208 <tcp_receive+0x25c>)
 800cfc6:	4891      	ldr	r0, [pc, #580]	@ (800d20c <tcp_receive+0x260>)
 800cfc8:	f005 fe5c 	bl	8012c84 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	7d1b      	ldrb	r3, [r3, #20]
 800cfd0:	2b03      	cmp	r3, #3
 800cfd2:	d806      	bhi.n	800cfe2 <tcp_receive+0x36>
 800cfd4:	4b8b      	ldr	r3, [pc, #556]	@ (800d204 <tcp_receive+0x258>)
 800cfd6:	f240 427c 	movw	r2, #1148	@ 0x47c
 800cfda:	498d      	ldr	r1, [pc, #564]	@ (800d210 <tcp_receive+0x264>)
 800cfdc:	488b      	ldr	r0, [pc, #556]	@ (800d20c <tcp_receive+0x260>)
 800cfde:	f005 fe51 	bl	8012c84 <iprintf>

  if (flags & TCP_ACK) {
 800cfe2:	4b8c      	ldr	r3, [pc, #560]	@ (800d214 <tcp_receive+0x268>)
 800cfe4:	781b      	ldrb	r3, [r3, #0]
 800cfe6:	f003 0310 	and.w	r3, r3, #16
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	f000 8264 	beq.w	800d4b8 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800cff6:	461a      	mov	r2, r3
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cffc:	4413      	add	r3, r2
 800cffe:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d004:	4b84      	ldr	r3, [pc, #528]	@ (800d218 <tcp_receive+0x26c>)
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	1ad3      	subs	r3, r2, r3
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	db1b      	blt.n	800d046 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d012:	4b81      	ldr	r3, [pc, #516]	@ (800d218 <tcp_receive+0x26c>)
 800d014:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800d016:	429a      	cmp	r2, r3
 800d018:	d106      	bne.n	800d028 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800d01e:	4b7f      	ldr	r3, [pc, #508]	@ (800d21c <tcp_receive+0x270>)
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	1ad3      	subs	r3, r2, r3
 800d024:	2b00      	cmp	r3, #0
 800d026:	db0e      	blt.n	800d046 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800d02c:	4b7b      	ldr	r3, [pc, #492]	@ (800d21c <tcp_receive+0x270>)
 800d02e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800d030:	429a      	cmp	r2, r3
 800d032:	d125      	bne.n	800d080 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800d034:	4b7a      	ldr	r3, [pc, #488]	@ (800d220 <tcp_receive+0x274>)
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	89db      	ldrh	r3, [r3, #14]
 800d03a:	b29a      	uxth	r2, r3
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d042:	429a      	cmp	r2, r3
 800d044:	d91c      	bls.n	800d080 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800d046:	4b76      	ldr	r3, [pc, #472]	@ (800d220 <tcp_receive+0x274>)
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	89db      	ldrh	r3, [r3, #14]
 800d04c:	b29a      	uxth	r2, r3
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800d060:	429a      	cmp	r2, r3
 800d062:	d205      	bcs.n	800d070 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 800d070:	4b69      	ldr	r3, [pc, #420]	@ (800d218 <tcp_receive+0x26c>)
 800d072:	681a      	ldr	r2, [r3, #0]
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 800d078:	4b68      	ldr	r3, [pc, #416]	@ (800d21c <tcp_receive+0x270>)
 800d07a:	681a      	ldr	r2, [r3, #0]
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800d080:	4b66      	ldr	r3, [pc, #408]	@ (800d21c <tcp_receive+0x270>)
 800d082:	681a      	ldr	r2, [r3, #0]
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d088:	1ad3      	subs	r3, r2, r3
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	dc58      	bgt.n	800d140 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800d08e:	4b65      	ldr	r3, [pc, #404]	@ (800d224 <tcp_receive+0x278>)
 800d090:	881b      	ldrh	r3, [r3, #0]
 800d092:	2b00      	cmp	r3, #0
 800d094:	d14b      	bne.n	800d12e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d09a:	687a      	ldr	r2, [r7, #4]
 800d09c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 800d0a0:	4413      	add	r3, r2
 800d0a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d0a4:	429a      	cmp	r2, r3
 800d0a6:	d142      	bne.n	800d12e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	db3d      	blt.n	800d12e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d0b6:	4b59      	ldr	r3, [pc, #356]	@ (800d21c <tcp_receive+0x270>)
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	429a      	cmp	r2, r3
 800d0bc:	d137      	bne.n	800d12e <tcp_receive+0x182>
              found_dupack = 1;
 800d0be:	2301      	movs	r3, #1
 800d0c0:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800d0c8:	2bff      	cmp	r3, #255	@ 0xff
 800d0ca:	d007      	beq.n	800d0dc <tcp_receive+0x130>
                ++pcb->dupacks;
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800d0d2:	3301      	adds	r3, #1
 800d0d4:	b2da      	uxtb	r2, r3
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800d0e2:	2b03      	cmp	r3, #3
 800d0e4:	d91b      	bls.n	800d11e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d0f0:	4413      	add	r3, r2
 800d0f2:	b29a      	uxth	r2, r3
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800d0fa:	429a      	cmp	r2, r3
 800d0fc:	d30a      	bcc.n	800d114 <tcp_receive+0x168>
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d108:	4413      	add	r3, r2
 800d10a:	b29a      	uxth	r2, r3
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800d112:	e004      	b.n	800d11e <tcp_receive+0x172>
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d11a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800d124:	2b02      	cmp	r3, #2
 800d126:	d902      	bls.n	800d12e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800d128:	6878      	ldr	r0, [r7, #4]
 800d12a:	f001 fee7 	bl	800eefc <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800d12e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d130:	2b00      	cmp	r3, #0
 800d132:	f040 8161 	bne.w	800d3f8 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	2200      	movs	r2, #0
 800d13a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800d13e:	e15b      	b.n	800d3f8 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d140:	4b36      	ldr	r3, [pc, #216]	@ (800d21c <tcp_receive+0x270>)
 800d142:	681a      	ldr	r2, [r3, #0]
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d148:	1ad3      	subs	r3, r2, r3
 800d14a:	3b01      	subs	r3, #1
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	f2c0 814e 	blt.w	800d3ee <tcp_receive+0x442>
 800d152:	4b32      	ldr	r3, [pc, #200]	@ (800d21c <tcp_receive+0x270>)
 800d154:	681a      	ldr	r2, [r3, #0]
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d15a:	1ad3      	subs	r3, r2, r3
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	f300 8146 	bgt.w	800d3ee <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	8b5b      	ldrh	r3, [r3, #26]
 800d166:	f003 0304 	and.w	r3, r3, #4
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d010      	beq.n	800d190 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	8b5b      	ldrh	r3, [r3, #26]
 800d172:	f023 0304 	bic.w	r3, r3, #4
 800d176:	b29a      	uxth	r2, r3
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	2200      	movs	r2, #0
 800d18c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	2200      	movs	r2, #0
 800d194:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800d19e:	10db      	asrs	r3, r3, #3
 800d1a0:	b21b      	sxth	r3, r3
 800d1a2:	b29a      	uxth	r2, r3
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800d1aa:	b29b      	uxth	r3, r3
 800d1ac:	4413      	add	r3, r2
 800d1ae:	b29b      	uxth	r3, r3
 800d1b0:	b21a      	sxth	r2, r3
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800d1b8:	4b18      	ldr	r3, [pc, #96]	@ (800d21c <tcp_receive+0x270>)
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	b29a      	uxth	r2, r3
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d1c2:	b29b      	uxth	r3, r3
 800d1c4:	1ad3      	subs	r3, r2, r3
 800d1c6:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	2200      	movs	r2, #0
 800d1cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 800d1d0:	4b12      	ldr	r3, [pc, #72]	@ (800d21c <tcp_receive+0x270>)
 800d1d2:	681a      	ldr	r2, [r3, #0]
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	7d1b      	ldrb	r3, [r3, #20]
 800d1dc:	2b03      	cmp	r3, #3
 800d1de:	f240 8097 	bls.w	800d310 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800d1ee:	429a      	cmp	r2, r3
 800d1f0:	d245      	bcs.n	800d27e <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	8b5b      	ldrh	r3, [r3, #26]
 800d1f6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d014      	beq.n	800d228 <tcp_receive+0x27c>
 800d1fe:	2301      	movs	r3, #1
 800d200:	e013      	b.n	800d22a <tcp_receive+0x27e>
 800d202:	bf00      	nop
 800d204:	0801509c 	.word	0x0801509c
 800d208:	080153cc 	.word	0x080153cc
 800d20c:	080150e8 	.word	0x080150e8
 800d210:	080153e8 	.word	0x080153e8
 800d214:	20008950 	.word	0x20008950
 800d218:	20008944 	.word	0x20008944
 800d21c:	20008948 	.word	0x20008948
 800d220:	20008934 	.word	0x20008934
 800d224:	2000894e 	.word	0x2000894e
 800d228:	2302      	movs	r3, #2
 800d22a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800d22e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800d232:	b29a      	uxth	r2, r3
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d238:	fb12 f303 	smulbb	r3, r2, r3
 800d23c:	b29b      	uxth	r3, r3
 800d23e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800d240:	4293      	cmp	r3, r2
 800d242:	bf28      	it	cs
 800d244:	4613      	movcs	r3, r2
 800d246:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800d24e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800d250:	4413      	add	r3, r2
 800d252:	b29a      	uxth	r2, r3
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800d25a:	429a      	cmp	r2, r3
 800d25c:	d309      	bcc.n	800d272 <tcp_receive+0x2c6>
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800d264:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800d266:	4413      	add	r3, r2
 800d268:	b29a      	uxth	r2, r3
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800d270:	e04e      	b.n	800d310 <tcp_receive+0x364>
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d278:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800d27c:	e048      	b.n	800d310 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800d284:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800d286:	4413      	add	r3, r2
 800d288:	b29a      	uxth	r2, r3
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800d290:	429a      	cmp	r2, r3
 800d292:	d309      	bcc.n	800d2a8 <tcp_receive+0x2fc>
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800d29a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800d29c:	4413      	add	r3, r2
 800d29e:	b29a      	uxth	r2, r3
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800d2a6:	e004      	b.n	800d2b2 <tcp_receive+0x306>
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d2ae:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800d2be:	429a      	cmp	r2, r3
 800d2c0:	d326      	bcc.n	800d310 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800d2ce:	1ad3      	subs	r3, r2, r3
 800d2d0:	b29a      	uxth	r2, r3
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d2e2:	4413      	add	r3, r2
 800d2e4:	b29a      	uxth	r2, r3
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800d2ec:	429a      	cmp	r2, r3
 800d2ee:	d30a      	bcc.n	800d306 <tcp_receive+0x35a>
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d2fa:	4413      	add	r3, r2
 800d2fc:	b29a      	uxth	r2, r3
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800d304:	e004      	b.n	800d310 <tcp_receive+0x364>
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d30c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d318:	4a98      	ldr	r2, [pc, #608]	@ (800d57c <tcp_receive+0x5d0>)
 800d31a:	6878      	ldr	r0, [r7, #4]
 800d31c:	f7ff fdca 	bl	800ceb4 <tcp_free_acked_segments>
 800d320:	4602      	mov	r2, r0
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d32e:	4a94      	ldr	r2, [pc, #592]	@ (800d580 <tcp_receive+0x5d4>)
 800d330:	6878      	ldr	r0, [r7, #4]
 800d332:	f7ff fdbf 	bl	800ceb4 <tcp_free_acked_segments>
 800d336:	4602      	mov	r2, r0
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d340:	2b00      	cmp	r3, #0
 800d342:	d104      	bne.n	800d34e <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d34a:	861a      	strh	r2, [r3, #48]	@ 0x30
 800d34c:	e002      	b.n	800d354 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	2200      	movs	r2, #0
 800d352:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	2200      	movs	r2, #0
 800d358:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d103      	bne.n	800d36a <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	2200      	movs	r2, #0
 800d366:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800d370:	4b84      	ldr	r3, [pc, #528]	@ (800d584 <tcp_receive+0x5d8>)
 800d372:	881b      	ldrh	r3, [r3, #0]
 800d374:	4413      	add	r3, r2
 800d376:	b29a      	uxth	r2, r3
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	8b5b      	ldrh	r3, [r3, #26]
 800d382:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d386:	2b00      	cmp	r3, #0
 800d388:	d035      	beq.n	800d3f6 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d118      	bne.n	800d3c4 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d396:	2b00      	cmp	r3, #0
 800d398:	d00c      	beq.n	800d3b4 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d3a2:	68db      	ldr	r3, [r3, #12]
 800d3a4:	685b      	ldr	r3, [r3, #4]
 800d3a6:	4618      	mov	r0, r3
 800d3a8:	f7fb f934 	bl	8008614 <lwip_htonl>
 800d3ac:	4603      	mov	r3, r0
 800d3ae:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	dc20      	bgt.n	800d3f6 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	8b5b      	ldrh	r3, [r3, #26]
 800d3b8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d3bc:	b29a      	uxth	r2, r3
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d3c2:	e018      	b.n	800d3f6 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d3cc:	68db      	ldr	r3, [r3, #12]
 800d3ce:	685b      	ldr	r3, [r3, #4]
 800d3d0:	4618      	mov	r0, r3
 800d3d2:	f7fb f91f 	bl	8008614 <lwip_htonl>
 800d3d6:	4603      	mov	r3, r0
 800d3d8:	1ae3      	subs	r3, r4, r3
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	dc0b      	bgt.n	800d3f6 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	8b5b      	ldrh	r3, [r3, #26]
 800d3e2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d3e6:	b29a      	uxth	r2, r3
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d3ec:	e003      	b.n	800d3f6 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800d3ee:	6878      	ldr	r0, [r7, #4]
 800d3f0:	f001 ff70 	bl	800f2d4 <tcp_send_empty_ack>
 800d3f4:	e000      	b.n	800d3f8 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d3f6:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d05b      	beq.n	800d4b8 <tcp_receive+0x50c>
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d404:	4b60      	ldr	r3, [pc, #384]	@ (800d588 <tcp_receive+0x5dc>)
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	1ad3      	subs	r3, r2, r3
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	da54      	bge.n	800d4b8 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800d40e:	4b5f      	ldr	r3, [pc, #380]	@ (800d58c <tcp_receive+0x5e0>)
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	b29a      	uxth	r2, r3
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d418:	b29b      	uxth	r3, r3
 800d41a:	1ad3      	subs	r3, r2, r3
 800d41c:	b29b      	uxth	r3, r3
 800d41e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800d422:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800d42c:	10db      	asrs	r3, r3, #3
 800d42e:	b21b      	sxth	r3, r3
 800d430:	b29b      	uxth	r3, r3
 800d432:	1ad3      	subs	r3, r2, r3
 800d434:	b29b      	uxth	r3, r3
 800d436:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800d440:	b29a      	uxth	r2, r3
 800d442:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800d446:	4413      	add	r3, r2
 800d448:	b29b      	uxth	r3, r3
 800d44a:	b21a      	sxth	r2, r3
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 800d450:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800d454:	2b00      	cmp	r3, #0
 800d456:	da05      	bge.n	800d464 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800d458:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800d45c:	425b      	negs	r3, r3
 800d45e:	b29b      	uxth	r3, r3
 800d460:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800d464:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800d46e:	109b      	asrs	r3, r3, #2
 800d470:	b21b      	sxth	r3, r3
 800d472:	b29b      	uxth	r3, r3
 800d474:	1ad3      	subs	r3, r2, r3
 800d476:	b29b      	uxth	r3, r3
 800d478:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800d482:	b29a      	uxth	r2, r3
 800d484:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800d488:	4413      	add	r3, r2
 800d48a:	b29b      	uxth	r3, r3
 800d48c:	b21a      	sxth	r2, r3
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800d498:	10db      	asrs	r3, r3, #3
 800d49a:	b21b      	sxth	r3, r3
 800d49c:	b29a      	uxth	r2, r3
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800d4a4:	b29b      	uxth	r3, r3
 800d4a6:	4413      	add	r3, r2
 800d4a8:	b29b      	uxth	r3, r3
 800d4aa:	b21a      	sxth	r2, r3
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	2200      	movs	r2, #0
 800d4b6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800d4b8:	4b35      	ldr	r3, [pc, #212]	@ (800d590 <tcp_receive+0x5e4>)
 800d4ba:	881b      	ldrh	r3, [r3, #0]
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	f000 84df 	beq.w	800de80 <tcp_receive+0xed4>
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	7d1b      	ldrb	r3, [r3, #20]
 800d4c6:	2b06      	cmp	r3, #6
 800d4c8:	f200 84da 	bhi.w	800de80 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d4d0:	4b30      	ldr	r3, [pc, #192]	@ (800d594 <tcp_receive+0x5e8>)
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	1ad3      	subs	r3, r2, r3
 800d4d6:	3b01      	subs	r3, #1
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	f2c0 808f 	blt.w	800d5fc <tcp_receive+0x650>
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d4e2:	4b2b      	ldr	r3, [pc, #172]	@ (800d590 <tcp_receive+0x5e4>)
 800d4e4:	881b      	ldrh	r3, [r3, #0]
 800d4e6:	4619      	mov	r1, r3
 800d4e8:	4b2a      	ldr	r3, [pc, #168]	@ (800d594 <tcp_receive+0x5e8>)
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	440b      	add	r3, r1
 800d4ee:	1ad3      	subs	r3, r2, r3
 800d4f0:	3301      	adds	r3, #1
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	f300 8082 	bgt.w	800d5fc <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800d4f8:	4b27      	ldr	r3, [pc, #156]	@ (800d598 <tcp_receive+0x5ec>)
 800d4fa:	685b      	ldr	r3, [r3, #4]
 800d4fc:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d502:	4b24      	ldr	r3, [pc, #144]	@ (800d594 <tcp_receive+0x5e8>)
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	1ad3      	subs	r3, r2, r3
 800d508:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800d50a:	4b23      	ldr	r3, [pc, #140]	@ (800d598 <tcp_receive+0x5ec>)
 800d50c:	685b      	ldr	r3, [r3, #4]
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d106      	bne.n	800d520 <tcp_receive+0x574>
 800d512:	4b22      	ldr	r3, [pc, #136]	@ (800d59c <tcp_receive+0x5f0>)
 800d514:	f240 5294 	movw	r2, #1428	@ 0x594
 800d518:	4921      	ldr	r1, [pc, #132]	@ (800d5a0 <tcp_receive+0x5f4>)
 800d51a:	4822      	ldr	r0, [pc, #136]	@ (800d5a4 <tcp_receive+0x5f8>)
 800d51c:	f005 fbb2 	bl	8012c84 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800d520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d522:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800d526:	4293      	cmp	r3, r2
 800d528:	d906      	bls.n	800d538 <tcp_receive+0x58c>
 800d52a:	4b1c      	ldr	r3, [pc, #112]	@ (800d59c <tcp_receive+0x5f0>)
 800d52c:	f240 5295 	movw	r2, #1429	@ 0x595
 800d530:	491d      	ldr	r1, [pc, #116]	@ (800d5a8 <tcp_receive+0x5fc>)
 800d532:	481c      	ldr	r0, [pc, #112]	@ (800d5a4 <tcp_receive+0x5f8>)
 800d534:	f005 fba6 	bl	8012c84 <iprintf>
      off = (u16_t)off32;
 800d538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d53a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800d53e:	4b16      	ldr	r3, [pc, #88]	@ (800d598 <tcp_receive+0x5ec>)
 800d540:	685b      	ldr	r3, [r3, #4]
 800d542:	891b      	ldrh	r3, [r3, #8]
 800d544:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800d548:	429a      	cmp	r2, r3
 800d54a:	d906      	bls.n	800d55a <tcp_receive+0x5ae>
 800d54c:	4b13      	ldr	r3, [pc, #76]	@ (800d59c <tcp_receive+0x5f0>)
 800d54e:	f240 5297 	movw	r2, #1431	@ 0x597
 800d552:	4916      	ldr	r1, [pc, #88]	@ (800d5ac <tcp_receive+0x600>)
 800d554:	4813      	ldr	r0, [pc, #76]	@ (800d5a4 <tcp_receive+0x5f8>)
 800d556:	f005 fb95 	bl	8012c84 <iprintf>
      inseg.len -= off;
 800d55a:	4b0f      	ldr	r3, [pc, #60]	@ (800d598 <tcp_receive+0x5ec>)
 800d55c:	891a      	ldrh	r2, [r3, #8]
 800d55e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d562:	1ad3      	subs	r3, r2, r3
 800d564:	b29a      	uxth	r2, r3
 800d566:	4b0c      	ldr	r3, [pc, #48]	@ (800d598 <tcp_receive+0x5ec>)
 800d568:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800d56a:	4b0b      	ldr	r3, [pc, #44]	@ (800d598 <tcp_receive+0x5ec>)
 800d56c:	685b      	ldr	r3, [r3, #4]
 800d56e:	891a      	ldrh	r2, [r3, #8]
 800d570:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d574:	1ad3      	subs	r3, r2, r3
 800d576:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 800d578:	e02a      	b.n	800d5d0 <tcp_receive+0x624>
 800d57a:	bf00      	nop
 800d57c:	08015404 	.word	0x08015404
 800d580:	0801540c 	.word	0x0801540c
 800d584:	2000894c 	.word	0x2000894c
 800d588:	20008948 	.word	0x20008948
 800d58c:	2000890c 	.word	0x2000890c
 800d590:	2000894e 	.word	0x2000894e
 800d594:	20008944 	.word	0x20008944
 800d598:	20008924 	.word	0x20008924
 800d59c:	0801509c 	.word	0x0801509c
 800d5a0:	08015414 	.word	0x08015414
 800d5a4:	080150e8 	.word	0x080150e8
 800d5a8:	08015424 	.word	0x08015424
 800d5ac:	08015434 	.word	0x08015434
        off -= p->len;
 800d5b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d5b2:	895b      	ldrh	r3, [r3, #10]
 800d5b4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800d5b8:	1ad3      	subs	r3, r2, r3
 800d5ba:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800d5be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d5c0:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800d5c2:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800d5c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d5c6:	2200      	movs	r2, #0
 800d5c8:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800d5ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 800d5d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d5d2:	895b      	ldrh	r3, [r3, #10]
 800d5d4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800d5d8:	429a      	cmp	r2, r3
 800d5da:	d8e9      	bhi.n	800d5b0 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800d5dc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d5e0:	4619      	mov	r1, r3
 800d5e2:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800d5e4:	f7fc fad8 	bl	8009b98 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d5ec:	4a90      	ldr	r2, [pc, #576]	@ (800d830 <tcp_receive+0x884>)
 800d5ee:	6013      	str	r3, [r2, #0]
 800d5f0:	4b90      	ldr	r3, [pc, #576]	@ (800d834 <tcp_receive+0x888>)
 800d5f2:	68db      	ldr	r3, [r3, #12]
 800d5f4:	4a8e      	ldr	r2, [pc, #568]	@ (800d830 <tcp_receive+0x884>)
 800d5f6:	6812      	ldr	r2, [r2, #0]
 800d5f8:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800d5fa:	e00d      	b.n	800d618 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800d5fc:	4b8c      	ldr	r3, [pc, #560]	@ (800d830 <tcp_receive+0x884>)
 800d5fe:	681a      	ldr	r2, [r3, #0]
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d604:	1ad3      	subs	r3, r2, r3
 800d606:	2b00      	cmp	r3, #0
 800d608:	da06      	bge.n	800d618 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	8b5b      	ldrh	r3, [r3, #26]
 800d60e:	f043 0302 	orr.w	r3, r3, #2
 800d612:	b29a      	uxth	r2, r3
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800d618:	4b85      	ldr	r3, [pc, #532]	@ (800d830 <tcp_receive+0x884>)
 800d61a:	681a      	ldr	r2, [r3, #0]
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d620:	1ad3      	subs	r3, r2, r3
 800d622:	2b00      	cmp	r3, #0
 800d624:	f2c0 8427 	blt.w	800de76 <tcp_receive+0xeca>
 800d628:	4b81      	ldr	r3, [pc, #516]	@ (800d830 <tcp_receive+0x884>)
 800d62a:	681a      	ldr	r2, [r3, #0]
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d630:	6879      	ldr	r1, [r7, #4]
 800d632:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800d634:	440b      	add	r3, r1
 800d636:	1ad3      	subs	r3, r2, r3
 800d638:	3301      	adds	r3, #1
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	f300 841b 	bgt.w	800de76 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d644:	4b7a      	ldr	r3, [pc, #488]	@ (800d830 <tcp_receive+0x884>)
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	429a      	cmp	r2, r3
 800d64a:	f040 8298 	bne.w	800db7e <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800d64e:	4b79      	ldr	r3, [pc, #484]	@ (800d834 <tcp_receive+0x888>)
 800d650:	891c      	ldrh	r4, [r3, #8]
 800d652:	4b78      	ldr	r3, [pc, #480]	@ (800d834 <tcp_receive+0x888>)
 800d654:	68db      	ldr	r3, [r3, #12]
 800d656:	899b      	ldrh	r3, [r3, #12]
 800d658:	b29b      	uxth	r3, r3
 800d65a:	4618      	mov	r0, r3
 800d65c:	f7fa ffc4 	bl	80085e8 <lwip_htons>
 800d660:	4603      	mov	r3, r0
 800d662:	b2db      	uxtb	r3, r3
 800d664:	f003 0303 	and.w	r3, r3, #3
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d001      	beq.n	800d670 <tcp_receive+0x6c4>
 800d66c:	2301      	movs	r3, #1
 800d66e:	e000      	b.n	800d672 <tcp_receive+0x6c6>
 800d670:	2300      	movs	r3, #0
 800d672:	4423      	add	r3, r4
 800d674:	b29a      	uxth	r2, r3
 800d676:	4b70      	ldr	r3, [pc, #448]	@ (800d838 <tcp_receive+0x88c>)
 800d678:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800d67e:	4b6e      	ldr	r3, [pc, #440]	@ (800d838 <tcp_receive+0x88c>)
 800d680:	881b      	ldrh	r3, [r3, #0]
 800d682:	429a      	cmp	r2, r3
 800d684:	d274      	bcs.n	800d770 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800d686:	4b6b      	ldr	r3, [pc, #428]	@ (800d834 <tcp_receive+0x888>)
 800d688:	68db      	ldr	r3, [r3, #12]
 800d68a:	899b      	ldrh	r3, [r3, #12]
 800d68c:	b29b      	uxth	r3, r3
 800d68e:	4618      	mov	r0, r3
 800d690:	f7fa ffaa 	bl	80085e8 <lwip_htons>
 800d694:	4603      	mov	r3, r0
 800d696:	b2db      	uxtb	r3, r3
 800d698:	f003 0301 	and.w	r3, r3, #1
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d01e      	beq.n	800d6de <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800d6a0:	4b64      	ldr	r3, [pc, #400]	@ (800d834 <tcp_receive+0x888>)
 800d6a2:	68db      	ldr	r3, [r3, #12]
 800d6a4:	899b      	ldrh	r3, [r3, #12]
 800d6a6:	b29b      	uxth	r3, r3
 800d6a8:	b21b      	sxth	r3, r3
 800d6aa:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800d6ae:	b21c      	sxth	r4, r3
 800d6b0:	4b60      	ldr	r3, [pc, #384]	@ (800d834 <tcp_receive+0x888>)
 800d6b2:	68db      	ldr	r3, [r3, #12]
 800d6b4:	899b      	ldrh	r3, [r3, #12]
 800d6b6:	b29b      	uxth	r3, r3
 800d6b8:	4618      	mov	r0, r3
 800d6ba:	f7fa ff95 	bl	80085e8 <lwip_htons>
 800d6be:	4603      	mov	r3, r0
 800d6c0:	b2db      	uxtb	r3, r3
 800d6c2:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800d6c6:	b29b      	uxth	r3, r3
 800d6c8:	4618      	mov	r0, r3
 800d6ca:	f7fa ff8d 	bl	80085e8 <lwip_htons>
 800d6ce:	4603      	mov	r3, r0
 800d6d0:	b21b      	sxth	r3, r3
 800d6d2:	4323      	orrs	r3, r4
 800d6d4:	b21a      	sxth	r2, r3
 800d6d6:	4b57      	ldr	r3, [pc, #348]	@ (800d834 <tcp_receive+0x888>)
 800d6d8:	68db      	ldr	r3, [r3, #12]
 800d6da:	b292      	uxth	r2, r2
 800d6dc:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800d6e2:	4b54      	ldr	r3, [pc, #336]	@ (800d834 <tcp_receive+0x888>)
 800d6e4:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800d6e6:	4b53      	ldr	r3, [pc, #332]	@ (800d834 <tcp_receive+0x888>)
 800d6e8:	68db      	ldr	r3, [r3, #12]
 800d6ea:	899b      	ldrh	r3, [r3, #12]
 800d6ec:	b29b      	uxth	r3, r3
 800d6ee:	4618      	mov	r0, r3
 800d6f0:	f7fa ff7a 	bl	80085e8 <lwip_htons>
 800d6f4:	4603      	mov	r3, r0
 800d6f6:	b2db      	uxtb	r3, r3
 800d6f8:	f003 0302 	and.w	r3, r3, #2
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d005      	beq.n	800d70c <tcp_receive+0x760>
            inseg.len -= 1;
 800d700:	4b4c      	ldr	r3, [pc, #304]	@ (800d834 <tcp_receive+0x888>)
 800d702:	891b      	ldrh	r3, [r3, #8]
 800d704:	3b01      	subs	r3, #1
 800d706:	b29a      	uxth	r2, r3
 800d708:	4b4a      	ldr	r3, [pc, #296]	@ (800d834 <tcp_receive+0x888>)
 800d70a:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800d70c:	4b49      	ldr	r3, [pc, #292]	@ (800d834 <tcp_receive+0x888>)
 800d70e:	685b      	ldr	r3, [r3, #4]
 800d710:	4a48      	ldr	r2, [pc, #288]	@ (800d834 <tcp_receive+0x888>)
 800d712:	8912      	ldrh	r2, [r2, #8]
 800d714:	4611      	mov	r1, r2
 800d716:	4618      	mov	r0, r3
 800d718:	f7fc f93e 	bl	8009998 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800d71c:	4b45      	ldr	r3, [pc, #276]	@ (800d834 <tcp_receive+0x888>)
 800d71e:	891c      	ldrh	r4, [r3, #8]
 800d720:	4b44      	ldr	r3, [pc, #272]	@ (800d834 <tcp_receive+0x888>)
 800d722:	68db      	ldr	r3, [r3, #12]
 800d724:	899b      	ldrh	r3, [r3, #12]
 800d726:	b29b      	uxth	r3, r3
 800d728:	4618      	mov	r0, r3
 800d72a:	f7fa ff5d 	bl	80085e8 <lwip_htons>
 800d72e:	4603      	mov	r3, r0
 800d730:	b2db      	uxtb	r3, r3
 800d732:	f003 0303 	and.w	r3, r3, #3
 800d736:	2b00      	cmp	r3, #0
 800d738:	d001      	beq.n	800d73e <tcp_receive+0x792>
 800d73a:	2301      	movs	r3, #1
 800d73c:	e000      	b.n	800d740 <tcp_receive+0x794>
 800d73e:	2300      	movs	r3, #0
 800d740:	4423      	add	r3, r4
 800d742:	b29a      	uxth	r2, r3
 800d744:	4b3c      	ldr	r3, [pc, #240]	@ (800d838 <tcp_receive+0x88c>)
 800d746:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800d748:	4b3b      	ldr	r3, [pc, #236]	@ (800d838 <tcp_receive+0x88c>)
 800d74a:	881b      	ldrh	r3, [r3, #0]
 800d74c:	461a      	mov	r2, r3
 800d74e:	4b38      	ldr	r3, [pc, #224]	@ (800d830 <tcp_receive+0x884>)
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	441a      	add	r2, r3
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d758:	6879      	ldr	r1, [r7, #4]
 800d75a:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800d75c:	440b      	add	r3, r1
 800d75e:	429a      	cmp	r2, r3
 800d760:	d006      	beq.n	800d770 <tcp_receive+0x7c4>
 800d762:	4b36      	ldr	r3, [pc, #216]	@ (800d83c <tcp_receive+0x890>)
 800d764:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 800d768:	4935      	ldr	r1, [pc, #212]	@ (800d840 <tcp_receive+0x894>)
 800d76a:	4836      	ldr	r0, [pc, #216]	@ (800d844 <tcp_receive+0x898>)
 800d76c:	f005 fa8a 	bl	8012c84 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d774:	2b00      	cmp	r3, #0
 800d776:	f000 80e6 	beq.w	800d946 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800d77a:	4b2e      	ldr	r3, [pc, #184]	@ (800d834 <tcp_receive+0x888>)
 800d77c:	68db      	ldr	r3, [r3, #12]
 800d77e:	899b      	ldrh	r3, [r3, #12]
 800d780:	b29b      	uxth	r3, r3
 800d782:	4618      	mov	r0, r3
 800d784:	f7fa ff30 	bl	80085e8 <lwip_htons>
 800d788:	4603      	mov	r3, r0
 800d78a:	b2db      	uxtb	r3, r3
 800d78c:	f003 0301 	and.w	r3, r3, #1
 800d790:	2b00      	cmp	r3, #0
 800d792:	d010      	beq.n	800d7b6 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800d794:	e00a      	b.n	800d7ac <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d79a:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d7a0:	681a      	ldr	r2, [r3, #0]
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 800d7a6:	68f8      	ldr	r0, [r7, #12]
 800d7a8:	f7fd fd93 	bl	800b2d2 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d1f0      	bne.n	800d796 <tcp_receive+0x7ea>
 800d7b4:	e0c7      	b.n	800d946 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d7ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800d7bc:	e051      	b.n	800d862 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800d7be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d7c0:	68db      	ldr	r3, [r3, #12]
 800d7c2:	899b      	ldrh	r3, [r3, #12]
 800d7c4:	b29b      	uxth	r3, r3
 800d7c6:	4618      	mov	r0, r3
 800d7c8:	f7fa ff0e 	bl	80085e8 <lwip_htons>
 800d7cc:	4603      	mov	r3, r0
 800d7ce:	b2db      	uxtb	r3, r3
 800d7d0:	f003 0301 	and.w	r3, r3, #1
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d03c      	beq.n	800d852 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800d7d8:	4b16      	ldr	r3, [pc, #88]	@ (800d834 <tcp_receive+0x888>)
 800d7da:	68db      	ldr	r3, [r3, #12]
 800d7dc:	899b      	ldrh	r3, [r3, #12]
 800d7de:	b29b      	uxth	r3, r3
 800d7e0:	4618      	mov	r0, r3
 800d7e2:	f7fa ff01 	bl	80085e8 <lwip_htons>
 800d7e6:	4603      	mov	r3, r0
 800d7e8:	b2db      	uxtb	r3, r3
 800d7ea:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d12f      	bne.n	800d852 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800d7f2:	4b10      	ldr	r3, [pc, #64]	@ (800d834 <tcp_receive+0x888>)
 800d7f4:	68db      	ldr	r3, [r3, #12]
 800d7f6:	899b      	ldrh	r3, [r3, #12]
 800d7f8:	b29c      	uxth	r4, r3
 800d7fa:	2001      	movs	r0, #1
 800d7fc:	f7fa fef4 	bl	80085e8 <lwip_htons>
 800d800:	4603      	mov	r3, r0
 800d802:	461a      	mov	r2, r3
 800d804:	4b0b      	ldr	r3, [pc, #44]	@ (800d834 <tcp_receive+0x888>)
 800d806:	68db      	ldr	r3, [r3, #12]
 800d808:	4322      	orrs	r2, r4
 800d80a:	b292      	uxth	r2, r2
 800d80c:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800d80e:	4b09      	ldr	r3, [pc, #36]	@ (800d834 <tcp_receive+0x888>)
 800d810:	891c      	ldrh	r4, [r3, #8]
 800d812:	4b08      	ldr	r3, [pc, #32]	@ (800d834 <tcp_receive+0x888>)
 800d814:	68db      	ldr	r3, [r3, #12]
 800d816:	899b      	ldrh	r3, [r3, #12]
 800d818:	b29b      	uxth	r3, r3
 800d81a:	4618      	mov	r0, r3
 800d81c:	f7fa fee4 	bl	80085e8 <lwip_htons>
 800d820:	4603      	mov	r3, r0
 800d822:	b2db      	uxtb	r3, r3
 800d824:	f003 0303 	and.w	r3, r3, #3
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d00d      	beq.n	800d848 <tcp_receive+0x89c>
 800d82c:	2301      	movs	r3, #1
 800d82e:	e00c      	b.n	800d84a <tcp_receive+0x89e>
 800d830:	20008944 	.word	0x20008944
 800d834:	20008924 	.word	0x20008924
 800d838:	2000894e 	.word	0x2000894e
 800d83c:	0801509c 	.word	0x0801509c
 800d840:	08015444 	.word	0x08015444
 800d844:	080150e8 	.word	0x080150e8
 800d848:	2300      	movs	r3, #0
 800d84a:	4423      	add	r3, r4
 800d84c:	b29a      	uxth	r2, r3
 800d84e:	4b98      	ldr	r3, [pc, #608]	@ (800dab0 <tcp_receive+0xb04>)
 800d850:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800d852:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d854:	613b      	str	r3, [r7, #16]
              next = next->next;
 800d856:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 800d85c:	6938      	ldr	r0, [r7, #16]
 800d85e:	f7fd fd38 	bl	800b2d2 <tcp_seg_free>
            while (next &&
 800d862:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d864:	2b00      	cmp	r3, #0
 800d866:	d00e      	beq.n	800d886 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800d868:	4b91      	ldr	r3, [pc, #580]	@ (800dab0 <tcp_receive+0xb04>)
 800d86a:	881b      	ldrh	r3, [r3, #0]
 800d86c:	461a      	mov	r2, r3
 800d86e:	4b91      	ldr	r3, [pc, #580]	@ (800dab4 <tcp_receive+0xb08>)
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	441a      	add	r2, r3
 800d874:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d876:	68db      	ldr	r3, [r3, #12]
 800d878:	685b      	ldr	r3, [r3, #4]
 800d87a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d87c:	8909      	ldrh	r1, [r1, #8]
 800d87e:	440b      	add	r3, r1
 800d880:	1ad3      	subs	r3, r2, r3
            while (next &&
 800d882:	2b00      	cmp	r3, #0
 800d884:	da9b      	bge.n	800d7be <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800d886:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d059      	beq.n	800d940 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800d88c:	4b88      	ldr	r3, [pc, #544]	@ (800dab0 <tcp_receive+0xb04>)
 800d88e:	881b      	ldrh	r3, [r3, #0]
 800d890:	461a      	mov	r2, r3
 800d892:	4b88      	ldr	r3, [pc, #544]	@ (800dab4 <tcp_receive+0xb08>)
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	441a      	add	r2, r3
 800d898:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d89a:	68db      	ldr	r3, [r3, #12]
 800d89c:	685b      	ldr	r3, [r3, #4]
 800d89e:	1ad3      	subs	r3, r2, r3
            if (next &&
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	dd4d      	ble.n	800d940 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800d8a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d8a6:	68db      	ldr	r3, [r3, #12]
 800d8a8:	685b      	ldr	r3, [r3, #4]
 800d8aa:	b29a      	uxth	r2, r3
 800d8ac:	4b81      	ldr	r3, [pc, #516]	@ (800dab4 <tcp_receive+0xb08>)
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	b29b      	uxth	r3, r3
 800d8b2:	1ad3      	subs	r3, r2, r3
 800d8b4:	b29a      	uxth	r2, r3
 800d8b6:	4b80      	ldr	r3, [pc, #512]	@ (800dab8 <tcp_receive+0xb0c>)
 800d8b8:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800d8ba:	4b7f      	ldr	r3, [pc, #508]	@ (800dab8 <tcp_receive+0xb0c>)
 800d8bc:	68db      	ldr	r3, [r3, #12]
 800d8be:	899b      	ldrh	r3, [r3, #12]
 800d8c0:	b29b      	uxth	r3, r3
 800d8c2:	4618      	mov	r0, r3
 800d8c4:	f7fa fe90 	bl	80085e8 <lwip_htons>
 800d8c8:	4603      	mov	r3, r0
 800d8ca:	b2db      	uxtb	r3, r3
 800d8cc:	f003 0302 	and.w	r3, r3, #2
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d005      	beq.n	800d8e0 <tcp_receive+0x934>
                inseg.len -= 1;
 800d8d4:	4b78      	ldr	r3, [pc, #480]	@ (800dab8 <tcp_receive+0xb0c>)
 800d8d6:	891b      	ldrh	r3, [r3, #8]
 800d8d8:	3b01      	subs	r3, #1
 800d8da:	b29a      	uxth	r2, r3
 800d8dc:	4b76      	ldr	r3, [pc, #472]	@ (800dab8 <tcp_receive+0xb0c>)
 800d8de:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800d8e0:	4b75      	ldr	r3, [pc, #468]	@ (800dab8 <tcp_receive+0xb0c>)
 800d8e2:	685b      	ldr	r3, [r3, #4]
 800d8e4:	4a74      	ldr	r2, [pc, #464]	@ (800dab8 <tcp_receive+0xb0c>)
 800d8e6:	8912      	ldrh	r2, [r2, #8]
 800d8e8:	4611      	mov	r1, r2
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	f7fc f854 	bl	8009998 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800d8f0:	4b71      	ldr	r3, [pc, #452]	@ (800dab8 <tcp_receive+0xb0c>)
 800d8f2:	891c      	ldrh	r4, [r3, #8]
 800d8f4:	4b70      	ldr	r3, [pc, #448]	@ (800dab8 <tcp_receive+0xb0c>)
 800d8f6:	68db      	ldr	r3, [r3, #12]
 800d8f8:	899b      	ldrh	r3, [r3, #12]
 800d8fa:	b29b      	uxth	r3, r3
 800d8fc:	4618      	mov	r0, r3
 800d8fe:	f7fa fe73 	bl	80085e8 <lwip_htons>
 800d902:	4603      	mov	r3, r0
 800d904:	b2db      	uxtb	r3, r3
 800d906:	f003 0303 	and.w	r3, r3, #3
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d001      	beq.n	800d912 <tcp_receive+0x966>
 800d90e:	2301      	movs	r3, #1
 800d910:	e000      	b.n	800d914 <tcp_receive+0x968>
 800d912:	2300      	movs	r3, #0
 800d914:	4423      	add	r3, r4
 800d916:	b29a      	uxth	r2, r3
 800d918:	4b65      	ldr	r3, [pc, #404]	@ (800dab0 <tcp_receive+0xb04>)
 800d91a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800d91c:	4b64      	ldr	r3, [pc, #400]	@ (800dab0 <tcp_receive+0xb04>)
 800d91e:	881b      	ldrh	r3, [r3, #0]
 800d920:	461a      	mov	r2, r3
 800d922:	4b64      	ldr	r3, [pc, #400]	@ (800dab4 <tcp_receive+0xb08>)
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	441a      	add	r2, r3
 800d928:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d92a:	68db      	ldr	r3, [r3, #12]
 800d92c:	685b      	ldr	r3, [r3, #4]
 800d92e:	429a      	cmp	r2, r3
 800d930:	d006      	beq.n	800d940 <tcp_receive+0x994>
 800d932:	4b62      	ldr	r3, [pc, #392]	@ (800dabc <tcp_receive+0xb10>)
 800d934:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 800d938:	4961      	ldr	r1, [pc, #388]	@ (800dac0 <tcp_receive+0xb14>)
 800d93a:	4862      	ldr	r0, [pc, #392]	@ (800dac4 <tcp_receive+0xb18>)
 800d93c:	f005 f9a2 	bl	8012c84 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d944:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800d946:	4b5a      	ldr	r3, [pc, #360]	@ (800dab0 <tcp_receive+0xb04>)
 800d948:	881b      	ldrh	r3, [r3, #0]
 800d94a:	461a      	mov	r2, r3
 800d94c:	4b59      	ldr	r3, [pc, #356]	@ (800dab4 <tcp_receive+0xb08>)
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	441a      	add	r2, r3
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800d95a:	4b55      	ldr	r3, [pc, #340]	@ (800dab0 <tcp_receive+0xb04>)
 800d95c:	881b      	ldrh	r3, [r3, #0]
 800d95e:	429a      	cmp	r2, r3
 800d960:	d206      	bcs.n	800d970 <tcp_receive+0x9c4>
 800d962:	4b56      	ldr	r3, [pc, #344]	@ (800dabc <tcp_receive+0xb10>)
 800d964:	f240 6207 	movw	r2, #1543	@ 0x607
 800d968:	4957      	ldr	r1, [pc, #348]	@ (800dac8 <tcp_receive+0xb1c>)
 800d96a:	4856      	ldr	r0, [pc, #344]	@ (800dac4 <tcp_receive+0xb18>)
 800d96c:	f005 f98a 	bl	8012c84 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800d974:	4b4e      	ldr	r3, [pc, #312]	@ (800dab0 <tcp_receive+0xb04>)
 800d976:	881b      	ldrh	r3, [r3, #0]
 800d978:	1ad3      	subs	r3, r2, r3
 800d97a:	b29a      	uxth	r2, r3
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800d980:	6878      	ldr	r0, [r7, #4]
 800d982:	f7fc ffc5 	bl	800a910 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800d986:	4b4c      	ldr	r3, [pc, #304]	@ (800dab8 <tcp_receive+0xb0c>)
 800d988:	685b      	ldr	r3, [r3, #4]
 800d98a:	891b      	ldrh	r3, [r3, #8]
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d006      	beq.n	800d99e <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800d990:	4b49      	ldr	r3, [pc, #292]	@ (800dab8 <tcp_receive+0xb0c>)
 800d992:	685b      	ldr	r3, [r3, #4]
 800d994:	4a4d      	ldr	r2, [pc, #308]	@ (800dacc <tcp_receive+0xb20>)
 800d996:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800d998:	4b47      	ldr	r3, [pc, #284]	@ (800dab8 <tcp_receive+0xb0c>)
 800d99a:	2200      	movs	r2, #0
 800d99c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800d99e:	4b46      	ldr	r3, [pc, #280]	@ (800dab8 <tcp_receive+0xb0c>)
 800d9a0:	68db      	ldr	r3, [r3, #12]
 800d9a2:	899b      	ldrh	r3, [r3, #12]
 800d9a4:	b29b      	uxth	r3, r3
 800d9a6:	4618      	mov	r0, r3
 800d9a8:	f7fa fe1e 	bl	80085e8 <lwip_htons>
 800d9ac:	4603      	mov	r3, r0
 800d9ae:	b2db      	uxtb	r3, r3
 800d9b0:	f003 0301 	and.w	r3, r3, #1
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	f000 80b8 	beq.w	800db2a <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800d9ba:	4b45      	ldr	r3, [pc, #276]	@ (800dad0 <tcp_receive+0xb24>)
 800d9bc:	781b      	ldrb	r3, [r3, #0]
 800d9be:	f043 0320 	orr.w	r3, r3, #32
 800d9c2:	b2da      	uxtb	r2, r3
 800d9c4:	4b42      	ldr	r3, [pc, #264]	@ (800dad0 <tcp_receive+0xb24>)
 800d9c6:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800d9c8:	e0af      	b.n	800db2a <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d9ce:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d9d4:	68db      	ldr	r3, [r3, #12]
 800d9d6:	685b      	ldr	r3, [r3, #4]
 800d9d8:	4a36      	ldr	r2, [pc, #216]	@ (800dab4 <tcp_receive+0xb08>)
 800d9da:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800d9dc:	68bb      	ldr	r3, [r7, #8]
 800d9de:	891b      	ldrh	r3, [r3, #8]
 800d9e0:	461c      	mov	r4, r3
 800d9e2:	68bb      	ldr	r3, [r7, #8]
 800d9e4:	68db      	ldr	r3, [r3, #12]
 800d9e6:	899b      	ldrh	r3, [r3, #12]
 800d9e8:	b29b      	uxth	r3, r3
 800d9ea:	4618      	mov	r0, r3
 800d9ec:	f7fa fdfc 	bl	80085e8 <lwip_htons>
 800d9f0:	4603      	mov	r3, r0
 800d9f2:	b2db      	uxtb	r3, r3
 800d9f4:	f003 0303 	and.w	r3, r3, #3
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d001      	beq.n	800da00 <tcp_receive+0xa54>
 800d9fc:	2301      	movs	r3, #1
 800d9fe:	e000      	b.n	800da02 <tcp_receive+0xa56>
 800da00:	2300      	movs	r3, #0
 800da02:	191a      	adds	r2, r3, r4
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da08:	441a      	add	r2, r3
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800da12:	461c      	mov	r4, r3
 800da14:	68bb      	ldr	r3, [r7, #8]
 800da16:	891b      	ldrh	r3, [r3, #8]
 800da18:	461d      	mov	r5, r3
 800da1a:	68bb      	ldr	r3, [r7, #8]
 800da1c:	68db      	ldr	r3, [r3, #12]
 800da1e:	899b      	ldrh	r3, [r3, #12]
 800da20:	b29b      	uxth	r3, r3
 800da22:	4618      	mov	r0, r3
 800da24:	f7fa fde0 	bl	80085e8 <lwip_htons>
 800da28:	4603      	mov	r3, r0
 800da2a:	b2db      	uxtb	r3, r3
 800da2c:	f003 0303 	and.w	r3, r3, #3
 800da30:	2b00      	cmp	r3, #0
 800da32:	d001      	beq.n	800da38 <tcp_receive+0xa8c>
 800da34:	2301      	movs	r3, #1
 800da36:	e000      	b.n	800da3a <tcp_receive+0xa8e>
 800da38:	2300      	movs	r3, #0
 800da3a:	442b      	add	r3, r5
 800da3c:	429c      	cmp	r4, r3
 800da3e:	d206      	bcs.n	800da4e <tcp_receive+0xaa2>
 800da40:	4b1e      	ldr	r3, [pc, #120]	@ (800dabc <tcp_receive+0xb10>)
 800da42:	f240 622b 	movw	r2, #1579	@ 0x62b
 800da46:	4923      	ldr	r1, [pc, #140]	@ (800dad4 <tcp_receive+0xb28>)
 800da48:	481e      	ldr	r0, [pc, #120]	@ (800dac4 <tcp_receive+0xb18>)
 800da4a:	f005 f91b 	bl	8012c84 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800da4e:	68bb      	ldr	r3, [r7, #8]
 800da50:	891b      	ldrh	r3, [r3, #8]
 800da52:	461c      	mov	r4, r3
 800da54:	68bb      	ldr	r3, [r7, #8]
 800da56:	68db      	ldr	r3, [r3, #12]
 800da58:	899b      	ldrh	r3, [r3, #12]
 800da5a:	b29b      	uxth	r3, r3
 800da5c:	4618      	mov	r0, r3
 800da5e:	f7fa fdc3 	bl	80085e8 <lwip_htons>
 800da62:	4603      	mov	r3, r0
 800da64:	b2db      	uxtb	r3, r3
 800da66:	f003 0303 	and.w	r3, r3, #3
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d001      	beq.n	800da72 <tcp_receive+0xac6>
 800da6e:	2301      	movs	r3, #1
 800da70:	e000      	b.n	800da74 <tcp_receive+0xac8>
 800da72:	2300      	movs	r3, #0
 800da74:	1919      	adds	r1, r3, r4
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800da7a:	b28b      	uxth	r3, r1
 800da7c:	1ad3      	subs	r3, r2, r3
 800da7e:	b29a      	uxth	r2, r3
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800da84:	6878      	ldr	r0, [r7, #4]
 800da86:	f7fc ff43 	bl	800a910 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800da8a:	68bb      	ldr	r3, [r7, #8]
 800da8c:	685b      	ldr	r3, [r3, #4]
 800da8e:	891b      	ldrh	r3, [r3, #8]
 800da90:	2b00      	cmp	r3, #0
 800da92:	d028      	beq.n	800dae6 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800da94:	4b0d      	ldr	r3, [pc, #52]	@ (800dacc <tcp_receive+0xb20>)
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d01d      	beq.n	800dad8 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800da9c:	4b0b      	ldr	r3, [pc, #44]	@ (800dacc <tcp_receive+0xb20>)
 800da9e:	681a      	ldr	r2, [r3, #0]
 800daa0:	68bb      	ldr	r3, [r7, #8]
 800daa2:	685b      	ldr	r3, [r3, #4]
 800daa4:	4619      	mov	r1, r3
 800daa6:	4610      	mov	r0, r2
 800daa8:	f7fc f9be 	bl	8009e28 <pbuf_cat>
 800daac:	e018      	b.n	800dae0 <tcp_receive+0xb34>
 800daae:	bf00      	nop
 800dab0:	2000894e 	.word	0x2000894e
 800dab4:	20008944 	.word	0x20008944
 800dab8:	20008924 	.word	0x20008924
 800dabc:	0801509c 	.word	0x0801509c
 800dac0:	0801547c 	.word	0x0801547c
 800dac4:	080150e8 	.word	0x080150e8
 800dac8:	080154b8 	.word	0x080154b8
 800dacc:	20008954 	.word	0x20008954
 800dad0:	20008951 	.word	0x20008951
 800dad4:	080154d8 	.word	0x080154d8
            } else {
              recv_data = cseg->p;
 800dad8:	68bb      	ldr	r3, [r7, #8]
 800dada:	685b      	ldr	r3, [r3, #4]
 800dadc:	4a70      	ldr	r2, [pc, #448]	@ (800dca0 <tcp_receive+0xcf4>)
 800dade:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800dae0:	68bb      	ldr	r3, [r7, #8]
 800dae2:	2200      	movs	r2, #0
 800dae4:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800dae6:	68bb      	ldr	r3, [r7, #8]
 800dae8:	68db      	ldr	r3, [r3, #12]
 800daea:	899b      	ldrh	r3, [r3, #12]
 800daec:	b29b      	uxth	r3, r3
 800daee:	4618      	mov	r0, r3
 800daf0:	f7fa fd7a 	bl	80085e8 <lwip_htons>
 800daf4:	4603      	mov	r3, r0
 800daf6:	b2db      	uxtb	r3, r3
 800daf8:	f003 0301 	and.w	r3, r3, #1
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d00d      	beq.n	800db1c <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800db00:	4b68      	ldr	r3, [pc, #416]	@ (800dca4 <tcp_receive+0xcf8>)
 800db02:	781b      	ldrb	r3, [r3, #0]
 800db04:	f043 0320 	orr.w	r3, r3, #32
 800db08:	b2da      	uxtb	r2, r3
 800db0a:	4b66      	ldr	r3, [pc, #408]	@ (800dca4 <tcp_receive+0xcf8>)
 800db0c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	7d1b      	ldrb	r3, [r3, #20]
 800db12:	2b04      	cmp	r3, #4
 800db14:	d102      	bne.n	800db1c <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	2207      	movs	r2, #7
 800db1a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800db1c:	68bb      	ldr	r3, [r7, #8]
 800db1e:	681a      	ldr	r2, [r3, #0]
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 800db24:	68b8      	ldr	r0, [r7, #8]
 800db26:	f7fd fbd4 	bl	800b2d2 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d008      	beq.n	800db44 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800db36:	68db      	ldr	r3, [r3, #12]
 800db38:	685a      	ldr	r2, [r3, #4]
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 800db3e:	429a      	cmp	r2, r3
 800db40:	f43f af43 	beq.w	800d9ca <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	8b5b      	ldrh	r3, [r3, #26]
 800db48:	f003 0301 	and.w	r3, r3, #1
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d00e      	beq.n	800db6e <tcp_receive+0xbc2>
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	8b5b      	ldrh	r3, [r3, #26]
 800db54:	f023 0301 	bic.w	r3, r3, #1
 800db58:	b29a      	uxth	r2, r3
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	835a      	strh	r2, [r3, #26]
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	8b5b      	ldrh	r3, [r3, #26]
 800db62:	f043 0302 	orr.w	r3, r3, #2
 800db66:	b29a      	uxth	r2, r3
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800db6c:	e187      	b.n	800de7e <tcp_receive+0xed2>
        tcp_ack(pcb);
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	8b5b      	ldrh	r3, [r3, #26]
 800db72:	f043 0301 	orr.w	r3, r3, #1
 800db76:	b29a      	uxth	r2, r3
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800db7c:	e17f      	b.n	800de7e <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800db82:	2b00      	cmp	r3, #0
 800db84:	d106      	bne.n	800db94 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800db86:	4848      	ldr	r0, [pc, #288]	@ (800dca8 <tcp_receive+0xcfc>)
 800db88:	f7fd fbbc 	bl	800b304 <tcp_seg_copy>
 800db8c:	4602      	mov	r2, r0
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	675a      	str	r2, [r3, #116]	@ 0x74
 800db92:	e16c      	b.n	800de6e <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800db94:	2300      	movs	r3, #0
 800db96:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800db9c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800db9e:	e156      	b.n	800de4e <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 800dba0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dba2:	68db      	ldr	r3, [r3, #12]
 800dba4:	685a      	ldr	r2, [r3, #4]
 800dba6:	4b41      	ldr	r3, [pc, #260]	@ (800dcac <tcp_receive+0xd00>)
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	429a      	cmp	r2, r3
 800dbac:	d11d      	bne.n	800dbea <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800dbae:	4b3e      	ldr	r3, [pc, #248]	@ (800dca8 <tcp_receive+0xcfc>)
 800dbb0:	891a      	ldrh	r2, [r3, #8]
 800dbb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbb4:	891b      	ldrh	r3, [r3, #8]
 800dbb6:	429a      	cmp	r2, r3
 800dbb8:	f240 814e 	bls.w	800de58 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800dbbc:	483a      	ldr	r0, [pc, #232]	@ (800dca8 <tcp_receive+0xcfc>)
 800dbbe:	f7fd fba1 	bl	800b304 <tcp_seg_copy>
 800dbc2:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800dbc4:	697b      	ldr	r3, [r7, #20]
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	f000 8148 	beq.w	800de5c <tcp_receive+0xeb0>
                  if (prev != NULL) {
 800dbcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d003      	beq.n	800dbda <tcp_receive+0xc2e>
                    prev->next = cseg;
 800dbd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dbd4:	697a      	ldr	r2, [r7, #20]
 800dbd6:	601a      	str	r2, [r3, #0]
 800dbd8:	e002      	b.n	800dbe0 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	697a      	ldr	r2, [r7, #20]
 800dbde:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800dbe0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800dbe2:	6978      	ldr	r0, [r7, #20]
 800dbe4:	f7ff f8de 	bl	800cda4 <tcp_oos_insert_segment>
                }
                break;
 800dbe8:	e138      	b.n	800de5c <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800dbea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d117      	bne.n	800dc20 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800dbf0:	4b2e      	ldr	r3, [pc, #184]	@ (800dcac <tcp_receive+0xd00>)
 800dbf2:	681a      	ldr	r2, [r3, #0]
 800dbf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbf6:	68db      	ldr	r3, [r3, #12]
 800dbf8:	685b      	ldr	r3, [r3, #4]
 800dbfa:	1ad3      	subs	r3, r2, r3
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	da57      	bge.n	800dcb0 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800dc00:	4829      	ldr	r0, [pc, #164]	@ (800dca8 <tcp_receive+0xcfc>)
 800dc02:	f7fd fb7f 	bl	800b304 <tcp_seg_copy>
 800dc06:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800dc08:	69bb      	ldr	r3, [r7, #24]
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	f000 8128 	beq.w	800de60 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	69ba      	ldr	r2, [r7, #24]
 800dc14:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 800dc16:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800dc18:	69b8      	ldr	r0, [r7, #24]
 800dc1a:	f7ff f8c3 	bl	800cda4 <tcp_oos_insert_segment>
                  }
                  break;
 800dc1e:	e11f      	b.n	800de60 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800dc20:	4b22      	ldr	r3, [pc, #136]	@ (800dcac <tcp_receive+0xd00>)
 800dc22:	681a      	ldr	r2, [r3, #0]
 800dc24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dc26:	68db      	ldr	r3, [r3, #12]
 800dc28:	685b      	ldr	r3, [r3, #4]
 800dc2a:	1ad3      	subs	r3, r2, r3
 800dc2c:	3b01      	subs	r3, #1
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	db3e      	blt.n	800dcb0 <tcp_receive+0xd04>
 800dc32:	4b1e      	ldr	r3, [pc, #120]	@ (800dcac <tcp_receive+0xd00>)
 800dc34:	681a      	ldr	r2, [r3, #0]
 800dc36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc38:	68db      	ldr	r3, [r3, #12]
 800dc3a:	685b      	ldr	r3, [r3, #4]
 800dc3c:	1ad3      	subs	r3, r2, r3
 800dc3e:	3301      	adds	r3, #1
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	dc35      	bgt.n	800dcb0 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800dc44:	4818      	ldr	r0, [pc, #96]	@ (800dca8 <tcp_receive+0xcfc>)
 800dc46:	f7fd fb5d 	bl	800b304 <tcp_seg_copy>
 800dc4a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800dc4c:	69fb      	ldr	r3, [r7, #28]
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	f000 8108 	beq.w	800de64 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800dc54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dc56:	68db      	ldr	r3, [r3, #12]
 800dc58:	685b      	ldr	r3, [r3, #4]
 800dc5a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dc5c:	8912      	ldrh	r2, [r2, #8]
 800dc5e:	441a      	add	r2, r3
 800dc60:	4b12      	ldr	r3, [pc, #72]	@ (800dcac <tcp_receive+0xd00>)
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	1ad3      	subs	r3, r2, r3
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	dd12      	ble.n	800dc90 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800dc6a:	4b10      	ldr	r3, [pc, #64]	@ (800dcac <tcp_receive+0xd00>)
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	b29a      	uxth	r2, r3
 800dc70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dc72:	68db      	ldr	r3, [r3, #12]
 800dc74:	685b      	ldr	r3, [r3, #4]
 800dc76:	b29b      	uxth	r3, r3
 800dc78:	1ad3      	subs	r3, r2, r3
 800dc7a:	b29a      	uxth	r2, r3
 800dc7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dc7e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800dc80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dc82:	685a      	ldr	r2, [r3, #4]
 800dc84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dc86:	891b      	ldrh	r3, [r3, #8]
 800dc88:	4619      	mov	r1, r3
 800dc8a:	4610      	mov	r0, r2
 800dc8c:	f7fb fe84 	bl	8009998 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800dc90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dc92:	69fa      	ldr	r2, [r7, #28]
 800dc94:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800dc96:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800dc98:	69f8      	ldr	r0, [r7, #28]
 800dc9a:	f7ff f883 	bl	800cda4 <tcp_oos_insert_segment>
                  }
                  break;
 800dc9e:	e0e1      	b.n	800de64 <tcp_receive+0xeb8>
 800dca0:	20008954 	.word	0x20008954
 800dca4:	20008951 	.word	0x20008951
 800dca8:	20008924 	.word	0x20008924
 800dcac:	20008944 	.word	0x20008944
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800dcb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcb2:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800dcb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	f040 80c5 	bne.w	800de48 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800dcbe:	4b7f      	ldr	r3, [pc, #508]	@ (800debc <tcp_receive+0xf10>)
 800dcc0:	681a      	ldr	r2, [r3, #0]
 800dcc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcc4:	68db      	ldr	r3, [r3, #12]
 800dcc6:	685b      	ldr	r3, [r3, #4]
 800dcc8:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	f340 80bc 	ble.w	800de48 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800dcd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcd2:	68db      	ldr	r3, [r3, #12]
 800dcd4:	899b      	ldrh	r3, [r3, #12]
 800dcd6:	b29b      	uxth	r3, r3
 800dcd8:	4618      	mov	r0, r3
 800dcda:	f7fa fc85 	bl	80085e8 <lwip_htons>
 800dcde:	4603      	mov	r3, r0
 800dce0:	b2db      	uxtb	r3, r3
 800dce2:	f003 0301 	and.w	r3, r3, #1
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	f040 80be 	bne.w	800de68 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800dcec:	4874      	ldr	r0, [pc, #464]	@ (800dec0 <tcp_receive+0xf14>)
 800dcee:	f7fd fb09 	bl	800b304 <tcp_seg_copy>
 800dcf2:	4602      	mov	r2, r0
 800dcf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcf6:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800dcf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	f000 80b5 	beq.w	800de6c <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800dd02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd04:	68db      	ldr	r3, [r3, #12]
 800dd06:	685b      	ldr	r3, [r3, #4]
 800dd08:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dd0a:	8912      	ldrh	r2, [r2, #8]
 800dd0c:	441a      	add	r2, r3
 800dd0e:	4b6b      	ldr	r3, [pc, #428]	@ (800debc <tcp_receive+0xf10>)
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	1ad3      	subs	r3, r2, r3
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	dd12      	ble.n	800dd3e <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800dd18:	4b68      	ldr	r3, [pc, #416]	@ (800debc <tcp_receive+0xf10>)
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	b29a      	uxth	r2, r3
 800dd1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd20:	68db      	ldr	r3, [r3, #12]
 800dd22:	685b      	ldr	r3, [r3, #4]
 800dd24:	b29b      	uxth	r3, r3
 800dd26:	1ad3      	subs	r3, r2, r3
 800dd28:	b29a      	uxth	r2, r3
 800dd2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd2c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800dd2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd30:	685a      	ldr	r2, [r3, #4]
 800dd32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd34:	891b      	ldrh	r3, [r3, #8]
 800dd36:	4619      	mov	r1, r3
 800dd38:	4610      	mov	r0, r2
 800dd3a:	f7fb fe2d 	bl	8009998 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800dd3e:	4b61      	ldr	r3, [pc, #388]	@ (800dec4 <tcp_receive+0xf18>)
 800dd40:	881b      	ldrh	r3, [r3, #0]
 800dd42:	461a      	mov	r2, r3
 800dd44:	4b5d      	ldr	r3, [pc, #372]	@ (800debc <tcp_receive+0xf10>)
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	441a      	add	r2, r3
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd4e:	6879      	ldr	r1, [r7, #4]
 800dd50:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800dd52:	440b      	add	r3, r1
 800dd54:	1ad3      	subs	r3, r2, r3
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	f340 8088 	ble.w	800de6c <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800dd5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	68db      	ldr	r3, [r3, #12]
 800dd62:	899b      	ldrh	r3, [r3, #12]
 800dd64:	b29b      	uxth	r3, r3
 800dd66:	4618      	mov	r0, r3
 800dd68:	f7fa fc3e 	bl	80085e8 <lwip_htons>
 800dd6c:	4603      	mov	r3, r0
 800dd6e:	b2db      	uxtb	r3, r3
 800dd70:	f003 0301 	and.w	r3, r3, #1
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d021      	beq.n	800ddbc <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800dd78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	68db      	ldr	r3, [r3, #12]
 800dd7e:	899b      	ldrh	r3, [r3, #12]
 800dd80:	b29b      	uxth	r3, r3
 800dd82:	b21b      	sxth	r3, r3
 800dd84:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800dd88:	b21c      	sxth	r4, r3
 800dd8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	68db      	ldr	r3, [r3, #12]
 800dd90:	899b      	ldrh	r3, [r3, #12]
 800dd92:	b29b      	uxth	r3, r3
 800dd94:	4618      	mov	r0, r3
 800dd96:	f7fa fc27 	bl	80085e8 <lwip_htons>
 800dd9a:	4603      	mov	r3, r0
 800dd9c:	b2db      	uxtb	r3, r3
 800dd9e:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800dda2:	b29b      	uxth	r3, r3
 800dda4:	4618      	mov	r0, r3
 800dda6:	f7fa fc1f 	bl	80085e8 <lwip_htons>
 800ddaa:	4603      	mov	r3, r0
 800ddac:	b21b      	sxth	r3, r3
 800ddae:	4323      	orrs	r3, r4
 800ddb0:	b21a      	sxth	r2, r3
 800ddb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	68db      	ldr	r3, [r3, #12]
 800ddb8:	b292      	uxth	r2, r2
 800ddba:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ddc0:	b29a      	uxth	r2, r3
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ddc6:	4413      	add	r3, r2
 800ddc8:	b299      	uxth	r1, r3
 800ddca:	4b3c      	ldr	r3, [pc, #240]	@ (800debc <tcp_receive+0xf10>)
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	b29a      	uxth	r2, r3
 800ddd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	1a8a      	subs	r2, r1, r2
 800ddd6:	b292      	uxth	r2, r2
 800ddd8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800ddda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	685a      	ldr	r2, [r3, #4]
 800dde0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	891b      	ldrh	r3, [r3, #8]
 800dde6:	4619      	mov	r1, r3
 800dde8:	4610      	mov	r0, r2
 800ddea:	f7fb fdd5 	bl	8009998 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800ddee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	891c      	ldrh	r4, [r3, #8]
 800ddf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	68db      	ldr	r3, [r3, #12]
 800ddfa:	899b      	ldrh	r3, [r3, #12]
 800ddfc:	b29b      	uxth	r3, r3
 800ddfe:	4618      	mov	r0, r3
 800de00:	f7fa fbf2 	bl	80085e8 <lwip_htons>
 800de04:	4603      	mov	r3, r0
 800de06:	b2db      	uxtb	r3, r3
 800de08:	f003 0303 	and.w	r3, r3, #3
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d001      	beq.n	800de14 <tcp_receive+0xe68>
 800de10:	2301      	movs	r3, #1
 800de12:	e000      	b.n	800de16 <tcp_receive+0xe6a>
 800de14:	2300      	movs	r3, #0
 800de16:	4423      	add	r3, r4
 800de18:	b29a      	uxth	r2, r3
 800de1a:	4b2a      	ldr	r3, [pc, #168]	@ (800dec4 <tcp_receive+0xf18>)
 800de1c:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800de1e:	4b29      	ldr	r3, [pc, #164]	@ (800dec4 <tcp_receive+0xf18>)
 800de20:	881b      	ldrh	r3, [r3, #0]
 800de22:	461a      	mov	r2, r3
 800de24:	4b25      	ldr	r3, [pc, #148]	@ (800debc <tcp_receive+0xf10>)
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	441a      	add	r2, r3
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de2e:	6879      	ldr	r1, [r7, #4]
 800de30:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800de32:	440b      	add	r3, r1
 800de34:	429a      	cmp	r2, r3
 800de36:	d019      	beq.n	800de6c <tcp_receive+0xec0>
 800de38:	4b23      	ldr	r3, [pc, #140]	@ (800dec8 <tcp_receive+0xf1c>)
 800de3a:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 800de3e:	4923      	ldr	r1, [pc, #140]	@ (800decc <tcp_receive+0xf20>)
 800de40:	4823      	ldr	r0, [pc, #140]	@ (800ded0 <tcp_receive+0xf24>)
 800de42:	f004 ff1f 	bl	8012c84 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800de46:	e011      	b.n	800de6c <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800de48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800de4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de50:	2b00      	cmp	r3, #0
 800de52:	f47f aea5 	bne.w	800dba0 <tcp_receive+0xbf4>
 800de56:	e00a      	b.n	800de6e <tcp_receive+0xec2>
                break;
 800de58:	bf00      	nop
 800de5a:	e008      	b.n	800de6e <tcp_receive+0xec2>
                break;
 800de5c:	bf00      	nop
 800de5e:	e006      	b.n	800de6e <tcp_receive+0xec2>
                  break;
 800de60:	bf00      	nop
 800de62:	e004      	b.n	800de6e <tcp_receive+0xec2>
                  break;
 800de64:	bf00      	nop
 800de66:	e002      	b.n	800de6e <tcp_receive+0xec2>
                  break;
 800de68:	bf00      	nop
 800de6a:	e000      	b.n	800de6e <tcp_receive+0xec2>
                break;
 800de6c:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800de6e:	6878      	ldr	r0, [r7, #4]
 800de70:	f001 fa30 	bl	800f2d4 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800de74:	e003      	b.n	800de7e <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800de76:	6878      	ldr	r0, [r7, #4]
 800de78:	f001 fa2c 	bl	800f2d4 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800de7c:	e01a      	b.n	800deb4 <tcp_receive+0xf08>
 800de7e:	e019      	b.n	800deb4 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800de80:	4b0e      	ldr	r3, [pc, #56]	@ (800debc <tcp_receive+0xf10>)
 800de82:	681a      	ldr	r2, [r3, #0]
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de88:	1ad3      	subs	r3, r2, r3
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	db0a      	blt.n	800dea4 <tcp_receive+0xef8>
 800de8e:	4b0b      	ldr	r3, [pc, #44]	@ (800debc <tcp_receive+0xf10>)
 800de90:	681a      	ldr	r2, [r3, #0]
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de96:	6879      	ldr	r1, [r7, #4]
 800de98:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800de9a:	440b      	add	r3, r1
 800de9c:	1ad3      	subs	r3, r2, r3
 800de9e:	3301      	adds	r3, #1
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	dd07      	ble.n	800deb4 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	8b5b      	ldrh	r3, [r3, #26]
 800dea8:	f043 0302 	orr.w	r3, r3, #2
 800deac:	b29a      	uxth	r2, r3
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800deb2:	e7ff      	b.n	800deb4 <tcp_receive+0xf08>
 800deb4:	bf00      	nop
 800deb6:	3750      	adds	r7, #80	@ 0x50
 800deb8:	46bd      	mov	sp, r7
 800deba:	bdb0      	pop	{r4, r5, r7, pc}
 800debc:	20008944 	.word	0x20008944
 800dec0:	20008924 	.word	0x20008924
 800dec4:	2000894e 	.word	0x2000894e
 800dec8:	0801509c 	.word	0x0801509c
 800decc:	08015444 	.word	0x08015444
 800ded0:	080150e8 	.word	0x080150e8

0800ded4 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800ded4:	b480      	push	{r7}
 800ded6:	b083      	sub	sp, #12
 800ded8:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800deda:	4b15      	ldr	r3, [pc, #84]	@ (800df30 <tcp_get_next_optbyte+0x5c>)
 800dedc:	881b      	ldrh	r3, [r3, #0]
 800dede:	1c5a      	adds	r2, r3, #1
 800dee0:	b291      	uxth	r1, r2
 800dee2:	4a13      	ldr	r2, [pc, #76]	@ (800df30 <tcp_get_next_optbyte+0x5c>)
 800dee4:	8011      	strh	r1, [r2, #0]
 800dee6:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800dee8:	4b12      	ldr	r3, [pc, #72]	@ (800df34 <tcp_get_next_optbyte+0x60>)
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	2b00      	cmp	r3, #0
 800deee:	d004      	beq.n	800defa <tcp_get_next_optbyte+0x26>
 800def0:	4b11      	ldr	r3, [pc, #68]	@ (800df38 <tcp_get_next_optbyte+0x64>)
 800def2:	881b      	ldrh	r3, [r3, #0]
 800def4:	88fa      	ldrh	r2, [r7, #6]
 800def6:	429a      	cmp	r2, r3
 800def8:	d208      	bcs.n	800df0c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800defa:	4b10      	ldr	r3, [pc, #64]	@ (800df3c <tcp_get_next_optbyte+0x68>)
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	3314      	adds	r3, #20
 800df00:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800df02:	88fb      	ldrh	r3, [r7, #6]
 800df04:	683a      	ldr	r2, [r7, #0]
 800df06:	4413      	add	r3, r2
 800df08:	781b      	ldrb	r3, [r3, #0]
 800df0a:	e00b      	b.n	800df24 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800df0c:	88fb      	ldrh	r3, [r7, #6]
 800df0e:	b2da      	uxtb	r2, r3
 800df10:	4b09      	ldr	r3, [pc, #36]	@ (800df38 <tcp_get_next_optbyte+0x64>)
 800df12:	881b      	ldrh	r3, [r3, #0]
 800df14:	b2db      	uxtb	r3, r3
 800df16:	1ad3      	subs	r3, r2, r3
 800df18:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800df1a:	4b06      	ldr	r3, [pc, #24]	@ (800df34 <tcp_get_next_optbyte+0x60>)
 800df1c:	681a      	ldr	r2, [r3, #0]
 800df1e:	797b      	ldrb	r3, [r7, #5]
 800df20:	4413      	add	r3, r2
 800df22:	781b      	ldrb	r3, [r3, #0]
  }
}
 800df24:	4618      	mov	r0, r3
 800df26:	370c      	adds	r7, #12
 800df28:	46bd      	mov	sp, r7
 800df2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df2e:	4770      	bx	lr
 800df30:	20008940 	.word	0x20008940
 800df34:	2000893c 	.word	0x2000893c
 800df38:	2000893a 	.word	0x2000893a
 800df3c:	20008934 	.word	0x20008934

0800df40 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800df40:	b580      	push	{r7, lr}
 800df42:	b084      	sub	sp, #16
 800df44:	af00      	add	r7, sp, #0
 800df46:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d106      	bne.n	800df5c <tcp_parseopt+0x1c>
 800df4e:	4b32      	ldr	r3, [pc, #200]	@ (800e018 <tcp_parseopt+0xd8>)
 800df50:	f240 727d 	movw	r2, #1917	@ 0x77d
 800df54:	4931      	ldr	r1, [pc, #196]	@ (800e01c <tcp_parseopt+0xdc>)
 800df56:	4832      	ldr	r0, [pc, #200]	@ (800e020 <tcp_parseopt+0xe0>)
 800df58:	f004 fe94 	bl	8012c84 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800df5c:	4b31      	ldr	r3, [pc, #196]	@ (800e024 <tcp_parseopt+0xe4>)
 800df5e:	881b      	ldrh	r3, [r3, #0]
 800df60:	2b00      	cmp	r3, #0
 800df62:	d056      	beq.n	800e012 <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800df64:	4b30      	ldr	r3, [pc, #192]	@ (800e028 <tcp_parseopt+0xe8>)
 800df66:	2200      	movs	r2, #0
 800df68:	801a      	strh	r2, [r3, #0]
 800df6a:	e046      	b.n	800dffa <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 800df6c:	f7ff ffb2 	bl	800ded4 <tcp_get_next_optbyte>
 800df70:	4603      	mov	r3, r0
 800df72:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800df74:	7bfb      	ldrb	r3, [r7, #15]
 800df76:	2b02      	cmp	r3, #2
 800df78:	d006      	beq.n	800df88 <tcp_parseopt+0x48>
 800df7a:	2b02      	cmp	r3, #2
 800df7c:	dc2a      	bgt.n	800dfd4 <tcp_parseopt+0x94>
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d042      	beq.n	800e008 <tcp_parseopt+0xc8>
 800df82:	2b01      	cmp	r3, #1
 800df84:	d038      	beq.n	800dff8 <tcp_parseopt+0xb8>
 800df86:	e025      	b.n	800dfd4 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800df88:	f7ff ffa4 	bl	800ded4 <tcp_get_next_optbyte>
 800df8c:	4603      	mov	r3, r0
 800df8e:	2b04      	cmp	r3, #4
 800df90:	d13c      	bne.n	800e00c <tcp_parseopt+0xcc>
 800df92:	4b25      	ldr	r3, [pc, #148]	@ (800e028 <tcp_parseopt+0xe8>)
 800df94:	881b      	ldrh	r3, [r3, #0]
 800df96:	3301      	adds	r3, #1
 800df98:	4a22      	ldr	r2, [pc, #136]	@ (800e024 <tcp_parseopt+0xe4>)
 800df9a:	8812      	ldrh	r2, [r2, #0]
 800df9c:	4293      	cmp	r3, r2
 800df9e:	da35      	bge.n	800e00c <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800dfa0:	f7ff ff98 	bl	800ded4 <tcp_get_next_optbyte>
 800dfa4:	4603      	mov	r3, r0
 800dfa6:	021b      	lsls	r3, r3, #8
 800dfa8:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800dfaa:	f7ff ff93 	bl	800ded4 <tcp_get_next_optbyte>
 800dfae:	4603      	mov	r3, r0
 800dfb0:	461a      	mov	r2, r3
 800dfb2:	89bb      	ldrh	r3, [r7, #12]
 800dfb4:	4313      	orrs	r3, r2
 800dfb6:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800dfb8:	89bb      	ldrh	r3, [r7, #12]
 800dfba:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800dfbe:	d804      	bhi.n	800dfca <tcp_parseopt+0x8a>
 800dfc0:	89bb      	ldrh	r3, [r7, #12]
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d001      	beq.n	800dfca <tcp_parseopt+0x8a>
 800dfc6:	89ba      	ldrh	r2, [r7, #12]
 800dfc8:	e001      	b.n	800dfce <tcp_parseopt+0x8e>
 800dfca:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 800dfd2:	e012      	b.n	800dffa <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800dfd4:	f7ff ff7e 	bl	800ded4 <tcp_get_next_optbyte>
 800dfd8:	4603      	mov	r3, r0
 800dfda:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800dfdc:	7afb      	ldrb	r3, [r7, #11]
 800dfde:	2b01      	cmp	r3, #1
 800dfe0:	d916      	bls.n	800e010 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800dfe2:	7afb      	ldrb	r3, [r7, #11]
 800dfe4:	b29a      	uxth	r2, r3
 800dfe6:	4b10      	ldr	r3, [pc, #64]	@ (800e028 <tcp_parseopt+0xe8>)
 800dfe8:	881b      	ldrh	r3, [r3, #0]
 800dfea:	4413      	add	r3, r2
 800dfec:	b29b      	uxth	r3, r3
 800dfee:	3b02      	subs	r3, #2
 800dff0:	b29a      	uxth	r2, r3
 800dff2:	4b0d      	ldr	r3, [pc, #52]	@ (800e028 <tcp_parseopt+0xe8>)
 800dff4:	801a      	strh	r2, [r3, #0]
 800dff6:	e000      	b.n	800dffa <tcp_parseopt+0xba>
          break;
 800dff8:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800dffa:	4b0b      	ldr	r3, [pc, #44]	@ (800e028 <tcp_parseopt+0xe8>)
 800dffc:	881a      	ldrh	r2, [r3, #0]
 800dffe:	4b09      	ldr	r3, [pc, #36]	@ (800e024 <tcp_parseopt+0xe4>)
 800e000:	881b      	ldrh	r3, [r3, #0]
 800e002:	429a      	cmp	r2, r3
 800e004:	d3b2      	bcc.n	800df6c <tcp_parseopt+0x2c>
 800e006:	e004      	b.n	800e012 <tcp_parseopt+0xd2>
          return;
 800e008:	bf00      	nop
 800e00a:	e002      	b.n	800e012 <tcp_parseopt+0xd2>
            return;
 800e00c:	bf00      	nop
 800e00e:	e000      	b.n	800e012 <tcp_parseopt+0xd2>
            return;
 800e010:	bf00      	nop
      }
    }
  }
}
 800e012:	3710      	adds	r7, #16
 800e014:	46bd      	mov	sp, r7
 800e016:	bd80      	pop	{r7, pc}
 800e018:	0801509c 	.word	0x0801509c
 800e01c:	08015500 	.word	0x08015500
 800e020:	080150e8 	.word	0x080150e8
 800e024:	20008938 	.word	0x20008938
 800e028:	20008940 	.word	0x20008940

0800e02c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800e02c:	b480      	push	{r7}
 800e02e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800e030:	4b05      	ldr	r3, [pc, #20]	@ (800e048 <tcp_trigger_input_pcb_close+0x1c>)
 800e032:	781b      	ldrb	r3, [r3, #0]
 800e034:	f043 0310 	orr.w	r3, r3, #16
 800e038:	b2da      	uxtb	r2, r3
 800e03a:	4b03      	ldr	r3, [pc, #12]	@ (800e048 <tcp_trigger_input_pcb_close+0x1c>)
 800e03c:	701a      	strb	r2, [r3, #0]
}
 800e03e:	bf00      	nop
 800e040:	46bd      	mov	sp, r7
 800e042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e046:	4770      	bx	lr
 800e048:	20008951 	.word	0x20008951

0800e04c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800e04c:	b580      	push	{r7, lr}
 800e04e:	b084      	sub	sp, #16
 800e050:	af00      	add	r7, sp, #0
 800e052:	60f8      	str	r0, [r7, #12]
 800e054:	60b9      	str	r1, [r7, #8]
 800e056:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d00a      	beq.n	800e074 <tcp_route+0x28>
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	7a1b      	ldrb	r3, [r3, #8]
 800e062:	2b00      	cmp	r3, #0
 800e064:	d006      	beq.n	800e074 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	7a1b      	ldrb	r3, [r3, #8]
 800e06a:	4618      	mov	r0, r3
 800e06c:	f7fb faba 	bl	80095e4 <netif_get_by_index>
 800e070:	4603      	mov	r3, r0
 800e072:	e003      	b.n	800e07c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800e074:	6878      	ldr	r0, [r7, #4]
 800e076:	f003 f9cb 	bl	8011410 <ip4_route>
 800e07a:	4603      	mov	r3, r0
  }
}
 800e07c:	4618      	mov	r0, r3
 800e07e:	3710      	adds	r7, #16
 800e080:	46bd      	mov	sp, r7
 800e082:	bd80      	pop	{r7, pc}

0800e084 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800e084:	b590      	push	{r4, r7, lr}
 800e086:	b087      	sub	sp, #28
 800e088:	af00      	add	r7, sp, #0
 800e08a:	60f8      	str	r0, [r7, #12]
 800e08c:	60b9      	str	r1, [r7, #8]
 800e08e:	603b      	str	r3, [r7, #0]
 800e090:	4613      	mov	r3, r2
 800e092:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	2b00      	cmp	r3, #0
 800e098:	d105      	bne.n	800e0a6 <tcp_create_segment+0x22>
 800e09a:	4b43      	ldr	r3, [pc, #268]	@ (800e1a8 <tcp_create_segment+0x124>)
 800e09c:	22a3      	movs	r2, #163	@ 0xa3
 800e09e:	4943      	ldr	r1, [pc, #268]	@ (800e1ac <tcp_create_segment+0x128>)
 800e0a0:	4843      	ldr	r0, [pc, #268]	@ (800e1b0 <tcp_create_segment+0x12c>)
 800e0a2:	f004 fdef 	bl	8012c84 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800e0a6:	68bb      	ldr	r3, [r7, #8]
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d105      	bne.n	800e0b8 <tcp_create_segment+0x34>
 800e0ac:	4b3e      	ldr	r3, [pc, #248]	@ (800e1a8 <tcp_create_segment+0x124>)
 800e0ae:	22a4      	movs	r2, #164	@ 0xa4
 800e0b0:	4940      	ldr	r1, [pc, #256]	@ (800e1b4 <tcp_create_segment+0x130>)
 800e0b2:	483f      	ldr	r0, [pc, #252]	@ (800e1b0 <tcp_create_segment+0x12c>)
 800e0b4:	f004 fde6 	bl	8012c84 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800e0b8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800e0bc:	009b      	lsls	r3, r3, #2
 800e0be:	b2db      	uxtb	r3, r3
 800e0c0:	f003 0304 	and.w	r3, r3, #4
 800e0c4:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800e0c6:	2003      	movs	r0, #3
 800e0c8:	f7fa ff06 	bl	8008ed8 <memp_malloc>
 800e0cc:	6138      	str	r0, [r7, #16]
 800e0ce:	693b      	ldr	r3, [r7, #16]
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d104      	bne.n	800e0de <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800e0d4:	68b8      	ldr	r0, [r7, #8]
 800e0d6:	f7fb fde5 	bl	8009ca4 <pbuf_free>
    return NULL;
 800e0da:	2300      	movs	r3, #0
 800e0dc:	e060      	b.n	800e1a0 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 800e0de:	693b      	ldr	r3, [r7, #16]
 800e0e0:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800e0e4:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800e0e6:	693b      	ldr	r3, [r7, #16]
 800e0e8:	2200      	movs	r2, #0
 800e0ea:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800e0ec:	693b      	ldr	r3, [r7, #16]
 800e0ee:	68ba      	ldr	r2, [r7, #8]
 800e0f0:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800e0f2:	68bb      	ldr	r3, [r7, #8]
 800e0f4:	891a      	ldrh	r2, [r3, #8]
 800e0f6:	7dfb      	ldrb	r3, [r7, #23]
 800e0f8:	b29b      	uxth	r3, r3
 800e0fa:	429a      	cmp	r2, r3
 800e0fc:	d205      	bcs.n	800e10a <tcp_create_segment+0x86>
 800e0fe:	4b2a      	ldr	r3, [pc, #168]	@ (800e1a8 <tcp_create_segment+0x124>)
 800e100:	22b0      	movs	r2, #176	@ 0xb0
 800e102:	492d      	ldr	r1, [pc, #180]	@ (800e1b8 <tcp_create_segment+0x134>)
 800e104:	482a      	ldr	r0, [pc, #168]	@ (800e1b0 <tcp_create_segment+0x12c>)
 800e106:	f004 fdbd 	bl	8012c84 <iprintf>
  seg->len = p->tot_len - optlen;
 800e10a:	68bb      	ldr	r3, [r7, #8]
 800e10c:	891a      	ldrh	r2, [r3, #8]
 800e10e:	7dfb      	ldrb	r3, [r7, #23]
 800e110:	b29b      	uxth	r3, r3
 800e112:	1ad3      	subs	r3, r2, r3
 800e114:	b29a      	uxth	r2, r3
 800e116:	693b      	ldr	r3, [r7, #16]
 800e118:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800e11a:	2114      	movs	r1, #20
 800e11c:	68b8      	ldr	r0, [r7, #8]
 800e11e:	f7fb fd2b 	bl	8009b78 <pbuf_add_header>
 800e122:	4603      	mov	r3, r0
 800e124:	2b00      	cmp	r3, #0
 800e126:	d004      	beq.n	800e132 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800e128:	6938      	ldr	r0, [r7, #16]
 800e12a:	f7fd f8d2 	bl	800b2d2 <tcp_seg_free>
    return NULL;
 800e12e:	2300      	movs	r3, #0
 800e130:	e036      	b.n	800e1a0 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800e132:	693b      	ldr	r3, [r7, #16]
 800e134:	685b      	ldr	r3, [r3, #4]
 800e136:	685a      	ldr	r2, [r3, #4]
 800e138:	693b      	ldr	r3, [r7, #16]
 800e13a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	8ada      	ldrh	r2, [r3, #22]
 800e140:	693b      	ldr	r3, [r7, #16]
 800e142:	68dc      	ldr	r4, [r3, #12]
 800e144:	4610      	mov	r0, r2
 800e146:	f7fa fa4f 	bl	80085e8 <lwip_htons>
 800e14a:	4603      	mov	r3, r0
 800e14c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	8b1a      	ldrh	r2, [r3, #24]
 800e152:	693b      	ldr	r3, [r7, #16]
 800e154:	68dc      	ldr	r4, [r3, #12]
 800e156:	4610      	mov	r0, r2
 800e158:	f7fa fa46 	bl	80085e8 <lwip_htons>
 800e15c:	4603      	mov	r3, r0
 800e15e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800e160:	693b      	ldr	r3, [r7, #16]
 800e162:	68dc      	ldr	r4, [r3, #12]
 800e164:	6838      	ldr	r0, [r7, #0]
 800e166:	f7fa fa55 	bl	8008614 <lwip_htonl>
 800e16a:	4603      	mov	r3, r0
 800e16c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800e16e:	7dfb      	ldrb	r3, [r7, #23]
 800e170:	089b      	lsrs	r3, r3, #2
 800e172:	b2db      	uxtb	r3, r3
 800e174:	3305      	adds	r3, #5
 800e176:	b29b      	uxth	r3, r3
 800e178:	031b      	lsls	r3, r3, #12
 800e17a:	b29a      	uxth	r2, r3
 800e17c:	79fb      	ldrb	r3, [r7, #7]
 800e17e:	b29b      	uxth	r3, r3
 800e180:	4313      	orrs	r3, r2
 800e182:	b29a      	uxth	r2, r3
 800e184:	693b      	ldr	r3, [r7, #16]
 800e186:	68dc      	ldr	r4, [r3, #12]
 800e188:	4610      	mov	r0, r2
 800e18a:	f7fa fa2d 	bl	80085e8 <lwip_htons>
 800e18e:	4603      	mov	r3, r0
 800e190:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800e192:	693b      	ldr	r3, [r7, #16]
 800e194:	68db      	ldr	r3, [r3, #12]
 800e196:	2200      	movs	r2, #0
 800e198:	749a      	strb	r2, [r3, #18]
 800e19a:	2200      	movs	r2, #0
 800e19c:	74da      	strb	r2, [r3, #19]
  return seg;
 800e19e:	693b      	ldr	r3, [r7, #16]
}
 800e1a0:	4618      	mov	r0, r3
 800e1a2:	371c      	adds	r7, #28
 800e1a4:	46bd      	mov	sp, r7
 800e1a6:	bd90      	pop	{r4, r7, pc}
 800e1a8:	0801551c 	.word	0x0801551c
 800e1ac:	08015550 	.word	0x08015550
 800e1b0:	08015570 	.word	0x08015570
 800e1b4:	08015598 	.word	0x08015598
 800e1b8:	080155bc 	.word	0x080155bc

0800e1bc <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800e1bc:	b590      	push	{r4, r7, lr}
 800e1be:	b08b      	sub	sp, #44	@ 0x2c
 800e1c0:	af02      	add	r7, sp, #8
 800e1c2:	6078      	str	r0, [r7, #4]
 800e1c4:	460b      	mov	r3, r1
 800e1c6:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800e1c8:	2300      	movs	r3, #0
 800e1ca:	61fb      	str	r3, [r7, #28]
 800e1cc:	2300      	movs	r3, #0
 800e1ce:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800e1d0:	2300      	movs	r3, #0
 800e1d2:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d106      	bne.n	800e1e8 <tcp_split_unsent_seg+0x2c>
 800e1da:	4b95      	ldr	r3, [pc, #596]	@ (800e430 <tcp_split_unsent_seg+0x274>)
 800e1dc:	f240 324b 	movw	r2, #843	@ 0x34b
 800e1e0:	4994      	ldr	r1, [pc, #592]	@ (800e434 <tcp_split_unsent_seg+0x278>)
 800e1e2:	4895      	ldr	r0, [pc, #596]	@ (800e438 <tcp_split_unsent_seg+0x27c>)
 800e1e4:	f004 fd4e 	bl	8012c84 <iprintf>

  useg = pcb->unsent;
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e1ec:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800e1ee:	697b      	ldr	r3, [r7, #20]
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d102      	bne.n	800e1fa <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800e1f4:	f04f 33ff 	mov.w	r3, #4294967295
 800e1f8:	e116      	b.n	800e428 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800e1fa:	887b      	ldrh	r3, [r7, #2]
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d109      	bne.n	800e214 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800e200:	4b8b      	ldr	r3, [pc, #556]	@ (800e430 <tcp_split_unsent_seg+0x274>)
 800e202:	f240 3253 	movw	r2, #851	@ 0x353
 800e206:	498d      	ldr	r1, [pc, #564]	@ (800e43c <tcp_split_unsent_seg+0x280>)
 800e208:	488b      	ldr	r0, [pc, #556]	@ (800e438 <tcp_split_unsent_seg+0x27c>)
 800e20a:	f004 fd3b 	bl	8012c84 <iprintf>
    return ERR_VAL;
 800e20e:	f06f 0305 	mvn.w	r3, #5
 800e212:	e109      	b.n	800e428 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800e214:	697b      	ldr	r3, [r7, #20]
 800e216:	891b      	ldrh	r3, [r3, #8]
 800e218:	887a      	ldrh	r2, [r7, #2]
 800e21a:	429a      	cmp	r2, r3
 800e21c:	d301      	bcc.n	800e222 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800e21e:	2300      	movs	r3, #0
 800e220:	e102      	b.n	800e428 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e226:	887a      	ldrh	r2, [r7, #2]
 800e228:	429a      	cmp	r2, r3
 800e22a:	d906      	bls.n	800e23a <tcp_split_unsent_seg+0x7e>
 800e22c:	4b80      	ldr	r3, [pc, #512]	@ (800e430 <tcp_split_unsent_seg+0x274>)
 800e22e:	f240 325b 	movw	r2, #859	@ 0x35b
 800e232:	4983      	ldr	r1, [pc, #524]	@ (800e440 <tcp_split_unsent_seg+0x284>)
 800e234:	4880      	ldr	r0, [pc, #512]	@ (800e438 <tcp_split_unsent_seg+0x27c>)
 800e236:	f004 fd25 	bl	8012c84 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800e23a:	697b      	ldr	r3, [r7, #20]
 800e23c:	891b      	ldrh	r3, [r3, #8]
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d106      	bne.n	800e250 <tcp_split_unsent_seg+0x94>
 800e242:	4b7b      	ldr	r3, [pc, #492]	@ (800e430 <tcp_split_unsent_seg+0x274>)
 800e244:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 800e248:	497e      	ldr	r1, [pc, #504]	@ (800e444 <tcp_split_unsent_seg+0x288>)
 800e24a:	487b      	ldr	r0, [pc, #492]	@ (800e438 <tcp_split_unsent_seg+0x27c>)
 800e24c:	f004 fd1a 	bl	8012c84 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800e250:	697b      	ldr	r3, [r7, #20]
 800e252:	7a9b      	ldrb	r3, [r3, #10]
 800e254:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800e256:	7bfb      	ldrb	r3, [r7, #15]
 800e258:	009b      	lsls	r3, r3, #2
 800e25a:	b2db      	uxtb	r3, r3
 800e25c:	f003 0304 	and.w	r3, r3, #4
 800e260:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800e262:	697b      	ldr	r3, [r7, #20]
 800e264:	891a      	ldrh	r2, [r3, #8]
 800e266:	887b      	ldrh	r3, [r7, #2]
 800e268:	1ad3      	subs	r3, r2, r3
 800e26a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800e26c:	7bbb      	ldrb	r3, [r7, #14]
 800e26e:	b29a      	uxth	r2, r3
 800e270:	89bb      	ldrh	r3, [r7, #12]
 800e272:	4413      	add	r3, r2
 800e274:	b29b      	uxth	r3, r3
 800e276:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800e27a:	4619      	mov	r1, r3
 800e27c:	2036      	movs	r0, #54	@ 0x36
 800e27e:	f7fb fa2d 	bl	80096dc <pbuf_alloc>
 800e282:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800e284:	693b      	ldr	r3, [r7, #16]
 800e286:	2b00      	cmp	r3, #0
 800e288:	f000 80b7 	beq.w	800e3fa <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800e28c:	697b      	ldr	r3, [r7, #20]
 800e28e:	685b      	ldr	r3, [r3, #4]
 800e290:	891a      	ldrh	r2, [r3, #8]
 800e292:	697b      	ldr	r3, [r7, #20]
 800e294:	891b      	ldrh	r3, [r3, #8]
 800e296:	1ad3      	subs	r3, r2, r3
 800e298:	b29a      	uxth	r2, r3
 800e29a:	887b      	ldrh	r3, [r7, #2]
 800e29c:	4413      	add	r3, r2
 800e29e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800e2a0:	697b      	ldr	r3, [r7, #20]
 800e2a2:	6858      	ldr	r0, [r3, #4]
 800e2a4:	693b      	ldr	r3, [r7, #16]
 800e2a6:	685a      	ldr	r2, [r3, #4]
 800e2a8:	7bbb      	ldrb	r3, [r7, #14]
 800e2aa:	18d1      	adds	r1, r2, r3
 800e2ac:	897b      	ldrh	r3, [r7, #10]
 800e2ae:	89ba      	ldrh	r2, [r7, #12]
 800e2b0:	f7fb fef2 	bl	800a098 <pbuf_copy_partial>
 800e2b4:	4603      	mov	r3, r0
 800e2b6:	461a      	mov	r2, r3
 800e2b8:	89bb      	ldrh	r3, [r7, #12]
 800e2ba:	4293      	cmp	r3, r2
 800e2bc:	f040 809f 	bne.w	800e3fe <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800e2c0:	697b      	ldr	r3, [r7, #20]
 800e2c2:	68db      	ldr	r3, [r3, #12]
 800e2c4:	899b      	ldrh	r3, [r3, #12]
 800e2c6:	b29b      	uxth	r3, r3
 800e2c8:	4618      	mov	r0, r3
 800e2ca:	f7fa f98d 	bl	80085e8 <lwip_htons>
 800e2ce:	4603      	mov	r3, r0
 800e2d0:	b2db      	uxtb	r3, r3
 800e2d2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e2d6:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800e2d8:	2300      	movs	r3, #0
 800e2da:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800e2dc:	7efb      	ldrb	r3, [r7, #27]
 800e2de:	f003 0308 	and.w	r3, r3, #8
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d007      	beq.n	800e2f6 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800e2e6:	7efb      	ldrb	r3, [r7, #27]
 800e2e8:	f023 0308 	bic.w	r3, r3, #8
 800e2ec:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800e2ee:	7ebb      	ldrb	r3, [r7, #26]
 800e2f0:	f043 0308 	orr.w	r3, r3, #8
 800e2f4:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800e2f6:	7efb      	ldrb	r3, [r7, #27]
 800e2f8:	f003 0301 	and.w	r3, r3, #1
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d007      	beq.n	800e310 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800e300:	7efb      	ldrb	r3, [r7, #27]
 800e302:	f023 0301 	bic.w	r3, r3, #1
 800e306:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800e308:	7ebb      	ldrb	r3, [r7, #26]
 800e30a:	f043 0301 	orr.w	r3, r3, #1
 800e30e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800e310:	697b      	ldr	r3, [r7, #20]
 800e312:	68db      	ldr	r3, [r3, #12]
 800e314:	685b      	ldr	r3, [r3, #4]
 800e316:	4618      	mov	r0, r3
 800e318:	f7fa f97c 	bl	8008614 <lwip_htonl>
 800e31c:	4602      	mov	r2, r0
 800e31e:	887b      	ldrh	r3, [r7, #2]
 800e320:	18d1      	adds	r1, r2, r3
 800e322:	7eba      	ldrb	r2, [r7, #26]
 800e324:	7bfb      	ldrb	r3, [r7, #15]
 800e326:	9300      	str	r3, [sp, #0]
 800e328:	460b      	mov	r3, r1
 800e32a:	6939      	ldr	r1, [r7, #16]
 800e32c:	6878      	ldr	r0, [r7, #4]
 800e32e:	f7ff fea9 	bl	800e084 <tcp_create_segment>
 800e332:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800e334:	69fb      	ldr	r3, [r7, #28]
 800e336:	2b00      	cmp	r3, #0
 800e338:	d063      	beq.n	800e402 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800e33a:	697b      	ldr	r3, [r7, #20]
 800e33c:	685b      	ldr	r3, [r3, #4]
 800e33e:	4618      	mov	r0, r3
 800e340:	f7fb fd38 	bl	8009db4 <pbuf_clen>
 800e344:	4603      	mov	r3, r0
 800e346:	461a      	mov	r2, r3
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800e34e:	1a9b      	subs	r3, r3, r2
 800e350:	b29a      	uxth	r2, r3
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800e358:	697b      	ldr	r3, [r7, #20]
 800e35a:	6858      	ldr	r0, [r3, #4]
 800e35c:	697b      	ldr	r3, [r7, #20]
 800e35e:	685b      	ldr	r3, [r3, #4]
 800e360:	891a      	ldrh	r2, [r3, #8]
 800e362:	89bb      	ldrh	r3, [r7, #12]
 800e364:	1ad3      	subs	r3, r2, r3
 800e366:	b29b      	uxth	r3, r3
 800e368:	4619      	mov	r1, r3
 800e36a:	f7fb fb15 	bl	8009998 <pbuf_realloc>
  useg->len -= remainder;
 800e36e:	697b      	ldr	r3, [r7, #20]
 800e370:	891a      	ldrh	r2, [r3, #8]
 800e372:	89bb      	ldrh	r3, [r7, #12]
 800e374:	1ad3      	subs	r3, r2, r3
 800e376:	b29a      	uxth	r2, r3
 800e378:	697b      	ldr	r3, [r7, #20]
 800e37a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800e37c:	697b      	ldr	r3, [r7, #20]
 800e37e:	68db      	ldr	r3, [r3, #12]
 800e380:	899b      	ldrh	r3, [r3, #12]
 800e382:	b29c      	uxth	r4, r3
 800e384:	7efb      	ldrb	r3, [r7, #27]
 800e386:	b29b      	uxth	r3, r3
 800e388:	4618      	mov	r0, r3
 800e38a:	f7fa f92d 	bl	80085e8 <lwip_htons>
 800e38e:	4603      	mov	r3, r0
 800e390:	461a      	mov	r2, r3
 800e392:	697b      	ldr	r3, [r7, #20]
 800e394:	68db      	ldr	r3, [r3, #12]
 800e396:	4322      	orrs	r2, r4
 800e398:	b292      	uxth	r2, r2
 800e39a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800e39c:	697b      	ldr	r3, [r7, #20]
 800e39e:	685b      	ldr	r3, [r3, #4]
 800e3a0:	4618      	mov	r0, r3
 800e3a2:	f7fb fd07 	bl	8009db4 <pbuf_clen>
 800e3a6:	4603      	mov	r3, r0
 800e3a8:	461a      	mov	r2, r3
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800e3b0:	4413      	add	r3, r2
 800e3b2:	b29a      	uxth	r2, r3
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800e3ba:	69fb      	ldr	r3, [r7, #28]
 800e3bc:	685b      	ldr	r3, [r3, #4]
 800e3be:	4618      	mov	r0, r3
 800e3c0:	f7fb fcf8 	bl	8009db4 <pbuf_clen>
 800e3c4:	4603      	mov	r3, r0
 800e3c6:	461a      	mov	r2, r3
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800e3ce:	4413      	add	r3, r2
 800e3d0:	b29a      	uxth	r2, r3
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800e3d8:	697b      	ldr	r3, [r7, #20]
 800e3da:	681a      	ldr	r2, [r3, #0]
 800e3dc:	69fb      	ldr	r3, [r7, #28]
 800e3de:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800e3e0:	697b      	ldr	r3, [r7, #20]
 800e3e2:	69fa      	ldr	r2, [r7, #28]
 800e3e4:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800e3e6:	69fb      	ldr	r3, [r7, #28]
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d103      	bne.n	800e3f6 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	2200      	movs	r2, #0
 800e3f2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800e3f6:	2300      	movs	r3, #0
 800e3f8:	e016      	b.n	800e428 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800e3fa:	bf00      	nop
 800e3fc:	e002      	b.n	800e404 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800e3fe:	bf00      	nop
 800e400:	e000      	b.n	800e404 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800e402:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800e404:	69fb      	ldr	r3, [r7, #28]
 800e406:	2b00      	cmp	r3, #0
 800e408:	d006      	beq.n	800e418 <tcp_split_unsent_seg+0x25c>
 800e40a:	4b09      	ldr	r3, [pc, #36]	@ (800e430 <tcp_split_unsent_seg+0x274>)
 800e40c:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 800e410:	490d      	ldr	r1, [pc, #52]	@ (800e448 <tcp_split_unsent_seg+0x28c>)
 800e412:	4809      	ldr	r0, [pc, #36]	@ (800e438 <tcp_split_unsent_seg+0x27c>)
 800e414:	f004 fc36 	bl	8012c84 <iprintf>
  if (p != NULL) {
 800e418:	693b      	ldr	r3, [r7, #16]
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d002      	beq.n	800e424 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800e41e:	6938      	ldr	r0, [r7, #16]
 800e420:	f7fb fc40 	bl	8009ca4 <pbuf_free>
  }

  return ERR_MEM;
 800e424:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e428:	4618      	mov	r0, r3
 800e42a:	3724      	adds	r7, #36	@ 0x24
 800e42c:	46bd      	mov	sp, r7
 800e42e:	bd90      	pop	{r4, r7, pc}
 800e430:	0801551c 	.word	0x0801551c
 800e434:	080158b0 	.word	0x080158b0
 800e438:	08015570 	.word	0x08015570
 800e43c:	080158d4 	.word	0x080158d4
 800e440:	080158f8 	.word	0x080158f8
 800e444:	08015908 	.word	0x08015908
 800e448:	08015918 	.word	0x08015918

0800e44c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800e44c:	b590      	push	{r4, r7, lr}
 800e44e:	b085      	sub	sp, #20
 800e450:	af00      	add	r7, sp, #0
 800e452:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	2b00      	cmp	r3, #0
 800e458:	d106      	bne.n	800e468 <tcp_send_fin+0x1c>
 800e45a:	4b21      	ldr	r3, [pc, #132]	@ (800e4e0 <tcp_send_fin+0x94>)
 800e45c:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 800e460:	4920      	ldr	r1, [pc, #128]	@ (800e4e4 <tcp_send_fin+0x98>)
 800e462:	4821      	ldr	r0, [pc, #132]	@ (800e4e8 <tcp_send_fin+0x9c>)
 800e464:	f004 fc0e 	bl	8012c84 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d02e      	beq.n	800e4ce <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e474:	60fb      	str	r3, [r7, #12]
 800e476:	e002      	b.n	800e47e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	2b00      	cmp	r3, #0
 800e484:	d1f8      	bne.n	800e478 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	68db      	ldr	r3, [r3, #12]
 800e48a:	899b      	ldrh	r3, [r3, #12]
 800e48c:	b29b      	uxth	r3, r3
 800e48e:	4618      	mov	r0, r3
 800e490:	f7fa f8aa 	bl	80085e8 <lwip_htons>
 800e494:	4603      	mov	r3, r0
 800e496:	b2db      	uxtb	r3, r3
 800e498:	f003 0307 	and.w	r3, r3, #7
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d116      	bne.n	800e4ce <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	68db      	ldr	r3, [r3, #12]
 800e4a4:	899b      	ldrh	r3, [r3, #12]
 800e4a6:	b29c      	uxth	r4, r3
 800e4a8:	2001      	movs	r0, #1
 800e4aa:	f7fa f89d 	bl	80085e8 <lwip_htons>
 800e4ae:	4603      	mov	r3, r0
 800e4b0:	461a      	mov	r2, r3
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	68db      	ldr	r3, [r3, #12]
 800e4b6:	4322      	orrs	r2, r4
 800e4b8:	b292      	uxth	r2, r2
 800e4ba:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	8b5b      	ldrh	r3, [r3, #26]
 800e4c0:	f043 0320 	orr.w	r3, r3, #32
 800e4c4:	b29a      	uxth	r2, r3
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800e4ca:	2300      	movs	r3, #0
 800e4cc:	e004      	b.n	800e4d8 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800e4ce:	2101      	movs	r1, #1
 800e4d0:	6878      	ldr	r0, [r7, #4]
 800e4d2:	f000 f80b 	bl	800e4ec <tcp_enqueue_flags>
 800e4d6:	4603      	mov	r3, r0
}
 800e4d8:	4618      	mov	r0, r3
 800e4da:	3714      	adds	r7, #20
 800e4dc:	46bd      	mov	sp, r7
 800e4de:	bd90      	pop	{r4, r7, pc}
 800e4e0:	0801551c 	.word	0x0801551c
 800e4e4:	08015924 	.word	0x08015924
 800e4e8:	08015570 	.word	0x08015570

0800e4ec <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800e4ec:	b580      	push	{r7, lr}
 800e4ee:	b08a      	sub	sp, #40	@ 0x28
 800e4f0:	af02      	add	r7, sp, #8
 800e4f2:	6078      	str	r0, [r7, #4]
 800e4f4:	460b      	mov	r3, r1
 800e4f6:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800e4f8:	2300      	movs	r3, #0
 800e4fa:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800e4fc:	2300      	movs	r3, #0
 800e4fe:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800e500:	78fb      	ldrb	r3, [r7, #3]
 800e502:	f003 0303 	and.w	r3, r3, #3
 800e506:	2b00      	cmp	r3, #0
 800e508:	d106      	bne.n	800e518 <tcp_enqueue_flags+0x2c>
 800e50a:	4b67      	ldr	r3, [pc, #412]	@ (800e6a8 <tcp_enqueue_flags+0x1bc>)
 800e50c:	f240 4211 	movw	r2, #1041	@ 0x411
 800e510:	4966      	ldr	r1, [pc, #408]	@ (800e6ac <tcp_enqueue_flags+0x1c0>)
 800e512:	4867      	ldr	r0, [pc, #412]	@ (800e6b0 <tcp_enqueue_flags+0x1c4>)
 800e514:	f004 fbb6 	bl	8012c84 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d106      	bne.n	800e52c <tcp_enqueue_flags+0x40>
 800e51e:	4b62      	ldr	r3, [pc, #392]	@ (800e6a8 <tcp_enqueue_flags+0x1bc>)
 800e520:	f240 4213 	movw	r2, #1043	@ 0x413
 800e524:	4963      	ldr	r1, [pc, #396]	@ (800e6b4 <tcp_enqueue_flags+0x1c8>)
 800e526:	4862      	ldr	r0, [pc, #392]	@ (800e6b0 <tcp_enqueue_flags+0x1c4>)
 800e528:	f004 fbac 	bl	8012c84 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800e52c:	78fb      	ldrb	r3, [r7, #3]
 800e52e:	f003 0302 	and.w	r3, r3, #2
 800e532:	2b00      	cmp	r3, #0
 800e534:	d001      	beq.n	800e53a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800e536:	2301      	movs	r3, #1
 800e538:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800e53a:	7ffb      	ldrb	r3, [r7, #31]
 800e53c:	009b      	lsls	r3, r3, #2
 800e53e:	b2db      	uxtb	r3, r3
 800e540:	f003 0304 	and.w	r3, r3, #4
 800e544:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800e546:	7dfb      	ldrb	r3, [r7, #23]
 800e548:	b29b      	uxth	r3, r3
 800e54a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800e54e:	4619      	mov	r1, r3
 800e550:	2036      	movs	r0, #54	@ 0x36
 800e552:	f7fb f8c3 	bl	80096dc <pbuf_alloc>
 800e556:	6138      	str	r0, [r7, #16]
 800e558:	693b      	ldr	r3, [r7, #16]
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d109      	bne.n	800e572 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	8b5b      	ldrh	r3, [r3, #26]
 800e562:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e566:	b29a      	uxth	r2, r3
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800e56c:	f04f 33ff 	mov.w	r3, #4294967295
 800e570:	e095      	b.n	800e69e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800e572:	693b      	ldr	r3, [r7, #16]
 800e574:	895a      	ldrh	r2, [r3, #10]
 800e576:	7dfb      	ldrb	r3, [r7, #23]
 800e578:	b29b      	uxth	r3, r3
 800e57a:	429a      	cmp	r2, r3
 800e57c:	d206      	bcs.n	800e58c <tcp_enqueue_flags+0xa0>
 800e57e:	4b4a      	ldr	r3, [pc, #296]	@ (800e6a8 <tcp_enqueue_flags+0x1bc>)
 800e580:	f240 4239 	movw	r2, #1081	@ 0x439
 800e584:	494c      	ldr	r1, [pc, #304]	@ (800e6b8 <tcp_enqueue_flags+0x1cc>)
 800e586:	484a      	ldr	r0, [pc, #296]	@ (800e6b0 <tcp_enqueue_flags+0x1c4>)
 800e588:	f004 fb7c 	bl	8012c84 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 800e590:	78fa      	ldrb	r2, [r7, #3]
 800e592:	7ffb      	ldrb	r3, [r7, #31]
 800e594:	9300      	str	r3, [sp, #0]
 800e596:	460b      	mov	r3, r1
 800e598:	6939      	ldr	r1, [r7, #16]
 800e59a:	6878      	ldr	r0, [r7, #4]
 800e59c:	f7ff fd72 	bl	800e084 <tcp_create_segment>
 800e5a0:	60f8      	str	r0, [r7, #12]
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d109      	bne.n	800e5bc <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	8b5b      	ldrh	r3, [r3, #26]
 800e5ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e5b0:	b29a      	uxth	r2, r3
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800e5b6:	f04f 33ff 	mov.w	r3, #4294967295
 800e5ba:	e070      	b.n	800e69e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	68db      	ldr	r3, [r3, #12]
 800e5c0:	f003 0303 	and.w	r3, r3, #3
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d006      	beq.n	800e5d6 <tcp_enqueue_flags+0xea>
 800e5c8:	4b37      	ldr	r3, [pc, #220]	@ (800e6a8 <tcp_enqueue_flags+0x1bc>)
 800e5ca:	f240 4242 	movw	r2, #1090	@ 0x442
 800e5ce:	493b      	ldr	r1, [pc, #236]	@ (800e6bc <tcp_enqueue_flags+0x1d0>)
 800e5d0:	4837      	ldr	r0, [pc, #220]	@ (800e6b0 <tcp_enqueue_flags+0x1c4>)
 800e5d2:	f004 fb57 	bl	8012c84 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	891b      	ldrh	r3, [r3, #8]
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d006      	beq.n	800e5ec <tcp_enqueue_flags+0x100>
 800e5de:	4b32      	ldr	r3, [pc, #200]	@ (800e6a8 <tcp_enqueue_flags+0x1bc>)
 800e5e0:	f240 4243 	movw	r2, #1091	@ 0x443
 800e5e4:	4936      	ldr	r1, [pc, #216]	@ (800e6c0 <tcp_enqueue_flags+0x1d4>)
 800e5e6:	4832      	ldr	r0, [pc, #200]	@ (800e6b0 <tcp_enqueue_flags+0x1c4>)
 800e5e8:	f004 fb4c 	bl	8012c84 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d103      	bne.n	800e5fc <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	68fa      	ldr	r2, [r7, #12]
 800e5f8:	66da      	str	r2, [r3, #108]	@ 0x6c
 800e5fa:	e00d      	b.n	800e618 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e600:	61bb      	str	r3, [r7, #24]
 800e602:	e002      	b.n	800e60a <tcp_enqueue_flags+0x11e>
 800e604:	69bb      	ldr	r3, [r7, #24]
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	61bb      	str	r3, [r7, #24]
 800e60a:	69bb      	ldr	r3, [r7, #24]
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d1f8      	bne.n	800e604 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800e612:	69bb      	ldr	r3, [r7, #24]
 800e614:	68fa      	ldr	r2, [r7, #12]
 800e616:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	2200      	movs	r2, #0
 800e61c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800e620:	78fb      	ldrb	r3, [r7, #3]
 800e622:	f003 0302 	and.w	r3, r3, #2
 800e626:	2b00      	cmp	r3, #0
 800e628:	d104      	bne.n	800e634 <tcp_enqueue_flags+0x148>
 800e62a:	78fb      	ldrb	r3, [r7, #3]
 800e62c:	f003 0301 	and.w	r3, r3, #1
 800e630:	2b00      	cmp	r3, #0
 800e632:	d004      	beq.n	800e63e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e638:	1c5a      	adds	r2, r3, #1
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800e63e:	78fb      	ldrb	r3, [r7, #3]
 800e640:	f003 0301 	and.w	r3, r3, #1
 800e644:	2b00      	cmp	r3, #0
 800e646:	d006      	beq.n	800e656 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	8b5b      	ldrh	r3, [r3, #26]
 800e64c:	f043 0320 	orr.w	r3, r3, #32
 800e650:	b29a      	uxth	r2, r3
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	685b      	ldr	r3, [r3, #4]
 800e65a:	4618      	mov	r0, r3
 800e65c:	f7fb fbaa 	bl	8009db4 <pbuf_clen>
 800e660:	4603      	mov	r3, r0
 800e662:	461a      	mov	r2, r3
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800e66a:	4413      	add	r3, r2
 800e66c:	b29a      	uxth	r2, r3
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d00e      	beq.n	800e69c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e682:	2b00      	cmp	r3, #0
 800e684:	d10a      	bne.n	800e69c <tcp_enqueue_flags+0x1b0>
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d106      	bne.n	800e69c <tcp_enqueue_flags+0x1b0>
 800e68e:	4b06      	ldr	r3, [pc, #24]	@ (800e6a8 <tcp_enqueue_flags+0x1bc>)
 800e690:	f240 4265 	movw	r2, #1125	@ 0x465
 800e694:	490b      	ldr	r1, [pc, #44]	@ (800e6c4 <tcp_enqueue_flags+0x1d8>)
 800e696:	4806      	ldr	r0, [pc, #24]	@ (800e6b0 <tcp_enqueue_flags+0x1c4>)
 800e698:	f004 faf4 	bl	8012c84 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800e69c:	2300      	movs	r3, #0
}
 800e69e:	4618      	mov	r0, r3
 800e6a0:	3720      	adds	r7, #32
 800e6a2:	46bd      	mov	sp, r7
 800e6a4:	bd80      	pop	{r7, pc}
 800e6a6:	bf00      	nop
 800e6a8:	0801551c 	.word	0x0801551c
 800e6ac:	08015940 	.word	0x08015940
 800e6b0:	08015570 	.word	0x08015570
 800e6b4:	08015998 	.word	0x08015998
 800e6b8:	080159b8 	.word	0x080159b8
 800e6bc:	080159f4 	.word	0x080159f4
 800e6c0:	08015a0c 	.word	0x08015a0c
 800e6c4:	08015a38 	.word	0x08015a38

0800e6c8 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800e6c8:	b5b0      	push	{r4, r5, r7, lr}
 800e6ca:	b08a      	sub	sp, #40	@ 0x28
 800e6cc:	af00      	add	r7, sp, #0
 800e6ce:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d106      	bne.n	800e6e4 <tcp_output+0x1c>
 800e6d6:	4b8a      	ldr	r3, [pc, #552]	@ (800e900 <tcp_output+0x238>)
 800e6d8:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 800e6dc:	4989      	ldr	r1, [pc, #548]	@ (800e904 <tcp_output+0x23c>)
 800e6de:	488a      	ldr	r0, [pc, #552]	@ (800e908 <tcp_output+0x240>)
 800e6e0:	f004 fad0 	bl	8012c84 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	7d1b      	ldrb	r3, [r3, #20]
 800e6e8:	2b01      	cmp	r3, #1
 800e6ea:	d106      	bne.n	800e6fa <tcp_output+0x32>
 800e6ec:	4b84      	ldr	r3, [pc, #528]	@ (800e900 <tcp_output+0x238>)
 800e6ee:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 800e6f2:	4986      	ldr	r1, [pc, #536]	@ (800e90c <tcp_output+0x244>)
 800e6f4:	4884      	ldr	r0, [pc, #528]	@ (800e908 <tcp_output+0x240>)
 800e6f6:	f004 fac5 	bl	8012c84 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800e6fa:	4b85      	ldr	r3, [pc, #532]	@ (800e910 <tcp_output+0x248>)
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	687a      	ldr	r2, [r7, #4]
 800e700:	429a      	cmp	r2, r3
 800e702:	d101      	bne.n	800e708 <tcp_output+0x40>
    return ERR_OK;
 800e704:	2300      	movs	r3, #0
 800e706:	e1ce      	b.n	800eaa6 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e714:	4293      	cmp	r3, r2
 800e716:	bf28      	it	cs
 800e718:	4613      	movcs	r3, r2
 800e71a:	b29b      	uxth	r3, r3
 800e71c:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e722:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 800e724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e726:	2b00      	cmp	r3, #0
 800e728:	d10b      	bne.n	800e742 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	8b5b      	ldrh	r3, [r3, #26]
 800e72e:	f003 0302 	and.w	r3, r3, #2
 800e732:	2b00      	cmp	r3, #0
 800e734:	f000 81aa 	beq.w	800ea8c <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800e738:	6878      	ldr	r0, [r7, #4]
 800e73a:	f000 fdcb 	bl	800f2d4 <tcp_send_empty_ack>
 800e73e:	4603      	mov	r3, r0
 800e740:	e1b1      	b.n	800eaa6 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800e742:	6879      	ldr	r1, [r7, #4]
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	3304      	adds	r3, #4
 800e748:	461a      	mov	r2, r3
 800e74a:	6878      	ldr	r0, [r7, #4]
 800e74c:	f7ff fc7e 	bl	800e04c <tcp_route>
 800e750:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800e752:	697b      	ldr	r3, [r7, #20]
 800e754:	2b00      	cmp	r3, #0
 800e756:	d102      	bne.n	800e75e <tcp_output+0x96>
    return ERR_RTE;
 800e758:	f06f 0303 	mvn.w	r3, #3
 800e75c:	e1a3      	b.n	800eaa6 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	2b00      	cmp	r3, #0
 800e762:	d003      	beq.n	800e76c <tcp_output+0xa4>
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d111      	bne.n	800e790 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800e76c:	697b      	ldr	r3, [r7, #20]
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d002      	beq.n	800e778 <tcp_output+0xb0>
 800e772:	697b      	ldr	r3, [r7, #20]
 800e774:	3304      	adds	r3, #4
 800e776:	e000      	b.n	800e77a <tcp_output+0xb2>
 800e778:	2300      	movs	r3, #0
 800e77a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800e77c:	693b      	ldr	r3, [r7, #16]
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d102      	bne.n	800e788 <tcp_output+0xc0>
      return ERR_RTE;
 800e782:	f06f 0303 	mvn.w	r3, #3
 800e786:	e18e      	b.n	800eaa6 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800e788:	693b      	ldr	r3, [r7, #16]
 800e78a:	681a      	ldr	r2, [r3, #0]
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800e790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e792:	68db      	ldr	r3, [r3, #12]
 800e794:	685b      	ldr	r3, [r3, #4]
 800e796:	4618      	mov	r0, r3
 800e798:	f7f9 ff3c 	bl	8008614 <lwip_htonl>
 800e79c:	4602      	mov	r2, r0
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e7a2:	1ad3      	subs	r3, r2, r3
 800e7a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e7a6:	8912      	ldrh	r2, [r2, #8]
 800e7a8:	4413      	add	r3, r2
 800e7aa:	69ba      	ldr	r2, [r7, #24]
 800e7ac:	429a      	cmp	r2, r3
 800e7ae:	d227      	bcs.n	800e800 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e7b6:	461a      	mov	r2, r3
 800e7b8:	69bb      	ldr	r3, [r7, #24]
 800e7ba:	4293      	cmp	r3, r2
 800e7bc:	d114      	bne.n	800e7e8 <tcp_output+0x120>
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d110      	bne.n	800e7e8 <tcp_output+0x120>
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d10b      	bne.n	800e7e8 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	2200      	movs	r2, #0
 800e7d4:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	2201      	movs	r2, #1
 800e7dc:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	2200      	movs	r2, #0
 800e7e4:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	8b5b      	ldrh	r3, [r3, #26]
 800e7ec:	f003 0302 	and.w	r3, r3, #2
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	f000 814d 	beq.w	800ea90 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800e7f6:	6878      	ldr	r0, [r7, #4]
 800e7f8:	f000 fd6c 	bl	800f2d4 <tcp_send_empty_ack>
 800e7fc:	4603      	mov	r3, r0
 800e7fe:	e152      	b.n	800eaa6 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	2200      	movs	r2, #0
 800e804:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e80c:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800e80e:	6a3b      	ldr	r3, [r7, #32]
 800e810:	2b00      	cmp	r3, #0
 800e812:	f000 811c 	beq.w	800ea4e <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800e816:	e002      	b.n	800e81e <tcp_output+0x156>
 800e818:	6a3b      	ldr	r3, [r7, #32]
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	623b      	str	r3, [r7, #32]
 800e81e:	6a3b      	ldr	r3, [r7, #32]
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	2b00      	cmp	r3, #0
 800e824:	d1f8      	bne.n	800e818 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800e826:	e112      	b.n	800ea4e <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800e828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e82a:	68db      	ldr	r3, [r3, #12]
 800e82c:	899b      	ldrh	r3, [r3, #12]
 800e82e:	b29b      	uxth	r3, r3
 800e830:	4618      	mov	r0, r3
 800e832:	f7f9 fed9 	bl	80085e8 <lwip_htons>
 800e836:	4603      	mov	r3, r0
 800e838:	b2db      	uxtb	r3, r3
 800e83a:	f003 0304 	and.w	r3, r3, #4
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d006      	beq.n	800e850 <tcp_output+0x188>
 800e842:	4b2f      	ldr	r3, [pc, #188]	@ (800e900 <tcp_output+0x238>)
 800e844:	f240 5236 	movw	r2, #1334	@ 0x536
 800e848:	4932      	ldr	r1, [pc, #200]	@ (800e914 <tcp_output+0x24c>)
 800e84a:	482f      	ldr	r0, [pc, #188]	@ (800e908 <tcp_output+0x240>)
 800e84c:	f004 fa1a 	bl	8012c84 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e854:	2b00      	cmp	r3, #0
 800e856:	d01f      	beq.n	800e898 <tcp_output+0x1d0>
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	8b5b      	ldrh	r3, [r3, #26]
 800e85c:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 800e860:	2b00      	cmp	r3, #0
 800e862:	d119      	bne.n	800e898 <tcp_output+0x1d0>
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d00b      	beq.n	800e884 <tcp_output+0x1bc>
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	2b00      	cmp	r3, #0
 800e874:	d110      	bne.n	800e898 <tcp_output+0x1d0>
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e87a:	891a      	ldrh	r2, [r3, #8]
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e880:	429a      	cmp	r2, r3
 800e882:	d209      	bcs.n	800e898 <tcp_output+0x1d0>
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d004      	beq.n	800e898 <tcp_output+0x1d0>
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800e894:	2b08      	cmp	r3, #8
 800e896:	d901      	bls.n	800e89c <tcp_output+0x1d4>
 800e898:	2301      	movs	r3, #1
 800e89a:	e000      	b.n	800e89e <tcp_output+0x1d6>
 800e89c:	2300      	movs	r3, #0
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d106      	bne.n	800e8b0 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	8b5b      	ldrh	r3, [r3, #26]
 800e8a6:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	f000 80e4 	beq.w	800ea78 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	7d1b      	ldrb	r3, [r3, #20]
 800e8b4:	2b02      	cmp	r3, #2
 800e8b6:	d00d      	beq.n	800e8d4 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800e8b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8ba:	68db      	ldr	r3, [r3, #12]
 800e8bc:	899b      	ldrh	r3, [r3, #12]
 800e8be:	b29c      	uxth	r4, r3
 800e8c0:	2010      	movs	r0, #16
 800e8c2:	f7f9 fe91 	bl	80085e8 <lwip_htons>
 800e8c6:	4603      	mov	r3, r0
 800e8c8:	461a      	mov	r2, r3
 800e8ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8cc:	68db      	ldr	r3, [r3, #12]
 800e8ce:	4322      	orrs	r2, r4
 800e8d0:	b292      	uxth	r2, r2
 800e8d2:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800e8d4:	697a      	ldr	r2, [r7, #20]
 800e8d6:	6879      	ldr	r1, [r7, #4]
 800e8d8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e8da:	f000 f909 	bl	800eaf0 <tcp_output_segment>
 800e8de:	4603      	mov	r3, r0
 800e8e0:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800e8e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d016      	beq.n	800e918 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	8b5b      	ldrh	r3, [r3, #26]
 800e8ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e8f2:	b29a      	uxth	r2, r3
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	835a      	strh	r2, [r3, #26]
      return err;
 800e8f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e8fc:	e0d3      	b.n	800eaa6 <tcp_output+0x3de>
 800e8fe:	bf00      	nop
 800e900:	0801551c 	.word	0x0801551c
 800e904:	08015a60 	.word	0x08015a60
 800e908:	08015570 	.word	0x08015570
 800e90c:	08015a78 	.word	0x08015a78
 800e910:	20008958 	.word	0x20008958
 800e914:	08015aa0 	.word	0x08015aa0
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800e918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e91a:	681a      	ldr	r2, [r3, #0]
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	7d1b      	ldrb	r3, [r3, #20]
 800e924:	2b02      	cmp	r3, #2
 800e926:	d006      	beq.n	800e936 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	8b5b      	ldrh	r3, [r3, #26]
 800e92c:	f023 0303 	bic.w	r3, r3, #3
 800e930:	b29a      	uxth	r2, r3
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800e936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e938:	68db      	ldr	r3, [r3, #12]
 800e93a:	685b      	ldr	r3, [r3, #4]
 800e93c:	4618      	mov	r0, r3
 800e93e:	f7f9 fe69 	bl	8008614 <lwip_htonl>
 800e942:	4604      	mov	r4, r0
 800e944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e946:	891b      	ldrh	r3, [r3, #8]
 800e948:	461d      	mov	r5, r3
 800e94a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e94c:	68db      	ldr	r3, [r3, #12]
 800e94e:	899b      	ldrh	r3, [r3, #12]
 800e950:	b29b      	uxth	r3, r3
 800e952:	4618      	mov	r0, r3
 800e954:	f7f9 fe48 	bl	80085e8 <lwip_htons>
 800e958:	4603      	mov	r3, r0
 800e95a:	b2db      	uxtb	r3, r3
 800e95c:	f003 0303 	and.w	r3, r3, #3
 800e960:	2b00      	cmp	r3, #0
 800e962:	d001      	beq.n	800e968 <tcp_output+0x2a0>
 800e964:	2301      	movs	r3, #1
 800e966:	e000      	b.n	800e96a <tcp_output+0x2a2>
 800e968:	2300      	movs	r3, #0
 800e96a:	442b      	add	r3, r5
 800e96c:	4423      	add	r3, r4
 800e96e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e974:	68bb      	ldr	r3, [r7, #8]
 800e976:	1ad3      	subs	r3, r2, r3
 800e978:	2b00      	cmp	r3, #0
 800e97a:	da02      	bge.n	800e982 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	68ba      	ldr	r2, [r7, #8]
 800e980:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800e982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e984:	891b      	ldrh	r3, [r3, #8]
 800e986:	461c      	mov	r4, r3
 800e988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e98a:	68db      	ldr	r3, [r3, #12]
 800e98c:	899b      	ldrh	r3, [r3, #12]
 800e98e:	b29b      	uxth	r3, r3
 800e990:	4618      	mov	r0, r3
 800e992:	f7f9 fe29 	bl	80085e8 <lwip_htons>
 800e996:	4603      	mov	r3, r0
 800e998:	b2db      	uxtb	r3, r3
 800e99a:	f003 0303 	and.w	r3, r3, #3
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d001      	beq.n	800e9a6 <tcp_output+0x2de>
 800e9a2:	2301      	movs	r3, #1
 800e9a4:	e000      	b.n	800e9a8 <tcp_output+0x2e0>
 800e9a6:	2300      	movs	r3, #0
 800e9a8:	4423      	add	r3, r4
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d049      	beq.n	800ea42 <tcp_output+0x37a>
      seg->next = NULL;
 800e9ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9b0:	2200      	movs	r2, #0
 800e9b2:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d105      	bne.n	800e9c8 <tcp_output+0x300>
        pcb->unacked = seg;
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e9c0:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 800e9c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9c4:	623b      	str	r3, [r7, #32]
 800e9c6:	e03f      	b.n	800ea48 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800e9c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9ca:	68db      	ldr	r3, [r3, #12]
 800e9cc:	685b      	ldr	r3, [r3, #4]
 800e9ce:	4618      	mov	r0, r3
 800e9d0:	f7f9 fe20 	bl	8008614 <lwip_htonl>
 800e9d4:	4604      	mov	r4, r0
 800e9d6:	6a3b      	ldr	r3, [r7, #32]
 800e9d8:	68db      	ldr	r3, [r3, #12]
 800e9da:	685b      	ldr	r3, [r3, #4]
 800e9dc:	4618      	mov	r0, r3
 800e9de:	f7f9 fe19 	bl	8008614 <lwip_htonl>
 800e9e2:	4603      	mov	r3, r0
 800e9e4:	1ae3      	subs	r3, r4, r3
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	da24      	bge.n	800ea34 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	3370      	adds	r3, #112	@ 0x70
 800e9ee:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800e9f0:	e002      	b.n	800e9f8 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800e9f2:	69fb      	ldr	r3, [r7, #28]
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800e9f8:	69fb      	ldr	r3, [r7, #28]
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d011      	beq.n	800ea24 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800ea00:	69fb      	ldr	r3, [r7, #28]
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	68db      	ldr	r3, [r3, #12]
 800ea06:	685b      	ldr	r3, [r3, #4]
 800ea08:	4618      	mov	r0, r3
 800ea0a:	f7f9 fe03 	bl	8008614 <lwip_htonl>
 800ea0e:	4604      	mov	r4, r0
 800ea10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea12:	68db      	ldr	r3, [r3, #12]
 800ea14:	685b      	ldr	r3, [r3, #4]
 800ea16:	4618      	mov	r0, r3
 800ea18:	f7f9 fdfc 	bl	8008614 <lwip_htonl>
 800ea1c:	4603      	mov	r3, r0
 800ea1e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	dbe6      	blt.n	800e9f2 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800ea24:	69fb      	ldr	r3, [r7, #28]
 800ea26:	681a      	ldr	r2, [r3, #0]
 800ea28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea2a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800ea2c:	69fb      	ldr	r3, [r7, #28]
 800ea2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ea30:	601a      	str	r2, [r3, #0]
 800ea32:	e009      	b.n	800ea48 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800ea34:	6a3b      	ldr	r3, [r7, #32]
 800ea36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ea38:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800ea3a:	6a3b      	ldr	r3, [r7, #32]
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	623b      	str	r3, [r7, #32]
 800ea40:	e002      	b.n	800ea48 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800ea42:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ea44:	f7fc fc45 	bl	800b2d2 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ea4c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 800ea4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d012      	beq.n	800ea7a <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800ea54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea56:	68db      	ldr	r3, [r3, #12]
 800ea58:	685b      	ldr	r3, [r3, #4]
 800ea5a:	4618      	mov	r0, r3
 800ea5c:	f7f9 fdda 	bl	8008614 <lwip_htonl>
 800ea60:	4602      	mov	r2, r0
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ea66:	1ad3      	subs	r3, r2, r3
 800ea68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ea6a:	8912      	ldrh	r2, [r2, #8]
 800ea6c:	4413      	add	r3, r2
  while (seg != NULL &&
 800ea6e:	69ba      	ldr	r2, [r7, #24]
 800ea70:	429a      	cmp	r2, r3
 800ea72:	f4bf aed9 	bcs.w	800e828 <tcp_output+0x160>
 800ea76:	e000      	b.n	800ea7a <tcp_output+0x3b2>
      break;
 800ea78:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d108      	bne.n	800ea94 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	2200      	movs	r2, #0
 800ea86:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 800ea8a:	e004      	b.n	800ea96 <tcp_output+0x3ce>
    goto output_done;
 800ea8c:	bf00      	nop
 800ea8e:	e002      	b.n	800ea96 <tcp_output+0x3ce>
    goto output_done;
 800ea90:	bf00      	nop
 800ea92:	e000      	b.n	800ea96 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800ea94:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	8b5b      	ldrh	r3, [r3, #26]
 800ea9a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ea9e:	b29a      	uxth	r2, r3
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800eaa4:	2300      	movs	r3, #0
}
 800eaa6:	4618      	mov	r0, r3
 800eaa8:	3728      	adds	r7, #40	@ 0x28
 800eaaa:	46bd      	mov	sp, r7
 800eaac:	bdb0      	pop	{r4, r5, r7, pc}
 800eaae:	bf00      	nop

0800eab0 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800eab0:	b580      	push	{r7, lr}
 800eab2:	b082      	sub	sp, #8
 800eab4:	af00      	add	r7, sp, #0
 800eab6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d106      	bne.n	800eacc <tcp_output_segment_busy+0x1c>
 800eabe:	4b09      	ldr	r3, [pc, #36]	@ (800eae4 <tcp_output_segment_busy+0x34>)
 800eac0:	f240 529a 	movw	r2, #1434	@ 0x59a
 800eac4:	4908      	ldr	r1, [pc, #32]	@ (800eae8 <tcp_output_segment_busy+0x38>)
 800eac6:	4809      	ldr	r0, [pc, #36]	@ (800eaec <tcp_output_segment_busy+0x3c>)
 800eac8:	f004 f8dc 	bl	8012c84 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	685b      	ldr	r3, [r3, #4]
 800ead0:	7b9b      	ldrb	r3, [r3, #14]
 800ead2:	2b01      	cmp	r3, #1
 800ead4:	d001      	beq.n	800eada <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800ead6:	2301      	movs	r3, #1
 800ead8:	e000      	b.n	800eadc <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800eada:	2300      	movs	r3, #0
}
 800eadc:	4618      	mov	r0, r3
 800eade:	3708      	adds	r7, #8
 800eae0:	46bd      	mov	sp, r7
 800eae2:	bd80      	pop	{r7, pc}
 800eae4:	0801551c 	.word	0x0801551c
 800eae8:	08015ab8 	.word	0x08015ab8
 800eaec:	08015570 	.word	0x08015570

0800eaf0 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800eaf0:	b5b0      	push	{r4, r5, r7, lr}
 800eaf2:	b08c      	sub	sp, #48	@ 0x30
 800eaf4:	af04      	add	r7, sp, #16
 800eaf6:	60f8      	str	r0, [r7, #12]
 800eaf8:	60b9      	str	r1, [r7, #8]
 800eafa:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d106      	bne.n	800eb10 <tcp_output_segment+0x20>
 800eb02:	4b64      	ldr	r3, [pc, #400]	@ (800ec94 <tcp_output_segment+0x1a4>)
 800eb04:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 800eb08:	4963      	ldr	r1, [pc, #396]	@ (800ec98 <tcp_output_segment+0x1a8>)
 800eb0a:	4864      	ldr	r0, [pc, #400]	@ (800ec9c <tcp_output_segment+0x1ac>)
 800eb0c:	f004 f8ba 	bl	8012c84 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800eb10:	68bb      	ldr	r3, [r7, #8]
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d106      	bne.n	800eb24 <tcp_output_segment+0x34>
 800eb16:	4b5f      	ldr	r3, [pc, #380]	@ (800ec94 <tcp_output_segment+0x1a4>)
 800eb18:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 800eb1c:	4960      	ldr	r1, [pc, #384]	@ (800eca0 <tcp_output_segment+0x1b0>)
 800eb1e:	485f      	ldr	r0, [pc, #380]	@ (800ec9c <tcp_output_segment+0x1ac>)
 800eb20:	f004 f8b0 	bl	8012c84 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d106      	bne.n	800eb38 <tcp_output_segment+0x48>
 800eb2a:	4b5a      	ldr	r3, [pc, #360]	@ (800ec94 <tcp_output_segment+0x1a4>)
 800eb2c:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 800eb30:	495c      	ldr	r1, [pc, #368]	@ (800eca4 <tcp_output_segment+0x1b4>)
 800eb32:	485a      	ldr	r0, [pc, #360]	@ (800ec9c <tcp_output_segment+0x1ac>)
 800eb34:	f004 f8a6 	bl	8012c84 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800eb38:	68f8      	ldr	r0, [r7, #12]
 800eb3a:	f7ff ffb9 	bl	800eab0 <tcp_output_segment_busy>
 800eb3e:	4603      	mov	r3, r0
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d001      	beq.n	800eb48 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800eb44:	2300      	movs	r3, #0
 800eb46:	e0a1      	b.n	800ec8c <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800eb48:	68bb      	ldr	r3, [r7, #8]
 800eb4a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	68dc      	ldr	r4, [r3, #12]
 800eb50:	4610      	mov	r0, r2
 800eb52:	f7f9 fd5f 	bl	8008614 <lwip_htonl>
 800eb56:	4603      	mov	r3, r0
 800eb58:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800eb5a:	68bb      	ldr	r3, [r7, #8]
 800eb5c:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	68dc      	ldr	r4, [r3, #12]
 800eb62:	4610      	mov	r0, r2
 800eb64:	f7f9 fd40 	bl	80085e8 <lwip_htons>
 800eb68:	4603      	mov	r3, r0
 800eb6a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800eb6c:	68bb      	ldr	r3, [r7, #8]
 800eb6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb70:	68ba      	ldr	r2, [r7, #8]
 800eb72:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800eb74:	441a      	add	r2, r3
 800eb76:	68bb      	ldr	r3, [r7, #8]
 800eb78:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	68db      	ldr	r3, [r3, #12]
 800eb7e:	3314      	adds	r3, #20
 800eb80:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	7a9b      	ldrb	r3, [r3, #10]
 800eb86:	f003 0301 	and.w	r3, r3, #1
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d015      	beq.n	800ebba <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800eb8e:	68bb      	ldr	r3, [r7, #8]
 800eb90:	3304      	adds	r3, #4
 800eb92:	461a      	mov	r2, r3
 800eb94:	6879      	ldr	r1, [r7, #4]
 800eb96:	f44f 7006 	mov.w	r0, #536	@ 0x218
 800eb9a:	f7fc fe91 	bl	800b8c0 <tcp_eff_send_mss_netif>
 800eb9e:	4603      	mov	r3, r0
 800eba0:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800eba2:	8b7b      	ldrh	r3, [r7, #26]
 800eba4:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 800eba8:	4618      	mov	r0, r3
 800ebaa:	f7f9 fd33 	bl	8008614 <lwip_htonl>
 800ebae:	4602      	mov	r2, r0
 800ebb0:	69fb      	ldr	r3, [r7, #28]
 800ebb2:	601a      	str	r2, [r3, #0]
    opts += 1;
 800ebb4:	69fb      	ldr	r3, [r7, #28]
 800ebb6:	3304      	adds	r3, #4
 800ebb8:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800ebba:	68bb      	ldr	r3, [r7, #8]
 800ebbc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	da02      	bge.n	800ebca <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800ebc4:	68bb      	ldr	r3, [r7, #8]
 800ebc6:	2200      	movs	r2, #0
 800ebc8:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 800ebca:	68bb      	ldr	r3, [r7, #8]
 800ebcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d10c      	bne.n	800ebec <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800ebd2:	4b35      	ldr	r3, [pc, #212]	@ (800eca8 <tcp_output_segment+0x1b8>)
 800ebd4:	681a      	ldr	r2, [r3, #0]
 800ebd6:	68bb      	ldr	r3, [r7, #8]
 800ebd8:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	68db      	ldr	r3, [r3, #12]
 800ebde:	685b      	ldr	r3, [r3, #4]
 800ebe0:	4618      	mov	r0, r3
 800ebe2:	f7f9 fd17 	bl	8008614 <lwip_htonl>
 800ebe6:	4602      	mov	r2, r0
 800ebe8:	68bb      	ldr	r3, [r7, #8]
 800ebea:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	68da      	ldr	r2, [r3, #12]
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	685b      	ldr	r3, [r3, #4]
 800ebf4:	685b      	ldr	r3, [r3, #4]
 800ebf6:	1ad3      	subs	r3, r2, r3
 800ebf8:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	685b      	ldr	r3, [r3, #4]
 800ebfe:	8959      	ldrh	r1, [r3, #10]
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	685b      	ldr	r3, [r3, #4]
 800ec04:	8b3a      	ldrh	r2, [r7, #24]
 800ec06:	1a8a      	subs	r2, r1, r2
 800ec08:	b292      	uxth	r2, r2
 800ec0a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	685b      	ldr	r3, [r3, #4]
 800ec10:	8919      	ldrh	r1, [r3, #8]
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	685b      	ldr	r3, [r3, #4]
 800ec16:	8b3a      	ldrh	r2, [r7, #24]
 800ec18:	1a8a      	subs	r2, r1, r2
 800ec1a:	b292      	uxth	r2, r2
 800ec1c:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	685b      	ldr	r3, [r3, #4]
 800ec22:	68fa      	ldr	r2, [r7, #12]
 800ec24:	68d2      	ldr	r2, [r2, #12]
 800ec26:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	68db      	ldr	r3, [r3, #12]
 800ec2c:	2200      	movs	r2, #0
 800ec2e:	741a      	strb	r2, [r3, #16]
 800ec30:	2200      	movs	r2, #0
 800ec32:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	68da      	ldr	r2, [r3, #12]
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	7a9b      	ldrb	r3, [r3, #10]
 800ec3c:	f003 0301 	and.w	r3, r3, #1
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d001      	beq.n	800ec48 <tcp_output_segment+0x158>
 800ec44:	2318      	movs	r3, #24
 800ec46:	e000      	b.n	800ec4a <tcp_output_segment+0x15a>
 800ec48:	2314      	movs	r3, #20
 800ec4a:	4413      	add	r3, r2
 800ec4c:	69fa      	ldr	r2, [r7, #28]
 800ec4e:	429a      	cmp	r2, r3
 800ec50:	d006      	beq.n	800ec60 <tcp_output_segment+0x170>
 800ec52:	4b10      	ldr	r3, [pc, #64]	@ (800ec94 <tcp_output_segment+0x1a4>)
 800ec54:	f240 621c 	movw	r2, #1564	@ 0x61c
 800ec58:	4914      	ldr	r1, [pc, #80]	@ (800ecac <tcp_output_segment+0x1bc>)
 800ec5a:	4810      	ldr	r0, [pc, #64]	@ (800ec9c <tcp_output_segment+0x1ac>)
 800ec5c:	f004 f812 	bl	8012c84 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	6858      	ldr	r0, [r3, #4]
 800ec64:	68b9      	ldr	r1, [r7, #8]
 800ec66:	68bb      	ldr	r3, [r7, #8]
 800ec68:	1d1c      	adds	r4, r3, #4
 800ec6a:	68bb      	ldr	r3, [r7, #8]
 800ec6c:	7add      	ldrb	r5, [r3, #11]
 800ec6e:	68bb      	ldr	r3, [r7, #8]
 800ec70:	7a9b      	ldrb	r3, [r3, #10]
 800ec72:	687a      	ldr	r2, [r7, #4]
 800ec74:	9202      	str	r2, [sp, #8]
 800ec76:	2206      	movs	r2, #6
 800ec78:	9201      	str	r2, [sp, #4]
 800ec7a:	9300      	str	r3, [sp, #0]
 800ec7c:	462b      	mov	r3, r5
 800ec7e:	4622      	mov	r2, r4
 800ec80:	f002 fd84 	bl	801178c <ip4_output_if>
 800ec84:	4603      	mov	r3, r0
 800ec86:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800ec88:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ec8c:	4618      	mov	r0, r3
 800ec8e:	3720      	adds	r7, #32
 800ec90:	46bd      	mov	sp, r7
 800ec92:	bdb0      	pop	{r4, r5, r7, pc}
 800ec94:	0801551c 	.word	0x0801551c
 800ec98:	08015ae0 	.word	0x08015ae0
 800ec9c:	08015570 	.word	0x08015570
 800eca0:	08015b00 	.word	0x08015b00
 800eca4:	08015b20 	.word	0x08015b20
 800eca8:	2000890c 	.word	0x2000890c
 800ecac:	08015b44 	.word	0x08015b44

0800ecb0 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800ecb0:	b5b0      	push	{r4, r5, r7, lr}
 800ecb2:	b084      	sub	sp, #16
 800ecb4:	af00      	add	r7, sp, #0
 800ecb6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d106      	bne.n	800eccc <tcp_rexmit_rto_prepare+0x1c>
 800ecbe:	4b31      	ldr	r3, [pc, #196]	@ (800ed84 <tcp_rexmit_rto_prepare+0xd4>)
 800ecc0:	f240 6263 	movw	r2, #1635	@ 0x663
 800ecc4:	4930      	ldr	r1, [pc, #192]	@ (800ed88 <tcp_rexmit_rto_prepare+0xd8>)
 800ecc6:	4831      	ldr	r0, [pc, #196]	@ (800ed8c <tcp_rexmit_rto_prepare+0xdc>)
 800ecc8:	f003 ffdc 	bl	8012c84 <iprintf>

  if (pcb->unacked == NULL) {
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d102      	bne.n	800ecda <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800ecd4:	f06f 0305 	mvn.w	r3, #5
 800ecd8:	e050      	b.n	800ed7c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ecde:	60fb      	str	r3, [r7, #12]
 800ece0:	e00b      	b.n	800ecfa <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800ece2:	68f8      	ldr	r0, [r7, #12]
 800ece4:	f7ff fee4 	bl	800eab0 <tcp_output_segment_busy>
 800ece8:	4603      	mov	r3, r0
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d002      	beq.n	800ecf4 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800ecee:	f06f 0305 	mvn.w	r3, #5
 800ecf2:	e043      	b.n	800ed7c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	60fb      	str	r3, [r7, #12]
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d1ef      	bne.n	800ece2 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800ed02:	68f8      	ldr	r0, [r7, #12]
 800ed04:	f7ff fed4 	bl	800eab0 <tcp_output_segment_busy>
 800ed08:	4603      	mov	r3, r0
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d002      	beq.n	800ed14 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800ed0e:	f06f 0305 	mvn.w	r3, #5
 800ed12:	e033      	b.n	800ed7c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	2200      	movs	r2, #0
 800ed28:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	8b5b      	ldrh	r3, [r3, #26]
 800ed2e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800ed32:	b29a      	uxth	r2, r3
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	68db      	ldr	r3, [r3, #12]
 800ed3c:	685b      	ldr	r3, [r3, #4]
 800ed3e:	4618      	mov	r0, r3
 800ed40:	f7f9 fc68 	bl	8008614 <lwip_htonl>
 800ed44:	4604      	mov	r4, r0
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	891b      	ldrh	r3, [r3, #8]
 800ed4a:	461d      	mov	r5, r3
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	68db      	ldr	r3, [r3, #12]
 800ed50:	899b      	ldrh	r3, [r3, #12]
 800ed52:	b29b      	uxth	r3, r3
 800ed54:	4618      	mov	r0, r3
 800ed56:	f7f9 fc47 	bl	80085e8 <lwip_htons>
 800ed5a:	4603      	mov	r3, r0
 800ed5c:	b2db      	uxtb	r3, r3
 800ed5e:	f003 0303 	and.w	r3, r3, #3
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d001      	beq.n	800ed6a <tcp_rexmit_rto_prepare+0xba>
 800ed66:	2301      	movs	r3, #1
 800ed68:	e000      	b.n	800ed6c <tcp_rexmit_rto_prepare+0xbc>
 800ed6a:	2300      	movs	r3, #0
 800ed6c:	442b      	add	r3, r5
 800ed6e:	18e2      	adds	r2, r4, r3
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	2200      	movs	r2, #0
 800ed78:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 800ed7a:	2300      	movs	r3, #0
}
 800ed7c:	4618      	mov	r0, r3
 800ed7e:	3710      	adds	r7, #16
 800ed80:	46bd      	mov	sp, r7
 800ed82:	bdb0      	pop	{r4, r5, r7, pc}
 800ed84:	0801551c 	.word	0x0801551c
 800ed88:	08015b58 	.word	0x08015b58
 800ed8c:	08015570 	.word	0x08015570

0800ed90 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800ed90:	b580      	push	{r7, lr}
 800ed92:	b082      	sub	sp, #8
 800ed94:	af00      	add	r7, sp, #0
 800ed96:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d106      	bne.n	800edac <tcp_rexmit_rto_commit+0x1c>
 800ed9e:	4b0d      	ldr	r3, [pc, #52]	@ (800edd4 <tcp_rexmit_rto_commit+0x44>)
 800eda0:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800eda4:	490c      	ldr	r1, [pc, #48]	@ (800edd8 <tcp_rexmit_rto_commit+0x48>)
 800eda6:	480d      	ldr	r0, [pc, #52]	@ (800eddc <tcp_rexmit_rto_commit+0x4c>)
 800eda8:	f003 ff6c 	bl	8012c84 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800edb2:	2bff      	cmp	r3, #255	@ 0xff
 800edb4:	d007      	beq.n	800edc6 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800edbc:	3301      	adds	r3, #1
 800edbe:	b2da      	uxtb	r2, r3
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800edc6:	6878      	ldr	r0, [r7, #4]
 800edc8:	f7ff fc7e 	bl	800e6c8 <tcp_output>
}
 800edcc:	bf00      	nop
 800edce:	3708      	adds	r7, #8
 800edd0:	46bd      	mov	sp, r7
 800edd2:	bd80      	pop	{r7, pc}
 800edd4:	0801551c 	.word	0x0801551c
 800edd8:	08015b7c 	.word	0x08015b7c
 800eddc:	08015570 	.word	0x08015570

0800ede0 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800ede0:	b580      	push	{r7, lr}
 800ede2:	b082      	sub	sp, #8
 800ede4:	af00      	add	r7, sp, #0
 800ede6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	2b00      	cmp	r3, #0
 800edec:	d106      	bne.n	800edfc <tcp_rexmit_rto+0x1c>
 800edee:	4b0a      	ldr	r3, [pc, #40]	@ (800ee18 <tcp_rexmit_rto+0x38>)
 800edf0:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 800edf4:	4909      	ldr	r1, [pc, #36]	@ (800ee1c <tcp_rexmit_rto+0x3c>)
 800edf6:	480a      	ldr	r0, [pc, #40]	@ (800ee20 <tcp_rexmit_rto+0x40>)
 800edf8:	f003 ff44 	bl	8012c84 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800edfc:	6878      	ldr	r0, [r7, #4]
 800edfe:	f7ff ff57 	bl	800ecb0 <tcp_rexmit_rto_prepare>
 800ee02:	4603      	mov	r3, r0
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d102      	bne.n	800ee0e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800ee08:	6878      	ldr	r0, [r7, #4]
 800ee0a:	f7ff ffc1 	bl	800ed90 <tcp_rexmit_rto_commit>
  }
}
 800ee0e:	bf00      	nop
 800ee10:	3708      	adds	r7, #8
 800ee12:	46bd      	mov	sp, r7
 800ee14:	bd80      	pop	{r7, pc}
 800ee16:	bf00      	nop
 800ee18:	0801551c 	.word	0x0801551c
 800ee1c:	08015ba0 	.word	0x08015ba0
 800ee20:	08015570 	.word	0x08015570

0800ee24 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800ee24:	b590      	push	{r4, r7, lr}
 800ee26:	b085      	sub	sp, #20
 800ee28:	af00      	add	r7, sp, #0
 800ee2a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d106      	bne.n	800ee40 <tcp_rexmit+0x1c>
 800ee32:	4b2f      	ldr	r3, [pc, #188]	@ (800eef0 <tcp_rexmit+0xcc>)
 800ee34:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 800ee38:	492e      	ldr	r1, [pc, #184]	@ (800eef4 <tcp_rexmit+0xd0>)
 800ee3a:	482f      	ldr	r0, [pc, #188]	@ (800eef8 <tcp_rexmit+0xd4>)
 800ee3c:	f003 ff22 	bl	8012c84 <iprintf>

  if (pcb->unacked == NULL) {
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d102      	bne.n	800ee4e <tcp_rexmit+0x2a>
    return ERR_VAL;
 800ee48:	f06f 0305 	mvn.w	r3, #5
 800ee4c:	e04c      	b.n	800eee8 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ee52:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800ee54:	68b8      	ldr	r0, [r7, #8]
 800ee56:	f7ff fe2b 	bl	800eab0 <tcp_output_segment_busy>
 800ee5a:	4603      	mov	r3, r0
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d002      	beq.n	800ee66 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800ee60:	f06f 0305 	mvn.w	r3, #5
 800ee64:	e040      	b.n	800eee8 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800ee66:	68bb      	ldr	r3, [r7, #8]
 800ee68:	681a      	ldr	r2, [r3, #0]
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	336c      	adds	r3, #108	@ 0x6c
 800ee72:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800ee74:	e002      	b.n	800ee7c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d011      	beq.n	800eea8 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	68db      	ldr	r3, [r3, #12]
 800ee8a:	685b      	ldr	r3, [r3, #4]
 800ee8c:	4618      	mov	r0, r3
 800ee8e:	f7f9 fbc1 	bl	8008614 <lwip_htonl>
 800ee92:	4604      	mov	r4, r0
 800ee94:	68bb      	ldr	r3, [r7, #8]
 800ee96:	68db      	ldr	r3, [r3, #12]
 800ee98:	685b      	ldr	r3, [r3, #4]
 800ee9a:	4618      	mov	r0, r3
 800ee9c:	f7f9 fbba 	bl	8008614 <lwip_htonl>
 800eea0:	4603      	mov	r3, r0
 800eea2:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	dbe6      	blt.n	800ee76 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800eea8:	68fb      	ldr	r3, [r7, #12]
 800eeaa:	681a      	ldr	r2, [r3, #0]
 800eeac:	68bb      	ldr	r3, [r7, #8]
 800eeae:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	68ba      	ldr	r2, [r7, #8]
 800eeb4:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800eeb6:	68bb      	ldr	r3, [r7, #8]
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d103      	bne.n	800eec6 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	2200      	movs	r2, #0
 800eec2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800eecc:	2bff      	cmp	r3, #255	@ 0xff
 800eece:	d007      	beq.n	800eee0 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800eed6:	3301      	adds	r3, #1
 800eed8:	b2da      	uxtb	r2, r3
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	2200      	movs	r2, #0
 800eee4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800eee6:	2300      	movs	r3, #0
}
 800eee8:	4618      	mov	r0, r3
 800eeea:	3714      	adds	r7, #20
 800eeec:	46bd      	mov	sp, r7
 800eeee:	bd90      	pop	{r4, r7, pc}
 800eef0:	0801551c 	.word	0x0801551c
 800eef4:	08015bbc 	.word	0x08015bbc
 800eef8:	08015570 	.word	0x08015570

0800eefc <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800eefc:	b580      	push	{r7, lr}
 800eefe:	b082      	sub	sp, #8
 800ef00:	af00      	add	r7, sp, #0
 800ef02:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d106      	bne.n	800ef18 <tcp_rexmit_fast+0x1c>
 800ef0a:	4b2a      	ldr	r3, [pc, #168]	@ (800efb4 <tcp_rexmit_fast+0xb8>)
 800ef0c:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 800ef10:	4929      	ldr	r1, [pc, #164]	@ (800efb8 <tcp_rexmit_fast+0xbc>)
 800ef12:	482a      	ldr	r0, [pc, #168]	@ (800efbc <tcp_rexmit_fast+0xc0>)
 800ef14:	f003 feb6 	bl	8012c84 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d044      	beq.n	800efaa <tcp_rexmit_fast+0xae>
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	8b5b      	ldrh	r3, [r3, #26]
 800ef24:	f003 0304 	and.w	r3, r3, #4
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d13e      	bne.n	800efaa <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800ef2c:	6878      	ldr	r0, [r7, #4]
 800ef2e:	f7ff ff79 	bl	800ee24 <tcp_rexmit>
 800ef32:	4603      	mov	r3, r0
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d138      	bne.n	800efaa <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800ef44:	4293      	cmp	r3, r2
 800ef46:	bf28      	it	cs
 800ef48:	4613      	movcs	r3, r2
 800ef4a:	b29b      	uxth	r3, r3
 800ef4c:	0fda      	lsrs	r2, r3, #31
 800ef4e:	4413      	add	r3, r2
 800ef50:	105b      	asrs	r3, r3, #1
 800ef52:	b29a      	uxth	r2, r3
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800ef60:	461a      	mov	r2, r3
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ef66:	005b      	lsls	r3, r3, #1
 800ef68:	429a      	cmp	r2, r3
 800ef6a:	d206      	bcs.n	800ef7a <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ef70:	005b      	lsls	r3, r3, #1
 800ef72:	b29a      	uxth	r2, r3
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ef84:	4619      	mov	r1, r3
 800ef86:	0049      	lsls	r1, r1, #1
 800ef88:	440b      	add	r3, r1
 800ef8a:	b29b      	uxth	r3, r3
 800ef8c:	4413      	add	r3, r2
 800ef8e:	b29a      	uxth	r2, r3
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	8b5b      	ldrh	r3, [r3, #26]
 800ef9a:	f043 0304 	orr.w	r3, r3, #4
 800ef9e:	b29a      	uxth	r2, r3
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	2200      	movs	r2, #0
 800efa8:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 800efaa:	bf00      	nop
 800efac:	3708      	adds	r7, #8
 800efae:	46bd      	mov	sp, r7
 800efb0:	bd80      	pop	{r7, pc}
 800efb2:	bf00      	nop
 800efb4:	0801551c 	.word	0x0801551c
 800efb8:	08015bd4 	.word	0x08015bd4
 800efbc:	08015570 	.word	0x08015570

0800efc0 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800efc0:	b580      	push	{r7, lr}
 800efc2:	b086      	sub	sp, #24
 800efc4:	af00      	add	r7, sp, #0
 800efc6:	60f8      	str	r0, [r7, #12]
 800efc8:	607b      	str	r3, [r7, #4]
 800efca:	460b      	mov	r3, r1
 800efcc:	817b      	strh	r3, [r7, #10]
 800efce:	4613      	mov	r3, r2
 800efd0:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800efd2:	897a      	ldrh	r2, [r7, #10]
 800efd4:	893b      	ldrh	r3, [r7, #8]
 800efd6:	4413      	add	r3, r2
 800efd8:	b29b      	uxth	r3, r3
 800efda:	3314      	adds	r3, #20
 800efdc:	b29b      	uxth	r3, r3
 800efde:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800efe2:	4619      	mov	r1, r3
 800efe4:	2022      	movs	r0, #34	@ 0x22
 800efe6:	f7fa fb79 	bl	80096dc <pbuf_alloc>
 800efea:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800efec:	697b      	ldr	r3, [r7, #20]
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d04d      	beq.n	800f08e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800eff2:	897b      	ldrh	r3, [r7, #10]
 800eff4:	3313      	adds	r3, #19
 800eff6:	697a      	ldr	r2, [r7, #20]
 800eff8:	8952      	ldrh	r2, [r2, #10]
 800effa:	4293      	cmp	r3, r2
 800effc:	db06      	blt.n	800f00c <tcp_output_alloc_header_common+0x4c>
 800effe:	4b26      	ldr	r3, [pc, #152]	@ (800f098 <tcp_output_alloc_header_common+0xd8>)
 800f000:	f240 7223 	movw	r2, #1827	@ 0x723
 800f004:	4925      	ldr	r1, [pc, #148]	@ (800f09c <tcp_output_alloc_header_common+0xdc>)
 800f006:	4826      	ldr	r0, [pc, #152]	@ (800f0a0 <tcp_output_alloc_header_common+0xe0>)
 800f008:	f003 fe3c 	bl	8012c84 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800f00c:	697b      	ldr	r3, [r7, #20]
 800f00e:	685b      	ldr	r3, [r3, #4]
 800f010:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800f012:	8c3b      	ldrh	r3, [r7, #32]
 800f014:	4618      	mov	r0, r3
 800f016:	f7f9 fae7 	bl	80085e8 <lwip_htons>
 800f01a:	4603      	mov	r3, r0
 800f01c:	461a      	mov	r2, r3
 800f01e:	693b      	ldr	r3, [r7, #16]
 800f020:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800f022:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f024:	4618      	mov	r0, r3
 800f026:	f7f9 fadf 	bl	80085e8 <lwip_htons>
 800f02a:	4603      	mov	r3, r0
 800f02c:	461a      	mov	r2, r3
 800f02e:	693b      	ldr	r3, [r7, #16]
 800f030:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800f032:	693b      	ldr	r3, [r7, #16]
 800f034:	687a      	ldr	r2, [r7, #4]
 800f036:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800f038:	68f8      	ldr	r0, [r7, #12]
 800f03a:	f7f9 faeb 	bl	8008614 <lwip_htonl>
 800f03e:	4602      	mov	r2, r0
 800f040:	693b      	ldr	r3, [r7, #16]
 800f042:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800f044:	897b      	ldrh	r3, [r7, #10]
 800f046:	089b      	lsrs	r3, r3, #2
 800f048:	b29b      	uxth	r3, r3
 800f04a:	3305      	adds	r3, #5
 800f04c:	b29b      	uxth	r3, r3
 800f04e:	031b      	lsls	r3, r3, #12
 800f050:	b29a      	uxth	r2, r3
 800f052:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800f056:	b29b      	uxth	r3, r3
 800f058:	4313      	orrs	r3, r2
 800f05a:	b29b      	uxth	r3, r3
 800f05c:	4618      	mov	r0, r3
 800f05e:	f7f9 fac3 	bl	80085e8 <lwip_htons>
 800f062:	4603      	mov	r3, r0
 800f064:	461a      	mov	r2, r3
 800f066:	693b      	ldr	r3, [r7, #16]
 800f068:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800f06a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800f06c:	4618      	mov	r0, r3
 800f06e:	f7f9 fabb 	bl	80085e8 <lwip_htons>
 800f072:	4603      	mov	r3, r0
 800f074:	461a      	mov	r2, r3
 800f076:	693b      	ldr	r3, [r7, #16]
 800f078:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800f07a:	693b      	ldr	r3, [r7, #16]
 800f07c:	2200      	movs	r2, #0
 800f07e:	741a      	strb	r2, [r3, #16]
 800f080:	2200      	movs	r2, #0
 800f082:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800f084:	693b      	ldr	r3, [r7, #16]
 800f086:	2200      	movs	r2, #0
 800f088:	749a      	strb	r2, [r3, #18]
 800f08a:	2200      	movs	r2, #0
 800f08c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800f08e:	697b      	ldr	r3, [r7, #20]
}
 800f090:	4618      	mov	r0, r3
 800f092:	3718      	adds	r7, #24
 800f094:	46bd      	mov	sp, r7
 800f096:	bd80      	pop	{r7, pc}
 800f098:	0801551c 	.word	0x0801551c
 800f09c:	08015bf4 	.word	0x08015bf4
 800f0a0:	08015570 	.word	0x08015570

0800f0a4 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800f0a4:	b5b0      	push	{r4, r5, r7, lr}
 800f0a6:	b08a      	sub	sp, #40	@ 0x28
 800f0a8:	af04      	add	r7, sp, #16
 800f0aa:	60f8      	str	r0, [r7, #12]
 800f0ac:	607b      	str	r3, [r7, #4]
 800f0ae:	460b      	mov	r3, r1
 800f0b0:	817b      	strh	r3, [r7, #10]
 800f0b2:	4613      	mov	r3, r2
 800f0b4:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d106      	bne.n	800f0ca <tcp_output_alloc_header+0x26>
 800f0bc:	4b15      	ldr	r3, [pc, #84]	@ (800f114 <tcp_output_alloc_header+0x70>)
 800f0be:	f240 7242 	movw	r2, #1858	@ 0x742
 800f0c2:	4915      	ldr	r1, [pc, #84]	@ (800f118 <tcp_output_alloc_header+0x74>)
 800f0c4:	4815      	ldr	r0, [pc, #84]	@ (800f11c <tcp_output_alloc_header+0x78>)
 800f0c6:	f003 fddd 	bl	8012c84 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800f0ce:	68fb      	ldr	r3, [r7, #12]
 800f0d0:	8adb      	ldrh	r3, [r3, #22]
 800f0d2:	68fa      	ldr	r2, [r7, #12]
 800f0d4:	8b12      	ldrh	r2, [r2, #24]
 800f0d6:	68f9      	ldr	r1, [r7, #12]
 800f0d8:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 800f0da:	893d      	ldrh	r5, [r7, #8]
 800f0dc:	897c      	ldrh	r4, [r7, #10]
 800f0de:	9103      	str	r1, [sp, #12]
 800f0e0:	2110      	movs	r1, #16
 800f0e2:	9102      	str	r1, [sp, #8]
 800f0e4:	9201      	str	r2, [sp, #4]
 800f0e6:	9300      	str	r3, [sp, #0]
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	462a      	mov	r2, r5
 800f0ec:	4621      	mov	r1, r4
 800f0ee:	f7ff ff67 	bl	800efc0 <tcp_output_alloc_header_common>
 800f0f2:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800f0f4:	697b      	ldr	r3, [r7, #20]
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d006      	beq.n	800f108 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f0fe:	68fa      	ldr	r2, [r7, #12]
 800f100:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800f102:	441a      	add	r2, r3
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 800f108:	697b      	ldr	r3, [r7, #20]
}
 800f10a:	4618      	mov	r0, r3
 800f10c:	3718      	adds	r7, #24
 800f10e:	46bd      	mov	sp, r7
 800f110:	bdb0      	pop	{r4, r5, r7, pc}
 800f112:	bf00      	nop
 800f114:	0801551c 	.word	0x0801551c
 800f118:	08015c24 	.word	0x08015c24
 800f11c:	08015570 	.word	0x08015570

0800f120 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800f120:	b580      	push	{r7, lr}
 800f122:	b088      	sub	sp, #32
 800f124:	af00      	add	r7, sp, #0
 800f126:	60f8      	str	r0, [r7, #12]
 800f128:	60b9      	str	r1, [r7, #8]
 800f12a:	4611      	mov	r1, r2
 800f12c:	461a      	mov	r2, r3
 800f12e:	460b      	mov	r3, r1
 800f130:	71fb      	strb	r3, [r7, #7]
 800f132:	4613      	mov	r3, r2
 800f134:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800f136:	2300      	movs	r3, #0
 800f138:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800f13a:	68bb      	ldr	r3, [r7, #8]
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d106      	bne.n	800f14e <tcp_output_fill_options+0x2e>
 800f140:	4b12      	ldr	r3, [pc, #72]	@ (800f18c <tcp_output_fill_options+0x6c>)
 800f142:	f240 7256 	movw	r2, #1878	@ 0x756
 800f146:	4912      	ldr	r1, [pc, #72]	@ (800f190 <tcp_output_fill_options+0x70>)
 800f148:	4812      	ldr	r0, [pc, #72]	@ (800f194 <tcp_output_fill_options+0x74>)
 800f14a:	f003 fd9b 	bl	8012c84 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800f14e:	68bb      	ldr	r3, [r7, #8]
 800f150:	685b      	ldr	r3, [r3, #4]
 800f152:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800f154:	69bb      	ldr	r3, [r7, #24]
 800f156:	3314      	adds	r3, #20
 800f158:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800f15a:	8bfb      	ldrh	r3, [r7, #30]
 800f15c:	009b      	lsls	r3, r3, #2
 800f15e:	461a      	mov	r2, r3
 800f160:	79fb      	ldrb	r3, [r7, #7]
 800f162:	009b      	lsls	r3, r3, #2
 800f164:	f003 0304 	and.w	r3, r3, #4
 800f168:	4413      	add	r3, r2
 800f16a:	3314      	adds	r3, #20
 800f16c:	69ba      	ldr	r2, [r7, #24]
 800f16e:	4413      	add	r3, r2
 800f170:	697a      	ldr	r2, [r7, #20]
 800f172:	429a      	cmp	r2, r3
 800f174:	d006      	beq.n	800f184 <tcp_output_fill_options+0x64>
 800f176:	4b05      	ldr	r3, [pc, #20]	@ (800f18c <tcp_output_fill_options+0x6c>)
 800f178:	f240 7275 	movw	r2, #1909	@ 0x775
 800f17c:	4906      	ldr	r1, [pc, #24]	@ (800f198 <tcp_output_fill_options+0x78>)
 800f17e:	4805      	ldr	r0, [pc, #20]	@ (800f194 <tcp_output_fill_options+0x74>)
 800f180:	f003 fd80 	bl	8012c84 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800f184:	bf00      	nop
 800f186:	3720      	adds	r7, #32
 800f188:	46bd      	mov	sp, r7
 800f18a:	bd80      	pop	{r7, pc}
 800f18c:	0801551c 	.word	0x0801551c
 800f190:	08015c4c 	.word	0x08015c4c
 800f194:	08015570 	.word	0x08015570
 800f198:	08015b44 	.word	0x08015b44

0800f19c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800f19c:	b580      	push	{r7, lr}
 800f19e:	b08a      	sub	sp, #40	@ 0x28
 800f1a0:	af04      	add	r7, sp, #16
 800f1a2:	60f8      	str	r0, [r7, #12]
 800f1a4:	60b9      	str	r1, [r7, #8]
 800f1a6:	607a      	str	r2, [r7, #4]
 800f1a8:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800f1aa:	68bb      	ldr	r3, [r7, #8]
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	d106      	bne.n	800f1be <tcp_output_control_segment+0x22>
 800f1b0:	4b1c      	ldr	r3, [pc, #112]	@ (800f224 <tcp_output_control_segment+0x88>)
 800f1b2:	f240 7287 	movw	r2, #1927	@ 0x787
 800f1b6:	491c      	ldr	r1, [pc, #112]	@ (800f228 <tcp_output_control_segment+0x8c>)
 800f1b8:	481c      	ldr	r0, [pc, #112]	@ (800f22c <tcp_output_control_segment+0x90>)
 800f1ba:	f003 fd63 	bl	8012c84 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800f1be:	683a      	ldr	r2, [r7, #0]
 800f1c0:	6879      	ldr	r1, [r7, #4]
 800f1c2:	68f8      	ldr	r0, [r7, #12]
 800f1c4:	f7fe ff42 	bl	800e04c <tcp_route>
 800f1c8:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800f1ca:	693b      	ldr	r3, [r7, #16]
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	d102      	bne.n	800f1d6 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800f1d0:	23fc      	movs	r3, #252	@ 0xfc
 800f1d2:	75fb      	strb	r3, [r7, #23]
 800f1d4:	e01c      	b.n	800f210 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d006      	beq.n	800f1ea <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	7adb      	ldrb	r3, [r3, #11]
 800f1e0:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	7a9b      	ldrb	r3, [r3, #10]
 800f1e6:	757b      	strb	r3, [r7, #21]
 800f1e8:	e003      	b.n	800f1f2 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800f1ea:	23ff      	movs	r3, #255	@ 0xff
 800f1ec:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800f1ee:	2300      	movs	r3, #0
 800f1f0:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800f1f2:	7dba      	ldrb	r2, [r7, #22]
 800f1f4:	693b      	ldr	r3, [r7, #16]
 800f1f6:	9302      	str	r3, [sp, #8]
 800f1f8:	2306      	movs	r3, #6
 800f1fa:	9301      	str	r3, [sp, #4]
 800f1fc:	7d7b      	ldrb	r3, [r7, #21]
 800f1fe:	9300      	str	r3, [sp, #0]
 800f200:	4613      	mov	r3, r2
 800f202:	683a      	ldr	r2, [r7, #0]
 800f204:	6879      	ldr	r1, [r7, #4]
 800f206:	68b8      	ldr	r0, [r7, #8]
 800f208:	f002 fac0 	bl	801178c <ip4_output_if>
 800f20c:	4603      	mov	r3, r0
 800f20e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800f210:	68b8      	ldr	r0, [r7, #8]
 800f212:	f7fa fd47 	bl	8009ca4 <pbuf_free>
  return err;
 800f216:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f21a:	4618      	mov	r0, r3
 800f21c:	3718      	adds	r7, #24
 800f21e:	46bd      	mov	sp, r7
 800f220:	bd80      	pop	{r7, pc}
 800f222:	bf00      	nop
 800f224:	0801551c 	.word	0x0801551c
 800f228:	08015c74 	.word	0x08015c74
 800f22c:	08015570 	.word	0x08015570

0800f230 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800f230:	b590      	push	{r4, r7, lr}
 800f232:	b08b      	sub	sp, #44	@ 0x2c
 800f234:	af04      	add	r7, sp, #16
 800f236:	60f8      	str	r0, [r7, #12]
 800f238:	60b9      	str	r1, [r7, #8]
 800f23a:	607a      	str	r2, [r7, #4]
 800f23c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800f23e:	683b      	ldr	r3, [r7, #0]
 800f240:	2b00      	cmp	r3, #0
 800f242:	d106      	bne.n	800f252 <tcp_rst+0x22>
 800f244:	4b1f      	ldr	r3, [pc, #124]	@ (800f2c4 <tcp_rst+0x94>)
 800f246:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 800f24a:	491f      	ldr	r1, [pc, #124]	@ (800f2c8 <tcp_rst+0x98>)
 800f24c:	481f      	ldr	r0, [pc, #124]	@ (800f2cc <tcp_rst+0x9c>)
 800f24e:	f003 fd19 	bl	8012c84 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800f252:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f254:	2b00      	cmp	r3, #0
 800f256:	d106      	bne.n	800f266 <tcp_rst+0x36>
 800f258:	4b1a      	ldr	r3, [pc, #104]	@ (800f2c4 <tcp_rst+0x94>)
 800f25a:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 800f25e:	491c      	ldr	r1, [pc, #112]	@ (800f2d0 <tcp_rst+0xa0>)
 800f260:	481a      	ldr	r0, [pc, #104]	@ (800f2cc <tcp_rst+0x9c>)
 800f262:	f003 fd0f 	bl	8012c84 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800f266:	2300      	movs	r3, #0
 800f268:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800f26a:	f246 0308 	movw	r3, #24584	@ 0x6008
 800f26e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800f270:	7dfb      	ldrb	r3, [r7, #23]
 800f272:	b29c      	uxth	r4, r3
 800f274:	68b8      	ldr	r0, [r7, #8]
 800f276:	f7f9 f9cd 	bl	8008614 <lwip_htonl>
 800f27a:	4602      	mov	r2, r0
 800f27c:	8abb      	ldrh	r3, [r7, #20]
 800f27e:	9303      	str	r3, [sp, #12]
 800f280:	2314      	movs	r3, #20
 800f282:	9302      	str	r3, [sp, #8]
 800f284:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800f286:	9301      	str	r3, [sp, #4]
 800f288:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800f28a:	9300      	str	r3, [sp, #0]
 800f28c:	4613      	mov	r3, r2
 800f28e:	2200      	movs	r2, #0
 800f290:	4621      	mov	r1, r4
 800f292:	6878      	ldr	r0, [r7, #4]
 800f294:	f7ff fe94 	bl	800efc0 <tcp_output_alloc_header_common>
 800f298:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800f29a:	693b      	ldr	r3, [r7, #16]
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d00c      	beq.n	800f2ba <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800f2a0:	7dfb      	ldrb	r3, [r7, #23]
 800f2a2:	2200      	movs	r2, #0
 800f2a4:	6939      	ldr	r1, [r7, #16]
 800f2a6:	68f8      	ldr	r0, [r7, #12]
 800f2a8:	f7ff ff3a 	bl	800f120 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800f2ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2ae:	683a      	ldr	r2, [r7, #0]
 800f2b0:	6939      	ldr	r1, [r7, #16]
 800f2b2:	68f8      	ldr	r0, [r7, #12]
 800f2b4:	f7ff ff72 	bl	800f19c <tcp_output_control_segment>
 800f2b8:	e000      	b.n	800f2bc <tcp_rst+0x8c>
    return;
 800f2ba:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800f2bc:	371c      	adds	r7, #28
 800f2be:	46bd      	mov	sp, r7
 800f2c0:	bd90      	pop	{r4, r7, pc}
 800f2c2:	bf00      	nop
 800f2c4:	0801551c 	.word	0x0801551c
 800f2c8:	08015ca0 	.word	0x08015ca0
 800f2cc:	08015570 	.word	0x08015570
 800f2d0:	08015cbc 	.word	0x08015cbc

0800f2d4 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800f2d4:	b590      	push	{r4, r7, lr}
 800f2d6:	b087      	sub	sp, #28
 800f2d8:	af00      	add	r7, sp, #0
 800f2da:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800f2dc:	2300      	movs	r3, #0
 800f2de:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800f2e0:	2300      	movs	r3, #0
 800f2e2:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d106      	bne.n	800f2f8 <tcp_send_empty_ack+0x24>
 800f2ea:	4b28      	ldr	r3, [pc, #160]	@ (800f38c <tcp_send_empty_ack+0xb8>)
 800f2ec:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 800f2f0:	4927      	ldr	r1, [pc, #156]	@ (800f390 <tcp_send_empty_ack+0xbc>)
 800f2f2:	4828      	ldr	r0, [pc, #160]	@ (800f394 <tcp_send_empty_ack+0xc0>)
 800f2f4:	f003 fcc6 	bl	8012c84 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800f2f8:	7dfb      	ldrb	r3, [r7, #23]
 800f2fa:	009b      	lsls	r3, r3, #2
 800f2fc:	b2db      	uxtb	r3, r3
 800f2fe:	f003 0304 	and.w	r3, r3, #4
 800f302:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800f304:	7d7b      	ldrb	r3, [r7, #21]
 800f306:	b29c      	uxth	r4, r3
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f30c:	4618      	mov	r0, r3
 800f30e:	f7f9 f981 	bl	8008614 <lwip_htonl>
 800f312:	4603      	mov	r3, r0
 800f314:	2200      	movs	r2, #0
 800f316:	4621      	mov	r1, r4
 800f318:	6878      	ldr	r0, [r7, #4]
 800f31a:	f7ff fec3 	bl	800f0a4 <tcp_output_alloc_header>
 800f31e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800f320:	693b      	ldr	r3, [r7, #16]
 800f322:	2b00      	cmp	r3, #0
 800f324:	d109      	bne.n	800f33a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	8b5b      	ldrh	r3, [r3, #26]
 800f32a:	f043 0303 	orr.w	r3, r3, #3
 800f32e:	b29a      	uxth	r2, r3
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800f334:	f06f 0301 	mvn.w	r3, #1
 800f338:	e023      	b.n	800f382 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800f33a:	7dbb      	ldrb	r3, [r7, #22]
 800f33c:	7dfa      	ldrb	r2, [r7, #23]
 800f33e:	6939      	ldr	r1, [r7, #16]
 800f340:	6878      	ldr	r0, [r7, #4]
 800f342:	f7ff feed 	bl	800f120 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800f346:	687a      	ldr	r2, [r7, #4]
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	3304      	adds	r3, #4
 800f34c:	6939      	ldr	r1, [r7, #16]
 800f34e:	6878      	ldr	r0, [r7, #4]
 800f350:	f7ff ff24 	bl	800f19c <tcp_output_control_segment>
 800f354:	4603      	mov	r3, r0
 800f356:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800f358:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	d007      	beq.n	800f370 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	8b5b      	ldrh	r3, [r3, #26]
 800f364:	f043 0303 	orr.w	r3, r3, #3
 800f368:	b29a      	uxth	r2, r3
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	835a      	strh	r2, [r3, #26]
 800f36e:	e006      	b.n	800f37e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	8b5b      	ldrh	r3, [r3, #26]
 800f374:	f023 0303 	bic.w	r3, r3, #3
 800f378:	b29a      	uxth	r2, r3
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800f37e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f382:	4618      	mov	r0, r3
 800f384:	371c      	adds	r7, #28
 800f386:	46bd      	mov	sp, r7
 800f388:	bd90      	pop	{r4, r7, pc}
 800f38a:	bf00      	nop
 800f38c:	0801551c 	.word	0x0801551c
 800f390:	08015cd8 	.word	0x08015cd8
 800f394:	08015570 	.word	0x08015570

0800f398 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800f398:	b590      	push	{r4, r7, lr}
 800f39a:	b087      	sub	sp, #28
 800f39c:	af00      	add	r7, sp, #0
 800f39e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800f3a0:	2300      	movs	r3, #0
 800f3a2:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d106      	bne.n	800f3b8 <tcp_keepalive+0x20>
 800f3aa:	4b18      	ldr	r3, [pc, #96]	@ (800f40c <tcp_keepalive+0x74>)
 800f3ac:	f640 0224 	movw	r2, #2084	@ 0x824
 800f3b0:	4917      	ldr	r1, [pc, #92]	@ (800f410 <tcp_keepalive+0x78>)
 800f3b2:	4818      	ldr	r0, [pc, #96]	@ (800f414 <tcp_keepalive+0x7c>)
 800f3b4:	f003 fc66 	bl	8012c84 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800f3b8:	7dfb      	ldrb	r3, [r7, #23]
 800f3ba:	b29c      	uxth	r4, r3
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f3c0:	3b01      	subs	r3, #1
 800f3c2:	4618      	mov	r0, r3
 800f3c4:	f7f9 f926 	bl	8008614 <lwip_htonl>
 800f3c8:	4603      	mov	r3, r0
 800f3ca:	2200      	movs	r2, #0
 800f3cc:	4621      	mov	r1, r4
 800f3ce:	6878      	ldr	r0, [r7, #4]
 800f3d0:	f7ff fe68 	bl	800f0a4 <tcp_output_alloc_header>
 800f3d4:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800f3d6:	693b      	ldr	r3, [r7, #16]
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d102      	bne.n	800f3e2 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800f3dc:	f04f 33ff 	mov.w	r3, #4294967295
 800f3e0:	e010      	b.n	800f404 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800f3e2:	7dfb      	ldrb	r3, [r7, #23]
 800f3e4:	2200      	movs	r2, #0
 800f3e6:	6939      	ldr	r1, [r7, #16]
 800f3e8:	6878      	ldr	r0, [r7, #4]
 800f3ea:	f7ff fe99 	bl	800f120 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800f3ee:	687a      	ldr	r2, [r7, #4]
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	3304      	adds	r3, #4
 800f3f4:	6939      	ldr	r1, [r7, #16]
 800f3f6:	6878      	ldr	r0, [r7, #4]
 800f3f8:	f7ff fed0 	bl	800f19c <tcp_output_control_segment>
 800f3fc:	4603      	mov	r3, r0
 800f3fe:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800f400:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f404:	4618      	mov	r0, r3
 800f406:	371c      	adds	r7, #28
 800f408:	46bd      	mov	sp, r7
 800f40a:	bd90      	pop	{r4, r7, pc}
 800f40c:	0801551c 	.word	0x0801551c
 800f410:	08015cf8 	.word	0x08015cf8
 800f414:	08015570 	.word	0x08015570

0800f418 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800f418:	b590      	push	{r4, r7, lr}
 800f41a:	b08b      	sub	sp, #44	@ 0x2c
 800f41c:	af00      	add	r7, sp, #0
 800f41e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800f420:	2300      	movs	r3, #0
 800f422:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d106      	bne.n	800f43a <tcp_zero_window_probe+0x22>
 800f42c:	4b4c      	ldr	r3, [pc, #304]	@ (800f560 <tcp_zero_window_probe+0x148>)
 800f42e:	f640 024f 	movw	r2, #2127	@ 0x84f
 800f432:	494c      	ldr	r1, [pc, #304]	@ (800f564 <tcp_zero_window_probe+0x14c>)
 800f434:	484c      	ldr	r0, [pc, #304]	@ (800f568 <tcp_zero_window_probe+0x150>)
 800f436:	f003 fc25 	bl	8012c84 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f43e:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800f440:	6a3b      	ldr	r3, [r7, #32]
 800f442:	2b00      	cmp	r3, #0
 800f444:	d101      	bne.n	800f44a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800f446:	2300      	movs	r3, #0
 800f448:	e086      	b.n	800f558 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800f450:	2bff      	cmp	r3, #255	@ 0xff
 800f452:	d007      	beq.n	800f464 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800f45a:	3301      	adds	r3, #1
 800f45c:	b2da      	uxtb	r2, r3
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800f464:	6a3b      	ldr	r3, [r7, #32]
 800f466:	68db      	ldr	r3, [r3, #12]
 800f468:	899b      	ldrh	r3, [r3, #12]
 800f46a:	b29b      	uxth	r3, r3
 800f46c:	4618      	mov	r0, r3
 800f46e:	f7f9 f8bb 	bl	80085e8 <lwip_htons>
 800f472:	4603      	mov	r3, r0
 800f474:	b2db      	uxtb	r3, r3
 800f476:	f003 0301 	and.w	r3, r3, #1
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d005      	beq.n	800f48a <tcp_zero_window_probe+0x72>
 800f47e:	6a3b      	ldr	r3, [r7, #32]
 800f480:	891b      	ldrh	r3, [r3, #8]
 800f482:	2b00      	cmp	r3, #0
 800f484:	d101      	bne.n	800f48a <tcp_zero_window_probe+0x72>
 800f486:	2301      	movs	r3, #1
 800f488:	e000      	b.n	800f48c <tcp_zero_window_probe+0x74>
 800f48a:	2300      	movs	r3, #0
 800f48c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800f48e:	7ffb      	ldrb	r3, [r7, #31]
 800f490:	2b00      	cmp	r3, #0
 800f492:	bf0c      	ite	eq
 800f494:	2301      	moveq	r3, #1
 800f496:	2300      	movne	r3, #0
 800f498:	b2db      	uxtb	r3, r3
 800f49a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800f49c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f4a0:	b299      	uxth	r1, r3
 800f4a2:	6a3b      	ldr	r3, [r7, #32]
 800f4a4:	68db      	ldr	r3, [r3, #12]
 800f4a6:	685b      	ldr	r3, [r3, #4]
 800f4a8:	8bba      	ldrh	r2, [r7, #28]
 800f4aa:	6878      	ldr	r0, [r7, #4]
 800f4ac:	f7ff fdfa 	bl	800f0a4 <tcp_output_alloc_header>
 800f4b0:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800f4b2:	69bb      	ldr	r3, [r7, #24]
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d102      	bne.n	800f4be <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800f4b8:	f04f 33ff 	mov.w	r3, #4294967295
 800f4bc:	e04c      	b.n	800f558 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800f4be:	69bb      	ldr	r3, [r7, #24]
 800f4c0:	685b      	ldr	r3, [r3, #4]
 800f4c2:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800f4c4:	7ffb      	ldrb	r3, [r7, #31]
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d011      	beq.n	800f4ee <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800f4ca:	697b      	ldr	r3, [r7, #20]
 800f4cc:	899b      	ldrh	r3, [r3, #12]
 800f4ce:	b29b      	uxth	r3, r3
 800f4d0:	b21b      	sxth	r3, r3
 800f4d2:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800f4d6:	b21c      	sxth	r4, r3
 800f4d8:	2011      	movs	r0, #17
 800f4da:	f7f9 f885 	bl	80085e8 <lwip_htons>
 800f4de:	4603      	mov	r3, r0
 800f4e0:	b21b      	sxth	r3, r3
 800f4e2:	4323      	orrs	r3, r4
 800f4e4:	b21b      	sxth	r3, r3
 800f4e6:	b29a      	uxth	r2, r3
 800f4e8:	697b      	ldr	r3, [r7, #20]
 800f4ea:	819a      	strh	r2, [r3, #12]
 800f4ec:	e010      	b.n	800f510 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800f4ee:	69bb      	ldr	r3, [r7, #24]
 800f4f0:	685b      	ldr	r3, [r3, #4]
 800f4f2:	3314      	adds	r3, #20
 800f4f4:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800f4f6:	6a3b      	ldr	r3, [r7, #32]
 800f4f8:	6858      	ldr	r0, [r3, #4]
 800f4fa:	6a3b      	ldr	r3, [r7, #32]
 800f4fc:	685b      	ldr	r3, [r3, #4]
 800f4fe:	891a      	ldrh	r2, [r3, #8]
 800f500:	6a3b      	ldr	r3, [r7, #32]
 800f502:	891b      	ldrh	r3, [r3, #8]
 800f504:	1ad3      	subs	r3, r2, r3
 800f506:	b29b      	uxth	r3, r3
 800f508:	2201      	movs	r2, #1
 800f50a:	6939      	ldr	r1, [r7, #16]
 800f50c:	f7fa fdc4 	bl	800a098 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800f510:	6a3b      	ldr	r3, [r7, #32]
 800f512:	68db      	ldr	r3, [r3, #12]
 800f514:	685b      	ldr	r3, [r3, #4]
 800f516:	4618      	mov	r0, r3
 800f518:	f7f9 f87c 	bl	8008614 <lwip_htonl>
 800f51c:	4603      	mov	r3, r0
 800f51e:	3301      	adds	r3, #1
 800f520:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f526:	68fb      	ldr	r3, [r7, #12]
 800f528:	1ad3      	subs	r3, r2, r3
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	da02      	bge.n	800f534 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	68fa      	ldr	r2, [r7, #12]
 800f532:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800f534:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f538:	2200      	movs	r2, #0
 800f53a:	69b9      	ldr	r1, [r7, #24]
 800f53c:	6878      	ldr	r0, [r7, #4]
 800f53e:	f7ff fdef 	bl	800f120 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800f542:	687a      	ldr	r2, [r7, #4]
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	3304      	adds	r3, #4
 800f548:	69b9      	ldr	r1, [r7, #24]
 800f54a:	6878      	ldr	r0, [r7, #4]
 800f54c:	f7ff fe26 	bl	800f19c <tcp_output_control_segment>
 800f550:	4603      	mov	r3, r0
 800f552:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800f554:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800f558:	4618      	mov	r0, r3
 800f55a:	372c      	adds	r7, #44	@ 0x2c
 800f55c:	46bd      	mov	sp, r7
 800f55e:	bd90      	pop	{r4, r7, pc}
 800f560:	0801551c 	.word	0x0801551c
 800f564:	08015d14 	.word	0x08015d14
 800f568:	08015570 	.word	0x08015570

0800f56c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800f56c:	b580      	push	{r7, lr}
 800f56e:	b082      	sub	sp, #8
 800f570:	af00      	add	r7, sp, #0
 800f572:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800f574:	f7fa ff10 	bl	800a398 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800f578:	4b0a      	ldr	r3, [pc, #40]	@ (800f5a4 <tcpip_tcp_timer+0x38>)
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d103      	bne.n	800f588 <tcpip_tcp_timer+0x1c>
 800f580:	4b09      	ldr	r3, [pc, #36]	@ (800f5a8 <tcpip_tcp_timer+0x3c>)
 800f582:	681b      	ldr	r3, [r3, #0]
 800f584:	2b00      	cmp	r3, #0
 800f586:	d005      	beq.n	800f594 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800f588:	2200      	movs	r2, #0
 800f58a:	4908      	ldr	r1, [pc, #32]	@ (800f5ac <tcpip_tcp_timer+0x40>)
 800f58c:	20fa      	movs	r0, #250	@ 0xfa
 800f58e:	f000 f8f3 	bl	800f778 <sys_timeout>
 800f592:	e003      	b.n	800f59c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800f594:	4b06      	ldr	r3, [pc, #24]	@ (800f5b0 <tcpip_tcp_timer+0x44>)
 800f596:	2200      	movs	r2, #0
 800f598:	601a      	str	r2, [r3, #0]
  }
}
 800f59a:	bf00      	nop
 800f59c:	bf00      	nop
 800f59e:	3708      	adds	r7, #8
 800f5a0:	46bd      	mov	sp, r7
 800f5a2:	bd80      	pop	{r7, pc}
 800f5a4:	20008918 	.word	0x20008918
 800f5a8:	2000891c 	.word	0x2000891c
 800f5ac:	0800f56d 	.word	0x0800f56d
 800f5b0:	20008964 	.word	0x20008964

0800f5b4 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800f5b4:	b580      	push	{r7, lr}
 800f5b6:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800f5b8:	4b0a      	ldr	r3, [pc, #40]	@ (800f5e4 <tcp_timer_needed+0x30>)
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d10f      	bne.n	800f5e0 <tcp_timer_needed+0x2c>
 800f5c0:	4b09      	ldr	r3, [pc, #36]	@ (800f5e8 <tcp_timer_needed+0x34>)
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d103      	bne.n	800f5d0 <tcp_timer_needed+0x1c>
 800f5c8:	4b08      	ldr	r3, [pc, #32]	@ (800f5ec <tcp_timer_needed+0x38>)
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d007      	beq.n	800f5e0 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800f5d0:	4b04      	ldr	r3, [pc, #16]	@ (800f5e4 <tcp_timer_needed+0x30>)
 800f5d2:	2201      	movs	r2, #1
 800f5d4:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800f5d6:	2200      	movs	r2, #0
 800f5d8:	4905      	ldr	r1, [pc, #20]	@ (800f5f0 <tcp_timer_needed+0x3c>)
 800f5da:	20fa      	movs	r0, #250	@ 0xfa
 800f5dc:	f000 f8cc 	bl	800f778 <sys_timeout>
  }
}
 800f5e0:	bf00      	nop
 800f5e2:	bd80      	pop	{r7, pc}
 800f5e4:	20008964 	.word	0x20008964
 800f5e8:	20008918 	.word	0x20008918
 800f5ec:	2000891c 	.word	0x2000891c
 800f5f0:	0800f56d 	.word	0x0800f56d

0800f5f4 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800f5f4:	b580      	push	{r7, lr}
 800f5f6:	b086      	sub	sp, #24
 800f5f8:	af00      	add	r7, sp, #0
 800f5fa:	60f8      	str	r0, [r7, #12]
 800f5fc:	60b9      	str	r1, [r7, #8]
 800f5fe:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800f600:	2006      	movs	r0, #6
 800f602:	f7f9 fc69 	bl	8008ed8 <memp_malloc>
 800f606:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800f608:	693b      	ldr	r3, [r7, #16]
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d109      	bne.n	800f622 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800f60e:	693b      	ldr	r3, [r7, #16]
 800f610:	2b00      	cmp	r3, #0
 800f612:	d151      	bne.n	800f6b8 <sys_timeout_abs+0xc4>
 800f614:	4b2a      	ldr	r3, [pc, #168]	@ (800f6c0 <sys_timeout_abs+0xcc>)
 800f616:	22be      	movs	r2, #190	@ 0xbe
 800f618:	492a      	ldr	r1, [pc, #168]	@ (800f6c4 <sys_timeout_abs+0xd0>)
 800f61a:	482b      	ldr	r0, [pc, #172]	@ (800f6c8 <sys_timeout_abs+0xd4>)
 800f61c:	f003 fb32 	bl	8012c84 <iprintf>
    return;
 800f620:	e04a      	b.n	800f6b8 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800f622:	693b      	ldr	r3, [r7, #16]
 800f624:	2200      	movs	r2, #0
 800f626:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800f628:	693b      	ldr	r3, [r7, #16]
 800f62a:	68ba      	ldr	r2, [r7, #8]
 800f62c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800f62e:	693b      	ldr	r3, [r7, #16]
 800f630:	687a      	ldr	r2, [r7, #4]
 800f632:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800f634:	693b      	ldr	r3, [r7, #16]
 800f636:	68fa      	ldr	r2, [r7, #12]
 800f638:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800f63a:	4b24      	ldr	r3, [pc, #144]	@ (800f6cc <sys_timeout_abs+0xd8>)
 800f63c:	681b      	ldr	r3, [r3, #0]
 800f63e:	2b00      	cmp	r3, #0
 800f640:	d103      	bne.n	800f64a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800f642:	4a22      	ldr	r2, [pc, #136]	@ (800f6cc <sys_timeout_abs+0xd8>)
 800f644:	693b      	ldr	r3, [r7, #16]
 800f646:	6013      	str	r3, [r2, #0]
    return;
 800f648:	e037      	b.n	800f6ba <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800f64a:	693b      	ldr	r3, [r7, #16]
 800f64c:	685a      	ldr	r2, [r3, #4]
 800f64e:	4b1f      	ldr	r3, [pc, #124]	@ (800f6cc <sys_timeout_abs+0xd8>)
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	685b      	ldr	r3, [r3, #4]
 800f654:	1ad3      	subs	r3, r2, r3
 800f656:	0fdb      	lsrs	r3, r3, #31
 800f658:	f003 0301 	and.w	r3, r3, #1
 800f65c:	b2db      	uxtb	r3, r3
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d007      	beq.n	800f672 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800f662:	4b1a      	ldr	r3, [pc, #104]	@ (800f6cc <sys_timeout_abs+0xd8>)
 800f664:	681a      	ldr	r2, [r3, #0]
 800f666:	693b      	ldr	r3, [r7, #16]
 800f668:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800f66a:	4a18      	ldr	r2, [pc, #96]	@ (800f6cc <sys_timeout_abs+0xd8>)
 800f66c:	693b      	ldr	r3, [r7, #16]
 800f66e:	6013      	str	r3, [r2, #0]
 800f670:	e023      	b.n	800f6ba <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800f672:	4b16      	ldr	r3, [pc, #88]	@ (800f6cc <sys_timeout_abs+0xd8>)
 800f674:	681b      	ldr	r3, [r3, #0]
 800f676:	617b      	str	r3, [r7, #20]
 800f678:	e01a      	b.n	800f6b0 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800f67a:	697b      	ldr	r3, [r7, #20]
 800f67c:	681b      	ldr	r3, [r3, #0]
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d00b      	beq.n	800f69a <sys_timeout_abs+0xa6>
 800f682:	693b      	ldr	r3, [r7, #16]
 800f684:	685a      	ldr	r2, [r3, #4]
 800f686:	697b      	ldr	r3, [r7, #20]
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	685b      	ldr	r3, [r3, #4]
 800f68c:	1ad3      	subs	r3, r2, r3
 800f68e:	0fdb      	lsrs	r3, r3, #31
 800f690:	f003 0301 	and.w	r3, r3, #1
 800f694:	b2db      	uxtb	r3, r3
 800f696:	2b00      	cmp	r3, #0
 800f698:	d007      	beq.n	800f6aa <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800f69a:	697b      	ldr	r3, [r7, #20]
 800f69c:	681a      	ldr	r2, [r3, #0]
 800f69e:	693b      	ldr	r3, [r7, #16]
 800f6a0:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800f6a2:	697b      	ldr	r3, [r7, #20]
 800f6a4:	693a      	ldr	r2, [r7, #16]
 800f6a6:	601a      	str	r2, [r3, #0]
        break;
 800f6a8:	e007      	b.n	800f6ba <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800f6aa:	697b      	ldr	r3, [r7, #20]
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	617b      	str	r3, [r7, #20]
 800f6b0:	697b      	ldr	r3, [r7, #20]
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d1e1      	bne.n	800f67a <sys_timeout_abs+0x86>
 800f6b6:	e000      	b.n	800f6ba <sys_timeout_abs+0xc6>
    return;
 800f6b8:	bf00      	nop
      }
    }
  }
}
 800f6ba:	3718      	adds	r7, #24
 800f6bc:	46bd      	mov	sp, r7
 800f6be:	bd80      	pop	{r7, pc}
 800f6c0:	08015d38 	.word	0x08015d38
 800f6c4:	08015d6c 	.word	0x08015d6c
 800f6c8:	08015dac 	.word	0x08015dac
 800f6cc:	2000895c 	.word	0x2000895c

0800f6d0 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800f6d0:	b580      	push	{r7, lr}
 800f6d2:	b086      	sub	sp, #24
 800f6d4:	af00      	add	r7, sp, #0
 800f6d6:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800f6dc:	697b      	ldr	r3, [r7, #20]
 800f6de:	685b      	ldr	r3, [r3, #4]
 800f6e0:	4798      	blx	r3

  now = sys_now();
 800f6e2:	f7f8 fd81 	bl	80081e8 <sys_now>
 800f6e6:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800f6e8:	697b      	ldr	r3, [r7, #20]
 800f6ea:	681a      	ldr	r2, [r3, #0]
 800f6ec:	4b0f      	ldr	r3, [pc, #60]	@ (800f72c <lwip_cyclic_timer+0x5c>)
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	4413      	add	r3, r2
 800f6f2:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800f6f4:	68fa      	ldr	r2, [r7, #12]
 800f6f6:	693b      	ldr	r3, [r7, #16]
 800f6f8:	1ad3      	subs	r3, r2, r3
 800f6fa:	0fdb      	lsrs	r3, r3, #31
 800f6fc:	f003 0301 	and.w	r3, r3, #1
 800f700:	b2db      	uxtb	r3, r3
 800f702:	2b00      	cmp	r3, #0
 800f704:	d009      	beq.n	800f71a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800f706:	697b      	ldr	r3, [r7, #20]
 800f708:	681a      	ldr	r2, [r3, #0]
 800f70a:	693b      	ldr	r3, [r7, #16]
 800f70c:	4413      	add	r3, r2
 800f70e:	687a      	ldr	r2, [r7, #4]
 800f710:	4907      	ldr	r1, [pc, #28]	@ (800f730 <lwip_cyclic_timer+0x60>)
 800f712:	4618      	mov	r0, r3
 800f714:	f7ff ff6e 	bl	800f5f4 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800f718:	e004      	b.n	800f724 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800f71a:	687a      	ldr	r2, [r7, #4]
 800f71c:	4904      	ldr	r1, [pc, #16]	@ (800f730 <lwip_cyclic_timer+0x60>)
 800f71e:	68f8      	ldr	r0, [r7, #12]
 800f720:	f7ff ff68 	bl	800f5f4 <sys_timeout_abs>
}
 800f724:	bf00      	nop
 800f726:	3718      	adds	r7, #24
 800f728:	46bd      	mov	sp, r7
 800f72a:	bd80      	pop	{r7, pc}
 800f72c:	20008960 	.word	0x20008960
 800f730:	0800f6d1 	.word	0x0800f6d1

0800f734 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800f734:	b580      	push	{r7, lr}
 800f736:	b082      	sub	sp, #8
 800f738:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800f73a:	2301      	movs	r3, #1
 800f73c:	607b      	str	r3, [r7, #4]
 800f73e:	e00e      	b.n	800f75e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800f740:	4a0b      	ldr	r2, [pc, #44]	@ (800f770 <sys_timeouts_init+0x3c>)
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	00db      	lsls	r3, r3, #3
 800f74c:	4a08      	ldr	r2, [pc, #32]	@ (800f770 <sys_timeouts_init+0x3c>)
 800f74e:	4413      	add	r3, r2
 800f750:	461a      	mov	r2, r3
 800f752:	4908      	ldr	r1, [pc, #32]	@ (800f774 <sys_timeouts_init+0x40>)
 800f754:	f000 f810 	bl	800f778 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	3301      	adds	r3, #1
 800f75c:	607b      	str	r3, [r7, #4]
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	2b02      	cmp	r3, #2
 800f762:	d9ed      	bls.n	800f740 <sys_timeouts_init+0xc>
  }
}
 800f764:	bf00      	nop
 800f766:	bf00      	nop
 800f768:	3708      	adds	r7, #8
 800f76a:	46bd      	mov	sp, r7
 800f76c:	bd80      	pop	{r7, pc}
 800f76e:	bf00      	nop
 800f770:	08016924 	.word	0x08016924
 800f774:	0800f6d1 	.word	0x0800f6d1

0800f778 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800f778:	b580      	push	{r7, lr}
 800f77a:	b086      	sub	sp, #24
 800f77c:	af00      	add	r7, sp, #0
 800f77e:	60f8      	str	r0, [r7, #12]
 800f780:	60b9      	str	r1, [r7, #8]
 800f782:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800f784:	68fb      	ldr	r3, [r7, #12]
 800f786:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f78a:	d306      	bcc.n	800f79a <sys_timeout+0x22>
 800f78c:	4b0a      	ldr	r3, [pc, #40]	@ (800f7b8 <sys_timeout+0x40>)
 800f78e:	f240 1229 	movw	r2, #297	@ 0x129
 800f792:	490a      	ldr	r1, [pc, #40]	@ (800f7bc <sys_timeout+0x44>)
 800f794:	480a      	ldr	r0, [pc, #40]	@ (800f7c0 <sys_timeout+0x48>)
 800f796:	f003 fa75 	bl	8012c84 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800f79a:	f7f8 fd25 	bl	80081e8 <sys_now>
 800f79e:	4602      	mov	r2, r0
 800f7a0:	68fb      	ldr	r3, [r7, #12]
 800f7a2:	4413      	add	r3, r2
 800f7a4:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800f7a6:	687a      	ldr	r2, [r7, #4]
 800f7a8:	68b9      	ldr	r1, [r7, #8]
 800f7aa:	6978      	ldr	r0, [r7, #20]
 800f7ac:	f7ff ff22 	bl	800f5f4 <sys_timeout_abs>
#endif
}
 800f7b0:	bf00      	nop
 800f7b2:	3718      	adds	r7, #24
 800f7b4:	46bd      	mov	sp, r7
 800f7b6:	bd80      	pop	{r7, pc}
 800f7b8:	08015d38 	.word	0x08015d38
 800f7bc:	08015dd4 	.word	0x08015dd4
 800f7c0:	08015dac 	.word	0x08015dac

0800f7c4 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800f7c4:	b580      	push	{r7, lr}
 800f7c6:	b084      	sub	sp, #16
 800f7c8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800f7ca:	f7f8 fd0d 	bl	80081e8 <sys_now>
 800f7ce:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800f7d0:	4b1a      	ldr	r3, [pc, #104]	@ (800f83c <sys_check_timeouts+0x78>)
 800f7d2:	781b      	ldrb	r3, [r3, #0]
 800f7d4:	b2db      	uxtb	r3, r3
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d001      	beq.n	800f7de <sys_check_timeouts+0x1a>
 800f7da:	f7f9 ff29 	bl	8009630 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800f7de:	4b18      	ldr	r3, [pc, #96]	@ (800f840 <sys_check_timeouts+0x7c>)
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800f7e4:	68bb      	ldr	r3, [r7, #8]
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d022      	beq.n	800f830 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800f7ea:	68bb      	ldr	r3, [r7, #8]
 800f7ec:	685b      	ldr	r3, [r3, #4]
 800f7ee:	68fa      	ldr	r2, [r7, #12]
 800f7f0:	1ad3      	subs	r3, r2, r3
 800f7f2:	0fdb      	lsrs	r3, r3, #31
 800f7f4:	f003 0301 	and.w	r3, r3, #1
 800f7f8:	b2db      	uxtb	r3, r3
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d11a      	bne.n	800f834 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800f7fe:	68bb      	ldr	r3, [r7, #8]
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	4a0f      	ldr	r2, [pc, #60]	@ (800f840 <sys_check_timeouts+0x7c>)
 800f804:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800f806:	68bb      	ldr	r3, [r7, #8]
 800f808:	689b      	ldr	r3, [r3, #8]
 800f80a:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800f80c:	68bb      	ldr	r3, [r7, #8]
 800f80e:	68db      	ldr	r3, [r3, #12]
 800f810:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800f812:	68bb      	ldr	r3, [r7, #8]
 800f814:	685b      	ldr	r3, [r3, #4]
 800f816:	4a0b      	ldr	r2, [pc, #44]	@ (800f844 <sys_check_timeouts+0x80>)
 800f818:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800f81a:	68b9      	ldr	r1, [r7, #8]
 800f81c:	2006      	movs	r0, #6
 800f81e:	f7f9 fbcb 	bl	8008fb8 <memp_free>
    if (handler != NULL) {
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	2b00      	cmp	r3, #0
 800f826:	d0d3      	beq.n	800f7d0 <sys_check_timeouts+0xc>
      handler(arg);
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	6838      	ldr	r0, [r7, #0]
 800f82c:	4798      	blx	r3
  do {
 800f82e:	e7cf      	b.n	800f7d0 <sys_check_timeouts+0xc>
      return;
 800f830:	bf00      	nop
 800f832:	e000      	b.n	800f836 <sys_check_timeouts+0x72>
      return;
 800f834:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800f836:	3710      	adds	r7, #16
 800f838:	46bd      	mov	sp, r7
 800f83a:	bd80      	pop	{r7, pc}
 800f83c:	20008909 	.word	0x20008909
 800f840:	2000895c 	.word	0x2000895c
 800f844:	20008960 	.word	0x20008960

0800f848 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800f848:	b580      	push	{r7, lr}
 800f84a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800f84c:	f003 f896 	bl	801297c <rand>
 800f850:	4603      	mov	r3, r0
 800f852:	b29b      	uxth	r3, r3
 800f854:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800f858:	b29b      	uxth	r3, r3
 800f85a:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800f85e:	b29a      	uxth	r2, r3
 800f860:	4b01      	ldr	r3, [pc, #4]	@ (800f868 <udp_init+0x20>)
 800f862:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800f864:	bf00      	nop
 800f866:	bd80      	pop	{r7, pc}
 800f868:	20000070 	.word	0x20000070

0800f86c <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800f86c:	b480      	push	{r7}
 800f86e:	b083      	sub	sp, #12
 800f870:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800f872:	2300      	movs	r3, #0
 800f874:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800f876:	4b17      	ldr	r3, [pc, #92]	@ (800f8d4 <udp_new_port+0x68>)
 800f878:	881b      	ldrh	r3, [r3, #0]
 800f87a:	1c5a      	adds	r2, r3, #1
 800f87c:	b291      	uxth	r1, r2
 800f87e:	4a15      	ldr	r2, [pc, #84]	@ (800f8d4 <udp_new_port+0x68>)
 800f880:	8011      	strh	r1, [r2, #0]
 800f882:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f886:	4293      	cmp	r3, r2
 800f888:	d103      	bne.n	800f892 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800f88a:	4b12      	ldr	r3, [pc, #72]	@ (800f8d4 <udp_new_port+0x68>)
 800f88c:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 800f890:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f892:	4b11      	ldr	r3, [pc, #68]	@ (800f8d8 <udp_new_port+0x6c>)
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	603b      	str	r3, [r7, #0]
 800f898:	e011      	b.n	800f8be <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800f89a:	683b      	ldr	r3, [r7, #0]
 800f89c:	8a5a      	ldrh	r2, [r3, #18]
 800f89e:	4b0d      	ldr	r3, [pc, #52]	@ (800f8d4 <udp_new_port+0x68>)
 800f8a0:	881b      	ldrh	r3, [r3, #0]
 800f8a2:	429a      	cmp	r2, r3
 800f8a4:	d108      	bne.n	800f8b8 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800f8a6:	88fb      	ldrh	r3, [r7, #6]
 800f8a8:	3301      	adds	r3, #1
 800f8aa:	80fb      	strh	r3, [r7, #6]
 800f8ac:	88fb      	ldrh	r3, [r7, #6]
 800f8ae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800f8b2:	d3e0      	bcc.n	800f876 <udp_new_port+0xa>
        return 0;
 800f8b4:	2300      	movs	r3, #0
 800f8b6:	e007      	b.n	800f8c8 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f8b8:	683b      	ldr	r3, [r7, #0]
 800f8ba:	68db      	ldr	r3, [r3, #12]
 800f8bc:	603b      	str	r3, [r7, #0]
 800f8be:	683b      	ldr	r3, [r7, #0]
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d1ea      	bne.n	800f89a <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800f8c4:	4b03      	ldr	r3, [pc, #12]	@ (800f8d4 <udp_new_port+0x68>)
 800f8c6:	881b      	ldrh	r3, [r3, #0]
}
 800f8c8:	4618      	mov	r0, r3
 800f8ca:	370c      	adds	r7, #12
 800f8cc:	46bd      	mov	sp, r7
 800f8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8d2:	4770      	bx	lr
 800f8d4:	20000070 	.word	0x20000070
 800f8d8:	20008968 	.word	0x20008968

0800f8dc <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800f8dc:	b580      	push	{r7, lr}
 800f8de:	b084      	sub	sp, #16
 800f8e0:	af00      	add	r7, sp, #0
 800f8e2:	60f8      	str	r0, [r7, #12]
 800f8e4:	60b9      	str	r1, [r7, #8]
 800f8e6:	4613      	mov	r3, r2
 800f8e8:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800f8ea:	68fb      	ldr	r3, [r7, #12]
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d105      	bne.n	800f8fc <udp_input_local_match+0x20>
 800f8f0:	4b27      	ldr	r3, [pc, #156]	@ (800f990 <udp_input_local_match+0xb4>)
 800f8f2:	2287      	movs	r2, #135	@ 0x87
 800f8f4:	4927      	ldr	r1, [pc, #156]	@ (800f994 <udp_input_local_match+0xb8>)
 800f8f6:	4828      	ldr	r0, [pc, #160]	@ (800f998 <udp_input_local_match+0xbc>)
 800f8f8:	f003 f9c4 	bl	8012c84 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800f8fc:	68bb      	ldr	r3, [r7, #8]
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d105      	bne.n	800f90e <udp_input_local_match+0x32>
 800f902:	4b23      	ldr	r3, [pc, #140]	@ (800f990 <udp_input_local_match+0xb4>)
 800f904:	2288      	movs	r2, #136	@ 0x88
 800f906:	4925      	ldr	r1, [pc, #148]	@ (800f99c <udp_input_local_match+0xc0>)
 800f908:	4823      	ldr	r0, [pc, #140]	@ (800f998 <udp_input_local_match+0xbc>)
 800f90a:	f003 f9bb 	bl	8012c84 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	7a1b      	ldrb	r3, [r3, #8]
 800f912:	2b00      	cmp	r3, #0
 800f914:	d00b      	beq.n	800f92e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	7a1a      	ldrb	r2, [r3, #8]
 800f91a:	4b21      	ldr	r3, [pc, #132]	@ (800f9a0 <udp_input_local_match+0xc4>)
 800f91c:	685b      	ldr	r3, [r3, #4]
 800f91e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f922:	3301      	adds	r3, #1
 800f924:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f926:	429a      	cmp	r2, r3
 800f928:	d001      	beq.n	800f92e <udp_input_local_match+0x52>
    return 0;
 800f92a:	2300      	movs	r3, #0
 800f92c:	e02b      	b.n	800f986 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800f92e:	79fb      	ldrb	r3, [r7, #7]
 800f930:	2b00      	cmp	r3, #0
 800f932:	d018      	beq.n	800f966 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f934:	68fb      	ldr	r3, [r7, #12]
 800f936:	2b00      	cmp	r3, #0
 800f938:	d013      	beq.n	800f962 <udp_input_local_match+0x86>
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d00f      	beq.n	800f962 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800f942:	4b17      	ldr	r3, [pc, #92]	@ (800f9a0 <udp_input_local_match+0xc4>)
 800f944:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f94a:	d00a      	beq.n	800f962 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800f94c:	68fb      	ldr	r3, [r7, #12]
 800f94e:	681a      	ldr	r2, [r3, #0]
 800f950:	4b13      	ldr	r3, [pc, #76]	@ (800f9a0 <udp_input_local_match+0xc4>)
 800f952:	695b      	ldr	r3, [r3, #20]
 800f954:	405a      	eors	r2, r3
 800f956:	68bb      	ldr	r3, [r7, #8]
 800f958:	3308      	adds	r3, #8
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d110      	bne.n	800f984 <udp_input_local_match+0xa8>
          return 1;
 800f962:	2301      	movs	r3, #1
 800f964:	e00f      	b.n	800f986 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f966:	68fb      	ldr	r3, [r7, #12]
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d009      	beq.n	800f980 <udp_input_local_match+0xa4>
 800f96c:	68fb      	ldr	r3, [r7, #12]
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	2b00      	cmp	r3, #0
 800f972:	d005      	beq.n	800f980 <udp_input_local_match+0xa4>
 800f974:	68fb      	ldr	r3, [r7, #12]
 800f976:	681a      	ldr	r2, [r3, #0]
 800f978:	4b09      	ldr	r3, [pc, #36]	@ (800f9a0 <udp_input_local_match+0xc4>)
 800f97a:	695b      	ldr	r3, [r3, #20]
 800f97c:	429a      	cmp	r2, r3
 800f97e:	d101      	bne.n	800f984 <udp_input_local_match+0xa8>
        return 1;
 800f980:	2301      	movs	r3, #1
 800f982:	e000      	b.n	800f986 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800f984:	2300      	movs	r3, #0
}
 800f986:	4618      	mov	r0, r3
 800f988:	3710      	adds	r7, #16
 800f98a:	46bd      	mov	sp, r7
 800f98c:	bd80      	pop	{r7, pc}
 800f98e:	bf00      	nop
 800f990:	08015e20 	.word	0x08015e20
 800f994:	08015e50 	.word	0x08015e50
 800f998:	08015e74 	.word	0x08015e74
 800f99c:	08015e9c 	.word	0x08015e9c
 800f9a0:	200055dc 	.word	0x200055dc

0800f9a4 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800f9a4:	b590      	push	{r4, r7, lr}
 800f9a6:	b08d      	sub	sp, #52	@ 0x34
 800f9a8:	af02      	add	r7, sp, #8
 800f9aa:	6078      	str	r0, [r7, #4]
 800f9ac:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800f9ae:	2300      	movs	r3, #0
 800f9b0:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d105      	bne.n	800f9c4 <udp_input+0x20>
 800f9b8:	4b7c      	ldr	r3, [pc, #496]	@ (800fbac <udp_input+0x208>)
 800f9ba:	22cf      	movs	r2, #207	@ 0xcf
 800f9bc:	497c      	ldr	r1, [pc, #496]	@ (800fbb0 <udp_input+0x20c>)
 800f9be:	487d      	ldr	r0, [pc, #500]	@ (800fbb4 <udp_input+0x210>)
 800f9c0:	f003 f960 	bl	8012c84 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800f9c4:	683b      	ldr	r3, [r7, #0]
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d105      	bne.n	800f9d6 <udp_input+0x32>
 800f9ca:	4b78      	ldr	r3, [pc, #480]	@ (800fbac <udp_input+0x208>)
 800f9cc:	22d0      	movs	r2, #208	@ 0xd0
 800f9ce:	497a      	ldr	r1, [pc, #488]	@ (800fbb8 <udp_input+0x214>)
 800f9d0:	4878      	ldr	r0, [pc, #480]	@ (800fbb4 <udp_input+0x210>)
 800f9d2:	f003 f957 	bl	8012c84 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	895b      	ldrh	r3, [r3, #10]
 800f9da:	2b07      	cmp	r3, #7
 800f9dc:	d803      	bhi.n	800f9e6 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800f9de:	6878      	ldr	r0, [r7, #4]
 800f9e0:	f7fa f960 	bl	8009ca4 <pbuf_free>
    goto end;
 800f9e4:	e0de      	b.n	800fba4 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	685b      	ldr	r3, [r3, #4]
 800f9ea:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800f9ec:	4b73      	ldr	r3, [pc, #460]	@ (800fbbc <udp_input+0x218>)
 800f9ee:	695b      	ldr	r3, [r3, #20]
 800f9f0:	4a72      	ldr	r2, [pc, #456]	@ (800fbbc <udp_input+0x218>)
 800f9f2:	6812      	ldr	r2, [r2, #0]
 800f9f4:	4611      	mov	r1, r2
 800f9f6:	4618      	mov	r0, r3
 800f9f8:	f001 ffa0 	bl	801193c <ip4_addr_isbroadcast_u32>
 800f9fc:	4603      	mov	r3, r0
 800f9fe:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800fa00:	697b      	ldr	r3, [r7, #20]
 800fa02:	881b      	ldrh	r3, [r3, #0]
 800fa04:	b29b      	uxth	r3, r3
 800fa06:	4618      	mov	r0, r3
 800fa08:	f7f8 fdee 	bl	80085e8 <lwip_htons>
 800fa0c:	4603      	mov	r3, r0
 800fa0e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800fa10:	697b      	ldr	r3, [r7, #20]
 800fa12:	885b      	ldrh	r3, [r3, #2]
 800fa14:	b29b      	uxth	r3, r3
 800fa16:	4618      	mov	r0, r3
 800fa18:	f7f8 fde6 	bl	80085e8 <lwip_htons>
 800fa1c:	4603      	mov	r3, r0
 800fa1e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800fa20:	2300      	movs	r3, #0
 800fa22:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 800fa24:	2300      	movs	r3, #0
 800fa26:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800fa28:	2300      	movs	r3, #0
 800fa2a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800fa2c:	4b64      	ldr	r3, [pc, #400]	@ (800fbc0 <udp_input+0x21c>)
 800fa2e:	681b      	ldr	r3, [r3, #0]
 800fa30:	627b      	str	r3, [r7, #36]	@ 0x24
 800fa32:	e054      	b.n	800fade <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800fa34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa36:	8a5b      	ldrh	r3, [r3, #18]
 800fa38:	89fa      	ldrh	r2, [r7, #14]
 800fa3a:	429a      	cmp	r2, r3
 800fa3c:	d14a      	bne.n	800fad4 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800fa3e:	7cfb      	ldrb	r3, [r7, #19]
 800fa40:	461a      	mov	r2, r3
 800fa42:	6839      	ldr	r1, [r7, #0]
 800fa44:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800fa46:	f7ff ff49 	bl	800f8dc <udp_input_local_match>
 800fa4a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d041      	beq.n	800fad4 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800fa50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa52:	7c1b      	ldrb	r3, [r3, #16]
 800fa54:	f003 0304 	and.w	r3, r3, #4
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d11d      	bne.n	800fa98 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800fa5c:	69fb      	ldr	r3, [r7, #28]
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d102      	bne.n	800fa68 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800fa62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa64:	61fb      	str	r3, [r7, #28]
 800fa66:	e017      	b.n	800fa98 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800fa68:	7cfb      	ldrb	r3, [r7, #19]
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d014      	beq.n	800fa98 <udp_input+0xf4>
 800fa6e:	4b53      	ldr	r3, [pc, #332]	@ (800fbbc <udp_input+0x218>)
 800fa70:	695b      	ldr	r3, [r3, #20]
 800fa72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa76:	d10f      	bne.n	800fa98 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800fa78:	69fb      	ldr	r3, [r7, #28]
 800fa7a:	681a      	ldr	r2, [r3, #0]
 800fa7c:	683b      	ldr	r3, [r7, #0]
 800fa7e:	3304      	adds	r3, #4
 800fa80:	681b      	ldr	r3, [r3, #0]
 800fa82:	429a      	cmp	r2, r3
 800fa84:	d008      	beq.n	800fa98 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800fa86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa88:	681a      	ldr	r2, [r3, #0]
 800fa8a:	683b      	ldr	r3, [r7, #0]
 800fa8c:	3304      	adds	r3, #4
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	429a      	cmp	r2, r3
 800fa92:	d101      	bne.n	800fa98 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800fa94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa96:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800fa98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa9a:	8a9b      	ldrh	r3, [r3, #20]
 800fa9c:	8a3a      	ldrh	r2, [r7, #16]
 800fa9e:	429a      	cmp	r2, r3
 800faa0:	d118      	bne.n	800fad4 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800faa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800faa4:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	d005      	beq.n	800fab6 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800faaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800faac:	685a      	ldr	r2, [r3, #4]
 800faae:	4b43      	ldr	r3, [pc, #268]	@ (800fbbc <udp_input+0x218>)
 800fab0:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800fab2:	429a      	cmp	r2, r3
 800fab4:	d10e      	bne.n	800fad4 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800fab6:	6a3b      	ldr	r3, [r7, #32]
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d014      	beq.n	800fae6 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800fabc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fabe:	68da      	ldr	r2, [r3, #12]
 800fac0:	6a3b      	ldr	r3, [r7, #32]
 800fac2:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800fac4:	4b3e      	ldr	r3, [pc, #248]	@ (800fbc0 <udp_input+0x21c>)
 800fac6:	681a      	ldr	r2, [r3, #0]
 800fac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800faca:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800facc:	4a3c      	ldr	r2, [pc, #240]	@ (800fbc0 <udp_input+0x21c>)
 800face:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fad0:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800fad2:	e008      	b.n	800fae6 <udp_input+0x142>
      }
    }

    prev = pcb;
 800fad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fad6:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800fad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fada:	68db      	ldr	r3, [r3, #12]
 800fadc:	627b      	str	r3, [r7, #36]	@ 0x24
 800fade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d1a7      	bne.n	800fa34 <udp_input+0x90>
 800fae4:	e000      	b.n	800fae8 <udp_input+0x144>
        break;
 800fae6:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800fae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800faea:	2b00      	cmp	r3, #0
 800faec:	d101      	bne.n	800faf2 <udp_input+0x14e>
    pcb = uncon_pcb;
 800faee:	69fb      	ldr	r3, [r7, #28]
 800faf0:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800faf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d002      	beq.n	800fafe <udp_input+0x15a>
    for_us = 1;
 800faf8:	2301      	movs	r3, #1
 800fafa:	76fb      	strb	r3, [r7, #27]
 800fafc:	e00a      	b.n	800fb14 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800fafe:	683b      	ldr	r3, [r7, #0]
 800fb00:	3304      	adds	r3, #4
 800fb02:	681a      	ldr	r2, [r3, #0]
 800fb04:	4b2d      	ldr	r3, [pc, #180]	@ (800fbbc <udp_input+0x218>)
 800fb06:	695b      	ldr	r3, [r3, #20]
 800fb08:	429a      	cmp	r2, r3
 800fb0a:	bf0c      	ite	eq
 800fb0c:	2301      	moveq	r3, #1
 800fb0e:	2300      	movne	r3, #0
 800fb10:	b2db      	uxtb	r3, r3
 800fb12:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800fb14:	7efb      	ldrb	r3, [r7, #27]
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d041      	beq.n	800fb9e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800fb1a:	2108      	movs	r1, #8
 800fb1c:	6878      	ldr	r0, [r7, #4]
 800fb1e:	f7fa f83b 	bl	8009b98 <pbuf_remove_header>
 800fb22:	4603      	mov	r3, r0
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	d00a      	beq.n	800fb3e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800fb28:	4b20      	ldr	r3, [pc, #128]	@ (800fbac <udp_input+0x208>)
 800fb2a:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 800fb2e:	4925      	ldr	r1, [pc, #148]	@ (800fbc4 <udp_input+0x220>)
 800fb30:	4820      	ldr	r0, [pc, #128]	@ (800fbb4 <udp_input+0x210>)
 800fb32:	f003 f8a7 	bl	8012c84 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800fb36:	6878      	ldr	r0, [r7, #4]
 800fb38:	f7fa f8b4 	bl	8009ca4 <pbuf_free>
      goto end;
 800fb3c:	e032      	b.n	800fba4 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800fb3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d012      	beq.n	800fb6a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800fb44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb46:	699b      	ldr	r3, [r3, #24]
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	d00a      	beq.n	800fb62 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800fb4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb4e:	699c      	ldr	r4, [r3, #24]
 800fb50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb52:	69d8      	ldr	r0, [r3, #28]
 800fb54:	8a3b      	ldrh	r3, [r7, #16]
 800fb56:	9300      	str	r3, [sp, #0]
 800fb58:	4b1b      	ldr	r3, [pc, #108]	@ (800fbc8 <udp_input+0x224>)
 800fb5a:	687a      	ldr	r2, [r7, #4]
 800fb5c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800fb5e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800fb60:	e021      	b.n	800fba6 <udp_input+0x202>
        pbuf_free(p);
 800fb62:	6878      	ldr	r0, [r7, #4]
 800fb64:	f7fa f89e 	bl	8009ca4 <pbuf_free>
        goto end;
 800fb68:	e01c      	b.n	800fba4 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800fb6a:	7cfb      	ldrb	r3, [r7, #19]
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d112      	bne.n	800fb96 <udp_input+0x1f2>
 800fb70:	4b12      	ldr	r3, [pc, #72]	@ (800fbbc <udp_input+0x218>)
 800fb72:	695b      	ldr	r3, [r3, #20]
 800fb74:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800fb78:	2be0      	cmp	r3, #224	@ 0xe0
 800fb7a:	d00c      	beq.n	800fb96 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800fb7c:	4b0f      	ldr	r3, [pc, #60]	@ (800fbbc <udp_input+0x218>)
 800fb7e:	899b      	ldrh	r3, [r3, #12]
 800fb80:	3308      	adds	r3, #8
 800fb82:	b29b      	uxth	r3, r3
 800fb84:	b21b      	sxth	r3, r3
 800fb86:	4619      	mov	r1, r3
 800fb88:	6878      	ldr	r0, [r7, #4]
 800fb8a:	f7fa f878 	bl	8009c7e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800fb8e:	2103      	movs	r1, #3
 800fb90:	6878      	ldr	r0, [r7, #4]
 800fb92:	f001 fbb3 	bl	80112fc <icmp_dest_unreach>
      pbuf_free(p);
 800fb96:	6878      	ldr	r0, [r7, #4]
 800fb98:	f7fa f884 	bl	8009ca4 <pbuf_free>
  return;
 800fb9c:	e003      	b.n	800fba6 <udp_input+0x202>
    pbuf_free(p);
 800fb9e:	6878      	ldr	r0, [r7, #4]
 800fba0:	f7fa f880 	bl	8009ca4 <pbuf_free>
  return;
 800fba4:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800fba6:	372c      	adds	r7, #44	@ 0x2c
 800fba8:	46bd      	mov	sp, r7
 800fbaa:	bd90      	pop	{r4, r7, pc}
 800fbac:	08015e20 	.word	0x08015e20
 800fbb0:	08015ec4 	.word	0x08015ec4
 800fbb4:	08015e74 	.word	0x08015e74
 800fbb8:	08015edc 	.word	0x08015edc
 800fbbc:	200055dc 	.word	0x200055dc
 800fbc0:	20008968 	.word	0x20008968
 800fbc4:	08015ef8 	.word	0x08015ef8
 800fbc8:	200055ec 	.word	0x200055ec

0800fbcc <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 800fbcc:	b580      	push	{r7, lr}
 800fbce:	b082      	sub	sp, #8
 800fbd0:	af00      	add	r7, sp, #0
 800fbd2:	6078      	str	r0, [r7, #4]
 800fbd4:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	d109      	bne.n	800fbf0 <udp_send+0x24>
 800fbdc:	4b11      	ldr	r3, [pc, #68]	@ (800fc24 <udp_send+0x58>)
 800fbde:	f240 12d5 	movw	r2, #469	@ 0x1d5
 800fbe2:	4911      	ldr	r1, [pc, #68]	@ (800fc28 <udp_send+0x5c>)
 800fbe4:	4811      	ldr	r0, [pc, #68]	@ (800fc2c <udp_send+0x60>)
 800fbe6:	f003 f84d 	bl	8012c84 <iprintf>
 800fbea:	f06f 030f 	mvn.w	r3, #15
 800fbee:	e015      	b.n	800fc1c <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 800fbf0:	683b      	ldr	r3, [r7, #0]
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d109      	bne.n	800fc0a <udp_send+0x3e>
 800fbf6:	4b0b      	ldr	r3, [pc, #44]	@ (800fc24 <udp_send+0x58>)
 800fbf8:	f44f 72eb 	mov.w	r2, #470	@ 0x1d6
 800fbfc:	490c      	ldr	r1, [pc, #48]	@ (800fc30 <udp_send+0x64>)
 800fbfe:	480b      	ldr	r0, [pc, #44]	@ (800fc2c <udp_send+0x60>)
 800fc00:	f003 f840 	bl	8012c84 <iprintf>
 800fc04:	f06f 030f 	mvn.w	r3, #15
 800fc08:	e008      	b.n	800fc1c <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	1d1a      	adds	r2, r3, #4
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	8a9b      	ldrh	r3, [r3, #20]
 800fc12:	6839      	ldr	r1, [r7, #0]
 800fc14:	6878      	ldr	r0, [r7, #4]
 800fc16:	f000 f80d 	bl	800fc34 <udp_sendto>
 800fc1a:	4603      	mov	r3, r0
}
 800fc1c:	4618      	mov	r0, r3
 800fc1e:	3708      	adds	r7, #8
 800fc20:	46bd      	mov	sp, r7
 800fc22:	bd80      	pop	{r7, pc}
 800fc24:	08015e20 	.word	0x08015e20
 800fc28:	08015f14 	.word	0x08015f14
 800fc2c:	08015e74 	.word	0x08015e74
 800fc30:	08015f2c 	.word	0x08015f2c

0800fc34 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 800fc34:	b580      	push	{r7, lr}
 800fc36:	b088      	sub	sp, #32
 800fc38:	af02      	add	r7, sp, #8
 800fc3a:	60f8      	str	r0, [r7, #12]
 800fc3c:	60b9      	str	r1, [r7, #8]
 800fc3e:	607a      	str	r2, [r7, #4]
 800fc40:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800fc42:	68fb      	ldr	r3, [r7, #12]
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	d109      	bne.n	800fc5c <udp_sendto+0x28>
 800fc48:	4b23      	ldr	r3, [pc, #140]	@ (800fcd8 <udp_sendto+0xa4>)
 800fc4a:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800fc4e:	4923      	ldr	r1, [pc, #140]	@ (800fcdc <udp_sendto+0xa8>)
 800fc50:	4823      	ldr	r0, [pc, #140]	@ (800fce0 <udp_sendto+0xac>)
 800fc52:	f003 f817 	bl	8012c84 <iprintf>
 800fc56:	f06f 030f 	mvn.w	r3, #15
 800fc5a:	e038      	b.n	800fcce <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800fc5c:	68bb      	ldr	r3, [r7, #8]
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d109      	bne.n	800fc76 <udp_sendto+0x42>
 800fc62:	4b1d      	ldr	r3, [pc, #116]	@ (800fcd8 <udp_sendto+0xa4>)
 800fc64:	f240 2219 	movw	r2, #537	@ 0x219
 800fc68:	491e      	ldr	r1, [pc, #120]	@ (800fce4 <udp_sendto+0xb0>)
 800fc6a:	481d      	ldr	r0, [pc, #116]	@ (800fce0 <udp_sendto+0xac>)
 800fc6c:	f003 f80a 	bl	8012c84 <iprintf>
 800fc70:	f06f 030f 	mvn.w	r3, #15
 800fc74:	e02b      	b.n	800fcce <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	d109      	bne.n	800fc90 <udp_sendto+0x5c>
 800fc7c:	4b16      	ldr	r3, [pc, #88]	@ (800fcd8 <udp_sendto+0xa4>)
 800fc7e:	f240 221a 	movw	r2, #538	@ 0x21a
 800fc82:	4919      	ldr	r1, [pc, #100]	@ (800fce8 <udp_sendto+0xb4>)
 800fc84:	4816      	ldr	r0, [pc, #88]	@ (800fce0 <udp_sendto+0xac>)
 800fc86:	f002 fffd 	bl	8012c84 <iprintf>
 800fc8a:	f06f 030f 	mvn.w	r3, #15
 800fc8e:	e01e      	b.n	800fcce <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800fc90:	68fb      	ldr	r3, [r7, #12]
 800fc92:	7a1b      	ldrb	r3, [r3, #8]
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d006      	beq.n	800fca6 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 800fc98:	68fb      	ldr	r3, [r7, #12]
 800fc9a:	7a1b      	ldrb	r3, [r3, #8]
 800fc9c:	4618      	mov	r0, r3
 800fc9e:	f7f9 fca1 	bl	80095e4 <netif_get_by_index>
 800fca2:	6178      	str	r0, [r7, #20]
 800fca4:	e003      	b.n	800fcae <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 800fca6:	6878      	ldr	r0, [r7, #4]
 800fca8:	f001 fbb2 	bl	8011410 <ip4_route>
 800fcac:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800fcae:	697b      	ldr	r3, [r7, #20]
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	d102      	bne.n	800fcba <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 800fcb4:	f06f 0303 	mvn.w	r3, #3
 800fcb8:	e009      	b.n	800fcce <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800fcba:	887a      	ldrh	r2, [r7, #2]
 800fcbc:	697b      	ldr	r3, [r7, #20]
 800fcbe:	9300      	str	r3, [sp, #0]
 800fcc0:	4613      	mov	r3, r2
 800fcc2:	687a      	ldr	r2, [r7, #4]
 800fcc4:	68b9      	ldr	r1, [r7, #8]
 800fcc6:	68f8      	ldr	r0, [r7, #12]
 800fcc8:	f000 f810 	bl	800fcec <udp_sendto_if>
 800fccc:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800fcce:	4618      	mov	r0, r3
 800fcd0:	3718      	adds	r7, #24
 800fcd2:	46bd      	mov	sp, r7
 800fcd4:	bd80      	pop	{r7, pc}
 800fcd6:	bf00      	nop
 800fcd8:	08015e20 	.word	0x08015e20
 800fcdc:	08015f44 	.word	0x08015f44
 800fce0:	08015e74 	.word	0x08015e74
 800fce4:	08015f5c 	.word	0x08015f5c
 800fce8:	08015f78 	.word	0x08015f78

0800fcec <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800fcec:	b580      	push	{r7, lr}
 800fcee:	b088      	sub	sp, #32
 800fcf0:	af02      	add	r7, sp, #8
 800fcf2:	60f8      	str	r0, [r7, #12]
 800fcf4:	60b9      	str	r1, [r7, #8]
 800fcf6:	607a      	str	r2, [r7, #4]
 800fcf8:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800fcfa:	68fb      	ldr	r3, [r7, #12]
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d109      	bne.n	800fd14 <udp_sendto_if+0x28>
 800fd00:	4b2e      	ldr	r3, [pc, #184]	@ (800fdbc <udp_sendto_if+0xd0>)
 800fd02:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800fd06:	492e      	ldr	r1, [pc, #184]	@ (800fdc0 <udp_sendto_if+0xd4>)
 800fd08:	482e      	ldr	r0, [pc, #184]	@ (800fdc4 <udp_sendto_if+0xd8>)
 800fd0a:	f002 ffbb 	bl	8012c84 <iprintf>
 800fd0e:	f06f 030f 	mvn.w	r3, #15
 800fd12:	e04f      	b.n	800fdb4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800fd14:	68bb      	ldr	r3, [r7, #8]
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d109      	bne.n	800fd2e <udp_sendto_if+0x42>
 800fd1a:	4b28      	ldr	r3, [pc, #160]	@ (800fdbc <udp_sendto_if+0xd0>)
 800fd1c:	f240 2281 	movw	r2, #641	@ 0x281
 800fd20:	4929      	ldr	r1, [pc, #164]	@ (800fdc8 <udp_sendto_if+0xdc>)
 800fd22:	4828      	ldr	r0, [pc, #160]	@ (800fdc4 <udp_sendto_if+0xd8>)
 800fd24:	f002 ffae 	bl	8012c84 <iprintf>
 800fd28:	f06f 030f 	mvn.w	r3, #15
 800fd2c:	e042      	b.n	800fdb4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	d109      	bne.n	800fd48 <udp_sendto_if+0x5c>
 800fd34:	4b21      	ldr	r3, [pc, #132]	@ (800fdbc <udp_sendto_if+0xd0>)
 800fd36:	f240 2282 	movw	r2, #642	@ 0x282
 800fd3a:	4924      	ldr	r1, [pc, #144]	@ (800fdcc <udp_sendto_if+0xe0>)
 800fd3c:	4821      	ldr	r0, [pc, #132]	@ (800fdc4 <udp_sendto_if+0xd8>)
 800fd3e:	f002 ffa1 	bl	8012c84 <iprintf>
 800fd42:	f06f 030f 	mvn.w	r3, #15
 800fd46:	e035      	b.n	800fdb4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800fd48:	6a3b      	ldr	r3, [r7, #32]
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d109      	bne.n	800fd62 <udp_sendto_if+0x76>
 800fd4e:	4b1b      	ldr	r3, [pc, #108]	@ (800fdbc <udp_sendto_if+0xd0>)
 800fd50:	f240 2283 	movw	r2, #643	@ 0x283
 800fd54:	491e      	ldr	r1, [pc, #120]	@ (800fdd0 <udp_sendto_if+0xe4>)
 800fd56:	481b      	ldr	r0, [pc, #108]	@ (800fdc4 <udp_sendto_if+0xd8>)
 800fd58:	f002 ff94 	bl	8012c84 <iprintf>
 800fd5c:	f06f 030f 	mvn.w	r3, #15
 800fd60:	e028      	b.n	800fdb4 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800fd62:	68fb      	ldr	r3, [r7, #12]
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d009      	beq.n	800fd7c <udp_sendto_if+0x90>
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	681b      	ldr	r3, [r3, #0]
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d005      	beq.n	800fd7c <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800fd70:	68fb      	ldr	r3, [r7, #12]
 800fd72:	681b      	ldr	r3, [r3, #0]
 800fd74:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800fd78:	2be0      	cmp	r3, #224	@ 0xe0
 800fd7a:	d103      	bne.n	800fd84 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800fd7c:	6a3b      	ldr	r3, [r7, #32]
 800fd7e:	3304      	adds	r3, #4
 800fd80:	617b      	str	r3, [r7, #20]
 800fd82:	e00b      	b.n	800fd9c <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800fd84:	68fb      	ldr	r3, [r7, #12]
 800fd86:	681a      	ldr	r2, [r3, #0]
 800fd88:	6a3b      	ldr	r3, [r7, #32]
 800fd8a:	3304      	adds	r3, #4
 800fd8c:	681b      	ldr	r3, [r3, #0]
 800fd8e:	429a      	cmp	r2, r3
 800fd90:	d002      	beq.n	800fd98 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800fd92:	f06f 0303 	mvn.w	r3, #3
 800fd96:	e00d      	b.n	800fdb4 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800fd98:	68fb      	ldr	r3, [r7, #12]
 800fd9a:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800fd9c:	887a      	ldrh	r2, [r7, #2]
 800fd9e:	697b      	ldr	r3, [r7, #20]
 800fda0:	9301      	str	r3, [sp, #4]
 800fda2:	6a3b      	ldr	r3, [r7, #32]
 800fda4:	9300      	str	r3, [sp, #0]
 800fda6:	4613      	mov	r3, r2
 800fda8:	687a      	ldr	r2, [r7, #4]
 800fdaa:	68b9      	ldr	r1, [r7, #8]
 800fdac:	68f8      	ldr	r0, [r7, #12]
 800fdae:	f000 f811 	bl	800fdd4 <udp_sendto_if_src>
 800fdb2:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800fdb4:	4618      	mov	r0, r3
 800fdb6:	3718      	adds	r7, #24
 800fdb8:	46bd      	mov	sp, r7
 800fdba:	bd80      	pop	{r7, pc}
 800fdbc:	08015e20 	.word	0x08015e20
 800fdc0:	08015f94 	.word	0x08015f94
 800fdc4:	08015e74 	.word	0x08015e74
 800fdc8:	08015fb0 	.word	0x08015fb0
 800fdcc:	08015fcc 	.word	0x08015fcc
 800fdd0:	08015fec 	.word	0x08015fec

0800fdd4 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800fdd4:	b580      	push	{r7, lr}
 800fdd6:	b08c      	sub	sp, #48	@ 0x30
 800fdd8:	af04      	add	r7, sp, #16
 800fdda:	60f8      	str	r0, [r7, #12]
 800fddc:	60b9      	str	r1, [r7, #8]
 800fdde:	607a      	str	r2, [r7, #4]
 800fde0:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800fde2:	68fb      	ldr	r3, [r7, #12]
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	d109      	bne.n	800fdfc <udp_sendto_if_src+0x28>
 800fde8:	4b65      	ldr	r3, [pc, #404]	@ (800ff80 <udp_sendto_if_src+0x1ac>)
 800fdea:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800fdee:	4965      	ldr	r1, [pc, #404]	@ (800ff84 <udp_sendto_if_src+0x1b0>)
 800fdf0:	4865      	ldr	r0, [pc, #404]	@ (800ff88 <udp_sendto_if_src+0x1b4>)
 800fdf2:	f002 ff47 	bl	8012c84 <iprintf>
 800fdf6:	f06f 030f 	mvn.w	r3, #15
 800fdfa:	e0bc      	b.n	800ff76 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800fdfc:	68bb      	ldr	r3, [r7, #8]
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d109      	bne.n	800fe16 <udp_sendto_if_src+0x42>
 800fe02:	4b5f      	ldr	r3, [pc, #380]	@ (800ff80 <udp_sendto_if_src+0x1ac>)
 800fe04:	f240 22d2 	movw	r2, #722	@ 0x2d2
 800fe08:	4960      	ldr	r1, [pc, #384]	@ (800ff8c <udp_sendto_if_src+0x1b8>)
 800fe0a:	485f      	ldr	r0, [pc, #380]	@ (800ff88 <udp_sendto_if_src+0x1b4>)
 800fe0c:	f002 ff3a 	bl	8012c84 <iprintf>
 800fe10:	f06f 030f 	mvn.w	r3, #15
 800fe14:	e0af      	b.n	800ff76 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	d109      	bne.n	800fe30 <udp_sendto_if_src+0x5c>
 800fe1c:	4b58      	ldr	r3, [pc, #352]	@ (800ff80 <udp_sendto_if_src+0x1ac>)
 800fe1e:	f240 22d3 	movw	r2, #723	@ 0x2d3
 800fe22:	495b      	ldr	r1, [pc, #364]	@ (800ff90 <udp_sendto_if_src+0x1bc>)
 800fe24:	4858      	ldr	r0, [pc, #352]	@ (800ff88 <udp_sendto_if_src+0x1b4>)
 800fe26:	f002 ff2d 	bl	8012c84 <iprintf>
 800fe2a:	f06f 030f 	mvn.w	r3, #15
 800fe2e:	e0a2      	b.n	800ff76 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800fe30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d109      	bne.n	800fe4a <udp_sendto_if_src+0x76>
 800fe36:	4b52      	ldr	r3, [pc, #328]	@ (800ff80 <udp_sendto_if_src+0x1ac>)
 800fe38:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 800fe3c:	4955      	ldr	r1, [pc, #340]	@ (800ff94 <udp_sendto_if_src+0x1c0>)
 800fe3e:	4852      	ldr	r0, [pc, #328]	@ (800ff88 <udp_sendto_if_src+0x1b4>)
 800fe40:	f002 ff20 	bl	8012c84 <iprintf>
 800fe44:	f06f 030f 	mvn.w	r3, #15
 800fe48:	e095      	b.n	800ff76 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800fe4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	d109      	bne.n	800fe64 <udp_sendto_if_src+0x90>
 800fe50:	4b4b      	ldr	r3, [pc, #300]	@ (800ff80 <udp_sendto_if_src+0x1ac>)
 800fe52:	f240 22d5 	movw	r2, #725	@ 0x2d5
 800fe56:	4950      	ldr	r1, [pc, #320]	@ (800ff98 <udp_sendto_if_src+0x1c4>)
 800fe58:	484b      	ldr	r0, [pc, #300]	@ (800ff88 <udp_sendto_if_src+0x1b4>)
 800fe5a:	f002 ff13 	bl	8012c84 <iprintf>
 800fe5e:	f06f 030f 	mvn.w	r3, #15
 800fe62:	e088      	b.n	800ff76 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800fe64:	68fb      	ldr	r3, [r7, #12]
 800fe66:	8a5b      	ldrh	r3, [r3, #18]
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d10f      	bne.n	800fe8c <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800fe6c:	68f9      	ldr	r1, [r7, #12]
 800fe6e:	68fb      	ldr	r3, [r7, #12]
 800fe70:	8a5b      	ldrh	r3, [r3, #18]
 800fe72:	461a      	mov	r2, r3
 800fe74:	68f8      	ldr	r0, [r7, #12]
 800fe76:	f000 f893 	bl	800ffa0 <udp_bind>
 800fe7a:	4603      	mov	r3, r0
 800fe7c:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800fe7e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d002      	beq.n	800fe8c <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800fe86:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800fe8a:	e074      	b.n	800ff76 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800fe8c:	68bb      	ldr	r3, [r7, #8]
 800fe8e:	891b      	ldrh	r3, [r3, #8]
 800fe90:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 800fe94:	4293      	cmp	r3, r2
 800fe96:	d902      	bls.n	800fe9e <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800fe98:	f04f 33ff 	mov.w	r3, #4294967295
 800fe9c:	e06b      	b.n	800ff76 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800fe9e:	2108      	movs	r1, #8
 800fea0:	68b8      	ldr	r0, [r7, #8]
 800fea2:	f7f9 fe69 	bl	8009b78 <pbuf_add_header>
 800fea6:	4603      	mov	r3, r0
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	d015      	beq.n	800fed8 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800feac:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800feb0:	2108      	movs	r1, #8
 800feb2:	2022      	movs	r0, #34	@ 0x22
 800feb4:	f7f9 fc12 	bl	80096dc <pbuf_alloc>
 800feb8:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800feba:	69fb      	ldr	r3, [r7, #28]
 800febc:	2b00      	cmp	r3, #0
 800febe:	d102      	bne.n	800fec6 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800fec0:	f04f 33ff 	mov.w	r3, #4294967295
 800fec4:	e057      	b.n	800ff76 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800fec6:	68bb      	ldr	r3, [r7, #8]
 800fec8:	891b      	ldrh	r3, [r3, #8]
 800feca:	2b00      	cmp	r3, #0
 800fecc:	d006      	beq.n	800fedc <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800fece:	68b9      	ldr	r1, [r7, #8]
 800fed0:	69f8      	ldr	r0, [r7, #28]
 800fed2:	f7f9 ffff 	bl	8009ed4 <pbuf_chain>
 800fed6:	e001      	b.n	800fedc <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800fed8:	68bb      	ldr	r3, [r7, #8]
 800feda:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800fedc:	69fb      	ldr	r3, [r7, #28]
 800fede:	895b      	ldrh	r3, [r3, #10]
 800fee0:	2b07      	cmp	r3, #7
 800fee2:	d806      	bhi.n	800fef2 <udp_sendto_if_src+0x11e>
 800fee4:	4b26      	ldr	r3, [pc, #152]	@ (800ff80 <udp_sendto_if_src+0x1ac>)
 800fee6:	f240 320d 	movw	r2, #781	@ 0x30d
 800feea:	492c      	ldr	r1, [pc, #176]	@ (800ff9c <udp_sendto_if_src+0x1c8>)
 800feec:	4826      	ldr	r0, [pc, #152]	@ (800ff88 <udp_sendto_if_src+0x1b4>)
 800feee:	f002 fec9 	bl	8012c84 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800fef2:	69fb      	ldr	r3, [r7, #28]
 800fef4:	685b      	ldr	r3, [r3, #4]
 800fef6:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800fef8:	68fb      	ldr	r3, [r7, #12]
 800fefa:	8a5b      	ldrh	r3, [r3, #18]
 800fefc:	4618      	mov	r0, r3
 800fefe:	f7f8 fb73 	bl	80085e8 <lwip_htons>
 800ff02:	4603      	mov	r3, r0
 800ff04:	461a      	mov	r2, r3
 800ff06:	697b      	ldr	r3, [r7, #20]
 800ff08:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800ff0a:	887b      	ldrh	r3, [r7, #2]
 800ff0c:	4618      	mov	r0, r3
 800ff0e:	f7f8 fb6b 	bl	80085e8 <lwip_htons>
 800ff12:	4603      	mov	r3, r0
 800ff14:	461a      	mov	r2, r3
 800ff16:	697b      	ldr	r3, [r7, #20]
 800ff18:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800ff1a:	697b      	ldr	r3, [r7, #20]
 800ff1c:	2200      	movs	r2, #0
 800ff1e:	719a      	strb	r2, [r3, #6]
 800ff20:	2200      	movs	r2, #0
 800ff22:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800ff24:	69fb      	ldr	r3, [r7, #28]
 800ff26:	891b      	ldrh	r3, [r3, #8]
 800ff28:	4618      	mov	r0, r3
 800ff2a:	f7f8 fb5d 	bl	80085e8 <lwip_htons>
 800ff2e:	4603      	mov	r3, r0
 800ff30:	461a      	mov	r2, r3
 800ff32:	697b      	ldr	r3, [r7, #20]
 800ff34:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800ff36:	2311      	movs	r3, #17
 800ff38:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800ff3a:	68fb      	ldr	r3, [r7, #12]
 800ff3c:	7adb      	ldrb	r3, [r3, #11]
 800ff3e:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800ff40:	68fb      	ldr	r3, [r7, #12]
 800ff42:	7a9b      	ldrb	r3, [r3, #10]
 800ff44:	7cb9      	ldrb	r1, [r7, #18]
 800ff46:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ff48:	9202      	str	r2, [sp, #8]
 800ff4a:	7cfa      	ldrb	r2, [r7, #19]
 800ff4c:	9201      	str	r2, [sp, #4]
 800ff4e:	9300      	str	r3, [sp, #0]
 800ff50:	460b      	mov	r3, r1
 800ff52:	687a      	ldr	r2, [r7, #4]
 800ff54:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ff56:	69f8      	ldr	r0, [r7, #28]
 800ff58:	f001 fc42 	bl	80117e0 <ip4_output_if_src>
 800ff5c:	4603      	mov	r3, r0
 800ff5e:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800ff60:	69fa      	ldr	r2, [r7, #28]
 800ff62:	68bb      	ldr	r3, [r7, #8]
 800ff64:	429a      	cmp	r2, r3
 800ff66:	d004      	beq.n	800ff72 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800ff68:	69f8      	ldr	r0, [r7, #28]
 800ff6a:	f7f9 fe9b 	bl	8009ca4 <pbuf_free>
    q = NULL;
 800ff6e:	2300      	movs	r3, #0
 800ff70:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800ff72:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800ff76:	4618      	mov	r0, r3
 800ff78:	3720      	adds	r7, #32
 800ff7a:	46bd      	mov	sp, r7
 800ff7c:	bd80      	pop	{r7, pc}
 800ff7e:	bf00      	nop
 800ff80:	08015e20 	.word	0x08015e20
 800ff84:	0801600c 	.word	0x0801600c
 800ff88:	08015e74 	.word	0x08015e74
 800ff8c:	0801602c 	.word	0x0801602c
 800ff90:	0801604c 	.word	0x0801604c
 800ff94:	08016070 	.word	0x08016070
 800ff98:	08016094 	.word	0x08016094
 800ff9c:	080160b8 	.word	0x080160b8

0800ffa0 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800ffa0:	b580      	push	{r7, lr}
 800ffa2:	b086      	sub	sp, #24
 800ffa4:	af00      	add	r7, sp, #0
 800ffa6:	60f8      	str	r0, [r7, #12]
 800ffa8:	60b9      	str	r1, [r7, #8]
 800ffaa:	4613      	mov	r3, r2
 800ffac:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800ffae:	68bb      	ldr	r3, [r7, #8]
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d101      	bne.n	800ffb8 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800ffb4:	4b39      	ldr	r3, [pc, #228]	@ (801009c <udp_bind+0xfc>)
 800ffb6:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800ffb8:	68fb      	ldr	r3, [r7, #12]
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	d109      	bne.n	800ffd2 <udp_bind+0x32>
 800ffbe:	4b38      	ldr	r3, [pc, #224]	@ (80100a0 <udp_bind+0x100>)
 800ffc0:	f240 32b7 	movw	r2, #951	@ 0x3b7
 800ffc4:	4937      	ldr	r1, [pc, #220]	@ (80100a4 <udp_bind+0x104>)
 800ffc6:	4838      	ldr	r0, [pc, #224]	@ (80100a8 <udp_bind+0x108>)
 800ffc8:	f002 fe5c 	bl	8012c84 <iprintf>
 800ffcc:	f06f 030f 	mvn.w	r3, #15
 800ffd0:	e060      	b.n	8010094 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800ffd2:	2300      	movs	r3, #0
 800ffd4:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ffd6:	4b35      	ldr	r3, [pc, #212]	@ (80100ac <udp_bind+0x10c>)
 800ffd8:	681b      	ldr	r3, [r3, #0]
 800ffda:	617b      	str	r3, [r7, #20]
 800ffdc:	e009      	b.n	800fff2 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800ffde:	68fa      	ldr	r2, [r7, #12]
 800ffe0:	697b      	ldr	r3, [r7, #20]
 800ffe2:	429a      	cmp	r2, r3
 800ffe4:	d102      	bne.n	800ffec <udp_bind+0x4c>
      rebind = 1;
 800ffe6:	2301      	movs	r3, #1
 800ffe8:	74fb      	strb	r3, [r7, #19]
      break;
 800ffea:	e005      	b.n	800fff8 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ffec:	697b      	ldr	r3, [r7, #20]
 800ffee:	68db      	ldr	r3, [r3, #12]
 800fff0:	617b      	str	r3, [r7, #20]
 800fff2:	697b      	ldr	r3, [r7, #20]
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d1f2      	bne.n	800ffde <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800fff8:	88fb      	ldrh	r3, [r7, #6]
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	d109      	bne.n	8010012 <udp_bind+0x72>
    port = udp_new_port();
 800fffe:	f7ff fc35 	bl	800f86c <udp_new_port>
 8010002:	4603      	mov	r3, r0
 8010004:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8010006:	88fb      	ldrh	r3, [r7, #6]
 8010008:	2b00      	cmp	r3, #0
 801000a:	d12c      	bne.n	8010066 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801000c:	f06f 0307 	mvn.w	r3, #7
 8010010:	e040      	b.n	8010094 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010012:	4b26      	ldr	r3, [pc, #152]	@ (80100ac <udp_bind+0x10c>)
 8010014:	681b      	ldr	r3, [r3, #0]
 8010016:	617b      	str	r3, [r7, #20]
 8010018:	e022      	b.n	8010060 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801001a:	68fa      	ldr	r2, [r7, #12]
 801001c:	697b      	ldr	r3, [r7, #20]
 801001e:	429a      	cmp	r2, r3
 8010020:	d01b      	beq.n	801005a <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8010022:	697b      	ldr	r3, [r7, #20]
 8010024:	8a5b      	ldrh	r3, [r3, #18]
 8010026:	88fa      	ldrh	r2, [r7, #6]
 8010028:	429a      	cmp	r2, r3
 801002a:	d116      	bne.n	801005a <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801002c:	697b      	ldr	r3, [r7, #20]
 801002e:	681a      	ldr	r2, [r3, #0]
 8010030:	68bb      	ldr	r3, [r7, #8]
 8010032:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8010034:	429a      	cmp	r2, r3
 8010036:	d00d      	beq.n	8010054 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8010038:	68bb      	ldr	r3, [r7, #8]
 801003a:	2b00      	cmp	r3, #0
 801003c:	d00a      	beq.n	8010054 <udp_bind+0xb4>
 801003e:	68bb      	ldr	r3, [r7, #8]
 8010040:	681b      	ldr	r3, [r3, #0]
 8010042:	2b00      	cmp	r3, #0
 8010044:	d006      	beq.n	8010054 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8010046:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8010048:	2b00      	cmp	r3, #0
 801004a:	d003      	beq.n	8010054 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801004c:	697b      	ldr	r3, [r7, #20]
 801004e:	681b      	ldr	r3, [r3, #0]
 8010050:	2b00      	cmp	r3, #0
 8010052:	d102      	bne.n	801005a <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8010054:	f06f 0307 	mvn.w	r3, #7
 8010058:	e01c      	b.n	8010094 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801005a:	697b      	ldr	r3, [r7, #20]
 801005c:	68db      	ldr	r3, [r3, #12]
 801005e:	617b      	str	r3, [r7, #20]
 8010060:	697b      	ldr	r3, [r7, #20]
 8010062:	2b00      	cmp	r3, #0
 8010064:	d1d9      	bne.n	801001a <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8010066:	68bb      	ldr	r3, [r7, #8]
 8010068:	2b00      	cmp	r3, #0
 801006a:	d002      	beq.n	8010072 <udp_bind+0xd2>
 801006c:	68bb      	ldr	r3, [r7, #8]
 801006e:	681b      	ldr	r3, [r3, #0]
 8010070:	e000      	b.n	8010074 <udp_bind+0xd4>
 8010072:	2300      	movs	r3, #0
 8010074:	68fa      	ldr	r2, [r7, #12]
 8010076:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8010078:	68fb      	ldr	r3, [r7, #12]
 801007a:	88fa      	ldrh	r2, [r7, #6]
 801007c:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801007e:	7cfb      	ldrb	r3, [r7, #19]
 8010080:	2b00      	cmp	r3, #0
 8010082:	d106      	bne.n	8010092 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8010084:	4b09      	ldr	r3, [pc, #36]	@ (80100ac <udp_bind+0x10c>)
 8010086:	681a      	ldr	r2, [r3, #0]
 8010088:	68fb      	ldr	r3, [r7, #12]
 801008a:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801008c:	4a07      	ldr	r2, [pc, #28]	@ (80100ac <udp_bind+0x10c>)
 801008e:	68fb      	ldr	r3, [r7, #12]
 8010090:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8010092:	2300      	movs	r3, #0
}
 8010094:	4618      	mov	r0, r3
 8010096:	3718      	adds	r7, #24
 8010098:	46bd      	mov	sp, r7
 801009a:	bd80      	pop	{r7, pc}
 801009c:	0801693c 	.word	0x0801693c
 80100a0:	08015e20 	.word	0x08015e20
 80100a4:	080160e8 	.word	0x080160e8
 80100a8:	08015e74 	.word	0x08015e74
 80100ac:	20008968 	.word	0x20008968

080100b0 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80100b0:	b580      	push	{r7, lr}
 80100b2:	b086      	sub	sp, #24
 80100b4:	af00      	add	r7, sp, #0
 80100b6:	60f8      	str	r0, [r7, #12]
 80100b8:	60b9      	str	r1, [r7, #8]
 80100ba:	4613      	mov	r3, r2
 80100bc:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 80100be:	68fb      	ldr	r3, [r7, #12]
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d109      	bne.n	80100d8 <udp_connect+0x28>
 80100c4:	4b2c      	ldr	r3, [pc, #176]	@ (8010178 <udp_connect+0xc8>)
 80100c6:	f240 4235 	movw	r2, #1077	@ 0x435
 80100ca:	492c      	ldr	r1, [pc, #176]	@ (801017c <udp_connect+0xcc>)
 80100cc:	482c      	ldr	r0, [pc, #176]	@ (8010180 <udp_connect+0xd0>)
 80100ce:	f002 fdd9 	bl	8012c84 <iprintf>
 80100d2:	f06f 030f 	mvn.w	r3, #15
 80100d6:	e04b      	b.n	8010170 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 80100d8:	68bb      	ldr	r3, [r7, #8]
 80100da:	2b00      	cmp	r3, #0
 80100dc:	d109      	bne.n	80100f2 <udp_connect+0x42>
 80100de:	4b26      	ldr	r3, [pc, #152]	@ (8010178 <udp_connect+0xc8>)
 80100e0:	f240 4236 	movw	r2, #1078	@ 0x436
 80100e4:	4927      	ldr	r1, [pc, #156]	@ (8010184 <udp_connect+0xd4>)
 80100e6:	4826      	ldr	r0, [pc, #152]	@ (8010180 <udp_connect+0xd0>)
 80100e8:	f002 fdcc 	bl	8012c84 <iprintf>
 80100ec:	f06f 030f 	mvn.w	r3, #15
 80100f0:	e03e      	b.n	8010170 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 80100f2:	68fb      	ldr	r3, [r7, #12]
 80100f4:	8a5b      	ldrh	r3, [r3, #18]
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d10f      	bne.n	801011a <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80100fa:	68f9      	ldr	r1, [r7, #12]
 80100fc:	68fb      	ldr	r3, [r7, #12]
 80100fe:	8a5b      	ldrh	r3, [r3, #18]
 8010100:	461a      	mov	r2, r3
 8010102:	68f8      	ldr	r0, [r7, #12]
 8010104:	f7ff ff4c 	bl	800ffa0 <udp_bind>
 8010108:	4603      	mov	r3, r0
 801010a:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 801010c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010110:	2b00      	cmp	r3, #0
 8010112:	d002      	beq.n	801011a <udp_connect+0x6a>
      return err;
 8010114:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010118:	e02a      	b.n	8010170 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801011a:	68bb      	ldr	r3, [r7, #8]
 801011c:	2b00      	cmp	r3, #0
 801011e:	d002      	beq.n	8010126 <udp_connect+0x76>
 8010120:	68bb      	ldr	r3, [r7, #8]
 8010122:	681b      	ldr	r3, [r3, #0]
 8010124:	e000      	b.n	8010128 <udp_connect+0x78>
 8010126:	2300      	movs	r3, #0
 8010128:	68fa      	ldr	r2, [r7, #12]
 801012a:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 801012c:	68fb      	ldr	r3, [r7, #12]
 801012e:	88fa      	ldrh	r2, [r7, #6]
 8010130:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	7c1b      	ldrb	r3, [r3, #16]
 8010136:	f043 0304 	orr.w	r3, r3, #4
 801013a:	b2da      	uxtb	r2, r3
 801013c:	68fb      	ldr	r3, [r7, #12]
 801013e:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010140:	4b11      	ldr	r3, [pc, #68]	@ (8010188 <udp_connect+0xd8>)
 8010142:	681b      	ldr	r3, [r3, #0]
 8010144:	617b      	str	r3, [r7, #20]
 8010146:	e008      	b.n	801015a <udp_connect+0xaa>
    if (pcb == ipcb) {
 8010148:	68fa      	ldr	r2, [r7, #12]
 801014a:	697b      	ldr	r3, [r7, #20]
 801014c:	429a      	cmp	r2, r3
 801014e:	d101      	bne.n	8010154 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8010150:	2300      	movs	r3, #0
 8010152:	e00d      	b.n	8010170 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010154:	697b      	ldr	r3, [r7, #20]
 8010156:	68db      	ldr	r3, [r3, #12]
 8010158:	617b      	str	r3, [r7, #20]
 801015a:	697b      	ldr	r3, [r7, #20]
 801015c:	2b00      	cmp	r3, #0
 801015e:	d1f3      	bne.n	8010148 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8010160:	4b09      	ldr	r3, [pc, #36]	@ (8010188 <udp_connect+0xd8>)
 8010162:	681a      	ldr	r2, [r3, #0]
 8010164:	68fb      	ldr	r3, [r7, #12]
 8010166:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8010168:	4a07      	ldr	r2, [pc, #28]	@ (8010188 <udp_connect+0xd8>)
 801016a:	68fb      	ldr	r3, [r7, #12]
 801016c:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801016e:	2300      	movs	r3, #0
}
 8010170:	4618      	mov	r0, r3
 8010172:	3718      	adds	r7, #24
 8010174:	46bd      	mov	sp, r7
 8010176:	bd80      	pop	{r7, pc}
 8010178:	08015e20 	.word	0x08015e20
 801017c:	08016100 	.word	0x08016100
 8010180:	08015e74 	.word	0x08015e74
 8010184:	0801611c 	.word	0x0801611c
 8010188:	20008968 	.word	0x20008968

0801018c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801018c:	b580      	push	{r7, lr}
 801018e:	b084      	sub	sp, #16
 8010190:	af00      	add	r7, sp, #0
 8010192:	60f8      	str	r0, [r7, #12]
 8010194:	60b9      	str	r1, [r7, #8]
 8010196:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8010198:	68fb      	ldr	r3, [r7, #12]
 801019a:	2b00      	cmp	r3, #0
 801019c:	d107      	bne.n	80101ae <udp_recv+0x22>
 801019e:	4b08      	ldr	r3, [pc, #32]	@ (80101c0 <udp_recv+0x34>)
 80101a0:	f240 428a 	movw	r2, #1162	@ 0x48a
 80101a4:	4907      	ldr	r1, [pc, #28]	@ (80101c4 <udp_recv+0x38>)
 80101a6:	4808      	ldr	r0, [pc, #32]	@ (80101c8 <udp_recv+0x3c>)
 80101a8:	f002 fd6c 	bl	8012c84 <iprintf>
 80101ac:	e005      	b.n	80101ba <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 80101ae:	68fb      	ldr	r3, [r7, #12]
 80101b0:	68ba      	ldr	r2, [r7, #8]
 80101b2:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 80101b4:	68fb      	ldr	r3, [r7, #12]
 80101b6:	687a      	ldr	r2, [r7, #4]
 80101b8:	61da      	str	r2, [r3, #28]
}
 80101ba:	3710      	adds	r7, #16
 80101bc:	46bd      	mov	sp, r7
 80101be:	bd80      	pop	{r7, pc}
 80101c0:	08015e20 	.word	0x08015e20
 80101c4:	08016154 	.word	0x08016154
 80101c8:	08015e74 	.word	0x08015e74

080101cc <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80101cc:	b580      	push	{r7, lr}
 80101ce:	b082      	sub	sp, #8
 80101d0:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80101d2:	2000      	movs	r0, #0
 80101d4:	f7f8 fe80 	bl	8008ed8 <memp_malloc>
 80101d8:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	2b00      	cmp	r3, #0
 80101de:	d007      	beq.n	80101f0 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80101e0:	2220      	movs	r2, #32
 80101e2:	2100      	movs	r1, #0
 80101e4:	6878      	ldr	r0, [r7, #4]
 80101e6:	f002 fdee 	bl	8012dc6 <memset>
    pcb->ttl = UDP_TTL;
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	22ff      	movs	r2, #255	@ 0xff
 80101ee:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80101f0:	687b      	ldr	r3, [r7, #4]
}
 80101f2:	4618      	mov	r0, r3
 80101f4:	3708      	adds	r7, #8
 80101f6:	46bd      	mov	sp, r7
 80101f8:	bd80      	pop	{r7, pc}
	...

080101fc <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80101fc:	b480      	push	{r7}
 80101fe:	b085      	sub	sp, #20
 8010200:	af00      	add	r7, sp, #0
 8010202:	6078      	str	r0, [r7, #4]
 8010204:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	2b00      	cmp	r3, #0
 801020a:	d01e      	beq.n	801024a <udp_netif_ip_addr_changed+0x4e>
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	681b      	ldr	r3, [r3, #0]
 8010210:	2b00      	cmp	r3, #0
 8010212:	d01a      	beq.n	801024a <udp_netif_ip_addr_changed+0x4e>
 8010214:	683b      	ldr	r3, [r7, #0]
 8010216:	2b00      	cmp	r3, #0
 8010218:	d017      	beq.n	801024a <udp_netif_ip_addr_changed+0x4e>
 801021a:	683b      	ldr	r3, [r7, #0]
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	2b00      	cmp	r3, #0
 8010220:	d013      	beq.n	801024a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8010222:	4b0d      	ldr	r3, [pc, #52]	@ (8010258 <udp_netif_ip_addr_changed+0x5c>)
 8010224:	681b      	ldr	r3, [r3, #0]
 8010226:	60fb      	str	r3, [r7, #12]
 8010228:	e00c      	b.n	8010244 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801022a:	68fb      	ldr	r3, [r7, #12]
 801022c:	681a      	ldr	r2, [r3, #0]
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	681b      	ldr	r3, [r3, #0]
 8010232:	429a      	cmp	r2, r3
 8010234:	d103      	bne.n	801023e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8010236:	683b      	ldr	r3, [r7, #0]
 8010238:	681a      	ldr	r2, [r3, #0]
 801023a:	68fb      	ldr	r3, [r7, #12]
 801023c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	68db      	ldr	r3, [r3, #12]
 8010242:	60fb      	str	r3, [r7, #12]
 8010244:	68fb      	ldr	r3, [r7, #12]
 8010246:	2b00      	cmp	r3, #0
 8010248:	d1ef      	bne.n	801022a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801024a:	bf00      	nop
 801024c:	3714      	adds	r7, #20
 801024e:	46bd      	mov	sp, r7
 8010250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010254:	4770      	bx	lr
 8010256:	bf00      	nop
 8010258:	20008968 	.word	0x20008968

0801025c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801025c:	b580      	push	{r7, lr}
 801025e:	b082      	sub	sp, #8
 8010260:	af00      	add	r7, sp, #0
 8010262:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8010264:	4915      	ldr	r1, [pc, #84]	@ (80102bc <etharp_free_entry+0x60>)
 8010266:	687a      	ldr	r2, [r7, #4]
 8010268:	4613      	mov	r3, r2
 801026a:	005b      	lsls	r3, r3, #1
 801026c:	4413      	add	r3, r2
 801026e:	00db      	lsls	r3, r3, #3
 8010270:	440b      	add	r3, r1
 8010272:	681b      	ldr	r3, [r3, #0]
 8010274:	2b00      	cmp	r3, #0
 8010276:	d013      	beq.n	80102a0 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8010278:	4910      	ldr	r1, [pc, #64]	@ (80102bc <etharp_free_entry+0x60>)
 801027a:	687a      	ldr	r2, [r7, #4]
 801027c:	4613      	mov	r3, r2
 801027e:	005b      	lsls	r3, r3, #1
 8010280:	4413      	add	r3, r2
 8010282:	00db      	lsls	r3, r3, #3
 8010284:	440b      	add	r3, r1
 8010286:	681b      	ldr	r3, [r3, #0]
 8010288:	4618      	mov	r0, r3
 801028a:	f7f9 fd0b 	bl	8009ca4 <pbuf_free>
    arp_table[i].q = NULL;
 801028e:	490b      	ldr	r1, [pc, #44]	@ (80102bc <etharp_free_entry+0x60>)
 8010290:	687a      	ldr	r2, [r7, #4]
 8010292:	4613      	mov	r3, r2
 8010294:	005b      	lsls	r3, r3, #1
 8010296:	4413      	add	r3, r2
 8010298:	00db      	lsls	r3, r3, #3
 801029a:	440b      	add	r3, r1
 801029c:	2200      	movs	r2, #0
 801029e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80102a0:	4906      	ldr	r1, [pc, #24]	@ (80102bc <etharp_free_entry+0x60>)
 80102a2:	687a      	ldr	r2, [r7, #4]
 80102a4:	4613      	mov	r3, r2
 80102a6:	005b      	lsls	r3, r3, #1
 80102a8:	4413      	add	r3, r2
 80102aa:	00db      	lsls	r3, r3, #3
 80102ac:	440b      	add	r3, r1
 80102ae:	3314      	adds	r3, #20
 80102b0:	2200      	movs	r2, #0
 80102b2:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80102b4:	bf00      	nop
 80102b6:	3708      	adds	r7, #8
 80102b8:	46bd      	mov	sp, r7
 80102ba:	bd80      	pop	{r7, pc}
 80102bc:	2000896c 	.word	0x2000896c

080102c0 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80102c0:	b580      	push	{r7, lr}
 80102c2:	b082      	sub	sp, #8
 80102c4:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80102c6:	2300      	movs	r3, #0
 80102c8:	607b      	str	r3, [r7, #4]
 80102ca:	e096      	b.n	80103fa <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80102cc:	494f      	ldr	r1, [pc, #316]	@ (801040c <etharp_tmr+0x14c>)
 80102ce:	687a      	ldr	r2, [r7, #4]
 80102d0:	4613      	mov	r3, r2
 80102d2:	005b      	lsls	r3, r3, #1
 80102d4:	4413      	add	r3, r2
 80102d6:	00db      	lsls	r3, r3, #3
 80102d8:	440b      	add	r3, r1
 80102da:	3314      	adds	r3, #20
 80102dc:	781b      	ldrb	r3, [r3, #0]
 80102de:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80102e0:	78fb      	ldrb	r3, [r7, #3]
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	f000 8086 	beq.w	80103f4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80102e8:	4948      	ldr	r1, [pc, #288]	@ (801040c <etharp_tmr+0x14c>)
 80102ea:	687a      	ldr	r2, [r7, #4]
 80102ec:	4613      	mov	r3, r2
 80102ee:	005b      	lsls	r3, r3, #1
 80102f0:	4413      	add	r3, r2
 80102f2:	00db      	lsls	r3, r3, #3
 80102f4:	440b      	add	r3, r1
 80102f6:	3312      	adds	r3, #18
 80102f8:	881b      	ldrh	r3, [r3, #0]
 80102fa:	3301      	adds	r3, #1
 80102fc:	b298      	uxth	r0, r3
 80102fe:	4943      	ldr	r1, [pc, #268]	@ (801040c <etharp_tmr+0x14c>)
 8010300:	687a      	ldr	r2, [r7, #4]
 8010302:	4613      	mov	r3, r2
 8010304:	005b      	lsls	r3, r3, #1
 8010306:	4413      	add	r3, r2
 8010308:	00db      	lsls	r3, r3, #3
 801030a:	440b      	add	r3, r1
 801030c:	3312      	adds	r3, #18
 801030e:	4602      	mov	r2, r0
 8010310:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8010312:	493e      	ldr	r1, [pc, #248]	@ (801040c <etharp_tmr+0x14c>)
 8010314:	687a      	ldr	r2, [r7, #4]
 8010316:	4613      	mov	r3, r2
 8010318:	005b      	lsls	r3, r3, #1
 801031a:	4413      	add	r3, r2
 801031c:	00db      	lsls	r3, r3, #3
 801031e:	440b      	add	r3, r1
 8010320:	3312      	adds	r3, #18
 8010322:	881b      	ldrh	r3, [r3, #0]
 8010324:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8010328:	d215      	bcs.n	8010356 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801032a:	4938      	ldr	r1, [pc, #224]	@ (801040c <etharp_tmr+0x14c>)
 801032c:	687a      	ldr	r2, [r7, #4]
 801032e:	4613      	mov	r3, r2
 8010330:	005b      	lsls	r3, r3, #1
 8010332:	4413      	add	r3, r2
 8010334:	00db      	lsls	r3, r3, #3
 8010336:	440b      	add	r3, r1
 8010338:	3314      	adds	r3, #20
 801033a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801033c:	2b01      	cmp	r3, #1
 801033e:	d10e      	bne.n	801035e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8010340:	4932      	ldr	r1, [pc, #200]	@ (801040c <etharp_tmr+0x14c>)
 8010342:	687a      	ldr	r2, [r7, #4]
 8010344:	4613      	mov	r3, r2
 8010346:	005b      	lsls	r3, r3, #1
 8010348:	4413      	add	r3, r2
 801034a:	00db      	lsls	r3, r3, #3
 801034c:	440b      	add	r3, r1
 801034e:	3312      	adds	r3, #18
 8010350:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8010352:	2b04      	cmp	r3, #4
 8010354:	d903      	bls.n	801035e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8010356:	6878      	ldr	r0, [r7, #4]
 8010358:	f7ff ff80 	bl	801025c <etharp_free_entry>
 801035c:	e04a      	b.n	80103f4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801035e:	492b      	ldr	r1, [pc, #172]	@ (801040c <etharp_tmr+0x14c>)
 8010360:	687a      	ldr	r2, [r7, #4]
 8010362:	4613      	mov	r3, r2
 8010364:	005b      	lsls	r3, r3, #1
 8010366:	4413      	add	r3, r2
 8010368:	00db      	lsls	r3, r3, #3
 801036a:	440b      	add	r3, r1
 801036c:	3314      	adds	r3, #20
 801036e:	781b      	ldrb	r3, [r3, #0]
 8010370:	2b03      	cmp	r3, #3
 8010372:	d10a      	bne.n	801038a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8010374:	4925      	ldr	r1, [pc, #148]	@ (801040c <etharp_tmr+0x14c>)
 8010376:	687a      	ldr	r2, [r7, #4]
 8010378:	4613      	mov	r3, r2
 801037a:	005b      	lsls	r3, r3, #1
 801037c:	4413      	add	r3, r2
 801037e:	00db      	lsls	r3, r3, #3
 8010380:	440b      	add	r3, r1
 8010382:	3314      	adds	r3, #20
 8010384:	2204      	movs	r2, #4
 8010386:	701a      	strb	r2, [r3, #0]
 8010388:	e034      	b.n	80103f4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801038a:	4920      	ldr	r1, [pc, #128]	@ (801040c <etharp_tmr+0x14c>)
 801038c:	687a      	ldr	r2, [r7, #4]
 801038e:	4613      	mov	r3, r2
 8010390:	005b      	lsls	r3, r3, #1
 8010392:	4413      	add	r3, r2
 8010394:	00db      	lsls	r3, r3, #3
 8010396:	440b      	add	r3, r1
 8010398:	3314      	adds	r3, #20
 801039a:	781b      	ldrb	r3, [r3, #0]
 801039c:	2b04      	cmp	r3, #4
 801039e:	d10a      	bne.n	80103b6 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80103a0:	491a      	ldr	r1, [pc, #104]	@ (801040c <etharp_tmr+0x14c>)
 80103a2:	687a      	ldr	r2, [r7, #4]
 80103a4:	4613      	mov	r3, r2
 80103a6:	005b      	lsls	r3, r3, #1
 80103a8:	4413      	add	r3, r2
 80103aa:	00db      	lsls	r3, r3, #3
 80103ac:	440b      	add	r3, r1
 80103ae:	3314      	adds	r3, #20
 80103b0:	2202      	movs	r2, #2
 80103b2:	701a      	strb	r2, [r3, #0]
 80103b4:	e01e      	b.n	80103f4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80103b6:	4915      	ldr	r1, [pc, #84]	@ (801040c <etharp_tmr+0x14c>)
 80103b8:	687a      	ldr	r2, [r7, #4]
 80103ba:	4613      	mov	r3, r2
 80103bc:	005b      	lsls	r3, r3, #1
 80103be:	4413      	add	r3, r2
 80103c0:	00db      	lsls	r3, r3, #3
 80103c2:	440b      	add	r3, r1
 80103c4:	3314      	adds	r3, #20
 80103c6:	781b      	ldrb	r3, [r3, #0]
 80103c8:	2b01      	cmp	r3, #1
 80103ca:	d113      	bne.n	80103f4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80103cc:	490f      	ldr	r1, [pc, #60]	@ (801040c <etharp_tmr+0x14c>)
 80103ce:	687a      	ldr	r2, [r7, #4]
 80103d0:	4613      	mov	r3, r2
 80103d2:	005b      	lsls	r3, r3, #1
 80103d4:	4413      	add	r3, r2
 80103d6:	00db      	lsls	r3, r3, #3
 80103d8:	440b      	add	r3, r1
 80103da:	3308      	adds	r3, #8
 80103dc:	6818      	ldr	r0, [r3, #0]
 80103de:	687a      	ldr	r2, [r7, #4]
 80103e0:	4613      	mov	r3, r2
 80103e2:	005b      	lsls	r3, r3, #1
 80103e4:	4413      	add	r3, r2
 80103e6:	00db      	lsls	r3, r3, #3
 80103e8:	4a08      	ldr	r2, [pc, #32]	@ (801040c <etharp_tmr+0x14c>)
 80103ea:	4413      	add	r3, r2
 80103ec:	3304      	adds	r3, #4
 80103ee:	4619      	mov	r1, r3
 80103f0:	f000 fe6e 	bl	80110d0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	3301      	adds	r3, #1
 80103f8:	607b      	str	r3, [r7, #4]
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	2b09      	cmp	r3, #9
 80103fe:	f77f af65 	ble.w	80102cc <etharp_tmr+0xc>
      }
    }
  }
}
 8010402:	bf00      	nop
 8010404:	bf00      	nop
 8010406:	3708      	adds	r7, #8
 8010408:	46bd      	mov	sp, r7
 801040a:	bd80      	pop	{r7, pc}
 801040c:	2000896c 	.word	0x2000896c

08010410 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8010410:	b580      	push	{r7, lr}
 8010412:	b08a      	sub	sp, #40	@ 0x28
 8010414:	af00      	add	r7, sp, #0
 8010416:	60f8      	str	r0, [r7, #12]
 8010418:	460b      	mov	r3, r1
 801041a:	607a      	str	r2, [r7, #4]
 801041c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801041e:	230a      	movs	r3, #10
 8010420:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8010422:	230a      	movs	r3, #10
 8010424:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8010426:	230a      	movs	r3, #10
 8010428:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 801042a:	2300      	movs	r3, #0
 801042c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801042e:	230a      	movs	r3, #10
 8010430:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8010432:	2300      	movs	r3, #0
 8010434:	83bb      	strh	r3, [r7, #28]
 8010436:	2300      	movs	r3, #0
 8010438:	837b      	strh	r3, [r7, #26]
 801043a:	2300      	movs	r3, #0
 801043c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801043e:	2300      	movs	r3, #0
 8010440:	843b      	strh	r3, [r7, #32]
 8010442:	e0ae      	b.n	80105a2 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8010444:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010448:	49a6      	ldr	r1, [pc, #664]	@ (80106e4 <etharp_find_entry+0x2d4>)
 801044a:	4613      	mov	r3, r2
 801044c:	005b      	lsls	r3, r3, #1
 801044e:	4413      	add	r3, r2
 8010450:	00db      	lsls	r3, r3, #3
 8010452:	440b      	add	r3, r1
 8010454:	3314      	adds	r3, #20
 8010456:	781b      	ldrb	r3, [r3, #0]
 8010458:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801045a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801045e:	2b0a      	cmp	r3, #10
 8010460:	d105      	bne.n	801046e <etharp_find_entry+0x5e>
 8010462:	7dfb      	ldrb	r3, [r7, #23]
 8010464:	2b00      	cmp	r3, #0
 8010466:	d102      	bne.n	801046e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8010468:	8c3b      	ldrh	r3, [r7, #32]
 801046a:	847b      	strh	r3, [r7, #34]	@ 0x22
 801046c:	e095      	b.n	801059a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801046e:	7dfb      	ldrb	r3, [r7, #23]
 8010470:	2b00      	cmp	r3, #0
 8010472:	f000 8092 	beq.w	801059a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8010476:	7dfb      	ldrb	r3, [r7, #23]
 8010478:	2b01      	cmp	r3, #1
 801047a:	d009      	beq.n	8010490 <etharp_find_entry+0x80>
 801047c:	7dfb      	ldrb	r3, [r7, #23]
 801047e:	2b01      	cmp	r3, #1
 8010480:	d806      	bhi.n	8010490 <etharp_find_entry+0x80>
 8010482:	4b99      	ldr	r3, [pc, #612]	@ (80106e8 <etharp_find_entry+0x2d8>)
 8010484:	f240 1223 	movw	r2, #291	@ 0x123
 8010488:	4998      	ldr	r1, [pc, #608]	@ (80106ec <etharp_find_entry+0x2dc>)
 801048a:	4899      	ldr	r0, [pc, #612]	@ (80106f0 <etharp_find_entry+0x2e0>)
 801048c:	f002 fbfa 	bl	8012c84 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8010490:	68fb      	ldr	r3, [r7, #12]
 8010492:	2b00      	cmp	r3, #0
 8010494:	d020      	beq.n	80104d8 <etharp_find_entry+0xc8>
 8010496:	68fb      	ldr	r3, [r7, #12]
 8010498:	6819      	ldr	r1, [r3, #0]
 801049a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801049e:	4891      	ldr	r0, [pc, #580]	@ (80106e4 <etharp_find_entry+0x2d4>)
 80104a0:	4613      	mov	r3, r2
 80104a2:	005b      	lsls	r3, r3, #1
 80104a4:	4413      	add	r3, r2
 80104a6:	00db      	lsls	r3, r3, #3
 80104a8:	4403      	add	r3, r0
 80104aa:	3304      	adds	r3, #4
 80104ac:	681b      	ldr	r3, [r3, #0]
 80104ae:	4299      	cmp	r1, r3
 80104b0:	d112      	bne.n	80104d8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d00c      	beq.n	80104d2 <etharp_find_entry+0xc2>
 80104b8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80104bc:	4989      	ldr	r1, [pc, #548]	@ (80106e4 <etharp_find_entry+0x2d4>)
 80104be:	4613      	mov	r3, r2
 80104c0:	005b      	lsls	r3, r3, #1
 80104c2:	4413      	add	r3, r2
 80104c4:	00db      	lsls	r3, r3, #3
 80104c6:	440b      	add	r3, r1
 80104c8:	3308      	adds	r3, #8
 80104ca:	681b      	ldr	r3, [r3, #0]
 80104cc:	687a      	ldr	r2, [r7, #4]
 80104ce:	429a      	cmp	r2, r3
 80104d0:	d102      	bne.n	80104d8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80104d2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80104d6:	e100      	b.n	80106da <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80104d8:	7dfb      	ldrb	r3, [r7, #23]
 80104da:	2b01      	cmp	r3, #1
 80104dc:	d140      	bne.n	8010560 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80104de:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80104e2:	4980      	ldr	r1, [pc, #512]	@ (80106e4 <etharp_find_entry+0x2d4>)
 80104e4:	4613      	mov	r3, r2
 80104e6:	005b      	lsls	r3, r3, #1
 80104e8:	4413      	add	r3, r2
 80104ea:	00db      	lsls	r3, r3, #3
 80104ec:	440b      	add	r3, r1
 80104ee:	681b      	ldr	r3, [r3, #0]
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d01a      	beq.n	801052a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80104f4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80104f8:	497a      	ldr	r1, [pc, #488]	@ (80106e4 <etharp_find_entry+0x2d4>)
 80104fa:	4613      	mov	r3, r2
 80104fc:	005b      	lsls	r3, r3, #1
 80104fe:	4413      	add	r3, r2
 8010500:	00db      	lsls	r3, r3, #3
 8010502:	440b      	add	r3, r1
 8010504:	3312      	adds	r3, #18
 8010506:	881b      	ldrh	r3, [r3, #0]
 8010508:	8bba      	ldrh	r2, [r7, #28]
 801050a:	429a      	cmp	r2, r3
 801050c:	d845      	bhi.n	801059a <etharp_find_entry+0x18a>
            old_queue = i;
 801050e:	8c3b      	ldrh	r3, [r7, #32]
 8010510:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8010512:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010516:	4973      	ldr	r1, [pc, #460]	@ (80106e4 <etharp_find_entry+0x2d4>)
 8010518:	4613      	mov	r3, r2
 801051a:	005b      	lsls	r3, r3, #1
 801051c:	4413      	add	r3, r2
 801051e:	00db      	lsls	r3, r3, #3
 8010520:	440b      	add	r3, r1
 8010522:	3312      	adds	r3, #18
 8010524:	881b      	ldrh	r3, [r3, #0]
 8010526:	83bb      	strh	r3, [r7, #28]
 8010528:	e037      	b.n	801059a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801052a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801052e:	496d      	ldr	r1, [pc, #436]	@ (80106e4 <etharp_find_entry+0x2d4>)
 8010530:	4613      	mov	r3, r2
 8010532:	005b      	lsls	r3, r3, #1
 8010534:	4413      	add	r3, r2
 8010536:	00db      	lsls	r3, r3, #3
 8010538:	440b      	add	r3, r1
 801053a:	3312      	adds	r3, #18
 801053c:	881b      	ldrh	r3, [r3, #0]
 801053e:	8b7a      	ldrh	r2, [r7, #26]
 8010540:	429a      	cmp	r2, r3
 8010542:	d82a      	bhi.n	801059a <etharp_find_entry+0x18a>
            old_pending = i;
 8010544:	8c3b      	ldrh	r3, [r7, #32]
 8010546:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 8010548:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801054c:	4965      	ldr	r1, [pc, #404]	@ (80106e4 <etharp_find_entry+0x2d4>)
 801054e:	4613      	mov	r3, r2
 8010550:	005b      	lsls	r3, r3, #1
 8010552:	4413      	add	r3, r2
 8010554:	00db      	lsls	r3, r3, #3
 8010556:	440b      	add	r3, r1
 8010558:	3312      	adds	r3, #18
 801055a:	881b      	ldrh	r3, [r3, #0]
 801055c:	837b      	strh	r3, [r7, #26]
 801055e:	e01c      	b.n	801059a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8010560:	7dfb      	ldrb	r3, [r7, #23]
 8010562:	2b01      	cmp	r3, #1
 8010564:	d919      	bls.n	801059a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8010566:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801056a:	495e      	ldr	r1, [pc, #376]	@ (80106e4 <etharp_find_entry+0x2d4>)
 801056c:	4613      	mov	r3, r2
 801056e:	005b      	lsls	r3, r3, #1
 8010570:	4413      	add	r3, r2
 8010572:	00db      	lsls	r3, r3, #3
 8010574:	440b      	add	r3, r1
 8010576:	3312      	adds	r3, #18
 8010578:	881b      	ldrh	r3, [r3, #0]
 801057a:	8b3a      	ldrh	r2, [r7, #24]
 801057c:	429a      	cmp	r2, r3
 801057e:	d80c      	bhi.n	801059a <etharp_find_entry+0x18a>
            old_stable = i;
 8010580:	8c3b      	ldrh	r3, [r7, #32]
 8010582:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 8010584:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010588:	4956      	ldr	r1, [pc, #344]	@ (80106e4 <etharp_find_entry+0x2d4>)
 801058a:	4613      	mov	r3, r2
 801058c:	005b      	lsls	r3, r3, #1
 801058e:	4413      	add	r3, r2
 8010590:	00db      	lsls	r3, r3, #3
 8010592:	440b      	add	r3, r1
 8010594:	3312      	adds	r3, #18
 8010596:	881b      	ldrh	r3, [r3, #0]
 8010598:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801059a:	8c3b      	ldrh	r3, [r7, #32]
 801059c:	3301      	adds	r3, #1
 801059e:	b29b      	uxth	r3, r3
 80105a0:	843b      	strh	r3, [r7, #32]
 80105a2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80105a6:	2b09      	cmp	r3, #9
 80105a8:	f77f af4c 	ble.w	8010444 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80105ac:	7afb      	ldrb	r3, [r7, #11]
 80105ae:	f003 0302 	and.w	r3, r3, #2
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d108      	bne.n	80105c8 <etharp_find_entry+0x1b8>
 80105b6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80105ba:	2b0a      	cmp	r3, #10
 80105bc:	d107      	bne.n	80105ce <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80105be:	7afb      	ldrb	r3, [r7, #11]
 80105c0:	f003 0301 	and.w	r3, r3, #1
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d102      	bne.n	80105ce <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80105c8:	f04f 33ff 	mov.w	r3, #4294967295
 80105cc:	e085      	b.n	80106da <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80105ce:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80105d2:	2b09      	cmp	r3, #9
 80105d4:	dc02      	bgt.n	80105dc <etharp_find_entry+0x1cc>
    i = empty;
 80105d6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80105d8:	843b      	strh	r3, [r7, #32]
 80105da:	e039      	b.n	8010650 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80105dc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80105e0:	2b09      	cmp	r3, #9
 80105e2:	dc14      	bgt.n	801060e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80105e4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80105e6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80105e8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80105ec:	493d      	ldr	r1, [pc, #244]	@ (80106e4 <etharp_find_entry+0x2d4>)
 80105ee:	4613      	mov	r3, r2
 80105f0:	005b      	lsls	r3, r3, #1
 80105f2:	4413      	add	r3, r2
 80105f4:	00db      	lsls	r3, r3, #3
 80105f6:	440b      	add	r3, r1
 80105f8:	681b      	ldr	r3, [r3, #0]
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	d018      	beq.n	8010630 <etharp_find_entry+0x220>
 80105fe:	4b3a      	ldr	r3, [pc, #232]	@ (80106e8 <etharp_find_entry+0x2d8>)
 8010600:	f240 126d 	movw	r2, #365	@ 0x16d
 8010604:	493b      	ldr	r1, [pc, #236]	@ (80106f4 <etharp_find_entry+0x2e4>)
 8010606:	483a      	ldr	r0, [pc, #232]	@ (80106f0 <etharp_find_entry+0x2e0>)
 8010608:	f002 fb3c 	bl	8012c84 <iprintf>
 801060c:	e010      	b.n	8010630 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801060e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8010612:	2b09      	cmp	r3, #9
 8010614:	dc02      	bgt.n	801061c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8010616:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010618:	843b      	strh	r3, [r7, #32]
 801061a:	e009      	b.n	8010630 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801061c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8010620:	2b09      	cmp	r3, #9
 8010622:	dc02      	bgt.n	801062a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8010624:	8bfb      	ldrh	r3, [r7, #30]
 8010626:	843b      	strh	r3, [r7, #32]
 8010628:	e002      	b.n	8010630 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801062a:	f04f 33ff 	mov.w	r3, #4294967295
 801062e:	e054      	b.n	80106da <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8010630:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010634:	2b09      	cmp	r3, #9
 8010636:	dd06      	ble.n	8010646 <etharp_find_entry+0x236>
 8010638:	4b2b      	ldr	r3, [pc, #172]	@ (80106e8 <etharp_find_entry+0x2d8>)
 801063a:	f240 127f 	movw	r2, #383	@ 0x17f
 801063e:	492e      	ldr	r1, [pc, #184]	@ (80106f8 <etharp_find_entry+0x2e8>)
 8010640:	482b      	ldr	r0, [pc, #172]	@ (80106f0 <etharp_find_entry+0x2e0>)
 8010642:	f002 fb1f 	bl	8012c84 <iprintf>
    etharp_free_entry(i);
 8010646:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801064a:	4618      	mov	r0, r3
 801064c:	f7ff fe06 	bl	801025c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8010650:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010654:	2b09      	cmp	r3, #9
 8010656:	dd06      	ble.n	8010666 <etharp_find_entry+0x256>
 8010658:	4b23      	ldr	r3, [pc, #140]	@ (80106e8 <etharp_find_entry+0x2d8>)
 801065a:	f240 1283 	movw	r2, #387	@ 0x183
 801065e:	4926      	ldr	r1, [pc, #152]	@ (80106f8 <etharp_find_entry+0x2e8>)
 8010660:	4823      	ldr	r0, [pc, #140]	@ (80106f0 <etharp_find_entry+0x2e0>)
 8010662:	f002 fb0f 	bl	8012c84 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8010666:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801066a:	491e      	ldr	r1, [pc, #120]	@ (80106e4 <etharp_find_entry+0x2d4>)
 801066c:	4613      	mov	r3, r2
 801066e:	005b      	lsls	r3, r3, #1
 8010670:	4413      	add	r3, r2
 8010672:	00db      	lsls	r3, r3, #3
 8010674:	440b      	add	r3, r1
 8010676:	3314      	adds	r3, #20
 8010678:	781b      	ldrb	r3, [r3, #0]
 801067a:	2b00      	cmp	r3, #0
 801067c:	d006      	beq.n	801068c <etharp_find_entry+0x27c>
 801067e:	4b1a      	ldr	r3, [pc, #104]	@ (80106e8 <etharp_find_entry+0x2d8>)
 8010680:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 8010684:	491d      	ldr	r1, [pc, #116]	@ (80106fc <etharp_find_entry+0x2ec>)
 8010686:	481a      	ldr	r0, [pc, #104]	@ (80106f0 <etharp_find_entry+0x2e0>)
 8010688:	f002 fafc 	bl	8012c84 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801068c:	68fb      	ldr	r3, [r7, #12]
 801068e:	2b00      	cmp	r3, #0
 8010690:	d00b      	beq.n	80106aa <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8010692:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010696:	68fb      	ldr	r3, [r7, #12]
 8010698:	6819      	ldr	r1, [r3, #0]
 801069a:	4812      	ldr	r0, [pc, #72]	@ (80106e4 <etharp_find_entry+0x2d4>)
 801069c:	4613      	mov	r3, r2
 801069e:	005b      	lsls	r3, r3, #1
 80106a0:	4413      	add	r3, r2
 80106a2:	00db      	lsls	r3, r3, #3
 80106a4:	4403      	add	r3, r0
 80106a6:	3304      	adds	r3, #4
 80106a8:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80106aa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80106ae:	490d      	ldr	r1, [pc, #52]	@ (80106e4 <etharp_find_entry+0x2d4>)
 80106b0:	4613      	mov	r3, r2
 80106b2:	005b      	lsls	r3, r3, #1
 80106b4:	4413      	add	r3, r2
 80106b6:	00db      	lsls	r3, r3, #3
 80106b8:	440b      	add	r3, r1
 80106ba:	3312      	adds	r3, #18
 80106bc:	2200      	movs	r2, #0
 80106be:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80106c0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80106c4:	4907      	ldr	r1, [pc, #28]	@ (80106e4 <etharp_find_entry+0x2d4>)
 80106c6:	4613      	mov	r3, r2
 80106c8:	005b      	lsls	r3, r3, #1
 80106ca:	4413      	add	r3, r2
 80106cc:	00db      	lsls	r3, r3, #3
 80106ce:	440b      	add	r3, r1
 80106d0:	3308      	adds	r3, #8
 80106d2:	687a      	ldr	r2, [r7, #4]
 80106d4:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80106d6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80106da:	4618      	mov	r0, r3
 80106dc:	3728      	adds	r7, #40	@ 0x28
 80106de:	46bd      	mov	sp, r7
 80106e0:	bd80      	pop	{r7, pc}
 80106e2:	bf00      	nop
 80106e4:	2000896c 	.word	0x2000896c
 80106e8:	08016184 	.word	0x08016184
 80106ec:	080161bc 	.word	0x080161bc
 80106f0:	080161fc 	.word	0x080161fc
 80106f4:	08016224 	.word	0x08016224
 80106f8:	0801623c 	.word	0x0801623c
 80106fc:	08016250 	.word	0x08016250

08010700 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8010700:	b580      	push	{r7, lr}
 8010702:	b088      	sub	sp, #32
 8010704:	af02      	add	r7, sp, #8
 8010706:	60f8      	str	r0, [r7, #12]
 8010708:	60b9      	str	r1, [r7, #8]
 801070a:	607a      	str	r2, [r7, #4]
 801070c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801070e:	68fb      	ldr	r3, [r7, #12]
 8010710:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8010714:	2b06      	cmp	r3, #6
 8010716:	d006      	beq.n	8010726 <etharp_update_arp_entry+0x26>
 8010718:	4b48      	ldr	r3, [pc, #288]	@ (801083c <etharp_update_arp_entry+0x13c>)
 801071a:	f240 12a9 	movw	r2, #425	@ 0x1a9
 801071e:	4948      	ldr	r1, [pc, #288]	@ (8010840 <etharp_update_arp_entry+0x140>)
 8010720:	4848      	ldr	r0, [pc, #288]	@ (8010844 <etharp_update_arp_entry+0x144>)
 8010722:	f002 faaf 	bl	8012c84 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8010726:	68bb      	ldr	r3, [r7, #8]
 8010728:	2b00      	cmp	r3, #0
 801072a:	d012      	beq.n	8010752 <etharp_update_arp_entry+0x52>
 801072c:	68bb      	ldr	r3, [r7, #8]
 801072e:	681b      	ldr	r3, [r3, #0]
 8010730:	2b00      	cmp	r3, #0
 8010732:	d00e      	beq.n	8010752 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8010734:	68bb      	ldr	r3, [r7, #8]
 8010736:	681b      	ldr	r3, [r3, #0]
 8010738:	68f9      	ldr	r1, [r7, #12]
 801073a:	4618      	mov	r0, r3
 801073c:	f001 f8fe 	bl	801193c <ip4_addr_isbroadcast_u32>
 8010740:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8010742:	2b00      	cmp	r3, #0
 8010744:	d105      	bne.n	8010752 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8010746:	68bb      	ldr	r3, [r7, #8]
 8010748:	681b      	ldr	r3, [r3, #0]
 801074a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801074e:	2be0      	cmp	r3, #224	@ 0xe0
 8010750:	d102      	bne.n	8010758 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8010752:	f06f 030f 	mvn.w	r3, #15
 8010756:	e06c      	b.n	8010832 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8010758:	78fb      	ldrb	r3, [r7, #3]
 801075a:	68fa      	ldr	r2, [r7, #12]
 801075c:	4619      	mov	r1, r3
 801075e:	68b8      	ldr	r0, [r7, #8]
 8010760:	f7ff fe56 	bl	8010410 <etharp_find_entry>
 8010764:	4603      	mov	r3, r0
 8010766:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8010768:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801076c:	2b00      	cmp	r3, #0
 801076e:	da02      	bge.n	8010776 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8010770:	8afb      	ldrh	r3, [r7, #22]
 8010772:	b25b      	sxtb	r3, r3
 8010774:	e05d      	b.n	8010832 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8010776:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801077a:	4933      	ldr	r1, [pc, #204]	@ (8010848 <etharp_update_arp_entry+0x148>)
 801077c:	4613      	mov	r3, r2
 801077e:	005b      	lsls	r3, r3, #1
 8010780:	4413      	add	r3, r2
 8010782:	00db      	lsls	r3, r3, #3
 8010784:	440b      	add	r3, r1
 8010786:	3314      	adds	r3, #20
 8010788:	2202      	movs	r2, #2
 801078a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801078c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010790:	492d      	ldr	r1, [pc, #180]	@ (8010848 <etharp_update_arp_entry+0x148>)
 8010792:	4613      	mov	r3, r2
 8010794:	005b      	lsls	r3, r3, #1
 8010796:	4413      	add	r3, r2
 8010798:	00db      	lsls	r3, r3, #3
 801079a:	440b      	add	r3, r1
 801079c:	3308      	adds	r3, #8
 801079e:	68fa      	ldr	r2, [r7, #12]
 80107a0:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80107a2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80107a6:	4613      	mov	r3, r2
 80107a8:	005b      	lsls	r3, r3, #1
 80107aa:	4413      	add	r3, r2
 80107ac:	00db      	lsls	r3, r3, #3
 80107ae:	3308      	adds	r3, #8
 80107b0:	4a25      	ldr	r2, [pc, #148]	@ (8010848 <etharp_update_arp_entry+0x148>)
 80107b2:	4413      	add	r3, r2
 80107b4:	3304      	adds	r3, #4
 80107b6:	2206      	movs	r2, #6
 80107b8:	6879      	ldr	r1, [r7, #4]
 80107ba:	4618      	mov	r0, r3
 80107bc:	f002 fba1 	bl	8012f02 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80107c0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80107c4:	4920      	ldr	r1, [pc, #128]	@ (8010848 <etharp_update_arp_entry+0x148>)
 80107c6:	4613      	mov	r3, r2
 80107c8:	005b      	lsls	r3, r3, #1
 80107ca:	4413      	add	r3, r2
 80107cc:	00db      	lsls	r3, r3, #3
 80107ce:	440b      	add	r3, r1
 80107d0:	3312      	adds	r3, #18
 80107d2:	2200      	movs	r2, #0
 80107d4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80107d6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80107da:	491b      	ldr	r1, [pc, #108]	@ (8010848 <etharp_update_arp_entry+0x148>)
 80107dc:	4613      	mov	r3, r2
 80107de:	005b      	lsls	r3, r3, #1
 80107e0:	4413      	add	r3, r2
 80107e2:	00db      	lsls	r3, r3, #3
 80107e4:	440b      	add	r3, r1
 80107e6:	681b      	ldr	r3, [r3, #0]
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	d021      	beq.n	8010830 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80107ec:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80107f0:	4915      	ldr	r1, [pc, #84]	@ (8010848 <etharp_update_arp_entry+0x148>)
 80107f2:	4613      	mov	r3, r2
 80107f4:	005b      	lsls	r3, r3, #1
 80107f6:	4413      	add	r3, r2
 80107f8:	00db      	lsls	r3, r3, #3
 80107fa:	440b      	add	r3, r1
 80107fc:	681b      	ldr	r3, [r3, #0]
 80107fe:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8010800:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010804:	4910      	ldr	r1, [pc, #64]	@ (8010848 <etharp_update_arp_entry+0x148>)
 8010806:	4613      	mov	r3, r2
 8010808:	005b      	lsls	r3, r3, #1
 801080a:	4413      	add	r3, r2
 801080c:	00db      	lsls	r3, r3, #3
 801080e:	440b      	add	r3, r1
 8010810:	2200      	movs	r2, #0
 8010812:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8010814:	68fb      	ldr	r3, [r7, #12]
 8010816:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 801081a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801081e:	9300      	str	r3, [sp, #0]
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	6939      	ldr	r1, [r7, #16]
 8010824:	68f8      	ldr	r0, [r7, #12]
 8010826:	f001 ff97 	bl	8012758 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801082a:	6938      	ldr	r0, [r7, #16]
 801082c:	f7f9 fa3a 	bl	8009ca4 <pbuf_free>
  }
  return ERR_OK;
 8010830:	2300      	movs	r3, #0
}
 8010832:	4618      	mov	r0, r3
 8010834:	3718      	adds	r7, #24
 8010836:	46bd      	mov	sp, r7
 8010838:	bd80      	pop	{r7, pc}
 801083a:	bf00      	nop
 801083c:	08016184 	.word	0x08016184
 8010840:	0801627c 	.word	0x0801627c
 8010844:	080161fc 	.word	0x080161fc
 8010848:	2000896c 	.word	0x2000896c

0801084c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801084c:	b580      	push	{r7, lr}
 801084e:	b084      	sub	sp, #16
 8010850:	af00      	add	r7, sp, #0
 8010852:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010854:	2300      	movs	r3, #0
 8010856:	60fb      	str	r3, [r7, #12]
 8010858:	e01e      	b.n	8010898 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801085a:	4913      	ldr	r1, [pc, #76]	@ (80108a8 <etharp_cleanup_netif+0x5c>)
 801085c:	68fa      	ldr	r2, [r7, #12]
 801085e:	4613      	mov	r3, r2
 8010860:	005b      	lsls	r3, r3, #1
 8010862:	4413      	add	r3, r2
 8010864:	00db      	lsls	r3, r3, #3
 8010866:	440b      	add	r3, r1
 8010868:	3314      	adds	r3, #20
 801086a:	781b      	ldrb	r3, [r3, #0]
 801086c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801086e:	7afb      	ldrb	r3, [r7, #11]
 8010870:	2b00      	cmp	r3, #0
 8010872:	d00e      	beq.n	8010892 <etharp_cleanup_netif+0x46>
 8010874:	490c      	ldr	r1, [pc, #48]	@ (80108a8 <etharp_cleanup_netif+0x5c>)
 8010876:	68fa      	ldr	r2, [r7, #12]
 8010878:	4613      	mov	r3, r2
 801087a:	005b      	lsls	r3, r3, #1
 801087c:	4413      	add	r3, r2
 801087e:	00db      	lsls	r3, r3, #3
 8010880:	440b      	add	r3, r1
 8010882:	3308      	adds	r3, #8
 8010884:	681b      	ldr	r3, [r3, #0]
 8010886:	687a      	ldr	r2, [r7, #4]
 8010888:	429a      	cmp	r2, r3
 801088a:	d102      	bne.n	8010892 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801088c:	68f8      	ldr	r0, [r7, #12]
 801088e:	f7ff fce5 	bl	801025c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010892:	68fb      	ldr	r3, [r7, #12]
 8010894:	3301      	adds	r3, #1
 8010896:	60fb      	str	r3, [r7, #12]
 8010898:	68fb      	ldr	r3, [r7, #12]
 801089a:	2b09      	cmp	r3, #9
 801089c:	dddd      	ble.n	801085a <etharp_cleanup_netif+0xe>
    }
  }
}
 801089e:	bf00      	nop
 80108a0:	bf00      	nop
 80108a2:	3710      	adds	r7, #16
 80108a4:	46bd      	mov	sp, r7
 80108a6:	bd80      	pop	{r7, pc}
 80108a8:	2000896c 	.word	0x2000896c

080108ac <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80108ac:	b5b0      	push	{r4, r5, r7, lr}
 80108ae:	b08a      	sub	sp, #40	@ 0x28
 80108b0:	af04      	add	r7, sp, #16
 80108b2:	6078      	str	r0, [r7, #4]
 80108b4:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80108b6:	683b      	ldr	r3, [r7, #0]
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	d107      	bne.n	80108cc <etharp_input+0x20>
 80108bc:	4b3d      	ldr	r3, [pc, #244]	@ (80109b4 <etharp_input+0x108>)
 80108be:	f240 228a 	movw	r2, #650	@ 0x28a
 80108c2:	493d      	ldr	r1, [pc, #244]	@ (80109b8 <etharp_input+0x10c>)
 80108c4:	483d      	ldr	r0, [pc, #244]	@ (80109bc <etharp_input+0x110>)
 80108c6:	f002 f9dd 	bl	8012c84 <iprintf>
 80108ca:	e06f      	b.n	80109ac <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	685b      	ldr	r3, [r3, #4]
 80108d0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80108d2:	693b      	ldr	r3, [r7, #16]
 80108d4:	881b      	ldrh	r3, [r3, #0]
 80108d6:	b29b      	uxth	r3, r3
 80108d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80108dc:	d10c      	bne.n	80108f8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80108de:	693b      	ldr	r3, [r7, #16]
 80108e0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80108e2:	2b06      	cmp	r3, #6
 80108e4:	d108      	bne.n	80108f8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80108e6:	693b      	ldr	r3, [r7, #16]
 80108e8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80108ea:	2b04      	cmp	r3, #4
 80108ec:	d104      	bne.n	80108f8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80108ee:	693b      	ldr	r3, [r7, #16]
 80108f0:	885b      	ldrh	r3, [r3, #2]
 80108f2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80108f4:	2b08      	cmp	r3, #8
 80108f6:	d003      	beq.n	8010900 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80108f8:	6878      	ldr	r0, [r7, #4]
 80108fa:	f7f9 f9d3 	bl	8009ca4 <pbuf_free>
    return;
 80108fe:	e055      	b.n	80109ac <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8010900:	693b      	ldr	r3, [r7, #16]
 8010902:	330e      	adds	r3, #14
 8010904:	681b      	ldr	r3, [r3, #0]
 8010906:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8010908:	693b      	ldr	r3, [r7, #16]
 801090a:	3318      	adds	r3, #24
 801090c:	681b      	ldr	r3, [r3, #0]
 801090e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8010910:	683b      	ldr	r3, [r7, #0]
 8010912:	3304      	adds	r3, #4
 8010914:	681b      	ldr	r3, [r3, #0]
 8010916:	2b00      	cmp	r3, #0
 8010918:	d102      	bne.n	8010920 <etharp_input+0x74>
    for_us = 0;
 801091a:	2300      	movs	r3, #0
 801091c:	75fb      	strb	r3, [r7, #23]
 801091e:	e009      	b.n	8010934 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8010920:	68ba      	ldr	r2, [r7, #8]
 8010922:	683b      	ldr	r3, [r7, #0]
 8010924:	3304      	adds	r3, #4
 8010926:	681b      	ldr	r3, [r3, #0]
 8010928:	429a      	cmp	r2, r3
 801092a:	bf0c      	ite	eq
 801092c:	2301      	moveq	r3, #1
 801092e:	2300      	movne	r3, #0
 8010930:	b2db      	uxtb	r3, r3
 8010932:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8010934:	693b      	ldr	r3, [r7, #16]
 8010936:	f103 0208 	add.w	r2, r3, #8
 801093a:	7dfb      	ldrb	r3, [r7, #23]
 801093c:	2b00      	cmp	r3, #0
 801093e:	d001      	beq.n	8010944 <etharp_input+0x98>
 8010940:	2301      	movs	r3, #1
 8010942:	e000      	b.n	8010946 <etharp_input+0x9a>
 8010944:	2302      	movs	r3, #2
 8010946:	f107 010c 	add.w	r1, r7, #12
 801094a:	6838      	ldr	r0, [r7, #0]
 801094c:	f7ff fed8 	bl	8010700 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8010950:	693b      	ldr	r3, [r7, #16]
 8010952:	88db      	ldrh	r3, [r3, #6]
 8010954:	b29b      	uxth	r3, r3
 8010956:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801095a:	d003      	beq.n	8010964 <etharp_input+0xb8>
 801095c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010960:	d01e      	beq.n	80109a0 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8010962:	e020      	b.n	80109a6 <etharp_input+0xfa>
      if (for_us) {
 8010964:	7dfb      	ldrb	r3, [r7, #23]
 8010966:	2b00      	cmp	r3, #0
 8010968:	d01c      	beq.n	80109a4 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801096a:	683b      	ldr	r3, [r7, #0]
 801096c:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8010970:	693b      	ldr	r3, [r7, #16]
 8010972:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8010976:	683b      	ldr	r3, [r7, #0]
 8010978:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 801097c:	683b      	ldr	r3, [r7, #0]
 801097e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8010980:	693a      	ldr	r2, [r7, #16]
 8010982:	3208      	adds	r2, #8
        etharp_raw(netif,
 8010984:	2102      	movs	r1, #2
 8010986:	9103      	str	r1, [sp, #12]
 8010988:	f107 010c 	add.w	r1, r7, #12
 801098c:	9102      	str	r1, [sp, #8]
 801098e:	9201      	str	r2, [sp, #4]
 8010990:	9300      	str	r3, [sp, #0]
 8010992:	462b      	mov	r3, r5
 8010994:	4622      	mov	r2, r4
 8010996:	4601      	mov	r1, r0
 8010998:	6838      	ldr	r0, [r7, #0]
 801099a:	f000 faeb 	bl	8010f74 <etharp_raw>
      break;
 801099e:	e001      	b.n	80109a4 <etharp_input+0xf8>
      break;
 80109a0:	bf00      	nop
 80109a2:	e000      	b.n	80109a6 <etharp_input+0xfa>
      break;
 80109a4:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80109a6:	6878      	ldr	r0, [r7, #4]
 80109a8:	f7f9 f97c 	bl	8009ca4 <pbuf_free>
}
 80109ac:	3718      	adds	r7, #24
 80109ae:	46bd      	mov	sp, r7
 80109b0:	bdb0      	pop	{r4, r5, r7, pc}
 80109b2:	bf00      	nop
 80109b4:	08016184 	.word	0x08016184
 80109b8:	080162d4 	.word	0x080162d4
 80109bc:	080161fc 	.word	0x080161fc

080109c0 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80109c0:	b580      	push	{r7, lr}
 80109c2:	b086      	sub	sp, #24
 80109c4:	af02      	add	r7, sp, #8
 80109c6:	60f8      	str	r0, [r7, #12]
 80109c8:	60b9      	str	r1, [r7, #8]
 80109ca:	4613      	mov	r3, r2
 80109cc:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80109ce:	79fa      	ldrb	r2, [r7, #7]
 80109d0:	4944      	ldr	r1, [pc, #272]	@ (8010ae4 <etharp_output_to_arp_index+0x124>)
 80109d2:	4613      	mov	r3, r2
 80109d4:	005b      	lsls	r3, r3, #1
 80109d6:	4413      	add	r3, r2
 80109d8:	00db      	lsls	r3, r3, #3
 80109da:	440b      	add	r3, r1
 80109dc:	3314      	adds	r3, #20
 80109de:	781b      	ldrb	r3, [r3, #0]
 80109e0:	2b01      	cmp	r3, #1
 80109e2:	d806      	bhi.n	80109f2 <etharp_output_to_arp_index+0x32>
 80109e4:	4b40      	ldr	r3, [pc, #256]	@ (8010ae8 <etharp_output_to_arp_index+0x128>)
 80109e6:	f240 22ee 	movw	r2, #750	@ 0x2ee
 80109ea:	4940      	ldr	r1, [pc, #256]	@ (8010aec <etharp_output_to_arp_index+0x12c>)
 80109ec:	4840      	ldr	r0, [pc, #256]	@ (8010af0 <etharp_output_to_arp_index+0x130>)
 80109ee:	f002 f949 	bl	8012c84 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80109f2:	79fa      	ldrb	r2, [r7, #7]
 80109f4:	493b      	ldr	r1, [pc, #236]	@ (8010ae4 <etharp_output_to_arp_index+0x124>)
 80109f6:	4613      	mov	r3, r2
 80109f8:	005b      	lsls	r3, r3, #1
 80109fa:	4413      	add	r3, r2
 80109fc:	00db      	lsls	r3, r3, #3
 80109fe:	440b      	add	r3, r1
 8010a00:	3314      	adds	r3, #20
 8010a02:	781b      	ldrb	r3, [r3, #0]
 8010a04:	2b02      	cmp	r3, #2
 8010a06:	d153      	bne.n	8010ab0 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8010a08:	79fa      	ldrb	r2, [r7, #7]
 8010a0a:	4936      	ldr	r1, [pc, #216]	@ (8010ae4 <etharp_output_to_arp_index+0x124>)
 8010a0c:	4613      	mov	r3, r2
 8010a0e:	005b      	lsls	r3, r3, #1
 8010a10:	4413      	add	r3, r2
 8010a12:	00db      	lsls	r3, r3, #3
 8010a14:	440b      	add	r3, r1
 8010a16:	3312      	adds	r3, #18
 8010a18:	881b      	ldrh	r3, [r3, #0]
 8010a1a:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 8010a1e:	d919      	bls.n	8010a54 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8010a20:	79fa      	ldrb	r2, [r7, #7]
 8010a22:	4613      	mov	r3, r2
 8010a24:	005b      	lsls	r3, r3, #1
 8010a26:	4413      	add	r3, r2
 8010a28:	00db      	lsls	r3, r3, #3
 8010a2a:	4a2e      	ldr	r2, [pc, #184]	@ (8010ae4 <etharp_output_to_arp_index+0x124>)
 8010a2c:	4413      	add	r3, r2
 8010a2e:	3304      	adds	r3, #4
 8010a30:	4619      	mov	r1, r3
 8010a32:	68f8      	ldr	r0, [r7, #12]
 8010a34:	f000 fb4c 	bl	80110d0 <etharp_request>
 8010a38:	4603      	mov	r3, r0
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	d138      	bne.n	8010ab0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8010a3e:	79fa      	ldrb	r2, [r7, #7]
 8010a40:	4928      	ldr	r1, [pc, #160]	@ (8010ae4 <etharp_output_to_arp_index+0x124>)
 8010a42:	4613      	mov	r3, r2
 8010a44:	005b      	lsls	r3, r3, #1
 8010a46:	4413      	add	r3, r2
 8010a48:	00db      	lsls	r3, r3, #3
 8010a4a:	440b      	add	r3, r1
 8010a4c:	3314      	adds	r3, #20
 8010a4e:	2203      	movs	r2, #3
 8010a50:	701a      	strb	r2, [r3, #0]
 8010a52:	e02d      	b.n	8010ab0 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8010a54:	79fa      	ldrb	r2, [r7, #7]
 8010a56:	4923      	ldr	r1, [pc, #140]	@ (8010ae4 <etharp_output_to_arp_index+0x124>)
 8010a58:	4613      	mov	r3, r2
 8010a5a:	005b      	lsls	r3, r3, #1
 8010a5c:	4413      	add	r3, r2
 8010a5e:	00db      	lsls	r3, r3, #3
 8010a60:	440b      	add	r3, r1
 8010a62:	3312      	adds	r3, #18
 8010a64:	881b      	ldrh	r3, [r3, #0]
 8010a66:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8010a6a:	d321      	bcc.n	8010ab0 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8010a6c:	79fa      	ldrb	r2, [r7, #7]
 8010a6e:	4613      	mov	r3, r2
 8010a70:	005b      	lsls	r3, r3, #1
 8010a72:	4413      	add	r3, r2
 8010a74:	00db      	lsls	r3, r3, #3
 8010a76:	4a1b      	ldr	r2, [pc, #108]	@ (8010ae4 <etharp_output_to_arp_index+0x124>)
 8010a78:	4413      	add	r3, r2
 8010a7a:	1d19      	adds	r1, r3, #4
 8010a7c:	79fa      	ldrb	r2, [r7, #7]
 8010a7e:	4613      	mov	r3, r2
 8010a80:	005b      	lsls	r3, r3, #1
 8010a82:	4413      	add	r3, r2
 8010a84:	00db      	lsls	r3, r3, #3
 8010a86:	3308      	adds	r3, #8
 8010a88:	4a16      	ldr	r2, [pc, #88]	@ (8010ae4 <etharp_output_to_arp_index+0x124>)
 8010a8a:	4413      	add	r3, r2
 8010a8c:	3304      	adds	r3, #4
 8010a8e:	461a      	mov	r2, r3
 8010a90:	68f8      	ldr	r0, [r7, #12]
 8010a92:	f000 fafb 	bl	801108c <etharp_request_dst>
 8010a96:	4603      	mov	r3, r0
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	d109      	bne.n	8010ab0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8010a9c:	79fa      	ldrb	r2, [r7, #7]
 8010a9e:	4911      	ldr	r1, [pc, #68]	@ (8010ae4 <etharp_output_to_arp_index+0x124>)
 8010aa0:	4613      	mov	r3, r2
 8010aa2:	005b      	lsls	r3, r3, #1
 8010aa4:	4413      	add	r3, r2
 8010aa6:	00db      	lsls	r3, r3, #3
 8010aa8:	440b      	add	r3, r1
 8010aaa:	3314      	adds	r3, #20
 8010aac:	2203      	movs	r2, #3
 8010aae:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8010ab0:	68fb      	ldr	r3, [r7, #12]
 8010ab2:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 8010ab6:	79fa      	ldrb	r2, [r7, #7]
 8010ab8:	4613      	mov	r3, r2
 8010aba:	005b      	lsls	r3, r3, #1
 8010abc:	4413      	add	r3, r2
 8010abe:	00db      	lsls	r3, r3, #3
 8010ac0:	3308      	adds	r3, #8
 8010ac2:	4a08      	ldr	r2, [pc, #32]	@ (8010ae4 <etharp_output_to_arp_index+0x124>)
 8010ac4:	4413      	add	r3, r2
 8010ac6:	3304      	adds	r3, #4
 8010ac8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8010acc:	9200      	str	r2, [sp, #0]
 8010ace:	460a      	mov	r2, r1
 8010ad0:	68b9      	ldr	r1, [r7, #8]
 8010ad2:	68f8      	ldr	r0, [r7, #12]
 8010ad4:	f001 fe40 	bl	8012758 <ethernet_output>
 8010ad8:	4603      	mov	r3, r0
}
 8010ada:	4618      	mov	r0, r3
 8010adc:	3710      	adds	r7, #16
 8010ade:	46bd      	mov	sp, r7
 8010ae0:	bd80      	pop	{r7, pc}
 8010ae2:	bf00      	nop
 8010ae4:	2000896c 	.word	0x2000896c
 8010ae8:	08016184 	.word	0x08016184
 8010aec:	080162f4 	.word	0x080162f4
 8010af0:	080161fc 	.word	0x080161fc

08010af4 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8010af4:	b580      	push	{r7, lr}
 8010af6:	b08a      	sub	sp, #40	@ 0x28
 8010af8:	af02      	add	r7, sp, #8
 8010afa:	60f8      	str	r0, [r7, #12]
 8010afc:	60b9      	str	r1, [r7, #8]
 8010afe:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8010b04:	68fb      	ldr	r3, [r7, #12]
 8010b06:	2b00      	cmp	r3, #0
 8010b08:	d106      	bne.n	8010b18 <etharp_output+0x24>
 8010b0a:	4b73      	ldr	r3, [pc, #460]	@ (8010cd8 <etharp_output+0x1e4>)
 8010b0c:	f240 321e 	movw	r2, #798	@ 0x31e
 8010b10:	4972      	ldr	r1, [pc, #456]	@ (8010cdc <etharp_output+0x1e8>)
 8010b12:	4873      	ldr	r0, [pc, #460]	@ (8010ce0 <etharp_output+0x1ec>)
 8010b14:	f002 f8b6 	bl	8012c84 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8010b18:	68bb      	ldr	r3, [r7, #8]
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	d106      	bne.n	8010b2c <etharp_output+0x38>
 8010b1e:	4b6e      	ldr	r3, [pc, #440]	@ (8010cd8 <etharp_output+0x1e4>)
 8010b20:	f240 321f 	movw	r2, #799	@ 0x31f
 8010b24:	496f      	ldr	r1, [pc, #444]	@ (8010ce4 <etharp_output+0x1f0>)
 8010b26:	486e      	ldr	r0, [pc, #440]	@ (8010ce0 <etharp_output+0x1ec>)
 8010b28:	f002 f8ac 	bl	8012c84 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	d106      	bne.n	8010b40 <etharp_output+0x4c>
 8010b32:	4b69      	ldr	r3, [pc, #420]	@ (8010cd8 <etharp_output+0x1e4>)
 8010b34:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8010b38:	496b      	ldr	r1, [pc, #428]	@ (8010ce8 <etharp_output+0x1f4>)
 8010b3a:	4869      	ldr	r0, [pc, #420]	@ (8010ce0 <etharp_output+0x1ec>)
 8010b3c:	f002 f8a2 	bl	8012c84 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	681b      	ldr	r3, [r3, #0]
 8010b44:	68f9      	ldr	r1, [r7, #12]
 8010b46:	4618      	mov	r0, r3
 8010b48:	f000 fef8 	bl	801193c <ip4_addr_isbroadcast_u32>
 8010b4c:	4603      	mov	r3, r0
 8010b4e:	2b00      	cmp	r3, #0
 8010b50:	d002      	beq.n	8010b58 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8010b52:	4b66      	ldr	r3, [pc, #408]	@ (8010cec <etharp_output+0x1f8>)
 8010b54:	61fb      	str	r3, [r7, #28]
 8010b56:	e0af      	b.n	8010cb8 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	681b      	ldr	r3, [r3, #0]
 8010b5c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8010b60:	2be0      	cmp	r3, #224	@ 0xe0
 8010b62:	d118      	bne.n	8010b96 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8010b64:	2301      	movs	r3, #1
 8010b66:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8010b68:	2300      	movs	r3, #0
 8010b6a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8010b6c:	235e      	movs	r3, #94	@ 0x5e
 8010b6e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	3301      	adds	r3, #1
 8010b74:	781b      	ldrb	r3, [r3, #0]
 8010b76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010b7a:	b2db      	uxtb	r3, r3
 8010b7c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	3302      	adds	r3, #2
 8010b82:	781b      	ldrb	r3, [r3, #0]
 8010b84:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	3303      	adds	r3, #3
 8010b8a:	781b      	ldrb	r3, [r3, #0]
 8010b8c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8010b8e:	f107 0310 	add.w	r3, r7, #16
 8010b92:	61fb      	str	r3, [r7, #28]
 8010b94:	e090      	b.n	8010cb8 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	681a      	ldr	r2, [r3, #0]
 8010b9a:	68fb      	ldr	r3, [r7, #12]
 8010b9c:	3304      	adds	r3, #4
 8010b9e:	681b      	ldr	r3, [r3, #0]
 8010ba0:	405a      	eors	r2, r3
 8010ba2:	68fb      	ldr	r3, [r7, #12]
 8010ba4:	3308      	adds	r3, #8
 8010ba6:	681b      	ldr	r3, [r3, #0]
 8010ba8:	4013      	ands	r3, r2
 8010baa:	2b00      	cmp	r3, #0
 8010bac:	d012      	beq.n	8010bd4 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	681b      	ldr	r3, [r3, #0]
 8010bb2:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8010bb4:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 8010bb8:	4293      	cmp	r3, r2
 8010bba:	d00b      	beq.n	8010bd4 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8010bbc:	68fb      	ldr	r3, [r7, #12]
 8010bbe:	330c      	adds	r3, #12
 8010bc0:	681b      	ldr	r3, [r3, #0]
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	d003      	beq.n	8010bce <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8010bc6:	68fb      	ldr	r3, [r7, #12]
 8010bc8:	330c      	adds	r3, #12
 8010bca:	61bb      	str	r3, [r7, #24]
 8010bcc:	e002      	b.n	8010bd4 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8010bce:	f06f 0303 	mvn.w	r3, #3
 8010bd2:	e07d      	b.n	8010cd0 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8010bd4:	4b46      	ldr	r3, [pc, #280]	@ (8010cf0 <etharp_output+0x1fc>)
 8010bd6:	781b      	ldrb	r3, [r3, #0]
 8010bd8:	4619      	mov	r1, r3
 8010bda:	4a46      	ldr	r2, [pc, #280]	@ (8010cf4 <etharp_output+0x200>)
 8010bdc:	460b      	mov	r3, r1
 8010bde:	005b      	lsls	r3, r3, #1
 8010be0:	440b      	add	r3, r1
 8010be2:	00db      	lsls	r3, r3, #3
 8010be4:	4413      	add	r3, r2
 8010be6:	3314      	adds	r3, #20
 8010be8:	781b      	ldrb	r3, [r3, #0]
 8010bea:	2b01      	cmp	r3, #1
 8010bec:	d925      	bls.n	8010c3a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8010bee:	4b40      	ldr	r3, [pc, #256]	@ (8010cf0 <etharp_output+0x1fc>)
 8010bf0:	781b      	ldrb	r3, [r3, #0]
 8010bf2:	4619      	mov	r1, r3
 8010bf4:	4a3f      	ldr	r2, [pc, #252]	@ (8010cf4 <etharp_output+0x200>)
 8010bf6:	460b      	mov	r3, r1
 8010bf8:	005b      	lsls	r3, r3, #1
 8010bfa:	440b      	add	r3, r1
 8010bfc:	00db      	lsls	r3, r3, #3
 8010bfe:	4413      	add	r3, r2
 8010c00:	3308      	adds	r3, #8
 8010c02:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8010c04:	68fa      	ldr	r2, [r7, #12]
 8010c06:	429a      	cmp	r2, r3
 8010c08:	d117      	bne.n	8010c3a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8010c0a:	69bb      	ldr	r3, [r7, #24]
 8010c0c:	681a      	ldr	r2, [r3, #0]
 8010c0e:	4b38      	ldr	r3, [pc, #224]	@ (8010cf0 <etharp_output+0x1fc>)
 8010c10:	781b      	ldrb	r3, [r3, #0]
 8010c12:	4618      	mov	r0, r3
 8010c14:	4937      	ldr	r1, [pc, #220]	@ (8010cf4 <etharp_output+0x200>)
 8010c16:	4603      	mov	r3, r0
 8010c18:	005b      	lsls	r3, r3, #1
 8010c1a:	4403      	add	r3, r0
 8010c1c:	00db      	lsls	r3, r3, #3
 8010c1e:	440b      	add	r3, r1
 8010c20:	3304      	adds	r3, #4
 8010c22:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8010c24:	429a      	cmp	r2, r3
 8010c26:	d108      	bne.n	8010c3a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8010c28:	4b31      	ldr	r3, [pc, #196]	@ (8010cf0 <etharp_output+0x1fc>)
 8010c2a:	781b      	ldrb	r3, [r3, #0]
 8010c2c:	461a      	mov	r2, r3
 8010c2e:	68b9      	ldr	r1, [r7, #8]
 8010c30:	68f8      	ldr	r0, [r7, #12]
 8010c32:	f7ff fec5 	bl	80109c0 <etharp_output_to_arp_index>
 8010c36:	4603      	mov	r3, r0
 8010c38:	e04a      	b.n	8010cd0 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8010c3a:	2300      	movs	r3, #0
 8010c3c:	75fb      	strb	r3, [r7, #23]
 8010c3e:	e031      	b.n	8010ca4 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8010c40:	7dfa      	ldrb	r2, [r7, #23]
 8010c42:	492c      	ldr	r1, [pc, #176]	@ (8010cf4 <etharp_output+0x200>)
 8010c44:	4613      	mov	r3, r2
 8010c46:	005b      	lsls	r3, r3, #1
 8010c48:	4413      	add	r3, r2
 8010c4a:	00db      	lsls	r3, r3, #3
 8010c4c:	440b      	add	r3, r1
 8010c4e:	3314      	adds	r3, #20
 8010c50:	781b      	ldrb	r3, [r3, #0]
 8010c52:	2b01      	cmp	r3, #1
 8010c54:	d923      	bls.n	8010c9e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8010c56:	7dfa      	ldrb	r2, [r7, #23]
 8010c58:	4926      	ldr	r1, [pc, #152]	@ (8010cf4 <etharp_output+0x200>)
 8010c5a:	4613      	mov	r3, r2
 8010c5c:	005b      	lsls	r3, r3, #1
 8010c5e:	4413      	add	r3, r2
 8010c60:	00db      	lsls	r3, r3, #3
 8010c62:	440b      	add	r3, r1
 8010c64:	3308      	adds	r3, #8
 8010c66:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8010c68:	68fa      	ldr	r2, [r7, #12]
 8010c6a:	429a      	cmp	r2, r3
 8010c6c:	d117      	bne.n	8010c9e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8010c6e:	69bb      	ldr	r3, [r7, #24]
 8010c70:	6819      	ldr	r1, [r3, #0]
 8010c72:	7dfa      	ldrb	r2, [r7, #23]
 8010c74:	481f      	ldr	r0, [pc, #124]	@ (8010cf4 <etharp_output+0x200>)
 8010c76:	4613      	mov	r3, r2
 8010c78:	005b      	lsls	r3, r3, #1
 8010c7a:	4413      	add	r3, r2
 8010c7c:	00db      	lsls	r3, r3, #3
 8010c7e:	4403      	add	r3, r0
 8010c80:	3304      	adds	r3, #4
 8010c82:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8010c84:	4299      	cmp	r1, r3
 8010c86:	d10a      	bne.n	8010c9e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8010c88:	4a19      	ldr	r2, [pc, #100]	@ (8010cf0 <etharp_output+0x1fc>)
 8010c8a:	7dfb      	ldrb	r3, [r7, #23]
 8010c8c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8010c8e:	7dfb      	ldrb	r3, [r7, #23]
 8010c90:	461a      	mov	r2, r3
 8010c92:	68b9      	ldr	r1, [r7, #8]
 8010c94:	68f8      	ldr	r0, [r7, #12]
 8010c96:	f7ff fe93 	bl	80109c0 <etharp_output_to_arp_index>
 8010c9a:	4603      	mov	r3, r0
 8010c9c:	e018      	b.n	8010cd0 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8010c9e:	7dfb      	ldrb	r3, [r7, #23]
 8010ca0:	3301      	adds	r3, #1
 8010ca2:	75fb      	strb	r3, [r7, #23]
 8010ca4:	7dfb      	ldrb	r3, [r7, #23]
 8010ca6:	2b09      	cmp	r3, #9
 8010ca8:	d9ca      	bls.n	8010c40 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8010caa:	68ba      	ldr	r2, [r7, #8]
 8010cac:	69b9      	ldr	r1, [r7, #24]
 8010cae:	68f8      	ldr	r0, [r7, #12]
 8010cb0:	f000 f822 	bl	8010cf8 <etharp_query>
 8010cb4:	4603      	mov	r3, r0
 8010cb6:	e00b      	b.n	8010cd0 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8010cb8:	68fb      	ldr	r3, [r7, #12]
 8010cba:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8010cbe:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8010cc2:	9300      	str	r3, [sp, #0]
 8010cc4:	69fb      	ldr	r3, [r7, #28]
 8010cc6:	68b9      	ldr	r1, [r7, #8]
 8010cc8:	68f8      	ldr	r0, [r7, #12]
 8010cca:	f001 fd45 	bl	8012758 <ethernet_output>
 8010cce:	4603      	mov	r3, r0
}
 8010cd0:	4618      	mov	r0, r3
 8010cd2:	3720      	adds	r7, #32
 8010cd4:	46bd      	mov	sp, r7
 8010cd6:	bd80      	pop	{r7, pc}
 8010cd8:	08016184 	.word	0x08016184
 8010cdc:	080162d4 	.word	0x080162d4
 8010ce0:	080161fc 	.word	0x080161fc
 8010ce4:	08016324 	.word	0x08016324
 8010ce8:	080162c4 	.word	0x080162c4
 8010cec:	08016940 	.word	0x08016940
 8010cf0:	20008a5c 	.word	0x20008a5c
 8010cf4:	2000896c 	.word	0x2000896c

08010cf8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8010cf8:	b580      	push	{r7, lr}
 8010cfa:	b08c      	sub	sp, #48	@ 0x30
 8010cfc:	af02      	add	r7, sp, #8
 8010cfe:	60f8      	str	r0, [r7, #12]
 8010d00:	60b9      	str	r1, [r7, #8]
 8010d02:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8010d04:	68fb      	ldr	r3, [r7, #12]
 8010d06:	3326      	adds	r3, #38	@ 0x26
 8010d08:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8010d0a:	23ff      	movs	r3, #255	@ 0xff
 8010d0c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 8010d10:	2300      	movs	r3, #0
 8010d12:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8010d14:	68bb      	ldr	r3, [r7, #8]
 8010d16:	681b      	ldr	r3, [r3, #0]
 8010d18:	68f9      	ldr	r1, [r7, #12]
 8010d1a:	4618      	mov	r0, r3
 8010d1c:	f000 fe0e 	bl	801193c <ip4_addr_isbroadcast_u32>
 8010d20:	4603      	mov	r3, r0
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	d10c      	bne.n	8010d40 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8010d26:	68bb      	ldr	r3, [r7, #8]
 8010d28:	681b      	ldr	r3, [r3, #0]
 8010d2a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8010d2e:	2be0      	cmp	r3, #224	@ 0xe0
 8010d30:	d006      	beq.n	8010d40 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8010d32:	68bb      	ldr	r3, [r7, #8]
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	d003      	beq.n	8010d40 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8010d38:	68bb      	ldr	r3, [r7, #8]
 8010d3a:	681b      	ldr	r3, [r3, #0]
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d102      	bne.n	8010d46 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8010d40:	f06f 030f 	mvn.w	r3, #15
 8010d44:	e101      	b.n	8010f4a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8010d46:	68fa      	ldr	r2, [r7, #12]
 8010d48:	2101      	movs	r1, #1
 8010d4a:	68b8      	ldr	r0, [r7, #8]
 8010d4c:	f7ff fb60 	bl	8010410 <etharp_find_entry>
 8010d50:	4603      	mov	r3, r0
 8010d52:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8010d54:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	da02      	bge.n	8010d62 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8010d5c:	8a7b      	ldrh	r3, [r7, #18]
 8010d5e:	b25b      	sxtb	r3, r3
 8010d60:	e0f3      	b.n	8010f4a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8010d62:	8a7b      	ldrh	r3, [r7, #18]
 8010d64:	2b7e      	cmp	r3, #126	@ 0x7e
 8010d66:	d906      	bls.n	8010d76 <etharp_query+0x7e>
 8010d68:	4b7a      	ldr	r3, [pc, #488]	@ (8010f54 <etharp_query+0x25c>)
 8010d6a:	f240 32c1 	movw	r2, #961	@ 0x3c1
 8010d6e:	497a      	ldr	r1, [pc, #488]	@ (8010f58 <etharp_query+0x260>)
 8010d70:	487a      	ldr	r0, [pc, #488]	@ (8010f5c <etharp_query+0x264>)
 8010d72:	f001 ff87 	bl	8012c84 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8010d76:	8a7b      	ldrh	r3, [r7, #18]
 8010d78:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8010d7a:	7c7a      	ldrb	r2, [r7, #17]
 8010d7c:	4978      	ldr	r1, [pc, #480]	@ (8010f60 <etharp_query+0x268>)
 8010d7e:	4613      	mov	r3, r2
 8010d80:	005b      	lsls	r3, r3, #1
 8010d82:	4413      	add	r3, r2
 8010d84:	00db      	lsls	r3, r3, #3
 8010d86:	440b      	add	r3, r1
 8010d88:	3314      	adds	r3, #20
 8010d8a:	781b      	ldrb	r3, [r3, #0]
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	d115      	bne.n	8010dbc <etharp_query+0xc4>
    is_new_entry = 1;
 8010d90:	2301      	movs	r3, #1
 8010d92:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8010d94:	7c7a      	ldrb	r2, [r7, #17]
 8010d96:	4972      	ldr	r1, [pc, #456]	@ (8010f60 <etharp_query+0x268>)
 8010d98:	4613      	mov	r3, r2
 8010d9a:	005b      	lsls	r3, r3, #1
 8010d9c:	4413      	add	r3, r2
 8010d9e:	00db      	lsls	r3, r3, #3
 8010da0:	440b      	add	r3, r1
 8010da2:	3314      	adds	r3, #20
 8010da4:	2201      	movs	r2, #1
 8010da6:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8010da8:	7c7a      	ldrb	r2, [r7, #17]
 8010daa:	496d      	ldr	r1, [pc, #436]	@ (8010f60 <etharp_query+0x268>)
 8010dac:	4613      	mov	r3, r2
 8010dae:	005b      	lsls	r3, r3, #1
 8010db0:	4413      	add	r3, r2
 8010db2:	00db      	lsls	r3, r3, #3
 8010db4:	440b      	add	r3, r1
 8010db6:	3308      	adds	r3, #8
 8010db8:	68fa      	ldr	r2, [r7, #12]
 8010dba:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8010dbc:	7c7a      	ldrb	r2, [r7, #17]
 8010dbe:	4968      	ldr	r1, [pc, #416]	@ (8010f60 <etharp_query+0x268>)
 8010dc0:	4613      	mov	r3, r2
 8010dc2:	005b      	lsls	r3, r3, #1
 8010dc4:	4413      	add	r3, r2
 8010dc6:	00db      	lsls	r3, r3, #3
 8010dc8:	440b      	add	r3, r1
 8010dca:	3314      	adds	r3, #20
 8010dcc:	781b      	ldrb	r3, [r3, #0]
 8010dce:	2b01      	cmp	r3, #1
 8010dd0:	d011      	beq.n	8010df6 <etharp_query+0xfe>
 8010dd2:	7c7a      	ldrb	r2, [r7, #17]
 8010dd4:	4962      	ldr	r1, [pc, #392]	@ (8010f60 <etharp_query+0x268>)
 8010dd6:	4613      	mov	r3, r2
 8010dd8:	005b      	lsls	r3, r3, #1
 8010dda:	4413      	add	r3, r2
 8010ddc:	00db      	lsls	r3, r3, #3
 8010dde:	440b      	add	r3, r1
 8010de0:	3314      	adds	r3, #20
 8010de2:	781b      	ldrb	r3, [r3, #0]
 8010de4:	2b01      	cmp	r3, #1
 8010de6:	d806      	bhi.n	8010df6 <etharp_query+0xfe>
 8010de8:	4b5a      	ldr	r3, [pc, #360]	@ (8010f54 <etharp_query+0x25c>)
 8010dea:	f240 32cd 	movw	r2, #973	@ 0x3cd
 8010dee:	495d      	ldr	r1, [pc, #372]	@ (8010f64 <etharp_query+0x26c>)
 8010df0:	485a      	ldr	r0, [pc, #360]	@ (8010f5c <etharp_query+0x264>)
 8010df2:	f001 ff47 	bl	8012c84 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8010df6:	6a3b      	ldr	r3, [r7, #32]
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	d102      	bne.n	8010e02 <etharp_query+0x10a>
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	d10c      	bne.n	8010e1c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8010e02:	68b9      	ldr	r1, [r7, #8]
 8010e04:	68f8      	ldr	r0, [r7, #12]
 8010e06:	f000 f963 	bl	80110d0 <etharp_request>
 8010e0a:	4603      	mov	r3, r0
 8010e0c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	2b00      	cmp	r3, #0
 8010e14:	d102      	bne.n	8010e1c <etharp_query+0x124>
      return result;
 8010e16:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8010e1a:	e096      	b.n	8010f4a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	d106      	bne.n	8010e30 <etharp_query+0x138>
 8010e22:	4b4c      	ldr	r3, [pc, #304]	@ (8010f54 <etharp_query+0x25c>)
 8010e24:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8010e28:	494f      	ldr	r1, [pc, #316]	@ (8010f68 <etharp_query+0x270>)
 8010e2a:	484c      	ldr	r0, [pc, #304]	@ (8010f5c <etharp_query+0x264>)
 8010e2c:	f001 ff2a 	bl	8012c84 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8010e30:	7c7a      	ldrb	r2, [r7, #17]
 8010e32:	494b      	ldr	r1, [pc, #300]	@ (8010f60 <etharp_query+0x268>)
 8010e34:	4613      	mov	r3, r2
 8010e36:	005b      	lsls	r3, r3, #1
 8010e38:	4413      	add	r3, r2
 8010e3a:	00db      	lsls	r3, r3, #3
 8010e3c:	440b      	add	r3, r1
 8010e3e:	3314      	adds	r3, #20
 8010e40:	781b      	ldrb	r3, [r3, #0]
 8010e42:	2b01      	cmp	r3, #1
 8010e44:	d917      	bls.n	8010e76 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8010e46:	4a49      	ldr	r2, [pc, #292]	@ (8010f6c <etharp_query+0x274>)
 8010e48:	7c7b      	ldrb	r3, [r7, #17]
 8010e4a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8010e4c:	7c7a      	ldrb	r2, [r7, #17]
 8010e4e:	4613      	mov	r3, r2
 8010e50:	005b      	lsls	r3, r3, #1
 8010e52:	4413      	add	r3, r2
 8010e54:	00db      	lsls	r3, r3, #3
 8010e56:	3308      	adds	r3, #8
 8010e58:	4a41      	ldr	r2, [pc, #260]	@ (8010f60 <etharp_query+0x268>)
 8010e5a:	4413      	add	r3, r2
 8010e5c:	3304      	adds	r3, #4
 8010e5e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8010e62:	9200      	str	r2, [sp, #0]
 8010e64:	697a      	ldr	r2, [r7, #20]
 8010e66:	6879      	ldr	r1, [r7, #4]
 8010e68:	68f8      	ldr	r0, [r7, #12]
 8010e6a:	f001 fc75 	bl	8012758 <ethernet_output>
 8010e6e:	4603      	mov	r3, r0
 8010e70:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8010e74:	e067      	b.n	8010f46 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8010e76:	7c7a      	ldrb	r2, [r7, #17]
 8010e78:	4939      	ldr	r1, [pc, #228]	@ (8010f60 <etharp_query+0x268>)
 8010e7a:	4613      	mov	r3, r2
 8010e7c:	005b      	lsls	r3, r3, #1
 8010e7e:	4413      	add	r3, r2
 8010e80:	00db      	lsls	r3, r3, #3
 8010e82:	440b      	add	r3, r1
 8010e84:	3314      	adds	r3, #20
 8010e86:	781b      	ldrb	r3, [r3, #0]
 8010e88:	2b01      	cmp	r3, #1
 8010e8a:	d15c      	bne.n	8010f46 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8010e8c:	2300      	movs	r3, #0
 8010e8e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	61fb      	str	r3, [r7, #28]
    while (p) {
 8010e94:	e01c      	b.n	8010ed0 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8010e96:	69fb      	ldr	r3, [r7, #28]
 8010e98:	895a      	ldrh	r2, [r3, #10]
 8010e9a:	69fb      	ldr	r3, [r7, #28]
 8010e9c:	891b      	ldrh	r3, [r3, #8]
 8010e9e:	429a      	cmp	r2, r3
 8010ea0:	d10a      	bne.n	8010eb8 <etharp_query+0x1c0>
 8010ea2:	69fb      	ldr	r3, [r7, #28]
 8010ea4:	681b      	ldr	r3, [r3, #0]
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	d006      	beq.n	8010eb8 <etharp_query+0x1c0>
 8010eaa:	4b2a      	ldr	r3, [pc, #168]	@ (8010f54 <etharp_query+0x25c>)
 8010eac:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8010eb0:	492f      	ldr	r1, [pc, #188]	@ (8010f70 <etharp_query+0x278>)
 8010eb2:	482a      	ldr	r0, [pc, #168]	@ (8010f5c <etharp_query+0x264>)
 8010eb4:	f001 fee6 	bl	8012c84 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8010eb8:	69fb      	ldr	r3, [r7, #28]
 8010eba:	7b1b      	ldrb	r3, [r3, #12]
 8010ebc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	d002      	beq.n	8010eca <etharp_query+0x1d2>
        copy_needed = 1;
 8010ec4:	2301      	movs	r3, #1
 8010ec6:	61bb      	str	r3, [r7, #24]
        break;
 8010ec8:	e005      	b.n	8010ed6 <etharp_query+0x1de>
      }
      p = p->next;
 8010eca:	69fb      	ldr	r3, [r7, #28]
 8010ecc:	681b      	ldr	r3, [r3, #0]
 8010ece:	61fb      	str	r3, [r7, #28]
    while (p) {
 8010ed0:	69fb      	ldr	r3, [r7, #28]
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d1df      	bne.n	8010e96 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8010ed6:	69bb      	ldr	r3, [r7, #24]
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	d007      	beq.n	8010eec <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8010edc:	687a      	ldr	r2, [r7, #4]
 8010ede:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8010ee2:	200e      	movs	r0, #14
 8010ee4:	f7f9 f9dc 	bl	800a2a0 <pbuf_clone>
 8010ee8:	61f8      	str	r0, [r7, #28]
 8010eea:	e004      	b.n	8010ef6 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8010ef0:	69f8      	ldr	r0, [r7, #28]
 8010ef2:	f7f8 ff77 	bl	8009de4 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8010ef6:	69fb      	ldr	r3, [r7, #28]
 8010ef8:	2b00      	cmp	r3, #0
 8010efa:	d021      	beq.n	8010f40 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8010efc:	7c7a      	ldrb	r2, [r7, #17]
 8010efe:	4918      	ldr	r1, [pc, #96]	@ (8010f60 <etharp_query+0x268>)
 8010f00:	4613      	mov	r3, r2
 8010f02:	005b      	lsls	r3, r3, #1
 8010f04:	4413      	add	r3, r2
 8010f06:	00db      	lsls	r3, r3, #3
 8010f08:	440b      	add	r3, r1
 8010f0a:	681b      	ldr	r3, [r3, #0]
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	d00a      	beq.n	8010f26 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8010f10:	7c7a      	ldrb	r2, [r7, #17]
 8010f12:	4913      	ldr	r1, [pc, #76]	@ (8010f60 <etharp_query+0x268>)
 8010f14:	4613      	mov	r3, r2
 8010f16:	005b      	lsls	r3, r3, #1
 8010f18:	4413      	add	r3, r2
 8010f1a:	00db      	lsls	r3, r3, #3
 8010f1c:	440b      	add	r3, r1
 8010f1e:	681b      	ldr	r3, [r3, #0]
 8010f20:	4618      	mov	r0, r3
 8010f22:	f7f8 febf 	bl	8009ca4 <pbuf_free>
      }
      arp_table[i].q = p;
 8010f26:	7c7a      	ldrb	r2, [r7, #17]
 8010f28:	490d      	ldr	r1, [pc, #52]	@ (8010f60 <etharp_query+0x268>)
 8010f2a:	4613      	mov	r3, r2
 8010f2c:	005b      	lsls	r3, r3, #1
 8010f2e:	4413      	add	r3, r2
 8010f30:	00db      	lsls	r3, r3, #3
 8010f32:	440b      	add	r3, r1
 8010f34:	69fa      	ldr	r2, [r7, #28]
 8010f36:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8010f38:	2300      	movs	r3, #0
 8010f3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8010f3e:	e002      	b.n	8010f46 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8010f40:	23ff      	movs	r3, #255	@ 0xff
 8010f42:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 8010f46:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8010f4a:	4618      	mov	r0, r3
 8010f4c:	3728      	adds	r7, #40	@ 0x28
 8010f4e:	46bd      	mov	sp, r7
 8010f50:	bd80      	pop	{r7, pc}
 8010f52:	bf00      	nop
 8010f54:	08016184 	.word	0x08016184
 8010f58:	08016330 	.word	0x08016330
 8010f5c:	080161fc 	.word	0x080161fc
 8010f60:	2000896c 	.word	0x2000896c
 8010f64:	08016340 	.word	0x08016340
 8010f68:	08016324 	.word	0x08016324
 8010f6c:	20008a5c 	.word	0x20008a5c
 8010f70:	08016368 	.word	0x08016368

08010f74 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8010f74:	b580      	push	{r7, lr}
 8010f76:	b08a      	sub	sp, #40	@ 0x28
 8010f78:	af02      	add	r7, sp, #8
 8010f7a:	60f8      	str	r0, [r7, #12]
 8010f7c:	60b9      	str	r1, [r7, #8]
 8010f7e:	607a      	str	r2, [r7, #4]
 8010f80:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8010f82:	2300      	movs	r3, #0
 8010f84:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8010f86:	68fb      	ldr	r3, [r7, #12]
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	d106      	bne.n	8010f9a <etharp_raw+0x26>
 8010f8c:	4b3a      	ldr	r3, [pc, #232]	@ (8011078 <etharp_raw+0x104>)
 8010f8e:	f240 4257 	movw	r2, #1111	@ 0x457
 8010f92:	493a      	ldr	r1, [pc, #232]	@ (801107c <etharp_raw+0x108>)
 8010f94:	483a      	ldr	r0, [pc, #232]	@ (8011080 <etharp_raw+0x10c>)
 8010f96:	f001 fe75 	bl	8012c84 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8010f9a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8010f9e:	211c      	movs	r1, #28
 8010fa0:	200e      	movs	r0, #14
 8010fa2:	f7f8 fb9b 	bl	80096dc <pbuf_alloc>
 8010fa6:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8010fa8:	69bb      	ldr	r3, [r7, #24]
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d102      	bne.n	8010fb4 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8010fae:	f04f 33ff 	mov.w	r3, #4294967295
 8010fb2:	e05d      	b.n	8011070 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8010fb4:	69bb      	ldr	r3, [r7, #24]
 8010fb6:	895b      	ldrh	r3, [r3, #10]
 8010fb8:	2b1b      	cmp	r3, #27
 8010fba:	d806      	bhi.n	8010fca <etharp_raw+0x56>
 8010fbc:	4b2e      	ldr	r3, [pc, #184]	@ (8011078 <etharp_raw+0x104>)
 8010fbe:	f240 4262 	movw	r2, #1122	@ 0x462
 8010fc2:	4930      	ldr	r1, [pc, #192]	@ (8011084 <etharp_raw+0x110>)
 8010fc4:	482e      	ldr	r0, [pc, #184]	@ (8011080 <etharp_raw+0x10c>)
 8010fc6:	f001 fe5d 	bl	8012c84 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8010fca:	69bb      	ldr	r3, [r7, #24]
 8010fcc:	685b      	ldr	r3, [r3, #4]
 8010fce:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8010fd0:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8010fd2:	4618      	mov	r0, r3
 8010fd4:	f7f7 fb08 	bl	80085e8 <lwip_htons>
 8010fd8:	4603      	mov	r3, r0
 8010fda:	461a      	mov	r2, r3
 8010fdc:	697b      	ldr	r3, [r7, #20]
 8010fde:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8010fe0:	68fb      	ldr	r3, [r7, #12]
 8010fe2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8010fe6:	2b06      	cmp	r3, #6
 8010fe8:	d006      	beq.n	8010ff8 <etharp_raw+0x84>
 8010fea:	4b23      	ldr	r3, [pc, #140]	@ (8011078 <etharp_raw+0x104>)
 8010fec:	f240 4269 	movw	r2, #1129	@ 0x469
 8010ff0:	4925      	ldr	r1, [pc, #148]	@ (8011088 <etharp_raw+0x114>)
 8010ff2:	4823      	ldr	r0, [pc, #140]	@ (8011080 <etharp_raw+0x10c>)
 8010ff4:	f001 fe46 	bl	8012c84 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8010ff8:	697b      	ldr	r3, [r7, #20]
 8010ffa:	3308      	adds	r3, #8
 8010ffc:	2206      	movs	r2, #6
 8010ffe:	6839      	ldr	r1, [r7, #0]
 8011000:	4618      	mov	r0, r3
 8011002:	f001 ff7e 	bl	8012f02 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8011006:	697b      	ldr	r3, [r7, #20]
 8011008:	3312      	adds	r3, #18
 801100a:	2206      	movs	r2, #6
 801100c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801100e:	4618      	mov	r0, r3
 8011010:	f001 ff77 	bl	8012f02 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8011014:	697b      	ldr	r3, [r7, #20]
 8011016:	330e      	adds	r3, #14
 8011018:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801101a:	6812      	ldr	r2, [r2, #0]
 801101c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801101e:	697b      	ldr	r3, [r7, #20]
 8011020:	3318      	adds	r3, #24
 8011022:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011024:	6812      	ldr	r2, [r2, #0]
 8011026:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8011028:	697b      	ldr	r3, [r7, #20]
 801102a:	2200      	movs	r2, #0
 801102c:	701a      	strb	r2, [r3, #0]
 801102e:	2200      	movs	r2, #0
 8011030:	f042 0201 	orr.w	r2, r2, #1
 8011034:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8011036:	697b      	ldr	r3, [r7, #20]
 8011038:	2200      	movs	r2, #0
 801103a:	f042 0208 	orr.w	r2, r2, #8
 801103e:	709a      	strb	r2, [r3, #2]
 8011040:	2200      	movs	r2, #0
 8011042:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8011044:	697b      	ldr	r3, [r7, #20]
 8011046:	2206      	movs	r2, #6
 8011048:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801104a:	697b      	ldr	r3, [r7, #20]
 801104c:	2204      	movs	r2, #4
 801104e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8011050:	f640 0306 	movw	r3, #2054	@ 0x806
 8011054:	9300      	str	r3, [sp, #0]
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	68ba      	ldr	r2, [r7, #8]
 801105a:	69b9      	ldr	r1, [r7, #24]
 801105c:	68f8      	ldr	r0, [r7, #12]
 801105e:	f001 fb7b 	bl	8012758 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8011062:	69b8      	ldr	r0, [r7, #24]
 8011064:	f7f8 fe1e 	bl	8009ca4 <pbuf_free>
  p = NULL;
 8011068:	2300      	movs	r3, #0
 801106a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801106c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8011070:	4618      	mov	r0, r3
 8011072:	3720      	adds	r7, #32
 8011074:	46bd      	mov	sp, r7
 8011076:	bd80      	pop	{r7, pc}
 8011078:	08016184 	.word	0x08016184
 801107c:	080162d4 	.word	0x080162d4
 8011080:	080161fc 	.word	0x080161fc
 8011084:	08016384 	.word	0x08016384
 8011088:	080163b8 	.word	0x080163b8

0801108c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801108c:	b580      	push	{r7, lr}
 801108e:	b088      	sub	sp, #32
 8011090:	af04      	add	r7, sp, #16
 8011092:	60f8      	str	r0, [r7, #12]
 8011094:	60b9      	str	r1, [r7, #8]
 8011096:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8011098:	68fb      	ldr	r3, [r7, #12]
 801109a:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801109e:	68fb      	ldr	r3, [r7, #12]
 80110a0:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 80110a4:	68fb      	ldr	r3, [r7, #12]
 80110a6:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80110a8:	2201      	movs	r2, #1
 80110aa:	9203      	str	r2, [sp, #12]
 80110ac:	68ba      	ldr	r2, [r7, #8]
 80110ae:	9202      	str	r2, [sp, #8]
 80110b0:	4a06      	ldr	r2, [pc, #24]	@ (80110cc <etharp_request_dst+0x40>)
 80110b2:	9201      	str	r2, [sp, #4]
 80110b4:	9300      	str	r3, [sp, #0]
 80110b6:	4603      	mov	r3, r0
 80110b8:	687a      	ldr	r2, [r7, #4]
 80110ba:	68f8      	ldr	r0, [r7, #12]
 80110bc:	f7ff ff5a 	bl	8010f74 <etharp_raw>
 80110c0:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80110c2:	4618      	mov	r0, r3
 80110c4:	3710      	adds	r7, #16
 80110c6:	46bd      	mov	sp, r7
 80110c8:	bd80      	pop	{r7, pc}
 80110ca:	bf00      	nop
 80110cc:	08016948 	.word	0x08016948

080110d0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80110d0:	b580      	push	{r7, lr}
 80110d2:	b082      	sub	sp, #8
 80110d4:	af00      	add	r7, sp, #0
 80110d6:	6078      	str	r0, [r7, #4]
 80110d8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80110da:	4a05      	ldr	r2, [pc, #20]	@ (80110f0 <etharp_request+0x20>)
 80110dc:	6839      	ldr	r1, [r7, #0]
 80110de:	6878      	ldr	r0, [r7, #4]
 80110e0:	f7ff ffd4 	bl	801108c <etharp_request_dst>
 80110e4:	4603      	mov	r3, r0
}
 80110e6:	4618      	mov	r0, r3
 80110e8:	3708      	adds	r7, #8
 80110ea:	46bd      	mov	sp, r7
 80110ec:	bd80      	pop	{r7, pc}
 80110ee:	bf00      	nop
 80110f0:	08016940 	.word	0x08016940

080110f4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80110f4:	b580      	push	{r7, lr}
 80110f6:	b08e      	sub	sp, #56	@ 0x38
 80110f8:	af04      	add	r7, sp, #16
 80110fa:	6078      	str	r0, [r7, #4]
 80110fc:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80110fe:	4b79      	ldr	r3, [pc, #484]	@ (80112e4 <icmp_input+0x1f0>)
 8011100:	689b      	ldr	r3, [r3, #8]
 8011102:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8011104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011106:	781b      	ldrb	r3, [r3, #0]
 8011108:	f003 030f 	and.w	r3, r3, #15
 801110c:	b2db      	uxtb	r3, r3
 801110e:	009b      	lsls	r3, r3, #2
 8011110:	b2db      	uxtb	r3, r3
 8011112:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 8011114:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011116:	2b13      	cmp	r3, #19
 8011118:	f240 80cd 	bls.w	80112b6 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	895b      	ldrh	r3, [r3, #10]
 8011120:	2b03      	cmp	r3, #3
 8011122:	f240 80ca 	bls.w	80112ba <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	685b      	ldr	r3, [r3, #4]
 801112a:	781b      	ldrb	r3, [r3, #0]
 801112c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8011130:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8011134:	2b00      	cmp	r3, #0
 8011136:	f000 80b7 	beq.w	80112a8 <icmp_input+0x1b4>
 801113a:	2b08      	cmp	r3, #8
 801113c:	f040 80b7 	bne.w	80112ae <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8011140:	4b69      	ldr	r3, [pc, #420]	@ (80112e8 <icmp_input+0x1f4>)
 8011142:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011144:	4b67      	ldr	r3, [pc, #412]	@ (80112e4 <icmp_input+0x1f0>)
 8011146:	695b      	ldr	r3, [r3, #20]
 8011148:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801114c:	2be0      	cmp	r3, #224	@ 0xe0
 801114e:	f000 80bb 	beq.w	80112c8 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8011152:	4b64      	ldr	r3, [pc, #400]	@ (80112e4 <icmp_input+0x1f0>)
 8011154:	695b      	ldr	r3, [r3, #20]
 8011156:	4a63      	ldr	r2, [pc, #396]	@ (80112e4 <icmp_input+0x1f0>)
 8011158:	6812      	ldr	r2, [r2, #0]
 801115a:	4611      	mov	r1, r2
 801115c:	4618      	mov	r0, r3
 801115e:	f000 fbed 	bl	801193c <ip4_addr_isbroadcast_u32>
 8011162:	4603      	mov	r3, r0
 8011164:	2b00      	cmp	r3, #0
 8011166:	f040 80b1 	bne.w	80112cc <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	891b      	ldrh	r3, [r3, #8]
 801116e:	2b07      	cmp	r3, #7
 8011170:	f240 80a5 	bls.w	80112be <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8011174:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011176:	330e      	adds	r3, #14
 8011178:	4619      	mov	r1, r3
 801117a:	6878      	ldr	r0, [r7, #4]
 801117c:	f7f8 fcfc 	bl	8009b78 <pbuf_add_header>
 8011180:	4603      	mov	r3, r0
 8011182:	2b00      	cmp	r3, #0
 8011184:	d04b      	beq.n	801121e <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	891a      	ldrh	r2, [r3, #8]
 801118a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801118c:	4413      	add	r3, r2
 801118e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	891b      	ldrh	r3, [r3, #8]
 8011194:	8b7a      	ldrh	r2, [r7, #26]
 8011196:	429a      	cmp	r2, r3
 8011198:	f0c0 809a 	bcc.w	80112d0 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801119c:	8b7b      	ldrh	r3, [r7, #26]
 801119e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80111a2:	4619      	mov	r1, r3
 80111a4:	200e      	movs	r0, #14
 80111a6:	f7f8 fa99 	bl	80096dc <pbuf_alloc>
 80111aa:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80111ac:	697b      	ldr	r3, [r7, #20]
 80111ae:	2b00      	cmp	r3, #0
 80111b0:	f000 8090 	beq.w	80112d4 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80111b4:	697b      	ldr	r3, [r7, #20]
 80111b6:	895b      	ldrh	r3, [r3, #10]
 80111b8:	461a      	mov	r2, r3
 80111ba:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80111bc:	3308      	adds	r3, #8
 80111be:	429a      	cmp	r2, r3
 80111c0:	d203      	bcs.n	80111ca <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80111c2:	6978      	ldr	r0, [r7, #20]
 80111c4:	f7f8 fd6e 	bl	8009ca4 <pbuf_free>
          goto icmperr;
 80111c8:	e085      	b.n	80112d6 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80111ca:	697b      	ldr	r3, [r7, #20]
 80111cc:	685b      	ldr	r3, [r3, #4]
 80111ce:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80111d0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80111d2:	4618      	mov	r0, r3
 80111d4:	f001 fe95 	bl	8012f02 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80111d8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80111da:	4619      	mov	r1, r3
 80111dc:	6978      	ldr	r0, [r7, #20]
 80111de:	f7f8 fcdb 	bl	8009b98 <pbuf_remove_header>
 80111e2:	4603      	mov	r3, r0
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d009      	beq.n	80111fc <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80111e8:	4b40      	ldr	r3, [pc, #256]	@ (80112ec <icmp_input+0x1f8>)
 80111ea:	22b6      	movs	r2, #182	@ 0xb6
 80111ec:	4940      	ldr	r1, [pc, #256]	@ (80112f0 <icmp_input+0x1fc>)
 80111ee:	4841      	ldr	r0, [pc, #260]	@ (80112f4 <icmp_input+0x200>)
 80111f0:	f001 fd48 	bl	8012c84 <iprintf>
          pbuf_free(r);
 80111f4:	6978      	ldr	r0, [r7, #20]
 80111f6:	f7f8 fd55 	bl	8009ca4 <pbuf_free>
          goto icmperr;
 80111fa:	e06c      	b.n	80112d6 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80111fc:	6879      	ldr	r1, [r7, #4]
 80111fe:	6978      	ldr	r0, [r7, #20]
 8011200:	f7f8 fe78 	bl	8009ef4 <pbuf_copy>
 8011204:	4603      	mov	r3, r0
 8011206:	2b00      	cmp	r3, #0
 8011208:	d003      	beq.n	8011212 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801120a:	6978      	ldr	r0, [r7, #20]
 801120c:	f7f8 fd4a 	bl	8009ca4 <pbuf_free>
          goto icmperr;
 8011210:	e061      	b.n	80112d6 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8011212:	6878      	ldr	r0, [r7, #4]
 8011214:	f7f8 fd46 	bl	8009ca4 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8011218:	697b      	ldr	r3, [r7, #20]
 801121a:	607b      	str	r3, [r7, #4]
 801121c:	e00f      	b.n	801123e <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801121e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011220:	330e      	adds	r3, #14
 8011222:	4619      	mov	r1, r3
 8011224:	6878      	ldr	r0, [r7, #4]
 8011226:	f7f8 fcb7 	bl	8009b98 <pbuf_remove_header>
 801122a:	4603      	mov	r3, r0
 801122c:	2b00      	cmp	r3, #0
 801122e:	d006      	beq.n	801123e <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8011230:	4b2e      	ldr	r3, [pc, #184]	@ (80112ec <icmp_input+0x1f8>)
 8011232:	22c7      	movs	r2, #199	@ 0xc7
 8011234:	4930      	ldr	r1, [pc, #192]	@ (80112f8 <icmp_input+0x204>)
 8011236:	482f      	ldr	r0, [pc, #188]	@ (80112f4 <icmp_input+0x200>)
 8011238:	f001 fd24 	bl	8012c84 <iprintf>
          goto icmperr;
 801123c:	e04b      	b.n	80112d6 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	685b      	ldr	r3, [r3, #4]
 8011242:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8011244:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011246:	4619      	mov	r1, r3
 8011248:	6878      	ldr	r0, [r7, #4]
 801124a:	f7f8 fc95 	bl	8009b78 <pbuf_add_header>
 801124e:	4603      	mov	r3, r0
 8011250:	2b00      	cmp	r3, #0
 8011252:	d12b      	bne.n	80112ac <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	685b      	ldr	r3, [r3, #4]
 8011258:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801125a:	69fb      	ldr	r3, [r7, #28]
 801125c:	681a      	ldr	r2, [r3, #0]
 801125e:	68fb      	ldr	r3, [r7, #12]
 8011260:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8011262:	4b20      	ldr	r3, [pc, #128]	@ (80112e4 <icmp_input+0x1f0>)
 8011264:	691a      	ldr	r2, [r3, #16]
 8011266:	68fb      	ldr	r3, [r7, #12]
 8011268:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801126a:	693b      	ldr	r3, [r7, #16]
 801126c:	2200      	movs	r2, #0
 801126e:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8011270:	693b      	ldr	r3, [r7, #16]
 8011272:	2200      	movs	r2, #0
 8011274:	709a      	strb	r2, [r3, #2]
 8011276:	2200      	movs	r2, #0
 8011278:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801127a:	68fb      	ldr	r3, [r7, #12]
 801127c:	22ff      	movs	r2, #255	@ 0xff
 801127e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8011280:	68fb      	ldr	r3, [r7, #12]
 8011282:	2200      	movs	r2, #0
 8011284:	729a      	strb	r2, [r3, #10]
 8011286:	2200      	movs	r2, #0
 8011288:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801128a:	683b      	ldr	r3, [r7, #0]
 801128c:	9302      	str	r3, [sp, #8]
 801128e:	2301      	movs	r3, #1
 8011290:	9301      	str	r3, [sp, #4]
 8011292:	2300      	movs	r3, #0
 8011294:	9300      	str	r3, [sp, #0]
 8011296:	23ff      	movs	r3, #255	@ 0xff
 8011298:	2200      	movs	r2, #0
 801129a:	69f9      	ldr	r1, [r7, #28]
 801129c:	6878      	ldr	r0, [r7, #4]
 801129e:	f000 fa75 	bl	801178c <ip4_output_if>
 80112a2:	4603      	mov	r3, r0
 80112a4:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80112a6:	e001      	b.n	80112ac <icmp_input+0x1b8>
      break;
 80112a8:	bf00      	nop
 80112aa:	e000      	b.n	80112ae <icmp_input+0x1ba>
      break;
 80112ac:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80112ae:	6878      	ldr	r0, [r7, #4]
 80112b0:	f7f8 fcf8 	bl	8009ca4 <pbuf_free>
  return;
 80112b4:	e013      	b.n	80112de <icmp_input+0x1ea>
    goto lenerr;
 80112b6:	bf00      	nop
 80112b8:	e002      	b.n	80112c0 <icmp_input+0x1cc>
    goto lenerr;
 80112ba:	bf00      	nop
 80112bc:	e000      	b.n	80112c0 <icmp_input+0x1cc>
        goto lenerr;
 80112be:	bf00      	nop
lenerr:
  pbuf_free(p);
 80112c0:	6878      	ldr	r0, [r7, #4]
 80112c2:	f7f8 fcef 	bl	8009ca4 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80112c6:	e00a      	b.n	80112de <icmp_input+0x1ea>
        goto icmperr;
 80112c8:	bf00      	nop
 80112ca:	e004      	b.n	80112d6 <icmp_input+0x1e2>
        goto icmperr;
 80112cc:	bf00      	nop
 80112ce:	e002      	b.n	80112d6 <icmp_input+0x1e2>
          goto icmperr;
 80112d0:	bf00      	nop
 80112d2:	e000      	b.n	80112d6 <icmp_input+0x1e2>
          goto icmperr;
 80112d4:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80112d6:	6878      	ldr	r0, [r7, #4]
 80112d8:	f7f8 fce4 	bl	8009ca4 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80112dc:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80112de:	3728      	adds	r7, #40	@ 0x28
 80112e0:	46bd      	mov	sp, r7
 80112e2:	bd80      	pop	{r7, pc}
 80112e4:	200055dc 	.word	0x200055dc
 80112e8:	200055f0 	.word	0x200055f0
 80112ec:	080163fc 	.word	0x080163fc
 80112f0:	08016434 	.word	0x08016434
 80112f4:	0801646c 	.word	0x0801646c
 80112f8:	08016494 	.word	0x08016494

080112fc <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80112fc:	b580      	push	{r7, lr}
 80112fe:	b082      	sub	sp, #8
 8011300:	af00      	add	r7, sp, #0
 8011302:	6078      	str	r0, [r7, #4]
 8011304:	460b      	mov	r3, r1
 8011306:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8011308:	78fb      	ldrb	r3, [r7, #3]
 801130a:	461a      	mov	r2, r3
 801130c:	2103      	movs	r1, #3
 801130e:	6878      	ldr	r0, [r7, #4]
 8011310:	f000 f814 	bl	801133c <icmp_send_response>
}
 8011314:	bf00      	nop
 8011316:	3708      	adds	r7, #8
 8011318:	46bd      	mov	sp, r7
 801131a:	bd80      	pop	{r7, pc}

0801131c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801131c:	b580      	push	{r7, lr}
 801131e:	b082      	sub	sp, #8
 8011320:	af00      	add	r7, sp, #0
 8011322:	6078      	str	r0, [r7, #4]
 8011324:	460b      	mov	r3, r1
 8011326:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8011328:	78fb      	ldrb	r3, [r7, #3]
 801132a:	461a      	mov	r2, r3
 801132c:	210b      	movs	r1, #11
 801132e:	6878      	ldr	r0, [r7, #4]
 8011330:	f000 f804 	bl	801133c <icmp_send_response>
}
 8011334:	bf00      	nop
 8011336:	3708      	adds	r7, #8
 8011338:	46bd      	mov	sp, r7
 801133a:	bd80      	pop	{r7, pc}

0801133c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801133c:	b580      	push	{r7, lr}
 801133e:	b08c      	sub	sp, #48	@ 0x30
 8011340:	af04      	add	r7, sp, #16
 8011342:	6078      	str	r0, [r7, #4]
 8011344:	460b      	mov	r3, r1
 8011346:	70fb      	strb	r3, [r7, #3]
 8011348:	4613      	mov	r3, r2
 801134a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801134c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8011350:	2124      	movs	r1, #36	@ 0x24
 8011352:	2022      	movs	r0, #34	@ 0x22
 8011354:	f7f8 f9c2 	bl	80096dc <pbuf_alloc>
 8011358:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801135a:	69fb      	ldr	r3, [r7, #28]
 801135c:	2b00      	cmp	r3, #0
 801135e:	d04c      	beq.n	80113fa <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8011360:	69fb      	ldr	r3, [r7, #28]
 8011362:	895b      	ldrh	r3, [r3, #10]
 8011364:	2b23      	cmp	r3, #35	@ 0x23
 8011366:	d806      	bhi.n	8011376 <icmp_send_response+0x3a>
 8011368:	4b26      	ldr	r3, [pc, #152]	@ (8011404 <icmp_send_response+0xc8>)
 801136a:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 801136e:	4926      	ldr	r1, [pc, #152]	@ (8011408 <icmp_send_response+0xcc>)
 8011370:	4826      	ldr	r0, [pc, #152]	@ (801140c <icmp_send_response+0xd0>)
 8011372:	f001 fc87 	bl	8012c84 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	685b      	ldr	r3, [r3, #4]
 801137a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801137c:	69fb      	ldr	r3, [r7, #28]
 801137e:	685b      	ldr	r3, [r3, #4]
 8011380:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8011382:	697b      	ldr	r3, [r7, #20]
 8011384:	78fa      	ldrb	r2, [r7, #3]
 8011386:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8011388:	697b      	ldr	r3, [r7, #20]
 801138a:	78ba      	ldrb	r2, [r7, #2]
 801138c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801138e:	697b      	ldr	r3, [r7, #20]
 8011390:	2200      	movs	r2, #0
 8011392:	711a      	strb	r2, [r3, #4]
 8011394:	2200      	movs	r2, #0
 8011396:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8011398:	697b      	ldr	r3, [r7, #20]
 801139a:	2200      	movs	r2, #0
 801139c:	719a      	strb	r2, [r3, #6]
 801139e:	2200      	movs	r2, #0
 80113a0:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80113a2:	69fb      	ldr	r3, [r7, #28]
 80113a4:	685b      	ldr	r3, [r3, #4]
 80113a6:	f103 0008 	add.w	r0, r3, #8
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	685b      	ldr	r3, [r3, #4]
 80113ae:	221c      	movs	r2, #28
 80113b0:	4619      	mov	r1, r3
 80113b2:	f001 fda6 	bl	8012f02 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80113b6:	69bb      	ldr	r3, [r7, #24]
 80113b8:	68db      	ldr	r3, [r3, #12]
 80113ba:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80113bc:	f107 030c 	add.w	r3, r7, #12
 80113c0:	4618      	mov	r0, r3
 80113c2:	f000 f825 	bl	8011410 <ip4_route>
 80113c6:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80113c8:	693b      	ldr	r3, [r7, #16]
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	d011      	beq.n	80113f2 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80113ce:	697b      	ldr	r3, [r7, #20]
 80113d0:	2200      	movs	r2, #0
 80113d2:	709a      	strb	r2, [r3, #2]
 80113d4:	2200      	movs	r2, #0
 80113d6:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80113d8:	f107 020c 	add.w	r2, r7, #12
 80113dc:	693b      	ldr	r3, [r7, #16]
 80113de:	9302      	str	r3, [sp, #8]
 80113e0:	2301      	movs	r3, #1
 80113e2:	9301      	str	r3, [sp, #4]
 80113e4:	2300      	movs	r3, #0
 80113e6:	9300      	str	r3, [sp, #0]
 80113e8:	23ff      	movs	r3, #255	@ 0xff
 80113ea:	2100      	movs	r1, #0
 80113ec:	69f8      	ldr	r0, [r7, #28]
 80113ee:	f000 f9cd 	bl	801178c <ip4_output_if>
  }
  pbuf_free(q);
 80113f2:	69f8      	ldr	r0, [r7, #28]
 80113f4:	f7f8 fc56 	bl	8009ca4 <pbuf_free>
 80113f8:	e000      	b.n	80113fc <icmp_send_response+0xc0>
    return;
 80113fa:	bf00      	nop
}
 80113fc:	3720      	adds	r7, #32
 80113fe:	46bd      	mov	sp, r7
 8011400:	bd80      	pop	{r7, pc}
 8011402:	bf00      	nop
 8011404:	080163fc 	.word	0x080163fc
 8011408:	080164c8 	.word	0x080164c8
 801140c:	0801646c 	.word	0x0801646c

08011410 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8011410:	b480      	push	{r7}
 8011412:	b085      	sub	sp, #20
 8011414:	af00      	add	r7, sp, #0
 8011416:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8011418:	4b33      	ldr	r3, [pc, #204]	@ (80114e8 <ip4_route+0xd8>)
 801141a:	681b      	ldr	r3, [r3, #0]
 801141c:	60fb      	str	r3, [r7, #12]
 801141e:	e036      	b.n	801148e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011420:	68fb      	ldr	r3, [r7, #12]
 8011422:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8011426:	f003 0301 	and.w	r3, r3, #1
 801142a:	b2db      	uxtb	r3, r3
 801142c:	2b00      	cmp	r3, #0
 801142e:	d02b      	beq.n	8011488 <ip4_route+0x78>
 8011430:	68fb      	ldr	r3, [r7, #12]
 8011432:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8011436:	089b      	lsrs	r3, r3, #2
 8011438:	f003 0301 	and.w	r3, r3, #1
 801143c:	b2db      	uxtb	r3, r3
 801143e:	2b00      	cmp	r3, #0
 8011440:	d022      	beq.n	8011488 <ip4_route+0x78>
 8011442:	68fb      	ldr	r3, [r7, #12]
 8011444:	3304      	adds	r3, #4
 8011446:	681b      	ldr	r3, [r3, #0]
 8011448:	2b00      	cmp	r3, #0
 801144a:	d01d      	beq.n	8011488 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	681a      	ldr	r2, [r3, #0]
 8011450:	68fb      	ldr	r3, [r7, #12]
 8011452:	3304      	adds	r3, #4
 8011454:	681b      	ldr	r3, [r3, #0]
 8011456:	405a      	eors	r2, r3
 8011458:	68fb      	ldr	r3, [r7, #12]
 801145a:	3308      	adds	r3, #8
 801145c:	681b      	ldr	r3, [r3, #0]
 801145e:	4013      	ands	r3, r2
 8011460:	2b00      	cmp	r3, #0
 8011462:	d101      	bne.n	8011468 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8011464:	68fb      	ldr	r3, [r7, #12]
 8011466:	e038      	b.n	80114da <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8011468:	68fb      	ldr	r3, [r7, #12]
 801146a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801146e:	f003 0302 	and.w	r3, r3, #2
 8011472:	2b00      	cmp	r3, #0
 8011474:	d108      	bne.n	8011488 <ip4_route+0x78>
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	681a      	ldr	r2, [r3, #0]
 801147a:	68fb      	ldr	r3, [r7, #12]
 801147c:	330c      	adds	r3, #12
 801147e:	681b      	ldr	r3, [r3, #0]
 8011480:	429a      	cmp	r2, r3
 8011482:	d101      	bne.n	8011488 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8011484:	68fb      	ldr	r3, [r7, #12]
 8011486:	e028      	b.n	80114da <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8011488:	68fb      	ldr	r3, [r7, #12]
 801148a:	681b      	ldr	r3, [r3, #0]
 801148c:	60fb      	str	r3, [r7, #12]
 801148e:	68fb      	ldr	r3, [r7, #12]
 8011490:	2b00      	cmp	r3, #0
 8011492:	d1c5      	bne.n	8011420 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8011494:	4b15      	ldr	r3, [pc, #84]	@ (80114ec <ip4_route+0xdc>)
 8011496:	681b      	ldr	r3, [r3, #0]
 8011498:	2b00      	cmp	r3, #0
 801149a:	d01a      	beq.n	80114d2 <ip4_route+0xc2>
 801149c:	4b13      	ldr	r3, [pc, #76]	@ (80114ec <ip4_route+0xdc>)
 801149e:	681b      	ldr	r3, [r3, #0]
 80114a0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80114a4:	f003 0301 	and.w	r3, r3, #1
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d012      	beq.n	80114d2 <ip4_route+0xc2>
 80114ac:	4b0f      	ldr	r3, [pc, #60]	@ (80114ec <ip4_route+0xdc>)
 80114ae:	681b      	ldr	r3, [r3, #0]
 80114b0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80114b4:	f003 0304 	and.w	r3, r3, #4
 80114b8:	2b00      	cmp	r3, #0
 80114ba:	d00a      	beq.n	80114d2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80114bc:	4b0b      	ldr	r3, [pc, #44]	@ (80114ec <ip4_route+0xdc>)
 80114be:	681b      	ldr	r3, [r3, #0]
 80114c0:	3304      	adds	r3, #4
 80114c2:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80114c4:	2b00      	cmp	r3, #0
 80114c6:	d004      	beq.n	80114d2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	681b      	ldr	r3, [r3, #0]
 80114cc:	b2db      	uxtb	r3, r3
 80114ce:	2b7f      	cmp	r3, #127	@ 0x7f
 80114d0:	d101      	bne.n	80114d6 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80114d2:	2300      	movs	r3, #0
 80114d4:	e001      	b.n	80114da <ip4_route+0xca>
  }

  return netif_default;
 80114d6:	4b05      	ldr	r3, [pc, #20]	@ (80114ec <ip4_route+0xdc>)
 80114d8:	681b      	ldr	r3, [r3, #0]
}
 80114da:	4618      	mov	r0, r3
 80114dc:	3714      	adds	r7, #20
 80114de:	46bd      	mov	sp, r7
 80114e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114e4:	4770      	bx	lr
 80114e6:	bf00      	nop
 80114e8:	20008900 	.word	0x20008900
 80114ec:	20008904 	.word	0x20008904

080114f0 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80114f0:	b580      	push	{r7, lr}
 80114f2:	b082      	sub	sp, #8
 80114f4:	af00      	add	r7, sp, #0
 80114f6:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80114fe:	f003 0301 	and.w	r3, r3, #1
 8011502:	b2db      	uxtb	r3, r3
 8011504:	2b00      	cmp	r3, #0
 8011506:	d016      	beq.n	8011536 <ip4_input_accept+0x46>
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	3304      	adds	r3, #4
 801150c:	681b      	ldr	r3, [r3, #0]
 801150e:	2b00      	cmp	r3, #0
 8011510:	d011      	beq.n	8011536 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8011512:	4b0b      	ldr	r3, [pc, #44]	@ (8011540 <ip4_input_accept+0x50>)
 8011514:	695a      	ldr	r2, [r3, #20]
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	3304      	adds	r3, #4
 801151a:	681b      	ldr	r3, [r3, #0]
 801151c:	429a      	cmp	r2, r3
 801151e:	d008      	beq.n	8011532 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8011520:	4b07      	ldr	r3, [pc, #28]	@ (8011540 <ip4_input_accept+0x50>)
 8011522:	695b      	ldr	r3, [r3, #20]
 8011524:	6879      	ldr	r1, [r7, #4]
 8011526:	4618      	mov	r0, r3
 8011528:	f000 fa08 	bl	801193c <ip4_addr_isbroadcast_u32>
 801152c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801152e:	2b00      	cmp	r3, #0
 8011530:	d001      	beq.n	8011536 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8011532:	2301      	movs	r3, #1
 8011534:	e000      	b.n	8011538 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8011536:	2300      	movs	r3, #0
}
 8011538:	4618      	mov	r0, r3
 801153a:	3708      	adds	r7, #8
 801153c:	46bd      	mov	sp, r7
 801153e:	bd80      	pop	{r7, pc}
 8011540:	200055dc 	.word	0x200055dc

08011544 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8011544:	b580      	push	{r7, lr}
 8011546:	b086      	sub	sp, #24
 8011548:	af00      	add	r7, sp, #0
 801154a:	6078      	str	r0, [r7, #4]
 801154c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	685b      	ldr	r3, [r3, #4]
 8011552:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8011554:	697b      	ldr	r3, [r7, #20]
 8011556:	781b      	ldrb	r3, [r3, #0]
 8011558:	091b      	lsrs	r3, r3, #4
 801155a:	b2db      	uxtb	r3, r3
 801155c:	2b04      	cmp	r3, #4
 801155e:	d004      	beq.n	801156a <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8011560:	6878      	ldr	r0, [r7, #4]
 8011562:	f7f8 fb9f 	bl	8009ca4 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8011566:	2300      	movs	r3, #0
 8011568:	e107      	b.n	801177a <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801156a:	697b      	ldr	r3, [r7, #20]
 801156c:	781b      	ldrb	r3, [r3, #0]
 801156e:	f003 030f 	and.w	r3, r3, #15
 8011572:	b2db      	uxtb	r3, r3
 8011574:	009b      	lsls	r3, r3, #2
 8011576:	b2db      	uxtb	r3, r3
 8011578:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801157a:	697b      	ldr	r3, [r7, #20]
 801157c:	885b      	ldrh	r3, [r3, #2]
 801157e:	b29b      	uxth	r3, r3
 8011580:	4618      	mov	r0, r3
 8011582:	f7f7 f831 	bl	80085e8 <lwip_htons>
 8011586:	4603      	mov	r3, r0
 8011588:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	891b      	ldrh	r3, [r3, #8]
 801158e:	89ba      	ldrh	r2, [r7, #12]
 8011590:	429a      	cmp	r2, r3
 8011592:	d204      	bcs.n	801159e <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8011594:	89bb      	ldrh	r3, [r7, #12]
 8011596:	4619      	mov	r1, r3
 8011598:	6878      	ldr	r0, [r7, #4]
 801159a:	f7f8 f9fd 	bl	8009998 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	895b      	ldrh	r3, [r3, #10]
 80115a2:	89fa      	ldrh	r2, [r7, #14]
 80115a4:	429a      	cmp	r2, r3
 80115a6:	d807      	bhi.n	80115b8 <ip4_input+0x74>
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	891b      	ldrh	r3, [r3, #8]
 80115ac:	89ba      	ldrh	r2, [r7, #12]
 80115ae:	429a      	cmp	r2, r3
 80115b0:	d802      	bhi.n	80115b8 <ip4_input+0x74>
 80115b2:	89fb      	ldrh	r3, [r7, #14]
 80115b4:	2b13      	cmp	r3, #19
 80115b6:	d804      	bhi.n	80115c2 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80115b8:	6878      	ldr	r0, [r7, #4]
 80115ba:	f7f8 fb73 	bl	8009ca4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80115be:	2300      	movs	r3, #0
 80115c0:	e0db      	b.n	801177a <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80115c2:	697b      	ldr	r3, [r7, #20]
 80115c4:	691b      	ldr	r3, [r3, #16]
 80115c6:	4a6f      	ldr	r2, [pc, #444]	@ (8011784 <ip4_input+0x240>)
 80115c8:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80115ca:	697b      	ldr	r3, [r7, #20]
 80115cc:	68db      	ldr	r3, [r3, #12]
 80115ce:	4a6d      	ldr	r2, [pc, #436]	@ (8011784 <ip4_input+0x240>)
 80115d0:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80115d2:	4b6c      	ldr	r3, [pc, #432]	@ (8011784 <ip4_input+0x240>)
 80115d4:	695b      	ldr	r3, [r3, #20]
 80115d6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80115da:	2be0      	cmp	r3, #224	@ 0xe0
 80115dc:	d112      	bne.n	8011604 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80115de:	683b      	ldr	r3, [r7, #0]
 80115e0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80115e4:	f003 0301 	and.w	r3, r3, #1
 80115e8:	b2db      	uxtb	r3, r3
 80115ea:	2b00      	cmp	r3, #0
 80115ec:	d007      	beq.n	80115fe <ip4_input+0xba>
 80115ee:	683b      	ldr	r3, [r7, #0]
 80115f0:	3304      	adds	r3, #4
 80115f2:	681b      	ldr	r3, [r3, #0]
 80115f4:	2b00      	cmp	r3, #0
 80115f6:	d002      	beq.n	80115fe <ip4_input+0xba>
      netif = inp;
 80115f8:	683b      	ldr	r3, [r7, #0]
 80115fa:	613b      	str	r3, [r7, #16]
 80115fc:	e02a      	b.n	8011654 <ip4_input+0x110>
    } else {
      netif = NULL;
 80115fe:	2300      	movs	r3, #0
 8011600:	613b      	str	r3, [r7, #16]
 8011602:	e027      	b.n	8011654 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8011604:	6838      	ldr	r0, [r7, #0]
 8011606:	f7ff ff73 	bl	80114f0 <ip4_input_accept>
 801160a:	4603      	mov	r3, r0
 801160c:	2b00      	cmp	r3, #0
 801160e:	d002      	beq.n	8011616 <ip4_input+0xd2>
      netif = inp;
 8011610:	683b      	ldr	r3, [r7, #0]
 8011612:	613b      	str	r3, [r7, #16]
 8011614:	e01e      	b.n	8011654 <ip4_input+0x110>
    } else {
      netif = NULL;
 8011616:	2300      	movs	r3, #0
 8011618:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801161a:	4b5a      	ldr	r3, [pc, #360]	@ (8011784 <ip4_input+0x240>)
 801161c:	695b      	ldr	r3, [r3, #20]
 801161e:	b2db      	uxtb	r3, r3
 8011620:	2b7f      	cmp	r3, #127	@ 0x7f
 8011622:	d017      	beq.n	8011654 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8011624:	4b58      	ldr	r3, [pc, #352]	@ (8011788 <ip4_input+0x244>)
 8011626:	681b      	ldr	r3, [r3, #0]
 8011628:	613b      	str	r3, [r7, #16]
 801162a:	e00e      	b.n	801164a <ip4_input+0x106>
          if (netif == inp) {
 801162c:	693a      	ldr	r2, [r7, #16]
 801162e:	683b      	ldr	r3, [r7, #0]
 8011630:	429a      	cmp	r2, r3
 8011632:	d006      	beq.n	8011642 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8011634:	6938      	ldr	r0, [r7, #16]
 8011636:	f7ff ff5b 	bl	80114f0 <ip4_input_accept>
 801163a:	4603      	mov	r3, r0
 801163c:	2b00      	cmp	r3, #0
 801163e:	d108      	bne.n	8011652 <ip4_input+0x10e>
 8011640:	e000      	b.n	8011644 <ip4_input+0x100>
            continue;
 8011642:	bf00      	nop
        NETIF_FOREACH(netif) {
 8011644:	693b      	ldr	r3, [r7, #16]
 8011646:	681b      	ldr	r3, [r3, #0]
 8011648:	613b      	str	r3, [r7, #16]
 801164a:	693b      	ldr	r3, [r7, #16]
 801164c:	2b00      	cmp	r3, #0
 801164e:	d1ed      	bne.n	801162c <ip4_input+0xe8>
 8011650:	e000      	b.n	8011654 <ip4_input+0x110>
            break;
 8011652:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8011654:	4b4b      	ldr	r3, [pc, #300]	@ (8011784 <ip4_input+0x240>)
 8011656:	691b      	ldr	r3, [r3, #16]
 8011658:	6839      	ldr	r1, [r7, #0]
 801165a:	4618      	mov	r0, r3
 801165c:	f000 f96e 	bl	801193c <ip4_addr_isbroadcast_u32>
 8011660:	4603      	mov	r3, r0
 8011662:	2b00      	cmp	r3, #0
 8011664:	d105      	bne.n	8011672 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8011666:	4b47      	ldr	r3, [pc, #284]	@ (8011784 <ip4_input+0x240>)
 8011668:	691b      	ldr	r3, [r3, #16]
 801166a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801166e:	2be0      	cmp	r3, #224	@ 0xe0
 8011670:	d104      	bne.n	801167c <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8011672:	6878      	ldr	r0, [r7, #4]
 8011674:	f7f8 fb16 	bl	8009ca4 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8011678:	2300      	movs	r3, #0
 801167a:	e07e      	b.n	801177a <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801167c:	693b      	ldr	r3, [r7, #16]
 801167e:	2b00      	cmp	r3, #0
 8011680:	d104      	bne.n	801168c <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8011682:	6878      	ldr	r0, [r7, #4]
 8011684:	f7f8 fb0e 	bl	8009ca4 <pbuf_free>
    return ERR_OK;
 8011688:	2300      	movs	r3, #0
 801168a:	e076      	b.n	801177a <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801168c:	697b      	ldr	r3, [r7, #20]
 801168e:	88db      	ldrh	r3, [r3, #6]
 8011690:	b29b      	uxth	r3, r3
 8011692:	461a      	mov	r2, r3
 8011694:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8011698:	4013      	ands	r3, r2
 801169a:	2b00      	cmp	r3, #0
 801169c:	d00b      	beq.n	80116b6 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801169e:	6878      	ldr	r0, [r7, #4]
 80116a0:	f000 fc92 	bl	8011fc8 <ip4_reass>
 80116a4:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	2b00      	cmp	r3, #0
 80116aa:	d101      	bne.n	80116b0 <ip4_input+0x16c>
      return ERR_OK;
 80116ac:	2300      	movs	r3, #0
 80116ae:	e064      	b.n	801177a <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	685b      	ldr	r3, [r3, #4]
 80116b4:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80116b6:	4a33      	ldr	r2, [pc, #204]	@ (8011784 <ip4_input+0x240>)
 80116b8:	693b      	ldr	r3, [r7, #16]
 80116ba:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80116bc:	4a31      	ldr	r2, [pc, #196]	@ (8011784 <ip4_input+0x240>)
 80116be:	683b      	ldr	r3, [r7, #0]
 80116c0:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80116c2:	4a30      	ldr	r2, [pc, #192]	@ (8011784 <ip4_input+0x240>)
 80116c4:	697b      	ldr	r3, [r7, #20]
 80116c6:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80116c8:	697b      	ldr	r3, [r7, #20]
 80116ca:	781b      	ldrb	r3, [r3, #0]
 80116cc:	f003 030f 	and.w	r3, r3, #15
 80116d0:	b2db      	uxtb	r3, r3
 80116d2:	009b      	lsls	r3, r3, #2
 80116d4:	b2db      	uxtb	r3, r3
 80116d6:	461a      	mov	r2, r3
 80116d8:	4b2a      	ldr	r3, [pc, #168]	@ (8011784 <ip4_input+0x240>)
 80116da:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80116dc:	89fb      	ldrh	r3, [r7, #14]
 80116de:	4619      	mov	r1, r3
 80116e0:	6878      	ldr	r0, [r7, #4]
 80116e2:	f7f8 fa59 	bl	8009b98 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80116e6:	697b      	ldr	r3, [r7, #20]
 80116e8:	7a5b      	ldrb	r3, [r3, #9]
 80116ea:	2b11      	cmp	r3, #17
 80116ec:	d006      	beq.n	80116fc <ip4_input+0x1b8>
 80116ee:	2b11      	cmp	r3, #17
 80116f0:	dc13      	bgt.n	801171a <ip4_input+0x1d6>
 80116f2:	2b01      	cmp	r3, #1
 80116f4:	d00c      	beq.n	8011710 <ip4_input+0x1cc>
 80116f6:	2b06      	cmp	r3, #6
 80116f8:	d005      	beq.n	8011706 <ip4_input+0x1c2>
 80116fa:	e00e      	b.n	801171a <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80116fc:	6839      	ldr	r1, [r7, #0]
 80116fe:	6878      	ldr	r0, [r7, #4]
 8011700:	f7fe f950 	bl	800f9a4 <udp_input>
        break;
 8011704:	e026      	b.n	8011754 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8011706:	6839      	ldr	r1, [r7, #0]
 8011708:	6878      	ldr	r0, [r7, #4]
 801170a:	f7fa f997 	bl	800ba3c <tcp_input>
        break;
 801170e:	e021      	b.n	8011754 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8011710:	6839      	ldr	r1, [r7, #0]
 8011712:	6878      	ldr	r0, [r7, #4]
 8011714:	f7ff fcee 	bl	80110f4 <icmp_input>
        break;
 8011718:	e01c      	b.n	8011754 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801171a:	4b1a      	ldr	r3, [pc, #104]	@ (8011784 <ip4_input+0x240>)
 801171c:	695b      	ldr	r3, [r3, #20]
 801171e:	6939      	ldr	r1, [r7, #16]
 8011720:	4618      	mov	r0, r3
 8011722:	f000 f90b 	bl	801193c <ip4_addr_isbroadcast_u32>
 8011726:	4603      	mov	r3, r0
 8011728:	2b00      	cmp	r3, #0
 801172a:	d10f      	bne.n	801174c <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801172c:	4b15      	ldr	r3, [pc, #84]	@ (8011784 <ip4_input+0x240>)
 801172e:	695b      	ldr	r3, [r3, #20]
 8011730:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8011734:	2be0      	cmp	r3, #224	@ 0xe0
 8011736:	d009      	beq.n	801174c <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8011738:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801173c:	4619      	mov	r1, r3
 801173e:	6878      	ldr	r0, [r7, #4]
 8011740:	f7f8 fa9d 	bl	8009c7e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8011744:	2102      	movs	r1, #2
 8011746:	6878      	ldr	r0, [r7, #4]
 8011748:	f7ff fdd8 	bl	80112fc <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801174c:	6878      	ldr	r0, [r7, #4]
 801174e:	f7f8 faa9 	bl	8009ca4 <pbuf_free>
        break;
 8011752:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8011754:	4b0b      	ldr	r3, [pc, #44]	@ (8011784 <ip4_input+0x240>)
 8011756:	2200      	movs	r2, #0
 8011758:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801175a:	4b0a      	ldr	r3, [pc, #40]	@ (8011784 <ip4_input+0x240>)
 801175c:	2200      	movs	r2, #0
 801175e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8011760:	4b08      	ldr	r3, [pc, #32]	@ (8011784 <ip4_input+0x240>)
 8011762:	2200      	movs	r2, #0
 8011764:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8011766:	4b07      	ldr	r3, [pc, #28]	@ (8011784 <ip4_input+0x240>)
 8011768:	2200      	movs	r2, #0
 801176a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801176c:	4b05      	ldr	r3, [pc, #20]	@ (8011784 <ip4_input+0x240>)
 801176e:	2200      	movs	r2, #0
 8011770:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8011772:	4b04      	ldr	r3, [pc, #16]	@ (8011784 <ip4_input+0x240>)
 8011774:	2200      	movs	r2, #0
 8011776:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8011778:	2300      	movs	r3, #0
}
 801177a:	4618      	mov	r0, r3
 801177c:	3718      	adds	r7, #24
 801177e:	46bd      	mov	sp, r7
 8011780:	bd80      	pop	{r7, pc}
 8011782:	bf00      	nop
 8011784:	200055dc 	.word	0x200055dc
 8011788:	20008900 	.word	0x20008900

0801178c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801178c:	b580      	push	{r7, lr}
 801178e:	b08a      	sub	sp, #40	@ 0x28
 8011790:	af04      	add	r7, sp, #16
 8011792:	60f8      	str	r0, [r7, #12]
 8011794:	60b9      	str	r1, [r7, #8]
 8011796:	607a      	str	r2, [r7, #4]
 8011798:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801179a:	68bb      	ldr	r3, [r7, #8]
 801179c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	2b00      	cmp	r3, #0
 80117a2:	d009      	beq.n	80117b8 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80117a4:	68bb      	ldr	r3, [r7, #8]
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d003      	beq.n	80117b2 <ip4_output_if+0x26>
 80117aa:	68bb      	ldr	r3, [r7, #8]
 80117ac:	681b      	ldr	r3, [r3, #0]
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	d102      	bne.n	80117b8 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80117b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80117b4:	3304      	adds	r3, #4
 80117b6:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80117b8:	78fa      	ldrb	r2, [r7, #3]
 80117ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80117bc:	9302      	str	r3, [sp, #8]
 80117be:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80117c2:	9301      	str	r3, [sp, #4]
 80117c4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80117c8:	9300      	str	r3, [sp, #0]
 80117ca:	4613      	mov	r3, r2
 80117cc:	687a      	ldr	r2, [r7, #4]
 80117ce:	6979      	ldr	r1, [r7, #20]
 80117d0:	68f8      	ldr	r0, [r7, #12]
 80117d2:	f000 f805 	bl	80117e0 <ip4_output_if_src>
 80117d6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80117d8:	4618      	mov	r0, r3
 80117da:	3718      	adds	r7, #24
 80117dc:	46bd      	mov	sp, r7
 80117de:	bd80      	pop	{r7, pc}

080117e0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80117e0:	b580      	push	{r7, lr}
 80117e2:	b088      	sub	sp, #32
 80117e4:	af00      	add	r7, sp, #0
 80117e6:	60f8      	str	r0, [r7, #12]
 80117e8:	60b9      	str	r1, [r7, #8]
 80117ea:	607a      	str	r2, [r7, #4]
 80117ec:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80117ee:	68fb      	ldr	r3, [r7, #12]
 80117f0:	7b9b      	ldrb	r3, [r3, #14]
 80117f2:	2b01      	cmp	r3, #1
 80117f4:	d006      	beq.n	8011804 <ip4_output_if_src+0x24>
 80117f6:	4b4b      	ldr	r3, [pc, #300]	@ (8011924 <ip4_output_if_src+0x144>)
 80117f8:	f44f 7255 	mov.w	r2, #852	@ 0x354
 80117fc:	494a      	ldr	r1, [pc, #296]	@ (8011928 <ip4_output_if_src+0x148>)
 80117fe:	484b      	ldr	r0, [pc, #300]	@ (801192c <ip4_output_if_src+0x14c>)
 8011800:	f001 fa40 	bl	8012c84 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	2b00      	cmp	r3, #0
 8011808:	d060      	beq.n	80118cc <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801180a:	2314      	movs	r3, #20
 801180c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801180e:	2114      	movs	r1, #20
 8011810:	68f8      	ldr	r0, [r7, #12]
 8011812:	f7f8 f9b1 	bl	8009b78 <pbuf_add_header>
 8011816:	4603      	mov	r3, r0
 8011818:	2b00      	cmp	r3, #0
 801181a:	d002      	beq.n	8011822 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801181c:	f06f 0301 	mvn.w	r3, #1
 8011820:	e07c      	b.n	801191c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8011822:	68fb      	ldr	r3, [r7, #12]
 8011824:	685b      	ldr	r3, [r3, #4]
 8011826:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8011828:	68fb      	ldr	r3, [r7, #12]
 801182a:	895b      	ldrh	r3, [r3, #10]
 801182c:	2b13      	cmp	r3, #19
 801182e:	d806      	bhi.n	801183e <ip4_output_if_src+0x5e>
 8011830:	4b3c      	ldr	r3, [pc, #240]	@ (8011924 <ip4_output_if_src+0x144>)
 8011832:	f44f 7262 	mov.w	r2, #904	@ 0x388
 8011836:	493e      	ldr	r1, [pc, #248]	@ (8011930 <ip4_output_if_src+0x150>)
 8011838:	483c      	ldr	r0, [pc, #240]	@ (801192c <ip4_output_if_src+0x14c>)
 801183a:	f001 fa23 	bl	8012c84 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801183e:	69fb      	ldr	r3, [r7, #28]
 8011840:	78fa      	ldrb	r2, [r7, #3]
 8011842:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8011844:	69fb      	ldr	r3, [r7, #28]
 8011846:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 801184a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	681a      	ldr	r2, [r3, #0]
 8011850:	69fb      	ldr	r3, [r7, #28]
 8011852:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8011854:	8b7b      	ldrh	r3, [r7, #26]
 8011856:	089b      	lsrs	r3, r3, #2
 8011858:	b29b      	uxth	r3, r3
 801185a:	b2db      	uxtb	r3, r3
 801185c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011860:	b2da      	uxtb	r2, r3
 8011862:	69fb      	ldr	r3, [r7, #28]
 8011864:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8011866:	69fb      	ldr	r3, [r7, #28]
 8011868:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 801186c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801186e:	68fb      	ldr	r3, [r7, #12]
 8011870:	891b      	ldrh	r3, [r3, #8]
 8011872:	4618      	mov	r0, r3
 8011874:	f7f6 feb8 	bl	80085e8 <lwip_htons>
 8011878:	4603      	mov	r3, r0
 801187a:	461a      	mov	r2, r3
 801187c:	69fb      	ldr	r3, [r7, #28]
 801187e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8011880:	69fb      	ldr	r3, [r7, #28]
 8011882:	2200      	movs	r2, #0
 8011884:	719a      	strb	r2, [r3, #6]
 8011886:	2200      	movs	r2, #0
 8011888:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801188a:	4b2a      	ldr	r3, [pc, #168]	@ (8011934 <ip4_output_if_src+0x154>)
 801188c:	881b      	ldrh	r3, [r3, #0]
 801188e:	4618      	mov	r0, r3
 8011890:	f7f6 feaa 	bl	80085e8 <lwip_htons>
 8011894:	4603      	mov	r3, r0
 8011896:	461a      	mov	r2, r3
 8011898:	69fb      	ldr	r3, [r7, #28]
 801189a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801189c:	4b25      	ldr	r3, [pc, #148]	@ (8011934 <ip4_output_if_src+0x154>)
 801189e:	881b      	ldrh	r3, [r3, #0]
 80118a0:	3301      	adds	r3, #1
 80118a2:	b29a      	uxth	r2, r3
 80118a4:	4b23      	ldr	r3, [pc, #140]	@ (8011934 <ip4_output_if_src+0x154>)
 80118a6:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80118a8:	68bb      	ldr	r3, [r7, #8]
 80118aa:	2b00      	cmp	r3, #0
 80118ac:	d104      	bne.n	80118b8 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80118ae:	4b22      	ldr	r3, [pc, #136]	@ (8011938 <ip4_output_if_src+0x158>)
 80118b0:	681a      	ldr	r2, [r3, #0]
 80118b2:	69fb      	ldr	r3, [r7, #28]
 80118b4:	60da      	str	r2, [r3, #12]
 80118b6:	e003      	b.n	80118c0 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80118b8:	68bb      	ldr	r3, [r7, #8]
 80118ba:	681a      	ldr	r2, [r3, #0]
 80118bc:	69fb      	ldr	r3, [r7, #28]
 80118be:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80118c0:	69fb      	ldr	r3, [r7, #28]
 80118c2:	2200      	movs	r2, #0
 80118c4:	729a      	strb	r2, [r3, #10]
 80118c6:	2200      	movs	r2, #0
 80118c8:	72da      	strb	r2, [r3, #11]
 80118ca:	e00f      	b.n	80118ec <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80118cc:	68fb      	ldr	r3, [r7, #12]
 80118ce:	895b      	ldrh	r3, [r3, #10]
 80118d0:	2b13      	cmp	r3, #19
 80118d2:	d802      	bhi.n	80118da <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80118d4:	f06f 0301 	mvn.w	r3, #1
 80118d8:	e020      	b.n	801191c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80118da:	68fb      	ldr	r3, [r7, #12]
 80118dc:	685b      	ldr	r3, [r3, #4]
 80118de:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80118e0:	69fb      	ldr	r3, [r7, #28]
 80118e2:	691b      	ldr	r3, [r3, #16]
 80118e4:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80118e6:	f107 0314 	add.w	r3, r7, #20
 80118ea:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80118ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80118ee:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	d00c      	beq.n	801190e <ip4_output_if_src+0x12e>
 80118f4:	68fb      	ldr	r3, [r7, #12]
 80118f6:	891a      	ldrh	r2, [r3, #8]
 80118f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80118fa:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80118fc:	429a      	cmp	r2, r3
 80118fe:	d906      	bls.n	801190e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8011900:	687a      	ldr	r2, [r7, #4]
 8011902:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8011904:	68f8      	ldr	r0, [r7, #12]
 8011906:	f000 fd53 	bl	80123b0 <ip4_frag>
 801190a:	4603      	mov	r3, r0
 801190c:	e006      	b.n	801191c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801190e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011910:	695b      	ldr	r3, [r3, #20]
 8011912:	687a      	ldr	r2, [r7, #4]
 8011914:	68f9      	ldr	r1, [r7, #12]
 8011916:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011918:	4798      	blx	r3
 801191a:	4603      	mov	r3, r0
}
 801191c:	4618      	mov	r0, r3
 801191e:	3720      	adds	r7, #32
 8011920:	46bd      	mov	sp, r7
 8011922:	bd80      	pop	{r7, pc}
 8011924:	080164f4 	.word	0x080164f4
 8011928:	08016528 	.word	0x08016528
 801192c:	08016534 	.word	0x08016534
 8011930:	0801655c 	.word	0x0801655c
 8011934:	20008a5e 	.word	0x20008a5e
 8011938:	0801693c 	.word	0x0801693c

0801193c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801193c:	b480      	push	{r7}
 801193e:	b085      	sub	sp, #20
 8011940:	af00      	add	r7, sp, #0
 8011942:	6078      	str	r0, [r7, #4]
 8011944:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011950:	d002      	beq.n	8011958 <ip4_addr_isbroadcast_u32+0x1c>
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	2b00      	cmp	r3, #0
 8011956:	d101      	bne.n	801195c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8011958:	2301      	movs	r3, #1
 801195a:	e02a      	b.n	80119b2 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801195c:	683b      	ldr	r3, [r7, #0]
 801195e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8011962:	f003 0302 	and.w	r3, r3, #2
 8011966:	2b00      	cmp	r3, #0
 8011968:	d101      	bne.n	801196e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801196a:	2300      	movs	r3, #0
 801196c:	e021      	b.n	80119b2 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801196e:	683b      	ldr	r3, [r7, #0]
 8011970:	3304      	adds	r3, #4
 8011972:	681b      	ldr	r3, [r3, #0]
 8011974:	687a      	ldr	r2, [r7, #4]
 8011976:	429a      	cmp	r2, r3
 8011978:	d101      	bne.n	801197e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801197a:	2300      	movs	r3, #0
 801197c:	e019      	b.n	80119b2 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801197e:	68fa      	ldr	r2, [r7, #12]
 8011980:	683b      	ldr	r3, [r7, #0]
 8011982:	3304      	adds	r3, #4
 8011984:	681b      	ldr	r3, [r3, #0]
 8011986:	405a      	eors	r2, r3
 8011988:	683b      	ldr	r3, [r7, #0]
 801198a:	3308      	adds	r3, #8
 801198c:	681b      	ldr	r3, [r3, #0]
 801198e:	4013      	ands	r3, r2
 8011990:	2b00      	cmp	r3, #0
 8011992:	d10d      	bne.n	80119b0 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8011994:	683b      	ldr	r3, [r7, #0]
 8011996:	3308      	adds	r3, #8
 8011998:	681b      	ldr	r3, [r3, #0]
 801199a:	43da      	mvns	r2, r3
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80119a0:	683b      	ldr	r3, [r7, #0]
 80119a2:	3308      	adds	r3, #8
 80119a4:	681b      	ldr	r3, [r3, #0]
 80119a6:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80119a8:	429a      	cmp	r2, r3
 80119aa:	d101      	bne.n	80119b0 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80119ac:	2301      	movs	r3, #1
 80119ae:	e000      	b.n	80119b2 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80119b0:	2300      	movs	r3, #0
  }
}
 80119b2:	4618      	mov	r0, r3
 80119b4:	3714      	adds	r7, #20
 80119b6:	46bd      	mov	sp, r7
 80119b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119bc:	4770      	bx	lr
	...

080119c0 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80119c0:	b580      	push	{r7, lr}
 80119c2:	b084      	sub	sp, #16
 80119c4:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80119c6:	2300      	movs	r3, #0
 80119c8:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80119ca:	4b12      	ldr	r3, [pc, #72]	@ (8011a14 <ip_reass_tmr+0x54>)
 80119cc:	681b      	ldr	r3, [r3, #0]
 80119ce:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80119d0:	e018      	b.n	8011a04 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80119d2:	68fb      	ldr	r3, [r7, #12]
 80119d4:	7fdb      	ldrb	r3, [r3, #31]
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d00b      	beq.n	80119f2 <ip_reass_tmr+0x32>
      r->timer--;
 80119da:	68fb      	ldr	r3, [r7, #12]
 80119dc:	7fdb      	ldrb	r3, [r3, #31]
 80119de:	3b01      	subs	r3, #1
 80119e0:	b2da      	uxtb	r2, r3
 80119e2:	68fb      	ldr	r3, [r7, #12]
 80119e4:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80119e6:	68fb      	ldr	r3, [r7, #12]
 80119e8:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80119ea:	68fb      	ldr	r3, [r7, #12]
 80119ec:	681b      	ldr	r3, [r3, #0]
 80119ee:	60fb      	str	r3, [r7, #12]
 80119f0:	e008      	b.n	8011a04 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80119f2:	68fb      	ldr	r3, [r7, #12]
 80119f4:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80119f6:	68fb      	ldr	r3, [r7, #12]
 80119f8:	681b      	ldr	r3, [r3, #0]
 80119fa:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80119fc:	68b9      	ldr	r1, [r7, #8]
 80119fe:	6878      	ldr	r0, [r7, #4]
 8011a00:	f000 f80a 	bl	8011a18 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8011a04:	68fb      	ldr	r3, [r7, #12]
 8011a06:	2b00      	cmp	r3, #0
 8011a08:	d1e3      	bne.n	80119d2 <ip_reass_tmr+0x12>
    }
  }
}
 8011a0a:	bf00      	nop
 8011a0c:	bf00      	nop
 8011a0e:	3710      	adds	r7, #16
 8011a10:	46bd      	mov	sp, r7
 8011a12:	bd80      	pop	{r7, pc}
 8011a14:	20008a60 	.word	0x20008a60

08011a18 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8011a18:	b580      	push	{r7, lr}
 8011a1a:	b088      	sub	sp, #32
 8011a1c:	af00      	add	r7, sp, #0
 8011a1e:	6078      	str	r0, [r7, #4]
 8011a20:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8011a22:	2300      	movs	r3, #0
 8011a24:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8011a26:	683a      	ldr	r2, [r7, #0]
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	429a      	cmp	r2, r3
 8011a2c:	d105      	bne.n	8011a3a <ip_reass_free_complete_datagram+0x22>
 8011a2e:	4b45      	ldr	r3, [pc, #276]	@ (8011b44 <ip_reass_free_complete_datagram+0x12c>)
 8011a30:	22ab      	movs	r2, #171	@ 0xab
 8011a32:	4945      	ldr	r1, [pc, #276]	@ (8011b48 <ip_reass_free_complete_datagram+0x130>)
 8011a34:	4845      	ldr	r0, [pc, #276]	@ (8011b4c <ip_reass_free_complete_datagram+0x134>)
 8011a36:	f001 f925 	bl	8012c84 <iprintf>
  if (prev != NULL) {
 8011a3a:	683b      	ldr	r3, [r7, #0]
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	d00a      	beq.n	8011a56 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8011a40:	683b      	ldr	r3, [r7, #0]
 8011a42:	681b      	ldr	r3, [r3, #0]
 8011a44:	687a      	ldr	r2, [r7, #4]
 8011a46:	429a      	cmp	r2, r3
 8011a48:	d005      	beq.n	8011a56 <ip_reass_free_complete_datagram+0x3e>
 8011a4a:	4b3e      	ldr	r3, [pc, #248]	@ (8011b44 <ip_reass_free_complete_datagram+0x12c>)
 8011a4c:	22ad      	movs	r2, #173	@ 0xad
 8011a4e:	4940      	ldr	r1, [pc, #256]	@ (8011b50 <ip_reass_free_complete_datagram+0x138>)
 8011a50:	483e      	ldr	r0, [pc, #248]	@ (8011b4c <ip_reass_free_complete_datagram+0x134>)
 8011a52:	f001 f917 	bl	8012c84 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	685b      	ldr	r3, [r3, #4]
 8011a5a:	685b      	ldr	r3, [r3, #4]
 8011a5c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8011a5e:	697b      	ldr	r3, [r7, #20]
 8011a60:	889b      	ldrh	r3, [r3, #4]
 8011a62:	b29b      	uxth	r3, r3
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	d12a      	bne.n	8011abe <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	685b      	ldr	r3, [r3, #4]
 8011a6c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8011a6e:	697b      	ldr	r3, [r7, #20]
 8011a70:	681a      	ldr	r2, [r3, #0]
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8011a76:	69bb      	ldr	r3, [r7, #24]
 8011a78:	6858      	ldr	r0, [r3, #4]
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	3308      	adds	r3, #8
 8011a7e:	2214      	movs	r2, #20
 8011a80:	4619      	mov	r1, r3
 8011a82:	f001 fa3e 	bl	8012f02 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8011a86:	2101      	movs	r1, #1
 8011a88:	69b8      	ldr	r0, [r7, #24]
 8011a8a:	f7ff fc47 	bl	801131c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8011a8e:	69b8      	ldr	r0, [r7, #24]
 8011a90:	f7f8 f990 	bl	8009db4 <pbuf_clen>
 8011a94:	4603      	mov	r3, r0
 8011a96:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8011a98:	8bfa      	ldrh	r2, [r7, #30]
 8011a9a:	8a7b      	ldrh	r3, [r7, #18]
 8011a9c:	4413      	add	r3, r2
 8011a9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011aa2:	db05      	blt.n	8011ab0 <ip_reass_free_complete_datagram+0x98>
 8011aa4:	4b27      	ldr	r3, [pc, #156]	@ (8011b44 <ip_reass_free_complete_datagram+0x12c>)
 8011aa6:	22bc      	movs	r2, #188	@ 0xbc
 8011aa8:	492a      	ldr	r1, [pc, #168]	@ (8011b54 <ip_reass_free_complete_datagram+0x13c>)
 8011aaa:	4828      	ldr	r0, [pc, #160]	@ (8011b4c <ip_reass_free_complete_datagram+0x134>)
 8011aac:	f001 f8ea 	bl	8012c84 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8011ab0:	8bfa      	ldrh	r2, [r7, #30]
 8011ab2:	8a7b      	ldrh	r3, [r7, #18]
 8011ab4:	4413      	add	r3, r2
 8011ab6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8011ab8:	69b8      	ldr	r0, [r7, #24]
 8011aba:	f7f8 f8f3 	bl	8009ca4 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	685b      	ldr	r3, [r3, #4]
 8011ac2:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8011ac4:	e01f      	b.n	8011b06 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8011ac6:	69bb      	ldr	r3, [r7, #24]
 8011ac8:	685b      	ldr	r3, [r3, #4]
 8011aca:	617b      	str	r3, [r7, #20]
    pcur = p;
 8011acc:	69bb      	ldr	r3, [r7, #24]
 8011ace:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8011ad0:	697b      	ldr	r3, [r7, #20]
 8011ad2:	681b      	ldr	r3, [r3, #0]
 8011ad4:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8011ad6:	68f8      	ldr	r0, [r7, #12]
 8011ad8:	f7f8 f96c 	bl	8009db4 <pbuf_clen>
 8011adc:	4603      	mov	r3, r0
 8011ade:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8011ae0:	8bfa      	ldrh	r2, [r7, #30]
 8011ae2:	8a7b      	ldrh	r3, [r7, #18]
 8011ae4:	4413      	add	r3, r2
 8011ae6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011aea:	db05      	blt.n	8011af8 <ip_reass_free_complete_datagram+0xe0>
 8011aec:	4b15      	ldr	r3, [pc, #84]	@ (8011b44 <ip_reass_free_complete_datagram+0x12c>)
 8011aee:	22cc      	movs	r2, #204	@ 0xcc
 8011af0:	4918      	ldr	r1, [pc, #96]	@ (8011b54 <ip_reass_free_complete_datagram+0x13c>)
 8011af2:	4816      	ldr	r0, [pc, #88]	@ (8011b4c <ip_reass_free_complete_datagram+0x134>)
 8011af4:	f001 f8c6 	bl	8012c84 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8011af8:	8bfa      	ldrh	r2, [r7, #30]
 8011afa:	8a7b      	ldrh	r3, [r7, #18]
 8011afc:	4413      	add	r3, r2
 8011afe:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8011b00:	68f8      	ldr	r0, [r7, #12]
 8011b02:	f7f8 f8cf 	bl	8009ca4 <pbuf_free>
  while (p != NULL) {
 8011b06:	69bb      	ldr	r3, [r7, #24]
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	d1dc      	bne.n	8011ac6 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8011b0c:	6839      	ldr	r1, [r7, #0]
 8011b0e:	6878      	ldr	r0, [r7, #4]
 8011b10:	f000 f8c2 	bl	8011c98 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8011b14:	4b10      	ldr	r3, [pc, #64]	@ (8011b58 <ip_reass_free_complete_datagram+0x140>)
 8011b16:	881b      	ldrh	r3, [r3, #0]
 8011b18:	8bfa      	ldrh	r2, [r7, #30]
 8011b1a:	429a      	cmp	r2, r3
 8011b1c:	d905      	bls.n	8011b2a <ip_reass_free_complete_datagram+0x112>
 8011b1e:	4b09      	ldr	r3, [pc, #36]	@ (8011b44 <ip_reass_free_complete_datagram+0x12c>)
 8011b20:	22d2      	movs	r2, #210	@ 0xd2
 8011b22:	490e      	ldr	r1, [pc, #56]	@ (8011b5c <ip_reass_free_complete_datagram+0x144>)
 8011b24:	4809      	ldr	r0, [pc, #36]	@ (8011b4c <ip_reass_free_complete_datagram+0x134>)
 8011b26:	f001 f8ad 	bl	8012c84 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8011b2a:	4b0b      	ldr	r3, [pc, #44]	@ (8011b58 <ip_reass_free_complete_datagram+0x140>)
 8011b2c:	881a      	ldrh	r2, [r3, #0]
 8011b2e:	8bfb      	ldrh	r3, [r7, #30]
 8011b30:	1ad3      	subs	r3, r2, r3
 8011b32:	b29a      	uxth	r2, r3
 8011b34:	4b08      	ldr	r3, [pc, #32]	@ (8011b58 <ip_reass_free_complete_datagram+0x140>)
 8011b36:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8011b38:	8bfb      	ldrh	r3, [r7, #30]
}
 8011b3a:	4618      	mov	r0, r3
 8011b3c:	3720      	adds	r7, #32
 8011b3e:	46bd      	mov	sp, r7
 8011b40:	bd80      	pop	{r7, pc}
 8011b42:	bf00      	nop
 8011b44:	0801658c 	.word	0x0801658c
 8011b48:	080165c8 	.word	0x080165c8
 8011b4c:	080165d4 	.word	0x080165d4
 8011b50:	080165fc 	.word	0x080165fc
 8011b54:	08016610 	.word	0x08016610
 8011b58:	20008a64 	.word	0x20008a64
 8011b5c:	08016630 	.word	0x08016630

08011b60 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8011b60:	b580      	push	{r7, lr}
 8011b62:	b08a      	sub	sp, #40	@ 0x28
 8011b64:	af00      	add	r7, sp, #0
 8011b66:	6078      	str	r0, [r7, #4]
 8011b68:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8011b6a:	2300      	movs	r3, #0
 8011b6c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8011b6e:	2300      	movs	r3, #0
 8011b70:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8011b72:	2300      	movs	r3, #0
 8011b74:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8011b76:	2300      	movs	r3, #0
 8011b78:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8011b7a:	2300      	movs	r3, #0
 8011b7c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8011b7e:	4b28      	ldr	r3, [pc, #160]	@ (8011c20 <ip_reass_remove_oldest_datagram+0xc0>)
 8011b80:	681b      	ldr	r3, [r3, #0]
 8011b82:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8011b84:	e030      	b.n	8011be8 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8011b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b88:	695a      	ldr	r2, [r3, #20]
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	68db      	ldr	r3, [r3, #12]
 8011b8e:	429a      	cmp	r2, r3
 8011b90:	d10c      	bne.n	8011bac <ip_reass_remove_oldest_datagram+0x4c>
 8011b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b94:	699a      	ldr	r2, [r3, #24]
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	691b      	ldr	r3, [r3, #16]
 8011b9a:	429a      	cmp	r2, r3
 8011b9c:	d106      	bne.n	8011bac <ip_reass_remove_oldest_datagram+0x4c>
 8011b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ba0:	899a      	ldrh	r2, [r3, #12]
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	889b      	ldrh	r3, [r3, #4]
 8011ba6:	b29b      	uxth	r3, r3
 8011ba8:	429a      	cmp	r2, r3
 8011baa:	d014      	beq.n	8011bd6 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8011bac:	693b      	ldr	r3, [r7, #16]
 8011bae:	3301      	adds	r3, #1
 8011bb0:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8011bb2:	6a3b      	ldr	r3, [r7, #32]
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	d104      	bne.n	8011bc2 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8011bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011bba:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8011bbc:	69fb      	ldr	r3, [r7, #28]
 8011bbe:	61bb      	str	r3, [r7, #24]
 8011bc0:	e009      	b.n	8011bd6 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8011bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011bc4:	7fda      	ldrb	r2, [r3, #31]
 8011bc6:	6a3b      	ldr	r3, [r7, #32]
 8011bc8:	7fdb      	ldrb	r3, [r3, #31]
 8011bca:	429a      	cmp	r2, r3
 8011bcc:	d803      	bhi.n	8011bd6 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8011bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011bd0:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8011bd2:	69fb      	ldr	r3, [r7, #28]
 8011bd4:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8011bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011bd8:	681b      	ldr	r3, [r3, #0]
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	d001      	beq.n	8011be2 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8011bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011be0:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8011be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011be4:	681b      	ldr	r3, [r3, #0]
 8011be6:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8011be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011bea:	2b00      	cmp	r3, #0
 8011bec:	d1cb      	bne.n	8011b86 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8011bee:	6a3b      	ldr	r3, [r7, #32]
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	d008      	beq.n	8011c06 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8011bf4:	69b9      	ldr	r1, [r7, #24]
 8011bf6:	6a38      	ldr	r0, [r7, #32]
 8011bf8:	f7ff ff0e 	bl	8011a18 <ip_reass_free_complete_datagram>
 8011bfc:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8011bfe:	697a      	ldr	r2, [r7, #20]
 8011c00:	68fb      	ldr	r3, [r7, #12]
 8011c02:	4413      	add	r3, r2
 8011c04:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8011c06:	697a      	ldr	r2, [r7, #20]
 8011c08:	683b      	ldr	r3, [r7, #0]
 8011c0a:	429a      	cmp	r2, r3
 8011c0c:	da02      	bge.n	8011c14 <ip_reass_remove_oldest_datagram+0xb4>
 8011c0e:	693b      	ldr	r3, [r7, #16]
 8011c10:	2b01      	cmp	r3, #1
 8011c12:	dcac      	bgt.n	8011b6e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8011c14:	697b      	ldr	r3, [r7, #20]
}
 8011c16:	4618      	mov	r0, r3
 8011c18:	3728      	adds	r7, #40	@ 0x28
 8011c1a:	46bd      	mov	sp, r7
 8011c1c:	bd80      	pop	{r7, pc}
 8011c1e:	bf00      	nop
 8011c20:	20008a60 	.word	0x20008a60

08011c24 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8011c24:	b580      	push	{r7, lr}
 8011c26:	b084      	sub	sp, #16
 8011c28:	af00      	add	r7, sp, #0
 8011c2a:	6078      	str	r0, [r7, #4]
 8011c2c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8011c2e:	2004      	movs	r0, #4
 8011c30:	f7f7 f952 	bl	8008ed8 <memp_malloc>
 8011c34:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8011c36:	68fb      	ldr	r3, [r7, #12]
 8011c38:	2b00      	cmp	r3, #0
 8011c3a:	d110      	bne.n	8011c5e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8011c3c:	6839      	ldr	r1, [r7, #0]
 8011c3e:	6878      	ldr	r0, [r7, #4]
 8011c40:	f7ff ff8e 	bl	8011b60 <ip_reass_remove_oldest_datagram>
 8011c44:	4602      	mov	r2, r0
 8011c46:	683b      	ldr	r3, [r7, #0]
 8011c48:	4293      	cmp	r3, r2
 8011c4a:	dc03      	bgt.n	8011c54 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8011c4c:	2004      	movs	r0, #4
 8011c4e:	f7f7 f943 	bl	8008ed8 <memp_malloc>
 8011c52:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8011c54:	68fb      	ldr	r3, [r7, #12]
 8011c56:	2b00      	cmp	r3, #0
 8011c58:	d101      	bne.n	8011c5e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8011c5a:	2300      	movs	r3, #0
 8011c5c:	e016      	b.n	8011c8c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8011c5e:	2220      	movs	r2, #32
 8011c60:	2100      	movs	r1, #0
 8011c62:	68f8      	ldr	r0, [r7, #12]
 8011c64:	f001 f8af 	bl	8012dc6 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8011c68:	68fb      	ldr	r3, [r7, #12]
 8011c6a:	220f      	movs	r2, #15
 8011c6c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8011c6e:	4b09      	ldr	r3, [pc, #36]	@ (8011c94 <ip_reass_enqueue_new_datagram+0x70>)
 8011c70:	681a      	ldr	r2, [r3, #0]
 8011c72:	68fb      	ldr	r3, [r7, #12]
 8011c74:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8011c76:	4a07      	ldr	r2, [pc, #28]	@ (8011c94 <ip_reass_enqueue_new_datagram+0x70>)
 8011c78:	68fb      	ldr	r3, [r7, #12]
 8011c7a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8011c7c:	68fb      	ldr	r3, [r7, #12]
 8011c7e:	3308      	adds	r3, #8
 8011c80:	2214      	movs	r2, #20
 8011c82:	6879      	ldr	r1, [r7, #4]
 8011c84:	4618      	mov	r0, r3
 8011c86:	f001 f93c 	bl	8012f02 <memcpy>
  return ipr;
 8011c8a:	68fb      	ldr	r3, [r7, #12]
}
 8011c8c:	4618      	mov	r0, r3
 8011c8e:	3710      	adds	r7, #16
 8011c90:	46bd      	mov	sp, r7
 8011c92:	bd80      	pop	{r7, pc}
 8011c94:	20008a60 	.word	0x20008a60

08011c98 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8011c98:	b580      	push	{r7, lr}
 8011c9a:	b082      	sub	sp, #8
 8011c9c:	af00      	add	r7, sp, #0
 8011c9e:	6078      	str	r0, [r7, #4]
 8011ca0:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8011ca2:	4b10      	ldr	r3, [pc, #64]	@ (8011ce4 <ip_reass_dequeue_datagram+0x4c>)
 8011ca4:	681b      	ldr	r3, [r3, #0]
 8011ca6:	687a      	ldr	r2, [r7, #4]
 8011ca8:	429a      	cmp	r2, r3
 8011caa:	d104      	bne.n	8011cb6 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	681b      	ldr	r3, [r3, #0]
 8011cb0:	4a0c      	ldr	r2, [pc, #48]	@ (8011ce4 <ip_reass_dequeue_datagram+0x4c>)
 8011cb2:	6013      	str	r3, [r2, #0]
 8011cb4:	e00d      	b.n	8011cd2 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8011cb6:	683b      	ldr	r3, [r7, #0]
 8011cb8:	2b00      	cmp	r3, #0
 8011cba:	d106      	bne.n	8011cca <ip_reass_dequeue_datagram+0x32>
 8011cbc:	4b0a      	ldr	r3, [pc, #40]	@ (8011ce8 <ip_reass_dequeue_datagram+0x50>)
 8011cbe:	f240 1245 	movw	r2, #325	@ 0x145
 8011cc2:	490a      	ldr	r1, [pc, #40]	@ (8011cec <ip_reass_dequeue_datagram+0x54>)
 8011cc4:	480a      	ldr	r0, [pc, #40]	@ (8011cf0 <ip_reass_dequeue_datagram+0x58>)
 8011cc6:	f000 ffdd 	bl	8012c84 <iprintf>
    prev->next = ipr->next;
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	681a      	ldr	r2, [r3, #0]
 8011cce:	683b      	ldr	r3, [r7, #0]
 8011cd0:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8011cd2:	6879      	ldr	r1, [r7, #4]
 8011cd4:	2004      	movs	r0, #4
 8011cd6:	f7f7 f96f 	bl	8008fb8 <memp_free>
}
 8011cda:	bf00      	nop
 8011cdc:	3708      	adds	r7, #8
 8011cde:	46bd      	mov	sp, r7
 8011ce0:	bd80      	pop	{r7, pc}
 8011ce2:	bf00      	nop
 8011ce4:	20008a60 	.word	0x20008a60
 8011ce8:	0801658c 	.word	0x0801658c
 8011cec:	08016654 	.word	0x08016654
 8011cf0:	080165d4 	.word	0x080165d4

08011cf4 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8011cf4:	b580      	push	{r7, lr}
 8011cf6:	b08c      	sub	sp, #48	@ 0x30
 8011cf8:	af00      	add	r7, sp, #0
 8011cfa:	60f8      	str	r0, [r7, #12]
 8011cfc:	60b9      	str	r1, [r7, #8]
 8011cfe:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8011d00:	2300      	movs	r3, #0
 8011d02:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8011d04:	2301      	movs	r3, #1
 8011d06:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8011d08:	68bb      	ldr	r3, [r7, #8]
 8011d0a:	685b      	ldr	r3, [r3, #4]
 8011d0c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8011d0e:	69fb      	ldr	r3, [r7, #28]
 8011d10:	885b      	ldrh	r3, [r3, #2]
 8011d12:	b29b      	uxth	r3, r3
 8011d14:	4618      	mov	r0, r3
 8011d16:	f7f6 fc67 	bl	80085e8 <lwip_htons>
 8011d1a:	4603      	mov	r3, r0
 8011d1c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8011d1e:	69fb      	ldr	r3, [r7, #28]
 8011d20:	781b      	ldrb	r3, [r3, #0]
 8011d22:	f003 030f 	and.w	r3, r3, #15
 8011d26:	b2db      	uxtb	r3, r3
 8011d28:	009b      	lsls	r3, r3, #2
 8011d2a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8011d2c:	7e7b      	ldrb	r3, [r7, #25]
 8011d2e:	b29b      	uxth	r3, r3
 8011d30:	8b7a      	ldrh	r2, [r7, #26]
 8011d32:	429a      	cmp	r2, r3
 8011d34:	d202      	bcs.n	8011d3c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011d36:	f04f 33ff 	mov.w	r3, #4294967295
 8011d3a:	e135      	b.n	8011fa8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8011d3c:	7e7b      	ldrb	r3, [r7, #25]
 8011d3e:	b29b      	uxth	r3, r3
 8011d40:	8b7a      	ldrh	r2, [r7, #26]
 8011d42:	1ad3      	subs	r3, r2, r3
 8011d44:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8011d46:	69fb      	ldr	r3, [r7, #28]
 8011d48:	88db      	ldrh	r3, [r3, #6]
 8011d4a:	b29b      	uxth	r3, r3
 8011d4c:	4618      	mov	r0, r3
 8011d4e:	f7f6 fc4b 	bl	80085e8 <lwip_htons>
 8011d52:	4603      	mov	r3, r0
 8011d54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011d58:	b29b      	uxth	r3, r3
 8011d5a:	00db      	lsls	r3, r3, #3
 8011d5c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8011d5e:	68bb      	ldr	r3, [r7, #8]
 8011d60:	685b      	ldr	r3, [r3, #4]
 8011d62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 8011d64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d66:	2200      	movs	r2, #0
 8011d68:	701a      	strb	r2, [r3, #0]
 8011d6a:	2200      	movs	r2, #0
 8011d6c:	705a      	strb	r2, [r3, #1]
 8011d6e:	2200      	movs	r2, #0
 8011d70:	709a      	strb	r2, [r3, #2]
 8011d72:	2200      	movs	r2, #0
 8011d74:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8011d76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d78:	8afa      	ldrh	r2, [r7, #22]
 8011d7a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8011d7c:	8afa      	ldrh	r2, [r7, #22]
 8011d7e:	8b7b      	ldrh	r3, [r7, #26]
 8011d80:	4413      	add	r3, r2
 8011d82:	b29a      	uxth	r2, r3
 8011d84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d86:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8011d88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d8a:	88db      	ldrh	r3, [r3, #6]
 8011d8c:	b29b      	uxth	r3, r3
 8011d8e:	8afa      	ldrh	r2, [r7, #22]
 8011d90:	429a      	cmp	r2, r3
 8011d92:	d902      	bls.n	8011d9a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011d94:	f04f 33ff 	mov.w	r3, #4294967295
 8011d98:	e106      	b.n	8011fa8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8011d9a:	68fb      	ldr	r3, [r7, #12]
 8011d9c:	685b      	ldr	r3, [r3, #4]
 8011d9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8011da0:	e068      	b.n	8011e74 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8011da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011da4:	685b      	ldr	r3, [r3, #4]
 8011da6:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8011da8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011daa:	889b      	ldrh	r3, [r3, #4]
 8011dac:	b29a      	uxth	r2, r3
 8011dae:	693b      	ldr	r3, [r7, #16]
 8011db0:	889b      	ldrh	r3, [r3, #4]
 8011db2:	b29b      	uxth	r3, r3
 8011db4:	429a      	cmp	r2, r3
 8011db6:	d235      	bcs.n	8011e24 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8011db8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011dba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011dbc:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8011dbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	d020      	beq.n	8011e06 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8011dc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011dc6:	889b      	ldrh	r3, [r3, #4]
 8011dc8:	b29a      	uxth	r2, r3
 8011dca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011dcc:	88db      	ldrh	r3, [r3, #6]
 8011dce:	b29b      	uxth	r3, r3
 8011dd0:	429a      	cmp	r2, r3
 8011dd2:	d307      	bcc.n	8011de4 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8011dd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011dd6:	88db      	ldrh	r3, [r3, #6]
 8011dd8:	b29a      	uxth	r2, r3
 8011dda:	693b      	ldr	r3, [r7, #16]
 8011ddc:	889b      	ldrh	r3, [r3, #4]
 8011dde:	b29b      	uxth	r3, r3
 8011de0:	429a      	cmp	r2, r3
 8011de2:	d902      	bls.n	8011dea <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011de4:	f04f 33ff 	mov.w	r3, #4294967295
 8011de8:	e0de      	b.n	8011fa8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8011dea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011dec:	68ba      	ldr	r2, [r7, #8]
 8011dee:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8011df0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011df2:	88db      	ldrh	r3, [r3, #6]
 8011df4:	b29a      	uxth	r2, r3
 8011df6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011df8:	889b      	ldrh	r3, [r3, #4]
 8011dfa:	b29b      	uxth	r3, r3
 8011dfc:	429a      	cmp	r2, r3
 8011dfe:	d03d      	beq.n	8011e7c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8011e00:	2300      	movs	r3, #0
 8011e02:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8011e04:	e03a      	b.n	8011e7c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8011e06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011e08:	88db      	ldrh	r3, [r3, #6]
 8011e0a:	b29a      	uxth	r2, r3
 8011e0c:	693b      	ldr	r3, [r7, #16]
 8011e0e:	889b      	ldrh	r3, [r3, #4]
 8011e10:	b29b      	uxth	r3, r3
 8011e12:	429a      	cmp	r2, r3
 8011e14:	d902      	bls.n	8011e1c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011e16:	f04f 33ff 	mov.w	r3, #4294967295
 8011e1a:	e0c5      	b.n	8011fa8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8011e1c:	68fb      	ldr	r3, [r7, #12]
 8011e1e:	68ba      	ldr	r2, [r7, #8]
 8011e20:	605a      	str	r2, [r3, #4]
      break;
 8011e22:	e02b      	b.n	8011e7c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8011e24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011e26:	889b      	ldrh	r3, [r3, #4]
 8011e28:	b29a      	uxth	r2, r3
 8011e2a:	693b      	ldr	r3, [r7, #16]
 8011e2c:	889b      	ldrh	r3, [r3, #4]
 8011e2e:	b29b      	uxth	r3, r3
 8011e30:	429a      	cmp	r2, r3
 8011e32:	d102      	bne.n	8011e3a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011e34:	f04f 33ff 	mov.w	r3, #4294967295
 8011e38:	e0b6      	b.n	8011fa8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8011e3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011e3c:	889b      	ldrh	r3, [r3, #4]
 8011e3e:	b29a      	uxth	r2, r3
 8011e40:	693b      	ldr	r3, [r7, #16]
 8011e42:	88db      	ldrh	r3, [r3, #6]
 8011e44:	b29b      	uxth	r3, r3
 8011e46:	429a      	cmp	r2, r3
 8011e48:	d202      	bcs.n	8011e50 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8011e4e:	e0ab      	b.n	8011fa8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8011e50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d009      	beq.n	8011e6a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8011e56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e58:	88db      	ldrh	r3, [r3, #6]
 8011e5a:	b29a      	uxth	r2, r3
 8011e5c:	693b      	ldr	r3, [r7, #16]
 8011e5e:	889b      	ldrh	r3, [r3, #4]
 8011e60:	b29b      	uxth	r3, r3
 8011e62:	429a      	cmp	r2, r3
 8011e64:	d001      	beq.n	8011e6a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8011e66:	2300      	movs	r3, #0
 8011e68:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8011e6a:	693b      	ldr	r3, [r7, #16]
 8011e6c:	681b      	ldr	r3, [r3, #0]
 8011e6e:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 8011e70:	693b      	ldr	r3, [r7, #16]
 8011e72:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 8011e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e76:	2b00      	cmp	r3, #0
 8011e78:	d193      	bne.n	8011da2 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8011e7a:	e000      	b.n	8011e7e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8011e7c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8011e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e80:	2b00      	cmp	r3, #0
 8011e82:	d12d      	bne.n	8011ee0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8011e84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e86:	2b00      	cmp	r3, #0
 8011e88:	d01c      	beq.n	8011ec4 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8011e8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e8c:	88db      	ldrh	r3, [r3, #6]
 8011e8e:	b29a      	uxth	r2, r3
 8011e90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011e92:	889b      	ldrh	r3, [r3, #4]
 8011e94:	b29b      	uxth	r3, r3
 8011e96:	429a      	cmp	r2, r3
 8011e98:	d906      	bls.n	8011ea8 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8011e9a:	4b45      	ldr	r3, [pc, #276]	@ (8011fb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011e9c:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 8011ea0:	4944      	ldr	r1, [pc, #272]	@ (8011fb4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8011ea2:	4845      	ldr	r0, [pc, #276]	@ (8011fb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011ea4:	f000 feee 	bl	8012c84 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8011ea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011eaa:	68ba      	ldr	r2, [r7, #8]
 8011eac:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8011eae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011eb0:	88db      	ldrh	r3, [r3, #6]
 8011eb2:	b29a      	uxth	r2, r3
 8011eb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011eb6:	889b      	ldrh	r3, [r3, #4]
 8011eb8:	b29b      	uxth	r3, r3
 8011eba:	429a      	cmp	r2, r3
 8011ebc:	d010      	beq.n	8011ee0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8011ebe:	2300      	movs	r3, #0
 8011ec0:	623b      	str	r3, [r7, #32]
 8011ec2:	e00d      	b.n	8011ee0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8011ec4:	68fb      	ldr	r3, [r7, #12]
 8011ec6:	685b      	ldr	r3, [r3, #4]
 8011ec8:	2b00      	cmp	r3, #0
 8011eca:	d006      	beq.n	8011eda <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8011ecc:	4b38      	ldr	r3, [pc, #224]	@ (8011fb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011ece:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 8011ed2:	493a      	ldr	r1, [pc, #232]	@ (8011fbc <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8011ed4:	4838      	ldr	r0, [pc, #224]	@ (8011fb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011ed6:	f000 fed5 	bl	8012c84 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8011eda:	68fb      	ldr	r3, [r7, #12]
 8011edc:	68ba      	ldr	r2, [r7, #8]
 8011ede:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	2b00      	cmp	r3, #0
 8011ee4:	d105      	bne.n	8011ef2 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8011ee6:	68fb      	ldr	r3, [r7, #12]
 8011ee8:	7f9b      	ldrb	r3, [r3, #30]
 8011eea:	f003 0301 	and.w	r3, r3, #1
 8011eee:	2b00      	cmp	r3, #0
 8011ef0:	d059      	beq.n	8011fa6 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8011ef2:	6a3b      	ldr	r3, [r7, #32]
 8011ef4:	2b00      	cmp	r3, #0
 8011ef6:	d04f      	beq.n	8011f98 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8011ef8:	68fb      	ldr	r3, [r7, #12]
 8011efa:	685b      	ldr	r3, [r3, #4]
 8011efc:	2b00      	cmp	r3, #0
 8011efe:	d006      	beq.n	8011f0e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8011f00:	68fb      	ldr	r3, [r7, #12]
 8011f02:	685b      	ldr	r3, [r3, #4]
 8011f04:	685b      	ldr	r3, [r3, #4]
 8011f06:	889b      	ldrh	r3, [r3, #4]
 8011f08:	b29b      	uxth	r3, r3
 8011f0a:	2b00      	cmp	r3, #0
 8011f0c:	d002      	beq.n	8011f14 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8011f0e:	2300      	movs	r3, #0
 8011f10:	623b      	str	r3, [r7, #32]
 8011f12:	e041      	b.n	8011f98 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8011f14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011f16:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 8011f18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011f1a:	681b      	ldr	r3, [r3, #0]
 8011f1c:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8011f1e:	e012      	b.n	8011f46 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8011f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f22:	685b      	ldr	r3, [r3, #4]
 8011f24:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 8011f26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f28:	88db      	ldrh	r3, [r3, #6]
 8011f2a:	b29a      	uxth	r2, r3
 8011f2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011f2e:	889b      	ldrh	r3, [r3, #4]
 8011f30:	b29b      	uxth	r3, r3
 8011f32:	429a      	cmp	r2, r3
 8011f34:	d002      	beq.n	8011f3c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8011f36:	2300      	movs	r3, #0
 8011f38:	623b      	str	r3, [r7, #32]
            break;
 8011f3a:	e007      	b.n	8011f4c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8011f3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011f3e:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8011f40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011f42:	681b      	ldr	r3, [r3, #0]
 8011f44:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8011f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	d1e9      	bne.n	8011f20 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8011f4c:	6a3b      	ldr	r3, [r7, #32]
 8011f4e:	2b00      	cmp	r3, #0
 8011f50:	d022      	beq.n	8011f98 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8011f52:	68fb      	ldr	r3, [r7, #12]
 8011f54:	685b      	ldr	r3, [r3, #4]
 8011f56:	2b00      	cmp	r3, #0
 8011f58:	d106      	bne.n	8011f68 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8011f5a:	4b15      	ldr	r3, [pc, #84]	@ (8011fb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011f5c:	f240 12df 	movw	r2, #479	@ 0x1df
 8011f60:	4917      	ldr	r1, [pc, #92]	@ (8011fc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8011f62:	4815      	ldr	r0, [pc, #84]	@ (8011fb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011f64:	f000 fe8e 	bl	8012c84 <iprintf>
          LWIP_ASSERT("sanity check",
 8011f68:	68fb      	ldr	r3, [r7, #12]
 8011f6a:	685b      	ldr	r3, [r3, #4]
 8011f6c:	685b      	ldr	r3, [r3, #4]
 8011f6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011f70:	429a      	cmp	r2, r3
 8011f72:	d106      	bne.n	8011f82 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8011f74:	4b0e      	ldr	r3, [pc, #56]	@ (8011fb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011f76:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8011f7a:	4911      	ldr	r1, [pc, #68]	@ (8011fc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8011f7c:	480e      	ldr	r0, [pc, #56]	@ (8011fb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011f7e:	f000 fe81 	bl	8012c84 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8011f82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011f84:	681b      	ldr	r3, [r3, #0]
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	d006      	beq.n	8011f98 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8011f8a:	4b09      	ldr	r3, [pc, #36]	@ (8011fb0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011f8c:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8011f90:	490c      	ldr	r1, [pc, #48]	@ (8011fc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8011f92:	4809      	ldr	r0, [pc, #36]	@ (8011fb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011f94:	f000 fe76 	bl	8012c84 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8011f98:	6a3b      	ldr	r3, [r7, #32]
 8011f9a:	2b00      	cmp	r3, #0
 8011f9c:	bf14      	ite	ne
 8011f9e:	2301      	movne	r3, #1
 8011fa0:	2300      	moveq	r3, #0
 8011fa2:	b2db      	uxtb	r3, r3
 8011fa4:	e000      	b.n	8011fa8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8011fa6:	2300      	movs	r3, #0
}
 8011fa8:	4618      	mov	r0, r3
 8011faa:	3730      	adds	r7, #48	@ 0x30
 8011fac:	46bd      	mov	sp, r7
 8011fae:	bd80      	pop	{r7, pc}
 8011fb0:	0801658c 	.word	0x0801658c
 8011fb4:	08016670 	.word	0x08016670
 8011fb8:	080165d4 	.word	0x080165d4
 8011fbc:	08016690 	.word	0x08016690
 8011fc0:	080166c8 	.word	0x080166c8
 8011fc4:	080166d8 	.word	0x080166d8

08011fc8 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8011fc8:	b580      	push	{r7, lr}
 8011fca:	b08e      	sub	sp, #56	@ 0x38
 8011fcc:	af00      	add	r7, sp, #0
 8011fce:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	685b      	ldr	r3, [r3, #4]
 8011fd4:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8011fd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011fd8:	781b      	ldrb	r3, [r3, #0]
 8011fda:	f003 030f 	and.w	r3, r3, #15
 8011fde:	b2db      	uxtb	r3, r3
 8011fe0:	009b      	lsls	r3, r3, #2
 8011fe2:	b2db      	uxtb	r3, r3
 8011fe4:	2b14      	cmp	r3, #20
 8011fe6:	f040 8171 	bne.w	80122cc <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8011fea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011fec:	88db      	ldrh	r3, [r3, #6]
 8011fee:	b29b      	uxth	r3, r3
 8011ff0:	4618      	mov	r0, r3
 8011ff2:	f7f6 faf9 	bl	80085e8 <lwip_htons>
 8011ff6:	4603      	mov	r3, r0
 8011ff8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011ffc:	b29b      	uxth	r3, r3
 8011ffe:	00db      	lsls	r3, r3, #3
 8012000:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8012002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012004:	885b      	ldrh	r3, [r3, #2]
 8012006:	b29b      	uxth	r3, r3
 8012008:	4618      	mov	r0, r3
 801200a:	f7f6 faed 	bl	80085e8 <lwip_htons>
 801200e:	4603      	mov	r3, r0
 8012010:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8012012:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012014:	781b      	ldrb	r3, [r3, #0]
 8012016:	f003 030f 	and.w	r3, r3, #15
 801201a:	b2db      	uxtb	r3, r3
 801201c:	009b      	lsls	r3, r3, #2
 801201e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 8012022:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8012026:	b29b      	uxth	r3, r3
 8012028:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801202a:	429a      	cmp	r2, r3
 801202c:	f0c0 8150 	bcc.w	80122d0 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8012030:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8012034:	b29b      	uxth	r3, r3
 8012036:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8012038:	1ad3      	subs	r3, r2, r3
 801203a:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801203c:	6878      	ldr	r0, [r7, #4]
 801203e:	f7f7 feb9 	bl	8009db4 <pbuf_clen>
 8012042:	4603      	mov	r3, r0
 8012044:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8012046:	4b8c      	ldr	r3, [pc, #560]	@ (8012278 <ip4_reass+0x2b0>)
 8012048:	881b      	ldrh	r3, [r3, #0]
 801204a:	461a      	mov	r2, r3
 801204c:	8c3b      	ldrh	r3, [r7, #32]
 801204e:	4413      	add	r3, r2
 8012050:	2b0a      	cmp	r3, #10
 8012052:	dd10      	ble.n	8012076 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8012054:	8c3b      	ldrh	r3, [r7, #32]
 8012056:	4619      	mov	r1, r3
 8012058:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801205a:	f7ff fd81 	bl	8011b60 <ip_reass_remove_oldest_datagram>
 801205e:	4603      	mov	r3, r0
 8012060:	2b00      	cmp	r3, #0
 8012062:	f000 8137 	beq.w	80122d4 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8012066:	4b84      	ldr	r3, [pc, #528]	@ (8012278 <ip4_reass+0x2b0>)
 8012068:	881b      	ldrh	r3, [r3, #0]
 801206a:	461a      	mov	r2, r3
 801206c:	8c3b      	ldrh	r3, [r7, #32]
 801206e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8012070:	2b0a      	cmp	r3, #10
 8012072:	f300 812f 	bgt.w	80122d4 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8012076:	4b81      	ldr	r3, [pc, #516]	@ (801227c <ip4_reass+0x2b4>)
 8012078:	681b      	ldr	r3, [r3, #0]
 801207a:	633b      	str	r3, [r7, #48]	@ 0x30
 801207c:	e015      	b.n	80120aa <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801207e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012080:	695a      	ldr	r2, [r3, #20]
 8012082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012084:	68db      	ldr	r3, [r3, #12]
 8012086:	429a      	cmp	r2, r3
 8012088:	d10c      	bne.n	80120a4 <ip4_reass+0xdc>
 801208a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801208c:	699a      	ldr	r2, [r3, #24]
 801208e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012090:	691b      	ldr	r3, [r3, #16]
 8012092:	429a      	cmp	r2, r3
 8012094:	d106      	bne.n	80120a4 <ip4_reass+0xdc>
 8012096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012098:	899a      	ldrh	r2, [r3, #12]
 801209a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801209c:	889b      	ldrh	r3, [r3, #4]
 801209e:	b29b      	uxth	r3, r3
 80120a0:	429a      	cmp	r2, r3
 80120a2:	d006      	beq.n	80120b2 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80120a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80120a6:	681b      	ldr	r3, [r3, #0]
 80120a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80120aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	d1e6      	bne.n	801207e <ip4_reass+0xb6>
 80120b0:	e000      	b.n	80120b4 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80120b2:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80120b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80120b6:	2b00      	cmp	r3, #0
 80120b8:	d109      	bne.n	80120ce <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80120ba:	8c3b      	ldrh	r3, [r7, #32]
 80120bc:	4619      	mov	r1, r3
 80120be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80120c0:	f7ff fdb0 	bl	8011c24 <ip_reass_enqueue_new_datagram>
 80120c4:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80120c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80120c8:	2b00      	cmp	r3, #0
 80120ca:	d11c      	bne.n	8012106 <ip4_reass+0x13e>
      goto nullreturn;
 80120cc:	e105      	b.n	80122da <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80120ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80120d0:	88db      	ldrh	r3, [r3, #6]
 80120d2:	b29b      	uxth	r3, r3
 80120d4:	4618      	mov	r0, r3
 80120d6:	f7f6 fa87 	bl	80085e8 <lwip_htons>
 80120da:	4603      	mov	r3, r0
 80120dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80120e0:	2b00      	cmp	r3, #0
 80120e2:	d110      	bne.n	8012106 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80120e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80120e6:	89db      	ldrh	r3, [r3, #14]
 80120e8:	4618      	mov	r0, r3
 80120ea:	f7f6 fa7d 	bl	80085e8 <lwip_htons>
 80120ee:	4603      	mov	r3, r0
 80120f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	d006      	beq.n	8012106 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80120f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80120fa:	3308      	adds	r3, #8
 80120fc:	2214      	movs	r2, #20
 80120fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8012100:	4618      	mov	r0, r3
 8012102:	f000 fefe 	bl	8012f02 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8012106:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012108:	88db      	ldrh	r3, [r3, #6]
 801210a:	b29b      	uxth	r3, r3
 801210c:	f003 0320 	and.w	r3, r3, #32
 8012110:	2b00      	cmp	r3, #0
 8012112:	bf0c      	ite	eq
 8012114:	2301      	moveq	r3, #1
 8012116:	2300      	movne	r3, #0
 8012118:	b2db      	uxtb	r3, r3
 801211a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801211c:	69fb      	ldr	r3, [r7, #28]
 801211e:	2b00      	cmp	r3, #0
 8012120:	d00e      	beq.n	8012140 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8012122:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8012124:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012126:	4413      	add	r3, r2
 8012128:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801212a:	8b7a      	ldrh	r2, [r7, #26]
 801212c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801212e:	429a      	cmp	r2, r3
 8012130:	f0c0 80a0 	bcc.w	8012274 <ip4_reass+0x2ac>
 8012134:	8b7b      	ldrh	r3, [r7, #26]
 8012136:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 801213a:	4293      	cmp	r3, r2
 801213c:	f200 809a 	bhi.w	8012274 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8012140:	69fa      	ldr	r2, [r7, #28]
 8012142:	6879      	ldr	r1, [r7, #4]
 8012144:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012146:	f7ff fdd5 	bl	8011cf4 <ip_reass_chain_frag_into_datagram_and_validate>
 801214a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801214c:	697b      	ldr	r3, [r7, #20]
 801214e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012152:	f000 809b 	beq.w	801228c <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8012156:	4b48      	ldr	r3, [pc, #288]	@ (8012278 <ip4_reass+0x2b0>)
 8012158:	881a      	ldrh	r2, [r3, #0]
 801215a:	8c3b      	ldrh	r3, [r7, #32]
 801215c:	4413      	add	r3, r2
 801215e:	b29a      	uxth	r2, r3
 8012160:	4b45      	ldr	r3, [pc, #276]	@ (8012278 <ip4_reass+0x2b0>)
 8012162:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8012164:	69fb      	ldr	r3, [r7, #28]
 8012166:	2b00      	cmp	r3, #0
 8012168:	d00d      	beq.n	8012186 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801216a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801216c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801216e:	4413      	add	r3, r2
 8012170:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8012172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012174:	8a7a      	ldrh	r2, [r7, #18]
 8012176:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8012178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801217a:	7f9b      	ldrb	r3, [r3, #30]
 801217c:	f043 0301 	orr.w	r3, r3, #1
 8012180:	b2da      	uxtb	r2, r3
 8012182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012184:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8012186:	697b      	ldr	r3, [r7, #20]
 8012188:	2b01      	cmp	r3, #1
 801218a:	d171      	bne.n	8012270 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801218c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801218e:	8b9b      	ldrh	r3, [r3, #28]
 8012190:	3314      	adds	r3, #20
 8012192:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8012194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012196:	685b      	ldr	r3, [r3, #4]
 8012198:	685b      	ldr	r3, [r3, #4]
 801219a:	681b      	ldr	r3, [r3, #0]
 801219c:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801219e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80121a0:	685b      	ldr	r3, [r3, #4]
 80121a2:	685b      	ldr	r3, [r3, #4]
 80121a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80121a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80121a8:	3308      	adds	r3, #8
 80121aa:	2214      	movs	r2, #20
 80121ac:	4619      	mov	r1, r3
 80121ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80121b0:	f000 fea7 	bl	8012f02 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80121b4:	8a3b      	ldrh	r3, [r7, #16]
 80121b6:	4618      	mov	r0, r3
 80121b8:	f7f6 fa16 	bl	80085e8 <lwip_htons>
 80121bc:	4603      	mov	r3, r0
 80121be:	461a      	mov	r2, r3
 80121c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80121c2:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80121c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80121c6:	2200      	movs	r2, #0
 80121c8:	719a      	strb	r2, [r3, #6]
 80121ca:	2200      	movs	r2, #0
 80121cc:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80121ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80121d0:	2200      	movs	r2, #0
 80121d2:	729a      	strb	r2, [r3, #10]
 80121d4:	2200      	movs	r2, #0
 80121d6:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80121d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80121da:	685b      	ldr	r3, [r3, #4]
 80121dc:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80121de:	e00d      	b.n	80121fc <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80121e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80121e2:	685b      	ldr	r3, [r3, #4]
 80121e4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80121e6:	2114      	movs	r1, #20
 80121e8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80121ea:	f7f7 fcd5 	bl	8009b98 <pbuf_remove_header>
      pbuf_cat(p, r);
 80121ee:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80121f0:	6878      	ldr	r0, [r7, #4]
 80121f2:	f7f7 fe19 	bl	8009e28 <pbuf_cat>
      r = iprh->next_pbuf;
 80121f6:	68fb      	ldr	r3, [r7, #12]
 80121f8:	681b      	ldr	r3, [r3, #0]
 80121fa:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 80121fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80121fe:	2b00      	cmp	r3, #0
 8012200:	d1ee      	bne.n	80121e0 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8012202:	4b1e      	ldr	r3, [pc, #120]	@ (801227c <ip4_reass+0x2b4>)
 8012204:	681b      	ldr	r3, [r3, #0]
 8012206:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012208:	429a      	cmp	r2, r3
 801220a:	d102      	bne.n	8012212 <ip4_reass+0x24a>
      ipr_prev = NULL;
 801220c:	2300      	movs	r3, #0
 801220e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012210:	e010      	b.n	8012234 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8012212:	4b1a      	ldr	r3, [pc, #104]	@ (801227c <ip4_reass+0x2b4>)
 8012214:	681b      	ldr	r3, [r3, #0]
 8012216:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012218:	e007      	b.n	801222a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801221a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801221c:	681b      	ldr	r3, [r3, #0]
 801221e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012220:	429a      	cmp	r2, r3
 8012222:	d006      	beq.n	8012232 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8012224:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012226:	681b      	ldr	r3, [r3, #0]
 8012228:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801222a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801222c:	2b00      	cmp	r3, #0
 801222e:	d1f4      	bne.n	801221a <ip4_reass+0x252>
 8012230:	e000      	b.n	8012234 <ip4_reass+0x26c>
          break;
 8012232:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8012234:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012236:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012238:	f7ff fd2e 	bl	8011c98 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801223c:	6878      	ldr	r0, [r7, #4]
 801223e:	f7f7 fdb9 	bl	8009db4 <pbuf_clen>
 8012242:	4603      	mov	r3, r0
 8012244:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8012246:	4b0c      	ldr	r3, [pc, #48]	@ (8012278 <ip4_reass+0x2b0>)
 8012248:	881b      	ldrh	r3, [r3, #0]
 801224a:	8c3a      	ldrh	r2, [r7, #32]
 801224c:	429a      	cmp	r2, r3
 801224e:	d906      	bls.n	801225e <ip4_reass+0x296>
 8012250:	4b0b      	ldr	r3, [pc, #44]	@ (8012280 <ip4_reass+0x2b8>)
 8012252:	f240 229b 	movw	r2, #667	@ 0x29b
 8012256:	490b      	ldr	r1, [pc, #44]	@ (8012284 <ip4_reass+0x2bc>)
 8012258:	480b      	ldr	r0, [pc, #44]	@ (8012288 <ip4_reass+0x2c0>)
 801225a:	f000 fd13 	bl	8012c84 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801225e:	4b06      	ldr	r3, [pc, #24]	@ (8012278 <ip4_reass+0x2b0>)
 8012260:	881a      	ldrh	r2, [r3, #0]
 8012262:	8c3b      	ldrh	r3, [r7, #32]
 8012264:	1ad3      	subs	r3, r2, r3
 8012266:	b29a      	uxth	r2, r3
 8012268:	4b03      	ldr	r3, [pc, #12]	@ (8012278 <ip4_reass+0x2b0>)
 801226a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801226c:	687b      	ldr	r3, [r7, #4]
 801226e:	e038      	b.n	80122e2 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8012270:	2300      	movs	r3, #0
 8012272:	e036      	b.n	80122e2 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8012274:	bf00      	nop
 8012276:	e00a      	b.n	801228e <ip4_reass+0x2c6>
 8012278:	20008a64 	.word	0x20008a64
 801227c:	20008a60 	.word	0x20008a60
 8012280:	0801658c 	.word	0x0801658c
 8012284:	080166fc 	.word	0x080166fc
 8012288:	080165d4 	.word	0x080165d4
    goto nullreturn_ipr;
 801228c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801228e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012290:	2b00      	cmp	r3, #0
 8012292:	d106      	bne.n	80122a2 <ip4_reass+0x2da>
 8012294:	4b15      	ldr	r3, [pc, #84]	@ (80122ec <ip4_reass+0x324>)
 8012296:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 801229a:	4915      	ldr	r1, [pc, #84]	@ (80122f0 <ip4_reass+0x328>)
 801229c:	4815      	ldr	r0, [pc, #84]	@ (80122f4 <ip4_reass+0x32c>)
 801229e:	f000 fcf1 	bl	8012c84 <iprintf>
  if (ipr->p == NULL) {
 80122a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80122a4:	685b      	ldr	r3, [r3, #4]
 80122a6:	2b00      	cmp	r3, #0
 80122a8:	d116      	bne.n	80122d8 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80122aa:	4b13      	ldr	r3, [pc, #76]	@ (80122f8 <ip4_reass+0x330>)
 80122ac:	681b      	ldr	r3, [r3, #0]
 80122ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80122b0:	429a      	cmp	r2, r3
 80122b2:	d006      	beq.n	80122c2 <ip4_reass+0x2fa>
 80122b4:	4b0d      	ldr	r3, [pc, #52]	@ (80122ec <ip4_reass+0x324>)
 80122b6:	f240 22ab 	movw	r2, #683	@ 0x2ab
 80122ba:	4910      	ldr	r1, [pc, #64]	@ (80122fc <ip4_reass+0x334>)
 80122bc:	480d      	ldr	r0, [pc, #52]	@ (80122f4 <ip4_reass+0x32c>)
 80122be:	f000 fce1 	bl	8012c84 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80122c2:	2100      	movs	r1, #0
 80122c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80122c6:	f7ff fce7 	bl	8011c98 <ip_reass_dequeue_datagram>
 80122ca:	e006      	b.n	80122da <ip4_reass+0x312>
    goto nullreturn;
 80122cc:	bf00      	nop
 80122ce:	e004      	b.n	80122da <ip4_reass+0x312>
    goto nullreturn;
 80122d0:	bf00      	nop
 80122d2:	e002      	b.n	80122da <ip4_reass+0x312>
      goto nullreturn;
 80122d4:	bf00      	nop
 80122d6:	e000      	b.n	80122da <ip4_reass+0x312>
  }

nullreturn:
 80122d8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80122da:	6878      	ldr	r0, [r7, #4]
 80122dc:	f7f7 fce2 	bl	8009ca4 <pbuf_free>
  return NULL;
 80122e0:	2300      	movs	r3, #0
}
 80122e2:	4618      	mov	r0, r3
 80122e4:	3738      	adds	r7, #56	@ 0x38
 80122e6:	46bd      	mov	sp, r7
 80122e8:	bd80      	pop	{r7, pc}
 80122ea:	bf00      	nop
 80122ec:	0801658c 	.word	0x0801658c
 80122f0:	08016718 	.word	0x08016718
 80122f4:	080165d4 	.word	0x080165d4
 80122f8:	20008a60 	.word	0x20008a60
 80122fc:	08016724 	.word	0x08016724

08012300 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8012300:	b580      	push	{r7, lr}
 8012302:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8012304:	2005      	movs	r0, #5
 8012306:	f7f6 fde7 	bl	8008ed8 <memp_malloc>
 801230a:	4603      	mov	r3, r0
}
 801230c:	4618      	mov	r0, r3
 801230e:	bd80      	pop	{r7, pc}

08012310 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8012310:	b580      	push	{r7, lr}
 8012312:	b082      	sub	sp, #8
 8012314:	af00      	add	r7, sp, #0
 8012316:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	2b00      	cmp	r3, #0
 801231c:	d106      	bne.n	801232c <ip_frag_free_pbuf_custom_ref+0x1c>
 801231e:	4b07      	ldr	r3, [pc, #28]	@ (801233c <ip_frag_free_pbuf_custom_ref+0x2c>)
 8012320:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 8012324:	4906      	ldr	r1, [pc, #24]	@ (8012340 <ip_frag_free_pbuf_custom_ref+0x30>)
 8012326:	4807      	ldr	r0, [pc, #28]	@ (8012344 <ip_frag_free_pbuf_custom_ref+0x34>)
 8012328:	f000 fcac 	bl	8012c84 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801232c:	6879      	ldr	r1, [r7, #4]
 801232e:	2005      	movs	r0, #5
 8012330:	f7f6 fe42 	bl	8008fb8 <memp_free>
}
 8012334:	bf00      	nop
 8012336:	3708      	adds	r7, #8
 8012338:	46bd      	mov	sp, r7
 801233a:	bd80      	pop	{r7, pc}
 801233c:	0801658c 	.word	0x0801658c
 8012340:	08016744 	.word	0x08016744
 8012344:	080165d4 	.word	0x080165d4

08012348 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8012348:	b580      	push	{r7, lr}
 801234a:	b084      	sub	sp, #16
 801234c:	af00      	add	r7, sp, #0
 801234e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8012354:	68fb      	ldr	r3, [r7, #12]
 8012356:	2b00      	cmp	r3, #0
 8012358:	d106      	bne.n	8012368 <ipfrag_free_pbuf_custom+0x20>
 801235a:	4b11      	ldr	r3, [pc, #68]	@ (80123a0 <ipfrag_free_pbuf_custom+0x58>)
 801235c:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8012360:	4910      	ldr	r1, [pc, #64]	@ (80123a4 <ipfrag_free_pbuf_custom+0x5c>)
 8012362:	4811      	ldr	r0, [pc, #68]	@ (80123a8 <ipfrag_free_pbuf_custom+0x60>)
 8012364:	f000 fc8e 	bl	8012c84 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8012368:	68fa      	ldr	r2, [r7, #12]
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	429a      	cmp	r2, r3
 801236e:	d006      	beq.n	801237e <ipfrag_free_pbuf_custom+0x36>
 8012370:	4b0b      	ldr	r3, [pc, #44]	@ (80123a0 <ipfrag_free_pbuf_custom+0x58>)
 8012372:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8012376:	490d      	ldr	r1, [pc, #52]	@ (80123ac <ipfrag_free_pbuf_custom+0x64>)
 8012378:	480b      	ldr	r0, [pc, #44]	@ (80123a8 <ipfrag_free_pbuf_custom+0x60>)
 801237a:	f000 fc83 	bl	8012c84 <iprintf>
  if (pcr->original != NULL) {
 801237e:	68fb      	ldr	r3, [r7, #12]
 8012380:	695b      	ldr	r3, [r3, #20]
 8012382:	2b00      	cmp	r3, #0
 8012384:	d004      	beq.n	8012390 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8012386:	68fb      	ldr	r3, [r7, #12]
 8012388:	695b      	ldr	r3, [r3, #20]
 801238a:	4618      	mov	r0, r3
 801238c:	f7f7 fc8a 	bl	8009ca4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8012390:	68f8      	ldr	r0, [r7, #12]
 8012392:	f7ff ffbd 	bl	8012310 <ip_frag_free_pbuf_custom_ref>
}
 8012396:	bf00      	nop
 8012398:	3710      	adds	r7, #16
 801239a:	46bd      	mov	sp, r7
 801239c:	bd80      	pop	{r7, pc}
 801239e:	bf00      	nop
 80123a0:	0801658c 	.word	0x0801658c
 80123a4:	08016750 	.word	0x08016750
 80123a8:	080165d4 	.word	0x080165d4
 80123ac:	0801675c 	.word	0x0801675c

080123b0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80123b0:	b580      	push	{r7, lr}
 80123b2:	b094      	sub	sp, #80	@ 0x50
 80123b4:	af02      	add	r7, sp, #8
 80123b6:	60f8      	str	r0, [r7, #12]
 80123b8:	60b9      	str	r1, [r7, #8]
 80123ba:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80123bc:	2300      	movs	r3, #0
 80123be:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80123c2:	68bb      	ldr	r3, [r7, #8]
 80123c4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80123c6:	3b14      	subs	r3, #20
 80123c8:	2b00      	cmp	r3, #0
 80123ca:	da00      	bge.n	80123ce <ip4_frag+0x1e>
 80123cc:	3307      	adds	r3, #7
 80123ce:	10db      	asrs	r3, r3, #3
 80123d0:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80123d2:	2314      	movs	r3, #20
 80123d4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80123d6:	68fb      	ldr	r3, [r7, #12]
 80123d8:	685b      	ldr	r3, [r3, #4]
 80123da:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 80123dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80123de:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80123e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80123e2:	781b      	ldrb	r3, [r3, #0]
 80123e4:	f003 030f 	and.w	r3, r3, #15
 80123e8:	b2db      	uxtb	r3, r3
 80123ea:	009b      	lsls	r3, r3, #2
 80123ec:	b2db      	uxtb	r3, r3
 80123ee:	2b14      	cmp	r3, #20
 80123f0:	d002      	beq.n	80123f8 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80123f2:	f06f 0305 	mvn.w	r3, #5
 80123f6:	e110      	b.n	801261a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80123f8:	68fb      	ldr	r3, [r7, #12]
 80123fa:	895b      	ldrh	r3, [r3, #10]
 80123fc:	2b13      	cmp	r3, #19
 80123fe:	d809      	bhi.n	8012414 <ip4_frag+0x64>
 8012400:	4b88      	ldr	r3, [pc, #544]	@ (8012624 <ip4_frag+0x274>)
 8012402:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 8012406:	4988      	ldr	r1, [pc, #544]	@ (8012628 <ip4_frag+0x278>)
 8012408:	4888      	ldr	r0, [pc, #544]	@ (801262c <ip4_frag+0x27c>)
 801240a:	f000 fc3b 	bl	8012c84 <iprintf>
 801240e:	f06f 0305 	mvn.w	r3, #5
 8012412:	e102      	b.n	801261a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8012414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012416:	88db      	ldrh	r3, [r3, #6]
 8012418:	b29b      	uxth	r3, r3
 801241a:	4618      	mov	r0, r3
 801241c:	f7f6 f8e4 	bl	80085e8 <lwip_htons>
 8012420:	4603      	mov	r3, r0
 8012422:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8012424:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8012426:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801242a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801242e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8012430:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8012434:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8012436:	68fb      	ldr	r3, [r7, #12]
 8012438:	891b      	ldrh	r3, [r3, #8]
 801243a:	3b14      	subs	r3, #20
 801243c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 8012440:	e0e1      	b.n	8012606 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8012442:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8012444:	00db      	lsls	r3, r3, #3
 8012446:	b29b      	uxth	r3, r3
 8012448:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801244c:	4293      	cmp	r3, r2
 801244e:	bf28      	it	cs
 8012450:	4613      	movcs	r3, r2
 8012452:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8012454:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8012458:	2114      	movs	r1, #20
 801245a:	200e      	movs	r0, #14
 801245c:	f7f7 f93e 	bl	80096dc <pbuf_alloc>
 8012460:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 8012462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012464:	2b00      	cmp	r3, #0
 8012466:	f000 80d5 	beq.w	8012614 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801246a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801246c:	895b      	ldrh	r3, [r3, #10]
 801246e:	2b13      	cmp	r3, #19
 8012470:	d806      	bhi.n	8012480 <ip4_frag+0xd0>
 8012472:	4b6c      	ldr	r3, [pc, #432]	@ (8012624 <ip4_frag+0x274>)
 8012474:	f44f 7249 	mov.w	r2, #804	@ 0x324
 8012478:	496d      	ldr	r1, [pc, #436]	@ (8012630 <ip4_frag+0x280>)
 801247a:	486c      	ldr	r0, [pc, #432]	@ (801262c <ip4_frag+0x27c>)
 801247c:	f000 fc02 	bl	8012c84 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8012480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012482:	685b      	ldr	r3, [r3, #4]
 8012484:	2214      	movs	r2, #20
 8012486:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8012488:	4618      	mov	r0, r3
 801248a:	f000 fd3a 	bl	8012f02 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801248e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012490:	685b      	ldr	r3, [r3, #4]
 8012492:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 8012494:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8012496:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 801249a:	e064      	b.n	8012566 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801249c:	68fb      	ldr	r3, [r7, #12]
 801249e:	895a      	ldrh	r2, [r3, #10]
 80124a0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80124a2:	1ad3      	subs	r3, r2, r3
 80124a4:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80124a6:	68fb      	ldr	r3, [r7, #12]
 80124a8:	895b      	ldrh	r3, [r3, #10]
 80124aa:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80124ac:	429a      	cmp	r2, r3
 80124ae:	d906      	bls.n	80124be <ip4_frag+0x10e>
 80124b0:	4b5c      	ldr	r3, [pc, #368]	@ (8012624 <ip4_frag+0x274>)
 80124b2:	f240 322d 	movw	r2, #813	@ 0x32d
 80124b6:	495f      	ldr	r1, [pc, #380]	@ (8012634 <ip4_frag+0x284>)
 80124b8:	485c      	ldr	r0, [pc, #368]	@ (801262c <ip4_frag+0x27c>)
 80124ba:	f000 fbe3 	bl	8012c84 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80124be:	8bfa      	ldrh	r2, [r7, #30]
 80124c0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80124c4:	4293      	cmp	r3, r2
 80124c6:	bf28      	it	cs
 80124c8:	4613      	movcs	r3, r2
 80124ca:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80124ce:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80124d2:	2b00      	cmp	r3, #0
 80124d4:	d105      	bne.n	80124e2 <ip4_frag+0x132>
        poff = 0;
 80124d6:	2300      	movs	r3, #0
 80124d8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 80124da:	68fb      	ldr	r3, [r7, #12]
 80124dc:	681b      	ldr	r3, [r3, #0]
 80124de:	60fb      	str	r3, [r7, #12]
        continue;
 80124e0:	e041      	b.n	8012566 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80124e2:	f7ff ff0d 	bl	8012300 <ip_frag_alloc_pbuf_custom_ref>
 80124e6:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80124e8:	69bb      	ldr	r3, [r7, #24]
 80124ea:	2b00      	cmp	r3, #0
 80124ec:	d103      	bne.n	80124f6 <ip4_frag+0x146>
        pbuf_free(rambuf);
 80124ee:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80124f0:	f7f7 fbd8 	bl	8009ca4 <pbuf_free>
        goto memerr;
 80124f4:	e08f      	b.n	8012616 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80124f6:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80124f8:	68fb      	ldr	r3, [r7, #12]
 80124fa:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80124fc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80124fe:	4413      	add	r3, r2
 8012500:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8012504:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8012508:	9201      	str	r2, [sp, #4]
 801250a:	9300      	str	r3, [sp, #0]
 801250c:	4603      	mov	r3, r0
 801250e:	2241      	movs	r2, #65	@ 0x41
 8012510:	2000      	movs	r0, #0
 8012512:	f7f7 fa0d 	bl	8009930 <pbuf_alloced_custom>
 8012516:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8012518:	697b      	ldr	r3, [r7, #20]
 801251a:	2b00      	cmp	r3, #0
 801251c:	d106      	bne.n	801252c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801251e:	69b8      	ldr	r0, [r7, #24]
 8012520:	f7ff fef6 	bl	8012310 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8012524:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012526:	f7f7 fbbd 	bl	8009ca4 <pbuf_free>
        goto memerr;
 801252a:	e074      	b.n	8012616 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801252c:	68f8      	ldr	r0, [r7, #12]
 801252e:	f7f7 fc59 	bl	8009de4 <pbuf_ref>
      pcr->original = p;
 8012532:	69bb      	ldr	r3, [r7, #24]
 8012534:	68fa      	ldr	r2, [r7, #12]
 8012536:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8012538:	69bb      	ldr	r3, [r7, #24]
 801253a:	4a3f      	ldr	r2, [pc, #252]	@ (8012638 <ip4_frag+0x288>)
 801253c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801253e:	6979      	ldr	r1, [r7, #20]
 8012540:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012542:	f7f7 fc71 	bl	8009e28 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8012546:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 801254a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801254e:	1ad3      	subs	r3, r2, r3
 8012550:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8012554:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8012558:	2b00      	cmp	r3, #0
 801255a:	d004      	beq.n	8012566 <ip4_frag+0x1b6>
        poff = 0;
 801255c:	2300      	movs	r3, #0
 801255e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8012560:	68fb      	ldr	r3, [r7, #12]
 8012562:	681b      	ldr	r3, [r3, #0]
 8012564:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8012566:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801256a:	2b00      	cmp	r3, #0
 801256c:	d196      	bne.n	801249c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801256e:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8012570:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8012574:	4413      	add	r3, r2
 8012576:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8012578:	68bb      	ldr	r3, [r7, #8]
 801257a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801257c:	f1a3 0213 	sub.w	r2, r3, #19
 8012580:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8012584:	429a      	cmp	r2, r3
 8012586:	bfcc      	ite	gt
 8012588:	2301      	movgt	r3, #1
 801258a:	2300      	movle	r3, #0
 801258c:	b2db      	uxtb	r3, r3
 801258e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8012590:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8012594:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012598:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 801259a:	6a3b      	ldr	r3, [r7, #32]
 801259c:	2b00      	cmp	r3, #0
 801259e:	d002      	beq.n	80125a6 <ip4_frag+0x1f6>
 80125a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	d003      	beq.n	80125ae <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80125a6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80125a8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80125ac:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80125ae:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80125b0:	4618      	mov	r0, r3
 80125b2:	f7f6 f819 	bl	80085e8 <lwip_htons>
 80125b6:	4603      	mov	r3, r0
 80125b8:	461a      	mov	r2, r3
 80125ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80125bc:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80125be:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80125c0:	3314      	adds	r3, #20
 80125c2:	b29b      	uxth	r3, r3
 80125c4:	4618      	mov	r0, r3
 80125c6:	f7f6 f80f 	bl	80085e8 <lwip_htons>
 80125ca:	4603      	mov	r3, r0
 80125cc:	461a      	mov	r2, r3
 80125ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80125d0:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80125d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80125d4:	2200      	movs	r2, #0
 80125d6:	729a      	strb	r2, [r3, #10]
 80125d8:	2200      	movs	r2, #0
 80125da:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80125dc:	68bb      	ldr	r3, [r7, #8]
 80125de:	695b      	ldr	r3, [r3, #20]
 80125e0:	687a      	ldr	r2, [r7, #4]
 80125e2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80125e4:	68b8      	ldr	r0, [r7, #8]
 80125e6:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80125e8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80125ea:	f7f7 fb5b 	bl	8009ca4 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80125ee:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80125f2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80125f4:	1ad3      	subs	r3, r2, r3
 80125f6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 80125fa:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 80125fe:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8012600:	4413      	add	r3, r2
 8012602:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 8012606:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801260a:	2b00      	cmp	r3, #0
 801260c:	f47f af19 	bne.w	8012442 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8012610:	2300      	movs	r3, #0
 8012612:	e002      	b.n	801261a <ip4_frag+0x26a>
      goto memerr;
 8012614:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8012616:	f04f 33ff 	mov.w	r3, #4294967295
}
 801261a:	4618      	mov	r0, r3
 801261c:	3748      	adds	r7, #72	@ 0x48
 801261e:	46bd      	mov	sp, r7
 8012620:	bd80      	pop	{r7, pc}
 8012622:	bf00      	nop
 8012624:	0801658c 	.word	0x0801658c
 8012628:	08016768 	.word	0x08016768
 801262c:	080165d4 	.word	0x080165d4
 8012630:	08016784 	.word	0x08016784
 8012634:	080167a4 	.word	0x080167a4
 8012638:	08012349 	.word	0x08012349

0801263c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801263c:	b580      	push	{r7, lr}
 801263e:	b086      	sub	sp, #24
 8012640:	af00      	add	r7, sp, #0
 8012642:	6078      	str	r0, [r7, #4]
 8012644:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8012646:	230e      	movs	r3, #14
 8012648:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801264a:	687b      	ldr	r3, [r7, #4]
 801264c:	895b      	ldrh	r3, [r3, #10]
 801264e:	2b0e      	cmp	r3, #14
 8012650:	d96e      	bls.n	8012730 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	7bdb      	ldrb	r3, [r3, #15]
 8012656:	2b00      	cmp	r3, #0
 8012658:	d106      	bne.n	8012668 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801265a:	683b      	ldr	r3, [r7, #0]
 801265c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8012660:	3301      	adds	r3, #1
 8012662:	b2da      	uxtb	r2, r3
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	685b      	ldr	r3, [r3, #4]
 801266c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801266e:	693b      	ldr	r3, [r7, #16]
 8012670:	7b1a      	ldrb	r2, [r3, #12]
 8012672:	7b5b      	ldrb	r3, [r3, #13]
 8012674:	021b      	lsls	r3, r3, #8
 8012676:	4313      	orrs	r3, r2
 8012678:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801267a:	693b      	ldr	r3, [r7, #16]
 801267c:	781b      	ldrb	r3, [r3, #0]
 801267e:	f003 0301 	and.w	r3, r3, #1
 8012682:	2b00      	cmp	r3, #0
 8012684:	d023      	beq.n	80126ce <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8012686:	693b      	ldr	r3, [r7, #16]
 8012688:	781b      	ldrb	r3, [r3, #0]
 801268a:	2b01      	cmp	r3, #1
 801268c:	d10f      	bne.n	80126ae <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801268e:	693b      	ldr	r3, [r7, #16]
 8012690:	785b      	ldrb	r3, [r3, #1]
 8012692:	2b00      	cmp	r3, #0
 8012694:	d11b      	bne.n	80126ce <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8012696:	693b      	ldr	r3, [r7, #16]
 8012698:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801269a:	2b5e      	cmp	r3, #94	@ 0x5e
 801269c:	d117      	bne.n	80126ce <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	7b5b      	ldrb	r3, [r3, #13]
 80126a2:	f043 0310 	orr.w	r3, r3, #16
 80126a6:	b2da      	uxtb	r2, r3
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	735a      	strb	r2, [r3, #13]
 80126ac:	e00f      	b.n	80126ce <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80126ae:	693b      	ldr	r3, [r7, #16]
 80126b0:	2206      	movs	r2, #6
 80126b2:	4928      	ldr	r1, [pc, #160]	@ (8012754 <ethernet_input+0x118>)
 80126b4:	4618      	mov	r0, r3
 80126b6:	f000 fb5c 	bl	8012d72 <memcmp>
 80126ba:	4603      	mov	r3, r0
 80126bc:	2b00      	cmp	r3, #0
 80126be:	d106      	bne.n	80126ce <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	7b5b      	ldrb	r3, [r3, #13]
 80126c4:	f043 0308 	orr.w	r3, r3, #8
 80126c8:	b2da      	uxtb	r2, r3
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80126ce:	89fb      	ldrh	r3, [r7, #14]
 80126d0:	2b08      	cmp	r3, #8
 80126d2:	d003      	beq.n	80126dc <ethernet_input+0xa0>
 80126d4:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 80126d8:	d014      	beq.n	8012704 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80126da:	e032      	b.n	8012742 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80126dc:	683b      	ldr	r3, [r7, #0]
 80126de:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80126e2:	f003 0308 	and.w	r3, r3, #8
 80126e6:	2b00      	cmp	r3, #0
 80126e8:	d024      	beq.n	8012734 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80126ea:	8afb      	ldrh	r3, [r7, #22]
 80126ec:	4619      	mov	r1, r3
 80126ee:	6878      	ldr	r0, [r7, #4]
 80126f0:	f7f7 fa52 	bl	8009b98 <pbuf_remove_header>
 80126f4:	4603      	mov	r3, r0
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	d11e      	bne.n	8012738 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80126fa:	6839      	ldr	r1, [r7, #0]
 80126fc:	6878      	ldr	r0, [r7, #4]
 80126fe:	f7fe ff21 	bl	8011544 <ip4_input>
      break;
 8012702:	e013      	b.n	801272c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8012704:	683b      	ldr	r3, [r7, #0]
 8012706:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801270a:	f003 0308 	and.w	r3, r3, #8
 801270e:	2b00      	cmp	r3, #0
 8012710:	d014      	beq.n	801273c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8012712:	8afb      	ldrh	r3, [r7, #22]
 8012714:	4619      	mov	r1, r3
 8012716:	6878      	ldr	r0, [r7, #4]
 8012718:	f7f7 fa3e 	bl	8009b98 <pbuf_remove_header>
 801271c:	4603      	mov	r3, r0
 801271e:	2b00      	cmp	r3, #0
 8012720:	d10e      	bne.n	8012740 <ethernet_input+0x104>
        etharp_input(p, netif);
 8012722:	6839      	ldr	r1, [r7, #0]
 8012724:	6878      	ldr	r0, [r7, #4]
 8012726:	f7fe f8c1 	bl	80108ac <etharp_input>
      break;
 801272a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801272c:	2300      	movs	r3, #0
 801272e:	e00c      	b.n	801274a <ethernet_input+0x10e>
    goto free_and_return;
 8012730:	bf00      	nop
 8012732:	e006      	b.n	8012742 <ethernet_input+0x106>
        goto free_and_return;
 8012734:	bf00      	nop
 8012736:	e004      	b.n	8012742 <ethernet_input+0x106>
        goto free_and_return;
 8012738:	bf00      	nop
 801273a:	e002      	b.n	8012742 <ethernet_input+0x106>
        goto free_and_return;
 801273c:	bf00      	nop
 801273e:	e000      	b.n	8012742 <ethernet_input+0x106>
        goto free_and_return;
 8012740:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8012742:	6878      	ldr	r0, [r7, #4]
 8012744:	f7f7 faae 	bl	8009ca4 <pbuf_free>
  return ERR_OK;
 8012748:	2300      	movs	r3, #0
}
 801274a:	4618      	mov	r0, r3
 801274c:	3718      	adds	r7, #24
 801274e:	46bd      	mov	sp, r7
 8012750:	bd80      	pop	{r7, pc}
 8012752:	bf00      	nop
 8012754:	08016940 	.word	0x08016940

08012758 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8012758:	b580      	push	{r7, lr}
 801275a:	b086      	sub	sp, #24
 801275c:	af00      	add	r7, sp, #0
 801275e:	60f8      	str	r0, [r7, #12]
 8012760:	60b9      	str	r1, [r7, #8]
 8012762:	607a      	str	r2, [r7, #4]
 8012764:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8012766:	8c3b      	ldrh	r3, [r7, #32]
 8012768:	4618      	mov	r0, r3
 801276a:	f7f5 ff3d 	bl	80085e8 <lwip_htons>
 801276e:	4603      	mov	r3, r0
 8012770:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8012772:	210e      	movs	r1, #14
 8012774:	68b8      	ldr	r0, [r7, #8]
 8012776:	f7f7 f9ff 	bl	8009b78 <pbuf_add_header>
 801277a:	4603      	mov	r3, r0
 801277c:	2b00      	cmp	r3, #0
 801277e:	d125      	bne.n	80127cc <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8012780:	68bb      	ldr	r3, [r7, #8]
 8012782:	685b      	ldr	r3, [r3, #4]
 8012784:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8012786:	693b      	ldr	r3, [r7, #16]
 8012788:	8afa      	ldrh	r2, [r7, #22]
 801278a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801278c:	693b      	ldr	r3, [r7, #16]
 801278e:	2206      	movs	r2, #6
 8012790:	6839      	ldr	r1, [r7, #0]
 8012792:	4618      	mov	r0, r3
 8012794:	f000 fbb5 	bl	8012f02 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8012798:	693b      	ldr	r3, [r7, #16]
 801279a:	3306      	adds	r3, #6
 801279c:	2206      	movs	r2, #6
 801279e:	6879      	ldr	r1, [r7, #4]
 80127a0:	4618      	mov	r0, r3
 80127a2:	f000 fbae 	bl	8012f02 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80127a6:	68fb      	ldr	r3, [r7, #12]
 80127a8:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80127ac:	2b06      	cmp	r3, #6
 80127ae:	d006      	beq.n	80127be <ethernet_output+0x66>
 80127b0:	4b0a      	ldr	r3, [pc, #40]	@ (80127dc <ethernet_output+0x84>)
 80127b2:	f44f 7299 	mov.w	r2, #306	@ 0x132
 80127b6:	490a      	ldr	r1, [pc, #40]	@ (80127e0 <ethernet_output+0x88>)
 80127b8:	480a      	ldr	r0, [pc, #40]	@ (80127e4 <ethernet_output+0x8c>)
 80127ba:	f000 fa63 	bl	8012c84 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80127be:	68fb      	ldr	r3, [r7, #12]
 80127c0:	699b      	ldr	r3, [r3, #24]
 80127c2:	68b9      	ldr	r1, [r7, #8]
 80127c4:	68f8      	ldr	r0, [r7, #12]
 80127c6:	4798      	blx	r3
 80127c8:	4603      	mov	r3, r0
 80127ca:	e002      	b.n	80127d2 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80127cc:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80127ce:	f06f 0301 	mvn.w	r3, #1
}
 80127d2:	4618      	mov	r0, r3
 80127d4:	3718      	adds	r7, #24
 80127d6:	46bd      	mov	sp, r7
 80127d8:	bd80      	pop	{r7, pc}
 80127da:	bf00      	nop
 80127dc:	080167b4 	.word	0x080167b4
 80127e0:	080167ec 	.word	0x080167ec
 80127e4:	08016820 	.word	0x08016820

080127e8 <calloc>:
 80127e8:	4b02      	ldr	r3, [pc, #8]	@ (80127f4 <calloc+0xc>)
 80127ea:	460a      	mov	r2, r1
 80127ec:	4601      	mov	r1, r0
 80127ee:	6818      	ldr	r0, [r3, #0]
 80127f0:	f000 b802 	b.w	80127f8 <_calloc_r>
 80127f4:	20000080 	.word	0x20000080

080127f8 <_calloc_r>:
 80127f8:	b570      	push	{r4, r5, r6, lr}
 80127fa:	fba1 5402 	umull	r5, r4, r1, r2
 80127fe:	b934      	cbnz	r4, 801280e <_calloc_r+0x16>
 8012800:	4629      	mov	r1, r5
 8012802:	f000 f82f 	bl	8012864 <_malloc_r>
 8012806:	4606      	mov	r6, r0
 8012808:	b928      	cbnz	r0, 8012816 <_calloc_r+0x1e>
 801280a:	4630      	mov	r0, r6
 801280c:	bd70      	pop	{r4, r5, r6, pc}
 801280e:	220c      	movs	r2, #12
 8012810:	6002      	str	r2, [r0, #0]
 8012812:	2600      	movs	r6, #0
 8012814:	e7f9      	b.n	801280a <_calloc_r+0x12>
 8012816:	462a      	mov	r2, r5
 8012818:	4621      	mov	r1, r4
 801281a:	f000 fad4 	bl	8012dc6 <memset>
 801281e:	e7f4      	b.n	801280a <_calloc_r+0x12>

08012820 <sbrk_aligned>:
 8012820:	b570      	push	{r4, r5, r6, lr}
 8012822:	4e0f      	ldr	r6, [pc, #60]	@ (8012860 <sbrk_aligned+0x40>)
 8012824:	460c      	mov	r4, r1
 8012826:	6831      	ldr	r1, [r6, #0]
 8012828:	4605      	mov	r5, r0
 801282a:	b911      	cbnz	r1, 8012832 <sbrk_aligned+0x12>
 801282c:	f000 fb1a 	bl	8012e64 <_sbrk_r>
 8012830:	6030      	str	r0, [r6, #0]
 8012832:	4621      	mov	r1, r4
 8012834:	4628      	mov	r0, r5
 8012836:	f000 fb15 	bl	8012e64 <_sbrk_r>
 801283a:	1c43      	adds	r3, r0, #1
 801283c:	d103      	bne.n	8012846 <sbrk_aligned+0x26>
 801283e:	f04f 34ff 	mov.w	r4, #4294967295
 8012842:	4620      	mov	r0, r4
 8012844:	bd70      	pop	{r4, r5, r6, pc}
 8012846:	1cc4      	adds	r4, r0, #3
 8012848:	f024 0403 	bic.w	r4, r4, #3
 801284c:	42a0      	cmp	r0, r4
 801284e:	d0f8      	beq.n	8012842 <sbrk_aligned+0x22>
 8012850:	1a21      	subs	r1, r4, r0
 8012852:	4628      	mov	r0, r5
 8012854:	f000 fb06 	bl	8012e64 <_sbrk_r>
 8012858:	3001      	adds	r0, #1
 801285a:	d1f2      	bne.n	8012842 <sbrk_aligned+0x22>
 801285c:	e7ef      	b.n	801283e <sbrk_aligned+0x1e>
 801285e:	bf00      	nop
 8012860:	20008a68 	.word	0x20008a68

08012864 <_malloc_r>:
 8012864:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012868:	1ccd      	adds	r5, r1, #3
 801286a:	f025 0503 	bic.w	r5, r5, #3
 801286e:	3508      	adds	r5, #8
 8012870:	2d0c      	cmp	r5, #12
 8012872:	bf38      	it	cc
 8012874:	250c      	movcc	r5, #12
 8012876:	2d00      	cmp	r5, #0
 8012878:	4606      	mov	r6, r0
 801287a:	db01      	blt.n	8012880 <_malloc_r+0x1c>
 801287c:	42a9      	cmp	r1, r5
 801287e:	d904      	bls.n	801288a <_malloc_r+0x26>
 8012880:	230c      	movs	r3, #12
 8012882:	6033      	str	r3, [r6, #0]
 8012884:	2000      	movs	r0, #0
 8012886:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801288a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012960 <_malloc_r+0xfc>
 801288e:	f000 f869 	bl	8012964 <__malloc_lock>
 8012892:	f8d8 3000 	ldr.w	r3, [r8]
 8012896:	461c      	mov	r4, r3
 8012898:	bb44      	cbnz	r4, 80128ec <_malloc_r+0x88>
 801289a:	4629      	mov	r1, r5
 801289c:	4630      	mov	r0, r6
 801289e:	f7ff ffbf 	bl	8012820 <sbrk_aligned>
 80128a2:	1c43      	adds	r3, r0, #1
 80128a4:	4604      	mov	r4, r0
 80128a6:	d158      	bne.n	801295a <_malloc_r+0xf6>
 80128a8:	f8d8 4000 	ldr.w	r4, [r8]
 80128ac:	4627      	mov	r7, r4
 80128ae:	2f00      	cmp	r7, #0
 80128b0:	d143      	bne.n	801293a <_malloc_r+0xd6>
 80128b2:	2c00      	cmp	r4, #0
 80128b4:	d04b      	beq.n	801294e <_malloc_r+0xea>
 80128b6:	6823      	ldr	r3, [r4, #0]
 80128b8:	4639      	mov	r1, r7
 80128ba:	4630      	mov	r0, r6
 80128bc:	eb04 0903 	add.w	r9, r4, r3
 80128c0:	f000 fad0 	bl	8012e64 <_sbrk_r>
 80128c4:	4581      	cmp	r9, r0
 80128c6:	d142      	bne.n	801294e <_malloc_r+0xea>
 80128c8:	6821      	ldr	r1, [r4, #0]
 80128ca:	1a6d      	subs	r5, r5, r1
 80128cc:	4629      	mov	r1, r5
 80128ce:	4630      	mov	r0, r6
 80128d0:	f7ff ffa6 	bl	8012820 <sbrk_aligned>
 80128d4:	3001      	adds	r0, #1
 80128d6:	d03a      	beq.n	801294e <_malloc_r+0xea>
 80128d8:	6823      	ldr	r3, [r4, #0]
 80128da:	442b      	add	r3, r5
 80128dc:	6023      	str	r3, [r4, #0]
 80128de:	f8d8 3000 	ldr.w	r3, [r8]
 80128e2:	685a      	ldr	r2, [r3, #4]
 80128e4:	bb62      	cbnz	r2, 8012940 <_malloc_r+0xdc>
 80128e6:	f8c8 7000 	str.w	r7, [r8]
 80128ea:	e00f      	b.n	801290c <_malloc_r+0xa8>
 80128ec:	6822      	ldr	r2, [r4, #0]
 80128ee:	1b52      	subs	r2, r2, r5
 80128f0:	d420      	bmi.n	8012934 <_malloc_r+0xd0>
 80128f2:	2a0b      	cmp	r2, #11
 80128f4:	d917      	bls.n	8012926 <_malloc_r+0xc2>
 80128f6:	1961      	adds	r1, r4, r5
 80128f8:	42a3      	cmp	r3, r4
 80128fa:	6025      	str	r5, [r4, #0]
 80128fc:	bf18      	it	ne
 80128fe:	6059      	strne	r1, [r3, #4]
 8012900:	6863      	ldr	r3, [r4, #4]
 8012902:	bf08      	it	eq
 8012904:	f8c8 1000 	streq.w	r1, [r8]
 8012908:	5162      	str	r2, [r4, r5]
 801290a:	604b      	str	r3, [r1, #4]
 801290c:	4630      	mov	r0, r6
 801290e:	f000 f82f 	bl	8012970 <__malloc_unlock>
 8012912:	f104 000b 	add.w	r0, r4, #11
 8012916:	1d23      	adds	r3, r4, #4
 8012918:	f020 0007 	bic.w	r0, r0, #7
 801291c:	1ac2      	subs	r2, r0, r3
 801291e:	bf1c      	itt	ne
 8012920:	1a1b      	subne	r3, r3, r0
 8012922:	50a3      	strne	r3, [r4, r2]
 8012924:	e7af      	b.n	8012886 <_malloc_r+0x22>
 8012926:	6862      	ldr	r2, [r4, #4]
 8012928:	42a3      	cmp	r3, r4
 801292a:	bf0c      	ite	eq
 801292c:	f8c8 2000 	streq.w	r2, [r8]
 8012930:	605a      	strne	r2, [r3, #4]
 8012932:	e7eb      	b.n	801290c <_malloc_r+0xa8>
 8012934:	4623      	mov	r3, r4
 8012936:	6864      	ldr	r4, [r4, #4]
 8012938:	e7ae      	b.n	8012898 <_malloc_r+0x34>
 801293a:	463c      	mov	r4, r7
 801293c:	687f      	ldr	r7, [r7, #4]
 801293e:	e7b6      	b.n	80128ae <_malloc_r+0x4a>
 8012940:	461a      	mov	r2, r3
 8012942:	685b      	ldr	r3, [r3, #4]
 8012944:	42a3      	cmp	r3, r4
 8012946:	d1fb      	bne.n	8012940 <_malloc_r+0xdc>
 8012948:	2300      	movs	r3, #0
 801294a:	6053      	str	r3, [r2, #4]
 801294c:	e7de      	b.n	801290c <_malloc_r+0xa8>
 801294e:	230c      	movs	r3, #12
 8012950:	6033      	str	r3, [r6, #0]
 8012952:	4630      	mov	r0, r6
 8012954:	f000 f80c 	bl	8012970 <__malloc_unlock>
 8012958:	e794      	b.n	8012884 <_malloc_r+0x20>
 801295a:	6005      	str	r5, [r0, #0]
 801295c:	e7d6      	b.n	801290c <_malloc_r+0xa8>
 801295e:	bf00      	nop
 8012960:	20008a6c 	.word	0x20008a6c

08012964 <__malloc_lock>:
 8012964:	4801      	ldr	r0, [pc, #4]	@ (801296c <__malloc_lock+0x8>)
 8012966:	f000 baca 	b.w	8012efe <__retarget_lock_acquire_recursive>
 801296a:	bf00      	nop
 801296c:	20008bb0 	.word	0x20008bb0

08012970 <__malloc_unlock>:
 8012970:	4801      	ldr	r0, [pc, #4]	@ (8012978 <__malloc_unlock+0x8>)
 8012972:	f000 bac5 	b.w	8012f00 <__retarget_lock_release_recursive>
 8012976:	bf00      	nop
 8012978:	20008bb0 	.word	0x20008bb0

0801297c <rand>:
 801297c:	4b16      	ldr	r3, [pc, #88]	@ (80129d8 <rand+0x5c>)
 801297e:	b510      	push	{r4, lr}
 8012980:	681c      	ldr	r4, [r3, #0]
 8012982:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012984:	b9b3      	cbnz	r3, 80129b4 <rand+0x38>
 8012986:	2018      	movs	r0, #24
 8012988:	f000 fb32 	bl	8012ff0 <malloc>
 801298c:	4602      	mov	r2, r0
 801298e:	6320      	str	r0, [r4, #48]	@ 0x30
 8012990:	b920      	cbnz	r0, 801299c <rand+0x20>
 8012992:	4b12      	ldr	r3, [pc, #72]	@ (80129dc <rand+0x60>)
 8012994:	4812      	ldr	r0, [pc, #72]	@ (80129e0 <rand+0x64>)
 8012996:	2152      	movs	r1, #82	@ 0x52
 8012998:	f000 fac2 	bl	8012f20 <__assert_func>
 801299c:	4911      	ldr	r1, [pc, #68]	@ (80129e4 <rand+0x68>)
 801299e:	4b12      	ldr	r3, [pc, #72]	@ (80129e8 <rand+0x6c>)
 80129a0:	e9c0 1300 	strd	r1, r3, [r0]
 80129a4:	4b11      	ldr	r3, [pc, #68]	@ (80129ec <rand+0x70>)
 80129a6:	6083      	str	r3, [r0, #8]
 80129a8:	230b      	movs	r3, #11
 80129aa:	8183      	strh	r3, [r0, #12]
 80129ac:	2100      	movs	r1, #0
 80129ae:	2001      	movs	r0, #1
 80129b0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80129b4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80129b6:	480e      	ldr	r0, [pc, #56]	@ (80129f0 <rand+0x74>)
 80129b8:	690b      	ldr	r3, [r1, #16]
 80129ba:	694c      	ldr	r4, [r1, #20]
 80129bc:	4a0d      	ldr	r2, [pc, #52]	@ (80129f4 <rand+0x78>)
 80129be:	4358      	muls	r0, r3
 80129c0:	fb02 0004 	mla	r0, r2, r4, r0
 80129c4:	fba3 3202 	umull	r3, r2, r3, r2
 80129c8:	3301      	adds	r3, #1
 80129ca:	eb40 0002 	adc.w	r0, r0, r2
 80129ce:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80129d2:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80129d6:	bd10      	pop	{r4, pc}
 80129d8:	20000080 	.word	0x20000080
 80129dc:	0801694e 	.word	0x0801694e
 80129e0:	08016965 	.word	0x08016965
 80129e4:	abcd330e 	.word	0xabcd330e
 80129e8:	e66d1234 	.word	0xe66d1234
 80129ec:	0005deec 	.word	0x0005deec
 80129f0:	5851f42d 	.word	0x5851f42d
 80129f4:	4c957f2d 	.word	0x4c957f2d

080129f8 <_strtol_l.isra.0>:
 80129f8:	2b24      	cmp	r3, #36	@ 0x24
 80129fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80129fe:	4686      	mov	lr, r0
 8012a00:	4690      	mov	r8, r2
 8012a02:	d801      	bhi.n	8012a08 <_strtol_l.isra.0+0x10>
 8012a04:	2b01      	cmp	r3, #1
 8012a06:	d106      	bne.n	8012a16 <_strtol_l.isra.0+0x1e>
 8012a08:	f000 fa4e 	bl	8012ea8 <__errno>
 8012a0c:	2316      	movs	r3, #22
 8012a0e:	6003      	str	r3, [r0, #0]
 8012a10:	2000      	movs	r0, #0
 8012a12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012a16:	4834      	ldr	r0, [pc, #208]	@ (8012ae8 <_strtol_l.isra.0+0xf0>)
 8012a18:	460d      	mov	r5, r1
 8012a1a:	462a      	mov	r2, r5
 8012a1c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012a20:	5d06      	ldrb	r6, [r0, r4]
 8012a22:	f016 0608 	ands.w	r6, r6, #8
 8012a26:	d1f8      	bne.n	8012a1a <_strtol_l.isra.0+0x22>
 8012a28:	2c2d      	cmp	r4, #45	@ 0x2d
 8012a2a:	d110      	bne.n	8012a4e <_strtol_l.isra.0+0x56>
 8012a2c:	782c      	ldrb	r4, [r5, #0]
 8012a2e:	2601      	movs	r6, #1
 8012a30:	1c95      	adds	r5, r2, #2
 8012a32:	f033 0210 	bics.w	r2, r3, #16
 8012a36:	d115      	bne.n	8012a64 <_strtol_l.isra.0+0x6c>
 8012a38:	2c30      	cmp	r4, #48	@ 0x30
 8012a3a:	d10d      	bne.n	8012a58 <_strtol_l.isra.0+0x60>
 8012a3c:	782a      	ldrb	r2, [r5, #0]
 8012a3e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8012a42:	2a58      	cmp	r2, #88	@ 0x58
 8012a44:	d108      	bne.n	8012a58 <_strtol_l.isra.0+0x60>
 8012a46:	786c      	ldrb	r4, [r5, #1]
 8012a48:	3502      	adds	r5, #2
 8012a4a:	2310      	movs	r3, #16
 8012a4c:	e00a      	b.n	8012a64 <_strtol_l.isra.0+0x6c>
 8012a4e:	2c2b      	cmp	r4, #43	@ 0x2b
 8012a50:	bf04      	itt	eq
 8012a52:	782c      	ldrbeq	r4, [r5, #0]
 8012a54:	1c95      	addeq	r5, r2, #2
 8012a56:	e7ec      	b.n	8012a32 <_strtol_l.isra.0+0x3a>
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	d1f6      	bne.n	8012a4a <_strtol_l.isra.0+0x52>
 8012a5c:	2c30      	cmp	r4, #48	@ 0x30
 8012a5e:	bf14      	ite	ne
 8012a60:	230a      	movne	r3, #10
 8012a62:	2308      	moveq	r3, #8
 8012a64:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8012a68:	f10c 3cff 	add.w	ip, ip, #4294967295
 8012a6c:	2200      	movs	r2, #0
 8012a6e:	fbbc f9f3 	udiv	r9, ip, r3
 8012a72:	4610      	mov	r0, r2
 8012a74:	fb03 ca19 	mls	sl, r3, r9, ip
 8012a78:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8012a7c:	2f09      	cmp	r7, #9
 8012a7e:	d80f      	bhi.n	8012aa0 <_strtol_l.isra.0+0xa8>
 8012a80:	463c      	mov	r4, r7
 8012a82:	42a3      	cmp	r3, r4
 8012a84:	dd1b      	ble.n	8012abe <_strtol_l.isra.0+0xc6>
 8012a86:	1c57      	adds	r7, r2, #1
 8012a88:	d007      	beq.n	8012a9a <_strtol_l.isra.0+0xa2>
 8012a8a:	4581      	cmp	r9, r0
 8012a8c:	d314      	bcc.n	8012ab8 <_strtol_l.isra.0+0xc0>
 8012a8e:	d101      	bne.n	8012a94 <_strtol_l.isra.0+0x9c>
 8012a90:	45a2      	cmp	sl, r4
 8012a92:	db11      	blt.n	8012ab8 <_strtol_l.isra.0+0xc0>
 8012a94:	fb00 4003 	mla	r0, r0, r3, r4
 8012a98:	2201      	movs	r2, #1
 8012a9a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012a9e:	e7eb      	b.n	8012a78 <_strtol_l.isra.0+0x80>
 8012aa0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8012aa4:	2f19      	cmp	r7, #25
 8012aa6:	d801      	bhi.n	8012aac <_strtol_l.isra.0+0xb4>
 8012aa8:	3c37      	subs	r4, #55	@ 0x37
 8012aaa:	e7ea      	b.n	8012a82 <_strtol_l.isra.0+0x8a>
 8012aac:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8012ab0:	2f19      	cmp	r7, #25
 8012ab2:	d804      	bhi.n	8012abe <_strtol_l.isra.0+0xc6>
 8012ab4:	3c57      	subs	r4, #87	@ 0x57
 8012ab6:	e7e4      	b.n	8012a82 <_strtol_l.isra.0+0x8a>
 8012ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8012abc:	e7ed      	b.n	8012a9a <_strtol_l.isra.0+0xa2>
 8012abe:	1c53      	adds	r3, r2, #1
 8012ac0:	d108      	bne.n	8012ad4 <_strtol_l.isra.0+0xdc>
 8012ac2:	2322      	movs	r3, #34	@ 0x22
 8012ac4:	f8ce 3000 	str.w	r3, [lr]
 8012ac8:	4660      	mov	r0, ip
 8012aca:	f1b8 0f00 	cmp.w	r8, #0
 8012ace:	d0a0      	beq.n	8012a12 <_strtol_l.isra.0+0x1a>
 8012ad0:	1e69      	subs	r1, r5, #1
 8012ad2:	e006      	b.n	8012ae2 <_strtol_l.isra.0+0xea>
 8012ad4:	b106      	cbz	r6, 8012ad8 <_strtol_l.isra.0+0xe0>
 8012ad6:	4240      	negs	r0, r0
 8012ad8:	f1b8 0f00 	cmp.w	r8, #0
 8012adc:	d099      	beq.n	8012a12 <_strtol_l.isra.0+0x1a>
 8012ade:	2a00      	cmp	r2, #0
 8012ae0:	d1f6      	bne.n	8012ad0 <_strtol_l.isra.0+0xd8>
 8012ae2:	f8c8 1000 	str.w	r1, [r8]
 8012ae6:	e794      	b.n	8012a12 <_strtol_l.isra.0+0x1a>
 8012ae8:	08016a2d 	.word	0x08016a2d

08012aec <strtol>:
 8012aec:	4613      	mov	r3, r2
 8012aee:	460a      	mov	r2, r1
 8012af0:	4601      	mov	r1, r0
 8012af2:	4802      	ldr	r0, [pc, #8]	@ (8012afc <strtol+0x10>)
 8012af4:	6800      	ldr	r0, [r0, #0]
 8012af6:	f7ff bf7f 	b.w	80129f8 <_strtol_l.isra.0>
 8012afa:	bf00      	nop
 8012afc:	20000080 	.word	0x20000080

08012b00 <std>:
 8012b00:	2300      	movs	r3, #0
 8012b02:	b510      	push	{r4, lr}
 8012b04:	4604      	mov	r4, r0
 8012b06:	e9c0 3300 	strd	r3, r3, [r0]
 8012b0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012b0e:	6083      	str	r3, [r0, #8]
 8012b10:	8181      	strh	r1, [r0, #12]
 8012b12:	6643      	str	r3, [r0, #100]	@ 0x64
 8012b14:	81c2      	strh	r2, [r0, #14]
 8012b16:	6183      	str	r3, [r0, #24]
 8012b18:	4619      	mov	r1, r3
 8012b1a:	2208      	movs	r2, #8
 8012b1c:	305c      	adds	r0, #92	@ 0x5c
 8012b1e:	f000 f952 	bl	8012dc6 <memset>
 8012b22:	4b0d      	ldr	r3, [pc, #52]	@ (8012b58 <std+0x58>)
 8012b24:	6263      	str	r3, [r4, #36]	@ 0x24
 8012b26:	4b0d      	ldr	r3, [pc, #52]	@ (8012b5c <std+0x5c>)
 8012b28:	62a3      	str	r3, [r4, #40]	@ 0x28
 8012b2a:	4b0d      	ldr	r3, [pc, #52]	@ (8012b60 <std+0x60>)
 8012b2c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8012b2e:	4b0d      	ldr	r3, [pc, #52]	@ (8012b64 <std+0x64>)
 8012b30:	6323      	str	r3, [r4, #48]	@ 0x30
 8012b32:	4b0d      	ldr	r3, [pc, #52]	@ (8012b68 <std+0x68>)
 8012b34:	6224      	str	r4, [r4, #32]
 8012b36:	429c      	cmp	r4, r3
 8012b38:	d006      	beq.n	8012b48 <std+0x48>
 8012b3a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8012b3e:	4294      	cmp	r4, r2
 8012b40:	d002      	beq.n	8012b48 <std+0x48>
 8012b42:	33d0      	adds	r3, #208	@ 0xd0
 8012b44:	429c      	cmp	r4, r3
 8012b46:	d105      	bne.n	8012b54 <std+0x54>
 8012b48:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8012b4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012b50:	f000 b9d4 	b.w	8012efc <__retarget_lock_init_recursive>
 8012b54:	bd10      	pop	{r4, pc}
 8012b56:	bf00      	nop
 8012b58:	08012ced 	.word	0x08012ced
 8012b5c:	08012d0f 	.word	0x08012d0f
 8012b60:	08012d47 	.word	0x08012d47
 8012b64:	08012d6b 	.word	0x08012d6b
 8012b68:	20008a70 	.word	0x20008a70

08012b6c <stdio_exit_handler>:
 8012b6c:	4a02      	ldr	r2, [pc, #8]	@ (8012b78 <stdio_exit_handler+0xc>)
 8012b6e:	4903      	ldr	r1, [pc, #12]	@ (8012b7c <stdio_exit_handler+0x10>)
 8012b70:	4803      	ldr	r0, [pc, #12]	@ (8012b80 <stdio_exit_handler+0x14>)
 8012b72:	f000 b869 	b.w	8012c48 <_fwalk_sglue>
 8012b76:	bf00      	nop
 8012b78:	20000074 	.word	0x20000074
 8012b7c:	08013955 	.word	0x08013955
 8012b80:	20000084 	.word	0x20000084

08012b84 <cleanup_stdio>:
 8012b84:	6841      	ldr	r1, [r0, #4]
 8012b86:	4b0c      	ldr	r3, [pc, #48]	@ (8012bb8 <cleanup_stdio+0x34>)
 8012b88:	4299      	cmp	r1, r3
 8012b8a:	b510      	push	{r4, lr}
 8012b8c:	4604      	mov	r4, r0
 8012b8e:	d001      	beq.n	8012b94 <cleanup_stdio+0x10>
 8012b90:	f000 fee0 	bl	8013954 <_fflush_r>
 8012b94:	68a1      	ldr	r1, [r4, #8]
 8012b96:	4b09      	ldr	r3, [pc, #36]	@ (8012bbc <cleanup_stdio+0x38>)
 8012b98:	4299      	cmp	r1, r3
 8012b9a:	d002      	beq.n	8012ba2 <cleanup_stdio+0x1e>
 8012b9c:	4620      	mov	r0, r4
 8012b9e:	f000 fed9 	bl	8013954 <_fflush_r>
 8012ba2:	68e1      	ldr	r1, [r4, #12]
 8012ba4:	4b06      	ldr	r3, [pc, #24]	@ (8012bc0 <cleanup_stdio+0x3c>)
 8012ba6:	4299      	cmp	r1, r3
 8012ba8:	d004      	beq.n	8012bb4 <cleanup_stdio+0x30>
 8012baa:	4620      	mov	r0, r4
 8012bac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012bb0:	f000 bed0 	b.w	8013954 <_fflush_r>
 8012bb4:	bd10      	pop	{r4, pc}
 8012bb6:	bf00      	nop
 8012bb8:	20008a70 	.word	0x20008a70
 8012bbc:	20008ad8 	.word	0x20008ad8
 8012bc0:	20008b40 	.word	0x20008b40

08012bc4 <global_stdio_init.part.0>:
 8012bc4:	b510      	push	{r4, lr}
 8012bc6:	4b0b      	ldr	r3, [pc, #44]	@ (8012bf4 <global_stdio_init.part.0+0x30>)
 8012bc8:	4c0b      	ldr	r4, [pc, #44]	@ (8012bf8 <global_stdio_init.part.0+0x34>)
 8012bca:	4a0c      	ldr	r2, [pc, #48]	@ (8012bfc <global_stdio_init.part.0+0x38>)
 8012bcc:	601a      	str	r2, [r3, #0]
 8012bce:	4620      	mov	r0, r4
 8012bd0:	2200      	movs	r2, #0
 8012bd2:	2104      	movs	r1, #4
 8012bd4:	f7ff ff94 	bl	8012b00 <std>
 8012bd8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8012bdc:	2201      	movs	r2, #1
 8012bde:	2109      	movs	r1, #9
 8012be0:	f7ff ff8e 	bl	8012b00 <std>
 8012be4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8012be8:	2202      	movs	r2, #2
 8012bea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012bee:	2112      	movs	r1, #18
 8012bf0:	f7ff bf86 	b.w	8012b00 <std>
 8012bf4:	20008ba8 	.word	0x20008ba8
 8012bf8:	20008a70 	.word	0x20008a70
 8012bfc:	08012b6d 	.word	0x08012b6d

08012c00 <__sfp_lock_acquire>:
 8012c00:	4801      	ldr	r0, [pc, #4]	@ (8012c08 <__sfp_lock_acquire+0x8>)
 8012c02:	f000 b97c 	b.w	8012efe <__retarget_lock_acquire_recursive>
 8012c06:	bf00      	nop
 8012c08:	20008bb1 	.word	0x20008bb1

08012c0c <__sfp_lock_release>:
 8012c0c:	4801      	ldr	r0, [pc, #4]	@ (8012c14 <__sfp_lock_release+0x8>)
 8012c0e:	f000 b977 	b.w	8012f00 <__retarget_lock_release_recursive>
 8012c12:	bf00      	nop
 8012c14:	20008bb1 	.word	0x20008bb1

08012c18 <__sinit>:
 8012c18:	b510      	push	{r4, lr}
 8012c1a:	4604      	mov	r4, r0
 8012c1c:	f7ff fff0 	bl	8012c00 <__sfp_lock_acquire>
 8012c20:	6a23      	ldr	r3, [r4, #32]
 8012c22:	b11b      	cbz	r3, 8012c2c <__sinit+0x14>
 8012c24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012c28:	f7ff bff0 	b.w	8012c0c <__sfp_lock_release>
 8012c2c:	4b04      	ldr	r3, [pc, #16]	@ (8012c40 <__sinit+0x28>)
 8012c2e:	6223      	str	r3, [r4, #32]
 8012c30:	4b04      	ldr	r3, [pc, #16]	@ (8012c44 <__sinit+0x2c>)
 8012c32:	681b      	ldr	r3, [r3, #0]
 8012c34:	2b00      	cmp	r3, #0
 8012c36:	d1f5      	bne.n	8012c24 <__sinit+0xc>
 8012c38:	f7ff ffc4 	bl	8012bc4 <global_stdio_init.part.0>
 8012c3c:	e7f2      	b.n	8012c24 <__sinit+0xc>
 8012c3e:	bf00      	nop
 8012c40:	08012b85 	.word	0x08012b85
 8012c44:	20008ba8 	.word	0x20008ba8

08012c48 <_fwalk_sglue>:
 8012c48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012c4c:	4607      	mov	r7, r0
 8012c4e:	4688      	mov	r8, r1
 8012c50:	4614      	mov	r4, r2
 8012c52:	2600      	movs	r6, #0
 8012c54:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012c58:	f1b9 0901 	subs.w	r9, r9, #1
 8012c5c:	d505      	bpl.n	8012c6a <_fwalk_sglue+0x22>
 8012c5e:	6824      	ldr	r4, [r4, #0]
 8012c60:	2c00      	cmp	r4, #0
 8012c62:	d1f7      	bne.n	8012c54 <_fwalk_sglue+0xc>
 8012c64:	4630      	mov	r0, r6
 8012c66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012c6a:	89ab      	ldrh	r3, [r5, #12]
 8012c6c:	2b01      	cmp	r3, #1
 8012c6e:	d907      	bls.n	8012c80 <_fwalk_sglue+0x38>
 8012c70:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012c74:	3301      	adds	r3, #1
 8012c76:	d003      	beq.n	8012c80 <_fwalk_sglue+0x38>
 8012c78:	4629      	mov	r1, r5
 8012c7a:	4638      	mov	r0, r7
 8012c7c:	47c0      	blx	r8
 8012c7e:	4306      	orrs	r6, r0
 8012c80:	3568      	adds	r5, #104	@ 0x68
 8012c82:	e7e9      	b.n	8012c58 <_fwalk_sglue+0x10>

08012c84 <iprintf>:
 8012c84:	b40f      	push	{r0, r1, r2, r3}
 8012c86:	b507      	push	{r0, r1, r2, lr}
 8012c88:	4906      	ldr	r1, [pc, #24]	@ (8012ca4 <iprintf+0x20>)
 8012c8a:	ab04      	add	r3, sp, #16
 8012c8c:	6808      	ldr	r0, [r1, #0]
 8012c8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8012c92:	6881      	ldr	r1, [r0, #8]
 8012c94:	9301      	str	r3, [sp, #4]
 8012c96:	f000 fb35 	bl	8013304 <_vfiprintf_r>
 8012c9a:	b003      	add	sp, #12
 8012c9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8012ca0:	b004      	add	sp, #16
 8012ca2:	4770      	bx	lr
 8012ca4:	20000080 	.word	0x20000080

08012ca8 <siprintf>:
 8012ca8:	b40e      	push	{r1, r2, r3}
 8012caa:	b510      	push	{r4, lr}
 8012cac:	b09d      	sub	sp, #116	@ 0x74
 8012cae:	ab1f      	add	r3, sp, #124	@ 0x7c
 8012cb0:	9002      	str	r0, [sp, #8]
 8012cb2:	9006      	str	r0, [sp, #24]
 8012cb4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8012cb8:	480a      	ldr	r0, [pc, #40]	@ (8012ce4 <siprintf+0x3c>)
 8012cba:	9107      	str	r1, [sp, #28]
 8012cbc:	9104      	str	r1, [sp, #16]
 8012cbe:	490a      	ldr	r1, [pc, #40]	@ (8012ce8 <siprintf+0x40>)
 8012cc0:	f853 2b04 	ldr.w	r2, [r3], #4
 8012cc4:	9105      	str	r1, [sp, #20]
 8012cc6:	2400      	movs	r4, #0
 8012cc8:	a902      	add	r1, sp, #8
 8012cca:	6800      	ldr	r0, [r0, #0]
 8012ccc:	9301      	str	r3, [sp, #4]
 8012cce:	941b      	str	r4, [sp, #108]	@ 0x6c
 8012cd0:	f000 f9f2 	bl	80130b8 <_svfiprintf_r>
 8012cd4:	9b02      	ldr	r3, [sp, #8]
 8012cd6:	701c      	strb	r4, [r3, #0]
 8012cd8:	b01d      	add	sp, #116	@ 0x74
 8012cda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012cde:	b003      	add	sp, #12
 8012ce0:	4770      	bx	lr
 8012ce2:	bf00      	nop
 8012ce4:	20000080 	.word	0x20000080
 8012ce8:	ffff0208 	.word	0xffff0208

08012cec <__sread>:
 8012cec:	b510      	push	{r4, lr}
 8012cee:	460c      	mov	r4, r1
 8012cf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012cf4:	f000 f8a4 	bl	8012e40 <_read_r>
 8012cf8:	2800      	cmp	r0, #0
 8012cfa:	bfab      	itete	ge
 8012cfc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8012cfe:	89a3      	ldrhlt	r3, [r4, #12]
 8012d00:	181b      	addge	r3, r3, r0
 8012d02:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8012d06:	bfac      	ite	ge
 8012d08:	6563      	strge	r3, [r4, #84]	@ 0x54
 8012d0a:	81a3      	strhlt	r3, [r4, #12]
 8012d0c:	bd10      	pop	{r4, pc}

08012d0e <__swrite>:
 8012d0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d12:	461f      	mov	r7, r3
 8012d14:	898b      	ldrh	r3, [r1, #12]
 8012d16:	05db      	lsls	r3, r3, #23
 8012d18:	4605      	mov	r5, r0
 8012d1a:	460c      	mov	r4, r1
 8012d1c:	4616      	mov	r6, r2
 8012d1e:	d505      	bpl.n	8012d2c <__swrite+0x1e>
 8012d20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012d24:	2302      	movs	r3, #2
 8012d26:	2200      	movs	r2, #0
 8012d28:	f000 f878 	bl	8012e1c <_lseek_r>
 8012d2c:	89a3      	ldrh	r3, [r4, #12]
 8012d2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012d32:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8012d36:	81a3      	strh	r3, [r4, #12]
 8012d38:	4632      	mov	r2, r6
 8012d3a:	463b      	mov	r3, r7
 8012d3c:	4628      	mov	r0, r5
 8012d3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012d42:	f000 b89f 	b.w	8012e84 <_write_r>

08012d46 <__sseek>:
 8012d46:	b510      	push	{r4, lr}
 8012d48:	460c      	mov	r4, r1
 8012d4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012d4e:	f000 f865 	bl	8012e1c <_lseek_r>
 8012d52:	1c43      	adds	r3, r0, #1
 8012d54:	89a3      	ldrh	r3, [r4, #12]
 8012d56:	bf15      	itete	ne
 8012d58:	6560      	strne	r0, [r4, #84]	@ 0x54
 8012d5a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8012d5e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8012d62:	81a3      	strheq	r3, [r4, #12]
 8012d64:	bf18      	it	ne
 8012d66:	81a3      	strhne	r3, [r4, #12]
 8012d68:	bd10      	pop	{r4, pc}

08012d6a <__sclose>:
 8012d6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012d6e:	f000 b845 	b.w	8012dfc <_close_r>

08012d72 <memcmp>:
 8012d72:	b510      	push	{r4, lr}
 8012d74:	3901      	subs	r1, #1
 8012d76:	4402      	add	r2, r0
 8012d78:	4290      	cmp	r0, r2
 8012d7a:	d101      	bne.n	8012d80 <memcmp+0xe>
 8012d7c:	2000      	movs	r0, #0
 8012d7e:	e005      	b.n	8012d8c <memcmp+0x1a>
 8012d80:	7803      	ldrb	r3, [r0, #0]
 8012d82:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8012d86:	42a3      	cmp	r3, r4
 8012d88:	d001      	beq.n	8012d8e <memcmp+0x1c>
 8012d8a:	1b18      	subs	r0, r3, r4
 8012d8c:	bd10      	pop	{r4, pc}
 8012d8e:	3001      	adds	r0, #1
 8012d90:	e7f2      	b.n	8012d78 <memcmp+0x6>

08012d92 <memmove>:
 8012d92:	4288      	cmp	r0, r1
 8012d94:	b510      	push	{r4, lr}
 8012d96:	eb01 0402 	add.w	r4, r1, r2
 8012d9a:	d902      	bls.n	8012da2 <memmove+0x10>
 8012d9c:	4284      	cmp	r4, r0
 8012d9e:	4623      	mov	r3, r4
 8012da0:	d807      	bhi.n	8012db2 <memmove+0x20>
 8012da2:	1e43      	subs	r3, r0, #1
 8012da4:	42a1      	cmp	r1, r4
 8012da6:	d008      	beq.n	8012dba <memmove+0x28>
 8012da8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012dac:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012db0:	e7f8      	b.n	8012da4 <memmove+0x12>
 8012db2:	4402      	add	r2, r0
 8012db4:	4601      	mov	r1, r0
 8012db6:	428a      	cmp	r2, r1
 8012db8:	d100      	bne.n	8012dbc <memmove+0x2a>
 8012dba:	bd10      	pop	{r4, pc}
 8012dbc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012dc0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012dc4:	e7f7      	b.n	8012db6 <memmove+0x24>

08012dc6 <memset>:
 8012dc6:	4402      	add	r2, r0
 8012dc8:	4603      	mov	r3, r0
 8012dca:	4293      	cmp	r3, r2
 8012dcc:	d100      	bne.n	8012dd0 <memset+0xa>
 8012dce:	4770      	bx	lr
 8012dd0:	f803 1b01 	strb.w	r1, [r3], #1
 8012dd4:	e7f9      	b.n	8012dca <memset+0x4>

08012dd6 <strncpy>:
 8012dd6:	b510      	push	{r4, lr}
 8012dd8:	3901      	subs	r1, #1
 8012dda:	4603      	mov	r3, r0
 8012ddc:	b132      	cbz	r2, 8012dec <strncpy+0x16>
 8012dde:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8012de2:	f803 4b01 	strb.w	r4, [r3], #1
 8012de6:	3a01      	subs	r2, #1
 8012de8:	2c00      	cmp	r4, #0
 8012dea:	d1f7      	bne.n	8012ddc <strncpy+0x6>
 8012dec:	441a      	add	r2, r3
 8012dee:	2100      	movs	r1, #0
 8012df0:	4293      	cmp	r3, r2
 8012df2:	d100      	bne.n	8012df6 <strncpy+0x20>
 8012df4:	bd10      	pop	{r4, pc}
 8012df6:	f803 1b01 	strb.w	r1, [r3], #1
 8012dfa:	e7f9      	b.n	8012df0 <strncpy+0x1a>

08012dfc <_close_r>:
 8012dfc:	b538      	push	{r3, r4, r5, lr}
 8012dfe:	4d06      	ldr	r5, [pc, #24]	@ (8012e18 <_close_r+0x1c>)
 8012e00:	2300      	movs	r3, #0
 8012e02:	4604      	mov	r4, r0
 8012e04:	4608      	mov	r0, r1
 8012e06:	602b      	str	r3, [r5, #0]
 8012e08:	f7f0 f842 	bl	8002e90 <_close>
 8012e0c:	1c43      	adds	r3, r0, #1
 8012e0e:	d102      	bne.n	8012e16 <_close_r+0x1a>
 8012e10:	682b      	ldr	r3, [r5, #0]
 8012e12:	b103      	cbz	r3, 8012e16 <_close_r+0x1a>
 8012e14:	6023      	str	r3, [r4, #0]
 8012e16:	bd38      	pop	{r3, r4, r5, pc}
 8012e18:	20008bac 	.word	0x20008bac

08012e1c <_lseek_r>:
 8012e1c:	b538      	push	{r3, r4, r5, lr}
 8012e1e:	4d07      	ldr	r5, [pc, #28]	@ (8012e3c <_lseek_r+0x20>)
 8012e20:	4604      	mov	r4, r0
 8012e22:	4608      	mov	r0, r1
 8012e24:	4611      	mov	r1, r2
 8012e26:	2200      	movs	r2, #0
 8012e28:	602a      	str	r2, [r5, #0]
 8012e2a:	461a      	mov	r2, r3
 8012e2c:	f7f0 f857 	bl	8002ede <_lseek>
 8012e30:	1c43      	adds	r3, r0, #1
 8012e32:	d102      	bne.n	8012e3a <_lseek_r+0x1e>
 8012e34:	682b      	ldr	r3, [r5, #0]
 8012e36:	b103      	cbz	r3, 8012e3a <_lseek_r+0x1e>
 8012e38:	6023      	str	r3, [r4, #0]
 8012e3a:	bd38      	pop	{r3, r4, r5, pc}
 8012e3c:	20008bac 	.word	0x20008bac

08012e40 <_read_r>:
 8012e40:	b538      	push	{r3, r4, r5, lr}
 8012e42:	4d07      	ldr	r5, [pc, #28]	@ (8012e60 <_read_r+0x20>)
 8012e44:	4604      	mov	r4, r0
 8012e46:	4608      	mov	r0, r1
 8012e48:	4611      	mov	r1, r2
 8012e4a:	2200      	movs	r2, #0
 8012e4c:	602a      	str	r2, [r5, #0]
 8012e4e:	461a      	mov	r2, r3
 8012e50:	f7ef ffe5 	bl	8002e1e <_read>
 8012e54:	1c43      	adds	r3, r0, #1
 8012e56:	d102      	bne.n	8012e5e <_read_r+0x1e>
 8012e58:	682b      	ldr	r3, [r5, #0]
 8012e5a:	b103      	cbz	r3, 8012e5e <_read_r+0x1e>
 8012e5c:	6023      	str	r3, [r4, #0]
 8012e5e:	bd38      	pop	{r3, r4, r5, pc}
 8012e60:	20008bac 	.word	0x20008bac

08012e64 <_sbrk_r>:
 8012e64:	b538      	push	{r3, r4, r5, lr}
 8012e66:	4d06      	ldr	r5, [pc, #24]	@ (8012e80 <_sbrk_r+0x1c>)
 8012e68:	2300      	movs	r3, #0
 8012e6a:	4604      	mov	r4, r0
 8012e6c:	4608      	mov	r0, r1
 8012e6e:	602b      	str	r3, [r5, #0]
 8012e70:	f7f0 f842 	bl	8002ef8 <_sbrk>
 8012e74:	1c43      	adds	r3, r0, #1
 8012e76:	d102      	bne.n	8012e7e <_sbrk_r+0x1a>
 8012e78:	682b      	ldr	r3, [r5, #0]
 8012e7a:	b103      	cbz	r3, 8012e7e <_sbrk_r+0x1a>
 8012e7c:	6023      	str	r3, [r4, #0]
 8012e7e:	bd38      	pop	{r3, r4, r5, pc}
 8012e80:	20008bac 	.word	0x20008bac

08012e84 <_write_r>:
 8012e84:	b538      	push	{r3, r4, r5, lr}
 8012e86:	4d07      	ldr	r5, [pc, #28]	@ (8012ea4 <_write_r+0x20>)
 8012e88:	4604      	mov	r4, r0
 8012e8a:	4608      	mov	r0, r1
 8012e8c:	4611      	mov	r1, r2
 8012e8e:	2200      	movs	r2, #0
 8012e90:	602a      	str	r2, [r5, #0]
 8012e92:	461a      	mov	r2, r3
 8012e94:	f7ef ffe0 	bl	8002e58 <_write>
 8012e98:	1c43      	adds	r3, r0, #1
 8012e9a:	d102      	bne.n	8012ea2 <_write_r+0x1e>
 8012e9c:	682b      	ldr	r3, [r5, #0]
 8012e9e:	b103      	cbz	r3, 8012ea2 <_write_r+0x1e>
 8012ea0:	6023      	str	r3, [r4, #0]
 8012ea2:	bd38      	pop	{r3, r4, r5, pc}
 8012ea4:	20008bac 	.word	0x20008bac

08012ea8 <__errno>:
 8012ea8:	4b01      	ldr	r3, [pc, #4]	@ (8012eb0 <__errno+0x8>)
 8012eaa:	6818      	ldr	r0, [r3, #0]
 8012eac:	4770      	bx	lr
 8012eae:	bf00      	nop
 8012eb0:	20000080 	.word	0x20000080

08012eb4 <__libc_init_array>:
 8012eb4:	b570      	push	{r4, r5, r6, lr}
 8012eb6:	4d0d      	ldr	r5, [pc, #52]	@ (8012eec <__libc_init_array+0x38>)
 8012eb8:	4c0d      	ldr	r4, [pc, #52]	@ (8012ef0 <__libc_init_array+0x3c>)
 8012eba:	1b64      	subs	r4, r4, r5
 8012ebc:	10a4      	asrs	r4, r4, #2
 8012ebe:	2600      	movs	r6, #0
 8012ec0:	42a6      	cmp	r6, r4
 8012ec2:	d109      	bne.n	8012ed8 <__libc_init_array+0x24>
 8012ec4:	4d0b      	ldr	r5, [pc, #44]	@ (8012ef4 <__libc_init_array+0x40>)
 8012ec6:	4c0c      	ldr	r4, [pc, #48]	@ (8012ef8 <__libc_init_array+0x44>)
 8012ec8:	f000 ff66 	bl	8013d98 <_init>
 8012ecc:	1b64      	subs	r4, r4, r5
 8012ece:	10a4      	asrs	r4, r4, #2
 8012ed0:	2600      	movs	r6, #0
 8012ed2:	42a6      	cmp	r6, r4
 8012ed4:	d105      	bne.n	8012ee2 <__libc_init_array+0x2e>
 8012ed6:	bd70      	pop	{r4, r5, r6, pc}
 8012ed8:	f855 3b04 	ldr.w	r3, [r5], #4
 8012edc:	4798      	blx	r3
 8012ede:	3601      	adds	r6, #1
 8012ee0:	e7ee      	b.n	8012ec0 <__libc_init_array+0xc>
 8012ee2:	f855 3b04 	ldr.w	r3, [r5], #4
 8012ee6:	4798      	blx	r3
 8012ee8:	3601      	adds	r6, #1
 8012eea:	e7f2      	b.n	8012ed2 <__libc_init_array+0x1e>
 8012eec:	08016b38 	.word	0x08016b38
 8012ef0:	08016b38 	.word	0x08016b38
 8012ef4:	08016b38 	.word	0x08016b38
 8012ef8:	08016b3c 	.word	0x08016b3c

08012efc <__retarget_lock_init_recursive>:
 8012efc:	4770      	bx	lr

08012efe <__retarget_lock_acquire_recursive>:
 8012efe:	4770      	bx	lr

08012f00 <__retarget_lock_release_recursive>:
 8012f00:	4770      	bx	lr

08012f02 <memcpy>:
 8012f02:	440a      	add	r2, r1
 8012f04:	4291      	cmp	r1, r2
 8012f06:	f100 33ff 	add.w	r3, r0, #4294967295
 8012f0a:	d100      	bne.n	8012f0e <memcpy+0xc>
 8012f0c:	4770      	bx	lr
 8012f0e:	b510      	push	{r4, lr}
 8012f10:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012f14:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012f18:	4291      	cmp	r1, r2
 8012f1a:	d1f9      	bne.n	8012f10 <memcpy+0xe>
 8012f1c:	bd10      	pop	{r4, pc}
	...

08012f20 <__assert_func>:
 8012f20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012f22:	4614      	mov	r4, r2
 8012f24:	461a      	mov	r2, r3
 8012f26:	4b09      	ldr	r3, [pc, #36]	@ (8012f4c <__assert_func+0x2c>)
 8012f28:	681b      	ldr	r3, [r3, #0]
 8012f2a:	4605      	mov	r5, r0
 8012f2c:	68d8      	ldr	r0, [r3, #12]
 8012f2e:	b14c      	cbz	r4, 8012f44 <__assert_func+0x24>
 8012f30:	4b07      	ldr	r3, [pc, #28]	@ (8012f50 <__assert_func+0x30>)
 8012f32:	9100      	str	r1, [sp, #0]
 8012f34:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012f38:	4906      	ldr	r1, [pc, #24]	@ (8012f54 <__assert_func+0x34>)
 8012f3a:	462b      	mov	r3, r5
 8012f3c:	f000 fd32 	bl	80139a4 <fiprintf>
 8012f40:	f000 fdd6 	bl	8013af0 <abort>
 8012f44:	4b04      	ldr	r3, [pc, #16]	@ (8012f58 <__assert_func+0x38>)
 8012f46:	461c      	mov	r4, r3
 8012f48:	e7f3      	b.n	8012f32 <__assert_func+0x12>
 8012f4a:	bf00      	nop
 8012f4c:	20000080 	.word	0x20000080
 8012f50:	080169bd 	.word	0x080169bd
 8012f54:	080169ca 	.word	0x080169ca
 8012f58:	080169f8 	.word	0x080169f8

08012f5c <_free_r>:
 8012f5c:	b538      	push	{r3, r4, r5, lr}
 8012f5e:	4605      	mov	r5, r0
 8012f60:	2900      	cmp	r1, #0
 8012f62:	d041      	beq.n	8012fe8 <_free_r+0x8c>
 8012f64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012f68:	1f0c      	subs	r4, r1, #4
 8012f6a:	2b00      	cmp	r3, #0
 8012f6c:	bfb8      	it	lt
 8012f6e:	18e4      	addlt	r4, r4, r3
 8012f70:	f7ff fcf8 	bl	8012964 <__malloc_lock>
 8012f74:	4a1d      	ldr	r2, [pc, #116]	@ (8012fec <_free_r+0x90>)
 8012f76:	6813      	ldr	r3, [r2, #0]
 8012f78:	b933      	cbnz	r3, 8012f88 <_free_r+0x2c>
 8012f7a:	6063      	str	r3, [r4, #4]
 8012f7c:	6014      	str	r4, [r2, #0]
 8012f7e:	4628      	mov	r0, r5
 8012f80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012f84:	f7ff bcf4 	b.w	8012970 <__malloc_unlock>
 8012f88:	42a3      	cmp	r3, r4
 8012f8a:	d908      	bls.n	8012f9e <_free_r+0x42>
 8012f8c:	6820      	ldr	r0, [r4, #0]
 8012f8e:	1821      	adds	r1, r4, r0
 8012f90:	428b      	cmp	r3, r1
 8012f92:	bf01      	itttt	eq
 8012f94:	6819      	ldreq	r1, [r3, #0]
 8012f96:	685b      	ldreq	r3, [r3, #4]
 8012f98:	1809      	addeq	r1, r1, r0
 8012f9a:	6021      	streq	r1, [r4, #0]
 8012f9c:	e7ed      	b.n	8012f7a <_free_r+0x1e>
 8012f9e:	461a      	mov	r2, r3
 8012fa0:	685b      	ldr	r3, [r3, #4]
 8012fa2:	b10b      	cbz	r3, 8012fa8 <_free_r+0x4c>
 8012fa4:	42a3      	cmp	r3, r4
 8012fa6:	d9fa      	bls.n	8012f9e <_free_r+0x42>
 8012fa8:	6811      	ldr	r1, [r2, #0]
 8012faa:	1850      	adds	r0, r2, r1
 8012fac:	42a0      	cmp	r0, r4
 8012fae:	d10b      	bne.n	8012fc8 <_free_r+0x6c>
 8012fb0:	6820      	ldr	r0, [r4, #0]
 8012fb2:	4401      	add	r1, r0
 8012fb4:	1850      	adds	r0, r2, r1
 8012fb6:	4283      	cmp	r3, r0
 8012fb8:	6011      	str	r1, [r2, #0]
 8012fba:	d1e0      	bne.n	8012f7e <_free_r+0x22>
 8012fbc:	6818      	ldr	r0, [r3, #0]
 8012fbe:	685b      	ldr	r3, [r3, #4]
 8012fc0:	6053      	str	r3, [r2, #4]
 8012fc2:	4408      	add	r0, r1
 8012fc4:	6010      	str	r0, [r2, #0]
 8012fc6:	e7da      	b.n	8012f7e <_free_r+0x22>
 8012fc8:	d902      	bls.n	8012fd0 <_free_r+0x74>
 8012fca:	230c      	movs	r3, #12
 8012fcc:	602b      	str	r3, [r5, #0]
 8012fce:	e7d6      	b.n	8012f7e <_free_r+0x22>
 8012fd0:	6820      	ldr	r0, [r4, #0]
 8012fd2:	1821      	adds	r1, r4, r0
 8012fd4:	428b      	cmp	r3, r1
 8012fd6:	bf04      	itt	eq
 8012fd8:	6819      	ldreq	r1, [r3, #0]
 8012fda:	685b      	ldreq	r3, [r3, #4]
 8012fdc:	6063      	str	r3, [r4, #4]
 8012fde:	bf04      	itt	eq
 8012fe0:	1809      	addeq	r1, r1, r0
 8012fe2:	6021      	streq	r1, [r4, #0]
 8012fe4:	6054      	str	r4, [r2, #4]
 8012fe6:	e7ca      	b.n	8012f7e <_free_r+0x22>
 8012fe8:	bd38      	pop	{r3, r4, r5, pc}
 8012fea:	bf00      	nop
 8012fec:	20008a6c 	.word	0x20008a6c

08012ff0 <malloc>:
 8012ff0:	4b02      	ldr	r3, [pc, #8]	@ (8012ffc <malloc+0xc>)
 8012ff2:	4601      	mov	r1, r0
 8012ff4:	6818      	ldr	r0, [r3, #0]
 8012ff6:	f7ff bc35 	b.w	8012864 <_malloc_r>
 8012ffa:	bf00      	nop
 8012ffc:	20000080 	.word	0x20000080

08013000 <__ssputs_r>:
 8013000:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013004:	688e      	ldr	r6, [r1, #8]
 8013006:	461f      	mov	r7, r3
 8013008:	42be      	cmp	r6, r7
 801300a:	680b      	ldr	r3, [r1, #0]
 801300c:	4682      	mov	sl, r0
 801300e:	460c      	mov	r4, r1
 8013010:	4690      	mov	r8, r2
 8013012:	d82d      	bhi.n	8013070 <__ssputs_r+0x70>
 8013014:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013018:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801301c:	d026      	beq.n	801306c <__ssputs_r+0x6c>
 801301e:	6965      	ldr	r5, [r4, #20]
 8013020:	6909      	ldr	r1, [r1, #16]
 8013022:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013026:	eba3 0901 	sub.w	r9, r3, r1
 801302a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801302e:	1c7b      	adds	r3, r7, #1
 8013030:	444b      	add	r3, r9
 8013032:	106d      	asrs	r5, r5, #1
 8013034:	429d      	cmp	r5, r3
 8013036:	bf38      	it	cc
 8013038:	461d      	movcc	r5, r3
 801303a:	0553      	lsls	r3, r2, #21
 801303c:	d527      	bpl.n	801308e <__ssputs_r+0x8e>
 801303e:	4629      	mov	r1, r5
 8013040:	f7ff fc10 	bl	8012864 <_malloc_r>
 8013044:	4606      	mov	r6, r0
 8013046:	b360      	cbz	r0, 80130a2 <__ssputs_r+0xa2>
 8013048:	6921      	ldr	r1, [r4, #16]
 801304a:	464a      	mov	r2, r9
 801304c:	f7ff ff59 	bl	8012f02 <memcpy>
 8013050:	89a3      	ldrh	r3, [r4, #12]
 8013052:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8013056:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801305a:	81a3      	strh	r3, [r4, #12]
 801305c:	6126      	str	r6, [r4, #16]
 801305e:	6165      	str	r5, [r4, #20]
 8013060:	444e      	add	r6, r9
 8013062:	eba5 0509 	sub.w	r5, r5, r9
 8013066:	6026      	str	r6, [r4, #0]
 8013068:	60a5      	str	r5, [r4, #8]
 801306a:	463e      	mov	r6, r7
 801306c:	42be      	cmp	r6, r7
 801306e:	d900      	bls.n	8013072 <__ssputs_r+0x72>
 8013070:	463e      	mov	r6, r7
 8013072:	6820      	ldr	r0, [r4, #0]
 8013074:	4632      	mov	r2, r6
 8013076:	4641      	mov	r1, r8
 8013078:	f7ff fe8b 	bl	8012d92 <memmove>
 801307c:	68a3      	ldr	r3, [r4, #8]
 801307e:	1b9b      	subs	r3, r3, r6
 8013080:	60a3      	str	r3, [r4, #8]
 8013082:	6823      	ldr	r3, [r4, #0]
 8013084:	4433      	add	r3, r6
 8013086:	6023      	str	r3, [r4, #0]
 8013088:	2000      	movs	r0, #0
 801308a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801308e:	462a      	mov	r2, r5
 8013090:	f000 fd35 	bl	8013afe <_realloc_r>
 8013094:	4606      	mov	r6, r0
 8013096:	2800      	cmp	r0, #0
 8013098:	d1e0      	bne.n	801305c <__ssputs_r+0x5c>
 801309a:	6921      	ldr	r1, [r4, #16]
 801309c:	4650      	mov	r0, sl
 801309e:	f7ff ff5d 	bl	8012f5c <_free_r>
 80130a2:	230c      	movs	r3, #12
 80130a4:	f8ca 3000 	str.w	r3, [sl]
 80130a8:	89a3      	ldrh	r3, [r4, #12]
 80130aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80130ae:	81a3      	strh	r3, [r4, #12]
 80130b0:	f04f 30ff 	mov.w	r0, #4294967295
 80130b4:	e7e9      	b.n	801308a <__ssputs_r+0x8a>
	...

080130b8 <_svfiprintf_r>:
 80130b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130bc:	4698      	mov	r8, r3
 80130be:	898b      	ldrh	r3, [r1, #12]
 80130c0:	061b      	lsls	r3, r3, #24
 80130c2:	b09d      	sub	sp, #116	@ 0x74
 80130c4:	4607      	mov	r7, r0
 80130c6:	460d      	mov	r5, r1
 80130c8:	4614      	mov	r4, r2
 80130ca:	d510      	bpl.n	80130ee <_svfiprintf_r+0x36>
 80130cc:	690b      	ldr	r3, [r1, #16]
 80130ce:	b973      	cbnz	r3, 80130ee <_svfiprintf_r+0x36>
 80130d0:	2140      	movs	r1, #64	@ 0x40
 80130d2:	f7ff fbc7 	bl	8012864 <_malloc_r>
 80130d6:	6028      	str	r0, [r5, #0]
 80130d8:	6128      	str	r0, [r5, #16]
 80130da:	b930      	cbnz	r0, 80130ea <_svfiprintf_r+0x32>
 80130dc:	230c      	movs	r3, #12
 80130de:	603b      	str	r3, [r7, #0]
 80130e0:	f04f 30ff 	mov.w	r0, #4294967295
 80130e4:	b01d      	add	sp, #116	@ 0x74
 80130e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130ea:	2340      	movs	r3, #64	@ 0x40
 80130ec:	616b      	str	r3, [r5, #20]
 80130ee:	2300      	movs	r3, #0
 80130f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80130f2:	2320      	movs	r3, #32
 80130f4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80130f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80130fc:	2330      	movs	r3, #48	@ 0x30
 80130fe:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801329c <_svfiprintf_r+0x1e4>
 8013102:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013106:	f04f 0901 	mov.w	r9, #1
 801310a:	4623      	mov	r3, r4
 801310c:	469a      	mov	sl, r3
 801310e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013112:	b10a      	cbz	r2, 8013118 <_svfiprintf_r+0x60>
 8013114:	2a25      	cmp	r2, #37	@ 0x25
 8013116:	d1f9      	bne.n	801310c <_svfiprintf_r+0x54>
 8013118:	ebba 0b04 	subs.w	fp, sl, r4
 801311c:	d00b      	beq.n	8013136 <_svfiprintf_r+0x7e>
 801311e:	465b      	mov	r3, fp
 8013120:	4622      	mov	r2, r4
 8013122:	4629      	mov	r1, r5
 8013124:	4638      	mov	r0, r7
 8013126:	f7ff ff6b 	bl	8013000 <__ssputs_r>
 801312a:	3001      	adds	r0, #1
 801312c:	f000 80a7 	beq.w	801327e <_svfiprintf_r+0x1c6>
 8013130:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013132:	445a      	add	r2, fp
 8013134:	9209      	str	r2, [sp, #36]	@ 0x24
 8013136:	f89a 3000 	ldrb.w	r3, [sl]
 801313a:	2b00      	cmp	r3, #0
 801313c:	f000 809f 	beq.w	801327e <_svfiprintf_r+0x1c6>
 8013140:	2300      	movs	r3, #0
 8013142:	f04f 32ff 	mov.w	r2, #4294967295
 8013146:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801314a:	f10a 0a01 	add.w	sl, sl, #1
 801314e:	9304      	str	r3, [sp, #16]
 8013150:	9307      	str	r3, [sp, #28]
 8013152:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013156:	931a      	str	r3, [sp, #104]	@ 0x68
 8013158:	4654      	mov	r4, sl
 801315a:	2205      	movs	r2, #5
 801315c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013160:	484e      	ldr	r0, [pc, #312]	@ (801329c <_svfiprintf_r+0x1e4>)
 8013162:	f7ed f835 	bl	80001d0 <memchr>
 8013166:	9a04      	ldr	r2, [sp, #16]
 8013168:	b9d8      	cbnz	r0, 80131a2 <_svfiprintf_r+0xea>
 801316a:	06d0      	lsls	r0, r2, #27
 801316c:	bf44      	itt	mi
 801316e:	2320      	movmi	r3, #32
 8013170:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013174:	0711      	lsls	r1, r2, #28
 8013176:	bf44      	itt	mi
 8013178:	232b      	movmi	r3, #43	@ 0x2b
 801317a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801317e:	f89a 3000 	ldrb.w	r3, [sl]
 8013182:	2b2a      	cmp	r3, #42	@ 0x2a
 8013184:	d015      	beq.n	80131b2 <_svfiprintf_r+0xfa>
 8013186:	9a07      	ldr	r2, [sp, #28]
 8013188:	4654      	mov	r4, sl
 801318a:	2000      	movs	r0, #0
 801318c:	f04f 0c0a 	mov.w	ip, #10
 8013190:	4621      	mov	r1, r4
 8013192:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013196:	3b30      	subs	r3, #48	@ 0x30
 8013198:	2b09      	cmp	r3, #9
 801319a:	d94b      	bls.n	8013234 <_svfiprintf_r+0x17c>
 801319c:	b1b0      	cbz	r0, 80131cc <_svfiprintf_r+0x114>
 801319e:	9207      	str	r2, [sp, #28]
 80131a0:	e014      	b.n	80131cc <_svfiprintf_r+0x114>
 80131a2:	eba0 0308 	sub.w	r3, r0, r8
 80131a6:	fa09 f303 	lsl.w	r3, r9, r3
 80131aa:	4313      	orrs	r3, r2
 80131ac:	9304      	str	r3, [sp, #16]
 80131ae:	46a2      	mov	sl, r4
 80131b0:	e7d2      	b.n	8013158 <_svfiprintf_r+0xa0>
 80131b2:	9b03      	ldr	r3, [sp, #12]
 80131b4:	1d19      	adds	r1, r3, #4
 80131b6:	681b      	ldr	r3, [r3, #0]
 80131b8:	9103      	str	r1, [sp, #12]
 80131ba:	2b00      	cmp	r3, #0
 80131bc:	bfbb      	ittet	lt
 80131be:	425b      	neglt	r3, r3
 80131c0:	f042 0202 	orrlt.w	r2, r2, #2
 80131c4:	9307      	strge	r3, [sp, #28]
 80131c6:	9307      	strlt	r3, [sp, #28]
 80131c8:	bfb8      	it	lt
 80131ca:	9204      	strlt	r2, [sp, #16]
 80131cc:	7823      	ldrb	r3, [r4, #0]
 80131ce:	2b2e      	cmp	r3, #46	@ 0x2e
 80131d0:	d10a      	bne.n	80131e8 <_svfiprintf_r+0x130>
 80131d2:	7863      	ldrb	r3, [r4, #1]
 80131d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80131d6:	d132      	bne.n	801323e <_svfiprintf_r+0x186>
 80131d8:	9b03      	ldr	r3, [sp, #12]
 80131da:	1d1a      	adds	r2, r3, #4
 80131dc:	681b      	ldr	r3, [r3, #0]
 80131de:	9203      	str	r2, [sp, #12]
 80131e0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80131e4:	3402      	adds	r4, #2
 80131e6:	9305      	str	r3, [sp, #20]
 80131e8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80132ac <_svfiprintf_r+0x1f4>
 80131ec:	7821      	ldrb	r1, [r4, #0]
 80131ee:	2203      	movs	r2, #3
 80131f0:	4650      	mov	r0, sl
 80131f2:	f7ec ffed 	bl	80001d0 <memchr>
 80131f6:	b138      	cbz	r0, 8013208 <_svfiprintf_r+0x150>
 80131f8:	9b04      	ldr	r3, [sp, #16]
 80131fa:	eba0 000a 	sub.w	r0, r0, sl
 80131fe:	2240      	movs	r2, #64	@ 0x40
 8013200:	4082      	lsls	r2, r0
 8013202:	4313      	orrs	r3, r2
 8013204:	3401      	adds	r4, #1
 8013206:	9304      	str	r3, [sp, #16]
 8013208:	f814 1b01 	ldrb.w	r1, [r4], #1
 801320c:	4824      	ldr	r0, [pc, #144]	@ (80132a0 <_svfiprintf_r+0x1e8>)
 801320e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013212:	2206      	movs	r2, #6
 8013214:	f7ec ffdc 	bl	80001d0 <memchr>
 8013218:	2800      	cmp	r0, #0
 801321a:	d036      	beq.n	801328a <_svfiprintf_r+0x1d2>
 801321c:	4b21      	ldr	r3, [pc, #132]	@ (80132a4 <_svfiprintf_r+0x1ec>)
 801321e:	bb1b      	cbnz	r3, 8013268 <_svfiprintf_r+0x1b0>
 8013220:	9b03      	ldr	r3, [sp, #12]
 8013222:	3307      	adds	r3, #7
 8013224:	f023 0307 	bic.w	r3, r3, #7
 8013228:	3308      	adds	r3, #8
 801322a:	9303      	str	r3, [sp, #12]
 801322c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801322e:	4433      	add	r3, r6
 8013230:	9309      	str	r3, [sp, #36]	@ 0x24
 8013232:	e76a      	b.n	801310a <_svfiprintf_r+0x52>
 8013234:	fb0c 3202 	mla	r2, ip, r2, r3
 8013238:	460c      	mov	r4, r1
 801323a:	2001      	movs	r0, #1
 801323c:	e7a8      	b.n	8013190 <_svfiprintf_r+0xd8>
 801323e:	2300      	movs	r3, #0
 8013240:	3401      	adds	r4, #1
 8013242:	9305      	str	r3, [sp, #20]
 8013244:	4619      	mov	r1, r3
 8013246:	f04f 0c0a 	mov.w	ip, #10
 801324a:	4620      	mov	r0, r4
 801324c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013250:	3a30      	subs	r2, #48	@ 0x30
 8013252:	2a09      	cmp	r2, #9
 8013254:	d903      	bls.n	801325e <_svfiprintf_r+0x1a6>
 8013256:	2b00      	cmp	r3, #0
 8013258:	d0c6      	beq.n	80131e8 <_svfiprintf_r+0x130>
 801325a:	9105      	str	r1, [sp, #20]
 801325c:	e7c4      	b.n	80131e8 <_svfiprintf_r+0x130>
 801325e:	fb0c 2101 	mla	r1, ip, r1, r2
 8013262:	4604      	mov	r4, r0
 8013264:	2301      	movs	r3, #1
 8013266:	e7f0      	b.n	801324a <_svfiprintf_r+0x192>
 8013268:	ab03      	add	r3, sp, #12
 801326a:	9300      	str	r3, [sp, #0]
 801326c:	462a      	mov	r2, r5
 801326e:	4b0e      	ldr	r3, [pc, #56]	@ (80132a8 <_svfiprintf_r+0x1f0>)
 8013270:	a904      	add	r1, sp, #16
 8013272:	4638      	mov	r0, r7
 8013274:	f3af 8000 	nop.w
 8013278:	1c42      	adds	r2, r0, #1
 801327a:	4606      	mov	r6, r0
 801327c:	d1d6      	bne.n	801322c <_svfiprintf_r+0x174>
 801327e:	89ab      	ldrh	r3, [r5, #12]
 8013280:	065b      	lsls	r3, r3, #25
 8013282:	f53f af2d 	bmi.w	80130e0 <_svfiprintf_r+0x28>
 8013286:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013288:	e72c      	b.n	80130e4 <_svfiprintf_r+0x2c>
 801328a:	ab03      	add	r3, sp, #12
 801328c:	9300      	str	r3, [sp, #0]
 801328e:	462a      	mov	r2, r5
 8013290:	4b05      	ldr	r3, [pc, #20]	@ (80132a8 <_svfiprintf_r+0x1f0>)
 8013292:	a904      	add	r1, sp, #16
 8013294:	4638      	mov	r0, r7
 8013296:	f000 f9bb 	bl	8013610 <_printf_i>
 801329a:	e7ed      	b.n	8013278 <_svfiprintf_r+0x1c0>
 801329c:	080169f9 	.word	0x080169f9
 80132a0:	08016a03 	.word	0x08016a03
 80132a4:	00000000 	.word	0x00000000
 80132a8:	08013001 	.word	0x08013001
 80132ac:	080169ff 	.word	0x080169ff

080132b0 <__sfputc_r>:
 80132b0:	6893      	ldr	r3, [r2, #8]
 80132b2:	3b01      	subs	r3, #1
 80132b4:	2b00      	cmp	r3, #0
 80132b6:	b410      	push	{r4}
 80132b8:	6093      	str	r3, [r2, #8]
 80132ba:	da08      	bge.n	80132ce <__sfputc_r+0x1e>
 80132bc:	6994      	ldr	r4, [r2, #24]
 80132be:	42a3      	cmp	r3, r4
 80132c0:	db01      	blt.n	80132c6 <__sfputc_r+0x16>
 80132c2:	290a      	cmp	r1, #10
 80132c4:	d103      	bne.n	80132ce <__sfputc_r+0x1e>
 80132c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80132ca:	f000 bb7d 	b.w	80139c8 <__swbuf_r>
 80132ce:	6813      	ldr	r3, [r2, #0]
 80132d0:	1c58      	adds	r0, r3, #1
 80132d2:	6010      	str	r0, [r2, #0]
 80132d4:	7019      	strb	r1, [r3, #0]
 80132d6:	4608      	mov	r0, r1
 80132d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80132dc:	4770      	bx	lr

080132de <__sfputs_r>:
 80132de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80132e0:	4606      	mov	r6, r0
 80132e2:	460f      	mov	r7, r1
 80132e4:	4614      	mov	r4, r2
 80132e6:	18d5      	adds	r5, r2, r3
 80132e8:	42ac      	cmp	r4, r5
 80132ea:	d101      	bne.n	80132f0 <__sfputs_r+0x12>
 80132ec:	2000      	movs	r0, #0
 80132ee:	e007      	b.n	8013300 <__sfputs_r+0x22>
 80132f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80132f4:	463a      	mov	r2, r7
 80132f6:	4630      	mov	r0, r6
 80132f8:	f7ff ffda 	bl	80132b0 <__sfputc_r>
 80132fc:	1c43      	adds	r3, r0, #1
 80132fe:	d1f3      	bne.n	80132e8 <__sfputs_r+0xa>
 8013300:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013304 <_vfiprintf_r>:
 8013304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013308:	460d      	mov	r5, r1
 801330a:	b09d      	sub	sp, #116	@ 0x74
 801330c:	4614      	mov	r4, r2
 801330e:	4698      	mov	r8, r3
 8013310:	4606      	mov	r6, r0
 8013312:	b118      	cbz	r0, 801331c <_vfiprintf_r+0x18>
 8013314:	6a03      	ldr	r3, [r0, #32]
 8013316:	b90b      	cbnz	r3, 801331c <_vfiprintf_r+0x18>
 8013318:	f7ff fc7e 	bl	8012c18 <__sinit>
 801331c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801331e:	07d9      	lsls	r1, r3, #31
 8013320:	d405      	bmi.n	801332e <_vfiprintf_r+0x2a>
 8013322:	89ab      	ldrh	r3, [r5, #12]
 8013324:	059a      	lsls	r2, r3, #22
 8013326:	d402      	bmi.n	801332e <_vfiprintf_r+0x2a>
 8013328:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801332a:	f7ff fde8 	bl	8012efe <__retarget_lock_acquire_recursive>
 801332e:	89ab      	ldrh	r3, [r5, #12]
 8013330:	071b      	lsls	r3, r3, #28
 8013332:	d501      	bpl.n	8013338 <_vfiprintf_r+0x34>
 8013334:	692b      	ldr	r3, [r5, #16]
 8013336:	b99b      	cbnz	r3, 8013360 <_vfiprintf_r+0x5c>
 8013338:	4629      	mov	r1, r5
 801333a:	4630      	mov	r0, r6
 801333c:	f000 fb82 	bl	8013a44 <__swsetup_r>
 8013340:	b170      	cbz	r0, 8013360 <_vfiprintf_r+0x5c>
 8013342:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013344:	07dc      	lsls	r4, r3, #31
 8013346:	d504      	bpl.n	8013352 <_vfiprintf_r+0x4e>
 8013348:	f04f 30ff 	mov.w	r0, #4294967295
 801334c:	b01d      	add	sp, #116	@ 0x74
 801334e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013352:	89ab      	ldrh	r3, [r5, #12]
 8013354:	0598      	lsls	r0, r3, #22
 8013356:	d4f7      	bmi.n	8013348 <_vfiprintf_r+0x44>
 8013358:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801335a:	f7ff fdd1 	bl	8012f00 <__retarget_lock_release_recursive>
 801335e:	e7f3      	b.n	8013348 <_vfiprintf_r+0x44>
 8013360:	2300      	movs	r3, #0
 8013362:	9309      	str	r3, [sp, #36]	@ 0x24
 8013364:	2320      	movs	r3, #32
 8013366:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801336a:	f8cd 800c 	str.w	r8, [sp, #12]
 801336e:	2330      	movs	r3, #48	@ 0x30
 8013370:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8013520 <_vfiprintf_r+0x21c>
 8013374:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013378:	f04f 0901 	mov.w	r9, #1
 801337c:	4623      	mov	r3, r4
 801337e:	469a      	mov	sl, r3
 8013380:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013384:	b10a      	cbz	r2, 801338a <_vfiprintf_r+0x86>
 8013386:	2a25      	cmp	r2, #37	@ 0x25
 8013388:	d1f9      	bne.n	801337e <_vfiprintf_r+0x7a>
 801338a:	ebba 0b04 	subs.w	fp, sl, r4
 801338e:	d00b      	beq.n	80133a8 <_vfiprintf_r+0xa4>
 8013390:	465b      	mov	r3, fp
 8013392:	4622      	mov	r2, r4
 8013394:	4629      	mov	r1, r5
 8013396:	4630      	mov	r0, r6
 8013398:	f7ff ffa1 	bl	80132de <__sfputs_r>
 801339c:	3001      	adds	r0, #1
 801339e:	f000 80a7 	beq.w	80134f0 <_vfiprintf_r+0x1ec>
 80133a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80133a4:	445a      	add	r2, fp
 80133a6:	9209      	str	r2, [sp, #36]	@ 0x24
 80133a8:	f89a 3000 	ldrb.w	r3, [sl]
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	f000 809f 	beq.w	80134f0 <_vfiprintf_r+0x1ec>
 80133b2:	2300      	movs	r3, #0
 80133b4:	f04f 32ff 	mov.w	r2, #4294967295
 80133b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80133bc:	f10a 0a01 	add.w	sl, sl, #1
 80133c0:	9304      	str	r3, [sp, #16]
 80133c2:	9307      	str	r3, [sp, #28]
 80133c4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80133c8:	931a      	str	r3, [sp, #104]	@ 0x68
 80133ca:	4654      	mov	r4, sl
 80133cc:	2205      	movs	r2, #5
 80133ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80133d2:	4853      	ldr	r0, [pc, #332]	@ (8013520 <_vfiprintf_r+0x21c>)
 80133d4:	f7ec fefc 	bl	80001d0 <memchr>
 80133d8:	9a04      	ldr	r2, [sp, #16]
 80133da:	b9d8      	cbnz	r0, 8013414 <_vfiprintf_r+0x110>
 80133dc:	06d1      	lsls	r1, r2, #27
 80133de:	bf44      	itt	mi
 80133e0:	2320      	movmi	r3, #32
 80133e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80133e6:	0713      	lsls	r3, r2, #28
 80133e8:	bf44      	itt	mi
 80133ea:	232b      	movmi	r3, #43	@ 0x2b
 80133ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80133f0:	f89a 3000 	ldrb.w	r3, [sl]
 80133f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80133f6:	d015      	beq.n	8013424 <_vfiprintf_r+0x120>
 80133f8:	9a07      	ldr	r2, [sp, #28]
 80133fa:	4654      	mov	r4, sl
 80133fc:	2000      	movs	r0, #0
 80133fe:	f04f 0c0a 	mov.w	ip, #10
 8013402:	4621      	mov	r1, r4
 8013404:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013408:	3b30      	subs	r3, #48	@ 0x30
 801340a:	2b09      	cmp	r3, #9
 801340c:	d94b      	bls.n	80134a6 <_vfiprintf_r+0x1a2>
 801340e:	b1b0      	cbz	r0, 801343e <_vfiprintf_r+0x13a>
 8013410:	9207      	str	r2, [sp, #28]
 8013412:	e014      	b.n	801343e <_vfiprintf_r+0x13a>
 8013414:	eba0 0308 	sub.w	r3, r0, r8
 8013418:	fa09 f303 	lsl.w	r3, r9, r3
 801341c:	4313      	orrs	r3, r2
 801341e:	9304      	str	r3, [sp, #16]
 8013420:	46a2      	mov	sl, r4
 8013422:	e7d2      	b.n	80133ca <_vfiprintf_r+0xc6>
 8013424:	9b03      	ldr	r3, [sp, #12]
 8013426:	1d19      	adds	r1, r3, #4
 8013428:	681b      	ldr	r3, [r3, #0]
 801342a:	9103      	str	r1, [sp, #12]
 801342c:	2b00      	cmp	r3, #0
 801342e:	bfbb      	ittet	lt
 8013430:	425b      	neglt	r3, r3
 8013432:	f042 0202 	orrlt.w	r2, r2, #2
 8013436:	9307      	strge	r3, [sp, #28]
 8013438:	9307      	strlt	r3, [sp, #28]
 801343a:	bfb8      	it	lt
 801343c:	9204      	strlt	r2, [sp, #16]
 801343e:	7823      	ldrb	r3, [r4, #0]
 8013440:	2b2e      	cmp	r3, #46	@ 0x2e
 8013442:	d10a      	bne.n	801345a <_vfiprintf_r+0x156>
 8013444:	7863      	ldrb	r3, [r4, #1]
 8013446:	2b2a      	cmp	r3, #42	@ 0x2a
 8013448:	d132      	bne.n	80134b0 <_vfiprintf_r+0x1ac>
 801344a:	9b03      	ldr	r3, [sp, #12]
 801344c:	1d1a      	adds	r2, r3, #4
 801344e:	681b      	ldr	r3, [r3, #0]
 8013450:	9203      	str	r2, [sp, #12]
 8013452:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013456:	3402      	adds	r4, #2
 8013458:	9305      	str	r3, [sp, #20]
 801345a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8013530 <_vfiprintf_r+0x22c>
 801345e:	7821      	ldrb	r1, [r4, #0]
 8013460:	2203      	movs	r2, #3
 8013462:	4650      	mov	r0, sl
 8013464:	f7ec feb4 	bl	80001d0 <memchr>
 8013468:	b138      	cbz	r0, 801347a <_vfiprintf_r+0x176>
 801346a:	9b04      	ldr	r3, [sp, #16]
 801346c:	eba0 000a 	sub.w	r0, r0, sl
 8013470:	2240      	movs	r2, #64	@ 0x40
 8013472:	4082      	lsls	r2, r0
 8013474:	4313      	orrs	r3, r2
 8013476:	3401      	adds	r4, #1
 8013478:	9304      	str	r3, [sp, #16]
 801347a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801347e:	4829      	ldr	r0, [pc, #164]	@ (8013524 <_vfiprintf_r+0x220>)
 8013480:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013484:	2206      	movs	r2, #6
 8013486:	f7ec fea3 	bl	80001d0 <memchr>
 801348a:	2800      	cmp	r0, #0
 801348c:	d03f      	beq.n	801350e <_vfiprintf_r+0x20a>
 801348e:	4b26      	ldr	r3, [pc, #152]	@ (8013528 <_vfiprintf_r+0x224>)
 8013490:	bb1b      	cbnz	r3, 80134da <_vfiprintf_r+0x1d6>
 8013492:	9b03      	ldr	r3, [sp, #12]
 8013494:	3307      	adds	r3, #7
 8013496:	f023 0307 	bic.w	r3, r3, #7
 801349a:	3308      	adds	r3, #8
 801349c:	9303      	str	r3, [sp, #12]
 801349e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80134a0:	443b      	add	r3, r7
 80134a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80134a4:	e76a      	b.n	801337c <_vfiprintf_r+0x78>
 80134a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80134aa:	460c      	mov	r4, r1
 80134ac:	2001      	movs	r0, #1
 80134ae:	e7a8      	b.n	8013402 <_vfiprintf_r+0xfe>
 80134b0:	2300      	movs	r3, #0
 80134b2:	3401      	adds	r4, #1
 80134b4:	9305      	str	r3, [sp, #20]
 80134b6:	4619      	mov	r1, r3
 80134b8:	f04f 0c0a 	mov.w	ip, #10
 80134bc:	4620      	mov	r0, r4
 80134be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80134c2:	3a30      	subs	r2, #48	@ 0x30
 80134c4:	2a09      	cmp	r2, #9
 80134c6:	d903      	bls.n	80134d0 <_vfiprintf_r+0x1cc>
 80134c8:	2b00      	cmp	r3, #0
 80134ca:	d0c6      	beq.n	801345a <_vfiprintf_r+0x156>
 80134cc:	9105      	str	r1, [sp, #20]
 80134ce:	e7c4      	b.n	801345a <_vfiprintf_r+0x156>
 80134d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80134d4:	4604      	mov	r4, r0
 80134d6:	2301      	movs	r3, #1
 80134d8:	e7f0      	b.n	80134bc <_vfiprintf_r+0x1b8>
 80134da:	ab03      	add	r3, sp, #12
 80134dc:	9300      	str	r3, [sp, #0]
 80134de:	462a      	mov	r2, r5
 80134e0:	4b12      	ldr	r3, [pc, #72]	@ (801352c <_vfiprintf_r+0x228>)
 80134e2:	a904      	add	r1, sp, #16
 80134e4:	4630      	mov	r0, r6
 80134e6:	f3af 8000 	nop.w
 80134ea:	4607      	mov	r7, r0
 80134ec:	1c78      	adds	r0, r7, #1
 80134ee:	d1d6      	bne.n	801349e <_vfiprintf_r+0x19a>
 80134f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80134f2:	07d9      	lsls	r1, r3, #31
 80134f4:	d405      	bmi.n	8013502 <_vfiprintf_r+0x1fe>
 80134f6:	89ab      	ldrh	r3, [r5, #12]
 80134f8:	059a      	lsls	r2, r3, #22
 80134fa:	d402      	bmi.n	8013502 <_vfiprintf_r+0x1fe>
 80134fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80134fe:	f7ff fcff 	bl	8012f00 <__retarget_lock_release_recursive>
 8013502:	89ab      	ldrh	r3, [r5, #12]
 8013504:	065b      	lsls	r3, r3, #25
 8013506:	f53f af1f 	bmi.w	8013348 <_vfiprintf_r+0x44>
 801350a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801350c:	e71e      	b.n	801334c <_vfiprintf_r+0x48>
 801350e:	ab03      	add	r3, sp, #12
 8013510:	9300      	str	r3, [sp, #0]
 8013512:	462a      	mov	r2, r5
 8013514:	4b05      	ldr	r3, [pc, #20]	@ (801352c <_vfiprintf_r+0x228>)
 8013516:	a904      	add	r1, sp, #16
 8013518:	4630      	mov	r0, r6
 801351a:	f000 f879 	bl	8013610 <_printf_i>
 801351e:	e7e4      	b.n	80134ea <_vfiprintf_r+0x1e6>
 8013520:	080169f9 	.word	0x080169f9
 8013524:	08016a03 	.word	0x08016a03
 8013528:	00000000 	.word	0x00000000
 801352c:	080132df 	.word	0x080132df
 8013530:	080169ff 	.word	0x080169ff

08013534 <_printf_common>:
 8013534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013538:	4616      	mov	r6, r2
 801353a:	4698      	mov	r8, r3
 801353c:	688a      	ldr	r2, [r1, #8]
 801353e:	690b      	ldr	r3, [r1, #16]
 8013540:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8013544:	4293      	cmp	r3, r2
 8013546:	bfb8      	it	lt
 8013548:	4613      	movlt	r3, r2
 801354a:	6033      	str	r3, [r6, #0]
 801354c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8013550:	4607      	mov	r7, r0
 8013552:	460c      	mov	r4, r1
 8013554:	b10a      	cbz	r2, 801355a <_printf_common+0x26>
 8013556:	3301      	adds	r3, #1
 8013558:	6033      	str	r3, [r6, #0]
 801355a:	6823      	ldr	r3, [r4, #0]
 801355c:	0699      	lsls	r1, r3, #26
 801355e:	bf42      	ittt	mi
 8013560:	6833      	ldrmi	r3, [r6, #0]
 8013562:	3302      	addmi	r3, #2
 8013564:	6033      	strmi	r3, [r6, #0]
 8013566:	6825      	ldr	r5, [r4, #0]
 8013568:	f015 0506 	ands.w	r5, r5, #6
 801356c:	d106      	bne.n	801357c <_printf_common+0x48>
 801356e:	f104 0a19 	add.w	sl, r4, #25
 8013572:	68e3      	ldr	r3, [r4, #12]
 8013574:	6832      	ldr	r2, [r6, #0]
 8013576:	1a9b      	subs	r3, r3, r2
 8013578:	42ab      	cmp	r3, r5
 801357a:	dc26      	bgt.n	80135ca <_printf_common+0x96>
 801357c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8013580:	6822      	ldr	r2, [r4, #0]
 8013582:	3b00      	subs	r3, #0
 8013584:	bf18      	it	ne
 8013586:	2301      	movne	r3, #1
 8013588:	0692      	lsls	r2, r2, #26
 801358a:	d42b      	bmi.n	80135e4 <_printf_common+0xb0>
 801358c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8013590:	4641      	mov	r1, r8
 8013592:	4638      	mov	r0, r7
 8013594:	47c8      	blx	r9
 8013596:	3001      	adds	r0, #1
 8013598:	d01e      	beq.n	80135d8 <_printf_common+0xa4>
 801359a:	6823      	ldr	r3, [r4, #0]
 801359c:	6922      	ldr	r2, [r4, #16]
 801359e:	f003 0306 	and.w	r3, r3, #6
 80135a2:	2b04      	cmp	r3, #4
 80135a4:	bf02      	ittt	eq
 80135a6:	68e5      	ldreq	r5, [r4, #12]
 80135a8:	6833      	ldreq	r3, [r6, #0]
 80135aa:	1aed      	subeq	r5, r5, r3
 80135ac:	68a3      	ldr	r3, [r4, #8]
 80135ae:	bf0c      	ite	eq
 80135b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80135b4:	2500      	movne	r5, #0
 80135b6:	4293      	cmp	r3, r2
 80135b8:	bfc4      	itt	gt
 80135ba:	1a9b      	subgt	r3, r3, r2
 80135bc:	18ed      	addgt	r5, r5, r3
 80135be:	2600      	movs	r6, #0
 80135c0:	341a      	adds	r4, #26
 80135c2:	42b5      	cmp	r5, r6
 80135c4:	d11a      	bne.n	80135fc <_printf_common+0xc8>
 80135c6:	2000      	movs	r0, #0
 80135c8:	e008      	b.n	80135dc <_printf_common+0xa8>
 80135ca:	2301      	movs	r3, #1
 80135cc:	4652      	mov	r2, sl
 80135ce:	4641      	mov	r1, r8
 80135d0:	4638      	mov	r0, r7
 80135d2:	47c8      	blx	r9
 80135d4:	3001      	adds	r0, #1
 80135d6:	d103      	bne.n	80135e0 <_printf_common+0xac>
 80135d8:	f04f 30ff 	mov.w	r0, #4294967295
 80135dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80135e0:	3501      	adds	r5, #1
 80135e2:	e7c6      	b.n	8013572 <_printf_common+0x3e>
 80135e4:	18e1      	adds	r1, r4, r3
 80135e6:	1c5a      	adds	r2, r3, #1
 80135e8:	2030      	movs	r0, #48	@ 0x30
 80135ea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80135ee:	4422      	add	r2, r4
 80135f0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80135f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80135f8:	3302      	adds	r3, #2
 80135fa:	e7c7      	b.n	801358c <_printf_common+0x58>
 80135fc:	2301      	movs	r3, #1
 80135fe:	4622      	mov	r2, r4
 8013600:	4641      	mov	r1, r8
 8013602:	4638      	mov	r0, r7
 8013604:	47c8      	blx	r9
 8013606:	3001      	adds	r0, #1
 8013608:	d0e6      	beq.n	80135d8 <_printf_common+0xa4>
 801360a:	3601      	adds	r6, #1
 801360c:	e7d9      	b.n	80135c2 <_printf_common+0x8e>
	...

08013610 <_printf_i>:
 8013610:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013614:	7e0f      	ldrb	r7, [r1, #24]
 8013616:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8013618:	2f78      	cmp	r7, #120	@ 0x78
 801361a:	4691      	mov	r9, r2
 801361c:	4680      	mov	r8, r0
 801361e:	460c      	mov	r4, r1
 8013620:	469a      	mov	sl, r3
 8013622:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8013626:	d807      	bhi.n	8013638 <_printf_i+0x28>
 8013628:	2f62      	cmp	r7, #98	@ 0x62
 801362a:	d80a      	bhi.n	8013642 <_printf_i+0x32>
 801362c:	2f00      	cmp	r7, #0
 801362e:	f000 80d1 	beq.w	80137d4 <_printf_i+0x1c4>
 8013632:	2f58      	cmp	r7, #88	@ 0x58
 8013634:	f000 80b8 	beq.w	80137a8 <_printf_i+0x198>
 8013638:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801363c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8013640:	e03a      	b.n	80136b8 <_printf_i+0xa8>
 8013642:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8013646:	2b15      	cmp	r3, #21
 8013648:	d8f6      	bhi.n	8013638 <_printf_i+0x28>
 801364a:	a101      	add	r1, pc, #4	@ (adr r1, 8013650 <_printf_i+0x40>)
 801364c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013650:	080136a9 	.word	0x080136a9
 8013654:	080136bd 	.word	0x080136bd
 8013658:	08013639 	.word	0x08013639
 801365c:	08013639 	.word	0x08013639
 8013660:	08013639 	.word	0x08013639
 8013664:	08013639 	.word	0x08013639
 8013668:	080136bd 	.word	0x080136bd
 801366c:	08013639 	.word	0x08013639
 8013670:	08013639 	.word	0x08013639
 8013674:	08013639 	.word	0x08013639
 8013678:	08013639 	.word	0x08013639
 801367c:	080137bb 	.word	0x080137bb
 8013680:	080136e7 	.word	0x080136e7
 8013684:	08013775 	.word	0x08013775
 8013688:	08013639 	.word	0x08013639
 801368c:	08013639 	.word	0x08013639
 8013690:	080137dd 	.word	0x080137dd
 8013694:	08013639 	.word	0x08013639
 8013698:	080136e7 	.word	0x080136e7
 801369c:	08013639 	.word	0x08013639
 80136a0:	08013639 	.word	0x08013639
 80136a4:	0801377d 	.word	0x0801377d
 80136a8:	6833      	ldr	r3, [r6, #0]
 80136aa:	1d1a      	adds	r2, r3, #4
 80136ac:	681b      	ldr	r3, [r3, #0]
 80136ae:	6032      	str	r2, [r6, #0]
 80136b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80136b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80136b8:	2301      	movs	r3, #1
 80136ba:	e09c      	b.n	80137f6 <_printf_i+0x1e6>
 80136bc:	6833      	ldr	r3, [r6, #0]
 80136be:	6820      	ldr	r0, [r4, #0]
 80136c0:	1d19      	adds	r1, r3, #4
 80136c2:	6031      	str	r1, [r6, #0]
 80136c4:	0606      	lsls	r6, r0, #24
 80136c6:	d501      	bpl.n	80136cc <_printf_i+0xbc>
 80136c8:	681d      	ldr	r5, [r3, #0]
 80136ca:	e003      	b.n	80136d4 <_printf_i+0xc4>
 80136cc:	0645      	lsls	r5, r0, #25
 80136ce:	d5fb      	bpl.n	80136c8 <_printf_i+0xb8>
 80136d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80136d4:	2d00      	cmp	r5, #0
 80136d6:	da03      	bge.n	80136e0 <_printf_i+0xd0>
 80136d8:	232d      	movs	r3, #45	@ 0x2d
 80136da:	426d      	negs	r5, r5
 80136dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80136e0:	4858      	ldr	r0, [pc, #352]	@ (8013844 <_printf_i+0x234>)
 80136e2:	230a      	movs	r3, #10
 80136e4:	e011      	b.n	801370a <_printf_i+0xfa>
 80136e6:	6821      	ldr	r1, [r4, #0]
 80136e8:	6833      	ldr	r3, [r6, #0]
 80136ea:	0608      	lsls	r0, r1, #24
 80136ec:	f853 5b04 	ldr.w	r5, [r3], #4
 80136f0:	d402      	bmi.n	80136f8 <_printf_i+0xe8>
 80136f2:	0649      	lsls	r1, r1, #25
 80136f4:	bf48      	it	mi
 80136f6:	b2ad      	uxthmi	r5, r5
 80136f8:	2f6f      	cmp	r7, #111	@ 0x6f
 80136fa:	4852      	ldr	r0, [pc, #328]	@ (8013844 <_printf_i+0x234>)
 80136fc:	6033      	str	r3, [r6, #0]
 80136fe:	bf14      	ite	ne
 8013700:	230a      	movne	r3, #10
 8013702:	2308      	moveq	r3, #8
 8013704:	2100      	movs	r1, #0
 8013706:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801370a:	6866      	ldr	r6, [r4, #4]
 801370c:	60a6      	str	r6, [r4, #8]
 801370e:	2e00      	cmp	r6, #0
 8013710:	db05      	blt.n	801371e <_printf_i+0x10e>
 8013712:	6821      	ldr	r1, [r4, #0]
 8013714:	432e      	orrs	r6, r5
 8013716:	f021 0104 	bic.w	r1, r1, #4
 801371a:	6021      	str	r1, [r4, #0]
 801371c:	d04b      	beq.n	80137b6 <_printf_i+0x1a6>
 801371e:	4616      	mov	r6, r2
 8013720:	fbb5 f1f3 	udiv	r1, r5, r3
 8013724:	fb03 5711 	mls	r7, r3, r1, r5
 8013728:	5dc7      	ldrb	r7, [r0, r7]
 801372a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801372e:	462f      	mov	r7, r5
 8013730:	42bb      	cmp	r3, r7
 8013732:	460d      	mov	r5, r1
 8013734:	d9f4      	bls.n	8013720 <_printf_i+0x110>
 8013736:	2b08      	cmp	r3, #8
 8013738:	d10b      	bne.n	8013752 <_printf_i+0x142>
 801373a:	6823      	ldr	r3, [r4, #0]
 801373c:	07df      	lsls	r7, r3, #31
 801373e:	d508      	bpl.n	8013752 <_printf_i+0x142>
 8013740:	6923      	ldr	r3, [r4, #16]
 8013742:	6861      	ldr	r1, [r4, #4]
 8013744:	4299      	cmp	r1, r3
 8013746:	bfde      	ittt	le
 8013748:	2330      	movle	r3, #48	@ 0x30
 801374a:	f806 3c01 	strble.w	r3, [r6, #-1]
 801374e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8013752:	1b92      	subs	r2, r2, r6
 8013754:	6122      	str	r2, [r4, #16]
 8013756:	f8cd a000 	str.w	sl, [sp]
 801375a:	464b      	mov	r3, r9
 801375c:	aa03      	add	r2, sp, #12
 801375e:	4621      	mov	r1, r4
 8013760:	4640      	mov	r0, r8
 8013762:	f7ff fee7 	bl	8013534 <_printf_common>
 8013766:	3001      	adds	r0, #1
 8013768:	d14a      	bne.n	8013800 <_printf_i+0x1f0>
 801376a:	f04f 30ff 	mov.w	r0, #4294967295
 801376e:	b004      	add	sp, #16
 8013770:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013774:	6823      	ldr	r3, [r4, #0]
 8013776:	f043 0320 	orr.w	r3, r3, #32
 801377a:	6023      	str	r3, [r4, #0]
 801377c:	4832      	ldr	r0, [pc, #200]	@ (8013848 <_printf_i+0x238>)
 801377e:	2778      	movs	r7, #120	@ 0x78
 8013780:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8013784:	6823      	ldr	r3, [r4, #0]
 8013786:	6831      	ldr	r1, [r6, #0]
 8013788:	061f      	lsls	r7, r3, #24
 801378a:	f851 5b04 	ldr.w	r5, [r1], #4
 801378e:	d402      	bmi.n	8013796 <_printf_i+0x186>
 8013790:	065f      	lsls	r7, r3, #25
 8013792:	bf48      	it	mi
 8013794:	b2ad      	uxthmi	r5, r5
 8013796:	6031      	str	r1, [r6, #0]
 8013798:	07d9      	lsls	r1, r3, #31
 801379a:	bf44      	itt	mi
 801379c:	f043 0320 	orrmi.w	r3, r3, #32
 80137a0:	6023      	strmi	r3, [r4, #0]
 80137a2:	b11d      	cbz	r5, 80137ac <_printf_i+0x19c>
 80137a4:	2310      	movs	r3, #16
 80137a6:	e7ad      	b.n	8013704 <_printf_i+0xf4>
 80137a8:	4826      	ldr	r0, [pc, #152]	@ (8013844 <_printf_i+0x234>)
 80137aa:	e7e9      	b.n	8013780 <_printf_i+0x170>
 80137ac:	6823      	ldr	r3, [r4, #0]
 80137ae:	f023 0320 	bic.w	r3, r3, #32
 80137b2:	6023      	str	r3, [r4, #0]
 80137b4:	e7f6      	b.n	80137a4 <_printf_i+0x194>
 80137b6:	4616      	mov	r6, r2
 80137b8:	e7bd      	b.n	8013736 <_printf_i+0x126>
 80137ba:	6833      	ldr	r3, [r6, #0]
 80137bc:	6825      	ldr	r5, [r4, #0]
 80137be:	6961      	ldr	r1, [r4, #20]
 80137c0:	1d18      	adds	r0, r3, #4
 80137c2:	6030      	str	r0, [r6, #0]
 80137c4:	062e      	lsls	r6, r5, #24
 80137c6:	681b      	ldr	r3, [r3, #0]
 80137c8:	d501      	bpl.n	80137ce <_printf_i+0x1be>
 80137ca:	6019      	str	r1, [r3, #0]
 80137cc:	e002      	b.n	80137d4 <_printf_i+0x1c4>
 80137ce:	0668      	lsls	r0, r5, #25
 80137d0:	d5fb      	bpl.n	80137ca <_printf_i+0x1ba>
 80137d2:	8019      	strh	r1, [r3, #0]
 80137d4:	2300      	movs	r3, #0
 80137d6:	6123      	str	r3, [r4, #16]
 80137d8:	4616      	mov	r6, r2
 80137da:	e7bc      	b.n	8013756 <_printf_i+0x146>
 80137dc:	6833      	ldr	r3, [r6, #0]
 80137de:	1d1a      	adds	r2, r3, #4
 80137e0:	6032      	str	r2, [r6, #0]
 80137e2:	681e      	ldr	r6, [r3, #0]
 80137e4:	6862      	ldr	r2, [r4, #4]
 80137e6:	2100      	movs	r1, #0
 80137e8:	4630      	mov	r0, r6
 80137ea:	f7ec fcf1 	bl	80001d0 <memchr>
 80137ee:	b108      	cbz	r0, 80137f4 <_printf_i+0x1e4>
 80137f0:	1b80      	subs	r0, r0, r6
 80137f2:	6060      	str	r0, [r4, #4]
 80137f4:	6863      	ldr	r3, [r4, #4]
 80137f6:	6123      	str	r3, [r4, #16]
 80137f8:	2300      	movs	r3, #0
 80137fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80137fe:	e7aa      	b.n	8013756 <_printf_i+0x146>
 8013800:	6923      	ldr	r3, [r4, #16]
 8013802:	4632      	mov	r2, r6
 8013804:	4649      	mov	r1, r9
 8013806:	4640      	mov	r0, r8
 8013808:	47d0      	blx	sl
 801380a:	3001      	adds	r0, #1
 801380c:	d0ad      	beq.n	801376a <_printf_i+0x15a>
 801380e:	6823      	ldr	r3, [r4, #0]
 8013810:	079b      	lsls	r3, r3, #30
 8013812:	d413      	bmi.n	801383c <_printf_i+0x22c>
 8013814:	68e0      	ldr	r0, [r4, #12]
 8013816:	9b03      	ldr	r3, [sp, #12]
 8013818:	4298      	cmp	r0, r3
 801381a:	bfb8      	it	lt
 801381c:	4618      	movlt	r0, r3
 801381e:	e7a6      	b.n	801376e <_printf_i+0x15e>
 8013820:	2301      	movs	r3, #1
 8013822:	4632      	mov	r2, r6
 8013824:	4649      	mov	r1, r9
 8013826:	4640      	mov	r0, r8
 8013828:	47d0      	blx	sl
 801382a:	3001      	adds	r0, #1
 801382c:	d09d      	beq.n	801376a <_printf_i+0x15a>
 801382e:	3501      	adds	r5, #1
 8013830:	68e3      	ldr	r3, [r4, #12]
 8013832:	9903      	ldr	r1, [sp, #12]
 8013834:	1a5b      	subs	r3, r3, r1
 8013836:	42ab      	cmp	r3, r5
 8013838:	dcf2      	bgt.n	8013820 <_printf_i+0x210>
 801383a:	e7eb      	b.n	8013814 <_printf_i+0x204>
 801383c:	2500      	movs	r5, #0
 801383e:	f104 0619 	add.w	r6, r4, #25
 8013842:	e7f5      	b.n	8013830 <_printf_i+0x220>
 8013844:	08016a0a 	.word	0x08016a0a
 8013848:	08016a1b 	.word	0x08016a1b

0801384c <__sflush_r>:
 801384c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013854:	0716      	lsls	r6, r2, #28
 8013856:	4605      	mov	r5, r0
 8013858:	460c      	mov	r4, r1
 801385a:	d454      	bmi.n	8013906 <__sflush_r+0xba>
 801385c:	684b      	ldr	r3, [r1, #4]
 801385e:	2b00      	cmp	r3, #0
 8013860:	dc02      	bgt.n	8013868 <__sflush_r+0x1c>
 8013862:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8013864:	2b00      	cmp	r3, #0
 8013866:	dd48      	ble.n	80138fa <__sflush_r+0xae>
 8013868:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801386a:	2e00      	cmp	r6, #0
 801386c:	d045      	beq.n	80138fa <__sflush_r+0xae>
 801386e:	2300      	movs	r3, #0
 8013870:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8013874:	682f      	ldr	r7, [r5, #0]
 8013876:	6a21      	ldr	r1, [r4, #32]
 8013878:	602b      	str	r3, [r5, #0]
 801387a:	d030      	beq.n	80138de <__sflush_r+0x92>
 801387c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801387e:	89a3      	ldrh	r3, [r4, #12]
 8013880:	0759      	lsls	r1, r3, #29
 8013882:	d505      	bpl.n	8013890 <__sflush_r+0x44>
 8013884:	6863      	ldr	r3, [r4, #4]
 8013886:	1ad2      	subs	r2, r2, r3
 8013888:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801388a:	b10b      	cbz	r3, 8013890 <__sflush_r+0x44>
 801388c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801388e:	1ad2      	subs	r2, r2, r3
 8013890:	2300      	movs	r3, #0
 8013892:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013894:	6a21      	ldr	r1, [r4, #32]
 8013896:	4628      	mov	r0, r5
 8013898:	47b0      	blx	r6
 801389a:	1c43      	adds	r3, r0, #1
 801389c:	89a3      	ldrh	r3, [r4, #12]
 801389e:	d106      	bne.n	80138ae <__sflush_r+0x62>
 80138a0:	6829      	ldr	r1, [r5, #0]
 80138a2:	291d      	cmp	r1, #29
 80138a4:	d82b      	bhi.n	80138fe <__sflush_r+0xb2>
 80138a6:	4a2a      	ldr	r2, [pc, #168]	@ (8013950 <__sflush_r+0x104>)
 80138a8:	40ca      	lsrs	r2, r1
 80138aa:	07d6      	lsls	r6, r2, #31
 80138ac:	d527      	bpl.n	80138fe <__sflush_r+0xb2>
 80138ae:	2200      	movs	r2, #0
 80138b0:	6062      	str	r2, [r4, #4]
 80138b2:	04d9      	lsls	r1, r3, #19
 80138b4:	6922      	ldr	r2, [r4, #16]
 80138b6:	6022      	str	r2, [r4, #0]
 80138b8:	d504      	bpl.n	80138c4 <__sflush_r+0x78>
 80138ba:	1c42      	adds	r2, r0, #1
 80138bc:	d101      	bne.n	80138c2 <__sflush_r+0x76>
 80138be:	682b      	ldr	r3, [r5, #0]
 80138c0:	b903      	cbnz	r3, 80138c4 <__sflush_r+0x78>
 80138c2:	6560      	str	r0, [r4, #84]	@ 0x54
 80138c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80138c6:	602f      	str	r7, [r5, #0]
 80138c8:	b1b9      	cbz	r1, 80138fa <__sflush_r+0xae>
 80138ca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80138ce:	4299      	cmp	r1, r3
 80138d0:	d002      	beq.n	80138d8 <__sflush_r+0x8c>
 80138d2:	4628      	mov	r0, r5
 80138d4:	f7ff fb42 	bl	8012f5c <_free_r>
 80138d8:	2300      	movs	r3, #0
 80138da:	6363      	str	r3, [r4, #52]	@ 0x34
 80138dc:	e00d      	b.n	80138fa <__sflush_r+0xae>
 80138de:	2301      	movs	r3, #1
 80138e0:	4628      	mov	r0, r5
 80138e2:	47b0      	blx	r6
 80138e4:	4602      	mov	r2, r0
 80138e6:	1c50      	adds	r0, r2, #1
 80138e8:	d1c9      	bne.n	801387e <__sflush_r+0x32>
 80138ea:	682b      	ldr	r3, [r5, #0]
 80138ec:	2b00      	cmp	r3, #0
 80138ee:	d0c6      	beq.n	801387e <__sflush_r+0x32>
 80138f0:	2b1d      	cmp	r3, #29
 80138f2:	d001      	beq.n	80138f8 <__sflush_r+0xac>
 80138f4:	2b16      	cmp	r3, #22
 80138f6:	d11e      	bne.n	8013936 <__sflush_r+0xea>
 80138f8:	602f      	str	r7, [r5, #0]
 80138fa:	2000      	movs	r0, #0
 80138fc:	e022      	b.n	8013944 <__sflush_r+0xf8>
 80138fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013902:	b21b      	sxth	r3, r3
 8013904:	e01b      	b.n	801393e <__sflush_r+0xf2>
 8013906:	690f      	ldr	r7, [r1, #16]
 8013908:	2f00      	cmp	r7, #0
 801390a:	d0f6      	beq.n	80138fa <__sflush_r+0xae>
 801390c:	0793      	lsls	r3, r2, #30
 801390e:	680e      	ldr	r6, [r1, #0]
 8013910:	bf08      	it	eq
 8013912:	694b      	ldreq	r3, [r1, #20]
 8013914:	600f      	str	r7, [r1, #0]
 8013916:	bf18      	it	ne
 8013918:	2300      	movne	r3, #0
 801391a:	eba6 0807 	sub.w	r8, r6, r7
 801391e:	608b      	str	r3, [r1, #8]
 8013920:	f1b8 0f00 	cmp.w	r8, #0
 8013924:	dde9      	ble.n	80138fa <__sflush_r+0xae>
 8013926:	6a21      	ldr	r1, [r4, #32]
 8013928:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801392a:	4643      	mov	r3, r8
 801392c:	463a      	mov	r2, r7
 801392e:	4628      	mov	r0, r5
 8013930:	47b0      	blx	r6
 8013932:	2800      	cmp	r0, #0
 8013934:	dc08      	bgt.n	8013948 <__sflush_r+0xfc>
 8013936:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801393a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801393e:	81a3      	strh	r3, [r4, #12]
 8013940:	f04f 30ff 	mov.w	r0, #4294967295
 8013944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013948:	4407      	add	r7, r0
 801394a:	eba8 0800 	sub.w	r8, r8, r0
 801394e:	e7e7      	b.n	8013920 <__sflush_r+0xd4>
 8013950:	20400001 	.word	0x20400001

08013954 <_fflush_r>:
 8013954:	b538      	push	{r3, r4, r5, lr}
 8013956:	690b      	ldr	r3, [r1, #16]
 8013958:	4605      	mov	r5, r0
 801395a:	460c      	mov	r4, r1
 801395c:	b913      	cbnz	r3, 8013964 <_fflush_r+0x10>
 801395e:	2500      	movs	r5, #0
 8013960:	4628      	mov	r0, r5
 8013962:	bd38      	pop	{r3, r4, r5, pc}
 8013964:	b118      	cbz	r0, 801396e <_fflush_r+0x1a>
 8013966:	6a03      	ldr	r3, [r0, #32]
 8013968:	b90b      	cbnz	r3, 801396e <_fflush_r+0x1a>
 801396a:	f7ff f955 	bl	8012c18 <__sinit>
 801396e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013972:	2b00      	cmp	r3, #0
 8013974:	d0f3      	beq.n	801395e <_fflush_r+0xa>
 8013976:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8013978:	07d0      	lsls	r0, r2, #31
 801397a:	d404      	bmi.n	8013986 <_fflush_r+0x32>
 801397c:	0599      	lsls	r1, r3, #22
 801397e:	d402      	bmi.n	8013986 <_fflush_r+0x32>
 8013980:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013982:	f7ff fabc 	bl	8012efe <__retarget_lock_acquire_recursive>
 8013986:	4628      	mov	r0, r5
 8013988:	4621      	mov	r1, r4
 801398a:	f7ff ff5f 	bl	801384c <__sflush_r>
 801398e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013990:	07da      	lsls	r2, r3, #31
 8013992:	4605      	mov	r5, r0
 8013994:	d4e4      	bmi.n	8013960 <_fflush_r+0xc>
 8013996:	89a3      	ldrh	r3, [r4, #12]
 8013998:	059b      	lsls	r3, r3, #22
 801399a:	d4e1      	bmi.n	8013960 <_fflush_r+0xc>
 801399c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801399e:	f7ff faaf 	bl	8012f00 <__retarget_lock_release_recursive>
 80139a2:	e7dd      	b.n	8013960 <_fflush_r+0xc>

080139a4 <fiprintf>:
 80139a4:	b40e      	push	{r1, r2, r3}
 80139a6:	b503      	push	{r0, r1, lr}
 80139a8:	4601      	mov	r1, r0
 80139aa:	ab03      	add	r3, sp, #12
 80139ac:	4805      	ldr	r0, [pc, #20]	@ (80139c4 <fiprintf+0x20>)
 80139ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80139b2:	6800      	ldr	r0, [r0, #0]
 80139b4:	9301      	str	r3, [sp, #4]
 80139b6:	f7ff fca5 	bl	8013304 <_vfiprintf_r>
 80139ba:	b002      	add	sp, #8
 80139bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80139c0:	b003      	add	sp, #12
 80139c2:	4770      	bx	lr
 80139c4:	20000080 	.word	0x20000080

080139c8 <__swbuf_r>:
 80139c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80139ca:	460e      	mov	r6, r1
 80139cc:	4614      	mov	r4, r2
 80139ce:	4605      	mov	r5, r0
 80139d0:	b118      	cbz	r0, 80139da <__swbuf_r+0x12>
 80139d2:	6a03      	ldr	r3, [r0, #32]
 80139d4:	b90b      	cbnz	r3, 80139da <__swbuf_r+0x12>
 80139d6:	f7ff f91f 	bl	8012c18 <__sinit>
 80139da:	69a3      	ldr	r3, [r4, #24]
 80139dc:	60a3      	str	r3, [r4, #8]
 80139de:	89a3      	ldrh	r3, [r4, #12]
 80139e0:	071a      	lsls	r2, r3, #28
 80139e2:	d501      	bpl.n	80139e8 <__swbuf_r+0x20>
 80139e4:	6923      	ldr	r3, [r4, #16]
 80139e6:	b943      	cbnz	r3, 80139fa <__swbuf_r+0x32>
 80139e8:	4621      	mov	r1, r4
 80139ea:	4628      	mov	r0, r5
 80139ec:	f000 f82a 	bl	8013a44 <__swsetup_r>
 80139f0:	b118      	cbz	r0, 80139fa <__swbuf_r+0x32>
 80139f2:	f04f 37ff 	mov.w	r7, #4294967295
 80139f6:	4638      	mov	r0, r7
 80139f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80139fa:	6823      	ldr	r3, [r4, #0]
 80139fc:	6922      	ldr	r2, [r4, #16]
 80139fe:	1a98      	subs	r0, r3, r2
 8013a00:	6963      	ldr	r3, [r4, #20]
 8013a02:	b2f6      	uxtb	r6, r6
 8013a04:	4283      	cmp	r3, r0
 8013a06:	4637      	mov	r7, r6
 8013a08:	dc05      	bgt.n	8013a16 <__swbuf_r+0x4e>
 8013a0a:	4621      	mov	r1, r4
 8013a0c:	4628      	mov	r0, r5
 8013a0e:	f7ff ffa1 	bl	8013954 <_fflush_r>
 8013a12:	2800      	cmp	r0, #0
 8013a14:	d1ed      	bne.n	80139f2 <__swbuf_r+0x2a>
 8013a16:	68a3      	ldr	r3, [r4, #8]
 8013a18:	3b01      	subs	r3, #1
 8013a1a:	60a3      	str	r3, [r4, #8]
 8013a1c:	6823      	ldr	r3, [r4, #0]
 8013a1e:	1c5a      	adds	r2, r3, #1
 8013a20:	6022      	str	r2, [r4, #0]
 8013a22:	701e      	strb	r6, [r3, #0]
 8013a24:	6962      	ldr	r2, [r4, #20]
 8013a26:	1c43      	adds	r3, r0, #1
 8013a28:	429a      	cmp	r2, r3
 8013a2a:	d004      	beq.n	8013a36 <__swbuf_r+0x6e>
 8013a2c:	89a3      	ldrh	r3, [r4, #12]
 8013a2e:	07db      	lsls	r3, r3, #31
 8013a30:	d5e1      	bpl.n	80139f6 <__swbuf_r+0x2e>
 8013a32:	2e0a      	cmp	r6, #10
 8013a34:	d1df      	bne.n	80139f6 <__swbuf_r+0x2e>
 8013a36:	4621      	mov	r1, r4
 8013a38:	4628      	mov	r0, r5
 8013a3a:	f7ff ff8b 	bl	8013954 <_fflush_r>
 8013a3e:	2800      	cmp	r0, #0
 8013a40:	d0d9      	beq.n	80139f6 <__swbuf_r+0x2e>
 8013a42:	e7d6      	b.n	80139f2 <__swbuf_r+0x2a>

08013a44 <__swsetup_r>:
 8013a44:	b538      	push	{r3, r4, r5, lr}
 8013a46:	4b29      	ldr	r3, [pc, #164]	@ (8013aec <__swsetup_r+0xa8>)
 8013a48:	4605      	mov	r5, r0
 8013a4a:	6818      	ldr	r0, [r3, #0]
 8013a4c:	460c      	mov	r4, r1
 8013a4e:	b118      	cbz	r0, 8013a58 <__swsetup_r+0x14>
 8013a50:	6a03      	ldr	r3, [r0, #32]
 8013a52:	b90b      	cbnz	r3, 8013a58 <__swsetup_r+0x14>
 8013a54:	f7ff f8e0 	bl	8012c18 <__sinit>
 8013a58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013a5c:	0719      	lsls	r1, r3, #28
 8013a5e:	d422      	bmi.n	8013aa6 <__swsetup_r+0x62>
 8013a60:	06da      	lsls	r2, r3, #27
 8013a62:	d407      	bmi.n	8013a74 <__swsetup_r+0x30>
 8013a64:	2209      	movs	r2, #9
 8013a66:	602a      	str	r2, [r5, #0]
 8013a68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013a6c:	81a3      	strh	r3, [r4, #12]
 8013a6e:	f04f 30ff 	mov.w	r0, #4294967295
 8013a72:	e033      	b.n	8013adc <__swsetup_r+0x98>
 8013a74:	0758      	lsls	r0, r3, #29
 8013a76:	d512      	bpl.n	8013a9e <__swsetup_r+0x5a>
 8013a78:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013a7a:	b141      	cbz	r1, 8013a8e <__swsetup_r+0x4a>
 8013a7c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013a80:	4299      	cmp	r1, r3
 8013a82:	d002      	beq.n	8013a8a <__swsetup_r+0x46>
 8013a84:	4628      	mov	r0, r5
 8013a86:	f7ff fa69 	bl	8012f5c <_free_r>
 8013a8a:	2300      	movs	r3, #0
 8013a8c:	6363      	str	r3, [r4, #52]	@ 0x34
 8013a8e:	89a3      	ldrh	r3, [r4, #12]
 8013a90:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8013a94:	81a3      	strh	r3, [r4, #12]
 8013a96:	2300      	movs	r3, #0
 8013a98:	6063      	str	r3, [r4, #4]
 8013a9a:	6923      	ldr	r3, [r4, #16]
 8013a9c:	6023      	str	r3, [r4, #0]
 8013a9e:	89a3      	ldrh	r3, [r4, #12]
 8013aa0:	f043 0308 	orr.w	r3, r3, #8
 8013aa4:	81a3      	strh	r3, [r4, #12]
 8013aa6:	6923      	ldr	r3, [r4, #16]
 8013aa8:	b94b      	cbnz	r3, 8013abe <__swsetup_r+0x7a>
 8013aaa:	89a3      	ldrh	r3, [r4, #12]
 8013aac:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8013ab0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013ab4:	d003      	beq.n	8013abe <__swsetup_r+0x7a>
 8013ab6:	4621      	mov	r1, r4
 8013ab8:	4628      	mov	r0, r5
 8013aba:	f000 f874 	bl	8013ba6 <__smakebuf_r>
 8013abe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013ac2:	f013 0201 	ands.w	r2, r3, #1
 8013ac6:	d00a      	beq.n	8013ade <__swsetup_r+0x9a>
 8013ac8:	2200      	movs	r2, #0
 8013aca:	60a2      	str	r2, [r4, #8]
 8013acc:	6962      	ldr	r2, [r4, #20]
 8013ace:	4252      	negs	r2, r2
 8013ad0:	61a2      	str	r2, [r4, #24]
 8013ad2:	6922      	ldr	r2, [r4, #16]
 8013ad4:	b942      	cbnz	r2, 8013ae8 <__swsetup_r+0xa4>
 8013ad6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8013ada:	d1c5      	bne.n	8013a68 <__swsetup_r+0x24>
 8013adc:	bd38      	pop	{r3, r4, r5, pc}
 8013ade:	0799      	lsls	r1, r3, #30
 8013ae0:	bf58      	it	pl
 8013ae2:	6962      	ldrpl	r2, [r4, #20]
 8013ae4:	60a2      	str	r2, [r4, #8]
 8013ae6:	e7f4      	b.n	8013ad2 <__swsetup_r+0x8e>
 8013ae8:	2000      	movs	r0, #0
 8013aea:	e7f7      	b.n	8013adc <__swsetup_r+0x98>
 8013aec:	20000080 	.word	0x20000080

08013af0 <abort>:
 8013af0:	b508      	push	{r3, lr}
 8013af2:	2006      	movs	r0, #6
 8013af4:	f000 f8bc 	bl	8013c70 <raise>
 8013af8:	2001      	movs	r0, #1
 8013afa:	f7ef f985 	bl	8002e08 <_exit>

08013afe <_realloc_r>:
 8013afe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b02:	4607      	mov	r7, r0
 8013b04:	4614      	mov	r4, r2
 8013b06:	460d      	mov	r5, r1
 8013b08:	b921      	cbnz	r1, 8013b14 <_realloc_r+0x16>
 8013b0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013b0e:	4611      	mov	r1, r2
 8013b10:	f7fe bea8 	b.w	8012864 <_malloc_r>
 8013b14:	b92a      	cbnz	r2, 8013b22 <_realloc_r+0x24>
 8013b16:	f7ff fa21 	bl	8012f5c <_free_r>
 8013b1a:	4625      	mov	r5, r4
 8013b1c:	4628      	mov	r0, r5
 8013b1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013b22:	f000 f8e3 	bl	8013cec <_malloc_usable_size_r>
 8013b26:	4284      	cmp	r4, r0
 8013b28:	4606      	mov	r6, r0
 8013b2a:	d802      	bhi.n	8013b32 <_realloc_r+0x34>
 8013b2c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8013b30:	d8f4      	bhi.n	8013b1c <_realloc_r+0x1e>
 8013b32:	4621      	mov	r1, r4
 8013b34:	4638      	mov	r0, r7
 8013b36:	f7fe fe95 	bl	8012864 <_malloc_r>
 8013b3a:	4680      	mov	r8, r0
 8013b3c:	b908      	cbnz	r0, 8013b42 <_realloc_r+0x44>
 8013b3e:	4645      	mov	r5, r8
 8013b40:	e7ec      	b.n	8013b1c <_realloc_r+0x1e>
 8013b42:	42b4      	cmp	r4, r6
 8013b44:	4622      	mov	r2, r4
 8013b46:	4629      	mov	r1, r5
 8013b48:	bf28      	it	cs
 8013b4a:	4632      	movcs	r2, r6
 8013b4c:	f7ff f9d9 	bl	8012f02 <memcpy>
 8013b50:	4629      	mov	r1, r5
 8013b52:	4638      	mov	r0, r7
 8013b54:	f7ff fa02 	bl	8012f5c <_free_r>
 8013b58:	e7f1      	b.n	8013b3e <_realloc_r+0x40>

08013b5a <__swhatbuf_r>:
 8013b5a:	b570      	push	{r4, r5, r6, lr}
 8013b5c:	460c      	mov	r4, r1
 8013b5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013b62:	2900      	cmp	r1, #0
 8013b64:	b096      	sub	sp, #88	@ 0x58
 8013b66:	4615      	mov	r5, r2
 8013b68:	461e      	mov	r6, r3
 8013b6a:	da0d      	bge.n	8013b88 <__swhatbuf_r+0x2e>
 8013b6c:	89a3      	ldrh	r3, [r4, #12]
 8013b6e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8013b72:	f04f 0100 	mov.w	r1, #0
 8013b76:	bf14      	ite	ne
 8013b78:	2340      	movne	r3, #64	@ 0x40
 8013b7a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8013b7e:	2000      	movs	r0, #0
 8013b80:	6031      	str	r1, [r6, #0]
 8013b82:	602b      	str	r3, [r5, #0]
 8013b84:	b016      	add	sp, #88	@ 0x58
 8013b86:	bd70      	pop	{r4, r5, r6, pc}
 8013b88:	466a      	mov	r2, sp
 8013b8a:	f000 f879 	bl	8013c80 <_fstat_r>
 8013b8e:	2800      	cmp	r0, #0
 8013b90:	dbec      	blt.n	8013b6c <__swhatbuf_r+0x12>
 8013b92:	9901      	ldr	r1, [sp, #4]
 8013b94:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8013b98:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8013b9c:	4259      	negs	r1, r3
 8013b9e:	4159      	adcs	r1, r3
 8013ba0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8013ba4:	e7eb      	b.n	8013b7e <__swhatbuf_r+0x24>

08013ba6 <__smakebuf_r>:
 8013ba6:	898b      	ldrh	r3, [r1, #12]
 8013ba8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013baa:	079d      	lsls	r5, r3, #30
 8013bac:	4606      	mov	r6, r0
 8013bae:	460c      	mov	r4, r1
 8013bb0:	d507      	bpl.n	8013bc2 <__smakebuf_r+0x1c>
 8013bb2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8013bb6:	6023      	str	r3, [r4, #0]
 8013bb8:	6123      	str	r3, [r4, #16]
 8013bba:	2301      	movs	r3, #1
 8013bbc:	6163      	str	r3, [r4, #20]
 8013bbe:	b003      	add	sp, #12
 8013bc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013bc2:	ab01      	add	r3, sp, #4
 8013bc4:	466a      	mov	r2, sp
 8013bc6:	f7ff ffc8 	bl	8013b5a <__swhatbuf_r>
 8013bca:	9f00      	ldr	r7, [sp, #0]
 8013bcc:	4605      	mov	r5, r0
 8013bce:	4639      	mov	r1, r7
 8013bd0:	4630      	mov	r0, r6
 8013bd2:	f7fe fe47 	bl	8012864 <_malloc_r>
 8013bd6:	b948      	cbnz	r0, 8013bec <__smakebuf_r+0x46>
 8013bd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013bdc:	059a      	lsls	r2, r3, #22
 8013bde:	d4ee      	bmi.n	8013bbe <__smakebuf_r+0x18>
 8013be0:	f023 0303 	bic.w	r3, r3, #3
 8013be4:	f043 0302 	orr.w	r3, r3, #2
 8013be8:	81a3      	strh	r3, [r4, #12]
 8013bea:	e7e2      	b.n	8013bb2 <__smakebuf_r+0xc>
 8013bec:	89a3      	ldrh	r3, [r4, #12]
 8013bee:	6020      	str	r0, [r4, #0]
 8013bf0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013bf4:	81a3      	strh	r3, [r4, #12]
 8013bf6:	9b01      	ldr	r3, [sp, #4]
 8013bf8:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8013bfc:	b15b      	cbz	r3, 8013c16 <__smakebuf_r+0x70>
 8013bfe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013c02:	4630      	mov	r0, r6
 8013c04:	f000 f84e 	bl	8013ca4 <_isatty_r>
 8013c08:	b128      	cbz	r0, 8013c16 <__smakebuf_r+0x70>
 8013c0a:	89a3      	ldrh	r3, [r4, #12]
 8013c0c:	f023 0303 	bic.w	r3, r3, #3
 8013c10:	f043 0301 	orr.w	r3, r3, #1
 8013c14:	81a3      	strh	r3, [r4, #12]
 8013c16:	89a3      	ldrh	r3, [r4, #12]
 8013c18:	431d      	orrs	r5, r3
 8013c1a:	81a5      	strh	r5, [r4, #12]
 8013c1c:	e7cf      	b.n	8013bbe <__smakebuf_r+0x18>

08013c1e <_raise_r>:
 8013c1e:	291f      	cmp	r1, #31
 8013c20:	b538      	push	{r3, r4, r5, lr}
 8013c22:	4605      	mov	r5, r0
 8013c24:	460c      	mov	r4, r1
 8013c26:	d904      	bls.n	8013c32 <_raise_r+0x14>
 8013c28:	2316      	movs	r3, #22
 8013c2a:	6003      	str	r3, [r0, #0]
 8013c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8013c30:	bd38      	pop	{r3, r4, r5, pc}
 8013c32:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8013c34:	b112      	cbz	r2, 8013c3c <_raise_r+0x1e>
 8013c36:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013c3a:	b94b      	cbnz	r3, 8013c50 <_raise_r+0x32>
 8013c3c:	4628      	mov	r0, r5
 8013c3e:	f000 f853 	bl	8013ce8 <_getpid_r>
 8013c42:	4622      	mov	r2, r4
 8013c44:	4601      	mov	r1, r0
 8013c46:	4628      	mov	r0, r5
 8013c48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013c4c:	f000 b83a 	b.w	8013cc4 <_kill_r>
 8013c50:	2b01      	cmp	r3, #1
 8013c52:	d00a      	beq.n	8013c6a <_raise_r+0x4c>
 8013c54:	1c59      	adds	r1, r3, #1
 8013c56:	d103      	bne.n	8013c60 <_raise_r+0x42>
 8013c58:	2316      	movs	r3, #22
 8013c5a:	6003      	str	r3, [r0, #0]
 8013c5c:	2001      	movs	r0, #1
 8013c5e:	e7e7      	b.n	8013c30 <_raise_r+0x12>
 8013c60:	2100      	movs	r1, #0
 8013c62:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8013c66:	4620      	mov	r0, r4
 8013c68:	4798      	blx	r3
 8013c6a:	2000      	movs	r0, #0
 8013c6c:	e7e0      	b.n	8013c30 <_raise_r+0x12>
	...

08013c70 <raise>:
 8013c70:	4b02      	ldr	r3, [pc, #8]	@ (8013c7c <raise+0xc>)
 8013c72:	4601      	mov	r1, r0
 8013c74:	6818      	ldr	r0, [r3, #0]
 8013c76:	f7ff bfd2 	b.w	8013c1e <_raise_r>
 8013c7a:	bf00      	nop
 8013c7c:	20000080 	.word	0x20000080

08013c80 <_fstat_r>:
 8013c80:	b538      	push	{r3, r4, r5, lr}
 8013c82:	4d07      	ldr	r5, [pc, #28]	@ (8013ca0 <_fstat_r+0x20>)
 8013c84:	2300      	movs	r3, #0
 8013c86:	4604      	mov	r4, r0
 8013c88:	4608      	mov	r0, r1
 8013c8a:	4611      	mov	r1, r2
 8013c8c:	602b      	str	r3, [r5, #0]
 8013c8e:	f7ef f90b 	bl	8002ea8 <_fstat>
 8013c92:	1c43      	adds	r3, r0, #1
 8013c94:	d102      	bne.n	8013c9c <_fstat_r+0x1c>
 8013c96:	682b      	ldr	r3, [r5, #0]
 8013c98:	b103      	cbz	r3, 8013c9c <_fstat_r+0x1c>
 8013c9a:	6023      	str	r3, [r4, #0]
 8013c9c:	bd38      	pop	{r3, r4, r5, pc}
 8013c9e:	bf00      	nop
 8013ca0:	20008bac 	.word	0x20008bac

08013ca4 <_isatty_r>:
 8013ca4:	b538      	push	{r3, r4, r5, lr}
 8013ca6:	4d06      	ldr	r5, [pc, #24]	@ (8013cc0 <_isatty_r+0x1c>)
 8013ca8:	2300      	movs	r3, #0
 8013caa:	4604      	mov	r4, r0
 8013cac:	4608      	mov	r0, r1
 8013cae:	602b      	str	r3, [r5, #0]
 8013cb0:	f7ef f90a 	bl	8002ec8 <_isatty>
 8013cb4:	1c43      	adds	r3, r0, #1
 8013cb6:	d102      	bne.n	8013cbe <_isatty_r+0x1a>
 8013cb8:	682b      	ldr	r3, [r5, #0]
 8013cba:	b103      	cbz	r3, 8013cbe <_isatty_r+0x1a>
 8013cbc:	6023      	str	r3, [r4, #0]
 8013cbe:	bd38      	pop	{r3, r4, r5, pc}
 8013cc0:	20008bac 	.word	0x20008bac

08013cc4 <_kill_r>:
 8013cc4:	b538      	push	{r3, r4, r5, lr}
 8013cc6:	4d07      	ldr	r5, [pc, #28]	@ (8013ce4 <_kill_r+0x20>)
 8013cc8:	2300      	movs	r3, #0
 8013cca:	4604      	mov	r4, r0
 8013ccc:	4608      	mov	r0, r1
 8013cce:	4611      	mov	r1, r2
 8013cd0:	602b      	str	r3, [r5, #0]
 8013cd2:	f7ef f887 	bl	8002de4 <_kill>
 8013cd6:	1c43      	adds	r3, r0, #1
 8013cd8:	d102      	bne.n	8013ce0 <_kill_r+0x1c>
 8013cda:	682b      	ldr	r3, [r5, #0]
 8013cdc:	b103      	cbz	r3, 8013ce0 <_kill_r+0x1c>
 8013cde:	6023      	str	r3, [r4, #0]
 8013ce0:	bd38      	pop	{r3, r4, r5, pc}
 8013ce2:	bf00      	nop
 8013ce4:	20008bac 	.word	0x20008bac

08013ce8 <_getpid_r>:
 8013ce8:	f7ef b874 	b.w	8002dd4 <_getpid>

08013cec <_malloc_usable_size_r>:
 8013cec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013cf0:	1f18      	subs	r0, r3, #4
 8013cf2:	2b00      	cmp	r3, #0
 8013cf4:	bfbc      	itt	lt
 8013cf6:	580b      	ldrlt	r3, [r1, r0]
 8013cf8:	18c0      	addlt	r0, r0, r3
 8013cfa:	4770      	bx	lr

08013cfc <fmax>:
 8013cfc:	b508      	push	{r3, lr}
 8013cfe:	ed2d 8b04 	vpush	{d8-d9}
 8013d02:	eeb0 8a40 	vmov.f32	s16, s0
 8013d06:	eef0 8a60 	vmov.f32	s17, s1
 8013d0a:	eeb0 9a41 	vmov.f32	s18, s2
 8013d0e:	eef0 9a61 	vmov.f32	s19, s3
 8013d12:	f000 f81d 	bl	8013d50 <__fpclassifyd>
 8013d16:	b950      	cbnz	r0, 8013d2e <fmax+0x32>
 8013d18:	eeb0 8a49 	vmov.f32	s16, s18
 8013d1c:	eef0 8a69 	vmov.f32	s17, s19
 8013d20:	eeb0 0a48 	vmov.f32	s0, s16
 8013d24:	eef0 0a68 	vmov.f32	s1, s17
 8013d28:	ecbd 8b04 	vpop	{d8-d9}
 8013d2c:	bd08      	pop	{r3, pc}
 8013d2e:	eeb0 0a49 	vmov.f32	s0, s18
 8013d32:	eef0 0a69 	vmov.f32	s1, s19
 8013d36:	f000 f80b 	bl	8013d50 <__fpclassifyd>
 8013d3a:	2800      	cmp	r0, #0
 8013d3c:	d0f0      	beq.n	8013d20 <fmax+0x24>
 8013d3e:	ec53 2b19 	vmov	r2, r3, d9
 8013d42:	ec51 0b18 	vmov	r0, r1, d8
 8013d46:	f7ec fedf 	bl	8000b08 <__aeabi_dcmpgt>
 8013d4a:	2800      	cmp	r0, #0
 8013d4c:	d0e4      	beq.n	8013d18 <fmax+0x1c>
 8013d4e:	e7e7      	b.n	8013d20 <fmax+0x24>

08013d50 <__fpclassifyd>:
 8013d50:	ec51 0b10 	vmov	r0, r1, d0
 8013d54:	460b      	mov	r3, r1
 8013d56:	f031 4100 	bics.w	r1, r1, #2147483648	@ 0x80000000
 8013d5a:	b510      	push	{r4, lr}
 8013d5c:	d104      	bne.n	8013d68 <__fpclassifyd+0x18>
 8013d5e:	2800      	cmp	r0, #0
 8013d60:	bf0c      	ite	eq
 8013d62:	2002      	moveq	r0, #2
 8013d64:	2003      	movne	r0, #3
 8013d66:	bd10      	pop	{r4, pc}
 8013d68:	4a09      	ldr	r2, [pc, #36]	@ (8013d90 <__fpclassifyd+0x40>)
 8013d6a:	f5a1 1480 	sub.w	r4, r1, #1048576	@ 0x100000
 8013d6e:	4294      	cmp	r4, r2
 8013d70:	d908      	bls.n	8013d84 <__fpclassifyd+0x34>
 8013d72:	4a08      	ldr	r2, [pc, #32]	@ (8013d94 <__fpclassifyd+0x44>)
 8013d74:	4213      	tst	r3, r2
 8013d76:	d007      	beq.n	8013d88 <__fpclassifyd+0x38>
 8013d78:	4291      	cmp	r1, r2
 8013d7a:	d107      	bne.n	8013d8c <__fpclassifyd+0x3c>
 8013d7c:	fab0 f080 	clz	r0, r0
 8013d80:	0940      	lsrs	r0, r0, #5
 8013d82:	e7f0      	b.n	8013d66 <__fpclassifyd+0x16>
 8013d84:	2004      	movs	r0, #4
 8013d86:	e7ee      	b.n	8013d66 <__fpclassifyd+0x16>
 8013d88:	2003      	movs	r0, #3
 8013d8a:	e7ec      	b.n	8013d66 <__fpclassifyd+0x16>
 8013d8c:	2000      	movs	r0, #0
 8013d8e:	e7ea      	b.n	8013d66 <__fpclassifyd+0x16>
 8013d90:	7fdfffff 	.word	0x7fdfffff
 8013d94:	7ff00000 	.word	0x7ff00000

08013d98 <_init>:
 8013d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d9a:	bf00      	nop
 8013d9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013d9e:	bc08      	pop	{r3}
 8013da0:	469e      	mov	lr, r3
 8013da2:	4770      	bx	lr

08013da4 <_fini>:
 8013da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013da6:	bf00      	nop
 8013da8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013daa:	bc08      	pop	{r3}
 8013dac:	469e      	mov	lr, r3
 8013dae:	4770      	bx	lr
