
SMCONTROLLER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019d34  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00009390  08019ec8  08019ec8  0001aec8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08023258  08023258  00025adc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08023258  08023258  00024258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08023260  08023260  00025adc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08023260  08023260  00024260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08023264  08023264  00024264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000adc  20000000  08023268  00025000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00025adc  2**0
                  CONTENTS
 10 .bss          00014980  20000ae0  20000ae0  00025ae0  2**3
                  ALLOC
 11 ._user_heap_stack 00006000  20015460  20015460  00025ae0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00025adc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00030f8c  00000000  00000000  00025b0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000786f  00000000  00000000  00056a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000028f8  00000000  00000000  0005e308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000020a7  00000000  00000000  00060c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000136fb  00000000  00000000  00062ca7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003d46b  00000000  00000000  000763a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fdbfc  00000000  00000000  000b380d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001b1409  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000c39c  00000000  00000000  001b144c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  001bd7e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000ae0 	.word	0x20000ae0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08019eac 	.word	0x08019eac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000ae4 	.word	0x20000ae4
 80001cc:	08019eac 	.word	0x08019eac

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_frsub>:
 8000ca8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000cac:	e002      	b.n	8000cb4 <__addsf3>
 8000cae:	bf00      	nop

08000cb0 <__aeabi_fsub>:
 8000cb0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000cb4 <__addsf3>:
 8000cb4:	0042      	lsls	r2, r0, #1
 8000cb6:	bf1f      	itttt	ne
 8000cb8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000cbc:	ea92 0f03 	teqne	r2, r3
 8000cc0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cc4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cc8:	d06a      	beq.n	8000da0 <__addsf3+0xec>
 8000cca:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cce:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cd2:	bfc1      	itttt	gt
 8000cd4:	18d2      	addgt	r2, r2, r3
 8000cd6:	4041      	eorgt	r1, r0
 8000cd8:	4048      	eorgt	r0, r1
 8000cda:	4041      	eorgt	r1, r0
 8000cdc:	bfb8      	it	lt
 8000cde:	425b      	neglt	r3, r3
 8000ce0:	2b19      	cmp	r3, #25
 8000ce2:	bf88      	it	hi
 8000ce4:	4770      	bxhi	lr
 8000ce6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000cea:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cee:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000cf2:	bf18      	it	ne
 8000cf4:	4240      	negne	r0, r0
 8000cf6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000cfa:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000cfe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000d02:	bf18      	it	ne
 8000d04:	4249      	negne	r1, r1
 8000d06:	ea92 0f03 	teq	r2, r3
 8000d0a:	d03f      	beq.n	8000d8c <__addsf3+0xd8>
 8000d0c:	f1a2 0201 	sub.w	r2, r2, #1
 8000d10:	fa41 fc03 	asr.w	ip, r1, r3
 8000d14:	eb10 000c 	adds.w	r0, r0, ip
 8000d18:	f1c3 0320 	rsb	r3, r3, #32
 8000d1c:	fa01 f103 	lsl.w	r1, r1, r3
 8000d20:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d24:	d502      	bpl.n	8000d2c <__addsf3+0x78>
 8000d26:	4249      	negs	r1, r1
 8000d28:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d2c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000d30:	d313      	bcc.n	8000d5a <__addsf3+0xa6>
 8000d32:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000d36:	d306      	bcc.n	8000d46 <__addsf3+0x92>
 8000d38:	0840      	lsrs	r0, r0, #1
 8000d3a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d3e:	f102 0201 	add.w	r2, r2, #1
 8000d42:	2afe      	cmp	r2, #254	@ 0xfe
 8000d44:	d251      	bcs.n	8000dea <__addsf3+0x136>
 8000d46:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000d4a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d4e:	bf08      	it	eq
 8000d50:	f020 0001 	biceq.w	r0, r0, #1
 8000d54:	ea40 0003 	orr.w	r0, r0, r3
 8000d58:	4770      	bx	lr
 8000d5a:	0049      	lsls	r1, r1, #1
 8000d5c:	eb40 0000 	adc.w	r0, r0, r0
 8000d60:	3a01      	subs	r2, #1
 8000d62:	bf28      	it	cs
 8000d64:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000d68:	d2ed      	bcs.n	8000d46 <__addsf3+0x92>
 8000d6a:	fab0 fc80 	clz	ip, r0
 8000d6e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d72:	ebb2 020c 	subs.w	r2, r2, ip
 8000d76:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d7a:	bfaa      	itet	ge
 8000d7c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d80:	4252      	neglt	r2, r2
 8000d82:	4318      	orrge	r0, r3
 8000d84:	bfbc      	itt	lt
 8000d86:	40d0      	lsrlt	r0, r2
 8000d88:	4318      	orrlt	r0, r3
 8000d8a:	4770      	bx	lr
 8000d8c:	f092 0f00 	teq	r2, #0
 8000d90:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000d94:	bf06      	itte	eq
 8000d96:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000d9a:	3201      	addeq	r2, #1
 8000d9c:	3b01      	subne	r3, #1
 8000d9e:	e7b5      	b.n	8000d0c <__addsf3+0x58>
 8000da0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000da4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000da8:	bf18      	it	ne
 8000daa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dae:	d021      	beq.n	8000df4 <__addsf3+0x140>
 8000db0:	ea92 0f03 	teq	r2, r3
 8000db4:	d004      	beq.n	8000dc0 <__addsf3+0x10c>
 8000db6:	f092 0f00 	teq	r2, #0
 8000dba:	bf08      	it	eq
 8000dbc:	4608      	moveq	r0, r1
 8000dbe:	4770      	bx	lr
 8000dc0:	ea90 0f01 	teq	r0, r1
 8000dc4:	bf1c      	itt	ne
 8000dc6:	2000      	movne	r0, #0
 8000dc8:	4770      	bxne	lr
 8000dca:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000dce:	d104      	bne.n	8000dda <__addsf3+0x126>
 8000dd0:	0040      	lsls	r0, r0, #1
 8000dd2:	bf28      	it	cs
 8000dd4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000dd8:	4770      	bx	lr
 8000dda:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000dde:	bf3c      	itt	cc
 8000de0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000de4:	4770      	bxcc	lr
 8000de6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000dea:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000dee:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000df2:	4770      	bx	lr
 8000df4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000df8:	bf16      	itet	ne
 8000dfa:	4608      	movne	r0, r1
 8000dfc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e00:	4601      	movne	r1, r0
 8000e02:	0242      	lsls	r2, r0, #9
 8000e04:	bf06      	itte	eq
 8000e06:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e0a:	ea90 0f01 	teqeq	r0, r1
 8000e0e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000e12:	4770      	bx	lr

08000e14 <__aeabi_ui2f>:
 8000e14:	f04f 0300 	mov.w	r3, #0
 8000e18:	e004      	b.n	8000e24 <__aeabi_i2f+0x8>
 8000e1a:	bf00      	nop

08000e1c <__aeabi_i2f>:
 8000e1c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000e20:	bf48      	it	mi
 8000e22:	4240      	negmi	r0, r0
 8000e24:	ea5f 0c00 	movs.w	ip, r0
 8000e28:	bf08      	it	eq
 8000e2a:	4770      	bxeq	lr
 8000e2c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000e30:	4601      	mov	r1, r0
 8000e32:	f04f 0000 	mov.w	r0, #0
 8000e36:	e01c      	b.n	8000e72 <__aeabi_l2f+0x2a>

08000e38 <__aeabi_ul2f>:
 8000e38:	ea50 0201 	orrs.w	r2, r0, r1
 8000e3c:	bf08      	it	eq
 8000e3e:	4770      	bxeq	lr
 8000e40:	f04f 0300 	mov.w	r3, #0
 8000e44:	e00a      	b.n	8000e5c <__aeabi_l2f+0x14>
 8000e46:	bf00      	nop

08000e48 <__aeabi_l2f>:
 8000e48:	ea50 0201 	orrs.w	r2, r0, r1
 8000e4c:	bf08      	it	eq
 8000e4e:	4770      	bxeq	lr
 8000e50:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000e54:	d502      	bpl.n	8000e5c <__aeabi_l2f+0x14>
 8000e56:	4240      	negs	r0, r0
 8000e58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e5c:	ea5f 0c01 	movs.w	ip, r1
 8000e60:	bf02      	ittt	eq
 8000e62:	4684      	moveq	ip, r0
 8000e64:	4601      	moveq	r1, r0
 8000e66:	2000      	moveq	r0, #0
 8000e68:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000e6c:	bf08      	it	eq
 8000e6e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e72:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e76:	fabc f28c 	clz	r2, ip
 8000e7a:	3a08      	subs	r2, #8
 8000e7c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e80:	db10      	blt.n	8000ea4 <__aeabi_l2f+0x5c>
 8000e82:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e86:	4463      	add	r3, ip
 8000e88:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e8c:	f1c2 0220 	rsb	r2, r2, #32
 8000e90:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000e94:	fa20 f202 	lsr.w	r2, r0, r2
 8000e98:	eb43 0002 	adc.w	r0, r3, r2
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f102 0220 	add.w	r2, r2, #32
 8000ea8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000eac:	f1c2 0220 	rsb	r2, r2, #32
 8000eb0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000eb4:	fa21 f202 	lsr.w	r2, r1, r2
 8000eb8:	eb43 0002 	adc.w	r0, r3, r2
 8000ebc:	bf08      	it	eq
 8000ebe:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ec2:	4770      	bx	lr

08000ec4 <__aeabi_uldivmod>:
 8000ec4:	b953      	cbnz	r3, 8000edc <__aeabi_uldivmod+0x18>
 8000ec6:	b94a      	cbnz	r2, 8000edc <__aeabi_uldivmod+0x18>
 8000ec8:	2900      	cmp	r1, #0
 8000eca:	bf08      	it	eq
 8000ecc:	2800      	cmpeq	r0, #0
 8000ece:	bf1c      	itt	ne
 8000ed0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ed4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ed8:	f000 b9be 	b.w	8001258 <__aeabi_idiv0>
 8000edc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ee0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ee4:	f000 f83c 	bl	8000f60 <__udivmoddi4>
 8000ee8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000eec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ef0:	b004      	add	sp, #16
 8000ef2:	4770      	bx	lr

08000ef4 <__aeabi_d2lz>:
 8000ef4:	b538      	push	{r3, r4, r5, lr}
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	2300      	movs	r3, #0
 8000efa:	4604      	mov	r4, r0
 8000efc:	460d      	mov	r5, r1
 8000efe:	f7ff fdfd 	bl	8000afc <__aeabi_dcmplt>
 8000f02:	b928      	cbnz	r0, 8000f10 <__aeabi_d2lz+0x1c>
 8000f04:	4620      	mov	r0, r4
 8000f06:	4629      	mov	r1, r5
 8000f08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000f0c:	f000 b80a 	b.w	8000f24 <__aeabi_d2ulz>
 8000f10:	4620      	mov	r0, r4
 8000f12:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000f16:	f000 f805 	bl	8000f24 <__aeabi_d2ulz>
 8000f1a:	4240      	negs	r0, r0
 8000f1c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f20:	bd38      	pop	{r3, r4, r5, pc}
 8000f22:	bf00      	nop

08000f24 <__aeabi_d2ulz>:
 8000f24:	b5d0      	push	{r4, r6, r7, lr}
 8000f26:	4b0c      	ldr	r3, [pc, #48]	@ (8000f58 <__aeabi_d2ulz+0x34>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	4606      	mov	r6, r0
 8000f2c:	460f      	mov	r7, r1
 8000f2e:	f7ff fb73 	bl	8000618 <__aeabi_dmul>
 8000f32:	f7ff fe49 	bl	8000bc8 <__aeabi_d2uiz>
 8000f36:	4604      	mov	r4, r0
 8000f38:	f7ff faf4 	bl	8000524 <__aeabi_ui2d>
 8000f3c:	4b07      	ldr	r3, [pc, #28]	@ (8000f5c <__aeabi_d2ulz+0x38>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	f7ff fb6a 	bl	8000618 <__aeabi_dmul>
 8000f44:	4602      	mov	r2, r0
 8000f46:	460b      	mov	r3, r1
 8000f48:	4630      	mov	r0, r6
 8000f4a:	4639      	mov	r1, r7
 8000f4c:	f7ff f9ac 	bl	80002a8 <__aeabi_dsub>
 8000f50:	f7ff fe3a 	bl	8000bc8 <__aeabi_d2uiz>
 8000f54:	4621      	mov	r1, r4
 8000f56:	bdd0      	pop	{r4, r6, r7, pc}
 8000f58:	3df00000 	.word	0x3df00000
 8000f5c:	41f00000 	.word	0x41f00000

08000f60 <__udivmoddi4>:
 8000f60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f64:	9d08      	ldr	r5, [sp, #32]
 8000f66:	468e      	mov	lr, r1
 8000f68:	4604      	mov	r4, r0
 8000f6a:	4688      	mov	r8, r1
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d14a      	bne.n	8001006 <__udivmoddi4+0xa6>
 8000f70:	428a      	cmp	r2, r1
 8000f72:	4617      	mov	r7, r2
 8000f74:	d962      	bls.n	800103c <__udivmoddi4+0xdc>
 8000f76:	fab2 f682 	clz	r6, r2
 8000f7a:	b14e      	cbz	r6, 8000f90 <__udivmoddi4+0x30>
 8000f7c:	f1c6 0320 	rsb	r3, r6, #32
 8000f80:	fa01 f806 	lsl.w	r8, r1, r6
 8000f84:	fa20 f303 	lsr.w	r3, r0, r3
 8000f88:	40b7      	lsls	r7, r6
 8000f8a:	ea43 0808 	orr.w	r8, r3, r8
 8000f8e:	40b4      	lsls	r4, r6
 8000f90:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f94:	fa1f fc87 	uxth.w	ip, r7
 8000f98:	fbb8 f1fe 	udiv	r1, r8, lr
 8000f9c:	0c23      	lsrs	r3, r4, #16
 8000f9e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000fa2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000fa6:	fb01 f20c 	mul.w	r2, r1, ip
 8000faa:	429a      	cmp	r2, r3
 8000fac:	d909      	bls.n	8000fc2 <__udivmoddi4+0x62>
 8000fae:	18fb      	adds	r3, r7, r3
 8000fb0:	f101 30ff 	add.w	r0, r1, #4294967295
 8000fb4:	f080 80ea 	bcs.w	800118c <__udivmoddi4+0x22c>
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	f240 80e7 	bls.w	800118c <__udivmoddi4+0x22c>
 8000fbe:	3902      	subs	r1, #2
 8000fc0:	443b      	add	r3, r7
 8000fc2:	1a9a      	subs	r2, r3, r2
 8000fc4:	b2a3      	uxth	r3, r4
 8000fc6:	fbb2 f0fe 	udiv	r0, r2, lr
 8000fca:	fb0e 2210 	mls	r2, lr, r0, r2
 8000fce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000fd2:	fb00 fc0c 	mul.w	ip, r0, ip
 8000fd6:	459c      	cmp	ip, r3
 8000fd8:	d909      	bls.n	8000fee <__udivmoddi4+0x8e>
 8000fda:	18fb      	adds	r3, r7, r3
 8000fdc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000fe0:	f080 80d6 	bcs.w	8001190 <__udivmoddi4+0x230>
 8000fe4:	459c      	cmp	ip, r3
 8000fe6:	f240 80d3 	bls.w	8001190 <__udivmoddi4+0x230>
 8000fea:	443b      	add	r3, r7
 8000fec:	3802      	subs	r0, #2
 8000fee:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ff2:	eba3 030c 	sub.w	r3, r3, ip
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	b11d      	cbz	r5, 8001002 <__udivmoddi4+0xa2>
 8000ffa:	40f3      	lsrs	r3, r6
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	e9c5 3200 	strd	r3, r2, [r5]
 8001002:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001006:	428b      	cmp	r3, r1
 8001008:	d905      	bls.n	8001016 <__udivmoddi4+0xb6>
 800100a:	b10d      	cbz	r5, 8001010 <__udivmoddi4+0xb0>
 800100c:	e9c5 0100 	strd	r0, r1, [r5]
 8001010:	2100      	movs	r1, #0
 8001012:	4608      	mov	r0, r1
 8001014:	e7f5      	b.n	8001002 <__udivmoddi4+0xa2>
 8001016:	fab3 f183 	clz	r1, r3
 800101a:	2900      	cmp	r1, #0
 800101c:	d146      	bne.n	80010ac <__udivmoddi4+0x14c>
 800101e:	4573      	cmp	r3, lr
 8001020:	d302      	bcc.n	8001028 <__udivmoddi4+0xc8>
 8001022:	4282      	cmp	r2, r0
 8001024:	f200 8105 	bhi.w	8001232 <__udivmoddi4+0x2d2>
 8001028:	1a84      	subs	r4, r0, r2
 800102a:	eb6e 0203 	sbc.w	r2, lr, r3
 800102e:	2001      	movs	r0, #1
 8001030:	4690      	mov	r8, r2
 8001032:	2d00      	cmp	r5, #0
 8001034:	d0e5      	beq.n	8001002 <__udivmoddi4+0xa2>
 8001036:	e9c5 4800 	strd	r4, r8, [r5]
 800103a:	e7e2      	b.n	8001002 <__udivmoddi4+0xa2>
 800103c:	2a00      	cmp	r2, #0
 800103e:	f000 8090 	beq.w	8001162 <__udivmoddi4+0x202>
 8001042:	fab2 f682 	clz	r6, r2
 8001046:	2e00      	cmp	r6, #0
 8001048:	f040 80a4 	bne.w	8001194 <__udivmoddi4+0x234>
 800104c:	1a8a      	subs	r2, r1, r2
 800104e:	0c03      	lsrs	r3, r0, #16
 8001050:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001054:	b280      	uxth	r0, r0
 8001056:	b2bc      	uxth	r4, r7
 8001058:	2101      	movs	r1, #1
 800105a:	fbb2 fcfe 	udiv	ip, r2, lr
 800105e:	fb0e 221c 	mls	r2, lr, ip, r2
 8001062:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001066:	fb04 f20c 	mul.w	r2, r4, ip
 800106a:	429a      	cmp	r2, r3
 800106c:	d907      	bls.n	800107e <__udivmoddi4+0x11e>
 800106e:	18fb      	adds	r3, r7, r3
 8001070:	f10c 38ff 	add.w	r8, ip, #4294967295
 8001074:	d202      	bcs.n	800107c <__udivmoddi4+0x11c>
 8001076:	429a      	cmp	r2, r3
 8001078:	f200 80e0 	bhi.w	800123c <__udivmoddi4+0x2dc>
 800107c:	46c4      	mov	ip, r8
 800107e:	1a9b      	subs	r3, r3, r2
 8001080:	fbb3 f2fe 	udiv	r2, r3, lr
 8001084:	fb0e 3312 	mls	r3, lr, r2, r3
 8001088:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800108c:	fb02 f404 	mul.w	r4, r2, r4
 8001090:	429c      	cmp	r4, r3
 8001092:	d907      	bls.n	80010a4 <__udivmoddi4+0x144>
 8001094:	18fb      	adds	r3, r7, r3
 8001096:	f102 30ff 	add.w	r0, r2, #4294967295
 800109a:	d202      	bcs.n	80010a2 <__udivmoddi4+0x142>
 800109c:	429c      	cmp	r4, r3
 800109e:	f200 80ca 	bhi.w	8001236 <__udivmoddi4+0x2d6>
 80010a2:	4602      	mov	r2, r0
 80010a4:	1b1b      	subs	r3, r3, r4
 80010a6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80010aa:	e7a5      	b.n	8000ff8 <__udivmoddi4+0x98>
 80010ac:	f1c1 0620 	rsb	r6, r1, #32
 80010b0:	408b      	lsls	r3, r1
 80010b2:	fa22 f706 	lsr.w	r7, r2, r6
 80010b6:	431f      	orrs	r7, r3
 80010b8:	fa0e f401 	lsl.w	r4, lr, r1
 80010bc:	fa20 f306 	lsr.w	r3, r0, r6
 80010c0:	fa2e fe06 	lsr.w	lr, lr, r6
 80010c4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80010c8:	4323      	orrs	r3, r4
 80010ca:	fa00 f801 	lsl.w	r8, r0, r1
 80010ce:	fa1f fc87 	uxth.w	ip, r7
 80010d2:	fbbe f0f9 	udiv	r0, lr, r9
 80010d6:	0c1c      	lsrs	r4, r3, #16
 80010d8:	fb09 ee10 	mls	lr, r9, r0, lr
 80010dc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80010e0:	fb00 fe0c 	mul.w	lr, r0, ip
 80010e4:	45a6      	cmp	lr, r4
 80010e6:	fa02 f201 	lsl.w	r2, r2, r1
 80010ea:	d909      	bls.n	8001100 <__udivmoddi4+0x1a0>
 80010ec:	193c      	adds	r4, r7, r4
 80010ee:	f100 3aff 	add.w	sl, r0, #4294967295
 80010f2:	f080 809c 	bcs.w	800122e <__udivmoddi4+0x2ce>
 80010f6:	45a6      	cmp	lr, r4
 80010f8:	f240 8099 	bls.w	800122e <__udivmoddi4+0x2ce>
 80010fc:	3802      	subs	r0, #2
 80010fe:	443c      	add	r4, r7
 8001100:	eba4 040e 	sub.w	r4, r4, lr
 8001104:	fa1f fe83 	uxth.w	lr, r3
 8001108:	fbb4 f3f9 	udiv	r3, r4, r9
 800110c:	fb09 4413 	mls	r4, r9, r3, r4
 8001110:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8001114:	fb03 fc0c 	mul.w	ip, r3, ip
 8001118:	45a4      	cmp	ip, r4
 800111a:	d908      	bls.n	800112e <__udivmoddi4+0x1ce>
 800111c:	193c      	adds	r4, r7, r4
 800111e:	f103 3eff 	add.w	lr, r3, #4294967295
 8001122:	f080 8082 	bcs.w	800122a <__udivmoddi4+0x2ca>
 8001126:	45a4      	cmp	ip, r4
 8001128:	d97f      	bls.n	800122a <__udivmoddi4+0x2ca>
 800112a:	3b02      	subs	r3, #2
 800112c:	443c      	add	r4, r7
 800112e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8001132:	eba4 040c 	sub.w	r4, r4, ip
 8001136:	fba0 ec02 	umull	lr, ip, r0, r2
 800113a:	4564      	cmp	r4, ip
 800113c:	4673      	mov	r3, lr
 800113e:	46e1      	mov	r9, ip
 8001140:	d362      	bcc.n	8001208 <__udivmoddi4+0x2a8>
 8001142:	d05f      	beq.n	8001204 <__udivmoddi4+0x2a4>
 8001144:	b15d      	cbz	r5, 800115e <__udivmoddi4+0x1fe>
 8001146:	ebb8 0203 	subs.w	r2, r8, r3
 800114a:	eb64 0409 	sbc.w	r4, r4, r9
 800114e:	fa04 f606 	lsl.w	r6, r4, r6
 8001152:	fa22 f301 	lsr.w	r3, r2, r1
 8001156:	431e      	orrs	r6, r3
 8001158:	40cc      	lsrs	r4, r1
 800115a:	e9c5 6400 	strd	r6, r4, [r5]
 800115e:	2100      	movs	r1, #0
 8001160:	e74f      	b.n	8001002 <__udivmoddi4+0xa2>
 8001162:	fbb1 fcf2 	udiv	ip, r1, r2
 8001166:	0c01      	lsrs	r1, r0, #16
 8001168:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800116c:	b280      	uxth	r0, r0
 800116e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8001172:	463b      	mov	r3, r7
 8001174:	4638      	mov	r0, r7
 8001176:	463c      	mov	r4, r7
 8001178:	46b8      	mov	r8, r7
 800117a:	46be      	mov	lr, r7
 800117c:	2620      	movs	r6, #32
 800117e:	fbb1 f1f7 	udiv	r1, r1, r7
 8001182:	eba2 0208 	sub.w	r2, r2, r8
 8001186:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800118a:	e766      	b.n	800105a <__udivmoddi4+0xfa>
 800118c:	4601      	mov	r1, r0
 800118e:	e718      	b.n	8000fc2 <__udivmoddi4+0x62>
 8001190:	4610      	mov	r0, r2
 8001192:	e72c      	b.n	8000fee <__udivmoddi4+0x8e>
 8001194:	f1c6 0220 	rsb	r2, r6, #32
 8001198:	fa2e f302 	lsr.w	r3, lr, r2
 800119c:	40b7      	lsls	r7, r6
 800119e:	40b1      	lsls	r1, r6
 80011a0:	fa20 f202 	lsr.w	r2, r0, r2
 80011a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80011a8:	430a      	orrs	r2, r1
 80011aa:	fbb3 f8fe 	udiv	r8, r3, lr
 80011ae:	b2bc      	uxth	r4, r7
 80011b0:	fb0e 3318 	mls	r3, lr, r8, r3
 80011b4:	0c11      	lsrs	r1, r2, #16
 80011b6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80011ba:	fb08 f904 	mul.w	r9, r8, r4
 80011be:	40b0      	lsls	r0, r6
 80011c0:	4589      	cmp	r9, r1
 80011c2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80011c6:	b280      	uxth	r0, r0
 80011c8:	d93e      	bls.n	8001248 <__udivmoddi4+0x2e8>
 80011ca:	1879      	adds	r1, r7, r1
 80011cc:	f108 3cff 	add.w	ip, r8, #4294967295
 80011d0:	d201      	bcs.n	80011d6 <__udivmoddi4+0x276>
 80011d2:	4589      	cmp	r9, r1
 80011d4:	d81f      	bhi.n	8001216 <__udivmoddi4+0x2b6>
 80011d6:	eba1 0109 	sub.w	r1, r1, r9
 80011da:	fbb1 f9fe 	udiv	r9, r1, lr
 80011de:	fb09 f804 	mul.w	r8, r9, r4
 80011e2:	fb0e 1119 	mls	r1, lr, r9, r1
 80011e6:	b292      	uxth	r2, r2
 80011e8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80011ec:	4542      	cmp	r2, r8
 80011ee:	d229      	bcs.n	8001244 <__udivmoddi4+0x2e4>
 80011f0:	18ba      	adds	r2, r7, r2
 80011f2:	f109 31ff 	add.w	r1, r9, #4294967295
 80011f6:	d2c4      	bcs.n	8001182 <__udivmoddi4+0x222>
 80011f8:	4542      	cmp	r2, r8
 80011fa:	d2c2      	bcs.n	8001182 <__udivmoddi4+0x222>
 80011fc:	f1a9 0102 	sub.w	r1, r9, #2
 8001200:	443a      	add	r2, r7
 8001202:	e7be      	b.n	8001182 <__udivmoddi4+0x222>
 8001204:	45f0      	cmp	r8, lr
 8001206:	d29d      	bcs.n	8001144 <__udivmoddi4+0x1e4>
 8001208:	ebbe 0302 	subs.w	r3, lr, r2
 800120c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001210:	3801      	subs	r0, #1
 8001212:	46e1      	mov	r9, ip
 8001214:	e796      	b.n	8001144 <__udivmoddi4+0x1e4>
 8001216:	eba7 0909 	sub.w	r9, r7, r9
 800121a:	4449      	add	r1, r9
 800121c:	f1a8 0c02 	sub.w	ip, r8, #2
 8001220:	fbb1 f9fe 	udiv	r9, r1, lr
 8001224:	fb09 f804 	mul.w	r8, r9, r4
 8001228:	e7db      	b.n	80011e2 <__udivmoddi4+0x282>
 800122a:	4673      	mov	r3, lr
 800122c:	e77f      	b.n	800112e <__udivmoddi4+0x1ce>
 800122e:	4650      	mov	r0, sl
 8001230:	e766      	b.n	8001100 <__udivmoddi4+0x1a0>
 8001232:	4608      	mov	r0, r1
 8001234:	e6fd      	b.n	8001032 <__udivmoddi4+0xd2>
 8001236:	443b      	add	r3, r7
 8001238:	3a02      	subs	r2, #2
 800123a:	e733      	b.n	80010a4 <__udivmoddi4+0x144>
 800123c:	f1ac 0c02 	sub.w	ip, ip, #2
 8001240:	443b      	add	r3, r7
 8001242:	e71c      	b.n	800107e <__udivmoddi4+0x11e>
 8001244:	4649      	mov	r1, r9
 8001246:	e79c      	b.n	8001182 <__udivmoddi4+0x222>
 8001248:	eba1 0109 	sub.w	r1, r1, r9
 800124c:	46c4      	mov	ip, r8
 800124e:	fbb1 f9fe 	udiv	r9, r1, lr
 8001252:	fb09 f804 	mul.w	r8, r9, r4
 8001256:	e7c4      	b.n	80011e2 <__udivmoddi4+0x282>

08001258 <__aeabi_idiv0>:
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop

0800125c <driverFunctionsInit>:
/** Функция приема указателя на функцию получения времени в микросекундах.
 *  Используется таймер микроконтроллера и его регистр счетчика - TIMx->CNT
 *  function(1...n) ОБЯЗАТЕЛЬНО должны быть определены в файле main.c
 */
void driverFunctionsInit(timeFunction_void_ptr function1, timeFunction_void_ptr function2, timeFunction_uint32_t_ptr function3, timeFunction_void_ptr function4)
{
 800125c:	b480      	push	{r7}
 800125e:	b085      	sub	sp, #20
 8001260:	af00      	add	r7, sp, #0
 8001262:	60f8      	str	r0, [r7, #12]
 8001264:	60b9      	str	r1, [r7, #8]
 8001266:	607a      	str	r2, [r7, #4]
 8001268:	603b      	str	r3, [r7, #0]
	startTimer = function1;
 800126a:	4a09      	ldr	r2, [pc, #36]	@ (8001290 <driverFunctionsInit+0x34>)
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	6013      	str	r3, [r2, #0]
	stopTimer = function2;
 8001270:	4a08      	ldr	r2, [pc, #32]	@ (8001294 <driverFunctionsInit+0x38>)
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	6013      	str	r3, [r2, #0]
	getDriverMicros = function3;
 8001276:	4a08      	ldr	r2, [pc, #32]	@ (8001298 <driverFunctionsInit+0x3c>)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6013      	str	r3, [r2, #0]
	resetDriverTimer = function4;
 800127c:	4a07      	ldr	r2, [pc, #28]	@ (800129c <driverFunctionsInit+0x40>)
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	6013      	str	r3, [r2, #0]
}
 8001282:	bf00      	nop
 8001284:	3714      	adds	r7, #20
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	20000afc 	.word	0x20000afc
 8001294:	20000b00 	.word	0x20000b00
 8001298:	20000b04 	.word	0x20000b04
 800129c:	20000b08 	.word	0x20000b08

080012a0 <driverInit>:

/** Функция инициализации драйвера шагового мотора
 */
void driverInit(DRIVER_StructDef* driver, STEPPER_StructDef* stepper, DRIVER_LIMIT_SWITCH_PINS_StructDef* pins, uint16_t stepsPerRev, movement_type_t type)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	60f8      	str	r0, [r7, #12]
 80012a8:	60b9      	str	r1, [r7, #8]
 80012aa:	607a      	str	r2, [r7, #4]
 80012ac:	807b      	strh	r3, [r7, #2]
	/* Структура шагового мотора */
	driver->stepper = stepper;
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	68ba      	ldr	r2, [r7, #8]
 80012b2:	601a      	str	r2, [r3, #0]

	/* Структура пинов концевых переключателей и датчика нуля драйвера шагового мотора */
	driver->driver_pins = pins;
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	687a      	ldr	r2, [r7, #4]
 80012b8:	605a      	str	r2, [r3, #4]

	/* ------------- Общие переменные движения ----------- */

	driver->tickUs = 0;
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	2200      	movs	r2, #0
 80012be:	609a      	str	r2, [r3, #8]
	driver->prevTime = 0;
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	2200      	movs	r2, #0
 80012c4:	60da      	str	r2, [r3, #12]
	driver->stepTime = 0;
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	2200      	movs	r2, #0
 80012ca:	611a      	str	r2, [r3, #16]

	driver->_axisType = type;
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	7e3a      	ldrb	r2, [r7, #24]
 80012d0:	751a      	strb	r2, [r3, #20]
	driver->_runMode = POSITION_MODE;
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	2200      	movs	r2, #0
 80012d6:	755a      	strb	r2, [r3, #21]
	driver->_autoPower = false;
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	2200      	movs	r2, #0
 80012dc:	759a      	strb	r2, [r3, #22]
	driver->_workState = DRIVER_INIT;
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	2201      	movs	r2, #1
 80012e2:	75da      	strb	r2, [r3, #23]

	driver->_stepsPerRev = stepsPerRev;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	887a      	ldrh	r2, [r7, #2]
 80012e8:	831a      	strh	r2, [r3, #24]

	if(type == LINEAR)
 80012ea:	7e3b      	ldrb	r3, [r7, #24]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d10f      	bne.n	8001310 <driverInit+0x70>
	{
		driver->_coefAST = COEF_AST;
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	2205      	movs	r2, #5
 80012f4:	841a      	strh	r2, [r3, #32]
		driver->_stepsPerMm = stepsPerRev / COEF_AST;
 80012f6:	887b      	ldrh	r3, [r7, #2]
 80012f8:	4a32      	ldr	r2, [pc, #200]	@ (80013c4 <driverInit+0x124>)
 80012fa:	fba2 2303 	umull	r2, r3, r2, r3
 80012fe:	089b      	lsrs	r3, r3, #2
 8001300:	b29a      	uxth	r2, r3
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	845a      	strh	r2, [r3, #34]	@ 0x22

		driver->_stepsPerDeg = 0;
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	f04f 0200 	mov.w	r2, #0
 800130c:	61da      	str	r2, [r3, #28]
 800130e:	e01a      	b.n	8001346 <driverInit+0xa6>
	}
	else if(type == ROTATIONAL)
 8001310:	7e3b      	ldrb	r3, [r7, #24]
 8001312:	2b01      	cmp	r3, #1
 8001314:	d117      	bne.n	8001346 <driverInit+0xa6>
	{
		driver->_stepsPerDeg = stepsPerRev / 360.0;
 8001316:	887b      	ldrh	r3, [r7, #2]
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff f913 	bl	8000544 <__aeabi_i2d>
 800131e:	f04f 0200 	mov.w	r2, #0
 8001322:	4b29      	ldr	r3, [pc, #164]	@ (80013c8 <driverInit+0x128>)
 8001324:	f7ff faa2 	bl	800086c <__aeabi_ddiv>
 8001328:	4602      	mov	r2, r0
 800132a:	460b      	mov	r3, r1
 800132c:	4610      	mov	r0, r2
 800132e:	4619      	mov	r1, r3
 8001330:	f7ff fc6a 	bl	8000c08 <__aeabi_d2f>
 8001334:	4602      	mov	r2, r0
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	61da      	str	r2, [r3, #28]

		driver->_coefAST = 0;
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	2200      	movs	r2, #0
 800133e:	841a      	strh	r2, [r3, #32]
		driver->_stepsPerMm = 0;
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	2200      	movs	r2, #0
 8001344:	845a      	strh	r2, [r3, #34]	@ 0x22
	}

	driver->_accel = 1000;
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800134c:	849a      	strh	r2, [r3, #36]	@ 0x24

	/* ------------ Переменные POSITION_MODE ------------- */

	driver->_positionPlannerTime = 0;
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	2200      	movs	r2, #0
 8001352:	629a      	str	r2, [r3, #40]	@ 0x28
	driver->_maxSpeed = 1000;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	4a1d      	ldr	r2, [pc, #116]	@ (80013cc <driverInit+0x12c>)
 8001358:	62da      	str	r2, [r3, #44]	@ 0x2c
	driver->_targetPosition = 0;
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	2200      	movs	r2, #0
 800135e:	631a      	str	r2, [r3, #48]	@ 0x30

	driver->_s1 = 0;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	2200      	movs	r2, #0
 8001364:	635a      	str	r2, [r3, #52]	@ 0x34
	driver->_s2 = 0;
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	2200      	movs	r2, #0
 800136a:	639a      	str	r2, [r3, #56]	@ 0x38
	driver->_s3 = 0;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	2200      	movs	r2, #0
 8001370:	63da      	str	r2, [r3, #60]	@ 0x3c
	driver->_k = 0;
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	2200      	movs	r2, #0
 8001376:	641a      	str	r2, [r3, #64]	@ 0x40

	/* ------------ Переменные VELOCITY_MODE ------------- */

	driver->_speedPlannerTime = 0;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	2200      	movs	r2, #0
 800137c:	645a      	str	r2, [r3, #68]	@ 0x44
	driver->_curSpeed = 0;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	f04f 0200 	mov.w	r2, #0
 8001384:	649a      	str	r2, [r3, #72]	@ 0x48
	driver->_targetSpeed = 0;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	f04f 0200 	mov.w	r2, #0
 800138c:	64da      	str	r2, [r3, #76]	@ 0x4c
	driver->_stopFlag = false;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	2200      	movs	r2, #0
 8001392:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

	/* ------ Переменные алгоритма плавного разгона ------ */

	driver->_c0 = 0;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	f04f 0200 	mov.w	r2, #0
 800139c:	655a      	str	r2, [r3, #84]	@ 0x54
	driver->_cn = 0;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	f04f 0200 	mov.w	r2, #0
 80013a4:	659a      	str	r2, [r3, #88]	@ 0x58
	driver->_n = 0;
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	2200      	movs	r2, #0
 80013aa:	65da      	str	r2, [r3, #92]	@ 0x5c
	driver->N = 0;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	2200      	movs	r2, #0
 80013b0:	661a      	str	r2, [r3, #96]	@ 0x60
	driver->_cmin = 1.0;
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80013b8:	665a      	str	r2, [r3, #100]	@ 0x64
}
 80013ba:	bf00      	nop
 80013bc:	3710      	adds	r7, #16
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	cccccccd 	.word	0xcccccccd
 80013c8:	40768000 	.word	0x40768000
 80013cc:	447a0000 	.word	0x447a0000

080013d0 <setDriverRunMode>:
/** Установка режима работы, _runMode:
 * 	POSITION_MODE - режим следования к позиции
 * 	VELOCITY_MODE - режим удержания заданной скорости
 */
void setDriverRunMode(DRIVER_StructDef* driver, run_mode_t mode)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	460b      	mov	r3, r1
 80013da:	70fb      	strb	r3, [r7, #3]
	driver->_runMode = mode;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	78fa      	ldrb	r2, [r7, #3]
 80013e0:	755a      	strb	r2, [r3, #21]
}
 80013e2:	bf00      	nop
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
	...

080013f0 <resetDriverTimers>:
}

/** Функция сброса всех таймеров
 */
void resetDriverTimers(DRIVER_StructDef* driver)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
	driver->_speedPlannerTime = driver->_positionPlannerTime = driver->prevTime = getDriverMicros();
 80013f8:	4b08      	ldr	r3, [pc, #32]	@ (800141c <resetDriverTimers+0x2c>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4798      	blx	r3
 80013fe:	4602      	mov	r2, r0
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	60da      	str	r2, [r3, #12]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	68da      	ldr	r2, [r3, #12]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	629a      	str	r2, [r3, #40]	@ 0x28
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	645a      	str	r2, [r3, #68]	@ 0x44
}
 8001414:	bf00      	nop
 8001416:	3708      	adds	r7, #8
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	20000b04 	.word	0x20000b04

08001420 <enableDriver>:
}

/** Включить мотор (пин EN)
 */
void enableDriver(DRIVER_StructDef* driver)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
	driver->_workState = DRIVER_READY;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2202      	movs	r2, #2
 800142c:	75da      	strb	r2, [r3, #23]
	resetDriverTimers(driver);
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	f7ff ffde 	bl	80013f0 <resetDriverTimers>
	enableStepper(driver->stepper);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4618      	mov	r0, r3
 800143a:	f004 fca9 	bl	8005d90 <enableStepper>
}
 800143e:	bf00      	nop
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}

08001446 <disableDriver>:

/** Выключить мотор (пин EN)
 */
void disableDriver(DRIVER_StructDef* driver)
{
 8001446:	b580      	push	{r7, lr}
 8001448:	b082      	sub	sp, #8
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
	driver->_workState = DRIVER_INIT;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2201      	movs	r2, #1
 8001452:	75da      	strb	r2, [r3, #23]
	disableStepper(driver->stepper);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4618      	mov	r0, r3
 800145a:	f004 fcbf 	bl	8005ddc <disableStepper>
}
 800145e:	bf00      	nop
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
	...

08001468 <tickDriver>:
/** Здесь происходит движение мотора, функция должна вызываться как можно чаще,
 * 	имеется встроенный таймер на тиках микропроцессора
 * 	Возвращает DRIVER_RUN, если мотор запущен в режиме POSITION_MODE или VELOCITY_MODE
 */
driver_state_t tickDriver(DRIVER_StructDef* driver)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
	if (driver->_workState == DRIVER_RUN)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	7ddb      	ldrb	r3, [r3, #23]
 8001474:	b25b      	sxtb	r3, r3
 8001476:	2b03      	cmp	r3, #3
 8001478:	d148      	bne.n	800150c <tickDriver+0xa4>
	{
		driver->tickUs = getDriverMicros();
 800147a:	4b28      	ldr	r3, [pc, #160]	@ (800151c <tickDriver+0xb4>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4798      	blx	r3
 8001480:	4602      	mov	r2, r0
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	609a      	str	r2, [r3, #8]

		/* POSITION_MODE */
		if (driver->_runMode == POSITION_MODE && driver->_accel != 0) plannerPositionMode(driver);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	7d5b      	ldrb	r3, [r3, #21]
 800148a:	b2db      	uxtb	r3, r3
 800148c:	2b00      	cmp	r3, #0
 800148e:	d107      	bne.n	80014a0 <tickDriver+0x38>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001494:	b29b      	uxth	r3, r3
 8001496:	2b00      	cmp	r3, #0
 8001498:	d002      	beq.n	80014a0 <tickDriver+0x38>
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f000 f860 	bl	8001560 <plannerPositionMode>

		/* VELOCITY_MODE */
		if (driver->_runMode == VELOCITY_MODE && driver->_accel != 0) plannerVelocityMode(driver);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	7d5b      	ldrb	r3, [r3, #21]
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d107      	bne.n	80014ba <tickDriver+0x52>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80014ae:	b29b      	uxth	r3, r3
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d002      	beq.n	80014ba <tickDriver+0x52>
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f000 fbff 	bl	8001cb8 <plannerVelocityMode>

		/* Основной таймер степпера */
		if (driver->stepTime != 0 && driver->tickUs - driver->prevTime >= driver->stepTime)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	691b      	ldr	r3, [r3, #16]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d024      	beq.n	800150c <tickDriver+0xa4>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	689a      	ldr	r2, [r3, #8]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	68db      	ldr	r3, [r3, #12]
 80014ca:	1ad2      	subs	r2, r2, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	691b      	ldr	r3, [r3, #16]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d31b      	bcc.n	800150c <tickDriver+0xa4>
		{
			driver->prevTime = driver->tickUs;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	689a      	ldr	r2, [r3, #8]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	60da      	str	r2, [r3, #12]

			/* Проверка достижения целевой координаты, проверка остановки для быстрого планировщика, а также работы без ускорения */
			if (driver->_runMode == POSITION_MODE && driver->_targetPosition == driver->stepper->pos)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	7d5b      	ldrb	r3, [r3, #21]
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d10d      	bne.n	8001502 <tickDriver+0x9a>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	699b      	ldr	r3, [r3, #24]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d106      	bne.n	8001502 <tickDriver+0x9a>
            {
				brakeDriver(driver);
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	f000 f813 	bl	8001520 <brakeDriver>
				return driver->_workState;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	7ddb      	ldrb	r3, [r3, #23]
 80014fe:	b25b      	sxtb	r3, r3
 8001500:	e007      	b.n	8001512 <tickDriver+0xaa>
            }

			/* Совершаем шаг мотором */
			step(driver->stepper);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4618      	mov	r0, r3
 8001508:	f004 fbca 	bl	8005ca0 <step>
		}
	}

	return driver->_workState;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	7ddb      	ldrb	r3, [r3, #23]
 8001510:	b25b      	sxtb	r3, r3
}
 8001512:	4618      	mov	r0, r3
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	20000b04 	.word	0x20000b04

08001520 <brakeDriver>:
}

/* Резкая остановка без возможности продолжения следования по траектории до остановки + выключение мотора
 */
void brakeDriver(DRIVER_StructDef* driver)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
	driver->_workState = DRIVER_READY;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2202      	movs	r2, #2
 800152c:	75da      	strb	r2, [r3, #23]
	driver->stepTime = 0;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2200      	movs	r2, #0
 8001532:	611a      	str	r2, [r3, #16]
	driver->_curSpeed = 0;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f04f 0200 	mov.w	r2, #0
 800153a:	649a      	str	r2, [r3, #72]	@ 0x48
	driver->_n = 0;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2200      	movs	r2, #0
 8001540:	65da      	str	r2, [r3, #92]	@ 0x5c

	if(driver->_autoPower == true) disableDriver(driver);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	7d9b      	ldrb	r3, [r3, #22]
 8001546:	b2db      	uxtb	r3, r3
 8001548:	2b00      	cmp	r3, #0
 800154a:	d002      	beq.n	8001552 <brakeDriver+0x32>
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	f7ff ff7a 	bl	8001446 <disableDriver>
}
 8001552:	bf00      	nop
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	0000      	movs	r0, r0
 800155c:	0000      	movs	r0, r0
	...

08001560 <plannerPositionMode>:
/* -------------------------------------- Функции для работы режима POSITION_MODE -------------------------------------- */

/**	Планировщик скорости для POSITION_MODE с разгоном и торможением
 */
void plannerPositionMode(DRIVER_StructDef* driver)
{
 8001560:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001564:	b084      	sub	sp, #16
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
	int8_t dir = driver->stepper->dir;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	7f1b      	ldrb	r3, [r3, #28]
 8001570:	73fb      	strb	r3, [r7, #15]
	int8_t err = _sign((int32_t)(driver->_s1 - driver->_k));
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	2b00      	cmp	r3, #0
 800157e:	db01      	blt.n	8001584 <plannerPositionMode+0x24>
 8001580:	2301      	movs	r3, #1
 8001582:	e001      	b.n	8001588 <plannerPositionMode+0x28>
 8001584:	f04f 33ff 	mov.w	r3, #4294967295
 8001588:	73bb      	strb	r3, [r7, #14]

	if (driver->tickUs - driver->_positionPlannerTime >= driver->stepTime)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	689a      	ldr	r2, [r3, #8]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001592:	1ad2      	subs	r2, r2, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	691b      	ldr	r3, [r3, #16]
 8001598:	429a      	cmp	r2, r3
 800159a:	f0c0 811d 	bcc.w	80017d8 <plannerPositionMode+0x278>
	{
		/* Обновление переменной времени планировщика */
		driver->_positionPlannerTime = driver->tickUs;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	689a      	ldr	r2, [r3, #8]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	629a      	str	r2, [r3, #40]	@ 0x28

		/* Основная логика разгона и торможения */
		if(driver->_k < driver->_s1 || driver->_k > driver->_s2)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015ae:	429a      	cmp	r2, r3
 80015b0:	d306      	bcc.n	80015c0 <plannerPositionMode+0x60>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015ba:	429a      	cmp	r2, r3
 80015bc:	f240 80a1 	bls.w	8001702 <plannerPositionMode+0x1a2>
		{
			if(driver->_n == 0) driver->_cn = driver->_c0;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d104      	bne.n	80015d2 <plannerPositionMode+0x72>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	659a      	str	r2, [r3, #88]	@ 0x58
 80015d0:	e064      	b.n	800169c <plannerPositionMode+0x13c>
			else if(driver->_n == 1) driver->_cn = 0.4056 * driver->_c0;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d113      	bne.n	8001602 <plannerPositionMode+0xa2>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015de:	4618      	mov	r0, r3
 80015e0:	f7fe ffc2 	bl	8000568 <__aeabi_f2d>
 80015e4:	a384      	add	r3, pc, #528	@ (adr r3, 80017f8 <plannerPositionMode+0x298>)
 80015e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ea:	f7ff f815 	bl	8000618 <__aeabi_dmul>
 80015ee:	4602      	mov	r2, r0
 80015f0:	460b      	mov	r3, r1
 80015f2:	4610      	mov	r0, r2
 80015f4:	4619      	mov	r1, r3
 80015f6:	f7ff fb07 	bl	8000c08 <__aeabi_d2f>
 80015fa:	4602      	mov	r2, r0
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	659a      	str	r2, [r3, #88]	@ 0x58
 8001600:	e04c      	b.n	800169c <plannerPositionMode+0x13c>
			else if(driver->_n > 1)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001606:	2b01      	cmp	r3, #1
 8001608:	dd48      	ble.n	800169c <plannerPositionMode+0x13c>
			{
				driver->_cn = driver->_cn * (1 - err * 2.0 / (4.0 * driver->_n + err));
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800160e:	4618      	mov	r0, r3
 8001610:	f7fe ffaa 	bl	8000568 <__aeabi_f2d>
 8001614:	4604      	mov	r4, r0
 8001616:	460d      	mov	r5, r1
 8001618:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800161c:	4618      	mov	r0, r3
 800161e:	f7fe ff91 	bl	8000544 <__aeabi_i2d>
 8001622:	4602      	mov	r2, r0
 8001624:	460b      	mov	r3, r1
 8001626:	f7fe fe41 	bl	80002ac <__adddf3>
 800162a:	4602      	mov	r2, r0
 800162c:	460b      	mov	r3, r1
 800162e:	4690      	mov	r8, r2
 8001630:	4699      	mov	r9, r3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001636:	4618      	mov	r0, r3
 8001638:	f7fe ff84 	bl	8000544 <__aeabi_i2d>
 800163c:	f04f 0200 	mov.w	r2, #0
 8001640:	4b6b      	ldr	r3, [pc, #428]	@ (80017f0 <plannerPositionMode+0x290>)
 8001642:	f7fe ffe9 	bl	8000618 <__aeabi_dmul>
 8001646:	4602      	mov	r2, r0
 8001648:	460b      	mov	r3, r1
 800164a:	4692      	mov	sl, r2
 800164c:	469b      	mov	fp, r3
 800164e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001652:	4618      	mov	r0, r3
 8001654:	f7fe ff76 	bl	8000544 <__aeabi_i2d>
 8001658:	4602      	mov	r2, r0
 800165a:	460b      	mov	r3, r1
 800165c:	4650      	mov	r0, sl
 800165e:	4659      	mov	r1, fp
 8001660:	f7fe fe24 	bl	80002ac <__adddf3>
 8001664:	4602      	mov	r2, r0
 8001666:	460b      	mov	r3, r1
 8001668:	4640      	mov	r0, r8
 800166a:	4649      	mov	r1, r9
 800166c:	f7ff f8fe 	bl	800086c <__aeabi_ddiv>
 8001670:	4602      	mov	r2, r0
 8001672:	460b      	mov	r3, r1
 8001674:	f04f 0000 	mov.w	r0, #0
 8001678:	495e      	ldr	r1, [pc, #376]	@ (80017f4 <plannerPositionMode+0x294>)
 800167a:	f7fe fe15 	bl	80002a8 <__aeabi_dsub>
 800167e:	4602      	mov	r2, r0
 8001680:	460b      	mov	r3, r1
 8001682:	4620      	mov	r0, r4
 8001684:	4629      	mov	r1, r5
 8001686:	f7fe ffc7 	bl	8000618 <__aeabi_dmul>
 800168a:	4602      	mov	r2, r0
 800168c:	460b      	mov	r3, r1
 800168e:	4610      	mov	r0, r2
 8001690:	4619      	mov	r1, r3
 8001692:	f7ff fab9 	bl	8000c08 <__aeabi_d2f>
 8001696:	4602      	mov	r2, r0
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	659a      	str	r2, [r3, #88]	@ 0x58
			}

			driver->stepTime = (uint32_t)(driver->_cn) - STEP_TIME;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 80016a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016a6:	ee17 3a90 	vmov	r3, s15
 80016aa:	1f5a      	subs	r2, r3, #5
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	611a      	str	r2, [r3, #16]
			driver->_curSpeed = dir * 1000000.0 / driver->_cn;
 80016b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7fe ff45 	bl	8000544 <__aeabi_i2d>
 80016ba:	a34b      	add	r3, pc, #300	@ (adr r3, 80017e8 <plannerPositionMode+0x288>)
 80016bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c0:	f7fe ffaa 	bl	8000618 <__aeabi_dmul>
 80016c4:	4602      	mov	r2, r0
 80016c6:	460b      	mov	r3, r1
 80016c8:	4614      	mov	r4, r2
 80016ca:	461d      	mov	r5, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7fe ff49 	bl	8000568 <__aeabi_f2d>
 80016d6:	4602      	mov	r2, r0
 80016d8:	460b      	mov	r3, r1
 80016da:	4620      	mov	r0, r4
 80016dc:	4629      	mov	r1, r5
 80016de:	f7ff f8c5 	bl	800086c <__aeabi_ddiv>
 80016e2:	4602      	mov	r2, r0
 80016e4:	460b      	mov	r3, r1
 80016e6:	4610      	mov	r0, r2
 80016e8:	4619      	mov	r1, r3
 80016ea:	f7ff fa8d 	bl	8000c08 <__aeabi_d2f>
 80016ee:	4602      	mov	r2, r0
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	649a      	str	r2, [r3, #72]	@ 0x48

			driver->_n += err;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80016f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80016fc:	441a      	add	r2, r3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	65da      	str	r2, [r3, #92]	@ 0x5c
		}

		/* Условие достижения максимальной скорости */
		if(driver->_k == driver->_s1 && driver->_s1 != driver->_s2)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800170a:	429a      	cmp	r2, r3
 800170c:	d128      	bne.n	8001760 <plannerPositionMode+0x200>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001716:	429a      	cmp	r2, r3
 8001718:	d022      	beq.n	8001760 <plannerPositionMode+0x200>
		{
			driver->_curSpeed = dir * driver->_maxSpeed;
 800171a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800171e:	ee07 3a90 	vmov	s15, r3
 8001722:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800172c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
			driver->stepTime = 1000000.0 / driver->_maxSpeed;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800173a:	4618      	mov	r0, r3
 800173c:	f7fe ff14 	bl	8000568 <__aeabi_f2d>
 8001740:	4602      	mov	r2, r0
 8001742:	460b      	mov	r3, r1
 8001744:	a128      	add	r1, pc, #160	@ (adr r1, 80017e8 <plannerPositionMode+0x288>)
 8001746:	e9d1 0100 	ldrd	r0, r1, [r1]
 800174a:	f7ff f88f 	bl	800086c <__aeabi_ddiv>
 800174e:	4602      	mov	r2, r0
 8001750:	460b      	mov	r3, r1
 8001752:	4610      	mov	r0, r2
 8001754:	4619      	mov	r1, r3
 8001756:	f7ff fa37 	bl	8000bc8 <__aeabi_d2uiz>
 800175a:	4602      	mov	r2, r0
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	611a      	str	r2, [r3, #16]
		}

		/* Особый случай первого шага при торможении */
		if(driver->_k == driver->_s2)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001768:	429a      	cmp	r2, r3
 800176a:	d130      	bne.n	80017ce <plannerPositionMode+0x26e>
		{
			driver->stepTime = (uint32_t)(driver->_cn) - STEP_TIME;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8001772:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001776:	ee17 3a90 	vmov	r3, s15
 800177a:	1f5a      	subs	r2, r3, #5
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	611a      	str	r2, [r3, #16]
			driver->_curSpeed = dir * 1000000.0 / driver->_cn;
 8001780:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001784:	4618      	mov	r0, r3
 8001786:	f7fe fedd 	bl	8000544 <__aeabi_i2d>
 800178a:	a317      	add	r3, pc, #92	@ (adr r3, 80017e8 <plannerPositionMode+0x288>)
 800178c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001790:	f7fe ff42 	bl	8000618 <__aeabi_dmul>
 8001794:	4602      	mov	r2, r0
 8001796:	460b      	mov	r3, r1
 8001798:	4614      	mov	r4, r2
 800179a:	461d      	mov	r5, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7fe fee1 	bl	8000568 <__aeabi_f2d>
 80017a6:	4602      	mov	r2, r0
 80017a8:	460b      	mov	r3, r1
 80017aa:	4620      	mov	r0, r4
 80017ac:	4629      	mov	r1, r5
 80017ae:	f7ff f85d 	bl	800086c <__aeabi_ddiv>
 80017b2:	4602      	mov	r2, r0
 80017b4:	460b      	mov	r3, r1
 80017b6:	4610      	mov	r0, r2
 80017b8:	4619      	mov	r1, r3
 80017ba:	f7ff fa25 	bl	8000c08 <__aeabi_d2f>
 80017be:	4602      	mov	r2, r0
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	649a      	str	r2, [r3, #72]	@ 0x48

			driver->_n --;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017c8:	1e5a      	subs	r2, r3, #1
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	65da      	str	r2, [r3, #92]	@ 0x5c
		}

		driver->_k ++;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017d2:	1c5a      	adds	r2, r3, #1
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	641a      	str	r2, [r3, #64]	@ 0x40
	}
}
 80017d8:	bf00      	nop
 80017da:	3710      	adds	r7, #16
 80017dc:	46bd      	mov	sp, r7
 80017de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017e2:	bf00      	nop
 80017e4:	f3af 8000 	nop.w
 80017e8:	00000000 	.word	0x00000000
 80017ec:	412e8480 	.word	0x412e8480
 80017f0:	40100000 	.word	0x40100000
 80017f4:	3ff00000 	.word	0x3ff00000
 80017f8:	b3d07c85 	.word	0xb3d07c85
 80017fc:	3fd9f559 	.word	0x3fd9f559

08001800 <setDriverTargetPos>:
/** Установка целевой позиции для режима POSITION_MODE (шаги)
 * 	и движение к указанной цели с максимальной скоростью
 * 	не поддерживает горячую смену целевой позиции
 */
param_change_t setDriverTargetPos(DRIVER_StructDef* driver, int32_t target_pos)
{
 8001800:	b5b0      	push	{r4, r5, r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	6039      	str	r1, [r7, #0]
	uint32_t steps = abs(target_pos - driver->stepper->pos);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	699b      	ldr	r3, [r3, #24]
 8001810:	683a      	ldr	r2, [r7, #0]
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	2b00      	cmp	r3, #0
 8001816:	bfb8      	it	lt
 8001818:	425b      	neglt	r3, r3
 800181a:	60fb      	str	r3, [r7, #12]

	/* Если драйвер в режиме POSITION_MODE */
	if(driver->_runMode != POSITION_MODE) return PARAM_CHANGE_ERR;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	7d5b      	ldrb	r3, [r3, #21]
 8001820:	b2db      	uxtb	r3, r3
 8001822:	2b00      	cmp	r3, #0
 8001824:	d002      	beq.n	800182c <setDriverTargetPos+0x2c>
 8001826:	f04f 33ff 	mov.w	r3, #4294967295
 800182a:	e0ad      	b.n	8001988 <setDriverTargetPos+0x188>

	/* Если мотор в движении */
	if(driver->_workState == DRIVER_RUN) return PARAM_CHANGE_ERR;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	7ddb      	ldrb	r3, [r3, #23]
 8001830:	b25b      	sxtb	r3, r3
 8001832:	2b03      	cmp	r3, #3
 8001834:	d102      	bne.n	800183c <setDriverTargetPos+0x3c>
 8001836:	f04f 33ff 	mov.w	r3, #4294967295
 800183a:	e0a5      	b.n	8001988 <setDriverTargetPos+0x188>

	driver->_targetPosition = target_pos;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	683a      	ldr	r2, [r7, #0]
 8001840:	631a      	str	r2, [r3, #48]	@ 0x30

	if(driver->_targetPosition != driver->stepper->pos)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	699b      	ldr	r3, [r3, #24]
 800184c:	429a      	cmp	r2, r3
 800184e:	f000 809a 	beq.w	8001986 <setDriverTargetPos+0x186>
	{
		driver->stepper->dir = (driver->_targetPosition > driver->stepper->pos) ? 1 : -1;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	699b      	ldr	r3, [r3, #24]
 800185c:	429a      	cmp	r2, r3
 800185e:	dd01      	ble.n	8001864 <setDriverTargetPos+0x64>
 8001860:	2201      	movs	r2, #1
 8001862:	e001      	b.n	8001868 <setDriverTargetPos+0x68>
 8001864:	f04f 32ff 	mov.w	r2, #4294967295
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	771a      	strb	r2, [r3, #28]

		if (driver->_accel == 0 || driver->_maxSpeed < MIN_SPEED_POS_MODE)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001872:	b29b      	uxth	r3, r3
 8001874:	2b00      	cmp	r3, #0
 8001876:	d009      	beq.n	800188c <setDriverTargetPos+0x8c>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800187e:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8001882:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800188a:	d515      	bpl.n	80018b8 <setDriverTargetPos+0xb8>
		{
			driver->stepTime = 1000000.0 / driver->_maxSpeed;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001890:	4618      	mov	r0, r3
 8001892:	f7fe fe69 	bl	8000568 <__aeabi_f2d>
 8001896:	4602      	mov	r2, r0
 8001898:	460b      	mov	r3, r1
 800189a:	a13d      	add	r1, pc, #244	@ (adr r1, 8001990 <setDriverTargetPos+0x190>)
 800189c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80018a0:	f7fe ffe4 	bl	800086c <__aeabi_ddiv>
 80018a4:	4602      	mov	r2, r0
 80018a6:	460b      	mov	r3, r1
 80018a8:	4610      	mov	r0, r2
 80018aa:	4619      	mov	r1, r3
 80018ac:	f7ff f98c 	bl	8000bc8 <__aeabi_d2uiz>
 80018b0:	4602      	mov	r2, r0
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	611a      	str	r2, [r3, #16]
 80018b6:	e063      	b.n	8001980 <setDriverTargetPos+0x180>
		}
		else
		{
			driver->N = driver->_maxSpeed * driver->_maxSpeed / (2.0 * driver->_accel);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80018c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018c8:	ee17 0a90 	vmov	r0, s15
 80018cc:	f7fe fe4c 	bl	8000568 <__aeabi_f2d>
 80018d0:	4604      	mov	r4, r0
 80018d2:	460d      	mov	r5, r1
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80018d8:	b29b      	uxth	r3, r3
 80018da:	4618      	mov	r0, r3
 80018dc:	f7fe fe32 	bl	8000544 <__aeabi_i2d>
 80018e0:	4602      	mov	r2, r0
 80018e2:	460b      	mov	r3, r1
 80018e4:	f7fe fce2 	bl	80002ac <__adddf3>
 80018e8:	4602      	mov	r2, r0
 80018ea:	460b      	mov	r3, r1
 80018ec:	4620      	mov	r0, r4
 80018ee:	4629      	mov	r1, r5
 80018f0:	f7fe ffbc 	bl	800086c <__aeabi_ddiv>
 80018f4:	4602      	mov	r2, r0
 80018f6:	460b      	mov	r3, r1
 80018f8:	4610      	mov	r0, r2
 80018fa:	4619      	mov	r1, r3
 80018fc:	f7ff f964 	bl	8000bc8 <__aeabi_d2uiz>
 8001900:	4602      	mov	r2, r0
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	661a      	str	r2, [r3, #96]	@ 0x60

			if(steps > 2 * driver->N)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	68fa      	ldr	r2, [r7, #12]
 800190e:	429a      	cmp	r2, r3
 8001910:	d915      	bls.n	800193e <setDriverTargetPos+0x13e>
			{
				driver->_s1 = driver->N;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	635a      	str	r2, [r3, #52]	@ 0x34
				driver->_s2 = driver->_s1 + steps - 2 * driver->N;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	441a      	add	r2, r3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001926:	005b      	lsls	r3, r3, #1
 8001928:	1ad2      	subs	r2, r2, r3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	639a      	str	r2, [r3, #56]	@ 0x38
				driver->_s3 = driver->_s2 + driver->N;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001936:	441a      	add	r2, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800193c:	e01d      	b.n	800197a <setDriverTargetPos+0x17a>
			}
			else
			{
				driver->_s1 = steps / 2;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	085a      	lsrs	r2, r3, #1
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	635a      	str	r2, [r3, #52]	@ 0x34
				driver->_s2 = driver->_s1 + (steps % 2 == 0) ? 0 : 1;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800194a:	68fa      	ldr	r2, [r7, #12]
 800194c:	f002 0201 	and.w	r2, r2, #1
 8001950:	2a00      	cmp	r2, #0
 8001952:	bf0c      	ite	eq
 8001954:	2201      	moveq	r2, #1
 8001956:	2200      	movne	r2, #0
 8001958:	b2d2      	uxtb	r2, r2
 800195a:	4413      	add	r3, r2
 800195c:	2b00      	cmp	r3, #0
 800195e:	bf0c      	ite	eq
 8001960:	2301      	moveq	r3, #1
 8001962:	2300      	movne	r3, #0
 8001964:	b2db      	uxtb	r3, r3
 8001966:	461a      	mov	r2, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	639a      	str	r2, [r3, #56]	@ 0x38
				driver->_s3 = driver->_s2 + driver->_s1;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001974:	441a      	add	r2, r3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	63da      	str	r2, [r3, #60]	@ 0x3c
			}

			driver->_k = 0;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2200      	movs	r2, #0
 800197e:	641a      	str	r2, [r3, #64]	@ 0x40
		}

		driver->_workState = DRIVER_RUN;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2203      	movs	r2, #3
 8001984:	75da      	strb	r2, [r3, #23]
	}

	return PARAM_CHANGE_OK;
 8001986:	2300      	movs	r3, #0
}
 8001988:	4618      	mov	r0, r3
 800198a:	3710      	adds	r7, #16
 800198c:	46bd      	mov	sp, r7
 800198e:	bdb0      	pop	{r4, r5, r7, pc}
 8001990:	00000000 	.word	0x00000000
 8001994:	412e8480 	.word	0x412e8480

08001998 <setDriverTargetPosDeg>:

/** Установка целевой позиции (градусы)
 */
param_change_t setDriverTargetPosDeg(DRIVER_StructDef* driver, float target_pos_deg)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	ed87 0a00 	vstr	s0, [r7]
	if(driver->_axisType == ROTATIONAL)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	7d1b      	ldrb	r3, [r3, #20]
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d10f      	bne.n	80019ce <setDriverTargetPosDeg+0x36>
	{
		return setDriverTargetPos(driver, target_pos_deg * driver->_stepsPerDeg);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	ed93 7a07 	vldr	s14, [r3, #28]
 80019b4:	edd7 7a00 	vldr	s15, [r7]
 80019b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019c0:	ee17 1a90 	vmov	r1, s15
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f7ff ff1b 	bl	8001800 <setDriverTargetPos>
 80019ca:	4603      	mov	r3, r0
 80019cc:	e001      	b.n	80019d2 <setDriverTargetPosDeg+0x3a>
	}
	else return PARAM_CHANGE_ERR;
 80019ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}

080019da <setDriverTargetPosMm>:

/** Установка целевой позиции (мм)
 */
param_change_t setDriverTargetPosMm(DRIVER_StructDef* driver, float target_pos_mm)
{
 80019da:	b580      	push	{r7, lr}
 80019dc:	b082      	sub	sp, #8
 80019de:	af00      	add	r7, sp, #0
 80019e0:	6078      	str	r0, [r7, #4]
 80019e2:	ed87 0a00 	vstr	s0, [r7]
	if(driver->_axisType == LINEAR)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	7d1b      	ldrb	r3, [r3, #20]
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d112      	bne.n	8001a16 <setDriverTargetPosMm+0x3c>
	{
		return setDriverTargetPos(driver, target_pos_mm * driver->_stepsPerMm);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80019f4:	ee07 3a90 	vmov	s15, r3
 80019f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019fc:	edd7 7a00 	vldr	s15, [r7]
 8001a00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a08:	ee17 1a90 	vmov	r1, s15
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f7ff fef7 	bl	8001800 <setDriverTargetPos>
 8001a12:	4603      	mov	r3, r0
 8001a14:	e001      	b.n	8001a1a <setDriverTargetPosMm+0x40>
	}
	else return PARAM_CHANGE_ERR;
 8001a16:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	0000      	movs	r0, r0
 8001a24:	0000      	movs	r0, r0
	...

08001a28 <setDriverMaxSpeed>:

/** Установка максимальной по модулю скорости для режима POSITION_MODE (шаги/с)
 *  по умолчанию 300 (шагов/c)
 */
param_change_t setDriverMaxSpeed(DRIVER_StructDef* driver, float speed)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	ed87 0a00 	vstr	s0, [r7]
	if(driver->_workState == DRIVER_RUN) return PARAM_CHANGE_ERR;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	7ddb      	ldrb	r3, [r3, #23]
 8001a38:	b25b      	sxtb	r3, r3
 8001a3a:	2b03      	cmp	r3, #3
 8001a3c:	d102      	bne.n	8001a44 <setDriverMaxSpeed+0x1c>
 8001a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a42:	e019      	b.n	8001a78 <setDriverMaxSpeed+0x50>

	/* Ограничения минимальной скорости - 1 шаг/час */
	driver->_maxSpeed = fmax(fabs(speed), MIN_STEP_SPEED);
 8001a44:	edd7 7a00 	vldr	s15, [r7]
 8001a48:	eef0 7ae7 	vabs.f32	s15, s15
 8001a4c:	ee17 0a90 	vmov	r0, s15
 8001a50:	f7fe fd8a 	bl	8000568 <__aeabi_f2d>
 8001a54:	4602      	mov	r2, r0
 8001a56:	460b      	mov	r3, r1
 8001a58:	ed9f 1b09 	vldr	d1, [pc, #36]	@ 8001a80 <setDriverMaxSpeed+0x58>
 8001a5c:	ec43 2b10 	vmov	d0, r2, r3
 8001a60:	f018 f8ba 	bl	8019bd8 <fmax>
 8001a64:	ec53 2b10 	vmov	r2, r3, d0
 8001a68:	4610      	mov	r0, r2
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	f7ff f8cc 	bl	8000c08 <__aeabi_d2f>
 8001a70:	4602      	mov	r2, r0
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	62da      	str	r2, [r3, #44]	@ 0x2c

	return PARAM_CHANGE_OK;
 8001a76:	2300      	movs	r3, #0
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3708      	adds	r7, #8
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	789abcdf 	.word	0x789abcdf
 8001a84:	3f323456 	.word	0x3f323456

08001a88 <setDriverMaxSpeedDeg>:

/** Установка максимальной по модулю скорости для режима POSITION_MODE (градусы/c)
 */
param_change_t setDriverMaxSpeedDeg(DRIVER_StructDef* driver, float speed)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	ed87 0a00 	vstr	s0, [r7]
	if(driver->_axisType == ROTATIONAL)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	7d1b      	ldrb	r3, [r3, #20]
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d10f      	bne.n	8001abe <setDriverMaxSpeedDeg+0x36>
	{
		return setDriverMaxSpeed(driver, fabs(speed) * driver->_stepsPerDeg);
 8001a9e:	edd7 7a00 	vldr	s15, [r7]
 8001aa2:	eeb0 7ae7 	vabs.f32	s14, s15
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	edd3 7a07 	vldr	s15, [r3, #28]
 8001aac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ab0:	eeb0 0a67 	vmov.f32	s0, s15
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f7ff ffb7 	bl	8001a28 <setDriverMaxSpeed>
 8001aba:	4603      	mov	r3, r0
 8001abc:	e001      	b.n	8001ac2 <setDriverMaxSpeedDeg+0x3a>
	}
	else return PARAM_CHANGE_ERR;
 8001abe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <setDriverMaxSpeedMm>:

/** Установка максимальной по модулю скорости для режима POSITION_MODE (мм/c)
 */
param_change_t setDriverMaxSpeedMm(DRIVER_StructDef* driver, float speed)
{
 8001aca:	b5b0      	push	{r4, r5, r7, lr}
 8001acc:	b082      	sub	sp, #8
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
 8001ad2:	ed87 0a00 	vstr	s0, [r7]
	if(driver->_axisType == LINEAR)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	7d1b      	ldrb	r3, [r3, #20]
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d122      	bne.n	8001b26 <setDriverMaxSpeedMm+0x5c>
	{
		return setDriverMaxSpeed(driver, fabs(speed) * driver->_stepsPerMm);
 8001ae0:	edd7 7a00 	vldr	s15, [r7]
 8001ae4:	eef0 7ae7 	vabs.f32	s15, s15
 8001ae8:	ee17 0a90 	vmov	r0, s15
 8001aec:	f7fe fd3c 	bl	8000568 <__aeabi_f2d>
 8001af0:	4604      	mov	r4, r0
 8001af2:	460d      	mov	r5, r1
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7fe fd23 	bl	8000544 <__aeabi_i2d>
 8001afe:	4602      	mov	r2, r0
 8001b00:	460b      	mov	r3, r1
 8001b02:	4620      	mov	r0, r4
 8001b04:	4629      	mov	r1, r5
 8001b06:	f7fe fd87 	bl	8000618 <__aeabi_dmul>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	4610      	mov	r0, r2
 8001b10:	4619      	mov	r1, r3
 8001b12:	f7ff f879 	bl	8000c08 <__aeabi_d2f>
 8001b16:	4603      	mov	r3, r0
 8001b18:	ee00 3a10 	vmov	s0, r3
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f7ff ff83 	bl	8001a28 <setDriverMaxSpeed>
 8001b22:	4603      	mov	r3, r0
 8001b24:	e001      	b.n	8001b2a <setDriverMaxSpeedMm+0x60>
	}
	else return PARAM_CHANGE_ERR;
 8001b26:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bdb0      	pop	{r4, r5, r7, pc}
 8001b32:	0000      	movs	r0, r0
 8001b34:	0000      	movs	r0, r0
	...

08001b38 <setDriverAcceleration>:

/** Установка ускорения для режима POSITION_MODE (шаг/c^2)
 */
param_change_t setDriverAcceleration(DRIVER_StructDef* driver, int16_t accel)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	460b      	mov	r3, r1
 8001b42:	807b      	strh	r3, [r7, #2]
	if(driver->_workState == DRIVER_RUN) return PARAM_CHANGE_ERR;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	7ddb      	ldrb	r3, [r3, #23]
 8001b48:	b25b      	sxtb	r3, r3
 8001b4a:	2b03      	cmp	r3, #3
 8001b4c:	d102      	bne.n	8001b54 <setDriverAcceleration+0x1c>
 8001b4e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b52:	e039      	b.n	8001bc8 <setDriverAcceleration+0x90>

	driver->_accel = abs(accel);
 8001b54:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	bfb8      	it	lt
 8001b5c:	425b      	neglt	r3, r3
 8001b5e:	b29a      	uxth	r2, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	849a      	strh	r2, [r3, #36]	@ 0x24

	/* Считаем значение _c0 и _N по алгоритму плавного старта */
	if(accel != 0)
 8001b64:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d028      	beq.n	8001bbe <setDriverAcceleration+0x86>
	{
		driver->_c0 = 1000000.0 * sqrt(2.0 / driver->_accel);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7fe fce6 	bl	8000544 <__aeabi_i2d>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	f04f 0000 	mov.w	r0, #0
 8001b80:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001b84:	f7fe fe72 	bl	800086c <__aeabi_ddiv>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	ec43 2b17 	vmov	d7, r2, r3
 8001b90:	eeb0 0a47 	vmov.f32	s0, s14
 8001b94:	eef0 0a67 	vmov.f32	s1, s15
 8001b98:	f017 fe50 	bl	801983c <sqrt>
 8001b9c:	ec51 0b10 	vmov	r0, r1, d0
 8001ba0:	a30b      	add	r3, pc, #44	@ (adr r3, 8001bd0 <setDriverAcceleration+0x98>)
 8001ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba6:	f7fe fd37 	bl	8000618 <__aeabi_dmul>
 8001baa:	4602      	mov	r2, r0
 8001bac:	460b      	mov	r3, r1
 8001bae:	4610      	mov	r0, r2
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	f7ff f829 	bl	8000c08 <__aeabi_d2f>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	655a      	str	r2, [r3, #84]	@ 0x54
 8001bbc:	e003      	b.n	8001bc6 <setDriverAcceleration+0x8e>
	}
	else driver->_c0 = 0;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f04f 0200 	mov.w	r2, #0
 8001bc4:	655a      	str	r2, [r3, #84]	@ 0x54

	return PARAM_CHANGE_OK;
 8001bc6:	2300      	movs	r3, #0
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3708      	adds	r7, #8
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	00000000 	.word	0x00000000
 8001bd4:	412e8480 	.word	0x412e8480

08001bd8 <setDriverAccelerationDeg>:

/** Установка ускорения для режима POSITION_MODE (градусы/c^2)
 */
param_change_t setDriverAccelerationDeg(DRIVER_StructDef* driver, float accel)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	ed87 0a00 	vstr	s0, [r7]
	if(driver->_axisType == ROTATIONAL)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	7d1b      	ldrb	r3, [r3, #20]
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d111      	bne.n	8001c12 <setDriverAccelerationDeg+0x3a>
	{
		return setDriverAcceleration(driver, accel * driver->_stepsPerDeg);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	ed93 7a07 	vldr	s14, [r3, #28]
 8001bf4:	edd7 7a00 	vldr	s15, [r7]
 8001bf8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bfc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c00:	ee17 3a90 	vmov	r3, s15
 8001c04:	b21b      	sxth	r3, r3
 8001c06:	4619      	mov	r1, r3
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f7ff ff95 	bl	8001b38 <setDriverAcceleration>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	e001      	b.n	8001c16 <setDriverAccelerationDeg+0x3e>
	}
	else return PARAM_CHANGE_ERR;
 8001c12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <setDriverAccelerationMm>:

/** Установка ускорения для режима POSITION_MODE (мм/c^2)
 */
param_change_t setDriverAccelerationMm(DRIVER_StructDef* driver, float accel)
{
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b082      	sub	sp, #8
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
 8001c26:	ed87 0a00 	vstr	s0, [r7]
	if(driver->_axisType == LINEAR)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	7d1b      	ldrb	r3, [r3, #20]
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d114      	bne.n	8001c5e <setDriverAccelerationMm+0x40>
	{
		return setDriverAcceleration(driver, accel * driver->_stepsPerMm);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8001c38:	ee07 3a90 	vmov	s15, r3
 8001c3c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c40:	edd7 7a00 	vldr	s15, [r7]
 8001c44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c4c:	ee17 3a90 	vmov	r3, s15
 8001c50:	b21b      	sxth	r3, r3
 8001c52:	4619      	mov	r1, r3
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f7ff ff6f 	bl	8001b38 <setDriverAcceleration>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	e001      	b.n	8001c62 <setDriverAccelerationMm+0x44>
	}
	else return PARAM_CHANGE_ERR;
 8001c5e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
	...

08001c6c <getDriverCurrentPosDeg>:
}

/** Чтение текущей позиции мотора (градусы)
 */
float getDriverCurrentPosDeg(DRIVER_StructDef* driver)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
	if(driver->_axisType == ROTATIONAL)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	7d1b      	ldrb	r3, [r3, #20]
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d10c      	bne.n	8001c98 <getDriverCurrentPosDeg+0x2c>
	{
		return ((float)driver->stepper->pos) / driver->_stepsPerDeg;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	699b      	ldr	r3, [r3, #24]
 8001c84:	ee07 3a90 	vmov	s15, r3
 8001c88:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	edd3 7a07 	vldr	s15, [r3, #28]
 8001c92:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001c96:	e001      	b.n	8001c9c <getDriverCurrentPosDeg+0x30>
	}
	else return 0;
 8001c98:	eddf 6a05 	vldr	s13, [pc, #20]	@ 8001cb0 <getDriverCurrentPosDeg+0x44>
}
 8001c9c:	eef0 7a66 	vmov.f32	s15, s13
 8001ca0:	eeb0 0a67 	vmov.f32	s0, s15
 8001ca4:	370c      	adds	r7, #12
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
	...

08001cb8 <plannerVelocityMode>:
 * 	Если ускорение _accel = 0, то setSpeed(...) задает сразу скорость мотора
 * 	и старт будет резким!
 * 	Поддерживает горячую смену скорости!
 */
void plannerVelocityMode(DRIVER_StructDef* driver)
{
 8001cb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001cbc:	b084      	sub	sp, #16
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
	float err = driver->_targetSpeed - driver->_curSpeed;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8001cce:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cd2:	edc7 7a03 	vstr	s15, [r7, #12]
	int8_t dir = driver->stepper->dir;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	7f1b      	ldrb	r3, [r3, #28]
 8001cdc:	72fb      	strb	r3, [r7, #11]

	if (driver->_stopFlag == true && fabs(driver->_curSpeed) <= MIN_STEP_SPEED)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d014      	beq.n	8001d12 <plannerVelocityMode+0x5a>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8001cee:	eef0 7ae7 	vabs.f32	s15, s15
 8001cf2:	ee17 0a90 	vmov	r0, s15
 8001cf6:	f7fe fc37 	bl	8000568 <__aeabi_f2d>
 8001cfa:	a39c      	add	r3, pc, #624	@ (adr r3, 8001f6c <plannerVelocityMode+0x2b4>)
 8001cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d00:	f7fe ff06 	bl	8000b10 <__aeabi_dcmple>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d003      	beq.n	8001d12 <plannerVelocityMode+0x5a>
	{
		brakeDriver(driver);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f7ff fc08 	bl	8001520 <brakeDriver>
		return;
 8001d10:	e11a      	b.n	8001f48 <plannerVelocityMode+0x290>
	}

	if (driver->tickUs - driver->_speedPlannerTime >= driver->stepTime)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	689a      	ldr	r2, [r3, #8]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d1a:	1ad2      	subs	r2, r2, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	691b      	ldr	r3, [r3, #16]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	f0c0 8111 	bcc.w	8001f48 <plannerVelocityMode+0x290>
	{
		/* Обновление переменной времени планировщика */
		driver->_speedPlannerTime = driver->tickUs;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	689a      	ldr	r2, [r3, #8]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	645a      	str	r2, [r3, #68]	@ 0x44

		/* Основная логика разгона/торможения/смены скорости */
		if(driver->_n == 0) driver->_cn = driver->_c0;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d104      	bne.n	8001d40 <plannerVelocityMode+0x88>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	659a      	str	r2, [r3, #88]	@ 0x58
 8001d3e:	e0b8      	b.n	8001eb2 <plannerVelocityMode+0x1fa>
		else if(driver->_n == 1) driver->_cn = 0.4056 * driver->_c0;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d113      	bne.n	8001d70 <plannerVelocityMode+0xb8>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7fe fc0b 	bl	8000568 <__aeabi_f2d>
 8001d52:	a388      	add	r3, pc, #544	@ (adr r3, 8001f74 <plannerVelocityMode+0x2bc>)
 8001d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d58:	f7fe fc5e 	bl	8000618 <__aeabi_dmul>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	460b      	mov	r3, r1
 8001d60:	4610      	mov	r0, r2
 8001d62:	4619      	mov	r1, r3
 8001d64:	f7fe ff50 	bl	8000c08 <__aeabi_d2f>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	659a      	str	r2, [r3, #88]	@ 0x58
 8001d6e:	e0a0      	b.n	8001eb2 <plannerVelocityMode+0x1fa>
		else if(driver->_n > 1)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	dd77      	ble.n	8001e68 <plannerVelocityMode+0x1b0>
		{
			driver->_cn = driver->_cn * (1 - _signf(err * dir) * 2.0 / (4.0 * driver->_n + _signf(err * dir)));
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7fe fbf3 	bl	8000568 <__aeabi_f2d>
 8001d82:	4604      	mov	r4, r0
 8001d84:	460d      	mov	r5, r1
 8001d86:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001d8a:	ee07 3a90 	vmov	s15, r3
 8001d8e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d92:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d9a:	ee17 0a90 	vmov	r0, s15
 8001d9e:	f7fe fbe3 	bl	8000568 <__aeabi_f2d>
 8001da2:	a36b      	add	r3, pc, #428	@ (adr r3, 8001f50 <plannerVelocityMode+0x298>)
 8001da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da8:	f7fe fec6 	bl	8000b38 <__aeabi_dcmpgt>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d003      	beq.n	8001dba <plannerVelocityMode+0x102>
 8001db2:	f04f 0000 	mov.w	r0, #0
 8001db6:	496a      	ldr	r1, [pc, #424]	@ (8001f60 <plannerVelocityMode+0x2a8>)
 8001db8:	e002      	b.n	8001dc0 <plannerVelocityMode+0x108>
 8001dba:	f04f 0000 	mov.w	r0, #0
 8001dbe:	4969      	ldr	r1, [pc, #420]	@ (8001f64 <plannerVelocityMode+0x2ac>)
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	f7fe fa72 	bl	80002ac <__adddf3>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	460b      	mov	r3, r1
 8001dcc:	4690      	mov	r8, r2
 8001dce:	4699      	mov	r9, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7fe fbb5 	bl	8000544 <__aeabi_i2d>
 8001dda:	f04f 0200 	mov.w	r2, #0
 8001dde:	4b62      	ldr	r3, [pc, #392]	@ (8001f68 <plannerVelocityMode+0x2b0>)
 8001de0:	f7fe fc1a 	bl	8000618 <__aeabi_dmul>
 8001de4:	4602      	mov	r2, r0
 8001de6:	460b      	mov	r3, r1
 8001de8:	4692      	mov	sl, r2
 8001dea:	469b      	mov	fp, r3
 8001dec:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001df0:	ee07 3a90 	vmov	s15, r3
 8001df4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001df8:	edd7 7a03 	vldr	s15, [r7, #12]
 8001dfc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e00:	ee17 0a90 	vmov	r0, s15
 8001e04:	f7fe fbb0 	bl	8000568 <__aeabi_f2d>
 8001e08:	a351      	add	r3, pc, #324	@ (adr r3, 8001f50 <plannerVelocityMode+0x298>)
 8001e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e0e:	f7fe fe93 	bl	8000b38 <__aeabi_dcmpgt>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d003      	beq.n	8001e20 <plannerVelocityMode+0x168>
 8001e18:	f04f 0000 	mov.w	r0, #0
 8001e1c:	4950      	ldr	r1, [pc, #320]	@ (8001f60 <plannerVelocityMode+0x2a8>)
 8001e1e:	e002      	b.n	8001e26 <plannerVelocityMode+0x16e>
 8001e20:	f04f 0000 	mov.w	r0, #0
 8001e24:	494f      	ldr	r1, [pc, #316]	@ (8001f64 <plannerVelocityMode+0x2ac>)
 8001e26:	4652      	mov	r2, sl
 8001e28:	465b      	mov	r3, fp
 8001e2a:	f7fe fa3f 	bl	80002ac <__adddf3>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	460b      	mov	r3, r1
 8001e32:	4640      	mov	r0, r8
 8001e34:	4649      	mov	r1, r9
 8001e36:	f7fe fd19 	bl	800086c <__aeabi_ddiv>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	f04f 0000 	mov.w	r0, #0
 8001e42:	4947      	ldr	r1, [pc, #284]	@ (8001f60 <plannerVelocityMode+0x2a8>)
 8001e44:	f7fe fa30 	bl	80002a8 <__aeabi_dsub>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	460b      	mov	r3, r1
 8001e4c:	4620      	mov	r0, r4
 8001e4e:	4629      	mov	r1, r5
 8001e50:	f7fe fbe2 	bl	8000618 <__aeabi_dmul>
 8001e54:	4602      	mov	r2, r0
 8001e56:	460b      	mov	r3, r1
 8001e58:	4610      	mov	r0, r2
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	f7fe fed4 	bl	8000c08 <__aeabi_d2f>
 8001e60:	4602      	mov	r2, r0
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	659a      	str	r2, [r3, #88]	@ 0x58
 8001e66:	e024      	b.n	8001eb2 <plannerVelocityMode+0x1fa>
		}
		else if(driver->_n < 0)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	da20      	bge.n	8001eb2 <plannerVelocityMode+0x1fa>
		{
			driver->_curSpeed = 0;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	f04f 0200 	mov.w	r2, #0
 8001e76:	649a      	str	r2, [r3, #72]	@ 0x48

			if(driver->_stopFlag == true)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d003      	beq.n	8001e8a <plannerVelocityMode+0x1d2>
			{
				brakeDriver(driver);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f7ff fb4c 	bl	8001520 <brakeDriver>
				return;
 8001e88:	e05e      	b.n	8001f48 <plannerVelocityMode+0x290>
			}
			else
			{
				driver->stepper->dir = _signf(driver->_targetSpeed);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f7fe fb6a 	bl	8000568 <__aeabi_f2d>
 8001e94:	a32e      	add	r3, pc, #184	@ (adr r3, 8001f50 <plannerVelocityMode+0x298>)
 8001e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e9a:	f7fe fe4d 	bl	8000b38 <__aeabi_dcmpgt>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d001      	beq.n	8001ea8 <plannerVelocityMode+0x1f0>
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	e001      	b.n	8001eac <plannerVelocityMode+0x1f4>
 8001ea8:	f04f 32ff 	mov.w	r2, #4294967295
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	771a      	strb	r2, [r3, #28]
			}
		}

		driver->stepTime = (uint32_t)(driver->_cn) - STEP_TIME;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8001eb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ebc:	ee17 3a90 	vmov	r3, s15
 8001ec0:	1f5a      	subs	r2, r3, #5
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	611a      	str	r2, [r3, #16]
		driver->_curSpeed = dir * 1000000.0 / driver->_cn;
 8001ec6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f7fe fb3a 	bl	8000544 <__aeabi_i2d>
 8001ed0:	a321      	add	r3, pc, #132	@ (adr r3, 8001f58 <plannerVelocityMode+0x2a0>)
 8001ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ed6:	f7fe fb9f 	bl	8000618 <__aeabi_dmul>
 8001eda:	4602      	mov	r2, r0
 8001edc:	460b      	mov	r3, r1
 8001ede:	4614      	mov	r4, r2
 8001ee0:	461d      	mov	r5, r3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7fe fb3e 	bl	8000568 <__aeabi_f2d>
 8001eec:	4602      	mov	r2, r0
 8001eee:	460b      	mov	r3, r1
 8001ef0:	4620      	mov	r0, r4
 8001ef2:	4629      	mov	r1, r5
 8001ef4:	f7fe fcba 	bl	800086c <__aeabi_ddiv>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	460b      	mov	r3, r1
 8001efc:	4610      	mov	r0, r2
 8001efe:	4619      	mov	r1, r3
 8001f00:	f7fe fe82 	bl	8000c08 <__aeabi_d2f>
 8001f04:	4602      	mov	r2, r0
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	649a      	str	r2, [r3, #72]	@ 0x48

		driver->_n += _signf(err * dir);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6ddc      	ldr	r4, [r3, #92]	@ 0x5c
 8001f0e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001f12:	ee07 3a90 	vmov	s15, r3
 8001f16:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f1a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f22:	ee17 0a90 	vmov	r0, s15
 8001f26:	f7fe fb1f 	bl	8000568 <__aeabi_f2d>
 8001f2a:	a309      	add	r3, pc, #36	@ (adr r3, 8001f50 <plannerVelocityMode+0x298>)
 8001f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f30:	f7fe fe02 	bl	8000b38 <__aeabi_dcmpgt>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <plannerVelocityMode+0x286>
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e001      	b.n	8001f42 <plannerVelocityMode+0x28a>
 8001f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f42:	191a      	adds	r2, r3, r4
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	65da      	str	r2, [r3, #92]	@ 0x5c
	}
}
 8001f48:	3710      	adds	r7, #16
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f50:	812dea11 	.word	0x812dea11
 8001f54:	3d719799 	.word	0x3d719799
 8001f58:	00000000 	.word	0x00000000
 8001f5c:	412e8480 	.word	0x412e8480
 8001f60:	3ff00000 	.word	0x3ff00000
 8001f64:	bff00000 	.word	0xbff00000
 8001f68:	40100000 	.word	0x40100000
 8001f6c:	789abcdf 	.word	0x789abcdf
 8001f70:	3f323456 	.word	0x3f323456
 8001f74:	b3d07c85 	.word	0xb3d07c85
 8001f78:	3fd9f559 	.word	0x3fd9f559
 8001f7c:	00000000 	.word	0x00000000

08001f80 <setDriverTargetSpeed>:

/** Установка целевой скорости для режима VELOCITY_MODE (шаги/c)
 * 	в соответствии с минимальной скоростью, определенной в макросах
 */
param_change_t setDriverTargetSpeed(DRIVER_StructDef* driver, float speed)
{
 8001f80:	b5b0      	push	{r4, r5, r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	ed87 0a00 	vstr	s0, [r7]
	/* Если драйвер в режиме POSITION_MODE */
	if(driver->_runMode != VELOCITY_MODE) return PARAM_CHANGE_ERR;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	7d5b      	ldrb	r3, [r3, #21]
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d002      	beq.n	8001f9c <setDriverTargetSpeed+0x1c>
 8001f96:	f04f 33ff 	mov.w	r3, #4294967295
 8001f9a:	e0b8      	b.n	800210e <setDriverTargetSpeed+0x18e>

	driver->_targetSpeed = speed;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	683a      	ldr	r2, [r7, #0]
 8001fa0:	64da      	str	r2, [r3, #76]	@ 0x4c
	driver->_stopFlag = (driver->_targetSpeed == 0);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8001fa8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001fac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fb0:	bf0c      	ite	eq
 8001fb2:	2301      	moveq	r3, #1
 8001fb4:	2300      	movne	r3, #0
 8001fb6:	b2da      	uxtb	r2, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

	if(driver->_targetSpeed == 0 && driver->_accel == 0)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8001fc4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001fc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fcc:	d10c      	bne.n	8001fe8 <setDriverTargetSpeed+0x68>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d107      	bne.n	8001fe8 <setDriverTargetSpeed+0x68>
	{
		driver->stepTime = 0;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	611a      	str	r2, [r3, #16]
		brakeDriver(driver);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f7ff fa9e 	bl	8001520 <brakeDriver>

		return PARAM_CHANGE_OK;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	e092      	b.n	800210e <setDriverTargetSpeed+0x18e>
	}

	driver->stepper->dir = (speed > 0) ? 1 : -1;
 8001fe8:	edd7 7a00 	vldr	s15, [r7]
 8001fec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ff4:	dd01      	ble.n	8001ffa <setDriverTargetSpeed+0x7a>
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	e001      	b.n	8001ffe <setDriverTargetSpeed+0x7e>
 8001ffa:	f04f 32ff 	mov.w	r2, #4294967295
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	771a      	strb	r2, [r3, #28]

	/* Ограничение минимальной скорости */
	if (fabs(speed) < MIN_STEP_SPEED) driver->_targetSpeed = MIN_STEP_SPEED * driver->stepper->dir;
 8002004:	edd7 7a00 	vldr	s15, [r7]
 8002008:	eef0 7ae7 	vabs.f32	s15, s15
 800200c:	ee17 0a90 	vmov	r0, s15
 8002010:	f7fe faaa 	bl	8000568 <__aeabi_f2d>
 8002014:	a343      	add	r3, pc, #268	@ (adr r3, 8002124 <setDriverTargetSpeed+0x1a4>)
 8002016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800201a:	f7fe fd6f 	bl	8000afc <__aeabi_dcmplt>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d014      	beq.n	800204e <setDriverTargetSpeed+0xce>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	7f1b      	ldrb	r3, [r3, #28]
 800202a:	b25b      	sxtb	r3, r3
 800202c:	4618      	mov	r0, r3
 800202e:	f7fe fa89 	bl	8000544 <__aeabi_i2d>
 8002032:	a33c      	add	r3, pc, #240	@ (adr r3, 8002124 <setDriverTargetSpeed+0x1a4>)
 8002034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002038:	f7fe faee 	bl	8000618 <__aeabi_dmul>
 800203c:	4602      	mov	r2, r0
 800203e:	460b      	mov	r3, r1
 8002040:	4610      	mov	r0, r2
 8002042:	4619      	mov	r1, r3
 8002044:	f7fe fde0 	bl	8000c08 <__aeabi_d2f>
 8002048:	4602      	mov	r2, r0
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	64da      	str	r2, [r3, #76]	@ 0x4c

	if(driver->_accel == 0)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8002052:	b29b      	uxth	r3, r3
 8002054:	2b00      	cmp	r3, #0
 8002056:	d125      	bne.n	80020a4 <setDriverTargetSpeed+0x124>
	{
		driver->_curSpeed = driver->_targetSpeed;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	649a      	str	r2, [r3, #72]	@ 0x48
		driver->stepTime = fabs(1000000.0 / driver->_targetSpeed) - STEP_TIME;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002064:	4618      	mov	r0, r3
 8002066:	f7fe fa7f 	bl	8000568 <__aeabi_f2d>
 800206a:	4602      	mov	r2, r0
 800206c:	460b      	mov	r3, r1
 800206e:	a12f      	add	r1, pc, #188	@ (adr r1, 800212c <setDriverTargetSpeed+0x1ac>)
 8002070:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002074:	f7fe fbfa 	bl	800086c <__aeabi_ddiv>
 8002078:	4602      	mov	r2, r0
 800207a:	460b      	mov	r3, r1
 800207c:	4614      	mov	r4, r2
 800207e:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8002082:	f04f 0200 	mov.w	r2, #0
 8002086:	4b26      	ldr	r3, [pc, #152]	@ (8002120 <setDriverTargetSpeed+0x1a0>)
 8002088:	4620      	mov	r0, r4
 800208a:	4629      	mov	r1, r5
 800208c:	f7fe f90c 	bl	80002a8 <__aeabi_dsub>
 8002090:	4602      	mov	r2, r0
 8002092:	460b      	mov	r3, r1
 8002094:	4610      	mov	r0, r2
 8002096:	4619      	mov	r1, r3
 8002098:	f7fe fd96 	bl	8000bc8 <__aeabi_d2uiz>
 800209c:	4602      	mov	r2, r0
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	611a      	str	r2, [r3, #16]
 80020a2:	e030      	b.n	8002106 <setDriverTargetSpeed+0x186>
	}
	else
	{
		if(driver->_curSpeed == 0)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 80020aa:	eef5 7a40 	vcmp.f32	s15, #0.0
 80020ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020b2:	d114      	bne.n	80020de <setDriverTargetSpeed+0x15e>
		{
			driver->stepper->dir = _signf(driver->_targetSpeed);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7fe fa55 	bl	8000568 <__aeabi_f2d>
 80020be:	a316      	add	r3, pc, #88	@ (adr r3, 8002118 <setDriverTargetSpeed+0x198>)
 80020c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020c4:	f7fe fd38 	bl	8000b38 <__aeabi_dcmpgt>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <setDriverTargetSpeed+0x152>
 80020ce:	2201      	movs	r2, #1
 80020d0:	e001      	b.n	80020d6 <setDriverTargetSpeed+0x156>
 80020d2:	f04f 32ff 	mov.w	r2, #4294967295
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	771a      	strb	r2, [r3, #28]
 80020dc:	e013      	b.n	8002106 <setDriverTargetSpeed+0x186>
		}
		else driver->stepper->dir = _signf(driver->_curSpeed);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7fe fa40 	bl	8000568 <__aeabi_f2d>
 80020e8:	a30b      	add	r3, pc, #44	@ (adr r3, 8002118 <setDriverTargetSpeed+0x198>)
 80020ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ee:	f7fe fd23 	bl	8000b38 <__aeabi_dcmpgt>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d001      	beq.n	80020fc <setDriverTargetSpeed+0x17c>
 80020f8:	2201      	movs	r2, #1
 80020fa:	e001      	b.n	8002100 <setDriverTargetSpeed+0x180>
 80020fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	771a      	strb	r2, [r3, #28]
	}

	driver->_workState = DRIVER_RUN;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2203      	movs	r2, #3
 800210a:	75da      	strb	r2, [r3, #23]

	return PARAM_CHANGE_OK;
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bdb0      	pop	{r4, r5, r7, pc}
 8002116:	bf00      	nop
 8002118:	812dea11 	.word	0x812dea11
 800211c:	3d719799 	.word	0x3d719799
 8002120:	40140000 	.word	0x40140000
 8002124:	789abcdf 	.word	0x789abcdf
 8002128:	3f323456 	.word	0x3f323456
 800212c:	00000000 	.word	0x00000000
 8002130:	412e8480 	.word	0x412e8480

08002134 <setDriverTargetSpeedDeg>:

/** Установка целевой скорости для режима VELOCITY_MODE (градусы/c)
 */
param_change_t setDriverTargetSpeedDeg(DRIVER_StructDef* driver, float speed)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	ed87 0a00 	vstr	s0, [r7]
	if(driver->_axisType == ROTATIONAL)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	7d1b      	ldrb	r3, [r3, #20]
 8002144:	b2db      	uxtb	r3, r3
 8002146:	2b01      	cmp	r3, #1
 8002148:	d10d      	bne.n	8002166 <setDriverTargetSpeedDeg+0x32>
	{
		return setDriverTargetSpeed(driver, speed * driver->_stepsPerDeg);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	ed93 7a07 	vldr	s14, [r3, #28]
 8002150:	edd7 7a00 	vldr	s15, [r7]
 8002154:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002158:	eeb0 0a67 	vmov.f32	s0, s15
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	f7ff ff0f 	bl	8001f80 <setDriverTargetSpeed>
 8002162:	4603      	mov	r3, r0
 8002164:	e001      	b.n	800216a <setDriverTargetSpeedDeg+0x36>
	}
	else return PARAM_CHANGE_ERR;
 8002166:	f04f 33ff 	mov.w	r3, #4294967295
}
 800216a:	4618      	mov	r0, r3
 800216c:	3708      	adds	r7, #8
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
	...

08002174 <DWT_Init>:
  * @brief  This function initializes the DWT counter.
  * @param[in] None
  * @return None
  */
void DWT_Init()
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
	/* Allow the use of the counter DWT */
	SCB_DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8002178:	4b08      	ldr	r3, [pc, #32]	@ (800219c <DWT_Init+0x28>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a07      	ldr	r2, [pc, #28]	@ (800219c <DWT_Init+0x28>)
 800217e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002182:	6013      	str	r3, [r2, #0]
	/* Turn on the counter */
	DWT_CONTROL |= DWT_CTRL_CYCCNTENA_Msk;
 8002184:	4b06      	ldr	r3, [pc, #24]	@ (80021a0 <DWT_Init+0x2c>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a05      	ldr	r2, [pc, #20]	@ (80021a0 <DWT_Init+0x2c>)
 800218a:	f043 0301 	orr.w	r3, r3, #1
 800218e:	6013      	str	r3, [r2, #0]
}
 8002190:	bf00      	nop
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	e000edfc 	.word	0xe000edfc
 80021a0:	e0001000 	.word	0xe0001000

080021a4 <DWT_usDelay>:
  * @brief  This function produces a time delay in us.
  * @param[in] Time in us
  * @return None
  */
void DWT_usDelay(uint32_t us)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b085      	sub	sp, #20
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
	/* Convert microseconds to processor ticks */
	uint32_t us_count_tic =  us * (SystemCoreClock / 1000000);
 80021ac:	4b0c      	ldr	r3, [pc, #48]	@ (80021e0 <DWT_usDelay+0x3c>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a0c      	ldr	r2, [pc, #48]	@ (80021e4 <DWT_usDelay+0x40>)
 80021b2:	fba2 2303 	umull	r2, r3, r2, r3
 80021b6:	0c9a      	lsrs	r2, r3, #18
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	fb02 f303 	mul.w	r3, r2, r3
 80021be:	60fb      	str	r3, [r7, #12]
	/* Reset the counter */
	DWT_CYCCNT = 0;
 80021c0:	4b09      	ldr	r3, [pc, #36]	@ (80021e8 <DWT_usDelay+0x44>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	601a      	str	r2, [r3, #0]
	while(DWT_CYCCNT < us_count_tic);
 80021c6:	bf00      	nop
 80021c8:	4b07      	ldr	r3, [pc, #28]	@ (80021e8 <DWT_usDelay+0x44>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	68fa      	ldr	r2, [r7, #12]
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d8fa      	bhi.n	80021c8 <DWT_usDelay+0x24>
}
 80021d2:	bf00      	nop
 80021d4:	bf00      	nop
 80021d6:	3714      	adds	r7, #20
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr
 80021e0:	200008e8 	.word	0x200008e8
 80021e4:	431bde83 	.word	0x431bde83
 80021e8:	e0001004 	.word	0xe0001004

080021ec <fifoInit>:
  /** Функция инициализации fifo буфера
	* При инициализации передается указатель на
	* статический массив/структуру данных и его длина
	*/
fifo_state_t fifoInit(FIFO_StructDef* buf, int8_t* data, uint32_t size)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b085      	sub	sp, #20
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	60f8      	str	r0, [r7, #12]
 80021f4:	60b9      	str	r1, [r7, #8]
 80021f6:	607a      	str	r2, [r7, #4]
	buf->size = size;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	60da      	str	r2, [r3, #12]
	buf->data = data;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	68ba      	ldr	r2, [r7, #8]
 8002202:	601a      	str	r2, [r3, #0]

	buf->tail = 0;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2200      	movs	r2, #0
 8002208:	605a      	str	r2, [r3, #4]
	buf->head = 1;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2201      	movs	r2, #1
 800220e:	609a      	str	r2, [r3, #8]

	if (buf->data == NULL) return FIFO_ERR;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d102      	bne.n	800221e <fifoInit+0x32>
 8002218:	f04f 33ff 	mov.w	r3, #4294967295
 800221c:	e000      	b.n	8002220 <fifoInit+0x34>

	return FIFO_INIT;
 800221e:	2301      	movs	r3, #1
}
 8002220:	4618      	mov	r0, r3
 8002222:	3714      	adds	r7, #20
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <fifoClear>:

/** Очистка буфера
 */
fifo_state_t fifoClear(FIFO_StructDef* buf)
{
 800222c:	b480      	push	{r7}
 800222e:	b085      	sub	sp, #20
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
	for (uint32_t i = 0; i < buf->size; i++)
 8002234:	2300      	movs	r3, #0
 8002236:	60fb      	str	r3, [r7, #12]
 8002238:	e008      	b.n	800224c <fifoClear+0x20>
	{
		buf->data[i] = 0;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	4413      	add	r3, r2
 8002242:	2200      	movs	r2, #0
 8002244:	701a      	strb	r2, [r3, #0]
	for (uint32_t i = 0; i < buf->size; i++)
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	3301      	adds	r3, #1
 800224a:	60fb      	str	r3, [r7, #12]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	68fa      	ldr	r2, [r7, #12]
 8002252:	429a      	cmp	r2, r3
 8002254:	d3f1      	bcc.n	800223a <fifoClear+0xe>
	}

	buf->tail = 0;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	605a      	str	r2, [r3, #4]
	buf->head = 1;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2201      	movs	r2, #1
 8002260:	609a      	str	r2, [r3, #8]

	return FIFO_CLEARED;
 8002262:	2304      	movs	r3, #4
}
 8002264:	4618      	mov	r0, r3
 8002266:	3714      	adds	r7, #20
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <cellsForRead>:

/** Число ячеек доступных для ЧТЕНИЯ (заполненное пространство)
 */
uint16_t cellsForRead(FIFO_StructDef* buf)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
	if (buf->head < buf->tail)  return buf->size - buf->tail + buf->head - 1;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	689a      	ldr	r2, [r3, #8]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	429a      	cmp	r2, r3
 8002282:	d20f      	bcs.n	80022a4 <cellsForRead+0x34>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	b29a      	uxth	r2, r3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	b29b      	uxth	r3, r3
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	b29a      	uxth	r2, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	b29b      	uxth	r3, r3
 800229a:	4413      	add	r3, r2
 800229c:	b29b      	uxth	r3, r3
 800229e:	3b01      	subs	r3, #1
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	e009      	b.n	80022b8 <cellsForRead+0x48>
	else return buf->head - buf->tail - 1;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	b29a      	uxth	r2, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	3b01      	subs	r3, #1
 80022b6:	b29b      	uxth	r3, r3
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr

080022c4 <availableForRead>:

/** Функция определения наличия доступных ячеек для ЧТЕНИЯ (заполненное пространство)
 */
fifo_state_t availableForRead(FIFO_StructDef* buf)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
	if (cellsForRead(buf) > 0) return FIFO_OK;
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	f7ff ffcf 	bl	8002270 <cellsForRead>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d001      	beq.n	80022dc <availableForRead+0x18>
 80022d8:	2300      	movs	r3, #0
 80022da:	e000      	b.n	80022de <availableForRead+0x1a>
	else return FIFO_EMPTY;
 80022dc:	2302      	movs	r3, #2
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3708      	adds	r7, #8
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}

080022e6 <cellsForWrite>:

/** Число ячеек доступных для ЗАПИСИ (доступное пространство)
 */
uint16_t cellsForWrite(FIFO_StructDef* buf)
{
 80022e6:	b590      	push	{r4, r7, lr}
 80022e8:	b083      	sub	sp, #12
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
	return buf->size - cellsForRead(buf) - 2;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	b29c      	uxth	r4, r3
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f7ff ffbb 	bl	8002270 <cellsForRead>
 80022fa:	4603      	mov	r3, r0
 80022fc:	1ae3      	subs	r3, r4, r3
 80022fe:	b29b      	uxth	r3, r3
 8002300:	3b02      	subs	r3, #2
 8002302:	b29b      	uxth	r3, r3
}
 8002304:	4618      	mov	r0, r3
 8002306:	370c      	adds	r7, #12
 8002308:	46bd      	mov	sp, r7
 800230a:	bd90      	pop	{r4, r7, pc}

0800230c <availableForWrite>:

/** Функция определения наличия доступных ячеек для ЗАПИСИ (доступное пространство)
 */
fifo_state_t availableForWrite(FIFO_StructDef* buf)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
	if (cellsForWrite(buf) == 0) return FIFO_OVERFLOW;
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f7ff ffe6 	bl	80022e6 <cellsForWrite>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d101      	bne.n	8002324 <availableForWrite+0x18>
 8002320:	2303      	movs	r3, #3
 8002322:	e000      	b.n	8002326 <availableForWrite+0x1a>
	else return FIFO_OK;
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}

0800232e <fifoWrite>:

/** Записать ячейку данных в буфер и переместить указатель "голова" на одну позицию
 */
fifo_state_t fifoWrite(FIFO_StructDef* buf, int8_t value)
{
 800232e:	b480      	push	{r7}
 8002330:	b083      	sub	sp, #12
 8002332:	af00      	add	r7, sp, #0
 8002334:	6078      	str	r0, [r7, #4]
 8002336:	460b      	mov	r3, r1
 8002338:	70fb      	strb	r3, [r7, #3]
	if (buf->head >= buf->size) buf->head = 0;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	689a      	ldr	r2, [r3, #8]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	68db      	ldr	r3, [r3, #12]
 8002342:	429a      	cmp	r2, r3
 8002344:	d302      	bcc.n	800234c <fifoWrite+0x1e>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	609a      	str	r2, [r3, #8]

	buf->data[buf->head] = value;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	4413      	add	r3, r2
 8002356:	78fa      	ldrb	r2, [r7, #3]
 8002358:	701a      	strb	r2, [r3, #0]
	buf->head++;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	1c5a      	adds	r2, r3, #1
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	609a      	str	r2, [r3, #8]

	return FIFO_OK;
 8002364:	2300      	movs	r3, #0
}
 8002366:	4618      	mov	r0, r3
 8002368:	370c      	adds	r7, #12
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr

08002372 <fifoRead>:
/** Прочитать ячейку данных из буфера и переместить указатель "хвост" на одну позицию
 * 	Функция принимает указатель на переменную, в которую записывается значение последней
 * 	ячейки fifo буфера
 */
fifo_state_t fifoRead(FIFO_StructDef* buf, int8_t* value)
{
 8002372:	b480      	push	{r7}
 8002374:	b083      	sub	sp, #12
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]
 800237a:	6039      	str	r1, [r7, #0]
	if (value == NULL) return FIFO_ERR;
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d102      	bne.n	8002388 <fifoRead+0x16>
 8002382:	f04f 33ff 	mov.w	r3, #4294967295
 8002386:	e017      	b.n	80023b8 <fifoRead+0x46>

	buf->tail++;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	1c5a      	adds	r2, r3, #1
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	605a      	str	r2, [r3, #4]
	if (buf->tail >= buf->size) buf->tail = 0;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685a      	ldr	r2, [r3, #4]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	68db      	ldr	r3, [r3, #12]
 800239a:	429a      	cmp	r2, r3
 800239c:	d302      	bcc.n	80023a4 <fifoRead+0x32>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2200      	movs	r2, #0
 80023a2:	605a      	str	r2, [r3, #4]

	*value = buf->data[buf->tail];
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	4413      	add	r3, r2
 80023ae:	f993 2000 	ldrsb.w	r2, [r3]
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	701a      	strb	r2, [r3, #0]

	return FIFO_OK;
 80023b6:	2300      	movs	r3, #0
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <fifoInitChar>:
/** Функция инициализации fifo буфера
 * При инициализации передается указатель на
 * статический массив/структуру данных и его длина
 */
fifo_state_t fifoInitChar(FIFO_CHAR_StructDef* buf, char** data, uint32_t size)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b085      	sub	sp, #20
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	60b9      	str	r1, [r7, #8]
 80023ce:	607a      	str	r2, [r7, #4]
	buf->size = size;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	60da      	str	r2, [r3, #12]
	buf->data = data;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	68ba      	ldr	r2, [r7, #8]
 80023da:	601a      	str	r2, [r3, #0]

	buf->tail = 0;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2200      	movs	r2, #0
 80023e0:	605a      	str	r2, [r3, #4]
	buf->head = 1;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2201      	movs	r2, #1
 80023e6:	609a      	str	r2, [r3, #8]

	if (buf->data == NULL) return FIFO_ERR;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d102      	bne.n	80023f6 <fifoInitChar+0x32>
 80023f0:	f04f 33ff 	mov.w	r3, #4294967295
 80023f4:	e000      	b.n	80023f8 <fifoInitChar+0x34>

	return FIFO_INIT;
 80023f6:	2301      	movs	r3, #1
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3714      	adds	r7, #20
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr

08002404 <cellsForReadChar>:
}

/** Число ячеек доступных для ЧТЕНИЯ (заполненное пространство)
 */
uint16_t cellsForReadChar(FIFO_CHAR_StructDef* buf)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
	if (buf->head < buf->tail)  return buf->size - buf->tail + buf->head - 1;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	689a      	ldr	r2, [r3, #8]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	429a      	cmp	r2, r3
 8002416:	d20f      	bcs.n	8002438 <cellsForReadChar+0x34>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	b29a      	uxth	r2, r3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	b29b      	uxth	r3, r3
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	b29a      	uxth	r2, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	b29b      	uxth	r3, r3
 800242e:	4413      	add	r3, r2
 8002430:	b29b      	uxth	r3, r3
 8002432:	3b01      	subs	r3, #1
 8002434:	b29b      	uxth	r3, r3
 8002436:	e009      	b.n	800244c <cellsForReadChar+0x48>
	else return buf->head - buf->tail - 1;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	b29a      	uxth	r2, r3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	b29b      	uxth	r3, r3
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	b29b      	uxth	r3, r3
 8002448:	3b01      	subs	r3, #1
 800244a:	b29b      	uxth	r3, r3
}
 800244c:	4618      	mov	r0, r3
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr

08002458 <availableForReadChar>:

/** Функция определения наличия доступных ячеек для ЧТЕНИЯ (заполненное пространство)
 */
fifo_state_t availableForReadChar(FIFO_CHAR_StructDef* buf)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
	if (cellsForReadChar(buf) > 0) return FIFO_OK;
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f7ff ffcf 	bl	8002404 <cellsForReadChar>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d001      	beq.n	8002470 <availableForReadChar+0x18>
 800246c:	2300      	movs	r3, #0
 800246e:	e000      	b.n	8002472 <availableForReadChar+0x1a>
	else return FIFO_EMPTY;
 8002470:	2302      	movs	r3, #2
}
 8002472:	4618      	mov	r0, r3
 8002474:	3708      	adds	r7, #8
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}

0800247a <fifoReadChar>:
/** Прочитать ячейку данных из буфера и переместить указатель "хвост" на одну позицию
 * 	Функция принимает указатель на переменную, в которую записывается значение последней
 * 	ячейки fifo буфера
 */
fifo_state_t fifoReadChar(FIFO_CHAR_StructDef* buf, char* str)
{
 800247a:	b580      	push	{r7, lr}
 800247c:	b082      	sub	sp, #8
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
 8002482:	6039      	str	r1, [r7, #0]
	if (str == NULL) return FIFO_ERR;
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d102      	bne.n	8002490 <fifoReadChar+0x16>
 800248a:	f04f 33ff 	mov.w	r3, #4294967295
 800248e:	e019      	b.n	80024c4 <fifoReadChar+0x4a>

	buf->tail++;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	1c5a      	adds	r2, r3, #1
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	605a      	str	r2, [r3, #4]
	if (buf->tail >= buf->size) buf->tail = 0;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685a      	ldr	r2, [r3, #4]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d302      	bcc.n	80024ac <fifoReadChar+0x32>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	605a      	str	r2, [r3, #4]

	strcpy(str, buf->data[buf->tail]);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	4413      	add	r3, r2
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4619      	mov	r1, r3
 80024bc:	6838      	ldr	r0, [r7, #0]
 80024be:	f015 f9dc 	bl	801787a <strcpy>

	return FIFO_OK;
 80024c2:	2300      	movs	r3, #0
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3708      	adds	r7, #8
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}

080024cc <handlerGcodeInit>:
extern FIFO_StructDef fifoBufSteps;

/** Инициализация структуры обработчика g - команд
 */
void handlerGcodeInit(HANDLER_GCODE_StructDef* ghandler)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
	ghandler->interpolator = &interpolator;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	4a0b      	ldr	r2, [pc, #44]	@ (8002504 <handlerGcodeInit+0x38>)
 80024d8:	601a      	str	r2, [r3, #0]

	ghandler->_workState = HANDLER_GCODE_READY;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2202      	movs	r2, #2
 80024de:	711a      	strb	r2, [r3, #4]
	ghandler->_command = NONE;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	22ff      	movs	r2, #255	@ 0xff
 80024e4:	715a      	strb	r2, [r3, #5]

	/* Инициализация структуры интерполятора */
	interpolatorInit(ghandler->interpolator);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4618      	mov	r0, r3
 80024ec:	f000 fa16 	bl	800291c <interpolatorInit>

	/* Инициализация FIFO буфера G - команд */
	fifoInitChar(&fifoGcodeBuf, GcodeBuffer, FIFO_GCODE_BUF_SIZE);
 80024f0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80024f4:	4904      	ldr	r1, [pc, #16]	@ (8002508 <handlerGcodeInit+0x3c>)
 80024f6:	4805      	ldr	r0, [pc, #20]	@ (800250c <handlerGcodeInit+0x40>)
 80024f8:	f7ff ff64 	bl	80023c4 <fifoInitChar>
}
 80024fc:	bf00      	nop
 80024fe:	3708      	adds	r7, #8
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	20000fe8 	.word	0x20000fe8
 8002508:	20000be8 	.word	0x20000be8
 800250c:	20000fec 	.word	0x20000fec

08002510 <tickGcodeHandler>:
 * 	В теле тикера происходит анализ g - кода и расчет шагов интерполятором
 * 	В результате работы обработчика заполняется буфер шагов интерполятора, который
 * 	в дальнейшем библиотека planner.h использует для планирования скорости движения
 */
void tickGcodeHandler(HANDLER_GCODE_StructDef* ghandler)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
	if(availableForReadChar(&fifoGcodeBuf) == FIFO_OK)
 8002518:	4807      	ldr	r0, [pc, #28]	@ (8002538 <tickGcodeHandler+0x28>)
 800251a:	f7ff ff9d 	bl	8002458 <availableForReadChar>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d102      	bne.n	800252a <tickGcodeHandler+0x1a>
	{
		handlerGcode(ghandler);
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f000 f80b 	bl	8002540 <handlerGcode>
	}

	handlerGcommand(ghandler);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f000 f97a 	bl	8002824 <handlerGcommand>
}
 8002530:	bf00      	nop
 8002532:	3708      	adds	r7, #8
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	20000fec 	.word	0x20000fec
 800253c:	00000000 	.word	0x00000000

08002540 <handlerGcode>:
/** Обработчик g - команд, на вход поступает строка (в будущем будет бинарное представление команды)
 * 	На выходе передается статус, что G команда обработана, и выставлен статус обработчика - номер g - команды,
 * 	по которой необходимо считать шаги
 */
void handlerGcode(HANDLER_GCODE_StructDef* ghandler)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b0a2      	sub	sp, #136	@ 0x88
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
	if(ghandler->_workState == HANDLER_GCODE_READY)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800254e:	2b02      	cmp	r3, #2
 8002550:	f040 814a 	bne.w	80027e8 <handlerGcode+0x2a8>
	{
		char str[128] = {0};
 8002554:	f107 0308 	add.w	r3, r7, #8
 8002558:	2280      	movs	r2, #128	@ 0x80
 800255a:	2100      	movs	r1, #0
 800255c:	4618      	mov	r0, r3
 800255e:	f015 f8de 	bl	801771e <memset>

		fifoReadChar(&fifoGcodeBuf, str);
 8002562:	f107 0308 	add.w	r3, r7, #8
 8002566:	4619      	mov	r1, r3
 8002568:	48a3      	ldr	r0, [pc, #652]	@ (80027f8 <handlerGcode+0x2b8>)
 800256a:	f7ff ff86 	bl	800247a <fifoReadChar>

		if (str[0] == 'G')
 800256e:	7a3b      	ldrb	r3, [r7, #8]
 8002570:	2b47      	cmp	r3, #71	@ 0x47
 8002572:	f040 8135 	bne.w	80027e0 <handlerGcode+0x2a0>
		{
			/* Конечные координаты участка траектории в соответствии с g - командой (мм) */
			Xk = atof(strchr(str, 'X') + 1);
 8002576:	f107 0308 	add.w	r3, r7, #8
 800257a:	2158      	movs	r1, #88	@ 0x58
 800257c:	4618      	mov	r0, r3
 800257e:	f015 f8d6 	bl	801772e <strchr>
 8002582:	4603      	mov	r3, r0
 8002584:	3301      	adds	r3, #1
 8002586:	4618      	mov	r0, r3
 8002588:	f014 f88a 	bl	80166a0 <atof>
 800258c:	eeb0 7a40 	vmov.f32	s14, s0
 8002590:	eef0 7a60 	vmov.f32	s15, s1
 8002594:	4b99      	ldr	r3, [pc, #612]	@ (80027fc <handlerGcode+0x2bc>)
 8002596:	ed83 7b00 	vstr	d7, [r3]
			Yk = atof(strchr(str, 'Y') + 1);
 800259a:	f107 0308 	add.w	r3, r7, #8
 800259e:	2159      	movs	r1, #89	@ 0x59
 80025a0:	4618      	mov	r0, r3
 80025a2:	f015 f8c4 	bl	801772e <strchr>
 80025a6:	4603      	mov	r3, r0
 80025a8:	3301      	adds	r3, #1
 80025aa:	4618      	mov	r0, r3
 80025ac:	f014 f878 	bl	80166a0 <atof>
 80025b0:	eeb0 7a40 	vmov.f32	s14, s0
 80025b4:	eef0 7a60 	vmov.f32	s15, s1
 80025b8:	4b91      	ldr	r3, [pc, #580]	@ (8002800 <handlerGcode+0x2c0>)
 80025ba:	ed83 7b00 	vstr	d7, [r3]

			if (str[2] == '0')
 80025be:	7abb      	ldrb	r3, [r7, #10]
 80025c0:	2b30      	cmp	r3, #48	@ 0x30
 80025c2:	d14c      	bne.n	800265e <handlerGcode+0x11e>
			{
				x = round(Xk / MM_PER_STEP); y = round(Yk / MM_PER_STEP);
 80025c4:	4b8d      	ldr	r3, [pc, #564]	@ (80027fc <handlerGcode+0x2bc>)
 80025c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025ca:	a389      	add	r3, pc, #548	@ (adr r3, 80027f0 <handlerGcode+0x2b0>)
 80025cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025d0:	f7fe f94c 	bl	800086c <__aeabi_ddiv>
 80025d4:	4602      	mov	r2, r0
 80025d6:	460b      	mov	r3, r1
 80025d8:	ec43 2b17 	vmov	d7, r2, r3
 80025dc:	eeb0 0a47 	vmov.f32	s0, s14
 80025e0:	eef0 0a67 	vmov.f32	s1, s15
 80025e4:	f017 fc1c 	bl	8019e20 <round>
 80025e8:	ec53 2b10 	vmov	r2, r3, d0
 80025ec:	4610      	mov	r0, r2
 80025ee:	4619      	mov	r1, r3
 80025f0:	f7fe fc80 	bl	8000ef4 <__aeabi_d2lz>
 80025f4:	4602      	mov	r2, r0
 80025f6:	460b      	mov	r3, r1
 80025f8:	4982      	ldr	r1, [pc, #520]	@ (8002804 <handlerGcode+0x2c4>)
 80025fa:	e9c1 2300 	strd	r2, r3, [r1]
 80025fe:	4b80      	ldr	r3, [pc, #512]	@ (8002800 <handlerGcode+0x2c0>)
 8002600:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002604:	a37a      	add	r3, pc, #488	@ (adr r3, 80027f0 <handlerGcode+0x2b0>)
 8002606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800260a:	f7fe f92f 	bl	800086c <__aeabi_ddiv>
 800260e:	4602      	mov	r2, r0
 8002610:	460b      	mov	r3, r1
 8002612:	ec43 2b17 	vmov	d7, r2, r3
 8002616:	eeb0 0a47 	vmov.f32	s0, s14
 800261a:	eef0 0a67 	vmov.f32	s1, s15
 800261e:	f017 fbff 	bl	8019e20 <round>
 8002622:	ec53 2b10 	vmov	r2, r3, d0
 8002626:	4610      	mov	r0, r2
 8002628:	4619      	mov	r1, r3
 800262a:	f7fe fc63 	bl	8000ef4 <__aeabi_d2lz>
 800262e:	4602      	mov	r2, r0
 8002630:	460b      	mov	r3, r1
 8002632:	4975      	ldr	r1, [pc, #468]	@ (8002808 <handlerGcode+0x2c8>)
 8002634:	e9c1 2300 	strd	r2, r3, [r1]
				X = Xk; Y = Yk;
 8002638:	4b70      	ldr	r3, [pc, #448]	@ (80027fc <handlerGcode+0x2bc>)
 800263a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800263e:	4973      	ldr	r1, [pc, #460]	@ (800280c <handlerGcode+0x2cc>)
 8002640:	e9c1 2300 	strd	r2, r3, [r1]
 8002644:	4b6e      	ldr	r3, [pc, #440]	@ (8002800 <handlerGcode+0x2c0>)
 8002646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800264a:	4971      	ldr	r1, [pc, #452]	@ (8002810 <handlerGcode+0x2d0>)
 800264c:	e9c1 2300 	strd	r2, r3, [r1]

				ghandler->_command = G00;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2200      	movs	r2, #0
 8002654:	715a      	strb	r2, [r3, #5]

				ghandler->_workState = HANDLER_GCODE_DONE;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2201      	movs	r2, #1
 800265a:	711a      	strb	r2, [r3, #4]
				return ;
 800265c:	e0c5      	b.n	80027ea <handlerGcode+0x2aa>
			}

			if (str[2] == '1')
 800265e:	7abb      	ldrb	r3, [r7, #10]
 8002660:	2b31      	cmp	r3, #49	@ 0x31
 8002662:	d11a      	bne.n	800269a <handlerGcode+0x15a>
			{
				/* Инициализация и расчет параметров отрезка */
				if (setLine(&line, Xk, Yk) == INTERPOLATOR_DONE)
 8002664:	4b65      	ldr	r3, [pc, #404]	@ (80027fc <handlerGcode+0x2bc>)
 8002666:	ed93 7b00 	vldr	d7, [r3]
 800266a:	4b65      	ldr	r3, [pc, #404]	@ (8002800 <handlerGcode+0x2c0>)
 800266c:	ed93 6b00 	vldr	d6, [r3]
 8002670:	eeb0 1a46 	vmov.f32	s2, s12
 8002674:	eef0 1a66 	vmov.f32	s3, s13
 8002678:	eeb0 0a47 	vmov.f32	s0, s14
 800267c:	eef0 0a67 	vmov.f32	s1, s15
 8002680:	4864      	ldr	r0, [pc, #400]	@ (8002814 <handlerGcode+0x2d4>)
 8002682:	f000 f961 	bl	8002948 <setLine>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d106      	bne.n	800269a <handlerGcode+0x15a>
				{
					ghandler->_command = G01;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2201      	movs	r2, #1
 8002690:	715a      	strb	r2, [r3, #5]

					ghandler->_workState = HANDLER_GCODE_DONE;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2201      	movs	r2, #1
 8002696:	711a      	strb	r2, [r3, #4]
					return ;
 8002698:	e0a7      	b.n	80027ea <handlerGcode+0x2aa>
				}
			}

			if (str[2] == '2')
 800269a:	7abb      	ldrb	r3, [r7, #10]
 800269c:	2b32      	cmp	r3, #50	@ 0x32
 800269e:	d14d      	bne.n	800273c <handlerGcode+0x1fc>
			{
				/* Относительные координаты центра дуги (мм) */
				I = atof(strchr(str, 'I') + 1);
 80026a0:	f107 0308 	add.w	r3, r7, #8
 80026a4:	2149      	movs	r1, #73	@ 0x49
 80026a6:	4618      	mov	r0, r3
 80026a8:	f015 f841 	bl	801772e <strchr>
 80026ac:	4603      	mov	r3, r0
 80026ae:	3301      	adds	r3, #1
 80026b0:	4618      	mov	r0, r3
 80026b2:	f013 fff5 	bl	80166a0 <atof>
 80026b6:	eeb0 7a40 	vmov.f32	s14, s0
 80026ba:	eef0 7a60 	vmov.f32	s15, s1
 80026be:	4b56      	ldr	r3, [pc, #344]	@ (8002818 <handlerGcode+0x2d8>)
 80026c0:	ed83 7b00 	vstr	d7, [r3]
				J = atof(strchr(str, 'J') + 1);
 80026c4:	f107 0308 	add.w	r3, r7, #8
 80026c8:	214a      	movs	r1, #74	@ 0x4a
 80026ca:	4618      	mov	r0, r3
 80026cc:	f015 f82f 	bl	801772e <strchr>
 80026d0:	4603      	mov	r3, r0
 80026d2:	3301      	adds	r3, #1
 80026d4:	4618      	mov	r0, r3
 80026d6:	f013 ffe3 	bl	80166a0 <atof>
 80026da:	eeb0 7a40 	vmov.f32	s14, s0
 80026de:	eef0 7a60 	vmov.f32	s15, s1
 80026e2:	4b4e      	ldr	r3, [pc, #312]	@ (800281c <handlerGcode+0x2dc>)
 80026e4:	ed83 7b00 	vstr	d7, [r3]

				/* Инициализация и расчет параметров дуги G02 */
				if (setArc(&arc, Xk, Yk, I, J, 1) == INTERPOLATOR_DONE)
 80026e8:	4b44      	ldr	r3, [pc, #272]	@ (80027fc <handlerGcode+0x2bc>)
 80026ea:	ed93 7b00 	vldr	d7, [r3]
 80026ee:	4b44      	ldr	r3, [pc, #272]	@ (8002800 <handlerGcode+0x2c0>)
 80026f0:	ed93 6b00 	vldr	d6, [r3]
 80026f4:	4b48      	ldr	r3, [pc, #288]	@ (8002818 <handlerGcode+0x2d8>)
 80026f6:	ed93 5b00 	vldr	d5, [r3]
 80026fa:	4b48      	ldr	r3, [pc, #288]	@ (800281c <handlerGcode+0x2dc>)
 80026fc:	ed93 4b00 	vldr	d4, [r3]
 8002700:	2101      	movs	r1, #1
 8002702:	eeb0 3a44 	vmov.f32	s6, s8
 8002706:	eef0 3a64 	vmov.f32	s7, s9
 800270a:	eeb0 2a45 	vmov.f32	s4, s10
 800270e:	eef0 2a65 	vmov.f32	s5, s11
 8002712:	eeb0 1a46 	vmov.f32	s2, s12
 8002716:	eef0 1a66 	vmov.f32	s3, s13
 800271a:	eeb0 0a47 	vmov.f32	s0, s14
 800271e:	eef0 0a67 	vmov.f32	s1, s15
 8002722:	483f      	ldr	r0, [pc, #252]	@ (8002820 <handlerGcode+0x2e0>)
 8002724:	f000 fab4 	bl	8002c90 <setArc>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d106      	bne.n	800273c <handlerGcode+0x1fc>
				{
					ghandler->_command = G02;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2202      	movs	r2, #2
 8002732:	715a      	strb	r2, [r3, #5]

					ghandler->_workState = HANDLER_GCODE_DONE;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2201      	movs	r2, #1
 8002738:	711a      	strb	r2, [r3, #4]
					return ;
 800273a:	e056      	b.n	80027ea <handlerGcode+0x2aa>
				}
			}

			if (str[2] == '3')
 800273c:	7abb      	ldrb	r3, [r7, #10]
 800273e:	2b33      	cmp	r3, #51	@ 0x33
 8002740:	d152      	bne.n	80027e8 <handlerGcode+0x2a8>
			{
				/* Относительные координаты центра дуги (мм) */
				I = atof(strchr(str, 'I') + 1);
 8002742:	f107 0308 	add.w	r3, r7, #8
 8002746:	2149      	movs	r1, #73	@ 0x49
 8002748:	4618      	mov	r0, r3
 800274a:	f014 fff0 	bl	801772e <strchr>
 800274e:	4603      	mov	r3, r0
 8002750:	3301      	adds	r3, #1
 8002752:	4618      	mov	r0, r3
 8002754:	f013 ffa4 	bl	80166a0 <atof>
 8002758:	eeb0 7a40 	vmov.f32	s14, s0
 800275c:	eef0 7a60 	vmov.f32	s15, s1
 8002760:	4b2d      	ldr	r3, [pc, #180]	@ (8002818 <handlerGcode+0x2d8>)
 8002762:	ed83 7b00 	vstr	d7, [r3]
				J = atof(strchr(str, 'J') + 1);
 8002766:	f107 0308 	add.w	r3, r7, #8
 800276a:	214a      	movs	r1, #74	@ 0x4a
 800276c:	4618      	mov	r0, r3
 800276e:	f014 ffde 	bl	801772e <strchr>
 8002772:	4603      	mov	r3, r0
 8002774:	3301      	adds	r3, #1
 8002776:	4618      	mov	r0, r3
 8002778:	f013 ff92 	bl	80166a0 <atof>
 800277c:	eeb0 7a40 	vmov.f32	s14, s0
 8002780:	eef0 7a60 	vmov.f32	s15, s1
 8002784:	4b25      	ldr	r3, [pc, #148]	@ (800281c <handlerGcode+0x2dc>)
 8002786:	ed83 7b00 	vstr	d7, [r3]

				/* Инициализация и расчет параметров дуги G03 */
				if (setArc(&arc, Xk, Yk, I, J, -1) == INTERPOLATOR_DONE)
 800278a:	4b1c      	ldr	r3, [pc, #112]	@ (80027fc <handlerGcode+0x2bc>)
 800278c:	ed93 7b00 	vldr	d7, [r3]
 8002790:	4b1b      	ldr	r3, [pc, #108]	@ (8002800 <handlerGcode+0x2c0>)
 8002792:	ed93 6b00 	vldr	d6, [r3]
 8002796:	4b20      	ldr	r3, [pc, #128]	@ (8002818 <handlerGcode+0x2d8>)
 8002798:	ed93 5b00 	vldr	d5, [r3]
 800279c:	4b1f      	ldr	r3, [pc, #124]	@ (800281c <handlerGcode+0x2dc>)
 800279e:	ed93 4b00 	vldr	d4, [r3]
 80027a2:	f04f 31ff 	mov.w	r1, #4294967295
 80027a6:	eeb0 3a44 	vmov.f32	s6, s8
 80027aa:	eef0 3a64 	vmov.f32	s7, s9
 80027ae:	eeb0 2a45 	vmov.f32	s4, s10
 80027b2:	eef0 2a65 	vmov.f32	s5, s11
 80027b6:	eeb0 1a46 	vmov.f32	s2, s12
 80027ba:	eef0 1a66 	vmov.f32	s3, s13
 80027be:	eeb0 0a47 	vmov.f32	s0, s14
 80027c2:	eef0 0a67 	vmov.f32	s1, s15
 80027c6:	4816      	ldr	r0, [pc, #88]	@ (8002820 <handlerGcode+0x2e0>)
 80027c8:	f000 fa62 	bl	8002c90 <setArc>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d10a      	bne.n	80027e8 <handlerGcode+0x2a8>
				{
					ghandler->_command = G03;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2203      	movs	r2, #3
 80027d6:	715a      	strb	r2, [r3, #5]

					ghandler->_workState = HANDLER_GCODE_DONE;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2201      	movs	r2, #1
 80027dc:	711a      	strb	r2, [r3, #4]
					return ;
 80027de:	e004      	b.n	80027ea <handlerGcode+0x2aa>
				}
			}
		}
		else
		{
			ghandler->_workState = HANDLER_GCODE_READY;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2202      	movs	r2, #2
 80027e4:	711a      	strb	r2, [r3, #4]
			return ;
 80027e6:	e000      	b.n	80027ea <handlerGcode+0x2aa>
		}
	}

	return ;
 80027e8:	bf00      	nop
}
 80027ea:	3788      	adds	r7, #136	@ 0x88
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	a0000000 	.word	0xa0000000
 80027f4:	3f799999 	.word	0x3f799999
 80027f8:	20000fec 	.word	0x20000fec
 80027fc:	20000b10 	.word	0x20000b10
 8002800:	20000b18 	.word	0x20000b18
 8002804:	20001000 	.word	0x20001000
 8002808:	20001008 	.word	0x20001008
 800280c:	20001010 	.word	0x20001010
 8002810:	20001018 	.word	0x20001018
 8002814:	20000b30 	.word	0x20000b30
 8002818:	20000b20 	.word	0x20000b20
 800281c:	20000b28 	.word	0x20000b28
 8002820:	20000b90 	.word	0x20000b90

08002824 <handlerGcommand>:

/** Расчетный обработчик конкретной g - команды
 */
void handlerGcommand(HANDLER_GCODE_StructDef* ghandler)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af02      	add	r7, sp, #8
 800282a:	6078      	str	r0, [r7, #4]
	if(ghandler->_workState == HANDLER_GCODE_DONE)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8002832:	2b01      	cmp	r3, #1
 8002834:	d14c      	bne.n	80028d0 <handlerGcommand+0xac>
	{

		switch(ghandler->_command)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800283c:	3301      	adds	r3, #1
 800283e:	2b04      	cmp	r3, #4
 8002840:	d846      	bhi.n	80028d0 <handlerGcommand+0xac>
 8002842:	a201      	add	r2, pc, #4	@ (adr r2, 8002848 <handlerGcommand+0x24>)
 8002844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002848:	0800285d 	.word	0x0800285d
 800284c:	08002865 	.word	0x08002865
 8002850:	0800286d 	.word	0x0800286d
 8002854:	0800288b 	.word	0x0800288b
 8002858:	080028a9 	.word	0x080028a9
		{
			case NONE:
			{
				ghandler->_workState = HANDLER_GCODE_READY;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2202      	movs	r2, #2
 8002860:	711a      	strb	r2, [r3, #4]
				return ;
 8002862:	e036      	b.n	80028d2 <handlerGcommand+0xae>
			}

			/* Расчет команды G00 */
			case G00:
			{
				ghandler->_workState = HANDLER_GCODE_READY;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2202      	movs	r2, #2
 8002868:	711a      	strb	r2, [r3, #4]
				return;
 800286a:	e032      	b.n	80028d2 <handlerGcommand+0xae>
			}

			/* Расчет команды G01 */
			case G01:
			{
				if(handlerLine(&interpolator, &fifoBufSteps, &line, 0, 1) == INTERPOLATOR_DONE)
 800286c:	2301      	movs	r3, #1
 800286e:	9300      	str	r3, [sp, #0]
 8002870:	2300      	movs	r3, #0
 8002872:	4a19      	ldr	r2, [pc, #100]	@ (80028d8 <handlerGcommand+0xb4>)
 8002874:	4919      	ldr	r1, [pc, #100]	@ (80028dc <handlerGcommand+0xb8>)
 8002876:	481a      	ldr	r0, [pc, #104]	@ (80028e0 <handlerGcommand+0xbc>)
 8002878:	f000 fc02 	bl	8003080 <handlerLine>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d121      	bne.n	80028c6 <handlerGcommand+0xa2>
				{
					ghandler->_workState = HANDLER_GCODE_READY;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2202      	movs	r2, #2
 8002886:	711a      	strb	r2, [r3, #4]
				}
				break;
 8002888:	e01d      	b.n	80028c6 <handlerGcommand+0xa2>
			}

			/* Расчет команды G02 */
			case G02:
			{
				if(handlerArc(&interpolator, &fifoBufSteps, &arc, 0, 1) == INTERPOLATOR_DONE)
 800288a:	2301      	movs	r3, #1
 800288c:	9300      	str	r3, [sp, #0]
 800288e:	2300      	movs	r3, #0
 8002890:	4a14      	ldr	r2, [pc, #80]	@ (80028e4 <handlerGcommand+0xc0>)
 8002892:	4912      	ldr	r1, [pc, #72]	@ (80028dc <handlerGcommand+0xb8>)
 8002894:	4812      	ldr	r0, [pc, #72]	@ (80028e0 <handlerGcommand+0xbc>)
 8002896:	f000 fdd7 	bl	8003448 <handlerArc>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d114      	bne.n	80028ca <handlerGcommand+0xa6>
				{
					ghandler->_workState = HANDLER_GCODE_READY;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2202      	movs	r2, #2
 80028a4:	711a      	strb	r2, [r3, #4]
				}
				break;
 80028a6:	e010      	b.n	80028ca <handlerGcommand+0xa6>
			}

			/* Расчет команды G03 */
			case G03:
			{
				if(handlerArc(&interpolator, &fifoBufSteps, &arc, 0, 1) == INTERPOLATOR_DONE)
 80028a8:	2301      	movs	r3, #1
 80028aa:	9300      	str	r3, [sp, #0]
 80028ac:	2300      	movs	r3, #0
 80028ae:	4a0d      	ldr	r2, [pc, #52]	@ (80028e4 <handlerGcommand+0xc0>)
 80028b0:	490a      	ldr	r1, [pc, #40]	@ (80028dc <handlerGcommand+0xb8>)
 80028b2:	480b      	ldr	r0, [pc, #44]	@ (80028e0 <handlerGcommand+0xbc>)
 80028b4:	f000 fdc8 	bl	8003448 <handlerArc>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d107      	bne.n	80028ce <handlerGcommand+0xaa>
				{
					ghandler->_workState = HANDLER_GCODE_READY;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2202      	movs	r2, #2
 80028c2:	711a      	strb	r2, [r3, #4]
				}
				break;
 80028c4:	e003      	b.n	80028ce <handlerGcommand+0xaa>
				break;
 80028c6:	bf00      	nop
 80028c8:	e002      	b.n	80028d0 <handlerGcommand+0xac>
				break;
 80028ca:	bf00      	nop
 80028cc:	e000      	b.n	80028d0 <handlerGcommand+0xac>
				break;
 80028ce:	bf00      	nop
			}
		}
	}

	return;
 80028d0:	bf00      	nop
}
 80028d2:	3708      	adds	r7, #8
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	20000b30 	.word	0x20000b30
 80028dc:	2000d820 	.word	0x2000d820
 80028e0:	20000fe8 	.word	0x20000fe8
 80028e4:	20000b90 	.word	0x20000b90

080028e8 <handlerEndState>:

/**	Обработчик статуса завершения исполнения программы движения
 * 	отслеживает статуc структуры ghandler
 */
void handlerEndState(HANDLER_GCODE_StructDef* ghandler)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
	if (ghandler->_workState == HANDLER_GCODE_READY)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d109      	bne.n	800290e <handlerEndState+0x26>
	{
		if (ghandler->interpolator->_workState == INTERPOLATOR_READY) ghandler->_workState = HANDLER_GCODE_END;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f993 3000 	ldrsb.w	r3, [r3]
 8002902:	2b01      	cmp	r3, #1
 8002904:	d103      	bne.n	800290e <handlerEndState+0x26>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	711a      	strb	r2, [r3, #4]
	}

	return;
 800290c:	bf00      	nop
 800290e:	bf00      	nop
}
 8002910:	370c      	adds	r7, #12
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
	...

0800291c <interpolatorInit>:
FIFO_StructDef fifoBufSteps;

/** Инициализация структура интерполятора
 */
void interpolatorInit(INTERPOLATOR_StructDef* interpolator)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
	interpolator->_workState = INTERPOLATOR_READY;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	701a      	strb	r2, [r3, #0]

	fifoInit(&fifoBufSteps, bufSteps, FIFO_STEPS_SIZE);
 800292a:	f44f 4248 	mov.w	r2, #51200	@ 0xc800
 800292e:	4904      	ldr	r1, [pc, #16]	@ (8002940 <interpolatorInit+0x24>)
 8002930:	4804      	ldr	r0, [pc, #16]	@ (8002944 <interpolatorInit+0x28>)
 8002932:	f7ff fc5b 	bl	80021ec <fifoInit>
}
 8002936:	bf00      	nop
 8002938:	3708      	adds	r7, #8
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	20001020 	.word	0x20001020
 8002944:	2000d820 	.word	0x2000d820

08002948 <setLine>:

/** Функция определения параметров отрезка
 */
handler_interpolator_state_t setLine(LINE_StructDef* line, double Xk, double Yk)
{
 8002948:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800294c:	b088      	sub	sp, #32
 800294e:	af00      	add	r7, sp, #0
 8002950:	61f8      	str	r0, [r7, #28]
 8002952:	ed87 0b04 	vstr	d0, [r7, #16]
 8002956:	ed87 1b02 	vstr	d1, [r7, #8]
    /* Координаты отрезка в абсолютных координатах (мм) */
    line->X0 = X;
 800295a:	4b95      	ldr	r3, [pc, #596]	@ (8002bb0 <setLine+0x268>)
 800295c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002960:	69f9      	ldr	r1, [r7, #28]
 8002962:	e9c1 2300 	strd	r2, r3, [r1]
    line->Y0 = Y;
 8002966:	4b93      	ldr	r3, [pc, #588]	@ (8002bb4 <setLine+0x26c>)
 8002968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800296c:	69f9      	ldr	r1, [r7, #28]
 800296e:	e9c1 2302 	strd	r2, r3, [r1, #8]
    line->Xk = Xk;
 8002972:	69f9      	ldr	r1, [r7, #28]
 8002974:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002978:	e9c1 2304 	strd	r2, r3, [r1, #16]
    line->Yk = Yk;
 800297c:	69f9      	ldr	r1, [r7, #28]
 800297e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002982:	e9c1 2306 	strd	r2, r3, [r1, #24]

    /* Проверка существования прямой */
    if(fabs(X - Xk) <= MM_PER_STEP && fabs(Y - Yk) <= MM_PER_STEP) return INTERPOLATOR_ERROR;
 8002986:	4b8a      	ldr	r3, [pc, #552]	@ (8002bb0 <setLine+0x268>)
 8002988:	e9d3 0100 	ldrd	r0, r1, [r3]
 800298c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002990:	f7fd fc8a 	bl	80002a8 <__aeabi_dsub>
 8002994:	4602      	mov	r2, r0
 8002996:	460b      	mov	r3, r1
 8002998:	603a      	str	r2, [r7, #0]
 800299a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800299e:	607b      	str	r3, [r7, #4]
 80029a0:	a381      	add	r3, pc, #516	@ (adr r3, 8002ba8 <setLine+0x260>)
 80029a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80029aa:	f7fe f8b1 	bl	8000b10 <__aeabi_dcmple>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d018      	beq.n	80029e6 <setLine+0x9e>
 80029b4:	4b7f      	ldr	r3, [pc, #508]	@ (8002bb4 <setLine+0x26c>)
 80029b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80029ba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80029be:	f7fd fc73 	bl	80002a8 <__aeabi_dsub>
 80029c2:	4602      	mov	r2, r0
 80029c4:	460b      	mov	r3, r1
 80029c6:	4692      	mov	sl, r2
 80029c8:	f023 4b00 	bic.w	fp, r3, #2147483648	@ 0x80000000
 80029cc:	a376      	add	r3, pc, #472	@ (adr r3, 8002ba8 <setLine+0x260>)
 80029ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029d2:	4650      	mov	r0, sl
 80029d4:	4659      	mov	r1, fp
 80029d6:	f7fe f89b 	bl	8000b10 <__aeabi_dcmple>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d002      	beq.n	80029e6 <setLine+0x9e>
 80029e0:	f04f 33ff 	mov.w	r3, #4294967295
 80029e4:	e144      	b.n	8002c70 <setLine+0x328>

    /* Определение смещения по осям */
    line->dX = line->Xk - line->X0;
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029f2:	f7fd fc59 	bl	80002a8 <__aeabi_dsub>
 80029f6:	4602      	mov	r2, r0
 80029f8:	460b      	mov	r3, r1
 80029fa:	69f9      	ldr	r1, [r7, #28]
 80029fc:	e9c1 2308 	strd	r2, r3, [r1, #32]
    line->dY = line->Yk - line->Y0;
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002a0c:	f7fd fc4c 	bl	80002a8 <__aeabi_dsub>
 8002a10:	4602      	mov	r2, r0
 8002a12:	460b      	mov	r3, r1
 8002a14:	69f9      	ldr	r1, [r7, #28]
 8002a16:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28

    /* Определение координат станка в относительной СК начала отрезка (мм) */
    line->x_rel = x * MM_PER_STEP - line->X0;
 8002a1a:	4b67      	ldr	r3, [pc, #412]	@ (8002bb8 <setLine+0x270>)
 8002a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a20:	4610      	mov	r0, r2
 8002a22:	4619      	mov	r1, r3
 8002a24:	f7fe fa10 	bl	8000e48 <__aeabi_l2f>
 8002a28:	ee07 0a10 	vmov	s14, r0
 8002a2c:	eddf 7a63 	vldr	s15, [pc, #396]	@ 8002bbc <setLine+0x274>
 8002a30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a34:	ee17 0a90 	vmov	r0, s15
 8002a38:	f7fd fd96 	bl	8000568 <__aeabi_f2d>
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a42:	f7fd fc31 	bl	80002a8 <__aeabi_dsub>
 8002a46:	4602      	mov	r2, r0
 8002a48:	460b      	mov	r3, r1
 8002a4a:	69f9      	ldr	r1, [r7, #28]
 8002a4c:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    line->y_rel = y * MM_PER_STEP - line->Y0;
 8002a50:	4b5b      	ldr	r3, [pc, #364]	@ (8002bc0 <setLine+0x278>)
 8002a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a56:	4610      	mov	r0, r2
 8002a58:	4619      	mov	r1, r3
 8002a5a:	f7fe f9f5 	bl	8000e48 <__aeabi_l2f>
 8002a5e:	ee07 0a10 	vmov	s14, r0
 8002a62:	eddf 7a56 	vldr	s15, [pc, #344]	@ 8002bbc <setLine+0x274>
 8002a66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a6a:	ee17 0a90 	vmov	r0, s15
 8002a6e:	f7fd fd7b 	bl	8000568 <__aeabi_f2d>
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002a78:	f7fd fc16 	bl	80002a8 <__aeabi_dsub>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	460b      	mov	r3, r1
 8002a80:	69f9      	ldr	r1, [r7, #28]
 8002a82:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38

    /* Начальное значения оценочной функции */
    line->F = line->dX * line->y_rel - line->dY * line->x_rel;
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8002a92:	f7fd fdc1 	bl	8000618 <__aeabi_dmul>
 8002a96:	4602      	mov	r2, r0
 8002a98:	460b      	mov	r3, r1
 8002a9a:	4692      	mov	sl, r2
 8002a9c:	469b      	mov	fp, r3
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8002aaa:	f7fd fdb5 	bl	8000618 <__aeabi_dmul>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	460b      	mov	r3, r1
 8002ab2:	4650      	mov	r0, sl
 8002ab4:	4659      	mov	r1, fp
 8002ab6:	f7fd fbf7 	bl	80002a8 <__aeabi_dsub>
 8002aba:	4602      	mov	r2, r0
 8002abc:	460b      	mov	r3, r1
 8002abe:	69f9      	ldr	r1, [r7, #28]
 8002ac0:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    /* Определение четверти, в которой расположен отрезок */
    if (line->dX >= 0 && line->dY > 0) { line->dx = 1; line->dy = 1; line->s = 1; }             	//< 1 четверть
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8002aca:	f04f 0200 	mov.w	r2, #0
 8002ace:	f04f 0300 	mov.w	r3, #0
 8002ad2:	f7fe f827 	bl	8000b24 <__aeabi_dcmpge>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d018      	beq.n	8002b0e <setLine+0x1c6>
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8002ae2:	f04f 0200 	mov.w	r2, #0
 8002ae6:	f04f 0300 	mov.w	r3, #0
 8002aea:	f7fe f825 	bl	8000b38 <__aeabi_dcmpgt>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d00c      	beq.n	8002b0e <setLine+0x1c6>
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8002b0c:	e07e      	b.n	8002c0c <setLine+0x2c4>
    else if (line->dY <= 0 && line->dX > 0) { line->dx = 1; line->dy = -1; line->s = -1; }       	//< 4 четверть
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8002b14:	f04f 0200 	mov.w	r2, #0
 8002b18:	f04f 0300 	mov.w	r3, #0
 8002b1c:	f7fd fff8 	bl	8000b10 <__aeabi_dcmple>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d018      	beq.n	8002b58 <setLine+0x210>
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8002b2c:	f04f 0200 	mov.w	r2, #0
 8002b30:	f04f 0300 	mov.w	r3, #0
 8002b34:	f7fe f800 	bl	8000b38 <__aeabi_dcmpgt>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d00c      	beq.n	8002b58 <setLine+0x210>
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	2201      	movs	r2, #1
 8002b42:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	22ff      	movs	r2, #255	@ 0xff
 8002b4a:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	22ff      	movs	r2, #255	@ 0xff
 8002b52:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8002b56:	e059      	b.n	8002c0c <setLine+0x2c4>
    else if (line->dX <= 0 && line->dY < 0) { line->dx = -1; line->dy = -1; line->s = 1; }      	//< 3 четверть
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8002b5e:	f04f 0200 	mov.w	r2, #0
 8002b62:	f04f 0300 	mov.w	r3, #0
 8002b66:	f7fd ffd3 	bl	8000b10 <__aeabi_dcmple>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d029      	beq.n	8002bc4 <setLine+0x27c>
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8002b76:	f04f 0200 	mov.w	r2, #0
 8002b7a:	f04f 0300 	mov.w	r3, #0
 8002b7e:	f7fd ffbd 	bl	8000afc <__aeabi_dcmplt>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d01d      	beq.n	8002bc4 <setLine+0x27c>
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	22ff      	movs	r2, #255	@ 0xff
 8002b8c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	22ff      	movs	r2, #255	@ 0xff
 8002b94:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8002ba0:	e034      	b.n	8002c0c <setLine+0x2c4>
 8002ba2:	bf00      	nop
 8002ba4:	f3af 8000 	nop.w
 8002ba8:	a0000000 	.word	0xa0000000
 8002bac:	3f799999 	.word	0x3f799999
 8002bb0:	20001010 	.word	0x20001010
 8002bb4:	20001018 	.word	0x20001018
 8002bb8:	20001000 	.word	0x20001000
 8002bbc:	3bcccccd 	.word	0x3bcccccd
 8002bc0:	20001008 	.word	0x20001008
    else if (line->dY >= 0 && line->dX < 0) { line->dx = -1; line->dy = 1; line->s = -1; }       	//< 2 четверть
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8002bca:	f04f 0200 	mov.w	r2, #0
 8002bce:	f04f 0300 	mov.w	r3, #0
 8002bd2:	f7fd ffa7 	bl	8000b24 <__aeabi_dcmpge>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d017      	beq.n	8002c0c <setLine+0x2c4>
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8002be2:	f04f 0200 	mov.w	r2, #0
 8002be6:	f04f 0300 	mov.w	r3, #0
 8002bea:	f7fd ff87 	bl	8000afc <__aeabi_dcmplt>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d00b      	beq.n	8002c0c <setLine+0x2c4>
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	22ff      	movs	r2, #255	@ 0xff
 8002bf8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	22ff      	movs	r2, #255	@ 0xff
 8002c08:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Определение угла между отрезком и осью OX (радианы) */
    if (fabs(line->dX) <= MM_PER_STEP)
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002c12:	4690      	mov	r8, r2
 8002c14:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8002c18:	a319      	add	r3, pc, #100	@ (adr r3, 8002c80 <setLine+0x338>)
 8002c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c1e:	4640      	mov	r0, r8
 8002c20:	4649      	mov	r1, r9
 8002c22:	f7fd ff75 	bl	8000b10 <__aeabi_dcmple>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d006      	beq.n	8002c3a <setLine+0x2f2>
    {
        line->alfa = M_PI_2;
 8002c2c:	69f9      	ldr	r1, [r7, #28]
 8002c2e:	a316      	add	r3, pc, #88	@ (adr r3, 8002c88 <setLine+0x340>)
 8002c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c34:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 8002c38:	e019      	b.n	8002c6e <setLine+0x326>
    }
    else line->alfa = fabs(atan(line->dY / line->dX));
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002c46:	f7fd fe11 	bl	800086c <__aeabi_ddiv>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	460b      	mov	r3, r1
 8002c4e:	ec43 2b17 	vmov	d7, r2, r3
 8002c52:	eeb0 0a47 	vmov.f32	s0, s14
 8002c56:	eef0 0a67 	vmov.f32	s1, s15
 8002c5a:	f016 fe1d 	bl	8019898 <atan>
 8002c5e:	ec53 2b10 	vmov	r2, r3, d0
 8002c62:	4614      	mov	r4, r2
 8002c64:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	e9c3 4514 	strd	r4, r5, [r3, #80]	@ 0x50

    return INTERPOLATOR_DONE;
 8002c6e:	2300      	movs	r3, #0
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3720      	adds	r7, #32
 8002c74:	46bd      	mov	sp, r7
 8002c76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c7a:	bf00      	nop
 8002c7c:	f3af 8000 	nop.w
 8002c80:	a0000000 	.word	0xa0000000
 8002c84:	3f799999 	.word	0x3f799999
 8002c88:	54442d18 	.word	0x54442d18
 8002c8c:	3ff921fb 	.word	0x3ff921fb

08002c90 <setArc>:

/** Функция определения параметров дуги
 */
handler_interpolator_state_t setArc(ARC_StructDef* arc, double Xk, double Yk, double I, double J, int8_t dir)
{
 8002c90:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002c94:	b08a      	sub	sp, #40	@ 0x28
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6278      	str	r0, [r7, #36]	@ 0x24
 8002c9a:	ed87 0b06 	vstr	d0, [r7, #24]
 8002c9e:	ed87 1b04 	vstr	d1, [r7, #16]
 8002ca2:	ed87 2b02 	vstr	d2, [r7, #8]
 8002ca6:	ed87 3b00 	vstr	d3, [r7]
 8002caa:	460b      	mov	r3, r1
 8002cac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    /* Координаты точек дуги в абсолютной СК (мм) */
    arc->X0 = X;
 8002cb0:	4ba3      	ldr	r3, [pc, #652]	@ (8002f40 <setArc+0x2b0>)
 8002cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cb6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002cb8:	e9c1 2300 	strd	r2, r3, [r1]
    arc->Y0 = Y;
 8002cbc:	4ba1      	ldr	r3, [pc, #644]	@ (8002f44 <setArc+0x2b4>)
 8002cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cc2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002cc4:	e9c1 2302 	strd	r2, r3, [r1, #8]
    arc->Xk = Xk;
 8002cc8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002cca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cce:	e9c1 2304 	strd	r2, r3, [r1, #16]
    arc->Yk = Yk;
 8002cd2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002cd4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002cd8:	e9c1 2306 	strd	r2, r3, [r1, #24]
    arc->Xc = arc->X0 + I;
 8002cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cde:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ce2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ce6:	f7fd fae1 	bl	80002ac <__adddf3>
 8002cea:	4602      	mov	r2, r0
 8002cec:	460b      	mov	r3, r1
 8002cee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002cf0:	e9c1 2308 	strd	r2, r3, [r1, #32]
    arc->Yc = arc->Y0 + J;
 8002cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cf6:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002cfa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002cfe:	f7fd fad5 	bl	80002ac <__adddf3>
 8002d02:	4602      	mov	r2, r0
 8002d04:	460b      	mov	r3, r1
 8002d06:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002d08:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28

    /* Проверка существования дуги */
    if (fabs(X - Xk) <= MM_PER_STEP && fabs(Y - Yk) <= MM_PER_STEP) return INTERPOLATOR_ERROR;
 8002d0c:	4b8c      	ldr	r3, [pc, #560]	@ (8002f40 <setArc+0x2b0>)
 8002d0e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002d12:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d16:	f7fd fac7 	bl	80002a8 <__aeabi_dsub>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	460b      	mov	r3, r1
 8002d1e:	4690      	mov	r8, r2
 8002d20:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8002d24:	a384      	add	r3, pc, #528	@ (adr r3, 8002f38 <setArc+0x2a8>)
 8002d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d2a:	4640      	mov	r0, r8
 8002d2c:	4649      	mov	r1, r9
 8002d2e:	f7fd feef 	bl	8000b10 <__aeabi_dcmple>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d018      	beq.n	8002d6a <setArc+0xda>
 8002d38:	4b82      	ldr	r3, [pc, #520]	@ (8002f44 <setArc+0x2b4>)
 8002d3a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002d3e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002d42:	f7fd fab1 	bl	80002a8 <__aeabi_dsub>
 8002d46:	4602      	mov	r2, r0
 8002d48:	460b      	mov	r3, r1
 8002d4a:	4614      	mov	r4, r2
 8002d4c:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8002d50:	a379      	add	r3, pc, #484	@ (adr r3, 8002f38 <setArc+0x2a8>)
 8002d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d56:	4620      	mov	r0, r4
 8002d58:	4629      	mov	r1, r5
 8002d5a:	f7fd fed9 	bl	8000b10 <__aeabi_dcmple>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d002      	beq.n	8002d6a <setArc+0xda>
 8002d64:	f04f 33ff 	mov.w	r3, #4294967295
 8002d68:	e185      	b.n	8003076 <setArc+0x3e6>

    /* Переход в относительную систему координаты центра дуги (мм) */
    arc->x_rel = x * MM_PER_STEP - arc->Xc;
 8002d6a:	4b77      	ldr	r3, [pc, #476]	@ (8002f48 <setArc+0x2b8>)
 8002d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d70:	4610      	mov	r0, r2
 8002d72:	4619      	mov	r1, r3
 8002d74:	f7fe f868 	bl	8000e48 <__aeabi_l2f>
 8002d78:	ee07 0a10 	vmov	s14, r0
 8002d7c:	eddf 7a73 	vldr	s15, [pc, #460]	@ 8002f4c <setArc+0x2bc>
 8002d80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d84:	ee17 0a90 	vmov	r0, s15
 8002d88:	f7fd fbee 	bl	8000568 <__aeabi_f2d>
 8002d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d8e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002d92:	f7fd fa89 	bl	80002a8 <__aeabi_dsub>
 8002d96:	4602      	mov	r2, r0
 8002d98:	460b      	mov	r3, r1
 8002d9a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002d9c:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    arc->y_rel = y * MM_PER_STEP - arc->Yc;
 8002da0:	4b6b      	ldr	r3, [pc, #428]	@ (8002f50 <setArc+0x2c0>)
 8002da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002da6:	4610      	mov	r0, r2
 8002da8:	4619      	mov	r1, r3
 8002daa:	f7fe f84d 	bl	8000e48 <__aeabi_l2f>
 8002dae:	ee07 0a10 	vmov	s14, r0
 8002db2:	eddf 7a66 	vldr	s15, [pc, #408]	@ 8002f4c <setArc+0x2bc>
 8002db6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dba:	ee17 0a90 	vmov	r0, s15
 8002dbe:	f7fd fbd3 	bl	8000568 <__aeabi_f2d>
 8002dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dc4:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8002dc8:	f7fd fa6e 	bl	80002a8 <__aeabi_dsub>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	460b      	mov	r3, r1
 8002dd0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002dd2:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    arc->X0 -= arc->Xc;
 8002dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dd8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dde:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002de2:	f7fd fa61 	bl	80002a8 <__aeabi_dsub>
 8002de6:	4602      	mov	r2, r0
 8002de8:	460b      	mov	r3, r1
 8002dea:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002dec:	e9c1 2300 	strd	r2, r3, [r1]
    arc->Y0 -= arc->Yc;
 8002df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002df2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002df8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8002dfc:	f7fd fa54 	bl	80002a8 <__aeabi_dsub>
 8002e00:	4602      	mov	r2, r0
 8002e02:	460b      	mov	r3, r1
 8002e04:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002e06:	e9c1 2302 	strd	r2, r3, [r1, #8]
    arc->Xk -= arc->Xc;
 8002e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e0c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e12:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002e16:	f7fd fa47 	bl	80002a8 <__aeabi_dsub>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002e20:	e9c1 2304 	strd	r2, r3, [r1, #16]
    arc->Yk -= arc->Yc;
 8002e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e26:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e2c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8002e30:	f7fd fa3a 	bl	80002a8 <__aeabi_dsub>
 8002e34:	4602      	mov	r2, r0
 8002e36:	460b      	mov	r3, r1
 8002e38:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002e3a:	e9c1 2306 	strd	r2, r3, [r1, #24]

    /* Квадрат радиуса дуги (мм^2) */
    arc->R2 = I * I + J * J;
 8002e3e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e42:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002e46:	f7fd fbe7 	bl	8000618 <__aeabi_dmul>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	460b      	mov	r3, r1
 8002e4e:	4614      	mov	r4, r2
 8002e50:	461d      	mov	r5, r3
 8002e52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e56:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002e5a:	f7fd fbdd 	bl	8000618 <__aeabi_dmul>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	460b      	mov	r3, r1
 8002e62:	4620      	mov	r0, r4
 8002e64:	4629      	mov	r1, r5
 8002e66:	f7fd fa21 	bl	80002ac <__adddf3>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002e70:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    /* Начальное значения оценочной функции */
    arc->F = arc->x_rel * arc->x_rel + arc->y_rel * arc->y_rel - arc->R2;
 8002e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e76:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8002e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e7c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8002e80:	f7fd fbca 	bl	8000618 <__aeabi_dmul>
 8002e84:	4602      	mov	r2, r0
 8002e86:	460b      	mov	r3, r1
 8002e88:	4614      	mov	r4, r2
 8002e8a:	461d      	mov	r5, r3
 8002e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e8e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8002e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e94:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8002e98:	f7fd fbbe 	bl	8000618 <__aeabi_dmul>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	460b      	mov	r3, r1
 8002ea0:	4620      	mov	r0, r4
 8002ea2:	4629      	mov	r1, r5
 8002ea4:	f7fd fa02 	bl	80002ac <__adddf3>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	460b      	mov	r3, r1
 8002eac:	4610      	mov	r0, r2
 8002eae:	4619      	mov	r1, r3
 8002eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb2:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8002eb6:	f7fd f9f7 	bl	80002a8 <__aeabi_dsub>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	460b      	mov	r3, r1
 8002ebe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002ec0:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48

    /* Направление вращения по дуге 1 - по часовой стрелки, -1 - против */
    arc->dir = dir;
 8002ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec6:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8002eca:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53

    /* Определение четверти, в которой расположено начало дуги */
    if (arc->x_rel >= 0 && arc->y_rel > 0) { arc->dx = 1 * arc->dir; arc->dy = -1 * arc->dir; arc->s = -1 * arc->dir; }             //< 1 четверть
 8002ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed0:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8002ed4:	f04f 0200 	mov.w	r2, #0
 8002ed8:	f04f 0300 	mov.w	r3, #0
 8002edc:	f7fd fe22 	bl	8000b24 <__aeabi_dcmpge>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d036      	beq.n	8002f54 <setArc+0x2c4>
 8002ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ee8:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8002eec:	f04f 0200 	mov.w	r2, #0
 8002ef0:	f04f 0300 	mov.w	r3, #0
 8002ef4:	f7fd fe20 	bl	8000b38 <__aeabi_dcmpgt>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d02a      	beq.n	8002f54 <setArc+0x2c4>
 8002efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f00:	f993 2053 	ldrsb.w	r2, [r3, #83]	@ 0x53
 8002f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f0c:	f993 3053 	ldrsb.w	r3, [r3, #83]	@ 0x53
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	425b      	negs	r3, r3
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	b25a      	sxtb	r2, r3
 8002f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f1a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8002f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f20:	f993 3053 	ldrsb.w	r3, [r3, #83]	@ 0x53
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	425b      	negs	r3, r3
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	b25a      	sxtb	r2, r3
 8002f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f2e:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
 8002f32:	e09f      	b.n	8003074 <setArc+0x3e4>
 8002f34:	f3af 8000 	nop.w
 8002f38:	a0000000 	.word	0xa0000000
 8002f3c:	3f799999 	.word	0x3f799999
 8002f40:	20001010 	.word	0x20001010
 8002f44:	20001018 	.word	0x20001018
 8002f48:	20001000 	.word	0x20001000
 8002f4c:	3bcccccd 	.word	0x3bcccccd
 8002f50:	20001008 	.word	0x20001008
    else if (arc->y_rel <= 0 && arc->x_rel > 0) { arc->dx = -1 * arc->dir; arc->dy = -1 * arc->dir; arc->s = 1 * arc->dir; }        //< 4 четверть
 8002f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f56:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8002f5a:	f04f 0200 	mov.w	r2, #0
 8002f5e:	f04f 0300 	mov.w	r3, #0
 8002f62:	f7fd fdd5 	bl	8000b10 <__aeabi_dcmple>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d026      	beq.n	8002fba <setArc+0x32a>
 8002f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f6e:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8002f72:	f04f 0200 	mov.w	r2, #0
 8002f76:	f04f 0300 	mov.w	r3, #0
 8002f7a:	f7fd fddd 	bl	8000b38 <__aeabi_dcmpgt>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d01a      	beq.n	8002fba <setArc+0x32a>
 8002f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f86:	f993 3053 	ldrsb.w	r3, [r3, #83]	@ 0x53
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	425b      	negs	r3, r3
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	b25a      	sxtb	r2, r3
 8002f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f94:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f9a:	f993 3053 	ldrsb.w	r3, [r3, #83]	@ 0x53
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	425b      	negs	r3, r3
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	b25a      	sxtb	r2, r3
 8002fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fa8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8002fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fae:	f993 2053 	ldrsb.w	r2, [r3, #83]	@ 0x53
 8002fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb4:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
 8002fb8:	e05c      	b.n	8003074 <setArc+0x3e4>
    else if (arc->x_rel <= 0 && arc->y_rel < 0) { arc->dx = -1 * arc->dir; arc->dy = 1 * arc->dir; arc->s = -1 * arc->dir; }        //< 3 четверть
 8002fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fbc:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8002fc0:	f04f 0200 	mov.w	r2, #0
 8002fc4:	f04f 0300 	mov.w	r3, #0
 8002fc8:	f7fd fda2 	bl	8000b10 <__aeabi_dcmple>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d026      	beq.n	8003020 <setArc+0x390>
 8002fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd4:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8002fd8:	f04f 0200 	mov.w	r2, #0
 8002fdc:	f04f 0300 	mov.w	r3, #0
 8002fe0:	f7fd fd8c 	bl	8000afc <__aeabi_dcmplt>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d01a      	beq.n	8003020 <setArc+0x390>
 8002fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fec:	f993 3053 	ldrsb.w	r3, [r3, #83]	@ 0x53
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	425b      	negs	r3, r3
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	b25a      	sxtb	r2, r3
 8002ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ffa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003000:	f993 2053 	ldrsb.w	r2, [r3, #83]	@ 0x53
 8003004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003006:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 800300a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800300c:	f993 3053 	ldrsb.w	r3, [r3, #83]	@ 0x53
 8003010:	b2db      	uxtb	r3, r3
 8003012:	425b      	negs	r3, r3
 8003014:	b2db      	uxtb	r3, r3
 8003016:	b25a      	sxtb	r2, r3
 8003018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800301a:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
 800301e:	e029      	b.n	8003074 <setArc+0x3e4>
    else if (arc->y_rel >= 0 && arc->x_rel < 0) { arc->dx = 1 * arc->dir; arc->dy = 1 * arc->dir; arc->s = 1 * arc->dir; }          //< 2 четверть
 8003020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003022:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8003026:	f04f 0200 	mov.w	r2, #0
 800302a:	f04f 0300 	mov.w	r3, #0
 800302e:	f7fd fd79 	bl	8000b24 <__aeabi_dcmpge>
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d01d      	beq.n	8003074 <setArc+0x3e4>
 8003038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800303a:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 800303e:	f04f 0200 	mov.w	r2, #0
 8003042:	f04f 0300 	mov.w	r3, #0
 8003046:	f7fd fd59 	bl	8000afc <__aeabi_dcmplt>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d011      	beq.n	8003074 <setArc+0x3e4>
 8003050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003052:	f993 2053 	ldrsb.w	r2, [r3, #83]	@ 0x53
 8003056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003058:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800305c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800305e:	f993 2053 	ldrsb.w	r2, [r3, #83]	@ 0x53
 8003062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003064:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8003068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800306a:	f993 2053 	ldrsb.w	r2, [r3, #83]	@ 0x53
 800306e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003070:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52

    return INTERPOLATOR_DONE;
 8003074:	2300      	movs	r3, #0
}
 8003076:	4618      	mov	r0, r3
 8003078:	3728      	adds	r7, #40	@ 0x28
 800307a:	46bd      	mov	sp, r7
 800307c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08003080 <handlerLine>:

/** Обработчик команды G01 - интерполяционное движение по прямой (оценочная функция)
 */
handler_interpolator_state_t handlerLine(INTERPOLATOR_StructDef* interpolator, FIFO_StructDef* buf, LINE_StructDef* line, uint8_t axis1, uint8_t axis2)
{
 8003080:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003084:	b094      	sub	sp, #80	@ 0x50
 8003086:	af00      	add	r7, sp, #0
 8003088:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800308a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800308c:	647a      	str	r2, [r7, #68]	@ 0x44
 800308e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
	if(interpolator->_workState == INTERPOLATOR_READY && availableForWrite(buf) == FIFO_OK)
 8003092:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003094:	f993 3000 	ldrsb.w	r3, [r3]
 8003098:	2b01      	cmp	r3, #1
 800309a:	f040 81c2 	bne.w	8003422 <handlerLine+0x3a2>
 800309e:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80030a0:	f7ff f934 	bl	800230c <availableForWrite>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	f040 81bb 	bne.w	8003422 <handlerLine+0x3a2>
	{
		interpolator->_workState = INTERPOLATOR_PROCESSING;
 80030ac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80030ae:	2302      	movs	r3, #2
 80030b0:	7013      	strb	r3, [r2, #0]

		/* Основные вычисления на основе анализа знака оценочной функции */
		if (fabs(line->F) <= EPS)
 80030b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030b4:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80030b8:	4614      	mov	r4, r2
 80030ba:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 80030be:	a380      	add	r3, pc, #512	@ (adr r3, 80032c0 <handlerLine+0x240>)
 80030c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030c4:	4620      	mov	r0, r4
 80030c6:	4629      	mov	r1, r5
 80030c8:	f7fd fd22 	bl	8000b10 <__aeabi_dcmple>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	f000 808f 	beq.w	80031f2 <handlerLine+0x172>
		{
			if (line->alfa < M_PI_4)
 80030d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030d6:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 80030da:	a37b      	add	r3, pc, #492	@ (adr r3, 80032c8 <handlerLine+0x248>)
 80030dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030e0:	f7fd fd0c 	bl	8000afc <__aeabi_dcmplt>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d041      	beq.n	800316e <handlerLine+0xee>
			{
				line->x_rel += line->dx * MM_PER_STEP;
 80030ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030ec:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 80030f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030f2:	f993 3048 	ldrsb.w	r3, [r3, #72]	@ 0x48
 80030f6:	ee07 3a90 	vmov	s15, r3
 80030fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030fe:	ed9f 7a74 	vldr	s14, [pc, #464]	@ 80032d0 <handlerLine+0x250>
 8003102:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003106:	ee17 0a90 	vmov	r0, s15
 800310a:	f7fd fa2d 	bl	8000568 <__aeabi_f2d>
 800310e:	4602      	mov	r2, r0
 8003110:	460b      	mov	r3, r1
 8003112:	4620      	mov	r0, r4
 8003114:	4629      	mov	r1, r5
 8003116:	f7fd f8c9 	bl	80002ac <__adddf3>
 800311a:	4602      	mov	r2, r0
 800311c:	460b      	mov	r3, r1
 800311e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003120:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
				x += line->dx;
 8003124:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003126:	f993 3048 	ldrsb.w	r3, [r3, #72]	@ 0x48
 800312a:	b25b      	sxtb	r3, r3
 800312c:	17da      	asrs	r2, r3, #31
 800312e:	469a      	mov	sl, r3
 8003130:	4693      	mov	fp, r2
 8003132:	4b61      	ldr	r3, [pc, #388]	@ (80032b8 <handlerLine+0x238>)
 8003134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003138:	eb1a 0102 	adds.w	r1, sl, r2
 800313c:	63b9      	str	r1, [r7, #56]	@ 0x38
 800313e:	eb4b 0303 	adc.w	r3, fp, r3
 8003142:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003144:	4b5c      	ldr	r3, [pc, #368]	@ (80032b8 <handlerLine+0x238>)
 8003146:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800314a:	e9c3 1200 	strd	r1, r2, [r3]

				fifoWrite(buf, setStepsBin(axis1, line->dx));
 800314e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003150:	f993 2048 	ldrsb.w	r2, [r3, #72]	@ 0x48
 8003154:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8003158:	4611      	mov	r1, r2
 800315a:	4618      	mov	r0, r3
 800315c:	f000 fc3a 	bl	80039d4 <setStepsBin>
 8003160:	4603      	mov	r3, r0
 8003162:	b25b      	sxtb	r3, r3
 8003164:	4619      	mov	r1, r3
 8003166:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8003168:	f7ff f8e1 	bl	800232e <fifoWrite>
 800316c:	e0f6      	b.n	800335c <handlerLine+0x2dc>
			}
			else
			{
				line->y_rel += line->dy * MM_PER_STEP;
 800316e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003170:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 8003174:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003176:	f993 3049 	ldrsb.w	r3, [r3, #73]	@ 0x49
 800317a:	ee07 3a90 	vmov	s15, r3
 800317e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003182:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 80032d0 <handlerLine+0x250>
 8003186:	ee67 7a87 	vmul.f32	s15, s15, s14
 800318a:	ee17 0a90 	vmov	r0, s15
 800318e:	f7fd f9eb 	bl	8000568 <__aeabi_f2d>
 8003192:	4602      	mov	r2, r0
 8003194:	460b      	mov	r3, r1
 8003196:	4620      	mov	r0, r4
 8003198:	4629      	mov	r1, r5
 800319a:	f7fd f887 	bl	80002ac <__adddf3>
 800319e:	4602      	mov	r2, r0
 80031a0:	460b      	mov	r3, r1
 80031a2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80031a4:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
				y += line->dy;
 80031a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80031aa:	f993 3049 	ldrsb.w	r3, [r3, #73]	@ 0x49
 80031ae:	b25b      	sxtb	r3, r3
 80031b0:	17da      	asrs	r2, r3, #31
 80031b2:	4698      	mov	r8, r3
 80031b4:	4691      	mov	r9, r2
 80031b6:	4b41      	ldr	r3, [pc, #260]	@ (80032bc <handlerLine+0x23c>)
 80031b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031bc:	eb18 0102 	adds.w	r1, r8, r2
 80031c0:	6339      	str	r1, [r7, #48]	@ 0x30
 80031c2:	eb49 0303 	adc.w	r3, r9, r3
 80031c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80031c8:	4b3c      	ldr	r3, [pc, #240]	@ (80032bc <handlerLine+0x23c>)
 80031ca:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80031ce:	e9c3 1200 	strd	r1, r2, [r3]

				fifoWrite(buf, setStepsBin(axis2, line->dy));
 80031d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80031d4:	f993 2049 	ldrsb.w	r2, [r3, #73]	@ 0x49
 80031d8:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 80031dc:	4611      	mov	r1, r2
 80031de:	4618      	mov	r0, r3
 80031e0:	f000 fbf8 	bl	80039d4 <setStepsBin>
 80031e4:	4603      	mov	r3, r0
 80031e6:	b25b      	sxtb	r3, r3
 80031e8:	4619      	mov	r1, r3
 80031ea:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80031ec:	f7ff f89f 	bl	800232e <fifoWrite>
 80031f0:	e0b4      	b.n	800335c <handlerLine+0x2dc>
			}
		}
		else
		{
			if (line->F * line->s > 0)
 80031f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80031f4:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 80031f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80031fa:	f993 3058 	ldrsb.w	r3, [r3, #88]	@ 0x58
 80031fe:	4618      	mov	r0, r3
 8003200:	f7fd f9a0 	bl	8000544 <__aeabi_i2d>
 8003204:	4602      	mov	r2, r0
 8003206:	460b      	mov	r3, r1
 8003208:	4620      	mov	r0, r4
 800320a:	4629      	mov	r1, r5
 800320c:	f7fd fa04 	bl	8000618 <__aeabi_dmul>
 8003210:	4602      	mov	r2, r0
 8003212:	460b      	mov	r3, r1
 8003214:	4610      	mov	r0, r2
 8003216:	4619      	mov	r1, r3
 8003218:	f04f 0200 	mov.w	r2, #0
 800321c:	f04f 0300 	mov.w	r3, #0
 8003220:	f7fd fc8a 	bl	8000b38 <__aeabi_dcmpgt>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d054      	beq.n	80032d4 <handlerLine+0x254>
			{
				line->x_rel += line->dx * MM_PER_STEP;
 800322a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800322c:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8003230:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003232:	f993 3048 	ldrsb.w	r3, [r3, #72]	@ 0x48
 8003236:	ee07 3a90 	vmov	s15, r3
 800323a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800323e:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 80032d0 <handlerLine+0x250>
 8003242:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003246:	ee17 0a90 	vmov	r0, s15
 800324a:	f7fd f98d 	bl	8000568 <__aeabi_f2d>
 800324e:	4602      	mov	r2, r0
 8003250:	460b      	mov	r3, r1
 8003252:	4620      	mov	r0, r4
 8003254:	4629      	mov	r1, r5
 8003256:	f7fd f829 	bl	80002ac <__adddf3>
 800325a:	4602      	mov	r2, r0
 800325c:	460b      	mov	r3, r1
 800325e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003260:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
				x += line->dx;
 8003264:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003266:	f993 3048 	ldrsb.w	r3, [r3, #72]	@ 0x48
 800326a:	b25b      	sxtb	r3, r3
 800326c:	17da      	asrs	r2, r3, #31
 800326e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003270:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003272:	4b11      	ldr	r3, [pc, #68]	@ (80032b8 <handlerLine+0x238>)
 8003274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003278:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 800327c:	4621      	mov	r1, r4
 800327e:	1889      	adds	r1, r1, r2
 8003280:	6239      	str	r1, [r7, #32]
 8003282:	4629      	mov	r1, r5
 8003284:	eb43 0101 	adc.w	r1, r3, r1
 8003288:	6279      	str	r1, [r7, #36]	@ 0x24
 800328a:	4b0b      	ldr	r3, [pc, #44]	@ (80032b8 <handlerLine+0x238>)
 800328c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003290:	e9c3 1200 	strd	r1, r2, [r3]

				fifoWrite(buf, setStepsBin(axis1, line->dx));
 8003294:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003296:	f993 2048 	ldrsb.w	r2, [r3, #72]	@ 0x48
 800329a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800329e:	4611      	mov	r1, r2
 80032a0:	4618      	mov	r0, r3
 80032a2:	f000 fb97 	bl	80039d4 <setStepsBin>
 80032a6:	4603      	mov	r3, r0
 80032a8:	b25b      	sxtb	r3, r3
 80032aa:	4619      	mov	r1, r3
 80032ac:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80032ae:	f7ff f83e 	bl	800232e <fifoWrite>
 80032b2:	e053      	b.n	800335c <handlerLine+0x2dc>
 80032b4:	f3af 8000 	nop.w
 80032b8:	20001000 	.word	0x20001000
 80032bc:	20001008 	.word	0x20001008
 80032c0:	e826d695 	.word	0xe826d695
 80032c4:	3e112e0b 	.word	0x3e112e0b
 80032c8:	54442d18 	.word	0x54442d18
 80032cc:	3fe921fb 	.word	0x3fe921fb
 80032d0:	3bcccccd 	.word	0x3bcccccd
			}
		        else
		        {
		            line->y_rel += line->dy * MM_PER_STEP;
 80032d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032d6:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 80032da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032dc:	f993 3049 	ldrsb.w	r3, [r3, #73]	@ 0x49
 80032e0:	ee07 3a90 	vmov	s15, r3
 80032e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032e8:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 80032d0 <handlerLine+0x250>
 80032ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032f0:	ee17 0a90 	vmov	r0, s15
 80032f4:	f7fd f938 	bl	8000568 <__aeabi_f2d>
 80032f8:	4602      	mov	r2, r0
 80032fa:	460b      	mov	r3, r1
 80032fc:	4620      	mov	r0, r4
 80032fe:	4629      	mov	r1, r5
 8003300:	f7fc ffd4 	bl	80002ac <__adddf3>
 8003304:	4602      	mov	r2, r0
 8003306:	460b      	mov	r3, r1
 8003308:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800330a:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
		            y += line->dy;
 800330e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003310:	f993 3049 	ldrsb.w	r3, [r3, #73]	@ 0x49
 8003314:	b25b      	sxtb	r3, r3
 8003316:	17da      	asrs	r2, r3, #31
 8003318:	61bb      	str	r3, [r7, #24]
 800331a:	61fa      	str	r2, [r7, #28]
 800331c:	4b46      	ldr	r3, [pc, #280]	@ (8003438 <handlerLine+0x3b8>)
 800331e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003322:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8003326:	4621      	mov	r1, r4
 8003328:	1889      	adds	r1, r1, r2
 800332a:	6139      	str	r1, [r7, #16]
 800332c:	4629      	mov	r1, r5
 800332e:	eb43 0101 	adc.w	r1, r3, r1
 8003332:	6179      	str	r1, [r7, #20]
 8003334:	4b40      	ldr	r3, [pc, #256]	@ (8003438 <handlerLine+0x3b8>)
 8003336:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800333a:	e9c3 1200 	strd	r1, r2, [r3]

		            fifoWrite(buf, setStepsBin(axis2, line->dy));
 800333e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003340:	f993 2049 	ldrsb.w	r2, [r3, #73]	@ 0x49
 8003344:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8003348:	4611      	mov	r1, r2
 800334a:	4618      	mov	r0, r3
 800334c:	f000 fb42 	bl	80039d4 <setStepsBin>
 8003350:	4603      	mov	r3, r0
 8003352:	b25b      	sxtb	r3, r3
 8003354:	4619      	mov	r1, r3
 8003356:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8003358:	f7fe ffe9 	bl	800232e <fifoWrite>
		        }
		}

		/* Пересчет оценочной функции */
		line->F = line->dX * line->y_rel - line->dY * line->x_rel;
 800335c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800335e:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8003362:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003364:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8003368:	f7fd f956 	bl	8000618 <__aeabi_dmul>
 800336c:	4602      	mov	r2, r0
 800336e:	460b      	mov	r3, r1
 8003370:	4614      	mov	r4, r2
 8003372:	461d      	mov	r5, r3
 8003374:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003376:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800337a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800337c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8003380:	f7fd f94a 	bl	8000618 <__aeabi_dmul>
 8003384:	4602      	mov	r2, r0
 8003386:	460b      	mov	r3, r1
 8003388:	4620      	mov	r0, r4
 800338a:	4629      	mov	r1, r5
 800338c:	f7fc ff8c 	bl	80002a8 <__aeabi_dsub>
 8003390:	4602      	mov	r2, r0
 8003392:	460b      	mov	r3, r1
 8003394:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003396:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

		/* Проверка достижения конечной точки */
		if ((fabs(line->x_rel - line->dX) < MM_PER_STEP) && (fabs(line->y_rel - line->dY) < MM_PER_STEP))
 800339a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800339c:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 80033a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80033a2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80033a6:	f7fc ff7f 	bl	80002a8 <__aeabi_dsub>
 80033aa:	4602      	mov	r2, r0
 80033ac:	460b      	mov	r3, r1
 80033ae:	60ba      	str	r2, [r7, #8]
 80033b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80033b4:	60fb      	str	r3, [r7, #12]
 80033b6:	a31e      	add	r3, pc, #120	@ (adr r3, 8003430 <handlerLine+0x3b0>)
 80033b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033bc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80033c0:	f7fd fb9c 	bl	8000afc <__aeabi_dcmplt>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d028      	beq.n	800341c <handlerLine+0x39c>
 80033ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80033cc:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 80033d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80033d2:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80033d6:	f7fc ff67 	bl	80002a8 <__aeabi_dsub>
 80033da:	4602      	mov	r2, r0
 80033dc:	460b      	mov	r3, r1
 80033de:	603a      	str	r2, [r7, #0]
 80033e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80033e4:	607b      	str	r3, [r7, #4]
 80033e6:	a312      	add	r3, pc, #72	@ (adr r3, 8003430 <handlerLine+0x3b0>)
 80033e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ec:	e9d7 0100 	ldrd	r0, r1, [r7]
 80033f0:	f7fd fb84 	bl	8000afc <__aeabi_dcmplt>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d010      	beq.n	800341c <handlerLine+0x39c>
		{
			X = line->Xk;
 80033fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80033fc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003400:	490e      	ldr	r1, [pc, #56]	@ (800343c <handlerLine+0x3bc>)
 8003402:	e9c1 2300 	strd	r2, r3, [r1]
			Y = line->Yk;
 8003406:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003408:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800340c:	490c      	ldr	r1, [pc, #48]	@ (8003440 <handlerLine+0x3c0>)
 800340e:	e9c1 2300 	strd	r2, r3, [r1]

			interpolator->_workState = INTERPOLATOR_READY;
 8003412:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003414:	2201      	movs	r2, #1
 8003416:	701a      	strb	r2, [r3, #0]
			return INTERPOLATOR_DONE;
 8003418:	2300      	movs	r3, #0
 800341a:	e003      	b.n	8003424 <handlerLine+0x3a4>
		}

		interpolator->_workState = INTERPOLATOR_READY;
 800341c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800341e:	2201      	movs	r2, #1
 8003420:	701a      	strb	r2, [r3, #0]
	}

	return INTERPOLATOR_PROCESSING;
 8003422:	2302      	movs	r3, #2
}
 8003424:	4618      	mov	r0, r3
 8003426:	3750      	adds	r7, #80	@ 0x50
 8003428:	46bd      	mov	sp, r7
 800342a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800342e:	bf00      	nop
 8003430:	a0000000 	.word	0xa0000000
 8003434:	3f799999 	.word	0x3f799999
 8003438:	20001008 	.word	0x20001008
 800343c:	20001010 	.word	0x20001010
 8003440:	20001018 	.word	0x20001018
 8003444:	00000000 	.word	0x00000000

08003448 <handlerArc>:

/** Обработчик команд G02, G03 - интерполяционное движение по окружности по/против часовой стрелке (оценочная функция)
 */
handler_interpolator_state_t handlerArc(INTERPOLATOR_StructDef* interpolator, FIFO_StructDef* buf, ARC_StructDef* arc, uint8_t axis1, uint8_t axis2)
{
 8003448:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800344c:	b098      	sub	sp, #96	@ 0x60
 800344e:	af00      	add	r7, sp, #0
 8003450:	65f8      	str	r0, [r7, #92]	@ 0x5c
 8003452:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003454:	657a      	str	r2, [r7, #84]	@ 0x54
 8003456:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
	if(interpolator->_workState == INTERPOLATOR_READY && availableForWrite(buf) == FIFO_OK)
 800345a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800345c:	f993 3000 	ldrsb.w	r3, [r3]
 8003460:	2b01      	cmp	r3, #1
 8003462:	f040 82b0 	bne.w	80039c6 <handlerArc+0x57e>
 8003466:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8003468:	f7fe ff50 	bl	800230c <availableForWrite>
 800346c:	4603      	mov	r3, r0
 800346e:	2b00      	cmp	r3, #0
 8003470:	f040 82a9 	bne.w	80039c6 <handlerArc+0x57e>
	{
		interpolator->_workState = INTERPOLATOR_PROCESSING;
 8003474:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003476:	2302      	movs	r3, #2
 8003478:	7013      	strb	r3, [r2, #0]

		/* Основные вычисления на основе анализа знака оценочной функции */
		if (arc->s == -1)
 800347a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800347c:	f993 3052 	ldrsb.w	r3, [r3, #82]	@ 0x52
 8003480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003484:	f040 809a 	bne.w	80035bc <handlerArc+0x174>
		{
			if (arc->F >= 0)
 8003488:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800348a:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 800348e:	f04f 0200 	mov.w	r2, #0
 8003492:	f04f 0300 	mov.w	r3, #0
 8003496:	f7fd fb45 	bl	8000b24 <__aeabi_dcmpge>
 800349a:	4603      	mov	r3, r0
 800349c:	2b00      	cmp	r3, #0
 800349e:	d046      	beq.n	800352e <handlerArc+0xe6>
			{
				arc->y_rel += arc->dy * MM_PER_STEP;
 80034a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034a2:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 80034a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034a8:	f993 3051 	ldrsb.w	r3, [r3, #81]	@ 0x51
 80034ac:	ee07 3a90 	vmov	s15, r3
 80034b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034b4:	ed9f 7a6b 	vldr	s14, [pc, #428]	@ 8003664 <handlerArc+0x21c>
 80034b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034bc:	ee17 0a90 	vmov	r0, s15
 80034c0:	f7fd f852 	bl	8000568 <__aeabi_f2d>
 80034c4:	4602      	mov	r2, r0
 80034c6:	460b      	mov	r3, r1
 80034c8:	4620      	mov	r0, r4
 80034ca:	4629      	mov	r1, r5
 80034cc:	f7fc feee 	bl	80002ac <__adddf3>
 80034d0:	4602      	mov	r2, r0
 80034d2:	460b      	mov	r3, r1
 80034d4:	4610      	mov	r0, r2
 80034d6:	4619      	mov	r1, r3
 80034d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034da:	e9c3 010e 	strd	r0, r1, [r3, #56]	@ 0x38
				y += arc->dy;
 80034de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034e0:	f993 3051 	ldrsb.w	r3, [r3, #81]	@ 0x51
 80034e4:	b25b      	sxtb	r3, r3
 80034e6:	17da      	asrs	r2, r3, #31
 80034e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80034ea:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80034ec:	4b5b      	ldr	r3, [pc, #364]	@ (800365c <handlerArc+0x214>)
 80034ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034f2:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 80034f6:	4621      	mov	r1, r4
 80034f8:	1889      	adds	r1, r1, r2
 80034fa:	6439      	str	r1, [r7, #64]	@ 0x40
 80034fc:	4629      	mov	r1, r5
 80034fe:	eb43 0101 	adc.w	r1, r3, r1
 8003502:	6479      	str	r1, [r7, #68]	@ 0x44
 8003504:	4b55      	ldr	r3, [pc, #340]	@ (800365c <handlerArc+0x214>)
 8003506:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800350a:	e9c3 1200 	strd	r1, r2, [r3]

				fifoWrite(buf, setStepsBin(axis2, arc->dy));
 800350e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003510:	f993 2051 	ldrsb.w	r2, [r3, #81]	@ 0x51
 8003514:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
 8003518:	4611      	mov	r1, r2
 800351a:	4618      	mov	r0, r3
 800351c:	f000 fa5a 	bl	80039d4 <setStepsBin>
 8003520:	4603      	mov	r3, r0
 8003522:	b25b      	sxtb	r3, r3
 8003524:	4619      	mov	r1, r3
 8003526:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8003528:	f7fe ff01 	bl	800232e <fifoWrite>
 800352c:	e0df      	b.n	80036ee <handlerArc+0x2a6>
			}
			else
			{
				arc->x_rel += arc->dx * MM_PER_STEP;
 800352e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003530:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8003534:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003536:	f993 3050 	ldrsb.w	r3, [r3, #80]	@ 0x50
 800353a:	ee07 3a90 	vmov	s15, r3
 800353e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003542:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8003664 <handlerArc+0x21c>
 8003546:	ee67 7a87 	vmul.f32	s15, s15, s14
 800354a:	ee17 0a90 	vmov	r0, s15
 800354e:	f7fd f80b 	bl	8000568 <__aeabi_f2d>
 8003552:	4602      	mov	r2, r0
 8003554:	460b      	mov	r3, r1
 8003556:	4620      	mov	r0, r4
 8003558:	4629      	mov	r1, r5
 800355a:	f7fc fea7 	bl	80002ac <__adddf3>
 800355e:	4602      	mov	r2, r0
 8003560:	460b      	mov	r3, r1
 8003562:	4610      	mov	r0, r2
 8003564:	4619      	mov	r1, r3
 8003566:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003568:	e9c3 010c 	strd	r0, r1, [r3, #48]	@ 0x30
				x += arc->dx;
 800356c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800356e:	f993 3050 	ldrsb.w	r3, [r3, #80]	@ 0x50
 8003572:	b25b      	sxtb	r3, r3
 8003574:	17da      	asrs	r2, r3, #31
 8003576:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003578:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800357a:	4b39      	ldr	r3, [pc, #228]	@ (8003660 <handlerArc+0x218>)
 800357c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003580:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8003584:	4621      	mov	r1, r4
 8003586:	1889      	adds	r1, r1, r2
 8003588:	6339      	str	r1, [r7, #48]	@ 0x30
 800358a:	4629      	mov	r1, r5
 800358c:	eb43 0101 	adc.w	r1, r3, r1
 8003590:	6379      	str	r1, [r7, #52]	@ 0x34
 8003592:	4b33      	ldr	r3, [pc, #204]	@ (8003660 <handlerArc+0x218>)
 8003594:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003598:	e9c3 1200 	strd	r1, r2, [r3]

				fifoWrite(buf, setStepsBin(axis1, arc->dx));
 800359c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800359e:	f993 2050 	ldrsb.w	r2, [r3, #80]	@ 0x50
 80035a2:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 80035a6:	4611      	mov	r1, r2
 80035a8:	4618      	mov	r0, r3
 80035aa:	f000 fa13 	bl	80039d4 <setStepsBin>
 80035ae:	4603      	mov	r3, r0
 80035b0:	b25b      	sxtb	r3, r3
 80035b2:	4619      	mov	r1, r3
 80035b4:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80035b6:	f7fe feba 	bl	800232e <fifoWrite>
 80035ba:	e098      	b.n	80036ee <handlerArc+0x2a6>
			}
		}
		else
		{
			if (arc->F >= 0)
 80035bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035be:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 80035c2:	f04f 0200 	mov.w	r2, #0
 80035c6:	f04f 0300 	mov.w	r3, #0
 80035ca:	f7fd faab 	bl	8000b24 <__aeabi_dcmpge>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d049      	beq.n	8003668 <handlerArc+0x220>
			{
				arc->x_rel += arc->dx * MM_PER_STEP;
 80035d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035d6:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 80035da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035dc:	f993 3050 	ldrsb.w	r3, [r3, #80]	@ 0x50
 80035e0:	ee07 3a90 	vmov	s15, r3
 80035e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035e8:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8003664 <handlerArc+0x21c>
 80035ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80035f0:	ee17 0a90 	vmov	r0, s15
 80035f4:	f7fc ffb8 	bl	8000568 <__aeabi_f2d>
 80035f8:	4602      	mov	r2, r0
 80035fa:	460b      	mov	r3, r1
 80035fc:	4620      	mov	r0, r4
 80035fe:	4629      	mov	r1, r5
 8003600:	f7fc fe54 	bl	80002ac <__adddf3>
 8003604:	4602      	mov	r2, r0
 8003606:	460b      	mov	r3, r1
 8003608:	4610      	mov	r0, r2
 800360a:	4619      	mov	r1, r3
 800360c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800360e:	e9c3 010c 	strd	r0, r1, [r3, #48]	@ 0x30
				x += arc->dx;
 8003612:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003614:	f993 3050 	ldrsb.w	r3, [r3, #80]	@ 0x50
 8003618:	b25b      	sxtb	r3, r3
 800361a:	17da      	asrs	r2, r3, #31
 800361c:	469a      	mov	sl, r3
 800361e:	4693      	mov	fp, r2
 8003620:	4b0f      	ldr	r3, [pc, #60]	@ (8003660 <handlerArc+0x218>)
 8003622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003626:	eb1a 0102 	adds.w	r1, sl, r2
 800362a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800362c:	eb4b 0303 	adc.w	r3, fp, r3
 8003630:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003632:	4b0b      	ldr	r3, [pc, #44]	@ (8003660 <handlerArc+0x218>)
 8003634:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003638:	e9c3 1200 	strd	r1, r2, [r3]

				fifoWrite(buf, setStepsBin(axis1, arc->dx));
 800363c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800363e:	f993 2050 	ldrsb.w	r2, [r3, #80]	@ 0x50
 8003642:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8003646:	4611      	mov	r1, r2
 8003648:	4618      	mov	r0, r3
 800364a:	f000 f9c3 	bl	80039d4 <setStepsBin>
 800364e:	4603      	mov	r3, r0
 8003650:	b25b      	sxtb	r3, r3
 8003652:	4619      	mov	r1, r3
 8003654:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8003656:	f7fe fe6a 	bl	800232e <fifoWrite>
 800365a:	e048      	b.n	80036ee <handlerArc+0x2a6>
 800365c:	20001008 	.word	0x20001008
 8003660:	20001000 	.word	0x20001000
 8003664:	3bcccccd 	.word	0x3bcccccd

			}
			else
			{
				arc->y_rel += arc->dy * MM_PER_STEP;
 8003668:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800366a:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 800366e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003670:	f993 3051 	ldrsb.w	r3, [r3, #81]	@ 0x51
 8003674:	ee07 3a90 	vmov	s15, r3
 8003678:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800367c:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8003664 <handlerArc+0x21c>
 8003680:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003684:	ee17 0a90 	vmov	r0, s15
 8003688:	f7fc ff6e 	bl	8000568 <__aeabi_f2d>
 800368c:	4602      	mov	r2, r0
 800368e:	460b      	mov	r3, r1
 8003690:	4620      	mov	r0, r4
 8003692:	4629      	mov	r1, r5
 8003694:	f7fc fe0a 	bl	80002ac <__adddf3>
 8003698:	4602      	mov	r2, r0
 800369a:	460b      	mov	r3, r1
 800369c:	4610      	mov	r0, r2
 800369e:	4619      	mov	r1, r3
 80036a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036a2:	e9c3 010e 	strd	r0, r1, [r3, #56]	@ 0x38
				y += arc->dy;
 80036a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036a8:	f993 3051 	ldrsb.w	r3, [r3, #81]	@ 0x51
 80036ac:	b25b      	sxtb	r3, r3
 80036ae:	17da      	asrs	r2, r3, #31
 80036b0:	4698      	mov	r8, r3
 80036b2:	4691      	mov	r9, r2
 80036b4:	4baa      	ldr	r3, [pc, #680]	@ (8003960 <handlerArc+0x518>)
 80036b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ba:	eb18 0102 	adds.w	r1, r8, r2
 80036be:	6239      	str	r1, [r7, #32]
 80036c0:	eb49 0303 	adc.w	r3, r9, r3
 80036c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80036c6:	4ba6      	ldr	r3, [pc, #664]	@ (8003960 <handlerArc+0x518>)
 80036c8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80036cc:	e9c3 1200 	strd	r1, r2, [r3]

				fifoWrite(buf, setStepsBin(axis2, arc->dy));
 80036d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036d2:	f993 2051 	ldrsb.w	r2, [r3, #81]	@ 0x51
 80036d6:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
 80036da:	4611      	mov	r1, r2
 80036dc:	4618      	mov	r0, r3
 80036de:	f000 f979 	bl	80039d4 <setStepsBin>
 80036e2:	4603      	mov	r3, r0
 80036e4:	b25b      	sxtb	r3, r3
 80036e6:	4619      	mov	r1, r3
 80036e8:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80036ea:	f7fe fe20 	bl	800232e <fifoWrite>
			}
		}

		/* Пересчет оценочной функции */
		arc->F = arc->x_rel * arc->x_rel + arc->y_rel * arc->y_rel - arc->R2;
 80036ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036f0:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 80036f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036f6:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80036fa:	f7fc ff8d 	bl	8000618 <__aeabi_dmul>
 80036fe:	4602      	mov	r2, r0
 8003700:	460b      	mov	r3, r1
 8003702:	4614      	mov	r4, r2
 8003704:	461d      	mov	r5, r3
 8003706:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003708:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800370c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800370e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8003712:	f7fc ff81 	bl	8000618 <__aeabi_dmul>
 8003716:	4602      	mov	r2, r0
 8003718:	460b      	mov	r3, r1
 800371a:	4620      	mov	r0, r4
 800371c:	4629      	mov	r1, r5
 800371e:	f7fc fdc5 	bl	80002ac <__adddf3>
 8003722:	4602      	mov	r2, r0
 8003724:	460b      	mov	r3, r1
 8003726:	4610      	mov	r0, r2
 8003728:	4619      	mov	r1, r3
 800372a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800372c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8003730:	f7fc fdba 	bl	80002a8 <__aeabi_dsub>
 8003734:	4602      	mov	r2, r0
 8003736:	460b      	mov	r3, r1
 8003738:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800373a:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48

		/* Проверка достижения конечной точки */
		if ((fabs(arc->x_rel - arc->Xk) < MM_PER_STEP) && (fabs(arc->y_rel - arc->Yk) < MM_PER_STEP))
 800373e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003740:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8003744:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003746:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800374a:	f7fc fdad 	bl	80002a8 <__aeabi_dsub>
 800374e:	4602      	mov	r2, r0
 8003750:	460b      	mov	r3, r1
 8003752:	61ba      	str	r2, [r7, #24]
 8003754:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003758:	61fb      	str	r3, [r7, #28]
 800375a:	a37f      	add	r3, pc, #508	@ (adr r3, 8003958 <handlerArc+0x510>)
 800375c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003760:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003764:	f7fd f9ca 	bl	8000afc <__aeabi_dcmplt>
 8003768:	4603      	mov	r3, r0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d036      	beq.n	80037dc <handlerArc+0x394>
 800376e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003770:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8003774:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003776:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800377a:	f7fc fd95 	bl	80002a8 <__aeabi_dsub>
 800377e:	4602      	mov	r2, r0
 8003780:	460b      	mov	r3, r1
 8003782:	613a      	str	r2, [r7, #16]
 8003784:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003788:	617b      	str	r3, [r7, #20]
 800378a:	a373      	add	r3, pc, #460	@ (adr r3, 8003958 <handlerArc+0x510>)
 800378c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003790:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003794:	f7fd f9b2 	bl	8000afc <__aeabi_dcmplt>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d01e      	beq.n	80037dc <handlerArc+0x394>
		{
			X = arc->Xk + arc->Xc;
 800379e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037a0:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80037a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037a6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80037aa:	f7fc fd7f 	bl	80002ac <__adddf3>
 80037ae:	4602      	mov	r2, r0
 80037b0:	460b      	mov	r3, r1
 80037b2:	496c      	ldr	r1, [pc, #432]	@ (8003964 <handlerArc+0x51c>)
 80037b4:	e9c1 2300 	strd	r2, r3, [r1]
			Y = arc->Yk + arc->Yc;
 80037b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037ba:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80037be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037c0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80037c4:	f7fc fd72 	bl	80002ac <__adddf3>
 80037c8:	4602      	mov	r2, r0
 80037ca:	460b      	mov	r3, r1
 80037cc:	4966      	ldr	r1, [pc, #408]	@ (8003968 <handlerArc+0x520>)
 80037ce:	e9c1 2300 	strd	r2, r3, [r1]

			interpolator->_workState = INTERPOLATOR_READY;
 80037d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80037d4:	2201      	movs	r2, #1
 80037d6:	701a      	strb	r2, [r3, #0]
			return INTERPOLATOR_DONE;
 80037d8:	2300      	movs	r3, #0
 80037da:	e0f5      	b.n	80039c8 <handlerArc+0x580>
		}

		/* Условие прохождения оси координат */
		if (fabs(arc->x_rel) <= MM_PER_STEP || fabs(arc->y_rel) <= MM_PER_STEP)
 80037dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037de:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80037e2:	60ba      	str	r2, [r7, #8]
 80037e4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80037e8:	60fb      	str	r3, [r7, #12]
 80037ea:	a35b      	add	r3, pc, #364	@ (adr r3, 8003958 <handlerArc+0x510>)
 80037ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037f0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80037f4:	f7fd f98c 	bl	8000b10 <__aeabi_dcmple>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d111      	bne.n	8003822 <handlerArc+0x3da>
 80037fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003800:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8003804:	603a      	str	r2, [r7, #0]
 8003806:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800380a:	607b      	str	r3, [r7, #4]
 800380c:	a352      	add	r3, pc, #328	@ (adr r3, 8003958 <handlerArc+0x510>)
 800380e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003812:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003816:	f7fd f97b 	bl	8000b10 <__aeabi_dcmple>
 800381a:	4603      	mov	r3, r0
 800381c:	2b00      	cmp	r3, #0
 800381e:	f000 80cf 	beq.w	80039c0 <handlerArc+0x578>
		{
			/* Переопределение четверти, в которой расположена текущая точка дуги */
			if (arc->x_rel >= 0 && arc->y_rel > 0) { arc->dx = 1 * arc->dir; arc->dy = -1 * arc->dir; arc->s = -1 * arc->dir; }             //< 1 четверть
 8003822:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003824:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8003828:	f04f 0200 	mov.w	r2, #0
 800382c:	f04f 0300 	mov.w	r3, #0
 8003830:	f7fd f978 	bl	8000b24 <__aeabi_dcmpge>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d026      	beq.n	8003888 <handlerArc+0x440>
 800383a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800383c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8003840:	f04f 0200 	mov.w	r2, #0
 8003844:	f04f 0300 	mov.w	r3, #0
 8003848:	f7fd f976 	bl	8000b38 <__aeabi_dcmpgt>
 800384c:	4603      	mov	r3, r0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d01a      	beq.n	8003888 <handlerArc+0x440>
 8003852:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003854:	f993 2053 	ldrsb.w	r2, [r3, #83]	@ 0x53
 8003858:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800385a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800385e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003860:	f993 3053 	ldrsb.w	r3, [r3, #83]	@ 0x53
 8003864:	b2db      	uxtb	r3, r3
 8003866:	425b      	negs	r3, r3
 8003868:	b2db      	uxtb	r3, r3
 800386a:	b25a      	sxtb	r2, r3
 800386c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800386e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8003872:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003874:	f993 3053 	ldrsb.w	r3, [r3, #83]	@ 0x53
 8003878:	b2db      	uxtb	r3, r3
 800387a:	425b      	negs	r3, r3
 800387c:	b2db      	uxtb	r3, r3
 800387e:	b25a      	sxtb	r2, r3
 8003880:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003882:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
 8003886:	e09b      	b.n	80039c0 <handlerArc+0x578>
			else if (arc->y_rel <= 0 && arc->x_rel > 0) { arc->dx = -1 * arc->dir; arc->dy = -1 * arc->dir; arc->s = 1 * arc->dir; }        //< 4 четверть
 8003888:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800388a:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800388e:	f04f 0200 	mov.w	r2, #0
 8003892:	f04f 0300 	mov.w	r3, #0
 8003896:	f7fd f93b 	bl	8000b10 <__aeabi_dcmple>
 800389a:	4603      	mov	r3, r0
 800389c:	2b00      	cmp	r3, #0
 800389e:	d026      	beq.n	80038ee <handlerArc+0x4a6>
 80038a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038a2:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 80038a6:	f04f 0200 	mov.w	r2, #0
 80038aa:	f04f 0300 	mov.w	r3, #0
 80038ae:	f7fd f943 	bl	8000b38 <__aeabi_dcmpgt>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d01a      	beq.n	80038ee <handlerArc+0x4a6>
 80038b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038ba:	f993 3053 	ldrsb.w	r3, [r3, #83]	@ 0x53
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	425b      	negs	r3, r3
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	b25a      	sxtb	r2, r3
 80038c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80038cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038ce:	f993 3053 	ldrsb.w	r3, [r3, #83]	@ 0x53
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	425b      	negs	r3, r3
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	b25a      	sxtb	r2, r3
 80038da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 80038e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038e2:	f993 2053 	ldrsb.w	r2, [r3, #83]	@ 0x53
 80038e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038e8:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
 80038ec:	e068      	b.n	80039c0 <handlerArc+0x578>
			else if (arc->x_rel <= 0 && arc->y_rel < 0) { arc->dx = -1 * arc->dir; arc->dy = 1 * arc->dir; arc->s = -1 * arc->dir; }        //< 3 четверть
 80038ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038f0:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 80038f4:	f04f 0200 	mov.w	r2, #0
 80038f8:	f04f 0300 	mov.w	r3, #0
 80038fc:	f7fd f908 	bl	8000b10 <__aeabi_dcmple>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d032      	beq.n	800396c <handlerArc+0x524>
 8003906:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003908:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800390c:	f04f 0200 	mov.w	r2, #0
 8003910:	f04f 0300 	mov.w	r3, #0
 8003914:	f7fd f8f2 	bl	8000afc <__aeabi_dcmplt>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d026      	beq.n	800396c <handlerArc+0x524>
 800391e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003920:	f993 3053 	ldrsb.w	r3, [r3, #83]	@ 0x53
 8003924:	b2db      	uxtb	r3, r3
 8003926:	425b      	negs	r3, r3
 8003928:	b2db      	uxtb	r3, r3
 800392a:	b25a      	sxtb	r2, r3
 800392c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800392e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8003932:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003934:	f993 2053 	ldrsb.w	r2, [r3, #83]	@ 0x53
 8003938:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800393a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 800393e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003940:	f993 3053 	ldrsb.w	r3, [r3, #83]	@ 0x53
 8003944:	b2db      	uxtb	r3, r3
 8003946:	425b      	negs	r3, r3
 8003948:	b2db      	uxtb	r3, r3
 800394a:	b25a      	sxtb	r2, r3
 800394c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800394e:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
 8003952:	e035      	b.n	80039c0 <handlerArc+0x578>
 8003954:	f3af 8000 	nop.w
 8003958:	a0000000 	.word	0xa0000000
 800395c:	3f799999 	.word	0x3f799999
 8003960:	20001008 	.word	0x20001008
 8003964:	20001010 	.word	0x20001010
 8003968:	20001018 	.word	0x20001018
			else if (arc->y_rel >= 0 && arc->x_rel < 0) { arc->dx = 1 * arc->dir; arc->dy = 1 * arc->dir; arc->s = 1 * arc->dir; }          //< 2 четверть
 800396c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800396e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8003972:	f04f 0200 	mov.w	r2, #0
 8003976:	f04f 0300 	mov.w	r3, #0
 800397a:	f7fd f8d3 	bl	8000b24 <__aeabi_dcmpge>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d01d      	beq.n	80039c0 <handlerArc+0x578>
 8003984:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003986:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 800398a:	f04f 0200 	mov.w	r2, #0
 800398e:	f04f 0300 	mov.w	r3, #0
 8003992:	f7fd f8b3 	bl	8000afc <__aeabi_dcmplt>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d011      	beq.n	80039c0 <handlerArc+0x578>
 800399c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800399e:	f993 2053 	ldrsb.w	r2, [r3, #83]	@ 0x53
 80039a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039a4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80039a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039aa:	f993 2053 	ldrsb.w	r2, [r3, #83]	@ 0x53
 80039ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 80039b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039b6:	f993 2053 	ldrsb.w	r2, [r3, #83]	@ 0x53
 80039ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039bc:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
		}

		interpolator->_workState = INTERPOLATOR_READY;
 80039c0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80039c2:	2201      	movs	r2, #1
 80039c4:	701a      	strb	r2, [r3, #0]

	}

    return INTERPOLATOR_PROCESSING;
 80039c6:	2302      	movs	r3, #2
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3760      	adds	r7, #96	@ 0x60
 80039cc:	46bd      	mov	sp, r7
 80039ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039d2:	bf00      	nop

080039d4 <setStepsBin>:

/** Функция формирования двоичного представления шагов по осям
  * step - шаг по оси, может быть 1 или -1
  */
uint8_t setStepsBin(uint8_t axis, int8_t step)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b085      	sub	sp, #20
 80039d8:	af00      	add	r7, sp, #0
 80039da:	4603      	mov	r3, r0
 80039dc:	460a      	mov	r2, r1
 80039de:	71fb      	strb	r3, [r7, #7]
 80039e0:	4613      	mov	r3, r2
 80039e2:	71bb      	strb	r3, [r7, #6]
    int8_t bin = 0b00000000;
 80039e4:	2300      	movs	r3, #0
 80039e6:	73fb      	strb	r3, [r7, #15]

    if (step == 1)
 80039e8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d109      	bne.n	8003a04 <setStepsBin+0x30>
    {
        bin |= 0b00000001 << axis * 2;
 80039f0:	79fb      	ldrb	r3, [r7, #7]
 80039f2:	005b      	lsls	r3, r3, #1
 80039f4:	2201      	movs	r2, #1
 80039f6:	fa02 f303 	lsl.w	r3, r2, r3
 80039fa:	b25a      	sxtb	r2, r3
 80039fc:	7bfb      	ldrb	r3, [r7, #15]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	73fb      	strb	r3, [r7, #15]
 8003a02:	e00d      	b.n	8003a20 <setStepsBin+0x4c>
    }
    else if (step == -1)
 8003a04:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a0c:	d108      	bne.n	8003a20 <setStepsBin+0x4c>
    {
        bin |= 0b00000011 << axis * 2;
 8003a0e:	79fb      	ldrb	r3, [r7, #7]
 8003a10:	005b      	lsls	r3, r3, #1
 8003a12:	2203      	movs	r2, #3
 8003a14:	fa02 f303 	lsl.w	r3, r2, r3
 8003a18:	b25a      	sxtb	r2, r3
 8003a1a:	7bfb      	ldrb	r3, [r7, #15]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	73fb      	strb	r3, [r7, #15]
    }

    return bin;
 8003a20:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3714      	adds	r7, #20
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr
	...

08003a30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b084      	sub	sp, #16
 8003a34:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003a36:	f002 ff35 	bl	80068a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003a3a:	f000 f8d7 	bl	8003bec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003a3e:	f000 fbcb 	bl	80041d8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8003a42:	f000 f93d 	bl	8003cc0 <MX_ADC1_Init>
  MX_CAN1_Init();
 8003a46:	f000 f98d 	bl	8003d64 <MX_CAN1_Init>
  MX_DAC_Init();
 8003a4a:	f000 f9bf 	bl	8003dcc <MX_DAC_Init>
  MX_I2C1_Init();
 8003a4e:	f000 f9f1 	bl	8003e34 <MX_I2C1_Init>
  MX_TIM13_Init();
 8003a52:	f000 faf1 	bl	8004038 <MX_TIM13_Init>
  MX_USART1_UART_Init();
 8003a56:	f000 fb3d 	bl	80040d4 <MX_USART1_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8003a5a:	f000 fb8f 	bl	800417c <MX_USB_OTG_FS_PCD_Init>
  MX_SPI3_Init();
 8003a5e:	f000 fa17 	bl	8003e90 <MX_SPI3_Init>
  MX_USART3_UART_Init();
 8003a62:	f000 fb61 	bl	8004128 <MX_USART3_UART_Init>
  MX_LWIP_Init();
 8003a66:	f007 fc53 	bl	800b310 <MX_LWIP_Init>
  MX_TIM2_Init();
 8003a6a:	f000 fa99 	bl	8003fa0 <MX_TIM2_Init>
  MX_TIM1_Init();
 8003a6e:	f000 fa45 	bl	8003efc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  /* ----------------------------------------------- Инициализация -------------------------------------------- */

  /* Инициализация таймер DWT для одного шага в библиотеке stepper.h */
  DWT_Init();
 8003a72:	f7fe fb7f 	bl	8002174 <DWT_Init>

  /* Инициализация UDP сокета */
  udpSocketInit();
 8003a76:	f001 fcfb 	bl	8005470 <udpSocketInit>

  /* Инициализация указателей на функции HAL для работы библиотек stepper.h и driver.h */
  stepperFunctionsInit(function_pin_1);
 8003a7a:	4b4a      	ldr	r3, [pc, #296]	@ (8003ba4 <main+0x174>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f002 f8ce 	bl	8005c20 <stepperFunctionsInit>
  driverFunctionsInit(function_time_1, function_time_2, function_time_3, function_time_4);
 8003a84:	4b48      	ldr	r3, [pc, #288]	@ (8003ba8 <main+0x178>)
 8003a86:	6818      	ldr	r0, [r3, #0]
 8003a88:	4b48      	ldr	r3, [pc, #288]	@ (8003bac <main+0x17c>)
 8003a8a:	6819      	ldr	r1, [r3, #0]
 8003a8c:	4b48      	ldr	r3, [pc, #288]	@ (8003bb0 <main+0x180>)
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	4b48      	ldr	r3, [pc, #288]	@ (8003bb4 <main+0x184>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f7fd fbe2 	bl	800125c <driverFunctionsInit>

  /* Инициализация шаговых моторов */
  stepperInit(&stepper[0], &stepper0_pins);
 8003a98:	4947      	ldr	r1, [pc, #284]	@ (8003bb8 <main+0x188>)
 8003a9a:	4848      	ldr	r0, [pc, #288]	@ (8003bbc <main+0x18c>)
 8003a9c:	f002 f8d0 	bl	8005c40 <stepperInit>
  stepperInit(&stepper[1], &stepper1_pins);
 8003aa0:	4947      	ldr	r1, [pc, #284]	@ (8003bc0 <main+0x190>)
 8003aa2:	4848      	ldr	r0, [pc, #288]	@ (8003bc4 <main+0x194>)
 8003aa4:	f002 f8cc 	bl	8005c40 <stepperInit>

  /* Инициализация драйверов шаговых моторов */
  driverInit(&driver[0], &stepper[0], &driver0_pins, 800, LINEAR);
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	9300      	str	r3, [sp, #0]
 8003aac:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8003ab0:	4a45      	ldr	r2, [pc, #276]	@ (8003bc8 <main+0x198>)
 8003ab2:	4942      	ldr	r1, [pc, #264]	@ (8003bbc <main+0x18c>)
 8003ab4:	4845      	ldr	r0, [pc, #276]	@ (8003bcc <main+0x19c>)
 8003ab6:	f7fd fbf3 	bl	80012a0 <driverInit>
  driverInit(&driver[1], &stepper[1], &driver1_pins, 800, LINEAR);
 8003aba:	2300      	movs	r3, #0
 8003abc:	9300      	str	r3, [sp, #0]
 8003abe:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8003ac2:	4a43      	ldr	r2, [pc, #268]	@ (8003bd0 <main+0x1a0>)
 8003ac4:	493f      	ldr	r1, [pc, #252]	@ (8003bc4 <main+0x194>)
 8003ac6:	4843      	ldr	r0, [pc, #268]	@ (8003bd4 <main+0x1a4>)
 8003ac8:	f7fd fbea 	bl	80012a0 <driverInit>

  /* Инициализация планировщика*/
  plannerInit(&planner);
 8003acc:	4842      	ldr	r0, [pc, #264]	@ (8003bd8 <main+0x1a8>)
 8003ace:	f001 fd83 	bl	80055d8 <plannerInit>
  plannerFunctionsInit(function_time_3);
 8003ad2:	4b37      	ldr	r3, [pc, #220]	@ (8003bb0 <main+0x180>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f001 fd6e 	bl	80055b8 <plannerFunctionsInit>

  /* Инициализация обработчика g - команд*/
  handlerGcodeInit(&ghandler);
 8003adc:	483f      	ldr	r0, [pc, #252]	@ (8003bdc <main+0x1ac>)
 8003ade:	f7fe fcf5 	bl	80024cc <handlerGcodeInit>

  /* ----------------------------------------------- Инициализация -------------------------------------------- */

  /* Добавить драйверы в планировщик */
  addDriver(&planner, &driver[0], 0);
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	4939      	ldr	r1, [pc, #228]	@ (8003bcc <main+0x19c>)
 8003ae6:	483c      	ldr	r0, [pc, #240]	@ (8003bd8 <main+0x1a8>)
 8003ae8:	f002 f850 	bl	8005b8c <addDriver>
  addDriver(&planner, &driver[1], 1);
 8003aec:	2201      	movs	r2, #1
 8003aee:	4939      	ldr	r1, [pc, #228]	@ (8003bd4 <main+0x1a4>)
 8003af0:	4839      	ldr	r0, [pc, #228]	@ (8003bd8 <main+0x1a8>)
 8003af2:	f002 f84b 	bl	8005b8c <addDriver>

  /* Запуск таймера TIM2 */
  startTimerTIM2();
 8003af6:	f000 fcbd 	bl	8004474 <startTimerTIM2>

  /* Запуск таймера TIM1 */
//  startTimerTIM1();

  /* Включить драйверы моторов */
  for(uint8_t i = 0; i < AXES; i ++)
 8003afa:	2300      	movs	r3, #0
 8003afc:	71fb      	strb	r3, [r7, #7]
 8003afe:	e00b      	b.n	8003b18 <main+0xe8>
  {
	  enableDriver(&driver[i]);
 8003b00:	79fb      	ldrb	r3, [r7, #7]
 8003b02:	2268      	movs	r2, #104	@ 0x68
 8003b04:	fb02 f303 	mul.w	r3, r2, r3
 8003b08:	4a30      	ldr	r2, [pc, #192]	@ (8003bcc <main+0x19c>)
 8003b0a:	4413      	add	r3, r2
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f7fd fc87 	bl	8001420 <enableDriver>
  for(uint8_t i = 0; i < AXES; i ++)
 8003b12:	79fb      	ldrb	r3, [r7, #7]
 8003b14:	3301      	adds	r3, #1
 8003b16:	71fb      	strb	r3, [r7, #7]
 8003b18:	79fb      	ldrb	r3, [r7, #7]
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d9f0      	bls.n	8003b00 <main+0xd0>
  }

  /* Тест */

  driver[0].stepper->_globDir = true;
 8003b1e:	4b2b      	ldr	r3, [pc, #172]	@ (8003bcc <main+0x19c>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	2201      	movs	r2, #1
 8003b24:	77da      	strb	r2, [r3, #31]
  driver[1].stepper->_globDir = true;
 8003b26:	4b29      	ldr	r3, [pc, #164]	@ (8003bcc <main+0x19c>)
 8003b28:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	77da      	strb	r2, [r3, #31]
  {
	  /* Вызов тестовой функции для проверки плат интерфейса шагового мотора */
//	  testStepDirPin();

	  /* Основные функции управления драйверами */
	  for(uint8_t i = 0; i < AXES; i ++)
 8003b2e:	2300      	movs	r3, #0
 8003b30:	71bb      	strb	r3, [r7, #6]
 8003b32:	e00b      	b.n	8003b4c <main+0x11c>
	  {
		  tickDriver(&driver[i]);
 8003b34:	79bb      	ldrb	r3, [r7, #6]
 8003b36:	2268      	movs	r2, #104	@ 0x68
 8003b38:	fb02 f303 	mul.w	r3, r2, r3
 8003b3c:	4a23      	ldr	r2, [pc, #140]	@ (8003bcc <main+0x19c>)
 8003b3e:	4413      	add	r3, r2
 8003b40:	4618      	mov	r0, r3
 8003b42:	f7fd fc91 	bl	8001468 <tickDriver>
	  for(uint8_t i = 0; i < AXES; i ++)
 8003b46:	79bb      	ldrb	r3, [r7, #6]
 8003b48:	3301      	adds	r3, #1
 8003b4a:	71bb      	strb	r3, [r7, #6]
 8003b4c:	79bb      	ldrb	r3, [r7, #6]
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d9f0      	bls.n	8003b34 <main+0x104>
	  }

	  /* Тикер обработчика g - кода */
	  tickGcodeHandler(&ghandler);
 8003b52:	4822      	ldr	r0, [pc, #136]	@ (8003bdc <main+0x1ac>)
 8003b54:	f7fe fcdc 	bl	8002510 <tickGcodeHandler>

	  /* Тикер осевого планировщика */
	  if(_runFlag == true)
 8003b58:	4b21      	ldr	r3, [pc, #132]	@ (8003be0 <main+0x1b0>)
 8003b5a:	781b      	ldrb	r3, [r3, #0]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d01d      	beq.n	8003b9c <main+0x16c>
	  {
		  if (availableForRead(&fifoBufSteps) == FIFO_OK)
 8003b60:	4820      	ldr	r0, [pc, #128]	@ (8003be4 <main+0x1b4>)
 8003b62:	f7fe fbaf 	bl	80022c4 <availableForRead>
 8003b66:	4603      	mov	r3, r0
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d102      	bne.n	8003b72 <main+0x142>
		  {
			  /* Тикер планировщика многоосевого движения */
			  tickPlanner(&planner);
 8003b6c:	481a      	ldr	r0, [pc, #104]	@ (8003bd8 <main+0x1a8>)
 8003b6e:	f001 fd8d 	bl	800568c <tickPlanner>
		  }

		  if(availableForReadChar(&fifoGcodeBuf) == FIFO_EMPTY && availableForRead(&fifoBufSteps) == FIFO_EMPTY)
 8003b72:	481d      	ldr	r0, [pc, #116]	@ (8003be8 <main+0x1b8>)
 8003b74:	f7fe fc70 	bl	8002458 <availableForReadChar>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b02      	cmp	r3, #2
 8003b7c:	d10e      	bne.n	8003b9c <main+0x16c>
 8003b7e:	4819      	ldr	r0, [pc, #100]	@ (8003be4 <main+0x1b4>)
 8003b80:	f7fe fba0 	bl	80022c4 <availableForRead>
 8003b84:	4603      	mov	r3, r0
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d108      	bne.n	8003b9c <main+0x16c>
		  {
			  handlerEndState(&ghandler);
 8003b8a:	4814      	ldr	r0, [pc, #80]	@ (8003bdc <main+0x1ac>)
 8003b8c:	f7fe feac 	bl	80028e8 <handlerEndState>
			  planner._workState = PLANNER_END;
 8003b90:	4b11      	ldr	r3, [pc, #68]	@ (8003bd8 <main+0x1a8>)
 8003b92:	2205      	movs	r2, #5
 8003b94:	76da      	strb	r2, [r3, #27]
			  _runFlag = false;
 8003b96:	4b12      	ldr	r3, [pc, #72]	@ (8003be0 <main+0x1b0>)
 8003b98:	2200      	movs	r2, #0
 8003b9a:	701a      	strb	r2, [r3, #0]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  /* Ethernet */
	  MX_LWIP_Process();
 8003b9c:	f007 fcf8 	bl	800b590 <MX_LWIP_Process>
	  for(uint8_t i = 0; i < AXES; i ++)
 8003ba0:	e7c5      	b.n	8003b2e <main+0xfe>
 8003ba2:	bf00      	nop
 8003ba4:	20000874 	.word	0x20000874
 8003ba8:	20000878 	.word	0x20000878
 8003bac:	2000087c 	.word	0x2000087c
 8003bb0:	20000880 	.word	0x20000880
 8003bb4:	20000884 	.word	0x20000884
 8003bb8:	20000888 	.word	0x20000888
 8003bbc:	2000dfac 	.word	0x2000dfac
 8003bc0:	200008a0 	.word	0x200008a0
 8003bc4:	2000dfcc 	.word	0x2000dfcc
 8003bc8:	200008b8 	.word	0x200008b8
 8003bcc:	2000e0ac 	.word	0x2000e0ac
 8003bd0:	200008d0 	.word	0x200008d0
 8003bd4:	2000e114 	.word	0x2000e114
 8003bd8:	2000e3ec 	.word	0x2000e3ec
 8003bdc:	2000e494 	.word	0x2000e494
 8003be0:	2000e49c 	.word	0x2000e49c
 8003be4:	2000d820 	.word	0x2000d820
 8003be8:	20000fec 	.word	0x20000fec

08003bec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b094      	sub	sp, #80	@ 0x50
 8003bf0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003bf2:	f107 0320 	add.w	r3, r7, #32
 8003bf6:	2230      	movs	r2, #48	@ 0x30
 8003bf8:	2100      	movs	r1, #0
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f013 fd8f 	bl	801771e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003c00:	f107 030c 	add.w	r3, r7, #12
 8003c04:	2200      	movs	r2, #0
 8003c06:	601a      	str	r2, [r3, #0]
 8003c08:	605a      	str	r2, [r3, #4]
 8003c0a:	609a      	str	r2, [r3, #8]
 8003c0c:	60da      	str	r2, [r3, #12]
 8003c0e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c10:	2300      	movs	r3, #0
 8003c12:	60bb      	str	r3, [r7, #8]
 8003c14:	4b28      	ldr	r3, [pc, #160]	@ (8003cb8 <SystemClock_Config+0xcc>)
 8003c16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c18:	4a27      	ldr	r2, [pc, #156]	@ (8003cb8 <SystemClock_Config+0xcc>)
 8003c1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c1e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c20:	4b25      	ldr	r3, [pc, #148]	@ (8003cb8 <SystemClock_Config+0xcc>)
 8003c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c28:	60bb      	str	r3, [r7, #8]
 8003c2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	607b      	str	r3, [r7, #4]
 8003c30:	4b22      	ldr	r3, [pc, #136]	@ (8003cbc <SystemClock_Config+0xd0>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a21      	ldr	r2, [pc, #132]	@ (8003cbc <SystemClock_Config+0xd0>)
 8003c36:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003c3a:	6013      	str	r3, [r2, #0]
 8003c3c:	4b1f      	ldr	r3, [pc, #124]	@ (8003cbc <SystemClock_Config+0xd0>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c44:	607b      	str	r3, [r7, #4]
 8003c46:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003c4c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003c50:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003c52:	2302      	movs	r3, #2
 8003c54:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003c56:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003c5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003c5c:	2304      	movs	r3, #4
 8003c5e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003c60:	23a8      	movs	r3, #168	@ 0xa8
 8003c62:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003c64:	2302      	movs	r3, #2
 8003c66:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003c68:	2307      	movs	r3, #7
 8003c6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003c6c:	f107 0320 	add.w	r3, r7, #32
 8003c70:	4618      	mov	r0, r3
 8003c72:	f005 f8ef 	bl	8008e54 <HAL_RCC_OscConfig>
 8003c76:	4603      	mov	r3, r0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d001      	beq.n	8003c80 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003c7c:	f001 fbf2 	bl	8005464 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003c80:	230f      	movs	r3, #15
 8003c82:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003c84:	2302      	movs	r3, #2
 8003c86:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003c8c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003c90:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003c92:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003c96:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003c98:	f107 030c 	add.w	r3, r7, #12
 8003c9c:	2105      	movs	r1, #5
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f005 fb50 	bl	8009344 <HAL_RCC_ClockConfig>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d001      	beq.n	8003cae <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003caa:	f001 fbdb 	bl	8005464 <Error_Handler>
  }
}
 8003cae:	bf00      	nop
 8003cb0:	3750      	adds	r7, #80	@ 0x50
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	40023800 	.word	0x40023800
 8003cbc:	40007000 	.word	0x40007000

08003cc0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b084      	sub	sp, #16
 8003cc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003cc6:	463b      	mov	r3, r7
 8003cc8:	2200      	movs	r2, #0
 8003cca:	601a      	str	r2, [r3, #0]
 8003ccc:	605a      	str	r2, [r3, #4]
 8003cce:	609a      	str	r2, [r3, #8]
 8003cd0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003cd2:	4b21      	ldr	r3, [pc, #132]	@ (8003d58 <MX_ADC1_Init+0x98>)
 8003cd4:	4a21      	ldr	r2, [pc, #132]	@ (8003d5c <MX_ADC1_Init+0x9c>)
 8003cd6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003cd8:	4b1f      	ldr	r3, [pc, #124]	@ (8003d58 <MX_ADC1_Init+0x98>)
 8003cda:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003cde:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003ce0:	4b1d      	ldr	r3, [pc, #116]	@ (8003d58 <MX_ADC1_Init+0x98>)
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8003ce6:	4b1c      	ldr	r3, [pc, #112]	@ (8003d58 <MX_ADC1_Init+0x98>)
 8003ce8:	2200      	movs	r2, #0
 8003cea:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003cec:	4b1a      	ldr	r3, [pc, #104]	@ (8003d58 <MX_ADC1_Init+0x98>)
 8003cee:	2200      	movs	r2, #0
 8003cf0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003cf2:	4b19      	ldr	r3, [pc, #100]	@ (8003d58 <MX_ADC1_Init+0x98>)
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003cfa:	4b17      	ldr	r3, [pc, #92]	@ (8003d58 <MX_ADC1_Init+0x98>)
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003d00:	4b15      	ldr	r3, [pc, #84]	@ (8003d58 <MX_ADC1_Init+0x98>)
 8003d02:	4a17      	ldr	r2, [pc, #92]	@ (8003d60 <MX_ADC1_Init+0xa0>)
 8003d04:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003d06:	4b14      	ldr	r3, [pc, #80]	@ (8003d58 <MX_ADC1_Init+0x98>)
 8003d08:	2200      	movs	r2, #0
 8003d0a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8003d0c:	4b12      	ldr	r3, [pc, #72]	@ (8003d58 <MX_ADC1_Init+0x98>)
 8003d0e:	2201      	movs	r2, #1
 8003d10:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003d12:	4b11      	ldr	r3, [pc, #68]	@ (8003d58 <MX_ADC1_Init+0x98>)
 8003d14:	2200      	movs	r2, #0
 8003d16:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003d1a:	4b0f      	ldr	r3, [pc, #60]	@ (8003d58 <MX_ADC1_Init+0x98>)
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003d20:	480d      	ldr	r0, [pc, #52]	@ (8003d58 <MX_ADC1_Init+0x98>)
 8003d22:	f002 fe55 	bl	80069d0 <HAL_ADC_Init>
 8003d26:	4603      	mov	r3, r0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d001      	beq.n	8003d30 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8003d2c:	f001 fb9a 	bl	8005464 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003d30:	2300      	movs	r3, #0
 8003d32:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003d34:	2301      	movs	r3, #1
 8003d36:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003d3c:	463b      	mov	r3, r7
 8003d3e:	4619      	mov	r1, r3
 8003d40:	4805      	ldr	r0, [pc, #20]	@ (8003d58 <MX_ADC1_Init+0x98>)
 8003d42:	f002 fe89 	bl	8006a58 <HAL_ADC_ConfigChannel>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d001      	beq.n	8003d50 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8003d4c:	f001 fb8a 	bl	8005464 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003d50:	bf00      	nop
 8003d52:	3710      	adds	r7, #16
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}
 8003d58:	2000d830 	.word	0x2000d830
 8003d5c:	40012000 	.word	0x40012000
 8003d60:	0f000001 	.word	0x0f000001

08003d64 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8003d68:	4b16      	ldr	r3, [pc, #88]	@ (8003dc4 <MX_CAN1_Init+0x60>)
 8003d6a:	4a17      	ldr	r2, [pc, #92]	@ (8003dc8 <MX_CAN1_Init+0x64>)
 8003d6c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8003d6e:	4b15      	ldr	r3, [pc, #84]	@ (8003dc4 <MX_CAN1_Init+0x60>)
 8003d70:	2210      	movs	r2, #16
 8003d72:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8003d74:	4b13      	ldr	r3, [pc, #76]	@ (8003dc4 <MX_CAN1_Init+0x60>)
 8003d76:	2200      	movs	r2, #0
 8003d78:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8003d7a:	4b12      	ldr	r3, [pc, #72]	@ (8003dc4 <MX_CAN1_Init+0x60>)
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8003d80:	4b10      	ldr	r3, [pc, #64]	@ (8003dc4 <MX_CAN1_Init+0x60>)
 8003d82:	2200      	movs	r2, #0
 8003d84:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8003d86:	4b0f      	ldr	r3, [pc, #60]	@ (8003dc4 <MX_CAN1_Init+0x60>)
 8003d88:	2200      	movs	r2, #0
 8003d8a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8003d8c:	4b0d      	ldr	r3, [pc, #52]	@ (8003dc4 <MX_CAN1_Init+0x60>)
 8003d8e:	2200      	movs	r2, #0
 8003d90:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8003d92:	4b0c      	ldr	r3, [pc, #48]	@ (8003dc4 <MX_CAN1_Init+0x60>)
 8003d94:	2200      	movs	r2, #0
 8003d96:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8003d98:	4b0a      	ldr	r3, [pc, #40]	@ (8003dc4 <MX_CAN1_Init+0x60>)
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8003d9e:	4b09      	ldr	r3, [pc, #36]	@ (8003dc4 <MX_CAN1_Init+0x60>)
 8003da0:	2200      	movs	r2, #0
 8003da2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8003da4:	4b07      	ldr	r3, [pc, #28]	@ (8003dc4 <MX_CAN1_Init+0x60>)
 8003da6:	2200      	movs	r2, #0
 8003da8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8003daa:	4b06      	ldr	r3, [pc, #24]	@ (8003dc4 <MX_CAN1_Init+0x60>)
 8003dac:	2200      	movs	r2, #0
 8003dae:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8003db0:	4804      	ldr	r0, [pc, #16]	@ (8003dc4 <MX_CAN1_Init+0x60>)
 8003db2:	f003 f86f 	bl	8006e94 <HAL_CAN_Init>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d001      	beq.n	8003dc0 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8003dbc:	f001 fb52 	bl	8005464 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8003dc0:	bf00      	nop
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	2000d878 	.word	0x2000d878
 8003dc8:	40006400 	.word	0x40006400

08003dcc <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b082      	sub	sp, #8
 8003dd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8003dd2:	463b      	mov	r3, r7
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	601a      	str	r2, [r3, #0]
 8003dd8:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8003dda:	4b14      	ldr	r3, [pc, #80]	@ (8003e2c <MX_DAC_Init+0x60>)
 8003ddc:	4a14      	ldr	r2, [pc, #80]	@ (8003e30 <MX_DAC_Init+0x64>)
 8003dde:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8003de0:	4812      	ldr	r0, [pc, #72]	@ (8003e2c <MX_DAC_Init+0x60>)
 8003de2:	f003 fa64 	bl	80072ae <HAL_DAC_Init>
 8003de6:	4603      	mov	r3, r0
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d001      	beq.n	8003df0 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8003dec:	f001 fb3a 	bl	8005464 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8003df0:	2300      	movs	r3, #0
 8003df2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8003df4:	2300      	movs	r3, #0
 8003df6:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8003df8:	463b      	mov	r3, r7
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	480b      	ldr	r0, [pc, #44]	@ (8003e2c <MX_DAC_Init+0x60>)
 8003e00:	f003 fa77 	bl	80072f2 <HAL_DAC_ConfigChannel>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d001      	beq.n	8003e0e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8003e0a:	f001 fb2b 	bl	8005464 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8003e0e:	463b      	mov	r3, r7
 8003e10:	2210      	movs	r2, #16
 8003e12:	4619      	mov	r1, r3
 8003e14:	4805      	ldr	r0, [pc, #20]	@ (8003e2c <MX_DAC_Init+0x60>)
 8003e16:	f003 fa6c 	bl	80072f2 <HAL_DAC_ConfigChannel>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d001      	beq.n	8003e24 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8003e20:	f001 fb20 	bl	8005464 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8003e24:	bf00      	nop
 8003e26:	3708      	adds	r7, #8
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	2000d8a0 	.word	0x2000d8a0
 8003e30:	40007400 	.word	0x40007400

08003e34 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003e38:	4b12      	ldr	r3, [pc, #72]	@ (8003e84 <MX_I2C1_Init+0x50>)
 8003e3a:	4a13      	ldr	r2, [pc, #76]	@ (8003e88 <MX_I2C1_Init+0x54>)
 8003e3c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003e3e:	4b11      	ldr	r3, [pc, #68]	@ (8003e84 <MX_I2C1_Init+0x50>)
 8003e40:	4a12      	ldr	r2, [pc, #72]	@ (8003e8c <MX_I2C1_Init+0x58>)
 8003e42:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003e44:	4b0f      	ldr	r3, [pc, #60]	@ (8003e84 <MX_I2C1_Init+0x50>)
 8003e46:	2200      	movs	r2, #0
 8003e48:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003e4a:	4b0e      	ldr	r3, [pc, #56]	@ (8003e84 <MX_I2C1_Init+0x50>)
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003e50:	4b0c      	ldr	r3, [pc, #48]	@ (8003e84 <MX_I2C1_Init+0x50>)
 8003e52:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003e56:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003e58:	4b0a      	ldr	r3, [pc, #40]	@ (8003e84 <MX_I2C1_Init+0x50>)
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003e5e:	4b09      	ldr	r3, [pc, #36]	@ (8003e84 <MX_I2C1_Init+0x50>)
 8003e60:	2200      	movs	r2, #0
 8003e62:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003e64:	4b07      	ldr	r3, [pc, #28]	@ (8003e84 <MX_I2C1_Init+0x50>)
 8003e66:	2200      	movs	r2, #0
 8003e68:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003e6a:	4b06      	ldr	r3, [pc, #24]	@ (8003e84 <MX_I2C1_Init+0x50>)
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003e70:	4804      	ldr	r0, [pc, #16]	@ (8003e84 <MX_I2C1_Init+0x50>)
 8003e72:	f004 fd9b 	bl	80089ac <HAL_I2C_Init>
 8003e76:	4603      	mov	r3, r0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d001      	beq.n	8003e80 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003e7c:	f001 faf2 	bl	8005464 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003e80:	bf00      	nop
 8003e82:	bd80      	pop	{r7, pc}
 8003e84:	2000d8b4 	.word	0x2000d8b4
 8003e88:	40005400 	.word	0x40005400
 8003e8c:	000186a0 	.word	0x000186a0

08003e90 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8003e94:	4b17      	ldr	r3, [pc, #92]	@ (8003ef4 <MX_SPI3_Init+0x64>)
 8003e96:	4a18      	ldr	r2, [pc, #96]	@ (8003ef8 <MX_SPI3_Init+0x68>)
 8003e98:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8003e9a:	4b16      	ldr	r3, [pc, #88]	@ (8003ef4 <MX_SPI3_Init+0x64>)
 8003e9c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003ea0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8003ea2:	4b14      	ldr	r3, [pc, #80]	@ (8003ef4 <MX_SPI3_Init+0x64>)
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8003ea8:	4b12      	ldr	r3, [pc, #72]	@ (8003ef4 <MX_SPI3_Init+0x64>)
 8003eaa:	2200      	movs	r2, #0
 8003eac:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003eae:	4b11      	ldr	r3, [pc, #68]	@ (8003ef4 <MX_SPI3_Init+0x64>)
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003eb4:	4b0f      	ldr	r3, [pc, #60]	@ (8003ef4 <MX_SPI3_Init+0x64>)
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8003eba:	4b0e      	ldr	r3, [pc, #56]	@ (8003ef4 <MX_SPI3_Init+0x64>)
 8003ebc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ec0:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ec2:	4b0c      	ldr	r3, [pc, #48]	@ (8003ef4 <MX_SPI3_Init+0x64>)
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003ec8:	4b0a      	ldr	r3, [pc, #40]	@ (8003ef4 <MX_SPI3_Init+0x64>)
 8003eca:	2200      	movs	r2, #0
 8003ecc:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8003ece:	4b09      	ldr	r3, [pc, #36]	@ (8003ef4 <MX_SPI3_Init+0x64>)
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ed4:	4b07      	ldr	r3, [pc, #28]	@ (8003ef4 <MX_SPI3_Init+0x64>)
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 8003eda:	4b06      	ldr	r3, [pc, #24]	@ (8003ef4 <MX_SPI3_Init+0x64>)
 8003edc:	220a      	movs	r2, #10
 8003ede:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003ee0:	4804      	ldr	r0, [pc, #16]	@ (8003ef4 <MX_SPI3_Init+0x64>)
 8003ee2:	f005 fc4f 	bl	8009784 <HAL_SPI_Init>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d001      	beq.n	8003ef0 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8003eec:	f001 faba 	bl	8005464 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8003ef0:	bf00      	nop
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	2000d908 	.word	0x2000d908
 8003ef8:	40003c00 	.word	0x40003c00

08003efc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b086      	sub	sp, #24
 8003f00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003f02:	f107 0308 	add.w	r3, r7, #8
 8003f06:	2200      	movs	r2, #0
 8003f08:	601a      	str	r2, [r3, #0]
 8003f0a:	605a      	str	r2, [r3, #4]
 8003f0c:	609a      	str	r2, [r3, #8]
 8003f0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f10:	463b      	mov	r3, r7
 8003f12:	2200      	movs	r2, #0
 8003f14:	601a      	str	r2, [r3, #0]
 8003f16:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003f18:	4b1f      	ldr	r3, [pc, #124]	@ (8003f98 <MX_TIM1_Init+0x9c>)
 8003f1a:	4a20      	ldr	r2, [pc, #128]	@ (8003f9c <MX_TIM1_Init+0xa0>)
 8003f1c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1680 - 1;
 8003f1e:	4b1e      	ldr	r3, [pc, #120]	@ (8003f98 <MX_TIM1_Init+0x9c>)
 8003f20:	f240 628f 	movw	r2, #1679	@ 0x68f
 8003f24:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f26:	4b1c      	ldr	r3, [pc, #112]	@ (8003f98 <MX_TIM1_Init+0x9c>)
 8003f28:	2200      	movs	r2, #0
 8003f2a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50000 - 1;
 8003f2c:	4b1a      	ldr	r3, [pc, #104]	@ (8003f98 <MX_TIM1_Init+0x9c>)
 8003f2e:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8003f32:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f34:	4b18      	ldr	r3, [pc, #96]	@ (8003f98 <MX_TIM1_Init+0x9c>)
 8003f36:	2200      	movs	r2, #0
 8003f38:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003f3a:	4b17      	ldr	r3, [pc, #92]	@ (8003f98 <MX_TIM1_Init+0x9c>)
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f40:	4b15      	ldr	r3, [pc, #84]	@ (8003f98 <MX_TIM1_Init+0x9c>)
 8003f42:	2200      	movs	r2, #0
 8003f44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003f46:	4814      	ldr	r0, [pc, #80]	@ (8003f98 <MX_TIM1_Init+0x9c>)
 8003f48:	f005 fca5 	bl	8009896 <HAL_TIM_Base_Init>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d001      	beq.n	8003f56 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8003f52:	f001 fa87 	bl	8005464 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003f56:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003f5a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003f5c:	f107 0308 	add.w	r3, r7, #8
 8003f60:	4619      	mov	r1, r3
 8003f62:	480d      	ldr	r0, [pc, #52]	@ (8003f98 <MX_TIM1_Init+0x9c>)
 8003f64:	f005 ff90 	bl	8009e88 <HAL_TIM_ConfigClockSource>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d001      	beq.n	8003f72 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8003f6e:	f001 fa79 	bl	8005464 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003f72:	2320      	movs	r3, #32
 8003f74:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f76:	2300      	movs	r3, #0
 8003f78:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003f7a:	463b      	mov	r3, r7
 8003f7c:	4619      	mov	r1, r3
 8003f7e:	4806      	ldr	r0, [pc, #24]	@ (8003f98 <MX_TIM1_Init+0x9c>)
 8003f80:	f006 fb72 	bl	800a668 <HAL_TIMEx_MasterConfigSynchronization>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d001      	beq.n	8003f8e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8003f8a:	f001 fa6b 	bl	8005464 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003f8e:	bf00      	nop
 8003f90:	3718      	adds	r7, #24
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	2000d960 	.word	0x2000d960
 8003f9c:	40010000 	.word	0x40010000

08003fa0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b086      	sub	sp, #24
 8003fa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003fa6:	f107 0308 	add.w	r3, r7, #8
 8003faa:	2200      	movs	r2, #0
 8003fac:	601a      	str	r2, [r3, #0]
 8003fae:	605a      	str	r2, [r3, #4]
 8003fb0:	609a      	str	r2, [r3, #8]
 8003fb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003fb4:	463b      	mov	r3, r7
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	601a      	str	r2, [r3, #0]
 8003fba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003fbc:	4b1d      	ldr	r3, [pc, #116]	@ (8004034 <MX_TIM2_Init+0x94>)
 8003fbe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003fc2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8003fc4:	4b1b      	ldr	r3, [pc, #108]	@ (8004034 <MX_TIM2_Init+0x94>)
 8003fc6:	2253      	movs	r2, #83	@ 0x53
 8003fc8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fca:	4b1a      	ldr	r3, [pc, #104]	@ (8004034 <MX_TIM2_Init+0x94>)
 8003fcc:	2200      	movs	r2, #0
 8003fce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8003fd0:	4b18      	ldr	r3, [pc, #96]	@ (8004034 <MX_TIM2_Init+0x94>)
 8003fd2:	f04f 32ff 	mov.w	r2, #4294967295
 8003fd6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003fd8:	4b16      	ldr	r3, [pc, #88]	@ (8004034 <MX_TIM2_Init+0x94>)
 8003fda:	2200      	movs	r2, #0
 8003fdc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003fde:	4b15      	ldr	r3, [pc, #84]	@ (8004034 <MX_TIM2_Init+0x94>)
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003fe4:	4813      	ldr	r0, [pc, #76]	@ (8004034 <MX_TIM2_Init+0x94>)
 8003fe6:	f005 fc56 	bl	8009896 <HAL_TIM_Base_Init>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d001      	beq.n	8003ff4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8003ff0:	f001 fa38 	bl	8005464 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003ff4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003ff8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003ffa:	f107 0308 	add.w	r3, r7, #8
 8003ffe:	4619      	mov	r1, r3
 8004000:	480c      	ldr	r0, [pc, #48]	@ (8004034 <MX_TIM2_Init+0x94>)
 8004002:	f005 ff41 	bl	8009e88 <HAL_TIM_ConfigClockSource>
 8004006:	4603      	mov	r3, r0
 8004008:	2b00      	cmp	r3, #0
 800400a:	d001      	beq.n	8004010 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800400c:	f001 fa2a 	bl	8005464 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004010:	2300      	movs	r3, #0
 8004012:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004014:	2300      	movs	r3, #0
 8004016:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004018:	463b      	mov	r3, r7
 800401a:	4619      	mov	r1, r3
 800401c:	4805      	ldr	r0, [pc, #20]	@ (8004034 <MX_TIM2_Init+0x94>)
 800401e:	f006 fb23 	bl	800a668 <HAL_TIMEx_MasterConfigSynchronization>
 8004022:	4603      	mov	r3, r0
 8004024:	2b00      	cmp	r3, #0
 8004026:	d001      	beq.n	800402c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8004028:	f001 fa1c 	bl	8005464 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800402c:	bf00      	nop
 800402e:	3718      	adds	r7, #24
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}
 8004034:	2000d9a8 	.word	0x2000d9a8

08004038 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b088      	sub	sp, #32
 800403c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800403e:	1d3b      	adds	r3, r7, #4
 8004040:	2200      	movs	r2, #0
 8004042:	601a      	str	r2, [r3, #0]
 8004044:	605a      	str	r2, [r3, #4]
 8004046:	609a      	str	r2, [r3, #8]
 8004048:	60da      	str	r2, [r3, #12]
 800404a:	611a      	str	r2, [r3, #16]
 800404c:	615a      	str	r2, [r3, #20]
 800404e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8004050:	4b1e      	ldr	r3, [pc, #120]	@ (80040cc <MX_TIM13_Init+0x94>)
 8004052:	4a1f      	ldr	r2, [pc, #124]	@ (80040d0 <MX_TIM13_Init+0x98>)
 8004054:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 8004056:	4b1d      	ldr	r3, [pc, #116]	@ (80040cc <MX_TIM13_Init+0x94>)
 8004058:	2200      	movs	r2, #0
 800405a:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800405c:	4b1b      	ldr	r3, [pc, #108]	@ (80040cc <MX_TIM13_Init+0x94>)
 800405e:	2200      	movs	r2, #0
 8004060:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8004062:	4b1a      	ldr	r3, [pc, #104]	@ (80040cc <MX_TIM13_Init+0x94>)
 8004064:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004068:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800406a:	4b18      	ldr	r3, [pc, #96]	@ (80040cc <MX_TIM13_Init+0x94>)
 800406c:	2200      	movs	r2, #0
 800406e:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004070:	4b16      	ldr	r3, [pc, #88]	@ (80040cc <MX_TIM13_Init+0x94>)
 8004072:	2200      	movs	r2, #0
 8004074:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8004076:	4815      	ldr	r0, [pc, #84]	@ (80040cc <MX_TIM13_Init+0x94>)
 8004078:	f005 fc0d 	bl	8009896 <HAL_TIM_Base_Init>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d001      	beq.n	8004086 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8004082:	f001 f9ef 	bl	8005464 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8004086:	4811      	ldr	r0, [pc, #68]	@ (80040cc <MX_TIM13_Init+0x94>)
 8004088:	f005 fcf3 	bl	8009a72 <HAL_TIM_PWM_Init>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d001      	beq.n	8004096 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8004092:	f001 f9e7 	bl	8005464 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004096:	2360      	movs	r3, #96	@ 0x60
 8004098:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800409a:	2300      	movs	r3, #0
 800409c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800409e:	2300      	movs	r3, #0
 80040a0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80040a2:	2300      	movs	r3, #0
 80040a4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80040a6:	1d3b      	adds	r3, r7, #4
 80040a8:	2200      	movs	r2, #0
 80040aa:	4619      	mov	r1, r3
 80040ac:	4807      	ldr	r0, [pc, #28]	@ (80040cc <MX_TIM13_Init+0x94>)
 80040ae:	f005 fe29 	bl	8009d04 <HAL_TIM_PWM_ConfigChannel>
 80040b2:	4603      	mov	r3, r0
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d001      	beq.n	80040bc <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 80040b8:	f001 f9d4 	bl	8005464 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 80040bc:	4803      	ldr	r0, [pc, #12]	@ (80040cc <MX_TIM13_Init+0x94>)
 80040be:	f002 f895 	bl	80061ec <HAL_TIM_MspPostInit>

}
 80040c2:	bf00      	nop
 80040c4:	3720      	adds	r7, #32
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop
 80040cc:	2000d9f0 	.word	0x2000d9f0
 80040d0:	40001c00 	.word	0x40001c00

080040d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80040d8:	4b11      	ldr	r3, [pc, #68]	@ (8004120 <MX_USART1_UART_Init+0x4c>)
 80040da:	4a12      	ldr	r2, [pc, #72]	@ (8004124 <MX_USART1_UART_Init+0x50>)
 80040dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80040de:	4b10      	ldr	r3, [pc, #64]	@ (8004120 <MX_USART1_UART_Init+0x4c>)
 80040e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80040e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80040e6:	4b0e      	ldr	r3, [pc, #56]	@ (8004120 <MX_USART1_UART_Init+0x4c>)
 80040e8:	2200      	movs	r2, #0
 80040ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80040ec:	4b0c      	ldr	r3, [pc, #48]	@ (8004120 <MX_USART1_UART_Init+0x4c>)
 80040ee:	2200      	movs	r2, #0
 80040f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80040f2:	4b0b      	ldr	r3, [pc, #44]	@ (8004120 <MX_USART1_UART_Init+0x4c>)
 80040f4:	2200      	movs	r2, #0
 80040f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80040f8:	4b09      	ldr	r3, [pc, #36]	@ (8004120 <MX_USART1_UART_Init+0x4c>)
 80040fa:	220c      	movs	r2, #12
 80040fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80040fe:	4b08      	ldr	r3, [pc, #32]	@ (8004120 <MX_USART1_UART_Init+0x4c>)
 8004100:	2200      	movs	r2, #0
 8004102:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004104:	4b06      	ldr	r3, [pc, #24]	@ (8004120 <MX_USART1_UART_Init+0x4c>)
 8004106:	2200      	movs	r2, #0
 8004108:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800410a:	4805      	ldr	r0, [pc, #20]	@ (8004120 <MX_USART1_UART_Init+0x4c>)
 800410c:	f006 fb3c 	bl	800a788 <HAL_UART_Init>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d001      	beq.n	800411a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004116:	f001 f9a5 	bl	8005464 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800411a:	bf00      	nop
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	2000da38 	.word	0x2000da38
 8004124:	40011000 	.word	0x40011000

08004128 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800412c:	4b11      	ldr	r3, [pc, #68]	@ (8004174 <MX_USART3_UART_Init+0x4c>)
 800412e:	4a12      	ldr	r2, [pc, #72]	@ (8004178 <MX_USART3_UART_Init+0x50>)
 8004130:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8004132:	4b10      	ldr	r3, [pc, #64]	@ (8004174 <MX_USART3_UART_Init+0x4c>)
 8004134:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004138:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800413a:	4b0e      	ldr	r3, [pc, #56]	@ (8004174 <MX_USART3_UART_Init+0x4c>)
 800413c:	2200      	movs	r2, #0
 800413e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004140:	4b0c      	ldr	r3, [pc, #48]	@ (8004174 <MX_USART3_UART_Init+0x4c>)
 8004142:	2200      	movs	r2, #0
 8004144:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004146:	4b0b      	ldr	r3, [pc, #44]	@ (8004174 <MX_USART3_UART_Init+0x4c>)
 8004148:	2200      	movs	r2, #0
 800414a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800414c:	4b09      	ldr	r3, [pc, #36]	@ (8004174 <MX_USART3_UART_Init+0x4c>)
 800414e:	220c      	movs	r2, #12
 8004150:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004152:	4b08      	ldr	r3, [pc, #32]	@ (8004174 <MX_USART3_UART_Init+0x4c>)
 8004154:	2200      	movs	r2, #0
 8004156:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004158:	4b06      	ldr	r3, [pc, #24]	@ (8004174 <MX_USART3_UART_Init+0x4c>)
 800415a:	2200      	movs	r2, #0
 800415c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800415e:	4805      	ldr	r0, [pc, #20]	@ (8004174 <MX_USART3_UART_Init+0x4c>)
 8004160:	f006 fb12 	bl	800a788 <HAL_UART_Init>
 8004164:	4603      	mov	r3, r0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d001      	beq.n	800416e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800416a:	f001 f97b 	bl	8005464 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800416e:	bf00      	nop
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	2000da80 	.word	0x2000da80
 8004178:	40004800 	.word	0x40004800

0800417c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8004180:	4b14      	ldr	r3, [pc, #80]	@ (80041d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004182:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8004186:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8004188:	4b12      	ldr	r3, [pc, #72]	@ (80041d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800418a:	2204      	movs	r2, #4
 800418c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800418e:	4b11      	ldr	r3, [pc, #68]	@ (80041d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004190:	2202      	movs	r2, #2
 8004192:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8004194:	4b0f      	ldr	r3, [pc, #60]	@ (80041d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004196:	2200      	movs	r2, #0
 8004198:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800419a:	4b0e      	ldr	r3, [pc, #56]	@ (80041d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800419c:	2202      	movs	r2, #2
 800419e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80041a0:	4b0c      	ldr	r3, [pc, #48]	@ (80041d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80041a2:	2200      	movs	r2, #0
 80041a4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80041a6:	4b0b      	ldr	r3, [pc, #44]	@ (80041d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80041a8:	2200      	movs	r2, #0
 80041aa:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80041ac:	4b09      	ldr	r3, [pc, #36]	@ (80041d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80041ae:	2200      	movs	r2, #0
 80041b0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80041b2:	4b08      	ldr	r3, [pc, #32]	@ (80041d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80041b4:	2200      	movs	r2, #0
 80041b6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80041b8:	4b06      	ldr	r3, [pc, #24]	@ (80041d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80041ba:	2200      	movs	r2, #0
 80041bc:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80041be:	4805      	ldr	r0, [pc, #20]	@ (80041d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80041c0:	f004 fd38 	bl	8008c34 <HAL_PCD_Init>
 80041c4:	4603      	mov	r3, r0
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d001      	beq.n	80041ce <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80041ca:	f001 f94b 	bl	8005464 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80041ce:	bf00      	nop
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	bf00      	nop
 80041d4:	2000dac8 	.word	0x2000dac8

080041d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b08c      	sub	sp, #48	@ 0x30
 80041dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041de:	f107 031c 	add.w	r3, r7, #28
 80041e2:	2200      	movs	r2, #0
 80041e4:	601a      	str	r2, [r3, #0]
 80041e6:	605a      	str	r2, [r3, #4]
 80041e8:	609a      	str	r2, [r3, #8]
 80041ea:	60da      	str	r2, [r3, #12]
 80041ec:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80041ee:	2300      	movs	r3, #0
 80041f0:	61bb      	str	r3, [r7, #24]
 80041f2:	4b9a      	ldr	r3, [pc, #616]	@ (800445c <MX_GPIO_Init+0x284>)
 80041f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041f6:	4a99      	ldr	r2, [pc, #612]	@ (800445c <MX_GPIO_Init+0x284>)
 80041f8:	f043 0310 	orr.w	r3, r3, #16
 80041fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80041fe:	4b97      	ldr	r3, [pc, #604]	@ (800445c <MX_GPIO_Init+0x284>)
 8004200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004202:	f003 0310 	and.w	r3, r3, #16
 8004206:	61bb      	str	r3, [r7, #24]
 8004208:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800420a:	2300      	movs	r3, #0
 800420c:	617b      	str	r3, [r7, #20]
 800420e:	4b93      	ldr	r3, [pc, #588]	@ (800445c <MX_GPIO_Init+0x284>)
 8004210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004212:	4a92      	ldr	r2, [pc, #584]	@ (800445c <MX_GPIO_Init+0x284>)
 8004214:	f043 0304 	orr.w	r3, r3, #4
 8004218:	6313      	str	r3, [r2, #48]	@ 0x30
 800421a:	4b90      	ldr	r3, [pc, #576]	@ (800445c <MX_GPIO_Init+0x284>)
 800421c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800421e:	f003 0304 	and.w	r3, r3, #4
 8004222:	617b      	str	r3, [r7, #20]
 8004224:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004226:	2300      	movs	r3, #0
 8004228:	613b      	str	r3, [r7, #16]
 800422a:	4b8c      	ldr	r3, [pc, #560]	@ (800445c <MX_GPIO_Init+0x284>)
 800422c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800422e:	4a8b      	ldr	r2, [pc, #556]	@ (800445c <MX_GPIO_Init+0x284>)
 8004230:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004234:	6313      	str	r3, [r2, #48]	@ 0x30
 8004236:	4b89      	ldr	r3, [pc, #548]	@ (800445c <MX_GPIO_Init+0x284>)
 8004238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800423a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800423e:	613b      	str	r3, [r7, #16]
 8004240:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004242:	2300      	movs	r3, #0
 8004244:	60fb      	str	r3, [r7, #12]
 8004246:	4b85      	ldr	r3, [pc, #532]	@ (800445c <MX_GPIO_Init+0x284>)
 8004248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800424a:	4a84      	ldr	r2, [pc, #528]	@ (800445c <MX_GPIO_Init+0x284>)
 800424c:	f043 0301 	orr.w	r3, r3, #1
 8004250:	6313      	str	r3, [r2, #48]	@ 0x30
 8004252:	4b82      	ldr	r3, [pc, #520]	@ (800445c <MX_GPIO_Init+0x284>)
 8004254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004256:	f003 0301 	and.w	r3, r3, #1
 800425a:	60fb      	str	r3, [r7, #12]
 800425c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800425e:	2300      	movs	r3, #0
 8004260:	60bb      	str	r3, [r7, #8]
 8004262:	4b7e      	ldr	r3, [pc, #504]	@ (800445c <MX_GPIO_Init+0x284>)
 8004264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004266:	4a7d      	ldr	r2, [pc, #500]	@ (800445c <MX_GPIO_Init+0x284>)
 8004268:	f043 0302 	orr.w	r3, r3, #2
 800426c:	6313      	str	r3, [r2, #48]	@ 0x30
 800426e:	4b7b      	ldr	r3, [pc, #492]	@ (800445c <MX_GPIO_Init+0x284>)
 8004270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004272:	f003 0302 	and.w	r3, r3, #2
 8004276:	60bb      	str	r3, [r7, #8]
 8004278:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800427a:	2300      	movs	r3, #0
 800427c:	607b      	str	r3, [r7, #4]
 800427e:	4b77      	ldr	r3, [pc, #476]	@ (800445c <MX_GPIO_Init+0x284>)
 8004280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004282:	4a76      	ldr	r2, [pc, #472]	@ (800445c <MX_GPIO_Init+0x284>)
 8004284:	f043 0308 	orr.w	r3, r3, #8
 8004288:	6313      	str	r3, [r2, #48]	@ 0x30
 800428a:	4b74      	ldr	r3, [pc, #464]	@ (800445c <MX_GPIO_Init+0x284>)
 800428c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800428e:	f003 0308 	and.w	r3, r3, #8
 8004292:	607b      	str	r3, [r7, #4]
 8004294:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ZERO_POS2_Pin|DIR1_Pin|DIR2_Pin|STEP1_Pin
 8004296:	2200      	movs	r2, #0
 8004298:	f64f 7188 	movw	r1, #65416	@ 0xff88
 800429c:	4870      	ldr	r0, [pc, #448]	@ (8004460 <MX_GPIO_Init+0x288>)
 800429e:	f004 fb51 	bl	8008944 <HAL_GPIO_WritePin>
                          |DIR3_Pin|STEP2_Pin|DIR4_Pin|STEP3_Pin
                          |STEP4_Pin|DIR5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ACK_LINE0_Pin|ACK_LINE1_Pin|ACK_LINE2_Pin|STEP6_Pin, GPIO_PIN_RESET);
 80042a2:	2200      	movs	r2, #0
 80042a4:	f24e 0180 	movw	r1, #57472	@ 0xe080
 80042a8:	486e      	ldr	r0, [pc, #440]	@ (8004464 <MX_GPIO_Init+0x28c>)
 80042aa:	f004 fb4b 	bl	8008944 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, STEP7_Pin|STEP8_Pin|DIR6_Pin|DIR7_Pin
 80042ae:	2200      	movs	r2, #0
 80042b0:	f24c 7113 	movw	r1, #50963	@ 0xc713
 80042b4:	486c      	ldr	r0, [pc, #432]	@ (8004468 <MX_GPIO_Init+0x290>)
 80042b6:	f004 fb45 	bl	8008944 <HAL_GPIO_WritePin>
                          |DIR8_Pin|STEP5_Pin|SPI3_NSS1_Pin|SPI3_NSS0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_STATE_Pin|SPI3_NSS2_Pin, GPIO_PIN_RESET);
 80042ba:	2200      	movs	r2, #0
 80042bc:	f44f 4101 	mov.w	r1, #33024	@ 0x8100
 80042c0:	486a      	ldr	r0, [pc, #424]	@ (800446c <MX_GPIO_Init+0x294>)
 80042c2:	f004 fb3f 	bl	8008944 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(READY_GPIO_Port, READY_Pin, GPIO_PIN_RESET);
 80042c6:	2200      	movs	r2, #0
 80042c8:	2108      	movs	r1, #8
 80042ca:	4869      	ldr	r0, [pc, #420]	@ (8004470 <MX_GPIO_Init+0x298>)
 80042cc:	f004 fb3a 	bl	8008944 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ZERO_POS3_Pin ZERO_POS1_Pin ZERO_POS4_Pin */
  GPIO_InitStruct.Pin = ZERO_POS3_Pin|ZERO_POS1_Pin|ZERO_POS4_Pin;
 80042d0:	2345      	movs	r3, #69	@ 0x45
 80042d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80042d4:	2300      	movs	r3, #0
 80042d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042d8:	2300      	movs	r3, #0
 80042da:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80042dc:	f107 031c 	add.w	r3, r7, #28
 80042e0:	4619      	mov	r1, r3
 80042e2:	485f      	ldr	r0, [pc, #380]	@ (8004460 <MX_GPIO_Init+0x288>)
 80042e4:	f004 f992 	bl	800860c <HAL_GPIO_Init>

  /*Configure GPIO pin : ZERO_POS2_Pin */
  GPIO_InitStruct.Pin = ZERO_POS2_Pin;
 80042e8:	2308      	movs	r3, #8
 80042ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80042ec:	2301      	movs	r3, #1
 80042ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042f0:	2300      	movs	r3, #0
 80042f2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042f4:	2300      	movs	r3, #0
 80042f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ZERO_POS2_GPIO_Port, &GPIO_InitStruct);
 80042f8:	f107 031c 	add.w	r3, r7, #28
 80042fc:	4619      	mov	r1, r3
 80042fe:	4858      	ldr	r0, [pc, #352]	@ (8004460 <MX_GPIO_Init+0x288>)
 8004300:	f004 f984 	bl	800860c <HAL_GPIO_Init>

  /*Configure GPIO pins : EXTI_4_LS3_P_Pin EXTI_5_LS3_N_Pin EXTI_1_LS1_N_Pin */
  GPIO_InitStruct.Pin = EXTI_4_LS3_P_Pin|EXTI_5_LS3_N_Pin|EXTI_1_LS1_N_Pin;
 8004304:	2332      	movs	r3, #50	@ 0x32
 8004306:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004308:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800430c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800430e:	2300      	movs	r3, #0
 8004310:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004312:	f107 031c 	add.w	r3, r7, #28
 8004316:	4619      	mov	r1, r3
 8004318:	4851      	ldr	r0, [pc, #324]	@ (8004460 <MX_GPIO_Init+0x288>)
 800431a:	f004 f977 	bl	800860c <HAL_GPIO_Init>

  /*Configure GPIO pins : ACK_LINE0_Pin ACK_LINE1_Pin ACK_LINE2_Pin */
  GPIO_InitStruct.Pin = ACK_LINE0_Pin|ACK_LINE1_Pin|ACK_LINE2_Pin;
 800431e:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8004322:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004324:	2301      	movs	r3, #1
 8004326:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004328:	2300      	movs	r3, #0
 800432a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800432c:	2300      	movs	r3, #0
 800432e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004330:	f107 031c 	add.w	r3, r7, #28
 8004334:	4619      	mov	r1, r3
 8004336:	484b      	ldr	r0, [pc, #300]	@ (8004464 <MX_GPIO_Init+0x28c>)
 8004338:	f004 f968 	bl	800860c <HAL_GPIO_Init>

  /*Configure GPIO pins : EXTI_0_LS1_P_Pin EXTI_2_LS2_P_Pin EXTI_3_LS2_N_Pin EXTI_6_LS4_P_Pin
                           EXTI_8_LS5_P_Pin EXTI_9_LS5_N_Pin */
  GPIO_InitStruct.Pin = EXTI_0_LS1_P_Pin|EXTI_2_LS2_P_Pin|EXTI_3_LS2_N_Pin|EXTI_6_LS4_P_Pin
 800433c:	f240 334d 	movw	r3, #845	@ 0x34d
 8004340:	61fb      	str	r3, [r7, #28]
                          |EXTI_8_LS5_P_Pin|EXTI_9_LS5_N_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004342:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004346:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004348:	2300      	movs	r3, #0
 800434a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800434c:	f107 031c 	add.w	r3, r7, #28
 8004350:	4619      	mov	r1, r3
 8004352:	4844      	ldr	r0, [pc, #272]	@ (8004464 <MX_GPIO_Init+0x28c>)
 8004354:	f004 f95a 	bl	800860c <HAL_GPIO_Init>

  /*Configure GPIO pins : STEP7_Pin STEP8_Pin DIR6_Pin DIR7_Pin
                           DIR8_Pin STEP5_Pin */
  GPIO_InitStruct.Pin = STEP7_Pin|STEP8_Pin|DIR6_Pin|DIR7_Pin
 8004358:	f24c 4313 	movw	r3, #50195	@ 0xc413
 800435c:	61fb      	str	r3, [r7, #28]
                          |DIR8_Pin|STEP5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800435e:	2301      	movs	r3, #1
 8004360:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004362:	2300      	movs	r3, #0
 8004364:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004366:	2303      	movs	r3, #3
 8004368:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800436a:	f107 031c 	add.w	r3, r7, #28
 800436e:	4619      	mov	r1, r3
 8004370:	483d      	ldr	r0, [pc, #244]	@ (8004468 <MX_GPIO_Init+0x290>)
 8004372:	f004 f94b 	bl	800860c <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR1_Pin DIR2_Pin STEP1_Pin DIR3_Pin
                           STEP2_Pin DIR4_Pin STEP3_Pin STEP4_Pin
                           DIR5_Pin */
  GPIO_InitStruct.Pin = DIR1_Pin|DIR2_Pin|STEP1_Pin|DIR3_Pin
 8004376:	f64f 7380 	movw	r3, #65408	@ 0xff80
 800437a:	61fb      	str	r3, [r7, #28]
                          |STEP2_Pin|DIR4_Pin|STEP3_Pin|STEP4_Pin
                          |DIR5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800437c:	2301      	movs	r3, #1
 800437e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004380:	2300      	movs	r3, #0
 8004382:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004384:	2303      	movs	r3, #3
 8004386:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004388:	f107 031c 	add.w	r3, r7, #28
 800438c:	4619      	mov	r1, r3
 800438e:	4834      	ldr	r0, [pc, #208]	@ (8004460 <MX_GPIO_Init+0x288>)
 8004390:	f004 f93c 	bl	800860c <HAL_GPIO_Init>

  /*Configure GPIO pins : EXTI_10_LS6_P_Pin EXTI_11_LS6_N_Pin EXTI_12_LS7_P_Pin EXTI_13_LS7_N_Pin
                           EXTI_14_LS8_P_Pin EXTI_15_LS8_N_Pin EXTI_7_LS4_N_Pin */
  GPIO_InitStruct.Pin = EXTI_10_LS6_P_Pin|EXTI_11_LS6_N_Pin|EXTI_12_LS7_P_Pin|EXTI_13_LS7_N_Pin
 8004394:	f64f 4380 	movw	r3, #64640	@ 0xfc80
 8004398:	61fb      	str	r3, [r7, #28]
                          |EXTI_14_LS8_P_Pin|EXTI_15_LS8_N_Pin|EXTI_7_LS4_N_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800439a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800439e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043a0:	2300      	movs	r3, #0
 80043a2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80043a4:	f107 031c 	add.w	r3, r7, #28
 80043a8:	4619      	mov	r1, r3
 80043aa:	4831      	ldr	r0, [pc, #196]	@ (8004470 <MX_GPIO_Init+0x298>)
 80043ac:	f004 f92e 	bl	800860c <HAL_GPIO_Init>

  /*Configure GPIO pin : STEP6_Pin */
  GPIO_InitStruct.Pin = STEP6_Pin;
 80043b0:	2380      	movs	r3, #128	@ 0x80
 80043b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80043b4:	2301      	movs	r3, #1
 80043b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043b8:	2300      	movs	r3, #0
 80043ba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043bc:	2303      	movs	r3, #3
 80043be:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(STEP6_GPIO_Port, &GPIO_InitStruct);
 80043c0:	f107 031c 	add.w	r3, r7, #28
 80043c4:	4619      	mov	r1, r3
 80043c6:	4827      	ldr	r0, [pc, #156]	@ (8004464 <MX_GPIO_Init+0x28c>)
 80043c8:	f004 f920 	bl	800860c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_STATE_Pin SPI3_NSS2_Pin */
  GPIO_InitStruct.Pin = LED_STATE_Pin|SPI3_NSS2_Pin;
 80043cc:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 80043d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80043d2:	2301      	movs	r3, #1
 80043d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043d6:	2300      	movs	r3, #0
 80043d8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043da:	2300      	movs	r3, #0
 80043dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043de:	f107 031c 	add.w	r3, r7, #28
 80043e2:	4619      	mov	r1, r3
 80043e4:	4821      	ldr	r0, [pc, #132]	@ (800446c <MX_GPIO_Init+0x294>)
 80043e6:	f004 f911 	bl	800860c <HAL_GPIO_Init>

  /*Configure GPIO pins : STARTUP_OPTION1_Pin ZERO_POS8_Pin ZERO_POS7_Pin ZERO_POS6_Pin */
  GPIO_InitStruct.Pin = STARTUP_OPTION1_Pin|ZERO_POS8_Pin|ZERO_POS7_Pin|ZERO_POS6_Pin;
 80043ea:	2374      	movs	r3, #116	@ 0x74
 80043ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80043ee:	2300      	movs	r3, #0
 80043f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043f2:	2300      	movs	r3, #0
 80043f4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80043f6:	f107 031c 	add.w	r3, r7, #28
 80043fa:	4619      	mov	r1, r3
 80043fc:	481c      	ldr	r0, [pc, #112]	@ (8004470 <MX_GPIO_Init+0x298>)
 80043fe:	f004 f905 	bl	800860c <HAL_GPIO_Init>

  /*Configure GPIO pin : READY_Pin */
  GPIO_InitStruct.Pin = READY_Pin;
 8004402:	2308      	movs	r3, #8
 8004404:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004406:	2301      	movs	r3, #1
 8004408:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800440a:	2300      	movs	r3, #0
 800440c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800440e:	2300      	movs	r3, #0
 8004410:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(READY_GPIO_Port, &GPIO_InitStruct);
 8004412:	f107 031c 	add.w	r3, r7, #28
 8004416:	4619      	mov	r1, r3
 8004418:	4815      	ldr	r0, [pc, #84]	@ (8004470 <MX_GPIO_Init+0x298>)
 800441a:	f004 f8f7 	bl	800860c <HAL_GPIO_Init>

  /*Configure GPIO pin : ZERO_POS5_Pin */
  GPIO_InitStruct.Pin = ZERO_POS5_Pin;
 800441e:	2320      	movs	r3, #32
 8004420:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004422:	2300      	movs	r3, #0
 8004424:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004426:	2300      	movs	r3, #0
 8004428:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ZERO_POS5_GPIO_Port, &GPIO_InitStruct);
 800442a:	f107 031c 	add.w	r3, r7, #28
 800442e:	4619      	mov	r1, r3
 8004430:	480d      	ldr	r0, [pc, #52]	@ (8004468 <MX_GPIO_Init+0x290>)
 8004432:	f004 f8eb 	bl	800860c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI3_NSS1_Pin SPI3_NSS0_Pin */
  GPIO_InitStruct.Pin = SPI3_NSS1_Pin|SPI3_NSS0_Pin;
 8004436:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800443a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800443c:	2301      	movs	r3, #1
 800443e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004440:	2300      	movs	r3, #0
 8004442:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004444:	2300      	movs	r3, #0
 8004446:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004448:	f107 031c 	add.w	r3, r7, #28
 800444c:	4619      	mov	r1, r3
 800444e:	4806      	ldr	r0, [pc, #24]	@ (8004468 <MX_GPIO_Init+0x290>)
 8004450:	f004 f8dc 	bl	800860c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8004454:	bf00      	nop
 8004456:	3730      	adds	r7, #48	@ 0x30
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}
 800445c:	40023800 	.word	0x40023800
 8004460:	40021000 	.word	0x40021000
 8004464:	40020800 	.word	0x40020800
 8004468:	40020400 	.word	0x40020400
 800446c:	40020000 	.word	0x40020000
 8004470:	40020c00 	.word	0x40020c00

08004474 <startTimerTIM2>:

/** Запуск таймера для отсчета времени в микросекундах
 * 	Используется таймер TIM2
 */
void startTimerTIM2(void)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8004478:	4802      	ldr	r0, [pc, #8]	@ (8004484 <startTimerTIM2+0x10>)
 800447a:	f005 fa5b 	bl	8009934 <HAL_TIM_Base_Start_IT>
}
 800447e:	bf00      	nop
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	2000d9a8 	.word	0x2000d9a8

08004488 <stopTimerTIM2>:

/** Остановка таймера для отсчета времени в микросекундах
 * 	Используется таймер TIM2
 */
void stopTimerTIM2(void)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim2);
 800448c:	4802      	ldr	r0, [pc, #8]	@ (8004498 <stopTimerTIM2+0x10>)
 800448e:	f005 fac1 	bl	8009a14 <HAL_TIM_Base_Stop_IT>
}
 8004492:	bf00      	nop
 8004494:	bd80      	pop	{r7, pc}
 8004496:	bf00      	nop
 8004498:	2000d9a8 	.word	0x2000d9a8

0800449c <resetTimerTIM2>:

/** Функция сброса счетчика таймера в 0
 * 	Используется таймер TIM2
 */
void resetTimerTIM2(void)
{
 800449c:	b480      	push	{r7}
 800449e:	af00      	add	r7, sp, #0
	TIM2->CNT = 0;
 80044a0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80044a4:	2200      	movs	r2, #0
 80044a6:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80044a8:	bf00      	nop
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr

080044b2 <getMicrosecondsTIM2>:
 * Используется таймер TIM2
 * Частота работы таймера 1МГц
 * 1 тик таймера = 1 мкс
 */
uint32_t getMicrosecondsTIM2(void)
{
 80044b2:	b480      	push	{r7}
 80044b4:	af00      	add	r7, sp, #0
	return TIM2->CNT;
 80044b6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80044ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 80044bc:	4618      	mov	r0, r3
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr
	...

080044c8 <udpReceiveHandler>:

/**
 *
 */
void udpReceiveHandler(void)
{
 80044c8:	b590      	push	{r4, r7, lr}
 80044ca:	b0d7      	sub	sp, #348	@ 0x15c
 80044cc:	af02      	add	r7, sp, #8
	/* Буфер данных для отправки ответного сообщения по UDP */
	char data[256];

	/* Тестовые функции переинициализации буфера G - кода */
	if(strcmp(rxBuf, udpcommands.test1) == 0)
 80044ce:	4baf      	ldr	r3, [pc, #700]	@ (800478c <udpReceiveHandler+0x2c4>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4619      	mov	r1, r3
 80044d4:	48ae      	ldr	r0, [pc, #696]	@ (8004790 <udpReceiveHandler+0x2c8>)
 80044d6:	f7fb fe7b 	bl	80001d0 <strcmp>
 80044da:	4603      	mov	r3, r0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d136      	bne.n	800454e <udpReceiveHandler+0x86>
	{
		/* Проверка уже запущенного процесса работы станка */
		if(_runFlag == true)
 80044e0:	4bac      	ldr	r3, [pc, #688]	@ (8004794 <udpReceiveHandler+0x2cc>)
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d011      	beq.n	800450c <udpReceiveHandler+0x44>
		{
			sprintf(data, "%ld - STM32: Attention! The machine is running, unable to complete test!\n", counter);
 80044e8:	4bab      	ldr	r3, [pc, #684]	@ (8004798 <udpReceiveHandler+0x2d0>)
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	463b      	mov	r3, r7
 80044ee:	49ab      	ldr	r1, [pc, #684]	@ (800479c <udpReceiveHandler+0x2d4>)
 80044f0:	4618      	mov	r0, r3
 80044f2:	f013 f885 	bl	8017600 <siprintf>

			udpClientSend(data);
 80044f6:	463b      	mov	r3, r7
 80044f8:	4618      	mov	r0, r3
 80044fa:	f001 f81b 	bl	8005534 <udpClientSend>

			memset(rxBuf, 0, 128);
 80044fe:	2280      	movs	r2, #128	@ 0x80
 8004500:	2100      	movs	r1, #0
 8004502:	48a3      	ldr	r0, [pc, #652]	@ (8004790 <udpReceiveHandler+0x2c8>)
 8004504:	f013 f90b 	bl	801771e <memset>
			return;
 8004508:	f000 bf8f 	b.w	800542a <udpReceiveHandler+0xf62>
		}

		fifoClear(&fifoBufSteps);
 800450c:	48a4      	ldr	r0, [pc, #656]	@ (80047a0 <udpReceiveHandler+0x2d8>)
 800450e:	f7fd fe8d 	bl	800222c <fifoClear>

		/* Переинициализация FIFO буфера G - команд */
		fifoInitChar(&fifoGcodeBuf, GcodeBuffer1, 256);
 8004512:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004516:	49a3      	ldr	r1, [pc, #652]	@ (80047a4 <udpReceiveHandler+0x2dc>)
 8004518:	48a3      	ldr	r0, [pc, #652]	@ (80047a8 <udpReceiveHandler+0x2e0>)
 800451a:	f7fd ff53 	bl	80023c4 <fifoInitChar>
		fifoGcodeBuf.head = 19;
 800451e:	4ba2      	ldr	r3, [pc, #648]	@ (80047a8 <udpReceiveHandler+0x2e0>)
 8004520:	2213      	movs	r2, #19
 8004522:	609a      	str	r2, [r3, #8]

		ghandler._workState = HANDLER_GCODE_READY;
 8004524:	4ba1      	ldr	r3, [pc, #644]	@ (80047ac <udpReceiveHandler+0x2e4>)
 8004526:	2202      	movs	r2, #2
 8004528:	711a      	strb	r2, [r3, #4]

		sprintf(data, "%ld - STM32: Test - 1 has been initialized!\n", counter);
 800452a:	4b9b      	ldr	r3, [pc, #620]	@ (8004798 <udpReceiveHandler+0x2d0>)
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	463b      	mov	r3, r7
 8004530:	499f      	ldr	r1, [pc, #636]	@ (80047b0 <udpReceiveHandler+0x2e8>)
 8004532:	4618      	mov	r0, r3
 8004534:	f013 f864 	bl	8017600 <siprintf>

		udpClientSend(data);
 8004538:	463b      	mov	r3, r7
 800453a:	4618      	mov	r0, r3
 800453c:	f000 fffa 	bl	8005534 <udpClientSend>

		memset(rxBuf, 0, 128);
 8004540:	2280      	movs	r2, #128	@ 0x80
 8004542:	2100      	movs	r1, #0
 8004544:	4892      	ldr	r0, [pc, #584]	@ (8004790 <udpReceiveHandler+0x2c8>)
 8004546:	f013 f8ea 	bl	801771e <memset>
		return;
 800454a:	f000 bf6e 	b.w	800542a <udpReceiveHandler+0xf62>
	}

	if(strcmp(rxBuf, udpcommands.test2) == 0)
 800454e:	4b8f      	ldr	r3, [pc, #572]	@ (800478c <udpReceiveHandler+0x2c4>)
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	4619      	mov	r1, r3
 8004554:	488e      	ldr	r0, [pc, #568]	@ (8004790 <udpReceiveHandler+0x2c8>)
 8004556:	f7fb fe3b 	bl	80001d0 <strcmp>
 800455a:	4603      	mov	r3, r0
 800455c:	2b00      	cmp	r3, #0
 800455e:	d136      	bne.n	80045ce <udpReceiveHandler+0x106>
	{
		/* Проверка уже запущенного процесса работы станка */
		if(_runFlag == true)
 8004560:	4b8c      	ldr	r3, [pc, #560]	@ (8004794 <udpReceiveHandler+0x2cc>)
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d011      	beq.n	800458c <udpReceiveHandler+0xc4>
		{
			sprintf(data, "%ld - STM32: Attention! The machine is running, unable to complete test!\n", counter);
 8004568:	4b8b      	ldr	r3, [pc, #556]	@ (8004798 <udpReceiveHandler+0x2d0>)
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	463b      	mov	r3, r7
 800456e:	498b      	ldr	r1, [pc, #556]	@ (800479c <udpReceiveHandler+0x2d4>)
 8004570:	4618      	mov	r0, r3
 8004572:	f013 f845 	bl	8017600 <siprintf>

			udpClientSend(data);
 8004576:	463b      	mov	r3, r7
 8004578:	4618      	mov	r0, r3
 800457a:	f000 ffdb 	bl	8005534 <udpClientSend>

			memset(rxBuf, 0, 128);
 800457e:	2280      	movs	r2, #128	@ 0x80
 8004580:	2100      	movs	r1, #0
 8004582:	4883      	ldr	r0, [pc, #524]	@ (8004790 <udpReceiveHandler+0x2c8>)
 8004584:	f013 f8cb 	bl	801771e <memset>
			return;
 8004588:	f000 bf4f 	b.w	800542a <udpReceiveHandler+0xf62>
		}

		fifoClear(&fifoBufSteps);
 800458c:	4884      	ldr	r0, [pc, #528]	@ (80047a0 <udpReceiveHandler+0x2d8>)
 800458e:	f7fd fe4d 	bl	800222c <fifoClear>

		/* Переинициализация FIFO буфера G - команд */
		fifoInitChar(&fifoGcodeBuf, GcodeBuffer2, 256);
 8004592:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004596:	4987      	ldr	r1, [pc, #540]	@ (80047b4 <udpReceiveHandler+0x2ec>)
 8004598:	4883      	ldr	r0, [pc, #524]	@ (80047a8 <udpReceiveHandler+0x2e0>)
 800459a:	f7fd ff13 	bl	80023c4 <fifoInitChar>
		fifoGcodeBuf.head = 119;
 800459e:	4b82      	ldr	r3, [pc, #520]	@ (80047a8 <udpReceiveHandler+0x2e0>)
 80045a0:	2277      	movs	r2, #119	@ 0x77
 80045a2:	609a      	str	r2, [r3, #8]

		ghandler._workState = HANDLER_GCODE_READY;
 80045a4:	4b81      	ldr	r3, [pc, #516]	@ (80047ac <udpReceiveHandler+0x2e4>)
 80045a6:	2202      	movs	r2, #2
 80045a8:	711a      	strb	r2, [r3, #4]

		sprintf(data, "%ld - STM32: Test - 2 has been initialized!\n", counter);
 80045aa:	4b7b      	ldr	r3, [pc, #492]	@ (8004798 <udpReceiveHandler+0x2d0>)
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	463b      	mov	r3, r7
 80045b0:	4981      	ldr	r1, [pc, #516]	@ (80047b8 <udpReceiveHandler+0x2f0>)
 80045b2:	4618      	mov	r0, r3
 80045b4:	f013 f824 	bl	8017600 <siprintf>

		udpClientSend(data);
 80045b8:	463b      	mov	r3, r7
 80045ba:	4618      	mov	r0, r3
 80045bc:	f000 ffba 	bl	8005534 <udpClientSend>

		memset(rxBuf, 0, 128);
 80045c0:	2280      	movs	r2, #128	@ 0x80
 80045c2:	2100      	movs	r1, #0
 80045c4:	4872      	ldr	r0, [pc, #456]	@ (8004790 <udpReceiveHandler+0x2c8>)
 80045c6:	f013 f8aa 	bl	801771e <memset>
		return;
 80045ca:	f000 bf2e 	b.w	800542a <udpReceiveHandler+0xf62>
	}

	if(strcmp(rxBuf, udpcommands.test3) == 0)
 80045ce:	4b6f      	ldr	r3, [pc, #444]	@ (800478c <udpReceiveHandler+0x2c4>)
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	4619      	mov	r1, r3
 80045d4:	486e      	ldr	r0, [pc, #440]	@ (8004790 <udpReceiveHandler+0x2c8>)
 80045d6:	f7fb fdfb 	bl	80001d0 <strcmp>
 80045da:	4603      	mov	r3, r0
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d136      	bne.n	800464e <udpReceiveHandler+0x186>
	{
		/* Проверка уже запущенного процесса работы станка */
		if(_runFlag == true)
 80045e0:	4b6c      	ldr	r3, [pc, #432]	@ (8004794 <udpReceiveHandler+0x2cc>)
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d011      	beq.n	800460c <udpReceiveHandler+0x144>
		{
			sprintf(data, "%ld - STM32: Attention! The machine is running, unable to complete test!\n", counter);
 80045e8:	4b6b      	ldr	r3, [pc, #428]	@ (8004798 <udpReceiveHandler+0x2d0>)
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	463b      	mov	r3, r7
 80045ee:	496b      	ldr	r1, [pc, #428]	@ (800479c <udpReceiveHandler+0x2d4>)
 80045f0:	4618      	mov	r0, r3
 80045f2:	f013 f805 	bl	8017600 <siprintf>

			udpClientSend(data);
 80045f6:	463b      	mov	r3, r7
 80045f8:	4618      	mov	r0, r3
 80045fa:	f000 ff9b 	bl	8005534 <udpClientSend>

			memset(rxBuf, 0, 128);
 80045fe:	2280      	movs	r2, #128	@ 0x80
 8004600:	2100      	movs	r1, #0
 8004602:	4863      	ldr	r0, [pc, #396]	@ (8004790 <udpReceiveHandler+0x2c8>)
 8004604:	f013 f88b 	bl	801771e <memset>
			return;
 8004608:	f000 bf0f 	b.w	800542a <udpReceiveHandler+0xf62>
		}

		fifoClear(&fifoBufSteps);
 800460c:	4864      	ldr	r0, [pc, #400]	@ (80047a0 <udpReceiveHandler+0x2d8>)
 800460e:	f7fd fe0d 	bl	800222c <fifoClear>

		/* Переинициализация FIFO буфера G - команд */
		fifoInitChar(&fifoGcodeBuf, GcodeBuffer3, 256);
 8004612:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004616:	4969      	ldr	r1, [pc, #420]	@ (80047bc <udpReceiveHandler+0x2f4>)
 8004618:	4863      	ldr	r0, [pc, #396]	@ (80047a8 <udpReceiveHandler+0x2e0>)
 800461a:	f7fd fed3 	bl	80023c4 <fifoInitChar>
		fifoGcodeBuf.head = 129;
 800461e:	4b62      	ldr	r3, [pc, #392]	@ (80047a8 <udpReceiveHandler+0x2e0>)
 8004620:	2281      	movs	r2, #129	@ 0x81
 8004622:	609a      	str	r2, [r3, #8]

		ghandler._workState = HANDLER_GCODE_READY;
 8004624:	4b61      	ldr	r3, [pc, #388]	@ (80047ac <udpReceiveHandler+0x2e4>)
 8004626:	2202      	movs	r2, #2
 8004628:	711a      	strb	r2, [r3, #4]

		sprintf(data, "%ld - STM32: Test - 3 has been initialized!\n", counter);
 800462a:	4b5b      	ldr	r3, [pc, #364]	@ (8004798 <udpReceiveHandler+0x2d0>)
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	463b      	mov	r3, r7
 8004630:	4963      	ldr	r1, [pc, #396]	@ (80047c0 <udpReceiveHandler+0x2f8>)
 8004632:	4618      	mov	r0, r3
 8004634:	f012 ffe4 	bl	8017600 <siprintf>

		udpClientSend(data);
 8004638:	463b      	mov	r3, r7
 800463a:	4618      	mov	r0, r3
 800463c:	f000 ff7a 	bl	8005534 <udpClientSend>

		memset(rxBuf, 0, 128);
 8004640:	2280      	movs	r2, #128	@ 0x80
 8004642:	2100      	movs	r1, #0
 8004644:	4852      	ldr	r0, [pc, #328]	@ (8004790 <udpReceiveHandler+0x2c8>)
 8004646:	f013 f86a 	bl	801771e <memset>
		return;
 800464a:	f000 beee 	b.w	800542a <udpReceiveHandler+0xf62>
	}

	if(strcmp(rxBuf, udpcommands.test4) == 0)
 800464e:	4b4f      	ldr	r3, [pc, #316]	@ (800478c <udpReceiveHandler+0x2c4>)
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	4619      	mov	r1, r3
 8004654:	484e      	ldr	r0, [pc, #312]	@ (8004790 <udpReceiveHandler+0x2c8>)
 8004656:	f7fb fdbb 	bl	80001d0 <strcmp>
 800465a:	4603      	mov	r3, r0
 800465c:	2b00      	cmp	r3, #0
 800465e:	d136      	bne.n	80046ce <udpReceiveHandler+0x206>
	{
		/* Проверка уже запущенного процесса работы станка */
		if(_runFlag == true)
 8004660:	4b4c      	ldr	r3, [pc, #304]	@ (8004794 <udpReceiveHandler+0x2cc>)
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d011      	beq.n	800468c <udpReceiveHandler+0x1c4>
		{
			sprintf(data, "%ld - STM32: Attention! The machine is running, unable to complete test!\n", counter);
 8004668:	4b4b      	ldr	r3, [pc, #300]	@ (8004798 <udpReceiveHandler+0x2d0>)
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	463b      	mov	r3, r7
 800466e:	494b      	ldr	r1, [pc, #300]	@ (800479c <udpReceiveHandler+0x2d4>)
 8004670:	4618      	mov	r0, r3
 8004672:	f012 ffc5 	bl	8017600 <siprintf>

			udpClientSend(data);
 8004676:	463b      	mov	r3, r7
 8004678:	4618      	mov	r0, r3
 800467a:	f000 ff5b 	bl	8005534 <udpClientSend>

			memset(rxBuf, 0, 128);
 800467e:	2280      	movs	r2, #128	@ 0x80
 8004680:	2100      	movs	r1, #0
 8004682:	4843      	ldr	r0, [pc, #268]	@ (8004790 <udpReceiveHandler+0x2c8>)
 8004684:	f013 f84b 	bl	801771e <memset>
			return;
 8004688:	f000 becf 	b.w	800542a <udpReceiveHandler+0xf62>
		}

		fifoClear(&fifoBufSteps);
 800468c:	4844      	ldr	r0, [pc, #272]	@ (80047a0 <udpReceiveHandler+0x2d8>)
 800468e:	f7fd fdcd 	bl	800222c <fifoClear>

		/* Переинициализация FIFO буфера G - команд */
		fifoInitChar(&fifoGcodeBuf, GcodeBuffer4, 256);
 8004692:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004696:	494b      	ldr	r1, [pc, #300]	@ (80047c4 <udpReceiveHandler+0x2fc>)
 8004698:	4843      	ldr	r0, [pc, #268]	@ (80047a8 <udpReceiveHandler+0x2e0>)
 800469a:	f7fd fe93 	bl	80023c4 <fifoInitChar>
		fifoGcodeBuf.head = 243;
 800469e:	4b42      	ldr	r3, [pc, #264]	@ (80047a8 <udpReceiveHandler+0x2e0>)
 80046a0:	22f3      	movs	r2, #243	@ 0xf3
 80046a2:	609a      	str	r2, [r3, #8]

		ghandler._workState = HANDLER_GCODE_READY;
 80046a4:	4b41      	ldr	r3, [pc, #260]	@ (80047ac <udpReceiveHandler+0x2e4>)
 80046a6:	2202      	movs	r2, #2
 80046a8:	711a      	strb	r2, [r3, #4]

		sprintf(data, "%ld - STM32: Test - 4 has been initialized!\n", counter);
 80046aa:	4b3b      	ldr	r3, [pc, #236]	@ (8004798 <udpReceiveHandler+0x2d0>)
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	463b      	mov	r3, r7
 80046b0:	4945      	ldr	r1, [pc, #276]	@ (80047c8 <udpReceiveHandler+0x300>)
 80046b2:	4618      	mov	r0, r3
 80046b4:	f012 ffa4 	bl	8017600 <siprintf>

		udpClientSend(data);
 80046b8:	463b      	mov	r3, r7
 80046ba:	4618      	mov	r0, r3
 80046bc:	f000 ff3a 	bl	8005534 <udpClientSend>

		memset(rxBuf, 0, 128);
 80046c0:	2280      	movs	r2, #128	@ 0x80
 80046c2:	2100      	movs	r1, #0
 80046c4:	4832      	ldr	r0, [pc, #200]	@ (8004790 <udpReceiveHandler+0x2c8>)
 80046c6:	f013 f82a 	bl	801771e <memset>
		return;
 80046ca:	f000 beae 	b.w	800542a <udpReceiveHandler+0xf62>
	}

	if(strcmp(rxBuf, udpcommands.circle) == 0)
 80046ce:	4b2f      	ldr	r3, [pc, #188]	@ (800478c <udpReceiveHandler+0x2c4>)
 80046d0:	691b      	ldr	r3, [r3, #16]
 80046d2:	4619      	mov	r1, r3
 80046d4:	482e      	ldr	r0, [pc, #184]	@ (8004790 <udpReceiveHandler+0x2c8>)
 80046d6:	f7fb fd7b 	bl	80001d0 <strcmp>
 80046da:	4603      	mov	r3, r0
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d136      	bne.n	800474e <udpReceiveHandler+0x286>
	{
		/* Проверка уже запущенного процесса работы станка */
		if(_runFlag == true)
 80046e0:	4b2c      	ldr	r3, [pc, #176]	@ (8004794 <udpReceiveHandler+0x2cc>)
 80046e2:	781b      	ldrb	r3, [r3, #0]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d011      	beq.n	800470c <udpReceiveHandler+0x244>
		{
			sprintf(data, "%ld - STM32: Attention! The machine is running, unable to complete test!\n", counter);
 80046e8:	4b2b      	ldr	r3, [pc, #172]	@ (8004798 <udpReceiveHandler+0x2d0>)
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	463b      	mov	r3, r7
 80046ee:	492b      	ldr	r1, [pc, #172]	@ (800479c <udpReceiveHandler+0x2d4>)
 80046f0:	4618      	mov	r0, r3
 80046f2:	f012 ff85 	bl	8017600 <siprintf>

			udpClientSend(data);
 80046f6:	463b      	mov	r3, r7
 80046f8:	4618      	mov	r0, r3
 80046fa:	f000 ff1b 	bl	8005534 <udpClientSend>

			memset(rxBuf, 0, 128);
 80046fe:	2280      	movs	r2, #128	@ 0x80
 8004700:	2100      	movs	r1, #0
 8004702:	4823      	ldr	r0, [pc, #140]	@ (8004790 <udpReceiveHandler+0x2c8>)
 8004704:	f013 f80b 	bl	801771e <memset>
			return;
 8004708:	f000 be8f 	b.w	800542a <udpReceiveHandler+0xf62>
		}

		fifoClear(&fifoBufSteps);
 800470c:	4824      	ldr	r0, [pc, #144]	@ (80047a0 <udpReceiveHandler+0x2d8>)
 800470e:	f7fd fd8d 	bl	800222c <fifoClear>

		/* Переинициализация FIFO буфера G - команд */
		fifoInitChar(&fifoGcodeBuf, GcodeBufferCircle, 256);
 8004712:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004716:	492d      	ldr	r1, [pc, #180]	@ (80047cc <udpReceiveHandler+0x304>)
 8004718:	4823      	ldr	r0, [pc, #140]	@ (80047a8 <udpReceiveHandler+0x2e0>)
 800471a:	f7fd fe53 	bl	80023c4 <fifoInitChar>
		fifoGcodeBuf.head = 4;
 800471e:	4b22      	ldr	r3, [pc, #136]	@ (80047a8 <udpReceiveHandler+0x2e0>)
 8004720:	2204      	movs	r2, #4
 8004722:	609a      	str	r2, [r3, #8]

		ghandler._workState = HANDLER_GCODE_READY;
 8004724:	4b21      	ldr	r3, [pc, #132]	@ (80047ac <udpReceiveHandler+0x2e4>)
 8004726:	2202      	movs	r2, #2
 8004728:	711a      	strb	r2, [r3, #4]

		sprintf(data, "%ld - STM32: Circle has been initialized!\n", counter);
 800472a:	4b1b      	ldr	r3, [pc, #108]	@ (8004798 <udpReceiveHandler+0x2d0>)
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	463b      	mov	r3, r7
 8004730:	4927      	ldr	r1, [pc, #156]	@ (80047d0 <udpReceiveHandler+0x308>)
 8004732:	4618      	mov	r0, r3
 8004734:	f012 ff64 	bl	8017600 <siprintf>

		udpClientSend(data);
 8004738:	463b      	mov	r3, r7
 800473a:	4618      	mov	r0, r3
 800473c:	f000 fefa 	bl	8005534 <udpClientSend>

		memset(rxBuf, 0, 128);
 8004740:	2280      	movs	r2, #128	@ 0x80
 8004742:	2100      	movs	r1, #0
 8004744:	4812      	ldr	r0, [pc, #72]	@ (8004790 <udpReceiveHandler+0x2c8>)
 8004746:	f012 ffea 	bl	801771e <memset>
		return;
 800474a:	f000 be6e 	b.w	800542a <udpReceiveHandler+0xf62>
	}

	if(strcmp(rxBuf, udpcommands.example) == 0)
 800474e:	4b0f      	ldr	r3, [pc, #60]	@ (800478c <udpReceiveHandler+0x2c4>)
 8004750:	695b      	ldr	r3, [r3, #20]
 8004752:	4619      	mov	r1, r3
 8004754:	480e      	ldr	r0, [pc, #56]	@ (8004790 <udpReceiveHandler+0x2c8>)
 8004756:	f7fb fd3b 	bl	80001d0 <strcmp>
 800475a:	4603      	mov	r3, r0
 800475c:	2b00      	cmp	r3, #0
 800475e:	d15a      	bne.n	8004816 <udpReceiveHandler+0x34e>
	{
		/* Проверка уже запущенного процесса работы станка */
		if(_runFlag == true)
 8004760:	4b0c      	ldr	r3, [pc, #48]	@ (8004794 <udpReceiveHandler+0x2cc>)
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d035      	beq.n	80047d4 <udpReceiveHandler+0x30c>
		{
			sprintf(data, "%ld - STM32: Attention! The machine is running, unable to complete test!\n", counter);
 8004768:	4b0b      	ldr	r3, [pc, #44]	@ (8004798 <udpReceiveHandler+0x2d0>)
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	463b      	mov	r3, r7
 800476e:	490b      	ldr	r1, [pc, #44]	@ (800479c <udpReceiveHandler+0x2d4>)
 8004770:	4618      	mov	r0, r3
 8004772:	f012 ff45 	bl	8017600 <siprintf>

			udpClientSend(data);
 8004776:	463b      	mov	r3, r7
 8004778:	4618      	mov	r0, r3
 800477a:	f000 fedb 	bl	8005534 <udpClientSend>

			memset(rxBuf, 0, 128);
 800477e:	2280      	movs	r2, #128	@ 0x80
 8004780:	2100      	movs	r1, #0
 8004782:	4803      	ldr	r0, [pc, #12]	@ (8004790 <udpReceiveHandler+0x2c8>)
 8004784:	f012 ffcb 	bl	801771e <memset>
			return;
 8004788:	f000 be4f 	b.w	800542a <udpReceiveHandler+0xf62>
 800478c:	2000081c 	.word	0x2000081c
 8004790:	2000e4a4 	.word	0x2000e4a4
 8004794:	2000e49c 	.word	0x2000e49c
 8004798:	2000e524 	.word	0x2000e524
 800479c:	0801fb24 	.word	0x0801fb24
 80047a0:	2000d820 	.word	0x2000d820
 80047a4:	20000024 	.word	0x20000024
 80047a8:	20000fec 	.word	0x20000fec
 80047ac:	2000e494 	.word	0x2000e494
 80047b0:	0801fb70 	.word	0x0801fb70
 80047b4:	20000070 	.word	0x20000070
 80047b8:	0801fba0 	.word	0x0801fba0
 80047bc:	2000024c 	.word	0x2000024c
 80047c0:	0801fbd0 	.word	0x0801fbd0
 80047c4:	20000450 	.word	0x20000450
 80047c8:	0801fc00 	.word	0x0801fc00
 80047cc:	20000014 	.word	0x20000014
 80047d0:	0801fc30 	.word	0x0801fc30
		}

		fifoClear(&fifoBufSteps);
 80047d4:	48b2      	ldr	r0, [pc, #712]	@ (8004aa0 <udpReceiveHandler+0x5d8>)
 80047d6:	f7fd fd29 	bl	800222c <fifoClear>

		/* Переинициализация FIFO буфера G - команд */
		fifoInitChar(&fifoGcodeBuf, GcodeBufferExample, 256);
 80047da:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80047de:	49b1      	ldr	r1, [pc, #708]	@ (8004aa4 <udpReceiveHandler+0x5dc>)
 80047e0:	48b1      	ldr	r0, [pc, #708]	@ (8004aa8 <udpReceiveHandler+0x5e0>)
 80047e2:	f7fd fdef 	bl	80023c4 <fifoInitChar>
		fifoGcodeBuf.head = 5;
 80047e6:	4bb0      	ldr	r3, [pc, #704]	@ (8004aa8 <udpReceiveHandler+0x5e0>)
 80047e8:	2205      	movs	r2, #5
 80047ea:	609a      	str	r2, [r3, #8]

		ghandler._workState = HANDLER_GCODE_READY;
 80047ec:	4baf      	ldr	r3, [pc, #700]	@ (8004aac <udpReceiveHandler+0x5e4>)
 80047ee:	2202      	movs	r2, #2
 80047f0:	711a      	strb	r2, [r3, #4]

		sprintf(data, "%ld - STM32: Example has been initialized!\n", counter);
 80047f2:	4baf      	ldr	r3, [pc, #700]	@ (8004ab0 <udpReceiveHandler+0x5e8>)
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	463b      	mov	r3, r7
 80047f8:	49ae      	ldr	r1, [pc, #696]	@ (8004ab4 <udpReceiveHandler+0x5ec>)
 80047fa:	4618      	mov	r0, r3
 80047fc:	f012 ff00 	bl	8017600 <siprintf>

		udpClientSend(data);
 8004800:	463b      	mov	r3, r7
 8004802:	4618      	mov	r0, r3
 8004804:	f000 fe96 	bl	8005534 <udpClientSend>

		memset(rxBuf, 0, 128);
 8004808:	2280      	movs	r2, #128	@ 0x80
 800480a:	2100      	movs	r1, #0
 800480c:	48aa      	ldr	r0, [pc, #680]	@ (8004ab8 <udpReceiveHandler+0x5f0>)
 800480e:	f012 ff86 	bl	801771e <memset>
		return;
 8004812:	f000 be0a 	b.w	800542a <udpReceiveHandler+0xf62>
	}

	/* Запуск процесса работы станка */
	if(strcmp(rxBuf, udpcommands.start) == 0)
 8004816:	4ba9      	ldr	r3, [pc, #676]	@ (8004abc <udpReceiveHandler+0x5f4>)
 8004818:	699b      	ldr	r3, [r3, #24]
 800481a:	4619      	mov	r1, r3
 800481c:	48a6      	ldr	r0, [pc, #664]	@ (8004ab8 <udpReceiveHandler+0x5f0>)
 800481e:	f7fb fcd7 	bl	80001d0 <strcmp>
 8004822:	4603      	mov	r3, r0
 8004824:	2b00      	cmp	r3, #0
 8004826:	d145      	bne.n	80048b4 <udpReceiveHandler+0x3ec>
	{
		/* Проверка уже запущенного процесса работы станка */
		if(_runFlag == true)
 8004828:	4ba5      	ldr	r3, [pc, #660]	@ (8004ac0 <udpReceiveHandler+0x5f8>)
 800482a:	781b      	ldrb	r3, [r3, #0]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d011      	beq.n	8004854 <udpReceiveHandler+0x38c>
		{
			sprintf(data, "%ld - STM32: Attention! The machine is already running!\n", counter);
 8004830:	4b9f      	ldr	r3, [pc, #636]	@ (8004ab0 <udpReceiveHandler+0x5e8>)
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	463b      	mov	r3, r7
 8004836:	49a3      	ldr	r1, [pc, #652]	@ (8004ac4 <udpReceiveHandler+0x5fc>)
 8004838:	4618      	mov	r0, r3
 800483a:	f012 fee1 	bl	8017600 <siprintf>

			udpClientSend(data);
 800483e:	463b      	mov	r3, r7
 8004840:	4618      	mov	r0, r3
 8004842:	f000 fe77 	bl	8005534 <udpClientSend>

			memset(rxBuf, 0, 128);
 8004846:	2280      	movs	r2, #128	@ 0x80
 8004848:	2100      	movs	r1, #0
 800484a:	489b      	ldr	r0, [pc, #620]	@ (8004ab8 <udpReceiveHandler+0x5f0>)
 800484c:	f012 ff67 	bl	801771e <memset>
			return;
 8004850:	f000 bdeb 	b.w	800542a <udpReceiveHandler+0xf62>
		}

		if(availableForRead(&fifoBufSteps) == FIFO_EMPTY)
 8004854:	4892      	ldr	r0, [pc, #584]	@ (8004aa0 <udpReceiveHandler+0x5d8>)
 8004856:	f7fd fd35 	bl	80022c4 <availableForRead>
 800485a:	4603      	mov	r3, r0
 800485c:	2b02      	cmp	r3, #2
 800485e:	d111      	bne.n	8004884 <udpReceiveHandler+0x3bc>
		{
			sprintf(data, "%ld - STM32: G-code program is empty!\n", counter);
 8004860:	4b93      	ldr	r3, [pc, #588]	@ (8004ab0 <udpReceiveHandler+0x5e8>)
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	463b      	mov	r3, r7
 8004866:	4998      	ldr	r1, [pc, #608]	@ (8004ac8 <udpReceiveHandler+0x600>)
 8004868:	4618      	mov	r0, r3
 800486a:	f012 fec9 	bl	8017600 <siprintf>

			udpClientSend(data);
 800486e:	463b      	mov	r3, r7
 8004870:	4618      	mov	r0, r3
 8004872:	f000 fe5f 	bl	8005534 <udpClientSend>

			memset(rxBuf, 0, 128);
 8004876:	2280      	movs	r2, #128	@ 0x80
 8004878:	2100      	movs	r1, #0
 800487a:	488f      	ldr	r0, [pc, #572]	@ (8004ab8 <udpReceiveHandler+0x5f0>)
 800487c:	f012 ff4f 	bl	801771e <memset>
			return;
 8004880:	f000 bdd3 	b.w	800542a <udpReceiveHandler+0xf62>
		}

		calculatePlannerInitialParam(&planner);
 8004884:	4891      	ldr	r0, [pc, #580]	@ (8004acc <udpReceiveHandler+0x604>)
 8004886:	f001 f87f 	bl	8005988 <calculatePlannerInitialParam>

		/* Флаг запуска процесса работы */
		_runFlag = true;
 800488a:	4b8d      	ldr	r3, [pc, #564]	@ (8004ac0 <udpReceiveHandler+0x5f8>)
 800488c:	2201      	movs	r2, #1
 800488e:	701a      	strb	r2, [r3, #0]

		sprintf(data, "%ld - STM32: The process has been started!\n", counter);
 8004890:	4b87      	ldr	r3, [pc, #540]	@ (8004ab0 <udpReceiveHandler+0x5e8>)
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	463b      	mov	r3, r7
 8004896:	498e      	ldr	r1, [pc, #568]	@ (8004ad0 <udpReceiveHandler+0x608>)
 8004898:	4618      	mov	r0, r3
 800489a:	f012 feb1 	bl	8017600 <siprintf>

		udpClientSend(data);
 800489e:	463b      	mov	r3, r7
 80048a0:	4618      	mov	r0, r3
 80048a2:	f000 fe47 	bl	8005534 <udpClientSend>

		memset(rxBuf, 0, 128);
 80048a6:	2280      	movs	r2, #128	@ 0x80
 80048a8:	2100      	movs	r1, #0
 80048aa:	4883      	ldr	r0, [pc, #524]	@ (8004ab8 <udpReceiveHandler+0x5f0>)
 80048ac:	f012 ff37 	bl	801771e <memset>
		return;
 80048b0:	f000 bdbb 	b.w	800542a <udpReceiveHandler+0xf62>
	}

	/* Запуск приостановки работы станка */
	if(strcmp(rxBuf, udpcommands.pause) == 0)
 80048b4:	4b81      	ldr	r3, [pc, #516]	@ (8004abc <udpReceiveHandler+0x5f4>)
 80048b6:	69db      	ldr	r3, [r3, #28]
 80048b8:	4619      	mov	r1, r3
 80048ba:	487f      	ldr	r0, [pc, #508]	@ (8004ab8 <udpReceiveHandler+0x5f0>)
 80048bc:	f7fb fc88 	bl	80001d0 <strcmp>
 80048c0:	4603      	mov	r3, r0
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d12d      	bne.n	8004922 <udpReceiveHandler+0x45a>
	{
		/* Проверка запущенного процесса работы станка */
		if(_runFlag == false)
 80048c6:	4b7e      	ldr	r3, [pc, #504]	@ (8004ac0 <udpReceiveHandler+0x5f8>)
 80048c8:	781b      	ldrb	r3, [r3, #0]
 80048ca:	f083 0301 	eor.w	r3, r3, #1
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d011      	beq.n	80048f8 <udpReceiveHandler+0x430>
		{
			sprintf(data, "%ld - STM32: Attention! The machine is not running!\n", counter);
 80048d4:	4b76      	ldr	r3, [pc, #472]	@ (8004ab0 <udpReceiveHandler+0x5e8>)
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	463b      	mov	r3, r7
 80048da:	497e      	ldr	r1, [pc, #504]	@ (8004ad4 <udpReceiveHandler+0x60c>)
 80048dc:	4618      	mov	r0, r3
 80048de:	f012 fe8f 	bl	8017600 <siprintf>

			udpClientSend(data);
 80048e2:	463b      	mov	r3, r7
 80048e4:	4618      	mov	r0, r3
 80048e6:	f000 fe25 	bl	8005534 <udpClientSend>

			memset(rxBuf, 0, 128);
 80048ea:	2280      	movs	r2, #128	@ 0x80
 80048ec:	2100      	movs	r1, #0
 80048ee:	4872      	ldr	r0, [pc, #456]	@ (8004ab8 <udpReceiveHandler+0x5f0>)
 80048f0:	f012 ff15 	bl	801771e <memset>
			return;
 80048f4:	f000 bd99 	b.w	800542a <udpReceiveHandler+0xf62>
		}

		/* Здесь должна быть функция паузы станка */
		pausePlanner(&planner);
 80048f8:	4874      	ldr	r0, [pc, #464]	@ (8004acc <udpReceiveHandler+0x604>)
 80048fa:	f001 f959 	bl	8005bb0 <pausePlanner>

		sprintf(data, "%ld - STM32: The process has been paused!\n", counter);
 80048fe:	4b6c      	ldr	r3, [pc, #432]	@ (8004ab0 <udpReceiveHandler+0x5e8>)
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	463b      	mov	r3, r7
 8004904:	4974      	ldr	r1, [pc, #464]	@ (8004ad8 <udpReceiveHandler+0x610>)
 8004906:	4618      	mov	r0, r3
 8004908:	f012 fe7a 	bl	8017600 <siprintf>

		udpClientSend(data);
 800490c:	463b      	mov	r3, r7
 800490e:	4618      	mov	r0, r3
 8004910:	f000 fe10 	bl	8005534 <udpClientSend>

		memset(rxBuf, 0, 128);
 8004914:	2280      	movs	r2, #128	@ 0x80
 8004916:	2100      	movs	r1, #0
 8004918:	4867      	ldr	r0, [pc, #412]	@ (8004ab8 <udpReceiveHandler+0x5f0>)
 800491a:	f012 ff00 	bl	801771e <memset>
		return;
 800491e:	f000 bd84 	b.w	800542a <udpReceiveHandler+0xf62>
	}

	/* Запуск возобновления процесса работы станка */
	if(strcmp(rxBuf, udpcommands.resume) == 0)
 8004922:	4b66      	ldr	r3, [pc, #408]	@ (8004abc <udpReceiveHandler+0x5f4>)
 8004924:	6a1b      	ldr	r3, [r3, #32]
 8004926:	4619      	mov	r1, r3
 8004928:	4863      	ldr	r0, [pc, #396]	@ (8004ab8 <udpReceiveHandler+0x5f0>)
 800492a:	f7fb fc51 	bl	80001d0 <strcmp>
 800492e:	4603      	mov	r3, r0
 8004930:	2b00      	cmp	r3, #0
 8004932:	d12d      	bne.n	8004990 <udpReceiveHandler+0x4c8>
	{
		/* Проверка запущенного процесса работы станка */
		if(_runFlag == false)
 8004934:	4b62      	ldr	r3, [pc, #392]	@ (8004ac0 <udpReceiveHandler+0x5f8>)
 8004936:	781b      	ldrb	r3, [r3, #0]
 8004938:	f083 0301 	eor.w	r3, r3, #1
 800493c:	b2db      	uxtb	r3, r3
 800493e:	2b00      	cmp	r3, #0
 8004940:	d011      	beq.n	8004966 <udpReceiveHandler+0x49e>
		{
			sprintf(data, "%ld - STM32: Attention! The machine is not running!\n", counter);
 8004942:	4b5b      	ldr	r3, [pc, #364]	@ (8004ab0 <udpReceiveHandler+0x5e8>)
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	463b      	mov	r3, r7
 8004948:	4962      	ldr	r1, [pc, #392]	@ (8004ad4 <udpReceiveHandler+0x60c>)
 800494a:	4618      	mov	r0, r3
 800494c:	f012 fe58 	bl	8017600 <siprintf>

			udpClientSend(data);
 8004950:	463b      	mov	r3, r7
 8004952:	4618      	mov	r0, r3
 8004954:	f000 fdee 	bl	8005534 <udpClientSend>

			memset(rxBuf, 0, 128);
 8004958:	2280      	movs	r2, #128	@ 0x80
 800495a:	2100      	movs	r1, #0
 800495c:	4856      	ldr	r0, [pc, #344]	@ (8004ab8 <udpReceiveHandler+0x5f0>)
 800495e:	f012 fede 	bl	801771e <memset>
			return;
 8004962:	f000 bd62 	b.w	800542a <udpReceiveHandler+0xf62>
		}

		/* Здесь должна быть функция возобновления станка */
		resumePlanner(&planner);
 8004966:	4859      	ldr	r0, [pc, #356]	@ (8004acc <udpReceiveHandler+0x604>)
 8004968:	f001 f93c 	bl	8005be4 <resumePlanner>

		sprintf(data, "%ld - STM32: The process has been resumed!\n", counter);
 800496c:	4b50      	ldr	r3, [pc, #320]	@ (8004ab0 <udpReceiveHandler+0x5e8>)
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	463b      	mov	r3, r7
 8004972:	495a      	ldr	r1, [pc, #360]	@ (8004adc <udpReceiveHandler+0x614>)
 8004974:	4618      	mov	r0, r3
 8004976:	f012 fe43 	bl	8017600 <siprintf>

		udpClientSend(data);
 800497a:	463b      	mov	r3, r7
 800497c:	4618      	mov	r0, r3
 800497e:	f000 fdd9 	bl	8005534 <udpClientSend>

		memset(rxBuf, 0, 128);
 8004982:	2280      	movs	r2, #128	@ 0x80
 8004984:	2100      	movs	r1, #0
 8004986:	484c      	ldr	r0, [pc, #304]	@ (8004ab8 <udpReceiveHandler+0x5f0>)
 8004988:	f012 fec9 	bl	801771e <memset>
		return;
 800498c:	f000 bd4d 	b.w	800542a <udpReceiveHandler+0xf62>
	}

	/* Запуск резкой остановки процесса работы станка с возможностью продолжения процесса */
	if(strcmp(rxBuf, udpcommands.stop) == 0)
 8004990:	4b4a      	ldr	r3, [pc, #296]	@ (8004abc <udpReceiveHandler+0x5f4>)
 8004992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004994:	4619      	mov	r1, r3
 8004996:	4848      	ldr	r0, [pc, #288]	@ (8004ab8 <udpReceiveHandler+0x5f0>)
 8004998:	f7fb fc1a 	bl	80001d0 <strcmp>
 800499c:	4603      	mov	r3, r0
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d12d      	bne.n	80049fe <udpReceiveHandler+0x536>
	{
		/* Проверка запущенного процесса работы станка */
		if(_runFlag == false)
 80049a2:	4b47      	ldr	r3, [pc, #284]	@ (8004ac0 <udpReceiveHandler+0x5f8>)
 80049a4:	781b      	ldrb	r3, [r3, #0]
 80049a6:	f083 0301 	eor.w	r3, r3, #1
 80049aa:	b2db      	uxtb	r3, r3
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d011      	beq.n	80049d4 <udpReceiveHandler+0x50c>
		{
			sprintf(data, "%ld - STM32: Attention! The machine is not running!\n", counter);
 80049b0:	4b3f      	ldr	r3, [pc, #252]	@ (8004ab0 <udpReceiveHandler+0x5e8>)
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	463b      	mov	r3, r7
 80049b6:	4947      	ldr	r1, [pc, #284]	@ (8004ad4 <udpReceiveHandler+0x60c>)
 80049b8:	4618      	mov	r0, r3
 80049ba:	f012 fe21 	bl	8017600 <siprintf>

			udpClientSend(data);
 80049be:	463b      	mov	r3, r7
 80049c0:	4618      	mov	r0, r3
 80049c2:	f000 fdb7 	bl	8005534 <udpClientSend>

			memset(rxBuf, 0, 128);
 80049c6:	2280      	movs	r2, #128	@ 0x80
 80049c8:	2100      	movs	r1, #0
 80049ca:	483b      	ldr	r0, [pc, #236]	@ (8004ab8 <udpReceiveHandler+0x5f0>)
 80049cc:	f012 fea7 	bl	801771e <memset>
			return;
 80049d0:	f000 bd2b 	b.w	800542a <udpReceiveHandler+0xf62>
		}

		/* Здесь должна быть функция остановки станка */
		stopPlanner(&planner);
 80049d4:	483d      	ldr	r0, [pc, #244]	@ (8004acc <udpReceiveHandler+0x604>)
 80049d6:	f001 f916 	bl	8005c06 <stopPlanner>

		sprintf(data, "%ld - STM32: The process has been stopped!\n", counter);
 80049da:	4b35      	ldr	r3, [pc, #212]	@ (8004ab0 <udpReceiveHandler+0x5e8>)
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	463b      	mov	r3, r7
 80049e0:	493f      	ldr	r1, [pc, #252]	@ (8004ae0 <udpReceiveHandler+0x618>)
 80049e2:	4618      	mov	r0, r3
 80049e4:	f012 fe0c 	bl	8017600 <siprintf>

		udpClientSend(data);
 80049e8:	463b      	mov	r3, r7
 80049ea:	4618      	mov	r0, r3
 80049ec:	f000 fda2 	bl	8005534 <udpClientSend>

		memset(rxBuf, 0, 128);
 80049f0:	2280      	movs	r2, #128	@ 0x80
 80049f2:	2100      	movs	r1, #0
 80049f4:	4830      	ldr	r0, [pc, #192]	@ (8004ab8 <udpReceiveHandler+0x5f0>)
 80049f6:	f012 fe92 	bl	801771e <memset>
		return;
 80049fa:	f000 bd16 	b.w	800542a <udpReceiveHandler+0xf62>
	}

	if(strncmp(rxBuf, udpcommands.setPlannerAcceleration, strlen(udpcommands.setPlannerAcceleration)) == 0)
 80049fe:	4b2f      	ldr	r3, [pc, #188]	@ (8004abc <udpReceiveHandler+0x5f4>)
 8004a00:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8004a02:	4b2e      	ldr	r3, [pc, #184]	@ (8004abc <udpReceiveHandler+0x5f4>)
 8004a04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a06:	4618      	mov	r0, r3
 8004a08:	f7fb fbec 	bl	80001e4 <strlen>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	461a      	mov	r2, r3
 8004a10:	4621      	mov	r1, r4
 8004a12:	4829      	ldr	r0, [pc, #164]	@ (8004ab8 <udpReceiveHandler+0x5f0>)
 8004a14:	f012 fe98 	bl	8017748 <strncmp>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d166      	bne.n	8004aec <udpReceiveHandler+0x624>
	{
		/* Проверка запущенного процесса работы станка */
		if(_runFlag == true)
 8004a1e:	4b28      	ldr	r3, [pc, #160]	@ (8004ac0 <udpReceiveHandler+0x5f8>)
 8004a20:	781b      	ldrb	r3, [r3, #0]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d011      	beq.n	8004a4a <udpReceiveHandler+0x582>
		{
			sprintf(data, "%ld - STM32: Error changing! The machine is running!\n", counter);
 8004a26:	4b22      	ldr	r3, [pc, #136]	@ (8004ab0 <udpReceiveHandler+0x5e8>)
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	463b      	mov	r3, r7
 8004a2c:	492d      	ldr	r1, [pc, #180]	@ (8004ae4 <udpReceiveHandler+0x61c>)
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f012 fde6 	bl	8017600 <siprintf>

			udpClientSend(data);
 8004a34:	463b      	mov	r3, r7
 8004a36:	4618      	mov	r0, r3
 8004a38:	f000 fd7c 	bl	8005534 <udpClientSend>

			memset(rxBuf, 0, 128);
 8004a3c:	2280      	movs	r2, #128	@ 0x80
 8004a3e:	2100      	movs	r1, #0
 8004a40:	481d      	ldr	r0, [pc, #116]	@ (8004ab8 <udpReceiveHandler+0x5f0>)
 8004a42:	f012 fe6c 	bl	801771e <memset>
			return;
 8004a46:	f000 bcf0 	b.w	800542a <udpReceiveHandler+0xf62>
		}

		float acceleration = atof(strchr(rxBuf, ' ') + 1);
 8004a4a:	2120      	movs	r1, #32
 8004a4c:	481a      	ldr	r0, [pc, #104]	@ (8004ab8 <udpReceiveHandler+0x5f0>)
 8004a4e:	f012 fe6e 	bl	801772e <strchr>
 8004a52:	4603      	mov	r3, r0
 8004a54:	3301      	adds	r3, #1
 8004a56:	4618      	mov	r0, r3
 8004a58:	f011 fe22 	bl	80166a0 <atof>
 8004a5c:	ec53 2b10 	vmov	r2, r3, d0
 8004a60:	4610      	mov	r0, r2
 8004a62:	4619      	mov	r1, r3
 8004a64:	f7fc f8d0 	bl	8000c08 <__aeabi_d2f>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
		setPlannerAcceleration(&planner, acceleration);
 8004a6e:	ed97 0a40 	vldr	s0, [r7, #256]	@ 0x100
 8004a72:	4816      	ldr	r0, [pc, #88]	@ (8004acc <udpReceiveHandler+0x604>)
 8004a74:	f000 fff4 	bl	8005a60 <setPlannerAcceleration>

		sprintf(data, "%ld - STM32: Planner acceleration = %ld (steps/sec^2);\n", counter, planner._accel);
 8004a78:	4b0d      	ldr	r3, [pc, #52]	@ (8004ab0 <udpReceiveHandler+0x5e8>)
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	4b13      	ldr	r3, [pc, #76]	@ (8004acc <udpReceiveHandler+0x604>)
 8004a7e:	695b      	ldr	r3, [r3, #20]
 8004a80:	4638      	mov	r0, r7
 8004a82:	4919      	ldr	r1, [pc, #100]	@ (8004ae8 <udpReceiveHandler+0x620>)
 8004a84:	f012 fdbc 	bl	8017600 <siprintf>

		udpClientSend(data);
 8004a88:	463b      	mov	r3, r7
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f000 fd52 	bl	8005534 <udpClientSend>

		memset(rxBuf, 0, 128);
 8004a90:	2280      	movs	r2, #128	@ 0x80
 8004a92:	2100      	movs	r1, #0
 8004a94:	4808      	ldr	r0, [pc, #32]	@ (8004ab8 <udpReceiveHandler+0x5f0>)
 8004a96:	f012 fe42 	bl	801771e <memset>
		return;
 8004a9a:	f000 bcc6 	b.w	800542a <udpReceiveHandler+0xf62>
 8004a9e:	bf00      	nop
 8004aa0:	2000d820 	.word	0x2000d820
 8004aa4:	20000000 	.word	0x20000000
 8004aa8:	20000fec 	.word	0x20000fec
 8004aac:	2000e494 	.word	0x2000e494
 8004ab0:	2000e524 	.word	0x2000e524
 8004ab4:	0801fc5c 	.word	0x0801fc5c
 8004ab8:	2000e4a4 	.word	0x2000e4a4
 8004abc:	2000081c 	.word	0x2000081c
 8004ac0:	2000e49c 	.word	0x2000e49c
 8004ac4:	0801fc88 	.word	0x0801fc88
 8004ac8:	0801fcc4 	.word	0x0801fcc4
 8004acc:	2000e3ec 	.word	0x2000e3ec
 8004ad0:	0801fcec 	.word	0x0801fcec
 8004ad4:	0801fd18 	.word	0x0801fd18
 8004ad8:	0801fd50 	.word	0x0801fd50
 8004adc:	0801fd7c 	.word	0x0801fd7c
 8004ae0:	0801fda8 	.word	0x0801fda8
 8004ae4:	0801fdd4 	.word	0x0801fdd4
 8004ae8:	0801fe0c 	.word	0x0801fe0c
	}

	if(strncmp(rxBuf, udpcommands.setPlannerMaxSpeed, strlen(udpcommands.setPlannerMaxSpeed)) == 0)
 8004aec:	4bbd      	ldr	r3, [pc, #756]	@ (8004de4 <udpReceiveHandler+0x91c>)
 8004aee:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 8004af0:	4bbc      	ldr	r3, [pc, #752]	@ (8004de4 <udpReceiveHandler+0x91c>)
 8004af2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004af4:	4618      	mov	r0, r3
 8004af6:	f7fb fb75 	bl	80001e4 <strlen>
 8004afa:	4603      	mov	r3, r0
 8004afc:	461a      	mov	r2, r3
 8004afe:	4621      	mov	r1, r4
 8004b00:	48b9      	ldr	r0, [pc, #740]	@ (8004de8 <udpReceiveHandler+0x920>)
 8004b02:	f012 fe21 	bl	8017748 <strncmp>
 8004b06:	4603      	mov	r3, r0
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d13f      	bne.n	8004b8c <udpReceiveHandler+0x6c4>
	{
		/* Проверка запущенного процесса работы станка */
		if(_runFlag == true)
 8004b0c:	4bb7      	ldr	r3, [pc, #732]	@ (8004dec <udpReceiveHandler+0x924>)
 8004b0e:	781b      	ldrb	r3, [r3, #0]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d011      	beq.n	8004b38 <udpReceiveHandler+0x670>
		{
			sprintf(data, "%ld - STM32: Error changing! The machine is running!\n", counter);
 8004b14:	4bb6      	ldr	r3, [pc, #728]	@ (8004df0 <udpReceiveHandler+0x928>)
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	463b      	mov	r3, r7
 8004b1a:	49b6      	ldr	r1, [pc, #728]	@ (8004df4 <udpReceiveHandler+0x92c>)
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f012 fd6f 	bl	8017600 <siprintf>

			udpClientSend(data);
 8004b22:	463b      	mov	r3, r7
 8004b24:	4618      	mov	r0, r3
 8004b26:	f000 fd05 	bl	8005534 <udpClientSend>

			memset(rxBuf, 0, 128);
 8004b2a:	2280      	movs	r2, #128	@ 0x80
 8004b2c:	2100      	movs	r1, #0
 8004b2e:	48ae      	ldr	r0, [pc, #696]	@ (8004de8 <udpReceiveHandler+0x920>)
 8004b30:	f012 fdf5 	bl	801771e <memset>
			return;
 8004b34:	f000 bc79 	b.w	800542a <udpReceiveHandler+0xf62>
		}

		float speed = atof(strchr(rxBuf, ' ') + 1);
 8004b38:	2120      	movs	r1, #32
 8004b3a:	48ab      	ldr	r0, [pc, #684]	@ (8004de8 <udpReceiveHandler+0x920>)
 8004b3c:	f012 fdf7 	bl	801772e <strchr>
 8004b40:	4603      	mov	r3, r0
 8004b42:	3301      	adds	r3, #1
 8004b44:	4618      	mov	r0, r3
 8004b46:	f011 fdab 	bl	80166a0 <atof>
 8004b4a:	ec53 2b10 	vmov	r2, r3, d0
 8004b4e:	4610      	mov	r0, r2
 8004b50:	4619      	mov	r1, r3
 8004b52:	f7fc f859 	bl	8000c08 <__aeabi_d2f>
 8004b56:	4603      	mov	r3, r0
 8004b58:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
		setPlannerMaxSpeed(&planner, speed);
 8004b5c:	ed97 0a41 	vldr	s0, [r7, #260]	@ 0x104
 8004b60:	48a5      	ldr	r0, [pc, #660]	@ (8004df8 <udpReceiveHandler+0x930>)
 8004b62:	f000 ffe7 	bl	8005b34 <setPlannerMaxSpeed>

		sprintf(data, "%ld - STM32: Planner max speed = %ld (steps/sec^2);\n", counter, planner._maxSpeed);
 8004b66:	4ba2      	ldr	r3, [pc, #648]	@ (8004df0 <udpReceiveHandler+0x928>)
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	4ba3      	ldr	r3, [pc, #652]	@ (8004df8 <udpReceiveHandler+0x930>)
 8004b6c:	691b      	ldr	r3, [r3, #16]
 8004b6e:	4638      	mov	r0, r7
 8004b70:	49a2      	ldr	r1, [pc, #648]	@ (8004dfc <udpReceiveHandler+0x934>)
 8004b72:	f012 fd45 	bl	8017600 <siprintf>

		udpClientSend(data);
 8004b76:	463b      	mov	r3, r7
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f000 fcdb 	bl	8005534 <udpClientSend>

		memset(rxBuf, 0, 128);
 8004b7e:	2280      	movs	r2, #128	@ 0x80
 8004b80:	2100      	movs	r1, #0
 8004b82:	4899      	ldr	r0, [pc, #612]	@ (8004de8 <udpReceiveHandler+0x920>)
 8004b84:	f012 fdcb 	bl	801771e <memset>
		return;
 8004b88:	f000 bc4f 	b.w	800542a <udpReceiveHandler+0xf62>
	}

	/* Задать _runMode */
	if(strncmp(rxBuf, udpcommands.setDriverRunMode, strlen(udpcommands.setDriverRunMode)) == 0)
 8004b8c:	4b95      	ldr	r3, [pc, #596]	@ (8004de4 <udpReceiveHandler+0x91c>)
 8004b8e:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 8004b90:	4b94      	ldr	r3, [pc, #592]	@ (8004de4 <udpReceiveHandler+0x91c>)
 8004b92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b94:	4618      	mov	r0, r3
 8004b96:	f7fb fb25 	bl	80001e4 <strlen>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	461a      	mov	r2, r3
 8004b9e:	4621      	mov	r1, r4
 8004ba0:	4891      	ldr	r0, [pc, #580]	@ (8004de8 <udpReceiveHandler+0x920>)
 8004ba2:	f012 fdd1 	bl	8017748 <strncmp>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d15b      	bne.n	8004c64 <udpReceiveHandler+0x79c>
	{
		int8_t axis = atoi(strchr(rxBuf, ' ') + 1);
 8004bac:	2120      	movs	r1, #32
 8004bae:	488e      	ldr	r0, [pc, #568]	@ (8004de8 <udpReceiveHandler+0x920>)
 8004bb0:	f012 fdbd 	bl	801772e <strchr>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	3301      	adds	r3, #1
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f011 fd74 	bl	80166a6 <atoi>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
		if(rxBuf[strlen(udpcommands.setDriverRunMode) + 3] == 'V')
 8004bc4:	4b87      	ldr	r3, [pc, #540]	@ (8004de4 <udpReceiveHandler+0x91c>)
 8004bc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f7fb fb0b 	bl	80001e4 <strlen>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	3303      	adds	r3, #3
 8004bd2:	4a85      	ldr	r2, [pc, #532]	@ (8004de8 <udpReceiveHandler+0x920>)
 8004bd4:	5cd3      	ldrb	r3, [r2, r3]
 8004bd6:	2b56      	cmp	r3, #86	@ 0x56
 8004bd8:	d113      	bne.n	8004c02 <udpReceiveHandler+0x73a>
		{
			sprintf(data, "%ld - STM32: Movement mode driver - %d = VELOCITY_MODE;\n", counter, axis);
 8004bda:	4b85      	ldr	r3, [pc, #532]	@ (8004df0 <udpReceiveHandler+0x928>)
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	f997 310b 	ldrsb.w	r3, [r7, #267]	@ 0x10b
 8004be2:	4638      	mov	r0, r7
 8004be4:	4986      	ldr	r1, [pc, #536]	@ (8004e00 <udpReceiveHandler+0x938>)
 8004be6:	f012 fd0b 	bl	8017600 <siprintf>
			setDriverRunMode(&driver[axis], VELOCITY_MODE);
 8004bea:	f997 310b 	ldrsb.w	r3, [r7, #267]	@ 0x10b
 8004bee:	2268      	movs	r2, #104	@ 0x68
 8004bf0:	fb02 f303 	mul.w	r3, r2, r3
 8004bf4:	4a83      	ldr	r2, [pc, #524]	@ (8004e04 <udpReceiveHandler+0x93c>)
 8004bf6:	4413      	add	r3, r2
 8004bf8:	2101      	movs	r1, #1
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f7fc fbe8 	bl	80013d0 <setDriverRunMode>
 8004c00:	e026      	b.n	8004c50 <udpReceiveHandler+0x788>
		}
		else if(rxBuf[strlen(udpcommands.setDriverRunMode) + 3] == 'P')
 8004c02:	4b78      	ldr	r3, [pc, #480]	@ (8004de4 <udpReceiveHandler+0x91c>)
 8004c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c06:	4618      	mov	r0, r3
 8004c08:	f7fb faec 	bl	80001e4 <strlen>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	3303      	adds	r3, #3
 8004c10:	4a75      	ldr	r2, [pc, #468]	@ (8004de8 <udpReceiveHandler+0x920>)
 8004c12:	5cd3      	ldrb	r3, [r2, r3]
 8004c14:	2b50      	cmp	r3, #80	@ 0x50
 8004c16:	d113      	bne.n	8004c40 <udpReceiveHandler+0x778>
		{
			sprintf(data, "%ld - STM32: Movement mode driver - %d = POSITION_MODE;\n", counter, axis);
 8004c18:	4b75      	ldr	r3, [pc, #468]	@ (8004df0 <udpReceiveHandler+0x928>)
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	f997 310b 	ldrsb.w	r3, [r7, #267]	@ 0x10b
 8004c20:	4638      	mov	r0, r7
 8004c22:	4979      	ldr	r1, [pc, #484]	@ (8004e08 <udpReceiveHandler+0x940>)
 8004c24:	f012 fcec 	bl	8017600 <siprintf>
			setDriverRunMode(&driver[axis], POSITION_MODE);
 8004c28:	f997 310b 	ldrsb.w	r3, [r7, #267]	@ 0x10b
 8004c2c:	2268      	movs	r2, #104	@ 0x68
 8004c2e:	fb02 f303 	mul.w	r3, r2, r3
 8004c32:	4a74      	ldr	r2, [pc, #464]	@ (8004e04 <udpReceiveHandler+0x93c>)
 8004c34:	4413      	add	r3, r2
 8004c36:	2100      	movs	r1, #0
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f7fc fbc9 	bl	80013d0 <setDriverRunMode>
 8004c3e:	e007      	b.n	8004c50 <udpReceiveHandler+0x788>
		}
		else
		{
			sprintf(data, "%ld - STM32: Error changing movement mode of driver - %d;\n", counter, axis);
 8004c40:	4b6b      	ldr	r3, [pc, #428]	@ (8004df0 <udpReceiveHandler+0x928>)
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	f997 310b 	ldrsb.w	r3, [r7, #267]	@ 0x10b
 8004c48:	4638      	mov	r0, r7
 8004c4a:	4970      	ldr	r1, [pc, #448]	@ (8004e0c <udpReceiveHandler+0x944>)
 8004c4c:	f012 fcd8 	bl	8017600 <siprintf>
		}

		udpClientSend(data);
 8004c50:	463b      	mov	r3, r7
 8004c52:	4618      	mov	r0, r3
 8004c54:	f000 fc6e 	bl	8005534 <udpClientSend>

		memset(rxBuf, 0, 128);
 8004c58:	2280      	movs	r2, #128	@ 0x80
 8004c5a:	2100      	movs	r1, #0
 8004c5c:	4862      	ldr	r0, [pc, #392]	@ (8004de8 <udpReceiveHandler+0x920>)
 8004c5e:	f012 fd5e 	bl	801771e <memset>
		return;
 8004c62:	e3e2      	b.n	800542a <udpReceiveHandler+0xf62>
	}

	/* Задать ускорение _accel драйвера оси axis */
	if(strncmp(rxBuf, udpcommands.setDriverAccelerationDeg, strlen(udpcommands.setDriverAccelerationDeg)) == 0)
 8004c64:	4b5f      	ldr	r3, [pc, #380]	@ (8004de4 <udpReceiveHandler+0x91c>)
 8004c66:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 8004c68:	4b5e      	ldr	r3, [pc, #376]	@ (8004de4 <udpReceiveHandler+0x91c>)
 8004c6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f7fb fab9 	bl	80001e4 <strlen>
 8004c72:	4603      	mov	r3, r0
 8004c74:	461a      	mov	r2, r3
 8004c76:	4621      	mov	r1, r4
 8004c78:	485b      	ldr	r0, [pc, #364]	@ (8004de8 <udpReceiveHandler+0x920>)
 8004c7a:	f012 fd65 	bl	8017748 <strncmp>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d14f      	bne.n	8004d24 <udpReceiveHandler+0x85c>
	{
		int8_t axis = atoi(strchr(rxBuf, ' ') + 1);
 8004c84:	2120      	movs	r1, #32
 8004c86:	4858      	ldr	r0, [pc, #352]	@ (8004de8 <udpReceiveHandler+0x920>)
 8004c88:	f012 fd51 	bl	801772e <strchr>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	3301      	adds	r3, #1
 8004c90:	4618      	mov	r0, r3
 8004c92:	f011 fd08 	bl	80166a6 <atoi>
 8004c96:	4603      	mov	r3, r0
 8004c98:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
		float acceleration = atof(strchr(rxBuf, ' ') + 3);
 8004c9c:	2120      	movs	r1, #32
 8004c9e:	4852      	ldr	r0, [pc, #328]	@ (8004de8 <udpReceiveHandler+0x920>)
 8004ca0:	f012 fd45 	bl	801772e <strchr>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	3303      	adds	r3, #3
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f011 fcf9 	bl	80166a0 <atof>
 8004cae:	ec53 2b10 	vmov	r2, r3, d0
 8004cb2:	4610      	mov	r0, r2
 8004cb4:	4619      	mov	r1, r3
 8004cb6:	f7fb ffa7 	bl	8000c08 <__aeabi_d2f>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

		if(setDriverAccelerationDeg(&driver[axis], acceleration) == PARAM_CHANGE_OK)
 8004cc0:	f997 3113 	ldrsb.w	r3, [r7, #275]	@ 0x113
 8004cc4:	2268      	movs	r2, #104	@ 0x68
 8004cc6:	fb02 f303 	mul.w	r3, r2, r3
 8004cca:	4a4e      	ldr	r2, [pc, #312]	@ (8004e04 <udpReceiveHandler+0x93c>)
 8004ccc:	4413      	add	r3, r2
 8004cce:	ed97 0a43 	vldr	s0, [r7, #268]	@ 0x10c
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f7fc ff80 	bl	8001bd8 <setDriverAccelerationDeg>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d110      	bne.n	8004d00 <udpReceiveHandler+0x838>
		{
			sprintf(data, "%ld - STM32: Acceleration of driver %d = %d (deg/sec^2);\n", counter, axis, (int16_t)acceleration);
 8004cde:	4b44      	ldr	r3, [pc, #272]	@ (8004df0 <udpReceiveHandler+0x928>)
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	f997 3113 	ldrsb.w	r3, [r7, #275]	@ 0x113
 8004ce6:	edd7 7a43 	vldr	s15, [r7, #268]	@ 0x10c
 8004cea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004cee:	ee17 1a90 	vmov	r1, s15
 8004cf2:	b209      	sxth	r1, r1
 8004cf4:	4638      	mov	r0, r7
 8004cf6:	9100      	str	r1, [sp, #0]
 8004cf8:	4945      	ldr	r1, [pc, #276]	@ (8004e10 <udpReceiveHandler+0x948>)
 8004cfa:	f012 fc81 	bl	8017600 <siprintf>
 8004cfe:	e007      	b.n	8004d10 <udpReceiveHandler+0x848>
		}
		else sprintf(data, "%ld - STM32: Error changing acceleration of driver - %d;\n", counter, axis);
 8004d00:	4b3b      	ldr	r3, [pc, #236]	@ (8004df0 <udpReceiveHandler+0x928>)
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	f997 3113 	ldrsb.w	r3, [r7, #275]	@ 0x113
 8004d08:	4638      	mov	r0, r7
 8004d0a:	4942      	ldr	r1, [pc, #264]	@ (8004e14 <udpReceiveHandler+0x94c>)
 8004d0c:	f012 fc78 	bl	8017600 <siprintf>

		udpClientSend(data);
 8004d10:	463b      	mov	r3, r7
 8004d12:	4618      	mov	r0, r3
 8004d14:	f000 fc0e 	bl	8005534 <udpClientSend>

		memset(rxBuf, 0, 128);
 8004d18:	2280      	movs	r2, #128	@ 0x80
 8004d1a:	2100      	movs	r1, #0
 8004d1c:	4832      	ldr	r0, [pc, #200]	@ (8004de8 <udpReceiveHandler+0x920>)
 8004d1e:	f012 fcfe 	bl	801771e <memset>
		return;
 8004d22:	e382      	b.n	800542a <udpReceiveHandler+0xf62>
	}

	if(strncmp(rxBuf, udpcommands.setDriverAccelerationMm, strlen(udpcommands.setDriverAccelerationMm)) == 0)
 8004d24:	4b2f      	ldr	r3, [pc, #188]	@ (8004de4 <udpReceiveHandler+0x91c>)
 8004d26:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 8004d28:	4b2e      	ldr	r3, [pc, #184]	@ (8004de4 <udpReceiveHandler+0x91c>)
 8004d2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f7fb fa59 	bl	80001e4 <strlen>
 8004d32:	4603      	mov	r3, r0
 8004d34:	461a      	mov	r2, r3
 8004d36:	4621      	mov	r1, r4
 8004d38:	482b      	ldr	r0, [pc, #172]	@ (8004de8 <udpReceiveHandler+0x920>)
 8004d3a:	f012 fd05 	bl	8017748 <strncmp>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d16b      	bne.n	8004e1c <udpReceiveHandler+0x954>
	{
		int8_t axis = atoi(strchr(rxBuf, ' ') + 1);
 8004d44:	2120      	movs	r1, #32
 8004d46:	4828      	ldr	r0, [pc, #160]	@ (8004de8 <udpReceiveHandler+0x920>)
 8004d48:	f012 fcf1 	bl	801772e <strchr>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	3301      	adds	r3, #1
 8004d50:	4618      	mov	r0, r3
 8004d52:	f011 fca8 	bl	80166a6 <atoi>
 8004d56:	4603      	mov	r3, r0
 8004d58:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
		float acceleration = atof(strchr(rxBuf, ' ') + 3);
 8004d5c:	2120      	movs	r1, #32
 8004d5e:	4822      	ldr	r0, [pc, #136]	@ (8004de8 <udpReceiveHandler+0x920>)
 8004d60:	f012 fce5 	bl	801772e <strchr>
 8004d64:	4603      	mov	r3, r0
 8004d66:	3303      	adds	r3, #3
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f011 fc99 	bl	80166a0 <atof>
 8004d6e:	ec53 2b10 	vmov	r2, r3, d0
 8004d72:	4610      	mov	r0, r2
 8004d74:	4619      	mov	r1, r3
 8004d76:	f7fb ff47 	bl	8000c08 <__aeabi_d2f>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

		if(setDriverAccelerationMm(&driver[axis], acceleration) == PARAM_CHANGE_OK)
 8004d80:	f997 311b 	ldrsb.w	r3, [r7, #283]	@ 0x11b
 8004d84:	2268      	movs	r2, #104	@ 0x68
 8004d86:	fb02 f303 	mul.w	r3, r2, r3
 8004d8a:	4a1e      	ldr	r2, [pc, #120]	@ (8004e04 <udpReceiveHandler+0x93c>)
 8004d8c:	4413      	add	r3, r2
 8004d8e:	ed97 0a45 	vldr	s0, [r7, #276]	@ 0x114
 8004d92:	4618      	mov	r0, r3
 8004d94:	f7fc ff43 	bl	8001c1e <setDriverAccelerationMm>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d110      	bne.n	8004dc0 <udpReceiveHandler+0x8f8>
		{
			sprintf(data, "%ld - STM32: Acceleration of driver %d = %d (mm/sec^2);\n", counter, axis, (int16_t)acceleration);
 8004d9e:	4b14      	ldr	r3, [pc, #80]	@ (8004df0 <udpReceiveHandler+0x928>)
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	f997 311b 	ldrsb.w	r3, [r7, #283]	@ 0x11b
 8004da6:	edd7 7a45 	vldr	s15, [r7, #276]	@ 0x114
 8004daa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004dae:	ee17 1a90 	vmov	r1, s15
 8004db2:	b209      	sxth	r1, r1
 8004db4:	4638      	mov	r0, r7
 8004db6:	9100      	str	r1, [sp, #0]
 8004db8:	4917      	ldr	r1, [pc, #92]	@ (8004e18 <udpReceiveHandler+0x950>)
 8004dba:	f012 fc21 	bl	8017600 <siprintf>
 8004dbe:	e007      	b.n	8004dd0 <udpReceiveHandler+0x908>
		}
		else sprintf(data, "%ld - STM32: Error changing acceleration of driver - %d;\n", counter, axis);
 8004dc0:	4b0b      	ldr	r3, [pc, #44]	@ (8004df0 <udpReceiveHandler+0x928>)
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	f997 311b 	ldrsb.w	r3, [r7, #283]	@ 0x11b
 8004dc8:	4638      	mov	r0, r7
 8004dca:	4912      	ldr	r1, [pc, #72]	@ (8004e14 <udpReceiveHandler+0x94c>)
 8004dcc:	f012 fc18 	bl	8017600 <siprintf>

		udpClientSend(data);
 8004dd0:	463b      	mov	r3, r7
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f000 fbae 	bl	8005534 <udpClientSend>

		memset(rxBuf, 0, 128);
 8004dd8:	2280      	movs	r2, #128	@ 0x80
 8004dda:	2100      	movs	r1, #0
 8004ddc:	4802      	ldr	r0, [pc, #8]	@ (8004de8 <udpReceiveHandler+0x920>)
 8004dde:	f012 fc9e 	bl	801771e <memset>
		return;
 8004de2:	e322      	b.n	800542a <udpReceiveHandler+0xf62>
 8004de4:	2000081c 	.word	0x2000081c
 8004de8:	2000e4a4 	.word	0x2000e4a4
 8004dec:	2000e49c 	.word	0x2000e49c
 8004df0:	2000e524 	.word	0x2000e524
 8004df4:	0801fdd4 	.word	0x0801fdd4
 8004df8:	2000e3ec 	.word	0x2000e3ec
 8004dfc:	0801fe44 	.word	0x0801fe44
 8004e00:	0801fe7c 	.word	0x0801fe7c
 8004e04:	2000e0ac 	.word	0x2000e0ac
 8004e08:	0801feb8 	.word	0x0801feb8
 8004e0c:	0801fef4 	.word	0x0801fef4
 8004e10:	0801ff30 	.word	0x0801ff30
 8004e14:	0801ff6c 	.word	0x0801ff6c
 8004e18:	0801ffa8 	.word	0x0801ffa8
	}

	if(strncmp(rxBuf, udpcommands.setDriverAcceleration, strlen(udpcommands.setDriverAcceleration)) == 0)
 8004e1c:	4bbb      	ldr	r3, [pc, #748]	@ (800510c <udpReceiveHandler+0xc44>)
 8004e1e:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 8004e20:	4bba      	ldr	r3, [pc, #744]	@ (800510c <udpReceiveHandler+0xc44>)
 8004e22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e24:	4618      	mov	r0, r3
 8004e26:	f7fb f9dd 	bl	80001e4 <strlen>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	461a      	mov	r2, r3
 8004e2e:	4621      	mov	r1, r4
 8004e30:	48b7      	ldr	r0, [pc, #732]	@ (8005110 <udpReceiveHandler+0xc48>)
 8004e32:	f012 fc89 	bl	8017748 <strncmp>
 8004e36:	4603      	mov	r3, r0
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d146      	bne.n	8004eca <udpReceiveHandler+0xa02>
	{
		int8_t axis = atoi(strchr(rxBuf, ' ') + 1);
 8004e3c:	2120      	movs	r1, #32
 8004e3e:	48b4      	ldr	r0, [pc, #720]	@ (8005110 <udpReceiveHandler+0xc48>)
 8004e40:	f012 fc75 	bl	801772e <strchr>
 8004e44:	4603      	mov	r3, r0
 8004e46:	3301      	adds	r3, #1
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f011 fc2c 	bl	80166a6 <atoi>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
		int16_t acceleration = atol(strchr(rxBuf, ' ') + 3);
 8004e54:	2120      	movs	r1, #32
 8004e56:	48ae      	ldr	r0, [pc, #696]	@ (8005110 <udpReceiveHandler+0xc48>)
 8004e58:	f012 fc69 	bl	801772e <strchr>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	3303      	adds	r3, #3
 8004e60:	4618      	mov	r0, r3
 8004e62:	f011 fc24 	bl	80166ae <atol>
 8004e66:	4603      	mov	r3, r0
 8004e68:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c

		if(setDriverAcceleration(&driver[axis], acceleration) == PARAM_CHANGE_OK)
 8004e6c:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 8004e70:	2268      	movs	r2, #104	@ 0x68
 8004e72:	fb02 f303 	mul.w	r3, r2, r3
 8004e76:	4aa7      	ldr	r2, [pc, #668]	@ (8005114 <udpReceiveHandler+0xc4c>)
 8004e78:	4413      	add	r3, r2
 8004e7a:	f9b7 211c 	ldrsh.w	r2, [r7, #284]	@ 0x11c
 8004e7e:	4611      	mov	r1, r2
 8004e80:	4618      	mov	r0, r3
 8004e82:	f7fc fe59 	bl	8001b38 <setDriverAcceleration>
 8004e86:	4603      	mov	r3, r0
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d10c      	bne.n	8004ea6 <udpReceiveHandler+0x9de>
		{
			sprintf(data, "%ld - STM32: Acceleration of driver %d = %d (steps/sec^2);\n", counter, axis, acceleration);
 8004e8c:	4ba2      	ldr	r3, [pc, #648]	@ (8005118 <udpReceiveHandler+0xc50>)
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	f997 111f 	ldrsb.w	r1, [r7, #287]	@ 0x11f
 8004e94:	f9b7 311c 	ldrsh.w	r3, [r7, #284]	@ 0x11c
 8004e98:	4638      	mov	r0, r7
 8004e9a:	9300      	str	r3, [sp, #0]
 8004e9c:	460b      	mov	r3, r1
 8004e9e:	499f      	ldr	r1, [pc, #636]	@ (800511c <udpReceiveHandler+0xc54>)
 8004ea0:	f012 fbae 	bl	8017600 <siprintf>
 8004ea4:	e007      	b.n	8004eb6 <udpReceiveHandler+0x9ee>
		}
		else sprintf(data, "%ld - STM32: Error changing acceleration of driver - %d;\n", counter, axis);
 8004ea6:	4b9c      	ldr	r3, [pc, #624]	@ (8005118 <udpReceiveHandler+0xc50>)
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 8004eae:	4638      	mov	r0, r7
 8004eb0:	499b      	ldr	r1, [pc, #620]	@ (8005120 <udpReceiveHandler+0xc58>)
 8004eb2:	f012 fba5 	bl	8017600 <siprintf>

		udpClientSend(data);
 8004eb6:	463b      	mov	r3, r7
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f000 fb3b 	bl	8005534 <udpClientSend>

		memset(rxBuf, 0, 128);
 8004ebe:	2280      	movs	r2, #128	@ 0x80
 8004ec0:	2100      	movs	r1, #0
 8004ec2:	4893      	ldr	r0, [pc, #588]	@ (8005110 <udpReceiveHandler+0xc48>)
 8004ec4:	f012 fc2b 	bl	801771e <memset>
		return;
 8004ec8:	e2af      	b.n	800542a <udpReceiveHandler+0xf62>
	}

	/* ---------------------- POSITION_MODE ---------------------- */

	/* Установить максимальную скорость _maxSpeed оси axis */
	if(strncmp(rxBuf, udpcommands.setDriverMaxSpeedDeg, strlen(udpcommands.setDriverMaxSpeedDeg)) == 0)
 8004eca:	4b90      	ldr	r3, [pc, #576]	@ (800510c <udpReceiveHandler+0xc44>)
 8004ecc:	6c5c      	ldr	r4, [r3, #68]	@ 0x44
 8004ece:	4b8f      	ldr	r3, [pc, #572]	@ (800510c <udpReceiveHandler+0xc44>)
 8004ed0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f7fb f986 	bl	80001e4 <strlen>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	461a      	mov	r2, r3
 8004edc:	4621      	mov	r1, r4
 8004ede:	488c      	ldr	r0, [pc, #560]	@ (8005110 <udpReceiveHandler+0xc48>)
 8004ee0:	f012 fc32 	bl	8017748 <strncmp>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d14f      	bne.n	8004f8a <udpReceiveHandler+0xac2>
	{
		int8_t axis = atoi(strchr(rxBuf, ' ') + 1);
 8004eea:	2120      	movs	r1, #32
 8004eec:	4888      	ldr	r0, [pc, #544]	@ (8005110 <udpReceiveHandler+0xc48>)
 8004eee:	f012 fc1e 	bl	801772e <strchr>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	3301      	adds	r3, #1
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f011 fbd5 	bl	80166a6 <atoi>
 8004efc:	4603      	mov	r3, r0
 8004efe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
		float speed = atof(strchr(rxBuf, ' ') + 3);
 8004f02:	2120      	movs	r1, #32
 8004f04:	4882      	ldr	r0, [pc, #520]	@ (8005110 <udpReceiveHandler+0xc48>)
 8004f06:	f012 fc12 	bl	801772e <strchr>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	3303      	adds	r3, #3
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f011 fbc6 	bl	80166a0 <atof>
 8004f14:	ec53 2b10 	vmov	r2, r3, d0
 8004f18:	4610      	mov	r0, r2
 8004f1a:	4619      	mov	r1, r3
 8004f1c:	f7fb fe74 	bl	8000c08 <__aeabi_d2f>
 8004f20:	4603      	mov	r3, r0
 8004f22:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120

		if(setDriverMaxSpeedDeg(&driver[axis], speed) == PARAM_CHANGE_OK)
 8004f26:	f997 3127 	ldrsb.w	r3, [r7, #295]	@ 0x127
 8004f2a:	2268      	movs	r2, #104	@ 0x68
 8004f2c:	fb02 f303 	mul.w	r3, r2, r3
 8004f30:	4a78      	ldr	r2, [pc, #480]	@ (8005114 <udpReceiveHandler+0xc4c>)
 8004f32:	4413      	add	r3, r2
 8004f34:	ed97 0a48 	vldr	s0, [r7, #288]	@ 0x120
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f7fc fda5 	bl	8001a88 <setDriverMaxSpeedDeg>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d110      	bne.n	8004f66 <udpReceiveHandler+0xa9e>
		{
			sprintf(data, "%ld - STM32: Max speed of driver %d = %d (deg/sec);\n", counter, axis, (int16_t)speed);
 8004f44:	4b74      	ldr	r3, [pc, #464]	@ (8005118 <udpReceiveHandler+0xc50>)
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	f997 3127 	ldrsb.w	r3, [r7, #295]	@ 0x127
 8004f4c:	edd7 7a48 	vldr	s15, [r7, #288]	@ 0x120
 8004f50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f54:	ee17 1a90 	vmov	r1, s15
 8004f58:	b209      	sxth	r1, r1
 8004f5a:	4638      	mov	r0, r7
 8004f5c:	9100      	str	r1, [sp, #0]
 8004f5e:	4971      	ldr	r1, [pc, #452]	@ (8005124 <udpReceiveHandler+0xc5c>)
 8004f60:	f012 fb4e 	bl	8017600 <siprintf>
 8004f64:	e007      	b.n	8004f76 <udpReceiveHandler+0xaae>
		}
		else sprintf(data, "%ld - STM32: Error changing max speed of driver - %d;\n", counter, axis);
 8004f66:	4b6c      	ldr	r3, [pc, #432]	@ (8005118 <udpReceiveHandler+0xc50>)
 8004f68:	681a      	ldr	r2, [r3, #0]
 8004f6a:	f997 3127 	ldrsb.w	r3, [r7, #295]	@ 0x127
 8004f6e:	4638      	mov	r0, r7
 8004f70:	496d      	ldr	r1, [pc, #436]	@ (8005128 <udpReceiveHandler+0xc60>)
 8004f72:	f012 fb45 	bl	8017600 <siprintf>

		udpClientSend(data);
 8004f76:	463b      	mov	r3, r7
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f000 fadb 	bl	8005534 <udpClientSend>

		memset(rxBuf, 0, 128);
 8004f7e:	2280      	movs	r2, #128	@ 0x80
 8004f80:	2100      	movs	r1, #0
 8004f82:	4863      	ldr	r0, [pc, #396]	@ (8005110 <udpReceiveHandler+0xc48>)
 8004f84:	f012 fbcb 	bl	801771e <memset>
		return;
 8004f88:	e24f      	b.n	800542a <udpReceiveHandler+0xf62>
	}

	if(strncmp(rxBuf, udpcommands.setDriverMaxSpeedMm, strlen(udpcommands.setDriverMaxSpeedMm)) == 0)
 8004f8a:	4b60      	ldr	r3, [pc, #384]	@ (800510c <udpReceiveHandler+0xc44>)
 8004f8c:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
 8004f8e:	4b5f      	ldr	r3, [pc, #380]	@ (800510c <udpReceiveHandler+0xc44>)
 8004f90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f92:	4618      	mov	r0, r3
 8004f94:	f7fb f926 	bl	80001e4 <strlen>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	461a      	mov	r2, r3
 8004f9c:	4621      	mov	r1, r4
 8004f9e:	485c      	ldr	r0, [pc, #368]	@ (8005110 <udpReceiveHandler+0xc48>)
 8004fa0:	f012 fbd2 	bl	8017748 <strncmp>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d14f      	bne.n	800504a <udpReceiveHandler+0xb82>
	{
		int8_t axis = atoi(strchr(rxBuf, ' ') + 1);
 8004faa:	2120      	movs	r1, #32
 8004fac:	4858      	ldr	r0, [pc, #352]	@ (8005110 <udpReceiveHandler+0xc48>)
 8004fae:	f012 fbbe 	bl	801772e <strchr>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	3301      	adds	r3, #1
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f011 fb75 	bl	80166a6 <atoi>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
		float speed = atof(strchr(rxBuf, ' ') + 3);
 8004fc2:	2120      	movs	r1, #32
 8004fc4:	4852      	ldr	r0, [pc, #328]	@ (8005110 <udpReceiveHandler+0xc48>)
 8004fc6:	f012 fbb2 	bl	801772e <strchr>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	3303      	adds	r3, #3
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f011 fb66 	bl	80166a0 <atof>
 8004fd4:	ec53 2b10 	vmov	r2, r3, d0
 8004fd8:	4610      	mov	r0, r2
 8004fda:	4619      	mov	r1, r3
 8004fdc:	f7fb fe14 	bl	8000c08 <__aeabi_d2f>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128

		if(setDriverMaxSpeedMm(&driver[axis], speed) == PARAM_CHANGE_OK)
 8004fe6:	f997 312f 	ldrsb.w	r3, [r7, #303]	@ 0x12f
 8004fea:	2268      	movs	r2, #104	@ 0x68
 8004fec:	fb02 f303 	mul.w	r3, r2, r3
 8004ff0:	4a48      	ldr	r2, [pc, #288]	@ (8005114 <udpReceiveHandler+0xc4c>)
 8004ff2:	4413      	add	r3, r2
 8004ff4:	ed97 0a4a 	vldr	s0, [r7, #296]	@ 0x128
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f7fc fd66 	bl	8001aca <setDriverMaxSpeedMm>
 8004ffe:	4603      	mov	r3, r0
 8005000:	2b00      	cmp	r3, #0
 8005002:	d110      	bne.n	8005026 <udpReceiveHandler+0xb5e>
		{
			sprintf(data, "%ld - STM32: Max speed of driver %d = %d (mm/sec);\n", counter, axis, (int16_t)speed);
 8005004:	4b44      	ldr	r3, [pc, #272]	@ (8005118 <udpReceiveHandler+0xc50>)
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	f997 312f 	ldrsb.w	r3, [r7, #303]	@ 0x12f
 800500c:	edd7 7a4a 	vldr	s15, [r7, #296]	@ 0x128
 8005010:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005014:	ee17 1a90 	vmov	r1, s15
 8005018:	b209      	sxth	r1, r1
 800501a:	4638      	mov	r0, r7
 800501c:	9100      	str	r1, [sp, #0]
 800501e:	4943      	ldr	r1, [pc, #268]	@ (800512c <udpReceiveHandler+0xc64>)
 8005020:	f012 faee 	bl	8017600 <siprintf>
 8005024:	e007      	b.n	8005036 <udpReceiveHandler+0xb6e>
		}
		else sprintf(data, "%ld - STM32: Error changing max speed of driver - %d;\n", counter, axis);
 8005026:	4b3c      	ldr	r3, [pc, #240]	@ (8005118 <udpReceiveHandler+0xc50>)
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	f997 312f 	ldrsb.w	r3, [r7, #303]	@ 0x12f
 800502e:	4638      	mov	r0, r7
 8005030:	493d      	ldr	r1, [pc, #244]	@ (8005128 <udpReceiveHandler+0xc60>)
 8005032:	f012 fae5 	bl	8017600 <siprintf>

		udpClientSend(data);
 8005036:	463b      	mov	r3, r7
 8005038:	4618      	mov	r0, r3
 800503a:	f000 fa7b 	bl	8005534 <udpClientSend>

		memset(rxBuf, 0, 128);
 800503e:	2280      	movs	r2, #128	@ 0x80
 8005040:	2100      	movs	r1, #0
 8005042:	4833      	ldr	r0, [pc, #204]	@ (8005110 <udpReceiveHandler+0xc48>)
 8005044:	f012 fb6b 	bl	801771e <memset>
		return;
 8005048:	e1ef      	b.n	800542a <udpReceiveHandler+0xf62>
	}

	if(strncmp(rxBuf, udpcommands.setDriverMaxSpeed, strlen(udpcommands.setDriverMaxSpeed)) == 0)
 800504a:	4b30      	ldr	r3, [pc, #192]	@ (800510c <udpReceiveHandler+0xc44>)
 800504c:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 800504e:	4b2f      	ldr	r3, [pc, #188]	@ (800510c <udpReceiveHandler+0xc44>)
 8005050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005052:	4618      	mov	r0, r3
 8005054:	f7fb f8c6 	bl	80001e4 <strlen>
 8005058:	4603      	mov	r3, r0
 800505a:	461a      	mov	r2, r3
 800505c:	4621      	mov	r1, r4
 800505e:	482c      	ldr	r0, [pc, #176]	@ (8005110 <udpReceiveHandler+0xc48>)
 8005060:	f012 fb72 	bl	8017748 <strncmp>
 8005064:	4603      	mov	r3, r0
 8005066:	2b00      	cmp	r3, #0
 8005068:	d164      	bne.n	8005134 <udpReceiveHandler+0xc6c>
	{
		int8_t axis = atoi(strchr(rxBuf, ' ') + 1);
 800506a:	2120      	movs	r1, #32
 800506c:	4828      	ldr	r0, [pc, #160]	@ (8005110 <udpReceiveHandler+0xc48>)
 800506e:	f012 fb5e 	bl	801772e <strchr>
 8005072:	4603      	mov	r3, r0
 8005074:	3301      	adds	r3, #1
 8005076:	4618      	mov	r0, r3
 8005078:	f011 fb15 	bl	80166a6 <atoi>
 800507c:	4603      	mov	r3, r0
 800507e:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
		float speed = atof(strchr(rxBuf, ' ') + 3);
 8005082:	2120      	movs	r1, #32
 8005084:	4822      	ldr	r0, [pc, #136]	@ (8005110 <udpReceiveHandler+0xc48>)
 8005086:	f012 fb52 	bl	801772e <strchr>
 800508a:	4603      	mov	r3, r0
 800508c:	3303      	adds	r3, #3
 800508e:	4618      	mov	r0, r3
 8005090:	f011 fb06 	bl	80166a0 <atof>
 8005094:	ec53 2b10 	vmov	r2, r3, d0
 8005098:	4610      	mov	r0, r2
 800509a:	4619      	mov	r1, r3
 800509c:	f7fb fdb4 	bl	8000c08 <__aeabi_d2f>
 80050a0:	4603      	mov	r3, r0
 80050a2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130

		if(setDriverMaxSpeed(&driver[axis], speed) == PARAM_CHANGE_OK)
 80050a6:	f997 3137 	ldrsb.w	r3, [r7, #311]	@ 0x137
 80050aa:	2268      	movs	r2, #104	@ 0x68
 80050ac:	fb02 f303 	mul.w	r3, r2, r3
 80050b0:	4a18      	ldr	r2, [pc, #96]	@ (8005114 <udpReceiveHandler+0xc4c>)
 80050b2:	4413      	add	r3, r2
 80050b4:	ed97 0a4c 	vldr	s0, [r7, #304]	@ 0x130
 80050b8:	4618      	mov	r0, r3
 80050ba:	f7fc fcb5 	bl	8001a28 <setDriverMaxSpeed>
 80050be:	4603      	mov	r3, r0
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d110      	bne.n	80050e6 <udpReceiveHandler+0xc1e>
		{
			sprintf(data, "%ld - STM32: Max speed of driver %d = %d (steps/sec);\n", counter, axis, (int16_t)speed);
 80050c4:	4b14      	ldr	r3, [pc, #80]	@ (8005118 <udpReceiveHandler+0xc50>)
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	f997 3137 	ldrsb.w	r3, [r7, #311]	@ 0x137
 80050cc:	edd7 7a4c 	vldr	s15, [r7, #304]	@ 0x130
 80050d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80050d4:	ee17 1a90 	vmov	r1, s15
 80050d8:	b209      	sxth	r1, r1
 80050da:	4638      	mov	r0, r7
 80050dc:	9100      	str	r1, [sp, #0]
 80050de:	4914      	ldr	r1, [pc, #80]	@ (8005130 <udpReceiveHandler+0xc68>)
 80050e0:	f012 fa8e 	bl	8017600 <siprintf>
 80050e4:	e007      	b.n	80050f6 <udpReceiveHandler+0xc2e>
		}
		else sprintf(data, "%ld - STM32: Error changing max speed of driver - %d;\n", counter, axis);
 80050e6:	4b0c      	ldr	r3, [pc, #48]	@ (8005118 <udpReceiveHandler+0xc50>)
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	f997 3137 	ldrsb.w	r3, [r7, #311]	@ 0x137
 80050ee:	4638      	mov	r0, r7
 80050f0:	490d      	ldr	r1, [pc, #52]	@ (8005128 <udpReceiveHandler+0xc60>)
 80050f2:	f012 fa85 	bl	8017600 <siprintf>

		udpClientSend(data);
 80050f6:	463b      	mov	r3, r7
 80050f8:	4618      	mov	r0, r3
 80050fa:	f000 fa1b 	bl	8005534 <udpClientSend>

		memset(rxBuf, 0, 128);
 80050fe:	2280      	movs	r2, #128	@ 0x80
 8005100:	2100      	movs	r1, #0
 8005102:	4803      	ldr	r0, [pc, #12]	@ (8005110 <udpReceiveHandler+0xc48>)
 8005104:	f012 fb0b 	bl	801771e <memset>
		return;
 8005108:	e18f      	b.n	800542a <udpReceiveHandler+0xf62>
 800510a:	bf00      	nop
 800510c:	2000081c 	.word	0x2000081c
 8005110:	2000e4a4 	.word	0x2000e4a4
 8005114:	2000e0ac 	.word	0x2000e0ac
 8005118:	2000e524 	.word	0x2000e524
 800511c:	0801ffe4 	.word	0x0801ffe4
 8005120:	0801ff6c 	.word	0x0801ff6c
 8005124:	08020020 	.word	0x08020020
 8005128:	08020058 	.word	0x08020058
 800512c:	08020090 	.word	0x08020090
 8005130:	080200c4 	.word	0x080200c4
	}

	/* Установить целевую позицию _targetPosition оси axis */
	if(strncmp(rxBuf, udpcommands.setDriverTargetPosDeg, strlen(udpcommands.setDriverTargetPosDeg)) == 0)
 8005134:	4bbf      	ldr	r3, [pc, #764]	@ (8005434 <udpReceiveHandler+0xf6c>)
 8005136:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
 8005138:	4bbe      	ldr	r3, [pc, #760]	@ (8005434 <udpReceiveHandler+0xf6c>)
 800513a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800513c:	4618      	mov	r0, r3
 800513e:	f7fb f851 	bl	80001e4 <strlen>
 8005142:	4603      	mov	r3, r0
 8005144:	461a      	mov	r2, r3
 8005146:	4621      	mov	r1, r4
 8005148:	48bb      	ldr	r0, [pc, #748]	@ (8005438 <udpReceiveHandler+0xf70>)
 800514a:	f012 fafd 	bl	8017748 <strncmp>
 800514e:	4603      	mov	r3, r0
 8005150:	2b00      	cmp	r3, #0
 8005152:	d14e      	bne.n	80051f2 <udpReceiveHandler+0xd2a>
	{
		int8_t axis = atoi(strchr(rxBuf, ' ') + 1);
 8005154:	2120      	movs	r1, #32
 8005156:	48b8      	ldr	r0, [pc, #736]	@ (8005438 <udpReceiveHandler+0xf70>)
 8005158:	f012 fae9 	bl	801772e <strchr>
 800515c:	4603      	mov	r3, r0
 800515e:	3301      	adds	r3, #1
 8005160:	4618      	mov	r0, r3
 8005162:	f011 faa0 	bl	80166a6 <atoi>
 8005166:	4603      	mov	r3, r0
 8005168:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
		float target_pos = atof(strchr(rxBuf, ' ') + 3);
 800516c:	2120      	movs	r1, #32
 800516e:	48b2      	ldr	r0, [pc, #712]	@ (8005438 <udpReceiveHandler+0xf70>)
 8005170:	f012 fadd 	bl	801772e <strchr>
 8005174:	4603      	mov	r3, r0
 8005176:	3303      	adds	r3, #3
 8005178:	4618      	mov	r0, r3
 800517a:	f011 fa91 	bl	80166a0 <atof>
 800517e:	ec53 2b10 	vmov	r2, r3, d0
 8005182:	4610      	mov	r0, r2
 8005184:	4619      	mov	r1, r3
 8005186:	f7fb fd3f 	bl	8000c08 <__aeabi_d2f>
 800518a:	4603      	mov	r3, r0
 800518c:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138

		if(setDriverTargetPosDeg(&driver[axis], target_pos) == PARAM_CHANGE_OK)
 8005190:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 8005194:	2268      	movs	r2, #104	@ 0x68
 8005196:	fb02 f303 	mul.w	r3, r2, r3
 800519a:	4aa8      	ldr	r2, [pc, #672]	@ (800543c <udpReceiveHandler+0xf74>)
 800519c:	4413      	add	r3, r2
 800519e:	ed97 0a4e 	vldr	s0, [r7, #312]	@ 0x138
 80051a2:	4618      	mov	r0, r3
 80051a4:	f7fc fbf8 	bl	8001998 <setDriverTargetPosDeg>
 80051a8:	4603      	mov	r3, r0
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d10f      	bne.n	80051ce <udpReceiveHandler+0xd06>
		{
			sprintf(data, "%ld - STM32: Target position of driver %d = %ld (deg);\n", counter, axis, (int32_t)target_pos);
 80051ae:	4ba4      	ldr	r3, [pc, #656]	@ (8005440 <udpReceiveHandler+0xf78>)
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 80051b6:	edd7 7a4e 	vldr	s15, [r7, #312]	@ 0x138
 80051ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80051be:	ee17 1a90 	vmov	r1, s15
 80051c2:	4638      	mov	r0, r7
 80051c4:	9100      	str	r1, [sp, #0]
 80051c6:	499f      	ldr	r1, [pc, #636]	@ (8005444 <udpReceiveHandler+0xf7c>)
 80051c8:	f012 fa1a 	bl	8017600 <siprintf>
 80051cc:	e007      	b.n	80051de <udpReceiveHandler+0xd16>
		}
		else sprintf(data, "%ld - STM32: Error changing target position of driver - %d;\n", counter, axis);
 80051ce:	4b9c      	ldr	r3, [pc, #624]	@ (8005440 <udpReceiveHandler+0xf78>)
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 80051d6:	4638      	mov	r0, r7
 80051d8:	499b      	ldr	r1, [pc, #620]	@ (8005448 <udpReceiveHandler+0xf80>)
 80051da:	f012 fa11 	bl	8017600 <siprintf>

		udpClientSend(data);
 80051de:	463b      	mov	r3, r7
 80051e0:	4618      	mov	r0, r3
 80051e2:	f000 f9a7 	bl	8005534 <udpClientSend>

		memset(rxBuf, 0, 128);
 80051e6:	2280      	movs	r2, #128	@ 0x80
 80051e8:	2100      	movs	r1, #0
 80051ea:	4893      	ldr	r0, [pc, #588]	@ (8005438 <udpReceiveHandler+0xf70>)
 80051ec:	f012 fa97 	bl	801771e <memset>
		return;
 80051f0:	e11b      	b.n	800542a <udpReceiveHandler+0xf62>
	}

	if(strncmp(rxBuf, udpcommands.setDriverTargetPosMm, strlen(udpcommands.setDriverTargetPosMm)) == 0)
 80051f2:	4b90      	ldr	r3, [pc, #576]	@ (8005434 <udpReceiveHandler+0xf6c>)
 80051f4:	6d5c      	ldr	r4, [r3, #84]	@ 0x54
 80051f6:	4b8f      	ldr	r3, [pc, #572]	@ (8005434 <udpReceiveHandler+0xf6c>)
 80051f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051fa:	4618      	mov	r0, r3
 80051fc:	f7fa fff2 	bl	80001e4 <strlen>
 8005200:	4603      	mov	r3, r0
 8005202:	461a      	mov	r2, r3
 8005204:	4621      	mov	r1, r4
 8005206:	488c      	ldr	r0, [pc, #560]	@ (8005438 <udpReceiveHandler+0xf70>)
 8005208:	f012 fa9e 	bl	8017748 <strncmp>
 800520c:	4603      	mov	r3, r0
 800520e:	2b00      	cmp	r3, #0
 8005210:	d14e      	bne.n	80052b0 <udpReceiveHandler+0xde8>
	{
		int8_t axis = atoi(strchr(rxBuf, ' ') + 1);
 8005212:	2120      	movs	r1, #32
 8005214:	4888      	ldr	r0, [pc, #544]	@ (8005438 <udpReceiveHandler+0xf70>)
 8005216:	f012 fa8a 	bl	801772e <strchr>
 800521a:	4603      	mov	r3, r0
 800521c:	3301      	adds	r3, #1
 800521e:	4618      	mov	r0, r3
 8005220:	f011 fa41 	bl	80166a6 <atoi>
 8005224:	4603      	mov	r3, r0
 8005226:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
		float target_pos = atof(strchr(rxBuf, ' ') + 3);
 800522a:	2120      	movs	r1, #32
 800522c:	4882      	ldr	r0, [pc, #520]	@ (8005438 <udpReceiveHandler+0xf70>)
 800522e:	f012 fa7e 	bl	801772e <strchr>
 8005232:	4603      	mov	r3, r0
 8005234:	3303      	adds	r3, #3
 8005236:	4618      	mov	r0, r3
 8005238:	f011 fa32 	bl	80166a0 <atof>
 800523c:	ec53 2b10 	vmov	r2, r3, d0
 8005240:	4610      	mov	r0, r2
 8005242:	4619      	mov	r1, r3
 8005244:	f7fb fce0 	bl	8000c08 <__aeabi_d2f>
 8005248:	4603      	mov	r3, r0
 800524a:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140

		if(setDriverTargetPosMm(&driver[axis], target_pos) == PARAM_CHANGE_OK)
 800524e:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 8005252:	2268      	movs	r2, #104	@ 0x68
 8005254:	fb02 f303 	mul.w	r3, r2, r3
 8005258:	4a78      	ldr	r2, [pc, #480]	@ (800543c <udpReceiveHandler+0xf74>)
 800525a:	4413      	add	r3, r2
 800525c:	ed97 0a50 	vldr	s0, [r7, #320]	@ 0x140
 8005260:	4618      	mov	r0, r3
 8005262:	f7fc fbba 	bl	80019da <setDriverTargetPosMm>
 8005266:	4603      	mov	r3, r0
 8005268:	2b00      	cmp	r3, #0
 800526a:	d10f      	bne.n	800528c <udpReceiveHandler+0xdc4>
		{
			sprintf(data, "%ld - STM32: Target position of driver %d = %ld (mm);\n", counter, axis, (int32_t)target_pos);
 800526c:	4b74      	ldr	r3, [pc, #464]	@ (8005440 <udpReceiveHandler+0xf78>)
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 8005274:	edd7 7a50 	vldr	s15, [r7, #320]	@ 0x140
 8005278:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800527c:	ee17 1a90 	vmov	r1, s15
 8005280:	4638      	mov	r0, r7
 8005282:	9100      	str	r1, [sp, #0]
 8005284:	4971      	ldr	r1, [pc, #452]	@ (800544c <udpReceiveHandler+0xf84>)
 8005286:	f012 f9bb 	bl	8017600 <siprintf>
 800528a:	e007      	b.n	800529c <udpReceiveHandler+0xdd4>
		}
		else sprintf(data, "%ld - STM32: Error changing target position of driver - %d;\n", counter, axis);
 800528c:	4b6c      	ldr	r3, [pc, #432]	@ (8005440 <udpReceiveHandler+0xf78>)
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 8005294:	4638      	mov	r0, r7
 8005296:	496c      	ldr	r1, [pc, #432]	@ (8005448 <udpReceiveHandler+0xf80>)
 8005298:	f012 f9b2 	bl	8017600 <siprintf>

		udpClientSend(data);
 800529c:	463b      	mov	r3, r7
 800529e:	4618      	mov	r0, r3
 80052a0:	f000 f948 	bl	8005534 <udpClientSend>

		memset(rxBuf, 0, 128);
 80052a4:	2280      	movs	r2, #128	@ 0x80
 80052a6:	2100      	movs	r1, #0
 80052a8:	4863      	ldr	r0, [pc, #396]	@ (8005438 <udpReceiveHandler+0xf70>)
 80052aa:	f012 fa38 	bl	801771e <memset>
		return;
 80052ae:	e0bc      	b.n	800542a <udpReceiveHandler+0xf62>
	}

	if(strncmp(rxBuf, udpcommands.setDriverTargetPos, strlen(udpcommands.setDriverTargetPos)) == 0)
 80052b0:	4b60      	ldr	r3, [pc, #384]	@ (8005434 <udpReceiveHandler+0xf6c>)
 80052b2:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 80052b4:	4b5f      	ldr	r3, [pc, #380]	@ (8005434 <udpReceiveHandler+0xf6c>)
 80052b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052b8:	4618      	mov	r0, r3
 80052ba:	f7fa ff93 	bl	80001e4 <strlen>
 80052be:	4603      	mov	r3, r0
 80052c0:	461a      	mov	r2, r3
 80052c2:	4621      	mov	r1, r4
 80052c4:	485c      	ldr	r0, [pc, #368]	@ (8005438 <udpReceiveHandler+0xf70>)
 80052c6:	f012 fa3f 	bl	8017748 <strncmp>
 80052ca:	4603      	mov	r3, r0
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d144      	bne.n	800535a <udpReceiveHandler+0xe92>
	{
		int8_t axis = atoi(strchr(rxBuf, ' ') + 1);
 80052d0:	2120      	movs	r1, #32
 80052d2:	4859      	ldr	r0, [pc, #356]	@ (8005438 <udpReceiveHandler+0xf70>)
 80052d4:	f012 fa2b 	bl	801772e <strchr>
 80052d8:	4603      	mov	r3, r0
 80052da:	3301      	adds	r3, #1
 80052dc:	4618      	mov	r0, r3
 80052de:	f011 f9e2 	bl	80166a6 <atoi>
 80052e2:	4603      	mov	r3, r0
 80052e4:	f887 314d 	strb.w	r3, [r7, #333]	@ 0x14d
		int32_t target_pos = atol(strchr(rxBuf, ' ') + 3);
 80052e8:	2120      	movs	r1, #32
 80052ea:	4853      	ldr	r0, [pc, #332]	@ (8005438 <udpReceiveHandler+0xf70>)
 80052ec:	f012 fa1f 	bl	801772e <strchr>
 80052f0:	4603      	mov	r3, r0
 80052f2:	3303      	adds	r3, #3
 80052f4:	4618      	mov	r0, r3
 80052f6:	f011 f9da 	bl	80166ae <atol>
 80052fa:	f8c7 0148 	str.w	r0, [r7, #328]	@ 0x148

		if(setDriverTargetPos(&driver[axis], target_pos) == PARAM_CHANGE_OK)
 80052fe:	f997 314d 	ldrsb.w	r3, [r7, #333]	@ 0x14d
 8005302:	2268      	movs	r2, #104	@ 0x68
 8005304:	fb02 f303 	mul.w	r3, r2, r3
 8005308:	4a4c      	ldr	r2, [pc, #304]	@ (800543c <udpReceiveHandler+0xf74>)
 800530a:	4413      	add	r3, r2
 800530c:	f8d7 1148 	ldr.w	r1, [r7, #328]	@ 0x148
 8005310:	4618      	mov	r0, r3
 8005312:	f7fc fa75 	bl	8001800 <setDriverTargetPos>
 8005316:	4603      	mov	r3, r0
 8005318:	2b00      	cmp	r3, #0
 800531a:	d10c      	bne.n	8005336 <udpReceiveHandler+0xe6e>
		{
			sprintf(data, "%ld - STM32: Target position of driver %d = %ld (steps);\n", counter, axis, target_pos);
 800531c:	4b48      	ldr	r3, [pc, #288]	@ (8005440 <udpReceiveHandler+0xf78>)
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	f997 114d 	ldrsb.w	r1, [r7, #333]	@ 0x14d
 8005324:	4638      	mov	r0, r7
 8005326:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800532a:	9300      	str	r3, [sp, #0]
 800532c:	460b      	mov	r3, r1
 800532e:	4948      	ldr	r1, [pc, #288]	@ (8005450 <udpReceiveHandler+0xf88>)
 8005330:	f012 f966 	bl	8017600 <siprintf>
 8005334:	e007      	b.n	8005346 <udpReceiveHandler+0xe7e>
		}
		else sprintf(data, "%ld - STM32: Error changing target position of driver - %d;\n", counter, axis);
 8005336:	4b42      	ldr	r3, [pc, #264]	@ (8005440 <udpReceiveHandler+0xf78>)
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	f997 314d 	ldrsb.w	r3, [r7, #333]	@ 0x14d
 800533e:	4638      	mov	r0, r7
 8005340:	4941      	ldr	r1, [pc, #260]	@ (8005448 <udpReceiveHandler+0xf80>)
 8005342:	f012 f95d 	bl	8017600 <siprintf>

		udpClientSend(data);
 8005346:	463b      	mov	r3, r7
 8005348:	4618      	mov	r0, r3
 800534a:	f000 f8f3 	bl	8005534 <udpClientSend>

		memset(rxBuf, 0, 128);
 800534e:	2280      	movs	r2, #128	@ 0x80
 8005350:	2100      	movs	r1, #0
 8005352:	4839      	ldr	r0, [pc, #228]	@ (8005438 <udpReceiveHandler+0xf70>)
 8005354:	f012 f9e3 	bl	801771e <memset>
		return;
 8005358:	e067      	b.n	800542a <udpReceiveHandler+0xf62>
	}

	if(rxBuf[0] == 'S')
 800535a:	4b37      	ldr	r3, [pc, #220]	@ (8005438 <udpReceiveHandler+0xf70>)
 800535c:	781b      	ldrb	r3, [r3, #0]
 800535e:	2b53      	cmp	r3, #83	@ 0x53
 8005360:	d12c      	bne.n	80053bc <udpReceiveHandler+0xef4>
	{
		/* VELOCITY_MODE */
		if(rxBuf[1] == 'T' && rxBuf[2] == 'S') // Задать целевую скорость
 8005362:	4b35      	ldr	r3, [pc, #212]	@ (8005438 <udpReceiveHandler+0xf70>)
 8005364:	785b      	ldrb	r3, [r3, #1]
 8005366:	2b54      	cmp	r3, #84	@ 0x54
 8005368:	d128      	bne.n	80053bc <udpReceiveHandler+0xef4>
 800536a:	4b33      	ldr	r3, [pc, #204]	@ (8005438 <udpReceiveHandler+0xf70>)
 800536c:	789b      	ldrb	r3, [r3, #2]
 800536e:	2b53      	cmp	r3, #83	@ 0x53
 8005370:	d124      	bne.n	80053bc <udpReceiveHandler+0xef4>
		{
			int16_t speed = strtol(&rxBuf[3], NULL, 10);
 8005372:	220a      	movs	r2, #10
 8005374:	2100      	movs	r1, #0
 8005376:	4837      	ldr	r0, [pc, #220]	@ (8005454 <udpReceiveHandler+0xf8c>)
 8005378:	f012 f864 	bl	8017444 <strtol>
 800537c:	4603      	mov	r3, r0
 800537e:	f8a7 314e 	strh.w	r3, [r7, #334]	@ 0x14e
			setDriverTargetSpeedDeg(&driver[0], speed);
 8005382:	f9b7 314e 	ldrsh.w	r3, [r7, #334]	@ 0x14e
 8005386:	ee07 3a90 	vmov	s15, r3
 800538a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800538e:	eeb0 0a67 	vmov.f32	s0, s15
 8005392:	482a      	ldr	r0, [pc, #168]	@ (800543c <udpReceiveHandler+0xf74>)
 8005394:	f7fc fece 	bl	8002134 <setDriverTargetSpeedDeg>

			sprintf(data, "%ld - STM32: Target velocity (deg/sec) = %d;\n", counter, speed);
 8005398:	4b29      	ldr	r3, [pc, #164]	@ (8005440 <udpReceiveHandler+0xf78>)
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	f9b7 314e 	ldrsh.w	r3, [r7, #334]	@ 0x14e
 80053a0:	4638      	mov	r0, r7
 80053a2:	492d      	ldr	r1, [pc, #180]	@ (8005458 <udpReceiveHandler+0xf90>)
 80053a4:	f012 f92c 	bl	8017600 <siprintf>
			udpClientSend(data);
 80053a8:	463b      	mov	r3, r7
 80053aa:	4618      	mov	r0, r3
 80053ac:	f000 f8c2 	bl	8005534 <udpClientSend>

			memset(rxBuf, 0, 128);
 80053b0:	2280      	movs	r2, #128	@ 0x80
 80053b2:	2100      	movs	r1, #0
 80053b4:	4820      	ldr	r0, [pc, #128]	@ (8005438 <udpReceiveHandler+0xf70>)
 80053b6:	f012 f9b2 	bl	801771e <memset>
			return;
 80053ba:	e036      	b.n	800542a <udpReceiveHandler+0xf62>
		}
	}

	if(rxBuf[0] == 'G')
 80053bc:	4b1e      	ldr	r3, [pc, #120]	@ (8005438 <udpReceiveHandler+0xf70>)
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	2b47      	cmp	r3, #71	@ 0x47
 80053c2:	d121      	bne.n	8005408 <udpReceiveHandler+0xf40>
	{
		if(rxBuf[1] == 'C' && rxBuf[2] == 'P') // Получить позицию
 80053c4:	4b1c      	ldr	r3, [pc, #112]	@ (8005438 <udpReceiveHandler+0xf70>)
 80053c6:	785b      	ldrb	r3, [r3, #1]
 80053c8:	2b43      	cmp	r3, #67	@ 0x43
 80053ca:	d11d      	bne.n	8005408 <udpReceiveHandler+0xf40>
 80053cc:	4b1a      	ldr	r3, [pc, #104]	@ (8005438 <udpReceiveHandler+0xf70>)
 80053ce:	789b      	ldrb	r3, [r3, #2]
 80053d0:	2b50      	cmp	r3, #80	@ 0x50
 80053d2:	d119      	bne.n	8005408 <udpReceiveHandler+0xf40>
		{
			sprintf(data, "%ld - STM32: Current position = %ld;\n", counter, (int32_t)getDriverCurrentPosDeg(&driver[0]));
 80053d4:	4b1a      	ldr	r3, [pc, #104]	@ (8005440 <udpReceiveHandler+0xf78>)
 80053d6:	681c      	ldr	r4, [r3, #0]
 80053d8:	4818      	ldr	r0, [pc, #96]	@ (800543c <udpReceiveHandler+0xf74>)
 80053da:	f7fc fc47 	bl	8001c6c <getDriverCurrentPosDeg>
 80053de:	eef0 7a40 	vmov.f32	s15, s0
 80053e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80053e6:	4638      	mov	r0, r7
 80053e8:	ee17 3a90 	vmov	r3, s15
 80053ec:	4622      	mov	r2, r4
 80053ee:	491b      	ldr	r1, [pc, #108]	@ (800545c <udpReceiveHandler+0xf94>)
 80053f0:	f012 f906 	bl	8017600 <siprintf>
			udpClientSend(data);
 80053f4:	463b      	mov	r3, r7
 80053f6:	4618      	mov	r0, r3
 80053f8:	f000 f89c 	bl	8005534 <udpClientSend>

			memset(rxBuf, 0, 128);
 80053fc:	2280      	movs	r2, #128	@ 0x80
 80053fe:	2100      	movs	r1, #0
 8005400:	480d      	ldr	r0, [pc, #52]	@ (8005438 <udpReceiveHandler+0xf70>)
 8005402:	f012 f98c 	bl	801771e <memset>
			return;
 8005406:	e010      	b.n	800542a <udpReceiveHandler+0xf62>
		}
	}

	sprintf(data, "%ld - STM32: Echo - %s\n", counter, rxBuf);
 8005408:	4b0d      	ldr	r3, [pc, #52]	@ (8005440 <udpReceiveHandler+0xf78>)
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	4638      	mov	r0, r7
 800540e:	4b0a      	ldr	r3, [pc, #40]	@ (8005438 <udpReceiveHandler+0xf70>)
 8005410:	4913      	ldr	r1, [pc, #76]	@ (8005460 <udpReceiveHandler+0xf98>)
 8005412:	f012 f8f5 	bl	8017600 <siprintf>
	udpClientSend(data);
 8005416:	463b      	mov	r3, r7
 8005418:	4618      	mov	r0, r3
 800541a:	f000 f88b 	bl	8005534 <udpClientSend>

	memset(rxBuf, 0, 128);
 800541e:	2280      	movs	r2, #128	@ 0x80
 8005420:	2100      	movs	r1, #0
 8005422:	4805      	ldr	r0, [pc, #20]	@ (8005438 <udpReceiveHandler+0xf70>)
 8005424:	f012 f97b 	bl	801771e <memset>
	return;
 8005428:	bf00      	nop
}
 800542a:	f507 77aa 	add.w	r7, r7, #340	@ 0x154
 800542e:	46bd      	mov	sp, r7
 8005430:	bd90      	pop	{r4, r7, pc}
 8005432:	bf00      	nop
 8005434:	2000081c 	.word	0x2000081c
 8005438:	2000e4a4 	.word	0x2000e4a4
 800543c:	2000e0ac 	.word	0x2000e0ac
 8005440:	2000e524 	.word	0x2000e524
 8005444:	080200fc 	.word	0x080200fc
 8005448:	08020134 	.word	0x08020134
 800544c:	08020174 	.word	0x08020174
 8005450:	080201ac 	.word	0x080201ac
 8005454:	2000e4a7 	.word	0x2000e4a7
 8005458:	080201e8 	.word	0x080201e8
 800545c:	08020218 	.word	0x08020218
 8005460:	08020240 	.word	0x08020240

08005464 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005464:	b480      	push	{r7}
 8005466:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005468:	b672      	cpsid	i
}
 800546a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800546c:	bf00      	nop
 800546e:	e7fd      	b.n	800546c <Error_Handler+0x8>

08005470 <udpSocketInit>:
int8_t netBuf[FIFO_NET_SIZE];

/** Функция инициализации UDP сетевого интерфейса
 */
void udpSocketInit(void)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b084      	sub	sp, #16
 8005474:	af00      	add	r7, sp, #0
	/* Переменная ошибок работы UDP интерфейса */
	err_t err;

	/* Новый UDP управляющий блок */
	upcb = udp_new();
 8005476:	f00e fe05 	bl	8014084 <udp_new>
 800547a:	4603      	mov	r3, r0
 800547c:	4a16      	ldr	r2, [pc, #88]	@ (80054d8 <udpSocketInit+0x68>)
 800547e:	6013      	str	r3, [r2, #0]

	/* Связать IP адрес и порт */
	ip_addr_t myIPaddr;

	/* IP адрес устройства */
	IP_ADDR4(&myIPaddr, 192, 168, 1, 156);
 8005480:	4b16      	ldr	r3, [pc, #88]	@ (80054dc <udpSocketInit+0x6c>)
 8005482:	60bb      	str	r3, [r7, #8]
	udp_bind(upcb, &myIPaddr, 1556);
 8005484:	4b14      	ldr	r3, [pc, #80]	@ (80054d8 <udpSocketInit+0x68>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f107 0108 	add.w	r1, r7, #8
 800548c:	f240 6214 	movw	r2, #1556	@ 0x614
 8005490:	4618      	mov	r0, r3
 8005492:	f00e fc9f 	bl	8013dd4 <udp_bind>

	/* Конфигурация IP адреса и порта назначения - ПК */
	ip_addr_t DestIPaddr;
	IP_ADDR4(&DestIPaddr, 192, 168, 1, 2);
 8005496:	4b12      	ldr	r3, [pc, #72]	@ (80054e0 <udpSocketInit+0x70>)
 8005498:	607b      	str	r3, [r7, #4]
	err = udp_connect(upcb, &DestIPaddr, 1555);
 800549a:	4b0f      	ldr	r3, [pc, #60]	@ (80054d8 <udpSocketInit+0x68>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	1d39      	adds	r1, r7, #4
 80054a0:	f240 6213 	movw	r2, #1555	@ 0x613
 80054a4:	4618      	mov	r0, r3
 80054a6:	f00e fd1d 	bl	8013ee4 <udp_connect>
 80054aa:	4603      	mov	r3, r0
 80054ac:	73fb      	strb	r3, [r7, #15]

	if (err == ERR_OK)
 80054ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d106      	bne.n	80054c4 <udpSocketInit+0x54>
	{
		/* Передача указателя на функцию обработчика входящих пакетов в структуру UDP интерфейса */
		udp_recv(upcb, udpReceiveCallback, NULL);
 80054b6:	4b08      	ldr	r3, [pc, #32]	@ (80054d8 <udpSocketInit+0x68>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	2200      	movs	r2, #0
 80054bc:	4909      	ldr	r1, [pc, #36]	@ (80054e4 <udpSocketInit+0x74>)
 80054be:	4618      	mov	r0, r3
 80054c0:	f00e fd7e 	bl	8013fc0 <udp_recv>
	}

	/* Инициализация буфера сетевого интерфейса с размеров 64 * 2 байта = 128 байт*/
	fifoInit(&fifoNetBuf, netBuf, FIFO_NET_SIZE);
 80054c4:	2280      	movs	r2, #128	@ 0x80
 80054c6:	4908      	ldr	r1, [pc, #32]	@ (80054e8 <udpSocketInit+0x78>)
 80054c8:	4808      	ldr	r0, [pc, #32]	@ (80054ec <udpSocketInit+0x7c>)
 80054ca:	f7fc fe8f 	bl	80021ec <fifoInit>
}
 80054ce:	bf00      	nop
 80054d0:	3710      	adds	r7, #16
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}
 80054d6:	bf00      	nop
 80054d8:	2000e4a0 	.word	0x2000e4a0
 80054dc:	9c01a8c0 	.word	0x9c01a8c0
 80054e0:	0201a8c0 	.word	0x0201a8c0
 80054e4:	080054f1 	.word	0x080054f1
 80054e8:	2000e538 	.word	0x2000e538
 80054ec:	2000e528 	.word	0x2000e528

080054f0 <udpReceiveCallback>:

/** Функция обработки принятых пакетов UDP
 */
void udpReceiveCallback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b084      	sub	sp, #16
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	60f8      	str	r0, [r7, #12]
 80054f8:	60b9      	str	r1, [r7, #8]
 80054fa:	607a      	str	r2, [r7, #4]
 80054fc:	603b      	str	r3, [r7, #0]
	strncpy(rxBuf, (char *)p->payload, p->len);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6859      	ldr	r1, [r3, #4]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	895b      	ldrh	r3, [r3, #10]
 8005506:	461a      	mov	r2, r3
 8005508:	4808      	ldr	r0, [pc, #32]	@ (800552c <udpReceiveCallback+0x3c>)
 800550a:	f012 f92f 	bl	801776c <strncpy>
	counter ++;
 800550e:	4b08      	ldr	r3, [pc, #32]	@ (8005530 <udpReceiveCallback+0x40>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	3301      	adds	r3, #1
 8005514:	4a06      	ldr	r2, [pc, #24]	@ (8005530 <udpReceiveCallback+0x40>)
 8005516:	6013      	str	r3, [r2, #0]
	pbuf_free(p);
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f008 fa15 	bl	800d948 <pbuf_free>

	/* Вызов обработчик принятных сообщений */
	udpReceiveHandler();
 800551e:	f7fe ffd3 	bl	80044c8 <udpReceiveHandler>
}
 8005522:	bf00      	nop
 8005524:	3710      	adds	r7, #16
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
 800552a:	bf00      	nop
 800552c:	2000e4a4 	.word	0x2000e4a4
 8005530:	2000e524 	.word	0x2000e524

08005534 <udpClientSend>:

/** Функция отправки сообщения по UDP
 */
void udpClientSend(char *buf)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b0c4      	sub	sp, #272	@ 0x110
 8005538:	af00      	add	r7, sp, #0
 800553a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800553e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005542:	6018      	str	r0, [r3, #0]
	struct pbuf *txBuf;
	char data[256];

	int len = sprintf(data, "%s\n", (char *)buf);
 8005544:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005548:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800554c:	f107 0008 	add.w	r0, r7, #8
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	4917      	ldr	r1, [pc, #92]	@ (80055b0 <udpClientSend+0x7c>)
 8005554:	f012 f854 	bl	8017600 <siprintf>
 8005558:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c

	/* Выделить память под данные в буфере */
	txBuf = pbuf_alloc(PBUF_TRANSPORT, len, PBUF_RAM);
 800555c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005560:	b29b      	uxth	r3, r3
 8005562:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8005566:	4619      	mov	r1, r3
 8005568:	2036      	movs	r0, #54	@ 0x36
 800556a:	f007 ff09 	bl	800d380 <pbuf_alloc>
 800556e:	f8c7 0108 	str.w	r0, [r7, #264]	@ 0x108

	if (txBuf != NULL)
 8005572:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8005576:	2b00      	cmp	r3, #0
 8005578:	d014      	beq.n	80055a4 <udpClientSend+0x70>
	{
		pbuf_take(txBuf, data, len);
 800557a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800557e:	b29a      	uxth	r2, r3
 8005580:	f107 0308 	add.w	r3, r7, #8
 8005584:	4619      	mov	r1, r3
 8005586:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 800558a:	f008 fc85 	bl	800de98 <pbuf_take>
		udp_send(upcb, txBuf);
 800558e:	4b09      	ldr	r3, [pc, #36]	@ (80055b4 <udpClientSend+0x80>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f8d7 1108 	ldr.w	r1, [r7, #264]	@ 0x108
 8005596:	4618      	mov	r0, r3
 8005598:	f00e fa32 	bl	8013a00 <udp_send>
    	pbuf_free(txBuf);
 800559c:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 80055a0:	f008 f9d2 	bl	800d948 <pbuf_free>
	}
}
 80055a4:	bf00      	nop
 80055a6:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	bf00      	nop
 80055b0:	08020258 	.word	0x08020258
 80055b4:	2000e4a0 	.word	0x2000e4a0

080055b8 <plannerFunctionsInit>:

/* Указатель на функцию для измерения времени */
static timeFunction_uint32_t_ptr getPlannerMicros;

void plannerFunctionsInit(timeFunction_uint32_t_ptr function1)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b083      	sub	sp, #12
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
	getPlannerMicros = function1;
 80055c0:	4a04      	ldr	r2, [pc, #16]	@ (80055d4 <plannerFunctionsInit+0x1c>)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6013      	str	r3, [r2, #0]
}
 80055c6:	bf00      	nop
 80055c8:	370c      	adds	r7, #12
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr
 80055d2:	bf00      	nop
 80055d4:	2000e5b8 	.word	0x2000e5b8

080055d8 <plannerInit>:

/** Инициализация планироващика
 *
 */
void plannerInit(PLANNER_StructDef* planner)
{
 80055d8:	b480      	push	{r7}
 80055da:	b085      	sub	sp, #20
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
	/* Указатели на структуры драйверов моторов */
	for(uint8_t i = 0; i < AXES; i ++)
 80055e0:	2300      	movs	r3, #0
 80055e2:	73fb      	strb	r3, [r7, #15]
 80055e4:	e007      	b.n	80055f6 <plannerInit+0x1e>
	{
		planner->driver[i] = 0;
 80055e6:	7bfa      	ldrb	r2, [r7, #15]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2100      	movs	r1, #0
 80055ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(uint8_t i = 0; i < AXES; i ++)
 80055f0:	7bfb      	ldrb	r3, [r7, #15]
 80055f2:	3301      	adds	r3, #1
 80055f4:	73fb      	strb	r3, [r7, #15]
 80055f6:	7bfb      	ldrb	r3, [r7, #15]
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d9f4      	bls.n	80055e6 <plannerInit+0xe>
	}

	planner->_PlannerTime = 0;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2200      	movs	r2, #0
 8005600:	609a      	str	r2, [r3, #8]

	planner->_curSpeed = 0;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2200      	movs	r2, #0
 8005606:	60da      	str	r2, [r3, #12]
	planner->_maxSpeed = 20 * 160; /* 20 мм/c --> 20 * 160 шаг/c */
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f44f 6248 	mov.w	r2, #3200	@ 0xc80
 800560e:	611a      	str	r2, [r3, #16]
	planner->_accel = 10 * 200; /* Ускорение по умолчанию 10 мм/c^2 */
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8005616:	615a      	str	r2, [r3, #20]

	planner->tickUs = 0;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2200      	movs	r2, #0
 800561c:	61da      	str	r2, [r3, #28]
	planner->stepTime = 0;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2200      	movs	r2, #0
 8005622:	625a      	str	r2, [r3, #36]	@ 0x24
	planner->_prevTime = 0;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2200      	movs	r2, #0
 8005628:	621a      	str	r2, [r3, #32]

	planner->_stopFlag = false;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2200      	movs	r2, #0
 800562e:	761a      	strb	r2, [r3, #24]
	planner->_pauseFlag = false;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2200      	movs	r2, #0
 8005634:	765a      	strb	r2, [r3, #25]
	planner->_workState = PLANNER_INIT;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2201      	movs	r2, #1
 800563a:	76da      	strb	r2, [r3, #27]
	planner->_phase = STAND;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2203      	movs	r2, #3
 8005640:	769a      	strb	r2, [r3, #26]

	planner->_c0 = 0;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f04f 0200 	mov.w	r2, #0
 8005648:	629a      	str	r2, [r3, #40]	@ 0x28
	planner->_cn = 0;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	f04f 0200 	mov.w	r2, #0
 8005650:	62da      	str	r2, [r3, #44]	@ 0x2c
	planner->_n = 0;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2200      	movs	r2, #0
 8005656:	631a      	str	r2, [r3, #48]	@ 0x30
	planner->N = 0;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2200      	movs	r2, #0
 800565c:	635a      	str	r2, [r3, #52]	@ 0x34
	planner->_cmin = 1.0;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8005664:	639a      	str	r2, [r3, #56]	@ 0x38

	planner->_s1 = 0;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2200      	movs	r2, #0
 800566a:	63da      	str	r2, [r3, #60]	@ 0x3c
	planner->_s2 = 0;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2200      	movs	r2, #0
 8005670:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	planner->_s3 = 0;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2200      	movs	r2, #0
 8005678:	645a      	str	r2, [r3, #68]	@ 0x44
	planner->_k = 0;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2200      	movs	r2, #0
 800567e:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8005680:	bf00      	nop
 8005682:	3714      	adds	r7, #20
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr

0800568c <tickPlanner>:
/** Здесь происходит движение мотора, функция должна вызываться как можно чаще,
 * 	имеется встроенный таймер на тиках микропроцессора
 * 	Возвращает PLANNER_RUN, процесс движения запущен
 */
void tickPlanner(PLANNER_StructDef* planner)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b084      	sub	sp, #16
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
	if (planner->_workState == PLANNER_RUN)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f993 301b 	ldrsb.w	r3, [r3, #27]
 800569a:	2b03      	cmp	r3, #3
 800569c:	d161      	bne.n	8005762 <tickPlanner+0xd6>
	{
		/* Сравнение ускорения с нулем */
		if (planner->_accel > EPS) plannerVelocity(planner);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	695b      	ldr	r3, [r3, #20]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	dd02      	ble.n	80056ac <tickPlanner+0x20>
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f000 f866 	bl	8005778 <plannerVelocity>

		planner->tickUs = getPlannerMicros();
 80056ac:	4b2f      	ldr	r3, [pc, #188]	@ (800576c <tickPlanner+0xe0>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4798      	blx	r3
 80056b2:	4602      	mov	r2, r0
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	61da      	str	r2, [r3, #28]

		/* Основной таймер планировщика */
		if (planner->tickUs - planner->_prevTime >= planner->stepTime)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	69da      	ldr	r2, [r3, #28]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6a1b      	ldr	r3, [r3, #32]
 80056c0:	1ad2      	subs	r2, r2, r3
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056c6:	429a      	cmp	r2, r3
 80056c8:	d34b      	bcc.n	8005762 <tickPlanner+0xd6>
		{
			planner->_prevTime = planner->tickUs;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	69da      	ldr	r2, [r3, #28]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	621a      	str	r2, [r3, #32]

			/* Чтение ячейки FIFO буфера шагов и воспроизведение шагов */
			int8_t rx_bin;
			fifoRead(&fifoBufSteps, &rx_bin);
 80056d2:	f107 030e 	add.w	r3, r7, #14
 80056d6:	4619      	mov	r1, r3
 80056d8:	4825      	ldr	r0, [pc, #148]	@ (8005770 <tickPlanner+0xe4>)
 80056da:	f7fc fe4a 	bl	8002372 <fifoRead>

			for(uint8_t i = 0; i < AXES; i ++)
 80056de:	2300      	movs	r3, #0
 80056e0:	73fb      	strb	r3, [r7, #15]
 80056e2:	e03a      	b.n	800575a <tickPlanner+0xce>
			{
				if((rx_bin & 3) == 1)
 80056e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	f003 0303 	and.w	r3, r3, #3
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d10f      	bne.n	8005712 <tickPlanner+0x86>
				{
					/* Устанавливаем направление и производим шаг мотором */
					planner->driver[i]->stepper->dir = 1;
 80056f2:	7bfa      	ldrb	r2, [r7, #15]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	2201      	movs	r2, #1
 80056fe:	771a      	strb	r2, [r3, #28]
					step(planner->driver[i]->stepper);
 8005700:	7bfa      	ldrb	r2, [r7, #15]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4618      	mov	r0, r3
 800570c:	f000 fac8 	bl	8005ca0 <step>

					break;
 8005710:	e027      	b.n	8005762 <tickPlanner+0xd6>
				}
				else if((rx_bin & 3) == 3)
 8005712:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005716:	b2db      	uxtb	r3, r3
 8005718:	f003 0303 	and.w	r3, r3, #3
 800571c:	2b03      	cmp	r3, #3
 800571e:	d10f      	bne.n	8005740 <tickPlanner+0xb4>
				{
					/* Устанавливаем направление и производим шаг мотором */
					planner->driver[i]->stepper->dir = -1;
 8005720:	7bfa      	ldrb	r2, [r7, #15]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	22ff      	movs	r2, #255	@ 0xff
 800572c:	771a      	strb	r2, [r3, #28]
					step(planner->driver[i]->stepper);
 800572e:	7bfa      	ldrb	r2, [r7, #15]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4618      	mov	r0, r3
 800573a:	f000 fab1 	bl	8005ca0 <step>

					break;
 800573e:	e010      	b.n	8005762 <tickPlanner+0xd6>
				}

				rx_bin >>= (i + 1) * 2;
 8005740:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005744:	461a      	mov	r2, r3
 8005746:	7bfb      	ldrb	r3, [r7, #15]
 8005748:	3301      	adds	r3, #1
 800574a:	005b      	lsls	r3, r3, #1
 800574c:	fa42 f303 	asr.w	r3, r2, r3
 8005750:	b25b      	sxtb	r3, r3
 8005752:	73bb      	strb	r3, [r7, #14]
			for(uint8_t i = 0; i < AXES; i ++)
 8005754:	7bfb      	ldrb	r3, [r7, #15]
 8005756:	3301      	adds	r3, #1
 8005758:	73fb      	strb	r3, [r7, #15]
 800575a:	7bfb      	ldrb	r3, [r7, #15]
 800575c:	2b01      	cmp	r3, #1
 800575e:	d9c1      	bls.n	80056e4 <tickPlanner+0x58>
			}
		}
	}
}
 8005760:	e7ff      	b.n	8005762 <tickPlanner+0xd6>
 8005762:	bf00      	nop
 8005764:	3710      	adds	r7, #16
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}
 800576a:	bf00      	nop
 800576c:	2000e5b8 	.word	0x2000e5b8
 8005770:	2000d820 	.word	0x2000d820
 8005774:	00000000 	.word	0x00000000

08005778 <plannerVelocity>:
static planner_phase_t phase;

/** Планировщик скорости
 */
void plannerVelocity(PLANNER_StructDef* planner)
{
 8005778:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800577c:	b082      	sub	sp, #8
 800577e:	af00      	add	r7, sp, #0
 8005780:	6078      	str	r0, [r7, #4]
	if (planner->tickUs - planner->_PlannerTime >= planner->stepTime)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	69da      	ldr	r2, [r3, #28]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	1ad2      	subs	r2, r2, r3
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005790:	429a      	cmp	r2, r3
 8005792:	f0c0 80bd 	bcc.w	8005910 <plannerVelocity+0x198>
	{
		if(planner->_pauseFlag == false)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	7e5b      	ldrb	r3, [r3, #25]
 800579a:	f083 0301 	eor.w	r3, r3, #1
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d002      	beq.n	80057aa <plannerVelocity+0x32>
		{
			/* Планировщик фазы движения */
			plannerPhase(planner);
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f000 f8c9 	bl	800593c <plannerPhase>
		}

		phase = planner->_phase;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f993 201a 	ldrsb.w	r2, [r3, #26]
 80057b0:	4b5f      	ldr	r3, [pc, #380]	@ (8005930 <plannerVelocity+0x1b8>)
 80057b2:	701a      	strb	r2, [r3, #0]

		/* Обновление переменной времени планировщика */
		planner->_PlannerTime = planner->tickUs;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	69da      	ldr	r2, [r3, #28]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	609a      	str	r2, [r3, #8]

		/* Основная логика разгона и торможения */
		if(phase == ACCELERATION || phase == BRAKING)
 80057bc:	4b5c      	ldr	r3, [pc, #368]	@ (8005930 <plannerVelocity+0x1b8>)
 80057be:	f993 3000 	ldrsb.w	r3, [r3]
 80057c2:	2b01      	cmp	r3, #1
 80057c4:	d006      	beq.n	80057d4 <plannerVelocity+0x5c>
 80057c6:	4b5a      	ldr	r3, [pc, #360]	@ (8005930 <plannerVelocity+0x1b8>)
 80057c8:	f993 3000 	ldrsb.w	r3, [r3]
 80057cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057d0:	f040 8097 	bne.w	8005902 <plannerVelocity+0x18a>
		{
			if(planner->_n == 0) planner->_cn = planner->_c0;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d104      	bne.n	80057e6 <plannerVelocity+0x6e>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80057e4:	e066      	b.n	80058b4 <plannerVelocity+0x13c>
			else if(planner->_n == 1) planner->_cn = 0.4056 * planner->_c0;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057ea:	2b01      	cmp	r3, #1
 80057ec:	d113      	bne.n	8005816 <plannerVelocity+0x9e>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057f2:	4618      	mov	r0, r3
 80057f4:	f7fa feb8 	bl	8000568 <__aeabi_f2d>
 80057f8:	a349      	add	r3, pc, #292	@ (adr r3, 8005920 <plannerVelocity+0x1a8>)
 80057fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057fe:	f7fa ff0b 	bl	8000618 <__aeabi_dmul>
 8005802:	4602      	mov	r2, r0
 8005804:	460b      	mov	r3, r1
 8005806:	4610      	mov	r0, r2
 8005808:	4619      	mov	r1, r3
 800580a:	f7fb f9fd 	bl	8000c08 <__aeabi_d2f>
 800580e:	4602      	mov	r2, r0
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005814:	e04e      	b.n	80058b4 <plannerVelocity+0x13c>
			else if(planner->_n > 1)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800581a:	2b01      	cmp	r3, #1
 800581c:	dd4a      	ble.n	80058b4 <plannerVelocity+0x13c>
			{
				planner->_cn = planner->_cn * (1 - phase * 2.0 / (4.0 * planner->_n + phase));
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005822:	4618      	mov	r0, r3
 8005824:	f7fa fea0 	bl	8000568 <__aeabi_f2d>
 8005828:	4604      	mov	r4, r0
 800582a:	460d      	mov	r5, r1
 800582c:	4b40      	ldr	r3, [pc, #256]	@ (8005930 <plannerVelocity+0x1b8>)
 800582e:	f993 3000 	ldrsb.w	r3, [r3]
 8005832:	4618      	mov	r0, r3
 8005834:	f7fa fe86 	bl	8000544 <__aeabi_i2d>
 8005838:	4602      	mov	r2, r0
 800583a:	460b      	mov	r3, r1
 800583c:	f7fa fd36 	bl	80002ac <__adddf3>
 8005840:	4602      	mov	r2, r0
 8005842:	460b      	mov	r3, r1
 8005844:	4690      	mov	r8, r2
 8005846:	4699      	mov	r9, r3
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800584c:	4618      	mov	r0, r3
 800584e:	f7fa fe79 	bl	8000544 <__aeabi_i2d>
 8005852:	f04f 0200 	mov.w	r2, #0
 8005856:	4b37      	ldr	r3, [pc, #220]	@ (8005934 <plannerVelocity+0x1bc>)
 8005858:	f7fa fede 	bl	8000618 <__aeabi_dmul>
 800585c:	4602      	mov	r2, r0
 800585e:	460b      	mov	r3, r1
 8005860:	4692      	mov	sl, r2
 8005862:	469b      	mov	fp, r3
 8005864:	4b32      	ldr	r3, [pc, #200]	@ (8005930 <plannerVelocity+0x1b8>)
 8005866:	f993 3000 	ldrsb.w	r3, [r3]
 800586a:	4618      	mov	r0, r3
 800586c:	f7fa fe6a 	bl	8000544 <__aeabi_i2d>
 8005870:	4602      	mov	r2, r0
 8005872:	460b      	mov	r3, r1
 8005874:	4650      	mov	r0, sl
 8005876:	4659      	mov	r1, fp
 8005878:	f7fa fd18 	bl	80002ac <__adddf3>
 800587c:	4602      	mov	r2, r0
 800587e:	460b      	mov	r3, r1
 8005880:	4640      	mov	r0, r8
 8005882:	4649      	mov	r1, r9
 8005884:	f7fa fff2 	bl	800086c <__aeabi_ddiv>
 8005888:	4602      	mov	r2, r0
 800588a:	460b      	mov	r3, r1
 800588c:	f04f 0000 	mov.w	r0, #0
 8005890:	4929      	ldr	r1, [pc, #164]	@ (8005938 <plannerVelocity+0x1c0>)
 8005892:	f7fa fd09 	bl	80002a8 <__aeabi_dsub>
 8005896:	4602      	mov	r2, r0
 8005898:	460b      	mov	r3, r1
 800589a:	4620      	mov	r0, r4
 800589c:	4629      	mov	r1, r5
 800589e:	f7fa febb 	bl	8000618 <__aeabi_dmul>
 80058a2:	4602      	mov	r2, r0
 80058a4:	460b      	mov	r3, r1
 80058a6:	4610      	mov	r0, r2
 80058a8:	4619      	mov	r1, r3
 80058aa:	f7fb f9ad 	bl	8000c08 <__aeabi_d2f>
 80058ae:	4602      	mov	r2, r0
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	62da      	str	r2, [r3, #44]	@ 0x2c
			}

			planner->stepTime = (uint32_t)(planner->_cn) - STEP_TIME;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80058ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058be:	ee17 3a90 	vmov	r3, s15
 80058c2:	1f5a      	subs	r2, r3, #5
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	625a      	str	r2, [r3, #36]	@ 0x24
			planner->_curSpeed = 1000000.0 / planner->_cn;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058cc:	4618      	mov	r0, r3
 80058ce:	f7fa fe4b 	bl	8000568 <__aeabi_f2d>
 80058d2:	4602      	mov	r2, r0
 80058d4:	460b      	mov	r3, r1
 80058d6:	a114      	add	r1, pc, #80	@ (adr r1, 8005928 <plannerVelocity+0x1b0>)
 80058d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80058dc:	f7fa ffc6 	bl	800086c <__aeabi_ddiv>
 80058e0:	4602      	mov	r2, r0
 80058e2:	460b      	mov	r3, r1
 80058e4:	4610      	mov	r0, r2
 80058e6:	4619      	mov	r1, r3
 80058e8:	f7fb f946 	bl	8000b78 <__aeabi_d2iz>
 80058ec:	4602      	mov	r2, r0
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	60da      	str	r2, [r3, #12]

			planner->_n += phase;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058f6:	4a0e      	ldr	r2, [pc, #56]	@ (8005930 <plannerVelocity+0x1b8>)
 80058f8:	f992 2000 	ldrsb.w	r2, [r2]
 80058fc:	441a      	add	r2, r3
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	631a      	str	r2, [r3, #48]	@ 0x30
		}

		if(planner->_n < 0) planner->_workState = PLANNER_PAUSE;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005906:	2b00      	cmp	r3, #0
 8005908:	da02      	bge.n	8005910 <plannerVelocity+0x198>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2204      	movs	r2, #4
 800590e:	76da      	strb	r2, [r3, #27]
	}
}
 8005910:	bf00      	nop
 8005912:	3708      	adds	r7, #8
 8005914:	46bd      	mov	sp, r7
 8005916:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800591a:	bf00      	nop
 800591c:	f3af 8000 	nop.w
 8005920:	b3d07c85 	.word	0xb3d07c85
 8005924:	3fd9f559 	.word	0x3fd9f559
 8005928:	00000000 	.word	0x00000000
 800592c:	412e8480 	.word	0x412e8480
 8005930:	2000e5bc 	.word	0x2000e5bc
 8005934:	40100000 	.word	0x40100000
 8005938:	3ff00000 	.word	0x3ff00000

0800593c <plannerPhase>:

void plannerPhase(PLANNER_StructDef* planner)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b082      	sub	sp, #8
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
	if(planner->_n == planner->N && planner->_phase == ACCELERATION)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005948:	687a      	ldr	r2, [r7, #4]
 800594a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800594c:	4293      	cmp	r3, r2
 800594e:	d108      	bne.n	8005962 <plannerPhase+0x26>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f993 301a 	ldrsb.w	r3, [r3, #26]
 8005956:	2b01      	cmp	r3, #1
 8005958:	d103      	bne.n	8005962 <plannerPhase+0x26>
	{
		planner->_phase = UNIFORM;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2200      	movs	r2, #0
 800595e:	769a      	strb	r2, [r3, #26]
		return;
 8005960:	e00c      	b.n	800597c <plannerPhase+0x40>
	}

	if(cellsForRead(&fifoBufSteps) == planner->N)
 8005962:	4808      	ldr	r0, [pc, #32]	@ (8005984 <plannerPhase+0x48>)
 8005964:	f7fc fc84 	bl	8002270 <cellsForRead>
 8005968:	4603      	mov	r3, r0
 800596a:	461a      	mov	r2, r3
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005970:	429a      	cmp	r2, r3
 8005972:	d103      	bne.n	800597c <plannerPhase+0x40>
	{
		planner->_phase = BRAKING;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	22ff      	movs	r2, #255	@ 0xff
 8005978:	769a      	strb	r2, [r3, #26]
		return;
 800597a:	bf00      	nop
	}
}
 800597c:	3708      	adds	r7, #8
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}
 8005982:	bf00      	nop
 8005984:	2000d820 	.word	0x2000d820

08005988 <calculatePlannerInitialParam>:

/** Запуск планировщика (запуск движения)
 */
void calculatePlannerInitialParam(PLANNER_StructDef* planner)
{
 8005988:	b5b0      	push	{r4, r5, r7, lr}
 800598a:	b084      	sub	sp, #16
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
	uint32_t steps;

	if (planner->_accel == 0 || planner->_maxSpeed < MIN_SPEED_POS_MODE)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	695b      	ldr	r3, [r3, #20]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d003      	beq.n	80059a0 <calculatePlannerInitialParam+0x18>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	691b      	ldr	r3, [r3, #16]
 800599c:	2b04      	cmp	r3, #4
 800599e:	dc18      	bgt.n	80059d2 <calculatePlannerInitialParam+0x4a>
	{
		planner->stepTime = 1000000.0 / planner->_maxSpeed;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	691b      	ldr	r3, [r3, #16]
 80059a4:	4618      	mov	r0, r3
 80059a6:	f7fa fdcd 	bl	8000544 <__aeabi_i2d>
 80059aa:	4602      	mov	r2, r0
 80059ac:	460b      	mov	r3, r1
 80059ae:	a129      	add	r1, pc, #164	@ (adr r1, 8005a54 <calculatePlannerInitialParam+0xcc>)
 80059b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80059b4:	f7fa ff5a 	bl	800086c <__aeabi_ddiv>
 80059b8:	4602      	mov	r2, r0
 80059ba:	460b      	mov	r3, r1
 80059bc:	4610      	mov	r0, r2
 80059be:	4619      	mov	r1, r3
 80059c0:	f7fb f902 	bl	8000bc8 <__aeabi_d2uiz>
 80059c4:	4602      	mov	r2, r0
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	625a      	str	r2, [r3, #36]	@ 0x24
		planner->_phase = UNIFORM;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2200      	movs	r2, #0
 80059ce:	769a      	strb	r2, [r3, #26]
 80059d0:	e037      	b.n	8005a42 <calculatePlannerInitialParam+0xba>
	}
	else
	{
		steps = cellsForRead(&fifoBufSteps);
 80059d2:	481f      	ldr	r0, [pc, #124]	@ (8005a50 <calculatePlannerInitialParam+0xc8>)
 80059d4:	f7fc fc4c 	bl	8002270 <cellsForRead>
 80059d8:	4603      	mov	r3, r0
 80059da:	60fb      	str	r3, [r7, #12]

		planner->_n = 0;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2200      	movs	r2, #0
 80059e0:	631a      	str	r2, [r3, #48]	@ 0x30

		planner->_phase = ACCELERATION;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2201      	movs	r2, #1
 80059e6:	769a      	strb	r2, [r3, #26]
		planner->N = planner->_maxSpeed * planner->_maxSpeed / (2.0 * planner->_accel);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	691b      	ldr	r3, [r3, #16]
 80059ec:	687a      	ldr	r2, [r7, #4]
 80059ee:	6912      	ldr	r2, [r2, #16]
 80059f0:	fb02 f303 	mul.w	r3, r2, r3
 80059f4:	4618      	mov	r0, r3
 80059f6:	f7fa fda5 	bl	8000544 <__aeabi_i2d>
 80059fa:	4604      	mov	r4, r0
 80059fc:	460d      	mov	r5, r1
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	695b      	ldr	r3, [r3, #20]
 8005a02:	4618      	mov	r0, r3
 8005a04:	f7fa fd9e 	bl	8000544 <__aeabi_i2d>
 8005a08:	4602      	mov	r2, r0
 8005a0a:	460b      	mov	r3, r1
 8005a0c:	f7fa fc4e 	bl	80002ac <__adddf3>
 8005a10:	4602      	mov	r2, r0
 8005a12:	460b      	mov	r3, r1
 8005a14:	4620      	mov	r0, r4
 8005a16:	4629      	mov	r1, r5
 8005a18:	f7fa ff28 	bl	800086c <__aeabi_ddiv>
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	460b      	mov	r3, r1
 8005a20:	4610      	mov	r0, r2
 8005a22:	4619      	mov	r1, r3
 8005a24:	f7fb f8d0 	bl	8000bc8 <__aeabi_d2uiz>
 8005a28:	4602      	mov	r2, r0
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	635a      	str	r2, [r3, #52]	@ 0x34

		if(steps < 2 * planner->N)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a32:	005b      	lsls	r3, r3, #1
 8005a34:	68fa      	ldr	r2, [r7, #12]
 8005a36:	429a      	cmp	r2, r3
 8005a38:	d203      	bcs.n	8005a42 <calculatePlannerInitialParam+0xba>
		{
			planner->N = steps / 2;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	085a      	lsrs	r2, r3, #1
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}

	planner->_workState = PLANNER_RUN;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2203      	movs	r2, #3
 8005a46:	76da      	strb	r2, [r3, #27]
}
 8005a48:	bf00      	nop
 8005a4a:	3710      	adds	r7, #16
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bdb0      	pop	{r4, r5, r7, pc}
 8005a50:	2000d820 	.word	0x2000d820
 8005a54:	00000000 	.word	0x00000000
 8005a58:	412e8480 	.word	0x412e8480
 8005a5c:	00000000 	.word	0x00000000

08005a60 <setPlannerAcceleration>:

/** Установить ускорение планировщика (мм/c^2)
 */
param_change_t setPlannerAcceleration(PLANNER_StructDef* planner, float accel)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b082      	sub	sp, #8
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	ed87 0a00 	vstr	s0, [r7]
	if(planner->_workState == PLANNER_RUN) return PARAM_CHANGE_ERR;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	f993 301b 	ldrsb.w	r3, [r3, #27]
 8005a72:	2b03      	cmp	r3, #3
 8005a74:	d102      	bne.n	8005a7c <setPlannerAcceleration+0x1c>
 8005a76:	f04f 33ff 	mov.w	r3, #4294967295
 8005a7a:	e04d      	b.n	8005b18 <setPlannerAcceleration+0xb8>

	/* Перевод единиц измерения ускорения в шаги/с^2 для 800 шагов на оборот мотора */
	planner->_accel = fabs(accel) * 160;
 8005a7c:	edd7 7a00 	vldr	s15, [r7]
 8005a80:	eef0 7ae7 	vabs.f32	s15, s15
 8005a84:	ee17 0a90 	vmov	r0, s15
 8005a88:	f7fa fd6e 	bl	8000568 <__aeabi_f2d>
 8005a8c:	f04f 0200 	mov.w	r2, #0
 8005a90:	4b27      	ldr	r3, [pc, #156]	@ (8005b30 <setPlannerAcceleration+0xd0>)
 8005a92:	f7fa fdc1 	bl	8000618 <__aeabi_dmul>
 8005a96:	4602      	mov	r2, r0
 8005a98:	460b      	mov	r3, r1
 8005a9a:	4610      	mov	r0, r2
 8005a9c:	4619      	mov	r1, r3
 8005a9e:	f7fb f86b 	bl	8000b78 <__aeabi_d2iz>
 8005aa2:	4602      	mov	r2, r0
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	615a      	str	r2, [r3, #20]

	/* Считаем значение _c0 и _N по алгоритму плавного старта */
	if(accel > EPS)
 8005aa8:	6838      	ldr	r0, [r7, #0]
 8005aaa:	f7fa fd5d 	bl	8000568 <__aeabi_f2d>
 8005aae:	a31c      	add	r3, pc, #112	@ (adr r3, 8005b20 <setPlannerAcceleration+0xc0>)
 8005ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ab4:	f7fb f840 	bl	8000b38 <__aeabi_dcmpgt>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d027      	beq.n	8005b0e <setPlannerAcceleration+0xae>
	{
		planner->_c0 = 1000000.0 * sqrt(2.0 / planner->_accel);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	695b      	ldr	r3, [r3, #20]
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f7fa fd3e 	bl	8000544 <__aeabi_i2d>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	460b      	mov	r3, r1
 8005acc:	f04f 0000 	mov.w	r0, #0
 8005ad0:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8005ad4:	f7fa feca 	bl	800086c <__aeabi_ddiv>
 8005ad8:	4602      	mov	r2, r0
 8005ada:	460b      	mov	r3, r1
 8005adc:	ec43 2b17 	vmov	d7, r2, r3
 8005ae0:	eeb0 0a47 	vmov.f32	s0, s14
 8005ae4:	eef0 0a67 	vmov.f32	s1, s15
 8005ae8:	f013 fea8 	bl	801983c <sqrt>
 8005aec:	ec51 0b10 	vmov	r0, r1, d0
 8005af0:	a30d      	add	r3, pc, #52	@ (adr r3, 8005b28 <setPlannerAcceleration+0xc8>)
 8005af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005af6:	f7fa fd8f 	bl	8000618 <__aeabi_dmul>
 8005afa:	4602      	mov	r2, r0
 8005afc:	460b      	mov	r3, r1
 8005afe:	4610      	mov	r0, r2
 8005b00:	4619      	mov	r1, r3
 8005b02:	f7fb f881 	bl	8000c08 <__aeabi_d2f>
 8005b06:	4602      	mov	r2, r0
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	629a      	str	r2, [r3, #40]	@ 0x28
 8005b0c:	e003      	b.n	8005b16 <setPlannerAcceleration+0xb6>
	}
	else planner->_c0 = 0;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	f04f 0200 	mov.w	r2, #0
 8005b14:	629a      	str	r2, [r3, #40]	@ 0x28

	return PARAM_CHANGE_OK;
 8005b16:	2300      	movs	r3, #0
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3708      	adds	r7, #8
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd80      	pop	{r7, pc}
 8005b20:	e826d695 	.word	0xe826d695
 8005b24:	3e112e0b 	.word	0x3e112e0b
 8005b28:	00000000 	.word	0x00000000
 8005b2c:	412e8480 	.word	0x412e8480
 8005b30:	40640000 	.word	0x40640000

08005b34 <setPlannerMaxSpeed>:

/** Установка максимальной скорости планировщика (мм/c^2)
 *
 */
param_change_t setPlannerMaxSpeed(PLANNER_StructDef* planner, float speed)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b082      	sub	sp, #8
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	ed87 0a00 	vstr	s0, [r7]
	if(planner->_workState == PLANNER_RUN) return PARAM_CHANGE_ERR;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f993 301b 	ldrsb.w	r3, [r3, #27]
 8005b46:	2b03      	cmp	r3, #3
 8005b48:	d102      	bne.n	8005b50 <setPlannerMaxSpeed+0x1c>
 8005b4a:	f04f 33ff 	mov.w	r3, #4294967295
 8005b4e:	e016      	b.n	8005b7e <setPlannerMaxSpeed+0x4a>

	/* Перевод максимальной скорости в шаги/с^2 */
	planner->_maxSpeed = fabs(speed) * 160;
 8005b50:	edd7 7a00 	vldr	s15, [r7]
 8005b54:	eef0 7ae7 	vabs.f32	s15, s15
 8005b58:	ee17 0a90 	vmov	r0, s15
 8005b5c:	f7fa fd04 	bl	8000568 <__aeabi_f2d>
 8005b60:	f04f 0200 	mov.w	r2, #0
 8005b64:	4b08      	ldr	r3, [pc, #32]	@ (8005b88 <setPlannerMaxSpeed+0x54>)
 8005b66:	f7fa fd57 	bl	8000618 <__aeabi_dmul>
 8005b6a:	4602      	mov	r2, r0
 8005b6c:	460b      	mov	r3, r1
 8005b6e:	4610      	mov	r0, r2
 8005b70:	4619      	mov	r1, r3
 8005b72:	f7fb f801 	bl	8000b78 <__aeabi_d2iz>
 8005b76:	4602      	mov	r2, r0
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	611a      	str	r2, [r3, #16]

	return PARAM_CHANGE_OK;
 8005b7c:	2300      	movs	r3, #0
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3708      	adds	r7, #8
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}
 8005b86:	bf00      	nop
 8005b88:	40640000 	.word	0x40640000

08005b8c <addDriver>:

/** Подключить драйвер мотора driver на ось axis к планировщику
 */
void addDriver(PLANNER_StructDef* planner, DRIVER_StructDef* driver, uint8_t axis)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b085      	sub	sp, #20
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	60f8      	str	r0, [r7, #12]
 8005b94:	60b9      	str	r1, [r7, #8]
 8005b96:	4613      	mov	r3, r2
 8005b98:	71fb      	strb	r3, [r7, #7]
	planner->driver[axis] = driver;
 8005b9a:	79fa      	ldrb	r2, [r7, #7]
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	68b9      	ldr	r1, [r7, #8]
 8005ba0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8005ba4:	bf00      	nop
 8005ba6:	3714      	adds	r7, #20
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bae:	4770      	bx	lr

08005bb0 <pausePlanner>:

/** Функция паузы движения
 *
 */
void pausePlanner(PLANNER_StructDef* planner)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b082      	sub	sp, #8
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
	if(cellsForRead(&fifoBufSteps) > planner->N)
 8005bb8:	4809      	ldr	r0, [pc, #36]	@ (8005be0 <pausePlanner+0x30>)
 8005bba:	f7fc fb59 	bl	8002270 <cellsForRead>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d905      	bls.n	8005bd6 <pausePlanner+0x26>
	{
		planner->_pauseFlag = true;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2201      	movs	r2, #1
 8005bce:	765a      	strb	r2, [r3, #25]
		planner->_phase = BRAKING;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	22ff      	movs	r2, #255	@ 0xff
 8005bd4:	769a      	strb	r2, [r3, #26]
	}
}
 8005bd6:	bf00      	nop
 8005bd8:	3708      	adds	r7, #8
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}
 8005bde:	bf00      	nop
 8005be0:	2000d820 	.word	0x2000d820

08005be4 <resumePlanner>:

/** Продолжить после остановки/паузы
 *
 */
void resumePlanner(PLANNER_StructDef* planner)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b082      	sub	sp, #8
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
	calculatePlannerInitialParam(planner);
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f7ff fecb 	bl	8005988 <calculatePlannerInitialParam>
	planner->_pauseFlag = false;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	765a      	strb	r2, [r3, #25]

	planner->_workState = PLANNER_RUN;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2203      	movs	r2, #3
 8005bfc:	76da      	strb	r2, [r3, #27]
}
 8005bfe:	bf00      	nop
 8005c00:	3708      	adds	r7, #8
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}

08005c06 <stopPlanner>:

/** Функция резкой остановки
 *
 */
void stopPlanner(PLANNER_StructDef* planner)
{
 8005c06:	b480      	push	{r7}
 8005c08:	b083      	sub	sp, #12
 8005c0a:	af00      	add	r7, sp, #0
 8005c0c:	6078      	str	r0, [r7, #4]
	planner->_workState = PLANNER_STOP;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2206      	movs	r2, #6
 8005c12:	76da      	strb	r2, [r3, #27]
}
 8005c14:	bf00      	nop
 8005c16:	370c      	adds	r7, #12
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr

08005c20 <stepperFunctionsInit>:

/**	Функция инициализации указателей на функции из других областей программы
 * 	для использования в данной библиотеке
 */
void stepperFunctionsInit(writePinFunction_void_ptr function)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b083      	sub	sp, #12
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
	setPin = function;
 8005c28:	4a04      	ldr	r2, [pc, #16]	@ (8005c3c <stepperFunctionsInit+0x1c>)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6013      	str	r3, [r2, #0]
}
 8005c2e:	bf00      	nop
 8005c30:	370c      	adds	r7, #12
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr
 8005c3a:	bf00      	nop
 8005c3c:	2000e5c0 	.word	0x2000e5c0

08005c40 <stepperInit>:
 *
 * 	Функция определяет пины шагового мотора и инициализирует начальные данные мотора -
 * 	позицию, направление, статус включения, глобальное определение поведения пинов DIR, EN
 */
void stepperInit(STEPPER_StructDef* stepper, STEPPER_PINS_StructDef* pins)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b083      	sub	sp, #12
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
 8005c48:	6039      	str	r1, [r7, #0]
	stepper->stepper_pins.GPIOx_step = pins->GPIOx_step;
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	681a      	ldr	r2, [r3, #0]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	601a      	str	r2, [r3, #0]
	stepper->stepper_pins.GPIO_Pin_step = pins->GPIO_Pin_step;
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	889a      	ldrh	r2, [r3, #4]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	809a      	strh	r2, [r3, #4]

	stepper->stepper_pins.GPIOx_dir = pins->GPIOx_dir;
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	689a      	ldr	r2, [r3, #8]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	609a      	str	r2, [r3, #8]
	stepper->stepper_pins.GPIO_Pin_dir = pins->GPIO_Pin_dir;
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	899a      	ldrh	r2, [r3, #12]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	819a      	strh	r2, [r3, #12]

	stepper->stepper_pins.GPIOx_en = 0x0;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	611a      	str	r2, [r3, #16]
	stepper->stepper_pins.GPIO_Pin_en = 0x0;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2200      	movs	r2, #0
 8005c74:	829a      	strh	r2, [r3, #20]

	stepper->pos = 0;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	619a      	str	r2, [r3, #24]
	stepper->dir = 1;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	771a      	strb	r2, [r3, #28]
	stepper->en = OFF;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2200      	movs	r2, #0
 8005c86:	775a      	strb	r2, [r3, #29]

	stepper->_globEn = false;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	779a      	strb	r2, [r3, #30]
	stepper->_globDir = false;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2200      	movs	r2, #0
 8005c92:	77da      	strb	r2, [r3, #31]
}
 8005c94:	bf00      	nop
 8005c96:	370c      	adds	r7, #12
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr

08005ca0 <step>:

/** Функция выполнения шага мотором
 */
void step(STEPPER_StructDef* stepper)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b082      	sub	sp, #8
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
	stepper->pos += stepper->dir;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	7f1b      	ldrb	r3, [r3, #28]
 8005cac:	b25a      	sxtb	r2, r3
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	699b      	ldr	r3, [r3, #24]
 8005cb2:	441a      	add	r2, r3
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	619a      	str	r2, [r3, #24]
	setDir(stepper, stepper->dir);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	7f1b      	ldrb	r3, [r3, #28]
 8005cbc:	b25b      	sxtb	r3, r3
 8005cbe:	4619      	mov	r1, r3
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f000 f819 	bl	8005cf8 <setDir>

	setPin(stepper->stepper_pins.GPIOx_step, stepper->stepper_pins.GPIO_Pin_step, PIN_SET);
 8005cc6:	4b0b      	ldr	r3, [pc, #44]	@ (8005cf4 <step+0x54>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	687a      	ldr	r2, [r7, #4]
 8005ccc:	6810      	ldr	r0, [r2, #0]
 8005cce:	687a      	ldr	r2, [r7, #4]
 8005cd0:	8891      	ldrh	r1, [r2, #4]
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	4798      	blx	r3
	DWT_usDelay(STEP_TIME);
 8005cd6:	2005      	movs	r0, #5
 8005cd8:	f7fc fa64 	bl	80021a4 <DWT_usDelay>
	setPin(stepper->stepper_pins.GPIOx_step, stepper->stepper_pins.GPIO_Pin_step, PIN_RESET);
 8005cdc:	4b05      	ldr	r3, [pc, #20]	@ (8005cf4 <step+0x54>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	687a      	ldr	r2, [r7, #4]
 8005ce2:	6810      	ldr	r0, [r2, #0]
 8005ce4:	687a      	ldr	r2, [r7, #4]
 8005ce6:	8891      	ldrh	r1, [r2, #4]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	4798      	blx	r3
}
 8005cec:	bf00      	nop
 8005cee:	3708      	adds	r7, #8
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}
 8005cf4:	2000e5c0 	.word	0x2000e5c0

08005cf8 <setDir>:
 * 	dir = 1 - движение мотора по часовой стрелки
 * 	dir = -1 - движение моторапротив часовой стрелки
 * 	Направление вращения определяется со стороны задней части мотора,
 */
void setDir(STEPPER_StructDef* stepper, int8_t dir)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b082      	sub	sp, #8
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
 8005d00:	460b      	mov	r3, r1
 8005d02:	70fb      	strb	r3, [r7, #3]
	if(stepper->_globDir == false)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	7fdb      	ldrb	r3, [r3, #31]
 8005d08:	b2db      	uxtb	r3, r3
 8005d0a:	f083 0301 	eor.w	r3, r3, #1
 8005d0e:	b2db      	uxtb	r3, r3
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d01b      	beq.n	8005d4c <setDir+0x54>
	{
		if(dir == 1)
 8005d14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	d10b      	bne.n	8005d34 <setDir+0x3c>
		{
			stepper->dir = 1;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	771a      	strb	r2, [r3, #28]
			setPin(stepper->stepper_pins.GPIOx_dir, stepper->stepper_pins.GPIO_Pin_dir, PIN_SET);
 8005d22:	4b1a      	ldr	r3, [pc, #104]	@ (8005d8c <setDir+0x94>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	687a      	ldr	r2, [r7, #4]
 8005d28:	6890      	ldr	r0, [r2, #8]
 8005d2a:	687a      	ldr	r2, [r7, #4]
 8005d2c:	8991      	ldrh	r1, [r2, #12]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	4798      	blx	r3
		else
		{
			stepper->dir = -1;
			setPin(stepper->stepper_pins.GPIOx_dir, stepper->stepper_pins.GPIO_Pin_dir, PIN_SET);
		}
}
 8005d32:	e026      	b.n	8005d82 <setDir+0x8a>
			stepper->dir = -1;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	22ff      	movs	r2, #255	@ 0xff
 8005d38:	771a      	strb	r2, [r3, #28]
			setPin(stepper->stepper_pins.GPIOx_dir, stepper->stepper_pins.GPIO_Pin_dir, PIN_RESET);
 8005d3a:	4b14      	ldr	r3, [pc, #80]	@ (8005d8c <setDir+0x94>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	687a      	ldr	r2, [r7, #4]
 8005d40:	6890      	ldr	r0, [r2, #8]
 8005d42:	687a      	ldr	r2, [r7, #4]
 8005d44:	8991      	ldrh	r1, [r2, #12]
 8005d46:	2200      	movs	r2, #0
 8005d48:	4798      	blx	r3
}
 8005d4a:	e01a      	b.n	8005d82 <setDir+0x8a>
	else if(dir == 1)
 8005d4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d10b      	bne.n	8005d6c <setDir+0x74>
		stepper->dir = 1;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2201      	movs	r2, #1
 8005d58:	771a      	strb	r2, [r3, #28]
		setPin(stepper->stepper_pins.GPIOx_dir, stepper->stepper_pins.GPIO_Pin_dir, PIN_RESET);
 8005d5a:	4b0c      	ldr	r3, [pc, #48]	@ (8005d8c <setDir+0x94>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	687a      	ldr	r2, [r7, #4]
 8005d60:	6890      	ldr	r0, [r2, #8]
 8005d62:	687a      	ldr	r2, [r7, #4]
 8005d64:	8991      	ldrh	r1, [r2, #12]
 8005d66:	2200      	movs	r2, #0
 8005d68:	4798      	blx	r3
}
 8005d6a:	e00a      	b.n	8005d82 <setDir+0x8a>
			stepper->dir = -1;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	22ff      	movs	r2, #255	@ 0xff
 8005d70:	771a      	strb	r2, [r3, #28]
			setPin(stepper->stepper_pins.GPIOx_dir, stepper->stepper_pins.GPIO_Pin_dir, PIN_SET);
 8005d72:	4b06      	ldr	r3, [pc, #24]	@ (8005d8c <setDir+0x94>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	687a      	ldr	r2, [r7, #4]
 8005d78:	6890      	ldr	r0, [r2, #8]
 8005d7a:	687a      	ldr	r2, [r7, #4]
 8005d7c:	8991      	ldrh	r1, [r2, #12]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	4798      	blx	r3
}
 8005d82:	bf00      	nop
 8005d84:	3708      	adds	r7, #8
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}
 8005d8a:	bf00      	nop
 8005d8c:	2000e5c0 	.word	0x2000e5c0

08005d90 <enableStepper>:

/** Включение мотора
 */
void enableStepper(STEPPER_StructDef* stepper)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b082      	sub	sp, #8
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
	stepper->en = ON;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	775a      	strb	r2, [r3, #29]

	if(stepper->_globEn == false)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	7f9b      	ldrb	r3, [r3, #30]
 8005da2:	b2db      	uxtb	r3, r3
 8005da4:	f083 0301 	eor.w	r3, r3, #1
 8005da8:	b2db      	uxtb	r3, r3
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d008      	beq.n	8005dc0 <enableStepper+0x30>
	{
		setPin(stepper->stepper_pins.GPIOx_en, stepper->stepper_pins.GPIO_Pin_en, PIN_SET);
 8005dae:	4b0a      	ldr	r3, [pc, #40]	@ (8005dd8 <enableStepper+0x48>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	687a      	ldr	r2, [r7, #4]
 8005db4:	6910      	ldr	r0, [r2, #16]
 8005db6:	687a      	ldr	r2, [r7, #4]
 8005db8:	8a91      	ldrh	r1, [r2, #20]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	4798      	blx	r3
	}
	else setPin(stepper->stepper_pins.GPIOx_en, stepper->stepper_pins.GPIO_Pin_en, PIN_RESET);
}
 8005dbe:	e007      	b.n	8005dd0 <enableStepper+0x40>
	else setPin(stepper->stepper_pins.GPIOx_en, stepper->stepper_pins.GPIO_Pin_en, PIN_RESET);
 8005dc0:	4b05      	ldr	r3, [pc, #20]	@ (8005dd8 <enableStepper+0x48>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	687a      	ldr	r2, [r7, #4]
 8005dc6:	6910      	ldr	r0, [r2, #16]
 8005dc8:	687a      	ldr	r2, [r7, #4]
 8005dca:	8a91      	ldrh	r1, [r2, #20]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	4798      	blx	r3
}
 8005dd0:	bf00      	nop
 8005dd2:	3708      	adds	r7, #8
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}
 8005dd8:	2000e5c0 	.word	0x2000e5c0

08005ddc <disableStepper>:

/** Выключение мотора
 */
void disableStepper(STEPPER_StructDef* stepper)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b082      	sub	sp, #8
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
	stepper->en = OFF;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	775a      	strb	r2, [r3, #29]

	if(stepper->_globEn == false)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	7f9b      	ldrb	r3, [r3, #30]
 8005dee:	b2db      	uxtb	r3, r3
 8005df0:	f083 0301 	eor.w	r3, r3, #1
 8005df4:	b2db      	uxtb	r3, r3
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d008      	beq.n	8005e0c <disableStepper+0x30>
	{
		setPin(stepper->stepper_pins.GPIOx_en, stepper->stepper_pins.GPIO_Pin_en, PIN_RESET);
 8005dfa:	4b0a      	ldr	r3, [pc, #40]	@ (8005e24 <disableStepper+0x48>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	687a      	ldr	r2, [r7, #4]
 8005e00:	6910      	ldr	r0, [r2, #16]
 8005e02:	687a      	ldr	r2, [r7, #4]
 8005e04:	8a91      	ldrh	r1, [r2, #20]
 8005e06:	2200      	movs	r2, #0
 8005e08:	4798      	blx	r3
	}
	else setPin(stepper->stepper_pins.GPIOx_en, stepper->stepper_pins.GPIO_Pin_en, PIN_SET);
}
 8005e0a:	e007      	b.n	8005e1c <disableStepper+0x40>
	else setPin(stepper->stepper_pins.GPIOx_en, stepper->stepper_pins.GPIO_Pin_en, PIN_SET);
 8005e0c:	4b05      	ldr	r3, [pc, #20]	@ (8005e24 <disableStepper+0x48>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	687a      	ldr	r2, [r7, #4]
 8005e12:	6910      	ldr	r0, [r2, #16]
 8005e14:	687a      	ldr	r2, [r7, #4]
 8005e16:	8a91      	ldrh	r1, [r2, #20]
 8005e18:	2201      	movs	r2, #1
 8005e1a:	4798      	blx	r3
}
 8005e1c:	bf00      	nop
 8005e1e:	3708      	adds	r7, #8
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}
 8005e24:	2000e5c0 	.word	0x2000e5c0

08005e28 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b083      	sub	sp, #12
 8005e2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005e2e:	2300      	movs	r3, #0
 8005e30:	607b      	str	r3, [r7, #4]
 8005e32:	4b10      	ldr	r3, [pc, #64]	@ (8005e74 <HAL_MspInit+0x4c>)
 8005e34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e36:	4a0f      	ldr	r2, [pc, #60]	@ (8005e74 <HAL_MspInit+0x4c>)
 8005e38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005e3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8005e3e:	4b0d      	ldr	r3, [pc, #52]	@ (8005e74 <HAL_MspInit+0x4c>)
 8005e40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005e46:	607b      	str	r3, [r7, #4]
 8005e48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	603b      	str	r3, [r7, #0]
 8005e4e:	4b09      	ldr	r3, [pc, #36]	@ (8005e74 <HAL_MspInit+0x4c>)
 8005e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e52:	4a08      	ldr	r2, [pc, #32]	@ (8005e74 <HAL_MspInit+0x4c>)
 8005e54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e58:	6413      	str	r3, [r2, #64]	@ 0x40
 8005e5a:	4b06      	ldr	r3, [pc, #24]	@ (8005e74 <HAL_MspInit+0x4c>)
 8005e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e62:	603b      	str	r3, [r7, #0]
 8005e64:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005e66:	bf00      	nop
 8005e68:	370c      	adds	r7, #12
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e70:	4770      	bx	lr
 8005e72:	bf00      	nop
 8005e74:	40023800 	.word	0x40023800

08005e78 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b08a      	sub	sp, #40	@ 0x28
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e80:	f107 0314 	add.w	r3, r7, #20
 8005e84:	2200      	movs	r2, #0
 8005e86:	601a      	str	r2, [r3, #0]
 8005e88:	605a      	str	r2, [r3, #4]
 8005e8a:	609a      	str	r2, [r3, #8]
 8005e8c:	60da      	str	r2, [r3, #12]
 8005e8e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a17      	ldr	r2, [pc, #92]	@ (8005ef4 <HAL_ADC_MspInit+0x7c>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d127      	bne.n	8005eea <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	613b      	str	r3, [r7, #16]
 8005e9e:	4b16      	ldr	r3, [pc, #88]	@ (8005ef8 <HAL_ADC_MspInit+0x80>)
 8005ea0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ea2:	4a15      	ldr	r2, [pc, #84]	@ (8005ef8 <HAL_ADC_MspInit+0x80>)
 8005ea4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ea8:	6453      	str	r3, [r2, #68]	@ 0x44
 8005eaa:	4b13      	ldr	r3, [pc, #76]	@ (8005ef8 <HAL_ADC_MspInit+0x80>)
 8005eac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005eae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005eb2:	613b      	str	r3, [r7, #16]
 8005eb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	60fb      	str	r3, [r7, #12]
 8005eba:	4b0f      	ldr	r3, [pc, #60]	@ (8005ef8 <HAL_ADC_MspInit+0x80>)
 8005ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ebe:	4a0e      	ldr	r2, [pc, #56]	@ (8005ef8 <HAL_ADC_MspInit+0x80>)
 8005ec0:	f043 0301 	orr.w	r3, r3, #1
 8005ec4:	6313      	str	r3, [r2, #48]	@ 0x30
 8005ec6:	4b0c      	ldr	r3, [pc, #48]	@ (8005ef8 <HAL_ADC_MspInit+0x80>)
 8005ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005eca:	f003 0301 	and.w	r3, r3, #1
 8005ece:	60fb      	str	r3, [r7, #12]
 8005ed0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8005ed2:	2309      	movs	r3, #9
 8005ed4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005ed6:	2303      	movs	r3, #3
 8005ed8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005eda:	2300      	movs	r3, #0
 8005edc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ede:	f107 0314 	add.w	r3, r7, #20
 8005ee2:	4619      	mov	r1, r3
 8005ee4:	4805      	ldr	r0, [pc, #20]	@ (8005efc <HAL_ADC_MspInit+0x84>)
 8005ee6:	f002 fb91 	bl	800860c <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8005eea:	bf00      	nop
 8005eec:	3728      	adds	r7, #40	@ 0x28
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}
 8005ef2:	bf00      	nop
 8005ef4:	40012000 	.word	0x40012000
 8005ef8:	40023800 	.word	0x40023800
 8005efc:	40020000 	.word	0x40020000

08005f00 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b08a      	sub	sp, #40	@ 0x28
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f08:	f107 0314 	add.w	r3, r7, #20
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	601a      	str	r2, [r3, #0]
 8005f10:	605a      	str	r2, [r3, #4]
 8005f12:	609a      	str	r2, [r3, #8]
 8005f14:	60da      	str	r2, [r3, #12]
 8005f16:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a19      	ldr	r2, [pc, #100]	@ (8005f84 <HAL_CAN_MspInit+0x84>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d12b      	bne.n	8005f7a <HAL_CAN_MspInit+0x7a>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8005f22:	2300      	movs	r3, #0
 8005f24:	613b      	str	r3, [r7, #16]
 8005f26:	4b18      	ldr	r3, [pc, #96]	@ (8005f88 <HAL_CAN_MspInit+0x88>)
 8005f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f2a:	4a17      	ldr	r2, [pc, #92]	@ (8005f88 <HAL_CAN_MspInit+0x88>)
 8005f2c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005f30:	6413      	str	r3, [r2, #64]	@ 0x40
 8005f32:	4b15      	ldr	r3, [pc, #84]	@ (8005f88 <HAL_CAN_MspInit+0x88>)
 8005f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f3a:	613b      	str	r3, [r7, #16]
 8005f3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005f3e:	2300      	movs	r3, #0
 8005f40:	60fb      	str	r3, [r7, #12]
 8005f42:	4b11      	ldr	r3, [pc, #68]	@ (8005f88 <HAL_CAN_MspInit+0x88>)
 8005f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f46:	4a10      	ldr	r2, [pc, #64]	@ (8005f88 <HAL_CAN_MspInit+0x88>)
 8005f48:	f043 0308 	orr.w	r3, r3, #8
 8005f4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8005f4e:	4b0e      	ldr	r3, [pc, #56]	@ (8005f88 <HAL_CAN_MspInit+0x88>)
 8005f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f52:	f003 0308 	and.w	r3, r3, #8
 8005f56:	60fb      	str	r3, [r7, #12]
 8005f58:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005f5a:	2303      	movs	r3, #3
 8005f5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f5e:	2302      	movs	r3, #2
 8005f60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f62:	2300      	movs	r3, #0
 8005f64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f66:	2303      	movs	r3, #3
 8005f68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8005f6a:	2309      	movs	r3, #9
 8005f6c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005f6e:	f107 0314 	add.w	r3, r7, #20
 8005f72:	4619      	mov	r1, r3
 8005f74:	4805      	ldr	r0, [pc, #20]	@ (8005f8c <HAL_CAN_MspInit+0x8c>)
 8005f76:	f002 fb49 	bl	800860c <HAL_GPIO_Init>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 8005f7a:	bf00      	nop
 8005f7c:	3728      	adds	r7, #40	@ 0x28
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}
 8005f82:	bf00      	nop
 8005f84:	40006400 	.word	0x40006400
 8005f88:	40023800 	.word	0x40023800
 8005f8c:	40020c00 	.word	0x40020c00

08005f90 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b08a      	sub	sp, #40	@ 0x28
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f98:	f107 0314 	add.w	r3, r7, #20
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	601a      	str	r2, [r3, #0]
 8005fa0:	605a      	str	r2, [r3, #4]
 8005fa2:	609a      	str	r2, [r3, #8]
 8005fa4:	60da      	str	r2, [r3, #12]
 8005fa6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a17      	ldr	r2, [pc, #92]	@ (800600c <HAL_DAC_MspInit+0x7c>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d127      	bne.n	8006002 <HAL_DAC_MspInit+0x72>
  {
    /* USER CODE BEGIN DAC_MspInit 0 */

    /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	613b      	str	r3, [r7, #16]
 8005fb6:	4b16      	ldr	r3, [pc, #88]	@ (8006010 <HAL_DAC_MspInit+0x80>)
 8005fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fba:	4a15      	ldr	r2, [pc, #84]	@ (8006010 <HAL_DAC_MspInit+0x80>)
 8005fbc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005fc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8005fc2:	4b13      	ldr	r3, [pc, #76]	@ (8006010 <HAL_DAC_MspInit+0x80>)
 8005fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fc6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005fca:	613b      	str	r3, [r7, #16]
 8005fcc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005fce:	2300      	movs	r3, #0
 8005fd0:	60fb      	str	r3, [r7, #12]
 8005fd2:	4b0f      	ldr	r3, [pc, #60]	@ (8006010 <HAL_DAC_MspInit+0x80>)
 8005fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fd6:	4a0e      	ldr	r2, [pc, #56]	@ (8006010 <HAL_DAC_MspInit+0x80>)
 8005fd8:	f043 0301 	orr.w	r3, r3, #1
 8005fdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8005fde:	4b0c      	ldr	r3, [pc, #48]	@ (8006010 <HAL_DAC_MspInit+0x80>)
 8005fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fe2:	f003 0301 	and.w	r3, r3, #1
 8005fe6:	60fb      	str	r3, [r7, #12]
 8005fe8:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005fea:	2330      	movs	r3, #48	@ 0x30
 8005fec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005fee:	2303      	movs	r3, #3
 8005ff0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ff6:	f107 0314 	add.w	r3, r7, #20
 8005ffa:	4619      	mov	r1, r3
 8005ffc:	4805      	ldr	r0, [pc, #20]	@ (8006014 <HAL_DAC_MspInit+0x84>)
 8005ffe:	f002 fb05 	bl	800860c <HAL_GPIO_Init>

    /* USER CODE END DAC_MspInit 1 */

  }

}
 8006002:	bf00      	nop
 8006004:	3728      	adds	r7, #40	@ 0x28
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}
 800600a:	bf00      	nop
 800600c:	40007400 	.word	0x40007400
 8006010:	40023800 	.word	0x40023800
 8006014:	40020000 	.word	0x40020000

08006018 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b08a      	sub	sp, #40	@ 0x28
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006020:	f107 0314 	add.w	r3, r7, #20
 8006024:	2200      	movs	r2, #0
 8006026:	601a      	str	r2, [r3, #0]
 8006028:	605a      	str	r2, [r3, #4]
 800602a:	609a      	str	r2, [r3, #8]
 800602c:	60da      	str	r2, [r3, #12]
 800602e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a19      	ldr	r2, [pc, #100]	@ (800609c <HAL_I2C_MspInit+0x84>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d12b      	bne.n	8006092 <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800603a:	2300      	movs	r3, #0
 800603c:	613b      	str	r3, [r7, #16]
 800603e:	4b18      	ldr	r3, [pc, #96]	@ (80060a0 <HAL_I2C_MspInit+0x88>)
 8006040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006042:	4a17      	ldr	r2, [pc, #92]	@ (80060a0 <HAL_I2C_MspInit+0x88>)
 8006044:	f043 0302 	orr.w	r3, r3, #2
 8006048:	6313      	str	r3, [r2, #48]	@ 0x30
 800604a:	4b15      	ldr	r3, [pc, #84]	@ (80060a0 <HAL_I2C_MspInit+0x88>)
 800604c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800604e:	f003 0302 	and.w	r3, r3, #2
 8006052:	613b      	str	r3, [r7, #16]
 8006054:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006056:	23c0      	movs	r3, #192	@ 0xc0
 8006058:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800605a:	2312      	movs	r3, #18
 800605c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800605e:	2300      	movs	r3, #0
 8006060:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006062:	2303      	movs	r3, #3
 8006064:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006066:	2304      	movs	r3, #4
 8006068:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800606a:	f107 0314 	add.w	r3, r7, #20
 800606e:	4619      	mov	r1, r3
 8006070:	480c      	ldr	r0, [pc, #48]	@ (80060a4 <HAL_I2C_MspInit+0x8c>)
 8006072:	f002 facb 	bl	800860c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006076:	2300      	movs	r3, #0
 8006078:	60fb      	str	r3, [r7, #12]
 800607a:	4b09      	ldr	r3, [pc, #36]	@ (80060a0 <HAL_I2C_MspInit+0x88>)
 800607c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800607e:	4a08      	ldr	r2, [pc, #32]	@ (80060a0 <HAL_I2C_MspInit+0x88>)
 8006080:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006084:	6413      	str	r3, [r2, #64]	@ 0x40
 8006086:	4b06      	ldr	r3, [pc, #24]	@ (80060a0 <HAL_I2C_MspInit+0x88>)
 8006088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800608a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800608e:	60fb      	str	r3, [r7, #12]
 8006090:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8006092:	bf00      	nop
 8006094:	3728      	adds	r7, #40	@ 0x28
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}
 800609a:	bf00      	nop
 800609c:	40005400 	.word	0x40005400
 80060a0:	40023800 	.word	0x40023800
 80060a4:	40020400 	.word	0x40020400

080060a8 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b08a      	sub	sp, #40	@ 0x28
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80060b0:	f107 0314 	add.w	r3, r7, #20
 80060b4:	2200      	movs	r2, #0
 80060b6:	601a      	str	r2, [r3, #0]
 80060b8:	605a      	str	r2, [r3, #4]
 80060ba:	609a      	str	r2, [r3, #8]
 80060bc:	60da      	str	r2, [r3, #12]
 80060be:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a19      	ldr	r2, [pc, #100]	@ (800612c <HAL_SPI_MspInit+0x84>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d12c      	bne.n	8006124 <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI3_MspInit 0 */

    /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80060ca:	2300      	movs	r3, #0
 80060cc:	613b      	str	r3, [r7, #16]
 80060ce:	4b18      	ldr	r3, [pc, #96]	@ (8006130 <HAL_SPI_MspInit+0x88>)
 80060d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060d2:	4a17      	ldr	r2, [pc, #92]	@ (8006130 <HAL_SPI_MspInit+0x88>)
 80060d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80060d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80060da:	4b15      	ldr	r3, [pc, #84]	@ (8006130 <HAL_SPI_MspInit+0x88>)
 80060dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060de:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80060e2:	613b      	str	r3, [r7, #16]
 80060e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80060e6:	2300      	movs	r3, #0
 80060e8:	60fb      	str	r3, [r7, #12]
 80060ea:	4b11      	ldr	r3, [pc, #68]	@ (8006130 <HAL_SPI_MspInit+0x88>)
 80060ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060ee:	4a10      	ldr	r2, [pc, #64]	@ (8006130 <HAL_SPI_MspInit+0x88>)
 80060f0:	f043 0304 	orr.w	r3, r3, #4
 80060f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80060f6:	4b0e      	ldr	r3, [pc, #56]	@ (8006130 <HAL_SPI_MspInit+0x88>)
 80060f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060fa:	f003 0304 	and.w	r3, r3, #4
 80060fe:	60fb      	str	r3, [r7, #12]
 8006100:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8006102:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8006106:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006108:	2302      	movs	r3, #2
 800610a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800610c:	2300      	movs	r3, #0
 800610e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006110:	2303      	movs	r3, #3
 8006112:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8006114:	2306      	movs	r3, #6
 8006116:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006118:	f107 0314 	add.w	r3, r7, #20
 800611c:	4619      	mov	r1, r3
 800611e:	4805      	ldr	r0, [pc, #20]	@ (8006134 <HAL_SPI_MspInit+0x8c>)
 8006120:	f002 fa74 	bl	800860c <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8006124:	bf00      	nop
 8006126:	3728      	adds	r7, #40	@ 0x28
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}
 800612c:	40003c00 	.word	0x40003c00
 8006130:	40023800 	.word	0x40023800
 8006134:	40020800 	.word	0x40020800

08006138 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b086      	sub	sp, #24
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a26      	ldr	r2, [pc, #152]	@ (80061e0 <HAL_TIM_Base_MspInit+0xa8>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d116      	bne.n	8006178 <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800614a:	2300      	movs	r3, #0
 800614c:	617b      	str	r3, [r7, #20]
 800614e:	4b25      	ldr	r3, [pc, #148]	@ (80061e4 <HAL_TIM_Base_MspInit+0xac>)
 8006150:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006152:	4a24      	ldr	r2, [pc, #144]	@ (80061e4 <HAL_TIM_Base_MspInit+0xac>)
 8006154:	f043 0301 	orr.w	r3, r3, #1
 8006158:	6453      	str	r3, [r2, #68]	@ 0x44
 800615a:	4b22      	ldr	r3, [pc, #136]	@ (80061e4 <HAL_TIM_Base_MspInit+0xac>)
 800615c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800615e:	f003 0301 	and.w	r3, r3, #1
 8006162:	617b      	str	r3, [r7, #20]
 8006164:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8006166:	2200      	movs	r2, #0
 8006168:	2100      	movs	r1, #0
 800616a:	2019      	movs	r0, #25
 800616c:	f001 f869 	bl	8007242 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8006170:	2019      	movs	r0, #25
 8006172:	f001 f882 	bl	800727a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM13_MspInit 1 */

    /* USER CODE END TIM13_MspInit 1 */
  }

}
 8006176:	e02e      	b.n	80061d6 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM2)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006180:	d10e      	bne.n	80061a0 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006182:	2300      	movs	r3, #0
 8006184:	613b      	str	r3, [r7, #16]
 8006186:	4b17      	ldr	r3, [pc, #92]	@ (80061e4 <HAL_TIM_Base_MspInit+0xac>)
 8006188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800618a:	4a16      	ldr	r2, [pc, #88]	@ (80061e4 <HAL_TIM_Base_MspInit+0xac>)
 800618c:	f043 0301 	orr.w	r3, r3, #1
 8006190:	6413      	str	r3, [r2, #64]	@ 0x40
 8006192:	4b14      	ldr	r3, [pc, #80]	@ (80061e4 <HAL_TIM_Base_MspInit+0xac>)
 8006194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006196:	f003 0301 	and.w	r3, r3, #1
 800619a:	613b      	str	r3, [r7, #16]
 800619c:	693b      	ldr	r3, [r7, #16]
}
 800619e:	e01a      	b.n	80061d6 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM13)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a10      	ldr	r2, [pc, #64]	@ (80061e8 <HAL_TIM_Base_MspInit+0xb0>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d115      	bne.n	80061d6 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80061aa:	2300      	movs	r3, #0
 80061ac:	60fb      	str	r3, [r7, #12]
 80061ae:	4b0d      	ldr	r3, [pc, #52]	@ (80061e4 <HAL_TIM_Base_MspInit+0xac>)
 80061b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061b2:	4a0c      	ldr	r2, [pc, #48]	@ (80061e4 <HAL_TIM_Base_MspInit+0xac>)
 80061b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80061ba:	4b0a      	ldr	r3, [pc, #40]	@ (80061e4 <HAL_TIM_Base_MspInit+0xac>)
 80061bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061c2:	60fb      	str	r3, [r7, #12]
 80061c4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80061c6:	2200      	movs	r2, #0
 80061c8:	2100      	movs	r1, #0
 80061ca:	202c      	movs	r0, #44	@ 0x2c
 80061cc:	f001 f839 	bl	8007242 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80061d0:	202c      	movs	r0, #44	@ 0x2c
 80061d2:	f001 f852 	bl	800727a <HAL_NVIC_EnableIRQ>
}
 80061d6:	bf00      	nop
 80061d8:	3718      	adds	r7, #24
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}
 80061de:	bf00      	nop
 80061e0:	40010000 	.word	0x40010000
 80061e4:	40023800 	.word	0x40023800
 80061e8:	40001c00 	.word	0x40001c00

080061ec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b088      	sub	sp, #32
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80061f4:	f107 030c 	add.w	r3, r7, #12
 80061f8:	2200      	movs	r2, #0
 80061fa:	601a      	str	r2, [r3, #0]
 80061fc:	605a      	str	r2, [r3, #4]
 80061fe:	609a      	str	r2, [r3, #8]
 8006200:	60da      	str	r2, [r3, #12]
 8006202:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM13)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a12      	ldr	r2, [pc, #72]	@ (8006254 <HAL_TIM_MspPostInit+0x68>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d11d      	bne.n	800624a <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM13_MspPostInit 0 */

    /* USER CODE END TIM13_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800620e:	2300      	movs	r3, #0
 8006210:	60bb      	str	r3, [r7, #8]
 8006212:	4b11      	ldr	r3, [pc, #68]	@ (8006258 <HAL_TIM_MspPostInit+0x6c>)
 8006214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006216:	4a10      	ldr	r2, [pc, #64]	@ (8006258 <HAL_TIM_MspPostInit+0x6c>)
 8006218:	f043 0301 	orr.w	r3, r3, #1
 800621c:	6313      	str	r3, [r2, #48]	@ 0x30
 800621e:	4b0e      	ldr	r3, [pc, #56]	@ (8006258 <HAL_TIM_MspPostInit+0x6c>)
 8006220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006222:	f003 0301 	and.w	r3, r3, #1
 8006226:	60bb      	str	r3, [r7, #8]
 8006228:	68bb      	ldr	r3, [r7, #8]
    /**TIM13 GPIO Configuration
    PA6     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GATE_LASER_TIM13_CH1_Pin;
 800622a:	2340      	movs	r3, #64	@ 0x40
 800622c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800622e:	2302      	movs	r3, #2
 8006230:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006232:	2300      	movs	r3, #0
 8006234:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006236:	2300      	movs	r3, #0
 8006238:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 800623a:	2309      	movs	r3, #9
 800623c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GATE_LASER_TIM13_CH1_GPIO_Port, &GPIO_InitStruct);
 800623e:	f107 030c 	add.w	r3, r7, #12
 8006242:	4619      	mov	r1, r3
 8006244:	4805      	ldr	r0, [pc, #20]	@ (800625c <HAL_TIM_MspPostInit+0x70>)
 8006246:	f002 f9e1 	bl	800860c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM13_MspPostInit 1 */

    /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 800624a:	bf00      	nop
 800624c:	3720      	adds	r7, #32
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}
 8006252:	bf00      	nop
 8006254:	40001c00 	.word	0x40001c00
 8006258:	40023800 	.word	0x40023800
 800625c:	40020000 	.word	0x40020000

08006260 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b08c      	sub	sp, #48	@ 0x30
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006268:	f107 031c 	add.w	r3, r7, #28
 800626c:	2200      	movs	r2, #0
 800626e:	601a      	str	r2, [r3, #0]
 8006270:	605a      	str	r2, [r3, #4]
 8006272:	609a      	str	r2, [r3, #8]
 8006274:	60da      	str	r2, [r3, #12]
 8006276:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a33      	ldr	r2, [pc, #204]	@ (800634c <HAL_UART_MspInit+0xec>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d12d      	bne.n	80062de <HAL_UART_MspInit+0x7e>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006282:	2300      	movs	r3, #0
 8006284:	61bb      	str	r3, [r7, #24]
 8006286:	4b32      	ldr	r3, [pc, #200]	@ (8006350 <HAL_UART_MspInit+0xf0>)
 8006288:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800628a:	4a31      	ldr	r2, [pc, #196]	@ (8006350 <HAL_UART_MspInit+0xf0>)
 800628c:	f043 0310 	orr.w	r3, r3, #16
 8006290:	6453      	str	r3, [r2, #68]	@ 0x44
 8006292:	4b2f      	ldr	r3, [pc, #188]	@ (8006350 <HAL_UART_MspInit+0xf0>)
 8006294:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006296:	f003 0310 	and.w	r3, r3, #16
 800629a:	61bb      	str	r3, [r7, #24]
 800629c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800629e:	2300      	movs	r3, #0
 80062a0:	617b      	str	r3, [r7, #20]
 80062a2:	4b2b      	ldr	r3, [pc, #172]	@ (8006350 <HAL_UART_MspInit+0xf0>)
 80062a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062a6:	4a2a      	ldr	r2, [pc, #168]	@ (8006350 <HAL_UART_MspInit+0xf0>)
 80062a8:	f043 0301 	orr.w	r3, r3, #1
 80062ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80062ae:	4b28      	ldr	r3, [pc, #160]	@ (8006350 <HAL_UART_MspInit+0xf0>)
 80062b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062b2:	f003 0301 	and.w	r3, r3, #1
 80062b6:	617b      	str	r3, [r7, #20]
 80062b8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80062ba:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80062be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062c0:	2302      	movs	r3, #2
 80062c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062c4:	2300      	movs	r3, #0
 80062c6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80062c8:	2303      	movs	r3, #3
 80062ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80062cc:	2307      	movs	r3, #7
 80062ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80062d0:	f107 031c 	add.w	r3, r7, #28
 80062d4:	4619      	mov	r1, r3
 80062d6:	481f      	ldr	r0, [pc, #124]	@ (8006354 <HAL_UART_MspInit+0xf4>)
 80062d8:	f002 f998 	bl	800860c <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 80062dc:	e031      	b.n	8006342 <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART3)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a1d      	ldr	r2, [pc, #116]	@ (8006358 <HAL_UART_MspInit+0xf8>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d12c      	bne.n	8006342 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 80062e8:	2300      	movs	r3, #0
 80062ea:	613b      	str	r3, [r7, #16]
 80062ec:	4b18      	ldr	r3, [pc, #96]	@ (8006350 <HAL_UART_MspInit+0xf0>)
 80062ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062f0:	4a17      	ldr	r2, [pc, #92]	@ (8006350 <HAL_UART_MspInit+0xf0>)
 80062f2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80062f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80062f8:	4b15      	ldr	r3, [pc, #84]	@ (8006350 <HAL_UART_MspInit+0xf0>)
 80062fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006300:	613b      	str	r3, [r7, #16]
 8006302:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006304:	2300      	movs	r3, #0
 8006306:	60fb      	str	r3, [r7, #12]
 8006308:	4b11      	ldr	r3, [pc, #68]	@ (8006350 <HAL_UART_MspInit+0xf0>)
 800630a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800630c:	4a10      	ldr	r2, [pc, #64]	@ (8006350 <HAL_UART_MspInit+0xf0>)
 800630e:	f043 0308 	orr.w	r3, r3, #8
 8006312:	6313      	str	r3, [r2, #48]	@ 0x30
 8006314:	4b0e      	ldr	r3, [pc, #56]	@ (8006350 <HAL_UART_MspInit+0xf0>)
 8006316:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006318:	f003 0308 	and.w	r3, r3, #8
 800631c:	60fb      	str	r3, [r7, #12]
 800631e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8006320:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8006324:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006326:	2302      	movs	r3, #2
 8006328:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800632a:	2300      	movs	r3, #0
 800632c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800632e:	2303      	movs	r3, #3
 8006330:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006332:	2307      	movs	r3, #7
 8006334:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006336:	f107 031c 	add.w	r3, r7, #28
 800633a:	4619      	mov	r1, r3
 800633c:	4807      	ldr	r0, [pc, #28]	@ (800635c <HAL_UART_MspInit+0xfc>)
 800633e:	f002 f965 	bl	800860c <HAL_GPIO_Init>
}
 8006342:	bf00      	nop
 8006344:	3730      	adds	r7, #48	@ 0x30
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}
 800634a:	bf00      	nop
 800634c:	40011000 	.word	0x40011000
 8006350:	40023800 	.word	0x40023800
 8006354:	40020000 	.word	0x40020000
 8006358:	40004800 	.word	0x40004800
 800635c:	40020c00 	.word	0x40020c00

08006360 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b08a      	sub	sp, #40	@ 0x28
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006368:	f107 0314 	add.w	r3, r7, #20
 800636c:	2200      	movs	r2, #0
 800636e:	601a      	str	r2, [r3, #0]
 8006370:	605a      	str	r2, [r3, #4]
 8006372:	609a      	str	r2, [r3, #8]
 8006374:	60da      	str	r2, [r3, #12]
 8006376:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006380:	d132      	bne.n	80063e8 <HAL_PCD_MspInit+0x88>
  {
    /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

    /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006382:	2300      	movs	r3, #0
 8006384:	613b      	str	r3, [r7, #16]
 8006386:	4b1a      	ldr	r3, [pc, #104]	@ (80063f0 <HAL_PCD_MspInit+0x90>)
 8006388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800638a:	4a19      	ldr	r2, [pc, #100]	@ (80063f0 <HAL_PCD_MspInit+0x90>)
 800638c:	f043 0301 	orr.w	r3, r3, #1
 8006390:	6313      	str	r3, [r2, #48]	@ 0x30
 8006392:	4b17      	ldr	r3, [pc, #92]	@ (80063f0 <HAL_PCD_MspInit+0x90>)
 8006394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006396:	f003 0301 	and.w	r3, r3, #1
 800639a:	613b      	str	r3, [r7, #16]
 800639c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800639e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80063a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063a4:	2302      	movs	r3, #2
 80063a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063a8:	2300      	movs	r3, #0
 80063aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80063ac:	2303      	movs	r3, #3
 80063ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80063b0:	230a      	movs	r3, #10
 80063b2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80063b4:	f107 0314 	add.w	r3, r7, #20
 80063b8:	4619      	mov	r1, r3
 80063ba:	480e      	ldr	r0, [pc, #56]	@ (80063f4 <HAL_PCD_MspInit+0x94>)
 80063bc:	f002 f926 	bl	800860c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80063c0:	4b0b      	ldr	r3, [pc, #44]	@ (80063f0 <HAL_PCD_MspInit+0x90>)
 80063c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063c4:	4a0a      	ldr	r2, [pc, #40]	@ (80063f0 <HAL_PCD_MspInit+0x90>)
 80063c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063ca:	6353      	str	r3, [r2, #52]	@ 0x34
 80063cc:	2300      	movs	r3, #0
 80063ce:	60fb      	str	r3, [r7, #12]
 80063d0:	4b07      	ldr	r3, [pc, #28]	@ (80063f0 <HAL_PCD_MspInit+0x90>)
 80063d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063d4:	4a06      	ldr	r2, [pc, #24]	@ (80063f0 <HAL_PCD_MspInit+0x90>)
 80063d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80063da:	6453      	str	r3, [r2, #68]	@ 0x44
 80063dc:	4b04      	ldr	r3, [pc, #16]	@ (80063f0 <HAL_PCD_MspInit+0x90>)
 80063de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80063e4:	60fb      	str	r3, [r7, #12]
 80063e6:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 80063e8:	bf00      	nop
 80063ea:	3728      	adds	r7, #40	@ 0x28
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bd80      	pop	{r7, pc}
 80063f0:	40023800 	.word	0x40023800
 80063f4:	40020000 	.word	0x40020000

080063f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80063f8:	b480      	push	{r7}
 80063fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80063fc:	bf00      	nop
 80063fe:	e7fd      	b.n	80063fc <NMI_Handler+0x4>

08006400 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006400:	b480      	push	{r7}
 8006402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006404:	bf00      	nop
 8006406:	e7fd      	b.n	8006404 <HardFault_Handler+0x4>

08006408 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006408:	b480      	push	{r7}
 800640a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800640c:	bf00      	nop
 800640e:	e7fd      	b.n	800640c <MemManage_Handler+0x4>

08006410 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006410:	b480      	push	{r7}
 8006412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006414:	bf00      	nop
 8006416:	e7fd      	b.n	8006414 <BusFault_Handler+0x4>

08006418 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006418:	b480      	push	{r7}
 800641a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800641c:	bf00      	nop
 800641e:	e7fd      	b.n	800641c <UsageFault_Handler+0x4>

08006420 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006420:	b480      	push	{r7}
 8006422:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006424:	bf00      	nop
 8006426:	46bd      	mov	sp, r7
 8006428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642c:	4770      	bx	lr

0800642e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800642e:	b480      	push	{r7}
 8006430:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006432:	bf00      	nop
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr

0800643c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800643c:	b480      	push	{r7}
 800643e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006440:	bf00      	nop
 8006442:	46bd      	mov	sp, r7
 8006444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006448:	4770      	bx	lr

0800644a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800644a:	b580      	push	{r7, lr}
 800644c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800644e:	f000 fa7b 	bl	8006948 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006452:	bf00      	nop
 8006454:	bd80      	pop	{r7, pc}
	...

08006458 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800645c:	4804      	ldr	r0, [pc, #16]	@ (8006470 <TIM1_UP_TIM10_IRQHandler+0x18>)
 800645e:	f003 fb61 	bl	8009b24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */
  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_9);
 8006462:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006466:	4803      	ldr	r0, [pc, #12]	@ (8006474 <TIM1_UP_TIM10_IRQHandler+0x1c>)
 8006468:	f002 fa85 	bl	8008976 <HAL_GPIO_TogglePin>
  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800646c:	bf00      	nop
 800646e:	bd80      	pop	{r7, pc}
 8006470:	2000d960 	.word	0x2000d960
 8006474:	40021000 	.word	0x40021000

08006478 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 800647c:	4802      	ldr	r0, [pc, #8]	@ (8006488 <TIM8_UP_TIM13_IRQHandler+0x10>)
 800647e:	f003 fb51 	bl	8009b24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8006482:	bf00      	nop
 8006484:	bd80      	pop	{r7, pc}
 8006486:	bf00      	nop
 8006488:	2000d9f0 	.word	0x2000d9f0

0800648c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800648c:	b480      	push	{r7}
 800648e:	af00      	add	r7, sp, #0
  return 1;
 8006490:	2301      	movs	r3, #1
}
 8006492:	4618      	mov	r0, r3
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr

0800649c <_kill>:

int _kill(int pid, int sig)
{
 800649c:	b480      	push	{r7}
 800649e:	b083      	sub	sp, #12
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
 80064a4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80064a6:	4b05      	ldr	r3, [pc, #20]	@ (80064bc <_kill+0x20>)
 80064a8:	2216      	movs	r2, #22
 80064aa:	601a      	str	r2, [r3, #0]
  return -1;
 80064ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	370c      	adds	r7, #12
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr
 80064bc:	20015450 	.word	0x20015450

080064c0 <_exit>:

void _exit (int status)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b082      	sub	sp, #8
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80064c8:	f04f 31ff 	mov.w	r1, #4294967295
 80064cc:	6878      	ldr	r0, [r7, #4]
 80064ce:	f7ff ffe5 	bl	800649c <_kill>
  while (1) {}    /* Make sure we hang here */
 80064d2:	bf00      	nop
 80064d4:	e7fd      	b.n	80064d2 <_exit+0x12>

080064d6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80064d6:	b580      	push	{r7, lr}
 80064d8:	b086      	sub	sp, #24
 80064da:	af00      	add	r7, sp, #0
 80064dc:	60f8      	str	r0, [r7, #12]
 80064de:	60b9      	str	r1, [r7, #8]
 80064e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80064e2:	2300      	movs	r3, #0
 80064e4:	617b      	str	r3, [r7, #20]
 80064e6:	e00a      	b.n	80064fe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80064e8:	f3af 8000 	nop.w
 80064ec:	4601      	mov	r1, r0
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	1c5a      	adds	r2, r3, #1
 80064f2:	60ba      	str	r2, [r7, #8]
 80064f4:	b2ca      	uxtb	r2, r1
 80064f6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	3301      	adds	r3, #1
 80064fc:	617b      	str	r3, [r7, #20]
 80064fe:	697a      	ldr	r2, [r7, #20]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	429a      	cmp	r2, r3
 8006504:	dbf0      	blt.n	80064e8 <_read+0x12>
  }

  return len;
 8006506:	687b      	ldr	r3, [r7, #4]
}
 8006508:	4618      	mov	r0, r3
 800650a:	3718      	adds	r7, #24
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}

08006510 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b086      	sub	sp, #24
 8006514:	af00      	add	r7, sp, #0
 8006516:	60f8      	str	r0, [r7, #12]
 8006518:	60b9      	str	r1, [r7, #8]
 800651a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800651c:	2300      	movs	r3, #0
 800651e:	617b      	str	r3, [r7, #20]
 8006520:	e009      	b.n	8006536 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	1c5a      	adds	r2, r3, #1
 8006526:	60ba      	str	r2, [r7, #8]
 8006528:	781b      	ldrb	r3, [r3, #0]
 800652a:	4618      	mov	r0, r3
 800652c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	3301      	adds	r3, #1
 8006534:	617b      	str	r3, [r7, #20]
 8006536:	697a      	ldr	r2, [r7, #20]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	429a      	cmp	r2, r3
 800653c:	dbf1      	blt.n	8006522 <_write+0x12>
  }
  return len;
 800653e:	687b      	ldr	r3, [r7, #4]
}
 8006540:	4618      	mov	r0, r3
 8006542:	3718      	adds	r7, #24
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}

08006548 <_close>:

int _close(int file)
{
 8006548:	b480      	push	{r7}
 800654a:	b083      	sub	sp, #12
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8006550:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006554:	4618      	mov	r0, r3
 8006556:	370c      	adds	r7, #12
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr

08006560 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006560:	b480      	push	{r7}
 8006562:	b083      	sub	sp, #12
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006570:	605a      	str	r2, [r3, #4]
  return 0;
 8006572:	2300      	movs	r3, #0
}
 8006574:	4618      	mov	r0, r3
 8006576:	370c      	adds	r7, #12
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr

08006580 <_isatty>:

int _isatty(int file)
{
 8006580:	b480      	push	{r7}
 8006582:	b083      	sub	sp, #12
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8006588:	2301      	movs	r3, #1
}
 800658a:	4618      	mov	r0, r3
 800658c:	370c      	adds	r7, #12
 800658e:	46bd      	mov	sp, r7
 8006590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006594:	4770      	bx	lr

08006596 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006596:	b480      	push	{r7}
 8006598:	b085      	sub	sp, #20
 800659a:	af00      	add	r7, sp, #0
 800659c:	60f8      	str	r0, [r7, #12]
 800659e:	60b9      	str	r1, [r7, #8]
 80065a0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80065a2:	2300      	movs	r3, #0
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	3714      	adds	r7, #20
 80065a8:	46bd      	mov	sp, r7
 80065aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ae:	4770      	bx	lr

080065b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b087      	sub	sp, #28
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80065b8:	4a14      	ldr	r2, [pc, #80]	@ (800660c <_sbrk+0x5c>)
 80065ba:	4b15      	ldr	r3, [pc, #84]	@ (8006610 <_sbrk+0x60>)
 80065bc:	1ad3      	subs	r3, r2, r3
 80065be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80065c4:	4b13      	ldr	r3, [pc, #76]	@ (8006614 <_sbrk+0x64>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d102      	bne.n	80065d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80065cc:	4b11      	ldr	r3, [pc, #68]	@ (8006614 <_sbrk+0x64>)
 80065ce:	4a12      	ldr	r2, [pc, #72]	@ (8006618 <_sbrk+0x68>)
 80065d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80065d2:	4b10      	ldr	r3, [pc, #64]	@ (8006614 <_sbrk+0x64>)
 80065d4:	681a      	ldr	r2, [r3, #0]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	4413      	add	r3, r2
 80065da:	693a      	ldr	r2, [r7, #16]
 80065dc:	429a      	cmp	r2, r3
 80065de:	d205      	bcs.n	80065ec <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80065e0:	4b0e      	ldr	r3, [pc, #56]	@ (800661c <_sbrk+0x6c>)
 80065e2:	220c      	movs	r2, #12
 80065e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80065e6:	f04f 33ff 	mov.w	r3, #4294967295
 80065ea:	e009      	b.n	8006600 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80065ec:	4b09      	ldr	r3, [pc, #36]	@ (8006614 <_sbrk+0x64>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80065f2:	4b08      	ldr	r3, [pc, #32]	@ (8006614 <_sbrk+0x64>)
 80065f4:	681a      	ldr	r2, [r3, #0]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	4413      	add	r3, r2
 80065fa:	4a06      	ldr	r2, [pc, #24]	@ (8006614 <_sbrk+0x64>)
 80065fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80065fe:	68fb      	ldr	r3, [r7, #12]
}
 8006600:	4618      	mov	r0, r3
 8006602:	371c      	adds	r7, #28
 8006604:	46bd      	mov	sp, r7
 8006606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660a:	4770      	bx	lr
 800660c:	20020000 	.word	0x20020000
 8006610:	00004000 	.word	0x00004000
 8006614:	2000e5c4 	.word	0x2000e5c4
 8006618:	20015460 	.word	0x20015460
 800661c:	20015450 	.word	0x20015450

08006620 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006620:	b480      	push	{r7}
 8006622:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006624:	4b06      	ldr	r3, [pc, #24]	@ (8006640 <SystemInit+0x20>)
 8006626:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800662a:	4a05      	ldr	r2, [pc, #20]	@ (8006640 <SystemInit+0x20>)
 800662c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006630:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006634:	bf00      	nop
 8006636:	46bd      	mov	sp, r7
 8006638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663c:	4770      	bx	lr
 800663e:	bf00      	nop
 8006640:	e000ed00 	.word	0xe000ed00

08006644 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006644:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800667c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8006648:	f7ff ffea 	bl	8006620 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800664c:	480c      	ldr	r0, [pc, #48]	@ (8006680 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800664e:	490d      	ldr	r1, [pc, #52]	@ (8006684 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006650:	4a0d      	ldr	r2, [pc, #52]	@ (8006688 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8006652:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006654:	e002      	b.n	800665c <LoopCopyDataInit>

08006656 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006656:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006658:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800665a:	3304      	adds	r3, #4

0800665c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800665c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800665e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006660:	d3f9      	bcc.n	8006656 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006662:	4a0a      	ldr	r2, [pc, #40]	@ (800668c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006664:	4c0a      	ldr	r4, [pc, #40]	@ (8006690 <LoopFillZerobss+0x22>)
  movs r3, #0
 8006666:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006668:	e001      	b.n	800666e <LoopFillZerobss>

0800666a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800666a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800666c:	3204      	adds	r2, #4

0800666e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800666e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006670:	d3fb      	bcc.n	800666a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006672:	f011 f8db 	bl	801782c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006676:	f7fd f9db 	bl	8003a30 <main>
  bx  lr    
 800667a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800667c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006680:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006684:	20000adc 	.word	0x20000adc
  ldr r2, =_sidata
 8006688:	08023268 	.word	0x08023268
  ldr r2, =_sbss
 800668c:	20000ae0 	.word	0x20000ae0
  ldr r4, =_ebss
 8006690:	20015460 	.word	0x20015460

08006694 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006694:	e7fe      	b.n	8006694 <ADC_IRQHandler>

08006696 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8006696:	b480      	push	{r7}
 8006698:	b083      	sub	sp, #12
 800669a:	af00      	add	r7, sp, #0
 800669c:	6078      	str	r0, [r7, #4]
 800669e:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d00b      	beq.n	80066be <LAN8742_RegisterBusIO+0x28>
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	68db      	ldr	r3, [r3, #12]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d007      	beq.n	80066be <LAN8742_RegisterBusIO+0x28>
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	689b      	ldr	r3, [r3, #8]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d003      	beq.n	80066be <LAN8742_RegisterBusIO+0x28>
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	691b      	ldr	r3, [r3, #16]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d102      	bne.n	80066c4 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 80066be:	f04f 33ff 	mov.w	r3, #4294967295
 80066c2:	e014      	b.n	80066ee <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	681a      	ldr	r2, [r3, #0]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	685a      	ldr	r2, [r3, #4]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	68da      	ldr	r2, [r3, #12]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	689a      	ldr	r2, [r3, #8]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	691a      	ldr	r2, [r3, #16]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 80066ec:	2300      	movs	r3, #0
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	370c      	adds	r7, #12
 80066f2:	46bd      	mov	sp, r7
 80066f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f8:	4770      	bx	lr

080066fa <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80066fa:	b580      	push	{r7, lr}
 80066fc:	b086      	sub	sp, #24
 80066fe:	af00      	add	r7, sp, #0
 8006700:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8006702:	2300      	movs	r3, #0
 8006704:	60fb      	str	r3, [r7, #12]
 8006706:	2300      	movs	r3, #0
 8006708:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 800670a:	2300      	movs	r3, #0
 800670c:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d139      	bne.n	800678a <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	689b      	ldr	r3, [r3, #8]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d002      	beq.n	8006724 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	689b      	ldr	r3, [r3, #8]
 8006722:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2220      	movs	r2, #32
 8006728:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800672a:	2300      	movs	r3, #0
 800672c:	617b      	str	r3, [r7, #20]
 800672e:	e01c      	b.n	800676a <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	695b      	ldr	r3, [r3, #20]
 8006734:	f107 020c 	add.w	r2, r7, #12
 8006738:	2112      	movs	r1, #18
 800673a:	6978      	ldr	r0, [r7, #20]
 800673c:	4798      	blx	r3
 800673e:	4603      	mov	r3, r0
 8006740:	2b00      	cmp	r3, #0
 8006742:	da03      	bge.n	800674c <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8006744:	f06f 0304 	mvn.w	r3, #4
 8006748:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 800674a:	e00b      	b.n	8006764 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f003 031f 	and.w	r3, r3, #31
 8006752:	697a      	ldr	r2, [r7, #20]
 8006754:	429a      	cmp	r2, r3
 8006756:	d105      	bne.n	8006764 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	697a      	ldr	r2, [r7, #20]
 800675c:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 800675e:	2300      	movs	r3, #0
 8006760:	613b      	str	r3, [r7, #16]
         break;
 8006762:	e005      	b.n	8006770 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	3301      	adds	r3, #1
 8006768:	617b      	str	r3, [r7, #20]
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	2b1f      	cmp	r3, #31
 800676e:	d9df      	bls.n	8006730 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	2b1f      	cmp	r3, #31
 8006776:	d902      	bls.n	800677e <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8006778:	f06f 0302 	mvn.w	r3, #2
 800677c:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d102      	bne.n	800678a <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2201      	movs	r2, #1
 8006788:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 800678a:	693b      	ldr	r3, [r7, #16]
 }
 800678c:	4618      	mov	r0, r3
 800678e:	3718      	adds	r7, #24
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}

08006794 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b084      	sub	sp, #16
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 800679c:	2300      	movs	r3, #0
 800679e:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	695b      	ldr	r3, [r3, #20]
 80067a4:	687a      	ldr	r2, [r7, #4]
 80067a6:	6810      	ldr	r0, [r2, #0]
 80067a8:	f107 020c 	add.w	r2, r7, #12
 80067ac:	2101      	movs	r1, #1
 80067ae:	4798      	blx	r3
 80067b0:	4603      	mov	r3, r0
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	da02      	bge.n	80067bc <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80067b6:	f06f 0304 	mvn.w	r3, #4
 80067ba:	e06e      	b.n	800689a <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	695b      	ldr	r3, [r3, #20]
 80067c0:	687a      	ldr	r2, [r7, #4]
 80067c2:	6810      	ldr	r0, [r2, #0]
 80067c4:	f107 020c 	add.w	r2, r7, #12
 80067c8:	2101      	movs	r1, #1
 80067ca:	4798      	blx	r3
 80067cc:	4603      	mov	r3, r0
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	da02      	bge.n	80067d8 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80067d2:	f06f 0304 	mvn.w	r3, #4
 80067d6:	e060      	b.n	800689a <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f003 0304 	and.w	r3, r3, #4
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d101      	bne.n	80067e6 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 80067e2:	2301      	movs	r3, #1
 80067e4:	e059      	b.n	800689a <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	695b      	ldr	r3, [r3, #20]
 80067ea:	687a      	ldr	r2, [r7, #4]
 80067ec:	6810      	ldr	r0, [r2, #0]
 80067ee:	f107 020c 	add.w	r2, r7, #12
 80067f2:	2100      	movs	r1, #0
 80067f4:	4798      	blx	r3
 80067f6:	4603      	mov	r3, r0
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	da02      	bge.n	8006802 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80067fc:	f06f 0304 	mvn.w	r3, #4
 8006800:	e04b      	b.n	800689a <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006808:	2b00      	cmp	r3, #0
 800680a:	d11b      	bne.n	8006844 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006812:	2b00      	cmp	r3, #0
 8006814:	d006      	beq.n	8006824 <LAN8742_GetLinkState+0x90>
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800681c:	2b00      	cmp	r3, #0
 800681e:	d001      	beq.n	8006824 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8006820:	2302      	movs	r3, #2
 8006822:	e03a      	b.n	800689a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800682a:	2b00      	cmp	r3, #0
 800682c:	d001      	beq.n	8006832 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800682e:	2303      	movs	r3, #3
 8006830:	e033      	b.n	800689a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006838:	2b00      	cmp	r3, #0
 800683a:	d001      	beq.n	8006840 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800683c:	2304      	movs	r3, #4
 800683e:	e02c      	b.n	800689a <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8006840:	2305      	movs	r3, #5
 8006842:	e02a      	b.n	800689a <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	695b      	ldr	r3, [r3, #20]
 8006848:	687a      	ldr	r2, [r7, #4]
 800684a:	6810      	ldr	r0, [r2, #0]
 800684c:	f107 020c 	add.w	r2, r7, #12
 8006850:	211f      	movs	r1, #31
 8006852:	4798      	blx	r3
 8006854:	4603      	mov	r3, r0
 8006856:	2b00      	cmp	r3, #0
 8006858:	da02      	bge.n	8006860 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 800685a:	f06f 0304 	mvn.w	r3, #4
 800685e:	e01c      	b.n	800689a <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006866:	2b00      	cmp	r3, #0
 8006868:	d101      	bne.n	800686e <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 800686a:	2306      	movs	r3, #6
 800686c:	e015      	b.n	800689a <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	f003 031c 	and.w	r3, r3, #28
 8006874:	2b18      	cmp	r3, #24
 8006876:	d101      	bne.n	800687c <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8006878:	2302      	movs	r3, #2
 800687a:	e00e      	b.n	800689a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f003 031c 	and.w	r3, r3, #28
 8006882:	2b08      	cmp	r3, #8
 8006884:	d101      	bne.n	800688a <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8006886:	2303      	movs	r3, #3
 8006888:	e007      	b.n	800689a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	f003 031c 	and.w	r3, r3, #28
 8006890:	2b14      	cmp	r3, #20
 8006892:	d101      	bne.n	8006898 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8006894:	2304      	movs	r3, #4
 8006896:	e000      	b.n	800689a <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8006898:	2305      	movs	r3, #5
    }
  }
}
 800689a:	4618      	mov	r0, r3
 800689c:	3710      	adds	r7, #16
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}
	...

080068a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80068a8:	4b0e      	ldr	r3, [pc, #56]	@ (80068e4 <HAL_Init+0x40>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a0d      	ldr	r2, [pc, #52]	@ (80068e4 <HAL_Init+0x40>)
 80068ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80068b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80068b4:	4b0b      	ldr	r3, [pc, #44]	@ (80068e4 <HAL_Init+0x40>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a0a      	ldr	r2, [pc, #40]	@ (80068e4 <HAL_Init+0x40>)
 80068ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80068be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80068c0:	4b08      	ldr	r3, [pc, #32]	@ (80068e4 <HAL_Init+0x40>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4a07      	ldr	r2, [pc, #28]	@ (80068e4 <HAL_Init+0x40>)
 80068c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80068ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80068cc:	2003      	movs	r0, #3
 80068ce:	f000 fcad 	bl	800722c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80068d2:	200f      	movs	r0, #15
 80068d4:	f000 f808 	bl	80068e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80068d8:	f7ff faa6 	bl	8005e28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80068dc:	2300      	movs	r3, #0
}
 80068de:	4618      	mov	r0, r3
 80068e0:	bd80      	pop	{r7, pc}
 80068e2:	bf00      	nop
 80068e4:	40023c00 	.word	0x40023c00

080068e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b082      	sub	sp, #8
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80068f0:	4b12      	ldr	r3, [pc, #72]	@ (800693c <HAL_InitTick+0x54>)
 80068f2:	681a      	ldr	r2, [r3, #0]
 80068f4:	4b12      	ldr	r3, [pc, #72]	@ (8006940 <HAL_InitTick+0x58>)
 80068f6:	781b      	ldrb	r3, [r3, #0]
 80068f8:	4619      	mov	r1, r3
 80068fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80068fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8006902:	fbb2 f3f3 	udiv	r3, r2, r3
 8006906:	4618      	mov	r0, r3
 8006908:	f000 fcc5 	bl	8007296 <HAL_SYSTICK_Config>
 800690c:	4603      	mov	r3, r0
 800690e:	2b00      	cmp	r3, #0
 8006910:	d001      	beq.n	8006916 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006912:	2301      	movs	r3, #1
 8006914:	e00e      	b.n	8006934 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2b0f      	cmp	r3, #15
 800691a:	d80a      	bhi.n	8006932 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800691c:	2200      	movs	r2, #0
 800691e:	6879      	ldr	r1, [r7, #4]
 8006920:	f04f 30ff 	mov.w	r0, #4294967295
 8006924:	f000 fc8d 	bl	8007242 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006928:	4a06      	ldr	r2, [pc, #24]	@ (8006944 <HAL_InitTick+0x5c>)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800692e:	2300      	movs	r3, #0
 8006930:	e000      	b.n	8006934 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006932:	2301      	movs	r3, #1
}
 8006934:	4618      	mov	r0, r3
 8006936:	3708      	adds	r7, #8
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}
 800693c:	200008e8 	.word	0x200008e8
 8006940:	200008f0 	.word	0x200008f0
 8006944:	200008ec 	.word	0x200008ec

08006948 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006948:	b480      	push	{r7}
 800694a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800694c:	4b06      	ldr	r3, [pc, #24]	@ (8006968 <HAL_IncTick+0x20>)
 800694e:	781b      	ldrb	r3, [r3, #0]
 8006950:	461a      	mov	r2, r3
 8006952:	4b06      	ldr	r3, [pc, #24]	@ (800696c <HAL_IncTick+0x24>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4413      	add	r3, r2
 8006958:	4a04      	ldr	r2, [pc, #16]	@ (800696c <HAL_IncTick+0x24>)
 800695a:	6013      	str	r3, [r2, #0]
}
 800695c:	bf00      	nop
 800695e:	46bd      	mov	sp, r7
 8006960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006964:	4770      	bx	lr
 8006966:	bf00      	nop
 8006968:	200008f0 	.word	0x200008f0
 800696c:	2000e5c8 	.word	0x2000e5c8

08006970 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006970:	b480      	push	{r7}
 8006972:	af00      	add	r7, sp, #0
  return uwTick;
 8006974:	4b03      	ldr	r3, [pc, #12]	@ (8006984 <HAL_GetTick+0x14>)
 8006976:	681b      	ldr	r3, [r3, #0]
}
 8006978:	4618      	mov	r0, r3
 800697a:	46bd      	mov	sp, r7
 800697c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006980:	4770      	bx	lr
 8006982:	bf00      	nop
 8006984:	2000e5c8 	.word	0x2000e5c8

08006988 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b084      	sub	sp, #16
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006990:	f7ff ffee 	bl	8006970 <HAL_GetTick>
 8006994:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069a0:	d005      	beq.n	80069ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80069a2:	4b0a      	ldr	r3, [pc, #40]	@ (80069cc <HAL_Delay+0x44>)
 80069a4:	781b      	ldrb	r3, [r3, #0]
 80069a6:	461a      	mov	r2, r3
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	4413      	add	r3, r2
 80069ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80069ae:	bf00      	nop
 80069b0:	f7ff ffde 	bl	8006970 <HAL_GetTick>
 80069b4:	4602      	mov	r2, r0
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	1ad3      	subs	r3, r2, r3
 80069ba:	68fa      	ldr	r2, [r7, #12]
 80069bc:	429a      	cmp	r2, r3
 80069be:	d8f7      	bhi.n	80069b0 <HAL_Delay+0x28>
  {
  }
}
 80069c0:	bf00      	nop
 80069c2:	bf00      	nop
 80069c4:	3710      	adds	r7, #16
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}
 80069ca:	bf00      	nop
 80069cc:	200008f0 	.word	0x200008f0

080069d0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b084      	sub	sp, #16
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80069d8:	2300      	movs	r3, #0
 80069da:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d101      	bne.n	80069e6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80069e2:	2301      	movs	r3, #1
 80069e4:	e033      	b.n	8006a4e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d109      	bne.n	8006a02 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f7ff fa42 	bl	8005e78 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2200      	movs	r2, #0
 80069f8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2200      	movs	r2, #0
 80069fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a06:	f003 0310 	and.w	r3, r3, #16
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d118      	bne.n	8006a40 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a12:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8006a16:	f023 0302 	bic.w	r3, r3, #2
 8006a1a:	f043 0202 	orr.w	r2, r3, #2
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f000 f93a 	bl	8006c9c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a32:	f023 0303 	bic.w	r3, r3, #3
 8006a36:	f043 0201 	orr.w	r2, r3, #1
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	641a      	str	r2, [r3, #64]	@ 0x40
 8006a3e:	e001      	b.n	8006a44 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006a40:	2301      	movs	r3, #1
 8006a42:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2200      	movs	r2, #0
 8006a48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3710      	adds	r7, #16
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}
	...

08006a58 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b085      	sub	sp, #20
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
 8006a60:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8006a62:	2300      	movs	r3, #0
 8006a64:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a6c:	2b01      	cmp	r3, #1
 8006a6e:	d101      	bne.n	8006a74 <HAL_ADC_ConfigChannel+0x1c>
 8006a70:	2302      	movs	r3, #2
 8006a72:	e105      	b.n	8006c80 <HAL_ADC_ConfigChannel+0x228>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2201      	movs	r2, #1
 8006a78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	2b09      	cmp	r3, #9
 8006a82:	d925      	bls.n	8006ad0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	68d9      	ldr	r1, [r3, #12]
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	b29b      	uxth	r3, r3
 8006a90:	461a      	mov	r2, r3
 8006a92:	4613      	mov	r3, r2
 8006a94:	005b      	lsls	r3, r3, #1
 8006a96:	4413      	add	r3, r2
 8006a98:	3b1e      	subs	r3, #30
 8006a9a:	2207      	movs	r2, #7
 8006a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8006aa0:	43da      	mvns	r2, r3
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	400a      	ands	r2, r1
 8006aa8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	68d9      	ldr	r1, [r3, #12]
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	689a      	ldr	r2, [r3, #8]
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	b29b      	uxth	r3, r3
 8006aba:	4618      	mov	r0, r3
 8006abc:	4603      	mov	r3, r0
 8006abe:	005b      	lsls	r3, r3, #1
 8006ac0:	4403      	add	r3, r0
 8006ac2:	3b1e      	subs	r3, #30
 8006ac4:	409a      	lsls	r2, r3
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	430a      	orrs	r2, r1
 8006acc:	60da      	str	r2, [r3, #12]
 8006ace:	e022      	b.n	8006b16 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	6919      	ldr	r1, [r3, #16]
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	b29b      	uxth	r3, r3
 8006adc:	461a      	mov	r2, r3
 8006ade:	4613      	mov	r3, r2
 8006ae0:	005b      	lsls	r3, r3, #1
 8006ae2:	4413      	add	r3, r2
 8006ae4:	2207      	movs	r2, #7
 8006ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8006aea:	43da      	mvns	r2, r3
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	400a      	ands	r2, r1
 8006af2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	6919      	ldr	r1, [r3, #16]
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	689a      	ldr	r2, [r3, #8]
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	b29b      	uxth	r3, r3
 8006b04:	4618      	mov	r0, r3
 8006b06:	4603      	mov	r3, r0
 8006b08:	005b      	lsls	r3, r3, #1
 8006b0a:	4403      	add	r3, r0
 8006b0c:	409a      	lsls	r2, r3
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	430a      	orrs	r2, r1
 8006b14:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	685b      	ldr	r3, [r3, #4]
 8006b1a:	2b06      	cmp	r3, #6
 8006b1c:	d824      	bhi.n	8006b68 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	685a      	ldr	r2, [r3, #4]
 8006b28:	4613      	mov	r3, r2
 8006b2a:	009b      	lsls	r3, r3, #2
 8006b2c:	4413      	add	r3, r2
 8006b2e:	3b05      	subs	r3, #5
 8006b30:	221f      	movs	r2, #31
 8006b32:	fa02 f303 	lsl.w	r3, r2, r3
 8006b36:	43da      	mvns	r2, r3
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	400a      	ands	r2, r1
 8006b3e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	685a      	ldr	r2, [r3, #4]
 8006b52:	4613      	mov	r3, r2
 8006b54:	009b      	lsls	r3, r3, #2
 8006b56:	4413      	add	r3, r2
 8006b58:	3b05      	subs	r3, #5
 8006b5a:	fa00 f203 	lsl.w	r2, r0, r3
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	430a      	orrs	r2, r1
 8006b64:	635a      	str	r2, [r3, #52]	@ 0x34
 8006b66:	e04c      	b.n	8006c02 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	2b0c      	cmp	r3, #12
 8006b6e:	d824      	bhi.n	8006bba <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	685a      	ldr	r2, [r3, #4]
 8006b7a:	4613      	mov	r3, r2
 8006b7c:	009b      	lsls	r3, r3, #2
 8006b7e:	4413      	add	r3, r2
 8006b80:	3b23      	subs	r3, #35	@ 0x23
 8006b82:	221f      	movs	r2, #31
 8006b84:	fa02 f303 	lsl.w	r3, r2, r3
 8006b88:	43da      	mvns	r2, r3
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	400a      	ands	r2, r1
 8006b90:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	b29b      	uxth	r3, r3
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	685a      	ldr	r2, [r3, #4]
 8006ba4:	4613      	mov	r3, r2
 8006ba6:	009b      	lsls	r3, r3, #2
 8006ba8:	4413      	add	r3, r2
 8006baa:	3b23      	subs	r3, #35	@ 0x23
 8006bac:	fa00 f203 	lsl.w	r2, r0, r3
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	430a      	orrs	r2, r1
 8006bb6:	631a      	str	r2, [r3, #48]	@ 0x30
 8006bb8:	e023      	b.n	8006c02 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	685a      	ldr	r2, [r3, #4]
 8006bc4:	4613      	mov	r3, r2
 8006bc6:	009b      	lsls	r3, r3, #2
 8006bc8:	4413      	add	r3, r2
 8006bca:	3b41      	subs	r3, #65	@ 0x41
 8006bcc:	221f      	movs	r2, #31
 8006bce:	fa02 f303 	lsl.w	r3, r2, r3
 8006bd2:	43da      	mvns	r2, r3
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	400a      	ands	r2, r1
 8006bda:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	b29b      	uxth	r3, r3
 8006be8:	4618      	mov	r0, r3
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	685a      	ldr	r2, [r3, #4]
 8006bee:	4613      	mov	r3, r2
 8006bf0:	009b      	lsls	r3, r3, #2
 8006bf2:	4413      	add	r3, r2
 8006bf4:	3b41      	subs	r3, #65	@ 0x41
 8006bf6:	fa00 f203 	lsl.w	r2, r0, r3
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	430a      	orrs	r2, r1
 8006c00:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006c02:	4b22      	ldr	r3, [pc, #136]	@ (8006c8c <HAL_ADC_ConfigChannel+0x234>)
 8006c04:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a21      	ldr	r2, [pc, #132]	@ (8006c90 <HAL_ADC_ConfigChannel+0x238>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d109      	bne.n	8006c24 <HAL_ADC_ConfigChannel+0x1cc>
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	2b12      	cmp	r3, #18
 8006c16:	d105      	bne.n	8006c24 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a19      	ldr	r2, [pc, #100]	@ (8006c90 <HAL_ADC_ConfigChannel+0x238>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d123      	bne.n	8006c76 <HAL_ADC_ConfigChannel+0x21e>
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	2b10      	cmp	r3, #16
 8006c34:	d003      	beq.n	8006c3e <HAL_ADC_ConfigChannel+0x1e6>
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	2b11      	cmp	r3, #17
 8006c3c:	d11b      	bne.n	8006c76 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	2b10      	cmp	r3, #16
 8006c50:	d111      	bne.n	8006c76 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006c52:	4b10      	ldr	r3, [pc, #64]	@ (8006c94 <HAL_ADC_ConfigChannel+0x23c>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a10      	ldr	r2, [pc, #64]	@ (8006c98 <HAL_ADC_ConfigChannel+0x240>)
 8006c58:	fba2 2303 	umull	r2, r3, r2, r3
 8006c5c:	0c9a      	lsrs	r2, r3, #18
 8006c5e:	4613      	mov	r3, r2
 8006c60:	009b      	lsls	r3, r3, #2
 8006c62:	4413      	add	r3, r2
 8006c64:	005b      	lsls	r3, r3, #1
 8006c66:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8006c68:	e002      	b.n	8006c70 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	3b01      	subs	r3, #1
 8006c6e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d1f9      	bne.n	8006c6a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8006c7e:	2300      	movs	r3, #0
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	3714      	adds	r7, #20
 8006c84:	46bd      	mov	sp, r7
 8006c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8a:	4770      	bx	lr
 8006c8c:	40012300 	.word	0x40012300
 8006c90:	40012000 	.word	0x40012000
 8006c94:	200008e8 	.word	0x200008e8
 8006c98:	431bde83 	.word	0x431bde83

08006c9c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b085      	sub	sp, #20
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006ca4:	4b79      	ldr	r3, [pc, #484]	@ (8006e8c <ADC_Init+0x1f0>)
 8006ca6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	685a      	ldr	r2, [r3, #4]
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	431a      	orrs	r2, r3
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	685a      	ldr	r2, [r3, #4]
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006cd0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	6859      	ldr	r1, [r3, #4]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	691b      	ldr	r3, [r3, #16]
 8006cdc:	021a      	lsls	r2, r3, #8
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	430a      	orrs	r2, r1
 8006ce4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	685a      	ldr	r2, [r3, #4]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8006cf4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	6859      	ldr	r1, [r3, #4]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	689a      	ldr	r2, [r3, #8]
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	430a      	orrs	r2, r1
 8006d06:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	689a      	ldr	r2, [r3, #8]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006d16:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	6899      	ldr	r1, [r3, #8]
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	68da      	ldr	r2, [r3, #12]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	430a      	orrs	r2, r1
 8006d28:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d2e:	4a58      	ldr	r2, [pc, #352]	@ (8006e90 <ADC_Init+0x1f4>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d022      	beq.n	8006d7a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	689a      	ldr	r2, [r3, #8]
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006d42:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	6899      	ldr	r1, [r3, #8]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	430a      	orrs	r2, r1
 8006d54:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	689a      	ldr	r2, [r3, #8]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006d64:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	6899      	ldr	r1, [r3, #8]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	430a      	orrs	r2, r1
 8006d76:	609a      	str	r2, [r3, #8]
 8006d78:	e00f      	b.n	8006d9a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	689a      	ldr	r2, [r3, #8]
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006d88:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	689a      	ldr	r2, [r3, #8]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006d98:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	689a      	ldr	r2, [r3, #8]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f022 0202 	bic.w	r2, r2, #2
 8006da8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	6899      	ldr	r1, [r3, #8]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	7e1b      	ldrb	r3, [r3, #24]
 8006db4:	005a      	lsls	r2, r3, #1
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	430a      	orrs	r2, r1
 8006dbc:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d01b      	beq.n	8006e00 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	685a      	ldr	r2, [r3, #4]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006dd6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	685a      	ldr	r2, [r3, #4]
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8006de6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	6859      	ldr	r1, [r3, #4]
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006df2:	3b01      	subs	r3, #1
 8006df4:	035a      	lsls	r2, r3, #13
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	430a      	orrs	r2, r1
 8006dfc:	605a      	str	r2, [r3, #4]
 8006dfe:	e007      	b.n	8006e10 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	685a      	ldr	r2, [r3, #4]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006e0e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8006e1e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	69db      	ldr	r3, [r3, #28]
 8006e2a:	3b01      	subs	r3, #1
 8006e2c:	051a      	lsls	r2, r3, #20
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	430a      	orrs	r2, r1
 8006e34:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	689a      	ldr	r2, [r3, #8]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8006e44:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	6899      	ldr	r1, [r3, #8]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006e52:	025a      	lsls	r2, r3, #9
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	430a      	orrs	r2, r1
 8006e5a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	689a      	ldr	r2, [r3, #8]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006e6a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	6899      	ldr	r1, [r3, #8]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	695b      	ldr	r3, [r3, #20]
 8006e76:	029a      	lsls	r2, r3, #10
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	430a      	orrs	r2, r1
 8006e7e:	609a      	str	r2, [r3, #8]
}
 8006e80:	bf00      	nop
 8006e82:	3714      	adds	r7, #20
 8006e84:	46bd      	mov	sp, r7
 8006e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8a:	4770      	bx	lr
 8006e8c:	40012300 	.word	0x40012300
 8006e90:	0f000001 	.word	0x0f000001

08006e94 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b084      	sub	sp, #16
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d101      	bne.n	8006ea6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	e0ed      	b.n	8007082 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006eac:	b2db      	uxtb	r3, r3
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d102      	bne.n	8006eb8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f7ff f824 	bl	8005f00 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	681a      	ldr	r2, [r3, #0]
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f042 0201 	orr.w	r2, r2, #1
 8006ec6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006ec8:	f7ff fd52 	bl	8006970 <HAL_GetTick>
 8006ecc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006ece:	e012      	b.n	8006ef6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006ed0:	f7ff fd4e 	bl	8006970 <HAL_GetTick>
 8006ed4:	4602      	mov	r2, r0
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	1ad3      	subs	r3, r2, r3
 8006eda:	2b0a      	cmp	r3, #10
 8006edc:	d90b      	bls.n	8006ef6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ee2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2205      	movs	r2, #5
 8006eee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	e0c5      	b.n	8007082 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	685b      	ldr	r3, [r3, #4]
 8006efc:	f003 0301 	and.w	r3, r3, #1
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d0e5      	beq.n	8006ed0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	681a      	ldr	r2, [r3, #0]
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f022 0202 	bic.w	r2, r2, #2
 8006f12:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006f14:	f7ff fd2c 	bl	8006970 <HAL_GetTick>
 8006f18:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8006f1a:	e012      	b.n	8006f42 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006f1c:	f7ff fd28 	bl	8006970 <HAL_GetTick>
 8006f20:	4602      	mov	r2, r0
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	1ad3      	subs	r3, r2, r3
 8006f26:	2b0a      	cmp	r3, #10
 8006f28:	d90b      	bls.n	8006f42 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f2e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2205      	movs	r2, #5
 8006f3a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8006f3e:	2301      	movs	r3, #1
 8006f40:	e09f      	b.n	8007082 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	685b      	ldr	r3, [r3, #4]
 8006f48:	f003 0302 	and.w	r3, r3, #2
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d1e5      	bne.n	8006f1c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	7e1b      	ldrb	r3, [r3, #24]
 8006f54:	2b01      	cmp	r3, #1
 8006f56:	d108      	bne.n	8006f6a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	681a      	ldr	r2, [r3, #0]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006f66:	601a      	str	r2, [r3, #0]
 8006f68:	e007      	b.n	8006f7a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	681a      	ldr	r2, [r3, #0]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006f78:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	7e5b      	ldrb	r3, [r3, #25]
 8006f7e:	2b01      	cmp	r3, #1
 8006f80:	d108      	bne.n	8006f94 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	681a      	ldr	r2, [r3, #0]
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006f90:	601a      	str	r2, [r3, #0]
 8006f92:	e007      	b.n	8006fa4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	681a      	ldr	r2, [r3, #0]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006fa2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	7e9b      	ldrb	r3, [r3, #26]
 8006fa8:	2b01      	cmp	r3, #1
 8006faa:	d108      	bne.n	8006fbe <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	681a      	ldr	r2, [r3, #0]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f042 0220 	orr.w	r2, r2, #32
 8006fba:	601a      	str	r2, [r3, #0]
 8006fbc:	e007      	b.n	8006fce <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	681a      	ldr	r2, [r3, #0]
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f022 0220 	bic.w	r2, r2, #32
 8006fcc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	7edb      	ldrb	r3, [r3, #27]
 8006fd2:	2b01      	cmp	r3, #1
 8006fd4:	d108      	bne.n	8006fe8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	681a      	ldr	r2, [r3, #0]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f022 0210 	bic.w	r2, r2, #16
 8006fe4:	601a      	str	r2, [r3, #0]
 8006fe6:	e007      	b.n	8006ff8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	681a      	ldr	r2, [r3, #0]
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f042 0210 	orr.w	r2, r2, #16
 8006ff6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	7f1b      	ldrb	r3, [r3, #28]
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	d108      	bne.n	8007012 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	681a      	ldr	r2, [r3, #0]
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f042 0208 	orr.w	r2, r2, #8
 800700e:	601a      	str	r2, [r3, #0]
 8007010:	e007      	b.n	8007022 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	681a      	ldr	r2, [r3, #0]
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f022 0208 	bic.w	r2, r2, #8
 8007020:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	7f5b      	ldrb	r3, [r3, #29]
 8007026:	2b01      	cmp	r3, #1
 8007028:	d108      	bne.n	800703c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	681a      	ldr	r2, [r3, #0]
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f042 0204 	orr.w	r2, r2, #4
 8007038:	601a      	str	r2, [r3, #0]
 800703a:	e007      	b.n	800704c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	681a      	ldr	r2, [r3, #0]
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f022 0204 	bic.w	r2, r2, #4
 800704a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	689a      	ldr	r2, [r3, #8]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	68db      	ldr	r3, [r3, #12]
 8007054:	431a      	orrs	r2, r3
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	691b      	ldr	r3, [r3, #16]
 800705a:	431a      	orrs	r2, r3
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	695b      	ldr	r3, [r3, #20]
 8007060:	ea42 0103 	orr.w	r1, r2, r3
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	685b      	ldr	r3, [r3, #4]
 8007068:	1e5a      	subs	r2, r3, #1
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	430a      	orrs	r2, r1
 8007070:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2200      	movs	r2, #0
 8007076:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2201      	movs	r2, #1
 800707c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8007080:	2300      	movs	r3, #0
}
 8007082:	4618      	mov	r0, r3
 8007084:	3710      	adds	r7, #16
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}
	...

0800708c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800708c:	b480      	push	{r7}
 800708e:	b085      	sub	sp, #20
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f003 0307 	and.w	r3, r3, #7
 800709a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800709c:	4b0c      	ldr	r3, [pc, #48]	@ (80070d0 <__NVIC_SetPriorityGrouping+0x44>)
 800709e:	68db      	ldr	r3, [r3, #12]
 80070a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80070a2:	68ba      	ldr	r2, [r7, #8]
 80070a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80070a8:	4013      	ands	r3, r2
 80070aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80070b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80070b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80070bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80070be:	4a04      	ldr	r2, [pc, #16]	@ (80070d0 <__NVIC_SetPriorityGrouping+0x44>)
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	60d3      	str	r3, [r2, #12]
}
 80070c4:	bf00      	nop
 80070c6:	3714      	adds	r7, #20
 80070c8:	46bd      	mov	sp, r7
 80070ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ce:	4770      	bx	lr
 80070d0:	e000ed00 	.word	0xe000ed00

080070d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80070d4:	b480      	push	{r7}
 80070d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80070d8:	4b04      	ldr	r3, [pc, #16]	@ (80070ec <__NVIC_GetPriorityGrouping+0x18>)
 80070da:	68db      	ldr	r3, [r3, #12]
 80070dc:	0a1b      	lsrs	r3, r3, #8
 80070de:	f003 0307 	and.w	r3, r3, #7
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	46bd      	mov	sp, r7
 80070e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ea:	4770      	bx	lr
 80070ec:	e000ed00 	.word	0xe000ed00

080070f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b083      	sub	sp, #12
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	4603      	mov	r3, r0
 80070f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80070fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	db0b      	blt.n	800711a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007102:	79fb      	ldrb	r3, [r7, #7]
 8007104:	f003 021f 	and.w	r2, r3, #31
 8007108:	4907      	ldr	r1, [pc, #28]	@ (8007128 <__NVIC_EnableIRQ+0x38>)
 800710a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800710e:	095b      	lsrs	r3, r3, #5
 8007110:	2001      	movs	r0, #1
 8007112:	fa00 f202 	lsl.w	r2, r0, r2
 8007116:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800711a:	bf00      	nop
 800711c:	370c      	adds	r7, #12
 800711e:	46bd      	mov	sp, r7
 8007120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007124:	4770      	bx	lr
 8007126:	bf00      	nop
 8007128:	e000e100 	.word	0xe000e100

0800712c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800712c:	b480      	push	{r7}
 800712e:	b083      	sub	sp, #12
 8007130:	af00      	add	r7, sp, #0
 8007132:	4603      	mov	r3, r0
 8007134:	6039      	str	r1, [r7, #0]
 8007136:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007138:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800713c:	2b00      	cmp	r3, #0
 800713e:	db0a      	blt.n	8007156 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	b2da      	uxtb	r2, r3
 8007144:	490c      	ldr	r1, [pc, #48]	@ (8007178 <__NVIC_SetPriority+0x4c>)
 8007146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800714a:	0112      	lsls	r2, r2, #4
 800714c:	b2d2      	uxtb	r2, r2
 800714e:	440b      	add	r3, r1
 8007150:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007154:	e00a      	b.n	800716c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	b2da      	uxtb	r2, r3
 800715a:	4908      	ldr	r1, [pc, #32]	@ (800717c <__NVIC_SetPriority+0x50>)
 800715c:	79fb      	ldrb	r3, [r7, #7]
 800715e:	f003 030f 	and.w	r3, r3, #15
 8007162:	3b04      	subs	r3, #4
 8007164:	0112      	lsls	r2, r2, #4
 8007166:	b2d2      	uxtb	r2, r2
 8007168:	440b      	add	r3, r1
 800716a:	761a      	strb	r2, [r3, #24]
}
 800716c:	bf00      	nop
 800716e:	370c      	adds	r7, #12
 8007170:	46bd      	mov	sp, r7
 8007172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007176:	4770      	bx	lr
 8007178:	e000e100 	.word	0xe000e100
 800717c:	e000ed00 	.word	0xe000ed00

08007180 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007180:	b480      	push	{r7}
 8007182:	b089      	sub	sp, #36	@ 0x24
 8007184:	af00      	add	r7, sp, #0
 8007186:	60f8      	str	r0, [r7, #12]
 8007188:	60b9      	str	r1, [r7, #8]
 800718a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	f003 0307 	and.w	r3, r3, #7
 8007192:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007194:	69fb      	ldr	r3, [r7, #28]
 8007196:	f1c3 0307 	rsb	r3, r3, #7
 800719a:	2b04      	cmp	r3, #4
 800719c:	bf28      	it	cs
 800719e:	2304      	movcs	r3, #4
 80071a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80071a2:	69fb      	ldr	r3, [r7, #28]
 80071a4:	3304      	adds	r3, #4
 80071a6:	2b06      	cmp	r3, #6
 80071a8:	d902      	bls.n	80071b0 <NVIC_EncodePriority+0x30>
 80071aa:	69fb      	ldr	r3, [r7, #28]
 80071ac:	3b03      	subs	r3, #3
 80071ae:	e000      	b.n	80071b2 <NVIC_EncodePriority+0x32>
 80071b0:	2300      	movs	r3, #0
 80071b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80071b4:	f04f 32ff 	mov.w	r2, #4294967295
 80071b8:	69bb      	ldr	r3, [r7, #24]
 80071ba:	fa02 f303 	lsl.w	r3, r2, r3
 80071be:	43da      	mvns	r2, r3
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	401a      	ands	r2, r3
 80071c4:	697b      	ldr	r3, [r7, #20]
 80071c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80071c8:	f04f 31ff 	mov.w	r1, #4294967295
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	fa01 f303 	lsl.w	r3, r1, r3
 80071d2:	43d9      	mvns	r1, r3
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80071d8:	4313      	orrs	r3, r2
         );
}
 80071da:	4618      	mov	r0, r3
 80071dc:	3724      	adds	r7, #36	@ 0x24
 80071de:	46bd      	mov	sp, r7
 80071e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e4:	4770      	bx	lr
	...

080071e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b082      	sub	sp, #8
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	3b01      	subs	r3, #1
 80071f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80071f8:	d301      	bcc.n	80071fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80071fa:	2301      	movs	r3, #1
 80071fc:	e00f      	b.n	800721e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80071fe:	4a0a      	ldr	r2, [pc, #40]	@ (8007228 <SysTick_Config+0x40>)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	3b01      	subs	r3, #1
 8007204:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007206:	210f      	movs	r1, #15
 8007208:	f04f 30ff 	mov.w	r0, #4294967295
 800720c:	f7ff ff8e 	bl	800712c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007210:	4b05      	ldr	r3, [pc, #20]	@ (8007228 <SysTick_Config+0x40>)
 8007212:	2200      	movs	r2, #0
 8007214:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007216:	4b04      	ldr	r3, [pc, #16]	@ (8007228 <SysTick_Config+0x40>)
 8007218:	2207      	movs	r2, #7
 800721a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800721c:	2300      	movs	r3, #0
}
 800721e:	4618      	mov	r0, r3
 8007220:	3708      	adds	r7, #8
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}
 8007226:	bf00      	nop
 8007228:	e000e010 	.word	0xe000e010

0800722c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b082      	sub	sp, #8
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f7ff ff29 	bl	800708c <__NVIC_SetPriorityGrouping>
}
 800723a:	bf00      	nop
 800723c:	3708      	adds	r7, #8
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}

08007242 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007242:	b580      	push	{r7, lr}
 8007244:	b086      	sub	sp, #24
 8007246:	af00      	add	r7, sp, #0
 8007248:	4603      	mov	r3, r0
 800724a:	60b9      	str	r1, [r7, #8]
 800724c:	607a      	str	r2, [r7, #4]
 800724e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007250:	2300      	movs	r3, #0
 8007252:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007254:	f7ff ff3e 	bl	80070d4 <__NVIC_GetPriorityGrouping>
 8007258:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800725a:	687a      	ldr	r2, [r7, #4]
 800725c:	68b9      	ldr	r1, [r7, #8]
 800725e:	6978      	ldr	r0, [r7, #20]
 8007260:	f7ff ff8e 	bl	8007180 <NVIC_EncodePriority>
 8007264:	4602      	mov	r2, r0
 8007266:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800726a:	4611      	mov	r1, r2
 800726c:	4618      	mov	r0, r3
 800726e:	f7ff ff5d 	bl	800712c <__NVIC_SetPriority>
}
 8007272:	bf00      	nop
 8007274:	3718      	adds	r7, #24
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}

0800727a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800727a:	b580      	push	{r7, lr}
 800727c:	b082      	sub	sp, #8
 800727e:	af00      	add	r7, sp, #0
 8007280:	4603      	mov	r3, r0
 8007282:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007284:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007288:	4618      	mov	r0, r3
 800728a:	f7ff ff31 	bl	80070f0 <__NVIC_EnableIRQ>
}
 800728e:	bf00      	nop
 8007290:	3708      	adds	r7, #8
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}

08007296 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007296:	b580      	push	{r7, lr}
 8007298:	b082      	sub	sp, #8
 800729a:	af00      	add	r7, sp, #0
 800729c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f7ff ffa2 	bl	80071e8 <SysTick_Config>
 80072a4:	4603      	mov	r3, r0
}
 80072a6:	4618      	mov	r0, r3
 80072a8:	3708      	adds	r7, #8
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd80      	pop	{r7, pc}

080072ae <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80072ae:	b580      	push	{r7, lr}
 80072b0:	b082      	sub	sp, #8
 80072b2:	af00      	add	r7, sp, #0
 80072b4:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d101      	bne.n	80072c0 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80072bc:	2301      	movs	r3, #1
 80072be:	e014      	b.n	80072ea <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	791b      	ldrb	r3, [r3, #4]
 80072c4:	b2db      	uxtb	r3, r3
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d105      	bne.n	80072d6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2200      	movs	r2, #0
 80072ce:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f7fe fe5d 	bl	8005f90 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2202      	movs	r2, #2
 80072da:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2200      	movs	r2, #0
 80072e0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2201      	movs	r2, #1
 80072e6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80072e8:	2300      	movs	r3, #0
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	3708      	adds	r7, #8
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}

080072f2 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80072f2:	b480      	push	{r7}
 80072f4:	b089      	sub	sp, #36	@ 0x24
 80072f6:	af00      	add	r7, sp, #0
 80072f8:	60f8      	str	r0, [r7, #12]
 80072fa:	60b9      	str	r1, [r7, #8]
 80072fc:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80072fe:	2300      	movs	r3, #0
 8007300:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d002      	beq.n	800730e <HAL_DAC_ConfigChannel+0x1c>
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d101      	bne.n	8007312 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 800730e:	2301      	movs	r3, #1
 8007310:	e042      	b.n	8007398 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	795b      	ldrb	r3, [r3, #5]
 8007316:	2b01      	cmp	r3, #1
 8007318:	d101      	bne.n	800731e <HAL_DAC_ConfigChannel+0x2c>
 800731a:	2302      	movs	r3, #2
 800731c:	e03c      	b.n	8007398 <HAL_DAC_ConfigChannel+0xa6>
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	2201      	movs	r2, #1
 8007322:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	2202      	movs	r2, #2
 8007328:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f003 0310 	and.w	r3, r3, #16
 8007338:	f640 72fe 	movw	r2, #4094	@ 0xffe
 800733c:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8007340:	43db      	mvns	r3, r3
 8007342:	69ba      	ldr	r2, [r7, #24]
 8007344:	4013      	ands	r3, r2
 8007346:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	681a      	ldr	r2, [r3, #0]
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	685b      	ldr	r3, [r3, #4]
 8007350:	4313      	orrs	r3, r2
 8007352:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f003 0310 	and.w	r3, r3, #16
 800735a:	697a      	ldr	r2, [r7, #20]
 800735c:	fa02 f303 	lsl.w	r3, r2, r3
 8007360:	69ba      	ldr	r2, [r7, #24]
 8007362:	4313      	orrs	r3, r2
 8007364:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	69ba      	ldr	r2, [r7, #24]
 800736c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	6819      	ldr	r1, [r3, #0]
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f003 0310 	and.w	r3, r3, #16
 800737a:	22c0      	movs	r2, #192	@ 0xc0
 800737c:	fa02 f303 	lsl.w	r3, r2, r3
 8007380:	43da      	mvns	r2, r3
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	400a      	ands	r2, r1
 8007388:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	2201      	movs	r2, #1
 800738e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	2200      	movs	r2, #0
 8007394:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8007396:	7ffb      	ldrb	r3, [r7, #31]
}
 8007398:	4618      	mov	r0, r3
 800739a:	3724      	adds	r7, #36	@ 0x24
 800739c:	46bd      	mov	sp, r7
 800739e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a2:	4770      	bx	lr

080073a4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b084      	sub	sp, #16
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d101      	bne.n	80073b6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80073b2:	2301      	movs	r3, #1
 80073b4:	e08a      	b.n	80074cc <HAL_ETH_Init+0x128>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d106      	bne.n	80073ce <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2223      	movs	r2, #35	@ 0x23
 80073c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f004 faa5 	bl	800b918 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80073ce:	2300      	movs	r3, #0
 80073d0:	60bb      	str	r3, [r7, #8]
 80073d2:	4b40      	ldr	r3, [pc, #256]	@ (80074d4 <HAL_ETH_Init+0x130>)
 80073d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073d6:	4a3f      	ldr	r2, [pc, #252]	@ (80074d4 <HAL_ETH_Init+0x130>)
 80073d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80073dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80073de:	4b3d      	ldr	r3, [pc, #244]	@ (80074d4 <HAL_ETH_Init+0x130>)
 80073e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80073e6:	60bb      	str	r3, [r7, #8]
 80073e8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80073ea:	4b3b      	ldr	r3, [pc, #236]	@ (80074d8 <HAL_ETH_Init+0x134>)
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	4a3a      	ldr	r2, [pc, #232]	@ (80074d8 <HAL_ETH_Init+0x134>)
 80073f0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80073f4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80073f6:	4b38      	ldr	r3, [pc, #224]	@ (80074d8 <HAL_ETH_Init+0x134>)
 80073f8:	685a      	ldr	r2, [r3, #4]
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	689b      	ldr	r3, [r3, #8]
 80073fe:	4936      	ldr	r1, [pc, #216]	@ (80074d8 <HAL_ETH_Init+0x134>)
 8007400:	4313      	orrs	r3, r2
 8007402:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8007404:	4b34      	ldr	r3, [pc, #208]	@ (80074d8 <HAL_ETH_Init+0x134>)
 8007406:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	687a      	ldr	r2, [r7, #4]
 8007414:	6812      	ldr	r2, [r2, #0]
 8007416:	f043 0301 	orr.w	r3, r3, #1
 800741a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800741e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007420:	f7ff faa6 	bl	8006970 <HAL_GetTick>
 8007424:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8007426:	e011      	b.n	800744c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8007428:	f7ff faa2 	bl	8006970 <HAL_GetTick>
 800742c:	4602      	mov	r2, r0
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	1ad3      	subs	r3, r2, r3
 8007432:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8007436:	d909      	bls.n	800744c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2204      	movs	r2, #4
 800743c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	22e0      	movs	r2, #224	@ 0xe0
 8007444:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8007448:	2301      	movs	r3, #1
 800744a:	e03f      	b.n	80074cc <HAL_ETH_Init+0x128>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f003 0301 	and.w	r3, r3, #1
 800745a:	2b00      	cmp	r3, #0
 800745c:	d1e4      	bne.n	8007428 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f000 fe16 	bl	8008090 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f000 fec1 	bl	80081ec <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f000 ff17 	bl	800829e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	685b      	ldr	r3, [r3, #4]
 8007474:	461a      	mov	r2, r3
 8007476:	2100      	movs	r1, #0
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f000 fe7f 	bl	800817c <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 800748c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8007496:	687a      	ldr	r2, [r7, #4]
 8007498:	6812      	ldr	r2, [r2, #0]
 800749a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800749e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80074a2:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 80074b6:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2200      	movs	r2, #0
 80074be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2210      	movs	r2, #16
 80074c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80074ca:	2300      	movs	r3, #0
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	3710      	adds	r7, #16
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}
 80074d4:	40023800 	.word	0x40023800
 80074d8:	40013800 	.word	0x40013800

080074dc <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b084      	sub	sp, #16
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80074ea:	2b10      	cmp	r3, #16
 80074ec:	d150      	bne.n	8007590 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2223      	movs	r2, #35	@ 0x23
 80074f2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2204      	movs	r2, #4
 80074fa:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f000 f9f8 	bl	80078f2 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	681a      	ldr	r2, [r3, #0]
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f042 0208 	orr.w	r2, r2, #8
 8007510:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800751a:	2001      	movs	r0, #1
 800751c:	f7ff fa34 	bl	8006988 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	68fa      	ldr	r2, [r7, #12]
 8007526:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	681a      	ldr	r2, [r3, #0]
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f042 0204 	orr.w	r2, r2, #4
 8007536:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8007540:	2001      	movs	r0, #1
 8007542:	f7ff fa21 	bl	8006988 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	68fa      	ldr	r2, [r7, #12]
 800754c:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f000 fc3a 	bl	8007dc8 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800755c:	699b      	ldr	r3, [r3, #24]
 800755e:	687a      	ldr	r2, [r7, #4]
 8007560:	6812      	ldr	r2, [r2, #0]
 8007562:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8007566:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800756a:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007574:	699b      	ldr	r3, [r3, #24]
 8007576:	687a      	ldr	r2, [r7, #4]
 8007578:	6812      	ldr	r2, [r2, #0]
 800757a:	f043 0302 	orr.w	r3, r3, #2
 800757e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007582:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2223      	movs	r2, #35	@ 0x23
 8007588:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_OK;
 800758c:	2300      	movs	r3, #0
 800758e:	e000      	b.n	8007592 <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8007590:	2301      	movs	r3, #1
  }
}
 8007592:	4618      	mov	r0, r3
 8007594:	3710      	adds	r7, #16
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}

0800759a <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 800759a:	b580      	push	{r7, lr}
 800759c:	b084      	sub	sp, #16
 800759e:	af00      	add	r7, sp, #0
 80075a0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80075a8:	2b23      	cmp	r3, #35	@ 0x23
 80075aa:	d14a      	bne.n	8007642 <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2223      	movs	r2, #35	@ 0x23
 80075b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80075bc:	699b      	ldr	r3, [r3, #24]
 80075be:	687a      	ldr	r2, [r7, #4]
 80075c0:	6812      	ldr	r2, [r2, #0]
 80075c2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80075c6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80075ca:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80075d4:	699b      	ldr	r3, [r3, #24]
 80075d6:	687a      	ldr	r2, [r7, #4]
 80075d8:	6812      	ldr	r2, [r2, #0]
 80075da:	f023 0302 	bic.w	r3, r3, #2
 80075de:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80075e2:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	681a      	ldr	r2, [r3, #0]
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f022 0204 	bic.w	r2, r2, #4
 80075f2:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80075fc:	2001      	movs	r0, #1
 80075fe:	f7ff f9c3 	bl	8006988 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	68fa      	ldr	r2, [r7, #12]
 8007608:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f000 fbdc 	bl	8007dc8 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	681a      	ldr	r2, [r3, #0]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f022 0208 	bic.w	r2, r2, #8
 800761e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8007628:	2001      	movs	r0, #1
 800762a:	f7ff f9ad 	bl	8006988 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	68fa      	ldr	r2, [r7, #12]
 8007634:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2210      	movs	r2, #16
 800763a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 800763e:	2300      	movs	r3, #0
 8007640:	e000      	b.n	8007644 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 8007642:	2301      	movs	r3, #1
  }
}
 8007644:	4618      	mov	r0, r3
 8007646:	3710      	adds	r7, #16
 8007648:	46bd      	mov	sp, r7
 800764a:	bd80      	pop	{r7, pc}

0800764c <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig, uint32_t Timeout)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b086      	sub	sp, #24
 8007650:	af00      	add	r7, sp, #0
 8007652:	60f8      	str	r0, [r7, #12]
 8007654:	60b9      	str	r1, [r7, #8]
 8007656:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d109      	bne.n	8007672 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007664:	f043 0201 	orr.w	r2, r3, #1
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 800766e:	2301      	movs	r3, #1
 8007670:	e07c      	b.n	800776c <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007678:	2b23      	cmp	r3, #35	@ 0x23
 800767a:	d176      	bne.n	800776a <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 800767c:	2200      	movs	r2, #0
 800767e:	68b9      	ldr	r1, [r7, #8]
 8007680:	68f8      	ldr	r0, [r7, #12]
 8007682:	f000 fe7b 	bl	800837c <ETH_Prepare_Tx_Descriptors>
 8007686:	4603      	mov	r3, r0
 8007688:	2b00      	cmp	r3, #0
 800768a:	d009      	beq.n	80076a0 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007692:	f043 0202 	orr.w	r2, r3, #2
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 800769c:	2301      	movs	r3, #1
 800769e:	e065      	b.n	800776c <HAL_ETH_Transmit+0x120>
  __ASM volatile ("dsb 0xF":::"memory");
 80076a0:	f3bf 8f4f 	dsb	sy
}
 80076a4:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	3206      	adds	r2, #6
 80076ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076b2:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076b8:	1c5a      	adds	r2, r3, #1
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	629a      	str	r2, [r3, #40]	@ 0x28
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076c2:	2b03      	cmp	r3, #3
 80076c4:	d904      	bls.n	80076d0 <HAL_ETH_Transmit+0x84>
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076ca:	1f1a      	subs	r2, r3, #4
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681a      	ldr	r2, [r3, #0]
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	3106      	adds	r1, #6
 80076dc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80076e0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80076e4:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 80076e6:	f7ff f943 	bl	8006970 <HAL_GetTick>
 80076ea:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80076ec:	e037      	b.n	800775e <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80076f6:	695b      	ldr	r3, [r3, #20]
 80076f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d011      	beq.n	8007724 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007706:	f043 0208 	orr.w	r2, r3, #8
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007718:	695a      	ldr	r2, [r3, #20]
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        /* Return function status */
        return HAL_ERROR;
 8007720:	2301      	movs	r3, #1
 8007722:	e023      	b.n	800776c <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f1b3 3fff 	cmp.w	r3, #4294967295
 800772a:	d018      	beq.n	800775e <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800772c:	f7ff f920 	bl	8006970 <HAL_GetTick>
 8007730:	4602      	mov	r2, r0
 8007732:	693b      	ldr	r3, [r7, #16]
 8007734:	1ad3      	subs	r3, r2, r3
 8007736:	687a      	ldr	r2, [r7, #4]
 8007738:	429a      	cmp	r2, r3
 800773a:	d302      	bcc.n	8007742 <HAL_ETH_Transmit+0xf6>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d10d      	bne.n	800775e <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007748:	f043 0204 	orr.w	r2, r3, #4
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8007752:	697b      	ldr	r3, [r7, #20]
 8007754:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8007758:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 800775a:	2301      	movs	r3, #1
 800775c:	e006      	b.n	800776c <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	2b00      	cmp	r3, #0
 8007764:	dbc3      	blt.n	80076ee <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8007766:	2300      	movs	r3, #0
 8007768:	e000      	b.n	800776c <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 800776a:	2301      	movs	r3, #1
  }
}
 800776c:	4618      	mov	r0, r3
 800776e:	3718      	adds	r7, #24
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}

08007774 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b088      	sub	sp, #32
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
 800777c:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 800777e:	2300      	movs	r3, #0
 8007780:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8007782:	2300      	movs	r3, #0
 8007784:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d109      	bne.n	80077a0 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007792:	f043 0201 	orr.w	r2, r3, #1
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 800779c:	2301      	movs	r3, #1
 800779e:	e0a4      	b.n	80078ea <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80077a6:	2b23      	cmp	r3, #35	@ 0x23
 80077a8:	d001      	beq.n	80077ae <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80077aa:	2301      	movs	r3, #1
 80077ac:	e09d      	b.n	80078ea <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80077b2:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	69fa      	ldr	r2, [r7, #28]
 80077b8:	3212      	adds	r2, #18
 80077ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077be:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80077c4:	f1c3 0304 	rsb	r3, r3, #4
 80077c8:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80077ca:	e066      	b.n	800789a <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 80077cc:	69bb      	ldr	r3, [r7, #24]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d007      	beq.n	80077e8 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 80077d8:	69bb      	ldr	r3, [r7, #24]
 80077da:	69da      	ldr	r2, [r3, #28]
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 80077e0:	69bb      	ldr	r3, [r7, #24]
 80077e2:	699a      	ldr	r2, [r3, #24]
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80077e8:	69bb      	ldr	r3, [r7, #24]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d103      	bne.n	80077fc <HAL_ETH_ReadData+0x88>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d03c      	beq.n	8007876 <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80077fc:	69bb      	ldr	r3, [r7, #24]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007804:	2b00      	cmp	r3, #0
 8007806:	d005      	beq.n	8007814 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2200      	movs	r2, #0
 800780c:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2200      	movs	r2, #0
 8007812:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 8007814:	69bb      	ldr	r3, [r7, #24]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	0c1b      	lsrs	r3, r3, #16
 800781a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800781e:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8007820:	69bb      	ldr	r3, [r7, #24]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007828:	2b00      	cmp	r3, #0
 800782a:	d005      	beq.n	8007838 <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 800782c:	69bb      	ldr	r3, [r7, #24]
 800782e:	681a      	ldr	r2, [r3, #0]
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8007834:	2301      	movs	r3, #1
 8007836:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8007838:	69bb      	ldr	r3, [r7, #24]
 800783a:	689a      	ldr	r2, [r3, #8]
 800783c:	69bb      	ldr	r3, [r7, #24]
 800783e:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 800784c:	69bb      	ldr	r3, [r7, #24]
 800784e:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8007850:	461a      	mov	r2, r3
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	b29b      	uxth	r3, r3
 8007856:	f004 fa0f 	bl	800bc78 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800785e:	1c5a      	adds	r2, r3, #1
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	441a      	add	r2, r3
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8007870:	69bb      	ldr	r3, [r7, #24]
 8007872:	2200      	movs	r2, #0
 8007874:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8007876:	69fb      	ldr	r3, [r7, #28]
 8007878:	3301      	adds	r3, #1
 800787a:	61fb      	str	r3, [r7, #28]
 800787c:	69fb      	ldr	r3, [r7, #28]
 800787e:	2b03      	cmp	r3, #3
 8007880:	d902      	bls.n	8007888 <HAL_ETH_ReadData+0x114>
 8007882:	69fb      	ldr	r3, [r7, #28]
 8007884:	3b04      	subs	r3, #4
 8007886:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	69fa      	ldr	r2, [r7, #28]
 800788c:	3212      	adds	r2, #18
 800788e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007892:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	3301      	adds	r3, #1
 8007898:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800789a:	69bb      	ldr	r3, [r7, #24]
 800789c:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 800789e:	2b00      	cmp	r3, #0
 80078a0:	db06      	blt.n	80078b0 <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80078a2:	697a      	ldr	r2, [r7, #20]
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	429a      	cmp	r2, r3
 80078a8:	d202      	bcs.n	80078b0 <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 80078aa:	7cfb      	ldrb	r3, [r7, #19]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d08d      	beq.n	80077cc <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	441a      	add	r2, r3
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d002      	beq.n	80078ca <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f000 f814 	bl	80078f2 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	69fa      	ldr	r2, [r7, #28]
 80078ce:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 80078d0:	7cfb      	ldrb	r3, [r7, #19]
 80078d2:	2b01      	cmp	r3, #1
 80078d4:	d108      	bne.n	80078e8 <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2200      	movs	r2, #0
 80078e2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80078e4:	2300      	movs	r3, #0
 80078e6:	e000      	b.n	80078ea <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80078e8:	2301      	movs	r3, #1
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3720      	adds	r7, #32
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}

080078f2 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80078f2:	b580      	push	{r7, lr}
 80078f4:	b088      	sub	sp, #32
 80078f6:	af00      	add	r7, sp, #0
 80078f8:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80078fa:	2300      	movs	r3, #0
 80078fc:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 80078fe:	2301      	movs	r3, #1
 8007900:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007906:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	69fa      	ldr	r2, [r7, #28]
 800790c:	3212      	adds	r2, #18
 800790e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007912:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007918:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 800791a:	e044      	b.n	80079a6 <ETH_UpdateDescriptor+0xb4>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	6a1b      	ldr	r3, [r3, #32]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d112      	bne.n	800794a <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8007924:	f107 0308 	add.w	r3, r7, #8
 8007928:	4618      	mov	r0, r3
 800792a:	f004 f975 	bl	800bc18 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d102      	bne.n	800793a <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8007934:	2300      	movs	r3, #0
 8007936:	74fb      	strb	r3, [r7, #19]
 8007938:	e007      	b.n	800794a <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	461a      	mov	r2, r3
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	461a      	mov	r2, r3
 8007946:	697b      	ldr	r3, [r7, #20]
 8007948:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 800794a:	7cfb      	ldrb	r3, [r7, #19]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d02a      	beq.n	80079a6 <ETH_UpdateDescriptor+0xb4>
    {
      if (heth->RxDescList.ItMode == 0U)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007954:	2b00      	cmp	r3, #0
 8007956:	d108      	bne.n	800796a <ETH_UpdateDescriptor+0x78>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	695b      	ldr	r3, [r3, #20]
 800795c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007960:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007964:	697a      	ldr	r2, [r7, #20]
 8007966:	6053      	str	r3, [r2, #4]
 8007968:	e005      	b.n	8007976 <ETH_UpdateDescriptor+0x84>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	695b      	ldr	r3, [r3, #20]
 800796e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8007982:	69fb      	ldr	r3, [r7, #28]
 8007984:	3301      	adds	r3, #1
 8007986:	61fb      	str	r3, [r7, #28]
 8007988:	69fb      	ldr	r3, [r7, #28]
 800798a:	2b03      	cmp	r3, #3
 800798c:	d902      	bls.n	8007994 <ETH_UpdateDescriptor+0xa2>
 800798e:	69fb      	ldr	r3, [r7, #28]
 8007990:	3b04      	subs	r3, #4
 8007992:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	69fa      	ldr	r2, [r7, #28]
 8007998:	3212      	adds	r2, #18
 800799a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800799e:	617b      	str	r3, [r7, #20]
      desccount--;
 80079a0:	69bb      	ldr	r3, [r7, #24]
 80079a2:	3b01      	subs	r3, #1
 80079a4:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80079a6:	69bb      	ldr	r3, [r7, #24]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d002      	beq.n	80079b2 <ETH_UpdateDescriptor+0xc0>
 80079ac:	7cfb      	ldrb	r3, [r7, #19]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d1b4      	bne.n	800791c <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80079b6:	69ba      	ldr	r2, [r7, #24]
 80079b8:	429a      	cmp	r2, r3
 80079ba:	d01a      	beq.n	80079f2 <ETH_UpdateDescriptor+0x100>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 80079bc:	69fb      	ldr	r3, [r7, #28]
 80079be:	3301      	adds	r3, #1
 80079c0:	f003 0303 	and.w	r3, r3, #3
 80079c4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 80079c6:	f3bf 8f5f 	dmb	sy
}
 80079ca:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6919      	ldr	r1, [r3, #16]
 80079d0:	68fa      	ldr	r2, [r7, #12]
 80079d2:	4613      	mov	r3, r2
 80079d4:	009b      	lsls	r3, r3, #2
 80079d6:	4413      	add	r3, r2
 80079d8:	00db      	lsls	r3, r3, #3
 80079da:	18ca      	adds	r2, r1, r3
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80079e4:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	69fa      	ldr	r2, [r7, #28]
 80079ea:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	69ba      	ldr	r2, [r7, #24]
 80079f0:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 80079f2:	bf00      	nop
 80079f4:	3720      	adds	r7, #32
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bd80      	pop	{r7, pc}

080079fa <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 80079fa:	b580      	push	{r7, lr}
 80079fc:	b086      	sub	sp, #24
 80079fe:	af00      	add	r7, sp, #0
 8007a00:	60f8      	str	r0, [r7, #12]
 8007a02:	60b9      	str	r1, [r7, #8]
 8007a04:	607a      	str	r2, [r7, #4]
 8007a06:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	691b      	ldr	r3, [r3, #16]
 8007a0e:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8007a10:	697b      	ldr	r3, [r7, #20]
 8007a12:	f003 031c 	and.w	r3, r3, #28
 8007a16:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	02db      	lsls	r3, r3, #11
 8007a1c:	b29b      	uxth	r3, r3
 8007a1e:	697a      	ldr	r2, [r7, #20]
 8007a20:	4313      	orrs	r3, r2
 8007a22:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	019b      	lsls	r3, r3, #6
 8007a28:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8007a2c:	697a      	ldr	r2, [r7, #20]
 8007a2e:	4313      	orrs	r3, r2
 8007a30:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8007a32:	697b      	ldr	r3, [r7, #20]
 8007a34:	f023 0302 	bic.w	r3, r3, #2
 8007a38:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	f043 0301 	orr.w	r3, r3, #1
 8007a40:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	697a      	ldr	r2, [r7, #20]
 8007a48:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8007a4a:	f7fe ff91 	bl	8006970 <HAL_GetTick>
 8007a4e:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8007a50:	e00d      	b.n	8007a6e <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8007a52:	f7fe ff8d 	bl	8006970 <HAL_GetTick>
 8007a56:	4602      	mov	r2, r0
 8007a58:	693b      	ldr	r3, [r7, #16]
 8007a5a:	1ad3      	subs	r3, r2, r3
 8007a5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a60:	d301      	bcc.n	8007a66 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8007a62:	2301      	movs	r3, #1
 8007a64:	e010      	b.n	8007a88 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	691b      	ldr	r3, [r3, #16]
 8007a6c:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	f003 0301 	and.w	r3, r3, #1
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d1ec      	bne.n	8007a52 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	695b      	ldr	r3, [r3, #20]
 8007a7e:	b29b      	uxth	r3, r3
 8007a80:	461a      	mov	r2, r3
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8007a86:	2300      	movs	r3, #0
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	3718      	adds	r7, #24
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}

08007a90 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b086      	sub	sp, #24
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	60f8      	str	r0, [r7, #12]
 8007a98:	60b9      	str	r1, [r7, #8]
 8007a9a:	607a      	str	r2, [r7, #4]
 8007a9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	691b      	ldr	r3, [r3, #16]
 8007aa4:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	f003 031c 	and.w	r3, r3, #28
 8007aac:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	02db      	lsls	r3, r3, #11
 8007ab2:	b29b      	uxth	r3, r3
 8007ab4:	697a      	ldr	r2, [r7, #20]
 8007ab6:	4313      	orrs	r3, r2
 8007ab8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	019b      	lsls	r3, r3, #6
 8007abe:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8007ac2:	697a      	ldr	r2, [r7, #20]
 8007ac4:	4313      	orrs	r3, r2
 8007ac6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8007ac8:	697b      	ldr	r3, [r7, #20]
 8007aca:	f043 0302 	orr.w	r3, r3, #2
 8007ace:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8007ad0:	697b      	ldr	r3, [r7, #20]
 8007ad2:	f043 0301 	orr.w	r3, r3, #1
 8007ad6:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	b29a      	uxth	r2, r3
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	697a      	ldr	r2, [r7, #20]
 8007ae8:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007aea:	f7fe ff41 	bl	8006970 <HAL_GetTick>
 8007aee:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8007af0:	e00d      	b.n	8007b0e <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8007af2:	f7fe ff3d 	bl	8006970 <HAL_GetTick>
 8007af6:	4602      	mov	r2, r0
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	1ad3      	subs	r3, r2, r3
 8007afc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b00:	d301      	bcc.n	8007b06 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8007b02:	2301      	movs	r3, #1
 8007b04:	e009      	b.n	8007b1a <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	691b      	ldr	r3, [r3, #16]
 8007b0c:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8007b0e:	697b      	ldr	r3, [r7, #20]
 8007b10:	f003 0301 	and.w	r3, r3, #1
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d1ec      	bne.n	8007af2 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8007b18:	2300      	movs	r3, #0
}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	3718      	adds	r7, #24
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}

08007b22 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8007b22:	b480      	push	{r7}
 8007b24:	b083      	sub	sp, #12
 8007b26:	af00      	add	r7, sp, #0
 8007b28:	6078      	str	r0, [r7, #4]
 8007b2a:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d101      	bne.n	8007b36 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8007b32:	2301      	movs	r3, #1
 8007b34:	e0e6      	b.n	8007d04 <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f003 0310 	and.w	r3, r3, #16
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	bf14      	ite	ne
 8007b44:	2301      	movne	r3, #1
 8007b46:	2300      	moveq	r3, #0
 8007b48:	b2db      	uxtb	r3, r3
 8007b4a:	461a      	mov	r2, r3
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	bf0c      	ite	eq
 8007b6e:	2301      	moveq	r3, #1
 8007b70:	2300      	movne	r3, #0
 8007b72:	b2db      	uxtb	r3, r3
 8007b74:	461a      	mov	r2, r3
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	bf14      	ite	ne
 8007b8a:	2301      	movne	r3, #1
 8007b8c:	2300      	moveq	r3, #0
 8007b8e:	b2db      	uxtb	r3, r3
 8007b90:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	bf0c      	ite	eq
 8007ba4:	2301      	moveq	r3, #1
 8007ba6:	2300      	movne	r3, #0
 8007ba8:	b2db      	uxtb	r3, r3
 8007baa:	461a      	mov	r2, r3
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	bf14      	ite	ne
 8007bbe:	2301      	movne	r3, #1
 8007bc0:	2300      	moveq	r3, #0
 8007bc2:	b2db      	uxtb	r3, r3
 8007bc4:	461a      	mov	r2, r3
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	bf0c      	ite	eq
 8007bf4:	2301      	moveq	r3, #1
 8007bf6:	2300      	movne	r3, #0
 8007bf8:	b2db      	uxtb	r3, r3
 8007bfa:	461a      	mov	r2, r3
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	bf0c      	ite	eq
 8007c0e:	2301      	moveq	r3, #1
 8007c10:	2300      	movne	r3, #0
 8007c12:	b2db      	uxtb	r3, r3
 8007c14:	461a      	mov	r2, r3
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	bf14      	ite	ne
 8007c28:	2301      	movne	r3, #1
 8007c2a:	2300      	moveq	r3, #0
 8007c2c:	b2db      	uxtb	r3, r3
 8007c2e:	461a      	mov	r2, r3
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	bf14      	ite	ne
 8007c50:	2301      	movne	r3, #1
 8007c52:	2300      	moveq	r3, #0
 8007c54:	b2db      	uxtb	r3, r3
 8007c56:	461a      	mov	r2, r3
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	bf14      	ite	ne
 8007c6a:	2301      	movne	r3, #1
 8007c6c:	2300      	moveq	r3, #0
 8007c6e:	b2db      	uxtb	r3, r3
 8007c70:	461a      	mov	r2, r3
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	699b      	ldr	r3, [r3, #24]
 8007c7c:	f003 0302 	and.w	r3, r3, #2
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	bf14      	ite	ne
 8007c84:	2301      	movne	r3, #1
 8007c86:	2300      	moveq	r3, #0
 8007c88:	b2db      	uxtb	r3, r3
 8007c8a:	461a      	mov	r2, r3
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	699b      	ldr	r3, [r3, #24]
 8007c98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	bf0c      	ite	eq
 8007ca0:	2301      	moveq	r3, #1
 8007ca2:	2300      	movne	r3, #0
 8007ca4:	b2db      	uxtb	r3, r3
 8007ca6:	461a      	mov	r2, r3
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	699b      	ldr	r3, [r3, #24]
 8007cb4:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	699b      	ldr	r3, [r3, #24]
 8007cc2:	0c1b      	lsrs	r3, r3, #16
 8007cc4:	b29a      	uxth	r2, r3
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	699b      	ldr	r3, [r3, #24]
 8007cd0:	f003 0304 	and.w	r3, r3, #4
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	bf14      	ite	ne
 8007cd8:	2301      	movne	r3, #1
 8007cda:	2300      	moveq	r3, #0
 8007cdc:	b2db      	uxtb	r3, r3
 8007cde:	461a      	mov	r2, r3
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	699b      	ldr	r3, [r3, #24]
 8007cec:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	bf14      	ite	ne
 8007cf4:	2301      	movne	r3, #1
 8007cf6:	2300      	moveq	r3, #0
 8007cf8:	b2db      	uxtb	r3, r3
 8007cfa:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8007d02:	2300      	movs	r3, #0
}
 8007d04:	4618      	mov	r0, r3
 8007d06:	370c      	adds	r7, #12
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0e:	4770      	bx	lr

08007d10 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b082      	sub	sp, #8
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
 8007d18:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d101      	bne.n	8007d24 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8007d20:	2301      	movs	r3, #1
 8007d22:	e00b      	b.n	8007d3c <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007d2a:	2b10      	cmp	r3, #16
 8007d2c:	d105      	bne.n	8007d3a <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8007d2e:	6839      	ldr	r1, [r7, #0]
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f000 f86f 	bl	8007e14 <ETH_SetMACConfig>

    return HAL_OK;
 8007d36:	2300      	movs	r3, #0
 8007d38:	e000      	b.n	8007d3c <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8007d3a:	2301      	movs	r3, #1
  }
}
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	3708      	adds	r7, #8
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bd80      	pop	{r7, pc}

08007d44 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b084      	sub	sp, #16
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	691b      	ldr	r3, [r3, #16]
 8007d52:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	f023 031c 	bic.w	r3, r3, #28
 8007d5a:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8007d5c:	f001 fcde 	bl	800971c <HAL_RCC_GetHCLKFreq>
 8007d60:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	4a14      	ldr	r2, [pc, #80]	@ (8007db8 <HAL_ETH_SetMDIOClockRange+0x74>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d804      	bhi.n	8007d74 <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	f043 0308 	orr.w	r3, r3, #8
 8007d70:	60fb      	str	r3, [r7, #12]
 8007d72:	e019      	b.n	8007da8 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	4a11      	ldr	r2, [pc, #68]	@ (8007dbc <HAL_ETH_SetMDIOClockRange+0x78>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d204      	bcs.n	8007d86 <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	f043 030c 	orr.w	r3, r3, #12
 8007d82:	60fb      	str	r3, [r7, #12]
 8007d84:	e010      	b.n	8007da8 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 8007d86:	68bb      	ldr	r3, [r7, #8]
 8007d88:	4a0d      	ldr	r2, [pc, #52]	@ (8007dc0 <HAL_ETH_SetMDIOClockRange+0x7c>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d90c      	bls.n	8007da8 <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	4a0c      	ldr	r2, [pc, #48]	@ (8007dc4 <HAL_ETH_SetMDIOClockRange+0x80>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d804      	bhi.n	8007da0 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	f043 0304 	orr.w	r3, r3, #4
 8007d9c:	60fb      	str	r3, [r7, #12]
 8007d9e:	e003      	b.n	8007da8 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	f043 0310 	orr.w	r3, r3, #16
 8007da6:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	68fa      	ldr	r2, [r7, #12]
 8007dae:	611a      	str	r2, [r3, #16]
}
 8007db0:	bf00      	nop
 8007db2:	3710      	adds	r7, #16
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}
 8007db8:	02160ebf 	.word	0x02160ebf
 8007dbc:	03938700 	.word	0x03938700
 8007dc0:	05f5e0ff 	.word	0x05f5e0ff
 8007dc4:	08f0d17f 	.word	0x08f0d17f

08007dc8 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b084      	sub	sp, #16
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007ddc:	699b      	ldr	r3, [r3, #24]
 8007dde:	687a      	ldr	r2, [r7, #4]
 8007de0:	6812      	ldr	r2, [r2, #0]
 8007de2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007de6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007dea:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007df4:	699b      	ldr	r3, [r3, #24]
 8007df6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8007df8:	2001      	movs	r0, #1
 8007dfa:	f7fe fdc5 	bl	8006988 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681a      	ldr	r2, [r3, #0]
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007e08:	6193      	str	r3, [r2, #24]
}
 8007e0a:	bf00      	nop
 8007e0c:	3710      	adds	r7, #16
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}
	...

08007e14 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b084      	sub	sp, #16
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
 8007e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8007e26:	68fa      	ldr	r2, [r7, #12]
 8007e28:	4b53      	ldr	r3, [pc, #332]	@ (8007f78 <ETH_SetMACConfig+0x164>)
 8007e2a:	4013      	ands	r3, r2
 8007e2c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	7b9b      	ldrb	r3, [r3, #14]
 8007e32:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8007e34:	683a      	ldr	r2, [r7, #0]
 8007e36:	7c12      	ldrb	r2, [r2, #16]
 8007e38:	2a00      	cmp	r2, #0
 8007e3a:	d102      	bne.n	8007e42 <ETH_SetMACConfig+0x2e>
 8007e3c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8007e40:	e000      	b.n	8007e44 <ETH_SetMACConfig+0x30>
 8007e42:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8007e44:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8007e46:	683a      	ldr	r2, [r7, #0]
 8007e48:	7c52      	ldrb	r2, [r2, #17]
 8007e4a:	2a00      	cmp	r2, #0
 8007e4c:	d102      	bne.n	8007e54 <ETH_SetMACConfig+0x40>
 8007e4e:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8007e52:	e000      	b.n	8007e56 <ETH_SetMACConfig+0x42>
 8007e54:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8007e56:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8007e5c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	7fdb      	ldrb	r3, [r3, #31]
 8007e62:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8007e64:	431a      	orrs	r2, r3
                        macconf->Speed |
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8007e6a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8007e6c:	683a      	ldr	r2, [r7, #0]
 8007e6e:	7f92      	ldrb	r2, [r2, #30]
 8007e70:	2a00      	cmp	r2, #0
 8007e72:	d102      	bne.n	8007e7a <ETH_SetMACConfig+0x66>
 8007e74:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8007e78:	e000      	b.n	8007e7c <ETH_SetMACConfig+0x68>
 8007e7a:	2200      	movs	r2, #0
                        macconf->Speed |
 8007e7c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	7f1b      	ldrb	r3, [r3, #28]
 8007e82:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8007e84:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8007e8a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	791b      	ldrb	r3, [r3, #4]
 8007e90:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8007e92:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8007e94:	683a      	ldr	r2, [r7, #0]
 8007e96:	f892 2020 	ldrb.w	r2, [r2, #32]
 8007e9a:	2a00      	cmp	r2, #0
 8007e9c:	d102      	bne.n	8007ea4 <ETH_SetMACConfig+0x90>
 8007e9e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007ea2:	e000      	b.n	8007ea6 <ETH_SetMACConfig+0x92>
 8007ea4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8007ea6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	7bdb      	ldrb	r3, [r3, #15]
 8007eac:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8007eae:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8007eb4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007ebc:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8007ebe:	4313      	orrs	r3, r2
 8007ec0:	68fa      	ldr	r2, [r7, #12]
 8007ec2:	4313      	orrs	r3, r2
 8007ec4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	68fa      	ldr	r2, [r7, #12]
 8007ecc:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8007ed6:	2001      	movs	r0, #1
 8007ed8:	f7fe fd56 	bl	8006988 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	68fa      	ldr	r2, [r7, #12]
 8007ee2:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	699b      	ldr	r3, [r3, #24]
 8007eea:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8007eec:	68fa      	ldr	r2, [r7, #12]
 8007eee:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8007ef2:	4013      	ands	r3, r2
 8007ef4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007efa:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8007efc:	683a      	ldr	r2, [r7, #0]
 8007efe:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8007f02:	2a00      	cmp	r2, #0
 8007f04:	d101      	bne.n	8007f0a <ETH_SetMACConfig+0xf6>
 8007f06:	2280      	movs	r2, #128	@ 0x80
 8007f08:	e000      	b.n	8007f0c <ETH_SetMACConfig+0xf8>
 8007f0a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8007f0c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8007f12:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8007f14:	683a      	ldr	r2, [r7, #0]
 8007f16:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8007f1a:	2a01      	cmp	r2, #1
 8007f1c:	d101      	bne.n	8007f22 <ETH_SetMACConfig+0x10e>
 8007f1e:	2208      	movs	r2, #8
 8007f20:	e000      	b.n	8007f24 <ETH_SetMACConfig+0x110>
 8007f22:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8007f24:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8007f26:	683a      	ldr	r2, [r7, #0]
 8007f28:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8007f2c:	2a01      	cmp	r2, #1
 8007f2e:	d101      	bne.n	8007f34 <ETH_SetMACConfig+0x120>
 8007f30:	2204      	movs	r2, #4
 8007f32:	e000      	b.n	8007f36 <ETH_SetMACConfig+0x122>
 8007f34:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8007f36:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8007f38:	683a      	ldr	r2, [r7, #0]
 8007f3a:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8007f3e:	2a01      	cmp	r2, #1
 8007f40:	d101      	bne.n	8007f46 <ETH_SetMACConfig+0x132>
 8007f42:	2202      	movs	r2, #2
 8007f44:	e000      	b.n	8007f48 <ETH_SetMACConfig+0x134>
 8007f46:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8007f48:	4313      	orrs	r3, r2
 8007f4a:	68fa      	ldr	r2, [r7, #12]
 8007f4c:	4313      	orrs	r3, r2
 8007f4e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	68fa      	ldr	r2, [r7, #12]
 8007f56:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	699b      	ldr	r3, [r3, #24]
 8007f5e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8007f60:	2001      	movs	r0, #1
 8007f62:	f7fe fd11 	bl	8006988 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	68fa      	ldr	r2, [r7, #12]
 8007f6c:	619a      	str	r2, [r3, #24]
}
 8007f6e:	bf00      	nop
 8007f70:	3710      	adds	r7, #16
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}
 8007f76:	bf00      	nop
 8007f78:	fd20810f 	.word	0xfd20810f

08007f7c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b084      	sub	sp, #16
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
 8007f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007f8e:	699b      	ldr	r3, [r3, #24]
 8007f90:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8007f92:	68fa      	ldr	r2, [r7, #12]
 8007f94:	4b3d      	ldr	r3, [pc, #244]	@ (800808c <ETH_SetDMAConfig+0x110>)
 8007f96:	4013      	ands	r3, r2
 8007f98:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	7b1b      	ldrb	r3, [r3, #12]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d102      	bne.n	8007fa8 <ETH_SetDMAConfig+0x2c>
 8007fa2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8007fa6:	e000      	b.n	8007faa <ETH_SetDMAConfig+0x2e>
 8007fa8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	7b5b      	ldrb	r3, [r3, #13]
 8007fae:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8007fb0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8007fb2:	683a      	ldr	r2, [r7, #0]
 8007fb4:	7f52      	ldrb	r2, [r2, #29]
 8007fb6:	2a00      	cmp	r2, #0
 8007fb8:	d102      	bne.n	8007fc0 <ETH_SetDMAConfig+0x44>
 8007fba:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007fbe:	e000      	b.n	8007fc2 <ETH_SetDMAConfig+0x46>
 8007fc0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8007fc2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	7b9b      	ldrb	r3, [r3, #14]
 8007fc8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8007fca:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8007fd0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	7f1b      	ldrb	r3, [r3, #28]
 8007fd6:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8007fd8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	7f9b      	ldrb	r3, [r3, #30]
 8007fde:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8007fe0:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8007fe6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007fee:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8007ff0:	4313      	orrs	r3, r2
 8007ff2:	68fa      	ldr	r2, [r7, #12]
 8007ff4:	4313      	orrs	r3, r2
 8007ff6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008000:	461a      	mov	r2, r3
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800800e:	699b      	ldr	r3, [r3, #24]
 8008010:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8008012:	2001      	movs	r0, #1
 8008014:	f7fe fcb8 	bl	8006988 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008020:	461a      	mov	r2, r3
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	791b      	ldrb	r3, [r3, #4]
 800802a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8008030:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8008036:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800803c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8008044:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8008046:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800804c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800804e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8008054:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8008056:	687a      	ldr	r2, [r7, #4]
 8008058:	6812      	ldr	r2, [r2, #0]
 800805a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800805e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008062:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8008070:	2001      	movs	r0, #1
 8008072:	f7fe fc89 	bl	8006988 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800807e:	461a      	mov	r2, r3
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	6013      	str	r3, [r2, #0]
}
 8008084:	bf00      	nop
 8008086:	3710      	adds	r7, #16
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}
 800808c:	f8de3f23 	.word	0xf8de3f23

08008090 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b0a6      	sub	sp, #152	@ 0x98
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8008098:	2301      	movs	r3, #1
 800809a:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 800809e:	2301      	movs	r3, #1
 80080a0:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80080a4:	2300      	movs	r3, #0
 80080a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80080a8:	2300      	movs	r3, #0
 80080aa:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80080ae:	2301      	movs	r3, #1
 80080b0:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80080b4:	2300      	movs	r3, #0
 80080b6:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80080ba:	2301      	movs	r3, #1
 80080bc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 80080c0:	2301      	movs	r3, #1
 80080c2:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80080c6:	2300      	movs	r3, #0
 80080c8:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80080cc:	2300      	movs	r3, #0
 80080ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80080d2:	2300      	movs	r3, #0
 80080d4:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80080d6:	2300      	movs	r3, #0
 80080d8:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80080dc:	2300      	movs	r3, #0
 80080de:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80080e0:	2300      	movs	r3, #0
 80080e2:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80080e6:	2300      	movs	r3, #0
 80080e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80080ec:	2300      	movs	r3, #0
 80080ee:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80080f2:	2300      	movs	r3, #0
 80080f4:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80080f8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80080fc:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80080fe:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008102:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8008104:	2300      	movs	r3, #0
 8008106:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800810a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800810e:	4619      	mov	r1, r3
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f7ff fe7f 	bl	8007e14 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8008116:	2301      	movs	r3, #1
 8008118:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800811a:	2301      	movs	r3, #1
 800811c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800811e:	2301      	movs	r3, #1
 8008120:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8008124:	2301      	movs	r3, #1
 8008126:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8008128:	2300      	movs	r3, #0
 800812a:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800812c:	2300      	movs	r3, #0
 800812e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8008132:	2300      	movs	r3, #0
 8008134:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8008138:	2300      	movs	r3, #0
 800813a:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800813c:	2301      	movs	r3, #1
 800813e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8008142:	2301      	movs	r3, #1
 8008144:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8008146:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800814a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800814c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8008150:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8008152:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008156:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8008158:	2301      	movs	r3, #1
 800815a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800815e:	2300      	movs	r3, #0
 8008160:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8008162:	2300      	movs	r3, #0
 8008164:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8008166:	f107 0308 	add.w	r3, r7, #8
 800816a:	4619      	mov	r1, r3
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f7ff ff05 	bl	8007f7c <ETH_SetDMAConfig>
}
 8008172:	bf00      	nop
 8008174:	3798      	adds	r7, #152	@ 0x98
 8008176:	46bd      	mov	sp, r7
 8008178:	bd80      	pop	{r7, pc}
	...

0800817c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800817c:	b480      	push	{r7}
 800817e:	b087      	sub	sp, #28
 8008180:	af00      	add	r7, sp, #0
 8008182:	60f8      	str	r0, [r7, #12]
 8008184:	60b9      	str	r1, [r7, #8]
 8008186:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	3305      	adds	r3, #5
 800818c:	781b      	ldrb	r3, [r3, #0]
 800818e:	021b      	lsls	r3, r3, #8
 8008190:	687a      	ldr	r2, [r7, #4]
 8008192:	3204      	adds	r2, #4
 8008194:	7812      	ldrb	r2, [r2, #0]
 8008196:	4313      	orrs	r3, r2
 8008198:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800819a:	68ba      	ldr	r2, [r7, #8]
 800819c:	4b11      	ldr	r3, [pc, #68]	@ (80081e4 <ETH_MACAddressConfig+0x68>)
 800819e:	4413      	add	r3, r2
 80081a0:	461a      	mov	r2, r3
 80081a2:	697b      	ldr	r3, [r7, #20]
 80081a4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	3303      	adds	r3, #3
 80081aa:	781b      	ldrb	r3, [r3, #0]
 80081ac:	061a      	lsls	r2, r3, #24
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	3302      	adds	r3, #2
 80081b2:	781b      	ldrb	r3, [r3, #0]
 80081b4:	041b      	lsls	r3, r3, #16
 80081b6:	431a      	orrs	r2, r3
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	3301      	adds	r3, #1
 80081bc:	781b      	ldrb	r3, [r3, #0]
 80081be:	021b      	lsls	r3, r3, #8
 80081c0:	4313      	orrs	r3, r2
 80081c2:	687a      	ldr	r2, [r7, #4]
 80081c4:	7812      	ldrb	r2, [r2, #0]
 80081c6:	4313      	orrs	r3, r2
 80081c8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80081ca:	68ba      	ldr	r2, [r7, #8]
 80081cc:	4b06      	ldr	r3, [pc, #24]	@ (80081e8 <ETH_MACAddressConfig+0x6c>)
 80081ce:	4413      	add	r3, r2
 80081d0:	461a      	mov	r2, r3
 80081d2:	697b      	ldr	r3, [r7, #20]
 80081d4:	6013      	str	r3, [r2, #0]
}
 80081d6:	bf00      	nop
 80081d8:	371c      	adds	r7, #28
 80081da:	46bd      	mov	sp, r7
 80081dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e0:	4770      	bx	lr
 80081e2:	bf00      	nop
 80081e4:	40028040 	.word	0x40028040
 80081e8:	40028044 	.word	0x40028044

080081ec <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80081ec:	b480      	push	{r7}
 80081ee:	b085      	sub	sp, #20
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80081f4:	2300      	movs	r3, #0
 80081f6:	60fb      	str	r3, [r7, #12]
 80081f8:	e03e      	b.n	8008278 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	68d9      	ldr	r1, [r3, #12]
 80081fe:	68fa      	ldr	r2, [r7, #12]
 8008200:	4613      	mov	r3, r2
 8008202:	009b      	lsls	r3, r3, #2
 8008204:	4413      	add	r3, r2
 8008206:	00db      	lsls	r3, r3, #3
 8008208:	440b      	add	r3, r1
 800820a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	2200      	movs	r2, #0
 8008210:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	2200      	movs	r2, #0
 8008216:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	2200      	movs	r2, #0
 800821c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	2200      	movs	r2, #0
 8008222:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8008224:	68b9      	ldr	r1, [r7, #8]
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	68fa      	ldr	r2, [r7, #12]
 800822a:	3206      	adds	r2, #6
 800822c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	2b02      	cmp	r3, #2
 8008240:	d80c      	bhi.n	800825c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	68d9      	ldr	r1, [r3, #12]
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	1c5a      	adds	r2, r3, #1
 800824a:	4613      	mov	r3, r2
 800824c:	009b      	lsls	r3, r3, #2
 800824e:	4413      	add	r3, r2
 8008250:	00db      	lsls	r3, r3, #3
 8008252:	440b      	add	r3, r1
 8008254:	461a      	mov	r2, r3
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	60da      	str	r2, [r3, #12]
 800825a:	e004      	b.n	8008266 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	68db      	ldr	r3, [r3, #12]
 8008260:	461a      	mov	r2, r3
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	3301      	adds	r3, #1
 8008276:	60fb      	str	r3, [r7, #12]
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	2b03      	cmp	r3, #3
 800827c:	d9bd      	bls.n	80081fa <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2200      	movs	r2, #0
 8008282:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	68da      	ldr	r2, [r3, #12]
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008290:	611a      	str	r2, [r3, #16]
}
 8008292:	bf00      	nop
 8008294:	3714      	adds	r7, #20
 8008296:	46bd      	mov	sp, r7
 8008298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829c:	4770      	bx	lr

0800829e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800829e:	b480      	push	{r7}
 80082a0:	b085      	sub	sp, #20
 80082a2:	af00      	add	r7, sp, #0
 80082a4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80082a6:	2300      	movs	r3, #0
 80082a8:	60fb      	str	r3, [r7, #12]
 80082aa:	e048      	b.n	800833e <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6919      	ldr	r1, [r3, #16]
 80082b0:	68fa      	ldr	r2, [r7, #12]
 80082b2:	4613      	mov	r3, r2
 80082b4:	009b      	lsls	r3, r3, #2
 80082b6:	4413      	add	r3, r2
 80082b8:	00db      	lsls	r3, r3, #3
 80082ba:	440b      	add	r3, r1
 80082bc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	2200      	movs	r2, #0
 80082c2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	2200      	movs	r2, #0
 80082c8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	2200      	movs	r2, #0
 80082ce:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	2200      	movs	r2, #0
 80082d4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	2200      	movs	r2, #0
 80082da:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	2200      	movs	r2, #0
 80082e0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80082e8:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	695b      	ldr	r3, [r3, #20]
 80082ee:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80082f2:	68bb      	ldr	r3, [r7, #8]
 80082f4:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	685b      	ldr	r3, [r3, #4]
 80082fa:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80082fe:	68bb      	ldr	r3, [r7, #8]
 8008300:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8008302:	68b9      	ldr	r1, [r7, #8]
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	68fa      	ldr	r2, [r7, #12]
 8008308:	3212      	adds	r2, #18
 800830a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	2b02      	cmp	r3, #2
 8008312:	d80c      	bhi.n	800832e <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6919      	ldr	r1, [r3, #16]
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	1c5a      	adds	r2, r3, #1
 800831c:	4613      	mov	r3, r2
 800831e:	009b      	lsls	r3, r3, #2
 8008320:	4413      	add	r3, r2
 8008322:	00db      	lsls	r3, r3, #3
 8008324:	440b      	add	r3, r1
 8008326:	461a      	mov	r2, r3
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	60da      	str	r2, [r3, #12]
 800832c:	e004      	b.n	8008338 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	691b      	ldr	r3, [r3, #16]
 8008332:	461a      	mov	r2, r3
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	3301      	adds	r3, #1
 800833c:	60fb      	str	r3, [r7, #12]
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	2b03      	cmp	r3, #3
 8008342:	d9b3      	bls.n	80082ac <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2200      	movs	r2, #0
 8008348:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2200      	movs	r2, #0
 800834e:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2200      	movs	r2, #0
 8008354:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2200      	movs	r2, #0
 800835a:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2200      	movs	r2, #0
 8008360:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	691a      	ldr	r2, [r3, #16]
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800836e:	60da      	str	r2, [r3, #12]
}
 8008370:	bf00      	nop
 8008372:	3714      	adds	r7, #20
 8008374:	46bd      	mov	sp, r7
 8008376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837a:	4770      	bx	lr

0800837c <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 800837c:	b480      	push	{r7}
 800837e:	b091      	sub	sp, #68	@ 0x44
 8008380:	af00      	add	r7, sp, #0
 8008382:	60f8      	str	r0, [r7, #12]
 8008384:	60b9      	str	r1, [r7, #8]
 8008386:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	3318      	adds	r3, #24
 800838c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800838e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008390:	691b      	ldr	r3, [r3, #16]
 8008392:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8008394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008396:	691b      	ldr	r3, [r3, #16]
 8008398:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 800839a:	2300      	movs	r3, #0
 800839c:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800839e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083a0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80083a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083a6:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	689b      	ldr	r3, [r3, #8]
 80083ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 80083ae:	2300      	movs	r3, #0
 80083b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80083b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80083ba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80083be:	d007      	beq.n	80083d0 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80083c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80083c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80083c4:	3304      	adds	r3, #4
 80083c6:	009b      	lsls	r3, r3, #2
 80083c8:	4413      	add	r3, r2
 80083ca:	685b      	ldr	r3, [r3, #4]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d001      	beq.n	80083d4 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80083d0:	2302      	movs	r3, #2
 80083d2:	e115      	b.n	8008600 <ETH_Prepare_Tx_Descriptors+0x284>
  }


  descnbr += 1U;
 80083d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083d6:	3301      	adds	r3, #1
 80083d8:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80083da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	461a      	mov	r2, r3
 80083e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083e2:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80083e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083e6:	685b      	ldr	r3, [r3, #4]
 80083e8:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 80083ec:	f023 031f 	bic.w	r3, r3, #31
 80083f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80083f2:	6852      	ldr	r2, [r2, #4]
 80083f4:	431a      	orrs	r2, r3
 80083f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083f8:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f003 0301 	and.w	r3, r3, #1
 8008402:	2b00      	cmp	r3, #0
 8008404:	d008      	beq.n	8008418 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8008406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	695b      	ldr	r3, [r3, #20]
 8008412:	431a      	orrs	r2, r3
 8008414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008416:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f003 0320 	and.w	r3, r3, #32
 8008420:	2b00      	cmp	r3, #0
 8008422:	d008      	beq.n	8008436 <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8008424:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	691b      	ldr	r3, [r3, #16]
 8008430:	431a      	orrs	r2, r3
 8008432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008434:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f003 0304 	and.w	r3, r3, #4
 800843e:	2b00      	cmp	r3, #0
 8008440:	d005      	beq.n	800844e <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8008442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800844a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800844c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800844e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008458:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 800845a:	e084      	b.n	8008566 <ETH_Prepare_Tx_Descriptors+0x1ea>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800845c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8008464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008466:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d006      	beq.n	800847c <ETH_Prepare_Tx_Descriptors+0x100>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800846e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008478:	601a      	str	r2, [r3, #0]
 800847a:	e005      	b.n	8008488 <ETH_Prepare_Tx_Descriptors+0x10c>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800847c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8008484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008486:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8008488:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800848a:	3301      	adds	r3, #1
 800848c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800848e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008490:	2b03      	cmp	r3, #3
 8008492:	d902      	bls.n	800849a <ETH_Prepare_Tx_Descriptors+0x11e>
 8008494:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008496:	3b04      	subs	r3, #4
 8008498:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800849a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800849c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800849e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084a2:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80084a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80084ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80084b0:	d007      	beq.n	80084c2 <ETH_Prepare_Tx_Descriptors+0x146>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80084b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80084b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084b6:	3304      	adds	r3, #4
 80084b8:	009b      	lsls	r3, r3, #2
 80084ba:	4413      	add	r3, r2
 80084bc:	685b      	ldr	r3, [r3, #4]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d029      	beq.n	8008516 <ETH_Prepare_Tx_Descriptors+0x19a>
    {
      descidx = firstdescidx;
 80084c2:	6a3b      	ldr	r3, [r7, #32]
 80084c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80084c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084c8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80084ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084ce:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80084d0:	2300      	movs	r3, #0
 80084d2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80084d4:	e019      	b.n	800850a <ETH_Prepare_Tx_Descriptors+0x18e>
  __ASM volatile ("dmb 0xF":::"memory");
 80084d6:	f3bf 8f5f 	dmb	sy
}
 80084da:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80084dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80084e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084e6:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80084e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084ea:	3301      	adds	r3, #1
 80084ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80084ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084f0:	2b03      	cmp	r3, #3
 80084f2:	d902      	bls.n	80084fa <ETH_Prepare_Tx_Descriptors+0x17e>
 80084f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084f6:	3b04      	subs	r3, #4
 80084f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80084fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084fc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80084fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008502:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8008504:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008506:	3301      	adds	r3, #1
 8008508:	63bb      	str	r3, [r7, #56]	@ 0x38
 800850a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800850c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800850e:	429a      	cmp	r2, r3
 8008510:	d3e1      	bcc.n	80084d6 <ETH_Prepare_Tx_Descriptors+0x15a>
      }

      return HAL_ETH_ERROR_BUSY;
 8008512:	2302      	movs	r3, #2
 8008514:	e074      	b.n	8008600 <ETH_Prepare_Tx_Descriptors+0x284>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8008516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800851e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008520:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 8008522:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008524:	3301      	adds	r3, #1
 8008526:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8008528:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800852a:	689b      	ldr	r3, [r3, #8]
 800852c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800852e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	461a      	mov	r2, r3
 8008534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008536:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8008538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800853a:	685b      	ldr	r3, [r3, #4]
 800853c:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 8008540:	f023 031f 	bic.w	r3, r3, #31
 8008544:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008546:	6852      	ldr	r2, [r2, #4]
 8008548:	431a      	orrs	r2, r3
 800854a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800854c:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 800854e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008550:	3301      	adds	r3, #1
 8008552:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8008554:	f3bf 8f5f 	dmb	sy
}
 8008558:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800855a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8008562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008564:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8008566:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008568:	689b      	ldr	r3, [r3, #8]
 800856a:	2b00      	cmp	r3, #0
 800856c:	f47f af76 	bne.w	800845c <ETH_Prepare_Tx_Descriptors+0xe0>
  }

  if (ItMode != ((uint32_t)RESET))
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d006      	beq.n	8008584 <ETH_Prepare_Tx_Descriptors+0x208>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8008576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800857e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008580:	601a      	str	r2, [r3, #0]
 8008582:	e005      	b.n	8008590 <ETH_Prepare_Tx_Descriptors+0x214>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8008584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800858c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800858e:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8008590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800859a:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 800859c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800859e:	6a3a      	ldr	r2, [r7, #32]
 80085a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085a4:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 80085a6:	f3bf 8f5f 	dmb	sy
}
 80085aa:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80085ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80085b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085b6:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80085b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085ba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80085bc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80085be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085c0:	3304      	adds	r3, #4
 80085c2:	009b      	lsls	r3, r3, #2
 80085c4:	440b      	add	r3, r1
 80085c6:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80085c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085ca:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80085cc:	611a      	str	r2, [r3, #16]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80085ce:	f3ef 8310 	mrs	r3, PRIMASK
 80085d2:	613b      	str	r3, [r7, #16]
  return(result);
 80085d4:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 80085d6:	61fb      	str	r3, [r7, #28]
 80085d8:	2301      	movs	r3, #1
 80085da:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085dc:	697b      	ldr	r3, [r7, #20]
 80085de:	f383 8810 	msr	PRIMASK, r3
}
 80085e2:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80085e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085e6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80085e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085ea:	4413      	add	r3, r2
 80085ec:	1c5a      	adds	r2, r3, #1
 80085ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085f0:	629a      	str	r2, [r3, #40]	@ 0x28
 80085f2:	69fb      	ldr	r3, [r7, #28]
 80085f4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085f6:	69bb      	ldr	r3, [r7, #24]
 80085f8:	f383 8810 	msr	PRIMASK, r3
}
 80085fc:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80085fe:	2300      	movs	r3, #0
}
 8008600:	4618      	mov	r0, r3
 8008602:	3744      	adds	r7, #68	@ 0x44
 8008604:	46bd      	mov	sp, r7
 8008606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860a:	4770      	bx	lr

0800860c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800860c:	b480      	push	{r7}
 800860e:	b089      	sub	sp, #36	@ 0x24
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
 8008614:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008616:	2300      	movs	r3, #0
 8008618:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800861a:	2300      	movs	r3, #0
 800861c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800861e:	2300      	movs	r3, #0
 8008620:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008622:	2300      	movs	r3, #0
 8008624:	61fb      	str	r3, [r7, #28]
 8008626:	e16b      	b.n	8008900 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008628:	2201      	movs	r2, #1
 800862a:	69fb      	ldr	r3, [r7, #28]
 800862c:	fa02 f303 	lsl.w	r3, r2, r3
 8008630:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	697a      	ldr	r2, [r7, #20]
 8008638:	4013      	ands	r3, r2
 800863a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800863c:	693a      	ldr	r2, [r7, #16]
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	429a      	cmp	r2, r3
 8008642:	f040 815a 	bne.w	80088fa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	685b      	ldr	r3, [r3, #4]
 800864a:	f003 0303 	and.w	r3, r3, #3
 800864e:	2b01      	cmp	r3, #1
 8008650:	d005      	beq.n	800865e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	685b      	ldr	r3, [r3, #4]
 8008656:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800865a:	2b02      	cmp	r3, #2
 800865c:	d130      	bne.n	80086c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	689b      	ldr	r3, [r3, #8]
 8008662:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008664:	69fb      	ldr	r3, [r7, #28]
 8008666:	005b      	lsls	r3, r3, #1
 8008668:	2203      	movs	r2, #3
 800866a:	fa02 f303 	lsl.w	r3, r2, r3
 800866e:	43db      	mvns	r3, r3
 8008670:	69ba      	ldr	r2, [r7, #24]
 8008672:	4013      	ands	r3, r2
 8008674:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	68da      	ldr	r2, [r3, #12]
 800867a:	69fb      	ldr	r3, [r7, #28]
 800867c:	005b      	lsls	r3, r3, #1
 800867e:	fa02 f303 	lsl.w	r3, r2, r3
 8008682:	69ba      	ldr	r2, [r7, #24]
 8008684:	4313      	orrs	r3, r2
 8008686:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	69ba      	ldr	r2, [r7, #24]
 800868c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	685b      	ldr	r3, [r3, #4]
 8008692:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008694:	2201      	movs	r2, #1
 8008696:	69fb      	ldr	r3, [r7, #28]
 8008698:	fa02 f303 	lsl.w	r3, r2, r3
 800869c:	43db      	mvns	r3, r3
 800869e:	69ba      	ldr	r2, [r7, #24]
 80086a0:	4013      	ands	r3, r2
 80086a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	685b      	ldr	r3, [r3, #4]
 80086a8:	091b      	lsrs	r3, r3, #4
 80086aa:	f003 0201 	and.w	r2, r3, #1
 80086ae:	69fb      	ldr	r3, [r7, #28]
 80086b0:	fa02 f303 	lsl.w	r3, r2, r3
 80086b4:	69ba      	ldr	r2, [r7, #24]
 80086b6:	4313      	orrs	r3, r2
 80086b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	69ba      	ldr	r2, [r7, #24]
 80086be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	685b      	ldr	r3, [r3, #4]
 80086c4:	f003 0303 	and.w	r3, r3, #3
 80086c8:	2b03      	cmp	r3, #3
 80086ca:	d017      	beq.n	80086fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	68db      	ldr	r3, [r3, #12]
 80086d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80086d2:	69fb      	ldr	r3, [r7, #28]
 80086d4:	005b      	lsls	r3, r3, #1
 80086d6:	2203      	movs	r2, #3
 80086d8:	fa02 f303 	lsl.w	r3, r2, r3
 80086dc:	43db      	mvns	r3, r3
 80086de:	69ba      	ldr	r2, [r7, #24]
 80086e0:	4013      	ands	r3, r2
 80086e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	689a      	ldr	r2, [r3, #8]
 80086e8:	69fb      	ldr	r3, [r7, #28]
 80086ea:	005b      	lsls	r3, r3, #1
 80086ec:	fa02 f303 	lsl.w	r3, r2, r3
 80086f0:	69ba      	ldr	r2, [r7, #24]
 80086f2:	4313      	orrs	r3, r2
 80086f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	69ba      	ldr	r2, [r7, #24]
 80086fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	685b      	ldr	r3, [r3, #4]
 8008700:	f003 0303 	and.w	r3, r3, #3
 8008704:	2b02      	cmp	r3, #2
 8008706:	d123      	bne.n	8008750 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008708:	69fb      	ldr	r3, [r7, #28]
 800870a:	08da      	lsrs	r2, r3, #3
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	3208      	adds	r2, #8
 8008710:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008714:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008716:	69fb      	ldr	r3, [r7, #28]
 8008718:	f003 0307 	and.w	r3, r3, #7
 800871c:	009b      	lsls	r3, r3, #2
 800871e:	220f      	movs	r2, #15
 8008720:	fa02 f303 	lsl.w	r3, r2, r3
 8008724:	43db      	mvns	r3, r3
 8008726:	69ba      	ldr	r2, [r7, #24]
 8008728:	4013      	ands	r3, r2
 800872a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	691a      	ldr	r2, [r3, #16]
 8008730:	69fb      	ldr	r3, [r7, #28]
 8008732:	f003 0307 	and.w	r3, r3, #7
 8008736:	009b      	lsls	r3, r3, #2
 8008738:	fa02 f303 	lsl.w	r3, r2, r3
 800873c:	69ba      	ldr	r2, [r7, #24]
 800873e:	4313      	orrs	r3, r2
 8008740:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008742:	69fb      	ldr	r3, [r7, #28]
 8008744:	08da      	lsrs	r2, r3, #3
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	3208      	adds	r2, #8
 800874a:	69b9      	ldr	r1, [r7, #24]
 800874c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008756:	69fb      	ldr	r3, [r7, #28]
 8008758:	005b      	lsls	r3, r3, #1
 800875a:	2203      	movs	r2, #3
 800875c:	fa02 f303 	lsl.w	r3, r2, r3
 8008760:	43db      	mvns	r3, r3
 8008762:	69ba      	ldr	r2, [r7, #24]
 8008764:	4013      	ands	r3, r2
 8008766:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	685b      	ldr	r3, [r3, #4]
 800876c:	f003 0203 	and.w	r2, r3, #3
 8008770:	69fb      	ldr	r3, [r7, #28]
 8008772:	005b      	lsls	r3, r3, #1
 8008774:	fa02 f303 	lsl.w	r3, r2, r3
 8008778:	69ba      	ldr	r2, [r7, #24]
 800877a:	4313      	orrs	r3, r2
 800877c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	69ba      	ldr	r2, [r7, #24]
 8008782:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	685b      	ldr	r3, [r3, #4]
 8008788:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800878c:	2b00      	cmp	r3, #0
 800878e:	f000 80b4 	beq.w	80088fa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008792:	2300      	movs	r3, #0
 8008794:	60fb      	str	r3, [r7, #12]
 8008796:	4b60      	ldr	r3, [pc, #384]	@ (8008918 <HAL_GPIO_Init+0x30c>)
 8008798:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800879a:	4a5f      	ldr	r2, [pc, #380]	@ (8008918 <HAL_GPIO_Init+0x30c>)
 800879c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80087a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80087a2:	4b5d      	ldr	r3, [pc, #372]	@ (8008918 <HAL_GPIO_Init+0x30c>)
 80087a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80087aa:	60fb      	str	r3, [r7, #12]
 80087ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80087ae:	4a5b      	ldr	r2, [pc, #364]	@ (800891c <HAL_GPIO_Init+0x310>)
 80087b0:	69fb      	ldr	r3, [r7, #28]
 80087b2:	089b      	lsrs	r3, r3, #2
 80087b4:	3302      	adds	r3, #2
 80087b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80087ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80087bc:	69fb      	ldr	r3, [r7, #28]
 80087be:	f003 0303 	and.w	r3, r3, #3
 80087c2:	009b      	lsls	r3, r3, #2
 80087c4:	220f      	movs	r2, #15
 80087c6:	fa02 f303 	lsl.w	r3, r2, r3
 80087ca:	43db      	mvns	r3, r3
 80087cc:	69ba      	ldr	r2, [r7, #24]
 80087ce:	4013      	ands	r3, r2
 80087d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	4a52      	ldr	r2, [pc, #328]	@ (8008920 <HAL_GPIO_Init+0x314>)
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d02b      	beq.n	8008832 <HAL_GPIO_Init+0x226>
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	4a51      	ldr	r2, [pc, #324]	@ (8008924 <HAL_GPIO_Init+0x318>)
 80087de:	4293      	cmp	r3, r2
 80087e0:	d025      	beq.n	800882e <HAL_GPIO_Init+0x222>
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	4a50      	ldr	r2, [pc, #320]	@ (8008928 <HAL_GPIO_Init+0x31c>)
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d01f      	beq.n	800882a <HAL_GPIO_Init+0x21e>
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	4a4f      	ldr	r2, [pc, #316]	@ (800892c <HAL_GPIO_Init+0x320>)
 80087ee:	4293      	cmp	r3, r2
 80087f0:	d019      	beq.n	8008826 <HAL_GPIO_Init+0x21a>
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	4a4e      	ldr	r2, [pc, #312]	@ (8008930 <HAL_GPIO_Init+0x324>)
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d013      	beq.n	8008822 <HAL_GPIO_Init+0x216>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	4a4d      	ldr	r2, [pc, #308]	@ (8008934 <HAL_GPIO_Init+0x328>)
 80087fe:	4293      	cmp	r3, r2
 8008800:	d00d      	beq.n	800881e <HAL_GPIO_Init+0x212>
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	4a4c      	ldr	r2, [pc, #304]	@ (8008938 <HAL_GPIO_Init+0x32c>)
 8008806:	4293      	cmp	r3, r2
 8008808:	d007      	beq.n	800881a <HAL_GPIO_Init+0x20e>
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	4a4b      	ldr	r2, [pc, #300]	@ (800893c <HAL_GPIO_Init+0x330>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d101      	bne.n	8008816 <HAL_GPIO_Init+0x20a>
 8008812:	2307      	movs	r3, #7
 8008814:	e00e      	b.n	8008834 <HAL_GPIO_Init+0x228>
 8008816:	2308      	movs	r3, #8
 8008818:	e00c      	b.n	8008834 <HAL_GPIO_Init+0x228>
 800881a:	2306      	movs	r3, #6
 800881c:	e00a      	b.n	8008834 <HAL_GPIO_Init+0x228>
 800881e:	2305      	movs	r3, #5
 8008820:	e008      	b.n	8008834 <HAL_GPIO_Init+0x228>
 8008822:	2304      	movs	r3, #4
 8008824:	e006      	b.n	8008834 <HAL_GPIO_Init+0x228>
 8008826:	2303      	movs	r3, #3
 8008828:	e004      	b.n	8008834 <HAL_GPIO_Init+0x228>
 800882a:	2302      	movs	r3, #2
 800882c:	e002      	b.n	8008834 <HAL_GPIO_Init+0x228>
 800882e:	2301      	movs	r3, #1
 8008830:	e000      	b.n	8008834 <HAL_GPIO_Init+0x228>
 8008832:	2300      	movs	r3, #0
 8008834:	69fa      	ldr	r2, [r7, #28]
 8008836:	f002 0203 	and.w	r2, r2, #3
 800883a:	0092      	lsls	r2, r2, #2
 800883c:	4093      	lsls	r3, r2
 800883e:	69ba      	ldr	r2, [r7, #24]
 8008840:	4313      	orrs	r3, r2
 8008842:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008844:	4935      	ldr	r1, [pc, #212]	@ (800891c <HAL_GPIO_Init+0x310>)
 8008846:	69fb      	ldr	r3, [r7, #28]
 8008848:	089b      	lsrs	r3, r3, #2
 800884a:	3302      	adds	r3, #2
 800884c:	69ba      	ldr	r2, [r7, #24]
 800884e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008852:	4b3b      	ldr	r3, [pc, #236]	@ (8008940 <HAL_GPIO_Init+0x334>)
 8008854:	689b      	ldr	r3, [r3, #8]
 8008856:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008858:	693b      	ldr	r3, [r7, #16]
 800885a:	43db      	mvns	r3, r3
 800885c:	69ba      	ldr	r2, [r7, #24]
 800885e:	4013      	ands	r3, r2
 8008860:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	685b      	ldr	r3, [r3, #4]
 8008866:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800886a:	2b00      	cmp	r3, #0
 800886c:	d003      	beq.n	8008876 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800886e:	69ba      	ldr	r2, [r7, #24]
 8008870:	693b      	ldr	r3, [r7, #16]
 8008872:	4313      	orrs	r3, r2
 8008874:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008876:	4a32      	ldr	r2, [pc, #200]	@ (8008940 <HAL_GPIO_Init+0x334>)
 8008878:	69bb      	ldr	r3, [r7, #24]
 800887a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800887c:	4b30      	ldr	r3, [pc, #192]	@ (8008940 <HAL_GPIO_Init+0x334>)
 800887e:	68db      	ldr	r3, [r3, #12]
 8008880:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008882:	693b      	ldr	r3, [r7, #16]
 8008884:	43db      	mvns	r3, r3
 8008886:	69ba      	ldr	r2, [r7, #24]
 8008888:	4013      	ands	r3, r2
 800888a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	685b      	ldr	r3, [r3, #4]
 8008890:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008894:	2b00      	cmp	r3, #0
 8008896:	d003      	beq.n	80088a0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8008898:	69ba      	ldr	r2, [r7, #24]
 800889a:	693b      	ldr	r3, [r7, #16]
 800889c:	4313      	orrs	r3, r2
 800889e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80088a0:	4a27      	ldr	r2, [pc, #156]	@ (8008940 <HAL_GPIO_Init+0x334>)
 80088a2:	69bb      	ldr	r3, [r7, #24]
 80088a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80088a6:	4b26      	ldr	r3, [pc, #152]	@ (8008940 <HAL_GPIO_Init+0x334>)
 80088a8:	685b      	ldr	r3, [r3, #4]
 80088aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80088ac:	693b      	ldr	r3, [r7, #16]
 80088ae:	43db      	mvns	r3, r3
 80088b0:	69ba      	ldr	r2, [r7, #24]
 80088b2:	4013      	ands	r3, r2
 80088b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	685b      	ldr	r3, [r3, #4]
 80088ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d003      	beq.n	80088ca <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80088c2:	69ba      	ldr	r2, [r7, #24]
 80088c4:	693b      	ldr	r3, [r7, #16]
 80088c6:	4313      	orrs	r3, r2
 80088c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80088ca:	4a1d      	ldr	r2, [pc, #116]	@ (8008940 <HAL_GPIO_Init+0x334>)
 80088cc:	69bb      	ldr	r3, [r7, #24]
 80088ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80088d0:	4b1b      	ldr	r3, [pc, #108]	@ (8008940 <HAL_GPIO_Init+0x334>)
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80088d6:	693b      	ldr	r3, [r7, #16]
 80088d8:	43db      	mvns	r3, r3
 80088da:	69ba      	ldr	r2, [r7, #24]
 80088dc:	4013      	ands	r3, r2
 80088de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	685b      	ldr	r3, [r3, #4]
 80088e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d003      	beq.n	80088f4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80088ec:	69ba      	ldr	r2, [r7, #24]
 80088ee:	693b      	ldr	r3, [r7, #16]
 80088f0:	4313      	orrs	r3, r2
 80088f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80088f4:	4a12      	ldr	r2, [pc, #72]	@ (8008940 <HAL_GPIO_Init+0x334>)
 80088f6:	69bb      	ldr	r3, [r7, #24]
 80088f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80088fa:	69fb      	ldr	r3, [r7, #28]
 80088fc:	3301      	adds	r3, #1
 80088fe:	61fb      	str	r3, [r7, #28]
 8008900:	69fb      	ldr	r3, [r7, #28]
 8008902:	2b0f      	cmp	r3, #15
 8008904:	f67f ae90 	bls.w	8008628 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008908:	bf00      	nop
 800890a:	bf00      	nop
 800890c:	3724      	adds	r7, #36	@ 0x24
 800890e:	46bd      	mov	sp, r7
 8008910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008914:	4770      	bx	lr
 8008916:	bf00      	nop
 8008918:	40023800 	.word	0x40023800
 800891c:	40013800 	.word	0x40013800
 8008920:	40020000 	.word	0x40020000
 8008924:	40020400 	.word	0x40020400
 8008928:	40020800 	.word	0x40020800
 800892c:	40020c00 	.word	0x40020c00
 8008930:	40021000 	.word	0x40021000
 8008934:	40021400 	.word	0x40021400
 8008938:	40021800 	.word	0x40021800
 800893c:	40021c00 	.word	0x40021c00
 8008940:	40013c00 	.word	0x40013c00

08008944 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008944:	b480      	push	{r7}
 8008946:	b083      	sub	sp, #12
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
 800894c:	460b      	mov	r3, r1
 800894e:	807b      	strh	r3, [r7, #2]
 8008950:	4613      	mov	r3, r2
 8008952:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008954:	787b      	ldrb	r3, [r7, #1]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d003      	beq.n	8008962 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800895a:	887a      	ldrh	r2, [r7, #2]
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008960:	e003      	b.n	800896a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008962:	887b      	ldrh	r3, [r7, #2]
 8008964:	041a      	lsls	r2, r3, #16
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	619a      	str	r2, [r3, #24]
}
 800896a:	bf00      	nop
 800896c:	370c      	adds	r7, #12
 800896e:	46bd      	mov	sp, r7
 8008970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008974:	4770      	bx	lr

08008976 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008976:	b480      	push	{r7}
 8008978:	b085      	sub	sp, #20
 800897a:	af00      	add	r7, sp, #0
 800897c:	6078      	str	r0, [r7, #4]
 800897e:	460b      	mov	r3, r1
 8008980:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	695b      	ldr	r3, [r3, #20]
 8008986:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008988:	887a      	ldrh	r2, [r7, #2]
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	4013      	ands	r3, r2
 800898e:	041a      	lsls	r2, r3, #16
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	43d9      	mvns	r1, r3
 8008994:	887b      	ldrh	r3, [r7, #2]
 8008996:	400b      	ands	r3, r1
 8008998:	431a      	orrs	r2, r3
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	619a      	str	r2, [r3, #24]
}
 800899e:	bf00      	nop
 80089a0:	3714      	adds	r7, #20
 80089a2:	46bd      	mov	sp, r7
 80089a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a8:	4770      	bx	lr
	...

080089ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b084      	sub	sp, #16
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d101      	bne.n	80089be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80089ba:	2301      	movs	r3, #1
 80089bc:	e12b      	b.n	8008c16 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80089c4:	b2db      	uxtb	r3, r3
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d106      	bne.n	80089d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2200      	movs	r2, #0
 80089ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f7fd fb20 	bl	8006018 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2224      	movs	r2, #36	@ 0x24
 80089dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	681a      	ldr	r2, [r3, #0]
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f022 0201 	bic.w	r2, r2, #1
 80089ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	681a      	ldr	r2, [r3, #0]
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80089fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	681a      	ldr	r2, [r3, #0]
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008a0e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008a10:	f000 fe90 	bl	8009734 <HAL_RCC_GetPCLK1Freq>
 8008a14:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	685b      	ldr	r3, [r3, #4]
 8008a1a:	4a81      	ldr	r2, [pc, #516]	@ (8008c20 <HAL_I2C_Init+0x274>)
 8008a1c:	4293      	cmp	r3, r2
 8008a1e:	d807      	bhi.n	8008a30 <HAL_I2C_Init+0x84>
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	4a80      	ldr	r2, [pc, #512]	@ (8008c24 <HAL_I2C_Init+0x278>)
 8008a24:	4293      	cmp	r3, r2
 8008a26:	bf94      	ite	ls
 8008a28:	2301      	movls	r3, #1
 8008a2a:	2300      	movhi	r3, #0
 8008a2c:	b2db      	uxtb	r3, r3
 8008a2e:	e006      	b.n	8008a3e <HAL_I2C_Init+0x92>
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	4a7d      	ldr	r2, [pc, #500]	@ (8008c28 <HAL_I2C_Init+0x27c>)
 8008a34:	4293      	cmp	r3, r2
 8008a36:	bf94      	ite	ls
 8008a38:	2301      	movls	r3, #1
 8008a3a:	2300      	movhi	r3, #0
 8008a3c:	b2db      	uxtb	r3, r3
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d001      	beq.n	8008a46 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008a42:	2301      	movs	r3, #1
 8008a44:	e0e7      	b.n	8008c16 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	4a78      	ldr	r2, [pc, #480]	@ (8008c2c <HAL_I2C_Init+0x280>)
 8008a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8008a4e:	0c9b      	lsrs	r3, r3, #18
 8008a50:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	685b      	ldr	r3, [r3, #4]
 8008a58:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	68ba      	ldr	r2, [r7, #8]
 8008a62:	430a      	orrs	r2, r1
 8008a64:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	6a1b      	ldr	r3, [r3, #32]
 8008a6c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	685b      	ldr	r3, [r3, #4]
 8008a74:	4a6a      	ldr	r2, [pc, #424]	@ (8008c20 <HAL_I2C_Init+0x274>)
 8008a76:	4293      	cmp	r3, r2
 8008a78:	d802      	bhi.n	8008a80 <HAL_I2C_Init+0xd4>
 8008a7a:	68bb      	ldr	r3, [r7, #8]
 8008a7c:	3301      	adds	r3, #1
 8008a7e:	e009      	b.n	8008a94 <HAL_I2C_Init+0xe8>
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8008a86:	fb02 f303 	mul.w	r3, r2, r3
 8008a8a:	4a69      	ldr	r2, [pc, #420]	@ (8008c30 <HAL_I2C_Init+0x284>)
 8008a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8008a90:	099b      	lsrs	r3, r3, #6
 8008a92:	3301      	adds	r3, #1
 8008a94:	687a      	ldr	r2, [r7, #4]
 8008a96:	6812      	ldr	r2, [r2, #0]
 8008a98:	430b      	orrs	r3, r1
 8008a9a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	69db      	ldr	r3, [r3, #28]
 8008aa2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8008aa6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	685b      	ldr	r3, [r3, #4]
 8008aae:	495c      	ldr	r1, [pc, #368]	@ (8008c20 <HAL_I2C_Init+0x274>)
 8008ab0:	428b      	cmp	r3, r1
 8008ab2:	d819      	bhi.n	8008ae8 <HAL_I2C_Init+0x13c>
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	1e59      	subs	r1, r3, #1
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	685b      	ldr	r3, [r3, #4]
 8008abc:	005b      	lsls	r3, r3, #1
 8008abe:	fbb1 f3f3 	udiv	r3, r1, r3
 8008ac2:	1c59      	adds	r1, r3, #1
 8008ac4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8008ac8:	400b      	ands	r3, r1
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d00a      	beq.n	8008ae4 <HAL_I2C_Init+0x138>
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	1e59      	subs	r1, r3, #1
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	685b      	ldr	r3, [r3, #4]
 8008ad6:	005b      	lsls	r3, r3, #1
 8008ad8:	fbb1 f3f3 	udiv	r3, r1, r3
 8008adc:	3301      	adds	r3, #1
 8008ade:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008ae2:	e051      	b.n	8008b88 <HAL_I2C_Init+0x1dc>
 8008ae4:	2304      	movs	r3, #4
 8008ae6:	e04f      	b.n	8008b88 <HAL_I2C_Init+0x1dc>
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	689b      	ldr	r3, [r3, #8]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d111      	bne.n	8008b14 <HAL_I2C_Init+0x168>
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	1e58      	subs	r0, r3, #1
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	6859      	ldr	r1, [r3, #4]
 8008af8:	460b      	mov	r3, r1
 8008afa:	005b      	lsls	r3, r3, #1
 8008afc:	440b      	add	r3, r1
 8008afe:	fbb0 f3f3 	udiv	r3, r0, r3
 8008b02:	3301      	adds	r3, #1
 8008b04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	bf0c      	ite	eq
 8008b0c:	2301      	moveq	r3, #1
 8008b0e:	2300      	movne	r3, #0
 8008b10:	b2db      	uxtb	r3, r3
 8008b12:	e012      	b.n	8008b3a <HAL_I2C_Init+0x18e>
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	1e58      	subs	r0, r3, #1
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	6859      	ldr	r1, [r3, #4]
 8008b1c:	460b      	mov	r3, r1
 8008b1e:	009b      	lsls	r3, r3, #2
 8008b20:	440b      	add	r3, r1
 8008b22:	0099      	lsls	r1, r3, #2
 8008b24:	440b      	add	r3, r1
 8008b26:	fbb0 f3f3 	udiv	r3, r0, r3
 8008b2a:	3301      	adds	r3, #1
 8008b2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	bf0c      	ite	eq
 8008b34:	2301      	moveq	r3, #1
 8008b36:	2300      	movne	r3, #0
 8008b38:	b2db      	uxtb	r3, r3
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d001      	beq.n	8008b42 <HAL_I2C_Init+0x196>
 8008b3e:	2301      	movs	r3, #1
 8008b40:	e022      	b.n	8008b88 <HAL_I2C_Init+0x1dc>
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	689b      	ldr	r3, [r3, #8]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d10e      	bne.n	8008b68 <HAL_I2C_Init+0x1bc>
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	1e58      	subs	r0, r3, #1
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6859      	ldr	r1, [r3, #4]
 8008b52:	460b      	mov	r3, r1
 8008b54:	005b      	lsls	r3, r3, #1
 8008b56:	440b      	add	r3, r1
 8008b58:	fbb0 f3f3 	udiv	r3, r0, r3
 8008b5c:	3301      	adds	r3, #1
 8008b5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008b62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008b66:	e00f      	b.n	8008b88 <HAL_I2C_Init+0x1dc>
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	1e58      	subs	r0, r3, #1
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6859      	ldr	r1, [r3, #4]
 8008b70:	460b      	mov	r3, r1
 8008b72:	009b      	lsls	r3, r3, #2
 8008b74:	440b      	add	r3, r1
 8008b76:	0099      	lsls	r1, r3, #2
 8008b78:	440b      	add	r3, r1
 8008b7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8008b7e:	3301      	adds	r3, #1
 8008b80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008b84:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008b88:	6879      	ldr	r1, [r7, #4]
 8008b8a:	6809      	ldr	r1, [r1, #0]
 8008b8c:	4313      	orrs	r3, r2
 8008b8e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	69da      	ldr	r2, [r3, #28]
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6a1b      	ldr	r3, [r3, #32]
 8008ba2:	431a      	orrs	r2, r3
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	430a      	orrs	r2, r1
 8008baa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	689b      	ldr	r3, [r3, #8]
 8008bb2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8008bb6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8008bba:	687a      	ldr	r2, [r7, #4]
 8008bbc:	6911      	ldr	r1, [r2, #16]
 8008bbe:	687a      	ldr	r2, [r7, #4]
 8008bc0:	68d2      	ldr	r2, [r2, #12]
 8008bc2:	4311      	orrs	r1, r2
 8008bc4:	687a      	ldr	r2, [r7, #4]
 8008bc6:	6812      	ldr	r2, [r2, #0]
 8008bc8:	430b      	orrs	r3, r1
 8008bca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	68db      	ldr	r3, [r3, #12]
 8008bd2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	695a      	ldr	r2, [r3, #20]
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	699b      	ldr	r3, [r3, #24]
 8008bde:	431a      	orrs	r2, r3
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	430a      	orrs	r2, r1
 8008be6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	681a      	ldr	r2, [r3, #0]
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	f042 0201 	orr.w	r2, r2, #1
 8008bf6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2220      	movs	r2, #32
 8008c02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2200      	movs	r2, #0
 8008c0a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2200      	movs	r2, #0
 8008c10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8008c14:	2300      	movs	r3, #0
}
 8008c16:	4618      	mov	r0, r3
 8008c18:	3710      	adds	r7, #16
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bd80      	pop	{r7, pc}
 8008c1e:	bf00      	nop
 8008c20:	000186a0 	.word	0x000186a0
 8008c24:	001e847f 	.word	0x001e847f
 8008c28:	003d08ff 	.word	0x003d08ff
 8008c2c:	431bde83 	.word	0x431bde83
 8008c30:	10624dd3 	.word	0x10624dd3

08008c34 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b086      	sub	sp, #24
 8008c38:	af02      	add	r7, sp, #8
 8008c3a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d101      	bne.n	8008c46 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008c42:	2301      	movs	r3, #1
 8008c44:	e101      	b.n	8008e4a <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8008c52:	b2db      	uxtb	r3, r3
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d106      	bne.n	8008c66 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f7fd fb7d 	bl	8006360 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2203      	movs	r2, #3
 8008c6a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8008c6e:	68bb      	ldr	r3, [r7, #8]
 8008c70:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008c74:	d102      	bne.n	8008c7c <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2200      	movs	r2, #0
 8008c7a:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	4618      	mov	r0, r3
 8008c82:	f002 f8a9 	bl	800add8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	6818      	ldr	r0, [r3, #0]
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	7c1a      	ldrb	r2, [r3, #16]
 8008c8e:	f88d 2000 	strb.w	r2, [sp]
 8008c92:	3304      	adds	r3, #4
 8008c94:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008c96:	f002 f83b 	bl	800ad10 <USB_CoreInit>
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d005      	beq.n	8008cac <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2202      	movs	r2, #2
 8008ca4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8008ca8:	2301      	movs	r3, #1
 8008caa:	e0ce      	b.n	8008e4a <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	2100      	movs	r1, #0
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	f002 f8a1 	bl	800adfa <USB_SetCurrentMode>
 8008cb8:	4603      	mov	r3, r0
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d005      	beq.n	8008cca <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2202      	movs	r2, #2
 8008cc2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8008cc6:	2301      	movs	r3, #1
 8008cc8:	e0bf      	b.n	8008e4a <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008cca:	2300      	movs	r3, #0
 8008ccc:	73fb      	strb	r3, [r7, #15]
 8008cce:	e04a      	b.n	8008d66 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008cd0:	7bfa      	ldrb	r2, [r7, #15]
 8008cd2:	6879      	ldr	r1, [r7, #4]
 8008cd4:	4613      	mov	r3, r2
 8008cd6:	00db      	lsls	r3, r3, #3
 8008cd8:	4413      	add	r3, r2
 8008cda:	009b      	lsls	r3, r3, #2
 8008cdc:	440b      	add	r3, r1
 8008cde:	3315      	adds	r3, #21
 8008ce0:	2201      	movs	r2, #1
 8008ce2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008ce4:	7bfa      	ldrb	r2, [r7, #15]
 8008ce6:	6879      	ldr	r1, [r7, #4]
 8008ce8:	4613      	mov	r3, r2
 8008cea:	00db      	lsls	r3, r3, #3
 8008cec:	4413      	add	r3, r2
 8008cee:	009b      	lsls	r3, r3, #2
 8008cf0:	440b      	add	r3, r1
 8008cf2:	3314      	adds	r3, #20
 8008cf4:	7bfa      	ldrb	r2, [r7, #15]
 8008cf6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8008cf8:	7bfa      	ldrb	r2, [r7, #15]
 8008cfa:	7bfb      	ldrb	r3, [r7, #15]
 8008cfc:	b298      	uxth	r0, r3
 8008cfe:	6879      	ldr	r1, [r7, #4]
 8008d00:	4613      	mov	r3, r2
 8008d02:	00db      	lsls	r3, r3, #3
 8008d04:	4413      	add	r3, r2
 8008d06:	009b      	lsls	r3, r3, #2
 8008d08:	440b      	add	r3, r1
 8008d0a:	332e      	adds	r3, #46	@ 0x2e
 8008d0c:	4602      	mov	r2, r0
 8008d0e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008d10:	7bfa      	ldrb	r2, [r7, #15]
 8008d12:	6879      	ldr	r1, [r7, #4]
 8008d14:	4613      	mov	r3, r2
 8008d16:	00db      	lsls	r3, r3, #3
 8008d18:	4413      	add	r3, r2
 8008d1a:	009b      	lsls	r3, r3, #2
 8008d1c:	440b      	add	r3, r1
 8008d1e:	3318      	adds	r3, #24
 8008d20:	2200      	movs	r2, #0
 8008d22:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008d24:	7bfa      	ldrb	r2, [r7, #15]
 8008d26:	6879      	ldr	r1, [r7, #4]
 8008d28:	4613      	mov	r3, r2
 8008d2a:	00db      	lsls	r3, r3, #3
 8008d2c:	4413      	add	r3, r2
 8008d2e:	009b      	lsls	r3, r3, #2
 8008d30:	440b      	add	r3, r1
 8008d32:	331c      	adds	r3, #28
 8008d34:	2200      	movs	r2, #0
 8008d36:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008d38:	7bfa      	ldrb	r2, [r7, #15]
 8008d3a:	6879      	ldr	r1, [r7, #4]
 8008d3c:	4613      	mov	r3, r2
 8008d3e:	00db      	lsls	r3, r3, #3
 8008d40:	4413      	add	r3, r2
 8008d42:	009b      	lsls	r3, r3, #2
 8008d44:	440b      	add	r3, r1
 8008d46:	3320      	adds	r3, #32
 8008d48:	2200      	movs	r2, #0
 8008d4a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008d4c:	7bfa      	ldrb	r2, [r7, #15]
 8008d4e:	6879      	ldr	r1, [r7, #4]
 8008d50:	4613      	mov	r3, r2
 8008d52:	00db      	lsls	r3, r3, #3
 8008d54:	4413      	add	r3, r2
 8008d56:	009b      	lsls	r3, r3, #2
 8008d58:	440b      	add	r3, r1
 8008d5a:	3324      	adds	r3, #36	@ 0x24
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008d60:	7bfb      	ldrb	r3, [r7, #15]
 8008d62:	3301      	adds	r3, #1
 8008d64:	73fb      	strb	r3, [r7, #15]
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	791b      	ldrb	r3, [r3, #4]
 8008d6a:	7bfa      	ldrb	r2, [r7, #15]
 8008d6c:	429a      	cmp	r2, r3
 8008d6e:	d3af      	bcc.n	8008cd0 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008d70:	2300      	movs	r3, #0
 8008d72:	73fb      	strb	r3, [r7, #15]
 8008d74:	e044      	b.n	8008e00 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008d76:	7bfa      	ldrb	r2, [r7, #15]
 8008d78:	6879      	ldr	r1, [r7, #4]
 8008d7a:	4613      	mov	r3, r2
 8008d7c:	00db      	lsls	r3, r3, #3
 8008d7e:	4413      	add	r3, r2
 8008d80:	009b      	lsls	r3, r3, #2
 8008d82:	440b      	add	r3, r1
 8008d84:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8008d88:	2200      	movs	r2, #0
 8008d8a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008d8c:	7bfa      	ldrb	r2, [r7, #15]
 8008d8e:	6879      	ldr	r1, [r7, #4]
 8008d90:	4613      	mov	r3, r2
 8008d92:	00db      	lsls	r3, r3, #3
 8008d94:	4413      	add	r3, r2
 8008d96:	009b      	lsls	r3, r3, #2
 8008d98:	440b      	add	r3, r1
 8008d9a:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8008d9e:	7bfa      	ldrb	r2, [r7, #15]
 8008da0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008da2:	7bfa      	ldrb	r2, [r7, #15]
 8008da4:	6879      	ldr	r1, [r7, #4]
 8008da6:	4613      	mov	r3, r2
 8008da8:	00db      	lsls	r3, r3, #3
 8008daa:	4413      	add	r3, r2
 8008dac:	009b      	lsls	r3, r3, #2
 8008dae:	440b      	add	r3, r1
 8008db0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8008db4:	2200      	movs	r2, #0
 8008db6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008db8:	7bfa      	ldrb	r2, [r7, #15]
 8008dba:	6879      	ldr	r1, [r7, #4]
 8008dbc:	4613      	mov	r3, r2
 8008dbe:	00db      	lsls	r3, r3, #3
 8008dc0:	4413      	add	r3, r2
 8008dc2:	009b      	lsls	r3, r3, #2
 8008dc4:	440b      	add	r3, r1
 8008dc6:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8008dca:	2200      	movs	r2, #0
 8008dcc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008dce:	7bfa      	ldrb	r2, [r7, #15]
 8008dd0:	6879      	ldr	r1, [r7, #4]
 8008dd2:	4613      	mov	r3, r2
 8008dd4:	00db      	lsls	r3, r3, #3
 8008dd6:	4413      	add	r3, r2
 8008dd8:	009b      	lsls	r3, r3, #2
 8008dda:	440b      	add	r3, r1
 8008ddc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008de0:	2200      	movs	r2, #0
 8008de2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008de4:	7bfa      	ldrb	r2, [r7, #15]
 8008de6:	6879      	ldr	r1, [r7, #4]
 8008de8:	4613      	mov	r3, r2
 8008dea:	00db      	lsls	r3, r3, #3
 8008dec:	4413      	add	r3, r2
 8008dee:	009b      	lsls	r3, r3, #2
 8008df0:	440b      	add	r3, r1
 8008df2:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8008df6:	2200      	movs	r2, #0
 8008df8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008dfa:	7bfb      	ldrb	r3, [r7, #15]
 8008dfc:	3301      	adds	r3, #1
 8008dfe:	73fb      	strb	r3, [r7, #15]
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	791b      	ldrb	r3, [r3, #4]
 8008e04:	7bfa      	ldrb	r2, [r7, #15]
 8008e06:	429a      	cmp	r2, r3
 8008e08:	d3b5      	bcc.n	8008d76 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	6818      	ldr	r0, [r3, #0]
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	7c1a      	ldrb	r2, [r3, #16]
 8008e12:	f88d 2000 	strb.w	r2, [sp]
 8008e16:	3304      	adds	r3, #4
 8008e18:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008e1a:	f002 f83b 	bl	800ae94 <USB_DevInit>
 8008e1e:	4603      	mov	r3, r0
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d005      	beq.n	8008e30 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2202      	movs	r2, #2
 8008e28:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8008e2c:	2301      	movs	r3, #1
 8008e2e:	e00c      	b.n	8008e4a <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2200      	movs	r2, #0
 8008e34:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2201      	movs	r2, #1
 8008e3a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	4618      	mov	r0, r3
 8008e44:	f002 fa03 	bl	800b24e <USB_DevDisconnect>

  return HAL_OK;
 8008e48:	2300      	movs	r3, #0
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	3710      	adds	r7, #16
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bd80      	pop	{r7, pc}
	...

08008e54 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b086      	sub	sp, #24
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d101      	bne.n	8008e66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008e62:	2301      	movs	r3, #1
 8008e64:	e267      	b.n	8009336 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f003 0301 	and.w	r3, r3, #1
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d075      	beq.n	8008f5e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8008e72:	4b88      	ldr	r3, [pc, #544]	@ (8009094 <HAL_RCC_OscConfig+0x240>)
 8008e74:	689b      	ldr	r3, [r3, #8]
 8008e76:	f003 030c 	and.w	r3, r3, #12
 8008e7a:	2b04      	cmp	r3, #4
 8008e7c:	d00c      	beq.n	8008e98 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008e7e:	4b85      	ldr	r3, [pc, #532]	@ (8009094 <HAL_RCC_OscConfig+0x240>)
 8008e80:	689b      	ldr	r3, [r3, #8]
 8008e82:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8008e86:	2b08      	cmp	r3, #8
 8008e88:	d112      	bne.n	8008eb0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008e8a:	4b82      	ldr	r3, [pc, #520]	@ (8009094 <HAL_RCC_OscConfig+0x240>)
 8008e8c:	685b      	ldr	r3, [r3, #4]
 8008e8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008e92:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008e96:	d10b      	bne.n	8008eb0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008e98:	4b7e      	ldr	r3, [pc, #504]	@ (8009094 <HAL_RCC_OscConfig+0x240>)
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d05b      	beq.n	8008f5c <HAL_RCC_OscConfig+0x108>
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	685b      	ldr	r3, [r3, #4]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d157      	bne.n	8008f5c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008eac:	2301      	movs	r3, #1
 8008eae:	e242      	b.n	8009336 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	685b      	ldr	r3, [r3, #4]
 8008eb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008eb8:	d106      	bne.n	8008ec8 <HAL_RCC_OscConfig+0x74>
 8008eba:	4b76      	ldr	r3, [pc, #472]	@ (8009094 <HAL_RCC_OscConfig+0x240>)
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	4a75      	ldr	r2, [pc, #468]	@ (8009094 <HAL_RCC_OscConfig+0x240>)
 8008ec0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008ec4:	6013      	str	r3, [r2, #0]
 8008ec6:	e01d      	b.n	8008f04 <HAL_RCC_OscConfig+0xb0>
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	685b      	ldr	r3, [r3, #4]
 8008ecc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008ed0:	d10c      	bne.n	8008eec <HAL_RCC_OscConfig+0x98>
 8008ed2:	4b70      	ldr	r3, [pc, #448]	@ (8009094 <HAL_RCC_OscConfig+0x240>)
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	4a6f      	ldr	r2, [pc, #444]	@ (8009094 <HAL_RCC_OscConfig+0x240>)
 8008ed8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008edc:	6013      	str	r3, [r2, #0]
 8008ede:	4b6d      	ldr	r3, [pc, #436]	@ (8009094 <HAL_RCC_OscConfig+0x240>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	4a6c      	ldr	r2, [pc, #432]	@ (8009094 <HAL_RCC_OscConfig+0x240>)
 8008ee4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008ee8:	6013      	str	r3, [r2, #0]
 8008eea:	e00b      	b.n	8008f04 <HAL_RCC_OscConfig+0xb0>
 8008eec:	4b69      	ldr	r3, [pc, #420]	@ (8009094 <HAL_RCC_OscConfig+0x240>)
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	4a68      	ldr	r2, [pc, #416]	@ (8009094 <HAL_RCC_OscConfig+0x240>)
 8008ef2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008ef6:	6013      	str	r3, [r2, #0]
 8008ef8:	4b66      	ldr	r3, [pc, #408]	@ (8009094 <HAL_RCC_OscConfig+0x240>)
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	4a65      	ldr	r2, [pc, #404]	@ (8009094 <HAL_RCC_OscConfig+0x240>)
 8008efe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008f02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	685b      	ldr	r3, [r3, #4]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d013      	beq.n	8008f34 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008f0c:	f7fd fd30 	bl	8006970 <HAL_GetTick>
 8008f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008f12:	e008      	b.n	8008f26 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008f14:	f7fd fd2c 	bl	8006970 <HAL_GetTick>
 8008f18:	4602      	mov	r2, r0
 8008f1a:	693b      	ldr	r3, [r7, #16]
 8008f1c:	1ad3      	subs	r3, r2, r3
 8008f1e:	2b64      	cmp	r3, #100	@ 0x64
 8008f20:	d901      	bls.n	8008f26 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008f22:	2303      	movs	r3, #3
 8008f24:	e207      	b.n	8009336 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008f26:	4b5b      	ldr	r3, [pc, #364]	@ (8009094 <HAL_RCC_OscConfig+0x240>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d0f0      	beq.n	8008f14 <HAL_RCC_OscConfig+0xc0>
 8008f32:	e014      	b.n	8008f5e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008f34:	f7fd fd1c 	bl	8006970 <HAL_GetTick>
 8008f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008f3a:	e008      	b.n	8008f4e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008f3c:	f7fd fd18 	bl	8006970 <HAL_GetTick>
 8008f40:	4602      	mov	r2, r0
 8008f42:	693b      	ldr	r3, [r7, #16]
 8008f44:	1ad3      	subs	r3, r2, r3
 8008f46:	2b64      	cmp	r3, #100	@ 0x64
 8008f48:	d901      	bls.n	8008f4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008f4a:	2303      	movs	r3, #3
 8008f4c:	e1f3      	b.n	8009336 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008f4e:	4b51      	ldr	r3, [pc, #324]	@ (8009094 <HAL_RCC_OscConfig+0x240>)
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d1f0      	bne.n	8008f3c <HAL_RCC_OscConfig+0xe8>
 8008f5a:	e000      	b.n	8008f5e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008f5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f003 0302 	and.w	r3, r3, #2
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d063      	beq.n	8009032 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8008f6a:	4b4a      	ldr	r3, [pc, #296]	@ (8009094 <HAL_RCC_OscConfig+0x240>)
 8008f6c:	689b      	ldr	r3, [r3, #8]
 8008f6e:	f003 030c 	and.w	r3, r3, #12
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d00b      	beq.n	8008f8e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008f76:	4b47      	ldr	r3, [pc, #284]	@ (8009094 <HAL_RCC_OscConfig+0x240>)
 8008f78:	689b      	ldr	r3, [r3, #8]
 8008f7a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8008f7e:	2b08      	cmp	r3, #8
 8008f80:	d11c      	bne.n	8008fbc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008f82:	4b44      	ldr	r3, [pc, #272]	@ (8009094 <HAL_RCC_OscConfig+0x240>)
 8008f84:	685b      	ldr	r3, [r3, #4]
 8008f86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d116      	bne.n	8008fbc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008f8e:	4b41      	ldr	r3, [pc, #260]	@ (8009094 <HAL_RCC_OscConfig+0x240>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f003 0302 	and.w	r3, r3, #2
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d005      	beq.n	8008fa6 <HAL_RCC_OscConfig+0x152>
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	68db      	ldr	r3, [r3, #12]
 8008f9e:	2b01      	cmp	r3, #1
 8008fa0:	d001      	beq.n	8008fa6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008fa2:	2301      	movs	r3, #1
 8008fa4:	e1c7      	b.n	8009336 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008fa6:	4b3b      	ldr	r3, [pc, #236]	@ (8009094 <HAL_RCC_OscConfig+0x240>)
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	691b      	ldr	r3, [r3, #16]
 8008fb2:	00db      	lsls	r3, r3, #3
 8008fb4:	4937      	ldr	r1, [pc, #220]	@ (8009094 <HAL_RCC_OscConfig+0x240>)
 8008fb6:	4313      	orrs	r3, r2
 8008fb8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008fba:	e03a      	b.n	8009032 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	68db      	ldr	r3, [r3, #12]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d020      	beq.n	8009006 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008fc4:	4b34      	ldr	r3, [pc, #208]	@ (8009098 <HAL_RCC_OscConfig+0x244>)
 8008fc6:	2201      	movs	r2, #1
 8008fc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fca:	f7fd fcd1 	bl	8006970 <HAL_GetTick>
 8008fce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008fd0:	e008      	b.n	8008fe4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008fd2:	f7fd fccd 	bl	8006970 <HAL_GetTick>
 8008fd6:	4602      	mov	r2, r0
 8008fd8:	693b      	ldr	r3, [r7, #16]
 8008fda:	1ad3      	subs	r3, r2, r3
 8008fdc:	2b02      	cmp	r3, #2
 8008fde:	d901      	bls.n	8008fe4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008fe0:	2303      	movs	r3, #3
 8008fe2:	e1a8      	b.n	8009336 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008fe4:	4b2b      	ldr	r3, [pc, #172]	@ (8009094 <HAL_RCC_OscConfig+0x240>)
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f003 0302 	and.w	r3, r3, #2
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d0f0      	beq.n	8008fd2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008ff0:	4b28      	ldr	r3, [pc, #160]	@ (8009094 <HAL_RCC_OscConfig+0x240>)
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	691b      	ldr	r3, [r3, #16]
 8008ffc:	00db      	lsls	r3, r3, #3
 8008ffe:	4925      	ldr	r1, [pc, #148]	@ (8009094 <HAL_RCC_OscConfig+0x240>)
 8009000:	4313      	orrs	r3, r2
 8009002:	600b      	str	r3, [r1, #0]
 8009004:	e015      	b.n	8009032 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009006:	4b24      	ldr	r3, [pc, #144]	@ (8009098 <HAL_RCC_OscConfig+0x244>)
 8009008:	2200      	movs	r2, #0
 800900a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800900c:	f7fd fcb0 	bl	8006970 <HAL_GetTick>
 8009010:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009012:	e008      	b.n	8009026 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009014:	f7fd fcac 	bl	8006970 <HAL_GetTick>
 8009018:	4602      	mov	r2, r0
 800901a:	693b      	ldr	r3, [r7, #16]
 800901c:	1ad3      	subs	r3, r2, r3
 800901e:	2b02      	cmp	r3, #2
 8009020:	d901      	bls.n	8009026 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009022:	2303      	movs	r3, #3
 8009024:	e187      	b.n	8009336 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009026:	4b1b      	ldr	r3, [pc, #108]	@ (8009094 <HAL_RCC_OscConfig+0x240>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	f003 0302 	and.w	r3, r3, #2
 800902e:	2b00      	cmp	r3, #0
 8009030:	d1f0      	bne.n	8009014 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	f003 0308 	and.w	r3, r3, #8
 800903a:	2b00      	cmp	r3, #0
 800903c:	d036      	beq.n	80090ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	695b      	ldr	r3, [r3, #20]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d016      	beq.n	8009074 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009046:	4b15      	ldr	r3, [pc, #84]	@ (800909c <HAL_RCC_OscConfig+0x248>)
 8009048:	2201      	movs	r2, #1
 800904a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800904c:	f7fd fc90 	bl	8006970 <HAL_GetTick>
 8009050:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009052:	e008      	b.n	8009066 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009054:	f7fd fc8c 	bl	8006970 <HAL_GetTick>
 8009058:	4602      	mov	r2, r0
 800905a:	693b      	ldr	r3, [r7, #16]
 800905c:	1ad3      	subs	r3, r2, r3
 800905e:	2b02      	cmp	r3, #2
 8009060:	d901      	bls.n	8009066 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009062:	2303      	movs	r3, #3
 8009064:	e167      	b.n	8009336 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009066:	4b0b      	ldr	r3, [pc, #44]	@ (8009094 <HAL_RCC_OscConfig+0x240>)
 8009068:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800906a:	f003 0302 	and.w	r3, r3, #2
 800906e:	2b00      	cmp	r3, #0
 8009070:	d0f0      	beq.n	8009054 <HAL_RCC_OscConfig+0x200>
 8009072:	e01b      	b.n	80090ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009074:	4b09      	ldr	r3, [pc, #36]	@ (800909c <HAL_RCC_OscConfig+0x248>)
 8009076:	2200      	movs	r2, #0
 8009078:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800907a:	f7fd fc79 	bl	8006970 <HAL_GetTick>
 800907e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009080:	e00e      	b.n	80090a0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009082:	f7fd fc75 	bl	8006970 <HAL_GetTick>
 8009086:	4602      	mov	r2, r0
 8009088:	693b      	ldr	r3, [r7, #16]
 800908a:	1ad3      	subs	r3, r2, r3
 800908c:	2b02      	cmp	r3, #2
 800908e:	d907      	bls.n	80090a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009090:	2303      	movs	r3, #3
 8009092:	e150      	b.n	8009336 <HAL_RCC_OscConfig+0x4e2>
 8009094:	40023800 	.word	0x40023800
 8009098:	42470000 	.word	0x42470000
 800909c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80090a0:	4b88      	ldr	r3, [pc, #544]	@ (80092c4 <HAL_RCC_OscConfig+0x470>)
 80090a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80090a4:	f003 0302 	and.w	r3, r3, #2
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d1ea      	bne.n	8009082 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f003 0304 	and.w	r3, r3, #4
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	f000 8097 	beq.w	80091e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80090ba:	2300      	movs	r3, #0
 80090bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80090be:	4b81      	ldr	r3, [pc, #516]	@ (80092c4 <HAL_RCC_OscConfig+0x470>)
 80090c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d10f      	bne.n	80090ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80090ca:	2300      	movs	r3, #0
 80090cc:	60bb      	str	r3, [r7, #8]
 80090ce:	4b7d      	ldr	r3, [pc, #500]	@ (80092c4 <HAL_RCC_OscConfig+0x470>)
 80090d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090d2:	4a7c      	ldr	r2, [pc, #496]	@ (80092c4 <HAL_RCC_OscConfig+0x470>)
 80090d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80090d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80090da:	4b7a      	ldr	r3, [pc, #488]	@ (80092c4 <HAL_RCC_OscConfig+0x470>)
 80090dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80090e2:	60bb      	str	r3, [r7, #8]
 80090e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80090e6:	2301      	movs	r3, #1
 80090e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80090ea:	4b77      	ldr	r3, [pc, #476]	@ (80092c8 <HAL_RCC_OscConfig+0x474>)
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d118      	bne.n	8009128 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80090f6:	4b74      	ldr	r3, [pc, #464]	@ (80092c8 <HAL_RCC_OscConfig+0x474>)
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	4a73      	ldr	r2, [pc, #460]	@ (80092c8 <HAL_RCC_OscConfig+0x474>)
 80090fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009100:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009102:	f7fd fc35 	bl	8006970 <HAL_GetTick>
 8009106:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009108:	e008      	b.n	800911c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800910a:	f7fd fc31 	bl	8006970 <HAL_GetTick>
 800910e:	4602      	mov	r2, r0
 8009110:	693b      	ldr	r3, [r7, #16]
 8009112:	1ad3      	subs	r3, r2, r3
 8009114:	2b02      	cmp	r3, #2
 8009116:	d901      	bls.n	800911c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8009118:	2303      	movs	r3, #3
 800911a:	e10c      	b.n	8009336 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800911c:	4b6a      	ldr	r3, [pc, #424]	@ (80092c8 <HAL_RCC_OscConfig+0x474>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009124:	2b00      	cmp	r3, #0
 8009126:	d0f0      	beq.n	800910a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	689b      	ldr	r3, [r3, #8]
 800912c:	2b01      	cmp	r3, #1
 800912e:	d106      	bne.n	800913e <HAL_RCC_OscConfig+0x2ea>
 8009130:	4b64      	ldr	r3, [pc, #400]	@ (80092c4 <HAL_RCC_OscConfig+0x470>)
 8009132:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009134:	4a63      	ldr	r2, [pc, #396]	@ (80092c4 <HAL_RCC_OscConfig+0x470>)
 8009136:	f043 0301 	orr.w	r3, r3, #1
 800913a:	6713      	str	r3, [r2, #112]	@ 0x70
 800913c:	e01c      	b.n	8009178 <HAL_RCC_OscConfig+0x324>
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	689b      	ldr	r3, [r3, #8]
 8009142:	2b05      	cmp	r3, #5
 8009144:	d10c      	bne.n	8009160 <HAL_RCC_OscConfig+0x30c>
 8009146:	4b5f      	ldr	r3, [pc, #380]	@ (80092c4 <HAL_RCC_OscConfig+0x470>)
 8009148:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800914a:	4a5e      	ldr	r2, [pc, #376]	@ (80092c4 <HAL_RCC_OscConfig+0x470>)
 800914c:	f043 0304 	orr.w	r3, r3, #4
 8009150:	6713      	str	r3, [r2, #112]	@ 0x70
 8009152:	4b5c      	ldr	r3, [pc, #368]	@ (80092c4 <HAL_RCC_OscConfig+0x470>)
 8009154:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009156:	4a5b      	ldr	r2, [pc, #364]	@ (80092c4 <HAL_RCC_OscConfig+0x470>)
 8009158:	f043 0301 	orr.w	r3, r3, #1
 800915c:	6713      	str	r3, [r2, #112]	@ 0x70
 800915e:	e00b      	b.n	8009178 <HAL_RCC_OscConfig+0x324>
 8009160:	4b58      	ldr	r3, [pc, #352]	@ (80092c4 <HAL_RCC_OscConfig+0x470>)
 8009162:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009164:	4a57      	ldr	r2, [pc, #348]	@ (80092c4 <HAL_RCC_OscConfig+0x470>)
 8009166:	f023 0301 	bic.w	r3, r3, #1
 800916a:	6713      	str	r3, [r2, #112]	@ 0x70
 800916c:	4b55      	ldr	r3, [pc, #340]	@ (80092c4 <HAL_RCC_OscConfig+0x470>)
 800916e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009170:	4a54      	ldr	r2, [pc, #336]	@ (80092c4 <HAL_RCC_OscConfig+0x470>)
 8009172:	f023 0304 	bic.w	r3, r3, #4
 8009176:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	689b      	ldr	r3, [r3, #8]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d015      	beq.n	80091ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009180:	f7fd fbf6 	bl	8006970 <HAL_GetTick>
 8009184:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009186:	e00a      	b.n	800919e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009188:	f7fd fbf2 	bl	8006970 <HAL_GetTick>
 800918c:	4602      	mov	r2, r0
 800918e:	693b      	ldr	r3, [r7, #16]
 8009190:	1ad3      	subs	r3, r2, r3
 8009192:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009196:	4293      	cmp	r3, r2
 8009198:	d901      	bls.n	800919e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800919a:	2303      	movs	r3, #3
 800919c:	e0cb      	b.n	8009336 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800919e:	4b49      	ldr	r3, [pc, #292]	@ (80092c4 <HAL_RCC_OscConfig+0x470>)
 80091a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80091a2:	f003 0302 	and.w	r3, r3, #2
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d0ee      	beq.n	8009188 <HAL_RCC_OscConfig+0x334>
 80091aa:	e014      	b.n	80091d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80091ac:	f7fd fbe0 	bl	8006970 <HAL_GetTick>
 80091b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80091b2:	e00a      	b.n	80091ca <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80091b4:	f7fd fbdc 	bl	8006970 <HAL_GetTick>
 80091b8:	4602      	mov	r2, r0
 80091ba:	693b      	ldr	r3, [r7, #16]
 80091bc:	1ad3      	subs	r3, r2, r3
 80091be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80091c2:	4293      	cmp	r3, r2
 80091c4:	d901      	bls.n	80091ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80091c6:	2303      	movs	r3, #3
 80091c8:	e0b5      	b.n	8009336 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80091ca:	4b3e      	ldr	r3, [pc, #248]	@ (80092c4 <HAL_RCC_OscConfig+0x470>)
 80091cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80091ce:	f003 0302 	and.w	r3, r3, #2
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d1ee      	bne.n	80091b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80091d6:	7dfb      	ldrb	r3, [r7, #23]
 80091d8:	2b01      	cmp	r3, #1
 80091da:	d105      	bne.n	80091e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80091dc:	4b39      	ldr	r3, [pc, #228]	@ (80092c4 <HAL_RCC_OscConfig+0x470>)
 80091de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091e0:	4a38      	ldr	r2, [pc, #224]	@ (80092c4 <HAL_RCC_OscConfig+0x470>)
 80091e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80091e6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	699b      	ldr	r3, [r3, #24]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	f000 80a1 	beq.w	8009334 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80091f2:	4b34      	ldr	r3, [pc, #208]	@ (80092c4 <HAL_RCC_OscConfig+0x470>)
 80091f4:	689b      	ldr	r3, [r3, #8]
 80091f6:	f003 030c 	and.w	r3, r3, #12
 80091fa:	2b08      	cmp	r3, #8
 80091fc:	d05c      	beq.n	80092b8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	699b      	ldr	r3, [r3, #24]
 8009202:	2b02      	cmp	r3, #2
 8009204:	d141      	bne.n	800928a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009206:	4b31      	ldr	r3, [pc, #196]	@ (80092cc <HAL_RCC_OscConfig+0x478>)
 8009208:	2200      	movs	r2, #0
 800920a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800920c:	f7fd fbb0 	bl	8006970 <HAL_GetTick>
 8009210:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009212:	e008      	b.n	8009226 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009214:	f7fd fbac 	bl	8006970 <HAL_GetTick>
 8009218:	4602      	mov	r2, r0
 800921a:	693b      	ldr	r3, [r7, #16]
 800921c:	1ad3      	subs	r3, r2, r3
 800921e:	2b02      	cmp	r3, #2
 8009220:	d901      	bls.n	8009226 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8009222:	2303      	movs	r3, #3
 8009224:	e087      	b.n	8009336 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009226:	4b27      	ldr	r3, [pc, #156]	@ (80092c4 <HAL_RCC_OscConfig+0x470>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800922e:	2b00      	cmp	r3, #0
 8009230:	d1f0      	bne.n	8009214 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	69da      	ldr	r2, [r3, #28]
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6a1b      	ldr	r3, [r3, #32]
 800923a:	431a      	orrs	r2, r3
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009240:	019b      	lsls	r3, r3, #6
 8009242:	431a      	orrs	r2, r3
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009248:	085b      	lsrs	r3, r3, #1
 800924a:	3b01      	subs	r3, #1
 800924c:	041b      	lsls	r3, r3, #16
 800924e:	431a      	orrs	r2, r3
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009254:	061b      	lsls	r3, r3, #24
 8009256:	491b      	ldr	r1, [pc, #108]	@ (80092c4 <HAL_RCC_OscConfig+0x470>)
 8009258:	4313      	orrs	r3, r2
 800925a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800925c:	4b1b      	ldr	r3, [pc, #108]	@ (80092cc <HAL_RCC_OscConfig+0x478>)
 800925e:	2201      	movs	r2, #1
 8009260:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009262:	f7fd fb85 	bl	8006970 <HAL_GetTick>
 8009266:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009268:	e008      	b.n	800927c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800926a:	f7fd fb81 	bl	8006970 <HAL_GetTick>
 800926e:	4602      	mov	r2, r0
 8009270:	693b      	ldr	r3, [r7, #16]
 8009272:	1ad3      	subs	r3, r2, r3
 8009274:	2b02      	cmp	r3, #2
 8009276:	d901      	bls.n	800927c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009278:	2303      	movs	r3, #3
 800927a:	e05c      	b.n	8009336 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800927c:	4b11      	ldr	r3, [pc, #68]	@ (80092c4 <HAL_RCC_OscConfig+0x470>)
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009284:	2b00      	cmp	r3, #0
 8009286:	d0f0      	beq.n	800926a <HAL_RCC_OscConfig+0x416>
 8009288:	e054      	b.n	8009334 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800928a:	4b10      	ldr	r3, [pc, #64]	@ (80092cc <HAL_RCC_OscConfig+0x478>)
 800928c:	2200      	movs	r2, #0
 800928e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009290:	f7fd fb6e 	bl	8006970 <HAL_GetTick>
 8009294:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009296:	e008      	b.n	80092aa <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009298:	f7fd fb6a 	bl	8006970 <HAL_GetTick>
 800929c:	4602      	mov	r2, r0
 800929e:	693b      	ldr	r3, [r7, #16]
 80092a0:	1ad3      	subs	r3, r2, r3
 80092a2:	2b02      	cmp	r3, #2
 80092a4:	d901      	bls.n	80092aa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80092a6:	2303      	movs	r3, #3
 80092a8:	e045      	b.n	8009336 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80092aa:	4b06      	ldr	r3, [pc, #24]	@ (80092c4 <HAL_RCC_OscConfig+0x470>)
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d1f0      	bne.n	8009298 <HAL_RCC_OscConfig+0x444>
 80092b6:	e03d      	b.n	8009334 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	699b      	ldr	r3, [r3, #24]
 80092bc:	2b01      	cmp	r3, #1
 80092be:	d107      	bne.n	80092d0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80092c0:	2301      	movs	r3, #1
 80092c2:	e038      	b.n	8009336 <HAL_RCC_OscConfig+0x4e2>
 80092c4:	40023800 	.word	0x40023800
 80092c8:	40007000 	.word	0x40007000
 80092cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80092d0:	4b1b      	ldr	r3, [pc, #108]	@ (8009340 <HAL_RCC_OscConfig+0x4ec>)
 80092d2:	685b      	ldr	r3, [r3, #4]
 80092d4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	699b      	ldr	r3, [r3, #24]
 80092da:	2b01      	cmp	r3, #1
 80092dc:	d028      	beq.n	8009330 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80092e8:	429a      	cmp	r2, r3
 80092ea:	d121      	bne.n	8009330 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80092f6:	429a      	cmp	r2, r3
 80092f8:	d11a      	bne.n	8009330 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80092fa:	68fa      	ldr	r2, [r7, #12]
 80092fc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8009300:	4013      	ands	r3, r2
 8009302:	687a      	ldr	r2, [r7, #4]
 8009304:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8009306:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009308:	4293      	cmp	r3, r2
 800930a:	d111      	bne.n	8009330 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009316:	085b      	lsrs	r3, r3, #1
 8009318:	3b01      	subs	r3, #1
 800931a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800931c:	429a      	cmp	r2, r3
 800931e:	d107      	bne.n	8009330 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800932a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800932c:	429a      	cmp	r2, r3
 800932e:	d001      	beq.n	8009334 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8009330:	2301      	movs	r3, #1
 8009332:	e000      	b.n	8009336 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8009334:	2300      	movs	r3, #0
}
 8009336:	4618      	mov	r0, r3
 8009338:	3718      	adds	r7, #24
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}
 800933e:	bf00      	nop
 8009340:	40023800 	.word	0x40023800

08009344 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b084      	sub	sp, #16
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
 800934c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d101      	bne.n	8009358 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009354:	2301      	movs	r3, #1
 8009356:	e0cc      	b.n	80094f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009358:	4b68      	ldr	r3, [pc, #416]	@ (80094fc <HAL_RCC_ClockConfig+0x1b8>)
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f003 0307 	and.w	r3, r3, #7
 8009360:	683a      	ldr	r2, [r7, #0]
 8009362:	429a      	cmp	r2, r3
 8009364:	d90c      	bls.n	8009380 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009366:	4b65      	ldr	r3, [pc, #404]	@ (80094fc <HAL_RCC_ClockConfig+0x1b8>)
 8009368:	683a      	ldr	r2, [r7, #0]
 800936a:	b2d2      	uxtb	r2, r2
 800936c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800936e:	4b63      	ldr	r3, [pc, #396]	@ (80094fc <HAL_RCC_ClockConfig+0x1b8>)
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	f003 0307 	and.w	r3, r3, #7
 8009376:	683a      	ldr	r2, [r7, #0]
 8009378:	429a      	cmp	r2, r3
 800937a:	d001      	beq.n	8009380 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800937c:	2301      	movs	r3, #1
 800937e:	e0b8      	b.n	80094f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	f003 0302 	and.w	r3, r3, #2
 8009388:	2b00      	cmp	r3, #0
 800938a:	d020      	beq.n	80093ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	f003 0304 	and.w	r3, r3, #4
 8009394:	2b00      	cmp	r3, #0
 8009396:	d005      	beq.n	80093a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009398:	4b59      	ldr	r3, [pc, #356]	@ (8009500 <HAL_RCC_ClockConfig+0x1bc>)
 800939a:	689b      	ldr	r3, [r3, #8]
 800939c:	4a58      	ldr	r2, [pc, #352]	@ (8009500 <HAL_RCC_ClockConfig+0x1bc>)
 800939e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80093a2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	f003 0308 	and.w	r3, r3, #8
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d005      	beq.n	80093bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80093b0:	4b53      	ldr	r3, [pc, #332]	@ (8009500 <HAL_RCC_ClockConfig+0x1bc>)
 80093b2:	689b      	ldr	r3, [r3, #8]
 80093b4:	4a52      	ldr	r2, [pc, #328]	@ (8009500 <HAL_RCC_ClockConfig+0x1bc>)
 80093b6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80093ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80093bc:	4b50      	ldr	r3, [pc, #320]	@ (8009500 <HAL_RCC_ClockConfig+0x1bc>)
 80093be:	689b      	ldr	r3, [r3, #8]
 80093c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	689b      	ldr	r3, [r3, #8]
 80093c8:	494d      	ldr	r1, [pc, #308]	@ (8009500 <HAL_RCC_ClockConfig+0x1bc>)
 80093ca:	4313      	orrs	r3, r2
 80093cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	f003 0301 	and.w	r3, r3, #1
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d044      	beq.n	8009464 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	685b      	ldr	r3, [r3, #4]
 80093de:	2b01      	cmp	r3, #1
 80093e0:	d107      	bne.n	80093f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80093e2:	4b47      	ldr	r3, [pc, #284]	@ (8009500 <HAL_RCC_ClockConfig+0x1bc>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d119      	bne.n	8009422 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80093ee:	2301      	movs	r3, #1
 80093f0:	e07f      	b.n	80094f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	685b      	ldr	r3, [r3, #4]
 80093f6:	2b02      	cmp	r3, #2
 80093f8:	d003      	beq.n	8009402 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80093fe:	2b03      	cmp	r3, #3
 8009400:	d107      	bne.n	8009412 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009402:	4b3f      	ldr	r3, [pc, #252]	@ (8009500 <HAL_RCC_ClockConfig+0x1bc>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800940a:	2b00      	cmp	r3, #0
 800940c:	d109      	bne.n	8009422 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800940e:	2301      	movs	r3, #1
 8009410:	e06f      	b.n	80094f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009412:	4b3b      	ldr	r3, [pc, #236]	@ (8009500 <HAL_RCC_ClockConfig+0x1bc>)
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	f003 0302 	and.w	r3, r3, #2
 800941a:	2b00      	cmp	r3, #0
 800941c:	d101      	bne.n	8009422 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800941e:	2301      	movs	r3, #1
 8009420:	e067      	b.n	80094f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009422:	4b37      	ldr	r3, [pc, #220]	@ (8009500 <HAL_RCC_ClockConfig+0x1bc>)
 8009424:	689b      	ldr	r3, [r3, #8]
 8009426:	f023 0203 	bic.w	r2, r3, #3
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	685b      	ldr	r3, [r3, #4]
 800942e:	4934      	ldr	r1, [pc, #208]	@ (8009500 <HAL_RCC_ClockConfig+0x1bc>)
 8009430:	4313      	orrs	r3, r2
 8009432:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009434:	f7fd fa9c 	bl	8006970 <HAL_GetTick>
 8009438:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800943a:	e00a      	b.n	8009452 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800943c:	f7fd fa98 	bl	8006970 <HAL_GetTick>
 8009440:	4602      	mov	r2, r0
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	1ad3      	subs	r3, r2, r3
 8009446:	f241 3288 	movw	r2, #5000	@ 0x1388
 800944a:	4293      	cmp	r3, r2
 800944c:	d901      	bls.n	8009452 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800944e:	2303      	movs	r3, #3
 8009450:	e04f      	b.n	80094f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009452:	4b2b      	ldr	r3, [pc, #172]	@ (8009500 <HAL_RCC_ClockConfig+0x1bc>)
 8009454:	689b      	ldr	r3, [r3, #8]
 8009456:	f003 020c 	and.w	r2, r3, #12
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	685b      	ldr	r3, [r3, #4]
 800945e:	009b      	lsls	r3, r3, #2
 8009460:	429a      	cmp	r2, r3
 8009462:	d1eb      	bne.n	800943c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009464:	4b25      	ldr	r3, [pc, #148]	@ (80094fc <HAL_RCC_ClockConfig+0x1b8>)
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	f003 0307 	and.w	r3, r3, #7
 800946c:	683a      	ldr	r2, [r7, #0]
 800946e:	429a      	cmp	r2, r3
 8009470:	d20c      	bcs.n	800948c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009472:	4b22      	ldr	r3, [pc, #136]	@ (80094fc <HAL_RCC_ClockConfig+0x1b8>)
 8009474:	683a      	ldr	r2, [r7, #0]
 8009476:	b2d2      	uxtb	r2, r2
 8009478:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800947a:	4b20      	ldr	r3, [pc, #128]	@ (80094fc <HAL_RCC_ClockConfig+0x1b8>)
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	f003 0307 	and.w	r3, r3, #7
 8009482:	683a      	ldr	r2, [r7, #0]
 8009484:	429a      	cmp	r2, r3
 8009486:	d001      	beq.n	800948c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009488:	2301      	movs	r3, #1
 800948a:	e032      	b.n	80094f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	f003 0304 	and.w	r3, r3, #4
 8009494:	2b00      	cmp	r3, #0
 8009496:	d008      	beq.n	80094aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009498:	4b19      	ldr	r3, [pc, #100]	@ (8009500 <HAL_RCC_ClockConfig+0x1bc>)
 800949a:	689b      	ldr	r3, [r3, #8]
 800949c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	68db      	ldr	r3, [r3, #12]
 80094a4:	4916      	ldr	r1, [pc, #88]	@ (8009500 <HAL_RCC_ClockConfig+0x1bc>)
 80094a6:	4313      	orrs	r3, r2
 80094a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	f003 0308 	and.w	r3, r3, #8
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d009      	beq.n	80094ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80094b6:	4b12      	ldr	r3, [pc, #72]	@ (8009500 <HAL_RCC_ClockConfig+0x1bc>)
 80094b8:	689b      	ldr	r3, [r3, #8]
 80094ba:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	691b      	ldr	r3, [r3, #16]
 80094c2:	00db      	lsls	r3, r3, #3
 80094c4:	490e      	ldr	r1, [pc, #56]	@ (8009500 <HAL_RCC_ClockConfig+0x1bc>)
 80094c6:	4313      	orrs	r3, r2
 80094c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80094ca:	f000 f821 	bl	8009510 <HAL_RCC_GetSysClockFreq>
 80094ce:	4602      	mov	r2, r0
 80094d0:	4b0b      	ldr	r3, [pc, #44]	@ (8009500 <HAL_RCC_ClockConfig+0x1bc>)
 80094d2:	689b      	ldr	r3, [r3, #8]
 80094d4:	091b      	lsrs	r3, r3, #4
 80094d6:	f003 030f 	and.w	r3, r3, #15
 80094da:	490a      	ldr	r1, [pc, #40]	@ (8009504 <HAL_RCC_ClockConfig+0x1c0>)
 80094dc:	5ccb      	ldrb	r3, [r1, r3]
 80094de:	fa22 f303 	lsr.w	r3, r2, r3
 80094e2:	4a09      	ldr	r2, [pc, #36]	@ (8009508 <HAL_RCC_ClockConfig+0x1c4>)
 80094e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80094e6:	4b09      	ldr	r3, [pc, #36]	@ (800950c <HAL_RCC_ClockConfig+0x1c8>)
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	4618      	mov	r0, r3
 80094ec:	f7fd f9fc 	bl	80068e8 <HAL_InitTick>

  return HAL_OK;
 80094f0:	2300      	movs	r3, #0
}
 80094f2:	4618      	mov	r0, r3
 80094f4:	3710      	adds	r7, #16
 80094f6:	46bd      	mov	sp, r7
 80094f8:	bd80      	pop	{r7, pc}
 80094fa:	bf00      	nop
 80094fc:	40023c00 	.word	0x40023c00
 8009500:	40023800 	.word	0x40023800
 8009504:	08022ce8 	.word	0x08022ce8
 8009508:	200008e8 	.word	0x200008e8
 800950c:	200008ec 	.word	0x200008ec

08009510 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009510:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009514:	b094      	sub	sp, #80	@ 0x50
 8009516:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8009518:	2300      	movs	r3, #0
 800951a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800951c:	2300      	movs	r3, #0
 800951e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8009520:	2300      	movs	r3, #0
 8009522:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8009524:	2300      	movs	r3, #0
 8009526:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009528:	4b79      	ldr	r3, [pc, #484]	@ (8009710 <HAL_RCC_GetSysClockFreq+0x200>)
 800952a:	689b      	ldr	r3, [r3, #8]
 800952c:	f003 030c 	and.w	r3, r3, #12
 8009530:	2b08      	cmp	r3, #8
 8009532:	d00d      	beq.n	8009550 <HAL_RCC_GetSysClockFreq+0x40>
 8009534:	2b08      	cmp	r3, #8
 8009536:	f200 80e1 	bhi.w	80096fc <HAL_RCC_GetSysClockFreq+0x1ec>
 800953a:	2b00      	cmp	r3, #0
 800953c:	d002      	beq.n	8009544 <HAL_RCC_GetSysClockFreq+0x34>
 800953e:	2b04      	cmp	r3, #4
 8009540:	d003      	beq.n	800954a <HAL_RCC_GetSysClockFreq+0x3a>
 8009542:	e0db      	b.n	80096fc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009544:	4b73      	ldr	r3, [pc, #460]	@ (8009714 <HAL_RCC_GetSysClockFreq+0x204>)
 8009546:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8009548:	e0db      	b.n	8009702 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800954a:	4b73      	ldr	r3, [pc, #460]	@ (8009718 <HAL_RCC_GetSysClockFreq+0x208>)
 800954c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800954e:	e0d8      	b.n	8009702 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009550:	4b6f      	ldr	r3, [pc, #444]	@ (8009710 <HAL_RCC_GetSysClockFreq+0x200>)
 8009552:	685b      	ldr	r3, [r3, #4]
 8009554:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009558:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800955a:	4b6d      	ldr	r3, [pc, #436]	@ (8009710 <HAL_RCC_GetSysClockFreq+0x200>)
 800955c:	685b      	ldr	r3, [r3, #4]
 800955e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009562:	2b00      	cmp	r3, #0
 8009564:	d063      	beq.n	800962e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009566:	4b6a      	ldr	r3, [pc, #424]	@ (8009710 <HAL_RCC_GetSysClockFreq+0x200>)
 8009568:	685b      	ldr	r3, [r3, #4]
 800956a:	099b      	lsrs	r3, r3, #6
 800956c:	2200      	movs	r2, #0
 800956e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009570:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8009572:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009574:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009578:	633b      	str	r3, [r7, #48]	@ 0x30
 800957a:	2300      	movs	r3, #0
 800957c:	637b      	str	r3, [r7, #52]	@ 0x34
 800957e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8009582:	4622      	mov	r2, r4
 8009584:	462b      	mov	r3, r5
 8009586:	f04f 0000 	mov.w	r0, #0
 800958a:	f04f 0100 	mov.w	r1, #0
 800958e:	0159      	lsls	r1, r3, #5
 8009590:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009594:	0150      	lsls	r0, r2, #5
 8009596:	4602      	mov	r2, r0
 8009598:	460b      	mov	r3, r1
 800959a:	4621      	mov	r1, r4
 800959c:	1a51      	subs	r1, r2, r1
 800959e:	6139      	str	r1, [r7, #16]
 80095a0:	4629      	mov	r1, r5
 80095a2:	eb63 0301 	sbc.w	r3, r3, r1
 80095a6:	617b      	str	r3, [r7, #20]
 80095a8:	f04f 0200 	mov.w	r2, #0
 80095ac:	f04f 0300 	mov.w	r3, #0
 80095b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80095b4:	4659      	mov	r1, fp
 80095b6:	018b      	lsls	r3, r1, #6
 80095b8:	4651      	mov	r1, sl
 80095ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80095be:	4651      	mov	r1, sl
 80095c0:	018a      	lsls	r2, r1, #6
 80095c2:	4651      	mov	r1, sl
 80095c4:	ebb2 0801 	subs.w	r8, r2, r1
 80095c8:	4659      	mov	r1, fp
 80095ca:	eb63 0901 	sbc.w	r9, r3, r1
 80095ce:	f04f 0200 	mov.w	r2, #0
 80095d2:	f04f 0300 	mov.w	r3, #0
 80095d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80095da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80095de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80095e2:	4690      	mov	r8, r2
 80095e4:	4699      	mov	r9, r3
 80095e6:	4623      	mov	r3, r4
 80095e8:	eb18 0303 	adds.w	r3, r8, r3
 80095ec:	60bb      	str	r3, [r7, #8]
 80095ee:	462b      	mov	r3, r5
 80095f0:	eb49 0303 	adc.w	r3, r9, r3
 80095f4:	60fb      	str	r3, [r7, #12]
 80095f6:	f04f 0200 	mov.w	r2, #0
 80095fa:	f04f 0300 	mov.w	r3, #0
 80095fe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8009602:	4629      	mov	r1, r5
 8009604:	024b      	lsls	r3, r1, #9
 8009606:	4621      	mov	r1, r4
 8009608:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800960c:	4621      	mov	r1, r4
 800960e:	024a      	lsls	r2, r1, #9
 8009610:	4610      	mov	r0, r2
 8009612:	4619      	mov	r1, r3
 8009614:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009616:	2200      	movs	r2, #0
 8009618:	62bb      	str	r3, [r7, #40]	@ 0x28
 800961a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800961c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009620:	f7f7 fc50 	bl	8000ec4 <__aeabi_uldivmod>
 8009624:	4602      	mov	r2, r0
 8009626:	460b      	mov	r3, r1
 8009628:	4613      	mov	r3, r2
 800962a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800962c:	e058      	b.n	80096e0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800962e:	4b38      	ldr	r3, [pc, #224]	@ (8009710 <HAL_RCC_GetSysClockFreq+0x200>)
 8009630:	685b      	ldr	r3, [r3, #4]
 8009632:	099b      	lsrs	r3, r3, #6
 8009634:	2200      	movs	r2, #0
 8009636:	4618      	mov	r0, r3
 8009638:	4611      	mov	r1, r2
 800963a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800963e:	623b      	str	r3, [r7, #32]
 8009640:	2300      	movs	r3, #0
 8009642:	627b      	str	r3, [r7, #36]	@ 0x24
 8009644:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8009648:	4642      	mov	r2, r8
 800964a:	464b      	mov	r3, r9
 800964c:	f04f 0000 	mov.w	r0, #0
 8009650:	f04f 0100 	mov.w	r1, #0
 8009654:	0159      	lsls	r1, r3, #5
 8009656:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800965a:	0150      	lsls	r0, r2, #5
 800965c:	4602      	mov	r2, r0
 800965e:	460b      	mov	r3, r1
 8009660:	4641      	mov	r1, r8
 8009662:	ebb2 0a01 	subs.w	sl, r2, r1
 8009666:	4649      	mov	r1, r9
 8009668:	eb63 0b01 	sbc.w	fp, r3, r1
 800966c:	f04f 0200 	mov.w	r2, #0
 8009670:	f04f 0300 	mov.w	r3, #0
 8009674:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8009678:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800967c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8009680:	ebb2 040a 	subs.w	r4, r2, sl
 8009684:	eb63 050b 	sbc.w	r5, r3, fp
 8009688:	f04f 0200 	mov.w	r2, #0
 800968c:	f04f 0300 	mov.w	r3, #0
 8009690:	00eb      	lsls	r3, r5, #3
 8009692:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009696:	00e2      	lsls	r2, r4, #3
 8009698:	4614      	mov	r4, r2
 800969a:	461d      	mov	r5, r3
 800969c:	4643      	mov	r3, r8
 800969e:	18e3      	adds	r3, r4, r3
 80096a0:	603b      	str	r3, [r7, #0]
 80096a2:	464b      	mov	r3, r9
 80096a4:	eb45 0303 	adc.w	r3, r5, r3
 80096a8:	607b      	str	r3, [r7, #4]
 80096aa:	f04f 0200 	mov.w	r2, #0
 80096ae:	f04f 0300 	mov.w	r3, #0
 80096b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80096b6:	4629      	mov	r1, r5
 80096b8:	028b      	lsls	r3, r1, #10
 80096ba:	4621      	mov	r1, r4
 80096bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80096c0:	4621      	mov	r1, r4
 80096c2:	028a      	lsls	r2, r1, #10
 80096c4:	4610      	mov	r0, r2
 80096c6:	4619      	mov	r1, r3
 80096c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80096ca:	2200      	movs	r2, #0
 80096cc:	61bb      	str	r3, [r7, #24]
 80096ce:	61fa      	str	r2, [r7, #28]
 80096d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80096d4:	f7f7 fbf6 	bl	8000ec4 <__aeabi_uldivmod>
 80096d8:	4602      	mov	r2, r0
 80096da:	460b      	mov	r3, r1
 80096dc:	4613      	mov	r3, r2
 80096de:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80096e0:	4b0b      	ldr	r3, [pc, #44]	@ (8009710 <HAL_RCC_GetSysClockFreq+0x200>)
 80096e2:	685b      	ldr	r3, [r3, #4]
 80096e4:	0c1b      	lsrs	r3, r3, #16
 80096e6:	f003 0303 	and.w	r3, r3, #3
 80096ea:	3301      	adds	r3, #1
 80096ec:	005b      	lsls	r3, r3, #1
 80096ee:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80096f0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80096f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80096f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80096f8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80096fa:	e002      	b.n	8009702 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80096fc:	4b05      	ldr	r3, [pc, #20]	@ (8009714 <HAL_RCC_GetSysClockFreq+0x204>)
 80096fe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8009700:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009702:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8009704:	4618      	mov	r0, r3
 8009706:	3750      	adds	r7, #80	@ 0x50
 8009708:	46bd      	mov	sp, r7
 800970a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800970e:	bf00      	nop
 8009710:	40023800 	.word	0x40023800
 8009714:	00f42400 	.word	0x00f42400
 8009718:	007a1200 	.word	0x007a1200

0800971c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800971c:	b480      	push	{r7}
 800971e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009720:	4b03      	ldr	r3, [pc, #12]	@ (8009730 <HAL_RCC_GetHCLKFreq+0x14>)
 8009722:	681b      	ldr	r3, [r3, #0]
}
 8009724:	4618      	mov	r0, r3
 8009726:	46bd      	mov	sp, r7
 8009728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972c:	4770      	bx	lr
 800972e:	bf00      	nop
 8009730:	200008e8 	.word	0x200008e8

08009734 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009734:	b580      	push	{r7, lr}
 8009736:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009738:	f7ff fff0 	bl	800971c <HAL_RCC_GetHCLKFreq>
 800973c:	4602      	mov	r2, r0
 800973e:	4b05      	ldr	r3, [pc, #20]	@ (8009754 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009740:	689b      	ldr	r3, [r3, #8]
 8009742:	0a9b      	lsrs	r3, r3, #10
 8009744:	f003 0307 	and.w	r3, r3, #7
 8009748:	4903      	ldr	r1, [pc, #12]	@ (8009758 <HAL_RCC_GetPCLK1Freq+0x24>)
 800974a:	5ccb      	ldrb	r3, [r1, r3]
 800974c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009750:	4618      	mov	r0, r3
 8009752:	bd80      	pop	{r7, pc}
 8009754:	40023800 	.word	0x40023800
 8009758:	08022cf8 	.word	0x08022cf8

0800975c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800975c:	b580      	push	{r7, lr}
 800975e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009760:	f7ff ffdc 	bl	800971c <HAL_RCC_GetHCLKFreq>
 8009764:	4602      	mov	r2, r0
 8009766:	4b05      	ldr	r3, [pc, #20]	@ (800977c <HAL_RCC_GetPCLK2Freq+0x20>)
 8009768:	689b      	ldr	r3, [r3, #8]
 800976a:	0b5b      	lsrs	r3, r3, #13
 800976c:	f003 0307 	and.w	r3, r3, #7
 8009770:	4903      	ldr	r1, [pc, #12]	@ (8009780 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009772:	5ccb      	ldrb	r3, [r1, r3]
 8009774:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009778:	4618      	mov	r0, r3
 800977a:	bd80      	pop	{r7, pc}
 800977c:	40023800 	.word	0x40023800
 8009780:	08022cf8 	.word	0x08022cf8

08009784 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b082      	sub	sp, #8
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d101      	bne.n	8009796 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009792:	2301      	movs	r3, #1
 8009794:	e07b      	b.n	800988e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800979a:	2b00      	cmp	r3, #0
 800979c:	d108      	bne.n	80097b0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	685b      	ldr	r3, [r3, #4]
 80097a2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80097a6:	d009      	beq.n	80097bc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2200      	movs	r2, #0
 80097ac:	61da      	str	r2, [r3, #28]
 80097ae:	e005      	b.n	80097bc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2200      	movs	r2, #0
 80097b4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	2200      	movs	r2, #0
 80097ba:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2200      	movs	r2, #0
 80097c0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80097c8:	b2db      	uxtb	r3, r3
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d106      	bne.n	80097dc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	2200      	movs	r2, #0
 80097d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f7fc fc66 	bl	80060a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2202      	movs	r2, #2
 80097e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	681a      	ldr	r2, [r3, #0]
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80097f2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	685b      	ldr	r3, [r3, #4]
 80097f8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	689b      	ldr	r3, [r3, #8]
 8009800:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8009804:	431a      	orrs	r2, r3
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	68db      	ldr	r3, [r3, #12]
 800980a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800980e:	431a      	orrs	r2, r3
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	691b      	ldr	r3, [r3, #16]
 8009814:	f003 0302 	and.w	r3, r3, #2
 8009818:	431a      	orrs	r2, r3
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	695b      	ldr	r3, [r3, #20]
 800981e:	f003 0301 	and.w	r3, r3, #1
 8009822:	431a      	orrs	r2, r3
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	699b      	ldr	r3, [r3, #24]
 8009828:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800982c:	431a      	orrs	r2, r3
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	69db      	ldr	r3, [r3, #28]
 8009832:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009836:	431a      	orrs	r2, r3
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	6a1b      	ldr	r3, [r3, #32]
 800983c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009840:	ea42 0103 	orr.w	r1, r2, r3
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009848:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	430a      	orrs	r2, r1
 8009852:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	699b      	ldr	r3, [r3, #24]
 8009858:	0c1b      	lsrs	r3, r3, #16
 800985a:	f003 0104 	and.w	r1, r3, #4
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009862:	f003 0210 	and.w	r2, r3, #16
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	430a      	orrs	r2, r1
 800986c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	69da      	ldr	r2, [r3, #28]
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800987c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2200      	movs	r2, #0
 8009882:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2201      	movs	r2, #1
 8009888:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800988c:	2300      	movs	r3, #0
}
 800988e:	4618      	mov	r0, r3
 8009890:	3708      	adds	r7, #8
 8009892:	46bd      	mov	sp, r7
 8009894:	bd80      	pop	{r7, pc}

08009896 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009896:	b580      	push	{r7, lr}
 8009898:	b082      	sub	sp, #8
 800989a:	af00      	add	r7, sp, #0
 800989c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d101      	bne.n	80098a8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80098a4:	2301      	movs	r3, #1
 80098a6:	e041      	b.n	800992c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80098ae:	b2db      	uxtb	r3, r3
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d106      	bne.n	80098c2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2200      	movs	r2, #0
 80098b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80098bc:	6878      	ldr	r0, [r7, #4]
 80098be:	f7fc fc3b 	bl	8006138 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	2202      	movs	r2, #2
 80098c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681a      	ldr	r2, [r3, #0]
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	3304      	adds	r3, #4
 80098d2:	4619      	mov	r1, r3
 80098d4:	4610      	mov	r0, r2
 80098d6:	f000 fbd1 	bl	800a07c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	2201      	movs	r2, #1
 80098de:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	2201      	movs	r2, #1
 80098e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	2201      	movs	r2, #1
 80098ee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	2201      	movs	r2, #1
 80098f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	2201      	movs	r2, #1
 80098fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	2201      	movs	r2, #1
 8009906:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	2201      	movs	r2, #1
 800990e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	2201      	movs	r2, #1
 8009916:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2201      	movs	r2, #1
 800991e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	2201      	movs	r2, #1
 8009926:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800992a:	2300      	movs	r3, #0
}
 800992c:	4618      	mov	r0, r3
 800992e:	3708      	adds	r7, #8
 8009930:	46bd      	mov	sp, r7
 8009932:	bd80      	pop	{r7, pc}

08009934 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009934:	b480      	push	{r7}
 8009936:	b085      	sub	sp, #20
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009942:	b2db      	uxtb	r3, r3
 8009944:	2b01      	cmp	r3, #1
 8009946:	d001      	beq.n	800994c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009948:	2301      	movs	r3, #1
 800994a:	e04e      	b.n	80099ea <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	2202      	movs	r2, #2
 8009950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	68da      	ldr	r2, [r3, #12]
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	f042 0201 	orr.w	r2, r2, #1
 8009962:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	4a23      	ldr	r2, [pc, #140]	@ (80099f8 <HAL_TIM_Base_Start_IT+0xc4>)
 800996a:	4293      	cmp	r3, r2
 800996c:	d022      	beq.n	80099b4 <HAL_TIM_Base_Start_IT+0x80>
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009976:	d01d      	beq.n	80099b4 <HAL_TIM_Base_Start_IT+0x80>
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	4a1f      	ldr	r2, [pc, #124]	@ (80099fc <HAL_TIM_Base_Start_IT+0xc8>)
 800997e:	4293      	cmp	r3, r2
 8009980:	d018      	beq.n	80099b4 <HAL_TIM_Base_Start_IT+0x80>
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	4a1e      	ldr	r2, [pc, #120]	@ (8009a00 <HAL_TIM_Base_Start_IT+0xcc>)
 8009988:	4293      	cmp	r3, r2
 800998a:	d013      	beq.n	80099b4 <HAL_TIM_Base_Start_IT+0x80>
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	4a1c      	ldr	r2, [pc, #112]	@ (8009a04 <HAL_TIM_Base_Start_IT+0xd0>)
 8009992:	4293      	cmp	r3, r2
 8009994:	d00e      	beq.n	80099b4 <HAL_TIM_Base_Start_IT+0x80>
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	4a1b      	ldr	r2, [pc, #108]	@ (8009a08 <HAL_TIM_Base_Start_IT+0xd4>)
 800999c:	4293      	cmp	r3, r2
 800999e:	d009      	beq.n	80099b4 <HAL_TIM_Base_Start_IT+0x80>
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	4a19      	ldr	r2, [pc, #100]	@ (8009a0c <HAL_TIM_Base_Start_IT+0xd8>)
 80099a6:	4293      	cmp	r3, r2
 80099a8:	d004      	beq.n	80099b4 <HAL_TIM_Base_Start_IT+0x80>
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	4a18      	ldr	r2, [pc, #96]	@ (8009a10 <HAL_TIM_Base_Start_IT+0xdc>)
 80099b0:	4293      	cmp	r3, r2
 80099b2:	d111      	bne.n	80099d8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	689b      	ldr	r3, [r3, #8]
 80099ba:	f003 0307 	and.w	r3, r3, #7
 80099be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	2b06      	cmp	r3, #6
 80099c4:	d010      	beq.n	80099e8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	681a      	ldr	r2, [r3, #0]
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	f042 0201 	orr.w	r2, r2, #1
 80099d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80099d6:	e007      	b.n	80099e8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	681a      	ldr	r2, [r3, #0]
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	f042 0201 	orr.w	r2, r2, #1
 80099e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80099e8:	2300      	movs	r3, #0
}
 80099ea:	4618      	mov	r0, r3
 80099ec:	3714      	adds	r7, #20
 80099ee:	46bd      	mov	sp, r7
 80099f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f4:	4770      	bx	lr
 80099f6:	bf00      	nop
 80099f8:	40010000 	.word	0x40010000
 80099fc:	40000400 	.word	0x40000400
 8009a00:	40000800 	.word	0x40000800
 8009a04:	40000c00 	.word	0x40000c00
 8009a08:	40010400 	.word	0x40010400
 8009a0c:	40014000 	.word	0x40014000
 8009a10:	40001800 	.word	0x40001800

08009a14 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8009a14:	b480      	push	{r7}
 8009a16:	b083      	sub	sp, #12
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	68da      	ldr	r2, [r3, #12]
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	f022 0201 	bic.w	r2, r2, #1
 8009a2a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	6a1a      	ldr	r2, [r3, #32]
 8009a32:	f241 1311 	movw	r3, #4369	@ 0x1111
 8009a36:	4013      	ands	r3, r2
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d10f      	bne.n	8009a5c <HAL_TIM_Base_Stop_IT+0x48>
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	6a1a      	ldr	r2, [r3, #32]
 8009a42:	f240 4344 	movw	r3, #1092	@ 0x444
 8009a46:	4013      	ands	r3, r2
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d107      	bne.n	8009a5c <HAL_TIM_Base_Stop_IT+0x48>
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	681a      	ldr	r2, [r3, #0]
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	f022 0201 	bic.w	r2, r2, #1
 8009a5a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2201      	movs	r2, #1
 8009a60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8009a64:	2300      	movs	r3, #0
}
 8009a66:	4618      	mov	r0, r3
 8009a68:	370c      	adds	r7, #12
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a70:	4770      	bx	lr

08009a72 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009a72:	b580      	push	{r7, lr}
 8009a74:	b082      	sub	sp, #8
 8009a76:	af00      	add	r7, sp, #0
 8009a78:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d101      	bne.n	8009a84 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009a80:	2301      	movs	r3, #1
 8009a82:	e041      	b.n	8009b08 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009a8a:	b2db      	uxtb	r3, r3
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d106      	bne.n	8009a9e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2200      	movs	r2, #0
 8009a94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009a98:	6878      	ldr	r0, [r7, #4]
 8009a9a:	f000 f839 	bl	8009b10 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	2202      	movs	r2, #2
 8009aa2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681a      	ldr	r2, [r3, #0]
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	3304      	adds	r3, #4
 8009aae:	4619      	mov	r1, r3
 8009ab0:	4610      	mov	r0, r2
 8009ab2:	f000 fae3 	bl	800a07c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	2201      	movs	r2, #1
 8009aba:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	2201      	movs	r2, #1
 8009ac2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	2201      	movs	r2, #1
 8009aca:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	2201      	movs	r2, #1
 8009ad2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	2201      	movs	r2, #1
 8009ada:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	2201      	movs	r2, #1
 8009ae2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	2201      	movs	r2, #1
 8009aea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	2201      	movs	r2, #1
 8009af2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	2201      	movs	r2, #1
 8009afa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	2201      	movs	r2, #1
 8009b02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009b06:	2300      	movs	r3, #0
}
 8009b08:	4618      	mov	r0, r3
 8009b0a:	3708      	adds	r7, #8
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	bd80      	pop	{r7, pc}

08009b10 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009b10:	b480      	push	{r7}
 8009b12:	b083      	sub	sp, #12
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009b18:	bf00      	nop
 8009b1a:	370c      	adds	r7, #12
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b22:	4770      	bx	lr

08009b24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b084      	sub	sp, #16
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	68db      	ldr	r3, [r3, #12]
 8009b32:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	691b      	ldr	r3, [r3, #16]
 8009b3a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009b3c:	68bb      	ldr	r3, [r7, #8]
 8009b3e:	f003 0302 	and.w	r3, r3, #2
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d020      	beq.n	8009b88 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	f003 0302 	and.w	r3, r3, #2
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d01b      	beq.n	8009b88 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	f06f 0202 	mvn.w	r2, #2
 8009b58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	2201      	movs	r2, #1
 8009b5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	699b      	ldr	r3, [r3, #24]
 8009b66:	f003 0303 	and.w	r3, r3, #3
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d003      	beq.n	8009b76 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009b6e:	6878      	ldr	r0, [r7, #4]
 8009b70:	f000 fa65 	bl	800a03e <HAL_TIM_IC_CaptureCallback>
 8009b74:	e005      	b.n	8009b82 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b76:	6878      	ldr	r0, [r7, #4]
 8009b78:	f000 fa57 	bl	800a02a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b7c:	6878      	ldr	r0, [r7, #4]
 8009b7e:	f000 fa68 	bl	800a052 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	2200      	movs	r2, #0
 8009b86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009b88:	68bb      	ldr	r3, [r7, #8]
 8009b8a:	f003 0304 	and.w	r3, r3, #4
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d020      	beq.n	8009bd4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	f003 0304 	and.w	r3, r3, #4
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d01b      	beq.n	8009bd4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	f06f 0204 	mvn.w	r2, #4
 8009ba4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	2202      	movs	r2, #2
 8009baa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	699b      	ldr	r3, [r3, #24]
 8009bb2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d003      	beq.n	8009bc2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009bba:	6878      	ldr	r0, [r7, #4]
 8009bbc:	f000 fa3f 	bl	800a03e <HAL_TIM_IC_CaptureCallback>
 8009bc0:	e005      	b.n	8009bce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009bc2:	6878      	ldr	r0, [r7, #4]
 8009bc4:	f000 fa31 	bl	800a02a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009bc8:	6878      	ldr	r0, [r7, #4]
 8009bca:	f000 fa42 	bl	800a052 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009bd4:	68bb      	ldr	r3, [r7, #8]
 8009bd6:	f003 0308 	and.w	r3, r3, #8
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d020      	beq.n	8009c20 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	f003 0308 	and.w	r3, r3, #8
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d01b      	beq.n	8009c20 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	f06f 0208 	mvn.w	r2, #8
 8009bf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	2204      	movs	r2, #4
 8009bf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	69db      	ldr	r3, [r3, #28]
 8009bfe:	f003 0303 	and.w	r3, r3, #3
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d003      	beq.n	8009c0e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c06:	6878      	ldr	r0, [r7, #4]
 8009c08:	f000 fa19 	bl	800a03e <HAL_TIM_IC_CaptureCallback>
 8009c0c:	e005      	b.n	8009c1a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	f000 fa0b 	bl	800a02a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c14:	6878      	ldr	r0, [r7, #4]
 8009c16:	f000 fa1c 	bl	800a052 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009c20:	68bb      	ldr	r3, [r7, #8]
 8009c22:	f003 0310 	and.w	r3, r3, #16
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d020      	beq.n	8009c6c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	f003 0310 	and.w	r3, r3, #16
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d01b      	beq.n	8009c6c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	f06f 0210 	mvn.w	r2, #16
 8009c3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	2208      	movs	r2, #8
 8009c42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	69db      	ldr	r3, [r3, #28]
 8009c4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d003      	beq.n	8009c5a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	f000 f9f3 	bl	800a03e <HAL_TIM_IC_CaptureCallback>
 8009c58:	e005      	b.n	8009c66 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c5a:	6878      	ldr	r0, [r7, #4]
 8009c5c:	f000 f9e5 	bl	800a02a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c60:	6878      	ldr	r0, [r7, #4]
 8009c62:	f000 f9f6 	bl	800a052 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	2200      	movs	r2, #0
 8009c6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009c6c:	68bb      	ldr	r3, [r7, #8]
 8009c6e:	f003 0301 	and.w	r3, r3, #1
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d00c      	beq.n	8009c90 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	f003 0301 	and.w	r3, r3, #1
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d007      	beq.n	8009c90 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	f06f 0201 	mvn.w	r2, #1
 8009c88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009c8a:	6878      	ldr	r0, [r7, #4]
 8009c8c:	f000 f9c3 	bl	800a016 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8009c90:	68bb      	ldr	r3, [r7, #8]
 8009c92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d00c      	beq.n	8009cb4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d007      	beq.n	8009cb4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8009cac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009cae:	6878      	ldr	r0, [r7, #4]
 8009cb0:	f000 fd60 	bl	800a774 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009cb4:	68bb      	ldr	r3, [r7, #8]
 8009cb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d00c      	beq.n	8009cd8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d007      	beq.n	8009cd8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009cd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009cd2:	6878      	ldr	r0, [r7, #4]
 8009cd4:	f000 f9c7 	bl	800a066 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	f003 0320 	and.w	r3, r3, #32
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d00c      	beq.n	8009cfc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	f003 0320 	and.w	r3, r3, #32
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d007      	beq.n	8009cfc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	f06f 0220 	mvn.w	r2, #32
 8009cf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009cf6:	6878      	ldr	r0, [r7, #4]
 8009cf8:	f000 fd32 	bl	800a760 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009cfc:	bf00      	nop
 8009cfe:	3710      	adds	r7, #16
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bd80      	pop	{r7, pc}

08009d04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b086      	sub	sp, #24
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	60f8      	str	r0, [r7, #12]
 8009d0c:	60b9      	str	r1, [r7, #8]
 8009d0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009d10:	2300      	movs	r3, #0
 8009d12:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009d1a:	2b01      	cmp	r3, #1
 8009d1c:	d101      	bne.n	8009d22 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009d1e:	2302      	movs	r3, #2
 8009d20:	e0ae      	b.n	8009e80 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	2201      	movs	r2, #1
 8009d26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	2b0c      	cmp	r3, #12
 8009d2e:	f200 809f 	bhi.w	8009e70 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009d32:	a201      	add	r2, pc, #4	@ (adr r2, 8009d38 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d38:	08009d6d 	.word	0x08009d6d
 8009d3c:	08009e71 	.word	0x08009e71
 8009d40:	08009e71 	.word	0x08009e71
 8009d44:	08009e71 	.word	0x08009e71
 8009d48:	08009dad 	.word	0x08009dad
 8009d4c:	08009e71 	.word	0x08009e71
 8009d50:	08009e71 	.word	0x08009e71
 8009d54:	08009e71 	.word	0x08009e71
 8009d58:	08009def 	.word	0x08009def
 8009d5c:	08009e71 	.word	0x08009e71
 8009d60:	08009e71 	.word	0x08009e71
 8009d64:	08009e71 	.word	0x08009e71
 8009d68:	08009e2f 	.word	0x08009e2f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	68b9      	ldr	r1, [r7, #8]
 8009d72:	4618      	mov	r0, r3
 8009d74:	f000 fa2e 	bl	800a1d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	699a      	ldr	r2, [r3, #24]
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	f042 0208 	orr.w	r2, r2, #8
 8009d86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	699a      	ldr	r2, [r3, #24]
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	f022 0204 	bic.w	r2, r2, #4
 8009d96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	6999      	ldr	r1, [r3, #24]
 8009d9e:	68bb      	ldr	r3, [r7, #8]
 8009da0:	691a      	ldr	r2, [r3, #16]
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	430a      	orrs	r2, r1
 8009da8:	619a      	str	r2, [r3, #24]
      break;
 8009daa:	e064      	b.n	8009e76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	68b9      	ldr	r1, [r7, #8]
 8009db2:	4618      	mov	r0, r3
 8009db4:	f000 fa7e 	bl	800a2b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	699a      	ldr	r2, [r3, #24]
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009dc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	699a      	ldr	r2, [r3, #24]
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009dd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	6999      	ldr	r1, [r3, #24]
 8009dde:	68bb      	ldr	r3, [r7, #8]
 8009de0:	691b      	ldr	r3, [r3, #16]
 8009de2:	021a      	lsls	r2, r3, #8
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	430a      	orrs	r2, r1
 8009dea:	619a      	str	r2, [r3, #24]
      break;
 8009dec:	e043      	b.n	8009e76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	68b9      	ldr	r1, [r7, #8]
 8009df4:	4618      	mov	r0, r3
 8009df6:	f000 fad3 	bl	800a3a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	69da      	ldr	r2, [r3, #28]
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	f042 0208 	orr.w	r2, r2, #8
 8009e08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	69da      	ldr	r2, [r3, #28]
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	f022 0204 	bic.w	r2, r2, #4
 8009e18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	69d9      	ldr	r1, [r3, #28]
 8009e20:	68bb      	ldr	r3, [r7, #8]
 8009e22:	691a      	ldr	r2, [r3, #16]
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	430a      	orrs	r2, r1
 8009e2a:	61da      	str	r2, [r3, #28]
      break;
 8009e2c:	e023      	b.n	8009e76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	68b9      	ldr	r1, [r7, #8]
 8009e34:	4618      	mov	r0, r3
 8009e36:	f000 fb27 	bl	800a488 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	69da      	ldr	r2, [r3, #28]
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009e48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	69da      	ldr	r2, [r3, #28]
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009e58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	69d9      	ldr	r1, [r3, #28]
 8009e60:	68bb      	ldr	r3, [r7, #8]
 8009e62:	691b      	ldr	r3, [r3, #16]
 8009e64:	021a      	lsls	r2, r3, #8
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	430a      	orrs	r2, r1
 8009e6c:	61da      	str	r2, [r3, #28]
      break;
 8009e6e:	e002      	b.n	8009e76 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009e70:	2301      	movs	r3, #1
 8009e72:	75fb      	strb	r3, [r7, #23]
      break;
 8009e74:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	2200      	movs	r2, #0
 8009e7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009e7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e80:	4618      	mov	r0, r3
 8009e82:	3718      	adds	r7, #24
 8009e84:	46bd      	mov	sp, r7
 8009e86:	bd80      	pop	{r7, pc}

08009e88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b084      	sub	sp, #16
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
 8009e90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009e92:	2300      	movs	r3, #0
 8009e94:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009e9c:	2b01      	cmp	r3, #1
 8009e9e:	d101      	bne.n	8009ea4 <HAL_TIM_ConfigClockSource+0x1c>
 8009ea0:	2302      	movs	r3, #2
 8009ea2:	e0b4      	b.n	800a00e <HAL_TIM_ConfigClockSource+0x186>
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2201      	movs	r2, #1
 8009ea8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2202      	movs	r2, #2
 8009eb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	689b      	ldr	r3, [r3, #8]
 8009eba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009ebc:	68bb      	ldr	r3, [r7, #8]
 8009ebe:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009ec2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009ec4:	68bb      	ldr	r3, [r7, #8]
 8009ec6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009eca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	68ba      	ldr	r2, [r7, #8]
 8009ed2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009edc:	d03e      	beq.n	8009f5c <HAL_TIM_ConfigClockSource+0xd4>
 8009ede:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009ee2:	f200 8087 	bhi.w	8009ff4 <HAL_TIM_ConfigClockSource+0x16c>
 8009ee6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009eea:	f000 8086 	beq.w	8009ffa <HAL_TIM_ConfigClockSource+0x172>
 8009eee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009ef2:	d87f      	bhi.n	8009ff4 <HAL_TIM_ConfigClockSource+0x16c>
 8009ef4:	2b70      	cmp	r3, #112	@ 0x70
 8009ef6:	d01a      	beq.n	8009f2e <HAL_TIM_ConfigClockSource+0xa6>
 8009ef8:	2b70      	cmp	r3, #112	@ 0x70
 8009efa:	d87b      	bhi.n	8009ff4 <HAL_TIM_ConfigClockSource+0x16c>
 8009efc:	2b60      	cmp	r3, #96	@ 0x60
 8009efe:	d050      	beq.n	8009fa2 <HAL_TIM_ConfigClockSource+0x11a>
 8009f00:	2b60      	cmp	r3, #96	@ 0x60
 8009f02:	d877      	bhi.n	8009ff4 <HAL_TIM_ConfigClockSource+0x16c>
 8009f04:	2b50      	cmp	r3, #80	@ 0x50
 8009f06:	d03c      	beq.n	8009f82 <HAL_TIM_ConfigClockSource+0xfa>
 8009f08:	2b50      	cmp	r3, #80	@ 0x50
 8009f0a:	d873      	bhi.n	8009ff4 <HAL_TIM_ConfigClockSource+0x16c>
 8009f0c:	2b40      	cmp	r3, #64	@ 0x40
 8009f0e:	d058      	beq.n	8009fc2 <HAL_TIM_ConfigClockSource+0x13a>
 8009f10:	2b40      	cmp	r3, #64	@ 0x40
 8009f12:	d86f      	bhi.n	8009ff4 <HAL_TIM_ConfigClockSource+0x16c>
 8009f14:	2b30      	cmp	r3, #48	@ 0x30
 8009f16:	d064      	beq.n	8009fe2 <HAL_TIM_ConfigClockSource+0x15a>
 8009f18:	2b30      	cmp	r3, #48	@ 0x30
 8009f1a:	d86b      	bhi.n	8009ff4 <HAL_TIM_ConfigClockSource+0x16c>
 8009f1c:	2b20      	cmp	r3, #32
 8009f1e:	d060      	beq.n	8009fe2 <HAL_TIM_ConfigClockSource+0x15a>
 8009f20:	2b20      	cmp	r3, #32
 8009f22:	d867      	bhi.n	8009ff4 <HAL_TIM_ConfigClockSource+0x16c>
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d05c      	beq.n	8009fe2 <HAL_TIM_ConfigClockSource+0x15a>
 8009f28:	2b10      	cmp	r3, #16
 8009f2a:	d05a      	beq.n	8009fe2 <HAL_TIM_ConfigClockSource+0x15a>
 8009f2c:	e062      	b.n	8009ff4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009f32:	683b      	ldr	r3, [r7, #0]
 8009f34:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009f3a:	683b      	ldr	r3, [r7, #0]
 8009f3c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009f3e:	f000 fb73 	bl	800a628 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	689b      	ldr	r3, [r3, #8]
 8009f48:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009f4a:	68bb      	ldr	r3, [r7, #8]
 8009f4c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009f50:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	68ba      	ldr	r2, [r7, #8]
 8009f58:	609a      	str	r2, [r3, #8]
      break;
 8009f5a:	e04f      	b.n	8009ffc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009f60:	683b      	ldr	r3, [r7, #0]
 8009f62:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009f64:	683b      	ldr	r3, [r7, #0]
 8009f66:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009f6c:	f000 fb5c 	bl	800a628 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	689a      	ldr	r2, [r3, #8]
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009f7e:	609a      	str	r2, [r3, #8]
      break;
 8009f80:	e03c      	b.n	8009ffc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009f86:	683b      	ldr	r3, [r7, #0]
 8009f88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009f8e:	461a      	mov	r2, r3
 8009f90:	f000 fad0 	bl	800a534 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	2150      	movs	r1, #80	@ 0x50
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	f000 fb29 	bl	800a5f2 <TIM_ITRx_SetConfig>
      break;
 8009fa0:	e02c      	b.n	8009ffc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009fa6:	683b      	ldr	r3, [r7, #0]
 8009fa8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009fae:	461a      	mov	r2, r3
 8009fb0:	f000 faef 	bl	800a592 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	2160      	movs	r1, #96	@ 0x60
 8009fba:	4618      	mov	r0, r3
 8009fbc:	f000 fb19 	bl	800a5f2 <TIM_ITRx_SetConfig>
      break;
 8009fc0:	e01c      	b.n	8009ffc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009fca:	683b      	ldr	r3, [r7, #0]
 8009fcc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009fce:	461a      	mov	r2, r3
 8009fd0:	f000 fab0 	bl	800a534 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	2140      	movs	r1, #64	@ 0x40
 8009fda:	4618      	mov	r0, r3
 8009fdc:	f000 fb09 	bl	800a5f2 <TIM_ITRx_SetConfig>
      break;
 8009fe0:	e00c      	b.n	8009ffc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681a      	ldr	r2, [r3, #0]
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	4619      	mov	r1, r3
 8009fec:	4610      	mov	r0, r2
 8009fee:	f000 fb00 	bl	800a5f2 <TIM_ITRx_SetConfig>
      break;
 8009ff2:	e003      	b.n	8009ffc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009ff4:	2301      	movs	r3, #1
 8009ff6:	73fb      	strb	r3, [r7, #15]
      break;
 8009ff8:	e000      	b.n	8009ffc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009ffa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2201      	movs	r2, #1
 800a000:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2200      	movs	r2, #0
 800a008:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a00c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a00e:	4618      	mov	r0, r3
 800a010:	3710      	adds	r7, #16
 800a012:	46bd      	mov	sp, r7
 800a014:	bd80      	pop	{r7, pc}

0800a016 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a016:	b480      	push	{r7}
 800a018:	b083      	sub	sp, #12
 800a01a:	af00      	add	r7, sp, #0
 800a01c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800a01e:	bf00      	nop
 800a020:	370c      	adds	r7, #12
 800a022:	46bd      	mov	sp, r7
 800a024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a028:	4770      	bx	lr

0800a02a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a02a:	b480      	push	{r7}
 800a02c:	b083      	sub	sp, #12
 800a02e:	af00      	add	r7, sp, #0
 800a030:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a032:	bf00      	nop
 800a034:	370c      	adds	r7, #12
 800a036:	46bd      	mov	sp, r7
 800a038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03c:	4770      	bx	lr

0800a03e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a03e:	b480      	push	{r7}
 800a040:	b083      	sub	sp, #12
 800a042:	af00      	add	r7, sp, #0
 800a044:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a046:	bf00      	nop
 800a048:	370c      	adds	r7, #12
 800a04a:	46bd      	mov	sp, r7
 800a04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a050:	4770      	bx	lr

0800a052 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a052:	b480      	push	{r7}
 800a054:	b083      	sub	sp, #12
 800a056:	af00      	add	r7, sp, #0
 800a058:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a05a:	bf00      	nop
 800a05c:	370c      	adds	r7, #12
 800a05e:	46bd      	mov	sp, r7
 800a060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a064:	4770      	bx	lr

0800a066 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a066:	b480      	push	{r7}
 800a068:	b083      	sub	sp, #12
 800a06a:	af00      	add	r7, sp, #0
 800a06c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a06e:	bf00      	nop
 800a070:	370c      	adds	r7, #12
 800a072:	46bd      	mov	sp, r7
 800a074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a078:	4770      	bx	lr
	...

0800a07c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a07c:	b480      	push	{r7}
 800a07e:	b085      	sub	sp, #20
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]
 800a084:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	4a46      	ldr	r2, [pc, #280]	@ (800a1a8 <TIM_Base_SetConfig+0x12c>)
 800a090:	4293      	cmp	r3, r2
 800a092:	d013      	beq.n	800a0bc <TIM_Base_SetConfig+0x40>
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a09a:	d00f      	beq.n	800a0bc <TIM_Base_SetConfig+0x40>
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	4a43      	ldr	r2, [pc, #268]	@ (800a1ac <TIM_Base_SetConfig+0x130>)
 800a0a0:	4293      	cmp	r3, r2
 800a0a2:	d00b      	beq.n	800a0bc <TIM_Base_SetConfig+0x40>
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	4a42      	ldr	r2, [pc, #264]	@ (800a1b0 <TIM_Base_SetConfig+0x134>)
 800a0a8:	4293      	cmp	r3, r2
 800a0aa:	d007      	beq.n	800a0bc <TIM_Base_SetConfig+0x40>
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	4a41      	ldr	r2, [pc, #260]	@ (800a1b4 <TIM_Base_SetConfig+0x138>)
 800a0b0:	4293      	cmp	r3, r2
 800a0b2:	d003      	beq.n	800a0bc <TIM_Base_SetConfig+0x40>
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	4a40      	ldr	r2, [pc, #256]	@ (800a1b8 <TIM_Base_SetConfig+0x13c>)
 800a0b8:	4293      	cmp	r3, r2
 800a0ba:	d108      	bne.n	800a0ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a0c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a0c4:	683b      	ldr	r3, [r7, #0]
 800a0c6:	685b      	ldr	r3, [r3, #4]
 800a0c8:	68fa      	ldr	r2, [r7, #12]
 800a0ca:	4313      	orrs	r3, r2
 800a0cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	4a35      	ldr	r2, [pc, #212]	@ (800a1a8 <TIM_Base_SetConfig+0x12c>)
 800a0d2:	4293      	cmp	r3, r2
 800a0d4:	d02b      	beq.n	800a12e <TIM_Base_SetConfig+0xb2>
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a0dc:	d027      	beq.n	800a12e <TIM_Base_SetConfig+0xb2>
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	4a32      	ldr	r2, [pc, #200]	@ (800a1ac <TIM_Base_SetConfig+0x130>)
 800a0e2:	4293      	cmp	r3, r2
 800a0e4:	d023      	beq.n	800a12e <TIM_Base_SetConfig+0xb2>
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	4a31      	ldr	r2, [pc, #196]	@ (800a1b0 <TIM_Base_SetConfig+0x134>)
 800a0ea:	4293      	cmp	r3, r2
 800a0ec:	d01f      	beq.n	800a12e <TIM_Base_SetConfig+0xb2>
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	4a30      	ldr	r2, [pc, #192]	@ (800a1b4 <TIM_Base_SetConfig+0x138>)
 800a0f2:	4293      	cmp	r3, r2
 800a0f4:	d01b      	beq.n	800a12e <TIM_Base_SetConfig+0xb2>
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	4a2f      	ldr	r2, [pc, #188]	@ (800a1b8 <TIM_Base_SetConfig+0x13c>)
 800a0fa:	4293      	cmp	r3, r2
 800a0fc:	d017      	beq.n	800a12e <TIM_Base_SetConfig+0xb2>
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	4a2e      	ldr	r2, [pc, #184]	@ (800a1bc <TIM_Base_SetConfig+0x140>)
 800a102:	4293      	cmp	r3, r2
 800a104:	d013      	beq.n	800a12e <TIM_Base_SetConfig+0xb2>
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	4a2d      	ldr	r2, [pc, #180]	@ (800a1c0 <TIM_Base_SetConfig+0x144>)
 800a10a:	4293      	cmp	r3, r2
 800a10c:	d00f      	beq.n	800a12e <TIM_Base_SetConfig+0xb2>
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	4a2c      	ldr	r2, [pc, #176]	@ (800a1c4 <TIM_Base_SetConfig+0x148>)
 800a112:	4293      	cmp	r3, r2
 800a114:	d00b      	beq.n	800a12e <TIM_Base_SetConfig+0xb2>
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	4a2b      	ldr	r2, [pc, #172]	@ (800a1c8 <TIM_Base_SetConfig+0x14c>)
 800a11a:	4293      	cmp	r3, r2
 800a11c:	d007      	beq.n	800a12e <TIM_Base_SetConfig+0xb2>
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	4a2a      	ldr	r2, [pc, #168]	@ (800a1cc <TIM_Base_SetConfig+0x150>)
 800a122:	4293      	cmp	r3, r2
 800a124:	d003      	beq.n	800a12e <TIM_Base_SetConfig+0xb2>
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	4a29      	ldr	r2, [pc, #164]	@ (800a1d0 <TIM_Base_SetConfig+0x154>)
 800a12a:	4293      	cmp	r3, r2
 800a12c:	d108      	bne.n	800a140 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a134:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a136:	683b      	ldr	r3, [r7, #0]
 800a138:	68db      	ldr	r3, [r3, #12]
 800a13a:	68fa      	ldr	r2, [r7, #12]
 800a13c:	4313      	orrs	r3, r2
 800a13e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a146:	683b      	ldr	r3, [r7, #0]
 800a148:	695b      	ldr	r3, [r3, #20]
 800a14a:	4313      	orrs	r3, r2
 800a14c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	68fa      	ldr	r2, [r7, #12]
 800a152:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a154:	683b      	ldr	r3, [r7, #0]
 800a156:	689a      	ldr	r2, [r3, #8]
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a15c:	683b      	ldr	r3, [r7, #0]
 800a15e:	681a      	ldr	r2, [r3, #0]
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	4a10      	ldr	r2, [pc, #64]	@ (800a1a8 <TIM_Base_SetConfig+0x12c>)
 800a168:	4293      	cmp	r3, r2
 800a16a:	d003      	beq.n	800a174 <TIM_Base_SetConfig+0xf8>
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	4a12      	ldr	r2, [pc, #72]	@ (800a1b8 <TIM_Base_SetConfig+0x13c>)
 800a170:	4293      	cmp	r3, r2
 800a172:	d103      	bne.n	800a17c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a174:	683b      	ldr	r3, [r7, #0]
 800a176:	691a      	ldr	r2, [r3, #16]
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2201      	movs	r2, #1
 800a180:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	691b      	ldr	r3, [r3, #16]
 800a186:	f003 0301 	and.w	r3, r3, #1
 800a18a:	2b01      	cmp	r3, #1
 800a18c:	d105      	bne.n	800a19a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	691b      	ldr	r3, [r3, #16]
 800a192:	f023 0201 	bic.w	r2, r3, #1
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	611a      	str	r2, [r3, #16]
  }
}
 800a19a:	bf00      	nop
 800a19c:	3714      	adds	r7, #20
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a4:	4770      	bx	lr
 800a1a6:	bf00      	nop
 800a1a8:	40010000 	.word	0x40010000
 800a1ac:	40000400 	.word	0x40000400
 800a1b0:	40000800 	.word	0x40000800
 800a1b4:	40000c00 	.word	0x40000c00
 800a1b8:	40010400 	.word	0x40010400
 800a1bc:	40014000 	.word	0x40014000
 800a1c0:	40014400 	.word	0x40014400
 800a1c4:	40014800 	.word	0x40014800
 800a1c8:	40001800 	.word	0x40001800
 800a1cc:	40001c00 	.word	0x40001c00
 800a1d0:	40002000 	.word	0x40002000

0800a1d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a1d4:	b480      	push	{r7}
 800a1d6:	b087      	sub	sp, #28
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
 800a1dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	6a1b      	ldr	r3, [r3, #32]
 800a1e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	6a1b      	ldr	r3, [r3, #32]
 800a1e8:	f023 0201 	bic.w	r2, r3, #1
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	685b      	ldr	r3, [r3, #4]
 800a1f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	699b      	ldr	r3, [r3, #24]
 800a1fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a202:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	f023 0303 	bic.w	r3, r3, #3
 800a20a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	68fa      	ldr	r2, [r7, #12]
 800a212:	4313      	orrs	r3, r2
 800a214:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a216:	697b      	ldr	r3, [r7, #20]
 800a218:	f023 0302 	bic.w	r3, r3, #2
 800a21c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	689b      	ldr	r3, [r3, #8]
 800a222:	697a      	ldr	r2, [r7, #20]
 800a224:	4313      	orrs	r3, r2
 800a226:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	4a20      	ldr	r2, [pc, #128]	@ (800a2ac <TIM_OC1_SetConfig+0xd8>)
 800a22c:	4293      	cmp	r3, r2
 800a22e:	d003      	beq.n	800a238 <TIM_OC1_SetConfig+0x64>
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	4a1f      	ldr	r2, [pc, #124]	@ (800a2b0 <TIM_OC1_SetConfig+0xdc>)
 800a234:	4293      	cmp	r3, r2
 800a236:	d10c      	bne.n	800a252 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a238:	697b      	ldr	r3, [r7, #20]
 800a23a:	f023 0308 	bic.w	r3, r3, #8
 800a23e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	68db      	ldr	r3, [r3, #12]
 800a244:	697a      	ldr	r2, [r7, #20]
 800a246:	4313      	orrs	r3, r2
 800a248:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a24a:	697b      	ldr	r3, [r7, #20]
 800a24c:	f023 0304 	bic.w	r3, r3, #4
 800a250:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	4a15      	ldr	r2, [pc, #84]	@ (800a2ac <TIM_OC1_SetConfig+0xd8>)
 800a256:	4293      	cmp	r3, r2
 800a258:	d003      	beq.n	800a262 <TIM_OC1_SetConfig+0x8e>
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	4a14      	ldr	r2, [pc, #80]	@ (800a2b0 <TIM_OC1_SetConfig+0xdc>)
 800a25e:	4293      	cmp	r3, r2
 800a260:	d111      	bne.n	800a286 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a262:	693b      	ldr	r3, [r7, #16]
 800a264:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a268:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a26a:	693b      	ldr	r3, [r7, #16]
 800a26c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a270:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	695b      	ldr	r3, [r3, #20]
 800a276:	693a      	ldr	r2, [r7, #16]
 800a278:	4313      	orrs	r3, r2
 800a27a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a27c:	683b      	ldr	r3, [r7, #0]
 800a27e:	699b      	ldr	r3, [r3, #24]
 800a280:	693a      	ldr	r2, [r7, #16]
 800a282:	4313      	orrs	r3, r2
 800a284:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	693a      	ldr	r2, [r7, #16]
 800a28a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	68fa      	ldr	r2, [r7, #12]
 800a290:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	685a      	ldr	r2, [r3, #4]
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	697a      	ldr	r2, [r7, #20]
 800a29e:	621a      	str	r2, [r3, #32]
}
 800a2a0:	bf00      	nop
 800a2a2:	371c      	adds	r7, #28
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2aa:	4770      	bx	lr
 800a2ac:	40010000 	.word	0x40010000
 800a2b0:	40010400 	.word	0x40010400

0800a2b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a2b4:	b480      	push	{r7}
 800a2b6:	b087      	sub	sp, #28
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
 800a2bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	6a1b      	ldr	r3, [r3, #32]
 800a2c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	6a1b      	ldr	r3, [r3, #32]
 800a2c8:	f023 0210 	bic.w	r2, r3, #16
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	685b      	ldr	r3, [r3, #4]
 800a2d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	699b      	ldr	r3, [r3, #24]
 800a2da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a2e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a2ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a2ec:	683b      	ldr	r3, [r7, #0]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	021b      	lsls	r3, r3, #8
 800a2f2:	68fa      	ldr	r2, [r7, #12]
 800a2f4:	4313      	orrs	r3, r2
 800a2f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a2f8:	697b      	ldr	r3, [r7, #20]
 800a2fa:	f023 0320 	bic.w	r3, r3, #32
 800a2fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	689b      	ldr	r3, [r3, #8]
 800a304:	011b      	lsls	r3, r3, #4
 800a306:	697a      	ldr	r2, [r7, #20]
 800a308:	4313      	orrs	r3, r2
 800a30a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	4a22      	ldr	r2, [pc, #136]	@ (800a398 <TIM_OC2_SetConfig+0xe4>)
 800a310:	4293      	cmp	r3, r2
 800a312:	d003      	beq.n	800a31c <TIM_OC2_SetConfig+0x68>
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	4a21      	ldr	r2, [pc, #132]	@ (800a39c <TIM_OC2_SetConfig+0xe8>)
 800a318:	4293      	cmp	r3, r2
 800a31a:	d10d      	bne.n	800a338 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a31c:	697b      	ldr	r3, [r7, #20]
 800a31e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a322:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	68db      	ldr	r3, [r3, #12]
 800a328:	011b      	lsls	r3, r3, #4
 800a32a:	697a      	ldr	r2, [r7, #20]
 800a32c:	4313      	orrs	r3, r2
 800a32e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a330:	697b      	ldr	r3, [r7, #20]
 800a332:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a336:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	4a17      	ldr	r2, [pc, #92]	@ (800a398 <TIM_OC2_SetConfig+0xe4>)
 800a33c:	4293      	cmp	r3, r2
 800a33e:	d003      	beq.n	800a348 <TIM_OC2_SetConfig+0x94>
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	4a16      	ldr	r2, [pc, #88]	@ (800a39c <TIM_OC2_SetConfig+0xe8>)
 800a344:	4293      	cmp	r3, r2
 800a346:	d113      	bne.n	800a370 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a348:	693b      	ldr	r3, [r7, #16]
 800a34a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a34e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a350:	693b      	ldr	r3, [r7, #16]
 800a352:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a356:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a358:	683b      	ldr	r3, [r7, #0]
 800a35a:	695b      	ldr	r3, [r3, #20]
 800a35c:	009b      	lsls	r3, r3, #2
 800a35e:	693a      	ldr	r2, [r7, #16]
 800a360:	4313      	orrs	r3, r2
 800a362:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	699b      	ldr	r3, [r3, #24]
 800a368:	009b      	lsls	r3, r3, #2
 800a36a:	693a      	ldr	r2, [r7, #16]
 800a36c:	4313      	orrs	r3, r2
 800a36e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	693a      	ldr	r2, [r7, #16]
 800a374:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	68fa      	ldr	r2, [r7, #12]
 800a37a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a37c:	683b      	ldr	r3, [r7, #0]
 800a37e:	685a      	ldr	r2, [r3, #4]
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	697a      	ldr	r2, [r7, #20]
 800a388:	621a      	str	r2, [r3, #32]
}
 800a38a:	bf00      	nop
 800a38c:	371c      	adds	r7, #28
 800a38e:	46bd      	mov	sp, r7
 800a390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a394:	4770      	bx	lr
 800a396:	bf00      	nop
 800a398:	40010000 	.word	0x40010000
 800a39c:	40010400 	.word	0x40010400

0800a3a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a3a0:	b480      	push	{r7}
 800a3a2:	b087      	sub	sp, #28
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
 800a3a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	6a1b      	ldr	r3, [r3, #32]
 800a3ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	6a1b      	ldr	r3, [r3, #32]
 800a3b4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	685b      	ldr	r3, [r3, #4]
 800a3c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	69db      	ldr	r3, [r3, #28]
 800a3c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a3ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	f023 0303 	bic.w	r3, r3, #3
 800a3d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a3d8:	683b      	ldr	r3, [r7, #0]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	68fa      	ldr	r2, [r7, #12]
 800a3de:	4313      	orrs	r3, r2
 800a3e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a3e2:	697b      	ldr	r3, [r7, #20]
 800a3e4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a3e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a3ea:	683b      	ldr	r3, [r7, #0]
 800a3ec:	689b      	ldr	r3, [r3, #8]
 800a3ee:	021b      	lsls	r3, r3, #8
 800a3f0:	697a      	ldr	r2, [r7, #20]
 800a3f2:	4313      	orrs	r3, r2
 800a3f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	4a21      	ldr	r2, [pc, #132]	@ (800a480 <TIM_OC3_SetConfig+0xe0>)
 800a3fa:	4293      	cmp	r3, r2
 800a3fc:	d003      	beq.n	800a406 <TIM_OC3_SetConfig+0x66>
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	4a20      	ldr	r2, [pc, #128]	@ (800a484 <TIM_OC3_SetConfig+0xe4>)
 800a402:	4293      	cmp	r3, r2
 800a404:	d10d      	bne.n	800a422 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a406:	697b      	ldr	r3, [r7, #20]
 800a408:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a40c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a40e:	683b      	ldr	r3, [r7, #0]
 800a410:	68db      	ldr	r3, [r3, #12]
 800a412:	021b      	lsls	r3, r3, #8
 800a414:	697a      	ldr	r2, [r7, #20]
 800a416:	4313      	orrs	r3, r2
 800a418:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a41a:	697b      	ldr	r3, [r7, #20]
 800a41c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a420:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	4a16      	ldr	r2, [pc, #88]	@ (800a480 <TIM_OC3_SetConfig+0xe0>)
 800a426:	4293      	cmp	r3, r2
 800a428:	d003      	beq.n	800a432 <TIM_OC3_SetConfig+0x92>
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	4a15      	ldr	r2, [pc, #84]	@ (800a484 <TIM_OC3_SetConfig+0xe4>)
 800a42e:	4293      	cmp	r3, r2
 800a430:	d113      	bne.n	800a45a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a432:	693b      	ldr	r3, [r7, #16]
 800a434:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a438:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a43a:	693b      	ldr	r3, [r7, #16]
 800a43c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a440:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a442:	683b      	ldr	r3, [r7, #0]
 800a444:	695b      	ldr	r3, [r3, #20]
 800a446:	011b      	lsls	r3, r3, #4
 800a448:	693a      	ldr	r2, [r7, #16]
 800a44a:	4313      	orrs	r3, r2
 800a44c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a44e:	683b      	ldr	r3, [r7, #0]
 800a450:	699b      	ldr	r3, [r3, #24]
 800a452:	011b      	lsls	r3, r3, #4
 800a454:	693a      	ldr	r2, [r7, #16]
 800a456:	4313      	orrs	r3, r2
 800a458:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	693a      	ldr	r2, [r7, #16]
 800a45e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	68fa      	ldr	r2, [r7, #12]
 800a464:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a466:	683b      	ldr	r3, [r7, #0]
 800a468:	685a      	ldr	r2, [r3, #4]
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	697a      	ldr	r2, [r7, #20]
 800a472:	621a      	str	r2, [r3, #32]
}
 800a474:	bf00      	nop
 800a476:	371c      	adds	r7, #28
 800a478:	46bd      	mov	sp, r7
 800a47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47e:	4770      	bx	lr
 800a480:	40010000 	.word	0x40010000
 800a484:	40010400 	.word	0x40010400

0800a488 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a488:	b480      	push	{r7}
 800a48a:	b087      	sub	sp, #28
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
 800a490:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	6a1b      	ldr	r3, [r3, #32]
 800a496:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	6a1b      	ldr	r3, [r3, #32]
 800a49c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	685b      	ldr	r3, [r3, #4]
 800a4a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	69db      	ldr	r3, [r3, #28]
 800a4ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a4b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a4be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a4c0:	683b      	ldr	r3, [r7, #0]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	021b      	lsls	r3, r3, #8
 800a4c6:	68fa      	ldr	r2, [r7, #12]
 800a4c8:	4313      	orrs	r3, r2
 800a4ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a4cc:	693b      	ldr	r3, [r7, #16]
 800a4ce:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a4d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a4d4:	683b      	ldr	r3, [r7, #0]
 800a4d6:	689b      	ldr	r3, [r3, #8]
 800a4d8:	031b      	lsls	r3, r3, #12
 800a4da:	693a      	ldr	r2, [r7, #16]
 800a4dc:	4313      	orrs	r3, r2
 800a4de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	4a12      	ldr	r2, [pc, #72]	@ (800a52c <TIM_OC4_SetConfig+0xa4>)
 800a4e4:	4293      	cmp	r3, r2
 800a4e6:	d003      	beq.n	800a4f0 <TIM_OC4_SetConfig+0x68>
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	4a11      	ldr	r2, [pc, #68]	@ (800a530 <TIM_OC4_SetConfig+0xa8>)
 800a4ec:	4293      	cmp	r3, r2
 800a4ee:	d109      	bne.n	800a504 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a4f0:	697b      	ldr	r3, [r7, #20]
 800a4f2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a4f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a4f8:	683b      	ldr	r3, [r7, #0]
 800a4fa:	695b      	ldr	r3, [r3, #20]
 800a4fc:	019b      	lsls	r3, r3, #6
 800a4fe:	697a      	ldr	r2, [r7, #20]
 800a500:	4313      	orrs	r3, r2
 800a502:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	697a      	ldr	r2, [r7, #20]
 800a508:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	68fa      	ldr	r2, [r7, #12]
 800a50e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a510:	683b      	ldr	r3, [r7, #0]
 800a512:	685a      	ldr	r2, [r3, #4]
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	693a      	ldr	r2, [r7, #16]
 800a51c:	621a      	str	r2, [r3, #32]
}
 800a51e:	bf00      	nop
 800a520:	371c      	adds	r7, #28
 800a522:	46bd      	mov	sp, r7
 800a524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a528:	4770      	bx	lr
 800a52a:	bf00      	nop
 800a52c:	40010000 	.word	0x40010000
 800a530:	40010400 	.word	0x40010400

0800a534 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a534:	b480      	push	{r7}
 800a536:	b087      	sub	sp, #28
 800a538:	af00      	add	r7, sp, #0
 800a53a:	60f8      	str	r0, [r7, #12]
 800a53c:	60b9      	str	r1, [r7, #8]
 800a53e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	6a1b      	ldr	r3, [r3, #32]
 800a544:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	6a1b      	ldr	r3, [r3, #32]
 800a54a:	f023 0201 	bic.w	r2, r3, #1
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	699b      	ldr	r3, [r3, #24]
 800a556:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a558:	693b      	ldr	r3, [r7, #16]
 800a55a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a55e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	011b      	lsls	r3, r3, #4
 800a564:	693a      	ldr	r2, [r7, #16]
 800a566:	4313      	orrs	r3, r2
 800a568:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a56a:	697b      	ldr	r3, [r7, #20]
 800a56c:	f023 030a 	bic.w	r3, r3, #10
 800a570:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a572:	697a      	ldr	r2, [r7, #20]
 800a574:	68bb      	ldr	r3, [r7, #8]
 800a576:	4313      	orrs	r3, r2
 800a578:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	693a      	ldr	r2, [r7, #16]
 800a57e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	697a      	ldr	r2, [r7, #20]
 800a584:	621a      	str	r2, [r3, #32]
}
 800a586:	bf00      	nop
 800a588:	371c      	adds	r7, #28
 800a58a:	46bd      	mov	sp, r7
 800a58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a590:	4770      	bx	lr

0800a592 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a592:	b480      	push	{r7}
 800a594:	b087      	sub	sp, #28
 800a596:	af00      	add	r7, sp, #0
 800a598:	60f8      	str	r0, [r7, #12]
 800a59a:	60b9      	str	r1, [r7, #8]
 800a59c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	6a1b      	ldr	r3, [r3, #32]
 800a5a2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	6a1b      	ldr	r3, [r3, #32]
 800a5a8:	f023 0210 	bic.w	r2, r3, #16
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	699b      	ldr	r3, [r3, #24]
 800a5b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a5b6:	693b      	ldr	r3, [r7, #16]
 800a5b8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a5bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	031b      	lsls	r3, r3, #12
 800a5c2:	693a      	ldr	r2, [r7, #16]
 800a5c4:	4313      	orrs	r3, r2
 800a5c6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a5c8:	697b      	ldr	r3, [r7, #20]
 800a5ca:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a5ce:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a5d0:	68bb      	ldr	r3, [r7, #8]
 800a5d2:	011b      	lsls	r3, r3, #4
 800a5d4:	697a      	ldr	r2, [r7, #20]
 800a5d6:	4313      	orrs	r3, r2
 800a5d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	693a      	ldr	r2, [r7, #16]
 800a5de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	697a      	ldr	r2, [r7, #20]
 800a5e4:	621a      	str	r2, [r3, #32]
}
 800a5e6:	bf00      	nop
 800a5e8:	371c      	adds	r7, #28
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f0:	4770      	bx	lr

0800a5f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a5f2:	b480      	push	{r7}
 800a5f4:	b085      	sub	sp, #20
 800a5f6:	af00      	add	r7, sp, #0
 800a5f8:	6078      	str	r0, [r7, #4]
 800a5fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	689b      	ldr	r3, [r3, #8]
 800a600:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a608:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a60a:	683a      	ldr	r2, [r7, #0]
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	4313      	orrs	r3, r2
 800a610:	f043 0307 	orr.w	r3, r3, #7
 800a614:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	68fa      	ldr	r2, [r7, #12]
 800a61a:	609a      	str	r2, [r3, #8]
}
 800a61c:	bf00      	nop
 800a61e:	3714      	adds	r7, #20
 800a620:	46bd      	mov	sp, r7
 800a622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a626:	4770      	bx	lr

0800a628 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a628:	b480      	push	{r7}
 800a62a:	b087      	sub	sp, #28
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	60f8      	str	r0, [r7, #12]
 800a630:	60b9      	str	r1, [r7, #8]
 800a632:	607a      	str	r2, [r7, #4]
 800a634:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	689b      	ldr	r3, [r3, #8]
 800a63a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a63c:	697b      	ldr	r3, [r7, #20]
 800a63e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a642:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a644:	683b      	ldr	r3, [r7, #0]
 800a646:	021a      	lsls	r2, r3, #8
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	431a      	orrs	r2, r3
 800a64c:	68bb      	ldr	r3, [r7, #8]
 800a64e:	4313      	orrs	r3, r2
 800a650:	697a      	ldr	r2, [r7, #20]
 800a652:	4313      	orrs	r3, r2
 800a654:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	697a      	ldr	r2, [r7, #20]
 800a65a:	609a      	str	r2, [r3, #8]
}
 800a65c:	bf00      	nop
 800a65e:	371c      	adds	r7, #28
 800a660:	46bd      	mov	sp, r7
 800a662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a666:	4770      	bx	lr

0800a668 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a668:	b480      	push	{r7}
 800a66a:	b085      	sub	sp, #20
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
 800a670:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a678:	2b01      	cmp	r3, #1
 800a67a:	d101      	bne.n	800a680 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a67c:	2302      	movs	r3, #2
 800a67e:	e05a      	b.n	800a736 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	2201      	movs	r2, #1
 800a684:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	2202      	movs	r2, #2
 800a68c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	685b      	ldr	r3, [r3, #4]
 800a696:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	689b      	ldr	r3, [r3, #8]
 800a69e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a6a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a6a8:	683b      	ldr	r3, [r7, #0]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	68fa      	ldr	r2, [r7, #12]
 800a6ae:	4313      	orrs	r3, r2
 800a6b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	68fa      	ldr	r2, [r7, #12]
 800a6b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	4a21      	ldr	r2, [pc, #132]	@ (800a744 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a6c0:	4293      	cmp	r3, r2
 800a6c2:	d022      	beq.n	800a70a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a6cc:	d01d      	beq.n	800a70a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	4a1d      	ldr	r2, [pc, #116]	@ (800a748 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a6d4:	4293      	cmp	r3, r2
 800a6d6:	d018      	beq.n	800a70a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	4a1b      	ldr	r2, [pc, #108]	@ (800a74c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a6de:	4293      	cmp	r3, r2
 800a6e0:	d013      	beq.n	800a70a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	4a1a      	ldr	r2, [pc, #104]	@ (800a750 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a6e8:	4293      	cmp	r3, r2
 800a6ea:	d00e      	beq.n	800a70a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	4a18      	ldr	r2, [pc, #96]	@ (800a754 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a6f2:	4293      	cmp	r3, r2
 800a6f4:	d009      	beq.n	800a70a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	4a17      	ldr	r2, [pc, #92]	@ (800a758 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a6fc:	4293      	cmp	r3, r2
 800a6fe:	d004      	beq.n	800a70a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	4a15      	ldr	r2, [pc, #84]	@ (800a75c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a706:	4293      	cmp	r3, r2
 800a708:	d10c      	bne.n	800a724 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a70a:	68bb      	ldr	r3, [r7, #8]
 800a70c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a710:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a712:	683b      	ldr	r3, [r7, #0]
 800a714:	685b      	ldr	r3, [r3, #4]
 800a716:	68ba      	ldr	r2, [r7, #8]
 800a718:	4313      	orrs	r3, r2
 800a71a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	68ba      	ldr	r2, [r7, #8]
 800a722:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	2201      	movs	r2, #1
 800a728:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	2200      	movs	r2, #0
 800a730:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a734:	2300      	movs	r3, #0
}
 800a736:	4618      	mov	r0, r3
 800a738:	3714      	adds	r7, #20
 800a73a:	46bd      	mov	sp, r7
 800a73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a740:	4770      	bx	lr
 800a742:	bf00      	nop
 800a744:	40010000 	.word	0x40010000
 800a748:	40000400 	.word	0x40000400
 800a74c:	40000800 	.word	0x40000800
 800a750:	40000c00 	.word	0x40000c00
 800a754:	40010400 	.word	0x40010400
 800a758:	40014000 	.word	0x40014000
 800a75c:	40001800 	.word	0x40001800

0800a760 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a760:	b480      	push	{r7}
 800a762:	b083      	sub	sp, #12
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a768:	bf00      	nop
 800a76a:	370c      	adds	r7, #12
 800a76c:	46bd      	mov	sp, r7
 800a76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a772:	4770      	bx	lr

0800a774 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a774:	b480      	push	{r7}
 800a776:	b083      	sub	sp, #12
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a77c:	bf00      	nop
 800a77e:	370c      	adds	r7, #12
 800a780:	46bd      	mov	sp, r7
 800a782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a786:	4770      	bx	lr

0800a788 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b082      	sub	sp, #8
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d101      	bne.n	800a79a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a796:	2301      	movs	r3, #1
 800a798:	e042      	b.n	800a820 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a7a0:	b2db      	uxtb	r3, r3
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d106      	bne.n	800a7b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	2200      	movs	r2, #0
 800a7aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a7ae:	6878      	ldr	r0, [r7, #4]
 800a7b0:	f7fb fd56 	bl	8006260 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2224      	movs	r2, #36	@ 0x24
 800a7b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	68da      	ldr	r2, [r3, #12]
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a7ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a7cc:	6878      	ldr	r0, [r7, #4]
 800a7ce:	f000 f82b 	bl	800a828 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	691a      	ldr	r2, [r3, #16]
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a7e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	695a      	ldr	r2, [r3, #20]
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a7f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	68da      	ldr	r2, [r3, #12]
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a800:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	2200      	movs	r2, #0
 800a806:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2220      	movs	r2, #32
 800a80c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	2220      	movs	r2, #32
 800a814:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	2200      	movs	r2, #0
 800a81c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800a81e:	2300      	movs	r3, #0
}
 800a820:	4618      	mov	r0, r3
 800a822:	3708      	adds	r7, #8
 800a824:	46bd      	mov	sp, r7
 800a826:	bd80      	pop	{r7, pc}

0800a828 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a828:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a82c:	b0c0      	sub	sp, #256	@ 0x100
 800a82e:	af00      	add	r7, sp, #0
 800a830:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	691b      	ldr	r3, [r3, #16]
 800a83c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800a840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a844:	68d9      	ldr	r1, [r3, #12]
 800a846:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a84a:	681a      	ldr	r2, [r3, #0]
 800a84c:	ea40 0301 	orr.w	r3, r0, r1
 800a850:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a852:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a856:	689a      	ldr	r2, [r3, #8]
 800a858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a85c:	691b      	ldr	r3, [r3, #16]
 800a85e:	431a      	orrs	r2, r3
 800a860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a864:	695b      	ldr	r3, [r3, #20]
 800a866:	431a      	orrs	r2, r3
 800a868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a86c:	69db      	ldr	r3, [r3, #28]
 800a86e:	4313      	orrs	r3, r2
 800a870:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	68db      	ldr	r3, [r3, #12]
 800a87c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800a880:	f021 010c 	bic.w	r1, r1, #12
 800a884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a888:	681a      	ldr	r2, [r3, #0]
 800a88a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a88e:	430b      	orrs	r3, r1
 800a890:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a892:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	695b      	ldr	r3, [r3, #20]
 800a89a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800a89e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a8a2:	6999      	ldr	r1, [r3, #24]
 800a8a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a8a8:	681a      	ldr	r2, [r3, #0]
 800a8aa:	ea40 0301 	orr.w	r3, r0, r1
 800a8ae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a8b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a8b4:	681a      	ldr	r2, [r3, #0]
 800a8b6:	4b8f      	ldr	r3, [pc, #572]	@ (800aaf4 <UART_SetConfig+0x2cc>)
 800a8b8:	429a      	cmp	r2, r3
 800a8ba:	d005      	beq.n	800a8c8 <UART_SetConfig+0xa0>
 800a8bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a8c0:	681a      	ldr	r2, [r3, #0]
 800a8c2:	4b8d      	ldr	r3, [pc, #564]	@ (800aaf8 <UART_SetConfig+0x2d0>)
 800a8c4:	429a      	cmp	r2, r3
 800a8c6:	d104      	bne.n	800a8d2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a8c8:	f7fe ff48 	bl	800975c <HAL_RCC_GetPCLK2Freq>
 800a8cc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800a8d0:	e003      	b.n	800a8da <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a8d2:	f7fe ff2f 	bl	8009734 <HAL_RCC_GetPCLK1Freq>
 800a8d6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a8da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a8de:	69db      	ldr	r3, [r3, #28]
 800a8e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a8e4:	f040 810c 	bne.w	800ab00 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a8e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a8f2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800a8f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800a8fa:	4622      	mov	r2, r4
 800a8fc:	462b      	mov	r3, r5
 800a8fe:	1891      	adds	r1, r2, r2
 800a900:	65b9      	str	r1, [r7, #88]	@ 0x58
 800a902:	415b      	adcs	r3, r3
 800a904:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a906:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800a90a:	4621      	mov	r1, r4
 800a90c:	eb12 0801 	adds.w	r8, r2, r1
 800a910:	4629      	mov	r1, r5
 800a912:	eb43 0901 	adc.w	r9, r3, r1
 800a916:	f04f 0200 	mov.w	r2, #0
 800a91a:	f04f 0300 	mov.w	r3, #0
 800a91e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a922:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a926:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a92a:	4690      	mov	r8, r2
 800a92c:	4699      	mov	r9, r3
 800a92e:	4623      	mov	r3, r4
 800a930:	eb18 0303 	adds.w	r3, r8, r3
 800a934:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a938:	462b      	mov	r3, r5
 800a93a:	eb49 0303 	adc.w	r3, r9, r3
 800a93e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a942:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a946:	685b      	ldr	r3, [r3, #4]
 800a948:	2200      	movs	r2, #0
 800a94a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a94e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800a952:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a956:	460b      	mov	r3, r1
 800a958:	18db      	adds	r3, r3, r3
 800a95a:	653b      	str	r3, [r7, #80]	@ 0x50
 800a95c:	4613      	mov	r3, r2
 800a95e:	eb42 0303 	adc.w	r3, r2, r3
 800a962:	657b      	str	r3, [r7, #84]	@ 0x54
 800a964:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800a968:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800a96c:	f7f6 faaa 	bl	8000ec4 <__aeabi_uldivmod>
 800a970:	4602      	mov	r2, r0
 800a972:	460b      	mov	r3, r1
 800a974:	4b61      	ldr	r3, [pc, #388]	@ (800aafc <UART_SetConfig+0x2d4>)
 800a976:	fba3 2302 	umull	r2, r3, r3, r2
 800a97a:	095b      	lsrs	r3, r3, #5
 800a97c:	011c      	lsls	r4, r3, #4
 800a97e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a982:	2200      	movs	r2, #0
 800a984:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a988:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800a98c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800a990:	4642      	mov	r2, r8
 800a992:	464b      	mov	r3, r9
 800a994:	1891      	adds	r1, r2, r2
 800a996:	64b9      	str	r1, [r7, #72]	@ 0x48
 800a998:	415b      	adcs	r3, r3
 800a99a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a99c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800a9a0:	4641      	mov	r1, r8
 800a9a2:	eb12 0a01 	adds.w	sl, r2, r1
 800a9a6:	4649      	mov	r1, r9
 800a9a8:	eb43 0b01 	adc.w	fp, r3, r1
 800a9ac:	f04f 0200 	mov.w	r2, #0
 800a9b0:	f04f 0300 	mov.w	r3, #0
 800a9b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a9b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a9bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a9c0:	4692      	mov	sl, r2
 800a9c2:	469b      	mov	fp, r3
 800a9c4:	4643      	mov	r3, r8
 800a9c6:	eb1a 0303 	adds.w	r3, sl, r3
 800a9ca:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a9ce:	464b      	mov	r3, r9
 800a9d0:	eb4b 0303 	adc.w	r3, fp, r3
 800a9d4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a9d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a9dc:	685b      	ldr	r3, [r3, #4]
 800a9de:	2200      	movs	r2, #0
 800a9e0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a9e4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800a9e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a9ec:	460b      	mov	r3, r1
 800a9ee:	18db      	adds	r3, r3, r3
 800a9f0:	643b      	str	r3, [r7, #64]	@ 0x40
 800a9f2:	4613      	mov	r3, r2
 800a9f4:	eb42 0303 	adc.w	r3, r2, r3
 800a9f8:	647b      	str	r3, [r7, #68]	@ 0x44
 800a9fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800a9fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800aa02:	f7f6 fa5f 	bl	8000ec4 <__aeabi_uldivmod>
 800aa06:	4602      	mov	r2, r0
 800aa08:	460b      	mov	r3, r1
 800aa0a:	4611      	mov	r1, r2
 800aa0c:	4b3b      	ldr	r3, [pc, #236]	@ (800aafc <UART_SetConfig+0x2d4>)
 800aa0e:	fba3 2301 	umull	r2, r3, r3, r1
 800aa12:	095b      	lsrs	r3, r3, #5
 800aa14:	2264      	movs	r2, #100	@ 0x64
 800aa16:	fb02 f303 	mul.w	r3, r2, r3
 800aa1a:	1acb      	subs	r3, r1, r3
 800aa1c:	00db      	lsls	r3, r3, #3
 800aa1e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800aa22:	4b36      	ldr	r3, [pc, #216]	@ (800aafc <UART_SetConfig+0x2d4>)
 800aa24:	fba3 2302 	umull	r2, r3, r3, r2
 800aa28:	095b      	lsrs	r3, r3, #5
 800aa2a:	005b      	lsls	r3, r3, #1
 800aa2c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800aa30:	441c      	add	r4, r3
 800aa32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800aa36:	2200      	movs	r2, #0
 800aa38:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800aa3c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800aa40:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800aa44:	4642      	mov	r2, r8
 800aa46:	464b      	mov	r3, r9
 800aa48:	1891      	adds	r1, r2, r2
 800aa4a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800aa4c:	415b      	adcs	r3, r3
 800aa4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aa50:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800aa54:	4641      	mov	r1, r8
 800aa56:	1851      	adds	r1, r2, r1
 800aa58:	6339      	str	r1, [r7, #48]	@ 0x30
 800aa5a:	4649      	mov	r1, r9
 800aa5c:	414b      	adcs	r3, r1
 800aa5e:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa60:	f04f 0200 	mov.w	r2, #0
 800aa64:	f04f 0300 	mov.w	r3, #0
 800aa68:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800aa6c:	4659      	mov	r1, fp
 800aa6e:	00cb      	lsls	r3, r1, #3
 800aa70:	4651      	mov	r1, sl
 800aa72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800aa76:	4651      	mov	r1, sl
 800aa78:	00ca      	lsls	r2, r1, #3
 800aa7a:	4610      	mov	r0, r2
 800aa7c:	4619      	mov	r1, r3
 800aa7e:	4603      	mov	r3, r0
 800aa80:	4642      	mov	r2, r8
 800aa82:	189b      	adds	r3, r3, r2
 800aa84:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800aa88:	464b      	mov	r3, r9
 800aa8a:	460a      	mov	r2, r1
 800aa8c:	eb42 0303 	adc.w	r3, r2, r3
 800aa90:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800aa94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa98:	685b      	ldr	r3, [r3, #4]
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800aaa0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800aaa4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800aaa8:	460b      	mov	r3, r1
 800aaaa:	18db      	adds	r3, r3, r3
 800aaac:	62bb      	str	r3, [r7, #40]	@ 0x28
 800aaae:	4613      	mov	r3, r2
 800aab0:	eb42 0303 	adc.w	r3, r2, r3
 800aab4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800aab6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800aaba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800aabe:	f7f6 fa01 	bl	8000ec4 <__aeabi_uldivmod>
 800aac2:	4602      	mov	r2, r0
 800aac4:	460b      	mov	r3, r1
 800aac6:	4b0d      	ldr	r3, [pc, #52]	@ (800aafc <UART_SetConfig+0x2d4>)
 800aac8:	fba3 1302 	umull	r1, r3, r3, r2
 800aacc:	095b      	lsrs	r3, r3, #5
 800aace:	2164      	movs	r1, #100	@ 0x64
 800aad0:	fb01 f303 	mul.w	r3, r1, r3
 800aad4:	1ad3      	subs	r3, r2, r3
 800aad6:	00db      	lsls	r3, r3, #3
 800aad8:	3332      	adds	r3, #50	@ 0x32
 800aada:	4a08      	ldr	r2, [pc, #32]	@ (800aafc <UART_SetConfig+0x2d4>)
 800aadc:	fba2 2303 	umull	r2, r3, r2, r3
 800aae0:	095b      	lsrs	r3, r3, #5
 800aae2:	f003 0207 	and.w	r2, r3, #7
 800aae6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	4422      	add	r2, r4
 800aaee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800aaf0:	e106      	b.n	800ad00 <UART_SetConfig+0x4d8>
 800aaf2:	bf00      	nop
 800aaf4:	40011000 	.word	0x40011000
 800aaf8:	40011400 	.word	0x40011400
 800aafc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ab00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ab04:	2200      	movs	r2, #0
 800ab06:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800ab0a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800ab0e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800ab12:	4642      	mov	r2, r8
 800ab14:	464b      	mov	r3, r9
 800ab16:	1891      	adds	r1, r2, r2
 800ab18:	6239      	str	r1, [r7, #32]
 800ab1a:	415b      	adcs	r3, r3
 800ab1c:	627b      	str	r3, [r7, #36]	@ 0x24
 800ab1e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ab22:	4641      	mov	r1, r8
 800ab24:	1854      	adds	r4, r2, r1
 800ab26:	4649      	mov	r1, r9
 800ab28:	eb43 0501 	adc.w	r5, r3, r1
 800ab2c:	f04f 0200 	mov.w	r2, #0
 800ab30:	f04f 0300 	mov.w	r3, #0
 800ab34:	00eb      	lsls	r3, r5, #3
 800ab36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ab3a:	00e2      	lsls	r2, r4, #3
 800ab3c:	4614      	mov	r4, r2
 800ab3e:	461d      	mov	r5, r3
 800ab40:	4643      	mov	r3, r8
 800ab42:	18e3      	adds	r3, r4, r3
 800ab44:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ab48:	464b      	mov	r3, r9
 800ab4a:	eb45 0303 	adc.w	r3, r5, r3
 800ab4e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ab52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ab56:	685b      	ldr	r3, [r3, #4]
 800ab58:	2200      	movs	r2, #0
 800ab5a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ab5e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800ab62:	f04f 0200 	mov.w	r2, #0
 800ab66:	f04f 0300 	mov.w	r3, #0
 800ab6a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800ab6e:	4629      	mov	r1, r5
 800ab70:	008b      	lsls	r3, r1, #2
 800ab72:	4621      	mov	r1, r4
 800ab74:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ab78:	4621      	mov	r1, r4
 800ab7a:	008a      	lsls	r2, r1, #2
 800ab7c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800ab80:	f7f6 f9a0 	bl	8000ec4 <__aeabi_uldivmod>
 800ab84:	4602      	mov	r2, r0
 800ab86:	460b      	mov	r3, r1
 800ab88:	4b60      	ldr	r3, [pc, #384]	@ (800ad0c <UART_SetConfig+0x4e4>)
 800ab8a:	fba3 2302 	umull	r2, r3, r3, r2
 800ab8e:	095b      	lsrs	r3, r3, #5
 800ab90:	011c      	lsls	r4, r3, #4
 800ab92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ab96:	2200      	movs	r2, #0
 800ab98:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ab9c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800aba0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800aba4:	4642      	mov	r2, r8
 800aba6:	464b      	mov	r3, r9
 800aba8:	1891      	adds	r1, r2, r2
 800abaa:	61b9      	str	r1, [r7, #24]
 800abac:	415b      	adcs	r3, r3
 800abae:	61fb      	str	r3, [r7, #28]
 800abb0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800abb4:	4641      	mov	r1, r8
 800abb6:	1851      	adds	r1, r2, r1
 800abb8:	6139      	str	r1, [r7, #16]
 800abba:	4649      	mov	r1, r9
 800abbc:	414b      	adcs	r3, r1
 800abbe:	617b      	str	r3, [r7, #20]
 800abc0:	f04f 0200 	mov.w	r2, #0
 800abc4:	f04f 0300 	mov.w	r3, #0
 800abc8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800abcc:	4659      	mov	r1, fp
 800abce:	00cb      	lsls	r3, r1, #3
 800abd0:	4651      	mov	r1, sl
 800abd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800abd6:	4651      	mov	r1, sl
 800abd8:	00ca      	lsls	r2, r1, #3
 800abda:	4610      	mov	r0, r2
 800abdc:	4619      	mov	r1, r3
 800abde:	4603      	mov	r3, r0
 800abe0:	4642      	mov	r2, r8
 800abe2:	189b      	adds	r3, r3, r2
 800abe4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800abe8:	464b      	mov	r3, r9
 800abea:	460a      	mov	r2, r1
 800abec:	eb42 0303 	adc.w	r3, r2, r3
 800abf0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800abf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800abf8:	685b      	ldr	r3, [r3, #4]
 800abfa:	2200      	movs	r2, #0
 800abfc:	67bb      	str	r3, [r7, #120]	@ 0x78
 800abfe:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800ac00:	f04f 0200 	mov.w	r2, #0
 800ac04:	f04f 0300 	mov.w	r3, #0
 800ac08:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800ac0c:	4649      	mov	r1, r9
 800ac0e:	008b      	lsls	r3, r1, #2
 800ac10:	4641      	mov	r1, r8
 800ac12:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ac16:	4641      	mov	r1, r8
 800ac18:	008a      	lsls	r2, r1, #2
 800ac1a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800ac1e:	f7f6 f951 	bl	8000ec4 <__aeabi_uldivmod>
 800ac22:	4602      	mov	r2, r0
 800ac24:	460b      	mov	r3, r1
 800ac26:	4611      	mov	r1, r2
 800ac28:	4b38      	ldr	r3, [pc, #224]	@ (800ad0c <UART_SetConfig+0x4e4>)
 800ac2a:	fba3 2301 	umull	r2, r3, r3, r1
 800ac2e:	095b      	lsrs	r3, r3, #5
 800ac30:	2264      	movs	r2, #100	@ 0x64
 800ac32:	fb02 f303 	mul.w	r3, r2, r3
 800ac36:	1acb      	subs	r3, r1, r3
 800ac38:	011b      	lsls	r3, r3, #4
 800ac3a:	3332      	adds	r3, #50	@ 0x32
 800ac3c:	4a33      	ldr	r2, [pc, #204]	@ (800ad0c <UART_SetConfig+0x4e4>)
 800ac3e:	fba2 2303 	umull	r2, r3, r2, r3
 800ac42:	095b      	lsrs	r3, r3, #5
 800ac44:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ac48:	441c      	add	r4, r3
 800ac4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ac4e:	2200      	movs	r2, #0
 800ac50:	673b      	str	r3, [r7, #112]	@ 0x70
 800ac52:	677a      	str	r2, [r7, #116]	@ 0x74
 800ac54:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800ac58:	4642      	mov	r2, r8
 800ac5a:	464b      	mov	r3, r9
 800ac5c:	1891      	adds	r1, r2, r2
 800ac5e:	60b9      	str	r1, [r7, #8]
 800ac60:	415b      	adcs	r3, r3
 800ac62:	60fb      	str	r3, [r7, #12]
 800ac64:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ac68:	4641      	mov	r1, r8
 800ac6a:	1851      	adds	r1, r2, r1
 800ac6c:	6039      	str	r1, [r7, #0]
 800ac6e:	4649      	mov	r1, r9
 800ac70:	414b      	adcs	r3, r1
 800ac72:	607b      	str	r3, [r7, #4]
 800ac74:	f04f 0200 	mov.w	r2, #0
 800ac78:	f04f 0300 	mov.w	r3, #0
 800ac7c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800ac80:	4659      	mov	r1, fp
 800ac82:	00cb      	lsls	r3, r1, #3
 800ac84:	4651      	mov	r1, sl
 800ac86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ac8a:	4651      	mov	r1, sl
 800ac8c:	00ca      	lsls	r2, r1, #3
 800ac8e:	4610      	mov	r0, r2
 800ac90:	4619      	mov	r1, r3
 800ac92:	4603      	mov	r3, r0
 800ac94:	4642      	mov	r2, r8
 800ac96:	189b      	adds	r3, r3, r2
 800ac98:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ac9a:	464b      	mov	r3, r9
 800ac9c:	460a      	mov	r2, r1
 800ac9e:	eb42 0303 	adc.w	r3, r2, r3
 800aca2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800aca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aca8:	685b      	ldr	r3, [r3, #4]
 800acaa:	2200      	movs	r2, #0
 800acac:	663b      	str	r3, [r7, #96]	@ 0x60
 800acae:	667a      	str	r2, [r7, #100]	@ 0x64
 800acb0:	f04f 0200 	mov.w	r2, #0
 800acb4:	f04f 0300 	mov.w	r3, #0
 800acb8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800acbc:	4649      	mov	r1, r9
 800acbe:	008b      	lsls	r3, r1, #2
 800acc0:	4641      	mov	r1, r8
 800acc2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800acc6:	4641      	mov	r1, r8
 800acc8:	008a      	lsls	r2, r1, #2
 800acca:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800acce:	f7f6 f8f9 	bl	8000ec4 <__aeabi_uldivmod>
 800acd2:	4602      	mov	r2, r0
 800acd4:	460b      	mov	r3, r1
 800acd6:	4b0d      	ldr	r3, [pc, #52]	@ (800ad0c <UART_SetConfig+0x4e4>)
 800acd8:	fba3 1302 	umull	r1, r3, r3, r2
 800acdc:	095b      	lsrs	r3, r3, #5
 800acde:	2164      	movs	r1, #100	@ 0x64
 800ace0:	fb01 f303 	mul.w	r3, r1, r3
 800ace4:	1ad3      	subs	r3, r2, r3
 800ace6:	011b      	lsls	r3, r3, #4
 800ace8:	3332      	adds	r3, #50	@ 0x32
 800acea:	4a08      	ldr	r2, [pc, #32]	@ (800ad0c <UART_SetConfig+0x4e4>)
 800acec:	fba2 2303 	umull	r2, r3, r2, r3
 800acf0:	095b      	lsrs	r3, r3, #5
 800acf2:	f003 020f 	and.w	r2, r3, #15
 800acf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	4422      	add	r2, r4
 800acfe:	609a      	str	r2, [r3, #8]
}
 800ad00:	bf00      	nop
 800ad02:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800ad06:	46bd      	mov	sp, r7
 800ad08:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ad0c:	51eb851f 	.word	0x51eb851f

0800ad10 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ad10:	b084      	sub	sp, #16
 800ad12:	b580      	push	{r7, lr}
 800ad14:	b084      	sub	sp, #16
 800ad16:	af00      	add	r7, sp, #0
 800ad18:	6078      	str	r0, [r7, #4]
 800ad1a:	f107 001c 	add.w	r0, r7, #28
 800ad1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ad22:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800ad26:	2b01      	cmp	r3, #1
 800ad28:	d123      	bne.n	800ad72 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad2e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	68db      	ldr	r3, [r3, #12]
 800ad3a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800ad3e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ad42:	687a      	ldr	r2, [r7, #4]
 800ad44:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	68db      	ldr	r3, [r3, #12]
 800ad4a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800ad52:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800ad56:	2b01      	cmp	r3, #1
 800ad58:	d105      	bne.n	800ad66 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	68db      	ldr	r3, [r3, #12]
 800ad5e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ad66:	6878      	ldr	r0, [r7, #4]
 800ad68:	f000 faa0 	bl	800b2ac <USB_CoreReset>
 800ad6c:	4603      	mov	r3, r0
 800ad6e:	73fb      	strb	r3, [r7, #15]
 800ad70:	e01b      	b.n	800adaa <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	68db      	ldr	r3, [r3, #12]
 800ad76:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ad7e:	6878      	ldr	r0, [r7, #4]
 800ad80:	f000 fa94 	bl	800b2ac <USB_CoreReset>
 800ad84:	4603      	mov	r3, r0
 800ad86:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800ad88:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d106      	bne.n	800ad9e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad94:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	639a      	str	r2, [r3, #56]	@ 0x38
 800ad9c:	e005      	b.n	800adaa <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ada2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800adaa:	7fbb      	ldrb	r3, [r7, #30]
 800adac:	2b01      	cmp	r3, #1
 800adae:	d10b      	bne.n	800adc8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	689b      	ldr	r3, [r3, #8]
 800adb4:	f043 0206 	orr.w	r2, r3, #6
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	689b      	ldr	r3, [r3, #8]
 800adc0:	f043 0220 	orr.w	r2, r3, #32
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800adc8:	7bfb      	ldrb	r3, [r7, #15]
}
 800adca:	4618      	mov	r0, r3
 800adcc:	3710      	adds	r7, #16
 800adce:	46bd      	mov	sp, r7
 800add0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800add4:	b004      	add	sp, #16
 800add6:	4770      	bx	lr

0800add8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800add8:	b480      	push	{r7}
 800adda:	b083      	sub	sp, #12
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	689b      	ldr	r3, [r3, #8]
 800ade4:	f023 0201 	bic.w	r2, r3, #1
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800adec:	2300      	movs	r3, #0
}
 800adee:	4618      	mov	r0, r3
 800adf0:	370c      	adds	r7, #12
 800adf2:	46bd      	mov	sp, r7
 800adf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf8:	4770      	bx	lr

0800adfa <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800adfa:	b580      	push	{r7, lr}
 800adfc:	b084      	sub	sp, #16
 800adfe:	af00      	add	r7, sp, #0
 800ae00:	6078      	str	r0, [r7, #4]
 800ae02:	460b      	mov	r3, r1
 800ae04:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800ae06:	2300      	movs	r3, #0
 800ae08:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	68db      	ldr	r3, [r3, #12]
 800ae0e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ae16:	78fb      	ldrb	r3, [r7, #3]
 800ae18:	2b01      	cmp	r3, #1
 800ae1a:	d115      	bne.n	800ae48 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	68db      	ldr	r3, [r3, #12]
 800ae20:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800ae28:	200a      	movs	r0, #10
 800ae2a:	f7fb fdad 	bl	8006988 <HAL_Delay>
      ms += 10U;
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	330a      	adds	r3, #10
 800ae32:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800ae34:	6878      	ldr	r0, [r7, #4]
 800ae36:	f000 fa2b 	bl	800b290 <USB_GetMode>
 800ae3a:	4603      	mov	r3, r0
 800ae3c:	2b01      	cmp	r3, #1
 800ae3e:	d01e      	beq.n	800ae7e <USB_SetCurrentMode+0x84>
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	2bc7      	cmp	r3, #199	@ 0xc7
 800ae44:	d9f0      	bls.n	800ae28 <USB_SetCurrentMode+0x2e>
 800ae46:	e01a      	b.n	800ae7e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800ae48:	78fb      	ldrb	r3, [r7, #3]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d115      	bne.n	800ae7a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	68db      	ldr	r3, [r3, #12]
 800ae52:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800ae5a:	200a      	movs	r0, #10
 800ae5c:	f7fb fd94 	bl	8006988 <HAL_Delay>
      ms += 10U;
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	330a      	adds	r3, #10
 800ae64:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800ae66:	6878      	ldr	r0, [r7, #4]
 800ae68:	f000 fa12 	bl	800b290 <USB_GetMode>
 800ae6c:	4603      	mov	r3, r0
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d005      	beq.n	800ae7e <USB_SetCurrentMode+0x84>
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	2bc7      	cmp	r3, #199	@ 0xc7
 800ae76:	d9f0      	bls.n	800ae5a <USB_SetCurrentMode+0x60>
 800ae78:	e001      	b.n	800ae7e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800ae7a:	2301      	movs	r3, #1
 800ae7c:	e005      	b.n	800ae8a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	2bc8      	cmp	r3, #200	@ 0xc8
 800ae82:	d101      	bne.n	800ae88 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800ae84:	2301      	movs	r3, #1
 800ae86:	e000      	b.n	800ae8a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800ae88:	2300      	movs	r3, #0
}
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	3710      	adds	r7, #16
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	bd80      	pop	{r7, pc}
	...

0800ae94 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ae94:	b084      	sub	sp, #16
 800ae96:	b580      	push	{r7, lr}
 800ae98:	b086      	sub	sp, #24
 800ae9a:	af00      	add	r7, sp, #0
 800ae9c:	6078      	str	r0, [r7, #4]
 800ae9e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800aea2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800aea6:	2300      	movs	r3, #0
 800aea8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800aeae:	2300      	movs	r3, #0
 800aeb0:	613b      	str	r3, [r7, #16]
 800aeb2:	e009      	b.n	800aec8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800aeb4:	687a      	ldr	r2, [r7, #4]
 800aeb6:	693b      	ldr	r3, [r7, #16]
 800aeb8:	3340      	adds	r3, #64	@ 0x40
 800aeba:	009b      	lsls	r3, r3, #2
 800aebc:	4413      	add	r3, r2
 800aebe:	2200      	movs	r2, #0
 800aec0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800aec2:	693b      	ldr	r3, [r7, #16]
 800aec4:	3301      	adds	r3, #1
 800aec6:	613b      	str	r3, [r7, #16]
 800aec8:	693b      	ldr	r3, [r7, #16]
 800aeca:	2b0e      	cmp	r3, #14
 800aecc:	d9f2      	bls.n	800aeb4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800aece:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d11c      	bne.n	800af10 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aedc:	685b      	ldr	r3, [r3, #4]
 800aede:	68fa      	ldr	r2, [r7, #12]
 800aee0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800aee4:	f043 0302 	orr.w	r3, r3, #2
 800aee8:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aeee:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aefa:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af06:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	639a      	str	r2, [r3, #56]	@ 0x38
 800af0e:	e00b      	b.n	800af28 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af14:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af20:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800af2e:	461a      	mov	r2, r3
 800af30:	2300      	movs	r3, #0
 800af32:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800af34:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800af38:	2b01      	cmp	r3, #1
 800af3a:	d10d      	bne.n	800af58 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800af3c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800af40:	2b00      	cmp	r3, #0
 800af42:	d104      	bne.n	800af4e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800af44:	2100      	movs	r1, #0
 800af46:	6878      	ldr	r0, [r7, #4]
 800af48:	f000 f968 	bl	800b21c <USB_SetDevSpeed>
 800af4c:	e008      	b.n	800af60 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800af4e:	2101      	movs	r1, #1
 800af50:	6878      	ldr	r0, [r7, #4]
 800af52:	f000 f963 	bl	800b21c <USB_SetDevSpeed>
 800af56:	e003      	b.n	800af60 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800af58:	2103      	movs	r1, #3
 800af5a:	6878      	ldr	r0, [r7, #4]
 800af5c:	f000 f95e 	bl	800b21c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800af60:	2110      	movs	r1, #16
 800af62:	6878      	ldr	r0, [r7, #4]
 800af64:	f000 f8fa 	bl	800b15c <USB_FlushTxFifo>
 800af68:	4603      	mov	r3, r0
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d001      	beq.n	800af72 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800af6e:	2301      	movs	r3, #1
 800af70:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800af72:	6878      	ldr	r0, [r7, #4]
 800af74:	f000 f924 	bl	800b1c0 <USB_FlushRxFifo>
 800af78:	4603      	mov	r3, r0
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d001      	beq.n	800af82 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800af7e:	2301      	movs	r3, #1
 800af80:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800af88:	461a      	mov	r2, r3
 800af8a:	2300      	movs	r3, #0
 800af8c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800af94:	461a      	mov	r2, r3
 800af96:	2300      	movs	r3, #0
 800af98:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800afa0:	461a      	mov	r2, r3
 800afa2:	2300      	movs	r3, #0
 800afa4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800afa6:	2300      	movs	r3, #0
 800afa8:	613b      	str	r3, [r7, #16]
 800afaa:	e043      	b.n	800b034 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800afac:	693b      	ldr	r3, [r7, #16]
 800afae:	015a      	lsls	r2, r3, #5
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	4413      	add	r3, r2
 800afb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800afbe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800afc2:	d118      	bne.n	800aff6 <USB_DevInit+0x162>
    {
      if (i == 0U)
 800afc4:	693b      	ldr	r3, [r7, #16]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d10a      	bne.n	800afe0 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800afca:	693b      	ldr	r3, [r7, #16]
 800afcc:	015a      	lsls	r2, r3, #5
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	4413      	add	r3, r2
 800afd2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800afd6:	461a      	mov	r2, r3
 800afd8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800afdc:	6013      	str	r3, [r2, #0]
 800afde:	e013      	b.n	800b008 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800afe0:	693b      	ldr	r3, [r7, #16]
 800afe2:	015a      	lsls	r2, r3, #5
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	4413      	add	r3, r2
 800afe8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800afec:	461a      	mov	r2, r3
 800afee:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800aff2:	6013      	str	r3, [r2, #0]
 800aff4:	e008      	b.n	800b008 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800aff6:	693b      	ldr	r3, [r7, #16]
 800aff8:	015a      	lsls	r2, r3, #5
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	4413      	add	r3, r2
 800affe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b002:	461a      	mov	r2, r3
 800b004:	2300      	movs	r3, #0
 800b006:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b008:	693b      	ldr	r3, [r7, #16]
 800b00a:	015a      	lsls	r2, r3, #5
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	4413      	add	r3, r2
 800b010:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b014:	461a      	mov	r2, r3
 800b016:	2300      	movs	r3, #0
 800b018:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b01a:	693b      	ldr	r3, [r7, #16]
 800b01c:	015a      	lsls	r2, r3, #5
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	4413      	add	r3, r2
 800b022:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b026:	461a      	mov	r2, r3
 800b028:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800b02c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b02e:	693b      	ldr	r3, [r7, #16]
 800b030:	3301      	adds	r3, #1
 800b032:	613b      	str	r3, [r7, #16]
 800b034:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b038:	461a      	mov	r2, r3
 800b03a:	693b      	ldr	r3, [r7, #16]
 800b03c:	4293      	cmp	r3, r2
 800b03e:	d3b5      	bcc.n	800afac <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b040:	2300      	movs	r3, #0
 800b042:	613b      	str	r3, [r7, #16]
 800b044:	e043      	b.n	800b0ce <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b046:	693b      	ldr	r3, [r7, #16]
 800b048:	015a      	lsls	r2, r3, #5
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	4413      	add	r3, r2
 800b04e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b058:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b05c:	d118      	bne.n	800b090 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800b05e:	693b      	ldr	r3, [r7, #16]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d10a      	bne.n	800b07a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b064:	693b      	ldr	r3, [r7, #16]
 800b066:	015a      	lsls	r2, r3, #5
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	4413      	add	r3, r2
 800b06c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b070:	461a      	mov	r2, r3
 800b072:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800b076:	6013      	str	r3, [r2, #0]
 800b078:	e013      	b.n	800b0a2 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b07a:	693b      	ldr	r3, [r7, #16]
 800b07c:	015a      	lsls	r2, r3, #5
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	4413      	add	r3, r2
 800b082:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b086:	461a      	mov	r2, r3
 800b088:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800b08c:	6013      	str	r3, [r2, #0]
 800b08e:	e008      	b.n	800b0a2 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b090:	693b      	ldr	r3, [r7, #16]
 800b092:	015a      	lsls	r2, r3, #5
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	4413      	add	r3, r2
 800b098:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b09c:	461a      	mov	r2, r3
 800b09e:	2300      	movs	r3, #0
 800b0a0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b0a2:	693b      	ldr	r3, [r7, #16]
 800b0a4:	015a      	lsls	r2, r3, #5
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	4413      	add	r3, r2
 800b0aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b0ae:	461a      	mov	r2, r3
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b0b4:	693b      	ldr	r3, [r7, #16]
 800b0b6:	015a      	lsls	r2, r3, #5
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	4413      	add	r3, r2
 800b0bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b0c0:	461a      	mov	r2, r3
 800b0c2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800b0c6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b0c8:	693b      	ldr	r3, [r7, #16]
 800b0ca:	3301      	adds	r3, #1
 800b0cc:	613b      	str	r3, [r7, #16]
 800b0ce:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b0d2:	461a      	mov	r2, r3
 800b0d4:	693b      	ldr	r3, [r7, #16]
 800b0d6:	4293      	cmp	r3, r2
 800b0d8:	d3b5      	bcc.n	800b046 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b0e0:	691b      	ldr	r3, [r3, #16]
 800b0e2:	68fa      	ldr	r2, [r7, #12]
 800b0e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b0e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b0ec:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	2200      	movs	r2, #0
 800b0f2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800b0fa:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b0fc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b100:	2b00      	cmp	r3, #0
 800b102:	d105      	bne.n	800b110 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	699b      	ldr	r3, [r3, #24]
 800b108:	f043 0210 	orr.w	r2, r3, #16
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	699a      	ldr	r2, [r3, #24]
 800b114:	4b10      	ldr	r3, [pc, #64]	@ (800b158 <USB_DevInit+0x2c4>)
 800b116:	4313      	orrs	r3, r2
 800b118:	687a      	ldr	r2, [r7, #4]
 800b11a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b11c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800b120:	2b00      	cmp	r3, #0
 800b122:	d005      	beq.n	800b130 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	699b      	ldr	r3, [r3, #24]
 800b128:	f043 0208 	orr.w	r2, r3, #8
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b130:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b134:	2b01      	cmp	r3, #1
 800b136:	d107      	bne.n	800b148 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	699b      	ldr	r3, [r3, #24]
 800b13c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b140:	f043 0304 	orr.w	r3, r3, #4
 800b144:	687a      	ldr	r2, [r7, #4]
 800b146:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b148:	7dfb      	ldrb	r3, [r7, #23]
}
 800b14a:	4618      	mov	r0, r3
 800b14c:	3718      	adds	r7, #24
 800b14e:	46bd      	mov	sp, r7
 800b150:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b154:	b004      	add	sp, #16
 800b156:	4770      	bx	lr
 800b158:	803c3800 	.word	0x803c3800

0800b15c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b15c:	b480      	push	{r7}
 800b15e:	b085      	sub	sp, #20
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]
 800b164:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b166:	2300      	movs	r3, #0
 800b168:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	3301      	adds	r3, #1
 800b16e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b176:	d901      	bls.n	800b17c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b178:	2303      	movs	r3, #3
 800b17a:	e01b      	b.n	800b1b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	691b      	ldr	r3, [r3, #16]
 800b180:	2b00      	cmp	r3, #0
 800b182:	daf2      	bge.n	800b16a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b184:	2300      	movs	r3, #0
 800b186:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b188:	683b      	ldr	r3, [r7, #0]
 800b18a:	019b      	lsls	r3, r3, #6
 800b18c:	f043 0220 	orr.w	r2, r3, #32
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	3301      	adds	r3, #1
 800b198:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b1a0:	d901      	bls.n	800b1a6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800b1a2:	2303      	movs	r3, #3
 800b1a4:	e006      	b.n	800b1b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	691b      	ldr	r3, [r3, #16]
 800b1aa:	f003 0320 	and.w	r3, r3, #32
 800b1ae:	2b20      	cmp	r3, #32
 800b1b0:	d0f0      	beq.n	800b194 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b1b2:	2300      	movs	r3, #0
}
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	3714      	adds	r7, #20
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1be:	4770      	bx	lr

0800b1c0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b1c0:	b480      	push	{r7}
 800b1c2:	b085      	sub	sp, #20
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	3301      	adds	r3, #1
 800b1d0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b1d8:	d901      	bls.n	800b1de <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b1da:	2303      	movs	r3, #3
 800b1dc:	e018      	b.n	800b210 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	691b      	ldr	r3, [r3, #16]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	daf2      	bge.n	800b1cc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	2210      	movs	r2, #16
 800b1ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	3301      	adds	r3, #1
 800b1f4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b1fc:	d901      	bls.n	800b202 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b1fe:	2303      	movs	r3, #3
 800b200:	e006      	b.n	800b210 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	691b      	ldr	r3, [r3, #16]
 800b206:	f003 0310 	and.w	r3, r3, #16
 800b20a:	2b10      	cmp	r3, #16
 800b20c:	d0f0      	beq.n	800b1f0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b20e:	2300      	movs	r3, #0
}
 800b210:	4618      	mov	r0, r3
 800b212:	3714      	adds	r7, #20
 800b214:	46bd      	mov	sp, r7
 800b216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21a:	4770      	bx	lr

0800b21c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b21c:	b480      	push	{r7}
 800b21e:	b085      	sub	sp, #20
 800b220:	af00      	add	r7, sp, #0
 800b222:	6078      	str	r0, [r7, #4]
 800b224:	460b      	mov	r3, r1
 800b226:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b232:	681a      	ldr	r2, [r3, #0]
 800b234:	78fb      	ldrb	r3, [r7, #3]
 800b236:	68f9      	ldr	r1, [r7, #12]
 800b238:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b23c:	4313      	orrs	r3, r2
 800b23e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b240:	2300      	movs	r3, #0
}
 800b242:	4618      	mov	r0, r3
 800b244:	3714      	adds	r7, #20
 800b246:	46bd      	mov	sp, r7
 800b248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24c:	4770      	bx	lr

0800b24e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800b24e:	b480      	push	{r7}
 800b250:	b085      	sub	sp, #20
 800b252:	af00      	add	r7, sp, #0
 800b254:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	68fa      	ldr	r2, [r7, #12]
 800b264:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b268:	f023 0303 	bic.w	r3, r3, #3
 800b26c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b274:	685b      	ldr	r3, [r3, #4]
 800b276:	68fa      	ldr	r2, [r7, #12]
 800b278:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b27c:	f043 0302 	orr.w	r3, r3, #2
 800b280:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b282:	2300      	movs	r3, #0
}
 800b284:	4618      	mov	r0, r3
 800b286:	3714      	adds	r7, #20
 800b288:	46bd      	mov	sp, r7
 800b28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28e:	4770      	bx	lr

0800b290 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800b290:	b480      	push	{r7}
 800b292:	b083      	sub	sp, #12
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	695b      	ldr	r3, [r3, #20]
 800b29c:	f003 0301 	and.w	r3, r3, #1
}
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	370c      	adds	r7, #12
 800b2a4:	46bd      	mov	sp, r7
 800b2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2aa:	4770      	bx	lr

0800b2ac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b2ac:	b480      	push	{r7}
 800b2ae:	b085      	sub	sp, #20
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	3301      	adds	r3, #1
 800b2bc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b2c4:	d901      	bls.n	800b2ca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b2c6:	2303      	movs	r3, #3
 800b2c8:	e01b      	b.n	800b302 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	691b      	ldr	r3, [r3, #16]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	daf2      	bge.n	800b2b8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	691b      	ldr	r3, [r3, #16]
 800b2da:	f043 0201 	orr.w	r2, r3, #1
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	3301      	adds	r3, #1
 800b2e6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b2ee:	d901      	bls.n	800b2f4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b2f0:	2303      	movs	r3, #3
 800b2f2:	e006      	b.n	800b302 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	691b      	ldr	r3, [r3, #16]
 800b2f8:	f003 0301 	and.w	r3, r3, #1
 800b2fc:	2b01      	cmp	r3, #1
 800b2fe:	d0f0      	beq.n	800b2e2 <USB_CoreReset+0x36>

  return HAL_OK;
 800b300:	2300      	movs	r3, #0
}
 800b302:	4618      	mov	r0, r3
 800b304:	3714      	adds	r7, #20
 800b306:	46bd      	mov	sp, r7
 800b308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30c:	4770      	bx	lr
	...

0800b310 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800b310:	b580      	push	{r7, lr}
 800b312:	b084      	sub	sp, #16
 800b314:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800b316:	4b87      	ldr	r3, [pc, #540]	@ (800b534 <MX_LWIP_Init+0x224>)
 800b318:	22c0      	movs	r2, #192	@ 0xc0
 800b31a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800b31c:	4b85      	ldr	r3, [pc, #532]	@ (800b534 <MX_LWIP_Init+0x224>)
 800b31e:	22a8      	movs	r2, #168	@ 0xa8
 800b320:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800b322:	4b84      	ldr	r3, [pc, #528]	@ (800b534 <MX_LWIP_Init+0x224>)
 800b324:	2201      	movs	r2, #1
 800b326:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 156;
 800b328:	4b82      	ldr	r3, [pc, #520]	@ (800b534 <MX_LWIP_Init+0x224>)
 800b32a:	229c      	movs	r2, #156	@ 0x9c
 800b32c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800b32e:	4b82      	ldr	r3, [pc, #520]	@ (800b538 <MX_LWIP_Init+0x228>)
 800b330:	22ff      	movs	r2, #255	@ 0xff
 800b332:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800b334:	4b80      	ldr	r3, [pc, #512]	@ (800b538 <MX_LWIP_Init+0x228>)
 800b336:	22ff      	movs	r2, #255	@ 0xff
 800b338:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800b33a:	4b7f      	ldr	r3, [pc, #508]	@ (800b538 <MX_LWIP_Init+0x228>)
 800b33c:	22ff      	movs	r2, #255	@ 0xff
 800b33e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800b340:	4b7d      	ldr	r3, [pc, #500]	@ (800b538 <MX_LWIP_Init+0x228>)
 800b342:	2200      	movs	r2, #0
 800b344:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800b346:	4b7d      	ldr	r3, [pc, #500]	@ (800b53c <MX_LWIP_Init+0x22c>)
 800b348:	22c0      	movs	r2, #192	@ 0xc0
 800b34a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800b34c:	4b7b      	ldr	r3, [pc, #492]	@ (800b53c <MX_LWIP_Init+0x22c>)
 800b34e:	22a8      	movs	r2, #168	@ 0xa8
 800b350:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 800b352:	4b7a      	ldr	r3, [pc, #488]	@ (800b53c <MX_LWIP_Init+0x22c>)
 800b354:	2201      	movs	r2, #1
 800b356:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 800b358:	4b78      	ldr	r3, [pc, #480]	@ (800b53c <MX_LWIP_Init+0x22c>)
 800b35a:	2201      	movs	r2, #1
 800b35c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack without RTOS */
  lwip_init();
 800b35e:	f000 ffc2 	bl	800c2e6 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800b362:	4b74      	ldr	r3, [pc, #464]	@ (800b534 <MX_LWIP_Init+0x224>)
 800b364:	781b      	ldrb	r3, [r3, #0]
 800b366:	061a      	lsls	r2, r3, #24
 800b368:	4b72      	ldr	r3, [pc, #456]	@ (800b534 <MX_LWIP_Init+0x224>)
 800b36a:	785b      	ldrb	r3, [r3, #1]
 800b36c:	041b      	lsls	r3, r3, #16
 800b36e:	431a      	orrs	r2, r3
 800b370:	4b70      	ldr	r3, [pc, #448]	@ (800b534 <MX_LWIP_Init+0x224>)
 800b372:	789b      	ldrb	r3, [r3, #2]
 800b374:	021b      	lsls	r3, r3, #8
 800b376:	4313      	orrs	r3, r2
 800b378:	4a6e      	ldr	r2, [pc, #440]	@ (800b534 <MX_LWIP_Init+0x224>)
 800b37a:	78d2      	ldrb	r2, [r2, #3]
 800b37c:	4313      	orrs	r3, r2
 800b37e:	061a      	lsls	r2, r3, #24
 800b380:	4b6c      	ldr	r3, [pc, #432]	@ (800b534 <MX_LWIP_Init+0x224>)
 800b382:	781b      	ldrb	r3, [r3, #0]
 800b384:	0619      	lsls	r1, r3, #24
 800b386:	4b6b      	ldr	r3, [pc, #428]	@ (800b534 <MX_LWIP_Init+0x224>)
 800b388:	785b      	ldrb	r3, [r3, #1]
 800b38a:	041b      	lsls	r3, r3, #16
 800b38c:	4319      	orrs	r1, r3
 800b38e:	4b69      	ldr	r3, [pc, #420]	@ (800b534 <MX_LWIP_Init+0x224>)
 800b390:	789b      	ldrb	r3, [r3, #2]
 800b392:	021b      	lsls	r3, r3, #8
 800b394:	430b      	orrs	r3, r1
 800b396:	4967      	ldr	r1, [pc, #412]	@ (800b534 <MX_LWIP_Init+0x224>)
 800b398:	78c9      	ldrb	r1, [r1, #3]
 800b39a:	430b      	orrs	r3, r1
 800b39c:	021b      	lsls	r3, r3, #8
 800b39e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b3a2:	431a      	orrs	r2, r3
 800b3a4:	4b63      	ldr	r3, [pc, #396]	@ (800b534 <MX_LWIP_Init+0x224>)
 800b3a6:	781b      	ldrb	r3, [r3, #0]
 800b3a8:	0619      	lsls	r1, r3, #24
 800b3aa:	4b62      	ldr	r3, [pc, #392]	@ (800b534 <MX_LWIP_Init+0x224>)
 800b3ac:	785b      	ldrb	r3, [r3, #1]
 800b3ae:	041b      	lsls	r3, r3, #16
 800b3b0:	4319      	orrs	r1, r3
 800b3b2:	4b60      	ldr	r3, [pc, #384]	@ (800b534 <MX_LWIP_Init+0x224>)
 800b3b4:	789b      	ldrb	r3, [r3, #2]
 800b3b6:	021b      	lsls	r3, r3, #8
 800b3b8:	430b      	orrs	r3, r1
 800b3ba:	495e      	ldr	r1, [pc, #376]	@ (800b534 <MX_LWIP_Init+0x224>)
 800b3bc:	78c9      	ldrb	r1, [r1, #3]
 800b3be:	430b      	orrs	r3, r1
 800b3c0:	0a1b      	lsrs	r3, r3, #8
 800b3c2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800b3c6:	431a      	orrs	r2, r3
 800b3c8:	4b5a      	ldr	r3, [pc, #360]	@ (800b534 <MX_LWIP_Init+0x224>)
 800b3ca:	781b      	ldrb	r3, [r3, #0]
 800b3cc:	0619      	lsls	r1, r3, #24
 800b3ce:	4b59      	ldr	r3, [pc, #356]	@ (800b534 <MX_LWIP_Init+0x224>)
 800b3d0:	785b      	ldrb	r3, [r3, #1]
 800b3d2:	041b      	lsls	r3, r3, #16
 800b3d4:	4319      	orrs	r1, r3
 800b3d6:	4b57      	ldr	r3, [pc, #348]	@ (800b534 <MX_LWIP_Init+0x224>)
 800b3d8:	789b      	ldrb	r3, [r3, #2]
 800b3da:	021b      	lsls	r3, r3, #8
 800b3dc:	430b      	orrs	r3, r1
 800b3de:	4955      	ldr	r1, [pc, #340]	@ (800b534 <MX_LWIP_Init+0x224>)
 800b3e0:	78c9      	ldrb	r1, [r1, #3]
 800b3e2:	430b      	orrs	r3, r1
 800b3e4:	0e1b      	lsrs	r3, r3, #24
 800b3e6:	4313      	orrs	r3, r2
 800b3e8:	4a55      	ldr	r2, [pc, #340]	@ (800b540 <MX_LWIP_Init+0x230>)
 800b3ea:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800b3ec:	4b52      	ldr	r3, [pc, #328]	@ (800b538 <MX_LWIP_Init+0x228>)
 800b3ee:	781b      	ldrb	r3, [r3, #0]
 800b3f0:	061a      	lsls	r2, r3, #24
 800b3f2:	4b51      	ldr	r3, [pc, #324]	@ (800b538 <MX_LWIP_Init+0x228>)
 800b3f4:	785b      	ldrb	r3, [r3, #1]
 800b3f6:	041b      	lsls	r3, r3, #16
 800b3f8:	431a      	orrs	r2, r3
 800b3fa:	4b4f      	ldr	r3, [pc, #316]	@ (800b538 <MX_LWIP_Init+0x228>)
 800b3fc:	789b      	ldrb	r3, [r3, #2]
 800b3fe:	021b      	lsls	r3, r3, #8
 800b400:	4313      	orrs	r3, r2
 800b402:	4a4d      	ldr	r2, [pc, #308]	@ (800b538 <MX_LWIP_Init+0x228>)
 800b404:	78d2      	ldrb	r2, [r2, #3]
 800b406:	4313      	orrs	r3, r2
 800b408:	061a      	lsls	r2, r3, #24
 800b40a:	4b4b      	ldr	r3, [pc, #300]	@ (800b538 <MX_LWIP_Init+0x228>)
 800b40c:	781b      	ldrb	r3, [r3, #0]
 800b40e:	0619      	lsls	r1, r3, #24
 800b410:	4b49      	ldr	r3, [pc, #292]	@ (800b538 <MX_LWIP_Init+0x228>)
 800b412:	785b      	ldrb	r3, [r3, #1]
 800b414:	041b      	lsls	r3, r3, #16
 800b416:	4319      	orrs	r1, r3
 800b418:	4b47      	ldr	r3, [pc, #284]	@ (800b538 <MX_LWIP_Init+0x228>)
 800b41a:	789b      	ldrb	r3, [r3, #2]
 800b41c:	021b      	lsls	r3, r3, #8
 800b41e:	430b      	orrs	r3, r1
 800b420:	4945      	ldr	r1, [pc, #276]	@ (800b538 <MX_LWIP_Init+0x228>)
 800b422:	78c9      	ldrb	r1, [r1, #3]
 800b424:	430b      	orrs	r3, r1
 800b426:	021b      	lsls	r3, r3, #8
 800b428:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b42c:	431a      	orrs	r2, r3
 800b42e:	4b42      	ldr	r3, [pc, #264]	@ (800b538 <MX_LWIP_Init+0x228>)
 800b430:	781b      	ldrb	r3, [r3, #0]
 800b432:	0619      	lsls	r1, r3, #24
 800b434:	4b40      	ldr	r3, [pc, #256]	@ (800b538 <MX_LWIP_Init+0x228>)
 800b436:	785b      	ldrb	r3, [r3, #1]
 800b438:	041b      	lsls	r3, r3, #16
 800b43a:	4319      	orrs	r1, r3
 800b43c:	4b3e      	ldr	r3, [pc, #248]	@ (800b538 <MX_LWIP_Init+0x228>)
 800b43e:	789b      	ldrb	r3, [r3, #2]
 800b440:	021b      	lsls	r3, r3, #8
 800b442:	430b      	orrs	r3, r1
 800b444:	493c      	ldr	r1, [pc, #240]	@ (800b538 <MX_LWIP_Init+0x228>)
 800b446:	78c9      	ldrb	r1, [r1, #3]
 800b448:	430b      	orrs	r3, r1
 800b44a:	0a1b      	lsrs	r3, r3, #8
 800b44c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800b450:	431a      	orrs	r2, r3
 800b452:	4b39      	ldr	r3, [pc, #228]	@ (800b538 <MX_LWIP_Init+0x228>)
 800b454:	781b      	ldrb	r3, [r3, #0]
 800b456:	0619      	lsls	r1, r3, #24
 800b458:	4b37      	ldr	r3, [pc, #220]	@ (800b538 <MX_LWIP_Init+0x228>)
 800b45a:	785b      	ldrb	r3, [r3, #1]
 800b45c:	041b      	lsls	r3, r3, #16
 800b45e:	4319      	orrs	r1, r3
 800b460:	4b35      	ldr	r3, [pc, #212]	@ (800b538 <MX_LWIP_Init+0x228>)
 800b462:	789b      	ldrb	r3, [r3, #2]
 800b464:	021b      	lsls	r3, r3, #8
 800b466:	430b      	orrs	r3, r1
 800b468:	4933      	ldr	r1, [pc, #204]	@ (800b538 <MX_LWIP_Init+0x228>)
 800b46a:	78c9      	ldrb	r1, [r1, #3]
 800b46c:	430b      	orrs	r3, r1
 800b46e:	0e1b      	lsrs	r3, r3, #24
 800b470:	4313      	orrs	r3, r2
 800b472:	4a34      	ldr	r2, [pc, #208]	@ (800b544 <MX_LWIP_Init+0x234>)
 800b474:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800b476:	4b31      	ldr	r3, [pc, #196]	@ (800b53c <MX_LWIP_Init+0x22c>)
 800b478:	781b      	ldrb	r3, [r3, #0]
 800b47a:	061a      	lsls	r2, r3, #24
 800b47c:	4b2f      	ldr	r3, [pc, #188]	@ (800b53c <MX_LWIP_Init+0x22c>)
 800b47e:	785b      	ldrb	r3, [r3, #1]
 800b480:	041b      	lsls	r3, r3, #16
 800b482:	431a      	orrs	r2, r3
 800b484:	4b2d      	ldr	r3, [pc, #180]	@ (800b53c <MX_LWIP_Init+0x22c>)
 800b486:	789b      	ldrb	r3, [r3, #2]
 800b488:	021b      	lsls	r3, r3, #8
 800b48a:	4313      	orrs	r3, r2
 800b48c:	4a2b      	ldr	r2, [pc, #172]	@ (800b53c <MX_LWIP_Init+0x22c>)
 800b48e:	78d2      	ldrb	r2, [r2, #3]
 800b490:	4313      	orrs	r3, r2
 800b492:	061a      	lsls	r2, r3, #24
 800b494:	4b29      	ldr	r3, [pc, #164]	@ (800b53c <MX_LWIP_Init+0x22c>)
 800b496:	781b      	ldrb	r3, [r3, #0]
 800b498:	0619      	lsls	r1, r3, #24
 800b49a:	4b28      	ldr	r3, [pc, #160]	@ (800b53c <MX_LWIP_Init+0x22c>)
 800b49c:	785b      	ldrb	r3, [r3, #1]
 800b49e:	041b      	lsls	r3, r3, #16
 800b4a0:	4319      	orrs	r1, r3
 800b4a2:	4b26      	ldr	r3, [pc, #152]	@ (800b53c <MX_LWIP_Init+0x22c>)
 800b4a4:	789b      	ldrb	r3, [r3, #2]
 800b4a6:	021b      	lsls	r3, r3, #8
 800b4a8:	430b      	orrs	r3, r1
 800b4aa:	4924      	ldr	r1, [pc, #144]	@ (800b53c <MX_LWIP_Init+0x22c>)
 800b4ac:	78c9      	ldrb	r1, [r1, #3]
 800b4ae:	430b      	orrs	r3, r1
 800b4b0:	021b      	lsls	r3, r3, #8
 800b4b2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b4b6:	431a      	orrs	r2, r3
 800b4b8:	4b20      	ldr	r3, [pc, #128]	@ (800b53c <MX_LWIP_Init+0x22c>)
 800b4ba:	781b      	ldrb	r3, [r3, #0]
 800b4bc:	0619      	lsls	r1, r3, #24
 800b4be:	4b1f      	ldr	r3, [pc, #124]	@ (800b53c <MX_LWIP_Init+0x22c>)
 800b4c0:	785b      	ldrb	r3, [r3, #1]
 800b4c2:	041b      	lsls	r3, r3, #16
 800b4c4:	4319      	orrs	r1, r3
 800b4c6:	4b1d      	ldr	r3, [pc, #116]	@ (800b53c <MX_LWIP_Init+0x22c>)
 800b4c8:	789b      	ldrb	r3, [r3, #2]
 800b4ca:	021b      	lsls	r3, r3, #8
 800b4cc:	430b      	orrs	r3, r1
 800b4ce:	491b      	ldr	r1, [pc, #108]	@ (800b53c <MX_LWIP_Init+0x22c>)
 800b4d0:	78c9      	ldrb	r1, [r1, #3]
 800b4d2:	430b      	orrs	r3, r1
 800b4d4:	0a1b      	lsrs	r3, r3, #8
 800b4d6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800b4da:	431a      	orrs	r2, r3
 800b4dc:	4b17      	ldr	r3, [pc, #92]	@ (800b53c <MX_LWIP_Init+0x22c>)
 800b4de:	781b      	ldrb	r3, [r3, #0]
 800b4e0:	0619      	lsls	r1, r3, #24
 800b4e2:	4b16      	ldr	r3, [pc, #88]	@ (800b53c <MX_LWIP_Init+0x22c>)
 800b4e4:	785b      	ldrb	r3, [r3, #1]
 800b4e6:	041b      	lsls	r3, r3, #16
 800b4e8:	4319      	orrs	r1, r3
 800b4ea:	4b14      	ldr	r3, [pc, #80]	@ (800b53c <MX_LWIP_Init+0x22c>)
 800b4ec:	789b      	ldrb	r3, [r3, #2]
 800b4ee:	021b      	lsls	r3, r3, #8
 800b4f0:	430b      	orrs	r3, r1
 800b4f2:	4912      	ldr	r1, [pc, #72]	@ (800b53c <MX_LWIP_Init+0x22c>)
 800b4f4:	78c9      	ldrb	r1, [r1, #3]
 800b4f6:	430b      	orrs	r3, r1
 800b4f8:	0e1b      	lsrs	r3, r3, #24
 800b4fa:	4313      	orrs	r3, r2
 800b4fc:	4a12      	ldr	r2, [pc, #72]	@ (800b548 <MX_LWIP_Init+0x238>)
 800b4fe:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800b500:	4b12      	ldr	r3, [pc, #72]	@ (800b54c <MX_LWIP_Init+0x23c>)
 800b502:	9302      	str	r3, [sp, #8]
 800b504:	4b12      	ldr	r3, [pc, #72]	@ (800b550 <MX_LWIP_Init+0x240>)
 800b506:	9301      	str	r3, [sp, #4]
 800b508:	2300      	movs	r3, #0
 800b50a:	9300      	str	r3, [sp, #0]
 800b50c:	4b0e      	ldr	r3, [pc, #56]	@ (800b548 <MX_LWIP_Init+0x238>)
 800b50e:	4a0d      	ldr	r2, [pc, #52]	@ (800b544 <MX_LWIP_Init+0x234>)
 800b510:	490b      	ldr	r1, [pc, #44]	@ (800b540 <MX_LWIP_Init+0x230>)
 800b512:	4810      	ldr	r0, [pc, #64]	@ (800b554 <MX_LWIP_Init+0x244>)
 800b514:	f001 fbd4 	bl	800ccc0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800b518:	480e      	ldr	r0, [pc, #56]	@ (800b554 <MX_LWIP_Init+0x244>)
 800b51a:	f001 fd83 	bl	800d024 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 800b51e:	480d      	ldr	r0, [pc, #52]	@ (800b554 <MX_LWIP_Init+0x244>)
 800b520:	f001 fd90 	bl	800d044 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800b524:	490c      	ldr	r1, [pc, #48]	@ (800b558 <MX_LWIP_Init+0x248>)
 800b526:	480b      	ldr	r0, [pc, #44]	@ (800b554 <MX_LWIP_Init+0x244>)
 800b528:	f001 fe8e 	bl	800d248 <netif_set_link_callback>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800b52c:	bf00      	nop
 800b52e:	46bd      	mov	sp, r7
 800b530:	bd80      	pop	{r7, pc}
 800b532:	bf00      	nop
 800b534:	2000e610 	.word	0x2000e610
 800b538:	2000e614 	.word	0x2000e614
 800b53c:	2000e618 	.word	0x2000e618
 800b540:	2000e604 	.word	0x2000e604
 800b544:	2000e608 	.word	0x2000e608
 800b548:	2000e60c 	.word	0x2000e60c
 800b54c:	080164f5 	.word	0x080164f5
 800b550:	0800b879 	.word	0x0800b879
 800b554:	2000e5d0 	.word	0x2000e5d0
 800b558:	0800b5ad 	.word	0x0800b5ad

0800b55c <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b082      	sub	sp, #8
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 800b564:	f7fb fa04 	bl	8006970 <HAL_GetTick>
 800b568:	4602      	mov	r2, r0
 800b56a:	4b08      	ldr	r3, [pc, #32]	@ (800b58c <Ethernet_Link_Periodic_Handle+0x30>)
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	1ad3      	subs	r3, r2, r3
 800b570:	2b63      	cmp	r3, #99	@ 0x63
 800b572:	d907      	bls.n	800b584 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 800b574:	f7fb f9fc 	bl	8006970 <HAL_GetTick>
 800b578:	4603      	mov	r3, r0
 800b57a:	4a04      	ldr	r2, [pc, #16]	@ (800b58c <Ethernet_Link_Periodic_Handle+0x30>)
 800b57c:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 800b57e:	6878      	ldr	r0, [r7, #4]
 800b580:	f000 fabe 	bl	800bb00 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 800b584:	bf00      	nop
 800b586:	3708      	adds	r7, #8
 800b588:	46bd      	mov	sp, r7
 800b58a:	bd80      	pop	{r7, pc}
 800b58c:	2000e5cc 	.word	0x2000e5cc

0800b590 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 800b590:	b580      	push	{r7, lr}
 800b592:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 800b594:	4804      	ldr	r0, [pc, #16]	@ (800b5a8 <MX_LWIP_Process+0x18>)
 800b596:	f000 f94f 	bl	800b838 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 800b59a:	f008 f82d 	bl	80135f8 <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 800b59e:	4802      	ldr	r0, [pc, #8]	@ (800b5a8 <MX_LWIP_Process+0x18>)
 800b5a0:	f7ff ffdc 	bl	800b55c <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 800b5a4:	bf00      	nop
 800b5a6:	bd80      	pop	{r7, pc}
 800b5a8:	2000e5d0 	.word	0x2000e5d0

0800b5ac <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800b5ac:	b480      	push	{r7}
 800b5ae:	b083      	sub	sp, #12
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800b5b4:	bf00      	nop
 800b5b6:	370c      	adds	r7, #12
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5be:	4770      	bx	lr

0800b5c0 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b084      	sub	sp, #16
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800b5cc:	4b44      	ldr	r3, [pc, #272]	@ (800b6e0 <low_level_init+0x120>)
 800b5ce:	4a45      	ldr	r2, [pc, #276]	@ (800b6e4 <low_level_init+0x124>)
 800b5d0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x50;
 800b5d2:	2350      	movs	r3, #80	@ 0x50
 800b5d4:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x39;
 800b5d6:	2339      	movs	r3, #57	@ 0x39
 800b5d8:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0x64;
 800b5da:	2364      	movs	r3, #100	@ 0x64
 800b5dc:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0xFD;
 800b5de:	23fd      	movs	r3, #253	@ 0xfd
 800b5e0:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x60;
 800b5e2:	2360      	movs	r3, #96	@ 0x60
 800b5e4:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800b5ea:	4a3d      	ldr	r2, [pc, #244]	@ (800b6e0 <low_level_init+0x120>)
 800b5ec:	f107 0308 	add.w	r3, r7, #8
 800b5f0:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800b5f2:	4b3b      	ldr	r3, [pc, #236]	@ (800b6e0 <low_level_init+0x120>)
 800b5f4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800b5f8:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800b5fa:	4b39      	ldr	r3, [pc, #228]	@ (800b6e0 <low_level_init+0x120>)
 800b5fc:	4a3a      	ldr	r2, [pc, #232]	@ (800b6e8 <low_level_init+0x128>)
 800b5fe:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800b600:	4b37      	ldr	r3, [pc, #220]	@ (800b6e0 <low_level_init+0x120>)
 800b602:	4a3a      	ldr	r2, [pc, #232]	@ (800b6ec <low_level_init+0x12c>)
 800b604:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1024;
 800b606:	4b36      	ldr	r3, [pc, #216]	@ (800b6e0 <low_level_init+0x120>)
 800b608:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800b60c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800b60e:	4834      	ldr	r0, [pc, #208]	@ (800b6e0 <low_level_init+0x120>)
 800b610:	f7fb fec8 	bl	80073a4 <HAL_ETH_Init>
 800b614:	4603      	mov	r3, r0
 800b616:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800b618:	2238      	movs	r2, #56	@ 0x38
 800b61a:	2100      	movs	r1, #0
 800b61c:	4834      	ldr	r0, [pc, #208]	@ (800b6f0 <low_level_init+0x130>)
 800b61e:	f00c f87e 	bl	801771e <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800b622:	4b33      	ldr	r3, [pc, #204]	@ (800b6f0 <low_level_init+0x130>)
 800b624:	2221      	movs	r2, #33	@ 0x21
 800b626:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800b628:	4b31      	ldr	r3, [pc, #196]	@ (800b6f0 <low_level_init+0x130>)
 800b62a:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800b62e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800b630:	4b2f      	ldr	r3, [pc, #188]	@ (800b6f0 <low_level_init+0x130>)
 800b632:	2200      	movs	r2, #0
 800b634:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800b636:	482f      	ldr	r0, [pc, #188]	@ (800b6f4 <low_level_init+0x134>)
 800b638:	f001 fa0a 	bl	800ca50 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	2206      	movs	r2, #6
 800b640:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800b644:	4b26      	ldr	r3, [pc, #152]	@ (800b6e0 <low_level_init+0x120>)
 800b646:	685b      	ldr	r3, [r3, #4]
 800b648:	781a      	ldrb	r2, [r3, #0]
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800b650:	4b23      	ldr	r3, [pc, #140]	@ (800b6e0 <low_level_init+0x120>)
 800b652:	685b      	ldr	r3, [r3, #4]
 800b654:	785a      	ldrb	r2, [r3, #1]
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800b65c:	4b20      	ldr	r3, [pc, #128]	@ (800b6e0 <low_level_init+0x120>)
 800b65e:	685b      	ldr	r3, [r3, #4]
 800b660:	789a      	ldrb	r2, [r3, #2]
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800b668:	4b1d      	ldr	r3, [pc, #116]	@ (800b6e0 <low_level_init+0x120>)
 800b66a:	685b      	ldr	r3, [r3, #4]
 800b66c:	78da      	ldrb	r2, [r3, #3]
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800b674:	4b1a      	ldr	r3, [pc, #104]	@ (800b6e0 <low_level_init+0x120>)
 800b676:	685b      	ldr	r3, [r3, #4]
 800b678:	791a      	ldrb	r2, [r3, #4]
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800b680:	4b17      	ldr	r3, [pc, #92]	@ (800b6e0 <low_level_init+0x120>)
 800b682:	685b      	ldr	r3, [r3, #4]
 800b684:	795a      	ldrb	r2, [r3, #5]
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800b692:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b69a:	f043 030a 	orr.w	r3, r3, #10
 800b69e:	b2da      	uxtb	r2, r3
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800b6a6:	4914      	ldr	r1, [pc, #80]	@ (800b6f8 <low_level_init+0x138>)
 800b6a8:	4814      	ldr	r0, [pc, #80]	@ (800b6fc <low_level_init+0x13c>)
 800b6aa:	f7fa fff4 	bl	8006696 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 800b6ae:	4813      	ldr	r0, [pc, #76]	@ (800b6fc <low_level_init+0x13c>)
 800b6b0:	f7fb f823 	bl	80066fa <LAN8742_Init>
 800b6b4:	4603      	mov	r3, r0
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d006      	beq.n	800b6c8 <low_level_init+0x108>
  {
    netif_set_link_down(netif);
 800b6ba:	6878      	ldr	r0, [r7, #4]
 800b6bc:	f001 fd94 	bl	800d1e8 <netif_set_link_down>
    netif_set_down(netif);
 800b6c0:	6878      	ldr	r0, [r7, #4]
 800b6c2:	f001 fd2b 	bl	800d11c <netif_set_down>
 800b6c6:	e008      	b.n	800b6da <low_level_init+0x11a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 800b6c8:	7bfb      	ldrb	r3, [r7, #15]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d103      	bne.n	800b6d6 <low_level_init+0x116>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 800b6ce:	6878      	ldr	r0, [r7, #4]
 800b6d0:	f000 fa16 	bl	800bb00 <ethernet_link_check_state>
 800b6d4:	e001      	b.n	800b6da <low_level_init+0x11a>
  }
  else
  {
    Error_Handler();
 800b6d6:	f7f9 fec5 	bl	8005464 <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800b6da:	3710      	adds	r7, #16
 800b6dc:	46bd      	mov	sp, r7
 800b6de:	bd80      	pop	{r7, pc}
 800b6e0:	200118e8 	.word	0x200118e8
 800b6e4:	40028000 	.word	0x40028000
 800b6e8:	20011848 	.word	0x20011848
 800b6ec:	200117a8 	.word	0x200117a8
 800b6f0:	20011998 	.word	0x20011998
 800b6f4:	08022d00 	.word	0x08022d00
 800b6f8:	200008f4 	.word	0x200008f4
 800b6fc:	200119d0 	.word	0x200119d0

0800b700 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800b700:	b580      	push	{r7, lr}
 800b702:	b092      	sub	sp, #72	@ 0x48
 800b704:	af00      	add	r7, sp, #0
 800b706:	6078      	str	r0, [r7, #4]
 800b708:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800b70a:	2300      	movs	r3, #0
 800b70c:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 800b70e:	2300      	movs	r3, #0
 800b710:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 800b712:	2300      	movs	r3, #0
 800b714:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800b718:	f107 030c 	add.w	r3, r7, #12
 800b71c:	2230      	movs	r2, #48	@ 0x30
 800b71e:	2100      	movs	r1, #0
 800b720:	4618      	mov	r0, r3
 800b722:	f00b fffc 	bl	801771e <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800b726:	f107 030c 	add.w	r3, r7, #12
 800b72a:	2230      	movs	r2, #48	@ 0x30
 800b72c:	2100      	movs	r1, #0
 800b72e:	4618      	mov	r0, r3
 800b730:	f00b fff5 	bl	801771e <memset>

  for(q = p; q != NULL; q = q->next)
 800b734:	683b      	ldr	r3, [r7, #0]
 800b736:	643b      	str	r3, [r7, #64]	@ 0x40
 800b738:	e045      	b.n	800b7c6 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800b73a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b73c:	2b03      	cmp	r3, #3
 800b73e:	d902      	bls.n	800b746 <low_level_output+0x46>
      return ERR_IF;
 800b740:	f06f 030b 	mvn.w	r3, #11
 800b744:	e055      	b.n	800b7f2 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 800b746:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b748:	6859      	ldr	r1, [r3, #4]
 800b74a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b74c:	4613      	mov	r3, r2
 800b74e:	005b      	lsls	r3, r3, #1
 800b750:	4413      	add	r3, r2
 800b752:	009b      	lsls	r3, r3, #2
 800b754:	3348      	adds	r3, #72	@ 0x48
 800b756:	443b      	add	r3, r7
 800b758:	3b3c      	subs	r3, #60	@ 0x3c
 800b75a:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800b75c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b75e:	895b      	ldrh	r3, [r3, #10]
 800b760:	4619      	mov	r1, r3
 800b762:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b764:	4613      	mov	r3, r2
 800b766:	005b      	lsls	r3, r3, #1
 800b768:	4413      	add	r3, r2
 800b76a:	009b      	lsls	r3, r3, #2
 800b76c:	3348      	adds	r3, #72	@ 0x48
 800b76e:	443b      	add	r3, r7
 800b770:	3b38      	subs	r3, #56	@ 0x38
 800b772:	6019      	str	r1, [r3, #0]

    if(i>0)
 800b774:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b776:	2b00      	cmp	r3, #0
 800b778:	d011      	beq.n	800b79e <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800b77a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b77c:	1e5a      	subs	r2, r3, #1
 800b77e:	f107 000c 	add.w	r0, r7, #12
 800b782:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b784:	460b      	mov	r3, r1
 800b786:	005b      	lsls	r3, r3, #1
 800b788:	440b      	add	r3, r1
 800b78a:	009b      	lsls	r3, r3, #2
 800b78c:	18c1      	adds	r1, r0, r3
 800b78e:	4613      	mov	r3, r2
 800b790:	005b      	lsls	r3, r3, #1
 800b792:	4413      	add	r3, r2
 800b794:	009b      	lsls	r3, r3, #2
 800b796:	3348      	adds	r3, #72	@ 0x48
 800b798:	443b      	add	r3, r7
 800b79a:	3b34      	subs	r3, #52	@ 0x34
 800b79c:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800b79e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d109      	bne.n	800b7ba <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800b7a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b7a8:	4613      	mov	r3, r2
 800b7aa:	005b      	lsls	r3, r3, #1
 800b7ac:	4413      	add	r3, r2
 800b7ae:	009b      	lsls	r3, r3, #2
 800b7b0:	3348      	adds	r3, #72	@ 0x48
 800b7b2:	443b      	add	r3, r7
 800b7b4:	3b34      	subs	r3, #52	@ 0x34
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	601a      	str	r2, [r3, #0]
    }

    i++;
 800b7ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b7bc:	3301      	adds	r3, #1
 800b7be:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 800b7c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	643b      	str	r3, [r7, #64]	@ 0x40
 800b7c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d1b6      	bne.n	800b73a <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800b7cc:	683b      	ldr	r3, [r7, #0]
 800b7ce:	891b      	ldrh	r3, [r3, #8]
 800b7d0:	461a      	mov	r2, r3
 800b7d2:	4b0a      	ldr	r3, [pc, #40]	@ (800b7fc <low_level_output+0xfc>)
 800b7d4:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800b7d6:	4a09      	ldr	r2, [pc, #36]	@ (800b7fc <low_level_output+0xfc>)
 800b7d8:	f107 030c 	add.w	r3, r7, #12
 800b7dc:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800b7de:	4a07      	ldr	r2, [pc, #28]	@ (800b7fc <low_level_output+0xfc>)
 800b7e0:	683b      	ldr	r3, [r7, #0]
 800b7e2:	6353      	str	r3, [r2, #52]	@ 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800b7e4:	2214      	movs	r2, #20
 800b7e6:	4905      	ldr	r1, [pc, #20]	@ (800b7fc <low_level_output+0xfc>)
 800b7e8:	4805      	ldr	r0, [pc, #20]	@ (800b800 <low_level_output+0x100>)
 800b7ea:	f7fb ff2f 	bl	800764c <HAL_ETH_Transmit>

  return errval;
 800b7ee:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	3748      	adds	r7, #72	@ 0x48
 800b7f6:	46bd      	mov	sp, r7
 800b7f8:	bd80      	pop	{r7, pc}
 800b7fa:	bf00      	nop
 800b7fc:	20011998 	.word	0x20011998
 800b800:	200118e8 	.word	0x200118e8

0800b804 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800b804:	b580      	push	{r7, lr}
 800b806:	b084      	sub	sp, #16
 800b808:	af00      	add	r7, sp, #0
 800b80a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800b80c:	2300      	movs	r3, #0
 800b80e:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800b810:	4b07      	ldr	r3, [pc, #28]	@ (800b830 <low_level_input+0x2c>)
 800b812:	781b      	ldrb	r3, [r3, #0]
 800b814:	2b00      	cmp	r3, #0
 800b816:	d105      	bne.n	800b824 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800b818:	f107 030c 	add.w	r3, r7, #12
 800b81c:	4619      	mov	r1, r3
 800b81e:	4805      	ldr	r0, [pc, #20]	@ (800b834 <low_level_input+0x30>)
 800b820:	f7fb ffa8 	bl	8007774 <HAL_ETH_ReadData>
  }

  return p;
 800b824:	68fb      	ldr	r3, [r7, #12]
}
 800b826:	4618      	mov	r0, r3
 800b828:	3710      	adds	r7, #16
 800b82a:	46bd      	mov	sp, r7
 800b82c:	bd80      	pop	{r7, pc}
 800b82e:	bf00      	nop
 800b830:	200117a4 	.word	0x200117a4
 800b834:	200118e8 	.word	0x200118e8

0800b838 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 800b838:	b580      	push	{r7, lr}
 800b83a:	b084      	sub	sp, #16
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800b840:	2300      	movs	r3, #0
 800b842:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 800b844:	6878      	ldr	r0, [r7, #4]
 800b846:	f7ff ffdd 	bl	800b804 <low_level_input>
 800b84a:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d00a      	beq.n	800b868 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	691b      	ldr	r3, [r3, #16]
 800b856:	6879      	ldr	r1, [r7, #4]
 800b858:	68f8      	ldr	r0, [r7, #12]
 800b85a:	4798      	blx	r3
 800b85c:	4603      	mov	r3, r0
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d002      	beq.n	800b868 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 800b862:	68f8      	ldr	r0, [r7, #12]
 800b864:	f002 f870 	bl	800d948 <pbuf_free>
      }
    }
  } while(p!=NULL);
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d1ea      	bne.n	800b844 <ethernetif_input+0xc>
}
 800b86e:	bf00      	nop
 800b870:	bf00      	nop
 800b872:	3710      	adds	r7, #16
 800b874:	46bd      	mov	sp, r7
 800b876:	bd80      	pop	{r7, pc}

0800b878 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800b878:	b580      	push	{r7, lr}
 800b87a:	b082      	sub	sp, #8
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	2b00      	cmp	r3, #0
 800b884:	d106      	bne.n	800b894 <ethernetif_init+0x1c>
 800b886:	4b0e      	ldr	r3, [pc, #56]	@ (800b8c0 <ethernetif_init+0x48>)
 800b888:	f240 126f 	movw	r2, #367	@ 0x16f
 800b88c:	490d      	ldr	r1, [pc, #52]	@ (800b8c4 <ethernetif_init+0x4c>)
 800b88e:	480e      	ldr	r0, [pc, #56]	@ (800b8c8 <ethernetif_init+0x50>)
 800b890:	f00b fea4 	bl	80175dc <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	2273      	movs	r2, #115	@ 0x73
 800b898:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	2274      	movs	r2, #116	@ 0x74
 800b8a0:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	4a09      	ldr	r2, [pc, #36]	@ (800b8cc <ethernetif_init+0x54>)
 800b8a8:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	4a08      	ldr	r2, [pc, #32]	@ (800b8d0 <ethernetif_init+0x58>)
 800b8ae:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800b8b0:	6878      	ldr	r0, [r7, #4]
 800b8b2:	f7ff fe85 	bl	800b5c0 <low_level_init>

  return ERR_OK;
 800b8b6:	2300      	movs	r3, #0
}
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	3708      	adds	r7, #8
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	bd80      	pop	{r7, pc}
 800b8c0:	0802025c 	.word	0x0802025c
 800b8c4:	08020278 	.word	0x08020278
 800b8c8:	08020288 	.word	0x08020288
 800b8cc:	080149ad 	.word	0x080149ad
 800b8d0:	0800b701 	.word	0x0800b701

0800b8d4 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b084      	sub	sp, #16
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800b8e0:	68f9      	ldr	r1, [r7, #12]
 800b8e2:	4807      	ldr	r0, [pc, #28]	@ (800b900 <pbuf_free_custom+0x2c>)
 800b8e4:	f001 f996 	bl	800cc14 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800b8e8:	4b06      	ldr	r3, [pc, #24]	@ (800b904 <pbuf_free_custom+0x30>)
 800b8ea:	781b      	ldrb	r3, [r3, #0]
 800b8ec:	2b01      	cmp	r3, #1
 800b8ee:	d102      	bne.n	800b8f6 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800b8f0:	4b04      	ldr	r3, [pc, #16]	@ (800b904 <pbuf_free_custom+0x30>)
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	701a      	strb	r2, [r3, #0]
  }
}
 800b8f6:	bf00      	nop
 800b8f8:	3710      	adds	r7, #16
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	bd80      	pop	{r7, pc}
 800b8fe:	bf00      	nop
 800b900:	08022d00 	.word	0x08022d00
 800b904:	200117a4 	.word	0x200117a4

0800b908 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800b908:	b580      	push	{r7, lr}
 800b90a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800b90c:	f7fb f830 	bl	8006970 <HAL_GetTick>
 800b910:	4603      	mov	r3, r0
}
 800b912:	4618      	mov	r0, r3
 800b914:	bd80      	pop	{r7, pc}
	...

0800b918 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800b918:	b580      	push	{r7, lr}
 800b91a:	b08e      	sub	sp, #56	@ 0x38
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b920:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b924:	2200      	movs	r2, #0
 800b926:	601a      	str	r2, [r3, #0]
 800b928:	605a      	str	r2, [r3, #4]
 800b92a:	609a      	str	r2, [r3, #8]
 800b92c:	60da      	str	r2, [r3, #12]
 800b92e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	4a46      	ldr	r2, [pc, #280]	@ (800ba50 <HAL_ETH_MspInit+0x138>)
 800b936:	4293      	cmp	r3, r2
 800b938:	f040 8085 	bne.w	800ba46 <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800b93c:	2300      	movs	r3, #0
 800b93e:	623b      	str	r3, [r7, #32]
 800b940:	4b44      	ldr	r3, [pc, #272]	@ (800ba54 <HAL_ETH_MspInit+0x13c>)
 800b942:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b944:	4a43      	ldr	r2, [pc, #268]	@ (800ba54 <HAL_ETH_MspInit+0x13c>)
 800b946:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800b94a:	6313      	str	r3, [r2, #48]	@ 0x30
 800b94c:	4b41      	ldr	r3, [pc, #260]	@ (800ba54 <HAL_ETH_MspInit+0x13c>)
 800b94e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b950:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b954:	623b      	str	r3, [r7, #32]
 800b956:	6a3b      	ldr	r3, [r7, #32]
 800b958:	2300      	movs	r3, #0
 800b95a:	61fb      	str	r3, [r7, #28]
 800b95c:	4b3d      	ldr	r3, [pc, #244]	@ (800ba54 <HAL_ETH_MspInit+0x13c>)
 800b95e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b960:	4a3c      	ldr	r2, [pc, #240]	@ (800ba54 <HAL_ETH_MspInit+0x13c>)
 800b962:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b966:	6313      	str	r3, [r2, #48]	@ 0x30
 800b968:	4b3a      	ldr	r3, [pc, #232]	@ (800ba54 <HAL_ETH_MspInit+0x13c>)
 800b96a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b96c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b970:	61fb      	str	r3, [r7, #28]
 800b972:	69fb      	ldr	r3, [r7, #28]
 800b974:	2300      	movs	r3, #0
 800b976:	61bb      	str	r3, [r7, #24]
 800b978:	4b36      	ldr	r3, [pc, #216]	@ (800ba54 <HAL_ETH_MspInit+0x13c>)
 800b97a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b97c:	4a35      	ldr	r2, [pc, #212]	@ (800ba54 <HAL_ETH_MspInit+0x13c>)
 800b97e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b982:	6313      	str	r3, [r2, #48]	@ 0x30
 800b984:	4b33      	ldr	r3, [pc, #204]	@ (800ba54 <HAL_ETH_MspInit+0x13c>)
 800b986:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b988:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b98c:	61bb      	str	r3, [r7, #24]
 800b98e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b990:	2300      	movs	r3, #0
 800b992:	617b      	str	r3, [r7, #20]
 800b994:	4b2f      	ldr	r3, [pc, #188]	@ (800ba54 <HAL_ETH_MspInit+0x13c>)
 800b996:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b998:	4a2e      	ldr	r2, [pc, #184]	@ (800ba54 <HAL_ETH_MspInit+0x13c>)
 800b99a:	f043 0304 	orr.w	r3, r3, #4
 800b99e:	6313      	str	r3, [r2, #48]	@ 0x30
 800b9a0:	4b2c      	ldr	r3, [pc, #176]	@ (800ba54 <HAL_ETH_MspInit+0x13c>)
 800b9a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b9a4:	f003 0304 	and.w	r3, r3, #4
 800b9a8:	617b      	str	r3, [r7, #20]
 800b9aa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	613b      	str	r3, [r7, #16]
 800b9b0:	4b28      	ldr	r3, [pc, #160]	@ (800ba54 <HAL_ETH_MspInit+0x13c>)
 800b9b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b9b4:	4a27      	ldr	r2, [pc, #156]	@ (800ba54 <HAL_ETH_MspInit+0x13c>)
 800b9b6:	f043 0301 	orr.w	r3, r3, #1
 800b9ba:	6313      	str	r3, [r2, #48]	@ 0x30
 800b9bc:	4b25      	ldr	r3, [pc, #148]	@ (800ba54 <HAL_ETH_MspInit+0x13c>)
 800b9be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b9c0:	f003 0301 	and.w	r3, r3, #1
 800b9c4:	613b      	str	r3, [r7, #16]
 800b9c6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	60fb      	str	r3, [r7, #12]
 800b9cc:	4b21      	ldr	r3, [pc, #132]	@ (800ba54 <HAL_ETH_MspInit+0x13c>)
 800b9ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b9d0:	4a20      	ldr	r2, [pc, #128]	@ (800ba54 <HAL_ETH_MspInit+0x13c>)
 800b9d2:	f043 0302 	orr.w	r3, r3, #2
 800b9d6:	6313      	str	r3, [r2, #48]	@ 0x30
 800b9d8:	4b1e      	ldr	r3, [pc, #120]	@ (800ba54 <HAL_ETH_MspInit+0x13c>)
 800b9da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b9dc:	f003 0302 	and.w	r3, r3, #2
 800b9e0:	60fb      	str	r3, [r7, #12]
 800b9e2:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800b9e4:	2332      	movs	r3, #50	@ 0x32
 800b9e6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b9e8:	2302      	movs	r3, #2
 800b9ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b9f0:	2303      	movs	r3, #3
 800b9f2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b9f4:	230b      	movs	r3, #11
 800b9f6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b9f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b9fc:	4619      	mov	r1, r3
 800b9fe:	4816      	ldr	r0, [pc, #88]	@ (800ba58 <HAL_ETH_MspInit+0x140>)
 800ba00:	f7fc fe04 	bl	800860c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800ba04:	2386      	movs	r3, #134	@ 0x86
 800ba06:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ba08:	2302      	movs	r3, #2
 800ba0a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ba10:	2303      	movs	r3, #3
 800ba12:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800ba14:	230b      	movs	r3, #11
 800ba16:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ba18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ba1c:	4619      	mov	r1, r3
 800ba1e:	480f      	ldr	r0, [pc, #60]	@ (800ba5c <HAL_ETH_MspInit+0x144>)
 800ba20:	f7fc fdf4 	bl	800860c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 800ba24:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 800ba28:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ba2a:	2302      	movs	r3, #2
 800ba2c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ba2e:	2300      	movs	r3, #0
 800ba30:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ba32:	2303      	movs	r3, #3
 800ba34:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800ba36:	230b      	movs	r3, #11
 800ba38:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ba3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ba3e:	4619      	mov	r1, r3
 800ba40:	4807      	ldr	r0, [pc, #28]	@ (800ba60 <HAL_ETH_MspInit+0x148>)
 800ba42:	f7fc fde3 	bl	800860c <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800ba46:	bf00      	nop
 800ba48:	3738      	adds	r7, #56	@ 0x38
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	bd80      	pop	{r7, pc}
 800ba4e:	bf00      	nop
 800ba50:	40028000 	.word	0x40028000
 800ba54:	40023800 	.word	0x40023800
 800ba58:	40020800 	.word	0x40020800
 800ba5c:	40020000 	.word	0x40020000
 800ba60:	40020400 	.word	0x40020400

0800ba64 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800ba64:	b580      	push	{r7, lr}
 800ba66:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800ba68:	4802      	ldr	r0, [pc, #8]	@ (800ba74 <ETH_PHY_IO_Init+0x10>)
 800ba6a:	f7fc f96b 	bl	8007d44 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800ba6e:	2300      	movs	r3, #0
}
 800ba70:	4618      	mov	r0, r3
 800ba72:	bd80      	pop	{r7, pc}
 800ba74:	200118e8 	.word	0x200118e8

0800ba78 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800ba78:	b480      	push	{r7}
 800ba7a:	af00      	add	r7, sp, #0
  return 0;
 800ba7c:	2300      	movs	r3, #0
}
 800ba7e:	4618      	mov	r0, r3
 800ba80:	46bd      	mov	sp, r7
 800ba82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba86:	4770      	bx	lr

0800ba88 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800ba88:	b580      	push	{r7, lr}
 800ba8a:	b084      	sub	sp, #16
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	60f8      	str	r0, [r7, #12]
 800ba90:	60b9      	str	r1, [r7, #8]
 800ba92:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	68ba      	ldr	r2, [r7, #8]
 800ba98:	68f9      	ldr	r1, [r7, #12]
 800ba9a:	4807      	ldr	r0, [pc, #28]	@ (800bab8 <ETH_PHY_IO_ReadReg+0x30>)
 800ba9c:	f7fb ffad 	bl	80079fa <HAL_ETH_ReadPHYRegister>
 800baa0:	4603      	mov	r3, r0
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d002      	beq.n	800baac <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800baa6:	f04f 33ff 	mov.w	r3, #4294967295
 800baaa:	e000      	b.n	800baae <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800baac:	2300      	movs	r3, #0
}
 800baae:	4618      	mov	r0, r3
 800bab0:	3710      	adds	r7, #16
 800bab2:	46bd      	mov	sp, r7
 800bab4:	bd80      	pop	{r7, pc}
 800bab6:	bf00      	nop
 800bab8:	200118e8 	.word	0x200118e8

0800babc <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800babc:	b580      	push	{r7, lr}
 800babe:	b084      	sub	sp, #16
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	60f8      	str	r0, [r7, #12]
 800bac4:	60b9      	str	r1, [r7, #8]
 800bac6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	68ba      	ldr	r2, [r7, #8]
 800bacc:	68f9      	ldr	r1, [r7, #12]
 800bace:	4807      	ldr	r0, [pc, #28]	@ (800baec <ETH_PHY_IO_WriteReg+0x30>)
 800bad0:	f7fb ffde 	bl	8007a90 <HAL_ETH_WritePHYRegister>
 800bad4:	4603      	mov	r3, r0
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d002      	beq.n	800bae0 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800bada:	f04f 33ff 	mov.w	r3, #4294967295
 800bade:	e000      	b.n	800bae2 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800bae0:	2300      	movs	r3, #0
}
 800bae2:	4618      	mov	r0, r3
 800bae4:	3710      	adds	r7, #16
 800bae6:	46bd      	mov	sp, r7
 800bae8:	bd80      	pop	{r7, pc}
 800baea:	bf00      	nop
 800baec:	200118e8 	.word	0x200118e8

0800baf0 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800baf4:	f7fa ff3c 	bl	8006970 <HAL_GetTick>
 800baf8:	4603      	mov	r3, r0
}
 800bafa:	4618      	mov	r0, r3
 800bafc:	bd80      	pop	{r7, pc}
	...

0800bb00 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 800bb00:	b580      	push	{r7, lr}
 800bb02:	b0a0      	sub	sp, #128	@ 0x80
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800bb08:	f107 030c 	add.w	r3, r7, #12
 800bb0c:	2264      	movs	r2, #100	@ 0x64
 800bb0e:	2100      	movs	r1, #0
 800bb10:	4618      	mov	r0, r3
 800bb12:	f00b fe04 	bl	801771e <memset>
  int32_t PHYLinkState = 0;
 800bb16:	2300      	movs	r3, #0
 800bb18:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800bb1e:	2300      	movs	r3, #0
 800bb20:	67bb      	str	r3, [r7, #120]	@ 0x78
 800bb22:	2300      	movs	r3, #0
 800bb24:	677b      	str	r3, [r7, #116]	@ 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800bb26:	483a      	ldr	r0, [pc, #232]	@ (800bc10 <ethernet_link_check_state+0x110>)
 800bb28:	f7fa fe34 	bl	8006794 <LAN8742_GetLinkState>
 800bb2c:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800bb34:	089b      	lsrs	r3, r3, #2
 800bb36:	f003 0301 	and.w	r3, r3, #1
 800bb3a:	b2db      	uxtb	r3, r3
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d00c      	beq.n	800bb5a <ethernet_link_check_state+0x5a>
 800bb40:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bb42:	2b01      	cmp	r3, #1
 800bb44:	dc09      	bgt.n	800bb5a <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 800bb46:	4833      	ldr	r0, [pc, #204]	@ (800bc14 <ethernet_link_check_state+0x114>)
 800bb48:	f7fb fd27 	bl	800759a <HAL_ETH_Stop>
    netif_set_down(netif);
 800bb4c:	6878      	ldr	r0, [r7, #4]
 800bb4e:	f001 fae5 	bl	800d11c <netif_set_down>
    netif_set_link_down(netif);
 800bb52:	6878      	ldr	r0, [r7, #4]
 800bb54:	f001 fb48 	bl	800d1e8 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 800bb58:	e055      	b.n	800bc06 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800bb60:	f003 0304 	and.w	r3, r3, #4
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d14e      	bne.n	800bc06 <ethernet_link_check_state+0x106>
 800bb68:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bb6a:	2b01      	cmp	r3, #1
 800bb6c:	dd4b      	ble.n	800bc06 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 800bb6e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bb70:	3b02      	subs	r3, #2
 800bb72:	2b03      	cmp	r3, #3
 800bb74:	d82a      	bhi.n	800bbcc <ethernet_link_check_state+0xcc>
 800bb76:	a201      	add	r2, pc, #4	@ (adr r2, 800bb7c <ethernet_link_check_state+0x7c>)
 800bb78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb7c:	0800bb8d 	.word	0x0800bb8d
 800bb80:	0800bb9f 	.word	0x0800bb9f
 800bb84:	0800bbaf 	.word	0x0800bbaf
 800bb88:	0800bbbf 	.word	0x0800bbbf
      duplex = ETH_FULLDUPLEX_MODE;
 800bb8c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800bb90:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800bb92:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800bb96:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800bb98:	2301      	movs	r3, #1
 800bb9a:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800bb9c:	e017      	b.n	800bbce <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800bb9e:	2300      	movs	r3, #0
 800bba0:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800bba2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800bba6:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800bba8:	2301      	movs	r3, #1
 800bbaa:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800bbac:	e00f      	b.n	800bbce <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 800bbae:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800bbb2:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800bbb8:	2301      	movs	r3, #1
 800bbba:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800bbbc:	e007      	b.n	800bbce <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800bbc6:	2301      	movs	r3, #1
 800bbc8:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800bbca:	e000      	b.n	800bbce <ethernet_link_check_state+0xce>
      break;
 800bbcc:	bf00      	nop
    if(linkchanged)
 800bbce:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d018      	beq.n	800bc06 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800bbd4:	f107 030c 	add.w	r3, r7, #12
 800bbd8:	4619      	mov	r1, r3
 800bbda:	480e      	ldr	r0, [pc, #56]	@ (800bc14 <ethernet_link_check_state+0x114>)
 800bbdc:	f7fb ffa1 	bl	8007b22 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800bbe0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bbe2:	627b      	str	r3, [r7, #36]	@ 0x24
      MACConf.Speed = speed;
 800bbe4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bbe6:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800bbe8:	f107 030c 	add.w	r3, r7, #12
 800bbec:	4619      	mov	r1, r3
 800bbee:	4809      	ldr	r0, [pc, #36]	@ (800bc14 <ethernet_link_check_state+0x114>)
 800bbf0:	f7fc f88e 	bl	8007d10 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 800bbf4:	4807      	ldr	r0, [pc, #28]	@ (800bc14 <ethernet_link_check_state+0x114>)
 800bbf6:	f7fb fc71 	bl	80074dc <HAL_ETH_Start>
      netif_set_up(netif);
 800bbfa:	6878      	ldr	r0, [r7, #4]
 800bbfc:	f001 fa22 	bl	800d044 <netif_set_up>
      netif_set_link_up(netif);
 800bc00:	6878      	ldr	r0, [r7, #4]
 800bc02:	f001 fabd 	bl	800d180 <netif_set_link_up>
}
 800bc06:	bf00      	nop
 800bc08:	3780      	adds	r7, #128	@ 0x80
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	bd80      	pop	{r7, pc}
 800bc0e:	bf00      	nop
 800bc10:	200119d0 	.word	0x200119d0
 800bc14:	200118e8 	.word	0x200118e8

0800bc18 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800bc18:	b580      	push	{r7, lr}
 800bc1a:	b086      	sub	sp, #24
 800bc1c:	af02      	add	r7, sp, #8
 800bc1e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800bc20:	4812      	ldr	r0, [pc, #72]	@ (800bc6c <HAL_ETH_RxAllocateCallback+0x54>)
 800bc22:	f000 ff89 	bl	800cb38 <memp_malloc_pool>
 800bc26:	60f8      	str	r0, [r7, #12]
  if (p)
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d014      	beq.n	800bc58 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	f103 0220 	add.w	r2, r3, #32
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	4a0d      	ldr	r2, [pc, #52]	@ (800bc70 <HAL_ETH_RxAllocateCallback+0x58>)
 800bc3c:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800bc46:	9201      	str	r2, [sp, #4]
 800bc48:	9300      	str	r3, [sp, #0]
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	2241      	movs	r2, #65	@ 0x41
 800bc4e:	2100      	movs	r1, #0
 800bc50:	2000      	movs	r0, #0
 800bc52:	f001 fcbf 	bl	800d5d4 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800bc56:	e005      	b.n	800bc64 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800bc58:	4b06      	ldr	r3, [pc, #24]	@ (800bc74 <HAL_ETH_RxAllocateCallback+0x5c>)
 800bc5a:	2201      	movs	r2, #1
 800bc5c:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	2200      	movs	r2, #0
 800bc62:	601a      	str	r2, [r3, #0]
}
 800bc64:	bf00      	nop
 800bc66:	3710      	adds	r7, #16
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	bd80      	pop	{r7, pc}
 800bc6c:	08022d00 	.word	0x08022d00
 800bc70:	0800b8d5 	.word	0x0800b8d5
 800bc74:	200117a4 	.word	0x200117a4

0800bc78 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800bc78:	b480      	push	{r7}
 800bc7a:	b089      	sub	sp, #36	@ 0x24
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	60f8      	str	r0, [r7, #12]
 800bc80:	60b9      	str	r1, [r7, #8]
 800bc82:	607a      	str	r2, [r7, #4]
 800bc84:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800bc8a:	68bb      	ldr	r3, [r7, #8]
 800bc8c:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800bc8e:	2300      	movs	r3, #0
 800bc90:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	3b20      	subs	r3, #32
 800bc96:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800bc98:	69fb      	ldr	r3, [r7, #28]
 800bc9a:	2200      	movs	r2, #0
 800bc9c:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800bc9e:	69fb      	ldr	r3, [r7, #28]
 800bca0:	2200      	movs	r2, #0
 800bca2:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800bca4:	69fb      	ldr	r3, [r7, #28]
 800bca6:	887a      	ldrh	r2, [r7, #2]
 800bca8:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800bcaa:	69bb      	ldr	r3, [r7, #24]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d103      	bne.n	800bcba <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800bcb2:	69bb      	ldr	r3, [r7, #24]
 800bcb4:	69fa      	ldr	r2, [r7, #28]
 800bcb6:	601a      	str	r2, [r3, #0]
 800bcb8:	e003      	b.n	800bcc2 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800bcba:	697b      	ldr	r3, [r7, #20]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	69fa      	ldr	r2, [r7, #28]
 800bcc0:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800bcc2:	697b      	ldr	r3, [r7, #20]
 800bcc4:	69fa      	ldr	r2, [r7, #28]
 800bcc6:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800bcc8:	69bb      	ldr	r3, [r7, #24]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	61fb      	str	r3, [r7, #28]
 800bcce:	e009      	b.n	800bce4 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800bcd0:	69fb      	ldr	r3, [r7, #28]
 800bcd2:	891a      	ldrh	r2, [r3, #8]
 800bcd4:	887b      	ldrh	r3, [r7, #2]
 800bcd6:	4413      	add	r3, r2
 800bcd8:	b29a      	uxth	r2, r3
 800bcda:	69fb      	ldr	r3, [r7, #28]
 800bcdc:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800bcde:	69fb      	ldr	r3, [r7, #28]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	61fb      	str	r3, [r7, #28]
 800bce4:	69fb      	ldr	r3, [r7, #28]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d1f2      	bne.n	800bcd0 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 800bcea:	bf00      	nop
 800bcec:	bf00      	nop
 800bcee:	3724      	adds	r7, #36	@ 0x24
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf6:	4770      	bx	lr

0800bcf8 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800bcf8:	b480      	push	{r7}
 800bcfa:	b083      	sub	sp, #12
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	4603      	mov	r3, r0
 800bd00:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800bd02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bd06:	021b      	lsls	r3, r3, #8
 800bd08:	b21a      	sxth	r2, r3
 800bd0a:	88fb      	ldrh	r3, [r7, #6]
 800bd0c:	0a1b      	lsrs	r3, r3, #8
 800bd0e:	b29b      	uxth	r3, r3
 800bd10:	b21b      	sxth	r3, r3
 800bd12:	4313      	orrs	r3, r2
 800bd14:	b21b      	sxth	r3, r3
 800bd16:	b29b      	uxth	r3, r3
}
 800bd18:	4618      	mov	r0, r3
 800bd1a:	370c      	adds	r7, #12
 800bd1c:	46bd      	mov	sp, r7
 800bd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd22:	4770      	bx	lr

0800bd24 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800bd24:	b480      	push	{r7}
 800bd26:	b083      	sub	sp, #12
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	061a      	lsls	r2, r3, #24
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	021b      	lsls	r3, r3, #8
 800bd34:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800bd38:	431a      	orrs	r2, r3
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	0a1b      	lsrs	r3, r3, #8
 800bd3e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800bd42:	431a      	orrs	r2, r3
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	0e1b      	lsrs	r3, r3, #24
 800bd48:	4313      	orrs	r3, r2
}
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	370c      	adds	r7, #12
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd54:	4770      	bx	lr

0800bd56 <dns_init>:
 * Initialize the resolver: set up the UDP pcb and configure the default server
 * (if DNS_SERVER_ADDRESS is set).
 */
void
dns_init(void)
{
 800bd56:	b480      	push	{r7}
 800bd58:	af00      	add	r7, sp, #0
#endif

#if DNS_LOCAL_HOSTLIST
  dns_init_local();
#endif
}
 800bd5a:	bf00      	nop
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd62:	4770      	bx	lr

0800bd64 <dns_tmr>:
 * The DNS resolver client timer - handle retries and timeouts and should
 * be called every DNS_TMR_INTERVAL milliseconds (every second by default).
 */
void
dns_tmr(void)
{
 800bd64:	b580      	push	{r7, lr}
 800bd66:	af00      	add	r7, sp, #0
  LWIP_DEBUGF(DNS_DEBUG, ("dns_tmr: dns_check_entries\n"));
  dns_check_entries();
 800bd68:	f000 faa8 	bl	800c2bc <dns_check_entries>
}
 800bd6c:	bf00      	nop
 800bd6e:	bd80      	pop	{r7, pc}

0800bd70 <dns_send>:
 * @param idx the DNS table entry index for which to send a request
 * @return ERR_OK if packet is sent; an err_t indicating the problem otherwise
 */
static err_t
dns_send(u8_t idx)
{
 800bd70:	b580      	push	{r7, lr}
 800bd72:	b090      	sub	sp, #64	@ 0x40
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	4603      	mov	r3, r0
 800bd78:	71fb      	strb	r3, [r7, #7]
  struct pbuf *p;
  u16_t query_idx, copy_len;
  const char *hostname, *hostname_part;
  u8_t n;
  u8_t pcb_idx;
  struct dns_table_entry *entry = &dns_table[idx];
 800bd7a:	79fa      	ldrb	r2, [r7, #7]
 800bd7c:	4613      	mov	r3, r2
 800bd7e:	011b      	lsls	r3, r3, #4
 800bd80:	4413      	add	r3, r2
 800bd82:	011b      	lsls	r3, r3, #4
 800bd84:	4a6c      	ldr	r2, [pc, #432]	@ (800bf38 <dns_send+0x1c8>)
 800bd86:	4413      	add	r3, r2
 800bd88:	633b      	str	r3, [r7, #48]	@ 0x30

  LWIP_DEBUGF(DNS_DEBUG, ("dns_send: dns_servers[%"U16_F"] \"%s\": request\n",
                          (u16_t)(entry->server_idx), entry->name));
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 800bd8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd8c:	7adb      	ldrb	r3, [r3, #11]
 800bd8e:	2b01      	cmp	r3, #1
 800bd90:	d906      	bls.n	800bda0 <dns_send+0x30>
 800bd92:	4b6a      	ldr	r3, [pc, #424]	@ (800bf3c <dns_send+0x1cc>)
 800bd94:	f240 22fa 	movw	r2, #762	@ 0x2fa
 800bd98:	4969      	ldr	r1, [pc, #420]	@ (800bf40 <dns_send+0x1d0>)
 800bd9a:	486a      	ldr	r0, [pc, #424]	@ (800bf44 <dns_send+0x1d4>)
 800bd9c:	f00b fc1e 	bl	80175dc <iprintf>
  if (ip_addr_isany_val(dns_servers[entry->server_idx])
 800bda0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bda2:	7adb      	ldrb	r3, [r3, #11]
 800bda4:	461a      	mov	r2, r3
 800bda6:	4b68      	ldr	r3, [pc, #416]	@ (800bf48 <dns_send+0x1d8>)
 800bda8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d109      	bne.n	800bdc4 <dns_send+0x54>
      && !entry->is_mdns
#endif
     ) {
    /* DNS server not valid anymore, e.g. PPP netif has been shut down */
    /* call specified callback function if provided */
    dns_call_found(idx, NULL);
 800bdb0:	79fb      	ldrb	r3, [r7, #7]
 800bdb2:	2100      	movs	r1, #0
 800bdb4:	4618      	mov	r0, r3
 800bdb6:	f000 f8cb 	bl	800bf50 <dns_call_found>
    /* flush this entry */
    entry->state = DNS_STATE_UNUSED;
 800bdba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdbc:	2200      	movs	r2, #0
 800bdbe:	729a      	strb	r2, [r3, #10]
    return ERR_OK;
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	e0b4      	b.n	800bf2e <dns_send+0x1be>
  }

  /* if here, we have either a new query or a retry on a previous query to process */
  p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(SIZEOF_DNS_HDR + strlen(entry->name) + 2 +
 800bdc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdc6:	3310      	adds	r3, #16
 800bdc8:	4618      	mov	r0, r3
 800bdca:	f7f4 fa0b 	bl	80001e4 <strlen>
 800bdce:	4603      	mov	r3, r0
 800bdd0:	b29b      	uxth	r3, r3
 800bdd2:	3312      	adds	r3, #18
 800bdd4:	b29b      	uxth	r3, r3
 800bdd6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800bdda:	4619      	mov	r1, r3
 800bddc:	2036      	movs	r0, #54	@ 0x36
 800bdde:	f001 facf 	bl	800d380 <pbuf_alloc>
 800bde2:	62f8      	str	r0, [r7, #44]	@ 0x2c
                                         SIZEOF_DNS_QUERY), PBUF_RAM);
  if (p != NULL) {
 800bde4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	f000 8095 	beq.w	800bf16 <dns_send+0x1a6>
    const ip_addr_t *dst;
    u16_t dst_port;
    /* fill dns header */
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 800bdec:	f107 0310 	add.w	r3, r7, #16
 800bdf0:	220c      	movs	r2, #12
 800bdf2:	2100      	movs	r1, #0
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	f00b fc92 	bl	801771e <memset>
    hdr.id = lwip_htons(entry->txid);
 800bdfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdfc:	891b      	ldrh	r3, [r3, #8]
 800bdfe:	4618      	mov	r0, r3
 800be00:	f7ff ff7a 	bl	800bcf8 <lwip_htons>
 800be04:	4603      	mov	r3, r0
 800be06:	823b      	strh	r3, [r7, #16]
    hdr.flags1 = DNS_FLAG1_RD;
 800be08:	2301      	movs	r3, #1
 800be0a:	74bb      	strb	r3, [r7, #18]
    hdr.numquestions = PP_HTONS(1);
 800be0c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800be10:	82bb      	strh	r3, [r7, #20]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 800be12:	f107 0310 	add.w	r3, r7, #16
 800be16:	220c      	movs	r2, #12
 800be18:	4619      	mov	r1, r3
 800be1a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800be1c:	f002 f83c 	bl	800de98 <pbuf_take>
    hostname = entry->name;
 800be20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be22:	3310      	adds	r3, #16
 800be24:	63bb      	str	r3, [r7, #56]	@ 0x38
    --hostname;
 800be26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be28:	3b01      	subs	r3, #1
 800be2a:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* convert hostname into suitable query format. */
    query_idx = SIZEOF_DNS_HDR;
 800be2c:	230c      	movs	r3, #12
 800be2e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    do {
      ++hostname;
 800be30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be32:	3301      	adds	r3, #1
 800be34:	63bb      	str	r3, [r7, #56]	@ 0x38
      hostname_part = hostname;
 800be36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be38:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 800be3a:	2300      	movs	r3, #0
 800be3c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800be40:	e007      	b.n	800be52 <dns_send+0xe2>
        ++n;
 800be42:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800be46:	3301      	adds	r3, #1
 800be48:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 800be4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be4e:	3301      	adds	r3, #1
 800be50:	63bb      	str	r3, [r7, #56]	@ 0x38
 800be52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be54:	781b      	ldrb	r3, [r3, #0]
 800be56:	2b2e      	cmp	r3, #46	@ 0x2e
 800be58:	d003      	beq.n	800be62 <dns_send+0xf2>
 800be5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be5c:	781b      	ldrb	r3, [r3, #0]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d1ef      	bne.n	800be42 <dns_send+0xd2>
      }
      copy_len = (u16_t)(hostname - hostname_part);
 800be62:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800be64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be66:	1ad3      	subs	r3, r2, r3
 800be68:	84fb      	strh	r3, [r7, #38]	@ 0x26
      if (query_idx + n + 1 > 0xFFFF) {
 800be6a:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 800be6c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800be70:	4413      	add	r3, r2
 800be72:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800be76:	4293      	cmp	r3, r2
 800be78:	dc53      	bgt.n	800bf22 <dns_send+0x1b2>
        /* u16_t overflow */
        goto overflow_return;
      }
      pbuf_put_at(p, query_idx, n);
 800be7a:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800be7e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800be80:	4619      	mov	r1, r3
 800be82:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800be84:	f002 f936 	bl	800e0f4 <pbuf_put_at>
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 800be88:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800be8a:	3301      	adds	r3, #1
 800be8c:	b29b      	uxth	r3, r3
 800be8e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800be90:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800be92:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800be94:	f002 f892 	bl	800dfbc <pbuf_take_at>
      query_idx = (u16_t)(query_idx + n + 1);
 800be98:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800be9c:	b29a      	uxth	r2, r3
 800be9e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800bea0:	4413      	add	r3, r2
 800bea2:	b29b      	uxth	r3, r3
 800bea4:	3301      	adds	r3, #1
 800bea6:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    } while (*hostname != 0);
 800bea8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800beaa:	781b      	ldrb	r3, [r3, #0]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d1bf      	bne.n	800be30 <dns_send+0xc0>
    pbuf_put_at(p, query_idx, 0);
 800beb0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800beb2:	2200      	movs	r2, #0
 800beb4:	4619      	mov	r1, r3
 800beb6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800beb8:	f002 f91c 	bl	800e0f4 <pbuf_put_at>
    query_idx++;
 800bebc:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800bebe:	3301      	adds	r3, #1
 800bec0:	87bb      	strh	r3, [r7, #60]	@ 0x3c

    /* fill dns query */
    if (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype)) {
      qry.type = PP_HTONS(DNS_RRTYPE_AAAA);
    } else {
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 800bec2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bec6:	81bb      	strh	r3, [r7, #12]
    }
    qry.cls = PP_HTONS(DNS_RRCLASS_IN);
 800bec8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800becc:	81fb      	strh	r3, [r7, #14]
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 800bece:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800bed0:	f107 010c 	add.w	r1, r7, #12
 800bed4:	2204      	movs	r2, #4
 800bed6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bed8:	f002 f870 	bl	800dfbc <pbuf_take_at>

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
    pcb_idx = entry->pcb_idx;
 800bedc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bede:	7bdb      	ldrb	r3, [r3, #15]
 800bee0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
      }
#endif
    } else
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
    {
      dst_port = DNS_SERVER_PORT;
 800bee4:	2335      	movs	r3, #53	@ 0x35
 800bee6:	847b      	strh	r3, [r7, #34]	@ 0x22
      dst = &dns_servers[entry->server_idx];
 800bee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800beea:	7adb      	ldrb	r3, [r3, #11]
 800beec:	009b      	lsls	r3, r3, #2
 800beee:	4a16      	ldr	r2, [pc, #88]	@ (800bf48 <dns_send+0x1d8>)
 800bef0:	4413      	add	r3, r2
 800bef2:	61fb      	str	r3, [r7, #28]
    }
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 800bef4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800bef8:	4a14      	ldr	r2, [pc, #80]	@ (800bf4c <dns_send+0x1dc>)
 800befa:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800befe:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800bf00:	69fa      	ldr	r2, [r7, #28]
 800bf02:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bf04:	f007 fdb0 	bl	8013a68 <udp_sendto>
 800bf08:	4603      	mov	r3, r0
 800bf0a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

    /* free pbuf */
    pbuf_free(p);
 800bf0e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bf10:	f001 fd1a 	bl	800d948 <pbuf_free>
 800bf14:	e002      	b.n	800bf1c <dns_send+0x1ac>
  } else {
    err = ERR_MEM;
 800bf16:	23ff      	movs	r3, #255	@ 0xff
 800bf18:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  }

  return err;
 800bf1c:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800bf20:	e005      	b.n	800bf2e <dns_send+0x1be>
        goto overflow_return;
 800bf22:	bf00      	nop
overflow_return:
  pbuf_free(p);
 800bf24:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bf26:	f001 fd0f 	bl	800d948 <pbuf_free>
  return ERR_VAL;
 800bf2a:	f06f 0305 	mvn.w	r3, #5
}
 800bf2e:	4618      	mov	r0, r3
 800bf30:	3740      	adds	r7, #64	@ 0x40
 800bf32:	46bd      	mov	sp, r7
 800bf34:	bd80      	pop	{r7, pc}
 800bf36:	bf00      	nop
 800bf38:	20011a00 	.word	0x20011a00
 800bf3c:	080202b0 	.word	0x080202b0
 800bf40:	080202e0 	.word	0x080202e0
 800bf44:	080202f8 	.word	0x080202f8
 800bf48:	20011e70 	.word	0x20011e70
 800bf4c:	200119f0 	.word	0x200119f0

0800bf50 <dns_call_found>:
 * @param idx dns table index of the entry that is resolved or removed
 * @param addr IP address for the hostname (or NULL on error or memory shortage)
 */
static void
dns_call_found(u8_t idx, ip_addr_t *addr)
{
 800bf50:	b590      	push	{r4, r7, lr}
 800bf52:	b085      	sub	sp, #20
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	4603      	mov	r3, r0
 800bf58:	6039      	str	r1, [r7, #0]
 800bf5a:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800bf5c:	2300      	movs	r3, #0
 800bf5e:	73fb      	strb	r3, [r7, #15]
 800bf60:	e03d      	b.n	800bfde <dns_call_found+0x8e>
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
 800bf62:	7bfa      	ldrb	r2, [r7, #15]
 800bf64:	4957      	ldr	r1, [pc, #348]	@ (800c0c4 <dns_call_found+0x174>)
 800bf66:	4613      	mov	r3, r2
 800bf68:	005b      	lsls	r3, r3, #1
 800bf6a:	4413      	add	r3, r2
 800bf6c:	009b      	lsls	r3, r3, #2
 800bf6e:	440b      	add	r3, r1
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d030      	beq.n	800bfd8 <dns_call_found+0x88>
 800bf76:	7bfa      	ldrb	r2, [r7, #15]
 800bf78:	4952      	ldr	r1, [pc, #328]	@ (800c0c4 <dns_call_found+0x174>)
 800bf7a:	4613      	mov	r3, r2
 800bf7c:	005b      	lsls	r3, r3, #1
 800bf7e:	4413      	add	r3, r2
 800bf80:	009b      	lsls	r3, r3, #2
 800bf82:	440b      	add	r3, r1
 800bf84:	3308      	adds	r3, #8
 800bf86:	781b      	ldrb	r3, [r3, #0]
 800bf88:	79fa      	ldrb	r2, [r7, #7]
 800bf8a:	429a      	cmp	r2, r3
 800bf8c:	d124      	bne.n	800bfd8 <dns_call_found+0x88>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 800bf8e:	7bfa      	ldrb	r2, [r7, #15]
 800bf90:	494c      	ldr	r1, [pc, #304]	@ (800c0c4 <dns_call_found+0x174>)
 800bf92:	4613      	mov	r3, r2
 800bf94:	005b      	lsls	r3, r3, #1
 800bf96:	4413      	add	r3, r2
 800bf98:	009b      	lsls	r3, r3, #2
 800bf9a:	440b      	add	r3, r1
 800bf9c:	681c      	ldr	r4, [r3, #0]
 800bf9e:	79fa      	ldrb	r2, [r7, #7]
 800bfa0:	4613      	mov	r3, r2
 800bfa2:	011b      	lsls	r3, r3, #4
 800bfa4:	4413      	add	r3, r2
 800bfa6:	011b      	lsls	r3, r3, #4
 800bfa8:	3310      	adds	r3, #16
 800bfaa:	4a47      	ldr	r2, [pc, #284]	@ (800c0c8 <dns_call_found+0x178>)
 800bfac:	1898      	adds	r0, r3, r2
 800bfae:	7bfa      	ldrb	r2, [r7, #15]
 800bfb0:	4944      	ldr	r1, [pc, #272]	@ (800c0c4 <dns_call_found+0x174>)
 800bfb2:	4613      	mov	r3, r2
 800bfb4:	005b      	lsls	r3, r3, #1
 800bfb6:	4413      	add	r3, r2
 800bfb8:	009b      	lsls	r3, r3, #2
 800bfba:	440b      	add	r3, r1
 800bfbc:	3304      	adds	r3, #4
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	461a      	mov	r2, r3
 800bfc2:	6839      	ldr	r1, [r7, #0]
 800bfc4:	47a0      	blx	r4
      /* flush this entry */
      dns_requests[i].found = NULL;
 800bfc6:	7bfa      	ldrb	r2, [r7, #15]
 800bfc8:	493e      	ldr	r1, [pc, #248]	@ (800c0c4 <dns_call_found+0x174>)
 800bfca:	4613      	mov	r3, r2
 800bfcc:	005b      	lsls	r3, r3, #1
 800bfce:	4413      	add	r3, r2
 800bfd0:	009b      	lsls	r3, r3, #2
 800bfd2:	440b      	add	r3, r1
 800bfd4:	2200      	movs	r2, #0
 800bfd6:	601a      	str	r2, [r3, #0]
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800bfd8:	7bfb      	ldrb	r3, [r7, #15]
 800bfda:	3301      	adds	r3, #1
 800bfdc:	73fb      	strb	r3, [r7, #15]
 800bfde:	7bfb      	ldrb	r3, [r7, #15]
 800bfe0:	2b03      	cmp	r3, #3
 800bfe2:	d9be      	bls.n	800bf62 <dns_call_found+0x12>
  }
  dns_requests[idx].found = NULL;
#endif
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
  /* close the pcb used unless other request are using it */
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800bfe4:	2300      	movs	r3, #0
 800bfe6:	73fb      	strb	r3, [r7, #15]
 800bfe8:	e031      	b.n	800c04e <dns_call_found+0xfe>
    if (i == idx) {
 800bfea:	7bfa      	ldrb	r2, [r7, #15]
 800bfec:	79fb      	ldrb	r3, [r7, #7]
 800bfee:	429a      	cmp	r2, r3
 800bff0:	d029      	beq.n	800c046 <dns_call_found+0xf6>
      continue; /* only check other requests */
    }
    if (dns_table[i].state == DNS_STATE_ASKING) {
 800bff2:	7bfa      	ldrb	r2, [r7, #15]
 800bff4:	4934      	ldr	r1, [pc, #208]	@ (800c0c8 <dns_call_found+0x178>)
 800bff6:	4613      	mov	r3, r2
 800bff8:	011b      	lsls	r3, r3, #4
 800bffa:	4413      	add	r3, r2
 800bffc:	011b      	lsls	r3, r3, #4
 800bffe:	440b      	add	r3, r1
 800c000:	330a      	adds	r3, #10
 800c002:	781b      	ldrb	r3, [r3, #0]
 800c004:	2b02      	cmp	r3, #2
 800c006:	d11f      	bne.n	800c048 <dns_call_found+0xf8>
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 800c008:	7bfa      	ldrb	r2, [r7, #15]
 800c00a:	492f      	ldr	r1, [pc, #188]	@ (800c0c8 <dns_call_found+0x178>)
 800c00c:	4613      	mov	r3, r2
 800c00e:	011b      	lsls	r3, r3, #4
 800c010:	4413      	add	r3, r2
 800c012:	011b      	lsls	r3, r3, #4
 800c014:	440b      	add	r3, r1
 800c016:	330f      	adds	r3, #15
 800c018:	7819      	ldrb	r1, [r3, #0]
 800c01a:	79fa      	ldrb	r2, [r7, #7]
 800c01c:	482a      	ldr	r0, [pc, #168]	@ (800c0c8 <dns_call_found+0x178>)
 800c01e:	4613      	mov	r3, r2
 800c020:	011b      	lsls	r3, r3, #4
 800c022:	4413      	add	r3, r2
 800c024:	011b      	lsls	r3, r3, #4
 800c026:	4403      	add	r3, r0
 800c028:	330f      	adds	r3, #15
 800c02a:	781b      	ldrb	r3, [r3, #0]
 800c02c:	4299      	cmp	r1, r3
 800c02e:	d10b      	bne.n	800c048 <dns_call_found+0xf8>
        /* another request is still using the same pcb */
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 800c030:	79fa      	ldrb	r2, [r7, #7]
 800c032:	4925      	ldr	r1, [pc, #148]	@ (800c0c8 <dns_call_found+0x178>)
 800c034:	4613      	mov	r3, r2
 800c036:	011b      	lsls	r3, r3, #4
 800c038:	4413      	add	r3, r2
 800c03a:	011b      	lsls	r3, r3, #4
 800c03c:	440b      	add	r3, r1
 800c03e:	330f      	adds	r3, #15
 800c040:	2204      	movs	r2, #4
 800c042:	701a      	strb	r2, [r3, #0]
        break;
 800c044:	e006      	b.n	800c054 <dns_call_found+0x104>
      continue; /* only check other requests */
 800c046:	bf00      	nop
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800c048:	7bfb      	ldrb	r3, [r7, #15]
 800c04a:	3301      	adds	r3, #1
 800c04c:	73fb      	strb	r3, [r7, #15]
 800c04e:	7bfb      	ldrb	r3, [r7, #15]
 800c050:	2b03      	cmp	r3, #3
 800c052:	d9ca      	bls.n	800bfea <dns_call_found+0x9a>
      }
    }
  }
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
 800c054:	79fa      	ldrb	r2, [r7, #7]
 800c056:	491c      	ldr	r1, [pc, #112]	@ (800c0c8 <dns_call_found+0x178>)
 800c058:	4613      	mov	r3, r2
 800c05a:	011b      	lsls	r3, r3, #4
 800c05c:	4413      	add	r3, r2
 800c05e:	011b      	lsls	r3, r3, #4
 800c060:	440b      	add	r3, r1
 800c062:	330f      	adds	r3, #15
 800c064:	781b      	ldrb	r3, [r3, #0]
 800c066:	2b03      	cmp	r3, #3
 800c068:	d827      	bhi.n	800c0ba <dns_call_found+0x16a>
    /* if we come here, the pcb is not used any more and can be removed */
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 800c06a:	79fa      	ldrb	r2, [r7, #7]
 800c06c:	4916      	ldr	r1, [pc, #88]	@ (800c0c8 <dns_call_found+0x178>)
 800c06e:	4613      	mov	r3, r2
 800c070:	011b      	lsls	r3, r3, #4
 800c072:	4413      	add	r3, r2
 800c074:	011b      	lsls	r3, r3, #4
 800c076:	440b      	add	r3, r1
 800c078:	330f      	adds	r3, #15
 800c07a:	781b      	ldrb	r3, [r3, #0]
 800c07c:	461a      	mov	r2, r3
 800c07e:	4b13      	ldr	r3, [pc, #76]	@ (800c0cc <dns_call_found+0x17c>)
 800c080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c084:	4618      	mov	r0, r3
 800c086:	f007 ffbb 	bl	8014000 <udp_remove>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 800c08a:	79fa      	ldrb	r2, [r7, #7]
 800c08c:	490e      	ldr	r1, [pc, #56]	@ (800c0c8 <dns_call_found+0x178>)
 800c08e:	4613      	mov	r3, r2
 800c090:	011b      	lsls	r3, r3, #4
 800c092:	4413      	add	r3, r2
 800c094:	011b      	lsls	r3, r3, #4
 800c096:	440b      	add	r3, r1
 800c098:	330f      	adds	r3, #15
 800c09a:	781b      	ldrb	r3, [r3, #0]
 800c09c:	4619      	mov	r1, r3
 800c09e:	4b0b      	ldr	r3, [pc, #44]	@ (800c0cc <dns_call_found+0x17c>)
 800c0a0:	2200      	movs	r2, #0
 800c0a2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
    dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 800c0a6:	79fa      	ldrb	r2, [r7, #7]
 800c0a8:	4907      	ldr	r1, [pc, #28]	@ (800c0c8 <dns_call_found+0x178>)
 800c0aa:	4613      	mov	r3, r2
 800c0ac:	011b      	lsls	r3, r3, #4
 800c0ae:	4413      	add	r3, r2
 800c0b0:	011b      	lsls	r3, r3, #4
 800c0b2:	440b      	add	r3, r1
 800c0b4:	330f      	adds	r3, #15
 800c0b6:	2204      	movs	r2, #4
 800c0b8:	701a      	strb	r2, [r3, #0]
  }
#endif
}
 800c0ba:	bf00      	nop
 800c0bc:	3714      	adds	r7, #20
 800c0be:	46bd      	mov	sp, r7
 800c0c0:	bd90      	pop	{r4, r7, pc}
 800c0c2:	bf00      	nop
 800c0c4:	20011e40 	.word	0x20011e40
 800c0c8:	20011a00 	.word	0x20011a00
 800c0cc:	200119f0 	.word	0x200119f0

0800c0d0 <dns_create_txid>:

/* Create a query transmission ID that is unique for all outstanding queries */
static u16_t
dns_create_txid(void)
{
 800c0d0:	b580      	push	{r7, lr}
 800c0d2:	b082      	sub	sp, #8
 800c0d4:	af00      	add	r7, sp, #0
  u16_t txid;
  u8_t i;

again:
  txid = (u16_t)DNS_RAND_TXID();
 800c0d6:	f00a faef 	bl	80166b8 <rand>
 800c0da:	4603      	mov	r3, r0
 800c0dc:	80bb      	strh	r3, [r7, #4]

  /* check whether the ID is unique */
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 800c0de:	2300      	movs	r3, #0
 800c0e0:	71fb      	strb	r3, [r7, #7]
 800c0e2:	e01a      	b.n	800c11a <dns_create_txid+0x4a>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 800c0e4:	79fa      	ldrb	r2, [r7, #7]
 800c0e6:	4911      	ldr	r1, [pc, #68]	@ (800c12c <dns_create_txid+0x5c>)
 800c0e8:	4613      	mov	r3, r2
 800c0ea:	011b      	lsls	r3, r3, #4
 800c0ec:	4413      	add	r3, r2
 800c0ee:	011b      	lsls	r3, r3, #4
 800c0f0:	440b      	add	r3, r1
 800c0f2:	330a      	adds	r3, #10
 800c0f4:	781b      	ldrb	r3, [r3, #0]
 800c0f6:	2b02      	cmp	r3, #2
 800c0f8:	d10c      	bne.n	800c114 <dns_create_txid+0x44>
        (dns_table[i].txid == txid)) {
 800c0fa:	79fa      	ldrb	r2, [r7, #7]
 800c0fc:	490b      	ldr	r1, [pc, #44]	@ (800c12c <dns_create_txid+0x5c>)
 800c0fe:	4613      	mov	r3, r2
 800c100:	011b      	lsls	r3, r3, #4
 800c102:	4413      	add	r3, r2
 800c104:	011b      	lsls	r3, r3, #4
 800c106:	440b      	add	r3, r1
 800c108:	3308      	adds	r3, #8
 800c10a:	881b      	ldrh	r3, [r3, #0]
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 800c10c:	88ba      	ldrh	r2, [r7, #4]
 800c10e:	429a      	cmp	r2, r3
 800c110:	d100      	bne.n	800c114 <dns_create_txid+0x44>
      /* ID already used by another pending query */
      goto again;
 800c112:	e7e0      	b.n	800c0d6 <dns_create_txid+0x6>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 800c114:	79fb      	ldrb	r3, [r7, #7]
 800c116:	3301      	adds	r3, #1
 800c118:	71fb      	strb	r3, [r7, #7]
 800c11a:	79fb      	ldrb	r3, [r7, #7]
 800c11c:	2b03      	cmp	r3, #3
 800c11e:	d9e1      	bls.n	800c0e4 <dns_create_txid+0x14>
    }
  }

  return txid;
 800c120:	88bb      	ldrh	r3, [r7, #4]
}
 800c122:	4618      	mov	r0, r3
 800c124:	3708      	adds	r7, #8
 800c126:	46bd      	mov	sp, r7
 800c128:	bd80      	pop	{r7, pc}
 800c12a:	bf00      	nop
 800c12c:	20011a00 	.word	0x20011a00

0800c130 <dns_backupserver_available>:
/**
 * Check whether there are other backup DNS servers available to try
 */
static u8_t
dns_backupserver_available(struct dns_table_entry *pentry)
{
 800c130:	b480      	push	{r7}
 800c132:	b085      	sub	sp, #20
 800c134:	af00      	add	r7, sp, #0
 800c136:	6078      	str	r0, [r7, #4]
  u8_t ret = 0;
 800c138:	2300      	movs	r3, #0
 800c13a:	73fb      	strb	r3, [r7, #15]

  if (pentry) {
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d00d      	beq.n	800c15e <dns_backupserver_available+0x2e>
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	7adb      	ldrb	r3, [r3, #11]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d109      	bne.n	800c15e <dns_backupserver_available+0x2e>
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	7adb      	ldrb	r3, [r3, #11]
 800c14e:	3301      	adds	r3, #1
 800c150:	4a06      	ldr	r2, [pc, #24]	@ (800c16c <dns_backupserver_available+0x3c>)
 800c152:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d001      	beq.n	800c15e <dns_backupserver_available+0x2e>
      ret = 1;
 800c15a:	2301      	movs	r3, #1
 800c15c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800c15e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c160:	4618      	mov	r0, r3
 800c162:	3714      	adds	r7, #20
 800c164:	46bd      	mov	sp, r7
 800c166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c16a:	4770      	bx	lr
 800c16c:	20011e70 	.word	0x20011e70

0800c170 <dns_check_entry>:
 *
 * @param i index of the dns_table entry to check
 */
static void
dns_check_entry(u8_t i)
{
 800c170:	b580      	push	{r7, lr}
 800c172:	b084      	sub	sp, #16
 800c174:	af00      	add	r7, sp, #0
 800c176:	4603      	mov	r3, r0
 800c178:	71fb      	strb	r3, [r7, #7]
  err_t err;
  struct dns_table_entry *entry = &dns_table[i];
 800c17a:	79fa      	ldrb	r2, [r7, #7]
 800c17c:	4613      	mov	r3, r2
 800c17e:	011b      	lsls	r3, r3, #4
 800c180:	4413      	add	r3, r2
 800c182:	011b      	lsls	r3, r3, #4
 800c184:	4a48      	ldr	r2, [pc, #288]	@ (800c2a8 <dns_check_entry+0x138>)
 800c186:	4413      	add	r3, r2
 800c188:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 800c18a:	79fb      	ldrb	r3, [r7, #7]
 800c18c:	2b03      	cmp	r3, #3
 800c18e:	d906      	bls.n	800c19e <dns_check_entry+0x2e>
 800c190:	4b46      	ldr	r3, [pc, #280]	@ (800c2ac <dns_check_entry+0x13c>)
 800c192:	f240 421c 	movw	r2, #1052	@ 0x41c
 800c196:	4946      	ldr	r1, [pc, #280]	@ (800c2b0 <dns_check_entry+0x140>)
 800c198:	4846      	ldr	r0, [pc, #280]	@ (800c2b4 <dns_check_entry+0x144>)
 800c19a:	f00b fa1f 	bl	80175dc <iprintf>

  switch (entry->state) {
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	7a9b      	ldrb	r3, [r3, #10]
 800c1a2:	2b03      	cmp	r3, #3
 800c1a4:	d86f      	bhi.n	800c286 <dns_check_entry+0x116>
 800c1a6:	a201      	add	r2, pc, #4	@ (adr r2, 800c1ac <dns_check_entry+0x3c>)
 800c1a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1ac:	0800c297 	.word	0x0800c297
 800c1b0:	0800c1bd 	.word	0x0800c1bd
 800c1b4:	0800c1ef 	.word	0x0800c1ef
 800c1b8:	0800c265 	.word	0x0800c265
    case DNS_STATE_NEW:
      /* initialize new entry */
      entry->txid = dns_create_txid();
 800c1bc:	f7ff ff88 	bl	800c0d0 <dns_create_txid>
 800c1c0:	4603      	mov	r3, r0
 800c1c2:	461a      	mov	r2, r3
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	811a      	strh	r2, [r3, #8]
      entry->state = DNS_STATE_ASKING;
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	2202      	movs	r2, #2
 800c1cc:	729a      	strb	r2, [r3, #10]
      entry->server_idx = 0;
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	2200      	movs	r2, #0
 800c1d2:	72da      	strb	r2, [r3, #11]
      entry->tmr = 1;
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	2201      	movs	r2, #1
 800c1d8:	731a      	strb	r2, [r3, #12]
      entry->retries = 0;
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	2200      	movs	r2, #0
 800c1de:	735a      	strb	r2, [r3, #13]

      /* send DNS packet for this entry */
      err = dns_send(i);
 800c1e0:	79fb      	ldrb	r3, [r7, #7]
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	f7ff fdc4 	bl	800bd70 <dns_send>
 800c1e8:	4603      	mov	r3, r0
 800c1ea:	72fb      	strb	r3, [r7, #11]
      if (err != ERR_OK) {
        LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                    ("dns_send returned error: %s\n", lwip_strerr(err)));
      }
      break;
 800c1ec:	e058      	b.n	800c2a0 <dns_check_entry+0x130>
    case DNS_STATE_ASKING:
      if (--entry->tmr == 0) {
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	7b1b      	ldrb	r3, [r3, #12]
 800c1f2:	3b01      	subs	r3, #1
 800c1f4:	b2da      	uxtb	r2, r3
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	731a      	strb	r2, [r3, #12]
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	7b1b      	ldrb	r3, [r3, #12]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d14b      	bne.n	800c29a <dns_check_entry+0x12a>
        if (++entry->retries == DNS_MAX_RETRIES) {
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	7b5b      	ldrb	r3, [r3, #13]
 800c206:	3301      	adds	r3, #1
 800c208:	b2da      	uxtb	r2, r3
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	735a      	strb	r2, [r3, #13]
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	7b5b      	ldrb	r3, [r3, #13]
 800c212:	2b04      	cmp	r3, #4
 800c214:	d11b      	bne.n	800c24e <dns_check_entry+0xde>
          if (dns_backupserver_available(entry)
 800c216:	68f8      	ldr	r0, [r7, #12]
 800c218:	f7ff ff8a 	bl	800c130 <dns_backupserver_available>
 800c21c:	4603      	mov	r3, r0
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d00c      	beq.n	800c23c <dns_check_entry+0xcc>
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
              && !entry->is_mdns
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
             ) {
            /* change of server */
            entry->server_idx++;
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	7adb      	ldrb	r3, [r3, #11]
 800c226:	3301      	adds	r3, #1
 800c228:	b2da      	uxtb	r2, r3
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	72da      	strb	r2, [r3, #11]
            entry->tmr = 1;
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	2201      	movs	r2, #1
 800c232:	731a      	strb	r2, [r3, #12]
            entry->retries = 0;
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	2200      	movs	r2, #0
 800c238:	735a      	strb	r2, [r3, #13]
 800c23a:	e00c      	b.n	800c256 <dns_check_entry+0xe6>
          } else {
            LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": timeout\n", entry->name));
            /* call specified callback function if provided */
            dns_call_found(i, NULL);
 800c23c:	79fb      	ldrb	r3, [r7, #7]
 800c23e:	2100      	movs	r1, #0
 800c240:	4618      	mov	r0, r3
 800c242:	f7ff fe85 	bl	800bf50 <dns_call_found>
            /* flush this entry */
            entry->state = DNS_STATE_UNUSED;
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	2200      	movs	r2, #0
 800c24a:	729a      	strb	r2, [r3, #10]
            break;
 800c24c:	e028      	b.n	800c2a0 <dns_check_entry+0x130>
          }
        } else {
          /* wait longer for the next retry */
          entry->tmr = entry->retries;
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	7b5a      	ldrb	r2, [r3, #13]
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	731a      	strb	r2, [r3, #12]
        }

        /* send DNS packet for this entry */
        err = dns_send(i);
 800c256:	79fb      	ldrb	r3, [r7, #7]
 800c258:	4618      	mov	r0, r3
 800c25a:	f7ff fd89 	bl	800bd70 <dns_send>
 800c25e:	4603      	mov	r3, r0
 800c260:	72fb      	strb	r3, [r7, #11]
        if (err != ERR_OK) {
          LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                      ("dns_send returned error: %s\n", lwip_strerr(err)));
        }
      }
      break;
 800c262:	e01a      	b.n	800c29a <dns_check_entry+0x12a>
    case DNS_STATE_DONE:
      /* if the time to live is nul */
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d008      	beq.n	800c27e <dns_check_entry+0x10e>
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	1e5a      	subs	r2, r3, #1
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	601a      	str	r2, [r3, #0]
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d10f      	bne.n	800c29e <dns_check_entry+0x12e>
        LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": flush\n", entry->name));
        /* flush this entry, there cannot be any related pending entries in this state */
        entry->state = DNS_STATE_UNUSED;
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	2200      	movs	r2, #0
 800c282:	729a      	strb	r2, [r3, #10]
      }
      break;
 800c284:	e00b      	b.n	800c29e <dns_check_entry+0x12e>
    case DNS_STATE_UNUSED:
      /* nothing to do */
      break;
    default:
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 800c286:	4b09      	ldr	r3, [pc, #36]	@ (800c2ac <dns_check_entry+0x13c>)
 800c288:	f240 425b 	movw	r2, #1115	@ 0x45b
 800c28c:	490a      	ldr	r1, [pc, #40]	@ (800c2b8 <dns_check_entry+0x148>)
 800c28e:	4809      	ldr	r0, [pc, #36]	@ (800c2b4 <dns_check_entry+0x144>)
 800c290:	f00b f9a4 	bl	80175dc <iprintf>
      break;
 800c294:	e004      	b.n	800c2a0 <dns_check_entry+0x130>
      break;
 800c296:	bf00      	nop
 800c298:	e002      	b.n	800c2a0 <dns_check_entry+0x130>
      break;
 800c29a:	bf00      	nop
 800c29c:	e000      	b.n	800c2a0 <dns_check_entry+0x130>
      break;
 800c29e:	bf00      	nop
  }
}
 800c2a0:	bf00      	nop
 800c2a2:	3710      	adds	r7, #16
 800c2a4:	46bd      	mov	sp, r7
 800c2a6:	bd80      	pop	{r7, pc}
 800c2a8:	20011a00 	.word	0x20011a00
 800c2ac:	080202b0 	.word	0x080202b0
 800c2b0:	08020320 	.word	0x08020320
 800c2b4:	080202f8 	.word	0x080202f8
 800c2b8:	0802033c 	.word	0x0802033c

0800c2bc <dns_check_entries>:
/**
 * Call dns_check_entry for each entry in dns_table - check all entries.
 */
static void
dns_check_entries(void)
{
 800c2bc:	b580      	push	{r7, lr}
 800c2be:	b082      	sub	sp, #8
 800c2c0:	af00      	add	r7, sp, #0
  u8_t i;

  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	71fb      	strb	r3, [r7, #7]
 800c2c6:	e006      	b.n	800c2d6 <dns_check_entries+0x1a>
    dns_check_entry(i);
 800c2c8:	79fb      	ldrb	r3, [r7, #7]
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	f7ff ff50 	bl	800c170 <dns_check_entry>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 800c2d0:	79fb      	ldrb	r3, [r7, #7]
 800c2d2:	3301      	adds	r3, #1
 800c2d4:	71fb      	strb	r3, [r7, #7]
 800c2d6:	79fb      	ldrb	r3, [r7, #7]
 800c2d8:	2b03      	cmp	r3, #3
 800c2da:	d9f5      	bls.n	800c2c8 <dns_check_entries+0xc>
  }
}
 800c2dc:	bf00      	nop
 800c2de:	bf00      	nop
 800c2e0:	3708      	adds	r7, #8
 800c2e2:	46bd      	mov	sp, r7
 800c2e4:	bd80      	pop	{r7, pc}

0800c2e6 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800c2e6:	b580      	push	{r7, lr}
 800c2e8:	b082      	sub	sp, #8
 800c2ea:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800c2ec:	2300      	movs	r3, #0
 800c2ee:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800c2f0:	f000 f8d6 	bl	800c4a0 <mem_init>
  memp_init();
 800c2f4:	f000 fbdc 	bl	800cab0 <memp_init>
  pbuf_init();
  netif_init();
 800c2f8:	f000 fcda 	bl	800ccb0 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800c2fc:	f007 f9be 	bl	801367c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800c300:	f001 ff1a 	bl	800e138 <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
 800c304:	f7ff fd27 	bl	800bd56 <dns_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800c308:	f007 f92e 	bl	8013568 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800c30c:	bf00      	nop
 800c30e:	3708      	adds	r7, #8
 800c310:	46bd      	mov	sp, r7
 800c312:	bd80      	pop	{r7, pc}

0800c314 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800c314:	b480      	push	{r7}
 800c316:	b083      	sub	sp, #12
 800c318:	af00      	add	r7, sp, #0
 800c31a:	4603      	mov	r3, r0
 800c31c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800c31e:	4b05      	ldr	r3, [pc, #20]	@ (800c334 <ptr_to_mem+0x20>)
 800c320:	681a      	ldr	r2, [r3, #0]
 800c322:	88fb      	ldrh	r3, [r7, #6]
 800c324:	4413      	add	r3, r2
}
 800c326:	4618      	mov	r0, r3
 800c328:	370c      	adds	r7, #12
 800c32a:	46bd      	mov	sp, r7
 800c32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c330:	4770      	bx	lr
 800c332:	bf00      	nop
 800c334:	200122a4 	.word	0x200122a4

0800c338 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800c338:	b480      	push	{r7}
 800c33a:	b083      	sub	sp, #12
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800c340:	4b05      	ldr	r3, [pc, #20]	@ (800c358 <mem_to_ptr+0x20>)
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	687a      	ldr	r2, [r7, #4]
 800c346:	1ad3      	subs	r3, r2, r3
 800c348:	b29b      	uxth	r3, r3
}
 800c34a:	4618      	mov	r0, r3
 800c34c:	370c      	adds	r7, #12
 800c34e:	46bd      	mov	sp, r7
 800c350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c354:	4770      	bx	lr
 800c356:	bf00      	nop
 800c358:	200122a4 	.word	0x200122a4

0800c35c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800c35c:	b590      	push	{r4, r7, lr}
 800c35e:	b085      	sub	sp, #20
 800c360:	af00      	add	r7, sp, #0
 800c362:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800c364:	4b45      	ldr	r3, [pc, #276]	@ (800c47c <plug_holes+0x120>)
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	687a      	ldr	r2, [r7, #4]
 800c36a:	429a      	cmp	r2, r3
 800c36c:	d206      	bcs.n	800c37c <plug_holes+0x20>
 800c36e:	4b44      	ldr	r3, [pc, #272]	@ (800c480 <plug_holes+0x124>)
 800c370:	f240 12df 	movw	r2, #479	@ 0x1df
 800c374:	4943      	ldr	r1, [pc, #268]	@ (800c484 <plug_holes+0x128>)
 800c376:	4844      	ldr	r0, [pc, #272]	@ (800c488 <plug_holes+0x12c>)
 800c378:	f00b f930 	bl	80175dc <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800c37c:	4b43      	ldr	r3, [pc, #268]	@ (800c48c <plug_holes+0x130>)
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	687a      	ldr	r2, [r7, #4]
 800c382:	429a      	cmp	r2, r3
 800c384:	d306      	bcc.n	800c394 <plug_holes+0x38>
 800c386:	4b3e      	ldr	r3, [pc, #248]	@ (800c480 <plug_holes+0x124>)
 800c388:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800c38c:	4940      	ldr	r1, [pc, #256]	@ (800c490 <plug_holes+0x134>)
 800c38e:	483e      	ldr	r0, [pc, #248]	@ (800c488 <plug_holes+0x12c>)
 800c390:	f00b f924 	bl	80175dc <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	791b      	ldrb	r3, [r3, #4]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d006      	beq.n	800c3aa <plug_holes+0x4e>
 800c39c:	4b38      	ldr	r3, [pc, #224]	@ (800c480 <plug_holes+0x124>)
 800c39e:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800c3a2:	493c      	ldr	r1, [pc, #240]	@ (800c494 <plug_holes+0x138>)
 800c3a4:	4838      	ldr	r0, [pc, #224]	@ (800c488 <plug_holes+0x12c>)
 800c3a6:	f00b f919 	bl	80175dc <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	881b      	ldrh	r3, [r3, #0]
 800c3ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c3b2:	d906      	bls.n	800c3c2 <plug_holes+0x66>
 800c3b4:	4b32      	ldr	r3, [pc, #200]	@ (800c480 <plug_holes+0x124>)
 800c3b6:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800c3ba:	4937      	ldr	r1, [pc, #220]	@ (800c498 <plug_holes+0x13c>)
 800c3bc:	4832      	ldr	r0, [pc, #200]	@ (800c488 <plug_holes+0x12c>)
 800c3be:	f00b f90d 	bl	80175dc <iprintf>

  nmem = ptr_to_mem(mem->next);
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	881b      	ldrh	r3, [r3, #0]
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	f7ff ffa4 	bl	800c314 <ptr_to_mem>
 800c3cc:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800c3ce:	687a      	ldr	r2, [r7, #4]
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	429a      	cmp	r2, r3
 800c3d4:	d024      	beq.n	800c420 <plug_holes+0xc4>
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	791b      	ldrb	r3, [r3, #4]
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d120      	bne.n	800c420 <plug_holes+0xc4>
 800c3de:	4b2b      	ldr	r3, [pc, #172]	@ (800c48c <plug_holes+0x130>)
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	68fa      	ldr	r2, [r7, #12]
 800c3e4:	429a      	cmp	r2, r3
 800c3e6:	d01b      	beq.n	800c420 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800c3e8:	4b2c      	ldr	r3, [pc, #176]	@ (800c49c <plug_holes+0x140>)
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	68fa      	ldr	r2, [r7, #12]
 800c3ee:	429a      	cmp	r2, r3
 800c3f0:	d102      	bne.n	800c3f8 <plug_holes+0x9c>
      lfree = mem;
 800c3f2:	4a2a      	ldr	r2, [pc, #168]	@ (800c49c <plug_holes+0x140>)
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	881a      	ldrh	r2, [r3, #0]
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	881b      	ldrh	r3, [r3, #0]
 800c404:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c408:	d00a      	beq.n	800c420 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	881b      	ldrh	r3, [r3, #0]
 800c40e:	4618      	mov	r0, r3
 800c410:	f7ff ff80 	bl	800c314 <ptr_to_mem>
 800c414:	4604      	mov	r4, r0
 800c416:	6878      	ldr	r0, [r7, #4]
 800c418:	f7ff ff8e 	bl	800c338 <mem_to_ptr>
 800c41c:	4603      	mov	r3, r0
 800c41e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	885b      	ldrh	r3, [r3, #2]
 800c424:	4618      	mov	r0, r3
 800c426:	f7ff ff75 	bl	800c314 <ptr_to_mem>
 800c42a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800c42c:	68ba      	ldr	r2, [r7, #8]
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	429a      	cmp	r2, r3
 800c432:	d01f      	beq.n	800c474 <plug_holes+0x118>
 800c434:	68bb      	ldr	r3, [r7, #8]
 800c436:	791b      	ldrb	r3, [r3, #4]
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d11b      	bne.n	800c474 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800c43c:	4b17      	ldr	r3, [pc, #92]	@ (800c49c <plug_holes+0x140>)
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	687a      	ldr	r2, [r7, #4]
 800c442:	429a      	cmp	r2, r3
 800c444:	d102      	bne.n	800c44c <plug_holes+0xf0>
      lfree = pmem;
 800c446:	4a15      	ldr	r2, [pc, #84]	@ (800c49c <plug_holes+0x140>)
 800c448:	68bb      	ldr	r3, [r7, #8]
 800c44a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	881a      	ldrh	r2, [r3, #0]
 800c450:	68bb      	ldr	r3, [r7, #8]
 800c452:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	881b      	ldrh	r3, [r3, #0]
 800c458:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c45c:	d00a      	beq.n	800c474 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	881b      	ldrh	r3, [r3, #0]
 800c462:	4618      	mov	r0, r3
 800c464:	f7ff ff56 	bl	800c314 <ptr_to_mem>
 800c468:	4604      	mov	r4, r0
 800c46a:	68b8      	ldr	r0, [r7, #8]
 800c46c:	f7ff ff64 	bl	800c338 <mem_to_ptr>
 800c470:	4603      	mov	r3, r0
 800c472:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800c474:	bf00      	nop
 800c476:	3714      	adds	r7, #20
 800c478:	46bd      	mov	sp, r7
 800c47a:	bd90      	pop	{r4, r7, pc}
 800c47c:	200122a4 	.word	0x200122a4
 800c480:	0802035c 	.word	0x0802035c
 800c484:	0802038c 	.word	0x0802038c
 800c488:	080203a4 	.word	0x080203a4
 800c48c:	200122a8 	.word	0x200122a8
 800c490:	080203cc 	.word	0x080203cc
 800c494:	080203e8 	.word	0x080203e8
 800c498:	08020404 	.word	0x08020404
 800c49c:	200122ac 	.word	0x200122ac

0800c4a0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800c4a0:	b580      	push	{r7, lr}
 800c4a2:	b082      	sub	sp, #8
 800c4a4:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800c4a6:	4b18      	ldr	r3, [pc, #96]	@ (800c508 <mem_init+0x68>)
 800c4a8:	3303      	adds	r3, #3
 800c4aa:	f023 0303 	bic.w	r3, r3, #3
 800c4ae:	461a      	mov	r2, r3
 800c4b0:	4b16      	ldr	r3, [pc, #88]	@ (800c50c <mem_init+0x6c>)
 800c4b2:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800c4b4:	4b15      	ldr	r3, [pc, #84]	@ (800c50c <mem_init+0x6c>)
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800c4c0:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	2200      	movs	r2, #0
 800c4c6:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800c4ce:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800c4d2:	f7ff ff1f 	bl	800c314 <ptr_to_mem>
 800c4d6:	4603      	mov	r3, r0
 800c4d8:	4a0d      	ldr	r2, [pc, #52]	@ (800c510 <mem_init+0x70>)
 800c4da:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800c4dc:	4b0c      	ldr	r3, [pc, #48]	@ (800c510 <mem_init+0x70>)
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	2201      	movs	r2, #1
 800c4e2:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800c4e4:	4b0a      	ldr	r3, [pc, #40]	@ (800c510 <mem_init+0x70>)
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800c4ec:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800c4ee:	4b08      	ldr	r3, [pc, #32]	@ (800c510 <mem_init+0x70>)
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800c4f6:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800c4f8:	4b04      	ldr	r3, [pc, #16]	@ (800c50c <mem_init+0x6c>)
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	4a05      	ldr	r2, [pc, #20]	@ (800c514 <mem_init+0x74>)
 800c4fe:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800c500:	bf00      	nop
 800c502:	3708      	adds	r7, #8
 800c504:	46bd      	mov	sp, r7
 800c506:	bd80      	pop	{r7, pc}
 800c508:	20011e90 	.word	0x20011e90
 800c50c:	200122a4 	.word	0x200122a4
 800c510:	200122a8 	.word	0x200122a8
 800c514:	200122ac 	.word	0x200122ac

0800c518 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800c518:	b580      	push	{r7, lr}
 800c51a:	b086      	sub	sp, #24
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800c520:	6878      	ldr	r0, [r7, #4]
 800c522:	f7ff ff09 	bl	800c338 <mem_to_ptr>
 800c526:	4603      	mov	r3, r0
 800c528:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	881b      	ldrh	r3, [r3, #0]
 800c52e:	4618      	mov	r0, r3
 800c530:	f7ff fef0 	bl	800c314 <ptr_to_mem>
 800c534:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	885b      	ldrh	r3, [r3, #2]
 800c53a:	4618      	mov	r0, r3
 800c53c:	f7ff feea 	bl	800c314 <ptr_to_mem>
 800c540:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	881b      	ldrh	r3, [r3, #0]
 800c546:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c54a:	d818      	bhi.n	800c57e <mem_link_valid+0x66>
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	885b      	ldrh	r3, [r3, #2]
 800c550:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c554:	d813      	bhi.n	800c57e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800c55a:	8afa      	ldrh	r2, [r7, #22]
 800c55c:	429a      	cmp	r2, r3
 800c55e:	d004      	beq.n	800c56a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	881b      	ldrh	r3, [r3, #0]
 800c564:	8afa      	ldrh	r2, [r7, #22]
 800c566:	429a      	cmp	r2, r3
 800c568:	d109      	bne.n	800c57e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800c56a:	4b08      	ldr	r3, [pc, #32]	@ (800c58c <mem_link_valid+0x74>)
 800c56c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c56e:	693a      	ldr	r2, [r7, #16]
 800c570:	429a      	cmp	r2, r3
 800c572:	d006      	beq.n	800c582 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800c574:	693b      	ldr	r3, [r7, #16]
 800c576:	885b      	ldrh	r3, [r3, #2]
 800c578:	8afa      	ldrh	r2, [r7, #22]
 800c57a:	429a      	cmp	r2, r3
 800c57c:	d001      	beq.n	800c582 <mem_link_valid+0x6a>
    return 0;
 800c57e:	2300      	movs	r3, #0
 800c580:	e000      	b.n	800c584 <mem_link_valid+0x6c>
  }
  return 1;
 800c582:	2301      	movs	r3, #1
}
 800c584:	4618      	mov	r0, r3
 800c586:	3718      	adds	r7, #24
 800c588:	46bd      	mov	sp, r7
 800c58a:	bd80      	pop	{r7, pc}
 800c58c:	200122a8 	.word	0x200122a8

0800c590 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800c590:	b580      	push	{r7, lr}
 800c592:	b084      	sub	sp, #16
 800c594:	af00      	add	r7, sp, #0
 800c596:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d04c      	beq.n	800c638 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	f003 0303 	and.w	r3, r3, #3
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d007      	beq.n	800c5b8 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800c5a8:	4b25      	ldr	r3, [pc, #148]	@ (800c640 <mem_free+0xb0>)
 800c5aa:	f240 2273 	movw	r2, #627	@ 0x273
 800c5ae:	4925      	ldr	r1, [pc, #148]	@ (800c644 <mem_free+0xb4>)
 800c5b0:	4825      	ldr	r0, [pc, #148]	@ (800c648 <mem_free+0xb8>)
 800c5b2:	f00b f813 	bl	80175dc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800c5b6:	e040      	b.n	800c63a <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	3b08      	subs	r3, #8
 800c5bc:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800c5be:	4b23      	ldr	r3, [pc, #140]	@ (800c64c <mem_free+0xbc>)
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	68fa      	ldr	r2, [r7, #12]
 800c5c4:	429a      	cmp	r2, r3
 800c5c6:	d306      	bcc.n	800c5d6 <mem_free+0x46>
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	f103 020c 	add.w	r2, r3, #12
 800c5ce:	4b20      	ldr	r3, [pc, #128]	@ (800c650 <mem_free+0xc0>)
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	429a      	cmp	r2, r3
 800c5d4:	d907      	bls.n	800c5e6 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800c5d6:	4b1a      	ldr	r3, [pc, #104]	@ (800c640 <mem_free+0xb0>)
 800c5d8:	f240 227f 	movw	r2, #639	@ 0x27f
 800c5dc:	491d      	ldr	r1, [pc, #116]	@ (800c654 <mem_free+0xc4>)
 800c5de:	481a      	ldr	r0, [pc, #104]	@ (800c648 <mem_free+0xb8>)
 800c5e0:	f00a fffc 	bl	80175dc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800c5e4:	e029      	b.n	800c63a <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	791b      	ldrb	r3, [r3, #4]
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d107      	bne.n	800c5fe <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800c5ee:	4b14      	ldr	r3, [pc, #80]	@ (800c640 <mem_free+0xb0>)
 800c5f0:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800c5f4:	4918      	ldr	r1, [pc, #96]	@ (800c658 <mem_free+0xc8>)
 800c5f6:	4814      	ldr	r0, [pc, #80]	@ (800c648 <mem_free+0xb8>)
 800c5f8:	f00a fff0 	bl	80175dc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800c5fc:	e01d      	b.n	800c63a <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800c5fe:	68f8      	ldr	r0, [r7, #12]
 800c600:	f7ff ff8a 	bl	800c518 <mem_link_valid>
 800c604:	4603      	mov	r3, r0
 800c606:	2b00      	cmp	r3, #0
 800c608:	d107      	bne.n	800c61a <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800c60a:	4b0d      	ldr	r3, [pc, #52]	@ (800c640 <mem_free+0xb0>)
 800c60c:	f240 2295 	movw	r2, #661	@ 0x295
 800c610:	4912      	ldr	r1, [pc, #72]	@ (800c65c <mem_free+0xcc>)
 800c612:	480d      	ldr	r0, [pc, #52]	@ (800c648 <mem_free+0xb8>)
 800c614:	f00a ffe2 	bl	80175dc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800c618:	e00f      	b.n	800c63a <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	2200      	movs	r2, #0
 800c61e:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800c620:	4b0f      	ldr	r3, [pc, #60]	@ (800c660 <mem_free+0xd0>)
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	68fa      	ldr	r2, [r7, #12]
 800c626:	429a      	cmp	r2, r3
 800c628:	d202      	bcs.n	800c630 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800c62a:	4a0d      	ldr	r2, [pc, #52]	@ (800c660 <mem_free+0xd0>)
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800c630:	68f8      	ldr	r0, [r7, #12]
 800c632:	f7ff fe93 	bl	800c35c <plug_holes>
 800c636:	e000      	b.n	800c63a <mem_free+0xaa>
    return;
 800c638:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800c63a:	3710      	adds	r7, #16
 800c63c:	46bd      	mov	sp, r7
 800c63e:	bd80      	pop	{r7, pc}
 800c640:	0802035c 	.word	0x0802035c
 800c644:	08020430 	.word	0x08020430
 800c648:	080203a4 	.word	0x080203a4
 800c64c:	200122a4 	.word	0x200122a4
 800c650:	200122a8 	.word	0x200122a8
 800c654:	08020454 	.word	0x08020454
 800c658:	08020470 	.word	0x08020470
 800c65c:	08020498 	.word	0x08020498
 800c660:	200122ac 	.word	0x200122ac

0800c664 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800c664:	b580      	push	{r7, lr}
 800c666:	b088      	sub	sp, #32
 800c668:	af00      	add	r7, sp, #0
 800c66a:	6078      	str	r0, [r7, #4]
 800c66c:	460b      	mov	r3, r1
 800c66e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800c670:	887b      	ldrh	r3, [r7, #2]
 800c672:	3303      	adds	r3, #3
 800c674:	b29b      	uxth	r3, r3
 800c676:	f023 0303 	bic.w	r3, r3, #3
 800c67a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800c67c:	8bfb      	ldrh	r3, [r7, #30]
 800c67e:	2b0b      	cmp	r3, #11
 800c680:	d801      	bhi.n	800c686 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800c682:	230c      	movs	r3, #12
 800c684:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800c686:	8bfb      	ldrh	r3, [r7, #30]
 800c688:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c68c:	d803      	bhi.n	800c696 <mem_trim+0x32>
 800c68e:	8bfa      	ldrh	r2, [r7, #30]
 800c690:	887b      	ldrh	r3, [r7, #2]
 800c692:	429a      	cmp	r2, r3
 800c694:	d201      	bcs.n	800c69a <mem_trim+0x36>
    return NULL;
 800c696:	2300      	movs	r3, #0
 800c698:	e0cc      	b.n	800c834 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800c69a:	4b68      	ldr	r3, [pc, #416]	@ (800c83c <mem_trim+0x1d8>)
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	687a      	ldr	r2, [r7, #4]
 800c6a0:	429a      	cmp	r2, r3
 800c6a2:	d304      	bcc.n	800c6ae <mem_trim+0x4a>
 800c6a4:	4b66      	ldr	r3, [pc, #408]	@ (800c840 <mem_trim+0x1dc>)
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	687a      	ldr	r2, [r7, #4]
 800c6aa:	429a      	cmp	r2, r3
 800c6ac:	d306      	bcc.n	800c6bc <mem_trim+0x58>
 800c6ae:	4b65      	ldr	r3, [pc, #404]	@ (800c844 <mem_trim+0x1e0>)
 800c6b0:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800c6b4:	4964      	ldr	r1, [pc, #400]	@ (800c848 <mem_trim+0x1e4>)
 800c6b6:	4865      	ldr	r0, [pc, #404]	@ (800c84c <mem_trim+0x1e8>)
 800c6b8:	f00a ff90 	bl	80175dc <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800c6bc:	4b5f      	ldr	r3, [pc, #380]	@ (800c83c <mem_trim+0x1d8>)
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	687a      	ldr	r2, [r7, #4]
 800c6c2:	429a      	cmp	r2, r3
 800c6c4:	d304      	bcc.n	800c6d0 <mem_trim+0x6c>
 800c6c6:	4b5e      	ldr	r3, [pc, #376]	@ (800c840 <mem_trim+0x1dc>)
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	687a      	ldr	r2, [r7, #4]
 800c6cc:	429a      	cmp	r2, r3
 800c6ce:	d301      	bcc.n	800c6d4 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	e0af      	b.n	800c834 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	3b08      	subs	r3, #8
 800c6d8:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800c6da:	69b8      	ldr	r0, [r7, #24]
 800c6dc:	f7ff fe2c 	bl	800c338 <mem_to_ptr>
 800c6e0:	4603      	mov	r3, r0
 800c6e2:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800c6e4:	69bb      	ldr	r3, [r7, #24]
 800c6e6:	881a      	ldrh	r2, [r3, #0]
 800c6e8:	8afb      	ldrh	r3, [r7, #22]
 800c6ea:	1ad3      	subs	r3, r2, r3
 800c6ec:	b29b      	uxth	r3, r3
 800c6ee:	3b08      	subs	r3, #8
 800c6f0:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800c6f2:	8bfa      	ldrh	r2, [r7, #30]
 800c6f4:	8abb      	ldrh	r3, [r7, #20]
 800c6f6:	429a      	cmp	r2, r3
 800c6f8:	d906      	bls.n	800c708 <mem_trim+0xa4>
 800c6fa:	4b52      	ldr	r3, [pc, #328]	@ (800c844 <mem_trim+0x1e0>)
 800c6fc:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800c700:	4953      	ldr	r1, [pc, #332]	@ (800c850 <mem_trim+0x1ec>)
 800c702:	4852      	ldr	r0, [pc, #328]	@ (800c84c <mem_trim+0x1e8>)
 800c704:	f00a ff6a 	bl	80175dc <iprintf>
  if (newsize > size) {
 800c708:	8bfa      	ldrh	r2, [r7, #30]
 800c70a:	8abb      	ldrh	r3, [r7, #20]
 800c70c:	429a      	cmp	r2, r3
 800c70e:	d901      	bls.n	800c714 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800c710:	2300      	movs	r3, #0
 800c712:	e08f      	b.n	800c834 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800c714:	8bfa      	ldrh	r2, [r7, #30]
 800c716:	8abb      	ldrh	r3, [r7, #20]
 800c718:	429a      	cmp	r2, r3
 800c71a:	d101      	bne.n	800c720 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	e089      	b.n	800c834 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800c720:	69bb      	ldr	r3, [r7, #24]
 800c722:	881b      	ldrh	r3, [r3, #0]
 800c724:	4618      	mov	r0, r3
 800c726:	f7ff fdf5 	bl	800c314 <ptr_to_mem>
 800c72a:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800c72c:	693b      	ldr	r3, [r7, #16]
 800c72e:	791b      	ldrb	r3, [r3, #4]
 800c730:	2b00      	cmp	r3, #0
 800c732:	d13f      	bne.n	800c7b4 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c734:	69bb      	ldr	r3, [r7, #24]
 800c736:	881b      	ldrh	r3, [r3, #0]
 800c738:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c73c:	d106      	bne.n	800c74c <mem_trim+0xe8>
 800c73e:	4b41      	ldr	r3, [pc, #260]	@ (800c844 <mem_trim+0x1e0>)
 800c740:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800c744:	4943      	ldr	r1, [pc, #268]	@ (800c854 <mem_trim+0x1f0>)
 800c746:	4841      	ldr	r0, [pc, #260]	@ (800c84c <mem_trim+0x1e8>)
 800c748:	f00a ff48 	bl	80175dc <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800c74c:	693b      	ldr	r3, [r7, #16]
 800c74e:	881b      	ldrh	r3, [r3, #0]
 800c750:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800c752:	8afa      	ldrh	r2, [r7, #22]
 800c754:	8bfb      	ldrh	r3, [r7, #30]
 800c756:	4413      	add	r3, r2
 800c758:	b29b      	uxth	r3, r3
 800c75a:	3308      	adds	r3, #8
 800c75c:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800c75e:	4b3e      	ldr	r3, [pc, #248]	@ (800c858 <mem_trim+0x1f4>)
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	693a      	ldr	r2, [r7, #16]
 800c764:	429a      	cmp	r2, r3
 800c766:	d106      	bne.n	800c776 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800c768:	89fb      	ldrh	r3, [r7, #14]
 800c76a:	4618      	mov	r0, r3
 800c76c:	f7ff fdd2 	bl	800c314 <ptr_to_mem>
 800c770:	4603      	mov	r3, r0
 800c772:	4a39      	ldr	r2, [pc, #228]	@ (800c858 <mem_trim+0x1f4>)
 800c774:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800c776:	89fb      	ldrh	r3, [r7, #14]
 800c778:	4618      	mov	r0, r3
 800c77a:	f7ff fdcb 	bl	800c314 <ptr_to_mem>
 800c77e:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800c780:	693b      	ldr	r3, [r7, #16]
 800c782:	2200      	movs	r2, #0
 800c784:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800c786:	693b      	ldr	r3, [r7, #16]
 800c788:	89ba      	ldrh	r2, [r7, #12]
 800c78a:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800c78c:	693b      	ldr	r3, [r7, #16]
 800c78e:	8afa      	ldrh	r2, [r7, #22]
 800c790:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800c792:	69bb      	ldr	r3, [r7, #24]
 800c794:	89fa      	ldrh	r2, [r7, #14]
 800c796:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c798:	693b      	ldr	r3, [r7, #16]
 800c79a:	881b      	ldrh	r3, [r3, #0]
 800c79c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c7a0:	d047      	beq.n	800c832 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800c7a2:	693b      	ldr	r3, [r7, #16]
 800c7a4:	881b      	ldrh	r3, [r3, #0]
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	f7ff fdb4 	bl	800c314 <ptr_to_mem>
 800c7ac:	4602      	mov	r2, r0
 800c7ae:	89fb      	ldrh	r3, [r7, #14]
 800c7b0:	8053      	strh	r3, [r2, #2]
 800c7b2:	e03e      	b.n	800c832 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800c7b4:	8bfb      	ldrh	r3, [r7, #30]
 800c7b6:	f103 0214 	add.w	r2, r3, #20
 800c7ba:	8abb      	ldrh	r3, [r7, #20]
 800c7bc:	429a      	cmp	r2, r3
 800c7be:	d838      	bhi.n	800c832 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800c7c0:	8afa      	ldrh	r2, [r7, #22]
 800c7c2:	8bfb      	ldrh	r3, [r7, #30]
 800c7c4:	4413      	add	r3, r2
 800c7c6:	b29b      	uxth	r3, r3
 800c7c8:	3308      	adds	r3, #8
 800c7ca:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c7cc:	69bb      	ldr	r3, [r7, #24]
 800c7ce:	881b      	ldrh	r3, [r3, #0]
 800c7d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c7d4:	d106      	bne.n	800c7e4 <mem_trim+0x180>
 800c7d6:	4b1b      	ldr	r3, [pc, #108]	@ (800c844 <mem_trim+0x1e0>)
 800c7d8:	f240 3216 	movw	r2, #790	@ 0x316
 800c7dc:	491d      	ldr	r1, [pc, #116]	@ (800c854 <mem_trim+0x1f0>)
 800c7de:	481b      	ldr	r0, [pc, #108]	@ (800c84c <mem_trim+0x1e8>)
 800c7e0:	f00a fefc 	bl	80175dc <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800c7e4:	89fb      	ldrh	r3, [r7, #14]
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	f7ff fd94 	bl	800c314 <ptr_to_mem>
 800c7ec:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800c7ee:	4b1a      	ldr	r3, [pc, #104]	@ (800c858 <mem_trim+0x1f4>)
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	693a      	ldr	r2, [r7, #16]
 800c7f4:	429a      	cmp	r2, r3
 800c7f6:	d202      	bcs.n	800c7fe <mem_trim+0x19a>
      lfree = mem2;
 800c7f8:	4a17      	ldr	r2, [pc, #92]	@ (800c858 <mem_trim+0x1f4>)
 800c7fa:	693b      	ldr	r3, [r7, #16]
 800c7fc:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800c7fe:	693b      	ldr	r3, [r7, #16]
 800c800:	2200      	movs	r2, #0
 800c802:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800c804:	69bb      	ldr	r3, [r7, #24]
 800c806:	881a      	ldrh	r2, [r3, #0]
 800c808:	693b      	ldr	r3, [r7, #16]
 800c80a:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800c80c:	693b      	ldr	r3, [r7, #16]
 800c80e:	8afa      	ldrh	r2, [r7, #22]
 800c810:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800c812:	69bb      	ldr	r3, [r7, #24]
 800c814:	89fa      	ldrh	r2, [r7, #14]
 800c816:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c818:	693b      	ldr	r3, [r7, #16]
 800c81a:	881b      	ldrh	r3, [r3, #0]
 800c81c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c820:	d007      	beq.n	800c832 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800c822:	693b      	ldr	r3, [r7, #16]
 800c824:	881b      	ldrh	r3, [r3, #0]
 800c826:	4618      	mov	r0, r3
 800c828:	f7ff fd74 	bl	800c314 <ptr_to_mem>
 800c82c:	4602      	mov	r2, r0
 800c82e:	89fb      	ldrh	r3, [r7, #14]
 800c830:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800c832:	687b      	ldr	r3, [r7, #4]
}
 800c834:	4618      	mov	r0, r3
 800c836:	3720      	adds	r7, #32
 800c838:	46bd      	mov	sp, r7
 800c83a:	bd80      	pop	{r7, pc}
 800c83c:	200122a4 	.word	0x200122a4
 800c840:	200122a8 	.word	0x200122a8
 800c844:	0802035c 	.word	0x0802035c
 800c848:	080204cc 	.word	0x080204cc
 800c84c:	080203a4 	.word	0x080203a4
 800c850:	080204e4 	.word	0x080204e4
 800c854:	08020504 	.word	0x08020504
 800c858:	200122ac 	.word	0x200122ac

0800c85c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800c85c:	b580      	push	{r7, lr}
 800c85e:	b088      	sub	sp, #32
 800c860:	af00      	add	r7, sp, #0
 800c862:	4603      	mov	r3, r0
 800c864:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800c866:	88fb      	ldrh	r3, [r7, #6]
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d101      	bne.n	800c870 <mem_malloc+0x14>
    return NULL;
 800c86c:	2300      	movs	r3, #0
 800c86e:	e0d9      	b.n	800ca24 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800c870:	88fb      	ldrh	r3, [r7, #6]
 800c872:	3303      	adds	r3, #3
 800c874:	b29b      	uxth	r3, r3
 800c876:	f023 0303 	bic.w	r3, r3, #3
 800c87a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800c87c:	8bbb      	ldrh	r3, [r7, #28]
 800c87e:	2b0b      	cmp	r3, #11
 800c880:	d801      	bhi.n	800c886 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800c882:	230c      	movs	r3, #12
 800c884:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800c886:	8bbb      	ldrh	r3, [r7, #28]
 800c888:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c88c:	d803      	bhi.n	800c896 <mem_malloc+0x3a>
 800c88e:	8bba      	ldrh	r2, [r7, #28]
 800c890:	88fb      	ldrh	r3, [r7, #6]
 800c892:	429a      	cmp	r2, r3
 800c894:	d201      	bcs.n	800c89a <mem_malloc+0x3e>
    return NULL;
 800c896:	2300      	movs	r3, #0
 800c898:	e0c4      	b.n	800ca24 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c89a:	4b64      	ldr	r3, [pc, #400]	@ (800ca2c <mem_malloc+0x1d0>)
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	4618      	mov	r0, r3
 800c8a0:	f7ff fd4a 	bl	800c338 <mem_to_ptr>
 800c8a4:	4603      	mov	r3, r0
 800c8a6:	83fb      	strh	r3, [r7, #30]
 800c8a8:	e0b4      	b.n	800ca14 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800c8aa:	8bfb      	ldrh	r3, [r7, #30]
 800c8ac:	4618      	mov	r0, r3
 800c8ae:	f7ff fd31 	bl	800c314 <ptr_to_mem>
 800c8b2:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800c8b4:	697b      	ldr	r3, [r7, #20]
 800c8b6:	791b      	ldrb	r3, [r3, #4]
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	f040 80a4 	bne.w	800ca06 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800c8be:	697b      	ldr	r3, [r7, #20]
 800c8c0:	881b      	ldrh	r3, [r3, #0]
 800c8c2:	461a      	mov	r2, r3
 800c8c4:	8bfb      	ldrh	r3, [r7, #30]
 800c8c6:	1ad3      	subs	r3, r2, r3
 800c8c8:	f1a3 0208 	sub.w	r2, r3, #8
 800c8cc:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800c8ce:	429a      	cmp	r2, r3
 800c8d0:	f0c0 8099 	bcc.w	800ca06 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800c8d4:	697b      	ldr	r3, [r7, #20]
 800c8d6:	881b      	ldrh	r3, [r3, #0]
 800c8d8:	461a      	mov	r2, r3
 800c8da:	8bfb      	ldrh	r3, [r7, #30]
 800c8dc:	1ad3      	subs	r3, r2, r3
 800c8de:	f1a3 0208 	sub.w	r2, r3, #8
 800c8e2:	8bbb      	ldrh	r3, [r7, #28]
 800c8e4:	3314      	adds	r3, #20
 800c8e6:	429a      	cmp	r2, r3
 800c8e8:	d333      	bcc.n	800c952 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800c8ea:	8bfa      	ldrh	r2, [r7, #30]
 800c8ec:	8bbb      	ldrh	r3, [r7, #28]
 800c8ee:	4413      	add	r3, r2
 800c8f0:	b29b      	uxth	r3, r3
 800c8f2:	3308      	adds	r3, #8
 800c8f4:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800c8f6:	8a7b      	ldrh	r3, [r7, #18]
 800c8f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c8fc:	d106      	bne.n	800c90c <mem_malloc+0xb0>
 800c8fe:	4b4c      	ldr	r3, [pc, #304]	@ (800ca30 <mem_malloc+0x1d4>)
 800c900:	f240 3287 	movw	r2, #903	@ 0x387
 800c904:	494b      	ldr	r1, [pc, #300]	@ (800ca34 <mem_malloc+0x1d8>)
 800c906:	484c      	ldr	r0, [pc, #304]	@ (800ca38 <mem_malloc+0x1dc>)
 800c908:	f00a fe68 	bl	80175dc <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800c90c:	8a7b      	ldrh	r3, [r7, #18]
 800c90e:	4618      	mov	r0, r3
 800c910:	f7ff fd00 	bl	800c314 <ptr_to_mem>
 800c914:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	2200      	movs	r2, #0
 800c91a:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800c91c:	697b      	ldr	r3, [r7, #20]
 800c91e:	881a      	ldrh	r2, [r3, #0]
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	8bfa      	ldrh	r2, [r7, #30]
 800c928:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800c92a:	697b      	ldr	r3, [r7, #20]
 800c92c:	8a7a      	ldrh	r2, [r7, #18]
 800c92e:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800c930:	697b      	ldr	r3, [r7, #20]
 800c932:	2201      	movs	r2, #1
 800c934:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	881b      	ldrh	r3, [r3, #0]
 800c93a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c93e:	d00b      	beq.n	800c958 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	881b      	ldrh	r3, [r3, #0]
 800c944:	4618      	mov	r0, r3
 800c946:	f7ff fce5 	bl	800c314 <ptr_to_mem>
 800c94a:	4602      	mov	r2, r0
 800c94c:	8a7b      	ldrh	r3, [r7, #18]
 800c94e:	8053      	strh	r3, [r2, #2]
 800c950:	e002      	b.n	800c958 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800c952:	697b      	ldr	r3, [r7, #20]
 800c954:	2201      	movs	r2, #1
 800c956:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800c958:	4b34      	ldr	r3, [pc, #208]	@ (800ca2c <mem_malloc+0x1d0>)
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	697a      	ldr	r2, [r7, #20]
 800c95e:	429a      	cmp	r2, r3
 800c960:	d127      	bne.n	800c9b2 <mem_malloc+0x156>
          struct mem *cur = lfree;
 800c962:	4b32      	ldr	r3, [pc, #200]	@ (800ca2c <mem_malloc+0x1d0>)
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800c968:	e005      	b.n	800c976 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800c96a:	69bb      	ldr	r3, [r7, #24]
 800c96c:	881b      	ldrh	r3, [r3, #0]
 800c96e:	4618      	mov	r0, r3
 800c970:	f7ff fcd0 	bl	800c314 <ptr_to_mem>
 800c974:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800c976:	69bb      	ldr	r3, [r7, #24]
 800c978:	791b      	ldrb	r3, [r3, #4]
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d004      	beq.n	800c988 <mem_malloc+0x12c>
 800c97e:	4b2f      	ldr	r3, [pc, #188]	@ (800ca3c <mem_malloc+0x1e0>)
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	69ba      	ldr	r2, [r7, #24]
 800c984:	429a      	cmp	r2, r3
 800c986:	d1f0      	bne.n	800c96a <mem_malloc+0x10e>
          }
          lfree = cur;
 800c988:	4a28      	ldr	r2, [pc, #160]	@ (800ca2c <mem_malloc+0x1d0>)
 800c98a:	69bb      	ldr	r3, [r7, #24]
 800c98c:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800c98e:	4b27      	ldr	r3, [pc, #156]	@ (800ca2c <mem_malloc+0x1d0>)
 800c990:	681a      	ldr	r2, [r3, #0]
 800c992:	4b2a      	ldr	r3, [pc, #168]	@ (800ca3c <mem_malloc+0x1e0>)
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	429a      	cmp	r2, r3
 800c998:	d00b      	beq.n	800c9b2 <mem_malloc+0x156>
 800c99a:	4b24      	ldr	r3, [pc, #144]	@ (800ca2c <mem_malloc+0x1d0>)
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	791b      	ldrb	r3, [r3, #4]
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d006      	beq.n	800c9b2 <mem_malloc+0x156>
 800c9a4:	4b22      	ldr	r3, [pc, #136]	@ (800ca30 <mem_malloc+0x1d4>)
 800c9a6:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800c9aa:	4925      	ldr	r1, [pc, #148]	@ (800ca40 <mem_malloc+0x1e4>)
 800c9ac:	4822      	ldr	r0, [pc, #136]	@ (800ca38 <mem_malloc+0x1dc>)
 800c9ae:	f00a fe15 	bl	80175dc <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800c9b2:	8bba      	ldrh	r2, [r7, #28]
 800c9b4:	697b      	ldr	r3, [r7, #20]
 800c9b6:	4413      	add	r3, r2
 800c9b8:	3308      	adds	r3, #8
 800c9ba:	4a20      	ldr	r2, [pc, #128]	@ (800ca3c <mem_malloc+0x1e0>)
 800c9bc:	6812      	ldr	r2, [r2, #0]
 800c9be:	4293      	cmp	r3, r2
 800c9c0:	d906      	bls.n	800c9d0 <mem_malloc+0x174>
 800c9c2:	4b1b      	ldr	r3, [pc, #108]	@ (800ca30 <mem_malloc+0x1d4>)
 800c9c4:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800c9c8:	491e      	ldr	r1, [pc, #120]	@ (800ca44 <mem_malloc+0x1e8>)
 800c9ca:	481b      	ldr	r0, [pc, #108]	@ (800ca38 <mem_malloc+0x1dc>)
 800c9cc:	f00a fe06 	bl	80175dc <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800c9d0:	697b      	ldr	r3, [r7, #20]
 800c9d2:	f003 0303 	and.w	r3, r3, #3
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d006      	beq.n	800c9e8 <mem_malloc+0x18c>
 800c9da:	4b15      	ldr	r3, [pc, #84]	@ (800ca30 <mem_malloc+0x1d4>)
 800c9dc:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800c9e0:	4919      	ldr	r1, [pc, #100]	@ (800ca48 <mem_malloc+0x1ec>)
 800c9e2:	4815      	ldr	r0, [pc, #84]	@ (800ca38 <mem_malloc+0x1dc>)
 800c9e4:	f00a fdfa 	bl	80175dc <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800c9e8:	697b      	ldr	r3, [r7, #20]
 800c9ea:	f003 0303 	and.w	r3, r3, #3
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d006      	beq.n	800ca00 <mem_malloc+0x1a4>
 800c9f2:	4b0f      	ldr	r3, [pc, #60]	@ (800ca30 <mem_malloc+0x1d4>)
 800c9f4:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800c9f8:	4914      	ldr	r1, [pc, #80]	@ (800ca4c <mem_malloc+0x1f0>)
 800c9fa:	480f      	ldr	r0, [pc, #60]	@ (800ca38 <mem_malloc+0x1dc>)
 800c9fc:	f00a fdee 	bl	80175dc <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800ca00:	697b      	ldr	r3, [r7, #20]
 800ca02:	3308      	adds	r3, #8
 800ca04:	e00e      	b.n	800ca24 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800ca06:	8bfb      	ldrh	r3, [r7, #30]
 800ca08:	4618      	mov	r0, r3
 800ca0a:	f7ff fc83 	bl	800c314 <ptr_to_mem>
 800ca0e:	4603      	mov	r3, r0
 800ca10:	881b      	ldrh	r3, [r3, #0]
 800ca12:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800ca14:	8bfa      	ldrh	r2, [r7, #30]
 800ca16:	8bbb      	ldrh	r3, [r7, #28]
 800ca18:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 800ca1c:	429a      	cmp	r2, r3
 800ca1e:	f4ff af44 	bcc.w	800c8aa <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800ca22:	2300      	movs	r3, #0
}
 800ca24:	4618      	mov	r0, r3
 800ca26:	3720      	adds	r7, #32
 800ca28:	46bd      	mov	sp, r7
 800ca2a:	bd80      	pop	{r7, pc}
 800ca2c:	200122ac 	.word	0x200122ac
 800ca30:	0802035c 	.word	0x0802035c
 800ca34:	08020504 	.word	0x08020504
 800ca38:	080203a4 	.word	0x080203a4
 800ca3c:	200122a8 	.word	0x200122a8
 800ca40:	08020518 	.word	0x08020518
 800ca44:	08020534 	.word	0x08020534
 800ca48:	08020564 	.word	0x08020564
 800ca4c:	08020594 	.word	0x08020594

0800ca50 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800ca50:	b480      	push	{r7}
 800ca52:	b085      	sub	sp, #20
 800ca54:	af00      	add	r7, sp, #0
 800ca56:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	689b      	ldr	r3, [r3, #8]
 800ca5c:	2200      	movs	r2, #0
 800ca5e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	685b      	ldr	r3, [r3, #4]
 800ca64:	3303      	adds	r3, #3
 800ca66:	f023 0303 	bic.w	r3, r3, #3
 800ca6a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	60fb      	str	r3, [r7, #12]
 800ca70:	e011      	b.n	800ca96 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	689b      	ldr	r3, [r3, #8]
 800ca76:	681a      	ldr	r2, [r3, #0]
 800ca78:	68bb      	ldr	r3, [r7, #8]
 800ca7a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	689b      	ldr	r3, [r3, #8]
 800ca80:	68ba      	ldr	r2, [r7, #8]
 800ca82:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	881b      	ldrh	r3, [r3, #0]
 800ca88:	461a      	mov	r2, r3
 800ca8a:	68bb      	ldr	r3, [r7, #8]
 800ca8c:	4413      	add	r3, r2
 800ca8e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	3301      	adds	r3, #1
 800ca94:	60fb      	str	r3, [r7, #12]
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	885b      	ldrh	r3, [r3, #2]
 800ca9a:	461a      	mov	r2, r3
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	4293      	cmp	r3, r2
 800caa0:	dbe7      	blt.n	800ca72 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800caa2:	bf00      	nop
 800caa4:	bf00      	nop
 800caa6:	3714      	adds	r7, #20
 800caa8:	46bd      	mov	sp, r7
 800caaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caae:	4770      	bx	lr

0800cab0 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800cab0:	b580      	push	{r7, lr}
 800cab2:	b082      	sub	sp, #8
 800cab4:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800cab6:	2300      	movs	r3, #0
 800cab8:	80fb      	strh	r3, [r7, #6]
 800caba:	e009      	b.n	800cad0 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800cabc:	88fb      	ldrh	r3, [r7, #6]
 800cabe:	4a08      	ldr	r2, [pc, #32]	@ (800cae0 <memp_init+0x30>)
 800cac0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cac4:	4618      	mov	r0, r3
 800cac6:	f7ff ffc3 	bl	800ca50 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800caca:	88fb      	ldrh	r3, [r7, #6]
 800cacc:	3301      	adds	r3, #1
 800cace:	80fb      	strh	r3, [r7, #6]
 800cad0:	88fb      	ldrh	r3, [r7, #6]
 800cad2:	2b08      	cmp	r3, #8
 800cad4:	d9f2      	bls.n	800cabc <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800cad6:	bf00      	nop
 800cad8:	bf00      	nop
 800cada:	3708      	adds	r7, #8
 800cadc:	46bd      	mov	sp, r7
 800cade:	bd80      	pop	{r7, pc}
 800cae0:	08022d78 	.word	0x08022d78

0800cae4 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800cae4:	b580      	push	{r7, lr}
 800cae6:	b084      	sub	sp, #16
 800cae8:	af00      	add	r7, sp, #0
 800caea:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	689b      	ldr	r3, [r3, #8]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d012      	beq.n	800cb20 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	689b      	ldr	r3, [r3, #8]
 800cafe:	68fa      	ldr	r2, [r7, #12]
 800cb00:	6812      	ldr	r2, [r2, #0]
 800cb02:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	f003 0303 	and.w	r3, r3, #3
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d006      	beq.n	800cb1c <do_memp_malloc_pool+0x38>
 800cb0e:	4b07      	ldr	r3, [pc, #28]	@ (800cb2c <do_memp_malloc_pool+0x48>)
 800cb10:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800cb14:	4906      	ldr	r1, [pc, #24]	@ (800cb30 <do_memp_malloc_pool+0x4c>)
 800cb16:	4807      	ldr	r0, [pc, #28]	@ (800cb34 <do_memp_malloc_pool+0x50>)
 800cb18:	f00a fd60 	bl	80175dc <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	e000      	b.n	800cb22 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800cb20:	2300      	movs	r3, #0
}
 800cb22:	4618      	mov	r0, r3
 800cb24:	3710      	adds	r7, #16
 800cb26:	46bd      	mov	sp, r7
 800cb28:	bd80      	pop	{r7, pc}
 800cb2a:	bf00      	nop
 800cb2c:	080205b8 	.word	0x080205b8
 800cb30:	080205e8 	.word	0x080205e8
 800cb34:	0802060c 	.word	0x0802060c

0800cb38 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	b082      	sub	sp, #8
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d106      	bne.n	800cb54 <memp_malloc_pool+0x1c>
 800cb46:	4b0a      	ldr	r3, [pc, #40]	@ (800cb70 <memp_malloc_pool+0x38>)
 800cb48:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 800cb4c:	4909      	ldr	r1, [pc, #36]	@ (800cb74 <memp_malloc_pool+0x3c>)
 800cb4e:	480a      	ldr	r0, [pc, #40]	@ (800cb78 <memp_malloc_pool+0x40>)
 800cb50:	f00a fd44 	bl	80175dc <iprintf>
  if (desc == NULL) {
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d101      	bne.n	800cb5e <memp_malloc_pool+0x26>
    return NULL;
 800cb5a:	2300      	movs	r3, #0
 800cb5c:	e003      	b.n	800cb66 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800cb5e:	6878      	ldr	r0, [r7, #4]
 800cb60:	f7ff ffc0 	bl	800cae4 <do_memp_malloc_pool>
 800cb64:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800cb66:	4618      	mov	r0, r3
 800cb68:	3708      	adds	r7, #8
 800cb6a:	46bd      	mov	sp, r7
 800cb6c:	bd80      	pop	{r7, pc}
 800cb6e:	bf00      	nop
 800cb70:	080205b8 	.word	0x080205b8
 800cb74:	08020634 	.word	0x08020634
 800cb78:	0802060c 	.word	0x0802060c

0800cb7c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800cb7c:	b580      	push	{r7, lr}
 800cb7e:	b084      	sub	sp, #16
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	4603      	mov	r3, r0
 800cb84:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800cb86:	79fb      	ldrb	r3, [r7, #7]
 800cb88:	2b08      	cmp	r3, #8
 800cb8a:	d908      	bls.n	800cb9e <memp_malloc+0x22>
 800cb8c:	4b0a      	ldr	r3, [pc, #40]	@ (800cbb8 <memp_malloc+0x3c>)
 800cb8e:	f240 1257 	movw	r2, #343	@ 0x157
 800cb92:	490a      	ldr	r1, [pc, #40]	@ (800cbbc <memp_malloc+0x40>)
 800cb94:	480a      	ldr	r0, [pc, #40]	@ (800cbc0 <memp_malloc+0x44>)
 800cb96:	f00a fd21 	bl	80175dc <iprintf>
 800cb9a:	2300      	movs	r3, #0
 800cb9c:	e008      	b.n	800cbb0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800cb9e:	79fb      	ldrb	r3, [r7, #7]
 800cba0:	4a08      	ldr	r2, [pc, #32]	@ (800cbc4 <memp_malloc+0x48>)
 800cba2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cba6:	4618      	mov	r0, r3
 800cba8:	f7ff ff9c 	bl	800cae4 <do_memp_malloc_pool>
 800cbac:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800cbae:	68fb      	ldr	r3, [r7, #12]
}
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	3710      	adds	r7, #16
 800cbb4:	46bd      	mov	sp, r7
 800cbb6:	bd80      	pop	{r7, pc}
 800cbb8:	080205b8 	.word	0x080205b8
 800cbbc:	08020648 	.word	0x08020648
 800cbc0:	0802060c 	.word	0x0802060c
 800cbc4:	08022d78 	.word	0x08022d78

0800cbc8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800cbc8:	b580      	push	{r7, lr}
 800cbca:	b084      	sub	sp, #16
 800cbcc:	af00      	add	r7, sp, #0
 800cbce:	6078      	str	r0, [r7, #4]
 800cbd0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800cbd2:	683b      	ldr	r3, [r7, #0]
 800cbd4:	f003 0303 	and.w	r3, r3, #3
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d006      	beq.n	800cbea <do_memp_free_pool+0x22>
 800cbdc:	4b0a      	ldr	r3, [pc, #40]	@ (800cc08 <do_memp_free_pool+0x40>)
 800cbde:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800cbe2:	490a      	ldr	r1, [pc, #40]	@ (800cc0c <do_memp_free_pool+0x44>)
 800cbe4:	480a      	ldr	r0, [pc, #40]	@ (800cc10 <do_memp_free_pool+0x48>)
 800cbe6:	f00a fcf9 	bl	80175dc <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800cbea:	683b      	ldr	r3, [r7, #0]
 800cbec:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	689b      	ldr	r3, [r3, #8]
 800cbf2:	681a      	ldr	r2, [r3, #0]
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	689b      	ldr	r3, [r3, #8]
 800cbfc:	68fa      	ldr	r2, [r7, #12]
 800cbfe:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800cc00:	bf00      	nop
 800cc02:	3710      	adds	r7, #16
 800cc04:	46bd      	mov	sp, r7
 800cc06:	bd80      	pop	{r7, pc}
 800cc08:	080205b8 	.word	0x080205b8
 800cc0c:	08020668 	.word	0x08020668
 800cc10:	0802060c 	.word	0x0802060c

0800cc14 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800cc14:	b580      	push	{r7, lr}
 800cc16:	b082      	sub	sp, #8
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	6078      	str	r0, [r7, #4]
 800cc1c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d106      	bne.n	800cc32 <memp_free_pool+0x1e>
 800cc24:	4b0a      	ldr	r3, [pc, #40]	@ (800cc50 <memp_free_pool+0x3c>)
 800cc26:	f240 1295 	movw	r2, #405	@ 0x195
 800cc2a:	490a      	ldr	r1, [pc, #40]	@ (800cc54 <memp_free_pool+0x40>)
 800cc2c:	480a      	ldr	r0, [pc, #40]	@ (800cc58 <memp_free_pool+0x44>)
 800cc2e:	f00a fcd5 	bl	80175dc <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d007      	beq.n	800cc48 <memp_free_pool+0x34>
 800cc38:	683b      	ldr	r3, [r7, #0]
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d004      	beq.n	800cc48 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800cc3e:	6839      	ldr	r1, [r7, #0]
 800cc40:	6878      	ldr	r0, [r7, #4]
 800cc42:	f7ff ffc1 	bl	800cbc8 <do_memp_free_pool>
 800cc46:	e000      	b.n	800cc4a <memp_free_pool+0x36>
    return;
 800cc48:	bf00      	nop
}
 800cc4a:	3708      	adds	r7, #8
 800cc4c:	46bd      	mov	sp, r7
 800cc4e:	bd80      	pop	{r7, pc}
 800cc50:	080205b8 	.word	0x080205b8
 800cc54:	08020634 	.word	0x08020634
 800cc58:	0802060c 	.word	0x0802060c

0800cc5c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800cc5c:	b580      	push	{r7, lr}
 800cc5e:	b082      	sub	sp, #8
 800cc60:	af00      	add	r7, sp, #0
 800cc62:	4603      	mov	r3, r0
 800cc64:	6039      	str	r1, [r7, #0]
 800cc66:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800cc68:	79fb      	ldrb	r3, [r7, #7]
 800cc6a:	2b08      	cmp	r3, #8
 800cc6c:	d907      	bls.n	800cc7e <memp_free+0x22>
 800cc6e:	4b0c      	ldr	r3, [pc, #48]	@ (800cca0 <memp_free+0x44>)
 800cc70:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800cc74:	490b      	ldr	r1, [pc, #44]	@ (800cca4 <memp_free+0x48>)
 800cc76:	480c      	ldr	r0, [pc, #48]	@ (800cca8 <memp_free+0x4c>)
 800cc78:	f00a fcb0 	bl	80175dc <iprintf>
 800cc7c:	e00c      	b.n	800cc98 <memp_free+0x3c>

  if (mem == NULL) {
 800cc7e:	683b      	ldr	r3, [r7, #0]
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d008      	beq.n	800cc96 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800cc84:	79fb      	ldrb	r3, [r7, #7]
 800cc86:	4a09      	ldr	r2, [pc, #36]	@ (800ccac <memp_free+0x50>)
 800cc88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc8c:	6839      	ldr	r1, [r7, #0]
 800cc8e:	4618      	mov	r0, r3
 800cc90:	f7ff ff9a 	bl	800cbc8 <do_memp_free_pool>
 800cc94:	e000      	b.n	800cc98 <memp_free+0x3c>
    return;
 800cc96:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800cc98:	3708      	adds	r7, #8
 800cc9a:	46bd      	mov	sp, r7
 800cc9c:	bd80      	pop	{r7, pc}
 800cc9e:	bf00      	nop
 800cca0:	080205b8 	.word	0x080205b8
 800cca4:	08020688 	.word	0x08020688
 800cca8:	0802060c 	.word	0x0802060c
 800ccac:	08022d78 	.word	0x08022d78

0800ccb0 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800ccb0:	b480      	push	{r7}
 800ccb2:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800ccb4:	bf00      	nop
 800ccb6:	46bd      	mov	sp, r7
 800ccb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccbc:	4770      	bx	lr
	...

0800ccc0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800ccc0:	b580      	push	{r7, lr}
 800ccc2:	b086      	sub	sp, #24
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	60f8      	str	r0, [r7, #12]
 800ccc8:	60b9      	str	r1, [r7, #8]
 800ccca:	607a      	str	r2, [r7, #4]
 800cccc:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d108      	bne.n	800cce6 <netif_add+0x26>
 800ccd4:	4b57      	ldr	r3, [pc, #348]	@ (800ce34 <netif_add+0x174>)
 800ccd6:	f240 1227 	movw	r2, #295	@ 0x127
 800ccda:	4957      	ldr	r1, [pc, #348]	@ (800ce38 <netif_add+0x178>)
 800ccdc:	4857      	ldr	r0, [pc, #348]	@ (800ce3c <netif_add+0x17c>)
 800ccde:	f00a fc7d 	bl	80175dc <iprintf>
 800cce2:	2300      	movs	r3, #0
 800cce4:	e0a2      	b.n	800ce2c <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800cce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d108      	bne.n	800ccfe <netif_add+0x3e>
 800ccec:	4b51      	ldr	r3, [pc, #324]	@ (800ce34 <netif_add+0x174>)
 800ccee:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800ccf2:	4953      	ldr	r1, [pc, #332]	@ (800ce40 <netif_add+0x180>)
 800ccf4:	4851      	ldr	r0, [pc, #324]	@ (800ce3c <netif_add+0x17c>)
 800ccf6:	f00a fc71 	bl	80175dc <iprintf>
 800ccfa:	2300      	movs	r3, #0
 800ccfc:	e096      	b.n	800ce2c <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800ccfe:	68bb      	ldr	r3, [r7, #8]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d101      	bne.n	800cd08 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800cd04:	4b4f      	ldr	r3, [pc, #316]	@ (800ce44 <netif_add+0x184>)
 800cd06:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d101      	bne.n	800cd12 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800cd0e:	4b4d      	ldr	r3, [pc, #308]	@ (800ce44 <netif_add+0x184>)
 800cd10:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800cd12:	683b      	ldr	r3, [r7, #0]
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d101      	bne.n	800cd1c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800cd18:	4b4a      	ldr	r3, [pc, #296]	@ (800ce44 <netif_add+0x184>)
 800cd1a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	2200      	movs	r2, #0
 800cd20:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	2200      	movs	r2, #0
 800cd26:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	2200      	movs	r2, #0
 800cd2c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	4a45      	ldr	r2, [pc, #276]	@ (800ce48 <netif_add+0x188>)
 800cd32:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	2200      	movs	r2, #0
 800cd38:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	2200      	movs	r2, #0
 800cd3e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	2200      	movs	r2, #0
 800cd46:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	6a3a      	ldr	r2, [r7, #32]
 800cd4c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800cd4e:	4b3f      	ldr	r3, [pc, #252]	@ (800ce4c <netif_add+0x18c>)
 800cd50:	781a      	ldrb	r2, [r3, #0]
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cd5c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800cd5e:	683b      	ldr	r3, [r7, #0]
 800cd60:	687a      	ldr	r2, [r7, #4]
 800cd62:	68b9      	ldr	r1, [r7, #8]
 800cd64:	68f8      	ldr	r0, [r7, #12]
 800cd66:	f000 f913 	bl	800cf90 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800cd6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd6c:	68f8      	ldr	r0, [r7, #12]
 800cd6e:	4798      	blx	r3
 800cd70:	4603      	mov	r3, r0
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d001      	beq.n	800cd7a <netif_add+0xba>
    return NULL;
 800cd76:	2300      	movs	r3, #0
 800cd78:	e058      	b.n	800ce2c <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800cd80:	2bff      	cmp	r3, #255	@ 0xff
 800cd82:	d103      	bne.n	800cd8c <netif_add+0xcc>
        netif->num = 0;
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	2200      	movs	r2, #0
 800cd88:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 800cd8c:	2300      	movs	r3, #0
 800cd8e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800cd90:	4b2f      	ldr	r3, [pc, #188]	@ (800ce50 <netif_add+0x190>)
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	617b      	str	r3, [r7, #20]
 800cd96:	e02b      	b.n	800cdf0 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800cd98:	697a      	ldr	r2, [r7, #20]
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	429a      	cmp	r2, r3
 800cd9e:	d106      	bne.n	800cdae <netif_add+0xee>
 800cda0:	4b24      	ldr	r3, [pc, #144]	@ (800ce34 <netif_add+0x174>)
 800cda2:	f240 128b 	movw	r2, #395	@ 0x18b
 800cda6:	492b      	ldr	r1, [pc, #172]	@ (800ce54 <netif_add+0x194>)
 800cda8:	4824      	ldr	r0, [pc, #144]	@ (800ce3c <netif_add+0x17c>)
 800cdaa:	f00a fc17 	bl	80175dc <iprintf>
        num_netifs++;
 800cdae:	693b      	ldr	r3, [r7, #16]
 800cdb0:	3301      	adds	r3, #1
 800cdb2:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800cdb4:	693b      	ldr	r3, [r7, #16]
 800cdb6:	2bff      	cmp	r3, #255	@ 0xff
 800cdb8:	dd06      	ble.n	800cdc8 <netif_add+0x108>
 800cdba:	4b1e      	ldr	r3, [pc, #120]	@ (800ce34 <netif_add+0x174>)
 800cdbc:	f240 128d 	movw	r2, #397	@ 0x18d
 800cdc0:	4925      	ldr	r1, [pc, #148]	@ (800ce58 <netif_add+0x198>)
 800cdc2:	481e      	ldr	r0, [pc, #120]	@ (800ce3c <netif_add+0x17c>)
 800cdc4:	f00a fc0a 	bl	80175dc <iprintf>
        if (netif2->num == netif->num) {
 800cdc8:	697b      	ldr	r3, [r7, #20]
 800cdca:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800cdd4:	429a      	cmp	r2, r3
 800cdd6:	d108      	bne.n	800cdea <netif_add+0x12a>
          netif->num++;
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800cdde:	3301      	adds	r3, #1
 800cde0:	b2da      	uxtb	r2, r3
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 800cde8:	e005      	b.n	800cdf6 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800cdea:	697b      	ldr	r3, [r7, #20]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	617b      	str	r3, [r7, #20]
 800cdf0:	697b      	ldr	r3, [r7, #20]
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d1d0      	bne.n	800cd98 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800cdf6:	697b      	ldr	r3, [r7, #20]
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d1be      	bne.n	800cd7a <netif_add+0xba>
  }
  if (netif->num == 254) {
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ce02:	2bfe      	cmp	r3, #254	@ 0xfe
 800ce04:	d103      	bne.n	800ce0e <netif_add+0x14e>
    netif_num = 0;
 800ce06:	4b11      	ldr	r3, [pc, #68]	@ (800ce4c <netif_add+0x18c>)
 800ce08:	2200      	movs	r2, #0
 800ce0a:	701a      	strb	r2, [r3, #0]
 800ce0c:	e006      	b.n	800ce1c <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ce14:	3301      	adds	r3, #1
 800ce16:	b2da      	uxtb	r2, r3
 800ce18:	4b0c      	ldr	r3, [pc, #48]	@ (800ce4c <netif_add+0x18c>)
 800ce1a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800ce1c:	4b0c      	ldr	r3, [pc, #48]	@ (800ce50 <netif_add+0x190>)
 800ce1e:	681a      	ldr	r2, [r3, #0]
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800ce24:	4a0a      	ldr	r2, [pc, #40]	@ (800ce50 <netif_add+0x190>)
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800ce2a:	68fb      	ldr	r3, [r7, #12]
}
 800ce2c:	4618      	mov	r0, r3
 800ce2e:	3718      	adds	r7, #24
 800ce30:	46bd      	mov	sp, r7
 800ce32:	bd80      	pop	{r7, pc}
 800ce34:	080206a4 	.word	0x080206a4
 800ce38:	08020738 	.word	0x08020738
 800ce3c:	080206f4 	.word	0x080206f4
 800ce40:	08020754 	.word	0x08020754
 800ce44:	08022de4 	.word	0x08022de4
 800ce48:	0800d26b 	.word	0x0800d26b
 800ce4c:	200151b4 	.word	0x200151b4
 800ce50:	200151ac 	.word	0x200151ac
 800ce54:	08020778 	.word	0x08020778
 800ce58:	0802078c 	.word	0x0802078c

0800ce5c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ce5c:	b580      	push	{r7, lr}
 800ce5e:	b082      	sub	sp, #8
 800ce60:	af00      	add	r7, sp, #0
 800ce62:	6078      	str	r0, [r7, #4]
 800ce64:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800ce66:	6839      	ldr	r1, [r7, #0]
 800ce68:	6878      	ldr	r0, [r7, #4]
 800ce6a:	f002 fcaf 	bl	800f7cc <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800ce6e:	6839      	ldr	r1, [r7, #0]
 800ce70:	6878      	ldr	r0, [r7, #4]
 800ce72:	f007 f91f 	bl	80140b4 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800ce76:	bf00      	nop
 800ce78:	3708      	adds	r7, #8
 800ce7a:	46bd      	mov	sp, r7
 800ce7c:	bd80      	pop	{r7, pc}
	...

0800ce80 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800ce80:	b580      	push	{r7, lr}
 800ce82:	b086      	sub	sp, #24
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	60f8      	str	r0, [r7, #12]
 800ce88:	60b9      	str	r1, [r7, #8]
 800ce8a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800ce8c:	68bb      	ldr	r3, [r7, #8]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d106      	bne.n	800cea0 <netif_do_set_ipaddr+0x20>
 800ce92:	4b1d      	ldr	r3, [pc, #116]	@ (800cf08 <netif_do_set_ipaddr+0x88>)
 800ce94:	f240 12cb 	movw	r2, #459	@ 0x1cb
 800ce98:	491c      	ldr	r1, [pc, #112]	@ (800cf0c <netif_do_set_ipaddr+0x8c>)
 800ce9a:	481d      	ldr	r0, [pc, #116]	@ (800cf10 <netif_do_set_ipaddr+0x90>)
 800ce9c:	f00a fb9e 	bl	80175dc <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d106      	bne.n	800ceb4 <netif_do_set_ipaddr+0x34>
 800cea6:	4b18      	ldr	r3, [pc, #96]	@ (800cf08 <netif_do_set_ipaddr+0x88>)
 800cea8:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800ceac:	4917      	ldr	r1, [pc, #92]	@ (800cf0c <netif_do_set_ipaddr+0x8c>)
 800ceae:	4818      	ldr	r0, [pc, #96]	@ (800cf10 <netif_do_set_ipaddr+0x90>)
 800ceb0:	f00a fb94 	bl	80175dc <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800ceb4:	68bb      	ldr	r3, [r7, #8]
 800ceb6:	681a      	ldr	r2, [r3, #0]
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	3304      	adds	r3, #4
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	429a      	cmp	r2, r3
 800cec0:	d01c      	beq.n	800cefc <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800cec2:	68bb      	ldr	r3, [r7, #8]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	3304      	adds	r3, #4
 800cecc:	681a      	ldr	r2, [r3, #0]
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800ced2:	f107 0314 	add.w	r3, r7, #20
 800ced6:	4619      	mov	r1, r3
 800ced8:	6878      	ldr	r0, [r7, #4]
 800ceda:	f7ff ffbf 	bl	800ce5c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800cede:	68bb      	ldr	r3, [r7, #8]
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d002      	beq.n	800ceea <netif_do_set_ipaddr+0x6a>
 800cee4:	68bb      	ldr	r3, [r7, #8]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	e000      	b.n	800ceec <netif_do_set_ipaddr+0x6c>
 800ceea:	2300      	movs	r3, #0
 800ceec:	68fa      	ldr	r2, [r7, #12]
 800ceee:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800cef0:	2101      	movs	r1, #1
 800cef2:	68f8      	ldr	r0, [r7, #12]
 800cef4:	f000 f8d2 	bl	800d09c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800cef8:	2301      	movs	r3, #1
 800cefa:	e000      	b.n	800cefe <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800cefc:	2300      	movs	r3, #0
}
 800cefe:	4618      	mov	r0, r3
 800cf00:	3718      	adds	r7, #24
 800cf02:	46bd      	mov	sp, r7
 800cf04:	bd80      	pop	{r7, pc}
 800cf06:	bf00      	nop
 800cf08:	080206a4 	.word	0x080206a4
 800cf0c:	080207bc 	.word	0x080207bc
 800cf10:	080206f4 	.word	0x080206f4

0800cf14 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800cf14:	b480      	push	{r7}
 800cf16:	b085      	sub	sp, #20
 800cf18:	af00      	add	r7, sp, #0
 800cf1a:	60f8      	str	r0, [r7, #12]
 800cf1c:	60b9      	str	r1, [r7, #8]
 800cf1e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800cf20:	68bb      	ldr	r3, [r7, #8]
 800cf22:	681a      	ldr	r2, [r3, #0]
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	3308      	adds	r3, #8
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	429a      	cmp	r2, r3
 800cf2c:	d00a      	beq.n	800cf44 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800cf2e:	68bb      	ldr	r3, [r7, #8]
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d002      	beq.n	800cf3a <netif_do_set_netmask+0x26>
 800cf34:	68bb      	ldr	r3, [r7, #8]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	e000      	b.n	800cf3c <netif_do_set_netmask+0x28>
 800cf3a:	2300      	movs	r3, #0
 800cf3c:	68fa      	ldr	r2, [r7, #12]
 800cf3e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800cf40:	2301      	movs	r3, #1
 800cf42:	e000      	b.n	800cf46 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800cf44:	2300      	movs	r3, #0
}
 800cf46:	4618      	mov	r0, r3
 800cf48:	3714      	adds	r7, #20
 800cf4a:	46bd      	mov	sp, r7
 800cf4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf50:	4770      	bx	lr

0800cf52 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800cf52:	b480      	push	{r7}
 800cf54:	b085      	sub	sp, #20
 800cf56:	af00      	add	r7, sp, #0
 800cf58:	60f8      	str	r0, [r7, #12]
 800cf5a:	60b9      	str	r1, [r7, #8]
 800cf5c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800cf5e:	68bb      	ldr	r3, [r7, #8]
 800cf60:	681a      	ldr	r2, [r3, #0]
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	330c      	adds	r3, #12
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	429a      	cmp	r2, r3
 800cf6a:	d00a      	beq.n	800cf82 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800cf6c:	68bb      	ldr	r3, [r7, #8]
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d002      	beq.n	800cf78 <netif_do_set_gw+0x26>
 800cf72:	68bb      	ldr	r3, [r7, #8]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	e000      	b.n	800cf7a <netif_do_set_gw+0x28>
 800cf78:	2300      	movs	r3, #0
 800cf7a:	68fa      	ldr	r2, [r7, #12]
 800cf7c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800cf7e:	2301      	movs	r3, #1
 800cf80:	e000      	b.n	800cf84 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800cf82:	2300      	movs	r3, #0
}
 800cf84:	4618      	mov	r0, r3
 800cf86:	3714      	adds	r7, #20
 800cf88:	46bd      	mov	sp, r7
 800cf8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf8e:	4770      	bx	lr

0800cf90 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800cf90:	b580      	push	{r7, lr}
 800cf92:	b088      	sub	sp, #32
 800cf94:	af00      	add	r7, sp, #0
 800cf96:	60f8      	str	r0, [r7, #12]
 800cf98:	60b9      	str	r1, [r7, #8]
 800cf9a:	607a      	str	r2, [r7, #4]
 800cf9c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800cf9e:	2300      	movs	r3, #0
 800cfa0:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800cfa2:	2300      	movs	r3, #0
 800cfa4:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800cfa6:	68bb      	ldr	r3, [r7, #8]
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d101      	bne.n	800cfb0 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800cfac:	4b1c      	ldr	r3, [pc, #112]	@ (800d020 <netif_set_addr+0x90>)
 800cfae:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d101      	bne.n	800cfba <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800cfb6:	4b1a      	ldr	r3, [pc, #104]	@ (800d020 <netif_set_addr+0x90>)
 800cfb8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800cfba:	683b      	ldr	r3, [r7, #0]
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d101      	bne.n	800cfc4 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800cfc0:	4b17      	ldr	r3, [pc, #92]	@ (800d020 <netif_set_addr+0x90>)
 800cfc2:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800cfc4:	68bb      	ldr	r3, [r7, #8]
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d003      	beq.n	800cfd2 <netif_set_addr+0x42>
 800cfca:	68bb      	ldr	r3, [r7, #8]
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d101      	bne.n	800cfd6 <netif_set_addr+0x46>
 800cfd2:	2301      	movs	r3, #1
 800cfd4:	e000      	b.n	800cfd8 <netif_set_addr+0x48>
 800cfd6:	2300      	movs	r3, #0
 800cfd8:	617b      	str	r3, [r7, #20]
  if (remove) {
 800cfda:	697b      	ldr	r3, [r7, #20]
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d006      	beq.n	800cfee <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800cfe0:	f107 0310 	add.w	r3, r7, #16
 800cfe4:	461a      	mov	r2, r3
 800cfe6:	68b9      	ldr	r1, [r7, #8]
 800cfe8:	68f8      	ldr	r0, [r7, #12]
 800cfea:	f7ff ff49 	bl	800ce80 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800cfee:	69fa      	ldr	r2, [r7, #28]
 800cff0:	6879      	ldr	r1, [r7, #4]
 800cff2:	68f8      	ldr	r0, [r7, #12]
 800cff4:	f7ff ff8e 	bl	800cf14 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800cff8:	69ba      	ldr	r2, [r7, #24]
 800cffa:	6839      	ldr	r1, [r7, #0]
 800cffc:	68f8      	ldr	r0, [r7, #12]
 800cffe:	f7ff ffa8 	bl	800cf52 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800d002:	697b      	ldr	r3, [r7, #20]
 800d004:	2b00      	cmp	r3, #0
 800d006:	d106      	bne.n	800d016 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800d008:	f107 0310 	add.w	r3, r7, #16
 800d00c:	461a      	mov	r2, r3
 800d00e:	68b9      	ldr	r1, [r7, #8]
 800d010:	68f8      	ldr	r0, [r7, #12]
 800d012:	f7ff ff35 	bl	800ce80 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800d016:	bf00      	nop
 800d018:	3720      	adds	r7, #32
 800d01a:	46bd      	mov	sp, r7
 800d01c:	bd80      	pop	{r7, pc}
 800d01e:	bf00      	nop
 800d020:	08022de4 	.word	0x08022de4

0800d024 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800d024:	b480      	push	{r7}
 800d026:	b083      	sub	sp, #12
 800d028:	af00      	add	r7, sp, #0
 800d02a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800d02c:	4a04      	ldr	r2, [pc, #16]	@ (800d040 <netif_set_default+0x1c>)
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800d032:	bf00      	nop
 800d034:	370c      	adds	r7, #12
 800d036:	46bd      	mov	sp, r7
 800d038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d03c:	4770      	bx	lr
 800d03e:	bf00      	nop
 800d040:	200151b0 	.word	0x200151b0

0800d044 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800d044:	b580      	push	{r7, lr}
 800d046:	b082      	sub	sp, #8
 800d048:	af00      	add	r7, sp, #0
 800d04a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d107      	bne.n	800d062 <netif_set_up+0x1e>
 800d052:	4b0f      	ldr	r3, [pc, #60]	@ (800d090 <netif_set_up+0x4c>)
 800d054:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800d058:	490e      	ldr	r1, [pc, #56]	@ (800d094 <netif_set_up+0x50>)
 800d05a:	480f      	ldr	r0, [pc, #60]	@ (800d098 <netif_set_up+0x54>)
 800d05c:	f00a fabe 	bl	80175dc <iprintf>
 800d060:	e013      	b.n	800d08a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d068:	f003 0301 	and.w	r3, r3, #1
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d10c      	bne.n	800d08a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d076:	f043 0301 	orr.w	r3, r3, #1
 800d07a:	b2da      	uxtb	r2, r3
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800d082:	2103      	movs	r1, #3
 800d084:	6878      	ldr	r0, [r7, #4]
 800d086:	f000 f809 	bl	800d09c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800d08a:	3708      	adds	r7, #8
 800d08c:	46bd      	mov	sp, r7
 800d08e:	bd80      	pop	{r7, pc}
 800d090:	080206a4 	.word	0x080206a4
 800d094:	0802082c 	.word	0x0802082c
 800d098:	080206f4 	.word	0x080206f4

0800d09c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800d09c:	b580      	push	{r7, lr}
 800d09e:	b082      	sub	sp, #8
 800d0a0:	af00      	add	r7, sp, #0
 800d0a2:	6078      	str	r0, [r7, #4]
 800d0a4:	460b      	mov	r3, r1
 800d0a6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d106      	bne.n	800d0bc <netif_issue_reports+0x20>
 800d0ae:	4b18      	ldr	r3, [pc, #96]	@ (800d110 <netif_issue_reports+0x74>)
 800d0b0:	f240 326d 	movw	r2, #877	@ 0x36d
 800d0b4:	4917      	ldr	r1, [pc, #92]	@ (800d114 <netif_issue_reports+0x78>)
 800d0b6:	4818      	ldr	r0, [pc, #96]	@ (800d118 <netif_issue_reports+0x7c>)
 800d0b8:	f00a fa90 	bl	80175dc <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d0c2:	f003 0304 	and.w	r3, r3, #4
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d01e      	beq.n	800d108 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d0d0:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d017      	beq.n	800d108 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800d0d8:	78fb      	ldrb	r3, [r7, #3]
 800d0da:	f003 0301 	and.w	r3, r3, #1
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d013      	beq.n	800d10a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	3304      	adds	r3, #4
 800d0e6:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d00e      	beq.n	800d10a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d0f2:	f003 0308 	and.w	r3, r3, #8
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d007      	beq.n	800d10a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	3304      	adds	r3, #4
 800d0fe:	4619      	mov	r1, r3
 800d100:	6878      	ldr	r0, [r7, #4]
 800d102:	f007 ff41 	bl	8014f88 <etharp_request>
 800d106:	e000      	b.n	800d10a <netif_issue_reports+0x6e>
    return;
 800d108:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800d10a:	3708      	adds	r7, #8
 800d10c:	46bd      	mov	sp, r7
 800d10e:	bd80      	pop	{r7, pc}
 800d110:	080206a4 	.word	0x080206a4
 800d114:	08020848 	.word	0x08020848
 800d118:	080206f4 	.word	0x080206f4

0800d11c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800d11c:	b580      	push	{r7, lr}
 800d11e:	b082      	sub	sp, #8
 800d120:	af00      	add	r7, sp, #0
 800d122:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	2b00      	cmp	r3, #0
 800d128:	d107      	bne.n	800d13a <netif_set_down+0x1e>
 800d12a:	4b12      	ldr	r3, [pc, #72]	@ (800d174 <netif_set_down+0x58>)
 800d12c:	f240 329b 	movw	r2, #923	@ 0x39b
 800d130:	4911      	ldr	r1, [pc, #68]	@ (800d178 <netif_set_down+0x5c>)
 800d132:	4812      	ldr	r0, [pc, #72]	@ (800d17c <netif_set_down+0x60>)
 800d134:	f00a fa52 	bl	80175dc <iprintf>
 800d138:	e019      	b.n	800d16e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d140:	f003 0301 	and.w	r3, r3, #1
 800d144:	2b00      	cmp	r3, #0
 800d146:	d012      	beq.n	800d16e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d14e:	f023 0301 	bic.w	r3, r3, #1
 800d152:	b2da      	uxtb	r2, r3
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d160:	f003 0308 	and.w	r3, r3, #8
 800d164:	2b00      	cmp	r3, #0
 800d166:	d002      	beq.n	800d16e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800d168:	6878      	ldr	r0, [r7, #4]
 800d16a:	f007 facb 	bl	8014704 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800d16e:	3708      	adds	r7, #8
 800d170:	46bd      	mov	sp, r7
 800d172:	bd80      	pop	{r7, pc}
 800d174:	080206a4 	.word	0x080206a4
 800d178:	0802086c 	.word	0x0802086c
 800d17c:	080206f4 	.word	0x080206f4

0800d180 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800d180:	b580      	push	{r7, lr}
 800d182:	b082      	sub	sp, #8
 800d184:	af00      	add	r7, sp, #0
 800d186:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d107      	bne.n	800d19e <netif_set_link_up+0x1e>
 800d18e:	4b13      	ldr	r3, [pc, #76]	@ (800d1dc <netif_set_link_up+0x5c>)
 800d190:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800d194:	4912      	ldr	r1, [pc, #72]	@ (800d1e0 <netif_set_link_up+0x60>)
 800d196:	4813      	ldr	r0, [pc, #76]	@ (800d1e4 <netif_set_link_up+0x64>)
 800d198:	f00a fa20 	bl	80175dc <iprintf>
 800d19c:	e01b      	b.n	800d1d6 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d1a4:	f003 0304 	and.w	r3, r3, #4
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d114      	bne.n	800d1d6 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d1b2:	f043 0304 	orr.w	r3, r3, #4
 800d1b6:	b2da      	uxtb	r2, r3
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800d1be:	2103      	movs	r1, #3
 800d1c0:	6878      	ldr	r0, [r7, #4]
 800d1c2:	f7ff ff6b 	bl	800d09c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	69db      	ldr	r3, [r3, #28]
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d003      	beq.n	800d1d6 <netif_set_link_up+0x56>
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	69db      	ldr	r3, [r3, #28]
 800d1d2:	6878      	ldr	r0, [r7, #4]
 800d1d4:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800d1d6:	3708      	adds	r7, #8
 800d1d8:	46bd      	mov	sp, r7
 800d1da:	bd80      	pop	{r7, pc}
 800d1dc:	080206a4 	.word	0x080206a4
 800d1e0:	0802088c 	.word	0x0802088c
 800d1e4:	080206f4 	.word	0x080206f4

0800d1e8 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800d1e8:	b580      	push	{r7, lr}
 800d1ea:	b082      	sub	sp, #8
 800d1ec:	af00      	add	r7, sp, #0
 800d1ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d107      	bne.n	800d206 <netif_set_link_down+0x1e>
 800d1f6:	4b11      	ldr	r3, [pc, #68]	@ (800d23c <netif_set_link_down+0x54>)
 800d1f8:	f240 4206 	movw	r2, #1030	@ 0x406
 800d1fc:	4910      	ldr	r1, [pc, #64]	@ (800d240 <netif_set_link_down+0x58>)
 800d1fe:	4811      	ldr	r0, [pc, #68]	@ (800d244 <netif_set_link_down+0x5c>)
 800d200:	f00a f9ec 	bl	80175dc <iprintf>
 800d204:	e017      	b.n	800d236 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d20c:	f003 0304 	and.w	r3, r3, #4
 800d210:	2b00      	cmp	r3, #0
 800d212:	d010      	beq.n	800d236 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d21a:	f023 0304 	bic.w	r3, r3, #4
 800d21e:	b2da      	uxtb	r2, r3
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	69db      	ldr	r3, [r3, #28]
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d003      	beq.n	800d236 <netif_set_link_down+0x4e>
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	69db      	ldr	r3, [r3, #28]
 800d232:	6878      	ldr	r0, [r7, #4]
 800d234:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800d236:	3708      	adds	r7, #8
 800d238:	46bd      	mov	sp, r7
 800d23a:	bd80      	pop	{r7, pc}
 800d23c:	080206a4 	.word	0x080206a4
 800d240:	080208b0 	.word	0x080208b0
 800d244:	080206f4 	.word	0x080206f4

0800d248 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800d248:	b480      	push	{r7}
 800d24a:	b083      	sub	sp, #12
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	6078      	str	r0, [r7, #4]
 800d250:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	2b00      	cmp	r3, #0
 800d256:	d002      	beq.n	800d25e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	683a      	ldr	r2, [r7, #0]
 800d25c:	61da      	str	r2, [r3, #28]
  }
}
 800d25e:	bf00      	nop
 800d260:	370c      	adds	r7, #12
 800d262:	46bd      	mov	sp, r7
 800d264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d268:	4770      	bx	lr

0800d26a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800d26a:	b480      	push	{r7}
 800d26c:	b085      	sub	sp, #20
 800d26e:	af00      	add	r7, sp, #0
 800d270:	60f8      	str	r0, [r7, #12]
 800d272:	60b9      	str	r1, [r7, #8]
 800d274:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800d276:	f06f 030b 	mvn.w	r3, #11
}
 800d27a:	4618      	mov	r0, r3
 800d27c:	3714      	adds	r7, #20
 800d27e:	46bd      	mov	sp, r7
 800d280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d284:	4770      	bx	lr
	...

0800d288 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800d288:	b480      	push	{r7}
 800d28a:	b085      	sub	sp, #20
 800d28c:	af00      	add	r7, sp, #0
 800d28e:	4603      	mov	r3, r0
 800d290:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800d292:	79fb      	ldrb	r3, [r7, #7]
 800d294:	2b00      	cmp	r3, #0
 800d296:	d013      	beq.n	800d2c0 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800d298:	4b0d      	ldr	r3, [pc, #52]	@ (800d2d0 <netif_get_by_index+0x48>)
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	60fb      	str	r3, [r7, #12]
 800d29e:	e00c      	b.n	800d2ba <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d2a6:	3301      	adds	r3, #1
 800d2a8:	b2db      	uxtb	r3, r3
 800d2aa:	79fa      	ldrb	r2, [r7, #7]
 800d2ac:	429a      	cmp	r2, r3
 800d2ae:	d101      	bne.n	800d2b4 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	e006      	b.n	800d2c2 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	60fb      	str	r3, [r7, #12]
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d1ef      	bne.n	800d2a0 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800d2c0:	2300      	movs	r3, #0
}
 800d2c2:	4618      	mov	r0, r3
 800d2c4:	3714      	adds	r7, #20
 800d2c6:	46bd      	mov	sp, r7
 800d2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2cc:	4770      	bx	lr
 800d2ce:	bf00      	nop
 800d2d0:	200151ac 	.word	0x200151ac

0800d2d4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800d2d4:	b580      	push	{r7, lr}
 800d2d6:	b082      	sub	sp, #8
 800d2d8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800d2da:	4b0c      	ldr	r3, [pc, #48]	@ (800d30c <pbuf_free_ooseq+0x38>)
 800d2dc:	2200      	movs	r2, #0
 800d2de:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800d2e0:	4b0b      	ldr	r3, [pc, #44]	@ (800d310 <pbuf_free_ooseq+0x3c>)
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	607b      	str	r3, [r7, #4]
 800d2e6:	e00a      	b.n	800d2fe <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d003      	beq.n	800d2f8 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800d2f0:	6878      	ldr	r0, [r7, #4]
 800d2f2:	f002 faa9 	bl	800f848 <tcp_free_ooseq>
      return;
 800d2f6:	e005      	b.n	800d304 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	68db      	ldr	r3, [r3, #12]
 800d2fc:	607b      	str	r3, [r7, #4]
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	2b00      	cmp	r3, #0
 800d302:	d1f1      	bne.n	800d2e8 <pbuf_free_ooseq+0x14>
    }
  }
}
 800d304:	3708      	adds	r7, #8
 800d306:	46bd      	mov	sp, r7
 800d308:	bd80      	pop	{r7, pc}
 800d30a:	bf00      	nop
 800d30c:	200151b5 	.word	0x200151b5
 800d310:	200151c4 	.word	0x200151c4

0800d314 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800d314:	b480      	push	{r7}
 800d316:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800d318:	4b03      	ldr	r3, [pc, #12]	@ (800d328 <pbuf_pool_is_empty+0x14>)
 800d31a:	2201      	movs	r2, #1
 800d31c:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800d31e:	bf00      	nop
 800d320:	46bd      	mov	sp, r7
 800d322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d326:	4770      	bx	lr
 800d328:	200151b5 	.word	0x200151b5

0800d32c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800d32c:	b480      	push	{r7}
 800d32e:	b085      	sub	sp, #20
 800d330:	af00      	add	r7, sp, #0
 800d332:	60f8      	str	r0, [r7, #12]
 800d334:	60b9      	str	r1, [r7, #8]
 800d336:	4611      	mov	r1, r2
 800d338:	461a      	mov	r2, r3
 800d33a:	460b      	mov	r3, r1
 800d33c:	80fb      	strh	r3, [r7, #6]
 800d33e:	4613      	mov	r3, r2
 800d340:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	2200      	movs	r2, #0
 800d346:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	68ba      	ldr	r2, [r7, #8]
 800d34c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	88fa      	ldrh	r2, [r7, #6]
 800d352:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	88ba      	ldrh	r2, [r7, #4]
 800d358:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800d35a:	8b3b      	ldrh	r3, [r7, #24]
 800d35c:	b2da      	uxtb	r2, r3
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	7f3a      	ldrb	r2, [r7, #28]
 800d366:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	2201      	movs	r2, #1
 800d36c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	2200      	movs	r2, #0
 800d372:	73da      	strb	r2, [r3, #15]
}
 800d374:	bf00      	nop
 800d376:	3714      	adds	r7, #20
 800d378:	46bd      	mov	sp, r7
 800d37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d37e:	4770      	bx	lr

0800d380 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800d380:	b580      	push	{r7, lr}
 800d382:	b08c      	sub	sp, #48	@ 0x30
 800d384:	af02      	add	r7, sp, #8
 800d386:	4603      	mov	r3, r0
 800d388:	71fb      	strb	r3, [r7, #7]
 800d38a:	460b      	mov	r3, r1
 800d38c:	80bb      	strh	r3, [r7, #4]
 800d38e:	4613      	mov	r3, r2
 800d390:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800d392:	79fb      	ldrb	r3, [r7, #7]
 800d394:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800d396:	887b      	ldrh	r3, [r7, #2]
 800d398:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800d39c:	d07f      	beq.n	800d49e <pbuf_alloc+0x11e>
 800d39e:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800d3a2:	f300 80c8 	bgt.w	800d536 <pbuf_alloc+0x1b6>
 800d3a6:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800d3aa:	d010      	beq.n	800d3ce <pbuf_alloc+0x4e>
 800d3ac:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800d3b0:	f300 80c1 	bgt.w	800d536 <pbuf_alloc+0x1b6>
 800d3b4:	2b01      	cmp	r3, #1
 800d3b6:	d002      	beq.n	800d3be <pbuf_alloc+0x3e>
 800d3b8:	2b41      	cmp	r3, #65	@ 0x41
 800d3ba:	f040 80bc 	bne.w	800d536 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800d3be:	887a      	ldrh	r2, [r7, #2]
 800d3c0:	88bb      	ldrh	r3, [r7, #4]
 800d3c2:	4619      	mov	r1, r3
 800d3c4:	2000      	movs	r0, #0
 800d3c6:	f000 f8d1 	bl	800d56c <pbuf_alloc_reference>
 800d3ca:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 800d3cc:	e0bd      	b.n	800d54a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800d3ce:	2300      	movs	r3, #0
 800d3d0:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800d3d2:	2300      	movs	r3, #0
 800d3d4:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800d3d6:	88bb      	ldrh	r3, [r7, #4]
 800d3d8:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800d3da:	2008      	movs	r0, #8
 800d3dc:	f7ff fbce 	bl	800cb7c <memp_malloc>
 800d3e0:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800d3e2:	693b      	ldr	r3, [r7, #16]
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d109      	bne.n	800d3fc <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800d3e8:	f7ff ff94 	bl	800d314 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800d3ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d002      	beq.n	800d3f8 <pbuf_alloc+0x78>
            pbuf_free(p);
 800d3f2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d3f4:	f000 faa8 	bl	800d948 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800d3f8:	2300      	movs	r3, #0
 800d3fa:	e0a7      	b.n	800d54c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800d3fc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d3fe:	3303      	adds	r3, #3
 800d400:	b29b      	uxth	r3, r3
 800d402:	f023 0303 	bic.w	r3, r3, #3
 800d406:	b29b      	uxth	r3, r3
 800d408:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 800d40c:	b29b      	uxth	r3, r3
 800d40e:	8b7a      	ldrh	r2, [r7, #26]
 800d410:	4293      	cmp	r3, r2
 800d412:	bf28      	it	cs
 800d414:	4613      	movcs	r3, r2
 800d416:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800d418:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d41a:	3310      	adds	r3, #16
 800d41c:	693a      	ldr	r2, [r7, #16]
 800d41e:	4413      	add	r3, r2
 800d420:	3303      	adds	r3, #3
 800d422:	f023 0303 	bic.w	r3, r3, #3
 800d426:	4618      	mov	r0, r3
 800d428:	89f9      	ldrh	r1, [r7, #14]
 800d42a:	8b7a      	ldrh	r2, [r7, #26]
 800d42c:	2300      	movs	r3, #0
 800d42e:	9301      	str	r3, [sp, #4]
 800d430:	887b      	ldrh	r3, [r7, #2]
 800d432:	9300      	str	r3, [sp, #0]
 800d434:	460b      	mov	r3, r1
 800d436:	4601      	mov	r1, r0
 800d438:	6938      	ldr	r0, [r7, #16]
 800d43a:	f7ff ff77 	bl	800d32c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800d43e:	693b      	ldr	r3, [r7, #16]
 800d440:	685b      	ldr	r3, [r3, #4]
 800d442:	f003 0303 	and.w	r3, r3, #3
 800d446:	2b00      	cmp	r3, #0
 800d448:	d006      	beq.n	800d458 <pbuf_alloc+0xd8>
 800d44a:	4b42      	ldr	r3, [pc, #264]	@ (800d554 <pbuf_alloc+0x1d4>)
 800d44c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d450:	4941      	ldr	r1, [pc, #260]	@ (800d558 <pbuf_alloc+0x1d8>)
 800d452:	4842      	ldr	r0, [pc, #264]	@ (800d55c <pbuf_alloc+0x1dc>)
 800d454:	f00a f8c2 	bl	80175dc <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800d458:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d45a:	3303      	adds	r3, #3
 800d45c:	f023 0303 	bic.w	r3, r3, #3
 800d460:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 800d464:	d106      	bne.n	800d474 <pbuf_alloc+0xf4>
 800d466:	4b3b      	ldr	r3, [pc, #236]	@ (800d554 <pbuf_alloc+0x1d4>)
 800d468:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800d46c:	493c      	ldr	r1, [pc, #240]	@ (800d560 <pbuf_alloc+0x1e0>)
 800d46e:	483b      	ldr	r0, [pc, #236]	@ (800d55c <pbuf_alloc+0x1dc>)
 800d470:	f00a f8b4 	bl	80175dc <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800d474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d476:	2b00      	cmp	r3, #0
 800d478:	d102      	bne.n	800d480 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800d47a:	693b      	ldr	r3, [r7, #16]
 800d47c:	627b      	str	r3, [r7, #36]	@ 0x24
 800d47e:	e002      	b.n	800d486 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800d480:	69fb      	ldr	r3, [r7, #28]
 800d482:	693a      	ldr	r2, [r7, #16]
 800d484:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800d486:	693b      	ldr	r3, [r7, #16]
 800d488:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800d48a:	8b7a      	ldrh	r2, [r7, #26]
 800d48c:	89fb      	ldrh	r3, [r7, #14]
 800d48e:	1ad3      	subs	r3, r2, r3
 800d490:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800d492:	2300      	movs	r3, #0
 800d494:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800d496:	8b7b      	ldrh	r3, [r7, #26]
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d19e      	bne.n	800d3da <pbuf_alloc+0x5a>
      break;
 800d49c:	e055      	b.n	800d54a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800d49e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d4a0:	3303      	adds	r3, #3
 800d4a2:	b29b      	uxth	r3, r3
 800d4a4:	f023 0303 	bic.w	r3, r3, #3
 800d4a8:	b29a      	uxth	r2, r3
 800d4aa:	88bb      	ldrh	r3, [r7, #4]
 800d4ac:	3303      	adds	r3, #3
 800d4ae:	b29b      	uxth	r3, r3
 800d4b0:	f023 0303 	bic.w	r3, r3, #3
 800d4b4:	b29b      	uxth	r3, r3
 800d4b6:	4413      	add	r3, r2
 800d4b8:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800d4ba:	8b3b      	ldrh	r3, [r7, #24]
 800d4bc:	3310      	adds	r3, #16
 800d4be:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800d4c0:	8b3a      	ldrh	r2, [r7, #24]
 800d4c2:	88bb      	ldrh	r3, [r7, #4]
 800d4c4:	3303      	adds	r3, #3
 800d4c6:	f023 0303 	bic.w	r3, r3, #3
 800d4ca:	429a      	cmp	r2, r3
 800d4cc:	d306      	bcc.n	800d4dc <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800d4ce:	8afa      	ldrh	r2, [r7, #22]
 800d4d0:	88bb      	ldrh	r3, [r7, #4]
 800d4d2:	3303      	adds	r3, #3
 800d4d4:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800d4d8:	429a      	cmp	r2, r3
 800d4da:	d201      	bcs.n	800d4e0 <pbuf_alloc+0x160>
        return NULL;
 800d4dc:	2300      	movs	r3, #0
 800d4de:	e035      	b.n	800d54c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800d4e0:	8afb      	ldrh	r3, [r7, #22]
 800d4e2:	4618      	mov	r0, r3
 800d4e4:	f7ff f9ba 	bl	800c85c <mem_malloc>
 800d4e8:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800d4ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d101      	bne.n	800d4f4 <pbuf_alloc+0x174>
        return NULL;
 800d4f0:	2300      	movs	r3, #0
 800d4f2:	e02b      	b.n	800d54c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800d4f4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d4f6:	3310      	adds	r3, #16
 800d4f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d4fa:	4413      	add	r3, r2
 800d4fc:	3303      	adds	r3, #3
 800d4fe:	f023 0303 	bic.w	r3, r3, #3
 800d502:	4618      	mov	r0, r3
 800d504:	88b9      	ldrh	r1, [r7, #4]
 800d506:	88ba      	ldrh	r2, [r7, #4]
 800d508:	2300      	movs	r3, #0
 800d50a:	9301      	str	r3, [sp, #4]
 800d50c:	887b      	ldrh	r3, [r7, #2]
 800d50e:	9300      	str	r3, [sp, #0]
 800d510:	460b      	mov	r3, r1
 800d512:	4601      	mov	r1, r0
 800d514:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d516:	f7ff ff09 	bl	800d32c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800d51a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d51c:	685b      	ldr	r3, [r3, #4]
 800d51e:	f003 0303 	and.w	r3, r3, #3
 800d522:	2b00      	cmp	r3, #0
 800d524:	d010      	beq.n	800d548 <pbuf_alloc+0x1c8>
 800d526:	4b0b      	ldr	r3, [pc, #44]	@ (800d554 <pbuf_alloc+0x1d4>)
 800d528:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800d52c:	490d      	ldr	r1, [pc, #52]	@ (800d564 <pbuf_alloc+0x1e4>)
 800d52e:	480b      	ldr	r0, [pc, #44]	@ (800d55c <pbuf_alloc+0x1dc>)
 800d530:	f00a f854 	bl	80175dc <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800d534:	e008      	b.n	800d548 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800d536:	4b07      	ldr	r3, [pc, #28]	@ (800d554 <pbuf_alloc+0x1d4>)
 800d538:	f240 1227 	movw	r2, #295	@ 0x127
 800d53c:	490a      	ldr	r1, [pc, #40]	@ (800d568 <pbuf_alloc+0x1e8>)
 800d53e:	4807      	ldr	r0, [pc, #28]	@ (800d55c <pbuf_alloc+0x1dc>)
 800d540:	f00a f84c 	bl	80175dc <iprintf>
      return NULL;
 800d544:	2300      	movs	r3, #0
 800d546:	e001      	b.n	800d54c <pbuf_alloc+0x1cc>
      break;
 800d548:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800d54a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d54c:	4618      	mov	r0, r3
 800d54e:	3728      	adds	r7, #40	@ 0x28
 800d550:	46bd      	mov	sp, r7
 800d552:	bd80      	pop	{r7, pc}
 800d554:	080208d4 	.word	0x080208d4
 800d558:	08020904 	.word	0x08020904
 800d55c:	08020934 	.word	0x08020934
 800d560:	0802095c 	.word	0x0802095c
 800d564:	08020990 	.word	0x08020990
 800d568:	080209bc 	.word	0x080209bc

0800d56c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800d56c:	b580      	push	{r7, lr}
 800d56e:	b086      	sub	sp, #24
 800d570:	af02      	add	r7, sp, #8
 800d572:	6078      	str	r0, [r7, #4]
 800d574:	460b      	mov	r3, r1
 800d576:	807b      	strh	r3, [r7, #2]
 800d578:	4613      	mov	r3, r2
 800d57a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800d57c:	883b      	ldrh	r3, [r7, #0]
 800d57e:	2b41      	cmp	r3, #65	@ 0x41
 800d580:	d009      	beq.n	800d596 <pbuf_alloc_reference+0x2a>
 800d582:	883b      	ldrh	r3, [r7, #0]
 800d584:	2b01      	cmp	r3, #1
 800d586:	d006      	beq.n	800d596 <pbuf_alloc_reference+0x2a>
 800d588:	4b0f      	ldr	r3, [pc, #60]	@ (800d5c8 <pbuf_alloc_reference+0x5c>)
 800d58a:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800d58e:	490f      	ldr	r1, [pc, #60]	@ (800d5cc <pbuf_alloc_reference+0x60>)
 800d590:	480f      	ldr	r0, [pc, #60]	@ (800d5d0 <pbuf_alloc_reference+0x64>)
 800d592:	f00a f823 	bl	80175dc <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800d596:	2007      	movs	r0, #7
 800d598:	f7ff faf0 	bl	800cb7c <memp_malloc>
 800d59c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d101      	bne.n	800d5a8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800d5a4:	2300      	movs	r3, #0
 800d5a6:	e00b      	b.n	800d5c0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800d5a8:	8879      	ldrh	r1, [r7, #2]
 800d5aa:	887a      	ldrh	r2, [r7, #2]
 800d5ac:	2300      	movs	r3, #0
 800d5ae:	9301      	str	r3, [sp, #4]
 800d5b0:	883b      	ldrh	r3, [r7, #0]
 800d5b2:	9300      	str	r3, [sp, #0]
 800d5b4:	460b      	mov	r3, r1
 800d5b6:	6879      	ldr	r1, [r7, #4]
 800d5b8:	68f8      	ldr	r0, [r7, #12]
 800d5ba:	f7ff feb7 	bl	800d32c <pbuf_init_alloced_pbuf>
  return p;
 800d5be:	68fb      	ldr	r3, [r7, #12]
}
 800d5c0:	4618      	mov	r0, r3
 800d5c2:	3710      	adds	r7, #16
 800d5c4:	46bd      	mov	sp, r7
 800d5c6:	bd80      	pop	{r7, pc}
 800d5c8:	080208d4 	.word	0x080208d4
 800d5cc:	080209d8 	.word	0x080209d8
 800d5d0:	08020934 	.word	0x08020934

0800d5d4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800d5d4:	b580      	push	{r7, lr}
 800d5d6:	b088      	sub	sp, #32
 800d5d8:	af02      	add	r7, sp, #8
 800d5da:	607b      	str	r3, [r7, #4]
 800d5dc:	4603      	mov	r3, r0
 800d5de:	73fb      	strb	r3, [r7, #15]
 800d5e0:	460b      	mov	r3, r1
 800d5e2:	81bb      	strh	r3, [r7, #12]
 800d5e4:	4613      	mov	r3, r2
 800d5e6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800d5e8:	7bfb      	ldrb	r3, [r7, #15]
 800d5ea:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800d5ec:	8a7b      	ldrh	r3, [r7, #18]
 800d5ee:	3303      	adds	r3, #3
 800d5f0:	f023 0203 	bic.w	r2, r3, #3
 800d5f4:	89bb      	ldrh	r3, [r7, #12]
 800d5f6:	441a      	add	r2, r3
 800d5f8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d5fa:	429a      	cmp	r2, r3
 800d5fc:	d901      	bls.n	800d602 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800d5fe:	2300      	movs	r3, #0
 800d600:	e018      	b.n	800d634 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800d602:	6a3b      	ldr	r3, [r7, #32]
 800d604:	2b00      	cmp	r3, #0
 800d606:	d007      	beq.n	800d618 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800d608:	8a7b      	ldrh	r3, [r7, #18]
 800d60a:	3303      	adds	r3, #3
 800d60c:	f023 0303 	bic.w	r3, r3, #3
 800d610:	6a3a      	ldr	r2, [r7, #32]
 800d612:	4413      	add	r3, r2
 800d614:	617b      	str	r3, [r7, #20]
 800d616:	e001      	b.n	800d61c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800d618:	2300      	movs	r3, #0
 800d61a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800d61c:	6878      	ldr	r0, [r7, #4]
 800d61e:	89b9      	ldrh	r1, [r7, #12]
 800d620:	89ba      	ldrh	r2, [r7, #12]
 800d622:	2302      	movs	r3, #2
 800d624:	9301      	str	r3, [sp, #4]
 800d626:	897b      	ldrh	r3, [r7, #10]
 800d628:	9300      	str	r3, [sp, #0]
 800d62a:	460b      	mov	r3, r1
 800d62c:	6979      	ldr	r1, [r7, #20]
 800d62e:	f7ff fe7d 	bl	800d32c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800d632:	687b      	ldr	r3, [r7, #4]
}
 800d634:	4618      	mov	r0, r3
 800d636:	3718      	adds	r7, #24
 800d638:	46bd      	mov	sp, r7
 800d63a:	bd80      	pop	{r7, pc}

0800d63c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800d63c:	b580      	push	{r7, lr}
 800d63e:	b084      	sub	sp, #16
 800d640:	af00      	add	r7, sp, #0
 800d642:	6078      	str	r0, [r7, #4]
 800d644:	460b      	mov	r3, r1
 800d646:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d106      	bne.n	800d65c <pbuf_realloc+0x20>
 800d64e:	4b3a      	ldr	r3, [pc, #232]	@ (800d738 <pbuf_realloc+0xfc>)
 800d650:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800d654:	4939      	ldr	r1, [pc, #228]	@ (800d73c <pbuf_realloc+0x100>)
 800d656:	483a      	ldr	r0, [pc, #232]	@ (800d740 <pbuf_realloc+0x104>)
 800d658:	f009 ffc0 	bl	80175dc <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	891b      	ldrh	r3, [r3, #8]
 800d660:	887a      	ldrh	r2, [r7, #2]
 800d662:	429a      	cmp	r2, r3
 800d664:	d263      	bcs.n	800d72e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	891a      	ldrh	r2, [r3, #8]
 800d66a:	887b      	ldrh	r3, [r7, #2]
 800d66c:	1ad3      	subs	r3, r2, r3
 800d66e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800d670:	887b      	ldrh	r3, [r7, #2]
 800d672:	817b      	strh	r3, [r7, #10]
  q = p;
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800d678:	e018      	b.n	800d6ac <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	895b      	ldrh	r3, [r3, #10]
 800d67e:	897a      	ldrh	r2, [r7, #10]
 800d680:	1ad3      	subs	r3, r2, r3
 800d682:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	891a      	ldrh	r2, [r3, #8]
 800d688:	893b      	ldrh	r3, [r7, #8]
 800d68a:	1ad3      	subs	r3, r2, r3
 800d68c:	b29a      	uxth	r2, r3
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d106      	bne.n	800d6ac <pbuf_realloc+0x70>
 800d69e:	4b26      	ldr	r3, [pc, #152]	@ (800d738 <pbuf_realloc+0xfc>)
 800d6a0:	f240 12af 	movw	r2, #431	@ 0x1af
 800d6a4:	4927      	ldr	r1, [pc, #156]	@ (800d744 <pbuf_realloc+0x108>)
 800d6a6:	4826      	ldr	r0, [pc, #152]	@ (800d740 <pbuf_realloc+0x104>)
 800d6a8:	f009 ff98 	bl	80175dc <iprintf>
  while (rem_len > q->len) {
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	895b      	ldrh	r3, [r3, #10]
 800d6b0:	897a      	ldrh	r2, [r7, #10]
 800d6b2:	429a      	cmp	r2, r3
 800d6b4:	d8e1      	bhi.n	800d67a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	7b1b      	ldrb	r3, [r3, #12]
 800d6ba:	f003 030f 	and.w	r3, r3, #15
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d121      	bne.n	800d706 <pbuf_realloc+0xca>
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	895b      	ldrh	r3, [r3, #10]
 800d6c6:	897a      	ldrh	r2, [r7, #10]
 800d6c8:	429a      	cmp	r2, r3
 800d6ca:	d01c      	beq.n	800d706 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	7b5b      	ldrb	r3, [r3, #13]
 800d6d0:	f003 0302 	and.w	r3, r3, #2
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d116      	bne.n	800d706 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	685a      	ldr	r2, [r3, #4]
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	1ad3      	subs	r3, r2, r3
 800d6e0:	b29a      	uxth	r2, r3
 800d6e2:	897b      	ldrh	r3, [r7, #10]
 800d6e4:	4413      	add	r3, r2
 800d6e6:	b29b      	uxth	r3, r3
 800d6e8:	4619      	mov	r1, r3
 800d6ea:	68f8      	ldr	r0, [r7, #12]
 800d6ec:	f7fe ffba 	bl	800c664 <mem_trim>
 800d6f0:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d106      	bne.n	800d706 <pbuf_realloc+0xca>
 800d6f8:	4b0f      	ldr	r3, [pc, #60]	@ (800d738 <pbuf_realloc+0xfc>)
 800d6fa:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800d6fe:	4912      	ldr	r1, [pc, #72]	@ (800d748 <pbuf_realloc+0x10c>)
 800d700:	480f      	ldr	r0, [pc, #60]	@ (800d740 <pbuf_realloc+0x104>)
 800d702:	f009 ff6b 	bl	80175dc <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	897a      	ldrh	r2, [r7, #10]
 800d70a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	895a      	ldrh	r2, [r3, #10]
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d004      	beq.n	800d726 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	4618      	mov	r0, r3
 800d722:	f000 f911 	bl	800d948 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	2200      	movs	r2, #0
 800d72a:	601a      	str	r2, [r3, #0]
 800d72c:	e000      	b.n	800d730 <pbuf_realloc+0xf4>
    return;
 800d72e:	bf00      	nop

}
 800d730:	3710      	adds	r7, #16
 800d732:	46bd      	mov	sp, r7
 800d734:	bd80      	pop	{r7, pc}
 800d736:	bf00      	nop
 800d738:	080208d4 	.word	0x080208d4
 800d73c:	080209ec 	.word	0x080209ec
 800d740:	08020934 	.word	0x08020934
 800d744:	08020a04 	.word	0x08020a04
 800d748:	08020a1c 	.word	0x08020a1c

0800d74c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800d74c:	b580      	push	{r7, lr}
 800d74e:	b086      	sub	sp, #24
 800d750:	af00      	add	r7, sp, #0
 800d752:	60f8      	str	r0, [r7, #12]
 800d754:	60b9      	str	r1, [r7, #8]
 800d756:	4613      	mov	r3, r2
 800d758:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d106      	bne.n	800d76e <pbuf_add_header_impl+0x22>
 800d760:	4b2b      	ldr	r3, [pc, #172]	@ (800d810 <pbuf_add_header_impl+0xc4>)
 800d762:	f240 12df 	movw	r2, #479	@ 0x1df
 800d766:	492b      	ldr	r1, [pc, #172]	@ (800d814 <pbuf_add_header_impl+0xc8>)
 800d768:	482b      	ldr	r0, [pc, #172]	@ (800d818 <pbuf_add_header_impl+0xcc>)
 800d76a:	f009 ff37 	bl	80175dc <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	2b00      	cmp	r3, #0
 800d772:	d003      	beq.n	800d77c <pbuf_add_header_impl+0x30>
 800d774:	68bb      	ldr	r3, [r7, #8]
 800d776:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d77a:	d301      	bcc.n	800d780 <pbuf_add_header_impl+0x34>
    return 1;
 800d77c:	2301      	movs	r3, #1
 800d77e:	e043      	b.n	800d808 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800d780:	68bb      	ldr	r3, [r7, #8]
 800d782:	2b00      	cmp	r3, #0
 800d784:	d101      	bne.n	800d78a <pbuf_add_header_impl+0x3e>
    return 0;
 800d786:	2300      	movs	r3, #0
 800d788:	e03e      	b.n	800d808 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800d78a:	68bb      	ldr	r3, [r7, #8]
 800d78c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	891a      	ldrh	r2, [r3, #8]
 800d792:	8a7b      	ldrh	r3, [r7, #18]
 800d794:	4413      	add	r3, r2
 800d796:	b29b      	uxth	r3, r3
 800d798:	8a7a      	ldrh	r2, [r7, #18]
 800d79a:	429a      	cmp	r2, r3
 800d79c:	d901      	bls.n	800d7a2 <pbuf_add_header_impl+0x56>
    return 1;
 800d79e:	2301      	movs	r3, #1
 800d7a0:	e032      	b.n	800d808 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	7b1b      	ldrb	r3, [r3, #12]
 800d7a6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800d7a8:	8a3b      	ldrh	r3, [r7, #16]
 800d7aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d00c      	beq.n	800d7cc <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	685a      	ldr	r2, [r3, #4]
 800d7b6:	68bb      	ldr	r3, [r7, #8]
 800d7b8:	425b      	negs	r3, r3
 800d7ba:	4413      	add	r3, r2
 800d7bc:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	3310      	adds	r3, #16
 800d7c2:	697a      	ldr	r2, [r7, #20]
 800d7c4:	429a      	cmp	r2, r3
 800d7c6:	d20d      	bcs.n	800d7e4 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800d7c8:	2301      	movs	r3, #1
 800d7ca:	e01d      	b.n	800d808 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800d7cc:	79fb      	ldrb	r3, [r7, #7]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d006      	beq.n	800d7e0 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	685a      	ldr	r2, [r3, #4]
 800d7d6:	68bb      	ldr	r3, [r7, #8]
 800d7d8:	425b      	negs	r3, r3
 800d7da:	4413      	add	r3, r2
 800d7dc:	617b      	str	r3, [r7, #20]
 800d7de:	e001      	b.n	800d7e4 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800d7e0:	2301      	movs	r3, #1
 800d7e2:	e011      	b.n	800d808 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	697a      	ldr	r2, [r7, #20]
 800d7e8:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	895a      	ldrh	r2, [r3, #10]
 800d7ee:	8a7b      	ldrh	r3, [r7, #18]
 800d7f0:	4413      	add	r3, r2
 800d7f2:	b29a      	uxth	r2, r3
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	891a      	ldrh	r2, [r3, #8]
 800d7fc:	8a7b      	ldrh	r3, [r7, #18]
 800d7fe:	4413      	add	r3, r2
 800d800:	b29a      	uxth	r2, r3
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	811a      	strh	r2, [r3, #8]


  return 0;
 800d806:	2300      	movs	r3, #0
}
 800d808:	4618      	mov	r0, r3
 800d80a:	3718      	adds	r7, #24
 800d80c:	46bd      	mov	sp, r7
 800d80e:	bd80      	pop	{r7, pc}
 800d810:	080208d4 	.word	0x080208d4
 800d814:	08020a38 	.word	0x08020a38
 800d818:	08020934 	.word	0x08020934

0800d81c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800d81c:	b580      	push	{r7, lr}
 800d81e:	b082      	sub	sp, #8
 800d820:	af00      	add	r7, sp, #0
 800d822:	6078      	str	r0, [r7, #4]
 800d824:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800d826:	2200      	movs	r2, #0
 800d828:	6839      	ldr	r1, [r7, #0]
 800d82a:	6878      	ldr	r0, [r7, #4]
 800d82c:	f7ff ff8e 	bl	800d74c <pbuf_add_header_impl>
 800d830:	4603      	mov	r3, r0
}
 800d832:	4618      	mov	r0, r3
 800d834:	3708      	adds	r7, #8
 800d836:	46bd      	mov	sp, r7
 800d838:	bd80      	pop	{r7, pc}
	...

0800d83c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800d83c:	b580      	push	{r7, lr}
 800d83e:	b084      	sub	sp, #16
 800d840:	af00      	add	r7, sp, #0
 800d842:	6078      	str	r0, [r7, #4]
 800d844:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d106      	bne.n	800d85a <pbuf_remove_header+0x1e>
 800d84c:	4b20      	ldr	r3, [pc, #128]	@ (800d8d0 <pbuf_remove_header+0x94>)
 800d84e:	f240 224b 	movw	r2, #587	@ 0x24b
 800d852:	4920      	ldr	r1, [pc, #128]	@ (800d8d4 <pbuf_remove_header+0x98>)
 800d854:	4820      	ldr	r0, [pc, #128]	@ (800d8d8 <pbuf_remove_header+0x9c>)
 800d856:	f009 fec1 	bl	80175dc <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d003      	beq.n	800d868 <pbuf_remove_header+0x2c>
 800d860:	683b      	ldr	r3, [r7, #0]
 800d862:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d866:	d301      	bcc.n	800d86c <pbuf_remove_header+0x30>
    return 1;
 800d868:	2301      	movs	r3, #1
 800d86a:	e02c      	b.n	800d8c6 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800d86c:	683b      	ldr	r3, [r7, #0]
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d101      	bne.n	800d876 <pbuf_remove_header+0x3a>
    return 0;
 800d872:	2300      	movs	r3, #0
 800d874:	e027      	b.n	800d8c6 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800d876:	683b      	ldr	r3, [r7, #0]
 800d878:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	895b      	ldrh	r3, [r3, #10]
 800d87e:	89fa      	ldrh	r2, [r7, #14]
 800d880:	429a      	cmp	r2, r3
 800d882:	d908      	bls.n	800d896 <pbuf_remove_header+0x5a>
 800d884:	4b12      	ldr	r3, [pc, #72]	@ (800d8d0 <pbuf_remove_header+0x94>)
 800d886:	f240 2255 	movw	r2, #597	@ 0x255
 800d88a:	4914      	ldr	r1, [pc, #80]	@ (800d8dc <pbuf_remove_header+0xa0>)
 800d88c:	4812      	ldr	r0, [pc, #72]	@ (800d8d8 <pbuf_remove_header+0x9c>)
 800d88e:	f009 fea5 	bl	80175dc <iprintf>
 800d892:	2301      	movs	r3, #1
 800d894:	e017      	b.n	800d8c6 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	685b      	ldr	r3, [r3, #4]
 800d89a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	685a      	ldr	r2, [r3, #4]
 800d8a0:	683b      	ldr	r3, [r7, #0]
 800d8a2:	441a      	add	r2, r3
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	895a      	ldrh	r2, [r3, #10]
 800d8ac:	89fb      	ldrh	r3, [r7, #14]
 800d8ae:	1ad3      	subs	r3, r2, r3
 800d8b0:	b29a      	uxth	r2, r3
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	891a      	ldrh	r2, [r3, #8]
 800d8ba:	89fb      	ldrh	r3, [r7, #14]
 800d8bc:	1ad3      	subs	r3, r2, r3
 800d8be:	b29a      	uxth	r2, r3
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800d8c4:	2300      	movs	r3, #0
}
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	3710      	adds	r7, #16
 800d8ca:	46bd      	mov	sp, r7
 800d8cc:	bd80      	pop	{r7, pc}
 800d8ce:	bf00      	nop
 800d8d0:	080208d4 	.word	0x080208d4
 800d8d4:	08020a38 	.word	0x08020a38
 800d8d8:	08020934 	.word	0x08020934
 800d8dc:	08020a44 	.word	0x08020a44

0800d8e0 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800d8e0:	b580      	push	{r7, lr}
 800d8e2:	b082      	sub	sp, #8
 800d8e4:	af00      	add	r7, sp, #0
 800d8e6:	6078      	str	r0, [r7, #4]
 800d8e8:	460b      	mov	r3, r1
 800d8ea:	807b      	strh	r3, [r7, #2]
 800d8ec:	4613      	mov	r3, r2
 800d8ee:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800d8f0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	da08      	bge.n	800d90a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800d8f8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d8fc:	425b      	negs	r3, r3
 800d8fe:	4619      	mov	r1, r3
 800d900:	6878      	ldr	r0, [r7, #4]
 800d902:	f7ff ff9b 	bl	800d83c <pbuf_remove_header>
 800d906:	4603      	mov	r3, r0
 800d908:	e007      	b.n	800d91a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800d90a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d90e:	787a      	ldrb	r2, [r7, #1]
 800d910:	4619      	mov	r1, r3
 800d912:	6878      	ldr	r0, [r7, #4]
 800d914:	f7ff ff1a 	bl	800d74c <pbuf_add_header_impl>
 800d918:	4603      	mov	r3, r0
  }
}
 800d91a:	4618      	mov	r0, r3
 800d91c:	3708      	adds	r7, #8
 800d91e:	46bd      	mov	sp, r7
 800d920:	bd80      	pop	{r7, pc}

0800d922 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800d922:	b580      	push	{r7, lr}
 800d924:	b082      	sub	sp, #8
 800d926:	af00      	add	r7, sp, #0
 800d928:	6078      	str	r0, [r7, #4]
 800d92a:	460b      	mov	r3, r1
 800d92c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800d92e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d932:	2201      	movs	r2, #1
 800d934:	4619      	mov	r1, r3
 800d936:	6878      	ldr	r0, [r7, #4]
 800d938:	f7ff ffd2 	bl	800d8e0 <pbuf_header_impl>
 800d93c:	4603      	mov	r3, r0
}
 800d93e:	4618      	mov	r0, r3
 800d940:	3708      	adds	r7, #8
 800d942:	46bd      	mov	sp, r7
 800d944:	bd80      	pop	{r7, pc}
	...

0800d948 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800d948:	b580      	push	{r7, lr}
 800d94a:	b086      	sub	sp, #24
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	2b00      	cmp	r3, #0
 800d954:	d10b      	bne.n	800d96e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d106      	bne.n	800d96a <pbuf_free+0x22>
 800d95c:	4b38      	ldr	r3, [pc, #224]	@ (800da40 <pbuf_free+0xf8>)
 800d95e:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800d962:	4938      	ldr	r1, [pc, #224]	@ (800da44 <pbuf_free+0xfc>)
 800d964:	4838      	ldr	r0, [pc, #224]	@ (800da48 <pbuf_free+0x100>)
 800d966:	f009 fe39 	bl	80175dc <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800d96a:	2300      	movs	r3, #0
 800d96c:	e063      	b.n	800da36 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800d96e:	2300      	movs	r3, #0
 800d970:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800d972:	e05c      	b.n	800da2e <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	7b9b      	ldrb	r3, [r3, #14]
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d106      	bne.n	800d98a <pbuf_free+0x42>
 800d97c:	4b30      	ldr	r3, [pc, #192]	@ (800da40 <pbuf_free+0xf8>)
 800d97e:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800d982:	4932      	ldr	r1, [pc, #200]	@ (800da4c <pbuf_free+0x104>)
 800d984:	4830      	ldr	r0, [pc, #192]	@ (800da48 <pbuf_free+0x100>)
 800d986:	f009 fe29 	bl	80175dc <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	7b9b      	ldrb	r3, [r3, #14]
 800d98e:	3b01      	subs	r3, #1
 800d990:	b2da      	uxtb	r2, r3
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	739a      	strb	r2, [r3, #14]
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	7b9b      	ldrb	r3, [r3, #14]
 800d99a:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800d99c:	7dbb      	ldrb	r3, [r7, #22]
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d143      	bne.n	800da2a <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	7b1b      	ldrb	r3, [r3, #12]
 800d9ac:	f003 030f 	and.w	r3, r3, #15
 800d9b0:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	7b5b      	ldrb	r3, [r3, #13]
 800d9b6:	f003 0302 	and.w	r3, r3, #2
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d011      	beq.n	800d9e2 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800d9c2:	68bb      	ldr	r3, [r7, #8]
 800d9c4:	691b      	ldr	r3, [r3, #16]
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d106      	bne.n	800d9d8 <pbuf_free+0x90>
 800d9ca:	4b1d      	ldr	r3, [pc, #116]	@ (800da40 <pbuf_free+0xf8>)
 800d9cc:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800d9d0:	491f      	ldr	r1, [pc, #124]	@ (800da50 <pbuf_free+0x108>)
 800d9d2:	481d      	ldr	r0, [pc, #116]	@ (800da48 <pbuf_free+0x100>)
 800d9d4:	f009 fe02 	bl	80175dc <iprintf>
        pc->custom_free_function(p);
 800d9d8:	68bb      	ldr	r3, [r7, #8]
 800d9da:	691b      	ldr	r3, [r3, #16]
 800d9dc:	6878      	ldr	r0, [r7, #4]
 800d9de:	4798      	blx	r3
 800d9e0:	e01d      	b.n	800da1e <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800d9e2:	7bfb      	ldrb	r3, [r7, #15]
 800d9e4:	2b02      	cmp	r3, #2
 800d9e6:	d104      	bne.n	800d9f2 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800d9e8:	6879      	ldr	r1, [r7, #4]
 800d9ea:	2008      	movs	r0, #8
 800d9ec:	f7ff f936 	bl	800cc5c <memp_free>
 800d9f0:	e015      	b.n	800da1e <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800d9f2:	7bfb      	ldrb	r3, [r7, #15]
 800d9f4:	2b01      	cmp	r3, #1
 800d9f6:	d104      	bne.n	800da02 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800d9f8:	6879      	ldr	r1, [r7, #4]
 800d9fa:	2007      	movs	r0, #7
 800d9fc:	f7ff f92e 	bl	800cc5c <memp_free>
 800da00:	e00d      	b.n	800da1e <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800da02:	7bfb      	ldrb	r3, [r7, #15]
 800da04:	2b00      	cmp	r3, #0
 800da06:	d103      	bne.n	800da10 <pbuf_free+0xc8>
          mem_free(p);
 800da08:	6878      	ldr	r0, [r7, #4]
 800da0a:	f7fe fdc1 	bl	800c590 <mem_free>
 800da0e:	e006      	b.n	800da1e <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800da10:	4b0b      	ldr	r3, [pc, #44]	@ (800da40 <pbuf_free+0xf8>)
 800da12:	f240 320f 	movw	r2, #783	@ 0x30f
 800da16:	490f      	ldr	r1, [pc, #60]	@ (800da54 <pbuf_free+0x10c>)
 800da18:	480b      	ldr	r0, [pc, #44]	@ (800da48 <pbuf_free+0x100>)
 800da1a:	f009 fddf 	bl	80175dc <iprintf>
        }
      }
      count++;
 800da1e:	7dfb      	ldrb	r3, [r7, #23]
 800da20:	3301      	adds	r3, #1
 800da22:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800da24:	693b      	ldr	r3, [r7, #16]
 800da26:	607b      	str	r3, [r7, #4]
 800da28:	e001      	b.n	800da2e <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800da2a:	2300      	movs	r3, #0
 800da2c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	2b00      	cmp	r3, #0
 800da32:	d19f      	bne.n	800d974 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800da34:	7dfb      	ldrb	r3, [r7, #23]
}
 800da36:	4618      	mov	r0, r3
 800da38:	3718      	adds	r7, #24
 800da3a:	46bd      	mov	sp, r7
 800da3c:	bd80      	pop	{r7, pc}
 800da3e:	bf00      	nop
 800da40:	080208d4 	.word	0x080208d4
 800da44:	08020a38 	.word	0x08020a38
 800da48:	08020934 	.word	0x08020934
 800da4c:	08020a64 	.word	0x08020a64
 800da50:	08020a7c 	.word	0x08020a7c
 800da54:	08020aa0 	.word	0x08020aa0

0800da58 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800da58:	b480      	push	{r7}
 800da5a:	b085      	sub	sp, #20
 800da5c:	af00      	add	r7, sp, #0
 800da5e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800da60:	2300      	movs	r3, #0
 800da62:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800da64:	e005      	b.n	800da72 <pbuf_clen+0x1a>
    ++len;
 800da66:	89fb      	ldrh	r3, [r7, #14]
 800da68:	3301      	adds	r3, #1
 800da6a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	2b00      	cmp	r3, #0
 800da76:	d1f6      	bne.n	800da66 <pbuf_clen+0xe>
  }
  return len;
 800da78:	89fb      	ldrh	r3, [r7, #14]
}
 800da7a:	4618      	mov	r0, r3
 800da7c:	3714      	adds	r7, #20
 800da7e:	46bd      	mov	sp, r7
 800da80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da84:	4770      	bx	lr
	...

0800da88 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800da88:	b580      	push	{r7, lr}
 800da8a:	b082      	sub	sp, #8
 800da8c:	af00      	add	r7, sp, #0
 800da8e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	2b00      	cmp	r3, #0
 800da94:	d010      	beq.n	800dab8 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	7b9b      	ldrb	r3, [r3, #14]
 800da9a:	3301      	adds	r3, #1
 800da9c:	b2da      	uxtb	r2, r3
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	7b9b      	ldrb	r3, [r3, #14]
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d106      	bne.n	800dab8 <pbuf_ref+0x30>
 800daaa:	4b05      	ldr	r3, [pc, #20]	@ (800dac0 <pbuf_ref+0x38>)
 800daac:	f240 3242 	movw	r2, #834	@ 0x342
 800dab0:	4904      	ldr	r1, [pc, #16]	@ (800dac4 <pbuf_ref+0x3c>)
 800dab2:	4805      	ldr	r0, [pc, #20]	@ (800dac8 <pbuf_ref+0x40>)
 800dab4:	f009 fd92 	bl	80175dc <iprintf>
  }
}
 800dab8:	bf00      	nop
 800daba:	3708      	adds	r7, #8
 800dabc:	46bd      	mov	sp, r7
 800dabe:	bd80      	pop	{r7, pc}
 800dac0:	080208d4 	.word	0x080208d4
 800dac4:	08020ab4 	.word	0x08020ab4
 800dac8:	08020934 	.word	0x08020934

0800dacc <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800dacc:	b580      	push	{r7, lr}
 800dace:	b084      	sub	sp, #16
 800dad0:	af00      	add	r7, sp, #0
 800dad2:	6078      	str	r0, [r7, #4]
 800dad4:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d002      	beq.n	800dae2 <pbuf_cat+0x16>
 800dadc:	683b      	ldr	r3, [r7, #0]
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d107      	bne.n	800daf2 <pbuf_cat+0x26>
 800dae2:	4b20      	ldr	r3, [pc, #128]	@ (800db64 <pbuf_cat+0x98>)
 800dae4:	f240 3259 	movw	r2, #857	@ 0x359
 800dae8:	491f      	ldr	r1, [pc, #124]	@ (800db68 <pbuf_cat+0x9c>)
 800daea:	4820      	ldr	r0, [pc, #128]	@ (800db6c <pbuf_cat+0xa0>)
 800daec:	f009 fd76 	bl	80175dc <iprintf>
 800daf0:	e034      	b.n	800db5c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	60fb      	str	r3, [r7, #12]
 800daf6:	e00a      	b.n	800db0e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	891a      	ldrh	r2, [r3, #8]
 800dafc:	683b      	ldr	r3, [r7, #0]
 800dafe:	891b      	ldrh	r3, [r3, #8]
 800db00:	4413      	add	r3, r2
 800db02:	b29a      	uxth	r2, r3
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	60fb      	str	r3, [r7, #12]
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	2b00      	cmp	r3, #0
 800db14:	d1f0      	bne.n	800daf8 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	891a      	ldrh	r2, [r3, #8]
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	895b      	ldrh	r3, [r3, #10]
 800db1e:	429a      	cmp	r2, r3
 800db20:	d006      	beq.n	800db30 <pbuf_cat+0x64>
 800db22:	4b10      	ldr	r3, [pc, #64]	@ (800db64 <pbuf_cat+0x98>)
 800db24:	f240 3262 	movw	r2, #866	@ 0x362
 800db28:	4911      	ldr	r1, [pc, #68]	@ (800db70 <pbuf_cat+0xa4>)
 800db2a:	4810      	ldr	r0, [pc, #64]	@ (800db6c <pbuf_cat+0xa0>)
 800db2c:	f009 fd56 	bl	80175dc <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	2b00      	cmp	r3, #0
 800db36:	d006      	beq.n	800db46 <pbuf_cat+0x7a>
 800db38:	4b0a      	ldr	r3, [pc, #40]	@ (800db64 <pbuf_cat+0x98>)
 800db3a:	f240 3263 	movw	r2, #867	@ 0x363
 800db3e:	490d      	ldr	r1, [pc, #52]	@ (800db74 <pbuf_cat+0xa8>)
 800db40:	480a      	ldr	r0, [pc, #40]	@ (800db6c <pbuf_cat+0xa0>)
 800db42:	f009 fd4b 	bl	80175dc <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	891a      	ldrh	r2, [r3, #8]
 800db4a:	683b      	ldr	r3, [r7, #0]
 800db4c:	891b      	ldrh	r3, [r3, #8]
 800db4e:	4413      	add	r3, r2
 800db50:	b29a      	uxth	r2, r3
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	683a      	ldr	r2, [r7, #0]
 800db5a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800db5c:	3710      	adds	r7, #16
 800db5e:	46bd      	mov	sp, r7
 800db60:	bd80      	pop	{r7, pc}
 800db62:	bf00      	nop
 800db64:	080208d4 	.word	0x080208d4
 800db68:	08020ac8 	.word	0x08020ac8
 800db6c:	08020934 	.word	0x08020934
 800db70:	08020b00 	.word	0x08020b00
 800db74:	08020b30 	.word	0x08020b30

0800db78 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800db78:	b580      	push	{r7, lr}
 800db7a:	b082      	sub	sp, #8
 800db7c:	af00      	add	r7, sp, #0
 800db7e:	6078      	str	r0, [r7, #4]
 800db80:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800db82:	6839      	ldr	r1, [r7, #0]
 800db84:	6878      	ldr	r0, [r7, #4]
 800db86:	f7ff ffa1 	bl	800dacc <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800db8a:	6838      	ldr	r0, [r7, #0]
 800db8c:	f7ff ff7c 	bl	800da88 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800db90:	bf00      	nop
 800db92:	3708      	adds	r7, #8
 800db94:	46bd      	mov	sp, r7
 800db96:	bd80      	pop	{r7, pc}

0800db98 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800db98:	b580      	push	{r7, lr}
 800db9a:	b086      	sub	sp, #24
 800db9c:	af00      	add	r7, sp, #0
 800db9e:	6078      	str	r0, [r7, #4]
 800dba0:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800dba2:	2300      	movs	r3, #0
 800dba4:	617b      	str	r3, [r7, #20]
 800dba6:	2300      	movs	r3, #0
 800dba8:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d008      	beq.n	800dbc2 <pbuf_copy+0x2a>
 800dbb0:	683b      	ldr	r3, [r7, #0]
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d005      	beq.n	800dbc2 <pbuf_copy+0x2a>
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	891a      	ldrh	r2, [r3, #8]
 800dbba:	683b      	ldr	r3, [r7, #0]
 800dbbc:	891b      	ldrh	r3, [r3, #8]
 800dbbe:	429a      	cmp	r2, r3
 800dbc0:	d209      	bcs.n	800dbd6 <pbuf_copy+0x3e>
 800dbc2:	4b57      	ldr	r3, [pc, #348]	@ (800dd20 <pbuf_copy+0x188>)
 800dbc4:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800dbc8:	4956      	ldr	r1, [pc, #344]	@ (800dd24 <pbuf_copy+0x18c>)
 800dbca:	4857      	ldr	r0, [pc, #348]	@ (800dd28 <pbuf_copy+0x190>)
 800dbcc:	f009 fd06 	bl	80175dc <iprintf>
 800dbd0:	f06f 030f 	mvn.w	r3, #15
 800dbd4:	e09f      	b.n	800dd16 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	895b      	ldrh	r3, [r3, #10]
 800dbda:	461a      	mov	r2, r3
 800dbdc:	697b      	ldr	r3, [r7, #20]
 800dbde:	1ad2      	subs	r2, r2, r3
 800dbe0:	683b      	ldr	r3, [r7, #0]
 800dbe2:	895b      	ldrh	r3, [r3, #10]
 800dbe4:	4619      	mov	r1, r3
 800dbe6:	693b      	ldr	r3, [r7, #16]
 800dbe8:	1acb      	subs	r3, r1, r3
 800dbea:	429a      	cmp	r2, r3
 800dbec:	d306      	bcc.n	800dbfc <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800dbee:	683b      	ldr	r3, [r7, #0]
 800dbf0:	895b      	ldrh	r3, [r3, #10]
 800dbf2:	461a      	mov	r2, r3
 800dbf4:	693b      	ldr	r3, [r7, #16]
 800dbf6:	1ad3      	subs	r3, r2, r3
 800dbf8:	60fb      	str	r3, [r7, #12]
 800dbfa:	e005      	b.n	800dc08 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	895b      	ldrh	r3, [r3, #10]
 800dc00:	461a      	mov	r2, r3
 800dc02:	697b      	ldr	r3, [r7, #20]
 800dc04:	1ad3      	subs	r3, r2, r3
 800dc06:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	685a      	ldr	r2, [r3, #4]
 800dc0c:	697b      	ldr	r3, [r7, #20]
 800dc0e:	18d0      	adds	r0, r2, r3
 800dc10:	683b      	ldr	r3, [r7, #0]
 800dc12:	685a      	ldr	r2, [r3, #4]
 800dc14:	693b      	ldr	r3, [r7, #16]
 800dc16:	4413      	add	r3, r2
 800dc18:	68fa      	ldr	r2, [r7, #12]
 800dc1a:	4619      	mov	r1, r3
 800dc1c:	f009 fe35 	bl	801788a <memcpy>
    offset_to += len;
 800dc20:	697a      	ldr	r2, [r7, #20]
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	4413      	add	r3, r2
 800dc26:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800dc28:	693a      	ldr	r2, [r7, #16]
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	4413      	add	r3, r2
 800dc2e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	895b      	ldrh	r3, [r3, #10]
 800dc34:	461a      	mov	r2, r3
 800dc36:	697b      	ldr	r3, [r7, #20]
 800dc38:	4293      	cmp	r3, r2
 800dc3a:	d906      	bls.n	800dc4a <pbuf_copy+0xb2>
 800dc3c:	4b38      	ldr	r3, [pc, #224]	@ (800dd20 <pbuf_copy+0x188>)
 800dc3e:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800dc42:	493a      	ldr	r1, [pc, #232]	@ (800dd2c <pbuf_copy+0x194>)
 800dc44:	4838      	ldr	r0, [pc, #224]	@ (800dd28 <pbuf_copy+0x190>)
 800dc46:	f009 fcc9 	bl	80175dc <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800dc4a:	683b      	ldr	r3, [r7, #0]
 800dc4c:	895b      	ldrh	r3, [r3, #10]
 800dc4e:	461a      	mov	r2, r3
 800dc50:	693b      	ldr	r3, [r7, #16]
 800dc52:	4293      	cmp	r3, r2
 800dc54:	d906      	bls.n	800dc64 <pbuf_copy+0xcc>
 800dc56:	4b32      	ldr	r3, [pc, #200]	@ (800dd20 <pbuf_copy+0x188>)
 800dc58:	f240 32da 	movw	r2, #986	@ 0x3da
 800dc5c:	4934      	ldr	r1, [pc, #208]	@ (800dd30 <pbuf_copy+0x198>)
 800dc5e:	4832      	ldr	r0, [pc, #200]	@ (800dd28 <pbuf_copy+0x190>)
 800dc60:	f009 fcbc 	bl	80175dc <iprintf>
    if (offset_from >= p_from->len) {
 800dc64:	683b      	ldr	r3, [r7, #0]
 800dc66:	895b      	ldrh	r3, [r3, #10]
 800dc68:	461a      	mov	r2, r3
 800dc6a:	693b      	ldr	r3, [r7, #16]
 800dc6c:	4293      	cmp	r3, r2
 800dc6e:	d304      	bcc.n	800dc7a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800dc70:	2300      	movs	r3, #0
 800dc72:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800dc74:	683b      	ldr	r3, [r7, #0]
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	895b      	ldrh	r3, [r3, #10]
 800dc7e:	461a      	mov	r2, r3
 800dc80:	697b      	ldr	r3, [r7, #20]
 800dc82:	4293      	cmp	r3, r2
 800dc84:	d114      	bne.n	800dcb0 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800dc86:	2300      	movs	r3, #0
 800dc88:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d10c      	bne.n	800dcb0 <pbuf_copy+0x118>
 800dc96:	683b      	ldr	r3, [r7, #0]
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d009      	beq.n	800dcb0 <pbuf_copy+0x118>
 800dc9c:	4b20      	ldr	r3, [pc, #128]	@ (800dd20 <pbuf_copy+0x188>)
 800dc9e:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800dca2:	4924      	ldr	r1, [pc, #144]	@ (800dd34 <pbuf_copy+0x19c>)
 800dca4:	4820      	ldr	r0, [pc, #128]	@ (800dd28 <pbuf_copy+0x190>)
 800dca6:	f009 fc99 	bl	80175dc <iprintf>
 800dcaa:	f06f 030f 	mvn.w	r3, #15
 800dcae:	e032      	b.n	800dd16 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800dcb0:	683b      	ldr	r3, [r7, #0]
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d013      	beq.n	800dcde <pbuf_copy+0x146>
 800dcb6:	683b      	ldr	r3, [r7, #0]
 800dcb8:	895a      	ldrh	r2, [r3, #10]
 800dcba:	683b      	ldr	r3, [r7, #0]
 800dcbc:	891b      	ldrh	r3, [r3, #8]
 800dcbe:	429a      	cmp	r2, r3
 800dcc0:	d10d      	bne.n	800dcde <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800dcc2:	683b      	ldr	r3, [r7, #0]
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d009      	beq.n	800dcde <pbuf_copy+0x146>
 800dcca:	4b15      	ldr	r3, [pc, #84]	@ (800dd20 <pbuf_copy+0x188>)
 800dccc:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800dcd0:	4919      	ldr	r1, [pc, #100]	@ (800dd38 <pbuf_copy+0x1a0>)
 800dcd2:	4815      	ldr	r0, [pc, #84]	@ (800dd28 <pbuf_copy+0x190>)
 800dcd4:	f009 fc82 	bl	80175dc <iprintf>
 800dcd8:	f06f 0305 	mvn.w	r3, #5
 800dcdc:	e01b      	b.n	800dd16 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d013      	beq.n	800dd0c <pbuf_copy+0x174>
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	895a      	ldrh	r2, [r3, #10]
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	891b      	ldrh	r3, [r3, #8]
 800dcec:	429a      	cmp	r2, r3
 800dcee:	d10d      	bne.n	800dd0c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d009      	beq.n	800dd0c <pbuf_copy+0x174>
 800dcf8:	4b09      	ldr	r3, [pc, #36]	@ (800dd20 <pbuf_copy+0x188>)
 800dcfa:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800dcfe:	490e      	ldr	r1, [pc, #56]	@ (800dd38 <pbuf_copy+0x1a0>)
 800dd00:	4809      	ldr	r0, [pc, #36]	@ (800dd28 <pbuf_copy+0x190>)
 800dd02:	f009 fc6b 	bl	80175dc <iprintf>
 800dd06:	f06f 0305 	mvn.w	r3, #5
 800dd0a:	e004      	b.n	800dd16 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800dd0c:	683b      	ldr	r3, [r7, #0]
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	f47f af61 	bne.w	800dbd6 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800dd14:	2300      	movs	r3, #0
}
 800dd16:	4618      	mov	r0, r3
 800dd18:	3718      	adds	r7, #24
 800dd1a:	46bd      	mov	sp, r7
 800dd1c:	bd80      	pop	{r7, pc}
 800dd1e:	bf00      	nop
 800dd20:	080208d4 	.word	0x080208d4
 800dd24:	08020b7c 	.word	0x08020b7c
 800dd28:	08020934 	.word	0x08020934
 800dd2c:	08020bac 	.word	0x08020bac
 800dd30:	08020bc4 	.word	0x08020bc4
 800dd34:	08020be0 	.word	0x08020be0
 800dd38:	08020bf0 	.word	0x08020bf0

0800dd3c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800dd3c:	b580      	push	{r7, lr}
 800dd3e:	b088      	sub	sp, #32
 800dd40:	af00      	add	r7, sp, #0
 800dd42:	60f8      	str	r0, [r7, #12]
 800dd44:	60b9      	str	r1, [r7, #8]
 800dd46:	4611      	mov	r1, r2
 800dd48:	461a      	mov	r2, r3
 800dd4a:	460b      	mov	r3, r1
 800dd4c:	80fb      	strh	r3, [r7, #6]
 800dd4e:	4613      	mov	r3, r2
 800dd50:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800dd52:	2300      	movs	r3, #0
 800dd54:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800dd56:	2300      	movs	r3, #0
 800dd58:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d108      	bne.n	800dd72 <pbuf_copy_partial+0x36>
 800dd60:	4b2b      	ldr	r3, [pc, #172]	@ (800de10 <pbuf_copy_partial+0xd4>)
 800dd62:	f240 420a 	movw	r2, #1034	@ 0x40a
 800dd66:	492b      	ldr	r1, [pc, #172]	@ (800de14 <pbuf_copy_partial+0xd8>)
 800dd68:	482b      	ldr	r0, [pc, #172]	@ (800de18 <pbuf_copy_partial+0xdc>)
 800dd6a:	f009 fc37 	bl	80175dc <iprintf>
 800dd6e:	2300      	movs	r3, #0
 800dd70:	e04a      	b.n	800de08 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800dd72:	68bb      	ldr	r3, [r7, #8]
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d108      	bne.n	800dd8a <pbuf_copy_partial+0x4e>
 800dd78:	4b25      	ldr	r3, [pc, #148]	@ (800de10 <pbuf_copy_partial+0xd4>)
 800dd7a:	f240 420b 	movw	r2, #1035	@ 0x40b
 800dd7e:	4927      	ldr	r1, [pc, #156]	@ (800de1c <pbuf_copy_partial+0xe0>)
 800dd80:	4825      	ldr	r0, [pc, #148]	@ (800de18 <pbuf_copy_partial+0xdc>)
 800dd82:	f009 fc2b 	bl	80175dc <iprintf>
 800dd86:	2300      	movs	r3, #0
 800dd88:	e03e      	b.n	800de08 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	61fb      	str	r3, [r7, #28]
 800dd8e:	e034      	b.n	800ddfa <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800dd90:	88bb      	ldrh	r3, [r7, #4]
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d00a      	beq.n	800ddac <pbuf_copy_partial+0x70>
 800dd96:	69fb      	ldr	r3, [r7, #28]
 800dd98:	895b      	ldrh	r3, [r3, #10]
 800dd9a:	88ba      	ldrh	r2, [r7, #4]
 800dd9c:	429a      	cmp	r2, r3
 800dd9e:	d305      	bcc.n	800ddac <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800dda0:	69fb      	ldr	r3, [r7, #28]
 800dda2:	895b      	ldrh	r3, [r3, #10]
 800dda4:	88ba      	ldrh	r2, [r7, #4]
 800dda6:	1ad3      	subs	r3, r2, r3
 800dda8:	80bb      	strh	r3, [r7, #4]
 800ddaa:	e023      	b.n	800ddf4 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800ddac:	69fb      	ldr	r3, [r7, #28]
 800ddae:	895a      	ldrh	r2, [r3, #10]
 800ddb0:	88bb      	ldrh	r3, [r7, #4]
 800ddb2:	1ad3      	subs	r3, r2, r3
 800ddb4:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800ddb6:	8b3a      	ldrh	r2, [r7, #24]
 800ddb8:	88fb      	ldrh	r3, [r7, #6]
 800ddba:	429a      	cmp	r2, r3
 800ddbc:	d901      	bls.n	800ddc2 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800ddbe:	88fb      	ldrh	r3, [r7, #6]
 800ddc0:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800ddc2:	8b7b      	ldrh	r3, [r7, #26]
 800ddc4:	68ba      	ldr	r2, [r7, #8]
 800ddc6:	18d0      	adds	r0, r2, r3
 800ddc8:	69fb      	ldr	r3, [r7, #28]
 800ddca:	685a      	ldr	r2, [r3, #4]
 800ddcc:	88bb      	ldrh	r3, [r7, #4]
 800ddce:	4413      	add	r3, r2
 800ddd0:	8b3a      	ldrh	r2, [r7, #24]
 800ddd2:	4619      	mov	r1, r3
 800ddd4:	f009 fd59 	bl	801788a <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800ddd8:	8afa      	ldrh	r2, [r7, #22]
 800ddda:	8b3b      	ldrh	r3, [r7, #24]
 800dddc:	4413      	add	r3, r2
 800ddde:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800dde0:	8b7a      	ldrh	r2, [r7, #26]
 800dde2:	8b3b      	ldrh	r3, [r7, #24]
 800dde4:	4413      	add	r3, r2
 800dde6:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800dde8:	88fa      	ldrh	r2, [r7, #6]
 800ddea:	8b3b      	ldrh	r3, [r7, #24]
 800ddec:	1ad3      	subs	r3, r2, r3
 800ddee:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800ddf0:	2300      	movs	r3, #0
 800ddf2:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800ddf4:	69fb      	ldr	r3, [r7, #28]
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	61fb      	str	r3, [r7, #28]
 800ddfa:	88fb      	ldrh	r3, [r7, #6]
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d002      	beq.n	800de06 <pbuf_copy_partial+0xca>
 800de00:	69fb      	ldr	r3, [r7, #28]
 800de02:	2b00      	cmp	r3, #0
 800de04:	d1c4      	bne.n	800dd90 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800de06:	8afb      	ldrh	r3, [r7, #22]
}
 800de08:	4618      	mov	r0, r3
 800de0a:	3720      	adds	r7, #32
 800de0c:	46bd      	mov	sp, r7
 800de0e:	bd80      	pop	{r7, pc}
 800de10:	080208d4 	.word	0x080208d4
 800de14:	08020c1c 	.word	0x08020c1c
 800de18:	08020934 	.word	0x08020934
 800de1c:	08020c3c 	.word	0x08020c3c

0800de20 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 800de20:	b480      	push	{r7}
 800de22:	b087      	sub	sp, #28
 800de24:	af00      	add	r7, sp, #0
 800de26:	60f8      	str	r0, [r7, #12]
 800de28:	460b      	mov	r3, r1
 800de2a:	607a      	str	r2, [r7, #4]
 800de2c:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 800de2e:	897b      	ldrh	r3, [r7, #10]
 800de30:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 800de36:	e007      	b.n	800de48 <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 800de38:	693b      	ldr	r3, [r7, #16]
 800de3a:	895b      	ldrh	r3, [r3, #10]
 800de3c:	8afa      	ldrh	r2, [r7, #22]
 800de3e:	1ad3      	subs	r3, r2, r3
 800de40:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 800de42:	693b      	ldr	r3, [r7, #16]
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 800de48:	693b      	ldr	r3, [r7, #16]
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d004      	beq.n	800de58 <pbuf_skip_const+0x38>
 800de4e:	693b      	ldr	r3, [r7, #16]
 800de50:	895b      	ldrh	r3, [r3, #10]
 800de52:	8afa      	ldrh	r2, [r7, #22]
 800de54:	429a      	cmp	r2, r3
 800de56:	d2ef      	bcs.n	800de38 <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d002      	beq.n	800de64 <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	8afa      	ldrh	r2, [r7, #22]
 800de62:	801a      	strh	r2, [r3, #0]
  }
  return q;
 800de64:	693b      	ldr	r3, [r7, #16]
}
 800de66:	4618      	mov	r0, r3
 800de68:	371c      	adds	r7, #28
 800de6a:	46bd      	mov	sp, r7
 800de6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de70:	4770      	bx	lr

0800de72 <pbuf_skip>:
 * @param out_offset resulting offset in the returned pbuf
 * @return the pbuf in the queue where the offset is
 */
struct pbuf *
pbuf_skip(struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 800de72:	b580      	push	{r7, lr}
 800de74:	b086      	sub	sp, #24
 800de76:	af00      	add	r7, sp, #0
 800de78:	60f8      	str	r0, [r7, #12]
 800de7a:	460b      	mov	r3, r1
 800de7c:	607a      	str	r2, [r7, #4]
 800de7e:	817b      	strh	r3, [r7, #10]
  const struct pbuf *out = pbuf_skip_const(in, in_offset, out_offset);
 800de80:	897b      	ldrh	r3, [r7, #10]
 800de82:	687a      	ldr	r2, [r7, #4]
 800de84:	4619      	mov	r1, r3
 800de86:	68f8      	ldr	r0, [r7, #12]
 800de88:	f7ff ffca 	bl	800de20 <pbuf_skip_const>
 800de8c:	6178      	str	r0, [r7, #20]
  return LWIP_CONST_CAST(struct pbuf *, out);
 800de8e:	697b      	ldr	r3, [r7, #20]
}
 800de90:	4618      	mov	r0, r3
 800de92:	3718      	adds	r7, #24
 800de94:	46bd      	mov	sp, r7
 800de96:	bd80      	pop	{r7, pc}

0800de98 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 800de98:	b580      	push	{r7, lr}
 800de9a:	b088      	sub	sp, #32
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	60f8      	str	r0, [r7, #12]
 800dea0:	60b9      	str	r1, [r7, #8]
 800dea2:	4613      	mov	r3, r2
 800dea4:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 800dea6:	88fb      	ldrh	r3, [r7, #6]
 800dea8:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 800deaa:	2300      	movs	r3, #0
 800deac:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d109      	bne.n	800dec8 <pbuf_take+0x30>
 800deb4:	4b3a      	ldr	r3, [pc, #232]	@ (800dfa0 <pbuf_take+0x108>)
 800deb6:	f240 42b3 	movw	r2, #1203	@ 0x4b3
 800deba:	493a      	ldr	r1, [pc, #232]	@ (800dfa4 <pbuf_take+0x10c>)
 800debc:	483a      	ldr	r0, [pc, #232]	@ (800dfa8 <pbuf_take+0x110>)
 800debe:	f009 fb8d 	bl	80175dc <iprintf>
 800dec2:	f06f 030f 	mvn.w	r3, #15
 800dec6:	e067      	b.n	800df98 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800dec8:	68bb      	ldr	r3, [r7, #8]
 800deca:	2b00      	cmp	r3, #0
 800decc:	d109      	bne.n	800dee2 <pbuf_take+0x4a>
 800dece:	4b34      	ldr	r3, [pc, #208]	@ (800dfa0 <pbuf_take+0x108>)
 800ded0:	f240 42b4 	movw	r2, #1204	@ 0x4b4
 800ded4:	4935      	ldr	r1, [pc, #212]	@ (800dfac <pbuf_take+0x114>)
 800ded6:	4834      	ldr	r0, [pc, #208]	@ (800dfa8 <pbuf_take+0x110>)
 800ded8:	f009 fb80 	bl	80175dc <iprintf>
 800dedc:	f06f 030f 	mvn.w	r3, #15
 800dee0:	e05a      	b.n	800df98 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	891b      	ldrh	r3, [r3, #8]
 800dee6:	88fa      	ldrh	r2, [r7, #6]
 800dee8:	429a      	cmp	r2, r3
 800deea:	d909      	bls.n	800df00 <pbuf_take+0x68>
 800deec:	4b2c      	ldr	r3, [pc, #176]	@ (800dfa0 <pbuf_take+0x108>)
 800deee:	f240 42b5 	movw	r2, #1205	@ 0x4b5
 800def2:	492f      	ldr	r1, [pc, #188]	@ (800dfb0 <pbuf_take+0x118>)
 800def4:	482c      	ldr	r0, [pc, #176]	@ (800dfa8 <pbuf_take+0x110>)
 800def6:	f009 fb71 	bl	80175dc <iprintf>
 800defa:	f04f 33ff 	mov.w	r3, #4294967295
 800defe:	e04b      	b.n	800df98 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	2b00      	cmp	r3, #0
 800df04:	d007      	beq.n	800df16 <pbuf_take+0x7e>
 800df06:	68bb      	ldr	r3, [r7, #8]
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d004      	beq.n	800df16 <pbuf_take+0x7e>
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	891b      	ldrh	r3, [r3, #8]
 800df10:	88fa      	ldrh	r2, [r7, #6]
 800df12:	429a      	cmp	r2, r3
 800df14:	d902      	bls.n	800df1c <pbuf_take+0x84>
    return ERR_ARG;
 800df16:	f06f 030f 	mvn.w	r3, #15
 800df1a:	e03d      	b.n	800df98 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	61fb      	str	r3, [r7, #28]
 800df20:	e028      	b.n	800df74 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 800df22:	69fb      	ldr	r3, [r7, #28]
 800df24:	2b00      	cmp	r3, #0
 800df26:	d106      	bne.n	800df36 <pbuf_take+0x9e>
 800df28:	4b1d      	ldr	r3, [pc, #116]	@ (800dfa0 <pbuf_take+0x108>)
 800df2a:	f240 42bd 	movw	r2, #1213	@ 0x4bd
 800df2e:	4921      	ldr	r1, [pc, #132]	@ (800dfb4 <pbuf_take+0x11c>)
 800df30:	481d      	ldr	r0, [pc, #116]	@ (800dfa8 <pbuf_take+0x110>)
 800df32:	f009 fb53 	bl	80175dc <iprintf>
    buf_copy_len = total_copy_len;
 800df36:	697b      	ldr	r3, [r7, #20]
 800df38:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 800df3a:	69fb      	ldr	r3, [r7, #28]
 800df3c:	895b      	ldrh	r3, [r3, #10]
 800df3e:	461a      	mov	r2, r3
 800df40:	69bb      	ldr	r3, [r7, #24]
 800df42:	4293      	cmp	r3, r2
 800df44:	d902      	bls.n	800df4c <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 800df46:	69fb      	ldr	r3, [r7, #28]
 800df48:	895b      	ldrh	r3, [r3, #10]
 800df4a:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 800df4c:	69fb      	ldr	r3, [r7, #28]
 800df4e:	6858      	ldr	r0, [r3, #4]
 800df50:	68ba      	ldr	r2, [r7, #8]
 800df52:	693b      	ldr	r3, [r7, #16]
 800df54:	4413      	add	r3, r2
 800df56:	69ba      	ldr	r2, [r7, #24]
 800df58:	4619      	mov	r1, r3
 800df5a:	f009 fc96 	bl	801788a <memcpy>
    total_copy_len -= buf_copy_len;
 800df5e:	697a      	ldr	r2, [r7, #20]
 800df60:	69bb      	ldr	r3, [r7, #24]
 800df62:	1ad3      	subs	r3, r2, r3
 800df64:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 800df66:	693a      	ldr	r2, [r7, #16]
 800df68:	69bb      	ldr	r3, [r7, #24]
 800df6a:	4413      	add	r3, r2
 800df6c:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 800df6e:	69fb      	ldr	r3, [r7, #28]
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	61fb      	str	r3, [r7, #28]
 800df74:	697b      	ldr	r3, [r7, #20]
 800df76:	2b00      	cmp	r3, #0
 800df78:	d1d3      	bne.n	800df22 <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 800df7a:	697b      	ldr	r3, [r7, #20]
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d103      	bne.n	800df88 <pbuf_take+0xf0>
 800df80:	88fb      	ldrh	r3, [r7, #6]
 800df82:	693a      	ldr	r2, [r7, #16]
 800df84:	429a      	cmp	r2, r3
 800df86:	d006      	beq.n	800df96 <pbuf_take+0xfe>
 800df88:	4b05      	ldr	r3, [pc, #20]	@ (800dfa0 <pbuf_take+0x108>)
 800df8a:	f44f 6299 	mov.w	r2, #1224	@ 0x4c8
 800df8e:	490a      	ldr	r1, [pc, #40]	@ (800dfb8 <pbuf_take+0x120>)
 800df90:	4805      	ldr	r0, [pc, #20]	@ (800dfa8 <pbuf_take+0x110>)
 800df92:	f009 fb23 	bl	80175dc <iprintf>
  return ERR_OK;
 800df96:	2300      	movs	r3, #0
}
 800df98:	4618      	mov	r0, r3
 800df9a:	3720      	adds	r7, #32
 800df9c:	46bd      	mov	sp, r7
 800df9e:	bd80      	pop	{r7, pc}
 800dfa0:	080208d4 	.word	0x080208d4
 800dfa4:	08020cac 	.word	0x08020cac
 800dfa8:	08020934 	.word	0x08020934
 800dfac:	08020cc4 	.word	0x08020cc4
 800dfb0:	08020ce0 	.word	0x08020ce0
 800dfb4:	08020d00 	.word	0x08020d00
 800dfb8:	08020d18 	.word	0x08020d18

0800dfbc <pbuf_take_at>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
 800dfbc:	b580      	push	{r7, lr}
 800dfbe:	b088      	sub	sp, #32
 800dfc0:	af00      	add	r7, sp, #0
 800dfc2:	60f8      	str	r0, [r7, #12]
 800dfc4:	60b9      	str	r1, [r7, #8]
 800dfc6:	4611      	mov	r1, r2
 800dfc8:	461a      	mov	r2, r3
 800dfca:	460b      	mov	r3, r1
 800dfcc:	80fb      	strh	r3, [r7, #6]
 800dfce:	4613      	mov	r3, r2
 800dfd0:	80bb      	strh	r3, [r7, #4]
  u16_t target_offset;
  struct pbuf *q = pbuf_skip(buf, offset, &target_offset);
 800dfd2:	f107 0210 	add.w	r2, r7, #16
 800dfd6:	88bb      	ldrh	r3, [r7, #4]
 800dfd8:	4619      	mov	r1, r3
 800dfda:	68f8      	ldr	r0, [r7, #12]
 800dfdc:	f7ff ff49 	bl	800de72 <pbuf_skip>
 800dfe0:	61f8      	str	r0, [r7, #28]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
 800dfe2:	69fb      	ldr	r3, [r7, #28]
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d047      	beq.n	800e078 <pbuf_take_at+0xbc>
 800dfe8:	69fb      	ldr	r3, [r7, #28]
 800dfea:	891b      	ldrh	r3, [r3, #8]
 800dfec:	461a      	mov	r2, r3
 800dfee:	8a3b      	ldrh	r3, [r7, #16]
 800dff0:	4619      	mov	r1, r3
 800dff2:	88fb      	ldrh	r3, [r7, #6]
 800dff4:	440b      	add	r3, r1
 800dff6:	429a      	cmp	r2, r3
 800dff8:	db3e      	blt.n	800e078 <pbuf_take_at+0xbc>
    u16_t remaining_len = len;
 800dffa:	88fb      	ldrh	r3, [r7, #6]
 800dffc:	837b      	strh	r3, [r7, #26]
    const u8_t *src_ptr = (const u8_t *)dataptr;
 800dffe:	68bb      	ldr	r3, [r7, #8]
 800e000:	617b      	str	r3, [r7, #20]
    /* copy the part that goes into the first pbuf */
    u16_t first_copy_len;
    LWIP_ASSERT("check pbuf_skip result", target_offset < q->len);
 800e002:	69fb      	ldr	r3, [r7, #28]
 800e004:	895a      	ldrh	r2, [r3, #10]
 800e006:	8a3b      	ldrh	r3, [r7, #16]
 800e008:	429a      	cmp	r2, r3
 800e00a:	d806      	bhi.n	800e01a <pbuf_take_at+0x5e>
 800e00c:	4b1d      	ldr	r3, [pc, #116]	@ (800e084 <pbuf_take_at+0xc8>)
 800e00e:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 800e012:	491d      	ldr	r1, [pc, #116]	@ (800e088 <pbuf_take_at+0xcc>)
 800e014:	481d      	ldr	r0, [pc, #116]	@ (800e08c <pbuf_take_at+0xd0>)
 800e016:	f009 fae1 	bl	80175dc <iprintf>
    first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
 800e01a:	69fb      	ldr	r3, [r7, #28]
 800e01c:	895b      	ldrh	r3, [r3, #10]
 800e01e:	461a      	mov	r2, r3
 800e020:	8a3b      	ldrh	r3, [r7, #16]
 800e022:	1ad2      	subs	r2, r2, r3
 800e024:	88fb      	ldrh	r3, [r7, #6]
 800e026:	429a      	cmp	r2, r3
 800e028:	da05      	bge.n	800e036 <pbuf_take_at+0x7a>
 800e02a:	69fb      	ldr	r3, [r7, #28]
 800e02c:	895a      	ldrh	r2, [r3, #10]
 800e02e:	8a3b      	ldrh	r3, [r7, #16]
 800e030:	1ad3      	subs	r3, r2, r3
 800e032:	b29b      	uxth	r3, r3
 800e034:	e000      	b.n	800e038 <pbuf_take_at+0x7c>
 800e036:	88fb      	ldrh	r3, [r7, #6]
 800e038:	827b      	strh	r3, [r7, #18]
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 800e03a:	69fb      	ldr	r3, [r7, #28]
 800e03c:	685b      	ldr	r3, [r3, #4]
 800e03e:	8a3a      	ldrh	r2, [r7, #16]
 800e040:	4413      	add	r3, r2
 800e042:	8a7a      	ldrh	r2, [r7, #18]
 800e044:	68b9      	ldr	r1, [r7, #8]
 800e046:	4618      	mov	r0, r3
 800e048:	f009 fc1f 	bl	801788a <memcpy>
    remaining_len = (u16_t)(remaining_len - first_copy_len);
 800e04c:	8b7a      	ldrh	r2, [r7, #26]
 800e04e:	8a7b      	ldrh	r3, [r7, #18]
 800e050:	1ad3      	subs	r3, r2, r3
 800e052:	837b      	strh	r3, [r7, #26]
    src_ptr += first_copy_len;
 800e054:	8a7b      	ldrh	r3, [r7, #18]
 800e056:	697a      	ldr	r2, [r7, #20]
 800e058:	4413      	add	r3, r2
 800e05a:	617b      	str	r3, [r7, #20]
    if (remaining_len > 0) {
 800e05c:	8b7b      	ldrh	r3, [r7, #26]
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d008      	beq.n	800e074 <pbuf_take_at+0xb8>
      return pbuf_take(q->next, src_ptr, remaining_len);
 800e062:	69fb      	ldr	r3, [r7, #28]
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	8b7a      	ldrh	r2, [r7, #26]
 800e068:	6979      	ldr	r1, [r7, #20]
 800e06a:	4618      	mov	r0, r3
 800e06c:	f7ff ff14 	bl	800de98 <pbuf_take>
 800e070:	4603      	mov	r3, r0
 800e072:	e003      	b.n	800e07c <pbuf_take_at+0xc0>
    }
    return ERR_OK;
 800e074:	2300      	movs	r3, #0
 800e076:	e001      	b.n	800e07c <pbuf_take_at+0xc0>
  }
  return ERR_MEM;
 800e078:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e07c:	4618      	mov	r0, r3
 800e07e:	3720      	adds	r7, #32
 800e080:	46bd      	mov	sp, r7
 800e082:	bd80      	pop	{r7, pc}
 800e084:	080208d4 	.word	0x080208d4
 800e088:	08020d30 	.word	0x08020d30
 800e08c:	08020934 	.word	0x08020934

0800e090 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800e090:	b580      	push	{r7, lr}
 800e092:	b084      	sub	sp, #16
 800e094:	af00      	add	r7, sp, #0
 800e096:	4603      	mov	r3, r0
 800e098:	603a      	str	r2, [r7, #0]
 800e09a:	71fb      	strb	r3, [r7, #7]
 800e09c:	460b      	mov	r3, r1
 800e09e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800e0a0:	683b      	ldr	r3, [r7, #0]
 800e0a2:	8919      	ldrh	r1, [r3, #8]
 800e0a4:	88ba      	ldrh	r2, [r7, #4]
 800e0a6:	79fb      	ldrb	r3, [r7, #7]
 800e0a8:	4618      	mov	r0, r3
 800e0aa:	f7ff f969 	bl	800d380 <pbuf_alloc>
 800e0ae:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d101      	bne.n	800e0ba <pbuf_clone+0x2a>
    return NULL;
 800e0b6:	2300      	movs	r3, #0
 800e0b8:	e011      	b.n	800e0de <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800e0ba:	6839      	ldr	r1, [r7, #0]
 800e0bc:	68f8      	ldr	r0, [r7, #12]
 800e0be:	f7ff fd6b 	bl	800db98 <pbuf_copy>
 800e0c2:	4603      	mov	r3, r0
 800e0c4:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800e0c6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d006      	beq.n	800e0dc <pbuf_clone+0x4c>
 800e0ce:	4b06      	ldr	r3, [pc, #24]	@ (800e0e8 <pbuf_clone+0x58>)
 800e0d0:	f240 5224 	movw	r2, #1316	@ 0x524
 800e0d4:	4905      	ldr	r1, [pc, #20]	@ (800e0ec <pbuf_clone+0x5c>)
 800e0d6:	4806      	ldr	r0, [pc, #24]	@ (800e0f0 <pbuf_clone+0x60>)
 800e0d8:	f009 fa80 	bl	80175dc <iprintf>
  return q;
 800e0dc:	68fb      	ldr	r3, [r7, #12]
}
 800e0de:	4618      	mov	r0, r3
 800e0e0:	3710      	adds	r7, #16
 800e0e2:	46bd      	mov	sp, r7
 800e0e4:	bd80      	pop	{r7, pc}
 800e0e6:	bf00      	nop
 800e0e8:	080208d4 	.word	0x080208d4
 800e0ec:	08020d48 	.word	0x08020d48
 800e0f0:	08020934 	.word	0x08020934

0800e0f4 <pbuf_put_at>:
 * @param offset offset into p of the byte to write
 * @param data byte to write at an offset into p
 */
void
pbuf_put_at(struct pbuf *p, u16_t offset, u8_t data)
{
 800e0f4:	b580      	push	{r7, lr}
 800e0f6:	b084      	sub	sp, #16
 800e0f8:	af00      	add	r7, sp, #0
 800e0fa:	6078      	str	r0, [r7, #4]
 800e0fc:	460b      	mov	r3, r1
 800e0fe:	807b      	strh	r3, [r7, #2]
 800e100:	4613      	mov	r3, r2
 800e102:	707b      	strb	r3, [r7, #1]
  u16_t q_idx;
  struct pbuf *q = pbuf_skip(p, offset, &q_idx);
 800e104:	f107 020a 	add.w	r2, r7, #10
 800e108:	887b      	ldrh	r3, [r7, #2]
 800e10a:	4619      	mov	r1, r3
 800e10c:	6878      	ldr	r0, [r7, #4]
 800e10e:	f7ff feb0 	bl	800de72 <pbuf_skip>
 800e112:	60f8      	str	r0, [r7, #12]

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	2b00      	cmp	r3, #0
 800e118:	d00a      	beq.n	800e130 <pbuf_put_at+0x3c>
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	895a      	ldrh	r2, [r3, #10]
 800e11e:	897b      	ldrh	r3, [r7, #10]
 800e120:	429a      	cmp	r2, r3
 800e122:	d905      	bls.n	800e130 <pbuf_put_at+0x3c>
    ((u8_t *)q->payload)[q_idx] = data;
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	685b      	ldr	r3, [r3, #4]
 800e128:	897a      	ldrh	r2, [r7, #10]
 800e12a:	4413      	add	r3, r2
 800e12c:	787a      	ldrb	r2, [r7, #1]
 800e12e:	701a      	strb	r2, [r3, #0]
  }
}
 800e130:	bf00      	nop
 800e132:	3710      	adds	r7, #16
 800e134:	46bd      	mov	sp, r7
 800e136:	bd80      	pop	{r7, pc}

0800e138 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800e138:	b580      	push	{r7, lr}
 800e13a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800e13c:	f008 fabc 	bl	80166b8 <rand>
 800e140:	4603      	mov	r3, r0
 800e142:	b29b      	uxth	r3, r3
 800e144:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800e148:	b29b      	uxth	r3, r3
 800e14a:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800e14e:	b29a      	uxth	r2, r3
 800e150:	4b01      	ldr	r3, [pc, #4]	@ (800e158 <tcp_init+0x20>)
 800e152:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800e154:	bf00      	nop
 800e156:	bd80      	pop	{r7, pc}
 800e158:	20000908 	.word	0x20000908

0800e15c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800e15c:	b580      	push	{r7, lr}
 800e15e:	b082      	sub	sp, #8
 800e160:	af00      	add	r7, sp, #0
 800e162:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	7d1b      	ldrb	r3, [r3, #20]
 800e168:	2b01      	cmp	r3, #1
 800e16a:	d105      	bne.n	800e178 <tcp_free+0x1c>
 800e16c:	4b06      	ldr	r3, [pc, #24]	@ (800e188 <tcp_free+0x2c>)
 800e16e:	22d4      	movs	r2, #212	@ 0xd4
 800e170:	4906      	ldr	r1, [pc, #24]	@ (800e18c <tcp_free+0x30>)
 800e172:	4807      	ldr	r0, [pc, #28]	@ (800e190 <tcp_free+0x34>)
 800e174:	f009 fa32 	bl	80175dc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800e178:	6879      	ldr	r1, [r7, #4]
 800e17a:	2001      	movs	r0, #1
 800e17c:	f7fe fd6e 	bl	800cc5c <memp_free>
}
 800e180:	bf00      	nop
 800e182:	3708      	adds	r7, #8
 800e184:	46bd      	mov	sp, r7
 800e186:	bd80      	pop	{r7, pc}
 800e188:	08020dd4 	.word	0x08020dd4
 800e18c:	08020e04 	.word	0x08020e04
 800e190:	08020e18 	.word	0x08020e18

0800e194 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800e194:	b580      	push	{r7, lr}
 800e196:	b082      	sub	sp, #8
 800e198:	af00      	add	r7, sp, #0
 800e19a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	7d1b      	ldrb	r3, [r3, #20]
 800e1a0:	2b01      	cmp	r3, #1
 800e1a2:	d105      	bne.n	800e1b0 <tcp_free_listen+0x1c>
 800e1a4:	4b06      	ldr	r3, [pc, #24]	@ (800e1c0 <tcp_free_listen+0x2c>)
 800e1a6:	22df      	movs	r2, #223	@ 0xdf
 800e1a8:	4906      	ldr	r1, [pc, #24]	@ (800e1c4 <tcp_free_listen+0x30>)
 800e1aa:	4807      	ldr	r0, [pc, #28]	@ (800e1c8 <tcp_free_listen+0x34>)
 800e1ac:	f009 fa16 	bl	80175dc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800e1b0:	6879      	ldr	r1, [r7, #4]
 800e1b2:	2002      	movs	r0, #2
 800e1b4:	f7fe fd52 	bl	800cc5c <memp_free>
}
 800e1b8:	bf00      	nop
 800e1ba:	3708      	adds	r7, #8
 800e1bc:	46bd      	mov	sp, r7
 800e1be:	bd80      	pop	{r7, pc}
 800e1c0:	08020dd4 	.word	0x08020dd4
 800e1c4:	08020e40 	.word	0x08020e40
 800e1c8:	08020e18 	.word	0x08020e18

0800e1cc <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800e1cc:	b580      	push	{r7, lr}
 800e1ce:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800e1d0:	f000 fea4 	bl	800ef1c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800e1d4:	4b07      	ldr	r3, [pc, #28]	@ (800e1f4 <tcp_tmr+0x28>)
 800e1d6:	781b      	ldrb	r3, [r3, #0]
 800e1d8:	3301      	adds	r3, #1
 800e1da:	b2da      	uxtb	r2, r3
 800e1dc:	4b05      	ldr	r3, [pc, #20]	@ (800e1f4 <tcp_tmr+0x28>)
 800e1de:	701a      	strb	r2, [r3, #0]
 800e1e0:	4b04      	ldr	r3, [pc, #16]	@ (800e1f4 <tcp_tmr+0x28>)
 800e1e2:	781b      	ldrb	r3, [r3, #0]
 800e1e4:	f003 0301 	and.w	r3, r3, #1
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d001      	beq.n	800e1f0 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800e1ec:	f000 fb54 	bl	800e898 <tcp_slowtmr>
  }
}
 800e1f0:	bf00      	nop
 800e1f2:	bd80      	pop	{r7, pc}
 800e1f4:	200151cd 	.word	0x200151cd

0800e1f8 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800e1f8:	b580      	push	{r7, lr}
 800e1fa:	b084      	sub	sp, #16
 800e1fc:	af00      	add	r7, sp, #0
 800e1fe:	6078      	str	r0, [r7, #4]
 800e200:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800e202:	683b      	ldr	r3, [r7, #0]
 800e204:	2b00      	cmp	r3, #0
 800e206:	d105      	bne.n	800e214 <tcp_remove_listener+0x1c>
 800e208:	4b0d      	ldr	r3, [pc, #52]	@ (800e240 <tcp_remove_listener+0x48>)
 800e20a:	22ff      	movs	r2, #255	@ 0xff
 800e20c:	490d      	ldr	r1, [pc, #52]	@ (800e244 <tcp_remove_listener+0x4c>)
 800e20e:	480e      	ldr	r0, [pc, #56]	@ (800e248 <tcp_remove_listener+0x50>)
 800e210:	f009 f9e4 	bl	80175dc <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	60fb      	str	r3, [r7, #12]
 800e218:	e00a      	b.n	800e230 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e21e:	683a      	ldr	r2, [r7, #0]
 800e220:	429a      	cmp	r2, r3
 800e222:	d102      	bne.n	800e22a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	2200      	movs	r2, #0
 800e228:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	68db      	ldr	r3, [r3, #12]
 800e22e:	60fb      	str	r3, [r7, #12]
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	2b00      	cmp	r3, #0
 800e234:	d1f1      	bne.n	800e21a <tcp_remove_listener+0x22>
    }
  }
}
 800e236:	bf00      	nop
 800e238:	bf00      	nop
 800e23a:	3710      	adds	r7, #16
 800e23c:	46bd      	mov	sp, r7
 800e23e:	bd80      	pop	{r7, pc}
 800e240:	08020dd4 	.word	0x08020dd4
 800e244:	08020e5c 	.word	0x08020e5c
 800e248:	08020e18 	.word	0x08020e18

0800e24c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800e24c:	b580      	push	{r7, lr}
 800e24e:	b084      	sub	sp, #16
 800e250:	af00      	add	r7, sp, #0
 800e252:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	2b00      	cmp	r3, #0
 800e258:	d106      	bne.n	800e268 <tcp_listen_closed+0x1c>
 800e25a:	4b14      	ldr	r3, [pc, #80]	@ (800e2ac <tcp_listen_closed+0x60>)
 800e25c:	f240 1211 	movw	r2, #273	@ 0x111
 800e260:	4913      	ldr	r1, [pc, #76]	@ (800e2b0 <tcp_listen_closed+0x64>)
 800e262:	4814      	ldr	r0, [pc, #80]	@ (800e2b4 <tcp_listen_closed+0x68>)
 800e264:	f009 f9ba 	bl	80175dc <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	7d1b      	ldrb	r3, [r3, #20]
 800e26c:	2b01      	cmp	r3, #1
 800e26e:	d006      	beq.n	800e27e <tcp_listen_closed+0x32>
 800e270:	4b0e      	ldr	r3, [pc, #56]	@ (800e2ac <tcp_listen_closed+0x60>)
 800e272:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800e276:	4910      	ldr	r1, [pc, #64]	@ (800e2b8 <tcp_listen_closed+0x6c>)
 800e278:	480e      	ldr	r0, [pc, #56]	@ (800e2b4 <tcp_listen_closed+0x68>)
 800e27a:	f009 f9af 	bl	80175dc <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800e27e:	2301      	movs	r3, #1
 800e280:	60fb      	str	r3, [r7, #12]
 800e282:	e00b      	b.n	800e29c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800e284:	4a0d      	ldr	r2, [pc, #52]	@ (800e2bc <tcp_listen_closed+0x70>)
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	6879      	ldr	r1, [r7, #4]
 800e290:	4618      	mov	r0, r3
 800e292:	f7ff ffb1 	bl	800e1f8 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	3301      	adds	r3, #1
 800e29a:	60fb      	str	r3, [r7, #12]
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	2b03      	cmp	r3, #3
 800e2a0:	d9f0      	bls.n	800e284 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800e2a2:	bf00      	nop
 800e2a4:	bf00      	nop
 800e2a6:	3710      	adds	r7, #16
 800e2a8:	46bd      	mov	sp, r7
 800e2aa:	bd80      	pop	{r7, pc}
 800e2ac:	08020dd4 	.word	0x08020dd4
 800e2b0:	08020e84 	.word	0x08020e84
 800e2b4:	08020e18 	.word	0x08020e18
 800e2b8:	08020e90 	.word	0x08020e90
 800e2bc:	08022db4 	.word	0x08022db4

0800e2c0 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800e2c0:	b5b0      	push	{r4, r5, r7, lr}
 800e2c2:	b088      	sub	sp, #32
 800e2c4:	af04      	add	r7, sp, #16
 800e2c6:	6078      	str	r0, [r7, #4]
 800e2c8:	460b      	mov	r3, r1
 800e2ca:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d106      	bne.n	800e2e0 <tcp_close_shutdown+0x20>
 800e2d2:	4b63      	ldr	r3, [pc, #396]	@ (800e460 <tcp_close_shutdown+0x1a0>)
 800e2d4:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800e2d8:	4962      	ldr	r1, [pc, #392]	@ (800e464 <tcp_close_shutdown+0x1a4>)
 800e2da:	4863      	ldr	r0, [pc, #396]	@ (800e468 <tcp_close_shutdown+0x1a8>)
 800e2dc:	f009 f97e 	bl	80175dc <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800e2e0:	78fb      	ldrb	r3, [r7, #3]
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d066      	beq.n	800e3b4 <tcp_close_shutdown+0xf4>
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	7d1b      	ldrb	r3, [r3, #20]
 800e2ea:	2b04      	cmp	r3, #4
 800e2ec:	d003      	beq.n	800e2f6 <tcp_close_shutdown+0x36>
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	7d1b      	ldrb	r3, [r3, #20]
 800e2f2:	2b07      	cmp	r3, #7
 800e2f4:	d15e      	bne.n	800e3b4 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d104      	bne.n	800e308 <tcp_close_shutdown+0x48>
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e302:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800e306:	d055      	beq.n	800e3b4 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	8b5b      	ldrh	r3, [r3, #26]
 800e30c:	f003 0310 	and.w	r3, r3, #16
 800e310:	2b00      	cmp	r3, #0
 800e312:	d106      	bne.n	800e322 <tcp_close_shutdown+0x62>
 800e314:	4b52      	ldr	r3, [pc, #328]	@ (800e460 <tcp_close_shutdown+0x1a0>)
 800e316:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800e31a:	4954      	ldr	r1, [pc, #336]	@ (800e46c <tcp_close_shutdown+0x1ac>)
 800e31c:	4852      	ldr	r0, [pc, #328]	@ (800e468 <tcp_close_shutdown+0x1a8>)
 800e31e:	f009 f95d 	bl	80175dc <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800e32a:	687d      	ldr	r5, [r7, #4]
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	3304      	adds	r3, #4
 800e330:	687a      	ldr	r2, [r7, #4]
 800e332:	8ad2      	ldrh	r2, [r2, #22]
 800e334:	6879      	ldr	r1, [r7, #4]
 800e336:	8b09      	ldrh	r1, [r1, #24]
 800e338:	9102      	str	r1, [sp, #8]
 800e33a:	9201      	str	r2, [sp, #4]
 800e33c:	9300      	str	r3, [sp, #0]
 800e33e:	462b      	mov	r3, r5
 800e340:	4622      	mov	r2, r4
 800e342:	4601      	mov	r1, r0
 800e344:	6878      	ldr	r0, [r7, #4]
 800e346:	f004 fe8d 	bl	8013064 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800e34a:	6878      	ldr	r0, [r7, #4]
 800e34c:	f001 f8c8 	bl	800f4e0 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800e350:	4b47      	ldr	r3, [pc, #284]	@ (800e470 <tcp_close_shutdown+0x1b0>)
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	687a      	ldr	r2, [r7, #4]
 800e356:	429a      	cmp	r2, r3
 800e358:	d105      	bne.n	800e366 <tcp_close_shutdown+0xa6>
 800e35a:	4b45      	ldr	r3, [pc, #276]	@ (800e470 <tcp_close_shutdown+0x1b0>)
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	68db      	ldr	r3, [r3, #12]
 800e360:	4a43      	ldr	r2, [pc, #268]	@ (800e470 <tcp_close_shutdown+0x1b0>)
 800e362:	6013      	str	r3, [r2, #0]
 800e364:	e013      	b.n	800e38e <tcp_close_shutdown+0xce>
 800e366:	4b42      	ldr	r3, [pc, #264]	@ (800e470 <tcp_close_shutdown+0x1b0>)
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	60fb      	str	r3, [r7, #12]
 800e36c:	e00c      	b.n	800e388 <tcp_close_shutdown+0xc8>
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	68db      	ldr	r3, [r3, #12]
 800e372:	687a      	ldr	r2, [r7, #4]
 800e374:	429a      	cmp	r2, r3
 800e376:	d104      	bne.n	800e382 <tcp_close_shutdown+0xc2>
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	68da      	ldr	r2, [r3, #12]
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	60da      	str	r2, [r3, #12]
 800e380:	e005      	b.n	800e38e <tcp_close_shutdown+0xce>
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	68db      	ldr	r3, [r3, #12]
 800e386:	60fb      	str	r3, [r7, #12]
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d1ef      	bne.n	800e36e <tcp_close_shutdown+0xae>
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	2200      	movs	r2, #0
 800e392:	60da      	str	r2, [r3, #12]
 800e394:	4b37      	ldr	r3, [pc, #220]	@ (800e474 <tcp_close_shutdown+0x1b4>)
 800e396:	2201      	movs	r2, #1
 800e398:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800e39a:	4b37      	ldr	r3, [pc, #220]	@ (800e478 <tcp_close_shutdown+0x1b8>)
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	687a      	ldr	r2, [r7, #4]
 800e3a0:	429a      	cmp	r2, r3
 800e3a2:	d102      	bne.n	800e3aa <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800e3a4:	f003 fd5c 	bl	8011e60 <tcp_trigger_input_pcb_close>
 800e3a8:	e002      	b.n	800e3b0 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800e3aa:	6878      	ldr	r0, [r7, #4]
 800e3ac:	f7ff fed6 	bl	800e15c <tcp_free>
      }
      return ERR_OK;
 800e3b0:	2300      	movs	r3, #0
 800e3b2:	e050      	b.n	800e456 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	7d1b      	ldrb	r3, [r3, #20]
 800e3b8:	2b02      	cmp	r3, #2
 800e3ba:	d03b      	beq.n	800e434 <tcp_close_shutdown+0x174>
 800e3bc:	2b02      	cmp	r3, #2
 800e3be:	dc44      	bgt.n	800e44a <tcp_close_shutdown+0x18a>
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d002      	beq.n	800e3ca <tcp_close_shutdown+0x10a>
 800e3c4:	2b01      	cmp	r3, #1
 800e3c6:	d02a      	beq.n	800e41e <tcp_close_shutdown+0x15e>
 800e3c8:	e03f      	b.n	800e44a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	8adb      	ldrh	r3, [r3, #22]
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d021      	beq.n	800e416 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e3d2:	4b2a      	ldr	r3, [pc, #168]	@ (800e47c <tcp_close_shutdown+0x1bc>)
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	687a      	ldr	r2, [r7, #4]
 800e3d8:	429a      	cmp	r2, r3
 800e3da:	d105      	bne.n	800e3e8 <tcp_close_shutdown+0x128>
 800e3dc:	4b27      	ldr	r3, [pc, #156]	@ (800e47c <tcp_close_shutdown+0x1bc>)
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	68db      	ldr	r3, [r3, #12]
 800e3e2:	4a26      	ldr	r2, [pc, #152]	@ (800e47c <tcp_close_shutdown+0x1bc>)
 800e3e4:	6013      	str	r3, [r2, #0]
 800e3e6:	e013      	b.n	800e410 <tcp_close_shutdown+0x150>
 800e3e8:	4b24      	ldr	r3, [pc, #144]	@ (800e47c <tcp_close_shutdown+0x1bc>)
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	60bb      	str	r3, [r7, #8]
 800e3ee:	e00c      	b.n	800e40a <tcp_close_shutdown+0x14a>
 800e3f0:	68bb      	ldr	r3, [r7, #8]
 800e3f2:	68db      	ldr	r3, [r3, #12]
 800e3f4:	687a      	ldr	r2, [r7, #4]
 800e3f6:	429a      	cmp	r2, r3
 800e3f8:	d104      	bne.n	800e404 <tcp_close_shutdown+0x144>
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	68da      	ldr	r2, [r3, #12]
 800e3fe:	68bb      	ldr	r3, [r7, #8]
 800e400:	60da      	str	r2, [r3, #12]
 800e402:	e005      	b.n	800e410 <tcp_close_shutdown+0x150>
 800e404:	68bb      	ldr	r3, [r7, #8]
 800e406:	68db      	ldr	r3, [r3, #12]
 800e408:	60bb      	str	r3, [r7, #8]
 800e40a:	68bb      	ldr	r3, [r7, #8]
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d1ef      	bne.n	800e3f0 <tcp_close_shutdown+0x130>
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	2200      	movs	r2, #0
 800e414:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800e416:	6878      	ldr	r0, [r7, #4]
 800e418:	f7ff fea0 	bl	800e15c <tcp_free>
      break;
 800e41c:	e01a      	b.n	800e454 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800e41e:	6878      	ldr	r0, [r7, #4]
 800e420:	f7ff ff14 	bl	800e24c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800e424:	6879      	ldr	r1, [r7, #4]
 800e426:	4816      	ldr	r0, [pc, #88]	@ (800e480 <tcp_close_shutdown+0x1c0>)
 800e428:	f001 f8aa 	bl	800f580 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800e42c:	6878      	ldr	r0, [r7, #4]
 800e42e:	f7ff feb1 	bl	800e194 <tcp_free_listen>
      break;
 800e432:	e00f      	b.n	800e454 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e434:	6879      	ldr	r1, [r7, #4]
 800e436:	480e      	ldr	r0, [pc, #56]	@ (800e470 <tcp_close_shutdown+0x1b0>)
 800e438:	f001 f8a2 	bl	800f580 <tcp_pcb_remove>
 800e43c:	4b0d      	ldr	r3, [pc, #52]	@ (800e474 <tcp_close_shutdown+0x1b4>)
 800e43e:	2201      	movs	r2, #1
 800e440:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800e442:	6878      	ldr	r0, [r7, #4]
 800e444:	f7ff fe8a 	bl	800e15c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800e448:	e004      	b.n	800e454 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800e44a:	6878      	ldr	r0, [r7, #4]
 800e44c:	f000 f81a 	bl	800e484 <tcp_close_shutdown_fin>
 800e450:	4603      	mov	r3, r0
 800e452:	e000      	b.n	800e456 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800e454:	2300      	movs	r3, #0
}
 800e456:	4618      	mov	r0, r3
 800e458:	3710      	adds	r7, #16
 800e45a:	46bd      	mov	sp, r7
 800e45c:	bdb0      	pop	{r4, r5, r7, pc}
 800e45e:	bf00      	nop
 800e460:	08020dd4 	.word	0x08020dd4
 800e464:	08020ea8 	.word	0x08020ea8
 800e468:	08020e18 	.word	0x08020e18
 800e46c:	08020ec8 	.word	0x08020ec8
 800e470:	200151c4 	.word	0x200151c4
 800e474:	200151cc 	.word	0x200151cc
 800e478:	20015204 	.word	0x20015204
 800e47c:	200151bc 	.word	0x200151bc
 800e480:	200151c0 	.word	0x200151c0

0800e484 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800e484:	b580      	push	{r7, lr}
 800e486:	b084      	sub	sp, #16
 800e488:	af00      	add	r7, sp, #0
 800e48a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d106      	bne.n	800e4a0 <tcp_close_shutdown_fin+0x1c>
 800e492:	4b2e      	ldr	r3, [pc, #184]	@ (800e54c <tcp_close_shutdown_fin+0xc8>)
 800e494:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800e498:	492d      	ldr	r1, [pc, #180]	@ (800e550 <tcp_close_shutdown_fin+0xcc>)
 800e49a:	482e      	ldr	r0, [pc, #184]	@ (800e554 <tcp_close_shutdown_fin+0xd0>)
 800e49c:	f009 f89e 	bl	80175dc <iprintf>

  switch (pcb->state) {
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	7d1b      	ldrb	r3, [r3, #20]
 800e4a4:	2b07      	cmp	r3, #7
 800e4a6:	d020      	beq.n	800e4ea <tcp_close_shutdown_fin+0x66>
 800e4a8:	2b07      	cmp	r3, #7
 800e4aa:	dc2b      	bgt.n	800e504 <tcp_close_shutdown_fin+0x80>
 800e4ac:	2b03      	cmp	r3, #3
 800e4ae:	d002      	beq.n	800e4b6 <tcp_close_shutdown_fin+0x32>
 800e4b0:	2b04      	cmp	r3, #4
 800e4b2:	d00d      	beq.n	800e4d0 <tcp_close_shutdown_fin+0x4c>
 800e4b4:	e026      	b.n	800e504 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800e4b6:	6878      	ldr	r0, [r7, #4]
 800e4b8:	f003 fee2 	bl	8012280 <tcp_send_fin>
 800e4bc:	4603      	mov	r3, r0
 800e4be:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e4c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d11f      	bne.n	800e508 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	2205      	movs	r2, #5
 800e4cc:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e4ce:	e01b      	b.n	800e508 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800e4d0:	6878      	ldr	r0, [r7, #4]
 800e4d2:	f003 fed5 	bl	8012280 <tcp_send_fin>
 800e4d6:	4603      	mov	r3, r0
 800e4d8:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e4da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d114      	bne.n	800e50c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	2205      	movs	r2, #5
 800e4e6:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e4e8:	e010      	b.n	800e50c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800e4ea:	6878      	ldr	r0, [r7, #4]
 800e4ec:	f003 fec8 	bl	8012280 <tcp_send_fin>
 800e4f0:	4603      	mov	r3, r0
 800e4f2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e4f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d109      	bne.n	800e510 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	2209      	movs	r2, #9
 800e500:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e502:	e005      	b.n	800e510 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800e504:	2300      	movs	r3, #0
 800e506:	e01c      	b.n	800e542 <tcp_close_shutdown_fin+0xbe>
      break;
 800e508:	bf00      	nop
 800e50a:	e002      	b.n	800e512 <tcp_close_shutdown_fin+0x8e>
      break;
 800e50c:	bf00      	nop
 800e50e:	e000      	b.n	800e512 <tcp_close_shutdown_fin+0x8e>
      break;
 800e510:	bf00      	nop
  }

  if (err == ERR_OK) {
 800e512:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e516:	2b00      	cmp	r3, #0
 800e518:	d103      	bne.n	800e522 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800e51a:	6878      	ldr	r0, [r7, #4]
 800e51c:	f003 ffee 	bl	80124fc <tcp_output>
 800e520:	e00d      	b.n	800e53e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800e522:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e52a:	d108      	bne.n	800e53e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	8b5b      	ldrh	r3, [r3, #26]
 800e530:	f043 0308 	orr.w	r3, r3, #8
 800e534:	b29a      	uxth	r2, r3
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800e53a:	2300      	movs	r3, #0
 800e53c:	e001      	b.n	800e542 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800e53e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e542:	4618      	mov	r0, r3
 800e544:	3710      	adds	r7, #16
 800e546:	46bd      	mov	sp, r7
 800e548:	bd80      	pop	{r7, pc}
 800e54a:	bf00      	nop
 800e54c:	08020dd4 	.word	0x08020dd4
 800e550:	08020e84 	.word	0x08020e84
 800e554:	08020e18 	.word	0x08020e18

0800e558 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800e558:	b580      	push	{r7, lr}
 800e55a:	b082      	sub	sp, #8
 800e55c:	af00      	add	r7, sp, #0
 800e55e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	2b00      	cmp	r3, #0
 800e564:	d109      	bne.n	800e57a <tcp_close+0x22>
 800e566:	4b0f      	ldr	r3, [pc, #60]	@ (800e5a4 <tcp_close+0x4c>)
 800e568:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800e56c:	490e      	ldr	r1, [pc, #56]	@ (800e5a8 <tcp_close+0x50>)
 800e56e:	480f      	ldr	r0, [pc, #60]	@ (800e5ac <tcp_close+0x54>)
 800e570:	f009 f834 	bl	80175dc <iprintf>
 800e574:	f06f 030f 	mvn.w	r3, #15
 800e578:	e00f      	b.n	800e59a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	7d1b      	ldrb	r3, [r3, #20]
 800e57e:	2b01      	cmp	r3, #1
 800e580:	d006      	beq.n	800e590 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	8b5b      	ldrh	r3, [r3, #26]
 800e586:	f043 0310 	orr.w	r3, r3, #16
 800e58a:	b29a      	uxth	r2, r3
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800e590:	2101      	movs	r1, #1
 800e592:	6878      	ldr	r0, [r7, #4]
 800e594:	f7ff fe94 	bl	800e2c0 <tcp_close_shutdown>
 800e598:	4603      	mov	r3, r0
}
 800e59a:	4618      	mov	r0, r3
 800e59c:	3708      	adds	r7, #8
 800e59e:	46bd      	mov	sp, r7
 800e5a0:	bd80      	pop	{r7, pc}
 800e5a2:	bf00      	nop
 800e5a4:	08020dd4 	.word	0x08020dd4
 800e5a8:	08020ee4 	.word	0x08020ee4
 800e5ac:	08020e18 	.word	0x08020e18

0800e5b0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800e5b0:	b580      	push	{r7, lr}
 800e5b2:	b08e      	sub	sp, #56	@ 0x38
 800e5b4:	af04      	add	r7, sp, #16
 800e5b6:	6078      	str	r0, [r7, #4]
 800e5b8:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d107      	bne.n	800e5d0 <tcp_abandon+0x20>
 800e5c0:	4b52      	ldr	r3, [pc, #328]	@ (800e70c <tcp_abandon+0x15c>)
 800e5c2:	f240 223d 	movw	r2, #573	@ 0x23d
 800e5c6:	4952      	ldr	r1, [pc, #328]	@ (800e710 <tcp_abandon+0x160>)
 800e5c8:	4852      	ldr	r0, [pc, #328]	@ (800e714 <tcp_abandon+0x164>)
 800e5ca:	f009 f807 	bl	80175dc <iprintf>
 800e5ce:	e099      	b.n	800e704 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	7d1b      	ldrb	r3, [r3, #20]
 800e5d4:	2b01      	cmp	r3, #1
 800e5d6:	d106      	bne.n	800e5e6 <tcp_abandon+0x36>
 800e5d8:	4b4c      	ldr	r3, [pc, #304]	@ (800e70c <tcp_abandon+0x15c>)
 800e5da:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800e5de:	494e      	ldr	r1, [pc, #312]	@ (800e718 <tcp_abandon+0x168>)
 800e5e0:	484c      	ldr	r0, [pc, #304]	@ (800e714 <tcp_abandon+0x164>)
 800e5e2:	f008 fffb 	bl	80175dc <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	7d1b      	ldrb	r3, [r3, #20]
 800e5ea:	2b0a      	cmp	r3, #10
 800e5ec:	d107      	bne.n	800e5fe <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800e5ee:	6879      	ldr	r1, [r7, #4]
 800e5f0:	484a      	ldr	r0, [pc, #296]	@ (800e71c <tcp_abandon+0x16c>)
 800e5f2:	f000 ffc5 	bl	800f580 <tcp_pcb_remove>
    tcp_free(pcb);
 800e5f6:	6878      	ldr	r0, [r7, #4]
 800e5f8:	f7ff fdb0 	bl	800e15c <tcp_free>
 800e5fc:	e082      	b.n	800e704 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800e5fe:	2300      	movs	r3, #0
 800e600:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 800e602:	2300      	movs	r3, #0
 800e604:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e60a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e610:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e618:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	691b      	ldr	r3, [r3, #16]
 800e61e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	7d1b      	ldrb	r3, [r3, #20]
 800e624:	2b00      	cmp	r3, #0
 800e626:	d126      	bne.n	800e676 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	8adb      	ldrh	r3, [r3, #22]
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d02e      	beq.n	800e68e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e630:	4b3b      	ldr	r3, [pc, #236]	@ (800e720 <tcp_abandon+0x170>)
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	687a      	ldr	r2, [r7, #4]
 800e636:	429a      	cmp	r2, r3
 800e638:	d105      	bne.n	800e646 <tcp_abandon+0x96>
 800e63a:	4b39      	ldr	r3, [pc, #228]	@ (800e720 <tcp_abandon+0x170>)
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	68db      	ldr	r3, [r3, #12]
 800e640:	4a37      	ldr	r2, [pc, #220]	@ (800e720 <tcp_abandon+0x170>)
 800e642:	6013      	str	r3, [r2, #0]
 800e644:	e013      	b.n	800e66e <tcp_abandon+0xbe>
 800e646:	4b36      	ldr	r3, [pc, #216]	@ (800e720 <tcp_abandon+0x170>)
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	61fb      	str	r3, [r7, #28]
 800e64c:	e00c      	b.n	800e668 <tcp_abandon+0xb8>
 800e64e:	69fb      	ldr	r3, [r7, #28]
 800e650:	68db      	ldr	r3, [r3, #12]
 800e652:	687a      	ldr	r2, [r7, #4]
 800e654:	429a      	cmp	r2, r3
 800e656:	d104      	bne.n	800e662 <tcp_abandon+0xb2>
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	68da      	ldr	r2, [r3, #12]
 800e65c:	69fb      	ldr	r3, [r7, #28]
 800e65e:	60da      	str	r2, [r3, #12]
 800e660:	e005      	b.n	800e66e <tcp_abandon+0xbe>
 800e662:	69fb      	ldr	r3, [r7, #28]
 800e664:	68db      	ldr	r3, [r3, #12]
 800e666:	61fb      	str	r3, [r7, #28]
 800e668:	69fb      	ldr	r3, [r7, #28]
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d1ef      	bne.n	800e64e <tcp_abandon+0x9e>
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	2200      	movs	r2, #0
 800e672:	60da      	str	r2, [r3, #12]
 800e674:	e00b      	b.n	800e68e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800e676:	683b      	ldr	r3, [r7, #0]
 800e678:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	8adb      	ldrh	r3, [r3, #22]
 800e67e:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e680:	6879      	ldr	r1, [r7, #4]
 800e682:	4828      	ldr	r0, [pc, #160]	@ (800e724 <tcp_abandon+0x174>)
 800e684:	f000 ff7c 	bl	800f580 <tcp_pcb_remove>
 800e688:	4b27      	ldr	r3, [pc, #156]	@ (800e728 <tcp_abandon+0x178>)
 800e68a:	2201      	movs	r2, #1
 800e68c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e692:	2b00      	cmp	r3, #0
 800e694:	d004      	beq.n	800e6a0 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e69a:	4618      	mov	r0, r3
 800e69c:	f000 fd1e 	bl	800f0dc <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d004      	beq.n	800e6b2 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e6ac:	4618      	mov	r0, r3
 800e6ae:	f000 fd15 	bl	800f0dc <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d004      	beq.n	800e6c4 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e6be:	4618      	mov	r0, r3
 800e6c0:	f000 fd0c 	bl	800f0dc <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800e6c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d00e      	beq.n	800e6e8 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800e6ca:	6879      	ldr	r1, [r7, #4]
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	3304      	adds	r3, #4
 800e6d0:	687a      	ldr	r2, [r7, #4]
 800e6d2:	8b12      	ldrh	r2, [r2, #24]
 800e6d4:	9202      	str	r2, [sp, #8]
 800e6d6:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800e6d8:	9201      	str	r2, [sp, #4]
 800e6da:	9300      	str	r3, [sp, #0]
 800e6dc:	460b      	mov	r3, r1
 800e6de:	697a      	ldr	r2, [r7, #20]
 800e6e0:	69b9      	ldr	r1, [r7, #24]
 800e6e2:	6878      	ldr	r0, [r7, #4]
 800e6e4:	f004 fcbe 	bl	8013064 <tcp_rst>
    }
    last_state = pcb->state;
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	7d1b      	ldrb	r3, [r3, #20]
 800e6ec:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800e6ee:	6878      	ldr	r0, [r7, #4]
 800e6f0:	f7ff fd34 	bl	800e15c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800e6f4:	693b      	ldr	r3, [r7, #16]
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d004      	beq.n	800e704 <tcp_abandon+0x154>
 800e6fa:	693b      	ldr	r3, [r7, #16]
 800e6fc:	f06f 010c 	mvn.w	r1, #12
 800e700:	68f8      	ldr	r0, [r7, #12]
 800e702:	4798      	blx	r3
  }
}
 800e704:	3728      	adds	r7, #40	@ 0x28
 800e706:	46bd      	mov	sp, r7
 800e708:	bd80      	pop	{r7, pc}
 800e70a:	bf00      	nop
 800e70c:	08020dd4 	.word	0x08020dd4
 800e710:	08020f18 	.word	0x08020f18
 800e714:	08020e18 	.word	0x08020e18
 800e718:	08020f34 	.word	0x08020f34
 800e71c:	200151c8 	.word	0x200151c8
 800e720:	200151bc 	.word	0x200151bc
 800e724:	200151c4 	.word	0x200151c4
 800e728:	200151cc 	.word	0x200151cc

0800e72c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800e72c:	b580      	push	{r7, lr}
 800e72e:	b082      	sub	sp, #8
 800e730:	af00      	add	r7, sp, #0
 800e732:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800e734:	2101      	movs	r1, #1
 800e736:	6878      	ldr	r0, [r7, #4]
 800e738:	f7ff ff3a 	bl	800e5b0 <tcp_abandon>
}
 800e73c:	bf00      	nop
 800e73e:	3708      	adds	r7, #8
 800e740:	46bd      	mov	sp, r7
 800e742:	bd80      	pop	{r7, pc}

0800e744 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800e744:	b580      	push	{r7, lr}
 800e746:	b084      	sub	sp, #16
 800e748:	af00      	add	r7, sp, #0
 800e74a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d106      	bne.n	800e760 <tcp_update_rcv_ann_wnd+0x1c>
 800e752:	4b25      	ldr	r3, [pc, #148]	@ (800e7e8 <tcp_update_rcv_ann_wnd+0xa4>)
 800e754:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800e758:	4924      	ldr	r1, [pc, #144]	@ (800e7ec <tcp_update_rcv_ann_wnd+0xa8>)
 800e75a:	4825      	ldr	r0, [pc, #148]	@ (800e7f0 <tcp_update_rcv_ann_wnd+0xac>)
 800e75c:	f008 ff3e 	bl	80175dc <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e764:	687a      	ldr	r2, [r7, #4]
 800e766:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800e768:	4413      	add	r3, r2
 800e76a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e770:	687a      	ldr	r2, [r7, #4]
 800e772:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 800e774:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 800e778:	bf28      	it	cs
 800e77a:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 800e77e:	b292      	uxth	r2, r2
 800e780:	4413      	add	r3, r2
 800e782:	68fa      	ldr	r2, [r7, #12]
 800e784:	1ad3      	subs	r3, r2, r3
 800e786:	2b00      	cmp	r3, #0
 800e788:	db08      	blt.n	800e79c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e796:	68fa      	ldr	r2, [r7, #12]
 800e798:	1ad3      	subs	r3, r2, r3
 800e79a:	e020      	b.n	800e7de <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e7a4:	1ad3      	subs	r3, r2, r3
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	dd03      	ble.n	800e7b2 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	2200      	movs	r2, #0
 800e7ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800e7b0:	e014      	b.n	800e7dc <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e7ba:	1ad3      	subs	r3, r2, r3
 800e7bc:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800e7be:	68bb      	ldr	r3, [r7, #8]
 800e7c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e7c4:	d306      	bcc.n	800e7d4 <tcp_update_rcv_ann_wnd+0x90>
 800e7c6:	4b08      	ldr	r3, [pc, #32]	@ (800e7e8 <tcp_update_rcv_ann_wnd+0xa4>)
 800e7c8:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800e7cc:	4909      	ldr	r1, [pc, #36]	@ (800e7f4 <tcp_update_rcv_ann_wnd+0xb0>)
 800e7ce:	4808      	ldr	r0, [pc, #32]	@ (800e7f0 <tcp_update_rcv_ann_wnd+0xac>)
 800e7d0:	f008 ff04 	bl	80175dc <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800e7d4:	68bb      	ldr	r3, [r7, #8]
 800e7d6:	b29a      	uxth	r2, r3
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 800e7dc:	2300      	movs	r3, #0
  }
}
 800e7de:	4618      	mov	r0, r3
 800e7e0:	3710      	adds	r7, #16
 800e7e2:	46bd      	mov	sp, r7
 800e7e4:	bd80      	pop	{r7, pc}
 800e7e6:	bf00      	nop
 800e7e8:	08020dd4 	.word	0x08020dd4
 800e7ec:	08021030 	.word	0x08021030
 800e7f0:	08020e18 	.word	0x08020e18
 800e7f4:	08021054 	.word	0x08021054

0800e7f8 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800e7f8:	b580      	push	{r7, lr}
 800e7fa:	b084      	sub	sp, #16
 800e7fc:	af00      	add	r7, sp, #0
 800e7fe:	6078      	str	r0, [r7, #4]
 800e800:	460b      	mov	r3, r1
 800e802:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	2b00      	cmp	r3, #0
 800e808:	d107      	bne.n	800e81a <tcp_recved+0x22>
 800e80a:	4b1f      	ldr	r3, [pc, #124]	@ (800e888 <tcp_recved+0x90>)
 800e80c:	f240 32cf 	movw	r2, #975	@ 0x3cf
 800e810:	491e      	ldr	r1, [pc, #120]	@ (800e88c <tcp_recved+0x94>)
 800e812:	481f      	ldr	r0, [pc, #124]	@ (800e890 <tcp_recved+0x98>)
 800e814:	f008 fee2 	bl	80175dc <iprintf>
 800e818:	e032      	b.n	800e880 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	7d1b      	ldrb	r3, [r3, #20]
 800e81e:	2b01      	cmp	r3, #1
 800e820:	d106      	bne.n	800e830 <tcp_recved+0x38>
 800e822:	4b19      	ldr	r3, [pc, #100]	@ (800e888 <tcp_recved+0x90>)
 800e824:	f240 32d2 	movw	r2, #978	@ 0x3d2
 800e828:	491a      	ldr	r1, [pc, #104]	@ (800e894 <tcp_recved+0x9c>)
 800e82a:	4819      	ldr	r0, [pc, #100]	@ (800e890 <tcp_recved+0x98>)
 800e82c:	f008 fed6 	bl	80175dc <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800e834:	887b      	ldrh	r3, [r7, #2]
 800e836:	4413      	add	r3, r2
 800e838:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800e83a:	89fb      	ldrh	r3, [r7, #14]
 800e83c:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800e840:	d804      	bhi.n	800e84c <tcp_recved+0x54>
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e846:	89fa      	ldrh	r2, [r7, #14]
 800e848:	429a      	cmp	r2, r3
 800e84a:	d204      	bcs.n	800e856 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800e852:	851a      	strh	r2, [r3, #40]	@ 0x28
 800e854:	e002      	b.n	800e85c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	89fa      	ldrh	r2, [r7, #14]
 800e85a:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800e85c:	6878      	ldr	r0, [r7, #4]
 800e85e:	f7ff ff71 	bl	800e744 <tcp_update_rcv_ann_wnd>
 800e862:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800e864:	68bb      	ldr	r3, [r7, #8]
 800e866:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800e86a:	d309      	bcc.n	800e880 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	8b5b      	ldrh	r3, [r3, #26]
 800e870:	f043 0302 	orr.w	r3, r3, #2
 800e874:	b29a      	uxth	r2, r3
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e87a:	6878      	ldr	r0, [r7, #4]
 800e87c:	f003 fe3e 	bl	80124fc <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800e880:	3710      	adds	r7, #16
 800e882:	46bd      	mov	sp, r7
 800e884:	bd80      	pop	{r7, pc}
 800e886:	bf00      	nop
 800e888:	08020dd4 	.word	0x08020dd4
 800e88c:	08021070 	.word	0x08021070
 800e890:	08020e18 	.word	0x08020e18
 800e894:	08021088 	.word	0x08021088

0800e898 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800e898:	b5b0      	push	{r4, r5, r7, lr}
 800e89a:	b090      	sub	sp, #64	@ 0x40
 800e89c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800e89e:	2300      	movs	r3, #0
 800e8a0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 800e8a4:	4b95      	ldr	r3, [pc, #596]	@ (800eafc <tcp_slowtmr+0x264>)
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	3301      	adds	r3, #1
 800e8aa:	4a94      	ldr	r2, [pc, #592]	@ (800eafc <tcp_slowtmr+0x264>)
 800e8ac:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800e8ae:	4b94      	ldr	r3, [pc, #592]	@ (800eb00 <tcp_slowtmr+0x268>)
 800e8b0:	781b      	ldrb	r3, [r3, #0]
 800e8b2:	3301      	adds	r3, #1
 800e8b4:	b2da      	uxtb	r2, r3
 800e8b6:	4b92      	ldr	r3, [pc, #584]	@ (800eb00 <tcp_slowtmr+0x268>)
 800e8b8:	701a      	strb	r2, [r3, #0]
 800e8ba:	e000      	b.n	800e8be <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 800e8bc:	bf00      	nop
  prev = NULL;
 800e8be:	2300      	movs	r3, #0
 800e8c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 800e8c2:	4b90      	ldr	r3, [pc, #576]	@ (800eb04 <tcp_slowtmr+0x26c>)
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800e8c8:	e29f      	b.n	800ee0a <tcp_slowtmr+0x572>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800e8ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e8cc:	7d1b      	ldrb	r3, [r3, #20]
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d106      	bne.n	800e8e0 <tcp_slowtmr+0x48>
 800e8d2:	4b8d      	ldr	r3, [pc, #564]	@ (800eb08 <tcp_slowtmr+0x270>)
 800e8d4:	f240 42be 	movw	r2, #1214	@ 0x4be
 800e8d8:	498c      	ldr	r1, [pc, #560]	@ (800eb0c <tcp_slowtmr+0x274>)
 800e8da:	488d      	ldr	r0, [pc, #564]	@ (800eb10 <tcp_slowtmr+0x278>)
 800e8dc:	f008 fe7e 	bl	80175dc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800e8e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e8e2:	7d1b      	ldrb	r3, [r3, #20]
 800e8e4:	2b01      	cmp	r3, #1
 800e8e6:	d106      	bne.n	800e8f6 <tcp_slowtmr+0x5e>
 800e8e8:	4b87      	ldr	r3, [pc, #540]	@ (800eb08 <tcp_slowtmr+0x270>)
 800e8ea:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 800e8ee:	4989      	ldr	r1, [pc, #548]	@ (800eb14 <tcp_slowtmr+0x27c>)
 800e8f0:	4887      	ldr	r0, [pc, #540]	@ (800eb10 <tcp_slowtmr+0x278>)
 800e8f2:	f008 fe73 	bl	80175dc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800e8f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e8f8:	7d1b      	ldrb	r3, [r3, #20]
 800e8fa:	2b0a      	cmp	r3, #10
 800e8fc:	d106      	bne.n	800e90c <tcp_slowtmr+0x74>
 800e8fe:	4b82      	ldr	r3, [pc, #520]	@ (800eb08 <tcp_slowtmr+0x270>)
 800e900:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 800e904:	4984      	ldr	r1, [pc, #528]	@ (800eb18 <tcp_slowtmr+0x280>)
 800e906:	4882      	ldr	r0, [pc, #520]	@ (800eb10 <tcp_slowtmr+0x278>)
 800e908:	f008 fe68 	bl	80175dc <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800e90c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e90e:	7f9a      	ldrb	r2, [r3, #30]
 800e910:	4b7b      	ldr	r3, [pc, #492]	@ (800eb00 <tcp_slowtmr+0x268>)
 800e912:	781b      	ldrb	r3, [r3, #0]
 800e914:	429a      	cmp	r2, r3
 800e916:	d105      	bne.n	800e924 <tcp_slowtmr+0x8c>
      prev = pcb;
 800e918:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e91a:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800e91c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e91e:	68db      	ldr	r3, [r3, #12]
 800e920:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 800e922:	e272      	b.n	800ee0a <tcp_slowtmr+0x572>
    pcb->last_timer = tcp_timer_ctr;
 800e924:	4b76      	ldr	r3, [pc, #472]	@ (800eb00 <tcp_slowtmr+0x268>)
 800e926:	781a      	ldrb	r2, [r3, #0]
 800e928:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e92a:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 800e92c:	2300      	movs	r3, #0
 800e92e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 800e932:	2300      	movs	r3, #0
 800e934:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800e938:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e93a:	7d1b      	ldrb	r3, [r3, #20]
 800e93c:	2b02      	cmp	r3, #2
 800e93e:	d10a      	bne.n	800e956 <tcp_slowtmr+0xbe>
 800e940:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e942:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e946:	2b05      	cmp	r3, #5
 800e948:	d905      	bls.n	800e956 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800e94a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e94e:	3301      	adds	r3, #1
 800e950:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e954:	e11e      	b.n	800eb94 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800e956:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e958:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e95c:	2b0b      	cmp	r3, #11
 800e95e:	d905      	bls.n	800e96c <tcp_slowtmr+0xd4>
      ++pcb_remove;
 800e960:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e964:	3301      	adds	r3, #1
 800e966:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e96a:	e113      	b.n	800eb94 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 800e96c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e96e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800e972:	2b00      	cmp	r3, #0
 800e974:	d075      	beq.n	800ea62 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800e976:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e978:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d006      	beq.n	800e98c <tcp_slowtmr+0xf4>
 800e97e:	4b62      	ldr	r3, [pc, #392]	@ (800eb08 <tcp_slowtmr+0x270>)
 800e980:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 800e984:	4965      	ldr	r1, [pc, #404]	@ (800eb1c <tcp_slowtmr+0x284>)
 800e986:	4862      	ldr	r0, [pc, #392]	@ (800eb10 <tcp_slowtmr+0x278>)
 800e988:	f008 fe28 	bl	80175dc <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800e98c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e98e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e990:	2b00      	cmp	r3, #0
 800e992:	d106      	bne.n	800e9a2 <tcp_slowtmr+0x10a>
 800e994:	4b5c      	ldr	r3, [pc, #368]	@ (800eb08 <tcp_slowtmr+0x270>)
 800e996:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 800e99a:	4961      	ldr	r1, [pc, #388]	@ (800eb20 <tcp_slowtmr+0x288>)
 800e99c:	485c      	ldr	r0, [pc, #368]	@ (800eb10 <tcp_slowtmr+0x278>)
 800e99e:	f008 fe1d 	bl	80175dc <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800e9a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e9a4:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800e9a8:	2b0b      	cmp	r3, #11
 800e9aa:	d905      	bls.n	800e9b8 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 800e9ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e9b0:	3301      	adds	r3, #1
 800e9b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e9b6:	e0ed      	b.n	800eb94 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800e9b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e9ba:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800e9be:	3b01      	subs	r3, #1
 800e9c0:	4a58      	ldr	r2, [pc, #352]	@ (800eb24 <tcp_slowtmr+0x28c>)
 800e9c2:	5cd3      	ldrb	r3, [r2, r3]
 800e9c4:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800e9c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e9c8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800e9cc:	7c7a      	ldrb	r2, [r7, #17]
 800e9ce:	429a      	cmp	r2, r3
 800e9d0:	d907      	bls.n	800e9e2 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 800e9d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e9d4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800e9d8:	3301      	adds	r3, #1
 800e9da:	b2da      	uxtb	r2, r3
 800e9dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e9de:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 800e9e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e9e4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800e9e8:	7c7a      	ldrb	r2, [r7, #17]
 800e9ea:	429a      	cmp	r2, r3
 800e9ec:	f200 80d2 	bhi.w	800eb94 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 800e9f0:	2301      	movs	r3, #1
 800e9f2:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 800e9f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e9f6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d108      	bne.n	800ea10 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800e9fe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ea00:	f004 fc24 	bl	801324c <tcp_zero_window_probe>
 800ea04:	4603      	mov	r3, r0
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d014      	beq.n	800ea34 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 800ea0a:	2300      	movs	r3, #0
 800ea0c:	623b      	str	r3, [r7, #32]
 800ea0e:	e011      	b.n	800ea34 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800ea10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea12:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ea16:	4619      	mov	r1, r3
 800ea18:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ea1a:	f003 fae9 	bl	8011ff0 <tcp_split_unsent_seg>
 800ea1e:	4603      	mov	r3, r0
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d107      	bne.n	800ea34 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 800ea24:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ea26:	f003 fd69 	bl	80124fc <tcp_output>
 800ea2a:	4603      	mov	r3, r0
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d101      	bne.n	800ea34 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 800ea30:	2300      	movs	r3, #0
 800ea32:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 800ea34:	6a3b      	ldr	r3, [r7, #32]
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	f000 80ac 	beq.w	800eb94 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 800ea3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea3e:	2200      	movs	r2, #0
 800ea40:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800ea44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea46:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800ea4a:	2b06      	cmp	r3, #6
 800ea4c:	f200 80a2 	bhi.w	800eb94 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 800ea50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea52:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800ea56:	3301      	adds	r3, #1
 800ea58:	b2da      	uxtb	r2, r3
 800ea5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea5c:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 800ea60:	e098      	b.n	800eb94 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800ea62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea64:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	db0f      	blt.n	800ea8c <tcp_slowtmr+0x1f4>
 800ea6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea6e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800ea72:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800ea76:	4293      	cmp	r3, r2
 800ea78:	d008      	beq.n	800ea8c <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 800ea7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea7c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800ea80:	b29b      	uxth	r3, r3
 800ea82:	3301      	adds	r3, #1
 800ea84:	b29b      	uxth	r3, r3
 800ea86:	b21a      	sxth	r2, r3
 800ea88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea8a:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 800ea8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea8e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800ea92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea94:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800ea98:	429a      	cmp	r2, r3
 800ea9a:	db7b      	blt.n	800eb94 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800ea9c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ea9e:	f004 f821 	bl	8012ae4 <tcp_rexmit_rto_prepare>
 800eaa2:	4603      	mov	r3, r0
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d007      	beq.n	800eab8 <tcp_slowtmr+0x220>
 800eaa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eaaa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d171      	bne.n	800eb94 <tcp_slowtmr+0x2fc>
 800eab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eab2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d06d      	beq.n	800eb94 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 800eab8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eaba:	7d1b      	ldrb	r3, [r3, #20]
 800eabc:	2b02      	cmp	r3, #2
 800eabe:	d03a      	beq.n	800eb36 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800eac0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eac2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800eac6:	2b0c      	cmp	r3, #12
 800eac8:	bf28      	it	cs
 800eaca:	230c      	movcs	r3, #12
 800eacc:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800eace:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ead0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800ead4:	10db      	asrs	r3, r3, #3
 800ead6:	b21b      	sxth	r3, r3
 800ead8:	461a      	mov	r2, r3
 800eada:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eadc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800eae0:	4413      	add	r3, r2
 800eae2:	7efa      	ldrb	r2, [r7, #27]
 800eae4:	4910      	ldr	r1, [pc, #64]	@ (800eb28 <tcp_slowtmr+0x290>)
 800eae6:	5c8a      	ldrb	r2, [r1, r2]
 800eae8:	4093      	lsls	r3, r2
 800eaea:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800eaec:	697b      	ldr	r3, [r7, #20]
 800eaee:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800eaf2:	4293      	cmp	r3, r2
 800eaf4:	dc1a      	bgt.n	800eb2c <tcp_slowtmr+0x294>
 800eaf6:	697b      	ldr	r3, [r7, #20]
 800eaf8:	b21a      	sxth	r2, r3
 800eafa:	e019      	b.n	800eb30 <tcp_slowtmr+0x298>
 800eafc:	200151b8 	.word	0x200151b8
 800eb00:	200151ce 	.word	0x200151ce
 800eb04:	200151c4 	.word	0x200151c4
 800eb08:	08020dd4 	.word	0x08020dd4
 800eb0c:	08021118 	.word	0x08021118
 800eb10:	08020e18 	.word	0x08020e18
 800eb14:	08021144 	.word	0x08021144
 800eb18:	08021170 	.word	0x08021170
 800eb1c:	080211a0 	.word	0x080211a0
 800eb20:	080211d4 	.word	0x080211d4
 800eb24:	08022dac 	.word	0x08022dac
 800eb28:	08022d9c 	.word	0x08022d9c
 800eb2c:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800eb30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb32:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 800eb36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb38:	2200      	movs	r2, #0
 800eb3a:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800eb3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb3e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800eb42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb44:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800eb48:	4293      	cmp	r3, r2
 800eb4a:	bf28      	it	cs
 800eb4c:	4613      	movcs	r3, r2
 800eb4e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800eb50:	8a7b      	ldrh	r3, [r7, #18]
 800eb52:	085b      	lsrs	r3, r3, #1
 800eb54:	b29a      	uxth	r2, r3
 800eb56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb58:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800eb5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb5e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800eb62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb64:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800eb66:	005b      	lsls	r3, r3, #1
 800eb68:	b29b      	uxth	r3, r3
 800eb6a:	429a      	cmp	r2, r3
 800eb6c:	d206      	bcs.n	800eb7c <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800eb6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb70:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800eb72:	005b      	lsls	r3, r3, #1
 800eb74:	b29a      	uxth	r2, r3
 800eb76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb78:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 800eb7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb7e:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800eb80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb82:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 800eb86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb88:	2200      	movs	r2, #0
 800eb8a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 800eb8e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800eb90:	f004 f818 	bl	8012bc4 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 800eb94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb96:	7d1b      	ldrb	r3, [r3, #20]
 800eb98:	2b06      	cmp	r3, #6
 800eb9a:	d111      	bne.n	800ebc0 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 800eb9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb9e:	8b5b      	ldrh	r3, [r3, #26]
 800eba0:	f003 0310 	and.w	r3, r3, #16
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d00b      	beq.n	800ebc0 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800eba8:	4b9d      	ldr	r3, [pc, #628]	@ (800ee20 <tcp_slowtmr+0x588>)
 800ebaa:	681a      	ldr	r2, [r3, #0]
 800ebac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebae:	6a1b      	ldr	r3, [r3, #32]
 800ebb0:	1ad3      	subs	r3, r2, r3
 800ebb2:	2b28      	cmp	r3, #40	@ 0x28
 800ebb4:	d904      	bls.n	800ebc0 <tcp_slowtmr+0x328>
          ++pcb_remove;
 800ebb6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ebba:	3301      	adds	r3, #1
 800ebbc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800ebc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebc2:	7a5b      	ldrb	r3, [r3, #9]
 800ebc4:	f003 0308 	and.w	r3, r3, #8
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d04c      	beq.n	800ec66 <tcp_slowtmr+0x3ce>
        ((pcb->state == ESTABLISHED) ||
 800ebcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebce:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800ebd0:	2b04      	cmp	r3, #4
 800ebd2:	d003      	beq.n	800ebdc <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 800ebd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebd6:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800ebd8:	2b07      	cmp	r3, #7
 800ebda:	d144      	bne.n	800ec66 <tcp_slowtmr+0x3ce>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ebdc:	4b90      	ldr	r3, [pc, #576]	@ (800ee20 <tcp_slowtmr+0x588>)
 800ebde:	681a      	ldr	r2, [r3, #0]
 800ebe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebe2:	6a1b      	ldr	r3, [r3, #32]
 800ebe4:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800ebe6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebe8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ebec:	f503 2324 	add.w	r3, r3, #671744	@ 0xa4000
 800ebf0:	f603 43b8 	addw	r3, r3, #3256	@ 0xcb8
 800ebf4:	498b      	ldr	r1, [pc, #556]	@ (800ee24 <tcp_slowtmr+0x58c>)
 800ebf6:	fba1 1303 	umull	r1, r3, r1, r3
 800ebfa:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ebfc:	429a      	cmp	r2, r3
 800ebfe:	d90a      	bls.n	800ec16 <tcp_slowtmr+0x37e>
        ++pcb_remove;
 800ec00:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ec04:	3301      	adds	r3, #1
 800ec06:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 800ec0a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ec0e:	3301      	adds	r3, #1
 800ec10:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800ec14:	e027      	b.n	800ec66 <tcp_slowtmr+0x3ce>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ec16:	4b82      	ldr	r3, [pc, #520]	@ (800ee20 <tcp_slowtmr+0x588>)
 800ec18:	681a      	ldr	r2, [r3, #0]
 800ec1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec1c:	6a1b      	ldr	r3, [r3, #32]
 800ec1e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800ec20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec22:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800ec26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec28:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800ec2c:	4618      	mov	r0, r3
 800ec2e:	4b7e      	ldr	r3, [pc, #504]	@ (800ee28 <tcp_slowtmr+0x590>)
 800ec30:	fb00 f303 	mul.w	r3, r0, r3
 800ec34:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800ec36:	497b      	ldr	r1, [pc, #492]	@ (800ee24 <tcp_slowtmr+0x58c>)
 800ec38:	fba1 1303 	umull	r1, r3, r1, r3
 800ec3c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ec3e:	429a      	cmp	r2, r3
 800ec40:	d911      	bls.n	800ec66 <tcp_slowtmr+0x3ce>
        err = tcp_keepalive(pcb);
 800ec42:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ec44:	f004 fac2 	bl	80131cc <tcp_keepalive>
 800ec48:	4603      	mov	r3, r0
 800ec4a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 800ec4e:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d107      	bne.n	800ec66 <tcp_slowtmr+0x3ce>
          pcb->keep_cnt_sent++;
 800ec56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec58:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800ec5c:	3301      	adds	r3, #1
 800ec5e:	b2da      	uxtb	r2, r3
 800ec60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec62:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 800ec66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d011      	beq.n	800ec92 <tcp_slowtmr+0x3fa>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800ec6e:	4b6c      	ldr	r3, [pc, #432]	@ (800ee20 <tcp_slowtmr+0x588>)
 800ec70:	681a      	ldr	r2, [r3, #0]
 800ec72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec74:	6a1b      	ldr	r3, [r3, #32]
 800ec76:	1ad2      	subs	r2, r2, r3
 800ec78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec7a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800ec7e:	4619      	mov	r1, r3
 800ec80:	460b      	mov	r3, r1
 800ec82:	005b      	lsls	r3, r3, #1
 800ec84:	440b      	add	r3, r1
 800ec86:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800ec88:	429a      	cmp	r2, r3
 800ec8a:	d302      	bcc.n	800ec92 <tcp_slowtmr+0x3fa>
      tcp_free_ooseq(pcb);
 800ec8c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ec8e:	f000 fddb 	bl	800f848 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 800ec92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec94:	7d1b      	ldrb	r3, [r3, #20]
 800ec96:	2b03      	cmp	r3, #3
 800ec98:	d10b      	bne.n	800ecb2 <tcp_slowtmr+0x41a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ec9a:	4b61      	ldr	r3, [pc, #388]	@ (800ee20 <tcp_slowtmr+0x588>)
 800ec9c:	681a      	ldr	r2, [r3, #0]
 800ec9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eca0:	6a1b      	ldr	r3, [r3, #32]
 800eca2:	1ad3      	subs	r3, r2, r3
 800eca4:	2b28      	cmp	r3, #40	@ 0x28
 800eca6:	d904      	bls.n	800ecb2 <tcp_slowtmr+0x41a>
        ++pcb_remove;
 800eca8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ecac:	3301      	adds	r3, #1
 800ecae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 800ecb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecb4:	7d1b      	ldrb	r3, [r3, #20]
 800ecb6:	2b09      	cmp	r3, #9
 800ecb8:	d10b      	bne.n	800ecd2 <tcp_slowtmr+0x43a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800ecba:	4b59      	ldr	r3, [pc, #356]	@ (800ee20 <tcp_slowtmr+0x588>)
 800ecbc:	681a      	ldr	r2, [r3, #0]
 800ecbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecc0:	6a1b      	ldr	r3, [r3, #32]
 800ecc2:	1ad3      	subs	r3, r2, r3
 800ecc4:	2bf0      	cmp	r3, #240	@ 0xf0
 800ecc6:	d904      	bls.n	800ecd2 <tcp_slowtmr+0x43a>
        ++pcb_remove;
 800ecc8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800eccc:	3301      	adds	r3, #1
 800ecce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 800ecd2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d060      	beq.n	800ed9c <tcp_slowtmr+0x504>
      tcp_err_fn err_fn = pcb->errf;
 800ecda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ece0:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 800ece2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ece4:	f000 fbfc 	bl	800f4e0 <tcp_pcb_purge>
      if (prev != NULL) {
 800ece8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d010      	beq.n	800ed10 <tcp_slowtmr+0x478>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800ecee:	4b4f      	ldr	r3, [pc, #316]	@ (800ee2c <tcp_slowtmr+0x594>)
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ecf4:	429a      	cmp	r2, r3
 800ecf6:	d106      	bne.n	800ed06 <tcp_slowtmr+0x46e>
 800ecf8:	4b4d      	ldr	r3, [pc, #308]	@ (800ee30 <tcp_slowtmr+0x598>)
 800ecfa:	f240 526d 	movw	r2, #1389	@ 0x56d
 800ecfe:	494d      	ldr	r1, [pc, #308]	@ (800ee34 <tcp_slowtmr+0x59c>)
 800ed00:	484d      	ldr	r0, [pc, #308]	@ (800ee38 <tcp_slowtmr+0x5a0>)
 800ed02:	f008 fc6b 	bl	80175dc <iprintf>
        prev->next = pcb->next;
 800ed06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed08:	68da      	ldr	r2, [r3, #12]
 800ed0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed0c:	60da      	str	r2, [r3, #12]
 800ed0e:	e00f      	b.n	800ed30 <tcp_slowtmr+0x498>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800ed10:	4b46      	ldr	r3, [pc, #280]	@ (800ee2c <tcp_slowtmr+0x594>)
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ed16:	429a      	cmp	r2, r3
 800ed18:	d006      	beq.n	800ed28 <tcp_slowtmr+0x490>
 800ed1a:	4b45      	ldr	r3, [pc, #276]	@ (800ee30 <tcp_slowtmr+0x598>)
 800ed1c:	f240 5271 	movw	r2, #1393	@ 0x571
 800ed20:	4946      	ldr	r1, [pc, #280]	@ (800ee3c <tcp_slowtmr+0x5a4>)
 800ed22:	4845      	ldr	r0, [pc, #276]	@ (800ee38 <tcp_slowtmr+0x5a0>)
 800ed24:	f008 fc5a 	bl	80175dc <iprintf>
        tcp_active_pcbs = pcb->next;
 800ed28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed2a:	68db      	ldr	r3, [r3, #12]
 800ed2c:	4a3f      	ldr	r2, [pc, #252]	@ (800ee2c <tcp_slowtmr+0x594>)
 800ed2e:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 800ed30:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d013      	beq.n	800ed60 <tcp_slowtmr+0x4c8>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800ed38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed3a:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800ed3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed3e:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800ed40:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800ed42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed44:	3304      	adds	r3, #4
 800ed46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ed48:	8ad2      	ldrh	r2, [r2, #22]
 800ed4a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ed4c:	8b09      	ldrh	r1, [r1, #24]
 800ed4e:	9102      	str	r1, [sp, #8]
 800ed50:	9201      	str	r2, [sp, #4]
 800ed52:	9300      	str	r3, [sp, #0]
 800ed54:	462b      	mov	r3, r5
 800ed56:	4622      	mov	r2, r4
 800ed58:	4601      	mov	r1, r0
 800ed5a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ed5c:	f004 f982 	bl	8013064 <tcp_rst>
      err_arg = pcb->callback_arg;
 800ed60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed62:	691b      	ldr	r3, [r3, #16]
 800ed64:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800ed66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed68:	7d1b      	ldrb	r3, [r3, #20]
 800ed6a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800ed6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed6e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800ed70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed72:	68db      	ldr	r3, [r3, #12]
 800ed74:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800ed76:	6838      	ldr	r0, [r7, #0]
 800ed78:	f7ff f9f0 	bl	800e15c <tcp_free>
      tcp_active_pcbs_changed = 0;
 800ed7c:	4b30      	ldr	r3, [pc, #192]	@ (800ee40 <tcp_slowtmr+0x5a8>)
 800ed7e:	2200      	movs	r2, #0
 800ed80:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d004      	beq.n	800ed92 <tcp_slowtmr+0x4fa>
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	f06f 010c 	mvn.w	r1, #12
 800ed8e:	68b8      	ldr	r0, [r7, #8]
 800ed90:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800ed92:	4b2b      	ldr	r3, [pc, #172]	@ (800ee40 <tcp_slowtmr+0x5a8>)
 800ed94:	781b      	ldrb	r3, [r3, #0]
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d037      	beq.n	800ee0a <tcp_slowtmr+0x572>
        goto tcp_slowtmr_start;
 800ed9a:	e590      	b.n	800e8be <tcp_slowtmr+0x26>
      prev = pcb;
 800ed9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed9e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800eda0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eda2:	68db      	ldr	r3, [r3, #12]
 800eda4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 800eda6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eda8:	7f1b      	ldrb	r3, [r3, #28]
 800edaa:	3301      	adds	r3, #1
 800edac:	b2da      	uxtb	r2, r3
 800edae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800edb0:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800edb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800edb4:	7f1a      	ldrb	r2, [r3, #28]
 800edb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800edb8:	7f5b      	ldrb	r3, [r3, #29]
 800edba:	429a      	cmp	r2, r3
 800edbc:	d325      	bcc.n	800ee0a <tcp_slowtmr+0x572>
        prev->polltmr = 0;
 800edbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800edc0:	2200      	movs	r2, #0
 800edc2:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 800edc4:	4b1e      	ldr	r3, [pc, #120]	@ (800ee40 <tcp_slowtmr+0x5a8>)
 800edc6:	2200      	movs	r2, #0
 800edc8:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800edca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800edcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d00b      	beq.n	800edec <tcp_slowtmr+0x554>
 800edd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800edd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800edda:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800eddc:	6912      	ldr	r2, [r2, #16]
 800edde:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ede0:	4610      	mov	r0, r2
 800ede2:	4798      	blx	r3
 800ede4:	4603      	mov	r3, r0
 800ede6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800edea:	e002      	b.n	800edf2 <tcp_slowtmr+0x55a>
 800edec:	2300      	movs	r3, #0
 800edee:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 800edf2:	4b13      	ldr	r3, [pc, #76]	@ (800ee40 <tcp_slowtmr+0x5a8>)
 800edf4:	781b      	ldrb	r3, [r3, #0]
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	f47f ad60 	bne.w	800e8bc <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800edfc:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d102      	bne.n	800ee0a <tcp_slowtmr+0x572>
          tcp_output(prev);
 800ee04:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ee06:	f003 fb79 	bl	80124fc <tcp_output>
  while (pcb != NULL) {
 800ee0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	f47f ad5c 	bne.w	800e8ca <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800ee12:	2300      	movs	r3, #0
 800ee14:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 800ee16:	4b0b      	ldr	r3, [pc, #44]	@ (800ee44 <tcp_slowtmr+0x5ac>)
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800ee1c:	e067      	b.n	800eeee <tcp_slowtmr+0x656>
 800ee1e:	bf00      	nop
 800ee20:	200151b8 	.word	0x200151b8
 800ee24:	10624dd3 	.word	0x10624dd3
 800ee28:	000124f8 	.word	0x000124f8
 800ee2c:	200151c4 	.word	0x200151c4
 800ee30:	08020dd4 	.word	0x08020dd4
 800ee34:	0802120c 	.word	0x0802120c
 800ee38:	08020e18 	.word	0x08020e18
 800ee3c:	08021238 	.word	0x08021238
 800ee40:	200151cc 	.word	0x200151cc
 800ee44:	200151c8 	.word	0x200151c8
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800ee48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee4a:	7d1b      	ldrb	r3, [r3, #20]
 800ee4c:	2b0a      	cmp	r3, #10
 800ee4e:	d006      	beq.n	800ee5e <tcp_slowtmr+0x5c6>
 800ee50:	4b2b      	ldr	r3, [pc, #172]	@ (800ef00 <tcp_slowtmr+0x668>)
 800ee52:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 800ee56:	492b      	ldr	r1, [pc, #172]	@ (800ef04 <tcp_slowtmr+0x66c>)
 800ee58:	482b      	ldr	r0, [pc, #172]	@ (800ef08 <tcp_slowtmr+0x670>)
 800ee5a:	f008 fbbf 	bl	80175dc <iprintf>
    pcb_remove = 0;
 800ee5e:	2300      	movs	r3, #0
 800ee60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800ee64:	4b29      	ldr	r3, [pc, #164]	@ (800ef0c <tcp_slowtmr+0x674>)
 800ee66:	681a      	ldr	r2, [r3, #0]
 800ee68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee6a:	6a1b      	ldr	r3, [r3, #32]
 800ee6c:	1ad3      	subs	r3, r2, r3
 800ee6e:	2bf0      	cmp	r3, #240	@ 0xf0
 800ee70:	d904      	bls.n	800ee7c <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 800ee72:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ee76:	3301      	adds	r3, #1
 800ee78:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800ee7c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d02f      	beq.n	800eee4 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800ee84:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ee86:	f000 fb2b 	bl	800f4e0 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800ee8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d010      	beq.n	800eeb2 <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800ee90:	4b1f      	ldr	r3, [pc, #124]	@ (800ef10 <tcp_slowtmr+0x678>)
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ee96:	429a      	cmp	r2, r3
 800ee98:	d106      	bne.n	800eea8 <tcp_slowtmr+0x610>
 800ee9a:	4b19      	ldr	r3, [pc, #100]	@ (800ef00 <tcp_slowtmr+0x668>)
 800ee9c:	f240 52af 	movw	r2, #1455	@ 0x5af
 800eea0:	491c      	ldr	r1, [pc, #112]	@ (800ef14 <tcp_slowtmr+0x67c>)
 800eea2:	4819      	ldr	r0, [pc, #100]	@ (800ef08 <tcp_slowtmr+0x670>)
 800eea4:	f008 fb9a 	bl	80175dc <iprintf>
        prev->next = pcb->next;
 800eea8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eeaa:	68da      	ldr	r2, [r3, #12]
 800eeac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eeae:	60da      	str	r2, [r3, #12]
 800eeb0:	e00f      	b.n	800eed2 <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800eeb2:	4b17      	ldr	r3, [pc, #92]	@ (800ef10 <tcp_slowtmr+0x678>)
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800eeb8:	429a      	cmp	r2, r3
 800eeba:	d006      	beq.n	800eeca <tcp_slowtmr+0x632>
 800eebc:	4b10      	ldr	r3, [pc, #64]	@ (800ef00 <tcp_slowtmr+0x668>)
 800eebe:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800eec2:	4915      	ldr	r1, [pc, #84]	@ (800ef18 <tcp_slowtmr+0x680>)
 800eec4:	4810      	ldr	r0, [pc, #64]	@ (800ef08 <tcp_slowtmr+0x670>)
 800eec6:	f008 fb89 	bl	80175dc <iprintf>
        tcp_tw_pcbs = pcb->next;
 800eeca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eecc:	68db      	ldr	r3, [r3, #12]
 800eece:	4a10      	ldr	r2, [pc, #64]	@ (800ef10 <tcp_slowtmr+0x678>)
 800eed0:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800eed2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eed4:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800eed6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eed8:	68db      	ldr	r3, [r3, #12]
 800eeda:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800eedc:	69f8      	ldr	r0, [r7, #28]
 800eede:	f7ff f93d 	bl	800e15c <tcp_free>
 800eee2:	e004      	b.n	800eeee <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 800eee4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eee6:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800eee8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eeea:	68db      	ldr	r3, [r3, #12]
 800eeec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800eeee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d1a9      	bne.n	800ee48 <tcp_slowtmr+0x5b0>
    }
  }
}
 800eef4:	bf00      	nop
 800eef6:	bf00      	nop
 800eef8:	3730      	adds	r7, #48	@ 0x30
 800eefa:	46bd      	mov	sp, r7
 800eefc:	bdb0      	pop	{r4, r5, r7, pc}
 800eefe:	bf00      	nop
 800ef00:	08020dd4 	.word	0x08020dd4
 800ef04:	08021264 	.word	0x08021264
 800ef08:	08020e18 	.word	0x08020e18
 800ef0c:	200151b8 	.word	0x200151b8
 800ef10:	200151c8 	.word	0x200151c8
 800ef14:	08021294 	.word	0x08021294
 800ef18:	080212bc 	.word	0x080212bc

0800ef1c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800ef1c:	b580      	push	{r7, lr}
 800ef1e:	b082      	sub	sp, #8
 800ef20:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800ef22:	4b2d      	ldr	r3, [pc, #180]	@ (800efd8 <tcp_fasttmr+0xbc>)
 800ef24:	781b      	ldrb	r3, [r3, #0]
 800ef26:	3301      	adds	r3, #1
 800ef28:	b2da      	uxtb	r2, r3
 800ef2a:	4b2b      	ldr	r3, [pc, #172]	@ (800efd8 <tcp_fasttmr+0xbc>)
 800ef2c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800ef2e:	4b2b      	ldr	r3, [pc, #172]	@ (800efdc <tcp_fasttmr+0xc0>)
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800ef34:	e048      	b.n	800efc8 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	7f9a      	ldrb	r2, [r3, #30]
 800ef3a:	4b27      	ldr	r3, [pc, #156]	@ (800efd8 <tcp_fasttmr+0xbc>)
 800ef3c:	781b      	ldrb	r3, [r3, #0]
 800ef3e:	429a      	cmp	r2, r3
 800ef40:	d03f      	beq.n	800efc2 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800ef42:	4b25      	ldr	r3, [pc, #148]	@ (800efd8 <tcp_fasttmr+0xbc>)
 800ef44:	781a      	ldrb	r2, [r3, #0]
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	8b5b      	ldrh	r3, [r3, #26]
 800ef4e:	f003 0301 	and.w	r3, r3, #1
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d010      	beq.n	800ef78 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	8b5b      	ldrh	r3, [r3, #26]
 800ef5a:	f043 0302 	orr.w	r3, r3, #2
 800ef5e:	b29a      	uxth	r2, r3
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800ef64:	6878      	ldr	r0, [r7, #4]
 800ef66:	f003 fac9 	bl	80124fc <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	8b5b      	ldrh	r3, [r3, #26]
 800ef6e:	f023 0303 	bic.w	r3, r3, #3
 800ef72:	b29a      	uxth	r2, r3
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	8b5b      	ldrh	r3, [r3, #26]
 800ef7c:	f003 0308 	and.w	r3, r3, #8
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d009      	beq.n	800ef98 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	8b5b      	ldrh	r3, [r3, #26]
 800ef88:	f023 0308 	bic.w	r3, r3, #8
 800ef8c:	b29a      	uxth	r2, r3
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800ef92:	6878      	ldr	r0, [r7, #4]
 800ef94:	f7ff fa76 	bl	800e484 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	68db      	ldr	r3, [r3, #12]
 800ef9c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d00a      	beq.n	800efbc <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800efa6:	4b0e      	ldr	r3, [pc, #56]	@ (800efe0 <tcp_fasttmr+0xc4>)
 800efa8:	2200      	movs	r2, #0
 800efaa:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800efac:	6878      	ldr	r0, [r7, #4]
 800efae:	f000 f819 	bl	800efe4 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800efb2:	4b0b      	ldr	r3, [pc, #44]	@ (800efe0 <tcp_fasttmr+0xc4>)
 800efb4:	781b      	ldrb	r3, [r3, #0]
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d000      	beq.n	800efbc <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800efba:	e7b8      	b.n	800ef2e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800efbc:	683b      	ldr	r3, [r7, #0]
 800efbe:	607b      	str	r3, [r7, #4]
 800efc0:	e002      	b.n	800efc8 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	68db      	ldr	r3, [r3, #12]
 800efc6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d1b3      	bne.n	800ef36 <tcp_fasttmr+0x1a>
    }
  }
}
 800efce:	bf00      	nop
 800efd0:	bf00      	nop
 800efd2:	3708      	adds	r7, #8
 800efd4:	46bd      	mov	sp, r7
 800efd6:	bd80      	pop	{r7, pc}
 800efd8:	200151ce 	.word	0x200151ce
 800efdc:	200151c4 	.word	0x200151c4
 800efe0:	200151cc 	.word	0x200151cc

0800efe4 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800efe4:	b590      	push	{r4, r7, lr}
 800efe6:	b085      	sub	sp, #20
 800efe8:	af00      	add	r7, sp, #0
 800efea:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d109      	bne.n	800f006 <tcp_process_refused_data+0x22>
 800eff2:	4b37      	ldr	r3, [pc, #220]	@ (800f0d0 <tcp_process_refused_data+0xec>)
 800eff4:	f240 6209 	movw	r2, #1545	@ 0x609
 800eff8:	4936      	ldr	r1, [pc, #216]	@ (800f0d4 <tcp_process_refused_data+0xf0>)
 800effa:	4837      	ldr	r0, [pc, #220]	@ (800f0d8 <tcp_process_refused_data+0xf4>)
 800effc:	f008 faee 	bl	80175dc <iprintf>
 800f000:	f06f 030f 	mvn.w	r3, #15
 800f004:	e060      	b.n	800f0c8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f00a:	7b5b      	ldrb	r3, [r3, #13]
 800f00c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f012:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	2200      	movs	r2, #0
 800f018:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f020:	2b00      	cmp	r3, #0
 800f022:	d00b      	beq.n	800f03c <tcp_process_refused_data+0x58>
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	6918      	ldr	r0, [r3, #16]
 800f02e:	2300      	movs	r3, #0
 800f030:	68ba      	ldr	r2, [r7, #8]
 800f032:	6879      	ldr	r1, [r7, #4]
 800f034:	47a0      	blx	r4
 800f036:	4603      	mov	r3, r0
 800f038:	73fb      	strb	r3, [r7, #15]
 800f03a:	e007      	b.n	800f04c <tcp_process_refused_data+0x68>
 800f03c:	2300      	movs	r3, #0
 800f03e:	68ba      	ldr	r2, [r7, #8]
 800f040:	6879      	ldr	r1, [r7, #4]
 800f042:	2000      	movs	r0, #0
 800f044:	f000 f8a4 	bl	800f190 <tcp_recv_null>
 800f048:	4603      	mov	r3, r0
 800f04a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800f04c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f050:	2b00      	cmp	r3, #0
 800f052:	d12a      	bne.n	800f0aa <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800f054:	7bbb      	ldrb	r3, [r7, #14]
 800f056:	f003 0320 	and.w	r3, r3, #32
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d033      	beq.n	800f0c6 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f062:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800f066:	d005      	beq.n	800f074 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f06c:	3301      	adds	r3, #1
 800f06e:	b29a      	uxth	r2, r3
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d00b      	beq.n	800f096 <tcp_process_refused_data+0xb2>
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	6918      	ldr	r0, [r3, #16]
 800f088:	2300      	movs	r3, #0
 800f08a:	2200      	movs	r2, #0
 800f08c:	6879      	ldr	r1, [r7, #4]
 800f08e:	47a0      	blx	r4
 800f090:	4603      	mov	r3, r0
 800f092:	73fb      	strb	r3, [r7, #15]
 800f094:	e001      	b.n	800f09a <tcp_process_refused_data+0xb6>
 800f096:	2300      	movs	r3, #0
 800f098:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800f09a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f09e:	f113 0f0d 	cmn.w	r3, #13
 800f0a2:	d110      	bne.n	800f0c6 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800f0a4:	f06f 030c 	mvn.w	r3, #12
 800f0a8:	e00e      	b.n	800f0c8 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800f0aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f0ae:	f113 0f0d 	cmn.w	r3, #13
 800f0b2:	d102      	bne.n	800f0ba <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800f0b4:	f06f 030c 	mvn.w	r3, #12
 800f0b8:	e006      	b.n	800f0c8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	68ba      	ldr	r2, [r7, #8]
 800f0be:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 800f0c0:	f06f 0304 	mvn.w	r3, #4
 800f0c4:	e000      	b.n	800f0c8 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800f0c6:	2300      	movs	r3, #0
}
 800f0c8:	4618      	mov	r0, r3
 800f0ca:	3714      	adds	r7, #20
 800f0cc:	46bd      	mov	sp, r7
 800f0ce:	bd90      	pop	{r4, r7, pc}
 800f0d0:	08020dd4 	.word	0x08020dd4
 800f0d4:	080212e4 	.word	0x080212e4
 800f0d8:	08020e18 	.word	0x08020e18

0800f0dc <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800f0dc:	b580      	push	{r7, lr}
 800f0de:	b084      	sub	sp, #16
 800f0e0:	af00      	add	r7, sp, #0
 800f0e2:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800f0e4:	e007      	b.n	800f0f6 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800f0ec:	6878      	ldr	r0, [r7, #4]
 800f0ee:	f000 f80a 	bl	800f106 <tcp_seg_free>
    seg = next;
 800f0f2:	68fb      	ldr	r3, [r7, #12]
 800f0f4:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d1f4      	bne.n	800f0e6 <tcp_segs_free+0xa>
  }
}
 800f0fc:	bf00      	nop
 800f0fe:	bf00      	nop
 800f100:	3710      	adds	r7, #16
 800f102:	46bd      	mov	sp, r7
 800f104:	bd80      	pop	{r7, pc}

0800f106 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800f106:	b580      	push	{r7, lr}
 800f108:	b082      	sub	sp, #8
 800f10a:	af00      	add	r7, sp, #0
 800f10c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	2b00      	cmp	r3, #0
 800f112:	d00c      	beq.n	800f12e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	685b      	ldr	r3, [r3, #4]
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d004      	beq.n	800f126 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	685b      	ldr	r3, [r3, #4]
 800f120:	4618      	mov	r0, r3
 800f122:	f7fe fc11 	bl	800d948 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800f126:	6879      	ldr	r1, [r7, #4]
 800f128:	2003      	movs	r0, #3
 800f12a:	f7fd fd97 	bl	800cc5c <memp_free>
  }
}
 800f12e:	bf00      	nop
 800f130:	3708      	adds	r7, #8
 800f132:	46bd      	mov	sp, r7
 800f134:	bd80      	pop	{r7, pc}
	...

0800f138 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800f138:	b580      	push	{r7, lr}
 800f13a:	b084      	sub	sp, #16
 800f13c:	af00      	add	r7, sp, #0
 800f13e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	2b00      	cmp	r3, #0
 800f144:	d106      	bne.n	800f154 <tcp_seg_copy+0x1c>
 800f146:	4b0f      	ldr	r3, [pc, #60]	@ (800f184 <tcp_seg_copy+0x4c>)
 800f148:	f240 6282 	movw	r2, #1666	@ 0x682
 800f14c:	490e      	ldr	r1, [pc, #56]	@ (800f188 <tcp_seg_copy+0x50>)
 800f14e:	480f      	ldr	r0, [pc, #60]	@ (800f18c <tcp_seg_copy+0x54>)
 800f150:	f008 fa44 	bl	80175dc <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800f154:	2003      	movs	r0, #3
 800f156:	f7fd fd11 	bl	800cb7c <memp_malloc>
 800f15a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d101      	bne.n	800f166 <tcp_seg_copy+0x2e>
    return NULL;
 800f162:	2300      	movs	r3, #0
 800f164:	e00a      	b.n	800f17c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800f166:	2210      	movs	r2, #16
 800f168:	6879      	ldr	r1, [r7, #4]
 800f16a:	68f8      	ldr	r0, [r7, #12]
 800f16c:	f008 fb8d 	bl	801788a <memcpy>
  pbuf_ref(cseg->p);
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	685b      	ldr	r3, [r3, #4]
 800f174:	4618      	mov	r0, r3
 800f176:	f7fe fc87 	bl	800da88 <pbuf_ref>
  return cseg;
 800f17a:	68fb      	ldr	r3, [r7, #12]
}
 800f17c:	4618      	mov	r0, r3
 800f17e:	3710      	adds	r7, #16
 800f180:	46bd      	mov	sp, r7
 800f182:	bd80      	pop	{r7, pc}
 800f184:	08020dd4 	.word	0x08020dd4
 800f188:	08021328 	.word	0x08021328
 800f18c:	08020e18 	.word	0x08020e18

0800f190 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800f190:	b580      	push	{r7, lr}
 800f192:	b084      	sub	sp, #16
 800f194:	af00      	add	r7, sp, #0
 800f196:	60f8      	str	r0, [r7, #12]
 800f198:	60b9      	str	r1, [r7, #8]
 800f19a:	607a      	str	r2, [r7, #4]
 800f19c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800f19e:	68bb      	ldr	r3, [r7, #8]
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d109      	bne.n	800f1b8 <tcp_recv_null+0x28>
 800f1a4:	4b12      	ldr	r3, [pc, #72]	@ (800f1f0 <tcp_recv_null+0x60>)
 800f1a6:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800f1aa:	4912      	ldr	r1, [pc, #72]	@ (800f1f4 <tcp_recv_null+0x64>)
 800f1ac:	4812      	ldr	r0, [pc, #72]	@ (800f1f8 <tcp_recv_null+0x68>)
 800f1ae:	f008 fa15 	bl	80175dc <iprintf>
 800f1b2:	f06f 030f 	mvn.w	r3, #15
 800f1b6:	e016      	b.n	800f1e6 <tcp_recv_null+0x56>

  if (p != NULL) {
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d009      	beq.n	800f1d2 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	891b      	ldrh	r3, [r3, #8]
 800f1c2:	4619      	mov	r1, r3
 800f1c4:	68b8      	ldr	r0, [r7, #8]
 800f1c6:	f7ff fb17 	bl	800e7f8 <tcp_recved>
    pbuf_free(p);
 800f1ca:	6878      	ldr	r0, [r7, #4]
 800f1cc:	f7fe fbbc 	bl	800d948 <pbuf_free>
 800f1d0:	e008      	b.n	800f1e4 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800f1d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d104      	bne.n	800f1e4 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800f1da:	68b8      	ldr	r0, [r7, #8]
 800f1dc:	f7ff f9bc 	bl	800e558 <tcp_close>
 800f1e0:	4603      	mov	r3, r0
 800f1e2:	e000      	b.n	800f1e6 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800f1e4:	2300      	movs	r3, #0
}
 800f1e6:	4618      	mov	r0, r3
 800f1e8:	3710      	adds	r7, #16
 800f1ea:	46bd      	mov	sp, r7
 800f1ec:	bd80      	pop	{r7, pc}
 800f1ee:	bf00      	nop
 800f1f0:	08020dd4 	.word	0x08020dd4
 800f1f4:	08021344 	.word	0x08021344
 800f1f8:	08020e18 	.word	0x08020e18

0800f1fc <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800f1fc:	b580      	push	{r7, lr}
 800f1fe:	b086      	sub	sp, #24
 800f200:	af00      	add	r7, sp, #0
 800f202:	4603      	mov	r3, r0
 800f204:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800f206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	db01      	blt.n	800f212 <tcp_kill_prio+0x16>
 800f20e:	79fb      	ldrb	r3, [r7, #7]
 800f210:	e000      	b.n	800f214 <tcp_kill_prio+0x18>
 800f212:	237f      	movs	r3, #127	@ 0x7f
 800f214:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800f216:	7afb      	ldrb	r3, [r7, #11]
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d034      	beq.n	800f286 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800f21c:	7afb      	ldrb	r3, [r7, #11]
 800f21e:	3b01      	subs	r3, #1
 800f220:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800f222:	2300      	movs	r3, #0
 800f224:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f226:	2300      	movs	r3, #0
 800f228:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f22a:	4b19      	ldr	r3, [pc, #100]	@ (800f290 <tcp_kill_prio+0x94>)
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	617b      	str	r3, [r7, #20]
 800f230:	e01f      	b.n	800f272 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800f232:	697b      	ldr	r3, [r7, #20]
 800f234:	7d5b      	ldrb	r3, [r3, #21]
 800f236:	7afa      	ldrb	r2, [r7, #11]
 800f238:	429a      	cmp	r2, r3
 800f23a:	d80c      	bhi.n	800f256 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800f23c:	697b      	ldr	r3, [r7, #20]
 800f23e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800f240:	7afa      	ldrb	r2, [r7, #11]
 800f242:	429a      	cmp	r2, r3
 800f244:	d112      	bne.n	800f26c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800f246:	4b13      	ldr	r3, [pc, #76]	@ (800f294 <tcp_kill_prio+0x98>)
 800f248:	681a      	ldr	r2, [r3, #0]
 800f24a:	697b      	ldr	r3, [r7, #20]
 800f24c:	6a1b      	ldr	r3, [r3, #32]
 800f24e:	1ad3      	subs	r3, r2, r3
 800f250:	68fa      	ldr	r2, [r7, #12]
 800f252:	429a      	cmp	r2, r3
 800f254:	d80a      	bhi.n	800f26c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800f256:	4b0f      	ldr	r3, [pc, #60]	@ (800f294 <tcp_kill_prio+0x98>)
 800f258:	681a      	ldr	r2, [r3, #0]
 800f25a:	697b      	ldr	r3, [r7, #20]
 800f25c:	6a1b      	ldr	r3, [r3, #32]
 800f25e:	1ad3      	subs	r3, r2, r3
 800f260:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800f262:	697b      	ldr	r3, [r7, #20]
 800f264:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800f266:	697b      	ldr	r3, [r7, #20]
 800f268:	7d5b      	ldrb	r3, [r3, #21]
 800f26a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f26c:	697b      	ldr	r3, [r7, #20]
 800f26e:	68db      	ldr	r3, [r3, #12]
 800f270:	617b      	str	r3, [r7, #20]
 800f272:	697b      	ldr	r3, [r7, #20]
 800f274:	2b00      	cmp	r3, #0
 800f276:	d1dc      	bne.n	800f232 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800f278:	693b      	ldr	r3, [r7, #16]
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d004      	beq.n	800f288 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800f27e:	6938      	ldr	r0, [r7, #16]
 800f280:	f7ff fa54 	bl	800e72c <tcp_abort>
 800f284:	e000      	b.n	800f288 <tcp_kill_prio+0x8c>
    return;
 800f286:	bf00      	nop
  }
}
 800f288:	3718      	adds	r7, #24
 800f28a:	46bd      	mov	sp, r7
 800f28c:	bd80      	pop	{r7, pc}
 800f28e:	bf00      	nop
 800f290:	200151c4 	.word	0x200151c4
 800f294:	200151b8 	.word	0x200151b8

0800f298 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800f298:	b580      	push	{r7, lr}
 800f29a:	b086      	sub	sp, #24
 800f29c:	af00      	add	r7, sp, #0
 800f29e:	4603      	mov	r3, r0
 800f2a0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800f2a2:	79fb      	ldrb	r3, [r7, #7]
 800f2a4:	2b08      	cmp	r3, #8
 800f2a6:	d009      	beq.n	800f2bc <tcp_kill_state+0x24>
 800f2a8:	79fb      	ldrb	r3, [r7, #7]
 800f2aa:	2b09      	cmp	r3, #9
 800f2ac:	d006      	beq.n	800f2bc <tcp_kill_state+0x24>
 800f2ae:	4b1a      	ldr	r3, [pc, #104]	@ (800f318 <tcp_kill_state+0x80>)
 800f2b0:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 800f2b4:	4919      	ldr	r1, [pc, #100]	@ (800f31c <tcp_kill_state+0x84>)
 800f2b6:	481a      	ldr	r0, [pc, #104]	@ (800f320 <tcp_kill_state+0x88>)
 800f2b8:	f008 f990 	bl	80175dc <iprintf>

  inactivity = 0;
 800f2bc:	2300      	movs	r3, #0
 800f2be:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f2c0:	2300      	movs	r3, #0
 800f2c2:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f2c4:	4b17      	ldr	r3, [pc, #92]	@ (800f324 <tcp_kill_state+0x8c>)
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	617b      	str	r3, [r7, #20]
 800f2ca:	e017      	b.n	800f2fc <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800f2cc:	697b      	ldr	r3, [r7, #20]
 800f2ce:	7d1b      	ldrb	r3, [r3, #20]
 800f2d0:	79fa      	ldrb	r2, [r7, #7]
 800f2d2:	429a      	cmp	r2, r3
 800f2d4:	d10f      	bne.n	800f2f6 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f2d6:	4b14      	ldr	r3, [pc, #80]	@ (800f328 <tcp_kill_state+0x90>)
 800f2d8:	681a      	ldr	r2, [r3, #0]
 800f2da:	697b      	ldr	r3, [r7, #20]
 800f2dc:	6a1b      	ldr	r3, [r3, #32]
 800f2de:	1ad3      	subs	r3, r2, r3
 800f2e0:	68fa      	ldr	r2, [r7, #12]
 800f2e2:	429a      	cmp	r2, r3
 800f2e4:	d807      	bhi.n	800f2f6 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800f2e6:	4b10      	ldr	r3, [pc, #64]	@ (800f328 <tcp_kill_state+0x90>)
 800f2e8:	681a      	ldr	r2, [r3, #0]
 800f2ea:	697b      	ldr	r3, [r7, #20]
 800f2ec:	6a1b      	ldr	r3, [r3, #32]
 800f2ee:	1ad3      	subs	r3, r2, r3
 800f2f0:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800f2f2:	697b      	ldr	r3, [r7, #20]
 800f2f4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f2f6:	697b      	ldr	r3, [r7, #20]
 800f2f8:	68db      	ldr	r3, [r3, #12]
 800f2fa:	617b      	str	r3, [r7, #20]
 800f2fc:	697b      	ldr	r3, [r7, #20]
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d1e4      	bne.n	800f2cc <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800f302:	693b      	ldr	r3, [r7, #16]
 800f304:	2b00      	cmp	r3, #0
 800f306:	d003      	beq.n	800f310 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800f308:	2100      	movs	r1, #0
 800f30a:	6938      	ldr	r0, [r7, #16]
 800f30c:	f7ff f950 	bl	800e5b0 <tcp_abandon>
  }
}
 800f310:	bf00      	nop
 800f312:	3718      	adds	r7, #24
 800f314:	46bd      	mov	sp, r7
 800f316:	bd80      	pop	{r7, pc}
 800f318:	08020dd4 	.word	0x08020dd4
 800f31c:	08021360 	.word	0x08021360
 800f320:	08020e18 	.word	0x08020e18
 800f324:	200151c4 	.word	0x200151c4
 800f328:	200151b8 	.word	0x200151b8

0800f32c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800f32c:	b580      	push	{r7, lr}
 800f32e:	b084      	sub	sp, #16
 800f330:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800f332:	2300      	movs	r3, #0
 800f334:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800f336:	2300      	movs	r3, #0
 800f338:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f33a:	4b12      	ldr	r3, [pc, #72]	@ (800f384 <tcp_kill_timewait+0x58>)
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	60fb      	str	r3, [r7, #12]
 800f340:	e012      	b.n	800f368 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f342:	4b11      	ldr	r3, [pc, #68]	@ (800f388 <tcp_kill_timewait+0x5c>)
 800f344:	681a      	ldr	r2, [r3, #0]
 800f346:	68fb      	ldr	r3, [r7, #12]
 800f348:	6a1b      	ldr	r3, [r3, #32]
 800f34a:	1ad3      	subs	r3, r2, r3
 800f34c:	687a      	ldr	r2, [r7, #4]
 800f34e:	429a      	cmp	r2, r3
 800f350:	d807      	bhi.n	800f362 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800f352:	4b0d      	ldr	r3, [pc, #52]	@ (800f388 <tcp_kill_timewait+0x5c>)
 800f354:	681a      	ldr	r2, [r3, #0]
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	6a1b      	ldr	r3, [r3, #32]
 800f35a:	1ad3      	subs	r3, r2, r3
 800f35c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800f35e:	68fb      	ldr	r3, [r7, #12]
 800f360:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	68db      	ldr	r3, [r3, #12]
 800f366:	60fb      	str	r3, [r7, #12]
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d1e9      	bne.n	800f342 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800f36e:	68bb      	ldr	r3, [r7, #8]
 800f370:	2b00      	cmp	r3, #0
 800f372:	d002      	beq.n	800f37a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800f374:	68b8      	ldr	r0, [r7, #8]
 800f376:	f7ff f9d9 	bl	800e72c <tcp_abort>
  }
}
 800f37a:	bf00      	nop
 800f37c:	3710      	adds	r7, #16
 800f37e:	46bd      	mov	sp, r7
 800f380:	bd80      	pop	{r7, pc}
 800f382:	bf00      	nop
 800f384:	200151c8 	.word	0x200151c8
 800f388:	200151b8 	.word	0x200151b8

0800f38c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800f38c:	b580      	push	{r7, lr}
 800f38e:	b082      	sub	sp, #8
 800f390:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800f392:	4b10      	ldr	r3, [pc, #64]	@ (800f3d4 <tcp_handle_closepend+0x48>)
 800f394:	681b      	ldr	r3, [r3, #0]
 800f396:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800f398:	e014      	b.n	800f3c4 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	68db      	ldr	r3, [r3, #12]
 800f39e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	8b5b      	ldrh	r3, [r3, #26]
 800f3a4:	f003 0308 	and.w	r3, r3, #8
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d009      	beq.n	800f3c0 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	8b5b      	ldrh	r3, [r3, #26]
 800f3b0:	f023 0308 	bic.w	r3, r3, #8
 800f3b4:	b29a      	uxth	r2, r3
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800f3ba:	6878      	ldr	r0, [r7, #4]
 800f3bc:	f7ff f862 	bl	800e484 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800f3c0:	683b      	ldr	r3, [r7, #0]
 800f3c2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d1e7      	bne.n	800f39a <tcp_handle_closepend+0xe>
  }
}
 800f3ca:	bf00      	nop
 800f3cc:	bf00      	nop
 800f3ce:	3708      	adds	r7, #8
 800f3d0:	46bd      	mov	sp, r7
 800f3d2:	bd80      	pop	{r7, pc}
 800f3d4:	200151c4 	.word	0x200151c4

0800f3d8 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800f3d8:	b580      	push	{r7, lr}
 800f3da:	b084      	sub	sp, #16
 800f3dc:	af00      	add	r7, sp, #0
 800f3de:	4603      	mov	r3, r0
 800f3e0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f3e2:	2001      	movs	r0, #1
 800f3e4:	f7fd fbca 	bl	800cb7c <memp_malloc>
 800f3e8:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800f3ea:	68fb      	ldr	r3, [r7, #12]
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	d126      	bne.n	800f43e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800f3f0:	f7ff ffcc 	bl	800f38c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800f3f4:	f7ff ff9a 	bl	800f32c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f3f8:	2001      	movs	r0, #1
 800f3fa:	f7fd fbbf 	bl	800cb7c <memp_malloc>
 800f3fe:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	2b00      	cmp	r3, #0
 800f404:	d11b      	bne.n	800f43e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800f406:	2009      	movs	r0, #9
 800f408:	f7ff ff46 	bl	800f298 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f40c:	2001      	movs	r0, #1
 800f40e:	f7fd fbb5 	bl	800cb7c <memp_malloc>
 800f412:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	2b00      	cmp	r3, #0
 800f418:	d111      	bne.n	800f43e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800f41a:	2008      	movs	r0, #8
 800f41c:	f7ff ff3c 	bl	800f298 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f420:	2001      	movs	r0, #1
 800f422:	f7fd fbab 	bl	800cb7c <memp_malloc>
 800f426:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800f428:	68fb      	ldr	r3, [r7, #12]
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d107      	bne.n	800f43e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800f42e:	79fb      	ldrb	r3, [r7, #7]
 800f430:	4618      	mov	r0, r3
 800f432:	f7ff fee3 	bl	800f1fc <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f436:	2001      	movs	r0, #1
 800f438:	f7fd fba0 	bl	800cb7c <memp_malloc>
 800f43c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800f43e:	68fb      	ldr	r3, [r7, #12]
 800f440:	2b00      	cmp	r3, #0
 800f442:	d03f      	beq.n	800f4c4 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800f444:	229c      	movs	r2, #156	@ 0x9c
 800f446:	2100      	movs	r1, #0
 800f448:	68f8      	ldr	r0, [r7, #12]
 800f44a:	f008 f968 	bl	801771e <memset>
    pcb->prio = prio;
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	79fa      	ldrb	r2, [r7, #7]
 800f452:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800f45a:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800f45e:	68fb      	ldr	r3, [r7, #12]
 800f460:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800f464:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800f46a:	68fb      	ldr	r3, [r7, #12]
 800f46c:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800f46e:	68fb      	ldr	r3, [r7, #12]
 800f470:	22ff      	movs	r2, #255	@ 0xff
 800f472:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800f474:	68fb      	ldr	r3, [r7, #12]
 800f476:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800f47a:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	2206      	movs	r2, #6
 800f480:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	2206      	movs	r2, #6
 800f488:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 800f48a:	68fb      	ldr	r3, [r7, #12]
 800f48c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f490:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	2201      	movs	r2, #1
 800f496:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 800f49a:	4b0d      	ldr	r3, [pc, #52]	@ (800f4d0 <tcp_alloc+0xf8>)
 800f49c:	681a      	ldr	r2, [r3, #0]
 800f49e:	68fb      	ldr	r3, [r7, #12]
 800f4a0:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800f4a2:	4b0c      	ldr	r3, [pc, #48]	@ (800f4d4 <tcp_alloc+0xfc>)
 800f4a4:	781a      	ldrb	r2, [r3, #0]
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800f4aa:	68fb      	ldr	r3, [r7, #12]
 800f4ac:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800f4b0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800f4b4:	68fb      	ldr	r3, [r7, #12]
 800f4b6:	4a08      	ldr	r2, [pc, #32]	@ (800f4d8 <tcp_alloc+0x100>)
 800f4b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	4a07      	ldr	r2, [pc, #28]	@ (800f4dc <tcp_alloc+0x104>)
 800f4c0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800f4c4:	68fb      	ldr	r3, [r7, #12]
}
 800f4c6:	4618      	mov	r0, r3
 800f4c8:	3710      	adds	r7, #16
 800f4ca:	46bd      	mov	sp, r7
 800f4cc:	bd80      	pop	{r7, pc}
 800f4ce:	bf00      	nop
 800f4d0:	200151b8 	.word	0x200151b8
 800f4d4:	200151ce 	.word	0x200151ce
 800f4d8:	0800f191 	.word	0x0800f191
 800f4dc:	006ddd00 	.word	0x006ddd00

0800f4e0 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800f4e0:	b580      	push	{r7, lr}
 800f4e2:	b082      	sub	sp, #8
 800f4e4:	af00      	add	r7, sp, #0
 800f4e6:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d107      	bne.n	800f4fe <tcp_pcb_purge+0x1e>
 800f4ee:	4b21      	ldr	r3, [pc, #132]	@ (800f574 <tcp_pcb_purge+0x94>)
 800f4f0:	f640 0251 	movw	r2, #2129	@ 0x851
 800f4f4:	4920      	ldr	r1, [pc, #128]	@ (800f578 <tcp_pcb_purge+0x98>)
 800f4f6:	4821      	ldr	r0, [pc, #132]	@ (800f57c <tcp_pcb_purge+0x9c>)
 800f4f8:	f008 f870 	bl	80175dc <iprintf>
 800f4fc:	e037      	b.n	800f56e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	7d1b      	ldrb	r3, [r3, #20]
 800f502:	2b00      	cmp	r3, #0
 800f504:	d033      	beq.n	800f56e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800f50a:	2b0a      	cmp	r3, #10
 800f50c:	d02f      	beq.n	800f56e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800f512:	2b01      	cmp	r3, #1
 800f514:	d02b      	beq.n	800f56e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d007      	beq.n	800f52e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f522:	4618      	mov	r0, r3
 800f524:	f7fe fa10 	bl	800d948 <pbuf_free>
      pcb->refused_data = NULL;
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	2200      	movs	r2, #0
 800f52c:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f532:	2b00      	cmp	r3, #0
 800f534:	d002      	beq.n	800f53c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800f536:	6878      	ldr	r0, [r7, #4]
 800f538:	f000 f986 	bl	800f848 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f542:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f548:	4618      	mov	r0, r3
 800f54a:	f7ff fdc7 	bl	800f0dc <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f552:	4618      	mov	r0, r3
 800f554:	f7ff fdc2 	bl	800f0dc <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	2200      	movs	r2, #0
 800f55c:	66da      	str	r2, [r3, #108]	@ 0x6c
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	2200      	movs	r2, #0
 800f56a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800f56e:	3708      	adds	r7, #8
 800f570:	46bd      	mov	sp, r7
 800f572:	bd80      	pop	{r7, pc}
 800f574:	08020dd4 	.word	0x08020dd4
 800f578:	08021420 	.word	0x08021420
 800f57c:	08020e18 	.word	0x08020e18

0800f580 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800f580:	b580      	push	{r7, lr}
 800f582:	b084      	sub	sp, #16
 800f584:	af00      	add	r7, sp, #0
 800f586:	6078      	str	r0, [r7, #4]
 800f588:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800f58a:	683b      	ldr	r3, [r7, #0]
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d106      	bne.n	800f59e <tcp_pcb_remove+0x1e>
 800f590:	4b3e      	ldr	r3, [pc, #248]	@ (800f68c <tcp_pcb_remove+0x10c>)
 800f592:	f640 0283 	movw	r2, #2179	@ 0x883
 800f596:	493e      	ldr	r1, [pc, #248]	@ (800f690 <tcp_pcb_remove+0x110>)
 800f598:	483e      	ldr	r0, [pc, #248]	@ (800f694 <tcp_pcb_remove+0x114>)
 800f59a:	f008 f81f 	bl	80175dc <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	d106      	bne.n	800f5b2 <tcp_pcb_remove+0x32>
 800f5a4:	4b39      	ldr	r3, [pc, #228]	@ (800f68c <tcp_pcb_remove+0x10c>)
 800f5a6:	f640 0284 	movw	r2, #2180	@ 0x884
 800f5aa:	493b      	ldr	r1, [pc, #236]	@ (800f698 <tcp_pcb_remove+0x118>)
 800f5ac:	4839      	ldr	r0, [pc, #228]	@ (800f694 <tcp_pcb_remove+0x114>)
 800f5ae:	f008 f815 	bl	80175dc <iprintf>

  TCP_RMV(pcblist, pcb);
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	683a      	ldr	r2, [r7, #0]
 800f5b8:	429a      	cmp	r2, r3
 800f5ba:	d105      	bne.n	800f5c8 <tcp_pcb_remove+0x48>
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	681b      	ldr	r3, [r3, #0]
 800f5c0:	68da      	ldr	r2, [r3, #12]
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	601a      	str	r2, [r3, #0]
 800f5c6:	e013      	b.n	800f5f0 <tcp_pcb_remove+0x70>
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	60fb      	str	r3, [r7, #12]
 800f5ce:	e00c      	b.n	800f5ea <tcp_pcb_remove+0x6a>
 800f5d0:	68fb      	ldr	r3, [r7, #12]
 800f5d2:	68db      	ldr	r3, [r3, #12]
 800f5d4:	683a      	ldr	r2, [r7, #0]
 800f5d6:	429a      	cmp	r2, r3
 800f5d8:	d104      	bne.n	800f5e4 <tcp_pcb_remove+0x64>
 800f5da:	683b      	ldr	r3, [r7, #0]
 800f5dc:	68da      	ldr	r2, [r3, #12]
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	60da      	str	r2, [r3, #12]
 800f5e2:	e005      	b.n	800f5f0 <tcp_pcb_remove+0x70>
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	68db      	ldr	r3, [r3, #12]
 800f5e8:	60fb      	str	r3, [r7, #12]
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d1ef      	bne.n	800f5d0 <tcp_pcb_remove+0x50>
 800f5f0:	683b      	ldr	r3, [r7, #0]
 800f5f2:	2200      	movs	r2, #0
 800f5f4:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800f5f6:	6838      	ldr	r0, [r7, #0]
 800f5f8:	f7ff ff72 	bl	800f4e0 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800f5fc:	683b      	ldr	r3, [r7, #0]
 800f5fe:	7d1b      	ldrb	r3, [r3, #20]
 800f600:	2b0a      	cmp	r3, #10
 800f602:	d013      	beq.n	800f62c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800f604:	683b      	ldr	r3, [r7, #0]
 800f606:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800f608:	2b01      	cmp	r3, #1
 800f60a:	d00f      	beq.n	800f62c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800f60c:	683b      	ldr	r3, [r7, #0]
 800f60e:	8b5b      	ldrh	r3, [r3, #26]
 800f610:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800f614:	2b00      	cmp	r3, #0
 800f616:	d009      	beq.n	800f62c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800f618:	683b      	ldr	r3, [r7, #0]
 800f61a:	8b5b      	ldrh	r3, [r3, #26]
 800f61c:	f043 0302 	orr.w	r3, r3, #2
 800f620:	b29a      	uxth	r2, r3
 800f622:	683b      	ldr	r3, [r7, #0]
 800f624:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f626:	6838      	ldr	r0, [r7, #0]
 800f628:	f002 ff68 	bl	80124fc <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800f62c:	683b      	ldr	r3, [r7, #0]
 800f62e:	7d1b      	ldrb	r3, [r3, #20]
 800f630:	2b01      	cmp	r3, #1
 800f632:	d020      	beq.n	800f676 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800f634:	683b      	ldr	r3, [r7, #0]
 800f636:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f638:	2b00      	cmp	r3, #0
 800f63a:	d006      	beq.n	800f64a <tcp_pcb_remove+0xca>
 800f63c:	4b13      	ldr	r3, [pc, #76]	@ (800f68c <tcp_pcb_remove+0x10c>)
 800f63e:	f640 0293 	movw	r2, #2195	@ 0x893
 800f642:	4916      	ldr	r1, [pc, #88]	@ (800f69c <tcp_pcb_remove+0x11c>)
 800f644:	4813      	ldr	r0, [pc, #76]	@ (800f694 <tcp_pcb_remove+0x114>)
 800f646:	f007 ffc9 	bl	80175dc <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800f64a:	683b      	ldr	r3, [r7, #0]
 800f64c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d006      	beq.n	800f660 <tcp_pcb_remove+0xe0>
 800f652:	4b0e      	ldr	r3, [pc, #56]	@ (800f68c <tcp_pcb_remove+0x10c>)
 800f654:	f640 0294 	movw	r2, #2196	@ 0x894
 800f658:	4911      	ldr	r1, [pc, #68]	@ (800f6a0 <tcp_pcb_remove+0x120>)
 800f65a:	480e      	ldr	r0, [pc, #56]	@ (800f694 <tcp_pcb_remove+0x114>)
 800f65c:	f007 ffbe 	bl	80175dc <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800f660:	683b      	ldr	r3, [r7, #0]
 800f662:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f664:	2b00      	cmp	r3, #0
 800f666:	d006      	beq.n	800f676 <tcp_pcb_remove+0xf6>
 800f668:	4b08      	ldr	r3, [pc, #32]	@ (800f68c <tcp_pcb_remove+0x10c>)
 800f66a:	f640 0296 	movw	r2, #2198	@ 0x896
 800f66e:	490d      	ldr	r1, [pc, #52]	@ (800f6a4 <tcp_pcb_remove+0x124>)
 800f670:	4808      	ldr	r0, [pc, #32]	@ (800f694 <tcp_pcb_remove+0x114>)
 800f672:	f007 ffb3 	bl	80175dc <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800f676:	683b      	ldr	r3, [r7, #0]
 800f678:	2200      	movs	r2, #0
 800f67a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800f67c:	683b      	ldr	r3, [r7, #0]
 800f67e:	2200      	movs	r2, #0
 800f680:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800f682:	bf00      	nop
 800f684:	3710      	adds	r7, #16
 800f686:	46bd      	mov	sp, r7
 800f688:	bd80      	pop	{r7, pc}
 800f68a:	bf00      	nop
 800f68c:	08020dd4 	.word	0x08020dd4
 800f690:	0802143c 	.word	0x0802143c
 800f694:	08020e18 	.word	0x08020e18
 800f698:	08021458 	.word	0x08021458
 800f69c:	08021478 	.word	0x08021478
 800f6a0:	08021490 	.word	0x08021490
 800f6a4:	080214ac 	.word	0x080214ac

0800f6a8 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800f6a8:	b580      	push	{r7, lr}
 800f6aa:	b082      	sub	sp, #8
 800f6ac:	af00      	add	r7, sp, #0
 800f6ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d106      	bne.n	800f6c4 <tcp_next_iss+0x1c>
 800f6b6:	4b0a      	ldr	r3, [pc, #40]	@ (800f6e0 <tcp_next_iss+0x38>)
 800f6b8:	f640 02af 	movw	r2, #2223	@ 0x8af
 800f6bc:	4909      	ldr	r1, [pc, #36]	@ (800f6e4 <tcp_next_iss+0x3c>)
 800f6be:	480a      	ldr	r0, [pc, #40]	@ (800f6e8 <tcp_next_iss+0x40>)
 800f6c0:	f007 ff8c 	bl	80175dc <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800f6c4:	4b09      	ldr	r3, [pc, #36]	@ (800f6ec <tcp_next_iss+0x44>)
 800f6c6:	681a      	ldr	r2, [r3, #0]
 800f6c8:	4b09      	ldr	r3, [pc, #36]	@ (800f6f0 <tcp_next_iss+0x48>)
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	4413      	add	r3, r2
 800f6ce:	4a07      	ldr	r2, [pc, #28]	@ (800f6ec <tcp_next_iss+0x44>)
 800f6d0:	6013      	str	r3, [r2, #0]
  return iss;
 800f6d2:	4b06      	ldr	r3, [pc, #24]	@ (800f6ec <tcp_next_iss+0x44>)
 800f6d4:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800f6d6:	4618      	mov	r0, r3
 800f6d8:	3708      	adds	r7, #8
 800f6da:	46bd      	mov	sp, r7
 800f6dc:	bd80      	pop	{r7, pc}
 800f6de:	bf00      	nop
 800f6e0:	08020dd4 	.word	0x08020dd4
 800f6e4:	080214c4 	.word	0x080214c4
 800f6e8:	08020e18 	.word	0x08020e18
 800f6ec:	2000090c 	.word	0x2000090c
 800f6f0:	200151b8 	.word	0x200151b8

0800f6f4 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800f6f4:	b580      	push	{r7, lr}
 800f6f6:	b086      	sub	sp, #24
 800f6f8:	af00      	add	r7, sp, #0
 800f6fa:	4603      	mov	r3, r0
 800f6fc:	60b9      	str	r1, [r7, #8]
 800f6fe:	607a      	str	r2, [r7, #4]
 800f700:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	2b00      	cmp	r3, #0
 800f706:	d106      	bne.n	800f716 <tcp_eff_send_mss_netif+0x22>
 800f708:	4b14      	ldr	r3, [pc, #80]	@ (800f75c <tcp_eff_send_mss_netif+0x68>)
 800f70a:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800f70e:	4914      	ldr	r1, [pc, #80]	@ (800f760 <tcp_eff_send_mss_netif+0x6c>)
 800f710:	4814      	ldr	r0, [pc, #80]	@ (800f764 <tcp_eff_send_mss_netif+0x70>)
 800f712:	f007 ff63 	bl	80175dc <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800f716:	68bb      	ldr	r3, [r7, #8]
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d101      	bne.n	800f720 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800f71c:	89fb      	ldrh	r3, [r7, #14]
 800f71e:	e019      	b.n	800f754 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800f720:	68bb      	ldr	r3, [r7, #8]
 800f722:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800f724:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800f726:	8afb      	ldrh	r3, [r7, #22]
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d012      	beq.n	800f752 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800f72c:	2328      	movs	r3, #40	@ 0x28
 800f72e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800f730:	8afa      	ldrh	r2, [r7, #22]
 800f732:	8abb      	ldrh	r3, [r7, #20]
 800f734:	429a      	cmp	r2, r3
 800f736:	d904      	bls.n	800f742 <tcp_eff_send_mss_netif+0x4e>
 800f738:	8afa      	ldrh	r2, [r7, #22]
 800f73a:	8abb      	ldrh	r3, [r7, #20]
 800f73c:	1ad3      	subs	r3, r2, r3
 800f73e:	b29b      	uxth	r3, r3
 800f740:	e000      	b.n	800f744 <tcp_eff_send_mss_netif+0x50>
 800f742:	2300      	movs	r3, #0
 800f744:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800f746:	8a7a      	ldrh	r2, [r7, #18]
 800f748:	89fb      	ldrh	r3, [r7, #14]
 800f74a:	4293      	cmp	r3, r2
 800f74c:	bf28      	it	cs
 800f74e:	4613      	movcs	r3, r2
 800f750:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800f752:	89fb      	ldrh	r3, [r7, #14]
}
 800f754:	4618      	mov	r0, r3
 800f756:	3718      	adds	r7, #24
 800f758:	46bd      	mov	sp, r7
 800f75a:	bd80      	pop	{r7, pc}
 800f75c:	08020dd4 	.word	0x08020dd4
 800f760:	080214e0 	.word	0x080214e0
 800f764:	08020e18 	.word	0x08020e18

0800f768 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800f768:	b580      	push	{r7, lr}
 800f76a:	b084      	sub	sp, #16
 800f76c:	af00      	add	r7, sp, #0
 800f76e:	6078      	str	r0, [r7, #4]
 800f770:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800f772:	683b      	ldr	r3, [r7, #0]
 800f774:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d119      	bne.n	800f7b0 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800f77c:	4b10      	ldr	r3, [pc, #64]	@ (800f7c0 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800f77e:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800f782:	4910      	ldr	r1, [pc, #64]	@ (800f7c4 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800f784:	4810      	ldr	r0, [pc, #64]	@ (800f7c8 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800f786:	f007 ff29 	bl	80175dc <iprintf>

  while (pcb != NULL) {
 800f78a:	e011      	b.n	800f7b0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	681a      	ldr	r2, [r3, #0]
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	429a      	cmp	r2, r3
 800f796:	d108      	bne.n	800f7aa <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	68db      	ldr	r3, [r3, #12]
 800f79c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800f79e:	68f8      	ldr	r0, [r7, #12]
 800f7a0:	f7fe ffc4 	bl	800e72c <tcp_abort>
      pcb = next;
 800f7a4:	68bb      	ldr	r3, [r7, #8]
 800f7a6:	60fb      	str	r3, [r7, #12]
 800f7a8:	e002      	b.n	800f7b0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800f7aa:	68fb      	ldr	r3, [r7, #12]
 800f7ac:	68db      	ldr	r3, [r3, #12]
 800f7ae:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	d1ea      	bne.n	800f78c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800f7b6:	bf00      	nop
 800f7b8:	bf00      	nop
 800f7ba:	3710      	adds	r7, #16
 800f7bc:	46bd      	mov	sp, r7
 800f7be:	bd80      	pop	{r7, pc}
 800f7c0:	08020dd4 	.word	0x08020dd4
 800f7c4:	08021508 	.word	0x08021508
 800f7c8:	08020e18 	.word	0x08020e18

0800f7cc <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f7cc:	b580      	push	{r7, lr}
 800f7ce:	b084      	sub	sp, #16
 800f7d0:	af00      	add	r7, sp, #0
 800f7d2:	6078      	str	r0, [r7, #4]
 800f7d4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d02a      	beq.n	800f832 <tcp_netif_ip_addr_changed+0x66>
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d026      	beq.n	800f832 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800f7e4:	4b15      	ldr	r3, [pc, #84]	@ (800f83c <tcp_netif_ip_addr_changed+0x70>)
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	4619      	mov	r1, r3
 800f7ea:	6878      	ldr	r0, [r7, #4]
 800f7ec:	f7ff ffbc 	bl	800f768 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800f7f0:	4b13      	ldr	r3, [pc, #76]	@ (800f840 <tcp_netif_ip_addr_changed+0x74>)
 800f7f2:	681b      	ldr	r3, [r3, #0]
 800f7f4:	4619      	mov	r1, r3
 800f7f6:	6878      	ldr	r0, [r7, #4]
 800f7f8:	f7ff ffb6 	bl	800f768 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800f7fc:	683b      	ldr	r3, [r7, #0]
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d017      	beq.n	800f832 <tcp_netif_ip_addr_changed+0x66>
 800f802:	683b      	ldr	r3, [r7, #0]
 800f804:	681b      	ldr	r3, [r3, #0]
 800f806:	2b00      	cmp	r3, #0
 800f808:	d013      	beq.n	800f832 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f80a:	4b0e      	ldr	r3, [pc, #56]	@ (800f844 <tcp_netif_ip_addr_changed+0x78>)
 800f80c:	681b      	ldr	r3, [r3, #0]
 800f80e:	60fb      	str	r3, [r7, #12]
 800f810:	e00c      	b.n	800f82c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800f812:	68fb      	ldr	r3, [r7, #12]
 800f814:	681a      	ldr	r2, [r3, #0]
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	429a      	cmp	r2, r3
 800f81c:	d103      	bne.n	800f826 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800f81e:	683b      	ldr	r3, [r7, #0]
 800f820:	681a      	ldr	r2, [r3, #0]
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	68db      	ldr	r3, [r3, #12]
 800f82a:	60fb      	str	r3, [r7, #12]
 800f82c:	68fb      	ldr	r3, [r7, #12]
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d1ef      	bne.n	800f812 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800f832:	bf00      	nop
 800f834:	3710      	adds	r7, #16
 800f836:	46bd      	mov	sp, r7
 800f838:	bd80      	pop	{r7, pc}
 800f83a:	bf00      	nop
 800f83c:	200151c4 	.word	0x200151c4
 800f840:	200151bc 	.word	0x200151bc
 800f844:	200151c0 	.word	0x200151c0

0800f848 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800f848:	b580      	push	{r7, lr}
 800f84a:	b082      	sub	sp, #8
 800f84c:	af00      	add	r7, sp, #0
 800f84e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f854:	2b00      	cmp	r3, #0
 800f856:	d007      	beq.n	800f868 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f85c:	4618      	mov	r0, r3
 800f85e:	f7ff fc3d 	bl	800f0dc <tcp_segs_free>
    pcb->ooseq = NULL;
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	2200      	movs	r2, #0
 800f866:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800f868:	bf00      	nop
 800f86a:	3708      	adds	r7, #8
 800f86c:	46bd      	mov	sp, r7
 800f86e:	bd80      	pop	{r7, pc}

0800f870 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800f870:	b590      	push	{r4, r7, lr}
 800f872:	b08d      	sub	sp, #52	@ 0x34
 800f874:	af04      	add	r7, sp, #16
 800f876:	6078      	str	r0, [r7, #4]
 800f878:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d105      	bne.n	800f88c <tcp_input+0x1c>
 800f880:	4b9b      	ldr	r3, [pc, #620]	@ (800faf0 <tcp_input+0x280>)
 800f882:	2283      	movs	r2, #131	@ 0x83
 800f884:	499b      	ldr	r1, [pc, #620]	@ (800faf4 <tcp_input+0x284>)
 800f886:	489c      	ldr	r0, [pc, #624]	@ (800faf8 <tcp_input+0x288>)
 800f888:	f007 fea8 	bl	80175dc <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	685b      	ldr	r3, [r3, #4]
 800f890:	4a9a      	ldr	r2, [pc, #616]	@ (800fafc <tcp_input+0x28c>)
 800f892:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	895b      	ldrh	r3, [r3, #10]
 800f898:	2b13      	cmp	r3, #19
 800f89a:	f240 83d1 	bls.w	8010040 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f89e:	4b98      	ldr	r3, [pc, #608]	@ (800fb00 <tcp_input+0x290>)
 800f8a0:	695b      	ldr	r3, [r3, #20]
 800f8a2:	4a97      	ldr	r2, [pc, #604]	@ (800fb00 <tcp_input+0x290>)
 800f8a4:	6812      	ldr	r2, [r2, #0]
 800f8a6:	4611      	mov	r1, r2
 800f8a8:	4618      	mov	r0, r3
 800f8aa:	f005 ffa3 	bl	80157f4 <ip4_addr_isbroadcast_u32>
 800f8ae:	4603      	mov	r3, r0
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	f040 83c7 	bne.w	8010044 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800f8b6:	4b92      	ldr	r3, [pc, #584]	@ (800fb00 <tcp_input+0x290>)
 800f8b8:	695b      	ldr	r3, [r3, #20]
 800f8ba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f8be:	2be0      	cmp	r3, #224	@ 0xe0
 800f8c0:	f000 83c0 	beq.w	8010044 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800f8c4:	4b8d      	ldr	r3, [pc, #564]	@ (800fafc <tcp_input+0x28c>)
 800f8c6:	681b      	ldr	r3, [r3, #0]
 800f8c8:	899b      	ldrh	r3, [r3, #12]
 800f8ca:	b29b      	uxth	r3, r3
 800f8cc:	4618      	mov	r0, r3
 800f8ce:	f7fc fa13 	bl	800bcf8 <lwip_htons>
 800f8d2:	4603      	mov	r3, r0
 800f8d4:	0b1b      	lsrs	r3, r3, #12
 800f8d6:	b29b      	uxth	r3, r3
 800f8d8:	b2db      	uxtb	r3, r3
 800f8da:	009b      	lsls	r3, r3, #2
 800f8dc:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800f8de:	7cbb      	ldrb	r3, [r7, #18]
 800f8e0:	2b13      	cmp	r3, #19
 800f8e2:	f240 83b1 	bls.w	8010048 <tcp_input+0x7d8>
 800f8e6:	7cbb      	ldrb	r3, [r7, #18]
 800f8e8:	b29a      	uxth	r2, r3
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	891b      	ldrh	r3, [r3, #8]
 800f8ee:	429a      	cmp	r2, r3
 800f8f0:	f200 83aa 	bhi.w	8010048 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800f8f4:	7cbb      	ldrb	r3, [r7, #18]
 800f8f6:	b29b      	uxth	r3, r3
 800f8f8:	3b14      	subs	r3, #20
 800f8fa:	b29a      	uxth	r2, r3
 800f8fc:	4b81      	ldr	r3, [pc, #516]	@ (800fb04 <tcp_input+0x294>)
 800f8fe:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800f900:	4b81      	ldr	r3, [pc, #516]	@ (800fb08 <tcp_input+0x298>)
 800f902:	2200      	movs	r2, #0
 800f904:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	895a      	ldrh	r2, [r3, #10]
 800f90a:	7cbb      	ldrb	r3, [r7, #18]
 800f90c:	b29b      	uxth	r3, r3
 800f90e:	429a      	cmp	r2, r3
 800f910:	d309      	bcc.n	800f926 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800f912:	4b7c      	ldr	r3, [pc, #496]	@ (800fb04 <tcp_input+0x294>)
 800f914:	881a      	ldrh	r2, [r3, #0]
 800f916:	4b7d      	ldr	r3, [pc, #500]	@ (800fb0c <tcp_input+0x29c>)
 800f918:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800f91a:	7cbb      	ldrb	r3, [r7, #18]
 800f91c:	4619      	mov	r1, r3
 800f91e:	6878      	ldr	r0, [r7, #4]
 800f920:	f7fd ff8c 	bl	800d83c <pbuf_remove_header>
 800f924:	e04e      	b.n	800f9c4 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	681b      	ldr	r3, [r3, #0]
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	d105      	bne.n	800f93a <tcp_input+0xca>
 800f92e:	4b70      	ldr	r3, [pc, #448]	@ (800faf0 <tcp_input+0x280>)
 800f930:	22c2      	movs	r2, #194	@ 0xc2
 800f932:	4977      	ldr	r1, [pc, #476]	@ (800fb10 <tcp_input+0x2a0>)
 800f934:	4870      	ldr	r0, [pc, #448]	@ (800faf8 <tcp_input+0x288>)
 800f936:	f007 fe51 	bl	80175dc <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800f93a:	2114      	movs	r1, #20
 800f93c:	6878      	ldr	r0, [r7, #4]
 800f93e:	f7fd ff7d 	bl	800d83c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	895a      	ldrh	r2, [r3, #10]
 800f946:	4b71      	ldr	r3, [pc, #452]	@ (800fb0c <tcp_input+0x29c>)
 800f948:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800f94a:	4b6e      	ldr	r3, [pc, #440]	@ (800fb04 <tcp_input+0x294>)
 800f94c:	881a      	ldrh	r2, [r3, #0]
 800f94e:	4b6f      	ldr	r3, [pc, #444]	@ (800fb0c <tcp_input+0x29c>)
 800f950:	881b      	ldrh	r3, [r3, #0]
 800f952:	1ad3      	subs	r3, r2, r3
 800f954:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800f956:	4b6d      	ldr	r3, [pc, #436]	@ (800fb0c <tcp_input+0x29c>)
 800f958:	881b      	ldrh	r3, [r3, #0]
 800f95a:	4619      	mov	r1, r3
 800f95c:	6878      	ldr	r0, [r7, #4]
 800f95e:	f7fd ff6d 	bl	800d83c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	895b      	ldrh	r3, [r3, #10]
 800f968:	8a3a      	ldrh	r2, [r7, #16]
 800f96a:	429a      	cmp	r2, r3
 800f96c:	f200 836e 	bhi.w	801004c <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	685b      	ldr	r3, [r3, #4]
 800f976:	4a64      	ldr	r2, [pc, #400]	@ (800fb08 <tcp_input+0x298>)
 800f978:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	681b      	ldr	r3, [r3, #0]
 800f97e:	8a3a      	ldrh	r2, [r7, #16]
 800f980:	4611      	mov	r1, r2
 800f982:	4618      	mov	r0, r3
 800f984:	f7fd ff5a 	bl	800d83c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	891a      	ldrh	r2, [r3, #8]
 800f98c:	8a3b      	ldrh	r3, [r7, #16]
 800f98e:	1ad3      	subs	r3, r2, r3
 800f990:	b29a      	uxth	r2, r3
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	895b      	ldrh	r3, [r3, #10]
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d005      	beq.n	800f9aa <tcp_input+0x13a>
 800f99e:	4b54      	ldr	r3, [pc, #336]	@ (800faf0 <tcp_input+0x280>)
 800f9a0:	22df      	movs	r2, #223	@ 0xdf
 800f9a2:	495c      	ldr	r1, [pc, #368]	@ (800fb14 <tcp_input+0x2a4>)
 800f9a4:	4854      	ldr	r0, [pc, #336]	@ (800faf8 <tcp_input+0x288>)
 800f9a6:	f007 fe19 	bl	80175dc <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	891a      	ldrh	r2, [r3, #8]
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	681b      	ldr	r3, [r3, #0]
 800f9b2:	891b      	ldrh	r3, [r3, #8]
 800f9b4:	429a      	cmp	r2, r3
 800f9b6:	d005      	beq.n	800f9c4 <tcp_input+0x154>
 800f9b8:	4b4d      	ldr	r3, [pc, #308]	@ (800faf0 <tcp_input+0x280>)
 800f9ba:	22e0      	movs	r2, #224	@ 0xe0
 800f9bc:	4956      	ldr	r1, [pc, #344]	@ (800fb18 <tcp_input+0x2a8>)
 800f9be:	484e      	ldr	r0, [pc, #312]	@ (800faf8 <tcp_input+0x288>)
 800f9c0:	f007 fe0c 	bl	80175dc <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800f9c4:	4b4d      	ldr	r3, [pc, #308]	@ (800fafc <tcp_input+0x28c>)
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	881b      	ldrh	r3, [r3, #0]
 800f9ca:	b29b      	uxth	r3, r3
 800f9cc:	4a4b      	ldr	r2, [pc, #300]	@ (800fafc <tcp_input+0x28c>)
 800f9ce:	6814      	ldr	r4, [r2, #0]
 800f9d0:	4618      	mov	r0, r3
 800f9d2:	f7fc f991 	bl	800bcf8 <lwip_htons>
 800f9d6:	4603      	mov	r3, r0
 800f9d8:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800f9da:	4b48      	ldr	r3, [pc, #288]	@ (800fafc <tcp_input+0x28c>)
 800f9dc:	681b      	ldr	r3, [r3, #0]
 800f9de:	885b      	ldrh	r3, [r3, #2]
 800f9e0:	b29b      	uxth	r3, r3
 800f9e2:	4a46      	ldr	r2, [pc, #280]	@ (800fafc <tcp_input+0x28c>)
 800f9e4:	6814      	ldr	r4, [r2, #0]
 800f9e6:	4618      	mov	r0, r3
 800f9e8:	f7fc f986 	bl	800bcf8 <lwip_htons>
 800f9ec:	4603      	mov	r3, r0
 800f9ee:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800f9f0:	4b42      	ldr	r3, [pc, #264]	@ (800fafc <tcp_input+0x28c>)
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	685b      	ldr	r3, [r3, #4]
 800f9f6:	4a41      	ldr	r2, [pc, #260]	@ (800fafc <tcp_input+0x28c>)
 800f9f8:	6814      	ldr	r4, [r2, #0]
 800f9fa:	4618      	mov	r0, r3
 800f9fc:	f7fc f992 	bl	800bd24 <lwip_htonl>
 800fa00:	4603      	mov	r3, r0
 800fa02:	6063      	str	r3, [r4, #4]
 800fa04:	6863      	ldr	r3, [r4, #4]
 800fa06:	4a45      	ldr	r2, [pc, #276]	@ (800fb1c <tcp_input+0x2ac>)
 800fa08:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800fa0a:	4b3c      	ldr	r3, [pc, #240]	@ (800fafc <tcp_input+0x28c>)
 800fa0c:	681b      	ldr	r3, [r3, #0]
 800fa0e:	689b      	ldr	r3, [r3, #8]
 800fa10:	4a3a      	ldr	r2, [pc, #232]	@ (800fafc <tcp_input+0x28c>)
 800fa12:	6814      	ldr	r4, [r2, #0]
 800fa14:	4618      	mov	r0, r3
 800fa16:	f7fc f985 	bl	800bd24 <lwip_htonl>
 800fa1a:	4603      	mov	r3, r0
 800fa1c:	60a3      	str	r3, [r4, #8]
 800fa1e:	68a3      	ldr	r3, [r4, #8]
 800fa20:	4a3f      	ldr	r2, [pc, #252]	@ (800fb20 <tcp_input+0x2b0>)
 800fa22:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800fa24:	4b35      	ldr	r3, [pc, #212]	@ (800fafc <tcp_input+0x28c>)
 800fa26:	681b      	ldr	r3, [r3, #0]
 800fa28:	89db      	ldrh	r3, [r3, #14]
 800fa2a:	b29b      	uxth	r3, r3
 800fa2c:	4a33      	ldr	r2, [pc, #204]	@ (800fafc <tcp_input+0x28c>)
 800fa2e:	6814      	ldr	r4, [r2, #0]
 800fa30:	4618      	mov	r0, r3
 800fa32:	f7fc f961 	bl	800bcf8 <lwip_htons>
 800fa36:	4603      	mov	r3, r0
 800fa38:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800fa3a:	4b30      	ldr	r3, [pc, #192]	@ (800fafc <tcp_input+0x28c>)
 800fa3c:	681b      	ldr	r3, [r3, #0]
 800fa3e:	899b      	ldrh	r3, [r3, #12]
 800fa40:	b29b      	uxth	r3, r3
 800fa42:	4618      	mov	r0, r3
 800fa44:	f7fc f958 	bl	800bcf8 <lwip_htons>
 800fa48:	4603      	mov	r3, r0
 800fa4a:	b2db      	uxtb	r3, r3
 800fa4c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800fa50:	b2da      	uxtb	r2, r3
 800fa52:	4b34      	ldr	r3, [pc, #208]	@ (800fb24 <tcp_input+0x2b4>)
 800fa54:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	891a      	ldrh	r2, [r3, #8]
 800fa5a:	4b33      	ldr	r3, [pc, #204]	@ (800fb28 <tcp_input+0x2b8>)
 800fa5c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800fa5e:	4b31      	ldr	r3, [pc, #196]	@ (800fb24 <tcp_input+0x2b4>)
 800fa60:	781b      	ldrb	r3, [r3, #0]
 800fa62:	f003 0303 	and.w	r3, r3, #3
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d00c      	beq.n	800fa84 <tcp_input+0x214>
    tcplen++;
 800fa6a:	4b2f      	ldr	r3, [pc, #188]	@ (800fb28 <tcp_input+0x2b8>)
 800fa6c:	881b      	ldrh	r3, [r3, #0]
 800fa6e:	3301      	adds	r3, #1
 800fa70:	b29a      	uxth	r2, r3
 800fa72:	4b2d      	ldr	r3, [pc, #180]	@ (800fb28 <tcp_input+0x2b8>)
 800fa74:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	891a      	ldrh	r2, [r3, #8]
 800fa7a:	4b2b      	ldr	r3, [pc, #172]	@ (800fb28 <tcp_input+0x2b8>)
 800fa7c:	881b      	ldrh	r3, [r3, #0]
 800fa7e:	429a      	cmp	r2, r3
 800fa80:	f200 82e6 	bhi.w	8010050 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800fa84:	2300      	movs	r3, #0
 800fa86:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800fa88:	4b28      	ldr	r3, [pc, #160]	@ (800fb2c <tcp_input+0x2bc>)
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	61fb      	str	r3, [r7, #28]
 800fa8e:	e09d      	b.n	800fbcc <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800fa90:	69fb      	ldr	r3, [r7, #28]
 800fa92:	7d1b      	ldrb	r3, [r3, #20]
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	d105      	bne.n	800faa4 <tcp_input+0x234>
 800fa98:	4b15      	ldr	r3, [pc, #84]	@ (800faf0 <tcp_input+0x280>)
 800fa9a:	22fb      	movs	r2, #251	@ 0xfb
 800fa9c:	4924      	ldr	r1, [pc, #144]	@ (800fb30 <tcp_input+0x2c0>)
 800fa9e:	4816      	ldr	r0, [pc, #88]	@ (800faf8 <tcp_input+0x288>)
 800faa0:	f007 fd9c 	bl	80175dc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800faa4:	69fb      	ldr	r3, [r7, #28]
 800faa6:	7d1b      	ldrb	r3, [r3, #20]
 800faa8:	2b0a      	cmp	r3, #10
 800faaa:	d105      	bne.n	800fab8 <tcp_input+0x248>
 800faac:	4b10      	ldr	r3, [pc, #64]	@ (800faf0 <tcp_input+0x280>)
 800faae:	22fc      	movs	r2, #252	@ 0xfc
 800fab0:	4920      	ldr	r1, [pc, #128]	@ (800fb34 <tcp_input+0x2c4>)
 800fab2:	4811      	ldr	r0, [pc, #68]	@ (800faf8 <tcp_input+0x288>)
 800fab4:	f007 fd92 	bl	80175dc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800fab8:	69fb      	ldr	r3, [r7, #28]
 800faba:	7d1b      	ldrb	r3, [r3, #20]
 800fabc:	2b01      	cmp	r3, #1
 800fabe:	d105      	bne.n	800facc <tcp_input+0x25c>
 800fac0:	4b0b      	ldr	r3, [pc, #44]	@ (800faf0 <tcp_input+0x280>)
 800fac2:	22fd      	movs	r2, #253	@ 0xfd
 800fac4:	491c      	ldr	r1, [pc, #112]	@ (800fb38 <tcp_input+0x2c8>)
 800fac6:	480c      	ldr	r0, [pc, #48]	@ (800faf8 <tcp_input+0x288>)
 800fac8:	f007 fd88 	bl	80175dc <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800facc:	69fb      	ldr	r3, [r7, #28]
 800face:	7a1b      	ldrb	r3, [r3, #8]
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	d033      	beq.n	800fb3c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800fad4:	69fb      	ldr	r3, [r7, #28]
 800fad6:	7a1a      	ldrb	r2, [r3, #8]
 800fad8:	4b09      	ldr	r3, [pc, #36]	@ (800fb00 <tcp_input+0x290>)
 800fada:	685b      	ldr	r3, [r3, #4]
 800fadc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800fae0:	3301      	adds	r3, #1
 800fae2:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800fae4:	429a      	cmp	r2, r3
 800fae6:	d029      	beq.n	800fb3c <tcp_input+0x2cc>
      prev = pcb;
 800fae8:	69fb      	ldr	r3, [r7, #28]
 800faea:	61bb      	str	r3, [r7, #24]
      continue;
 800faec:	e06b      	b.n	800fbc6 <tcp_input+0x356>
 800faee:	bf00      	nop
 800faf0:	0802153c 	.word	0x0802153c
 800faf4:	08021570 	.word	0x08021570
 800faf8:	08021588 	.word	0x08021588
 800fafc:	200151e0 	.word	0x200151e0
 800fb00:	20011e78 	.word	0x20011e78
 800fb04:	200151e4 	.word	0x200151e4
 800fb08:	200151e8 	.word	0x200151e8
 800fb0c:	200151e6 	.word	0x200151e6
 800fb10:	080215b0 	.word	0x080215b0
 800fb14:	080215c0 	.word	0x080215c0
 800fb18:	080215cc 	.word	0x080215cc
 800fb1c:	200151f0 	.word	0x200151f0
 800fb20:	200151f4 	.word	0x200151f4
 800fb24:	200151fc 	.word	0x200151fc
 800fb28:	200151fa 	.word	0x200151fa
 800fb2c:	200151c4 	.word	0x200151c4
 800fb30:	080215ec 	.word	0x080215ec
 800fb34:	08021614 	.word	0x08021614
 800fb38:	08021640 	.word	0x08021640
    }

    if (pcb->remote_port == tcphdr->src &&
 800fb3c:	69fb      	ldr	r3, [r7, #28]
 800fb3e:	8b1a      	ldrh	r2, [r3, #24]
 800fb40:	4b72      	ldr	r3, [pc, #456]	@ (800fd0c <tcp_input+0x49c>)
 800fb42:	681b      	ldr	r3, [r3, #0]
 800fb44:	881b      	ldrh	r3, [r3, #0]
 800fb46:	b29b      	uxth	r3, r3
 800fb48:	429a      	cmp	r2, r3
 800fb4a:	d13a      	bne.n	800fbc2 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800fb4c:	69fb      	ldr	r3, [r7, #28]
 800fb4e:	8ada      	ldrh	r2, [r3, #22]
 800fb50:	4b6e      	ldr	r3, [pc, #440]	@ (800fd0c <tcp_input+0x49c>)
 800fb52:	681b      	ldr	r3, [r3, #0]
 800fb54:	885b      	ldrh	r3, [r3, #2]
 800fb56:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800fb58:	429a      	cmp	r2, r3
 800fb5a:	d132      	bne.n	800fbc2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800fb5c:	69fb      	ldr	r3, [r7, #28]
 800fb5e:	685a      	ldr	r2, [r3, #4]
 800fb60:	4b6b      	ldr	r3, [pc, #428]	@ (800fd10 <tcp_input+0x4a0>)
 800fb62:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800fb64:	429a      	cmp	r2, r3
 800fb66:	d12c      	bne.n	800fbc2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800fb68:	69fb      	ldr	r3, [r7, #28]
 800fb6a:	681a      	ldr	r2, [r3, #0]
 800fb6c:	4b68      	ldr	r3, [pc, #416]	@ (800fd10 <tcp_input+0x4a0>)
 800fb6e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800fb70:	429a      	cmp	r2, r3
 800fb72:	d126      	bne.n	800fbc2 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800fb74:	69fb      	ldr	r3, [r7, #28]
 800fb76:	68db      	ldr	r3, [r3, #12]
 800fb78:	69fa      	ldr	r2, [r7, #28]
 800fb7a:	429a      	cmp	r2, r3
 800fb7c:	d106      	bne.n	800fb8c <tcp_input+0x31c>
 800fb7e:	4b65      	ldr	r3, [pc, #404]	@ (800fd14 <tcp_input+0x4a4>)
 800fb80:	f240 120d 	movw	r2, #269	@ 0x10d
 800fb84:	4964      	ldr	r1, [pc, #400]	@ (800fd18 <tcp_input+0x4a8>)
 800fb86:	4865      	ldr	r0, [pc, #404]	@ (800fd1c <tcp_input+0x4ac>)
 800fb88:	f007 fd28 	bl	80175dc <iprintf>
      if (prev != NULL) {
 800fb8c:	69bb      	ldr	r3, [r7, #24]
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d00a      	beq.n	800fba8 <tcp_input+0x338>
        prev->next = pcb->next;
 800fb92:	69fb      	ldr	r3, [r7, #28]
 800fb94:	68da      	ldr	r2, [r3, #12]
 800fb96:	69bb      	ldr	r3, [r7, #24]
 800fb98:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800fb9a:	4b61      	ldr	r3, [pc, #388]	@ (800fd20 <tcp_input+0x4b0>)
 800fb9c:	681a      	ldr	r2, [r3, #0]
 800fb9e:	69fb      	ldr	r3, [r7, #28]
 800fba0:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800fba2:	4a5f      	ldr	r2, [pc, #380]	@ (800fd20 <tcp_input+0x4b0>)
 800fba4:	69fb      	ldr	r3, [r7, #28]
 800fba6:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800fba8:	69fb      	ldr	r3, [r7, #28]
 800fbaa:	68db      	ldr	r3, [r3, #12]
 800fbac:	69fa      	ldr	r2, [r7, #28]
 800fbae:	429a      	cmp	r2, r3
 800fbb0:	d111      	bne.n	800fbd6 <tcp_input+0x366>
 800fbb2:	4b58      	ldr	r3, [pc, #352]	@ (800fd14 <tcp_input+0x4a4>)
 800fbb4:	f240 1215 	movw	r2, #277	@ 0x115
 800fbb8:	495a      	ldr	r1, [pc, #360]	@ (800fd24 <tcp_input+0x4b4>)
 800fbba:	4858      	ldr	r0, [pc, #352]	@ (800fd1c <tcp_input+0x4ac>)
 800fbbc:	f007 fd0e 	bl	80175dc <iprintf>
      break;
 800fbc0:	e009      	b.n	800fbd6 <tcp_input+0x366>
    }
    prev = pcb;
 800fbc2:	69fb      	ldr	r3, [r7, #28]
 800fbc4:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800fbc6:	69fb      	ldr	r3, [r7, #28]
 800fbc8:	68db      	ldr	r3, [r3, #12]
 800fbca:	61fb      	str	r3, [r7, #28]
 800fbcc:	69fb      	ldr	r3, [r7, #28]
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	f47f af5e 	bne.w	800fa90 <tcp_input+0x220>
 800fbd4:	e000      	b.n	800fbd8 <tcp_input+0x368>
      break;
 800fbd6:	bf00      	nop
  }

  if (pcb == NULL) {
 800fbd8:	69fb      	ldr	r3, [r7, #28]
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	f040 80aa 	bne.w	800fd34 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800fbe0:	4b51      	ldr	r3, [pc, #324]	@ (800fd28 <tcp_input+0x4b8>)
 800fbe2:	681b      	ldr	r3, [r3, #0]
 800fbe4:	61fb      	str	r3, [r7, #28]
 800fbe6:	e03f      	b.n	800fc68 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800fbe8:	69fb      	ldr	r3, [r7, #28]
 800fbea:	7d1b      	ldrb	r3, [r3, #20]
 800fbec:	2b0a      	cmp	r3, #10
 800fbee:	d006      	beq.n	800fbfe <tcp_input+0x38e>
 800fbf0:	4b48      	ldr	r3, [pc, #288]	@ (800fd14 <tcp_input+0x4a4>)
 800fbf2:	f240 121f 	movw	r2, #287	@ 0x11f
 800fbf6:	494d      	ldr	r1, [pc, #308]	@ (800fd2c <tcp_input+0x4bc>)
 800fbf8:	4848      	ldr	r0, [pc, #288]	@ (800fd1c <tcp_input+0x4ac>)
 800fbfa:	f007 fcef 	bl	80175dc <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800fbfe:	69fb      	ldr	r3, [r7, #28]
 800fc00:	7a1b      	ldrb	r3, [r3, #8]
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	d009      	beq.n	800fc1a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800fc06:	69fb      	ldr	r3, [r7, #28]
 800fc08:	7a1a      	ldrb	r2, [r3, #8]
 800fc0a:	4b41      	ldr	r3, [pc, #260]	@ (800fd10 <tcp_input+0x4a0>)
 800fc0c:	685b      	ldr	r3, [r3, #4]
 800fc0e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800fc12:	3301      	adds	r3, #1
 800fc14:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800fc16:	429a      	cmp	r2, r3
 800fc18:	d122      	bne.n	800fc60 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800fc1a:	69fb      	ldr	r3, [r7, #28]
 800fc1c:	8b1a      	ldrh	r2, [r3, #24]
 800fc1e:	4b3b      	ldr	r3, [pc, #236]	@ (800fd0c <tcp_input+0x49c>)
 800fc20:	681b      	ldr	r3, [r3, #0]
 800fc22:	881b      	ldrh	r3, [r3, #0]
 800fc24:	b29b      	uxth	r3, r3
 800fc26:	429a      	cmp	r2, r3
 800fc28:	d11b      	bne.n	800fc62 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800fc2a:	69fb      	ldr	r3, [r7, #28]
 800fc2c:	8ada      	ldrh	r2, [r3, #22]
 800fc2e:	4b37      	ldr	r3, [pc, #220]	@ (800fd0c <tcp_input+0x49c>)
 800fc30:	681b      	ldr	r3, [r3, #0]
 800fc32:	885b      	ldrh	r3, [r3, #2]
 800fc34:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800fc36:	429a      	cmp	r2, r3
 800fc38:	d113      	bne.n	800fc62 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800fc3a:	69fb      	ldr	r3, [r7, #28]
 800fc3c:	685a      	ldr	r2, [r3, #4]
 800fc3e:	4b34      	ldr	r3, [pc, #208]	@ (800fd10 <tcp_input+0x4a0>)
 800fc40:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800fc42:	429a      	cmp	r2, r3
 800fc44:	d10d      	bne.n	800fc62 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800fc46:	69fb      	ldr	r3, [r7, #28]
 800fc48:	681a      	ldr	r2, [r3, #0]
 800fc4a:	4b31      	ldr	r3, [pc, #196]	@ (800fd10 <tcp_input+0x4a0>)
 800fc4c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800fc4e:	429a      	cmp	r2, r3
 800fc50:	d107      	bne.n	800fc62 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800fc52:	69f8      	ldr	r0, [r7, #28]
 800fc54:	f000 fb56 	bl	8010304 <tcp_timewait_input>
        }
        pbuf_free(p);
 800fc58:	6878      	ldr	r0, [r7, #4]
 800fc5a:	f7fd fe75 	bl	800d948 <pbuf_free>
        return;
 800fc5e:	e1fd      	b.n	801005c <tcp_input+0x7ec>
        continue;
 800fc60:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800fc62:	69fb      	ldr	r3, [r7, #28]
 800fc64:	68db      	ldr	r3, [r3, #12]
 800fc66:	61fb      	str	r3, [r7, #28]
 800fc68:	69fb      	ldr	r3, [r7, #28]
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d1bc      	bne.n	800fbe8 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800fc6e:	2300      	movs	r3, #0
 800fc70:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800fc72:	4b2f      	ldr	r3, [pc, #188]	@ (800fd30 <tcp_input+0x4c0>)
 800fc74:	681b      	ldr	r3, [r3, #0]
 800fc76:	617b      	str	r3, [r7, #20]
 800fc78:	e02a      	b.n	800fcd0 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800fc7a:	697b      	ldr	r3, [r7, #20]
 800fc7c:	7a1b      	ldrb	r3, [r3, #8]
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d00c      	beq.n	800fc9c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800fc82:	697b      	ldr	r3, [r7, #20]
 800fc84:	7a1a      	ldrb	r2, [r3, #8]
 800fc86:	4b22      	ldr	r3, [pc, #136]	@ (800fd10 <tcp_input+0x4a0>)
 800fc88:	685b      	ldr	r3, [r3, #4]
 800fc8a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800fc8e:	3301      	adds	r3, #1
 800fc90:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800fc92:	429a      	cmp	r2, r3
 800fc94:	d002      	beq.n	800fc9c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800fc96:	697b      	ldr	r3, [r7, #20]
 800fc98:	61bb      	str	r3, [r7, #24]
        continue;
 800fc9a:	e016      	b.n	800fcca <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800fc9c:	697b      	ldr	r3, [r7, #20]
 800fc9e:	8ada      	ldrh	r2, [r3, #22]
 800fca0:	4b1a      	ldr	r3, [pc, #104]	@ (800fd0c <tcp_input+0x49c>)
 800fca2:	681b      	ldr	r3, [r3, #0]
 800fca4:	885b      	ldrh	r3, [r3, #2]
 800fca6:	b29b      	uxth	r3, r3
 800fca8:	429a      	cmp	r2, r3
 800fcaa:	d10c      	bne.n	800fcc6 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800fcac:	697b      	ldr	r3, [r7, #20]
 800fcae:	681a      	ldr	r2, [r3, #0]
 800fcb0:	4b17      	ldr	r3, [pc, #92]	@ (800fd10 <tcp_input+0x4a0>)
 800fcb2:	695b      	ldr	r3, [r3, #20]
 800fcb4:	429a      	cmp	r2, r3
 800fcb6:	d00f      	beq.n	800fcd8 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800fcb8:	697b      	ldr	r3, [r7, #20]
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	d00d      	beq.n	800fcda <tcp_input+0x46a>
 800fcbe:	697b      	ldr	r3, [r7, #20]
 800fcc0:	681b      	ldr	r3, [r3, #0]
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	d009      	beq.n	800fcda <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800fcc6:	697b      	ldr	r3, [r7, #20]
 800fcc8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800fcca:	697b      	ldr	r3, [r7, #20]
 800fccc:	68db      	ldr	r3, [r3, #12]
 800fcce:	617b      	str	r3, [r7, #20]
 800fcd0:	697b      	ldr	r3, [r7, #20]
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d1d1      	bne.n	800fc7a <tcp_input+0x40a>
 800fcd6:	e000      	b.n	800fcda <tcp_input+0x46a>
            break;
 800fcd8:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800fcda:	697b      	ldr	r3, [r7, #20]
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d029      	beq.n	800fd34 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800fce0:	69bb      	ldr	r3, [r7, #24]
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d00a      	beq.n	800fcfc <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800fce6:	697b      	ldr	r3, [r7, #20]
 800fce8:	68da      	ldr	r2, [r3, #12]
 800fcea:	69bb      	ldr	r3, [r7, #24]
 800fcec:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800fcee:	4b10      	ldr	r3, [pc, #64]	@ (800fd30 <tcp_input+0x4c0>)
 800fcf0:	681a      	ldr	r2, [r3, #0]
 800fcf2:	697b      	ldr	r3, [r7, #20]
 800fcf4:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800fcf6:	4a0e      	ldr	r2, [pc, #56]	@ (800fd30 <tcp_input+0x4c0>)
 800fcf8:	697b      	ldr	r3, [r7, #20]
 800fcfa:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800fcfc:	6978      	ldr	r0, [r7, #20]
 800fcfe:	f000 fa03 	bl	8010108 <tcp_listen_input>
      }
      pbuf_free(p);
 800fd02:	6878      	ldr	r0, [r7, #4]
 800fd04:	f7fd fe20 	bl	800d948 <pbuf_free>
      return;
 800fd08:	e1a8      	b.n	801005c <tcp_input+0x7ec>
 800fd0a:	bf00      	nop
 800fd0c:	200151e0 	.word	0x200151e0
 800fd10:	20011e78 	.word	0x20011e78
 800fd14:	0802153c 	.word	0x0802153c
 800fd18:	08021668 	.word	0x08021668
 800fd1c:	08021588 	.word	0x08021588
 800fd20:	200151c4 	.word	0x200151c4
 800fd24:	08021694 	.word	0x08021694
 800fd28:	200151c8 	.word	0x200151c8
 800fd2c:	080216c0 	.word	0x080216c0
 800fd30:	200151c0 	.word	0x200151c0
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800fd34:	69fb      	ldr	r3, [r7, #28]
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	f000 8158 	beq.w	800ffec <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800fd3c:	4b95      	ldr	r3, [pc, #596]	@ (800ff94 <tcp_input+0x724>)
 800fd3e:	2200      	movs	r2, #0
 800fd40:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	891a      	ldrh	r2, [r3, #8]
 800fd46:	4b93      	ldr	r3, [pc, #588]	@ (800ff94 <tcp_input+0x724>)
 800fd48:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800fd4a:	4a92      	ldr	r2, [pc, #584]	@ (800ff94 <tcp_input+0x724>)
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800fd50:	4b91      	ldr	r3, [pc, #580]	@ (800ff98 <tcp_input+0x728>)
 800fd52:	681b      	ldr	r3, [r3, #0]
 800fd54:	4a8f      	ldr	r2, [pc, #572]	@ (800ff94 <tcp_input+0x724>)
 800fd56:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800fd58:	4b90      	ldr	r3, [pc, #576]	@ (800ff9c <tcp_input+0x72c>)
 800fd5a:	2200      	movs	r2, #0
 800fd5c:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800fd5e:	4b90      	ldr	r3, [pc, #576]	@ (800ffa0 <tcp_input+0x730>)
 800fd60:	2200      	movs	r2, #0
 800fd62:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800fd64:	4b8f      	ldr	r3, [pc, #572]	@ (800ffa4 <tcp_input+0x734>)
 800fd66:	2200      	movs	r2, #0
 800fd68:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800fd6a:	4b8f      	ldr	r3, [pc, #572]	@ (800ffa8 <tcp_input+0x738>)
 800fd6c:	781b      	ldrb	r3, [r3, #0]
 800fd6e:	f003 0308 	and.w	r3, r3, #8
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	d006      	beq.n	800fd84 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	7b5b      	ldrb	r3, [r3, #13]
 800fd7a:	f043 0301 	orr.w	r3, r3, #1
 800fd7e:	b2da      	uxtb	r2, r3
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800fd84:	69fb      	ldr	r3, [r7, #28]
 800fd86:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	d017      	beq.n	800fdbc <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800fd8c:	69f8      	ldr	r0, [r7, #28]
 800fd8e:	f7ff f929 	bl	800efe4 <tcp_process_refused_data>
 800fd92:	4603      	mov	r3, r0
 800fd94:	f113 0f0d 	cmn.w	r3, #13
 800fd98:	d007      	beq.n	800fdaa <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800fd9a:	69fb      	ldr	r3, [r7, #28]
 800fd9c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d00c      	beq.n	800fdbc <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800fda2:	4b82      	ldr	r3, [pc, #520]	@ (800ffac <tcp_input+0x73c>)
 800fda4:	881b      	ldrh	r3, [r3, #0]
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d008      	beq.n	800fdbc <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800fdaa:	69fb      	ldr	r3, [r7, #28]
 800fdac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	f040 80e3 	bne.w	800ff7a <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800fdb4:	69f8      	ldr	r0, [r7, #28]
 800fdb6:	f003 f9a7 	bl	8013108 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800fdba:	e0de      	b.n	800ff7a <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800fdbc:	4a7c      	ldr	r2, [pc, #496]	@ (800ffb0 <tcp_input+0x740>)
 800fdbe:	69fb      	ldr	r3, [r7, #28]
 800fdc0:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800fdc2:	69f8      	ldr	r0, [r7, #28]
 800fdc4:	f000 fb18 	bl	80103f8 <tcp_process>
 800fdc8:	4603      	mov	r3, r0
 800fdca:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800fdcc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fdd0:	f113 0f0d 	cmn.w	r3, #13
 800fdd4:	f000 80d3 	beq.w	800ff7e <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800fdd8:	4b71      	ldr	r3, [pc, #452]	@ (800ffa0 <tcp_input+0x730>)
 800fdda:	781b      	ldrb	r3, [r3, #0]
 800fddc:	f003 0308 	and.w	r3, r3, #8
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	d015      	beq.n	800fe10 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800fde4:	69fb      	ldr	r3, [r7, #28]
 800fde6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d008      	beq.n	800fe00 <tcp_input+0x590>
 800fdee:	69fb      	ldr	r3, [r7, #28]
 800fdf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fdf4:	69fa      	ldr	r2, [r7, #28]
 800fdf6:	6912      	ldr	r2, [r2, #16]
 800fdf8:	f06f 010d 	mvn.w	r1, #13
 800fdfc:	4610      	mov	r0, r2
 800fdfe:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800fe00:	69f9      	ldr	r1, [r7, #28]
 800fe02:	486c      	ldr	r0, [pc, #432]	@ (800ffb4 <tcp_input+0x744>)
 800fe04:	f7ff fbbc 	bl	800f580 <tcp_pcb_remove>
        tcp_free(pcb);
 800fe08:	69f8      	ldr	r0, [r7, #28]
 800fe0a:	f7fe f9a7 	bl	800e15c <tcp_free>
 800fe0e:	e0da      	b.n	800ffc6 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800fe10:	2300      	movs	r3, #0
 800fe12:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800fe14:	4b63      	ldr	r3, [pc, #396]	@ (800ffa4 <tcp_input+0x734>)
 800fe16:	881b      	ldrh	r3, [r3, #0]
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	d01d      	beq.n	800fe58 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800fe1c:	4b61      	ldr	r3, [pc, #388]	@ (800ffa4 <tcp_input+0x734>)
 800fe1e:	881b      	ldrh	r3, [r3, #0]
 800fe20:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800fe22:	69fb      	ldr	r3, [r7, #28]
 800fe24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	d00a      	beq.n	800fe42 <tcp_input+0x5d2>
 800fe2c:	69fb      	ldr	r3, [r7, #28]
 800fe2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fe32:	69fa      	ldr	r2, [r7, #28]
 800fe34:	6910      	ldr	r0, [r2, #16]
 800fe36:	89fa      	ldrh	r2, [r7, #14]
 800fe38:	69f9      	ldr	r1, [r7, #28]
 800fe3a:	4798      	blx	r3
 800fe3c:	4603      	mov	r3, r0
 800fe3e:	74fb      	strb	r3, [r7, #19]
 800fe40:	e001      	b.n	800fe46 <tcp_input+0x5d6>
 800fe42:	2300      	movs	r3, #0
 800fe44:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800fe46:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fe4a:	f113 0f0d 	cmn.w	r3, #13
 800fe4e:	f000 8098 	beq.w	800ff82 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800fe52:	4b54      	ldr	r3, [pc, #336]	@ (800ffa4 <tcp_input+0x734>)
 800fe54:	2200      	movs	r2, #0
 800fe56:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800fe58:	69f8      	ldr	r0, [r7, #28]
 800fe5a:	f000 f915 	bl	8010088 <tcp_input_delayed_close>
 800fe5e:	4603      	mov	r3, r0
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	f040 8090 	bne.w	800ff86 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800fe66:	4b4d      	ldr	r3, [pc, #308]	@ (800ff9c <tcp_input+0x72c>)
 800fe68:	681b      	ldr	r3, [r3, #0]
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	d041      	beq.n	800fef2 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800fe6e:	69fb      	ldr	r3, [r7, #28]
 800fe70:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	d006      	beq.n	800fe84 <tcp_input+0x614>
 800fe76:	4b50      	ldr	r3, [pc, #320]	@ (800ffb8 <tcp_input+0x748>)
 800fe78:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800fe7c:	494f      	ldr	r1, [pc, #316]	@ (800ffbc <tcp_input+0x74c>)
 800fe7e:	4850      	ldr	r0, [pc, #320]	@ (800ffc0 <tcp_input+0x750>)
 800fe80:	f007 fbac 	bl	80175dc <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800fe84:	69fb      	ldr	r3, [r7, #28]
 800fe86:	8b5b      	ldrh	r3, [r3, #26]
 800fe88:	f003 0310 	and.w	r3, r3, #16
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d008      	beq.n	800fea2 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800fe90:	4b42      	ldr	r3, [pc, #264]	@ (800ff9c <tcp_input+0x72c>)
 800fe92:	681b      	ldr	r3, [r3, #0]
 800fe94:	4618      	mov	r0, r3
 800fe96:	f7fd fd57 	bl	800d948 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800fe9a:	69f8      	ldr	r0, [r7, #28]
 800fe9c:	f7fe fc46 	bl	800e72c <tcp_abort>
            goto aborted;
 800fea0:	e091      	b.n	800ffc6 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800fea2:	69fb      	ldr	r3, [r7, #28]
 800fea4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	d00c      	beq.n	800fec6 <tcp_input+0x656>
 800feac:	69fb      	ldr	r3, [r7, #28]
 800feae:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800feb2:	69fb      	ldr	r3, [r7, #28]
 800feb4:	6918      	ldr	r0, [r3, #16]
 800feb6:	4b39      	ldr	r3, [pc, #228]	@ (800ff9c <tcp_input+0x72c>)
 800feb8:	681a      	ldr	r2, [r3, #0]
 800feba:	2300      	movs	r3, #0
 800febc:	69f9      	ldr	r1, [r7, #28]
 800febe:	47a0      	blx	r4
 800fec0:	4603      	mov	r3, r0
 800fec2:	74fb      	strb	r3, [r7, #19]
 800fec4:	e008      	b.n	800fed8 <tcp_input+0x668>
 800fec6:	4b35      	ldr	r3, [pc, #212]	@ (800ff9c <tcp_input+0x72c>)
 800fec8:	681a      	ldr	r2, [r3, #0]
 800feca:	2300      	movs	r3, #0
 800fecc:	69f9      	ldr	r1, [r7, #28]
 800fece:	2000      	movs	r0, #0
 800fed0:	f7ff f95e 	bl	800f190 <tcp_recv_null>
 800fed4:	4603      	mov	r3, r0
 800fed6:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800fed8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fedc:	f113 0f0d 	cmn.w	r3, #13
 800fee0:	d053      	beq.n	800ff8a <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800fee2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	d003      	beq.n	800fef2 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800feea:	4b2c      	ldr	r3, [pc, #176]	@ (800ff9c <tcp_input+0x72c>)
 800feec:	681a      	ldr	r2, [r3, #0]
 800feee:	69fb      	ldr	r3, [r7, #28]
 800fef0:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800fef2:	4b2b      	ldr	r3, [pc, #172]	@ (800ffa0 <tcp_input+0x730>)
 800fef4:	781b      	ldrb	r3, [r3, #0]
 800fef6:	f003 0320 	and.w	r3, r3, #32
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	d030      	beq.n	800ff60 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800fefe:	69fb      	ldr	r3, [r7, #28]
 800ff00:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	d009      	beq.n	800ff1a <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800ff06:	69fb      	ldr	r3, [r7, #28]
 800ff08:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ff0a:	7b5a      	ldrb	r2, [r3, #13]
 800ff0c:	69fb      	ldr	r3, [r7, #28]
 800ff0e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ff10:	f042 0220 	orr.w	r2, r2, #32
 800ff14:	b2d2      	uxtb	r2, r2
 800ff16:	735a      	strb	r2, [r3, #13]
 800ff18:	e022      	b.n	800ff60 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800ff1a:	69fb      	ldr	r3, [r7, #28]
 800ff1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ff1e:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800ff22:	d005      	beq.n	800ff30 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800ff24:	69fb      	ldr	r3, [r7, #28]
 800ff26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ff28:	3301      	adds	r3, #1
 800ff2a:	b29a      	uxth	r2, r3
 800ff2c:	69fb      	ldr	r3, [r7, #28]
 800ff2e:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800ff30:	69fb      	ldr	r3, [r7, #28]
 800ff32:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	d00b      	beq.n	800ff52 <tcp_input+0x6e2>
 800ff3a:	69fb      	ldr	r3, [r7, #28]
 800ff3c:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800ff40:	69fb      	ldr	r3, [r7, #28]
 800ff42:	6918      	ldr	r0, [r3, #16]
 800ff44:	2300      	movs	r3, #0
 800ff46:	2200      	movs	r2, #0
 800ff48:	69f9      	ldr	r1, [r7, #28]
 800ff4a:	47a0      	blx	r4
 800ff4c:	4603      	mov	r3, r0
 800ff4e:	74fb      	strb	r3, [r7, #19]
 800ff50:	e001      	b.n	800ff56 <tcp_input+0x6e6>
 800ff52:	2300      	movs	r3, #0
 800ff54:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800ff56:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ff5a:	f113 0f0d 	cmn.w	r3, #13
 800ff5e:	d016      	beq.n	800ff8e <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800ff60:	4b13      	ldr	r3, [pc, #76]	@ (800ffb0 <tcp_input+0x740>)
 800ff62:	2200      	movs	r2, #0
 800ff64:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800ff66:	69f8      	ldr	r0, [r7, #28]
 800ff68:	f000 f88e 	bl	8010088 <tcp_input_delayed_close>
 800ff6c:	4603      	mov	r3, r0
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	d128      	bne.n	800ffc4 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800ff72:	69f8      	ldr	r0, [r7, #28]
 800ff74:	f002 fac2 	bl	80124fc <tcp_output>
 800ff78:	e025      	b.n	800ffc6 <tcp_input+0x756>
        goto aborted;
 800ff7a:	bf00      	nop
 800ff7c:	e023      	b.n	800ffc6 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800ff7e:	bf00      	nop
 800ff80:	e021      	b.n	800ffc6 <tcp_input+0x756>
              goto aborted;
 800ff82:	bf00      	nop
 800ff84:	e01f      	b.n	800ffc6 <tcp_input+0x756>
          goto aborted;
 800ff86:	bf00      	nop
 800ff88:	e01d      	b.n	800ffc6 <tcp_input+0x756>
            goto aborted;
 800ff8a:	bf00      	nop
 800ff8c:	e01b      	b.n	800ffc6 <tcp_input+0x756>
              goto aborted;
 800ff8e:	bf00      	nop
 800ff90:	e019      	b.n	800ffc6 <tcp_input+0x756>
 800ff92:	bf00      	nop
 800ff94:	200151d0 	.word	0x200151d0
 800ff98:	200151e0 	.word	0x200151e0
 800ff9c:	20015200 	.word	0x20015200
 800ffa0:	200151fd 	.word	0x200151fd
 800ffa4:	200151f8 	.word	0x200151f8
 800ffa8:	200151fc 	.word	0x200151fc
 800ffac:	200151fa 	.word	0x200151fa
 800ffb0:	20015204 	.word	0x20015204
 800ffb4:	200151c4 	.word	0x200151c4
 800ffb8:	0802153c 	.word	0x0802153c
 800ffbc:	080216f0 	.word	0x080216f0
 800ffc0:	08021588 	.word	0x08021588
          goto aborted;
 800ffc4:	bf00      	nop
    tcp_input_pcb = NULL;
 800ffc6:	4b27      	ldr	r3, [pc, #156]	@ (8010064 <tcp_input+0x7f4>)
 800ffc8:	2200      	movs	r2, #0
 800ffca:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800ffcc:	4b26      	ldr	r3, [pc, #152]	@ (8010068 <tcp_input+0x7f8>)
 800ffce:	2200      	movs	r2, #0
 800ffd0:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800ffd2:	4b26      	ldr	r3, [pc, #152]	@ (801006c <tcp_input+0x7fc>)
 800ffd4:	685b      	ldr	r3, [r3, #4]
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d03f      	beq.n	801005a <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800ffda:	4b24      	ldr	r3, [pc, #144]	@ (801006c <tcp_input+0x7fc>)
 800ffdc:	685b      	ldr	r3, [r3, #4]
 800ffde:	4618      	mov	r0, r3
 800ffe0:	f7fd fcb2 	bl	800d948 <pbuf_free>
      inseg.p = NULL;
 800ffe4:	4b21      	ldr	r3, [pc, #132]	@ (801006c <tcp_input+0x7fc>)
 800ffe6:	2200      	movs	r2, #0
 800ffe8:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800ffea:	e036      	b.n	801005a <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800ffec:	4b20      	ldr	r3, [pc, #128]	@ (8010070 <tcp_input+0x800>)
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	899b      	ldrh	r3, [r3, #12]
 800fff2:	b29b      	uxth	r3, r3
 800fff4:	4618      	mov	r0, r3
 800fff6:	f7fb fe7f 	bl	800bcf8 <lwip_htons>
 800fffa:	4603      	mov	r3, r0
 800fffc:	b2db      	uxtb	r3, r3
 800fffe:	f003 0304 	and.w	r3, r3, #4
 8010002:	2b00      	cmp	r3, #0
 8010004:	d118      	bne.n	8010038 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010006:	4b1b      	ldr	r3, [pc, #108]	@ (8010074 <tcp_input+0x804>)
 8010008:	6819      	ldr	r1, [r3, #0]
 801000a:	4b1b      	ldr	r3, [pc, #108]	@ (8010078 <tcp_input+0x808>)
 801000c:	881b      	ldrh	r3, [r3, #0]
 801000e:	461a      	mov	r2, r3
 8010010:	4b1a      	ldr	r3, [pc, #104]	@ (801007c <tcp_input+0x80c>)
 8010012:	681b      	ldr	r3, [r3, #0]
 8010014:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010016:	4b16      	ldr	r3, [pc, #88]	@ (8010070 <tcp_input+0x800>)
 8010018:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801001a:	885b      	ldrh	r3, [r3, #2]
 801001c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801001e:	4a14      	ldr	r2, [pc, #80]	@ (8010070 <tcp_input+0x800>)
 8010020:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010022:	8812      	ldrh	r2, [r2, #0]
 8010024:	b292      	uxth	r2, r2
 8010026:	9202      	str	r2, [sp, #8]
 8010028:	9301      	str	r3, [sp, #4]
 801002a:	4b15      	ldr	r3, [pc, #84]	@ (8010080 <tcp_input+0x810>)
 801002c:	9300      	str	r3, [sp, #0]
 801002e:	4b15      	ldr	r3, [pc, #84]	@ (8010084 <tcp_input+0x814>)
 8010030:	4602      	mov	r2, r0
 8010032:	2000      	movs	r0, #0
 8010034:	f003 f816 	bl	8013064 <tcp_rst>
    pbuf_free(p);
 8010038:	6878      	ldr	r0, [r7, #4]
 801003a:	f7fd fc85 	bl	800d948 <pbuf_free>
  return;
 801003e:	e00c      	b.n	801005a <tcp_input+0x7ea>
    goto dropped;
 8010040:	bf00      	nop
 8010042:	e006      	b.n	8010052 <tcp_input+0x7e2>
    goto dropped;
 8010044:	bf00      	nop
 8010046:	e004      	b.n	8010052 <tcp_input+0x7e2>
    goto dropped;
 8010048:	bf00      	nop
 801004a:	e002      	b.n	8010052 <tcp_input+0x7e2>
      goto dropped;
 801004c:	bf00      	nop
 801004e:	e000      	b.n	8010052 <tcp_input+0x7e2>
      goto dropped;
 8010050:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8010052:	6878      	ldr	r0, [r7, #4]
 8010054:	f7fd fc78 	bl	800d948 <pbuf_free>
 8010058:	e000      	b.n	801005c <tcp_input+0x7ec>
  return;
 801005a:	bf00      	nop
}
 801005c:	3724      	adds	r7, #36	@ 0x24
 801005e:	46bd      	mov	sp, r7
 8010060:	bd90      	pop	{r4, r7, pc}
 8010062:	bf00      	nop
 8010064:	20015204 	.word	0x20015204
 8010068:	20015200 	.word	0x20015200
 801006c:	200151d0 	.word	0x200151d0
 8010070:	200151e0 	.word	0x200151e0
 8010074:	200151f4 	.word	0x200151f4
 8010078:	200151fa 	.word	0x200151fa
 801007c:	200151f0 	.word	0x200151f0
 8010080:	20011e88 	.word	0x20011e88
 8010084:	20011e8c 	.word	0x20011e8c

08010088 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8010088:	b580      	push	{r7, lr}
 801008a:	b082      	sub	sp, #8
 801008c:	af00      	add	r7, sp, #0
 801008e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	2b00      	cmp	r3, #0
 8010094:	d106      	bne.n	80100a4 <tcp_input_delayed_close+0x1c>
 8010096:	4b17      	ldr	r3, [pc, #92]	@ (80100f4 <tcp_input_delayed_close+0x6c>)
 8010098:	f240 225a 	movw	r2, #602	@ 0x25a
 801009c:	4916      	ldr	r1, [pc, #88]	@ (80100f8 <tcp_input_delayed_close+0x70>)
 801009e:	4817      	ldr	r0, [pc, #92]	@ (80100fc <tcp_input_delayed_close+0x74>)
 80100a0:	f007 fa9c 	bl	80175dc <iprintf>

  if (recv_flags & TF_CLOSED) {
 80100a4:	4b16      	ldr	r3, [pc, #88]	@ (8010100 <tcp_input_delayed_close+0x78>)
 80100a6:	781b      	ldrb	r3, [r3, #0]
 80100a8:	f003 0310 	and.w	r3, r3, #16
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	d01c      	beq.n	80100ea <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	8b5b      	ldrh	r3, [r3, #26]
 80100b4:	f003 0310 	and.w	r3, r3, #16
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d10d      	bne.n	80100d8 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d008      	beq.n	80100d8 <tcp_input_delayed_close+0x50>
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80100cc:	687a      	ldr	r2, [r7, #4]
 80100ce:	6912      	ldr	r2, [r2, #16]
 80100d0:	f06f 010e 	mvn.w	r1, #14
 80100d4:	4610      	mov	r0, r2
 80100d6:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80100d8:	6879      	ldr	r1, [r7, #4]
 80100da:	480a      	ldr	r0, [pc, #40]	@ (8010104 <tcp_input_delayed_close+0x7c>)
 80100dc:	f7ff fa50 	bl	800f580 <tcp_pcb_remove>
    tcp_free(pcb);
 80100e0:	6878      	ldr	r0, [r7, #4]
 80100e2:	f7fe f83b 	bl	800e15c <tcp_free>
    return 1;
 80100e6:	2301      	movs	r3, #1
 80100e8:	e000      	b.n	80100ec <tcp_input_delayed_close+0x64>
  }
  return 0;
 80100ea:	2300      	movs	r3, #0
}
 80100ec:	4618      	mov	r0, r3
 80100ee:	3708      	adds	r7, #8
 80100f0:	46bd      	mov	sp, r7
 80100f2:	bd80      	pop	{r7, pc}
 80100f4:	0802153c 	.word	0x0802153c
 80100f8:	0802170c 	.word	0x0802170c
 80100fc:	08021588 	.word	0x08021588
 8010100:	200151fd 	.word	0x200151fd
 8010104:	200151c4 	.word	0x200151c4

08010108 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8010108:	b590      	push	{r4, r7, lr}
 801010a:	b08b      	sub	sp, #44	@ 0x2c
 801010c:	af04      	add	r7, sp, #16
 801010e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8010110:	4b6f      	ldr	r3, [pc, #444]	@ (80102d0 <tcp_listen_input+0x1c8>)
 8010112:	781b      	ldrb	r3, [r3, #0]
 8010114:	f003 0304 	and.w	r3, r3, #4
 8010118:	2b00      	cmp	r3, #0
 801011a:	f040 80d2 	bne.w	80102c2 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	2b00      	cmp	r3, #0
 8010122:	d106      	bne.n	8010132 <tcp_listen_input+0x2a>
 8010124:	4b6b      	ldr	r3, [pc, #428]	@ (80102d4 <tcp_listen_input+0x1cc>)
 8010126:	f240 2281 	movw	r2, #641	@ 0x281
 801012a:	496b      	ldr	r1, [pc, #428]	@ (80102d8 <tcp_listen_input+0x1d0>)
 801012c:	486b      	ldr	r0, [pc, #428]	@ (80102dc <tcp_listen_input+0x1d4>)
 801012e:	f007 fa55 	bl	80175dc <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8010132:	4b67      	ldr	r3, [pc, #412]	@ (80102d0 <tcp_listen_input+0x1c8>)
 8010134:	781b      	ldrb	r3, [r3, #0]
 8010136:	f003 0310 	and.w	r3, r3, #16
 801013a:	2b00      	cmp	r3, #0
 801013c:	d019      	beq.n	8010172 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801013e:	4b68      	ldr	r3, [pc, #416]	@ (80102e0 <tcp_listen_input+0x1d8>)
 8010140:	6819      	ldr	r1, [r3, #0]
 8010142:	4b68      	ldr	r3, [pc, #416]	@ (80102e4 <tcp_listen_input+0x1dc>)
 8010144:	881b      	ldrh	r3, [r3, #0]
 8010146:	461a      	mov	r2, r3
 8010148:	4b67      	ldr	r3, [pc, #412]	@ (80102e8 <tcp_listen_input+0x1e0>)
 801014a:	681b      	ldr	r3, [r3, #0]
 801014c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801014e:	4b67      	ldr	r3, [pc, #412]	@ (80102ec <tcp_listen_input+0x1e4>)
 8010150:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010152:	885b      	ldrh	r3, [r3, #2]
 8010154:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010156:	4a65      	ldr	r2, [pc, #404]	@ (80102ec <tcp_listen_input+0x1e4>)
 8010158:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801015a:	8812      	ldrh	r2, [r2, #0]
 801015c:	b292      	uxth	r2, r2
 801015e:	9202      	str	r2, [sp, #8]
 8010160:	9301      	str	r3, [sp, #4]
 8010162:	4b63      	ldr	r3, [pc, #396]	@ (80102f0 <tcp_listen_input+0x1e8>)
 8010164:	9300      	str	r3, [sp, #0]
 8010166:	4b63      	ldr	r3, [pc, #396]	@ (80102f4 <tcp_listen_input+0x1ec>)
 8010168:	4602      	mov	r2, r0
 801016a:	6878      	ldr	r0, [r7, #4]
 801016c:	f002 ff7a 	bl	8013064 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8010170:	e0a9      	b.n	80102c6 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8010172:	4b57      	ldr	r3, [pc, #348]	@ (80102d0 <tcp_listen_input+0x1c8>)
 8010174:	781b      	ldrb	r3, [r3, #0]
 8010176:	f003 0302 	and.w	r3, r3, #2
 801017a:	2b00      	cmp	r3, #0
 801017c:	f000 80a3 	beq.w	80102c6 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	7d5b      	ldrb	r3, [r3, #21]
 8010184:	4618      	mov	r0, r3
 8010186:	f7ff f927 	bl	800f3d8 <tcp_alloc>
 801018a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 801018c:	697b      	ldr	r3, [r7, #20]
 801018e:	2b00      	cmp	r3, #0
 8010190:	d111      	bne.n	80101b6 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	699b      	ldr	r3, [r3, #24]
 8010196:	2b00      	cmp	r3, #0
 8010198:	d00a      	beq.n	80101b0 <tcp_listen_input+0xa8>
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	699b      	ldr	r3, [r3, #24]
 801019e:	687a      	ldr	r2, [r7, #4]
 80101a0:	6910      	ldr	r0, [r2, #16]
 80101a2:	f04f 32ff 	mov.w	r2, #4294967295
 80101a6:	2100      	movs	r1, #0
 80101a8:	4798      	blx	r3
 80101aa:	4603      	mov	r3, r0
 80101ac:	73bb      	strb	r3, [r7, #14]
      return;
 80101ae:	e08b      	b.n	80102c8 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80101b0:	23f0      	movs	r3, #240	@ 0xf0
 80101b2:	73bb      	strb	r3, [r7, #14]
      return;
 80101b4:	e088      	b.n	80102c8 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80101b6:	4b50      	ldr	r3, [pc, #320]	@ (80102f8 <tcp_listen_input+0x1f0>)
 80101b8:	695a      	ldr	r2, [r3, #20]
 80101ba:	697b      	ldr	r3, [r7, #20]
 80101bc:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80101be:	4b4e      	ldr	r3, [pc, #312]	@ (80102f8 <tcp_listen_input+0x1f0>)
 80101c0:	691a      	ldr	r2, [r3, #16]
 80101c2:	697b      	ldr	r3, [r7, #20]
 80101c4:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	8ada      	ldrh	r2, [r3, #22]
 80101ca:	697b      	ldr	r3, [r7, #20]
 80101cc:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80101ce:	4b47      	ldr	r3, [pc, #284]	@ (80102ec <tcp_listen_input+0x1e4>)
 80101d0:	681b      	ldr	r3, [r3, #0]
 80101d2:	881b      	ldrh	r3, [r3, #0]
 80101d4:	b29a      	uxth	r2, r3
 80101d6:	697b      	ldr	r3, [r7, #20]
 80101d8:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80101da:	697b      	ldr	r3, [r7, #20]
 80101dc:	2203      	movs	r2, #3
 80101de:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80101e0:	4b41      	ldr	r3, [pc, #260]	@ (80102e8 <tcp_listen_input+0x1e0>)
 80101e2:	681b      	ldr	r3, [r3, #0]
 80101e4:	1c5a      	adds	r2, r3, #1
 80101e6:	697b      	ldr	r3, [r7, #20]
 80101e8:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80101ea:	697b      	ldr	r3, [r7, #20]
 80101ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80101ee:	697b      	ldr	r3, [r7, #20]
 80101f0:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 80101f2:	6978      	ldr	r0, [r7, #20]
 80101f4:	f7ff fa58 	bl	800f6a8 <tcp_next_iss>
 80101f8:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80101fa:	697b      	ldr	r3, [r7, #20]
 80101fc:	693a      	ldr	r2, [r7, #16]
 80101fe:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 8010200:	697b      	ldr	r3, [r7, #20]
 8010202:	693a      	ldr	r2, [r7, #16]
 8010204:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 8010206:	697b      	ldr	r3, [r7, #20]
 8010208:	693a      	ldr	r2, [r7, #16]
 801020a:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 801020c:	697b      	ldr	r3, [r7, #20]
 801020e:	693a      	ldr	r2, [r7, #16]
 8010210:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8010212:	4b35      	ldr	r3, [pc, #212]	@ (80102e8 <tcp_listen_input+0x1e0>)
 8010214:	681b      	ldr	r3, [r3, #0]
 8010216:	1e5a      	subs	r2, r3, #1
 8010218:	697b      	ldr	r3, [r7, #20]
 801021a:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	691a      	ldr	r2, [r3, #16]
 8010220:	697b      	ldr	r3, [r7, #20]
 8010222:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8010224:	697b      	ldr	r3, [r7, #20]
 8010226:	687a      	ldr	r2, [r7, #4]
 8010228:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	7a5b      	ldrb	r3, [r3, #9]
 801022e:	f003 030c 	and.w	r3, r3, #12
 8010232:	b2da      	uxtb	r2, r3
 8010234:	697b      	ldr	r3, [r7, #20]
 8010236:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	7a1a      	ldrb	r2, [r3, #8]
 801023c:	697b      	ldr	r3, [r7, #20]
 801023e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8010240:	4b2e      	ldr	r3, [pc, #184]	@ (80102fc <tcp_listen_input+0x1f4>)
 8010242:	681a      	ldr	r2, [r3, #0]
 8010244:	697b      	ldr	r3, [r7, #20]
 8010246:	60da      	str	r2, [r3, #12]
 8010248:	4a2c      	ldr	r2, [pc, #176]	@ (80102fc <tcp_listen_input+0x1f4>)
 801024a:	697b      	ldr	r3, [r7, #20]
 801024c:	6013      	str	r3, [r2, #0]
 801024e:	f003 f8cb 	bl	80133e8 <tcp_timer_needed>
 8010252:	4b2b      	ldr	r3, [pc, #172]	@ (8010300 <tcp_listen_input+0x1f8>)
 8010254:	2201      	movs	r2, #1
 8010256:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8010258:	6978      	ldr	r0, [r7, #20]
 801025a:	f001 fd8b 	bl	8011d74 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801025e:	4b23      	ldr	r3, [pc, #140]	@ (80102ec <tcp_listen_input+0x1e4>)
 8010260:	681b      	ldr	r3, [r3, #0]
 8010262:	89db      	ldrh	r3, [r3, #14]
 8010264:	b29a      	uxth	r2, r3
 8010266:	697b      	ldr	r3, [r7, #20]
 8010268:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 801026c:	697b      	ldr	r3, [r7, #20]
 801026e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8010272:	697b      	ldr	r3, [r7, #20]
 8010274:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8010278:	697b      	ldr	r3, [r7, #20]
 801027a:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 801027c:	697b      	ldr	r3, [r7, #20]
 801027e:	3304      	adds	r3, #4
 8010280:	4618      	mov	r0, r3
 8010282:	f005 f821 	bl	80152c8 <ip4_route>
 8010286:	4601      	mov	r1, r0
 8010288:	697b      	ldr	r3, [r7, #20]
 801028a:	3304      	adds	r3, #4
 801028c:	461a      	mov	r2, r3
 801028e:	4620      	mov	r0, r4
 8010290:	f7ff fa30 	bl	800f6f4 <tcp_eff_send_mss_netif>
 8010294:	4603      	mov	r3, r0
 8010296:	461a      	mov	r2, r3
 8010298:	697b      	ldr	r3, [r7, #20]
 801029a:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 801029c:	2112      	movs	r1, #18
 801029e:	6978      	ldr	r0, [r7, #20]
 80102a0:	f002 f83e 	bl	8012320 <tcp_enqueue_flags>
 80102a4:	4603      	mov	r3, r0
 80102a6:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80102a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d004      	beq.n	80102ba <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80102b0:	2100      	movs	r1, #0
 80102b2:	6978      	ldr	r0, [r7, #20]
 80102b4:	f7fe f97c 	bl	800e5b0 <tcp_abandon>
      return;
 80102b8:	e006      	b.n	80102c8 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 80102ba:	6978      	ldr	r0, [r7, #20]
 80102bc:	f002 f91e 	bl	80124fc <tcp_output>
  return;
 80102c0:	e001      	b.n	80102c6 <tcp_listen_input+0x1be>
    return;
 80102c2:	bf00      	nop
 80102c4:	e000      	b.n	80102c8 <tcp_listen_input+0x1c0>
  return;
 80102c6:	bf00      	nop
}
 80102c8:	371c      	adds	r7, #28
 80102ca:	46bd      	mov	sp, r7
 80102cc:	bd90      	pop	{r4, r7, pc}
 80102ce:	bf00      	nop
 80102d0:	200151fc 	.word	0x200151fc
 80102d4:	0802153c 	.word	0x0802153c
 80102d8:	08021734 	.word	0x08021734
 80102dc:	08021588 	.word	0x08021588
 80102e0:	200151f4 	.word	0x200151f4
 80102e4:	200151fa 	.word	0x200151fa
 80102e8:	200151f0 	.word	0x200151f0
 80102ec:	200151e0 	.word	0x200151e0
 80102f0:	20011e88 	.word	0x20011e88
 80102f4:	20011e8c 	.word	0x20011e8c
 80102f8:	20011e78 	.word	0x20011e78
 80102fc:	200151c4 	.word	0x200151c4
 8010300:	200151cc 	.word	0x200151cc

08010304 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8010304:	b580      	push	{r7, lr}
 8010306:	b086      	sub	sp, #24
 8010308:	af04      	add	r7, sp, #16
 801030a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 801030c:	4b2f      	ldr	r3, [pc, #188]	@ (80103cc <tcp_timewait_input+0xc8>)
 801030e:	781b      	ldrb	r3, [r3, #0]
 8010310:	f003 0304 	and.w	r3, r3, #4
 8010314:	2b00      	cmp	r3, #0
 8010316:	d153      	bne.n	80103c0 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	2b00      	cmp	r3, #0
 801031c:	d106      	bne.n	801032c <tcp_timewait_input+0x28>
 801031e:	4b2c      	ldr	r3, [pc, #176]	@ (80103d0 <tcp_timewait_input+0xcc>)
 8010320:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8010324:	492b      	ldr	r1, [pc, #172]	@ (80103d4 <tcp_timewait_input+0xd0>)
 8010326:	482c      	ldr	r0, [pc, #176]	@ (80103d8 <tcp_timewait_input+0xd4>)
 8010328:	f007 f958 	bl	80175dc <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 801032c:	4b27      	ldr	r3, [pc, #156]	@ (80103cc <tcp_timewait_input+0xc8>)
 801032e:	781b      	ldrb	r3, [r3, #0]
 8010330:	f003 0302 	and.w	r3, r3, #2
 8010334:	2b00      	cmp	r3, #0
 8010336:	d02a      	beq.n	801038e <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8010338:	4b28      	ldr	r3, [pc, #160]	@ (80103dc <tcp_timewait_input+0xd8>)
 801033a:	681a      	ldr	r2, [r3, #0]
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010340:	1ad3      	subs	r3, r2, r3
 8010342:	2b00      	cmp	r3, #0
 8010344:	db2d      	blt.n	80103a2 <tcp_timewait_input+0x9e>
 8010346:	4b25      	ldr	r3, [pc, #148]	@ (80103dc <tcp_timewait_input+0xd8>)
 8010348:	681a      	ldr	r2, [r3, #0]
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801034e:	6879      	ldr	r1, [r7, #4]
 8010350:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8010352:	440b      	add	r3, r1
 8010354:	1ad3      	subs	r3, r2, r3
 8010356:	2b00      	cmp	r3, #0
 8010358:	dc23      	bgt.n	80103a2 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801035a:	4b21      	ldr	r3, [pc, #132]	@ (80103e0 <tcp_timewait_input+0xdc>)
 801035c:	6819      	ldr	r1, [r3, #0]
 801035e:	4b21      	ldr	r3, [pc, #132]	@ (80103e4 <tcp_timewait_input+0xe0>)
 8010360:	881b      	ldrh	r3, [r3, #0]
 8010362:	461a      	mov	r2, r3
 8010364:	4b1d      	ldr	r3, [pc, #116]	@ (80103dc <tcp_timewait_input+0xd8>)
 8010366:	681b      	ldr	r3, [r3, #0]
 8010368:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801036a:	4b1f      	ldr	r3, [pc, #124]	@ (80103e8 <tcp_timewait_input+0xe4>)
 801036c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801036e:	885b      	ldrh	r3, [r3, #2]
 8010370:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010372:	4a1d      	ldr	r2, [pc, #116]	@ (80103e8 <tcp_timewait_input+0xe4>)
 8010374:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010376:	8812      	ldrh	r2, [r2, #0]
 8010378:	b292      	uxth	r2, r2
 801037a:	9202      	str	r2, [sp, #8]
 801037c:	9301      	str	r3, [sp, #4]
 801037e:	4b1b      	ldr	r3, [pc, #108]	@ (80103ec <tcp_timewait_input+0xe8>)
 8010380:	9300      	str	r3, [sp, #0]
 8010382:	4b1b      	ldr	r3, [pc, #108]	@ (80103f0 <tcp_timewait_input+0xec>)
 8010384:	4602      	mov	r2, r0
 8010386:	6878      	ldr	r0, [r7, #4]
 8010388:	f002 fe6c 	bl	8013064 <tcp_rst>
      return;
 801038c:	e01b      	b.n	80103c6 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 801038e:	4b0f      	ldr	r3, [pc, #60]	@ (80103cc <tcp_timewait_input+0xc8>)
 8010390:	781b      	ldrb	r3, [r3, #0]
 8010392:	f003 0301 	and.w	r3, r3, #1
 8010396:	2b00      	cmp	r3, #0
 8010398:	d003      	beq.n	80103a2 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 801039a:	4b16      	ldr	r3, [pc, #88]	@ (80103f4 <tcp_timewait_input+0xf0>)
 801039c:	681a      	ldr	r2, [r3, #0]
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80103a2:	4b10      	ldr	r3, [pc, #64]	@ (80103e4 <tcp_timewait_input+0xe0>)
 80103a4:	881b      	ldrh	r3, [r3, #0]
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d00c      	beq.n	80103c4 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	8b5b      	ldrh	r3, [r3, #26]
 80103ae:	f043 0302 	orr.w	r3, r3, #2
 80103b2:	b29a      	uxth	r2, r3
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80103b8:	6878      	ldr	r0, [r7, #4]
 80103ba:	f002 f89f 	bl	80124fc <tcp_output>
  }
  return;
 80103be:	e001      	b.n	80103c4 <tcp_timewait_input+0xc0>
    return;
 80103c0:	bf00      	nop
 80103c2:	e000      	b.n	80103c6 <tcp_timewait_input+0xc2>
  return;
 80103c4:	bf00      	nop
}
 80103c6:	3708      	adds	r7, #8
 80103c8:	46bd      	mov	sp, r7
 80103ca:	bd80      	pop	{r7, pc}
 80103cc:	200151fc 	.word	0x200151fc
 80103d0:	0802153c 	.word	0x0802153c
 80103d4:	08021754 	.word	0x08021754
 80103d8:	08021588 	.word	0x08021588
 80103dc:	200151f0 	.word	0x200151f0
 80103e0:	200151f4 	.word	0x200151f4
 80103e4:	200151fa 	.word	0x200151fa
 80103e8:	200151e0 	.word	0x200151e0
 80103ec:	20011e88 	.word	0x20011e88
 80103f0:	20011e8c 	.word	0x20011e8c
 80103f4:	200151b8 	.word	0x200151b8

080103f8 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80103f8:	b590      	push	{r4, r7, lr}
 80103fa:	b08d      	sub	sp, #52	@ 0x34
 80103fc:	af04      	add	r7, sp, #16
 80103fe:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8010400:	2300      	movs	r3, #0
 8010402:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8010404:	2300      	movs	r3, #0
 8010406:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	2b00      	cmp	r3, #0
 801040c:	d106      	bne.n	801041c <tcp_process+0x24>
 801040e:	4b9d      	ldr	r3, [pc, #628]	@ (8010684 <tcp_process+0x28c>)
 8010410:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8010414:	499c      	ldr	r1, [pc, #624]	@ (8010688 <tcp_process+0x290>)
 8010416:	489d      	ldr	r0, [pc, #628]	@ (801068c <tcp_process+0x294>)
 8010418:	f007 f8e0 	bl	80175dc <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 801041c:	4b9c      	ldr	r3, [pc, #624]	@ (8010690 <tcp_process+0x298>)
 801041e:	781b      	ldrb	r3, [r3, #0]
 8010420:	f003 0304 	and.w	r3, r3, #4
 8010424:	2b00      	cmp	r3, #0
 8010426:	d04e      	beq.n	80104c6 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	7d1b      	ldrb	r3, [r3, #20]
 801042c:	2b02      	cmp	r3, #2
 801042e:	d108      	bne.n	8010442 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010434:	4b97      	ldr	r3, [pc, #604]	@ (8010694 <tcp_process+0x29c>)
 8010436:	681b      	ldr	r3, [r3, #0]
 8010438:	429a      	cmp	r2, r3
 801043a:	d123      	bne.n	8010484 <tcp_process+0x8c>
        acceptable = 1;
 801043c:	2301      	movs	r3, #1
 801043e:	76fb      	strb	r3, [r7, #27]
 8010440:	e020      	b.n	8010484 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010446:	4b94      	ldr	r3, [pc, #592]	@ (8010698 <tcp_process+0x2a0>)
 8010448:	681b      	ldr	r3, [r3, #0]
 801044a:	429a      	cmp	r2, r3
 801044c:	d102      	bne.n	8010454 <tcp_process+0x5c>
        acceptable = 1;
 801044e:	2301      	movs	r3, #1
 8010450:	76fb      	strb	r3, [r7, #27]
 8010452:	e017      	b.n	8010484 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010454:	4b90      	ldr	r3, [pc, #576]	@ (8010698 <tcp_process+0x2a0>)
 8010456:	681a      	ldr	r2, [r3, #0]
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801045c:	1ad3      	subs	r3, r2, r3
 801045e:	2b00      	cmp	r3, #0
 8010460:	db10      	blt.n	8010484 <tcp_process+0x8c>
 8010462:	4b8d      	ldr	r3, [pc, #564]	@ (8010698 <tcp_process+0x2a0>)
 8010464:	681a      	ldr	r2, [r3, #0]
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801046a:	6879      	ldr	r1, [r7, #4]
 801046c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801046e:	440b      	add	r3, r1
 8010470:	1ad3      	subs	r3, r2, r3
 8010472:	2b00      	cmp	r3, #0
 8010474:	dc06      	bgt.n	8010484 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	8b5b      	ldrh	r3, [r3, #26]
 801047a:	f043 0302 	orr.w	r3, r3, #2
 801047e:	b29a      	uxth	r2, r3
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8010484:	7efb      	ldrb	r3, [r7, #27]
 8010486:	2b00      	cmp	r3, #0
 8010488:	d01b      	beq.n	80104c2 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	7d1b      	ldrb	r3, [r3, #20]
 801048e:	2b00      	cmp	r3, #0
 8010490:	d106      	bne.n	80104a0 <tcp_process+0xa8>
 8010492:	4b7c      	ldr	r3, [pc, #496]	@ (8010684 <tcp_process+0x28c>)
 8010494:	f44f 724e 	mov.w	r2, #824	@ 0x338
 8010498:	4980      	ldr	r1, [pc, #512]	@ (801069c <tcp_process+0x2a4>)
 801049a:	487c      	ldr	r0, [pc, #496]	@ (801068c <tcp_process+0x294>)
 801049c:	f007 f89e 	bl	80175dc <iprintf>
      recv_flags |= TF_RESET;
 80104a0:	4b7f      	ldr	r3, [pc, #508]	@ (80106a0 <tcp_process+0x2a8>)
 80104a2:	781b      	ldrb	r3, [r3, #0]
 80104a4:	f043 0308 	orr.w	r3, r3, #8
 80104a8:	b2da      	uxtb	r2, r3
 80104aa:	4b7d      	ldr	r3, [pc, #500]	@ (80106a0 <tcp_process+0x2a8>)
 80104ac:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	8b5b      	ldrh	r3, [r3, #26]
 80104b2:	f023 0301 	bic.w	r3, r3, #1
 80104b6:	b29a      	uxth	r2, r3
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80104bc:	f06f 030d 	mvn.w	r3, #13
 80104c0:	e37a      	b.n	8010bb8 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80104c2:	2300      	movs	r3, #0
 80104c4:	e378      	b.n	8010bb8 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80104c6:	4b72      	ldr	r3, [pc, #456]	@ (8010690 <tcp_process+0x298>)
 80104c8:	781b      	ldrb	r3, [r3, #0]
 80104ca:	f003 0302 	and.w	r3, r3, #2
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	d010      	beq.n	80104f4 <tcp_process+0xfc>
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	7d1b      	ldrb	r3, [r3, #20]
 80104d6:	2b02      	cmp	r3, #2
 80104d8:	d00c      	beq.n	80104f4 <tcp_process+0xfc>
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	7d1b      	ldrb	r3, [r3, #20]
 80104de:	2b03      	cmp	r3, #3
 80104e0:	d008      	beq.n	80104f4 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	8b5b      	ldrh	r3, [r3, #26]
 80104e6:	f043 0302 	orr.w	r3, r3, #2
 80104ea:	b29a      	uxth	r2, r3
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80104f0:	2300      	movs	r3, #0
 80104f2:	e361      	b.n	8010bb8 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	8b5b      	ldrh	r3, [r3, #26]
 80104f8:	f003 0310 	and.w	r3, r3, #16
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d103      	bne.n	8010508 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8010500:	4b68      	ldr	r3, [pc, #416]	@ (80106a4 <tcp_process+0x2ac>)
 8010502:	681a      	ldr	r2, [r3, #0]
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	2200      	movs	r2, #0
 801050c:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	2200      	movs	r2, #0
 8010514:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 8010518:	6878      	ldr	r0, [r7, #4]
 801051a:	f001 fc2b 	bl	8011d74 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	7d1b      	ldrb	r3, [r3, #20]
 8010522:	3b02      	subs	r3, #2
 8010524:	2b07      	cmp	r3, #7
 8010526:	f200 8337 	bhi.w	8010b98 <tcp_process+0x7a0>
 801052a:	a201      	add	r2, pc, #4	@ (adr r2, 8010530 <tcp_process+0x138>)
 801052c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010530:	08010551 	.word	0x08010551
 8010534:	08010781 	.word	0x08010781
 8010538:	080108f9 	.word	0x080108f9
 801053c:	08010923 	.word	0x08010923
 8010540:	08010a47 	.word	0x08010a47
 8010544:	080108f9 	.word	0x080108f9
 8010548:	08010ad3 	.word	0x08010ad3
 801054c:	08010b63 	.word	0x08010b63
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8010550:	4b4f      	ldr	r3, [pc, #316]	@ (8010690 <tcp_process+0x298>)
 8010552:	781b      	ldrb	r3, [r3, #0]
 8010554:	f003 0310 	and.w	r3, r3, #16
 8010558:	2b00      	cmp	r3, #0
 801055a:	f000 80e4 	beq.w	8010726 <tcp_process+0x32e>
 801055e:	4b4c      	ldr	r3, [pc, #304]	@ (8010690 <tcp_process+0x298>)
 8010560:	781b      	ldrb	r3, [r3, #0]
 8010562:	f003 0302 	and.w	r3, r3, #2
 8010566:	2b00      	cmp	r3, #0
 8010568:	f000 80dd 	beq.w	8010726 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010570:	1c5a      	adds	r2, r3, #1
 8010572:	4b48      	ldr	r3, [pc, #288]	@ (8010694 <tcp_process+0x29c>)
 8010574:	681b      	ldr	r3, [r3, #0]
 8010576:	429a      	cmp	r2, r3
 8010578:	f040 80d5 	bne.w	8010726 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 801057c:	4b46      	ldr	r3, [pc, #280]	@ (8010698 <tcp_process+0x2a0>)
 801057e:	681b      	ldr	r3, [r3, #0]
 8010580:	1c5a      	adds	r2, r3, #1
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 801058e:	4b41      	ldr	r3, [pc, #260]	@ (8010694 <tcp_process+0x29c>)
 8010590:	681a      	ldr	r2, [r3, #0]
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8010596:	4b44      	ldr	r3, [pc, #272]	@ (80106a8 <tcp_process+0x2b0>)
 8010598:	681b      	ldr	r3, [r3, #0]
 801059a:	89db      	ldrh	r3, [r3, #14]
 801059c:	b29a      	uxth	r2, r3
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80105b0:	4b39      	ldr	r3, [pc, #228]	@ (8010698 <tcp_process+0x2a0>)
 80105b2:	681b      	ldr	r3, [r3, #0]
 80105b4:	1e5a      	subs	r2, r3, #1
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	2204      	movs	r2, #4
 80105be:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	3304      	adds	r3, #4
 80105c8:	4618      	mov	r0, r3
 80105ca:	f004 fe7d 	bl	80152c8 <ip4_route>
 80105ce:	4601      	mov	r1, r0
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	3304      	adds	r3, #4
 80105d4:	461a      	mov	r2, r3
 80105d6:	4620      	mov	r0, r4
 80105d8:	f7ff f88c 	bl	800f6f4 <tcp_eff_send_mss_netif>
 80105dc:	4603      	mov	r3, r0
 80105de:	461a      	mov	r2, r3
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80105e8:	009a      	lsls	r2, r3, #2
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80105ee:	005b      	lsls	r3, r3, #1
 80105f0:	f241 111c 	movw	r1, #4380	@ 0x111c
 80105f4:	428b      	cmp	r3, r1
 80105f6:	bf38      	it	cc
 80105f8:	460b      	movcc	r3, r1
 80105fa:	429a      	cmp	r2, r3
 80105fc:	d204      	bcs.n	8010608 <tcp_process+0x210>
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010602:	009b      	lsls	r3, r3, #2
 8010604:	b29b      	uxth	r3, r3
 8010606:	e00d      	b.n	8010624 <tcp_process+0x22c>
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801060c:	005b      	lsls	r3, r3, #1
 801060e:	f241 121c 	movw	r2, #4380	@ 0x111c
 8010612:	4293      	cmp	r3, r2
 8010614:	d904      	bls.n	8010620 <tcp_process+0x228>
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801061a:	005b      	lsls	r3, r3, #1
 801061c:	b29b      	uxth	r3, r3
 801061e:	e001      	b.n	8010624 <tcp_process+0x22c>
 8010620:	f241 131c 	movw	r3, #4380	@ 0x111c
 8010624:	687a      	ldr	r2, [r7, #4]
 8010626:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010630:	2b00      	cmp	r3, #0
 8010632:	d106      	bne.n	8010642 <tcp_process+0x24a>
 8010634:	4b13      	ldr	r3, [pc, #76]	@ (8010684 <tcp_process+0x28c>)
 8010636:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 801063a:	491c      	ldr	r1, [pc, #112]	@ (80106ac <tcp_process+0x2b4>)
 801063c:	4813      	ldr	r0, [pc, #76]	@ (801068c <tcp_process+0x294>)
 801063e:	f006 ffcd 	bl	80175dc <iprintf>
        --pcb->snd_queuelen;
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010648:	3b01      	subs	r3, #1
 801064a:	b29a      	uxth	r2, r3
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010656:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8010658:	69fb      	ldr	r3, [r7, #28]
 801065a:	2b00      	cmp	r3, #0
 801065c:	d12a      	bne.n	80106b4 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010662:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8010664:	69fb      	ldr	r3, [r7, #28]
 8010666:	2b00      	cmp	r3, #0
 8010668:	d106      	bne.n	8010678 <tcp_process+0x280>
 801066a:	4b06      	ldr	r3, [pc, #24]	@ (8010684 <tcp_process+0x28c>)
 801066c:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8010670:	490f      	ldr	r1, [pc, #60]	@ (80106b0 <tcp_process+0x2b8>)
 8010672:	4806      	ldr	r0, [pc, #24]	@ (801068c <tcp_process+0x294>)
 8010674:	f006 ffb2 	bl	80175dc <iprintf>
          pcb->unsent = rseg->next;
 8010678:	69fb      	ldr	r3, [r7, #28]
 801067a:	681a      	ldr	r2, [r3, #0]
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	66da      	str	r2, [r3, #108]	@ 0x6c
 8010680:	e01c      	b.n	80106bc <tcp_process+0x2c4>
 8010682:	bf00      	nop
 8010684:	0802153c 	.word	0x0802153c
 8010688:	08021774 	.word	0x08021774
 801068c:	08021588 	.word	0x08021588
 8010690:	200151fc 	.word	0x200151fc
 8010694:	200151f4 	.word	0x200151f4
 8010698:	200151f0 	.word	0x200151f0
 801069c:	08021790 	.word	0x08021790
 80106a0:	200151fd 	.word	0x200151fd
 80106a4:	200151b8 	.word	0x200151b8
 80106a8:	200151e0 	.word	0x200151e0
 80106ac:	080217b0 	.word	0x080217b0
 80106b0:	080217c8 	.word	0x080217c8
        } else {
          pcb->unacked = rseg->next;
 80106b4:	69fb      	ldr	r3, [r7, #28]
 80106b6:	681a      	ldr	r2, [r3, #0]
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 80106bc:	69f8      	ldr	r0, [r7, #28]
 80106be:	f7fe fd22 	bl	800f106 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	d104      	bne.n	80106d4 <tcp_process+0x2dc>
          pcb->rtime = -1;
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80106d0:	861a      	strh	r2, [r3, #48]	@ 0x30
 80106d2:	e006      	b.n	80106e2 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	2200      	movs	r2, #0
 80106d8:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	2200      	movs	r2, #0
 80106de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d00a      	beq.n	8010702 <tcp_process+0x30a>
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80106f2:	687a      	ldr	r2, [r7, #4]
 80106f4:	6910      	ldr	r0, [r2, #16]
 80106f6:	2200      	movs	r2, #0
 80106f8:	6879      	ldr	r1, [r7, #4]
 80106fa:	4798      	blx	r3
 80106fc:	4603      	mov	r3, r0
 80106fe:	76bb      	strb	r3, [r7, #26]
 8010700:	e001      	b.n	8010706 <tcp_process+0x30e>
 8010702:	2300      	movs	r3, #0
 8010704:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8010706:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801070a:	f113 0f0d 	cmn.w	r3, #13
 801070e:	d102      	bne.n	8010716 <tcp_process+0x31e>
          return ERR_ABRT;
 8010710:	f06f 030c 	mvn.w	r3, #12
 8010714:	e250      	b.n	8010bb8 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	8b5b      	ldrh	r3, [r3, #26]
 801071a:	f043 0302 	orr.w	r3, r3, #2
 801071e:	b29a      	uxth	r2, r3
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8010724:	e23a      	b.n	8010b9c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8010726:	4b98      	ldr	r3, [pc, #608]	@ (8010988 <tcp_process+0x590>)
 8010728:	781b      	ldrb	r3, [r3, #0]
 801072a:	f003 0310 	and.w	r3, r3, #16
 801072e:	2b00      	cmp	r3, #0
 8010730:	f000 8234 	beq.w	8010b9c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010734:	4b95      	ldr	r3, [pc, #596]	@ (801098c <tcp_process+0x594>)
 8010736:	6819      	ldr	r1, [r3, #0]
 8010738:	4b95      	ldr	r3, [pc, #596]	@ (8010990 <tcp_process+0x598>)
 801073a:	881b      	ldrh	r3, [r3, #0]
 801073c:	461a      	mov	r2, r3
 801073e:	4b95      	ldr	r3, [pc, #596]	@ (8010994 <tcp_process+0x59c>)
 8010740:	681b      	ldr	r3, [r3, #0]
 8010742:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010744:	4b94      	ldr	r3, [pc, #592]	@ (8010998 <tcp_process+0x5a0>)
 8010746:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010748:	885b      	ldrh	r3, [r3, #2]
 801074a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801074c:	4a92      	ldr	r2, [pc, #584]	@ (8010998 <tcp_process+0x5a0>)
 801074e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010750:	8812      	ldrh	r2, [r2, #0]
 8010752:	b292      	uxth	r2, r2
 8010754:	9202      	str	r2, [sp, #8]
 8010756:	9301      	str	r3, [sp, #4]
 8010758:	4b90      	ldr	r3, [pc, #576]	@ (801099c <tcp_process+0x5a4>)
 801075a:	9300      	str	r3, [sp, #0]
 801075c:	4b90      	ldr	r3, [pc, #576]	@ (80109a0 <tcp_process+0x5a8>)
 801075e:	4602      	mov	r2, r0
 8010760:	6878      	ldr	r0, [r7, #4]
 8010762:	f002 fc7f 	bl	8013064 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801076c:	2b05      	cmp	r3, #5
 801076e:	f200 8215 	bhi.w	8010b9c <tcp_process+0x7a4>
          pcb->rtime = 0;
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	2200      	movs	r2, #0
 8010776:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 8010778:	6878      	ldr	r0, [r7, #4]
 801077a:	f002 fa4b 	bl	8012c14 <tcp_rexmit_rto>
      break;
 801077e:	e20d      	b.n	8010b9c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8010780:	4b81      	ldr	r3, [pc, #516]	@ (8010988 <tcp_process+0x590>)
 8010782:	781b      	ldrb	r3, [r3, #0]
 8010784:	f003 0310 	and.w	r3, r3, #16
 8010788:	2b00      	cmp	r3, #0
 801078a:	f000 80a1 	beq.w	80108d0 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801078e:	4b7f      	ldr	r3, [pc, #508]	@ (801098c <tcp_process+0x594>)
 8010790:	681a      	ldr	r2, [r3, #0]
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010796:	1ad3      	subs	r3, r2, r3
 8010798:	3b01      	subs	r3, #1
 801079a:	2b00      	cmp	r3, #0
 801079c:	db7e      	blt.n	801089c <tcp_process+0x4a4>
 801079e:	4b7b      	ldr	r3, [pc, #492]	@ (801098c <tcp_process+0x594>)
 80107a0:	681a      	ldr	r2, [r3, #0]
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80107a6:	1ad3      	subs	r3, r2, r3
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	dc77      	bgt.n	801089c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	2204      	movs	r2, #4
 80107b0:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d102      	bne.n	80107c0 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80107ba:	23fa      	movs	r3, #250	@ 0xfa
 80107bc:	76bb      	strb	r3, [r7, #26]
 80107be:	e01d      	b.n	80107fc <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80107c4:	699b      	ldr	r3, [r3, #24]
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d106      	bne.n	80107d8 <tcp_process+0x3e0>
 80107ca:	4b76      	ldr	r3, [pc, #472]	@ (80109a4 <tcp_process+0x5ac>)
 80107cc:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 80107d0:	4975      	ldr	r1, [pc, #468]	@ (80109a8 <tcp_process+0x5b0>)
 80107d2:	4876      	ldr	r0, [pc, #472]	@ (80109ac <tcp_process+0x5b4>)
 80107d4:	f006 ff02 	bl	80175dc <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80107dc:	699b      	ldr	r3, [r3, #24]
 80107de:	2b00      	cmp	r3, #0
 80107e0:	d00a      	beq.n	80107f8 <tcp_process+0x400>
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80107e6:	699b      	ldr	r3, [r3, #24]
 80107e8:	687a      	ldr	r2, [r7, #4]
 80107ea:	6910      	ldr	r0, [r2, #16]
 80107ec:	2200      	movs	r2, #0
 80107ee:	6879      	ldr	r1, [r7, #4]
 80107f0:	4798      	blx	r3
 80107f2:	4603      	mov	r3, r0
 80107f4:	76bb      	strb	r3, [r7, #26]
 80107f6:	e001      	b.n	80107fc <tcp_process+0x404>
 80107f8:	23f0      	movs	r3, #240	@ 0xf0
 80107fa:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80107fc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010800:	2b00      	cmp	r3, #0
 8010802:	d00a      	beq.n	801081a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8010804:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010808:	f113 0f0d 	cmn.w	r3, #13
 801080c:	d002      	beq.n	8010814 <tcp_process+0x41c>
              tcp_abort(pcb);
 801080e:	6878      	ldr	r0, [r7, #4]
 8010810:	f7fd ff8c 	bl	800e72c <tcp_abort>
            }
            return ERR_ABRT;
 8010814:	f06f 030c 	mvn.w	r3, #12
 8010818:	e1ce      	b.n	8010bb8 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801081a:	6878      	ldr	r0, [r7, #4]
 801081c:	f000 fae0 	bl	8010de0 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8010820:	4b63      	ldr	r3, [pc, #396]	@ (80109b0 <tcp_process+0x5b8>)
 8010822:	881b      	ldrh	r3, [r3, #0]
 8010824:	2b00      	cmp	r3, #0
 8010826:	d005      	beq.n	8010834 <tcp_process+0x43c>
            recv_acked--;
 8010828:	4b61      	ldr	r3, [pc, #388]	@ (80109b0 <tcp_process+0x5b8>)
 801082a:	881b      	ldrh	r3, [r3, #0]
 801082c:	3b01      	subs	r3, #1
 801082e:	b29a      	uxth	r2, r3
 8010830:	4b5f      	ldr	r3, [pc, #380]	@ (80109b0 <tcp_process+0x5b8>)
 8010832:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010838:	009a      	lsls	r2, r3, #2
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801083e:	005b      	lsls	r3, r3, #1
 8010840:	f241 111c 	movw	r1, #4380	@ 0x111c
 8010844:	428b      	cmp	r3, r1
 8010846:	bf38      	it	cc
 8010848:	460b      	movcc	r3, r1
 801084a:	429a      	cmp	r2, r3
 801084c:	d204      	bcs.n	8010858 <tcp_process+0x460>
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010852:	009b      	lsls	r3, r3, #2
 8010854:	b29b      	uxth	r3, r3
 8010856:	e00d      	b.n	8010874 <tcp_process+0x47c>
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801085c:	005b      	lsls	r3, r3, #1
 801085e:	f241 121c 	movw	r2, #4380	@ 0x111c
 8010862:	4293      	cmp	r3, r2
 8010864:	d904      	bls.n	8010870 <tcp_process+0x478>
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801086a:	005b      	lsls	r3, r3, #1
 801086c:	b29b      	uxth	r3, r3
 801086e:	e001      	b.n	8010874 <tcp_process+0x47c>
 8010870:	f241 131c 	movw	r3, #4380	@ 0x111c
 8010874:	687a      	ldr	r2, [r7, #4]
 8010876:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801087a:	4b4e      	ldr	r3, [pc, #312]	@ (80109b4 <tcp_process+0x5bc>)
 801087c:	781b      	ldrb	r3, [r3, #0]
 801087e:	f003 0320 	and.w	r3, r3, #32
 8010882:	2b00      	cmp	r3, #0
 8010884:	d037      	beq.n	80108f6 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	8b5b      	ldrh	r3, [r3, #26]
 801088a:	f043 0302 	orr.w	r3, r3, #2
 801088e:	b29a      	uxth	r2, r3
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	2207      	movs	r2, #7
 8010898:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801089a:	e02c      	b.n	80108f6 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801089c:	4b3b      	ldr	r3, [pc, #236]	@ (801098c <tcp_process+0x594>)
 801089e:	6819      	ldr	r1, [r3, #0]
 80108a0:	4b3b      	ldr	r3, [pc, #236]	@ (8010990 <tcp_process+0x598>)
 80108a2:	881b      	ldrh	r3, [r3, #0]
 80108a4:	461a      	mov	r2, r3
 80108a6:	4b3b      	ldr	r3, [pc, #236]	@ (8010994 <tcp_process+0x59c>)
 80108a8:	681b      	ldr	r3, [r3, #0]
 80108aa:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80108ac:	4b3a      	ldr	r3, [pc, #232]	@ (8010998 <tcp_process+0x5a0>)
 80108ae:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80108b0:	885b      	ldrh	r3, [r3, #2]
 80108b2:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80108b4:	4a38      	ldr	r2, [pc, #224]	@ (8010998 <tcp_process+0x5a0>)
 80108b6:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80108b8:	8812      	ldrh	r2, [r2, #0]
 80108ba:	b292      	uxth	r2, r2
 80108bc:	9202      	str	r2, [sp, #8]
 80108be:	9301      	str	r3, [sp, #4]
 80108c0:	4b36      	ldr	r3, [pc, #216]	@ (801099c <tcp_process+0x5a4>)
 80108c2:	9300      	str	r3, [sp, #0]
 80108c4:	4b36      	ldr	r3, [pc, #216]	@ (80109a0 <tcp_process+0x5a8>)
 80108c6:	4602      	mov	r2, r0
 80108c8:	6878      	ldr	r0, [r7, #4]
 80108ca:	f002 fbcb 	bl	8013064 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80108ce:	e167      	b.n	8010ba0 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80108d0:	4b2d      	ldr	r3, [pc, #180]	@ (8010988 <tcp_process+0x590>)
 80108d2:	781b      	ldrb	r3, [r3, #0]
 80108d4:	f003 0302 	and.w	r3, r3, #2
 80108d8:	2b00      	cmp	r3, #0
 80108da:	f000 8161 	beq.w	8010ba0 <tcp_process+0x7a8>
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80108e2:	1e5a      	subs	r2, r3, #1
 80108e4:	4b2b      	ldr	r3, [pc, #172]	@ (8010994 <tcp_process+0x59c>)
 80108e6:	681b      	ldr	r3, [r3, #0]
 80108e8:	429a      	cmp	r2, r3
 80108ea:	f040 8159 	bne.w	8010ba0 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80108ee:	6878      	ldr	r0, [r7, #4]
 80108f0:	f002 f9b2 	bl	8012c58 <tcp_rexmit>
      break;
 80108f4:	e154      	b.n	8010ba0 <tcp_process+0x7a8>
 80108f6:	e153      	b.n	8010ba0 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80108f8:	6878      	ldr	r0, [r7, #4]
 80108fa:	f000 fa71 	bl	8010de0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80108fe:	4b2d      	ldr	r3, [pc, #180]	@ (80109b4 <tcp_process+0x5bc>)
 8010900:	781b      	ldrb	r3, [r3, #0]
 8010902:	f003 0320 	and.w	r3, r3, #32
 8010906:	2b00      	cmp	r3, #0
 8010908:	f000 814c 	beq.w	8010ba4 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	8b5b      	ldrh	r3, [r3, #26]
 8010910:	f043 0302 	orr.w	r3, r3, #2
 8010914:	b29a      	uxth	r2, r3
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	2207      	movs	r2, #7
 801091e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010920:	e140      	b.n	8010ba4 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8010922:	6878      	ldr	r0, [r7, #4]
 8010924:	f000 fa5c 	bl	8010de0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8010928:	4b22      	ldr	r3, [pc, #136]	@ (80109b4 <tcp_process+0x5bc>)
 801092a:	781b      	ldrb	r3, [r3, #0]
 801092c:	f003 0320 	and.w	r3, r3, #32
 8010930:	2b00      	cmp	r3, #0
 8010932:	d071      	beq.n	8010a18 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010934:	4b14      	ldr	r3, [pc, #80]	@ (8010988 <tcp_process+0x590>)
 8010936:	781b      	ldrb	r3, [r3, #0]
 8010938:	f003 0310 	and.w	r3, r3, #16
 801093c:	2b00      	cmp	r3, #0
 801093e:	d060      	beq.n	8010a02 <tcp_process+0x60a>
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010944:	4b11      	ldr	r3, [pc, #68]	@ (801098c <tcp_process+0x594>)
 8010946:	681b      	ldr	r3, [r3, #0]
 8010948:	429a      	cmp	r2, r3
 801094a:	d15a      	bne.n	8010a02 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010950:	2b00      	cmp	r3, #0
 8010952:	d156      	bne.n	8010a02 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	8b5b      	ldrh	r3, [r3, #26]
 8010958:	f043 0302 	orr.w	r3, r3, #2
 801095c:	b29a      	uxth	r2, r3
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8010962:	6878      	ldr	r0, [r7, #4]
 8010964:	f7fe fdbc 	bl	800f4e0 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8010968:	4b13      	ldr	r3, [pc, #76]	@ (80109b8 <tcp_process+0x5c0>)
 801096a:	681b      	ldr	r3, [r3, #0]
 801096c:	687a      	ldr	r2, [r7, #4]
 801096e:	429a      	cmp	r2, r3
 8010970:	d105      	bne.n	801097e <tcp_process+0x586>
 8010972:	4b11      	ldr	r3, [pc, #68]	@ (80109b8 <tcp_process+0x5c0>)
 8010974:	681b      	ldr	r3, [r3, #0]
 8010976:	68db      	ldr	r3, [r3, #12]
 8010978:	4a0f      	ldr	r2, [pc, #60]	@ (80109b8 <tcp_process+0x5c0>)
 801097a:	6013      	str	r3, [r2, #0]
 801097c:	e02e      	b.n	80109dc <tcp_process+0x5e4>
 801097e:	4b0e      	ldr	r3, [pc, #56]	@ (80109b8 <tcp_process+0x5c0>)
 8010980:	681b      	ldr	r3, [r3, #0]
 8010982:	617b      	str	r3, [r7, #20]
 8010984:	e027      	b.n	80109d6 <tcp_process+0x5de>
 8010986:	bf00      	nop
 8010988:	200151fc 	.word	0x200151fc
 801098c:	200151f4 	.word	0x200151f4
 8010990:	200151fa 	.word	0x200151fa
 8010994:	200151f0 	.word	0x200151f0
 8010998:	200151e0 	.word	0x200151e0
 801099c:	20011e88 	.word	0x20011e88
 80109a0:	20011e8c 	.word	0x20011e8c
 80109a4:	0802153c 	.word	0x0802153c
 80109a8:	080217dc 	.word	0x080217dc
 80109ac:	08021588 	.word	0x08021588
 80109b0:	200151f8 	.word	0x200151f8
 80109b4:	200151fd 	.word	0x200151fd
 80109b8:	200151c4 	.word	0x200151c4
 80109bc:	697b      	ldr	r3, [r7, #20]
 80109be:	68db      	ldr	r3, [r3, #12]
 80109c0:	687a      	ldr	r2, [r7, #4]
 80109c2:	429a      	cmp	r2, r3
 80109c4:	d104      	bne.n	80109d0 <tcp_process+0x5d8>
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	68da      	ldr	r2, [r3, #12]
 80109ca:	697b      	ldr	r3, [r7, #20]
 80109cc:	60da      	str	r2, [r3, #12]
 80109ce:	e005      	b.n	80109dc <tcp_process+0x5e4>
 80109d0:	697b      	ldr	r3, [r7, #20]
 80109d2:	68db      	ldr	r3, [r3, #12]
 80109d4:	617b      	str	r3, [r7, #20]
 80109d6:	697b      	ldr	r3, [r7, #20]
 80109d8:	2b00      	cmp	r3, #0
 80109da:	d1ef      	bne.n	80109bc <tcp_process+0x5c4>
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	2200      	movs	r2, #0
 80109e0:	60da      	str	r2, [r3, #12]
 80109e2:	4b77      	ldr	r3, [pc, #476]	@ (8010bc0 <tcp_process+0x7c8>)
 80109e4:	2201      	movs	r2, #1
 80109e6:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	220a      	movs	r2, #10
 80109ec:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80109ee:	4b75      	ldr	r3, [pc, #468]	@ (8010bc4 <tcp_process+0x7cc>)
 80109f0:	681a      	ldr	r2, [r3, #0]
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	60da      	str	r2, [r3, #12]
 80109f6:	4a73      	ldr	r2, [pc, #460]	@ (8010bc4 <tcp_process+0x7cc>)
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	6013      	str	r3, [r2, #0]
 80109fc:	f002 fcf4 	bl	80133e8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8010a00:	e0d2      	b.n	8010ba8 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	8b5b      	ldrh	r3, [r3, #26]
 8010a06:	f043 0302 	orr.w	r3, r3, #2
 8010a0a:	b29a      	uxth	r2, r3
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	2208      	movs	r2, #8
 8010a14:	751a      	strb	r2, [r3, #20]
      break;
 8010a16:	e0c7      	b.n	8010ba8 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010a18:	4b6b      	ldr	r3, [pc, #428]	@ (8010bc8 <tcp_process+0x7d0>)
 8010a1a:	781b      	ldrb	r3, [r3, #0]
 8010a1c:	f003 0310 	and.w	r3, r3, #16
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	f000 80c1 	beq.w	8010ba8 <tcp_process+0x7b0>
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010a2a:	4b68      	ldr	r3, [pc, #416]	@ (8010bcc <tcp_process+0x7d4>)
 8010a2c:	681b      	ldr	r3, [r3, #0]
 8010a2e:	429a      	cmp	r2, r3
 8010a30:	f040 80ba 	bne.w	8010ba8 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	f040 80b5 	bne.w	8010ba8 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	2206      	movs	r2, #6
 8010a42:	751a      	strb	r2, [r3, #20]
      break;
 8010a44:	e0b0      	b.n	8010ba8 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8010a46:	6878      	ldr	r0, [r7, #4]
 8010a48:	f000 f9ca 	bl	8010de0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8010a4c:	4b60      	ldr	r3, [pc, #384]	@ (8010bd0 <tcp_process+0x7d8>)
 8010a4e:	781b      	ldrb	r3, [r3, #0]
 8010a50:	f003 0320 	and.w	r3, r3, #32
 8010a54:	2b00      	cmp	r3, #0
 8010a56:	f000 80a9 	beq.w	8010bac <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	8b5b      	ldrh	r3, [r3, #26]
 8010a5e:	f043 0302 	orr.w	r3, r3, #2
 8010a62:	b29a      	uxth	r2, r3
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8010a68:	6878      	ldr	r0, [r7, #4]
 8010a6a:	f7fe fd39 	bl	800f4e0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8010a6e:	4b59      	ldr	r3, [pc, #356]	@ (8010bd4 <tcp_process+0x7dc>)
 8010a70:	681b      	ldr	r3, [r3, #0]
 8010a72:	687a      	ldr	r2, [r7, #4]
 8010a74:	429a      	cmp	r2, r3
 8010a76:	d105      	bne.n	8010a84 <tcp_process+0x68c>
 8010a78:	4b56      	ldr	r3, [pc, #344]	@ (8010bd4 <tcp_process+0x7dc>)
 8010a7a:	681b      	ldr	r3, [r3, #0]
 8010a7c:	68db      	ldr	r3, [r3, #12]
 8010a7e:	4a55      	ldr	r2, [pc, #340]	@ (8010bd4 <tcp_process+0x7dc>)
 8010a80:	6013      	str	r3, [r2, #0]
 8010a82:	e013      	b.n	8010aac <tcp_process+0x6b4>
 8010a84:	4b53      	ldr	r3, [pc, #332]	@ (8010bd4 <tcp_process+0x7dc>)
 8010a86:	681b      	ldr	r3, [r3, #0]
 8010a88:	613b      	str	r3, [r7, #16]
 8010a8a:	e00c      	b.n	8010aa6 <tcp_process+0x6ae>
 8010a8c:	693b      	ldr	r3, [r7, #16]
 8010a8e:	68db      	ldr	r3, [r3, #12]
 8010a90:	687a      	ldr	r2, [r7, #4]
 8010a92:	429a      	cmp	r2, r3
 8010a94:	d104      	bne.n	8010aa0 <tcp_process+0x6a8>
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	68da      	ldr	r2, [r3, #12]
 8010a9a:	693b      	ldr	r3, [r7, #16]
 8010a9c:	60da      	str	r2, [r3, #12]
 8010a9e:	e005      	b.n	8010aac <tcp_process+0x6b4>
 8010aa0:	693b      	ldr	r3, [r7, #16]
 8010aa2:	68db      	ldr	r3, [r3, #12]
 8010aa4:	613b      	str	r3, [r7, #16]
 8010aa6:	693b      	ldr	r3, [r7, #16]
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	d1ef      	bne.n	8010a8c <tcp_process+0x694>
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	2200      	movs	r2, #0
 8010ab0:	60da      	str	r2, [r3, #12]
 8010ab2:	4b43      	ldr	r3, [pc, #268]	@ (8010bc0 <tcp_process+0x7c8>)
 8010ab4:	2201      	movs	r2, #1
 8010ab6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	220a      	movs	r2, #10
 8010abc:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8010abe:	4b41      	ldr	r3, [pc, #260]	@ (8010bc4 <tcp_process+0x7cc>)
 8010ac0:	681a      	ldr	r2, [r3, #0]
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	60da      	str	r2, [r3, #12]
 8010ac6:	4a3f      	ldr	r2, [pc, #252]	@ (8010bc4 <tcp_process+0x7cc>)
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	6013      	str	r3, [r2, #0]
 8010acc:	f002 fc8c 	bl	80133e8 <tcp_timer_needed>
      }
      break;
 8010ad0:	e06c      	b.n	8010bac <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8010ad2:	6878      	ldr	r0, [r7, #4]
 8010ad4:	f000 f984 	bl	8010de0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010ad8:	4b3b      	ldr	r3, [pc, #236]	@ (8010bc8 <tcp_process+0x7d0>)
 8010ada:	781b      	ldrb	r3, [r3, #0]
 8010adc:	f003 0310 	and.w	r3, r3, #16
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	d065      	beq.n	8010bb0 <tcp_process+0x7b8>
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010ae8:	4b38      	ldr	r3, [pc, #224]	@ (8010bcc <tcp_process+0x7d4>)
 8010aea:	681b      	ldr	r3, [r3, #0]
 8010aec:	429a      	cmp	r2, r3
 8010aee:	d15f      	bne.n	8010bb0 <tcp_process+0x7b8>
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	d15b      	bne.n	8010bb0 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8010af8:	6878      	ldr	r0, [r7, #4]
 8010afa:	f7fe fcf1 	bl	800f4e0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8010afe:	4b35      	ldr	r3, [pc, #212]	@ (8010bd4 <tcp_process+0x7dc>)
 8010b00:	681b      	ldr	r3, [r3, #0]
 8010b02:	687a      	ldr	r2, [r7, #4]
 8010b04:	429a      	cmp	r2, r3
 8010b06:	d105      	bne.n	8010b14 <tcp_process+0x71c>
 8010b08:	4b32      	ldr	r3, [pc, #200]	@ (8010bd4 <tcp_process+0x7dc>)
 8010b0a:	681b      	ldr	r3, [r3, #0]
 8010b0c:	68db      	ldr	r3, [r3, #12]
 8010b0e:	4a31      	ldr	r2, [pc, #196]	@ (8010bd4 <tcp_process+0x7dc>)
 8010b10:	6013      	str	r3, [r2, #0]
 8010b12:	e013      	b.n	8010b3c <tcp_process+0x744>
 8010b14:	4b2f      	ldr	r3, [pc, #188]	@ (8010bd4 <tcp_process+0x7dc>)
 8010b16:	681b      	ldr	r3, [r3, #0]
 8010b18:	60fb      	str	r3, [r7, #12]
 8010b1a:	e00c      	b.n	8010b36 <tcp_process+0x73e>
 8010b1c:	68fb      	ldr	r3, [r7, #12]
 8010b1e:	68db      	ldr	r3, [r3, #12]
 8010b20:	687a      	ldr	r2, [r7, #4]
 8010b22:	429a      	cmp	r2, r3
 8010b24:	d104      	bne.n	8010b30 <tcp_process+0x738>
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	68da      	ldr	r2, [r3, #12]
 8010b2a:	68fb      	ldr	r3, [r7, #12]
 8010b2c:	60da      	str	r2, [r3, #12]
 8010b2e:	e005      	b.n	8010b3c <tcp_process+0x744>
 8010b30:	68fb      	ldr	r3, [r7, #12]
 8010b32:	68db      	ldr	r3, [r3, #12]
 8010b34:	60fb      	str	r3, [r7, #12]
 8010b36:	68fb      	ldr	r3, [r7, #12]
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	d1ef      	bne.n	8010b1c <tcp_process+0x724>
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	2200      	movs	r2, #0
 8010b40:	60da      	str	r2, [r3, #12]
 8010b42:	4b1f      	ldr	r3, [pc, #124]	@ (8010bc0 <tcp_process+0x7c8>)
 8010b44:	2201      	movs	r2, #1
 8010b46:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	220a      	movs	r2, #10
 8010b4c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8010b4e:	4b1d      	ldr	r3, [pc, #116]	@ (8010bc4 <tcp_process+0x7cc>)
 8010b50:	681a      	ldr	r2, [r3, #0]
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	60da      	str	r2, [r3, #12]
 8010b56:	4a1b      	ldr	r2, [pc, #108]	@ (8010bc4 <tcp_process+0x7cc>)
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	6013      	str	r3, [r2, #0]
 8010b5c:	f002 fc44 	bl	80133e8 <tcp_timer_needed>
      }
      break;
 8010b60:	e026      	b.n	8010bb0 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8010b62:	6878      	ldr	r0, [r7, #4]
 8010b64:	f000 f93c 	bl	8010de0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010b68:	4b17      	ldr	r3, [pc, #92]	@ (8010bc8 <tcp_process+0x7d0>)
 8010b6a:	781b      	ldrb	r3, [r3, #0]
 8010b6c:	f003 0310 	and.w	r3, r3, #16
 8010b70:	2b00      	cmp	r3, #0
 8010b72:	d01f      	beq.n	8010bb4 <tcp_process+0x7bc>
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010b78:	4b14      	ldr	r3, [pc, #80]	@ (8010bcc <tcp_process+0x7d4>)
 8010b7a:	681b      	ldr	r3, [r3, #0]
 8010b7c:	429a      	cmp	r2, r3
 8010b7e:	d119      	bne.n	8010bb4 <tcp_process+0x7bc>
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d115      	bne.n	8010bb4 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8010b88:	4b11      	ldr	r3, [pc, #68]	@ (8010bd0 <tcp_process+0x7d8>)
 8010b8a:	781b      	ldrb	r3, [r3, #0]
 8010b8c:	f043 0310 	orr.w	r3, r3, #16
 8010b90:	b2da      	uxtb	r2, r3
 8010b92:	4b0f      	ldr	r3, [pc, #60]	@ (8010bd0 <tcp_process+0x7d8>)
 8010b94:	701a      	strb	r2, [r3, #0]
      }
      break;
 8010b96:	e00d      	b.n	8010bb4 <tcp_process+0x7bc>
    default:
      break;
 8010b98:	bf00      	nop
 8010b9a:	e00c      	b.n	8010bb6 <tcp_process+0x7be>
      break;
 8010b9c:	bf00      	nop
 8010b9e:	e00a      	b.n	8010bb6 <tcp_process+0x7be>
      break;
 8010ba0:	bf00      	nop
 8010ba2:	e008      	b.n	8010bb6 <tcp_process+0x7be>
      break;
 8010ba4:	bf00      	nop
 8010ba6:	e006      	b.n	8010bb6 <tcp_process+0x7be>
      break;
 8010ba8:	bf00      	nop
 8010baa:	e004      	b.n	8010bb6 <tcp_process+0x7be>
      break;
 8010bac:	bf00      	nop
 8010bae:	e002      	b.n	8010bb6 <tcp_process+0x7be>
      break;
 8010bb0:	bf00      	nop
 8010bb2:	e000      	b.n	8010bb6 <tcp_process+0x7be>
      break;
 8010bb4:	bf00      	nop
  }
  return ERR_OK;
 8010bb6:	2300      	movs	r3, #0
}
 8010bb8:	4618      	mov	r0, r3
 8010bba:	3724      	adds	r7, #36	@ 0x24
 8010bbc:	46bd      	mov	sp, r7
 8010bbe:	bd90      	pop	{r4, r7, pc}
 8010bc0:	200151cc 	.word	0x200151cc
 8010bc4:	200151c8 	.word	0x200151c8
 8010bc8:	200151fc 	.word	0x200151fc
 8010bcc:	200151f4 	.word	0x200151f4
 8010bd0:	200151fd 	.word	0x200151fd
 8010bd4:	200151c4 	.word	0x200151c4

08010bd8 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8010bd8:	b590      	push	{r4, r7, lr}
 8010bda:	b085      	sub	sp, #20
 8010bdc:	af00      	add	r7, sp, #0
 8010bde:	6078      	str	r0, [r7, #4]
 8010be0:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	d106      	bne.n	8010bf6 <tcp_oos_insert_segment+0x1e>
 8010be8:	4b3b      	ldr	r3, [pc, #236]	@ (8010cd8 <tcp_oos_insert_segment+0x100>)
 8010bea:	f240 421f 	movw	r2, #1055	@ 0x41f
 8010bee:	493b      	ldr	r1, [pc, #236]	@ (8010cdc <tcp_oos_insert_segment+0x104>)
 8010bf0:	483b      	ldr	r0, [pc, #236]	@ (8010ce0 <tcp_oos_insert_segment+0x108>)
 8010bf2:	f006 fcf3 	bl	80175dc <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	68db      	ldr	r3, [r3, #12]
 8010bfa:	899b      	ldrh	r3, [r3, #12]
 8010bfc:	b29b      	uxth	r3, r3
 8010bfe:	4618      	mov	r0, r3
 8010c00:	f7fb f87a 	bl	800bcf8 <lwip_htons>
 8010c04:	4603      	mov	r3, r0
 8010c06:	b2db      	uxtb	r3, r3
 8010c08:	f003 0301 	and.w	r3, r3, #1
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	d028      	beq.n	8010c62 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8010c10:	6838      	ldr	r0, [r7, #0]
 8010c12:	f7fe fa63 	bl	800f0dc <tcp_segs_free>
    next = NULL;
 8010c16:	2300      	movs	r3, #0
 8010c18:	603b      	str	r3, [r7, #0]
 8010c1a:	e056      	b.n	8010cca <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8010c1c:	683b      	ldr	r3, [r7, #0]
 8010c1e:	68db      	ldr	r3, [r3, #12]
 8010c20:	899b      	ldrh	r3, [r3, #12]
 8010c22:	b29b      	uxth	r3, r3
 8010c24:	4618      	mov	r0, r3
 8010c26:	f7fb f867 	bl	800bcf8 <lwip_htons>
 8010c2a:	4603      	mov	r3, r0
 8010c2c:	b2db      	uxtb	r3, r3
 8010c2e:	f003 0301 	and.w	r3, r3, #1
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	d00d      	beq.n	8010c52 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	68db      	ldr	r3, [r3, #12]
 8010c3a:	899b      	ldrh	r3, [r3, #12]
 8010c3c:	b29c      	uxth	r4, r3
 8010c3e:	2001      	movs	r0, #1
 8010c40:	f7fb f85a 	bl	800bcf8 <lwip_htons>
 8010c44:	4603      	mov	r3, r0
 8010c46:	461a      	mov	r2, r3
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	68db      	ldr	r3, [r3, #12]
 8010c4c:	4322      	orrs	r2, r4
 8010c4e:	b292      	uxth	r2, r2
 8010c50:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8010c52:	683b      	ldr	r3, [r7, #0]
 8010c54:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8010c56:	683b      	ldr	r3, [r7, #0]
 8010c58:	681b      	ldr	r3, [r3, #0]
 8010c5a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8010c5c:	68f8      	ldr	r0, [r7, #12]
 8010c5e:	f7fe fa52 	bl	800f106 <tcp_seg_free>
    while (next &&
 8010c62:	683b      	ldr	r3, [r7, #0]
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	d00e      	beq.n	8010c86 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	891b      	ldrh	r3, [r3, #8]
 8010c6c:	461a      	mov	r2, r3
 8010c6e:	4b1d      	ldr	r3, [pc, #116]	@ (8010ce4 <tcp_oos_insert_segment+0x10c>)
 8010c70:	681b      	ldr	r3, [r3, #0]
 8010c72:	441a      	add	r2, r3
 8010c74:	683b      	ldr	r3, [r7, #0]
 8010c76:	68db      	ldr	r3, [r3, #12]
 8010c78:	685b      	ldr	r3, [r3, #4]
 8010c7a:	6839      	ldr	r1, [r7, #0]
 8010c7c:	8909      	ldrh	r1, [r1, #8]
 8010c7e:	440b      	add	r3, r1
 8010c80:	1ad3      	subs	r3, r2, r3
    while (next &&
 8010c82:	2b00      	cmp	r3, #0
 8010c84:	daca      	bge.n	8010c1c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8010c86:	683b      	ldr	r3, [r7, #0]
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	d01e      	beq.n	8010cca <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	891b      	ldrh	r3, [r3, #8]
 8010c90:	461a      	mov	r2, r3
 8010c92:	4b14      	ldr	r3, [pc, #80]	@ (8010ce4 <tcp_oos_insert_segment+0x10c>)
 8010c94:	681b      	ldr	r3, [r3, #0]
 8010c96:	441a      	add	r2, r3
 8010c98:	683b      	ldr	r3, [r7, #0]
 8010c9a:	68db      	ldr	r3, [r3, #12]
 8010c9c:	685b      	ldr	r3, [r3, #4]
 8010c9e:	1ad3      	subs	r3, r2, r3
    if (next &&
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	dd12      	ble.n	8010cca <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8010ca4:	683b      	ldr	r3, [r7, #0]
 8010ca6:	68db      	ldr	r3, [r3, #12]
 8010ca8:	685b      	ldr	r3, [r3, #4]
 8010caa:	b29a      	uxth	r2, r3
 8010cac:	4b0d      	ldr	r3, [pc, #52]	@ (8010ce4 <tcp_oos_insert_segment+0x10c>)
 8010cae:	681b      	ldr	r3, [r3, #0]
 8010cb0:	b29b      	uxth	r3, r3
 8010cb2:	1ad3      	subs	r3, r2, r3
 8010cb4:	b29a      	uxth	r2, r3
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	685a      	ldr	r2, [r3, #4]
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	891b      	ldrh	r3, [r3, #8]
 8010cc2:	4619      	mov	r1, r3
 8010cc4:	4610      	mov	r0, r2
 8010cc6:	f7fc fcb9 	bl	800d63c <pbuf_realloc>
    }
  }
  cseg->next = next;
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	683a      	ldr	r2, [r7, #0]
 8010cce:	601a      	str	r2, [r3, #0]
}
 8010cd0:	bf00      	nop
 8010cd2:	3714      	adds	r7, #20
 8010cd4:	46bd      	mov	sp, r7
 8010cd6:	bd90      	pop	{r4, r7, pc}
 8010cd8:	0802153c 	.word	0x0802153c
 8010cdc:	080217fc 	.word	0x080217fc
 8010ce0:	08021588 	.word	0x08021588
 8010ce4:	200151f0 	.word	0x200151f0

08010ce8 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8010ce8:	b5b0      	push	{r4, r5, r7, lr}
 8010cea:	b086      	sub	sp, #24
 8010cec:	af00      	add	r7, sp, #0
 8010cee:	60f8      	str	r0, [r7, #12]
 8010cf0:	60b9      	str	r1, [r7, #8]
 8010cf2:	607a      	str	r2, [r7, #4]
 8010cf4:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8010cf6:	e03e      	b.n	8010d76 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8010cf8:	68bb      	ldr	r3, [r7, #8]
 8010cfa:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8010cfc:	68bb      	ldr	r3, [r7, #8]
 8010cfe:	681b      	ldr	r3, [r3, #0]
 8010d00:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8010d02:	697b      	ldr	r3, [r7, #20]
 8010d04:	685b      	ldr	r3, [r3, #4]
 8010d06:	4618      	mov	r0, r3
 8010d08:	f7fc fea6 	bl	800da58 <pbuf_clen>
 8010d0c:	4603      	mov	r3, r0
 8010d0e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8010d10:	68fb      	ldr	r3, [r7, #12]
 8010d12:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010d16:	8a7a      	ldrh	r2, [r7, #18]
 8010d18:	429a      	cmp	r2, r3
 8010d1a:	d906      	bls.n	8010d2a <tcp_free_acked_segments+0x42>
 8010d1c:	4b2a      	ldr	r3, [pc, #168]	@ (8010dc8 <tcp_free_acked_segments+0xe0>)
 8010d1e:	f240 4257 	movw	r2, #1111	@ 0x457
 8010d22:	492a      	ldr	r1, [pc, #168]	@ (8010dcc <tcp_free_acked_segments+0xe4>)
 8010d24:	482a      	ldr	r0, [pc, #168]	@ (8010dd0 <tcp_free_acked_segments+0xe8>)
 8010d26:	f006 fc59 	bl	80175dc <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8010d2a:	68fb      	ldr	r3, [r7, #12]
 8010d2c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8010d30:	8a7b      	ldrh	r3, [r7, #18]
 8010d32:	1ad3      	subs	r3, r2, r3
 8010d34:	b29a      	uxth	r2, r3
 8010d36:	68fb      	ldr	r3, [r7, #12]
 8010d38:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8010d3c:	697b      	ldr	r3, [r7, #20]
 8010d3e:	891a      	ldrh	r2, [r3, #8]
 8010d40:	4b24      	ldr	r3, [pc, #144]	@ (8010dd4 <tcp_free_acked_segments+0xec>)
 8010d42:	881b      	ldrh	r3, [r3, #0]
 8010d44:	4413      	add	r3, r2
 8010d46:	b29a      	uxth	r2, r3
 8010d48:	4b22      	ldr	r3, [pc, #136]	@ (8010dd4 <tcp_free_acked_segments+0xec>)
 8010d4a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8010d4c:	6978      	ldr	r0, [r7, #20]
 8010d4e:	f7fe f9da 	bl	800f106 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8010d52:	68fb      	ldr	r3, [r7, #12]
 8010d54:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	d00c      	beq.n	8010d76 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8010d5c:	68bb      	ldr	r3, [r7, #8]
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	d109      	bne.n	8010d76 <tcp_free_acked_segments+0x8e>
 8010d62:	683b      	ldr	r3, [r7, #0]
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	d106      	bne.n	8010d76 <tcp_free_acked_segments+0x8e>
 8010d68:	4b17      	ldr	r3, [pc, #92]	@ (8010dc8 <tcp_free_acked_segments+0xe0>)
 8010d6a:	f240 4261 	movw	r2, #1121	@ 0x461
 8010d6e:	491a      	ldr	r1, [pc, #104]	@ (8010dd8 <tcp_free_acked_segments+0xf0>)
 8010d70:	4817      	ldr	r0, [pc, #92]	@ (8010dd0 <tcp_free_acked_segments+0xe8>)
 8010d72:	f006 fc33 	bl	80175dc <iprintf>
  while (seg_list != NULL &&
 8010d76:	68bb      	ldr	r3, [r7, #8]
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	d020      	beq.n	8010dbe <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8010d7c:	68bb      	ldr	r3, [r7, #8]
 8010d7e:	68db      	ldr	r3, [r3, #12]
 8010d80:	685b      	ldr	r3, [r3, #4]
 8010d82:	4618      	mov	r0, r3
 8010d84:	f7fa ffce 	bl	800bd24 <lwip_htonl>
 8010d88:	4604      	mov	r4, r0
 8010d8a:	68bb      	ldr	r3, [r7, #8]
 8010d8c:	891b      	ldrh	r3, [r3, #8]
 8010d8e:	461d      	mov	r5, r3
 8010d90:	68bb      	ldr	r3, [r7, #8]
 8010d92:	68db      	ldr	r3, [r3, #12]
 8010d94:	899b      	ldrh	r3, [r3, #12]
 8010d96:	b29b      	uxth	r3, r3
 8010d98:	4618      	mov	r0, r3
 8010d9a:	f7fa ffad 	bl	800bcf8 <lwip_htons>
 8010d9e:	4603      	mov	r3, r0
 8010da0:	b2db      	uxtb	r3, r3
 8010da2:	f003 0303 	and.w	r3, r3, #3
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	d001      	beq.n	8010dae <tcp_free_acked_segments+0xc6>
 8010daa:	2301      	movs	r3, #1
 8010dac:	e000      	b.n	8010db0 <tcp_free_acked_segments+0xc8>
 8010dae:	2300      	movs	r3, #0
 8010db0:	442b      	add	r3, r5
 8010db2:	18e2      	adds	r2, r4, r3
 8010db4:	4b09      	ldr	r3, [pc, #36]	@ (8010ddc <tcp_free_acked_segments+0xf4>)
 8010db6:	681b      	ldr	r3, [r3, #0]
 8010db8:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	dd9c      	ble.n	8010cf8 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8010dbe:	68bb      	ldr	r3, [r7, #8]
}
 8010dc0:	4618      	mov	r0, r3
 8010dc2:	3718      	adds	r7, #24
 8010dc4:	46bd      	mov	sp, r7
 8010dc6:	bdb0      	pop	{r4, r5, r7, pc}
 8010dc8:	0802153c 	.word	0x0802153c
 8010dcc:	08021824 	.word	0x08021824
 8010dd0:	08021588 	.word	0x08021588
 8010dd4:	200151f8 	.word	0x200151f8
 8010dd8:	0802184c 	.word	0x0802184c
 8010ddc:	200151f4 	.word	0x200151f4

08010de0 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8010de0:	b5b0      	push	{r4, r5, r7, lr}
 8010de2:	b094      	sub	sp, #80	@ 0x50
 8010de4:	af00      	add	r7, sp, #0
 8010de6:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8010de8:	2300      	movs	r3, #0
 8010dea:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d106      	bne.n	8010e00 <tcp_receive+0x20>
 8010df2:	4b91      	ldr	r3, [pc, #580]	@ (8011038 <tcp_receive+0x258>)
 8010df4:	f240 427b 	movw	r2, #1147	@ 0x47b
 8010df8:	4990      	ldr	r1, [pc, #576]	@ (801103c <tcp_receive+0x25c>)
 8010dfa:	4891      	ldr	r0, [pc, #580]	@ (8011040 <tcp_receive+0x260>)
 8010dfc:	f006 fbee 	bl	80175dc <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	7d1b      	ldrb	r3, [r3, #20]
 8010e04:	2b03      	cmp	r3, #3
 8010e06:	d806      	bhi.n	8010e16 <tcp_receive+0x36>
 8010e08:	4b8b      	ldr	r3, [pc, #556]	@ (8011038 <tcp_receive+0x258>)
 8010e0a:	f240 427c 	movw	r2, #1148	@ 0x47c
 8010e0e:	498d      	ldr	r1, [pc, #564]	@ (8011044 <tcp_receive+0x264>)
 8010e10:	488b      	ldr	r0, [pc, #556]	@ (8011040 <tcp_receive+0x260>)
 8010e12:	f006 fbe3 	bl	80175dc <iprintf>

  if (flags & TCP_ACK) {
 8010e16:	4b8c      	ldr	r3, [pc, #560]	@ (8011048 <tcp_receive+0x268>)
 8010e18:	781b      	ldrb	r3, [r3, #0]
 8010e1a:	f003 0310 	and.w	r3, r3, #16
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	f000 8264 	beq.w	80112ec <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8010e2a:	461a      	mov	r2, r3
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010e30:	4413      	add	r3, r2
 8010e32:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8010e38:	4b84      	ldr	r3, [pc, #528]	@ (801104c <tcp_receive+0x26c>)
 8010e3a:	681b      	ldr	r3, [r3, #0]
 8010e3c:	1ad3      	subs	r3, r2, r3
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	db1b      	blt.n	8010e7a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8010e46:	4b81      	ldr	r3, [pc, #516]	@ (801104c <tcp_receive+0x26c>)
 8010e48:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010e4a:	429a      	cmp	r2, r3
 8010e4c:	d106      	bne.n	8010e5c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8010e52:	4b7f      	ldr	r3, [pc, #508]	@ (8011050 <tcp_receive+0x270>)
 8010e54:	681b      	ldr	r3, [r3, #0]
 8010e56:	1ad3      	subs	r3, r2, r3
 8010e58:	2b00      	cmp	r3, #0
 8010e5a:	db0e      	blt.n	8010e7a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8010e60:	4b7b      	ldr	r3, [pc, #492]	@ (8011050 <tcp_receive+0x270>)
 8010e62:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010e64:	429a      	cmp	r2, r3
 8010e66:	d125      	bne.n	8010eb4 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010e68:	4b7a      	ldr	r3, [pc, #488]	@ (8011054 <tcp_receive+0x274>)
 8010e6a:	681b      	ldr	r3, [r3, #0]
 8010e6c:	89db      	ldrh	r3, [r3, #14]
 8010e6e:	b29a      	uxth	r2, r3
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8010e76:	429a      	cmp	r2, r3
 8010e78:	d91c      	bls.n	8010eb4 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8010e7a:	4b76      	ldr	r3, [pc, #472]	@ (8011054 <tcp_receive+0x274>)
 8010e7c:	681b      	ldr	r3, [r3, #0]
 8010e7e:	89db      	ldrh	r3, [r3, #14]
 8010e80:	b29a      	uxth	r2, r3
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8010e94:	429a      	cmp	r2, r3
 8010e96:	d205      	bcs.n	8010ea4 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 8010ea4:	4b69      	ldr	r3, [pc, #420]	@ (801104c <tcp_receive+0x26c>)
 8010ea6:	681a      	ldr	r2, [r3, #0]
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 8010eac:	4b68      	ldr	r3, [pc, #416]	@ (8011050 <tcp_receive+0x270>)
 8010eae:	681a      	ldr	r2, [r3, #0]
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8010eb4:	4b66      	ldr	r3, [pc, #408]	@ (8011050 <tcp_receive+0x270>)
 8010eb6:	681a      	ldr	r2, [r3, #0]
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010ebc:	1ad3      	subs	r3, r2, r3
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	dc58      	bgt.n	8010f74 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8010ec2:	4b65      	ldr	r3, [pc, #404]	@ (8011058 <tcp_receive+0x278>)
 8010ec4:	881b      	ldrh	r3, [r3, #0]
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	d14b      	bne.n	8010f62 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010ece:	687a      	ldr	r2, [r7, #4]
 8010ed0:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 8010ed4:	4413      	add	r3, r2
 8010ed6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010ed8:	429a      	cmp	r2, r3
 8010eda:	d142      	bne.n	8010f62 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	db3d      	blt.n	8010f62 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010eea:	4b59      	ldr	r3, [pc, #356]	@ (8011050 <tcp_receive+0x270>)
 8010eec:	681b      	ldr	r3, [r3, #0]
 8010eee:	429a      	cmp	r2, r3
 8010ef0:	d137      	bne.n	8010f62 <tcp_receive+0x182>
              found_dupack = 1;
 8010ef2:	2301      	movs	r3, #1
 8010ef4:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8010efc:	2bff      	cmp	r3, #255	@ 0xff
 8010efe:	d007      	beq.n	8010f10 <tcp_receive+0x130>
                ++pcb->dupacks;
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8010f06:	3301      	adds	r3, #1
 8010f08:	b2da      	uxtb	r2, r3
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8010f16:	2b03      	cmp	r3, #3
 8010f18:	d91b      	bls.n	8010f52 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010f24:	4413      	add	r3, r2
 8010f26:	b29a      	uxth	r2, r3
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8010f2e:	429a      	cmp	r2, r3
 8010f30:	d30a      	bcc.n	8010f48 <tcp_receive+0x168>
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010f3c:	4413      	add	r3, r2
 8010f3e:	b29a      	uxth	r2, r3
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8010f46:	e004      	b.n	8010f52 <tcp_receive+0x172>
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010f4e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8010f58:	2b02      	cmp	r3, #2
 8010f5a:	d902      	bls.n	8010f62 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8010f5c:	6878      	ldr	r0, [r7, #4]
 8010f5e:	f001 fee7 	bl	8012d30 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8010f62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	f040 8161 	bne.w	801122c <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	2200      	movs	r2, #0
 8010f6e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8010f72:	e15b      	b.n	801122c <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010f74:	4b36      	ldr	r3, [pc, #216]	@ (8011050 <tcp_receive+0x270>)
 8010f76:	681a      	ldr	r2, [r3, #0]
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010f7c:	1ad3      	subs	r3, r2, r3
 8010f7e:	3b01      	subs	r3, #1
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	f2c0 814e 	blt.w	8011222 <tcp_receive+0x442>
 8010f86:	4b32      	ldr	r3, [pc, #200]	@ (8011050 <tcp_receive+0x270>)
 8010f88:	681a      	ldr	r2, [r3, #0]
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010f8e:	1ad3      	subs	r3, r2, r3
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	f300 8146 	bgt.w	8011222 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	8b5b      	ldrh	r3, [r3, #26]
 8010f9a:	f003 0304 	and.w	r3, r3, #4
 8010f9e:	2b00      	cmp	r3, #0
 8010fa0:	d010      	beq.n	8010fc4 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	8b5b      	ldrh	r3, [r3, #26]
 8010fa6:	f023 0304 	bic.w	r3, r3, #4
 8010faa:	b29a      	uxth	r2, r3
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	2200      	movs	r2, #0
 8010fc0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	2200      	movs	r2, #0
 8010fc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8010fd2:	10db      	asrs	r3, r3, #3
 8010fd4:	b21b      	sxth	r3, r3
 8010fd6:	b29a      	uxth	r2, r3
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8010fde:	b29b      	uxth	r3, r3
 8010fe0:	4413      	add	r3, r2
 8010fe2:	b29b      	uxth	r3, r3
 8010fe4:	b21a      	sxth	r2, r3
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8010fec:	4b18      	ldr	r3, [pc, #96]	@ (8011050 <tcp_receive+0x270>)
 8010fee:	681b      	ldr	r3, [r3, #0]
 8010ff0:	b29a      	uxth	r2, r3
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010ff6:	b29b      	uxth	r3, r3
 8010ff8:	1ad3      	subs	r3, r2, r3
 8010ffa:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	2200      	movs	r2, #0
 8011000:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 8011004:	4b12      	ldr	r3, [pc, #72]	@ (8011050 <tcp_receive+0x270>)
 8011006:	681a      	ldr	r2, [r3, #0]
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	7d1b      	ldrb	r3, [r3, #20]
 8011010:	2b03      	cmp	r3, #3
 8011012:	f240 8097 	bls.w	8011144 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8011022:	429a      	cmp	r2, r3
 8011024:	d245      	bcs.n	80110b2 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	8b5b      	ldrh	r3, [r3, #26]
 801102a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801102e:	2b00      	cmp	r3, #0
 8011030:	d014      	beq.n	801105c <tcp_receive+0x27c>
 8011032:	2301      	movs	r3, #1
 8011034:	e013      	b.n	801105e <tcp_receive+0x27e>
 8011036:	bf00      	nop
 8011038:	0802153c 	.word	0x0802153c
 801103c:	0802186c 	.word	0x0802186c
 8011040:	08021588 	.word	0x08021588
 8011044:	08021888 	.word	0x08021888
 8011048:	200151fc 	.word	0x200151fc
 801104c:	200151f0 	.word	0x200151f0
 8011050:	200151f4 	.word	0x200151f4
 8011054:	200151e0 	.word	0x200151e0
 8011058:	200151fa 	.word	0x200151fa
 801105c:	2302      	movs	r3, #2
 801105e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8011062:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8011066:	b29a      	uxth	r2, r3
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801106c:	fb12 f303 	smulbb	r3, r2, r3
 8011070:	b29b      	uxth	r3, r3
 8011072:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8011074:	4293      	cmp	r3, r2
 8011076:	bf28      	it	cs
 8011078:	4613      	movcs	r3, r2
 801107a:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8011082:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8011084:	4413      	add	r3, r2
 8011086:	b29a      	uxth	r2, r3
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801108e:	429a      	cmp	r2, r3
 8011090:	d309      	bcc.n	80110a6 <tcp_receive+0x2c6>
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8011098:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801109a:	4413      	add	r3, r2
 801109c:	b29a      	uxth	r2, r3
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80110a4:	e04e      	b.n	8011144 <tcp_receive+0x364>
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80110ac:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80110b0:	e048      	b.n	8011144 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80110b8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80110ba:	4413      	add	r3, r2
 80110bc:	b29a      	uxth	r2, r3
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80110c4:	429a      	cmp	r2, r3
 80110c6:	d309      	bcc.n	80110dc <tcp_receive+0x2fc>
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80110ce:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80110d0:	4413      	add	r3, r2
 80110d2:	b29a      	uxth	r2, r3
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80110da:	e004      	b.n	80110e6 <tcp_receive+0x306>
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80110e2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80110f2:	429a      	cmp	r2, r3
 80110f4:	d326      	bcc.n	8011144 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8011102:	1ad3      	subs	r3, r2, r3
 8011104:	b29a      	uxth	r2, r3
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011116:	4413      	add	r3, r2
 8011118:	b29a      	uxth	r2, r3
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8011120:	429a      	cmp	r2, r3
 8011122:	d30a      	bcc.n	801113a <tcp_receive+0x35a>
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801112e:	4413      	add	r3, r2
 8011130:	b29a      	uxth	r2, r3
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8011138:	e004      	b.n	8011144 <tcp_receive+0x364>
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011140:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801114c:	4a98      	ldr	r2, [pc, #608]	@ (80113b0 <tcp_receive+0x5d0>)
 801114e:	6878      	ldr	r0, [r7, #4]
 8011150:	f7ff fdca 	bl	8010ce8 <tcp_free_acked_segments>
 8011154:	4602      	mov	r2, r0
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011162:	4a94      	ldr	r2, [pc, #592]	@ (80113b4 <tcp_receive+0x5d4>)
 8011164:	6878      	ldr	r0, [r7, #4]
 8011166:	f7ff fdbf 	bl	8010ce8 <tcp_free_acked_segments>
 801116a:	4602      	mov	r2, r0
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011174:	2b00      	cmp	r3, #0
 8011176:	d104      	bne.n	8011182 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801117e:	861a      	strh	r2, [r3, #48]	@ 0x30
 8011180:	e002      	b.n	8011188 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	2200      	movs	r2, #0
 8011186:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	2200      	movs	r2, #0
 801118c:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011192:	2b00      	cmp	r3, #0
 8011194:	d103      	bne.n	801119e <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	2200      	movs	r2, #0
 801119a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 80111a4:	4b84      	ldr	r3, [pc, #528]	@ (80113b8 <tcp_receive+0x5d8>)
 80111a6:	881b      	ldrh	r3, [r3, #0]
 80111a8:	4413      	add	r3, r2
 80111aa:	b29a      	uxth	r2, r3
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	8b5b      	ldrh	r3, [r3, #26]
 80111b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	d035      	beq.n	801122a <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80111c2:	2b00      	cmp	r3, #0
 80111c4:	d118      	bne.n	80111f8 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	d00c      	beq.n	80111e8 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80111d6:	68db      	ldr	r3, [r3, #12]
 80111d8:	685b      	ldr	r3, [r3, #4]
 80111da:	4618      	mov	r0, r3
 80111dc:	f7fa fda2 	bl	800bd24 <lwip_htonl>
 80111e0:	4603      	mov	r3, r0
 80111e2:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	dc20      	bgt.n	801122a <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	8b5b      	ldrh	r3, [r3, #26]
 80111ec:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80111f0:	b29a      	uxth	r2, r3
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80111f6:	e018      	b.n	801122a <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011200:	68db      	ldr	r3, [r3, #12]
 8011202:	685b      	ldr	r3, [r3, #4]
 8011204:	4618      	mov	r0, r3
 8011206:	f7fa fd8d 	bl	800bd24 <lwip_htonl>
 801120a:	4603      	mov	r3, r0
 801120c:	1ae3      	subs	r3, r4, r3
 801120e:	2b00      	cmp	r3, #0
 8011210:	dc0b      	bgt.n	801122a <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	8b5b      	ldrh	r3, [r3, #26]
 8011216:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801121a:	b29a      	uxth	r2, r3
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011220:	e003      	b.n	801122a <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8011222:	6878      	ldr	r0, [r7, #4]
 8011224:	f001 ff70 	bl	8013108 <tcp_send_empty_ack>
 8011228:	e000      	b.n	801122c <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801122a:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011230:	2b00      	cmp	r3, #0
 8011232:	d05b      	beq.n	80112ec <tcp_receive+0x50c>
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011238:	4b60      	ldr	r3, [pc, #384]	@ (80113bc <tcp_receive+0x5dc>)
 801123a:	681b      	ldr	r3, [r3, #0]
 801123c:	1ad3      	subs	r3, r2, r3
 801123e:	2b00      	cmp	r3, #0
 8011240:	da54      	bge.n	80112ec <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8011242:	4b5f      	ldr	r3, [pc, #380]	@ (80113c0 <tcp_receive+0x5e0>)
 8011244:	681b      	ldr	r3, [r3, #0]
 8011246:	b29a      	uxth	r2, r3
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801124c:	b29b      	uxth	r3, r3
 801124e:	1ad3      	subs	r3, r2, r3
 8011250:	b29b      	uxth	r3, r3
 8011252:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8011256:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8011260:	10db      	asrs	r3, r3, #3
 8011262:	b21b      	sxth	r3, r3
 8011264:	b29b      	uxth	r3, r3
 8011266:	1ad3      	subs	r3, r2, r3
 8011268:	b29b      	uxth	r3, r3
 801126a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8011274:	b29a      	uxth	r2, r3
 8011276:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 801127a:	4413      	add	r3, r2
 801127c:	b29b      	uxth	r3, r3
 801127e:	b21a      	sxth	r2, r3
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8011284:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8011288:	2b00      	cmp	r3, #0
 801128a:	da05      	bge.n	8011298 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 801128c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8011290:	425b      	negs	r3, r3
 8011292:	b29b      	uxth	r3, r3
 8011294:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8011298:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80112a2:	109b      	asrs	r3, r3, #2
 80112a4:	b21b      	sxth	r3, r3
 80112a6:	b29b      	uxth	r3, r3
 80112a8:	1ad3      	subs	r3, r2, r3
 80112aa:	b29b      	uxth	r3, r3
 80112ac:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80112b6:	b29a      	uxth	r2, r3
 80112b8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80112bc:	4413      	add	r3, r2
 80112be:	b29b      	uxth	r3, r3
 80112c0:	b21a      	sxth	r2, r3
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80112cc:	10db      	asrs	r3, r3, #3
 80112ce:	b21b      	sxth	r3, r3
 80112d0:	b29a      	uxth	r2, r3
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80112d8:	b29b      	uxth	r3, r3
 80112da:	4413      	add	r3, r2
 80112dc:	b29b      	uxth	r3, r3
 80112de:	b21a      	sxth	r2, r3
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	2200      	movs	r2, #0
 80112ea:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80112ec:	4b35      	ldr	r3, [pc, #212]	@ (80113c4 <tcp_receive+0x5e4>)
 80112ee:	881b      	ldrh	r3, [r3, #0]
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	f000 84df 	beq.w	8011cb4 <tcp_receive+0xed4>
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	7d1b      	ldrb	r3, [r3, #20]
 80112fa:	2b06      	cmp	r3, #6
 80112fc:	f200 84da 	bhi.w	8011cb4 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011304:	4b30      	ldr	r3, [pc, #192]	@ (80113c8 <tcp_receive+0x5e8>)
 8011306:	681b      	ldr	r3, [r3, #0]
 8011308:	1ad3      	subs	r3, r2, r3
 801130a:	3b01      	subs	r3, #1
 801130c:	2b00      	cmp	r3, #0
 801130e:	f2c0 808f 	blt.w	8011430 <tcp_receive+0x650>
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011316:	4b2b      	ldr	r3, [pc, #172]	@ (80113c4 <tcp_receive+0x5e4>)
 8011318:	881b      	ldrh	r3, [r3, #0]
 801131a:	4619      	mov	r1, r3
 801131c:	4b2a      	ldr	r3, [pc, #168]	@ (80113c8 <tcp_receive+0x5e8>)
 801131e:	681b      	ldr	r3, [r3, #0]
 8011320:	440b      	add	r3, r1
 8011322:	1ad3      	subs	r3, r2, r3
 8011324:	3301      	adds	r3, #1
 8011326:	2b00      	cmp	r3, #0
 8011328:	f300 8082 	bgt.w	8011430 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 801132c:	4b27      	ldr	r3, [pc, #156]	@ (80113cc <tcp_receive+0x5ec>)
 801132e:	685b      	ldr	r3, [r3, #4]
 8011330:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011336:	4b24      	ldr	r3, [pc, #144]	@ (80113c8 <tcp_receive+0x5e8>)
 8011338:	681b      	ldr	r3, [r3, #0]
 801133a:	1ad3      	subs	r3, r2, r3
 801133c:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801133e:	4b23      	ldr	r3, [pc, #140]	@ (80113cc <tcp_receive+0x5ec>)
 8011340:	685b      	ldr	r3, [r3, #4]
 8011342:	2b00      	cmp	r3, #0
 8011344:	d106      	bne.n	8011354 <tcp_receive+0x574>
 8011346:	4b22      	ldr	r3, [pc, #136]	@ (80113d0 <tcp_receive+0x5f0>)
 8011348:	f240 5294 	movw	r2, #1428	@ 0x594
 801134c:	4921      	ldr	r1, [pc, #132]	@ (80113d4 <tcp_receive+0x5f4>)
 801134e:	4822      	ldr	r0, [pc, #136]	@ (80113d8 <tcp_receive+0x5f8>)
 8011350:	f006 f944 	bl	80175dc <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8011354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011356:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801135a:	4293      	cmp	r3, r2
 801135c:	d906      	bls.n	801136c <tcp_receive+0x58c>
 801135e:	4b1c      	ldr	r3, [pc, #112]	@ (80113d0 <tcp_receive+0x5f0>)
 8011360:	f240 5295 	movw	r2, #1429	@ 0x595
 8011364:	491d      	ldr	r1, [pc, #116]	@ (80113dc <tcp_receive+0x5fc>)
 8011366:	481c      	ldr	r0, [pc, #112]	@ (80113d8 <tcp_receive+0x5f8>)
 8011368:	f006 f938 	bl	80175dc <iprintf>
      off = (u16_t)off32;
 801136c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801136e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8011372:	4b16      	ldr	r3, [pc, #88]	@ (80113cc <tcp_receive+0x5ec>)
 8011374:	685b      	ldr	r3, [r3, #4]
 8011376:	891b      	ldrh	r3, [r3, #8]
 8011378:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801137c:	429a      	cmp	r2, r3
 801137e:	d906      	bls.n	801138e <tcp_receive+0x5ae>
 8011380:	4b13      	ldr	r3, [pc, #76]	@ (80113d0 <tcp_receive+0x5f0>)
 8011382:	f240 5297 	movw	r2, #1431	@ 0x597
 8011386:	4916      	ldr	r1, [pc, #88]	@ (80113e0 <tcp_receive+0x600>)
 8011388:	4813      	ldr	r0, [pc, #76]	@ (80113d8 <tcp_receive+0x5f8>)
 801138a:	f006 f927 	bl	80175dc <iprintf>
      inseg.len -= off;
 801138e:	4b0f      	ldr	r3, [pc, #60]	@ (80113cc <tcp_receive+0x5ec>)
 8011390:	891a      	ldrh	r2, [r3, #8]
 8011392:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011396:	1ad3      	subs	r3, r2, r3
 8011398:	b29a      	uxth	r2, r3
 801139a:	4b0c      	ldr	r3, [pc, #48]	@ (80113cc <tcp_receive+0x5ec>)
 801139c:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801139e:	4b0b      	ldr	r3, [pc, #44]	@ (80113cc <tcp_receive+0x5ec>)
 80113a0:	685b      	ldr	r3, [r3, #4]
 80113a2:	891a      	ldrh	r2, [r3, #8]
 80113a4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80113a8:	1ad3      	subs	r3, r2, r3
 80113aa:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 80113ac:	e02a      	b.n	8011404 <tcp_receive+0x624>
 80113ae:	bf00      	nop
 80113b0:	080218a4 	.word	0x080218a4
 80113b4:	080218ac 	.word	0x080218ac
 80113b8:	200151f8 	.word	0x200151f8
 80113bc:	200151f4 	.word	0x200151f4
 80113c0:	200151b8 	.word	0x200151b8
 80113c4:	200151fa 	.word	0x200151fa
 80113c8:	200151f0 	.word	0x200151f0
 80113cc:	200151d0 	.word	0x200151d0
 80113d0:	0802153c 	.word	0x0802153c
 80113d4:	080218b4 	.word	0x080218b4
 80113d8:	08021588 	.word	0x08021588
 80113dc:	080218c4 	.word	0x080218c4
 80113e0:	080218d4 	.word	0x080218d4
        off -= p->len;
 80113e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80113e6:	895b      	ldrh	r3, [r3, #10]
 80113e8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80113ec:	1ad3      	subs	r3, r2, r3
 80113ee:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80113f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80113f4:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80113f6:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80113f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80113fa:	2200      	movs	r2, #0
 80113fc:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80113fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011400:	681b      	ldr	r3, [r3, #0]
 8011402:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 8011404:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011406:	895b      	ldrh	r3, [r3, #10]
 8011408:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801140c:	429a      	cmp	r2, r3
 801140e:	d8e9      	bhi.n	80113e4 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8011410:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011414:	4619      	mov	r1, r3
 8011416:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8011418:	f7fc fa10 	bl	800d83c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011420:	4a90      	ldr	r2, [pc, #576]	@ (8011664 <tcp_receive+0x884>)
 8011422:	6013      	str	r3, [r2, #0]
 8011424:	4b90      	ldr	r3, [pc, #576]	@ (8011668 <tcp_receive+0x888>)
 8011426:	68db      	ldr	r3, [r3, #12]
 8011428:	4a8e      	ldr	r2, [pc, #568]	@ (8011664 <tcp_receive+0x884>)
 801142a:	6812      	ldr	r2, [r2, #0]
 801142c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801142e:	e00d      	b.n	801144c <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8011430:	4b8c      	ldr	r3, [pc, #560]	@ (8011664 <tcp_receive+0x884>)
 8011432:	681a      	ldr	r2, [r3, #0]
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011438:	1ad3      	subs	r3, r2, r3
 801143a:	2b00      	cmp	r3, #0
 801143c:	da06      	bge.n	801144c <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	8b5b      	ldrh	r3, [r3, #26]
 8011442:	f043 0302 	orr.w	r3, r3, #2
 8011446:	b29a      	uxth	r2, r3
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801144c:	4b85      	ldr	r3, [pc, #532]	@ (8011664 <tcp_receive+0x884>)
 801144e:	681a      	ldr	r2, [r3, #0]
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011454:	1ad3      	subs	r3, r2, r3
 8011456:	2b00      	cmp	r3, #0
 8011458:	f2c0 8427 	blt.w	8011caa <tcp_receive+0xeca>
 801145c:	4b81      	ldr	r3, [pc, #516]	@ (8011664 <tcp_receive+0x884>)
 801145e:	681a      	ldr	r2, [r3, #0]
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011464:	6879      	ldr	r1, [r7, #4]
 8011466:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8011468:	440b      	add	r3, r1
 801146a:	1ad3      	subs	r3, r2, r3
 801146c:	3301      	adds	r3, #1
 801146e:	2b00      	cmp	r3, #0
 8011470:	f300 841b 	bgt.w	8011caa <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011478:	4b7a      	ldr	r3, [pc, #488]	@ (8011664 <tcp_receive+0x884>)
 801147a:	681b      	ldr	r3, [r3, #0]
 801147c:	429a      	cmp	r2, r3
 801147e:	f040 8298 	bne.w	80119b2 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8011482:	4b79      	ldr	r3, [pc, #484]	@ (8011668 <tcp_receive+0x888>)
 8011484:	891c      	ldrh	r4, [r3, #8]
 8011486:	4b78      	ldr	r3, [pc, #480]	@ (8011668 <tcp_receive+0x888>)
 8011488:	68db      	ldr	r3, [r3, #12]
 801148a:	899b      	ldrh	r3, [r3, #12]
 801148c:	b29b      	uxth	r3, r3
 801148e:	4618      	mov	r0, r3
 8011490:	f7fa fc32 	bl	800bcf8 <lwip_htons>
 8011494:	4603      	mov	r3, r0
 8011496:	b2db      	uxtb	r3, r3
 8011498:	f003 0303 	and.w	r3, r3, #3
 801149c:	2b00      	cmp	r3, #0
 801149e:	d001      	beq.n	80114a4 <tcp_receive+0x6c4>
 80114a0:	2301      	movs	r3, #1
 80114a2:	e000      	b.n	80114a6 <tcp_receive+0x6c6>
 80114a4:	2300      	movs	r3, #0
 80114a6:	4423      	add	r3, r4
 80114a8:	b29a      	uxth	r2, r3
 80114aa:	4b70      	ldr	r3, [pc, #448]	@ (801166c <tcp_receive+0x88c>)
 80114ac:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80114b2:	4b6e      	ldr	r3, [pc, #440]	@ (801166c <tcp_receive+0x88c>)
 80114b4:	881b      	ldrh	r3, [r3, #0]
 80114b6:	429a      	cmp	r2, r3
 80114b8:	d274      	bcs.n	80115a4 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80114ba:	4b6b      	ldr	r3, [pc, #428]	@ (8011668 <tcp_receive+0x888>)
 80114bc:	68db      	ldr	r3, [r3, #12]
 80114be:	899b      	ldrh	r3, [r3, #12]
 80114c0:	b29b      	uxth	r3, r3
 80114c2:	4618      	mov	r0, r3
 80114c4:	f7fa fc18 	bl	800bcf8 <lwip_htons>
 80114c8:	4603      	mov	r3, r0
 80114ca:	b2db      	uxtb	r3, r3
 80114cc:	f003 0301 	and.w	r3, r3, #1
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	d01e      	beq.n	8011512 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80114d4:	4b64      	ldr	r3, [pc, #400]	@ (8011668 <tcp_receive+0x888>)
 80114d6:	68db      	ldr	r3, [r3, #12]
 80114d8:	899b      	ldrh	r3, [r3, #12]
 80114da:	b29b      	uxth	r3, r3
 80114dc:	b21b      	sxth	r3, r3
 80114de:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80114e2:	b21c      	sxth	r4, r3
 80114e4:	4b60      	ldr	r3, [pc, #384]	@ (8011668 <tcp_receive+0x888>)
 80114e6:	68db      	ldr	r3, [r3, #12]
 80114e8:	899b      	ldrh	r3, [r3, #12]
 80114ea:	b29b      	uxth	r3, r3
 80114ec:	4618      	mov	r0, r3
 80114ee:	f7fa fc03 	bl	800bcf8 <lwip_htons>
 80114f2:	4603      	mov	r3, r0
 80114f4:	b2db      	uxtb	r3, r3
 80114f6:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80114fa:	b29b      	uxth	r3, r3
 80114fc:	4618      	mov	r0, r3
 80114fe:	f7fa fbfb 	bl	800bcf8 <lwip_htons>
 8011502:	4603      	mov	r3, r0
 8011504:	b21b      	sxth	r3, r3
 8011506:	4323      	orrs	r3, r4
 8011508:	b21a      	sxth	r2, r3
 801150a:	4b57      	ldr	r3, [pc, #348]	@ (8011668 <tcp_receive+0x888>)
 801150c:	68db      	ldr	r3, [r3, #12]
 801150e:	b292      	uxth	r2, r2
 8011510:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8011516:	4b54      	ldr	r3, [pc, #336]	@ (8011668 <tcp_receive+0x888>)
 8011518:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801151a:	4b53      	ldr	r3, [pc, #332]	@ (8011668 <tcp_receive+0x888>)
 801151c:	68db      	ldr	r3, [r3, #12]
 801151e:	899b      	ldrh	r3, [r3, #12]
 8011520:	b29b      	uxth	r3, r3
 8011522:	4618      	mov	r0, r3
 8011524:	f7fa fbe8 	bl	800bcf8 <lwip_htons>
 8011528:	4603      	mov	r3, r0
 801152a:	b2db      	uxtb	r3, r3
 801152c:	f003 0302 	and.w	r3, r3, #2
 8011530:	2b00      	cmp	r3, #0
 8011532:	d005      	beq.n	8011540 <tcp_receive+0x760>
            inseg.len -= 1;
 8011534:	4b4c      	ldr	r3, [pc, #304]	@ (8011668 <tcp_receive+0x888>)
 8011536:	891b      	ldrh	r3, [r3, #8]
 8011538:	3b01      	subs	r3, #1
 801153a:	b29a      	uxth	r2, r3
 801153c:	4b4a      	ldr	r3, [pc, #296]	@ (8011668 <tcp_receive+0x888>)
 801153e:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8011540:	4b49      	ldr	r3, [pc, #292]	@ (8011668 <tcp_receive+0x888>)
 8011542:	685b      	ldr	r3, [r3, #4]
 8011544:	4a48      	ldr	r2, [pc, #288]	@ (8011668 <tcp_receive+0x888>)
 8011546:	8912      	ldrh	r2, [r2, #8]
 8011548:	4611      	mov	r1, r2
 801154a:	4618      	mov	r0, r3
 801154c:	f7fc f876 	bl	800d63c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8011550:	4b45      	ldr	r3, [pc, #276]	@ (8011668 <tcp_receive+0x888>)
 8011552:	891c      	ldrh	r4, [r3, #8]
 8011554:	4b44      	ldr	r3, [pc, #272]	@ (8011668 <tcp_receive+0x888>)
 8011556:	68db      	ldr	r3, [r3, #12]
 8011558:	899b      	ldrh	r3, [r3, #12]
 801155a:	b29b      	uxth	r3, r3
 801155c:	4618      	mov	r0, r3
 801155e:	f7fa fbcb 	bl	800bcf8 <lwip_htons>
 8011562:	4603      	mov	r3, r0
 8011564:	b2db      	uxtb	r3, r3
 8011566:	f003 0303 	and.w	r3, r3, #3
 801156a:	2b00      	cmp	r3, #0
 801156c:	d001      	beq.n	8011572 <tcp_receive+0x792>
 801156e:	2301      	movs	r3, #1
 8011570:	e000      	b.n	8011574 <tcp_receive+0x794>
 8011572:	2300      	movs	r3, #0
 8011574:	4423      	add	r3, r4
 8011576:	b29a      	uxth	r2, r3
 8011578:	4b3c      	ldr	r3, [pc, #240]	@ (801166c <tcp_receive+0x88c>)
 801157a:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801157c:	4b3b      	ldr	r3, [pc, #236]	@ (801166c <tcp_receive+0x88c>)
 801157e:	881b      	ldrh	r3, [r3, #0]
 8011580:	461a      	mov	r2, r3
 8011582:	4b38      	ldr	r3, [pc, #224]	@ (8011664 <tcp_receive+0x884>)
 8011584:	681b      	ldr	r3, [r3, #0]
 8011586:	441a      	add	r2, r3
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801158c:	6879      	ldr	r1, [r7, #4]
 801158e:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8011590:	440b      	add	r3, r1
 8011592:	429a      	cmp	r2, r3
 8011594:	d006      	beq.n	80115a4 <tcp_receive+0x7c4>
 8011596:	4b36      	ldr	r3, [pc, #216]	@ (8011670 <tcp_receive+0x890>)
 8011598:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 801159c:	4935      	ldr	r1, [pc, #212]	@ (8011674 <tcp_receive+0x894>)
 801159e:	4836      	ldr	r0, [pc, #216]	@ (8011678 <tcp_receive+0x898>)
 80115a0:	f006 f81c 	bl	80175dc <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80115a8:	2b00      	cmp	r3, #0
 80115aa:	f000 80e6 	beq.w	801177a <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80115ae:	4b2e      	ldr	r3, [pc, #184]	@ (8011668 <tcp_receive+0x888>)
 80115b0:	68db      	ldr	r3, [r3, #12]
 80115b2:	899b      	ldrh	r3, [r3, #12]
 80115b4:	b29b      	uxth	r3, r3
 80115b6:	4618      	mov	r0, r3
 80115b8:	f7fa fb9e 	bl	800bcf8 <lwip_htons>
 80115bc:	4603      	mov	r3, r0
 80115be:	b2db      	uxtb	r3, r3
 80115c0:	f003 0301 	and.w	r3, r3, #1
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	d010      	beq.n	80115ea <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80115c8:	e00a      	b.n	80115e0 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80115ce:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80115d4:	681a      	ldr	r2, [r3, #0]
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 80115da:	68f8      	ldr	r0, [r7, #12]
 80115dc:	f7fd fd93 	bl	800f106 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80115e4:	2b00      	cmp	r3, #0
 80115e6:	d1f0      	bne.n	80115ca <tcp_receive+0x7ea>
 80115e8:	e0c7      	b.n	801177a <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80115ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80115f0:	e051      	b.n	8011696 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80115f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80115f4:	68db      	ldr	r3, [r3, #12]
 80115f6:	899b      	ldrh	r3, [r3, #12]
 80115f8:	b29b      	uxth	r3, r3
 80115fa:	4618      	mov	r0, r3
 80115fc:	f7fa fb7c 	bl	800bcf8 <lwip_htons>
 8011600:	4603      	mov	r3, r0
 8011602:	b2db      	uxtb	r3, r3
 8011604:	f003 0301 	and.w	r3, r3, #1
 8011608:	2b00      	cmp	r3, #0
 801160a:	d03c      	beq.n	8011686 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801160c:	4b16      	ldr	r3, [pc, #88]	@ (8011668 <tcp_receive+0x888>)
 801160e:	68db      	ldr	r3, [r3, #12]
 8011610:	899b      	ldrh	r3, [r3, #12]
 8011612:	b29b      	uxth	r3, r3
 8011614:	4618      	mov	r0, r3
 8011616:	f7fa fb6f 	bl	800bcf8 <lwip_htons>
 801161a:	4603      	mov	r3, r0
 801161c:	b2db      	uxtb	r3, r3
 801161e:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011622:	2b00      	cmp	r3, #0
 8011624:	d12f      	bne.n	8011686 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8011626:	4b10      	ldr	r3, [pc, #64]	@ (8011668 <tcp_receive+0x888>)
 8011628:	68db      	ldr	r3, [r3, #12]
 801162a:	899b      	ldrh	r3, [r3, #12]
 801162c:	b29c      	uxth	r4, r3
 801162e:	2001      	movs	r0, #1
 8011630:	f7fa fb62 	bl	800bcf8 <lwip_htons>
 8011634:	4603      	mov	r3, r0
 8011636:	461a      	mov	r2, r3
 8011638:	4b0b      	ldr	r3, [pc, #44]	@ (8011668 <tcp_receive+0x888>)
 801163a:	68db      	ldr	r3, [r3, #12]
 801163c:	4322      	orrs	r2, r4
 801163e:	b292      	uxth	r2, r2
 8011640:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8011642:	4b09      	ldr	r3, [pc, #36]	@ (8011668 <tcp_receive+0x888>)
 8011644:	891c      	ldrh	r4, [r3, #8]
 8011646:	4b08      	ldr	r3, [pc, #32]	@ (8011668 <tcp_receive+0x888>)
 8011648:	68db      	ldr	r3, [r3, #12]
 801164a:	899b      	ldrh	r3, [r3, #12]
 801164c:	b29b      	uxth	r3, r3
 801164e:	4618      	mov	r0, r3
 8011650:	f7fa fb52 	bl	800bcf8 <lwip_htons>
 8011654:	4603      	mov	r3, r0
 8011656:	b2db      	uxtb	r3, r3
 8011658:	f003 0303 	and.w	r3, r3, #3
 801165c:	2b00      	cmp	r3, #0
 801165e:	d00d      	beq.n	801167c <tcp_receive+0x89c>
 8011660:	2301      	movs	r3, #1
 8011662:	e00c      	b.n	801167e <tcp_receive+0x89e>
 8011664:	200151f0 	.word	0x200151f0
 8011668:	200151d0 	.word	0x200151d0
 801166c:	200151fa 	.word	0x200151fa
 8011670:	0802153c 	.word	0x0802153c
 8011674:	080218e4 	.word	0x080218e4
 8011678:	08021588 	.word	0x08021588
 801167c:	2300      	movs	r3, #0
 801167e:	4423      	add	r3, r4
 8011680:	b29a      	uxth	r2, r3
 8011682:	4b98      	ldr	r3, [pc, #608]	@ (80118e4 <tcp_receive+0xb04>)
 8011684:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8011686:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011688:	613b      	str	r3, [r7, #16]
              next = next->next;
 801168a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801168c:	681b      	ldr	r3, [r3, #0]
 801168e:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 8011690:	6938      	ldr	r0, [r7, #16]
 8011692:	f7fd fd38 	bl	800f106 <tcp_seg_free>
            while (next &&
 8011696:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011698:	2b00      	cmp	r3, #0
 801169a:	d00e      	beq.n	80116ba <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 801169c:	4b91      	ldr	r3, [pc, #580]	@ (80118e4 <tcp_receive+0xb04>)
 801169e:	881b      	ldrh	r3, [r3, #0]
 80116a0:	461a      	mov	r2, r3
 80116a2:	4b91      	ldr	r3, [pc, #580]	@ (80118e8 <tcp_receive+0xb08>)
 80116a4:	681b      	ldr	r3, [r3, #0]
 80116a6:	441a      	add	r2, r3
 80116a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80116aa:	68db      	ldr	r3, [r3, #12]
 80116ac:	685b      	ldr	r3, [r3, #4]
 80116ae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80116b0:	8909      	ldrh	r1, [r1, #8]
 80116b2:	440b      	add	r3, r1
 80116b4:	1ad3      	subs	r3, r2, r3
            while (next &&
 80116b6:	2b00      	cmp	r3, #0
 80116b8:	da9b      	bge.n	80115f2 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80116ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80116bc:	2b00      	cmp	r3, #0
 80116be:	d059      	beq.n	8011774 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 80116c0:	4b88      	ldr	r3, [pc, #544]	@ (80118e4 <tcp_receive+0xb04>)
 80116c2:	881b      	ldrh	r3, [r3, #0]
 80116c4:	461a      	mov	r2, r3
 80116c6:	4b88      	ldr	r3, [pc, #544]	@ (80118e8 <tcp_receive+0xb08>)
 80116c8:	681b      	ldr	r3, [r3, #0]
 80116ca:	441a      	add	r2, r3
 80116cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80116ce:	68db      	ldr	r3, [r3, #12]
 80116d0:	685b      	ldr	r3, [r3, #4]
 80116d2:	1ad3      	subs	r3, r2, r3
            if (next &&
 80116d4:	2b00      	cmp	r3, #0
 80116d6:	dd4d      	ble.n	8011774 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80116d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80116da:	68db      	ldr	r3, [r3, #12]
 80116dc:	685b      	ldr	r3, [r3, #4]
 80116de:	b29a      	uxth	r2, r3
 80116e0:	4b81      	ldr	r3, [pc, #516]	@ (80118e8 <tcp_receive+0xb08>)
 80116e2:	681b      	ldr	r3, [r3, #0]
 80116e4:	b29b      	uxth	r3, r3
 80116e6:	1ad3      	subs	r3, r2, r3
 80116e8:	b29a      	uxth	r2, r3
 80116ea:	4b80      	ldr	r3, [pc, #512]	@ (80118ec <tcp_receive+0xb0c>)
 80116ec:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80116ee:	4b7f      	ldr	r3, [pc, #508]	@ (80118ec <tcp_receive+0xb0c>)
 80116f0:	68db      	ldr	r3, [r3, #12]
 80116f2:	899b      	ldrh	r3, [r3, #12]
 80116f4:	b29b      	uxth	r3, r3
 80116f6:	4618      	mov	r0, r3
 80116f8:	f7fa fafe 	bl	800bcf8 <lwip_htons>
 80116fc:	4603      	mov	r3, r0
 80116fe:	b2db      	uxtb	r3, r3
 8011700:	f003 0302 	and.w	r3, r3, #2
 8011704:	2b00      	cmp	r3, #0
 8011706:	d005      	beq.n	8011714 <tcp_receive+0x934>
                inseg.len -= 1;
 8011708:	4b78      	ldr	r3, [pc, #480]	@ (80118ec <tcp_receive+0xb0c>)
 801170a:	891b      	ldrh	r3, [r3, #8]
 801170c:	3b01      	subs	r3, #1
 801170e:	b29a      	uxth	r2, r3
 8011710:	4b76      	ldr	r3, [pc, #472]	@ (80118ec <tcp_receive+0xb0c>)
 8011712:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8011714:	4b75      	ldr	r3, [pc, #468]	@ (80118ec <tcp_receive+0xb0c>)
 8011716:	685b      	ldr	r3, [r3, #4]
 8011718:	4a74      	ldr	r2, [pc, #464]	@ (80118ec <tcp_receive+0xb0c>)
 801171a:	8912      	ldrh	r2, [r2, #8]
 801171c:	4611      	mov	r1, r2
 801171e:	4618      	mov	r0, r3
 8011720:	f7fb ff8c 	bl	800d63c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8011724:	4b71      	ldr	r3, [pc, #452]	@ (80118ec <tcp_receive+0xb0c>)
 8011726:	891c      	ldrh	r4, [r3, #8]
 8011728:	4b70      	ldr	r3, [pc, #448]	@ (80118ec <tcp_receive+0xb0c>)
 801172a:	68db      	ldr	r3, [r3, #12]
 801172c:	899b      	ldrh	r3, [r3, #12]
 801172e:	b29b      	uxth	r3, r3
 8011730:	4618      	mov	r0, r3
 8011732:	f7fa fae1 	bl	800bcf8 <lwip_htons>
 8011736:	4603      	mov	r3, r0
 8011738:	b2db      	uxtb	r3, r3
 801173a:	f003 0303 	and.w	r3, r3, #3
 801173e:	2b00      	cmp	r3, #0
 8011740:	d001      	beq.n	8011746 <tcp_receive+0x966>
 8011742:	2301      	movs	r3, #1
 8011744:	e000      	b.n	8011748 <tcp_receive+0x968>
 8011746:	2300      	movs	r3, #0
 8011748:	4423      	add	r3, r4
 801174a:	b29a      	uxth	r2, r3
 801174c:	4b65      	ldr	r3, [pc, #404]	@ (80118e4 <tcp_receive+0xb04>)
 801174e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8011750:	4b64      	ldr	r3, [pc, #400]	@ (80118e4 <tcp_receive+0xb04>)
 8011752:	881b      	ldrh	r3, [r3, #0]
 8011754:	461a      	mov	r2, r3
 8011756:	4b64      	ldr	r3, [pc, #400]	@ (80118e8 <tcp_receive+0xb08>)
 8011758:	681b      	ldr	r3, [r3, #0]
 801175a:	441a      	add	r2, r3
 801175c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801175e:	68db      	ldr	r3, [r3, #12]
 8011760:	685b      	ldr	r3, [r3, #4]
 8011762:	429a      	cmp	r2, r3
 8011764:	d006      	beq.n	8011774 <tcp_receive+0x994>
 8011766:	4b62      	ldr	r3, [pc, #392]	@ (80118f0 <tcp_receive+0xb10>)
 8011768:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 801176c:	4961      	ldr	r1, [pc, #388]	@ (80118f4 <tcp_receive+0xb14>)
 801176e:	4862      	ldr	r0, [pc, #392]	@ (80118f8 <tcp_receive+0xb18>)
 8011770:	f005 ff34 	bl	80175dc <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8011778:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801177a:	4b5a      	ldr	r3, [pc, #360]	@ (80118e4 <tcp_receive+0xb04>)
 801177c:	881b      	ldrh	r3, [r3, #0]
 801177e:	461a      	mov	r2, r3
 8011780:	4b59      	ldr	r3, [pc, #356]	@ (80118e8 <tcp_receive+0xb08>)
 8011782:	681b      	ldr	r3, [r3, #0]
 8011784:	441a      	add	r2, r3
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801178e:	4b55      	ldr	r3, [pc, #340]	@ (80118e4 <tcp_receive+0xb04>)
 8011790:	881b      	ldrh	r3, [r3, #0]
 8011792:	429a      	cmp	r2, r3
 8011794:	d206      	bcs.n	80117a4 <tcp_receive+0x9c4>
 8011796:	4b56      	ldr	r3, [pc, #344]	@ (80118f0 <tcp_receive+0xb10>)
 8011798:	f240 6207 	movw	r2, #1543	@ 0x607
 801179c:	4957      	ldr	r1, [pc, #348]	@ (80118fc <tcp_receive+0xb1c>)
 801179e:	4856      	ldr	r0, [pc, #344]	@ (80118f8 <tcp_receive+0xb18>)
 80117a0:	f005 ff1c 	bl	80175dc <iprintf>
        pcb->rcv_wnd -= tcplen;
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80117a8:	4b4e      	ldr	r3, [pc, #312]	@ (80118e4 <tcp_receive+0xb04>)
 80117aa:	881b      	ldrh	r3, [r3, #0]
 80117ac:	1ad3      	subs	r3, r2, r3
 80117ae:	b29a      	uxth	r2, r3
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80117b4:	6878      	ldr	r0, [r7, #4]
 80117b6:	f7fc ffc5 	bl	800e744 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80117ba:	4b4c      	ldr	r3, [pc, #304]	@ (80118ec <tcp_receive+0xb0c>)
 80117bc:	685b      	ldr	r3, [r3, #4]
 80117be:	891b      	ldrh	r3, [r3, #8]
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	d006      	beq.n	80117d2 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 80117c4:	4b49      	ldr	r3, [pc, #292]	@ (80118ec <tcp_receive+0xb0c>)
 80117c6:	685b      	ldr	r3, [r3, #4]
 80117c8:	4a4d      	ldr	r2, [pc, #308]	@ (8011900 <tcp_receive+0xb20>)
 80117ca:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80117cc:	4b47      	ldr	r3, [pc, #284]	@ (80118ec <tcp_receive+0xb0c>)
 80117ce:	2200      	movs	r2, #0
 80117d0:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80117d2:	4b46      	ldr	r3, [pc, #280]	@ (80118ec <tcp_receive+0xb0c>)
 80117d4:	68db      	ldr	r3, [r3, #12]
 80117d6:	899b      	ldrh	r3, [r3, #12]
 80117d8:	b29b      	uxth	r3, r3
 80117da:	4618      	mov	r0, r3
 80117dc:	f7fa fa8c 	bl	800bcf8 <lwip_htons>
 80117e0:	4603      	mov	r3, r0
 80117e2:	b2db      	uxtb	r3, r3
 80117e4:	f003 0301 	and.w	r3, r3, #1
 80117e8:	2b00      	cmp	r3, #0
 80117ea:	f000 80b8 	beq.w	801195e <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80117ee:	4b45      	ldr	r3, [pc, #276]	@ (8011904 <tcp_receive+0xb24>)
 80117f0:	781b      	ldrb	r3, [r3, #0]
 80117f2:	f043 0320 	orr.w	r3, r3, #32
 80117f6:	b2da      	uxtb	r2, r3
 80117f8:	4b42      	ldr	r3, [pc, #264]	@ (8011904 <tcp_receive+0xb24>)
 80117fa:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80117fc:	e0af      	b.n	801195e <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011802:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011808:	68db      	ldr	r3, [r3, #12]
 801180a:	685b      	ldr	r3, [r3, #4]
 801180c:	4a36      	ldr	r2, [pc, #216]	@ (80118e8 <tcp_receive+0xb08>)
 801180e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8011810:	68bb      	ldr	r3, [r7, #8]
 8011812:	891b      	ldrh	r3, [r3, #8]
 8011814:	461c      	mov	r4, r3
 8011816:	68bb      	ldr	r3, [r7, #8]
 8011818:	68db      	ldr	r3, [r3, #12]
 801181a:	899b      	ldrh	r3, [r3, #12]
 801181c:	b29b      	uxth	r3, r3
 801181e:	4618      	mov	r0, r3
 8011820:	f7fa fa6a 	bl	800bcf8 <lwip_htons>
 8011824:	4603      	mov	r3, r0
 8011826:	b2db      	uxtb	r3, r3
 8011828:	f003 0303 	and.w	r3, r3, #3
 801182c:	2b00      	cmp	r3, #0
 801182e:	d001      	beq.n	8011834 <tcp_receive+0xa54>
 8011830:	2301      	movs	r3, #1
 8011832:	e000      	b.n	8011836 <tcp_receive+0xa56>
 8011834:	2300      	movs	r3, #0
 8011836:	191a      	adds	r2, r3, r4
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801183c:	441a      	add	r2, r3
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011846:	461c      	mov	r4, r3
 8011848:	68bb      	ldr	r3, [r7, #8]
 801184a:	891b      	ldrh	r3, [r3, #8]
 801184c:	461d      	mov	r5, r3
 801184e:	68bb      	ldr	r3, [r7, #8]
 8011850:	68db      	ldr	r3, [r3, #12]
 8011852:	899b      	ldrh	r3, [r3, #12]
 8011854:	b29b      	uxth	r3, r3
 8011856:	4618      	mov	r0, r3
 8011858:	f7fa fa4e 	bl	800bcf8 <lwip_htons>
 801185c:	4603      	mov	r3, r0
 801185e:	b2db      	uxtb	r3, r3
 8011860:	f003 0303 	and.w	r3, r3, #3
 8011864:	2b00      	cmp	r3, #0
 8011866:	d001      	beq.n	801186c <tcp_receive+0xa8c>
 8011868:	2301      	movs	r3, #1
 801186a:	e000      	b.n	801186e <tcp_receive+0xa8e>
 801186c:	2300      	movs	r3, #0
 801186e:	442b      	add	r3, r5
 8011870:	429c      	cmp	r4, r3
 8011872:	d206      	bcs.n	8011882 <tcp_receive+0xaa2>
 8011874:	4b1e      	ldr	r3, [pc, #120]	@ (80118f0 <tcp_receive+0xb10>)
 8011876:	f240 622b 	movw	r2, #1579	@ 0x62b
 801187a:	4923      	ldr	r1, [pc, #140]	@ (8011908 <tcp_receive+0xb28>)
 801187c:	481e      	ldr	r0, [pc, #120]	@ (80118f8 <tcp_receive+0xb18>)
 801187e:	f005 fead 	bl	80175dc <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8011882:	68bb      	ldr	r3, [r7, #8]
 8011884:	891b      	ldrh	r3, [r3, #8]
 8011886:	461c      	mov	r4, r3
 8011888:	68bb      	ldr	r3, [r7, #8]
 801188a:	68db      	ldr	r3, [r3, #12]
 801188c:	899b      	ldrh	r3, [r3, #12]
 801188e:	b29b      	uxth	r3, r3
 8011890:	4618      	mov	r0, r3
 8011892:	f7fa fa31 	bl	800bcf8 <lwip_htons>
 8011896:	4603      	mov	r3, r0
 8011898:	b2db      	uxtb	r3, r3
 801189a:	f003 0303 	and.w	r3, r3, #3
 801189e:	2b00      	cmp	r3, #0
 80118a0:	d001      	beq.n	80118a6 <tcp_receive+0xac6>
 80118a2:	2301      	movs	r3, #1
 80118a4:	e000      	b.n	80118a8 <tcp_receive+0xac8>
 80118a6:	2300      	movs	r3, #0
 80118a8:	1919      	adds	r1, r3, r4
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80118ae:	b28b      	uxth	r3, r1
 80118b0:	1ad3      	subs	r3, r2, r3
 80118b2:	b29a      	uxth	r2, r3
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80118b8:	6878      	ldr	r0, [r7, #4]
 80118ba:	f7fc ff43 	bl	800e744 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80118be:	68bb      	ldr	r3, [r7, #8]
 80118c0:	685b      	ldr	r3, [r3, #4]
 80118c2:	891b      	ldrh	r3, [r3, #8]
 80118c4:	2b00      	cmp	r3, #0
 80118c6:	d028      	beq.n	801191a <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80118c8:	4b0d      	ldr	r3, [pc, #52]	@ (8011900 <tcp_receive+0xb20>)
 80118ca:	681b      	ldr	r3, [r3, #0]
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	d01d      	beq.n	801190c <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 80118d0:	4b0b      	ldr	r3, [pc, #44]	@ (8011900 <tcp_receive+0xb20>)
 80118d2:	681a      	ldr	r2, [r3, #0]
 80118d4:	68bb      	ldr	r3, [r7, #8]
 80118d6:	685b      	ldr	r3, [r3, #4]
 80118d8:	4619      	mov	r1, r3
 80118da:	4610      	mov	r0, r2
 80118dc:	f7fc f8f6 	bl	800dacc <pbuf_cat>
 80118e0:	e018      	b.n	8011914 <tcp_receive+0xb34>
 80118e2:	bf00      	nop
 80118e4:	200151fa 	.word	0x200151fa
 80118e8:	200151f0 	.word	0x200151f0
 80118ec:	200151d0 	.word	0x200151d0
 80118f0:	0802153c 	.word	0x0802153c
 80118f4:	0802191c 	.word	0x0802191c
 80118f8:	08021588 	.word	0x08021588
 80118fc:	08021958 	.word	0x08021958
 8011900:	20015200 	.word	0x20015200
 8011904:	200151fd 	.word	0x200151fd
 8011908:	08021978 	.word	0x08021978
            } else {
              recv_data = cseg->p;
 801190c:	68bb      	ldr	r3, [r7, #8]
 801190e:	685b      	ldr	r3, [r3, #4]
 8011910:	4a70      	ldr	r2, [pc, #448]	@ (8011ad4 <tcp_receive+0xcf4>)
 8011912:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8011914:	68bb      	ldr	r3, [r7, #8]
 8011916:	2200      	movs	r2, #0
 8011918:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801191a:	68bb      	ldr	r3, [r7, #8]
 801191c:	68db      	ldr	r3, [r3, #12]
 801191e:	899b      	ldrh	r3, [r3, #12]
 8011920:	b29b      	uxth	r3, r3
 8011922:	4618      	mov	r0, r3
 8011924:	f7fa f9e8 	bl	800bcf8 <lwip_htons>
 8011928:	4603      	mov	r3, r0
 801192a:	b2db      	uxtb	r3, r3
 801192c:	f003 0301 	and.w	r3, r3, #1
 8011930:	2b00      	cmp	r3, #0
 8011932:	d00d      	beq.n	8011950 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8011934:	4b68      	ldr	r3, [pc, #416]	@ (8011ad8 <tcp_receive+0xcf8>)
 8011936:	781b      	ldrb	r3, [r3, #0]
 8011938:	f043 0320 	orr.w	r3, r3, #32
 801193c:	b2da      	uxtb	r2, r3
 801193e:	4b66      	ldr	r3, [pc, #408]	@ (8011ad8 <tcp_receive+0xcf8>)
 8011940:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	7d1b      	ldrb	r3, [r3, #20]
 8011946:	2b04      	cmp	r3, #4
 8011948:	d102      	bne.n	8011950 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	2207      	movs	r2, #7
 801194e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8011950:	68bb      	ldr	r3, [r7, #8]
 8011952:	681a      	ldr	r2, [r3, #0]
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 8011958:	68b8      	ldr	r0, [r7, #8]
 801195a:	f7fd fbd4 	bl	800f106 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011962:	2b00      	cmp	r3, #0
 8011964:	d008      	beq.n	8011978 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801196a:	68db      	ldr	r3, [r3, #12]
 801196c:	685a      	ldr	r2, [r3, #4]
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 8011972:	429a      	cmp	r2, r3
 8011974:	f43f af43 	beq.w	80117fe <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	8b5b      	ldrh	r3, [r3, #26]
 801197c:	f003 0301 	and.w	r3, r3, #1
 8011980:	2b00      	cmp	r3, #0
 8011982:	d00e      	beq.n	80119a2 <tcp_receive+0xbc2>
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	8b5b      	ldrh	r3, [r3, #26]
 8011988:	f023 0301 	bic.w	r3, r3, #1
 801198c:	b29a      	uxth	r2, r3
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	835a      	strh	r2, [r3, #26]
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	8b5b      	ldrh	r3, [r3, #26]
 8011996:	f043 0302 	orr.w	r3, r3, #2
 801199a:	b29a      	uxth	r2, r3
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80119a0:	e187      	b.n	8011cb2 <tcp_receive+0xed2>
        tcp_ack(pcb);
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	8b5b      	ldrh	r3, [r3, #26]
 80119a6:	f043 0301 	orr.w	r3, r3, #1
 80119aa:	b29a      	uxth	r2, r3
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80119b0:	e17f      	b.n	8011cb2 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80119b6:	2b00      	cmp	r3, #0
 80119b8:	d106      	bne.n	80119c8 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80119ba:	4848      	ldr	r0, [pc, #288]	@ (8011adc <tcp_receive+0xcfc>)
 80119bc:	f7fd fbbc 	bl	800f138 <tcp_seg_copy>
 80119c0:	4602      	mov	r2, r0
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	675a      	str	r2, [r3, #116]	@ 0x74
 80119c6:	e16c      	b.n	8011ca2 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80119c8:	2300      	movs	r3, #0
 80119ca:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80119d0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80119d2:	e156      	b.n	8011c82 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 80119d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80119d6:	68db      	ldr	r3, [r3, #12]
 80119d8:	685a      	ldr	r2, [r3, #4]
 80119da:	4b41      	ldr	r3, [pc, #260]	@ (8011ae0 <tcp_receive+0xd00>)
 80119dc:	681b      	ldr	r3, [r3, #0]
 80119de:	429a      	cmp	r2, r3
 80119e0:	d11d      	bne.n	8011a1e <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80119e2:	4b3e      	ldr	r3, [pc, #248]	@ (8011adc <tcp_receive+0xcfc>)
 80119e4:	891a      	ldrh	r2, [r3, #8]
 80119e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80119e8:	891b      	ldrh	r3, [r3, #8]
 80119ea:	429a      	cmp	r2, r3
 80119ec:	f240 814e 	bls.w	8011c8c <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80119f0:	483a      	ldr	r0, [pc, #232]	@ (8011adc <tcp_receive+0xcfc>)
 80119f2:	f7fd fba1 	bl	800f138 <tcp_seg_copy>
 80119f6:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80119f8:	697b      	ldr	r3, [r7, #20]
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	f000 8148 	beq.w	8011c90 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 8011a00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	d003      	beq.n	8011a0e <tcp_receive+0xc2e>
                    prev->next = cseg;
 8011a06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011a08:	697a      	ldr	r2, [r7, #20]
 8011a0a:	601a      	str	r2, [r3, #0]
 8011a0c:	e002      	b.n	8011a14 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	697a      	ldr	r2, [r7, #20]
 8011a12:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8011a14:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8011a16:	6978      	ldr	r0, [r7, #20]
 8011a18:	f7ff f8de 	bl	8010bd8 <tcp_oos_insert_segment>
                }
                break;
 8011a1c:	e138      	b.n	8011c90 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8011a1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	d117      	bne.n	8011a54 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8011a24:	4b2e      	ldr	r3, [pc, #184]	@ (8011ae0 <tcp_receive+0xd00>)
 8011a26:	681a      	ldr	r2, [r3, #0]
 8011a28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a2a:	68db      	ldr	r3, [r3, #12]
 8011a2c:	685b      	ldr	r3, [r3, #4]
 8011a2e:	1ad3      	subs	r3, r2, r3
 8011a30:	2b00      	cmp	r3, #0
 8011a32:	da57      	bge.n	8011ae4 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011a34:	4829      	ldr	r0, [pc, #164]	@ (8011adc <tcp_receive+0xcfc>)
 8011a36:	f7fd fb7f 	bl	800f138 <tcp_seg_copy>
 8011a3a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8011a3c:	69bb      	ldr	r3, [r7, #24]
 8011a3e:	2b00      	cmp	r3, #0
 8011a40:	f000 8128 	beq.w	8011c94 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	69ba      	ldr	r2, [r7, #24]
 8011a48:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 8011a4a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8011a4c:	69b8      	ldr	r0, [r7, #24]
 8011a4e:	f7ff f8c3 	bl	8010bd8 <tcp_oos_insert_segment>
                  }
                  break;
 8011a52:	e11f      	b.n	8011c94 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8011a54:	4b22      	ldr	r3, [pc, #136]	@ (8011ae0 <tcp_receive+0xd00>)
 8011a56:	681a      	ldr	r2, [r3, #0]
 8011a58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011a5a:	68db      	ldr	r3, [r3, #12]
 8011a5c:	685b      	ldr	r3, [r3, #4]
 8011a5e:	1ad3      	subs	r3, r2, r3
 8011a60:	3b01      	subs	r3, #1
 8011a62:	2b00      	cmp	r3, #0
 8011a64:	db3e      	blt.n	8011ae4 <tcp_receive+0xd04>
 8011a66:	4b1e      	ldr	r3, [pc, #120]	@ (8011ae0 <tcp_receive+0xd00>)
 8011a68:	681a      	ldr	r2, [r3, #0]
 8011a6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a6c:	68db      	ldr	r3, [r3, #12]
 8011a6e:	685b      	ldr	r3, [r3, #4]
 8011a70:	1ad3      	subs	r3, r2, r3
 8011a72:	3301      	adds	r3, #1
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	dc35      	bgt.n	8011ae4 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011a78:	4818      	ldr	r0, [pc, #96]	@ (8011adc <tcp_receive+0xcfc>)
 8011a7a:	f7fd fb5d 	bl	800f138 <tcp_seg_copy>
 8011a7e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8011a80:	69fb      	ldr	r3, [r7, #28]
 8011a82:	2b00      	cmp	r3, #0
 8011a84:	f000 8108 	beq.w	8011c98 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8011a88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011a8a:	68db      	ldr	r3, [r3, #12]
 8011a8c:	685b      	ldr	r3, [r3, #4]
 8011a8e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011a90:	8912      	ldrh	r2, [r2, #8]
 8011a92:	441a      	add	r2, r3
 8011a94:	4b12      	ldr	r3, [pc, #72]	@ (8011ae0 <tcp_receive+0xd00>)
 8011a96:	681b      	ldr	r3, [r3, #0]
 8011a98:	1ad3      	subs	r3, r2, r3
 8011a9a:	2b00      	cmp	r3, #0
 8011a9c:	dd12      	ble.n	8011ac4 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8011a9e:	4b10      	ldr	r3, [pc, #64]	@ (8011ae0 <tcp_receive+0xd00>)
 8011aa0:	681b      	ldr	r3, [r3, #0]
 8011aa2:	b29a      	uxth	r2, r3
 8011aa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011aa6:	68db      	ldr	r3, [r3, #12]
 8011aa8:	685b      	ldr	r3, [r3, #4]
 8011aaa:	b29b      	uxth	r3, r3
 8011aac:	1ad3      	subs	r3, r2, r3
 8011aae:	b29a      	uxth	r2, r3
 8011ab0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011ab2:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8011ab4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011ab6:	685a      	ldr	r2, [r3, #4]
 8011ab8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011aba:	891b      	ldrh	r3, [r3, #8]
 8011abc:	4619      	mov	r1, r3
 8011abe:	4610      	mov	r0, r2
 8011ac0:	f7fb fdbc 	bl	800d63c <pbuf_realloc>
                    }
                    prev->next = cseg;
 8011ac4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011ac6:	69fa      	ldr	r2, [r7, #28]
 8011ac8:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8011aca:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8011acc:	69f8      	ldr	r0, [r7, #28]
 8011ace:	f7ff f883 	bl	8010bd8 <tcp_oos_insert_segment>
                  }
                  break;
 8011ad2:	e0e1      	b.n	8011c98 <tcp_receive+0xeb8>
 8011ad4:	20015200 	.word	0x20015200
 8011ad8:	200151fd 	.word	0x200151fd
 8011adc:	200151d0 	.word	0x200151d0
 8011ae0:	200151f0 	.word	0x200151f0
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8011ae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011ae6:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8011ae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011aea:	681b      	ldr	r3, [r3, #0]
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	f040 80c5 	bne.w	8011c7c <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8011af2:	4b7f      	ldr	r3, [pc, #508]	@ (8011cf0 <tcp_receive+0xf10>)
 8011af4:	681a      	ldr	r2, [r3, #0]
 8011af6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011af8:	68db      	ldr	r3, [r3, #12]
 8011afa:	685b      	ldr	r3, [r3, #4]
 8011afc:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8011afe:	2b00      	cmp	r3, #0
 8011b00:	f340 80bc 	ble.w	8011c7c <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8011b04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b06:	68db      	ldr	r3, [r3, #12]
 8011b08:	899b      	ldrh	r3, [r3, #12]
 8011b0a:	b29b      	uxth	r3, r3
 8011b0c:	4618      	mov	r0, r3
 8011b0e:	f7fa f8f3 	bl	800bcf8 <lwip_htons>
 8011b12:	4603      	mov	r3, r0
 8011b14:	b2db      	uxtb	r3, r3
 8011b16:	f003 0301 	and.w	r3, r3, #1
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	f040 80be 	bne.w	8011c9c <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8011b20:	4874      	ldr	r0, [pc, #464]	@ (8011cf4 <tcp_receive+0xf14>)
 8011b22:	f7fd fb09 	bl	800f138 <tcp_seg_copy>
 8011b26:	4602      	mov	r2, r0
 8011b28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b2a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8011b2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b2e:	681b      	ldr	r3, [r3, #0]
 8011b30:	2b00      	cmp	r3, #0
 8011b32:	f000 80b5 	beq.w	8011ca0 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8011b36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b38:	68db      	ldr	r3, [r3, #12]
 8011b3a:	685b      	ldr	r3, [r3, #4]
 8011b3c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011b3e:	8912      	ldrh	r2, [r2, #8]
 8011b40:	441a      	add	r2, r3
 8011b42:	4b6b      	ldr	r3, [pc, #428]	@ (8011cf0 <tcp_receive+0xf10>)
 8011b44:	681b      	ldr	r3, [r3, #0]
 8011b46:	1ad3      	subs	r3, r2, r3
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	dd12      	ble.n	8011b72 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8011b4c:	4b68      	ldr	r3, [pc, #416]	@ (8011cf0 <tcp_receive+0xf10>)
 8011b4e:	681b      	ldr	r3, [r3, #0]
 8011b50:	b29a      	uxth	r2, r3
 8011b52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b54:	68db      	ldr	r3, [r3, #12]
 8011b56:	685b      	ldr	r3, [r3, #4]
 8011b58:	b29b      	uxth	r3, r3
 8011b5a:	1ad3      	subs	r3, r2, r3
 8011b5c:	b29a      	uxth	r2, r3
 8011b5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b60:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8011b62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b64:	685a      	ldr	r2, [r3, #4]
 8011b66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b68:	891b      	ldrh	r3, [r3, #8]
 8011b6a:	4619      	mov	r1, r3
 8011b6c:	4610      	mov	r0, r2
 8011b6e:	f7fb fd65 	bl	800d63c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8011b72:	4b61      	ldr	r3, [pc, #388]	@ (8011cf8 <tcp_receive+0xf18>)
 8011b74:	881b      	ldrh	r3, [r3, #0]
 8011b76:	461a      	mov	r2, r3
 8011b78:	4b5d      	ldr	r3, [pc, #372]	@ (8011cf0 <tcp_receive+0xf10>)
 8011b7a:	681b      	ldr	r3, [r3, #0]
 8011b7c:	441a      	add	r2, r3
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011b82:	6879      	ldr	r1, [r7, #4]
 8011b84:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8011b86:	440b      	add	r3, r1
 8011b88:	1ad3      	subs	r3, r2, r3
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	f340 8088 	ble.w	8011ca0 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8011b90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b92:	681b      	ldr	r3, [r3, #0]
 8011b94:	68db      	ldr	r3, [r3, #12]
 8011b96:	899b      	ldrh	r3, [r3, #12]
 8011b98:	b29b      	uxth	r3, r3
 8011b9a:	4618      	mov	r0, r3
 8011b9c:	f7fa f8ac 	bl	800bcf8 <lwip_htons>
 8011ba0:	4603      	mov	r3, r0
 8011ba2:	b2db      	uxtb	r3, r3
 8011ba4:	f003 0301 	and.w	r3, r3, #1
 8011ba8:	2b00      	cmp	r3, #0
 8011baa:	d021      	beq.n	8011bf0 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8011bac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011bae:	681b      	ldr	r3, [r3, #0]
 8011bb0:	68db      	ldr	r3, [r3, #12]
 8011bb2:	899b      	ldrh	r3, [r3, #12]
 8011bb4:	b29b      	uxth	r3, r3
 8011bb6:	b21b      	sxth	r3, r3
 8011bb8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8011bbc:	b21c      	sxth	r4, r3
 8011bbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011bc0:	681b      	ldr	r3, [r3, #0]
 8011bc2:	68db      	ldr	r3, [r3, #12]
 8011bc4:	899b      	ldrh	r3, [r3, #12]
 8011bc6:	b29b      	uxth	r3, r3
 8011bc8:	4618      	mov	r0, r3
 8011bca:	f7fa f895 	bl	800bcf8 <lwip_htons>
 8011bce:	4603      	mov	r3, r0
 8011bd0:	b2db      	uxtb	r3, r3
 8011bd2:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8011bd6:	b29b      	uxth	r3, r3
 8011bd8:	4618      	mov	r0, r3
 8011bda:	f7fa f88d 	bl	800bcf8 <lwip_htons>
 8011bde:	4603      	mov	r3, r0
 8011be0:	b21b      	sxth	r3, r3
 8011be2:	4323      	orrs	r3, r4
 8011be4:	b21a      	sxth	r2, r3
 8011be6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011be8:	681b      	ldr	r3, [r3, #0]
 8011bea:	68db      	ldr	r3, [r3, #12]
 8011bec:	b292      	uxth	r2, r2
 8011bee:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011bf4:	b29a      	uxth	r2, r3
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011bfa:	4413      	add	r3, r2
 8011bfc:	b299      	uxth	r1, r3
 8011bfe:	4b3c      	ldr	r3, [pc, #240]	@ (8011cf0 <tcp_receive+0xf10>)
 8011c00:	681b      	ldr	r3, [r3, #0]
 8011c02:	b29a      	uxth	r2, r3
 8011c04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c06:	681b      	ldr	r3, [r3, #0]
 8011c08:	1a8a      	subs	r2, r1, r2
 8011c0a:	b292      	uxth	r2, r2
 8011c0c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8011c0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c10:	681b      	ldr	r3, [r3, #0]
 8011c12:	685a      	ldr	r2, [r3, #4]
 8011c14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c16:	681b      	ldr	r3, [r3, #0]
 8011c18:	891b      	ldrh	r3, [r3, #8]
 8011c1a:	4619      	mov	r1, r3
 8011c1c:	4610      	mov	r0, r2
 8011c1e:	f7fb fd0d 	bl	800d63c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8011c22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c24:	681b      	ldr	r3, [r3, #0]
 8011c26:	891c      	ldrh	r4, [r3, #8]
 8011c28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c2a:	681b      	ldr	r3, [r3, #0]
 8011c2c:	68db      	ldr	r3, [r3, #12]
 8011c2e:	899b      	ldrh	r3, [r3, #12]
 8011c30:	b29b      	uxth	r3, r3
 8011c32:	4618      	mov	r0, r3
 8011c34:	f7fa f860 	bl	800bcf8 <lwip_htons>
 8011c38:	4603      	mov	r3, r0
 8011c3a:	b2db      	uxtb	r3, r3
 8011c3c:	f003 0303 	and.w	r3, r3, #3
 8011c40:	2b00      	cmp	r3, #0
 8011c42:	d001      	beq.n	8011c48 <tcp_receive+0xe68>
 8011c44:	2301      	movs	r3, #1
 8011c46:	e000      	b.n	8011c4a <tcp_receive+0xe6a>
 8011c48:	2300      	movs	r3, #0
 8011c4a:	4423      	add	r3, r4
 8011c4c:	b29a      	uxth	r2, r3
 8011c4e:	4b2a      	ldr	r3, [pc, #168]	@ (8011cf8 <tcp_receive+0xf18>)
 8011c50:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011c52:	4b29      	ldr	r3, [pc, #164]	@ (8011cf8 <tcp_receive+0xf18>)
 8011c54:	881b      	ldrh	r3, [r3, #0]
 8011c56:	461a      	mov	r2, r3
 8011c58:	4b25      	ldr	r3, [pc, #148]	@ (8011cf0 <tcp_receive+0xf10>)
 8011c5a:	681b      	ldr	r3, [r3, #0]
 8011c5c:	441a      	add	r2, r3
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011c62:	6879      	ldr	r1, [r7, #4]
 8011c64:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8011c66:	440b      	add	r3, r1
 8011c68:	429a      	cmp	r2, r3
 8011c6a:	d019      	beq.n	8011ca0 <tcp_receive+0xec0>
 8011c6c:	4b23      	ldr	r3, [pc, #140]	@ (8011cfc <tcp_receive+0xf1c>)
 8011c6e:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 8011c72:	4923      	ldr	r1, [pc, #140]	@ (8011d00 <tcp_receive+0xf20>)
 8011c74:	4823      	ldr	r0, [pc, #140]	@ (8011d04 <tcp_receive+0xf24>)
 8011c76:	f005 fcb1 	bl	80175dc <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8011c7a:	e011      	b.n	8011ca0 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011c7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c7e:	681b      	ldr	r3, [r3, #0]
 8011c80:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011c82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c84:	2b00      	cmp	r3, #0
 8011c86:	f47f aea5 	bne.w	80119d4 <tcp_receive+0xbf4>
 8011c8a:	e00a      	b.n	8011ca2 <tcp_receive+0xec2>
                break;
 8011c8c:	bf00      	nop
 8011c8e:	e008      	b.n	8011ca2 <tcp_receive+0xec2>
                break;
 8011c90:	bf00      	nop
 8011c92:	e006      	b.n	8011ca2 <tcp_receive+0xec2>
                  break;
 8011c94:	bf00      	nop
 8011c96:	e004      	b.n	8011ca2 <tcp_receive+0xec2>
                  break;
 8011c98:	bf00      	nop
 8011c9a:	e002      	b.n	8011ca2 <tcp_receive+0xec2>
                  break;
 8011c9c:	bf00      	nop
 8011c9e:	e000      	b.n	8011ca2 <tcp_receive+0xec2>
                break;
 8011ca0:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8011ca2:	6878      	ldr	r0, [r7, #4]
 8011ca4:	f001 fa30 	bl	8013108 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8011ca8:	e003      	b.n	8011cb2 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8011caa:	6878      	ldr	r0, [r7, #4]
 8011cac:	f001 fa2c 	bl	8013108 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011cb0:	e01a      	b.n	8011ce8 <tcp_receive+0xf08>
 8011cb2:	e019      	b.n	8011ce8 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8011cb4:	4b0e      	ldr	r3, [pc, #56]	@ (8011cf0 <tcp_receive+0xf10>)
 8011cb6:	681a      	ldr	r2, [r3, #0]
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011cbc:	1ad3      	subs	r3, r2, r3
 8011cbe:	2b00      	cmp	r3, #0
 8011cc0:	db0a      	blt.n	8011cd8 <tcp_receive+0xef8>
 8011cc2:	4b0b      	ldr	r3, [pc, #44]	@ (8011cf0 <tcp_receive+0xf10>)
 8011cc4:	681a      	ldr	r2, [r3, #0]
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011cca:	6879      	ldr	r1, [r7, #4]
 8011ccc:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8011cce:	440b      	add	r3, r1
 8011cd0:	1ad3      	subs	r3, r2, r3
 8011cd2:	3301      	adds	r3, #1
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	dd07      	ble.n	8011ce8 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	8b5b      	ldrh	r3, [r3, #26]
 8011cdc:	f043 0302 	orr.w	r3, r3, #2
 8011ce0:	b29a      	uxth	r2, r3
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8011ce6:	e7ff      	b.n	8011ce8 <tcp_receive+0xf08>
 8011ce8:	bf00      	nop
 8011cea:	3750      	adds	r7, #80	@ 0x50
 8011cec:	46bd      	mov	sp, r7
 8011cee:	bdb0      	pop	{r4, r5, r7, pc}
 8011cf0:	200151f0 	.word	0x200151f0
 8011cf4:	200151d0 	.word	0x200151d0
 8011cf8:	200151fa 	.word	0x200151fa
 8011cfc:	0802153c 	.word	0x0802153c
 8011d00:	080218e4 	.word	0x080218e4
 8011d04:	08021588 	.word	0x08021588

08011d08 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8011d08:	b480      	push	{r7}
 8011d0a:	b083      	sub	sp, #12
 8011d0c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8011d0e:	4b15      	ldr	r3, [pc, #84]	@ (8011d64 <tcp_get_next_optbyte+0x5c>)
 8011d10:	881b      	ldrh	r3, [r3, #0]
 8011d12:	1c5a      	adds	r2, r3, #1
 8011d14:	b291      	uxth	r1, r2
 8011d16:	4a13      	ldr	r2, [pc, #76]	@ (8011d64 <tcp_get_next_optbyte+0x5c>)
 8011d18:	8011      	strh	r1, [r2, #0]
 8011d1a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8011d1c:	4b12      	ldr	r3, [pc, #72]	@ (8011d68 <tcp_get_next_optbyte+0x60>)
 8011d1e:	681b      	ldr	r3, [r3, #0]
 8011d20:	2b00      	cmp	r3, #0
 8011d22:	d004      	beq.n	8011d2e <tcp_get_next_optbyte+0x26>
 8011d24:	4b11      	ldr	r3, [pc, #68]	@ (8011d6c <tcp_get_next_optbyte+0x64>)
 8011d26:	881b      	ldrh	r3, [r3, #0]
 8011d28:	88fa      	ldrh	r2, [r7, #6]
 8011d2a:	429a      	cmp	r2, r3
 8011d2c:	d208      	bcs.n	8011d40 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8011d2e:	4b10      	ldr	r3, [pc, #64]	@ (8011d70 <tcp_get_next_optbyte+0x68>)
 8011d30:	681b      	ldr	r3, [r3, #0]
 8011d32:	3314      	adds	r3, #20
 8011d34:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8011d36:	88fb      	ldrh	r3, [r7, #6]
 8011d38:	683a      	ldr	r2, [r7, #0]
 8011d3a:	4413      	add	r3, r2
 8011d3c:	781b      	ldrb	r3, [r3, #0]
 8011d3e:	e00b      	b.n	8011d58 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8011d40:	88fb      	ldrh	r3, [r7, #6]
 8011d42:	b2da      	uxtb	r2, r3
 8011d44:	4b09      	ldr	r3, [pc, #36]	@ (8011d6c <tcp_get_next_optbyte+0x64>)
 8011d46:	881b      	ldrh	r3, [r3, #0]
 8011d48:	b2db      	uxtb	r3, r3
 8011d4a:	1ad3      	subs	r3, r2, r3
 8011d4c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8011d4e:	4b06      	ldr	r3, [pc, #24]	@ (8011d68 <tcp_get_next_optbyte+0x60>)
 8011d50:	681a      	ldr	r2, [r3, #0]
 8011d52:	797b      	ldrb	r3, [r7, #5]
 8011d54:	4413      	add	r3, r2
 8011d56:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011d58:	4618      	mov	r0, r3
 8011d5a:	370c      	adds	r7, #12
 8011d5c:	46bd      	mov	sp, r7
 8011d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d62:	4770      	bx	lr
 8011d64:	200151ec 	.word	0x200151ec
 8011d68:	200151e8 	.word	0x200151e8
 8011d6c:	200151e6 	.word	0x200151e6
 8011d70:	200151e0 	.word	0x200151e0

08011d74 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8011d74:	b580      	push	{r7, lr}
 8011d76:	b084      	sub	sp, #16
 8011d78:	af00      	add	r7, sp, #0
 8011d7a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	2b00      	cmp	r3, #0
 8011d80:	d106      	bne.n	8011d90 <tcp_parseopt+0x1c>
 8011d82:	4b32      	ldr	r3, [pc, #200]	@ (8011e4c <tcp_parseopt+0xd8>)
 8011d84:	f240 727d 	movw	r2, #1917	@ 0x77d
 8011d88:	4931      	ldr	r1, [pc, #196]	@ (8011e50 <tcp_parseopt+0xdc>)
 8011d8a:	4832      	ldr	r0, [pc, #200]	@ (8011e54 <tcp_parseopt+0xe0>)
 8011d8c:	f005 fc26 	bl	80175dc <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8011d90:	4b31      	ldr	r3, [pc, #196]	@ (8011e58 <tcp_parseopt+0xe4>)
 8011d92:	881b      	ldrh	r3, [r3, #0]
 8011d94:	2b00      	cmp	r3, #0
 8011d96:	d056      	beq.n	8011e46 <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011d98:	4b30      	ldr	r3, [pc, #192]	@ (8011e5c <tcp_parseopt+0xe8>)
 8011d9a:	2200      	movs	r2, #0
 8011d9c:	801a      	strh	r2, [r3, #0]
 8011d9e:	e046      	b.n	8011e2e <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8011da0:	f7ff ffb2 	bl	8011d08 <tcp_get_next_optbyte>
 8011da4:	4603      	mov	r3, r0
 8011da6:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8011da8:	7bfb      	ldrb	r3, [r7, #15]
 8011daa:	2b02      	cmp	r3, #2
 8011dac:	d006      	beq.n	8011dbc <tcp_parseopt+0x48>
 8011dae:	2b02      	cmp	r3, #2
 8011db0:	dc2a      	bgt.n	8011e08 <tcp_parseopt+0x94>
 8011db2:	2b00      	cmp	r3, #0
 8011db4:	d042      	beq.n	8011e3c <tcp_parseopt+0xc8>
 8011db6:	2b01      	cmp	r3, #1
 8011db8:	d038      	beq.n	8011e2c <tcp_parseopt+0xb8>
 8011dba:	e025      	b.n	8011e08 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8011dbc:	f7ff ffa4 	bl	8011d08 <tcp_get_next_optbyte>
 8011dc0:	4603      	mov	r3, r0
 8011dc2:	2b04      	cmp	r3, #4
 8011dc4:	d13c      	bne.n	8011e40 <tcp_parseopt+0xcc>
 8011dc6:	4b25      	ldr	r3, [pc, #148]	@ (8011e5c <tcp_parseopt+0xe8>)
 8011dc8:	881b      	ldrh	r3, [r3, #0]
 8011dca:	3301      	adds	r3, #1
 8011dcc:	4a22      	ldr	r2, [pc, #136]	@ (8011e58 <tcp_parseopt+0xe4>)
 8011dce:	8812      	ldrh	r2, [r2, #0]
 8011dd0:	4293      	cmp	r3, r2
 8011dd2:	da35      	bge.n	8011e40 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8011dd4:	f7ff ff98 	bl	8011d08 <tcp_get_next_optbyte>
 8011dd8:	4603      	mov	r3, r0
 8011dda:	021b      	lsls	r3, r3, #8
 8011ddc:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8011dde:	f7ff ff93 	bl	8011d08 <tcp_get_next_optbyte>
 8011de2:	4603      	mov	r3, r0
 8011de4:	461a      	mov	r2, r3
 8011de6:	89bb      	ldrh	r3, [r7, #12]
 8011de8:	4313      	orrs	r3, r2
 8011dea:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8011dec:	89bb      	ldrh	r3, [r7, #12]
 8011dee:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8011df2:	d804      	bhi.n	8011dfe <tcp_parseopt+0x8a>
 8011df4:	89bb      	ldrh	r3, [r7, #12]
 8011df6:	2b00      	cmp	r3, #0
 8011df8:	d001      	beq.n	8011dfe <tcp_parseopt+0x8a>
 8011dfa:	89ba      	ldrh	r2, [r7, #12]
 8011dfc:	e001      	b.n	8011e02 <tcp_parseopt+0x8e>
 8011dfe:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 8011e06:	e012      	b.n	8011e2e <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8011e08:	f7ff ff7e 	bl	8011d08 <tcp_get_next_optbyte>
 8011e0c:	4603      	mov	r3, r0
 8011e0e:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8011e10:	7afb      	ldrb	r3, [r7, #11]
 8011e12:	2b01      	cmp	r3, #1
 8011e14:	d916      	bls.n	8011e44 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8011e16:	7afb      	ldrb	r3, [r7, #11]
 8011e18:	b29a      	uxth	r2, r3
 8011e1a:	4b10      	ldr	r3, [pc, #64]	@ (8011e5c <tcp_parseopt+0xe8>)
 8011e1c:	881b      	ldrh	r3, [r3, #0]
 8011e1e:	4413      	add	r3, r2
 8011e20:	b29b      	uxth	r3, r3
 8011e22:	3b02      	subs	r3, #2
 8011e24:	b29a      	uxth	r2, r3
 8011e26:	4b0d      	ldr	r3, [pc, #52]	@ (8011e5c <tcp_parseopt+0xe8>)
 8011e28:	801a      	strh	r2, [r3, #0]
 8011e2a:	e000      	b.n	8011e2e <tcp_parseopt+0xba>
          break;
 8011e2c:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011e2e:	4b0b      	ldr	r3, [pc, #44]	@ (8011e5c <tcp_parseopt+0xe8>)
 8011e30:	881a      	ldrh	r2, [r3, #0]
 8011e32:	4b09      	ldr	r3, [pc, #36]	@ (8011e58 <tcp_parseopt+0xe4>)
 8011e34:	881b      	ldrh	r3, [r3, #0]
 8011e36:	429a      	cmp	r2, r3
 8011e38:	d3b2      	bcc.n	8011da0 <tcp_parseopt+0x2c>
 8011e3a:	e004      	b.n	8011e46 <tcp_parseopt+0xd2>
          return;
 8011e3c:	bf00      	nop
 8011e3e:	e002      	b.n	8011e46 <tcp_parseopt+0xd2>
            return;
 8011e40:	bf00      	nop
 8011e42:	e000      	b.n	8011e46 <tcp_parseopt+0xd2>
            return;
 8011e44:	bf00      	nop
      }
    }
  }
}
 8011e46:	3710      	adds	r7, #16
 8011e48:	46bd      	mov	sp, r7
 8011e4a:	bd80      	pop	{r7, pc}
 8011e4c:	0802153c 	.word	0x0802153c
 8011e50:	080219a0 	.word	0x080219a0
 8011e54:	08021588 	.word	0x08021588
 8011e58:	200151e4 	.word	0x200151e4
 8011e5c:	200151ec 	.word	0x200151ec

08011e60 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8011e60:	b480      	push	{r7}
 8011e62:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8011e64:	4b05      	ldr	r3, [pc, #20]	@ (8011e7c <tcp_trigger_input_pcb_close+0x1c>)
 8011e66:	781b      	ldrb	r3, [r3, #0]
 8011e68:	f043 0310 	orr.w	r3, r3, #16
 8011e6c:	b2da      	uxtb	r2, r3
 8011e6e:	4b03      	ldr	r3, [pc, #12]	@ (8011e7c <tcp_trigger_input_pcb_close+0x1c>)
 8011e70:	701a      	strb	r2, [r3, #0]
}
 8011e72:	bf00      	nop
 8011e74:	46bd      	mov	sp, r7
 8011e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e7a:	4770      	bx	lr
 8011e7c:	200151fd 	.word	0x200151fd

08011e80 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8011e80:	b580      	push	{r7, lr}
 8011e82:	b084      	sub	sp, #16
 8011e84:	af00      	add	r7, sp, #0
 8011e86:	60f8      	str	r0, [r7, #12]
 8011e88:	60b9      	str	r1, [r7, #8]
 8011e8a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8011e8c:	68fb      	ldr	r3, [r7, #12]
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	d00a      	beq.n	8011ea8 <tcp_route+0x28>
 8011e92:	68fb      	ldr	r3, [r7, #12]
 8011e94:	7a1b      	ldrb	r3, [r3, #8]
 8011e96:	2b00      	cmp	r3, #0
 8011e98:	d006      	beq.n	8011ea8 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8011e9a:	68fb      	ldr	r3, [r7, #12]
 8011e9c:	7a1b      	ldrb	r3, [r3, #8]
 8011e9e:	4618      	mov	r0, r3
 8011ea0:	f7fb f9f2 	bl	800d288 <netif_get_by_index>
 8011ea4:	4603      	mov	r3, r0
 8011ea6:	e003      	b.n	8011eb0 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8011ea8:	6878      	ldr	r0, [r7, #4]
 8011eaa:	f003 fa0d 	bl	80152c8 <ip4_route>
 8011eae:	4603      	mov	r3, r0
  }
}
 8011eb0:	4618      	mov	r0, r3
 8011eb2:	3710      	adds	r7, #16
 8011eb4:	46bd      	mov	sp, r7
 8011eb6:	bd80      	pop	{r7, pc}

08011eb8 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8011eb8:	b590      	push	{r4, r7, lr}
 8011eba:	b087      	sub	sp, #28
 8011ebc:	af00      	add	r7, sp, #0
 8011ebe:	60f8      	str	r0, [r7, #12]
 8011ec0:	60b9      	str	r1, [r7, #8]
 8011ec2:	603b      	str	r3, [r7, #0]
 8011ec4:	4613      	mov	r3, r2
 8011ec6:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8011ec8:	68fb      	ldr	r3, [r7, #12]
 8011eca:	2b00      	cmp	r3, #0
 8011ecc:	d105      	bne.n	8011eda <tcp_create_segment+0x22>
 8011ece:	4b43      	ldr	r3, [pc, #268]	@ (8011fdc <tcp_create_segment+0x124>)
 8011ed0:	22a3      	movs	r2, #163	@ 0xa3
 8011ed2:	4943      	ldr	r1, [pc, #268]	@ (8011fe0 <tcp_create_segment+0x128>)
 8011ed4:	4843      	ldr	r0, [pc, #268]	@ (8011fe4 <tcp_create_segment+0x12c>)
 8011ed6:	f005 fb81 	bl	80175dc <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8011eda:	68bb      	ldr	r3, [r7, #8]
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	d105      	bne.n	8011eec <tcp_create_segment+0x34>
 8011ee0:	4b3e      	ldr	r3, [pc, #248]	@ (8011fdc <tcp_create_segment+0x124>)
 8011ee2:	22a4      	movs	r2, #164	@ 0xa4
 8011ee4:	4940      	ldr	r1, [pc, #256]	@ (8011fe8 <tcp_create_segment+0x130>)
 8011ee6:	483f      	ldr	r0, [pc, #252]	@ (8011fe4 <tcp_create_segment+0x12c>)
 8011ee8:	f005 fb78 	bl	80175dc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011eec:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8011ef0:	009b      	lsls	r3, r3, #2
 8011ef2:	b2db      	uxtb	r3, r3
 8011ef4:	f003 0304 	and.w	r3, r3, #4
 8011ef8:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8011efa:	2003      	movs	r0, #3
 8011efc:	f7fa fe3e 	bl	800cb7c <memp_malloc>
 8011f00:	6138      	str	r0, [r7, #16]
 8011f02:	693b      	ldr	r3, [r7, #16]
 8011f04:	2b00      	cmp	r3, #0
 8011f06:	d104      	bne.n	8011f12 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8011f08:	68b8      	ldr	r0, [r7, #8]
 8011f0a:	f7fb fd1d 	bl	800d948 <pbuf_free>
    return NULL;
 8011f0e:	2300      	movs	r3, #0
 8011f10:	e060      	b.n	8011fd4 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 8011f12:	693b      	ldr	r3, [r7, #16]
 8011f14:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8011f18:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8011f1a:	693b      	ldr	r3, [r7, #16]
 8011f1c:	2200      	movs	r2, #0
 8011f1e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8011f20:	693b      	ldr	r3, [r7, #16]
 8011f22:	68ba      	ldr	r2, [r7, #8]
 8011f24:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8011f26:	68bb      	ldr	r3, [r7, #8]
 8011f28:	891a      	ldrh	r2, [r3, #8]
 8011f2a:	7dfb      	ldrb	r3, [r7, #23]
 8011f2c:	b29b      	uxth	r3, r3
 8011f2e:	429a      	cmp	r2, r3
 8011f30:	d205      	bcs.n	8011f3e <tcp_create_segment+0x86>
 8011f32:	4b2a      	ldr	r3, [pc, #168]	@ (8011fdc <tcp_create_segment+0x124>)
 8011f34:	22b0      	movs	r2, #176	@ 0xb0
 8011f36:	492d      	ldr	r1, [pc, #180]	@ (8011fec <tcp_create_segment+0x134>)
 8011f38:	482a      	ldr	r0, [pc, #168]	@ (8011fe4 <tcp_create_segment+0x12c>)
 8011f3a:	f005 fb4f 	bl	80175dc <iprintf>
  seg->len = p->tot_len - optlen;
 8011f3e:	68bb      	ldr	r3, [r7, #8]
 8011f40:	891a      	ldrh	r2, [r3, #8]
 8011f42:	7dfb      	ldrb	r3, [r7, #23]
 8011f44:	b29b      	uxth	r3, r3
 8011f46:	1ad3      	subs	r3, r2, r3
 8011f48:	b29a      	uxth	r2, r3
 8011f4a:	693b      	ldr	r3, [r7, #16]
 8011f4c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8011f4e:	2114      	movs	r1, #20
 8011f50:	68b8      	ldr	r0, [r7, #8]
 8011f52:	f7fb fc63 	bl	800d81c <pbuf_add_header>
 8011f56:	4603      	mov	r3, r0
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	d004      	beq.n	8011f66 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8011f5c:	6938      	ldr	r0, [r7, #16]
 8011f5e:	f7fd f8d2 	bl	800f106 <tcp_seg_free>
    return NULL;
 8011f62:	2300      	movs	r3, #0
 8011f64:	e036      	b.n	8011fd4 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8011f66:	693b      	ldr	r3, [r7, #16]
 8011f68:	685b      	ldr	r3, [r3, #4]
 8011f6a:	685a      	ldr	r2, [r3, #4]
 8011f6c:	693b      	ldr	r3, [r7, #16]
 8011f6e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8011f70:	68fb      	ldr	r3, [r7, #12]
 8011f72:	8ada      	ldrh	r2, [r3, #22]
 8011f74:	693b      	ldr	r3, [r7, #16]
 8011f76:	68dc      	ldr	r4, [r3, #12]
 8011f78:	4610      	mov	r0, r2
 8011f7a:	f7f9 febd 	bl	800bcf8 <lwip_htons>
 8011f7e:	4603      	mov	r3, r0
 8011f80:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8011f82:	68fb      	ldr	r3, [r7, #12]
 8011f84:	8b1a      	ldrh	r2, [r3, #24]
 8011f86:	693b      	ldr	r3, [r7, #16]
 8011f88:	68dc      	ldr	r4, [r3, #12]
 8011f8a:	4610      	mov	r0, r2
 8011f8c:	f7f9 feb4 	bl	800bcf8 <lwip_htons>
 8011f90:	4603      	mov	r3, r0
 8011f92:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8011f94:	693b      	ldr	r3, [r7, #16]
 8011f96:	68dc      	ldr	r4, [r3, #12]
 8011f98:	6838      	ldr	r0, [r7, #0]
 8011f9a:	f7f9 fec3 	bl	800bd24 <lwip_htonl>
 8011f9e:	4603      	mov	r3, r0
 8011fa0:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8011fa2:	7dfb      	ldrb	r3, [r7, #23]
 8011fa4:	089b      	lsrs	r3, r3, #2
 8011fa6:	b2db      	uxtb	r3, r3
 8011fa8:	3305      	adds	r3, #5
 8011faa:	b29b      	uxth	r3, r3
 8011fac:	031b      	lsls	r3, r3, #12
 8011fae:	b29a      	uxth	r2, r3
 8011fb0:	79fb      	ldrb	r3, [r7, #7]
 8011fb2:	b29b      	uxth	r3, r3
 8011fb4:	4313      	orrs	r3, r2
 8011fb6:	b29a      	uxth	r2, r3
 8011fb8:	693b      	ldr	r3, [r7, #16]
 8011fba:	68dc      	ldr	r4, [r3, #12]
 8011fbc:	4610      	mov	r0, r2
 8011fbe:	f7f9 fe9b 	bl	800bcf8 <lwip_htons>
 8011fc2:	4603      	mov	r3, r0
 8011fc4:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8011fc6:	693b      	ldr	r3, [r7, #16]
 8011fc8:	68db      	ldr	r3, [r3, #12]
 8011fca:	2200      	movs	r2, #0
 8011fcc:	749a      	strb	r2, [r3, #18]
 8011fce:	2200      	movs	r2, #0
 8011fd0:	74da      	strb	r2, [r3, #19]
  return seg;
 8011fd2:	693b      	ldr	r3, [r7, #16]
}
 8011fd4:	4618      	mov	r0, r3
 8011fd6:	371c      	adds	r7, #28
 8011fd8:	46bd      	mov	sp, r7
 8011fda:	bd90      	pop	{r4, r7, pc}
 8011fdc:	080219bc 	.word	0x080219bc
 8011fe0:	080219f0 	.word	0x080219f0
 8011fe4:	08021a10 	.word	0x08021a10
 8011fe8:	08021a38 	.word	0x08021a38
 8011fec:	08021a5c 	.word	0x08021a5c

08011ff0 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8011ff0:	b590      	push	{r4, r7, lr}
 8011ff2:	b08b      	sub	sp, #44	@ 0x2c
 8011ff4:	af02      	add	r7, sp, #8
 8011ff6:	6078      	str	r0, [r7, #4]
 8011ff8:	460b      	mov	r3, r1
 8011ffa:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8011ffc:	2300      	movs	r3, #0
 8011ffe:	61fb      	str	r3, [r7, #28]
 8012000:	2300      	movs	r3, #0
 8012002:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8012004:	2300      	movs	r3, #0
 8012006:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	2b00      	cmp	r3, #0
 801200c:	d106      	bne.n	801201c <tcp_split_unsent_seg+0x2c>
 801200e:	4b95      	ldr	r3, [pc, #596]	@ (8012264 <tcp_split_unsent_seg+0x274>)
 8012010:	f240 324b 	movw	r2, #843	@ 0x34b
 8012014:	4994      	ldr	r1, [pc, #592]	@ (8012268 <tcp_split_unsent_seg+0x278>)
 8012016:	4895      	ldr	r0, [pc, #596]	@ (801226c <tcp_split_unsent_seg+0x27c>)
 8012018:	f005 fae0 	bl	80175dc <iprintf>

  useg = pcb->unsent;
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012020:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8012022:	697b      	ldr	r3, [r7, #20]
 8012024:	2b00      	cmp	r3, #0
 8012026:	d102      	bne.n	801202e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8012028:	f04f 33ff 	mov.w	r3, #4294967295
 801202c:	e116      	b.n	801225c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801202e:	887b      	ldrh	r3, [r7, #2]
 8012030:	2b00      	cmp	r3, #0
 8012032:	d109      	bne.n	8012048 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8012034:	4b8b      	ldr	r3, [pc, #556]	@ (8012264 <tcp_split_unsent_seg+0x274>)
 8012036:	f240 3253 	movw	r2, #851	@ 0x353
 801203a:	498d      	ldr	r1, [pc, #564]	@ (8012270 <tcp_split_unsent_seg+0x280>)
 801203c:	488b      	ldr	r0, [pc, #556]	@ (801226c <tcp_split_unsent_seg+0x27c>)
 801203e:	f005 facd 	bl	80175dc <iprintf>
    return ERR_VAL;
 8012042:	f06f 0305 	mvn.w	r3, #5
 8012046:	e109      	b.n	801225c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8012048:	697b      	ldr	r3, [r7, #20]
 801204a:	891b      	ldrh	r3, [r3, #8]
 801204c:	887a      	ldrh	r2, [r7, #2]
 801204e:	429a      	cmp	r2, r3
 8012050:	d301      	bcc.n	8012056 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8012052:	2300      	movs	r3, #0
 8012054:	e102      	b.n	801225c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801205a:	887a      	ldrh	r2, [r7, #2]
 801205c:	429a      	cmp	r2, r3
 801205e:	d906      	bls.n	801206e <tcp_split_unsent_seg+0x7e>
 8012060:	4b80      	ldr	r3, [pc, #512]	@ (8012264 <tcp_split_unsent_seg+0x274>)
 8012062:	f240 325b 	movw	r2, #859	@ 0x35b
 8012066:	4983      	ldr	r1, [pc, #524]	@ (8012274 <tcp_split_unsent_seg+0x284>)
 8012068:	4880      	ldr	r0, [pc, #512]	@ (801226c <tcp_split_unsent_seg+0x27c>)
 801206a:	f005 fab7 	bl	80175dc <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801206e:	697b      	ldr	r3, [r7, #20]
 8012070:	891b      	ldrh	r3, [r3, #8]
 8012072:	2b00      	cmp	r3, #0
 8012074:	d106      	bne.n	8012084 <tcp_split_unsent_seg+0x94>
 8012076:	4b7b      	ldr	r3, [pc, #492]	@ (8012264 <tcp_split_unsent_seg+0x274>)
 8012078:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 801207c:	497e      	ldr	r1, [pc, #504]	@ (8012278 <tcp_split_unsent_seg+0x288>)
 801207e:	487b      	ldr	r0, [pc, #492]	@ (801226c <tcp_split_unsent_seg+0x27c>)
 8012080:	f005 faac 	bl	80175dc <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8012084:	697b      	ldr	r3, [r7, #20]
 8012086:	7a9b      	ldrb	r3, [r3, #10]
 8012088:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801208a:	7bfb      	ldrb	r3, [r7, #15]
 801208c:	009b      	lsls	r3, r3, #2
 801208e:	b2db      	uxtb	r3, r3
 8012090:	f003 0304 	and.w	r3, r3, #4
 8012094:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8012096:	697b      	ldr	r3, [r7, #20]
 8012098:	891a      	ldrh	r2, [r3, #8]
 801209a:	887b      	ldrh	r3, [r7, #2]
 801209c:	1ad3      	subs	r3, r2, r3
 801209e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80120a0:	7bbb      	ldrb	r3, [r7, #14]
 80120a2:	b29a      	uxth	r2, r3
 80120a4:	89bb      	ldrh	r3, [r7, #12]
 80120a6:	4413      	add	r3, r2
 80120a8:	b29b      	uxth	r3, r3
 80120aa:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80120ae:	4619      	mov	r1, r3
 80120b0:	2036      	movs	r0, #54	@ 0x36
 80120b2:	f7fb f965 	bl	800d380 <pbuf_alloc>
 80120b6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80120b8:	693b      	ldr	r3, [r7, #16]
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	f000 80b7 	beq.w	801222e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80120c0:	697b      	ldr	r3, [r7, #20]
 80120c2:	685b      	ldr	r3, [r3, #4]
 80120c4:	891a      	ldrh	r2, [r3, #8]
 80120c6:	697b      	ldr	r3, [r7, #20]
 80120c8:	891b      	ldrh	r3, [r3, #8]
 80120ca:	1ad3      	subs	r3, r2, r3
 80120cc:	b29a      	uxth	r2, r3
 80120ce:	887b      	ldrh	r3, [r7, #2]
 80120d0:	4413      	add	r3, r2
 80120d2:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80120d4:	697b      	ldr	r3, [r7, #20]
 80120d6:	6858      	ldr	r0, [r3, #4]
 80120d8:	693b      	ldr	r3, [r7, #16]
 80120da:	685a      	ldr	r2, [r3, #4]
 80120dc:	7bbb      	ldrb	r3, [r7, #14]
 80120de:	18d1      	adds	r1, r2, r3
 80120e0:	897b      	ldrh	r3, [r7, #10]
 80120e2:	89ba      	ldrh	r2, [r7, #12]
 80120e4:	f7fb fe2a 	bl	800dd3c <pbuf_copy_partial>
 80120e8:	4603      	mov	r3, r0
 80120ea:	461a      	mov	r2, r3
 80120ec:	89bb      	ldrh	r3, [r7, #12]
 80120ee:	4293      	cmp	r3, r2
 80120f0:	f040 809f 	bne.w	8012232 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80120f4:	697b      	ldr	r3, [r7, #20]
 80120f6:	68db      	ldr	r3, [r3, #12]
 80120f8:	899b      	ldrh	r3, [r3, #12]
 80120fa:	b29b      	uxth	r3, r3
 80120fc:	4618      	mov	r0, r3
 80120fe:	f7f9 fdfb 	bl	800bcf8 <lwip_htons>
 8012102:	4603      	mov	r3, r0
 8012104:	b2db      	uxtb	r3, r3
 8012106:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801210a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801210c:	2300      	movs	r3, #0
 801210e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8012110:	7efb      	ldrb	r3, [r7, #27]
 8012112:	f003 0308 	and.w	r3, r3, #8
 8012116:	2b00      	cmp	r3, #0
 8012118:	d007      	beq.n	801212a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801211a:	7efb      	ldrb	r3, [r7, #27]
 801211c:	f023 0308 	bic.w	r3, r3, #8
 8012120:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8012122:	7ebb      	ldrb	r3, [r7, #26]
 8012124:	f043 0308 	orr.w	r3, r3, #8
 8012128:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801212a:	7efb      	ldrb	r3, [r7, #27]
 801212c:	f003 0301 	and.w	r3, r3, #1
 8012130:	2b00      	cmp	r3, #0
 8012132:	d007      	beq.n	8012144 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8012134:	7efb      	ldrb	r3, [r7, #27]
 8012136:	f023 0301 	bic.w	r3, r3, #1
 801213a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801213c:	7ebb      	ldrb	r3, [r7, #26]
 801213e:	f043 0301 	orr.w	r3, r3, #1
 8012142:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8012144:	697b      	ldr	r3, [r7, #20]
 8012146:	68db      	ldr	r3, [r3, #12]
 8012148:	685b      	ldr	r3, [r3, #4]
 801214a:	4618      	mov	r0, r3
 801214c:	f7f9 fdea 	bl	800bd24 <lwip_htonl>
 8012150:	4602      	mov	r2, r0
 8012152:	887b      	ldrh	r3, [r7, #2]
 8012154:	18d1      	adds	r1, r2, r3
 8012156:	7eba      	ldrb	r2, [r7, #26]
 8012158:	7bfb      	ldrb	r3, [r7, #15]
 801215a:	9300      	str	r3, [sp, #0]
 801215c:	460b      	mov	r3, r1
 801215e:	6939      	ldr	r1, [r7, #16]
 8012160:	6878      	ldr	r0, [r7, #4]
 8012162:	f7ff fea9 	bl	8011eb8 <tcp_create_segment>
 8012166:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8012168:	69fb      	ldr	r3, [r7, #28]
 801216a:	2b00      	cmp	r3, #0
 801216c:	d063      	beq.n	8012236 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801216e:	697b      	ldr	r3, [r7, #20]
 8012170:	685b      	ldr	r3, [r3, #4]
 8012172:	4618      	mov	r0, r3
 8012174:	f7fb fc70 	bl	800da58 <pbuf_clen>
 8012178:	4603      	mov	r3, r0
 801217a:	461a      	mov	r2, r3
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012182:	1a9b      	subs	r3, r3, r2
 8012184:	b29a      	uxth	r2, r3
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801218c:	697b      	ldr	r3, [r7, #20]
 801218e:	6858      	ldr	r0, [r3, #4]
 8012190:	697b      	ldr	r3, [r7, #20]
 8012192:	685b      	ldr	r3, [r3, #4]
 8012194:	891a      	ldrh	r2, [r3, #8]
 8012196:	89bb      	ldrh	r3, [r7, #12]
 8012198:	1ad3      	subs	r3, r2, r3
 801219a:	b29b      	uxth	r3, r3
 801219c:	4619      	mov	r1, r3
 801219e:	f7fb fa4d 	bl	800d63c <pbuf_realloc>
  useg->len -= remainder;
 80121a2:	697b      	ldr	r3, [r7, #20]
 80121a4:	891a      	ldrh	r2, [r3, #8]
 80121a6:	89bb      	ldrh	r3, [r7, #12]
 80121a8:	1ad3      	subs	r3, r2, r3
 80121aa:	b29a      	uxth	r2, r3
 80121ac:	697b      	ldr	r3, [r7, #20]
 80121ae:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80121b0:	697b      	ldr	r3, [r7, #20]
 80121b2:	68db      	ldr	r3, [r3, #12]
 80121b4:	899b      	ldrh	r3, [r3, #12]
 80121b6:	b29c      	uxth	r4, r3
 80121b8:	7efb      	ldrb	r3, [r7, #27]
 80121ba:	b29b      	uxth	r3, r3
 80121bc:	4618      	mov	r0, r3
 80121be:	f7f9 fd9b 	bl	800bcf8 <lwip_htons>
 80121c2:	4603      	mov	r3, r0
 80121c4:	461a      	mov	r2, r3
 80121c6:	697b      	ldr	r3, [r7, #20]
 80121c8:	68db      	ldr	r3, [r3, #12]
 80121ca:	4322      	orrs	r2, r4
 80121cc:	b292      	uxth	r2, r2
 80121ce:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80121d0:	697b      	ldr	r3, [r7, #20]
 80121d2:	685b      	ldr	r3, [r3, #4]
 80121d4:	4618      	mov	r0, r3
 80121d6:	f7fb fc3f 	bl	800da58 <pbuf_clen>
 80121da:	4603      	mov	r3, r0
 80121dc:	461a      	mov	r2, r3
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80121e4:	4413      	add	r3, r2
 80121e6:	b29a      	uxth	r2, r3
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80121ee:	69fb      	ldr	r3, [r7, #28]
 80121f0:	685b      	ldr	r3, [r3, #4]
 80121f2:	4618      	mov	r0, r3
 80121f4:	f7fb fc30 	bl	800da58 <pbuf_clen>
 80121f8:	4603      	mov	r3, r0
 80121fa:	461a      	mov	r2, r3
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012202:	4413      	add	r3, r2
 8012204:	b29a      	uxth	r2, r3
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801220c:	697b      	ldr	r3, [r7, #20]
 801220e:	681a      	ldr	r2, [r3, #0]
 8012210:	69fb      	ldr	r3, [r7, #28]
 8012212:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8012214:	697b      	ldr	r3, [r7, #20]
 8012216:	69fa      	ldr	r2, [r7, #28]
 8012218:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801221a:	69fb      	ldr	r3, [r7, #28]
 801221c:	681b      	ldr	r3, [r3, #0]
 801221e:	2b00      	cmp	r3, #0
 8012220:	d103      	bne.n	801222a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	2200      	movs	r2, #0
 8012226:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801222a:	2300      	movs	r3, #0
 801222c:	e016      	b.n	801225c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801222e:	bf00      	nop
 8012230:	e002      	b.n	8012238 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8012232:	bf00      	nop
 8012234:	e000      	b.n	8012238 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8012236:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8012238:	69fb      	ldr	r3, [r7, #28]
 801223a:	2b00      	cmp	r3, #0
 801223c:	d006      	beq.n	801224c <tcp_split_unsent_seg+0x25c>
 801223e:	4b09      	ldr	r3, [pc, #36]	@ (8012264 <tcp_split_unsent_seg+0x274>)
 8012240:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8012244:	490d      	ldr	r1, [pc, #52]	@ (801227c <tcp_split_unsent_seg+0x28c>)
 8012246:	4809      	ldr	r0, [pc, #36]	@ (801226c <tcp_split_unsent_seg+0x27c>)
 8012248:	f005 f9c8 	bl	80175dc <iprintf>
  if (p != NULL) {
 801224c:	693b      	ldr	r3, [r7, #16]
 801224e:	2b00      	cmp	r3, #0
 8012250:	d002      	beq.n	8012258 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8012252:	6938      	ldr	r0, [r7, #16]
 8012254:	f7fb fb78 	bl	800d948 <pbuf_free>
  }

  return ERR_MEM;
 8012258:	f04f 33ff 	mov.w	r3, #4294967295
}
 801225c:	4618      	mov	r0, r3
 801225e:	3724      	adds	r7, #36	@ 0x24
 8012260:	46bd      	mov	sp, r7
 8012262:	bd90      	pop	{r4, r7, pc}
 8012264:	080219bc 	.word	0x080219bc
 8012268:	08021d50 	.word	0x08021d50
 801226c:	08021a10 	.word	0x08021a10
 8012270:	08021d74 	.word	0x08021d74
 8012274:	08021d98 	.word	0x08021d98
 8012278:	08021da8 	.word	0x08021da8
 801227c:	08021db8 	.word	0x08021db8

08012280 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8012280:	b590      	push	{r4, r7, lr}
 8012282:	b085      	sub	sp, #20
 8012284:	af00      	add	r7, sp, #0
 8012286:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	2b00      	cmp	r3, #0
 801228c:	d106      	bne.n	801229c <tcp_send_fin+0x1c>
 801228e:	4b21      	ldr	r3, [pc, #132]	@ (8012314 <tcp_send_fin+0x94>)
 8012290:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 8012294:	4920      	ldr	r1, [pc, #128]	@ (8012318 <tcp_send_fin+0x98>)
 8012296:	4821      	ldr	r0, [pc, #132]	@ (801231c <tcp_send_fin+0x9c>)
 8012298:	f005 f9a0 	bl	80175dc <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80122a0:	2b00      	cmp	r3, #0
 80122a2:	d02e      	beq.n	8012302 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80122a8:	60fb      	str	r3, [r7, #12]
 80122aa:	e002      	b.n	80122b2 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80122ac:	68fb      	ldr	r3, [r7, #12]
 80122ae:	681b      	ldr	r3, [r3, #0]
 80122b0:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80122b2:	68fb      	ldr	r3, [r7, #12]
 80122b4:	681b      	ldr	r3, [r3, #0]
 80122b6:	2b00      	cmp	r3, #0
 80122b8:	d1f8      	bne.n	80122ac <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80122ba:	68fb      	ldr	r3, [r7, #12]
 80122bc:	68db      	ldr	r3, [r3, #12]
 80122be:	899b      	ldrh	r3, [r3, #12]
 80122c0:	b29b      	uxth	r3, r3
 80122c2:	4618      	mov	r0, r3
 80122c4:	f7f9 fd18 	bl	800bcf8 <lwip_htons>
 80122c8:	4603      	mov	r3, r0
 80122ca:	b2db      	uxtb	r3, r3
 80122cc:	f003 0307 	and.w	r3, r3, #7
 80122d0:	2b00      	cmp	r3, #0
 80122d2:	d116      	bne.n	8012302 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80122d4:	68fb      	ldr	r3, [r7, #12]
 80122d6:	68db      	ldr	r3, [r3, #12]
 80122d8:	899b      	ldrh	r3, [r3, #12]
 80122da:	b29c      	uxth	r4, r3
 80122dc:	2001      	movs	r0, #1
 80122de:	f7f9 fd0b 	bl	800bcf8 <lwip_htons>
 80122e2:	4603      	mov	r3, r0
 80122e4:	461a      	mov	r2, r3
 80122e6:	68fb      	ldr	r3, [r7, #12]
 80122e8:	68db      	ldr	r3, [r3, #12]
 80122ea:	4322      	orrs	r2, r4
 80122ec:	b292      	uxth	r2, r2
 80122ee:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	8b5b      	ldrh	r3, [r3, #26]
 80122f4:	f043 0320 	orr.w	r3, r3, #32
 80122f8:	b29a      	uxth	r2, r3
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80122fe:	2300      	movs	r3, #0
 8012300:	e004      	b.n	801230c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8012302:	2101      	movs	r1, #1
 8012304:	6878      	ldr	r0, [r7, #4]
 8012306:	f000 f80b 	bl	8012320 <tcp_enqueue_flags>
 801230a:	4603      	mov	r3, r0
}
 801230c:	4618      	mov	r0, r3
 801230e:	3714      	adds	r7, #20
 8012310:	46bd      	mov	sp, r7
 8012312:	bd90      	pop	{r4, r7, pc}
 8012314:	080219bc 	.word	0x080219bc
 8012318:	08021dc4 	.word	0x08021dc4
 801231c:	08021a10 	.word	0x08021a10

08012320 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8012320:	b580      	push	{r7, lr}
 8012322:	b08a      	sub	sp, #40	@ 0x28
 8012324:	af02      	add	r7, sp, #8
 8012326:	6078      	str	r0, [r7, #4]
 8012328:	460b      	mov	r3, r1
 801232a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801232c:	2300      	movs	r3, #0
 801232e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8012330:	2300      	movs	r3, #0
 8012332:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8012334:	78fb      	ldrb	r3, [r7, #3]
 8012336:	f003 0303 	and.w	r3, r3, #3
 801233a:	2b00      	cmp	r3, #0
 801233c:	d106      	bne.n	801234c <tcp_enqueue_flags+0x2c>
 801233e:	4b67      	ldr	r3, [pc, #412]	@ (80124dc <tcp_enqueue_flags+0x1bc>)
 8012340:	f240 4211 	movw	r2, #1041	@ 0x411
 8012344:	4966      	ldr	r1, [pc, #408]	@ (80124e0 <tcp_enqueue_flags+0x1c0>)
 8012346:	4867      	ldr	r0, [pc, #412]	@ (80124e4 <tcp_enqueue_flags+0x1c4>)
 8012348:	f005 f948 	bl	80175dc <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801234c:	687b      	ldr	r3, [r7, #4]
 801234e:	2b00      	cmp	r3, #0
 8012350:	d106      	bne.n	8012360 <tcp_enqueue_flags+0x40>
 8012352:	4b62      	ldr	r3, [pc, #392]	@ (80124dc <tcp_enqueue_flags+0x1bc>)
 8012354:	f240 4213 	movw	r2, #1043	@ 0x413
 8012358:	4963      	ldr	r1, [pc, #396]	@ (80124e8 <tcp_enqueue_flags+0x1c8>)
 801235a:	4862      	ldr	r0, [pc, #392]	@ (80124e4 <tcp_enqueue_flags+0x1c4>)
 801235c:	f005 f93e 	bl	80175dc <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8012360:	78fb      	ldrb	r3, [r7, #3]
 8012362:	f003 0302 	and.w	r3, r3, #2
 8012366:	2b00      	cmp	r3, #0
 8012368:	d001      	beq.n	801236e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801236a:	2301      	movs	r3, #1
 801236c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801236e:	7ffb      	ldrb	r3, [r7, #31]
 8012370:	009b      	lsls	r3, r3, #2
 8012372:	b2db      	uxtb	r3, r3
 8012374:	f003 0304 	and.w	r3, r3, #4
 8012378:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801237a:	7dfb      	ldrb	r3, [r7, #23]
 801237c:	b29b      	uxth	r3, r3
 801237e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8012382:	4619      	mov	r1, r3
 8012384:	2036      	movs	r0, #54	@ 0x36
 8012386:	f7fa fffb 	bl	800d380 <pbuf_alloc>
 801238a:	6138      	str	r0, [r7, #16]
 801238c:	693b      	ldr	r3, [r7, #16]
 801238e:	2b00      	cmp	r3, #0
 8012390:	d109      	bne.n	80123a6 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	8b5b      	ldrh	r3, [r3, #26]
 8012396:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801239a:	b29a      	uxth	r2, r3
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80123a0:	f04f 33ff 	mov.w	r3, #4294967295
 80123a4:	e095      	b.n	80124d2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80123a6:	693b      	ldr	r3, [r7, #16]
 80123a8:	895a      	ldrh	r2, [r3, #10]
 80123aa:	7dfb      	ldrb	r3, [r7, #23]
 80123ac:	b29b      	uxth	r3, r3
 80123ae:	429a      	cmp	r2, r3
 80123b0:	d206      	bcs.n	80123c0 <tcp_enqueue_flags+0xa0>
 80123b2:	4b4a      	ldr	r3, [pc, #296]	@ (80124dc <tcp_enqueue_flags+0x1bc>)
 80123b4:	f240 4239 	movw	r2, #1081	@ 0x439
 80123b8:	494c      	ldr	r1, [pc, #304]	@ (80124ec <tcp_enqueue_flags+0x1cc>)
 80123ba:	484a      	ldr	r0, [pc, #296]	@ (80124e4 <tcp_enqueue_flags+0x1c4>)
 80123bc:	f005 f90e 	bl	80175dc <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 80123c4:	78fa      	ldrb	r2, [r7, #3]
 80123c6:	7ffb      	ldrb	r3, [r7, #31]
 80123c8:	9300      	str	r3, [sp, #0]
 80123ca:	460b      	mov	r3, r1
 80123cc:	6939      	ldr	r1, [r7, #16]
 80123ce:	6878      	ldr	r0, [r7, #4]
 80123d0:	f7ff fd72 	bl	8011eb8 <tcp_create_segment>
 80123d4:	60f8      	str	r0, [r7, #12]
 80123d6:	68fb      	ldr	r3, [r7, #12]
 80123d8:	2b00      	cmp	r3, #0
 80123da:	d109      	bne.n	80123f0 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	8b5b      	ldrh	r3, [r3, #26]
 80123e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80123e4:	b29a      	uxth	r2, r3
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80123ea:	f04f 33ff 	mov.w	r3, #4294967295
 80123ee:	e070      	b.n	80124d2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80123f0:	68fb      	ldr	r3, [r7, #12]
 80123f2:	68db      	ldr	r3, [r3, #12]
 80123f4:	f003 0303 	and.w	r3, r3, #3
 80123f8:	2b00      	cmp	r3, #0
 80123fa:	d006      	beq.n	801240a <tcp_enqueue_flags+0xea>
 80123fc:	4b37      	ldr	r3, [pc, #220]	@ (80124dc <tcp_enqueue_flags+0x1bc>)
 80123fe:	f240 4242 	movw	r2, #1090	@ 0x442
 8012402:	493b      	ldr	r1, [pc, #236]	@ (80124f0 <tcp_enqueue_flags+0x1d0>)
 8012404:	4837      	ldr	r0, [pc, #220]	@ (80124e4 <tcp_enqueue_flags+0x1c4>)
 8012406:	f005 f8e9 	bl	80175dc <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801240a:	68fb      	ldr	r3, [r7, #12]
 801240c:	891b      	ldrh	r3, [r3, #8]
 801240e:	2b00      	cmp	r3, #0
 8012410:	d006      	beq.n	8012420 <tcp_enqueue_flags+0x100>
 8012412:	4b32      	ldr	r3, [pc, #200]	@ (80124dc <tcp_enqueue_flags+0x1bc>)
 8012414:	f240 4243 	movw	r2, #1091	@ 0x443
 8012418:	4936      	ldr	r1, [pc, #216]	@ (80124f4 <tcp_enqueue_flags+0x1d4>)
 801241a:	4832      	ldr	r0, [pc, #200]	@ (80124e4 <tcp_enqueue_flags+0x1c4>)
 801241c:	f005 f8de 	bl	80175dc <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012424:	2b00      	cmp	r3, #0
 8012426:	d103      	bne.n	8012430 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	68fa      	ldr	r2, [r7, #12]
 801242c:	66da      	str	r2, [r3, #108]	@ 0x6c
 801242e:	e00d      	b.n	801244c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012434:	61bb      	str	r3, [r7, #24]
 8012436:	e002      	b.n	801243e <tcp_enqueue_flags+0x11e>
 8012438:	69bb      	ldr	r3, [r7, #24]
 801243a:	681b      	ldr	r3, [r3, #0]
 801243c:	61bb      	str	r3, [r7, #24]
 801243e:	69bb      	ldr	r3, [r7, #24]
 8012440:	681b      	ldr	r3, [r3, #0]
 8012442:	2b00      	cmp	r3, #0
 8012444:	d1f8      	bne.n	8012438 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8012446:	69bb      	ldr	r3, [r7, #24]
 8012448:	68fa      	ldr	r2, [r7, #12]
 801244a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	2200      	movs	r2, #0
 8012450:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8012454:	78fb      	ldrb	r3, [r7, #3]
 8012456:	f003 0302 	and.w	r3, r3, #2
 801245a:	2b00      	cmp	r3, #0
 801245c:	d104      	bne.n	8012468 <tcp_enqueue_flags+0x148>
 801245e:	78fb      	ldrb	r3, [r7, #3]
 8012460:	f003 0301 	and.w	r3, r3, #1
 8012464:	2b00      	cmp	r3, #0
 8012466:	d004      	beq.n	8012472 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801246c:	1c5a      	adds	r2, r3, #1
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8012472:	78fb      	ldrb	r3, [r7, #3]
 8012474:	f003 0301 	and.w	r3, r3, #1
 8012478:	2b00      	cmp	r3, #0
 801247a:	d006      	beq.n	801248a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	8b5b      	ldrh	r3, [r3, #26]
 8012480:	f043 0320 	orr.w	r3, r3, #32
 8012484:	b29a      	uxth	r2, r3
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801248a:	68fb      	ldr	r3, [r7, #12]
 801248c:	685b      	ldr	r3, [r3, #4]
 801248e:	4618      	mov	r0, r3
 8012490:	f7fb fae2 	bl	800da58 <pbuf_clen>
 8012494:	4603      	mov	r3, r0
 8012496:	461a      	mov	r2, r3
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801249e:	4413      	add	r3, r2
 80124a0:	b29a      	uxth	r2, r3
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	d00e      	beq.n	80124d0 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80124b6:	2b00      	cmp	r3, #0
 80124b8:	d10a      	bne.n	80124d0 <tcp_enqueue_flags+0x1b0>
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80124be:	2b00      	cmp	r3, #0
 80124c0:	d106      	bne.n	80124d0 <tcp_enqueue_flags+0x1b0>
 80124c2:	4b06      	ldr	r3, [pc, #24]	@ (80124dc <tcp_enqueue_flags+0x1bc>)
 80124c4:	f240 4265 	movw	r2, #1125	@ 0x465
 80124c8:	490b      	ldr	r1, [pc, #44]	@ (80124f8 <tcp_enqueue_flags+0x1d8>)
 80124ca:	4806      	ldr	r0, [pc, #24]	@ (80124e4 <tcp_enqueue_flags+0x1c4>)
 80124cc:	f005 f886 	bl	80175dc <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80124d0:	2300      	movs	r3, #0
}
 80124d2:	4618      	mov	r0, r3
 80124d4:	3720      	adds	r7, #32
 80124d6:	46bd      	mov	sp, r7
 80124d8:	bd80      	pop	{r7, pc}
 80124da:	bf00      	nop
 80124dc:	080219bc 	.word	0x080219bc
 80124e0:	08021de0 	.word	0x08021de0
 80124e4:	08021a10 	.word	0x08021a10
 80124e8:	08021e38 	.word	0x08021e38
 80124ec:	08021e58 	.word	0x08021e58
 80124f0:	08021e94 	.word	0x08021e94
 80124f4:	08021eac 	.word	0x08021eac
 80124f8:	08021ed8 	.word	0x08021ed8

080124fc <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80124fc:	b5b0      	push	{r4, r5, r7, lr}
 80124fe:	b08a      	sub	sp, #40	@ 0x28
 8012500:	af00      	add	r7, sp, #0
 8012502:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	2b00      	cmp	r3, #0
 8012508:	d106      	bne.n	8012518 <tcp_output+0x1c>
 801250a:	4b8a      	ldr	r3, [pc, #552]	@ (8012734 <tcp_output+0x238>)
 801250c:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8012510:	4989      	ldr	r1, [pc, #548]	@ (8012738 <tcp_output+0x23c>)
 8012512:	488a      	ldr	r0, [pc, #552]	@ (801273c <tcp_output+0x240>)
 8012514:	f005 f862 	bl	80175dc <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	7d1b      	ldrb	r3, [r3, #20]
 801251c:	2b01      	cmp	r3, #1
 801251e:	d106      	bne.n	801252e <tcp_output+0x32>
 8012520:	4b84      	ldr	r3, [pc, #528]	@ (8012734 <tcp_output+0x238>)
 8012522:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 8012526:	4986      	ldr	r1, [pc, #536]	@ (8012740 <tcp_output+0x244>)
 8012528:	4884      	ldr	r0, [pc, #528]	@ (801273c <tcp_output+0x240>)
 801252a:	f005 f857 	bl	80175dc <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801252e:	4b85      	ldr	r3, [pc, #532]	@ (8012744 <tcp_output+0x248>)
 8012530:	681b      	ldr	r3, [r3, #0]
 8012532:	687a      	ldr	r2, [r7, #4]
 8012534:	429a      	cmp	r2, r3
 8012536:	d101      	bne.n	801253c <tcp_output+0x40>
    return ERR_OK;
 8012538:	2300      	movs	r3, #0
 801253a:	e1ce      	b.n	80128da <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8012548:	4293      	cmp	r3, r2
 801254a:	bf28      	it	cs
 801254c:	4613      	movcs	r3, r2
 801254e:	b29b      	uxth	r3, r3
 8012550:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012556:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 8012558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801255a:	2b00      	cmp	r3, #0
 801255c:	d10b      	bne.n	8012576 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	8b5b      	ldrh	r3, [r3, #26]
 8012562:	f003 0302 	and.w	r3, r3, #2
 8012566:	2b00      	cmp	r3, #0
 8012568:	f000 81aa 	beq.w	80128c0 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 801256c:	6878      	ldr	r0, [r7, #4]
 801256e:	f000 fdcb 	bl	8013108 <tcp_send_empty_ack>
 8012572:	4603      	mov	r3, r0
 8012574:	e1b1      	b.n	80128da <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8012576:	6879      	ldr	r1, [r7, #4]
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	3304      	adds	r3, #4
 801257c:	461a      	mov	r2, r3
 801257e:	6878      	ldr	r0, [r7, #4]
 8012580:	f7ff fc7e 	bl	8011e80 <tcp_route>
 8012584:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8012586:	697b      	ldr	r3, [r7, #20]
 8012588:	2b00      	cmp	r3, #0
 801258a:	d102      	bne.n	8012592 <tcp_output+0x96>
    return ERR_RTE;
 801258c:	f06f 0303 	mvn.w	r3, #3
 8012590:	e1a3      	b.n	80128da <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	2b00      	cmp	r3, #0
 8012596:	d003      	beq.n	80125a0 <tcp_output+0xa4>
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	681b      	ldr	r3, [r3, #0]
 801259c:	2b00      	cmp	r3, #0
 801259e:	d111      	bne.n	80125c4 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80125a0:	697b      	ldr	r3, [r7, #20]
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	d002      	beq.n	80125ac <tcp_output+0xb0>
 80125a6:	697b      	ldr	r3, [r7, #20]
 80125a8:	3304      	adds	r3, #4
 80125aa:	e000      	b.n	80125ae <tcp_output+0xb2>
 80125ac:	2300      	movs	r3, #0
 80125ae:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80125b0:	693b      	ldr	r3, [r7, #16]
 80125b2:	2b00      	cmp	r3, #0
 80125b4:	d102      	bne.n	80125bc <tcp_output+0xc0>
      return ERR_RTE;
 80125b6:	f06f 0303 	mvn.w	r3, #3
 80125ba:	e18e      	b.n	80128da <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80125bc:	693b      	ldr	r3, [r7, #16]
 80125be:	681a      	ldr	r2, [r3, #0]
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80125c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80125c6:	68db      	ldr	r3, [r3, #12]
 80125c8:	685b      	ldr	r3, [r3, #4]
 80125ca:	4618      	mov	r0, r3
 80125cc:	f7f9 fbaa 	bl	800bd24 <lwip_htonl>
 80125d0:	4602      	mov	r2, r0
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80125d6:	1ad3      	subs	r3, r2, r3
 80125d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80125da:	8912      	ldrh	r2, [r2, #8]
 80125dc:	4413      	add	r3, r2
 80125de:	69ba      	ldr	r2, [r7, #24]
 80125e0:	429a      	cmp	r2, r3
 80125e2:	d227      	bcs.n	8012634 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80125ea:	461a      	mov	r2, r3
 80125ec:	69bb      	ldr	r3, [r7, #24]
 80125ee:	4293      	cmp	r3, r2
 80125f0:	d114      	bne.n	801261c <tcp_output+0x120>
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	d110      	bne.n	801261c <tcp_output+0x120>
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8012600:	2b00      	cmp	r3, #0
 8012602:	d10b      	bne.n	801261c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	2200      	movs	r2, #0
 8012608:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	2201      	movs	r2, #1
 8012610:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	2200      	movs	r2, #0
 8012618:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	8b5b      	ldrh	r3, [r3, #26]
 8012620:	f003 0302 	and.w	r3, r3, #2
 8012624:	2b00      	cmp	r3, #0
 8012626:	f000 814d 	beq.w	80128c4 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801262a:	6878      	ldr	r0, [r7, #4]
 801262c:	f000 fd6c 	bl	8013108 <tcp_send_empty_ack>
 8012630:	4603      	mov	r3, r0
 8012632:	e152      	b.n	80128da <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	2200      	movs	r2, #0
 8012638:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012640:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8012642:	6a3b      	ldr	r3, [r7, #32]
 8012644:	2b00      	cmp	r3, #0
 8012646:	f000 811c 	beq.w	8012882 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801264a:	e002      	b.n	8012652 <tcp_output+0x156>
 801264c:	6a3b      	ldr	r3, [r7, #32]
 801264e:	681b      	ldr	r3, [r3, #0]
 8012650:	623b      	str	r3, [r7, #32]
 8012652:	6a3b      	ldr	r3, [r7, #32]
 8012654:	681b      	ldr	r3, [r3, #0]
 8012656:	2b00      	cmp	r3, #0
 8012658:	d1f8      	bne.n	801264c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801265a:	e112      	b.n	8012882 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801265c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801265e:	68db      	ldr	r3, [r3, #12]
 8012660:	899b      	ldrh	r3, [r3, #12]
 8012662:	b29b      	uxth	r3, r3
 8012664:	4618      	mov	r0, r3
 8012666:	f7f9 fb47 	bl	800bcf8 <lwip_htons>
 801266a:	4603      	mov	r3, r0
 801266c:	b2db      	uxtb	r3, r3
 801266e:	f003 0304 	and.w	r3, r3, #4
 8012672:	2b00      	cmp	r3, #0
 8012674:	d006      	beq.n	8012684 <tcp_output+0x188>
 8012676:	4b2f      	ldr	r3, [pc, #188]	@ (8012734 <tcp_output+0x238>)
 8012678:	f240 5236 	movw	r2, #1334	@ 0x536
 801267c:	4932      	ldr	r1, [pc, #200]	@ (8012748 <tcp_output+0x24c>)
 801267e:	482f      	ldr	r0, [pc, #188]	@ (801273c <tcp_output+0x240>)
 8012680:	f004 ffac 	bl	80175dc <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012688:	2b00      	cmp	r3, #0
 801268a:	d01f      	beq.n	80126cc <tcp_output+0x1d0>
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	8b5b      	ldrh	r3, [r3, #26]
 8012690:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8012694:	2b00      	cmp	r3, #0
 8012696:	d119      	bne.n	80126cc <tcp_output+0x1d0>
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801269c:	2b00      	cmp	r3, #0
 801269e:	d00b      	beq.n	80126b8 <tcp_output+0x1bc>
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80126a4:	681b      	ldr	r3, [r3, #0]
 80126a6:	2b00      	cmp	r3, #0
 80126a8:	d110      	bne.n	80126cc <tcp_output+0x1d0>
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80126ae:	891a      	ldrh	r2, [r3, #8]
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80126b4:	429a      	cmp	r2, r3
 80126b6:	d209      	bcs.n	80126cc <tcp_output+0x1d0>
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80126be:	2b00      	cmp	r3, #0
 80126c0:	d004      	beq.n	80126cc <tcp_output+0x1d0>
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80126c8:	2b08      	cmp	r3, #8
 80126ca:	d901      	bls.n	80126d0 <tcp_output+0x1d4>
 80126cc:	2301      	movs	r3, #1
 80126ce:	e000      	b.n	80126d2 <tcp_output+0x1d6>
 80126d0:	2300      	movs	r3, #0
 80126d2:	2b00      	cmp	r3, #0
 80126d4:	d106      	bne.n	80126e4 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	8b5b      	ldrh	r3, [r3, #26]
 80126da:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80126de:	2b00      	cmp	r3, #0
 80126e0:	f000 80e4 	beq.w	80128ac <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	7d1b      	ldrb	r3, [r3, #20]
 80126e8:	2b02      	cmp	r3, #2
 80126ea:	d00d      	beq.n	8012708 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80126ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80126ee:	68db      	ldr	r3, [r3, #12]
 80126f0:	899b      	ldrh	r3, [r3, #12]
 80126f2:	b29c      	uxth	r4, r3
 80126f4:	2010      	movs	r0, #16
 80126f6:	f7f9 faff 	bl	800bcf8 <lwip_htons>
 80126fa:	4603      	mov	r3, r0
 80126fc:	461a      	mov	r2, r3
 80126fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012700:	68db      	ldr	r3, [r3, #12]
 8012702:	4322      	orrs	r2, r4
 8012704:	b292      	uxth	r2, r2
 8012706:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8012708:	697a      	ldr	r2, [r7, #20]
 801270a:	6879      	ldr	r1, [r7, #4]
 801270c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801270e:	f000 f909 	bl	8012924 <tcp_output_segment>
 8012712:	4603      	mov	r3, r0
 8012714:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8012716:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801271a:	2b00      	cmp	r3, #0
 801271c:	d016      	beq.n	801274c <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	8b5b      	ldrh	r3, [r3, #26]
 8012722:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012726:	b29a      	uxth	r2, r3
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	835a      	strh	r2, [r3, #26]
      return err;
 801272c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012730:	e0d3      	b.n	80128da <tcp_output+0x3de>
 8012732:	bf00      	nop
 8012734:	080219bc 	.word	0x080219bc
 8012738:	08021f00 	.word	0x08021f00
 801273c:	08021a10 	.word	0x08021a10
 8012740:	08021f18 	.word	0x08021f18
 8012744:	20015204 	.word	0x20015204
 8012748:	08021f40 	.word	0x08021f40
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801274c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801274e:	681a      	ldr	r2, [r3, #0]
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	7d1b      	ldrb	r3, [r3, #20]
 8012758:	2b02      	cmp	r3, #2
 801275a:	d006      	beq.n	801276a <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	8b5b      	ldrh	r3, [r3, #26]
 8012760:	f023 0303 	bic.w	r3, r3, #3
 8012764:	b29a      	uxth	r2, r3
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801276a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801276c:	68db      	ldr	r3, [r3, #12]
 801276e:	685b      	ldr	r3, [r3, #4]
 8012770:	4618      	mov	r0, r3
 8012772:	f7f9 fad7 	bl	800bd24 <lwip_htonl>
 8012776:	4604      	mov	r4, r0
 8012778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801277a:	891b      	ldrh	r3, [r3, #8]
 801277c:	461d      	mov	r5, r3
 801277e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012780:	68db      	ldr	r3, [r3, #12]
 8012782:	899b      	ldrh	r3, [r3, #12]
 8012784:	b29b      	uxth	r3, r3
 8012786:	4618      	mov	r0, r3
 8012788:	f7f9 fab6 	bl	800bcf8 <lwip_htons>
 801278c:	4603      	mov	r3, r0
 801278e:	b2db      	uxtb	r3, r3
 8012790:	f003 0303 	and.w	r3, r3, #3
 8012794:	2b00      	cmp	r3, #0
 8012796:	d001      	beq.n	801279c <tcp_output+0x2a0>
 8012798:	2301      	movs	r3, #1
 801279a:	e000      	b.n	801279e <tcp_output+0x2a2>
 801279c:	2300      	movs	r3, #0
 801279e:	442b      	add	r3, r5
 80127a0:	4423      	add	r3, r4
 80127a2:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80127a8:	68bb      	ldr	r3, [r7, #8]
 80127aa:	1ad3      	subs	r3, r2, r3
 80127ac:	2b00      	cmp	r3, #0
 80127ae:	da02      	bge.n	80127b6 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	68ba      	ldr	r2, [r7, #8]
 80127b4:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80127b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80127b8:	891b      	ldrh	r3, [r3, #8]
 80127ba:	461c      	mov	r4, r3
 80127bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80127be:	68db      	ldr	r3, [r3, #12]
 80127c0:	899b      	ldrh	r3, [r3, #12]
 80127c2:	b29b      	uxth	r3, r3
 80127c4:	4618      	mov	r0, r3
 80127c6:	f7f9 fa97 	bl	800bcf8 <lwip_htons>
 80127ca:	4603      	mov	r3, r0
 80127cc:	b2db      	uxtb	r3, r3
 80127ce:	f003 0303 	and.w	r3, r3, #3
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	d001      	beq.n	80127da <tcp_output+0x2de>
 80127d6:	2301      	movs	r3, #1
 80127d8:	e000      	b.n	80127dc <tcp_output+0x2e0>
 80127da:	2300      	movs	r3, #0
 80127dc:	4423      	add	r3, r4
 80127de:	2b00      	cmp	r3, #0
 80127e0:	d049      	beq.n	8012876 <tcp_output+0x37a>
      seg->next = NULL;
 80127e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80127e4:	2200      	movs	r2, #0
 80127e6:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80127e8:	687b      	ldr	r3, [r7, #4]
 80127ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80127ec:	2b00      	cmp	r3, #0
 80127ee:	d105      	bne.n	80127fc <tcp_output+0x300>
        pcb->unacked = seg;
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80127f4:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 80127f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80127f8:	623b      	str	r3, [r7, #32]
 80127fa:	e03f      	b.n	801287c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80127fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80127fe:	68db      	ldr	r3, [r3, #12]
 8012800:	685b      	ldr	r3, [r3, #4]
 8012802:	4618      	mov	r0, r3
 8012804:	f7f9 fa8e 	bl	800bd24 <lwip_htonl>
 8012808:	4604      	mov	r4, r0
 801280a:	6a3b      	ldr	r3, [r7, #32]
 801280c:	68db      	ldr	r3, [r3, #12]
 801280e:	685b      	ldr	r3, [r3, #4]
 8012810:	4618      	mov	r0, r3
 8012812:	f7f9 fa87 	bl	800bd24 <lwip_htonl>
 8012816:	4603      	mov	r3, r0
 8012818:	1ae3      	subs	r3, r4, r3
 801281a:	2b00      	cmp	r3, #0
 801281c:	da24      	bge.n	8012868 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	3370      	adds	r3, #112	@ 0x70
 8012822:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012824:	e002      	b.n	801282c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8012826:	69fb      	ldr	r3, [r7, #28]
 8012828:	681b      	ldr	r3, [r3, #0]
 801282a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801282c:	69fb      	ldr	r3, [r7, #28]
 801282e:	681b      	ldr	r3, [r3, #0]
 8012830:	2b00      	cmp	r3, #0
 8012832:	d011      	beq.n	8012858 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012834:	69fb      	ldr	r3, [r7, #28]
 8012836:	681b      	ldr	r3, [r3, #0]
 8012838:	68db      	ldr	r3, [r3, #12]
 801283a:	685b      	ldr	r3, [r3, #4]
 801283c:	4618      	mov	r0, r3
 801283e:	f7f9 fa71 	bl	800bd24 <lwip_htonl>
 8012842:	4604      	mov	r4, r0
 8012844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012846:	68db      	ldr	r3, [r3, #12]
 8012848:	685b      	ldr	r3, [r3, #4]
 801284a:	4618      	mov	r0, r3
 801284c:	f7f9 fa6a 	bl	800bd24 <lwip_htonl>
 8012850:	4603      	mov	r3, r0
 8012852:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8012854:	2b00      	cmp	r3, #0
 8012856:	dbe6      	blt.n	8012826 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8012858:	69fb      	ldr	r3, [r7, #28]
 801285a:	681a      	ldr	r2, [r3, #0]
 801285c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801285e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8012860:	69fb      	ldr	r3, [r7, #28]
 8012862:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012864:	601a      	str	r2, [r3, #0]
 8012866:	e009      	b.n	801287c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8012868:	6a3b      	ldr	r3, [r7, #32]
 801286a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801286c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801286e:	6a3b      	ldr	r3, [r7, #32]
 8012870:	681b      	ldr	r3, [r3, #0]
 8012872:	623b      	str	r3, [r7, #32]
 8012874:	e002      	b.n	801287c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8012876:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012878:	f7fc fc45 	bl	800f106 <tcp_seg_free>
    }
    seg = pcb->unsent;
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012880:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 8012882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012884:	2b00      	cmp	r3, #0
 8012886:	d012      	beq.n	80128ae <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8012888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801288a:	68db      	ldr	r3, [r3, #12]
 801288c:	685b      	ldr	r3, [r3, #4]
 801288e:	4618      	mov	r0, r3
 8012890:	f7f9 fa48 	bl	800bd24 <lwip_htonl>
 8012894:	4602      	mov	r2, r0
 8012896:	687b      	ldr	r3, [r7, #4]
 8012898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801289a:	1ad3      	subs	r3, r2, r3
 801289c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801289e:	8912      	ldrh	r2, [r2, #8]
 80128a0:	4413      	add	r3, r2
  while (seg != NULL &&
 80128a2:	69ba      	ldr	r2, [r7, #24]
 80128a4:	429a      	cmp	r2, r3
 80128a6:	f4bf aed9 	bcs.w	801265c <tcp_output+0x160>
 80128aa:	e000      	b.n	80128ae <tcp_output+0x3b2>
      break;
 80128ac:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80128b2:	2b00      	cmp	r3, #0
 80128b4:	d108      	bne.n	80128c8 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	2200      	movs	r2, #0
 80128ba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 80128be:	e004      	b.n	80128ca <tcp_output+0x3ce>
    goto output_done;
 80128c0:	bf00      	nop
 80128c2:	e002      	b.n	80128ca <tcp_output+0x3ce>
    goto output_done;
 80128c4:	bf00      	nop
 80128c6:	e000      	b.n	80128ca <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80128c8:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	8b5b      	ldrh	r3, [r3, #26]
 80128ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80128d2:	b29a      	uxth	r2, r3
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80128d8:	2300      	movs	r3, #0
}
 80128da:	4618      	mov	r0, r3
 80128dc:	3728      	adds	r7, #40	@ 0x28
 80128de:	46bd      	mov	sp, r7
 80128e0:	bdb0      	pop	{r4, r5, r7, pc}
 80128e2:	bf00      	nop

080128e4 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80128e4:	b580      	push	{r7, lr}
 80128e6:	b082      	sub	sp, #8
 80128e8:	af00      	add	r7, sp, #0
 80128ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	d106      	bne.n	8012900 <tcp_output_segment_busy+0x1c>
 80128f2:	4b09      	ldr	r3, [pc, #36]	@ (8012918 <tcp_output_segment_busy+0x34>)
 80128f4:	f240 529a 	movw	r2, #1434	@ 0x59a
 80128f8:	4908      	ldr	r1, [pc, #32]	@ (801291c <tcp_output_segment_busy+0x38>)
 80128fa:	4809      	ldr	r0, [pc, #36]	@ (8012920 <tcp_output_segment_busy+0x3c>)
 80128fc:	f004 fe6e 	bl	80175dc <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8012900:	687b      	ldr	r3, [r7, #4]
 8012902:	685b      	ldr	r3, [r3, #4]
 8012904:	7b9b      	ldrb	r3, [r3, #14]
 8012906:	2b01      	cmp	r3, #1
 8012908:	d001      	beq.n	801290e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801290a:	2301      	movs	r3, #1
 801290c:	e000      	b.n	8012910 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801290e:	2300      	movs	r3, #0
}
 8012910:	4618      	mov	r0, r3
 8012912:	3708      	adds	r7, #8
 8012914:	46bd      	mov	sp, r7
 8012916:	bd80      	pop	{r7, pc}
 8012918:	080219bc 	.word	0x080219bc
 801291c:	08021f58 	.word	0x08021f58
 8012920:	08021a10 	.word	0x08021a10

08012924 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8012924:	b5b0      	push	{r4, r5, r7, lr}
 8012926:	b08c      	sub	sp, #48	@ 0x30
 8012928:	af04      	add	r7, sp, #16
 801292a:	60f8      	str	r0, [r7, #12]
 801292c:	60b9      	str	r1, [r7, #8]
 801292e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8012930:	68fb      	ldr	r3, [r7, #12]
 8012932:	2b00      	cmp	r3, #0
 8012934:	d106      	bne.n	8012944 <tcp_output_segment+0x20>
 8012936:	4b64      	ldr	r3, [pc, #400]	@ (8012ac8 <tcp_output_segment+0x1a4>)
 8012938:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 801293c:	4963      	ldr	r1, [pc, #396]	@ (8012acc <tcp_output_segment+0x1a8>)
 801293e:	4864      	ldr	r0, [pc, #400]	@ (8012ad0 <tcp_output_segment+0x1ac>)
 8012940:	f004 fe4c 	bl	80175dc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8012944:	68bb      	ldr	r3, [r7, #8]
 8012946:	2b00      	cmp	r3, #0
 8012948:	d106      	bne.n	8012958 <tcp_output_segment+0x34>
 801294a:	4b5f      	ldr	r3, [pc, #380]	@ (8012ac8 <tcp_output_segment+0x1a4>)
 801294c:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8012950:	4960      	ldr	r1, [pc, #384]	@ (8012ad4 <tcp_output_segment+0x1b0>)
 8012952:	485f      	ldr	r0, [pc, #380]	@ (8012ad0 <tcp_output_segment+0x1ac>)
 8012954:	f004 fe42 	bl	80175dc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	2b00      	cmp	r3, #0
 801295c:	d106      	bne.n	801296c <tcp_output_segment+0x48>
 801295e:	4b5a      	ldr	r3, [pc, #360]	@ (8012ac8 <tcp_output_segment+0x1a4>)
 8012960:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 8012964:	495c      	ldr	r1, [pc, #368]	@ (8012ad8 <tcp_output_segment+0x1b4>)
 8012966:	485a      	ldr	r0, [pc, #360]	@ (8012ad0 <tcp_output_segment+0x1ac>)
 8012968:	f004 fe38 	bl	80175dc <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801296c:	68f8      	ldr	r0, [r7, #12]
 801296e:	f7ff ffb9 	bl	80128e4 <tcp_output_segment_busy>
 8012972:	4603      	mov	r3, r0
 8012974:	2b00      	cmp	r3, #0
 8012976:	d001      	beq.n	801297c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8012978:	2300      	movs	r3, #0
 801297a:	e0a1      	b.n	8012ac0 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801297c:	68bb      	ldr	r3, [r7, #8]
 801297e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012980:	68fb      	ldr	r3, [r7, #12]
 8012982:	68dc      	ldr	r4, [r3, #12]
 8012984:	4610      	mov	r0, r2
 8012986:	f7f9 f9cd 	bl	800bd24 <lwip_htonl>
 801298a:	4603      	mov	r3, r0
 801298c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801298e:	68bb      	ldr	r3, [r7, #8]
 8012990:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8012992:	68fb      	ldr	r3, [r7, #12]
 8012994:	68dc      	ldr	r4, [r3, #12]
 8012996:	4610      	mov	r0, r2
 8012998:	f7f9 f9ae 	bl	800bcf8 <lwip_htons>
 801299c:	4603      	mov	r3, r0
 801299e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80129a0:	68bb      	ldr	r3, [r7, #8]
 80129a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80129a4:	68ba      	ldr	r2, [r7, #8]
 80129a6:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 80129a8:	441a      	add	r2, r3
 80129aa:	68bb      	ldr	r3, [r7, #8]
 80129ac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80129ae:	68fb      	ldr	r3, [r7, #12]
 80129b0:	68db      	ldr	r3, [r3, #12]
 80129b2:	3314      	adds	r3, #20
 80129b4:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80129b6:	68fb      	ldr	r3, [r7, #12]
 80129b8:	7a9b      	ldrb	r3, [r3, #10]
 80129ba:	f003 0301 	and.w	r3, r3, #1
 80129be:	2b00      	cmp	r3, #0
 80129c0:	d015      	beq.n	80129ee <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80129c2:	68bb      	ldr	r3, [r7, #8]
 80129c4:	3304      	adds	r3, #4
 80129c6:	461a      	mov	r2, r3
 80129c8:	6879      	ldr	r1, [r7, #4]
 80129ca:	f44f 7006 	mov.w	r0, #536	@ 0x218
 80129ce:	f7fc fe91 	bl	800f6f4 <tcp_eff_send_mss_netif>
 80129d2:	4603      	mov	r3, r0
 80129d4:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80129d6:	8b7b      	ldrh	r3, [r7, #26]
 80129d8:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 80129dc:	4618      	mov	r0, r3
 80129de:	f7f9 f9a1 	bl	800bd24 <lwip_htonl>
 80129e2:	4602      	mov	r2, r0
 80129e4:	69fb      	ldr	r3, [r7, #28]
 80129e6:	601a      	str	r2, [r3, #0]
    opts += 1;
 80129e8:	69fb      	ldr	r3, [r7, #28]
 80129ea:	3304      	adds	r3, #4
 80129ec:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80129ee:	68bb      	ldr	r3, [r7, #8]
 80129f0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80129f4:	2b00      	cmp	r3, #0
 80129f6:	da02      	bge.n	80129fe <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80129f8:	68bb      	ldr	r3, [r7, #8]
 80129fa:	2200      	movs	r2, #0
 80129fc:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 80129fe:	68bb      	ldr	r3, [r7, #8]
 8012a00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012a02:	2b00      	cmp	r3, #0
 8012a04:	d10c      	bne.n	8012a20 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8012a06:	4b35      	ldr	r3, [pc, #212]	@ (8012adc <tcp_output_segment+0x1b8>)
 8012a08:	681a      	ldr	r2, [r3, #0]
 8012a0a:	68bb      	ldr	r3, [r7, #8]
 8012a0c:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8012a0e:	68fb      	ldr	r3, [r7, #12]
 8012a10:	68db      	ldr	r3, [r3, #12]
 8012a12:	685b      	ldr	r3, [r3, #4]
 8012a14:	4618      	mov	r0, r3
 8012a16:	f7f9 f985 	bl	800bd24 <lwip_htonl>
 8012a1a:	4602      	mov	r2, r0
 8012a1c:	68bb      	ldr	r3, [r7, #8]
 8012a1e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8012a20:	68fb      	ldr	r3, [r7, #12]
 8012a22:	68da      	ldr	r2, [r3, #12]
 8012a24:	68fb      	ldr	r3, [r7, #12]
 8012a26:	685b      	ldr	r3, [r3, #4]
 8012a28:	685b      	ldr	r3, [r3, #4]
 8012a2a:	1ad3      	subs	r3, r2, r3
 8012a2c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8012a2e:	68fb      	ldr	r3, [r7, #12]
 8012a30:	685b      	ldr	r3, [r3, #4]
 8012a32:	8959      	ldrh	r1, [r3, #10]
 8012a34:	68fb      	ldr	r3, [r7, #12]
 8012a36:	685b      	ldr	r3, [r3, #4]
 8012a38:	8b3a      	ldrh	r2, [r7, #24]
 8012a3a:	1a8a      	subs	r2, r1, r2
 8012a3c:	b292      	uxth	r2, r2
 8012a3e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8012a40:	68fb      	ldr	r3, [r7, #12]
 8012a42:	685b      	ldr	r3, [r3, #4]
 8012a44:	8919      	ldrh	r1, [r3, #8]
 8012a46:	68fb      	ldr	r3, [r7, #12]
 8012a48:	685b      	ldr	r3, [r3, #4]
 8012a4a:	8b3a      	ldrh	r2, [r7, #24]
 8012a4c:	1a8a      	subs	r2, r1, r2
 8012a4e:	b292      	uxth	r2, r2
 8012a50:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8012a52:	68fb      	ldr	r3, [r7, #12]
 8012a54:	685b      	ldr	r3, [r3, #4]
 8012a56:	68fa      	ldr	r2, [r7, #12]
 8012a58:	68d2      	ldr	r2, [r2, #12]
 8012a5a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8012a5c:	68fb      	ldr	r3, [r7, #12]
 8012a5e:	68db      	ldr	r3, [r3, #12]
 8012a60:	2200      	movs	r2, #0
 8012a62:	741a      	strb	r2, [r3, #16]
 8012a64:	2200      	movs	r2, #0
 8012a66:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8012a68:	68fb      	ldr	r3, [r7, #12]
 8012a6a:	68da      	ldr	r2, [r3, #12]
 8012a6c:	68fb      	ldr	r3, [r7, #12]
 8012a6e:	7a9b      	ldrb	r3, [r3, #10]
 8012a70:	f003 0301 	and.w	r3, r3, #1
 8012a74:	2b00      	cmp	r3, #0
 8012a76:	d001      	beq.n	8012a7c <tcp_output_segment+0x158>
 8012a78:	2318      	movs	r3, #24
 8012a7a:	e000      	b.n	8012a7e <tcp_output_segment+0x15a>
 8012a7c:	2314      	movs	r3, #20
 8012a7e:	4413      	add	r3, r2
 8012a80:	69fa      	ldr	r2, [r7, #28]
 8012a82:	429a      	cmp	r2, r3
 8012a84:	d006      	beq.n	8012a94 <tcp_output_segment+0x170>
 8012a86:	4b10      	ldr	r3, [pc, #64]	@ (8012ac8 <tcp_output_segment+0x1a4>)
 8012a88:	f240 621c 	movw	r2, #1564	@ 0x61c
 8012a8c:	4914      	ldr	r1, [pc, #80]	@ (8012ae0 <tcp_output_segment+0x1bc>)
 8012a8e:	4810      	ldr	r0, [pc, #64]	@ (8012ad0 <tcp_output_segment+0x1ac>)
 8012a90:	f004 fda4 	bl	80175dc <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8012a94:	68fb      	ldr	r3, [r7, #12]
 8012a96:	6858      	ldr	r0, [r3, #4]
 8012a98:	68b9      	ldr	r1, [r7, #8]
 8012a9a:	68bb      	ldr	r3, [r7, #8]
 8012a9c:	1d1c      	adds	r4, r3, #4
 8012a9e:	68bb      	ldr	r3, [r7, #8]
 8012aa0:	7add      	ldrb	r5, [r3, #11]
 8012aa2:	68bb      	ldr	r3, [r7, #8]
 8012aa4:	7a9b      	ldrb	r3, [r3, #10]
 8012aa6:	687a      	ldr	r2, [r7, #4]
 8012aa8:	9202      	str	r2, [sp, #8]
 8012aaa:	2206      	movs	r2, #6
 8012aac:	9201      	str	r2, [sp, #4]
 8012aae:	9300      	str	r3, [sp, #0]
 8012ab0:	462b      	mov	r3, r5
 8012ab2:	4622      	mov	r2, r4
 8012ab4:	f002 fdc6 	bl	8015644 <ip4_output_if>
 8012ab8:	4603      	mov	r3, r0
 8012aba:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8012abc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012ac0:	4618      	mov	r0, r3
 8012ac2:	3720      	adds	r7, #32
 8012ac4:	46bd      	mov	sp, r7
 8012ac6:	bdb0      	pop	{r4, r5, r7, pc}
 8012ac8:	080219bc 	.word	0x080219bc
 8012acc:	08021f80 	.word	0x08021f80
 8012ad0:	08021a10 	.word	0x08021a10
 8012ad4:	08021fa0 	.word	0x08021fa0
 8012ad8:	08021fc0 	.word	0x08021fc0
 8012adc:	200151b8 	.word	0x200151b8
 8012ae0:	08021fe4 	.word	0x08021fe4

08012ae4 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8012ae4:	b5b0      	push	{r4, r5, r7, lr}
 8012ae6:	b084      	sub	sp, #16
 8012ae8:	af00      	add	r7, sp, #0
 8012aea:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8012aec:	687b      	ldr	r3, [r7, #4]
 8012aee:	2b00      	cmp	r3, #0
 8012af0:	d106      	bne.n	8012b00 <tcp_rexmit_rto_prepare+0x1c>
 8012af2:	4b31      	ldr	r3, [pc, #196]	@ (8012bb8 <tcp_rexmit_rto_prepare+0xd4>)
 8012af4:	f240 6263 	movw	r2, #1635	@ 0x663
 8012af8:	4930      	ldr	r1, [pc, #192]	@ (8012bbc <tcp_rexmit_rto_prepare+0xd8>)
 8012afa:	4831      	ldr	r0, [pc, #196]	@ (8012bc0 <tcp_rexmit_rto_prepare+0xdc>)
 8012afc:	f004 fd6e 	bl	80175dc <iprintf>

  if (pcb->unacked == NULL) {
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012b04:	2b00      	cmp	r3, #0
 8012b06:	d102      	bne.n	8012b0e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8012b08:	f06f 0305 	mvn.w	r3, #5
 8012b0c:	e050      	b.n	8012bb0 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012b12:	60fb      	str	r3, [r7, #12]
 8012b14:	e00b      	b.n	8012b2e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8012b16:	68f8      	ldr	r0, [r7, #12]
 8012b18:	f7ff fee4 	bl	80128e4 <tcp_output_segment_busy>
 8012b1c:	4603      	mov	r3, r0
 8012b1e:	2b00      	cmp	r3, #0
 8012b20:	d002      	beq.n	8012b28 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8012b22:	f06f 0305 	mvn.w	r3, #5
 8012b26:	e043      	b.n	8012bb0 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8012b28:	68fb      	ldr	r3, [r7, #12]
 8012b2a:	681b      	ldr	r3, [r3, #0]
 8012b2c:	60fb      	str	r3, [r7, #12]
 8012b2e:	68fb      	ldr	r3, [r7, #12]
 8012b30:	681b      	ldr	r3, [r3, #0]
 8012b32:	2b00      	cmp	r3, #0
 8012b34:	d1ef      	bne.n	8012b16 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8012b36:	68f8      	ldr	r0, [r7, #12]
 8012b38:	f7ff fed4 	bl	80128e4 <tcp_output_segment_busy>
 8012b3c:	4603      	mov	r3, r0
 8012b3e:	2b00      	cmp	r3, #0
 8012b40:	d002      	beq.n	8012b48 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8012b42:	f06f 0305 	mvn.w	r3, #5
 8012b46:	e033      	b.n	8012bb0 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8012b4c:	68fb      	ldr	r3, [r7, #12]
 8012b4e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	2200      	movs	r2, #0
 8012b5c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	8b5b      	ldrh	r3, [r3, #26]
 8012b62:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8012b66:	b29a      	uxth	r2, r3
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8012b6c:	68fb      	ldr	r3, [r7, #12]
 8012b6e:	68db      	ldr	r3, [r3, #12]
 8012b70:	685b      	ldr	r3, [r3, #4]
 8012b72:	4618      	mov	r0, r3
 8012b74:	f7f9 f8d6 	bl	800bd24 <lwip_htonl>
 8012b78:	4604      	mov	r4, r0
 8012b7a:	68fb      	ldr	r3, [r7, #12]
 8012b7c:	891b      	ldrh	r3, [r3, #8]
 8012b7e:	461d      	mov	r5, r3
 8012b80:	68fb      	ldr	r3, [r7, #12]
 8012b82:	68db      	ldr	r3, [r3, #12]
 8012b84:	899b      	ldrh	r3, [r3, #12]
 8012b86:	b29b      	uxth	r3, r3
 8012b88:	4618      	mov	r0, r3
 8012b8a:	f7f9 f8b5 	bl	800bcf8 <lwip_htons>
 8012b8e:	4603      	mov	r3, r0
 8012b90:	b2db      	uxtb	r3, r3
 8012b92:	f003 0303 	and.w	r3, r3, #3
 8012b96:	2b00      	cmp	r3, #0
 8012b98:	d001      	beq.n	8012b9e <tcp_rexmit_rto_prepare+0xba>
 8012b9a:	2301      	movs	r3, #1
 8012b9c:	e000      	b.n	8012ba0 <tcp_rexmit_rto_prepare+0xbc>
 8012b9e:	2300      	movs	r3, #0
 8012ba0:	442b      	add	r3, r5
 8012ba2:	18e2      	adds	r2, r4, r3
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	2200      	movs	r2, #0
 8012bac:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 8012bae:	2300      	movs	r3, #0
}
 8012bb0:	4618      	mov	r0, r3
 8012bb2:	3710      	adds	r7, #16
 8012bb4:	46bd      	mov	sp, r7
 8012bb6:	bdb0      	pop	{r4, r5, r7, pc}
 8012bb8:	080219bc 	.word	0x080219bc
 8012bbc:	08021ff8 	.word	0x08021ff8
 8012bc0:	08021a10 	.word	0x08021a10

08012bc4 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8012bc4:	b580      	push	{r7, lr}
 8012bc6:	b082      	sub	sp, #8
 8012bc8:	af00      	add	r7, sp, #0
 8012bca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	2b00      	cmp	r3, #0
 8012bd0:	d106      	bne.n	8012be0 <tcp_rexmit_rto_commit+0x1c>
 8012bd2:	4b0d      	ldr	r3, [pc, #52]	@ (8012c08 <tcp_rexmit_rto_commit+0x44>)
 8012bd4:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8012bd8:	490c      	ldr	r1, [pc, #48]	@ (8012c0c <tcp_rexmit_rto_commit+0x48>)
 8012bda:	480d      	ldr	r0, [pc, #52]	@ (8012c10 <tcp_rexmit_rto_commit+0x4c>)
 8012bdc:	f004 fcfe 	bl	80175dc <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8012be0:	687b      	ldr	r3, [r7, #4]
 8012be2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012be6:	2bff      	cmp	r3, #255	@ 0xff
 8012be8:	d007      	beq.n	8012bfa <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012bf0:	3301      	adds	r3, #1
 8012bf2:	b2da      	uxtb	r2, r3
 8012bf4:	687b      	ldr	r3, [r7, #4]
 8012bf6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8012bfa:	6878      	ldr	r0, [r7, #4]
 8012bfc:	f7ff fc7e 	bl	80124fc <tcp_output>
}
 8012c00:	bf00      	nop
 8012c02:	3708      	adds	r7, #8
 8012c04:	46bd      	mov	sp, r7
 8012c06:	bd80      	pop	{r7, pc}
 8012c08:	080219bc 	.word	0x080219bc
 8012c0c:	0802201c 	.word	0x0802201c
 8012c10:	08021a10 	.word	0x08021a10

08012c14 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8012c14:	b580      	push	{r7, lr}
 8012c16:	b082      	sub	sp, #8
 8012c18:	af00      	add	r7, sp, #0
 8012c1a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	2b00      	cmp	r3, #0
 8012c20:	d106      	bne.n	8012c30 <tcp_rexmit_rto+0x1c>
 8012c22:	4b0a      	ldr	r3, [pc, #40]	@ (8012c4c <tcp_rexmit_rto+0x38>)
 8012c24:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 8012c28:	4909      	ldr	r1, [pc, #36]	@ (8012c50 <tcp_rexmit_rto+0x3c>)
 8012c2a:	480a      	ldr	r0, [pc, #40]	@ (8012c54 <tcp_rexmit_rto+0x40>)
 8012c2c:	f004 fcd6 	bl	80175dc <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8012c30:	6878      	ldr	r0, [r7, #4]
 8012c32:	f7ff ff57 	bl	8012ae4 <tcp_rexmit_rto_prepare>
 8012c36:	4603      	mov	r3, r0
 8012c38:	2b00      	cmp	r3, #0
 8012c3a:	d102      	bne.n	8012c42 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8012c3c:	6878      	ldr	r0, [r7, #4]
 8012c3e:	f7ff ffc1 	bl	8012bc4 <tcp_rexmit_rto_commit>
  }
}
 8012c42:	bf00      	nop
 8012c44:	3708      	adds	r7, #8
 8012c46:	46bd      	mov	sp, r7
 8012c48:	bd80      	pop	{r7, pc}
 8012c4a:	bf00      	nop
 8012c4c:	080219bc 	.word	0x080219bc
 8012c50:	08022040 	.word	0x08022040
 8012c54:	08021a10 	.word	0x08021a10

08012c58 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8012c58:	b590      	push	{r4, r7, lr}
 8012c5a:	b085      	sub	sp, #20
 8012c5c:	af00      	add	r7, sp, #0
 8012c5e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	2b00      	cmp	r3, #0
 8012c64:	d106      	bne.n	8012c74 <tcp_rexmit+0x1c>
 8012c66:	4b2f      	ldr	r3, [pc, #188]	@ (8012d24 <tcp_rexmit+0xcc>)
 8012c68:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 8012c6c:	492e      	ldr	r1, [pc, #184]	@ (8012d28 <tcp_rexmit+0xd0>)
 8012c6e:	482f      	ldr	r0, [pc, #188]	@ (8012d2c <tcp_rexmit+0xd4>)
 8012c70:	f004 fcb4 	bl	80175dc <iprintf>

  if (pcb->unacked == NULL) {
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	d102      	bne.n	8012c82 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8012c7c:	f06f 0305 	mvn.w	r3, #5
 8012c80:	e04c      	b.n	8012d1c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012c86:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8012c88:	68b8      	ldr	r0, [r7, #8]
 8012c8a:	f7ff fe2b 	bl	80128e4 <tcp_output_segment_busy>
 8012c8e:	4603      	mov	r3, r0
 8012c90:	2b00      	cmp	r3, #0
 8012c92:	d002      	beq.n	8012c9a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8012c94:	f06f 0305 	mvn.w	r3, #5
 8012c98:	e040      	b.n	8012d1c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8012c9a:	68bb      	ldr	r3, [r7, #8]
 8012c9c:	681a      	ldr	r2, [r3, #0]
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	336c      	adds	r3, #108	@ 0x6c
 8012ca6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012ca8:	e002      	b.n	8012cb0 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8012caa:	68fb      	ldr	r3, [r7, #12]
 8012cac:	681b      	ldr	r3, [r3, #0]
 8012cae:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012cb0:	68fb      	ldr	r3, [r7, #12]
 8012cb2:	681b      	ldr	r3, [r3, #0]
 8012cb4:	2b00      	cmp	r3, #0
 8012cb6:	d011      	beq.n	8012cdc <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012cb8:	68fb      	ldr	r3, [r7, #12]
 8012cba:	681b      	ldr	r3, [r3, #0]
 8012cbc:	68db      	ldr	r3, [r3, #12]
 8012cbe:	685b      	ldr	r3, [r3, #4]
 8012cc0:	4618      	mov	r0, r3
 8012cc2:	f7f9 f82f 	bl	800bd24 <lwip_htonl>
 8012cc6:	4604      	mov	r4, r0
 8012cc8:	68bb      	ldr	r3, [r7, #8]
 8012cca:	68db      	ldr	r3, [r3, #12]
 8012ccc:	685b      	ldr	r3, [r3, #4]
 8012cce:	4618      	mov	r0, r3
 8012cd0:	f7f9 f828 	bl	800bd24 <lwip_htonl>
 8012cd4:	4603      	mov	r3, r0
 8012cd6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8012cd8:	2b00      	cmp	r3, #0
 8012cda:	dbe6      	blt.n	8012caa <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8012cdc:	68fb      	ldr	r3, [r7, #12]
 8012cde:	681a      	ldr	r2, [r3, #0]
 8012ce0:	68bb      	ldr	r3, [r7, #8]
 8012ce2:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8012ce4:	68fb      	ldr	r3, [r7, #12]
 8012ce6:	68ba      	ldr	r2, [r7, #8]
 8012ce8:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8012cea:	68bb      	ldr	r3, [r7, #8]
 8012cec:	681b      	ldr	r3, [r3, #0]
 8012cee:	2b00      	cmp	r3, #0
 8012cf0:	d103      	bne.n	8012cfa <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	2200      	movs	r2, #0
 8012cf6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012d00:	2bff      	cmp	r3, #255	@ 0xff
 8012d02:	d007      	beq.n	8012d14 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8012d04:	687b      	ldr	r3, [r7, #4]
 8012d06:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012d0a:	3301      	adds	r3, #1
 8012d0c:	b2da      	uxtb	r2, r3
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8012d14:	687b      	ldr	r3, [r7, #4]
 8012d16:	2200      	movs	r2, #0
 8012d18:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8012d1a:	2300      	movs	r3, #0
}
 8012d1c:	4618      	mov	r0, r3
 8012d1e:	3714      	adds	r7, #20
 8012d20:	46bd      	mov	sp, r7
 8012d22:	bd90      	pop	{r4, r7, pc}
 8012d24:	080219bc 	.word	0x080219bc
 8012d28:	0802205c 	.word	0x0802205c
 8012d2c:	08021a10 	.word	0x08021a10

08012d30 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8012d30:	b580      	push	{r7, lr}
 8012d32:	b082      	sub	sp, #8
 8012d34:	af00      	add	r7, sp, #0
 8012d36:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	2b00      	cmp	r3, #0
 8012d3c:	d106      	bne.n	8012d4c <tcp_rexmit_fast+0x1c>
 8012d3e:	4b2a      	ldr	r3, [pc, #168]	@ (8012de8 <tcp_rexmit_fast+0xb8>)
 8012d40:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 8012d44:	4929      	ldr	r1, [pc, #164]	@ (8012dec <tcp_rexmit_fast+0xbc>)
 8012d46:	482a      	ldr	r0, [pc, #168]	@ (8012df0 <tcp_rexmit_fast+0xc0>)
 8012d48:	f004 fc48 	bl	80175dc <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012d50:	2b00      	cmp	r3, #0
 8012d52:	d044      	beq.n	8012dde <tcp_rexmit_fast+0xae>
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	8b5b      	ldrh	r3, [r3, #26]
 8012d58:	f003 0304 	and.w	r3, r3, #4
 8012d5c:	2b00      	cmp	r3, #0
 8012d5e:	d13e      	bne.n	8012dde <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8012d60:	6878      	ldr	r0, [r7, #4]
 8012d62:	f7ff ff79 	bl	8012c58 <tcp_rexmit>
 8012d66:	4603      	mov	r3, r0
 8012d68:	2b00      	cmp	r3, #0
 8012d6a:	d138      	bne.n	8012dde <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8012d78:	4293      	cmp	r3, r2
 8012d7a:	bf28      	it	cs
 8012d7c:	4613      	movcs	r3, r2
 8012d7e:	b29b      	uxth	r3, r3
 8012d80:	0fda      	lsrs	r2, r3, #31
 8012d82:	4413      	add	r3, r2
 8012d84:	105b      	asrs	r3, r3, #1
 8012d86:	b29a      	uxth	r2, r3
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8012d8e:	687b      	ldr	r3, [r7, #4]
 8012d90:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8012d94:	461a      	mov	r2, r3
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012d9a:	005b      	lsls	r3, r3, #1
 8012d9c:	429a      	cmp	r2, r3
 8012d9e:	d206      	bcs.n	8012dae <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012da4:	005b      	lsls	r3, r3, #1
 8012da6:	b29a      	uxth	r2, r3
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012db8:	4619      	mov	r1, r3
 8012dba:	0049      	lsls	r1, r1, #1
 8012dbc:	440b      	add	r3, r1
 8012dbe:	b29b      	uxth	r3, r3
 8012dc0:	4413      	add	r3, r2
 8012dc2:	b29a      	uxth	r2, r3
 8012dc4:	687b      	ldr	r3, [r7, #4]
 8012dc6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	8b5b      	ldrh	r3, [r3, #26]
 8012dce:	f043 0304 	orr.w	r3, r3, #4
 8012dd2:	b29a      	uxth	r2, r3
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8012dd8:	687b      	ldr	r3, [r7, #4]
 8012dda:	2200      	movs	r2, #0
 8012ddc:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8012dde:	bf00      	nop
 8012de0:	3708      	adds	r7, #8
 8012de2:	46bd      	mov	sp, r7
 8012de4:	bd80      	pop	{r7, pc}
 8012de6:	bf00      	nop
 8012de8:	080219bc 	.word	0x080219bc
 8012dec:	08022074 	.word	0x08022074
 8012df0:	08021a10 	.word	0x08021a10

08012df4 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8012df4:	b580      	push	{r7, lr}
 8012df6:	b086      	sub	sp, #24
 8012df8:	af00      	add	r7, sp, #0
 8012dfa:	60f8      	str	r0, [r7, #12]
 8012dfc:	607b      	str	r3, [r7, #4]
 8012dfe:	460b      	mov	r3, r1
 8012e00:	817b      	strh	r3, [r7, #10]
 8012e02:	4613      	mov	r3, r2
 8012e04:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8012e06:	897a      	ldrh	r2, [r7, #10]
 8012e08:	893b      	ldrh	r3, [r7, #8]
 8012e0a:	4413      	add	r3, r2
 8012e0c:	b29b      	uxth	r3, r3
 8012e0e:	3314      	adds	r3, #20
 8012e10:	b29b      	uxth	r3, r3
 8012e12:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8012e16:	4619      	mov	r1, r3
 8012e18:	2022      	movs	r0, #34	@ 0x22
 8012e1a:	f7fa fab1 	bl	800d380 <pbuf_alloc>
 8012e1e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8012e20:	697b      	ldr	r3, [r7, #20]
 8012e22:	2b00      	cmp	r3, #0
 8012e24:	d04d      	beq.n	8012ec2 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8012e26:	897b      	ldrh	r3, [r7, #10]
 8012e28:	3313      	adds	r3, #19
 8012e2a:	697a      	ldr	r2, [r7, #20]
 8012e2c:	8952      	ldrh	r2, [r2, #10]
 8012e2e:	4293      	cmp	r3, r2
 8012e30:	db06      	blt.n	8012e40 <tcp_output_alloc_header_common+0x4c>
 8012e32:	4b26      	ldr	r3, [pc, #152]	@ (8012ecc <tcp_output_alloc_header_common+0xd8>)
 8012e34:	f240 7223 	movw	r2, #1827	@ 0x723
 8012e38:	4925      	ldr	r1, [pc, #148]	@ (8012ed0 <tcp_output_alloc_header_common+0xdc>)
 8012e3a:	4826      	ldr	r0, [pc, #152]	@ (8012ed4 <tcp_output_alloc_header_common+0xe0>)
 8012e3c:	f004 fbce 	bl	80175dc <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8012e40:	697b      	ldr	r3, [r7, #20]
 8012e42:	685b      	ldr	r3, [r3, #4]
 8012e44:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8012e46:	8c3b      	ldrh	r3, [r7, #32]
 8012e48:	4618      	mov	r0, r3
 8012e4a:	f7f8 ff55 	bl	800bcf8 <lwip_htons>
 8012e4e:	4603      	mov	r3, r0
 8012e50:	461a      	mov	r2, r3
 8012e52:	693b      	ldr	r3, [r7, #16]
 8012e54:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8012e56:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012e58:	4618      	mov	r0, r3
 8012e5a:	f7f8 ff4d 	bl	800bcf8 <lwip_htons>
 8012e5e:	4603      	mov	r3, r0
 8012e60:	461a      	mov	r2, r3
 8012e62:	693b      	ldr	r3, [r7, #16]
 8012e64:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8012e66:	693b      	ldr	r3, [r7, #16]
 8012e68:	687a      	ldr	r2, [r7, #4]
 8012e6a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8012e6c:	68f8      	ldr	r0, [r7, #12]
 8012e6e:	f7f8 ff59 	bl	800bd24 <lwip_htonl>
 8012e72:	4602      	mov	r2, r0
 8012e74:	693b      	ldr	r3, [r7, #16]
 8012e76:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8012e78:	897b      	ldrh	r3, [r7, #10]
 8012e7a:	089b      	lsrs	r3, r3, #2
 8012e7c:	b29b      	uxth	r3, r3
 8012e7e:	3305      	adds	r3, #5
 8012e80:	b29b      	uxth	r3, r3
 8012e82:	031b      	lsls	r3, r3, #12
 8012e84:	b29a      	uxth	r2, r3
 8012e86:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8012e8a:	b29b      	uxth	r3, r3
 8012e8c:	4313      	orrs	r3, r2
 8012e8e:	b29b      	uxth	r3, r3
 8012e90:	4618      	mov	r0, r3
 8012e92:	f7f8 ff31 	bl	800bcf8 <lwip_htons>
 8012e96:	4603      	mov	r3, r0
 8012e98:	461a      	mov	r2, r3
 8012e9a:	693b      	ldr	r3, [r7, #16]
 8012e9c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8012e9e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8012ea0:	4618      	mov	r0, r3
 8012ea2:	f7f8 ff29 	bl	800bcf8 <lwip_htons>
 8012ea6:	4603      	mov	r3, r0
 8012ea8:	461a      	mov	r2, r3
 8012eaa:	693b      	ldr	r3, [r7, #16]
 8012eac:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8012eae:	693b      	ldr	r3, [r7, #16]
 8012eb0:	2200      	movs	r2, #0
 8012eb2:	741a      	strb	r2, [r3, #16]
 8012eb4:	2200      	movs	r2, #0
 8012eb6:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8012eb8:	693b      	ldr	r3, [r7, #16]
 8012eba:	2200      	movs	r2, #0
 8012ebc:	749a      	strb	r2, [r3, #18]
 8012ebe:	2200      	movs	r2, #0
 8012ec0:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8012ec2:	697b      	ldr	r3, [r7, #20]
}
 8012ec4:	4618      	mov	r0, r3
 8012ec6:	3718      	adds	r7, #24
 8012ec8:	46bd      	mov	sp, r7
 8012eca:	bd80      	pop	{r7, pc}
 8012ecc:	080219bc 	.word	0x080219bc
 8012ed0:	08022094 	.word	0x08022094
 8012ed4:	08021a10 	.word	0x08021a10

08012ed8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8012ed8:	b5b0      	push	{r4, r5, r7, lr}
 8012eda:	b08a      	sub	sp, #40	@ 0x28
 8012edc:	af04      	add	r7, sp, #16
 8012ede:	60f8      	str	r0, [r7, #12]
 8012ee0:	607b      	str	r3, [r7, #4]
 8012ee2:	460b      	mov	r3, r1
 8012ee4:	817b      	strh	r3, [r7, #10]
 8012ee6:	4613      	mov	r3, r2
 8012ee8:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8012eea:	68fb      	ldr	r3, [r7, #12]
 8012eec:	2b00      	cmp	r3, #0
 8012eee:	d106      	bne.n	8012efe <tcp_output_alloc_header+0x26>
 8012ef0:	4b15      	ldr	r3, [pc, #84]	@ (8012f48 <tcp_output_alloc_header+0x70>)
 8012ef2:	f240 7242 	movw	r2, #1858	@ 0x742
 8012ef6:	4915      	ldr	r1, [pc, #84]	@ (8012f4c <tcp_output_alloc_header+0x74>)
 8012ef8:	4815      	ldr	r0, [pc, #84]	@ (8012f50 <tcp_output_alloc_header+0x78>)
 8012efa:	f004 fb6f 	bl	80175dc <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8012efe:	68fb      	ldr	r3, [r7, #12]
 8012f00:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8012f02:	68fb      	ldr	r3, [r7, #12]
 8012f04:	8adb      	ldrh	r3, [r3, #22]
 8012f06:	68fa      	ldr	r2, [r7, #12]
 8012f08:	8b12      	ldrh	r2, [r2, #24]
 8012f0a:	68f9      	ldr	r1, [r7, #12]
 8012f0c:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 8012f0e:	893d      	ldrh	r5, [r7, #8]
 8012f10:	897c      	ldrh	r4, [r7, #10]
 8012f12:	9103      	str	r1, [sp, #12]
 8012f14:	2110      	movs	r1, #16
 8012f16:	9102      	str	r1, [sp, #8]
 8012f18:	9201      	str	r2, [sp, #4]
 8012f1a:	9300      	str	r3, [sp, #0]
 8012f1c:	687b      	ldr	r3, [r7, #4]
 8012f1e:	462a      	mov	r2, r5
 8012f20:	4621      	mov	r1, r4
 8012f22:	f7ff ff67 	bl	8012df4 <tcp_output_alloc_header_common>
 8012f26:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8012f28:	697b      	ldr	r3, [r7, #20]
 8012f2a:	2b00      	cmp	r3, #0
 8012f2c:	d006      	beq.n	8012f3c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012f2e:	68fb      	ldr	r3, [r7, #12]
 8012f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012f32:	68fa      	ldr	r2, [r7, #12]
 8012f34:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8012f36:	441a      	add	r2, r3
 8012f38:	68fb      	ldr	r3, [r7, #12]
 8012f3a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 8012f3c:	697b      	ldr	r3, [r7, #20]
}
 8012f3e:	4618      	mov	r0, r3
 8012f40:	3718      	adds	r7, #24
 8012f42:	46bd      	mov	sp, r7
 8012f44:	bdb0      	pop	{r4, r5, r7, pc}
 8012f46:	bf00      	nop
 8012f48:	080219bc 	.word	0x080219bc
 8012f4c:	080220c4 	.word	0x080220c4
 8012f50:	08021a10 	.word	0x08021a10

08012f54 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8012f54:	b580      	push	{r7, lr}
 8012f56:	b088      	sub	sp, #32
 8012f58:	af00      	add	r7, sp, #0
 8012f5a:	60f8      	str	r0, [r7, #12]
 8012f5c:	60b9      	str	r1, [r7, #8]
 8012f5e:	4611      	mov	r1, r2
 8012f60:	461a      	mov	r2, r3
 8012f62:	460b      	mov	r3, r1
 8012f64:	71fb      	strb	r3, [r7, #7]
 8012f66:	4613      	mov	r3, r2
 8012f68:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8012f6a:	2300      	movs	r3, #0
 8012f6c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8012f6e:	68bb      	ldr	r3, [r7, #8]
 8012f70:	2b00      	cmp	r3, #0
 8012f72:	d106      	bne.n	8012f82 <tcp_output_fill_options+0x2e>
 8012f74:	4b12      	ldr	r3, [pc, #72]	@ (8012fc0 <tcp_output_fill_options+0x6c>)
 8012f76:	f240 7256 	movw	r2, #1878	@ 0x756
 8012f7a:	4912      	ldr	r1, [pc, #72]	@ (8012fc4 <tcp_output_fill_options+0x70>)
 8012f7c:	4812      	ldr	r0, [pc, #72]	@ (8012fc8 <tcp_output_fill_options+0x74>)
 8012f7e:	f004 fb2d 	bl	80175dc <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8012f82:	68bb      	ldr	r3, [r7, #8]
 8012f84:	685b      	ldr	r3, [r3, #4]
 8012f86:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8012f88:	69bb      	ldr	r3, [r7, #24]
 8012f8a:	3314      	adds	r3, #20
 8012f8c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8012f8e:	8bfb      	ldrh	r3, [r7, #30]
 8012f90:	009b      	lsls	r3, r3, #2
 8012f92:	461a      	mov	r2, r3
 8012f94:	79fb      	ldrb	r3, [r7, #7]
 8012f96:	009b      	lsls	r3, r3, #2
 8012f98:	f003 0304 	and.w	r3, r3, #4
 8012f9c:	4413      	add	r3, r2
 8012f9e:	3314      	adds	r3, #20
 8012fa0:	69ba      	ldr	r2, [r7, #24]
 8012fa2:	4413      	add	r3, r2
 8012fa4:	697a      	ldr	r2, [r7, #20]
 8012fa6:	429a      	cmp	r2, r3
 8012fa8:	d006      	beq.n	8012fb8 <tcp_output_fill_options+0x64>
 8012faa:	4b05      	ldr	r3, [pc, #20]	@ (8012fc0 <tcp_output_fill_options+0x6c>)
 8012fac:	f240 7275 	movw	r2, #1909	@ 0x775
 8012fb0:	4906      	ldr	r1, [pc, #24]	@ (8012fcc <tcp_output_fill_options+0x78>)
 8012fb2:	4805      	ldr	r0, [pc, #20]	@ (8012fc8 <tcp_output_fill_options+0x74>)
 8012fb4:	f004 fb12 	bl	80175dc <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8012fb8:	bf00      	nop
 8012fba:	3720      	adds	r7, #32
 8012fbc:	46bd      	mov	sp, r7
 8012fbe:	bd80      	pop	{r7, pc}
 8012fc0:	080219bc 	.word	0x080219bc
 8012fc4:	080220ec 	.word	0x080220ec
 8012fc8:	08021a10 	.word	0x08021a10
 8012fcc:	08021fe4 	.word	0x08021fe4

08012fd0 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8012fd0:	b580      	push	{r7, lr}
 8012fd2:	b08a      	sub	sp, #40	@ 0x28
 8012fd4:	af04      	add	r7, sp, #16
 8012fd6:	60f8      	str	r0, [r7, #12]
 8012fd8:	60b9      	str	r1, [r7, #8]
 8012fda:	607a      	str	r2, [r7, #4]
 8012fdc:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8012fde:	68bb      	ldr	r3, [r7, #8]
 8012fe0:	2b00      	cmp	r3, #0
 8012fe2:	d106      	bne.n	8012ff2 <tcp_output_control_segment+0x22>
 8012fe4:	4b1c      	ldr	r3, [pc, #112]	@ (8013058 <tcp_output_control_segment+0x88>)
 8012fe6:	f240 7287 	movw	r2, #1927	@ 0x787
 8012fea:	491c      	ldr	r1, [pc, #112]	@ (801305c <tcp_output_control_segment+0x8c>)
 8012fec:	481c      	ldr	r0, [pc, #112]	@ (8013060 <tcp_output_control_segment+0x90>)
 8012fee:	f004 faf5 	bl	80175dc <iprintf>

  netif = tcp_route(pcb, src, dst);
 8012ff2:	683a      	ldr	r2, [r7, #0]
 8012ff4:	6879      	ldr	r1, [r7, #4]
 8012ff6:	68f8      	ldr	r0, [r7, #12]
 8012ff8:	f7fe ff42 	bl	8011e80 <tcp_route>
 8012ffc:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8012ffe:	693b      	ldr	r3, [r7, #16]
 8013000:	2b00      	cmp	r3, #0
 8013002:	d102      	bne.n	801300a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8013004:	23fc      	movs	r3, #252	@ 0xfc
 8013006:	75fb      	strb	r3, [r7, #23]
 8013008:	e01c      	b.n	8013044 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801300a:	68fb      	ldr	r3, [r7, #12]
 801300c:	2b00      	cmp	r3, #0
 801300e:	d006      	beq.n	801301e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8013010:	68fb      	ldr	r3, [r7, #12]
 8013012:	7adb      	ldrb	r3, [r3, #11]
 8013014:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8013016:	68fb      	ldr	r3, [r7, #12]
 8013018:	7a9b      	ldrb	r3, [r3, #10]
 801301a:	757b      	strb	r3, [r7, #21]
 801301c:	e003      	b.n	8013026 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801301e:	23ff      	movs	r3, #255	@ 0xff
 8013020:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8013022:	2300      	movs	r3, #0
 8013024:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8013026:	7dba      	ldrb	r2, [r7, #22]
 8013028:	693b      	ldr	r3, [r7, #16]
 801302a:	9302      	str	r3, [sp, #8]
 801302c:	2306      	movs	r3, #6
 801302e:	9301      	str	r3, [sp, #4]
 8013030:	7d7b      	ldrb	r3, [r7, #21]
 8013032:	9300      	str	r3, [sp, #0]
 8013034:	4613      	mov	r3, r2
 8013036:	683a      	ldr	r2, [r7, #0]
 8013038:	6879      	ldr	r1, [r7, #4]
 801303a:	68b8      	ldr	r0, [r7, #8]
 801303c:	f002 fb02 	bl	8015644 <ip4_output_if>
 8013040:	4603      	mov	r3, r0
 8013042:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8013044:	68b8      	ldr	r0, [r7, #8]
 8013046:	f7fa fc7f 	bl	800d948 <pbuf_free>
  return err;
 801304a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801304e:	4618      	mov	r0, r3
 8013050:	3718      	adds	r7, #24
 8013052:	46bd      	mov	sp, r7
 8013054:	bd80      	pop	{r7, pc}
 8013056:	bf00      	nop
 8013058:	080219bc 	.word	0x080219bc
 801305c:	08022114 	.word	0x08022114
 8013060:	08021a10 	.word	0x08021a10

08013064 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8013064:	b590      	push	{r4, r7, lr}
 8013066:	b08b      	sub	sp, #44	@ 0x2c
 8013068:	af04      	add	r7, sp, #16
 801306a:	60f8      	str	r0, [r7, #12]
 801306c:	60b9      	str	r1, [r7, #8]
 801306e:	607a      	str	r2, [r7, #4]
 8013070:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8013072:	683b      	ldr	r3, [r7, #0]
 8013074:	2b00      	cmp	r3, #0
 8013076:	d106      	bne.n	8013086 <tcp_rst+0x22>
 8013078:	4b1f      	ldr	r3, [pc, #124]	@ (80130f8 <tcp_rst+0x94>)
 801307a:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 801307e:	491f      	ldr	r1, [pc, #124]	@ (80130fc <tcp_rst+0x98>)
 8013080:	481f      	ldr	r0, [pc, #124]	@ (8013100 <tcp_rst+0x9c>)
 8013082:	f004 faab 	bl	80175dc <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8013086:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013088:	2b00      	cmp	r3, #0
 801308a:	d106      	bne.n	801309a <tcp_rst+0x36>
 801308c:	4b1a      	ldr	r3, [pc, #104]	@ (80130f8 <tcp_rst+0x94>)
 801308e:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 8013092:	491c      	ldr	r1, [pc, #112]	@ (8013104 <tcp_rst+0xa0>)
 8013094:	481a      	ldr	r0, [pc, #104]	@ (8013100 <tcp_rst+0x9c>)
 8013096:	f004 faa1 	bl	80175dc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801309a:	2300      	movs	r3, #0
 801309c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801309e:	f246 0308 	movw	r3, #24584	@ 0x6008
 80130a2:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80130a4:	7dfb      	ldrb	r3, [r7, #23]
 80130a6:	b29c      	uxth	r4, r3
 80130a8:	68b8      	ldr	r0, [r7, #8]
 80130aa:	f7f8 fe3b 	bl	800bd24 <lwip_htonl>
 80130ae:	4602      	mov	r2, r0
 80130b0:	8abb      	ldrh	r3, [r7, #20]
 80130b2:	9303      	str	r3, [sp, #12]
 80130b4:	2314      	movs	r3, #20
 80130b6:	9302      	str	r3, [sp, #8]
 80130b8:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80130ba:	9301      	str	r3, [sp, #4]
 80130bc:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80130be:	9300      	str	r3, [sp, #0]
 80130c0:	4613      	mov	r3, r2
 80130c2:	2200      	movs	r2, #0
 80130c4:	4621      	mov	r1, r4
 80130c6:	6878      	ldr	r0, [r7, #4]
 80130c8:	f7ff fe94 	bl	8012df4 <tcp_output_alloc_header_common>
 80130cc:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80130ce:	693b      	ldr	r3, [r7, #16]
 80130d0:	2b00      	cmp	r3, #0
 80130d2:	d00c      	beq.n	80130ee <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80130d4:	7dfb      	ldrb	r3, [r7, #23]
 80130d6:	2200      	movs	r2, #0
 80130d8:	6939      	ldr	r1, [r7, #16]
 80130da:	68f8      	ldr	r0, [r7, #12]
 80130dc:	f7ff ff3a 	bl	8012f54 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80130e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80130e2:	683a      	ldr	r2, [r7, #0]
 80130e4:	6939      	ldr	r1, [r7, #16]
 80130e6:	68f8      	ldr	r0, [r7, #12]
 80130e8:	f7ff ff72 	bl	8012fd0 <tcp_output_control_segment>
 80130ec:	e000      	b.n	80130f0 <tcp_rst+0x8c>
    return;
 80130ee:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80130f0:	371c      	adds	r7, #28
 80130f2:	46bd      	mov	sp, r7
 80130f4:	bd90      	pop	{r4, r7, pc}
 80130f6:	bf00      	nop
 80130f8:	080219bc 	.word	0x080219bc
 80130fc:	08022140 	.word	0x08022140
 8013100:	08021a10 	.word	0x08021a10
 8013104:	0802215c 	.word	0x0802215c

08013108 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8013108:	b590      	push	{r4, r7, lr}
 801310a:	b087      	sub	sp, #28
 801310c:	af00      	add	r7, sp, #0
 801310e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8013110:	2300      	movs	r3, #0
 8013112:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8013114:	2300      	movs	r3, #0
 8013116:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8013118:	687b      	ldr	r3, [r7, #4]
 801311a:	2b00      	cmp	r3, #0
 801311c:	d106      	bne.n	801312c <tcp_send_empty_ack+0x24>
 801311e:	4b28      	ldr	r3, [pc, #160]	@ (80131c0 <tcp_send_empty_ack+0xb8>)
 8013120:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 8013124:	4927      	ldr	r1, [pc, #156]	@ (80131c4 <tcp_send_empty_ack+0xbc>)
 8013126:	4828      	ldr	r0, [pc, #160]	@ (80131c8 <tcp_send_empty_ack+0xc0>)
 8013128:	f004 fa58 	bl	80175dc <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801312c:	7dfb      	ldrb	r3, [r7, #23]
 801312e:	009b      	lsls	r3, r3, #2
 8013130:	b2db      	uxtb	r3, r3
 8013132:	f003 0304 	and.w	r3, r3, #4
 8013136:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8013138:	7d7b      	ldrb	r3, [r7, #21]
 801313a:	b29c      	uxth	r4, r3
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013140:	4618      	mov	r0, r3
 8013142:	f7f8 fdef 	bl	800bd24 <lwip_htonl>
 8013146:	4603      	mov	r3, r0
 8013148:	2200      	movs	r2, #0
 801314a:	4621      	mov	r1, r4
 801314c:	6878      	ldr	r0, [r7, #4]
 801314e:	f7ff fec3 	bl	8012ed8 <tcp_output_alloc_header>
 8013152:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013154:	693b      	ldr	r3, [r7, #16]
 8013156:	2b00      	cmp	r3, #0
 8013158:	d109      	bne.n	801316e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801315a:	687b      	ldr	r3, [r7, #4]
 801315c:	8b5b      	ldrh	r3, [r3, #26]
 801315e:	f043 0303 	orr.w	r3, r3, #3
 8013162:	b29a      	uxth	r2, r3
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8013168:	f06f 0301 	mvn.w	r3, #1
 801316c:	e023      	b.n	80131b6 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801316e:	7dbb      	ldrb	r3, [r7, #22]
 8013170:	7dfa      	ldrb	r2, [r7, #23]
 8013172:	6939      	ldr	r1, [r7, #16]
 8013174:	6878      	ldr	r0, [r7, #4]
 8013176:	f7ff feed 	bl	8012f54 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801317a:	687a      	ldr	r2, [r7, #4]
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	3304      	adds	r3, #4
 8013180:	6939      	ldr	r1, [r7, #16]
 8013182:	6878      	ldr	r0, [r7, #4]
 8013184:	f7ff ff24 	bl	8012fd0 <tcp_output_control_segment>
 8013188:	4603      	mov	r3, r0
 801318a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801318c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013190:	2b00      	cmp	r3, #0
 8013192:	d007      	beq.n	80131a4 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	8b5b      	ldrh	r3, [r3, #26]
 8013198:	f043 0303 	orr.w	r3, r3, #3
 801319c:	b29a      	uxth	r2, r3
 801319e:	687b      	ldr	r3, [r7, #4]
 80131a0:	835a      	strh	r2, [r3, #26]
 80131a2:	e006      	b.n	80131b2 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80131a4:	687b      	ldr	r3, [r7, #4]
 80131a6:	8b5b      	ldrh	r3, [r3, #26]
 80131a8:	f023 0303 	bic.w	r3, r3, #3
 80131ac:	b29a      	uxth	r2, r3
 80131ae:	687b      	ldr	r3, [r7, #4]
 80131b0:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80131b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80131b6:	4618      	mov	r0, r3
 80131b8:	371c      	adds	r7, #28
 80131ba:	46bd      	mov	sp, r7
 80131bc:	bd90      	pop	{r4, r7, pc}
 80131be:	bf00      	nop
 80131c0:	080219bc 	.word	0x080219bc
 80131c4:	08022178 	.word	0x08022178
 80131c8:	08021a10 	.word	0x08021a10

080131cc <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80131cc:	b590      	push	{r4, r7, lr}
 80131ce:	b087      	sub	sp, #28
 80131d0:	af00      	add	r7, sp, #0
 80131d2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80131d4:	2300      	movs	r3, #0
 80131d6:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	2b00      	cmp	r3, #0
 80131dc:	d106      	bne.n	80131ec <tcp_keepalive+0x20>
 80131de:	4b18      	ldr	r3, [pc, #96]	@ (8013240 <tcp_keepalive+0x74>)
 80131e0:	f640 0224 	movw	r2, #2084	@ 0x824
 80131e4:	4917      	ldr	r1, [pc, #92]	@ (8013244 <tcp_keepalive+0x78>)
 80131e6:	4818      	ldr	r0, [pc, #96]	@ (8013248 <tcp_keepalive+0x7c>)
 80131e8:	f004 f9f8 	bl	80175dc <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80131ec:	7dfb      	ldrb	r3, [r7, #23]
 80131ee:	b29c      	uxth	r4, r3
 80131f0:	687b      	ldr	r3, [r7, #4]
 80131f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80131f4:	3b01      	subs	r3, #1
 80131f6:	4618      	mov	r0, r3
 80131f8:	f7f8 fd94 	bl	800bd24 <lwip_htonl>
 80131fc:	4603      	mov	r3, r0
 80131fe:	2200      	movs	r2, #0
 8013200:	4621      	mov	r1, r4
 8013202:	6878      	ldr	r0, [r7, #4]
 8013204:	f7ff fe68 	bl	8012ed8 <tcp_output_alloc_header>
 8013208:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801320a:	693b      	ldr	r3, [r7, #16]
 801320c:	2b00      	cmp	r3, #0
 801320e:	d102      	bne.n	8013216 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8013210:	f04f 33ff 	mov.w	r3, #4294967295
 8013214:	e010      	b.n	8013238 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013216:	7dfb      	ldrb	r3, [r7, #23]
 8013218:	2200      	movs	r2, #0
 801321a:	6939      	ldr	r1, [r7, #16]
 801321c:	6878      	ldr	r0, [r7, #4]
 801321e:	f7ff fe99 	bl	8012f54 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013222:	687a      	ldr	r2, [r7, #4]
 8013224:	687b      	ldr	r3, [r7, #4]
 8013226:	3304      	adds	r3, #4
 8013228:	6939      	ldr	r1, [r7, #16]
 801322a:	6878      	ldr	r0, [r7, #4]
 801322c:	f7ff fed0 	bl	8012fd0 <tcp_output_control_segment>
 8013230:	4603      	mov	r3, r0
 8013232:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013234:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013238:	4618      	mov	r0, r3
 801323a:	371c      	adds	r7, #28
 801323c:	46bd      	mov	sp, r7
 801323e:	bd90      	pop	{r4, r7, pc}
 8013240:	080219bc 	.word	0x080219bc
 8013244:	08022198 	.word	0x08022198
 8013248:	08021a10 	.word	0x08021a10

0801324c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801324c:	b590      	push	{r4, r7, lr}
 801324e:	b08b      	sub	sp, #44	@ 0x2c
 8013250:	af00      	add	r7, sp, #0
 8013252:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013254:	2300      	movs	r3, #0
 8013256:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801325a:	687b      	ldr	r3, [r7, #4]
 801325c:	2b00      	cmp	r3, #0
 801325e:	d106      	bne.n	801326e <tcp_zero_window_probe+0x22>
 8013260:	4b4c      	ldr	r3, [pc, #304]	@ (8013394 <tcp_zero_window_probe+0x148>)
 8013262:	f640 024f 	movw	r2, #2127	@ 0x84f
 8013266:	494c      	ldr	r1, [pc, #304]	@ (8013398 <tcp_zero_window_probe+0x14c>)
 8013268:	484c      	ldr	r0, [pc, #304]	@ (801339c <tcp_zero_window_probe+0x150>)
 801326a:	f004 f9b7 	bl	80175dc <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801326e:	687b      	ldr	r3, [r7, #4]
 8013270:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013272:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8013274:	6a3b      	ldr	r3, [r7, #32]
 8013276:	2b00      	cmp	r3, #0
 8013278:	d101      	bne.n	801327e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801327a:	2300      	movs	r3, #0
 801327c:	e086      	b.n	801338c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801327e:	687b      	ldr	r3, [r7, #4]
 8013280:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8013284:	2bff      	cmp	r3, #255	@ 0xff
 8013286:	d007      	beq.n	8013298 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 801328e:	3301      	adds	r3, #1
 8013290:	b2da      	uxtb	r2, r3
 8013292:	687b      	ldr	r3, [r7, #4]
 8013294:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8013298:	6a3b      	ldr	r3, [r7, #32]
 801329a:	68db      	ldr	r3, [r3, #12]
 801329c:	899b      	ldrh	r3, [r3, #12]
 801329e:	b29b      	uxth	r3, r3
 80132a0:	4618      	mov	r0, r3
 80132a2:	f7f8 fd29 	bl	800bcf8 <lwip_htons>
 80132a6:	4603      	mov	r3, r0
 80132a8:	b2db      	uxtb	r3, r3
 80132aa:	f003 0301 	and.w	r3, r3, #1
 80132ae:	2b00      	cmp	r3, #0
 80132b0:	d005      	beq.n	80132be <tcp_zero_window_probe+0x72>
 80132b2:	6a3b      	ldr	r3, [r7, #32]
 80132b4:	891b      	ldrh	r3, [r3, #8]
 80132b6:	2b00      	cmp	r3, #0
 80132b8:	d101      	bne.n	80132be <tcp_zero_window_probe+0x72>
 80132ba:	2301      	movs	r3, #1
 80132bc:	e000      	b.n	80132c0 <tcp_zero_window_probe+0x74>
 80132be:	2300      	movs	r3, #0
 80132c0:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80132c2:	7ffb      	ldrb	r3, [r7, #31]
 80132c4:	2b00      	cmp	r3, #0
 80132c6:	bf0c      	ite	eq
 80132c8:	2301      	moveq	r3, #1
 80132ca:	2300      	movne	r3, #0
 80132cc:	b2db      	uxtb	r3, r3
 80132ce:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80132d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80132d4:	b299      	uxth	r1, r3
 80132d6:	6a3b      	ldr	r3, [r7, #32]
 80132d8:	68db      	ldr	r3, [r3, #12]
 80132da:	685b      	ldr	r3, [r3, #4]
 80132dc:	8bba      	ldrh	r2, [r7, #28]
 80132de:	6878      	ldr	r0, [r7, #4]
 80132e0:	f7ff fdfa 	bl	8012ed8 <tcp_output_alloc_header>
 80132e4:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80132e6:	69bb      	ldr	r3, [r7, #24]
 80132e8:	2b00      	cmp	r3, #0
 80132ea:	d102      	bne.n	80132f2 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80132ec:	f04f 33ff 	mov.w	r3, #4294967295
 80132f0:	e04c      	b.n	801338c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80132f2:	69bb      	ldr	r3, [r7, #24]
 80132f4:	685b      	ldr	r3, [r3, #4]
 80132f6:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80132f8:	7ffb      	ldrb	r3, [r7, #31]
 80132fa:	2b00      	cmp	r3, #0
 80132fc:	d011      	beq.n	8013322 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80132fe:	697b      	ldr	r3, [r7, #20]
 8013300:	899b      	ldrh	r3, [r3, #12]
 8013302:	b29b      	uxth	r3, r3
 8013304:	b21b      	sxth	r3, r3
 8013306:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801330a:	b21c      	sxth	r4, r3
 801330c:	2011      	movs	r0, #17
 801330e:	f7f8 fcf3 	bl	800bcf8 <lwip_htons>
 8013312:	4603      	mov	r3, r0
 8013314:	b21b      	sxth	r3, r3
 8013316:	4323      	orrs	r3, r4
 8013318:	b21b      	sxth	r3, r3
 801331a:	b29a      	uxth	r2, r3
 801331c:	697b      	ldr	r3, [r7, #20]
 801331e:	819a      	strh	r2, [r3, #12]
 8013320:	e010      	b.n	8013344 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8013322:	69bb      	ldr	r3, [r7, #24]
 8013324:	685b      	ldr	r3, [r3, #4]
 8013326:	3314      	adds	r3, #20
 8013328:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801332a:	6a3b      	ldr	r3, [r7, #32]
 801332c:	6858      	ldr	r0, [r3, #4]
 801332e:	6a3b      	ldr	r3, [r7, #32]
 8013330:	685b      	ldr	r3, [r3, #4]
 8013332:	891a      	ldrh	r2, [r3, #8]
 8013334:	6a3b      	ldr	r3, [r7, #32]
 8013336:	891b      	ldrh	r3, [r3, #8]
 8013338:	1ad3      	subs	r3, r2, r3
 801333a:	b29b      	uxth	r3, r3
 801333c:	2201      	movs	r2, #1
 801333e:	6939      	ldr	r1, [r7, #16]
 8013340:	f7fa fcfc 	bl	800dd3c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8013344:	6a3b      	ldr	r3, [r7, #32]
 8013346:	68db      	ldr	r3, [r3, #12]
 8013348:	685b      	ldr	r3, [r3, #4]
 801334a:	4618      	mov	r0, r3
 801334c:	f7f8 fcea 	bl	800bd24 <lwip_htonl>
 8013350:	4603      	mov	r3, r0
 8013352:	3301      	adds	r3, #1
 8013354:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801335a:	68fb      	ldr	r3, [r7, #12]
 801335c:	1ad3      	subs	r3, r2, r3
 801335e:	2b00      	cmp	r3, #0
 8013360:	da02      	bge.n	8013368 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	68fa      	ldr	r2, [r7, #12]
 8013366:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013368:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801336c:	2200      	movs	r2, #0
 801336e:	69b9      	ldr	r1, [r7, #24]
 8013370:	6878      	ldr	r0, [r7, #4]
 8013372:	f7ff fdef 	bl	8012f54 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013376:	687a      	ldr	r2, [r7, #4]
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	3304      	adds	r3, #4
 801337c:	69b9      	ldr	r1, [r7, #24]
 801337e:	6878      	ldr	r0, [r7, #4]
 8013380:	f7ff fe26 	bl	8012fd0 <tcp_output_control_segment>
 8013384:	4603      	mov	r3, r0
 8013386:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013388:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801338c:	4618      	mov	r0, r3
 801338e:	372c      	adds	r7, #44	@ 0x2c
 8013390:	46bd      	mov	sp, r7
 8013392:	bd90      	pop	{r4, r7, pc}
 8013394:	080219bc 	.word	0x080219bc
 8013398:	080221b4 	.word	0x080221b4
 801339c:	08021a10 	.word	0x08021a10

080133a0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80133a0:	b580      	push	{r7, lr}
 80133a2:	b082      	sub	sp, #8
 80133a4:	af00      	add	r7, sp, #0
 80133a6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80133a8:	f7fa ff10 	bl	800e1cc <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80133ac:	4b0a      	ldr	r3, [pc, #40]	@ (80133d8 <tcpip_tcp_timer+0x38>)
 80133ae:	681b      	ldr	r3, [r3, #0]
 80133b0:	2b00      	cmp	r3, #0
 80133b2:	d103      	bne.n	80133bc <tcpip_tcp_timer+0x1c>
 80133b4:	4b09      	ldr	r3, [pc, #36]	@ (80133dc <tcpip_tcp_timer+0x3c>)
 80133b6:	681b      	ldr	r3, [r3, #0]
 80133b8:	2b00      	cmp	r3, #0
 80133ba:	d005      	beq.n	80133c8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80133bc:	2200      	movs	r2, #0
 80133be:	4908      	ldr	r1, [pc, #32]	@ (80133e0 <tcpip_tcp_timer+0x40>)
 80133c0:	20fa      	movs	r0, #250	@ 0xfa
 80133c2:	f000 f8f3 	bl	80135ac <sys_timeout>
 80133c6:	e003      	b.n	80133d0 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80133c8:	4b06      	ldr	r3, [pc, #24]	@ (80133e4 <tcpip_tcp_timer+0x44>)
 80133ca:	2200      	movs	r2, #0
 80133cc:	601a      	str	r2, [r3, #0]
  }
}
 80133ce:	bf00      	nop
 80133d0:	bf00      	nop
 80133d2:	3708      	adds	r7, #8
 80133d4:	46bd      	mov	sp, r7
 80133d6:	bd80      	pop	{r7, pc}
 80133d8:	200151c4 	.word	0x200151c4
 80133dc:	200151c8 	.word	0x200151c8
 80133e0:	080133a1 	.word	0x080133a1
 80133e4:	20015210 	.word	0x20015210

080133e8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80133e8:	b580      	push	{r7, lr}
 80133ea:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80133ec:	4b0a      	ldr	r3, [pc, #40]	@ (8013418 <tcp_timer_needed+0x30>)
 80133ee:	681b      	ldr	r3, [r3, #0]
 80133f0:	2b00      	cmp	r3, #0
 80133f2:	d10f      	bne.n	8013414 <tcp_timer_needed+0x2c>
 80133f4:	4b09      	ldr	r3, [pc, #36]	@ (801341c <tcp_timer_needed+0x34>)
 80133f6:	681b      	ldr	r3, [r3, #0]
 80133f8:	2b00      	cmp	r3, #0
 80133fa:	d103      	bne.n	8013404 <tcp_timer_needed+0x1c>
 80133fc:	4b08      	ldr	r3, [pc, #32]	@ (8013420 <tcp_timer_needed+0x38>)
 80133fe:	681b      	ldr	r3, [r3, #0]
 8013400:	2b00      	cmp	r3, #0
 8013402:	d007      	beq.n	8013414 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8013404:	4b04      	ldr	r3, [pc, #16]	@ (8013418 <tcp_timer_needed+0x30>)
 8013406:	2201      	movs	r2, #1
 8013408:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801340a:	2200      	movs	r2, #0
 801340c:	4905      	ldr	r1, [pc, #20]	@ (8013424 <tcp_timer_needed+0x3c>)
 801340e:	20fa      	movs	r0, #250	@ 0xfa
 8013410:	f000 f8cc 	bl	80135ac <sys_timeout>
  }
}
 8013414:	bf00      	nop
 8013416:	bd80      	pop	{r7, pc}
 8013418:	20015210 	.word	0x20015210
 801341c:	200151c4 	.word	0x200151c4
 8013420:	200151c8 	.word	0x200151c8
 8013424:	080133a1 	.word	0x080133a1

08013428 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8013428:	b580      	push	{r7, lr}
 801342a:	b086      	sub	sp, #24
 801342c:	af00      	add	r7, sp, #0
 801342e:	60f8      	str	r0, [r7, #12]
 8013430:	60b9      	str	r1, [r7, #8]
 8013432:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8013434:	2006      	movs	r0, #6
 8013436:	f7f9 fba1 	bl	800cb7c <memp_malloc>
 801343a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801343c:	693b      	ldr	r3, [r7, #16]
 801343e:	2b00      	cmp	r3, #0
 8013440:	d109      	bne.n	8013456 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8013442:	693b      	ldr	r3, [r7, #16]
 8013444:	2b00      	cmp	r3, #0
 8013446:	d151      	bne.n	80134ec <sys_timeout_abs+0xc4>
 8013448:	4b2a      	ldr	r3, [pc, #168]	@ (80134f4 <sys_timeout_abs+0xcc>)
 801344a:	22be      	movs	r2, #190	@ 0xbe
 801344c:	492a      	ldr	r1, [pc, #168]	@ (80134f8 <sys_timeout_abs+0xd0>)
 801344e:	482b      	ldr	r0, [pc, #172]	@ (80134fc <sys_timeout_abs+0xd4>)
 8013450:	f004 f8c4 	bl	80175dc <iprintf>
    return;
 8013454:	e04a      	b.n	80134ec <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8013456:	693b      	ldr	r3, [r7, #16]
 8013458:	2200      	movs	r2, #0
 801345a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801345c:	693b      	ldr	r3, [r7, #16]
 801345e:	68ba      	ldr	r2, [r7, #8]
 8013460:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8013462:	693b      	ldr	r3, [r7, #16]
 8013464:	687a      	ldr	r2, [r7, #4]
 8013466:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8013468:	693b      	ldr	r3, [r7, #16]
 801346a:	68fa      	ldr	r2, [r7, #12]
 801346c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801346e:	4b24      	ldr	r3, [pc, #144]	@ (8013500 <sys_timeout_abs+0xd8>)
 8013470:	681b      	ldr	r3, [r3, #0]
 8013472:	2b00      	cmp	r3, #0
 8013474:	d103      	bne.n	801347e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8013476:	4a22      	ldr	r2, [pc, #136]	@ (8013500 <sys_timeout_abs+0xd8>)
 8013478:	693b      	ldr	r3, [r7, #16]
 801347a:	6013      	str	r3, [r2, #0]
    return;
 801347c:	e037      	b.n	80134ee <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801347e:	693b      	ldr	r3, [r7, #16]
 8013480:	685a      	ldr	r2, [r3, #4]
 8013482:	4b1f      	ldr	r3, [pc, #124]	@ (8013500 <sys_timeout_abs+0xd8>)
 8013484:	681b      	ldr	r3, [r3, #0]
 8013486:	685b      	ldr	r3, [r3, #4]
 8013488:	1ad3      	subs	r3, r2, r3
 801348a:	0fdb      	lsrs	r3, r3, #31
 801348c:	f003 0301 	and.w	r3, r3, #1
 8013490:	b2db      	uxtb	r3, r3
 8013492:	2b00      	cmp	r3, #0
 8013494:	d007      	beq.n	80134a6 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8013496:	4b1a      	ldr	r3, [pc, #104]	@ (8013500 <sys_timeout_abs+0xd8>)
 8013498:	681a      	ldr	r2, [r3, #0]
 801349a:	693b      	ldr	r3, [r7, #16]
 801349c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801349e:	4a18      	ldr	r2, [pc, #96]	@ (8013500 <sys_timeout_abs+0xd8>)
 80134a0:	693b      	ldr	r3, [r7, #16]
 80134a2:	6013      	str	r3, [r2, #0]
 80134a4:	e023      	b.n	80134ee <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80134a6:	4b16      	ldr	r3, [pc, #88]	@ (8013500 <sys_timeout_abs+0xd8>)
 80134a8:	681b      	ldr	r3, [r3, #0]
 80134aa:	617b      	str	r3, [r7, #20]
 80134ac:	e01a      	b.n	80134e4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80134ae:	697b      	ldr	r3, [r7, #20]
 80134b0:	681b      	ldr	r3, [r3, #0]
 80134b2:	2b00      	cmp	r3, #0
 80134b4:	d00b      	beq.n	80134ce <sys_timeout_abs+0xa6>
 80134b6:	693b      	ldr	r3, [r7, #16]
 80134b8:	685a      	ldr	r2, [r3, #4]
 80134ba:	697b      	ldr	r3, [r7, #20]
 80134bc:	681b      	ldr	r3, [r3, #0]
 80134be:	685b      	ldr	r3, [r3, #4]
 80134c0:	1ad3      	subs	r3, r2, r3
 80134c2:	0fdb      	lsrs	r3, r3, #31
 80134c4:	f003 0301 	and.w	r3, r3, #1
 80134c8:	b2db      	uxtb	r3, r3
 80134ca:	2b00      	cmp	r3, #0
 80134cc:	d007      	beq.n	80134de <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80134ce:	697b      	ldr	r3, [r7, #20]
 80134d0:	681a      	ldr	r2, [r3, #0]
 80134d2:	693b      	ldr	r3, [r7, #16]
 80134d4:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80134d6:	697b      	ldr	r3, [r7, #20]
 80134d8:	693a      	ldr	r2, [r7, #16]
 80134da:	601a      	str	r2, [r3, #0]
        break;
 80134dc:	e007      	b.n	80134ee <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80134de:	697b      	ldr	r3, [r7, #20]
 80134e0:	681b      	ldr	r3, [r3, #0]
 80134e2:	617b      	str	r3, [r7, #20]
 80134e4:	697b      	ldr	r3, [r7, #20]
 80134e6:	2b00      	cmp	r3, #0
 80134e8:	d1e1      	bne.n	80134ae <sys_timeout_abs+0x86>
 80134ea:	e000      	b.n	80134ee <sys_timeout_abs+0xc6>
    return;
 80134ec:	bf00      	nop
      }
    }
  }
}
 80134ee:	3718      	adds	r7, #24
 80134f0:	46bd      	mov	sp, r7
 80134f2:	bd80      	pop	{r7, pc}
 80134f4:	080221d8 	.word	0x080221d8
 80134f8:	0802220c 	.word	0x0802220c
 80134fc:	0802224c 	.word	0x0802224c
 8013500:	20015208 	.word	0x20015208

08013504 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8013504:	b580      	push	{r7, lr}
 8013506:	b086      	sub	sp, #24
 8013508:	af00      	add	r7, sp, #0
 801350a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801350c:	687b      	ldr	r3, [r7, #4]
 801350e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8013510:	697b      	ldr	r3, [r7, #20]
 8013512:	685b      	ldr	r3, [r3, #4]
 8013514:	4798      	blx	r3

  now = sys_now();
 8013516:	f7f8 f9f7 	bl	800b908 <sys_now>
 801351a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801351c:	697b      	ldr	r3, [r7, #20]
 801351e:	681a      	ldr	r2, [r3, #0]
 8013520:	4b0f      	ldr	r3, [pc, #60]	@ (8013560 <lwip_cyclic_timer+0x5c>)
 8013522:	681b      	ldr	r3, [r3, #0]
 8013524:	4413      	add	r3, r2
 8013526:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8013528:	68fa      	ldr	r2, [r7, #12]
 801352a:	693b      	ldr	r3, [r7, #16]
 801352c:	1ad3      	subs	r3, r2, r3
 801352e:	0fdb      	lsrs	r3, r3, #31
 8013530:	f003 0301 	and.w	r3, r3, #1
 8013534:	b2db      	uxtb	r3, r3
 8013536:	2b00      	cmp	r3, #0
 8013538:	d009      	beq.n	801354e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801353a:	697b      	ldr	r3, [r7, #20]
 801353c:	681a      	ldr	r2, [r3, #0]
 801353e:	693b      	ldr	r3, [r7, #16]
 8013540:	4413      	add	r3, r2
 8013542:	687a      	ldr	r2, [r7, #4]
 8013544:	4907      	ldr	r1, [pc, #28]	@ (8013564 <lwip_cyclic_timer+0x60>)
 8013546:	4618      	mov	r0, r3
 8013548:	f7ff ff6e 	bl	8013428 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801354c:	e004      	b.n	8013558 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801354e:	687a      	ldr	r2, [r7, #4]
 8013550:	4904      	ldr	r1, [pc, #16]	@ (8013564 <lwip_cyclic_timer+0x60>)
 8013552:	68f8      	ldr	r0, [r7, #12]
 8013554:	f7ff ff68 	bl	8013428 <sys_timeout_abs>
}
 8013558:	bf00      	nop
 801355a:	3718      	adds	r7, #24
 801355c:	46bd      	mov	sp, r7
 801355e:	bd80      	pop	{r7, pc}
 8013560:	2001520c 	.word	0x2001520c
 8013564:	08013505 	.word	0x08013505

08013568 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8013568:	b580      	push	{r7, lr}
 801356a:	b082      	sub	sp, #8
 801356c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801356e:	2301      	movs	r3, #1
 8013570:	607b      	str	r3, [r7, #4]
 8013572:	e00e      	b.n	8013592 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8013574:	4a0b      	ldr	r2, [pc, #44]	@ (80135a4 <sys_timeouts_init+0x3c>)
 8013576:	687b      	ldr	r3, [r7, #4]
 8013578:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801357c:	687b      	ldr	r3, [r7, #4]
 801357e:	00db      	lsls	r3, r3, #3
 8013580:	4a08      	ldr	r2, [pc, #32]	@ (80135a4 <sys_timeouts_init+0x3c>)
 8013582:	4413      	add	r3, r2
 8013584:	461a      	mov	r2, r3
 8013586:	4908      	ldr	r1, [pc, #32]	@ (80135a8 <sys_timeouts_init+0x40>)
 8013588:	f000 f810 	bl	80135ac <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801358c:	687b      	ldr	r3, [r7, #4]
 801358e:	3301      	adds	r3, #1
 8013590:	607b      	str	r3, [r7, #4]
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	2b03      	cmp	r3, #3
 8013596:	d9ed      	bls.n	8013574 <sys_timeouts_init+0xc>
  }
}
 8013598:	bf00      	nop
 801359a:	bf00      	nop
 801359c:	3708      	adds	r7, #8
 801359e:	46bd      	mov	sp, r7
 80135a0:	bd80      	pop	{r7, pc}
 80135a2:	bf00      	nop
 80135a4:	08022dc4 	.word	0x08022dc4
 80135a8:	08013505 	.word	0x08013505

080135ac <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80135ac:	b580      	push	{r7, lr}
 80135ae:	b086      	sub	sp, #24
 80135b0:	af00      	add	r7, sp, #0
 80135b2:	60f8      	str	r0, [r7, #12]
 80135b4:	60b9      	str	r1, [r7, #8]
 80135b6:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80135b8:	68fb      	ldr	r3, [r7, #12]
 80135ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80135be:	d306      	bcc.n	80135ce <sys_timeout+0x22>
 80135c0:	4b0a      	ldr	r3, [pc, #40]	@ (80135ec <sys_timeout+0x40>)
 80135c2:	f240 1229 	movw	r2, #297	@ 0x129
 80135c6:	490a      	ldr	r1, [pc, #40]	@ (80135f0 <sys_timeout+0x44>)
 80135c8:	480a      	ldr	r0, [pc, #40]	@ (80135f4 <sys_timeout+0x48>)
 80135ca:	f004 f807 	bl	80175dc <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80135ce:	f7f8 f99b 	bl	800b908 <sys_now>
 80135d2:	4602      	mov	r2, r0
 80135d4:	68fb      	ldr	r3, [r7, #12]
 80135d6:	4413      	add	r3, r2
 80135d8:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80135da:	687a      	ldr	r2, [r7, #4]
 80135dc:	68b9      	ldr	r1, [r7, #8]
 80135de:	6978      	ldr	r0, [r7, #20]
 80135e0:	f7ff ff22 	bl	8013428 <sys_timeout_abs>
#endif
}
 80135e4:	bf00      	nop
 80135e6:	3718      	adds	r7, #24
 80135e8:	46bd      	mov	sp, r7
 80135ea:	bd80      	pop	{r7, pc}
 80135ec:	080221d8 	.word	0x080221d8
 80135f0:	08022274 	.word	0x08022274
 80135f4:	0802224c 	.word	0x0802224c

080135f8 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80135f8:	b580      	push	{r7, lr}
 80135fa:	b084      	sub	sp, #16
 80135fc:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80135fe:	f7f8 f983 	bl	800b908 <sys_now>
 8013602:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 8013604:	4b1a      	ldr	r3, [pc, #104]	@ (8013670 <sys_check_timeouts+0x78>)
 8013606:	781b      	ldrb	r3, [r3, #0]
 8013608:	b2db      	uxtb	r3, r3
 801360a:	2b00      	cmp	r3, #0
 801360c:	d001      	beq.n	8013612 <sys_check_timeouts+0x1a>
 801360e:	f7f9 fe61 	bl	800d2d4 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 8013612:	4b18      	ldr	r3, [pc, #96]	@ (8013674 <sys_check_timeouts+0x7c>)
 8013614:	681b      	ldr	r3, [r3, #0]
 8013616:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8013618:	68bb      	ldr	r3, [r7, #8]
 801361a:	2b00      	cmp	r3, #0
 801361c:	d022      	beq.n	8013664 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801361e:	68bb      	ldr	r3, [r7, #8]
 8013620:	685b      	ldr	r3, [r3, #4]
 8013622:	68fa      	ldr	r2, [r7, #12]
 8013624:	1ad3      	subs	r3, r2, r3
 8013626:	0fdb      	lsrs	r3, r3, #31
 8013628:	f003 0301 	and.w	r3, r3, #1
 801362c:	b2db      	uxtb	r3, r3
 801362e:	2b00      	cmp	r3, #0
 8013630:	d11a      	bne.n	8013668 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8013632:	68bb      	ldr	r3, [r7, #8]
 8013634:	681b      	ldr	r3, [r3, #0]
 8013636:	4a0f      	ldr	r2, [pc, #60]	@ (8013674 <sys_check_timeouts+0x7c>)
 8013638:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801363a:	68bb      	ldr	r3, [r7, #8]
 801363c:	689b      	ldr	r3, [r3, #8]
 801363e:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8013640:	68bb      	ldr	r3, [r7, #8]
 8013642:	68db      	ldr	r3, [r3, #12]
 8013644:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8013646:	68bb      	ldr	r3, [r7, #8]
 8013648:	685b      	ldr	r3, [r3, #4]
 801364a:	4a0b      	ldr	r2, [pc, #44]	@ (8013678 <sys_check_timeouts+0x80>)
 801364c:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801364e:	68b9      	ldr	r1, [r7, #8]
 8013650:	2006      	movs	r0, #6
 8013652:	f7f9 fb03 	bl	800cc5c <memp_free>
    if (handler != NULL) {
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	2b00      	cmp	r3, #0
 801365a:	d0d3      	beq.n	8013604 <sys_check_timeouts+0xc>
      handler(arg);
 801365c:	687b      	ldr	r3, [r7, #4]
 801365e:	6838      	ldr	r0, [r7, #0]
 8013660:	4798      	blx	r3
  do {
 8013662:	e7cf      	b.n	8013604 <sys_check_timeouts+0xc>
      return;
 8013664:	bf00      	nop
 8013666:	e000      	b.n	801366a <sys_check_timeouts+0x72>
      return;
 8013668:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801366a:	3710      	adds	r7, #16
 801366c:	46bd      	mov	sp, r7
 801366e:	bd80      	pop	{r7, pc}
 8013670:	200151b5 	.word	0x200151b5
 8013674:	20015208 	.word	0x20015208
 8013678:	2001520c 	.word	0x2001520c

0801367c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801367c:	b580      	push	{r7, lr}
 801367e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8013680:	f003 f81a 	bl	80166b8 <rand>
 8013684:	4603      	mov	r3, r0
 8013686:	b29b      	uxth	r3, r3
 8013688:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801368c:	b29b      	uxth	r3, r3
 801368e:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8013692:	b29a      	uxth	r2, r3
 8013694:	4b01      	ldr	r3, [pc, #4]	@ (801369c <udp_init+0x20>)
 8013696:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8013698:	bf00      	nop
 801369a:	bd80      	pop	{r7, pc}
 801369c:	20000910 	.word	0x20000910

080136a0 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80136a0:	b480      	push	{r7}
 80136a2:	b083      	sub	sp, #12
 80136a4:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80136a6:	2300      	movs	r3, #0
 80136a8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80136aa:	4b17      	ldr	r3, [pc, #92]	@ (8013708 <udp_new_port+0x68>)
 80136ac:	881b      	ldrh	r3, [r3, #0]
 80136ae:	1c5a      	adds	r2, r3, #1
 80136b0:	b291      	uxth	r1, r2
 80136b2:	4a15      	ldr	r2, [pc, #84]	@ (8013708 <udp_new_port+0x68>)
 80136b4:	8011      	strh	r1, [r2, #0]
 80136b6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80136ba:	4293      	cmp	r3, r2
 80136bc:	d103      	bne.n	80136c6 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80136be:	4b12      	ldr	r3, [pc, #72]	@ (8013708 <udp_new_port+0x68>)
 80136c0:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 80136c4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80136c6:	4b11      	ldr	r3, [pc, #68]	@ (801370c <udp_new_port+0x6c>)
 80136c8:	681b      	ldr	r3, [r3, #0]
 80136ca:	603b      	str	r3, [r7, #0]
 80136cc:	e011      	b.n	80136f2 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80136ce:	683b      	ldr	r3, [r7, #0]
 80136d0:	8a5a      	ldrh	r2, [r3, #18]
 80136d2:	4b0d      	ldr	r3, [pc, #52]	@ (8013708 <udp_new_port+0x68>)
 80136d4:	881b      	ldrh	r3, [r3, #0]
 80136d6:	429a      	cmp	r2, r3
 80136d8:	d108      	bne.n	80136ec <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80136da:	88fb      	ldrh	r3, [r7, #6]
 80136dc:	3301      	adds	r3, #1
 80136de:	80fb      	strh	r3, [r7, #6]
 80136e0:	88fb      	ldrh	r3, [r7, #6]
 80136e2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80136e6:	d3e0      	bcc.n	80136aa <udp_new_port+0xa>
        return 0;
 80136e8:	2300      	movs	r3, #0
 80136ea:	e007      	b.n	80136fc <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80136ec:	683b      	ldr	r3, [r7, #0]
 80136ee:	68db      	ldr	r3, [r3, #12]
 80136f0:	603b      	str	r3, [r7, #0]
 80136f2:	683b      	ldr	r3, [r7, #0]
 80136f4:	2b00      	cmp	r3, #0
 80136f6:	d1ea      	bne.n	80136ce <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 80136f8:	4b03      	ldr	r3, [pc, #12]	@ (8013708 <udp_new_port+0x68>)
 80136fa:	881b      	ldrh	r3, [r3, #0]
}
 80136fc:	4618      	mov	r0, r3
 80136fe:	370c      	adds	r7, #12
 8013700:	46bd      	mov	sp, r7
 8013702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013706:	4770      	bx	lr
 8013708:	20000910 	.word	0x20000910
 801370c:	20015214 	.word	0x20015214

08013710 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8013710:	b580      	push	{r7, lr}
 8013712:	b084      	sub	sp, #16
 8013714:	af00      	add	r7, sp, #0
 8013716:	60f8      	str	r0, [r7, #12]
 8013718:	60b9      	str	r1, [r7, #8]
 801371a:	4613      	mov	r3, r2
 801371c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801371e:	68fb      	ldr	r3, [r7, #12]
 8013720:	2b00      	cmp	r3, #0
 8013722:	d105      	bne.n	8013730 <udp_input_local_match+0x20>
 8013724:	4b27      	ldr	r3, [pc, #156]	@ (80137c4 <udp_input_local_match+0xb4>)
 8013726:	2287      	movs	r2, #135	@ 0x87
 8013728:	4927      	ldr	r1, [pc, #156]	@ (80137c8 <udp_input_local_match+0xb8>)
 801372a:	4828      	ldr	r0, [pc, #160]	@ (80137cc <udp_input_local_match+0xbc>)
 801372c:	f003 ff56 	bl	80175dc <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8013730:	68bb      	ldr	r3, [r7, #8]
 8013732:	2b00      	cmp	r3, #0
 8013734:	d105      	bne.n	8013742 <udp_input_local_match+0x32>
 8013736:	4b23      	ldr	r3, [pc, #140]	@ (80137c4 <udp_input_local_match+0xb4>)
 8013738:	2288      	movs	r2, #136	@ 0x88
 801373a:	4925      	ldr	r1, [pc, #148]	@ (80137d0 <udp_input_local_match+0xc0>)
 801373c:	4823      	ldr	r0, [pc, #140]	@ (80137cc <udp_input_local_match+0xbc>)
 801373e:	f003 ff4d 	bl	80175dc <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013742:	68fb      	ldr	r3, [r7, #12]
 8013744:	7a1b      	ldrb	r3, [r3, #8]
 8013746:	2b00      	cmp	r3, #0
 8013748:	d00b      	beq.n	8013762 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801374a:	68fb      	ldr	r3, [r7, #12]
 801374c:	7a1a      	ldrb	r2, [r3, #8]
 801374e:	4b21      	ldr	r3, [pc, #132]	@ (80137d4 <udp_input_local_match+0xc4>)
 8013750:	685b      	ldr	r3, [r3, #4]
 8013752:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8013756:	3301      	adds	r3, #1
 8013758:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801375a:	429a      	cmp	r2, r3
 801375c:	d001      	beq.n	8013762 <udp_input_local_match+0x52>
    return 0;
 801375e:	2300      	movs	r3, #0
 8013760:	e02b      	b.n	80137ba <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8013762:	79fb      	ldrb	r3, [r7, #7]
 8013764:	2b00      	cmp	r3, #0
 8013766:	d018      	beq.n	801379a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013768:	68fb      	ldr	r3, [r7, #12]
 801376a:	2b00      	cmp	r3, #0
 801376c:	d013      	beq.n	8013796 <udp_input_local_match+0x86>
 801376e:	68fb      	ldr	r3, [r7, #12]
 8013770:	681b      	ldr	r3, [r3, #0]
 8013772:	2b00      	cmp	r3, #0
 8013774:	d00f      	beq.n	8013796 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013776:	4b17      	ldr	r3, [pc, #92]	@ (80137d4 <udp_input_local_match+0xc4>)
 8013778:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801377a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801377e:	d00a      	beq.n	8013796 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8013780:	68fb      	ldr	r3, [r7, #12]
 8013782:	681a      	ldr	r2, [r3, #0]
 8013784:	4b13      	ldr	r3, [pc, #76]	@ (80137d4 <udp_input_local_match+0xc4>)
 8013786:	695b      	ldr	r3, [r3, #20]
 8013788:	405a      	eors	r2, r3
 801378a:	68bb      	ldr	r3, [r7, #8]
 801378c:	3308      	adds	r3, #8
 801378e:	681b      	ldr	r3, [r3, #0]
 8013790:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013792:	2b00      	cmp	r3, #0
 8013794:	d110      	bne.n	80137b8 <udp_input_local_match+0xa8>
          return 1;
 8013796:	2301      	movs	r3, #1
 8013798:	e00f      	b.n	80137ba <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801379a:	68fb      	ldr	r3, [r7, #12]
 801379c:	2b00      	cmp	r3, #0
 801379e:	d009      	beq.n	80137b4 <udp_input_local_match+0xa4>
 80137a0:	68fb      	ldr	r3, [r7, #12]
 80137a2:	681b      	ldr	r3, [r3, #0]
 80137a4:	2b00      	cmp	r3, #0
 80137a6:	d005      	beq.n	80137b4 <udp_input_local_match+0xa4>
 80137a8:	68fb      	ldr	r3, [r7, #12]
 80137aa:	681a      	ldr	r2, [r3, #0]
 80137ac:	4b09      	ldr	r3, [pc, #36]	@ (80137d4 <udp_input_local_match+0xc4>)
 80137ae:	695b      	ldr	r3, [r3, #20]
 80137b0:	429a      	cmp	r2, r3
 80137b2:	d101      	bne.n	80137b8 <udp_input_local_match+0xa8>
        return 1;
 80137b4:	2301      	movs	r3, #1
 80137b6:	e000      	b.n	80137ba <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80137b8:	2300      	movs	r3, #0
}
 80137ba:	4618      	mov	r0, r3
 80137bc:	3710      	adds	r7, #16
 80137be:	46bd      	mov	sp, r7
 80137c0:	bd80      	pop	{r7, pc}
 80137c2:	bf00      	nop
 80137c4:	080222c0 	.word	0x080222c0
 80137c8:	080222f0 	.word	0x080222f0
 80137cc:	08022314 	.word	0x08022314
 80137d0:	0802233c 	.word	0x0802233c
 80137d4:	20011e78 	.word	0x20011e78

080137d8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80137d8:	b590      	push	{r4, r7, lr}
 80137da:	b08d      	sub	sp, #52	@ 0x34
 80137dc:	af02      	add	r7, sp, #8
 80137de:	6078      	str	r0, [r7, #4]
 80137e0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80137e2:	2300      	movs	r3, #0
 80137e4:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80137e6:	687b      	ldr	r3, [r7, #4]
 80137e8:	2b00      	cmp	r3, #0
 80137ea:	d105      	bne.n	80137f8 <udp_input+0x20>
 80137ec:	4b7c      	ldr	r3, [pc, #496]	@ (80139e0 <udp_input+0x208>)
 80137ee:	22cf      	movs	r2, #207	@ 0xcf
 80137f0:	497c      	ldr	r1, [pc, #496]	@ (80139e4 <udp_input+0x20c>)
 80137f2:	487d      	ldr	r0, [pc, #500]	@ (80139e8 <udp_input+0x210>)
 80137f4:	f003 fef2 	bl	80175dc <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80137f8:	683b      	ldr	r3, [r7, #0]
 80137fa:	2b00      	cmp	r3, #0
 80137fc:	d105      	bne.n	801380a <udp_input+0x32>
 80137fe:	4b78      	ldr	r3, [pc, #480]	@ (80139e0 <udp_input+0x208>)
 8013800:	22d0      	movs	r2, #208	@ 0xd0
 8013802:	497a      	ldr	r1, [pc, #488]	@ (80139ec <udp_input+0x214>)
 8013804:	4878      	ldr	r0, [pc, #480]	@ (80139e8 <udp_input+0x210>)
 8013806:	f003 fee9 	bl	80175dc <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801380a:	687b      	ldr	r3, [r7, #4]
 801380c:	895b      	ldrh	r3, [r3, #10]
 801380e:	2b07      	cmp	r3, #7
 8013810:	d803      	bhi.n	801381a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8013812:	6878      	ldr	r0, [r7, #4]
 8013814:	f7fa f898 	bl	800d948 <pbuf_free>
    goto end;
 8013818:	e0de      	b.n	80139d8 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	685b      	ldr	r3, [r3, #4]
 801381e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8013820:	4b73      	ldr	r3, [pc, #460]	@ (80139f0 <udp_input+0x218>)
 8013822:	695b      	ldr	r3, [r3, #20]
 8013824:	4a72      	ldr	r2, [pc, #456]	@ (80139f0 <udp_input+0x218>)
 8013826:	6812      	ldr	r2, [r2, #0]
 8013828:	4611      	mov	r1, r2
 801382a:	4618      	mov	r0, r3
 801382c:	f001 ffe2 	bl	80157f4 <ip4_addr_isbroadcast_u32>
 8013830:	4603      	mov	r3, r0
 8013832:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8013834:	697b      	ldr	r3, [r7, #20]
 8013836:	881b      	ldrh	r3, [r3, #0]
 8013838:	b29b      	uxth	r3, r3
 801383a:	4618      	mov	r0, r3
 801383c:	f7f8 fa5c 	bl	800bcf8 <lwip_htons>
 8013840:	4603      	mov	r3, r0
 8013842:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8013844:	697b      	ldr	r3, [r7, #20]
 8013846:	885b      	ldrh	r3, [r3, #2]
 8013848:	b29b      	uxth	r3, r3
 801384a:	4618      	mov	r0, r3
 801384c:	f7f8 fa54 	bl	800bcf8 <lwip_htons>
 8013850:	4603      	mov	r3, r0
 8013852:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8013854:	2300      	movs	r3, #0
 8013856:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 8013858:	2300      	movs	r3, #0
 801385a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801385c:	2300      	movs	r3, #0
 801385e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013860:	4b64      	ldr	r3, [pc, #400]	@ (80139f4 <udp_input+0x21c>)
 8013862:	681b      	ldr	r3, [r3, #0]
 8013864:	627b      	str	r3, [r7, #36]	@ 0x24
 8013866:	e054      	b.n	8013912 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8013868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801386a:	8a5b      	ldrh	r3, [r3, #18]
 801386c:	89fa      	ldrh	r2, [r7, #14]
 801386e:	429a      	cmp	r2, r3
 8013870:	d14a      	bne.n	8013908 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8013872:	7cfb      	ldrb	r3, [r7, #19]
 8013874:	461a      	mov	r2, r3
 8013876:	6839      	ldr	r1, [r7, #0]
 8013878:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801387a:	f7ff ff49 	bl	8013710 <udp_input_local_match>
 801387e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8013880:	2b00      	cmp	r3, #0
 8013882:	d041      	beq.n	8013908 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8013884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013886:	7c1b      	ldrb	r3, [r3, #16]
 8013888:	f003 0304 	and.w	r3, r3, #4
 801388c:	2b00      	cmp	r3, #0
 801388e:	d11d      	bne.n	80138cc <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8013890:	69fb      	ldr	r3, [r7, #28]
 8013892:	2b00      	cmp	r3, #0
 8013894:	d102      	bne.n	801389c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8013896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013898:	61fb      	str	r3, [r7, #28]
 801389a:	e017      	b.n	80138cc <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801389c:	7cfb      	ldrb	r3, [r7, #19]
 801389e:	2b00      	cmp	r3, #0
 80138a0:	d014      	beq.n	80138cc <udp_input+0xf4>
 80138a2:	4b53      	ldr	r3, [pc, #332]	@ (80139f0 <udp_input+0x218>)
 80138a4:	695b      	ldr	r3, [r3, #20]
 80138a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80138aa:	d10f      	bne.n	80138cc <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80138ac:	69fb      	ldr	r3, [r7, #28]
 80138ae:	681a      	ldr	r2, [r3, #0]
 80138b0:	683b      	ldr	r3, [r7, #0]
 80138b2:	3304      	adds	r3, #4
 80138b4:	681b      	ldr	r3, [r3, #0]
 80138b6:	429a      	cmp	r2, r3
 80138b8:	d008      	beq.n	80138cc <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80138ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80138bc:	681a      	ldr	r2, [r3, #0]
 80138be:	683b      	ldr	r3, [r7, #0]
 80138c0:	3304      	adds	r3, #4
 80138c2:	681b      	ldr	r3, [r3, #0]
 80138c4:	429a      	cmp	r2, r3
 80138c6:	d101      	bne.n	80138cc <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80138c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80138ca:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80138cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80138ce:	8a9b      	ldrh	r3, [r3, #20]
 80138d0:	8a3a      	ldrh	r2, [r7, #16]
 80138d2:	429a      	cmp	r2, r3
 80138d4:	d118      	bne.n	8013908 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80138d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80138d8:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80138da:	2b00      	cmp	r3, #0
 80138dc:	d005      	beq.n	80138ea <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80138de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80138e0:	685a      	ldr	r2, [r3, #4]
 80138e2:	4b43      	ldr	r3, [pc, #268]	@ (80139f0 <udp_input+0x218>)
 80138e4:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80138e6:	429a      	cmp	r2, r3
 80138e8:	d10e      	bne.n	8013908 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80138ea:	6a3b      	ldr	r3, [r7, #32]
 80138ec:	2b00      	cmp	r3, #0
 80138ee:	d014      	beq.n	801391a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80138f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80138f2:	68da      	ldr	r2, [r3, #12]
 80138f4:	6a3b      	ldr	r3, [r7, #32]
 80138f6:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80138f8:	4b3e      	ldr	r3, [pc, #248]	@ (80139f4 <udp_input+0x21c>)
 80138fa:	681a      	ldr	r2, [r3, #0]
 80138fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80138fe:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8013900:	4a3c      	ldr	r2, [pc, #240]	@ (80139f4 <udp_input+0x21c>)
 8013902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013904:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8013906:	e008      	b.n	801391a <udp_input+0x142>
      }
    }

    prev = pcb;
 8013908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801390a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801390c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801390e:	68db      	ldr	r3, [r3, #12]
 8013910:	627b      	str	r3, [r7, #36]	@ 0x24
 8013912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013914:	2b00      	cmp	r3, #0
 8013916:	d1a7      	bne.n	8013868 <udp_input+0x90>
 8013918:	e000      	b.n	801391c <udp_input+0x144>
        break;
 801391a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801391c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801391e:	2b00      	cmp	r3, #0
 8013920:	d101      	bne.n	8013926 <udp_input+0x14e>
    pcb = uncon_pcb;
 8013922:	69fb      	ldr	r3, [r7, #28]
 8013924:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8013926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013928:	2b00      	cmp	r3, #0
 801392a:	d002      	beq.n	8013932 <udp_input+0x15a>
    for_us = 1;
 801392c:	2301      	movs	r3, #1
 801392e:	76fb      	strb	r3, [r7, #27]
 8013930:	e00a      	b.n	8013948 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8013932:	683b      	ldr	r3, [r7, #0]
 8013934:	3304      	adds	r3, #4
 8013936:	681a      	ldr	r2, [r3, #0]
 8013938:	4b2d      	ldr	r3, [pc, #180]	@ (80139f0 <udp_input+0x218>)
 801393a:	695b      	ldr	r3, [r3, #20]
 801393c:	429a      	cmp	r2, r3
 801393e:	bf0c      	ite	eq
 8013940:	2301      	moveq	r3, #1
 8013942:	2300      	movne	r3, #0
 8013944:	b2db      	uxtb	r3, r3
 8013946:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8013948:	7efb      	ldrb	r3, [r7, #27]
 801394a:	2b00      	cmp	r3, #0
 801394c:	d041      	beq.n	80139d2 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801394e:	2108      	movs	r1, #8
 8013950:	6878      	ldr	r0, [r7, #4]
 8013952:	f7f9 ff73 	bl	800d83c <pbuf_remove_header>
 8013956:	4603      	mov	r3, r0
 8013958:	2b00      	cmp	r3, #0
 801395a:	d00a      	beq.n	8013972 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801395c:	4b20      	ldr	r3, [pc, #128]	@ (80139e0 <udp_input+0x208>)
 801395e:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8013962:	4925      	ldr	r1, [pc, #148]	@ (80139f8 <udp_input+0x220>)
 8013964:	4820      	ldr	r0, [pc, #128]	@ (80139e8 <udp_input+0x210>)
 8013966:	f003 fe39 	bl	80175dc <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801396a:	6878      	ldr	r0, [r7, #4]
 801396c:	f7f9 ffec 	bl	800d948 <pbuf_free>
      goto end;
 8013970:	e032      	b.n	80139d8 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8013972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013974:	2b00      	cmp	r3, #0
 8013976:	d012      	beq.n	801399e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8013978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801397a:	699b      	ldr	r3, [r3, #24]
 801397c:	2b00      	cmp	r3, #0
 801397e:	d00a      	beq.n	8013996 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8013980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013982:	699c      	ldr	r4, [r3, #24]
 8013984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013986:	69d8      	ldr	r0, [r3, #28]
 8013988:	8a3b      	ldrh	r3, [r7, #16]
 801398a:	9300      	str	r3, [sp, #0]
 801398c:	4b1b      	ldr	r3, [pc, #108]	@ (80139fc <udp_input+0x224>)
 801398e:	687a      	ldr	r2, [r7, #4]
 8013990:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013992:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8013994:	e021      	b.n	80139da <udp_input+0x202>
        pbuf_free(p);
 8013996:	6878      	ldr	r0, [r7, #4]
 8013998:	f7f9 ffd6 	bl	800d948 <pbuf_free>
        goto end;
 801399c:	e01c      	b.n	80139d8 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801399e:	7cfb      	ldrb	r3, [r7, #19]
 80139a0:	2b00      	cmp	r3, #0
 80139a2:	d112      	bne.n	80139ca <udp_input+0x1f2>
 80139a4:	4b12      	ldr	r3, [pc, #72]	@ (80139f0 <udp_input+0x218>)
 80139a6:	695b      	ldr	r3, [r3, #20]
 80139a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80139ac:	2be0      	cmp	r3, #224	@ 0xe0
 80139ae:	d00c      	beq.n	80139ca <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80139b0:	4b0f      	ldr	r3, [pc, #60]	@ (80139f0 <udp_input+0x218>)
 80139b2:	899b      	ldrh	r3, [r3, #12]
 80139b4:	3308      	adds	r3, #8
 80139b6:	b29b      	uxth	r3, r3
 80139b8:	b21b      	sxth	r3, r3
 80139ba:	4619      	mov	r1, r3
 80139bc:	6878      	ldr	r0, [r7, #4]
 80139be:	f7f9 ffb0 	bl	800d922 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80139c2:	2103      	movs	r1, #3
 80139c4:	6878      	ldr	r0, [r7, #4]
 80139c6:	f001 fbf5 	bl	80151b4 <icmp_dest_unreach>
      pbuf_free(p);
 80139ca:	6878      	ldr	r0, [r7, #4]
 80139cc:	f7f9 ffbc 	bl	800d948 <pbuf_free>
  return;
 80139d0:	e003      	b.n	80139da <udp_input+0x202>
    pbuf_free(p);
 80139d2:	6878      	ldr	r0, [r7, #4]
 80139d4:	f7f9 ffb8 	bl	800d948 <pbuf_free>
  return;
 80139d8:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80139da:	372c      	adds	r7, #44	@ 0x2c
 80139dc:	46bd      	mov	sp, r7
 80139de:	bd90      	pop	{r4, r7, pc}
 80139e0:	080222c0 	.word	0x080222c0
 80139e4:	08022364 	.word	0x08022364
 80139e8:	08022314 	.word	0x08022314
 80139ec:	0802237c 	.word	0x0802237c
 80139f0:	20011e78 	.word	0x20011e78
 80139f4:	20015214 	.word	0x20015214
 80139f8:	08022398 	.word	0x08022398
 80139fc:	20011e88 	.word	0x20011e88

08013a00 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 8013a00:	b580      	push	{r7, lr}
 8013a02:	b082      	sub	sp, #8
 8013a04:	af00      	add	r7, sp, #0
 8013a06:	6078      	str	r0, [r7, #4]
 8013a08:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 8013a0a:	687b      	ldr	r3, [r7, #4]
 8013a0c:	2b00      	cmp	r3, #0
 8013a0e:	d109      	bne.n	8013a24 <udp_send+0x24>
 8013a10:	4b11      	ldr	r3, [pc, #68]	@ (8013a58 <udp_send+0x58>)
 8013a12:	f240 12d5 	movw	r2, #469	@ 0x1d5
 8013a16:	4911      	ldr	r1, [pc, #68]	@ (8013a5c <udp_send+0x5c>)
 8013a18:	4811      	ldr	r0, [pc, #68]	@ (8013a60 <udp_send+0x60>)
 8013a1a:	f003 fddf 	bl	80175dc <iprintf>
 8013a1e:	f06f 030f 	mvn.w	r3, #15
 8013a22:	e015      	b.n	8013a50 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 8013a24:	683b      	ldr	r3, [r7, #0]
 8013a26:	2b00      	cmp	r3, #0
 8013a28:	d109      	bne.n	8013a3e <udp_send+0x3e>
 8013a2a:	4b0b      	ldr	r3, [pc, #44]	@ (8013a58 <udp_send+0x58>)
 8013a2c:	f44f 72eb 	mov.w	r2, #470	@ 0x1d6
 8013a30:	490c      	ldr	r1, [pc, #48]	@ (8013a64 <udp_send+0x64>)
 8013a32:	480b      	ldr	r0, [pc, #44]	@ (8013a60 <udp_send+0x60>)
 8013a34:	f003 fdd2 	bl	80175dc <iprintf>
 8013a38:	f06f 030f 	mvn.w	r3, #15
 8013a3c:	e008      	b.n	8013a50 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 8013a3e:	687b      	ldr	r3, [r7, #4]
 8013a40:	1d1a      	adds	r2, r3, #4
 8013a42:	687b      	ldr	r3, [r7, #4]
 8013a44:	8a9b      	ldrh	r3, [r3, #20]
 8013a46:	6839      	ldr	r1, [r7, #0]
 8013a48:	6878      	ldr	r0, [r7, #4]
 8013a4a:	f000 f80d 	bl	8013a68 <udp_sendto>
 8013a4e:	4603      	mov	r3, r0
}
 8013a50:	4618      	mov	r0, r3
 8013a52:	3708      	adds	r7, #8
 8013a54:	46bd      	mov	sp, r7
 8013a56:	bd80      	pop	{r7, pc}
 8013a58:	080222c0 	.word	0x080222c0
 8013a5c:	080223b4 	.word	0x080223b4
 8013a60:	08022314 	.word	0x08022314
 8013a64:	080223cc 	.word	0x080223cc

08013a68 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8013a68:	b580      	push	{r7, lr}
 8013a6a:	b088      	sub	sp, #32
 8013a6c:	af02      	add	r7, sp, #8
 8013a6e:	60f8      	str	r0, [r7, #12]
 8013a70:	60b9      	str	r1, [r7, #8]
 8013a72:	607a      	str	r2, [r7, #4]
 8013a74:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8013a76:	68fb      	ldr	r3, [r7, #12]
 8013a78:	2b00      	cmp	r3, #0
 8013a7a:	d109      	bne.n	8013a90 <udp_sendto+0x28>
 8013a7c:	4b23      	ldr	r3, [pc, #140]	@ (8013b0c <udp_sendto+0xa4>)
 8013a7e:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8013a82:	4923      	ldr	r1, [pc, #140]	@ (8013b10 <udp_sendto+0xa8>)
 8013a84:	4823      	ldr	r0, [pc, #140]	@ (8013b14 <udp_sendto+0xac>)
 8013a86:	f003 fda9 	bl	80175dc <iprintf>
 8013a8a:	f06f 030f 	mvn.w	r3, #15
 8013a8e:	e038      	b.n	8013b02 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8013a90:	68bb      	ldr	r3, [r7, #8]
 8013a92:	2b00      	cmp	r3, #0
 8013a94:	d109      	bne.n	8013aaa <udp_sendto+0x42>
 8013a96:	4b1d      	ldr	r3, [pc, #116]	@ (8013b0c <udp_sendto+0xa4>)
 8013a98:	f240 2219 	movw	r2, #537	@ 0x219
 8013a9c:	491e      	ldr	r1, [pc, #120]	@ (8013b18 <udp_sendto+0xb0>)
 8013a9e:	481d      	ldr	r0, [pc, #116]	@ (8013b14 <udp_sendto+0xac>)
 8013aa0:	f003 fd9c 	bl	80175dc <iprintf>
 8013aa4:	f06f 030f 	mvn.w	r3, #15
 8013aa8:	e02b      	b.n	8013b02 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8013aaa:	687b      	ldr	r3, [r7, #4]
 8013aac:	2b00      	cmp	r3, #0
 8013aae:	d109      	bne.n	8013ac4 <udp_sendto+0x5c>
 8013ab0:	4b16      	ldr	r3, [pc, #88]	@ (8013b0c <udp_sendto+0xa4>)
 8013ab2:	f240 221a 	movw	r2, #538	@ 0x21a
 8013ab6:	4919      	ldr	r1, [pc, #100]	@ (8013b1c <udp_sendto+0xb4>)
 8013ab8:	4816      	ldr	r0, [pc, #88]	@ (8013b14 <udp_sendto+0xac>)
 8013aba:	f003 fd8f 	bl	80175dc <iprintf>
 8013abe:	f06f 030f 	mvn.w	r3, #15
 8013ac2:	e01e      	b.n	8013b02 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8013ac4:	68fb      	ldr	r3, [r7, #12]
 8013ac6:	7a1b      	ldrb	r3, [r3, #8]
 8013ac8:	2b00      	cmp	r3, #0
 8013aca:	d006      	beq.n	8013ada <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8013acc:	68fb      	ldr	r3, [r7, #12]
 8013ace:	7a1b      	ldrb	r3, [r3, #8]
 8013ad0:	4618      	mov	r0, r3
 8013ad2:	f7f9 fbd9 	bl	800d288 <netif_get_by_index>
 8013ad6:	6178      	str	r0, [r7, #20]
 8013ad8:	e003      	b.n	8013ae2 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8013ada:	6878      	ldr	r0, [r7, #4]
 8013adc:	f001 fbf4 	bl	80152c8 <ip4_route>
 8013ae0:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8013ae2:	697b      	ldr	r3, [r7, #20]
 8013ae4:	2b00      	cmp	r3, #0
 8013ae6:	d102      	bne.n	8013aee <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8013ae8:	f06f 0303 	mvn.w	r3, #3
 8013aec:	e009      	b.n	8013b02 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8013aee:	887a      	ldrh	r2, [r7, #2]
 8013af0:	697b      	ldr	r3, [r7, #20]
 8013af2:	9300      	str	r3, [sp, #0]
 8013af4:	4613      	mov	r3, r2
 8013af6:	687a      	ldr	r2, [r7, #4]
 8013af8:	68b9      	ldr	r1, [r7, #8]
 8013afa:	68f8      	ldr	r0, [r7, #12]
 8013afc:	f000 f810 	bl	8013b20 <udp_sendto_if>
 8013b00:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8013b02:	4618      	mov	r0, r3
 8013b04:	3718      	adds	r7, #24
 8013b06:	46bd      	mov	sp, r7
 8013b08:	bd80      	pop	{r7, pc}
 8013b0a:	bf00      	nop
 8013b0c:	080222c0 	.word	0x080222c0
 8013b10:	080223e4 	.word	0x080223e4
 8013b14:	08022314 	.word	0x08022314
 8013b18:	080223fc 	.word	0x080223fc
 8013b1c:	08022418 	.word	0x08022418

08013b20 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8013b20:	b580      	push	{r7, lr}
 8013b22:	b088      	sub	sp, #32
 8013b24:	af02      	add	r7, sp, #8
 8013b26:	60f8      	str	r0, [r7, #12]
 8013b28:	60b9      	str	r1, [r7, #8]
 8013b2a:	607a      	str	r2, [r7, #4]
 8013b2c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8013b2e:	68fb      	ldr	r3, [r7, #12]
 8013b30:	2b00      	cmp	r3, #0
 8013b32:	d109      	bne.n	8013b48 <udp_sendto_if+0x28>
 8013b34:	4b2e      	ldr	r3, [pc, #184]	@ (8013bf0 <udp_sendto_if+0xd0>)
 8013b36:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8013b3a:	492e      	ldr	r1, [pc, #184]	@ (8013bf4 <udp_sendto_if+0xd4>)
 8013b3c:	482e      	ldr	r0, [pc, #184]	@ (8013bf8 <udp_sendto_if+0xd8>)
 8013b3e:	f003 fd4d 	bl	80175dc <iprintf>
 8013b42:	f06f 030f 	mvn.w	r3, #15
 8013b46:	e04f      	b.n	8013be8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8013b48:	68bb      	ldr	r3, [r7, #8]
 8013b4a:	2b00      	cmp	r3, #0
 8013b4c:	d109      	bne.n	8013b62 <udp_sendto_if+0x42>
 8013b4e:	4b28      	ldr	r3, [pc, #160]	@ (8013bf0 <udp_sendto_if+0xd0>)
 8013b50:	f240 2281 	movw	r2, #641	@ 0x281
 8013b54:	4929      	ldr	r1, [pc, #164]	@ (8013bfc <udp_sendto_if+0xdc>)
 8013b56:	4828      	ldr	r0, [pc, #160]	@ (8013bf8 <udp_sendto_if+0xd8>)
 8013b58:	f003 fd40 	bl	80175dc <iprintf>
 8013b5c:	f06f 030f 	mvn.w	r3, #15
 8013b60:	e042      	b.n	8013be8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8013b62:	687b      	ldr	r3, [r7, #4]
 8013b64:	2b00      	cmp	r3, #0
 8013b66:	d109      	bne.n	8013b7c <udp_sendto_if+0x5c>
 8013b68:	4b21      	ldr	r3, [pc, #132]	@ (8013bf0 <udp_sendto_if+0xd0>)
 8013b6a:	f240 2282 	movw	r2, #642	@ 0x282
 8013b6e:	4924      	ldr	r1, [pc, #144]	@ (8013c00 <udp_sendto_if+0xe0>)
 8013b70:	4821      	ldr	r0, [pc, #132]	@ (8013bf8 <udp_sendto_if+0xd8>)
 8013b72:	f003 fd33 	bl	80175dc <iprintf>
 8013b76:	f06f 030f 	mvn.w	r3, #15
 8013b7a:	e035      	b.n	8013be8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8013b7c:	6a3b      	ldr	r3, [r7, #32]
 8013b7e:	2b00      	cmp	r3, #0
 8013b80:	d109      	bne.n	8013b96 <udp_sendto_if+0x76>
 8013b82:	4b1b      	ldr	r3, [pc, #108]	@ (8013bf0 <udp_sendto_if+0xd0>)
 8013b84:	f240 2283 	movw	r2, #643	@ 0x283
 8013b88:	491e      	ldr	r1, [pc, #120]	@ (8013c04 <udp_sendto_if+0xe4>)
 8013b8a:	481b      	ldr	r0, [pc, #108]	@ (8013bf8 <udp_sendto_if+0xd8>)
 8013b8c:	f003 fd26 	bl	80175dc <iprintf>
 8013b90:	f06f 030f 	mvn.w	r3, #15
 8013b94:	e028      	b.n	8013be8 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013b96:	68fb      	ldr	r3, [r7, #12]
 8013b98:	2b00      	cmp	r3, #0
 8013b9a:	d009      	beq.n	8013bb0 <udp_sendto_if+0x90>
 8013b9c:	68fb      	ldr	r3, [r7, #12]
 8013b9e:	681b      	ldr	r3, [r3, #0]
 8013ba0:	2b00      	cmp	r3, #0
 8013ba2:	d005      	beq.n	8013bb0 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8013ba4:	68fb      	ldr	r3, [r7, #12]
 8013ba6:	681b      	ldr	r3, [r3, #0]
 8013ba8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013bac:	2be0      	cmp	r3, #224	@ 0xe0
 8013bae:	d103      	bne.n	8013bb8 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8013bb0:	6a3b      	ldr	r3, [r7, #32]
 8013bb2:	3304      	adds	r3, #4
 8013bb4:	617b      	str	r3, [r7, #20]
 8013bb6:	e00b      	b.n	8013bd0 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8013bb8:	68fb      	ldr	r3, [r7, #12]
 8013bba:	681a      	ldr	r2, [r3, #0]
 8013bbc:	6a3b      	ldr	r3, [r7, #32]
 8013bbe:	3304      	adds	r3, #4
 8013bc0:	681b      	ldr	r3, [r3, #0]
 8013bc2:	429a      	cmp	r2, r3
 8013bc4:	d002      	beq.n	8013bcc <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8013bc6:	f06f 0303 	mvn.w	r3, #3
 8013bca:	e00d      	b.n	8013be8 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8013bcc:	68fb      	ldr	r3, [r7, #12]
 8013bce:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8013bd0:	887a      	ldrh	r2, [r7, #2]
 8013bd2:	697b      	ldr	r3, [r7, #20]
 8013bd4:	9301      	str	r3, [sp, #4]
 8013bd6:	6a3b      	ldr	r3, [r7, #32]
 8013bd8:	9300      	str	r3, [sp, #0]
 8013bda:	4613      	mov	r3, r2
 8013bdc:	687a      	ldr	r2, [r7, #4]
 8013bde:	68b9      	ldr	r1, [r7, #8]
 8013be0:	68f8      	ldr	r0, [r7, #12]
 8013be2:	f000 f811 	bl	8013c08 <udp_sendto_if_src>
 8013be6:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8013be8:	4618      	mov	r0, r3
 8013bea:	3718      	adds	r7, #24
 8013bec:	46bd      	mov	sp, r7
 8013bee:	bd80      	pop	{r7, pc}
 8013bf0:	080222c0 	.word	0x080222c0
 8013bf4:	08022434 	.word	0x08022434
 8013bf8:	08022314 	.word	0x08022314
 8013bfc:	08022450 	.word	0x08022450
 8013c00:	0802246c 	.word	0x0802246c
 8013c04:	0802248c 	.word	0x0802248c

08013c08 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8013c08:	b580      	push	{r7, lr}
 8013c0a:	b08c      	sub	sp, #48	@ 0x30
 8013c0c:	af04      	add	r7, sp, #16
 8013c0e:	60f8      	str	r0, [r7, #12]
 8013c10:	60b9      	str	r1, [r7, #8]
 8013c12:	607a      	str	r2, [r7, #4]
 8013c14:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8013c16:	68fb      	ldr	r3, [r7, #12]
 8013c18:	2b00      	cmp	r3, #0
 8013c1a:	d109      	bne.n	8013c30 <udp_sendto_if_src+0x28>
 8013c1c:	4b65      	ldr	r3, [pc, #404]	@ (8013db4 <udp_sendto_if_src+0x1ac>)
 8013c1e:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8013c22:	4965      	ldr	r1, [pc, #404]	@ (8013db8 <udp_sendto_if_src+0x1b0>)
 8013c24:	4865      	ldr	r0, [pc, #404]	@ (8013dbc <udp_sendto_if_src+0x1b4>)
 8013c26:	f003 fcd9 	bl	80175dc <iprintf>
 8013c2a:	f06f 030f 	mvn.w	r3, #15
 8013c2e:	e0bc      	b.n	8013daa <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8013c30:	68bb      	ldr	r3, [r7, #8]
 8013c32:	2b00      	cmp	r3, #0
 8013c34:	d109      	bne.n	8013c4a <udp_sendto_if_src+0x42>
 8013c36:	4b5f      	ldr	r3, [pc, #380]	@ (8013db4 <udp_sendto_if_src+0x1ac>)
 8013c38:	f240 22d2 	movw	r2, #722	@ 0x2d2
 8013c3c:	4960      	ldr	r1, [pc, #384]	@ (8013dc0 <udp_sendto_if_src+0x1b8>)
 8013c3e:	485f      	ldr	r0, [pc, #380]	@ (8013dbc <udp_sendto_if_src+0x1b4>)
 8013c40:	f003 fccc 	bl	80175dc <iprintf>
 8013c44:	f06f 030f 	mvn.w	r3, #15
 8013c48:	e0af      	b.n	8013daa <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8013c4a:	687b      	ldr	r3, [r7, #4]
 8013c4c:	2b00      	cmp	r3, #0
 8013c4e:	d109      	bne.n	8013c64 <udp_sendto_if_src+0x5c>
 8013c50:	4b58      	ldr	r3, [pc, #352]	@ (8013db4 <udp_sendto_if_src+0x1ac>)
 8013c52:	f240 22d3 	movw	r2, #723	@ 0x2d3
 8013c56:	495b      	ldr	r1, [pc, #364]	@ (8013dc4 <udp_sendto_if_src+0x1bc>)
 8013c58:	4858      	ldr	r0, [pc, #352]	@ (8013dbc <udp_sendto_if_src+0x1b4>)
 8013c5a:	f003 fcbf 	bl	80175dc <iprintf>
 8013c5e:	f06f 030f 	mvn.w	r3, #15
 8013c62:	e0a2      	b.n	8013daa <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8013c64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013c66:	2b00      	cmp	r3, #0
 8013c68:	d109      	bne.n	8013c7e <udp_sendto_if_src+0x76>
 8013c6a:	4b52      	ldr	r3, [pc, #328]	@ (8013db4 <udp_sendto_if_src+0x1ac>)
 8013c6c:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 8013c70:	4955      	ldr	r1, [pc, #340]	@ (8013dc8 <udp_sendto_if_src+0x1c0>)
 8013c72:	4852      	ldr	r0, [pc, #328]	@ (8013dbc <udp_sendto_if_src+0x1b4>)
 8013c74:	f003 fcb2 	bl	80175dc <iprintf>
 8013c78:	f06f 030f 	mvn.w	r3, #15
 8013c7c:	e095      	b.n	8013daa <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8013c7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013c80:	2b00      	cmp	r3, #0
 8013c82:	d109      	bne.n	8013c98 <udp_sendto_if_src+0x90>
 8013c84:	4b4b      	ldr	r3, [pc, #300]	@ (8013db4 <udp_sendto_if_src+0x1ac>)
 8013c86:	f240 22d5 	movw	r2, #725	@ 0x2d5
 8013c8a:	4950      	ldr	r1, [pc, #320]	@ (8013dcc <udp_sendto_if_src+0x1c4>)
 8013c8c:	484b      	ldr	r0, [pc, #300]	@ (8013dbc <udp_sendto_if_src+0x1b4>)
 8013c8e:	f003 fca5 	bl	80175dc <iprintf>
 8013c92:	f06f 030f 	mvn.w	r3, #15
 8013c96:	e088      	b.n	8013daa <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8013c98:	68fb      	ldr	r3, [r7, #12]
 8013c9a:	8a5b      	ldrh	r3, [r3, #18]
 8013c9c:	2b00      	cmp	r3, #0
 8013c9e:	d10f      	bne.n	8013cc0 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8013ca0:	68f9      	ldr	r1, [r7, #12]
 8013ca2:	68fb      	ldr	r3, [r7, #12]
 8013ca4:	8a5b      	ldrh	r3, [r3, #18]
 8013ca6:	461a      	mov	r2, r3
 8013ca8:	68f8      	ldr	r0, [r7, #12]
 8013caa:	f000 f893 	bl	8013dd4 <udp_bind>
 8013cae:	4603      	mov	r3, r0
 8013cb0:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8013cb2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8013cb6:	2b00      	cmp	r3, #0
 8013cb8:	d002      	beq.n	8013cc0 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8013cba:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8013cbe:	e074      	b.n	8013daa <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8013cc0:	68bb      	ldr	r3, [r7, #8]
 8013cc2:	891b      	ldrh	r3, [r3, #8]
 8013cc4:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8013cc8:	4293      	cmp	r3, r2
 8013cca:	d902      	bls.n	8013cd2 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8013ccc:	f04f 33ff 	mov.w	r3, #4294967295
 8013cd0:	e06b      	b.n	8013daa <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8013cd2:	2108      	movs	r1, #8
 8013cd4:	68b8      	ldr	r0, [r7, #8]
 8013cd6:	f7f9 fda1 	bl	800d81c <pbuf_add_header>
 8013cda:	4603      	mov	r3, r0
 8013cdc:	2b00      	cmp	r3, #0
 8013cde:	d015      	beq.n	8013d0c <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8013ce0:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8013ce4:	2108      	movs	r1, #8
 8013ce6:	2022      	movs	r0, #34	@ 0x22
 8013ce8:	f7f9 fb4a 	bl	800d380 <pbuf_alloc>
 8013cec:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8013cee:	69fb      	ldr	r3, [r7, #28]
 8013cf0:	2b00      	cmp	r3, #0
 8013cf2:	d102      	bne.n	8013cfa <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8013cf4:	f04f 33ff 	mov.w	r3, #4294967295
 8013cf8:	e057      	b.n	8013daa <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8013cfa:	68bb      	ldr	r3, [r7, #8]
 8013cfc:	891b      	ldrh	r3, [r3, #8]
 8013cfe:	2b00      	cmp	r3, #0
 8013d00:	d006      	beq.n	8013d10 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8013d02:	68b9      	ldr	r1, [r7, #8]
 8013d04:	69f8      	ldr	r0, [r7, #28]
 8013d06:	f7f9 ff37 	bl	800db78 <pbuf_chain>
 8013d0a:	e001      	b.n	8013d10 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8013d0c:	68bb      	ldr	r3, [r7, #8]
 8013d0e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8013d10:	69fb      	ldr	r3, [r7, #28]
 8013d12:	895b      	ldrh	r3, [r3, #10]
 8013d14:	2b07      	cmp	r3, #7
 8013d16:	d806      	bhi.n	8013d26 <udp_sendto_if_src+0x11e>
 8013d18:	4b26      	ldr	r3, [pc, #152]	@ (8013db4 <udp_sendto_if_src+0x1ac>)
 8013d1a:	f240 320d 	movw	r2, #781	@ 0x30d
 8013d1e:	492c      	ldr	r1, [pc, #176]	@ (8013dd0 <udp_sendto_if_src+0x1c8>)
 8013d20:	4826      	ldr	r0, [pc, #152]	@ (8013dbc <udp_sendto_if_src+0x1b4>)
 8013d22:	f003 fc5b 	bl	80175dc <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8013d26:	69fb      	ldr	r3, [r7, #28]
 8013d28:	685b      	ldr	r3, [r3, #4]
 8013d2a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8013d2c:	68fb      	ldr	r3, [r7, #12]
 8013d2e:	8a5b      	ldrh	r3, [r3, #18]
 8013d30:	4618      	mov	r0, r3
 8013d32:	f7f7 ffe1 	bl	800bcf8 <lwip_htons>
 8013d36:	4603      	mov	r3, r0
 8013d38:	461a      	mov	r2, r3
 8013d3a:	697b      	ldr	r3, [r7, #20]
 8013d3c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8013d3e:	887b      	ldrh	r3, [r7, #2]
 8013d40:	4618      	mov	r0, r3
 8013d42:	f7f7 ffd9 	bl	800bcf8 <lwip_htons>
 8013d46:	4603      	mov	r3, r0
 8013d48:	461a      	mov	r2, r3
 8013d4a:	697b      	ldr	r3, [r7, #20]
 8013d4c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8013d4e:	697b      	ldr	r3, [r7, #20]
 8013d50:	2200      	movs	r2, #0
 8013d52:	719a      	strb	r2, [r3, #6]
 8013d54:	2200      	movs	r2, #0
 8013d56:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8013d58:	69fb      	ldr	r3, [r7, #28]
 8013d5a:	891b      	ldrh	r3, [r3, #8]
 8013d5c:	4618      	mov	r0, r3
 8013d5e:	f7f7 ffcb 	bl	800bcf8 <lwip_htons>
 8013d62:	4603      	mov	r3, r0
 8013d64:	461a      	mov	r2, r3
 8013d66:	697b      	ldr	r3, [r7, #20]
 8013d68:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8013d6a:	2311      	movs	r3, #17
 8013d6c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8013d6e:	68fb      	ldr	r3, [r7, #12]
 8013d70:	7adb      	ldrb	r3, [r3, #11]
 8013d72:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8013d74:	68fb      	ldr	r3, [r7, #12]
 8013d76:	7a9b      	ldrb	r3, [r3, #10]
 8013d78:	7cb9      	ldrb	r1, [r7, #18]
 8013d7a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013d7c:	9202      	str	r2, [sp, #8]
 8013d7e:	7cfa      	ldrb	r2, [r7, #19]
 8013d80:	9201      	str	r2, [sp, #4]
 8013d82:	9300      	str	r3, [sp, #0]
 8013d84:	460b      	mov	r3, r1
 8013d86:	687a      	ldr	r2, [r7, #4]
 8013d88:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8013d8a:	69f8      	ldr	r0, [r7, #28]
 8013d8c:	f001 fc84 	bl	8015698 <ip4_output_if_src>
 8013d90:	4603      	mov	r3, r0
 8013d92:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8013d94:	69fa      	ldr	r2, [r7, #28]
 8013d96:	68bb      	ldr	r3, [r7, #8]
 8013d98:	429a      	cmp	r2, r3
 8013d9a:	d004      	beq.n	8013da6 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8013d9c:	69f8      	ldr	r0, [r7, #28]
 8013d9e:	f7f9 fdd3 	bl	800d948 <pbuf_free>
    q = NULL;
 8013da2:	2300      	movs	r3, #0
 8013da4:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8013da6:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8013daa:	4618      	mov	r0, r3
 8013dac:	3720      	adds	r7, #32
 8013dae:	46bd      	mov	sp, r7
 8013db0:	bd80      	pop	{r7, pc}
 8013db2:	bf00      	nop
 8013db4:	080222c0 	.word	0x080222c0
 8013db8:	080224ac 	.word	0x080224ac
 8013dbc:	08022314 	.word	0x08022314
 8013dc0:	080224cc 	.word	0x080224cc
 8013dc4:	080224ec 	.word	0x080224ec
 8013dc8:	08022510 	.word	0x08022510
 8013dcc:	08022534 	.word	0x08022534
 8013dd0:	08022558 	.word	0x08022558

08013dd4 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013dd4:	b580      	push	{r7, lr}
 8013dd6:	b086      	sub	sp, #24
 8013dd8:	af00      	add	r7, sp, #0
 8013dda:	60f8      	str	r0, [r7, #12]
 8013ddc:	60b9      	str	r1, [r7, #8]
 8013dde:	4613      	mov	r3, r2
 8013de0:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8013de2:	68bb      	ldr	r3, [r7, #8]
 8013de4:	2b00      	cmp	r3, #0
 8013de6:	d101      	bne.n	8013dec <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8013de8:	4b39      	ldr	r3, [pc, #228]	@ (8013ed0 <udp_bind+0xfc>)
 8013dea:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8013dec:	68fb      	ldr	r3, [r7, #12]
 8013dee:	2b00      	cmp	r3, #0
 8013df0:	d109      	bne.n	8013e06 <udp_bind+0x32>
 8013df2:	4b38      	ldr	r3, [pc, #224]	@ (8013ed4 <udp_bind+0x100>)
 8013df4:	f240 32b7 	movw	r2, #951	@ 0x3b7
 8013df8:	4937      	ldr	r1, [pc, #220]	@ (8013ed8 <udp_bind+0x104>)
 8013dfa:	4838      	ldr	r0, [pc, #224]	@ (8013edc <udp_bind+0x108>)
 8013dfc:	f003 fbee 	bl	80175dc <iprintf>
 8013e00:	f06f 030f 	mvn.w	r3, #15
 8013e04:	e060      	b.n	8013ec8 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8013e06:	2300      	movs	r3, #0
 8013e08:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013e0a:	4b35      	ldr	r3, [pc, #212]	@ (8013ee0 <udp_bind+0x10c>)
 8013e0c:	681b      	ldr	r3, [r3, #0]
 8013e0e:	617b      	str	r3, [r7, #20]
 8013e10:	e009      	b.n	8013e26 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8013e12:	68fa      	ldr	r2, [r7, #12]
 8013e14:	697b      	ldr	r3, [r7, #20]
 8013e16:	429a      	cmp	r2, r3
 8013e18:	d102      	bne.n	8013e20 <udp_bind+0x4c>
      rebind = 1;
 8013e1a:	2301      	movs	r3, #1
 8013e1c:	74fb      	strb	r3, [r7, #19]
      break;
 8013e1e:	e005      	b.n	8013e2c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013e20:	697b      	ldr	r3, [r7, #20]
 8013e22:	68db      	ldr	r3, [r3, #12]
 8013e24:	617b      	str	r3, [r7, #20]
 8013e26:	697b      	ldr	r3, [r7, #20]
 8013e28:	2b00      	cmp	r3, #0
 8013e2a:	d1f2      	bne.n	8013e12 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8013e2c:	88fb      	ldrh	r3, [r7, #6]
 8013e2e:	2b00      	cmp	r3, #0
 8013e30:	d109      	bne.n	8013e46 <udp_bind+0x72>
    port = udp_new_port();
 8013e32:	f7ff fc35 	bl	80136a0 <udp_new_port>
 8013e36:	4603      	mov	r3, r0
 8013e38:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8013e3a:	88fb      	ldrh	r3, [r7, #6]
 8013e3c:	2b00      	cmp	r3, #0
 8013e3e:	d12c      	bne.n	8013e9a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8013e40:	f06f 0307 	mvn.w	r3, #7
 8013e44:	e040      	b.n	8013ec8 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013e46:	4b26      	ldr	r3, [pc, #152]	@ (8013ee0 <udp_bind+0x10c>)
 8013e48:	681b      	ldr	r3, [r3, #0]
 8013e4a:	617b      	str	r3, [r7, #20]
 8013e4c:	e022      	b.n	8013e94 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8013e4e:	68fa      	ldr	r2, [r7, #12]
 8013e50:	697b      	ldr	r3, [r7, #20]
 8013e52:	429a      	cmp	r2, r3
 8013e54:	d01b      	beq.n	8013e8e <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8013e56:	697b      	ldr	r3, [r7, #20]
 8013e58:	8a5b      	ldrh	r3, [r3, #18]
 8013e5a:	88fa      	ldrh	r2, [r7, #6]
 8013e5c:	429a      	cmp	r2, r3
 8013e5e:	d116      	bne.n	8013e8e <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013e60:	697b      	ldr	r3, [r7, #20]
 8013e62:	681a      	ldr	r2, [r3, #0]
 8013e64:	68bb      	ldr	r3, [r7, #8]
 8013e66:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8013e68:	429a      	cmp	r2, r3
 8013e6a:	d00d      	beq.n	8013e88 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013e6c:	68bb      	ldr	r3, [r7, #8]
 8013e6e:	2b00      	cmp	r3, #0
 8013e70:	d00a      	beq.n	8013e88 <udp_bind+0xb4>
 8013e72:	68bb      	ldr	r3, [r7, #8]
 8013e74:	681b      	ldr	r3, [r3, #0]
 8013e76:	2b00      	cmp	r3, #0
 8013e78:	d006      	beq.n	8013e88 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8013e7a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013e7c:	2b00      	cmp	r3, #0
 8013e7e:	d003      	beq.n	8013e88 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8013e80:	697b      	ldr	r3, [r7, #20]
 8013e82:	681b      	ldr	r3, [r3, #0]
 8013e84:	2b00      	cmp	r3, #0
 8013e86:	d102      	bne.n	8013e8e <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8013e88:	f06f 0307 	mvn.w	r3, #7
 8013e8c:	e01c      	b.n	8013ec8 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013e8e:	697b      	ldr	r3, [r7, #20]
 8013e90:	68db      	ldr	r3, [r3, #12]
 8013e92:	617b      	str	r3, [r7, #20]
 8013e94:	697b      	ldr	r3, [r7, #20]
 8013e96:	2b00      	cmp	r3, #0
 8013e98:	d1d9      	bne.n	8013e4e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8013e9a:	68bb      	ldr	r3, [r7, #8]
 8013e9c:	2b00      	cmp	r3, #0
 8013e9e:	d002      	beq.n	8013ea6 <udp_bind+0xd2>
 8013ea0:	68bb      	ldr	r3, [r7, #8]
 8013ea2:	681b      	ldr	r3, [r3, #0]
 8013ea4:	e000      	b.n	8013ea8 <udp_bind+0xd4>
 8013ea6:	2300      	movs	r3, #0
 8013ea8:	68fa      	ldr	r2, [r7, #12]
 8013eaa:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8013eac:	68fb      	ldr	r3, [r7, #12]
 8013eae:	88fa      	ldrh	r2, [r7, #6]
 8013eb0:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8013eb2:	7cfb      	ldrb	r3, [r7, #19]
 8013eb4:	2b00      	cmp	r3, #0
 8013eb6:	d106      	bne.n	8013ec6 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8013eb8:	4b09      	ldr	r3, [pc, #36]	@ (8013ee0 <udp_bind+0x10c>)
 8013eba:	681a      	ldr	r2, [r3, #0]
 8013ebc:	68fb      	ldr	r3, [r7, #12]
 8013ebe:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8013ec0:	4a07      	ldr	r2, [pc, #28]	@ (8013ee0 <udp_bind+0x10c>)
 8013ec2:	68fb      	ldr	r3, [r7, #12]
 8013ec4:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8013ec6:	2300      	movs	r3, #0
}
 8013ec8:	4618      	mov	r0, r3
 8013eca:	3718      	adds	r7, #24
 8013ecc:	46bd      	mov	sp, r7
 8013ece:	bd80      	pop	{r7, pc}
 8013ed0:	08022de4 	.word	0x08022de4
 8013ed4:	080222c0 	.word	0x080222c0
 8013ed8:	08022588 	.word	0x08022588
 8013edc:	08022314 	.word	0x08022314
 8013ee0:	20015214 	.word	0x20015214

08013ee4 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013ee4:	b580      	push	{r7, lr}
 8013ee6:	b086      	sub	sp, #24
 8013ee8:	af00      	add	r7, sp, #0
 8013eea:	60f8      	str	r0, [r7, #12]
 8013eec:	60b9      	str	r1, [r7, #8]
 8013eee:	4613      	mov	r3, r2
 8013ef0:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8013ef2:	68fb      	ldr	r3, [r7, #12]
 8013ef4:	2b00      	cmp	r3, #0
 8013ef6:	d109      	bne.n	8013f0c <udp_connect+0x28>
 8013ef8:	4b2c      	ldr	r3, [pc, #176]	@ (8013fac <udp_connect+0xc8>)
 8013efa:	f240 4235 	movw	r2, #1077	@ 0x435
 8013efe:	492c      	ldr	r1, [pc, #176]	@ (8013fb0 <udp_connect+0xcc>)
 8013f00:	482c      	ldr	r0, [pc, #176]	@ (8013fb4 <udp_connect+0xd0>)
 8013f02:	f003 fb6b 	bl	80175dc <iprintf>
 8013f06:	f06f 030f 	mvn.w	r3, #15
 8013f0a:	e04b      	b.n	8013fa4 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8013f0c:	68bb      	ldr	r3, [r7, #8]
 8013f0e:	2b00      	cmp	r3, #0
 8013f10:	d109      	bne.n	8013f26 <udp_connect+0x42>
 8013f12:	4b26      	ldr	r3, [pc, #152]	@ (8013fac <udp_connect+0xc8>)
 8013f14:	f240 4236 	movw	r2, #1078	@ 0x436
 8013f18:	4927      	ldr	r1, [pc, #156]	@ (8013fb8 <udp_connect+0xd4>)
 8013f1a:	4826      	ldr	r0, [pc, #152]	@ (8013fb4 <udp_connect+0xd0>)
 8013f1c:	f003 fb5e 	bl	80175dc <iprintf>
 8013f20:	f06f 030f 	mvn.w	r3, #15
 8013f24:	e03e      	b.n	8013fa4 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8013f26:	68fb      	ldr	r3, [r7, #12]
 8013f28:	8a5b      	ldrh	r3, [r3, #18]
 8013f2a:	2b00      	cmp	r3, #0
 8013f2c:	d10f      	bne.n	8013f4e <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8013f2e:	68f9      	ldr	r1, [r7, #12]
 8013f30:	68fb      	ldr	r3, [r7, #12]
 8013f32:	8a5b      	ldrh	r3, [r3, #18]
 8013f34:	461a      	mov	r2, r3
 8013f36:	68f8      	ldr	r0, [r7, #12]
 8013f38:	f7ff ff4c 	bl	8013dd4 <udp_bind>
 8013f3c:	4603      	mov	r3, r0
 8013f3e:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8013f40:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013f44:	2b00      	cmp	r3, #0
 8013f46:	d002      	beq.n	8013f4e <udp_connect+0x6a>
      return err;
 8013f48:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013f4c:	e02a      	b.n	8013fa4 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8013f4e:	68bb      	ldr	r3, [r7, #8]
 8013f50:	2b00      	cmp	r3, #0
 8013f52:	d002      	beq.n	8013f5a <udp_connect+0x76>
 8013f54:	68bb      	ldr	r3, [r7, #8]
 8013f56:	681b      	ldr	r3, [r3, #0]
 8013f58:	e000      	b.n	8013f5c <udp_connect+0x78>
 8013f5a:	2300      	movs	r3, #0
 8013f5c:	68fa      	ldr	r2, [r7, #12]
 8013f5e:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8013f60:	68fb      	ldr	r3, [r7, #12]
 8013f62:	88fa      	ldrh	r2, [r7, #6]
 8013f64:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8013f66:	68fb      	ldr	r3, [r7, #12]
 8013f68:	7c1b      	ldrb	r3, [r3, #16]
 8013f6a:	f043 0304 	orr.w	r3, r3, #4
 8013f6e:	b2da      	uxtb	r2, r3
 8013f70:	68fb      	ldr	r3, [r7, #12]
 8013f72:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013f74:	4b11      	ldr	r3, [pc, #68]	@ (8013fbc <udp_connect+0xd8>)
 8013f76:	681b      	ldr	r3, [r3, #0]
 8013f78:	617b      	str	r3, [r7, #20]
 8013f7a:	e008      	b.n	8013f8e <udp_connect+0xaa>
    if (pcb == ipcb) {
 8013f7c:	68fa      	ldr	r2, [r7, #12]
 8013f7e:	697b      	ldr	r3, [r7, #20]
 8013f80:	429a      	cmp	r2, r3
 8013f82:	d101      	bne.n	8013f88 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8013f84:	2300      	movs	r3, #0
 8013f86:	e00d      	b.n	8013fa4 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013f88:	697b      	ldr	r3, [r7, #20]
 8013f8a:	68db      	ldr	r3, [r3, #12]
 8013f8c:	617b      	str	r3, [r7, #20]
 8013f8e:	697b      	ldr	r3, [r7, #20]
 8013f90:	2b00      	cmp	r3, #0
 8013f92:	d1f3      	bne.n	8013f7c <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8013f94:	4b09      	ldr	r3, [pc, #36]	@ (8013fbc <udp_connect+0xd8>)
 8013f96:	681a      	ldr	r2, [r3, #0]
 8013f98:	68fb      	ldr	r3, [r7, #12]
 8013f9a:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8013f9c:	4a07      	ldr	r2, [pc, #28]	@ (8013fbc <udp_connect+0xd8>)
 8013f9e:	68fb      	ldr	r3, [r7, #12]
 8013fa0:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8013fa2:	2300      	movs	r3, #0
}
 8013fa4:	4618      	mov	r0, r3
 8013fa6:	3718      	adds	r7, #24
 8013fa8:	46bd      	mov	sp, r7
 8013faa:	bd80      	pop	{r7, pc}
 8013fac:	080222c0 	.word	0x080222c0
 8013fb0:	080225a0 	.word	0x080225a0
 8013fb4:	08022314 	.word	0x08022314
 8013fb8:	080225bc 	.word	0x080225bc
 8013fbc:	20015214 	.word	0x20015214

08013fc0 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8013fc0:	b580      	push	{r7, lr}
 8013fc2:	b084      	sub	sp, #16
 8013fc4:	af00      	add	r7, sp, #0
 8013fc6:	60f8      	str	r0, [r7, #12]
 8013fc8:	60b9      	str	r1, [r7, #8]
 8013fca:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8013fcc:	68fb      	ldr	r3, [r7, #12]
 8013fce:	2b00      	cmp	r3, #0
 8013fd0:	d107      	bne.n	8013fe2 <udp_recv+0x22>
 8013fd2:	4b08      	ldr	r3, [pc, #32]	@ (8013ff4 <udp_recv+0x34>)
 8013fd4:	f240 428a 	movw	r2, #1162	@ 0x48a
 8013fd8:	4907      	ldr	r1, [pc, #28]	@ (8013ff8 <udp_recv+0x38>)
 8013fda:	4808      	ldr	r0, [pc, #32]	@ (8013ffc <udp_recv+0x3c>)
 8013fdc:	f003 fafe 	bl	80175dc <iprintf>
 8013fe0:	e005      	b.n	8013fee <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8013fe2:	68fb      	ldr	r3, [r7, #12]
 8013fe4:	68ba      	ldr	r2, [r7, #8]
 8013fe6:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8013fe8:	68fb      	ldr	r3, [r7, #12]
 8013fea:	687a      	ldr	r2, [r7, #4]
 8013fec:	61da      	str	r2, [r3, #28]
}
 8013fee:	3710      	adds	r7, #16
 8013ff0:	46bd      	mov	sp, r7
 8013ff2:	bd80      	pop	{r7, pc}
 8013ff4:	080222c0 	.word	0x080222c0
 8013ff8:	080225f4 	.word	0x080225f4
 8013ffc:	08022314 	.word	0x08022314

08014000 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8014000:	b580      	push	{r7, lr}
 8014002:	b084      	sub	sp, #16
 8014004:	af00      	add	r7, sp, #0
 8014006:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8014008:	687b      	ldr	r3, [r7, #4]
 801400a:	2b00      	cmp	r3, #0
 801400c:	d107      	bne.n	801401e <udp_remove+0x1e>
 801400e:	4b19      	ldr	r3, [pc, #100]	@ (8014074 <udp_remove+0x74>)
 8014010:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 8014014:	4918      	ldr	r1, [pc, #96]	@ (8014078 <udp_remove+0x78>)
 8014016:	4819      	ldr	r0, [pc, #100]	@ (801407c <udp_remove+0x7c>)
 8014018:	f003 fae0 	bl	80175dc <iprintf>
 801401c:	e026      	b.n	801406c <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801401e:	4b18      	ldr	r3, [pc, #96]	@ (8014080 <udp_remove+0x80>)
 8014020:	681b      	ldr	r3, [r3, #0]
 8014022:	687a      	ldr	r2, [r7, #4]
 8014024:	429a      	cmp	r2, r3
 8014026:	d105      	bne.n	8014034 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8014028:	4b15      	ldr	r3, [pc, #84]	@ (8014080 <udp_remove+0x80>)
 801402a:	681b      	ldr	r3, [r3, #0]
 801402c:	68db      	ldr	r3, [r3, #12]
 801402e:	4a14      	ldr	r2, [pc, #80]	@ (8014080 <udp_remove+0x80>)
 8014030:	6013      	str	r3, [r2, #0]
 8014032:	e017      	b.n	8014064 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8014034:	4b12      	ldr	r3, [pc, #72]	@ (8014080 <udp_remove+0x80>)
 8014036:	681b      	ldr	r3, [r3, #0]
 8014038:	60fb      	str	r3, [r7, #12]
 801403a:	e010      	b.n	801405e <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801403c:	68fb      	ldr	r3, [r7, #12]
 801403e:	68db      	ldr	r3, [r3, #12]
 8014040:	2b00      	cmp	r3, #0
 8014042:	d009      	beq.n	8014058 <udp_remove+0x58>
 8014044:	68fb      	ldr	r3, [r7, #12]
 8014046:	68db      	ldr	r3, [r3, #12]
 8014048:	687a      	ldr	r2, [r7, #4]
 801404a:	429a      	cmp	r2, r3
 801404c:	d104      	bne.n	8014058 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801404e:	687b      	ldr	r3, [r7, #4]
 8014050:	68da      	ldr	r2, [r3, #12]
 8014052:	68fb      	ldr	r3, [r7, #12]
 8014054:	60da      	str	r2, [r3, #12]
        break;
 8014056:	e005      	b.n	8014064 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8014058:	68fb      	ldr	r3, [r7, #12]
 801405a:	68db      	ldr	r3, [r3, #12]
 801405c:	60fb      	str	r3, [r7, #12]
 801405e:	68fb      	ldr	r3, [r7, #12]
 8014060:	2b00      	cmp	r3, #0
 8014062:	d1eb      	bne.n	801403c <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8014064:	6879      	ldr	r1, [r7, #4]
 8014066:	2000      	movs	r0, #0
 8014068:	f7f8 fdf8 	bl	800cc5c <memp_free>
}
 801406c:	3710      	adds	r7, #16
 801406e:	46bd      	mov	sp, r7
 8014070:	bd80      	pop	{r7, pc}
 8014072:	bf00      	nop
 8014074:	080222c0 	.word	0x080222c0
 8014078:	0802260c 	.word	0x0802260c
 801407c:	08022314 	.word	0x08022314
 8014080:	20015214 	.word	0x20015214

08014084 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8014084:	b580      	push	{r7, lr}
 8014086:	b082      	sub	sp, #8
 8014088:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801408a:	2000      	movs	r0, #0
 801408c:	f7f8 fd76 	bl	800cb7c <memp_malloc>
 8014090:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8014092:	687b      	ldr	r3, [r7, #4]
 8014094:	2b00      	cmp	r3, #0
 8014096:	d007      	beq.n	80140a8 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8014098:	2220      	movs	r2, #32
 801409a:	2100      	movs	r1, #0
 801409c:	6878      	ldr	r0, [r7, #4]
 801409e:	f003 fb3e 	bl	801771e <memset>
    pcb->ttl = UDP_TTL;
 80140a2:	687b      	ldr	r3, [r7, #4]
 80140a4:	22ff      	movs	r2, #255	@ 0xff
 80140a6:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80140a8:	687b      	ldr	r3, [r7, #4]
}
 80140aa:	4618      	mov	r0, r3
 80140ac:	3708      	adds	r7, #8
 80140ae:	46bd      	mov	sp, r7
 80140b0:	bd80      	pop	{r7, pc}
	...

080140b4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80140b4:	b480      	push	{r7}
 80140b6:	b085      	sub	sp, #20
 80140b8:	af00      	add	r7, sp, #0
 80140ba:	6078      	str	r0, [r7, #4]
 80140bc:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80140be:	687b      	ldr	r3, [r7, #4]
 80140c0:	2b00      	cmp	r3, #0
 80140c2:	d01e      	beq.n	8014102 <udp_netif_ip_addr_changed+0x4e>
 80140c4:	687b      	ldr	r3, [r7, #4]
 80140c6:	681b      	ldr	r3, [r3, #0]
 80140c8:	2b00      	cmp	r3, #0
 80140ca:	d01a      	beq.n	8014102 <udp_netif_ip_addr_changed+0x4e>
 80140cc:	683b      	ldr	r3, [r7, #0]
 80140ce:	2b00      	cmp	r3, #0
 80140d0:	d017      	beq.n	8014102 <udp_netif_ip_addr_changed+0x4e>
 80140d2:	683b      	ldr	r3, [r7, #0]
 80140d4:	681b      	ldr	r3, [r3, #0]
 80140d6:	2b00      	cmp	r3, #0
 80140d8:	d013      	beq.n	8014102 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80140da:	4b0d      	ldr	r3, [pc, #52]	@ (8014110 <udp_netif_ip_addr_changed+0x5c>)
 80140dc:	681b      	ldr	r3, [r3, #0]
 80140de:	60fb      	str	r3, [r7, #12]
 80140e0:	e00c      	b.n	80140fc <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80140e2:	68fb      	ldr	r3, [r7, #12]
 80140e4:	681a      	ldr	r2, [r3, #0]
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	681b      	ldr	r3, [r3, #0]
 80140ea:	429a      	cmp	r2, r3
 80140ec:	d103      	bne.n	80140f6 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80140ee:	683b      	ldr	r3, [r7, #0]
 80140f0:	681a      	ldr	r2, [r3, #0]
 80140f2:	68fb      	ldr	r3, [r7, #12]
 80140f4:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80140f6:	68fb      	ldr	r3, [r7, #12]
 80140f8:	68db      	ldr	r3, [r3, #12]
 80140fa:	60fb      	str	r3, [r7, #12]
 80140fc:	68fb      	ldr	r3, [r7, #12]
 80140fe:	2b00      	cmp	r3, #0
 8014100:	d1ef      	bne.n	80140e2 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8014102:	bf00      	nop
 8014104:	3714      	adds	r7, #20
 8014106:	46bd      	mov	sp, r7
 8014108:	f85d 7b04 	ldr.w	r7, [sp], #4
 801410c:	4770      	bx	lr
 801410e:	bf00      	nop
 8014110:	20015214 	.word	0x20015214

08014114 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8014114:	b580      	push	{r7, lr}
 8014116:	b082      	sub	sp, #8
 8014118:	af00      	add	r7, sp, #0
 801411a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801411c:	4915      	ldr	r1, [pc, #84]	@ (8014174 <etharp_free_entry+0x60>)
 801411e:	687a      	ldr	r2, [r7, #4]
 8014120:	4613      	mov	r3, r2
 8014122:	005b      	lsls	r3, r3, #1
 8014124:	4413      	add	r3, r2
 8014126:	00db      	lsls	r3, r3, #3
 8014128:	440b      	add	r3, r1
 801412a:	681b      	ldr	r3, [r3, #0]
 801412c:	2b00      	cmp	r3, #0
 801412e:	d013      	beq.n	8014158 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8014130:	4910      	ldr	r1, [pc, #64]	@ (8014174 <etharp_free_entry+0x60>)
 8014132:	687a      	ldr	r2, [r7, #4]
 8014134:	4613      	mov	r3, r2
 8014136:	005b      	lsls	r3, r3, #1
 8014138:	4413      	add	r3, r2
 801413a:	00db      	lsls	r3, r3, #3
 801413c:	440b      	add	r3, r1
 801413e:	681b      	ldr	r3, [r3, #0]
 8014140:	4618      	mov	r0, r3
 8014142:	f7f9 fc01 	bl	800d948 <pbuf_free>
    arp_table[i].q = NULL;
 8014146:	490b      	ldr	r1, [pc, #44]	@ (8014174 <etharp_free_entry+0x60>)
 8014148:	687a      	ldr	r2, [r7, #4]
 801414a:	4613      	mov	r3, r2
 801414c:	005b      	lsls	r3, r3, #1
 801414e:	4413      	add	r3, r2
 8014150:	00db      	lsls	r3, r3, #3
 8014152:	440b      	add	r3, r1
 8014154:	2200      	movs	r2, #0
 8014156:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8014158:	4906      	ldr	r1, [pc, #24]	@ (8014174 <etharp_free_entry+0x60>)
 801415a:	687a      	ldr	r2, [r7, #4]
 801415c:	4613      	mov	r3, r2
 801415e:	005b      	lsls	r3, r3, #1
 8014160:	4413      	add	r3, r2
 8014162:	00db      	lsls	r3, r3, #3
 8014164:	440b      	add	r3, r1
 8014166:	3314      	adds	r3, #20
 8014168:	2200      	movs	r2, #0
 801416a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801416c:	bf00      	nop
 801416e:	3708      	adds	r7, #8
 8014170:	46bd      	mov	sp, r7
 8014172:	bd80      	pop	{r7, pc}
 8014174:	20015218 	.word	0x20015218

08014178 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8014178:	b580      	push	{r7, lr}
 801417a:	b082      	sub	sp, #8
 801417c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801417e:	2300      	movs	r3, #0
 8014180:	607b      	str	r3, [r7, #4]
 8014182:	e096      	b.n	80142b2 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8014184:	494f      	ldr	r1, [pc, #316]	@ (80142c4 <etharp_tmr+0x14c>)
 8014186:	687a      	ldr	r2, [r7, #4]
 8014188:	4613      	mov	r3, r2
 801418a:	005b      	lsls	r3, r3, #1
 801418c:	4413      	add	r3, r2
 801418e:	00db      	lsls	r3, r3, #3
 8014190:	440b      	add	r3, r1
 8014192:	3314      	adds	r3, #20
 8014194:	781b      	ldrb	r3, [r3, #0]
 8014196:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8014198:	78fb      	ldrb	r3, [r7, #3]
 801419a:	2b00      	cmp	r3, #0
 801419c:	f000 8086 	beq.w	80142ac <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80141a0:	4948      	ldr	r1, [pc, #288]	@ (80142c4 <etharp_tmr+0x14c>)
 80141a2:	687a      	ldr	r2, [r7, #4]
 80141a4:	4613      	mov	r3, r2
 80141a6:	005b      	lsls	r3, r3, #1
 80141a8:	4413      	add	r3, r2
 80141aa:	00db      	lsls	r3, r3, #3
 80141ac:	440b      	add	r3, r1
 80141ae:	3312      	adds	r3, #18
 80141b0:	881b      	ldrh	r3, [r3, #0]
 80141b2:	3301      	adds	r3, #1
 80141b4:	b298      	uxth	r0, r3
 80141b6:	4943      	ldr	r1, [pc, #268]	@ (80142c4 <etharp_tmr+0x14c>)
 80141b8:	687a      	ldr	r2, [r7, #4]
 80141ba:	4613      	mov	r3, r2
 80141bc:	005b      	lsls	r3, r3, #1
 80141be:	4413      	add	r3, r2
 80141c0:	00db      	lsls	r3, r3, #3
 80141c2:	440b      	add	r3, r1
 80141c4:	3312      	adds	r3, #18
 80141c6:	4602      	mov	r2, r0
 80141c8:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80141ca:	493e      	ldr	r1, [pc, #248]	@ (80142c4 <etharp_tmr+0x14c>)
 80141cc:	687a      	ldr	r2, [r7, #4]
 80141ce:	4613      	mov	r3, r2
 80141d0:	005b      	lsls	r3, r3, #1
 80141d2:	4413      	add	r3, r2
 80141d4:	00db      	lsls	r3, r3, #3
 80141d6:	440b      	add	r3, r1
 80141d8:	3312      	adds	r3, #18
 80141da:	881b      	ldrh	r3, [r3, #0]
 80141dc:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80141e0:	d215      	bcs.n	801420e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80141e2:	4938      	ldr	r1, [pc, #224]	@ (80142c4 <etharp_tmr+0x14c>)
 80141e4:	687a      	ldr	r2, [r7, #4]
 80141e6:	4613      	mov	r3, r2
 80141e8:	005b      	lsls	r3, r3, #1
 80141ea:	4413      	add	r3, r2
 80141ec:	00db      	lsls	r3, r3, #3
 80141ee:	440b      	add	r3, r1
 80141f0:	3314      	adds	r3, #20
 80141f2:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80141f4:	2b01      	cmp	r3, #1
 80141f6:	d10e      	bne.n	8014216 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80141f8:	4932      	ldr	r1, [pc, #200]	@ (80142c4 <etharp_tmr+0x14c>)
 80141fa:	687a      	ldr	r2, [r7, #4]
 80141fc:	4613      	mov	r3, r2
 80141fe:	005b      	lsls	r3, r3, #1
 8014200:	4413      	add	r3, r2
 8014202:	00db      	lsls	r3, r3, #3
 8014204:	440b      	add	r3, r1
 8014206:	3312      	adds	r3, #18
 8014208:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801420a:	2b04      	cmp	r3, #4
 801420c:	d903      	bls.n	8014216 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801420e:	6878      	ldr	r0, [r7, #4]
 8014210:	f7ff ff80 	bl	8014114 <etharp_free_entry>
 8014214:	e04a      	b.n	80142ac <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8014216:	492b      	ldr	r1, [pc, #172]	@ (80142c4 <etharp_tmr+0x14c>)
 8014218:	687a      	ldr	r2, [r7, #4]
 801421a:	4613      	mov	r3, r2
 801421c:	005b      	lsls	r3, r3, #1
 801421e:	4413      	add	r3, r2
 8014220:	00db      	lsls	r3, r3, #3
 8014222:	440b      	add	r3, r1
 8014224:	3314      	adds	r3, #20
 8014226:	781b      	ldrb	r3, [r3, #0]
 8014228:	2b03      	cmp	r3, #3
 801422a:	d10a      	bne.n	8014242 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801422c:	4925      	ldr	r1, [pc, #148]	@ (80142c4 <etharp_tmr+0x14c>)
 801422e:	687a      	ldr	r2, [r7, #4]
 8014230:	4613      	mov	r3, r2
 8014232:	005b      	lsls	r3, r3, #1
 8014234:	4413      	add	r3, r2
 8014236:	00db      	lsls	r3, r3, #3
 8014238:	440b      	add	r3, r1
 801423a:	3314      	adds	r3, #20
 801423c:	2204      	movs	r2, #4
 801423e:	701a      	strb	r2, [r3, #0]
 8014240:	e034      	b.n	80142ac <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8014242:	4920      	ldr	r1, [pc, #128]	@ (80142c4 <etharp_tmr+0x14c>)
 8014244:	687a      	ldr	r2, [r7, #4]
 8014246:	4613      	mov	r3, r2
 8014248:	005b      	lsls	r3, r3, #1
 801424a:	4413      	add	r3, r2
 801424c:	00db      	lsls	r3, r3, #3
 801424e:	440b      	add	r3, r1
 8014250:	3314      	adds	r3, #20
 8014252:	781b      	ldrb	r3, [r3, #0]
 8014254:	2b04      	cmp	r3, #4
 8014256:	d10a      	bne.n	801426e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8014258:	491a      	ldr	r1, [pc, #104]	@ (80142c4 <etharp_tmr+0x14c>)
 801425a:	687a      	ldr	r2, [r7, #4]
 801425c:	4613      	mov	r3, r2
 801425e:	005b      	lsls	r3, r3, #1
 8014260:	4413      	add	r3, r2
 8014262:	00db      	lsls	r3, r3, #3
 8014264:	440b      	add	r3, r1
 8014266:	3314      	adds	r3, #20
 8014268:	2202      	movs	r2, #2
 801426a:	701a      	strb	r2, [r3, #0]
 801426c:	e01e      	b.n	80142ac <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801426e:	4915      	ldr	r1, [pc, #84]	@ (80142c4 <etharp_tmr+0x14c>)
 8014270:	687a      	ldr	r2, [r7, #4]
 8014272:	4613      	mov	r3, r2
 8014274:	005b      	lsls	r3, r3, #1
 8014276:	4413      	add	r3, r2
 8014278:	00db      	lsls	r3, r3, #3
 801427a:	440b      	add	r3, r1
 801427c:	3314      	adds	r3, #20
 801427e:	781b      	ldrb	r3, [r3, #0]
 8014280:	2b01      	cmp	r3, #1
 8014282:	d113      	bne.n	80142ac <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8014284:	490f      	ldr	r1, [pc, #60]	@ (80142c4 <etharp_tmr+0x14c>)
 8014286:	687a      	ldr	r2, [r7, #4]
 8014288:	4613      	mov	r3, r2
 801428a:	005b      	lsls	r3, r3, #1
 801428c:	4413      	add	r3, r2
 801428e:	00db      	lsls	r3, r3, #3
 8014290:	440b      	add	r3, r1
 8014292:	3308      	adds	r3, #8
 8014294:	6818      	ldr	r0, [r3, #0]
 8014296:	687a      	ldr	r2, [r7, #4]
 8014298:	4613      	mov	r3, r2
 801429a:	005b      	lsls	r3, r3, #1
 801429c:	4413      	add	r3, r2
 801429e:	00db      	lsls	r3, r3, #3
 80142a0:	4a08      	ldr	r2, [pc, #32]	@ (80142c4 <etharp_tmr+0x14c>)
 80142a2:	4413      	add	r3, r2
 80142a4:	3304      	adds	r3, #4
 80142a6:	4619      	mov	r1, r3
 80142a8:	f000 fe6e 	bl	8014f88 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80142ac:	687b      	ldr	r3, [r7, #4]
 80142ae:	3301      	adds	r3, #1
 80142b0:	607b      	str	r3, [r7, #4]
 80142b2:	687b      	ldr	r3, [r7, #4]
 80142b4:	2b09      	cmp	r3, #9
 80142b6:	f77f af65 	ble.w	8014184 <etharp_tmr+0xc>
      }
    }
  }
}
 80142ba:	bf00      	nop
 80142bc:	bf00      	nop
 80142be:	3708      	adds	r7, #8
 80142c0:	46bd      	mov	sp, r7
 80142c2:	bd80      	pop	{r7, pc}
 80142c4:	20015218 	.word	0x20015218

080142c8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80142c8:	b580      	push	{r7, lr}
 80142ca:	b08a      	sub	sp, #40	@ 0x28
 80142cc:	af00      	add	r7, sp, #0
 80142ce:	60f8      	str	r0, [r7, #12]
 80142d0:	460b      	mov	r3, r1
 80142d2:	607a      	str	r2, [r7, #4]
 80142d4:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80142d6:	230a      	movs	r3, #10
 80142d8:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80142da:	230a      	movs	r3, #10
 80142dc:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80142de:	230a      	movs	r3, #10
 80142e0:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 80142e2:	2300      	movs	r3, #0
 80142e4:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80142e6:	230a      	movs	r3, #10
 80142e8:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80142ea:	2300      	movs	r3, #0
 80142ec:	83bb      	strh	r3, [r7, #28]
 80142ee:	2300      	movs	r3, #0
 80142f0:	837b      	strh	r3, [r7, #26]
 80142f2:	2300      	movs	r3, #0
 80142f4:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80142f6:	2300      	movs	r3, #0
 80142f8:	843b      	strh	r3, [r7, #32]
 80142fa:	e0ae      	b.n	801445a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80142fc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014300:	49a6      	ldr	r1, [pc, #664]	@ (801459c <etharp_find_entry+0x2d4>)
 8014302:	4613      	mov	r3, r2
 8014304:	005b      	lsls	r3, r3, #1
 8014306:	4413      	add	r3, r2
 8014308:	00db      	lsls	r3, r3, #3
 801430a:	440b      	add	r3, r1
 801430c:	3314      	adds	r3, #20
 801430e:	781b      	ldrb	r3, [r3, #0]
 8014310:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8014312:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8014316:	2b0a      	cmp	r3, #10
 8014318:	d105      	bne.n	8014326 <etharp_find_entry+0x5e>
 801431a:	7dfb      	ldrb	r3, [r7, #23]
 801431c:	2b00      	cmp	r3, #0
 801431e:	d102      	bne.n	8014326 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8014320:	8c3b      	ldrh	r3, [r7, #32]
 8014322:	847b      	strh	r3, [r7, #34]	@ 0x22
 8014324:	e095      	b.n	8014452 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8014326:	7dfb      	ldrb	r3, [r7, #23]
 8014328:	2b00      	cmp	r3, #0
 801432a:	f000 8092 	beq.w	8014452 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801432e:	7dfb      	ldrb	r3, [r7, #23]
 8014330:	2b01      	cmp	r3, #1
 8014332:	d009      	beq.n	8014348 <etharp_find_entry+0x80>
 8014334:	7dfb      	ldrb	r3, [r7, #23]
 8014336:	2b01      	cmp	r3, #1
 8014338:	d806      	bhi.n	8014348 <etharp_find_entry+0x80>
 801433a:	4b99      	ldr	r3, [pc, #612]	@ (80145a0 <etharp_find_entry+0x2d8>)
 801433c:	f240 1223 	movw	r2, #291	@ 0x123
 8014340:	4998      	ldr	r1, [pc, #608]	@ (80145a4 <etharp_find_entry+0x2dc>)
 8014342:	4899      	ldr	r0, [pc, #612]	@ (80145a8 <etharp_find_entry+0x2e0>)
 8014344:	f003 f94a 	bl	80175dc <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8014348:	68fb      	ldr	r3, [r7, #12]
 801434a:	2b00      	cmp	r3, #0
 801434c:	d020      	beq.n	8014390 <etharp_find_entry+0xc8>
 801434e:	68fb      	ldr	r3, [r7, #12]
 8014350:	6819      	ldr	r1, [r3, #0]
 8014352:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014356:	4891      	ldr	r0, [pc, #580]	@ (801459c <etharp_find_entry+0x2d4>)
 8014358:	4613      	mov	r3, r2
 801435a:	005b      	lsls	r3, r3, #1
 801435c:	4413      	add	r3, r2
 801435e:	00db      	lsls	r3, r3, #3
 8014360:	4403      	add	r3, r0
 8014362:	3304      	adds	r3, #4
 8014364:	681b      	ldr	r3, [r3, #0]
 8014366:	4299      	cmp	r1, r3
 8014368:	d112      	bne.n	8014390 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801436a:	687b      	ldr	r3, [r7, #4]
 801436c:	2b00      	cmp	r3, #0
 801436e:	d00c      	beq.n	801438a <etharp_find_entry+0xc2>
 8014370:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014374:	4989      	ldr	r1, [pc, #548]	@ (801459c <etharp_find_entry+0x2d4>)
 8014376:	4613      	mov	r3, r2
 8014378:	005b      	lsls	r3, r3, #1
 801437a:	4413      	add	r3, r2
 801437c:	00db      	lsls	r3, r3, #3
 801437e:	440b      	add	r3, r1
 8014380:	3308      	adds	r3, #8
 8014382:	681b      	ldr	r3, [r3, #0]
 8014384:	687a      	ldr	r2, [r7, #4]
 8014386:	429a      	cmp	r2, r3
 8014388:	d102      	bne.n	8014390 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801438a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801438e:	e100      	b.n	8014592 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8014390:	7dfb      	ldrb	r3, [r7, #23]
 8014392:	2b01      	cmp	r3, #1
 8014394:	d140      	bne.n	8014418 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8014396:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801439a:	4980      	ldr	r1, [pc, #512]	@ (801459c <etharp_find_entry+0x2d4>)
 801439c:	4613      	mov	r3, r2
 801439e:	005b      	lsls	r3, r3, #1
 80143a0:	4413      	add	r3, r2
 80143a2:	00db      	lsls	r3, r3, #3
 80143a4:	440b      	add	r3, r1
 80143a6:	681b      	ldr	r3, [r3, #0]
 80143a8:	2b00      	cmp	r3, #0
 80143aa:	d01a      	beq.n	80143e2 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80143ac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80143b0:	497a      	ldr	r1, [pc, #488]	@ (801459c <etharp_find_entry+0x2d4>)
 80143b2:	4613      	mov	r3, r2
 80143b4:	005b      	lsls	r3, r3, #1
 80143b6:	4413      	add	r3, r2
 80143b8:	00db      	lsls	r3, r3, #3
 80143ba:	440b      	add	r3, r1
 80143bc:	3312      	adds	r3, #18
 80143be:	881b      	ldrh	r3, [r3, #0]
 80143c0:	8bba      	ldrh	r2, [r7, #28]
 80143c2:	429a      	cmp	r2, r3
 80143c4:	d845      	bhi.n	8014452 <etharp_find_entry+0x18a>
            old_queue = i;
 80143c6:	8c3b      	ldrh	r3, [r7, #32]
 80143c8:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80143ca:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80143ce:	4973      	ldr	r1, [pc, #460]	@ (801459c <etharp_find_entry+0x2d4>)
 80143d0:	4613      	mov	r3, r2
 80143d2:	005b      	lsls	r3, r3, #1
 80143d4:	4413      	add	r3, r2
 80143d6:	00db      	lsls	r3, r3, #3
 80143d8:	440b      	add	r3, r1
 80143da:	3312      	adds	r3, #18
 80143dc:	881b      	ldrh	r3, [r3, #0]
 80143de:	83bb      	strh	r3, [r7, #28]
 80143e0:	e037      	b.n	8014452 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80143e2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80143e6:	496d      	ldr	r1, [pc, #436]	@ (801459c <etharp_find_entry+0x2d4>)
 80143e8:	4613      	mov	r3, r2
 80143ea:	005b      	lsls	r3, r3, #1
 80143ec:	4413      	add	r3, r2
 80143ee:	00db      	lsls	r3, r3, #3
 80143f0:	440b      	add	r3, r1
 80143f2:	3312      	adds	r3, #18
 80143f4:	881b      	ldrh	r3, [r3, #0]
 80143f6:	8b7a      	ldrh	r2, [r7, #26]
 80143f8:	429a      	cmp	r2, r3
 80143fa:	d82a      	bhi.n	8014452 <etharp_find_entry+0x18a>
            old_pending = i;
 80143fc:	8c3b      	ldrh	r3, [r7, #32]
 80143fe:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 8014400:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014404:	4965      	ldr	r1, [pc, #404]	@ (801459c <etharp_find_entry+0x2d4>)
 8014406:	4613      	mov	r3, r2
 8014408:	005b      	lsls	r3, r3, #1
 801440a:	4413      	add	r3, r2
 801440c:	00db      	lsls	r3, r3, #3
 801440e:	440b      	add	r3, r1
 8014410:	3312      	adds	r3, #18
 8014412:	881b      	ldrh	r3, [r3, #0]
 8014414:	837b      	strh	r3, [r7, #26]
 8014416:	e01c      	b.n	8014452 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8014418:	7dfb      	ldrb	r3, [r7, #23]
 801441a:	2b01      	cmp	r3, #1
 801441c:	d919      	bls.n	8014452 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801441e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014422:	495e      	ldr	r1, [pc, #376]	@ (801459c <etharp_find_entry+0x2d4>)
 8014424:	4613      	mov	r3, r2
 8014426:	005b      	lsls	r3, r3, #1
 8014428:	4413      	add	r3, r2
 801442a:	00db      	lsls	r3, r3, #3
 801442c:	440b      	add	r3, r1
 801442e:	3312      	adds	r3, #18
 8014430:	881b      	ldrh	r3, [r3, #0]
 8014432:	8b3a      	ldrh	r2, [r7, #24]
 8014434:	429a      	cmp	r2, r3
 8014436:	d80c      	bhi.n	8014452 <etharp_find_entry+0x18a>
            old_stable = i;
 8014438:	8c3b      	ldrh	r3, [r7, #32]
 801443a:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 801443c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014440:	4956      	ldr	r1, [pc, #344]	@ (801459c <etharp_find_entry+0x2d4>)
 8014442:	4613      	mov	r3, r2
 8014444:	005b      	lsls	r3, r3, #1
 8014446:	4413      	add	r3, r2
 8014448:	00db      	lsls	r3, r3, #3
 801444a:	440b      	add	r3, r1
 801444c:	3312      	adds	r3, #18
 801444e:	881b      	ldrh	r3, [r3, #0]
 8014450:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014452:	8c3b      	ldrh	r3, [r7, #32]
 8014454:	3301      	adds	r3, #1
 8014456:	b29b      	uxth	r3, r3
 8014458:	843b      	strh	r3, [r7, #32]
 801445a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801445e:	2b09      	cmp	r3, #9
 8014460:	f77f af4c 	ble.w	80142fc <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8014464:	7afb      	ldrb	r3, [r7, #11]
 8014466:	f003 0302 	and.w	r3, r3, #2
 801446a:	2b00      	cmp	r3, #0
 801446c:	d108      	bne.n	8014480 <etharp_find_entry+0x1b8>
 801446e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8014472:	2b0a      	cmp	r3, #10
 8014474:	d107      	bne.n	8014486 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8014476:	7afb      	ldrb	r3, [r7, #11]
 8014478:	f003 0301 	and.w	r3, r3, #1
 801447c:	2b00      	cmp	r3, #0
 801447e:	d102      	bne.n	8014486 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8014480:	f04f 33ff 	mov.w	r3, #4294967295
 8014484:	e085      	b.n	8014592 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8014486:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801448a:	2b09      	cmp	r3, #9
 801448c:	dc02      	bgt.n	8014494 <etharp_find_entry+0x1cc>
    i = empty;
 801448e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014490:	843b      	strh	r3, [r7, #32]
 8014492:	e039      	b.n	8014508 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8014494:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8014498:	2b09      	cmp	r3, #9
 801449a:	dc14      	bgt.n	80144c6 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801449c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801449e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80144a0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80144a4:	493d      	ldr	r1, [pc, #244]	@ (801459c <etharp_find_entry+0x2d4>)
 80144a6:	4613      	mov	r3, r2
 80144a8:	005b      	lsls	r3, r3, #1
 80144aa:	4413      	add	r3, r2
 80144ac:	00db      	lsls	r3, r3, #3
 80144ae:	440b      	add	r3, r1
 80144b0:	681b      	ldr	r3, [r3, #0]
 80144b2:	2b00      	cmp	r3, #0
 80144b4:	d018      	beq.n	80144e8 <etharp_find_entry+0x220>
 80144b6:	4b3a      	ldr	r3, [pc, #232]	@ (80145a0 <etharp_find_entry+0x2d8>)
 80144b8:	f240 126d 	movw	r2, #365	@ 0x16d
 80144bc:	493b      	ldr	r1, [pc, #236]	@ (80145ac <etharp_find_entry+0x2e4>)
 80144be:	483a      	ldr	r0, [pc, #232]	@ (80145a8 <etharp_find_entry+0x2e0>)
 80144c0:	f003 f88c 	bl	80175dc <iprintf>
 80144c4:	e010      	b.n	80144e8 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80144c6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80144ca:	2b09      	cmp	r3, #9
 80144cc:	dc02      	bgt.n	80144d4 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80144ce:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80144d0:	843b      	strh	r3, [r7, #32]
 80144d2:	e009      	b.n	80144e8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80144d4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80144d8:	2b09      	cmp	r3, #9
 80144da:	dc02      	bgt.n	80144e2 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80144dc:	8bfb      	ldrh	r3, [r7, #30]
 80144de:	843b      	strh	r3, [r7, #32]
 80144e0:	e002      	b.n	80144e8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80144e2:	f04f 33ff 	mov.w	r3, #4294967295
 80144e6:	e054      	b.n	8014592 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80144e8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80144ec:	2b09      	cmp	r3, #9
 80144ee:	dd06      	ble.n	80144fe <etharp_find_entry+0x236>
 80144f0:	4b2b      	ldr	r3, [pc, #172]	@ (80145a0 <etharp_find_entry+0x2d8>)
 80144f2:	f240 127f 	movw	r2, #383	@ 0x17f
 80144f6:	492e      	ldr	r1, [pc, #184]	@ (80145b0 <etharp_find_entry+0x2e8>)
 80144f8:	482b      	ldr	r0, [pc, #172]	@ (80145a8 <etharp_find_entry+0x2e0>)
 80144fa:	f003 f86f 	bl	80175dc <iprintf>
    etharp_free_entry(i);
 80144fe:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014502:	4618      	mov	r0, r3
 8014504:	f7ff fe06 	bl	8014114 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014508:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801450c:	2b09      	cmp	r3, #9
 801450e:	dd06      	ble.n	801451e <etharp_find_entry+0x256>
 8014510:	4b23      	ldr	r3, [pc, #140]	@ (80145a0 <etharp_find_entry+0x2d8>)
 8014512:	f240 1283 	movw	r2, #387	@ 0x183
 8014516:	4926      	ldr	r1, [pc, #152]	@ (80145b0 <etharp_find_entry+0x2e8>)
 8014518:	4823      	ldr	r0, [pc, #140]	@ (80145a8 <etharp_find_entry+0x2e0>)
 801451a:	f003 f85f 	bl	80175dc <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801451e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014522:	491e      	ldr	r1, [pc, #120]	@ (801459c <etharp_find_entry+0x2d4>)
 8014524:	4613      	mov	r3, r2
 8014526:	005b      	lsls	r3, r3, #1
 8014528:	4413      	add	r3, r2
 801452a:	00db      	lsls	r3, r3, #3
 801452c:	440b      	add	r3, r1
 801452e:	3314      	adds	r3, #20
 8014530:	781b      	ldrb	r3, [r3, #0]
 8014532:	2b00      	cmp	r3, #0
 8014534:	d006      	beq.n	8014544 <etharp_find_entry+0x27c>
 8014536:	4b1a      	ldr	r3, [pc, #104]	@ (80145a0 <etharp_find_entry+0x2d8>)
 8014538:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 801453c:	491d      	ldr	r1, [pc, #116]	@ (80145b4 <etharp_find_entry+0x2ec>)
 801453e:	481a      	ldr	r0, [pc, #104]	@ (80145a8 <etharp_find_entry+0x2e0>)
 8014540:	f003 f84c 	bl	80175dc <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8014544:	68fb      	ldr	r3, [r7, #12]
 8014546:	2b00      	cmp	r3, #0
 8014548:	d00b      	beq.n	8014562 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801454a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801454e:	68fb      	ldr	r3, [r7, #12]
 8014550:	6819      	ldr	r1, [r3, #0]
 8014552:	4812      	ldr	r0, [pc, #72]	@ (801459c <etharp_find_entry+0x2d4>)
 8014554:	4613      	mov	r3, r2
 8014556:	005b      	lsls	r3, r3, #1
 8014558:	4413      	add	r3, r2
 801455a:	00db      	lsls	r3, r3, #3
 801455c:	4403      	add	r3, r0
 801455e:	3304      	adds	r3, #4
 8014560:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8014562:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014566:	490d      	ldr	r1, [pc, #52]	@ (801459c <etharp_find_entry+0x2d4>)
 8014568:	4613      	mov	r3, r2
 801456a:	005b      	lsls	r3, r3, #1
 801456c:	4413      	add	r3, r2
 801456e:	00db      	lsls	r3, r3, #3
 8014570:	440b      	add	r3, r1
 8014572:	3312      	adds	r3, #18
 8014574:	2200      	movs	r2, #0
 8014576:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8014578:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801457c:	4907      	ldr	r1, [pc, #28]	@ (801459c <etharp_find_entry+0x2d4>)
 801457e:	4613      	mov	r3, r2
 8014580:	005b      	lsls	r3, r3, #1
 8014582:	4413      	add	r3, r2
 8014584:	00db      	lsls	r3, r3, #3
 8014586:	440b      	add	r3, r1
 8014588:	3308      	adds	r3, #8
 801458a:	687a      	ldr	r2, [r7, #4]
 801458c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801458e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8014592:	4618      	mov	r0, r3
 8014594:	3728      	adds	r7, #40	@ 0x28
 8014596:	46bd      	mov	sp, r7
 8014598:	bd80      	pop	{r7, pc}
 801459a:	bf00      	nop
 801459c:	20015218 	.word	0x20015218
 80145a0:	08022624 	.word	0x08022624
 80145a4:	0802265c 	.word	0x0802265c
 80145a8:	0802269c 	.word	0x0802269c
 80145ac:	080226c4 	.word	0x080226c4
 80145b0:	080226dc 	.word	0x080226dc
 80145b4:	080226f0 	.word	0x080226f0

080145b8 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80145b8:	b580      	push	{r7, lr}
 80145ba:	b088      	sub	sp, #32
 80145bc:	af02      	add	r7, sp, #8
 80145be:	60f8      	str	r0, [r7, #12]
 80145c0:	60b9      	str	r1, [r7, #8]
 80145c2:	607a      	str	r2, [r7, #4]
 80145c4:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80145c6:	68fb      	ldr	r3, [r7, #12]
 80145c8:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80145cc:	2b06      	cmp	r3, #6
 80145ce:	d006      	beq.n	80145de <etharp_update_arp_entry+0x26>
 80145d0:	4b48      	ldr	r3, [pc, #288]	@ (80146f4 <etharp_update_arp_entry+0x13c>)
 80145d2:	f240 12a9 	movw	r2, #425	@ 0x1a9
 80145d6:	4948      	ldr	r1, [pc, #288]	@ (80146f8 <etharp_update_arp_entry+0x140>)
 80145d8:	4848      	ldr	r0, [pc, #288]	@ (80146fc <etharp_update_arp_entry+0x144>)
 80145da:	f002 ffff 	bl	80175dc <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80145de:	68bb      	ldr	r3, [r7, #8]
 80145e0:	2b00      	cmp	r3, #0
 80145e2:	d012      	beq.n	801460a <etharp_update_arp_entry+0x52>
 80145e4:	68bb      	ldr	r3, [r7, #8]
 80145e6:	681b      	ldr	r3, [r3, #0]
 80145e8:	2b00      	cmp	r3, #0
 80145ea:	d00e      	beq.n	801460a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80145ec:	68bb      	ldr	r3, [r7, #8]
 80145ee:	681b      	ldr	r3, [r3, #0]
 80145f0:	68f9      	ldr	r1, [r7, #12]
 80145f2:	4618      	mov	r0, r3
 80145f4:	f001 f8fe 	bl	80157f4 <ip4_addr_isbroadcast_u32>
 80145f8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80145fa:	2b00      	cmp	r3, #0
 80145fc:	d105      	bne.n	801460a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80145fe:	68bb      	ldr	r3, [r7, #8]
 8014600:	681b      	ldr	r3, [r3, #0]
 8014602:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014606:	2be0      	cmp	r3, #224	@ 0xe0
 8014608:	d102      	bne.n	8014610 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801460a:	f06f 030f 	mvn.w	r3, #15
 801460e:	e06c      	b.n	80146ea <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8014610:	78fb      	ldrb	r3, [r7, #3]
 8014612:	68fa      	ldr	r2, [r7, #12]
 8014614:	4619      	mov	r1, r3
 8014616:	68b8      	ldr	r0, [r7, #8]
 8014618:	f7ff fe56 	bl	80142c8 <etharp_find_entry>
 801461c:	4603      	mov	r3, r0
 801461e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8014620:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014624:	2b00      	cmp	r3, #0
 8014626:	da02      	bge.n	801462e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8014628:	8afb      	ldrh	r3, [r7, #22]
 801462a:	b25b      	sxtb	r3, r3
 801462c:	e05d      	b.n	80146ea <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801462e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014632:	4933      	ldr	r1, [pc, #204]	@ (8014700 <etharp_update_arp_entry+0x148>)
 8014634:	4613      	mov	r3, r2
 8014636:	005b      	lsls	r3, r3, #1
 8014638:	4413      	add	r3, r2
 801463a:	00db      	lsls	r3, r3, #3
 801463c:	440b      	add	r3, r1
 801463e:	3314      	adds	r3, #20
 8014640:	2202      	movs	r2, #2
 8014642:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8014644:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014648:	492d      	ldr	r1, [pc, #180]	@ (8014700 <etharp_update_arp_entry+0x148>)
 801464a:	4613      	mov	r3, r2
 801464c:	005b      	lsls	r3, r3, #1
 801464e:	4413      	add	r3, r2
 8014650:	00db      	lsls	r3, r3, #3
 8014652:	440b      	add	r3, r1
 8014654:	3308      	adds	r3, #8
 8014656:	68fa      	ldr	r2, [r7, #12]
 8014658:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801465a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801465e:	4613      	mov	r3, r2
 8014660:	005b      	lsls	r3, r3, #1
 8014662:	4413      	add	r3, r2
 8014664:	00db      	lsls	r3, r3, #3
 8014666:	3308      	adds	r3, #8
 8014668:	4a25      	ldr	r2, [pc, #148]	@ (8014700 <etharp_update_arp_entry+0x148>)
 801466a:	4413      	add	r3, r2
 801466c:	3304      	adds	r3, #4
 801466e:	2206      	movs	r2, #6
 8014670:	6879      	ldr	r1, [r7, #4]
 8014672:	4618      	mov	r0, r3
 8014674:	f003 f909 	bl	801788a <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8014678:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801467c:	4920      	ldr	r1, [pc, #128]	@ (8014700 <etharp_update_arp_entry+0x148>)
 801467e:	4613      	mov	r3, r2
 8014680:	005b      	lsls	r3, r3, #1
 8014682:	4413      	add	r3, r2
 8014684:	00db      	lsls	r3, r3, #3
 8014686:	440b      	add	r3, r1
 8014688:	3312      	adds	r3, #18
 801468a:	2200      	movs	r2, #0
 801468c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801468e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014692:	491b      	ldr	r1, [pc, #108]	@ (8014700 <etharp_update_arp_entry+0x148>)
 8014694:	4613      	mov	r3, r2
 8014696:	005b      	lsls	r3, r3, #1
 8014698:	4413      	add	r3, r2
 801469a:	00db      	lsls	r3, r3, #3
 801469c:	440b      	add	r3, r1
 801469e:	681b      	ldr	r3, [r3, #0]
 80146a0:	2b00      	cmp	r3, #0
 80146a2:	d021      	beq.n	80146e8 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80146a4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80146a8:	4915      	ldr	r1, [pc, #84]	@ (8014700 <etharp_update_arp_entry+0x148>)
 80146aa:	4613      	mov	r3, r2
 80146ac:	005b      	lsls	r3, r3, #1
 80146ae:	4413      	add	r3, r2
 80146b0:	00db      	lsls	r3, r3, #3
 80146b2:	440b      	add	r3, r1
 80146b4:	681b      	ldr	r3, [r3, #0]
 80146b6:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80146b8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80146bc:	4910      	ldr	r1, [pc, #64]	@ (8014700 <etharp_update_arp_entry+0x148>)
 80146be:	4613      	mov	r3, r2
 80146c0:	005b      	lsls	r3, r3, #1
 80146c2:	4413      	add	r3, r2
 80146c4:	00db      	lsls	r3, r3, #3
 80146c6:	440b      	add	r3, r1
 80146c8:	2200      	movs	r2, #0
 80146ca:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80146cc:	68fb      	ldr	r3, [r7, #12]
 80146ce:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 80146d2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80146d6:	9300      	str	r3, [sp, #0]
 80146d8:	687b      	ldr	r3, [r7, #4]
 80146da:	6939      	ldr	r1, [r7, #16]
 80146dc:	68f8      	ldr	r0, [r7, #12]
 80146de:	f001 ff97 	bl	8016610 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80146e2:	6938      	ldr	r0, [r7, #16]
 80146e4:	f7f9 f930 	bl	800d948 <pbuf_free>
  }
  return ERR_OK;
 80146e8:	2300      	movs	r3, #0
}
 80146ea:	4618      	mov	r0, r3
 80146ec:	3718      	adds	r7, #24
 80146ee:	46bd      	mov	sp, r7
 80146f0:	bd80      	pop	{r7, pc}
 80146f2:	bf00      	nop
 80146f4:	08022624 	.word	0x08022624
 80146f8:	0802271c 	.word	0x0802271c
 80146fc:	0802269c 	.word	0x0802269c
 8014700:	20015218 	.word	0x20015218

08014704 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8014704:	b580      	push	{r7, lr}
 8014706:	b084      	sub	sp, #16
 8014708:	af00      	add	r7, sp, #0
 801470a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801470c:	2300      	movs	r3, #0
 801470e:	60fb      	str	r3, [r7, #12]
 8014710:	e01e      	b.n	8014750 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8014712:	4913      	ldr	r1, [pc, #76]	@ (8014760 <etharp_cleanup_netif+0x5c>)
 8014714:	68fa      	ldr	r2, [r7, #12]
 8014716:	4613      	mov	r3, r2
 8014718:	005b      	lsls	r3, r3, #1
 801471a:	4413      	add	r3, r2
 801471c:	00db      	lsls	r3, r3, #3
 801471e:	440b      	add	r3, r1
 8014720:	3314      	adds	r3, #20
 8014722:	781b      	ldrb	r3, [r3, #0]
 8014724:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8014726:	7afb      	ldrb	r3, [r7, #11]
 8014728:	2b00      	cmp	r3, #0
 801472a:	d00e      	beq.n	801474a <etharp_cleanup_netif+0x46>
 801472c:	490c      	ldr	r1, [pc, #48]	@ (8014760 <etharp_cleanup_netif+0x5c>)
 801472e:	68fa      	ldr	r2, [r7, #12]
 8014730:	4613      	mov	r3, r2
 8014732:	005b      	lsls	r3, r3, #1
 8014734:	4413      	add	r3, r2
 8014736:	00db      	lsls	r3, r3, #3
 8014738:	440b      	add	r3, r1
 801473a:	3308      	adds	r3, #8
 801473c:	681b      	ldr	r3, [r3, #0]
 801473e:	687a      	ldr	r2, [r7, #4]
 8014740:	429a      	cmp	r2, r3
 8014742:	d102      	bne.n	801474a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8014744:	68f8      	ldr	r0, [r7, #12]
 8014746:	f7ff fce5 	bl	8014114 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801474a:	68fb      	ldr	r3, [r7, #12]
 801474c:	3301      	adds	r3, #1
 801474e:	60fb      	str	r3, [r7, #12]
 8014750:	68fb      	ldr	r3, [r7, #12]
 8014752:	2b09      	cmp	r3, #9
 8014754:	dddd      	ble.n	8014712 <etharp_cleanup_netif+0xe>
    }
  }
}
 8014756:	bf00      	nop
 8014758:	bf00      	nop
 801475a:	3710      	adds	r7, #16
 801475c:	46bd      	mov	sp, r7
 801475e:	bd80      	pop	{r7, pc}
 8014760:	20015218 	.word	0x20015218

08014764 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8014764:	b5b0      	push	{r4, r5, r7, lr}
 8014766:	b08a      	sub	sp, #40	@ 0x28
 8014768:	af04      	add	r7, sp, #16
 801476a:	6078      	str	r0, [r7, #4]
 801476c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801476e:	683b      	ldr	r3, [r7, #0]
 8014770:	2b00      	cmp	r3, #0
 8014772:	d107      	bne.n	8014784 <etharp_input+0x20>
 8014774:	4b3d      	ldr	r3, [pc, #244]	@ (801486c <etharp_input+0x108>)
 8014776:	f240 228a 	movw	r2, #650	@ 0x28a
 801477a:	493d      	ldr	r1, [pc, #244]	@ (8014870 <etharp_input+0x10c>)
 801477c:	483d      	ldr	r0, [pc, #244]	@ (8014874 <etharp_input+0x110>)
 801477e:	f002 ff2d 	bl	80175dc <iprintf>
 8014782:	e06f      	b.n	8014864 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8014784:	687b      	ldr	r3, [r7, #4]
 8014786:	685b      	ldr	r3, [r3, #4]
 8014788:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801478a:	693b      	ldr	r3, [r7, #16]
 801478c:	881b      	ldrh	r3, [r3, #0]
 801478e:	b29b      	uxth	r3, r3
 8014790:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8014794:	d10c      	bne.n	80147b0 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8014796:	693b      	ldr	r3, [r7, #16]
 8014798:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801479a:	2b06      	cmp	r3, #6
 801479c:	d108      	bne.n	80147b0 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801479e:	693b      	ldr	r3, [r7, #16]
 80147a0:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80147a2:	2b04      	cmp	r3, #4
 80147a4:	d104      	bne.n	80147b0 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80147a6:	693b      	ldr	r3, [r7, #16]
 80147a8:	885b      	ldrh	r3, [r3, #2]
 80147aa:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80147ac:	2b08      	cmp	r3, #8
 80147ae:	d003      	beq.n	80147b8 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80147b0:	6878      	ldr	r0, [r7, #4]
 80147b2:	f7f9 f8c9 	bl	800d948 <pbuf_free>
    return;
 80147b6:	e055      	b.n	8014864 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80147b8:	693b      	ldr	r3, [r7, #16]
 80147ba:	330e      	adds	r3, #14
 80147bc:	681b      	ldr	r3, [r3, #0]
 80147be:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80147c0:	693b      	ldr	r3, [r7, #16]
 80147c2:	3318      	adds	r3, #24
 80147c4:	681b      	ldr	r3, [r3, #0]
 80147c6:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80147c8:	683b      	ldr	r3, [r7, #0]
 80147ca:	3304      	adds	r3, #4
 80147cc:	681b      	ldr	r3, [r3, #0]
 80147ce:	2b00      	cmp	r3, #0
 80147d0:	d102      	bne.n	80147d8 <etharp_input+0x74>
    for_us = 0;
 80147d2:	2300      	movs	r3, #0
 80147d4:	75fb      	strb	r3, [r7, #23]
 80147d6:	e009      	b.n	80147ec <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80147d8:	68ba      	ldr	r2, [r7, #8]
 80147da:	683b      	ldr	r3, [r7, #0]
 80147dc:	3304      	adds	r3, #4
 80147de:	681b      	ldr	r3, [r3, #0]
 80147e0:	429a      	cmp	r2, r3
 80147e2:	bf0c      	ite	eq
 80147e4:	2301      	moveq	r3, #1
 80147e6:	2300      	movne	r3, #0
 80147e8:	b2db      	uxtb	r3, r3
 80147ea:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80147ec:	693b      	ldr	r3, [r7, #16]
 80147ee:	f103 0208 	add.w	r2, r3, #8
 80147f2:	7dfb      	ldrb	r3, [r7, #23]
 80147f4:	2b00      	cmp	r3, #0
 80147f6:	d001      	beq.n	80147fc <etharp_input+0x98>
 80147f8:	2301      	movs	r3, #1
 80147fa:	e000      	b.n	80147fe <etharp_input+0x9a>
 80147fc:	2302      	movs	r3, #2
 80147fe:	f107 010c 	add.w	r1, r7, #12
 8014802:	6838      	ldr	r0, [r7, #0]
 8014804:	f7ff fed8 	bl	80145b8 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8014808:	693b      	ldr	r3, [r7, #16]
 801480a:	88db      	ldrh	r3, [r3, #6]
 801480c:	b29b      	uxth	r3, r3
 801480e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8014812:	d003      	beq.n	801481c <etharp_input+0xb8>
 8014814:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014818:	d01e      	beq.n	8014858 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801481a:	e020      	b.n	801485e <etharp_input+0xfa>
      if (for_us) {
 801481c:	7dfb      	ldrb	r3, [r7, #23]
 801481e:	2b00      	cmp	r3, #0
 8014820:	d01c      	beq.n	801485c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8014822:	683b      	ldr	r3, [r7, #0]
 8014824:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8014828:	693b      	ldr	r3, [r7, #16]
 801482a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801482e:	683b      	ldr	r3, [r7, #0]
 8014830:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 8014834:	683b      	ldr	r3, [r7, #0]
 8014836:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8014838:	693a      	ldr	r2, [r7, #16]
 801483a:	3208      	adds	r2, #8
        etharp_raw(netif,
 801483c:	2102      	movs	r1, #2
 801483e:	9103      	str	r1, [sp, #12]
 8014840:	f107 010c 	add.w	r1, r7, #12
 8014844:	9102      	str	r1, [sp, #8]
 8014846:	9201      	str	r2, [sp, #4]
 8014848:	9300      	str	r3, [sp, #0]
 801484a:	462b      	mov	r3, r5
 801484c:	4622      	mov	r2, r4
 801484e:	4601      	mov	r1, r0
 8014850:	6838      	ldr	r0, [r7, #0]
 8014852:	f000 faeb 	bl	8014e2c <etharp_raw>
      break;
 8014856:	e001      	b.n	801485c <etharp_input+0xf8>
      break;
 8014858:	bf00      	nop
 801485a:	e000      	b.n	801485e <etharp_input+0xfa>
      break;
 801485c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801485e:	6878      	ldr	r0, [r7, #4]
 8014860:	f7f9 f872 	bl	800d948 <pbuf_free>
}
 8014864:	3718      	adds	r7, #24
 8014866:	46bd      	mov	sp, r7
 8014868:	bdb0      	pop	{r4, r5, r7, pc}
 801486a:	bf00      	nop
 801486c:	08022624 	.word	0x08022624
 8014870:	08022774 	.word	0x08022774
 8014874:	0802269c 	.word	0x0802269c

08014878 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8014878:	b580      	push	{r7, lr}
 801487a:	b086      	sub	sp, #24
 801487c:	af02      	add	r7, sp, #8
 801487e:	60f8      	str	r0, [r7, #12]
 8014880:	60b9      	str	r1, [r7, #8]
 8014882:	4613      	mov	r3, r2
 8014884:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8014886:	79fa      	ldrb	r2, [r7, #7]
 8014888:	4944      	ldr	r1, [pc, #272]	@ (801499c <etharp_output_to_arp_index+0x124>)
 801488a:	4613      	mov	r3, r2
 801488c:	005b      	lsls	r3, r3, #1
 801488e:	4413      	add	r3, r2
 8014890:	00db      	lsls	r3, r3, #3
 8014892:	440b      	add	r3, r1
 8014894:	3314      	adds	r3, #20
 8014896:	781b      	ldrb	r3, [r3, #0]
 8014898:	2b01      	cmp	r3, #1
 801489a:	d806      	bhi.n	80148aa <etharp_output_to_arp_index+0x32>
 801489c:	4b40      	ldr	r3, [pc, #256]	@ (80149a0 <etharp_output_to_arp_index+0x128>)
 801489e:	f240 22ee 	movw	r2, #750	@ 0x2ee
 80148a2:	4940      	ldr	r1, [pc, #256]	@ (80149a4 <etharp_output_to_arp_index+0x12c>)
 80148a4:	4840      	ldr	r0, [pc, #256]	@ (80149a8 <etharp_output_to_arp_index+0x130>)
 80148a6:	f002 fe99 	bl	80175dc <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80148aa:	79fa      	ldrb	r2, [r7, #7]
 80148ac:	493b      	ldr	r1, [pc, #236]	@ (801499c <etharp_output_to_arp_index+0x124>)
 80148ae:	4613      	mov	r3, r2
 80148b0:	005b      	lsls	r3, r3, #1
 80148b2:	4413      	add	r3, r2
 80148b4:	00db      	lsls	r3, r3, #3
 80148b6:	440b      	add	r3, r1
 80148b8:	3314      	adds	r3, #20
 80148ba:	781b      	ldrb	r3, [r3, #0]
 80148bc:	2b02      	cmp	r3, #2
 80148be:	d153      	bne.n	8014968 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80148c0:	79fa      	ldrb	r2, [r7, #7]
 80148c2:	4936      	ldr	r1, [pc, #216]	@ (801499c <etharp_output_to_arp_index+0x124>)
 80148c4:	4613      	mov	r3, r2
 80148c6:	005b      	lsls	r3, r3, #1
 80148c8:	4413      	add	r3, r2
 80148ca:	00db      	lsls	r3, r3, #3
 80148cc:	440b      	add	r3, r1
 80148ce:	3312      	adds	r3, #18
 80148d0:	881b      	ldrh	r3, [r3, #0]
 80148d2:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 80148d6:	d919      	bls.n	801490c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80148d8:	79fa      	ldrb	r2, [r7, #7]
 80148da:	4613      	mov	r3, r2
 80148dc:	005b      	lsls	r3, r3, #1
 80148de:	4413      	add	r3, r2
 80148e0:	00db      	lsls	r3, r3, #3
 80148e2:	4a2e      	ldr	r2, [pc, #184]	@ (801499c <etharp_output_to_arp_index+0x124>)
 80148e4:	4413      	add	r3, r2
 80148e6:	3304      	adds	r3, #4
 80148e8:	4619      	mov	r1, r3
 80148ea:	68f8      	ldr	r0, [r7, #12]
 80148ec:	f000 fb4c 	bl	8014f88 <etharp_request>
 80148f0:	4603      	mov	r3, r0
 80148f2:	2b00      	cmp	r3, #0
 80148f4:	d138      	bne.n	8014968 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80148f6:	79fa      	ldrb	r2, [r7, #7]
 80148f8:	4928      	ldr	r1, [pc, #160]	@ (801499c <etharp_output_to_arp_index+0x124>)
 80148fa:	4613      	mov	r3, r2
 80148fc:	005b      	lsls	r3, r3, #1
 80148fe:	4413      	add	r3, r2
 8014900:	00db      	lsls	r3, r3, #3
 8014902:	440b      	add	r3, r1
 8014904:	3314      	adds	r3, #20
 8014906:	2203      	movs	r2, #3
 8014908:	701a      	strb	r2, [r3, #0]
 801490a:	e02d      	b.n	8014968 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801490c:	79fa      	ldrb	r2, [r7, #7]
 801490e:	4923      	ldr	r1, [pc, #140]	@ (801499c <etharp_output_to_arp_index+0x124>)
 8014910:	4613      	mov	r3, r2
 8014912:	005b      	lsls	r3, r3, #1
 8014914:	4413      	add	r3, r2
 8014916:	00db      	lsls	r3, r3, #3
 8014918:	440b      	add	r3, r1
 801491a:	3312      	adds	r3, #18
 801491c:	881b      	ldrh	r3, [r3, #0]
 801491e:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8014922:	d321      	bcc.n	8014968 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8014924:	79fa      	ldrb	r2, [r7, #7]
 8014926:	4613      	mov	r3, r2
 8014928:	005b      	lsls	r3, r3, #1
 801492a:	4413      	add	r3, r2
 801492c:	00db      	lsls	r3, r3, #3
 801492e:	4a1b      	ldr	r2, [pc, #108]	@ (801499c <etharp_output_to_arp_index+0x124>)
 8014930:	4413      	add	r3, r2
 8014932:	1d19      	adds	r1, r3, #4
 8014934:	79fa      	ldrb	r2, [r7, #7]
 8014936:	4613      	mov	r3, r2
 8014938:	005b      	lsls	r3, r3, #1
 801493a:	4413      	add	r3, r2
 801493c:	00db      	lsls	r3, r3, #3
 801493e:	3308      	adds	r3, #8
 8014940:	4a16      	ldr	r2, [pc, #88]	@ (801499c <etharp_output_to_arp_index+0x124>)
 8014942:	4413      	add	r3, r2
 8014944:	3304      	adds	r3, #4
 8014946:	461a      	mov	r2, r3
 8014948:	68f8      	ldr	r0, [r7, #12]
 801494a:	f000 fafb 	bl	8014f44 <etharp_request_dst>
 801494e:	4603      	mov	r3, r0
 8014950:	2b00      	cmp	r3, #0
 8014952:	d109      	bne.n	8014968 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014954:	79fa      	ldrb	r2, [r7, #7]
 8014956:	4911      	ldr	r1, [pc, #68]	@ (801499c <etharp_output_to_arp_index+0x124>)
 8014958:	4613      	mov	r3, r2
 801495a:	005b      	lsls	r3, r3, #1
 801495c:	4413      	add	r3, r2
 801495e:	00db      	lsls	r3, r3, #3
 8014960:	440b      	add	r3, r1
 8014962:	3314      	adds	r3, #20
 8014964:	2203      	movs	r2, #3
 8014966:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8014968:	68fb      	ldr	r3, [r7, #12]
 801496a:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 801496e:	79fa      	ldrb	r2, [r7, #7]
 8014970:	4613      	mov	r3, r2
 8014972:	005b      	lsls	r3, r3, #1
 8014974:	4413      	add	r3, r2
 8014976:	00db      	lsls	r3, r3, #3
 8014978:	3308      	adds	r3, #8
 801497a:	4a08      	ldr	r2, [pc, #32]	@ (801499c <etharp_output_to_arp_index+0x124>)
 801497c:	4413      	add	r3, r2
 801497e:	3304      	adds	r3, #4
 8014980:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8014984:	9200      	str	r2, [sp, #0]
 8014986:	460a      	mov	r2, r1
 8014988:	68b9      	ldr	r1, [r7, #8]
 801498a:	68f8      	ldr	r0, [r7, #12]
 801498c:	f001 fe40 	bl	8016610 <ethernet_output>
 8014990:	4603      	mov	r3, r0
}
 8014992:	4618      	mov	r0, r3
 8014994:	3710      	adds	r7, #16
 8014996:	46bd      	mov	sp, r7
 8014998:	bd80      	pop	{r7, pc}
 801499a:	bf00      	nop
 801499c:	20015218 	.word	0x20015218
 80149a0:	08022624 	.word	0x08022624
 80149a4:	08022794 	.word	0x08022794
 80149a8:	0802269c 	.word	0x0802269c

080149ac <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80149ac:	b580      	push	{r7, lr}
 80149ae:	b08a      	sub	sp, #40	@ 0x28
 80149b0:	af02      	add	r7, sp, #8
 80149b2:	60f8      	str	r0, [r7, #12]
 80149b4:	60b9      	str	r1, [r7, #8]
 80149b6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80149b8:	687b      	ldr	r3, [r7, #4]
 80149ba:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80149bc:	68fb      	ldr	r3, [r7, #12]
 80149be:	2b00      	cmp	r3, #0
 80149c0:	d106      	bne.n	80149d0 <etharp_output+0x24>
 80149c2:	4b73      	ldr	r3, [pc, #460]	@ (8014b90 <etharp_output+0x1e4>)
 80149c4:	f240 321e 	movw	r2, #798	@ 0x31e
 80149c8:	4972      	ldr	r1, [pc, #456]	@ (8014b94 <etharp_output+0x1e8>)
 80149ca:	4873      	ldr	r0, [pc, #460]	@ (8014b98 <etharp_output+0x1ec>)
 80149cc:	f002 fe06 	bl	80175dc <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80149d0:	68bb      	ldr	r3, [r7, #8]
 80149d2:	2b00      	cmp	r3, #0
 80149d4:	d106      	bne.n	80149e4 <etharp_output+0x38>
 80149d6:	4b6e      	ldr	r3, [pc, #440]	@ (8014b90 <etharp_output+0x1e4>)
 80149d8:	f240 321f 	movw	r2, #799	@ 0x31f
 80149dc:	496f      	ldr	r1, [pc, #444]	@ (8014b9c <etharp_output+0x1f0>)
 80149de:	486e      	ldr	r0, [pc, #440]	@ (8014b98 <etharp_output+0x1ec>)
 80149e0:	f002 fdfc 	bl	80175dc <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80149e4:	687b      	ldr	r3, [r7, #4]
 80149e6:	2b00      	cmp	r3, #0
 80149e8:	d106      	bne.n	80149f8 <etharp_output+0x4c>
 80149ea:	4b69      	ldr	r3, [pc, #420]	@ (8014b90 <etharp_output+0x1e4>)
 80149ec:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80149f0:	496b      	ldr	r1, [pc, #428]	@ (8014ba0 <etharp_output+0x1f4>)
 80149f2:	4869      	ldr	r0, [pc, #420]	@ (8014b98 <etharp_output+0x1ec>)
 80149f4:	f002 fdf2 	bl	80175dc <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80149f8:	687b      	ldr	r3, [r7, #4]
 80149fa:	681b      	ldr	r3, [r3, #0]
 80149fc:	68f9      	ldr	r1, [r7, #12]
 80149fe:	4618      	mov	r0, r3
 8014a00:	f000 fef8 	bl	80157f4 <ip4_addr_isbroadcast_u32>
 8014a04:	4603      	mov	r3, r0
 8014a06:	2b00      	cmp	r3, #0
 8014a08:	d002      	beq.n	8014a10 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8014a0a:	4b66      	ldr	r3, [pc, #408]	@ (8014ba4 <etharp_output+0x1f8>)
 8014a0c:	61fb      	str	r3, [r7, #28]
 8014a0e:	e0af      	b.n	8014b70 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8014a10:	687b      	ldr	r3, [r7, #4]
 8014a12:	681b      	ldr	r3, [r3, #0]
 8014a14:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8014a18:	2be0      	cmp	r3, #224	@ 0xe0
 8014a1a:	d118      	bne.n	8014a4e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8014a1c:	2301      	movs	r3, #1
 8014a1e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8014a20:	2300      	movs	r3, #0
 8014a22:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8014a24:	235e      	movs	r3, #94	@ 0x5e
 8014a26:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8014a28:	687b      	ldr	r3, [r7, #4]
 8014a2a:	3301      	adds	r3, #1
 8014a2c:	781b      	ldrb	r3, [r3, #0]
 8014a2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014a32:	b2db      	uxtb	r3, r3
 8014a34:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8014a36:	687b      	ldr	r3, [r7, #4]
 8014a38:	3302      	adds	r3, #2
 8014a3a:	781b      	ldrb	r3, [r3, #0]
 8014a3c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8014a3e:	687b      	ldr	r3, [r7, #4]
 8014a40:	3303      	adds	r3, #3
 8014a42:	781b      	ldrb	r3, [r3, #0]
 8014a44:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8014a46:	f107 0310 	add.w	r3, r7, #16
 8014a4a:	61fb      	str	r3, [r7, #28]
 8014a4c:	e090      	b.n	8014b70 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8014a4e:	687b      	ldr	r3, [r7, #4]
 8014a50:	681a      	ldr	r2, [r3, #0]
 8014a52:	68fb      	ldr	r3, [r7, #12]
 8014a54:	3304      	adds	r3, #4
 8014a56:	681b      	ldr	r3, [r3, #0]
 8014a58:	405a      	eors	r2, r3
 8014a5a:	68fb      	ldr	r3, [r7, #12]
 8014a5c:	3308      	adds	r3, #8
 8014a5e:	681b      	ldr	r3, [r3, #0]
 8014a60:	4013      	ands	r3, r2
 8014a62:	2b00      	cmp	r3, #0
 8014a64:	d012      	beq.n	8014a8c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8014a66:	687b      	ldr	r3, [r7, #4]
 8014a68:	681b      	ldr	r3, [r3, #0]
 8014a6a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8014a6c:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 8014a70:	4293      	cmp	r3, r2
 8014a72:	d00b      	beq.n	8014a8c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8014a74:	68fb      	ldr	r3, [r7, #12]
 8014a76:	330c      	adds	r3, #12
 8014a78:	681b      	ldr	r3, [r3, #0]
 8014a7a:	2b00      	cmp	r3, #0
 8014a7c:	d003      	beq.n	8014a86 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8014a7e:	68fb      	ldr	r3, [r7, #12]
 8014a80:	330c      	adds	r3, #12
 8014a82:	61bb      	str	r3, [r7, #24]
 8014a84:	e002      	b.n	8014a8c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8014a86:	f06f 0303 	mvn.w	r3, #3
 8014a8a:	e07d      	b.n	8014b88 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8014a8c:	4b46      	ldr	r3, [pc, #280]	@ (8014ba8 <etharp_output+0x1fc>)
 8014a8e:	781b      	ldrb	r3, [r3, #0]
 8014a90:	4619      	mov	r1, r3
 8014a92:	4a46      	ldr	r2, [pc, #280]	@ (8014bac <etharp_output+0x200>)
 8014a94:	460b      	mov	r3, r1
 8014a96:	005b      	lsls	r3, r3, #1
 8014a98:	440b      	add	r3, r1
 8014a9a:	00db      	lsls	r3, r3, #3
 8014a9c:	4413      	add	r3, r2
 8014a9e:	3314      	adds	r3, #20
 8014aa0:	781b      	ldrb	r3, [r3, #0]
 8014aa2:	2b01      	cmp	r3, #1
 8014aa4:	d925      	bls.n	8014af2 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8014aa6:	4b40      	ldr	r3, [pc, #256]	@ (8014ba8 <etharp_output+0x1fc>)
 8014aa8:	781b      	ldrb	r3, [r3, #0]
 8014aaa:	4619      	mov	r1, r3
 8014aac:	4a3f      	ldr	r2, [pc, #252]	@ (8014bac <etharp_output+0x200>)
 8014aae:	460b      	mov	r3, r1
 8014ab0:	005b      	lsls	r3, r3, #1
 8014ab2:	440b      	add	r3, r1
 8014ab4:	00db      	lsls	r3, r3, #3
 8014ab6:	4413      	add	r3, r2
 8014ab8:	3308      	adds	r3, #8
 8014aba:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8014abc:	68fa      	ldr	r2, [r7, #12]
 8014abe:	429a      	cmp	r2, r3
 8014ac0:	d117      	bne.n	8014af2 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8014ac2:	69bb      	ldr	r3, [r7, #24]
 8014ac4:	681a      	ldr	r2, [r3, #0]
 8014ac6:	4b38      	ldr	r3, [pc, #224]	@ (8014ba8 <etharp_output+0x1fc>)
 8014ac8:	781b      	ldrb	r3, [r3, #0]
 8014aca:	4618      	mov	r0, r3
 8014acc:	4937      	ldr	r1, [pc, #220]	@ (8014bac <etharp_output+0x200>)
 8014ace:	4603      	mov	r3, r0
 8014ad0:	005b      	lsls	r3, r3, #1
 8014ad2:	4403      	add	r3, r0
 8014ad4:	00db      	lsls	r3, r3, #3
 8014ad6:	440b      	add	r3, r1
 8014ad8:	3304      	adds	r3, #4
 8014ada:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8014adc:	429a      	cmp	r2, r3
 8014ade:	d108      	bne.n	8014af2 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8014ae0:	4b31      	ldr	r3, [pc, #196]	@ (8014ba8 <etharp_output+0x1fc>)
 8014ae2:	781b      	ldrb	r3, [r3, #0]
 8014ae4:	461a      	mov	r2, r3
 8014ae6:	68b9      	ldr	r1, [r7, #8]
 8014ae8:	68f8      	ldr	r0, [r7, #12]
 8014aea:	f7ff fec5 	bl	8014878 <etharp_output_to_arp_index>
 8014aee:	4603      	mov	r3, r0
 8014af0:	e04a      	b.n	8014b88 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8014af2:	2300      	movs	r3, #0
 8014af4:	75fb      	strb	r3, [r7, #23]
 8014af6:	e031      	b.n	8014b5c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014af8:	7dfa      	ldrb	r2, [r7, #23]
 8014afa:	492c      	ldr	r1, [pc, #176]	@ (8014bac <etharp_output+0x200>)
 8014afc:	4613      	mov	r3, r2
 8014afe:	005b      	lsls	r3, r3, #1
 8014b00:	4413      	add	r3, r2
 8014b02:	00db      	lsls	r3, r3, #3
 8014b04:	440b      	add	r3, r1
 8014b06:	3314      	adds	r3, #20
 8014b08:	781b      	ldrb	r3, [r3, #0]
 8014b0a:	2b01      	cmp	r3, #1
 8014b0c:	d923      	bls.n	8014b56 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8014b0e:	7dfa      	ldrb	r2, [r7, #23]
 8014b10:	4926      	ldr	r1, [pc, #152]	@ (8014bac <etharp_output+0x200>)
 8014b12:	4613      	mov	r3, r2
 8014b14:	005b      	lsls	r3, r3, #1
 8014b16:	4413      	add	r3, r2
 8014b18:	00db      	lsls	r3, r3, #3
 8014b1a:	440b      	add	r3, r1
 8014b1c:	3308      	adds	r3, #8
 8014b1e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014b20:	68fa      	ldr	r2, [r7, #12]
 8014b22:	429a      	cmp	r2, r3
 8014b24:	d117      	bne.n	8014b56 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8014b26:	69bb      	ldr	r3, [r7, #24]
 8014b28:	6819      	ldr	r1, [r3, #0]
 8014b2a:	7dfa      	ldrb	r2, [r7, #23]
 8014b2c:	481f      	ldr	r0, [pc, #124]	@ (8014bac <etharp_output+0x200>)
 8014b2e:	4613      	mov	r3, r2
 8014b30:	005b      	lsls	r3, r3, #1
 8014b32:	4413      	add	r3, r2
 8014b34:	00db      	lsls	r3, r3, #3
 8014b36:	4403      	add	r3, r0
 8014b38:	3304      	adds	r3, #4
 8014b3a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8014b3c:	4299      	cmp	r1, r3
 8014b3e:	d10a      	bne.n	8014b56 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8014b40:	4a19      	ldr	r2, [pc, #100]	@ (8014ba8 <etharp_output+0x1fc>)
 8014b42:	7dfb      	ldrb	r3, [r7, #23]
 8014b44:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8014b46:	7dfb      	ldrb	r3, [r7, #23]
 8014b48:	461a      	mov	r2, r3
 8014b4a:	68b9      	ldr	r1, [r7, #8]
 8014b4c:	68f8      	ldr	r0, [r7, #12]
 8014b4e:	f7ff fe93 	bl	8014878 <etharp_output_to_arp_index>
 8014b52:	4603      	mov	r3, r0
 8014b54:	e018      	b.n	8014b88 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8014b56:	7dfb      	ldrb	r3, [r7, #23]
 8014b58:	3301      	adds	r3, #1
 8014b5a:	75fb      	strb	r3, [r7, #23]
 8014b5c:	7dfb      	ldrb	r3, [r7, #23]
 8014b5e:	2b09      	cmp	r3, #9
 8014b60:	d9ca      	bls.n	8014af8 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8014b62:	68ba      	ldr	r2, [r7, #8]
 8014b64:	69b9      	ldr	r1, [r7, #24]
 8014b66:	68f8      	ldr	r0, [r7, #12]
 8014b68:	f000 f822 	bl	8014bb0 <etharp_query>
 8014b6c:	4603      	mov	r3, r0
 8014b6e:	e00b      	b.n	8014b88 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8014b70:	68fb      	ldr	r3, [r7, #12]
 8014b72:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8014b76:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8014b7a:	9300      	str	r3, [sp, #0]
 8014b7c:	69fb      	ldr	r3, [r7, #28]
 8014b7e:	68b9      	ldr	r1, [r7, #8]
 8014b80:	68f8      	ldr	r0, [r7, #12]
 8014b82:	f001 fd45 	bl	8016610 <ethernet_output>
 8014b86:	4603      	mov	r3, r0
}
 8014b88:	4618      	mov	r0, r3
 8014b8a:	3720      	adds	r7, #32
 8014b8c:	46bd      	mov	sp, r7
 8014b8e:	bd80      	pop	{r7, pc}
 8014b90:	08022624 	.word	0x08022624
 8014b94:	08022774 	.word	0x08022774
 8014b98:	0802269c 	.word	0x0802269c
 8014b9c:	080227c4 	.word	0x080227c4
 8014ba0:	08022764 	.word	0x08022764
 8014ba4:	08022de8 	.word	0x08022de8
 8014ba8:	20015308 	.word	0x20015308
 8014bac:	20015218 	.word	0x20015218

08014bb0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8014bb0:	b580      	push	{r7, lr}
 8014bb2:	b08c      	sub	sp, #48	@ 0x30
 8014bb4:	af02      	add	r7, sp, #8
 8014bb6:	60f8      	str	r0, [r7, #12]
 8014bb8:	60b9      	str	r1, [r7, #8]
 8014bba:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8014bbc:	68fb      	ldr	r3, [r7, #12]
 8014bbe:	3326      	adds	r3, #38	@ 0x26
 8014bc0:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8014bc2:	23ff      	movs	r3, #255	@ 0xff
 8014bc4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 8014bc8:	2300      	movs	r3, #0
 8014bca:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014bcc:	68bb      	ldr	r3, [r7, #8]
 8014bce:	681b      	ldr	r3, [r3, #0]
 8014bd0:	68f9      	ldr	r1, [r7, #12]
 8014bd2:	4618      	mov	r0, r3
 8014bd4:	f000 fe0e 	bl	80157f4 <ip4_addr_isbroadcast_u32>
 8014bd8:	4603      	mov	r3, r0
 8014bda:	2b00      	cmp	r3, #0
 8014bdc:	d10c      	bne.n	8014bf8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8014bde:	68bb      	ldr	r3, [r7, #8]
 8014be0:	681b      	ldr	r3, [r3, #0]
 8014be2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014be6:	2be0      	cmp	r3, #224	@ 0xe0
 8014be8:	d006      	beq.n	8014bf8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8014bea:	68bb      	ldr	r3, [r7, #8]
 8014bec:	2b00      	cmp	r3, #0
 8014bee:	d003      	beq.n	8014bf8 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8014bf0:	68bb      	ldr	r3, [r7, #8]
 8014bf2:	681b      	ldr	r3, [r3, #0]
 8014bf4:	2b00      	cmp	r3, #0
 8014bf6:	d102      	bne.n	8014bfe <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014bf8:	f06f 030f 	mvn.w	r3, #15
 8014bfc:	e101      	b.n	8014e02 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8014bfe:	68fa      	ldr	r2, [r7, #12]
 8014c00:	2101      	movs	r1, #1
 8014c02:	68b8      	ldr	r0, [r7, #8]
 8014c04:	f7ff fb60 	bl	80142c8 <etharp_find_entry>
 8014c08:	4603      	mov	r3, r0
 8014c0a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8014c0c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8014c10:	2b00      	cmp	r3, #0
 8014c12:	da02      	bge.n	8014c1a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8014c14:	8a7b      	ldrh	r3, [r7, #18]
 8014c16:	b25b      	sxtb	r3, r3
 8014c18:	e0f3      	b.n	8014e02 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8014c1a:	8a7b      	ldrh	r3, [r7, #18]
 8014c1c:	2b7e      	cmp	r3, #126	@ 0x7e
 8014c1e:	d906      	bls.n	8014c2e <etharp_query+0x7e>
 8014c20:	4b7a      	ldr	r3, [pc, #488]	@ (8014e0c <etharp_query+0x25c>)
 8014c22:	f240 32c1 	movw	r2, #961	@ 0x3c1
 8014c26:	497a      	ldr	r1, [pc, #488]	@ (8014e10 <etharp_query+0x260>)
 8014c28:	487a      	ldr	r0, [pc, #488]	@ (8014e14 <etharp_query+0x264>)
 8014c2a:	f002 fcd7 	bl	80175dc <iprintf>
  i = (netif_addr_idx_t)i_err;
 8014c2e:	8a7b      	ldrh	r3, [r7, #18]
 8014c30:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8014c32:	7c7a      	ldrb	r2, [r7, #17]
 8014c34:	4978      	ldr	r1, [pc, #480]	@ (8014e18 <etharp_query+0x268>)
 8014c36:	4613      	mov	r3, r2
 8014c38:	005b      	lsls	r3, r3, #1
 8014c3a:	4413      	add	r3, r2
 8014c3c:	00db      	lsls	r3, r3, #3
 8014c3e:	440b      	add	r3, r1
 8014c40:	3314      	adds	r3, #20
 8014c42:	781b      	ldrb	r3, [r3, #0]
 8014c44:	2b00      	cmp	r3, #0
 8014c46:	d115      	bne.n	8014c74 <etharp_query+0xc4>
    is_new_entry = 1;
 8014c48:	2301      	movs	r3, #1
 8014c4a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8014c4c:	7c7a      	ldrb	r2, [r7, #17]
 8014c4e:	4972      	ldr	r1, [pc, #456]	@ (8014e18 <etharp_query+0x268>)
 8014c50:	4613      	mov	r3, r2
 8014c52:	005b      	lsls	r3, r3, #1
 8014c54:	4413      	add	r3, r2
 8014c56:	00db      	lsls	r3, r3, #3
 8014c58:	440b      	add	r3, r1
 8014c5a:	3314      	adds	r3, #20
 8014c5c:	2201      	movs	r2, #1
 8014c5e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8014c60:	7c7a      	ldrb	r2, [r7, #17]
 8014c62:	496d      	ldr	r1, [pc, #436]	@ (8014e18 <etharp_query+0x268>)
 8014c64:	4613      	mov	r3, r2
 8014c66:	005b      	lsls	r3, r3, #1
 8014c68:	4413      	add	r3, r2
 8014c6a:	00db      	lsls	r3, r3, #3
 8014c6c:	440b      	add	r3, r1
 8014c6e:	3308      	adds	r3, #8
 8014c70:	68fa      	ldr	r2, [r7, #12]
 8014c72:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8014c74:	7c7a      	ldrb	r2, [r7, #17]
 8014c76:	4968      	ldr	r1, [pc, #416]	@ (8014e18 <etharp_query+0x268>)
 8014c78:	4613      	mov	r3, r2
 8014c7a:	005b      	lsls	r3, r3, #1
 8014c7c:	4413      	add	r3, r2
 8014c7e:	00db      	lsls	r3, r3, #3
 8014c80:	440b      	add	r3, r1
 8014c82:	3314      	adds	r3, #20
 8014c84:	781b      	ldrb	r3, [r3, #0]
 8014c86:	2b01      	cmp	r3, #1
 8014c88:	d011      	beq.n	8014cae <etharp_query+0xfe>
 8014c8a:	7c7a      	ldrb	r2, [r7, #17]
 8014c8c:	4962      	ldr	r1, [pc, #392]	@ (8014e18 <etharp_query+0x268>)
 8014c8e:	4613      	mov	r3, r2
 8014c90:	005b      	lsls	r3, r3, #1
 8014c92:	4413      	add	r3, r2
 8014c94:	00db      	lsls	r3, r3, #3
 8014c96:	440b      	add	r3, r1
 8014c98:	3314      	adds	r3, #20
 8014c9a:	781b      	ldrb	r3, [r3, #0]
 8014c9c:	2b01      	cmp	r3, #1
 8014c9e:	d806      	bhi.n	8014cae <etharp_query+0xfe>
 8014ca0:	4b5a      	ldr	r3, [pc, #360]	@ (8014e0c <etharp_query+0x25c>)
 8014ca2:	f240 32cd 	movw	r2, #973	@ 0x3cd
 8014ca6:	495d      	ldr	r1, [pc, #372]	@ (8014e1c <etharp_query+0x26c>)
 8014ca8:	485a      	ldr	r0, [pc, #360]	@ (8014e14 <etharp_query+0x264>)
 8014caa:	f002 fc97 	bl	80175dc <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8014cae:	6a3b      	ldr	r3, [r7, #32]
 8014cb0:	2b00      	cmp	r3, #0
 8014cb2:	d102      	bne.n	8014cba <etharp_query+0x10a>
 8014cb4:	687b      	ldr	r3, [r7, #4]
 8014cb6:	2b00      	cmp	r3, #0
 8014cb8:	d10c      	bne.n	8014cd4 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8014cba:	68b9      	ldr	r1, [r7, #8]
 8014cbc:	68f8      	ldr	r0, [r7, #12]
 8014cbe:	f000 f963 	bl	8014f88 <etharp_request>
 8014cc2:	4603      	mov	r3, r0
 8014cc4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8014cc8:	687b      	ldr	r3, [r7, #4]
 8014cca:	2b00      	cmp	r3, #0
 8014ccc:	d102      	bne.n	8014cd4 <etharp_query+0x124>
      return result;
 8014cce:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8014cd2:	e096      	b.n	8014e02 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8014cd4:	687b      	ldr	r3, [r7, #4]
 8014cd6:	2b00      	cmp	r3, #0
 8014cd8:	d106      	bne.n	8014ce8 <etharp_query+0x138>
 8014cda:	4b4c      	ldr	r3, [pc, #304]	@ (8014e0c <etharp_query+0x25c>)
 8014cdc:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8014ce0:	494f      	ldr	r1, [pc, #316]	@ (8014e20 <etharp_query+0x270>)
 8014ce2:	484c      	ldr	r0, [pc, #304]	@ (8014e14 <etharp_query+0x264>)
 8014ce4:	f002 fc7a 	bl	80175dc <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8014ce8:	7c7a      	ldrb	r2, [r7, #17]
 8014cea:	494b      	ldr	r1, [pc, #300]	@ (8014e18 <etharp_query+0x268>)
 8014cec:	4613      	mov	r3, r2
 8014cee:	005b      	lsls	r3, r3, #1
 8014cf0:	4413      	add	r3, r2
 8014cf2:	00db      	lsls	r3, r3, #3
 8014cf4:	440b      	add	r3, r1
 8014cf6:	3314      	adds	r3, #20
 8014cf8:	781b      	ldrb	r3, [r3, #0]
 8014cfa:	2b01      	cmp	r3, #1
 8014cfc:	d917      	bls.n	8014d2e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8014cfe:	4a49      	ldr	r2, [pc, #292]	@ (8014e24 <etharp_query+0x274>)
 8014d00:	7c7b      	ldrb	r3, [r7, #17]
 8014d02:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8014d04:	7c7a      	ldrb	r2, [r7, #17]
 8014d06:	4613      	mov	r3, r2
 8014d08:	005b      	lsls	r3, r3, #1
 8014d0a:	4413      	add	r3, r2
 8014d0c:	00db      	lsls	r3, r3, #3
 8014d0e:	3308      	adds	r3, #8
 8014d10:	4a41      	ldr	r2, [pc, #260]	@ (8014e18 <etharp_query+0x268>)
 8014d12:	4413      	add	r3, r2
 8014d14:	3304      	adds	r3, #4
 8014d16:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8014d1a:	9200      	str	r2, [sp, #0]
 8014d1c:	697a      	ldr	r2, [r7, #20]
 8014d1e:	6879      	ldr	r1, [r7, #4]
 8014d20:	68f8      	ldr	r0, [r7, #12]
 8014d22:	f001 fc75 	bl	8016610 <ethernet_output>
 8014d26:	4603      	mov	r3, r0
 8014d28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8014d2c:	e067      	b.n	8014dfe <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8014d2e:	7c7a      	ldrb	r2, [r7, #17]
 8014d30:	4939      	ldr	r1, [pc, #228]	@ (8014e18 <etharp_query+0x268>)
 8014d32:	4613      	mov	r3, r2
 8014d34:	005b      	lsls	r3, r3, #1
 8014d36:	4413      	add	r3, r2
 8014d38:	00db      	lsls	r3, r3, #3
 8014d3a:	440b      	add	r3, r1
 8014d3c:	3314      	adds	r3, #20
 8014d3e:	781b      	ldrb	r3, [r3, #0]
 8014d40:	2b01      	cmp	r3, #1
 8014d42:	d15c      	bne.n	8014dfe <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8014d44:	2300      	movs	r3, #0
 8014d46:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8014d48:	687b      	ldr	r3, [r7, #4]
 8014d4a:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014d4c:	e01c      	b.n	8014d88 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8014d4e:	69fb      	ldr	r3, [r7, #28]
 8014d50:	895a      	ldrh	r2, [r3, #10]
 8014d52:	69fb      	ldr	r3, [r7, #28]
 8014d54:	891b      	ldrh	r3, [r3, #8]
 8014d56:	429a      	cmp	r2, r3
 8014d58:	d10a      	bne.n	8014d70 <etharp_query+0x1c0>
 8014d5a:	69fb      	ldr	r3, [r7, #28]
 8014d5c:	681b      	ldr	r3, [r3, #0]
 8014d5e:	2b00      	cmp	r3, #0
 8014d60:	d006      	beq.n	8014d70 <etharp_query+0x1c0>
 8014d62:	4b2a      	ldr	r3, [pc, #168]	@ (8014e0c <etharp_query+0x25c>)
 8014d64:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8014d68:	492f      	ldr	r1, [pc, #188]	@ (8014e28 <etharp_query+0x278>)
 8014d6a:	482a      	ldr	r0, [pc, #168]	@ (8014e14 <etharp_query+0x264>)
 8014d6c:	f002 fc36 	bl	80175dc <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8014d70:	69fb      	ldr	r3, [r7, #28]
 8014d72:	7b1b      	ldrb	r3, [r3, #12]
 8014d74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014d78:	2b00      	cmp	r3, #0
 8014d7a:	d002      	beq.n	8014d82 <etharp_query+0x1d2>
        copy_needed = 1;
 8014d7c:	2301      	movs	r3, #1
 8014d7e:	61bb      	str	r3, [r7, #24]
        break;
 8014d80:	e005      	b.n	8014d8e <etharp_query+0x1de>
      }
      p = p->next;
 8014d82:	69fb      	ldr	r3, [r7, #28]
 8014d84:	681b      	ldr	r3, [r3, #0]
 8014d86:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014d88:	69fb      	ldr	r3, [r7, #28]
 8014d8a:	2b00      	cmp	r3, #0
 8014d8c:	d1df      	bne.n	8014d4e <etharp_query+0x19e>
    }
    if (copy_needed) {
 8014d8e:	69bb      	ldr	r3, [r7, #24]
 8014d90:	2b00      	cmp	r3, #0
 8014d92:	d007      	beq.n	8014da4 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8014d94:	687a      	ldr	r2, [r7, #4]
 8014d96:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8014d9a:	200e      	movs	r0, #14
 8014d9c:	f7f9 f978 	bl	800e090 <pbuf_clone>
 8014da0:	61f8      	str	r0, [r7, #28]
 8014da2:	e004      	b.n	8014dae <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8014da4:	687b      	ldr	r3, [r7, #4]
 8014da6:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8014da8:	69f8      	ldr	r0, [r7, #28]
 8014daa:	f7f8 fe6d 	bl	800da88 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8014dae:	69fb      	ldr	r3, [r7, #28]
 8014db0:	2b00      	cmp	r3, #0
 8014db2:	d021      	beq.n	8014df8 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8014db4:	7c7a      	ldrb	r2, [r7, #17]
 8014db6:	4918      	ldr	r1, [pc, #96]	@ (8014e18 <etharp_query+0x268>)
 8014db8:	4613      	mov	r3, r2
 8014dba:	005b      	lsls	r3, r3, #1
 8014dbc:	4413      	add	r3, r2
 8014dbe:	00db      	lsls	r3, r3, #3
 8014dc0:	440b      	add	r3, r1
 8014dc2:	681b      	ldr	r3, [r3, #0]
 8014dc4:	2b00      	cmp	r3, #0
 8014dc6:	d00a      	beq.n	8014dde <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8014dc8:	7c7a      	ldrb	r2, [r7, #17]
 8014dca:	4913      	ldr	r1, [pc, #76]	@ (8014e18 <etharp_query+0x268>)
 8014dcc:	4613      	mov	r3, r2
 8014dce:	005b      	lsls	r3, r3, #1
 8014dd0:	4413      	add	r3, r2
 8014dd2:	00db      	lsls	r3, r3, #3
 8014dd4:	440b      	add	r3, r1
 8014dd6:	681b      	ldr	r3, [r3, #0]
 8014dd8:	4618      	mov	r0, r3
 8014dda:	f7f8 fdb5 	bl	800d948 <pbuf_free>
      }
      arp_table[i].q = p;
 8014dde:	7c7a      	ldrb	r2, [r7, #17]
 8014de0:	490d      	ldr	r1, [pc, #52]	@ (8014e18 <etharp_query+0x268>)
 8014de2:	4613      	mov	r3, r2
 8014de4:	005b      	lsls	r3, r3, #1
 8014de6:	4413      	add	r3, r2
 8014de8:	00db      	lsls	r3, r3, #3
 8014dea:	440b      	add	r3, r1
 8014dec:	69fa      	ldr	r2, [r7, #28]
 8014dee:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8014df0:	2300      	movs	r3, #0
 8014df2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8014df6:	e002      	b.n	8014dfe <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8014df8:	23ff      	movs	r3, #255	@ 0xff
 8014dfa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 8014dfe:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8014e02:	4618      	mov	r0, r3
 8014e04:	3728      	adds	r7, #40	@ 0x28
 8014e06:	46bd      	mov	sp, r7
 8014e08:	bd80      	pop	{r7, pc}
 8014e0a:	bf00      	nop
 8014e0c:	08022624 	.word	0x08022624
 8014e10:	080227d0 	.word	0x080227d0
 8014e14:	0802269c 	.word	0x0802269c
 8014e18:	20015218 	.word	0x20015218
 8014e1c:	080227e0 	.word	0x080227e0
 8014e20:	080227c4 	.word	0x080227c4
 8014e24:	20015308 	.word	0x20015308
 8014e28:	08022808 	.word	0x08022808

08014e2c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8014e2c:	b580      	push	{r7, lr}
 8014e2e:	b08a      	sub	sp, #40	@ 0x28
 8014e30:	af02      	add	r7, sp, #8
 8014e32:	60f8      	str	r0, [r7, #12]
 8014e34:	60b9      	str	r1, [r7, #8]
 8014e36:	607a      	str	r2, [r7, #4]
 8014e38:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8014e3a:	2300      	movs	r3, #0
 8014e3c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8014e3e:	68fb      	ldr	r3, [r7, #12]
 8014e40:	2b00      	cmp	r3, #0
 8014e42:	d106      	bne.n	8014e52 <etharp_raw+0x26>
 8014e44:	4b3a      	ldr	r3, [pc, #232]	@ (8014f30 <etharp_raw+0x104>)
 8014e46:	f240 4257 	movw	r2, #1111	@ 0x457
 8014e4a:	493a      	ldr	r1, [pc, #232]	@ (8014f34 <etharp_raw+0x108>)
 8014e4c:	483a      	ldr	r0, [pc, #232]	@ (8014f38 <etharp_raw+0x10c>)
 8014e4e:	f002 fbc5 	bl	80175dc <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8014e52:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8014e56:	211c      	movs	r1, #28
 8014e58:	200e      	movs	r0, #14
 8014e5a:	f7f8 fa91 	bl	800d380 <pbuf_alloc>
 8014e5e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8014e60:	69bb      	ldr	r3, [r7, #24]
 8014e62:	2b00      	cmp	r3, #0
 8014e64:	d102      	bne.n	8014e6c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8014e66:	f04f 33ff 	mov.w	r3, #4294967295
 8014e6a:	e05d      	b.n	8014f28 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8014e6c:	69bb      	ldr	r3, [r7, #24]
 8014e6e:	895b      	ldrh	r3, [r3, #10]
 8014e70:	2b1b      	cmp	r3, #27
 8014e72:	d806      	bhi.n	8014e82 <etharp_raw+0x56>
 8014e74:	4b2e      	ldr	r3, [pc, #184]	@ (8014f30 <etharp_raw+0x104>)
 8014e76:	f240 4262 	movw	r2, #1122	@ 0x462
 8014e7a:	4930      	ldr	r1, [pc, #192]	@ (8014f3c <etharp_raw+0x110>)
 8014e7c:	482e      	ldr	r0, [pc, #184]	@ (8014f38 <etharp_raw+0x10c>)
 8014e7e:	f002 fbad 	bl	80175dc <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8014e82:	69bb      	ldr	r3, [r7, #24]
 8014e84:	685b      	ldr	r3, [r3, #4]
 8014e86:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8014e88:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8014e8a:	4618      	mov	r0, r3
 8014e8c:	f7f6 ff34 	bl	800bcf8 <lwip_htons>
 8014e90:	4603      	mov	r3, r0
 8014e92:	461a      	mov	r2, r3
 8014e94:	697b      	ldr	r3, [r7, #20]
 8014e96:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8014e98:	68fb      	ldr	r3, [r7, #12]
 8014e9a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8014e9e:	2b06      	cmp	r3, #6
 8014ea0:	d006      	beq.n	8014eb0 <etharp_raw+0x84>
 8014ea2:	4b23      	ldr	r3, [pc, #140]	@ (8014f30 <etharp_raw+0x104>)
 8014ea4:	f240 4269 	movw	r2, #1129	@ 0x469
 8014ea8:	4925      	ldr	r1, [pc, #148]	@ (8014f40 <etharp_raw+0x114>)
 8014eaa:	4823      	ldr	r0, [pc, #140]	@ (8014f38 <etharp_raw+0x10c>)
 8014eac:	f002 fb96 	bl	80175dc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8014eb0:	697b      	ldr	r3, [r7, #20]
 8014eb2:	3308      	adds	r3, #8
 8014eb4:	2206      	movs	r2, #6
 8014eb6:	6839      	ldr	r1, [r7, #0]
 8014eb8:	4618      	mov	r0, r3
 8014eba:	f002 fce6 	bl	801788a <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8014ebe:	697b      	ldr	r3, [r7, #20]
 8014ec0:	3312      	adds	r3, #18
 8014ec2:	2206      	movs	r2, #6
 8014ec4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014ec6:	4618      	mov	r0, r3
 8014ec8:	f002 fcdf 	bl	801788a <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8014ecc:	697b      	ldr	r3, [r7, #20]
 8014ece:	330e      	adds	r3, #14
 8014ed0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014ed2:	6812      	ldr	r2, [r2, #0]
 8014ed4:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8014ed6:	697b      	ldr	r3, [r7, #20]
 8014ed8:	3318      	adds	r3, #24
 8014eda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014edc:	6812      	ldr	r2, [r2, #0]
 8014ede:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8014ee0:	697b      	ldr	r3, [r7, #20]
 8014ee2:	2200      	movs	r2, #0
 8014ee4:	701a      	strb	r2, [r3, #0]
 8014ee6:	2200      	movs	r2, #0
 8014ee8:	f042 0201 	orr.w	r2, r2, #1
 8014eec:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8014eee:	697b      	ldr	r3, [r7, #20]
 8014ef0:	2200      	movs	r2, #0
 8014ef2:	f042 0208 	orr.w	r2, r2, #8
 8014ef6:	709a      	strb	r2, [r3, #2]
 8014ef8:	2200      	movs	r2, #0
 8014efa:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8014efc:	697b      	ldr	r3, [r7, #20]
 8014efe:	2206      	movs	r2, #6
 8014f00:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8014f02:	697b      	ldr	r3, [r7, #20]
 8014f04:	2204      	movs	r2, #4
 8014f06:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8014f08:	f640 0306 	movw	r3, #2054	@ 0x806
 8014f0c:	9300      	str	r3, [sp, #0]
 8014f0e:	687b      	ldr	r3, [r7, #4]
 8014f10:	68ba      	ldr	r2, [r7, #8]
 8014f12:	69b9      	ldr	r1, [r7, #24]
 8014f14:	68f8      	ldr	r0, [r7, #12]
 8014f16:	f001 fb7b 	bl	8016610 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8014f1a:	69b8      	ldr	r0, [r7, #24]
 8014f1c:	f7f8 fd14 	bl	800d948 <pbuf_free>
  p = NULL;
 8014f20:	2300      	movs	r3, #0
 8014f22:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8014f24:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014f28:	4618      	mov	r0, r3
 8014f2a:	3720      	adds	r7, #32
 8014f2c:	46bd      	mov	sp, r7
 8014f2e:	bd80      	pop	{r7, pc}
 8014f30:	08022624 	.word	0x08022624
 8014f34:	08022774 	.word	0x08022774
 8014f38:	0802269c 	.word	0x0802269c
 8014f3c:	08022824 	.word	0x08022824
 8014f40:	08022858 	.word	0x08022858

08014f44 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8014f44:	b580      	push	{r7, lr}
 8014f46:	b088      	sub	sp, #32
 8014f48:	af04      	add	r7, sp, #16
 8014f4a:	60f8      	str	r0, [r7, #12]
 8014f4c:	60b9      	str	r1, [r7, #8]
 8014f4e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014f50:	68fb      	ldr	r3, [r7, #12]
 8014f52:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8014f56:	68fb      	ldr	r3, [r7, #12]
 8014f58:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8014f5c:	68fb      	ldr	r3, [r7, #12]
 8014f5e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014f60:	2201      	movs	r2, #1
 8014f62:	9203      	str	r2, [sp, #12]
 8014f64:	68ba      	ldr	r2, [r7, #8]
 8014f66:	9202      	str	r2, [sp, #8]
 8014f68:	4a06      	ldr	r2, [pc, #24]	@ (8014f84 <etharp_request_dst+0x40>)
 8014f6a:	9201      	str	r2, [sp, #4]
 8014f6c:	9300      	str	r3, [sp, #0]
 8014f6e:	4603      	mov	r3, r0
 8014f70:	687a      	ldr	r2, [r7, #4]
 8014f72:	68f8      	ldr	r0, [r7, #12]
 8014f74:	f7ff ff5a 	bl	8014e2c <etharp_raw>
 8014f78:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8014f7a:	4618      	mov	r0, r3
 8014f7c:	3710      	adds	r7, #16
 8014f7e:	46bd      	mov	sp, r7
 8014f80:	bd80      	pop	{r7, pc}
 8014f82:	bf00      	nop
 8014f84:	08022df0 	.word	0x08022df0

08014f88 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8014f88:	b580      	push	{r7, lr}
 8014f8a:	b082      	sub	sp, #8
 8014f8c:	af00      	add	r7, sp, #0
 8014f8e:	6078      	str	r0, [r7, #4]
 8014f90:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8014f92:	4a05      	ldr	r2, [pc, #20]	@ (8014fa8 <etharp_request+0x20>)
 8014f94:	6839      	ldr	r1, [r7, #0]
 8014f96:	6878      	ldr	r0, [r7, #4]
 8014f98:	f7ff ffd4 	bl	8014f44 <etharp_request_dst>
 8014f9c:	4603      	mov	r3, r0
}
 8014f9e:	4618      	mov	r0, r3
 8014fa0:	3708      	adds	r7, #8
 8014fa2:	46bd      	mov	sp, r7
 8014fa4:	bd80      	pop	{r7, pc}
 8014fa6:	bf00      	nop
 8014fa8:	08022de8 	.word	0x08022de8

08014fac <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8014fac:	b580      	push	{r7, lr}
 8014fae:	b08e      	sub	sp, #56	@ 0x38
 8014fb0:	af04      	add	r7, sp, #16
 8014fb2:	6078      	str	r0, [r7, #4]
 8014fb4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8014fb6:	4b79      	ldr	r3, [pc, #484]	@ (801519c <icmp_input+0x1f0>)
 8014fb8:	689b      	ldr	r3, [r3, #8]
 8014fba:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8014fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014fbe:	781b      	ldrb	r3, [r3, #0]
 8014fc0:	f003 030f 	and.w	r3, r3, #15
 8014fc4:	b2db      	uxtb	r3, r3
 8014fc6:	009b      	lsls	r3, r3, #2
 8014fc8:	b2db      	uxtb	r3, r3
 8014fca:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 8014fcc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014fce:	2b13      	cmp	r3, #19
 8014fd0:	f240 80cd 	bls.w	801516e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8014fd4:	687b      	ldr	r3, [r7, #4]
 8014fd6:	895b      	ldrh	r3, [r3, #10]
 8014fd8:	2b03      	cmp	r3, #3
 8014fda:	f240 80ca 	bls.w	8015172 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8014fde:	687b      	ldr	r3, [r7, #4]
 8014fe0:	685b      	ldr	r3, [r3, #4]
 8014fe2:	781b      	ldrb	r3, [r3, #0]
 8014fe4:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8014fe8:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8014fec:	2b00      	cmp	r3, #0
 8014fee:	f000 80b7 	beq.w	8015160 <icmp_input+0x1b4>
 8014ff2:	2b08      	cmp	r3, #8
 8014ff4:	f040 80b7 	bne.w	8015166 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8014ff8:	4b69      	ldr	r3, [pc, #420]	@ (80151a0 <icmp_input+0x1f4>)
 8014ffa:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014ffc:	4b67      	ldr	r3, [pc, #412]	@ (801519c <icmp_input+0x1f0>)
 8014ffe:	695b      	ldr	r3, [r3, #20]
 8015000:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8015004:	2be0      	cmp	r3, #224	@ 0xe0
 8015006:	f000 80bb 	beq.w	8015180 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801500a:	4b64      	ldr	r3, [pc, #400]	@ (801519c <icmp_input+0x1f0>)
 801500c:	695b      	ldr	r3, [r3, #20]
 801500e:	4a63      	ldr	r2, [pc, #396]	@ (801519c <icmp_input+0x1f0>)
 8015010:	6812      	ldr	r2, [r2, #0]
 8015012:	4611      	mov	r1, r2
 8015014:	4618      	mov	r0, r3
 8015016:	f000 fbed 	bl	80157f4 <ip4_addr_isbroadcast_u32>
 801501a:	4603      	mov	r3, r0
 801501c:	2b00      	cmp	r3, #0
 801501e:	f040 80b1 	bne.w	8015184 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8015022:	687b      	ldr	r3, [r7, #4]
 8015024:	891b      	ldrh	r3, [r3, #8]
 8015026:	2b07      	cmp	r3, #7
 8015028:	f240 80a5 	bls.w	8015176 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801502c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801502e:	330e      	adds	r3, #14
 8015030:	4619      	mov	r1, r3
 8015032:	6878      	ldr	r0, [r7, #4]
 8015034:	f7f8 fbf2 	bl	800d81c <pbuf_add_header>
 8015038:	4603      	mov	r3, r0
 801503a:	2b00      	cmp	r3, #0
 801503c:	d04b      	beq.n	80150d6 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801503e:	687b      	ldr	r3, [r7, #4]
 8015040:	891a      	ldrh	r2, [r3, #8]
 8015042:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8015044:	4413      	add	r3, r2
 8015046:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8015048:	687b      	ldr	r3, [r7, #4]
 801504a:	891b      	ldrh	r3, [r3, #8]
 801504c:	8b7a      	ldrh	r2, [r7, #26]
 801504e:	429a      	cmp	r2, r3
 8015050:	f0c0 809a 	bcc.w	8015188 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8015054:	8b7b      	ldrh	r3, [r7, #26]
 8015056:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801505a:	4619      	mov	r1, r3
 801505c:	200e      	movs	r0, #14
 801505e:	f7f8 f98f 	bl	800d380 <pbuf_alloc>
 8015062:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8015064:	697b      	ldr	r3, [r7, #20]
 8015066:	2b00      	cmp	r3, #0
 8015068:	f000 8090 	beq.w	801518c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801506c:	697b      	ldr	r3, [r7, #20]
 801506e:	895b      	ldrh	r3, [r3, #10]
 8015070:	461a      	mov	r2, r3
 8015072:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8015074:	3308      	adds	r3, #8
 8015076:	429a      	cmp	r2, r3
 8015078:	d203      	bcs.n	8015082 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801507a:	6978      	ldr	r0, [r7, #20]
 801507c:	f7f8 fc64 	bl	800d948 <pbuf_free>
          goto icmperr;
 8015080:	e085      	b.n	801518e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8015082:	697b      	ldr	r3, [r7, #20]
 8015084:	685b      	ldr	r3, [r3, #4]
 8015086:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8015088:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801508a:	4618      	mov	r0, r3
 801508c:	f002 fbfd 	bl	801788a <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8015090:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8015092:	4619      	mov	r1, r3
 8015094:	6978      	ldr	r0, [r7, #20]
 8015096:	f7f8 fbd1 	bl	800d83c <pbuf_remove_header>
 801509a:	4603      	mov	r3, r0
 801509c:	2b00      	cmp	r3, #0
 801509e:	d009      	beq.n	80150b4 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80150a0:	4b40      	ldr	r3, [pc, #256]	@ (80151a4 <icmp_input+0x1f8>)
 80150a2:	22b6      	movs	r2, #182	@ 0xb6
 80150a4:	4940      	ldr	r1, [pc, #256]	@ (80151a8 <icmp_input+0x1fc>)
 80150a6:	4841      	ldr	r0, [pc, #260]	@ (80151ac <icmp_input+0x200>)
 80150a8:	f002 fa98 	bl	80175dc <iprintf>
          pbuf_free(r);
 80150ac:	6978      	ldr	r0, [r7, #20]
 80150ae:	f7f8 fc4b 	bl	800d948 <pbuf_free>
          goto icmperr;
 80150b2:	e06c      	b.n	801518e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80150b4:	6879      	ldr	r1, [r7, #4]
 80150b6:	6978      	ldr	r0, [r7, #20]
 80150b8:	f7f8 fd6e 	bl	800db98 <pbuf_copy>
 80150bc:	4603      	mov	r3, r0
 80150be:	2b00      	cmp	r3, #0
 80150c0:	d003      	beq.n	80150ca <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80150c2:	6978      	ldr	r0, [r7, #20]
 80150c4:	f7f8 fc40 	bl	800d948 <pbuf_free>
          goto icmperr;
 80150c8:	e061      	b.n	801518e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 80150ca:	6878      	ldr	r0, [r7, #4]
 80150cc:	f7f8 fc3c 	bl	800d948 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80150d0:	697b      	ldr	r3, [r7, #20]
 80150d2:	607b      	str	r3, [r7, #4]
 80150d4:	e00f      	b.n	80150f6 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80150d6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80150d8:	330e      	adds	r3, #14
 80150da:	4619      	mov	r1, r3
 80150dc:	6878      	ldr	r0, [r7, #4]
 80150de:	f7f8 fbad 	bl	800d83c <pbuf_remove_header>
 80150e2:	4603      	mov	r3, r0
 80150e4:	2b00      	cmp	r3, #0
 80150e6:	d006      	beq.n	80150f6 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80150e8:	4b2e      	ldr	r3, [pc, #184]	@ (80151a4 <icmp_input+0x1f8>)
 80150ea:	22c7      	movs	r2, #199	@ 0xc7
 80150ec:	4930      	ldr	r1, [pc, #192]	@ (80151b0 <icmp_input+0x204>)
 80150ee:	482f      	ldr	r0, [pc, #188]	@ (80151ac <icmp_input+0x200>)
 80150f0:	f002 fa74 	bl	80175dc <iprintf>
          goto icmperr;
 80150f4:	e04b      	b.n	801518e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80150f6:	687b      	ldr	r3, [r7, #4]
 80150f8:	685b      	ldr	r3, [r3, #4]
 80150fa:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80150fc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80150fe:	4619      	mov	r1, r3
 8015100:	6878      	ldr	r0, [r7, #4]
 8015102:	f7f8 fb8b 	bl	800d81c <pbuf_add_header>
 8015106:	4603      	mov	r3, r0
 8015108:	2b00      	cmp	r3, #0
 801510a:	d12b      	bne.n	8015164 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801510c:	687b      	ldr	r3, [r7, #4]
 801510e:	685b      	ldr	r3, [r3, #4]
 8015110:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8015112:	69fb      	ldr	r3, [r7, #28]
 8015114:	681a      	ldr	r2, [r3, #0]
 8015116:	68fb      	ldr	r3, [r7, #12]
 8015118:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801511a:	4b20      	ldr	r3, [pc, #128]	@ (801519c <icmp_input+0x1f0>)
 801511c:	691a      	ldr	r2, [r3, #16]
 801511e:	68fb      	ldr	r3, [r7, #12]
 8015120:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8015122:	693b      	ldr	r3, [r7, #16]
 8015124:	2200      	movs	r2, #0
 8015126:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8015128:	693b      	ldr	r3, [r7, #16]
 801512a:	2200      	movs	r2, #0
 801512c:	709a      	strb	r2, [r3, #2]
 801512e:	2200      	movs	r2, #0
 8015130:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8015132:	68fb      	ldr	r3, [r7, #12]
 8015134:	22ff      	movs	r2, #255	@ 0xff
 8015136:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8015138:	68fb      	ldr	r3, [r7, #12]
 801513a:	2200      	movs	r2, #0
 801513c:	729a      	strb	r2, [r3, #10]
 801513e:	2200      	movs	r2, #0
 8015140:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8015142:	683b      	ldr	r3, [r7, #0]
 8015144:	9302      	str	r3, [sp, #8]
 8015146:	2301      	movs	r3, #1
 8015148:	9301      	str	r3, [sp, #4]
 801514a:	2300      	movs	r3, #0
 801514c:	9300      	str	r3, [sp, #0]
 801514e:	23ff      	movs	r3, #255	@ 0xff
 8015150:	2200      	movs	r2, #0
 8015152:	69f9      	ldr	r1, [r7, #28]
 8015154:	6878      	ldr	r0, [r7, #4]
 8015156:	f000 fa75 	bl	8015644 <ip4_output_if>
 801515a:	4603      	mov	r3, r0
 801515c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801515e:	e001      	b.n	8015164 <icmp_input+0x1b8>
      break;
 8015160:	bf00      	nop
 8015162:	e000      	b.n	8015166 <icmp_input+0x1ba>
      break;
 8015164:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8015166:	6878      	ldr	r0, [r7, #4]
 8015168:	f7f8 fbee 	bl	800d948 <pbuf_free>
  return;
 801516c:	e013      	b.n	8015196 <icmp_input+0x1ea>
    goto lenerr;
 801516e:	bf00      	nop
 8015170:	e002      	b.n	8015178 <icmp_input+0x1cc>
    goto lenerr;
 8015172:	bf00      	nop
 8015174:	e000      	b.n	8015178 <icmp_input+0x1cc>
        goto lenerr;
 8015176:	bf00      	nop
lenerr:
  pbuf_free(p);
 8015178:	6878      	ldr	r0, [r7, #4]
 801517a:	f7f8 fbe5 	bl	800d948 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801517e:	e00a      	b.n	8015196 <icmp_input+0x1ea>
        goto icmperr;
 8015180:	bf00      	nop
 8015182:	e004      	b.n	801518e <icmp_input+0x1e2>
        goto icmperr;
 8015184:	bf00      	nop
 8015186:	e002      	b.n	801518e <icmp_input+0x1e2>
          goto icmperr;
 8015188:	bf00      	nop
 801518a:	e000      	b.n	801518e <icmp_input+0x1e2>
          goto icmperr;
 801518c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801518e:	6878      	ldr	r0, [r7, #4]
 8015190:	f7f8 fbda 	bl	800d948 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8015194:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8015196:	3728      	adds	r7, #40	@ 0x28
 8015198:	46bd      	mov	sp, r7
 801519a:	bd80      	pop	{r7, pc}
 801519c:	20011e78 	.word	0x20011e78
 80151a0:	20011e8c 	.word	0x20011e8c
 80151a4:	0802289c 	.word	0x0802289c
 80151a8:	080228d4 	.word	0x080228d4
 80151ac:	0802290c 	.word	0x0802290c
 80151b0:	08022934 	.word	0x08022934

080151b4 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80151b4:	b580      	push	{r7, lr}
 80151b6:	b082      	sub	sp, #8
 80151b8:	af00      	add	r7, sp, #0
 80151ba:	6078      	str	r0, [r7, #4]
 80151bc:	460b      	mov	r3, r1
 80151be:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80151c0:	78fb      	ldrb	r3, [r7, #3]
 80151c2:	461a      	mov	r2, r3
 80151c4:	2103      	movs	r1, #3
 80151c6:	6878      	ldr	r0, [r7, #4]
 80151c8:	f000 f814 	bl	80151f4 <icmp_send_response>
}
 80151cc:	bf00      	nop
 80151ce:	3708      	adds	r7, #8
 80151d0:	46bd      	mov	sp, r7
 80151d2:	bd80      	pop	{r7, pc}

080151d4 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80151d4:	b580      	push	{r7, lr}
 80151d6:	b082      	sub	sp, #8
 80151d8:	af00      	add	r7, sp, #0
 80151da:	6078      	str	r0, [r7, #4]
 80151dc:	460b      	mov	r3, r1
 80151de:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80151e0:	78fb      	ldrb	r3, [r7, #3]
 80151e2:	461a      	mov	r2, r3
 80151e4:	210b      	movs	r1, #11
 80151e6:	6878      	ldr	r0, [r7, #4]
 80151e8:	f000 f804 	bl	80151f4 <icmp_send_response>
}
 80151ec:	bf00      	nop
 80151ee:	3708      	adds	r7, #8
 80151f0:	46bd      	mov	sp, r7
 80151f2:	bd80      	pop	{r7, pc}

080151f4 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80151f4:	b580      	push	{r7, lr}
 80151f6:	b08c      	sub	sp, #48	@ 0x30
 80151f8:	af04      	add	r7, sp, #16
 80151fa:	6078      	str	r0, [r7, #4]
 80151fc:	460b      	mov	r3, r1
 80151fe:	70fb      	strb	r3, [r7, #3]
 8015200:	4613      	mov	r3, r2
 8015202:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8015204:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8015208:	2124      	movs	r1, #36	@ 0x24
 801520a:	2022      	movs	r0, #34	@ 0x22
 801520c:	f7f8 f8b8 	bl	800d380 <pbuf_alloc>
 8015210:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8015212:	69fb      	ldr	r3, [r7, #28]
 8015214:	2b00      	cmp	r3, #0
 8015216:	d04c      	beq.n	80152b2 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8015218:	69fb      	ldr	r3, [r7, #28]
 801521a:	895b      	ldrh	r3, [r3, #10]
 801521c:	2b23      	cmp	r3, #35	@ 0x23
 801521e:	d806      	bhi.n	801522e <icmp_send_response+0x3a>
 8015220:	4b26      	ldr	r3, [pc, #152]	@ (80152bc <icmp_send_response+0xc8>)
 8015222:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8015226:	4926      	ldr	r1, [pc, #152]	@ (80152c0 <icmp_send_response+0xcc>)
 8015228:	4826      	ldr	r0, [pc, #152]	@ (80152c4 <icmp_send_response+0xd0>)
 801522a:	f002 f9d7 	bl	80175dc <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801522e:	687b      	ldr	r3, [r7, #4]
 8015230:	685b      	ldr	r3, [r3, #4]
 8015232:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8015234:	69fb      	ldr	r3, [r7, #28]
 8015236:	685b      	ldr	r3, [r3, #4]
 8015238:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801523a:	697b      	ldr	r3, [r7, #20]
 801523c:	78fa      	ldrb	r2, [r7, #3]
 801523e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8015240:	697b      	ldr	r3, [r7, #20]
 8015242:	78ba      	ldrb	r2, [r7, #2]
 8015244:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8015246:	697b      	ldr	r3, [r7, #20]
 8015248:	2200      	movs	r2, #0
 801524a:	711a      	strb	r2, [r3, #4]
 801524c:	2200      	movs	r2, #0
 801524e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8015250:	697b      	ldr	r3, [r7, #20]
 8015252:	2200      	movs	r2, #0
 8015254:	719a      	strb	r2, [r3, #6]
 8015256:	2200      	movs	r2, #0
 8015258:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801525a:	69fb      	ldr	r3, [r7, #28]
 801525c:	685b      	ldr	r3, [r3, #4]
 801525e:	f103 0008 	add.w	r0, r3, #8
 8015262:	687b      	ldr	r3, [r7, #4]
 8015264:	685b      	ldr	r3, [r3, #4]
 8015266:	221c      	movs	r2, #28
 8015268:	4619      	mov	r1, r3
 801526a:	f002 fb0e 	bl	801788a <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801526e:	69bb      	ldr	r3, [r7, #24]
 8015270:	68db      	ldr	r3, [r3, #12]
 8015272:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8015274:	f107 030c 	add.w	r3, r7, #12
 8015278:	4618      	mov	r0, r3
 801527a:	f000 f825 	bl	80152c8 <ip4_route>
 801527e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8015280:	693b      	ldr	r3, [r7, #16]
 8015282:	2b00      	cmp	r3, #0
 8015284:	d011      	beq.n	80152aa <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8015286:	697b      	ldr	r3, [r7, #20]
 8015288:	2200      	movs	r2, #0
 801528a:	709a      	strb	r2, [r3, #2]
 801528c:	2200      	movs	r2, #0
 801528e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8015290:	f107 020c 	add.w	r2, r7, #12
 8015294:	693b      	ldr	r3, [r7, #16]
 8015296:	9302      	str	r3, [sp, #8]
 8015298:	2301      	movs	r3, #1
 801529a:	9301      	str	r3, [sp, #4]
 801529c:	2300      	movs	r3, #0
 801529e:	9300      	str	r3, [sp, #0]
 80152a0:	23ff      	movs	r3, #255	@ 0xff
 80152a2:	2100      	movs	r1, #0
 80152a4:	69f8      	ldr	r0, [r7, #28]
 80152a6:	f000 f9cd 	bl	8015644 <ip4_output_if>
  }
  pbuf_free(q);
 80152aa:	69f8      	ldr	r0, [r7, #28]
 80152ac:	f7f8 fb4c 	bl	800d948 <pbuf_free>
 80152b0:	e000      	b.n	80152b4 <icmp_send_response+0xc0>
    return;
 80152b2:	bf00      	nop
}
 80152b4:	3720      	adds	r7, #32
 80152b6:	46bd      	mov	sp, r7
 80152b8:	bd80      	pop	{r7, pc}
 80152ba:	bf00      	nop
 80152bc:	0802289c 	.word	0x0802289c
 80152c0:	08022968 	.word	0x08022968
 80152c4:	0802290c 	.word	0x0802290c

080152c8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80152c8:	b480      	push	{r7}
 80152ca:	b085      	sub	sp, #20
 80152cc:	af00      	add	r7, sp, #0
 80152ce:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80152d0:	4b33      	ldr	r3, [pc, #204]	@ (80153a0 <ip4_route+0xd8>)
 80152d2:	681b      	ldr	r3, [r3, #0]
 80152d4:	60fb      	str	r3, [r7, #12]
 80152d6:	e036      	b.n	8015346 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80152d8:	68fb      	ldr	r3, [r7, #12]
 80152da:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80152de:	f003 0301 	and.w	r3, r3, #1
 80152e2:	b2db      	uxtb	r3, r3
 80152e4:	2b00      	cmp	r3, #0
 80152e6:	d02b      	beq.n	8015340 <ip4_route+0x78>
 80152e8:	68fb      	ldr	r3, [r7, #12]
 80152ea:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80152ee:	089b      	lsrs	r3, r3, #2
 80152f0:	f003 0301 	and.w	r3, r3, #1
 80152f4:	b2db      	uxtb	r3, r3
 80152f6:	2b00      	cmp	r3, #0
 80152f8:	d022      	beq.n	8015340 <ip4_route+0x78>
 80152fa:	68fb      	ldr	r3, [r7, #12]
 80152fc:	3304      	adds	r3, #4
 80152fe:	681b      	ldr	r3, [r3, #0]
 8015300:	2b00      	cmp	r3, #0
 8015302:	d01d      	beq.n	8015340 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8015304:	687b      	ldr	r3, [r7, #4]
 8015306:	681a      	ldr	r2, [r3, #0]
 8015308:	68fb      	ldr	r3, [r7, #12]
 801530a:	3304      	adds	r3, #4
 801530c:	681b      	ldr	r3, [r3, #0]
 801530e:	405a      	eors	r2, r3
 8015310:	68fb      	ldr	r3, [r7, #12]
 8015312:	3308      	adds	r3, #8
 8015314:	681b      	ldr	r3, [r3, #0]
 8015316:	4013      	ands	r3, r2
 8015318:	2b00      	cmp	r3, #0
 801531a:	d101      	bne.n	8015320 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801531c:	68fb      	ldr	r3, [r7, #12]
 801531e:	e038      	b.n	8015392 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8015320:	68fb      	ldr	r3, [r7, #12]
 8015322:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8015326:	f003 0302 	and.w	r3, r3, #2
 801532a:	2b00      	cmp	r3, #0
 801532c:	d108      	bne.n	8015340 <ip4_route+0x78>
 801532e:	687b      	ldr	r3, [r7, #4]
 8015330:	681a      	ldr	r2, [r3, #0]
 8015332:	68fb      	ldr	r3, [r7, #12]
 8015334:	330c      	adds	r3, #12
 8015336:	681b      	ldr	r3, [r3, #0]
 8015338:	429a      	cmp	r2, r3
 801533a:	d101      	bne.n	8015340 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801533c:	68fb      	ldr	r3, [r7, #12]
 801533e:	e028      	b.n	8015392 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8015340:	68fb      	ldr	r3, [r7, #12]
 8015342:	681b      	ldr	r3, [r3, #0]
 8015344:	60fb      	str	r3, [r7, #12]
 8015346:	68fb      	ldr	r3, [r7, #12]
 8015348:	2b00      	cmp	r3, #0
 801534a:	d1c5      	bne.n	80152d8 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801534c:	4b15      	ldr	r3, [pc, #84]	@ (80153a4 <ip4_route+0xdc>)
 801534e:	681b      	ldr	r3, [r3, #0]
 8015350:	2b00      	cmp	r3, #0
 8015352:	d01a      	beq.n	801538a <ip4_route+0xc2>
 8015354:	4b13      	ldr	r3, [pc, #76]	@ (80153a4 <ip4_route+0xdc>)
 8015356:	681b      	ldr	r3, [r3, #0]
 8015358:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801535c:	f003 0301 	and.w	r3, r3, #1
 8015360:	2b00      	cmp	r3, #0
 8015362:	d012      	beq.n	801538a <ip4_route+0xc2>
 8015364:	4b0f      	ldr	r3, [pc, #60]	@ (80153a4 <ip4_route+0xdc>)
 8015366:	681b      	ldr	r3, [r3, #0]
 8015368:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801536c:	f003 0304 	and.w	r3, r3, #4
 8015370:	2b00      	cmp	r3, #0
 8015372:	d00a      	beq.n	801538a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8015374:	4b0b      	ldr	r3, [pc, #44]	@ (80153a4 <ip4_route+0xdc>)
 8015376:	681b      	ldr	r3, [r3, #0]
 8015378:	3304      	adds	r3, #4
 801537a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801537c:	2b00      	cmp	r3, #0
 801537e:	d004      	beq.n	801538a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8015380:	687b      	ldr	r3, [r7, #4]
 8015382:	681b      	ldr	r3, [r3, #0]
 8015384:	b2db      	uxtb	r3, r3
 8015386:	2b7f      	cmp	r3, #127	@ 0x7f
 8015388:	d101      	bne.n	801538e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801538a:	2300      	movs	r3, #0
 801538c:	e001      	b.n	8015392 <ip4_route+0xca>
  }

  return netif_default;
 801538e:	4b05      	ldr	r3, [pc, #20]	@ (80153a4 <ip4_route+0xdc>)
 8015390:	681b      	ldr	r3, [r3, #0]
}
 8015392:	4618      	mov	r0, r3
 8015394:	3714      	adds	r7, #20
 8015396:	46bd      	mov	sp, r7
 8015398:	f85d 7b04 	ldr.w	r7, [sp], #4
 801539c:	4770      	bx	lr
 801539e:	bf00      	nop
 80153a0:	200151ac 	.word	0x200151ac
 80153a4:	200151b0 	.word	0x200151b0

080153a8 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80153a8:	b580      	push	{r7, lr}
 80153aa:	b082      	sub	sp, #8
 80153ac:	af00      	add	r7, sp, #0
 80153ae:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80153b0:	687b      	ldr	r3, [r7, #4]
 80153b2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80153b6:	f003 0301 	and.w	r3, r3, #1
 80153ba:	b2db      	uxtb	r3, r3
 80153bc:	2b00      	cmp	r3, #0
 80153be:	d016      	beq.n	80153ee <ip4_input_accept+0x46>
 80153c0:	687b      	ldr	r3, [r7, #4]
 80153c2:	3304      	adds	r3, #4
 80153c4:	681b      	ldr	r3, [r3, #0]
 80153c6:	2b00      	cmp	r3, #0
 80153c8:	d011      	beq.n	80153ee <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80153ca:	4b0b      	ldr	r3, [pc, #44]	@ (80153f8 <ip4_input_accept+0x50>)
 80153cc:	695a      	ldr	r2, [r3, #20]
 80153ce:	687b      	ldr	r3, [r7, #4]
 80153d0:	3304      	adds	r3, #4
 80153d2:	681b      	ldr	r3, [r3, #0]
 80153d4:	429a      	cmp	r2, r3
 80153d6:	d008      	beq.n	80153ea <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80153d8:	4b07      	ldr	r3, [pc, #28]	@ (80153f8 <ip4_input_accept+0x50>)
 80153da:	695b      	ldr	r3, [r3, #20]
 80153dc:	6879      	ldr	r1, [r7, #4]
 80153de:	4618      	mov	r0, r3
 80153e0:	f000 fa08 	bl	80157f4 <ip4_addr_isbroadcast_u32>
 80153e4:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80153e6:	2b00      	cmp	r3, #0
 80153e8:	d001      	beq.n	80153ee <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80153ea:	2301      	movs	r3, #1
 80153ec:	e000      	b.n	80153f0 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80153ee:	2300      	movs	r3, #0
}
 80153f0:	4618      	mov	r0, r3
 80153f2:	3708      	adds	r7, #8
 80153f4:	46bd      	mov	sp, r7
 80153f6:	bd80      	pop	{r7, pc}
 80153f8:	20011e78 	.word	0x20011e78

080153fc <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80153fc:	b580      	push	{r7, lr}
 80153fe:	b086      	sub	sp, #24
 8015400:	af00      	add	r7, sp, #0
 8015402:	6078      	str	r0, [r7, #4]
 8015404:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8015406:	687b      	ldr	r3, [r7, #4]
 8015408:	685b      	ldr	r3, [r3, #4]
 801540a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 801540c:	697b      	ldr	r3, [r7, #20]
 801540e:	781b      	ldrb	r3, [r3, #0]
 8015410:	091b      	lsrs	r3, r3, #4
 8015412:	b2db      	uxtb	r3, r3
 8015414:	2b04      	cmp	r3, #4
 8015416:	d004      	beq.n	8015422 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8015418:	6878      	ldr	r0, [r7, #4]
 801541a:	f7f8 fa95 	bl	800d948 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801541e:	2300      	movs	r3, #0
 8015420:	e107      	b.n	8015632 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8015422:	697b      	ldr	r3, [r7, #20]
 8015424:	781b      	ldrb	r3, [r3, #0]
 8015426:	f003 030f 	and.w	r3, r3, #15
 801542a:	b2db      	uxtb	r3, r3
 801542c:	009b      	lsls	r3, r3, #2
 801542e:	b2db      	uxtb	r3, r3
 8015430:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8015432:	697b      	ldr	r3, [r7, #20]
 8015434:	885b      	ldrh	r3, [r3, #2]
 8015436:	b29b      	uxth	r3, r3
 8015438:	4618      	mov	r0, r3
 801543a:	f7f6 fc5d 	bl	800bcf8 <lwip_htons>
 801543e:	4603      	mov	r3, r0
 8015440:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8015442:	687b      	ldr	r3, [r7, #4]
 8015444:	891b      	ldrh	r3, [r3, #8]
 8015446:	89ba      	ldrh	r2, [r7, #12]
 8015448:	429a      	cmp	r2, r3
 801544a:	d204      	bcs.n	8015456 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 801544c:	89bb      	ldrh	r3, [r7, #12]
 801544e:	4619      	mov	r1, r3
 8015450:	6878      	ldr	r0, [r7, #4]
 8015452:	f7f8 f8f3 	bl	800d63c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8015456:	687b      	ldr	r3, [r7, #4]
 8015458:	895b      	ldrh	r3, [r3, #10]
 801545a:	89fa      	ldrh	r2, [r7, #14]
 801545c:	429a      	cmp	r2, r3
 801545e:	d807      	bhi.n	8015470 <ip4_input+0x74>
 8015460:	687b      	ldr	r3, [r7, #4]
 8015462:	891b      	ldrh	r3, [r3, #8]
 8015464:	89ba      	ldrh	r2, [r7, #12]
 8015466:	429a      	cmp	r2, r3
 8015468:	d802      	bhi.n	8015470 <ip4_input+0x74>
 801546a:	89fb      	ldrh	r3, [r7, #14]
 801546c:	2b13      	cmp	r3, #19
 801546e:	d804      	bhi.n	801547a <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8015470:	6878      	ldr	r0, [r7, #4]
 8015472:	f7f8 fa69 	bl	800d948 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8015476:	2300      	movs	r3, #0
 8015478:	e0db      	b.n	8015632 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801547a:	697b      	ldr	r3, [r7, #20]
 801547c:	691b      	ldr	r3, [r3, #16]
 801547e:	4a6f      	ldr	r2, [pc, #444]	@ (801563c <ip4_input+0x240>)
 8015480:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8015482:	697b      	ldr	r3, [r7, #20]
 8015484:	68db      	ldr	r3, [r3, #12]
 8015486:	4a6d      	ldr	r2, [pc, #436]	@ (801563c <ip4_input+0x240>)
 8015488:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801548a:	4b6c      	ldr	r3, [pc, #432]	@ (801563c <ip4_input+0x240>)
 801548c:	695b      	ldr	r3, [r3, #20]
 801548e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8015492:	2be0      	cmp	r3, #224	@ 0xe0
 8015494:	d112      	bne.n	80154bc <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8015496:	683b      	ldr	r3, [r7, #0]
 8015498:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801549c:	f003 0301 	and.w	r3, r3, #1
 80154a0:	b2db      	uxtb	r3, r3
 80154a2:	2b00      	cmp	r3, #0
 80154a4:	d007      	beq.n	80154b6 <ip4_input+0xba>
 80154a6:	683b      	ldr	r3, [r7, #0]
 80154a8:	3304      	adds	r3, #4
 80154aa:	681b      	ldr	r3, [r3, #0]
 80154ac:	2b00      	cmp	r3, #0
 80154ae:	d002      	beq.n	80154b6 <ip4_input+0xba>
      netif = inp;
 80154b0:	683b      	ldr	r3, [r7, #0]
 80154b2:	613b      	str	r3, [r7, #16]
 80154b4:	e02a      	b.n	801550c <ip4_input+0x110>
    } else {
      netif = NULL;
 80154b6:	2300      	movs	r3, #0
 80154b8:	613b      	str	r3, [r7, #16]
 80154ba:	e027      	b.n	801550c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80154bc:	6838      	ldr	r0, [r7, #0]
 80154be:	f7ff ff73 	bl	80153a8 <ip4_input_accept>
 80154c2:	4603      	mov	r3, r0
 80154c4:	2b00      	cmp	r3, #0
 80154c6:	d002      	beq.n	80154ce <ip4_input+0xd2>
      netif = inp;
 80154c8:	683b      	ldr	r3, [r7, #0]
 80154ca:	613b      	str	r3, [r7, #16]
 80154cc:	e01e      	b.n	801550c <ip4_input+0x110>
    } else {
      netif = NULL;
 80154ce:	2300      	movs	r3, #0
 80154d0:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80154d2:	4b5a      	ldr	r3, [pc, #360]	@ (801563c <ip4_input+0x240>)
 80154d4:	695b      	ldr	r3, [r3, #20]
 80154d6:	b2db      	uxtb	r3, r3
 80154d8:	2b7f      	cmp	r3, #127	@ 0x7f
 80154da:	d017      	beq.n	801550c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80154dc:	4b58      	ldr	r3, [pc, #352]	@ (8015640 <ip4_input+0x244>)
 80154de:	681b      	ldr	r3, [r3, #0]
 80154e0:	613b      	str	r3, [r7, #16]
 80154e2:	e00e      	b.n	8015502 <ip4_input+0x106>
          if (netif == inp) {
 80154e4:	693a      	ldr	r2, [r7, #16]
 80154e6:	683b      	ldr	r3, [r7, #0]
 80154e8:	429a      	cmp	r2, r3
 80154ea:	d006      	beq.n	80154fa <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80154ec:	6938      	ldr	r0, [r7, #16]
 80154ee:	f7ff ff5b 	bl	80153a8 <ip4_input_accept>
 80154f2:	4603      	mov	r3, r0
 80154f4:	2b00      	cmp	r3, #0
 80154f6:	d108      	bne.n	801550a <ip4_input+0x10e>
 80154f8:	e000      	b.n	80154fc <ip4_input+0x100>
            continue;
 80154fa:	bf00      	nop
        NETIF_FOREACH(netif) {
 80154fc:	693b      	ldr	r3, [r7, #16]
 80154fe:	681b      	ldr	r3, [r3, #0]
 8015500:	613b      	str	r3, [r7, #16]
 8015502:	693b      	ldr	r3, [r7, #16]
 8015504:	2b00      	cmp	r3, #0
 8015506:	d1ed      	bne.n	80154e4 <ip4_input+0xe8>
 8015508:	e000      	b.n	801550c <ip4_input+0x110>
            break;
 801550a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801550c:	4b4b      	ldr	r3, [pc, #300]	@ (801563c <ip4_input+0x240>)
 801550e:	691b      	ldr	r3, [r3, #16]
 8015510:	6839      	ldr	r1, [r7, #0]
 8015512:	4618      	mov	r0, r3
 8015514:	f000 f96e 	bl	80157f4 <ip4_addr_isbroadcast_u32>
 8015518:	4603      	mov	r3, r0
 801551a:	2b00      	cmp	r3, #0
 801551c:	d105      	bne.n	801552a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801551e:	4b47      	ldr	r3, [pc, #284]	@ (801563c <ip4_input+0x240>)
 8015520:	691b      	ldr	r3, [r3, #16]
 8015522:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015526:	2be0      	cmp	r3, #224	@ 0xe0
 8015528:	d104      	bne.n	8015534 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801552a:	6878      	ldr	r0, [r7, #4]
 801552c:	f7f8 fa0c 	bl	800d948 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8015530:	2300      	movs	r3, #0
 8015532:	e07e      	b.n	8015632 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8015534:	693b      	ldr	r3, [r7, #16]
 8015536:	2b00      	cmp	r3, #0
 8015538:	d104      	bne.n	8015544 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801553a:	6878      	ldr	r0, [r7, #4]
 801553c:	f7f8 fa04 	bl	800d948 <pbuf_free>
    return ERR_OK;
 8015540:	2300      	movs	r3, #0
 8015542:	e076      	b.n	8015632 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8015544:	697b      	ldr	r3, [r7, #20]
 8015546:	88db      	ldrh	r3, [r3, #6]
 8015548:	b29b      	uxth	r3, r3
 801554a:	461a      	mov	r2, r3
 801554c:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8015550:	4013      	ands	r3, r2
 8015552:	2b00      	cmp	r3, #0
 8015554:	d00b      	beq.n	801556e <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8015556:	6878      	ldr	r0, [r7, #4]
 8015558:	f000 fc92 	bl	8015e80 <ip4_reass>
 801555c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801555e:	687b      	ldr	r3, [r7, #4]
 8015560:	2b00      	cmp	r3, #0
 8015562:	d101      	bne.n	8015568 <ip4_input+0x16c>
      return ERR_OK;
 8015564:	2300      	movs	r3, #0
 8015566:	e064      	b.n	8015632 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8015568:	687b      	ldr	r3, [r7, #4]
 801556a:	685b      	ldr	r3, [r3, #4]
 801556c:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801556e:	4a33      	ldr	r2, [pc, #204]	@ (801563c <ip4_input+0x240>)
 8015570:	693b      	ldr	r3, [r7, #16]
 8015572:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8015574:	4a31      	ldr	r2, [pc, #196]	@ (801563c <ip4_input+0x240>)
 8015576:	683b      	ldr	r3, [r7, #0]
 8015578:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801557a:	4a30      	ldr	r2, [pc, #192]	@ (801563c <ip4_input+0x240>)
 801557c:	697b      	ldr	r3, [r7, #20]
 801557e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8015580:	697b      	ldr	r3, [r7, #20]
 8015582:	781b      	ldrb	r3, [r3, #0]
 8015584:	f003 030f 	and.w	r3, r3, #15
 8015588:	b2db      	uxtb	r3, r3
 801558a:	009b      	lsls	r3, r3, #2
 801558c:	b2db      	uxtb	r3, r3
 801558e:	461a      	mov	r2, r3
 8015590:	4b2a      	ldr	r3, [pc, #168]	@ (801563c <ip4_input+0x240>)
 8015592:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8015594:	89fb      	ldrh	r3, [r7, #14]
 8015596:	4619      	mov	r1, r3
 8015598:	6878      	ldr	r0, [r7, #4]
 801559a:	f7f8 f94f 	bl	800d83c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801559e:	697b      	ldr	r3, [r7, #20]
 80155a0:	7a5b      	ldrb	r3, [r3, #9]
 80155a2:	2b11      	cmp	r3, #17
 80155a4:	d006      	beq.n	80155b4 <ip4_input+0x1b8>
 80155a6:	2b11      	cmp	r3, #17
 80155a8:	dc13      	bgt.n	80155d2 <ip4_input+0x1d6>
 80155aa:	2b01      	cmp	r3, #1
 80155ac:	d00c      	beq.n	80155c8 <ip4_input+0x1cc>
 80155ae:	2b06      	cmp	r3, #6
 80155b0:	d005      	beq.n	80155be <ip4_input+0x1c2>
 80155b2:	e00e      	b.n	80155d2 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80155b4:	6839      	ldr	r1, [r7, #0]
 80155b6:	6878      	ldr	r0, [r7, #4]
 80155b8:	f7fe f90e 	bl	80137d8 <udp_input>
        break;
 80155bc:	e026      	b.n	801560c <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80155be:	6839      	ldr	r1, [r7, #0]
 80155c0:	6878      	ldr	r0, [r7, #4]
 80155c2:	f7fa f955 	bl	800f870 <tcp_input>
        break;
 80155c6:	e021      	b.n	801560c <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80155c8:	6839      	ldr	r1, [r7, #0]
 80155ca:	6878      	ldr	r0, [r7, #4]
 80155cc:	f7ff fcee 	bl	8014fac <icmp_input>
        break;
 80155d0:	e01c      	b.n	801560c <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80155d2:	4b1a      	ldr	r3, [pc, #104]	@ (801563c <ip4_input+0x240>)
 80155d4:	695b      	ldr	r3, [r3, #20]
 80155d6:	6939      	ldr	r1, [r7, #16]
 80155d8:	4618      	mov	r0, r3
 80155da:	f000 f90b 	bl	80157f4 <ip4_addr_isbroadcast_u32>
 80155de:	4603      	mov	r3, r0
 80155e0:	2b00      	cmp	r3, #0
 80155e2:	d10f      	bne.n	8015604 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80155e4:	4b15      	ldr	r3, [pc, #84]	@ (801563c <ip4_input+0x240>)
 80155e6:	695b      	ldr	r3, [r3, #20]
 80155e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80155ec:	2be0      	cmp	r3, #224	@ 0xe0
 80155ee:	d009      	beq.n	8015604 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80155f0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80155f4:	4619      	mov	r1, r3
 80155f6:	6878      	ldr	r0, [r7, #4]
 80155f8:	f7f8 f993 	bl	800d922 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80155fc:	2102      	movs	r1, #2
 80155fe:	6878      	ldr	r0, [r7, #4]
 8015600:	f7ff fdd8 	bl	80151b4 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8015604:	6878      	ldr	r0, [r7, #4]
 8015606:	f7f8 f99f 	bl	800d948 <pbuf_free>
        break;
 801560a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801560c:	4b0b      	ldr	r3, [pc, #44]	@ (801563c <ip4_input+0x240>)
 801560e:	2200      	movs	r2, #0
 8015610:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8015612:	4b0a      	ldr	r3, [pc, #40]	@ (801563c <ip4_input+0x240>)
 8015614:	2200      	movs	r2, #0
 8015616:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8015618:	4b08      	ldr	r3, [pc, #32]	@ (801563c <ip4_input+0x240>)
 801561a:	2200      	movs	r2, #0
 801561c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801561e:	4b07      	ldr	r3, [pc, #28]	@ (801563c <ip4_input+0x240>)
 8015620:	2200      	movs	r2, #0
 8015622:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8015624:	4b05      	ldr	r3, [pc, #20]	@ (801563c <ip4_input+0x240>)
 8015626:	2200      	movs	r2, #0
 8015628:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801562a:	4b04      	ldr	r3, [pc, #16]	@ (801563c <ip4_input+0x240>)
 801562c:	2200      	movs	r2, #0
 801562e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8015630:	2300      	movs	r3, #0
}
 8015632:	4618      	mov	r0, r3
 8015634:	3718      	adds	r7, #24
 8015636:	46bd      	mov	sp, r7
 8015638:	bd80      	pop	{r7, pc}
 801563a:	bf00      	nop
 801563c:	20011e78 	.word	0x20011e78
 8015640:	200151ac 	.word	0x200151ac

08015644 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8015644:	b580      	push	{r7, lr}
 8015646:	b08a      	sub	sp, #40	@ 0x28
 8015648:	af04      	add	r7, sp, #16
 801564a:	60f8      	str	r0, [r7, #12]
 801564c:	60b9      	str	r1, [r7, #8]
 801564e:	607a      	str	r2, [r7, #4]
 8015650:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8015652:	68bb      	ldr	r3, [r7, #8]
 8015654:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8015656:	687b      	ldr	r3, [r7, #4]
 8015658:	2b00      	cmp	r3, #0
 801565a:	d009      	beq.n	8015670 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801565c:	68bb      	ldr	r3, [r7, #8]
 801565e:	2b00      	cmp	r3, #0
 8015660:	d003      	beq.n	801566a <ip4_output_if+0x26>
 8015662:	68bb      	ldr	r3, [r7, #8]
 8015664:	681b      	ldr	r3, [r3, #0]
 8015666:	2b00      	cmp	r3, #0
 8015668:	d102      	bne.n	8015670 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801566a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801566c:	3304      	adds	r3, #4
 801566e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8015670:	78fa      	ldrb	r2, [r7, #3]
 8015672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015674:	9302      	str	r3, [sp, #8]
 8015676:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801567a:	9301      	str	r3, [sp, #4]
 801567c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015680:	9300      	str	r3, [sp, #0]
 8015682:	4613      	mov	r3, r2
 8015684:	687a      	ldr	r2, [r7, #4]
 8015686:	6979      	ldr	r1, [r7, #20]
 8015688:	68f8      	ldr	r0, [r7, #12]
 801568a:	f000 f805 	bl	8015698 <ip4_output_if_src>
 801568e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8015690:	4618      	mov	r0, r3
 8015692:	3718      	adds	r7, #24
 8015694:	46bd      	mov	sp, r7
 8015696:	bd80      	pop	{r7, pc}

08015698 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8015698:	b580      	push	{r7, lr}
 801569a:	b088      	sub	sp, #32
 801569c:	af00      	add	r7, sp, #0
 801569e:	60f8      	str	r0, [r7, #12]
 80156a0:	60b9      	str	r1, [r7, #8]
 80156a2:	607a      	str	r2, [r7, #4]
 80156a4:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80156a6:	68fb      	ldr	r3, [r7, #12]
 80156a8:	7b9b      	ldrb	r3, [r3, #14]
 80156aa:	2b01      	cmp	r3, #1
 80156ac:	d006      	beq.n	80156bc <ip4_output_if_src+0x24>
 80156ae:	4b4b      	ldr	r3, [pc, #300]	@ (80157dc <ip4_output_if_src+0x144>)
 80156b0:	f44f 7255 	mov.w	r2, #852	@ 0x354
 80156b4:	494a      	ldr	r1, [pc, #296]	@ (80157e0 <ip4_output_if_src+0x148>)
 80156b6:	484b      	ldr	r0, [pc, #300]	@ (80157e4 <ip4_output_if_src+0x14c>)
 80156b8:	f001 ff90 	bl	80175dc <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80156bc:	687b      	ldr	r3, [r7, #4]
 80156be:	2b00      	cmp	r3, #0
 80156c0:	d060      	beq.n	8015784 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80156c2:	2314      	movs	r3, #20
 80156c4:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80156c6:	2114      	movs	r1, #20
 80156c8:	68f8      	ldr	r0, [r7, #12]
 80156ca:	f7f8 f8a7 	bl	800d81c <pbuf_add_header>
 80156ce:	4603      	mov	r3, r0
 80156d0:	2b00      	cmp	r3, #0
 80156d2:	d002      	beq.n	80156da <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80156d4:	f06f 0301 	mvn.w	r3, #1
 80156d8:	e07c      	b.n	80157d4 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80156da:	68fb      	ldr	r3, [r7, #12]
 80156dc:	685b      	ldr	r3, [r3, #4]
 80156de:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80156e0:	68fb      	ldr	r3, [r7, #12]
 80156e2:	895b      	ldrh	r3, [r3, #10]
 80156e4:	2b13      	cmp	r3, #19
 80156e6:	d806      	bhi.n	80156f6 <ip4_output_if_src+0x5e>
 80156e8:	4b3c      	ldr	r3, [pc, #240]	@ (80157dc <ip4_output_if_src+0x144>)
 80156ea:	f44f 7262 	mov.w	r2, #904	@ 0x388
 80156ee:	493e      	ldr	r1, [pc, #248]	@ (80157e8 <ip4_output_if_src+0x150>)
 80156f0:	483c      	ldr	r0, [pc, #240]	@ (80157e4 <ip4_output_if_src+0x14c>)
 80156f2:	f001 ff73 	bl	80175dc <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80156f6:	69fb      	ldr	r3, [r7, #28]
 80156f8:	78fa      	ldrb	r2, [r7, #3]
 80156fa:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80156fc:	69fb      	ldr	r3, [r7, #28]
 80156fe:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8015702:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8015704:	687b      	ldr	r3, [r7, #4]
 8015706:	681a      	ldr	r2, [r3, #0]
 8015708:	69fb      	ldr	r3, [r7, #28]
 801570a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801570c:	8b7b      	ldrh	r3, [r7, #26]
 801570e:	089b      	lsrs	r3, r3, #2
 8015710:	b29b      	uxth	r3, r3
 8015712:	b2db      	uxtb	r3, r3
 8015714:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015718:	b2da      	uxtb	r2, r3
 801571a:	69fb      	ldr	r3, [r7, #28]
 801571c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801571e:	69fb      	ldr	r3, [r7, #28]
 8015720:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8015724:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8015726:	68fb      	ldr	r3, [r7, #12]
 8015728:	891b      	ldrh	r3, [r3, #8]
 801572a:	4618      	mov	r0, r3
 801572c:	f7f6 fae4 	bl	800bcf8 <lwip_htons>
 8015730:	4603      	mov	r3, r0
 8015732:	461a      	mov	r2, r3
 8015734:	69fb      	ldr	r3, [r7, #28]
 8015736:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8015738:	69fb      	ldr	r3, [r7, #28]
 801573a:	2200      	movs	r2, #0
 801573c:	719a      	strb	r2, [r3, #6]
 801573e:	2200      	movs	r2, #0
 8015740:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8015742:	4b2a      	ldr	r3, [pc, #168]	@ (80157ec <ip4_output_if_src+0x154>)
 8015744:	881b      	ldrh	r3, [r3, #0]
 8015746:	4618      	mov	r0, r3
 8015748:	f7f6 fad6 	bl	800bcf8 <lwip_htons>
 801574c:	4603      	mov	r3, r0
 801574e:	461a      	mov	r2, r3
 8015750:	69fb      	ldr	r3, [r7, #28]
 8015752:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8015754:	4b25      	ldr	r3, [pc, #148]	@ (80157ec <ip4_output_if_src+0x154>)
 8015756:	881b      	ldrh	r3, [r3, #0]
 8015758:	3301      	adds	r3, #1
 801575a:	b29a      	uxth	r2, r3
 801575c:	4b23      	ldr	r3, [pc, #140]	@ (80157ec <ip4_output_if_src+0x154>)
 801575e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8015760:	68bb      	ldr	r3, [r7, #8]
 8015762:	2b00      	cmp	r3, #0
 8015764:	d104      	bne.n	8015770 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8015766:	4b22      	ldr	r3, [pc, #136]	@ (80157f0 <ip4_output_if_src+0x158>)
 8015768:	681a      	ldr	r2, [r3, #0]
 801576a:	69fb      	ldr	r3, [r7, #28]
 801576c:	60da      	str	r2, [r3, #12]
 801576e:	e003      	b.n	8015778 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8015770:	68bb      	ldr	r3, [r7, #8]
 8015772:	681a      	ldr	r2, [r3, #0]
 8015774:	69fb      	ldr	r3, [r7, #28]
 8015776:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8015778:	69fb      	ldr	r3, [r7, #28]
 801577a:	2200      	movs	r2, #0
 801577c:	729a      	strb	r2, [r3, #10]
 801577e:	2200      	movs	r2, #0
 8015780:	72da      	strb	r2, [r3, #11]
 8015782:	e00f      	b.n	80157a4 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8015784:	68fb      	ldr	r3, [r7, #12]
 8015786:	895b      	ldrh	r3, [r3, #10]
 8015788:	2b13      	cmp	r3, #19
 801578a:	d802      	bhi.n	8015792 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801578c:	f06f 0301 	mvn.w	r3, #1
 8015790:	e020      	b.n	80157d4 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8015792:	68fb      	ldr	r3, [r7, #12]
 8015794:	685b      	ldr	r3, [r3, #4]
 8015796:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8015798:	69fb      	ldr	r3, [r7, #28]
 801579a:	691b      	ldr	r3, [r3, #16]
 801579c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801579e:	f107 0314 	add.w	r3, r7, #20
 80157a2:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80157a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80157a6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80157a8:	2b00      	cmp	r3, #0
 80157aa:	d00c      	beq.n	80157c6 <ip4_output_if_src+0x12e>
 80157ac:	68fb      	ldr	r3, [r7, #12]
 80157ae:	891a      	ldrh	r2, [r3, #8]
 80157b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80157b2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80157b4:	429a      	cmp	r2, r3
 80157b6:	d906      	bls.n	80157c6 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80157b8:	687a      	ldr	r2, [r7, #4]
 80157ba:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80157bc:	68f8      	ldr	r0, [r7, #12]
 80157be:	f000 fd53 	bl	8016268 <ip4_frag>
 80157c2:	4603      	mov	r3, r0
 80157c4:	e006      	b.n	80157d4 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80157c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80157c8:	695b      	ldr	r3, [r3, #20]
 80157ca:	687a      	ldr	r2, [r7, #4]
 80157cc:	68f9      	ldr	r1, [r7, #12]
 80157ce:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80157d0:	4798      	blx	r3
 80157d2:	4603      	mov	r3, r0
}
 80157d4:	4618      	mov	r0, r3
 80157d6:	3720      	adds	r7, #32
 80157d8:	46bd      	mov	sp, r7
 80157da:	bd80      	pop	{r7, pc}
 80157dc:	08022994 	.word	0x08022994
 80157e0:	080229c8 	.word	0x080229c8
 80157e4:	080229d4 	.word	0x080229d4
 80157e8:	080229fc 	.word	0x080229fc
 80157ec:	2001530a 	.word	0x2001530a
 80157f0:	08022de4 	.word	0x08022de4

080157f4 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80157f4:	b480      	push	{r7}
 80157f6:	b085      	sub	sp, #20
 80157f8:	af00      	add	r7, sp, #0
 80157fa:	6078      	str	r0, [r7, #4]
 80157fc:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80157fe:	687b      	ldr	r3, [r7, #4]
 8015800:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8015802:	687b      	ldr	r3, [r7, #4]
 8015804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015808:	d002      	beq.n	8015810 <ip4_addr_isbroadcast_u32+0x1c>
 801580a:	687b      	ldr	r3, [r7, #4]
 801580c:	2b00      	cmp	r3, #0
 801580e:	d101      	bne.n	8015814 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8015810:	2301      	movs	r3, #1
 8015812:	e02a      	b.n	801586a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8015814:	683b      	ldr	r3, [r7, #0]
 8015816:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801581a:	f003 0302 	and.w	r3, r3, #2
 801581e:	2b00      	cmp	r3, #0
 8015820:	d101      	bne.n	8015826 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8015822:	2300      	movs	r3, #0
 8015824:	e021      	b.n	801586a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8015826:	683b      	ldr	r3, [r7, #0]
 8015828:	3304      	adds	r3, #4
 801582a:	681b      	ldr	r3, [r3, #0]
 801582c:	687a      	ldr	r2, [r7, #4]
 801582e:	429a      	cmp	r2, r3
 8015830:	d101      	bne.n	8015836 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8015832:	2300      	movs	r3, #0
 8015834:	e019      	b.n	801586a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8015836:	68fa      	ldr	r2, [r7, #12]
 8015838:	683b      	ldr	r3, [r7, #0]
 801583a:	3304      	adds	r3, #4
 801583c:	681b      	ldr	r3, [r3, #0]
 801583e:	405a      	eors	r2, r3
 8015840:	683b      	ldr	r3, [r7, #0]
 8015842:	3308      	adds	r3, #8
 8015844:	681b      	ldr	r3, [r3, #0]
 8015846:	4013      	ands	r3, r2
 8015848:	2b00      	cmp	r3, #0
 801584a:	d10d      	bne.n	8015868 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801584c:	683b      	ldr	r3, [r7, #0]
 801584e:	3308      	adds	r3, #8
 8015850:	681b      	ldr	r3, [r3, #0]
 8015852:	43da      	mvns	r2, r3
 8015854:	687b      	ldr	r3, [r7, #4]
 8015856:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8015858:	683b      	ldr	r3, [r7, #0]
 801585a:	3308      	adds	r3, #8
 801585c:	681b      	ldr	r3, [r3, #0]
 801585e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015860:	429a      	cmp	r2, r3
 8015862:	d101      	bne.n	8015868 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8015864:	2301      	movs	r3, #1
 8015866:	e000      	b.n	801586a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8015868:	2300      	movs	r3, #0
  }
}
 801586a:	4618      	mov	r0, r3
 801586c:	3714      	adds	r7, #20
 801586e:	46bd      	mov	sp, r7
 8015870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015874:	4770      	bx	lr
	...

08015878 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8015878:	b580      	push	{r7, lr}
 801587a:	b084      	sub	sp, #16
 801587c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801587e:	2300      	movs	r3, #0
 8015880:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8015882:	4b12      	ldr	r3, [pc, #72]	@ (80158cc <ip_reass_tmr+0x54>)
 8015884:	681b      	ldr	r3, [r3, #0]
 8015886:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8015888:	e018      	b.n	80158bc <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801588a:	68fb      	ldr	r3, [r7, #12]
 801588c:	7fdb      	ldrb	r3, [r3, #31]
 801588e:	2b00      	cmp	r3, #0
 8015890:	d00b      	beq.n	80158aa <ip_reass_tmr+0x32>
      r->timer--;
 8015892:	68fb      	ldr	r3, [r7, #12]
 8015894:	7fdb      	ldrb	r3, [r3, #31]
 8015896:	3b01      	subs	r3, #1
 8015898:	b2da      	uxtb	r2, r3
 801589a:	68fb      	ldr	r3, [r7, #12]
 801589c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801589e:	68fb      	ldr	r3, [r7, #12]
 80158a0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80158a2:	68fb      	ldr	r3, [r7, #12]
 80158a4:	681b      	ldr	r3, [r3, #0]
 80158a6:	60fb      	str	r3, [r7, #12]
 80158a8:	e008      	b.n	80158bc <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80158aa:	68fb      	ldr	r3, [r7, #12]
 80158ac:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80158ae:	68fb      	ldr	r3, [r7, #12]
 80158b0:	681b      	ldr	r3, [r3, #0]
 80158b2:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80158b4:	68b9      	ldr	r1, [r7, #8]
 80158b6:	6878      	ldr	r0, [r7, #4]
 80158b8:	f000 f80a 	bl	80158d0 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80158bc:	68fb      	ldr	r3, [r7, #12]
 80158be:	2b00      	cmp	r3, #0
 80158c0:	d1e3      	bne.n	801588a <ip_reass_tmr+0x12>
    }
  }
}
 80158c2:	bf00      	nop
 80158c4:	bf00      	nop
 80158c6:	3710      	adds	r7, #16
 80158c8:	46bd      	mov	sp, r7
 80158ca:	bd80      	pop	{r7, pc}
 80158cc:	2001530c 	.word	0x2001530c

080158d0 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80158d0:	b580      	push	{r7, lr}
 80158d2:	b088      	sub	sp, #32
 80158d4:	af00      	add	r7, sp, #0
 80158d6:	6078      	str	r0, [r7, #4]
 80158d8:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80158da:	2300      	movs	r3, #0
 80158dc:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80158de:	683a      	ldr	r2, [r7, #0]
 80158e0:	687b      	ldr	r3, [r7, #4]
 80158e2:	429a      	cmp	r2, r3
 80158e4:	d105      	bne.n	80158f2 <ip_reass_free_complete_datagram+0x22>
 80158e6:	4b45      	ldr	r3, [pc, #276]	@ (80159fc <ip_reass_free_complete_datagram+0x12c>)
 80158e8:	22ab      	movs	r2, #171	@ 0xab
 80158ea:	4945      	ldr	r1, [pc, #276]	@ (8015a00 <ip_reass_free_complete_datagram+0x130>)
 80158ec:	4845      	ldr	r0, [pc, #276]	@ (8015a04 <ip_reass_free_complete_datagram+0x134>)
 80158ee:	f001 fe75 	bl	80175dc <iprintf>
  if (prev != NULL) {
 80158f2:	683b      	ldr	r3, [r7, #0]
 80158f4:	2b00      	cmp	r3, #0
 80158f6:	d00a      	beq.n	801590e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80158f8:	683b      	ldr	r3, [r7, #0]
 80158fa:	681b      	ldr	r3, [r3, #0]
 80158fc:	687a      	ldr	r2, [r7, #4]
 80158fe:	429a      	cmp	r2, r3
 8015900:	d005      	beq.n	801590e <ip_reass_free_complete_datagram+0x3e>
 8015902:	4b3e      	ldr	r3, [pc, #248]	@ (80159fc <ip_reass_free_complete_datagram+0x12c>)
 8015904:	22ad      	movs	r2, #173	@ 0xad
 8015906:	4940      	ldr	r1, [pc, #256]	@ (8015a08 <ip_reass_free_complete_datagram+0x138>)
 8015908:	483e      	ldr	r0, [pc, #248]	@ (8015a04 <ip_reass_free_complete_datagram+0x134>)
 801590a:	f001 fe67 	bl	80175dc <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801590e:	687b      	ldr	r3, [r7, #4]
 8015910:	685b      	ldr	r3, [r3, #4]
 8015912:	685b      	ldr	r3, [r3, #4]
 8015914:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8015916:	697b      	ldr	r3, [r7, #20]
 8015918:	889b      	ldrh	r3, [r3, #4]
 801591a:	b29b      	uxth	r3, r3
 801591c:	2b00      	cmp	r3, #0
 801591e:	d12a      	bne.n	8015976 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8015920:	687b      	ldr	r3, [r7, #4]
 8015922:	685b      	ldr	r3, [r3, #4]
 8015924:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8015926:	697b      	ldr	r3, [r7, #20]
 8015928:	681a      	ldr	r2, [r3, #0]
 801592a:	687b      	ldr	r3, [r7, #4]
 801592c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801592e:	69bb      	ldr	r3, [r7, #24]
 8015930:	6858      	ldr	r0, [r3, #4]
 8015932:	687b      	ldr	r3, [r7, #4]
 8015934:	3308      	adds	r3, #8
 8015936:	2214      	movs	r2, #20
 8015938:	4619      	mov	r1, r3
 801593a:	f001 ffa6 	bl	801788a <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801593e:	2101      	movs	r1, #1
 8015940:	69b8      	ldr	r0, [r7, #24]
 8015942:	f7ff fc47 	bl	80151d4 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8015946:	69b8      	ldr	r0, [r7, #24]
 8015948:	f7f8 f886 	bl	800da58 <pbuf_clen>
 801594c:	4603      	mov	r3, r0
 801594e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015950:	8bfa      	ldrh	r2, [r7, #30]
 8015952:	8a7b      	ldrh	r3, [r7, #18]
 8015954:	4413      	add	r3, r2
 8015956:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801595a:	db05      	blt.n	8015968 <ip_reass_free_complete_datagram+0x98>
 801595c:	4b27      	ldr	r3, [pc, #156]	@ (80159fc <ip_reass_free_complete_datagram+0x12c>)
 801595e:	22bc      	movs	r2, #188	@ 0xbc
 8015960:	492a      	ldr	r1, [pc, #168]	@ (8015a0c <ip_reass_free_complete_datagram+0x13c>)
 8015962:	4828      	ldr	r0, [pc, #160]	@ (8015a04 <ip_reass_free_complete_datagram+0x134>)
 8015964:	f001 fe3a 	bl	80175dc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8015968:	8bfa      	ldrh	r2, [r7, #30]
 801596a:	8a7b      	ldrh	r3, [r7, #18]
 801596c:	4413      	add	r3, r2
 801596e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8015970:	69b8      	ldr	r0, [r7, #24]
 8015972:	f7f7 ffe9 	bl	800d948 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8015976:	687b      	ldr	r3, [r7, #4]
 8015978:	685b      	ldr	r3, [r3, #4]
 801597a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801597c:	e01f      	b.n	80159be <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801597e:	69bb      	ldr	r3, [r7, #24]
 8015980:	685b      	ldr	r3, [r3, #4]
 8015982:	617b      	str	r3, [r7, #20]
    pcur = p;
 8015984:	69bb      	ldr	r3, [r7, #24]
 8015986:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8015988:	697b      	ldr	r3, [r7, #20]
 801598a:	681b      	ldr	r3, [r3, #0]
 801598c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801598e:	68f8      	ldr	r0, [r7, #12]
 8015990:	f7f8 f862 	bl	800da58 <pbuf_clen>
 8015994:	4603      	mov	r3, r0
 8015996:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015998:	8bfa      	ldrh	r2, [r7, #30]
 801599a:	8a7b      	ldrh	r3, [r7, #18]
 801599c:	4413      	add	r3, r2
 801599e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80159a2:	db05      	blt.n	80159b0 <ip_reass_free_complete_datagram+0xe0>
 80159a4:	4b15      	ldr	r3, [pc, #84]	@ (80159fc <ip_reass_free_complete_datagram+0x12c>)
 80159a6:	22cc      	movs	r2, #204	@ 0xcc
 80159a8:	4918      	ldr	r1, [pc, #96]	@ (8015a0c <ip_reass_free_complete_datagram+0x13c>)
 80159aa:	4816      	ldr	r0, [pc, #88]	@ (8015a04 <ip_reass_free_complete_datagram+0x134>)
 80159ac:	f001 fe16 	bl	80175dc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80159b0:	8bfa      	ldrh	r2, [r7, #30]
 80159b2:	8a7b      	ldrh	r3, [r7, #18]
 80159b4:	4413      	add	r3, r2
 80159b6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80159b8:	68f8      	ldr	r0, [r7, #12]
 80159ba:	f7f7 ffc5 	bl	800d948 <pbuf_free>
  while (p != NULL) {
 80159be:	69bb      	ldr	r3, [r7, #24]
 80159c0:	2b00      	cmp	r3, #0
 80159c2:	d1dc      	bne.n	801597e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80159c4:	6839      	ldr	r1, [r7, #0]
 80159c6:	6878      	ldr	r0, [r7, #4]
 80159c8:	f000 f8c2 	bl	8015b50 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80159cc:	4b10      	ldr	r3, [pc, #64]	@ (8015a10 <ip_reass_free_complete_datagram+0x140>)
 80159ce:	881b      	ldrh	r3, [r3, #0]
 80159d0:	8bfa      	ldrh	r2, [r7, #30]
 80159d2:	429a      	cmp	r2, r3
 80159d4:	d905      	bls.n	80159e2 <ip_reass_free_complete_datagram+0x112>
 80159d6:	4b09      	ldr	r3, [pc, #36]	@ (80159fc <ip_reass_free_complete_datagram+0x12c>)
 80159d8:	22d2      	movs	r2, #210	@ 0xd2
 80159da:	490e      	ldr	r1, [pc, #56]	@ (8015a14 <ip_reass_free_complete_datagram+0x144>)
 80159dc:	4809      	ldr	r0, [pc, #36]	@ (8015a04 <ip_reass_free_complete_datagram+0x134>)
 80159de:	f001 fdfd 	bl	80175dc <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80159e2:	4b0b      	ldr	r3, [pc, #44]	@ (8015a10 <ip_reass_free_complete_datagram+0x140>)
 80159e4:	881a      	ldrh	r2, [r3, #0]
 80159e6:	8bfb      	ldrh	r3, [r7, #30]
 80159e8:	1ad3      	subs	r3, r2, r3
 80159ea:	b29a      	uxth	r2, r3
 80159ec:	4b08      	ldr	r3, [pc, #32]	@ (8015a10 <ip_reass_free_complete_datagram+0x140>)
 80159ee:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80159f0:	8bfb      	ldrh	r3, [r7, #30]
}
 80159f2:	4618      	mov	r0, r3
 80159f4:	3720      	adds	r7, #32
 80159f6:	46bd      	mov	sp, r7
 80159f8:	bd80      	pop	{r7, pc}
 80159fa:	bf00      	nop
 80159fc:	08022a2c 	.word	0x08022a2c
 8015a00:	08022a68 	.word	0x08022a68
 8015a04:	08022a74 	.word	0x08022a74
 8015a08:	08022a9c 	.word	0x08022a9c
 8015a0c:	08022ab0 	.word	0x08022ab0
 8015a10:	20015310 	.word	0x20015310
 8015a14:	08022ad0 	.word	0x08022ad0

08015a18 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8015a18:	b580      	push	{r7, lr}
 8015a1a:	b08a      	sub	sp, #40	@ 0x28
 8015a1c:	af00      	add	r7, sp, #0
 8015a1e:	6078      	str	r0, [r7, #4]
 8015a20:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8015a22:	2300      	movs	r3, #0
 8015a24:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8015a26:	2300      	movs	r3, #0
 8015a28:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8015a2a:	2300      	movs	r3, #0
 8015a2c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8015a2e:	2300      	movs	r3, #0
 8015a30:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8015a32:	2300      	movs	r3, #0
 8015a34:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8015a36:	4b28      	ldr	r3, [pc, #160]	@ (8015ad8 <ip_reass_remove_oldest_datagram+0xc0>)
 8015a38:	681b      	ldr	r3, [r3, #0]
 8015a3a:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8015a3c:	e030      	b.n	8015aa0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8015a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a40:	695a      	ldr	r2, [r3, #20]
 8015a42:	687b      	ldr	r3, [r7, #4]
 8015a44:	68db      	ldr	r3, [r3, #12]
 8015a46:	429a      	cmp	r2, r3
 8015a48:	d10c      	bne.n	8015a64 <ip_reass_remove_oldest_datagram+0x4c>
 8015a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a4c:	699a      	ldr	r2, [r3, #24]
 8015a4e:	687b      	ldr	r3, [r7, #4]
 8015a50:	691b      	ldr	r3, [r3, #16]
 8015a52:	429a      	cmp	r2, r3
 8015a54:	d106      	bne.n	8015a64 <ip_reass_remove_oldest_datagram+0x4c>
 8015a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a58:	899a      	ldrh	r2, [r3, #12]
 8015a5a:	687b      	ldr	r3, [r7, #4]
 8015a5c:	889b      	ldrh	r3, [r3, #4]
 8015a5e:	b29b      	uxth	r3, r3
 8015a60:	429a      	cmp	r2, r3
 8015a62:	d014      	beq.n	8015a8e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8015a64:	693b      	ldr	r3, [r7, #16]
 8015a66:	3301      	adds	r3, #1
 8015a68:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8015a6a:	6a3b      	ldr	r3, [r7, #32]
 8015a6c:	2b00      	cmp	r3, #0
 8015a6e:	d104      	bne.n	8015a7a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8015a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a72:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015a74:	69fb      	ldr	r3, [r7, #28]
 8015a76:	61bb      	str	r3, [r7, #24]
 8015a78:	e009      	b.n	8015a8e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8015a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a7c:	7fda      	ldrb	r2, [r3, #31]
 8015a7e:	6a3b      	ldr	r3, [r7, #32]
 8015a80:	7fdb      	ldrb	r3, [r3, #31]
 8015a82:	429a      	cmp	r2, r3
 8015a84:	d803      	bhi.n	8015a8e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8015a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a88:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015a8a:	69fb      	ldr	r3, [r7, #28]
 8015a8c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8015a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a90:	681b      	ldr	r3, [r3, #0]
 8015a92:	2b00      	cmp	r3, #0
 8015a94:	d001      	beq.n	8015a9a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8015a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a98:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8015a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015a9c:	681b      	ldr	r3, [r3, #0]
 8015a9e:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8015aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015aa2:	2b00      	cmp	r3, #0
 8015aa4:	d1cb      	bne.n	8015a3e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8015aa6:	6a3b      	ldr	r3, [r7, #32]
 8015aa8:	2b00      	cmp	r3, #0
 8015aaa:	d008      	beq.n	8015abe <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8015aac:	69b9      	ldr	r1, [r7, #24]
 8015aae:	6a38      	ldr	r0, [r7, #32]
 8015ab0:	f7ff ff0e 	bl	80158d0 <ip_reass_free_complete_datagram>
 8015ab4:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8015ab6:	697a      	ldr	r2, [r7, #20]
 8015ab8:	68fb      	ldr	r3, [r7, #12]
 8015aba:	4413      	add	r3, r2
 8015abc:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8015abe:	697a      	ldr	r2, [r7, #20]
 8015ac0:	683b      	ldr	r3, [r7, #0]
 8015ac2:	429a      	cmp	r2, r3
 8015ac4:	da02      	bge.n	8015acc <ip_reass_remove_oldest_datagram+0xb4>
 8015ac6:	693b      	ldr	r3, [r7, #16]
 8015ac8:	2b01      	cmp	r3, #1
 8015aca:	dcac      	bgt.n	8015a26 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8015acc:	697b      	ldr	r3, [r7, #20]
}
 8015ace:	4618      	mov	r0, r3
 8015ad0:	3728      	adds	r7, #40	@ 0x28
 8015ad2:	46bd      	mov	sp, r7
 8015ad4:	bd80      	pop	{r7, pc}
 8015ad6:	bf00      	nop
 8015ad8:	2001530c 	.word	0x2001530c

08015adc <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8015adc:	b580      	push	{r7, lr}
 8015ade:	b084      	sub	sp, #16
 8015ae0:	af00      	add	r7, sp, #0
 8015ae2:	6078      	str	r0, [r7, #4]
 8015ae4:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015ae6:	2004      	movs	r0, #4
 8015ae8:	f7f7 f848 	bl	800cb7c <memp_malloc>
 8015aec:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8015aee:	68fb      	ldr	r3, [r7, #12]
 8015af0:	2b00      	cmp	r3, #0
 8015af2:	d110      	bne.n	8015b16 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8015af4:	6839      	ldr	r1, [r7, #0]
 8015af6:	6878      	ldr	r0, [r7, #4]
 8015af8:	f7ff ff8e 	bl	8015a18 <ip_reass_remove_oldest_datagram>
 8015afc:	4602      	mov	r2, r0
 8015afe:	683b      	ldr	r3, [r7, #0]
 8015b00:	4293      	cmp	r3, r2
 8015b02:	dc03      	bgt.n	8015b0c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015b04:	2004      	movs	r0, #4
 8015b06:	f7f7 f839 	bl	800cb7c <memp_malloc>
 8015b0a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8015b0c:	68fb      	ldr	r3, [r7, #12]
 8015b0e:	2b00      	cmp	r3, #0
 8015b10:	d101      	bne.n	8015b16 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8015b12:	2300      	movs	r3, #0
 8015b14:	e016      	b.n	8015b44 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8015b16:	2220      	movs	r2, #32
 8015b18:	2100      	movs	r1, #0
 8015b1a:	68f8      	ldr	r0, [r7, #12]
 8015b1c:	f001 fdff 	bl	801771e <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8015b20:	68fb      	ldr	r3, [r7, #12]
 8015b22:	220f      	movs	r2, #15
 8015b24:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8015b26:	4b09      	ldr	r3, [pc, #36]	@ (8015b4c <ip_reass_enqueue_new_datagram+0x70>)
 8015b28:	681a      	ldr	r2, [r3, #0]
 8015b2a:	68fb      	ldr	r3, [r7, #12]
 8015b2c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8015b2e:	4a07      	ldr	r2, [pc, #28]	@ (8015b4c <ip_reass_enqueue_new_datagram+0x70>)
 8015b30:	68fb      	ldr	r3, [r7, #12]
 8015b32:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8015b34:	68fb      	ldr	r3, [r7, #12]
 8015b36:	3308      	adds	r3, #8
 8015b38:	2214      	movs	r2, #20
 8015b3a:	6879      	ldr	r1, [r7, #4]
 8015b3c:	4618      	mov	r0, r3
 8015b3e:	f001 fea4 	bl	801788a <memcpy>
  return ipr;
 8015b42:	68fb      	ldr	r3, [r7, #12]
}
 8015b44:	4618      	mov	r0, r3
 8015b46:	3710      	adds	r7, #16
 8015b48:	46bd      	mov	sp, r7
 8015b4a:	bd80      	pop	{r7, pc}
 8015b4c:	2001530c 	.word	0x2001530c

08015b50 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015b50:	b580      	push	{r7, lr}
 8015b52:	b082      	sub	sp, #8
 8015b54:	af00      	add	r7, sp, #0
 8015b56:	6078      	str	r0, [r7, #4]
 8015b58:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8015b5a:	4b10      	ldr	r3, [pc, #64]	@ (8015b9c <ip_reass_dequeue_datagram+0x4c>)
 8015b5c:	681b      	ldr	r3, [r3, #0]
 8015b5e:	687a      	ldr	r2, [r7, #4]
 8015b60:	429a      	cmp	r2, r3
 8015b62:	d104      	bne.n	8015b6e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8015b64:	687b      	ldr	r3, [r7, #4]
 8015b66:	681b      	ldr	r3, [r3, #0]
 8015b68:	4a0c      	ldr	r2, [pc, #48]	@ (8015b9c <ip_reass_dequeue_datagram+0x4c>)
 8015b6a:	6013      	str	r3, [r2, #0]
 8015b6c:	e00d      	b.n	8015b8a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8015b6e:	683b      	ldr	r3, [r7, #0]
 8015b70:	2b00      	cmp	r3, #0
 8015b72:	d106      	bne.n	8015b82 <ip_reass_dequeue_datagram+0x32>
 8015b74:	4b0a      	ldr	r3, [pc, #40]	@ (8015ba0 <ip_reass_dequeue_datagram+0x50>)
 8015b76:	f240 1245 	movw	r2, #325	@ 0x145
 8015b7a:	490a      	ldr	r1, [pc, #40]	@ (8015ba4 <ip_reass_dequeue_datagram+0x54>)
 8015b7c:	480a      	ldr	r0, [pc, #40]	@ (8015ba8 <ip_reass_dequeue_datagram+0x58>)
 8015b7e:	f001 fd2d 	bl	80175dc <iprintf>
    prev->next = ipr->next;
 8015b82:	687b      	ldr	r3, [r7, #4]
 8015b84:	681a      	ldr	r2, [r3, #0]
 8015b86:	683b      	ldr	r3, [r7, #0]
 8015b88:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8015b8a:	6879      	ldr	r1, [r7, #4]
 8015b8c:	2004      	movs	r0, #4
 8015b8e:	f7f7 f865 	bl	800cc5c <memp_free>
}
 8015b92:	bf00      	nop
 8015b94:	3708      	adds	r7, #8
 8015b96:	46bd      	mov	sp, r7
 8015b98:	bd80      	pop	{r7, pc}
 8015b9a:	bf00      	nop
 8015b9c:	2001530c 	.word	0x2001530c
 8015ba0:	08022a2c 	.word	0x08022a2c
 8015ba4:	08022af4 	.word	0x08022af4
 8015ba8:	08022a74 	.word	0x08022a74

08015bac <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8015bac:	b580      	push	{r7, lr}
 8015bae:	b08c      	sub	sp, #48	@ 0x30
 8015bb0:	af00      	add	r7, sp, #0
 8015bb2:	60f8      	str	r0, [r7, #12]
 8015bb4:	60b9      	str	r1, [r7, #8]
 8015bb6:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8015bb8:	2300      	movs	r3, #0
 8015bba:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8015bbc:	2301      	movs	r3, #1
 8015bbe:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8015bc0:	68bb      	ldr	r3, [r7, #8]
 8015bc2:	685b      	ldr	r3, [r3, #4]
 8015bc4:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8015bc6:	69fb      	ldr	r3, [r7, #28]
 8015bc8:	885b      	ldrh	r3, [r3, #2]
 8015bca:	b29b      	uxth	r3, r3
 8015bcc:	4618      	mov	r0, r3
 8015bce:	f7f6 f893 	bl	800bcf8 <lwip_htons>
 8015bd2:	4603      	mov	r3, r0
 8015bd4:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8015bd6:	69fb      	ldr	r3, [r7, #28]
 8015bd8:	781b      	ldrb	r3, [r3, #0]
 8015bda:	f003 030f 	and.w	r3, r3, #15
 8015bde:	b2db      	uxtb	r3, r3
 8015be0:	009b      	lsls	r3, r3, #2
 8015be2:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8015be4:	7e7b      	ldrb	r3, [r7, #25]
 8015be6:	b29b      	uxth	r3, r3
 8015be8:	8b7a      	ldrh	r2, [r7, #26]
 8015bea:	429a      	cmp	r2, r3
 8015bec:	d202      	bcs.n	8015bf4 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015bee:	f04f 33ff 	mov.w	r3, #4294967295
 8015bf2:	e135      	b.n	8015e60 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8015bf4:	7e7b      	ldrb	r3, [r7, #25]
 8015bf6:	b29b      	uxth	r3, r3
 8015bf8:	8b7a      	ldrh	r2, [r7, #26]
 8015bfa:	1ad3      	subs	r3, r2, r3
 8015bfc:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8015bfe:	69fb      	ldr	r3, [r7, #28]
 8015c00:	88db      	ldrh	r3, [r3, #6]
 8015c02:	b29b      	uxth	r3, r3
 8015c04:	4618      	mov	r0, r3
 8015c06:	f7f6 f877 	bl	800bcf8 <lwip_htons>
 8015c0a:	4603      	mov	r3, r0
 8015c0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015c10:	b29b      	uxth	r3, r3
 8015c12:	00db      	lsls	r3, r3, #3
 8015c14:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8015c16:	68bb      	ldr	r3, [r7, #8]
 8015c18:	685b      	ldr	r3, [r3, #4]
 8015c1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 8015c1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015c1e:	2200      	movs	r2, #0
 8015c20:	701a      	strb	r2, [r3, #0]
 8015c22:	2200      	movs	r2, #0
 8015c24:	705a      	strb	r2, [r3, #1]
 8015c26:	2200      	movs	r2, #0
 8015c28:	709a      	strb	r2, [r3, #2]
 8015c2a:	2200      	movs	r2, #0
 8015c2c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8015c2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015c30:	8afa      	ldrh	r2, [r7, #22]
 8015c32:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8015c34:	8afa      	ldrh	r2, [r7, #22]
 8015c36:	8b7b      	ldrh	r3, [r7, #26]
 8015c38:	4413      	add	r3, r2
 8015c3a:	b29a      	uxth	r2, r3
 8015c3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015c3e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8015c40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015c42:	88db      	ldrh	r3, [r3, #6]
 8015c44:	b29b      	uxth	r3, r3
 8015c46:	8afa      	ldrh	r2, [r7, #22]
 8015c48:	429a      	cmp	r2, r3
 8015c4a:	d902      	bls.n	8015c52 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015c4c:	f04f 33ff 	mov.w	r3, #4294967295
 8015c50:	e106      	b.n	8015e60 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8015c52:	68fb      	ldr	r3, [r7, #12]
 8015c54:	685b      	ldr	r3, [r3, #4]
 8015c56:	627b      	str	r3, [r7, #36]	@ 0x24
 8015c58:	e068      	b.n	8015d2c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8015c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015c5c:	685b      	ldr	r3, [r3, #4]
 8015c5e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8015c60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015c62:	889b      	ldrh	r3, [r3, #4]
 8015c64:	b29a      	uxth	r2, r3
 8015c66:	693b      	ldr	r3, [r7, #16]
 8015c68:	889b      	ldrh	r3, [r3, #4]
 8015c6a:	b29b      	uxth	r3, r3
 8015c6c:	429a      	cmp	r2, r3
 8015c6e:	d235      	bcs.n	8015cdc <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8015c70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015c72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015c74:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8015c76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015c78:	2b00      	cmp	r3, #0
 8015c7a:	d020      	beq.n	8015cbe <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8015c7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015c7e:	889b      	ldrh	r3, [r3, #4]
 8015c80:	b29a      	uxth	r2, r3
 8015c82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015c84:	88db      	ldrh	r3, [r3, #6]
 8015c86:	b29b      	uxth	r3, r3
 8015c88:	429a      	cmp	r2, r3
 8015c8a:	d307      	bcc.n	8015c9c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8015c8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015c8e:	88db      	ldrh	r3, [r3, #6]
 8015c90:	b29a      	uxth	r2, r3
 8015c92:	693b      	ldr	r3, [r7, #16]
 8015c94:	889b      	ldrh	r3, [r3, #4]
 8015c96:	b29b      	uxth	r3, r3
 8015c98:	429a      	cmp	r2, r3
 8015c9a:	d902      	bls.n	8015ca2 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015c9c:	f04f 33ff 	mov.w	r3, #4294967295
 8015ca0:	e0de      	b.n	8015e60 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8015ca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015ca4:	68ba      	ldr	r2, [r7, #8]
 8015ca6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8015ca8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015caa:	88db      	ldrh	r3, [r3, #6]
 8015cac:	b29a      	uxth	r2, r3
 8015cae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015cb0:	889b      	ldrh	r3, [r3, #4]
 8015cb2:	b29b      	uxth	r3, r3
 8015cb4:	429a      	cmp	r2, r3
 8015cb6:	d03d      	beq.n	8015d34 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8015cb8:	2300      	movs	r3, #0
 8015cba:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8015cbc:	e03a      	b.n	8015d34 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8015cbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015cc0:	88db      	ldrh	r3, [r3, #6]
 8015cc2:	b29a      	uxth	r2, r3
 8015cc4:	693b      	ldr	r3, [r7, #16]
 8015cc6:	889b      	ldrh	r3, [r3, #4]
 8015cc8:	b29b      	uxth	r3, r3
 8015cca:	429a      	cmp	r2, r3
 8015ccc:	d902      	bls.n	8015cd4 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015cce:	f04f 33ff 	mov.w	r3, #4294967295
 8015cd2:	e0c5      	b.n	8015e60 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8015cd4:	68fb      	ldr	r3, [r7, #12]
 8015cd6:	68ba      	ldr	r2, [r7, #8]
 8015cd8:	605a      	str	r2, [r3, #4]
      break;
 8015cda:	e02b      	b.n	8015d34 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8015cdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015cde:	889b      	ldrh	r3, [r3, #4]
 8015ce0:	b29a      	uxth	r2, r3
 8015ce2:	693b      	ldr	r3, [r7, #16]
 8015ce4:	889b      	ldrh	r3, [r3, #4]
 8015ce6:	b29b      	uxth	r3, r3
 8015ce8:	429a      	cmp	r2, r3
 8015cea:	d102      	bne.n	8015cf2 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015cec:	f04f 33ff 	mov.w	r3, #4294967295
 8015cf0:	e0b6      	b.n	8015e60 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8015cf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015cf4:	889b      	ldrh	r3, [r3, #4]
 8015cf6:	b29a      	uxth	r2, r3
 8015cf8:	693b      	ldr	r3, [r7, #16]
 8015cfa:	88db      	ldrh	r3, [r3, #6]
 8015cfc:	b29b      	uxth	r3, r3
 8015cfe:	429a      	cmp	r2, r3
 8015d00:	d202      	bcs.n	8015d08 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015d02:	f04f 33ff 	mov.w	r3, #4294967295
 8015d06:	e0ab      	b.n	8015e60 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8015d08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015d0a:	2b00      	cmp	r3, #0
 8015d0c:	d009      	beq.n	8015d22 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8015d0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015d10:	88db      	ldrh	r3, [r3, #6]
 8015d12:	b29a      	uxth	r2, r3
 8015d14:	693b      	ldr	r3, [r7, #16]
 8015d16:	889b      	ldrh	r3, [r3, #4]
 8015d18:	b29b      	uxth	r3, r3
 8015d1a:	429a      	cmp	r2, r3
 8015d1c:	d001      	beq.n	8015d22 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8015d1e:	2300      	movs	r3, #0
 8015d20:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8015d22:	693b      	ldr	r3, [r7, #16]
 8015d24:	681b      	ldr	r3, [r3, #0]
 8015d26:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 8015d28:	693b      	ldr	r3, [r7, #16]
 8015d2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 8015d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d2e:	2b00      	cmp	r3, #0
 8015d30:	d193      	bne.n	8015c5a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8015d32:	e000      	b.n	8015d36 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8015d34:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8015d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d38:	2b00      	cmp	r3, #0
 8015d3a:	d12d      	bne.n	8015d98 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8015d3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015d3e:	2b00      	cmp	r3, #0
 8015d40:	d01c      	beq.n	8015d7c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8015d42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015d44:	88db      	ldrh	r3, [r3, #6]
 8015d46:	b29a      	uxth	r2, r3
 8015d48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015d4a:	889b      	ldrh	r3, [r3, #4]
 8015d4c:	b29b      	uxth	r3, r3
 8015d4e:	429a      	cmp	r2, r3
 8015d50:	d906      	bls.n	8015d60 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8015d52:	4b45      	ldr	r3, [pc, #276]	@ (8015e68 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015d54:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 8015d58:	4944      	ldr	r1, [pc, #272]	@ (8015e6c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8015d5a:	4845      	ldr	r0, [pc, #276]	@ (8015e70 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015d5c:	f001 fc3e 	bl	80175dc <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8015d60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015d62:	68ba      	ldr	r2, [r7, #8]
 8015d64:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8015d66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015d68:	88db      	ldrh	r3, [r3, #6]
 8015d6a:	b29a      	uxth	r2, r3
 8015d6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015d6e:	889b      	ldrh	r3, [r3, #4]
 8015d70:	b29b      	uxth	r3, r3
 8015d72:	429a      	cmp	r2, r3
 8015d74:	d010      	beq.n	8015d98 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8015d76:	2300      	movs	r3, #0
 8015d78:	623b      	str	r3, [r7, #32]
 8015d7a:	e00d      	b.n	8015d98 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8015d7c:	68fb      	ldr	r3, [r7, #12]
 8015d7e:	685b      	ldr	r3, [r3, #4]
 8015d80:	2b00      	cmp	r3, #0
 8015d82:	d006      	beq.n	8015d92 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8015d84:	4b38      	ldr	r3, [pc, #224]	@ (8015e68 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015d86:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 8015d8a:	493a      	ldr	r1, [pc, #232]	@ (8015e74 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8015d8c:	4838      	ldr	r0, [pc, #224]	@ (8015e70 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015d8e:	f001 fc25 	bl	80175dc <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8015d92:	68fb      	ldr	r3, [r7, #12]
 8015d94:	68ba      	ldr	r2, [r7, #8]
 8015d96:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8015d98:	687b      	ldr	r3, [r7, #4]
 8015d9a:	2b00      	cmp	r3, #0
 8015d9c:	d105      	bne.n	8015daa <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8015d9e:	68fb      	ldr	r3, [r7, #12]
 8015da0:	7f9b      	ldrb	r3, [r3, #30]
 8015da2:	f003 0301 	and.w	r3, r3, #1
 8015da6:	2b00      	cmp	r3, #0
 8015da8:	d059      	beq.n	8015e5e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8015daa:	6a3b      	ldr	r3, [r7, #32]
 8015dac:	2b00      	cmp	r3, #0
 8015dae:	d04f      	beq.n	8015e50 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8015db0:	68fb      	ldr	r3, [r7, #12]
 8015db2:	685b      	ldr	r3, [r3, #4]
 8015db4:	2b00      	cmp	r3, #0
 8015db6:	d006      	beq.n	8015dc6 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8015db8:	68fb      	ldr	r3, [r7, #12]
 8015dba:	685b      	ldr	r3, [r3, #4]
 8015dbc:	685b      	ldr	r3, [r3, #4]
 8015dbe:	889b      	ldrh	r3, [r3, #4]
 8015dc0:	b29b      	uxth	r3, r3
 8015dc2:	2b00      	cmp	r3, #0
 8015dc4:	d002      	beq.n	8015dcc <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8015dc6:	2300      	movs	r3, #0
 8015dc8:	623b      	str	r3, [r7, #32]
 8015dca:	e041      	b.n	8015e50 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8015dcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015dce:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 8015dd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015dd2:	681b      	ldr	r3, [r3, #0]
 8015dd4:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8015dd6:	e012      	b.n	8015dfe <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8015dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015dda:	685b      	ldr	r3, [r3, #4]
 8015ddc:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 8015dde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015de0:	88db      	ldrh	r3, [r3, #6]
 8015de2:	b29a      	uxth	r2, r3
 8015de4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015de6:	889b      	ldrh	r3, [r3, #4]
 8015de8:	b29b      	uxth	r3, r3
 8015dea:	429a      	cmp	r2, r3
 8015dec:	d002      	beq.n	8015df4 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8015dee:	2300      	movs	r3, #0
 8015df0:	623b      	str	r3, [r7, #32]
            break;
 8015df2:	e007      	b.n	8015e04 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8015df4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015df6:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8015df8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015dfa:	681b      	ldr	r3, [r3, #0]
 8015dfc:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8015dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015e00:	2b00      	cmp	r3, #0
 8015e02:	d1e9      	bne.n	8015dd8 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8015e04:	6a3b      	ldr	r3, [r7, #32]
 8015e06:	2b00      	cmp	r3, #0
 8015e08:	d022      	beq.n	8015e50 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8015e0a:	68fb      	ldr	r3, [r7, #12]
 8015e0c:	685b      	ldr	r3, [r3, #4]
 8015e0e:	2b00      	cmp	r3, #0
 8015e10:	d106      	bne.n	8015e20 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8015e12:	4b15      	ldr	r3, [pc, #84]	@ (8015e68 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015e14:	f240 12df 	movw	r2, #479	@ 0x1df
 8015e18:	4917      	ldr	r1, [pc, #92]	@ (8015e78 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8015e1a:	4815      	ldr	r0, [pc, #84]	@ (8015e70 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015e1c:	f001 fbde 	bl	80175dc <iprintf>
          LWIP_ASSERT("sanity check",
 8015e20:	68fb      	ldr	r3, [r7, #12]
 8015e22:	685b      	ldr	r3, [r3, #4]
 8015e24:	685b      	ldr	r3, [r3, #4]
 8015e26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015e28:	429a      	cmp	r2, r3
 8015e2a:	d106      	bne.n	8015e3a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8015e2c:	4b0e      	ldr	r3, [pc, #56]	@ (8015e68 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015e2e:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8015e32:	4911      	ldr	r1, [pc, #68]	@ (8015e78 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8015e34:	480e      	ldr	r0, [pc, #56]	@ (8015e70 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015e36:	f001 fbd1 	bl	80175dc <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8015e3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e3c:	681b      	ldr	r3, [r3, #0]
 8015e3e:	2b00      	cmp	r3, #0
 8015e40:	d006      	beq.n	8015e50 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8015e42:	4b09      	ldr	r3, [pc, #36]	@ (8015e68 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015e44:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8015e48:	490c      	ldr	r1, [pc, #48]	@ (8015e7c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8015e4a:	4809      	ldr	r0, [pc, #36]	@ (8015e70 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015e4c:	f001 fbc6 	bl	80175dc <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8015e50:	6a3b      	ldr	r3, [r7, #32]
 8015e52:	2b00      	cmp	r3, #0
 8015e54:	bf14      	ite	ne
 8015e56:	2301      	movne	r3, #1
 8015e58:	2300      	moveq	r3, #0
 8015e5a:	b2db      	uxtb	r3, r3
 8015e5c:	e000      	b.n	8015e60 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8015e5e:	2300      	movs	r3, #0
}
 8015e60:	4618      	mov	r0, r3
 8015e62:	3730      	adds	r7, #48	@ 0x30
 8015e64:	46bd      	mov	sp, r7
 8015e66:	bd80      	pop	{r7, pc}
 8015e68:	08022a2c 	.word	0x08022a2c
 8015e6c:	08022b10 	.word	0x08022b10
 8015e70:	08022a74 	.word	0x08022a74
 8015e74:	08022b30 	.word	0x08022b30
 8015e78:	08022b68 	.word	0x08022b68
 8015e7c:	08022b78 	.word	0x08022b78

08015e80 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8015e80:	b580      	push	{r7, lr}
 8015e82:	b08e      	sub	sp, #56	@ 0x38
 8015e84:	af00      	add	r7, sp, #0
 8015e86:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8015e88:	687b      	ldr	r3, [r7, #4]
 8015e8a:	685b      	ldr	r3, [r3, #4]
 8015e8c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8015e8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015e90:	781b      	ldrb	r3, [r3, #0]
 8015e92:	f003 030f 	and.w	r3, r3, #15
 8015e96:	b2db      	uxtb	r3, r3
 8015e98:	009b      	lsls	r3, r3, #2
 8015e9a:	b2db      	uxtb	r3, r3
 8015e9c:	2b14      	cmp	r3, #20
 8015e9e:	f040 8171 	bne.w	8016184 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8015ea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015ea4:	88db      	ldrh	r3, [r3, #6]
 8015ea6:	b29b      	uxth	r3, r3
 8015ea8:	4618      	mov	r0, r3
 8015eaa:	f7f5 ff25 	bl	800bcf8 <lwip_htons>
 8015eae:	4603      	mov	r3, r0
 8015eb0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015eb4:	b29b      	uxth	r3, r3
 8015eb6:	00db      	lsls	r3, r3, #3
 8015eb8:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8015eba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015ebc:	885b      	ldrh	r3, [r3, #2]
 8015ebe:	b29b      	uxth	r3, r3
 8015ec0:	4618      	mov	r0, r3
 8015ec2:	f7f5 ff19 	bl	800bcf8 <lwip_htons>
 8015ec6:	4603      	mov	r3, r0
 8015ec8:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8015eca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015ecc:	781b      	ldrb	r3, [r3, #0]
 8015ece:	f003 030f 	and.w	r3, r3, #15
 8015ed2:	b2db      	uxtb	r3, r3
 8015ed4:	009b      	lsls	r3, r3, #2
 8015ed6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 8015eda:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8015ede:	b29b      	uxth	r3, r3
 8015ee0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8015ee2:	429a      	cmp	r2, r3
 8015ee4:	f0c0 8150 	bcc.w	8016188 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8015ee8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8015eec:	b29b      	uxth	r3, r3
 8015eee:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8015ef0:	1ad3      	subs	r3, r2, r3
 8015ef2:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8015ef4:	6878      	ldr	r0, [r7, #4]
 8015ef6:	f7f7 fdaf 	bl	800da58 <pbuf_clen>
 8015efa:	4603      	mov	r3, r0
 8015efc:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8015efe:	4b8c      	ldr	r3, [pc, #560]	@ (8016130 <ip4_reass+0x2b0>)
 8015f00:	881b      	ldrh	r3, [r3, #0]
 8015f02:	461a      	mov	r2, r3
 8015f04:	8c3b      	ldrh	r3, [r7, #32]
 8015f06:	4413      	add	r3, r2
 8015f08:	2b0a      	cmp	r3, #10
 8015f0a:	dd10      	ble.n	8015f2e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8015f0c:	8c3b      	ldrh	r3, [r7, #32]
 8015f0e:	4619      	mov	r1, r3
 8015f10:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015f12:	f7ff fd81 	bl	8015a18 <ip_reass_remove_oldest_datagram>
 8015f16:	4603      	mov	r3, r0
 8015f18:	2b00      	cmp	r3, #0
 8015f1a:	f000 8137 	beq.w	801618c <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8015f1e:	4b84      	ldr	r3, [pc, #528]	@ (8016130 <ip4_reass+0x2b0>)
 8015f20:	881b      	ldrh	r3, [r3, #0]
 8015f22:	461a      	mov	r2, r3
 8015f24:	8c3b      	ldrh	r3, [r7, #32]
 8015f26:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8015f28:	2b0a      	cmp	r3, #10
 8015f2a:	f300 812f 	bgt.w	801618c <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8015f2e:	4b81      	ldr	r3, [pc, #516]	@ (8016134 <ip4_reass+0x2b4>)
 8015f30:	681b      	ldr	r3, [r3, #0]
 8015f32:	633b      	str	r3, [r7, #48]	@ 0x30
 8015f34:	e015      	b.n	8015f62 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8015f36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015f38:	695a      	ldr	r2, [r3, #20]
 8015f3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015f3c:	68db      	ldr	r3, [r3, #12]
 8015f3e:	429a      	cmp	r2, r3
 8015f40:	d10c      	bne.n	8015f5c <ip4_reass+0xdc>
 8015f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015f44:	699a      	ldr	r2, [r3, #24]
 8015f46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015f48:	691b      	ldr	r3, [r3, #16]
 8015f4a:	429a      	cmp	r2, r3
 8015f4c:	d106      	bne.n	8015f5c <ip4_reass+0xdc>
 8015f4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015f50:	899a      	ldrh	r2, [r3, #12]
 8015f52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015f54:	889b      	ldrh	r3, [r3, #4]
 8015f56:	b29b      	uxth	r3, r3
 8015f58:	429a      	cmp	r2, r3
 8015f5a:	d006      	beq.n	8015f6a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8015f5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015f5e:	681b      	ldr	r3, [r3, #0]
 8015f60:	633b      	str	r3, [r7, #48]	@ 0x30
 8015f62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015f64:	2b00      	cmp	r3, #0
 8015f66:	d1e6      	bne.n	8015f36 <ip4_reass+0xb6>
 8015f68:	e000      	b.n	8015f6c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8015f6a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8015f6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015f6e:	2b00      	cmp	r3, #0
 8015f70:	d109      	bne.n	8015f86 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8015f72:	8c3b      	ldrh	r3, [r7, #32]
 8015f74:	4619      	mov	r1, r3
 8015f76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015f78:	f7ff fdb0 	bl	8015adc <ip_reass_enqueue_new_datagram>
 8015f7c:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8015f7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015f80:	2b00      	cmp	r3, #0
 8015f82:	d11c      	bne.n	8015fbe <ip4_reass+0x13e>
      goto nullreturn;
 8015f84:	e105      	b.n	8016192 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015f86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015f88:	88db      	ldrh	r3, [r3, #6]
 8015f8a:	b29b      	uxth	r3, r3
 8015f8c:	4618      	mov	r0, r3
 8015f8e:	f7f5 feb3 	bl	800bcf8 <lwip_htons>
 8015f92:	4603      	mov	r3, r0
 8015f94:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015f98:	2b00      	cmp	r3, #0
 8015f9a:	d110      	bne.n	8015fbe <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8015f9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015f9e:	89db      	ldrh	r3, [r3, #14]
 8015fa0:	4618      	mov	r0, r3
 8015fa2:	f7f5 fea9 	bl	800bcf8 <lwip_htons>
 8015fa6:	4603      	mov	r3, r0
 8015fa8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015fac:	2b00      	cmp	r3, #0
 8015fae:	d006      	beq.n	8015fbe <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8015fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015fb2:	3308      	adds	r3, #8
 8015fb4:	2214      	movs	r2, #20
 8015fb6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8015fb8:	4618      	mov	r0, r3
 8015fba:	f001 fc66 	bl	801788a <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8015fbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015fc0:	88db      	ldrh	r3, [r3, #6]
 8015fc2:	b29b      	uxth	r3, r3
 8015fc4:	f003 0320 	and.w	r3, r3, #32
 8015fc8:	2b00      	cmp	r3, #0
 8015fca:	bf0c      	ite	eq
 8015fcc:	2301      	moveq	r3, #1
 8015fce:	2300      	movne	r3, #0
 8015fd0:	b2db      	uxtb	r3, r3
 8015fd2:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8015fd4:	69fb      	ldr	r3, [r7, #28]
 8015fd6:	2b00      	cmp	r3, #0
 8015fd8:	d00e      	beq.n	8015ff8 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8015fda:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8015fdc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8015fde:	4413      	add	r3, r2
 8015fe0:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8015fe2:	8b7a      	ldrh	r2, [r7, #26]
 8015fe4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8015fe6:	429a      	cmp	r2, r3
 8015fe8:	f0c0 80a0 	bcc.w	801612c <ip4_reass+0x2ac>
 8015fec:	8b7b      	ldrh	r3, [r7, #26]
 8015fee:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 8015ff2:	4293      	cmp	r3, r2
 8015ff4:	f200 809a 	bhi.w	801612c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8015ff8:	69fa      	ldr	r2, [r7, #28]
 8015ffa:	6879      	ldr	r1, [r7, #4]
 8015ffc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015ffe:	f7ff fdd5 	bl	8015bac <ip_reass_chain_frag_into_datagram_and_validate>
 8016002:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8016004:	697b      	ldr	r3, [r7, #20]
 8016006:	f1b3 3fff 	cmp.w	r3, #4294967295
 801600a:	f000 809b 	beq.w	8016144 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801600e:	4b48      	ldr	r3, [pc, #288]	@ (8016130 <ip4_reass+0x2b0>)
 8016010:	881a      	ldrh	r2, [r3, #0]
 8016012:	8c3b      	ldrh	r3, [r7, #32]
 8016014:	4413      	add	r3, r2
 8016016:	b29a      	uxth	r2, r3
 8016018:	4b45      	ldr	r3, [pc, #276]	@ (8016130 <ip4_reass+0x2b0>)
 801601a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801601c:	69fb      	ldr	r3, [r7, #28]
 801601e:	2b00      	cmp	r3, #0
 8016020:	d00d      	beq.n	801603e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8016022:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8016024:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8016026:	4413      	add	r3, r2
 8016028:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801602a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801602c:	8a7a      	ldrh	r2, [r7, #18]
 801602e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8016030:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016032:	7f9b      	ldrb	r3, [r3, #30]
 8016034:	f043 0301 	orr.w	r3, r3, #1
 8016038:	b2da      	uxtb	r2, r3
 801603a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801603c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801603e:	697b      	ldr	r3, [r7, #20]
 8016040:	2b01      	cmp	r3, #1
 8016042:	d171      	bne.n	8016128 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8016044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016046:	8b9b      	ldrh	r3, [r3, #28]
 8016048:	3314      	adds	r3, #20
 801604a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801604c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801604e:	685b      	ldr	r3, [r3, #4]
 8016050:	685b      	ldr	r3, [r3, #4]
 8016052:	681b      	ldr	r3, [r3, #0]
 8016054:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8016056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016058:	685b      	ldr	r3, [r3, #4]
 801605a:	685b      	ldr	r3, [r3, #4]
 801605c:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801605e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016060:	3308      	adds	r3, #8
 8016062:	2214      	movs	r2, #20
 8016064:	4619      	mov	r1, r3
 8016066:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016068:	f001 fc0f 	bl	801788a <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801606c:	8a3b      	ldrh	r3, [r7, #16]
 801606e:	4618      	mov	r0, r3
 8016070:	f7f5 fe42 	bl	800bcf8 <lwip_htons>
 8016074:	4603      	mov	r3, r0
 8016076:	461a      	mov	r2, r3
 8016078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801607a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801607c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801607e:	2200      	movs	r2, #0
 8016080:	719a      	strb	r2, [r3, #6]
 8016082:	2200      	movs	r2, #0
 8016084:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8016086:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016088:	2200      	movs	r2, #0
 801608a:	729a      	strb	r2, [r3, #10]
 801608c:	2200      	movs	r2, #0
 801608e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8016090:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016092:	685b      	ldr	r3, [r3, #4]
 8016094:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8016096:	e00d      	b.n	80160b4 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8016098:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801609a:	685b      	ldr	r3, [r3, #4]
 801609c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801609e:	2114      	movs	r1, #20
 80160a0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80160a2:	f7f7 fbcb 	bl	800d83c <pbuf_remove_header>
      pbuf_cat(p, r);
 80160a6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80160a8:	6878      	ldr	r0, [r7, #4]
 80160aa:	f7f7 fd0f 	bl	800dacc <pbuf_cat>
      r = iprh->next_pbuf;
 80160ae:	68fb      	ldr	r3, [r7, #12]
 80160b0:	681b      	ldr	r3, [r3, #0]
 80160b2:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 80160b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80160b6:	2b00      	cmp	r3, #0
 80160b8:	d1ee      	bne.n	8016098 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80160ba:	4b1e      	ldr	r3, [pc, #120]	@ (8016134 <ip4_reass+0x2b4>)
 80160bc:	681b      	ldr	r3, [r3, #0]
 80160be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80160c0:	429a      	cmp	r2, r3
 80160c2:	d102      	bne.n	80160ca <ip4_reass+0x24a>
      ipr_prev = NULL;
 80160c4:	2300      	movs	r3, #0
 80160c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80160c8:	e010      	b.n	80160ec <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80160ca:	4b1a      	ldr	r3, [pc, #104]	@ (8016134 <ip4_reass+0x2b4>)
 80160cc:	681b      	ldr	r3, [r3, #0]
 80160ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80160d0:	e007      	b.n	80160e2 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80160d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80160d4:	681b      	ldr	r3, [r3, #0]
 80160d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80160d8:	429a      	cmp	r2, r3
 80160da:	d006      	beq.n	80160ea <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80160dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80160de:	681b      	ldr	r3, [r3, #0]
 80160e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80160e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80160e4:	2b00      	cmp	r3, #0
 80160e6:	d1f4      	bne.n	80160d2 <ip4_reass+0x252>
 80160e8:	e000      	b.n	80160ec <ip4_reass+0x26c>
          break;
 80160ea:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80160ec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80160ee:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80160f0:	f7ff fd2e 	bl	8015b50 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80160f4:	6878      	ldr	r0, [r7, #4]
 80160f6:	f7f7 fcaf 	bl	800da58 <pbuf_clen>
 80160fa:	4603      	mov	r3, r0
 80160fc:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80160fe:	4b0c      	ldr	r3, [pc, #48]	@ (8016130 <ip4_reass+0x2b0>)
 8016100:	881b      	ldrh	r3, [r3, #0]
 8016102:	8c3a      	ldrh	r2, [r7, #32]
 8016104:	429a      	cmp	r2, r3
 8016106:	d906      	bls.n	8016116 <ip4_reass+0x296>
 8016108:	4b0b      	ldr	r3, [pc, #44]	@ (8016138 <ip4_reass+0x2b8>)
 801610a:	f240 229b 	movw	r2, #667	@ 0x29b
 801610e:	490b      	ldr	r1, [pc, #44]	@ (801613c <ip4_reass+0x2bc>)
 8016110:	480b      	ldr	r0, [pc, #44]	@ (8016140 <ip4_reass+0x2c0>)
 8016112:	f001 fa63 	bl	80175dc <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8016116:	4b06      	ldr	r3, [pc, #24]	@ (8016130 <ip4_reass+0x2b0>)
 8016118:	881a      	ldrh	r2, [r3, #0]
 801611a:	8c3b      	ldrh	r3, [r7, #32]
 801611c:	1ad3      	subs	r3, r2, r3
 801611e:	b29a      	uxth	r2, r3
 8016120:	4b03      	ldr	r3, [pc, #12]	@ (8016130 <ip4_reass+0x2b0>)
 8016122:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8016124:	687b      	ldr	r3, [r7, #4]
 8016126:	e038      	b.n	801619a <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8016128:	2300      	movs	r3, #0
 801612a:	e036      	b.n	801619a <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801612c:	bf00      	nop
 801612e:	e00a      	b.n	8016146 <ip4_reass+0x2c6>
 8016130:	20015310 	.word	0x20015310
 8016134:	2001530c 	.word	0x2001530c
 8016138:	08022a2c 	.word	0x08022a2c
 801613c:	08022b9c 	.word	0x08022b9c
 8016140:	08022a74 	.word	0x08022a74
    goto nullreturn_ipr;
 8016144:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8016146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016148:	2b00      	cmp	r3, #0
 801614a:	d106      	bne.n	801615a <ip4_reass+0x2da>
 801614c:	4b15      	ldr	r3, [pc, #84]	@ (80161a4 <ip4_reass+0x324>)
 801614e:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 8016152:	4915      	ldr	r1, [pc, #84]	@ (80161a8 <ip4_reass+0x328>)
 8016154:	4815      	ldr	r0, [pc, #84]	@ (80161ac <ip4_reass+0x32c>)
 8016156:	f001 fa41 	bl	80175dc <iprintf>
  if (ipr->p == NULL) {
 801615a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801615c:	685b      	ldr	r3, [r3, #4]
 801615e:	2b00      	cmp	r3, #0
 8016160:	d116      	bne.n	8016190 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8016162:	4b13      	ldr	r3, [pc, #76]	@ (80161b0 <ip4_reass+0x330>)
 8016164:	681b      	ldr	r3, [r3, #0]
 8016166:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016168:	429a      	cmp	r2, r3
 801616a:	d006      	beq.n	801617a <ip4_reass+0x2fa>
 801616c:	4b0d      	ldr	r3, [pc, #52]	@ (80161a4 <ip4_reass+0x324>)
 801616e:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8016172:	4910      	ldr	r1, [pc, #64]	@ (80161b4 <ip4_reass+0x334>)
 8016174:	480d      	ldr	r0, [pc, #52]	@ (80161ac <ip4_reass+0x32c>)
 8016176:	f001 fa31 	bl	80175dc <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801617a:	2100      	movs	r1, #0
 801617c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801617e:	f7ff fce7 	bl	8015b50 <ip_reass_dequeue_datagram>
 8016182:	e006      	b.n	8016192 <ip4_reass+0x312>
    goto nullreturn;
 8016184:	bf00      	nop
 8016186:	e004      	b.n	8016192 <ip4_reass+0x312>
    goto nullreturn;
 8016188:	bf00      	nop
 801618a:	e002      	b.n	8016192 <ip4_reass+0x312>
      goto nullreturn;
 801618c:	bf00      	nop
 801618e:	e000      	b.n	8016192 <ip4_reass+0x312>
  }

nullreturn:
 8016190:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8016192:	6878      	ldr	r0, [r7, #4]
 8016194:	f7f7 fbd8 	bl	800d948 <pbuf_free>
  return NULL;
 8016198:	2300      	movs	r3, #0
}
 801619a:	4618      	mov	r0, r3
 801619c:	3738      	adds	r7, #56	@ 0x38
 801619e:	46bd      	mov	sp, r7
 80161a0:	bd80      	pop	{r7, pc}
 80161a2:	bf00      	nop
 80161a4:	08022a2c 	.word	0x08022a2c
 80161a8:	08022bb8 	.word	0x08022bb8
 80161ac:	08022a74 	.word	0x08022a74
 80161b0:	2001530c 	.word	0x2001530c
 80161b4:	08022bc4 	.word	0x08022bc4

080161b8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80161b8:	b580      	push	{r7, lr}
 80161ba:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80161bc:	2005      	movs	r0, #5
 80161be:	f7f6 fcdd 	bl	800cb7c <memp_malloc>
 80161c2:	4603      	mov	r3, r0
}
 80161c4:	4618      	mov	r0, r3
 80161c6:	bd80      	pop	{r7, pc}

080161c8 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80161c8:	b580      	push	{r7, lr}
 80161ca:	b082      	sub	sp, #8
 80161cc:	af00      	add	r7, sp, #0
 80161ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80161d0:	687b      	ldr	r3, [r7, #4]
 80161d2:	2b00      	cmp	r3, #0
 80161d4:	d106      	bne.n	80161e4 <ip_frag_free_pbuf_custom_ref+0x1c>
 80161d6:	4b07      	ldr	r3, [pc, #28]	@ (80161f4 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80161d8:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 80161dc:	4906      	ldr	r1, [pc, #24]	@ (80161f8 <ip_frag_free_pbuf_custom_ref+0x30>)
 80161de:	4807      	ldr	r0, [pc, #28]	@ (80161fc <ip_frag_free_pbuf_custom_ref+0x34>)
 80161e0:	f001 f9fc 	bl	80175dc <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80161e4:	6879      	ldr	r1, [r7, #4]
 80161e6:	2005      	movs	r0, #5
 80161e8:	f7f6 fd38 	bl	800cc5c <memp_free>
}
 80161ec:	bf00      	nop
 80161ee:	3708      	adds	r7, #8
 80161f0:	46bd      	mov	sp, r7
 80161f2:	bd80      	pop	{r7, pc}
 80161f4:	08022a2c 	.word	0x08022a2c
 80161f8:	08022be4 	.word	0x08022be4
 80161fc:	08022a74 	.word	0x08022a74

08016200 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8016200:	b580      	push	{r7, lr}
 8016202:	b084      	sub	sp, #16
 8016204:	af00      	add	r7, sp, #0
 8016206:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8016208:	687b      	ldr	r3, [r7, #4]
 801620a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801620c:	68fb      	ldr	r3, [r7, #12]
 801620e:	2b00      	cmp	r3, #0
 8016210:	d106      	bne.n	8016220 <ipfrag_free_pbuf_custom+0x20>
 8016212:	4b11      	ldr	r3, [pc, #68]	@ (8016258 <ipfrag_free_pbuf_custom+0x58>)
 8016214:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8016218:	4910      	ldr	r1, [pc, #64]	@ (801625c <ipfrag_free_pbuf_custom+0x5c>)
 801621a:	4811      	ldr	r0, [pc, #68]	@ (8016260 <ipfrag_free_pbuf_custom+0x60>)
 801621c:	f001 f9de 	bl	80175dc <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8016220:	68fa      	ldr	r2, [r7, #12]
 8016222:	687b      	ldr	r3, [r7, #4]
 8016224:	429a      	cmp	r2, r3
 8016226:	d006      	beq.n	8016236 <ipfrag_free_pbuf_custom+0x36>
 8016228:	4b0b      	ldr	r3, [pc, #44]	@ (8016258 <ipfrag_free_pbuf_custom+0x58>)
 801622a:	f240 22cf 	movw	r2, #719	@ 0x2cf
 801622e:	490d      	ldr	r1, [pc, #52]	@ (8016264 <ipfrag_free_pbuf_custom+0x64>)
 8016230:	480b      	ldr	r0, [pc, #44]	@ (8016260 <ipfrag_free_pbuf_custom+0x60>)
 8016232:	f001 f9d3 	bl	80175dc <iprintf>
  if (pcr->original != NULL) {
 8016236:	68fb      	ldr	r3, [r7, #12]
 8016238:	695b      	ldr	r3, [r3, #20]
 801623a:	2b00      	cmp	r3, #0
 801623c:	d004      	beq.n	8016248 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801623e:	68fb      	ldr	r3, [r7, #12]
 8016240:	695b      	ldr	r3, [r3, #20]
 8016242:	4618      	mov	r0, r3
 8016244:	f7f7 fb80 	bl	800d948 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8016248:	68f8      	ldr	r0, [r7, #12]
 801624a:	f7ff ffbd 	bl	80161c8 <ip_frag_free_pbuf_custom_ref>
}
 801624e:	bf00      	nop
 8016250:	3710      	adds	r7, #16
 8016252:	46bd      	mov	sp, r7
 8016254:	bd80      	pop	{r7, pc}
 8016256:	bf00      	nop
 8016258:	08022a2c 	.word	0x08022a2c
 801625c:	08022bf0 	.word	0x08022bf0
 8016260:	08022a74 	.word	0x08022a74
 8016264:	08022bfc 	.word	0x08022bfc

08016268 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8016268:	b580      	push	{r7, lr}
 801626a:	b094      	sub	sp, #80	@ 0x50
 801626c:	af02      	add	r7, sp, #8
 801626e:	60f8      	str	r0, [r7, #12]
 8016270:	60b9      	str	r1, [r7, #8]
 8016272:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8016274:	2300      	movs	r3, #0
 8016276:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801627a:	68bb      	ldr	r3, [r7, #8]
 801627c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801627e:	3b14      	subs	r3, #20
 8016280:	2b00      	cmp	r3, #0
 8016282:	da00      	bge.n	8016286 <ip4_frag+0x1e>
 8016284:	3307      	adds	r3, #7
 8016286:	10db      	asrs	r3, r3, #3
 8016288:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801628a:	2314      	movs	r3, #20
 801628c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801628e:	68fb      	ldr	r3, [r7, #12]
 8016290:	685b      	ldr	r3, [r3, #4]
 8016292:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 8016294:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016296:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8016298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801629a:	781b      	ldrb	r3, [r3, #0]
 801629c:	f003 030f 	and.w	r3, r3, #15
 80162a0:	b2db      	uxtb	r3, r3
 80162a2:	009b      	lsls	r3, r3, #2
 80162a4:	b2db      	uxtb	r3, r3
 80162a6:	2b14      	cmp	r3, #20
 80162a8:	d002      	beq.n	80162b0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80162aa:	f06f 0305 	mvn.w	r3, #5
 80162ae:	e110      	b.n	80164d2 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80162b0:	68fb      	ldr	r3, [r7, #12]
 80162b2:	895b      	ldrh	r3, [r3, #10]
 80162b4:	2b13      	cmp	r3, #19
 80162b6:	d809      	bhi.n	80162cc <ip4_frag+0x64>
 80162b8:	4b88      	ldr	r3, [pc, #544]	@ (80164dc <ip4_frag+0x274>)
 80162ba:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 80162be:	4988      	ldr	r1, [pc, #544]	@ (80164e0 <ip4_frag+0x278>)
 80162c0:	4888      	ldr	r0, [pc, #544]	@ (80164e4 <ip4_frag+0x27c>)
 80162c2:	f001 f98b 	bl	80175dc <iprintf>
 80162c6:	f06f 0305 	mvn.w	r3, #5
 80162ca:	e102      	b.n	80164d2 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80162cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80162ce:	88db      	ldrh	r3, [r3, #6]
 80162d0:	b29b      	uxth	r3, r3
 80162d2:	4618      	mov	r0, r3
 80162d4:	f7f5 fd10 	bl	800bcf8 <lwip_htons>
 80162d8:	4603      	mov	r3, r0
 80162da:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 80162dc:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80162de:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80162e2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80162e6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80162e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80162ec:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80162ee:	68fb      	ldr	r3, [r7, #12]
 80162f0:	891b      	ldrh	r3, [r3, #8]
 80162f2:	3b14      	subs	r3, #20
 80162f4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 80162f8:	e0e1      	b.n	80164be <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80162fa:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80162fc:	00db      	lsls	r3, r3, #3
 80162fe:	b29b      	uxth	r3, r3
 8016300:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8016304:	4293      	cmp	r3, r2
 8016306:	bf28      	it	cs
 8016308:	4613      	movcs	r3, r2
 801630a:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801630c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8016310:	2114      	movs	r1, #20
 8016312:	200e      	movs	r0, #14
 8016314:	f7f7 f834 	bl	800d380 <pbuf_alloc>
 8016318:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 801631a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801631c:	2b00      	cmp	r3, #0
 801631e:	f000 80d5 	beq.w	80164cc <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8016322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016324:	895b      	ldrh	r3, [r3, #10]
 8016326:	2b13      	cmp	r3, #19
 8016328:	d806      	bhi.n	8016338 <ip4_frag+0xd0>
 801632a:	4b6c      	ldr	r3, [pc, #432]	@ (80164dc <ip4_frag+0x274>)
 801632c:	f44f 7249 	mov.w	r2, #804	@ 0x324
 8016330:	496d      	ldr	r1, [pc, #436]	@ (80164e8 <ip4_frag+0x280>)
 8016332:	486c      	ldr	r0, [pc, #432]	@ (80164e4 <ip4_frag+0x27c>)
 8016334:	f001 f952 	bl	80175dc <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8016338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801633a:	685b      	ldr	r3, [r3, #4]
 801633c:	2214      	movs	r2, #20
 801633e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8016340:	4618      	mov	r0, r3
 8016342:	f001 faa2 	bl	801788a <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8016346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016348:	685b      	ldr	r3, [r3, #4]
 801634a:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 801634c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801634e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 8016352:	e064      	b.n	801641e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8016354:	68fb      	ldr	r3, [r7, #12]
 8016356:	895a      	ldrh	r2, [r3, #10]
 8016358:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801635a:	1ad3      	subs	r3, r2, r3
 801635c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801635e:	68fb      	ldr	r3, [r7, #12]
 8016360:	895b      	ldrh	r3, [r3, #10]
 8016362:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8016364:	429a      	cmp	r2, r3
 8016366:	d906      	bls.n	8016376 <ip4_frag+0x10e>
 8016368:	4b5c      	ldr	r3, [pc, #368]	@ (80164dc <ip4_frag+0x274>)
 801636a:	f240 322d 	movw	r2, #813	@ 0x32d
 801636e:	495f      	ldr	r1, [pc, #380]	@ (80164ec <ip4_frag+0x284>)
 8016370:	485c      	ldr	r0, [pc, #368]	@ (80164e4 <ip4_frag+0x27c>)
 8016372:	f001 f933 	bl	80175dc <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8016376:	8bfa      	ldrh	r2, [r7, #30]
 8016378:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801637c:	4293      	cmp	r3, r2
 801637e:	bf28      	it	cs
 8016380:	4613      	movcs	r3, r2
 8016382:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8016386:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801638a:	2b00      	cmp	r3, #0
 801638c:	d105      	bne.n	801639a <ip4_frag+0x132>
        poff = 0;
 801638e:	2300      	movs	r3, #0
 8016390:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8016392:	68fb      	ldr	r3, [r7, #12]
 8016394:	681b      	ldr	r3, [r3, #0]
 8016396:	60fb      	str	r3, [r7, #12]
        continue;
 8016398:	e041      	b.n	801641e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801639a:	f7ff ff0d 	bl	80161b8 <ip_frag_alloc_pbuf_custom_ref>
 801639e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80163a0:	69bb      	ldr	r3, [r7, #24]
 80163a2:	2b00      	cmp	r3, #0
 80163a4:	d103      	bne.n	80163ae <ip4_frag+0x146>
        pbuf_free(rambuf);
 80163a6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80163a8:	f7f7 face 	bl	800d948 <pbuf_free>
        goto memerr;
 80163ac:	e08f      	b.n	80164ce <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80163ae:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80163b0:	68fb      	ldr	r3, [r7, #12]
 80163b2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80163b4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80163b6:	4413      	add	r3, r2
 80163b8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 80163bc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80163c0:	9201      	str	r2, [sp, #4]
 80163c2:	9300      	str	r3, [sp, #0]
 80163c4:	4603      	mov	r3, r0
 80163c6:	2241      	movs	r2, #65	@ 0x41
 80163c8:	2000      	movs	r0, #0
 80163ca:	f7f7 f903 	bl	800d5d4 <pbuf_alloced_custom>
 80163ce:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80163d0:	697b      	ldr	r3, [r7, #20]
 80163d2:	2b00      	cmp	r3, #0
 80163d4:	d106      	bne.n	80163e4 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80163d6:	69b8      	ldr	r0, [r7, #24]
 80163d8:	f7ff fef6 	bl	80161c8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80163dc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80163de:	f7f7 fab3 	bl	800d948 <pbuf_free>
        goto memerr;
 80163e2:	e074      	b.n	80164ce <ip4_frag+0x266>
      }
      pbuf_ref(p);
 80163e4:	68f8      	ldr	r0, [r7, #12]
 80163e6:	f7f7 fb4f 	bl	800da88 <pbuf_ref>
      pcr->original = p;
 80163ea:	69bb      	ldr	r3, [r7, #24]
 80163ec:	68fa      	ldr	r2, [r7, #12]
 80163ee:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80163f0:	69bb      	ldr	r3, [r7, #24]
 80163f2:	4a3f      	ldr	r2, [pc, #252]	@ (80164f0 <ip4_frag+0x288>)
 80163f4:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80163f6:	6979      	ldr	r1, [r7, #20]
 80163f8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80163fa:	f7f7 fb67 	bl	800dacc <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80163fe:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8016402:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8016406:	1ad3      	subs	r3, r2, r3
 8016408:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 801640c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8016410:	2b00      	cmp	r3, #0
 8016412:	d004      	beq.n	801641e <ip4_frag+0x1b6>
        poff = 0;
 8016414:	2300      	movs	r3, #0
 8016416:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8016418:	68fb      	ldr	r3, [r7, #12]
 801641a:	681b      	ldr	r3, [r3, #0]
 801641c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801641e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8016422:	2b00      	cmp	r3, #0
 8016424:	d196      	bne.n	8016354 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8016426:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8016428:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801642c:	4413      	add	r3, r2
 801642e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8016430:	68bb      	ldr	r3, [r7, #8]
 8016432:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8016434:	f1a3 0213 	sub.w	r2, r3, #19
 8016438:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801643c:	429a      	cmp	r2, r3
 801643e:	bfcc      	ite	gt
 8016440:	2301      	movgt	r3, #1
 8016442:	2300      	movle	r3, #0
 8016444:	b2db      	uxtb	r3, r3
 8016446:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8016448:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801644c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016450:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 8016452:	6a3b      	ldr	r3, [r7, #32]
 8016454:	2b00      	cmp	r3, #0
 8016456:	d002      	beq.n	801645e <ip4_frag+0x1f6>
 8016458:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801645a:	2b00      	cmp	r3, #0
 801645c:	d003      	beq.n	8016466 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801645e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8016460:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8016464:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8016466:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8016468:	4618      	mov	r0, r3
 801646a:	f7f5 fc45 	bl	800bcf8 <lwip_htons>
 801646e:	4603      	mov	r3, r0
 8016470:	461a      	mov	r2, r3
 8016472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016474:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8016476:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8016478:	3314      	adds	r3, #20
 801647a:	b29b      	uxth	r3, r3
 801647c:	4618      	mov	r0, r3
 801647e:	f7f5 fc3b 	bl	800bcf8 <lwip_htons>
 8016482:	4603      	mov	r3, r0
 8016484:	461a      	mov	r2, r3
 8016486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016488:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801648a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801648c:	2200      	movs	r2, #0
 801648e:	729a      	strb	r2, [r3, #10]
 8016490:	2200      	movs	r2, #0
 8016492:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8016494:	68bb      	ldr	r3, [r7, #8]
 8016496:	695b      	ldr	r3, [r3, #20]
 8016498:	687a      	ldr	r2, [r7, #4]
 801649a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801649c:	68b8      	ldr	r0, [r7, #8]
 801649e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80164a0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80164a2:	f7f7 fa51 	bl	800d948 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80164a6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80164aa:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80164ac:	1ad3      	subs	r3, r2, r3
 80164ae:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 80164b2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 80164b6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80164b8:	4413      	add	r3, r2
 80164ba:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 80164be:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80164c2:	2b00      	cmp	r3, #0
 80164c4:	f47f af19 	bne.w	80162fa <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80164c8:	2300      	movs	r3, #0
 80164ca:	e002      	b.n	80164d2 <ip4_frag+0x26a>
      goto memerr;
 80164cc:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80164ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80164d2:	4618      	mov	r0, r3
 80164d4:	3748      	adds	r7, #72	@ 0x48
 80164d6:	46bd      	mov	sp, r7
 80164d8:	bd80      	pop	{r7, pc}
 80164da:	bf00      	nop
 80164dc:	08022a2c 	.word	0x08022a2c
 80164e0:	08022c08 	.word	0x08022c08
 80164e4:	08022a74 	.word	0x08022a74
 80164e8:	08022c24 	.word	0x08022c24
 80164ec:	08022c44 	.word	0x08022c44
 80164f0:	08016201 	.word	0x08016201

080164f4 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80164f4:	b580      	push	{r7, lr}
 80164f6:	b086      	sub	sp, #24
 80164f8:	af00      	add	r7, sp, #0
 80164fa:	6078      	str	r0, [r7, #4]
 80164fc:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80164fe:	230e      	movs	r3, #14
 8016500:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8016502:	687b      	ldr	r3, [r7, #4]
 8016504:	895b      	ldrh	r3, [r3, #10]
 8016506:	2b0e      	cmp	r3, #14
 8016508:	d96e      	bls.n	80165e8 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801650a:	687b      	ldr	r3, [r7, #4]
 801650c:	7bdb      	ldrb	r3, [r3, #15]
 801650e:	2b00      	cmp	r3, #0
 8016510:	d106      	bne.n	8016520 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8016512:	683b      	ldr	r3, [r7, #0]
 8016514:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8016518:	3301      	adds	r3, #1
 801651a:	b2da      	uxtb	r2, r3
 801651c:	687b      	ldr	r3, [r7, #4]
 801651e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8016520:	687b      	ldr	r3, [r7, #4]
 8016522:	685b      	ldr	r3, [r3, #4]
 8016524:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8016526:	693b      	ldr	r3, [r7, #16]
 8016528:	7b1a      	ldrb	r2, [r3, #12]
 801652a:	7b5b      	ldrb	r3, [r3, #13]
 801652c:	021b      	lsls	r3, r3, #8
 801652e:	4313      	orrs	r3, r2
 8016530:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8016532:	693b      	ldr	r3, [r7, #16]
 8016534:	781b      	ldrb	r3, [r3, #0]
 8016536:	f003 0301 	and.w	r3, r3, #1
 801653a:	2b00      	cmp	r3, #0
 801653c:	d023      	beq.n	8016586 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801653e:	693b      	ldr	r3, [r7, #16]
 8016540:	781b      	ldrb	r3, [r3, #0]
 8016542:	2b01      	cmp	r3, #1
 8016544:	d10f      	bne.n	8016566 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8016546:	693b      	ldr	r3, [r7, #16]
 8016548:	785b      	ldrb	r3, [r3, #1]
 801654a:	2b00      	cmp	r3, #0
 801654c:	d11b      	bne.n	8016586 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801654e:	693b      	ldr	r3, [r7, #16]
 8016550:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8016552:	2b5e      	cmp	r3, #94	@ 0x5e
 8016554:	d117      	bne.n	8016586 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8016556:	687b      	ldr	r3, [r7, #4]
 8016558:	7b5b      	ldrb	r3, [r3, #13]
 801655a:	f043 0310 	orr.w	r3, r3, #16
 801655e:	b2da      	uxtb	r2, r3
 8016560:	687b      	ldr	r3, [r7, #4]
 8016562:	735a      	strb	r2, [r3, #13]
 8016564:	e00f      	b.n	8016586 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8016566:	693b      	ldr	r3, [r7, #16]
 8016568:	2206      	movs	r2, #6
 801656a:	4928      	ldr	r1, [pc, #160]	@ (801660c <ethernet_input+0x118>)
 801656c:	4618      	mov	r0, r3
 801656e:	f001 f8ac 	bl	80176ca <memcmp>
 8016572:	4603      	mov	r3, r0
 8016574:	2b00      	cmp	r3, #0
 8016576:	d106      	bne.n	8016586 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8016578:	687b      	ldr	r3, [r7, #4]
 801657a:	7b5b      	ldrb	r3, [r3, #13]
 801657c:	f043 0308 	orr.w	r3, r3, #8
 8016580:	b2da      	uxtb	r2, r3
 8016582:	687b      	ldr	r3, [r7, #4]
 8016584:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8016586:	89fb      	ldrh	r3, [r7, #14]
 8016588:	2b08      	cmp	r3, #8
 801658a:	d003      	beq.n	8016594 <ethernet_input+0xa0>
 801658c:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8016590:	d014      	beq.n	80165bc <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8016592:	e032      	b.n	80165fa <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016594:	683b      	ldr	r3, [r7, #0]
 8016596:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801659a:	f003 0308 	and.w	r3, r3, #8
 801659e:	2b00      	cmp	r3, #0
 80165a0:	d024      	beq.n	80165ec <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80165a2:	8afb      	ldrh	r3, [r7, #22]
 80165a4:	4619      	mov	r1, r3
 80165a6:	6878      	ldr	r0, [r7, #4]
 80165a8:	f7f7 f948 	bl	800d83c <pbuf_remove_header>
 80165ac:	4603      	mov	r3, r0
 80165ae:	2b00      	cmp	r3, #0
 80165b0:	d11e      	bne.n	80165f0 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80165b2:	6839      	ldr	r1, [r7, #0]
 80165b4:	6878      	ldr	r0, [r7, #4]
 80165b6:	f7fe ff21 	bl	80153fc <ip4_input>
      break;
 80165ba:	e013      	b.n	80165e4 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80165bc:	683b      	ldr	r3, [r7, #0]
 80165be:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80165c2:	f003 0308 	and.w	r3, r3, #8
 80165c6:	2b00      	cmp	r3, #0
 80165c8:	d014      	beq.n	80165f4 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80165ca:	8afb      	ldrh	r3, [r7, #22]
 80165cc:	4619      	mov	r1, r3
 80165ce:	6878      	ldr	r0, [r7, #4]
 80165d0:	f7f7 f934 	bl	800d83c <pbuf_remove_header>
 80165d4:	4603      	mov	r3, r0
 80165d6:	2b00      	cmp	r3, #0
 80165d8:	d10e      	bne.n	80165f8 <ethernet_input+0x104>
        etharp_input(p, netif);
 80165da:	6839      	ldr	r1, [r7, #0]
 80165dc:	6878      	ldr	r0, [r7, #4]
 80165de:	f7fe f8c1 	bl	8014764 <etharp_input>
      break;
 80165e2:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80165e4:	2300      	movs	r3, #0
 80165e6:	e00c      	b.n	8016602 <ethernet_input+0x10e>
    goto free_and_return;
 80165e8:	bf00      	nop
 80165ea:	e006      	b.n	80165fa <ethernet_input+0x106>
        goto free_and_return;
 80165ec:	bf00      	nop
 80165ee:	e004      	b.n	80165fa <ethernet_input+0x106>
        goto free_and_return;
 80165f0:	bf00      	nop
 80165f2:	e002      	b.n	80165fa <ethernet_input+0x106>
        goto free_and_return;
 80165f4:	bf00      	nop
 80165f6:	e000      	b.n	80165fa <ethernet_input+0x106>
        goto free_and_return;
 80165f8:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80165fa:	6878      	ldr	r0, [r7, #4]
 80165fc:	f7f7 f9a4 	bl	800d948 <pbuf_free>
  return ERR_OK;
 8016600:	2300      	movs	r3, #0
}
 8016602:	4618      	mov	r0, r3
 8016604:	3718      	adds	r7, #24
 8016606:	46bd      	mov	sp, r7
 8016608:	bd80      	pop	{r7, pc}
 801660a:	bf00      	nop
 801660c:	08022de8 	.word	0x08022de8

08016610 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8016610:	b580      	push	{r7, lr}
 8016612:	b086      	sub	sp, #24
 8016614:	af00      	add	r7, sp, #0
 8016616:	60f8      	str	r0, [r7, #12]
 8016618:	60b9      	str	r1, [r7, #8]
 801661a:	607a      	str	r2, [r7, #4]
 801661c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801661e:	8c3b      	ldrh	r3, [r7, #32]
 8016620:	4618      	mov	r0, r3
 8016622:	f7f5 fb69 	bl	800bcf8 <lwip_htons>
 8016626:	4603      	mov	r3, r0
 8016628:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801662a:	210e      	movs	r1, #14
 801662c:	68b8      	ldr	r0, [r7, #8]
 801662e:	f7f7 f8f5 	bl	800d81c <pbuf_add_header>
 8016632:	4603      	mov	r3, r0
 8016634:	2b00      	cmp	r3, #0
 8016636:	d125      	bne.n	8016684 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8016638:	68bb      	ldr	r3, [r7, #8]
 801663a:	685b      	ldr	r3, [r3, #4]
 801663c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801663e:	693b      	ldr	r3, [r7, #16]
 8016640:	8afa      	ldrh	r2, [r7, #22]
 8016642:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8016644:	693b      	ldr	r3, [r7, #16]
 8016646:	2206      	movs	r2, #6
 8016648:	6839      	ldr	r1, [r7, #0]
 801664a:	4618      	mov	r0, r3
 801664c:	f001 f91d 	bl	801788a <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8016650:	693b      	ldr	r3, [r7, #16]
 8016652:	3306      	adds	r3, #6
 8016654:	2206      	movs	r2, #6
 8016656:	6879      	ldr	r1, [r7, #4]
 8016658:	4618      	mov	r0, r3
 801665a:	f001 f916 	bl	801788a <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801665e:	68fb      	ldr	r3, [r7, #12]
 8016660:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8016664:	2b06      	cmp	r3, #6
 8016666:	d006      	beq.n	8016676 <ethernet_output+0x66>
 8016668:	4b0a      	ldr	r3, [pc, #40]	@ (8016694 <ethernet_output+0x84>)
 801666a:	f44f 7299 	mov.w	r2, #306	@ 0x132
 801666e:	490a      	ldr	r1, [pc, #40]	@ (8016698 <ethernet_output+0x88>)
 8016670:	480a      	ldr	r0, [pc, #40]	@ (801669c <ethernet_output+0x8c>)
 8016672:	f000 ffb3 	bl	80175dc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8016676:	68fb      	ldr	r3, [r7, #12]
 8016678:	699b      	ldr	r3, [r3, #24]
 801667a:	68b9      	ldr	r1, [r7, #8]
 801667c:	68f8      	ldr	r0, [r7, #12]
 801667e:	4798      	blx	r3
 8016680:	4603      	mov	r3, r0
 8016682:	e002      	b.n	801668a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8016684:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8016686:	f06f 0301 	mvn.w	r3, #1
}
 801668a:	4618      	mov	r0, r3
 801668c:	3718      	adds	r7, #24
 801668e:	46bd      	mov	sp, r7
 8016690:	bd80      	pop	{r7, pc}
 8016692:	bf00      	nop
 8016694:	08022c54 	.word	0x08022c54
 8016698:	08022c8c 	.word	0x08022c8c
 801669c:	08022cc0 	.word	0x08022cc0

080166a0 <atof>:
 80166a0:	2100      	movs	r1, #0
 80166a2:	f000 be49 	b.w	8017338 <strtod>

080166a6 <atoi>:
 80166a6:	220a      	movs	r2, #10
 80166a8:	2100      	movs	r1, #0
 80166aa:	f000 becb 	b.w	8017444 <strtol>

080166ae <atol>:
 80166ae:	220a      	movs	r2, #10
 80166b0:	2100      	movs	r1, #0
 80166b2:	f000 bec7 	b.w	8017444 <strtol>
	...

080166b8 <rand>:
 80166b8:	4b16      	ldr	r3, [pc, #88]	@ (8016714 <rand+0x5c>)
 80166ba:	b510      	push	{r4, lr}
 80166bc:	681c      	ldr	r4, [r3, #0]
 80166be:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80166c0:	b9b3      	cbnz	r3, 80166f0 <rand+0x38>
 80166c2:	2018      	movs	r0, #24
 80166c4:	f001 fc9a 	bl	8017ffc <malloc>
 80166c8:	4602      	mov	r2, r0
 80166ca:	6320      	str	r0, [r4, #48]	@ 0x30
 80166cc:	b920      	cbnz	r0, 80166d8 <rand+0x20>
 80166ce:	4b12      	ldr	r3, [pc, #72]	@ (8016718 <rand+0x60>)
 80166d0:	4812      	ldr	r0, [pc, #72]	@ (801671c <rand+0x64>)
 80166d2:	2152      	movs	r1, #82	@ 0x52
 80166d4:	f001 f8f0 	bl	80178b8 <__assert_func>
 80166d8:	4911      	ldr	r1, [pc, #68]	@ (8016720 <rand+0x68>)
 80166da:	4b12      	ldr	r3, [pc, #72]	@ (8016724 <rand+0x6c>)
 80166dc:	e9c0 1300 	strd	r1, r3, [r0]
 80166e0:	4b11      	ldr	r3, [pc, #68]	@ (8016728 <rand+0x70>)
 80166e2:	6083      	str	r3, [r0, #8]
 80166e4:	230b      	movs	r3, #11
 80166e6:	8183      	strh	r3, [r0, #12]
 80166e8:	2100      	movs	r1, #0
 80166ea:	2001      	movs	r0, #1
 80166ec:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80166f0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80166f2:	480e      	ldr	r0, [pc, #56]	@ (801672c <rand+0x74>)
 80166f4:	690b      	ldr	r3, [r1, #16]
 80166f6:	694c      	ldr	r4, [r1, #20]
 80166f8:	4a0d      	ldr	r2, [pc, #52]	@ (8016730 <rand+0x78>)
 80166fa:	4358      	muls	r0, r3
 80166fc:	fb02 0004 	mla	r0, r2, r4, r0
 8016700:	fba3 3202 	umull	r3, r2, r3, r2
 8016704:	3301      	adds	r3, #1
 8016706:	eb40 0002 	adc.w	r0, r0, r2
 801670a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801670e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8016712:	bd10      	pop	{r4, pc}
 8016714:	20000a8c 	.word	0x20000a8c
 8016718:	08022df6 	.word	0x08022df6
 801671c:	08022e0d 	.word	0x08022e0d
 8016720:	abcd330e 	.word	0xabcd330e
 8016724:	e66d1234 	.word	0xe66d1234
 8016728:	0005deec 	.word	0x0005deec
 801672c:	5851f42d 	.word	0x5851f42d
 8016730:	4c957f2d 	.word	0x4c957f2d

08016734 <sulp>:
 8016734:	b570      	push	{r4, r5, r6, lr}
 8016736:	4604      	mov	r4, r0
 8016738:	460d      	mov	r5, r1
 801673a:	ec45 4b10 	vmov	d0, r4, r5
 801673e:	4616      	mov	r6, r2
 8016740:	f002 f890 	bl	8018864 <__ulp>
 8016744:	ec51 0b10 	vmov	r0, r1, d0
 8016748:	b17e      	cbz	r6, 801676a <sulp+0x36>
 801674a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801674e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8016752:	2b00      	cmp	r3, #0
 8016754:	dd09      	ble.n	801676a <sulp+0x36>
 8016756:	051b      	lsls	r3, r3, #20
 8016758:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 801675c:	2400      	movs	r4, #0
 801675e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8016762:	4622      	mov	r2, r4
 8016764:	462b      	mov	r3, r5
 8016766:	f7e9 ff57 	bl	8000618 <__aeabi_dmul>
 801676a:	ec41 0b10 	vmov	d0, r0, r1
 801676e:	bd70      	pop	{r4, r5, r6, pc}

08016770 <_strtod_l>:
 8016770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016774:	b09f      	sub	sp, #124	@ 0x7c
 8016776:	460c      	mov	r4, r1
 8016778:	9217      	str	r2, [sp, #92]	@ 0x5c
 801677a:	2200      	movs	r2, #0
 801677c:	921a      	str	r2, [sp, #104]	@ 0x68
 801677e:	9005      	str	r0, [sp, #20]
 8016780:	f04f 0a00 	mov.w	sl, #0
 8016784:	f04f 0b00 	mov.w	fp, #0
 8016788:	460a      	mov	r2, r1
 801678a:	9219      	str	r2, [sp, #100]	@ 0x64
 801678c:	7811      	ldrb	r1, [r2, #0]
 801678e:	292b      	cmp	r1, #43	@ 0x2b
 8016790:	d04a      	beq.n	8016828 <_strtod_l+0xb8>
 8016792:	d838      	bhi.n	8016806 <_strtod_l+0x96>
 8016794:	290d      	cmp	r1, #13
 8016796:	d832      	bhi.n	80167fe <_strtod_l+0x8e>
 8016798:	2908      	cmp	r1, #8
 801679a:	d832      	bhi.n	8016802 <_strtod_l+0x92>
 801679c:	2900      	cmp	r1, #0
 801679e:	d03b      	beq.n	8016818 <_strtod_l+0xa8>
 80167a0:	2200      	movs	r2, #0
 80167a2:	920e      	str	r2, [sp, #56]	@ 0x38
 80167a4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80167a6:	782a      	ldrb	r2, [r5, #0]
 80167a8:	2a30      	cmp	r2, #48	@ 0x30
 80167aa:	f040 80b2 	bne.w	8016912 <_strtod_l+0x1a2>
 80167ae:	786a      	ldrb	r2, [r5, #1]
 80167b0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80167b4:	2a58      	cmp	r2, #88	@ 0x58
 80167b6:	d16e      	bne.n	8016896 <_strtod_l+0x126>
 80167b8:	9302      	str	r3, [sp, #8]
 80167ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80167bc:	9301      	str	r3, [sp, #4]
 80167be:	ab1a      	add	r3, sp, #104	@ 0x68
 80167c0:	9300      	str	r3, [sp, #0]
 80167c2:	4a8f      	ldr	r2, [pc, #572]	@ (8016a00 <_strtod_l+0x290>)
 80167c4:	9805      	ldr	r0, [sp, #20]
 80167c6:	ab1b      	add	r3, sp, #108	@ 0x6c
 80167c8:	a919      	add	r1, sp, #100	@ 0x64
 80167ca:	f001 f945 	bl	8017a58 <__gethex>
 80167ce:	f010 060f 	ands.w	r6, r0, #15
 80167d2:	4604      	mov	r4, r0
 80167d4:	d005      	beq.n	80167e2 <_strtod_l+0x72>
 80167d6:	2e06      	cmp	r6, #6
 80167d8:	d128      	bne.n	801682c <_strtod_l+0xbc>
 80167da:	3501      	adds	r5, #1
 80167dc:	2300      	movs	r3, #0
 80167de:	9519      	str	r5, [sp, #100]	@ 0x64
 80167e0:	930e      	str	r3, [sp, #56]	@ 0x38
 80167e2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80167e4:	2b00      	cmp	r3, #0
 80167e6:	f040 858e 	bne.w	8017306 <_strtod_l+0xb96>
 80167ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80167ec:	b1cb      	cbz	r3, 8016822 <_strtod_l+0xb2>
 80167ee:	4652      	mov	r2, sl
 80167f0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80167f4:	ec43 2b10 	vmov	d0, r2, r3
 80167f8:	b01f      	add	sp, #124	@ 0x7c
 80167fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80167fe:	2920      	cmp	r1, #32
 8016800:	d1ce      	bne.n	80167a0 <_strtod_l+0x30>
 8016802:	3201      	adds	r2, #1
 8016804:	e7c1      	b.n	801678a <_strtod_l+0x1a>
 8016806:	292d      	cmp	r1, #45	@ 0x2d
 8016808:	d1ca      	bne.n	80167a0 <_strtod_l+0x30>
 801680a:	2101      	movs	r1, #1
 801680c:	910e      	str	r1, [sp, #56]	@ 0x38
 801680e:	1c51      	adds	r1, r2, #1
 8016810:	9119      	str	r1, [sp, #100]	@ 0x64
 8016812:	7852      	ldrb	r2, [r2, #1]
 8016814:	2a00      	cmp	r2, #0
 8016816:	d1c5      	bne.n	80167a4 <_strtod_l+0x34>
 8016818:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801681a:	9419      	str	r4, [sp, #100]	@ 0x64
 801681c:	2b00      	cmp	r3, #0
 801681e:	f040 8570 	bne.w	8017302 <_strtod_l+0xb92>
 8016822:	4652      	mov	r2, sl
 8016824:	465b      	mov	r3, fp
 8016826:	e7e5      	b.n	80167f4 <_strtod_l+0x84>
 8016828:	2100      	movs	r1, #0
 801682a:	e7ef      	b.n	801680c <_strtod_l+0x9c>
 801682c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801682e:	b13a      	cbz	r2, 8016840 <_strtod_l+0xd0>
 8016830:	2135      	movs	r1, #53	@ 0x35
 8016832:	a81c      	add	r0, sp, #112	@ 0x70
 8016834:	f002 f910 	bl	8018a58 <__copybits>
 8016838:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801683a:	9805      	ldr	r0, [sp, #20]
 801683c:	f001 fce6 	bl	801820c <_Bfree>
 8016840:	3e01      	subs	r6, #1
 8016842:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8016844:	2e04      	cmp	r6, #4
 8016846:	d806      	bhi.n	8016856 <_strtod_l+0xe6>
 8016848:	e8df f006 	tbb	[pc, r6]
 801684c:	201d0314 	.word	0x201d0314
 8016850:	14          	.byte	0x14
 8016851:	00          	.byte	0x00
 8016852:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8016856:	05e1      	lsls	r1, r4, #23
 8016858:	bf48      	it	mi
 801685a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 801685e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8016862:	0d1b      	lsrs	r3, r3, #20
 8016864:	051b      	lsls	r3, r3, #20
 8016866:	2b00      	cmp	r3, #0
 8016868:	d1bb      	bne.n	80167e2 <_strtod_l+0x72>
 801686a:	f000 ffd9 	bl	8017820 <__errno>
 801686e:	2322      	movs	r3, #34	@ 0x22
 8016870:	6003      	str	r3, [r0, #0]
 8016872:	e7b6      	b.n	80167e2 <_strtod_l+0x72>
 8016874:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8016878:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801687c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8016880:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8016884:	e7e7      	b.n	8016856 <_strtod_l+0xe6>
 8016886:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8016a08 <_strtod_l+0x298>
 801688a:	e7e4      	b.n	8016856 <_strtod_l+0xe6>
 801688c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8016890:	f04f 3aff 	mov.w	sl, #4294967295
 8016894:	e7df      	b.n	8016856 <_strtod_l+0xe6>
 8016896:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016898:	1c5a      	adds	r2, r3, #1
 801689a:	9219      	str	r2, [sp, #100]	@ 0x64
 801689c:	785b      	ldrb	r3, [r3, #1]
 801689e:	2b30      	cmp	r3, #48	@ 0x30
 80168a0:	d0f9      	beq.n	8016896 <_strtod_l+0x126>
 80168a2:	2b00      	cmp	r3, #0
 80168a4:	d09d      	beq.n	80167e2 <_strtod_l+0x72>
 80168a6:	2301      	movs	r3, #1
 80168a8:	2700      	movs	r7, #0
 80168aa:	9308      	str	r3, [sp, #32]
 80168ac:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80168ae:	930c      	str	r3, [sp, #48]	@ 0x30
 80168b0:	970b      	str	r7, [sp, #44]	@ 0x2c
 80168b2:	46b9      	mov	r9, r7
 80168b4:	220a      	movs	r2, #10
 80168b6:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80168b8:	7805      	ldrb	r5, [r0, #0]
 80168ba:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80168be:	b2d9      	uxtb	r1, r3
 80168c0:	2909      	cmp	r1, #9
 80168c2:	d928      	bls.n	8016916 <_strtod_l+0x1a6>
 80168c4:	494f      	ldr	r1, [pc, #316]	@ (8016a04 <_strtod_l+0x294>)
 80168c6:	2201      	movs	r2, #1
 80168c8:	f000 ff3e 	bl	8017748 <strncmp>
 80168cc:	2800      	cmp	r0, #0
 80168ce:	d032      	beq.n	8016936 <_strtod_l+0x1c6>
 80168d0:	2000      	movs	r0, #0
 80168d2:	462a      	mov	r2, r5
 80168d4:	900a      	str	r0, [sp, #40]	@ 0x28
 80168d6:	464d      	mov	r5, r9
 80168d8:	4603      	mov	r3, r0
 80168da:	2a65      	cmp	r2, #101	@ 0x65
 80168dc:	d001      	beq.n	80168e2 <_strtod_l+0x172>
 80168de:	2a45      	cmp	r2, #69	@ 0x45
 80168e0:	d114      	bne.n	801690c <_strtod_l+0x19c>
 80168e2:	b91d      	cbnz	r5, 80168ec <_strtod_l+0x17c>
 80168e4:	9a08      	ldr	r2, [sp, #32]
 80168e6:	4302      	orrs	r2, r0
 80168e8:	d096      	beq.n	8016818 <_strtod_l+0xa8>
 80168ea:	2500      	movs	r5, #0
 80168ec:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80168ee:	1c62      	adds	r2, r4, #1
 80168f0:	9219      	str	r2, [sp, #100]	@ 0x64
 80168f2:	7862      	ldrb	r2, [r4, #1]
 80168f4:	2a2b      	cmp	r2, #43	@ 0x2b
 80168f6:	d07a      	beq.n	80169ee <_strtod_l+0x27e>
 80168f8:	2a2d      	cmp	r2, #45	@ 0x2d
 80168fa:	d07e      	beq.n	80169fa <_strtod_l+0x28a>
 80168fc:	f04f 0c00 	mov.w	ip, #0
 8016900:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8016904:	2909      	cmp	r1, #9
 8016906:	f240 8085 	bls.w	8016a14 <_strtod_l+0x2a4>
 801690a:	9419      	str	r4, [sp, #100]	@ 0x64
 801690c:	f04f 0800 	mov.w	r8, #0
 8016910:	e0a5      	b.n	8016a5e <_strtod_l+0x2ee>
 8016912:	2300      	movs	r3, #0
 8016914:	e7c8      	b.n	80168a8 <_strtod_l+0x138>
 8016916:	f1b9 0f08 	cmp.w	r9, #8
 801691a:	bfd8      	it	le
 801691c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 801691e:	f100 0001 	add.w	r0, r0, #1
 8016922:	bfda      	itte	le
 8016924:	fb02 3301 	mlale	r3, r2, r1, r3
 8016928:	930b      	strle	r3, [sp, #44]	@ 0x2c
 801692a:	fb02 3707 	mlagt	r7, r2, r7, r3
 801692e:	f109 0901 	add.w	r9, r9, #1
 8016932:	9019      	str	r0, [sp, #100]	@ 0x64
 8016934:	e7bf      	b.n	80168b6 <_strtod_l+0x146>
 8016936:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016938:	1c5a      	adds	r2, r3, #1
 801693a:	9219      	str	r2, [sp, #100]	@ 0x64
 801693c:	785a      	ldrb	r2, [r3, #1]
 801693e:	f1b9 0f00 	cmp.w	r9, #0
 8016942:	d03b      	beq.n	80169bc <_strtod_l+0x24c>
 8016944:	900a      	str	r0, [sp, #40]	@ 0x28
 8016946:	464d      	mov	r5, r9
 8016948:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 801694c:	2b09      	cmp	r3, #9
 801694e:	d912      	bls.n	8016976 <_strtod_l+0x206>
 8016950:	2301      	movs	r3, #1
 8016952:	e7c2      	b.n	80168da <_strtod_l+0x16a>
 8016954:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016956:	1c5a      	adds	r2, r3, #1
 8016958:	9219      	str	r2, [sp, #100]	@ 0x64
 801695a:	785a      	ldrb	r2, [r3, #1]
 801695c:	3001      	adds	r0, #1
 801695e:	2a30      	cmp	r2, #48	@ 0x30
 8016960:	d0f8      	beq.n	8016954 <_strtod_l+0x1e4>
 8016962:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8016966:	2b08      	cmp	r3, #8
 8016968:	f200 84d2 	bhi.w	8017310 <_strtod_l+0xba0>
 801696c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801696e:	900a      	str	r0, [sp, #40]	@ 0x28
 8016970:	2000      	movs	r0, #0
 8016972:	930c      	str	r3, [sp, #48]	@ 0x30
 8016974:	4605      	mov	r5, r0
 8016976:	3a30      	subs	r2, #48	@ 0x30
 8016978:	f100 0301 	add.w	r3, r0, #1
 801697c:	d018      	beq.n	80169b0 <_strtod_l+0x240>
 801697e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8016980:	4419      	add	r1, r3
 8016982:	910a      	str	r1, [sp, #40]	@ 0x28
 8016984:	462e      	mov	r6, r5
 8016986:	f04f 0e0a 	mov.w	lr, #10
 801698a:	1c71      	adds	r1, r6, #1
 801698c:	eba1 0c05 	sub.w	ip, r1, r5
 8016990:	4563      	cmp	r3, ip
 8016992:	dc15      	bgt.n	80169c0 <_strtod_l+0x250>
 8016994:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8016998:	182b      	adds	r3, r5, r0
 801699a:	2b08      	cmp	r3, #8
 801699c:	f105 0501 	add.w	r5, r5, #1
 80169a0:	4405      	add	r5, r0
 80169a2:	dc1a      	bgt.n	80169da <_strtod_l+0x26a>
 80169a4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80169a6:	230a      	movs	r3, #10
 80169a8:	fb03 2301 	mla	r3, r3, r1, r2
 80169ac:	930b      	str	r3, [sp, #44]	@ 0x2c
 80169ae:	2300      	movs	r3, #0
 80169b0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80169b2:	1c51      	adds	r1, r2, #1
 80169b4:	9119      	str	r1, [sp, #100]	@ 0x64
 80169b6:	7852      	ldrb	r2, [r2, #1]
 80169b8:	4618      	mov	r0, r3
 80169ba:	e7c5      	b.n	8016948 <_strtod_l+0x1d8>
 80169bc:	4648      	mov	r0, r9
 80169be:	e7ce      	b.n	801695e <_strtod_l+0x1ee>
 80169c0:	2e08      	cmp	r6, #8
 80169c2:	dc05      	bgt.n	80169d0 <_strtod_l+0x260>
 80169c4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80169c6:	fb0e f606 	mul.w	r6, lr, r6
 80169ca:	960b      	str	r6, [sp, #44]	@ 0x2c
 80169cc:	460e      	mov	r6, r1
 80169ce:	e7dc      	b.n	801698a <_strtod_l+0x21a>
 80169d0:	2910      	cmp	r1, #16
 80169d2:	bfd8      	it	le
 80169d4:	fb0e f707 	mulle.w	r7, lr, r7
 80169d8:	e7f8      	b.n	80169cc <_strtod_l+0x25c>
 80169da:	2b0f      	cmp	r3, #15
 80169dc:	bfdc      	itt	le
 80169de:	230a      	movle	r3, #10
 80169e0:	fb03 2707 	mlale	r7, r3, r7, r2
 80169e4:	e7e3      	b.n	80169ae <_strtod_l+0x23e>
 80169e6:	2300      	movs	r3, #0
 80169e8:	930a      	str	r3, [sp, #40]	@ 0x28
 80169ea:	2301      	movs	r3, #1
 80169ec:	e77a      	b.n	80168e4 <_strtod_l+0x174>
 80169ee:	f04f 0c00 	mov.w	ip, #0
 80169f2:	1ca2      	adds	r2, r4, #2
 80169f4:	9219      	str	r2, [sp, #100]	@ 0x64
 80169f6:	78a2      	ldrb	r2, [r4, #2]
 80169f8:	e782      	b.n	8016900 <_strtod_l+0x190>
 80169fa:	f04f 0c01 	mov.w	ip, #1
 80169fe:	e7f8      	b.n	80169f2 <_strtod_l+0x282>
 8016a00:	08022fc8 	.word	0x08022fc8
 8016a04:	08022e65 	.word	0x08022e65
 8016a08:	7ff00000 	.word	0x7ff00000
 8016a0c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8016a0e:	1c51      	adds	r1, r2, #1
 8016a10:	9119      	str	r1, [sp, #100]	@ 0x64
 8016a12:	7852      	ldrb	r2, [r2, #1]
 8016a14:	2a30      	cmp	r2, #48	@ 0x30
 8016a16:	d0f9      	beq.n	8016a0c <_strtod_l+0x29c>
 8016a18:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8016a1c:	2908      	cmp	r1, #8
 8016a1e:	f63f af75 	bhi.w	801690c <_strtod_l+0x19c>
 8016a22:	3a30      	subs	r2, #48	@ 0x30
 8016a24:	9209      	str	r2, [sp, #36]	@ 0x24
 8016a26:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8016a28:	920f      	str	r2, [sp, #60]	@ 0x3c
 8016a2a:	f04f 080a 	mov.w	r8, #10
 8016a2e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8016a30:	1c56      	adds	r6, r2, #1
 8016a32:	9619      	str	r6, [sp, #100]	@ 0x64
 8016a34:	7852      	ldrb	r2, [r2, #1]
 8016a36:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8016a3a:	f1be 0f09 	cmp.w	lr, #9
 8016a3e:	d939      	bls.n	8016ab4 <_strtod_l+0x344>
 8016a40:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8016a42:	1a76      	subs	r6, r6, r1
 8016a44:	2e08      	cmp	r6, #8
 8016a46:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8016a4a:	dc03      	bgt.n	8016a54 <_strtod_l+0x2e4>
 8016a4c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8016a4e:	4588      	cmp	r8, r1
 8016a50:	bfa8      	it	ge
 8016a52:	4688      	movge	r8, r1
 8016a54:	f1bc 0f00 	cmp.w	ip, #0
 8016a58:	d001      	beq.n	8016a5e <_strtod_l+0x2ee>
 8016a5a:	f1c8 0800 	rsb	r8, r8, #0
 8016a5e:	2d00      	cmp	r5, #0
 8016a60:	d14e      	bne.n	8016b00 <_strtod_l+0x390>
 8016a62:	9908      	ldr	r1, [sp, #32]
 8016a64:	4308      	orrs	r0, r1
 8016a66:	f47f aebc 	bne.w	80167e2 <_strtod_l+0x72>
 8016a6a:	2b00      	cmp	r3, #0
 8016a6c:	f47f aed4 	bne.w	8016818 <_strtod_l+0xa8>
 8016a70:	2a69      	cmp	r2, #105	@ 0x69
 8016a72:	d028      	beq.n	8016ac6 <_strtod_l+0x356>
 8016a74:	dc25      	bgt.n	8016ac2 <_strtod_l+0x352>
 8016a76:	2a49      	cmp	r2, #73	@ 0x49
 8016a78:	d025      	beq.n	8016ac6 <_strtod_l+0x356>
 8016a7a:	2a4e      	cmp	r2, #78	@ 0x4e
 8016a7c:	f47f aecc 	bne.w	8016818 <_strtod_l+0xa8>
 8016a80:	499a      	ldr	r1, [pc, #616]	@ (8016cec <_strtod_l+0x57c>)
 8016a82:	a819      	add	r0, sp, #100	@ 0x64
 8016a84:	f001 fa0a 	bl	8017e9c <__match>
 8016a88:	2800      	cmp	r0, #0
 8016a8a:	f43f aec5 	beq.w	8016818 <_strtod_l+0xa8>
 8016a8e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016a90:	781b      	ldrb	r3, [r3, #0]
 8016a92:	2b28      	cmp	r3, #40	@ 0x28
 8016a94:	d12e      	bne.n	8016af4 <_strtod_l+0x384>
 8016a96:	4996      	ldr	r1, [pc, #600]	@ (8016cf0 <_strtod_l+0x580>)
 8016a98:	aa1c      	add	r2, sp, #112	@ 0x70
 8016a9a:	a819      	add	r0, sp, #100	@ 0x64
 8016a9c:	f001 fa12 	bl	8017ec4 <__hexnan>
 8016aa0:	2805      	cmp	r0, #5
 8016aa2:	d127      	bne.n	8016af4 <_strtod_l+0x384>
 8016aa4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8016aa6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8016aaa:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8016aae:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8016ab2:	e696      	b.n	80167e2 <_strtod_l+0x72>
 8016ab4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8016ab6:	fb08 2101 	mla	r1, r8, r1, r2
 8016aba:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8016abe:	9209      	str	r2, [sp, #36]	@ 0x24
 8016ac0:	e7b5      	b.n	8016a2e <_strtod_l+0x2be>
 8016ac2:	2a6e      	cmp	r2, #110	@ 0x6e
 8016ac4:	e7da      	b.n	8016a7c <_strtod_l+0x30c>
 8016ac6:	498b      	ldr	r1, [pc, #556]	@ (8016cf4 <_strtod_l+0x584>)
 8016ac8:	a819      	add	r0, sp, #100	@ 0x64
 8016aca:	f001 f9e7 	bl	8017e9c <__match>
 8016ace:	2800      	cmp	r0, #0
 8016ad0:	f43f aea2 	beq.w	8016818 <_strtod_l+0xa8>
 8016ad4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016ad6:	4988      	ldr	r1, [pc, #544]	@ (8016cf8 <_strtod_l+0x588>)
 8016ad8:	3b01      	subs	r3, #1
 8016ada:	a819      	add	r0, sp, #100	@ 0x64
 8016adc:	9319      	str	r3, [sp, #100]	@ 0x64
 8016ade:	f001 f9dd 	bl	8017e9c <__match>
 8016ae2:	b910      	cbnz	r0, 8016aea <_strtod_l+0x37a>
 8016ae4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016ae6:	3301      	adds	r3, #1
 8016ae8:	9319      	str	r3, [sp, #100]	@ 0x64
 8016aea:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8016d08 <_strtod_l+0x598>
 8016aee:	f04f 0a00 	mov.w	sl, #0
 8016af2:	e676      	b.n	80167e2 <_strtod_l+0x72>
 8016af4:	4881      	ldr	r0, [pc, #516]	@ (8016cfc <_strtod_l+0x58c>)
 8016af6:	f000 fed7 	bl	80178a8 <nan>
 8016afa:	ec5b ab10 	vmov	sl, fp, d0
 8016afe:	e670      	b.n	80167e2 <_strtod_l+0x72>
 8016b00:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016b02:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8016b04:	eba8 0303 	sub.w	r3, r8, r3
 8016b08:	f1b9 0f00 	cmp.w	r9, #0
 8016b0c:	bf08      	it	eq
 8016b0e:	46a9      	moveq	r9, r5
 8016b10:	2d10      	cmp	r5, #16
 8016b12:	9309      	str	r3, [sp, #36]	@ 0x24
 8016b14:	462c      	mov	r4, r5
 8016b16:	bfa8      	it	ge
 8016b18:	2410      	movge	r4, #16
 8016b1a:	f7e9 fd03 	bl	8000524 <__aeabi_ui2d>
 8016b1e:	2d09      	cmp	r5, #9
 8016b20:	4682      	mov	sl, r0
 8016b22:	468b      	mov	fp, r1
 8016b24:	dc13      	bgt.n	8016b4e <_strtod_l+0x3de>
 8016b26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016b28:	2b00      	cmp	r3, #0
 8016b2a:	f43f ae5a 	beq.w	80167e2 <_strtod_l+0x72>
 8016b2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016b30:	dd78      	ble.n	8016c24 <_strtod_l+0x4b4>
 8016b32:	2b16      	cmp	r3, #22
 8016b34:	dc5f      	bgt.n	8016bf6 <_strtod_l+0x486>
 8016b36:	4972      	ldr	r1, [pc, #456]	@ (8016d00 <_strtod_l+0x590>)
 8016b38:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8016b3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016b40:	4652      	mov	r2, sl
 8016b42:	465b      	mov	r3, fp
 8016b44:	f7e9 fd68 	bl	8000618 <__aeabi_dmul>
 8016b48:	4682      	mov	sl, r0
 8016b4a:	468b      	mov	fp, r1
 8016b4c:	e649      	b.n	80167e2 <_strtod_l+0x72>
 8016b4e:	4b6c      	ldr	r3, [pc, #432]	@ (8016d00 <_strtod_l+0x590>)
 8016b50:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8016b54:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8016b58:	f7e9 fd5e 	bl	8000618 <__aeabi_dmul>
 8016b5c:	4682      	mov	sl, r0
 8016b5e:	4638      	mov	r0, r7
 8016b60:	468b      	mov	fp, r1
 8016b62:	f7e9 fcdf 	bl	8000524 <__aeabi_ui2d>
 8016b66:	4602      	mov	r2, r0
 8016b68:	460b      	mov	r3, r1
 8016b6a:	4650      	mov	r0, sl
 8016b6c:	4659      	mov	r1, fp
 8016b6e:	f7e9 fb9d 	bl	80002ac <__adddf3>
 8016b72:	2d0f      	cmp	r5, #15
 8016b74:	4682      	mov	sl, r0
 8016b76:	468b      	mov	fp, r1
 8016b78:	ddd5      	ble.n	8016b26 <_strtod_l+0x3b6>
 8016b7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016b7c:	1b2c      	subs	r4, r5, r4
 8016b7e:	441c      	add	r4, r3
 8016b80:	2c00      	cmp	r4, #0
 8016b82:	f340 8093 	ble.w	8016cac <_strtod_l+0x53c>
 8016b86:	f014 030f 	ands.w	r3, r4, #15
 8016b8a:	d00a      	beq.n	8016ba2 <_strtod_l+0x432>
 8016b8c:	495c      	ldr	r1, [pc, #368]	@ (8016d00 <_strtod_l+0x590>)
 8016b8e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8016b92:	4652      	mov	r2, sl
 8016b94:	465b      	mov	r3, fp
 8016b96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016b9a:	f7e9 fd3d 	bl	8000618 <__aeabi_dmul>
 8016b9e:	4682      	mov	sl, r0
 8016ba0:	468b      	mov	fp, r1
 8016ba2:	f034 040f 	bics.w	r4, r4, #15
 8016ba6:	d073      	beq.n	8016c90 <_strtod_l+0x520>
 8016ba8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8016bac:	dd49      	ble.n	8016c42 <_strtod_l+0x4d2>
 8016bae:	2400      	movs	r4, #0
 8016bb0:	46a0      	mov	r8, r4
 8016bb2:	940b      	str	r4, [sp, #44]	@ 0x2c
 8016bb4:	46a1      	mov	r9, r4
 8016bb6:	9a05      	ldr	r2, [sp, #20]
 8016bb8:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8016d08 <_strtod_l+0x598>
 8016bbc:	2322      	movs	r3, #34	@ 0x22
 8016bbe:	6013      	str	r3, [r2, #0]
 8016bc0:	f04f 0a00 	mov.w	sl, #0
 8016bc4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016bc6:	2b00      	cmp	r3, #0
 8016bc8:	f43f ae0b 	beq.w	80167e2 <_strtod_l+0x72>
 8016bcc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8016bce:	9805      	ldr	r0, [sp, #20]
 8016bd0:	f001 fb1c 	bl	801820c <_Bfree>
 8016bd4:	9805      	ldr	r0, [sp, #20]
 8016bd6:	4649      	mov	r1, r9
 8016bd8:	f001 fb18 	bl	801820c <_Bfree>
 8016bdc:	9805      	ldr	r0, [sp, #20]
 8016bde:	4641      	mov	r1, r8
 8016be0:	f001 fb14 	bl	801820c <_Bfree>
 8016be4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8016be6:	9805      	ldr	r0, [sp, #20]
 8016be8:	f001 fb10 	bl	801820c <_Bfree>
 8016bec:	9805      	ldr	r0, [sp, #20]
 8016bee:	4621      	mov	r1, r4
 8016bf0:	f001 fb0c 	bl	801820c <_Bfree>
 8016bf4:	e5f5      	b.n	80167e2 <_strtod_l+0x72>
 8016bf6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016bf8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8016bfc:	4293      	cmp	r3, r2
 8016bfe:	dbbc      	blt.n	8016b7a <_strtod_l+0x40a>
 8016c00:	4c3f      	ldr	r4, [pc, #252]	@ (8016d00 <_strtod_l+0x590>)
 8016c02:	f1c5 050f 	rsb	r5, r5, #15
 8016c06:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8016c0a:	4652      	mov	r2, sl
 8016c0c:	465b      	mov	r3, fp
 8016c0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016c12:	f7e9 fd01 	bl	8000618 <__aeabi_dmul>
 8016c16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016c18:	1b5d      	subs	r5, r3, r5
 8016c1a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8016c1e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8016c22:	e78f      	b.n	8016b44 <_strtod_l+0x3d4>
 8016c24:	3316      	adds	r3, #22
 8016c26:	dba8      	blt.n	8016b7a <_strtod_l+0x40a>
 8016c28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016c2a:	eba3 0808 	sub.w	r8, r3, r8
 8016c2e:	4b34      	ldr	r3, [pc, #208]	@ (8016d00 <_strtod_l+0x590>)
 8016c30:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8016c34:	e9d8 2300 	ldrd	r2, r3, [r8]
 8016c38:	4650      	mov	r0, sl
 8016c3a:	4659      	mov	r1, fp
 8016c3c:	f7e9 fe16 	bl	800086c <__aeabi_ddiv>
 8016c40:	e782      	b.n	8016b48 <_strtod_l+0x3d8>
 8016c42:	2300      	movs	r3, #0
 8016c44:	4f2f      	ldr	r7, [pc, #188]	@ (8016d04 <_strtod_l+0x594>)
 8016c46:	1124      	asrs	r4, r4, #4
 8016c48:	4650      	mov	r0, sl
 8016c4a:	4659      	mov	r1, fp
 8016c4c:	461e      	mov	r6, r3
 8016c4e:	2c01      	cmp	r4, #1
 8016c50:	dc21      	bgt.n	8016c96 <_strtod_l+0x526>
 8016c52:	b10b      	cbz	r3, 8016c58 <_strtod_l+0x4e8>
 8016c54:	4682      	mov	sl, r0
 8016c56:	468b      	mov	fp, r1
 8016c58:	492a      	ldr	r1, [pc, #168]	@ (8016d04 <_strtod_l+0x594>)
 8016c5a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8016c5e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8016c62:	4652      	mov	r2, sl
 8016c64:	465b      	mov	r3, fp
 8016c66:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016c6a:	f7e9 fcd5 	bl	8000618 <__aeabi_dmul>
 8016c6e:	4b26      	ldr	r3, [pc, #152]	@ (8016d08 <_strtod_l+0x598>)
 8016c70:	460a      	mov	r2, r1
 8016c72:	400b      	ands	r3, r1
 8016c74:	4925      	ldr	r1, [pc, #148]	@ (8016d0c <_strtod_l+0x59c>)
 8016c76:	428b      	cmp	r3, r1
 8016c78:	4682      	mov	sl, r0
 8016c7a:	d898      	bhi.n	8016bae <_strtod_l+0x43e>
 8016c7c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8016c80:	428b      	cmp	r3, r1
 8016c82:	bf86      	itte	hi
 8016c84:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8016d10 <_strtod_l+0x5a0>
 8016c88:	f04f 3aff 	movhi.w	sl, #4294967295
 8016c8c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8016c90:	2300      	movs	r3, #0
 8016c92:	9308      	str	r3, [sp, #32]
 8016c94:	e076      	b.n	8016d84 <_strtod_l+0x614>
 8016c96:	07e2      	lsls	r2, r4, #31
 8016c98:	d504      	bpl.n	8016ca4 <_strtod_l+0x534>
 8016c9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016c9e:	f7e9 fcbb 	bl	8000618 <__aeabi_dmul>
 8016ca2:	2301      	movs	r3, #1
 8016ca4:	3601      	adds	r6, #1
 8016ca6:	1064      	asrs	r4, r4, #1
 8016ca8:	3708      	adds	r7, #8
 8016caa:	e7d0      	b.n	8016c4e <_strtod_l+0x4de>
 8016cac:	d0f0      	beq.n	8016c90 <_strtod_l+0x520>
 8016cae:	4264      	negs	r4, r4
 8016cb0:	f014 020f 	ands.w	r2, r4, #15
 8016cb4:	d00a      	beq.n	8016ccc <_strtod_l+0x55c>
 8016cb6:	4b12      	ldr	r3, [pc, #72]	@ (8016d00 <_strtod_l+0x590>)
 8016cb8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016cbc:	4650      	mov	r0, sl
 8016cbe:	4659      	mov	r1, fp
 8016cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016cc4:	f7e9 fdd2 	bl	800086c <__aeabi_ddiv>
 8016cc8:	4682      	mov	sl, r0
 8016cca:	468b      	mov	fp, r1
 8016ccc:	1124      	asrs	r4, r4, #4
 8016cce:	d0df      	beq.n	8016c90 <_strtod_l+0x520>
 8016cd0:	2c1f      	cmp	r4, #31
 8016cd2:	dd1f      	ble.n	8016d14 <_strtod_l+0x5a4>
 8016cd4:	2400      	movs	r4, #0
 8016cd6:	46a0      	mov	r8, r4
 8016cd8:	940b      	str	r4, [sp, #44]	@ 0x2c
 8016cda:	46a1      	mov	r9, r4
 8016cdc:	9a05      	ldr	r2, [sp, #20]
 8016cde:	2322      	movs	r3, #34	@ 0x22
 8016ce0:	f04f 0a00 	mov.w	sl, #0
 8016ce4:	f04f 0b00 	mov.w	fp, #0
 8016ce8:	6013      	str	r3, [r2, #0]
 8016cea:	e76b      	b.n	8016bc4 <_strtod_l+0x454>
 8016cec:	08022e70 	.word	0x08022e70
 8016cf0:	08022fb4 	.word	0x08022fb4
 8016cf4:	08022e67 	.word	0x08022e67
 8016cf8:	08022e6a 	.word	0x08022e6a
 8016cfc:	08022eb6 	.word	0x08022eb6
 8016d00:	08023140 	.word	0x08023140
 8016d04:	08023118 	.word	0x08023118
 8016d08:	7ff00000 	.word	0x7ff00000
 8016d0c:	7ca00000 	.word	0x7ca00000
 8016d10:	7fefffff 	.word	0x7fefffff
 8016d14:	f014 0310 	ands.w	r3, r4, #16
 8016d18:	bf18      	it	ne
 8016d1a:	236a      	movne	r3, #106	@ 0x6a
 8016d1c:	4ea9      	ldr	r6, [pc, #676]	@ (8016fc4 <_strtod_l+0x854>)
 8016d1e:	9308      	str	r3, [sp, #32]
 8016d20:	4650      	mov	r0, sl
 8016d22:	4659      	mov	r1, fp
 8016d24:	2300      	movs	r3, #0
 8016d26:	07e7      	lsls	r7, r4, #31
 8016d28:	d504      	bpl.n	8016d34 <_strtod_l+0x5c4>
 8016d2a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8016d2e:	f7e9 fc73 	bl	8000618 <__aeabi_dmul>
 8016d32:	2301      	movs	r3, #1
 8016d34:	1064      	asrs	r4, r4, #1
 8016d36:	f106 0608 	add.w	r6, r6, #8
 8016d3a:	d1f4      	bne.n	8016d26 <_strtod_l+0x5b6>
 8016d3c:	b10b      	cbz	r3, 8016d42 <_strtod_l+0x5d2>
 8016d3e:	4682      	mov	sl, r0
 8016d40:	468b      	mov	fp, r1
 8016d42:	9b08      	ldr	r3, [sp, #32]
 8016d44:	b1b3      	cbz	r3, 8016d74 <_strtod_l+0x604>
 8016d46:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8016d4a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8016d4e:	2b00      	cmp	r3, #0
 8016d50:	4659      	mov	r1, fp
 8016d52:	dd0f      	ble.n	8016d74 <_strtod_l+0x604>
 8016d54:	2b1f      	cmp	r3, #31
 8016d56:	dd56      	ble.n	8016e06 <_strtod_l+0x696>
 8016d58:	2b34      	cmp	r3, #52	@ 0x34
 8016d5a:	bfde      	ittt	le
 8016d5c:	f04f 33ff 	movle.w	r3, #4294967295
 8016d60:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8016d64:	4093      	lslle	r3, r2
 8016d66:	f04f 0a00 	mov.w	sl, #0
 8016d6a:	bfcc      	ite	gt
 8016d6c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8016d70:	ea03 0b01 	andle.w	fp, r3, r1
 8016d74:	2200      	movs	r2, #0
 8016d76:	2300      	movs	r3, #0
 8016d78:	4650      	mov	r0, sl
 8016d7a:	4659      	mov	r1, fp
 8016d7c:	f7e9 feb4 	bl	8000ae8 <__aeabi_dcmpeq>
 8016d80:	2800      	cmp	r0, #0
 8016d82:	d1a7      	bne.n	8016cd4 <_strtod_l+0x564>
 8016d84:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016d86:	9300      	str	r3, [sp, #0]
 8016d88:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8016d8a:	9805      	ldr	r0, [sp, #20]
 8016d8c:	462b      	mov	r3, r5
 8016d8e:	464a      	mov	r2, r9
 8016d90:	f001 faa4 	bl	80182dc <__s2b>
 8016d94:	900b      	str	r0, [sp, #44]	@ 0x2c
 8016d96:	2800      	cmp	r0, #0
 8016d98:	f43f af09 	beq.w	8016bae <_strtod_l+0x43e>
 8016d9c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016d9e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016da0:	2a00      	cmp	r2, #0
 8016da2:	eba3 0308 	sub.w	r3, r3, r8
 8016da6:	bfa8      	it	ge
 8016da8:	2300      	movge	r3, #0
 8016daa:	9312      	str	r3, [sp, #72]	@ 0x48
 8016dac:	2400      	movs	r4, #0
 8016dae:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8016db2:	9316      	str	r3, [sp, #88]	@ 0x58
 8016db4:	46a0      	mov	r8, r4
 8016db6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016db8:	9805      	ldr	r0, [sp, #20]
 8016dba:	6859      	ldr	r1, [r3, #4]
 8016dbc:	f001 f9e6 	bl	801818c <_Balloc>
 8016dc0:	4681      	mov	r9, r0
 8016dc2:	2800      	cmp	r0, #0
 8016dc4:	f43f aef7 	beq.w	8016bb6 <_strtod_l+0x446>
 8016dc8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016dca:	691a      	ldr	r2, [r3, #16]
 8016dcc:	3202      	adds	r2, #2
 8016dce:	f103 010c 	add.w	r1, r3, #12
 8016dd2:	0092      	lsls	r2, r2, #2
 8016dd4:	300c      	adds	r0, #12
 8016dd6:	f000 fd58 	bl	801788a <memcpy>
 8016dda:	ec4b ab10 	vmov	d0, sl, fp
 8016dde:	9805      	ldr	r0, [sp, #20]
 8016de0:	aa1c      	add	r2, sp, #112	@ 0x70
 8016de2:	a91b      	add	r1, sp, #108	@ 0x6c
 8016de4:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8016de8:	f001 fdac 	bl	8018944 <__d2b>
 8016dec:	901a      	str	r0, [sp, #104]	@ 0x68
 8016dee:	2800      	cmp	r0, #0
 8016df0:	f43f aee1 	beq.w	8016bb6 <_strtod_l+0x446>
 8016df4:	9805      	ldr	r0, [sp, #20]
 8016df6:	2101      	movs	r1, #1
 8016df8:	f001 fb06 	bl	8018408 <__i2b>
 8016dfc:	4680      	mov	r8, r0
 8016dfe:	b948      	cbnz	r0, 8016e14 <_strtod_l+0x6a4>
 8016e00:	f04f 0800 	mov.w	r8, #0
 8016e04:	e6d7      	b.n	8016bb6 <_strtod_l+0x446>
 8016e06:	f04f 32ff 	mov.w	r2, #4294967295
 8016e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8016e0e:	ea03 0a0a 	and.w	sl, r3, sl
 8016e12:	e7af      	b.n	8016d74 <_strtod_l+0x604>
 8016e14:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8016e16:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8016e18:	2d00      	cmp	r5, #0
 8016e1a:	bfab      	itete	ge
 8016e1c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8016e1e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8016e20:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8016e22:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8016e24:	bfac      	ite	ge
 8016e26:	18ef      	addge	r7, r5, r3
 8016e28:	1b5e      	sublt	r6, r3, r5
 8016e2a:	9b08      	ldr	r3, [sp, #32]
 8016e2c:	1aed      	subs	r5, r5, r3
 8016e2e:	4415      	add	r5, r2
 8016e30:	4b65      	ldr	r3, [pc, #404]	@ (8016fc8 <_strtod_l+0x858>)
 8016e32:	3d01      	subs	r5, #1
 8016e34:	429d      	cmp	r5, r3
 8016e36:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8016e3a:	da50      	bge.n	8016ede <_strtod_l+0x76e>
 8016e3c:	1b5b      	subs	r3, r3, r5
 8016e3e:	2b1f      	cmp	r3, #31
 8016e40:	eba2 0203 	sub.w	r2, r2, r3
 8016e44:	f04f 0101 	mov.w	r1, #1
 8016e48:	dc3d      	bgt.n	8016ec6 <_strtod_l+0x756>
 8016e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8016e4e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8016e50:	2300      	movs	r3, #0
 8016e52:	9310      	str	r3, [sp, #64]	@ 0x40
 8016e54:	18bd      	adds	r5, r7, r2
 8016e56:	9b08      	ldr	r3, [sp, #32]
 8016e58:	42af      	cmp	r7, r5
 8016e5a:	4416      	add	r6, r2
 8016e5c:	441e      	add	r6, r3
 8016e5e:	463b      	mov	r3, r7
 8016e60:	bfa8      	it	ge
 8016e62:	462b      	movge	r3, r5
 8016e64:	42b3      	cmp	r3, r6
 8016e66:	bfa8      	it	ge
 8016e68:	4633      	movge	r3, r6
 8016e6a:	2b00      	cmp	r3, #0
 8016e6c:	bfc2      	ittt	gt
 8016e6e:	1aed      	subgt	r5, r5, r3
 8016e70:	1af6      	subgt	r6, r6, r3
 8016e72:	1aff      	subgt	r7, r7, r3
 8016e74:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8016e76:	2b00      	cmp	r3, #0
 8016e78:	dd16      	ble.n	8016ea8 <_strtod_l+0x738>
 8016e7a:	4641      	mov	r1, r8
 8016e7c:	9805      	ldr	r0, [sp, #20]
 8016e7e:	461a      	mov	r2, r3
 8016e80:	f001 fb7a 	bl	8018578 <__pow5mult>
 8016e84:	4680      	mov	r8, r0
 8016e86:	2800      	cmp	r0, #0
 8016e88:	d0ba      	beq.n	8016e00 <_strtod_l+0x690>
 8016e8a:	4601      	mov	r1, r0
 8016e8c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8016e8e:	9805      	ldr	r0, [sp, #20]
 8016e90:	f001 fad0 	bl	8018434 <__multiply>
 8016e94:	900a      	str	r0, [sp, #40]	@ 0x28
 8016e96:	2800      	cmp	r0, #0
 8016e98:	f43f ae8d 	beq.w	8016bb6 <_strtod_l+0x446>
 8016e9c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8016e9e:	9805      	ldr	r0, [sp, #20]
 8016ea0:	f001 f9b4 	bl	801820c <_Bfree>
 8016ea4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016ea6:	931a      	str	r3, [sp, #104]	@ 0x68
 8016ea8:	2d00      	cmp	r5, #0
 8016eaa:	dc1d      	bgt.n	8016ee8 <_strtod_l+0x778>
 8016eac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016eae:	2b00      	cmp	r3, #0
 8016eb0:	dd23      	ble.n	8016efa <_strtod_l+0x78a>
 8016eb2:	4649      	mov	r1, r9
 8016eb4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8016eb6:	9805      	ldr	r0, [sp, #20]
 8016eb8:	f001 fb5e 	bl	8018578 <__pow5mult>
 8016ebc:	4681      	mov	r9, r0
 8016ebe:	b9e0      	cbnz	r0, 8016efa <_strtod_l+0x78a>
 8016ec0:	f04f 0900 	mov.w	r9, #0
 8016ec4:	e677      	b.n	8016bb6 <_strtod_l+0x446>
 8016ec6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8016eca:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8016ece:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8016ed2:	35e2      	adds	r5, #226	@ 0xe2
 8016ed4:	fa01 f305 	lsl.w	r3, r1, r5
 8016ed8:	9310      	str	r3, [sp, #64]	@ 0x40
 8016eda:	9113      	str	r1, [sp, #76]	@ 0x4c
 8016edc:	e7ba      	b.n	8016e54 <_strtod_l+0x6e4>
 8016ede:	2300      	movs	r3, #0
 8016ee0:	9310      	str	r3, [sp, #64]	@ 0x40
 8016ee2:	2301      	movs	r3, #1
 8016ee4:	9313      	str	r3, [sp, #76]	@ 0x4c
 8016ee6:	e7b5      	b.n	8016e54 <_strtod_l+0x6e4>
 8016ee8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8016eea:	9805      	ldr	r0, [sp, #20]
 8016eec:	462a      	mov	r2, r5
 8016eee:	f001 fb9d 	bl	801862c <__lshift>
 8016ef2:	901a      	str	r0, [sp, #104]	@ 0x68
 8016ef4:	2800      	cmp	r0, #0
 8016ef6:	d1d9      	bne.n	8016eac <_strtod_l+0x73c>
 8016ef8:	e65d      	b.n	8016bb6 <_strtod_l+0x446>
 8016efa:	2e00      	cmp	r6, #0
 8016efc:	dd07      	ble.n	8016f0e <_strtod_l+0x79e>
 8016efe:	4649      	mov	r1, r9
 8016f00:	9805      	ldr	r0, [sp, #20]
 8016f02:	4632      	mov	r2, r6
 8016f04:	f001 fb92 	bl	801862c <__lshift>
 8016f08:	4681      	mov	r9, r0
 8016f0a:	2800      	cmp	r0, #0
 8016f0c:	d0d8      	beq.n	8016ec0 <_strtod_l+0x750>
 8016f0e:	2f00      	cmp	r7, #0
 8016f10:	dd08      	ble.n	8016f24 <_strtod_l+0x7b4>
 8016f12:	4641      	mov	r1, r8
 8016f14:	9805      	ldr	r0, [sp, #20]
 8016f16:	463a      	mov	r2, r7
 8016f18:	f001 fb88 	bl	801862c <__lshift>
 8016f1c:	4680      	mov	r8, r0
 8016f1e:	2800      	cmp	r0, #0
 8016f20:	f43f ae49 	beq.w	8016bb6 <_strtod_l+0x446>
 8016f24:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8016f26:	9805      	ldr	r0, [sp, #20]
 8016f28:	464a      	mov	r2, r9
 8016f2a:	f001 fc07 	bl	801873c <__mdiff>
 8016f2e:	4604      	mov	r4, r0
 8016f30:	2800      	cmp	r0, #0
 8016f32:	f43f ae40 	beq.w	8016bb6 <_strtod_l+0x446>
 8016f36:	68c3      	ldr	r3, [r0, #12]
 8016f38:	930f      	str	r3, [sp, #60]	@ 0x3c
 8016f3a:	2300      	movs	r3, #0
 8016f3c:	60c3      	str	r3, [r0, #12]
 8016f3e:	4641      	mov	r1, r8
 8016f40:	f001 fbe0 	bl	8018704 <__mcmp>
 8016f44:	2800      	cmp	r0, #0
 8016f46:	da45      	bge.n	8016fd4 <_strtod_l+0x864>
 8016f48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016f4a:	ea53 030a 	orrs.w	r3, r3, sl
 8016f4e:	d16b      	bne.n	8017028 <_strtod_l+0x8b8>
 8016f50:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016f54:	2b00      	cmp	r3, #0
 8016f56:	d167      	bne.n	8017028 <_strtod_l+0x8b8>
 8016f58:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8016f5c:	0d1b      	lsrs	r3, r3, #20
 8016f5e:	051b      	lsls	r3, r3, #20
 8016f60:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8016f64:	d960      	bls.n	8017028 <_strtod_l+0x8b8>
 8016f66:	6963      	ldr	r3, [r4, #20]
 8016f68:	b913      	cbnz	r3, 8016f70 <_strtod_l+0x800>
 8016f6a:	6923      	ldr	r3, [r4, #16]
 8016f6c:	2b01      	cmp	r3, #1
 8016f6e:	dd5b      	ble.n	8017028 <_strtod_l+0x8b8>
 8016f70:	4621      	mov	r1, r4
 8016f72:	2201      	movs	r2, #1
 8016f74:	9805      	ldr	r0, [sp, #20]
 8016f76:	f001 fb59 	bl	801862c <__lshift>
 8016f7a:	4641      	mov	r1, r8
 8016f7c:	4604      	mov	r4, r0
 8016f7e:	f001 fbc1 	bl	8018704 <__mcmp>
 8016f82:	2800      	cmp	r0, #0
 8016f84:	dd50      	ble.n	8017028 <_strtod_l+0x8b8>
 8016f86:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8016f8a:	9a08      	ldr	r2, [sp, #32]
 8016f8c:	0d1b      	lsrs	r3, r3, #20
 8016f8e:	051b      	lsls	r3, r3, #20
 8016f90:	2a00      	cmp	r2, #0
 8016f92:	d06a      	beq.n	801706a <_strtod_l+0x8fa>
 8016f94:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8016f98:	d867      	bhi.n	801706a <_strtod_l+0x8fa>
 8016f9a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8016f9e:	f67f ae9d 	bls.w	8016cdc <_strtod_l+0x56c>
 8016fa2:	4b0a      	ldr	r3, [pc, #40]	@ (8016fcc <_strtod_l+0x85c>)
 8016fa4:	4650      	mov	r0, sl
 8016fa6:	4659      	mov	r1, fp
 8016fa8:	2200      	movs	r2, #0
 8016faa:	f7e9 fb35 	bl	8000618 <__aeabi_dmul>
 8016fae:	4b08      	ldr	r3, [pc, #32]	@ (8016fd0 <_strtod_l+0x860>)
 8016fb0:	400b      	ands	r3, r1
 8016fb2:	4682      	mov	sl, r0
 8016fb4:	468b      	mov	fp, r1
 8016fb6:	2b00      	cmp	r3, #0
 8016fb8:	f47f ae08 	bne.w	8016bcc <_strtod_l+0x45c>
 8016fbc:	9a05      	ldr	r2, [sp, #20]
 8016fbe:	2322      	movs	r3, #34	@ 0x22
 8016fc0:	6013      	str	r3, [r2, #0]
 8016fc2:	e603      	b.n	8016bcc <_strtod_l+0x45c>
 8016fc4:	08022fe0 	.word	0x08022fe0
 8016fc8:	fffffc02 	.word	0xfffffc02
 8016fcc:	39500000 	.word	0x39500000
 8016fd0:	7ff00000 	.word	0x7ff00000
 8016fd4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8016fd8:	d165      	bne.n	80170a6 <_strtod_l+0x936>
 8016fda:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8016fdc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016fe0:	b35a      	cbz	r2, 801703a <_strtod_l+0x8ca>
 8016fe2:	4a9f      	ldr	r2, [pc, #636]	@ (8017260 <_strtod_l+0xaf0>)
 8016fe4:	4293      	cmp	r3, r2
 8016fe6:	d12b      	bne.n	8017040 <_strtod_l+0x8d0>
 8016fe8:	9b08      	ldr	r3, [sp, #32]
 8016fea:	4651      	mov	r1, sl
 8016fec:	b303      	cbz	r3, 8017030 <_strtod_l+0x8c0>
 8016fee:	4b9d      	ldr	r3, [pc, #628]	@ (8017264 <_strtod_l+0xaf4>)
 8016ff0:	465a      	mov	r2, fp
 8016ff2:	4013      	ands	r3, r2
 8016ff4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8016ff8:	f04f 32ff 	mov.w	r2, #4294967295
 8016ffc:	d81b      	bhi.n	8017036 <_strtod_l+0x8c6>
 8016ffe:	0d1b      	lsrs	r3, r3, #20
 8017000:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8017004:	fa02 f303 	lsl.w	r3, r2, r3
 8017008:	4299      	cmp	r1, r3
 801700a:	d119      	bne.n	8017040 <_strtod_l+0x8d0>
 801700c:	4b96      	ldr	r3, [pc, #600]	@ (8017268 <_strtod_l+0xaf8>)
 801700e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8017010:	429a      	cmp	r2, r3
 8017012:	d102      	bne.n	801701a <_strtod_l+0x8aa>
 8017014:	3101      	adds	r1, #1
 8017016:	f43f adce 	beq.w	8016bb6 <_strtod_l+0x446>
 801701a:	4b92      	ldr	r3, [pc, #584]	@ (8017264 <_strtod_l+0xaf4>)
 801701c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801701e:	401a      	ands	r2, r3
 8017020:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8017024:	f04f 0a00 	mov.w	sl, #0
 8017028:	9b08      	ldr	r3, [sp, #32]
 801702a:	2b00      	cmp	r3, #0
 801702c:	d1b9      	bne.n	8016fa2 <_strtod_l+0x832>
 801702e:	e5cd      	b.n	8016bcc <_strtod_l+0x45c>
 8017030:	f04f 33ff 	mov.w	r3, #4294967295
 8017034:	e7e8      	b.n	8017008 <_strtod_l+0x898>
 8017036:	4613      	mov	r3, r2
 8017038:	e7e6      	b.n	8017008 <_strtod_l+0x898>
 801703a:	ea53 030a 	orrs.w	r3, r3, sl
 801703e:	d0a2      	beq.n	8016f86 <_strtod_l+0x816>
 8017040:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8017042:	b1db      	cbz	r3, 801707c <_strtod_l+0x90c>
 8017044:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8017046:	4213      	tst	r3, r2
 8017048:	d0ee      	beq.n	8017028 <_strtod_l+0x8b8>
 801704a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801704c:	9a08      	ldr	r2, [sp, #32]
 801704e:	4650      	mov	r0, sl
 8017050:	4659      	mov	r1, fp
 8017052:	b1bb      	cbz	r3, 8017084 <_strtod_l+0x914>
 8017054:	f7ff fb6e 	bl	8016734 <sulp>
 8017058:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801705c:	ec53 2b10 	vmov	r2, r3, d0
 8017060:	f7e9 f924 	bl	80002ac <__adddf3>
 8017064:	4682      	mov	sl, r0
 8017066:	468b      	mov	fp, r1
 8017068:	e7de      	b.n	8017028 <_strtod_l+0x8b8>
 801706a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 801706e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8017072:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8017076:	f04f 3aff 	mov.w	sl, #4294967295
 801707a:	e7d5      	b.n	8017028 <_strtod_l+0x8b8>
 801707c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801707e:	ea13 0f0a 	tst.w	r3, sl
 8017082:	e7e1      	b.n	8017048 <_strtod_l+0x8d8>
 8017084:	f7ff fb56 	bl	8016734 <sulp>
 8017088:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801708c:	ec53 2b10 	vmov	r2, r3, d0
 8017090:	f7e9 f90a 	bl	80002a8 <__aeabi_dsub>
 8017094:	2200      	movs	r2, #0
 8017096:	2300      	movs	r3, #0
 8017098:	4682      	mov	sl, r0
 801709a:	468b      	mov	fp, r1
 801709c:	f7e9 fd24 	bl	8000ae8 <__aeabi_dcmpeq>
 80170a0:	2800      	cmp	r0, #0
 80170a2:	d0c1      	beq.n	8017028 <_strtod_l+0x8b8>
 80170a4:	e61a      	b.n	8016cdc <_strtod_l+0x56c>
 80170a6:	4641      	mov	r1, r8
 80170a8:	4620      	mov	r0, r4
 80170aa:	f001 fca3 	bl	80189f4 <__ratio>
 80170ae:	ec57 6b10 	vmov	r6, r7, d0
 80170b2:	2200      	movs	r2, #0
 80170b4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80170b8:	4630      	mov	r0, r6
 80170ba:	4639      	mov	r1, r7
 80170bc:	f7e9 fd28 	bl	8000b10 <__aeabi_dcmple>
 80170c0:	2800      	cmp	r0, #0
 80170c2:	d06f      	beq.n	80171a4 <_strtod_l+0xa34>
 80170c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80170c6:	2b00      	cmp	r3, #0
 80170c8:	d17a      	bne.n	80171c0 <_strtod_l+0xa50>
 80170ca:	f1ba 0f00 	cmp.w	sl, #0
 80170ce:	d158      	bne.n	8017182 <_strtod_l+0xa12>
 80170d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80170d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80170d6:	2b00      	cmp	r3, #0
 80170d8:	d15a      	bne.n	8017190 <_strtod_l+0xa20>
 80170da:	4b64      	ldr	r3, [pc, #400]	@ (801726c <_strtod_l+0xafc>)
 80170dc:	2200      	movs	r2, #0
 80170de:	4630      	mov	r0, r6
 80170e0:	4639      	mov	r1, r7
 80170e2:	f7e9 fd0b 	bl	8000afc <__aeabi_dcmplt>
 80170e6:	2800      	cmp	r0, #0
 80170e8:	d159      	bne.n	801719e <_strtod_l+0xa2e>
 80170ea:	4630      	mov	r0, r6
 80170ec:	4639      	mov	r1, r7
 80170ee:	4b60      	ldr	r3, [pc, #384]	@ (8017270 <_strtod_l+0xb00>)
 80170f0:	2200      	movs	r2, #0
 80170f2:	f7e9 fa91 	bl	8000618 <__aeabi_dmul>
 80170f6:	4606      	mov	r6, r0
 80170f8:	460f      	mov	r7, r1
 80170fa:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80170fe:	9606      	str	r6, [sp, #24]
 8017100:	9307      	str	r3, [sp, #28]
 8017102:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8017106:	4d57      	ldr	r5, [pc, #348]	@ (8017264 <_strtod_l+0xaf4>)
 8017108:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 801710c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801710e:	401d      	ands	r5, r3
 8017110:	4b58      	ldr	r3, [pc, #352]	@ (8017274 <_strtod_l+0xb04>)
 8017112:	429d      	cmp	r5, r3
 8017114:	f040 80b2 	bne.w	801727c <_strtod_l+0xb0c>
 8017118:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801711a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 801711e:	ec4b ab10 	vmov	d0, sl, fp
 8017122:	f001 fb9f 	bl	8018864 <__ulp>
 8017126:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801712a:	ec51 0b10 	vmov	r0, r1, d0
 801712e:	f7e9 fa73 	bl	8000618 <__aeabi_dmul>
 8017132:	4652      	mov	r2, sl
 8017134:	465b      	mov	r3, fp
 8017136:	f7e9 f8b9 	bl	80002ac <__adddf3>
 801713a:	460b      	mov	r3, r1
 801713c:	4949      	ldr	r1, [pc, #292]	@ (8017264 <_strtod_l+0xaf4>)
 801713e:	4a4e      	ldr	r2, [pc, #312]	@ (8017278 <_strtod_l+0xb08>)
 8017140:	4019      	ands	r1, r3
 8017142:	4291      	cmp	r1, r2
 8017144:	4682      	mov	sl, r0
 8017146:	d942      	bls.n	80171ce <_strtod_l+0xa5e>
 8017148:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801714a:	4b47      	ldr	r3, [pc, #284]	@ (8017268 <_strtod_l+0xaf8>)
 801714c:	429a      	cmp	r2, r3
 801714e:	d103      	bne.n	8017158 <_strtod_l+0x9e8>
 8017150:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017152:	3301      	adds	r3, #1
 8017154:	f43f ad2f 	beq.w	8016bb6 <_strtod_l+0x446>
 8017158:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8017268 <_strtod_l+0xaf8>
 801715c:	f04f 3aff 	mov.w	sl, #4294967295
 8017160:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8017162:	9805      	ldr	r0, [sp, #20]
 8017164:	f001 f852 	bl	801820c <_Bfree>
 8017168:	9805      	ldr	r0, [sp, #20]
 801716a:	4649      	mov	r1, r9
 801716c:	f001 f84e 	bl	801820c <_Bfree>
 8017170:	9805      	ldr	r0, [sp, #20]
 8017172:	4641      	mov	r1, r8
 8017174:	f001 f84a 	bl	801820c <_Bfree>
 8017178:	9805      	ldr	r0, [sp, #20]
 801717a:	4621      	mov	r1, r4
 801717c:	f001 f846 	bl	801820c <_Bfree>
 8017180:	e619      	b.n	8016db6 <_strtod_l+0x646>
 8017182:	f1ba 0f01 	cmp.w	sl, #1
 8017186:	d103      	bne.n	8017190 <_strtod_l+0xa20>
 8017188:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801718a:	2b00      	cmp	r3, #0
 801718c:	f43f ada6 	beq.w	8016cdc <_strtod_l+0x56c>
 8017190:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8017240 <_strtod_l+0xad0>
 8017194:	4f35      	ldr	r7, [pc, #212]	@ (801726c <_strtod_l+0xafc>)
 8017196:	ed8d 7b06 	vstr	d7, [sp, #24]
 801719a:	2600      	movs	r6, #0
 801719c:	e7b1      	b.n	8017102 <_strtod_l+0x992>
 801719e:	4f34      	ldr	r7, [pc, #208]	@ (8017270 <_strtod_l+0xb00>)
 80171a0:	2600      	movs	r6, #0
 80171a2:	e7aa      	b.n	80170fa <_strtod_l+0x98a>
 80171a4:	4b32      	ldr	r3, [pc, #200]	@ (8017270 <_strtod_l+0xb00>)
 80171a6:	4630      	mov	r0, r6
 80171a8:	4639      	mov	r1, r7
 80171aa:	2200      	movs	r2, #0
 80171ac:	f7e9 fa34 	bl	8000618 <__aeabi_dmul>
 80171b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80171b2:	4606      	mov	r6, r0
 80171b4:	460f      	mov	r7, r1
 80171b6:	2b00      	cmp	r3, #0
 80171b8:	d09f      	beq.n	80170fa <_strtod_l+0x98a>
 80171ba:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80171be:	e7a0      	b.n	8017102 <_strtod_l+0x992>
 80171c0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8017248 <_strtod_l+0xad8>
 80171c4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80171c8:	ec57 6b17 	vmov	r6, r7, d7
 80171cc:	e799      	b.n	8017102 <_strtod_l+0x992>
 80171ce:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80171d2:	9b08      	ldr	r3, [sp, #32]
 80171d4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80171d8:	2b00      	cmp	r3, #0
 80171da:	d1c1      	bne.n	8017160 <_strtod_l+0x9f0>
 80171dc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80171e0:	0d1b      	lsrs	r3, r3, #20
 80171e2:	051b      	lsls	r3, r3, #20
 80171e4:	429d      	cmp	r5, r3
 80171e6:	d1bb      	bne.n	8017160 <_strtod_l+0x9f0>
 80171e8:	4630      	mov	r0, r6
 80171ea:	4639      	mov	r1, r7
 80171ec:	f7e9 fe82 	bl	8000ef4 <__aeabi_d2lz>
 80171f0:	f7e9 f9e4 	bl	80005bc <__aeabi_l2d>
 80171f4:	4602      	mov	r2, r0
 80171f6:	460b      	mov	r3, r1
 80171f8:	4630      	mov	r0, r6
 80171fa:	4639      	mov	r1, r7
 80171fc:	f7e9 f854 	bl	80002a8 <__aeabi_dsub>
 8017200:	460b      	mov	r3, r1
 8017202:	4602      	mov	r2, r0
 8017204:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8017208:	f3cb 0613 	ubfx	r6, fp, #0, #20
 801720c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801720e:	ea46 060a 	orr.w	r6, r6, sl
 8017212:	431e      	orrs	r6, r3
 8017214:	d06f      	beq.n	80172f6 <_strtod_l+0xb86>
 8017216:	a30e      	add	r3, pc, #56	@ (adr r3, 8017250 <_strtod_l+0xae0>)
 8017218:	e9d3 2300 	ldrd	r2, r3, [r3]
 801721c:	f7e9 fc6e 	bl	8000afc <__aeabi_dcmplt>
 8017220:	2800      	cmp	r0, #0
 8017222:	f47f acd3 	bne.w	8016bcc <_strtod_l+0x45c>
 8017226:	a30c      	add	r3, pc, #48	@ (adr r3, 8017258 <_strtod_l+0xae8>)
 8017228:	e9d3 2300 	ldrd	r2, r3, [r3]
 801722c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8017230:	f7e9 fc82 	bl	8000b38 <__aeabi_dcmpgt>
 8017234:	2800      	cmp	r0, #0
 8017236:	d093      	beq.n	8017160 <_strtod_l+0x9f0>
 8017238:	e4c8      	b.n	8016bcc <_strtod_l+0x45c>
 801723a:	bf00      	nop
 801723c:	f3af 8000 	nop.w
 8017240:	00000000 	.word	0x00000000
 8017244:	bff00000 	.word	0xbff00000
 8017248:	00000000 	.word	0x00000000
 801724c:	3ff00000 	.word	0x3ff00000
 8017250:	94a03595 	.word	0x94a03595
 8017254:	3fdfffff 	.word	0x3fdfffff
 8017258:	35afe535 	.word	0x35afe535
 801725c:	3fe00000 	.word	0x3fe00000
 8017260:	000fffff 	.word	0x000fffff
 8017264:	7ff00000 	.word	0x7ff00000
 8017268:	7fefffff 	.word	0x7fefffff
 801726c:	3ff00000 	.word	0x3ff00000
 8017270:	3fe00000 	.word	0x3fe00000
 8017274:	7fe00000 	.word	0x7fe00000
 8017278:	7c9fffff 	.word	0x7c9fffff
 801727c:	9b08      	ldr	r3, [sp, #32]
 801727e:	b323      	cbz	r3, 80172ca <_strtod_l+0xb5a>
 8017280:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8017284:	d821      	bhi.n	80172ca <_strtod_l+0xb5a>
 8017286:	a328      	add	r3, pc, #160	@ (adr r3, 8017328 <_strtod_l+0xbb8>)
 8017288:	e9d3 2300 	ldrd	r2, r3, [r3]
 801728c:	4630      	mov	r0, r6
 801728e:	4639      	mov	r1, r7
 8017290:	f7e9 fc3e 	bl	8000b10 <__aeabi_dcmple>
 8017294:	b1a0      	cbz	r0, 80172c0 <_strtod_l+0xb50>
 8017296:	4639      	mov	r1, r7
 8017298:	4630      	mov	r0, r6
 801729a:	f7e9 fc95 	bl	8000bc8 <__aeabi_d2uiz>
 801729e:	2801      	cmp	r0, #1
 80172a0:	bf38      	it	cc
 80172a2:	2001      	movcc	r0, #1
 80172a4:	f7e9 f93e 	bl	8000524 <__aeabi_ui2d>
 80172a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80172aa:	4606      	mov	r6, r0
 80172ac:	460f      	mov	r7, r1
 80172ae:	b9fb      	cbnz	r3, 80172f0 <_strtod_l+0xb80>
 80172b0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80172b4:	9014      	str	r0, [sp, #80]	@ 0x50
 80172b6:	9315      	str	r3, [sp, #84]	@ 0x54
 80172b8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80172bc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80172c0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80172c2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80172c6:	1b5b      	subs	r3, r3, r5
 80172c8:	9311      	str	r3, [sp, #68]	@ 0x44
 80172ca:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80172ce:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80172d2:	f001 fac7 	bl	8018864 <__ulp>
 80172d6:	4650      	mov	r0, sl
 80172d8:	ec53 2b10 	vmov	r2, r3, d0
 80172dc:	4659      	mov	r1, fp
 80172de:	f7e9 f99b 	bl	8000618 <__aeabi_dmul>
 80172e2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80172e6:	f7e8 ffe1 	bl	80002ac <__adddf3>
 80172ea:	4682      	mov	sl, r0
 80172ec:	468b      	mov	fp, r1
 80172ee:	e770      	b.n	80171d2 <_strtod_l+0xa62>
 80172f0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80172f4:	e7e0      	b.n	80172b8 <_strtod_l+0xb48>
 80172f6:	a30e      	add	r3, pc, #56	@ (adr r3, 8017330 <_strtod_l+0xbc0>)
 80172f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80172fc:	f7e9 fbfe 	bl	8000afc <__aeabi_dcmplt>
 8017300:	e798      	b.n	8017234 <_strtod_l+0xac4>
 8017302:	2300      	movs	r3, #0
 8017304:	930e      	str	r3, [sp, #56]	@ 0x38
 8017306:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8017308:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801730a:	6013      	str	r3, [r2, #0]
 801730c:	f7ff ba6d 	b.w	80167ea <_strtod_l+0x7a>
 8017310:	2a65      	cmp	r2, #101	@ 0x65
 8017312:	f43f ab68 	beq.w	80169e6 <_strtod_l+0x276>
 8017316:	2a45      	cmp	r2, #69	@ 0x45
 8017318:	f43f ab65 	beq.w	80169e6 <_strtod_l+0x276>
 801731c:	2301      	movs	r3, #1
 801731e:	f7ff bba0 	b.w	8016a62 <_strtod_l+0x2f2>
 8017322:	bf00      	nop
 8017324:	f3af 8000 	nop.w
 8017328:	ffc00000 	.word	0xffc00000
 801732c:	41dfffff 	.word	0x41dfffff
 8017330:	94a03595 	.word	0x94a03595
 8017334:	3fcfffff 	.word	0x3fcfffff

08017338 <strtod>:
 8017338:	460a      	mov	r2, r1
 801733a:	4601      	mov	r1, r0
 801733c:	4802      	ldr	r0, [pc, #8]	@ (8017348 <strtod+0x10>)
 801733e:	4b03      	ldr	r3, [pc, #12]	@ (801734c <strtod+0x14>)
 8017340:	6800      	ldr	r0, [r0, #0]
 8017342:	f7ff ba15 	b.w	8016770 <_strtod_l>
 8017346:	bf00      	nop
 8017348:	20000a8c 	.word	0x20000a8c
 801734c:	20000920 	.word	0x20000920

08017350 <_strtol_l.isra.0>:
 8017350:	2b24      	cmp	r3, #36	@ 0x24
 8017352:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017356:	4686      	mov	lr, r0
 8017358:	4690      	mov	r8, r2
 801735a:	d801      	bhi.n	8017360 <_strtol_l.isra.0+0x10>
 801735c:	2b01      	cmp	r3, #1
 801735e:	d106      	bne.n	801736e <_strtol_l.isra.0+0x1e>
 8017360:	f000 fa5e 	bl	8017820 <__errno>
 8017364:	2316      	movs	r3, #22
 8017366:	6003      	str	r3, [r0, #0]
 8017368:	2000      	movs	r0, #0
 801736a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801736e:	4834      	ldr	r0, [pc, #208]	@ (8017440 <_strtol_l.isra.0+0xf0>)
 8017370:	460d      	mov	r5, r1
 8017372:	462a      	mov	r2, r5
 8017374:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017378:	5d06      	ldrb	r6, [r0, r4]
 801737a:	f016 0608 	ands.w	r6, r6, #8
 801737e:	d1f8      	bne.n	8017372 <_strtol_l.isra.0+0x22>
 8017380:	2c2d      	cmp	r4, #45	@ 0x2d
 8017382:	d110      	bne.n	80173a6 <_strtol_l.isra.0+0x56>
 8017384:	782c      	ldrb	r4, [r5, #0]
 8017386:	2601      	movs	r6, #1
 8017388:	1c95      	adds	r5, r2, #2
 801738a:	f033 0210 	bics.w	r2, r3, #16
 801738e:	d115      	bne.n	80173bc <_strtol_l.isra.0+0x6c>
 8017390:	2c30      	cmp	r4, #48	@ 0x30
 8017392:	d10d      	bne.n	80173b0 <_strtol_l.isra.0+0x60>
 8017394:	782a      	ldrb	r2, [r5, #0]
 8017396:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801739a:	2a58      	cmp	r2, #88	@ 0x58
 801739c:	d108      	bne.n	80173b0 <_strtol_l.isra.0+0x60>
 801739e:	786c      	ldrb	r4, [r5, #1]
 80173a0:	3502      	adds	r5, #2
 80173a2:	2310      	movs	r3, #16
 80173a4:	e00a      	b.n	80173bc <_strtol_l.isra.0+0x6c>
 80173a6:	2c2b      	cmp	r4, #43	@ 0x2b
 80173a8:	bf04      	itt	eq
 80173aa:	782c      	ldrbeq	r4, [r5, #0]
 80173ac:	1c95      	addeq	r5, r2, #2
 80173ae:	e7ec      	b.n	801738a <_strtol_l.isra.0+0x3a>
 80173b0:	2b00      	cmp	r3, #0
 80173b2:	d1f6      	bne.n	80173a2 <_strtol_l.isra.0+0x52>
 80173b4:	2c30      	cmp	r4, #48	@ 0x30
 80173b6:	bf14      	ite	ne
 80173b8:	230a      	movne	r3, #10
 80173ba:	2308      	moveq	r3, #8
 80173bc:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80173c0:	f10c 3cff 	add.w	ip, ip, #4294967295
 80173c4:	2200      	movs	r2, #0
 80173c6:	fbbc f9f3 	udiv	r9, ip, r3
 80173ca:	4610      	mov	r0, r2
 80173cc:	fb03 ca19 	mls	sl, r3, r9, ip
 80173d0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80173d4:	2f09      	cmp	r7, #9
 80173d6:	d80f      	bhi.n	80173f8 <_strtol_l.isra.0+0xa8>
 80173d8:	463c      	mov	r4, r7
 80173da:	42a3      	cmp	r3, r4
 80173dc:	dd1b      	ble.n	8017416 <_strtol_l.isra.0+0xc6>
 80173de:	1c57      	adds	r7, r2, #1
 80173e0:	d007      	beq.n	80173f2 <_strtol_l.isra.0+0xa2>
 80173e2:	4581      	cmp	r9, r0
 80173e4:	d314      	bcc.n	8017410 <_strtol_l.isra.0+0xc0>
 80173e6:	d101      	bne.n	80173ec <_strtol_l.isra.0+0x9c>
 80173e8:	45a2      	cmp	sl, r4
 80173ea:	db11      	blt.n	8017410 <_strtol_l.isra.0+0xc0>
 80173ec:	fb00 4003 	mla	r0, r0, r3, r4
 80173f0:	2201      	movs	r2, #1
 80173f2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80173f6:	e7eb      	b.n	80173d0 <_strtol_l.isra.0+0x80>
 80173f8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80173fc:	2f19      	cmp	r7, #25
 80173fe:	d801      	bhi.n	8017404 <_strtol_l.isra.0+0xb4>
 8017400:	3c37      	subs	r4, #55	@ 0x37
 8017402:	e7ea      	b.n	80173da <_strtol_l.isra.0+0x8a>
 8017404:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8017408:	2f19      	cmp	r7, #25
 801740a:	d804      	bhi.n	8017416 <_strtol_l.isra.0+0xc6>
 801740c:	3c57      	subs	r4, #87	@ 0x57
 801740e:	e7e4      	b.n	80173da <_strtol_l.isra.0+0x8a>
 8017410:	f04f 32ff 	mov.w	r2, #4294967295
 8017414:	e7ed      	b.n	80173f2 <_strtol_l.isra.0+0xa2>
 8017416:	1c53      	adds	r3, r2, #1
 8017418:	d108      	bne.n	801742c <_strtol_l.isra.0+0xdc>
 801741a:	2322      	movs	r3, #34	@ 0x22
 801741c:	f8ce 3000 	str.w	r3, [lr]
 8017420:	4660      	mov	r0, ip
 8017422:	f1b8 0f00 	cmp.w	r8, #0
 8017426:	d0a0      	beq.n	801736a <_strtol_l.isra.0+0x1a>
 8017428:	1e69      	subs	r1, r5, #1
 801742a:	e006      	b.n	801743a <_strtol_l.isra.0+0xea>
 801742c:	b106      	cbz	r6, 8017430 <_strtol_l.isra.0+0xe0>
 801742e:	4240      	negs	r0, r0
 8017430:	f1b8 0f00 	cmp.w	r8, #0
 8017434:	d099      	beq.n	801736a <_strtol_l.isra.0+0x1a>
 8017436:	2a00      	cmp	r2, #0
 8017438:	d1f6      	bne.n	8017428 <_strtol_l.isra.0+0xd8>
 801743a:	f8c8 1000 	str.w	r1, [r8]
 801743e:	e794      	b.n	801736a <_strtol_l.isra.0+0x1a>
 8017440:	08023009 	.word	0x08023009

08017444 <strtol>:
 8017444:	4613      	mov	r3, r2
 8017446:	460a      	mov	r2, r1
 8017448:	4601      	mov	r1, r0
 801744a:	4802      	ldr	r0, [pc, #8]	@ (8017454 <strtol+0x10>)
 801744c:	6800      	ldr	r0, [r0, #0]
 801744e:	f7ff bf7f 	b.w	8017350 <_strtol_l.isra.0>
 8017452:	bf00      	nop
 8017454:	20000a8c 	.word	0x20000a8c

08017458 <std>:
 8017458:	2300      	movs	r3, #0
 801745a:	b510      	push	{r4, lr}
 801745c:	4604      	mov	r4, r0
 801745e:	e9c0 3300 	strd	r3, r3, [r0]
 8017462:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017466:	6083      	str	r3, [r0, #8]
 8017468:	8181      	strh	r1, [r0, #12]
 801746a:	6643      	str	r3, [r0, #100]	@ 0x64
 801746c:	81c2      	strh	r2, [r0, #14]
 801746e:	6183      	str	r3, [r0, #24]
 8017470:	4619      	mov	r1, r3
 8017472:	2208      	movs	r2, #8
 8017474:	305c      	adds	r0, #92	@ 0x5c
 8017476:	f000 f952 	bl	801771e <memset>
 801747a:	4b0d      	ldr	r3, [pc, #52]	@ (80174b0 <std+0x58>)
 801747c:	6263      	str	r3, [r4, #36]	@ 0x24
 801747e:	4b0d      	ldr	r3, [pc, #52]	@ (80174b4 <std+0x5c>)
 8017480:	62a3      	str	r3, [r4, #40]	@ 0x28
 8017482:	4b0d      	ldr	r3, [pc, #52]	@ (80174b8 <std+0x60>)
 8017484:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8017486:	4b0d      	ldr	r3, [pc, #52]	@ (80174bc <std+0x64>)
 8017488:	6323      	str	r3, [r4, #48]	@ 0x30
 801748a:	4b0d      	ldr	r3, [pc, #52]	@ (80174c0 <std+0x68>)
 801748c:	6224      	str	r4, [r4, #32]
 801748e:	429c      	cmp	r4, r3
 8017490:	d006      	beq.n	80174a0 <std+0x48>
 8017492:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8017496:	4294      	cmp	r4, r2
 8017498:	d002      	beq.n	80174a0 <std+0x48>
 801749a:	33d0      	adds	r3, #208	@ 0xd0
 801749c:	429c      	cmp	r4, r3
 801749e:	d105      	bne.n	80174ac <std+0x54>
 80174a0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80174a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80174a8:	f000 b9e4 	b.w	8017874 <__retarget_lock_init_recursive>
 80174ac:	bd10      	pop	{r4, pc}
 80174ae:	bf00      	nop
 80174b0:	08017645 	.word	0x08017645
 80174b4:	08017667 	.word	0x08017667
 80174b8:	0801769f 	.word	0x0801769f
 80174bc:	080176c3 	.word	0x080176c3
 80174c0:	20015314 	.word	0x20015314

080174c4 <stdio_exit_handler>:
 80174c4:	4a02      	ldr	r2, [pc, #8]	@ (80174d0 <stdio_exit_handler+0xc>)
 80174c6:	4903      	ldr	r1, [pc, #12]	@ (80174d4 <stdio_exit_handler+0x10>)
 80174c8:	4803      	ldr	r0, [pc, #12]	@ (80174d8 <stdio_exit_handler+0x14>)
 80174ca:	f000 b869 	b.w	80175a0 <_fwalk_sglue>
 80174ce:	bf00      	nop
 80174d0:	20000914 	.word	0x20000914
 80174d4:	0801944d 	.word	0x0801944d
 80174d8:	20000a90 	.word	0x20000a90

080174dc <cleanup_stdio>:
 80174dc:	6841      	ldr	r1, [r0, #4]
 80174de:	4b0c      	ldr	r3, [pc, #48]	@ (8017510 <cleanup_stdio+0x34>)
 80174e0:	4299      	cmp	r1, r3
 80174e2:	b510      	push	{r4, lr}
 80174e4:	4604      	mov	r4, r0
 80174e6:	d001      	beq.n	80174ec <cleanup_stdio+0x10>
 80174e8:	f001 ffb0 	bl	801944c <_fflush_r>
 80174ec:	68a1      	ldr	r1, [r4, #8]
 80174ee:	4b09      	ldr	r3, [pc, #36]	@ (8017514 <cleanup_stdio+0x38>)
 80174f0:	4299      	cmp	r1, r3
 80174f2:	d002      	beq.n	80174fa <cleanup_stdio+0x1e>
 80174f4:	4620      	mov	r0, r4
 80174f6:	f001 ffa9 	bl	801944c <_fflush_r>
 80174fa:	68e1      	ldr	r1, [r4, #12]
 80174fc:	4b06      	ldr	r3, [pc, #24]	@ (8017518 <cleanup_stdio+0x3c>)
 80174fe:	4299      	cmp	r1, r3
 8017500:	d004      	beq.n	801750c <cleanup_stdio+0x30>
 8017502:	4620      	mov	r0, r4
 8017504:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017508:	f001 bfa0 	b.w	801944c <_fflush_r>
 801750c:	bd10      	pop	{r4, pc}
 801750e:	bf00      	nop
 8017510:	20015314 	.word	0x20015314
 8017514:	2001537c 	.word	0x2001537c
 8017518:	200153e4 	.word	0x200153e4

0801751c <global_stdio_init.part.0>:
 801751c:	b510      	push	{r4, lr}
 801751e:	4b0b      	ldr	r3, [pc, #44]	@ (801754c <global_stdio_init.part.0+0x30>)
 8017520:	4c0b      	ldr	r4, [pc, #44]	@ (8017550 <global_stdio_init.part.0+0x34>)
 8017522:	4a0c      	ldr	r2, [pc, #48]	@ (8017554 <global_stdio_init.part.0+0x38>)
 8017524:	601a      	str	r2, [r3, #0]
 8017526:	4620      	mov	r0, r4
 8017528:	2200      	movs	r2, #0
 801752a:	2104      	movs	r1, #4
 801752c:	f7ff ff94 	bl	8017458 <std>
 8017530:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8017534:	2201      	movs	r2, #1
 8017536:	2109      	movs	r1, #9
 8017538:	f7ff ff8e 	bl	8017458 <std>
 801753c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8017540:	2202      	movs	r2, #2
 8017542:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017546:	2112      	movs	r1, #18
 8017548:	f7ff bf86 	b.w	8017458 <std>
 801754c:	2001544c 	.word	0x2001544c
 8017550:	20015314 	.word	0x20015314
 8017554:	080174c5 	.word	0x080174c5

08017558 <__sfp_lock_acquire>:
 8017558:	4801      	ldr	r0, [pc, #4]	@ (8017560 <__sfp_lock_acquire+0x8>)
 801755a:	f000 b98c 	b.w	8017876 <__retarget_lock_acquire_recursive>
 801755e:	bf00      	nop
 8017560:	20015455 	.word	0x20015455

08017564 <__sfp_lock_release>:
 8017564:	4801      	ldr	r0, [pc, #4]	@ (801756c <__sfp_lock_release+0x8>)
 8017566:	f000 b987 	b.w	8017878 <__retarget_lock_release_recursive>
 801756a:	bf00      	nop
 801756c:	20015455 	.word	0x20015455

08017570 <__sinit>:
 8017570:	b510      	push	{r4, lr}
 8017572:	4604      	mov	r4, r0
 8017574:	f7ff fff0 	bl	8017558 <__sfp_lock_acquire>
 8017578:	6a23      	ldr	r3, [r4, #32]
 801757a:	b11b      	cbz	r3, 8017584 <__sinit+0x14>
 801757c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017580:	f7ff bff0 	b.w	8017564 <__sfp_lock_release>
 8017584:	4b04      	ldr	r3, [pc, #16]	@ (8017598 <__sinit+0x28>)
 8017586:	6223      	str	r3, [r4, #32]
 8017588:	4b04      	ldr	r3, [pc, #16]	@ (801759c <__sinit+0x2c>)
 801758a:	681b      	ldr	r3, [r3, #0]
 801758c:	2b00      	cmp	r3, #0
 801758e:	d1f5      	bne.n	801757c <__sinit+0xc>
 8017590:	f7ff ffc4 	bl	801751c <global_stdio_init.part.0>
 8017594:	e7f2      	b.n	801757c <__sinit+0xc>
 8017596:	bf00      	nop
 8017598:	080174dd 	.word	0x080174dd
 801759c:	2001544c 	.word	0x2001544c

080175a0 <_fwalk_sglue>:
 80175a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80175a4:	4607      	mov	r7, r0
 80175a6:	4688      	mov	r8, r1
 80175a8:	4614      	mov	r4, r2
 80175aa:	2600      	movs	r6, #0
 80175ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80175b0:	f1b9 0901 	subs.w	r9, r9, #1
 80175b4:	d505      	bpl.n	80175c2 <_fwalk_sglue+0x22>
 80175b6:	6824      	ldr	r4, [r4, #0]
 80175b8:	2c00      	cmp	r4, #0
 80175ba:	d1f7      	bne.n	80175ac <_fwalk_sglue+0xc>
 80175bc:	4630      	mov	r0, r6
 80175be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80175c2:	89ab      	ldrh	r3, [r5, #12]
 80175c4:	2b01      	cmp	r3, #1
 80175c6:	d907      	bls.n	80175d8 <_fwalk_sglue+0x38>
 80175c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80175cc:	3301      	adds	r3, #1
 80175ce:	d003      	beq.n	80175d8 <_fwalk_sglue+0x38>
 80175d0:	4629      	mov	r1, r5
 80175d2:	4638      	mov	r0, r7
 80175d4:	47c0      	blx	r8
 80175d6:	4306      	orrs	r6, r0
 80175d8:	3568      	adds	r5, #104	@ 0x68
 80175da:	e7e9      	b.n	80175b0 <_fwalk_sglue+0x10>

080175dc <iprintf>:
 80175dc:	b40f      	push	{r0, r1, r2, r3}
 80175de:	b507      	push	{r0, r1, r2, lr}
 80175e0:	4906      	ldr	r1, [pc, #24]	@ (80175fc <iprintf+0x20>)
 80175e2:	ab04      	add	r3, sp, #16
 80175e4:	6808      	ldr	r0, [r1, #0]
 80175e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80175ea:	6881      	ldr	r1, [r0, #8]
 80175ec:	9301      	str	r3, [sp, #4]
 80175ee:	f001 fc05 	bl	8018dfc <_vfiprintf_r>
 80175f2:	b003      	add	sp, #12
 80175f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80175f8:	b004      	add	sp, #16
 80175fa:	4770      	bx	lr
 80175fc:	20000a8c 	.word	0x20000a8c

08017600 <siprintf>:
 8017600:	b40e      	push	{r1, r2, r3}
 8017602:	b510      	push	{r4, lr}
 8017604:	b09d      	sub	sp, #116	@ 0x74
 8017606:	ab1f      	add	r3, sp, #124	@ 0x7c
 8017608:	9002      	str	r0, [sp, #8]
 801760a:	9006      	str	r0, [sp, #24]
 801760c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8017610:	480a      	ldr	r0, [pc, #40]	@ (801763c <siprintf+0x3c>)
 8017612:	9107      	str	r1, [sp, #28]
 8017614:	9104      	str	r1, [sp, #16]
 8017616:	490a      	ldr	r1, [pc, #40]	@ (8017640 <siprintf+0x40>)
 8017618:	f853 2b04 	ldr.w	r2, [r3], #4
 801761c:	9105      	str	r1, [sp, #20]
 801761e:	2400      	movs	r4, #0
 8017620:	a902      	add	r1, sp, #8
 8017622:	6800      	ldr	r0, [r0, #0]
 8017624:	9301      	str	r3, [sp, #4]
 8017626:	941b      	str	r4, [sp, #108]	@ 0x6c
 8017628:	f001 fac2 	bl	8018bb0 <_svfiprintf_r>
 801762c:	9b02      	ldr	r3, [sp, #8]
 801762e:	701c      	strb	r4, [r3, #0]
 8017630:	b01d      	add	sp, #116	@ 0x74
 8017632:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017636:	b003      	add	sp, #12
 8017638:	4770      	bx	lr
 801763a:	bf00      	nop
 801763c:	20000a8c 	.word	0x20000a8c
 8017640:	ffff0208 	.word	0xffff0208

08017644 <__sread>:
 8017644:	b510      	push	{r4, lr}
 8017646:	460c      	mov	r4, r1
 8017648:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801764c:	f000 f8c4 	bl	80177d8 <_read_r>
 8017650:	2800      	cmp	r0, #0
 8017652:	bfab      	itete	ge
 8017654:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8017656:	89a3      	ldrhlt	r3, [r4, #12]
 8017658:	181b      	addge	r3, r3, r0
 801765a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801765e:	bfac      	ite	ge
 8017660:	6563      	strge	r3, [r4, #84]	@ 0x54
 8017662:	81a3      	strhlt	r3, [r4, #12]
 8017664:	bd10      	pop	{r4, pc}

08017666 <__swrite>:
 8017666:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801766a:	461f      	mov	r7, r3
 801766c:	898b      	ldrh	r3, [r1, #12]
 801766e:	05db      	lsls	r3, r3, #23
 8017670:	4605      	mov	r5, r0
 8017672:	460c      	mov	r4, r1
 8017674:	4616      	mov	r6, r2
 8017676:	d505      	bpl.n	8017684 <__swrite+0x1e>
 8017678:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801767c:	2302      	movs	r3, #2
 801767e:	2200      	movs	r2, #0
 8017680:	f000 f898 	bl	80177b4 <_lseek_r>
 8017684:	89a3      	ldrh	r3, [r4, #12]
 8017686:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801768a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801768e:	81a3      	strh	r3, [r4, #12]
 8017690:	4632      	mov	r2, r6
 8017692:	463b      	mov	r3, r7
 8017694:	4628      	mov	r0, r5
 8017696:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801769a:	f000 b8af 	b.w	80177fc <_write_r>

0801769e <__sseek>:
 801769e:	b510      	push	{r4, lr}
 80176a0:	460c      	mov	r4, r1
 80176a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80176a6:	f000 f885 	bl	80177b4 <_lseek_r>
 80176aa:	1c43      	adds	r3, r0, #1
 80176ac:	89a3      	ldrh	r3, [r4, #12]
 80176ae:	bf15      	itete	ne
 80176b0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80176b2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80176b6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80176ba:	81a3      	strheq	r3, [r4, #12]
 80176bc:	bf18      	it	ne
 80176be:	81a3      	strhne	r3, [r4, #12]
 80176c0:	bd10      	pop	{r4, pc}

080176c2 <__sclose>:
 80176c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80176c6:	f000 b865 	b.w	8017794 <_close_r>

080176ca <memcmp>:
 80176ca:	b510      	push	{r4, lr}
 80176cc:	3901      	subs	r1, #1
 80176ce:	4402      	add	r2, r0
 80176d0:	4290      	cmp	r0, r2
 80176d2:	d101      	bne.n	80176d8 <memcmp+0xe>
 80176d4:	2000      	movs	r0, #0
 80176d6:	e005      	b.n	80176e4 <memcmp+0x1a>
 80176d8:	7803      	ldrb	r3, [r0, #0]
 80176da:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80176de:	42a3      	cmp	r3, r4
 80176e0:	d001      	beq.n	80176e6 <memcmp+0x1c>
 80176e2:	1b18      	subs	r0, r3, r4
 80176e4:	bd10      	pop	{r4, pc}
 80176e6:	3001      	adds	r0, #1
 80176e8:	e7f2      	b.n	80176d0 <memcmp+0x6>

080176ea <memmove>:
 80176ea:	4288      	cmp	r0, r1
 80176ec:	b510      	push	{r4, lr}
 80176ee:	eb01 0402 	add.w	r4, r1, r2
 80176f2:	d902      	bls.n	80176fa <memmove+0x10>
 80176f4:	4284      	cmp	r4, r0
 80176f6:	4623      	mov	r3, r4
 80176f8:	d807      	bhi.n	801770a <memmove+0x20>
 80176fa:	1e43      	subs	r3, r0, #1
 80176fc:	42a1      	cmp	r1, r4
 80176fe:	d008      	beq.n	8017712 <memmove+0x28>
 8017700:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017704:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017708:	e7f8      	b.n	80176fc <memmove+0x12>
 801770a:	4402      	add	r2, r0
 801770c:	4601      	mov	r1, r0
 801770e:	428a      	cmp	r2, r1
 8017710:	d100      	bne.n	8017714 <memmove+0x2a>
 8017712:	bd10      	pop	{r4, pc}
 8017714:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017718:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801771c:	e7f7      	b.n	801770e <memmove+0x24>

0801771e <memset>:
 801771e:	4402      	add	r2, r0
 8017720:	4603      	mov	r3, r0
 8017722:	4293      	cmp	r3, r2
 8017724:	d100      	bne.n	8017728 <memset+0xa>
 8017726:	4770      	bx	lr
 8017728:	f803 1b01 	strb.w	r1, [r3], #1
 801772c:	e7f9      	b.n	8017722 <memset+0x4>

0801772e <strchr>:
 801772e:	b2c9      	uxtb	r1, r1
 8017730:	4603      	mov	r3, r0
 8017732:	4618      	mov	r0, r3
 8017734:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017738:	b112      	cbz	r2, 8017740 <strchr+0x12>
 801773a:	428a      	cmp	r2, r1
 801773c:	d1f9      	bne.n	8017732 <strchr+0x4>
 801773e:	4770      	bx	lr
 8017740:	2900      	cmp	r1, #0
 8017742:	bf18      	it	ne
 8017744:	2000      	movne	r0, #0
 8017746:	4770      	bx	lr

08017748 <strncmp>:
 8017748:	b510      	push	{r4, lr}
 801774a:	b16a      	cbz	r2, 8017768 <strncmp+0x20>
 801774c:	3901      	subs	r1, #1
 801774e:	1884      	adds	r4, r0, r2
 8017750:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017754:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8017758:	429a      	cmp	r2, r3
 801775a:	d103      	bne.n	8017764 <strncmp+0x1c>
 801775c:	42a0      	cmp	r0, r4
 801775e:	d001      	beq.n	8017764 <strncmp+0x1c>
 8017760:	2a00      	cmp	r2, #0
 8017762:	d1f5      	bne.n	8017750 <strncmp+0x8>
 8017764:	1ad0      	subs	r0, r2, r3
 8017766:	bd10      	pop	{r4, pc}
 8017768:	4610      	mov	r0, r2
 801776a:	e7fc      	b.n	8017766 <strncmp+0x1e>

0801776c <strncpy>:
 801776c:	b510      	push	{r4, lr}
 801776e:	3901      	subs	r1, #1
 8017770:	4603      	mov	r3, r0
 8017772:	b132      	cbz	r2, 8017782 <strncpy+0x16>
 8017774:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8017778:	f803 4b01 	strb.w	r4, [r3], #1
 801777c:	3a01      	subs	r2, #1
 801777e:	2c00      	cmp	r4, #0
 8017780:	d1f7      	bne.n	8017772 <strncpy+0x6>
 8017782:	441a      	add	r2, r3
 8017784:	2100      	movs	r1, #0
 8017786:	4293      	cmp	r3, r2
 8017788:	d100      	bne.n	801778c <strncpy+0x20>
 801778a:	bd10      	pop	{r4, pc}
 801778c:	f803 1b01 	strb.w	r1, [r3], #1
 8017790:	e7f9      	b.n	8017786 <strncpy+0x1a>
	...

08017794 <_close_r>:
 8017794:	b538      	push	{r3, r4, r5, lr}
 8017796:	4d06      	ldr	r5, [pc, #24]	@ (80177b0 <_close_r+0x1c>)
 8017798:	2300      	movs	r3, #0
 801779a:	4604      	mov	r4, r0
 801779c:	4608      	mov	r0, r1
 801779e:	602b      	str	r3, [r5, #0]
 80177a0:	f7ee fed2 	bl	8006548 <_close>
 80177a4:	1c43      	adds	r3, r0, #1
 80177a6:	d102      	bne.n	80177ae <_close_r+0x1a>
 80177a8:	682b      	ldr	r3, [r5, #0]
 80177aa:	b103      	cbz	r3, 80177ae <_close_r+0x1a>
 80177ac:	6023      	str	r3, [r4, #0]
 80177ae:	bd38      	pop	{r3, r4, r5, pc}
 80177b0:	20015450 	.word	0x20015450

080177b4 <_lseek_r>:
 80177b4:	b538      	push	{r3, r4, r5, lr}
 80177b6:	4d07      	ldr	r5, [pc, #28]	@ (80177d4 <_lseek_r+0x20>)
 80177b8:	4604      	mov	r4, r0
 80177ba:	4608      	mov	r0, r1
 80177bc:	4611      	mov	r1, r2
 80177be:	2200      	movs	r2, #0
 80177c0:	602a      	str	r2, [r5, #0]
 80177c2:	461a      	mov	r2, r3
 80177c4:	f7ee fee7 	bl	8006596 <_lseek>
 80177c8:	1c43      	adds	r3, r0, #1
 80177ca:	d102      	bne.n	80177d2 <_lseek_r+0x1e>
 80177cc:	682b      	ldr	r3, [r5, #0]
 80177ce:	b103      	cbz	r3, 80177d2 <_lseek_r+0x1e>
 80177d0:	6023      	str	r3, [r4, #0]
 80177d2:	bd38      	pop	{r3, r4, r5, pc}
 80177d4:	20015450 	.word	0x20015450

080177d8 <_read_r>:
 80177d8:	b538      	push	{r3, r4, r5, lr}
 80177da:	4d07      	ldr	r5, [pc, #28]	@ (80177f8 <_read_r+0x20>)
 80177dc:	4604      	mov	r4, r0
 80177de:	4608      	mov	r0, r1
 80177e0:	4611      	mov	r1, r2
 80177e2:	2200      	movs	r2, #0
 80177e4:	602a      	str	r2, [r5, #0]
 80177e6:	461a      	mov	r2, r3
 80177e8:	f7ee fe75 	bl	80064d6 <_read>
 80177ec:	1c43      	adds	r3, r0, #1
 80177ee:	d102      	bne.n	80177f6 <_read_r+0x1e>
 80177f0:	682b      	ldr	r3, [r5, #0]
 80177f2:	b103      	cbz	r3, 80177f6 <_read_r+0x1e>
 80177f4:	6023      	str	r3, [r4, #0]
 80177f6:	bd38      	pop	{r3, r4, r5, pc}
 80177f8:	20015450 	.word	0x20015450

080177fc <_write_r>:
 80177fc:	b538      	push	{r3, r4, r5, lr}
 80177fe:	4d07      	ldr	r5, [pc, #28]	@ (801781c <_write_r+0x20>)
 8017800:	4604      	mov	r4, r0
 8017802:	4608      	mov	r0, r1
 8017804:	4611      	mov	r1, r2
 8017806:	2200      	movs	r2, #0
 8017808:	602a      	str	r2, [r5, #0]
 801780a:	461a      	mov	r2, r3
 801780c:	f7ee fe80 	bl	8006510 <_write>
 8017810:	1c43      	adds	r3, r0, #1
 8017812:	d102      	bne.n	801781a <_write_r+0x1e>
 8017814:	682b      	ldr	r3, [r5, #0]
 8017816:	b103      	cbz	r3, 801781a <_write_r+0x1e>
 8017818:	6023      	str	r3, [r4, #0]
 801781a:	bd38      	pop	{r3, r4, r5, pc}
 801781c:	20015450 	.word	0x20015450

08017820 <__errno>:
 8017820:	4b01      	ldr	r3, [pc, #4]	@ (8017828 <__errno+0x8>)
 8017822:	6818      	ldr	r0, [r3, #0]
 8017824:	4770      	bx	lr
 8017826:	bf00      	nop
 8017828:	20000a8c 	.word	0x20000a8c

0801782c <__libc_init_array>:
 801782c:	b570      	push	{r4, r5, r6, lr}
 801782e:	4d0d      	ldr	r5, [pc, #52]	@ (8017864 <__libc_init_array+0x38>)
 8017830:	4c0d      	ldr	r4, [pc, #52]	@ (8017868 <__libc_init_array+0x3c>)
 8017832:	1b64      	subs	r4, r4, r5
 8017834:	10a4      	asrs	r4, r4, #2
 8017836:	2600      	movs	r6, #0
 8017838:	42a6      	cmp	r6, r4
 801783a:	d109      	bne.n	8017850 <__libc_init_array+0x24>
 801783c:	4d0b      	ldr	r5, [pc, #44]	@ (801786c <__libc_init_array+0x40>)
 801783e:	4c0c      	ldr	r4, [pc, #48]	@ (8017870 <__libc_init_array+0x44>)
 8017840:	f002 fb34 	bl	8019eac <_init>
 8017844:	1b64      	subs	r4, r4, r5
 8017846:	10a4      	asrs	r4, r4, #2
 8017848:	2600      	movs	r6, #0
 801784a:	42a6      	cmp	r6, r4
 801784c:	d105      	bne.n	801785a <__libc_init_array+0x2e>
 801784e:	bd70      	pop	{r4, r5, r6, pc}
 8017850:	f855 3b04 	ldr.w	r3, [r5], #4
 8017854:	4798      	blx	r3
 8017856:	3601      	adds	r6, #1
 8017858:	e7ee      	b.n	8017838 <__libc_init_array+0xc>
 801785a:	f855 3b04 	ldr.w	r3, [r5], #4
 801785e:	4798      	blx	r3
 8017860:	3601      	adds	r6, #1
 8017862:	e7f2      	b.n	801784a <__libc_init_array+0x1e>
 8017864:	08023260 	.word	0x08023260
 8017868:	08023260 	.word	0x08023260
 801786c:	08023260 	.word	0x08023260
 8017870:	08023264 	.word	0x08023264

08017874 <__retarget_lock_init_recursive>:
 8017874:	4770      	bx	lr

08017876 <__retarget_lock_acquire_recursive>:
 8017876:	4770      	bx	lr

08017878 <__retarget_lock_release_recursive>:
 8017878:	4770      	bx	lr

0801787a <strcpy>:
 801787a:	4603      	mov	r3, r0
 801787c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017880:	f803 2b01 	strb.w	r2, [r3], #1
 8017884:	2a00      	cmp	r2, #0
 8017886:	d1f9      	bne.n	801787c <strcpy+0x2>
 8017888:	4770      	bx	lr

0801788a <memcpy>:
 801788a:	440a      	add	r2, r1
 801788c:	4291      	cmp	r1, r2
 801788e:	f100 33ff 	add.w	r3, r0, #4294967295
 8017892:	d100      	bne.n	8017896 <memcpy+0xc>
 8017894:	4770      	bx	lr
 8017896:	b510      	push	{r4, lr}
 8017898:	f811 4b01 	ldrb.w	r4, [r1], #1
 801789c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80178a0:	4291      	cmp	r1, r2
 80178a2:	d1f9      	bne.n	8017898 <memcpy+0xe>
 80178a4:	bd10      	pop	{r4, pc}
	...

080178a8 <nan>:
 80178a8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80178b0 <nan+0x8>
 80178ac:	4770      	bx	lr
 80178ae:	bf00      	nop
 80178b0:	00000000 	.word	0x00000000
 80178b4:	7ff80000 	.word	0x7ff80000

080178b8 <__assert_func>:
 80178b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80178ba:	4614      	mov	r4, r2
 80178bc:	461a      	mov	r2, r3
 80178be:	4b09      	ldr	r3, [pc, #36]	@ (80178e4 <__assert_func+0x2c>)
 80178c0:	681b      	ldr	r3, [r3, #0]
 80178c2:	4605      	mov	r5, r0
 80178c4:	68d8      	ldr	r0, [r3, #12]
 80178c6:	b14c      	cbz	r4, 80178dc <__assert_func+0x24>
 80178c8:	4b07      	ldr	r3, [pc, #28]	@ (80178e8 <__assert_func+0x30>)
 80178ca:	9100      	str	r1, [sp, #0]
 80178cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80178d0:	4906      	ldr	r1, [pc, #24]	@ (80178ec <__assert_func+0x34>)
 80178d2:	462b      	mov	r3, r5
 80178d4:	f001 fde2 	bl	801949c <fiprintf>
 80178d8:	f001 fe96 	bl	8019608 <abort>
 80178dc:	4b04      	ldr	r3, [pc, #16]	@ (80178f0 <__assert_func+0x38>)
 80178de:	461c      	mov	r4, r3
 80178e0:	e7f3      	b.n	80178ca <__assert_func+0x12>
 80178e2:	bf00      	nop
 80178e4:	20000a8c 	.word	0x20000a8c
 80178e8:	08022e7b 	.word	0x08022e7b
 80178ec:	08022e88 	.word	0x08022e88
 80178f0:	08022eb6 	.word	0x08022eb6

080178f4 <_free_r>:
 80178f4:	b538      	push	{r3, r4, r5, lr}
 80178f6:	4605      	mov	r5, r0
 80178f8:	2900      	cmp	r1, #0
 80178fa:	d041      	beq.n	8017980 <_free_r+0x8c>
 80178fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017900:	1f0c      	subs	r4, r1, #4
 8017902:	2b00      	cmp	r3, #0
 8017904:	bfb8      	it	lt
 8017906:	18e4      	addlt	r4, r4, r3
 8017908:	f000 fc34 	bl	8018174 <__malloc_lock>
 801790c:	4a1d      	ldr	r2, [pc, #116]	@ (8017984 <_free_r+0x90>)
 801790e:	6813      	ldr	r3, [r2, #0]
 8017910:	b933      	cbnz	r3, 8017920 <_free_r+0x2c>
 8017912:	6063      	str	r3, [r4, #4]
 8017914:	6014      	str	r4, [r2, #0]
 8017916:	4628      	mov	r0, r5
 8017918:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801791c:	f000 bc30 	b.w	8018180 <__malloc_unlock>
 8017920:	42a3      	cmp	r3, r4
 8017922:	d908      	bls.n	8017936 <_free_r+0x42>
 8017924:	6820      	ldr	r0, [r4, #0]
 8017926:	1821      	adds	r1, r4, r0
 8017928:	428b      	cmp	r3, r1
 801792a:	bf01      	itttt	eq
 801792c:	6819      	ldreq	r1, [r3, #0]
 801792e:	685b      	ldreq	r3, [r3, #4]
 8017930:	1809      	addeq	r1, r1, r0
 8017932:	6021      	streq	r1, [r4, #0]
 8017934:	e7ed      	b.n	8017912 <_free_r+0x1e>
 8017936:	461a      	mov	r2, r3
 8017938:	685b      	ldr	r3, [r3, #4]
 801793a:	b10b      	cbz	r3, 8017940 <_free_r+0x4c>
 801793c:	42a3      	cmp	r3, r4
 801793e:	d9fa      	bls.n	8017936 <_free_r+0x42>
 8017940:	6811      	ldr	r1, [r2, #0]
 8017942:	1850      	adds	r0, r2, r1
 8017944:	42a0      	cmp	r0, r4
 8017946:	d10b      	bne.n	8017960 <_free_r+0x6c>
 8017948:	6820      	ldr	r0, [r4, #0]
 801794a:	4401      	add	r1, r0
 801794c:	1850      	adds	r0, r2, r1
 801794e:	4283      	cmp	r3, r0
 8017950:	6011      	str	r1, [r2, #0]
 8017952:	d1e0      	bne.n	8017916 <_free_r+0x22>
 8017954:	6818      	ldr	r0, [r3, #0]
 8017956:	685b      	ldr	r3, [r3, #4]
 8017958:	6053      	str	r3, [r2, #4]
 801795a:	4408      	add	r0, r1
 801795c:	6010      	str	r0, [r2, #0]
 801795e:	e7da      	b.n	8017916 <_free_r+0x22>
 8017960:	d902      	bls.n	8017968 <_free_r+0x74>
 8017962:	230c      	movs	r3, #12
 8017964:	602b      	str	r3, [r5, #0]
 8017966:	e7d6      	b.n	8017916 <_free_r+0x22>
 8017968:	6820      	ldr	r0, [r4, #0]
 801796a:	1821      	adds	r1, r4, r0
 801796c:	428b      	cmp	r3, r1
 801796e:	bf04      	itt	eq
 8017970:	6819      	ldreq	r1, [r3, #0]
 8017972:	685b      	ldreq	r3, [r3, #4]
 8017974:	6063      	str	r3, [r4, #4]
 8017976:	bf04      	itt	eq
 8017978:	1809      	addeq	r1, r1, r0
 801797a:	6021      	streq	r1, [r4, #0]
 801797c:	6054      	str	r4, [r2, #4]
 801797e:	e7ca      	b.n	8017916 <_free_r+0x22>
 8017980:	bd38      	pop	{r3, r4, r5, pc}
 8017982:	bf00      	nop
 8017984:	2001545c 	.word	0x2001545c

08017988 <rshift>:
 8017988:	6903      	ldr	r3, [r0, #16]
 801798a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801798e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017992:	ea4f 1261 	mov.w	r2, r1, asr #5
 8017996:	f100 0414 	add.w	r4, r0, #20
 801799a:	dd45      	ble.n	8017a28 <rshift+0xa0>
 801799c:	f011 011f 	ands.w	r1, r1, #31
 80179a0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80179a4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80179a8:	d10c      	bne.n	80179c4 <rshift+0x3c>
 80179aa:	f100 0710 	add.w	r7, r0, #16
 80179ae:	4629      	mov	r1, r5
 80179b0:	42b1      	cmp	r1, r6
 80179b2:	d334      	bcc.n	8017a1e <rshift+0x96>
 80179b4:	1a9b      	subs	r3, r3, r2
 80179b6:	009b      	lsls	r3, r3, #2
 80179b8:	1eea      	subs	r2, r5, #3
 80179ba:	4296      	cmp	r6, r2
 80179bc:	bf38      	it	cc
 80179be:	2300      	movcc	r3, #0
 80179c0:	4423      	add	r3, r4
 80179c2:	e015      	b.n	80179f0 <rshift+0x68>
 80179c4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80179c8:	f1c1 0820 	rsb	r8, r1, #32
 80179cc:	40cf      	lsrs	r7, r1
 80179ce:	f105 0e04 	add.w	lr, r5, #4
 80179d2:	46a1      	mov	r9, r4
 80179d4:	4576      	cmp	r6, lr
 80179d6:	46f4      	mov	ip, lr
 80179d8:	d815      	bhi.n	8017a06 <rshift+0x7e>
 80179da:	1a9a      	subs	r2, r3, r2
 80179dc:	0092      	lsls	r2, r2, #2
 80179de:	3a04      	subs	r2, #4
 80179e0:	3501      	adds	r5, #1
 80179e2:	42ae      	cmp	r6, r5
 80179e4:	bf38      	it	cc
 80179e6:	2200      	movcc	r2, #0
 80179e8:	18a3      	adds	r3, r4, r2
 80179ea:	50a7      	str	r7, [r4, r2]
 80179ec:	b107      	cbz	r7, 80179f0 <rshift+0x68>
 80179ee:	3304      	adds	r3, #4
 80179f0:	1b1a      	subs	r2, r3, r4
 80179f2:	42a3      	cmp	r3, r4
 80179f4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80179f8:	bf08      	it	eq
 80179fa:	2300      	moveq	r3, #0
 80179fc:	6102      	str	r2, [r0, #16]
 80179fe:	bf08      	it	eq
 8017a00:	6143      	streq	r3, [r0, #20]
 8017a02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017a06:	f8dc c000 	ldr.w	ip, [ip]
 8017a0a:	fa0c fc08 	lsl.w	ip, ip, r8
 8017a0e:	ea4c 0707 	orr.w	r7, ip, r7
 8017a12:	f849 7b04 	str.w	r7, [r9], #4
 8017a16:	f85e 7b04 	ldr.w	r7, [lr], #4
 8017a1a:	40cf      	lsrs	r7, r1
 8017a1c:	e7da      	b.n	80179d4 <rshift+0x4c>
 8017a1e:	f851 cb04 	ldr.w	ip, [r1], #4
 8017a22:	f847 cf04 	str.w	ip, [r7, #4]!
 8017a26:	e7c3      	b.n	80179b0 <rshift+0x28>
 8017a28:	4623      	mov	r3, r4
 8017a2a:	e7e1      	b.n	80179f0 <rshift+0x68>

08017a2c <__hexdig_fun>:
 8017a2c:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8017a30:	2b09      	cmp	r3, #9
 8017a32:	d802      	bhi.n	8017a3a <__hexdig_fun+0xe>
 8017a34:	3820      	subs	r0, #32
 8017a36:	b2c0      	uxtb	r0, r0
 8017a38:	4770      	bx	lr
 8017a3a:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8017a3e:	2b05      	cmp	r3, #5
 8017a40:	d801      	bhi.n	8017a46 <__hexdig_fun+0x1a>
 8017a42:	3847      	subs	r0, #71	@ 0x47
 8017a44:	e7f7      	b.n	8017a36 <__hexdig_fun+0xa>
 8017a46:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8017a4a:	2b05      	cmp	r3, #5
 8017a4c:	d801      	bhi.n	8017a52 <__hexdig_fun+0x26>
 8017a4e:	3827      	subs	r0, #39	@ 0x27
 8017a50:	e7f1      	b.n	8017a36 <__hexdig_fun+0xa>
 8017a52:	2000      	movs	r0, #0
 8017a54:	4770      	bx	lr
	...

08017a58 <__gethex>:
 8017a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a5c:	b085      	sub	sp, #20
 8017a5e:	468a      	mov	sl, r1
 8017a60:	9302      	str	r3, [sp, #8]
 8017a62:	680b      	ldr	r3, [r1, #0]
 8017a64:	9001      	str	r0, [sp, #4]
 8017a66:	4690      	mov	r8, r2
 8017a68:	1c9c      	adds	r4, r3, #2
 8017a6a:	46a1      	mov	r9, r4
 8017a6c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8017a70:	2830      	cmp	r0, #48	@ 0x30
 8017a72:	d0fa      	beq.n	8017a6a <__gethex+0x12>
 8017a74:	eba9 0303 	sub.w	r3, r9, r3
 8017a78:	f1a3 0b02 	sub.w	fp, r3, #2
 8017a7c:	f7ff ffd6 	bl	8017a2c <__hexdig_fun>
 8017a80:	4605      	mov	r5, r0
 8017a82:	2800      	cmp	r0, #0
 8017a84:	d168      	bne.n	8017b58 <__gethex+0x100>
 8017a86:	49a0      	ldr	r1, [pc, #640]	@ (8017d08 <__gethex+0x2b0>)
 8017a88:	2201      	movs	r2, #1
 8017a8a:	4648      	mov	r0, r9
 8017a8c:	f7ff fe5c 	bl	8017748 <strncmp>
 8017a90:	4607      	mov	r7, r0
 8017a92:	2800      	cmp	r0, #0
 8017a94:	d167      	bne.n	8017b66 <__gethex+0x10e>
 8017a96:	f899 0001 	ldrb.w	r0, [r9, #1]
 8017a9a:	4626      	mov	r6, r4
 8017a9c:	f7ff ffc6 	bl	8017a2c <__hexdig_fun>
 8017aa0:	2800      	cmp	r0, #0
 8017aa2:	d062      	beq.n	8017b6a <__gethex+0x112>
 8017aa4:	4623      	mov	r3, r4
 8017aa6:	7818      	ldrb	r0, [r3, #0]
 8017aa8:	2830      	cmp	r0, #48	@ 0x30
 8017aaa:	4699      	mov	r9, r3
 8017aac:	f103 0301 	add.w	r3, r3, #1
 8017ab0:	d0f9      	beq.n	8017aa6 <__gethex+0x4e>
 8017ab2:	f7ff ffbb 	bl	8017a2c <__hexdig_fun>
 8017ab6:	fab0 f580 	clz	r5, r0
 8017aba:	096d      	lsrs	r5, r5, #5
 8017abc:	f04f 0b01 	mov.w	fp, #1
 8017ac0:	464a      	mov	r2, r9
 8017ac2:	4616      	mov	r6, r2
 8017ac4:	3201      	adds	r2, #1
 8017ac6:	7830      	ldrb	r0, [r6, #0]
 8017ac8:	f7ff ffb0 	bl	8017a2c <__hexdig_fun>
 8017acc:	2800      	cmp	r0, #0
 8017ace:	d1f8      	bne.n	8017ac2 <__gethex+0x6a>
 8017ad0:	498d      	ldr	r1, [pc, #564]	@ (8017d08 <__gethex+0x2b0>)
 8017ad2:	2201      	movs	r2, #1
 8017ad4:	4630      	mov	r0, r6
 8017ad6:	f7ff fe37 	bl	8017748 <strncmp>
 8017ada:	2800      	cmp	r0, #0
 8017adc:	d13f      	bne.n	8017b5e <__gethex+0x106>
 8017ade:	b944      	cbnz	r4, 8017af2 <__gethex+0x9a>
 8017ae0:	1c74      	adds	r4, r6, #1
 8017ae2:	4622      	mov	r2, r4
 8017ae4:	4616      	mov	r6, r2
 8017ae6:	3201      	adds	r2, #1
 8017ae8:	7830      	ldrb	r0, [r6, #0]
 8017aea:	f7ff ff9f 	bl	8017a2c <__hexdig_fun>
 8017aee:	2800      	cmp	r0, #0
 8017af0:	d1f8      	bne.n	8017ae4 <__gethex+0x8c>
 8017af2:	1ba4      	subs	r4, r4, r6
 8017af4:	00a7      	lsls	r7, r4, #2
 8017af6:	7833      	ldrb	r3, [r6, #0]
 8017af8:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8017afc:	2b50      	cmp	r3, #80	@ 0x50
 8017afe:	d13e      	bne.n	8017b7e <__gethex+0x126>
 8017b00:	7873      	ldrb	r3, [r6, #1]
 8017b02:	2b2b      	cmp	r3, #43	@ 0x2b
 8017b04:	d033      	beq.n	8017b6e <__gethex+0x116>
 8017b06:	2b2d      	cmp	r3, #45	@ 0x2d
 8017b08:	d034      	beq.n	8017b74 <__gethex+0x11c>
 8017b0a:	1c71      	adds	r1, r6, #1
 8017b0c:	2400      	movs	r4, #0
 8017b0e:	7808      	ldrb	r0, [r1, #0]
 8017b10:	f7ff ff8c 	bl	8017a2c <__hexdig_fun>
 8017b14:	1e43      	subs	r3, r0, #1
 8017b16:	b2db      	uxtb	r3, r3
 8017b18:	2b18      	cmp	r3, #24
 8017b1a:	d830      	bhi.n	8017b7e <__gethex+0x126>
 8017b1c:	f1a0 0210 	sub.w	r2, r0, #16
 8017b20:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8017b24:	f7ff ff82 	bl	8017a2c <__hexdig_fun>
 8017b28:	f100 3cff 	add.w	ip, r0, #4294967295
 8017b2c:	fa5f fc8c 	uxtb.w	ip, ip
 8017b30:	f1bc 0f18 	cmp.w	ip, #24
 8017b34:	f04f 030a 	mov.w	r3, #10
 8017b38:	d91e      	bls.n	8017b78 <__gethex+0x120>
 8017b3a:	b104      	cbz	r4, 8017b3e <__gethex+0xe6>
 8017b3c:	4252      	negs	r2, r2
 8017b3e:	4417      	add	r7, r2
 8017b40:	f8ca 1000 	str.w	r1, [sl]
 8017b44:	b1ed      	cbz	r5, 8017b82 <__gethex+0x12a>
 8017b46:	f1bb 0f00 	cmp.w	fp, #0
 8017b4a:	bf0c      	ite	eq
 8017b4c:	2506      	moveq	r5, #6
 8017b4e:	2500      	movne	r5, #0
 8017b50:	4628      	mov	r0, r5
 8017b52:	b005      	add	sp, #20
 8017b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b58:	2500      	movs	r5, #0
 8017b5a:	462c      	mov	r4, r5
 8017b5c:	e7b0      	b.n	8017ac0 <__gethex+0x68>
 8017b5e:	2c00      	cmp	r4, #0
 8017b60:	d1c7      	bne.n	8017af2 <__gethex+0x9a>
 8017b62:	4627      	mov	r7, r4
 8017b64:	e7c7      	b.n	8017af6 <__gethex+0x9e>
 8017b66:	464e      	mov	r6, r9
 8017b68:	462f      	mov	r7, r5
 8017b6a:	2501      	movs	r5, #1
 8017b6c:	e7c3      	b.n	8017af6 <__gethex+0x9e>
 8017b6e:	2400      	movs	r4, #0
 8017b70:	1cb1      	adds	r1, r6, #2
 8017b72:	e7cc      	b.n	8017b0e <__gethex+0xb6>
 8017b74:	2401      	movs	r4, #1
 8017b76:	e7fb      	b.n	8017b70 <__gethex+0x118>
 8017b78:	fb03 0002 	mla	r0, r3, r2, r0
 8017b7c:	e7ce      	b.n	8017b1c <__gethex+0xc4>
 8017b7e:	4631      	mov	r1, r6
 8017b80:	e7de      	b.n	8017b40 <__gethex+0xe8>
 8017b82:	eba6 0309 	sub.w	r3, r6, r9
 8017b86:	3b01      	subs	r3, #1
 8017b88:	4629      	mov	r1, r5
 8017b8a:	2b07      	cmp	r3, #7
 8017b8c:	dc0a      	bgt.n	8017ba4 <__gethex+0x14c>
 8017b8e:	9801      	ldr	r0, [sp, #4]
 8017b90:	f000 fafc 	bl	801818c <_Balloc>
 8017b94:	4604      	mov	r4, r0
 8017b96:	b940      	cbnz	r0, 8017baa <__gethex+0x152>
 8017b98:	4b5c      	ldr	r3, [pc, #368]	@ (8017d0c <__gethex+0x2b4>)
 8017b9a:	4602      	mov	r2, r0
 8017b9c:	21e4      	movs	r1, #228	@ 0xe4
 8017b9e:	485c      	ldr	r0, [pc, #368]	@ (8017d10 <__gethex+0x2b8>)
 8017ba0:	f7ff fe8a 	bl	80178b8 <__assert_func>
 8017ba4:	3101      	adds	r1, #1
 8017ba6:	105b      	asrs	r3, r3, #1
 8017ba8:	e7ef      	b.n	8017b8a <__gethex+0x132>
 8017baa:	f100 0a14 	add.w	sl, r0, #20
 8017bae:	2300      	movs	r3, #0
 8017bb0:	4655      	mov	r5, sl
 8017bb2:	469b      	mov	fp, r3
 8017bb4:	45b1      	cmp	r9, r6
 8017bb6:	d337      	bcc.n	8017c28 <__gethex+0x1d0>
 8017bb8:	f845 bb04 	str.w	fp, [r5], #4
 8017bbc:	eba5 050a 	sub.w	r5, r5, sl
 8017bc0:	10ad      	asrs	r5, r5, #2
 8017bc2:	6125      	str	r5, [r4, #16]
 8017bc4:	4658      	mov	r0, fp
 8017bc6:	f000 fbd3 	bl	8018370 <__hi0bits>
 8017bca:	016d      	lsls	r5, r5, #5
 8017bcc:	f8d8 6000 	ldr.w	r6, [r8]
 8017bd0:	1a2d      	subs	r5, r5, r0
 8017bd2:	42b5      	cmp	r5, r6
 8017bd4:	dd54      	ble.n	8017c80 <__gethex+0x228>
 8017bd6:	1bad      	subs	r5, r5, r6
 8017bd8:	4629      	mov	r1, r5
 8017bda:	4620      	mov	r0, r4
 8017bdc:	f000 ff5f 	bl	8018a9e <__any_on>
 8017be0:	4681      	mov	r9, r0
 8017be2:	b178      	cbz	r0, 8017c04 <__gethex+0x1ac>
 8017be4:	1e6b      	subs	r3, r5, #1
 8017be6:	1159      	asrs	r1, r3, #5
 8017be8:	f003 021f 	and.w	r2, r3, #31
 8017bec:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8017bf0:	f04f 0901 	mov.w	r9, #1
 8017bf4:	fa09 f202 	lsl.w	r2, r9, r2
 8017bf8:	420a      	tst	r2, r1
 8017bfa:	d003      	beq.n	8017c04 <__gethex+0x1ac>
 8017bfc:	454b      	cmp	r3, r9
 8017bfe:	dc36      	bgt.n	8017c6e <__gethex+0x216>
 8017c00:	f04f 0902 	mov.w	r9, #2
 8017c04:	4629      	mov	r1, r5
 8017c06:	4620      	mov	r0, r4
 8017c08:	f7ff febe 	bl	8017988 <rshift>
 8017c0c:	442f      	add	r7, r5
 8017c0e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017c12:	42bb      	cmp	r3, r7
 8017c14:	da42      	bge.n	8017c9c <__gethex+0x244>
 8017c16:	9801      	ldr	r0, [sp, #4]
 8017c18:	4621      	mov	r1, r4
 8017c1a:	f000 faf7 	bl	801820c <_Bfree>
 8017c1e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8017c20:	2300      	movs	r3, #0
 8017c22:	6013      	str	r3, [r2, #0]
 8017c24:	25a3      	movs	r5, #163	@ 0xa3
 8017c26:	e793      	b.n	8017b50 <__gethex+0xf8>
 8017c28:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8017c2c:	2a2e      	cmp	r2, #46	@ 0x2e
 8017c2e:	d012      	beq.n	8017c56 <__gethex+0x1fe>
 8017c30:	2b20      	cmp	r3, #32
 8017c32:	d104      	bne.n	8017c3e <__gethex+0x1e6>
 8017c34:	f845 bb04 	str.w	fp, [r5], #4
 8017c38:	f04f 0b00 	mov.w	fp, #0
 8017c3c:	465b      	mov	r3, fp
 8017c3e:	7830      	ldrb	r0, [r6, #0]
 8017c40:	9303      	str	r3, [sp, #12]
 8017c42:	f7ff fef3 	bl	8017a2c <__hexdig_fun>
 8017c46:	9b03      	ldr	r3, [sp, #12]
 8017c48:	f000 000f 	and.w	r0, r0, #15
 8017c4c:	4098      	lsls	r0, r3
 8017c4e:	ea4b 0b00 	orr.w	fp, fp, r0
 8017c52:	3304      	adds	r3, #4
 8017c54:	e7ae      	b.n	8017bb4 <__gethex+0x15c>
 8017c56:	45b1      	cmp	r9, r6
 8017c58:	d8ea      	bhi.n	8017c30 <__gethex+0x1d8>
 8017c5a:	492b      	ldr	r1, [pc, #172]	@ (8017d08 <__gethex+0x2b0>)
 8017c5c:	9303      	str	r3, [sp, #12]
 8017c5e:	2201      	movs	r2, #1
 8017c60:	4630      	mov	r0, r6
 8017c62:	f7ff fd71 	bl	8017748 <strncmp>
 8017c66:	9b03      	ldr	r3, [sp, #12]
 8017c68:	2800      	cmp	r0, #0
 8017c6a:	d1e1      	bne.n	8017c30 <__gethex+0x1d8>
 8017c6c:	e7a2      	b.n	8017bb4 <__gethex+0x15c>
 8017c6e:	1ea9      	subs	r1, r5, #2
 8017c70:	4620      	mov	r0, r4
 8017c72:	f000 ff14 	bl	8018a9e <__any_on>
 8017c76:	2800      	cmp	r0, #0
 8017c78:	d0c2      	beq.n	8017c00 <__gethex+0x1a8>
 8017c7a:	f04f 0903 	mov.w	r9, #3
 8017c7e:	e7c1      	b.n	8017c04 <__gethex+0x1ac>
 8017c80:	da09      	bge.n	8017c96 <__gethex+0x23e>
 8017c82:	1b75      	subs	r5, r6, r5
 8017c84:	4621      	mov	r1, r4
 8017c86:	9801      	ldr	r0, [sp, #4]
 8017c88:	462a      	mov	r2, r5
 8017c8a:	f000 fccf 	bl	801862c <__lshift>
 8017c8e:	1b7f      	subs	r7, r7, r5
 8017c90:	4604      	mov	r4, r0
 8017c92:	f100 0a14 	add.w	sl, r0, #20
 8017c96:	f04f 0900 	mov.w	r9, #0
 8017c9a:	e7b8      	b.n	8017c0e <__gethex+0x1b6>
 8017c9c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8017ca0:	42bd      	cmp	r5, r7
 8017ca2:	dd6f      	ble.n	8017d84 <__gethex+0x32c>
 8017ca4:	1bed      	subs	r5, r5, r7
 8017ca6:	42ae      	cmp	r6, r5
 8017ca8:	dc34      	bgt.n	8017d14 <__gethex+0x2bc>
 8017caa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017cae:	2b02      	cmp	r3, #2
 8017cb0:	d022      	beq.n	8017cf8 <__gethex+0x2a0>
 8017cb2:	2b03      	cmp	r3, #3
 8017cb4:	d024      	beq.n	8017d00 <__gethex+0x2a8>
 8017cb6:	2b01      	cmp	r3, #1
 8017cb8:	d115      	bne.n	8017ce6 <__gethex+0x28e>
 8017cba:	42ae      	cmp	r6, r5
 8017cbc:	d113      	bne.n	8017ce6 <__gethex+0x28e>
 8017cbe:	2e01      	cmp	r6, #1
 8017cc0:	d10b      	bne.n	8017cda <__gethex+0x282>
 8017cc2:	9a02      	ldr	r2, [sp, #8]
 8017cc4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8017cc8:	6013      	str	r3, [r2, #0]
 8017cca:	2301      	movs	r3, #1
 8017ccc:	6123      	str	r3, [r4, #16]
 8017cce:	f8ca 3000 	str.w	r3, [sl]
 8017cd2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017cd4:	2562      	movs	r5, #98	@ 0x62
 8017cd6:	601c      	str	r4, [r3, #0]
 8017cd8:	e73a      	b.n	8017b50 <__gethex+0xf8>
 8017cda:	1e71      	subs	r1, r6, #1
 8017cdc:	4620      	mov	r0, r4
 8017cde:	f000 fede 	bl	8018a9e <__any_on>
 8017ce2:	2800      	cmp	r0, #0
 8017ce4:	d1ed      	bne.n	8017cc2 <__gethex+0x26a>
 8017ce6:	9801      	ldr	r0, [sp, #4]
 8017ce8:	4621      	mov	r1, r4
 8017cea:	f000 fa8f 	bl	801820c <_Bfree>
 8017cee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8017cf0:	2300      	movs	r3, #0
 8017cf2:	6013      	str	r3, [r2, #0]
 8017cf4:	2550      	movs	r5, #80	@ 0x50
 8017cf6:	e72b      	b.n	8017b50 <__gethex+0xf8>
 8017cf8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017cfa:	2b00      	cmp	r3, #0
 8017cfc:	d1f3      	bne.n	8017ce6 <__gethex+0x28e>
 8017cfe:	e7e0      	b.n	8017cc2 <__gethex+0x26a>
 8017d00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017d02:	2b00      	cmp	r3, #0
 8017d04:	d1dd      	bne.n	8017cc2 <__gethex+0x26a>
 8017d06:	e7ee      	b.n	8017ce6 <__gethex+0x28e>
 8017d08:	08022e65 	.word	0x08022e65
 8017d0c:	08022eb7 	.word	0x08022eb7
 8017d10:	08022ec8 	.word	0x08022ec8
 8017d14:	1e6f      	subs	r7, r5, #1
 8017d16:	f1b9 0f00 	cmp.w	r9, #0
 8017d1a:	d130      	bne.n	8017d7e <__gethex+0x326>
 8017d1c:	b127      	cbz	r7, 8017d28 <__gethex+0x2d0>
 8017d1e:	4639      	mov	r1, r7
 8017d20:	4620      	mov	r0, r4
 8017d22:	f000 febc 	bl	8018a9e <__any_on>
 8017d26:	4681      	mov	r9, r0
 8017d28:	117a      	asrs	r2, r7, #5
 8017d2a:	2301      	movs	r3, #1
 8017d2c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8017d30:	f007 071f 	and.w	r7, r7, #31
 8017d34:	40bb      	lsls	r3, r7
 8017d36:	4213      	tst	r3, r2
 8017d38:	4629      	mov	r1, r5
 8017d3a:	4620      	mov	r0, r4
 8017d3c:	bf18      	it	ne
 8017d3e:	f049 0902 	orrne.w	r9, r9, #2
 8017d42:	f7ff fe21 	bl	8017988 <rshift>
 8017d46:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8017d4a:	1b76      	subs	r6, r6, r5
 8017d4c:	2502      	movs	r5, #2
 8017d4e:	f1b9 0f00 	cmp.w	r9, #0
 8017d52:	d047      	beq.n	8017de4 <__gethex+0x38c>
 8017d54:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017d58:	2b02      	cmp	r3, #2
 8017d5a:	d015      	beq.n	8017d88 <__gethex+0x330>
 8017d5c:	2b03      	cmp	r3, #3
 8017d5e:	d017      	beq.n	8017d90 <__gethex+0x338>
 8017d60:	2b01      	cmp	r3, #1
 8017d62:	d109      	bne.n	8017d78 <__gethex+0x320>
 8017d64:	f019 0f02 	tst.w	r9, #2
 8017d68:	d006      	beq.n	8017d78 <__gethex+0x320>
 8017d6a:	f8da 3000 	ldr.w	r3, [sl]
 8017d6e:	ea49 0903 	orr.w	r9, r9, r3
 8017d72:	f019 0f01 	tst.w	r9, #1
 8017d76:	d10e      	bne.n	8017d96 <__gethex+0x33e>
 8017d78:	f045 0510 	orr.w	r5, r5, #16
 8017d7c:	e032      	b.n	8017de4 <__gethex+0x38c>
 8017d7e:	f04f 0901 	mov.w	r9, #1
 8017d82:	e7d1      	b.n	8017d28 <__gethex+0x2d0>
 8017d84:	2501      	movs	r5, #1
 8017d86:	e7e2      	b.n	8017d4e <__gethex+0x2f6>
 8017d88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017d8a:	f1c3 0301 	rsb	r3, r3, #1
 8017d8e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8017d90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017d92:	2b00      	cmp	r3, #0
 8017d94:	d0f0      	beq.n	8017d78 <__gethex+0x320>
 8017d96:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8017d9a:	f104 0314 	add.w	r3, r4, #20
 8017d9e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8017da2:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8017da6:	f04f 0c00 	mov.w	ip, #0
 8017daa:	4618      	mov	r0, r3
 8017dac:	f853 2b04 	ldr.w	r2, [r3], #4
 8017db0:	f1b2 3fff 	cmp.w	r2, #4294967295
 8017db4:	d01b      	beq.n	8017dee <__gethex+0x396>
 8017db6:	3201      	adds	r2, #1
 8017db8:	6002      	str	r2, [r0, #0]
 8017dba:	2d02      	cmp	r5, #2
 8017dbc:	f104 0314 	add.w	r3, r4, #20
 8017dc0:	d13c      	bne.n	8017e3c <__gethex+0x3e4>
 8017dc2:	f8d8 2000 	ldr.w	r2, [r8]
 8017dc6:	3a01      	subs	r2, #1
 8017dc8:	42b2      	cmp	r2, r6
 8017dca:	d109      	bne.n	8017de0 <__gethex+0x388>
 8017dcc:	1171      	asrs	r1, r6, #5
 8017dce:	2201      	movs	r2, #1
 8017dd0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8017dd4:	f006 061f 	and.w	r6, r6, #31
 8017dd8:	fa02 f606 	lsl.w	r6, r2, r6
 8017ddc:	421e      	tst	r6, r3
 8017dde:	d13a      	bne.n	8017e56 <__gethex+0x3fe>
 8017de0:	f045 0520 	orr.w	r5, r5, #32
 8017de4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017de6:	601c      	str	r4, [r3, #0]
 8017de8:	9b02      	ldr	r3, [sp, #8]
 8017dea:	601f      	str	r7, [r3, #0]
 8017dec:	e6b0      	b.n	8017b50 <__gethex+0xf8>
 8017dee:	4299      	cmp	r1, r3
 8017df0:	f843 cc04 	str.w	ip, [r3, #-4]
 8017df4:	d8d9      	bhi.n	8017daa <__gethex+0x352>
 8017df6:	68a3      	ldr	r3, [r4, #8]
 8017df8:	459b      	cmp	fp, r3
 8017dfa:	db17      	blt.n	8017e2c <__gethex+0x3d4>
 8017dfc:	6861      	ldr	r1, [r4, #4]
 8017dfe:	9801      	ldr	r0, [sp, #4]
 8017e00:	3101      	adds	r1, #1
 8017e02:	f000 f9c3 	bl	801818c <_Balloc>
 8017e06:	4681      	mov	r9, r0
 8017e08:	b918      	cbnz	r0, 8017e12 <__gethex+0x3ba>
 8017e0a:	4b1a      	ldr	r3, [pc, #104]	@ (8017e74 <__gethex+0x41c>)
 8017e0c:	4602      	mov	r2, r0
 8017e0e:	2184      	movs	r1, #132	@ 0x84
 8017e10:	e6c5      	b.n	8017b9e <__gethex+0x146>
 8017e12:	6922      	ldr	r2, [r4, #16]
 8017e14:	3202      	adds	r2, #2
 8017e16:	f104 010c 	add.w	r1, r4, #12
 8017e1a:	0092      	lsls	r2, r2, #2
 8017e1c:	300c      	adds	r0, #12
 8017e1e:	f7ff fd34 	bl	801788a <memcpy>
 8017e22:	4621      	mov	r1, r4
 8017e24:	9801      	ldr	r0, [sp, #4]
 8017e26:	f000 f9f1 	bl	801820c <_Bfree>
 8017e2a:	464c      	mov	r4, r9
 8017e2c:	6923      	ldr	r3, [r4, #16]
 8017e2e:	1c5a      	adds	r2, r3, #1
 8017e30:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8017e34:	6122      	str	r2, [r4, #16]
 8017e36:	2201      	movs	r2, #1
 8017e38:	615a      	str	r2, [r3, #20]
 8017e3a:	e7be      	b.n	8017dba <__gethex+0x362>
 8017e3c:	6922      	ldr	r2, [r4, #16]
 8017e3e:	455a      	cmp	r2, fp
 8017e40:	dd0b      	ble.n	8017e5a <__gethex+0x402>
 8017e42:	2101      	movs	r1, #1
 8017e44:	4620      	mov	r0, r4
 8017e46:	f7ff fd9f 	bl	8017988 <rshift>
 8017e4a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017e4e:	3701      	adds	r7, #1
 8017e50:	42bb      	cmp	r3, r7
 8017e52:	f6ff aee0 	blt.w	8017c16 <__gethex+0x1be>
 8017e56:	2501      	movs	r5, #1
 8017e58:	e7c2      	b.n	8017de0 <__gethex+0x388>
 8017e5a:	f016 061f 	ands.w	r6, r6, #31
 8017e5e:	d0fa      	beq.n	8017e56 <__gethex+0x3fe>
 8017e60:	4453      	add	r3, sl
 8017e62:	f1c6 0620 	rsb	r6, r6, #32
 8017e66:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8017e6a:	f000 fa81 	bl	8018370 <__hi0bits>
 8017e6e:	42b0      	cmp	r0, r6
 8017e70:	dbe7      	blt.n	8017e42 <__gethex+0x3ea>
 8017e72:	e7f0      	b.n	8017e56 <__gethex+0x3fe>
 8017e74:	08022eb7 	.word	0x08022eb7

08017e78 <L_shift>:
 8017e78:	f1c2 0208 	rsb	r2, r2, #8
 8017e7c:	0092      	lsls	r2, r2, #2
 8017e7e:	b570      	push	{r4, r5, r6, lr}
 8017e80:	f1c2 0620 	rsb	r6, r2, #32
 8017e84:	6843      	ldr	r3, [r0, #4]
 8017e86:	6804      	ldr	r4, [r0, #0]
 8017e88:	fa03 f506 	lsl.w	r5, r3, r6
 8017e8c:	432c      	orrs	r4, r5
 8017e8e:	40d3      	lsrs	r3, r2
 8017e90:	6004      	str	r4, [r0, #0]
 8017e92:	f840 3f04 	str.w	r3, [r0, #4]!
 8017e96:	4288      	cmp	r0, r1
 8017e98:	d3f4      	bcc.n	8017e84 <L_shift+0xc>
 8017e9a:	bd70      	pop	{r4, r5, r6, pc}

08017e9c <__match>:
 8017e9c:	b530      	push	{r4, r5, lr}
 8017e9e:	6803      	ldr	r3, [r0, #0]
 8017ea0:	3301      	adds	r3, #1
 8017ea2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017ea6:	b914      	cbnz	r4, 8017eae <__match+0x12>
 8017ea8:	6003      	str	r3, [r0, #0]
 8017eaa:	2001      	movs	r0, #1
 8017eac:	bd30      	pop	{r4, r5, pc}
 8017eae:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017eb2:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8017eb6:	2d19      	cmp	r5, #25
 8017eb8:	bf98      	it	ls
 8017eba:	3220      	addls	r2, #32
 8017ebc:	42a2      	cmp	r2, r4
 8017ebe:	d0f0      	beq.n	8017ea2 <__match+0x6>
 8017ec0:	2000      	movs	r0, #0
 8017ec2:	e7f3      	b.n	8017eac <__match+0x10>

08017ec4 <__hexnan>:
 8017ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ec8:	680b      	ldr	r3, [r1, #0]
 8017eca:	6801      	ldr	r1, [r0, #0]
 8017ecc:	115e      	asrs	r6, r3, #5
 8017ece:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8017ed2:	f013 031f 	ands.w	r3, r3, #31
 8017ed6:	b087      	sub	sp, #28
 8017ed8:	bf18      	it	ne
 8017eda:	3604      	addne	r6, #4
 8017edc:	2500      	movs	r5, #0
 8017ede:	1f37      	subs	r7, r6, #4
 8017ee0:	4682      	mov	sl, r0
 8017ee2:	4690      	mov	r8, r2
 8017ee4:	9301      	str	r3, [sp, #4]
 8017ee6:	f846 5c04 	str.w	r5, [r6, #-4]
 8017eea:	46b9      	mov	r9, r7
 8017eec:	463c      	mov	r4, r7
 8017eee:	9502      	str	r5, [sp, #8]
 8017ef0:	46ab      	mov	fp, r5
 8017ef2:	784a      	ldrb	r2, [r1, #1]
 8017ef4:	1c4b      	adds	r3, r1, #1
 8017ef6:	9303      	str	r3, [sp, #12]
 8017ef8:	b342      	cbz	r2, 8017f4c <__hexnan+0x88>
 8017efa:	4610      	mov	r0, r2
 8017efc:	9105      	str	r1, [sp, #20]
 8017efe:	9204      	str	r2, [sp, #16]
 8017f00:	f7ff fd94 	bl	8017a2c <__hexdig_fun>
 8017f04:	2800      	cmp	r0, #0
 8017f06:	d151      	bne.n	8017fac <__hexnan+0xe8>
 8017f08:	9a04      	ldr	r2, [sp, #16]
 8017f0a:	9905      	ldr	r1, [sp, #20]
 8017f0c:	2a20      	cmp	r2, #32
 8017f0e:	d818      	bhi.n	8017f42 <__hexnan+0x7e>
 8017f10:	9b02      	ldr	r3, [sp, #8]
 8017f12:	459b      	cmp	fp, r3
 8017f14:	dd13      	ble.n	8017f3e <__hexnan+0x7a>
 8017f16:	454c      	cmp	r4, r9
 8017f18:	d206      	bcs.n	8017f28 <__hexnan+0x64>
 8017f1a:	2d07      	cmp	r5, #7
 8017f1c:	dc04      	bgt.n	8017f28 <__hexnan+0x64>
 8017f1e:	462a      	mov	r2, r5
 8017f20:	4649      	mov	r1, r9
 8017f22:	4620      	mov	r0, r4
 8017f24:	f7ff ffa8 	bl	8017e78 <L_shift>
 8017f28:	4544      	cmp	r4, r8
 8017f2a:	d952      	bls.n	8017fd2 <__hexnan+0x10e>
 8017f2c:	2300      	movs	r3, #0
 8017f2e:	f1a4 0904 	sub.w	r9, r4, #4
 8017f32:	f844 3c04 	str.w	r3, [r4, #-4]
 8017f36:	f8cd b008 	str.w	fp, [sp, #8]
 8017f3a:	464c      	mov	r4, r9
 8017f3c:	461d      	mov	r5, r3
 8017f3e:	9903      	ldr	r1, [sp, #12]
 8017f40:	e7d7      	b.n	8017ef2 <__hexnan+0x2e>
 8017f42:	2a29      	cmp	r2, #41	@ 0x29
 8017f44:	d157      	bne.n	8017ff6 <__hexnan+0x132>
 8017f46:	3102      	adds	r1, #2
 8017f48:	f8ca 1000 	str.w	r1, [sl]
 8017f4c:	f1bb 0f00 	cmp.w	fp, #0
 8017f50:	d051      	beq.n	8017ff6 <__hexnan+0x132>
 8017f52:	454c      	cmp	r4, r9
 8017f54:	d206      	bcs.n	8017f64 <__hexnan+0xa0>
 8017f56:	2d07      	cmp	r5, #7
 8017f58:	dc04      	bgt.n	8017f64 <__hexnan+0xa0>
 8017f5a:	462a      	mov	r2, r5
 8017f5c:	4649      	mov	r1, r9
 8017f5e:	4620      	mov	r0, r4
 8017f60:	f7ff ff8a 	bl	8017e78 <L_shift>
 8017f64:	4544      	cmp	r4, r8
 8017f66:	d936      	bls.n	8017fd6 <__hexnan+0x112>
 8017f68:	f1a8 0204 	sub.w	r2, r8, #4
 8017f6c:	4623      	mov	r3, r4
 8017f6e:	f853 1b04 	ldr.w	r1, [r3], #4
 8017f72:	f842 1f04 	str.w	r1, [r2, #4]!
 8017f76:	429f      	cmp	r7, r3
 8017f78:	d2f9      	bcs.n	8017f6e <__hexnan+0xaa>
 8017f7a:	1b3b      	subs	r3, r7, r4
 8017f7c:	f023 0303 	bic.w	r3, r3, #3
 8017f80:	3304      	adds	r3, #4
 8017f82:	3401      	adds	r4, #1
 8017f84:	3e03      	subs	r6, #3
 8017f86:	42b4      	cmp	r4, r6
 8017f88:	bf88      	it	hi
 8017f8a:	2304      	movhi	r3, #4
 8017f8c:	4443      	add	r3, r8
 8017f8e:	2200      	movs	r2, #0
 8017f90:	f843 2b04 	str.w	r2, [r3], #4
 8017f94:	429f      	cmp	r7, r3
 8017f96:	d2fb      	bcs.n	8017f90 <__hexnan+0xcc>
 8017f98:	683b      	ldr	r3, [r7, #0]
 8017f9a:	b91b      	cbnz	r3, 8017fa4 <__hexnan+0xe0>
 8017f9c:	4547      	cmp	r7, r8
 8017f9e:	d128      	bne.n	8017ff2 <__hexnan+0x12e>
 8017fa0:	2301      	movs	r3, #1
 8017fa2:	603b      	str	r3, [r7, #0]
 8017fa4:	2005      	movs	r0, #5
 8017fa6:	b007      	add	sp, #28
 8017fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017fac:	3501      	adds	r5, #1
 8017fae:	2d08      	cmp	r5, #8
 8017fb0:	f10b 0b01 	add.w	fp, fp, #1
 8017fb4:	dd06      	ble.n	8017fc4 <__hexnan+0x100>
 8017fb6:	4544      	cmp	r4, r8
 8017fb8:	d9c1      	bls.n	8017f3e <__hexnan+0x7a>
 8017fba:	2300      	movs	r3, #0
 8017fbc:	f844 3c04 	str.w	r3, [r4, #-4]
 8017fc0:	2501      	movs	r5, #1
 8017fc2:	3c04      	subs	r4, #4
 8017fc4:	6822      	ldr	r2, [r4, #0]
 8017fc6:	f000 000f 	and.w	r0, r0, #15
 8017fca:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8017fce:	6020      	str	r0, [r4, #0]
 8017fd0:	e7b5      	b.n	8017f3e <__hexnan+0x7a>
 8017fd2:	2508      	movs	r5, #8
 8017fd4:	e7b3      	b.n	8017f3e <__hexnan+0x7a>
 8017fd6:	9b01      	ldr	r3, [sp, #4]
 8017fd8:	2b00      	cmp	r3, #0
 8017fda:	d0dd      	beq.n	8017f98 <__hexnan+0xd4>
 8017fdc:	f1c3 0320 	rsb	r3, r3, #32
 8017fe0:	f04f 32ff 	mov.w	r2, #4294967295
 8017fe4:	40da      	lsrs	r2, r3
 8017fe6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8017fea:	4013      	ands	r3, r2
 8017fec:	f846 3c04 	str.w	r3, [r6, #-4]
 8017ff0:	e7d2      	b.n	8017f98 <__hexnan+0xd4>
 8017ff2:	3f04      	subs	r7, #4
 8017ff4:	e7d0      	b.n	8017f98 <__hexnan+0xd4>
 8017ff6:	2004      	movs	r0, #4
 8017ff8:	e7d5      	b.n	8017fa6 <__hexnan+0xe2>
	...

08017ffc <malloc>:
 8017ffc:	4b02      	ldr	r3, [pc, #8]	@ (8018008 <malloc+0xc>)
 8017ffe:	4601      	mov	r1, r0
 8018000:	6818      	ldr	r0, [r3, #0]
 8018002:	f000 b825 	b.w	8018050 <_malloc_r>
 8018006:	bf00      	nop
 8018008:	20000a8c 	.word	0x20000a8c

0801800c <sbrk_aligned>:
 801800c:	b570      	push	{r4, r5, r6, lr}
 801800e:	4e0f      	ldr	r6, [pc, #60]	@ (801804c <sbrk_aligned+0x40>)
 8018010:	460c      	mov	r4, r1
 8018012:	6831      	ldr	r1, [r6, #0]
 8018014:	4605      	mov	r5, r0
 8018016:	b911      	cbnz	r1, 801801e <sbrk_aligned+0x12>
 8018018:	f001 fae6 	bl	80195e8 <_sbrk_r>
 801801c:	6030      	str	r0, [r6, #0]
 801801e:	4621      	mov	r1, r4
 8018020:	4628      	mov	r0, r5
 8018022:	f001 fae1 	bl	80195e8 <_sbrk_r>
 8018026:	1c43      	adds	r3, r0, #1
 8018028:	d103      	bne.n	8018032 <sbrk_aligned+0x26>
 801802a:	f04f 34ff 	mov.w	r4, #4294967295
 801802e:	4620      	mov	r0, r4
 8018030:	bd70      	pop	{r4, r5, r6, pc}
 8018032:	1cc4      	adds	r4, r0, #3
 8018034:	f024 0403 	bic.w	r4, r4, #3
 8018038:	42a0      	cmp	r0, r4
 801803a:	d0f8      	beq.n	801802e <sbrk_aligned+0x22>
 801803c:	1a21      	subs	r1, r4, r0
 801803e:	4628      	mov	r0, r5
 8018040:	f001 fad2 	bl	80195e8 <_sbrk_r>
 8018044:	3001      	adds	r0, #1
 8018046:	d1f2      	bne.n	801802e <sbrk_aligned+0x22>
 8018048:	e7ef      	b.n	801802a <sbrk_aligned+0x1e>
 801804a:	bf00      	nop
 801804c:	20015458 	.word	0x20015458

08018050 <_malloc_r>:
 8018050:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018054:	1ccd      	adds	r5, r1, #3
 8018056:	f025 0503 	bic.w	r5, r5, #3
 801805a:	3508      	adds	r5, #8
 801805c:	2d0c      	cmp	r5, #12
 801805e:	bf38      	it	cc
 8018060:	250c      	movcc	r5, #12
 8018062:	2d00      	cmp	r5, #0
 8018064:	4606      	mov	r6, r0
 8018066:	db01      	blt.n	801806c <_malloc_r+0x1c>
 8018068:	42a9      	cmp	r1, r5
 801806a:	d904      	bls.n	8018076 <_malloc_r+0x26>
 801806c:	230c      	movs	r3, #12
 801806e:	6033      	str	r3, [r6, #0]
 8018070:	2000      	movs	r0, #0
 8018072:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018076:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801814c <_malloc_r+0xfc>
 801807a:	f000 f87b 	bl	8018174 <__malloc_lock>
 801807e:	f8d8 3000 	ldr.w	r3, [r8]
 8018082:	461c      	mov	r4, r3
 8018084:	bb44      	cbnz	r4, 80180d8 <_malloc_r+0x88>
 8018086:	4629      	mov	r1, r5
 8018088:	4630      	mov	r0, r6
 801808a:	f7ff ffbf 	bl	801800c <sbrk_aligned>
 801808e:	1c43      	adds	r3, r0, #1
 8018090:	4604      	mov	r4, r0
 8018092:	d158      	bne.n	8018146 <_malloc_r+0xf6>
 8018094:	f8d8 4000 	ldr.w	r4, [r8]
 8018098:	4627      	mov	r7, r4
 801809a:	2f00      	cmp	r7, #0
 801809c:	d143      	bne.n	8018126 <_malloc_r+0xd6>
 801809e:	2c00      	cmp	r4, #0
 80180a0:	d04b      	beq.n	801813a <_malloc_r+0xea>
 80180a2:	6823      	ldr	r3, [r4, #0]
 80180a4:	4639      	mov	r1, r7
 80180a6:	4630      	mov	r0, r6
 80180a8:	eb04 0903 	add.w	r9, r4, r3
 80180ac:	f001 fa9c 	bl	80195e8 <_sbrk_r>
 80180b0:	4581      	cmp	r9, r0
 80180b2:	d142      	bne.n	801813a <_malloc_r+0xea>
 80180b4:	6821      	ldr	r1, [r4, #0]
 80180b6:	1a6d      	subs	r5, r5, r1
 80180b8:	4629      	mov	r1, r5
 80180ba:	4630      	mov	r0, r6
 80180bc:	f7ff ffa6 	bl	801800c <sbrk_aligned>
 80180c0:	3001      	adds	r0, #1
 80180c2:	d03a      	beq.n	801813a <_malloc_r+0xea>
 80180c4:	6823      	ldr	r3, [r4, #0]
 80180c6:	442b      	add	r3, r5
 80180c8:	6023      	str	r3, [r4, #0]
 80180ca:	f8d8 3000 	ldr.w	r3, [r8]
 80180ce:	685a      	ldr	r2, [r3, #4]
 80180d0:	bb62      	cbnz	r2, 801812c <_malloc_r+0xdc>
 80180d2:	f8c8 7000 	str.w	r7, [r8]
 80180d6:	e00f      	b.n	80180f8 <_malloc_r+0xa8>
 80180d8:	6822      	ldr	r2, [r4, #0]
 80180da:	1b52      	subs	r2, r2, r5
 80180dc:	d420      	bmi.n	8018120 <_malloc_r+0xd0>
 80180de:	2a0b      	cmp	r2, #11
 80180e0:	d917      	bls.n	8018112 <_malloc_r+0xc2>
 80180e2:	1961      	adds	r1, r4, r5
 80180e4:	42a3      	cmp	r3, r4
 80180e6:	6025      	str	r5, [r4, #0]
 80180e8:	bf18      	it	ne
 80180ea:	6059      	strne	r1, [r3, #4]
 80180ec:	6863      	ldr	r3, [r4, #4]
 80180ee:	bf08      	it	eq
 80180f0:	f8c8 1000 	streq.w	r1, [r8]
 80180f4:	5162      	str	r2, [r4, r5]
 80180f6:	604b      	str	r3, [r1, #4]
 80180f8:	4630      	mov	r0, r6
 80180fa:	f000 f841 	bl	8018180 <__malloc_unlock>
 80180fe:	f104 000b 	add.w	r0, r4, #11
 8018102:	1d23      	adds	r3, r4, #4
 8018104:	f020 0007 	bic.w	r0, r0, #7
 8018108:	1ac2      	subs	r2, r0, r3
 801810a:	bf1c      	itt	ne
 801810c:	1a1b      	subne	r3, r3, r0
 801810e:	50a3      	strne	r3, [r4, r2]
 8018110:	e7af      	b.n	8018072 <_malloc_r+0x22>
 8018112:	6862      	ldr	r2, [r4, #4]
 8018114:	42a3      	cmp	r3, r4
 8018116:	bf0c      	ite	eq
 8018118:	f8c8 2000 	streq.w	r2, [r8]
 801811c:	605a      	strne	r2, [r3, #4]
 801811e:	e7eb      	b.n	80180f8 <_malloc_r+0xa8>
 8018120:	4623      	mov	r3, r4
 8018122:	6864      	ldr	r4, [r4, #4]
 8018124:	e7ae      	b.n	8018084 <_malloc_r+0x34>
 8018126:	463c      	mov	r4, r7
 8018128:	687f      	ldr	r7, [r7, #4]
 801812a:	e7b6      	b.n	801809a <_malloc_r+0x4a>
 801812c:	461a      	mov	r2, r3
 801812e:	685b      	ldr	r3, [r3, #4]
 8018130:	42a3      	cmp	r3, r4
 8018132:	d1fb      	bne.n	801812c <_malloc_r+0xdc>
 8018134:	2300      	movs	r3, #0
 8018136:	6053      	str	r3, [r2, #4]
 8018138:	e7de      	b.n	80180f8 <_malloc_r+0xa8>
 801813a:	230c      	movs	r3, #12
 801813c:	6033      	str	r3, [r6, #0]
 801813e:	4630      	mov	r0, r6
 8018140:	f000 f81e 	bl	8018180 <__malloc_unlock>
 8018144:	e794      	b.n	8018070 <_malloc_r+0x20>
 8018146:	6005      	str	r5, [r0, #0]
 8018148:	e7d6      	b.n	80180f8 <_malloc_r+0xa8>
 801814a:	bf00      	nop
 801814c:	2001545c 	.word	0x2001545c

08018150 <__ascii_mbtowc>:
 8018150:	b082      	sub	sp, #8
 8018152:	b901      	cbnz	r1, 8018156 <__ascii_mbtowc+0x6>
 8018154:	a901      	add	r1, sp, #4
 8018156:	b142      	cbz	r2, 801816a <__ascii_mbtowc+0x1a>
 8018158:	b14b      	cbz	r3, 801816e <__ascii_mbtowc+0x1e>
 801815a:	7813      	ldrb	r3, [r2, #0]
 801815c:	600b      	str	r3, [r1, #0]
 801815e:	7812      	ldrb	r2, [r2, #0]
 8018160:	1e10      	subs	r0, r2, #0
 8018162:	bf18      	it	ne
 8018164:	2001      	movne	r0, #1
 8018166:	b002      	add	sp, #8
 8018168:	4770      	bx	lr
 801816a:	4610      	mov	r0, r2
 801816c:	e7fb      	b.n	8018166 <__ascii_mbtowc+0x16>
 801816e:	f06f 0001 	mvn.w	r0, #1
 8018172:	e7f8      	b.n	8018166 <__ascii_mbtowc+0x16>

08018174 <__malloc_lock>:
 8018174:	4801      	ldr	r0, [pc, #4]	@ (801817c <__malloc_lock+0x8>)
 8018176:	f7ff bb7e 	b.w	8017876 <__retarget_lock_acquire_recursive>
 801817a:	bf00      	nop
 801817c:	20015454 	.word	0x20015454

08018180 <__malloc_unlock>:
 8018180:	4801      	ldr	r0, [pc, #4]	@ (8018188 <__malloc_unlock+0x8>)
 8018182:	f7ff bb79 	b.w	8017878 <__retarget_lock_release_recursive>
 8018186:	bf00      	nop
 8018188:	20015454 	.word	0x20015454

0801818c <_Balloc>:
 801818c:	b570      	push	{r4, r5, r6, lr}
 801818e:	69c6      	ldr	r6, [r0, #28]
 8018190:	4604      	mov	r4, r0
 8018192:	460d      	mov	r5, r1
 8018194:	b976      	cbnz	r6, 80181b4 <_Balloc+0x28>
 8018196:	2010      	movs	r0, #16
 8018198:	f7ff ff30 	bl	8017ffc <malloc>
 801819c:	4602      	mov	r2, r0
 801819e:	61e0      	str	r0, [r4, #28]
 80181a0:	b920      	cbnz	r0, 80181ac <_Balloc+0x20>
 80181a2:	4b18      	ldr	r3, [pc, #96]	@ (8018204 <_Balloc+0x78>)
 80181a4:	4818      	ldr	r0, [pc, #96]	@ (8018208 <_Balloc+0x7c>)
 80181a6:	216b      	movs	r1, #107	@ 0x6b
 80181a8:	f7ff fb86 	bl	80178b8 <__assert_func>
 80181ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80181b0:	6006      	str	r6, [r0, #0]
 80181b2:	60c6      	str	r6, [r0, #12]
 80181b4:	69e6      	ldr	r6, [r4, #28]
 80181b6:	68f3      	ldr	r3, [r6, #12]
 80181b8:	b183      	cbz	r3, 80181dc <_Balloc+0x50>
 80181ba:	69e3      	ldr	r3, [r4, #28]
 80181bc:	68db      	ldr	r3, [r3, #12]
 80181be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80181c2:	b9b8      	cbnz	r0, 80181f4 <_Balloc+0x68>
 80181c4:	2101      	movs	r1, #1
 80181c6:	fa01 f605 	lsl.w	r6, r1, r5
 80181ca:	1d72      	adds	r2, r6, #5
 80181cc:	0092      	lsls	r2, r2, #2
 80181ce:	4620      	mov	r0, r4
 80181d0:	f001 fa21 	bl	8019616 <_calloc_r>
 80181d4:	b160      	cbz	r0, 80181f0 <_Balloc+0x64>
 80181d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80181da:	e00e      	b.n	80181fa <_Balloc+0x6e>
 80181dc:	2221      	movs	r2, #33	@ 0x21
 80181de:	2104      	movs	r1, #4
 80181e0:	4620      	mov	r0, r4
 80181e2:	f001 fa18 	bl	8019616 <_calloc_r>
 80181e6:	69e3      	ldr	r3, [r4, #28]
 80181e8:	60f0      	str	r0, [r6, #12]
 80181ea:	68db      	ldr	r3, [r3, #12]
 80181ec:	2b00      	cmp	r3, #0
 80181ee:	d1e4      	bne.n	80181ba <_Balloc+0x2e>
 80181f0:	2000      	movs	r0, #0
 80181f2:	bd70      	pop	{r4, r5, r6, pc}
 80181f4:	6802      	ldr	r2, [r0, #0]
 80181f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80181fa:	2300      	movs	r3, #0
 80181fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018200:	e7f7      	b.n	80181f2 <_Balloc+0x66>
 8018202:	bf00      	nop
 8018204:	08022df6 	.word	0x08022df6
 8018208:	08022f28 	.word	0x08022f28

0801820c <_Bfree>:
 801820c:	b570      	push	{r4, r5, r6, lr}
 801820e:	69c6      	ldr	r6, [r0, #28]
 8018210:	4605      	mov	r5, r0
 8018212:	460c      	mov	r4, r1
 8018214:	b976      	cbnz	r6, 8018234 <_Bfree+0x28>
 8018216:	2010      	movs	r0, #16
 8018218:	f7ff fef0 	bl	8017ffc <malloc>
 801821c:	4602      	mov	r2, r0
 801821e:	61e8      	str	r0, [r5, #28]
 8018220:	b920      	cbnz	r0, 801822c <_Bfree+0x20>
 8018222:	4b09      	ldr	r3, [pc, #36]	@ (8018248 <_Bfree+0x3c>)
 8018224:	4809      	ldr	r0, [pc, #36]	@ (801824c <_Bfree+0x40>)
 8018226:	218f      	movs	r1, #143	@ 0x8f
 8018228:	f7ff fb46 	bl	80178b8 <__assert_func>
 801822c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018230:	6006      	str	r6, [r0, #0]
 8018232:	60c6      	str	r6, [r0, #12]
 8018234:	b13c      	cbz	r4, 8018246 <_Bfree+0x3a>
 8018236:	69eb      	ldr	r3, [r5, #28]
 8018238:	6862      	ldr	r2, [r4, #4]
 801823a:	68db      	ldr	r3, [r3, #12]
 801823c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018240:	6021      	str	r1, [r4, #0]
 8018242:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8018246:	bd70      	pop	{r4, r5, r6, pc}
 8018248:	08022df6 	.word	0x08022df6
 801824c:	08022f28 	.word	0x08022f28

08018250 <__multadd>:
 8018250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018254:	690d      	ldr	r5, [r1, #16]
 8018256:	4607      	mov	r7, r0
 8018258:	460c      	mov	r4, r1
 801825a:	461e      	mov	r6, r3
 801825c:	f101 0c14 	add.w	ip, r1, #20
 8018260:	2000      	movs	r0, #0
 8018262:	f8dc 3000 	ldr.w	r3, [ip]
 8018266:	b299      	uxth	r1, r3
 8018268:	fb02 6101 	mla	r1, r2, r1, r6
 801826c:	0c1e      	lsrs	r6, r3, #16
 801826e:	0c0b      	lsrs	r3, r1, #16
 8018270:	fb02 3306 	mla	r3, r2, r6, r3
 8018274:	b289      	uxth	r1, r1
 8018276:	3001      	adds	r0, #1
 8018278:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801827c:	4285      	cmp	r5, r0
 801827e:	f84c 1b04 	str.w	r1, [ip], #4
 8018282:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8018286:	dcec      	bgt.n	8018262 <__multadd+0x12>
 8018288:	b30e      	cbz	r6, 80182ce <__multadd+0x7e>
 801828a:	68a3      	ldr	r3, [r4, #8]
 801828c:	42ab      	cmp	r3, r5
 801828e:	dc19      	bgt.n	80182c4 <__multadd+0x74>
 8018290:	6861      	ldr	r1, [r4, #4]
 8018292:	4638      	mov	r0, r7
 8018294:	3101      	adds	r1, #1
 8018296:	f7ff ff79 	bl	801818c <_Balloc>
 801829a:	4680      	mov	r8, r0
 801829c:	b928      	cbnz	r0, 80182aa <__multadd+0x5a>
 801829e:	4602      	mov	r2, r0
 80182a0:	4b0c      	ldr	r3, [pc, #48]	@ (80182d4 <__multadd+0x84>)
 80182a2:	480d      	ldr	r0, [pc, #52]	@ (80182d8 <__multadd+0x88>)
 80182a4:	21ba      	movs	r1, #186	@ 0xba
 80182a6:	f7ff fb07 	bl	80178b8 <__assert_func>
 80182aa:	6922      	ldr	r2, [r4, #16]
 80182ac:	3202      	adds	r2, #2
 80182ae:	f104 010c 	add.w	r1, r4, #12
 80182b2:	0092      	lsls	r2, r2, #2
 80182b4:	300c      	adds	r0, #12
 80182b6:	f7ff fae8 	bl	801788a <memcpy>
 80182ba:	4621      	mov	r1, r4
 80182bc:	4638      	mov	r0, r7
 80182be:	f7ff ffa5 	bl	801820c <_Bfree>
 80182c2:	4644      	mov	r4, r8
 80182c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80182c8:	3501      	adds	r5, #1
 80182ca:	615e      	str	r6, [r3, #20]
 80182cc:	6125      	str	r5, [r4, #16]
 80182ce:	4620      	mov	r0, r4
 80182d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80182d4:	08022eb7 	.word	0x08022eb7
 80182d8:	08022f28 	.word	0x08022f28

080182dc <__s2b>:
 80182dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80182e0:	460c      	mov	r4, r1
 80182e2:	4615      	mov	r5, r2
 80182e4:	461f      	mov	r7, r3
 80182e6:	2209      	movs	r2, #9
 80182e8:	3308      	adds	r3, #8
 80182ea:	4606      	mov	r6, r0
 80182ec:	fb93 f3f2 	sdiv	r3, r3, r2
 80182f0:	2100      	movs	r1, #0
 80182f2:	2201      	movs	r2, #1
 80182f4:	429a      	cmp	r2, r3
 80182f6:	db09      	blt.n	801830c <__s2b+0x30>
 80182f8:	4630      	mov	r0, r6
 80182fa:	f7ff ff47 	bl	801818c <_Balloc>
 80182fe:	b940      	cbnz	r0, 8018312 <__s2b+0x36>
 8018300:	4602      	mov	r2, r0
 8018302:	4b19      	ldr	r3, [pc, #100]	@ (8018368 <__s2b+0x8c>)
 8018304:	4819      	ldr	r0, [pc, #100]	@ (801836c <__s2b+0x90>)
 8018306:	21d3      	movs	r1, #211	@ 0xd3
 8018308:	f7ff fad6 	bl	80178b8 <__assert_func>
 801830c:	0052      	lsls	r2, r2, #1
 801830e:	3101      	adds	r1, #1
 8018310:	e7f0      	b.n	80182f4 <__s2b+0x18>
 8018312:	9b08      	ldr	r3, [sp, #32]
 8018314:	6143      	str	r3, [r0, #20]
 8018316:	2d09      	cmp	r5, #9
 8018318:	f04f 0301 	mov.w	r3, #1
 801831c:	6103      	str	r3, [r0, #16]
 801831e:	dd16      	ble.n	801834e <__s2b+0x72>
 8018320:	f104 0909 	add.w	r9, r4, #9
 8018324:	46c8      	mov	r8, r9
 8018326:	442c      	add	r4, r5
 8018328:	f818 3b01 	ldrb.w	r3, [r8], #1
 801832c:	4601      	mov	r1, r0
 801832e:	3b30      	subs	r3, #48	@ 0x30
 8018330:	220a      	movs	r2, #10
 8018332:	4630      	mov	r0, r6
 8018334:	f7ff ff8c 	bl	8018250 <__multadd>
 8018338:	45a0      	cmp	r8, r4
 801833a:	d1f5      	bne.n	8018328 <__s2b+0x4c>
 801833c:	f1a5 0408 	sub.w	r4, r5, #8
 8018340:	444c      	add	r4, r9
 8018342:	1b2d      	subs	r5, r5, r4
 8018344:	1963      	adds	r3, r4, r5
 8018346:	42bb      	cmp	r3, r7
 8018348:	db04      	blt.n	8018354 <__s2b+0x78>
 801834a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801834e:	340a      	adds	r4, #10
 8018350:	2509      	movs	r5, #9
 8018352:	e7f6      	b.n	8018342 <__s2b+0x66>
 8018354:	f814 3b01 	ldrb.w	r3, [r4], #1
 8018358:	4601      	mov	r1, r0
 801835a:	3b30      	subs	r3, #48	@ 0x30
 801835c:	220a      	movs	r2, #10
 801835e:	4630      	mov	r0, r6
 8018360:	f7ff ff76 	bl	8018250 <__multadd>
 8018364:	e7ee      	b.n	8018344 <__s2b+0x68>
 8018366:	bf00      	nop
 8018368:	08022eb7 	.word	0x08022eb7
 801836c:	08022f28 	.word	0x08022f28

08018370 <__hi0bits>:
 8018370:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8018374:	4603      	mov	r3, r0
 8018376:	bf36      	itet	cc
 8018378:	0403      	lslcc	r3, r0, #16
 801837a:	2000      	movcs	r0, #0
 801837c:	2010      	movcc	r0, #16
 801837e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8018382:	bf3c      	itt	cc
 8018384:	021b      	lslcc	r3, r3, #8
 8018386:	3008      	addcc	r0, #8
 8018388:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801838c:	bf3c      	itt	cc
 801838e:	011b      	lslcc	r3, r3, #4
 8018390:	3004      	addcc	r0, #4
 8018392:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8018396:	bf3c      	itt	cc
 8018398:	009b      	lslcc	r3, r3, #2
 801839a:	3002      	addcc	r0, #2
 801839c:	2b00      	cmp	r3, #0
 801839e:	db05      	blt.n	80183ac <__hi0bits+0x3c>
 80183a0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80183a4:	f100 0001 	add.w	r0, r0, #1
 80183a8:	bf08      	it	eq
 80183aa:	2020      	moveq	r0, #32
 80183ac:	4770      	bx	lr

080183ae <__lo0bits>:
 80183ae:	6803      	ldr	r3, [r0, #0]
 80183b0:	4602      	mov	r2, r0
 80183b2:	f013 0007 	ands.w	r0, r3, #7
 80183b6:	d00b      	beq.n	80183d0 <__lo0bits+0x22>
 80183b8:	07d9      	lsls	r1, r3, #31
 80183ba:	d421      	bmi.n	8018400 <__lo0bits+0x52>
 80183bc:	0798      	lsls	r0, r3, #30
 80183be:	bf49      	itett	mi
 80183c0:	085b      	lsrmi	r3, r3, #1
 80183c2:	089b      	lsrpl	r3, r3, #2
 80183c4:	2001      	movmi	r0, #1
 80183c6:	6013      	strmi	r3, [r2, #0]
 80183c8:	bf5c      	itt	pl
 80183ca:	6013      	strpl	r3, [r2, #0]
 80183cc:	2002      	movpl	r0, #2
 80183ce:	4770      	bx	lr
 80183d0:	b299      	uxth	r1, r3
 80183d2:	b909      	cbnz	r1, 80183d8 <__lo0bits+0x2a>
 80183d4:	0c1b      	lsrs	r3, r3, #16
 80183d6:	2010      	movs	r0, #16
 80183d8:	b2d9      	uxtb	r1, r3
 80183da:	b909      	cbnz	r1, 80183e0 <__lo0bits+0x32>
 80183dc:	3008      	adds	r0, #8
 80183de:	0a1b      	lsrs	r3, r3, #8
 80183e0:	0719      	lsls	r1, r3, #28
 80183e2:	bf04      	itt	eq
 80183e4:	091b      	lsreq	r3, r3, #4
 80183e6:	3004      	addeq	r0, #4
 80183e8:	0799      	lsls	r1, r3, #30
 80183ea:	bf04      	itt	eq
 80183ec:	089b      	lsreq	r3, r3, #2
 80183ee:	3002      	addeq	r0, #2
 80183f0:	07d9      	lsls	r1, r3, #31
 80183f2:	d403      	bmi.n	80183fc <__lo0bits+0x4e>
 80183f4:	085b      	lsrs	r3, r3, #1
 80183f6:	f100 0001 	add.w	r0, r0, #1
 80183fa:	d003      	beq.n	8018404 <__lo0bits+0x56>
 80183fc:	6013      	str	r3, [r2, #0]
 80183fe:	4770      	bx	lr
 8018400:	2000      	movs	r0, #0
 8018402:	4770      	bx	lr
 8018404:	2020      	movs	r0, #32
 8018406:	4770      	bx	lr

08018408 <__i2b>:
 8018408:	b510      	push	{r4, lr}
 801840a:	460c      	mov	r4, r1
 801840c:	2101      	movs	r1, #1
 801840e:	f7ff febd 	bl	801818c <_Balloc>
 8018412:	4602      	mov	r2, r0
 8018414:	b928      	cbnz	r0, 8018422 <__i2b+0x1a>
 8018416:	4b05      	ldr	r3, [pc, #20]	@ (801842c <__i2b+0x24>)
 8018418:	4805      	ldr	r0, [pc, #20]	@ (8018430 <__i2b+0x28>)
 801841a:	f240 1145 	movw	r1, #325	@ 0x145
 801841e:	f7ff fa4b 	bl	80178b8 <__assert_func>
 8018422:	2301      	movs	r3, #1
 8018424:	6144      	str	r4, [r0, #20]
 8018426:	6103      	str	r3, [r0, #16]
 8018428:	bd10      	pop	{r4, pc}
 801842a:	bf00      	nop
 801842c:	08022eb7 	.word	0x08022eb7
 8018430:	08022f28 	.word	0x08022f28

08018434 <__multiply>:
 8018434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018438:	4617      	mov	r7, r2
 801843a:	690a      	ldr	r2, [r1, #16]
 801843c:	693b      	ldr	r3, [r7, #16]
 801843e:	429a      	cmp	r2, r3
 8018440:	bfa8      	it	ge
 8018442:	463b      	movge	r3, r7
 8018444:	4689      	mov	r9, r1
 8018446:	bfa4      	itt	ge
 8018448:	460f      	movge	r7, r1
 801844a:	4699      	movge	r9, r3
 801844c:	693d      	ldr	r5, [r7, #16]
 801844e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8018452:	68bb      	ldr	r3, [r7, #8]
 8018454:	6879      	ldr	r1, [r7, #4]
 8018456:	eb05 060a 	add.w	r6, r5, sl
 801845a:	42b3      	cmp	r3, r6
 801845c:	b085      	sub	sp, #20
 801845e:	bfb8      	it	lt
 8018460:	3101      	addlt	r1, #1
 8018462:	f7ff fe93 	bl	801818c <_Balloc>
 8018466:	b930      	cbnz	r0, 8018476 <__multiply+0x42>
 8018468:	4602      	mov	r2, r0
 801846a:	4b41      	ldr	r3, [pc, #260]	@ (8018570 <__multiply+0x13c>)
 801846c:	4841      	ldr	r0, [pc, #260]	@ (8018574 <__multiply+0x140>)
 801846e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8018472:	f7ff fa21 	bl	80178b8 <__assert_func>
 8018476:	f100 0414 	add.w	r4, r0, #20
 801847a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 801847e:	4623      	mov	r3, r4
 8018480:	2200      	movs	r2, #0
 8018482:	4573      	cmp	r3, lr
 8018484:	d320      	bcc.n	80184c8 <__multiply+0x94>
 8018486:	f107 0814 	add.w	r8, r7, #20
 801848a:	f109 0114 	add.w	r1, r9, #20
 801848e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8018492:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8018496:	9302      	str	r3, [sp, #8]
 8018498:	1beb      	subs	r3, r5, r7
 801849a:	3b15      	subs	r3, #21
 801849c:	f023 0303 	bic.w	r3, r3, #3
 80184a0:	3304      	adds	r3, #4
 80184a2:	3715      	adds	r7, #21
 80184a4:	42bd      	cmp	r5, r7
 80184a6:	bf38      	it	cc
 80184a8:	2304      	movcc	r3, #4
 80184aa:	9301      	str	r3, [sp, #4]
 80184ac:	9b02      	ldr	r3, [sp, #8]
 80184ae:	9103      	str	r1, [sp, #12]
 80184b0:	428b      	cmp	r3, r1
 80184b2:	d80c      	bhi.n	80184ce <__multiply+0x9a>
 80184b4:	2e00      	cmp	r6, #0
 80184b6:	dd03      	ble.n	80184c0 <__multiply+0x8c>
 80184b8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80184bc:	2b00      	cmp	r3, #0
 80184be:	d055      	beq.n	801856c <__multiply+0x138>
 80184c0:	6106      	str	r6, [r0, #16]
 80184c2:	b005      	add	sp, #20
 80184c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80184c8:	f843 2b04 	str.w	r2, [r3], #4
 80184cc:	e7d9      	b.n	8018482 <__multiply+0x4e>
 80184ce:	f8b1 a000 	ldrh.w	sl, [r1]
 80184d2:	f1ba 0f00 	cmp.w	sl, #0
 80184d6:	d01f      	beq.n	8018518 <__multiply+0xe4>
 80184d8:	46c4      	mov	ip, r8
 80184da:	46a1      	mov	r9, r4
 80184dc:	2700      	movs	r7, #0
 80184de:	f85c 2b04 	ldr.w	r2, [ip], #4
 80184e2:	f8d9 3000 	ldr.w	r3, [r9]
 80184e6:	fa1f fb82 	uxth.w	fp, r2
 80184ea:	b29b      	uxth	r3, r3
 80184ec:	fb0a 330b 	mla	r3, sl, fp, r3
 80184f0:	443b      	add	r3, r7
 80184f2:	f8d9 7000 	ldr.w	r7, [r9]
 80184f6:	0c12      	lsrs	r2, r2, #16
 80184f8:	0c3f      	lsrs	r7, r7, #16
 80184fa:	fb0a 7202 	mla	r2, sl, r2, r7
 80184fe:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8018502:	b29b      	uxth	r3, r3
 8018504:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018508:	4565      	cmp	r5, ip
 801850a:	f849 3b04 	str.w	r3, [r9], #4
 801850e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8018512:	d8e4      	bhi.n	80184de <__multiply+0xaa>
 8018514:	9b01      	ldr	r3, [sp, #4]
 8018516:	50e7      	str	r7, [r4, r3]
 8018518:	9b03      	ldr	r3, [sp, #12]
 801851a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801851e:	3104      	adds	r1, #4
 8018520:	f1b9 0f00 	cmp.w	r9, #0
 8018524:	d020      	beq.n	8018568 <__multiply+0x134>
 8018526:	6823      	ldr	r3, [r4, #0]
 8018528:	4647      	mov	r7, r8
 801852a:	46a4      	mov	ip, r4
 801852c:	f04f 0a00 	mov.w	sl, #0
 8018530:	f8b7 b000 	ldrh.w	fp, [r7]
 8018534:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8018538:	fb09 220b 	mla	r2, r9, fp, r2
 801853c:	4452      	add	r2, sl
 801853e:	b29b      	uxth	r3, r3
 8018540:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018544:	f84c 3b04 	str.w	r3, [ip], #4
 8018548:	f857 3b04 	ldr.w	r3, [r7], #4
 801854c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8018550:	f8bc 3000 	ldrh.w	r3, [ip]
 8018554:	fb09 330a 	mla	r3, r9, sl, r3
 8018558:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 801855c:	42bd      	cmp	r5, r7
 801855e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8018562:	d8e5      	bhi.n	8018530 <__multiply+0xfc>
 8018564:	9a01      	ldr	r2, [sp, #4]
 8018566:	50a3      	str	r3, [r4, r2]
 8018568:	3404      	adds	r4, #4
 801856a:	e79f      	b.n	80184ac <__multiply+0x78>
 801856c:	3e01      	subs	r6, #1
 801856e:	e7a1      	b.n	80184b4 <__multiply+0x80>
 8018570:	08022eb7 	.word	0x08022eb7
 8018574:	08022f28 	.word	0x08022f28

08018578 <__pow5mult>:
 8018578:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801857c:	4615      	mov	r5, r2
 801857e:	f012 0203 	ands.w	r2, r2, #3
 8018582:	4607      	mov	r7, r0
 8018584:	460e      	mov	r6, r1
 8018586:	d007      	beq.n	8018598 <__pow5mult+0x20>
 8018588:	4c25      	ldr	r4, [pc, #148]	@ (8018620 <__pow5mult+0xa8>)
 801858a:	3a01      	subs	r2, #1
 801858c:	2300      	movs	r3, #0
 801858e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8018592:	f7ff fe5d 	bl	8018250 <__multadd>
 8018596:	4606      	mov	r6, r0
 8018598:	10ad      	asrs	r5, r5, #2
 801859a:	d03d      	beq.n	8018618 <__pow5mult+0xa0>
 801859c:	69fc      	ldr	r4, [r7, #28]
 801859e:	b97c      	cbnz	r4, 80185c0 <__pow5mult+0x48>
 80185a0:	2010      	movs	r0, #16
 80185a2:	f7ff fd2b 	bl	8017ffc <malloc>
 80185a6:	4602      	mov	r2, r0
 80185a8:	61f8      	str	r0, [r7, #28]
 80185aa:	b928      	cbnz	r0, 80185b8 <__pow5mult+0x40>
 80185ac:	4b1d      	ldr	r3, [pc, #116]	@ (8018624 <__pow5mult+0xac>)
 80185ae:	481e      	ldr	r0, [pc, #120]	@ (8018628 <__pow5mult+0xb0>)
 80185b0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80185b4:	f7ff f980 	bl	80178b8 <__assert_func>
 80185b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80185bc:	6004      	str	r4, [r0, #0]
 80185be:	60c4      	str	r4, [r0, #12]
 80185c0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80185c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80185c8:	b94c      	cbnz	r4, 80185de <__pow5mult+0x66>
 80185ca:	f240 2171 	movw	r1, #625	@ 0x271
 80185ce:	4638      	mov	r0, r7
 80185d0:	f7ff ff1a 	bl	8018408 <__i2b>
 80185d4:	2300      	movs	r3, #0
 80185d6:	f8c8 0008 	str.w	r0, [r8, #8]
 80185da:	4604      	mov	r4, r0
 80185dc:	6003      	str	r3, [r0, #0]
 80185de:	f04f 0900 	mov.w	r9, #0
 80185e2:	07eb      	lsls	r3, r5, #31
 80185e4:	d50a      	bpl.n	80185fc <__pow5mult+0x84>
 80185e6:	4631      	mov	r1, r6
 80185e8:	4622      	mov	r2, r4
 80185ea:	4638      	mov	r0, r7
 80185ec:	f7ff ff22 	bl	8018434 <__multiply>
 80185f0:	4631      	mov	r1, r6
 80185f2:	4680      	mov	r8, r0
 80185f4:	4638      	mov	r0, r7
 80185f6:	f7ff fe09 	bl	801820c <_Bfree>
 80185fa:	4646      	mov	r6, r8
 80185fc:	106d      	asrs	r5, r5, #1
 80185fe:	d00b      	beq.n	8018618 <__pow5mult+0xa0>
 8018600:	6820      	ldr	r0, [r4, #0]
 8018602:	b938      	cbnz	r0, 8018614 <__pow5mult+0x9c>
 8018604:	4622      	mov	r2, r4
 8018606:	4621      	mov	r1, r4
 8018608:	4638      	mov	r0, r7
 801860a:	f7ff ff13 	bl	8018434 <__multiply>
 801860e:	6020      	str	r0, [r4, #0]
 8018610:	f8c0 9000 	str.w	r9, [r0]
 8018614:	4604      	mov	r4, r0
 8018616:	e7e4      	b.n	80185e2 <__pow5mult+0x6a>
 8018618:	4630      	mov	r0, r6
 801861a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801861e:	bf00      	nop
 8018620:	0802310c 	.word	0x0802310c
 8018624:	08022df6 	.word	0x08022df6
 8018628:	08022f28 	.word	0x08022f28

0801862c <__lshift>:
 801862c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018630:	460c      	mov	r4, r1
 8018632:	6849      	ldr	r1, [r1, #4]
 8018634:	6923      	ldr	r3, [r4, #16]
 8018636:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801863a:	68a3      	ldr	r3, [r4, #8]
 801863c:	4607      	mov	r7, r0
 801863e:	4691      	mov	r9, r2
 8018640:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8018644:	f108 0601 	add.w	r6, r8, #1
 8018648:	42b3      	cmp	r3, r6
 801864a:	db0b      	blt.n	8018664 <__lshift+0x38>
 801864c:	4638      	mov	r0, r7
 801864e:	f7ff fd9d 	bl	801818c <_Balloc>
 8018652:	4605      	mov	r5, r0
 8018654:	b948      	cbnz	r0, 801866a <__lshift+0x3e>
 8018656:	4602      	mov	r2, r0
 8018658:	4b28      	ldr	r3, [pc, #160]	@ (80186fc <__lshift+0xd0>)
 801865a:	4829      	ldr	r0, [pc, #164]	@ (8018700 <__lshift+0xd4>)
 801865c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8018660:	f7ff f92a 	bl	80178b8 <__assert_func>
 8018664:	3101      	adds	r1, #1
 8018666:	005b      	lsls	r3, r3, #1
 8018668:	e7ee      	b.n	8018648 <__lshift+0x1c>
 801866a:	2300      	movs	r3, #0
 801866c:	f100 0114 	add.w	r1, r0, #20
 8018670:	f100 0210 	add.w	r2, r0, #16
 8018674:	4618      	mov	r0, r3
 8018676:	4553      	cmp	r3, sl
 8018678:	db33      	blt.n	80186e2 <__lshift+0xb6>
 801867a:	6920      	ldr	r0, [r4, #16]
 801867c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8018680:	f104 0314 	add.w	r3, r4, #20
 8018684:	f019 091f 	ands.w	r9, r9, #31
 8018688:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801868c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8018690:	d02b      	beq.n	80186ea <__lshift+0xbe>
 8018692:	f1c9 0e20 	rsb	lr, r9, #32
 8018696:	468a      	mov	sl, r1
 8018698:	2200      	movs	r2, #0
 801869a:	6818      	ldr	r0, [r3, #0]
 801869c:	fa00 f009 	lsl.w	r0, r0, r9
 80186a0:	4310      	orrs	r0, r2
 80186a2:	f84a 0b04 	str.w	r0, [sl], #4
 80186a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80186aa:	459c      	cmp	ip, r3
 80186ac:	fa22 f20e 	lsr.w	r2, r2, lr
 80186b0:	d8f3      	bhi.n	801869a <__lshift+0x6e>
 80186b2:	ebac 0304 	sub.w	r3, ip, r4
 80186b6:	3b15      	subs	r3, #21
 80186b8:	f023 0303 	bic.w	r3, r3, #3
 80186bc:	3304      	adds	r3, #4
 80186be:	f104 0015 	add.w	r0, r4, #21
 80186c2:	4560      	cmp	r0, ip
 80186c4:	bf88      	it	hi
 80186c6:	2304      	movhi	r3, #4
 80186c8:	50ca      	str	r2, [r1, r3]
 80186ca:	b10a      	cbz	r2, 80186d0 <__lshift+0xa4>
 80186cc:	f108 0602 	add.w	r6, r8, #2
 80186d0:	3e01      	subs	r6, #1
 80186d2:	4638      	mov	r0, r7
 80186d4:	612e      	str	r6, [r5, #16]
 80186d6:	4621      	mov	r1, r4
 80186d8:	f7ff fd98 	bl	801820c <_Bfree>
 80186dc:	4628      	mov	r0, r5
 80186de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80186e2:	f842 0f04 	str.w	r0, [r2, #4]!
 80186e6:	3301      	adds	r3, #1
 80186e8:	e7c5      	b.n	8018676 <__lshift+0x4a>
 80186ea:	3904      	subs	r1, #4
 80186ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80186f0:	f841 2f04 	str.w	r2, [r1, #4]!
 80186f4:	459c      	cmp	ip, r3
 80186f6:	d8f9      	bhi.n	80186ec <__lshift+0xc0>
 80186f8:	e7ea      	b.n	80186d0 <__lshift+0xa4>
 80186fa:	bf00      	nop
 80186fc:	08022eb7 	.word	0x08022eb7
 8018700:	08022f28 	.word	0x08022f28

08018704 <__mcmp>:
 8018704:	690a      	ldr	r2, [r1, #16]
 8018706:	4603      	mov	r3, r0
 8018708:	6900      	ldr	r0, [r0, #16]
 801870a:	1a80      	subs	r0, r0, r2
 801870c:	b530      	push	{r4, r5, lr}
 801870e:	d10e      	bne.n	801872e <__mcmp+0x2a>
 8018710:	3314      	adds	r3, #20
 8018712:	3114      	adds	r1, #20
 8018714:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8018718:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801871c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8018720:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8018724:	4295      	cmp	r5, r2
 8018726:	d003      	beq.n	8018730 <__mcmp+0x2c>
 8018728:	d205      	bcs.n	8018736 <__mcmp+0x32>
 801872a:	f04f 30ff 	mov.w	r0, #4294967295
 801872e:	bd30      	pop	{r4, r5, pc}
 8018730:	42a3      	cmp	r3, r4
 8018732:	d3f3      	bcc.n	801871c <__mcmp+0x18>
 8018734:	e7fb      	b.n	801872e <__mcmp+0x2a>
 8018736:	2001      	movs	r0, #1
 8018738:	e7f9      	b.n	801872e <__mcmp+0x2a>
	...

0801873c <__mdiff>:
 801873c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018740:	4689      	mov	r9, r1
 8018742:	4606      	mov	r6, r0
 8018744:	4611      	mov	r1, r2
 8018746:	4648      	mov	r0, r9
 8018748:	4614      	mov	r4, r2
 801874a:	f7ff ffdb 	bl	8018704 <__mcmp>
 801874e:	1e05      	subs	r5, r0, #0
 8018750:	d112      	bne.n	8018778 <__mdiff+0x3c>
 8018752:	4629      	mov	r1, r5
 8018754:	4630      	mov	r0, r6
 8018756:	f7ff fd19 	bl	801818c <_Balloc>
 801875a:	4602      	mov	r2, r0
 801875c:	b928      	cbnz	r0, 801876a <__mdiff+0x2e>
 801875e:	4b3f      	ldr	r3, [pc, #252]	@ (801885c <__mdiff+0x120>)
 8018760:	f240 2137 	movw	r1, #567	@ 0x237
 8018764:	483e      	ldr	r0, [pc, #248]	@ (8018860 <__mdiff+0x124>)
 8018766:	f7ff f8a7 	bl	80178b8 <__assert_func>
 801876a:	2301      	movs	r3, #1
 801876c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8018770:	4610      	mov	r0, r2
 8018772:	b003      	add	sp, #12
 8018774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018778:	bfbc      	itt	lt
 801877a:	464b      	movlt	r3, r9
 801877c:	46a1      	movlt	r9, r4
 801877e:	4630      	mov	r0, r6
 8018780:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8018784:	bfba      	itte	lt
 8018786:	461c      	movlt	r4, r3
 8018788:	2501      	movlt	r5, #1
 801878a:	2500      	movge	r5, #0
 801878c:	f7ff fcfe 	bl	801818c <_Balloc>
 8018790:	4602      	mov	r2, r0
 8018792:	b918      	cbnz	r0, 801879c <__mdiff+0x60>
 8018794:	4b31      	ldr	r3, [pc, #196]	@ (801885c <__mdiff+0x120>)
 8018796:	f240 2145 	movw	r1, #581	@ 0x245
 801879a:	e7e3      	b.n	8018764 <__mdiff+0x28>
 801879c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80187a0:	6926      	ldr	r6, [r4, #16]
 80187a2:	60c5      	str	r5, [r0, #12]
 80187a4:	f109 0310 	add.w	r3, r9, #16
 80187a8:	f109 0514 	add.w	r5, r9, #20
 80187ac:	f104 0e14 	add.w	lr, r4, #20
 80187b0:	f100 0b14 	add.w	fp, r0, #20
 80187b4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80187b8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80187bc:	9301      	str	r3, [sp, #4]
 80187be:	46d9      	mov	r9, fp
 80187c0:	f04f 0c00 	mov.w	ip, #0
 80187c4:	9b01      	ldr	r3, [sp, #4]
 80187c6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80187ca:	f853 af04 	ldr.w	sl, [r3, #4]!
 80187ce:	9301      	str	r3, [sp, #4]
 80187d0:	fa1f f38a 	uxth.w	r3, sl
 80187d4:	4619      	mov	r1, r3
 80187d6:	b283      	uxth	r3, r0
 80187d8:	1acb      	subs	r3, r1, r3
 80187da:	0c00      	lsrs	r0, r0, #16
 80187dc:	4463      	add	r3, ip
 80187de:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80187e2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80187e6:	b29b      	uxth	r3, r3
 80187e8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80187ec:	4576      	cmp	r6, lr
 80187ee:	f849 3b04 	str.w	r3, [r9], #4
 80187f2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80187f6:	d8e5      	bhi.n	80187c4 <__mdiff+0x88>
 80187f8:	1b33      	subs	r3, r6, r4
 80187fa:	3b15      	subs	r3, #21
 80187fc:	f023 0303 	bic.w	r3, r3, #3
 8018800:	3415      	adds	r4, #21
 8018802:	3304      	adds	r3, #4
 8018804:	42a6      	cmp	r6, r4
 8018806:	bf38      	it	cc
 8018808:	2304      	movcc	r3, #4
 801880a:	441d      	add	r5, r3
 801880c:	445b      	add	r3, fp
 801880e:	461e      	mov	r6, r3
 8018810:	462c      	mov	r4, r5
 8018812:	4544      	cmp	r4, r8
 8018814:	d30e      	bcc.n	8018834 <__mdiff+0xf8>
 8018816:	f108 0103 	add.w	r1, r8, #3
 801881a:	1b49      	subs	r1, r1, r5
 801881c:	f021 0103 	bic.w	r1, r1, #3
 8018820:	3d03      	subs	r5, #3
 8018822:	45a8      	cmp	r8, r5
 8018824:	bf38      	it	cc
 8018826:	2100      	movcc	r1, #0
 8018828:	440b      	add	r3, r1
 801882a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801882e:	b191      	cbz	r1, 8018856 <__mdiff+0x11a>
 8018830:	6117      	str	r7, [r2, #16]
 8018832:	e79d      	b.n	8018770 <__mdiff+0x34>
 8018834:	f854 1b04 	ldr.w	r1, [r4], #4
 8018838:	46e6      	mov	lr, ip
 801883a:	0c08      	lsrs	r0, r1, #16
 801883c:	fa1c fc81 	uxtah	ip, ip, r1
 8018840:	4471      	add	r1, lr
 8018842:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8018846:	b289      	uxth	r1, r1
 8018848:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801884c:	f846 1b04 	str.w	r1, [r6], #4
 8018850:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8018854:	e7dd      	b.n	8018812 <__mdiff+0xd6>
 8018856:	3f01      	subs	r7, #1
 8018858:	e7e7      	b.n	801882a <__mdiff+0xee>
 801885a:	bf00      	nop
 801885c:	08022eb7 	.word	0x08022eb7
 8018860:	08022f28 	.word	0x08022f28

08018864 <__ulp>:
 8018864:	b082      	sub	sp, #8
 8018866:	ed8d 0b00 	vstr	d0, [sp]
 801886a:	9a01      	ldr	r2, [sp, #4]
 801886c:	4b0f      	ldr	r3, [pc, #60]	@ (80188ac <__ulp+0x48>)
 801886e:	4013      	ands	r3, r2
 8018870:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8018874:	2b00      	cmp	r3, #0
 8018876:	dc08      	bgt.n	801888a <__ulp+0x26>
 8018878:	425b      	negs	r3, r3
 801887a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801887e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8018882:	da04      	bge.n	801888e <__ulp+0x2a>
 8018884:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8018888:	4113      	asrs	r3, r2
 801888a:	2200      	movs	r2, #0
 801888c:	e008      	b.n	80188a0 <__ulp+0x3c>
 801888e:	f1a2 0314 	sub.w	r3, r2, #20
 8018892:	2b1e      	cmp	r3, #30
 8018894:	bfda      	itte	le
 8018896:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801889a:	40da      	lsrle	r2, r3
 801889c:	2201      	movgt	r2, #1
 801889e:	2300      	movs	r3, #0
 80188a0:	4619      	mov	r1, r3
 80188a2:	4610      	mov	r0, r2
 80188a4:	ec41 0b10 	vmov	d0, r0, r1
 80188a8:	b002      	add	sp, #8
 80188aa:	4770      	bx	lr
 80188ac:	7ff00000 	.word	0x7ff00000

080188b0 <__b2d>:
 80188b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80188b4:	6906      	ldr	r6, [r0, #16]
 80188b6:	f100 0814 	add.w	r8, r0, #20
 80188ba:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80188be:	1f37      	subs	r7, r6, #4
 80188c0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80188c4:	4610      	mov	r0, r2
 80188c6:	f7ff fd53 	bl	8018370 <__hi0bits>
 80188ca:	f1c0 0320 	rsb	r3, r0, #32
 80188ce:	280a      	cmp	r0, #10
 80188d0:	600b      	str	r3, [r1, #0]
 80188d2:	491b      	ldr	r1, [pc, #108]	@ (8018940 <__b2d+0x90>)
 80188d4:	dc15      	bgt.n	8018902 <__b2d+0x52>
 80188d6:	f1c0 0c0b 	rsb	ip, r0, #11
 80188da:	fa22 f30c 	lsr.w	r3, r2, ip
 80188de:	45b8      	cmp	r8, r7
 80188e0:	ea43 0501 	orr.w	r5, r3, r1
 80188e4:	bf34      	ite	cc
 80188e6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80188ea:	2300      	movcs	r3, #0
 80188ec:	3015      	adds	r0, #21
 80188ee:	fa02 f000 	lsl.w	r0, r2, r0
 80188f2:	fa23 f30c 	lsr.w	r3, r3, ip
 80188f6:	4303      	orrs	r3, r0
 80188f8:	461c      	mov	r4, r3
 80188fa:	ec45 4b10 	vmov	d0, r4, r5
 80188fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018902:	45b8      	cmp	r8, r7
 8018904:	bf3a      	itte	cc
 8018906:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801890a:	f1a6 0708 	subcc.w	r7, r6, #8
 801890e:	2300      	movcs	r3, #0
 8018910:	380b      	subs	r0, #11
 8018912:	d012      	beq.n	801893a <__b2d+0x8a>
 8018914:	f1c0 0120 	rsb	r1, r0, #32
 8018918:	fa23 f401 	lsr.w	r4, r3, r1
 801891c:	4082      	lsls	r2, r0
 801891e:	4322      	orrs	r2, r4
 8018920:	4547      	cmp	r7, r8
 8018922:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8018926:	bf8c      	ite	hi
 8018928:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801892c:	2200      	movls	r2, #0
 801892e:	4083      	lsls	r3, r0
 8018930:	40ca      	lsrs	r2, r1
 8018932:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8018936:	4313      	orrs	r3, r2
 8018938:	e7de      	b.n	80188f8 <__b2d+0x48>
 801893a:	ea42 0501 	orr.w	r5, r2, r1
 801893e:	e7db      	b.n	80188f8 <__b2d+0x48>
 8018940:	3ff00000 	.word	0x3ff00000

08018944 <__d2b>:
 8018944:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8018948:	460f      	mov	r7, r1
 801894a:	2101      	movs	r1, #1
 801894c:	ec59 8b10 	vmov	r8, r9, d0
 8018950:	4616      	mov	r6, r2
 8018952:	f7ff fc1b 	bl	801818c <_Balloc>
 8018956:	4604      	mov	r4, r0
 8018958:	b930      	cbnz	r0, 8018968 <__d2b+0x24>
 801895a:	4602      	mov	r2, r0
 801895c:	4b23      	ldr	r3, [pc, #140]	@ (80189ec <__d2b+0xa8>)
 801895e:	4824      	ldr	r0, [pc, #144]	@ (80189f0 <__d2b+0xac>)
 8018960:	f240 310f 	movw	r1, #783	@ 0x30f
 8018964:	f7fe ffa8 	bl	80178b8 <__assert_func>
 8018968:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801896c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018970:	b10d      	cbz	r5, 8018976 <__d2b+0x32>
 8018972:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8018976:	9301      	str	r3, [sp, #4]
 8018978:	f1b8 0300 	subs.w	r3, r8, #0
 801897c:	d023      	beq.n	80189c6 <__d2b+0x82>
 801897e:	4668      	mov	r0, sp
 8018980:	9300      	str	r3, [sp, #0]
 8018982:	f7ff fd14 	bl	80183ae <__lo0bits>
 8018986:	e9dd 1200 	ldrd	r1, r2, [sp]
 801898a:	b1d0      	cbz	r0, 80189c2 <__d2b+0x7e>
 801898c:	f1c0 0320 	rsb	r3, r0, #32
 8018990:	fa02 f303 	lsl.w	r3, r2, r3
 8018994:	430b      	orrs	r3, r1
 8018996:	40c2      	lsrs	r2, r0
 8018998:	6163      	str	r3, [r4, #20]
 801899a:	9201      	str	r2, [sp, #4]
 801899c:	9b01      	ldr	r3, [sp, #4]
 801899e:	61a3      	str	r3, [r4, #24]
 80189a0:	2b00      	cmp	r3, #0
 80189a2:	bf0c      	ite	eq
 80189a4:	2201      	moveq	r2, #1
 80189a6:	2202      	movne	r2, #2
 80189a8:	6122      	str	r2, [r4, #16]
 80189aa:	b1a5      	cbz	r5, 80189d6 <__d2b+0x92>
 80189ac:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80189b0:	4405      	add	r5, r0
 80189b2:	603d      	str	r5, [r7, #0]
 80189b4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80189b8:	6030      	str	r0, [r6, #0]
 80189ba:	4620      	mov	r0, r4
 80189bc:	b003      	add	sp, #12
 80189be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80189c2:	6161      	str	r1, [r4, #20]
 80189c4:	e7ea      	b.n	801899c <__d2b+0x58>
 80189c6:	a801      	add	r0, sp, #4
 80189c8:	f7ff fcf1 	bl	80183ae <__lo0bits>
 80189cc:	9b01      	ldr	r3, [sp, #4]
 80189ce:	6163      	str	r3, [r4, #20]
 80189d0:	3020      	adds	r0, #32
 80189d2:	2201      	movs	r2, #1
 80189d4:	e7e8      	b.n	80189a8 <__d2b+0x64>
 80189d6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80189da:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80189de:	6038      	str	r0, [r7, #0]
 80189e0:	6918      	ldr	r0, [r3, #16]
 80189e2:	f7ff fcc5 	bl	8018370 <__hi0bits>
 80189e6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80189ea:	e7e5      	b.n	80189b8 <__d2b+0x74>
 80189ec:	08022eb7 	.word	0x08022eb7
 80189f0:	08022f28 	.word	0x08022f28

080189f4 <__ratio>:
 80189f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80189f8:	b085      	sub	sp, #20
 80189fa:	e9cd 1000 	strd	r1, r0, [sp]
 80189fe:	a902      	add	r1, sp, #8
 8018a00:	f7ff ff56 	bl	80188b0 <__b2d>
 8018a04:	9800      	ldr	r0, [sp, #0]
 8018a06:	a903      	add	r1, sp, #12
 8018a08:	ec55 4b10 	vmov	r4, r5, d0
 8018a0c:	f7ff ff50 	bl	80188b0 <__b2d>
 8018a10:	9b01      	ldr	r3, [sp, #4]
 8018a12:	6919      	ldr	r1, [r3, #16]
 8018a14:	9b00      	ldr	r3, [sp, #0]
 8018a16:	691b      	ldr	r3, [r3, #16]
 8018a18:	1ac9      	subs	r1, r1, r3
 8018a1a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8018a1e:	1a9b      	subs	r3, r3, r2
 8018a20:	ec5b ab10 	vmov	sl, fp, d0
 8018a24:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8018a28:	2b00      	cmp	r3, #0
 8018a2a:	bfce      	itee	gt
 8018a2c:	462a      	movgt	r2, r5
 8018a2e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8018a32:	465a      	movle	r2, fp
 8018a34:	462f      	mov	r7, r5
 8018a36:	46d9      	mov	r9, fp
 8018a38:	bfcc      	ite	gt
 8018a3a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8018a3e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8018a42:	464b      	mov	r3, r9
 8018a44:	4652      	mov	r2, sl
 8018a46:	4620      	mov	r0, r4
 8018a48:	4639      	mov	r1, r7
 8018a4a:	f7e7 ff0f 	bl	800086c <__aeabi_ddiv>
 8018a4e:	ec41 0b10 	vmov	d0, r0, r1
 8018a52:	b005      	add	sp, #20
 8018a54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018a58 <__copybits>:
 8018a58:	3901      	subs	r1, #1
 8018a5a:	b570      	push	{r4, r5, r6, lr}
 8018a5c:	1149      	asrs	r1, r1, #5
 8018a5e:	6914      	ldr	r4, [r2, #16]
 8018a60:	3101      	adds	r1, #1
 8018a62:	f102 0314 	add.w	r3, r2, #20
 8018a66:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8018a6a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8018a6e:	1f05      	subs	r5, r0, #4
 8018a70:	42a3      	cmp	r3, r4
 8018a72:	d30c      	bcc.n	8018a8e <__copybits+0x36>
 8018a74:	1aa3      	subs	r3, r4, r2
 8018a76:	3b11      	subs	r3, #17
 8018a78:	f023 0303 	bic.w	r3, r3, #3
 8018a7c:	3211      	adds	r2, #17
 8018a7e:	42a2      	cmp	r2, r4
 8018a80:	bf88      	it	hi
 8018a82:	2300      	movhi	r3, #0
 8018a84:	4418      	add	r0, r3
 8018a86:	2300      	movs	r3, #0
 8018a88:	4288      	cmp	r0, r1
 8018a8a:	d305      	bcc.n	8018a98 <__copybits+0x40>
 8018a8c:	bd70      	pop	{r4, r5, r6, pc}
 8018a8e:	f853 6b04 	ldr.w	r6, [r3], #4
 8018a92:	f845 6f04 	str.w	r6, [r5, #4]!
 8018a96:	e7eb      	b.n	8018a70 <__copybits+0x18>
 8018a98:	f840 3b04 	str.w	r3, [r0], #4
 8018a9c:	e7f4      	b.n	8018a88 <__copybits+0x30>

08018a9e <__any_on>:
 8018a9e:	f100 0214 	add.w	r2, r0, #20
 8018aa2:	6900      	ldr	r0, [r0, #16]
 8018aa4:	114b      	asrs	r3, r1, #5
 8018aa6:	4298      	cmp	r0, r3
 8018aa8:	b510      	push	{r4, lr}
 8018aaa:	db11      	blt.n	8018ad0 <__any_on+0x32>
 8018aac:	dd0a      	ble.n	8018ac4 <__any_on+0x26>
 8018aae:	f011 011f 	ands.w	r1, r1, #31
 8018ab2:	d007      	beq.n	8018ac4 <__any_on+0x26>
 8018ab4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8018ab8:	fa24 f001 	lsr.w	r0, r4, r1
 8018abc:	fa00 f101 	lsl.w	r1, r0, r1
 8018ac0:	428c      	cmp	r4, r1
 8018ac2:	d10b      	bne.n	8018adc <__any_on+0x3e>
 8018ac4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8018ac8:	4293      	cmp	r3, r2
 8018aca:	d803      	bhi.n	8018ad4 <__any_on+0x36>
 8018acc:	2000      	movs	r0, #0
 8018ace:	bd10      	pop	{r4, pc}
 8018ad0:	4603      	mov	r3, r0
 8018ad2:	e7f7      	b.n	8018ac4 <__any_on+0x26>
 8018ad4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8018ad8:	2900      	cmp	r1, #0
 8018ada:	d0f5      	beq.n	8018ac8 <__any_on+0x2a>
 8018adc:	2001      	movs	r0, #1
 8018ade:	e7f6      	b.n	8018ace <__any_on+0x30>

08018ae0 <__ascii_wctomb>:
 8018ae0:	4603      	mov	r3, r0
 8018ae2:	4608      	mov	r0, r1
 8018ae4:	b141      	cbz	r1, 8018af8 <__ascii_wctomb+0x18>
 8018ae6:	2aff      	cmp	r2, #255	@ 0xff
 8018ae8:	d904      	bls.n	8018af4 <__ascii_wctomb+0x14>
 8018aea:	228a      	movs	r2, #138	@ 0x8a
 8018aec:	601a      	str	r2, [r3, #0]
 8018aee:	f04f 30ff 	mov.w	r0, #4294967295
 8018af2:	4770      	bx	lr
 8018af4:	700a      	strb	r2, [r1, #0]
 8018af6:	2001      	movs	r0, #1
 8018af8:	4770      	bx	lr

08018afa <__ssputs_r>:
 8018afa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018afe:	688e      	ldr	r6, [r1, #8]
 8018b00:	461f      	mov	r7, r3
 8018b02:	42be      	cmp	r6, r7
 8018b04:	680b      	ldr	r3, [r1, #0]
 8018b06:	4682      	mov	sl, r0
 8018b08:	460c      	mov	r4, r1
 8018b0a:	4690      	mov	r8, r2
 8018b0c:	d82d      	bhi.n	8018b6a <__ssputs_r+0x70>
 8018b0e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8018b12:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8018b16:	d026      	beq.n	8018b66 <__ssputs_r+0x6c>
 8018b18:	6965      	ldr	r5, [r4, #20]
 8018b1a:	6909      	ldr	r1, [r1, #16]
 8018b1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018b20:	eba3 0901 	sub.w	r9, r3, r1
 8018b24:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8018b28:	1c7b      	adds	r3, r7, #1
 8018b2a:	444b      	add	r3, r9
 8018b2c:	106d      	asrs	r5, r5, #1
 8018b2e:	429d      	cmp	r5, r3
 8018b30:	bf38      	it	cc
 8018b32:	461d      	movcc	r5, r3
 8018b34:	0553      	lsls	r3, r2, #21
 8018b36:	d527      	bpl.n	8018b88 <__ssputs_r+0x8e>
 8018b38:	4629      	mov	r1, r5
 8018b3a:	f7ff fa89 	bl	8018050 <_malloc_r>
 8018b3e:	4606      	mov	r6, r0
 8018b40:	b360      	cbz	r0, 8018b9c <__ssputs_r+0xa2>
 8018b42:	6921      	ldr	r1, [r4, #16]
 8018b44:	464a      	mov	r2, r9
 8018b46:	f7fe fea0 	bl	801788a <memcpy>
 8018b4a:	89a3      	ldrh	r3, [r4, #12]
 8018b4c:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8018b50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018b54:	81a3      	strh	r3, [r4, #12]
 8018b56:	6126      	str	r6, [r4, #16]
 8018b58:	6165      	str	r5, [r4, #20]
 8018b5a:	444e      	add	r6, r9
 8018b5c:	eba5 0509 	sub.w	r5, r5, r9
 8018b60:	6026      	str	r6, [r4, #0]
 8018b62:	60a5      	str	r5, [r4, #8]
 8018b64:	463e      	mov	r6, r7
 8018b66:	42be      	cmp	r6, r7
 8018b68:	d900      	bls.n	8018b6c <__ssputs_r+0x72>
 8018b6a:	463e      	mov	r6, r7
 8018b6c:	6820      	ldr	r0, [r4, #0]
 8018b6e:	4632      	mov	r2, r6
 8018b70:	4641      	mov	r1, r8
 8018b72:	f7fe fdba 	bl	80176ea <memmove>
 8018b76:	68a3      	ldr	r3, [r4, #8]
 8018b78:	1b9b      	subs	r3, r3, r6
 8018b7a:	60a3      	str	r3, [r4, #8]
 8018b7c:	6823      	ldr	r3, [r4, #0]
 8018b7e:	4433      	add	r3, r6
 8018b80:	6023      	str	r3, [r4, #0]
 8018b82:	2000      	movs	r0, #0
 8018b84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018b88:	462a      	mov	r2, r5
 8018b8a:	f000 fd58 	bl	801963e <_realloc_r>
 8018b8e:	4606      	mov	r6, r0
 8018b90:	2800      	cmp	r0, #0
 8018b92:	d1e0      	bne.n	8018b56 <__ssputs_r+0x5c>
 8018b94:	6921      	ldr	r1, [r4, #16]
 8018b96:	4650      	mov	r0, sl
 8018b98:	f7fe feac 	bl	80178f4 <_free_r>
 8018b9c:	230c      	movs	r3, #12
 8018b9e:	f8ca 3000 	str.w	r3, [sl]
 8018ba2:	89a3      	ldrh	r3, [r4, #12]
 8018ba4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018ba8:	81a3      	strh	r3, [r4, #12]
 8018baa:	f04f 30ff 	mov.w	r0, #4294967295
 8018bae:	e7e9      	b.n	8018b84 <__ssputs_r+0x8a>

08018bb0 <_svfiprintf_r>:
 8018bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018bb4:	4698      	mov	r8, r3
 8018bb6:	898b      	ldrh	r3, [r1, #12]
 8018bb8:	061b      	lsls	r3, r3, #24
 8018bba:	b09d      	sub	sp, #116	@ 0x74
 8018bbc:	4607      	mov	r7, r0
 8018bbe:	460d      	mov	r5, r1
 8018bc0:	4614      	mov	r4, r2
 8018bc2:	d510      	bpl.n	8018be6 <_svfiprintf_r+0x36>
 8018bc4:	690b      	ldr	r3, [r1, #16]
 8018bc6:	b973      	cbnz	r3, 8018be6 <_svfiprintf_r+0x36>
 8018bc8:	2140      	movs	r1, #64	@ 0x40
 8018bca:	f7ff fa41 	bl	8018050 <_malloc_r>
 8018bce:	6028      	str	r0, [r5, #0]
 8018bd0:	6128      	str	r0, [r5, #16]
 8018bd2:	b930      	cbnz	r0, 8018be2 <_svfiprintf_r+0x32>
 8018bd4:	230c      	movs	r3, #12
 8018bd6:	603b      	str	r3, [r7, #0]
 8018bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8018bdc:	b01d      	add	sp, #116	@ 0x74
 8018bde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018be2:	2340      	movs	r3, #64	@ 0x40
 8018be4:	616b      	str	r3, [r5, #20]
 8018be6:	2300      	movs	r3, #0
 8018be8:	9309      	str	r3, [sp, #36]	@ 0x24
 8018bea:	2320      	movs	r3, #32
 8018bec:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8018bf0:	f8cd 800c 	str.w	r8, [sp, #12]
 8018bf4:	2330      	movs	r3, #48	@ 0x30
 8018bf6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8018d94 <_svfiprintf_r+0x1e4>
 8018bfa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8018bfe:	f04f 0901 	mov.w	r9, #1
 8018c02:	4623      	mov	r3, r4
 8018c04:	469a      	mov	sl, r3
 8018c06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018c0a:	b10a      	cbz	r2, 8018c10 <_svfiprintf_r+0x60>
 8018c0c:	2a25      	cmp	r2, #37	@ 0x25
 8018c0e:	d1f9      	bne.n	8018c04 <_svfiprintf_r+0x54>
 8018c10:	ebba 0b04 	subs.w	fp, sl, r4
 8018c14:	d00b      	beq.n	8018c2e <_svfiprintf_r+0x7e>
 8018c16:	465b      	mov	r3, fp
 8018c18:	4622      	mov	r2, r4
 8018c1a:	4629      	mov	r1, r5
 8018c1c:	4638      	mov	r0, r7
 8018c1e:	f7ff ff6c 	bl	8018afa <__ssputs_r>
 8018c22:	3001      	adds	r0, #1
 8018c24:	f000 80a7 	beq.w	8018d76 <_svfiprintf_r+0x1c6>
 8018c28:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018c2a:	445a      	add	r2, fp
 8018c2c:	9209      	str	r2, [sp, #36]	@ 0x24
 8018c2e:	f89a 3000 	ldrb.w	r3, [sl]
 8018c32:	2b00      	cmp	r3, #0
 8018c34:	f000 809f 	beq.w	8018d76 <_svfiprintf_r+0x1c6>
 8018c38:	2300      	movs	r3, #0
 8018c3a:	f04f 32ff 	mov.w	r2, #4294967295
 8018c3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018c42:	f10a 0a01 	add.w	sl, sl, #1
 8018c46:	9304      	str	r3, [sp, #16]
 8018c48:	9307      	str	r3, [sp, #28]
 8018c4a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8018c4e:	931a      	str	r3, [sp, #104]	@ 0x68
 8018c50:	4654      	mov	r4, sl
 8018c52:	2205      	movs	r2, #5
 8018c54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018c58:	484e      	ldr	r0, [pc, #312]	@ (8018d94 <_svfiprintf_r+0x1e4>)
 8018c5a:	f7e7 fad1 	bl	8000200 <memchr>
 8018c5e:	9a04      	ldr	r2, [sp, #16]
 8018c60:	b9d8      	cbnz	r0, 8018c9a <_svfiprintf_r+0xea>
 8018c62:	06d0      	lsls	r0, r2, #27
 8018c64:	bf44      	itt	mi
 8018c66:	2320      	movmi	r3, #32
 8018c68:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018c6c:	0711      	lsls	r1, r2, #28
 8018c6e:	bf44      	itt	mi
 8018c70:	232b      	movmi	r3, #43	@ 0x2b
 8018c72:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018c76:	f89a 3000 	ldrb.w	r3, [sl]
 8018c7a:	2b2a      	cmp	r3, #42	@ 0x2a
 8018c7c:	d015      	beq.n	8018caa <_svfiprintf_r+0xfa>
 8018c7e:	9a07      	ldr	r2, [sp, #28]
 8018c80:	4654      	mov	r4, sl
 8018c82:	2000      	movs	r0, #0
 8018c84:	f04f 0c0a 	mov.w	ip, #10
 8018c88:	4621      	mov	r1, r4
 8018c8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018c8e:	3b30      	subs	r3, #48	@ 0x30
 8018c90:	2b09      	cmp	r3, #9
 8018c92:	d94b      	bls.n	8018d2c <_svfiprintf_r+0x17c>
 8018c94:	b1b0      	cbz	r0, 8018cc4 <_svfiprintf_r+0x114>
 8018c96:	9207      	str	r2, [sp, #28]
 8018c98:	e014      	b.n	8018cc4 <_svfiprintf_r+0x114>
 8018c9a:	eba0 0308 	sub.w	r3, r0, r8
 8018c9e:	fa09 f303 	lsl.w	r3, r9, r3
 8018ca2:	4313      	orrs	r3, r2
 8018ca4:	9304      	str	r3, [sp, #16]
 8018ca6:	46a2      	mov	sl, r4
 8018ca8:	e7d2      	b.n	8018c50 <_svfiprintf_r+0xa0>
 8018caa:	9b03      	ldr	r3, [sp, #12]
 8018cac:	1d19      	adds	r1, r3, #4
 8018cae:	681b      	ldr	r3, [r3, #0]
 8018cb0:	9103      	str	r1, [sp, #12]
 8018cb2:	2b00      	cmp	r3, #0
 8018cb4:	bfbb      	ittet	lt
 8018cb6:	425b      	neglt	r3, r3
 8018cb8:	f042 0202 	orrlt.w	r2, r2, #2
 8018cbc:	9307      	strge	r3, [sp, #28]
 8018cbe:	9307      	strlt	r3, [sp, #28]
 8018cc0:	bfb8      	it	lt
 8018cc2:	9204      	strlt	r2, [sp, #16]
 8018cc4:	7823      	ldrb	r3, [r4, #0]
 8018cc6:	2b2e      	cmp	r3, #46	@ 0x2e
 8018cc8:	d10a      	bne.n	8018ce0 <_svfiprintf_r+0x130>
 8018cca:	7863      	ldrb	r3, [r4, #1]
 8018ccc:	2b2a      	cmp	r3, #42	@ 0x2a
 8018cce:	d132      	bne.n	8018d36 <_svfiprintf_r+0x186>
 8018cd0:	9b03      	ldr	r3, [sp, #12]
 8018cd2:	1d1a      	adds	r2, r3, #4
 8018cd4:	681b      	ldr	r3, [r3, #0]
 8018cd6:	9203      	str	r2, [sp, #12]
 8018cd8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8018cdc:	3402      	adds	r4, #2
 8018cde:	9305      	str	r3, [sp, #20]
 8018ce0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8018da4 <_svfiprintf_r+0x1f4>
 8018ce4:	7821      	ldrb	r1, [r4, #0]
 8018ce6:	2203      	movs	r2, #3
 8018ce8:	4650      	mov	r0, sl
 8018cea:	f7e7 fa89 	bl	8000200 <memchr>
 8018cee:	b138      	cbz	r0, 8018d00 <_svfiprintf_r+0x150>
 8018cf0:	9b04      	ldr	r3, [sp, #16]
 8018cf2:	eba0 000a 	sub.w	r0, r0, sl
 8018cf6:	2240      	movs	r2, #64	@ 0x40
 8018cf8:	4082      	lsls	r2, r0
 8018cfa:	4313      	orrs	r3, r2
 8018cfc:	3401      	adds	r4, #1
 8018cfe:	9304      	str	r3, [sp, #16]
 8018d00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018d04:	4824      	ldr	r0, [pc, #144]	@ (8018d98 <_svfiprintf_r+0x1e8>)
 8018d06:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8018d0a:	2206      	movs	r2, #6
 8018d0c:	f7e7 fa78 	bl	8000200 <memchr>
 8018d10:	2800      	cmp	r0, #0
 8018d12:	d036      	beq.n	8018d82 <_svfiprintf_r+0x1d2>
 8018d14:	4b21      	ldr	r3, [pc, #132]	@ (8018d9c <_svfiprintf_r+0x1ec>)
 8018d16:	bb1b      	cbnz	r3, 8018d60 <_svfiprintf_r+0x1b0>
 8018d18:	9b03      	ldr	r3, [sp, #12]
 8018d1a:	3307      	adds	r3, #7
 8018d1c:	f023 0307 	bic.w	r3, r3, #7
 8018d20:	3308      	adds	r3, #8
 8018d22:	9303      	str	r3, [sp, #12]
 8018d24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018d26:	4433      	add	r3, r6
 8018d28:	9309      	str	r3, [sp, #36]	@ 0x24
 8018d2a:	e76a      	b.n	8018c02 <_svfiprintf_r+0x52>
 8018d2c:	fb0c 3202 	mla	r2, ip, r2, r3
 8018d30:	460c      	mov	r4, r1
 8018d32:	2001      	movs	r0, #1
 8018d34:	e7a8      	b.n	8018c88 <_svfiprintf_r+0xd8>
 8018d36:	2300      	movs	r3, #0
 8018d38:	3401      	adds	r4, #1
 8018d3a:	9305      	str	r3, [sp, #20]
 8018d3c:	4619      	mov	r1, r3
 8018d3e:	f04f 0c0a 	mov.w	ip, #10
 8018d42:	4620      	mov	r0, r4
 8018d44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018d48:	3a30      	subs	r2, #48	@ 0x30
 8018d4a:	2a09      	cmp	r2, #9
 8018d4c:	d903      	bls.n	8018d56 <_svfiprintf_r+0x1a6>
 8018d4e:	2b00      	cmp	r3, #0
 8018d50:	d0c6      	beq.n	8018ce0 <_svfiprintf_r+0x130>
 8018d52:	9105      	str	r1, [sp, #20]
 8018d54:	e7c4      	b.n	8018ce0 <_svfiprintf_r+0x130>
 8018d56:	fb0c 2101 	mla	r1, ip, r1, r2
 8018d5a:	4604      	mov	r4, r0
 8018d5c:	2301      	movs	r3, #1
 8018d5e:	e7f0      	b.n	8018d42 <_svfiprintf_r+0x192>
 8018d60:	ab03      	add	r3, sp, #12
 8018d62:	9300      	str	r3, [sp, #0]
 8018d64:	462a      	mov	r2, r5
 8018d66:	4b0e      	ldr	r3, [pc, #56]	@ (8018da0 <_svfiprintf_r+0x1f0>)
 8018d68:	a904      	add	r1, sp, #16
 8018d6a:	4638      	mov	r0, r7
 8018d6c:	f3af 8000 	nop.w
 8018d70:	1c42      	adds	r2, r0, #1
 8018d72:	4606      	mov	r6, r0
 8018d74:	d1d6      	bne.n	8018d24 <_svfiprintf_r+0x174>
 8018d76:	89ab      	ldrh	r3, [r5, #12]
 8018d78:	065b      	lsls	r3, r3, #25
 8018d7a:	f53f af2d 	bmi.w	8018bd8 <_svfiprintf_r+0x28>
 8018d7e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018d80:	e72c      	b.n	8018bdc <_svfiprintf_r+0x2c>
 8018d82:	ab03      	add	r3, sp, #12
 8018d84:	9300      	str	r3, [sp, #0]
 8018d86:	462a      	mov	r2, r5
 8018d88:	4b05      	ldr	r3, [pc, #20]	@ (8018da0 <_svfiprintf_r+0x1f0>)
 8018d8a:	a904      	add	r1, sp, #16
 8018d8c:	4638      	mov	r0, r7
 8018d8e:	f000 f9bb 	bl	8019108 <_printf_i>
 8018d92:	e7ed      	b.n	8018d70 <_svfiprintf_r+0x1c0>
 8018d94:	08022f81 	.word	0x08022f81
 8018d98:	08022f8b 	.word	0x08022f8b
 8018d9c:	00000000 	.word	0x00000000
 8018da0:	08018afb 	.word	0x08018afb
 8018da4:	08022f87 	.word	0x08022f87

08018da8 <__sfputc_r>:
 8018da8:	6893      	ldr	r3, [r2, #8]
 8018daa:	3b01      	subs	r3, #1
 8018dac:	2b00      	cmp	r3, #0
 8018dae:	b410      	push	{r4}
 8018db0:	6093      	str	r3, [r2, #8]
 8018db2:	da08      	bge.n	8018dc6 <__sfputc_r+0x1e>
 8018db4:	6994      	ldr	r4, [r2, #24]
 8018db6:	42a3      	cmp	r3, r4
 8018db8:	db01      	blt.n	8018dbe <__sfputc_r+0x16>
 8018dba:	290a      	cmp	r1, #10
 8018dbc:	d103      	bne.n	8018dc6 <__sfputc_r+0x1e>
 8018dbe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018dc2:	f000 bb7d 	b.w	80194c0 <__swbuf_r>
 8018dc6:	6813      	ldr	r3, [r2, #0]
 8018dc8:	1c58      	adds	r0, r3, #1
 8018dca:	6010      	str	r0, [r2, #0]
 8018dcc:	7019      	strb	r1, [r3, #0]
 8018dce:	4608      	mov	r0, r1
 8018dd0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018dd4:	4770      	bx	lr

08018dd6 <__sfputs_r>:
 8018dd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018dd8:	4606      	mov	r6, r0
 8018dda:	460f      	mov	r7, r1
 8018ddc:	4614      	mov	r4, r2
 8018dde:	18d5      	adds	r5, r2, r3
 8018de0:	42ac      	cmp	r4, r5
 8018de2:	d101      	bne.n	8018de8 <__sfputs_r+0x12>
 8018de4:	2000      	movs	r0, #0
 8018de6:	e007      	b.n	8018df8 <__sfputs_r+0x22>
 8018de8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018dec:	463a      	mov	r2, r7
 8018dee:	4630      	mov	r0, r6
 8018df0:	f7ff ffda 	bl	8018da8 <__sfputc_r>
 8018df4:	1c43      	adds	r3, r0, #1
 8018df6:	d1f3      	bne.n	8018de0 <__sfputs_r+0xa>
 8018df8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018dfc <_vfiprintf_r>:
 8018dfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e00:	460d      	mov	r5, r1
 8018e02:	b09d      	sub	sp, #116	@ 0x74
 8018e04:	4614      	mov	r4, r2
 8018e06:	4698      	mov	r8, r3
 8018e08:	4606      	mov	r6, r0
 8018e0a:	b118      	cbz	r0, 8018e14 <_vfiprintf_r+0x18>
 8018e0c:	6a03      	ldr	r3, [r0, #32]
 8018e0e:	b90b      	cbnz	r3, 8018e14 <_vfiprintf_r+0x18>
 8018e10:	f7fe fbae 	bl	8017570 <__sinit>
 8018e14:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018e16:	07d9      	lsls	r1, r3, #31
 8018e18:	d405      	bmi.n	8018e26 <_vfiprintf_r+0x2a>
 8018e1a:	89ab      	ldrh	r3, [r5, #12]
 8018e1c:	059a      	lsls	r2, r3, #22
 8018e1e:	d402      	bmi.n	8018e26 <_vfiprintf_r+0x2a>
 8018e20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018e22:	f7fe fd28 	bl	8017876 <__retarget_lock_acquire_recursive>
 8018e26:	89ab      	ldrh	r3, [r5, #12]
 8018e28:	071b      	lsls	r3, r3, #28
 8018e2a:	d501      	bpl.n	8018e30 <_vfiprintf_r+0x34>
 8018e2c:	692b      	ldr	r3, [r5, #16]
 8018e2e:	b99b      	cbnz	r3, 8018e58 <_vfiprintf_r+0x5c>
 8018e30:	4629      	mov	r1, r5
 8018e32:	4630      	mov	r0, r6
 8018e34:	f000 fb82 	bl	801953c <__swsetup_r>
 8018e38:	b170      	cbz	r0, 8018e58 <_vfiprintf_r+0x5c>
 8018e3a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018e3c:	07dc      	lsls	r4, r3, #31
 8018e3e:	d504      	bpl.n	8018e4a <_vfiprintf_r+0x4e>
 8018e40:	f04f 30ff 	mov.w	r0, #4294967295
 8018e44:	b01d      	add	sp, #116	@ 0x74
 8018e46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018e4a:	89ab      	ldrh	r3, [r5, #12]
 8018e4c:	0598      	lsls	r0, r3, #22
 8018e4e:	d4f7      	bmi.n	8018e40 <_vfiprintf_r+0x44>
 8018e50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018e52:	f7fe fd11 	bl	8017878 <__retarget_lock_release_recursive>
 8018e56:	e7f3      	b.n	8018e40 <_vfiprintf_r+0x44>
 8018e58:	2300      	movs	r3, #0
 8018e5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8018e5c:	2320      	movs	r3, #32
 8018e5e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8018e62:	f8cd 800c 	str.w	r8, [sp, #12]
 8018e66:	2330      	movs	r3, #48	@ 0x30
 8018e68:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8019018 <_vfiprintf_r+0x21c>
 8018e6c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8018e70:	f04f 0901 	mov.w	r9, #1
 8018e74:	4623      	mov	r3, r4
 8018e76:	469a      	mov	sl, r3
 8018e78:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018e7c:	b10a      	cbz	r2, 8018e82 <_vfiprintf_r+0x86>
 8018e7e:	2a25      	cmp	r2, #37	@ 0x25
 8018e80:	d1f9      	bne.n	8018e76 <_vfiprintf_r+0x7a>
 8018e82:	ebba 0b04 	subs.w	fp, sl, r4
 8018e86:	d00b      	beq.n	8018ea0 <_vfiprintf_r+0xa4>
 8018e88:	465b      	mov	r3, fp
 8018e8a:	4622      	mov	r2, r4
 8018e8c:	4629      	mov	r1, r5
 8018e8e:	4630      	mov	r0, r6
 8018e90:	f7ff ffa1 	bl	8018dd6 <__sfputs_r>
 8018e94:	3001      	adds	r0, #1
 8018e96:	f000 80a7 	beq.w	8018fe8 <_vfiprintf_r+0x1ec>
 8018e9a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018e9c:	445a      	add	r2, fp
 8018e9e:	9209      	str	r2, [sp, #36]	@ 0x24
 8018ea0:	f89a 3000 	ldrb.w	r3, [sl]
 8018ea4:	2b00      	cmp	r3, #0
 8018ea6:	f000 809f 	beq.w	8018fe8 <_vfiprintf_r+0x1ec>
 8018eaa:	2300      	movs	r3, #0
 8018eac:	f04f 32ff 	mov.w	r2, #4294967295
 8018eb0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018eb4:	f10a 0a01 	add.w	sl, sl, #1
 8018eb8:	9304      	str	r3, [sp, #16]
 8018eba:	9307      	str	r3, [sp, #28]
 8018ebc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8018ec0:	931a      	str	r3, [sp, #104]	@ 0x68
 8018ec2:	4654      	mov	r4, sl
 8018ec4:	2205      	movs	r2, #5
 8018ec6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018eca:	4853      	ldr	r0, [pc, #332]	@ (8019018 <_vfiprintf_r+0x21c>)
 8018ecc:	f7e7 f998 	bl	8000200 <memchr>
 8018ed0:	9a04      	ldr	r2, [sp, #16]
 8018ed2:	b9d8      	cbnz	r0, 8018f0c <_vfiprintf_r+0x110>
 8018ed4:	06d1      	lsls	r1, r2, #27
 8018ed6:	bf44      	itt	mi
 8018ed8:	2320      	movmi	r3, #32
 8018eda:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018ede:	0713      	lsls	r3, r2, #28
 8018ee0:	bf44      	itt	mi
 8018ee2:	232b      	movmi	r3, #43	@ 0x2b
 8018ee4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018ee8:	f89a 3000 	ldrb.w	r3, [sl]
 8018eec:	2b2a      	cmp	r3, #42	@ 0x2a
 8018eee:	d015      	beq.n	8018f1c <_vfiprintf_r+0x120>
 8018ef0:	9a07      	ldr	r2, [sp, #28]
 8018ef2:	4654      	mov	r4, sl
 8018ef4:	2000      	movs	r0, #0
 8018ef6:	f04f 0c0a 	mov.w	ip, #10
 8018efa:	4621      	mov	r1, r4
 8018efc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018f00:	3b30      	subs	r3, #48	@ 0x30
 8018f02:	2b09      	cmp	r3, #9
 8018f04:	d94b      	bls.n	8018f9e <_vfiprintf_r+0x1a2>
 8018f06:	b1b0      	cbz	r0, 8018f36 <_vfiprintf_r+0x13a>
 8018f08:	9207      	str	r2, [sp, #28]
 8018f0a:	e014      	b.n	8018f36 <_vfiprintf_r+0x13a>
 8018f0c:	eba0 0308 	sub.w	r3, r0, r8
 8018f10:	fa09 f303 	lsl.w	r3, r9, r3
 8018f14:	4313      	orrs	r3, r2
 8018f16:	9304      	str	r3, [sp, #16]
 8018f18:	46a2      	mov	sl, r4
 8018f1a:	e7d2      	b.n	8018ec2 <_vfiprintf_r+0xc6>
 8018f1c:	9b03      	ldr	r3, [sp, #12]
 8018f1e:	1d19      	adds	r1, r3, #4
 8018f20:	681b      	ldr	r3, [r3, #0]
 8018f22:	9103      	str	r1, [sp, #12]
 8018f24:	2b00      	cmp	r3, #0
 8018f26:	bfbb      	ittet	lt
 8018f28:	425b      	neglt	r3, r3
 8018f2a:	f042 0202 	orrlt.w	r2, r2, #2
 8018f2e:	9307      	strge	r3, [sp, #28]
 8018f30:	9307      	strlt	r3, [sp, #28]
 8018f32:	bfb8      	it	lt
 8018f34:	9204      	strlt	r2, [sp, #16]
 8018f36:	7823      	ldrb	r3, [r4, #0]
 8018f38:	2b2e      	cmp	r3, #46	@ 0x2e
 8018f3a:	d10a      	bne.n	8018f52 <_vfiprintf_r+0x156>
 8018f3c:	7863      	ldrb	r3, [r4, #1]
 8018f3e:	2b2a      	cmp	r3, #42	@ 0x2a
 8018f40:	d132      	bne.n	8018fa8 <_vfiprintf_r+0x1ac>
 8018f42:	9b03      	ldr	r3, [sp, #12]
 8018f44:	1d1a      	adds	r2, r3, #4
 8018f46:	681b      	ldr	r3, [r3, #0]
 8018f48:	9203      	str	r2, [sp, #12]
 8018f4a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8018f4e:	3402      	adds	r4, #2
 8018f50:	9305      	str	r3, [sp, #20]
 8018f52:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8019028 <_vfiprintf_r+0x22c>
 8018f56:	7821      	ldrb	r1, [r4, #0]
 8018f58:	2203      	movs	r2, #3
 8018f5a:	4650      	mov	r0, sl
 8018f5c:	f7e7 f950 	bl	8000200 <memchr>
 8018f60:	b138      	cbz	r0, 8018f72 <_vfiprintf_r+0x176>
 8018f62:	9b04      	ldr	r3, [sp, #16]
 8018f64:	eba0 000a 	sub.w	r0, r0, sl
 8018f68:	2240      	movs	r2, #64	@ 0x40
 8018f6a:	4082      	lsls	r2, r0
 8018f6c:	4313      	orrs	r3, r2
 8018f6e:	3401      	adds	r4, #1
 8018f70:	9304      	str	r3, [sp, #16]
 8018f72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018f76:	4829      	ldr	r0, [pc, #164]	@ (801901c <_vfiprintf_r+0x220>)
 8018f78:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8018f7c:	2206      	movs	r2, #6
 8018f7e:	f7e7 f93f 	bl	8000200 <memchr>
 8018f82:	2800      	cmp	r0, #0
 8018f84:	d03f      	beq.n	8019006 <_vfiprintf_r+0x20a>
 8018f86:	4b26      	ldr	r3, [pc, #152]	@ (8019020 <_vfiprintf_r+0x224>)
 8018f88:	bb1b      	cbnz	r3, 8018fd2 <_vfiprintf_r+0x1d6>
 8018f8a:	9b03      	ldr	r3, [sp, #12]
 8018f8c:	3307      	adds	r3, #7
 8018f8e:	f023 0307 	bic.w	r3, r3, #7
 8018f92:	3308      	adds	r3, #8
 8018f94:	9303      	str	r3, [sp, #12]
 8018f96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018f98:	443b      	add	r3, r7
 8018f9a:	9309      	str	r3, [sp, #36]	@ 0x24
 8018f9c:	e76a      	b.n	8018e74 <_vfiprintf_r+0x78>
 8018f9e:	fb0c 3202 	mla	r2, ip, r2, r3
 8018fa2:	460c      	mov	r4, r1
 8018fa4:	2001      	movs	r0, #1
 8018fa6:	e7a8      	b.n	8018efa <_vfiprintf_r+0xfe>
 8018fa8:	2300      	movs	r3, #0
 8018faa:	3401      	adds	r4, #1
 8018fac:	9305      	str	r3, [sp, #20]
 8018fae:	4619      	mov	r1, r3
 8018fb0:	f04f 0c0a 	mov.w	ip, #10
 8018fb4:	4620      	mov	r0, r4
 8018fb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018fba:	3a30      	subs	r2, #48	@ 0x30
 8018fbc:	2a09      	cmp	r2, #9
 8018fbe:	d903      	bls.n	8018fc8 <_vfiprintf_r+0x1cc>
 8018fc0:	2b00      	cmp	r3, #0
 8018fc2:	d0c6      	beq.n	8018f52 <_vfiprintf_r+0x156>
 8018fc4:	9105      	str	r1, [sp, #20]
 8018fc6:	e7c4      	b.n	8018f52 <_vfiprintf_r+0x156>
 8018fc8:	fb0c 2101 	mla	r1, ip, r1, r2
 8018fcc:	4604      	mov	r4, r0
 8018fce:	2301      	movs	r3, #1
 8018fd0:	e7f0      	b.n	8018fb4 <_vfiprintf_r+0x1b8>
 8018fd2:	ab03      	add	r3, sp, #12
 8018fd4:	9300      	str	r3, [sp, #0]
 8018fd6:	462a      	mov	r2, r5
 8018fd8:	4b12      	ldr	r3, [pc, #72]	@ (8019024 <_vfiprintf_r+0x228>)
 8018fda:	a904      	add	r1, sp, #16
 8018fdc:	4630      	mov	r0, r6
 8018fde:	f3af 8000 	nop.w
 8018fe2:	4607      	mov	r7, r0
 8018fe4:	1c78      	adds	r0, r7, #1
 8018fe6:	d1d6      	bne.n	8018f96 <_vfiprintf_r+0x19a>
 8018fe8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018fea:	07d9      	lsls	r1, r3, #31
 8018fec:	d405      	bmi.n	8018ffa <_vfiprintf_r+0x1fe>
 8018fee:	89ab      	ldrh	r3, [r5, #12]
 8018ff0:	059a      	lsls	r2, r3, #22
 8018ff2:	d402      	bmi.n	8018ffa <_vfiprintf_r+0x1fe>
 8018ff4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018ff6:	f7fe fc3f 	bl	8017878 <__retarget_lock_release_recursive>
 8018ffa:	89ab      	ldrh	r3, [r5, #12]
 8018ffc:	065b      	lsls	r3, r3, #25
 8018ffe:	f53f af1f 	bmi.w	8018e40 <_vfiprintf_r+0x44>
 8019002:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019004:	e71e      	b.n	8018e44 <_vfiprintf_r+0x48>
 8019006:	ab03      	add	r3, sp, #12
 8019008:	9300      	str	r3, [sp, #0]
 801900a:	462a      	mov	r2, r5
 801900c:	4b05      	ldr	r3, [pc, #20]	@ (8019024 <_vfiprintf_r+0x228>)
 801900e:	a904      	add	r1, sp, #16
 8019010:	4630      	mov	r0, r6
 8019012:	f000 f879 	bl	8019108 <_printf_i>
 8019016:	e7e4      	b.n	8018fe2 <_vfiprintf_r+0x1e6>
 8019018:	08022f81 	.word	0x08022f81
 801901c:	08022f8b 	.word	0x08022f8b
 8019020:	00000000 	.word	0x00000000
 8019024:	08018dd7 	.word	0x08018dd7
 8019028:	08022f87 	.word	0x08022f87

0801902c <_printf_common>:
 801902c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019030:	4616      	mov	r6, r2
 8019032:	4698      	mov	r8, r3
 8019034:	688a      	ldr	r2, [r1, #8]
 8019036:	690b      	ldr	r3, [r1, #16]
 8019038:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801903c:	4293      	cmp	r3, r2
 801903e:	bfb8      	it	lt
 8019040:	4613      	movlt	r3, r2
 8019042:	6033      	str	r3, [r6, #0]
 8019044:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8019048:	4607      	mov	r7, r0
 801904a:	460c      	mov	r4, r1
 801904c:	b10a      	cbz	r2, 8019052 <_printf_common+0x26>
 801904e:	3301      	adds	r3, #1
 8019050:	6033      	str	r3, [r6, #0]
 8019052:	6823      	ldr	r3, [r4, #0]
 8019054:	0699      	lsls	r1, r3, #26
 8019056:	bf42      	ittt	mi
 8019058:	6833      	ldrmi	r3, [r6, #0]
 801905a:	3302      	addmi	r3, #2
 801905c:	6033      	strmi	r3, [r6, #0]
 801905e:	6825      	ldr	r5, [r4, #0]
 8019060:	f015 0506 	ands.w	r5, r5, #6
 8019064:	d106      	bne.n	8019074 <_printf_common+0x48>
 8019066:	f104 0a19 	add.w	sl, r4, #25
 801906a:	68e3      	ldr	r3, [r4, #12]
 801906c:	6832      	ldr	r2, [r6, #0]
 801906e:	1a9b      	subs	r3, r3, r2
 8019070:	42ab      	cmp	r3, r5
 8019072:	dc26      	bgt.n	80190c2 <_printf_common+0x96>
 8019074:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8019078:	6822      	ldr	r2, [r4, #0]
 801907a:	3b00      	subs	r3, #0
 801907c:	bf18      	it	ne
 801907e:	2301      	movne	r3, #1
 8019080:	0692      	lsls	r2, r2, #26
 8019082:	d42b      	bmi.n	80190dc <_printf_common+0xb0>
 8019084:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8019088:	4641      	mov	r1, r8
 801908a:	4638      	mov	r0, r7
 801908c:	47c8      	blx	r9
 801908e:	3001      	adds	r0, #1
 8019090:	d01e      	beq.n	80190d0 <_printf_common+0xa4>
 8019092:	6823      	ldr	r3, [r4, #0]
 8019094:	6922      	ldr	r2, [r4, #16]
 8019096:	f003 0306 	and.w	r3, r3, #6
 801909a:	2b04      	cmp	r3, #4
 801909c:	bf02      	ittt	eq
 801909e:	68e5      	ldreq	r5, [r4, #12]
 80190a0:	6833      	ldreq	r3, [r6, #0]
 80190a2:	1aed      	subeq	r5, r5, r3
 80190a4:	68a3      	ldr	r3, [r4, #8]
 80190a6:	bf0c      	ite	eq
 80190a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80190ac:	2500      	movne	r5, #0
 80190ae:	4293      	cmp	r3, r2
 80190b0:	bfc4      	itt	gt
 80190b2:	1a9b      	subgt	r3, r3, r2
 80190b4:	18ed      	addgt	r5, r5, r3
 80190b6:	2600      	movs	r6, #0
 80190b8:	341a      	adds	r4, #26
 80190ba:	42b5      	cmp	r5, r6
 80190bc:	d11a      	bne.n	80190f4 <_printf_common+0xc8>
 80190be:	2000      	movs	r0, #0
 80190c0:	e008      	b.n	80190d4 <_printf_common+0xa8>
 80190c2:	2301      	movs	r3, #1
 80190c4:	4652      	mov	r2, sl
 80190c6:	4641      	mov	r1, r8
 80190c8:	4638      	mov	r0, r7
 80190ca:	47c8      	blx	r9
 80190cc:	3001      	adds	r0, #1
 80190ce:	d103      	bne.n	80190d8 <_printf_common+0xac>
 80190d0:	f04f 30ff 	mov.w	r0, #4294967295
 80190d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80190d8:	3501      	adds	r5, #1
 80190da:	e7c6      	b.n	801906a <_printf_common+0x3e>
 80190dc:	18e1      	adds	r1, r4, r3
 80190de:	1c5a      	adds	r2, r3, #1
 80190e0:	2030      	movs	r0, #48	@ 0x30
 80190e2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80190e6:	4422      	add	r2, r4
 80190e8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80190ec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80190f0:	3302      	adds	r3, #2
 80190f2:	e7c7      	b.n	8019084 <_printf_common+0x58>
 80190f4:	2301      	movs	r3, #1
 80190f6:	4622      	mov	r2, r4
 80190f8:	4641      	mov	r1, r8
 80190fa:	4638      	mov	r0, r7
 80190fc:	47c8      	blx	r9
 80190fe:	3001      	adds	r0, #1
 8019100:	d0e6      	beq.n	80190d0 <_printf_common+0xa4>
 8019102:	3601      	adds	r6, #1
 8019104:	e7d9      	b.n	80190ba <_printf_common+0x8e>
	...

08019108 <_printf_i>:
 8019108:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801910c:	7e0f      	ldrb	r7, [r1, #24]
 801910e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8019110:	2f78      	cmp	r7, #120	@ 0x78
 8019112:	4691      	mov	r9, r2
 8019114:	4680      	mov	r8, r0
 8019116:	460c      	mov	r4, r1
 8019118:	469a      	mov	sl, r3
 801911a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801911e:	d807      	bhi.n	8019130 <_printf_i+0x28>
 8019120:	2f62      	cmp	r7, #98	@ 0x62
 8019122:	d80a      	bhi.n	801913a <_printf_i+0x32>
 8019124:	2f00      	cmp	r7, #0
 8019126:	f000 80d1 	beq.w	80192cc <_printf_i+0x1c4>
 801912a:	2f58      	cmp	r7, #88	@ 0x58
 801912c:	f000 80b8 	beq.w	80192a0 <_printf_i+0x198>
 8019130:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8019134:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8019138:	e03a      	b.n	80191b0 <_printf_i+0xa8>
 801913a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801913e:	2b15      	cmp	r3, #21
 8019140:	d8f6      	bhi.n	8019130 <_printf_i+0x28>
 8019142:	a101      	add	r1, pc, #4	@ (adr r1, 8019148 <_printf_i+0x40>)
 8019144:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8019148:	080191a1 	.word	0x080191a1
 801914c:	080191b5 	.word	0x080191b5
 8019150:	08019131 	.word	0x08019131
 8019154:	08019131 	.word	0x08019131
 8019158:	08019131 	.word	0x08019131
 801915c:	08019131 	.word	0x08019131
 8019160:	080191b5 	.word	0x080191b5
 8019164:	08019131 	.word	0x08019131
 8019168:	08019131 	.word	0x08019131
 801916c:	08019131 	.word	0x08019131
 8019170:	08019131 	.word	0x08019131
 8019174:	080192b3 	.word	0x080192b3
 8019178:	080191df 	.word	0x080191df
 801917c:	0801926d 	.word	0x0801926d
 8019180:	08019131 	.word	0x08019131
 8019184:	08019131 	.word	0x08019131
 8019188:	080192d5 	.word	0x080192d5
 801918c:	08019131 	.word	0x08019131
 8019190:	080191df 	.word	0x080191df
 8019194:	08019131 	.word	0x08019131
 8019198:	08019131 	.word	0x08019131
 801919c:	08019275 	.word	0x08019275
 80191a0:	6833      	ldr	r3, [r6, #0]
 80191a2:	1d1a      	adds	r2, r3, #4
 80191a4:	681b      	ldr	r3, [r3, #0]
 80191a6:	6032      	str	r2, [r6, #0]
 80191a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80191ac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80191b0:	2301      	movs	r3, #1
 80191b2:	e09c      	b.n	80192ee <_printf_i+0x1e6>
 80191b4:	6833      	ldr	r3, [r6, #0]
 80191b6:	6820      	ldr	r0, [r4, #0]
 80191b8:	1d19      	adds	r1, r3, #4
 80191ba:	6031      	str	r1, [r6, #0]
 80191bc:	0606      	lsls	r6, r0, #24
 80191be:	d501      	bpl.n	80191c4 <_printf_i+0xbc>
 80191c0:	681d      	ldr	r5, [r3, #0]
 80191c2:	e003      	b.n	80191cc <_printf_i+0xc4>
 80191c4:	0645      	lsls	r5, r0, #25
 80191c6:	d5fb      	bpl.n	80191c0 <_printf_i+0xb8>
 80191c8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80191cc:	2d00      	cmp	r5, #0
 80191ce:	da03      	bge.n	80191d8 <_printf_i+0xd0>
 80191d0:	232d      	movs	r3, #45	@ 0x2d
 80191d2:	426d      	negs	r5, r5
 80191d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80191d8:	4858      	ldr	r0, [pc, #352]	@ (801933c <_printf_i+0x234>)
 80191da:	230a      	movs	r3, #10
 80191dc:	e011      	b.n	8019202 <_printf_i+0xfa>
 80191de:	6821      	ldr	r1, [r4, #0]
 80191e0:	6833      	ldr	r3, [r6, #0]
 80191e2:	0608      	lsls	r0, r1, #24
 80191e4:	f853 5b04 	ldr.w	r5, [r3], #4
 80191e8:	d402      	bmi.n	80191f0 <_printf_i+0xe8>
 80191ea:	0649      	lsls	r1, r1, #25
 80191ec:	bf48      	it	mi
 80191ee:	b2ad      	uxthmi	r5, r5
 80191f0:	2f6f      	cmp	r7, #111	@ 0x6f
 80191f2:	4852      	ldr	r0, [pc, #328]	@ (801933c <_printf_i+0x234>)
 80191f4:	6033      	str	r3, [r6, #0]
 80191f6:	bf14      	ite	ne
 80191f8:	230a      	movne	r3, #10
 80191fa:	2308      	moveq	r3, #8
 80191fc:	2100      	movs	r1, #0
 80191fe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8019202:	6866      	ldr	r6, [r4, #4]
 8019204:	60a6      	str	r6, [r4, #8]
 8019206:	2e00      	cmp	r6, #0
 8019208:	db05      	blt.n	8019216 <_printf_i+0x10e>
 801920a:	6821      	ldr	r1, [r4, #0]
 801920c:	432e      	orrs	r6, r5
 801920e:	f021 0104 	bic.w	r1, r1, #4
 8019212:	6021      	str	r1, [r4, #0]
 8019214:	d04b      	beq.n	80192ae <_printf_i+0x1a6>
 8019216:	4616      	mov	r6, r2
 8019218:	fbb5 f1f3 	udiv	r1, r5, r3
 801921c:	fb03 5711 	mls	r7, r3, r1, r5
 8019220:	5dc7      	ldrb	r7, [r0, r7]
 8019222:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8019226:	462f      	mov	r7, r5
 8019228:	42bb      	cmp	r3, r7
 801922a:	460d      	mov	r5, r1
 801922c:	d9f4      	bls.n	8019218 <_printf_i+0x110>
 801922e:	2b08      	cmp	r3, #8
 8019230:	d10b      	bne.n	801924a <_printf_i+0x142>
 8019232:	6823      	ldr	r3, [r4, #0]
 8019234:	07df      	lsls	r7, r3, #31
 8019236:	d508      	bpl.n	801924a <_printf_i+0x142>
 8019238:	6923      	ldr	r3, [r4, #16]
 801923a:	6861      	ldr	r1, [r4, #4]
 801923c:	4299      	cmp	r1, r3
 801923e:	bfde      	ittt	le
 8019240:	2330      	movle	r3, #48	@ 0x30
 8019242:	f806 3c01 	strble.w	r3, [r6, #-1]
 8019246:	f106 36ff 	addle.w	r6, r6, #4294967295
 801924a:	1b92      	subs	r2, r2, r6
 801924c:	6122      	str	r2, [r4, #16]
 801924e:	f8cd a000 	str.w	sl, [sp]
 8019252:	464b      	mov	r3, r9
 8019254:	aa03      	add	r2, sp, #12
 8019256:	4621      	mov	r1, r4
 8019258:	4640      	mov	r0, r8
 801925a:	f7ff fee7 	bl	801902c <_printf_common>
 801925e:	3001      	adds	r0, #1
 8019260:	d14a      	bne.n	80192f8 <_printf_i+0x1f0>
 8019262:	f04f 30ff 	mov.w	r0, #4294967295
 8019266:	b004      	add	sp, #16
 8019268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801926c:	6823      	ldr	r3, [r4, #0]
 801926e:	f043 0320 	orr.w	r3, r3, #32
 8019272:	6023      	str	r3, [r4, #0]
 8019274:	4832      	ldr	r0, [pc, #200]	@ (8019340 <_printf_i+0x238>)
 8019276:	2778      	movs	r7, #120	@ 0x78
 8019278:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801927c:	6823      	ldr	r3, [r4, #0]
 801927e:	6831      	ldr	r1, [r6, #0]
 8019280:	061f      	lsls	r7, r3, #24
 8019282:	f851 5b04 	ldr.w	r5, [r1], #4
 8019286:	d402      	bmi.n	801928e <_printf_i+0x186>
 8019288:	065f      	lsls	r7, r3, #25
 801928a:	bf48      	it	mi
 801928c:	b2ad      	uxthmi	r5, r5
 801928e:	6031      	str	r1, [r6, #0]
 8019290:	07d9      	lsls	r1, r3, #31
 8019292:	bf44      	itt	mi
 8019294:	f043 0320 	orrmi.w	r3, r3, #32
 8019298:	6023      	strmi	r3, [r4, #0]
 801929a:	b11d      	cbz	r5, 80192a4 <_printf_i+0x19c>
 801929c:	2310      	movs	r3, #16
 801929e:	e7ad      	b.n	80191fc <_printf_i+0xf4>
 80192a0:	4826      	ldr	r0, [pc, #152]	@ (801933c <_printf_i+0x234>)
 80192a2:	e7e9      	b.n	8019278 <_printf_i+0x170>
 80192a4:	6823      	ldr	r3, [r4, #0]
 80192a6:	f023 0320 	bic.w	r3, r3, #32
 80192aa:	6023      	str	r3, [r4, #0]
 80192ac:	e7f6      	b.n	801929c <_printf_i+0x194>
 80192ae:	4616      	mov	r6, r2
 80192b0:	e7bd      	b.n	801922e <_printf_i+0x126>
 80192b2:	6833      	ldr	r3, [r6, #0]
 80192b4:	6825      	ldr	r5, [r4, #0]
 80192b6:	6961      	ldr	r1, [r4, #20]
 80192b8:	1d18      	adds	r0, r3, #4
 80192ba:	6030      	str	r0, [r6, #0]
 80192bc:	062e      	lsls	r6, r5, #24
 80192be:	681b      	ldr	r3, [r3, #0]
 80192c0:	d501      	bpl.n	80192c6 <_printf_i+0x1be>
 80192c2:	6019      	str	r1, [r3, #0]
 80192c4:	e002      	b.n	80192cc <_printf_i+0x1c4>
 80192c6:	0668      	lsls	r0, r5, #25
 80192c8:	d5fb      	bpl.n	80192c2 <_printf_i+0x1ba>
 80192ca:	8019      	strh	r1, [r3, #0]
 80192cc:	2300      	movs	r3, #0
 80192ce:	6123      	str	r3, [r4, #16]
 80192d0:	4616      	mov	r6, r2
 80192d2:	e7bc      	b.n	801924e <_printf_i+0x146>
 80192d4:	6833      	ldr	r3, [r6, #0]
 80192d6:	1d1a      	adds	r2, r3, #4
 80192d8:	6032      	str	r2, [r6, #0]
 80192da:	681e      	ldr	r6, [r3, #0]
 80192dc:	6862      	ldr	r2, [r4, #4]
 80192de:	2100      	movs	r1, #0
 80192e0:	4630      	mov	r0, r6
 80192e2:	f7e6 ff8d 	bl	8000200 <memchr>
 80192e6:	b108      	cbz	r0, 80192ec <_printf_i+0x1e4>
 80192e8:	1b80      	subs	r0, r0, r6
 80192ea:	6060      	str	r0, [r4, #4]
 80192ec:	6863      	ldr	r3, [r4, #4]
 80192ee:	6123      	str	r3, [r4, #16]
 80192f0:	2300      	movs	r3, #0
 80192f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80192f6:	e7aa      	b.n	801924e <_printf_i+0x146>
 80192f8:	6923      	ldr	r3, [r4, #16]
 80192fa:	4632      	mov	r2, r6
 80192fc:	4649      	mov	r1, r9
 80192fe:	4640      	mov	r0, r8
 8019300:	47d0      	blx	sl
 8019302:	3001      	adds	r0, #1
 8019304:	d0ad      	beq.n	8019262 <_printf_i+0x15a>
 8019306:	6823      	ldr	r3, [r4, #0]
 8019308:	079b      	lsls	r3, r3, #30
 801930a:	d413      	bmi.n	8019334 <_printf_i+0x22c>
 801930c:	68e0      	ldr	r0, [r4, #12]
 801930e:	9b03      	ldr	r3, [sp, #12]
 8019310:	4298      	cmp	r0, r3
 8019312:	bfb8      	it	lt
 8019314:	4618      	movlt	r0, r3
 8019316:	e7a6      	b.n	8019266 <_printf_i+0x15e>
 8019318:	2301      	movs	r3, #1
 801931a:	4632      	mov	r2, r6
 801931c:	4649      	mov	r1, r9
 801931e:	4640      	mov	r0, r8
 8019320:	47d0      	blx	sl
 8019322:	3001      	adds	r0, #1
 8019324:	d09d      	beq.n	8019262 <_printf_i+0x15a>
 8019326:	3501      	adds	r5, #1
 8019328:	68e3      	ldr	r3, [r4, #12]
 801932a:	9903      	ldr	r1, [sp, #12]
 801932c:	1a5b      	subs	r3, r3, r1
 801932e:	42ab      	cmp	r3, r5
 8019330:	dcf2      	bgt.n	8019318 <_printf_i+0x210>
 8019332:	e7eb      	b.n	801930c <_printf_i+0x204>
 8019334:	2500      	movs	r5, #0
 8019336:	f104 0619 	add.w	r6, r4, #25
 801933a:	e7f5      	b.n	8019328 <_printf_i+0x220>
 801933c:	08022f92 	.word	0x08022f92
 8019340:	08022fa3 	.word	0x08022fa3

08019344 <__sflush_r>:
 8019344:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8019348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801934c:	0716      	lsls	r6, r2, #28
 801934e:	4605      	mov	r5, r0
 8019350:	460c      	mov	r4, r1
 8019352:	d454      	bmi.n	80193fe <__sflush_r+0xba>
 8019354:	684b      	ldr	r3, [r1, #4]
 8019356:	2b00      	cmp	r3, #0
 8019358:	dc02      	bgt.n	8019360 <__sflush_r+0x1c>
 801935a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801935c:	2b00      	cmp	r3, #0
 801935e:	dd48      	ble.n	80193f2 <__sflush_r+0xae>
 8019360:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8019362:	2e00      	cmp	r6, #0
 8019364:	d045      	beq.n	80193f2 <__sflush_r+0xae>
 8019366:	2300      	movs	r3, #0
 8019368:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801936c:	682f      	ldr	r7, [r5, #0]
 801936e:	6a21      	ldr	r1, [r4, #32]
 8019370:	602b      	str	r3, [r5, #0]
 8019372:	d030      	beq.n	80193d6 <__sflush_r+0x92>
 8019374:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8019376:	89a3      	ldrh	r3, [r4, #12]
 8019378:	0759      	lsls	r1, r3, #29
 801937a:	d505      	bpl.n	8019388 <__sflush_r+0x44>
 801937c:	6863      	ldr	r3, [r4, #4]
 801937e:	1ad2      	subs	r2, r2, r3
 8019380:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8019382:	b10b      	cbz	r3, 8019388 <__sflush_r+0x44>
 8019384:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8019386:	1ad2      	subs	r2, r2, r3
 8019388:	2300      	movs	r3, #0
 801938a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801938c:	6a21      	ldr	r1, [r4, #32]
 801938e:	4628      	mov	r0, r5
 8019390:	47b0      	blx	r6
 8019392:	1c43      	adds	r3, r0, #1
 8019394:	89a3      	ldrh	r3, [r4, #12]
 8019396:	d106      	bne.n	80193a6 <__sflush_r+0x62>
 8019398:	6829      	ldr	r1, [r5, #0]
 801939a:	291d      	cmp	r1, #29
 801939c:	d82b      	bhi.n	80193f6 <__sflush_r+0xb2>
 801939e:	4a2a      	ldr	r2, [pc, #168]	@ (8019448 <__sflush_r+0x104>)
 80193a0:	40ca      	lsrs	r2, r1
 80193a2:	07d6      	lsls	r6, r2, #31
 80193a4:	d527      	bpl.n	80193f6 <__sflush_r+0xb2>
 80193a6:	2200      	movs	r2, #0
 80193a8:	6062      	str	r2, [r4, #4]
 80193aa:	04d9      	lsls	r1, r3, #19
 80193ac:	6922      	ldr	r2, [r4, #16]
 80193ae:	6022      	str	r2, [r4, #0]
 80193b0:	d504      	bpl.n	80193bc <__sflush_r+0x78>
 80193b2:	1c42      	adds	r2, r0, #1
 80193b4:	d101      	bne.n	80193ba <__sflush_r+0x76>
 80193b6:	682b      	ldr	r3, [r5, #0]
 80193b8:	b903      	cbnz	r3, 80193bc <__sflush_r+0x78>
 80193ba:	6560      	str	r0, [r4, #84]	@ 0x54
 80193bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80193be:	602f      	str	r7, [r5, #0]
 80193c0:	b1b9      	cbz	r1, 80193f2 <__sflush_r+0xae>
 80193c2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80193c6:	4299      	cmp	r1, r3
 80193c8:	d002      	beq.n	80193d0 <__sflush_r+0x8c>
 80193ca:	4628      	mov	r0, r5
 80193cc:	f7fe fa92 	bl	80178f4 <_free_r>
 80193d0:	2300      	movs	r3, #0
 80193d2:	6363      	str	r3, [r4, #52]	@ 0x34
 80193d4:	e00d      	b.n	80193f2 <__sflush_r+0xae>
 80193d6:	2301      	movs	r3, #1
 80193d8:	4628      	mov	r0, r5
 80193da:	47b0      	blx	r6
 80193dc:	4602      	mov	r2, r0
 80193de:	1c50      	adds	r0, r2, #1
 80193e0:	d1c9      	bne.n	8019376 <__sflush_r+0x32>
 80193e2:	682b      	ldr	r3, [r5, #0]
 80193e4:	2b00      	cmp	r3, #0
 80193e6:	d0c6      	beq.n	8019376 <__sflush_r+0x32>
 80193e8:	2b1d      	cmp	r3, #29
 80193ea:	d001      	beq.n	80193f0 <__sflush_r+0xac>
 80193ec:	2b16      	cmp	r3, #22
 80193ee:	d11e      	bne.n	801942e <__sflush_r+0xea>
 80193f0:	602f      	str	r7, [r5, #0]
 80193f2:	2000      	movs	r0, #0
 80193f4:	e022      	b.n	801943c <__sflush_r+0xf8>
 80193f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80193fa:	b21b      	sxth	r3, r3
 80193fc:	e01b      	b.n	8019436 <__sflush_r+0xf2>
 80193fe:	690f      	ldr	r7, [r1, #16]
 8019400:	2f00      	cmp	r7, #0
 8019402:	d0f6      	beq.n	80193f2 <__sflush_r+0xae>
 8019404:	0793      	lsls	r3, r2, #30
 8019406:	680e      	ldr	r6, [r1, #0]
 8019408:	bf08      	it	eq
 801940a:	694b      	ldreq	r3, [r1, #20]
 801940c:	600f      	str	r7, [r1, #0]
 801940e:	bf18      	it	ne
 8019410:	2300      	movne	r3, #0
 8019412:	eba6 0807 	sub.w	r8, r6, r7
 8019416:	608b      	str	r3, [r1, #8]
 8019418:	f1b8 0f00 	cmp.w	r8, #0
 801941c:	dde9      	ble.n	80193f2 <__sflush_r+0xae>
 801941e:	6a21      	ldr	r1, [r4, #32]
 8019420:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8019422:	4643      	mov	r3, r8
 8019424:	463a      	mov	r2, r7
 8019426:	4628      	mov	r0, r5
 8019428:	47b0      	blx	r6
 801942a:	2800      	cmp	r0, #0
 801942c:	dc08      	bgt.n	8019440 <__sflush_r+0xfc>
 801942e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019432:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019436:	81a3      	strh	r3, [r4, #12]
 8019438:	f04f 30ff 	mov.w	r0, #4294967295
 801943c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019440:	4407      	add	r7, r0
 8019442:	eba8 0800 	sub.w	r8, r8, r0
 8019446:	e7e7      	b.n	8019418 <__sflush_r+0xd4>
 8019448:	20400001 	.word	0x20400001

0801944c <_fflush_r>:
 801944c:	b538      	push	{r3, r4, r5, lr}
 801944e:	690b      	ldr	r3, [r1, #16]
 8019450:	4605      	mov	r5, r0
 8019452:	460c      	mov	r4, r1
 8019454:	b913      	cbnz	r3, 801945c <_fflush_r+0x10>
 8019456:	2500      	movs	r5, #0
 8019458:	4628      	mov	r0, r5
 801945a:	bd38      	pop	{r3, r4, r5, pc}
 801945c:	b118      	cbz	r0, 8019466 <_fflush_r+0x1a>
 801945e:	6a03      	ldr	r3, [r0, #32]
 8019460:	b90b      	cbnz	r3, 8019466 <_fflush_r+0x1a>
 8019462:	f7fe f885 	bl	8017570 <__sinit>
 8019466:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801946a:	2b00      	cmp	r3, #0
 801946c:	d0f3      	beq.n	8019456 <_fflush_r+0xa>
 801946e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8019470:	07d0      	lsls	r0, r2, #31
 8019472:	d404      	bmi.n	801947e <_fflush_r+0x32>
 8019474:	0599      	lsls	r1, r3, #22
 8019476:	d402      	bmi.n	801947e <_fflush_r+0x32>
 8019478:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801947a:	f7fe f9fc 	bl	8017876 <__retarget_lock_acquire_recursive>
 801947e:	4628      	mov	r0, r5
 8019480:	4621      	mov	r1, r4
 8019482:	f7ff ff5f 	bl	8019344 <__sflush_r>
 8019486:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8019488:	07da      	lsls	r2, r3, #31
 801948a:	4605      	mov	r5, r0
 801948c:	d4e4      	bmi.n	8019458 <_fflush_r+0xc>
 801948e:	89a3      	ldrh	r3, [r4, #12]
 8019490:	059b      	lsls	r3, r3, #22
 8019492:	d4e1      	bmi.n	8019458 <_fflush_r+0xc>
 8019494:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8019496:	f7fe f9ef 	bl	8017878 <__retarget_lock_release_recursive>
 801949a:	e7dd      	b.n	8019458 <_fflush_r+0xc>

0801949c <fiprintf>:
 801949c:	b40e      	push	{r1, r2, r3}
 801949e:	b503      	push	{r0, r1, lr}
 80194a0:	4601      	mov	r1, r0
 80194a2:	ab03      	add	r3, sp, #12
 80194a4:	4805      	ldr	r0, [pc, #20]	@ (80194bc <fiprintf+0x20>)
 80194a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80194aa:	6800      	ldr	r0, [r0, #0]
 80194ac:	9301      	str	r3, [sp, #4]
 80194ae:	f7ff fca5 	bl	8018dfc <_vfiprintf_r>
 80194b2:	b002      	add	sp, #8
 80194b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80194b8:	b003      	add	sp, #12
 80194ba:	4770      	bx	lr
 80194bc:	20000a8c 	.word	0x20000a8c

080194c0 <__swbuf_r>:
 80194c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80194c2:	460e      	mov	r6, r1
 80194c4:	4614      	mov	r4, r2
 80194c6:	4605      	mov	r5, r0
 80194c8:	b118      	cbz	r0, 80194d2 <__swbuf_r+0x12>
 80194ca:	6a03      	ldr	r3, [r0, #32]
 80194cc:	b90b      	cbnz	r3, 80194d2 <__swbuf_r+0x12>
 80194ce:	f7fe f84f 	bl	8017570 <__sinit>
 80194d2:	69a3      	ldr	r3, [r4, #24]
 80194d4:	60a3      	str	r3, [r4, #8]
 80194d6:	89a3      	ldrh	r3, [r4, #12]
 80194d8:	071a      	lsls	r2, r3, #28
 80194da:	d501      	bpl.n	80194e0 <__swbuf_r+0x20>
 80194dc:	6923      	ldr	r3, [r4, #16]
 80194de:	b943      	cbnz	r3, 80194f2 <__swbuf_r+0x32>
 80194e0:	4621      	mov	r1, r4
 80194e2:	4628      	mov	r0, r5
 80194e4:	f000 f82a 	bl	801953c <__swsetup_r>
 80194e8:	b118      	cbz	r0, 80194f2 <__swbuf_r+0x32>
 80194ea:	f04f 37ff 	mov.w	r7, #4294967295
 80194ee:	4638      	mov	r0, r7
 80194f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80194f2:	6823      	ldr	r3, [r4, #0]
 80194f4:	6922      	ldr	r2, [r4, #16]
 80194f6:	1a98      	subs	r0, r3, r2
 80194f8:	6963      	ldr	r3, [r4, #20]
 80194fa:	b2f6      	uxtb	r6, r6
 80194fc:	4283      	cmp	r3, r0
 80194fe:	4637      	mov	r7, r6
 8019500:	dc05      	bgt.n	801950e <__swbuf_r+0x4e>
 8019502:	4621      	mov	r1, r4
 8019504:	4628      	mov	r0, r5
 8019506:	f7ff ffa1 	bl	801944c <_fflush_r>
 801950a:	2800      	cmp	r0, #0
 801950c:	d1ed      	bne.n	80194ea <__swbuf_r+0x2a>
 801950e:	68a3      	ldr	r3, [r4, #8]
 8019510:	3b01      	subs	r3, #1
 8019512:	60a3      	str	r3, [r4, #8]
 8019514:	6823      	ldr	r3, [r4, #0]
 8019516:	1c5a      	adds	r2, r3, #1
 8019518:	6022      	str	r2, [r4, #0]
 801951a:	701e      	strb	r6, [r3, #0]
 801951c:	6962      	ldr	r2, [r4, #20]
 801951e:	1c43      	adds	r3, r0, #1
 8019520:	429a      	cmp	r2, r3
 8019522:	d004      	beq.n	801952e <__swbuf_r+0x6e>
 8019524:	89a3      	ldrh	r3, [r4, #12]
 8019526:	07db      	lsls	r3, r3, #31
 8019528:	d5e1      	bpl.n	80194ee <__swbuf_r+0x2e>
 801952a:	2e0a      	cmp	r6, #10
 801952c:	d1df      	bne.n	80194ee <__swbuf_r+0x2e>
 801952e:	4621      	mov	r1, r4
 8019530:	4628      	mov	r0, r5
 8019532:	f7ff ff8b 	bl	801944c <_fflush_r>
 8019536:	2800      	cmp	r0, #0
 8019538:	d0d9      	beq.n	80194ee <__swbuf_r+0x2e>
 801953a:	e7d6      	b.n	80194ea <__swbuf_r+0x2a>

0801953c <__swsetup_r>:
 801953c:	b538      	push	{r3, r4, r5, lr}
 801953e:	4b29      	ldr	r3, [pc, #164]	@ (80195e4 <__swsetup_r+0xa8>)
 8019540:	4605      	mov	r5, r0
 8019542:	6818      	ldr	r0, [r3, #0]
 8019544:	460c      	mov	r4, r1
 8019546:	b118      	cbz	r0, 8019550 <__swsetup_r+0x14>
 8019548:	6a03      	ldr	r3, [r0, #32]
 801954a:	b90b      	cbnz	r3, 8019550 <__swsetup_r+0x14>
 801954c:	f7fe f810 	bl	8017570 <__sinit>
 8019550:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019554:	0719      	lsls	r1, r3, #28
 8019556:	d422      	bmi.n	801959e <__swsetup_r+0x62>
 8019558:	06da      	lsls	r2, r3, #27
 801955a:	d407      	bmi.n	801956c <__swsetup_r+0x30>
 801955c:	2209      	movs	r2, #9
 801955e:	602a      	str	r2, [r5, #0]
 8019560:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019564:	81a3      	strh	r3, [r4, #12]
 8019566:	f04f 30ff 	mov.w	r0, #4294967295
 801956a:	e033      	b.n	80195d4 <__swsetup_r+0x98>
 801956c:	0758      	lsls	r0, r3, #29
 801956e:	d512      	bpl.n	8019596 <__swsetup_r+0x5a>
 8019570:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8019572:	b141      	cbz	r1, 8019586 <__swsetup_r+0x4a>
 8019574:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8019578:	4299      	cmp	r1, r3
 801957a:	d002      	beq.n	8019582 <__swsetup_r+0x46>
 801957c:	4628      	mov	r0, r5
 801957e:	f7fe f9b9 	bl	80178f4 <_free_r>
 8019582:	2300      	movs	r3, #0
 8019584:	6363      	str	r3, [r4, #52]	@ 0x34
 8019586:	89a3      	ldrh	r3, [r4, #12]
 8019588:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801958c:	81a3      	strh	r3, [r4, #12]
 801958e:	2300      	movs	r3, #0
 8019590:	6063      	str	r3, [r4, #4]
 8019592:	6923      	ldr	r3, [r4, #16]
 8019594:	6023      	str	r3, [r4, #0]
 8019596:	89a3      	ldrh	r3, [r4, #12]
 8019598:	f043 0308 	orr.w	r3, r3, #8
 801959c:	81a3      	strh	r3, [r4, #12]
 801959e:	6923      	ldr	r3, [r4, #16]
 80195a0:	b94b      	cbnz	r3, 80195b6 <__swsetup_r+0x7a>
 80195a2:	89a3      	ldrh	r3, [r4, #12]
 80195a4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80195a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80195ac:	d003      	beq.n	80195b6 <__swsetup_r+0x7a>
 80195ae:	4621      	mov	r1, r4
 80195b0:	4628      	mov	r0, r5
 80195b2:	f000 f898 	bl	80196e6 <__smakebuf_r>
 80195b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80195ba:	f013 0201 	ands.w	r2, r3, #1
 80195be:	d00a      	beq.n	80195d6 <__swsetup_r+0x9a>
 80195c0:	2200      	movs	r2, #0
 80195c2:	60a2      	str	r2, [r4, #8]
 80195c4:	6962      	ldr	r2, [r4, #20]
 80195c6:	4252      	negs	r2, r2
 80195c8:	61a2      	str	r2, [r4, #24]
 80195ca:	6922      	ldr	r2, [r4, #16]
 80195cc:	b942      	cbnz	r2, 80195e0 <__swsetup_r+0xa4>
 80195ce:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80195d2:	d1c5      	bne.n	8019560 <__swsetup_r+0x24>
 80195d4:	bd38      	pop	{r3, r4, r5, pc}
 80195d6:	0799      	lsls	r1, r3, #30
 80195d8:	bf58      	it	pl
 80195da:	6962      	ldrpl	r2, [r4, #20]
 80195dc:	60a2      	str	r2, [r4, #8]
 80195de:	e7f4      	b.n	80195ca <__swsetup_r+0x8e>
 80195e0:	2000      	movs	r0, #0
 80195e2:	e7f7      	b.n	80195d4 <__swsetup_r+0x98>
 80195e4:	20000a8c 	.word	0x20000a8c

080195e8 <_sbrk_r>:
 80195e8:	b538      	push	{r3, r4, r5, lr}
 80195ea:	4d06      	ldr	r5, [pc, #24]	@ (8019604 <_sbrk_r+0x1c>)
 80195ec:	2300      	movs	r3, #0
 80195ee:	4604      	mov	r4, r0
 80195f0:	4608      	mov	r0, r1
 80195f2:	602b      	str	r3, [r5, #0]
 80195f4:	f7ec ffdc 	bl	80065b0 <_sbrk>
 80195f8:	1c43      	adds	r3, r0, #1
 80195fa:	d102      	bne.n	8019602 <_sbrk_r+0x1a>
 80195fc:	682b      	ldr	r3, [r5, #0]
 80195fe:	b103      	cbz	r3, 8019602 <_sbrk_r+0x1a>
 8019600:	6023      	str	r3, [r4, #0]
 8019602:	bd38      	pop	{r3, r4, r5, pc}
 8019604:	20015450 	.word	0x20015450

08019608 <abort>:
 8019608:	b508      	push	{r3, lr}
 801960a:	2006      	movs	r0, #6
 801960c:	f000 f8d0 	bl	80197b0 <raise>
 8019610:	2001      	movs	r0, #1
 8019612:	f7ec ff55 	bl	80064c0 <_exit>

08019616 <_calloc_r>:
 8019616:	b570      	push	{r4, r5, r6, lr}
 8019618:	fba1 5402 	umull	r5, r4, r1, r2
 801961c:	b934      	cbnz	r4, 801962c <_calloc_r+0x16>
 801961e:	4629      	mov	r1, r5
 8019620:	f7fe fd16 	bl	8018050 <_malloc_r>
 8019624:	4606      	mov	r6, r0
 8019626:	b928      	cbnz	r0, 8019634 <_calloc_r+0x1e>
 8019628:	4630      	mov	r0, r6
 801962a:	bd70      	pop	{r4, r5, r6, pc}
 801962c:	220c      	movs	r2, #12
 801962e:	6002      	str	r2, [r0, #0]
 8019630:	2600      	movs	r6, #0
 8019632:	e7f9      	b.n	8019628 <_calloc_r+0x12>
 8019634:	462a      	mov	r2, r5
 8019636:	4621      	mov	r1, r4
 8019638:	f7fe f871 	bl	801771e <memset>
 801963c:	e7f4      	b.n	8019628 <_calloc_r+0x12>

0801963e <_realloc_r>:
 801963e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019642:	4607      	mov	r7, r0
 8019644:	4614      	mov	r4, r2
 8019646:	460d      	mov	r5, r1
 8019648:	b921      	cbnz	r1, 8019654 <_realloc_r+0x16>
 801964a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801964e:	4611      	mov	r1, r2
 8019650:	f7fe bcfe 	b.w	8018050 <_malloc_r>
 8019654:	b92a      	cbnz	r2, 8019662 <_realloc_r+0x24>
 8019656:	f7fe f94d 	bl	80178f4 <_free_r>
 801965a:	4625      	mov	r5, r4
 801965c:	4628      	mov	r0, r5
 801965e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019662:	f000 f8e3 	bl	801982c <_malloc_usable_size_r>
 8019666:	4284      	cmp	r4, r0
 8019668:	4606      	mov	r6, r0
 801966a:	d802      	bhi.n	8019672 <_realloc_r+0x34>
 801966c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8019670:	d8f4      	bhi.n	801965c <_realloc_r+0x1e>
 8019672:	4621      	mov	r1, r4
 8019674:	4638      	mov	r0, r7
 8019676:	f7fe fceb 	bl	8018050 <_malloc_r>
 801967a:	4680      	mov	r8, r0
 801967c:	b908      	cbnz	r0, 8019682 <_realloc_r+0x44>
 801967e:	4645      	mov	r5, r8
 8019680:	e7ec      	b.n	801965c <_realloc_r+0x1e>
 8019682:	42b4      	cmp	r4, r6
 8019684:	4622      	mov	r2, r4
 8019686:	4629      	mov	r1, r5
 8019688:	bf28      	it	cs
 801968a:	4632      	movcs	r2, r6
 801968c:	f7fe f8fd 	bl	801788a <memcpy>
 8019690:	4629      	mov	r1, r5
 8019692:	4638      	mov	r0, r7
 8019694:	f7fe f92e 	bl	80178f4 <_free_r>
 8019698:	e7f1      	b.n	801967e <_realloc_r+0x40>

0801969a <__swhatbuf_r>:
 801969a:	b570      	push	{r4, r5, r6, lr}
 801969c:	460c      	mov	r4, r1
 801969e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80196a2:	2900      	cmp	r1, #0
 80196a4:	b096      	sub	sp, #88	@ 0x58
 80196a6:	4615      	mov	r5, r2
 80196a8:	461e      	mov	r6, r3
 80196aa:	da0d      	bge.n	80196c8 <__swhatbuf_r+0x2e>
 80196ac:	89a3      	ldrh	r3, [r4, #12]
 80196ae:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80196b2:	f04f 0100 	mov.w	r1, #0
 80196b6:	bf14      	ite	ne
 80196b8:	2340      	movne	r3, #64	@ 0x40
 80196ba:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80196be:	2000      	movs	r0, #0
 80196c0:	6031      	str	r1, [r6, #0]
 80196c2:	602b      	str	r3, [r5, #0]
 80196c4:	b016      	add	sp, #88	@ 0x58
 80196c6:	bd70      	pop	{r4, r5, r6, pc}
 80196c8:	466a      	mov	r2, sp
 80196ca:	f000 f879 	bl	80197c0 <_fstat_r>
 80196ce:	2800      	cmp	r0, #0
 80196d0:	dbec      	blt.n	80196ac <__swhatbuf_r+0x12>
 80196d2:	9901      	ldr	r1, [sp, #4]
 80196d4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80196d8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80196dc:	4259      	negs	r1, r3
 80196de:	4159      	adcs	r1, r3
 80196e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80196e4:	e7eb      	b.n	80196be <__swhatbuf_r+0x24>

080196e6 <__smakebuf_r>:
 80196e6:	898b      	ldrh	r3, [r1, #12]
 80196e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80196ea:	079d      	lsls	r5, r3, #30
 80196ec:	4606      	mov	r6, r0
 80196ee:	460c      	mov	r4, r1
 80196f0:	d507      	bpl.n	8019702 <__smakebuf_r+0x1c>
 80196f2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80196f6:	6023      	str	r3, [r4, #0]
 80196f8:	6123      	str	r3, [r4, #16]
 80196fa:	2301      	movs	r3, #1
 80196fc:	6163      	str	r3, [r4, #20]
 80196fe:	b003      	add	sp, #12
 8019700:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019702:	ab01      	add	r3, sp, #4
 8019704:	466a      	mov	r2, sp
 8019706:	f7ff ffc8 	bl	801969a <__swhatbuf_r>
 801970a:	9f00      	ldr	r7, [sp, #0]
 801970c:	4605      	mov	r5, r0
 801970e:	4639      	mov	r1, r7
 8019710:	4630      	mov	r0, r6
 8019712:	f7fe fc9d 	bl	8018050 <_malloc_r>
 8019716:	b948      	cbnz	r0, 801972c <__smakebuf_r+0x46>
 8019718:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801971c:	059a      	lsls	r2, r3, #22
 801971e:	d4ee      	bmi.n	80196fe <__smakebuf_r+0x18>
 8019720:	f023 0303 	bic.w	r3, r3, #3
 8019724:	f043 0302 	orr.w	r3, r3, #2
 8019728:	81a3      	strh	r3, [r4, #12]
 801972a:	e7e2      	b.n	80196f2 <__smakebuf_r+0xc>
 801972c:	89a3      	ldrh	r3, [r4, #12]
 801972e:	6020      	str	r0, [r4, #0]
 8019730:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019734:	81a3      	strh	r3, [r4, #12]
 8019736:	9b01      	ldr	r3, [sp, #4]
 8019738:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801973c:	b15b      	cbz	r3, 8019756 <__smakebuf_r+0x70>
 801973e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019742:	4630      	mov	r0, r6
 8019744:	f000 f84e 	bl	80197e4 <_isatty_r>
 8019748:	b128      	cbz	r0, 8019756 <__smakebuf_r+0x70>
 801974a:	89a3      	ldrh	r3, [r4, #12]
 801974c:	f023 0303 	bic.w	r3, r3, #3
 8019750:	f043 0301 	orr.w	r3, r3, #1
 8019754:	81a3      	strh	r3, [r4, #12]
 8019756:	89a3      	ldrh	r3, [r4, #12]
 8019758:	431d      	orrs	r5, r3
 801975a:	81a5      	strh	r5, [r4, #12]
 801975c:	e7cf      	b.n	80196fe <__smakebuf_r+0x18>

0801975e <_raise_r>:
 801975e:	291f      	cmp	r1, #31
 8019760:	b538      	push	{r3, r4, r5, lr}
 8019762:	4605      	mov	r5, r0
 8019764:	460c      	mov	r4, r1
 8019766:	d904      	bls.n	8019772 <_raise_r+0x14>
 8019768:	2316      	movs	r3, #22
 801976a:	6003      	str	r3, [r0, #0]
 801976c:	f04f 30ff 	mov.w	r0, #4294967295
 8019770:	bd38      	pop	{r3, r4, r5, pc}
 8019772:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8019774:	b112      	cbz	r2, 801977c <_raise_r+0x1e>
 8019776:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801977a:	b94b      	cbnz	r3, 8019790 <_raise_r+0x32>
 801977c:	4628      	mov	r0, r5
 801977e:	f000 f853 	bl	8019828 <_getpid_r>
 8019782:	4622      	mov	r2, r4
 8019784:	4601      	mov	r1, r0
 8019786:	4628      	mov	r0, r5
 8019788:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801978c:	f000 b83a 	b.w	8019804 <_kill_r>
 8019790:	2b01      	cmp	r3, #1
 8019792:	d00a      	beq.n	80197aa <_raise_r+0x4c>
 8019794:	1c59      	adds	r1, r3, #1
 8019796:	d103      	bne.n	80197a0 <_raise_r+0x42>
 8019798:	2316      	movs	r3, #22
 801979a:	6003      	str	r3, [r0, #0]
 801979c:	2001      	movs	r0, #1
 801979e:	e7e7      	b.n	8019770 <_raise_r+0x12>
 80197a0:	2100      	movs	r1, #0
 80197a2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80197a6:	4620      	mov	r0, r4
 80197a8:	4798      	blx	r3
 80197aa:	2000      	movs	r0, #0
 80197ac:	e7e0      	b.n	8019770 <_raise_r+0x12>
	...

080197b0 <raise>:
 80197b0:	4b02      	ldr	r3, [pc, #8]	@ (80197bc <raise+0xc>)
 80197b2:	4601      	mov	r1, r0
 80197b4:	6818      	ldr	r0, [r3, #0]
 80197b6:	f7ff bfd2 	b.w	801975e <_raise_r>
 80197ba:	bf00      	nop
 80197bc:	20000a8c 	.word	0x20000a8c

080197c0 <_fstat_r>:
 80197c0:	b538      	push	{r3, r4, r5, lr}
 80197c2:	4d07      	ldr	r5, [pc, #28]	@ (80197e0 <_fstat_r+0x20>)
 80197c4:	2300      	movs	r3, #0
 80197c6:	4604      	mov	r4, r0
 80197c8:	4608      	mov	r0, r1
 80197ca:	4611      	mov	r1, r2
 80197cc:	602b      	str	r3, [r5, #0]
 80197ce:	f7ec fec7 	bl	8006560 <_fstat>
 80197d2:	1c43      	adds	r3, r0, #1
 80197d4:	d102      	bne.n	80197dc <_fstat_r+0x1c>
 80197d6:	682b      	ldr	r3, [r5, #0]
 80197d8:	b103      	cbz	r3, 80197dc <_fstat_r+0x1c>
 80197da:	6023      	str	r3, [r4, #0]
 80197dc:	bd38      	pop	{r3, r4, r5, pc}
 80197de:	bf00      	nop
 80197e0:	20015450 	.word	0x20015450

080197e4 <_isatty_r>:
 80197e4:	b538      	push	{r3, r4, r5, lr}
 80197e6:	4d06      	ldr	r5, [pc, #24]	@ (8019800 <_isatty_r+0x1c>)
 80197e8:	2300      	movs	r3, #0
 80197ea:	4604      	mov	r4, r0
 80197ec:	4608      	mov	r0, r1
 80197ee:	602b      	str	r3, [r5, #0]
 80197f0:	f7ec fec6 	bl	8006580 <_isatty>
 80197f4:	1c43      	adds	r3, r0, #1
 80197f6:	d102      	bne.n	80197fe <_isatty_r+0x1a>
 80197f8:	682b      	ldr	r3, [r5, #0]
 80197fa:	b103      	cbz	r3, 80197fe <_isatty_r+0x1a>
 80197fc:	6023      	str	r3, [r4, #0]
 80197fe:	bd38      	pop	{r3, r4, r5, pc}
 8019800:	20015450 	.word	0x20015450

08019804 <_kill_r>:
 8019804:	b538      	push	{r3, r4, r5, lr}
 8019806:	4d07      	ldr	r5, [pc, #28]	@ (8019824 <_kill_r+0x20>)
 8019808:	2300      	movs	r3, #0
 801980a:	4604      	mov	r4, r0
 801980c:	4608      	mov	r0, r1
 801980e:	4611      	mov	r1, r2
 8019810:	602b      	str	r3, [r5, #0]
 8019812:	f7ec fe43 	bl	800649c <_kill>
 8019816:	1c43      	adds	r3, r0, #1
 8019818:	d102      	bne.n	8019820 <_kill_r+0x1c>
 801981a:	682b      	ldr	r3, [r5, #0]
 801981c:	b103      	cbz	r3, 8019820 <_kill_r+0x1c>
 801981e:	6023      	str	r3, [r4, #0]
 8019820:	bd38      	pop	{r3, r4, r5, pc}
 8019822:	bf00      	nop
 8019824:	20015450 	.word	0x20015450

08019828 <_getpid_r>:
 8019828:	f7ec be30 	b.w	800648c <_getpid>

0801982c <_malloc_usable_size_r>:
 801982c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019830:	1f18      	subs	r0, r3, #4
 8019832:	2b00      	cmp	r3, #0
 8019834:	bfbc      	itt	lt
 8019836:	580b      	ldrlt	r3, [r1, r0]
 8019838:	18c0      	addlt	r0, r0, r3
 801983a:	4770      	bx	lr

0801983c <sqrt>:
 801983c:	b538      	push	{r3, r4, r5, lr}
 801983e:	ed2d 8b02 	vpush	{d8}
 8019842:	ec55 4b10 	vmov	r4, r5, d0
 8019846:	f000 fa15 	bl	8019c74 <__ieee754_sqrt>
 801984a:	4622      	mov	r2, r4
 801984c:	462b      	mov	r3, r5
 801984e:	4620      	mov	r0, r4
 8019850:	4629      	mov	r1, r5
 8019852:	eeb0 8a40 	vmov.f32	s16, s0
 8019856:	eef0 8a60 	vmov.f32	s17, s1
 801985a:	f7e7 f977 	bl	8000b4c <__aeabi_dcmpun>
 801985e:	b990      	cbnz	r0, 8019886 <sqrt+0x4a>
 8019860:	2200      	movs	r2, #0
 8019862:	2300      	movs	r3, #0
 8019864:	4620      	mov	r0, r4
 8019866:	4629      	mov	r1, r5
 8019868:	f7e7 f948 	bl	8000afc <__aeabi_dcmplt>
 801986c:	b158      	cbz	r0, 8019886 <sqrt+0x4a>
 801986e:	f7fd ffd7 	bl	8017820 <__errno>
 8019872:	2321      	movs	r3, #33	@ 0x21
 8019874:	6003      	str	r3, [r0, #0]
 8019876:	2200      	movs	r2, #0
 8019878:	2300      	movs	r3, #0
 801987a:	4610      	mov	r0, r2
 801987c:	4619      	mov	r1, r3
 801987e:	f7e6 fff5 	bl	800086c <__aeabi_ddiv>
 8019882:	ec41 0b18 	vmov	d8, r0, r1
 8019886:	eeb0 0a48 	vmov.f32	s0, s16
 801988a:	eef0 0a68 	vmov.f32	s1, s17
 801988e:	ecbd 8b02 	vpop	{d8}
 8019892:	bd38      	pop	{r3, r4, r5, pc}
 8019894:	0000      	movs	r0, r0
	...

08019898 <atan>:
 8019898:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801989c:	ec55 4b10 	vmov	r4, r5, d0
 80198a0:	4bbf      	ldr	r3, [pc, #764]	@ (8019ba0 <atan+0x308>)
 80198a2:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 80198a6:	429e      	cmp	r6, r3
 80198a8:	46ab      	mov	fp, r5
 80198aa:	d918      	bls.n	80198de <atan+0x46>
 80198ac:	4bbd      	ldr	r3, [pc, #756]	@ (8019ba4 <atan+0x30c>)
 80198ae:	429e      	cmp	r6, r3
 80198b0:	d801      	bhi.n	80198b6 <atan+0x1e>
 80198b2:	d109      	bne.n	80198c8 <atan+0x30>
 80198b4:	b144      	cbz	r4, 80198c8 <atan+0x30>
 80198b6:	4622      	mov	r2, r4
 80198b8:	462b      	mov	r3, r5
 80198ba:	4620      	mov	r0, r4
 80198bc:	4629      	mov	r1, r5
 80198be:	f7e6 fcf5 	bl	80002ac <__adddf3>
 80198c2:	4604      	mov	r4, r0
 80198c4:	460d      	mov	r5, r1
 80198c6:	e006      	b.n	80198d6 <atan+0x3e>
 80198c8:	f1bb 0f00 	cmp.w	fp, #0
 80198cc:	f340 812b 	ble.w	8019b26 <atan+0x28e>
 80198d0:	a597      	add	r5, pc, #604	@ (adr r5, 8019b30 <atan+0x298>)
 80198d2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80198d6:	ec45 4b10 	vmov	d0, r4, r5
 80198da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80198de:	4bb2      	ldr	r3, [pc, #712]	@ (8019ba8 <atan+0x310>)
 80198e0:	429e      	cmp	r6, r3
 80198e2:	d813      	bhi.n	801990c <atan+0x74>
 80198e4:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 80198e8:	429e      	cmp	r6, r3
 80198ea:	d80c      	bhi.n	8019906 <atan+0x6e>
 80198ec:	a392      	add	r3, pc, #584	@ (adr r3, 8019b38 <atan+0x2a0>)
 80198ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80198f2:	4620      	mov	r0, r4
 80198f4:	4629      	mov	r1, r5
 80198f6:	f7e6 fcd9 	bl	80002ac <__adddf3>
 80198fa:	4bac      	ldr	r3, [pc, #688]	@ (8019bac <atan+0x314>)
 80198fc:	2200      	movs	r2, #0
 80198fe:	f7e7 f91b 	bl	8000b38 <__aeabi_dcmpgt>
 8019902:	2800      	cmp	r0, #0
 8019904:	d1e7      	bne.n	80198d6 <atan+0x3e>
 8019906:	f04f 3aff 	mov.w	sl, #4294967295
 801990a:	e029      	b.n	8019960 <atan+0xc8>
 801990c:	f000 f95c 	bl	8019bc8 <fabs>
 8019910:	4ba7      	ldr	r3, [pc, #668]	@ (8019bb0 <atan+0x318>)
 8019912:	429e      	cmp	r6, r3
 8019914:	ec55 4b10 	vmov	r4, r5, d0
 8019918:	f200 80bc 	bhi.w	8019a94 <atan+0x1fc>
 801991c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8019920:	429e      	cmp	r6, r3
 8019922:	f200 809e 	bhi.w	8019a62 <atan+0x1ca>
 8019926:	4622      	mov	r2, r4
 8019928:	462b      	mov	r3, r5
 801992a:	4620      	mov	r0, r4
 801992c:	4629      	mov	r1, r5
 801992e:	f7e6 fcbd 	bl	80002ac <__adddf3>
 8019932:	4b9e      	ldr	r3, [pc, #632]	@ (8019bac <atan+0x314>)
 8019934:	2200      	movs	r2, #0
 8019936:	f7e6 fcb7 	bl	80002a8 <__aeabi_dsub>
 801993a:	2200      	movs	r2, #0
 801993c:	4606      	mov	r6, r0
 801993e:	460f      	mov	r7, r1
 8019940:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8019944:	4620      	mov	r0, r4
 8019946:	4629      	mov	r1, r5
 8019948:	f7e6 fcb0 	bl	80002ac <__adddf3>
 801994c:	4602      	mov	r2, r0
 801994e:	460b      	mov	r3, r1
 8019950:	4630      	mov	r0, r6
 8019952:	4639      	mov	r1, r7
 8019954:	f7e6 ff8a 	bl	800086c <__aeabi_ddiv>
 8019958:	f04f 0a00 	mov.w	sl, #0
 801995c:	4604      	mov	r4, r0
 801995e:	460d      	mov	r5, r1
 8019960:	4622      	mov	r2, r4
 8019962:	462b      	mov	r3, r5
 8019964:	4620      	mov	r0, r4
 8019966:	4629      	mov	r1, r5
 8019968:	f7e6 fe56 	bl	8000618 <__aeabi_dmul>
 801996c:	4602      	mov	r2, r0
 801996e:	460b      	mov	r3, r1
 8019970:	4680      	mov	r8, r0
 8019972:	4689      	mov	r9, r1
 8019974:	f7e6 fe50 	bl	8000618 <__aeabi_dmul>
 8019978:	a371      	add	r3, pc, #452	@ (adr r3, 8019b40 <atan+0x2a8>)
 801997a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801997e:	4606      	mov	r6, r0
 8019980:	460f      	mov	r7, r1
 8019982:	f7e6 fe49 	bl	8000618 <__aeabi_dmul>
 8019986:	a370      	add	r3, pc, #448	@ (adr r3, 8019b48 <atan+0x2b0>)
 8019988:	e9d3 2300 	ldrd	r2, r3, [r3]
 801998c:	f7e6 fc8e 	bl	80002ac <__adddf3>
 8019990:	4632      	mov	r2, r6
 8019992:	463b      	mov	r3, r7
 8019994:	f7e6 fe40 	bl	8000618 <__aeabi_dmul>
 8019998:	a36d      	add	r3, pc, #436	@ (adr r3, 8019b50 <atan+0x2b8>)
 801999a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801999e:	f7e6 fc85 	bl	80002ac <__adddf3>
 80199a2:	4632      	mov	r2, r6
 80199a4:	463b      	mov	r3, r7
 80199a6:	f7e6 fe37 	bl	8000618 <__aeabi_dmul>
 80199aa:	a36b      	add	r3, pc, #428	@ (adr r3, 8019b58 <atan+0x2c0>)
 80199ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80199b0:	f7e6 fc7c 	bl	80002ac <__adddf3>
 80199b4:	4632      	mov	r2, r6
 80199b6:	463b      	mov	r3, r7
 80199b8:	f7e6 fe2e 	bl	8000618 <__aeabi_dmul>
 80199bc:	a368      	add	r3, pc, #416	@ (adr r3, 8019b60 <atan+0x2c8>)
 80199be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80199c2:	f7e6 fc73 	bl	80002ac <__adddf3>
 80199c6:	4632      	mov	r2, r6
 80199c8:	463b      	mov	r3, r7
 80199ca:	f7e6 fe25 	bl	8000618 <__aeabi_dmul>
 80199ce:	a366      	add	r3, pc, #408	@ (adr r3, 8019b68 <atan+0x2d0>)
 80199d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80199d4:	f7e6 fc6a 	bl	80002ac <__adddf3>
 80199d8:	4642      	mov	r2, r8
 80199da:	464b      	mov	r3, r9
 80199dc:	f7e6 fe1c 	bl	8000618 <__aeabi_dmul>
 80199e0:	a363      	add	r3, pc, #396	@ (adr r3, 8019b70 <atan+0x2d8>)
 80199e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80199e6:	4680      	mov	r8, r0
 80199e8:	4689      	mov	r9, r1
 80199ea:	4630      	mov	r0, r6
 80199ec:	4639      	mov	r1, r7
 80199ee:	f7e6 fe13 	bl	8000618 <__aeabi_dmul>
 80199f2:	a361      	add	r3, pc, #388	@ (adr r3, 8019b78 <atan+0x2e0>)
 80199f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80199f8:	f7e6 fc56 	bl	80002a8 <__aeabi_dsub>
 80199fc:	4632      	mov	r2, r6
 80199fe:	463b      	mov	r3, r7
 8019a00:	f7e6 fe0a 	bl	8000618 <__aeabi_dmul>
 8019a04:	a35e      	add	r3, pc, #376	@ (adr r3, 8019b80 <atan+0x2e8>)
 8019a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a0a:	f7e6 fc4d 	bl	80002a8 <__aeabi_dsub>
 8019a0e:	4632      	mov	r2, r6
 8019a10:	463b      	mov	r3, r7
 8019a12:	f7e6 fe01 	bl	8000618 <__aeabi_dmul>
 8019a16:	a35c      	add	r3, pc, #368	@ (adr r3, 8019b88 <atan+0x2f0>)
 8019a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a1c:	f7e6 fc44 	bl	80002a8 <__aeabi_dsub>
 8019a20:	4632      	mov	r2, r6
 8019a22:	463b      	mov	r3, r7
 8019a24:	f7e6 fdf8 	bl	8000618 <__aeabi_dmul>
 8019a28:	a359      	add	r3, pc, #356	@ (adr r3, 8019b90 <atan+0x2f8>)
 8019a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a2e:	f7e6 fc3b 	bl	80002a8 <__aeabi_dsub>
 8019a32:	4632      	mov	r2, r6
 8019a34:	463b      	mov	r3, r7
 8019a36:	f7e6 fdef 	bl	8000618 <__aeabi_dmul>
 8019a3a:	4602      	mov	r2, r0
 8019a3c:	460b      	mov	r3, r1
 8019a3e:	4640      	mov	r0, r8
 8019a40:	4649      	mov	r1, r9
 8019a42:	f7e6 fc33 	bl	80002ac <__adddf3>
 8019a46:	4622      	mov	r2, r4
 8019a48:	462b      	mov	r3, r5
 8019a4a:	f7e6 fde5 	bl	8000618 <__aeabi_dmul>
 8019a4e:	f1ba 3fff 	cmp.w	sl, #4294967295
 8019a52:	4602      	mov	r2, r0
 8019a54:	460b      	mov	r3, r1
 8019a56:	d148      	bne.n	8019aea <atan+0x252>
 8019a58:	4620      	mov	r0, r4
 8019a5a:	4629      	mov	r1, r5
 8019a5c:	f7e6 fc24 	bl	80002a8 <__aeabi_dsub>
 8019a60:	e72f      	b.n	80198c2 <atan+0x2a>
 8019a62:	4b52      	ldr	r3, [pc, #328]	@ (8019bac <atan+0x314>)
 8019a64:	2200      	movs	r2, #0
 8019a66:	4620      	mov	r0, r4
 8019a68:	4629      	mov	r1, r5
 8019a6a:	f7e6 fc1d 	bl	80002a8 <__aeabi_dsub>
 8019a6e:	4b4f      	ldr	r3, [pc, #316]	@ (8019bac <atan+0x314>)
 8019a70:	4606      	mov	r6, r0
 8019a72:	460f      	mov	r7, r1
 8019a74:	2200      	movs	r2, #0
 8019a76:	4620      	mov	r0, r4
 8019a78:	4629      	mov	r1, r5
 8019a7a:	f7e6 fc17 	bl	80002ac <__adddf3>
 8019a7e:	4602      	mov	r2, r0
 8019a80:	460b      	mov	r3, r1
 8019a82:	4630      	mov	r0, r6
 8019a84:	4639      	mov	r1, r7
 8019a86:	f7e6 fef1 	bl	800086c <__aeabi_ddiv>
 8019a8a:	f04f 0a01 	mov.w	sl, #1
 8019a8e:	4604      	mov	r4, r0
 8019a90:	460d      	mov	r5, r1
 8019a92:	e765      	b.n	8019960 <atan+0xc8>
 8019a94:	4b47      	ldr	r3, [pc, #284]	@ (8019bb4 <atan+0x31c>)
 8019a96:	429e      	cmp	r6, r3
 8019a98:	d21c      	bcs.n	8019ad4 <atan+0x23c>
 8019a9a:	4b47      	ldr	r3, [pc, #284]	@ (8019bb8 <atan+0x320>)
 8019a9c:	2200      	movs	r2, #0
 8019a9e:	4620      	mov	r0, r4
 8019aa0:	4629      	mov	r1, r5
 8019aa2:	f7e6 fc01 	bl	80002a8 <__aeabi_dsub>
 8019aa6:	4b44      	ldr	r3, [pc, #272]	@ (8019bb8 <atan+0x320>)
 8019aa8:	4606      	mov	r6, r0
 8019aaa:	460f      	mov	r7, r1
 8019aac:	2200      	movs	r2, #0
 8019aae:	4620      	mov	r0, r4
 8019ab0:	4629      	mov	r1, r5
 8019ab2:	f7e6 fdb1 	bl	8000618 <__aeabi_dmul>
 8019ab6:	4b3d      	ldr	r3, [pc, #244]	@ (8019bac <atan+0x314>)
 8019ab8:	2200      	movs	r2, #0
 8019aba:	f7e6 fbf7 	bl	80002ac <__adddf3>
 8019abe:	4602      	mov	r2, r0
 8019ac0:	460b      	mov	r3, r1
 8019ac2:	4630      	mov	r0, r6
 8019ac4:	4639      	mov	r1, r7
 8019ac6:	f7e6 fed1 	bl	800086c <__aeabi_ddiv>
 8019aca:	f04f 0a02 	mov.w	sl, #2
 8019ace:	4604      	mov	r4, r0
 8019ad0:	460d      	mov	r5, r1
 8019ad2:	e745      	b.n	8019960 <atan+0xc8>
 8019ad4:	4622      	mov	r2, r4
 8019ad6:	462b      	mov	r3, r5
 8019ad8:	4938      	ldr	r1, [pc, #224]	@ (8019bbc <atan+0x324>)
 8019ada:	2000      	movs	r0, #0
 8019adc:	f7e6 fec6 	bl	800086c <__aeabi_ddiv>
 8019ae0:	f04f 0a03 	mov.w	sl, #3
 8019ae4:	4604      	mov	r4, r0
 8019ae6:	460d      	mov	r5, r1
 8019ae8:	e73a      	b.n	8019960 <atan+0xc8>
 8019aea:	4b35      	ldr	r3, [pc, #212]	@ (8019bc0 <atan+0x328>)
 8019aec:	4e35      	ldr	r6, [pc, #212]	@ (8019bc4 <atan+0x32c>)
 8019aee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8019af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019af6:	f7e6 fbd7 	bl	80002a8 <__aeabi_dsub>
 8019afa:	4622      	mov	r2, r4
 8019afc:	462b      	mov	r3, r5
 8019afe:	f7e6 fbd3 	bl	80002a8 <__aeabi_dsub>
 8019b02:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8019b06:	4602      	mov	r2, r0
 8019b08:	460b      	mov	r3, r1
 8019b0a:	e9d6 0100 	ldrd	r0, r1, [r6]
 8019b0e:	f7e6 fbcb 	bl	80002a8 <__aeabi_dsub>
 8019b12:	f1bb 0f00 	cmp.w	fp, #0
 8019b16:	4604      	mov	r4, r0
 8019b18:	460d      	mov	r5, r1
 8019b1a:	f6bf aedc 	bge.w	80198d6 <atan+0x3e>
 8019b1e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8019b22:	461d      	mov	r5, r3
 8019b24:	e6d7      	b.n	80198d6 <atan+0x3e>
 8019b26:	a51c      	add	r5, pc, #112	@ (adr r5, 8019b98 <atan+0x300>)
 8019b28:	e9d5 4500 	ldrd	r4, r5, [r5]
 8019b2c:	e6d3      	b.n	80198d6 <atan+0x3e>
 8019b2e:	bf00      	nop
 8019b30:	54442d18 	.word	0x54442d18
 8019b34:	3ff921fb 	.word	0x3ff921fb
 8019b38:	8800759c 	.word	0x8800759c
 8019b3c:	7e37e43c 	.word	0x7e37e43c
 8019b40:	e322da11 	.word	0xe322da11
 8019b44:	3f90ad3a 	.word	0x3f90ad3a
 8019b48:	24760deb 	.word	0x24760deb
 8019b4c:	3fa97b4b 	.word	0x3fa97b4b
 8019b50:	a0d03d51 	.word	0xa0d03d51
 8019b54:	3fb10d66 	.word	0x3fb10d66
 8019b58:	c54c206e 	.word	0xc54c206e
 8019b5c:	3fb745cd 	.word	0x3fb745cd
 8019b60:	920083ff 	.word	0x920083ff
 8019b64:	3fc24924 	.word	0x3fc24924
 8019b68:	5555550d 	.word	0x5555550d
 8019b6c:	3fd55555 	.word	0x3fd55555
 8019b70:	2c6a6c2f 	.word	0x2c6a6c2f
 8019b74:	bfa2b444 	.word	0xbfa2b444
 8019b78:	52defd9a 	.word	0x52defd9a
 8019b7c:	3fadde2d 	.word	0x3fadde2d
 8019b80:	af749a6d 	.word	0xaf749a6d
 8019b84:	3fb3b0f2 	.word	0x3fb3b0f2
 8019b88:	fe231671 	.word	0xfe231671
 8019b8c:	3fbc71c6 	.word	0x3fbc71c6
 8019b90:	9998ebc4 	.word	0x9998ebc4
 8019b94:	3fc99999 	.word	0x3fc99999
 8019b98:	54442d18 	.word	0x54442d18
 8019b9c:	bff921fb 	.word	0xbff921fb
 8019ba0:	440fffff 	.word	0x440fffff
 8019ba4:	7ff00000 	.word	0x7ff00000
 8019ba8:	3fdbffff 	.word	0x3fdbffff
 8019bac:	3ff00000 	.word	0x3ff00000
 8019bb0:	3ff2ffff 	.word	0x3ff2ffff
 8019bb4:	40038000 	.word	0x40038000
 8019bb8:	3ff80000 	.word	0x3ff80000
 8019bbc:	bff00000 	.word	0xbff00000
 8019bc0:	08023208 	.word	0x08023208
 8019bc4:	08023228 	.word	0x08023228

08019bc8 <fabs>:
 8019bc8:	ec51 0b10 	vmov	r0, r1, d0
 8019bcc:	4602      	mov	r2, r0
 8019bce:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8019bd2:	ec43 2b10 	vmov	d0, r2, r3
 8019bd6:	4770      	bx	lr

08019bd8 <fmax>:
 8019bd8:	b508      	push	{r3, lr}
 8019bda:	ed2d 8b04 	vpush	{d8-d9}
 8019bde:	eeb0 8a40 	vmov.f32	s16, s0
 8019be2:	eef0 8a60 	vmov.f32	s17, s1
 8019be6:	eeb0 9a41 	vmov.f32	s18, s2
 8019bea:	eef0 9a61 	vmov.f32	s19, s3
 8019bee:	f000 f81d 	bl	8019c2c <__fpclassifyd>
 8019bf2:	b950      	cbnz	r0, 8019c0a <fmax+0x32>
 8019bf4:	eeb0 8a49 	vmov.f32	s16, s18
 8019bf8:	eef0 8a69 	vmov.f32	s17, s19
 8019bfc:	eeb0 0a48 	vmov.f32	s0, s16
 8019c00:	eef0 0a68 	vmov.f32	s1, s17
 8019c04:	ecbd 8b04 	vpop	{d8-d9}
 8019c08:	bd08      	pop	{r3, pc}
 8019c0a:	eeb0 0a49 	vmov.f32	s0, s18
 8019c0e:	eef0 0a69 	vmov.f32	s1, s19
 8019c12:	f000 f80b 	bl	8019c2c <__fpclassifyd>
 8019c16:	2800      	cmp	r0, #0
 8019c18:	d0f0      	beq.n	8019bfc <fmax+0x24>
 8019c1a:	ec53 2b19 	vmov	r2, r3, d9
 8019c1e:	ec51 0b18 	vmov	r0, r1, d8
 8019c22:	f7e6 ff89 	bl	8000b38 <__aeabi_dcmpgt>
 8019c26:	2800      	cmp	r0, #0
 8019c28:	d0e4      	beq.n	8019bf4 <fmax+0x1c>
 8019c2a:	e7e7      	b.n	8019bfc <fmax+0x24>

08019c2c <__fpclassifyd>:
 8019c2c:	ec51 0b10 	vmov	r0, r1, d0
 8019c30:	460b      	mov	r3, r1
 8019c32:	f031 4100 	bics.w	r1, r1, #2147483648	@ 0x80000000
 8019c36:	b510      	push	{r4, lr}
 8019c38:	d104      	bne.n	8019c44 <__fpclassifyd+0x18>
 8019c3a:	2800      	cmp	r0, #0
 8019c3c:	bf0c      	ite	eq
 8019c3e:	2002      	moveq	r0, #2
 8019c40:	2003      	movne	r0, #3
 8019c42:	bd10      	pop	{r4, pc}
 8019c44:	4a09      	ldr	r2, [pc, #36]	@ (8019c6c <__fpclassifyd+0x40>)
 8019c46:	f5a1 1480 	sub.w	r4, r1, #1048576	@ 0x100000
 8019c4a:	4294      	cmp	r4, r2
 8019c4c:	d908      	bls.n	8019c60 <__fpclassifyd+0x34>
 8019c4e:	4a08      	ldr	r2, [pc, #32]	@ (8019c70 <__fpclassifyd+0x44>)
 8019c50:	4213      	tst	r3, r2
 8019c52:	d007      	beq.n	8019c64 <__fpclassifyd+0x38>
 8019c54:	4291      	cmp	r1, r2
 8019c56:	d107      	bne.n	8019c68 <__fpclassifyd+0x3c>
 8019c58:	fab0 f080 	clz	r0, r0
 8019c5c:	0940      	lsrs	r0, r0, #5
 8019c5e:	e7f0      	b.n	8019c42 <__fpclassifyd+0x16>
 8019c60:	2004      	movs	r0, #4
 8019c62:	e7ee      	b.n	8019c42 <__fpclassifyd+0x16>
 8019c64:	2003      	movs	r0, #3
 8019c66:	e7ec      	b.n	8019c42 <__fpclassifyd+0x16>
 8019c68:	2000      	movs	r0, #0
 8019c6a:	e7ea      	b.n	8019c42 <__fpclassifyd+0x16>
 8019c6c:	7fdfffff 	.word	0x7fdfffff
 8019c70:	7ff00000 	.word	0x7ff00000

08019c74 <__ieee754_sqrt>:
 8019c74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019c78:	4a66      	ldr	r2, [pc, #408]	@ (8019e14 <__ieee754_sqrt+0x1a0>)
 8019c7a:	ec55 4b10 	vmov	r4, r5, d0
 8019c7e:	43aa      	bics	r2, r5
 8019c80:	462b      	mov	r3, r5
 8019c82:	4621      	mov	r1, r4
 8019c84:	d110      	bne.n	8019ca8 <__ieee754_sqrt+0x34>
 8019c86:	4622      	mov	r2, r4
 8019c88:	4620      	mov	r0, r4
 8019c8a:	4629      	mov	r1, r5
 8019c8c:	f7e6 fcc4 	bl	8000618 <__aeabi_dmul>
 8019c90:	4602      	mov	r2, r0
 8019c92:	460b      	mov	r3, r1
 8019c94:	4620      	mov	r0, r4
 8019c96:	4629      	mov	r1, r5
 8019c98:	f7e6 fb08 	bl	80002ac <__adddf3>
 8019c9c:	4604      	mov	r4, r0
 8019c9e:	460d      	mov	r5, r1
 8019ca0:	ec45 4b10 	vmov	d0, r4, r5
 8019ca4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019ca8:	2d00      	cmp	r5, #0
 8019caa:	dc0e      	bgt.n	8019cca <__ieee754_sqrt+0x56>
 8019cac:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8019cb0:	4322      	orrs	r2, r4
 8019cb2:	d0f5      	beq.n	8019ca0 <__ieee754_sqrt+0x2c>
 8019cb4:	b19d      	cbz	r5, 8019cde <__ieee754_sqrt+0x6a>
 8019cb6:	4622      	mov	r2, r4
 8019cb8:	4620      	mov	r0, r4
 8019cba:	4629      	mov	r1, r5
 8019cbc:	f7e6 faf4 	bl	80002a8 <__aeabi_dsub>
 8019cc0:	4602      	mov	r2, r0
 8019cc2:	460b      	mov	r3, r1
 8019cc4:	f7e6 fdd2 	bl	800086c <__aeabi_ddiv>
 8019cc8:	e7e8      	b.n	8019c9c <__ieee754_sqrt+0x28>
 8019cca:	152a      	asrs	r2, r5, #20
 8019ccc:	d115      	bne.n	8019cfa <__ieee754_sqrt+0x86>
 8019cce:	2000      	movs	r0, #0
 8019cd0:	e009      	b.n	8019ce6 <__ieee754_sqrt+0x72>
 8019cd2:	0acb      	lsrs	r3, r1, #11
 8019cd4:	3a15      	subs	r2, #21
 8019cd6:	0549      	lsls	r1, r1, #21
 8019cd8:	2b00      	cmp	r3, #0
 8019cda:	d0fa      	beq.n	8019cd2 <__ieee754_sqrt+0x5e>
 8019cdc:	e7f7      	b.n	8019cce <__ieee754_sqrt+0x5a>
 8019cde:	462a      	mov	r2, r5
 8019ce0:	e7fa      	b.n	8019cd8 <__ieee754_sqrt+0x64>
 8019ce2:	005b      	lsls	r3, r3, #1
 8019ce4:	3001      	adds	r0, #1
 8019ce6:	02dc      	lsls	r4, r3, #11
 8019ce8:	d5fb      	bpl.n	8019ce2 <__ieee754_sqrt+0x6e>
 8019cea:	1e44      	subs	r4, r0, #1
 8019cec:	1b12      	subs	r2, r2, r4
 8019cee:	f1c0 0420 	rsb	r4, r0, #32
 8019cf2:	fa21 f404 	lsr.w	r4, r1, r4
 8019cf6:	4323      	orrs	r3, r4
 8019cf8:	4081      	lsls	r1, r0
 8019cfa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8019cfe:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8019d02:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8019d06:	07d2      	lsls	r2, r2, #31
 8019d08:	bf5c      	itt	pl
 8019d0a:	005b      	lslpl	r3, r3, #1
 8019d0c:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8019d10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8019d14:	bf58      	it	pl
 8019d16:	0049      	lslpl	r1, r1, #1
 8019d18:	2600      	movs	r6, #0
 8019d1a:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8019d1e:	107f      	asrs	r7, r7, #1
 8019d20:	0049      	lsls	r1, r1, #1
 8019d22:	2016      	movs	r0, #22
 8019d24:	4632      	mov	r2, r6
 8019d26:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8019d2a:	1915      	adds	r5, r2, r4
 8019d2c:	429d      	cmp	r5, r3
 8019d2e:	bfde      	ittt	le
 8019d30:	192a      	addle	r2, r5, r4
 8019d32:	1b5b      	suble	r3, r3, r5
 8019d34:	1936      	addle	r6, r6, r4
 8019d36:	0fcd      	lsrs	r5, r1, #31
 8019d38:	3801      	subs	r0, #1
 8019d3a:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8019d3e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8019d42:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8019d46:	d1f0      	bne.n	8019d2a <__ieee754_sqrt+0xb6>
 8019d48:	4605      	mov	r5, r0
 8019d4a:	2420      	movs	r4, #32
 8019d4c:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8019d50:	4293      	cmp	r3, r2
 8019d52:	eb0c 0e00 	add.w	lr, ip, r0
 8019d56:	dc02      	bgt.n	8019d5e <__ieee754_sqrt+0xea>
 8019d58:	d113      	bne.n	8019d82 <__ieee754_sqrt+0x10e>
 8019d5a:	458e      	cmp	lr, r1
 8019d5c:	d811      	bhi.n	8019d82 <__ieee754_sqrt+0x10e>
 8019d5e:	f1be 0f00 	cmp.w	lr, #0
 8019d62:	eb0e 000c 	add.w	r0, lr, ip
 8019d66:	da3f      	bge.n	8019de8 <__ieee754_sqrt+0x174>
 8019d68:	2800      	cmp	r0, #0
 8019d6a:	db3d      	blt.n	8019de8 <__ieee754_sqrt+0x174>
 8019d6c:	f102 0801 	add.w	r8, r2, #1
 8019d70:	1a9b      	subs	r3, r3, r2
 8019d72:	458e      	cmp	lr, r1
 8019d74:	bf88      	it	hi
 8019d76:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8019d7a:	eba1 010e 	sub.w	r1, r1, lr
 8019d7e:	4465      	add	r5, ip
 8019d80:	4642      	mov	r2, r8
 8019d82:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8019d86:	3c01      	subs	r4, #1
 8019d88:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8019d8c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8019d90:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8019d94:	d1dc      	bne.n	8019d50 <__ieee754_sqrt+0xdc>
 8019d96:	4319      	orrs	r1, r3
 8019d98:	d01b      	beq.n	8019dd2 <__ieee754_sqrt+0x15e>
 8019d9a:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 8019e18 <__ieee754_sqrt+0x1a4>
 8019d9e:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 8019e1c <__ieee754_sqrt+0x1a8>
 8019da2:	e9da 0100 	ldrd	r0, r1, [sl]
 8019da6:	e9db 2300 	ldrd	r2, r3, [fp]
 8019daa:	f7e6 fa7d 	bl	80002a8 <__aeabi_dsub>
 8019dae:	e9da 8900 	ldrd	r8, r9, [sl]
 8019db2:	4602      	mov	r2, r0
 8019db4:	460b      	mov	r3, r1
 8019db6:	4640      	mov	r0, r8
 8019db8:	4649      	mov	r1, r9
 8019dba:	f7e6 fea9 	bl	8000b10 <__aeabi_dcmple>
 8019dbe:	b140      	cbz	r0, 8019dd2 <__ieee754_sqrt+0x15e>
 8019dc0:	f1b5 3fff 	cmp.w	r5, #4294967295
 8019dc4:	e9da 0100 	ldrd	r0, r1, [sl]
 8019dc8:	e9db 2300 	ldrd	r2, r3, [fp]
 8019dcc:	d10e      	bne.n	8019dec <__ieee754_sqrt+0x178>
 8019dce:	3601      	adds	r6, #1
 8019dd0:	4625      	mov	r5, r4
 8019dd2:	1073      	asrs	r3, r6, #1
 8019dd4:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 8019dd8:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8019ddc:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 8019de0:	086b      	lsrs	r3, r5, #1
 8019de2:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 8019de6:	e759      	b.n	8019c9c <__ieee754_sqrt+0x28>
 8019de8:	4690      	mov	r8, r2
 8019dea:	e7c1      	b.n	8019d70 <__ieee754_sqrt+0xfc>
 8019dec:	f7e6 fa5e 	bl	80002ac <__adddf3>
 8019df0:	e9da 8900 	ldrd	r8, r9, [sl]
 8019df4:	4602      	mov	r2, r0
 8019df6:	460b      	mov	r3, r1
 8019df8:	4640      	mov	r0, r8
 8019dfa:	4649      	mov	r1, r9
 8019dfc:	f7e6 fe7e 	bl	8000afc <__aeabi_dcmplt>
 8019e00:	b120      	cbz	r0, 8019e0c <__ieee754_sqrt+0x198>
 8019e02:	1cab      	adds	r3, r5, #2
 8019e04:	bf08      	it	eq
 8019e06:	3601      	addeq	r6, #1
 8019e08:	3502      	adds	r5, #2
 8019e0a:	e7e2      	b.n	8019dd2 <__ieee754_sqrt+0x15e>
 8019e0c:	1c6b      	adds	r3, r5, #1
 8019e0e:	f023 0501 	bic.w	r5, r3, #1
 8019e12:	e7de      	b.n	8019dd2 <__ieee754_sqrt+0x15e>
 8019e14:	7ff00000 	.word	0x7ff00000
 8019e18:	08023250 	.word	0x08023250
 8019e1c:	08023248 	.word	0x08023248

08019e20 <round>:
 8019e20:	ec51 0b10 	vmov	r0, r1, d0
 8019e24:	b570      	push	{r4, r5, r6, lr}
 8019e26:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8019e2a:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 8019e2e:	2a13      	cmp	r2, #19
 8019e30:	460b      	mov	r3, r1
 8019e32:	4605      	mov	r5, r0
 8019e34:	dc1b      	bgt.n	8019e6e <round+0x4e>
 8019e36:	2a00      	cmp	r2, #0
 8019e38:	da0b      	bge.n	8019e52 <round+0x32>
 8019e3a:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 8019e3e:	3201      	adds	r2, #1
 8019e40:	bf04      	itt	eq
 8019e42:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 8019e46:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 8019e4a:	2200      	movs	r2, #0
 8019e4c:	4619      	mov	r1, r3
 8019e4e:	4610      	mov	r0, r2
 8019e50:	e015      	b.n	8019e7e <round+0x5e>
 8019e52:	4c15      	ldr	r4, [pc, #84]	@ (8019ea8 <round+0x88>)
 8019e54:	4114      	asrs	r4, r2
 8019e56:	ea04 0601 	and.w	r6, r4, r1
 8019e5a:	4306      	orrs	r6, r0
 8019e5c:	d00f      	beq.n	8019e7e <round+0x5e>
 8019e5e:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8019e62:	fa41 f202 	asr.w	r2, r1, r2
 8019e66:	4413      	add	r3, r2
 8019e68:	ea23 0304 	bic.w	r3, r3, r4
 8019e6c:	e7ed      	b.n	8019e4a <round+0x2a>
 8019e6e:	2a33      	cmp	r2, #51	@ 0x33
 8019e70:	dd08      	ble.n	8019e84 <round+0x64>
 8019e72:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8019e76:	d102      	bne.n	8019e7e <round+0x5e>
 8019e78:	4602      	mov	r2, r0
 8019e7a:	f7e6 fa17 	bl	80002ac <__adddf3>
 8019e7e:	ec41 0b10 	vmov	d0, r0, r1
 8019e82:	bd70      	pop	{r4, r5, r6, pc}
 8019e84:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 8019e88:	f04f 34ff 	mov.w	r4, #4294967295
 8019e8c:	40f4      	lsrs	r4, r6
 8019e8e:	4204      	tst	r4, r0
 8019e90:	d0f5      	beq.n	8019e7e <round+0x5e>
 8019e92:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 8019e96:	2201      	movs	r2, #1
 8019e98:	408a      	lsls	r2, r1
 8019e9a:	1952      	adds	r2, r2, r5
 8019e9c:	bf28      	it	cs
 8019e9e:	3301      	addcs	r3, #1
 8019ea0:	ea22 0204 	bic.w	r2, r2, r4
 8019ea4:	e7d2      	b.n	8019e4c <round+0x2c>
 8019ea6:	bf00      	nop
 8019ea8:	000fffff 	.word	0x000fffff

08019eac <_init>:
 8019eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019eae:	bf00      	nop
 8019eb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019eb2:	bc08      	pop	{r3}
 8019eb4:	469e      	mov	lr, r3
 8019eb6:	4770      	bx	lr

08019eb8 <_fini>:
 8019eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019eba:	bf00      	nop
 8019ebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019ebe:	bc08      	pop	{r3}
 8019ec0:	469e      	mov	lr, r3
 8019ec2:	4770      	bx	lr
