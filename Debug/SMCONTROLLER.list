
SMCONTROLLER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a324  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000093a8  0801a4b8  0801a4b8  0001b4b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08023860  08023860  00025ae4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08023860  08023860  00024860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08023868  08023868  00025ae4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08023868  08023868  00024868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0802386c  0802386c  0002486c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000ae4  20000000  08023870  00025000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00025ae4  2**0
                  CONTENTS
 10 .bss          00014a0c  20000ae8  20000ae8  00025ae8  2**3
                  ALLOC
 11 ._user_heap_stack 00006004  200154f4  200154f4  00025ae8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00025ae4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00032226  00000000  00000000  00025b14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007c63  00000000  00000000  00057d3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002a40  00000000  00000000  0005f9a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00002195  00000000  00000000  000623e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00034409  00000000  00000000  00064575  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003e984  00000000  00000000  0009897e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fe06f  00000000  00000000  000d7302  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001d5371  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000c864  00000000  00000000  001d53b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  001e1c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000ae8 	.word	0x20000ae8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801a49c 	.word	0x0801a49c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000aec 	.word	0x20000aec
 80001cc:	0801a49c 	.word	0x0801a49c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_frsub>:
 8000ca8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000cac:	e002      	b.n	8000cb4 <__addsf3>
 8000cae:	bf00      	nop

08000cb0 <__aeabi_fsub>:
 8000cb0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000cb4 <__addsf3>:
 8000cb4:	0042      	lsls	r2, r0, #1
 8000cb6:	bf1f      	itttt	ne
 8000cb8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000cbc:	ea92 0f03 	teqne	r2, r3
 8000cc0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cc4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cc8:	d06a      	beq.n	8000da0 <__addsf3+0xec>
 8000cca:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cce:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cd2:	bfc1      	itttt	gt
 8000cd4:	18d2      	addgt	r2, r2, r3
 8000cd6:	4041      	eorgt	r1, r0
 8000cd8:	4048      	eorgt	r0, r1
 8000cda:	4041      	eorgt	r1, r0
 8000cdc:	bfb8      	it	lt
 8000cde:	425b      	neglt	r3, r3
 8000ce0:	2b19      	cmp	r3, #25
 8000ce2:	bf88      	it	hi
 8000ce4:	4770      	bxhi	lr
 8000ce6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000cea:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cee:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000cf2:	bf18      	it	ne
 8000cf4:	4240      	negne	r0, r0
 8000cf6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000cfa:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000cfe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000d02:	bf18      	it	ne
 8000d04:	4249      	negne	r1, r1
 8000d06:	ea92 0f03 	teq	r2, r3
 8000d0a:	d03f      	beq.n	8000d8c <__addsf3+0xd8>
 8000d0c:	f1a2 0201 	sub.w	r2, r2, #1
 8000d10:	fa41 fc03 	asr.w	ip, r1, r3
 8000d14:	eb10 000c 	adds.w	r0, r0, ip
 8000d18:	f1c3 0320 	rsb	r3, r3, #32
 8000d1c:	fa01 f103 	lsl.w	r1, r1, r3
 8000d20:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d24:	d502      	bpl.n	8000d2c <__addsf3+0x78>
 8000d26:	4249      	negs	r1, r1
 8000d28:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d2c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000d30:	d313      	bcc.n	8000d5a <__addsf3+0xa6>
 8000d32:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000d36:	d306      	bcc.n	8000d46 <__addsf3+0x92>
 8000d38:	0840      	lsrs	r0, r0, #1
 8000d3a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d3e:	f102 0201 	add.w	r2, r2, #1
 8000d42:	2afe      	cmp	r2, #254	@ 0xfe
 8000d44:	d251      	bcs.n	8000dea <__addsf3+0x136>
 8000d46:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000d4a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d4e:	bf08      	it	eq
 8000d50:	f020 0001 	biceq.w	r0, r0, #1
 8000d54:	ea40 0003 	orr.w	r0, r0, r3
 8000d58:	4770      	bx	lr
 8000d5a:	0049      	lsls	r1, r1, #1
 8000d5c:	eb40 0000 	adc.w	r0, r0, r0
 8000d60:	3a01      	subs	r2, #1
 8000d62:	bf28      	it	cs
 8000d64:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000d68:	d2ed      	bcs.n	8000d46 <__addsf3+0x92>
 8000d6a:	fab0 fc80 	clz	ip, r0
 8000d6e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d72:	ebb2 020c 	subs.w	r2, r2, ip
 8000d76:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d7a:	bfaa      	itet	ge
 8000d7c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d80:	4252      	neglt	r2, r2
 8000d82:	4318      	orrge	r0, r3
 8000d84:	bfbc      	itt	lt
 8000d86:	40d0      	lsrlt	r0, r2
 8000d88:	4318      	orrlt	r0, r3
 8000d8a:	4770      	bx	lr
 8000d8c:	f092 0f00 	teq	r2, #0
 8000d90:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000d94:	bf06      	itte	eq
 8000d96:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000d9a:	3201      	addeq	r2, #1
 8000d9c:	3b01      	subne	r3, #1
 8000d9e:	e7b5      	b.n	8000d0c <__addsf3+0x58>
 8000da0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000da4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000da8:	bf18      	it	ne
 8000daa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dae:	d021      	beq.n	8000df4 <__addsf3+0x140>
 8000db0:	ea92 0f03 	teq	r2, r3
 8000db4:	d004      	beq.n	8000dc0 <__addsf3+0x10c>
 8000db6:	f092 0f00 	teq	r2, #0
 8000dba:	bf08      	it	eq
 8000dbc:	4608      	moveq	r0, r1
 8000dbe:	4770      	bx	lr
 8000dc0:	ea90 0f01 	teq	r0, r1
 8000dc4:	bf1c      	itt	ne
 8000dc6:	2000      	movne	r0, #0
 8000dc8:	4770      	bxne	lr
 8000dca:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000dce:	d104      	bne.n	8000dda <__addsf3+0x126>
 8000dd0:	0040      	lsls	r0, r0, #1
 8000dd2:	bf28      	it	cs
 8000dd4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000dd8:	4770      	bx	lr
 8000dda:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000dde:	bf3c      	itt	cc
 8000de0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000de4:	4770      	bxcc	lr
 8000de6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000dea:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000dee:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000df2:	4770      	bx	lr
 8000df4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000df8:	bf16      	itet	ne
 8000dfa:	4608      	movne	r0, r1
 8000dfc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e00:	4601      	movne	r1, r0
 8000e02:	0242      	lsls	r2, r0, #9
 8000e04:	bf06      	itte	eq
 8000e06:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e0a:	ea90 0f01 	teqeq	r0, r1
 8000e0e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000e12:	4770      	bx	lr

08000e14 <__aeabi_ui2f>:
 8000e14:	f04f 0300 	mov.w	r3, #0
 8000e18:	e004      	b.n	8000e24 <__aeabi_i2f+0x8>
 8000e1a:	bf00      	nop

08000e1c <__aeabi_i2f>:
 8000e1c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000e20:	bf48      	it	mi
 8000e22:	4240      	negmi	r0, r0
 8000e24:	ea5f 0c00 	movs.w	ip, r0
 8000e28:	bf08      	it	eq
 8000e2a:	4770      	bxeq	lr
 8000e2c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000e30:	4601      	mov	r1, r0
 8000e32:	f04f 0000 	mov.w	r0, #0
 8000e36:	e01c      	b.n	8000e72 <__aeabi_l2f+0x2a>

08000e38 <__aeabi_ul2f>:
 8000e38:	ea50 0201 	orrs.w	r2, r0, r1
 8000e3c:	bf08      	it	eq
 8000e3e:	4770      	bxeq	lr
 8000e40:	f04f 0300 	mov.w	r3, #0
 8000e44:	e00a      	b.n	8000e5c <__aeabi_l2f+0x14>
 8000e46:	bf00      	nop

08000e48 <__aeabi_l2f>:
 8000e48:	ea50 0201 	orrs.w	r2, r0, r1
 8000e4c:	bf08      	it	eq
 8000e4e:	4770      	bxeq	lr
 8000e50:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000e54:	d502      	bpl.n	8000e5c <__aeabi_l2f+0x14>
 8000e56:	4240      	negs	r0, r0
 8000e58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e5c:	ea5f 0c01 	movs.w	ip, r1
 8000e60:	bf02      	ittt	eq
 8000e62:	4684      	moveq	ip, r0
 8000e64:	4601      	moveq	r1, r0
 8000e66:	2000      	moveq	r0, #0
 8000e68:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000e6c:	bf08      	it	eq
 8000e6e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e72:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e76:	fabc f28c 	clz	r2, ip
 8000e7a:	3a08      	subs	r2, #8
 8000e7c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e80:	db10      	blt.n	8000ea4 <__aeabi_l2f+0x5c>
 8000e82:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e86:	4463      	add	r3, ip
 8000e88:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e8c:	f1c2 0220 	rsb	r2, r2, #32
 8000e90:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000e94:	fa20 f202 	lsr.w	r2, r0, r2
 8000e98:	eb43 0002 	adc.w	r0, r3, r2
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f102 0220 	add.w	r2, r2, #32
 8000ea8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000eac:	f1c2 0220 	rsb	r2, r2, #32
 8000eb0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000eb4:	fa21 f202 	lsr.w	r2, r1, r2
 8000eb8:	eb43 0002 	adc.w	r0, r3, r2
 8000ebc:	bf08      	it	eq
 8000ebe:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ec2:	4770      	bx	lr

08000ec4 <__aeabi_uldivmod>:
 8000ec4:	b953      	cbnz	r3, 8000edc <__aeabi_uldivmod+0x18>
 8000ec6:	b94a      	cbnz	r2, 8000edc <__aeabi_uldivmod+0x18>
 8000ec8:	2900      	cmp	r1, #0
 8000eca:	bf08      	it	eq
 8000ecc:	2800      	cmpeq	r0, #0
 8000ece:	bf1c      	itt	ne
 8000ed0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ed4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ed8:	f000 b9be 	b.w	8001258 <__aeabi_idiv0>
 8000edc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ee0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ee4:	f000 f83c 	bl	8000f60 <__udivmoddi4>
 8000ee8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000eec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ef0:	b004      	add	sp, #16
 8000ef2:	4770      	bx	lr

08000ef4 <__aeabi_d2lz>:
 8000ef4:	b538      	push	{r3, r4, r5, lr}
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	2300      	movs	r3, #0
 8000efa:	4604      	mov	r4, r0
 8000efc:	460d      	mov	r5, r1
 8000efe:	f7ff fdfd 	bl	8000afc <__aeabi_dcmplt>
 8000f02:	b928      	cbnz	r0, 8000f10 <__aeabi_d2lz+0x1c>
 8000f04:	4620      	mov	r0, r4
 8000f06:	4629      	mov	r1, r5
 8000f08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000f0c:	f000 b80a 	b.w	8000f24 <__aeabi_d2ulz>
 8000f10:	4620      	mov	r0, r4
 8000f12:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000f16:	f000 f805 	bl	8000f24 <__aeabi_d2ulz>
 8000f1a:	4240      	negs	r0, r0
 8000f1c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f20:	bd38      	pop	{r3, r4, r5, pc}
 8000f22:	bf00      	nop

08000f24 <__aeabi_d2ulz>:
 8000f24:	b5d0      	push	{r4, r6, r7, lr}
 8000f26:	4b0c      	ldr	r3, [pc, #48]	@ (8000f58 <__aeabi_d2ulz+0x34>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	4606      	mov	r6, r0
 8000f2c:	460f      	mov	r7, r1
 8000f2e:	f7ff fb73 	bl	8000618 <__aeabi_dmul>
 8000f32:	f7ff fe49 	bl	8000bc8 <__aeabi_d2uiz>
 8000f36:	4604      	mov	r4, r0
 8000f38:	f7ff faf4 	bl	8000524 <__aeabi_ui2d>
 8000f3c:	4b07      	ldr	r3, [pc, #28]	@ (8000f5c <__aeabi_d2ulz+0x38>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	f7ff fb6a 	bl	8000618 <__aeabi_dmul>
 8000f44:	4602      	mov	r2, r0
 8000f46:	460b      	mov	r3, r1
 8000f48:	4630      	mov	r0, r6
 8000f4a:	4639      	mov	r1, r7
 8000f4c:	f7ff f9ac 	bl	80002a8 <__aeabi_dsub>
 8000f50:	f7ff fe3a 	bl	8000bc8 <__aeabi_d2uiz>
 8000f54:	4621      	mov	r1, r4
 8000f56:	bdd0      	pop	{r4, r6, r7, pc}
 8000f58:	3df00000 	.word	0x3df00000
 8000f5c:	41f00000 	.word	0x41f00000

08000f60 <__udivmoddi4>:
 8000f60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f64:	9d08      	ldr	r5, [sp, #32]
 8000f66:	468e      	mov	lr, r1
 8000f68:	4604      	mov	r4, r0
 8000f6a:	4688      	mov	r8, r1
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d14a      	bne.n	8001006 <__udivmoddi4+0xa6>
 8000f70:	428a      	cmp	r2, r1
 8000f72:	4617      	mov	r7, r2
 8000f74:	d962      	bls.n	800103c <__udivmoddi4+0xdc>
 8000f76:	fab2 f682 	clz	r6, r2
 8000f7a:	b14e      	cbz	r6, 8000f90 <__udivmoddi4+0x30>
 8000f7c:	f1c6 0320 	rsb	r3, r6, #32
 8000f80:	fa01 f806 	lsl.w	r8, r1, r6
 8000f84:	fa20 f303 	lsr.w	r3, r0, r3
 8000f88:	40b7      	lsls	r7, r6
 8000f8a:	ea43 0808 	orr.w	r8, r3, r8
 8000f8e:	40b4      	lsls	r4, r6
 8000f90:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f94:	fa1f fc87 	uxth.w	ip, r7
 8000f98:	fbb8 f1fe 	udiv	r1, r8, lr
 8000f9c:	0c23      	lsrs	r3, r4, #16
 8000f9e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000fa2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000fa6:	fb01 f20c 	mul.w	r2, r1, ip
 8000faa:	429a      	cmp	r2, r3
 8000fac:	d909      	bls.n	8000fc2 <__udivmoddi4+0x62>
 8000fae:	18fb      	adds	r3, r7, r3
 8000fb0:	f101 30ff 	add.w	r0, r1, #4294967295
 8000fb4:	f080 80ea 	bcs.w	800118c <__udivmoddi4+0x22c>
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	f240 80e7 	bls.w	800118c <__udivmoddi4+0x22c>
 8000fbe:	3902      	subs	r1, #2
 8000fc0:	443b      	add	r3, r7
 8000fc2:	1a9a      	subs	r2, r3, r2
 8000fc4:	b2a3      	uxth	r3, r4
 8000fc6:	fbb2 f0fe 	udiv	r0, r2, lr
 8000fca:	fb0e 2210 	mls	r2, lr, r0, r2
 8000fce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000fd2:	fb00 fc0c 	mul.w	ip, r0, ip
 8000fd6:	459c      	cmp	ip, r3
 8000fd8:	d909      	bls.n	8000fee <__udivmoddi4+0x8e>
 8000fda:	18fb      	adds	r3, r7, r3
 8000fdc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000fe0:	f080 80d6 	bcs.w	8001190 <__udivmoddi4+0x230>
 8000fe4:	459c      	cmp	ip, r3
 8000fe6:	f240 80d3 	bls.w	8001190 <__udivmoddi4+0x230>
 8000fea:	443b      	add	r3, r7
 8000fec:	3802      	subs	r0, #2
 8000fee:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ff2:	eba3 030c 	sub.w	r3, r3, ip
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	b11d      	cbz	r5, 8001002 <__udivmoddi4+0xa2>
 8000ffa:	40f3      	lsrs	r3, r6
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	e9c5 3200 	strd	r3, r2, [r5]
 8001002:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001006:	428b      	cmp	r3, r1
 8001008:	d905      	bls.n	8001016 <__udivmoddi4+0xb6>
 800100a:	b10d      	cbz	r5, 8001010 <__udivmoddi4+0xb0>
 800100c:	e9c5 0100 	strd	r0, r1, [r5]
 8001010:	2100      	movs	r1, #0
 8001012:	4608      	mov	r0, r1
 8001014:	e7f5      	b.n	8001002 <__udivmoddi4+0xa2>
 8001016:	fab3 f183 	clz	r1, r3
 800101a:	2900      	cmp	r1, #0
 800101c:	d146      	bne.n	80010ac <__udivmoddi4+0x14c>
 800101e:	4573      	cmp	r3, lr
 8001020:	d302      	bcc.n	8001028 <__udivmoddi4+0xc8>
 8001022:	4282      	cmp	r2, r0
 8001024:	f200 8105 	bhi.w	8001232 <__udivmoddi4+0x2d2>
 8001028:	1a84      	subs	r4, r0, r2
 800102a:	eb6e 0203 	sbc.w	r2, lr, r3
 800102e:	2001      	movs	r0, #1
 8001030:	4690      	mov	r8, r2
 8001032:	2d00      	cmp	r5, #0
 8001034:	d0e5      	beq.n	8001002 <__udivmoddi4+0xa2>
 8001036:	e9c5 4800 	strd	r4, r8, [r5]
 800103a:	e7e2      	b.n	8001002 <__udivmoddi4+0xa2>
 800103c:	2a00      	cmp	r2, #0
 800103e:	f000 8090 	beq.w	8001162 <__udivmoddi4+0x202>
 8001042:	fab2 f682 	clz	r6, r2
 8001046:	2e00      	cmp	r6, #0
 8001048:	f040 80a4 	bne.w	8001194 <__udivmoddi4+0x234>
 800104c:	1a8a      	subs	r2, r1, r2
 800104e:	0c03      	lsrs	r3, r0, #16
 8001050:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001054:	b280      	uxth	r0, r0
 8001056:	b2bc      	uxth	r4, r7
 8001058:	2101      	movs	r1, #1
 800105a:	fbb2 fcfe 	udiv	ip, r2, lr
 800105e:	fb0e 221c 	mls	r2, lr, ip, r2
 8001062:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001066:	fb04 f20c 	mul.w	r2, r4, ip
 800106a:	429a      	cmp	r2, r3
 800106c:	d907      	bls.n	800107e <__udivmoddi4+0x11e>
 800106e:	18fb      	adds	r3, r7, r3
 8001070:	f10c 38ff 	add.w	r8, ip, #4294967295
 8001074:	d202      	bcs.n	800107c <__udivmoddi4+0x11c>
 8001076:	429a      	cmp	r2, r3
 8001078:	f200 80e0 	bhi.w	800123c <__udivmoddi4+0x2dc>
 800107c:	46c4      	mov	ip, r8
 800107e:	1a9b      	subs	r3, r3, r2
 8001080:	fbb3 f2fe 	udiv	r2, r3, lr
 8001084:	fb0e 3312 	mls	r3, lr, r2, r3
 8001088:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800108c:	fb02 f404 	mul.w	r4, r2, r4
 8001090:	429c      	cmp	r4, r3
 8001092:	d907      	bls.n	80010a4 <__udivmoddi4+0x144>
 8001094:	18fb      	adds	r3, r7, r3
 8001096:	f102 30ff 	add.w	r0, r2, #4294967295
 800109a:	d202      	bcs.n	80010a2 <__udivmoddi4+0x142>
 800109c:	429c      	cmp	r4, r3
 800109e:	f200 80ca 	bhi.w	8001236 <__udivmoddi4+0x2d6>
 80010a2:	4602      	mov	r2, r0
 80010a4:	1b1b      	subs	r3, r3, r4
 80010a6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80010aa:	e7a5      	b.n	8000ff8 <__udivmoddi4+0x98>
 80010ac:	f1c1 0620 	rsb	r6, r1, #32
 80010b0:	408b      	lsls	r3, r1
 80010b2:	fa22 f706 	lsr.w	r7, r2, r6
 80010b6:	431f      	orrs	r7, r3
 80010b8:	fa0e f401 	lsl.w	r4, lr, r1
 80010bc:	fa20 f306 	lsr.w	r3, r0, r6
 80010c0:	fa2e fe06 	lsr.w	lr, lr, r6
 80010c4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80010c8:	4323      	orrs	r3, r4
 80010ca:	fa00 f801 	lsl.w	r8, r0, r1
 80010ce:	fa1f fc87 	uxth.w	ip, r7
 80010d2:	fbbe f0f9 	udiv	r0, lr, r9
 80010d6:	0c1c      	lsrs	r4, r3, #16
 80010d8:	fb09 ee10 	mls	lr, r9, r0, lr
 80010dc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80010e0:	fb00 fe0c 	mul.w	lr, r0, ip
 80010e4:	45a6      	cmp	lr, r4
 80010e6:	fa02 f201 	lsl.w	r2, r2, r1
 80010ea:	d909      	bls.n	8001100 <__udivmoddi4+0x1a0>
 80010ec:	193c      	adds	r4, r7, r4
 80010ee:	f100 3aff 	add.w	sl, r0, #4294967295
 80010f2:	f080 809c 	bcs.w	800122e <__udivmoddi4+0x2ce>
 80010f6:	45a6      	cmp	lr, r4
 80010f8:	f240 8099 	bls.w	800122e <__udivmoddi4+0x2ce>
 80010fc:	3802      	subs	r0, #2
 80010fe:	443c      	add	r4, r7
 8001100:	eba4 040e 	sub.w	r4, r4, lr
 8001104:	fa1f fe83 	uxth.w	lr, r3
 8001108:	fbb4 f3f9 	udiv	r3, r4, r9
 800110c:	fb09 4413 	mls	r4, r9, r3, r4
 8001110:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8001114:	fb03 fc0c 	mul.w	ip, r3, ip
 8001118:	45a4      	cmp	ip, r4
 800111a:	d908      	bls.n	800112e <__udivmoddi4+0x1ce>
 800111c:	193c      	adds	r4, r7, r4
 800111e:	f103 3eff 	add.w	lr, r3, #4294967295
 8001122:	f080 8082 	bcs.w	800122a <__udivmoddi4+0x2ca>
 8001126:	45a4      	cmp	ip, r4
 8001128:	d97f      	bls.n	800122a <__udivmoddi4+0x2ca>
 800112a:	3b02      	subs	r3, #2
 800112c:	443c      	add	r4, r7
 800112e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8001132:	eba4 040c 	sub.w	r4, r4, ip
 8001136:	fba0 ec02 	umull	lr, ip, r0, r2
 800113a:	4564      	cmp	r4, ip
 800113c:	4673      	mov	r3, lr
 800113e:	46e1      	mov	r9, ip
 8001140:	d362      	bcc.n	8001208 <__udivmoddi4+0x2a8>
 8001142:	d05f      	beq.n	8001204 <__udivmoddi4+0x2a4>
 8001144:	b15d      	cbz	r5, 800115e <__udivmoddi4+0x1fe>
 8001146:	ebb8 0203 	subs.w	r2, r8, r3
 800114a:	eb64 0409 	sbc.w	r4, r4, r9
 800114e:	fa04 f606 	lsl.w	r6, r4, r6
 8001152:	fa22 f301 	lsr.w	r3, r2, r1
 8001156:	431e      	orrs	r6, r3
 8001158:	40cc      	lsrs	r4, r1
 800115a:	e9c5 6400 	strd	r6, r4, [r5]
 800115e:	2100      	movs	r1, #0
 8001160:	e74f      	b.n	8001002 <__udivmoddi4+0xa2>
 8001162:	fbb1 fcf2 	udiv	ip, r1, r2
 8001166:	0c01      	lsrs	r1, r0, #16
 8001168:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800116c:	b280      	uxth	r0, r0
 800116e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8001172:	463b      	mov	r3, r7
 8001174:	4638      	mov	r0, r7
 8001176:	463c      	mov	r4, r7
 8001178:	46b8      	mov	r8, r7
 800117a:	46be      	mov	lr, r7
 800117c:	2620      	movs	r6, #32
 800117e:	fbb1 f1f7 	udiv	r1, r1, r7
 8001182:	eba2 0208 	sub.w	r2, r2, r8
 8001186:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800118a:	e766      	b.n	800105a <__udivmoddi4+0xfa>
 800118c:	4601      	mov	r1, r0
 800118e:	e718      	b.n	8000fc2 <__udivmoddi4+0x62>
 8001190:	4610      	mov	r0, r2
 8001192:	e72c      	b.n	8000fee <__udivmoddi4+0x8e>
 8001194:	f1c6 0220 	rsb	r2, r6, #32
 8001198:	fa2e f302 	lsr.w	r3, lr, r2
 800119c:	40b7      	lsls	r7, r6
 800119e:	40b1      	lsls	r1, r6
 80011a0:	fa20 f202 	lsr.w	r2, r0, r2
 80011a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80011a8:	430a      	orrs	r2, r1
 80011aa:	fbb3 f8fe 	udiv	r8, r3, lr
 80011ae:	b2bc      	uxth	r4, r7
 80011b0:	fb0e 3318 	mls	r3, lr, r8, r3
 80011b4:	0c11      	lsrs	r1, r2, #16
 80011b6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80011ba:	fb08 f904 	mul.w	r9, r8, r4
 80011be:	40b0      	lsls	r0, r6
 80011c0:	4589      	cmp	r9, r1
 80011c2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80011c6:	b280      	uxth	r0, r0
 80011c8:	d93e      	bls.n	8001248 <__udivmoddi4+0x2e8>
 80011ca:	1879      	adds	r1, r7, r1
 80011cc:	f108 3cff 	add.w	ip, r8, #4294967295
 80011d0:	d201      	bcs.n	80011d6 <__udivmoddi4+0x276>
 80011d2:	4589      	cmp	r9, r1
 80011d4:	d81f      	bhi.n	8001216 <__udivmoddi4+0x2b6>
 80011d6:	eba1 0109 	sub.w	r1, r1, r9
 80011da:	fbb1 f9fe 	udiv	r9, r1, lr
 80011de:	fb09 f804 	mul.w	r8, r9, r4
 80011e2:	fb0e 1119 	mls	r1, lr, r9, r1
 80011e6:	b292      	uxth	r2, r2
 80011e8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80011ec:	4542      	cmp	r2, r8
 80011ee:	d229      	bcs.n	8001244 <__udivmoddi4+0x2e4>
 80011f0:	18ba      	adds	r2, r7, r2
 80011f2:	f109 31ff 	add.w	r1, r9, #4294967295
 80011f6:	d2c4      	bcs.n	8001182 <__udivmoddi4+0x222>
 80011f8:	4542      	cmp	r2, r8
 80011fa:	d2c2      	bcs.n	8001182 <__udivmoddi4+0x222>
 80011fc:	f1a9 0102 	sub.w	r1, r9, #2
 8001200:	443a      	add	r2, r7
 8001202:	e7be      	b.n	8001182 <__udivmoddi4+0x222>
 8001204:	45f0      	cmp	r8, lr
 8001206:	d29d      	bcs.n	8001144 <__udivmoddi4+0x1e4>
 8001208:	ebbe 0302 	subs.w	r3, lr, r2
 800120c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001210:	3801      	subs	r0, #1
 8001212:	46e1      	mov	r9, ip
 8001214:	e796      	b.n	8001144 <__udivmoddi4+0x1e4>
 8001216:	eba7 0909 	sub.w	r9, r7, r9
 800121a:	4449      	add	r1, r9
 800121c:	f1a8 0c02 	sub.w	ip, r8, #2
 8001220:	fbb1 f9fe 	udiv	r9, r1, lr
 8001224:	fb09 f804 	mul.w	r8, r9, r4
 8001228:	e7db      	b.n	80011e2 <__udivmoddi4+0x282>
 800122a:	4673      	mov	r3, lr
 800122c:	e77f      	b.n	800112e <__udivmoddi4+0x1ce>
 800122e:	4650      	mov	r0, sl
 8001230:	e766      	b.n	8001100 <__udivmoddi4+0x1a0>
 8001232:	4608      	mov	r0, r1
 8001234:	e6fd      	b.n	8001032 <__udivmoddi4+0xd2>
 8001236:	443b      	add	r3, r7
 8001238:	3a02      	subs	r2, #2
 800123a:	e733      	b.n	80010a4 <__udivmoddi4+0x144>
 800123c:	f1ac 0c02 	sub.w	ip, ip, #2
 8001240:	443b      	add	r3, r7
 8001242:	e71c      	b.n	800107e <__udivmoddi4+0x11e>
 8001244:	4649      	mov	r1, r9
 8001246:	e79c      	b.n	8001182 <__udivmoddi4+0x222>
 8001248:	eba1 0109 	sub.w	r1, r1, r9
 800124c:	46c4      	mov	ip, r8
 800124e:	fbb1 f9fe 	udiv	r9, r1, lr
 8001252:	fb09 f804 	mul.w	r8, r9, r4
 8001256:	e7c4      	b.n	80011e2 <__udivmoddi4+0x282>

08001258 <__aeabi_idiv0>:
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop

0800125c <driverFunctionsInit>:
/** Функция определения указателей на функции времени контроллера.
 *  Используется таймер микроконтроллера и его регистр счетчика - TIMx->CNT
 *  function(1...n) ОБЯЗАТЕЛЬНО должны быть определены в файле main.c
 */
void driverFunctionsInit(timeFunction_void_ptr function1, timeFunction_void_ptr function2, timeFunction_uint32_t_ptr function3, timeFunction_void_ptr function4)
{
 800125c:	b480      	push	{r7}
 800125e:	b085      	sub	sp, #20
 8001260:	af00      	add	r7, sp, #0
 8001262:	60f8      	str	r0, [r7, #12]
 8001264:	60b9      	str	r1, [r7, #8]
 8001266:	607a      	str	r2, [r7, #4]
 8001268:	603b      	str	r3, [r7, #0]
	startTimer = function1;
 800126a:	4a09      	ldr	r2, [pc, #36]	@ (8001290 <driverFunctionsInit+0x34>)
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	6013      	str	r3, [r2, #0]
	stopTimer = function2;
 8001270:	4a08      	ldr	r2, [pc, #32]	@ (8001294 <driverFunctionsInit+0x38>)
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	6013      	str	r3, [r2, #0]
	getDriverMicros = function3;
 8001276:	4a08      	ldr	r2, [pc, #32]	@ (8001298 <driverFunctionsInit+0x3c>)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6013      	str	r3, [r2, #0]
	resetDriverTimer = function4;
 800127c:	4a07      	ldr	r2, [pc, #28]	@ (800129c <driverFunctionsInit+0x40>)
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	6013      	str	r3, [r2, #0]
}
 8001282:	bf00      	nop
 8001284:	3714      	adds	r7, #20
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	20000b04 	.word	0x20000b04
 8001294:	20000b08 	.word	0x20000b08
 8001298:	20000b0c 	.word	0x20000b0c
 800129c:	20000b10 	.word	0x20000b10

080012a0 <driverInit>:

/** Функция инициализации драйвера шагового мотора
 */
void driverInit(DRIVER_StructDef* driver, STEPPER_StructDef* stepper, DRIVER_LIMIT_SWITCH_PINS_StructDef* pins, uint16_t stepsPerRev, movement_type_t type, char axisName)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	60f8      	str	r0, [r7, #12]
 80012a8:	60b9      	str	r1, [r7, #8]
 80012aa:	607a      	str	r2, [r7, #4]
 80012ac:	807b      	strh	r3, [r7, #2]
	driver->stepper = stepper;
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	68ba      	ldr	r2, [r7, #8]
 80012b2:	601a      	str	r2, [r3, #0]
	driver->driver_pins = pins;
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	687a      	ldr	r2, [r7, #4]
 80012b8:	605a      	str	r2, [r3, #4]
	driver->_axisName = axisName;
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	7f3a      	ldrb	r2, [r7, #28]
 80012be:	721a      	strb	r2, [r3, #8]

	/* ------------- Общие переменные движения ----------- */

	driver->tickUs = 0;
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	2200      	movs	r2, #0
 80012c4:	60da      	str	r2, [r3, #12]
	driver->prevTime = 0;
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	2200      	movs	r2, #0
 80012ca:	611a      	str	r2, [r3, #16]
	driver->stepTime = 0;
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	2200      	movs	r2, #0
 80012d0:	615a      	str	r2, [r3, #20]

	driver->_axisType = type;
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	7e3a      	ldrb	r2, [r7, #24]
 80012d6:	761a      	strb	r2, [r3, #24]
	driver->_runMode = POSITION_MODE;
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	2200      	movs	r2, #0
 80012dc:	765a      	strb	r2, [r3, #25]
	driver->_autoPower = false;
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	2200      	movs	r2, #0
 80012e2:	769a      	strb	r2, [r3, #26]
	driver->_workState = DRIVER_INIT;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	2201      	movs	r2, #1
 80012e8:	76da      	strb	r2, [r3, #27]

	driver->_stepsPerRev = stepsPerRev;
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	887a      	ldrh	r2, [r7, #2]
 80012ee:	839a      	strh	r2, [r3, #28]

	if(type == LINEAR)
 80012f0:	7e3b      	ldrb	r3, [r7, #24]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d10f      	bne.n	8001316 <driverInit+0x76>
	{
		driver->_coefAST = COEF_AST;
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	2205      	movs	r2, #5
 80012fa:	849a      	strh	r2, [r3, #36]	@ 0x24
		driver->_stepsPerMm = stepsPerRev / COEF_AST;
 80012fc:	887b      	ldrh	r3, [r7, #2]
 80012fe:	4a32      	ldr	r2, [pc, #200]	@ (80013c8 <driverInit+0x128>)
 8001300:	fba2 2303 	umull	r2, r3, r2, r3
 8001304:	089b      	lsrs	r3, r3, #2
 8001306:	b29a      	uxth	r2, r3
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	84da      	strh	r2, [r3, #38]	@ 0x26

		driver->_stepsPerDeg = 0;
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	f04f 0200 	mov.w	r2, #0
 8001312:	621a      	str	r2, [r3, #32]
 8001314:	e01a      	b.n	800134c <driverInit+0xac>
	}
	else if(type == ROTATIONAL)
 8001316:	7e3b      	ldrb	r3, [r7, #24]
 8001318:	2b01      	cmp	r3, #1
 800131a:	d117      	bne.n	800134c <driverInit+0xac>
	{
		driver->_stepsPerDeg = stepsPerRev / 360.0;
 800131c:	887b      	ldrh	r3, [r7, #2]
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff f910 	bl	8000544 <__aeabi_i2d>
 8001324:	f04f 0200 	mov.w	r2, #0
 8001328:	4b28      	ldr	r3, [pc, #160]	@ (80013cc <driverInit+0x12c>)
 800132a:	f7ff fa9f 	bl	800086c <__aeabi_ddiv>
 800132e:	4602      	mov	r2, r0
 8001330:	460b      	mov	r3, r1
 8001332:	4610      	mov	r0, r2
 8001334:	4619      	mov	r1, r3
 8001336:	f7ff fc67 	bl	8000c08 <__aeabi_d2f>
 800133a:	4602      	mov	r2, r0
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	621a      	str	r2, [r3, #32]

		driver->_coefAST = 0;
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	2200      	movs	r2, #0
 8001344:	849a      	strh	r2, [r3, #36]	@ 0x24
		driver->_stepsPerMm = 0;
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	2200      	movs	r2, #0
 800134a:	84da      	strh	r2, [r3, #38]	@ 0x26
	}

	driver->_accel = 1000;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001352:	851a      	strh	r2, [r3, #40]	@ 0x28

	/* ------------ Переменные POSITION_MODE ------------- */

	driver->_positionPlannerTime = 0;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	2200      	movs	r2, #0
 8001358:	62da      	str	r2, [r3, #44]	@ 0x2c
	driver->_maxSpeed = 1000;
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	4a1c      	ldr	r2, [pc, #112]	@ (80013d0 <driverInit+0x130>)
 800135e:	631a      	str	r2, [r3, #48]	@ 0x30
	driver->_targetPosition = 0;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	2200      	movs	r2, #0
 8001364:	635a      	str	r2, [r3, #52]	@ 0x34

	driver->_s1 = 0;
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	2200      	movs	r2, #0
 800136a:	639a      	str	r2, [r3, #56]	@ 0x38
	driver->_s2 = 0;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	2200      	movs	r2, #0
 8001370:	63da      	str	r2, [r3, #60]	@ 0x3c
	driver->_s3 = 0;
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	2200      	movs	r2, #0
 8001376:	641a      	str	r2, [r3, #64]	@ 0x40
	driver->_k = 0;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	2200      	movs	r2, #0
 800137c:	645a      	str	r2, [r3, #68]	@ 0x44

	/* ------------ Переменные VELOCITY_MODE ------------- */

	driver->_speedPlannerTime = 0;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	2200      	movs	r2, #0
 8001382:	649a      	str	r2, [r3, #72]	@ 0x48
	driver->_curSpeed = 0;
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	f04f 0200 	mov.w	r2, #0
 800138a:	64da      	str	r2, [r3, #76]	@ 0x4c
	driver->_targetSpeed = 0;
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	f04f 0200 	mov.w	r2, #0
 8001392:	651a      	str	r2, [r3, #80]	@ 0x50
	driver->_stopFlag = false;
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	2200      	movs	r2, #0
 8001398:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

	/* ------ Переменные алгоритма плавного разгона ------ */

	driver->_c0 = 0;
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	f04f 0200 	mov.w	r2, #0
 80013a2:	659a      	str	r2, [r3, #88]	@ 0x58
	driver->_cn = 0;
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	f04f 0200 	mov.w	r2, #0
 80013aa:	65da      	str	r2, [r3, #92]	@ 0x5c
	driver->_n = 0;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	2200      	movs	r2, #0
 80013b0:	661a      	str	r2, [r3, #96]	@ 0x60
	driver->N = 0;
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	2200      	movs	r2, #0
 80013b6:	665a      	str	r2, [r3, #100]	@ 0x64
	driver->_cmin = 1.0;
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80013be:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80013c0:	bf00      	nop
 80013c2:	3710      	adds	r7, #16
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	cccccccd 	.word	0xcccccccd
 80013cc:	40768000 	.word	0x40768000
 80013d0:	447a0000 	.word	0x447a0000

080013d4 <setDriverRunMode>:
/** Установка режима работы, _runMode:
 * 	POSITION_MODE - режим следования к позиции
 * 	VELOCITY_MODE - режим удержания заданной скорости
 */
void setDriverRunMode(DRIVER_StructDef* driver, run_mode_t mode)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	460b      	mov	r3, r1
 80013de:	70fb      	strb	r3, [r7, #3]
	driver->_runMode = mode;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	78fa      	ldrb	r2, [r7, #3]
 80013e4:	765a      	strb	r2, [r3, #25]
}
 80013e6:	bf00      	nop
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
	...

080013f4 <resetDriverTimers>:
}

/** Функция сброса всех таймеров
 */
void resetDriverTimers(DRIVER_StructDef* driver)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
	driver->_speedPlannerTime = driver->_positionPlannerTime = driver->prevTime = getDriverMicros();
 80013fc:	4b08      	ldr	r3, [pc, #32]	@ (8001420 <resetDriverTimers+0x2c>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4798      	blx	r3
 8001402:	4602      	mov	r2, r0
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	611a      	str	r2, [r3, #16]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	691a      	ldr	r2, [r3, #16]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8001418:	bf00      	nop
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	20000b0c 	.word	0x20000b0c

08001424 <enableDriver>:
}

/** Включить мотор (пин EN)
 */
void enableDriver(DRIVER_StructDef* driver)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
	driver->_workState = DRIVER_READY;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2202      	movs	r2, #2
 8001430:	76da      	strb	r2, [r3, #27]
	resetDriverTimers(driver);
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f7ff ffde 	bl	80013f4 <resetDriverTimers>
	enableStepper(driver->stepper);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4618      	mov	r0, r3
 800143e:	f004 ff9a 	bl	8006376 <enableStepper>
}
 8001442:	bf00      	nop
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}

0800144a <disableDriver>:

/** Выключить мотор (пин EN)
 */
void disableDriver(DRIVER_StructDef* driver)
{
 800144a:	b580      	push	{r7, lr}
 800144c:	b082      	sub	sp, #8
 800144e:	af00      	add	r7, sp, #0
 8001450:	6078      	str	r0, [r7, #4]
	driver->_workState = DRIVER_INIT;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2201      	movs	r2, #1
 8001456:	76da      	strb	r2, [r3, #27]
	disableStepper(driver->stepper);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4618      	mov	r0, r3
 800145e:	f004 ffb2 	bl	80063c6 <disableStepper>
}
 8001462:	bf00      	nop
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
	...

0800146c <tickDriver>:
/** Здесь происходит движение мотора, функция должна вызываться как можно чаще,
 * 	имеется встроенный таймер на тиках микропроцессора
 * 	Возвращает DRIVER_RUN, если мотор запущен в режиме POSITION_MODE или VELOCITY_MODE
 */
driver_state_t tickDriver(DRIVER_StructDef* driver)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
	if (driver->_workState == DRIVER_RUN)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	7edb      	ldrb	r3, [r3, #27]
 8001478:	b25b      	sxtb	r3, r3
 800147a:	2b03      	cmp	r3, #3
 800147c:	d148      	bne.n	8001510 <tickDriver+0xa4>
	{
		driver->tickUs = getDriverMicros();
 800147e:	4b28      	ldr	r3, [pc, #160]	@ (8001520 <tickDriver+0xb4>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4798      	blx	r3
 8001484:	4602      	mov	r2, r0
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	60da      	str	r2, [r3, #12]

		/* POSITION_MODE */
		if (driver->_runMode == POSITION_MODE && driver->_accel != 0) plannerPositionMode(driver);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	7e5b      	ldrb	r3, [r3, #25]
 800148e:	b2db      	uxtb	r3, r3
 8001490:	2b00      	cmp	r3, #0
 8001492:	d107      	bne.n	80014a4 <tickDriver+0x38>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001498:	b29b      	uxth	r3, r3
 800149a:	2b00      	cmp	r3, #0
 800149c:	d002      	beq.n	80014a4 <tickDriver+0x38>
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f000 f85e 	bl	8001560 <plannerPositionMode>

		/* VELOCITY_MODE */
		if (driver->_runMode == VELOCITY_MODE && driver->_accel != 0) plannerVelocityMode(driver);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	7e5b      	ldrb	r3, [r3, #25]
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d107      	bne.n	80014be <tickDriver+0x52>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014b2:	b29b      	uxth	r3, r3
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d002      	beq.n	80014be <tickDriver+0x52>
 80014b8:	6878      	ldr	r0, [r7, #4]
 80014ba:	f000 fc01 	bl	8001cc0 <plannerVelocityMode>

		/* Основной таймер степпера */
		if (driver->stepTime != 0 && driver->tickUs - driver->prevTime >= driver->stepTime)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	695b      	ldr	r3, [r3, #20]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d024      	beq.n	8001510 <tickDriver+0xa4>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	68da      	ldr	r2, [r3, #12]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	691b      	ldr	r3, [r3, #16]
 80014ce:	1ad2      	subs	r2, r2, r3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	695b      	ldr	r3, [r3, #20]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d31b      	bcc.n	8001510 <tickDriver+0xa4>
		{
			driver->prevTime = driver->tickUs;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	68da      	ldr	r2, [r3, #12]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	611a      	str	r2, [r3, #16]

			/* Проверка достижения целевой координаты, проверка остановки для быстрого планировщика, а также работы без ускорения */
			if (driver->_runMode == POSITION_MODE && driver->_targetPosition == driver->stepper->pos)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	7e5b      	ldrb	r3, [r3, #25]
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d10d      	bne.n	8001506 <tickDriver+0x9a>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d106      	bne.n	8001506 <tickDriver+0x9a>
            {
				brakeDriver(driver);
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f000 f813 	bl	8001524 <brakeDriver>
				return driver->_workState;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	7edb      	ldrb	r3, [r3, #27]
 8001502:	b25b      	sxtb	r3, r3
 8001504:	e007      	b.n	8001516 <tickDriver+0xaa>
            }

			/* Совершаем шаг мотором */
			step(driver->stepper);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4618      	mov	r0, r3
 800150c:	f004 feb4 	bl	8006278 <step>
		}
	}

	return driver->_workState;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	7edb      	ldrb	r3, [r3, #27]
 8001514:	b25b      	sxtb	r3, r3
}
 8001516:	4618      	mov	r0, r3
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	20000b0c 	.word	0x20000b0c

08001524 <brakeDriver>:
}

/* Резкая остановка без возможности продолжения следования по траектории до остановки + выключение мотора
 */
void brakeDriver(DRIVER_StructDef* driver)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
	driver->_workState = DRIVER_READY;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2202      	movs	r2, #2
 8001530:	76da      	strb	r2, [r3, #27]
	driver->stepTime = 0;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2200      	movs	r2, #0
 8001536:	615a      	str	r2, [r3, #20]
	driver->_curSpeed = 0;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	f04f 0200 	mov.w	r2, #0
 800153e:	64da      	str	r2, [r3, #76]	@ 0x4c
	driver->_n = 0;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2200      	movs	r2, #0
 8001544:	661a      	str	r2, [r3, #96]	@ 0x60

	if(driver->_autoPower == true) disableDriver(driver);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	7e9b      	ldrb	r3, [r3, #26]
 800154a:	b2db      	uxtb	r3, r3
 800154c:	2b00      	cmp	r3, #0
 800154e:	d002      	beq.n	8001556 <brakeDriver+0x32>
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f7ff ff7a 	bl	800144a <disableDriver>
}
 8001556:	bf00      	nop
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
	...

08001560 <plannerPositionMode>:
/* -------------------------------------- Функции для работы режима POSITION_MODE -------------------------------------- */

/**	Планировщик скорости для POSITION_MODE с разгоном и торможением
 */
void plannerPositionMode(DRIVER_StructDef* driver)
{
 8001560:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001564:	b084      	sub	sp, #16
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
	int8_t dir = driver->stepper->dir;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	7a1b      	ldrb	r3, [r3, #8]
 8001570:	73fb      	strb	r3, [r7, #15]
	int8_t err = _sign((int32_t)(driver->_s1 - driver->_k));
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	2b00      	cmp	r3, #0
 800157e:	db01      	blt.n	8001584 <plannerPositionMode+0x24>
 8001580:	2301      	movs	r3, #1
 8001582:	e001      	b.n	8001588 <plannerPositionMode+0x28>
 8001584:	f04f 33ff 	mov.w	r3, #4294967295
 8001588:	73bb      	strb	r3, [r7, #14]

	if (driver->tickUs - driver->_positionPlannerTime >= driver->stepTime)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	68da      	ldr	r2, [r3, #12]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001592:	1ad2      	subs	r2, r2, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	695b      	ldr	r3, [r3, #20]
 8001598:	429a      	cmp	r2, r3
 800159a:	f0c0 811d 	bcc.w	80017d8 <plannerPositionMode+0x278>
	{
		/* Обновление переменной времени планировщика */
		driver->_positionPlannerTime = driver->tickUs;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	68da      	ldr	r2, [r3, #12]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	62da      	str	r2, [r3, #44]	@ 0x2c

		/* Основная логика разгона и торможения */
		if(driver->_k < driver->_s1 || driver->_k > driver->_s2)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015ae:	429a      	cmp	r2, r3
 80015b0:	d306      	bcc.n	80015c0 <plannerPositionMode+0x60>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015ba:	429a      	cmp	r2, r3
 80015bc:	f240 80a1 	bls.w	8001702 <plannerPositionMode+0x1a2>
		{
			if(driver->_n == 0) driver->_cn = driver->_c0;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d104      	bne.n	80015d2 <plannerPositionMode+0x72>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	65da      	str	r2, [r3, #92]	@ 0x5c
 80015d0:	e064      	b.n	800169c <plannerPositionMode+0x13c>
			else if(driver->_n == 1) driver->_cn = 0.4056 * driver->_c0;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d113      	bne.n	8001602 <plannerPositionMode+0xa2>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015de:	4618      	mov	r0, r3
 80015e0:	f7fe ffc2 	bl	8000568 <__aeabi_f2d>
 80015e4:	a384      	add	r3, pc, #528	@ (adr r3, 80017f8 <plannerPositionMode+0x298>)
 80015e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ea:	f7ff f815 	bl	8000618 <__aeabi_dmul>
 80015ee:	4602      	mov	r2, r0
 80015f0:	460b      	mov	r3, r1
 80015f2:	4610      	mov	r0, r2
 80015f4:	4619      	mov	r1, r3
 80015f6:	f7ff fb07 	bl	8000c08 <__aeabi_d2f>
 80015fa:	4602      	mov	r2, r0
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001600:	e04c      	b.n	800169c <plannerPositionMode+0x13c>
			else if(driver->_n > 1)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001606:	2b01      	cmp	r3, #1
 8001608:	dd48      	ble.n	800169c <plannerPositionMode+0x13c>
			{
				driver->_cn = driver->_cn * (1 - err * 2.0 / (4.0 * driver->_n + err));
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800160e:	4618      	mov	r0, r3
 8001610:	f7fe ffaa 	bl	8000568 <__aeabi_f2d>
 8001614:	4604      	mov	r4, r0
 8001616:	460d      	mov	r5, r1
 8001618:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800161c:	4618      	mov	r0, r3
 800161e:	f7fe ff91 	bl	8000544 <__aeabi_i2d>
 8001622:	4602      	mov	r2, r0
 8001624:	460b      	mov	r3, r1
 8001626:	f7fe fe41 	bl	80002ac <__adddf3>
 800162a:	4602      	mov	r2, r0
 800162c:	460b      	mov	r3, r1
 800162e:	4690      	mov	r8, r2
 8001630:	4699      	mov	r9, r3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001636:	4618      	mov	r0, r3
 8001638:	f7fe ff84 	bl	8000544 <__aeabi_i2d>
 800163c:	f04f 0200 	mov.w	r2, #0
 8001640:	4b6b      	ldr	r3, [pc, #428]	@ (80017f0 <plannerPositionMode+0x290>)
 8001642:	f7fe ffe9 	bl	8000618 <__aeabi_dmul>
 8001646:	4602      	mov	r2, r0
 8001648:	460b      	mov	r3, r1
 800164a:	4692      	mov	sl, r2
 800164c:	469b      	mov	fp, r3
 800164e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001652:	4618      	mov	r0, r3
 8001654:	f7fe ff76 	bl	8000544 <__aeabi_i2d>
 8001658:	4602      	mov	r2, r0
 800165a:	460b      	mov	r3, r1
 800165c:	4650      	mov	r0, sl
 800165e:	4659      	mov	r1, fp
 8001660:	f7fe fe24 	bl	80002ac <__adddf3>
 8001664:	4602      	mov	r2, r0
 8001666:	460b      	mov	r3, r1
 8001668:	4640      	mov	r0, r8
 800166a:	4649      	mov	r1, r9
 800166c:	f7ff f8fe 	bl	800086c <__aeabi_ddiv>
 8001670:	4602      	mov	r2, r0
 8001672:	460b      	mov	r3, r1
 8001674:	f04f 0000 	mov.w	r0, #0
 8001678:	495e      	ldr	r1, [pc, #376]	@ (80017f4 <plannerPositionMode+0x294>)
 800167a:	f7fe fe15 	bl	80002a8 <__aeabi_dsub>
 800167e:	4602      	mov	r2, r0
 8001680:	460b      	mov	r3, r1
 8001682:	4620      	mov	r0, r4
 8001684:	4629      	mov	r1, r5
 8001686:	f7fe ffc7 	bl	8000618 <__aeabi_dmul>
 800168a:	4602      	mov	r2, r0
 800168c:	460b      	mov	r3, r1
 800168e:	4610      	mov	r0, r2
 8001690:	4619      	mov	r1, r3
 8001692:	f7ff fab9 	bl	8000c08 <__aeabi_d2f>
 8001696:	4602      	mov	r2, r0
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	65da      	str	r2, [r3, #92]	@ 0x5c
			}

			driver->stepTime = (uint32_t)(driver->_cn) - STEPPER_STEP_TIME;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 80016a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016a6:	ee17 3a90 	vmov	r3, s15
 80016aa:	1f5a      	subs	r2, r3, #5
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	615a      	str	r2, [r3, #20]
			driver->_curSpeed = dir * 1000000.0 / driver->_cn;
 80016b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7fe ff45 	bl	8000544 <__aeabi_i2d>
 80016ba:	a34b      	add	r3, pc, #300	@ (adr r3, 80017e8 <plannerPositionMode+0x288>)
 80016bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c0:	f7fe ffaa 	bl	8000618 <__aeabi_dmul>
 80016c4:	4602      	mov	r2, r0
 80016c6:	460b      	mov	r3, r1
 80016c8:	4614      	mov	r4, r2
 80016ca:	461d      	mov	r5, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7fe ff49 	bl	8000568 <__aeabi_f2d>
 80016d6:	4602      	mov	r2, r0
 80016d8:	460b      	mov	r3, r1
 80016da:	4620      	mov	r0, r4
 80016dc:	4629      	mov	r1, r5
 80016de:	f7ff f8c5 	bl	800086c <__aeabi_ddiv>
 80016e2:	4602      	mov	r2, r0
 80016e4:	460b      	mov	r3, r1
 80016e6:	4610      	mov	r0, r2
 80016e8:	4619      	mov	r1, r3
 80016ea:	f7ff fa8d 	bl	8000c08 <__aeabi_d2f>
 80016ee:	4602      	mov	r2, r0
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	64da      	str	r2, [r3, #76]	@ 0x4c

			driver->_n += err;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80016f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80016fc:	441a      	add	r2, r3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	661a      	str	r2, [r3, #96]	@ 0x60
		}

		/* Условие достижения максимальной скорости */
		if(driver->_k == driver->_s1 && driver->_s1 != driver->_s2)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800170a:	429a      	cmp	r2, r3
 800170c:	d128      	bne.n	8001760 <plannerPositionMode+0x200>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001716:	429a      	cmp	r2, r3
 8001718:	d022      	beq.n	8001760 <plannerPositionMode+0x200>
		{
			driver->_curSpeed = dir * driver->_maxSpeed;
 800171a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800171e:	ee07 3a90 	vmov	s15, r3
 8001722:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800172c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
			driver->stepTime = 1000000.0 / driver->_maxSpeed;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800173a:	4618      	mov	r0, r3
 800173c:	f7fe ff14 	bl	8000568 <__aeabi_f2d>
 8001740:	4602      	mov	r2, r0
 8001742:	460b      	mov	r3, r1
 8001744:	a128      	add	r1, pc, #160	@ (adr r1, 80017e8 <plannerPositionMode+0x288>)
 8001746:	e9d1 0100 	ldrd	r0, r1, [r1]
 800174a:	f7ff f88f 	bl	800086c <__aeabi_ddiv>
 800174e:	4602      	mov	r2, r0
 8001750:	460b      	mov	r3, r1
 8001752:	4610      	mov	r0, r2
 8001754:	4619      	mov	r1, r3
 8001756:	f7ff fa37 	bl	8000bc8 <__aeabi_d2uiz>
 800175a:	4602      	mov	r2, r0
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	615a      	str	r2, [r3, #20]
		}

		/* Особый случай первого шага при торможении */
		if(driver->_k == driver->_s2)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001768:	429a      	cmp	r2, r3
 800176a:	d130      	bne.n	80017ce <plannerPositionMode+0x26e>
		{
			driver->stepTime = (uint32_t)(driver->_cn) - STEPPER_STEP_TIME;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 8001772:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001776:	ee17 3a90 	vmov	r3, s15
 800177a:	1f5a      	subs	r2, r3, #5
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	615a      	str	r2, [r3, #20]
			driver->_curSpeed = dir * 1000000.0 / driver->_cn;
 8001780:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001784:	4618      	mov	r0, r3
 8001786:	f7fe fedd 	bl	8000544 <__aeabi_i2d>
 800178a:	a317      	add	r3, pc, #92	@ (adr r3, 80017e8 <plannerPositionMode+0x288>)
 800178c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001790:	f7fe ff42 	bl	8000618 <__aeabi_dmul>
 8001794:	4602      	mov	r2, r0
 8001796:	460b      	mov	r3, r1
 8001798:	4614      	mov	r4, r2
 800179a:	461d      	mov	r5, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7fe fee1 	bl	8000568 <__aeabi_f2d>
 80017a6:	4602      	mov	r2, r0
 80017a8:	460b      	mov	r3, r1
 80017aa:	4620      	mov	r0, r4
 80017ac:	4629      	mov	r1, r5
 80017ae:	f7ff f85d 	bl	800086c <__aeabi_ddiv>
 80017b2:	4602      	mov	r2, r0
 80017b4:	460b      	mov	r3, r1
 80017b6:	4610      	mov	r0, r2
 80017b8:	4619      	mov	r1, r3
 80017ba:	f7ff fa25 	bl	8000c08 <__aeabi_d2f>
 80017be:	4602      	mov	r2, r0
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	64da      	str	r2, [r3, #76]	@ 0x4c

			driver->_n --;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017c8:	1e5a      	subs	r2, r3, #1
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	661a      	str	r2, [r3, #96]	@ 0x60
		}

		driver->_k ++;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017d2:	1c5a      	adds	r2, r3, #1
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	645a      	str	r2, [r3, #68]	@ 0x44
	}
}
 80017d8:	bf00      	nop
 80017da:	3710      	adds	r7, #16
 80017dc:	46bd      	mov	sp, r7
 80017de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017e2:	bf00      	nop
 80017e4:	f3af 8000 	nop.w
 80017e8:	00000000 	.word	0x00000000
 80017ec:	412e8480 	.word	0x412e8480
 80017f0:	40100000 	.word	0x40100000
 80017f4:	3ff00000 	.word	0x3ff00000
 80017f8:	b3d07c85 	.word	0xb3d07c85
 80017fc:	3fd9f559 	.word	0x3fd9f559

08001800 <setDriverTargetPos>:
/** Установка целевой позиции для режима POSITION_MODE (шаги)
 * 	и движение к указанной цели с максимальной скоростью
 * 	не поддерживает горячую смену целевой позиции
 */
driver_param_change_t setDriverTargetPos(DRIVER_StructDef* driver, int32_t target_pos)
{
 8001800:	b5b0      	push	{r4, r5, r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	6039      	str	r1, [r7, #0]
	uint32_t steps = abs(target_pos - driver->stepper->pos);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	683a      	ldr	r2, [r7, #0]
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	2b00      	cmp	r3, #0
 8001816:	bfb8      	it	lt
 8001818:	425b      	neglt	r3, r3
 800181a:	60fb      	str	r3, [r7, #12]

	/* Если драйвер в режиме POSITION_MODE */
	if(driver->_runMode != POSITION_MODE) return DRIVER_PARAM_CHANGE_ERR;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	7e5b      	ldrb	r3, [r3, #25]
 8001820:	b2db      	uxtb	r3, r3
 8001822:	2b00      	cmp	r3, #0
 8001824:	d002      	beq.n	800182c <setDriverTargetPos+0x2c>
 8001826:	f04f 33ff 	mov.w	r3, #4294967295
 800182a:	e0b0      	b.n	800198e <setDriverTargetPos+0x18e>

	/* Если мотор в движении */
	if(driver->_workState == DRIVER_RUN) return DRIVER_PARAM_CHANGE_ERR;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	7edb      	ldrb	r3, [r3, #27]
 8001830:	b25b      	sxtb	r3, r3
 8001832:	2b03      	cmp	r3, #3
 8001834:	d102      	bne.n	800183c <setDriverTargetPos+0x3c>
 8001836:	f04f 33ff 	mov.w	r3, #4294967295
 800183a:	e0a8      	b.n	800198e <setDriverTargetPos+0x18e>

	driver->_targetPosition = target_pos;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	683a      	ldr	r2, [r7, #0]
 8001840:	635a      	str	r2, [r3, #52]	@ 0x34

	if(driver->_targetPosition != driver->stepper->pos)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	429a      	cmp	r2, r3
 800184e:	f000 809d 	beq.w	800198c <setDriverTargetPos+0x18c>
	{
		driver->stepper->dir = (driver->_targetPosition > driver->stepper->pos) ? 1 : -1;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	429a      	cmp	r2, r3
 800185e:	dd01      	ble.n	8001864 <setDriverTargetPos+0x64>
 8001860:	2201      	movs	r2, #1
 8001862:	e001      	b.n	8001868 <setDriverTargetPos+0x68>
 8001864:	f04f 32ff 	mov.w	r2, #4294967295
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	721a      	strb	r2, [r3, #8]

		if (driver->_accel == 0 || driver->_maxSpeed < MIN_SPEED_DRIVER)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001872:	b29b      	uxth	r3, r3
 8001874:	2b00      	cmp	r3, #0
 8001876:	d00c      	beq.n	8001892 <setDriverTargetPos+0x92>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800187c:	4618      	mov	r0, r3
 800187e:	f7fe fe73 	bl	8000568 <__aeabi_f2d>
 8001882:	f04f 3211 	mov.w	r2, #286331153	@ 0x11111111
 8001886:	4b46      	ldr	r3, [pc, #280]	@ (80019a0 <setDriverTargetPos+0x1a0>)
 8001888:	f7ff f938 	bl	8000afc <__aeabi_dcmplt>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d015      	beq.n	80018be <setDriverTargetPos+0xbe>
		{
			driver->stepTime = 1000000.0 / driver->_maxSpeed;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001896:	4618      	mov	r0, r3
 8001898:	f7fe fe66 	bl	8000568 <__aeabi_f2d>
 800189c:	4602      	mov	r2, r0
 800189e:	460b      	mov	r3, r1
 80018a0:	a13d      	add	r1, pc, #244	@ (adr r1, 8001998 <setDriverTargetPos+0x198>)
 80018a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80018a6:	f7fe ffe1 	bl	800086c <__aeabi_ddiv>
 80018aa:	4602      	mov	r2, r0
 80018ac:	460b      	mov	r3, r1
 80018ae:	4610      	mov	r0, r2
 80018b0:	4619      	mov	r1, r3
 80018b2:	f7ff f989 	bl	8000bc8 <__aeabi_d2uiz>
 80018b6:	4602      	mov	r2, r0
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	615a      	str	r2, [r3, #20]
 80018bc:	e063      	b.n	8001986 <setDriverTargetPos+0x186>
		}
		else
		{
			driver->N = driver->_maxSpeed * driver->_maxSpeed / (2.0 * driver->_accel);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80018ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018ce:	ee17 0a90 	vmov	r0, s15
 80018d2:	f7fe fe49 	bl	8000568 <__aeabi_f2d>
 80018d6:	4604      	mov	r4, r0
 80018d8:	460d      	mov	r5, r1
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018de:	b29b      	uxth	r3, r3
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7fe fe2f 	bl	8000544 <__aeabi_i2d>
 80018e6:	4602      	mov	r2, r0
 80018e8:	460b      	mov	r3, r1
 80018ea:	f7fe fcdf 	bl	80002ac <__adddf3>
 80018ee:	4602      	mov	r2, r0
 80018f0:	460b      	mov	r3, r1
 80018f2:	4620      	mov	r0, r4
 80018f4:	4629      	mov	r1, r5
 80018f6:	f7fe ffb9 	bl	800086c <__aeabi_ddiv>
 80018fa:	4602      	mov	r2, r0
 80018fc:	460b      	mov	r3, r1
 80018fe:	4610      	mov	r0, r2
 8001900:	4619      	mov	r1, r3
 8001902:	f7ff f961 	bl	8000bc8 <__aeabi_d2uiz>
 8001906:	4602      	mov	r2, r0
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	665a      	str	r2, [r3, #100]	@ 0x64

			if(steps > 2 * driver->N)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001910:	005b      	lsls	r3, r3, #1
 8001912:	68fa      	ldr	r2, [r7, #12]
 8001914:	429a      	cmp	r2, r3
 8001916:	d915      	bls.n	8001944 <setDriverTargetPos+0x144>
			{
				driver->_s1 = driver->N;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	639a      	str	r2, [r3, #56]	@ 0x38
				driver->_s2 = driver->_s1 + steps - 2 * driver->N;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	441a      	add	r2, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800192c:	005b      	lsls	r3, r3, #1
 800192e:	1ad2      	subs	r2, r2, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	63da      	str	r2, [r3, #60]	@ 0x3c
				driver->_s3 = driver->_s2 + driver->N;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800193c:	441a      	add	r2, r3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	641a      	str	r2, [r3, #64]	@ 0x40
 8001942:	e01d      	b.n	8001980 <setDriverTargetPos+0x180>
			}
			else
			{
				driver->_s1 = steps / 2;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	085a      	lsrs	r2, r3, #1
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	639a      	str	r2, [r3, #56]	@ 0x38
				driver->_s2 = driver->_s1 + (steps % 2 == 0) ? 0 : 1;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001950:	68fa      	ldr	r2, [r7, #12]
 8001952:	f002 0201 	and.w	r2, r2, #1
 8001956:	2a00      	cmp	r2, #0
 8001958:	bf0c      	ite	eq
 800195a:	2201      	moveq	r2, #1
 800195c:	2200      	movne	r2, #0
 800195e:	b2d2      	uxtb	r2, r2
 8001960:	4413      	add	r3, r2
 8001962:	2b00      	cmp	r3, #0
 8001964:	bf0c      	ite	eq
 8001966:	2301      	moveq	r3, #1
 8001968:	2300      	movne	r3, #0
 800196a:	b2db      	uxtb	r3, r3
 800196c:	461a      	mov	r2, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	63da      	str	r2, [r3, #60]	@ 0x3c
				driver->_s3 = driver->_s2 + driver->_s1;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800197a:	441a      	add	r2, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	641a      	str	r2, [r3, #64]	@ 0x40
			}

			driver->_k = 0;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2200      	movs	r2, #0
 8001984:	645a      	str	r2, [r3, #68]	@ 0x44
		}

		driver->_workState = DRIVER_RUN;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2203      	movs	r2, #3
 800198a:	76da      	strb	r2, [r3, #27]
	}

	return DRIVER_PARAM_CHANGE_OK;
 800198c:	2300      	movs	r3, #0
}
 800198e:	4618      	mov	r0, r3
 8001990:	3710      	adds	r7, #16
 8001992:	46bd      	mov	sp, r7
 8001994:	bdb0      	pop	{r4, r5, r7, pc}
 8001996:	bf00      	nop
 8001998:	00000000 	.word	0x00000000
 800199c:	412e8480 	.word	0x412e8480
 80019a0:	3f911111 	.word	0x3f911111

080019a4 <setDriverTargetPosDeg>:

/** Установка целевой позиции (градусы)
 */
driver_param_change_t setDriverTargetPosDeg(DRIVER_StructDef* driver, float target_pos_deg)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	ed87 0a00 	vstr	s0, [r7]
	if(driver->_axisType == ROTATIONAL)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	7e1b      	ldrb	r3, [r3, #24]
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d10f      	bne.n	80019da <setDriverTargetPosDeg+0x36>
	{
		return setDriverTargetPos(driver, target_pos_deg * driver->_stepsPerDeg);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	ed93 7a08 	vldr	s14, [r3, #32]
 80019c0:	edd7 7a00 	vldr	s15, [r7]
 80019c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019cc:	ee17 1a90 	vmov	r1, s15
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f7ff ff15 	bl	8001800 <setDriverTargetPos>
 80019d6:	4603      	mov	r3, r0
 80019d8:	e001      	b.n	80019de <setDriverTargetPosDeg+0x3a>
	}
	else return DRIVER_PARAM_CHANGE_ERR;
 80019da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}

080019e6 <setDriverTargetPosMm>:

/** Установка целевой позиции (мм)
 */
driver_param_change_t setDriverTargetPosMm(DRIVER_StructDef* driver, float target_pos_mm)
{
 80019e6:	b580      	push	{r7, lr}
 80019e8:	b082      	sub	sp, #8
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	6078      	str	r0, [r7, #4]
 80019ee:	ed87 0a00 	vstr	s0, [r7]
	if(driver->_axisType == LINEAR)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	7e1b      	ldrb	r3, [r3, #24]
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d112      	bne.n	8001a22 <setDriverTargetPosMm+0x3c>
	{
		return setDriverTargetPos(driver, target_pos_mm * driver->_stepsPerMm);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001a00:	ee07 3a90 	vmov	s15, r3
 8001a04:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a08:	edd7 7a00 	vldr	s15, [r7]
 8001a0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a14:	ee17 1a90 	vmov	r1, s15
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f7ff fef1 	bl	8001800 <setDriverTargetPos>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	e001      	b.n	8001a26 <setDriverTargetPosMm+0x40>
	}
	else return DRIVER_PARAM_CHANGE_ERR;
 8001a22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
	...

08001a30 <setDriverMaxSpeed>:

/** Установка максимальной по модулю скорости для режима POSITION_MODE (шаги/с)
 *  по умолчанию 300 (шагов/c)
 */
driver_param_change_t setDriverMaxSpeed(DRIVER_StructDef* driver, float speed)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	ed87 0a00 	vstr	s0, [r7]
	if(driver->_workState == DRIVER_RUN) return DRIVER_PARAM_CHANGE_ERR;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	7edb      	ldrb	r3, [r3, #27]
 8001a40:	b25b      	sxtb	r3, r3
 8001a42:	2b03      	cmp	r3, #3
 8001a44:	d102      	bne.n	8001a4c <setDriverMaxSpeed+0x1c>
 8001a46:	f04f 33ff 	mov.w	r3, #4294967295
 8001a4a:	e019      	b.n	8001a80 <setDriverMaxSpeed+0x50>

	/* Ограничения минимальной скорости */
	driver->_maxSpeed = fmax(fabs(speed), MIN_SPEED_DRIVER);
 8001a4c:	edd7 7a00 	vldr	s15, [r7]
 8001a50:	eef0 7ae7 	vabs.f32	s15, s15
 8001a54:	ee17 0a90 	vmov	r0, s15
 8001a58:	f7fe fd86 	bl	8000568 <__aeabi_f2d>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	460b      	mov	r3, r1
 8001a60:	ed9f 1b09 	vldr	d1, [pc, #36]	@ 8001a88 <setDriverMaxSpeed+0x58>
 8001a64:	ec43 2b10 	vmov	d0, r2, r3
 8001a68:	f018 fbae 	bl	801a1c8 <fmax>
 8001a6c:	ec53 2b10 	vmov	r2, r3, d0
 8001a70:	4610      	mov	r0, r2
 8001a72:	4619      	mov	r1, r3
 8001a74:	f7ff f8c8 	bl	8000c08 <__aeabi_d2f>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	631a      	str	r2, [r3, #48]	@ 0x30

	return DRIVER_PARAM_CHANGE_OK;
 8001a7e:	2300      	movs	r3, #0
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3708      	adds	r7, #8
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	11111111 	.word	0x11111111
 8001a8c:	3f911111 	.word	0x3f911111

08001a90 <setDriverMaxSpeedDeg>:

/** Установка максимальной по модулю скорости для режима POSITION_MODE (градусы/c)
 */
driver_param_change_t setDriverMaxSpeedDeg(DRIVER_StructDef* driver, float speed)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	ed87 0a00 	vstr	s0, [r7]
	if(driver->_axisType == ROTATIONAL)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	7e1b      	ldrb	r3, [r3, #24]
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d10f      	bne.n	8001ac6 <setDriverMaxSpeedDeg+0x36>
	{
		return setDriverMaxSpeed(driver, fabs(speed) * driver->_stepsPerDeg);
 8001aa6:	edd7 7a00 	vldr	s15, [r7]
 8001aaa:	eeb0 7ae7 	vabs.f32	s14, s15
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	edd3 7a08 	vldr	s15, [r3, #32]
 8001ab4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ab8:	eeb0 0a67 	vmov.f32	s0, s15
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f7ff ffb7 	bl	8001a30 <setDriverMaxSpeed>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	e001      	b.n	8001aca <setDriverMaxSpeedDeg+0x3a>
	}
	else return DRIVER_PARAM_CHANGE_ERR;
 8001ac6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <setDriverMaxSpeedMm>:

/** Установка максимальной по модулю скорости для режима POSITION_MODE (мм/c)
 */
driver_param_change_t setDriverMaxSpeedMm(DRIVER_StructDef* driver, float speed)
{
 8001ad2:	b5b0      	push	{r4, r5, r7, lr}
 8001ad4:	b082      	sub	sp, #8
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
 8001ada:	ed87 0a00 	vstr	s0, [r7]
	if(driver->_axisType == LINEAR)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	7e1b      	ldrb	r3, [r3, #24]
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d122      	bne.n	8001b2e <setDriverMaxSpeedMm+0x5c>
	{
		return setDriverMaxSpeed(driver, fabs(speed) * driver->_stepsPerMm);
 8001ae8:	edd7 7a00 	vldr	s15, [r7]
 8001aec:	eef0 7ae7 	vabs.f32	s15, s15
 8001af0:	ee17 0a90 	vmov	r0, s15
 8001af4:	f7fe fd38 	bl	8000568 <__aeabi_f2d>
 8001af8:	4604      	mov	r4, r0
 8001afa:	460d      	mov	r5, r1
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7fe fd1f 	bl	8000544 <__aeabi_i2d>
 8001b06:	4602      	mov	r2, r0
 8001b08:	460b      	mov	r3, r1
 8001b0a:	4620      	mov	r0, r4
 8001b0c:	4629      	mov	r1, r5
 8001b0e:	f7fe fd83 	bl	8000618 <__aeabi_dmul>
 8001b12:	4602      	mov	r2, r0
 8001b14:	460b      	mov	r3, r1
 8001b16:	4610      	mov	r0, r2
 8001b18:	4619      	mov	r1, r3
 8001b1a:	f7ff f875 	bl	8000c08 <__aeabi_d2f>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	ee00 3a10 	vmov	s0, r3
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f7ff ff83 	bl	8001a30 <setDriverMaxSpeed>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	e001      	b.n	8001b32 <setDriverMaxSpeedMm+0x60>
	}
	else return DRIVER_PARAM_CHANGE_ERR;
 8001b2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bdb0      	pop	{r4, r5, r7, pc}
 8001b3a:	0000      	movs	r0, r0
 8001b3c:	0000      	movs	r0, r0
	...

08001b40 <setDriverAcceleration>:

/** Установка ускорения для режима POSITION_MODE (шаг/c^2)
 */
driver_param_change_t setDriverAcceleration(DRIVER_StructDef* driver, int16_t accel)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	460b      	mov	r3, r1
 8001b4a:	807b      	strh	r3, [r7, #2]
	if(driver->_workState == DRIVER_RUN) return DRIVER_PARAM_CHANGE_ERR;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	7edb      	ldrb	r3, [r3, #27]
 8001b50:	b25b      	sxtb	r3, r3
 8001b52:	2b03      	cmp	r3, #3
 8001b54:	d102      	bne.n	8001b5c <setDriverAcceleration+0x1c>
 8001b56:	f04f 33ff 	mov.w	r3, #4294967295
 8001b5a:	e039      	b.n	8001bd0 <setDriverAcceleration+0x90>

	driver->_accel = abs(accel);
 8001b5c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	bfb8      	it	lt
 8001b64:	425b      	neglt	r3, r3
 8001b66:	b29a      	uxth	r2, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	851a      	strh	r2, [r3, #40]	@ 0x28

	/* Считаем значение _c0 и _N по алгоритму плавного старта */
	if(accel != 0)
 8001b6c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d028      	beq.n	8001bc6 <setDriverAcceleration+0x86>
	{
		driver->_c0 = 1000000.0 * sqrt(2.0 / driver->_accel);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b78:	b29b      	uxth	r3, r3
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7fe fce2 	bl	8000544 <__aeabi_i2d>
 8001b80:	4602      	mov	r2, r0
 8001b82:	460b      	mov	r3, r1
 8001b84:	f04f 0000 	mov.w	r0, #0
 8001b88:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001b8c:	f7fe fe6e 	bl	800086c <__aeabi_ddiv>
 8001b90:	4602      	mov	r2, r0
 8001b92:	460b      	mov	r3, r1
 8001b94:	ec43 2b17 	vmov	d7, r2, r3
 8001b98:	eeb0 0a47 	vmov.f32	s0, s14
 8001b9c:	eef0 0a67 	vmov.f32	s1, s15
 8001ba0:	f018 f944 	bl	8019e2c <sqrt>
 8001ba4:	ec51 0b10 	vmov	r0, r1, d0
 8001ba8:	a30b      	add	r3, pc, #44	@ (adr r3, 8001bd8 <setDriverAcceleration+0x98>)
 8001baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bae:	f7fe fd33 	bl	8000618 <__aeabi_dmul>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	4610      	mov	r0, r2
 8001bb8:	4619      	mov	r1, r3
 8001bba:	f7ff f825 	bl	8000c08 <__aeabi_d2f>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	659a      	str	r2, [r3, #88]	@ 0x58
 8001bc4:	e003      	b.n	8001bce <setDriverAcceleration+0x8e>
	}
	else driver->_c0 = 0;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	f04f 0200 	mov.w	r2, #0
 8001bcc:	659a      	str	r2, [r3, #88]	@ 0x58

	return DRIVER_PARAM_CHANGE_OK;
 8001bce:	2300      	movs	r3, #0
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3708      	adds	r7, #8
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	00000000 	.word	0x00000000
 8001bdc:	412e8480 	.word	0x412e8480

08001be0 <setDriverAccelerationDeg>:

/** Установка ускорения для режима POSITION_MODE (градусы/c^2)
 */
driver_param_change_t setDriverAccelerationDeg(DRIVER_StructDef* driver, float accel)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	ed87 0a00 	vstr	s0, [r7]
	if(driver->_axisType == ROTATIONAL)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	7e1b      	ldrb	r3, [r3, #24]
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d111      	bne.n	8001c1a <setDriverAccelerationDeg+0x3a>
	{
		return setDriverAcceleration(driver, accel * driver->_stepsPerDeg);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	ed93 7a08 	vldr	s14, [r3, #32]
 8001bfc:	edd7 7a00 	vldr	s15, [r7]
 8001c00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c08:	ee17 3a90 	vmov	r3, s15
 8001c0c:	b21b      	sxth	r3, r3
 8001c0e:	4619      	mov	r1, r3
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f7ff ff95 	bl	8001b40 <setDriverAcceleration>
 8001c16:	4603      	mov	r3, r0
 8001c18:	e001      	b.n	8001c1e <setDriverAccelerationDeg+0x3e>
	}
	else return DRIVER_PARAM_CHANGE_ERR;
 8001c1a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <setDriverAccelerationMm>:

/** Установка ускорения для режима POSITION_MODE (мм/c^2)
 */
driver_param_change_t setDriverAccelerationMm(DRIVER_StructDef* driver, float accel)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b082      	sub	sp, #8
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
 8001c2e:	ed87 0a00 	vstr	s0, [r7]
	if(driver->_axisType == LINEAR)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	7e1b      	ldrb	r3, [r3, #24]
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d114      	bne.n	8001c66 <setDriverAccelerationMm+0x40>
	{
		return setDriverAcceleration(driver, accel * driver->_stepsPerMm);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001c40:	ee07 3a90 	vmov	s15, r3
 8001c44:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c48:	edd7 7a00 	vldr	s15, [r7]
 8001c4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c54:	ee17 3a90 	vmov	r3, s15
 8001c58:	b21b      	sxth	r3, r3
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f7ff ff6f 	bl	8001b40 <setDriverAcceleration>
 8001c62:	4603      	mov	r3, r0
 8001c64:	e001      	b.n	8001c6a <setDriverAccelerationMm+0x44>
	}
	else return DRIVER_PARAM_CHANGE_ERR;
 8001c66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
	...

08001c74 <getDriverCurrentPosDeg>:
}

/** Чтение текущей позиции мотора (градусы)
 */
float getDriverCurrentPosDeg(DRIVER_StructDef* driver)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
	if(driver->_axisType == ROTATIONAL)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	7e1b      	ldrb	r3, [r3, #24]
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d10c      	bne.n	8001ca0 <getDriverCurrentPosDeg+0x2c>
	{
		return ((float)driver->stepper->pos) / driver->_stepsPerDeg;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	ee07 3a90 	vmov	s15, r3
 8001c90:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	edd3 7a08 	vldr	s15, [r3, #32]
 8001c9a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001c9e:	e001      	b.n	8001ca4 <getDriverCurrentPosDeg+0x30>
	}
	else return 0;
 8001ca0:	eddf 6a05 	vldr	s13, [pc, #20]	@ 8001cb8 <getDriverCurrentPosDeg+0x44>
}
 8001ca4:	eef0 7a66 	vmov.f32	s15, s13
 8001ca8:	eeb0 0a67 	vmov.f32	s0, s15
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
	...

08001cc0 <plannerVelocityMode>:
 * 	Если ускорение _accel = 0, то setSpeed(...) задает сразу скорость мотора
 * 	и старт будет резким!
 * 	Поддерживает горячую смену скорости!
 */
void plannerVelocityMode(DRIVER_StructDef* driver)
{
 8001cc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001cc4:	b084      	sub	sp, #16
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
	float err = driver->_targetSpeed - driver->_curSpeed;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	ed93 7a14 	vldr	s14, [r3, #80]	@ 0x50
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8001cd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cda:	edc7 7a03 	vstr	s15, [r7, #12]
	int8_t dir = driver->stepper->dir;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	7a1b      	ldrb	r3, [r3, #8]
 8001ce4:	72fb      	strb	r3, [r7, #11]

	if (driver->_stopFlag == true && fabs(driver->_curSpeed) <= MIN_SPEED_DRIVER)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d014      	beq.n	8001d1a <plannerVelocityMode+0x5a>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8001cf6:	eef0 7ae7 	vabs.f32	s15, s15
 8001cfa:	ee17 0a90 	vmov	r0, s15
 8001cfe:	f7fe fc33 	bl	8000568 <__aeabi_f2d>
 8001d02:	f04f 3211 	mov.w	r2, #286331153	@ 0x11111111
 8001d06:	4b9a      	ldr	r3, [pc, #616]	@ (8001f70 <plannerVelocityMode+0x2b0>)
 8001d08:	f7fe ff02 	bl	8000b10 <__aeabi_dcmple>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d003      	beq.n	8001d1a <plannerVelocityMode+0x5a>
	{
		brakeDriver(driver);
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f7ff fc06 	bl	8001524 <brakeDriver>
		return;
 8001d18:	e11a      	b.n	8001f50 <plannerVelocityMode+0x290>
	}

	if (driver->tickUs - driver->_speedPlannerTime >= driver->stepTime)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	68da      	ldr	r2, [r3, #12]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d22:	1ad2      	subs	r2, r2, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	695b      	ldr	r3, [r3, #20]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	f0c0 8111 	bcc.w	8001f50 <plannerVelocityMode+0x290>
	{
		/* Обновление переменной времени планировщика */
		driver->_speedPlannerTime = driver->tickUs;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	68da      	ldr	r2, [r3, #12]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	649a      	str	r2, [r3, #72]	@ 0x48

		/* Основная логика разгона/торможения/смены скорости */
		if(driver->_n == 0) driver->_cn = driver->_c0;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d104      	bne.n	8001d48 <plannerVelocityMode+0x88>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001d46:	e0b8      	b.n	8001eba <plannerVelocityMode+0x1fa>
		else if(driver->_n == 1) driver->_cn = 0.4056 * driver->_c0;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d113      	bne.n	8001d78 <plannerVelocityMode+0xb8>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7fe fc07 	bl	8000568 <__aeabi_f2d>
 8001d5a:	a37f      	add	r3, pc, #508	@ (adr r3, 8001f58 <plannerVelocityMode+0x298>)
 8001d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d60:	f7fe fc5a 	bl	8000618 <__aeabi_dmul>
 8001d64:	4602      	mov	r2, r0
 8001d66:	460b      	mov	r3, r1
 8001d68:	4610      	mov	r0, r2
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	f7fe ff4c 	bl	8000c08 <__aeabi_d2f>
 8001d70:	4602      	mov	r2, r0
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001d76:	e0a0      	b.n	8001eba <plannerVelocityMode+0x1fa>
		else if(driver->_n > 1)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	dd77      	ble.n	8001e70 <plannerVelocityMode+0x1b0>
		{
			driver->_cn = driver->_cn * (1 - _signf(err * dir) * 2.0 / (4.0 * driver->_n + _signf(err * dir)));
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7fe fbef 	bl	8000568 <__aeabi_f2d>
 8001d8a:	4604      	mov	r4, r0
 8001d8c:	460d      	mov	r5, r1
 8001d8e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001d92:	ee07 3a90 	vmov	s15, r3
 8001d96:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d9a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001da2:	ee17 0a90 	vmov	r0, s15
 8001da6:	f7fe fbdf 	bl	8000568 <__aeabi_f2d>
 8001daa:	a36d      	add	r3, pc, #436	@ (adr r3, 8001f60 <plannerVelocityMode+0x2a0>)
 8001dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001db0:	f7fe fec2 	bl	8000b38 <__aeabi_dcmpgt>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d003      	beq.n	8001dc2 <plannerVelocityMode+0x102>
 8001dba:	f04f 0000 	mov.w	r0, #0
 8001dbe:	496d      	ldr	r1, [pc, #436]	@ (8001f74 <plannerVelocityMode+0x2b4>)
 8001dc0:	e002      	b.n	8001dc8 <plannerVelocityMode+0x108>
 8001dc2:	f04f 0000 	mov.w	r0, #0
 8001dc6:	496c      	ldr	r1, [pc, #432]	@ (8001f78 <plannerVelocityMode+0x2b8>)
 8001dc8:	4602      	mov	r2, r0
 8001dca:	460b      	mov	r3, r1
 8001dcc:	f7fe fa6e 	bl	80002ac <__adddf3>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	4690      	mov	r8, r2
 8001dd6:	4699      	mov	r9, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7fe fbb1 	bl	8000544 <__aeabi_i2d>
 8001de2:	f04f 0200 	mov.w	r2, #0
 8001de6:	4b65      	ldr	r3, [pc, #404]	@ (8001f7c <plannerVelocityMode+0x2bc>)
 8001de8:	f7fe fc16 	bl	8000618 <__aeabi_dmul>
 8001dec:	4602      	mov	r2, r0
 8001dee:	460b      	mov	r3, r1
 8001df0:	4692      	mov	sl, r2
 8001df2:	469b      	mov	fp, r3
 8001df4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001df8:	ee07 3a90 	vmov	s15, r3
 8001dfc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e00:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e08:	ee17 0a90 	vmov	r0, s15
 8001e0c:	f7fe fbac 	bl	8000568 <__aeabi_f2d>
 8001e10:	a353      	add	r3, pc, #332	@ (adr r3, 8001f60 <plannerVelocityMode+0x2a0>)
 8001e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e16:	f7fe fe8f 	bl	8000b38 <__aeabi_dcmpgt>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d003      	beq.n	8001e28 <plannerVelocityMode+0x168>
 8001e20:	f04f 0000 	mov.w	r0, #0
 8001e24:	4953      	ldr	r1, [pc, #332]	@ (8001f74 <plannerVelocityMode+0x2b4>)
 8001e26:	e002      	b.n	8001e2e <plannerVelocityMode+0x16e>
 8001e28:	f04f 0000 	mov.w	r0, #0
 8001e2c:	4952      	ldr	r1, [pc, #328]	@ (8001f78 <plannerVelocityMode+0x2b8>)
 8001e2e:	4652      	mov	r2, sl
 8001e30:	465b      	mov	r3, fp
 8001e32:	f7fe fa3b 	bl	80002ac <__adddf3>
 8001e36:	4602      	mov	r2, r0
 8001e38:	460b      	mov	r3, r1
 8001e3a:	4640      	mov	r0, r8
 8001e3c:	4649      	mov	r1, r9
 8001e3e:	f7fe fd15 	bl	800086c <__aeabi_ddiv>
 8001e42:	4602      	mov	r2, r0
 8001e44:	460b      	mov	r3, r1
 8001e46:	f04f 0000 	mov.w	r0, #0
 8001e4a:	494a      	ldr	r1, [pc, #296]	@ (8001f74 <plannerVelocityMode+0x2b4>)
 8001e4c:	f7fe fa2c 	bl	80002a8 <__aeabi_dsub>
 8001e50:	4602      	mov	r2, r0
 8001e52:	460b      	mov	r3, r1
 8001e54:	4620      	mov	r0, r4
 8001e56:	4629      	mov	r1, r5
 8001e58:	f7fe fbde 	bl	8000618 <__aeabi_dmul>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	460b      	mov	r3, r1
 8001e60:	4610      	mov	r0, r2
 8001e62:	4619      	mov	r1, r3
 8001e64:	f7fe fed0 	bl	8000c08 <__aeabi_d2f>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001e6e:	e024      	b.n	8001eba <plannerVelocityMode+0x1fa>
		}
		else if(driver->_n < 0)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	da20      	bge.n	8001eba <plannerVelocityMode+0x1fa>
		{
			driver->_curSpeed = 0;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	f04f 0200 	mov.w	r2, #0
 8001e7e:	64da      	str	r2, [r3, #76]	@ 0x4c

			if(driver->_stopFlag == true)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d003      	beq.n	8001e92 <plannerVelocityMode+0x1d2>
			{
				brakeDriver(driver);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f7ff fb4a 	bl	8001524 <brakeDriver>
				return;
 8001e90:	e05e      	b.n	8001f50 <plannerVelocityMode+0x290>
			}
			else
			{
				driver->stepper->dir = _signf(driver->_targetSpeed);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7fe fb66 	bl	8000568 <__aeabi_f2d>
 8001e9c:	a330      	add	r3, pc, #192	@ (adr r3, 8001f60 <plannerVelocityMode+0x2a0>)
 8001e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea2:	f7fe fe49 	bl	8000b38 <__aeabi_dcmpgt>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d001      	beq.n	8001eb0 <plannerVelocityMode+0x1f0>
 8001eac:	2201      	movs	r2, #1
 8001eae:	e001      	b.n	8001eb4 <plannerVelocityMode+0x1f4>
 8001eb0:	f04f 32ff 	mov.w	r2, #4294967295
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	721a      	strb	r2, [r3, #8]
			}
		}

		driver->stepTime = (uint32_t)(driver->_cn) - STEPPER_STEP_TIME;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 8001ec0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ec4:	ee17 3a90 	vmov	r3, s15
 8001ec8:	1f5a      	subs	r2, r3, #5
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	615a      	str	r2, [r3, #20]
		driver->_curSpeed = dir * 1000000.0 / driver->_cn;
 8001ece:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7fe fb36 	bl	8000544 <__aeabi_i2d>
 8001ed8:	a323      	add	r3, pc, #140	@ (adr r3, 8001f68 <plannerVelocityMode+0x2a8>)
 8001eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ede:	f7fe fb9b 	bl	8000618 <__aeabi_dmul>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	4614      	mov	r4, r2
 8001ee8:	461d      	mov	r5, r3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7fe fb3a 	bl	8000568 <__aeabi_f2d>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	460b      	mov	r3, r1
 8001ef8:	4620      	mov	r0, r4
 8001efa:	4629      	mov	r1, r5
 8001efc:	f7fe fcb6 	bl	800086c <__aeabi_ddiv>
 8001f00:	4602      	mov	r2, r0
 8001f02:	460b      	mov	r3, r1
 8001f04:	4610      	mov	r0, r2
 8001f06:	4619      	mov	r1, r3
 8001f08:	f7fe fe7e 	bl	8000c08 <__aeabi_d2f>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	64da      	str	r2, [r3, #76]	@ 0x4c

		driver->_n += _signf(err * dir);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6e1c      	ldr	r4, [r3, #96]	@ 0x60
 8001f16:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001f1a:	ee07 3a90 	vmov	s15, r3
 8001f1e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f22:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f2a:	ee17 0a90 	vmov	r0, s15
 8001f2e:	f7fe fb1b 	bl	8000568 <__aeabi_f2d>
 8001f32:	a30b      	add	r3, pc, #44	@ (adr r3, 8001f60 <plannerVelocityMode+0x2a0>)
 8001f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f38:	f7fe fdfe 	bl	8000b38 <__aeabi_dcmpgt>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <plannerVelocityMode+0x286>
 8001f42:	2301      	movs	r3, #1
 8001f44:	e001      	b.n	8001f4a <plannerVelocityMode+0x28a>
 8001f46:	f04f 33ff 	mov.w	r3, #4294967295
 8001f4a:	191a      	adds	r2, r3, r4
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	661a      	str	r2, [r3, #96]	@ 0x60
	}
}
 8001f50:	3710      	adds	r7, #16
 8001f52:	46bd      	mov	sp, r7
 8001f54:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f58:	b3d07c85 	.word	0xb3d07c85
 8001f5c:	3fd9f559 	.word	0x3fd9f559
 8001f60:	812dea11 	.word	0x812dea11
 8001f64:	bd719799 	.word	0xbd719799
 8001f68:	00000000 	.word	0x00000000
 8001f6c:	412e8480 	.word	0x412e8480
 8001f70:	3f911111 	.word	0x3f911111
 8001f74:	3ff00000 	.word	0x3ff00000
 8001f78:	bff00000 	.word	0xbff00000
 8001f7c:	40100000 	.word	0x40100000

08001f80 <setDriverTargetSpeed>:

/** Установка целевой скорости для режима VELOCITY_MODE (шаги/c)
 * 	в соответствии с минимальной скоростью, определенной в макросах
 */
driver_param_change_t setDriverTargetSpeed(DRIVER_StructDef* driver, float speed)
{
 8001f80:	b5b0      	push	{r4, r5, r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	ed87 0a00 	vstr	s0, [r7]
	/* Если драйвер в режиме POSITION_MODE */
	if(driver->_runMode != VELOCITY_MODE) return DRIVER_PARAM_CHANGE_ERR;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	7e5b      	ldrb	r3, [r3, #25]
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d002      	beq.n	8001f9c <setDriverTargetSpeed+0x1c>
 8001f96:	f04f 33ff 	mov.w	r3, #4294967295
 8001f9a:	e0b8      	b.n	800210e <setDriverTargetSpeed+0x18e>

	driver->_targetSpeed = speed;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	683a      	ldr	r2, [r7, #0]
 8001fa0:	651a      	str	r2, [r3, #80]	@ 0x50
	driver->_stopFlag = (driver->_targetSpeed == 0);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8001fa8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001fac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fb0:	bf0c      	ite	eq
 8001fb2:	2301      	moveq	r3, #1
 8001fb4:	2300      	movne	r3, #0
 8001fb6:	b2da      	uxtb	r2, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

	if(driver->_targetSpeed == 0 && driver->_accel == 0)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8001fc4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001fc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fcc:	d10c      	bne.n	8001fe8 <setDriverTargetSpeed+0x68>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d107      	bne.n	8001fe8 <setDriverTargetSpeed+0x68>
	{
		driver->stepTime = 0;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	615a      	str	r2, [r3, #20]
		brakeDriver(driver);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f7ff faa0 	bl	8001524 <brakeDriver>

		return DRIVER_PARAM_CHANGE_OK;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	e092      	b.n	800210e <setDriverTargetSpeed+0x18e>
	}

	driver->stepper->dir = (speed > 0) ? 1 : -1;
 8001fe8:	edd7 7a00 	vldr	s15, [r7]
 8001fec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ff4:	dd01      	ble.n	8001ffa <setDriverTargetSpeed+0x7a>
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	e001      	b.n	8001ffe <setDriverTargetSpeed+0x7e>
 8001ffa:	f04f 32ff 	mov.w	r2, #4294967295
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	721a      	strb	r2, [r3, #8]

	/* Ограничение минимальной скорости */
	if (fabs(speed) < MIN_SPEED_DRIVER) driver->_targetSpeed = MIN_SPEED_DRIVER * driver->stepper->dir;
 8002004:	edd7 7a00 	vldr	s15, [r7]
 8002008:	eef0 7ae7 	vabs.f32	s15, s15
 800200c:	ee17 0a90 	vmov	r0, s15
 8002010:	f7fe faaa 	bl	8000568 <__aeabi_f2d>
 8002014:	f04f 3211 	mov.w	r2, #286331153	@ 0x11111111
 8002018:	4b43      	ldr	r3, [pc, #268]	@ (8002128 <setDriverTargetSpeed+0x1a8>)
 800201a:	f7fe fd6f 	bl	8000afc <__aeabi_dcmplt>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d014      	beq.n	800204e <setDriverTargetSpeed+0xce>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	7a1b      	ldrb	r3, [r3, #8]
 800202a:	b25b      	sxtb	r3, r3
 800202c:	4618      	mov	r0, r3
 800202e:	f7fe fa89 	bl	8000544 <__aeabi_i2d>
 8002032:	f04f 3211 	mov.w	r2, #286331153	@ 0x11111111
 8002036:	4b3c      	ldr	r3, [pc, #240]	@ (8002128 <setDriverTargetSpeed+0x1a8>)
 8002038:	f7fe faee 	bl	8000618 <__aeabi_dmul>
 800203c:	4602      	mov	r2, r0
 800203e:	460b      	mov	r3, r1
 8002040:	4610      	mov	r0, r2
 8002042:	4619      	mov	r1, r3
 8002044:	f7fe fde0 	bl	8000c08 <__aeabi_d2f>
 8002048:	4602      	mov	r2, r0
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	651a      	str	r2, [r3, #80]	@ 0x50

	if(driver->_accel == 0)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002052:	b29b      	uxth	r3, r3
 8002054:	2b00      	cmp	r3, #0
 8002056:	d125      	bne.n	80020a4 <setDriverTargetSpeed+0x124>
	{
		driver->_curSpeed = driver->_targetSpeed;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	64da      	str	r2, [r3, #76]	@ 0x4c
		driver->stepTime = fabs(1000000.0 / driver->_targetSpeed) - STEPPER_STEP_TIME;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002064:	4618      	mov	r0, r3
 8002066:	f7fe fa7f 	bl	8000568 <__aeabi_f2d>
 800206a:	4602      	mov	r2, r0
 800206c:	460b      	mov	r3, r1
 800206e:	a12a      	add	r1, pc, #168	@ (adr r1, 8002118 <setDriverTargetSpeed+0x198>)
 8002070:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002074:	f7fe fbfa 	bl	800086c <__aeabi_ddiv>
 8002078:	4602      	mov	r2, r0
 800207a:	460b      	mov	r3, r1
 800207c:	4614      	mov	r4, r2
 800207e:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8002082:	f04f 0200 	mov.w	r2, #0
 8002086:	4b29      	ldr	r3, [pc, #164]	@ (800212c <setDriverTargetSpeed+0x1ac>)
 8002088:	4620      	mov	r0, r4
 800208a:	4629      	mov	r1, r5
 800208c:	f7fe f90c 	bl	80002a8 <__aeabi_dsub>
 8002090:	4602      	mov	r2, r0
 8002092:	460b      	mov	r3, r1
 8002094:	4610      	mov	r0, r2
 8002096:	4619      	mov	r1, r3
 8002098:	f7fe fd96 	bl	8000bc8 <__aeabi_d2uiz>
 800209c:	4602      	mov	r2, r0
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	615a      	str	r2, [r3, #20]
 80020a2:	e030      	b.n	8002106 <setDriverTargetSpeed+0x186>
	}
	else
	{
		if(driver->_curSpeed == 0)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 80020aa:	eef5 7a40 	vcmp.f32	s15, #0.0
 80020ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020b2:	d114      	bne.n	80020de <setDriverTargetSpeed+0x15e>
		{
			driver->stepper->dir = _signf(driver->_targetSpeed);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7fe fa55 	bl	8000568 <__aeabi_f2d>
 80020be:	a318      	add	r3, pc, #96	@ (adr r3, 8002120 <setDriverTargetSpeed+0x1a0>)
 80020c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020c4:	f7fe fd38 	bl	8000b38 <__aeabi_dcmpgt>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <setDriverTargetSpeed+0x152>
 80020ce:	2201      	movs	r2, #1
 80020d0:	e001      	b.n	80020d6 <setDriverTargetSpeed+0x156>
 80020d2:	f04f 32ff 	mov.w	r2, #4294967295
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	721a      	strb	r2, [r3, #8]
 80020dc:	e013      	b.n	8002106 <setDriverTargetSpeed+0x186>
		}
		else driver->stepper->dir = _signf(driver->_curSpeed);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7fe fa40 	bl	8000568 <__aeabi_f2d>
 80020e8:	a30d      	add	r3, pc, #52	@ (adr r3, 8002120 <setDriverTargetSpeed+0x1a0>)
 80020ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ee:	f7fe fd23 	bl	8000b38 <__aeabi_dcmpgt>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d001      	beq.n	80020fc <setDriverTargetSpeed+0x17c>
 80020f8:	2201      	movs	r2, #1
 80020fa:	e001      	b.n	8002100 <setDriverTargetSpeed+0x180>
 80020fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	721a      	strb	r2, [r3, #8]
	}

	driver->_workState = DRIVER_RUN;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2203      	movs	r2, #3
 800210a:	76da      	strb	r2, [r3, #27]

	return DRIVER_PARAM_CHANGE_OK;
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bdb0      	pop	{r4, r5, r7, pc}
 8002116:	bf00      	nop
 8002118:	00000000 	.word	0x00000000
 800211c:	412e8480 	.word	0x412e8480
 8002120:	812dea11 	.word	0x812dea11
 8002124:	bd719799 	.word	0xbd719799
 8002128:	3f911111 	.word	0x3f911111
 800212c:	40140000 	.word	0x40140000

08002130 <setDriverTargetSpeedDeg>:

/** Установка целевой скорости для режима VELOCITY_MODE (градусы/c)
 */
driver_param_change_t setDriverTargetSpeedDeg(DRIVER_StructDef* driver, float speed)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	ed87 0a00 	vstr	s0, [r7]
	if(driver->_axisType == ROTATIONAL)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	7e1b      	ldrb	r3, [r3, #24]
 8002140:	b2db      	uxtb	r3, r3
 8002142:	2b01      	cmp	r3, #1
 8002144:	d10d      	bne.n	8002162 <setDriverTargetSpeedDeg+0x32>
	{
		return setDriverTargetSpeed(driver, speed * driver->_stepsPerDeg);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	ed93 7a08 	vldr	s14, [r3, #32]
 800214c:	edd7 7a00 	vldr	s15, [r7]
 8002150:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002154:	eeb0 0a67 	vmov.f32	s0, s15
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f7ff ff11 	bl	8001f80 <setDriverTargetSpeed>
 800215e:	4603      	mov	r3, r0
 8002160:	e001      	b.n	8002166 <setDriverTargetSpeedDeg+0x36>
	}
	else return DRIVER_PARAM_CHANGE_ERR;
 8002162:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002166:	4618      	mov	r0, r3
 8002168:	3708      	adds	r7, #8
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
	...

08002170 <DWT_Init>:
  * @brief  This function initializes the DWT counter.
  * @param[in] None
  * @return None
  */
void DWT_Init()
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
	/* Allow the use of the counter DWT */
	SCB_DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8002174:	4b08      	ldr	r3, [pc, #32]	@ (8002198 <DWT_Init+0x28>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a07      	ldr	r2, [pc, #28]	@ (8002198 <DWT_Init+0x28>)
 800217a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800217e:	6013      	str	r3, [r2, #0]
	/* Turn on the counter */
	DWT_CONTROL |= DWT_CTRL_CYCCNTENA_Msk;
 8002180:	4b06      	ldr	r3, [pc, #24]	@ (800219c <DWT_Init+0x2c>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a05      	ldr	r2, [pc, #20]	@ (800219c <DWT_Init+0x2c>)
 8002186:	f043 0301 	orr.w	r3, r3, #1
 800218a:	6013      	str	r3, [r2, #0]
}
 800218c:	bf00      	nop
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	e000edfc 	.word	0xe000edfc
 800219c:	e0001000 	.word	0xe0001000

080021a0 <DWT_usDelay>:
  * @brief  This function produces a time delay in us.
  * @param[in] Time in us
  * @return None
  */
void DWT_usDelay(uint32_t us)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b085      	sub	sp, #20
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
	/* Convert microseconds to processor ticks */
	uint32_t us_count_tic =  us * (SystemCoreClock / 1000000);
 80021a8:	4b0c      	ldr	r3, [pc, #48]	@ (80021dc <DWT_usDelay+0x3c>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a0c      	ldr	r2, [pc, #48]	@ (80021e0 <DWT_usDelay+0x40>)
 80021ae:	fba2 2303 	umull	r2, r3, r2, r3
 80021b2:	0c9a      	lsrs	r2, r3, #18
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	fb02 f303 	mul.w	r3, r2, r3
 80021ba:	60fb      	str	r3, [r7, #12]
	/* Reset the counter */
	DWT_CYCCNT = 0;
 80021bc:	4b09      	ldr	r3, [pc, #36]	@ (80021e4 <DWT_usDelay+0x44>)
 80021be:	2200      	movs	r2, #0
 80021c0:	601a      	str	r2, [r3, #0]
	while(DWT_CYCCNT < us_count_tic);
 80021c2:	bf00      	nop
 80021c4:	4b07      	ldr	r3, [pc, #28]	@ (80021e4 <DWT_usDelay+0x44>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	68fa      	ldr	r2, [r7, #12]
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d8fa      	bhi.n	80021c4 <DWT_usDelay+0x24>
}
 80021ce:	bf00      	nop
 80021d0:	bf00      	nop
 80021d2:	3714      	adds	r7, #20
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr
 80021dc:	200008f0 	.word	0x200008f0
 80021e0:	431bde83 	.word	0x431bde83
 80021e4:	e0001004 	.word	0xe0001004

080021e8 <fifoInit>:
  /** Функция инициализации fifo буфера
	* При инициализации передается указатель на
	* статический массив/структуру данных и его длина
	*/
fifo_state_t fifoInit(FIFO_StructDef* buf, int8_t* data, uint32_t size)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b085      	sub	sp, #20
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	607a      	str	r2, [r7, #4]
	buf->size = size;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	60da      	str	r2, [r3, #12]
	buf->data = data;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	68ba      	ldr	r2, [r7, #8]
 80021fe:	601a      	str	r2, [r3, #0]

	buf->tail = 0;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2200      	movs	r2, #0
 8002204:	605a      	str	r2, [r3, #4]
	buf->head = 1;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2201      	movs	r2, #1
 800220a:	609a      	str	r2, [r3, #8]

	if (buf->data == NULL) return FIFO_ERR;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d102      	bne.n	800221a <fifoInit+0x32>
 8002214:	f04f 33ff 	mov.w	r3, #4294967295
 8002218:	e000      	b.n	800221c <fifoInit+0x34>

	return FIFO_INIT;
 800221a:	2301      	movs	r3, #1
}
 800221c:	4618      	mov	r0, r3
 800221e:	3714      	adds	r7, #20
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <fifoClear>:

/** Очистка буфера
 */
fifo_state_t fifoClear(FIFO_StructDef* buf)
{
 8002228:	b480      	push	{r7}
 800222a:	b085      	sub	sp, #20
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
	for (uint32_t i = 0; i < buf->size; i++)
 8002230:	2300      	movs	r3, #0
 8002232:	60fb      	str	r3, [r7, #12]
 8002234:	e008      	b.n	8002248 <fifoClear+0x20>
	{
		buf->data[i] = 0;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	4413      	add	r3, r2
 800223e:	2200      	movs	r2, #0
 8002240:	701a      	strb	r2, [r3, #0]
	for (uint32_t i = 0; i < buf->size; i++)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	3301      	adds	r3, #1
 8002246:	60fb      	str	r3, [r7, #12]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	68fa      	ldr	r2, [r7, #12]
 800224e:	429a      	cmp	r2, r3
 8002250:	d3f1      	bcc.n	8002236 <fifoClear+0xe>
	}

	buf->tail = 0;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	605a      	str	r2, [r3, #4]
	buf->head = 1;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2201      	movs	r2, #1
 800225c:	609a      	str	r2, [r3, #8]

	return FIFO_CLEARED;
 800225e:	2304      	movs	r3, #4
}
 8002260:	4618      	mov	r0, r3
 8002262:	3714      	adds	r7, #20
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <cellsForRead>:

/** Число ячеек доступных для ЧТЕНИЯ (заполненное пространство)
 */
uint16_t cellsForRead(FIFO_StructDef* buf)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
	if (buf->head < buf->tail)  return buf->size - buf->tail + buf->head - 1;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	689a      	ldr	r2, [r3, #8]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	429a      	cmp	r2, r3
 800227e:	d20f      	bcs.n	80022a0 <cellsForRead+0x34>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	b29a      	uxth	r2, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	b29b      	uxth	r3, r3
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	b29a      	uxth	r2, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	b29b      	uxth	r3, r3
 8002296:	4413      	add	r3, r2
 8002298:	b29b      	uxth	r3, r3
 800229a:	3b01      	subs	r3, #1
 800229c:	b29b      	uxth	r3, r3
 800229e:	e009      	b.n	80022b4 <cellsForRead+0x48>
	else return buf->head - buf->tail - 1;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	b29a      	uxth	r2, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	3b01      	subs	r3, #1
 80022b2:	b29b      	uxth	r3, r3
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <availableForRead>:

/** Функция определения наличия доступных ячеек для ЧТЕНИЯ (заполненное пространство)
 */
fifo_state_t availableForRead(FIFO_StructDef* buf)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
	if (cellsForRead(buf) > 0) return FIFO_OK;
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f7ff ffcf 	bl	800226c <cellsForRead>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d001      	beq.n	80022d8 <availableForRead+0x18>
 80022d4:	2300      	movs	r3, #0
 80022d6:	e000      	b.n	80022da <availableForRead+0x1a>
	else return FIFO_EMPTY;
 80022d8:	2302      	movs	r3, #2
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3708      	adds	r7, #8
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}

080022e2 <cellsForWrite>:

/** Число ячеек доступных для ЗАПИСИ (доступное пространство)
 */
uint16_t cellsForWrite(FIFO_StructDef* buf)
{
 80022e2:	b590      	push	{r4, r7, lr}
 80022e4:	b083      	sub	sp, #12
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	6078      	str	r0, [r7, #4]
	return buf->size - cellsForRead(buf) - 2;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	68db      	ldr	r3, [r3, #12]
 80022ee:	b29c      	uxth	r4, r3
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f7ff ffbb 	bl	800226c <cellsForRead>
 80022f6:	4603      	mov	r3, r0
 80022f8:	1ae3      	subs	r3, r4, r3
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	3b02      	subs	r3, #2
 80022fe:	b29b      	uxth	r3, r3
}
 8002300:	4618      	mov	r0, r3
 8002302:	370c      	adds	r7, #12
 8002304:	46bd      	mov	sp, r7
 8002306:	bd90      	pop	{r4, r7, pc}

08002308 <availableForWrite>:

/** Функция определения наличия доступных ячеек для ЗАПИСИ (доступное пространство)
 */
fifo_state_t availableForWrite(FIFO_StructDef* buf)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
	if (cellsForWrite(buf) == 0) return FIFO_OVERFLOW;
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f7ff ffe6 	bl	80022e2 <cellsForWrite>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d101      	bne.n	8002320 <availableForWrite+0x18>
 800231c:	2303      	movs	r3, #3
 800231e:	e000      	b.n	8002322 <availableForWrite+0x1a>
	else return FIFO_OK;
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	3708      	adds	r7, #8
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}

0800232a <fifoWrite>:

/** Записать ячейку данных в буфер и переместить указатель "голова" на одну позицию
 */
fifo_state_t fifoWrite(FIFO_StructDef* buf, int8_t value)
{
 800232a:	b480      	push	{r7}
 800232c:	b083      	sub	sp, #12
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
 8002332:	460b      	mov	r3, r1
 8002334:	70fb      	strb	r3, [r7, #3]
	if (buf->head >= buf->size) buf->head = 0;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	689a      	ldr	r2, [r3, #8]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	429a      	cmp	r2, r3
 8002340:	d302      	bcc.n	8002348 <fifoWrite+0x1e>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	609a      	str	r2, [r3, #8]

	buf->data[buf->head] = value;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	4413      	add	r3, r2
 8002352:	78fa      	ldrb	r2, [r7, #3]
 8002354:	701a      	strb	r2, [r3, #0]
	buf->head++;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	1c5a      	adds	r2, r3, #1
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	609a      	str	r2, [r3, #8]

	return FIFO_OK;
 8002360:	2300      	movs	r3, #0
}
 8002362:	4618      	mov	r0, r3
 8002364:	370c      	adds	r7, #12
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr

0800236e <fifoRead>:
/** Прочитать ячейку данных из буфера и переместить указатель "хвост" на одну позицию
 * 	Функция принимает указатель на переменную, в которую записывается значение последней
 * 	ячейки fifo буфера
 */
fifo_state_t fifoRead(FIFO_StructDef* buf, int8_t* value)
{
 800236e:	b480      	push	{r7}
 8002370:	b083      	sub	sp, #12
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
 8002376:	6039      	str	r1, [r7, #0]
	if (value == NULL) return FIFO_ERR;
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d102      	bne.n	8002384 <fifoRead+0x16>
 800237e:	f04f 33ff 	mov.w	r3, #4294967295
 8002382:	e017      	b.n	80023b4 <fifoRead+0x46>

	buf->tail++;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	1c5a      	adds	r2, r3, #1
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	605a      	str	r2, [r3, #4]
	if (buf->tail >= buf->size) buf->tail = 0;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685a      	ldr	r2, [r3, #4]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	429a      	cmp	r2, r3
 8002398:	d302      	bcc.n	80023a0 <fifoRead+0x32>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	605a      	str	r2, [r3, #4]

	*value = buf->data[buf->tail];
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	4413      	add	r3, r2
 80023aa:	f993 2000 	ldrsb.w	r2, [r3]
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	701a      	strb	r2, [r3, #0]

	return FIFO_OK;
 80023b2:	2300      	movs	r3, #0
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <fifoInitChar>:
/** Функция инициализации fifo буфера
 * При инициализации передается указатель на
 * статический массив/структуру данных и его длина
 */
fifo_state_t fifoInitChar(FIFO_CHAR_StructDef* buf, char** data, uint32_t size)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b085      	sub	sp, #20
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	60f8      	str	r0, [r7, #12]
 80023c8:	60b9      	str	r1, [r7, #8]
 80023ca:	607a      	str	r2, [r7, #4]
	buf->size = size;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	60da      	str	r2, [r3, #12]
	buf->data = data;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	68ba      	ldr	r2, [r7, #8]
 80023d6:	601a      	str	r2, [r3, #0]

	buf->tail = 0;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2200      	movs	r2, #0
 80023dc:	605a      	str	r2, [r3, #4]
	buf->head = 1;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2201      	movs	r2, #1
 80023e2:	609a      	str	r2, [r3, #8]

	if (buf->data == NULL) return FIFO_ERR;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d102      	bne.n	80023f2 <fifoInitChar+0x32>
 80023ec:	f04f 33ff 	mov.w	r3, #4294967295
 80023f0:	e000      	b.n	80023f4 <fifoInitChar+0x34>

	return FIFO_INIT;
 80023f2:	2301      	movs	r3, #1
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3714      	adds	r7, #20
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <cellsForReadChar>:
}

/** Число ячеек доступных для ЧТЕНИЯ (заполненное пространство)
 */
uint16_t cellsForReadChar(FIFO_CHAR_StructDef* buf)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
	if (buf->head < buf->tail)  return buf->size - buf->tail + buf->head - 1;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	689a      	ldr	r2, [r3, #8]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	429a      	cmp	r2, r3
 8002412:	d20f      	bcs.n	8002434 <cellsForReadChar+0x34>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	b29a      	uxth	r2, r3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	b29b      	uxth	r3, r3
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	b29a      	uxth	r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	b29b      	uxth	r3, r3
 800242a:	4413      	add	r3, r2
 800242c:	b29b      	uxth	r3, r3
 800242e:	3b01      	subs	r3, #1
 8002430:	b29b      	uxth	r3, r3
 8002432:	e009      	b.n	8002448 <cellsForReadChar+0x48>
	else return buf->head - buf->tail - 1;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	b29a      	uxth	r2, r3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	b29b      	uxth	r3, r3
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	b29b      	uxth	r3, r3
 8002444:	3b01      	subs	r3, #1
 8002446:	b29b      	uxth	r3, r3
}
 8002448:	4618      	mov	r0, r3
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <availableForReadChar>:

/** Функция определения наличия доступных ячеек для ЧТЕНИЯ (заполненное пространство)
 */
fifo_state_t availableForReadChar(FIFO_CHAR_StructDef* buf)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
	if (cellsForReadChar(buf) > 0) return FIFO_OK;
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f7ff ffcf 	bl	8002400 <cellsForReadChar>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d001      	beq.n	800246c <availableForReadChar+0x18>
 8002468:	2300      	movs	r3, #0
 800246a:	e000      	b.n	800246e <availableForReadChar+0x1a>
	else return FIFO_EMPTY;
 800246c:	2302      	movs	r3, #2
}
 800246e:	4618      	mov	r0, r3
 8002470:	3708      	adds	r7, #8
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <fifoReadChar>:
/** Прочитать ячейку данных из буфера и переместить указатель "хвост" на одну позицию
 * 	Функция принимает указатель на переменную, в которую записывается значение последней
 * 	ячейки fifo буфера
 */
fifo_state_t fifoReadChar(FIFO_CHAR_StructDef* buf, char* str)
{
 8002476:	b580      	push	{r7, lr}
 8002478:	b082      	sub	sp, #8
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
 800247e:	6039      	str	r1, [r7, #0]
	if (str == NULL) return FIFO_ERR;
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d102      	bne.n	800248c <fifoReadChar+0x16>
 8002486:	f04f 33ff 	mov.w	r3, #4294967295
 800248a:	e019      	b.n	80024c0 <fifoReadChar+0x4a>

	buf->tail++;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	1c5a      	adds	r2, r3, #1
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	605a      	str	r2, [r3, #4]
	if (buf->tail >= buf->size) buf->tail = 0;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685a      	ldr	r2, [r3, #4]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	429a      	cmp	r2, r3
 80024a0:	d302      	bcc.n	80024a8 <fifoReadChar+0x32>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	605a      	str	r2, [r3, #4]

	strcpy(str, buf->data[buf->tail]);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	4413      	add	r3, r2
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4619      	mov	r1, r3
 80024b8:	6838      	ldr	r0, [r7, #0]
 80024ba:	f015 fcd6 	bl	8017e6a <strcpy>

	return FIFO_OK;
 80024be:	2300      	movs	r3, #0
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3708      	adds	r7, #8
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <handlerGcodeInit>:
extern FIFO_StructDef fifoBufSteps;

/** Инициализация структуры обработчика g - команд
 */
void handlerGcodeInit(HANDLER_GCODE_StructDef* ghandler)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
	ghandler->interpolator = &interpolator;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	4a0b      	ldr	r2, [pc, #44]	@ (8002500 <handlerGcodeInit+0x38>)
 80024d4:	601a      	str	r2, [r3, #0]

	ghandler->_workState = HANDLER_GCODE_READY;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2202      	movs	r2, #2
 80024da:	711a      	strb	r2, [r3, #4]
	ghandler->_command = NONE;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	22ff      	movs	r2, #255	@ 0xff
 80024e0:	715a      	strb	r2, [r3, #5]

	/* Инициализация структуры интерполятора */
	interpolatorInit(ghandler->interpolator);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4618      	mov	r0, r3
 80024e8:	f000 fa14 	bl	8002914 <interpolatorInit>

	/* Инициализация FIFO буфера G - команд */
	fifoInitChar(&fifoGcodeBuf, GcodeBuffer, FIFO_GCODE_BUF_SIZE);
 80024ec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80024f0:	4904      	ldr	r1, [pc, #16]	@ (8002504 <handlerGcodeInit+0x3c>)
 80024f2:	4805      	ldr	r0, [pc, #20]	@ (8002508 <handlerGcodeInit+0x40>)
 80024f4:	f7ff ff64 	bl	80023c0 <fifoInitChar>
}
 80024f8:	bf00      	nop
 80024fa:	3708      	adds	r7, #8
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	20000ff0 	.word	0x20000ff0
 8002504:	20000bf0 	.word	0x20000bf0
 8002508:	20000ff4 	.word	0x20000ff4

0800250c <tickGcodeHandler>:
 * 	В теле тикера происходит анализ g - кода и расчет шагов интерполятором
 * 	В результате работы обработчика заполняется буфер шагов интерполятора, который
 * 	в дальнейшем библиотека planner.h использует для планирования скорости движения
 */
void tickGcodeHandler(HANDLER_GCODE_StructDef* ghandler)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
	if(availableForReadChar(&fifoGcodeBuf) == FIFO_OK)
 8002514:	4807      	ldr	r0, [pc, #28]	@ (8002534 <tickGcodeHandler+0x28>)
 8002516:	f7ff ff9d 	bl	8002454 <availableForReadChar>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d102      	bne.n	8002526 <tickGcodeHandler+0x1a>
	{
		handlerGcode(ghandler);
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f000 f809 	bl	8002538 <handlerGcode>
	}

	handlerGcommand(ghandler);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f000 f978 	bl	800281c <handlerGcommand>
}
 800252c:	bf00      	nop
 800252e:	3708      	adds	r7, #8
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}
 8002534:	20000ff4 	.word	0x20000ff4

08002538 <handlerGcode>:
/** Обработчик g - команд, на вход поступает строка (в будущем будет бинарное представление команды)
 * 	На выходе передается статус, что G команда обработана, и выставлен статус обработчика - номер g - команды,
 * 	по которой необходимо считать шаги
 */
void handlerGcode(HANDLER_GCODE_StructDef* ghandler)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b0a2      	sub	sp, #136	@ 0x88
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
	if(ghandler->_workState == HANDLER_GCODE_READY)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8002546:	2b02      	cmp	r3, #2
 8002548:	f040 814a 	bne.w	80027e0 <handlerGcode+0x2a8>
	{
		char str[128] = {0};
 800254c:	f107 0308 	add.w	r3, r7, #8
 8002550:	2280      	movs	r2, #128	@ 0x80
 8002552:	2100      	movs	r1, #0
 8002554:	4618      	mov	r0, r3
 8002556:	f015 fbda 	bl	8017d0e <memset>

		fifoReadChar(&fifoGcodeBuf, str);
 800255a:	f107 0308 	add.w	r3, r7, #8
 800255e:	4619      	mov	r1, r3
 8002560:	48a3      	ldr	r0, [pc, #652]	@ (80027f0 <handlerGcode+0x2b8>)
 8002562:	f7ff ff88 	bl	8002476 <fifoReadChar>

		if (str[0] == 'G')
 8002566:	7a3b      	ldrb	r3, [r7, #8]
 8002568:	2b47      	cmp	r3, #71	@ 0x47
 800256a:	f040 8135 	bne.w	80027d8 <handlerGcode+0x2a0>
		{
			/* Конечные координаты участка траектории в соответствии с g - командой (мм) */
			Xk = atof(strchr(str, 'X') + 1);
 800256e:	f107 0308 	add.w	r3, r7, #8
 8002572:	2158      	movs	r1, #88	@ 0x58
 8002574:	4618      	mov	r0, r3
 8002576:	f015 fbd2 	bl	8017d1e <strchr>
 800257a:	4603      	mov	r3, r0
 800257c:	3301      	adds	r3, #1
 800257e:	4618      	mov	r0, r3
 8002580:	f014 fb86 	bl	8016c90 <atof>
 8002584:	eeb0 7a40 	vmov.f32	s14, s0
 8002588:	eef0 7a60 	vmov.f32	s15, s1
 800258c:	4b99      	ldr	r3, [pc, #612]	@ (80027f4 <handlerGcode+0x2bc>)
 800258e:	ed83 7b00 	vstr	d7, [r3]
			Yk = atof(strchr(str, 'Y') + 1);
 8002592:	f107 0308 	add.w	r3, r7, #8
 8002596:	2159      	movs	r1, #89	@ 0x59
 8002598:	4618      	mov	r0, r3
 800259a:	f015 fbc0 	bl	8017d1e <strchr>
 800259e:	4603      	mov	r3, r0
 80025a0:	3301      	adds	r3, #1
 80025a2:	4618      	mov	r0, r3
 80025a4:	f014 fb74 	bl	8016c90 <atof>
 80025a8:	eeb0 7a40 	vmov.f32	s14, s0
 80025ac:	eef0 7a60 	vmov.f32	s15, s1
 80025b0:	4b91      	ldr	r3, [pc, #580]	@ (80027f8 <handlerGcode+0x2c0>)
 80025b2:	ed83 7b00 	vstr	d7, [r3]

			if (str[2] == '0')
 80025b6:	7abb      	ldrb	r3, [r7, #10]
 80025b8:	2b30      	cmp	r3, #48	@ 0x30
 80025ba:	d14c      	bne.n	8002656 <handlerGcode+0x11e>
			{
				x = round(Xk / MM_PER_STEP); y = round(Yk / MM_PER_STEP);
 80025bc:	4b8d      	ldr	r3, [pc, #564]	@ (80027f4 <handlerGcode+0x2bc>)
 80025be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025c2:	a389      	add	r3, pc, #548	@ (adr r3, 80027e8 <handlerGcode+0x2b0>)
 80025c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025c8:	f7fe f950 	bl	800086c <__aeabi_ddiv>
 80025cc:	4602      	mov	r2, r0
 80025ce:	460b      	mov	r3, r1
 80025d0:	ec43 2b17 	vmov	d7, r2, r3
 80025d4:	eeb0 0a47 	vmov.f32	s0, s14
 80025d8:	eef0 0a67 	vmov.f32	s1, s15
 80025dc:	f017 ff18 	bl	801a410 <round>
 80025e0:	ec53 2b10 	vmov	r2, r3, d0
 80025e4:	4610      	mov	r0, r2
 80025e6:	4619      	mov	r1, r3
 80025e8:	f7fe fc84 	bl	8000ef4 <__aeabi_d2lz>
 80025ec:	4602      	mov	r2, r0
 80025ee:	460b      	mov	r3, r1
 80025f0:	4982      	ldr	r1, [pc, #520]	@ (80027fc <handlerGcode+0x2c4>)
 80025f2:	e9c1 2300 	strd	r2, r3, [r1]
 80025f6:	4b80      	ldr	r3, [pc, #512]	@ (80027f8 <handlerGcode+0x2c0>)
 80025f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025fc:	a37a      	add	r3, pc, #488	@ (adr r3, 80027e8 <handlerGcode+0x2b0>)
 80025fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002602:	f7fe f933 	bl	800086c <__aeabi_ddiv>
 8002606:	4602      	mov	r2, r0
 8002608:	460b      	mov	r3, r1
 800260a:	ec43 2b17 	vmov	d7, r2, r3
 800260e:	eeb0 0a47 	vmov.f32	s0, s14
 8002612:	eef0 0a67 	vmov.f32	s1, s15
 8002616:	f017 fefb 	bl	801a410 <round>
 800261a:	ec53 2b10 	vmov	r2, r3, d0
 800261e:	4610      	mov	r0, r2
 8002620:	4619      	mov	r1, r3
 8002622:	f7fe fc67 	bl	8000ef4 <__aeabi_d2lz>
 8002626:	4602      	mov	r2, r0
 8002628:	460b      	mov	r3, r1
 800262a:	4975      	ldr	r1, [pc, #468]	@ (8002800 <handlerGcode+0x2c8>)
 800262c:	e9c1 2300 	strd	r2, r3, [r1]
				X = Xk; Y = Yk;
 8002630:	4b70      	ldr	r3, [pc, #448]	@ (80027f4 <handlerGcode+0x2bc>)
 8002632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002636:	4973      	ldr	r1, [pc, #460]	@ (8002804 <handlerGcode+0x2cc>)
 8002638:	e9c1 2300 	strd	r2, r3, [r1]
 800263c:	4b6e      	ldr	r3, [pc, #440]	@ (80027f8 <handlerGcode+0x2c0>)
 800263e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002642:	4971      	ldr	r1, [pc, #452]	@ (8002808 <handlerGcode+0x2d0>)
 8002644:	e9c1 2300 	strd	r2, r3, [r1]

				ghandler->_command = G00;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	715a      	strb	r2, [r3, #5]

				ghandler->_workState = HANDLER_GCODE_DONE;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2201      	movs	r2, #1
 8002652:	711a      	strb	r2, [r3, #4]
				return ;
 8002654:	e0c5      	b.n	80027e2 <handlerGcode+0x2aa>
			}

			if (str[2] == '1')
 8002656:	7abb      	ldrb	r3, [r7, #10]
 8002658:	2b31      	cmp	r3, #49	@ 0x31
 800265a:	d11a      	bne.n	8002692 <handlerGcode+0x15a>
			{
				/* Инициализация и расчет параметров отрезка */
				if (setLine(&line, Xk, Yk) == INTERPOLATOR_DONE)
 800265c:	4b65      	ldr	r3, [pc, #404]	@ (80027f4 <handlerGcode+0x2bc>)
 800265e:	ed93 7b00 	vldr	d7, [r3]
 8002662:	4b65      	ldr	r3, [pc, #404]	@ (80027f8 <handlerGcode+0x2c0>)
 8002664:	ed93 6b00 	vldr	d6, [r3]
 8002668:	eeb0 1a46 	vmov.f32	s2, s12
 800266c:	eef0 1a66 	vmov.f32	s3, s13
 8002670:	eeb0 0a47 	vmov.f32	s0, s14
 8002674:	eef0 0a67 	vmov.f32	s1, s15
 8002678:	4864      	ldr	r0, [pc, #400]	@ (800280c <handlerGcode+0x2d4>)
 800267a:	f000 f961 	bl	8002940 <setLine>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d106      	bne.n	8002692 <handlerGcode+0x15a>
				{
					ghandler->_command = G01;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2201      	movs	r2, #1
 8002688:	715a      	strb	r2, [r3, #5]

					ghandler->_workState = HANDLER_GCODE_DONE;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2201      	movs	r2, #1
 800268e:	711a      	strb	r2, [r3, #4]
					return ;
 8002690:	e0a7      	b.n	80027e2 <handlerGcode+0x2aa>
				}
			}

			if (str[2] == '2')
 8002692:	7abb      	ldrb	r3, [r7, #10]
 8002694:	2b32      	cmp	r3, #50	@ 0x32
 8002696:	d14d      	bne.n	8002734 <handlerGcode+0x1fc>
			{
				/* Относительные координаты центра дуги (мм) */
				I = atof(strchr(str, 'I') + 1);
 8002698:	f107 0308 	add.w	r3, r7, #8
 800269c:	2149      	movs	r1, #73	@ 0x49
 800269e:	4618      	mov	r0, r3
 80026a0:	f015 fb3d 	bl	8017d1e <strchr>
 80026a4:	4603      	mov	r3, r0
 80026a6:	3301      	adds	r3, #1
 80026a8:	4618      	mov	r0, r3
 80026aa:	f014 faf1 	bl	8016c90 <atof>
 80026ae:	eeb0 7a40 	vmov.f32	s14, s0
 80026b2:	eef0 7a60 	vmov.f32	s15, s1
 80026b6:	4b56      	ldr	r3, [pc, #344]	@ (8002810 <handlerGcode+0x2d8>)
 80026b8:	ed83 7b00 	vstr	d7, [r3]
				J = atof(strchr(str, 'J') + 1);
 80026bc:	f107 0308 	add.w	r3, r7, #8
 80026c0:	214a      	movs	r1, #74	@ 0x4a
 80026c2:	4618      	mov	r0, r3
 80026c4:	f015 fb2b 	bl	8017d1e <strchr>
 80026c8:	4603      	mov	r3, r0
 80026ca:	3301      	adds	r3, #1
 80026cc:	4618      	mov	r0, r3
 80026ce:	f014 fadf 	bl	8016c90 <atof>
 80026d2:	eeb0 7a40 	vmov.f32	s14, s0
 80026d6:	eef0 7a60 	vmov.f32	s15, s1
 80026da:	4b4e      	ldr	r3, [pc, #312]	@ (8002814 <handlerGcode+0x2dc>)
 80026dc:	ed83 7b00 	vstr	d7, [r3]

				/* Инициализация и расчет параметров дуги G02 */
				if (setArc(&arc, Xk, Yk, I, J, 1) == INTERPOLATOR_DONE)
 80026e0:	4b44      	ldr	r3, [pc, #272]	@ (80027f4 <handlerGcode+0x2bc>)
 80026e2:	ed93 7b00 	vldr	d7, [r3]
 80026e6:	4b44      	ldr	r3, [pc, #272]	@ (80027f8 <handlerGcode+0x2c0>)
 80026e8:	ed93 6b00 	vldr	d6, [r3]
 80026ec:	4b48      	ldr	r3, [pc, #288]	@ (8002810 <handlerGcode+0x2d8>)
 80026ee:	ed93 5b00 	vldr	d5, [r3]
 80026f2:	4b48      	ldr	r3, [pc, #288]	@ (8002814 <handlerGcode+0x2dc>)
 80026f4:	ed93 4b00 	vldr	d4, [r3]
 80026f8:	2101      	movs	r1, #1
 80026fa:	eeb0 3a44 	vmov.f32	s6, s8
 80026fe:	eef0 3a64 	vmov.f32	s7, s9
 8002702:	eeb0 2a45 	vmov.f32	s4, s10
 8002706:	eef0 2a65 	vmov.f32	s5, s11
 800270a:	eeb0 1a46 	vmov.f32	s2, s12
 800270e:	eef0 1a66 	vmov.f32	s3, s13
 8002712:	eeb0 0a47 	vmov.f32	s0, s14
 8002716:	eef0 0a67 	vmov.f32	s1, s15
 800271a:	483f      	ldr	r0, [pc, #252]	@ (8002818 <handlerGcode+0x2e0>)
 800271c:	f000 fab4 	bl	8002c88 <setArc>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d106      	bne.n	8002734 <handlerGcode+0x1fc>
				{
					ghandler->_command = G02;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2202      	movs	r2, #2
 800272a:	715a      	strb	r2, [r3, #5]

					ghandler->_workState = HANDLER_GCODE_DONE;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2201      	movs	r2, #1
 8002730:	711a      	strb	r2, [r3, #4]
					return ;
 8002732:	e056      	b.n	80027e2 <handlerGcode+0x2aa>
				}
			}

			if (str[2] == '3')
 8002734:	7abb      	ldrb	r3, [r7, #10]
 8002736:	2b33      	cmp	r3, #51	@ 0x33
 8002738:	d152      	bne.n	80027e0 <handlerGcode+0x2a8>
			{
				/* Относительные координаты центра дуги (мм) */
				I = atof(strchr(str, 'I') + 1);
 800273a:	f107 0308 	add.w	r3, r7, #8
 800273e:	2149      	movs	r1, #73	@ 0x49
 8002740:	4618      	mov	r0, r3
 8002742:	f015 faec 	bl	8017d1e <strchr>
 8002746:	4603      	mov	r3, r0
 8002748:	3301      	adds	r3, #1
 800274a:	4618      	mov	r0, r3
 800274c:	f014 faa0 	bl	8016c90 <atof>
 8002750:	eeb0 7a40 	vmov.f32	s14, s0
 8002754:	eef0 7a60 	vmov.f32	s15, s1
 8002758:	4b2d      	ldr	r3, [pc, #180]	@ (8002810 <handlerGcode+0x2d8>)
 800275a:	ed83 7b00 	vstr	d7, [r3]
				J = atof(strchr(str, 'J') + 1);
 800275e:	f107 0308 	add.w	r3, r7, #8
 8002762:	214a      	movs	r1, #74	@ 0x4a
 8002764:	4618      	mov	r0, r3
 8002766:	f015 fada 	bl	8017d1e <strchr>
 800276a:	4603      	mov	r3, r0
 800276c:	3301      	adds	r3, #1
 800276e:	4618      	mov	r0, r3
 8002770:	f014 fa8e 	bl	8016c90 <atof>
 8002774:	eeb0 7a40 	vmov.f32	s14, s0
 8002778:	eef0 7a60 	vmov.f32	s15, s1
 800277c:	4b25      	ldr	r3, [pc, #148]	@ (8002814 <handlerGcode+0x2dc>)
 800277e:	ed83 7b00 	vstr	d7, [r3]

				/* Инициализация и расчет параметров дуги G03 */
				if (setArc(&arc, Xk, Yk, I, J, -1) == INTERPOLATOR_DONE)
 8002782:	4b1c      	ldr	r3, [pc, #112]	@ (80027f4 <handlerGcode+0x2bc>)
 8002784:	ed93 7b00 	vldr	d7, [r3]
 8002788:	4b1b      	ldr	r3, [pc, #108]	@ (80027f8 <handlerGcode+0x2c0>)
 800278a:	ed93 6b00 	vldr	d6, [r3]
 800278e:	4b20      	ldr	r3, [pc, #128]	@ (8002810 <handlerGcode+0x2d8>)
 8002790:	ed93 5b00 	vldr	d5, [r3]
 8002794:	4b1f      	ldr	r3, [pc, #124]	@ (8002814 <handlerGcode+0x2dc>)
 8002796:	ed93 4b00 	vldr	d4, [r3]
 800279a:	f04f 31ff 	mov.w	r1, #4294967295
 800279e:	eeb0 3a44 	vmov.f32	s6, s8
 80027a2:	eef0 3a64 	vmov.f32	s7, s9
 80027a6:	eeb0 2a45 	vmov.f32	s4, s10
 80027aa:	eef0 2a65 	vmov.f32	s5, s11
 80027ae:	eeb0 1a46 	vmov.f32	s2, s12
 80027b2:	eef0 1a66 	vmov.f32	s3, s13
 80027b6:	eeb0 0a47 	vmov.f32	s0, s14
 80027ba:	eef0 0a67 	vmov.f32	s1, s15
 80027be:	4816      	ldr	r0, [pc, #88]	@ (8002818 <handlerGcode+0x2e0>)
 80027c0:	f000 fa62 	bl	8002c88 <setArc>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d10a      	bne.n	80027e0 <handlerGcode+0x2a8>
				{
					ghandler->_command = G03;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2203      	movs	r2, #3
 80027ce:	715a      	strb	r2, [r3, #5]

					ghandler->_workState = HANDLER_GCODE_DONE;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2201      	movs	r2, #1
 80027d4:	711a      	strb	r2, [r3, #4]
					return ;
 80027d6:	e004      	b.n	80027e2 <handlerGcode+0x2aa>
				}
			}
		}
		else
		{
			ghandler->_workState = HANDLER_GCODE_READY;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2202      	movs	r2, #2
 80027dc:	711a      	strb	r2, [r3, #4]
			return ;
 80027de:	e000      	b.n	80027e2 <handlerGcode+0x2aa>
		}
	}

	return ;
 80027e0:	bf00      	nop
}
 80027e2:	3788      	adds	r7, #136	@ 0x88
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	a0000000 	.word	0xa0000000
 80027ec:	3f799999 	.word	0x3f799999
 80027f0:	20000ff4 	.word	0x20000ff4
 80027f4:	20000b18 	.word	0x20000b18
 80027f8:	20000b20 	.word	0x20000b20
 80027fc:	20001008 	.word	0x20001008
 8002800:	20001010 	.word	0x20001010
 8002804:	20001018 	.word	0x20001018
 8002808:	20001020 	.word	0x20001020
 800280c:	20000b38 	.word	0x20000b38
 8002810:	20000b28 	.word	0x20000b28
 8002814:	20000b30 	.word	0x20000b30
 8002818:	20000b98 	.word	0x20000b98

0800281c <handlerGcommand>:

/** Расчетный обработчик конкретной g - команды
 */
void handlerGcommand(HANDLER_GCODE_StructDef* ghandler)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af02      	add	r7, sp, #8
 8002822:	6078      	str	r0, [r7, #4]
	if(ghandler->_workState == HANDLER_GCODE_DONE)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800282a:	2b01      	cmp	r3, #1
 800282c:	d14c      	bne.n	80028c8 <handlerGcommand+0xac>
	{

		switch(ghandler->_command)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8002834:	3301      	adds	r3, #1
 8002836:	2b04      	cmp	r3, #4
 8002838:	d846      	bhi.n	80028c8 <handlerGcommand+0xac>
 800283a:	a201      	add	r2, pc, #4	@ (adr r2, 8002840 <handlerGcommand+0x24>)
 800283c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002840:	08002855 	.word	0x08002855
 8002844:	0800285d 	.word	0x0800285d
 8002848:	08002865 	.word	0x08002865
 800284c:	08002883 	.word	0x08002883
 8002850:	080028a1 	.word	0x080028a1
		{
			case NONE:
			{
				ghandler->_workState = HANDLER_GCODE_READY;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2202      	movs	r2, #2
 8002858:	711a      	strb	r2, [r3, #4]
				return ;
 800285a:	e036      	b.n	80028ca <handlerGcommand+0xae>
			}

			/* Расчет команды G00 */
			case G00:
			{
				ghandler->_workState = HANDLER_GCODE_READY;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2202      	movs	r2, #2
 8002860:	711a      	strb	r2, [r3, #4]
				return;
 8002862:	e032      	b.n	80028ca <handlerGcommand+0xae>
			}

			/* Расчет команды G01 */
			case G01:
			{
				if(handlerLine(&interpolator, &fifoBufSteps, &line, 0, 1) == INTERPOLATOR_DONE)
 8002864:	2301      	movs	r3, #1
 8002866:	9300      	str	r3, [sp, #0]
 8002868:	2300      	movs	r3, #0
 800286a:	4a19      	ldr	r2, [pc, #100]	@ (80028d0 <handlerGcommand+0xb4>)
 800286c:	4919      	ldr	r1, [pc, #100]	@ (80028d4 <handlerGcommand+0xb8>)
 800286e:	481a      	ldr	r0, [pc, #104]	@ (80028d8 <handlerGcommand+0xbc>)
 8002870:	f000 fc02 	bl	8003078 <handlerLine>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d121      	bne.n	80028be <handlerGcommand+0xa2>
				{
					ghandler->_workState = HANDLER_GCODE_READY;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2202      	movs	r2, #2
 800287e:	711a      	strb	r2, [r3, #4]
				}
				break;
 8002880:	e01d      	b.n	80028be <handlerGcommand+0xa2>
			}

			/* Расчет команды G02 */
			case G02:
			{
				if(handlerArc(&interpolator, &fifoBufSteps, &arc, 0, 1) == INTERPOLATOR_DONE)
 8002882:	2301      	movs	r3, #1
 8002884:	9300      	str	r3, [sp, #0]
 8002886:	2300      	movs	r3, #0
 8002888:	4a14      	ldr	r2, [pc, #80]	@ (80028dc <handlerGcommand+0xc0>)
 800288a:	4912      	ldr	r1, [pc, #72]	@ (80028d4 <handlerGcommand+0xb8>)
 800288c:	4812      	ldr	r0, [pc, #72]	@ (80028d8 <handlerGcommand+0xbc>)
 800288e:	f000 fdd7 	bl	8003440 <handlerArc>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d114      	bne.n	80028c2 <handlerGcommand+0xa6>
				{
					ghandler->_workState = HANDLER_GCODE_READY;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2202      	movs	r2, #2
 800289c:	711a      	strb	r2, [r3, #4]
				}
				break;
 800289e:	e010      	b.n	80028c2 <handlerGcommand+0xa6>
			}

			/* Расчет команды G03 */
			case G03:
			{
				if(handlerArc(&interpolator, &fifoBufSteps, &arc, 0, 1) == INTERPOLATOR_DONE)
 80028a0:	2301      	movs	r3, #1
 80028a2:	9300      	str	r3, [sp, #0]
 80028a4:	2300      	movs	r3, #0
 80028a6:	4a0d      	ldr	r2, [pc, #52]	@ (80028dc <handlerGcommand+0xc0>)
 80028a8:	490a      	ldr	r1, [pc, #40]	@ (80028d4 <handlerGcommand+0xb8>)
 80028aa:	480b      	ldr	r0, [pc, #44]	@ (80028d8 <handlerGcommand+0xbc>)
 80028ac:	f000 fdc8 	bl	8003440 <handlerArc>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d107      	bne.n	80028c6 <handlerGcommand+0xaa>
				{
					ghandler->_workState = HANDLER_GCODE_READY;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2202      	movs	r2, #2
 80028ba:	711a      	strb	r2, [r3, #4]
				}
				break;
 80028bc:	e003      	b.n	80028c6 <handlerGcommand+0xaa>
				break;
 80028be:	bf00      	nop
 80028c0:	e002      	b.n	80028c8 <handlerGcommand+0xac>
				break;
 80028c2:	bf00      	nop
 80028c4:	e000      	b.n	80028c8 <handlerGcommand+0xac>
				break;
 80028c6:	bf00      	nop
			}
		}
	}

	return;
 80028c8:	bf00      	nop
}
 80028ca:	3708      	adds	r7, #8
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	20000b38 	.word	0x20000b38
 80028d4:	2000d828 	.word	0x2000d828
 80028d8:	20000ff0 	.word	0x20000ff0
 80028dc:	20000b98 	.word	0x20000b98

080028e0 <handlerEndState>:

/**	Обработчик статуса завершения исполнения программы движения
 * 	отслеживает статуc структуры ghandler
 */
void handlerEndState(HANDLER_GCODE_StructDef* ghandler)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
	if (ghandler->_workState == HANDLER_GCODE_READY)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d109      	bne.n	8002906 <handlerEndState+0x26>
	{
		if (ghandler->interpolator->_workState == INTERPOLATOR_READY) ghandler->_workState = HANDLER_GCODE_END;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f993 3000 	ldrsb.w	r3, [r3]
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d103      	bne.n	8002906 <handlerEndState+0x26>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	711a      	strb	r2, [r3, #4]
	}

	return;
 8002904:	bf00      	nop
 8002906:	bf00      	nop
}
 8002908:	370c      	adds	r7, #12
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
	...

08002914 <interpolatorInit>:
FIFO_StructDef fifoBufSteps;

/** Инициализация структура интерполятора
 */
void interpolatorInit(INTERPOLATOR_StructDef* interpolator)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
	interpolator->_workState = INTERPOLATOR_READY;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	701a      	strb	r2, [r3, #0]

	fifoInit(&fifoBufSteps, bufSteps, FIFO_STEPS_SIZE);
 8002922:	f44f 4248 	mov.w	r2, #51200	@ 0xc800
 8002926:	4904      	ldr	r1, [pc, #16]	@ (8002938 <interpolatorInit+0x24>)
 8002928:	4804      	ldr	r0, [pc, #16]	@ (800293c <interpolatorInit+0x28>)
 800292a:	f7ff fc5d 	bl	80021e8 <fifoInit>
}
 800292e:	bf00      	nop
 8002930:	3708      	adds	r7, #8
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	20001028 	.word	0x20001028
 800293c:	2000d828 	.word	0x2000d828

08002940 <setLine>:

/** Функция определения параметров отрезка
 */
handler_interpolator_state_t setLine(LINE_StructDef* line, double Xk, double Yk)
{
 8002940:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002944:	b088      	sub	sp, #32
 8002946:	af00      	add	r7, sp, #0
 8002948:	61f8      	str	r0, [r7, #28]
 800294a:	ed87 0b04 	vstr	d0, [r7, #16]
 800294e:	ed87 1b02 	vstr	d1, [r7, #8]
    /* Координаты отрезка в абсолютных координатах (мм) */
    line->X0 = X;
 8002952:	4b95      	ldr	r3, [pc, #596]	@ (8002ba8 <setLine+0x268>)
 8002954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002958:	69f9      	ldr	r1, [r7, #28]
 800295a:	e9c1 2300 	strd	r2, r3, [r1]
    line->Y0 = Y;
 800295e:	4b93      	ldr	r3, [pc, #588]	@ (8002bac <setLine+0x26c>)
 8002960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002964:	69f9      	ldr	r1, [r7, #28]
 8002966:	e9c1 2302 	strd	r2, r3, [r1, #8]
    line->Xk = Xk;
 800296a:	69f9      	ldr	r1, [r7, #28]
 800296c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002970:	e9c1 2304 	strd	r2, r3, [r1, #16]
    line->Yk = Yk;
 8002974:	69f9      	ldr	r1, [r7, #28]
 8002976:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800297a:	e9c1 2306 	strd	r2, r3, [r1, #24]

    /* Проверка существования прямой */
    if(fabs(X - Xk) <= MM_PER_STEP && fabs(Y - Yk) <= MM_PER_STEP) return INTERPOLATOR_ERROR;
 800297e:	4b8a      	ldr	r3, [pc, #552]	@ (8002ba8 <setLine+0x268>)
 8002980:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002984:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002988:	f7fd fc8e 	bl	80002a8 <__aeabi_dsub>
 800298c:	4602      	mov	r2, r0
 800298e:	460b      	mov	r3, r1
 8002990:	603a      	str	r2, [r7, #0]
 8002992:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002996:	607b      	str	r3, [r7, #4]
 8002998:	a381      	add	r3, pc, #516	@ (adr r3, 8002ba0 <setLine+0x260>)
 800299a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800299e:	e9d7 0100 	ldrd	r0, r1, [r7]
 80029a2:	f7fe f8b5 	bl	8000b10 <__aeabi_dcmple>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d018      	beq.n	80029de <setLine+0x9e>
 80029ac:	4b7f      	ldr	r3, [pc, #508]	@ (8002bac <setLine+0x26c>)
 80029ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80029b2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80029b6:	f7fd fc77 	bl	80002a8 <__aeabi_dsub>
 80029ba:	4602      	mov	r2, r0
 80029bc:	460b      	mov	r3, r1
 80029be:	4692      	mov	sl, r2
 80029c0:	f023 4b00 	bic.w	fp, r3, #2147483648	@ 0x80000000
 80029c4:	a376      	add	r3, pc, #472	@ (adr r3, 8002ba0 <setLine+0x260>)
 80029c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ca:	4650      	mov	r0, sl
 80029cc:	4659      	mov	r1, fp
 80029ce:	f7fe f89f 	bl	8000b10 <__aeabi_dcmple>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d002      	beq.n	80029de <setLine+0x9e>
 80029d8:	f04f 33ff 	mov.w	r3, #4294967295
 80029dc:	e144      	b.n	8002c68 <setLine+0x328>

    /* Определение смещения по осям */
    line->dX = line->Xk - line->X0;
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ea:	f7fd fc5d 	bl	80002a8 <__aeabi_dsub>
 80029ee:	4602      	mov	r2, r0
 80029f0:	460b      	mov	r3, r1
 80029f2:	69f9      	ldr	r1, [r7, #28]
 80029f4:	e9c1 2308 	strd	r2, r3, [r1, #32]
    line->dY = line->Yk - line->Y0;
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002a04:	f7fd fc50 	bl	80002a8 <__aeabi_dsub>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	460b      	mov	r3, r1
 8002a0c:	69f9      	ldr	r1, [r7, #28]
 8002a0e:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28

    /* Определение координат станка в относительной СК начала отрезка (мм) */
    line->x_rel = x * MM_PER_STEP - line->X0;
 8002a12:	4b67      	ldr	r3, [pc, #412]	@ (8002bb0 <setLine+0x270>)
 8002a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a18:	4610      	mov	r0, r2
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	f7fe fa14 	bl	8000e48 <__aeabi_l2f>
 8002a20:	ee07 0a10 	vmov	s14, r0
 8002a24:	eddf 7a63 	vldr	s15, [pc, #396]	@ 8002bb4 <setLine+0x274>
 8002a28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a2c:	ee17 0a90 	vmov	r0, s15
 8002a30:	f7fd fd9a 	bl	8000568 <__aeabi_f2d>
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a3a:	f7fd fc35 	bl	80002a8 <__aeabi_dsub>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	460b      	mov	r3, r1
 8002a42:	69f9      	ldr	r1, [r7, #28]
 8002a44:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    line->y_rel = y * MM_PER_STEP - line->Y0;
 8002a48:	4b5b      	ldr	r3, [pc, #364]	@ (8002bb8 <setLine+0x278>)
 8002a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a4e:	4610      	mov	r0, r2
 8002a50:	4619      	mov	r1, r3
 8002a52:	f7fe f9f9 	bl	8000e48 <__aeabi_l2f>
 8002a56:	ee07 0a10 	vmov	s14, r0
 8002a5a:	eddf 7a56 	vldr	s15, [pc, #344]	@ 8002bb4 <setLine+0x274>
 8002a5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a62:	ee17 0a90 	vmov	r0, s15
 8002a66:	f7fd fd7f 	bl	8000568 <__aeabi_f2d>
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002a70:	f7fd fc1a 	bl	80002a8 <__aeabi_dsub>
 8002a74:	4602      	mov	r2, r0
 8002a76:	460b      	mov	r3, r1
 8002a78:	69f9      	ldr	r1, [r7, #28]
 8002a7a:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38

    /* Начальное значения оценочной функции */
    line->F = line->dX * line->y_rel - line->dY * line->x_rel;
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8002a8a:	f7fd fdc5 	bl	8000618 <__aeabi_dmul>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	460b      	mov	r3, r1
 8002a92:	4692      	mov	sl, r2
 8002a94:	469b      	mov	fp, r3
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8002aa2:	f7fd fdb9 	bl	8000618 <__aeabi_dmul>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	460b      	mov	r3, r1
 8002aaa:	4650      	mov	r0, sl
 8002aac:	4659      	mov	r1, fp
 8002aae:	f7fd fbfb 	bl	80002a8 <__aeabi_dsub>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	460b      	mov	r3, r1
 8002ab6:	69f9      	ldr	r1, [r7, #28]
 8002ab8:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    /* Определение четверти, в которой расположен отрезок */
    if (line->dX >= 0 && line->dY > 0) { line->dx = 1; line->dy = 1; line->s = 1; }             	//< 1 четверть
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8002ac2:	f04f 0200 	mov.w	r2, #0
 8002ac6:	f04f 0300 	mov.w	r3, #0
 8002aca:	f7fe f82b 	bl	8000b24 <__aeabi_dcmpge>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d018      	beq.n	8002b06 <setLine+0x1c6>
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8002ada:	f04f 0200 	mov.w	r2, #0
 8002ade:	f04f 0300 	mov.w	r3, #0
 8002ae2:	f7fe f829 	bl	8000b38 <__aeabi_dcmpgt>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d00c      	beq.n	8002b06 <setLine+0x1c6>
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8002b04:	e07e      	b.n	8002c04 <setLine+0x2c4>
    else if (line->dY <= 0 && line->dX > 0) { line->dx = 1; line->dy = -1; line->s = -1; }       	//< 4 четверть
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8002b0c:	f04f 0200 	mov.w	r2, #0
 8002b10:	f04f 0300 	mov.w	r3, #0
 8002b14:	f7fd fffc 	bl	8000b10 <__aeabi_dcmple>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d018      	beq.n	8002b50 <setLine+0x210>
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8002b24:	f04f 0200 	mov.w	r2, #0
 8002b28:	f04f 0300 	mov.w	r3, #0
 8002b2c:	f7fe f804 	bl	8000b38 <__aeabi_dcmpgt>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d00c      	beq.n	8002b50 <setLine+0x210>
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	2201      	movs	r2, #1
 8002b3a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	22ff      	movs	r2, #255	@ 0xff
 8002b42:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	22ff      	movs	r2, #255	@ 0xff
 8002b4a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8002b4e:	e059      	b.n	8002c04 <setLine+0x2c4>
    else if (line->dX <= 0 && line->dY < 0) { line->dx = -1; line->dy = -1; line->s = 1; }      	//< 3 четверть
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8002b56:	f04f 0200 	mov.w	r2, #0
 8002b5a:	f04f 0300 	mov.w	r3, #0
 8002b5e:	f7fd ffd7 	bl	8000b10 <__aeabi_dcmple>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d029      	beq.n	8002bbc <setLine+0x27c>
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8002b6e:	f04f 0200 	mov.w	r2, #0
 8002b72:	f04f 0300 	mov.w	r3, #0
 8002b76:	f7fd ffc1 	bl	8000afc <__aeabi_dcmplt>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d01d      	beq.n	8002bbc <setLine+0x27c>
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	22ff      	movs	r2, #255	@ 0xff
 8002b84:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	22ff      	movs	r2, #255	@ 0xff
 8002b8c:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8002b98:	e034      	b.n	8002c04 <setLine+0x2c4>
 8002b9a:	bf00      	nop
 8002b9c:	f3af 8000 	nop.w
 8002ba0:	a0000000 	.word	0xa0000000
 8002ba4:	3f799999 	.word	0x3f799999
 8002ba8:	20001018 	.word	0x20001018
 8002bac:	20001020 	.word	0x20001020
 8002bb0:	20001008 	.word	0x20001008
 8002bb4:	3bcccccd 	.word	0x3bcccccd
 8002bb8:	20001010 	.word	0x20001010
    else if (line->dY >= 0 && line->dX < 0) { line->dx = -1; line->dy = 1; line->s = -1; }       	//< 2 четверть
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8002bc2:	f04f 0200 	mov.w	r2, #0
 8002bc6:	f04f 0300 	mov.w	r3, #0
 8002bca:	f7fd ffab 	bl	8000b24 <__aeabi_dcmpge>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d017      	beq.n	8002c04 <setLine+0x2c4>
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8002bda:	f04f 0200 	mov.w	r2, #0
 8002bde:	f04f 0300 	mov.w	r3, #0
 8002be2:	f7fd ff8b 	bl	8000afc <__aeabi_dcmplt>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d00b      	beq.n	8002c04 <setLine+0x2c4>
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	22ff      	movs	r2, #255	@ 0xff
 8002bf0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	22ff      	movs	r2, #255	@ 0xff
 8002c00:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Определение угла между отрезком и осью OX (радианы) */
    if (fabs(line->dX) <= MM_PER_STEP)
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002c0a:	4690      	mov	r8, r2
 8002c0c:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8002c10:	a319      	add	r3, pc, #100	@ (adr r3, 8002c78 <setLine+0x338>)
 8002c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c16:	4640      	mov	r0, r8
 8002c18:	4649      	mov	r1, r9
 8002c1a:	f7fd ff79 	bl	8000b10 <__aeabi_dcmple>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d006      	beq.n	8002c32 <setLine+0x2f2>
    {
        line->alfa = M_PI_2;
 8002c24:	69f9      	ldr	r1, [r7, #28]
 8002c26:	a316      	add	r3, pc, #88	@ (adr r3, 8002c80 <setLine+0x340>)
 8002c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c2c:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 8002c30:	e019      	b.n	8002c66 <setLine+0x326>
    }
    else line->alfa = fabs(atan(line->dY / line->dX));
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002c3e:	f7fd fe15 	bl	800086c <__aeabi_ddiv>
 8002c42:	4602      	mov	r2, r0
 8002c44:	460b      	mov	r3, r1
 8002c46:	ec43 2b17 	vmov	d7, r2, r3
 8002c4a:	eeb0 0a47 	vmov.f32	s0, s14
 8002c4e:	eef0 0a67 	vmov.f32	s1, s15
 8002c52:	f017 f919 	bl	8019e88 <atan>
 8002c56:	ec53 2b10 	vmov	r2, r3, d0
 8002c5a:	4614      	mov	r4, r2
 8002c5c:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	e9c3 4514 	strd	r4, r5, [r3, #80]	@ 0x50

    return INTERPOLATOR_DONE;
 8002c66:	2300      	movs	r3, #0
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3720      	adds	r7, #32
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c72:	bf00      	nop
 8002c74:	f3af 8000 	nop.w
 8002c78:	a0000000 	.word	0xa0000000
 8002c7c:	3f799999 	.word	0x3f799999
 8002c80:	54442d18 	.word	0x54442d18
 8002c84:	3ff921fb 	.word	0x3ff921fb

08002c88 <setArc>:

/** Функция определения параметров дуги
 */
handler_interpolator_state_t setArc(ARC_StructDef* arc, double Xk, double Yk, double I, double J, int8_t dir)
{
 8002c88:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002c8c:	b08a      	sub	sp, #40	@ 0x28
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6278      	str	r0, [r7, #36]	@ 0x24
 8002c92:	ed87 0b06 	vstr	d0, [r7, #24]
 8002c96:	ed87 1b04 	vstr	d1, [r7, #16]
 8002c9a:	ed87 2b02 	vstr	d2, [r7, #8]
 8002c9e:	ed87 3b00 	vstr	d3, [r7]
 8002ca2:	460b      	mov	r3, r1
 8002ca4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    /* Координаты точек дуги в абсолютной СК (мм) */
    arc->X0 = X;
 8002ca8:	4ba3      	ldr	r3, [pc, #652]	@ (8002f38 <setArc+0x2b0>)
 8002caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cae:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002cb0:	e9c1 2300 	strd	r2, r3, [r1]
    arc->Y0 = Y;
 8002cb4:	4ba1      	ldr	r3, [pc, #644]	@ (8002f3c <setArc+0x2b4>)
 8002cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cba:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002cbc:	e9c1 2302 	strd	r2, r3, [r1, #8]
    arc->Xk = Xk;
 8002cc0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002cc2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cc6:	e9c1 2304 	strd	r2, r3, [r1, #16]
    arc->Yk = Yk;
 8002cca:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002ccc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002cd0:	e9c1 2306 	strd	r2, r3, [r1, #24]
    arc->Xc = arc->X0 + I;
 8002cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cd6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002cda:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002cde:	f7fd fae5 	bl	80002ac <__adddf3>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	460b      	mov	r3, r1
 8002ce6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002ce8:	e9c1 2308 	strd	r2, r3, [r1, #32]
    arc->Yc = arc->Y0 + J;
 8002cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cee:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002cf2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002cf6:	f7fd fad9 	bl	80002ac <__adddf3>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	460b      	mov	r3, r1
 8002cfe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002d00:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28

    /* Проверка существования дуги */
    if (fabs(X - Xk) <= MM_PER_STEP && fabs(Y - Yk) <= MM_PER_STEP) return INTERPOLATOR_ERROR;
 8002d04:	4b8c      	ldr	r3, [pc, #560]	@ (8002f38 <setArc+0x2b0>)
 8002d06:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002d0a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d0e:	f7fd facb 	bl	80002a8 <__aeabi_dsub>
 8002d12:	4602      	mov	r2, r0
 8002d14:	460b      	mov	r3, r1
 8002d16:	4690      	mov	r8, r2
 8002d18:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8002d1c:	a384      	add	r3, pc, #528	@ (adr r3, 8002f30 <setArc+0x2a8>)
 8002d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d22:	4640      	mov	r0, r8
 8002d24:	4649      	mov	r1, r9
 8002d26:	f7fd fef3 	bl	8000b10 <__aeabi_dcmple>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d018      	beq.n	8002d62 <setArc+0xda>
 8002d30:	4b82      	ldr	r3, [pc, #520]	@ (8002f3c <setArc+0x2b4>)
 8002d32:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002d36:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002d3a:	f7fd fab5 	bl	80002a8 <__aeabi_dsub>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	460b      	mov	r3, r1
 8002d42:	4614      	mov	r4, r2
 8002d44:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8002d48:	a379      	add	r3, pc, #484	@ (adr r3, 8002f30 <setArc+0x2a8>)
 8002d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d4e:	4620      	mov	r0, r4
 8002d50:	4629      	mov	r1, r5
 8002d52:	f7fd fedd 	bl	8000b10 <__aeabi_dcmple>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d002      	beq.n	8002d62 <setArc+0xda>
 8002d5c:	f04f 33ff 	mov.w	r3, #4294967295
 8002d60:	e185      	b.n	800306e <setArc+0x3e6>

    /* Переход в относительную систему координаты центра дуги (мм) */
    arc->x_rel = x * MM_PER_STEP - arc->Xc;
 8002d62:	4b77      	ldr	r3, [pc, #476]	@ (8002f40 <setArc+0x2b8>)
 8002d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d68:	4610      	mov	r0, r2
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	f7fe f86c 	bl	8000e48 <__aeabi_l2f>
 8002d70:	ee07 0a10 	vmov	s14, r0
 8002d74:	eddf 7a73 	vldr	s15, [pc, #460]	@ 8002f44 <setArc+0x2bc>
 8002d78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d7c:	ee17 0a90 	vmov	r0, s15
 8002d80:	f7fd fbf2 	bl	8000568 <__aeabi_f2d>
 8002d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d86:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002d8a:	f7fd fa8d 	bl	80002a8 <__aeabi_dsub>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	460b      	mov	r3, r1
 8002d92:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002d94:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    arc->y_rel = y * MM_PER_STEP - arc->Yc;
 8002d98:	4b6b      	ldr	r3, [pc, #428]	@ (8002f48 <setArc+0x2c0>)
 8002d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d9e:	4610      	mov	r0, r2
 8002da0:	4619      	mov	r1, r3
 8002da2:	f7fe f851 	bl	8000e48 <__aeabi_l2f>
 8002da6:	ee07 0a10 	vmov	s14, r0
 8002daa:	eddf 7a66 	vldr	s15, [pc, #408]	@ 8002f44 <setArc+0x2bc>
 8002dae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002db2:	ee17 0a90 	vmov	r0, s15
 8002db6:	f7fd fbd7 	bl	8000568 <__aeabi_f2d>
 8002dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dbc:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8002dc0:	f7fd fa72 	bl	80002a8 <__aeabi_dsub>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	460b      	mov	r3, r1
 8002dc8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002dca:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    arc->X0 -= arc->Xc;
 8002dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dd0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dd6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002dda:	f7fd fa65 	bl	80002a8 <__aeabi_dsub>
 8002dde:	4602      	mov	r2, r0
 8002de0:	460b      	mov	r3, r1
 8002de2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002de4:	e9c1 2300 	strd	r2, r3, [r1]
    arc->Y0 -= arc->Yc;
 8002de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dea:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002df0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8002df4:	f7fd fa58 	bl	80002a8 <__aeabi_dsub>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	460b      	mov	r3, r1
 8002dfc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002dfe:	e9c1 2302 	strd	r2, r3, [r1, #8]
    arc->Xk -= arc->Xc;
 8002e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e04:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e0a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002e0e:	f7fd fa4b 	bl	80002a8 <__aeabi_dsub>
 8002e12:	4602      	mov	r2, r0
 8002e14:	460b      	mov	r3, r1
 8002e16:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002e18:	e9c1 2304 	strd	r2, r3, [r1, #16]
    arc->Yk -= arc->Yc;
 8002e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e1e:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e24:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8002e28:	f7fd fa3e 	bl	80002a8 <__aeabi_dsub>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	460b      	mov	r3, r1
 8002e30:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002e32:	e9c1 2306 	strd	r2, r3, [r1, #24]

    /* Квадрат радиуса дуги (мм^2) */
    arc->R2 = I * I + J * J;
 8002e36:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e3a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002e3e:	f7fd fbeb 	bl	8000618 <__aeabi_dmul>
 8002e42:	4602      	mov	r2, r0
 8002e44:	460b      	mov	r3, r1
 8002e46:	4614      	mov	r4, r2
 8002e48:	461d      	mov	r5, r3
 8002e4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e4e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002e52:	f7fd fbe1 	bl	8000618 <__aeabi_dmul>
 8002e56:	4602      	mov	r2, r0
 8002e58:	460b      	mov	r3, r1
 8002e5a:	4620      	mov	r0, r4
 8002e5c:	4629      	mov	r1, r5
 8002e5e:	f7fd fa25 	bl	80002ac <__adddf3>
 8002e62:	4602      	mov	r2, r0
 8002e64:	460b      	mov	r3, r1
 8002e66:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002e68:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    /* Начальное значения оценочной функции */
    arc->F = arc->x_rel * arc->x_rel + arc->y_rel * arc->y_rel - arc->R2;
 8002e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e6e:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8002e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e74:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8002e78:	f7fd fbce 	bl	8000618 <__aeabi_dmul>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	460b      	mov	r3, r1
 8002e80:	4614      	mov	r4, r2
 8002e82:	461d      	mov	r5, r3
 8002e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e86:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8002e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e8c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8002e90:	f7fd fbc2 	bl	8000618 <__aeabi_dmul>
 8002e94:	4602      	mov	r2, r0
 8002e96:	460b      	mov	r3, r1
 8002e98:	4620      	mov	r0, r4
 8002e9a:	4629      	mov	r1, r5
 8002e9c:	f7fd fa06 	bl	80002ac <__adddf3>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	460b      	mov	r3, r1
 8002ea4:	4610      	mov	r0, r2
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eaa:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8002eae:	f7fd f9fb 	bl	80002a8 <__aeabi_dsub>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002eb8:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48

    /* Направление вращения по дуге 1 - по часовой стрелки, -1 - против */
    arc->dir = dir;
 8002ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ebe:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8002ec2:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53

    /* Определение четверти, в которой расположено начало дуги */
    if (arc->x_rel >= 0 && arc->y_rel > 0) { arc->dx = 1 * arc->dir; arc->dy = -1 * arc->dir; arc->s = -1 * arc->dir; }             //< 1 четверть
 8002ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec8:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8002ecc:	f04f 0200 	mov.w	r2, #0
 8002ed0:	f04f 0300 	mov.w	r3, #0
 8002ed4:	f7fd fe26 	bl	8000b24 <__aeabi_dcmpge>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d036      	beq.n	8002f4c <setArc+0x2c4>
 8002ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ee0:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8002ee4:	f04f 0200 	mov.w	r2, #0
 8002ee8:	f04f 0300 	mov.w	r3, #0
 8002eec:	f7fd fe24 	bl	8000b38 <__aeabi_dcmpgt>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d02a      	beq.n	8002f4c <setArc+0x2c4>
 8002ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ef8:	f993 2053 	ldrsb.w	r2, [r3, #83]	@ 0x53
 8002efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002efe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f04:	f993 3053 	ldrsb.w	r3, [r3, #83]	@ 0x53
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	425b      	negs	r3, r3
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	b25a      	sxtb	r2, r3
 8002f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f12:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8002f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f18:	f993 3053 	ldrsb.w	r3, [r3, #83]	@ 0x53
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	425b      	negs	r3, r3
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	b25a      	sxtb	r2, r3
 8002f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f26:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
 8002f2a:	e09f      	b.n	800306c <setArc+0x3e4>
 8002f2c:	f3af 8000 	nop.w
 8002f30:	a0000000 	.word	0xa0000000
 8002f34:	3f799999 	.word	0x3f799999
 8002f38:	20001018 	.word	0x20001018
 8002f3c:	20001020 	.word	0x20001020
 8002f40:	20001008 	.word	0x20001008
 8002f44:	3bcccccd 	.word	0x3bcccccd
 8002f48:	20001010 	.word	0x20001010
    else if (arc->y_rel <= 0 && arc->x_rel > 0) { arc->dx = -1 * arc->dir; arc->dy = -1 * arc->dir; arc->s = 1 * arc->dir; }        //< 4 четверть
 8002f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f4e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8002f52:	f04f 0200 	mov.w	r2, #0
 8002f56:	f04f 0300 	mov.w	r3, #0
 8002f5a:	f7fd fdd9 	bl	8000b10 <__aeabi_dcmple>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d026      	beq.n	8002fb2 <setArc+0x32a>
 8002f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f66:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8002f6a:	f04f 0200 	mov.w	r2, #0
 8002f6e:	f04f 0300 	mov.w	r3, #0
 8002f72:	f7fd fde1 	bl	8000b38 <__aeabi_dcmpgt>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d01a      	beq.n	8002fb2 <setArc+0x32a>
 8002f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f7e:	f993 3053 	ldrsb.w	r3, [r3, #83]	@ 0x53
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	425b      	negs	r3, r3
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	b25a      	sxtb	r2, r3
 8002f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f8c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f92:	f993 3053 	ldrsb.w	r3, [r3, #83]	@ 0x53
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	425b      	negs	r3, r3
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	b25a      	sxtb	r2, r3
 8002f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fa0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8002fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fa6:	f993 2053 	ldrsb.w	r2, [r3, #83]	@ 0x53
 8002faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fac:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
 8002fb0:	e05c      	b.n	800306c <setArc+0x3e4>
    else if (arc->x_rel <= 0 && arc->y_rel < 0) { arc->dx = -1 * arc->dir; arc->dy = 1 * arc->dir; arc->s = -1 * arc->dir; }        //< 3 четверть
 8002fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb4:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8002fb8:	f04f 0200 	mov.w	r2, #0
 8002fbc:	f04f 0300 	mov.w	r3, #0
 8002fc0:	f7fd fda6 	bl	8000b10 <__aeabi_dcmple>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d026      	beq.n	8003018 <setArc+0x390>
 8002fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fcc:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8002fd0:	f04f 0200 	mov.w	r2, #0
 8002fd4:	f04f 0300 	mov.w	r3, #0
 8002fd8:	f7fd fd90 	bl	8000afc <__aeabi_dcmplt>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d01a      	beq.n	8003018 <setArc+0x390>
 8002fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fe4:	f993 3053 	ldrsb.w	r3, [r3, #83]	@ 0x53
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	425b      	negs	r3, r3
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	b25a      	sxtb	r2, r3
 8002ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ff2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ff8:	f993 2053 	ldrsb.w	r2, [r3, #83]	@ 0x53
 8002ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ffe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8003002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003004:	f993 3053 	ldrsb.w	r3, [r3, #83]	@ 0x53
 8003008:	b2db      	uxtb	r3, r3
 800300a:	425b      	negs	r3, r3
 800300c:	b2db      	uxtb	r3, r3
 800300e:	b25a      	sxtb	r2, r3
 8003010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003012:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
 8003016:	e029      	b.n	800306c <setArc+0x3e4>
    else if (arc->y_rel >= 0 && arc->x_rel < 0) { arc->dx = 1 * arc->dir; arc->dy = 1 * arc->dir; arc->s = 1 * arc->dir; }          //< 2 четверть
 8003018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800301a:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800301e:	f04f 0200 	mov.w	r2, #0
 8003022:	f04f 0300 	mov.w	r3, #0
 8003026:	f7fd fd7d 	bl	8000b24 <__aeabi_dcmpge>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d01d      	beq.n	800306c <setArc+0x3e4>
 8003030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003032:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8003036:	f04f 0200 	mov.w	r2, #0
 800303a:	f04f 0300 	mov.w	r3, #0
 800303e:	f7fd fd5d 	bl	8000afc <__aeabi_dcmplt>
 8003042:	4603      	mov	r3, r0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d011      	beq.n	800306c <setArc+0x3e4>
 8003048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800304a:	f993 2053 	ldrsb.w	r2, [r3, #83]	@ 0x53
 800304e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003050:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8003054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003056:	f993 2053 	ldrsb.w	r2, [r3, #83]	@ 0x53
 800305a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800305c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8003060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003062:	f993 2053 	ldrsb.w	r2, [r3, #83]	@ 0x53
 8003066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003068:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52

    return INTERPOLATOR_DONE;
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	3728      	adds	r7, #40	@ 0x28
 8003072:	46bd      	mov	sp, r7
 8003074:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08003078 <handlerLine>:

/** Обработчик команды G01 - интерполяционное движение по прямой (оценочная функция)
 */
handler_interpolator_state_t handlerLine(INTERPOLATOR_StructDef* interpolator, FIFO_StructDef* buf, LINE_StructDef* line, uint8_t axis1, uint8_t axis2)
{
 8003078:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800307c:	b094      	sub	sp, #80	@ 0x50
 800307e:	af00      	add	r7, sp, #0
 8003080:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8003082:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003084:	647a      	str	r2, [r7, #68]	@ 0x44
 8003086:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
	if(interpolator->_workState == INTERPOLATOR_READY && availableForWrite(buf) == FIFO_OK)
 800308a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800308c:	f993 3000 	ldrsb.w	r3, [r3]
 8003090:	2b01      	cmp	r3, #1
 8003092:	f040 81c2 	bne.w	800341a <handlerLine+0x3a2>
 8003096:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8003098:	f7ff f936 	bl	8002308 <availableForWrite>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	f040 81bb 	bne.w	800341a <handlerLine+0x3a2>
	{
		interpolator->_workState = INTERPOLATOR_PROCESSING;
 80030a4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80030a6:	2302      	movs	r3, #2
 80030a8:	7013      	strb	r3, [r2, #0]

		/* Основные вычисления на основе анализа знака оценочной функции */
		if (fabs(line->F) <= EPS)
 80030aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030ac:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80030b0:	4614      	mov	r4, r2
 80030b2:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 80030b6:	a380      	add	r3, pc, #512	@ (adr r3, 80032b8 <handlerLine+0x240>)
 80030b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030bc:	4620      	mov	r0, r4
 80030be:	4629      	mov	r1, r5
 80030c0:	f7fd fd26 	bl	8000b10 <__aeabi_dcmple>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	f000 808f 	beq.w	80031ea <handlerLine+0x172>
		{
			if (line->alfa < M_PI_4)
 80030cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030ce:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 80030d2:	a37b      	add	r3, pc, #492	@ (adr r3, 80032c0 <handlerLine+0x248>)
 80030d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030d8:	f7fd fd10 	bl	8000afc <__aeabi_dcmplt>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d041      	beq.n	8003166 <handlerLine+0xee>
			{
				line->x_rel += line->dx * MM_PER_STEP;
 80030e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030e4:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 80030e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030ea:	f993 3048 	ldrsb.w	r3, [r3, #72]	@ 0x48
 80030ee:	ee07 3a90 	vmov	s15, r3
 80030f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030f6:	ed9f 7a74 	vldr	s14, [pc, #464]	@ 80032c8 <handlerLine+0x250>
 80030fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030fe:	ee17 0a90 	vmov	r0, s15
 8003102:	f7fd fa31 	bl	8000568 <__aeabi_f2d>
 8003106:	4602      	mov	r2, r0
 8003108:	460b      	mov	r3, r1
 800310a:	4620      	mov	r0, r4
 800310c:	4629      	mov	r1, r5
 800310e:	f7fd f8cd 	bl	80002ac <__adddf3>
 8003112:	4602      	mov	r2, r0
 8003114:	460b      	mov	r3, r1
 8003116:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003118:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
				x += line->dx;
 800311c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800311e:	f993 3048 	ldrsb.w	r3, [r3, #72]	@ 0x48
 8003122:	b25b      	sxtb	r3, r3
 8003124:	17da      	asrs	r2, r3, #31
 8003126:	469a      	mov	sl, r3
 8003128:	4693      	mov	fp, r2
 800312a:	4b61      	ldr	r3, [pc, #388]	@ (80032b0 <handlerLine+0x238>)
 800312c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003130:	eb1a 0102 	adds.w	r1, sl, r2
 8003134:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003136:	eb4b 0303 	adc.w	r3, fp, r3
 800313a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800313c:	4b5c      	ldr	r3, [pc, #368]	@ (80032b0 <handlerLine+0x238>)
 800313e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003142:	e9c3 1200 	strd	r1, r2, [r3]

				fifoWrite(buf, setStepsBin(axis1, line->dx));
 8003146:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003148:	f993 2048 	ldrsb.w	r2, [r3, #72]	@ 0x48
 800314c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8003150:	4611      	mov	r1, r2
 8003152:	4618      	mov	r0, r3
 8003154:	f000 fc3a 	bl	80039cc <setStepsBin>
 8003158:	4603      	mov	r3, r0
 800315a:	b25b      	sxtb	r3, r3
 800315c:	4619      	mov	r1, r3
 800315e:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8003160:	f7ff f8e3 	bl	800232a <fifoWrite>
 8003164:	e0f6      	b.n	8003354 <handlerLine+0x2dc>
			}
			else
			{
				line->y_rel += line->dy * MM_PER_STEP;
 8003166:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003168:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 800316c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800316e:	f993 3049 	ldrsb.w	r3, [r3, #73]	@ 0x49
 8003172:	ee07 3a90 	vmov	s15, r3
 8003176:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800317a:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 80032c8 <handlerLine+0x250>
 800317e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003182:	ee17 0a90 	vmov	r0, s15
 8003186:	f7fd f9ef 	bl	8000568 <__aeabi_f2d>
 800318a:	4602      	mov	r2, r0
 800318c:	460b      	mov	r3, r1
 800318e:	4620      	mov	r0, r4
 8003190:	4629      	mov	r1, r5
 8003192:	f7fd f88b 	bl	80002ac <__adddf3>
 8003196:	4602      	mov	r2, r0
 8003198:	460b      	mov	r3, r1
 800319a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800319c:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
				y += line->dy;
 80031a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80031a2:	f993 3049 	ldrsb.w	r3, [r3, #73]	@ 0x49
 80031a6:	b25b      	sxtb	r3, r3
 80031a8:	17da      	asrs	r2, r3, #31
 80031aa:	4698      	mov	r8, r3
 80031ac:	4691      	mov	r9, r2
 80031ae:	4b41      	ldr	r3, [pc, #260]	@ (80032b4 <handlerLine+0x23c>)
 80031b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031b4:	eb18 0102 	adds.w	r1, r8, r2
 80031b8:	6339      	str	r1, [r7, #48]	@ 0x30
 80031ba:	eb49 0303 	adc.w	r3, r9, r3
 80031be:	637b      	str	r3, [r7, #52]	@ 0x34
 80031c0:	4b3c      	ldr	r3, [pc, #240]	@ (80032b4 <handlerLine+0x23c>)
 80031c2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80031c6:	e9c3 1200 	strd	r1, r2, [r3]

				fifoWrite(buf, setStepsBin(axis2, line->dy));
 80031ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80031cc:	f993 2049 	ldrsb.w	r2, [r3, #73]	@ 0x49
 80031d0:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 80031d4:	4611      	mov	r1, r2
 80031d6:	4618      	mov	r0, r3
 80031d8:	f000 fbf8 	bl	80039cc <setStepsBin>
 80031dc:	4603      	mov	r3, r0
 80031de:	b25b      	sxtb	r3, r3
 80031e0:	4619      	mov	r1, r3
 80031e2:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80031e4:	f7ff f8a1 	bl	800232a <fifoWrite>
 80031e8:	e0b4      	b.n	8003354 <handlerLine+0x2dc>
			}
		}
		else
		{
			if (line->F * line->s > 0)
 80031ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80031ec:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 80031f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80031f2:	f993 3058 	ldrsb.w	r3, [r3, #88]	@ 0x58
 80031f6:	4618      	mov	r0, r3
 80031f8:	f7fd f9a4 	bl	8000544 <__aeabi_i2d>
 80031fc:	4602      	mov	r2, r0
 80031fe:	460b      	mov	r3, r1
 8003200:	4620      	mov	r0, r4
 8003202:	4629      	mov	r1, r5
 8003204:	f7fd fa08 	bl	8000618 <__aeabi_dmul>
 8003208:	4602      	mov	r2, r0
 800320a:	460b      	mov	r3, r1
 800320c:	4610      	mov	r0, r2
 800320e:	4619      	mov	r1, r3
 8003210:	f04f 0200 	mov.w	r2, #0
 8003214:	f04f 0300 	mov.w	r3, #0
 8003218:	f7fd fc8e 	bl	8000b38 <__aeabi_dcmpgt>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d054      	beq.n	80032cc <handlerLine+0x254>
			{
				line->x_rel += line->dx * MM_PER_STEP;
 8003222:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003224:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8003228:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800322a:	f993 3048 	ldrsb.w	r3, [r3, #72]	@ 0x48
 800322e:	ee07 3a90 	vmov	s15, r3
 8003232:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003236:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 80032c8 <handlerLine+0x250>
 800323a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800323e:	ee17 0a90 	vmov	r0, s15
 8003242:	f7fd f991 	bl	8000568 <__aeabi_f2d>
 8003246:	4602      	mov	r2, r0
 8003248:	460b      	mov	r3, r1
 800324a:	4620      	mov	r0, r4
 800324c:	4629      	mov	r1, r5
 800324e:	f7fd f82d 	bl	80002ac <__adddf3>
 8003252:	4602      	mov	r2, r0
 8003254:	460b      	mov	r3, r1
 8003256:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003258:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
				x += line->dx;
 800325c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800325e:	f993 3048 	ldrsb.w	r3, [r3, #72]	@ 0x48
 8003262:	b25b      	sxtb	r3, r3
 8003264:	17da      	asrs	r2, r3, #31
 8003266:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003268:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800326a:	4b11      	ldr	r3, [pc, #68]	@ (80032b0 <handlerLine+0x238>)
 800326c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003270:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8003274:	4621      	mov	r1, r4
 8003276:	1889      	adds	r1, r1, r2
 8003278:	6239      	str	r1, [r7, #32]
 800327a:	4629      	mov	r1, r5
 800327c:	eb43 0101 	adc.w	r1, r3, r1
 8003280:	6279      	str	r1, [r7, #36]	@ 0x24
 8003282:	4b0b      	ldr	r3, [pc, #44]	@ (80032b0 <handlerLine+0x238>)
 8003284:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003288:	e9c3 1200 	strd	r1, r2, [r3]

				fifoWrite(buf, setStepsBin(axis1, line->dx));
 800328c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800328e:	f993 2048 	ldrsb.w	r2, [r3, #72]	@ 0x48
 8003292:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8003296:	4611      	mov	r1, r2
 8003298:	4618      	mov	r0, r3
 800329a:	f000 fb97 	bl	80039cc <setStepsBin>
 800329e:	4603      	mov	r3, r0
 80032a0:	b25b      	sxtb	r3, r3
 80032a2:	4619      	mov	r1, r3
 80032a4:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80032a6:	f7ff f840 	bl	800232a <fifoWrite>
 80032aa:	e053      	b.n	8003354 <handlerLine+0x2dc>
 80032ac:	f3af 8000 	nop.w
 80032b0:	20001008 	.word	0x20001008
 80032b4:	20001010 	.word	0x20001010
 80032b8:	e826d695 	.word	0xe826d695
 80032bc:	3e112e0b 	.word	0x3e112e0b
 80032c0:	54442d18 	.word	0x54442d18
 80032c4:	3fe921fb 	.word	0x3fe921fb
 80032c8:	3bcccccd 	.word	0x3bcccccd
			}
		        else
		        {
		            line->y_rel += line->dy * MM_PER_STEP;
 80032cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032ce:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 80032d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032d4:	f993 3049 	ldrsb.w	r3, [r3, #73]	@ 0x49
 80032d8:	ee07 3a90 	vmov	s15, r3
 80032dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032e0:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 80032c8 <handlerLine+0x250>
 80032e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032e8:	ee17 0a90 	vmov	r0, s15
 80032ec:	f7fd f93c 	bl	8000568 <__aeabi_f2d>
 80032f0:	4602      	mov	r2, r0
 80032f2:	460b      	mov	r3, r1
 80032f4:	4620      	mov	r0, r4
 80032f6:	4629      	mov	r1, r5
 80032f8:	f7fc ffd8 	bl	80002ac <__adddf3>
 80032fc:	4602      	mov	r2, r0
 80032fe:	460b      	mov	r3, r1
 8003300:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003302:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
		            y += line->dy;
 8003306:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003308:	f993 3049 	ldrsb.w	r3, [r3, #73]	@ 0x49
 800330c:	b25b      	sxtb	r3, r3
 800330e:	17da      	asrs	r2, r3, #31
 8003310:	61bb      	str	r3, [r7, #24]
 8003312:	61fa      	str	r2, [r7, #28]
 8003314:	4b46      	ldr	r3, [pc, #280]	@ (8003430 <handlerLine+0x3b8>)
 8003316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800331a:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 800331e:	4621      	mov	r1, r4
 8003320:	1889      	adds	r1, r1, r2
 8003322:	6139      	str	r1, [r7, #16]
 8003324:	4629      	mov	r1, r5
 8003326:	eb43 0101 	adc.w	r1, r3, r1
 800332a:	6179      	str	r1, [r7, #20]
 800332c:	4b40      	ldr	r3, [pc, #256]	@ (8003430 <handlerLine+0x3b8>)
 800332e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003332:	e9c3 1200 	strd	r1, r2, [r3]

		            fifoWrite(buf, setStepsBin(axis2, line->dy));
 8003336:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003338:	f993 2049 	ldrsb.w	r2, [r3, #73]	@ 0x49
 800333c:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8003340:	4611      	mov	r1, r2
 8003342:	4618      	mov	r0, r3
 8003344:	f000 fb42 	bl	80039cc <setStepsBin>
 8003348:	4603      	mov	r3, r0
 800334a:	b25b      	sxtb	r3, r3
 800334c:	4619      	mov	r1, r3
 800334e:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8003350:	f7fe ffeb 	bl	800232a <fifoWrite>
		        }
		}

		/* Пересчет оценочной функции */
		line->F = line->dX * line->y_rel - line->dY * line->x_rel;
 8003354:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003356:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800335a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800335c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8003360:	f7fd f95a 	bl	8000618 <__aeabi_dmul>
 8003364:	4602      	mov	r2, r0
 8003366:	460b      	mov	r3, r1
 8003368:	4614      	mov	r4, r2
 800336a:	461d      	mov	r5, r3
 800336c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800336e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8003372:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003374:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8003378:	f7fd f94e 	bl	8000618 <__aeabi_dmul>
 800337c:	4602      	mov	r2, r0
 800337e:	460b      	mov	r3, r1
 8003380:	4620      	mov	r0, r4
 8003382:	4629      	mov	r1, r5
 8003384:	f7fc ff90 	bl	80002a8 <__aeabi_dsub>
 8003388:	4602      	mov	r2, r0
 800338a:	460b      	mov	r3, r1
 800338c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800338e:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

		/* Проверка достижения конечной точки */
		if ((fabs(line->x_rel - line->dX) < MM_PER_STEP) && (fabs(line->y_rel - line->dY) < MM_PER_STEP))
 8003392:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003394:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8003398:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800339a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800339e:	f7fc ff83 	bl	80002a8 <__aeabi_dsub>
 80033a2:	4602      	mov	r2, r0
 80033a4:	460b      	mov	r3, r1
 80033a6:	60ba      	str	r2, [r7, #8]
 80033a8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80033ac:	60fb      	str	r3, [r7, #12]
 80033ae:	a31e      	add	r3, pc, #120	@ (adr r3, 8003428 <handlerLine+0x3b0>)
 80033b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033b4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80033b8:	f7fd fba0 	bl	8000afc <__aeabi_dcmplt>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d028      	beq.n	8003414 <handlerLine+0x39c>
 80033c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80033c4:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 80033c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80033ca:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80033ce:	f7fc ff6b 	bl	80002a8 <__aeabi_dsub>
 80033d2:	4602      	mov	r2, r0
 80033d4:	460b      	mov	r3, r1
 80033d6:	603a      	str	r2, [r7, #0]
 80033d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80033dc:	607b      	str	r3, [r7, #4]
 80033de:	a312      	add	r3, pc, #72	@ (adr r3, 8003428 <handlerLine+0x3b0>)
 80033e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80033e8:	f7fd fb88 	bl	8000afc <__aeabi_dcmplt>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d010      	beq.n	8003414 <handlerLine+0x39c>
		{
			X = line->Xk;
 80033f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80033f4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80033f8:	490e      	ldr	r1, [pc, #56]	@ (8003434 <handlerLine+0x3bc>)
 80033fa:	e9c1 2300 	strd	r2, r3, [r1]
			Y = line->Yk;
 80033fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003400:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003404:	490c      	ldr	r1, [pc, #48]	@ (8003438 <handlerLine+0x3c0>)
 8003406:	e9c1 2300 	strd	r2, r3, [r1]

			interpolator->_workState = INTERPOLATOR_READY;
 800340a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800340c:	2201      	movs	r2, #1
 800340e:	701a      	strb	r2, [r3, #0]
			return INTERPOLATOR_DONE;
 8003410:	2300      	movs	r3, #0
 8003412:	e003      	b.n	800341c <handlerLine+0x3a4>
		}

		interpolator->_workState = INTERPOLATOR_READY;
 8003414:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003416:	2201      	movs	r2, #1
 8003418:	701a      	strb	r2, [r3, #0]
	}

	return INTERPOLATOR_PROCESSING;
 800341a:	2302      	movs	r3, #2
}
 800341c:	4618      	mov	r0, r3
 800341e:	3750      	adds	r7, #80	@ 0x50
 8003420:	46bd      	mov	sp, r7
 8003422:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003426:	bf00      	nop
 8003428:	a0000000 	.word	0xa0000000
 800342c:	3f799999 	.word	0x3f799999
 8003430:	20001010 	.word	0x20001010
 8003434:	20001018 	.word	0x20001018
 8003438:	20001020 	.word	0x20001020
 800343c:	00000000 	.word	0x00000000

08003440 <handlerArc>:

/** Обработчик команд G02, G03 - интерполяционное движение по окружности по/против часовой стрелке (оценочная функция)
 */
handler_interpolator_state_t handlerArc(INTERPOLATOR_StructDef* interpolator, FIFO_StructDef* buf, ARC_StructDef* arc, uint8_t axis1, uint8_t axis2)
{
 8003440:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003444:	b098      	sub	sp, #96	@ 0x60
 8003446:	af00      	add	r7, sp, #0
 8003448:	65f8      	str	r0, [r7, #92]	@ 0x5c
 800344a:	65b9      	str	r1, [r7, #88]	@ 0x58
 800344c:	657a      	str	r2, [r7, #84]	@ 0x54
 800344e:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
	if(interpolator->_workState == INTERPOLATOR_READY && availableForWrite(buf) == FIFO_OK)
 8003452:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003454:	f993 3000 	ldrsb.w	r3, [r3]
 8003458:	2b01      	cmp	r3, #1
 800345a:	f040 82b0 	bne.w	80039be <handlerArc+0x57e>
 800345e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8003460:	f7fe ff52 	bl	8002308 <availableForWrite>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	f040 82a9 	bne.w	80039be <handlerArc+0x57e>
	{
		interpolator->_workState = INTERPOLATOR_PROCESSING;
 800346c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800346e:	2302      	movs	r3, #2
 8003470:	7013      	strb	r3, [r2, #0]

		/* Основные вычисления на основе анализа знака оценочной функции */
		if (arc->s == -1)
 8003472:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003474:	f993 3052 	ldrsb.w	r3, [r3, #82]	@ 0x52
 8003478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800347c:	f040 809a 	bne.w	80035b4 <handlerArc+0x174>
		{
			if (arc->F >= 0)
 8003480:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003482:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 8003486:	f04f 0200 	mov.w	r2, #0
 800348a:	f04f 0300 	mov.w	r3, #0
 800348e:	f7fd fb49 	bl	8000b24 <__aeabi_dcmpge>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d046      	beq.n	8003526 <handlerArc+0xe6>
			{
				arc->y_rel += arc->dy * MM_PER_STEP;
 8003498:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800349a:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 800349e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034a0:	f993 3051 	ldrsb.w	r3, [r3, #81]	@ 0x51
 80034a4:	ee07 3a90 	vmov	s15, r3
 80034a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034ac:	ed9f 7a6b 	vldr	s14, [pc, #428]	@ 800365c <handlerArc+0x21c>
 80034b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034b4:	ee17 0a90 	vmov	r0, s15
 80034b8:	f7fd f856 	bl	8000568 <__aeabi_f2d>
 80034bc:	4602      	mov	r2, r0
 80034be:	460b      	mov	r3, r1
 80034c0:	4620      	mov	r0, r4
 80034c2:	4629      	mov	r1, r5
 80034c4:	f7fc fef2 	bl	80002ac <__adddf3>
 80034c8:	4602      	mov	r2, r0
 80034ca:	460b      	mov	r3, r1
 80034cc:	4610      	mov	r0, r2
 80034ce:	4619      	mov	r1, r3
 80034d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034d2:	e9c3 010e 	strd	r0, r1, [r3, #56]	@ 0x38
				y += arc->dy;
 80034d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034d8:	f993 3051 	ldrsb.w	r3, [r3, #81]	@ 0x51
 80034dc:	b25b      	sxtb	r3, r3
 80034de:	17da      	asrs	r2, r3, #31
 80034e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80034e2:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80034e4:	4b5b      	ldr	r3, [pc, #364]	@ (8003654 <handlerArc+0x214>)
 80034e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ea:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 80034ee:	4621      	mov	r1, r4
 80034f0:	1889      	adds	r1, r1, r2
 80034f2:	6439      	str	r1, [r7, #64]	@ 0x40
 80034f4:	4629      	mov	r1, r5
 80034f6:	eb43 0101 	adc.w	r1, r3, r1
 80034fa:	6479      	str	r1, [r7, #68]	@ 0x44
 80034fc:	4b55      	ldr	r3, [pc, #340]	@ (8003654 <handlerArc+0x214>)
 80034fe:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003502:	e9c3 1200 	strd	r1, r2, [r3]

				fifoWrite(buf, setStepsBin(axis2, arc->dy));
 8003506:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003508:	f993 2051 	ldrsb.w	r2, [r3, #81]	@ 0x51
 800350c:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
 8003510:	4611      	mov	r1, r2
 8003512:	4618      	mov	r0, r3
 8003514:	f000 fa5a 	bl	80039cc <setStepsBin>
 8003518:	4603      	mov	r3, r0
 800351a:	b25b      	sxtb	r3, r3
 800351c:	4619      	mov	r1, r3
 800351e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8003520:	f7fe ff03 	bl	800232a <fifoWrite>
 8003524:	e0df      	b.n	80036e6 <handlerArc+0x2a6>
			}
			else
			{
				arc->x_rel += arc->dx * MM_PER_STEP;
 8003526:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003528:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 800352c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800352e:	f993 3050 	ldrsb.w	r3, [r3, #80]	@ 0x50
 8003532:	ee07 3a90 	vmov	s15, r3
 8003536:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800353a:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 800365c <handlerArc+0x21c>
 800353e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003542:	ee17 0a90 	vmov	r0, s15
 8003546:	f7fd f80f 	bl	8000568 <__aeabi_f2d>
 800354a:	4602      	mov	r2, r0
 800354c:	460b      	mov	r3, r1
 800354e:	4620      	mov	r0, r4
 8003550:	4629      	mov	r1, r5
 8003552:	f7fc feab 	bl	80002ac <__adddf3>
 8003556:	4602      	mov	r2, r0
 8003558:	460b      	mov	r3, r1
 800355a:	4610      	mov	r0, r2
 800355c:	4619      	mov	r1, r3
 800355e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003560:	e9c3 010c 	strd	r0, r1, [r3, #48]	@ 0x30
				x += arc->dx;
 8003564:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003566:	f993 3050 	ldrsb.w	r3, [r3, #80]	@ 0x50
 800356a:	b25b      	sxtb	r3, r3
 800356c:	17da      	asrs	r2, r3, #31
 800356e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003570:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003572:	4b39      	ldr	r3, [pc, #228]	@ (8003658 <handlerArc+0x218>)
 8003574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003578:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 800357c:	4621      	mov	r1, r4
 800357e:	1889      	adds	r1, r1, r2
 8003580:	6339      	str	r1, [r7, #48]	@ 0x30
 8003582:	4629      	mov	r1, r5
 8003584:	eb43 0101 	adc.w	r1, r3, r1
 8003588:	6379      	str	r1, [r7, #52]	@ 0x34
 800358a:	4b33      	ldr	r3, [pc, #204]	@ (8003658 <handlerArc+0x218>)
 800358c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003590:	e9c3 1200 	strd	r1, r2, [r3]

				fifoWrite(buf, setStepsBin(axis1, arc->dx));
 8003594:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003596:	f993 2050 	ldrsb.w	r2, [r3, #80]	@ 0x50
 800359a:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 800359e:	4611      	mov	r1, r2
 80035a0:	4618      	mov	r0, r3
 80035a2:	f000 fa13 	bl	80039cc <setStepsBin>
 80035a6:	4603      	mov	r3, r0
 80035a8:	b25b      	sxtb	r3, r3
 80035aa:	4619      	mov	r1, r3
 80035ac:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80035ae:	f7fe febc 	bl	800232a <fifoWrite>
 80035b2:	e098      	b.n	80036e6 <handlerArc+0x2a6>
			}
		}
		else
		{
			if (arc->F >= 0)
 80035b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035b6:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 80035ba:	f04f 0200 	mov.w	r2, #0
 80035be:	f04f 0300 	mov.w	r3, #0
 80035c2:	f7fd faaf 	bl	8000b24 <__aeabi_dcmpge>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d049      	beq.n	8003660 <handlerArc+0x220>
			{
				arc->x_rel += arc->dx * MM_PER_STEP;
 80035cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035ce:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 80035d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035d4:	f993 3050 	ldrsb.w	r3, [r3, #80]	@ 0x50
 80035d8:	ee07 3a90 	vmov	s15, r3
 80035dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035e0:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 800365c <handlerArc+0x21c>
 80035e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80035e8:	ee17 0a90 	vmov	r0, s15
 80035ec:	f7fc ffbc 	bl	8000568 <__aeabi_f2d>
 80035f0:	4602      	mov	r2, r0
 80035f2:	460b      	mov	r3, r1
 80035f4:	4620      	mov	r0, r4
 80035f6:	4629      	mov	r1, r5
 80035f8:	f7fc fe58 	bl	80002ac <__adddf3>
 80035fc:	4602      	mov	r2, r0
 80035fe:	460b      	mov	r3, r1
 8003600:	4610      	mov	r0, r2
 8003602:	4619      	mov	r1, r3
 8003604:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003606:	e9c3 010c 	strd	r0, r1, [r3, #48]	@ 0x30
				x += arc->dx;
 800360a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800360c:	f993 3050 	ldrsb.w	r3, [r3, #80]	@ 0x50
 8003610:	b25b      	sxtb	r3, r3
 8003612:	17da      	asrs	r2, r3, #31
 8003614:	469a      	mov	sl, r3
 8003616:	4693      	mov	fp, r2
 8003618:	4b0f      	ldr	r3, [pc, #60]	@ (8003658 <handlerArc+0x218>)
 800361a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800361e:	eb1a 0102 	adds.w	r1, sl, r2
 8003622:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003624:	eb4b 0303 	adc.w	r3, fp, r3
 8003628:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800362a:	4b0b      	ldr	r3, [pc, #44]	@ (8003658 <handlerArc+0x218>)
 800362c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003630:	e9c3 1200 	strd	r1, r2, [r3]

				fifoWrite(buf, setStepsBin(axis1, arc->dx));
 8003634:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003636:	f993 2050 	ldrsb.w	r2, [r3, #80]	@ 0x50
 800363a:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 800363e:	4611      	mov	r1, r2
 8003640:	4618      	mov	r0, r3
 8003642:	f000 f9c3 	bl	80039cc <setStepsBin>
 8003646:	4603      	mov	r3, r0
 8003648:	b25b      	sxtb	r3, r3
 800364a:	4619      	mov	r1, r3
 800364c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800364e:	f7fe fe6c 	bl	800232a <fifoWrite>
 8003652:	e048      	b.n	80036e6 <handlerArc+0x2a6>
 8003654:	20001010 	.word	0x20001010
 8003658:	20001008 	.word	0x20001008
 800365c:	3bcccccd 	.word	0x3bcccccd

			}
			else
			{
				arc->y_rel += arc->dy * MM_PER_STEP;
 8003660:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003662:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 8003666:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003668:	f993 3051 	ldrsb.w	r3, [r3, #81]	@ 0x51
 800366c:	ee07 3a90 	vmov	s15, r3
 8003670:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003674:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800365c <handlerArc+0x21c>
 8003678:	ee67 7a87 	vmul.f32	s15, s15, s14
 800367c:	ee17 0a90 	vmov	r0, s15
 8003680:	f7fc ff72 	bl	8000568 <__aeabi_f2d>
 8003684:	4602      	mov	r2, r0
 8003686:	460b      	mov	r3, r1
 8003688:	4620      	mov	r0, r4
 800368a:	4629      	mov	r1, r5
 800368c:	f7fc fe0e 	bl	80002ac <__adddf3>
 8003690:	4602      	mov	r2, r0
 8003692:	460b      	mov	r3, r1
 8003694:	4610      	mov	r0, r2
 8003696:	4619      	mov	r1, r3
 8003698:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800369a:	e9c3 010e 	strd	r0, r1, [r3, #56]	@ 0x38
				y += arc->dy;
 800369e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036a0:	f993 3051 	ldrsb.w	r3, [r3, #81]	@ 0x51
 80036a4:	b25b      	sxtb	r3, r3
 80036a6:	17da      	asrs	r2, r3, #31
 80036a8:	4698      	mov	r8, r3
 80036aa:	4691      	mov	r9, r2
 80036ac:	4baa      	ldr	r3, [pc, #680]	@ (8003958 <handlerArc+0x518>)
 80036ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036b2:	eb18 0102 	adds.w	r1, r8, r2
 80036b6:	6239      	str	r1, [r7, #32]
 80036b8:	eb49 0303 	adc.w	r3, r9, r3
 80036bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80036be:	4ba6      	ldr	r3, [pc, #664]	@ (8003958 <handlerArc+0x518>)
 80036c0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80036c4:	e9c3 1200 	strd	r1, r2, [r3]

				fifoWrite(buf, setStepsBin(axis2, arc->dy));
 80036c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036ca:	f993 2051 	ldrsb.w	r2, [r3, #81]	@ 0x51
 80036ce:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
 80036d2:	4611      	mov	r1, r2
 80036d4:	4618      	mov	r0, r3
 80036d6:	f000 f979 	bl	80039cc <setStepsBin>
 80036da:	4603      	mov	r3, r0
 80036dc:	b25b      	sxtb	r3, r3
 80036de:	4619      	mov	r1, r3
 80036e0:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80036e2:	f7fe fe22 	bl	800232a <fifoWrite>
			}
		}

		/* Пересчет оценочной функции */
		arc->F = arc->x_rel * arc->x_rel + arc->y_rel * arc->y_rel - arc->R2;
 80036e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036e8:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 80036ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036ee:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80036f2:	f7fc ff91 	bl	8000618 <__aeabi_dmul>
 80036f6:	4602      	mov	r2, r0
 80036f8:	460b      	mov	r3, r1
 80036fa:	4614      	mov	r4, r2
 80036fc:	461d      	mov	r5, r3
 80036fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003700:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8003704:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003706:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800370a:	f7fc ff85 	bl	8000618 <__aeabi_dmul>
 800370e:	4602      	mov	r2, r0
 8003710:	460b      	mov	r3, r1
 8003712:	4620      	mov	r0, r4
 8003714:	4629      	mov	r1, r5
 8003716:	f7fc fdc9 	bl	80002ac <__adddf3>
 800371a:	4602      	mov	r2, r0
 800371c:	460b      	mov	r3, r1
 800371e:	4610      	mov	r0, r2
 8003720:	4619      	mov	r1, r3
 8003722:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003724:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8003728:	f7fc fdbe 	bl	80002a8 <__aeabi_dsub>
 800372c:	4602      	mov	r2, r0
 800372e:	460b      	mov	r3, r1
 8003730:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003732:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48

		/* Проверка достижения конечной точки */
		if ((fabs(arc->x_rel - arc->Xk) < MM_PER_STEP) && (fabs(arc->y_rel - arc->Yk) < MM_PER_STEP))
 8003736:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003738:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 800373c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800373e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003742:	f7fc fdb1 	bl	80002a8 <__aeabi_dsub>
 8003746:	4602      	mov	r2, r0
 8003748:	460b      	mov	r3, r1
 800374a:	61ba      	str	r2, [r7, #24]
 800374c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003750:	61fb      	str	r3, [r7, #28]
 8003752:	a37f      	add	r3, pc, #508	@ (adr r3, 8003950 <handlerArc+0x510>)
 8003754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003758:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800375c:	f7fd f9ce 	bl	8000afc <__aeabi_dcmplt>
 8003760:	4603      	mov	r3, r0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d036      	beq.n	80037d4 <handlerArc+0x394>
 8003766:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003768:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800376c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800376e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003772:	f7fc fd99 	bl	80002a8 <__aeabi_dsub>
 8003776:	4602      	mov	r2, r0
 8003778:	460b      	mov	r3, r1
 800377a:	613a      	str	r2, [r7, #16]
 800377c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003780:	617b      	str	r3, [r7, #20]
 8003782:	a373      	add	r3, pc, #460	@ (adr r3, 8003950 <handlerArc+0x510>)
 8003784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003788:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800378c:	f7fd f9b6 	bl	8000afc <__aeabi_dcmplt>
 8003790:	4603      	mov	r3, r0
 8003792:	2b00      	cmp	r3, #0
 8003794:	d01e      	beq.n	80037d4 <handlerArc+0x394>
		{
			X = arc->Xk + arc->Xc;
 8003796:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003798:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800379c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800379e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80037a2:	f7fc fd83 	bl	80002ac <__adddf3>
 80037a6:	4602      	mov	r2, r0
 80037a8:	460b      	mov	r3, r1
 80037aa:	496c      	ldr	r1, [pc, #432]	@ (800395c <handlerArc+0x51c>)
 80037ac:	e9c1 2300 	strd	r2, r3, [r1]
			Y = arc->Yk + arc->Yc;
 80037b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037b2:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80037b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037b8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80037bc:	f7fc fd76 	bl	80002ac <__adddf3>
 80037c0:	4602      	mov	r2, r0
 80037c2:	460b      	mov	r3, r1
 80037c4:	4966      	ldr	r1, [pc, #408]	@ (8003960 <handlerArc+0x520>)
 80037c6:	e9c1 2300 	strd	r2, r3, [r1]

			interpolator->_workState = INTERPOLATOR_READY;
 80037ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80037cc:	2201      	movs	r2, #1
 80037ce:	701a      	strb	r2, [r3, #0]
			return INTERPOLATOR_DONE;
 80037d0:	2300      	movs	r3, #0
 80037d2:	e0f5      	b.n	80039c0 <handlerArc+0x580>
		}

		/* Условие прохождения оси координат */
		if (fabs(arc->x_rel) <= MM_PER_STEP || fabs(arc->y_rel) <= MM_PER_STEP)
 80037d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037d6:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80037da:	60ba      	str	r2, [r7, #8]
 80037dc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80037e0:	60fb      	str	r3, [r7, #12]
 80037e2:	a35b      	add	r3, pc, #364	@ (adr r3, 8003950 <handlerArc+0x510>)
 80037e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037e8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80037ec:	f7fd f990 	bl	8000b10 <__aeabi_dcmple>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d111      	bne.n	800381a <handlerArc+0x3da>
 80037f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037f8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80037fc:	603a      	str	r2, [r7, #0]
 80037fe:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003802:	607b      	str	r3, [r7, #4]
 8003804:	a352      	add	r3, pc, #328	@ (adr r3, 8003950 <handlerArc+0x510>)
 8003806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800380a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800380e:	f7fd f97f 	bl	8000b10 <__aeabi_dcmple>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	f000 80cf 	beq.w	80039b8 <handlerArc+0x578>
		{
			/* Переопределение четверти, в которой расположена текущая точка дуги */
			if (arc->x_rel >= 0 && arc->y_rel > 0) { arc->dx = 1 * arc->dir; arc->dy = -1 * arc->dir; arc->s = -1 * arc->dir; }             //< 1 четверть
 800381a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800381c:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8003820:	f04f 0200 	mov.w	r2, #0
 8003824:	f04f 0300 	mov.w	r3, #0
 8003828:	f7fd f97c 	bl	8000b24 <__aeabi_dcmpge>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d026      	beq.n	8003880 <handlerArc+0x440>
 8003832:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003834:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8003838:	f04f 0200 	mov.w	r2, #0
 800383c:	f04f 0300 	mov.w	r3, #0
 8003840:	f7fd f97a 	bl	8000b38 <__aeabi_dcmpgt>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d01a      	beq.n	8003880 <handlerArc+0x440>
 800384a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800384c:	f993 2053 	ldrsb.w	r2, [r3, #83]	@ 0x53
 8003850:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003852:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8003856:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003858:	f993 3053 	ldrsb.w	r3, [r3, #83]	@ 0x53
 800385c:	b2db      	uxtb	r3, r3
 800385e:	425b      	negs	r3, r3
 8003860:	b2db      	uxtb	r3, r3
 8003862:	b25a      	sxtb	r2, r3
 8003864:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003866:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 800386a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800386c:	f993 3053 	ldrsb.w	r3, [r3, #83]	@ 0x53
 8003870:	b2db      	uxtb	r3, r3
 8003872:	425b      	negs	r3, r3
 8003874:	b2db      	uxtb	r3, r3
 8003876:	b25a      	sxtb	r2, r3
 8003878:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800387a:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
 800387e:	e09b      	b.n	80039b8 <handlerArc+0x578>
			else if (arc->y_rel <= 0 && arc->x_rel > 0) { arc->dx = -1 * arc->dir; arc->dy = -1 * arc->dir; arc->s = 1 * arc->dir; }        //< 4 четверть
 8003880:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003882:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8003886:	f04f 0200 	mov.w	r2, #0
 800388a:	f04f 0300 	mov.w	r3, #0
 800388e:	f7fd f93f 	bl	8000b10 <__aeabi_dcmple>
 8003892:	4603      	mov	r3, r0
 8003894:	2b00      	cmp	r3, #0
 8003896:	d026      	beq.n	80038e6 <handlerArc+0x4a6>
 8003898:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800389a:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 800389e:	f04f 0200 	mov.w	r2, #0
 80038a2:	f04f 0300 	mov.w	r3, #0
 80038a6:	f7fd f947 	bl	8000b38 <__aeabi_dcmpgt>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d01a      	beq.n	80038e6 <handlerArc+0x4a6>
 80038b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038b2:	f993 3053 	ldrsb.w	r3, [r3, #83]	@ 0x53
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	425b      	negs	r3, r3
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	b25a      	sxtb	r2, r3
 80038be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80038c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038c6:	f993 3053 	ldrsb.w	r3, [r3, #83]	@ 0x53
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	425b      	negs	r3, r3
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	b25a      	sxtb	r2, r3
 80038d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 80038d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038da:	f993 2053 	ldrsb.w	r2, [r3, #83]	@ 0x53
 80038de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038e0:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
 80038e4:	e068      	b.n	80039b8 <handlerArc+0x578>
			else if (arc->x_rel <= 0 && arc->y_rel < 0) { arc->dx = -1 * arc->dir; arc->dy = 1 * arc->dir; arc->s = -1 * arc->dir; }        //< 3 четверть
 80038e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038e8:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 80038ec:	f04f 0200 	mov.w	r2, #0
 80038f0:	f04f 0300 	mov.w	r3, #0
 80038f4:	f7fd f90c 	bl	8000b10 <__aeabi_dcmple>
 80038f8:	4603      	mov	r3, r0
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d032      	beq.n	8003964 <handlerArc+0x524>
 80038fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003900:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8003904:	f04f 0200 	mov.w	r2, #0
 8003908:	f04f 0300 	mov.w	r3, #0
 800390c:	f7fd f8f6 	bl	8000afc <__aeabi_dcmplt>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d026      	beq.n	8003964 <handlerArc+0x524>
 8003916:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003918:	f993 3053 	ldrsb.w	r3, [r3, #83]	@ 0x53
 800391c:	b2db      	uxtb	r3, r3
 800391e:	425b      	negs	r3, r3
 8003920:	b2db      	uxtb	r3, r3
 8003922:	b25a      	sxtb	r2, r3
 8003924:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003926:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800392a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800392c:	f993 2053 	ldrsb.w	r2, [r3, #83]	@ 0x53
 8003930:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003932:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8003936:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003938:	f993 3053 	ldrsb.w	r3, [r3, #83]	@ 0x53
 800393c:	b2db      	uxtb	r3, r3
 800393e:	425b      	negs	r3, r3
 8003940:	b2db      	uxtb	r3, r3
 8003942:	b25a      	sxtb	r2, r3
 8003944:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003946:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
 800394a:	e035      	b.n	80039b8 <handlerArc+0x578>
 800394c:	f3af 8000 	nop.w
 8003950:	a0000000 	.word	0xa0000000
 8003954:	3f799999 	.word	0x3f799999
 8003958:	20001010 	.word	0x20001010
 800395c:	20001018 	.word	0x20001018
 8003960:	20001020 	.word	0x20001020
			else if (arc->y_rel >= 0 && arc->x_rel < 0) { arc->dx = 1 * arc->dir; arc->dy = 1 * arc->dir; arc->s = 1 * arc->dir; }          //< 2 четверть
 8003964:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003966:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800396a:	f04f 0200 	mov.w	r2, #0
 800396e:	f04f 0300 	mov.w	r3, #0
 8003972:	f7fd f8d7 	bl	8000b24 <__aeabi_dcmpge>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d01d      	beq.n	80039b8 <handlerArc+0x578>
 800397c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800397e:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8003982:	f04f 0200 	mov.w	r2, #0
 8003986:	f04f 0300 	mov.w	r3, #0
 800398a:	f7fd f8b7 	bl	8000afc <__aeabi_dcmplt>
 800398e:	4603      	mov	r3, r0
 8003990:	2b00      	cmp	r3, #0
 8003992:	d011      	beq.n	80039b8 <handlerArc+0x578>
 8003994:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003996:	f993 2053 	ldrsb.w	r2, [r3, #83]	@ 0x53
 800399a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800399c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80039a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039a2:	f993 2053 	ldrsb.w	r2, [r3, #83]	@ 0x53
 80039a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 80039ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039ae:	f993 2053 	ldrsb.w	r2, [r3, #83]	@ 0x53
 80039b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039b4:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
		}

		interpolator->_workState = INTERPOLATOR_READY;
 80039b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80039ba:	2201      	movs	r2, #1
 80039bc:	701a      	strb	r2, [r3, #0]

	}

    return INTERPOLATOR_PROCESSING;
 80039be:	2302      	movs	r3, #2
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3760      	adds	r7, #96	@ 0x60
 80039c4:	46bd      	mov	sp, r7
 80039c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039ca:	bf00      	nop

080039cc <setStepsBin>:

/** Функция формирования двоичного представления шагов по осям
  * step - шаг по оси, может быть 1 или -1
  */
uint8_t setStepsBin(uint8_t axis, int8_t step)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b085      	sub	sp, #20
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	4603      	mov	r3, r0
 80039d4:	460a      	mov	r2, r1
 80039d6:	71fb      	strb	r3, [r7, #7]
 80039d8:	4613      	mov	r3, r2
 80039da:	71bb      	strb	r3, [r7, #6]
    int8_t bin = 0b00000000;
 80039dc:	2300      	movs	r3, #0
 80039de:	73fb      	strb	r3, [r7, #15]

    if (step == 1)
 80039e0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d109      	bne.n	80039fc <setStepsBin+0x30>
    {
        bin |= 0b00000001 << axis * 2;
 80039e8:	79fb      	ldrb	r3, [r7, #7]
 80039ea:	005b      	lsls	r3, r3, #1
 80039ec:	2201      	movs	r2, #1
 80039ee:	fa02 f303 	lsl.w	r3, r2, r3
 80039f2:	b25a      	sxtb	r2, r3
 80039f4:	7bfb      	ldrb	r3, [r7, #15]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	73fb      	strb	r3, [r7, #15]
 80039fa:	e00d      	b.n	8003a18 <setStepsBin+0x4c>
    }
    else if (step == -1)
 80039fc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a04:	d108      	bne.n	8003a18 <setStepsBin+0x4c>
    {
        bin |= 0b00000011 << axis * 2;
 8003a06:	79fb      	ldrb	r3, [r7, #7]
 8003a08:	005b      	lsls	r3, r3, #1
 8003a0a:	2203      	movs	r2, #3
 8003a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a10:	b25a      	sxtb	r2, r3
 8003a12:	7bfb      	ldrb	r3, [r7, #15]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	73fb      	strb	r3, [r7, #15]
    }

    return bin;
 8003a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3714      	adds	r7, #20
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr

08003a26 <laserInit>:
extern SPI_HandleTypeDef hspi3;

/** Функция инициализации лазера
 */
void laserInit(LASER_StructDef* laser, LASER_PINS_StructDef* pins)
{
 8003a26:	b480      	push	{r7}
 8003a28:	b083      	sub	sp, #12
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	6078      	str	r0, [r7, #4]
 8003a2e:	6039      	str	r1, [r7, #0]
	laser->laser_pins->GPIOx_gate = pins->GPIOx_gate;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	683a      	ldr	r2, [r7, #0]
 8003a36:	6812      	ldr	r2, [r2, #0]
 8003a38:	601a      	str	r2, [r3, #0]
	laser->laser_pins->GPIO_Pin_gate = pins->GPIO_Pin_gate;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	683a      	ldr	r2, [r7, #0]
 8003a40:	8892      	ldrh	r2, [r2, #4]
 8003a42:	809a      	strh	r2, [r3, #4]

	laser->en = OFF;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2200      	movs	r2, #0
 8003a48:	711a      	strb	r2, [r3, #4]

	laser->_globEn = false;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	715a      	strb	r2, [r3, #5]
}
 8003a50:	bf00      	nop
 8003a52:	370c      	adds	r7, #12
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr

08003a5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b084      	sub	sp, #16
 8003a60:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003a62:	f003 fa17 	bl	8006e94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003a66:	f000 f8e3 	bl	8003c30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003a6a:	f000 fbd7 	bl	800421c <MX_GPIO_Init>
  MX_ADC1_Init();
 8003a6e:	f000 f949 	bl	8003d04 <MX_ADC1_Init>
  MX_CAN1_Init();
 8003a72:	f000 f999 	bl	8003da8 <MX_CAN1_Init>
  MX_DAC_Init();
 8003a76:	f000 f9cb 	bl	8003e10 <MX_DAC_Init>
  MX_I2C1_Init();
 8003a7a:	f000 f9fd 	bl	8003e78 <MX_I2C1_Init>
  MX_TIM13_Init();
 8003a7e:	f000 fafd 	bl	800407c <MX_TIM13_Init>
  MX_USART1_UART_Init();
 8003a82:	f000 fb49 	bl	8004118 <MX_USART1_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8003a86:	f000 fb9b 	bl	80041c0 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI3_Init();
 8003a8a:	f000 fa23 	bl	8003ed4 <MX_SPI3_Init>
  MX_USART3_UART_Init();
 8003a8e:	f000 fb6d 	bl	800416c <MX_USART3_UART_Init>
  MX_LWIP_Init();
 8003a92:	f007 ff35 	bl	800b900 <MX_LWIP_Init>
  MX_TIM2_Init();
 8003a96:	f000 faa5 	bl	8003fe4 <MX_TIM2_Init>
  MX_TIM1_Init();
 8003a9a:	f000 fa51 	bl	8003f40 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  /* ----------------------------------------------- Инициализация -------------------------------------------- */

  /* Инициализация таймер DWT для одного шага в библиотеке stepper.h */
  DWT_Init();
 8003a9e:	f7fe fb67 	bl	8002170 <DWT_Init>

  /* Инициализация UDP сокета */
  UDP_Init();
 8003aa2:	f001 fd07 	bl	80054b4 <UDP_Init>

  /* Инициализация указателей на функции HAL для работы библиотек pin.h и driver.h */
  pinFunctionsInit(function_pin_1);
 8003aa6:	4b4e      	ldr	r3, [pc, #312]	@ (8003be0 <main+0x184>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f002 f856 	bl	8005b5c <pinFunctionsInit>
  driverFunctionsInit(function_time_1, function_time_2, function_time_3, function_time_4);
 8003ab0:	4b4c      	ldr	r3, [pc, #304]	@ (8003be4 <main+0x188>)
 8003ab2:	6818      	ldr	r0, [r3, #0]
 8003ab4:	4b4c      	ldr	r3, [pc, #304]	@ (8003be8 <main+0x18c>)
 8003ab6:	6819      	ldr	r1, [r3, #0]
 8003ab8:	4b4c      	ldr	r3, [pc, #304]	@ (8003bec <main+0x190>)
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	4b4c      	ldr	r3, [pc, #304]	@ (8003bf0 <main+0x194>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f7fd fbcc 	bl	800125c <driverFunctionsInit>

  /* Инициализация шаговых моторов */
  stepperInit(&stepper[0], &stepper0_pins);
 8003ac4:	494b      	ldr	r1, [pc, #300]	@ (8003bf4 <main+0x198>)
 8003ac6:	484c      	ldr	r0, [pc, #304]	@ (8003bf8 <main+0x19c>)
 8003ac8:	f002 fb9e 	bl	8006208 <stepperInit>
  stepperInit(&stepper[1], &stepper1_pins);
 8003acc:	494b      	ldr	r1, [pc, #300]	@ (8003bfc <main+0x1a0>)
 8003ace:	484c      	ldr	r0, [pc, #304]	@ (8003c00 <main+0x1a4>)
 8003ad0:	f002 fb9a 	bl	8006208 <stepperInit>

  /* Инициализация драйверов шаговых моторов */
  driverInit(&driver[0], &stepper[0], &driver0_pins, 800, LINEAR, 'X');
 8003ad4:	2358      	movs	r3, #88	@ 0x58
 8003ad6:	9301      	str	r3, [sp, #4]
 8003ad8:	2300      	movs	r3, #0
 8003ada:	9300      	str	r3, [sp, #0]
 8003adc:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8003ae0:	4a48      	ldr	r2, [pc, #288]	@ (8003c04 <main+0x1a8>)
 8003ae2:	4945      	ldr	r1, [pc, #276]	@ (8003bf8 <main+0x19c>)
 8003ae4:	4848      	ldr	r0, [pc, #288]	@ (8003c08 <main+0x1ac>)
 8003ae6:	f7fd fbdb 	bl	80012a0 <driverInit>
  driverInit(&driver[1], &stepper[1], &driver1_pins, 800, LINEAR, 'Y');
 8003aea:	2359      	movs	r3, #89	@ 0x59
 8003aec:	9301      	str	r3, [sp, #4]
 8003aee:	2300      	movs	r3, #0
 8003af0:	9300      	str	r3, [sp, #0]
 8003af2:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8003af6:	4a45      	ldr	r2, [pc, #276]	@ (8003c0c <main+0x1b0>)
 8003af8:	4941      	ldr	r1, [pc, #260]	@ (8003c00 <main+0x1a4>)
 8003afa:	4845      	ldr	r0, [pc, #276]	@ (8003c10 <main+0x1b4>)
 8003afc:	f7fd fbd0 	bl	80012a0 <driverInit>

  /* Инициализация планировщика*/
  plannerInit(&planner);
 8003b00:	4844      	ldr	r0, [pc, #272]	@ (8003c14 <main+0x1b8>)
 8003b02:	f002 f85f 	bl	8005bc4 <plannerInit>
  plannerFunctionsInit(function_time_3);
 8003b06:	4b39      	ldr	r3, [pc, #228]	@ (8003bec <main+0x190>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f002 f84a 	bl	8005ba4 <plannerFunctionsInit>

  /* Инициализация обработчика g - команд*/
  handlerGcodeInit(&ghandler);
 8003b10:	4841      	ldr	r0, [pc, #260]	@ (8003c18 <main+0x1bc>)
 8003b12:	f7fe fcd9 	bl	80024c8 <handlerGcodeInit>

  /* Инициализация лазера */
  laserInit(&laser, &laser_pins);
 8003b16:	4941      	ldr	r1, [pc, #260]	@ (8003c1c <main+0x1c0>)
 8003b18:	4841      	ldr	r0, [pc, #260]	@ (8003c20 <main+0x1c4>)
 8003b1a:	f7ff ff84 	bl	8003a26 <laserInit>

  /* ----------------------------------------------- Инициализация -------------------------------------------- */

  /* Добавить драйверы в планировщик */
  addDriver(&planner, &driver[0], 0);
 8003b1e:	2200      	movs	r2, #0
 8003b20:	4939      	ldr	r1, [pc, #228]	@ (8003c08 <main+0x1ac>)
 8003b22:	483c      	ldr	r0, [pc, #240]	@ (8003c14 <main+0x1b8>)
 8003b24:	f002 fb26 	bl	8006174 <addDriver>
  addDriver(&planner, &driver[1], 1);
 8003b28:	2201      	movs	r2, #1
 8003b2a:	4939      	ldr	r1, [pc, #228]	@ (8003c10 <main+0x1b4>)
 8003b2c:	4839      	ldr	r0, [pc, #228]	@ (8003c14 <main+0x1b8>)
 8003b2e:	f002 fb21 	bl	8006174 <addDriver>

  /* Запуск таймера TIM2 */
  startTimerTIM2();
 8003b32:	f000 fcc1 	bl	80044b8 <startTimerTIM2>

  /* Запуск таймера TIM1 */
//  startTimerTIM1();

  /* Включить драйверы моторов */
  for(uint8_t i = 0; i < AXES; i ++)
 8003b36:	2300      	movs	r3, #0
 8003b38:	71fb      	strb	r3, [r7, #7]
 8003b3a:	e00b      	b.n	8003b54 <main+0xf8>
  {
	  enableDriver(&driver[i]);
 8003b3c:	79fb      	ldrb	r3, [r7, #7]
 8003b3e:	226c      	movs	r2, #108	@ 0x6c
 8003b40:	fb02 f303 	mul.w	r3, r2, r3
 8003b44:	4a30      	ldr	r2, [pc, #192]	@ (8003c08 <main+0x1ac>)
 8003b46:	4413      	add	r3, r2
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f7fd fc6b 	bl	8001424 <enableDriver>
  for(uint8_t i = 0; i < AXES; i ++)
 8003b4e:	79fb      	ldrb	r3, [r7, #7]
 8003b50:	3301      	adds	r3, #1
 8003b52:	71fb      	strb	r3, [r7, #7]
 8003b54:	79fb      	ldrb	r3, [r7, #7]
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d9f0      	bls.n	8003b3c <main+0xe0>
  }

  /* Тест */

  driver[0].stepper->_globDir = true;
 8003b5a:	4b2b      	ldr	r3, [pc, #172]	@ (8003c08 <main+0x1ac>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	72da      	strb	r2, [r3, #11]
  driver[1].stepper->_globDir = true;
 8003b62:	4b29      	ldr	r3, [pc, #164]	@ (8003c08 <main+0x1ac>)
 8003b64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b66:	2201      	movs	r2, #1
 8003b68:	72da      	strb	r2, [r3, #11]
  {
	  /* Вызов тестовой функции для проверки плат интерфейса шагового мотора */
//	  testStepDirPin();

	  /* Основные функции управления драйверами */
	  for(uint8_t i = 0; i < AXES; i ++)
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	71bb      	strb	r3, [r7, #6]
 8003b6e:	e00b      	b.n	8003b88 <main+0x12c>
	  {
		  tickDriver(&driver[i]);
 8003b70:	79bb      	ldrb	r3, [r7, #6]
 8003b72:	226c      	movs	r2, #108	@ 0x6c
 8003b74:	fb02 f303 	mul.w	r3, r2, r3
 8003b78:	4a23      	ldr	r2, [pc, #140]	@ (8003c08 <main+0x1ac>)
 8003b7a:	4413      	add	r3, r2
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f7fd fc75 	bl	800146c <tickDriver>
	  for(uint8_t i = 0; i < AXES; i ++)
 8003b82:	79bb      	ldrb	r3, [r7, #6]
 8003b84:	3301      	adds	r3, #1
 8003b86:	71bb      	strb	r3, [r7, #6]
 8003b88:	79bb      	ldrb	r3, [r7, #6]
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d9f0      	bls.n	8003b70 <main+0x114>
	  }

	  /* Тикер обработчика g - кода */
	  tickGcodeHandler(&ghandler);
 8003b8e:	4822      	ldr	r0, [pc, #136]	@ (8003c18 <main+0x1bc>)
 8003b90:	f7fe fcbc 	bl	800250c <tickGcodeHandler>

	  /* Тикер осевого планировщика */
	  if(_runFlag == true)
 8003b94:	4b23      	ldr	r3, [pc, #140]	@ (8003c24 <main+0x1c8>)
 8003b96:	781b      	ldrb	r3, [r3, #0]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d01d      	beq.n	8003bd8 <main+0x17c>
	  {
		  if (availableForRead(&fifoBufSteps) == FIFO_OK)
 8003b9c:	4822      	ldr	r0, [pc, #136]	@ (8003c28 <main+0x1cc>)
 8003b9e:	f7fe fb8f 	bl	80022c0 <availableForRead>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d102      	bne.n	8003bae <main+0x152>
		  {
			  /* Тикер планировщика многоосевого движения */
			  tickPlanner(&planner);
 8003ba8:	481a      	ldr	r0, [pc, #104]	@ (8003c14 <main+0x1b8>)
 8003baa:	f002 f865 	bl	8005c78 <tickPlanner>
		  }

		  if(availableForReadChar(&fifoGcodeBuf) == FIFO_EMPTY && availableForRead(&fifoBufSteps) == FIFO_EMPTY)
 8003bae:	481f      	ldr	r0, [pc, #124]	@ (8003c2c <main+0x1d0>)
 8003bb0:	f7fe fc50 	bl	8002454 <availableForReadChar>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	2b02      	cmp	r3, #2
 8003bb8:	d10e      	bne.n	8003bd8 <main+0x17c>
 8003bba:	481b      	ldr	r0, [pc, #108]	@ (8003c28 <main+0x1cc>)
 8003bbc:	f7fe fb80 	bl	80022c0 <availableForRead>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	d108      	bne.n	8003bd8 <main+0x17c>
		  {
			  handlerEndState(&ghandler);
 8003bc6:	4814      	ldr	r0, [pc, #80]	@ (8003c18 <main+0x1bc>)
 8003bc8:	f7fe fe8a 	bl	80028e0 <handlerEndState>
			  planner._workState = PLANNER_END;
 8003bcc:	4b11      	ldr	r3, [pc, #68]	@ (8003c14 <main+0x1b8>)
 8003bce:	2205      	movs	r2, #5
 8003bd0:	76da      	strb	r2, [r3, #27]
			  _runFlag = false;
 8003bd2:	4b14      	ldr	r3, [pc, #80]	@ (8003c24 <main+0x1c8>)
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	701a      	strb	r2, [r3, #0]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  /* Ethernet */
	  MX_LWIP_Process();
 8003bd8:	f007 ffd2 	bl	800bb80 <MX_LWIP_Process>
	  for(uint8_t i = 0; i < AXES; i ++)
 8003bdc:	e7c5      	b.n	8003b6a <main+0x10e>
 8003bde:	bf00      	nop
 8003be0:	2000081c 	.word	0x2000081c
 8003be4:	20000820 	.word	0x20000820
 8003be8:	20000824 	.word	0x20000824
 8003bec:	20000828 	.word	0x20000828
 8003bf0:	2000082c 	.word	0x2000082c
 8003bf4:	20000830 	.word	0x20000830
 8003bf8:	2000dfb4 	.word	0x2000dfb4
 8003bfc:	20000848 	.word	0x20000848
 8003c00:	2000dfc0 	.word	0x2000dfc0
 8003c04:	20000860 	.word	0x20000860
 8003c08:	2000e014 	.word	0x2000e014
 8003c0c:	20000878 	.word	0x20000878
 8003c10:	2000e080 	.word	0x2000e080
 8003c14:	2000e374 	.word	0x2000e374
 8003c18:	2000e424 	.word	0x2000e424
 8003c1c:	20000890 	.word	0x20000890
 8003c20:	2000e41c 	.word	0x2000e41c
 8003c24:	2000e42c 	.word	0x2000e42c
 8003c28:	2000d828 	.word	0x2000d828
 8003c2c:	20000ff4 	.word	0x20000ff4

08003c30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b094      	sub	sp, #80	@ 0x50
 8003c34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003c36:	f107 0320 	add.w	r3, r7, #32
 8003c3a:	2230      	movs	r2, #48	@ 0x30
 8003c3c:	2100      	movs	r1, #0
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f014 f865 	bl	8017d0e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003c44:	f107 030c 	add.w	r3, r7, #12
 8003c48:	2200      	movs	r2, #0
 8003c4a:	601a      	str	r2, [r3, #0]
 8003c4c:	605a      	str	r2, [r3, #4]
 8003c4e:	609a      	str	r2, [r3, #8]
 8003c50:	60da      	str	r2, [r3, #12]
 8003c52:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c54:	2300      	movs	r3, #0
 8003c56:	60bb      	str	r3, [r7, #8]
 8003c58:	4b28      	ldr	r3, [pc, #160]	@ (8003cfc <SystemClock_Config+0xcc>)
 8003c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c5c:	4a27      	ldr	r2, [pc, #156]	@ (8003cfc <SystemClock_Config+0xcc>)
 8003c5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c62:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c64:	4b25      	ldr	r3, [pc, #148]	@ (8003cfc <SystemClock_Config+0xcc>)
 8003c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c6c:	60bb      	str	r3, [r7, #8]
 8003c6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c70:	2300      	movs	r3, #0
 8003c72:	607b      	str	r3, [r7, #4]
 8003c74:	4b22      	ldr	r3, [pc, #136]	@ (8003d00 <SystemClock_Config+0xd0>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a21      	ldr	r2, [pc, #132]	@ (8003d00 <SystemClock_Config+0xd0>)
 8003c7a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003c7e:	6013      	str	r3, [r2, #0]
 8003c80:	4b1f      	ldr	r3, [pc, #124]	@ (8003d00 <SystemClock_Config+0xd0>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c88:	607b      	str	r3, [r7, #4]
 8003c8a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003c90:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003c94:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003c96:	2302      	movs	r3, #2
 8003c98:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003c9a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003c9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003ca0:	2304      	movs	r3, #4
 8003ca2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003ca4:	23a8      	movs	r3, #168	@ 0xa8
 8003ca6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003ca8:	2302      	movs	r3, #2
 8003caa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003cac:	2307      	movs	r3, #7
 8003cae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003cb0:	f107 0320 	add.w	r3, r7, #32
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f005 fbc5 	bl	8009444 <HAL_RCC_OscConfig>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d001      	beq.n	8003cc4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003cc0:	f001 fbf2 	bl	80054a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003cc4:	230f      	movs	r3, #15
 8003cc6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003cc8:	2302      	movs	r3, #2
 8003cca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003cd0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003cd4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003cd6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003cda:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003cdc:	f107 030c 	add.w	r3, r7, #12
 8003ce0:	2105      	movs	r1, #5
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f005 fe26 	bl	8009934 <HAL_RCC_ClockConfig>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d001      	beq.n	8003cf2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003cee:	f001 fbdb 	bl	80054a8 <Error_Handler>
  }
}
 8003cf2:	bf00      	nop
 8003cf4:	3750      	adds	r7, #80	@ 0x50
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	40023800 	.word	0x40023800
 8003d00:	40007000 	.word	0x40007000

08003d04 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b084      	sub	sp, #16
 8003d08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003d0a:	463b      	mov	r3, r7
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	601a      	str	r2, [r3, #0]
 8003d10:	605a      	str	r2, [r3, #4]
 8003d12:	609a      	str	r2, [r3, #8]
 8003d14:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003d16:	4b21      	ldr	r3, [pc, #132]	@ (8003d9c <MX_ADC1_Init+0x98>)
 8003d18:	4a21      	ldr	r2, [pc, #132]	@ (8003da0 <MX_ADC1_Init+0x9c>)
 8003d1a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003d1c:	4b1f      	ldr	r3, [pc, #124]	@ (8003d9c <MX_ADC1_Init+0x98>)
 8003d1e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003d22:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003d24:	4b1d      	ldr	r3, [pc, #116]	@ (8003d9c <MX_ADC1_Init+0x98>)
 8003d26:	2200      	movs	r2, #0
 8003d28:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8003d2a:	4b1c      	ldr	r3, [pc, #112]	@ (8003d9c <MX_ADC1_Init+0x98>)
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003d30:	4b1a      	ldr	r3, [pc, #104]	@ (8003d9c <MX_ADC1_Init+0x98>)
 8003d32:	2200      	movs	r2, #0
 8003d34:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003d36:	4b19      	ldr	r3, [pc, #100]	@ (8003d9c <MX_ADC1_Init+0x98>)
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003d3e:	4b17      	ldr	r3, [pc, #92]	@ (8003d9c <MX_ADC1_Init+0x98>)
 8003d40:	2200      	movs	r2, #0
 8003d42:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003d44:	4b15      	ldr	r3, [pc, #84]	@ (8003d9c <MX_ADC1_Init+0x98>)
 8003d46:	4a17      	ldr	r2, [pc, #92]	@ (8003da4 <MX_ADC1_Init+0xa0>)
 8003d48:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003d4a:	4b14      	ldr	r3, [pc, #80]	@ (8003d9c <MX_ADC1_Init+0x98>)
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8003d50:	4b12      	ldr	r3, [pc, #72]	@ (8003d9c <MX_ADC1_Init+0x98>)
 8003d52:	2201      	movs	r2, #1
 8003d54:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003d56:	4b11      	ldr	r3, [pc, #68]	@ (8003d9c <MX_ADC1_Init+0x98>)
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003d5e:	4b0f      	ldr	r3, [pc, #60]	@ (8003d9c <MX_ADC1_Init+0x98>)
 8003d60:	2201      	movs	r2, #1
 8003d62:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003d64:	480d      	ldr	r0, [pc, #52]	@ (8003d9c <MX_ADC1_Init+0x98>)
 8003d66:	f003 f92b 	bl	8006fc0 <HAL_ADC_Init>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d001      	beq.n	8003d74 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8003d70:	f001 fb9a 	bl	80054a8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003d74:	2300      	movs	r3, #0
 8003d76:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003d80:	463b      	mov	r3, r7
 8003d82:	4619      	mov	r1, r3
 8003d84:	4805      	ldr	r0, [pc, #20]	@ (8003d9c <MX_ADC1_Init+0x98>)
 8003d86:	f003 f95f 	bl	8007048 <HAL_ADC_ConfigChannel>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d001      	beq.n	8003d94 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8003d90:	f001 fb8a 	bl	80054a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003d94:	bf00      	nop
 8003d96:	3710      	adds	r7, #16
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	2000d838 	.word	0x2000d838
 8003da0:	40012000 	.word	0x40012000
 8003da4:	0f000001 	.word	0x0f000001

08003da8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8003dac:	4b16      	ldr	r3, [pc, #88]	@ (8003e08 <MX_CAN1_Init+0x60>)
 8003dae:	4a17      	ldr	r2, [pc, #92]	@ (8003e0c <MX_CAN1_Init+0x64>)
 8003db0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8003db2:	4b15      	ldr	r3, [pc, #84]	@ (8003e08 <MX_CAN1_Init+0x60>)
 8003db4:	2210      	movs	r2, #16
 8003db6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8003db8:	4b13      	ldr	r3, [pc, #76]	@ (8003e08 <MX_CAN1_Init+0x60>)
 8003dba:	2200      	movs	r2, #0
 8003dbc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8003dbe:	4b12      	ldr	r3, [pc, #72]	@ (8003e08 <MX_CAN1_Init+0x60>)
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8003dc4:	4b10      	ldr	r3, [pc, #64]	@ (8003e08 <MX_CAN1_Init+0x60>)
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8003dca:	4b0f      	ldr	r3, [pc, #60]	@ (8003e08 <MX_CAN1_Init+0x60>)
 8003dcc:	2200      	movs	r2, #0
 8003dce:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8003dd0:	4b0d      	ldr	r3, [pc, #52]	@ (8003e08 <MX_CAN1_Init+0x60>)
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8003dd6:	4b0c      	ldr	r3, [pc, #48]	@ (8003e08 <MX_CAN1_Init+0x60>)
 8003dd8:	2200      	movs	r2, #0
 8003dda:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8003ddc:	4b0a      	ldr	r3, [pc, #40]	@ (8003e08 <MX_CAN1_Init+0x60>)
 8003dde:	2200      	movs	r2, #0
 8003de0:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8003de2:	4b09      	ldr	r3, [pc, #36]	@ (8003e08 <MX_CAN1_Init+0x60>)
 8003de4:	2200      	movs	r2, #0
 8003de6:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8003de8:	4b07      	ldr	r3, [pc, #28]	@ (8003e08 <MX_CAN1_Init+0x60>)
 8003dea:	2200      	movs	r2, #0
 8003dec:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8003dee:	4b06      	ldr	r3, [pc, #24]	@ (8003e08 <MX_CAN1_Init+0x60>)
 8003df0:	2200      	movs	r2, #0
 8003df2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8003df4:	4804      	ldr	r0, [pc, #16]	@ (8003e08 <MX_CAN1_Init+0x60>)
 8003df6:	f003 fb45 	bl	8007484 <HAL_CAN_Init>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d001      	beq.n	8003e04 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8003e00:	f001 fb52 	bl	80054a8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8003e04:	bf00      	nop
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	2000d880 	.word	0x2000d880
 8003e0c:	40006400 	.word	0x40006400

08003e10 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b082      	sub	sp, #8
 8003e14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8003e16:	463b      	mov	r3, r7
 8003e18:	2200      	movs	r2, #0
 8003e1a:	601a      	str	r2, [r3, #0]
 8003e1c:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8003e1e:	4b14      	ldr	r3, [pc, #80]	@ (8003e70 <MX_DAC_Init+0x60>)
 8003e20:	4a14      	ldr	r2, [pc, #80]	@ (8003e74 <MX_DAC_Init+0x64>)
 8003e22:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8003e24:	4812      	ldr	r0, [pc, #72]	@ (8003e70 <MX_DAC_Init+0x60>)
 8003e26:	f003 fd3a 	bl	800789e <HAL_DAC_Init>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d001      	beq.n	8003e34 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8003e30:	f001 fb3a 	bl	80054a8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8003e34:	2300      	movs	r3, #0
 8003e36:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8003e3c:	463b      	mov	r3, r7
 8003e3e:	2200      	movs	r2, #0
 8003e40:	4619      	mov	r1, r3
 8003e42:	480b      	ldr	r0, [pc, #44]	@ (8003e70 <MX_DAC_Init+0x60>)
 8003e44:	f003 fd4d 	bl	80078e2 <HAL_DAC_ConfigChannel>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d001      	beq.n	8003e52 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8003e4e:	f001 fb2b 	bl	80054a8 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8003e52:	463b      	mov	r3, r7
 8003e54:	2210      	movs	r2, #16
 8003e56:	4619      	mov	r1, r3
 8003e58:	4805      	ldr	r0, [pc, #20]	@ (8003e70 <MX_DAC_Init+0x60>)
 8003e5a:	f003 fd42 	bl	80078e2 <HAL_DAC_ConfigChannel>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d001      	beq.n	8003e68 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8003e64:	f001 fb20 	bl	80054a8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8003e68:	bf00      	nop
 8003e6a:	3708      	adds	r7, #8
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	2000d8a8 	.word	0x2000d8a8
 8003e74:	40007400 	.word	0x40007400

08003e78 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003e7c:	4b12      	ldr	r3, [pc, #72]	@ (8003ec8 <MX_I2C1_Init+0x50>)
 8003e7e:	4a13      	ldr	r2, [pc, #76]	@ (8003ecc <MX_I2C1_Init+0x54>)
 8003e80:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003e82:	4b11      	ldr	r3, [pc, #68]	@ (8003ec8 <MX_I2C1_Init+0x50>)
 8003e84:	4a12      	ldr	r2, [pc, #72]	@ (8003ed0 <MX_I2C1_Init+0x58>)
 8003e86:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003e88:	4b0f      	ldr	r3, [pc, #60]	@ (8003ec8 <MX_I2C1_Init+0x50>)
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003e8e:	4b0e      	ldr	r3, [pc, #56]	@ (8003ec8 <MX_I2C1_Init+0x50>)
 8003e90:	2200      	movs	r2, #0
 8003e92:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003e94:	4b0c      	ldr	r3, [pc, #48]	@ (8003ec8 <MX_I2C1_Init+0x50>)
 8003e96:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003e9a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003e9c:	4b0a      	ldr	r3, [pc, #40]	@ (8003ec8 <MX_I2C1_Init+0x50>)
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003ea2:	4b09      	ldr	r3, [pc, #36]	@ (8003ec8 <MX_I2C1_Init+0x50>)
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003ea8:	4b07      	ldr	r3, [pc, #28]	@ (8003ec8 <MX_I2C1_Init+0x50>)
 8003eaa:	2200      	movs	r2, #0
 8003eac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003eae:	4b06      	ldr	r3, [pc, #24]	@ (8003ec8 <MX_I2C1_Init+0x50>)
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003eb4:	4804      	ldr	r0, [pc, #16]	@ (8003ec8 <MX_I2C1_Init+0x50>)
 8003eb6:	f005 f871 	bl	8008f9c <HAL_I2C_Init>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d001      	beq.n	8003ec4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003ec0:	f001 faf2 	bl	80054a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003ec4:	bf00      	nop
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	2000d8bc 	.word	0x2000d8bc
 8003ecc:	40005400 	.word	0x40005400
 8003ed0:	000186a0 	.word	0x000186a0

08003ed4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8003ed8:	4b17      	ldr	r3, [pc, #92]	@ (8003f38 <MX_SPI3_Init+0x64>)
 8003eda:	4a18      	ldr	r2, [pc, #96]	@ (8003f3c <MX_SPI3_Init+0x68>)
 8003edc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8003ede:	4b16      	ldr	r3, [pc, #88]	@ (8003f38 <MX_SPI3_Init+0x64>)
 8003ee0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003ee4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8003ee6:	4b14      	ldr	r3, [pc, #80]	@ (8003f38 <MX_SPI3_Init+0x64>)
 8003ee8:	2200      	movs	r2, #0
 8003eea:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8003eec:	4b12      	ldr	r3, [pc, #72]	@ (8003f38 <MX_SPI3_Init+0x64>)
 8003eee:	2200      	movs	r2, #0
 8003ef0:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ef2:	4b11      	ldr	r3, [pc, #68]	@ (8003f38 <MX_SPI3_Init+0x64>)
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003ef8:	4b0f      	ldr	r3, [pc, #60]	@ (8003f38 <MX_SPI3_Init+0x64>)
 8003efa:	2200      	movs	r2, #0
 8003efc:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8003efe:	4b0e      	ldr	r3, [pc, #56]	@ (8003f38 <MX_SPI3_Init+0x64>)
 8003f00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f04:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f06:	4b0c      	ldr	r3, [pc, #48]	@ (8003f38 <MX_SPI3_Init+0x64>)
 8003f08:	2200      	movs	r2, #0
 8003f0a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003f0c:	4b0a      	ldr	r3, [pc, #40]	@ (8003f38 <MX_SPI3_Init+0x64>)
 8003f0e:	2200      	movs	r2, #0
 8003f10:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8003f12:	4b09      	ldr	r3, [pc, #36]	@ (8003f38 <MX_SPI3_Init+0x64>)
 8003f14:	2200      	movs	r2, #0
 8003f16:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f18:	4b07      	ldr	r3, [pc, #28]	@ (8003f38 <MX_SPI3_Init+0x64>)
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 8003f1e:	4b06      	ldr	r3, [pc, #24]	@ (8003f38 <MX_SPI3_Init+0x64>)
 8003f20:	220a      	movs	r2, #10
 8003f22:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003f24:	4804      	ldr	r0, [pc, #16]	@ (8003f38 <MX_SPI3_Init+0x64>)
 8003f26:	f005 ff25 	bl	8009d74 <HAL_SPI_Init>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d001      	beq.n	8003f34 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8003f30:	f001 faba 	bl	80054a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8003f34:	bf00      	nop
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	2000d910 	.word	0x2000d910
 8003f3c:	40003c00 	.word	0x40003c00

08003f40 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b086      	sub	sp, #24
 8003f44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003f46:	f107 0308 	add.w	r3, r7, #8
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	601a      	str	r2, [r3, #0]
 8003f4e:	605a      	str	r2, [r3, #4]
 8003f50:	609a      	str	r2, [r3, #8]
 8003f52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f54:	463b      	mov	r3, r7
 8003f56:	2200      	movs	r2, #0
 8003f58:	601a      	str	r2, [r3, #0]
 8003f5a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003f5c:	4b1f      	ldr	r3, [pc, #124]	@ (8003fdc <MX_TIM1_Init+0x9c>)
 8003f5e:	4a20      	ldr	r2, [pc, #128]	@ (8003fe0 <MX_TIM1_Init+0xa0>)
 8003f60:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1680 - 1;
 8003f62:	4b1e      	ldr	r3, [pc, #120]	@ (8003fdc <MX_TIM1_Init+0x9c>)
 8003f64:	f240 628f 	movw	r2, #1679	@ 0x68f
 8003f68:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f6a:	4b1c      	ldr	r3, [pc, #112]	@ (8003fdc <MX_TIM1_Init+0x9c>)
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50000 - 1;
 8003f70:	4b1a      	ldr	r3, [pc, #104]	@ (8003fdc <MX_TIM1_Init+0x9c>)
 8003f72:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8003f76:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f78:	4b18      	ldr	r3, [pc, #96]	@ (8003fdc <MX_TIM1_Init+0x9c>)
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003f7e:	4b17      	ldr	r3, [pc, #92]	@ (8003fdc <MX_TIM1_Init+0x9c>)
 8003f80:	2200      	movs	r2, #0
 8003f82:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f84:	4b15      	ldr	r3, [pc, #84]	@ (8003fdc <MX_TIM1_Init+0x9c>)
 8003f86:	2200      	movs	r2, #0
 8003f88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003f8a:	4814      	ldr	r0, [pc, #80]	@ (8003fdc <MX_TIM1_Init+0x9c>)
 8003f8c:	f005 ff7b 	bl	8009e86 <HAL_TIM_Base_Init>
 8003f90:	4603      	mov	r3, r0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d001      	beq.n	8003f9a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8003f96:	f001 fa87 	bl	80054a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003f9a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003f9e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003fa0:	f107 0308 	add.w	r3, r7, #8
 8003fa4:	4619      	mov	r1, r3
 8003fa6:	480d      	ldr	r0, [pc, #52]	@ (8003fdc <MX_TIM1_Init+0x9c>)
 8003fa8:	f006 fa66 	bl	800a478 <HAL_TIM_ConfigClockSource>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d001      	beq.n	8003fb6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8003fb2:	f001 fa79 	bl	80054a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003fb6:	2320      	movs	r3, #32
 8003fb8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003fbe:	463b      	mov	r3, r7
 8003fc0:	4619      	mov	r1, r3
 8003fc2:	4806      	ldr	r0, [pc, #24]	@ (8003fdc <MX_TIM1_Init+0x9c>)
 8003fc4:	f006 fe48 	bl	800ac58 <HAL_TIMEx_MasterConfigSynchronization>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d001      	beq.n	8003fd2 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8003fce:	f001 fa6b 	bl	80054a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003fd2:	bf00      	nop
 8003fd4:	3718      	adds	r7, #24
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	2000d968 	.word	0x2000d968
 8003fe0:	40010000 	.word	0x40010000

08003fe4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b086      	sub	sp, #24
 8003fe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003fea:	f107 0308 	add.w	r3, r7, #8
 8003fee:	2200      	movs	r2, #0
 8003ff0:	601a      	str	r2, [r3, #0]
 8003ff2:	605a      	str	r2, [r3, #4]
 8003ff4:	609a      	str	r2, [r3, #8]
 8003ff6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ff8:	463b      	mov	r3, r7
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	601a      	str	r2, [r3, #0]
 8003ffe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004000:	4b1d      	ldr	r3, [pc, #116]	@ (8004078 <MX_TIM2_Init+0x94>)
 8004002:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004006:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8004008:	4b1b      	ldr	r3, [pc, #108]	@ (8004078 <MX_TIM2_Init+0x94>)
 800400a:	2253      	movs	r2, #83	@ 0x53
 800400c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800400e:	4b1a      	ldr	r3, [pc, #104]	@ (8004078 <MX_TIM2_Init+0x94>)
 8004010:	2200      	movs	r2, #0
 8004012:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8004014:	4b18      	ldr	r3, [pc, #96]	@ (8004078 <MX_TIM2_Init+0x94>)
 8004016:	f04f 32ff 	mov.w	r2, #4294967295
 800401a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800401c:	4b16      	ldr	r3, [pc, #88]	@ (8004078 <MX_TIM2_Init+0x94>)
 800401e:	2200      	movs	r2, #0
 8004020:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004022:	4b15      	ldr	r3, [pc, #84]	@ (8004078 <MX_TIM2_Init+0x94>)
 8004024:	2200      	movs	r2, #0
 8004026:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004028:	4813      	ldr	r0, [pc, #76]	@ (8004078 <MX_TIM2_Init+0x94>)
 800402a:	f005 ff2c 	bl	8009e86 <HAL_TIM_Base_Init>
 800402e:	4603      	mov	r3, r0
 8004030:	2b00      	cmp	r3, #0
 8004032:	d001      	beq.n	8004038 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8004034:	f001 fa38 	bl	80054a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004038:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800403c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800403e:	f107 0308 	add.w	r3, r7, #8
 8004042:	4619      	mov	r1, r3
 8004044:	480c      	ldr	r0, [pc, #48]	@ (8004078 <MX_TIM2_Init+0x94>)
 8004046:	f006 fa17 	bl	800a478 <HAL_TIM_ConfigClockSource>
 800404a:	4603      	mov	r3, r0
 800404c:	2b00      	cmp	r3, #0
 800404e:	d001      	beq.n	8004054 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8004050:	f001 fa2a 	bl	80054a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004054:	2300      	movs	r3, #0
 8004056:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004058:	2300      	movs	r3, #0
 800405a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800405c:	463b      	mov	r3, r7
 800405e:	4619      	mov	r1, r3
 8004060:	4805      	ldr	r0, [pc, #20]	@ (8004078 <MX_TIM2_Init+0x94>)
 8004062:	f006 fdf9 	bl	800ac58 <HAL_TIMEx_MasterConfigSynchronization>
 8004066:	4603      	mov	r3, r0
 8004068:	2b00      	cmp	r3, #0
 800406a:	d001      	beq.n	8004070 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800406c:	f001 fa1c 	bl	80054a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004070:	bf00      	nop
 8004072:	3718      	adds	r7, #24
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}
 8004078:	2000d9b0 	.word	0x2000d9b0

0800407c <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b088      	sub	sp, #32
 8004080:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8004082:	1d3b      	adds	r3, r7, #4
 8004084:	2200      	movs	r2, #0
 8004086:	601a      	str	r2, [r3, #0]
 8004088:	605a      	str	r2, [r3, #4]
 800408a:	609a      	str	r2, [r3, #8]
 800408c:	60da      	str	r2, [r3, #12]
 800408e:	611a      	str	r2, [r3, #16]
 8004090:	615a      	str	r2, [r3, #20]
 8004092:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8004094:	4b1e      	ldr	r3, [pc, #120]	@ (8004110 <MX_TIM13_Init+0x94>)
 8004096:	4a1f      	ldr	r2, [pc, #124]	@ (8004114 <MX_TIM13_Init+0x98>)
 8004098:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 800409a:	4b1d      	ldr	r3, [pc, #116]	@ (8004110 <MX_TIM13_Init+0x94>)
 800409c:	2200      	movs	r2, #0
 800409e:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040a0:	4b1b      	ldr	r3, [pc, #108]	@ (8004110 <MX_TIM13_Init+0x94>)
 80040a2:	2200      	movs	r2, #0
 80040a4:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 80040a6:	4b1a      	ldr	r3, [pc, #104]	@ (8004110 <MX_TIM13_Init+0x94>)
 80040a8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80040ac:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80040ae:	4b18      	ldr	r3, [pc, #96]	@ (8004110 <MX_TIM13_Init+0x94>)
 80040b0:	2200      	movs	r2, #0
 80040b2:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80040b4:	4b16      	ldr	r3, [pc, #88]	@ (8004110 <MX_TIM13_Init+0x94>)
 80040b6:	2200      	movs	r2, #0
 80040b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80040ba:	4815      	ldr	r0, [pc, #84]	@ (8004110 <MX_TIM13_Init+0x94>)
 80040bc:	f005 fee3 	bl	8009e86 <HAL_TIM_Base_Init>
 80040c0:	4603      	mov	r3, r0
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d001      	beq.n	80040ca <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 80040c6:	f001 f9ef 	bl	80054a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 80040ca:	4811      	ldr	r0, [pc, #68]	@ (8004110 <MX_TIM13_Init+0x94>)
 80040cc:	f005 ffc9 	bl	800a062 <HAL_TIM_PWM_Init>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d001      	beq.n	80040da <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 80040d6:	f001 f9e7 	bl	80054a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80040da:	2360      	movs	r3, #96	@ 0x60
 80040dc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80040de:	2300      	movs	r3, #0
 80040e0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80040e2:	2300      	movs	r3, #0
 80040e4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80040e6:	2300      	movs	r3, #0
 80040e8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80040ea:	1d3b      	adds	r3, r7, #4
 80040ec:	2200      	movs	r2, #0
 80040ee:	4619      	mov	r1, r3
 80040f0:	4807      	ldr	r0, [pc, #28]	@ (8004110 <MX_TIM13_Init+0x94>)
 80040f2:	f006 f8ff 	bl	800a2f4 <HAL_TIM_PWM_ConfigChannel>
 80040f6:	4603      	mov	r3, r0
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d001      	beq.n	8004100 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 80040fc:	f001 f9d4 	bl	80054a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8004100:	4803      	ldr	r0, [pc, #12]	@ (8004110 <MX_TIM13_Init+0x94>)
 8004102:	f002 fb6b 	bl	80067dc <HAL_TIM_MspPostInit>

}
 8004106:	bf00      	nop
 8004108:	3720      	adds	r7, #32
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop
 8004110:	2000d9f8 	.word	0x2000d9f8
 8004114:	40001c00 	.word	0x40001c00

08004118 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800411c:	4b11      	ldr	r3, [pc, #68]	@ (8004164 <MX_USART1_UART_Init+0x4c>)
 800411e:	4a12      	ldr	r2, [pc, #72]	@ (8004168 <MX_USART1_UART_Init+0x50>)
 8004120:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004122:	4b10      	ldr	r3, [pc, #64]	@ (8004164 <MX_USART1_UART_Init+0x4c>)
 8004124:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004128:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800412a:	4b0e      	ldr	r3, [pc, #56]	@ (8004164 <MX_USART1_UART_Init+0x4c>)
 800412c:	2200      	movs	r2, #0
 800412e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004130:	4b0c      	ldr	r3, [pc, #48]	@ (8004164 <MX_USART1_UART_Init+0x4c>)
 8004132:	2200      	movs	r2, #0
 8004134:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004136:	4b0b      	ldr	r3, [pc, #44]	@ (8004164 <MX_USART1_UART_Init+0x4c>)
 8004138:	2200      	movs	r2, #0
 800413a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800413c:	4b09      	ldr	r3, [pc, #36]	@ (8004164 <MX_USART1_UART_Init+0x4c>)
 800413e:	220c      	movs	r2, #12
 8004140:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004142:	4b08      	ldr	r3, [pc, #32]	@ (8004164 <MX_USART1_UART_Init+0x4c>)
 8004144:	2200      	movs	r2, #0
 8004146:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004148:	4b06      	ldr	r3, [pc, #24]	@ (8004164 <MX_USART1_UART_Init+0x4c>)
 800414a:	2200      	movs	r2, #0
 800414c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800414e:	4805      	ldr	r0, [pc, #20]	@ (8004164 <MX_USART1_UART_Init+0x4c>)
 8004150:	f006 fe12 	bl	800ad78 <HAL_UART_Init>
 8004154:	4603      	mov	r3, r0
 8004156:	2b00      	cmp	r3, #0
 8004158:	d001      	beq.n	800415e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800415a:	f001 f9a5 	bl	80054a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800415e:	bf00      	nop
 8004160:	bd80      	pop	{r7, pc}
 8004162:	bf00      	nop
 8004164:	2000da40 	.word	0x2000da40
 8004168:	40011000 	.word	0x40011000

0800416c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004170:	4b11      	ldr	r3, [pc, #68]	@ (80041b8 <MX_USART3_UART_Init+0x4c>)
 8004172:	4a12      	ldr	r2, [pc, #72]	@ (80041bc <MX_USART3_UART_Init+0x50>)
 8004174:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8004176:	4b10      	ldr	r3, [pc, #64]	@ (80041b8 <MX_USART3_UART_Init+0x4c>)
 8004178:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800417c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800417e:	4b0e      	ldr	r3, [pc, #56]	@ (80041b8 <MX_USART3_UART_Init+0x4c>)
 8004180:	2200      	movs	r2, #0
 8004182:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004184:	4b0c      	ldr	r3, [pc, #48]	@ (80041b8 <MX_USART3_UART_Init+0x4c>)
 8004186:	2200      	movs	r2, #0
 8004188:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800418a:	4b0b      	ldr	r3, [pc, #44]	@ (80041b8 <MX_USART3_UART_Init+0x4c>)
 800418c:	2200      	movs	r2, #0
 800418e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004190:	4b09      	ldr	r3, [pc, #36]	@ (80041b8 <MX_USART3_UART_Init+0x4c>)
 8004192:	220c      	movs	r2, #12
 8004194:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004196:	4b08      	ldr	r3, [pc, #32]	@ (80041b8 <MX_USART3_UART_Init+0x4c>)
 8004198:	2200      	movs	r2, #0
 800419a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800419c:	4b06      	ldr	r3, [pc, #24]	@ (80041b8 <MX_USART3_UART_Init+0x4c>)
 800419e:	2200      	movs	r2, #0
 80041a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80041a2:	4805      	ldr	r0, [pc, #20]	@ (80041b8 <MX_USART3_UART_Init+0x4c>)
 80041a4:	f006 fde8 	bl	800ad78 <HAL_UART_Init>
 80041a8:	4603      	mov	r3, r0
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d001      	beq.n	80041b2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80041ae:	f001 f97b 	bl	80054a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80041b2:	bf00      	nop
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	2000da88 	.word	0x2000da88
 80041bc:	40004800 	.word	0x40004800

080041c0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80041c4:	4b14      	ldr	r3, [pc, #80]	@ (8004218 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80041c6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80041ca:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80041cc:	4b12      	ldr	r3, [pc, #72]	@ (8004218 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80041ce:	2204      	movs	r2, #4
 80041d0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80041d2:	4b11      	ldr	r3, [pc, #68]	@ (8004218 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80041d4:	2202      	movs	r2, #2
 80041d6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80041d8:	4b0f      	ldr	r3, [pc, #60]	@ (8004218 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80041da:	2200      	movs	r2, #0
 80041dc:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80041de:	4b0e      	ldr	r3, [pc, #56]	@ (8004218 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80041e0:	2202      	movs	r2, #2
 80041e2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80041e4:	4b0c      	ldr	r3, [pc, #48]	@ (8004218 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80041e6:	2200      	movs	r2, #0
 80041e8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80041ea:	4b0b      	ldr	r3, [pc, #44]	@ (8004218 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80041ec:	2200      	movs	r2, #0
 80041ee:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80041f0:	4b09      	ldr	r3, [pc, #36]	@ (8004218 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80041f2:	2200      	movs	r2, #0
 80041f4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80041f6:	4b08      	ldr	r3, [pc, #32]	@ (8004218 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80041f8:	2200      	movs	r2, #0
 80041fa:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80041fc:	4b06      	ldr	r3, [pc, #24]	@ (8004218 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80041fe:	2200      	movs	r2, #0
 8004200:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8004202:	4805      	ldr	r0, [pc, #20]	@ (8004218 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004204:	f005 f80e 	bl	8009224 <HAL_PCD_Init>
 8004208:	4603      	mov	r3, r0
 800420a:	2b00      	cmp	r3, #0
 800420c:	d001      	beq.n	8004212 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800420e:	f001 f94b 	bl	80054a8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8004212:	bf00      	nop
 8004214:	bd80      	pop	{r7, pc}
 8004216:	bf00      	nop
 8004218:	2000dad0 	.word	0x2000dad0

0800421c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b08c      	sub	sp, #48	@ 0x30
 8004220:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004222:	f107 031c 	add.w	r3, r7, #28
 8004226:	2200      	movs	r2, #0
 8004228:	601a      	str	r2, [r3, #0]
 800422a:	605a      	str	r2, [r3, #4]
 800422c:	609a      	str	r2, [r3, #8]
 800422e:	60da      	str	r2, [r3, #12]
 8004230:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004232:	2300      	movs	r3, #0
 8004234:	61bb      	str	r3, [r7, #24]
 8004236:	4b9a      	ldr	r3, [pc, #616]	@ (80044a0 <MX_GPIO_Init+0x284>)
 8004238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800423a:	4a99      	ldr	r2, [pc, #612]	@ (80044a0 <MX_GPIO_Init+0x284>)
 800423c:	f043 0310 	orr.w	r3, r3, #16
 8004240:	6313      	str	r3, [r2, #48]	@ 0x30
 8004242:	4b97      	ldr	r3, [pc, #604]	@ (80044a0 <MX_GPIO_Init+0x284>)
 8004244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004246:	f003 0310 	and.w	r3, r3, #16
 800424a:	61bb      	str	r3, [r7, #24]
 800424c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800424e:	2300      	movs	r3, #0
 8004250:	617b      	str	r3, [r7, #20]
 8004252:	4b93      	ldr	r3, [pc, #588]	@ (80044a0 <MX_GPIO_Init+0x284>)
 8004254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004256:	4a92      	ldr	r2, [pc, #584]	@ (80044a0 <MX_GPIO_Init+0x284>)
 8004258:	f043 0304 	orr.w	r3, r3, #4
 800425c:	6313      	str	r3, [r2, #48]	@ 0x30
 800425e:	4b90      	ldr	r3, [pc, #576]	@ (80044a0 <MX_GPIO_Init+0x284>)
 8004260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004262:	f003 0304 	and.w	r3, r3, #4
 8004266:	617b      	str	r3, [r7, #20]
 8004268:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800426a:	2300      	movs	r3, #0
 800426c:	613b      	str	r3, [r7, #16]
 800426e:	4b8c      	ldr	r3, [pc, #560]	@ (80044a0 <MX_GPIO_Init+0x284>)
 8004270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004272:	4a8b      	ldr	r2, [pc, #556]	@ (80044a0 <MX_GPIO_Init+0x284>)
 8004274:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004278:	6313      	str	r3, [r2, #48]	@ 0x30
 800427a:	4b89      	ldr	r3, [pc, #548]	@ (80044a0 <MX_GPIO_Init+0x284>)
 800427c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800427e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004282:	613b      	str	r3, [r7, #16]
 8004284:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004286:	2300      	movs	r3, #0
 8004288:	60fb      	str	r3, [r7, #12]
 800428a:	4b85      	ldr	r3, [pc, #532]	@ (80044a0 <MX_GPIO_Init+0x284>)
 800428c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800428e:	4a84      	ldr	r2, [pc, #528]	@ (80044a0 <MX_GPIO_Init+0x284>)
 8004290:	f043 0301 	orr.w	r3, r3, #1
 8004294:	6313      	str	r3, [r2, #48]	@ 0x30
 8004296:	4b82      	ldr	r3, [pc, #520]	@ (80044a0 <MX_GPIO_Init+0x284>)
 8004298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800429a:	f003 0301 	and.w	r3, r3, #1
 800429e:	60fb      	str	r3, [r7, #12]
 80042a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80042a2:	2300      	movs	r3, #0
 80042a4:	60bb      	str	r3, [r7, #8]
 80042a6:	4b7e      	ldr	r3, [pc, #504]	@ (80044a0 <MX_GPIO_Init+0x284>)
 80042a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042aa:	4a7d      	ldr	r2, [pc, #500]	@ (80044a0 <MX_GPIO_Init+0x284>)
 80042ac:	f043 0302 	orr.w	r3, r3, #2
 80042b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80042b2:	4b7b      	ldr	r3, [pc, #492]	@ (80044a0 <MX_GPIO_Init+0x284>)
 80042b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042b6:	f003 0302 	and.w	r3, r3, #2
 80042ba:	60bb      	str	r3, [r7, #8]
 80042bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80042be:	2300      	movs	r3, #0
 80042c0:	607b      	str	r3, [r7, #4]
 80042c2:	4b77      	ldr	r3, [pc, #476]	@ (80044a0 <MX_GPIO_Init+0x284>)
 80042c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042c6:	4a76      	ldr	r2, [pc, #472]	@ (80044a0 <MX_GPIO_Init+0x284>)
 80042c8:	f043 0308 	orr.w	r3, r3, #8
 80042cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80042ce:	4b74      	ldr	r3, [pc, #464]	@ (80044a0 <MX_GPIO_Init+0x284>)
 80042d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042d2:	f003 0308 	and.w	r3, r3, #8
 80042d6:	607b      	str	r3, [r7, #4]
 80042d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ZERO_POS2_Pin|DIR1_Pin|DIR2_Pin|STEP1_Pin
 80042da:	2200      	movs	r2, #0
 80042dc:	f64f 7188 	movw	r1, #65416	@ 0xff88
 80042e0:	4870      	ldr	r0, [pc, #448]	@ (80044a4 <MX_GPIO_Init+0x288>)
 80042e2:	f004 fe27 	bl	8008f34 <HAL_GPIO_WritePin>
                          |DIR3_Pin|STEP2_Pin|DIR4_Pin|STEP3_Pin
                          |STEP4_Pin|DIR5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ACK_LINE0_Pin|ACK_LINE1_Pin|ACK_LINE2_Pin|STEP6_Pin, GPIO_PIN_RESET);
 80042e6:	2200      	movs	r2, #0
 80042e8:	f24e 0180 	movw	r1, #57472	@ 0xe080
 80042ec:	486e      	ldr	r0, [pc, #440]	@ (80044a8 <MX_GPIO_Init+0x28c>)
 80042ee:	f004 fe21 	bl	8008f34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, STEP7_Pin|STEP8_Pin|DIR6_Pin|DIR7_Pin
 80042f2:	2200      	movs	r2, #0
 80042f4:	f24c 7113 	movw	r1, #50963	@ 0xc713
 80042f8:	486c      	ldr	r0, [pc, #432]	@ (80044ac <MX_GPIO_Init+0x290>)
 80042fa:	f004 fe1b 	bl	8008f34 <HAL_GPIO_WritePin>
                          |DIR8_Pin|STEP5_Pin|SPI3_NSS1_Pin|SPI3_NSS0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_STATE_Pin|SPI3_NSS2_Pin, GPIO_PIN_RESET);
 80042fe:	2200      	movs	r2, #0
 8004300:	f44f 4101 	mov.w	r1, #33024	@ 0x8100
 8004304:	486a      	ldr	r0, [pc, #424]	@ (80044b0 <MX_GPIO_Init+0x294>)
 8004306:	f004 fe15 	bl	8008f34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(READY_GPIO_Port, READY_Pin, GPIO_PIN_RESET);
 800430a:	2200      	movs	r2, #0
 800430c:	2108      	movs	r1, #8
 800430e:	4869      	ldr	r0, [pc, #420]	@ (80044b4 <MX_GPIO_Init+0x298>)
 8004310:	f004 fe10 	bl	8008f34 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ZERO_POS3_Pin ZERO_POS1_Pin ZERO_POS4_Pin */
  GPIO_InitStruct.Pin = ZERO_POS3_Pin|ZERO_POS1_Pin|ZERO_POS4_Pin;
 8004314:	2345      	movs	r3, #69	@ 0x45
 8004316:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004318:	2300      	movs	r3, #0
 800431a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800431c:	2300      	movs	r3, #0
 800431e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004320:	f107 031c 	add.w	r3, r7, #28
 8004324:	4619      	mov	r1, r3
 8004326:	485f      	ldr	r0, [pc, #380]	@ (80044a4 <MX_GPIO_Init+0x288>)
 8004328:	f004 fc68 	bl	8008bfc <HAL_GPIO_Init>

  /*Configure GPIO pin : ZERO_POS2_Pin */
  GPIO_InitStruct.Pin = ZERO_POS2_Pin;
 800432c:	2308      	movs	r3, #8
 800432e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004330:	2301      	movs	r3, #1
 8004332:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004334:	2300      	movs	r3, #0
 8004336:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004338:	2300      	movs	r3, #0
 800433a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ZERO_POS2_GPIO_Port, &GPIO_InitStruct);
 800433c:	f107 031c 	add.w	r3, r7, #28
 8004340:	4619      	mov	r1, r3
 8004342:	4858      	ldr	r0, [pc, #352]	@ (80044a4 <MX_GPIO_Init+0x288>)
 8004344:	f004 fc5a 	bl	8008bfc <HAL_GPIO_Init>

  /*Configure GPIO pins : EXTI_4_LS3_P_Pin EXTI_5_LS3_N_Pin EXTI_1_LS1_N_Pin */
  GPIO_InitStruct.Pin = EXTI_4_LS3_P_Pin|EXTI_5_LS3_N_Pin|EXTI_1_LS1_N_Pin;
 8004348:	2332      	movs	r3, #50	@ 0x32
 800434a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800434c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004350:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004352:	2300      	movs	r3, #0
 8004354:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004356:	f107 031c 	add.w	r3, r7, #28
 800435a:	4619      	mov	r1, r3
 800435c:	4851      	ldr	r0, [pc, #324]	@ (80044a4 <MX_GPIO_Init+0x288>)
 800435e:	f004 fc4d 	bl	8008bfc <HAL_GPIO_Init>

  /*Configure GPIO pins : ACK_LINE0_Pin ACK_LINE1_Pin ACK_LINE2_Pin */
  GPIO_InitStruct.Pin = ACK_LINE0_Pin|ACK_LINE1_Pin|ACK_LINE2_Pin;
 8004362:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8004366:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004368:	2301      	movs	r3, #1
 800436a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800436c:	2300      	movs	r3, #0
 800436e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004370:	2300      	movs	r3, #0
 8004372:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004374:	f107 031c 	add.w	r3, r7, #28
 8004378:	4619      	mov	r1, r3
 800437a:	484b      	ldr	r0, [pc, #300]	@ (80044a8 <MX_GPIO_Init+0x28c>)
 800437c:	f004 fc3e 	bl	8008bfc <HAL_GPIO_Init>

  /*Configure GPIO pins : EXTI_0_LS1_P_Pin EXTI_2_LS2_P_Pin EXTI_3_LS2_N_Pin EXTI_6_LS4_P_Pin
                           EXTI_8_LS5_P_Pin EXTI_9_LS5_N_Pin */
  GPIO_InitStruct.Pin = EXTI_0_LS1_P_Pin|EXTI_2_LS2_P_Pin|EXTI_3_LS2_N_Pin|EXTI_6_LS4_P_Pin
 8004380:	f240 334d 	movw	r3, #845	@ 0x34d
 8004384:	61fb      	str	r3, [r7, #28]
                          |EXTI_8_LS5_P_Pin|EXTI_9_LS5_N_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004386:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800438a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800438c:	2300      	movs	r3, #0
 800438e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004390:	f107 031c 	add.w	r3, r7, #28
 8004394:	4619      	mov	r1, r3
 8004396:	4844      	ldr	r0, [pc, #272]	@ (80044a8 <MX_GPIO_Init+0x28c>)
 8004398:	f004 fc30 	bl	8008bfc <HAL_GPIO_Init>

  /*Configure GPIO pins : STEP7_Pin STEP8_Pin DIR6_Pin DIR7_Pin
                           DIR8_Pin STEP5_Pin */
  GPIO_InitStruct.Pin = STEP7_Pin|STEP8_Pin|DIR6_Pin|DIR7_Pin
 800439c:	f24c 4313 	movw	r3, #50195	@ 0xc413
 80043a0:	61fb      	str	r3, [r7, #28]
                          |DIR8_Pin|STEP5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80043a2:	2301      	movs	r3, #1
 80043a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043a6:	2300      	movs	r3, #0
 80043a8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043aa:	2303      	movs	r3, #3
 80043ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043ae:	f107 031c 	add.w	r3, r7, #28
 80043b2:	4619      	mov	r1, r3
 80043b4:	483d      	ldr	r0, [pc, #244]	@ (80044ac <MX_GPIO_Init+0x290>)
 80043b6:	f004 fc21 	bl	8008bfc <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR1_Pin DIR2_Pin STEP1_Pin DIR3_Pin
                           STEP2_Pin DIR4_Pin STEP3_Pin STEP4_Pin
                           DIR5_Pin */
  GPIO_InitStruct.Pin = DIR1_Pin|DIR2_Pin|STEP1_Pin|DIR3_Pin
 80043ba:	f64f 7380 	movw	r3, #65408	@ 0xff80
 80043be:	61fb      	str	r3, [r7, #28]
                          |STEP2_Pin|DIR4_Pin|STEP3_Pin|STEP4_Pin
                          |DIR5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80043c0:	2301      	movs	r3, #1
 80043c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043c4:	2300      	movs	r3, #0
 80043c6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043c8:	2303      	movs	r3, #3
 80043ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80043cc:	f107 031c 	add.w	r3, r7, #28
 80043d0:	4619      	mov	r1, r3
 80043d2:	4834      	ldr	r0, [pc, #208]	@ (80044a4 <MX_GPIO_Init+0x288>)
 80043d4:	f004 fc12 	bl	8008bfc <HAL_GPIO_Init>

  /*Configure GPIO pins : EXTI_10_LS6_P_Pin EXTI_11_LS6_N_Pin EXTI_12_LS7_P_Pin EXTI_13_LS7_N_Pin
                           EXTI_14_LS8_P_Pin EXTI_15_LS8_N_Pin EXTI_7_LS4_N_Pin */
  GPIO_InitStruct.Pin = EXTI_10_LS6_P_Pin|EXTI_11_LS6_N_Pin|EXTI_12_LS7_P_Pin|EXTI_13_LS7_N_Pin
 80043d8:	f64f 4380 	movw	r3, #64640	@ 0xfc80
 80043dc:	61fb      	str	r3, [r7, #28]
                          |EXTI_14_LS8_P_Pin|EXTI_15_LS8_N_Pin|EXTI_7_LS4_N_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80043de:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80043e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043e4:	2300      	movs	r3, #0
 80043e6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80043e8:	f107 031c 	add.w	r3, r7, #28
 80043ec:	4619      	mov	r1, r3
 80043ee:	4831      	ldr	r0, [pc, #196]	@ (80044b4 <MX_GPIO_Init+0x298>)
 80043f0:	f004 fc04 	bl	8008bfc <HAL_GPIO_Init>

  /*Configure GPIO pin : STEP6_Pin */
  GPIO_InitStruct.Pin = STEP6_Pin;
 80043f4:	2380      	movs	r3, #128	@ 0x80
 80043f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80043f8:	2301      	movs	r3, #1
 80043fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043fc:	2300      	movs	r3, #0
 80043fe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004400:	2303      	movs	r3, #3
 8004402:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(STEP6_GPIO_Port, &GPIO_InitStruct);
 8004404:	f107 031c 	add.w	r3, r7, #28
 8004408:	4619      	mov	r1, r3
 800440a:	4827      	ldr	r0, [pc, #156]	@ (80044a8 <MX_GPIO_Init+0x28c>)
 800440c:	f004 fbf6 	bl	8008bfc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_STATE_Pin SPI3_NSS2_Pin */
  GPIO_InitStruct.Pin = LED_STATE_Pin|SPI3_NSS2_Pin;
 8004410:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 8004414:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004416:	2301      	movs	r3, #1
 8004418:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800441a:	2300      	movs	r3, #0
 800441c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800441e:	2300      	movs	r3, #0
 8004420:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004422:	f107 031c 	add.w	r3, r7, #28
 8004426:	4619      	mov	r1, r3
 8004428:	4821      	ldr	r0, [pc, #132]	@ (80044b0 <MX_GPIO_Init+0x294>)
 800442a:	f004 fbe7 	bl	8008bfc <HAL_GPIO_Init>

  /*Configure GPIO pins : STARTUP_OPTION1_Pin ZERO_POS8_Pin ZERO_POS7_Pin ZERO_POS6_Pin */
  GPIO_InitStruct.Pin = STARTUP_OPTION1_Pin|ZERO_POS8_Pin|ZERO_POS7_Pin|ZERO_POS6_Pin;
 800442e:	2374      	movs	r3, #116	@ 0x74
 8004430:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004432:	2300      	movs	r3, #0
 8004434:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004436:	2300      	movs	r3, #0
 8004438:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800443a:	f107 031c 	add.w	r3, r7, #28
 800443e:	4619      	mov	r1, r3
 8004440:	481c      	ldr	r0, [pc, #112]	@ (80044b4 <MX_GPIO_Init+0x298>)
 8004442:	f004 fbdb 	bl	8008bfc <HAL_GPIO_Init>

  /*Configure GPIO pin : READY_Pin */
  GPIO_InitStruct.Pin = READY_Pin;
 8004446:	2308      	movs	r3, #8
 8004448:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800444a:	2301      	movs	r3, #1
 800444c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800444e:	2300      	movs	r3, #0
 8004450:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004452:	2300      	movs	r3, #0
 8004454:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(READY_GPIO_Port, &GPIO_InitStruct);
 8004456:	f107 031c 	add.w	r3, r7, #28
 800445a:	4619      	mov	r1, r3
 800445c:	4815      	ldr	r0, [pc, #84]	@ (80044b4 <MX_GPIO_Init+0x298>)
 800445e:	f004 fbcd 	bl	8008bfc <HAL_GPIO_Init>

  /*Configure GPIO pin : ZERO_POS5_Pin */
  GPIO_InitStruct.Pin = ZERO_POS5_Pin;
 8004462:	2320      	movs	r3, #32
 8004464:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004466:	2300      	movs	r3, #0
 8004468:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800446a:	2300      	movs	r3, #0
 800446c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ZERO_POS5_GPIO_Port, &GPIO_InitStruct);
 800446e:	f107 031c 	add.w	r3, r7, #28
 8004472:	4619      	mov	r1, r3
 8004474:	480d      	ldr	r0, [pc, #52]	@ (80044ac <MX_GPIO_Init+0x290>)
 8004476:	f004 fbc1 	bl	8008bfc <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI3_NSS1_Pin SPI3_NSS0_Pin */
  GPIO_InitStruct.Pin = SPI3_NSS1_Pin|SPI3_NSS0_Pin;
 800447a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800447e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004480:	2301      	movs	r3, #1
 8004482:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004484:	2300      	movs	r3, #0
 8004486:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004488:	2300      	movs	r3, #0
 800448a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800448c:	f107 031c 	add.w	r3, r7, #28
 8004490:	4619      	mov	r1, r3
 8004492:	4806      	ldr	r0, [pc, #24]	@ (80044ac <MX_GPIO_Init+0x290>)
 8004494:	f004 fbb2 	bl	8008bfc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8004498:	bf00      	nop
 800449a:	3730      	adds	r7, #48	@ 0x30
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	40023800 	.word	0x40023800
 80044a4:	40021000 	.word	0x40021000
 80044a8:	40020800 	.word	0x40020800
 80044ac:	40020400 	.word	0x40020400
 80044b0:	40020000 	.word	0x40020000
 80044b4:	40020c00 	.word	0x40020c00

080044b8 <startTimerTIM2>:

/** Запуск таймера для отсчета времени в микросекундах
 * 	Используется таймер TIM2
 */
void startTimerTIM2(void)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 80044bc:	4802      	ldr	r0, [pc, #8]	@ (80044c8 <startTimerTIM2+0x10>)
 80044be:	f005 fd31 	bl	8009f24 <HAL_TIM_Base_Start_IT>
}
 80044c2:	bf00      	nop
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	bf00      	nop
 80044c8:	2000d9b0 	.word	0x2000d9b0

080044cc <stopTimerTIM2>:

/** Остановка таймера для отсчета времени в микросекундах
 * 	Используется таймер TIM2
 */
void stopTimerTIM2(void)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim2);
 80044d0:	4802      	ldr	r0, [pc, #8]	@ (80044dc <stopTimerTIM2+0x10>)
 80044d2:	f005 fd97 	bl	800a004 <HAL_TIM_Base_Stop_IT>
}
 80044d6:	bf00      	nop
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	2000d9b0 	.word	0x2000d9b0

080044e0 <resetTimerTIM2>:

/** Функция сброса счетчика таймера в 0
 * 	Используется таймер TIM2
 */
void resetTimerTIM2(void)
{
 80044e0:	b480      	push	{r7}
 80044e2:	af00      	add	r7, sp, #0
	TIM2->CNT = 0;
 80044e4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80044e8:	2200      	movs	r2, #0
 80044ea:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80044ec:	bf00      	nop
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr

080044f6 <getMicrosecondsTIM2>:
 * Используется таймер TIM2
 * Частота работы таймера 1МГц
 * 1 тик таймера = 1 мкс
 */
uint32_t getMicrosecondsTIM2(void)
{
 80044f6:	b480      	push	{r7}
 80044f8:	af00      	add	r7, sp, #0
	return TIM2->CNT;
 80044fa:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80044fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8004500:	4618      	mov	r0, r3
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr
	...

0800450c <udpReceiveHandlerEcho>:

/**
 *
 */
void udpReceiveHandlerEcho(void)
{
 800450c:	b590      	push	{r4, r7, lr}
 800450e:	b0d7      	sub	sp, #348	@ 0x15c
 8004510:	af02      	add	r7, sp, #8
	/* Буфер данных для отправки ответного сообщения по UDP */
	char data[256];

	/* Тестовые функции переинициализации буфера G - кода */
	if(strcmp(rxUdpCharBuf, udpcommands.test1) == 0)
 8004512:	4baf      	ldr	r3, [pc, #700]	@ (80047d0 <udpReceiveHandlerEcho+0x2c4>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4619      	mov	r1, r3
 8004518:	48ae      	ldr	r0, [pc, #696]	@ (80047d4 <udpReceiveHandlerEcho+0x2c8>)
 800451a:	f7fb fe59 	bl	80001d0 <strcmp>
 800451e:	4603      	mov	r3, r0
 8004520:	2b00      	cmp	r3, #0
 8004522:	d136      	bne.n	8004592 <udpReceiveHandlerEcho+0x86>
	{
		/* Проверка уже запущенного процесса работы станка */
		if(_runFlag == true)
 8004524:	4bac      	ldr	r3, [pc, #688]	@ (80047d8 <udpReceiveHandlerEcho+0x2cc>)
 8004526:	781b      	ldrb	r3, [r3, #0]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d011      	beq.n	8004550 <udpReceiveHandlerEcho+0x44>
		{
			sprintf(data, "%ld - STM32: Attention! The machine is running, unable to complete test!\n", counter);
 800452c:	4bab      	ldr	r3, [pc, #684]	@ (80047dc <udpReceiveHandlerEcho+0x2d0>)
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	463b      	mov	r3, r7
 8004532:	49ab      	ldr	r1, [pc, #684]	@ (80047e0 <udpReceiveHandlerEcho+0x2d4>)
 8004534:	4618      	mov	r0, r3
 8004536:	f013 fb5b 	bl	8017bf0 <siprintf>

			udpClientSendResponseChar(data);
 800453a:	463b      	mov	r3, r7
 800453c:	4618      	mov	r0, r3
 800453e:	f001 f85b 	bl	80055f8 <udpClientSendResponseChar>

			memset(rxUdpCharBuf, 0, 128);
 8004542:	2280      	movs	r2, #128	@ 0x80
 8004544:	2100      	movs	r1, #0
 8004546:	48a3      	ldr	r0, [pc, #652]	@ (80047d4 <udpReceiveHandlerEcho+0x2c8>)
 8004548:	f013 fbe1 	bl	8017d0e <memset>
			return;
 800454c:	f000 bf8f 	b.w	800546e <udpReceiveHandlerEcho+0xf62>
		}

		fifoClear(&fifoBufSteps);
 8004550:	48a4      	ldr	r0, [pc, #656]	@ (80047e4 <udpReceiveHandlerEcho+0x2d8>)
 8004552:	f7fd fe69 	bl	8002228 <fifoClear>

		/* Переинициализация FIFO буфера G - команд */
		fifoInitChar(&fifoGcodeBuf, GcodeBuffer1, 256);
 8004556:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800455a:	49a3      	ldr	r1, [pc, #652]	@ (80047e8 <udpReceiveHandlerEcho+0x2dc>)
 800455c:	48a3      	ldr	r0, [pc, #652]	@ (80047ec <udpReceiveHandlerEcho+0x2e0>)
 800455e:	f7fd ff2f 	bl	80023c0 <fifoInitChar>
		fifoGcodeBuf.head = 19;
 8004562:	4ba2      	ldr	r3, [pc, #648]	@ (80047ec <udpReceiveHandlerEcho+0x2e0>)
 8004564:	2213      	movs	r2, #19
 8004566:	609a      	str	r2, [r3, #8]

		ghandler._workState = HANDLER_GCODE_READY;
 8004568:	4ba1      	ldr	r3, [pc, #644]	@ (80047f0 <udpReceiveHandlerEcho+0x2e4>)
 800456a:	2202      	movs	r2, #2
 800456c:	711a      	strb	r2, [r3, #4]

		sprintf(data, "%ld - STM32: Test - 1 has been initialized!\n", counter);
 800456e:	4b9b      	ldr	r3, [pc, #620]	@ (80047dc <udpReceiveHandlerEcho+0x2d0>)
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	463b      	mov	r3, r7
 8004574:	499f      	ldr	r1, [pc, #636]	@ (80047f4 <udpReceiveHandlerEcho+0x2e8>)
 8004576:	4618      	mov	r0, r3
 8004578:	f013 fb3a 	bl	8017bf0 <siprintf>

		udpClientSendResponseChar(data);
 800457c:	463b      	mov	r3, r7
 800457e:	4618      	mov	r0, r3
 8004580:	f001 f83a 	bl	80055f8 <udpClientSendResponseChar>

		memset(rxUdpCharBuf, 0, 128);
 8004584:	2280      	movs	r2, #128	@ 0x80
 8004586:	2100      	movs	r1, #0
 8004588:	4892      	ldr	r0, [pc, #584]	@ (80047d4 <udpReceiveHandlerEcho+0x2c8>)
 800458a:	f013 fbc0 	bl	8017d0e <memset>
		return;
 800458e:	f000 bf6e 	b.w	800546e <udpReceiveHandlerEcho+0xf62>
	}

	if(strcmp(rxUdpCharBuf, udpcommands.test2) == 0)
 8004592:	4b8f      	ldr	r3, [pc, #572]	@ (80047d0 <udpReceiveHandlerEcho+0x2c4>)
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	4619      	mov	r1, r3
 8004598:	488e      	ldr	r0, [pc, #568]	@ (80047d4 <udpReceiveHandlerEcho+0x2c8>)
 800459a:	f7fb fe19 	bl	80001d0 <strcmp>
 800459e:	4603      	mov	r3, r0
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d136      	bne.n	8004612 <udpReceiveHandlerEcho+0x106>
	{
		/* Проверка уже запущенного процесса работы станка */
		if(_runFlag == true)
 80045a4:	4b8c      	ldr	r3, [pc, #560]	@ (80047d8 <udpReceiveHandlerEcho+0x2cc>)
 80045a6:	781b      	ldrb	r3, [r3, #0]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d011      	beq.n	80045d0 <udpReceiveHandlerEcho+0xc4>
		{
			sprintf(data, "%ld - STM32: Attention! The machine is running, unable to complete test!\n", counter);
 80045ac:	4b8b      	ldr	r3, [pc, #556]	@ (80047dc <udpReceiveHandlerEcho+0x2d0>)
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	463b      	mov	r3, r7
 80045b2:	498b      	ldr	r1, [pc, #556]	@ (80047e0 <udpReceiveHandlerEcho+0x2d4>)
 80045b4:	4618      	mov	r0, r3
 80045b6:	f013 fb1b 	bl	8017bf0 <siprintf>

			udpClientSendResponseChar(data);
 80045ba:	463b      	mov	r3, r7
 80045bc:	4618      	mov	r0, r3
 80045be:	f001 f81b 	bl	80055f8 <udpClientSendResponseChar>

			memset(rxUdpCharBuf, 0, 128);
 80045c2:	2280      	movs	r2, #128	@ 0x80
 80045c4:	2100      	movs	r1, #0
 80045c6:	4883      	ldr	r0, [pc, #524]	@ (80047d4 <udpReceiveHandlerEcho+0x2c8>)
 80045c8:	f013 fba1 	bl	8017d0e <memset>
			return;
 80045cc:	f000 bf4f 	b.w	800546e <udpReceiveHandlerEcho+0xf62>
		}

		fifoClear(&fifoBufSteps);
 80045d0:	4884      	ldr	r0, [pc, #528]	@ (80047e4 <udpReceiveHandlerEcho+0x2d8>)
 80045d2:	f7fd fe29 	bl	8002228 <fifoClear>

		/* Переинициализация FIFO буфера G - команд */
		fifoInitChar(&fifoGcodeBuf, GcodeBuffer2, 256);
 80045d6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80045da:	4987      	ldr	r1, [pc, #540]	@ (80047f8 <udpReceiveHandlerEcho+0x2ec>)
 80045dc:	4883      	ldr	r0, [pc, #524]	@ (80047ec <udpReceiveHandlerEcho+0x2e0>)
 80045de:	f7fd feef 	bl	80023c0 <fifoInitChar>
		fifoGcodeBuf.head = 119;
 80045e2:	4b82      	ldr	r3, [pc, #520]	@ (80047ec <udpReceiveHandlerEcho+0x2e0>)
 80045e4:	2277      	movs	r2, #119	@ 0x77
 80045e6:	609a      	str	r2, [r3, #8]

		ghandler._workState = HANDLER_GCODE_READY;
 80045e8:	4b81      	ldr	r3, [pc, #516]	@ (80047f0 <udpReceiveHandlerEcho+0x2e4>)
 80045ea:	2202      	movs	r2, #2
 80045ec:	711a      	strb	r2, [r3, #4]

		sprintf(data, "%ld - STM32: Test - 2 has been initialized!\n", counter);
 80045ee:	4b7b      	ldr	r3, [pc, #492]	@ (80047dc <udpReceiveHandlerEcho+0x2d0>)
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	463b      	mov	r3, r7
 80045f4:	4981      	ldr	r1, [pc, #516]	@ (80047fc <udpReceiveHandlerEcho+0x2f0>)
 80045f6:	4618      	mov	r0, r3
 80045f8:	f013 fafa 	bl	8017bf0 <siprintf>

		udpClientSendResponseChar(data);
 80045fc:	463b      	mov	r3, r7
 80045fe:	4618      	mov	r0, r3
 8004600:	f000 fffa 	bl	80055f8 <udpClientSendResponseChar>

		memset(rxUdpCharBuf, 0, 128);
 8004604:	2280      	movs	r2, #128	@ 0x80
 8004606:	2100      	movs	r1, #0
 8004608:	4872      	ldr	r0, [pc, #456]	@ (80047d4 <udpReceiveHandlerEcho+0x2c8>)
 800460a:	f013 fb80 	bl	8017d0e <memset>
		return;
 800460e:	f000 bf2e 	b.w	800546e <udpReceiveHandlerEcho+0xf62>
	}

	if(strcmp(rxUdpCharBuf, udpcommands.test3) == 0)
 8004612:	4b6f      	ldr	r3, [pc, #444]	@ (80047d0 <udpReceiveHandlerEcho+0x2c4>)
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	4619      	mov	r1, r3
 8004618:	486e      	ldr	r0, [pc, #440]	@ (80047d4 <udpReceiveHandlerEcho+0x2c8>)
 800461a:	f7fb fdd9 	bl	80001d0 <strcmp>
 800461e:	4603      	mov	r3, r0
 8004620:	2b00      	cmp	r3, #0
 8004622:	d136      	bne.n	8004692 <udpReceiveHandlerEcho+0x186>
	{
		/* Проверка уже запущенного процесса работы станка */
		if(_runFlag == true)
 8004624:	4b6c      	ldr	r3, [pc, #432]	@ (80047d8 <udpReceiveHandlerEcho+0x2cc>)
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d011      	beq.n	8004650 <udpReceiveHandlerEcho+0x144>
		{
			sprintf(data, "%ld - STM32: Attention! The machine is running, unable to complete test!\n", counter);
 800462c:	4b6b      	ldr	r3, [pc, #428]	@ (80047dc <udpReceiveHandlerEcho+0x2d0>)
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	463b      	mov	r3, r7
 8004632:	496b      	ldr	r1, [pc, #428]	@ (80047e0 <udpReceiveHandlerEcho+0x2d4>)
 8004634:	4618      	mov	r0, r3
 8004636:	f013 fadb 	bl	8017bf0 <siprintf>

			udpClientSendResponseChar(data);
 800463a:	463b      	mov	r3, r7
 800463c:	4618      	mov	r0, r3
 800463e:	f000 ffdb 	bl	80055f8 <udpClientSendResponseChar>

			memset(rxUdpCharBuf, 0, 128);
 8004642:	2280      	movs	r2, #128	@ 0x80
 8004644:	2100      	movs	r1, #0
 8004646:	4863      	ldr	r0, [pc, #396]	@ (80047d4 <udpReceiveHandlerEcho+0x2c8>)
 8004648:	f013 fb61 	bl	8017d0e <memset>
			return;
 800464c:	f000 bf0f 	b.w	800546e <udpReceiveHandlerEcho+0xf62>
		}

		fifoClear(&fifoBufSteps);
 8004650:	4864      	ldr	r0, [pc, #400]	@ (80047e4 <udpReceiveHandlerEcho+0x2d8>)
 8004652:	f7fd fde9 	bl	8002228 <fifoClear>

		/* Переинициализация FIFO буфера G - команд */
		fifoInitChar(&fifoGcodeBuf, GcodeBuffer3, 256);
 8004656:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800465a:	4969      	ldr	r1, [pc, #420]	@ (8004800 <udpReceiveHandlerEcho+0x2f4>)
 800465c:	4863      	ldr	r0, [pc, #396]	@ (80047ec <udpReceiveHandlerEcho+0x2e0>)
 800465e:	f7fd feaf 	bl	80023c0 <fifoInitChar>
		fifoGcodeBuf.head = 129;
 8004662:	4b62      	ldr	r3, [pc, #392]	@ (80047ec <udpReceiveHandlerEcho+0x2e0>)
 8004664:	2281      	movs	r2, #129	@ 0x81
 8004666:	609a      	str	r2, [r3, #8]

		ghandler._workState = HANDLER_GCODE_READY;
 8004668:	4b61      	ldr	r3, [pc, #388]	@ (80047f0 <udpReceiveHandlerEcho+0x2e4>)
 800466a:	2202      	movs	r2, #2
 800466c:	711a      	strb	r2, [r3, #4]

		sprintf(data, "%ld - STM32: Test - 3 has been initialized!\n", counter);
 800466e:	4b5b      	ldr	r3, [pc, #364]	@ (80047dc <udpReceiveHandlerEcho+0x2d0>)
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	463b      	mov	r3, r7
 8004674:	4963      	ldr	r1, [pc, #396]	@ (8004804 <udpReceiveHandlerEcho+0x2f8>)
 8004676:	4618      	mov	r0, r3
 8004678:	f013 faba 	bl	8017bf0 <siprintf>

		udpClientSendResponseChar(data);
 800467c:	463b      	mov	r3, r7
 800467e:	4618      	mov	r0, r3
 8004680:	f000 ffba 	bl	80055f8 <udpClientSendResponseChar>

		memset(rxUdpCharBuf, 0, 128);
 8004684:	2280      	movs	r2, #128	@ 0x80
 8004686:	2100      	movs	r1, #0
 8004688:	4852      	ldr	r0, [pc, #328]	@ (80047d4 <udpReceiveHandlerEcho+0x2c8>)
 800468a:	f013 fb40 	bl	8017d0e <memset>
		return;
 800468e:	f000 beee 	b.w	800546e <udpReceiveHandlerEcho+0xf62>
	}

	if(strcmp(rxUdpCharBuf, udpcommands.test4) == 0)
 8004692:	4b4f      	ldr	r3, [pc, #316]	@ (80047d0 <udpReceiveHandlerEcho+0x2c4>)
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	4619      	mov	r1, r3
 8004698:	484e      	ldr	r0, [pc, #312]	@ (80047d4 <udpReceiveHandlerEcho+0x2c8>)
 800469a:	f7fb fd99 	bl	80001d0 <strcmp>
 800469e:	4603      	mov	r3, r0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d136      	bne.n	8004712 <udpReceiveHandlerEcho+0x206>
	{
		/* Проверка уже запущенного процесса работы станка */
		if(_runFlag == true)
 80046a4:	4b4c      	ldr	r3, [pc, #304]	@ (80047d8 <udpReceiveHandlerEcho+0x2cc>)
 80046a6:	781b      	ldrb	r3, [r3, #0]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d011      	beq.n	80046d0 <udpReceiveHandlerEcho+0x1c4>
		{
			sprintf(data, "%ld - STM32: Attention! The machine is running, unable to complete test!\n", counter);
 80046ac:	4b4b      	ldr	r3, [pc, #300]	@ (80047dc <udpReceiveHandlerEcho+0x2d0>)
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	463b      	mov	r3, r7
 80046b2:	494b      	ldr	r1, [pc, #300]	@ (80047e0 <udpReceiveHandlerEcho+0x2d4>)
 80046b4:	4618      	mov	r0, r3
 80046b6:	f013 fa9b 	bl	8017bf0 <siprintf>

			udpClientSendResponseChar(data);
 80046ba:	463b      	mov	r3, r7
 80046bc:	4618      	mov	r0, r3
 80046be:	f000 ff9b 	bl	80055f8 <udpClientSendResponseChar>

			memset(rxUdpCharBuf, 0, 128);
 80046c2:	2280      	movs	r2, #128	@ 0x80
 80046c4:	2100      	movs	r1, #0
 80046c6:	4843      	ldr	r0, [pc, #268]	@ (80047d4 <udpReceiveHandlerEcho+0x2c8>)
 80046c8:	f013 fb21 	bl	8017d0e <memset>
			return;
 80046cc:	f000 becf 	b.w	800546e <udpReceiveHandlerEcho+0xf62>
		}

		fifoClear(&fifoBufSteps);
 80046d0:	4844      	ldr	r0, [pc, #272]	@ (80047e4 <udpReceiveHandlerEcho+0x2d8>)
 80046d2:	f7fd fda9 	bl	8002228 <fifoClear>

		/* Переинициализация FIFO буфера G - команд */
		fifoInitChar(&fifoGcodeBuf, GcodeBuffer4, 256);
 80046d6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80046da:	494b      	ldr	r1, [pc, #300]	@ (8004808 <udpReceiveHandlerEcho+0x2fc>)
 80046dc:	4843      	ldr	r0, [pc, #268]	@ (80047ec <udpReceiveHandlerEcho+0x2e0>)
 80046de:	f7fd fe6f 	bl	80023c0 <fifoInitChar>
		fifoGcodeBuf.head = 243;
 80046e2:	4b42      	ldr	r3, [pc, #264]	@ (80047ec <udpReceiveHandlerEcho+0x2e0>)
 80046e4:	22f3      	movs	r2, #243	@ 0xf3
 80046e6:	609a      	str	r2, [r3, #8]

		ghandler._workState = HANDLER_GCODE_READY;
 80046e8:	4b41      	ldr	r3, [pc, #260]	@ (80047f0 <udpReceiveHandlerEcho+0x2e4>)
 80046ea:	2202      	movs	r2, #2
 80046ec:	711a      	strb	r2, [r3, #4]

		sprintf(data, "%ld - STM32: Test - 4 has been initialized!\n", counter);
 80046ee:	4b3b      	ldr	r3, [pc, #236]	@ (80047dc <udpReceiveHandlerEcho+0x2d0>)
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	463b      	mov	r3, r7
 80046f4:	4945      	ldr	r1, [pc, #276]	@ (800480c <udpReceiveHandlerEcho+0x300>)
 80046f6:	4618      	mov	r0, r3
 80046f8:	f013 fa7a 	bl	8017bf0 <siprintf>

		udpClientSendResponseChar(data);
 80046fc:	463b      	mov	r3, r7
 80046fe:	4618      	mov	r0, r3
 8004700:	f000 ff7a 	bl	80055f8 <udpClientSendResponseChar>

		memset(rxUdpCharBuf, 0, 128);
 8004704:	2280      	movs	r2, #128	@ 0x80
 8004706:	2100      	movs	r1, #0
 8004708:	4832      	ldr	r0, [pc, #200]	@ (80047d4 <udpReceiveHandlerEcho+0x2c8>)
 800470a:	f013 fb00 	bl	8017d0e <memset>
		return;
 800470e:	f000 beae 	b.w	800546e <udpReceiveHandlerEcho+0xf62>
	}

	if(strcmp(rxUdpCharBuf, udpcommands.circle) == 0)
 8004712:	4b2f      	ldr	r3, [pc, #188]	@ (80047d0 <udpReceiveHandlerEcho+0x2c4>)
 8004714:	691b      	ldr	r3, [r3, #16]
 8004716:	4619      	mov	r1, r3
 8004718:	482e      	ldr	r0, [pc, #184]	@ (80047d4 <udpReceiveHandlerEcho+0x2c8>)
 800471a:	f7fb fd59 	bl	80001d0 <strcmp>
 800471e:	4603      	mov	r3, r0
 8004720:	2b00      	cmp	r3, #0
 8004722:	d136      	bne.n	8004792 <udpReceiveHandlerEcho+0x286>
	{
		/* Проверка уже запущенного процесса работы станка */
		if(_runFlag == true)
 8004724:	4b2c      	ldr	r3, [pc, #176]	@ (80047d8 <udpReceiveHandlerEcho+0x2cc>)
 8004726:	781b      	ldrb	r3, [r3, #0]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d011      	beq.n	8004750 <udpReceiveHandlerEcho+0x244>
		{
			sprintf(data, "%ld - STM32: Attention! The machine is running, unable to complete test!\n", counter);
 800472c:	4b2b      	ldr	r3, [pc, #172]	@ (80047dc <udpReceiveHandlerEcho+0x2d0>)
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	463b      	mov	r3, r7
 8004732:	492b      	ldr	r1, [pc, #172]	@ (80047e0 <udpReceiveHandlerEcho+0x2d4>)
 8004734:	4618      	mov	r0, r3
 8004736:	f013 fa5b 	bl	8017bf0 <siprintf>

			udpClientSendResponseChar(data);
 800473a:	463b      	mov	r3, r7
 800473c:	4618      	mov	r0, r3
 800473e:	f000 ff5b 	bl	80055f8 <udpClientSendResponseChar>

			memset(rxUdpCharBuf, 0, 128);
 8004742:	2280      	movs	r2, #128	@ 0x80
 8004744:	2100      	movs	r1, #0
 8004746:	4823      	ldr	r0, [pc, #140]	@ (80047d4 <udpReceiveHandlerEcho+0x2c8>)
 8004748:	f013 fae1 	bl	8017d0e <memset>
			return;
 800474c:	f000 be8f 	b.w	800546e <udpReceiveHandlerEcho+0xf62>
		}

		fifoClear(&fifoBufSteps);
 8004750:	4824      	ldr	r0, [pc, #144]	@ (80047e4 <udpReceiveHandlerEcho+0x2d8>)
 8004752:	f7fd fd69 	bl	8002228 <fifoClear>

		/* Переинициализация FIFO буфера G - команд */
		fifoInitChar(&fifoGcodeBuf, GcodeBufferCircle, 256);
 8004756:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800475a:	492d      	ldr	r1, [pc, #180]	@ (8004810 <udpReceiveHandlerEcho+0x304>)
 800475c:	4823      	ldr	r0, [pc, #140]	@ (80047ec <udpReceiveHandlerEcho+0x2e0>)
 800475e:	f7fd fe2f 	bl	80023c0 <fifoInitChar>
		fifoGcodeBuf.head = 4;
 8004762:	4b22      	ldr	r3, [pc, #136]	@ (80047ec <udpReceiveHandlerEcho+0x2e0>)
 8004764:	2204      	movs	r2, #4
 8004766:	609a      	str	r2, [r3, #8]

		ghandler._workState = HANDLER_GCODE_READY;
 8004768:	4b21      	ldr	r3, [pc, #132]	@ (80047f0 <udpReceiveHandlerEcho+0x2e4>)
 800476a:	2202      	movs	r2, #2
 800476c:	711a      	strb	r2, [r3, #4]

		sprintf(data, "%ld - STM32: Circle has been initialized!\n", counter);
 800476e:	4b1b      	ldr	r3, [pc, #108]	@ (80047dc <udpReceiveHandlerEcho+0x2d0>)
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	463b      	mov	r3, r7
 8004774:	4927      	ldr	r1, [pc, #156]	@ (8004814 <udpReceiveHandlerEcho+0x308>)
 8004776:	4618      	mov	r0, r3
 8004778:	f013 fa3a 	bl	8017bf0 <siprintf>

		udpClientSendResponseChar(data);
 800477c:	463b      	mov	r3, r7
 800477e:	4618      	mov	r0, r3
 8004780:	f000 ff3a 	bl	80055f8 <udpClientSendResponseChar>

		memset(rxUdpCharBuf, 0, 128);
 8004784:	2280      	movs	r2, #128	@ 0x80
 8004786:	2100      	movs	r1, #0
 8004788:	4812      	ldr	r0, [pc, #72]	@ (80047d4 <udpReceiveHandlerEcho+0x2c8>)
 800478a:	f013 fac0 	bl	8017d0e <memset>
		return;
 800478e:	f000 be6e 	b.w	800546e <udpReceiveHandlerEcho+0xf62>
	}

	if(strcmp(rxUdpCharBuf, udpcommands.example) == 0)
 8004792:	4b0f      	ldr	r3, [pc, #60]	@ (80047d0 <udpReceiveHandlerEcho+0x2c4>)
 8004794:	695b      	ldr	r3, [r3, #20]
 8004796:	4619      	mov	r1, r3
 8004798:	480e      	ldr	r0, [pc, #56]	@ (80047d4 <udpReceiveHandlerEcho+0x2c8>)
 800479a:	f7fb fd19 	bl	80001d0 <strcmp>
 800479e:	4603      	mov	r3, r0
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d15a      	bne.n	800485a <udpReceiveHandlerEcho+0x34e>
	{
		/* Проверка уже запущенного процесса работы станка */
		if(_runFlag == true)
 80047a4:	4b0c      	ldr	r3, [pc, #48]	@ (80047d8 <udpReceiveHandlerEcho+0x2cc>)
 80047a6:	781b      	ldrb	r3, [r3, #0]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d035      	beq.n	8004818 <udpReceiveHandlerEcho+0x30c>
		{
			sprintf(data, "%ld - STM32: Attention! The machine is running, unable to complete test!\n", counter);
 80047ac:	4b0b      	ldr	r3, [pc, #44]	@ (80047dc <udpReceiveHandlerEcho+0x2d0>)
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	463b      	mov	r3, r7
 80047b2:	490b      	ldr	r1, [pc, #44]	@ (80047e0 <udpReceiveHandlerEcho+0x2d4>)
 80047b4:	4618      	mov	r0, r3
 80047b6:	f013 fa1b 	bl	8017bf0 <siprintf>

			udpClientSendResponseChar(data);
 80047ba:	463b      	mov	r3, r7
 80047bc:	4618      	mov	r0, r3
 80047be:	f000 ff1b 	bl	80055f8 <udpClientSendResponseChar>

			memset(rxUdpCharBuf, 0, 128);
 80047c2:	2280      	movs	r2, #128	@ 0x80
 80047c4:	2100      	movs	r1, #0
 80047c6:	4803      	ldr	r0, [pc, #12]	@ (80047d4 <udpReceiveHandlerEcho+0x2c8>)
 80047c8:	f013 faa1 	bl	8017d0e <memset>
			return;
 80047cc:	f000 be4f 	b.w	800546e <udpReceiveHandlerEcho+0xf62>
 80047d0:	20000898 	.word	0x20000898
 80047d4:	2000e434 	.word	0x2000e434
 80047d8:	2000e42c 	.word	0x2000e42c
 80047dc:	2000e534 	.word	0x2000e534
 80047e0:	0801ffbc 	.word	0x0801ffbc
 80047e4:	2000d828 	.word	0x2000d828
 80047e8:	20000024 	.word	0x20000024
 80047ec:	20000ff4 	.word	0x20000ff4
 80047f0:	2000e424 	.word	0x2000e424
 80047f4:	08020008 	.word	0x08020008
 80047f8:	20000070 	.word	0x20000070
 80047fc:	08020038 	.word	0x08020038
 8004800:	2000024c 	.word	0x2000024c
 8004804:	08020068 	.word	0x08020068
 8004808:	20000450 	.word	0x20000450
 800480c:	08020098 	.word	0x08020098
 8004810:	20000014 	.word	0x20000014
 8004814:	080200c8 	.word	0x080200c8
		}

		fifoClear(&fifoBufSteps);
 8004818:	48b2      	ldr	r0, [pc, #712]	@ (8004ae4 <udpReceiveHandlerEcho+0x5d8>)
 800481a:	f7fd fd05 	bl	8002228 <fifoClear>

		/* Переинициализация FIFO буфера G - команд */
		fifoInitChar(&fifoGcodeBuf, GcodeBufferExample, 256);
 800481e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004822:	49b1      	ldr	r1, [pc, #708]	@ (8004ae8 <udpReceiveHandlerEcho+0x5dc>)
 8004824:	48b1      	ldr	r0, [pc, #708]	@ (8004aec <udpReceiveHandlerEcho+0x5e0>)
 8004826:	f7fd fdcb 	bl	80023c0 <fifoInitChar>
		fifoGcodeBuf.head = 5;
 800482a:	4bb0      	ldr	r3, [pc, #704]	@ (8004aec <udpReceiveHandlerEcho+0x5e0>)
 800482c:	2205      	movs	r2, #5
 800482e:	609a      	str	r2, [r3, #8]

		ghandler._workState = HANDLER_GCODE_READY;
 8004830:	4baf      	ldr	r3, [pc, #700]	@ (8004af0 <udpReceiveHandlerEcho+0x5e4>)
 8004832:	2202      	movs	r2, #2
 8004834:	711a      	strb	r2, [r3, #4]

		sprintf(data, "%ld - STM32: Example has been initialized!\n", counter);
 8004836:	4baf      	ldr	r3, [pc, #700]	@ (8004af4 <udpReceiveHandlerEcho+0x5e8>)
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	463b      	mov	r3, r7
 800483c:	49ae      	ldr	r1, [pc, #696]	@ (8004af8 <udpReceiveHandlerEcho+0x5ec>)
 800483e:	4618      	mov	r0, r3
 8004840:	f013 f9d6 	bl	8017bf0 <siprintf>

		udpClientSendResponseChar(data);
 8004844:	463b      	mov	r3, r7
 8004846:	4618      	mov	r0, r3
 8004848:	f000 fed6 	bl	80055f8 <udpClientSendResponseChar>

		memset(rxUdpCharBuf, 0, 128);
 800484c:	2280      	movs	r2, #128	@ 0x80
 800484e:	2100      	movs	r1, #0
 8004850:	48aa      	ldr	r0, [pc, #680]	@ (8004afc <udpReceiveHandlerEcho+0x5f0>)
 8004852:	f013 fa5c 	bl	8017d0e <memset>
		return;
 8004856:	f000 be0a 	b.w	800546e <udpReceiveHandlerEcho+0xf62>
	}

	/* Запуск процесса работы станка */
	if(strcmp(rxUdpCharBuf, udpcommands.start) == 0)
 800485a:	4ba9      	ldr	r3, [pc, #676]	@ (8004b00 <udpReceiveHandlerEcho+0x5f4>)
 800485c:	699b      	ldr	r3, [r3, #24]
 800485e:	4619      	mov	r1, r3
 8004860:	48a6      	ldr	r0, [pc, #664]	@ (8004afc <udpReceiveHandlerEcho+0x5f0>)
 8004862:	f7fb fcb5 	bl	80001d0 <strcmp>
 8004866:	4603      	mov	r3, r0
 8004868:	2b00      	cmp	r3, #0
 800486a:	d145      	bne.n	80048f8 <udpReceiveHandlerEcho+0x3ec>
	{
		/* Проверка уже запущенного процесса работы станка */
		if(_runFlag == true)
 800486c:	4ba5      	ldr	r3, [pc, #660]	@ (8004b04 <udpReceiveHandlerEcho+0x5f8>)
 800486e:	781b      	ldrb	r3, [r3, #0]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d011      	beq.n	8004898 <udpReceiveHandlerEcho+0x38c>
		{
			sprintf(data, "%ld - STM32: Attention! The machine is already running!\n", counter);
 8004874:	4b9f      	ldr	r3, [pc, #636]	@ (8004af4 <udpReceiveHandlerEcho+0x5e8>)
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	463b      	mov	r3, r7
 800487a:	49a3      	ldr	r1, [pc, #652]	@ (8004b08 <udpReceiveHandlerEcho+0x5fc>)
 800487c:	4618      	mov	r0, r3
 800487e:	f013 f9b7 	bl	8017bf0 <siprintf>

			udpClientSendResponseChar(data);
 8004882:	463b      	mov	r3, r7
 8004884:	4618      	mov	r0, r3
 8004886:	f000 feb7 	bl	80055f8 <udpClientSendResponseChar>

			memset(rxUdpCharBuf, 0, 128);
 800488a:	2280      	movs	r2, #128	@ 0x80
 800488c:	2100      	movs	r1, #0
 800488e:	489b      	ldr	r0, [pc, #620]	@ (8004afc <udpReceiveHandlerEcho+0x5f0>)
 8004890:	f013 fa3d 	bl	8017d0e <memset>
			return;
 8004894:	f000 bdeb 	b.w	800546e <udpReceiveHandlerEcho+0xf62>
		}

		if(availableForRead(&fifoBufSteps) == FIFO_EMPTY)
 8004898:	4892      	ldr	r0, [pc, #584]	@ (8004ae4 <udpReceiveHandlerEcho+0x5d8>)
 800489a:	f7fd fd11 	bl	80022c0 <availableForRead>
 800489e:	4603      	mov	r3, r0
 80048a0:	2b02      	cmp	r3, #2
 80048a2:	d111      	bne.n	80048c8 <udpReceiveHandlerEcho+0x3bc>
		{
			sprintf(data, "%ld - STM32: G-code program is empty!\n", counter);
 80048a4:	4b93      	ldr	r3, [pc, #588]	@ (8004af4 <udpReceiveHandlerEcho+0x5e8>)
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	463b      	mov	r3, r7
 80048aa:	4998      	ldr	r1, [pc, #608]	@ (8004b0c <udpReceiveHandlerEcho+0x600>)
 80048ac:	4618      	mov	r0, r3
 80048ae:	f013 f99f 	bl	8017bf0 <siprintf>

			udpClientSendResponseChar(data);
 80048b2:	463b      	mov	r3, r7
 80048b4:	4618      	mov	r0, r3
 80048b6:	f000 fe9f 	bl	80055f8 <udpClientSendResponseChar>

			memset(rxUdpCharBuf, 0, 128);
 80048ba:	2280      	movs	r2, #128	@ 0x80
 80048bc:	2100      	movs	r1, #0
 80048be:	488f      	ldr	r0, [pc, #572]	@ (8004afc <udpReceiveHandlerEcho+0x5f0>)
 80048c0:	f013 fa25 	bl	8017d0e <memset>
			return;
 80048c4:	f000 bdd3 	b.w	800546e <udpReceiveHandlerEcho+0xf62>
		}

		calculatePlannerInitialParam(&planner);
 80048c8:	4891      	ldr	r0, [pc, #580]	@ (8004b10 <udpReceiveHandlerEcho+0x604>)
 80048ca:	f001 fb51 	bl	8005f70 <calculatePlannerInitialParam>

		/* Флаг запуска процесса работы */
		_runFlag = true;
 80048ce:	4b8d      	ldr	r3, [pc, #564]	@ (8004b04 <udpReceiveHandlerEcho+0x5f8>)
 80048d0:	2201      	movs	r2, #1
 80048d2:	701a      	strb	r2, [r3, #0]

		sprintf(data, "%ld - STM32: The process has been started!\n", counter);
 80048d4:	4b87      	ldr	r3, [pc, #540]	@ (8004af4 <udpReceiveHandlerEcho+0x5e8>)
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	463b      	mov	r3, r7
 80048da:	498e      	ldr	r1, [pc, #568]	@ (8004b14 <udpReceiveHandlerEcho+0x608>)
 80048dc:	4618      	mov	r0, r3
 80048de:	f013 f987 	bl	8017bf0 <siprintf>

		udpClientSendResponseChar(data);
 80048e2:	463b      	mov	r3, r7
 80048e4:	4618      	mov	r0, r3
 80048e6:	f000 fe87 	bl	80055f8 <udpClientSendResponseChar>

		memset(rxUdpCharBuf, 0, 128);
 80048ea:	2280      	movs	r2, #128	@ 0x80
 80048ec:	2100      	movs	r1, #0
 80048ee:	4883      	ldr	r0, [pc, #524]	@ (8004afc <udpReceiveHandlerEcho+0x5f0>)
 80048f0:	f013 fa0d 	bl	8017d0e <memset>
		return;
 80048f4:	f000 bdbb 	b.w	800546e <udpReceiveHandlerEcho+0xf62>
	}

	/* Запуск приостановки работы станка */
	if(strcmp(rxUdpCharBuf, udpcommands.pause) == 0)
 80048f8:	4b81      	ldr	r3, [pc, #516]	@ (8004b00 <udpReceiveHandlerEcho+0x5f4>)
 80048fa:	69db      	ldr	r3, [r3, #28]
 80048fc:	4619      	mov	r1, r3
 80048fe:	487f      	ldr	r0, [pc, #508]	@ (8004afc <udpReceiveHandlerEcho+0x5f0>)
 8004900:	f7fb fc66 	bl	80001d0 <strcmp>
 8004904:	4603      	mov	r3, r0
 8004906:	2b00      	cmp	r3, #0
 8004908:	d12d      	bne.n	8004966 <udpReceiveHandlerEcho+0x45a>
	{
		/* Проверка запущенного процесса работы станка */
		if(_runFlag == false)
 800490a:	4b7e      	ldr	r3, [pc, #504]	@ (8004b04 <udpReceiveHandlerEcho+0x5f8>)
 800490c:	781b      	ldrb	r3, [r3, #0]
 800490e:	f083 0301 	eor.w	r3, r3, #1
 8004912:	b2db      	uxtb	r3, r3
 8004914:	2b00      	cmp	r3, #0
 8004916:	d011      	beq.n	800493c <udpReceiveHandlerEcho+0x430>
		{
			sprintf(data, "%ld - STM32: Attention! The machine is not running!\n", counter);
 8004918:	4b76      	ldr	r3, [pc, #472]	@ (8004af4 <udpReceiveHandlerEcho+0x5e8>)
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	463b      	mov	r3, r7
 800491e:	497e      	ldr	r1, [pc, #504]	@ (8004b18 <udpReceiveHandlerEcho+0x60c>)
 8004920:	4618      	mov	r0, r3
 8004922:	f013 f965 	bl	8017bf0 <siprintf>

			udpClientSendResponseChar(data);
 8004926:	463b      	mov	r3, r7
 8004928:	4618      	mov	r0, r3
 800492a:	f000 fe65 	bl	80055f8 <udpClientSendResponseChar>

			memset(rxUdpCharBuf, 0, 128);
 800492e:	2280      	movs	r2, #128	@ 0x80
 8004930:	2100      	movs	r1, #0
 8004932:	4872      	ldr	r0, [pc, #456]	@ (8004afc <udpReceiveHandlerEcho+0x5f0>)
 8004934:	f013 f9eb 	bl	8017d0e <memset>
			return;
 8004938:	f000 bd99 	b.w	800546e <udpReceiveHandlerEcho+0xf62>
		}

		/* Здесь должна быть функция паузы станка */
		pausePlanner(&planner);
 800493c:	4874      	ldr	r0, [pc, #464]	@ (8004b10 <udpReceiveHandlerEcho+0x604>)
 800493e:	f001 fc2b 	bl	8006198 <pausePlanner>

		sprintf(data, "%ld - STM32: The process has been paused!\n", counter);
 8004942:	4b6c      	ldr	r3, [pc, #432]	@ (8004af4 <udpReceiveHandlerEcho+0x5e8>)
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	463b      	mov	r3, r7
 8004948:	4974      	ldr	r1, [pc, #464]	@ (8004b1c <udpReceiveHandlerEcho+0x610>)
 800494a:	4618      	mov	r0, r3
 800494c:	f013 f950 	bl	8017bf0 <siprintf>

		udpClientSendResponseChar(data);
 8004950:	463b      	mov	r3, r7
 8004952:	4618      	mov	r0, r3
 8004954:	f000 fe50 	bl	80055f8 <udpClientSendResponseChar>

		memset(rxUdpCharBuf, 0, 128);
 8004958:	2280      	movs	r2, #128	@ 0x80
 800495a:	2100      	movs	r1, #0
 800495c:	4867      	ldr	r0, [pc, #412]	@ (8004afc <udpReceiveHandlerEcho+0x5f0>)
 800495e:	f013 f9d6 	bl	8017d0e <memset>
		return;
 8004962:	f000 bd84 	b.w	800546e <udpReceiveHandlerEcho+0xf62>
	}

	/* Запуск возобновления процесса работы станка */
	if(strcmp(rxUdpCharBuf, udpcommands.resume) == 0)
 8004966:	4b66      	ldr	r3, [pc, #408]	@ (8004b00 <udpReceiveHandlerEcho+0x5f4>)
 8004968:	6a1b      	ldr	r3, [r3, #32]
 800496a:	4619      	mov	r1, r3
 800496c:	4863      	ldr	r0, [pc, #396]	@ (8004afc <udpReceiveHandlerEcho+0x5f0>)
 800496e:	f7fb fc2f 	bl	80001d0 <strcmp>
 8004972:	4603      	mov	r3, r0
 8004974:	2b00      	cmp	r3, #0
 8004976:	d12d      	bne.n	80049d4 <udpReceiveHandlerEcho+0x4c8>
	{
		/* Проверка запущенного процесса работы станка */
		if(_runFlag == false)
 8004978:	4b62      	ldr	r3, [pc, #392]	@ (8004b04 <udpReceiveHandlerEcho+0x5f8>)
 800497a:	781b      	ldrb	r3, [r3, #0]
 800497c:	f083 0301 	eor.w	r3, r3, #1
 8004980:	b2db      	uxtb	r3, r3
 8004982:	2b00      	cmp	r3, #0
 8004984:	d011      	beq.n	80049aa <udpReceiveHandlerEcho+0x49e>
		{
			sprintf(data, "%ld - STM32: Attention! The machine is not running!\n", counter);
 8004986:	4b5b      	ldr	r3, [pc, #364]	@ (8004af4 <udpReceiveHandlerEcho+0x5e8>)
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	463b      	mov	r3, r7
 800498c:	4962      	ldr	r1, [pc, #392]	@ (8004b18 <udpReceiveHandlerEcho+0x60c>)
 800498e:	4618      	mov	r0, r3
 8004990:	f013 f92e 	bl	8017bf0 <siprintf>

			udpClientSendResponseChar(data);
 8004994:	463b      	mov	r3, r7
 8004996:	4618      	mov	r0, r3
 8004998:	f000 fe2e 	bl	80055f8 <udpClientSendResponseChar>

			memset(rxUdpCharBuf, 0, 128);
 800499c:	2280      	movs	r2, #128	@ 0x80
 800499e:	2100      	movs	r1, #0
 80049a0:	4856      	ldr	r0, [pc, #344]	@ (8004afc <udpReceiveHandlerEcho+0x5f0>)
 80049a2:	f013 f9b4 	bl	8017d0e <memset>
			return;
 80049a6:	f000 bd62 	b.w	800546e <udpReceiveHandlerEcho+0xf62>
		}

		/* Здесь должна быть функция возобновления станка */
		resumePlanner(&planner);
 80049aa:	4859      	ldr	r0, [pc, #356]	@ (8004b10 <udpReceiveHandlerEcho+0x604>)
 80049ac:	f001 fc0e 	bl	80061cc <resumePlanner>

		sprintf(data, "%ld - STM32: The process has been resumed!\n", counter);
 80049b0:	4b50      	ldr	r3, [pc, #320]	@ (8004af4 <udpReceiveHandlerEcho+0x5e8>)
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	463b      	mov	r3, r7
 80049b6:	495a      	ldr	r1, [pc, #360]	@ (8004b20 <udpReceiveHandlerEcho+0x614>)
 80049b8:	4618      	mov	r0, r3
 80049ba:	f013 f919 	bl	8017bf0 <siprintf>

		udpClientSendResponseChar(data);
 80049be:	463b      	mov	r3, r7
 80049c0:	4618      	mov	r0, r3
 80049c2:	f000 fe19 	bl	80055f8 <udpClientSendResponseChar>

		memset(rxUdpCharBuf, 0, 128);
 80049c6:	2280      	movs	r2, #128	@ 0x80
 80049c8:	2100      	movs	r1, #0
 80049ca:	484c      	ldr	r0, [pc, #304]	@ (8004afc <udpReceiveHandlerEcho+0x5f0>)
 80049cc:	f013 f99f 	bl	8017d0e <memset>
		return;
 80049d0:	f000 bd4d 	b.w	800546e <udpReceiveHandlerEcho+0xf62>
	}

	/* Запуск резкой остановки процесса работы станка с возможностью продолжения процесса */
	if(strcmp(rxUdpCharBuf, udpcommands.stop) == 0)
 80049d4:	4b4a      	ldr	r3, [pc, #296]	@ (8004b00 <udpReceiveHandlerEcho+0x5f4>)
 80049d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049d8:	4619      	mov	r1, r3
 80049da:	4848      	ldr	r0, [pc, #288]	@ (8004afc <udpReceiveHandlerEcho+0x5f0>)
 80049dc:	f7fb fbf8 	bl	80001d0 <strcmp>
 80049e0:	4603      	mov	r3, r0
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d12d      	bne.n	8004a42 <udpReceiveHandlerEcho+0x536>
	{
		/* Проверка запущенного процесса работы станка */
		if(_runFlag == false)
 80049e6:	4b47      	ldr	r3, [pc, #284]	@ (8004b04 <udpReceiveHandlerEcho+0x5f8>)
 80049e8:	781b      	ldrb	r3, [r3, #0]
 80049ea:	f083 0301 	eor.w	r3, r3, #1
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d011      	beq.n	8004a18 <udpReceiveHandlerEcho+0x50c>
		{
			sprintf(data, "%ld - STM32: Attention! The machine is not running!\n", counter);
 80049f4:	4b3f      	ldr	r3, [pc, #252]	@ (8004af4 <udpReceiveHandlerEcho+0x5e8>)
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	463b      	mov	r3, r7
 80049fa:	4947      	ldr	r1, [pc, #284]	@ (8004b18 <udpReceiveHandlerEcho+0x60c>)
 80049fc:	4618      	mov	r0, r3
 80049fe:	f013 f8f7 	bl	8017bf0 <siprintf>

			udpClientSendResponseChar(data);
 8004a02:	463b      	mov	r3, r7
 8004a04:	4618      	mov	r0, r3
 8004a06:	f000 fdf7 	bl	80055f8 <udpClientSendResponseChar>

			memset(rxUdpCharBuf, 0, 128);
 8004a0a:	2280      	movs	r2, #128	@ 0x80
 8004a0c:	2100      	movs	r1, #0
 8004a0e:	483b      	ldr	r0, [pc, #236]	@ (8004afc <udpReceiveHandlerEcho+0x5f0>)
 8004a10:	f013 f97d 	bl	8017d0e <memset>
			return;
 8004a14:	f000 bd2b 	b.w	800546e <udpReceiveHandlerEcho+0xf62>
		}

		/* Здесь должна быть функция остановки станка */
		stopPlanner(&planner);
 8004a18:	483d      	ldr	r0, [pc, #244]	@ (8004b10 <udpReceiveHandlerEcho+0x604>)
 8004a1a:	f001 fbe8 	bl	80061ee <stopPlanner>

		sprintf(data, "%ld - STM32: The process has been stopped!\n", counter);
 8004a1e:	4b35      	ldr	r3, [pc, #212]	@ (8004af4 <udpReceiveHandlerEcho+0x5e8>)
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	463b      	mov	r3, r7
 8004a24:	493f      	ldr	r1, [pc, #252]	@ (8004b24 <udpReceiveHandlerEcho+0x618>)
 8004a26:	4618      	mov	r0, r3
 8004a28:	f013 f8e2 	bl	8017bf0 <siprintf>

		udpClientSendResponseChar(data);
 8004a2c:	463b      	mov	r3, r7
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f000 fde2 	bl	80055f8 <udpClientSendResponseChar>

		memset(rxUdpCharBuf, 0, 128);
 8004a34:	2280      	movs	r2, #128	@ 0x80
 8004a36:	2100      	movs	r1, #0
 8004a38:	4830      	ldr	r0, [pc, #192]	@ (8004afc <udpReceiveHandlerEcho+0x5f0>)
 8004a3a:	f013 f968 	bl	8017d0e <memset>
		return;
 8004a3e:	f000 bd16 	b.w	800546e <udpReceiveHandlerEcho+0xf62>
	}

	if(strncmp(rxUdpCharBuf, udpcommands.setPlannerAcceleration, strlen(udpcommands.setPlannerAcceleration)) == 0)
 8004a42:	4b2f      	ldr	r3, [pc, #188]	@ (8004b00 <udpReceiveHandlerEcho+0x5f4>)
 8004a44:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8004a46:	4b2e      	ldr	r3, [pc, #184]	@ (8004b00 <udpReceiveHandlerEcho+0x5f4>)
 8004a48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f7fb fbca 	bl	80001e4 <strlen>
 8004a50:	4603      	mov	r3, r0
 8004a52:	461a      	mov	r2, r3
 8004a54:	4621      	mov	r1, r4
 8004a56:	4829      	ldr	r0, [pc, #164]	@ (8004afc <udpReceiveHandlerEcho+0x5f0>)
 8004a58:	f013 f96e 	bl	8017d38 <strncmp>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d166      	bne.n	8004b30 <udpReceiveHandlerEcho+0x624>
	{
		/* Проверка запущенного процесса работы станка */
		if(_runFlag == true)
 8004a62:	4b28      	ldr	r3, [pc, #160]	@ (8004b04 <udpReceiveHandlerEcho+0x5f8>)
 8004a64:	781b      	ldrb	r3, [r3, #0]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d011      	beq.n	8004a8e <udpReceiveHandlerEcho+0x582>
		{
			sprintf(data, "%ld - STM32: Error changing! The machine is running!\n", counter);
 8004a6a:	4b22      	ldr	r3, [pc, #136]	@ (8004af4 <udpReceiveHandlerEcho+0x5e8>)
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	463b      	mov	r3, r7
 8004a70:	492d      	ldr	r1, [pc, #180]	@ (8004b28 <udpReceiveHandlerEcho+0x61c>)
 8004a72:	4618      	mov	r0, r3
 8004a74:	f013 f8bc 	bl	8017bf0 <siprintf>

			udpClientSendResponseChar(data);
 8004a78:	463b      	mov	r3, r7
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f000 fdbc 	bl	80055f8 <udpClientSendResponseChar>

			memset(rxUdpCharBuf, 0, 128);
 8004a80:	2280      	movs	r2, #128	@ 0x80
 8004a82:	2100      	movs	r1, #0
 8004a84:	481d      	ldr	r0, [pc, #116]	@ (8004afc <udpReceiveHandlerEcho+0x5f0>)
 8004a86:	f013 f942 	bl	8017d0e <memset>
			return;
 8004a8a:	f000 bcf0 	b.w	800546e <udpReceiveHandlerEcho+0xf62>
		}

		float acceleration = atof(strchr(rxUdpCharBuf, ' ') + 1);
 8004a8e:	2120      	movs	r1, #32
 8004a90:	481a      	ldr	r0, [pc, #104]	@ (8004afc <udpReceiveHandlerEcho+0x5f0>)
 8004a92:	f013 f944 	bl	8017d1e <strchr>
 8004a96:	4603      	mov	r3, r0
 8004a98:	3301      	adds	r3, #1
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f012 f8f8 	bl	8016c90 <atof>
 8004aa0:	ec53 2b10 	vmov	r2, r3, d0
 8004aa4:	4610      	mov	r0, r2
 8004aa6:	4619      	mov	r1, r3
 8004aa8:	f7fc f8ae 	bl	8000c08 <__aeabi_d2f>
 8004aac:	4603      	mov	r3, r0
 8004aae:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
		setPlannerAcceleration(&planner, acceleration);
 8004ab2:	ed97 0a40 	vldr	s0, [r7, #256]	@ 0x100
 8004ab6:	4816      	ldr	r0, [pc, #88]	@ (8004b10 <udpReceiveHandlerEcho+0x604>)
 8004ab8:	f001 fac6 	bl	8006048 <setPlannerAcceleration>

		sprintf(data, "%ld - STM32: Planner acceleration = %ld (steps/sec^2);\n", counter, planner._accel);
 8004abc:	4b0d      	ldr	r3, [pc, #52]	@ (8004af4 <udpReceiveHandlerEcho+0x5e8>)
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	4b13      	ldr	r3, [pc, #76]	@ (8004b10 <udpReceiveHandlerEcho+0x604>)
 8004ac2:	695b      	ldr	r3, [r3, #20]
 8004ac4:	4638      	mov	r0, r7
 8004ac6:	4919      	ldr	r1, [pc, #100]	@ (8004b2c <udpReceiveHandlerEcho+0x620>)
 8004ac8:	f013 f892 	bl	8017bf0 <siprintf>

		udpClientSendResponseChar(data);
 8004acc:	463b      	mov	r3, r7
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f000 fd92 	bl	80055f8 <udpClientSendResponseChar>

		memset(rxUdpCharBuf, 0, 128);
 8004ad4:	2280      	movs	r2, #128	@ 0x80
 8004ad6:	2100      	movs	r1, #0
 8004ad8:	4808      	ldr	r0, [pc, #32]	@ (8004afc <udpReceiveHandlerEcho+0x5f0>)
 8004ada:	f013 f918 	bl	8017d0e <memset>
		return;
 8004ade:	f000 bcc6 	b.w	800546e <udpReceiveHandlerEcho+0xf62>
 8004ae2:	bf00      	nop
 8004ae4:	2000d828 	.word	0x2000d828
 8004ae8:	20000000 	.word	0x20000000
 8004aec:	20000ff4 	.word	0x20000ff4
 8004af0:	2000e424 	.word	0x2000e424
 8004af4:	2000e534 	.word	0x2000e534
 8004af8:	080200f4 	.word	0x080200f4
 8004afc:	2000e434 	.word	0x2000e434
 8004b00:	20000898 	.word	0x20000898
 8004b04:	2000e42c 	.word	0x2000e42c
 8004b08:	08020120 	.word	0x08020120
 8004b0c:	0802015c 	.word	0x0802015c
 8004b10:	2000e374 	.word	0x2000e374
 8004b14:	08020184 	.word	0x08020184
 8004b18:	080201b0 	.word	0x080201b0
 8004b1c:	080201e8 	.word	0x080201e8
 8004b20:	08020214 	.word	0x08020214
 8004b24:	08020240 	.word	0x08020240
 8004b28:	0802026c 	.word	0x0802026c
 8004b2c:	080202a4 	.word	0x080202a4
	}

	if(strncmp(rxUdpCharBuf, udpcommands.setPlannerMaxSpeed, strlen(udpcommands.setPlannerMaxSpeed)) == 0)
 8004b30:	4bbd      	ldr	r3, [pc, #756]	@ (8004e28 <udpReceiveHandlerEcho+0x91c>)
 8004b32:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 8004b34:	4bbc      	ldr	r3, [pc, #752]	@ (8004e28 <udpReceiveHandlerEcho+0x91c>)
 8004b36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f7fb fb53 	bl	80001e4 <strlen>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	461a      	mov	r2, r3
 8004b42:	4621      	mov	r1, r4
 8004b44:	48b9      	ldr	r0, [pc, #740]	@ (8004e2c <udpReceiveHandlerEcho+0x920>)
 8004b46:	f013 f8f7 	bl	8017d38 <strncmp>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d13f      	bne.n	8004bd0 <udpReceiveHandlerEcho+0x6c4>
	{
		/* Проверка запущенного процесса работы станка */
		if(_runFlag == true)
 8004b50:	4bb7      	ldr	r3, [pc, #732]	@ (8004e30 <udpReceiveHandlerEcho+0x924>)
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d011      	beq.n	8004b7c <udpReceiveHandlerEcho+0x670>
		{
			sprintf(data, "%ld - STM32: Error changing! The machine is running!\n", counter);
 8004b58:	4bb6      	ldr	r3, [pc, #728]	@ (8004e34 <udpReceiveHandlerEcho+0x928>)
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	463b      	mov	r3, r7
 8004b5e:	49b6      	ldr	r1, [pc, #728]	@ (8004e38 <udpReceiveHandlerEcho+0x92c>)
 8004b60:	4618      	mov	r0, r3
 8004b62:	f013 f845 	bl	8017bf0 <siprintf>

			udpClientSendResponseChar(data);
 8004b66:	463b      	mov	r3, r7
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f000 fd45 	bl	80055f8 <udpClientSendResponseChar>

			memset(rxUdpCharBuf, 0, 128);
 8004b6e:	2280      	movs	r2, #128	@ 0x80
 8004b70:	2100      	movs	r1, #0
 8004b72:	48ae      	ldr	r0, [pc, #696]	@ (8004e2c <udpReceiveHandlerEcho+0x920>)
 8004b74:	f013 f8cb 	bl	8017d0e <memset>
			return;
 8004b78:	f000 bc79 	b.w	800546e <udpReceiveHandlerEcho+0xf62>
		}

		float speed = atof(strchr(rxUdpCharBuf, ' ') + 1);
 8004b7c:	2120      	movs	r1, #32
 8004b7e:	48ab      	ldr	r0, [pc, #684]	@ (8004e2c <udpReceiveHandlerEcho+0x920>)
 8004b80:	f013 f8cd 	bl	8017d1e <strchr>
 8004b84:	4603      	mov	r3, r0
 8004b86:	3301      	adds	r3, #1
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f012 f881 	bl	8016c90 <atof>
 8004b8e:	ec53 2b10 	vmov	r2, r3, d0
 8004b92:	4610      	mov	r0, r2
 8004b94:	4619      	mov	r1, r3
 8004b96:	f7fc f837 	bl	8000c08 <__aeabi_d2f>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
		setPlannerMaxSpeed(&planner, speed);
 8004ba0:	ed97 0a41 	vldr	s0, [r7, #260]	@ 0x104
 8004ba4:	48a5      	ldr	r0, [pc, #660]	@ (8004e3c <udpReceiveHandlerEcho+0x930>)
 8004ba6:	f001 fab9 	bl	800611c <setPlannerMaxSpeed>

		sprintf(data, "%ld - STM32: Planner max speed = %ld (steps/sec^2);\n", counter, planner._maxSpeed);
 8004baa:	4ba2      	ldr	r3, [pc, #648]	@ (8004e34 <udpReceiveHandlerEcho+0x928>)
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	4ba3      	ldr	r3, [pc, #652]	@ (8004e3c <udpReceiveHandlerEcho+0x930>)
 8004bb0:	691b      	ldr	r3, [r3, #16]
 8004bb2:	4638      	mov	r0, r7
 8004bb4:	49a2      	ldr	r1, [pc, #648]	@ (8004e40 <udpReceiveHandlerEcho+0x934>)
 8004bb6:	f013 f81b 	bl	8017bf0 <siprintf>

		udpClientSendResponseChar(data);
 8004bba:	463b      	mov	r3, r7
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f000 fd1b 	bl	80055f8 <udpClientSendResponseChar>

		memset(rxUdpCharBuf, 0, 128);
 8004bc2:	2280      	movs	r2, #128	@ 0x80
 8004bc4:	2100      	movs	r1, #0
 8004bc6:	4899      	ldr	r0, [pc, #612]	@ (8004e2c <udpReceiveHandlerEcho+0x920>)
 8004bc8:	f013 f8a1 	bl	8017d0e <memset>
		return;
 8004bcc:	f000 bc4f 	b.w	800546e <udpReceiveHandlerEcho+0xf62>
	}

	/* Задать _runMode */
	if(strncmp(rxUdpCharBuf, udpcommands.setDriverRunMode, strlen(udpcommands.setDriverRunMode)) == 0)
 8004bd0:	4b95      	ldr	r3, [pc, #596]	@ (8004e28 <udpReceiveHandlerEcho+0x91c>)
 8004bd2:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 8004bd4:	4b94      	ldr	r3, [pc, #592]	@ (8004e28 <udpReceiveHandlerEcho+0x91c>)
 8004bd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f7fb fb03 	bl	80001e4 <strlen>
 8004bde:	4603      	mov	r3, r0
 8004be0:	461a      	mov	r2, r3
 8004be2:	4621      	mov	r1, r4
 8004be4:	4891      	ldr	r0, [pc, #580]	@ (8004e2c <udpReceiveHandlerEcho+0x920>)
 8004be6:	f013 f8a7 	bl	8017d38 <strncmp>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d15b      	bne.n	8004ca8 <udpReceiveHandlerEcho+0x79c>
	{
		int8_t axis = atoi(strchr(rxUdpCharBuf, ' ') + 1);
 8004bf0:	2120      	movs	r1, #32
 8004bf2:	488e      	ldr	r0, [pc, #568]	@ (8004e2c <udpReceiveHandlerEcho+0x920>)
 8004bf4:	f013 f893 	bl	8017d1e <strchr>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	3301      	adds	r3, #1
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f012 f84a 	bl	8016c96 <atoi>
 8004c02:	4603      	mov	r3, r0
 8004c04:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
		if(rxUdpCharBuf[strlen(udpcommands.setDriverRunMode) + 3] == 'V')
 8004c08:	4b87      	ldr	r3, [pc, #540]	@ (8004e28 <udpReceiveHandlerEcho+0x91c>)
 8004c0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f7fb fae9 	bl	80001e4 <strlen>
 8004c12:	4603      	mov	r3, r0
 8004c14:	3303      	adds	r3, #3
 8004c16:	4a85      	ldr	r2, [pc, #532]	@ (8004e2c <udpReceiveHandlerEcho+0x920>)
 8004c18:	5cd3      	ldrb	r3, [r2, r3]
 8004c1a:	2b56      	cmp	r3, #86	@ 0x56
 8004c1c:	d113      	bne.n	8004c46 <udpReceiveHandlerEcho+0x73a>
		{
			sprintf(data, "%ld - STM32: Movement mode driver - %d = VELOCITY_MODE;\n", counter, axis);
 8004c1e:	4b85      	ldr	r3, [pc, #532]	@ (8004e34 <udpReceiveHandlerEcho+0x928>)
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	f997 310b 	ldrsb.w	r3, [r7, #267]	@ 0x10b
 8004c26:	4638      	mov	r0, r7
 8004c28:	4986      	ldr	r1, [pc, #536]	@ (8004e44 <udpReceiveHandlerEcho+0x938>)
 8004c2a:	f012 ffe1 	bl	8017bf0 <siprintf>
			setDriverRunMode(&driver[axis], VELOCITY_MODE);
 8004c2e:	f997 310b 	ldrsb.w	r3, [r7, #267]	@ 0x10b
 8004c32:	226c      	movs	r2, #108	@ 0x6c
 8004c34:	fb02 f303 	mul.w	r3, r2, r3
 8004c38:	4a83      	ldr	r2, [pc, #524]	@ (8004e48 <udpReceiveHandlerEcho+0x93c>)
 8004c3a:	4413      	add	r3, r2
 8004c3c:	2101      	movs	r1, #1
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f7fc fbc8 	bl	80013d4 <setDriverRunMode>
 8004c44:	e026      	b.n	8004c94 <udpReceiveHandlerEcho+0x788>
		}
		else if(rxUdpCharBuf[strlen(udpcommands.setDriverRunMode) + 3] == 'P')
 8004c46:	4b78      	ldr	r3, [pc, #480]	@ (8004e28 <udpReceiveHandlerEcho+0x91c>)
 8004c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f7fb faca 	bl	80001e4 <strlen>
 8004c50:	4603      	mov	r3, r0
 8004c52:	3303      	adds	r3, #3
 8004c54:	4a75      	ldr	r2, [pc, #468]	@ (8004e2c <udpReceiveHandlerEcho+0x920>)
 8004c56:	5cd3      	ldrb	r3, [r2, r3]
 8004c58:	2b50      	cmp	r3, #80	@ 0x50
 8004c5a:	d113      	bne.n	8004c84 <udpReceiveHandlerEcho+0x778>
		{
			sprintf(data, "%ld - STM32: Movement mode driver - %d = POSITION_MODE;\n", counter, axis);
 8004c5c:	4b75      	ldr	r3, [pc, #468]	@ (8004e34 <udpReceiveHandlerEcho+0x928>)
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	f997 310b 	ldrsb.w	r3, [r7, #267]	@ 0x10b
 8004c64:	4638      	mov	r0, r7
 8004c66:	4979      	ldr	r1, [pc, #484]	@ (8004e4c <udpReceiveHandlerEcho+0x940>)
 8004c68:	f012 ffc2 	bl	8017bf0 <siprintf>
			setDriverRunMode(&driver[axis], POSITION_MODE);
 8004c6c:	f997 310b 	ldrsb.w	r3, [r7, #267]	@ 0x10b
 8004c70:	226c      	movs	r2, #108	@ 0x6c
 8004c72:	fb02 f303 	mul.w	r3, r2, r3
 8004c76:	4a74      	ldr	r2, [pc, #464]	@ (8004e48 <udpReceiveHandlerEcho+0x93c>)
 8004c78:	4413      	add	r3, r2
 8004c7a:	2100      	movs	r1, #0
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f7fc fba9 	bl	80013d4 <setDriverRunMode>
 8004c82:	e007      	b.n	8004c94 <udpReceiveHandlerEcho+0x788>
		}
		else
		{
			sprintf(data, "%ld - STM32: Error changing movement mode of driver - %d;\n", counter, axis);
 8004c84:	4b6b      	ldr	r3, [pc, #428]	@ (8004e34 <udpReceiveHandlerEcho+0x928>)
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	f997 310b 	ldrsb.w	r3, [r7, #267]	@ 0x10b
 8004c8c:	4638      	mov	r0, r7
 8004c8e:	4970      	ldr	r1, [pc, #448]	@ (8004e50 <udpReceiveHandlerEcho+0x944>)
 8004c90:	f012 ffae 	bl	8017bf0 <siprintf>
		}

		udpClientSendResponseChar(data);
 8004c94:	463b      	mov	r3, r7
 8004c96:	4618      	mov	r0, r3
 8004c98:	f000 fcae 	bl	80055f8 <udpClientSendResponseChar>

		memset(rxUdpCharBuf, 0, 128);
 8004c9c:	2280      	movs	r2, #128	@ 0x80
 8004c9e:	2100      	movs	r1, #0
 8004ca0:	4862      	ldr	r0, [pc, #392]	@ (8004e2c <udpReceiveHandlerEcho+0x920>)
 8004ca2:	f013 f834 	bl	8017d0e <memset>
		return;
 8004ca6:	e3e2      	b.n	800546e <udpReceiveHandlerEcho+0xf62>
	}

	/* Задать ускорение _accel драйвера оси axis */
	if(strncmp(rxUdpCharBuf, udpcommands.setDriverAccelerationDeg, strlen(udpcommands.setDriverAccelerationDeg)) == 0)
 8004ca8:	4b5f      	ldr	r3, [pc, #380]	@ (8004e28 <udpReceiveHandlerEcho+0x91c>)
 8004caa:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
 8004cac:	4b5e      	ldr	r3, [pc, #376]	@ (8004e28 <udpReceiveHandlerEcho+0x91c>)
 8004cae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f7fb fa97 	bl	80001e4 <strlen>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	461a      	mov	r2, r3
 8004cba:	4621      	mov	r1, r4
 8004cbc:	485b      	ldr	r0, [pc, #364]	@ (8004e2c <udpReceiveHandlerEcho+0x920>)
 8004cbe:	f013 f83b 	bl	8017d38 <strncmp>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d14f      	bne.n	8004d68 <udpReceiveHandlerEcho+0x85c>
	{
		int8_t axis = atoi(strchr(rxUdpCharBuf, ' ') + 1);
 8004cc8:	2120      	movs	r1, #32
 8004cca:	4858      	ldr	r0, [pc, #352]	@ (8004e2c <udpReceiveHandlerEcho+0x920>)
 8004ccc:	f013 f827 	bl	8017d1e <strchr>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	3301      	adds	r3, #1
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f011 ffde 	bl	8016c96 <atoi>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	f887 3113 	strb.w	r3, [r7, #275]	@ 0x113
		float acceleration = atof(strchr(rxUdpCharBuf, ' ') + 3);
 8004ce0:	2120      	movs	r1, #32
 8004ce2:	4852      	ldr	r0, [pc, #328]	@ (8004e2c <udpReceiveHandlerEcho+0x920>)
 8004ce4:	f013 f81b 	bl	8017d1e <strchr>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	3303      	adds	r3, #3
 8004cec:	4618      	mov	r0, r3
 8004cee:	f011 ffcf 	bl	8016c90 <atof>
 8004cf2:	ec53 2b10 	vmov	r2, r3, d0
 8004cf6:	4610      	mov	r0, r2
 8004cf8:	4619      	mov	r1, r3
 8004cfa:	f7fb ff85 	bl	8000c08 <__aeabi_d2f>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

		if(setDriverAccelerationDeg(&driver[axis], acceleration) == DRIVER_PARAM_CHANGE_OK)
 8004d04:	f997 3113 	ldrsb.w	r3, [r7, #275]	@ 0x113
 8004d08:	226c      	movs	r2, #108	@ 0x6c
 8004d0a:	fb02 f303 	mul.w	r3, r2, r3
 8004d0e:	4a4e      	ldr	r2, [pc, #312]	@ (8004e48 <udpReceiveHandlerEcho+0x93c>)
 8004d10:	4413      	add	r3, r2
 8004d12:	ed97 0a43 	vldr	s0, [r7, #268]	@ 0x10c
 8004d16:	4618      	mov	r0, r3
 8004d18:	f7fc ff62 	bl	8001be0 <setDriverAccelerationDeg>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d110      	bne.n	8004d44 <udpReceiveHandlerEcho+0x838>
		{
			sprintf(data, "%ld - STM32: Acceleration of driver %d = %d (deg/sec^2);\n", counter, axis, (int16_t)acceleration);
 8004d22:	4b44      	ldr	r3, [pc, #272]	@ (8004e34 <udpReceiveHandlerEcho+0x928>)
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	f997 3113 	ldrsb.w	r3, [r7, #275]	@ 0x113
 8004d2a:	edd7 7a43 	vldr	s15, [r7, #268]	@ 0x10c
 8004d2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004d32:	ee17 1a90 	vmov	r1, s15
 8004d36:	b209      	sxth	r1, r1
 8004d38:	4638      	mov	r0, r7
 8004d3a:	9100      	str	r1, [sp, #0]
 8004d3c:	4945      	ldr	r1, [pc, #276]	@ (8004e54 <udpReceiveHandlerEcho+0x948>)
 8004d3e:	f012 ff57 	bl	8017bf0 <siprintf>
 8004d42:	e007      	b.n	8004d54 <udpReceiveHandlerEcho+0x848>
		}
		else sprintf(data, "%ld - STM32: Error changing acceleration of driver - %d;\n", counter, axis);
 8004d44:	4b3b      	ldr	r3, [pc, #236]	@ (8004e34 <udpReceiveHandlerEcho+0x928>)
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	f997 3113 	ldrsb.w	r3, [r7, #275]	@ 0x113
 8004d4c:	4638      	mov	r0, r7
 8004d4e:	4942      	ldr	r1, [pc, #264]	@ (8004e58 <udpReceiveHandlerEcho+0x94c>)
 8004d50:	f012 ff4e 	bl	8017bf0 <siprintf>

		udpClientSendResponseChar(data);
 8004d54:	463b      	mov	r3, r7
 8004d56:	4618      	mov	r0, r3
 8004d58:	f000 fc4e 	bl	80055f8 <udpClientSendResponseChar>

		memset(rxUdpCharBuf, 0, 128);
 8004d5c:	2280      	movs	r2, #128	@ 0x80
 8004d5e:	2100      	movs	r1, #0
 8004d60:	4832      	ldr	r0, [pc, #200]	@ (8004e2c <udpReceiveHandlerEcho+0x920>)
 8004d62:	f012 ffd4 	bl	8017d0e <memset>
		return;
 8004d66:	e382      	b.n	800546e <udpReceiveHandlerEcho+0xf62>
	}

	if(strncmp(rxUdpCharBuf, udpcommands.setDriverAccelerationMm, strlen(udpcommands.setDriverAccelerationMm)) == 0)
 8004d68:	4b2f      	ldr	r3, [pc, #188]	@ (8004e28 <udpReceiveHandlerEcho+0x91c>)
 8004d6a:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 8004d6c:	4b2e      	ldr	r3, [pc, #184]	@ (8004e28 <udpReceiveHandlerEcho+0x91c>)
 8004d6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d70:	4618      	mov	r0, r3
 8004d72:	f7fb fa37 	bl	80001e4 <strlen>
 8004d76:	4603      	mov	r3, r0
 8004d78:	461a      	mov	r2, r3
 8004d7a:	4621      	mov	r1, r4
 8004d7c:	482b      	ldr	r0, [pc, #172]	@ (8004e2c <udpReceiveHandlerEcho+0x920>)
 8004d7e:	f012 ffdb 	bl	8017d38 <strncmp>
 8004d82:	4603      	mov	r3, r0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d16b      	bne.n	8004e60 <udpReceiveHandlerEcho+0x954>
	{
		int8_t axis = atoi(strchr(rxUdpCharBuf, ' ') + 1);
 8004d88:	2120      	movs	r1, #32
 8004d8a:	4828      	ldr	r0, [pc, #160]	@ (8004e2c <udpReceiveHandlerEcho+0x920>)
 8004d8c:	f012 ffc7 	bl	8017d1e <strchr>
 8004d90:	4603      	mov	r3, r0
 8004d92:	3301      	adds	r3, #1
 8004d94:	4618      	mov	r0, r3
 8004d96:	f011 ff7e 	bl	8016c96 <atoi>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	f887 311b 	strb.w	r3, [r7, #283]	@ 0x11b
		float acceleration = atof(strchr(rxUdpCharBuf, ' ') + 3);
 8004da0:	2120      	movs	r1, #32
 8004da2:	4822      	ldr	r0, [pc, #136]	@ (8004e2c <udpReceiveHandlerEcho+0x920>)
 8004da4:	f012 ffbb 	bl	8017d1e <strchr>
 8004da8:	4603      	mov	r3, r0
 8004daa:	3303      	adds	r3, #3
 8004dac:	4618      	mov	r0, r3
 8004dae:	f011 ff6f 	bl	8016c90 <atof>
 8004db2:	ec53 2b10 	vmov	r2, r3, d0
 8004db6:	4610      	mov	r0, r2
 8004db8:	4619      	mov	r1, r3
 8004dba:	f7fb ff25 	bl	8000c08 <__aeabi_d2f>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

		if(setDriverAccelerationMm(&driver[axis], acceleration) == DRIVER_PARAM_CHANGE_OK)
 8004dc4:	f997 311b 	ldrsb.w	r3, [r7, #283]	@ 0x11b
 8004dc8:	226c      	movs	r2, #108	@ 0x6c
 8004dca:	fb02 f303 	mul.w	r3, r2, r3
 8004dce:	4a1e      	ldr	r2, [pc, #120]	@ (8004e48 <udpReceiveHandlerEcho+0x93c>)
 8004dd0:	4413      	add	r3, r2
 8004dd2:	ed97 0a45 	vldr	s0, [r7, #276]	@ 0x114
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f7fc ff25 	bl	8001c26 <setDriverAccelerationMm>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d110      	bne.n	8004e04 <udpReceiveHandlerEcho+0x8f8>
		{
			sprintf(data, "%ld - STM32: Acceleration of driver %d = %d (mm/sec^2);\n", counter, axis, (int16_t)acceleration);
 8004de2:	4b14      	ldr	r3, [pc, #80]	@ (8004e34 <udpReceiveHandlerEcho+0x928>)
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	f997 311b 	ldrsb.w	r3, [r7, #283]	@ 0x11b
 8004dea:	edd7 7a45 	vldr	s15, [r7, #276]	@ 0x114
 8004dee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004df2:	ee17 1a90 	vmov	r1, s15
 8004df6:	b209      	sxth	r1, r1
 8004df8:	4638      	mov	r0, r7
 8004dfa:	9100      	str	r1, [sp, #0]
 8004dfc:	4917      	ldr	r1, [pc, #92]	@ (8004e5c <udpReceiveHandlerEcho+0x950>)
 8004dfe:	f012 fef7 	bl	8017bf0 <siprintf>
 8004e02:	e007      	b.n	8004e14 <udpReceiveHandlerEcho+0x908>
		}
		else sprintf(data, "%ld - STM32: Error changing acceleration of driver - %d;\n", counter, axis);
 8004e04:	4b0b      	ldr	r3, [pc, #44]	@ (8004e34 <udpReceiveHandlerEcho+0x928>)
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	f997 311b 	ldrsb.w	r3, [r7, #283]	@ 0x11b
 8004e0c:	4638      	mov	r0, r7
 8004e0e:	4912      	ldr	r1, [pc, #72]	@ (8004e58 <udpReceiveHandlerEcho+0x94c>)
 8004e10:	f012 feee 	bl	8017bf0 <siprintf>

		udpClientSendResponseChar(data);
 8004e14:	463b      	mov	r3, r7
 8004e16:	4618      	mov	r0, r3
 8004e18:	f000 fbee 	bl	80055f8 <udpClientSendResponseChar>

		memset(rxUdpCharBuf, 0, 128);
 8004e1c:	2280      	movs	r2, #128	@ 0x80
 8004e1e:	2100      	movs	r1, #0
 8004e20:	4802      	ldr	r0, [pc, #8]	@ (8004e2c <udpReceiveHandlerEcho+0x920>)
 8004e22:	f012 ff74 	bl	8017d0e <memset>
		return;
 8004e26:	e322      	b.n	800546e <udpReceiveHandlerEcho+0xf62>
 8004e28:	20000898 	.word	0x20000898
 8004e2c:	2000e434 	.word	0x2000e434
 8004e30:	2000e42c 	.word	0x2000e42c
 8004e34:	2000e534 	.word	0x2000e534
 8004e38:	0802026c 	.word	0x0802026c
 8004e3c:	2000e374 	.word	0x2000e374
 8004e40:	080202dc 	.word	0x080202dc
 8004e44:	08020314 	.word	0x08020314
 8004e48:	2000e014 	.word	0x2000e014
 8004e4c:	08020350 	.word	0x08020350
 8004e50:	0802038c 	.word	0x0802038c
 8004e54:	080203c8 	.word	0x080203c8
 8004e58:	08020404 	.word	0x08020404
 8004e5c:	08020440 	.word	0x08020440
	}

	if(strncmp(rxUdpCharBuf, udpcommands.setDriverAcceleration, strlen(udpcommands.setDriverAcceleration)) == 0)
 8004e60:	4bbb      	ldr	r3, [pc, #748]	@ (8005150 <udpReceiveHandlerEcho+0xc44>)
 8004e62:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 8004e64:	4bba      	ldr	r3, [pc, #744]	@ (8005150 <udpReceiveHandlerEcho+0xc44>)
 8004e66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f7fb f9bb 	bl	80001e4 <strlen>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	461a      	mov	r2, r3
 8004e72:	4621      	mov	r1, r4
 8004e74:	48b7      	ldr	r0, [pc, #732]	@ (8005154 <udpReceiveHandlerEcho+0xc48>)
 8004e76:	f012 ff5f 	bl	8017d38 <strncmp>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d146      	bne.n	8004f0e <udpReceiveHandlerEcho+0xa02>
	{
		int8_t axis = atoi(strchr(rxUdpCharBuf, ' ') + 1);
 8004e80:	2120      	movs	r1, #32
 8004e82:	48b4      	ldr	r0, [pc, #720]	@ (8005154 <udpReceiveHandlerEcho+0xc48>)
 8004e84:	f012 ff4b 	bl	8017d1e <strchr>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	3301      	adds	r3, #1
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f011 ff02 	bl	8016c96 <atoi>
 8004e92:	4603      	mov	r3, r0
 8004e94:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
		int16_t acceleration = atol(strchr(rxUdpCharBuf, ' ') + 3);
 8004e98:	2120      	movs	r1, #32
 8004e9a:	48ae      	ldr	r0, [pc, #696]	@ (8005154 <udpReceiveHandlerEcho+0xc48>)
 8004e9c:	f012 ff3f 	bl	8017d1e <strchr>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	3303      	adds	r3, #3
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f011 fefa 	bl	8016c9e <atol>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c

		if(setDriverAcceleration(&driver[axis], acceleration) == DRIVER_PARAM_CHANGE_OK)
 8004eb0:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 8004eb4:	226c      	movs	r2, #108	@ 0x6c
 8004eb6:	fb02 f303 	mul.w	r3, r2, r3
 8004eba:	4aa7      	ldr	r2, [pc, #668]	@ (8005158 <udpReceiveHandlerEcho+0xc4c>)
 8004ebc:	4413      	add	r3, r2
 8004ebe:	f9b7 211c 	ldrsh.w	r2, [r7, #284]	@ 0x11c
 8004ec2:	4611      	mov	r1, r2
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f7fc fe3b 	bl	8001b40 <setDriverAcceleration>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d10c      	bne.n	8004eea <udpReceiveHandlerEcho+0x9de>
		{
			sprintf(data, "%ld - STM32: Acceleration of driver %d = %d (steps/sec^2);\n", counter, axis, acceleration);
 8004ed0:	4ba2      	ldr	r3, [pc, #648]	@ (800515c <udpReceiveHandlerEcho+0xc50>)
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	f997 111f 	ldrsb.w	r1, [r7, #287]	@ 0x11f
 8004ed8:	f9b7 311c 	ldrsh.w	r3, [r7, #284]	@ 0x11c
 8004edc:	4638      	mov	r0, r7
 8004ede:	9300      	str	r3, [sp, #0]
 8004ee0:	460b      	mov	r3, r1
 8004ee2:	499f      	ldr	r1, [pc, #636]	@ (8005160 <udpReceiveHandlerEcho+0xc54>)
 8004ee4:	f012 fe84 	bl	8017bf0 <siprintf>
 8004ee8:	e007      	b.n	8004efa <udpReceiveHandlerEcho+0x9ee>
		}
		else sprintf(data, "%ld - STM32: Error changing acceleration of driver - %d;\n", counter, axis);
 8004eea:	4b9c      	ldr	r3, [pc, #624]	@ (800515c <udpReceiveHandlerEcho+0xc50>)
 8004eec:	681a      	ldr	r2, [r3, #0]
 8004eee:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 8004ef2:	4638      	mov	r0, r7
 8004ef4:	499b      	ldr	r1, [pc, #620]	@ (8005164 <udpReceiveHandlerEcho+0xc58>)
 8004ef6:	f012 fe7b 	bl	8017bf0 <siprintf>

		udpClientSendResponseChar(data);
 8004efa:	463b      	mov	r3, r7
 8004efc:	4618      	mov	r0, r3
 8004efe:	f000 fb7b 	bl	80055f8 <udpClientSendResponseChar>

		memset(rxUdpCharBuf, 0, 128);
 8004f02:	2280      	movs	r2, #128	@ 0x80
 8004f04:	2100      	movs	r1, #0
 8004f06:	4893      	ldr	r0, [pc, #588]	@ (8005154 <udpReceiveHandlerEcho+0xc48>)
 8004f08:	f012 ff01 	bl	8017d0e <memset>
		return;
 8004f0c:	e2af      	b.n	800546e <udpReceiveHandlerEcho+0xf62>
	}

	/* ---------------------- POSITION_MODE ---------------------- */

	/* Установить максимальную скорость _maxSpeed оси axis */
	if(strncmp(rxUdpCharBuf, udpcommands.setDriverMaxSpeedDeg, strlen(udpcommands.setDriverMaxSpeedDeg)) == 0)
 8004f0e:	4b90      	ldr	r3, [pc, #576]	@ (8005150 <udpReceiveHandlerEcho+0xc44>)
 8004f10:	6c5c      	ldr	r4, [r3, #68]	@ 0x44
 8004f12:	4b8f      	ldr	r3, [pc, #572]	@ (8005150 <udpReceiveHandlerEcho+0xc44>)
 8004f14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f16:	4618      	mov	r0, r3
 8004f18:	f7fb f964 	bl	80001e4 <strlen>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	461a      	mov	r2, r3
 8004f20:	4621      	mov	r1, r4
 8004f22:	488c      	ldr	r0, [pc, #560]	@ (8005154 <udpReceiveHandlerEcho+0xc48>)
 8004f24:	f012 ff08 	bl	8017d38 <strncmp>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d14f      	bne.n	8004fce <udpReceiveHandlerEcho+0xac2>
	{
		int8_t axis = atoi(strchr(rxUdpCharBuf, ' ') + 1);
 8004f2e:	2120      	movs	r1, #32
 8004f30:	4888      	ldr	r0, [pc, #544]	@ (8005154 <udpReceiveHandlerEcho+0xc48>)
 8004f32:	f012 fef4 	bl	8017d1e <strchr>
 8004f36:	4603      	mov	r3, r0
 8004f38:	3301      	adds	r3, #1
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f011 feab 	bl	8016c96 <atoi>
 8004f40:	4603      	mov	r3, r0
 8004f42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
		float speed = atof(strchr(rxUdpCharBuf, ' ') + 3);
 8004f46:	2120      	movs	r1, #32
 8004f48:	4882      	ldr	r0, [pc, #520]	@ (8005154 <udpReceiveHandlerEcho+0xc48>)
 8004f4a:	f012 fee8 	bl	8017d1e <strchr>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	3303      	adds	r3, #3
 8004f52:	4618      	mov	r0, r3
 8004f54:	f011 fe9c 	bl	8016c90 <atof>
 8004f58:	ec53 2b10 	vmov	r2, r3, d0
 8004f5c:	4610      	mov	r0, r2
 8004f5e:	4619      	mov	r1, r3
 8004f60:	f7fb fe52 	bl	8000c08 <__aeabi_d2f>
 8004f64:	4603      	mov	r3, r0
 8004f66:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120

		if(setDriverMaxSpeedDeg(&driver[axis], speed) == DRIVER_PARAM_CHANGE_OK)
 8004f6a:	f997 3127 	ldrsb.w	r3, [r7, #295]	@ 0x127
 8004f6e:	226c      	movs	r2, #108	@ 0x6c
 8004f70:	fb02 f303 	mul.w	r3, r2, r3
 8004f74:	4a78      	ldr	r2, [pc, #480]	@ (8005158 <udpReceiveHandlerEcho+0xc4c>)
 8004f76:	4413      	add	r3, r2
 8004f78:	ed97 0a48 	vldr	s0, [r7, #288]	@ 0x120
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f7fc fd87 	bl	8001a90 <setDriverMaxSpeedDeg>
 8004f82:	4603      	mov	r3, r0
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d110      	bne.n	8004faa <udpReceiveHandlerEcho+0xa9e>
		{
			sprintf(data, "%ld - STM32: Max speed of driver %d = %d (deg/sec);\n", counter, axis, (int16_t)speed);
 8004f88:	4b74      	ldr	r3, [pc, #464]	@ (800515c <udpReceiveHandlerEcho+0xc50>)
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	f997 3127 	ldrsb.w	r3, [r7, #295]	@ 0x127
 8004f90:	edd7 7a48 	vldr	s15, [r7, #288]	@ 0x120
 8004f94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f98:	ee17 1a90 	vmov	r1, s15
 8004f9c:	b209      	sxth	r1, r1
 8004f9e:	4638      	mov	r0, r7
 8004fa0:	9100      	str	r1, [sp, #0]
 8004fa2:	4971      	ldr	r1, [pc, #452]	@ (8005168 <udpReceiveHandlerEcho+0xc5c>)
 8004fa4:	f012 fe24 	bl	8017bf0 <siprintf>
 8004fa8:	e007      	b.n	8004fba <udpReceiveHandlerEcho+0xaae>
		}
		else sprintf(data, "%ld - STM32: Error changing max speed of driver - %d;\n", counter, axis);
 8004faa:	4b6c      	ldr	r3, [pc, #432]	@ (800515c <udpReceiveHandlerEcho+0xc50>)
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	f997 3127 	ldrsb.w	r3, [r7, #295]	@ 0x127
 8004fb2:	4638      	mov	r0, r7
 8004fb4:	496d      	ldr	r1, [pc, #436]	@ (800516c <udpReceiveHandlerEcho+0xc60>)
 8004fb6:	f012 fe1b 	bl	8017bf0 <siprintf>

		udpClientSendResponseChar(data);
 8004fba:	463b      	mov	r3, r7
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f000 fb1b 	bl	80055f8 <udpClientSendResponseChar>

		memset(rxUdpCharBuf, 0, 128);
 8004fc2:	2280      	movs	r2, #128	@ 0x80
 8004fc4:	2100      	movs	r1, #0
 8004fc6:	4863      	ldr	r0, [pc, #396]	@ (8005154 <udpReceiveHandlerEcho+0xc48>)
 8004fc8:	f012 fea1 	bl	8017d0e <memset>
		return;
 8004fcc:	e24f      	b.n	800546e <udpReceiveHandlerEcho+0xf62>
	}

	if(strncmp(rxUdpCharBuf, udpcommands.setDriverMaxSpeedMm, strlen(udpcommands.setDriverMaxSpeedMm)) == 0)
 8004fce:	4b60      	ldr	r3, [pc, #384]	@ (8005150 <udpReceiveHandlerEcho+0xc44>)
 8004fd0:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
 8004fd2:	4b5f      	ldr	r3, [pc, #380]	@ (8005150 <udpReceiveHandlerEcho+0xc44>)
 8004fd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f7fb f904 	bl	80001e4 <strlen>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	461a      	mov	r2, r3
 8004fe0:	4621      	mov	r1, r4
 8004fe2:	485c      	ldr	r0, [pc, #368]	@ (8005154 <udpReceiveHandlerEcho+0xc48>)
 8004fe4:	f012 fea8 	bl	8017d38 <strncmp>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d14f      	bne.n	800508e <udpReceiveHandlerEcho+0xb82>
	{
		int8_t axis = atoi(strchr(rxUdpCharBuf, ' ') + 1);
 8004fee:	2120      	movs	r1, #32
 8004ff0:	4858      	ldr	r0, [pc, #352]	@ (8005154 <udpReceiveHandlerEcho+0xc48>)
 8004ff2:	f012 fe94 	bl	8017d1e <strchr>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	3301      	adds	r3, #1
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f011 fe4b 	bl	8016c96 <atoi>
 8005000:	4603      	mov	r3, r0
 8005002:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
		float speed = atof(strchr(rxUdpCharBuf, ' ') + 3);
 8005006:	2120      	movs	r1, #32
 8005008:	4852      	ldr	r0, [pc, #328]	@ (8005154 <udpReceiveHandlerEcho+0xc48>)
 800500a:	f012 fe88 	bl	8017d1e <strchr>
 800500e:	4603      	mov	r3, r0
 8005010:	3303      	adds	r3, #3
 8005012:	4618      	mov	r0, r3
 8005014:	f011 fe3c 	bl	8016c90 <atof>
 8005018:	ec53 2b10 	vmov	r2, r3, d0
 800501c:	4610      	mov	r0, r2
 800501e:	4619      	mov	r1, r3
 8005020:	f7fb fdf2 	bl	8000c08 <__aeabi_d2f>
 8005024:	4603      	mov	r3, r0
 8005026:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128

		if(setDriverMaxSpeedMm(&driver[axis], speed) == DRIVER_PARAM_CHANGE_OK)
 800502a:	f997 312f 	ldrsb.w	r3, [r7, #303]	@ 0x12f
 800502e:	226c      	movs	r2, #108	@ 0x6c
 8005030:	fb02 f303 	mul.w	r3, r2, r3
 8005034:	4a48      	ldr	r2, [pc, #288]	@ (8005158 <udpReceiveHandlerEcho+0xc4c>)
 8005036:	4413      	add	r3, r2
 8005038:	ed97 0a4a 	vldr	s0, [r7, #296]	@ 0x128
 800503c:	4618      	mov	r0, r3
 800503e:	f7fc fd48 	bl	8001ad2 <setDriverMaxSpeedMm>
 8005042:	4603      	mov	r3, r0
 8005044:	2b00      	cmp	r3, #0
 8005046:	d110      	bne.n	800506a <udpReceiveHandlerEcho+0xb5e>
		{
			sprintf(data, "%ld - STM32: Max speed of driver %d = %d (mm/sec);\n", counter, axis, (int16_t)speed);
 8005048:	4b44      	ldr	r3, [pc, #272]	@ (800515c <udpReceiveHandlerEcho+0xc50>)
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	f997 312f 	ldrsb.w	r3, [r7, #303]	@ 0x12f
 8005050:	edd7 7a4a 	vldr	s15, [r7, #296]	@ 0x128
 8005054:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005058:	ee17 1a90 	vmov	r1, s15
 800505c:	b209      	sxth	r1, r1
 800505e:	4638      	mov	r0, r7
 8005060:	9100      	str	r1, [sp, #0]
 8005062:	4943      	ldr	r1, [pc, #268]	@ (8005170 <udpReceiveHandlerEcho+0xc64>)
 8005064:	f012 fdc4 	bl	8017bf0 <siprintf>
 8005068:	e007      	b.n	800507a <udpReceiveHandlerEcho+0xb6e>
		}
		else sprintf(data, "%ld - STM32: Error changing max speed of driver - %d;\n", counter, axis);
 800506a:	4b3c      	ldr	r3, [pc, #240]	@ (800515c <udpReceiveHandlerEcho+0xc50>)
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	f997 312f 	ldrsb.w	r3, [r7, #303]	@ 0x12f
 8005072:	4638      	mov	r0, r7
 8005074:	493d      	ldr	r1, [pc, #244]	@ (800516c <udpReceiveHandlerEcho+0xc60>)
 8005076:	f012 fdbb 	bl	8017bf0 <siprintf>

		udpClientSendResponseChar(data);
 800507a:	463b      	mov	r3, r7
 800507c:	4618      	mov	r0, r3
 800507e:	f000 fabb 	bl	80055f8 <udpClientSendResponseChar>

		memset(rxUdpCharBuf, 0, 128);
 8005082:	2280      	movs	r2, #128	@ 0x80
 8005084:	2100      	movs	r1, #0
 8005086:	4833      	ldr	r0, [pc, #204]	@ (8005154 <udpReceiveHandlerEcho+0xc48>)
 8005088:	f012 fe41 	bl	8017d0e <memset>
		return;
 800508c:	e1ef      	b.n	800546e <udpReceiveHandlerEcho+0xf62>
	}

	if(strncmp(rxUdpCharBuf, udpcommands.setDriverMaxSpeed, strlen(udpcommands.setDriverMaxSpeed)) == 0)
 800508e:	4b30      	ldr	r3, [pc, #192]	@ (8005150 <udpReceiveHandlerEcho+0xc44>)
 8005090:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 8005092:	4b2f      	ldr	r3, [pc, #188]	@ (8005150 <udpReceiveHandlerEcho+0xc44>)
 8005094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005096:	4618      	mov	r0, r3
 8005098:	f7fb f8a4 	bl	80001e4 <strlen>
 800509c:	4603      	mov	r3, r0
 800509e:	461a      	mov	r2, r3
 80050a0:	4621      	mov	r1, r4
 80050a2:	482c      	ldr	r0, [pc, #176]	@ (8005154 <udpReceiveHandlerEcho+0xc48>)
 80050a4:	f012 fe48 	bl	8017d38 <strncmp>
 80050a8:	4603      	mov	r3, r0
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d164      	bne.n	8005178 <udpReceiveHandlerEcho+0xc6c>
	{
		int8_t axis = atoi(strchr(rxUdpCharBuf, ' ') + 1);
 80050ae:	2120      	movs	r1, #32
 80050b0:	4828      	ldr	r0, [pc, #160]	@ (8005154 <udpReceiveHandlerEcho+0xc48>)
 80050b2:	f012 fe34 	bl	8017d1e <strchr>
 80050b6:	4603      	mov	r3, r0
 80050b8:	3301      	adds	r3, #1
 80050ba:	4618      	mov	r0, r3
 80050bc:	f011 fdeb 	bl	8016c96 <atoi>
 80050c0:	4603      	mov	r3, r0
 80050c2:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
		float speed = atof(strchr(rxUdpCharBuf, ' ') + 3);
 80050c6:	2120      	movs	r1, #32
 80050c8:	4822      	ldr	r0, [pc, #136]	@ (8005154 <udpReceiveHandlerEcho+0xc48>)
 80050ca:	f012 fe28 	bl	8017d1e <strchr>
 80050ce:	4603      	mov	r3, r0
 80050d0:	3303      	adds	r3, #3
 80050d2:	4618      	mov	r0, r3
 80050d4:	f011 fddc 	bl	8016c90 <atof>
 80050d8:	ec53 2b10 	vmov	r2, r3, d0
 80050dc:	4610      	mov	r0, r2
 80050de:	4619      	mov	r1, r3
 80050e0:	f7fb fd92 	bl	8000c08 <__aeabi_d2f>
 80050e4:	4603      	mov	r3, r0
 80050e6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130

		if(setDriverMaxSpeed(&driver[axis], speed) == DRIVER_PARAM_CHANGE_OK)
 80050ea:	f997 3137 	ldrsb.w	r3, [r7, #311]	@ 0x137
 80050ee:	226c      	movs	r2, #108	@ 0x6c
 80050f0:	fb02 f303 	mul.w	r3, r2, r3
 80050f4:	4a18      	ldr	r2, [pc, #96]	@ (8005158 <udpReceiveHandlerEcho+0xc4c>)
 80050f6:	4413      	add	r3, r2
 80050f8:	ed97 0a4c 	vldr	s0, [r7, #304]	@ 0x130
 80050fc:	4618      	mov	r0, r3
 80050fe:	f7fc fc97 	bl	8001a30 <setDriverMaxSpeed>
 8005102:	4603      	mov	r3, r0
 8005104:	2b00      	cmp	r3, #0
 8005106:	d110      	bne.n	800512a <udpReceiveHandlerEcho+0xc1e>
		{
			sprintf(data, "%ld - STM32: Max speed of driver %d = %d (steps/sec);\n", counter, axis, (int16_t)speed);
 8005108:	4b14      	ldr	r3, [pc, #80]	@ (800515c <udpReceiveHandlerEcho+0xc50>)
 800510a:	681a      	ldr	r2, [r3, #0]
 800510c:	f997 3137 	ldrsb.w	r3, [r7, #311]	@ 0x137
 8005110:	edd7 7a4c 	vldr	s15, [r7, #304]	@ 0x130
 8005114:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005118:	ee17 1a90 	vmov	r1, s15
 800511c:	b209      	sxth	r1, r1
 800511e:	4638      	mov	r0, r7
 8005120:	9100      	str	r1, [sp, #0]
 8005122:	4914      	ldr	r1, [pc, #80]	@ (8005174 <udpReceiveHandlerEcho+0xc68>)
 8005124:	f012 fd64 	bl	8017bf0 <siprintf>
 8005128:	e007      	b.n	800513a <udpReceiveHandlerEcho+0xc2e>
		}
		else sprintf(data, "%ld - STM32: Error changing max speed of driver - %d;\n", counter, axis);
 800512a:	4b0c      	ldr	r3, [pc, #48]	@ (800515c <udpReceiveHandlerEcho+0xc50>)
 800512c:	681a      	ldr	r2, [r3, #0]
 800512e:	f997 3137 	ldrsb.w	r3, [r7, #311]	@ 0x137
 8005132:	4638      	mov	r0, r7
 8005134:	490d      	ldr	r1, [pc, #52]	@ (800516c <udpReceiveHandlerEcho+0xc60>)
 8005136:	f012 fd5b 	bl	8017bf0 <siprintf>

		udpClientSendResponseChar(data);
 800513a:	463b      	mov	r3, r7
 800513c:	4618      	mov	r0, r3
 800513e:	f000 fa5b 	bl	80055f8 <udpClientSendResponseChar>

		memset(rxUdpCharBuf, 0, 128);
 8005142:	2280      	movs	r2, #128	@ 0x80
 8005144:	2100      	movs	r1, #0
 8005146:	4803      	ldr	r0, [pc, #12]	@ (8005154 <udpReceiveHandlerEcho+0xc48>)
 8005148:	f012 fde1 	bl	8017d0e <memset>
		return;
 800514c:	e18f      	b.n	800546e <udpReceiveHandlerEcho+0xf62>
 800514e:	bf00      	nop
 8005150:	20000898 	.word	0x20000898
 8005154:	2000e434 	.word	0x2000e434
 8005158:	2000e014 	.word	0x2000e014
 800515c:	2000e534 	.word	0x2000e534
 8005160:	0802047c 	.word	0x0802047c
 8005164:	08020404 	.word	0x08020404
 8005168:	080204b8 	.word	0x080204b8
 800516c:	080204f0 	.word	0x080204f0
 8005170:	08020528 	.word	0x08020528
 8005174:	0802055c 	.word	0x0802055c
	}

	/* Установить целевую позицию _targetPosition оси axis */
	if(strncmp(rxUdpCharBuf, udpcommands.setDriverTargetPosDeg, strlen(udpcommands.setDriverTargetPosDeg)) == 0)
 8005178:	4bbf      	ldr	r3, [pc, #764]	@ (8005478 <udpReceiveHandlerEcho+0xf6c>)
 800517a:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
 800517c:	4bbe      	ldr	r3, [pc, #760]	@ (8005478 <udpReceiveHandlerEcho+0xf6c>)
 800517e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005180:	4618      	mov	r0, r3
 8005182:	f7fb f82f 	bl	80001e4 <strlen>
 8005186:	4603      	mov	r3, r0
 8005188:	461a      	mov	r2, r3
 800518a:	4621      	mov	r1, r4
 800518c:	48bb      	ldr	r0, [pc, #748]	@ (800547c <udpReceiveHandlerEcho+0xf70>)
 800518e:	f012 fdd3 	bl	8017d38 <strncmp>
 8005192:	4603      	mov	r3, r0
 8005194:	2b00      	cmp	r3, #0
 8005196:	d14e      	bne.n	8005236 <udpReceiveHandlerEcho+0xd2a>
	{
		int8_t axis = atoi(strchr(rxUdpCharBuf, ' ') + 1);
 8005198:	2120      	movs	r1, #32
 800519a:	48b8      	ldr	r0, [pc, #736]	@ (800547c <udpReceiveHandlerEcho+0xf70>)
 800519c:	f012 fdbf 	bl	8017d1e <strchr>
 80051a0:	4603      	mov	r3, r0
 80051a2:	3301      	adds	r3, #1
 80051a4:	4618      	mov	r0, r3
 80051a6:	f011 fd76 	bl	8016c96 <atoi>
 80051aa:	4603      	mov	r3, r0
 80051ac:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
		float target_pos = atof(strchr(rxUdpCharBuf, ' ') + 3);
 80051b0:	2120      	movs	r1, #32
 80051b2:	48b2      	ldr	r0, [pc, #712]	@ (800547c <udpReceiveHandlerEcho+0xf70>)
 80051b4:	f012 fdb3 	bl	8017d1e <strchr>
 80051b8:	4603      	mov	r3, r0
 80051ba:	3303      	adds	r3, #3
 80051bc:	4618      	mov	r0, r3
 80051be:	f011 fd67 	bl	8016c90 <atof>
 80051c2:	ec53 2b10 	vmov	r2, r3, d0
 80051c6:	4610      	mov	r0, r2
 80051c8:	4619      	mov	r1, r3
 80051ca:	f7fb fd1d 	bl	8000c08 <__aeabi_d2f>
 80051ce:	4603      	mov	r3, r0
 80051d0:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138

		if(setDriverTargetPosDeg(&driver[axis], target_pos) == DRIVER_PARAM_CHANGE_OK)
 80051d4:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 80051d8:	226c      	movs	r2, #108	@ 0x6c
 80051da:	fb02 f303 	mul.w	r3, r2, r3
 80051de:	4aa8      	ldr	r2, [pc, #672]	@ (8005480 <udpReceiveHandlerEcho+0xf74>)
 80051e0:	4413      	add	r3, r2
 80051e2:	ed97 0a4e 	vldr	s0, [r7, #312]	@ 0x138
 80051e6:	4618      	mov	r0, r3
 80051e8:	f7fc fbdc 	bl	80019a4 <setDriverTargetPosDeg>
 80051ec:	4603      	mov	r3, r0
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d10f      	bne.n	8005212 <udpReceiveHandlerEcho+0xd06>
		{
			sprintf(data, "%ld - STM32: Target position of driver %d = %ld (deg);\n", counter, axis, (int32_t)target_pos);
 80051f2:	4ba4      	ldr	r3, [pc, #656]	@ (8005484 <udpReceiveHandlerEcho+0xf78>)
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 80051fa:	edd7 7a4e 	vldr	s15, [r7, #312]	@ 0x138
 80051fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005202:	ee17 1a90 	vmov	r1, s15
 8005206:	4638      	mov	r0, r7
 8005208:	9100      	str	r1, [sp, #0]
 800520a:	499f      	ldr	r1, [pc, #636]	@ (8005488 <udpReceiveHandlerEcho+0xf7c>)
 800520c:	f012 fcf0 	bl	8017bf0 <siprintf>
 8005210:	e007      	b.n	8005222 <udpReceiveHandlerEcho+0xd16>
		}
		else sprintf(data, "%ld - STM32: Error changing target position of driver - %d;\n", counter, axis);
 8005212:	4b9c      	ldr	r3, [pc, #624]	@ (8005484 <udpReceiveHandlerEcho+0xf78>)
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 800521a:	4638      	mov	r0, r7
 800521c:	499b      	ldr	r1, [pc, #620]	@ (800548c <udpReceiveHandlerEcho+0xf80>)
 800521e:	f012 fce7 	bl	8017bf0 <siprintf>

		udpClientSendResponseChar(data);
 8005222:	463b      	mov	r3, r7
 8005224:	4618      	mov	r0, r3
 8005226:	f000 f9e7 	bl	80055f8 <udpClientSendResponseChar>

		memset(rxUdpCharBuf, 0, 128);
 800522a:	2280      	movs	r2, #128	@ 0x80
 800522c:	2100      	movs	r1, #0
 800522e:	4893      	ldr	r0, [pc, #588]	@ (800547c <udpReceiveHandlerEcho+0xf70>)
 8005230:	f012 fd6d 	bl	8017d0e <memset>
		return;
 8005234:	e11b      	b.n	800546e <udpReceiveHandlerEcho+0xf62>
	}

	if(strncmp(rxUdpCharBuf, udpcommands.setDriverTargetPosMm, strlen(udpcommands.setDriverTargetPosMm)) == 0)
 8005236:	4b90      	ldr	r3, [pc, #576]	@ (8005478 <udpReceiveHandlerEcho+0xf6c>)
 8005238:	6d5c      	ldr	r4, [r3, #84]	@ 0x54
 800523a:	4b8f      	ldr	r3, [pc, #572]	@ (8005478 <udpReceiveHandlerEcho+0xf6c>)
 800523c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800523e:	4618      	mov	r0, r3
 8005240:	f7fa ffd0 	bl	80001e4 <strlen>
 8005244:	4603      	mov	r3, r0
 8005246:	461a      	mov	r2, r3
 8005248:	4621      	mov	r1, r4
 800524a:	488c      	ldr	r0, [pc, #560]	@ (800547c <udpReceiveHandlerEcho+0xf70>)
 800524c:	f012 fd74 	bl	8017d38 <strncmp>
 8005250:	4603      	mov	r3, r0
 8005252:	2b00      	cmp	r3, #0
 8005254:	d14e      	bne.n	80052f4 <udpReceiveHandlerEcho+0xde8>
	{
		int8_t axis = atoi(strchr(rxUdpCharBuf, ' ') + 1);
 8005256:	2120      	movs	r1, #32
 8005258:	4888      	ldr	r0, [pc, #544]	@ (800547c <udpReceiveHandlerEcho+0xf70>)
 800525a:	f012 fd60 	bl	8017d1e <strchr>
 800525e:	4603      	mov	r3, r0
 8005260:	3301      	adds	r3, #1
 8005262:	4618      	mov	r0, r3
 8005264:	f011 fd17 	bl	8016c96 <atoi>
 8005268:	4603      	mov	r3, r0
 800526a:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
		float target_pos = atof(strchr(rxUdpCharBuf, ' ') + 3);
 800526e:	2120      	movs	r1, #32
 8005270:	4882      	ldr	r0, [pc, #520]	@ (800547c <udpReceiveHandlerEcho+0xf70>)
 8005272:	f012 fd54 	bl	8017d1e <strchr>
 8005276:	4603      	mov	r3, r0
 8005278:	3303      	adds	r3, #3
 800527a:	4618      	mov	r0, r3
 800527c:	f011 fd08 	bl	8016c90 <atof>
 8005280:	ec53 2b10 	vmov	r2, r3, d0
 8005284:	4610      	mov	r0, r2
 8005286:	4619      	mov	r1, r3
 8005288:	f7fb fcbe 	bl	8000c08 <__aeabi_d2f>
 800528c:	4603      	mov	r3, r0
 800528e:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140

		if(setDriverTargetPosMm(&driver[axis], target_pos) == DRIVER_PARAM_CHANGE_OK)
 8005292:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 8005296:	226c      	movs	r2, #108	@ 0x6c
 8005298:	fb02 f303 	mul.w	r3, r2, r3
 800529c:	4a78      	ldr	r2, [pc, #480]	@ (8005480 <udpReceiveHandlerEcho+0xf74>)
 800529e:	4413      	add	r3, r2
 80052a0:	ed97 0a50 	vldr	s0, [r7, #320]	@ 0x140
 80052a4:	4618      	mov	r0, r3
 80052a6:	f7fc fb9e 	bl	80019e6 <setDriverTargetPosMm>
 80052aa:	4603      	mov	r3, r0
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d10f      	bne.n	80052d0 <udpReceiveHandlerEcho+0xdc4>
		{
			sprintf(data, "%ld - STM32: Target position of driver %d = %ld (mm);\n", counter, axis, (int32_t)target_pos);
 80052b0:	4b74      	ldr	r3, [pc, #464]	@ (8005484 <udpReceiveHandlerEcho+0xf78>)
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 80052b8:	edd7 7a50 	vldr	s15, [r7, #320]	@ 0x140
 80052bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80052c0:	ee17 1a90 	vmov	r1, s15
 80052c4:	4638      	mov	r0, r7
 80052c6:	9100      	str	r1, [sp, #0]
 80052c8:	4971      	ldr	r1, [pc, #452]	@ (8005490 <udpReceiveHandlerEcho+0xf84>)
 80052ca:	f012 fc91 	bl	8017bf0 <siprintf>
 80052ce:	e007      	b.n	80052e0 <udpReceiveHandlerEcho+0xdd4>
		}
		else sprintf(data, "%ld - STM32: Error changing target position of driver - %d;\n", counter, axis);
 80052d0:	4b6c      	ldr	r3, [pc, #432]	@ (8005484 <udpReceiveHandlerEcho+0xf78>)
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	f997 3147 	ldrsb.w	r3, [r7, #327]	@ 0x147
 80052d8:	4638      	mov	r0, r7
 80052da:	496c      	ldr	r1, [pc, #432]	@ (800548c <udpReceiveHandlerEcho+0xf80>)
 80052dc:	f012 fc88 	bl	8017bf0 <siprintf>

		udpClientSendResponseChar(data);
 80052e0:	463b      	mov	r3, r7
 80052e2:	4618      	mov	r0, r3
 80052e4:	f000 f988 	bl	80055f8 <udpClientSendResponseChar>

		memset(rxUdpCharBuf, 0, 128);
 80052e8:	2280      	movs	r2, #128	@ 0x80
 80052ea:	2100      	movs	r1, #0
 80052ec:	4863      	ldr	r0, [pc, #396]	@ (800547c <udpReceiveHandlerEcho+0xf70>)
 80052ee:	f012 fd0e 	bl	8017d0e <memset>
		return;
 80052f2:	e0bc      	b.n	800546e <udpReceiveHandlerEcho+0xf62>
	}

	if(strncmp(rxUdpCharBuf, udpcommands.setDriverTargetPos, strlen(udpcommands.setDriverTargetPos)) == 0)
 80052f4:	4b60      	ldr	r3, [pc, #384]	@ (8005478 <udpReceiveHandlerEcho+0xf6c>)
 80052f6:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 80052f8:	4b5f      	ldr	r3, [pc, #380]	@ (8005478 <udpReceiveHandlerEcho+0xf6c>)
 80052fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052fc:	4618      	mov	r0, r3
 80052fe:	f7fa ff71 	bl	80001e4 <strlen>
 8005302:	4603      	mov	r3, r0
 8005304:	461a      	mov	r2, r3
 8005306:	4621      	mov	r1, r4
 8005308:	485c      	ldr	r0, [pc, #368]	@ (800547c <udpReceiveHandlerEcho+0xf70>)
 800530a:	f012 fd15 	bl	8017d38 <strncmp>
 800530e:	4603      	mov	r3, r0
 8005310:	2b00      	cmp	r3, #0
 8005312:	d144      	bne.n	800539e <udpReceiveHandlerEcho+0xe92>
	{
		int8_t axis = atoi(strchr(rxUdpCharBuf, ' ') + 1);
 8005314:	2120      	movs	r1, #32
 8005316:	4859      	ldr	r0, [pc, #356]	@ (800547c <udpReceiveHandlerEcho+0xf70>)
 8005318:	f012 fd01 	bl	8017d1e <strchr>
 800531c:	4603      	mov	r3, r0
 800531e:	3301      	adds	r3, #1
 8005320:	4618      	mov	r0, r3
 8005322:	f011 fcb8 	bl	8016c96 <atoi>
 8005326:	4603      	mov	r3, r0
 8005328:	f887 314d 	strb.w	r3, [r7, #333]	@ 0x14d
		int32_t target_pos = atol(strchr(rxUdpCharBuf, ' ') + 3);
 800532c:	2120      	movs	r1, #32
 800532e:	4853      	ldr	r0, [pc, #332]	@ (800547c <udpReceiveHandlerEcho+0xf70>)
 8005330:	f012 fcf5 	bl	8017d1e <strchr>
 8005334:	4603      	mov	r3, r0
 8005336:	3303      	adds	r3, #3
 8005338:	4618      	mov	r0, r3
 800533a:	f011 fcb0 	bl	8016c9e <atol>
 800533e:	f8c7 0148 	str.w	r0, [r7, #328]	@ 0x148

		if(setDriverTargetPos(&driver[axis], target_pos) == DRIVER_PARAM_CHANGE_OK)
 8005342:	f997 314d 	ldrsb.w	r3, [r7, #333]	@ 0x14d
 8005346:	226c      	movs	r2, #108	@ 0x6c
 8005348:	fb02 f303 	mul.w	r3, r2, r3
 800534c:	4a4c      	ldr	r2, [pc, #304]	@ (8005480 <udpReceiveHandlerEcho+0xf74>)
 800534e:	4413      	add	r3, r2
 8005350:	f8d7 1148 	ldr.w	r1, [r7, #328]	@ 0x148
 8005354:	4618      	mov	r0, r3
 8005356:	f7fc fa53 	bl	8001800 <setDriverTargetPos>
 800535a:	4603      	mov	r3, r0
 800535c:	2b00      	cmp	r3, #0
 800535e:	d10c      	bne.n	800537a <udpReceiveHandlerEcho+0xe6e>
		{
			sprintf(data, "%ld - STM32: Target position of driver %d = %ld (steps);\n", counter, axis, target_pos);
 8005360:	4b48      	ldr	r3, [pc, #288]	@ (8005484 <udpReceiveHandlerEcho+0xf78>)
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	f997 114d 	ldrsb.w	r1, [r7, #333]	@ 0x14d
 8005368:	4638      	mov	r0, r7
 800536a:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800536e:	9300      	str	r3, [sp, #0]
 8005370:	460b      	mov	r3, r1
 8005372:	4948      	ldr	r1, [pc, #288]	@ (8005494 <udpReceiveHandlerEcho+0xf88>)
 8005374:	f012 fc3c 	bl	8017bf0 <siprintf>
 8005378:	e007      	b.n	800538a <udpReceiveHandlerEcho+0xe7e>
		}
		else sprintf(data, "%ld - STM32: Error changing target position of driver - %d;\n", counter, axis);
 800537a:	4b42      	ldr	r3, [pc, #264]	@ (8005484 <udpReceiveHandlerEcho+0xf78>)
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	f997 314d 	ldrsb.w	r3, [r7, #333]	@ 0x14d
 8005382:	4638      	mov	r0, r7
 8005384:	4941      	ldr	r1, [pc, #260]	@ (800548c <udpReceiveHandlerEcho+0xf80>)
 8005386:	f012 fc33 	bl	8017bf0 <siprintf>

		udpClientSendResponseChar(data);
 800538a:	463b      	mov	r3, r7
 800538c:	4618      	mov	r0, r3
 800538e:	f000 f933 	bl	80055f8 <udpClientSendResponseChar>

		memset(rxUdpCharBuf, 0, 128);
 8005392:	2280      	movs	r2, #128	@ 0x80
 8005394:	2100      	movs	r1, #0
 8005396:	4839      	ldr	r0, [pc, #228]	@ (800547c <udpReceiveHandlerEcho+0xf70>)
 8005398:	f012 fcb9 	bl	8017d0e <memset>
		return;
 800539c:	e067      	b.n	800546e <udpReceiveHandlerEcho+0xf62>
	}

	if(rxUdpCharBuf[0] == 'S')
 800539e:	4b37      	ldr	r3, [pc, #220]	@ (800547c <udpReceiveHandlerEcho+0xf70>)
 80053a0:	781b      	ldrb	r3, [r3, #0]
 80053a2:	2b53      	cmp	r3, #83	@ 0x53
 80053a4:	d12c      	bne.n	8005400 <udpReceiveHandlerEcho+0xef4>
	{
		/* VELOCITY_MODE */
		if(rxUdpCharBuf[1] == 'T' && rxUdpCharBuf[2] == 'S') // Задать целевую скорость
 80053a6:	4b35      	ldr	r3, [pc, #212]	@ (800547c <udpReceiveHandlerEcho+0xf70>)
 80053a8:	785b      	ldrb	r3, [r3, #1]
 80053aa:	2b54      	cmp	r3, #84	@ 0x54
 80053ac:	d128      	bne.n	8005400 <udpReceiveHandlerEcho+0xef4>
 80053ae:	4b33      	ldr	r3, [pc, #204]	@ (800547c <udpReceiveHandlerEcho+0xf70>)
 80053b0:	789b      	ldrb	r3, [r3, #2]
 80053b2:	2b53      	cmp	r3, #83	@ 0x53
 80053b4:	d124      	bne.n	8005400 <udpReceiveHandlerEcho+0xef4>
		{
			int16_t speed = strtol(&rxUdpCharBuf[3], NULL, 10);
 80053b6:	220a      	movs	r2, #10
 80053b8:	2100      	movs	r1, #0
 80053ba:	4837      	ldr	r0, [pc, #220]	@ (8005498 <udpReceiveHandlerEcho+0xf8c>)
 80053bc:	f012 fb3a 	bl	8017a34 <strtol>
 80053c0:	4603      	mov	r3, r0
 80053c2:	f8a7 314e 	strh.w	r3, [r7, #334]	@ 0x14e
			setDriverTargetSpeedDeg(&driver[0], speed);
 80053c6:	f9b7 314e 	ldrsh.w	r3, [r7, #334]	@ 0x14e
 80053ca:	ee07 3a90 	vmov	s15, r3
 80053ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80053d2:	eeb0 0a67 	vmov.f32	s0, s15
 80053d6:	482a      	ldr	r0, [pc, #168]	@ (8005480 <udpReceiveHandlerEcho+0xf74>)
 80053d8:	f7fc feaa 	bl	8002130 <setDriverTargetSpeedDeg>

			sprintf(data, "%ld - STM32: Target velocity (deg/sec) = %d;\n", counter, speed);
 80053dc:	4b29      	ldr	r3, [pc, #164]	@ (8005484 <udpReceiveHandlerEcho+0xf78>)
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	f9b7 314e 	ldrsh.w	r3, [r7, #334]	@ 0x14e
 80053e4:	4638      	mov	r0, r7
 80053e6:	492d      	ldr	r1, [pc, #180]	@ (800549c <udpReceiveHandlerEcho+0xf90>)
 80053e8:	f012 fc02 	bl	8017bf0 <siprintf>
			udpClientSendResponseChar(data);
 80053ec:	463b      	mov	r3, r7
 80053ee:	4618      	mov	r0, r3
 80053f0:	f000 f902 	bl	80055f8 <udpClientSendResponseChar>

			memset(rxUdpCharBuf, 0, 128);
 80053f4:	2280      	movs	r2, #128	@ 0x80
 80053f6:	2100      	movs	r1, #0
 80053f8:	4820      	ldr	r0, [pc, #128]	@ (800547c <udpReceiveHandlerEcho+0xf70>)
 80053fa:	f012 fc88 	bl	8017d0e <memset>
			return;
 80053fe:	e036      	b.n	800546e <udpReceiveHandlerEcho+0xf62>
		}
	}

	if(rxUdpCharBuf[0] == 'G')
 8005400:	4b1e      	ldr	r3, [pc, #120]	@ (800547c <udpReceiveHandlerEcho+0xf70>)
 8005402:	781b      	ldrb	r3, [r3, #0]
 8005404:	2b47      	cmp	r3, #71	@ 0x47
 8005406:	d121      	bne.n	800544c <udpReceiveHandlerEcho+0xf40>
	{
		if(rxUdpCharBuf[1] == 'C' && rxUdpCharBuf[2] == 'P') // Получить позицию
 8005408:	4b1c      	ldr	r3, [pc, #112]	@ (800547c <udpReceiveHandlerEcho+0xf70>)
 800540a:	785b      	ldrb	r3, [r3, #1]
 800540c:	2b43      	cmp	r3, #67	@ 0x43
 800540e:	d11d      	bne.n	800544c <udpReceiveHandlerEcho+0xf40>
 8005410:	4b1a      	ldr	r3, [pc, #104]	@ (800547c <udpReceiveHandlerEcho+0xf70>)
 8005412:	789b      	ldrb	r3, [r3, #2]
 8005414:	2b50      	cmp	r3, #80	@ 0x50
 8005416:	d119      	bne.n	800544c <udpReceiveHandlerEcho+0xf40>
		{
			sprintf(data, "%ld - STM32: Current position = %ld;\n", counter, (int32_t)getDriverCurrentPosDeg(&driver[0]));
 8005418:	4b1a      	ldr	r3, [pc, #104]	@ (8005484 <udpReceiveHandlerEcho+0xf78>)
 800541a:	681c      	ldr	r4, [r3, #0]
 800541c:	4818      	ldr	r0, [pc, #96]	@ (8005480 <udpReceiveHandlerEcho+0xf74>)
 800541e:	f7fc fc29 	bl	8001c74 <getDriverCurrentPosDeg>
 8005422:	eef0 7a40 	vmov.f32	s15, s0
 8005426:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800542a:	4638      	mov	r0, r7
 800542c:	ee17 3a90 	vmov	r3, s15
 8005430:	4622      	mov	r2, r4
 8005432:	491b      	ldr	r1, [pc, #108]	@ (80054a0 <udpReceiveHandlerEcho+0xf94>)
 8005434:	f012 fbdc 	bl	8017bf0 <siprintf>
			udpClientSendResponseChar(data);
 8005438:	463b      	mov	r3, r7
 800543a:	4618      	mov	r0, r3
 800543c:	f000 f8dc 	bl	80055f8 <udpClientSendResponseChar>

			memset(rxUdpCharBuf, 0, 128);
 8005440:	2280      	movs	r2, #128	@ 0x80
 8005442:	2100      	movs	r1, #0
 8005444:	480d      	ldr	r0, [pc, #52]	@ (800547c <udpReceiveHandlerEcho+0xf70>)
 8005446:	f012 fc62 	bl	8017d0e <memset>
			return;
 800544a:	e010      	b.n	800546e <udpReceiveHandlerEcho+0xf62>
		}
	}

	sprintf(data, "%ld - STM32: Echo - %s\n", counter, rxUdpCharBuf);
 800544c:	4b0d      	ldr	r3, [pc, #52]	@ (8005484 <udpReceiveHandlerEcho+0xf78>)
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	4638      	mov	r0, r7
 8005452:	4b0a      	ldr	r3, [pc, #40]	@ (800547c <udpReceiveHandlerEcho+0xf70>)
 8005454:	4913      	ldr	r1, [pc, #76]	@ (80054a4 <udpReceiveHandlerEcho+0xf98>)
 8005456:	f012 fbcb 	bl	8017bf0 <siprintf>
	udpClientSendResponseChar(data);
 800545a:	463b      	mov	r3, r7
 800545c:	4618      	mov	r0, r3
 800545e:	f000 f8cb 	bl	80055f8 <udpClientSendResponseChar>

	memset(rxUdpCharBuf, 0, 128);
 8005462:	2280      	movs	r2, #128	@ 0x80
 8005464:	2100      	movs	r1, #0
 8005466:	4805      	ldr	r0, [pc, #20]	@ (800547c <udpReceiveHandlerEcho+0xf70>)
 8005468:	f012 fc51 	bl	8017d0e <memset>
	return;
 800546c:	bf00      	nop
}
 800546e:	f507 77aa 	add.w	r7, r7, #340	@ 0x154
 8005472:	46bd      	mov	sp, r7
 8005474:	bd90      	pop	{r4, r7, pc}
 8005476:	bf00      	nop
 8005478:	20000898 	.word	0x20000898
 800547c:	2000e434 	.word	0x2000e434
 8005480:	2000e014 	.word	0x2000e014
 8005484:	2000e534 	.word	0x2000e534
 8005488:	08020594 	.word	0x08020594
 800548c:	080205cc 	.word	0x080205cc
 8005490:	0802060c 	.word	0x0802060c
 8005494:	08020644 	.word	0x08020644
 8005498:	2000e437 	.word	0x2000e437
 800549c:	08020680 	.word	0x08020680
 80054a0:	080206b0 	.word	0x080206b0
 80054a4:	080206d8 	.word	0x080206d8

080054a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80054a8:	b480      	push	{r7}
 80054aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80054ac:	b672      	cpsid	i
}
 80054ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80054b0:	bf00      	nop
 80054b2:	e7fd      	b.n	80054b0 <Error_Handler+0x8>

080054b4 <UDP_Init>:
									 };

/** Функция инициализации UDP сетевого интерфейса
 */
void UDP_Init(void)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b084      	sub	sp, #16
 80054b8:	af00      	add	r7, sp, #0
	/* Переменная ошибок работы UDP интерфейса */
	err_t err;

	/* Новый UDP управляющий блок */
	upcb = udp_new();
 80054ba:	f00f f8db 	bl	8014674 <udp_new>
 80054be:	4603      	mov	r3, r0
 80054c0:	4a17      	ldr	r2, [pc, #92]	@ (8005520 <UDP_Init+0x6c>)
 80054c2:	6013      	str	r3, [r2, #0]

	/* Связать IP адрес и порт */
	ip_addr_t myIPaddr;

	/* IP адрес устройства */
	IP_ADDR4(&myIPaddr, 192, 168, 1, 156);
 80054c4:	4b17      	ldr	r3, [pc, #92]	@ (8005524 <UDP_Init+0x70>)
 80054c6:	60bb      	str	r3, [r7, #8]
	udp_bind(upcb, &myIPaddr, 1555);
 80054c8:	4b15      	ldr	r3, [pc, #84]	@ (8005520 <UDP_Init+0x6c>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f107 0108 	add.w	r1, r7, #8
 80054d0:	f240 6213 	movw	r2, #1555	@ 0x613
 80054d4:	4618      	mov	r0, r3
 80054d6:	f00e ff75 	bl	80143c4 <udp_bind>

	/* Конфигурация IP адреса и порта назначения - ПК */
	ip_addr_t DestIPaddr;
	IP_ADDR4(&DestIPaddr, 192, 168, 1, 2);
 80054da:	4b13      	ldr	r3, [pc, #76]	@ (8005528 <UDP_Init+0x74>)
 80054dc:	607b      	str	r3, [r7, #4]
	err = udp_connect(upcb, &DestIPaddr, 1555);
 80054de:	4b10      	ldr	r3, [pc, #64]	@ (8005520 <UDP_Init+0x6c>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	1d39      	adds	r1, r7, #4
 80054e4:	f240 6213 	movw	r2, #1555	@ 0x613
 80054e8:	4618      	mov	r0, r3
 80054ea:	f00e fff3 	bl	80144d4 <udp_connect>
 80054ee:	4603      	mov	r3, r0
 80054f0:	73fb      	strb	r3, [r7, #15]

	if (err == ERR_OK)
 80054f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d106      	bne.n	8005508 <UDP_Init+0x54>
	{
		/* Передача указателя на функцию обработчика входящих пакетов в структуру UDP интерфейса */
		udp_recv(upcb, udpReceiveCallback, NULL);
 80054fa:	4b09      	ldr	r3, [pc, #36]	@ (8005520 <UDP_Init+0x6c>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	2200      	movs	r2, #0
 8005500:	490a      	ldr	r1, [pc, #40]	@ (800552c <UDP_Init+0x78>)
 8005502:	4618      	mov	r0, r3
 8005504:	f00f f854 	bl	80145b0 <udp_recv>
	}

	/* Инициализация сткрутуры принимаемых данных */
	udpReceiveDataStructClear();
 8005508:	f000 f816 	bl	8005538 <udpReceiveDataStructClear>

	/* Инициализация буфера сетевого интерфейса с размеров 64 * 2 байта = 128 байт*/
	fifoInit(&fifoNetBuf, netBuf, FIFO_NET_SIZE);
 800550c:	2280      	movs	r2, #128	@ 0x80
 800550e:	4908      	ldr	r1, [pc, #32]	@ (8005530 <UDP_Init+0x7c>)
 8005510:	4808      	ldr	r0, [pc, #32]	@ (8005534 <UDP_Init+0x80>)
 8005512:	f7fc fe69 	bl	80021e8 <fifoInit>
}
 8005516:	bf00      	nop
 8005518:	3710      	adds	r7, #16
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}
 800551e:	bf00      	nop
 8005520:	2000e430 	.word	0x2000e430
 8005524:	9c01a8c0 	.word	0x9c01a8c0
 8005528:	0201a8c0 	.word	0x0201a8c0
 800552c:	08005585 	.word	0x08005585
 8005530:	2000e548 	.word	0x2000e548
 8005534:	2000e538 	.word	0x2000e538

08005538 <udpReceiveDataStructClear>:

/** Инициализация структуры принимаемых сетевых данных
 *
 */
void udpReceiveDataStructClear()
{
 8005538:	b480      	push	{r7}
 800553a:	b083      	sub	sp, #12
 800553c:	af00      	add	r7, sp, #0
	/* Очистка буфера принимаемых данных */
	for(uint8_t i = 0; i < 128; i ++)
 800553e:	2300      	movs	r3, #0
 8005540:	71fb      	strb	r3, [r7, #7]
 8005542:	e006      	b.n	8005552 <udpReceiveDataStructClear+0x1a>
	{
		rxData.buf[i] = 0;
 8005544:	79fb      	ldrb	r3, [r7, #7]
 8005546:	4a0e      	ldr	r2, [pc, #56]	@ (8005580 <udpReceiveDataStructClear+0x48>)
 8005548:	2100      	movs	r1, #0
 800554a:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < 128; i ++)
 800554c:	79fb      	ldrb	r3, [r7, #7]
 800554e:	3301      	adds	r3, #1
 8005550:	71fb      	strb	r3, [r7, #7]
 8005552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005556:	2b00      	cmp	r3, #0
 8005558:	daf4      	bge.n	8005544 <udpReceiveDataStructClear+0xc>
	}

	/* Очистка полей структуры принимаемых данных */
	rxData.len = 0;
 800555a:	4b09      	ldr	r3, [pc, #36]	@ (8005580 <udpReceiveDataStructClear+0x48>)
 800555c:	2200      	movs	r2, #0
 800555e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
	rxData.code = 0;
 8005562:	4b07      	ldr	r3, [pc, #28]	@ (8005580 <udpReceiveDataStructClear+0x48>)
 8005564:	2200      	movs	r2, #0
 8005566:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
	rxData.checksum = 0;
 800556a:	4b05      	ldr	r3, [pc, #20]	@ (8005580 <udpReceiveDataStructClear+0x48>)
 800556c:	2200      	movs	r2, #0
 800556e:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
}
 8005572:	bf00      	nop
 8005574:	370c      	adds	r7, #12
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr
 800557e:	bf00      	nop
 8005580:	2000e5c8 	.word	0x2000e5c8

08005584 <udpReceiveCallback>:

/** Функция обработки принятых пакетов UDP
 */
void udpReceiveCallback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b086      	sub	sp, #24
 8005588:	af00      	add	r7, sp, #0
 800558a:	60f8      	str	r0, [r7, #12]
 800558c:	60b9      	str	r1, [r7, #8]
 800558e:	607a      	str	r2, [r7, #4]
 8005590:	603b      	str	r3, [r7, #0]
	uint8_t* ptr = (uint8_t*)p->payload;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	613b      	str	r3, [r7, #16]

	/* Копирование принимаемых данных в структуру данных */
	for(uint8_t i = 0; i < p->len; i ++)
 8005598:	2300      	movs	r3, #0
 800559a:	75fb      	strb	r3, [r7, #23]
 800559c:	e009      	b.n	80055b2 <udpReceiveCallback+0x2e>
	{
		rxData.buf[i] = *(ptr + i);
 800559e:	7dfb      	ldrb	r3, [r7, #23]
 80055a0:	693a      	ldr	r2, [r7, #16]
 80055a2:	441a      	add	r2, r3
 80055a4:	7dfb      	ldrb	r3, [r7, #23]
 80055a6:	7811      	ldrb	r1, [r2, #0]
 80055a8:	4a10      	ldr	r2, [pc, #64]	@ (80055ec <udpReceiveCallback+0x68>)
 80055aa:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < p->len; i ++)
 80055ac:	7dfb      	ldrb	r3, [r7, #23]
 80055ae:	3301      	adds	r3, #1
 80055b0:	75fb      	strb	r3, [r7, #23]
 80055b2:	7dfb      	ldrb	r3, [r7, #23]
 80055b4:	b29a      	uxth	r2, r3
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	895b      	ldrh	r3, [r3, #10]
 80055ba:	429a      	cmp	r2, r3
 80055bc:	d3ef      	bcc.n	800559e <udpReceiveCallback+0x1a>
	}

	/* Копирование данных для работы со строками (отладка) */
	strncpy(rxUdpCharBuf, (char *)p->payload, p->len);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6859      	ldr	r1, [r3, #4]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	895b      	ldrh	r3, [r3, #10]
 80055c6:	461a      	mov	r2, r3
 80055c8:	4809      	ldr	r0, [pc, #36]	@ (80055f0 <udpReceiveCallback+0x6c>)
 80055ca:	f012 fbc7 	bl	8017d5c <strncpy>

	counter ++;
 80055ce:	4b09      	ldr	r3, [pc, #36]	@ (80055f4 <udpReceiveCallback+0x70>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	3301      	adds	r3, #1
 80055d4:	4a07      	ldr	r2, [pc, #28]	@ (80055f4 <udpReceiveCallback+0x70>)
 80055d6:	6013      	str	r3, [r2, #0]
	pbuf_free(p);
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f008 fcad 	bl	800df38 <pbuf_free>

	/* Вызов обработчик принятных сообщений */
	udpReceiveHandler();
 80055de:	f000 f897 	bl	8005710 <udpReceiveHandler>
}
 80055e2:	bf00      	nop
 80055e4:	3718      	adds	r7, #24
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}
 80055ea:	bf00      	nop
 80055ec:	2000e5c8 	.word	0x2000e5c8
 80055f0:	2000e434 	.word	0x2000e434
 80055f4:	2000e534 	.word	0x2000e534

080055f8 <udpClientSendResponseChar>:

/** Функция отправки ответных сообщений по UDP в виде строки
 */
void udpClientSendResponseChar(char *buf)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b0c4      	sub	sp, #272	@ 0x110
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005602:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005606:	6018      	str	r0, [r3, #0]
	struct pbuf *txBuf;
	char data[256];

	int len = sprintf(data, "%s\n", (char *)buf);
 8005608:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800560c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005610:	f107 0008 	add.w	r0, r7, #8
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	4917      	ldr	r1, [pc, #92]	@ (8005674 <udpClientSendResponseChar+0x7c>)
 8005618:	f012 faea 	bl	8017bf0 <siprintf>
 800561c:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c

	/* Выделить память под данные в буфере */
	txBuf = pbuf_alloc(PBUF_TRANSPORT, len, PBUF_RAM);
 8005620:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005624:	b29b      	uxth	r3, r3
 8005626:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800562a:	4619      	mov	r1, r3
 800562c:	2036      	movs	r0, #54	@ 0x36
 800562e:	f008 f99f 	bl	800d970 <pbuf_alloc>
 8005632:	f8c7 0108 	str.w	r0, [r7, #264]	@ 0x108

	if (txBuf != NULL)
 8005636:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800563a:	2b00      	cmp	r3, #0
 800563c:	d014      	beq.n	8005668 <udpClientSendResponseChar+0x70>
	{
		pbuf_take(txBuf, data, len);
 800563e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005642:	b29a      	uxth	r2, r3
 8005644:	f107 0308 	add.w	r3, r7, #8
 8005648:	4619      	mov	r1, r3
 800564a:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 800564e:	f008 ff1b 	bl	800e488 <pbuf_take>
		udp_send(upcb, txBuf);
 8005652:	4b09      	ldr	r3, [pc, #36]	@ (8005678 <udpClientSendResponseChar+0x80>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f8d7 1108 	ldr.w	r1, [r7, #264]	@ 0x108
 800565a:	4618      	mov	r0, r3
 800565c:	f00e fcc8 	bl	8013ff0 <udp_send>
    	pbuf_free(txBuf);
 8005660:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 8005664:	f008 fc68 	bl	800df38 <pbuf_free>
	}
}
 8005668:	bf00      	nop
 800566a:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}
 8005672:	bf00      	nop
 8005674:	08020850 	.word	0x08020850
 8005678:	2000e430 	.word	0x2000e430

0800567c <udpClientSendResponse>:

/** Функция отправки ответов на сетевые команды команды
 */
void udpClientSendResponse(uint8_t *buf, uint8_t len)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b084      	sub	sp, #16
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	460b      	mov	r3, r1
 8005686:	70fb      	strb	r3, [r7, #3]
	struct pbuf *txBuf;

	/* Выделить память под данные в буфере */
	txBuf = pbuf_alloc(PBUF_TRANSPORT, len, PBUF_RAM);
 8005688:	78fb      	ldrb	r3, [r7, #3]
 800568a:	b29b      	uxth	r3, r3
 800568c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8005690:	4619      	mov	r1, r3
 8005692:	2036      	movs	r0, #54	@ 0x36
 8005694:	f008 f96c 	bl	800d970 <pbuf_alloc>
 8005698:	60f8      	str	r0, [r7, #12]

	if (txBuf != NULL)
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d00f      	beq.n	80056c0 <udpClientSendResponse+0x44>
	{
		pbuf_take(txBuf, buf, len);
 80056a0:	78fb      	ldrb	r3, [r7, #3]
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	461a      	mov	r2, r3
 80056a6:	6879      	ldr	r1, [r7, #4]
 80056a8:	68f8      	ldr	r0, [r7, #12]
 80056aa:	f008 feed 	bl	800e488 <pbuf_take>
		udp_send(upcb, txBuf);
 80056ae:	4b06      	ldr	r3, [pc, #24]	@ (80056c8 <udpClientSendResponse+0x4c>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	68f9      	ldr	r1, [r7, #12]
 80056b4:	4618      	mov	r0, r3
 80056b6:	f00e fc9b 	bl	8013ff0 <udp_send>
    	pbuf_free(txBuf);
 80056ba:	68f8      	ldr	r0, [r7, #12]
 80056bc:	f008 fc3c 	bl	800df38 <pbuf_free>
	}
}
 80056c0:	bf00      	nop
 80056c2:	3710      	adds	r7, #16
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}
 80056c8:	2000e430 	.word	0x2000e430

080056cc <udpCalculateChecksum>:

/** Функция расчета контрольной суммы сетевого пакета данных
 */
uint8_t udpCalculateChecksum(uint8_t* buf, uint8_t len)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b085      	sub	sp, #20
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	460b      	mov	r3, r1
 80056d6:	70fb      	strb	r3, [r7, #3]
	uint8_t checksum = 0;
 80056d8:	2300      	movs	r3, #0
 80056da:	73fb      	strb	r3, [r7, #15]

	for(uint8_t i = 0; i < len; i ++)
 80056dc:	2300      	movs	r3, #0
 80056de:	73bb      	strb	r3, [r7, #14]
 80056e0:	e009      	b.n	80056f6 <udpCalculateChecksum+0x2a>
	{
		checksum += buf[i];
 80056e2:	7bbb      	ldrb	r3, [r7, #14]
 80056e4:	687a      	ldr	r2, [r7, #4]
 80056e6:	4413      	add	r3, r2
 80056e8:	781a      	ldrb	r2, [r3, #0]
 80056ea:	7bfb      	ldrb	r3, [r7, #15]
 80056ec:	4413      	add	r3, r2
 80056ee:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; i < len; i ++)
 80056f0:	7bbb      	ldrb	r3, [r7, #14]
 80056f2:	3301      	adds	r3, #1
 80056f4:	73bb      	strb	r3, [r7, #14]
 80056f6:	7bba      	ldrb	r2, [r7, #14]
 80056f8:	78fb      	ldrb	r3, [r7, #3]
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d3f1      	bcc.n	80056e2 <udpCalculateChecksum+0x16>
	}

	return 256 - checksum % 256;
 80056fe:	7bfb      	ldrb	r3, [r7, #15]
 8005700:	425b      	negs	r3, r3
 8005702:	b2db      	uxtb	r3, r3
}
 8005704:	4618      	mov	r0, r3
 8005706:	3714      	adds	r7, #20
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr

08005710 <udpReceiveHandler>:

void udpReceiveHandler(void)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	af00      	add	r7, sp, #0
	rxData.len = rxData.buf[0];
 8005714:	4b51      	ldr	r3, [pc, #324]	@ (800585c <udpReceiveHandler+0x14c>)
 8005716:	781a      	ldrb	r2, [r3, #0]
 8005718:	4b50      	ldr	r3, [pc, #320]	@ (800585c <udpReceiveHandler+0x14c>)
 800571a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
	rxData.code = rxData.buf[1];
 800571e:	4b4f      	ldr	r3, [pc, #316]	@ (800585c <udpReceiveHandler+0x14c>)
 8005720:	785a      	ldrb	r2, [r3, #1]
 8005722:	4b4e      	ldr	r3, [pc, #312]	@ (800585c <udpReceiveHandler+0x14c>)
 8005724:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

	/* Запись принятого значения КС */
	rxData.checksum = rxData.buf[rxData.len - 1];
 8005728:	4b4c      	ldr	r3, [pc, #304]	@ (800585c <udpReceiveHandler+0x14c>)
 800572a:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800572e:	3b01      	subs	r3, #1
 8005730:	4a4a      	ldr	r2, [pc, #296]	@ (800585c <udpReceiveHandler+0x14c>)
 8005732:	5cd2      	ldrb	r2, [r2, r3]
 8005734:	4b49      	ldr	r3, [pc, #292]	@ (800585c <udpReceiveHandler+0x14c>)
 8005736:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82

	switch(rxData.code)
 800573a:	4b48      	ldr	r3, [pc, #288]	@ (800585c <udpReceiveHandler+0x14c>)
 800573c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8005740:	2b33      	cmp	r3, #51	@ 0x33
 8005742:	dc5f      	bgt.n	8005804 <udpReceiveHandler+0xf4>
 8005744:	2b10      	cmp	r3, #16
 8005746:	da0f      	bge.n	8005768 <udpReceiveHandler+0x58>
 8005748:	e082      	b.n	8005850 <udpReceiveHandler+0x140>
 800574a:	3ba0      	subs	r3, #160	@ 0xa0
 800574c:	2b03      	cmp	r3, #3
 800574e:	d87f      	bhi.n	8005850 <udpReceiveHandler+0x140>
 8005750:	a201      	add	r2, pc, #4	@ (adr r2, 8005758 <udpReceiveHandler+0x48>)
 8005752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005756:	bf00      	nop
 8005758:	0800580f 	.word	0x0800580f
 800575c:	08005815 	.word	0x08005815
 8005760:	0800581b 	.word	0x0800581b
 8005764:	08005821 	.word	0x08005821
 8005768:	3b10      	subs	r3, #16
 800576a:	2b23      	cmp	r3, #35	@ 0x23
 800576c:	d870      	bhi.n	8005850 <udpReceiveHandler+0x140>
 800576e:	a201      	add	r2, pc, #4	@ (adr r2, 8005774 <udpReceiveHandler+0x64>)
 8005770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005774:	08005839 	.word	0x08005839
 8005778:	0800583f 	.word	0x0800583f
 800577c:	08005845 	.word	0x08005845
 8005780:	0800584b 	.word	0x0800584b
 8005784:	08005851 	.word	0x08005851
 8005788:	08005851 	.word	0x08005851
 800578c:	08005851 	.word	0x08005851
 8005790:	08005851 	.word	0x08005851
 8005794:	08005851 	.word	0x08005851
 8005798:	08005851 	.word	0x08005851
 800579c:	08005851 	.word	0x08005851
 80057a0:	08005851 	.word	0x08005851
 80057a4:	08005851 	.word	0x08005851
 80057a8:	08005851 	.word	0x08005851
 80057ac:	08005851 	.word	0x08005851
 80057b0:	08005851 	.word	0x08005851
 80057b4:	08005851 	.word	0x08005851
 80057b8:	08005851 	.word	0x08005851
 80057bc:	08005851 	.word	0x08005851
 80057c0:	08005851 	.word	0x08005851
 80057c4:	08005851 	.word	0x08005851
 80057c8:	08005851 	.word	0x08005851
 80057cc:	08005851 	.word	0x08005851
 80057d0:	08005851 	.word	0x08005851
 80057d4:	08005851 	.word	0x08005851
 80057d8:	08005851 	.word	0x08005851
 80057dc:	08005851 	.word	0x08005851
 80057e0:	08005851 	.word	0x08005851
 80057e4:	08005851 	.word	0x08005851
 80057e8:	08005851 	.word	0x08005851
 80057ec:	08005851 	.word	0x08005851
 80057f0:	08005851 	.word	0x08005851
 80057f4:	08005827 	.word	0x08005827
 80057f8:	0800582d 	.word	0x0800582d
 80057fc:	08005851 	.word	0x08005851
 8005800:	08005833 	.word	0x08005833
 8005804:	2ba3      	cmp	r3, #163	@ 0xa3
 8005806:	dc23      	bgt.n	8005850 <udpReceiveHandler+0x140>
 8005808:	2ba0      	cmp	r3, #160	@ 0xa0
 800580a:	da9e      	bge.n	800574a <udpReceiveHandler+0x3a>
 800580c:	e020      	b.n	8005850 <udpReceiveHandler+0x140>
	{
		/* Выдать версию ПО (код A0h) */
		case 0xA0:
		{
			udpCommandSendSoftVersion();
 800580e:	f000 f85f 	bl	80058d0 <udpCommandSendSoftVersion>
			break;
 8005812:	e01f      	b.n	8005854 <udpReceiveHandler+0x144>
		}

		/* Задать параметры выбранной оси (код A1h) */
		case 0xA1:
		{
			udpCommandSetAxisParam();
 8005814:	f000 f88c 	bl	8005930 <udpCommandSetAxisParam>
			break;
 8005818:	e01c      	b.n	8005854 <udpReceiveHandler+0x144>
		}

		/* Выдать параметры выбранной оси (код A2h) */
		case 0xA2:
		{
			udpCommandGetAxisParam();
 800581a:	f000 f8a9 	bl	8005970 <udpCommandGetAxisParam>
			break;
 800581e:	e019      	b.n	8005854 <udpReceiveHandler+0x144>
		}

		/* Выдать текущее состояние осей устройства (код A3h) */
		case 0xA3:
		{
			udpCommandGetAxesState();
 8005820:	f000 f8d3 	bl	80059ca <udpCommandGetAxesState>
			break;
 8005824:	e016      	b.n	8005854 <udpReceiveHandler+0x144>
		}

		/* Обнулить значение текущей координаты осей (код 30h) */
		case 0x30:
		{
			udpCommandSetCurrentPosZero();
 8005826:	f000 f8fd 	bl	8005a24 <udpCommandSetCurrentPosZero>
			break;
 800582a:	e013      	b.n	8005854 <udpReceiveHandler+0x144>
		}

		/* Начать движение к датчикам 0 для выбранных осей (код 31h) */
		case 0x31:
		{
			udpCommandStartAxesZeroing();
 800582c:	f000 f915 	bl	8005a5a <udpCommandStartAxesZeroing>
			break;
 8005830:	e010      	b.n	8005854 <udpReceiveHandler+0x144>
		}

		/* Ручной режим управления осями FreeRun (код 33h) */
		case 0x33:
		{
			udpCommandFreeRun();
 8005832:	f000 f815 	bl	8005860 <udpCommandFreeRun>
			break;
 8005836:	e00d      	b.n	8005854 <udpReceiveHandler+0x144>
		}

		/* Запустить рабочий цикл устройства (код – 10h) */
		case 0x10:
		{
			udpCommandStartProcess();
 8005838:	f000 f916 	bl	8005a68 <udpCommandStartProcess>
			break;
 800583c:	e00a      	b.n	8005854 <udpReceiveHandler+0x144>
		}

		/* Полностью остановить цикл работы устройства (код – 11h) */
		case 0x11:
		{
			udpCommandStopProcess();
 800583e:	f000 f92c 	bl	8005a9a <udpCommandStopProcess>
			break;
 8005842:	e007      	b.n	8005854 <udpReceiveHandler+0x144>
		}

		/* Приостановить рабочий цикл устройства (команда пауза) (код – 12h) */
		case 0x12:
		{
			udpCommandPauseProcess();
 8005844:	f000 f956 	bl	8005af4 <udpCommandPauseProcess>
			break;
 8005848:	e004      	b.n	8005854 <udpReceiveHandler+0x144>
		}

		/* Продолжить выполнение рабочего цикла устройства (код – 13h) */
		case 0x13:
		{
			udpCommandResumeProcess();
 800584a:	f000 f96e 	bl	8005b2a <udpCommandResumeProcess>
			break;
 800584e:	e001      	b.n	8005854 <udpReceiveHandler+0x144>
		}

		default:
			udpReceiveHandlerEcho();
 8005850:	f7fe fe5c 	bl	800450c <udpReceiveHandlerEcho>
	}

	/* Очистка сткрутуры принимаемых данных */
	udpReceiveDataStructClear();
 8005854:	f7ff fe70 	bl	8005538 <udpReceiveDataStructClear>
}
 8005858:	bf00      	nop
 800585a:	bd80      	pop	{r7, pc}
 800585c:	2000e5c8 	.word	0x2000e5c8

08005860 <udpCommandFreeRun>:

/**	Функция обработки UDP команды:
 * 	Ручной режим управления осями FreeRun (код 33h)
 */
void udpCommandFreeRun(void)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b084      	sub	sp, #16
 8005864:	af00      	add	r7, sp, #0
	uint8_t axisNum = rxData.buf[2];
 8005866:	4b19      	ldr	r3, [pc, #100]	@ (80058cc <udpCommandFreeRun+0x6c>)
 8005868:	789b      	ldrb	r3, [r3, #2]
 800586a:	72bb      	strb	r3, [r7, #10]
	int32_t speed = 0;
 800586c:	2300      	movs	r3, #0
 800586e:	60fb      	str	r3, [r7, #12]

	for(uint8_t i = 0; i < 4; i ++)
 8005870:	2300      	movs	r3, #0
 8005872:	72fb      	strb	r3, [r7, #11]
 8005874:	e00f      	b.n	8005896 <udpCommandFreeRun+0x36>
	{
		speed += rxData.buf[6 - i] << 8 * i;
 8005876:	7afb      	ldrb	r3, [r7, #11]
 8005878:	f1c3 0306 	rsb	r3, r3, #6
 800587c:	4a13      	ldr	r2, [pc, #76]	@ (80058cc <udpCommandFreeRun+0x6c>)
 800587e:	5cd3      	ldrb	r3, [r2, r3]
 8005880:	461a      	mov	r2, r3
 8005882:	7afb      	ldrb	r3, [r7, #11]
 8005884:	00db      	lsls	r3, r3, #3
 8005886:	fa02 f303 	lsl.w	r3, r2, r3
 800588a:	68fa      	ldr	r2, [r7, #12]
 800588c:	4413      	add	r3, r2
 800588e:	60fb      	str	r3, [r7, #12]
	for(uint8_t i = 0; i < 4; i ++)
 8005890:	7afb      	ldrb	r3, [r7, #11]
 8005892:	3301      	adds	r3, #1
 8005894:	72fb      	strb	r3, [r7, #11]
 8005896:	7afb      	ldrb	r3, [r7, #11]
 8005898:	2b03      	cmp	r3, #3
 800589a:	d9ec      	bls.n	8005876 <udpCommandFreeRun+0x16>
	}

	/* Массив отправляемых серверу данных */
	uint8_t txData[5];

	txData[0] = 5;
 800589c:	2305      	movs	r3, #5
 800589e:	713b      	strb	r3, [r7, #4]
	txData[1] = 0x33;
 80058a0:	2333      	movs	r3, #51	@ 0x33
 80058a2:	717b      	strb	r3, [r7, #5]
	txData[2] = axisNum;
 80058a4:	7abb      	ldrb	r3, [r7, #10]
 80058a6:	71bb      	strb	r3, [r7, #6]
	txData[3] = 1;
 80058a8:	2301      	movs	r3, #1
 80058aa:	71fb      	strb	r3, [r7, #7]

	/* Расчет контрольной суммы отправляемого пакета данных */
	txData[4] = udpCalculateChecksum(txData, 5);
 80058ac:	1d3b      	adds	r3, r7, #4
 80058ae:	2105      	movs	r1, #5
 80058b0:	4618      	mov	r0, r3
 80058b2:	f7ff ff0b 	bl	80056cc <udpCalculateChecksum>
 80058b6:	4603      	mov	r3, r0
 80058b8:	723b      	strb	r3, [r7, #8]

	udpClientSendResponse(txData, 5);
 80058ba:	1d3b      	adds	r3, r7, #4
 80058bc:	2105      	movs	r1, #5
 80058be:	4618      	mov	r0, r3
 80058c0:	f7ff fedc 	bl	800567c <udpClientSendResponse>
}
 80058c4:	bf00      	nop
 80058c6:	3710      	adds	r7, #16
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}
 80058cc:	2000e5c8 	.word	0x2000e5c8

080058d0 <udpCommandSendSoftVersion>:

/**	Функция обработки UDP команды:
 * 	Выдать версию ПО (код A0h)
 */
void udpCommandSendSoftVersion(void)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b086      	sub	sp, #24
 80058d4:	af00      	add	r7, sp, #0
	/* Массив отправляемых серверу данных */
	uint8_t txData[16];

	txData[0] = 16;
 80058d6:	2310      	movs	r3, #16
 80058d8:	703b      	strb	r3, [r7, #0]
	txData[1] = 0xA0;
 80058da:	23a0      	movs	r3, #160	@ 0xa0
 80058dc:	707b      	strb	r3, [r7, #1]
	txData[2] = 1; // Номер версии ПО 1 - пример
 80058de:	2301      	movs	r3, #1
 80058e0:	70bb      	strb	r3, [r7, #2]

	char* date = {"Jul 15 2025\0"};
 80058e2:	4b12      	ldr	r3, [pc, #72]	@ (800592c <udpCommandSendSoftVersion+0x5c>)
 80058e4:	613b      	str	r3, [r7, #16]

	for(uint8_t i = 3; i < 15; i ++)
 80058e6:	2303      	movs	r3, #3
 80058e8:	75fb      	strb	r3, [r7, #23]
 80058ea:	e00c      	b.n	8005906 <udpCommandSendSoftVersion+0x36>
	{
		txData[i] = date[i - 3];
 80058ec:	7dfb      	ldrb	r3, [r7, #23]
 80058ee:	3b03      	subs	r3, #3
 80058f0:	693a      	ldr	r2, [r7, #16]
 80058f2:	441a      	add	r2, r3
 80058f4:	7dfb      	ldrb	r3, [r7, #23]
 80058f6:	7812      	ldrb	r2, [r2, #0]
 80058f8:	3318      	adds	r3, #24
 80058fa:	443b      	add	r3, r7
 80058fc:	f803 2c18 	strb.w	r2, [r3, #-24]
	for(uint8_t i = 3; i < 15; i ++)
 8005900:	7dfb      	ldrb	r3, [r7, #23]
 8005902:	3301      	adds	r3, #1
 8005904:	75fb      	strb	r3, [r7, #23]
 8005906:	7dfb      	ldrb	r3, [r7, #23]
 8005908:	2b0e      	cmp	r3, #14
 800590a:	d9ef      	bls.n	80058ec <udpCommandSendSoftVersion+0x1c>
	}

	/* Расчет контрольной суммы отправляемого пакета данных */
	txData[15] = udpCalculateChecksum(txData, 16);
 800590c:	463b      	mov	r3, r7
 800590e:	2110      	movs	r1, #16
 8005910:	4618      	mov	r0, r3
 8005912:	f7ff fedb 	bl	80056cc <udpCalculateChecksum>
 8005916:	4603      	mov	r3, r0
 8005918:	73fb      	strb	r3, [r7, #15]

	udpClientSendResponse(txData, 16);
 800591a:	463b      	mov	r3, r7
 800591c:	2110      	movs	r1, #16
 800591e:	4618      	mov	r0, r3
 8005920:	f7ff feac 	bl	800567c <udpClientSendResponse>
}
 8005924:	bf00      	nop
 8005926:	3718      	adds	r7, #24
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}
 800592c:	08020854 	.word	0x08020854

08005930 <udpCommandSetAxisParam>:

/**	Функция обработки UDP команды:
 * 	Задать параметры выбранной оси (код A1h)
 */
void udpCommandSetAxisParam(void)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b082      	sub	sp, #8
 8005934:	af00      	add	r7, sp, #0
	uint8_t axisNum = rxData.buf[2];
 8005936:	4b0d      	ldr	r3, [pc, #52]	@ (800596c <udpCommandSetAxisParam+0x3c>)
 8005938:	789b      	ldrb	r3, [r3, #2]
 800593a:	71fb      	strb	r3, [r7, #7]

	/* Массив отправляемых серверу данных */
	uint8_t txData[5];

	txData[0] = 16;
 800593c:	2310      	movs	r3, #16
 800593e:	703b      	strb	r3, [r7, #0]
	txData[1] = 0xA1;
 8005940:	23a1      	movs	r3, #161	@ 0xa1
 8005942:	707b      	strb	r3, [r7, #1]
	txData[2] = axisNum;
 8005944:	79fb      	ldrb	r3, [r7, #7]
 8005946:	70bb      	strb	r3, [r7, #2]
	txData[3] = 1;
 8005948:	2301      	movs	r3, #1
 800594a:	70fb      	strb	r3, [r7, #3]

	/* Расчет контрольной суммы отправляемого пакета данных */
	txData[4] = udpCalculateChecksum(txData, 5);
 800594c:	463b      	mov	r3, r7
 800594e:	2105      	movs	r1, #5
 8005950:	4618      	mov	r0, r3
 8005952:	f7ff febb 	bl	80056cc <udpCalculateChecksum>
 8005956:	4603      	mov	r3, r0
 8005958:	713b      	strb	r3, [r7, #4]

	udpClientSendResponse(txData, 5);
 800595a:	463b      	mov	r3, r7
 800595c:	2105      	movs	r1, #5
 800595e:	4618      	mov	r0, r3
 8005960:	f7ff fe8c 	bl	800567c <udpClientSendResponse>
}
 8005964:	bf00      	nop
 8005966:	3708      	adds	r7, #8
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}
 800596c:	2000e5c8 	.word	0x2000e5c8

08005970 <udpCommandGetAxisParam>:

/**	Функция обработки UDP команды:
 * 	Выдать параметры выбранной оси (код A2h)
 */
void udpCommandGetAxisParam(void)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b08a      	sub	sp, #40	@ 0x28
 8005974:	af00      	add	r7, sp, #0
	/* Массив отправляемых серверу данных */
	uint8_t txData[32];

	txData[0] = 32;
 8005976:	2320      	movs	r3, #32
 8005978:	713b      	strb	r3, [r7, #4]
	txData[1] = 0xA2;
 800597a:	23a2      	movs	r3, #162	@ 0xa2
 800597c:	717b      	strb	r3, [r7, #5]

	/* ДАННЫЕ ДЛЯ ОТЛАДКИ СВЯЗИ */
	for(uint8_t i = 2; i < 31; i ++)
 800597e:	2302      	movs	r3, #2
 8005980:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005984:	e00c      	b.n	80059a0 <udpCommandGetAxisParam+0x30>
	{
		txData[i] = i;
 8005986:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800598a:	3328      	adds	r3, #40	@ 0x28
 800598c:	443b      	add	r3, r7
 800598e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8005992:	f803 2c24 	strb.w	r2, [r3, #-36]
	for(uint8_t i = 2; i < 31; i ++)
 8005996:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800599a:	3301      	adds	r3, #1
 800599c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80059a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80059a4:	2b1e      	cmp	r3, #30
 80059a6:	d9ee      	bls.n	8005986 <udpCommandGetAxisParam+0x16>
	}

	txData[31] = udpCalculateChecksum(txData, 32);
 80059a8:	1d3b      	adds	r3, r7, #4
 80059aa:	2120      	movs	r1, #32
 80059ac:	4618      	mov	r0, r3
 80059ae:	f7ff fe8d 	bl	80056cc <udpCalculateChecksum>
 80059b2:	4603      	mov	r3, r0
 80059b4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

	udpClientSendResponse(txData, 32);
 80059b8:	1d3b      	adds	r3, r7, #4
 80059ba:	2120      	movs	r1, #32
 80059bc:	4618      	mov	r0, r3
 80059be:	f7ff fe5d 	bl	800567c <udpClientSendResponse>
}
 80059c2:	bf00      	nop
 80059c4:	3728      	adds	r7, #40	@ 0x28
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}

080059ca <udpCommandGetAxesState>:

/**	Функция обработки UDP команды:
 * 	Выдать текущее состояние осей устройства (код A3h)
 */
void udpCommandGetAxesState(void)
{
 80059ca:	b580      	push	{r7, lr}
 80059cc:	b090      	sub	sp, #64	@ 0x40
 80059ce:	af00      	add	r7, sp, #0
	/* Массив отправляемых серверу данных */
	uint8_t txData[56];

	txData[0] = 56;
 80059d0:	2338      	movs	r3, #56	@ 0x38
 80059d2:	713b      	strb	r3, [r7, #4]
	txData[1] = 0xA3;
 80059d4:	23a3      	movs	r3, #163	@ 0xa3
 80059d6:	717b      	strb	r3, [r7, #5]

	/* ДАННЫЕ ДЛЯ ОТЛАДКИ СВЯЗИ */
	for(uint8_t i = 2; i < 55; i ++)
 80059d8:	2302      	movs	r3, #2
 80059da:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80059de:	e00c      	b.n	80059fa <udpCommandGetAxesState+0x30>
	{
		txData[i] = i;
 80059e0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80059e4:	3340      	adds	r3, #64	@ 0x40
 80059e6:	443b      	add	r3, r7
 80059e8:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 80059ec:	f803 2c3c 	strb.w	r2, [r3, #-60]
	for(uint8_t i = 2; i < 55; i ++)
 80059f0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80059f4:	3301      	adds	r3, #1
 80059f6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80059fa:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80059fe:	2b36      	cmp	r3, #54	@ 0x36
 8005a00:	d9ee      	bls.n	80059e0 <udpCommandGetAxesState+0x16>
	}

	/* Расчет контрольной суммы отправляемого пакета данных */
	txData[55] = udpCalculateChecksum(txData, 56);
 8005a02:	1d3b      	adds	r3, r7, #4
 8005a04:	2138      	movs	r1, #56	@ 0x38
 8005a06:	4618      	mov	r0, r3
 8005a08:	f7ff fe60 	bl	80056cc <udpCalculateChecksum>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

	udpClientSendResponse(txData, 56);
 8005a12:	1d3b      	adds	r3, r7, #4
 8005a14:	2138      	movs	r1, #56	@ 0x38
 8005a16:	4618      	mov	r0, r3
 8005a18:	f7ff fe30 	bl	800567c <udpClientSendResponse>
}
 8005a1c:	bf00      	nop
 8005a1e:	3740      	adds	r7, #64	@ 0x40
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}

08005a24 <udpCommandSetCurrentPosZero>:

/**	Функция обработки UDP команды:
 * 	Обнулить значение текущей координаты осей (код 30h)
 */
void udpCommandSetCurrentPosZero(void)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b082      	sub	sp, #8
 8005a28:	af00      	add	r7, sp, #0
	/* Массив отправляемых серверу данных */
	uint8_t txData[5];

	txData[0] = 5;
 8005a2a:	2305      	movs	r3, #5
 8005a2c:	703b      	strb	r3, [r7, #0]
	txData[1] = 0x30;
 8005a2e:	2330      	movs	r3, #48	@ 0x30
 8005a30:	707b      	strb	r3, [r7, #1]
	txData[2] = 0b00000011;
 8005a32:	2303      	movs	r3, #3
 8005a34:	70bb      	strb	r3, [r7, #2]
	txData[3] = 1;
 8005a36:	2301      	movs	r3, #1
 8005a38:	70fb      	strb	r3, [r7, #3]

	/* Расчет контрольной суммы отправляемого пакета данных */
	txData[4] = udpCalculateChecksum(txData, 5);
 8005a3a:	463b      	mov	r3, r7
 8005a3c:	2105      	movs	r1, #5
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f7ff fe44 	bl	80056cc <udpCalculateChecksum>
 8005a44:	4603      	mov	r3, r0
 8005a46:	713b      	strb	r3, [r7, #4]

	udpClientSendResponse(txData, 5);
 8005a48:	463b      	mov	r3, r7
 8005a4a:	2105      	movs	r1, #5
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f7ff fe15 	bl	800567c <udpClientSendResponse>
}
 8005a52:	bf00      	nop
 8005a54:	3708      	adds	r7, #8
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}

08005a5a <udpCommandStartAxesZeroing>:

/**	Функция обработки UDP команды:
 * 	Начать движение к датчикам 0 для выбранных осей (код 31h)
 */
void udpCommandStartAxesZeroing(void)
{
 8005a5a:	b480      	push	{r7}
 8005a5c:	af00      	add	r7, sp, #0

}
 8005a5e:	bf00      	nop
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr

08005a68 <udpCommandStartProcess>:

/**	Функция обработки UDP команды:
 * 	Запустить рабочий цикл устройства (код – 10h)
 */
void udpCommandStartProcess(void)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b082      	sub	sp, #8
 8005a6c:	af00      	add	r7, sp, #0
	/* Массив отправляемых серверу данных */
	uint8_t txData[4];

	txData[0] = 4;
 8005a6e:	2304      	movs	r3, #4
 8005a70:	713b      	strb	r3, [r7, #4]
	txData[1] = 0x10;
 8005a72:	2310      	movs	r3, #16
 8005a74:	717b      	strb	r3, [r7, #5]
	txData[2] = 1;
 8005a76:	2301      	movs	r3, #1
 8005a78:	71bb      	strb	r3, [r7, #6]

	/* Расчет контрольной суммы отправляемого пакета данных */
	txData[3] = udpCalculateChecksum(txData, 4);
 8005a7a:	1d3b      	adds	r3, r7, #4
 8005a7c:	2104      	movs	r1, #4
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f7ff fe24 	bl	80056cc <udpCalculateChecksum>
 8005a84:	4603      	mov	r3, r0
 8005a86:	71fb      	strb	r3, [r7, #7]

	udpClientSendResponse(txData, 4);
 8005a88:	1d3b      	adds	r3, r7, #4
 8005a8a:	2104      	movs	r1, #4
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f7ff fdf5 	bl	800567c <udpClientSendResponse>
}
 8005a92:	bf00      	nop
 8005a94:	3708      	adds	r7, #8
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}

08005a9a <udpCommandStopProcess>:

/**	Функция обработки UDP команды:
 * 	Полностью остановить цикл работы устройства (код – 11h)
 */
void udpCommandStopProcess(void)
{
 8005a9a:	b580      	push	{r7, lr}
 8005a9c:	b08a      	sub	sp, #40	@ 0x28
 8005a9e:	af00      	add	r7, sp, #0
	/* Массив отправляемых серверу данных */
	uint8_t txData[38];

	txData[0] = 38;
 8005aa0:	2326      	movs	r3, #38	@ 0x26
 8005aa2:	703b      	strb	r3, [r7, #0]
	txData[1] = 0x11;
 8005aa4:	2311      	movs	r3, #17
 8005aa6:	707b      	strb	r3, [r7, #1]

	/* ДАННЫЕ ДЛЯ ОТЛАДКИ СВЯЗИ */
	for(uint8_t i = 2; i < 37; i ++)
 8005aa8:	2302      	movs	r3, #2
 8005aaa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005aae:	e00c      	b.n	8005aca <udpCommandStopProcess+0x30>
	{
		txData[i] = i;
 8005ab0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005ab4:	3328      	adds	r3, #40	@ 0x28
 8005ab6:	443b      	add	r3, r7
 8005ab8:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8005abc:	f803 2c28 	strb.w	r2, [r3, #-40]
	for(uint8_t i = 2; i < 37; i ++)
 8005ac0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005ac4:	3301      	adds	r3, #1
 8005ac6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005aca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005ace:	2b24      	cmp	r3, #36	@ 0x24
 8005ad0:	d9ee      	bls.n	8005ab0 <udpCommandStopProcess+0x16>
	}

	/* Расчет контрольной суммы отправляемого пакета данных */
	txData[37] = udpCalculateChecksum(txData, 38);
 8005ad2:	463b      	mov	r3, r7
 8005ad4:	2126      	movs	r1, #38	@ 0x26
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f7ff fdf8 	bl	80056cc <udpCalculateChecksum>
 8005adc:	4603      	mov	r3, r0
 8005ade:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

	udpClientSendResponse(txData, 38);
 8005ae2:	463b      	mov	r3, r7
 8005ae4:	2126      	movs	r1, #38	@ 0x26
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f7ff fdc8 	bl	800567c <udpClientSendResponse>
}
 8005aec:	bf00      	nop
 8005aee:	3728      	adds	r7, #40	@ 0x28
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}

08005af4 <udpCommandPauseProcess>:

/**	Функция обработки UDP команды:
 * 	Приостановить рабочий цикл устройства (команда пауза) (код – 12h)
 */
void udpCommandPauseProcess(void)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b082      	sub	sp, #8
 8005af8:	af00      	add	r7, sp, #0
	/* Массив отправляемых серверу данных */
	uint8_t txData[5];

	txData[0] = 5;
 8005afa:	2305      	movs	r3, #5
 8005afc:	703b      	strb	r3, [r7, #0]
	txData[1] = 0x12;
 8005afe:	2312      	movs	r3, #18
 8005b00:	707b      	strb	r3, [r7, #1]
	txData[2] = 1;
 8005b02:	2301      	movs	r3, #1
 8005b04:	70bb      	strb	r3, [r7, #2]
	txData[3] = 1;
 8005b06:	2301      	movs	r3, #1
 8005b08:	70fb      	strb	r3, [r7, #3]

	/* Расчет контрольной суммы отправляемого пакета данных */
	txData[4] = udpCalculateChecksum(txData, 5);
 8005b0a:	463b      	mov	r3, r7
 8005b0c:	2105      	movs	r1, #5
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f7ff fddc 	bl	80056cc <udpCalculateChecksum>
 8005b14:	4603      	mov	r3, r0
 8005b16:	713b      	strb	r3, [r7, #4]

	udpClientSendResponse(txData, 5);
 8005b18:	463b      	mov	r3, r7
 8005b1a:	2105      	movs	r1, #5
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	f7ff fdad 	bl	800567c <udpClientSendResponse>
}
 8005b22:	bf00      	nop
 8005b24:	3708      	adds	r7, #8
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}

08005b2a <udpCommandResumeProcess>:

/**	Функция обработки UDP команды:
 * 	Продолжить выполнение рабочего цикла устройства (код – 13h)
 */
void udpCommandResumeProcess(void)
{
 8005b2a:	b580      	push	{r7, lr}
 8005b2c:	b082      	sub	sp, #8
 8005b2e:	af00      	add	r7, sp, #0
	/* Массив отправляемых серверу данных */
	uint8_t txData[4];

	txData[0] = 4;
 8005b30:	2304      	movs	r3, #4
 8005b32:	713b      	strb	r3, [r7, #4]
	txData[1] = 0x13;
 8005b34:	2313      	movs	r3, #19
 8005b36:	717b      	strb	r3, [r7, #5]
	txData[2] = 1;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	71bb      	strb	r3, [r7, #6]

	/* Расчет контрольной суммы отправляемого пакета данных */
	txData[3] = udpCalculateChecksum(txData, 4);
 8005b3c:	1d3b      	adds	r3, r7, #4
 8005b3e:	2104      	movs	r1, #4
 8005b40:	4618      	mov	r0, r3
 8005b42:	f7ff fdc3 	bl	80056cc <udpCalculateChecksum>
 8005b46:	4603      	mov	r3, r0
 8005b48:	71fb      	strb	r3, [r7, #7]

	udpClientSendResponse(txData, 4);
 8005b4a:	1d3b      	adds	r3, r7, #4
 8005b4c:	2104      	movs	r1, #4
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f7ff fd94 	bl	800567c <udpClientSendResponse>
}
 8005b54:	bf00      	nop
 8005b56:	3708      	adds	r7, #8
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}

08005b5c <pinFunctionsInit>:

/**	Функция инициализации указателя на функцию из другой области программы
 * 	для использования в данной библиотеке
 */
void pinFunctionsInit(writePinFunction_void_ptr function)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b083      	sub	sp, #12
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
	GPIO_WritePin = function;
 8005b64:	4a04      	ldr	r2, [pc, #16]	@ (8005b78 <pinFunctionsInit+0x1c>)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6013      	str	r3, [r2, #0]
}
 8005b6a:	bf00      	nop
 8005b6c:	370c      	adds	r7, #12
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b74:	4770      	bx	lr
 8005b76:	bf00      	nop
 8005b78:	2000e64c 	.word	0x2000e64c

08005b7c <setPin>:

/** Функция задания состояния пина GPIO
 */
void setPin(GPIO_StructDef_custom* GPIOx, uint16_t GPIO_Pin, pin_state_custom_t GPIO_State)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b082      	sub	sp, #8
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	460b      	mov	r3, r1
 8005b86:	807b      	strh	r3, [r7, #2]
 8005b88:	4613      	mov	r3, r2
 8005b8a:	707b      	strb	r3, [r7, #1]
	GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_State);
 8005b8c:	4b04      	ldr	r3, [pc, #16]	@ (8005ba0 <setPin+0x24>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	787a      	ldrb	r2, [r7, #1]
 8005b92:	8879      	ldrh	r1, [r7, #2]
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	4798      	blx	r3
}
 8005b98:	bf00      	nop
 8005b9a:	3708      	adds	r7, #8
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}
 8005ba0:	2000e64c 	.word	0x2000e64c

08005ba4 <plannerFunctionsInit>:

/* Указатель на функцию для измерения времени */
static timeFunction_uint32_t_ptr getPlannerMicros;

void plannerFunctionsInit(timeFunction_uint32_t_ptr function1)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b083      	sub	sp, #12
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
	getPlannerMicros = function1;
 8005bac:	4a04      	ldr	r2, [pc, #16]	@ (8005bc0 <plannerFunctionsInit+0x1c>)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6013      	str	r3, [r2, #0]
}
 8005bb2:	bf00      	nop
 8005bb4:	370c      	adds	r7, #12
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr
 8005bbe:	bf00      	nop
 8005bc0:	2000e650 	.word	0x2000e650

08005bc4 <plannerInit>:

/** Инициализация планироващика
 *
 */
void plannerInit(PLANNER_StructDef* planner)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b085      	sub	sp, #20
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
	/* Указатели на структуры драйверов моторов */
	for(uint8_t i = 0; i < AXES; i ++)
 8005bcc:	2300      	movs	r3, #0
 8005bce:	73fb      	strb	r3, [r7, #15]
 8005bd0:	e007      	b.n	8005be2 <plannerInit+0x1e>
	{
		planner->driver[i] = 0;
 8005bd2:	7bfa      	ldrb	r2, [r7, #15]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2100      	movs	r1, #0
 8005bd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(uint8_t i = 0; i < AXES; i ++)
 8005bdc:	7bfb      	ldrb	r3, [r7, #15]
 8005bde:	3301      	adds	r3, #1
 8005be0:	73fb      	strb	r3, [r7, #15]
 8005be2:	7bfb      	ldrb	r3, [r7, #15]
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d9f4      	bls.n	8005bd2 <plannerInit+0xe>
	}

	planner->_PlannerTime = 0;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2200      	movs	r2, #0
 8005bec:	609a      	str	r2, [r3, #8]

	planner->_curSpeed = 0;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	60da      	str	r2, [r3, #12]
	planner->_maxSpeed = 20 * 160; /* 20 мм/c --> 20 * 160 шаг/c */
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f44f 6248 	mov.w	r2, #3200	@ 0xc80
 8005bfa:	611a      	str	r2, [r3, #16]
	planner->_accel = 10 * 200; /* Ускорение по умолчанию 10 мм/c^2 */
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8005c02:	615a      	str	r2, [r3, #20]

	planner->tickUs = 0;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2200      	movs	r2, #0
 8005c08:	61da      	str	r2, [r3, #28]
	planner->stepTime = 0;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	625a      	str	r2, [r3, #36]	@ 0x24
	planner->_prevTime = 0;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2200      	movs	r2, #0
 8005c14:	621a      	str	r2, [r3, #32]

	planner->_stopFlag = false;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	761a      	strb	r2, [r3, #24]
	planner->_pauseFlag = false;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	765a      	strb	r2, [r3, #25]
	planner->_workState = PLANNER_INIT;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2201      	movs	r2, #1
 8005c26:	76da      	strb	r2, [r3, #27]
	planner->_phase = STAND;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2203      	movs	r2, #3
 8005c2c:	769a      	strb	r2, [r3, #26]

	planner->_c0 = 0;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f04f 0200 	mov.w	r2, #0
 8005c34:	629a      	str	r2, [r3, #40]	@ 0x28
	planner->_cn = 0;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f04f 0200 	mov.w	r2, #0
 8005c3c:	62da      	str	r2, [r3, #44]	@ 0x2c
	planner->_n = 0;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2200      	movs	r2, #0
 8005c42:	631a      	str	r2, [r3, #48]	@ 0x30
	planner->N = 0;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2200      	movs	r2, #0
 8005c48:	635a      	str	r2, [r3, #52]	@ 0x34
	planner->_cmin = 1.0;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8005c50:	639a      	str	r2, [r3, #56]	@ 0x38

	planner->_s1 = 0;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2200      	movs	r2, #0
 8005c56:	63da      	str	r2, [r3, #60]	@ 0x3c
	planner->_s2 = 0;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	planner->_s3 = 0;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2200      	movs	r2, #0
 8005c64:	645a      	str	r2, [r3, #68]	@ 0x44
	planner->_k = 0;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8005c6c:	bf00      	nop
 8005c6e:	3714      	adds	r7, #20
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr

08005c78 <tickPlanner>:
/** Здесь происходит движение мотора, функция должна вызываться как можно чаще,
 * 	имеется встроенный таймер на тиках микропроцессора
 * 	Возвращает PLANNER_RUN, процесс движения запущен
 */
void tickPlanner(PLANNER_StructDef* planner)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b084      	sub	sp, #16
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
	if (planner->_workState == PLANNER_RUN)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f993 301b 	ldrsb.w	r3, [r3, #27]
 8005c86:	2b03      	cmp	r3, #3
 8005c88:	d161      	bne.n	8005d4e <tickPlanner+0xd6>
	{
		/* Сравнение ускорения с нулем */
		if (planner->_accel > EPS) plannerVelocity(planner);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	695b      	ldr	r3, [r3, #20]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	dd02      	ble.n	8005c98 <tickPlanner+0x20>
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f000 f864 	bl	8005d60 <plannerVelocity>

		planner->tickUs = getPlannerMicros();
 8005c98:	4b2f      	ldr	r3, [pc, #188]	@ (8005d58 <tickPlanner+0xe0>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4798      	blx	r3
 8005c9e:	4602      	mov	r2, r0
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	61da      	str	r2, [r3, #28]

		/* Основной таймер планировщика */
		if (planner->tickUs - planner->_prevTime >= planner->stepTime)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	69da      	ldr	r2, [r3, #28]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6a1b      	ldr	r3, [r3, #32]
 8005cac:	1ad2      	subs	r2, r2, r3
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d34b      	bcc.n	8005d4e <tickPlanner+0xd6>
		{
			planner->_prevTime = planner->tickUs;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	69da      	ldr	r2, [r3, #28]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	621a      	str	r2, [r3, #32]

			/* Чтение ячейки FIFO буфера шагов и воспроизведение шагов */
			int8_t rx_bin;
			fifoRead(&fifoBufSteps, &rx_bin);
 8005cbe:	f107 030e 	add.w	r3, r7, #14
 8005cc2:	4619      	mov	r1, r3
 8005cc4:	4825      	ldr	r0, [pc, #148]	@ (8005d5c <tickPlanner+0xe4>)
 8005cc6:	f7fc fb52 	bl	800236e <fifoRead>

			for(uint8_t i = 0; i < AXES; i ++)
 8005cca:	2300      	movs	r3, #0
 8005ccc:	73fb      	strb	r3, [r7, #15]
 8005cce:	e03a      	b.n	8005d46 <tickPlanner+0xce>
			{
				if((rx_bin & 3) == 1)
 8005cd0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005cd4:	b2db      	uxtb	r3, r3
 8005cd6:	f003 0303 	and.w	r3, r3, #3
 8005cda:	2b01      	cmp	r3, #1
 8005cdc:	d10f      	bne.n	8005cfe <tickPlanner+0x86>
				{
					/* Устанавливаем направление и производим шаг мотором */
					planner->driver[i]->stepper->dir = 1;
 8005cde:	7bfa      	ldrb	r2, [r7, #15]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	2201      	movs	r2, #1
 8005cea:	721a      	strb	r2, [r3, #8]
					step(planner->driver[i]->stepper);
 8005cec:	7bfa      	ldrb	r2, [r7, #15]
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f000 fabe 	bl	8006278 <step>

					break;
 8005cfc:	e027      	b.n	8005d4e <tickPlanner+0xd6>
				}
				else if((rx_bin & 3) == 3)
 8005cfe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d02:	b2db      	uxtb	r3, r3
 8005d04:	f003 0303 	and.w	r3, r3, #3
 8005d08:	2b03      	cmp	r3, #3
 8005d0a:	d10f      	bne.n	8005d2c <tickPlanner+0xb4>
				{
					/* Устанавливаем направление и производим шаг мотором */
					planner->driver[i]->stepper->dir = -1;
 8005d0c:	7bfa      	ldrb	r2, [r7, #15]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	22ff      	movs	r2, #255	@ 0xff
 8005d18:	721a      	strb	r2, [r3, #8]
					step(planner->driver[i]->stepper);
 8005d1a:	7bfa      	ldrb	r2, [r7, #15]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4618      	mov	r0, r3
 8005d26:	f000 faa7 	bl	8006278 <step>

					break;
 8005d2a:	e010      	b.n	8005d4e <tickPlanner+0xd6>
				}

				rx_bin >>= (i + 1) * 2;
 8005d2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d30:	461a      	mov	r2, r3
 8005d32:	7bfb      	ldrb	r3, [r7, #15]
 8005d34:	3301      	adds	r3, #1
 8005d36:	005b      	lsls	r3, r3, #1
 8005d38:	fa42 f303 	asr.w	r3, r2, r3
 8005d3c:	b25b      	sxtb	r3, r3
 8005d3e:	73bb      	strb	r3, [r7, #14]
			for(uint8_t i = 0; i < AXES; i ++)
 8005d40:	7bfb      	ldrb	r3, [r7, #15]
 8005d42:	3301      	adds	r3, #1
 8005d44:	73fb      	strb	r3, [r7, #15]
 8005d46:	7bfb      	ldrb	r3, [r7, #15]
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	d9c1      	bls.n	8005cd0 <tickPlanner+0x58>
			}
		}
	}
}
 8005d4c:	e7ff      	b.n	8005d4e <tickPlanner+0xd6>
 8005d4e:	bf00      	nop
 8005d50:	3710      	adds	r7, #16
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}
 8005d56:	bf00      	nop
 8005d58:	2000e650 	.word	0x2000e650
 8005d5c:	2000d828 	.word	0x2000d828

08005d60 <plannerVelocity>:
static planner_phase_t phase;

/** Планировщик скорости
 */
void plannerVelocity(PLANNER_StructDef* planner)
{
 8005d60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d64:	b082      	sub	sp, #8
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	6078      	str	r0, [r7, #4]
	if (planner->tickUs - planner->_PlannerTime >= planner->stepTime)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	69da      	ldr	r2, [r3, #28]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	689b      	ldr	r3, [r3, #8]
 8005d72:	1ad2      	subs	r2, r2, r3
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	f0c0 80bd 	bcc.w	8005ef8 <plannerVelocity+0x198>
	{
		if(planner->_pauseFlag == false)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	7e5b      	ldrb	r3, [r3, #25]
 8005d82:	f083 0301 	eor.w	r3, r3, #1
 8005d86:	b2db      	uxtb	r3, r3
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d002      	beq.n	8005d92 <plannerVelocity+0x32>
		{
			/* Планировщик фазы движения */
			plannerPhase(planner);
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f000 f8c9 	bl	8005f24 <plannerPhase>
		}

		phase = planner->_phase;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f993 201a 	ldrsb.w	r2, [r3, #26]
 8005d98:	4b5f      	ldr	r3, [pc, #380]	@ (8005f18 <plannerVelocity+0x1b8>)
 8005d9a:	701a      	strb	r2, [r3, #0]

		/* Обновление переменной времени планировщика */
		planner->_PlannerTime = planner->tickUs;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	69da      	ldr	r2, [r3, #28]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	609a      	str	r2, [r3, #8]

		/* Основная логика разгона и торможения */
		if(phase == ACCELERATION || phase == BRAKING)
 8005da4:	4b5c      	ldr	r3, [pc, #368]	@ (8005f18 <plannerVelocity+0x1b8>)
 8005da6:	f993 3000 	ldrsb.w	r3, [r3]
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d006      	beq.n	8005dbc <plannerVelocity+0x5c>
 8005dae:	4b5a      	ldr	r3, [pc, #360]	@ (8005f18 <plannerVelocity+0x1b8>)
 8005db0:	f993 3000 	ldrsb.w	r3, [r3]
 8005db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005db8:	f040 8097 	bne.w	8005eea <plannerVelocity+0x18a>
		{
			if(planner->_n == 0) planner->_cn = planner->_c0;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d104      	bne.n	8005dce <plannerVelocity+0x6e>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005dcc:	e066      	b.n	8005e9c <plannerVelocity+0x13c>
			else if(planner->_n == 1) planner->_cn = 0.4056 * planner->_c0;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d113      	bne.n	8005dfe <plannerVelocity+0x9e>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f7fa fbc4 	bl	8000568 <__aeabi_f2d>
 8005de0:	a349      	add	r3, pc, #292	@ (adr r3, 8005f08 <plannerVelocity+0x1a8>)
 8005de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de6:	f7fa fc17 	bl	8000618 <__aeabi_dmul>
 8005dea:	4602      	mov	r2, r0
 8005dec:	460b      	mov	r3, r1
 8005dee:	4610      	mov	r0, r2
 8005df0:	4619      	mov	r1, r3
 8005df2:	f7fa ff09 	bl	8000c08 <__aeabi_d2f>
 8005df6:	4602      	mov	r2, r0
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005dfc:	e04e      	b.n	8005e9c <plannerVelocity+0x13c>
			else if(planner->_n > 1)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e02:	2b01      	cmp	r3, #1
 8005e04:	dd4a      	ble.n	8005e9c <plannerVelocity+0x13c>
			{
				planner->_cn = planner->_cn * (1 - phase * 2.0 / (4.0 * planner->_n + phase));
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f7fa fbac 	bl	8000568 <__aeabi_f2d>
 8005e10:	4604      	mov	r4, r0
 8005e12:	460d      	mov	r5, r1
 8005e14:	4b40      	ldr	r3, [pc, #256]	@ (8005f18 <plannerVelocity+0x1b8>)
 8005e16:	f993 3000 	ldrsb.w	r3, [r3]
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f7fa fb92 	bl	8000544 <__aeabi_i2d>
 8005e20:	4602      	mov	r2, r0
 8005e22:	460b      	mov	r3, r1
 8005e24:	f7fa fa42 	bl	80002ac <__adddf3>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	460b      	mov	r3, r1
 8005e2c:	4690      	mov	r8, r2
 8005e2e:	4699      	mov	r9, r3
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e34:	4618      	mov	r0, r3
 8005e36:	f7fa fb85 	bl	8000544 <__aeabi_i2d>
 8005e3a:	f04f 0200 	mov.w	r2, #0
 8005e3e:	4b37      	ldr	r3, [pc, #220]	@ (8005f1c <plannerVelocity+0x1bc>)
 8005e40:	f7fa fbea 	bl	8000618 <__aeabi_dmul>
 8005e44:	4602      	mov	r2, r0
 8005e46:	460b      	mov	r3, r1
 8005e48:	4692      	mov	sl, r2
 8005e4a:	469b      	mov	fp, r3
 8005e4c:	4b32      	ldr	r3, [pc, #200]	@ (8005f18 <plannerVelocity+0x1b8>)
 8005e4e:	f993 3000 	ldrsb.w	r3, [r3]
 8005e52:	4618      	mov	r0, r3
 8005e54:	f7fa fb76 	bl	8000544 <__aeabi_i2d>
 8005e58:	4602      	mov	r2, r0
 8005e5a:	460b      	mov	r3, r1
 8005e5c:	4650      	mov	r0, sl
 8005e5e:	4659      	mov	r1, fp
 8005e60:	f7fa fa24 	bl	80002ac <__adddf3>
 8005e64:	4602      	mov	r2, r0
 8005e66:	460b      	mov	r3, r1
 8005e68:	4640      	mov	r0, r8
 8005e6a:	4649      	mov	r1, r9
 8005e6c:	f7fa fcfe 	bl	800086c <__aeabi_ddiv>
 8005e70:	4602      	mov	r2, r0
 8005e72:	460b      	mov	r3, r1
 8005e74:	f04f 0000 	mov.w	r0, #0
 8005e78:	4929      	ldr	r1, [pc, #164]	@ (8005f20 <plannerVelocity+0x1c0>)
 8005e7a:	f7fa fa15 	bl	80002a8 <__aeabi_dsub>
 8005e7e:	4602      	mov	r2, r0
 8005e80:	460b      	mov	r3, r1
 8005e82:	4620      	mov	r0, r4
 8005e84:	4629      	mov	r1, r5
 8005e86:	f7fa fbc7 	bl	8000618 <__aeabi_dmul>
 8005e8a:	4602      	mov	r2, r0
 8005e8c:	460b      	mov	r3, r1
 8005e8e:	4610      	mov	r0, r2
 8005e90:	4619      	mov	r1, r3
 8005e92:	f7fa feb9 	bl	8000c08 <__aeabi_d2f>
 8005e96:	4602      	mov	r2, r0
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	62da      	str	r2, [r3, #44]	@ 0x2c
			}

			planner->stepTime = (uint32_t)(planner->_cn) - STEPPER_STEP_TIME;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8005ea2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ea6:	ee17 3a90 	vmov	r3, s15
 8005eaa:	1f5a      	subs	r2, r3, #5
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	625a      	str	r2, [r3, #36]	@ 0x24
			planner->_curSpeed = 1000000.0 / planner->_cn;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f7fa fb57 	bl	8000568 <__aeabi_f2d>
 8005eba:	4602      	mov	r2, r0
 8005ebc:	460b      	mov	r3, r1
 8005ebe:	a114      	add	r1, pc, #80	@ (adr r1, 8005f10 <plannerVelocity+0x1b0>)
 8005ec0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005ec4:	f7fa fcd2 	bl	800086c <__aeabi_ddiv>
 8005ec8:	4602      	mov	r2, r0
 8005eca:	460b      	mov	r3, r1
 8005ecc:	4610      	mov	r0, r2
 8005ece:	4619      	mov	r1, r3
 8005ed0:	f7fa fe52 	bl	8000b78 <__aeabi_d2iz>
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	60da      	str	r2, [r3, #12]

			planner->_n += phase;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ede:	4a0e      	ldr	r2, [pc, #56]	@ (8005f18 <plannerVelocity+0x1b8>)
 8005ee0:	f992 2000 	ldrsb.w	r2, [r2]
 8005ee4:	441a      	add	r2, r3
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	631a      	str	r2, [r3, #48]	@ 0x30
		}

		if(planner->_n < 0) planner->_workState = PLANNER_PAUSE;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	da02      	bge.n	8005ef8 <plannerVelocity+0x198>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2204      	movs	r2, #4
 8005ef6:	76da      	strb	r2, [r3, #27]
	}
}
 8005ef8:	bf00      	nop
 8005efa:	3708      	adds	r7, #8
 8005efc:	46bd      	mov	sp, r7
 8005efe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f02:	bf00      	nop
 8005f04:	f3af 8000 	nop.w
 8005f08:	b3d07c85 	.word	0xb3d07c85
 8005f0c:	3fd9f559 	.word	0x3fd9f559
 8005f10:	00000000 	.word	0x00000000
 8005f14:	412e8480 	.word	0x412e8480
 8005f18:	2000e654 	.word	0x2000e654
 8005f1c:	40100000 	.word	0x40100000
 8005f20:	3ff00000 	.word	0x3ff00000

08005f24 <plannerPhase>:

void plannerPhase(PLANNER_StructDef* planner)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b082      	sub	sp, #8
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
	if(planner->_n == planner->N && planner->_phase == ACCELERATION)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f30:	687a      	ldr	r2, [r7, #4]
 8005f32:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d108      	bne.n	8005f4a <plannerPhase+0x26>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f993 301a 	ldrsb.w	r3, [r3, #26]
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	d103      	bne.n	8005f4a <plannerPhase+0x26>
	{
		planner->_phase = UNIFORM;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2200      	movs	r2, #0
 8005f46:	769a      	strb	r2, [r3, #26]
		return;
 8005f48:	e00c      	b.n	8005f64 <plannerPhase+0x40>
	}

	if(cellsForRead(&fifoBufSteps) == planner->N)
 8005f4a:	4808      	ldr	r0, [pc, #32]	@ (8005f6c <plannerPhase+0x48>)
 8005f4c:	f7fc f98e 	bl	800226c <cellsForRead>
 8005f50:	4603      	mov	r3, r0
 8005f52:	461a      	mov	r2, r3
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d103      	bne.n	8005f64 <plannerPhase+0x40>
	{
		planner->_phase = BRAKING;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	22ff      	movs	r2, #255	@ 0xff
 8005f60:	769a      	strb	r2, [r3, #26]
		return;
 8005f62:	bf00      	nop
	}
}
 8005f64:	3708      	adds	r7, #8
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}
 8005f6a:	bf00      	nop
 8005f6c:	2000d828 	.word	0x2000d828

08005f70 <calculatePlannerInitialParam>:

/** Запуск планировщика (запуск движения)
 */
void calculatePlannerInitialParam(PLANNER_StructDef* planner)
{
 8005f70:	b5b0      	push	{r4, r5, r7, lr}
 8005f72:	b084      	sub	sp, #16
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
	uint32_t steps;

	if (planner->_accel == 0 || planner->_maxSpeed < MIN_SPEED_DRIVER)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	695b      	ldr	r3, [r3, #20]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d003      	beq.n	8005f88 <calculatePlannerInitialParam+0x18>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	691b      	ldr	r3, [r3, #16]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	dc18      	bgt.n	8005fba <calculatePlannerInitialParam+0x4a>
	{
		planner->stepTime = 1000000.0 / planner->_maxSpeed;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	691b      	ldr	r3, [r3, #16]
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f7fa fad9 	bl	8000544 <__aeabi_i2d>
 8005f92:	4602      	mov	r2, r0
 8005f94:	460b      	mov	r3, r1
 8005f96:	a129      	add	r1, pc, #164	@ (adr r1, 800603c <calculatePlannerInitialParam+0xcc>)
 8005f98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f9c:	f7fa fc66 	bl	800086c <__aeabi_ddiv>
 8005fa0:	4602      	mov	r2, r0
 8005fa2:	460b      	mov	r3, r1
 8005fa4:	4610      	mov	r0, r2
 8005fa6:	4619      	mov	r1, r3
 8005fa8:	f7fa fe0e 	bl	8000bc8 <__aeabi_d2uiz>
 8005fac:	4602      	mov	r2, r0
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	625a      	str	r2, [r3, #36]	@ 0x24
		planner->_phase = UNIFORM;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	769a      	strb	r2, [r3, #26]
 8005fb8:	e037      	b.n	800602a <calculatePlannerInitialParam+0xba>
	}
	else
	{
		steps = cellsForRead(&fifoBufSteps);
 8005fba:	481f      	ldr	r0, [pc, #124]	@ (8006038 <calculatePlannerInitialParam+0xc8>)
 8005fbc:	f7fc f956 	bl	800226c <cellsForRead>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	60fb      	str	r3, [r7, #12]

		planner->_n = 0;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	631a      	str	r2, [r3, #48]	@ 0x30

		planner->_phase = ACCELERATION;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2201      	movs	r2, #1
 8005fce:	769a      	strb	r2, [r3, #26]
		planner->N = planner->_maxSpeed * planner->_maxSpeed / (2.0 * planner->_accel);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	691b      	ldr	r3, [r3, #16]
 8005fd4:	687a      	ldr	r2, [r7, #4]
 8005fd6:	6912      	ldr	r2, [r2, #16]
 8005fd8:	fb02 f303 	mul.w	r3, r2, r3
 8005fdc:	4618      	mov	r0, r3
 8005fde:	f7fa fab1 	bl	8000544 <__aeabi_i2d>
 8005fe2:	4604      	mov	r4, r0
 8005fe4:	460d      	mov	r5, r1
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	695b      	ldr	r3, [r3, #20]
 8005fea:	4618      	mov	r0, r3
 8005fec:	f7fa faaa 	bl	8000544 <__aeabi_i2d>
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	460b      	mov	r3, r1
 8005ff4:	f7fa f95a 	bl	80002ac <__adddf3>
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	460b      	mov	r3, r1
 8005ffc:	4620      	mov	r0, r4
 8005ffe:	4629      	mov	r1, r5
 8006000:	f7fa fc34 	bl	800086c <__aeabi_ddiv>
 8006004:	4602      	mov	r2, r0
 8006006:	460b      	mov	r3, r1
 8006008:	4610      	mov	r0, r2
 800600a:	4619      	mov	r1, r3
 800600c:	f7fa fddc 	bl	8000bc8 <__aeabi_d2uiz>
 8006010:	4602      	mov	r2, r0
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	635a      	str	r2, [r3, #52]	@ 0x34

		if(steps < 2 * planner->N)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800601a:	005b      	lsls	r3, r3, #1
 800601c:	68fa      	ldr	r2, [r7, #12]
 800601e:	429a      	cmp	r2, r3
 8006020:	d203      	bcs.n	800602a <calculatePlannerInitialParam+0xba>
		{
			planner->N = steps / 2;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	085a      	lsrs	r2, r3, #1
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}

	planner->_workState = PLANNER_RUN;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2203      	movs	r2, #3
 800602e:	76da      	strb	r2, [r3, #27]
}
 8006030:	bf00      	nop
 8006032:	3710      	adds	r7, #16
 8006034:	46bd      	mov	sp, r7
 8006036:	bdb0      	pop	{r4, r5, r7, pc}
 8006038:	2000d828 	.word	0x2000d828
 800603c:	00000000 	.word	0x00000000
 8006040:	412e8480 	.word	0x412e8480
 8006044:	00000000 	.word	0x00000000

08006048 <setPlannerAcceleration>:

/** Установить ускорение планировщика (мм/c^2)
 */
planner_param_change_t setPlannerAcceleration(PLANNER_StructDef* planner, float accel)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b082      	sub	sp, #8
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	ed87 0a00 	vstr	s0, [r7]
	if(planner->_workState == PLANNER_RUN) return PLANNER_PARAM_CHANGE_ERR;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f993 301b 	ldrsb.w	r3, [r3, #27]
 800605a:	2b03      	cmp	r3, #3
 800605c:	d102      	bne.n	8006064 <setPlannerAcceleration+0x1c>
 800605e:	f04f 33ff 	mov.w	r3, #4294967295
 8006062:	e04d      	b.n	8006100 <setPlannerAcceleration+0xb8>

	/* Перевод единиц измерения ускорения в шаги/с^2 для 800 шагов на оборот мотора */
	planner->_accel = fabs(accel) * 160;
 8006064:	edd7 7a00 	vldr	s15, [r7]
 8006068:	eef0 7ae7 	vabs.f32	s15, s15
 800606c:	ee17 0a90 	vmov	r0, s15
 8006070:	f7fa fa7a 	bl	8000568 <__aeabi_f2d>
 8006074:	f04f 0200 	mov.w	r2, #0
 8006078:	4b27      	ldr	r3, [pc, #156]	@ (8006118 <setPlannerAcceleration+0xd0>)
 800607a:	f7fa facd 	bl	8000618 <__aeabi_dmul>
 800607e:	4602      	mov	r2, r0
 8006080:	460b      	mov	r3, r1
 8006082:	4610      	mov	r0, r2
 8006084:	4619      	mov	r1, r3
 8006086:	f7fa fd77 	bl	8000b78 <__aeabi_d2iz>
 800608a:	4602      	mov	r2, r0
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	615a      	str	r2, [r3, #20]

	/* Считаем значение _c0 и _N по алгоритму плавного старта */
	if(accel > EPS)
 8006090:	6838      	ldr	r0, [r7, #0]
 8006092:	f7fa fa69 	bl	8000568 <__aeabi_f2d>
 8006096:	a31c      	add	r3, pc, #112	@ (adr r3, 8006108 <setPlannerAcceleration+0xc0>)
 8006098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800609c:	f7fa fd4c 	bl	8000b38 <__aeabi_dcmpgt>
 80060a0:	4603      	mov	r3, r0
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d027      	beq.n	80060f6 <setPlannerAcceleration+0xae>
	{
		planner->_c0 = 1000000.0 * sqrt(2.0 / planner->_accel);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	695b      	ldr	r3, [r3, #20]
 80060aa:	4618      	mov	r0, r3
 80060ac:	f7fa fa4a 	bl	8000544 <__aeabi_i2d>
 80060b0:	4602      	mov	r2, r0
 80060b2:	460b      	mov	r3, r1
 80060b4:	f04f 0000 	mov.w	r0, #0
 80060b8:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80060bc:	f7fa fbd6 	bl	800086c <__aeabi_ddiv>
 80060c0:	4602      	mov	r2, r0
 80060c2:	460b      	mov	r3, r1
 80060c4:	ec43 2b17 	vmov	d7, r2, r3
 80060c8:	eeb0 0a47 	vmov.f32	s0, s14
 80060cc:	eef0 0a67 	vmov.f32	s1, s15
 80060d0:	f013 feac 	bl	8019e2c <sqrt>
 80060d4:	ec51 0b10 	vmov	r0, r1, d0
 80060d8:	a30d      	add	r3, pc, #52	@ (adr r3, 8006110 <setPlannerAcceleration+0xc8>)
 80060da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060de:	f7fa fa9b 	bl	8000618 <__aeabi_dmul>
 80060e2:	4602      	mov	r2, r0
 80060e4:	460b      	mov	r3, r1
 80060e6:	4610      	mov	r0, r2
 80060e8:	4619      	mov	r1, r3
 80060ea:	f7fa fd8d 	bl	8000c08 <__aeabi_d2f>
 80060ee:	4602      	mov	r2, r0
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	629a      	str	r2, [r3, #40]	@ 0x28
 80060f4:	e003      	b.n	80060fe <setPlannerAcceleration+0xb6>
	}
	else planner->_c0 = 0;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f04f 0200 	mov.w	r2, #0
 80060fc:	629a      	str	r2, [r3, #40]	@ 0x28

	return PLANNER_PARAM_CHANGE_OK;
 80060fe:	2300      	movs	r3, #0
}
 8006100:	4618      	mov	r0, r3
 8006102:	3708      	adds	r7, #8
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}
 8006108:	e826d695 	.word	0xe826d695
 800610c:	3e112e0b 	.word	0x3e112e0b
 8006110:	00000000 	.word	0x00000000
 8006114:	412e8480 	.word	0x412e8480
 8006118:	40640000 	.word	0x40640000

0800611c <setPlannerMaxSpeed>:

/** Установка максимальной скорости планировщика (мм/c^2)
 *
 */
planner_param_change_t setPlannerMaxSpeed(PLANNER_StructDef* planner, float speed)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b082      	sub	sp, #8
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
 8006124:	ed87 0a00 	vstr	s0, [r7]
	if(planner->_workState == PLANNER_RUN) return PLANNER_PARAM_CHANGE_ERR;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f993 301b 	ldrsb.w	r3, [r3, #27]
 800612e:	2b03      	cmp	r3, #3
 8006130:	d102      	bne.n	8006138 <setPlannerMaxSpeed+0x1c>
 8006132:	f04f 33ff 	mov.w	r3, #4294967295
 8006136:	e016      	b.n	8006166 <setPlannerMaxSpeed+0x4a>

	/* Перевод максимальной скорости в шаги/с^2 */
	planner->_maxSpeed = fabs(speed) * 160;
 8006138:	edd7 7a00 	vldr	s15, [r7]
 800613c:	eef0 7ae7 	vabs.f32	s15, s15
 8006140:	ee17 0a90 	vmov	r0, s15
 8006144:	f7fa fa10 	bl	8000568 <__aeabi_f2d>
 8006148:	f04f 0200 	mov.w	r2, #0
 800614c:	4b08      	ldr	r3, [pc, #32]	@ (8006170 <setPlannerMaxSpeed+0x54>)
 800614e:	f7fa fa63 	bl	8000618 <__aeabi_dmul>
 8006152:	4602      	mov	r2, r0
 8006154:	460b      	mov	r3, r1
 8006156:	4610      	mov	r0, r2
 8006158:	4619      	mov	r1, r3
 800615a:	f7fa fd0d 	bl	8000b78 <__aeabi_d2iz>
 800615e:	4602      	mov	r2, r0
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	611a      	str	r2, [r3, #16]

	return PLANNER_PARAM_CHANGE_OK;
 8006164:	2300      	movs	r3, #0
}
 8006166:	4618      	mov	r0, r3
 8006168:	3708      	adds	r7, #8
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}
 800616e:	bf00      	nop
 8006170:	40640000 	.word	0x40640000

08006174 <addDriver>:

/** Подключить драйвер мотора driver на ось axis к планировщику
 */
void addDriver(PLANNER_StructDef* planner, DRIVER_StructDef* driver, uint8_t axis)
{
 8006174:	b480      	push	{r7}
 8006176:	b085      	sub	sp, #20
 8006178:	af00      	add	r7, sp, #0
 800617a:	60f8      	str	r0, [r7, #12]
 800617c:	60b9      	str	r1, [r7, #8]
 800617e:	4613      	mov	r3, r2
 8006180:	71fb      	strb	r3, [r7, #7]
	planner->driver[axis] = driver;
 8006182:	79fa      	ldrb	r2, [r7, #7]
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	68b9      	ldr	r1, [r7, #8]
 8006188:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800618c:	bf00      	nop
 800618e:	3714      	adds	r7, #20
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr

08006198 <pausePlanner>:

/** Функция паузы движения
 *
 */
void pausePlanner(PLANNER_StructDef* planner)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b082      	sub	sp, #8
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
	if(cellsForRead(&fifoBufSteps) > planner->N)
 80061a0:	4809      	ldr	r0, [pc, #36]	@ (80061c8 <pausePlanner+0x30>)
 80061a2:	f7fc f863 	bl	800226c <cellsForRead>
 80061a6:	4603      	mov	r3, r0
 80061a8:	461a      	mov	r2, r3
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061ae:	429a      	cmp	r2, r3
 80061b0:	d905      	bls.n	80061be <pausePlanner+0x26>
	{
		planner->_pauseFlag = true;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2201      	movs	r2, #1
 80061b6:	765a      	strb	r2, [r3, #25]
		planner->_phase = BRAKING;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	22ff      	movs	r2, #255	@ 0xff
 80061bc:	769a      	strb	r2, [r3, #26]
	}
}
 80061be:	bf00      	nop
 80061c0:	3708      	adds	r7, #8
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}
 80061c6:	bf00      	nop
 80061c8:	2000d828 	.word	0x2000d828

080061cc <resumePlanner>:

/** Продолжить после остановки/паузы
 *
 */
void resumePlanner(PLANNER_StructDef* planner)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b082      	sub	sp, #8
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
	calculatePlannerInitialParam(planner);
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f7ff fecb 	bl	8005f70 <calculatePlannerInitialParam>
	planner->_pauseFlag = false;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2200      	movs	r2, #0
 80061de:	765a      	strb	r2, [r3, #25]

	planner->_workState = PLANNER_RUN;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2203      	movs	r2, #3
 80061e4:	76da      	strb	r2, [r3, #27]
}
 80061e6:	bf00      	nop
 80061e8:	3708      	adds	r7, #8
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}

080061ee <stopPlanner>:

/** Функция резкой остановки
 *
 */
void stopPlanner(PLANNER_StructDef* planner)
{
 80061ee:	b480      	push	{r7}
 80061f0:	b083      	sub	sp, #12
 80061f2:	af00      	add	r7, sp, #0
 80061f4:	6078      	str	r0, [r7, #4]
	planner->_workState = PLANNER_STOP;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2206      	movs	r2, #6
 80061fa:	76da      	strb	r2, [r3, #27]
}
 80061fc:	bf00      	nop
 80061fe:	370c      	adds	r7, #12
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr

08006208 <stepperInit>:
 *
 * 	Функция определяет пины шагового мотора и инициализирует начальные данные мотора -
 * 	позицию, направление, статус включения, глобальное определение поведения пинов DIR, EN
 */
void stepperInit(STEPPER_StructDef* stepper, STEPPER_PINS_StructDef* pins)
{
 8006208:	b480      	push	{r7}
 800620a:	b083      	sub	sp, #12
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	6039      	str	r1, [r7, #0]
	stepper->stepper_pins->GPIOx_step = pins->GPIOx_step;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	683a      	ldr	r2, [r7, #0]
 8006218:	6812      	ldr	r2, [r2, #0]
 800621a:	601a      	str	r2, [r3, #0]
	stepper->stepper_pins->GPIO_Pin_step = pins->GPIO_Pin_step;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	683a      	ldr	r2, [r7, #0]
 8006222:	8892      	ldrh	r2, [r2, #4]
 8006224:	809a      	strh	r2, [r3, #4]

	stepper->stepper_pins->GPIOx_dir = pins->GPIOx_dir;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	683a      	ldr	r2, [r7, #0]
 800622c:	6892      	ldr	r2, [r2, #8]
 800622e:	609a      	str	r2, [r3, #8]
	stepper->stepper_pins->GPIO_Pin_dir = pins->GPIO_Pin_dir;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	683a      	ldr	r2, [r7, #0]
 8006236:	8992      	ldrh	r2, [r2, #12]
 8006238:	819a      	strh	r2, [r3, #12]

	stepper->stepper_pins->GPIOx_en = pins->GPIOx_en;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	683a      	ldr	r2, [r7, #0]
 8006240:	6912      	ldr	r2, [r2, #16]
 8006242:	611a      	str	r2, [r3, #16]
	stepper->stepper_pins->GPIO_Pin_en = pins->GPIO_Pin_en;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	683a      	ldr	r2, [r7, #0]
 800624a:	8a92      	ldrh	r2, [r2, #20]
 800624c:	829a      	strh	r2, [r3, #20]

	stepper->pos = 0;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2200      	movs	r2, #0
 8006252:	605a      	str	r2, [r3, #4]
	stepper->dir = 1;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2201      	movs	r2, #1
 8006258:	721a      	strb	r2, [r3, #8]
	stepper->en = OFF;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2200      	movs	r2, #0
 800625e:	725a      	strb	r2, [r3, #9]

	stepper->_globEn = false;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2200      	movs	r2, #0
 8006264:	729a      	strb	r2, [r3, #10]
	stepper->_globDir = false;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2200      	movs	r2, #0
 800626a:	72da      	strb	r2, [r3, #11]
}
 800626c:	bf00      	nop
 800626e:	370c      	adds	r7, #12
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr

08006278 <step>:

/** Функция выполнения шага мотором
 */
void step(STEPPER_StructDef* stepper)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b082      	sub	sp, #8
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
	stepper->pos += stepper->dir;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	7a1b      	ldrb	r3, [r3, #8]
 8006284:	b25a      	sxtb	r2, r3
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	441a      	add	r2, r3
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	605a      	str	r2, [r3, #4]
	setStepperDir(stepper, stepper->dir);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	7a1b      	ldrb	r3, [r3, #8]
 8006294:	b25b      	sxtb	r3, r3
 8006296:	4619      	mov	r1, r3
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f000 f81b 	bl	80062d4 <setStepperDir>

	setPin(stepper->stepper_pins->GPIOx_step, stepper->stepper_pins->GPIO_Pin_step, PIN_SET);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	6818      	ldr	r0, [r3, #0]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	889b      	ldrh	r3, [r3, #4]
 80062aa:	2201      	movs	r2, #1
 80062ac:	4619      	mov	r1, r3
 80062ae:	f7ff fc65 	bl	8005b7c <setPin>
	DWT_usDelay(STEPPER_STEP_TIME);
 80062b2:	2005      	movs	r0, #5
 80062b4:	f7fb ff74 	bl	80021a0 <DWT_usDelay>
	setPin(stepper->stepper_pins->GPIOx_step, stepper->stepper_pins->GPIO_Pin_step, PIN_RESET);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	6818      	ldr	r0, [r3, #0]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	889b      	ldrh	r3, [r3, #4]
 80062c4:	2200      	movs	r2, #0
 80062c6:	4619      	mov	r1, r3
 80062c8:	f7ff fc58 	bl	8005b7c <setPin>
}
 80062cc:	bf00      	nop
 80062ce:	3708      	adds	r7, #8
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}

080062d4 <setStepperDir>:
 * 	dir = 1 - движение мотора по часовой стрелки
 * 	dir = -1 - движение моторапротив часовой стрелки
 * 	Направление вращения определяется со стороны задней части мотора,
 */
void setStepperDir(STEPPER_StructDef* stepper, int8_t dir)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b082      	sub	sp, #8
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
 80062dc:	460b      	mov	r3, r1
 80062de:	70fb      	strb	r3, [r7, #3]
	if(stepper->_globDir == false)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	7adb      	ldrb	r3, [r3, #11]
 80062e4:	b2db      	uxtb	r3, r3
 80062e6:	f083 0301 	eor.w	r3, r3, #1
 80062ea:	b2db      	uxtb	r3, r3
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d01f      	beq.n	8006330 <setStepperDir+0x5c>
	{
		if(dir == 1)
 80062f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80062f4:	2b01      	cmp	r3, #1
 80062f6:	d10d      	bne.n	8006314 <setStepperDir+0x40>
		{
			stepper->dir = 1;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2201      	movs	r2, #1
 80062fc:	721a      	strb	r2, [r3, #8]
			setPin(stepper->stepper_pins->GPIOx_dir, stepper->stepper_pins->GPIO_Pin_dir, PIN_SET);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	6898      	ldr	r0, [r3, #8]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	899b      	ldrh	r3, [r3, #12]
 800630a:	2201      	movs	r2, #1
 800630c:	4619      	mov	r1, r3
 800630e:	f7ff fc35 	bl	8005b7c <setPin>
		else
		{
			stepper->dir = -1;
			setPin(stepper->stepper_pins->GPIOx_dir, stepper->stepper_pins->GPIO_Pin_dir, PIN_SET);
		}
}
 8006312:	e02c      	b.n	800636e <setStepperDir+0x9a>
			stepper->dir = -1;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	22ff      	movs	r2, #255	@ 0xff
 8006318:	721a      	strb	r2, [r3, #8]
			setPin(stepper->stepper_pins->GPIOx_dir, stepper->stepper_pins->GPIO_Pin_dir, PIN_RESET);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	6898      	ldr	r0, [r3, #8]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	899b      	ldrh	r3, [r3, #12]
 8006326:	2200      	movs	r2, #0
 8006328:	4619      	mov	r1, r3
 800632a:	f7ff fc27 	bl	8005b7c <setPin>
}
 800632e:	e01e      	b.n	800636e <setStepperDir+0x9a>
	else if(dir == 1)
 8006330:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006334:	2b01      	cmp	r3, #1
 8006336:	d10d      	bne.n	8006354 <setStepperDir+0x80>
		stepper->dir = 1;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2201      	movs	r2, #1
 800633c:	721a      	strb	r2, [r3, #8]
		setPin(stepper->stepper_pins->GPIOx_dir, stepper->stepper_pins->GPIO_Pin_dir, PIN_RESET);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	6898      	ldr	r0, [r3, #8]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	899b      	ldrh	r3, [r3, #12]
 800634a:	2200      	movs	r2, #0
 800634c:	4619      	mov	r1, r3
 800634e:	f7ff fc15 	bl	8005b7c <setPin>
}
 8006352:	e00c      	b.n	800636e <setStepperDir+0x9a>
			stepper->dir = -1;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	22ff      	movs	r2, #255	@ 0xff
 8006358:	721a      	strb	r2, [r3, #8]
			setPin(stepper->stepper_pins->GPIOx_dir, stepper->stepper_pins->GPIO_Pin_dir, PIN_SET);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	6898      	ldr	r0, [r3, #8]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	899b      	ldrh	r3, [r3, #12]
 8006366:	2201      	movs	r2, #1
 8006368:	4619      	mov	r1, r3
 800636a:	f7ff fc07 	bl	8005b7c <setPin>
}
 800636e:	bf00      	nop
 8006370:	3708      	adds	r7, #8
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}

08006376 <enableStepper>:

/** Включение мотора
 */
void enableStepper(STEPPER_StructDef* stepper)
{
 8006376:	b580      	push	{r7, lr}
 8006378:	b082      	sub	sp, #8
 800637a:	af00      	add	r7, sp, #0
 800637c:	6078      	str	r0, [r7, #4]
	stepper->en = ON;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2201      	movs	r2, #1
 8006382:	725a      	strb	r2, [r3, #9]

	if(stepper->_globEn == false)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	7a9b      	ldrb	r3, [r3, #10]
 8006388:	b2db      	uxtb	r3, r3
 800638a:	f083 0301 	eor.w	r3, r3, #1
 800638e:	b2db      	uxtb	r3, r3
 8006390:	2b00      	cmp	r3, #0
 8006392:	d00a      	beq.n	80063aa <enableStepper+0x34>
	{
		setPin(stepper->stepper_pins->GPIOx_en, stepper->stepper_pins->GPIO_Pin_en, PIN_SET);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	6918      	ldr	r0, [r3, #16]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	8a9b      	ldrh	r3, [r3, #20]
 80063a0:	2201      	movs	r2, #1
 80063a2:	4619      	mov	r1, r3
 80063a4:	f7ff fbea 	bl	8005b7c <setPin>
	}
	else setPin(stepper->stepper_pins->GPIOx_en, stepper->stepper_pins->GPIO_Pin_en, PIN_RESET);
}
 80063a8:	e009      	b.n	80063be <enableStepper+0x48>
	else setPin(stepper->stepper_pins->GPIOx_en, stepper->stepper_pins->GPIO_Pin_en, PIN_RESET);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	6918      	ldr	r0, [r3, #16]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	8a9b      	ldrh	r3, [r3, #20]
 80063b6:	2200      	movs	r2, #0
 80063b8:	4619      	mov	r1, r3
 80063ba:	f7ff fbdf 	bl	8005b7c <setPin>
}
 80063be:	bf00      	nop
 80063c0:	3708      	adds	r7, #8
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}

080063c6 <disableStepper>:

/** Выключение мотора
 */
void disableStepper(STEPPER_StructDef* stepper)
{
 80063c6:	b580      	push	{r7, lr}
 80063c8:	b082      	sub	sp, #8
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	6078      	str	r0, [r7, #4]
	stepper->en = OFF;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2200      	movs	r2, #0
 80063d2:	725a      	strb	r2, [r3, #9]

	if(stepper->_globEn == false)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	7a9b      	ldrb	r3, [r3, #10]
 80063d8:	b2db      	uxtb	r3, r3
 80063da:	f083 0301 	eor.w	r3, r3, #1
 80063de:	b2db      	uxtb	r3, r3
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d00a      	beq.n	80063fa <disableStepper+0x34>
	{
		setPin(stepper->stepper_pins->GPIOx_en, stepper->stepper_pins->GPIO_Pin_en, PIN_RESET);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	6918      	ldr	r0, [r3, #16]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	8a9b      	ldrh	r3, [r3, #20]
 80063f0:	2200      	movs	r2, #0
 80063f2:	4619      	mov	r1, r3
 80063f4:	f7ff fbc2 	bl	8005b7c <setPin>
	}
	else setPin(stepper->stepper_pins->GPIOx_en, stepper->stepper_pins->GPIO_Pin_en, PIN_SET);
}
 80063f8:	e009      	b.n	800640e <disableStepper+0x48>
	else setPin(stepper->stepper_pins->GPIOx_en, stepper->stepper_pins->GPIO_Pin_en, PIN_SET);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	6918      	ldr	r0, [r3, #16]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	8a9b      	ldrh	r3, [r3, #20]
 8006406:	2201      	movs	r2, #1
 8006408:	4619      	mov	r1, r3
 800640a:	f7ff fbb7 	bl	8005b7c <setPin>
}
 800640e:	bf00      	nop
 8006410:	3708      	adds	r7, #8
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}
	...

08006418 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006418:	b480      	push	{r7}
 800641a:	b083      	sub	sp, #12
 800641c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800641e:	2300      	movs	r3, #0
 8006420:	607b      	str	r3, [r7, #4]
 8006422:	4b10      	ldr	r3, [pc, #64]	@ (8006464 <HAL_MspInit+0x4c>)
 8006424:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006426:	4a0f      	ldr	r2, [pc, #60]	@ (8006464 <HAL_MspInit+0x4c>)
 8006428:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800642c:	6453      	str	r3, [r2, #68]	@ 0x44
 800642e:	4b0d      	ldr	r3, [pc, #52]	@ (8006464 <HAL_MspInit+0x4c>)
 8006430:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006432:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006436:	607b      	str	r3, [r7, #4]
 8006438:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800643a:	2300      	movs	r3, #0
 800643c:	603b      	str	r3, [r7, #0]
 800643e:	4b09      	ldr	r3, [pc, #36]	@ (8006464 <HAL_MspInit+0x4c>)
 8006440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006442:	4a08      	ldr	r2, [pc, #32]	@ (8006464 <HAL_MspInit+0x4c>)
 8006444:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006448:	6413      	str	r3, [r2, #64]	@ 0x40
 800644a:	4b06      	ldr	r3, [pc, #24]	@ (8006464 <HAL_MspInit+0x4c>)
 800644c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800644e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006452:	603b      	str	r3, [r7, #0]
 8006454:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006456:	bf00      	nop
 8006458:	370c      	adds	r7, #12
 800645a:	46bd      	mov	sp, r7
 800645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006460:	4770      	bx	lr
 8006462:	bf00      	nop
 8006464:	40023800 	.word	0x40023800

08006468 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b08a      	sub	sp, #40	@ 0x28
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006470:	f107 0314 	add.w	r3, r7, #20
 8006474:	2200      	movs	r2, #0
 8006476:	601a      	str	r2, [r3, #0]
 8006478:	605a      	str	r2, [r3, #4]
 800647a:	609a      	str	r2, [r3, #8]
 800647c:	60da      	str	r2, [r3, #12]
 800647e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a17      	ldr	r2, [pc, #92]	@ (80064e4 <HAL_ADC_MspInit+0x7c>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d127      	bne.n	80064da <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800648a:	2300      	movs	r3, #0
 800648c:	613b      	str	r3, [r7, #16]
 800648e:	4b16      	ldr	r3, [pc, #88]	@ (80064e8 <HAL_ADC_MspInit+0x80>)
 8006490:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006492:	4a15      	ldr	r2, [pc, #84]	@ (80064e8 <HAL_ADC_MspInit+0x80>)
 8006494:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006498:	6453      	str	r3, [r2, #68]	@ 0x44
 800649a:	4b13      	ldr	r3, [pc, #76]	@ (80064e8 <HAL_ADC_MspInit+0x80>)
 800649c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800649e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064a2:	613b      	str	r3, [r7, #16]
 80064a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80064a6:	2300      	movs	r3, #0
 80064a8:	60fb      	str	r3, [r7, #12]
 80064aa:	4b0f      	ldr	r3, [pc, #60]	@ (80064e8 <HAL_ADC_MspInit+0x80>)
 80064ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064ae:	4a0e      	ldr	r2, [pc, #56]	@ (80064e8 <HAL_ADC_MspInit+0x80>)
 80064b0:	f043 0301 	orr.w	r3, r3, #1
 80064b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80064b6:	4b0c      	ldr	r3, [pc, #48]	@ (80064e8 <HAL_ADC_MspInit+0x80>)
 80064b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064ba:	f003 0301 	and.w	r3, r3, #1
 80064be:	60fb      	str	r3, [r7, #12]
 80064c0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 80064c2:	2309      	movs	r3, #9
 80064c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80064c6:	2303      	movs	r3, #3
 80064c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064ca:	2300      	movs	r3, #0
 80064cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80064ce:	f107 0314 	add.w	r3, r7, #20
 80064d2:	4619      	mov	r1, r3
 80064d4:	4805      	ldr	r0, [pc, #20]	@ (80064ec <HAL_ADC_MspInit+0x84>)
 80064d6:	f002 fb91 	bl	8008bfc <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80064da:	bf00      	nop
 80064dc:	3728      	adds	r7, #40	@ 0x28
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}
 80064e2:	bf00      	nop
 80064e4:	40012000 	.word	0x40012000
 80064e8:	40023800 	.word	0x40023800
 80064ec:	40020000 	.word	0x40020000

080064f0 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b08a      	sub	sp, #40	@ 0x28
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80064f8:	f107 0314 	add.w	r3, r7, #20
 80064fc:	2200      	movs	r2, #0
 80064fe:	601a      	str	r2, [r3, #0]
 8006500:	605a      	str	r2, [r3, #4]
 8006502:	609a      	str	r2, [r3, #8]
 8006504:	60da      	str	r2, [r3, #12]
 8006506:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a19      	ldr	r2, [pc, #100]	@ (8006574 <HAL_CAN_MspInit+0x84>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d12b      	bne.n	800656a <HAL_CAN_MspInit+0x7a>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8006512:	2300      	movs	r3, #0
 8006514:	613b      	str	r3, [r7, #16]
 8006516:	4b18      	ldr	r3, [pc, #96]	@ (8006578 <HAL_CAN_MspInit+0x88>)
 8006518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800651a:	4a17      	ldr	r2, [pc, #92]	@ (8006578 <HAL_CAN_MspInit+0x88>)
 800651c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006520:	6413      	str	r3, [r2, #64]	@ 0x40
 8006522:	4b15      	ldr	r3, [pc, #84]	@ (8006578 <HAL_CAN_MspInit+0x88>)
 8006524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006526:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800652a:	613b      	str	r3, [r7, #16]
 800652c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800652e:	2300      	movs	r3, #0
 8006530:	60fb      	str	r3, [r7, #12]
 8006532:	4b11      	ldr	r3, [pc, #68]	@ (8006578 <HAL_CAN_MspInit+0x88>)
 8006534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006536:	4a10      	ldr	r2, [pc, #64]	@ (8006578 <HAL_CAN_MspInit+0x88>)
 8006538:	f043 0308 	orr.w	r3, r3, #8
 800653c:	6313      	str	r3, [r2, #48]	@ 0x30
 800653e:	4b0e      	ldr	r3, [pc, #56]	@ (8006578 <HAL_CAN_MspInit+0x88>)
 8006540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006542:	f003 0308 	and.w	r3, r3, #8
 8006546:	60fb      	str	r3, [r7, #12]
 8006548:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800654a:	2303      	movs	r3, #3
 800654c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800654e:	2302      	movs	r3, #2
 8006550:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006552:	2300      	movs	r3, #0
 8006554:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006556:	2303      	movs	r3, #3
 8006558:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800655a:	2309      	movs	r3, #9
 800655c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800655e:	f107 0314 	add.w	r3, r7, #20
 8006562:	4619      	mov	r1, r3
 8006564:	4805      	ldr	r0, [pc, #20]	@ (800657c <HAL_CAN_MspInit+0x8c>)
 8006566:	f002 fb49 	bl	8008bfc <HAL_GPIO_Init>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 800656a:	bf00      	nop
 800656c:	3728      	adds	r7, #40	@ 0x28
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}
 8006572:	bf00      	nop
 8006574:	40006400 	.word	0x40006400
 8006578:	40023800 	.word	0x40023800
 800657c:	40020c00 	.word	0x40020c00

08006580 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b08a      	sub	sp, #40	@ 0x28
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006588:	f107 0314 	add.w	r3, r7, #20
 800658c:	2200      	movs	r2, #0
 800658e:	601a      	str	r2, [r3, #0]
 8006590:	605a      	str	r2, [r3, #4]
 8006592:	609a      	str	r2, [r3, #8]
 8006594:	60da      	str	r2, [r3, #12]
 8006596:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a17      	ldr	r2, [pc, #92]	@ (80065fc <HAL_DAC_MspInit+0x7c>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d127      	bne.n	80065f2 <HAL_DAC_MspInit+0x72>
  {
    /* USER CODE BEGIN DAC_MspInit 0 */

    /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80065a2:	2300      	movs	r3, #0
 80065a4:	613b      	str	r3, [r7, #16]
 80065a6:	4b16      	ldr	r3, [pc, #88]	@ (8006600 <HAL_DAC_MspInit+0x80>)
 80065a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065aa:	4a15      	ldr	r2, [pc, #84]	@ (8006600 <HAL_DAC_MspInit+0x80>)
 80065ac:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80065b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80065b2:	4b13      	ldr	r3, [pc, #76]	@ (8006600 <HAL_DAC_MspInit+0x80>)
 80065b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065b6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80065ba:	613b      	str	r3, [r7, #16]
 80065bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80065be:	2300      	movs	r3, #0
 80065c0:	60fb      	str	r3, [r7, #12]
 80065c2:	4b0f      	ldr	r3, [pc, #60]	@ (8006600 <HAL_DAC_MspInit+0x80>)
 80065c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065c6:	4a0e      	ldr	r2, [pc, #56]	@ (8006600 <HAL_DAC_MspInit+0x80>)
 80065c8:	f043 0301 	orr.w	r3, r3, #1
 80065cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80065ce:	4b0c      	ldr	r3, [pc, #48]	@ (8006600 <HAL_DAC_MspInit+0x80>)
 80065d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065d2:	f003 0301 	and.w	r3, r3, #1
 80065d6:	60fb      	str	r3, [r7, #12]
 80065d8:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80065da:	2330      	movs	r3, #48	@ 0x30
 80065dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80065de:	2303      	movs	r3, #3
 80065e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065e2:	2300      	movs	r3, #0
 80065e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80065e6:	f107 0314 	add.w	r3, r7, #20
 80065ea:	4619      	mov	r1, r3
 80065ec:	4805      	ldr	r0, [pc, #20]	@ (8006604 <HAL_DAC_MspInit+0x84>)
 80065ee:	f002 fb05 	bl	8008bfc <HAL_GPIO_Init>

    /* USER CODE END DAC_MspInit 1 */

  }

}
 80065f2:	bf00      	nop
 80065f4:	3728      	adds	r7, #40	@ 0x28
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}
 80065fa:	bf00      	nop
 80065fc:	40007400 	.word	0x40007400
 8006600:	40023800 	.word	0x40023800
 8006604:	40020000 	.word	0x40020000

08006608 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b08a      	sub	sp, #40	@ 0x28
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006610:	f107 0314 	add.w	r3, r7, #20
 8006614:	2200      	movs	r2, #0
 8006616:	601a      	str	r2, [r3, #0]
 8006618:	605a      	str	r2, [r3, #4]
 800661a:	609a      	str	r2, [r3, #8]
 800661c:	60da      	str	r2, [r3, #12]
 800661e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a19      	ldr	r2, [pc, #100]	@ (800668c <HAL_I2C_MspInit+0x84>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d12b      	bne.n	8006682 <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800662a:	2300      	movs	r3, #0
 800662c:	613b      	str	r3, [r7, #16]
 800662e:	4b18      	ldr	r3, [pc, #96]	@ (8006690 <HAL_I2C_MspInit+0x88>)
 8006630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006632:	4a17      	ldr	r2, [pc, #92]	@ (8006690 <HAL_I2C_MspInit+0x88>)
 8006634:	f043 0302 	orr.w	r3, r3, #2
 8006638:	6313      	str	r3, [r2, #48]	@ 0x30
 800663a:	4b15      	ldr	r3, [pc, #84]	@ (8006690 <HAL_I2C_MspInit+0x88>)
 800663c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800663e:	f003 0302 	and.w	r3, r3, #2
 8006642:	613b      	str	r3, [r7, #16]
 8006644:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006646:	23c0      	movs	r3, #192	@ 0xc0
 8006648:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800664a:	2312      	movs	r3, #18
 800664c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800664e:	2300      	movs	r3, #0
 8006650:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006652:	2303      	movs	r3, #3
 8006654:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006656:	2304      	movs	r3, #4
 8006658:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800665a:	f107 0314 	add.w	r3, r7, #20
 800665e:	4619      	mov	r1, r3
 8006660:	480c      	ldr	r0, [pc, #48]	@ (8006694 <HAL_I2C_MspInit+0x8c>)
 8006662:	f002 facb 	bl	8008bfc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006666:	2300      	movs	r3, #0
 8006668:	60fb      	str	r3, [r7, #12]
 800666a:	4b09      	ldr	r3, [pc, #36]	@ (8006690 <HAL_I2C_MspInit+0x88>)
 800666c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800666e:	4a08      	ldr	r2, [pc, #32]	@ (8006690 <HAL_I2C_MspInit+0x88>)
 8006670:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006674:	6413      	str	r3, [r2, #64]	@ 0x40
 8006676:	4b06      	ldr	r3, [pc, #24]	@ (8006690 <HAL_I2C_MspInit+0x88>)
 8006678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800667a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800667e:	60fb      	str	r3, [r7, #12]
 8006680:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8006682:	bf00      	nop
 8006684:	3728      	adds	r7, #40	@ 0x28
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}
 800668a:	bf00      	nop
 800668c:	40005400 	.word	0x40005400
 8006690:	40023800 	.word	0x40023800
 8006694:	40020400 	.word	0x40020400

08006698 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b08a      	sub	sp, #40	@ 0x28
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80066a0:	f107 0314 	add.w	r3, r7, #20
 80066a4:	2200      	movs	r2, #0
 80066a6:	601a      	str	r2, [r3, #0]
 80066a8:	605a      	str	r2, [r3, #4]
 80066aa:	609a      	str	r2, [r3, #8]
 80066ac:	60da      	str	r2, [r3, #12]
 80066ae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a19      	ldr	r2, [pc, #100]	@ (800671c <HAL_SPI_MspInit+0x84>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d12c      	bne.n	8006714 <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI3_MspInit 0 */

    /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80066ba:	2300      	movs	r3, #0
 80066bc:	613b      	str	r3, [r7, #16]
 80066be:	4b18      	ldr	r3, [pc, #96]	@ (8006720 <HAL_SPI_MspInit+0x88>)
 80066c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066c2:	4a17      	ldr	r2, [pc, #92]	@ (8006720 <HAL_SPI_MspInit+0x88>)
 80066c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80066ca:	4b15      	ldr	r3, [pc, #84]	@ (8006720 <HAL_SPI_MspInit+0x88>)
 80066cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066ce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80066d2:	613b      	str	r3, [r7, #16]
 80066d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80066d6:	2300      	movs	r3, #0
 80066d8:	60fb      	str	r3, [r7, #12]
 80066da:	4b11      	ldr	r3, [pc, #68]	@ (8006720 <HAL_SPI_MspInit+0x88>)
 80066dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066de:	4a10      	ldr	r2, [pc, #64]	@ (8006720 <HAL_SPI_MspInit+0x88>)
 80066e0:	f043 0304 	orr.w	r3, r3, #4
 80066e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80066e6:	4b0e      	ldr	r3, [pc, #56]	@ (8006720 <HAL_SPI_MspInit+0x88>)
 80066e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066ea:	f003 0304 	and.w	r3, r3, #4
 80066ee:	60fb      	str	r3, [r7, #12]
 80066f0:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80066f2:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80066f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066f8:	2302      	movs	r3, #2
 80066fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066fc:	2300      	movs	r3, #0
 80066fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006700:	2303      	movs	r3, #3
 8006702:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8006704:	2306      	movs	r3, #6
 8006706:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006708:	f107 0314 	add.w	r3, r7, #20
 800670c:	4619      	mov	r1, r3
 800670e:	4805      	ldr	r0, [pc, #20]	@ (8006724 <HAL_SPI_MspInit+0x8c>)
 8006710:	f002 fa74 	bl	8008bfc <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8006714:	bf00      	nop
 8006716:	3728      	adds	r7, #40	@ 0x28
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}
 800671c:	40003c00 	.word	0x40003c00
 8006720:	40023800 	.word	0x40023800
 8006724:	40020800 	.word	0x40020800

08006728 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b086      	sub	sp, #24
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a26      	ldr	r2, [pc, #152]	@ (80067d0 <HAL_TIM_Base_MspInit+0xa8>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d116      	bne.n	8006768 <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800673a:	2300      	movs	r3, #0
 800673c:	617b      	str	r3, [r7, #20]
 800673e:	4b25      	ldr	r3, [pc, #148]	@ (80067d4 <HAL_TIM_Base_MspInit+0xac>)
 8006740:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006742:	4a24      	ldr	r2, [pc, #144]	@ (80067d4 <HAL_TIM_Base_MspInit+0xac>)
 8006744:	f043 0301 	orr.w	r3, r3, #1
 8006748:	6453      	str	r3, [r2, #68]	@ 0x44
 800674a:	4b22      	ldr	r3, [pc, #136]	@ (80067d4 <HAL_TIM_Base_MspInit+0xac>)
 800674c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800674e:	f003 0301 	and.w	r3, r3, #1
 8006752:	617b      	str	r3, [r7, #20]
 8006754:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8006756:	2200      	movs	r2, #0
 8006758:	2100      	movs	r1, #0
 800675a:	2019      	movs	r0, #25
 800675c:	f001 f869 	bl	8007832 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8006760:	2019      	movs	r0, #25
 8006762:	f001 f882 	bl	800786a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM13_MspInit 1 */

    /* USER CODE END TIM13_MspInit 1 */
  }

}
 8006766:	e02e      	b.n	80067c6 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM2)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006770:	d10e      	bne.n	8006790 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006772:	2300      	movs	r3, #0
 8006774:	613b      	str	r3, [r7, #16]
 8006776:	4b17      	ldr	r3, [pc, #92]	@ (80067d4 <HAL_TIM_Base_MspInit+0xac>)
 8006778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800677a:	4a16      	ldr	r2, [pc, #88]	@ (80067d4 <HAL_TIM_Base_MspInit+0xac>)
 800677c:	f043 0301 	orr.w	r3, r3, #1
 8006780:	6413      	str	r3, [r2, #64]	@ 0x40
 8006782:	4b14      	ldr	r3, [pc, #80]	@ (80067d4 <HAL_TIM_Base_MspInit+0xac>)
 8006784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006786:	f003 0301 	and.w	r3, r3, #1
 800678a:	613b      	str	r3, [r7, #16]
 800678c:	693b      	ldr	r3, [r7, #16]
}
 800678e:	e01a      	b.n	80067c6 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM13)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4a10      	ldr	r2, [pc, #64]	@ (80067d8 <HAL_TIM_Base_MspInit+0xb0>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d115      	bne.n	80067c6 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800679a:	2300      	movs	r3, #0
 800679c:	60fb      	str	r3, [r7, #12]
 800679e:	4b0d      	ldr	r3, [pc, #52]	@ (80067d4 <HAL_TIM_Base_MspInit+0xac>)
 80067a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067a2:	4a0c      	ldr	r2, [pc, #48]	@ (80067d4 <HAL_TIM_Base_MspInit+0xac>)
 80067a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80067aa:	4b0a      	ldr	r3, [pc, #40]	@ (80067d4 <HAL_TIM_Base_MspInit+0xac>)
 80067ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067b2:	60fb      	str	r3, [r7, #12]
 80067b4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80067b6:	2200      	movs	r2, #0
 80067b8:	2100      	movs	r1, #0
 80067ba:	202c      	movs	r0, #44	@ 0x2c
 80067bc:	f001 f839 	bl	8007832 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80067c0:	202c      	movs	r0, #44	@ 0x2c
 80067c2:	f001 f852 	bl	800786a <HAL_NVIC_EnableIRQ>
}
 80067c6:	bf00      	nop
 80067c8:	3718      	adds	r7, #24
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}
 80067ce:	bf00      	nop
 80067d0:	40010000 	.word	0x40010000
 80067d4:	40023800 	.word	0x40023800
 80067d8:	40001c00 	.word	0x40001c00

080067dc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b088      	sub	sp, #32
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80067e4:	f107 030c 	add.w	r3, r7, #12
 80067e8:	2200      	movs	r2, #0
 80067ea:	601a      	str	r2, [r3, #0]
 80067ec:	605a      	str	r2, [r3, #4]
 80067ee:	609a      	str	r2, [r3, #8]
 80067f0:	60da      	str	r2, [r3, #12]
 80067f2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM13)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a12      	ldr	r2, [pc, #72]	@ (8006844 <HAL_TIM_MspPostInit+0x68>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d11d      	bne.n	800683a <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM13_MspPostInit 0 */

    /* USER CODE END TIM13_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80067fe:	2300      	movs	r3, #0
 8006800:	60bb      	str	r3, [r7, #8]
 8006802:	4b11      	ldr	r3, [pc, #68]	@ (8006848 <HAL_TIM_MspPostInit+0x6c>)
 8006804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006806:	4a10      	ldr	r2, [pc, #64]	@ (8006848 <HAL_TIM_MspPostInit+0x6c>)
 8006808:	f043 0301 	orr.w	r3, r3, #1
 800680c:	6313      	str	r3, [r2, #48]	@ 0x30
 800680e:	4b0e      	ldr	r3, [pc, #56]	@ (8006848 <HAL_TIM_MspPostInit+0x6c>)
 8006810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006812:	f003 0301 	and.w	r3, r3, #1
 8006816:	60bb      	str	r3, [r7, #8]
 8006818:	68bb      	ldr	r3, [r7, #8]
    /**TIM13 GPIO Configuration
    PA6     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GATE_LASER_TIM13_CH1_Pin;
 800681a:	2340      	movs	r3, #64	@ 0x40
 800681c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800681e:	2302      	movs	r3, #2
 8006820:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006822:	2300      	movs	r3, #0
 8006824:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006826:	2300      	movs	r3, #0
 8006828:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 800682a:	2309      	movs	r3, #9
 800682c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GATE_LASER_TIM13_CH1_GPIO_Port, &GPIO_InitStruct);
 800682e:	f107 030c 	add.w	r3, r7, #12
 8006832:	4619      	mov	r1, r3
 8006834:	4805      	ldr	r0, [pc, #20]	@ (800684c <HAL_TIM_MspPostInit+0x70>)
 8006836:	f002 f9e1 	bl	8008bfc <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM13_MspPostInit 1 */

    /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 800683a:	bf00      	nop
 800683c:	3720      	adds	r7, #32
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}
 8006842:	bf00      	nop
 8006844:	40001c00 	.word	0x40001c00
 8006848:	40023800 	.word	0x40023800
 800684c:	40020000 	.word	0x40020000

08006850 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b08c      	sub	sp, #48	@ 0x30
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006858:	f107 031c 	add.w	r3, r7, #28
 800685c:	2200      	movs	r2, #0
 800685e:	601a      	str	r2, [r3, #0]
 8006860:	605a      	str	r2, [r3, #4]
 8006862:	609a      	str	r2, [r3, #8]
 8006864:	60da      	str	r2, [r3, #12]
 8006866:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a33      	ldr	r2, [pc, #204]	@ (800693c <HAL_UART_MspInit+0xec>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d12d      	bne.n	80068ce <HAL_UART_MspInit+0x7e>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006872:	2300      	movs	r3, #0
 8006874:	61bb      	str	r3, [r7, #24]
 8006876:	4b32      	ldr	r3, [pc, #200]	@ (8006940 <HAL_UART_MspInit+0xf0>)
 8006878:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800687a:	4a31      	ldr	r2, [pc, #196]	@ (8006940 <HAL_UART_MspInit+0xf0>)
 800687c:	f043 0310 	orr.w	r3, r3, #16
 8006880:	6453      	str	r3, [r2, #68]	@ 0x44
 8006882:	4b2f      	ldr	r3, [pc, #188]	@ (8006940 <HAL_UART_MspInit+0xf0>)
 8006884:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006886:	f003 0310 	and.w	r3, r3, #16
 800688a:	61bb      	str	r3, [r7, #24]
 800688c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800688e:	2300      	movs	r3, #0
 8006890:	617b      	str	r3, [r7, #20]
 8006892:	4b2b      	ldr	r3, [pc, #172]	@ (8006940 <HAL_UART_MspInit+0xf0>)
 8006894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006896:	4a2a      	ldr	r2, [pc, #168]	@ (8006940 <HAL_UART_MspInit+0xf0>)
 8006898:	f043 0301 	orr.w	r3, r3, #1
 800689c:	6313      	str	r3, [r2, #48]	@ 0x30
 800689e:	4b28      	ldr	r3, [pc, #160]	@ (8006940 <HAL_UART_MspInit+0xf0>)
 80068a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068a2:	f003 0301 	and.w	r3, r3, #1
 80068a6:	617b      	str	r3, [r7, #20]
 80068a8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80068aa:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80068ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068b0:	2302      	movs	r3, #2
 80068b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068b4:	2300      	movs	r3, #0
 80068b6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80068b8:	2303      	movs	r3, #3
 80068ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80068bc:	2307      	movs	r3, #7
 80068be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80068c0:	f107 031c 	add.w	r3, r7, #28
 80068c4:	4619      	mov	r1, r3
 80068c6:	481f      	ldr	r0, [pc, #124]	@ (8006944 <HAL_UART_MspInit+0xf4>)
 80068c8:	f002 f998 	bl	8008bfc <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 80068cc:	e031      	b.n	8006932 <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART3)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a1d      	ldr	r2, [pc, #116]	@ (8006948 <HAL_UART_MspInit+0xf8>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d12c      	bne.n	8006932 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 80068d8:	2300      	movs	r3, #0
 80068da:	613b      	str	r3, [r7, #16]
 80068dc:	4b18      	ldr	r3, [pc, #96]	@ (8006940 <HAL_UART_MspInit+0xf0>)
 80068de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068e0:	4a17      	ldr	r2, [pc, #92]	@ (8006940 <HAL_UART_MspInit+0xf0>)
 80068e2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80068e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80068e8:	4b15      	ldr	r3, [pc, #84]	@ (8006940 <HAL_UART_MspInit+0xf0>)
 80068ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068ec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80068f0:	613b      	str	r3, [r7, #16]
 80068f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80068f4:	2300      	movs	r3, #0
 80068f6:	60fb      	str	r3, [r7, #12]
 80068f8:	4b11      	ldr	r3, [pc, #68]	@ (8006940 <HAL_UART_MspInit+0xf0>)
 80068fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068fc:	4a10      	ldr	r2, [pc, #64]	@ (8006940 <HAL_UART_MspInit+0xf0>)
 80068fe:	f043 0308 	orr.w	r3, r3, #8
 8006902:	6313      	str	r3, [r2, #48]	@ 0x30
 8006904:	4b0e      	ldr	r3, [pc, #56]	@ (8006940 <HAL_UART_MspInit+0xf0>)
 8006906:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006908:	f003 0308 	and.w	r3, r3, #8
 800690c:	60fb      	str	r3, [r7, #12]
 800690e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8006910:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8006914:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006916:	2302      	movs	r3, #2
 8006918:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800691a:	2300      	movs	r3, #0
 800691c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800691e:	2303      	movs	r3, #3
 8006920:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006922:	2307      	movs	r3, #7
 8006924:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006926:	f107 031c 	add.w	r3, r7, #28
 800692a:	4619      	mov	r1, r3
 800692c:	4807      	ldr	r0, [pc, #28]	@ (800694c <HAL_UART_MspInit+0xfc>)
 800692e:	f002 f965 	bl	8008bfc <HAL_GPIO_Init>
}
 8006932:	bf00      	nop
 8006934:	3730      	adds	r7, #48	@ 0x30
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}
 800693a:	bf00      	nop
 800693c:	40011000 	.word	0x40011000
 8006940:	40023800 	.word	0x40023800
 8006944:	40020000 	.word	0x40020000
 8006948:	40004800 	.word	0x40004800
 800694c:	40020c00 	.word	0x40020c00

08006950 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b08a      	sub	sp, #40	@ 0x28
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006958:	f107 0314 	add.w	r3, r7, #20
 800695c:	2200      	movs	r2, #0
 800695e:	601a      	str	r2, [r3, #0]
 8006960:	605a      	str	r2, [r3, #4]
 8006962:	609a      	str	r2, [r3, #8]
 8006964:	60da      	str	r2, [r3, #12]
 8006966:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006970:	d132      	bne.n	80069d8 <HAL_PCD_MspInit+0x88>
  {
    /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

    /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006972:	2300      	movs	r3, #0
 8006974:	613b      	str	r3, [r7, #16]
 8006976:	4b1a      	ldr	r3, [pc, #104]	@ (80069e0 <HAL_PCD_MspInit+0x90>)
 8006978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800697a:	4a19      	ldr	r2, [pc, #100]	@ (80069e0 <HAL_PCD_MspInit+0x90>)
 800697c:	f043 0301 	orr.w	r3, r3, #1
 8006980:	6313      	str	r3, [r2, #48]	@ 0x30
 8006982:	4b17      	ldr	r3, [pc, #92]	@ (80069e0 <HAL_PCD_MspInit+0x90>)
 8006984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006986:	f003 0301 	and.w	r3, r3, #1
 800698a:	613b      	str	r3, [r7, #16]
 800698c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800698e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8006992:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006994:	2302      	movs	r3, #2
 8006996:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006998:	2300      	movs	r3, #0
 800699a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800699c:	2303      	movs	r3, #3
 800699e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80069a0:	230a      	movs	r3, #10
 80069a2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80069a4:	f107 0314 	add.w	r3, r7, #20
 80069a8:	4619      	mov	r1, r3
 80069aa:	480e      	ldr	r0, [pc, #56]	@ (80069e4 <HAL_PCD_MspInit+0x94>)
 80069ac:	f002 f926 	bl	8008bfc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80069b0:	4b0b      	ldr	r3, [pc, #44]	@ (80069e0 <HAL_PCD_MspInit+0x90>)
 80069b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069b4:	4a0a      	ldr	r2, [pc, #40]	@ (80069e0 <HAL_PCD_MspInit+0x90>)
 80069b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069ba:	6353      	str	r3, [r2, #52]	@ 0x34
 80069bc:	2300      	movs	r3, #0
 80069be:	60fb      	str	r3, [r7, #12]
 80069c0:	4b07      	ldr	r3, [pc, #28]	@ (80069e0 <HAL_PCD_MspInit+0x90>)
 80069c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069c4:	4a06      	ldr	r2, [pc, #24]	@ (80069e0 <HAL_PCD_MspInit+0x90>)
 80069c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80069ca:	6453      	str	r3, [r2, #68]	@ 0x44
 80069cc:	4b04      	ldr	r3, [pc, #16]	@ (80069e0 <HAL_PCD_MspInit+0x90>)
 80069ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80069d4:	60fb      	str	r3, [r7, #12]
 80069d6:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 80069d8:	bf00      	nop
 80069da:	3728      	adds	r7, #40	@ 0x28
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}
 80069e0:	40023800 	.word	0x40023800
 80069e4:	40020000 	.word	0x40020000

080069e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80069e8:	b480      	push	{r7}
 80069ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80069ec:	bf00      	nop
 80069ee:	e7fd      	b.n	80069ec <NMI_Handler+0x4>

080069f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80069f0:	b480      	push	{r7}
 80069f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80069f4:	bf00      	nop
 80069f6:	e7fd      	b.n	80069f4 <HardFault_Handler+0x4>

080069f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80069f8:	b480      	push	{r7}
 80069fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80069fc:	bf00      	nop
 80069fe:	e7fd      	b.n	80069fc <MemManage_Handler+0x4>

08006a00 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006a00:	b480      	push	{r7}
 8006a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006a04:	bf00      	nop
 8006a06:	e7fd      	b.n	8006a04 <BusFault_Handler+0x4>

08006a08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006a0c:	bf00      	nop
 8006a0e:	e7fd      	b.n	8006a0c <UsageFault_Handler+0x4>

08006a10 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006a10:	b480      	push	{r7}
 8006a12:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006a14:	bf00      	nop
 8006a16:	46bd      	mov	sp, r7
 8006a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1c:	4770      	bx	lr

08006a1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006a1e:	b480      	push	{r7}
 8006a20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006a22:	bf00      	nop
 8006a24:	46bd      	mov	sp, r7
 8006a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2a:	4770      	bx	lr

08006a2c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006a30:	bf00      	nop
 8006a32:	46bd      	mov	sp, r7
 8006a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a38:	4770      	bx	lr

08006a3a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006a3a:	b580      	push	{r7, lr}
 8006a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006a3e:	f000 fa7b 	bl	8006f38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006a42:	bf00      	nop
 8006a44:	bd80      	pop	{r7, pc}
	...

08006a48 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8006a4c:	4804      	ldr	r0, [pc, #16]	@ (8006a60 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8006a4e:	f003 fb61 	bl	800a114 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */
  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_9);
 8006a52:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006a56:	4803      	ldr	r0, [pc, #12]	@ (8006a64 <TIM1_UP_TIM10_IRQHandler+0x1c>)
 8006a58:	f002 fa85 	bl	8008f66 <HAL_GPIO_TogglePin>
  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8006a5c:	bf00      	nop
 8006a5e:	bd80      	pop	{r7, pc}
 8006a60:	2000d968 	.word	0x2000d968
 8006a64:	40021000 	.word	0x40021000

08006a68 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8006a6c:	4802      	ldr	r0, [pc, #8]	@ (8006a78 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8006a6e:	f003 fb51 	bl	800a114 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8006a72:	bf00      	nop
 8006a74:	bd80      	pop	{r7, pc}
 8006a76:	bf00      	nop
 8006a78:	2000d9f8 	.word	0x2000d9f8

08006a7c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	af00      	add	r7, sp, #0
  return 1;
 8006a80:	2301      	movs	r3, #1
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	46bd      	mov	sp, r7
 8006a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8a:	4770      	bx	lr

08006a8c <_kill>:

int _kill(int pid, int sig)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b083      	sub	sp, #12
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
 8006a94:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8006a96:	4b05      	ldr	r3, [pc, #20]	@ (8006aac <_kill+0x20>)
 8006a98:	2216      	movs	r2, #22
 8006a9a:	601a      	str	r2, [r3, #0]
  return -1;
 8006a9c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	370c      	adds	r7, #12
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aaa:	4770      	bx	lr
 8006aac:	200154e4 	.word	0x200154e4

08006ab0 <_exit>:

void _exit (int status)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b082      	sub	sp, #8
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8006ab8:	f04f 31ff 	mov.w	r1, #4294967295
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f7ff ffe5 	bl	8006a8c <_kill>
  while (1) {}    /* Make sure we hang here */
 8006ac2:	bf00      	nop
 8006ac4:	e7fd      	b.n	8006ac2 <_exit+0x12>

08006ac6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006ac6:	b580      	push	{r7, lr}
 8006ac8:	b086      	sub	sp, #24
 8006aca:	af00      	add	r7, sp, #0
 8006acc:	60f8      	str	r0, [r7, #12]
 8006ace:	60b9      	str	r1, [r7, #8]
 8006ad0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	617b      	str	r3, [r7, #20]
 8006ad6:	e00a      	b.n	8006aee <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8006ad8:	f3af 8000 	nop.w
 8006adc:	4601      	mov	r1, r0
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	1c5a      	adds	r2, r3, #1
 8006ae2:	60ba      	str	r2, [r7, #8]
 8006ae4:	b2ca      	uxtb	r2, r1
 8006ae6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	3301      	adds	r3, #1
 8006aec:	617b      	str	r3, [r7, #20]
 8006aee:	697a      	ldr	r2, [r7, #20]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	429a      	cmp	r2, r3
 8006af4:	dbf0      	blt.n	8006ad8 <_read+0x12>
  }

  return len;
 8006af6:	687b      	ldr	r3, [r7, #4]
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3718      	adds	r7, #24
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}

08006b00 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b086      	sub	sp, #24
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	60f8      	str	r0, [r7, #12]
 8006b08:	60b9      	str	r1, [r7, #8]
 8006b0a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	617b      	str	r3, [r7, #20]
 8006b10:	e009      	b.n	8006b26 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	1c5a      	adds	r2, r3, #1
 8006b16:	60ba      	str	r2, [r7, #8]
 8006b18:	781b      	ldrb	r3, [r3, #0]
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	3301      	adds	r3, #1
 8006b24:	617b      	str	r3, [r7, #20]
 8006b26:	697a      	ldr	r2, [r7, #20]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	429a      	cmp	r2, r3
 8006b2c:	dbf1      	blt.n	8006b12 <_write+0x12>
  }
  return len;
 8006b2e:	687b      	ldr	r3, [r7, #4]
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	3718      	adds	r7, #24
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}

08006b38 <_close>:

int _close(int file)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b083      	sub	sp, #12
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8006b40:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	370c      	adds	r7, #12
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4e:	4770      	bx	lr

08006b50 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006b50:	b480      	push	{r7}
 8006b52:	b083      	sub	sp, #12
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
 8006b58:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006b60:	605a      	str	r2, [r3, #4]
  return 0;
 8006b62:	2300      	movs	r3, #0
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	370c      	adds	r7, #12
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6e:	4770      	bx	lr

08006b70 <_isatty>:

int _isatty(int file)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b083      	sub	sp, #12
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8006b78:	2301      	movs	r3, #1
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	370c      	adds	r7, #12
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b84:	4770      	bx	lr

08006b86 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006b86:	b480      	push	{r7}
 8006b88:	b085      	sub	sp, #20
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	60f8      	str	r0, [r7, #12]
 8006b8e:	60b9      	str	r1, [r7, #8]
 8006b90:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8006b92:	2300      	movs	r3, #0
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	3714      	adds	r7, #20
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9e:	4770      	bx	lr

08006ba0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b087      	sub	sp, #28
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006ba8:	4a14      	ldr	r2, [pc, #80]	@ (8006bfc <_sbrk+0x5c>)
 8006baa:	4b15      	ldr	r3, [pc, #84]	@ (8006c00 <_sbrk+0x60>)
 8006bac:	1ad3      	subs	r3, r2, r3
 8006bae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006bb4:	4b13      	ldr	r3, [pc, #76]	@ (8006c04 <_sbrk+0x64>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d102      	bne.n	8006bc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006bbc:	4b11      	ldr	r3, [pc, #68]	@ (8006c04 <_sbrk+0x64>)
 8006bbe:	4a12      	ldr	r2, [pc, #72]	@ (8006c08 <_sbrk+0x68>)
 8006bc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006bc2:	4b10      	ldr	r3, [pc, #64]	@ (8006c04 <_sbrk+0x64>)
 8006bc4:	681a      	ldr	r2, [r3, #0]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	4413      	add	r3, r2
 8006bca:	693a      	ldr	r2, [r7, #16]
 8006bcc:	429a      	cmp	r2, r3
 8006bce:	d205      	bcs.n	8006bdc <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8006bd0:	4b0e      	ldr	r3, [pc, #56]	@ (8006c0c <_sbrk+0x6c>)
 8006bd2:	220c      	movs	r2, #12
 8006bd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8006bda:	e009      	b.n	8006bf0 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8006bdc:	4b09      	ldr	r3, [pc, #36]	@ (8006c04 <_sbrk+0x64>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006be2:	4b08      	ldr	r3, [pc, #32]	@ (8006c04 <_sbrk+0x64>)
 8006be4:	681a      	ldr	r2, [r3, #0]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	4413      	add	r3, r2
 8006bea:	4a06      	ldr	r2, [pc, #24]	@ (8006c04 <_sbrk+0x64>)
 8006bec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006bee:	68fb      	ldr	r3, [r7, #12]
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	371c      	adds	r7, #28
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfa:	4770      	bx	lr
 8006bfc:	20020000 	.word	0x20020000
 8006c00:	00004000 	.word	0x00004000
 8006c04:	2000e658 	.word	0x2000e658
 8006c08:	200154f8 	.word	0x200154f8
 8006c0c:	200154e4 	.word	0x200154e4

08006c10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006c10:	b480      	push	{r7}
 8006c12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006c14:	4b06      	ldr	r3, [pc, #24]	@ (8006c30 <SystemInit+0x20>)
 8006c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c1a:	4a05      	ldr	r2, [pc, #20]	@ (8006c30 <SystemInit+0x20>)
 8006c1c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006c20:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006c24:	bf00      	nop
 8006c26:	46bd      	mov	sp, r7
 8006c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2c:	4770      	bx	lr
 8006c2e:	bf00      	nop
 8006c30:	e000ed00 	.word	0xe000ed00

08006c34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006c34:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8006c6c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8006c38:	f7ff ffea 	bl	8006c10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006c3c:	480c      	ldr	r0, [pc, #48]	@ (8006c70 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006c3e:	490d      	ldr	r1, [pc, #52]	@ (8006c74 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006c40:	4a0d      	ldr	r2, [pc, #52]	@ (8006c78 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8006c42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006c44:	e002      	b.n	8006c4c <LoopCopyDataInit>

08006c46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006c46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006c48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006c4a:	3304      	adds	r3, #4

08006c4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006c4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006c4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006c50:	d3f9      	bcc.n	8006c46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006c52:	4a0a      	ldr	r2, [pc, #40]	@ (8006c7c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006c54:	4c0a      	ldr	r4, [pc, #40]	@ (8006c80 <LoopFillZerobss+0x22>)
  movs r3, #0
 8006c56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006c58:	e001      	b.n	8006c5e <LoopFillZerobss>

08006c5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006c5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006c5c:	3204      	adds	r2, #4

08006c5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006c5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006c60:	d3fb      	bcc.n	8006c5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006c62:	f011 f8db 	bl	8017e1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006c66:	f7fc fef9 	bl	8003a5c <main>
  bx  lr    
 8006c6a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006c6c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006c70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006c74:	20000ae4 	.word	0x20000ae4
  ldr r2, =_sidata
 8006c78:	08023870 	.word	0x08023870
  ldr r2, =_sbss
 8006c7c:	20000ae8 	.word	0x20000ae8
  ldr r4, =_ebss
 8006c80:	200154f4 	.word	0x200154f4

08006c84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006c84:	e7fe      	b.n	8006c84 <ADC_IRQHandler>

08006c86 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8006c86:	b480      	push	{r7}
 8006c88:	b083      	sub	sp, #12
 8006c8a:	af00      	add	r7, sp, #0
 8006c8c:	6078      	str	r0, [r7, #4]
 8006c8e:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d00b      	beq.n	8006cae <LAN8742_RegisterBusIO+0x28>
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	68db      	ldr	r3, [r3, #12]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d007      	beq.n	8006cae <LAN8742_RegisterBusIO+0x28>
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	689b      	ldr	r3, [r3, #8]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d003      	beq.n	8006cae <LAN8742_RegisterBusIO+0x28>
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	691b      	ldr	r3, [r3, #16]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d102      	bne.n	8006cb4 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8006cae:	f04f 33ff 	mov.w	r3, #4294967295
 8006cb2:	e014      	b.n	8006cde <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	681a      	ldr	r2, [r3, #0]
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	685a      	ldr	r2, [r3, #4]
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	68da      	ldr	r2, [r3, #12]
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	689a      	ldr	r2, [r3, #8]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	691a      	ldr	r2, [r3, #16]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8006cdc:	2300      	movs	r3, #0
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	370c      	adds	r7, #12
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce8:	4770      	bx	lr

08006cea <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8006cea:	b580      	push	{r7, lr}
 8006cec:	b086      	sub	sp, #24
 8006cee:	af00      	add	r7, sp, #0
 8006cf0:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	60fb      	str	r3, [r7, #12]
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d139      	bne.n	8006d7a <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d002      	beq.n	8006d14 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	689b      	ldr	r3, [r3, #8]
 8006d12:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2220      	movs	r2, #32
 8006d18:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	617b      	str	r3, [r7, #20]
 8006d1e:	e01c      	b.n	8006d5a <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	695b      	ldr	r3, [r3, #20]
 8006d24:	f107 020c 	add.w	r2, r7, #12
 8006d28:	2112      	movs	r1, #18
 8006d2a:	6978      	ldr	r0, [r7, #20]
 8006d2c:	4798      	blx	r3
 8006d2e:	4603      	mov	r3, r0
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	da03      	bge.n	8006d3c <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8006d34:	f06f 0304 	mvn.w	r3, #4
 8006d38:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8006d3a:	e00b      	b.n	8006d54 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f003 031f 	and.w	r3, r3, #31
 8006d42:	697a      	ldr	r2, [r7, #20]
 8006d44:	429a      	cmp	r2, r3
 8006d46:	d105      	bne.n	8006d54 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	697a      	ldr	r2, [r7, #20]
 8006d4c:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	613b      	str	r3, [r7, #16]
         break;
 8006d52:	e005      	b.n	8006d60 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	3301      	adds	r3, #1
 8006d58:	617b      	str	r3, [r7, #20]
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	2b1f      	cmp	r3, #31
 8006d5e:	d9df      	bls.n	8006d20 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	2b1f      	cmp	r3, #31
 8006d66:	d902      	bls.n	8006d6e <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8006d68:	f06f 0302 	mvn.w	r3, #2
 8006d6c:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d102      	bne.n	8006d7a <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2201      	movs	r2, #1
 8006d78:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8006d7a:	693b      	ldr	r3, [r7, #16]
 }
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	3718      	adds	r7, #24
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}

08006d84 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b084      	sub	sp, #16
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	695b      	ldr	r3, [r3, #20]
 8006d94:	687a      	ldr	r2, [r7, #4]
 8006d96:	6810      	ldr	r0, [r2, #0]
 8006d98:	f107 020c 	add.w	r2, r7, #12
 8006d9c:	2101      	movs	r1, #1
 8006d9e:	4798      	blx	r3
 8006da0:	4603      	mov	r3, r0
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	da02      	bge.n	8006dac <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8006da6:	f06f 0304 	mvn.w	r3, #4
 8006daa:	e06e      	b.n	8006e8a <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	695b      	ldr	r3, [r3, #20]
 8006db0:	687a      	ldr	r2, [r7, #4]
 8006db2:	6810      	ldr	r0, [r2, #0]
 8006db4:	f107 020c 	add.w	r2, r7, #12
 8006db8:	2101      	movs	r1, #1
 8006dba:	4798      	blx	r3
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	da02      	bge.n	8006dc8 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8006dc2:	f06f 0304 	mvn.w	r3, #4
 8006dc6:	e060      	b.n	8006e8a <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	f003 0304 	and.w	r3, r3, #4
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d101      	bne.n	8006dd6 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	e059      	b.n	8006e8a <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	695b      	ldr	r3, [r3, #20]
 8006dda:	687a      	ldr	r2, [r7, #4]
 8006ddc:	6810      	ldr	r0, [r2, #0]
 8006dde:	f107 020c 	add.w	r2, r7, #12
 8006de2:	2100      	movs	r1, #0
 8006de4:	4798      	blx	r3
 8006de6:	4603      	mov	r3, r0
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	da02      	bge.n	8006df2 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8006dec:	f06f 0304 	mvn.w	r3, #4
 8006df0:	e04b      	b.n	8006e8a <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d11b      	bne.n	8006e34 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d006      	beq.n	8006e14 <LAN8742_GetLinkState+0x90>
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d001      	beq.n	8006e14 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8006e10:	2302      	movs	r3, #2
 8006e12:	e03a      	b.n	8006e8a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d001      	beq.n	8006e22 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8006e1e:	2303      	movs	r3, #3
 8006e20:	e033      	b.n	8006e8a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d001      	beq.n	8006e30 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8006e2c:	2304      	movs	r3, #4
 8006e2e:	e02c      	b.n	8006e8a <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8006e30:	2305      	movs	r3, #5
 8006e32:	e02a      	b.n	8006e8a <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	695b      	ldr	r3, [r3, #20]
 8006e38:	687a      	ldr	r2, [r7, #4]
 8006e3a:	6810      	ldr	r0, [r2, #0]
 8006e3c:	f107 020c 	add.w	r2, r7, #12
 8006e40:	211f      	movs	r1, #31
 8006e42:	4798      	blx	r3
 8006e44:	4603      	mov	r3, r0
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	da02      	bge.n	8006e50 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8006e4a:	f06f 0304 	mvn.w	r3, #4
 8006e4e:	e01c      	b.n	8006e8a <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d101      	bne.n	8006e5e <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8006e5a:	2306      	movs	r3, #6
 8006e5c:	e015      	b.n	8006e8a <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	f003 031c 	and.w	r3, r3, #28
 8006e64:	2b18      	cmp	r3, #24
 8006e66:	d101      	bne.n	8006e6c <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8006e68:	2302      	movs	r3, #2
 8006e6a:	e00e      	b.n	8006e8a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	f003 031c 	and.w	r3, r3, #28
 8006e72:	2b08      	cmp	r3, #8
 8006e74:	d101      	bne.n	8006e7a <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8006e76:	2303      	movs	r3, #3
 8006e78:	e007      	b.n	8006e8a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	f003 031c 	and.w	r3, r3, #28
 8006e80:	2b14      	cmp	r3, #20
 8006e82:	d101      	bne.n	8006e88 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8006e84:	2304      	movs	r3, #4
 8006e86:	e000      	b.n	8006e8a <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8006e88:	2305      	movs	r3, #5
    }
  }
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	3710      	adds	r7, #16
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}
	...

08006e94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006e98:	4b0e      	ldr	r3, [pc, #56]	@ (8006ed4 <HAL_Init+0x40>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a0d      	ldr	r2, [pc, #52]	@ (8006ed4 <HAL_Init+0x40>)
 8006e9e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006ea2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006ea4:	4b0b      	ldr	r3, [pc, #44]	@ (8006ed4 <HAL_Init+0x40>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4a0a      	ldr	r2, [pc, #40]	@ (8006ed4 <HAL_Init+0x40>)
 8006eaa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006eae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006eb0:	4b08      	ldr	r3, [pc, #32]	@ (8006ed4 <HAL_Init+0x40>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a07      	ldr	r2, [pc, #28]	@ (8006ed4 <HAL_Init+0x40>)
 8006eb6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006eba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006ebc:	2003      	movs	r0, #3
 8006ebe:	f000 fcad 	bl	800781c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006ec2:	200f      	movs	r0, #15
 8006ec4:	f000 f808 	bl	8006ed8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006ec8:	f7ff faa6 	bl	8006418 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006ecc:	2300      	movs	r3, #0
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	bd80      	pop	{r7, pc}
 8006ed2:	bf00      	nop
 8006ed4:	40023c00 	.word	0x40023c00

08006ed8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b082      	sub	sp, #8
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006ee0:	4b12      	ldr	r3, [pc, #72]	@ (8006f2c <HAL_InitTick+0x54>)
 8006ee2:	681a      	ldr	r2, [r3, #0]
 8006ee4:	4b12      	ldr	r3, [pc, #72]	@ (8006f30 <HAL_InitTick+0x58>)
 8006ee6:	781b      	ldrb	r3, [r3, #0]
 8006ee8:	4619      	mov	r1, r3
 8006eea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006eee:	fbb3 f3f1 	udiv	r3, r3, r1
 8006ef2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f000 fcc5 	bl	8007886 <HAL_SYSTICK_Config>
 8006efc:	4603      	mov	r3, r0
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d001      	beq.n	8006f06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006f02:	2301      	movs	r3, #1
 8006f04:	e00e      	b.n	8006f24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2b0f      	cmp	r3, #15
 8006f0a:	d80a      	bhi.n	8006f22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	6879      	ldr	r1, [r7, #4]
 8006f10:	f04f 30ff 	mov.w	r0, #4294967295
 8006f14:	f000 fc8d 	bl	8007832 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006f18:	4a06      	ldr	r2, [pc, #24]	@ (8006f34 <HAL_InitTick+0x5c>)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	e000      	b.n	8006f24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006f22:	2301      	movs	r3, #1
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	3708      	adds	r7, #8
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}
 8006f2c:	200008f0 	.word	0x200008f0
 8006f30:	200008f8 	.word	0x200008f8
 8006f34:	200008f4 	.word	0x200008f4

08006f38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006f3c:	4b06      	ldr	r3, [pc, #24]	@ (8006f58 <HAL_IncTick+0x20>)
 8006f3e:	781b      	ldrb	r3, [r3, #0]
 8006f40:	461a      	mov	r2, r3
 8006f42:	4b06      	ldr	r3, [pc, #24]	@ (8006f5c <HAL_IncTick+0x24>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4413      	add	r3, r2
 8006f48:	4a04      	ldr	r2, [pc, #16]	@ (8006f5c <HAL_IncTick+0x24>)
 8006f4a:	6013      	str	r3, [r2, #0]
}
 8006f4c:	bf00      	nop
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f54:	4770      	bx	lr
 8006f56:	bf00      	nop
 8006f58:	200008f8 	.word	0x200008f8
 8006f5c:	2000e65c 	.word	0x2000e65c

08006f60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006f60:	b480      	push	{r7}
 8006f62:	af00      	add	r7, sp, #0
  return uwTick;
 8006f64:	4b03      	ldr	r3, [pc, #12]	@ (8006f74 <HAL_GetTick+0x14>)
 8006f66:	681b      	ldr	r3, [r3, #0]
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f70:	4770      	bx	lr
 8006f72:	bf00      	nop
 8006f74:	2000e65c 	.word	0x2000e65c

08006f78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b084      	sub	sp, #16
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006f80:	f7ff ffee 	bl	8006f60 <HAL_GetTick>
 8006f84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f90:	d005      	beq.n	8006f9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006f92:	4b0a      	ldr	r3, [pc, #40]	@ (8006fbc <HAL_Delay+0x44>)
 8006f94:	781b      	ldrb	r3, [r3, #0]
 8006f96:	461a      	mov	r2, r3
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	4413      	add	r3, r2
 8006f9c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006f9e:	bf00      	nop
 8006fa0:	f7ff ffde 	bl	8006f60 <HAL_GetTick>
 8006fa4:	4602      	mov	r2, r0
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	1ad3      	subs	r3, r2, r3
 8006faa:	68fa      	ldr	r2, [r7, #12]
 8006fac:	429a      	cmp	r2, r3
 8006fae:	d8f7      	bhi.n	8006fa0 <HAL_Delay+0x28>
  {
  }
}
 8006fb0:	bf00      	nop
 8006fb2:	bf00      	nop
 8006fb4:	3710      	adds	r7, #16
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}
 8006fba:	bf00      	nop
 8006fbc:	200008f8 	.word	0x200008f8

08006fc0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b084      	sub	sp, #16
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d101      	bne.n	8006fd6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	e033      	b.n	800703e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d109      	bne.n	8006ff2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f7ff fa42 	bl	8006468 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2200      	movs	r2, #0
 8006fee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ff6:	f003 0310 	and.w	r3, r3, #16
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d118      	bne.n	8007030 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007002:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8007006:	f023 0302 	bic.w	r3, r3, #2
 800700a:	f043 0202 	orr.w	r2, r3, #2
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f000 f93a 	bl	800728c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2200      	movs	r2, #0
 800701c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007022:	f023 0303 	bic.w	r3, r3, #3
 8007026:	f043 0201 	orr.w	r2, r3, #1
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	641a      	str	r2, [r3, #64]	@ 0x40
 800702e:	e001      	b.n	8007034 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8007030:	2301      	movs	r3, #1
 8007032:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2200      	movs	r2, #0
 8007038:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800703c:	7bfb      	ldrb	r3, [r7, #15]
}
 800703e:	4618      	mov	r0, r3
 8007040:	3710      	adds	r7, #16
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}
	...

08007048 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8007048:	b480      	push	{r7}
 800704a:	b085      	sub	sp, #20
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
 8007050:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8007052:	2300      	movs	r3, #0
 8007054:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800705c:	2b01      	cmp	r3, #1
 800705e:	d101      	bne.n	8007064 <HAL_ADC_ConfigChannel+0x1c>
 8007060:	2302      	movs	r3, #2
 8007062:	e105      	b.n	8007270 <HAL_ADC_ConfigChannel+0x228>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2201      	movs	r2, #1
 8007068:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	2b09      	cmp	r3, #9
 8007072:	d925      	bls.n	80070c0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	68d9      	ldr	r1, [r3, #12]
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	b29b      	uxth	r3, r3
 8007080:	461a      	mov	r2, r3
 8007082:	4613      	mov	r3, r2
 8007084:	005b      	lsls	r3, r3, #1
 8007086:	4413      	add	r3, r2
 8007088:	3b1e      	subs	r3, #30
 800708a:	2207      	movs	r2, #7
 800708c:	fa02 f303 	lsl.w	r3, r2, r3
 8007090:	43da      	mvns	r2, r3
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	400a      	ands	r2, r1
 8007098:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	68d9      	ldr	r1, [r3, #12]
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	689a      	ldr	r2, [r3, #8]
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	b29b      	uxth	r3, r3
 80070aa:	4618      	mov	r0, r3
 80070ac:	4603      	mov	r3, r0
 80070ae:	005b      	lsls	r3, r3, #1
 80070b0:	4403      	add	r3, r0
 80070b2:	3b1e      	subs	r3, #30
 80070b4:	409a      	lsls	r2, r3
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	430a      	orrs	r2, r1
 80070bc:	60da      	str	r2, [r3, #12]
 80070be:	e022      	b.n	8007106 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	6919      	ldr	r1, [r3, #16]
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	b29b      	uxth	r3, r3
 80070cc:	461a      	mov	r2, r3
 80070ce:	4613      	mov	r3, r2
 80070d0:	005b      	lsls	r3, r3, #1
 80070d2:	4413      	add	r3, r2
 80070d4:	2207      	movs	r2, #7
 80070d6:	fa02 f303 	lsl.w	r3, r2, r3
 80070da:	43da      	mvns	r2, r3
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	400a      	ands	r2, r1
 80070e2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	6919      	ldr	r1, [r3, #16]
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	689a      	ldr	r2, [r3, #8]
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	b29b      	uxth	r3, r3
 80070f4:	4618      	mov	r0, r3
 80070f6:	4603      	mov	r3, r0
 80070f8:	005b      	lsls	r3, r3, #1
 80070fa:	4403      	add	r3, r0
 80070fc:	409a      	lsls	r2, r3
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	430a      	orrs	r2, r1
 8007104:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	2b06      	cmp	r3, #6
 800710c:	d824      	bhi.n	8007158 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	685a      	ldr	r2, [r3, #4]
 8007118:	4613      	mov	r3, r2
 800711a:	009b      	lsls	r3, r3, #2
 800711c:	4413      	add	r3, r2
 800711e:	3b05      	subs	r3, #5
 8007120:	221f      	movs	r2, #31
 8007122:	fa02 f303 	lsl.w	r3, r2, r3
 8007126:	43da      	mvns	r2, r3
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	400a      	ands	r2, r1
 800712e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	b29b      	uxth	r3, r3
 800713c:	4618      	mov	r0, r3
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	685a      	ldr	r2, [r3, #4]
 8007142:	4613      	mov	r3, r2
 8007144:	009b      	lsls	r3, r3, #2
 8007146:	4413      	add	r3, r2
 8007148:	3b05      	subs	r3, #5
 800714a:	fa00 f203 	lsl.w	r2, r0, r3
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	430a      	orrs	r2, r1
 8007154:	635a      	str	r2, [r3, #52]	@ 0x34
 8007156:	e04c      	b.n	80071f2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	685b      	ldr	r3, [r3, #4]
 800715c:	2b0c      	cmp	r3, #12
 800715e:	d824      	bhi.n	80071aa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	685a      	ldr	r2, [r3, #4]
 800716a:	4613      	mov	r3, r2
 800716c:	009b      	lsls	r3, r3, #2
 800716e:	4413      	add	r3, r2
 8007170:	3b23      	subs	r3, #35	@ 0x23
 8007172:	221f      	movs	r2, #31
 8007174:	fa02 f303 	lsl.w	r3, r2, r3
 8007178:	43da      	mvns	r2, r3
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	400a      	ands	r2, r1
 8007180:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	b29b      	uxth	r3, r3
 800718e:	4618      	mov	r0, r3
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	685a      	ldr	r2, [r3, #4]
 8007194:	4613      	mov	r3, r2
 8007196:	009b      	lsls	r3, r3, #2
 8007198:	4413      	add	r3, r2
 800719a:	3b23      	subs	r3, #35	@ 0x23
 800719c:	fa00 f203 	lsl.w	r2, r0, r3
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	430a      	orrs	r2, r1
 80071a6:	631a      	str	r2, [r3, #48]	@ 0x30
 80071a8:	e023      	b.n	80071f2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	685a      	ldr	r2, [r3, #4]
 80071b4:	4613      	mov	r3, r2
 80071b6:	009b      	lsls	r3, r3, #2
 80071b8:	4413      	add	r3, r2
 80071ba:	3b41      	subs	r3, #65	@ 0x41
 80071bc:	221f      	movs	r2, #31
 80071be:	fa02 f303 	lsl.w	r3, r2, r3
 80071c2:	43da      	mvns	r2, r3
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	400a      	ands	r2, r1
 80071ca:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	b29b      	uxth	r3, r3
 80071d8:	4618      	mov	r0, r3
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	685a      	ldr	r2, [r3, #4]
 80071de:	4613      	mov	r3, r2
 80071e0:	009b      	lsls	r3, r3, #2
 80071e2:	4413      	add	r3, r2
 80071e4:	3b41      	subs	r3, #65	@ 0x41
 80071e6:	fa00 f203 	lsl.w	r2, r0, r3
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	430a      	orrs	r2, r1
 80071f0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80071f2:	4b22      	ldr	r3, [pc, #136]	@ (800727c <HAL_ADC_ConfigChannel+0x234>)
 80071f4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a21      	ldr	r2, [pc, #132]	@ (8007280 <HAL_ADC_ConfigChannel+0x238>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d109      	bne.n	8007214 <HAL_ADC_ConfigChannel+0x1cc>
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	2b12      	cmp	r3, #18
 8007206:	d105      	bne.n	8007214 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	685b      	ldr	r3, [r3, #4]
 800720c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a19      	ldr	r2, [pc, #100]	@ (8007280 <HAL_ADC_ConfigChannel+0x238>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d123      	bne.n	8007266 <HAL_ADC_ConfigChannel+0x21e>
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	2b10      	cmp	r3, #16
 8007224:	d003      	beq.n	800722e <HAL_ADC_ConfigChannel+0x1e6>
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	2b11      	cmp	r3, #17
 800722c:	d11b      	bne.n	8007266 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	685b      	ldr	r3, [r3, #4]
 8007232:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	2b10      	cmp	r3, #16
 8007240:	d111      	bne.n	8007266 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8007242:	4b10      	ldr	r3, [pc, #64]	@ (8007284 <HAL_ADC_ConfigChannel+0x23c>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4a10      	ldr	r2, [pc, #64]	@ (8007288 <HAL_ADC_ConfigChannel+0x240>)
 8007248:	fba2 2303 	umull	r2, r3, r2, r3
 800724c:	0c9a      	lsrs	r2, r3, #18
 800724e:	4613      	mov	r3, r2
 8007250:	009b      	lsls	r3, r3, #2
 8007252:	4413      	add	r3, r2
 8007254:	005b      	lsls	r3, r3, #1
 8007256:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8007258:	e002      	b.n	8007260 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	3b01      	subs	r3, #1
 800725e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d1f9      	bne.n	800725a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2200      	movs	r2, #0
 800726a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800726e:	2300      	movs	r3, #0
}
 8007270:	4618      	mov	r0, r3
 8007272:	3714      	adds	r7, #20
 8007274:	46bd      	mov	sp, r7
 8007276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727a:	4770      	bx	lr
 800727c:	40012300 	.word	0x40012300
 8007280:	40012000 	.word	0x40012000
 8007284:	200008f0 	.word	0x200008f0
 8007288:	431bde83 	.word	0x431bde83

0800728c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800728c:	b480      	push	{r7}
 800728e:	b085      	sub	sp, #20
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007294:	4b79      	ldr	r3, [pc, #484]	@ (800747c <ADC_Init+0x1f0>)
 8007296:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	685b      	ldr	r3, [r3, #4]
 800729c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	685a      	ldr	r2, [r3, #4]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	685b      	ldr	r3, [r3, #4]
 80072ac:	431a      	orrs	r2, r3
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	685a      	ldr	r2, [r3, #4]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80072c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	6859      	ldr	r1, [r3, #4]
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	691b      	ldr	r3, [r3, #16]
 80072cc:	021a      	lsls	r2, r3, #8
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	430a      	orrs	r2, r1
 80072d4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	685a      	ldr	r2, [r3, #4]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80072e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	6859      	ldr	r1, [r3, #4]
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	689a      	ldr	r2, [r3, #8]
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	430a      	orrs	r2, r1
 80072f6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	689a      	ldr	r2, [r3, #8]
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007306:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	6899      	ldr	r1, [r3, #8]
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	68da      	ldr	r2, [r3, #12]
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	430a      	orrs	r2, r1
 8007318:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800731e:	4a58      	ldr	r2, [pc, #352]	@ (8007480 <ADC_Init+0x1f4>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d022      	beq.n	800736a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	689a      	ldr	r2, [r3, #8]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8007332:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	6899      	ldr	r1, [r3, #8]
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	430a      	orrs	r2, r1
 8007344:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	689a      	ldr	r2, [r3, #8]
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8007354:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	6899      	ldr	r1, [r3, #8]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	430a      	orrs	r2, r1
 8007366:	609a      	str	r2, [r3, #8]
 8007368:	e00f      	b.n	800738a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	689a      	ldr	r2, [r3, #8]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8007378:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	689a      	ldr	r2, [r3, #8]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8007388:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	689a      	ldr	r2, [r3, #8]
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f022 0202 	bic.w	r2, r2, #2
 8007398:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	6899      	ldr	r1, [r3, #8]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	7e1b      	ldrb	r3, [r3, #24]
 80073a4:	005a      	lsls	r2, r3, #1
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	430a      	orrs	r2, r1
 80073ac:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d01b      	beq.n	80073f0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	685a      	ldr	r2, [r3, #4]
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80073c6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	685a      	ldr	r2, [r3, #4]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80073d6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	6859      	ldr	r1, [r3, #4]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073e2:	3b01      	subs	r3, #1
 80073e4:	035a      	lsls	r2, r3, #13
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	430a      	orrs	r2, r1
 80073ec:	605a      	str	r2, [r3, #4]
 80073ee:	e007      	b.n	8007400 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	685a      	ldr	r2, [r3, #4]
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80073fe:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800740e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	69db      	ldr	r3, [r3, #28]
 800741a:	3b01      	subs	r3, #1
 800741c:	051a      	lsls	r2, r3, #20
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	430a      	orrs	r2, r1
 8007424:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	689a      	ldr	r2, [r3, #8]
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8007434:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	6899      	ldr	r1, [r3, #8]
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007442:	025a      	lsls	r2, r3, #9
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	430a      	orrs	r2, r1
 800744a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	689a      	ldr	r2, [r3, #8]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800745a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	6899      	ldr	r1, [r3, #8]
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	695b      	ldr	r3, [r3, #20]
 8007466:	029a      	lsls	r2, r3, #10
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	430a      	orrs	r2, r1
 800746e:	609a      	str	r2, [r3, #8]
}
 8007470:	bf00      	nop
 8007472:	3714      	adds	r7, #20
 8007474:	46bd      	mov	sp, r7
 8007476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747a:	4770      	bx	lr
 800747c:	40012300 	.word	0x40012300
 8007480:	0f000001 	.word	0x0f000001

08007484 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b084      	sub	sp, #16
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d101      	bne.n	8007496 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8007492:	2301      	movs	r3, #1
 8007494:	e0ed      	b.n	8007672 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f893 3020 	ldrb.w	r3, [r3, #32]
 800749c:	b2db      	uxtb	r3, r3
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d102      	bne.n	80074a8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f7ff f824 	bl	80064f0 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	681a      	ldr	r2, [r3, #0]
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f042 0201 	orr.w	r2, r2, #1
 80074b6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80074b8:	f7ff fd52 	bl	8006f60 <HAL_GetTick>
 80074bc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80074be:	e012      	b.n	80074e6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80074c0:	f7ff fd4e 	bl	8006f60 <HAL_GetTick>
 80074c4:	4602      	mov	r2, r0
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	1ad3      	subs	r3, r2, r3
 80074ca:	2b0a      	cmp	r3, #10
 80074cc:	d90b      	bls.n	80074e6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074d2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2205      	movs	r2, #5
 80074de:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80074e2:	2301      	movs	r3, #1
 80074e4:	e0c5      	b.n	8007672 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	685b      	ldr	r3, [r3, #4]
 80074ec:	f003 0301 	and.w	r3, r3, #1
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d0e5      	beq.n	80074c0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	681a      	ldr	r2, [r3, #0]
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f022 0202 	bic.w	r2, r2, #2
 8007502:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007504:	f7ff fd2c 	bl	8006f60 <HAL_GetTick>
 8007508:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800750a:	e012      	b.n	8007532 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800750c:	f7ff fd28 	bl	8006f60 <HAL_GetTick>
 8007510:	4602      	mov	r2, r0
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	1ad3      	subs	r3, r2, r3
 8007516:	2b0a      	cmp	r3, #10
 8007518:	d90b      	bls.n	8007532 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800751e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2205      	movs	r2, #5
 800752a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800752e:	2301      	movs	r3, #1
 8007530:	e09f      	b.n	8007672 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	685b      	ldr	r3, [r3, #4]
 8007538:	f003 0302 	and.w	r3, r3, #2
 800753c:	2b00      	cmp	r3, #0
 800753e:	d1e5      	bne.n	800750c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	7e1b      	ldrb	r3, [r3, #24]
 8007544:	2b01      	cmp	r3, #1
 8007546:	d108      	bne.n	800755a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	681a      	ldr	r2, [r3, #0]
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007556:	601a      	str	r2, [r3, #0]
 8007558:	e007      	b.n	800756a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	681a      	ldr	r2, [r3, #0]
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007568:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	7e5b      	ldrb	r3, [r3, #25]
 800756e:	2b01      	cmp	r3, #1
 8007570:	d108      	bne.n	8007584 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	681a      	ldr	r2, [r3, #0]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007580:	601a      	str	r2, [r3, #0]
 8007582:	e007      	b.n	8007594 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	681a      	ldr	r2, [r3, #0]
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007592:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	7e9b      	ldrb	r3, [r3, #26]
 8007598:	2b01      	cmp	r3, #1
 800759a:	d108      	bne.n	80075ae <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	681a      	ldr	r2, [r3, #0]
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f042 0220 	orr.w	r2, r2, #32
 80075aa:	601a      	str	r2, [r3, #0]
 80075ac:	e007      	b.n	80075be <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	681a      	ldr	r2, [r3, #0]
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f022 0220 	bic.w	r2, r2, #32
 80075bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	7edb      	ldrb	r3, [r3, #27]
 80075c2:	2b01      	cmp	r3, #1
 80075c4:	d108      	bne.n	80075d8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	681a      	ldr	r2, [r3, #0]
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f022 0210 	bic.w	r2, r2, #16
 80075d4:	601a      	str	r2, [r3, #0]
 80075d6:	e007      	b.n	80075e8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	681a      	ldr	r2, [r3, #0]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f042 0210 	orr.w	r2, r2, #16
 80075e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	7f1b      	ldrb	r3, [r3, #28]
 80075ec:	2b01      	cmp	r3, #1
 80075ee:	d108      	bne.n	8007602 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	681a      	ldr	r2, [r3, #0]
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f042 0208 	orr.w	r2, r2, #8
 80075fe:	601a      	str	r2, [r3, #0]
 8007600:	e007      	b.n	8007612 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	681a      	ldr	r2, [r3, #0]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f022 0208 	bic.w	r2, r2, #8
 8007610:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	7f5b      	ldrb	r3, [r3, #29]
 8007616:	2b01      	cmp	r3, #1
 8007618:	d108      	bne.n	800762c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	681a      	ldr	r2, [r3, #0]
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f042 0204 	orr.w	r2, r2, #4
 8007628:	601a      	str	r2, [r3, #0]
 800762a:	e007      	b.n	800763c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	681a      	ldr	r2, [r3, #0]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f022 0204 	bic.w	r2, r2, #4
 800763a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	689a      	ldr	r2, [r3, #8]
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	68db      	ldr	r3, [r3, #12]
 8007644:	431a      	orrs	r2, r3
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	691b      	ldr	r3, [r3, #16]
 800764a:	431a      	orrs	r2, r3
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	695b      	ldr	r3, [r3, #20]
 8007650:	ea42 0103 	orr.w	r1, r2, r3
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	685b      	ldr	r3, [r3, #4]
 8007658:	1e5a      	subs	r2, r3, #1
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	430a      	orrs	r2, r1
 8007660:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2200      	movs	r2, #0
 8007666:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2201      	movs	r2, #1
 800766c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8007670:	2300      	movs	r3, #0
}
 8007672:	4618      	mov	r0, r3
 8007674:	3710      	adds	r7, #16
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}
	...

0800767c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800767c:	b480      	push	{r7}
 800767e:	b085      	sub	sp, #20
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f003 0307 	and.w	r3, r3, #7
 800768a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800768c:	4b0c      	ldr	r3, [pc, #48]	@ (80076c0 <__NVIC_SetPriorityGrouping+0x44>)
 800768e:	68db      	ldr	r3, [r3, #12]
 8007690:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007692:	68ba      	ldr	r2, [r7, #8]
 8007694:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007698:	4013      	ands	r3, r2
 800769a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80076a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80076a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80076ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80076ae:	4a04      	ldr	r2, [pc, #16]	@ (80076c0 <__NVIC_SetPriorityGrouping+0x44>)
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	60d3      	str	r3, [r2, #12]
}
 80076b4:	bf00      	nop
 80076b6:	3714      	adds	r7, #20
 80076b8:	46bd      	mov	sp, r7
 80076ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076be:	4770      	bx	lr
 80076c0:	e000ed00 	.word	0xe000ed00

080076c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80076c4:	b480      	push	{r7}
 80076c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80076c8:	4b04      	ldr	r3, [pc, #16]	@ (80076dc <__NVIC_GetPriorityGrouping+0x18>)
 80076ca:	68db      	ldr	r3, [r3, #12]
 80076cc:	0a1b      	lsrs	r3, r3, #8
 80076ce:	f003 0307 	and.w	r3, r3, #7
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	46bd      	mov	sp, r7
 80076d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076da:	4770      	bx	lr
 80076dc:	e000ed00 	.word	0xe000ed00

080076e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80076e0:	b480      	push	{r7}
 80076e2:	b083      	sub	sp, #12
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	4603      	mov	r3, r0
 80076e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80076ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	db0b      	blt.n	800770a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80076f2:	79fb      	ldrb	r3, [r7, #7]
 80076f4:	f003 021f 	and.w	r2, r3, #31
 80076f8:	4907      	ldr	r1, [pc, #28]	@ (8007718 <__NVIC_EnableIRQ+0x38>)
 80076fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80076fe:	095b      	lsrs	r3, r3, #5
 8007700:	2001      	movs	r0, #1
 8007702:	fa00 f202 	lsl.w	r2, r0, r2
 8007706:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800770a:	bf00      	nop
 800770c:	370c      	adds	r7, #12
 800770e:	46bd      	mov	sp, r7
 8007710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007714:	4770      	bx	lr
 8007716:	bf00      	nop
 8007718:	e000e100 	.word	0xe000e100

0800771c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800771c:	b480      	push	{r7}
 800771e:	b083      	sub	sp, #12
 8007720:	af00      	add	r7, sp, #0
 8007722:	4603      	mov	r3, r0
 8007724:	6039      	str	r1, [r7, #0]
 8007726:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007728:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800772c:	2b00      	cmp	r3, #0
 800772e:	db0a      	blt.n	8007746 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	b2da      	uxtb	r2, r3
 8007734:	490c      	ldr	r1, [pc, #48]	@ (8007768 <__NVIC_SetPriority+0x4c>)
 8007736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800773a:	0112      	lsls	r2, r2, #4
 800773c:	b2d2      	uxtb	r2, r2
 800773e:	440b      	add	r3, r1
 8007740:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007744:	e00a      	b.n	800775c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	b2da      	uxtb	r2, r3
 800774a:	4908      	ldr	r1, [pc, #32]	@ (800776c <__NVIC_SetPriority+0x50>)
 800774c:	79fb      	ldrb	r3, [r7, #7]
 800774e:	f003 030f 	and.w	r3, r3, #15
 8007752:	3b04      	subs	r3, #4
 8007754:	0112      	lsls	r2, r2, #4
 8007756:	b2d2      	uxtb	r2, r2
 8007758:	440b      	add	r3, r1
 800775a:	761a      	strb	r2, [r3, #24]
}
 800775c:	bf00      	nop
 800775e:	370c      	adds	r7, #12
 8007760:	46bd      	mov	sp, r7
 8007762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007766:	4770      	bx	lr
 8007768:	e000e100 	.word	0xe000e100
 800776c:	e000ed00 	.word	0xe000ed00

08007770 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007770:	b480      	push	{r7}
 8007772:	b089      	sub	sp, #36	@ 0x24
 8007774:	af00      	add	r7, sp, #0
 8007776:	60f8      	str	r0, [r7, #12]
 8007778:	60b9      	str	r1, [r7, #8]
 800777a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	f003 0307 	and.w	r3, r3, #7
 8007782:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007784:	69fb      	ldr	r3, [r7, #28]
 8007786:	f1c3 0307 	rsb	r3, r3, #7
 800778a:	2b04      	cmp	r3, #4
 800778c:	bf28      	it	cs
 800778e:	2304      	movcs	r3, #4
 8007790:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007792:	69fb      	ldr	r3, [r7, #28]
 8007794:	3304      	adds	r3, #4
 8007796:	2b06      	cmp	r3, #6
 8007798:	d902      	bls.n	80077a0 <NVIC_EncodePriority+0x30>
 800779a:	69fb      	ldr	r3, [r7, #28]
 800779c:	3b03      	subs	r3, #3
 800779e:	e000      	b.n	80077a2 <NVIC_EncodePriority+0x32>
 80077a0:	2300      	movs	r3, #0
 80077a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80077a4:	f04f 32ff 	mov.w	r2, #4294967295
 80077a8:	69bb      	ldr	r3, [r7, #24]
 80077aa:	fa02 f303 	lsl.w	r3, r2, r3
 80077ae:	43da      	mvns	r2, r3
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	401a      	ands	r2, r3
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80077b8:	f04f 31ff 	mov.w	r1, #4294967295
 80077bc:	697b      	ldr	r3, [r7, #20]
 80077be:	fa01 f303 	lsl.w	r3, r1, r3
 80077c2:	43d9      	mvns	r1, r3
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80077c8:	4313      	orrs	r3, r2
         );
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3724      	adds	r7, #36	@ 0x24
 80077ce:	46bd      	mov	sp, r7
 80077d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d4:	4770      	bx	lr
	...

080077d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b082      	sub	sp, #8
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	3b01      	subs	r3, #1
 80077e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80077e8:	d301      	bcc.n	80077ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80077ea:	2301      	movs	r3, #1
 80077ec:	e00f      	b.n	800780e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80077ee:	4a0a      	ldr	r2, [pc, #40]	@ (8007818 <SysTick_Config+0x40>)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	3b01      	subs	r3, #1
 80077f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80077f6:	210f      	movs	r1, #15
 80077f8:	f04f 30ff 	mov.w	r0, #4294967295
 80077fc:	f7ff ff8e 	bl	800771c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007800:	4b05      	ldr	r3, [pc, #20]	@ (8007818 <SysTick_Config+0x40>)
 8007802:	2200      	movs	r2, #0
 8007804:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007806:	4b04      	ldr	r3, [pc, #16]	@ (8007818 <SysTick_Config+0x40>)
 8007808:	2207      	movs	r2, #7
 800780a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800780c:	2300      	movs	r3, #0
}
 800780e:	4618      	mov	r0, r3
 8007810:	3708      	adds	r7, #8
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}
 8007816:	bf00      	nop
 8007818:	e000e010 	.word	0xe000e010

0800781c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b082      	sub	sp, #8
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f7ff ff29 	bl	800767c <__NVIC_SetPriorityGrouping>
}
 800782a:	bf00      	nop
 800782c:	3708      	adds	r7, #8
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}

08007832 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007832:	b580      	push	{r7, lr}
 8007834:	b086      	sub	sp, #24
 8007836:	af00      	add	r7, sp, #0
 8007838:	4603      	mov	r3, r0
 800783a:	60b9      	str	r1, [r7, #8]
 800783c:	607a      	str	r2, [r7, #4]
 800783e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007840:	2300      	movs	r3, #0
 8007842:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007844:	f7ff ff3e 	bl	80076c4 <__NVIC_GetPriorityGrouping>
 8007848:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800784a:	687a      	ldr	r2, [r7, #4]
 800784c:	68b9      	ldr	r1, [r7, #8]
 800784e:	6978      	ldr	r0, [r7, #20]
 8007850:	f7ff ff8e 	bl	8007770 <NVIC_EncodePriority>
 8007854:	4602      	mov	r2, r0
 8007856:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800785a:	4611      	mov	r1, r2
 800785c:	4618      	mov	r0, r3
 800785e:	f7ff ff5d 	bl	800771c <__NVIC_SetPriority>
}
 8007862:	bf00      	nop
 8007864:	3718      	adds	r7, #24
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}

0800786a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800786a:	b580      	push	{r7, lr}
 800786c:	b082      	sub	sp, #8
 800786e:	af00      	add	r7, sp, #0
 8007870:	4603      	mov	r3, r0
 8007872:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007874:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007878:	4618      	mov	r0, r3
 800787a:	f7ff ff31 	bl	80076e0 <__NVIC_EnableIRQ>
}
 800787e:	bf00      	nop
 8007880:	3708      	adds	r7, #8
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}

08007886 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007886:	b580      	push	{r7, lr}
 8007888:	b082      	sub	sp, #8
 800788a:	af00      	add	r7, sp, #0
 800788c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f7ff ffa2 	bl	80077d8 <SysTick_Config>
 8007894:	4603      	mov	r3, r0
}
 8007896:	4618      	mov	r0, r3
 8007898:	3708      	adds	r7, #8
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}

0800789e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800789e:	b580      	push	{r7, lr}
 80078a0:	b082      	sub	sp, #8
 80078a2:	af00      	add	r7, sp, #0
 80078a4:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d101      	bne.n	80078b0 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80078ac:	2301      	movs	r3, #1
 80078ae:	e014      	b.n	80078da <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	791b      	ldrb	r3, [r3, #4]
 80078b4:	b2db      	uxtb	r3, r3
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d105      	bne.n	80078c6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2200      	movs	r2, #0
 80078be:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f7fe fe5d 	bl	8006580 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2202      	movs	r2, #2
 80078ca:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2200      	movs	r2, #0
 80078d0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2201      	movs	r2, #1
 80078d6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80078d8:	2300      	movs	r3, #0
}
 80078da:	4618      	mov	r0, r3
 80078dc:	3708      	adds	r7, #8
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}

080078e2 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80078e2:	b480      	push	{r7}
 80078e4:	b089      	sub	sp, #36	@ 0x24
 80078e6:	af00      	add	r7, sp, #0
 80078e8:	60f8      	str	r0, [r7, #12]
 80078ea:	60b9      	str	r1, [r7, #8]
 80078ec:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80078ee:	2300      	movs	r3, #0
 80078f0:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d002      	beq.n	80078fe <HAL_DAC_ConfigChannel+0x1c>
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d101      	bne.n	8007902 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80078fe:	2301      	movs	r3, #1
 8007900:	e042      	b.n	8007988 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	795b      	ldrb	r3, [r3, #5]
 8007906:	2b01      	cmp	r3, #1
 8007908:	d101      	bne.n	800790e <HAL_DAC_ConfigChannel+0x2c>
 800790a:	2302      	movs	r3, #2
 800790c:	e03c      	b.n	8007988 <HAL_DAC_ConfigChannel+0xa6>
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	2201      	movs	r2, #1
 8007912:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	2202      	movs	r2, #2
 8007918:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f003 0310 	and.w	r3, r3, #16
 8007928:	f640 72fe 	movw	r2, #4094	@ 0xffe
 800792c:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8007930:	43db      	mvns	r3, r3
 8007932:	69ba      	ldr	r2, [r7, #24]
 8007934:	4013      	ands	r3, r2
 8007936:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	681a      	ldr	r2, [r3, #0]
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	685b      	ldr	r3, [r3, #4]
 8007940:	4313      	orrs	r3, r2
 8007942:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f003 0310 	and.w	r3, r3, #16
 800794a:	697a      	ldr	r2, [r7, #20]
 800794c:	fa02 f303 	lsl.w	r3, r2, r3
 8007950:	69ba      	ldr	r2, [r7, #24]
 8007952:	4313      	orrs	r3, r2
 8007954:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	69ba      	ldr	r2, [r7, #24]
 800795c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	6819      	ldr	r1, [r3, #0]
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f003 0310 	and.w	r3, r3, #16
 800796a:	22c0      	movs	r2, #192	@ 0xc0
 800796c:	fa02 f303 	lsl.w	r3, r2, r3
 8007970:	43da      	mvns	r2, r3
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	400a      	ands	r2, r1
 8007978:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	2201      	movs	r2, #1
 800797e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	2200      	movs	r2, #0
 8007984:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8007986:	7ffb      	ldrb	r3, [r7, #31]
}
 8007988:	4618      	mov	r0, r3
 800798a:	3724      	adds	r7, #36	@ 0x24
 800798c:	46bd      	mov	sp, r7
 800798e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007992:	4770      	bx	lr

08007994 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b084      	sub	sp, #16
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d101      	bne.n	80079a6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80079a2:	2301      	movs	r3, #1
 80079a4:	e08a      	b.n	8007abc <HAL_ETH_Init+0x128>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d106      	bne.n	80079be <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2223      	movs	r2, #35	@ 0x23
 80079b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f004 faa5 	bl	800bf08 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80079be:	2300      	movs	r3, #0
 80079c0:	60bb      	str	r3, [r7, #8]
 80079c2:	4b40      	ldr	r3, [pc, #256]	@ (8007ac4 <HAL_ETH_Init+0x130>)
 80079c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079c6:	4a3f      	ldr	r2, [pc, #252]	@ (8007ac4 <HAL_ETH_Init+0x130>)
 80079c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80079cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80079ce:	4b3d      	ldr	r3, [pc, #244]	@ (8007ac4 <HAL_ETH_Init+0x130>)
 80079d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80079d6:	60bb      	str	r3, [r7, #8]
 80079d8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80079da:	4b3b      	ldr	r3, [pc, #236]	@ (8007ac8 <HAL_ETH_Init+0x134>)
 80079dc:	685b      	ldr	r3, [r3, #4]
 80079de:	4a3a      	ldr	r2, [pc, #232]	@ (8007ac8 <HAL_ETH_Init+0x134>)
 80079e0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80079e4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80079e6:	4b38      	ldr	r3, [pc, #224]	@ (8007ac8 <HAL_ETH_Init+0x134>)
 80079e8:	685a      	ldr	r2, [r3, #4]
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	689b      	ldr	r3, [r3, #8]
 80079ee:	4936      	ldr	r1, [pc, #216]	@ (8007ac8 <HAL_ETH_Init+0x134>)
 80079f0:	4313      	orrs	r3, r2
 80079f2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80079f4:	4b34      	ldr	r3, [pc, #208]	@ (8007ac8 <HAL_ETH_Init+0x134>)
 80079f6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	687a      	ldr	r2, [r7, #4]
 8007a04:	6812      	ldr	r2, [r2, #0]
 8007a06:	f043 0301 	orr.w	r3, r3, #1
 8007a0a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007a0e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007a10:	f7ff faa6 	bl	8006f60 <HAL_GetTick>
 8007a14:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8007a16:	e011      	b.n	8007a3c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8007a18:	f7ff faa2 	bl	8006f60 <HAL_GetTick>
 8007a1c:	4602      	mov	r2, r0
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	1ad3      	subs	r3, r2, r3
 8007a22:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8007a26:	d909      	bls.n	8007a3c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2204      	movs	r2, #4
 8007a2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	22e0      	movs	r2, #224	@ 0xe0
 8007a34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8007a38:	2301      	movs	r3, #1
 8007a3a:	e03f      	b.n	8007abc <HAL_ETH_Init+0x128>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f003 0301 	and.w	r3, r3, #1
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d1e4      	bne.n	8007a18 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f000 fe16 	bl	8008680 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f000 fec1 	bl	80087dc <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f000 ff17 	bl	800888e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	685b      	ldr	r3, [r3, #4]
 8007a64:	461a      	mov	r2, r3
 8007a66:	2100      	movs	r1, #0
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f000 fe7f 	bl	800876c <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8007a7c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8007a86:	687a      	ldr	r2, [r7, #4]
 8007a88:	6812      	ldr	r2, [r2, #0]
 8007a8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007a8e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007a92:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8007aa6:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2200      	movs	r2, #0
 8007aae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2210      	movs	r2, #16
 8007ab6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007aba:	2300      	movs	r3, #0
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	3710      	adds	r7, #16
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}
 8007ac4:	40023800 	.word	0x40023800
 8007ac8:	40013800 	.word	0x40013800

08007acc <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b084      	sub	sp, #16
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ada:	2b10      	cmp	r3, #16
 8007adc:	d150      	bne.n	8007b80 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2223      	movs	r2, #35	@ 0x23
 8007ae2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2204      	movs	r2, #4
 8007aea:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f000 f9f8 	bl	8007ee2 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	681a      	ldr	r2, [r3, #0]
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f042 0208 	orr.w	r2, r2, #8
 8007b00:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8007b0a:	2001      	movs	r0, #1
 8007b0c:	f7ff fa34 	bl	8006f78 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	68fa      	ldr	r2, [r7, #12]
 8007b16:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	681a      	ldr	r2, [r3, #0]
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f042 0204 	orr.w	r2, r2, #4
 8007b26:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8007b30:	2001      	movs	r0, #1
 8007b32:	f7ff fa21 	bl	8006f78 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	68fa      	ldr	r2, [r7, #12]
 8007b3c:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f000 fc3a 	bl	80083b8 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007b4c:	699b      	ldr	r3, [r3, #24]
 8007b4e:	687a      	ldr	r2, [r7, #4]
 8007b50:	6812      	ldr	r2, [r2, #0]
 8007b52:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8007b56:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007b5a:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007b64:	699b      	ldr	r3, [r3, #24]
 8007b66:	687a      	ldr	r2, [r7, #4]
 8007b68:	6812      	ldr	r2, [r2, #0]
 8007b6a:	f043 0302 	orr.w	r3, r3, #2
 8007b6e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007b72:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2223      	movs	r2, #35	@ 0x23
 8007b78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_OK;
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	e000      	b.n	8007b82 <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8007b80:	2301      	movs	r3, #1
  }
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	3710      	adds	r7, #16
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd80      	pop	{r7, pc}

08007b8a <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8007b8a:	b580      	push	{r7, lr}
 8007b8c:	b084      	sub	sp, #16
 8007b8e:	af00      	add	r7, sp, #0
 8007b90:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007b98:	2b23      	cmp	r3, #35	@ 0x23
 8007b9a:	d14a      	bne.n	8007c32 <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2223      	movs	r2, #35	@ 0x23
 8007ba0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007bac:	699b      	ldr	r3, [r3, #24]
 8007bae:	687a      	ldr	r2, [r7, #4]
 8007bb0:	6812      	ldr	r2, [r2, #0]
 8007bb2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007bb6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007bba:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007bc4:	699b      	ldr	r3, [r3, #24]
 8007bc6:	687a      	ldr	r2, [r7, #4]
 8007bc8:	6812      	ldr	r2, [r2, #0]
 8007bca:	f023 0302 	bic.w	r3, r3, #2
 8007bce:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007bd2:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	681a      	ldr	r2, [r3, #0]
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f022 0204 	bic.w	r2, r2, #4
 8007be2:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8007bec:	2001      	movs	r0, #1
 8007bee:	f7ff f9c3 	bl	8006f78 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	68fa      	ldr	r2, [r7, #12]
 8007bf8:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f000 fbdc 	bl	80083b8 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	681a      	ldr	r2, [r3, #0]
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f022 0208 	bic.w	r2, r2, #8
 8007c0e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8007c18:	2001      	movs	r0, #1
 8007c1a:	f7ff f9ad 	bl	8006f78 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	68fa      	ldr	r2, [r7, #12]
 8007c24:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2210      	movs	r2, #16
 8007c2a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	e000      	b.n	8007c34 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 8007c32:	2301      	movs	r3, #1
  }
}
 8007c34:	4618      	mov	r0, r3
 8007c36:	3710      	adds	r7, #16
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bd80      	pop	{r7, pc}

08007c3c <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig, uint32_t Timeout)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b086      	sub	sp, #24
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	60f8      	str	r0, [r7, #12]
 8007c44:	60b9      	str	r1, [r7, #8]
 8007c46:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d109      	bne.n	8007c62 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c54:	f043 0201 	orr.w	r2, r3, #1
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8007c5e:	2301      	movs	r3, #1
 8007c60:	e07c      	b.n	8007d5c <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007c68:	2b23      	cmp	r3, #35	@ 0x23
 8007c6a:	d176      	bne.n	8007d5a <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	68b9      	ldr	r1, [r7, #8]
 8007c70:	68f8      	ldr	r0, [r7, #12]
 8007c72:	f000 fe7b 	bl	800896c <ETH_Prepare_Tx_Descriptors>
 8007c76:	4603      	mov	r3, r0
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d009      	beq.n	8007c90 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c82:	f043 0202 	orr.w	r2, r3, #2
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	e065      	b.n	8007d5c <HAL_ETH_Transmit+0x120>
  __ASM volatile ("dsb 0xF":::"memory");
 8007c90:	f3bf 8f4f 	dsb	sy
}
 8007c94:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	3206      	adds	r2, #6
 8007c9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ca2:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ca8:	1c5a      	adds	r2, r3, #1
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	629a      	str	r2, [r3, #40]	@ 0x28
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cb2:	2b03      	cmp	r3, #3
 8007cb4:	d904      	bls.n	8007cc0 <HAL_ETH_Transmit+0x84>
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cba:	1f1a      	subs	r2, r3, #4
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	681a      	ldr	r2, [r3, #0]
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	3106      	adds	r1, #6
 8007ccc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007cd0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007cd4:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 8007cd6:	f7ff f943 	bl	8006f60 <HAL_GetTick>
 8007cda:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8007cdc:	e037      	b.n	8007d4e <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007ce6:	695b      	ldr	r3, [r3, #20]
 8007ce8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d011      	beq.n	8007d14 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007cf6:	f043 0208 	orr.w	r2, r3, #8
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007d08:	695a      	ldr	r2, [r3, #20]
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        /* Return function status */
        return HAL_ERROR;
 8007d10:	2301      	movs	r3, #1
 8007d12:	e023      	b.n	8007d5c <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d1a:	d018      	beq.n	8007d4e <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007d1c:	f7ff f920 	bl	8006f60 <HAL_GetTick>
 8007d20:	4602      	mov	r2, r0
 8007d22:	693b      	ldr	r3, [r7, #16]
 8007d24:	1ad3      	subs	r3, r2, r3
 8007d26:	687a      	ldr	r2, [r7, #4]
 8007d28:	429a      	cmp	r2, r3
 8007d2a:	d302      	bcc.n	8007d32 <HAL_ETH_Transmit+0xf6>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d10d      	bne.n	8007d4e <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d38:	f043 0204 	orr.w	r2, r3, #4
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8007d48:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	e006      	b.n	8007d5c <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8007d4e:	697b      	ldr	r3, [r7, #20]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	dbc3      	blt.n	8007cde <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8007d56:	2300      	movs	r3, #0
 8007d58:	e000      	b.n	8007d5c <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 8007d5a:	2301      	movs	r3, #1
  }
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	3718      	adds	r7, #24
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}

08007d64 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b088      	sub	sp, #32
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
 8007d6c:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8007d6e:	2300      	movs	r3, #0
 8007d70:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8007d72:	2300      	movs	r3, #0
 8007d74:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d109      	bne.n	8007d90 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d82:	f043 0201 	orr.w	r2, r3, #1
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	e0a4      	b.n	8007eda <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007d96:	2b23      	cmp	r3, #35	@ 0x23
 8007d98:	d001      	beq.n	8007d9e <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	e09d      	b.n	8007eda <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007da2:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	69fa      	ldr	r2, [r7, #28]
 8007da8:	3212      	adds	r2, #18
 8007daa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dae:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007db4:	f1c3 0304 	rsb	r3, r3, #4
 8007db8:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8007dba:	e066      	b.n	8007e8a <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8007dbc:	69bb      	ldr	r3, [r7, #24]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d007      	beq.n	8007dd8 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8007dc8:	69bb      	ldr	r3, [r7, #24]
 8007dca:	69da      	ldr	r2, [r3, #28]
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8007dd0:	69bb      	ldr	r3, [r7, #24]
 8007dd2:	699a      	ldr	r2, [r3, #24]
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8007dd8:	69bb      	ldr	r3, [r7, #24]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d103      	bne.n	8007dec <HAL_ETH_ReadData+0x88>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d03c      	beq.n	8007e66 <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8007dec:	69bb      	ldr	r3, [r7, #24]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d005      	beq.n	8007e04 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2200      	movs	r2, #0
 8007e02:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 8007e04:	69bb      	ldr	r3, [r7, #24]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	0c1b      	lsrs	r3, r3, #16
 8007e0a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8007e0e:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8007e10:	69bb      	ldr	r3, [r7, #24]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d005      	beq.n	8007e28 <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8007e1c:	69bb      	ldr	r3, [r7, #24]
 8007e1e:	681a      	ldr	r2, [r3, #0]
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8007e24:	2301      	movs	r3, #1
 8007e26:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8007e28:	69bb      	ldr	r3, [r7, #24]
 8007e2a:	689a      	ldr	r2, [r3, #8]
 8007e2c:	69bb      	ldr	r3, [r7, #24]
 8007e2e:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8007e3c:	69bb      	ldr	r3, [r7, #24]
 8007e3e:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8007e40:	461a      	mov	r2, r3
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	b29b      	uxth	r3, r3
 8007e46:	f004 fa0f 	bl	800c268 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007e4e:	1c5a      	adds	r2, r3, #1
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	441a      	add	r2, r3
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8007e60:	69bb      	ldr	r3, [r7, #24]
 8007e62:	2200      	movs	r2, #0
 8007e64:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8007e66:	69fb      	ldr	r3, [r7, #28]
 8007e68:	3301      	adds	r3, #1
 8007e6a:	61fb      	str	r3, [r7, #28]
 8007e6c:	69fb      	ldr	r3, [r7, #28]
 8007e6e:	2b03      	cmp	r3, #3
 8007e70:	d902      	bls.n	8007e78 <HAL_ETH_ReadData+0x114>
 8007e72:	69fb      	ldr	r3, [r7, #28]
 8007e74:	3b04      	subs	r3, #4
 8007e76:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	69fa      	ldr	r2, [r7, #28]
 8007e7c:	3212      	adds	r2, #18
 8007e7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e82:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8007e84:	697b      	ldr	r3, [r7, #20]
 8007e86:	3301      	adds	r3, #1
 8007e88:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8007e8a:	69bb      	ldr	r3, [r7, #24]
 8007e8c:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	db06      	blt.n	8007ea0 <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8007e92:	697a      	ldr	r2, [r7, #20]
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	429a      	cmp	r2, r3
 8007e98:	d202      	bcs.n	8007ea0 <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 8007e9a:	7cfb      	ldrb	r3, [r7, #19]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d08d      	beq.n	8007dbc <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8007ea4:	697b      	ldr	r3, [r7, #20]
 8007ea6:	441a      	add	r2, r3
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d002      	beq.n	8007eba <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f000 f814 	bl	8007ee2 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	69fa      	ldr	r2, [r7, #28]
 8007ebe:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8007ec0:	7cfb      	ldrb	r3, [r7, #19]
 8007ec2:	2b01      	cmp	r3, #1
 8007ec4:	d108      	bne.n	8007ed8 <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	e000      	b.n	8007eda <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8007ed8:	2301      	movs	r3, #1
}
 8007eda:	4618      	mov	r0, r3
 8007edc:	3720      	adds	r7, #32
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}

08007ee2 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8007ee2:	b580      	push	{r7, lr}
 8007ee4:	b088      	sub	sp, #32
 8007ee6:	af00      	add	r7, sp, #0
 8007ee8:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8007eea:	2300      	movs	r3, #0
 8007eec:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8007eee:	2301      	movs	r3, #1
 8007ef0:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007ef6:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	69fa      	ldr	r2, [r7, #28]
 8007efc:	3212      	adds	r2, #18
 8007efe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f02:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007f08:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8007f0a:	e044      	b.n	8007f96 <ETH_UpdateDescriptor+0xb4>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8007f0c:	697b      	ldr	r3, [r7, #20]
 8007f0e:	6a1b      	ldr	r3, [r3, #32]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d112      	bne.n	8007f3a <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8007f14:	f107 0308 	add.w	r3, r7, #8
 8007f18:	4618      	mov	r0, r3
 8007f1a:	f004 f975 	bl	800c208 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8007f1e:	68bb      	ldr	r3, [r7, #8]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d102      	bne.n	8007f2a <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8007f24:	2300      	movs	r3, #0
 8007f26:	74fb      	strb	r3, [r7, #19]
 8007f28:	e007      	b.n	8007f3a <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	461a      	mov	r2, r3
 8007f2e:	697b      	ldr	r3, [r7, #20]
 8007f30:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	461a      	mov	r2, r3
 8007f36:	697b      	ldr	r3, [r7, #20]
 8007f38:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8007f3a:	7cfb      	ldrb	r3, [r7, #19]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d02a      	beq.n	8007f96 <ETH_UpdateDescriptor+0xb4>
    {
      if (heth->RxDescList.ItMode == 0U)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d108      	bne.n	8007f5a <ETH_UpdateDescriptor+0x78>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	695b      	ldr	r3, [r3, #20]
 8007f4c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007f50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007f54:	697a      	ldr	r2, [r7, #20]
 8007f56:	6053      	str	r3, [r2, #4]
 8007f58:	e005      	b.n	8007f66 <ETH_UpdateDescriptor+0x84>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	695b      	ldr	r3, [r3, #20]
 8007f5e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8007f62:	697b      	ldr	r3, [r7, #20]
 8007f64:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8007f66:	697b      	ldr	r3, [r7, #20]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8007f6e:	697b      	ldr	r3, [r7, #20]
 8007f70:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8007f72:	69fb      	ldr	r3, [r7, #28]
 8007f74:	3301      	adds	r3, #1
 8007f76:	61fb      	str	r3, [r7, #28]
 8007f78:	69fb      	ldr	r3, [r7, #28]
 8007f7a:	2b03      	cmp	r3, #3
 8007f7c:	d902      	bls.n	8007f84 <ETH_UpdateDescriptor+0xa2>
 8007f7e:	69fb      	ldr	r3, [r7, #28]
 8007f80:	3b04      	subs	r3, #4
 8007f82:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	69fa      	ldr	r2, [r7, #28]
 8007f88:	3212      	adds	r2, #18
 8007f8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f8e:	617b      	str	r3, [r7, #20]
      desccount--;
 8007f90:	69bb      	ldr	r3, [r7, #24]
 8007f92:	3b01      	subs	r3, #1
 8007f94:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8007f96:	69bb      	ldr	r3, [r7, #24]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d002      	beq.n	8007fa2 <ETH_UpdateDescriptor+0xc0>
 8007f9c:	7cfb      	ldrb	r3, [r7, #19]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d1b4      	bne.n	8007f0c <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007fa6:	69ba      	ldr	r2, [r7, #24]
 8007fa8:	429a      	cmp	r2, r3
 8007faa:	d01a      	beq.n	8007fe2 <ETH_UpdateDescriptor+0x100>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 8007fac:	69fb      	ldr	r3, [r7, #28]
 8007fae:	3301      	adds	r3, #1
 8007fb0:	f003 0303 	and.w	r3, r3, #3
 8007fb4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8007fb6:	f3bf 8f5f 	dmb	sy
}
 8007fba:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6919      	ldr	r1, [r3, #16]
 8007fc0:	68fa      	ldr	r2, [r7, #12]
 8007fc2:	4613      	mov	r3, r2
 8007fc4:	009b      	lsls	r3, r3, #2
 8007fc6:	4413      	add	r3, r2
 8007fc8:	00db      	lsls	r3, r3, #3
 8007fca:	18ca      	adds	r2, r1, r3
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007fd4:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	69fa      	ldr	r2, [r7, #28]
 8007fda:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	69ba      	ldr	r2, [r7, #24]
 8007fe0:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8007fe2:	bf00      	nop
 8007fe4:	3720      	adds	r7, #32
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}

08007fea <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8007fea:	b580      	push	{r7, lr}
 8007fec:	b086      	sub	sp, #24
 8007fee:	af00      	add	r7, sp, #0
 8007ff0:	60f8      	str	r0, [r7, #12]
 8007ff2:	60b9      	str	r1, [r7, #8]
 8007ff4:	607a      	str	r2, [r7, #4]
 8007ff6:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	691b      	ldr	r3, [r3, #16]
 8007ffe:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8008000:	697b      	ldr	r3, [r7, #20]
 8008002:	f003 031c 	and.w	r3, r3, #28
 8008006:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	02db      	lsls	r3, r3, #11
 800800c:	b29b      	uxth	r3, r3
 800800e:	697a      	ldr	r2, [r7, #20]
 8008010:	4313      	orrs	r3, r2
 8008012:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	019b      	lsls	r3, r3, #6
 8008018:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 800801c:	697a      	ldr	r2, [r7, #20]
 800801e:	4313      	orrs	r3, r2
 8008020:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8008022:	697b      	ldr	r3, [r7, #20]
 8008024:	f023 0302 	bic.w	r3, r3, #2
 8008028:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 800802a:	697b      	ldr	r3, [r7, #20]
 800802c:	f043 0301 	orr.w	r3, r3, #1
 8008030:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	697a      	ldr	r2, [r7, #20]
 8008038:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 800803a:	f7fe ff91 	bl	8006f60 <HAL_GetTick>
 800803e:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8008040:	e00d      	b.n	800805e <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8008042:	f7fe ff8d 	bl	8006f60 <HAL_GetTick>
 8008046:	4602      	mov	r2, r0
 8008048:	693b      	ldr	r3, [r7, #16]
 800804a:	1ad3      	subs	r3, r2, r3
 800804c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008050:	d301      	bcc.n	8008056 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8008052:	2301      	movs	r3, #1
 8008054:	e010      	b.n	8008078 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	691b      	ldr	r3, [r3, #16]
 800805c:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	f003 0301 	and.w	r3, r3, #1
 8008064:	2b00      	cmp	r3, #0
 8008066:	d1ec      	bne.n	8008042 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	695b      	ldr	r3, [r3, #20]
 800806e:	b29b      	uxth	r3, r3
 8008070:	461a      	mov	r2, r3
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8008076:	2300      	movs	r3, #0
}
 8008078:	4618      	mov	r0, r3
 800807a:	3718      	adds	r7, #24
 800807c:	46bd      	mov	sp, r7
 800807e:	bd80      	pop	{r7, pc}

08008080 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b086      	sub	sp, #24
 8008084:	af00      	add	r7, sp, #0
 8008086:	60f8      	str	r0, [r7, #12]
 8008088:	60b9      	str	r1, [r7, #8]
 800808a:	607a      	str	r2, [r7, #4]
 800808c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	691b      	ldr	r3, [r3, #16]
 8008094:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8008096:	697b      	ldr	r3, [r7, #20]
 8008098:	f003 031c 	and.w	r3, r3, #28
 800809c:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	02db      	lsls	r3, r3, #11
 80080a2:	b29b      	uxth	r3, r3
 80080a4:	697a      	ldr	r2, [r7, #20]
 80080a6:	4313      	orrs	r3, r2
 80080a8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	019b      	lsls	r3, r3, #6
 80080ae:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 80080b2:	697a      	ldr	r2, [r7, #20]
 80080b4:	4313      	orrs	r3, r2
 80080b6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80080b8:	697b      	ldr	r3, [r7, #20]
 80080ba:	f043 0302 	orr.w	r3, r3, #2
 80080be:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80080c0:	697b      	ldr	r3, [r7, #20]
 80080c2:	f043 0301 	orr.w	r3, r3, #1
 80080c6:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	b29a      	uxth	r2, r3
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	697a      	ldr	r2, [r7, #20]
 80080d8:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 80080da:	f7fe ff41 	bl	8006f60 <HAL_GetTick>
 80080de:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80080e0:	e00d      	b.n	80080fe <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 80080e2:	f7fe ff3d 	bl	8006f60 <HAL_GetTick>
 80080e6:	4602      	mov	r2, r0
 80080e8:	693b      	ldr	r3, [r7, #16]
 80080ea:	1ad3      	subs	r3, r2, r3
 80080ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80080f0:	d301      	bcc.n	80080f6 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 80080f2:	2301      	movs	r3, #1
 80080f4:	e009      	b.n	800810a <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	691b      	ldr	r3, [r3, #16]
 80080fc:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80080fe:	697b      	ldr	r3, [r7, #20]
 8008100:	f003 0301 	and.w	r3, r3, #1
 8008104:	2b00      	cmp	r3, #0
 8008106:	d1ec      	bne.n	80080e2 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8008108:	2300      	movs	r3, #0
}
 800810a:	4618      	mov	r0, r3
 800810c:	3718      	adds	r7, #24
 800810e:	46bd      	mov	sp, r7
 8008110:	bd80      	pop	{r7, pc}

08008112 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8008112:	b480      	push	{r7}
 8008114:	b083      	sub	sp, #12
 8008116:	af00      	add	r7, sp, #0
 8008118:	6078      	str	r0, [r7, #4]
 800811a:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d101      	bne.n	8008126 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8008122:	2301      	movs	r3, #1
 8008124:	e0e6      	b.n	80082f4 <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f003 0310 	and.w	r3, r3, #16
 8008130:	2b00      	cmp	r3, #0
 8008132:	bf14      	ite	ne
 8008134:	2301      	movne	r3, #1
 8008136:	2300      	moveq	r3, #0
 8008138:	b2db      	uxtb	r3, r3
 800813a:	461a      	mov	r2, r3
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800815a:	2b00      	cmp	r3, #0
 800815c:	bf0c      	ite	eq
 800815e:	2301      	moveq	r3, #1
 8008160:	2300      	movne	r3, #0
 8008162:	b2db      	uxtb	r3, r3
 8008164:	461a      	mov	r2, r3
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 8008176:	2b00      	cmp	r3, #0
 8008178:	bf14      	ite	ne
 800817a:	2301      	movne	r3, #1
 800817c:	2300      	moveq	r3, #0
 800817e:	b2db      	uxtb	r3, r3
 8008180:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008190:	2b00      	cmp	r3, #0
 8008192:	bf0c      	ite	eq
 8008194:	2301      	moveq	r3, #1
 8008196:	2300      	movne	r3, #0
 8008198:	b2db      	uxtb	r3, r3
 800819a:	461a      	mov	r2, r3
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	bf14      	ite	ne
 80081ae:	2301      	movne	r3, #1
 80081b0:	2300      	moveq	r3, #0
 80081b2:	b2db      	uxtb	r3, r3
 80081b4:	461a      	mov	r2, r3
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	bf0c      	ite	eq
 80081e4:	2301      	moveq	r3, #1
 80081e6:	2300      	movne	r3, #0
 80081e8:	b2db      	uxtb	r3, r3
 80081ea:	461a      	mov	r2, r3
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	bf0c      	ite	eq
 80081fe:	2301      	moveq	r3, #1
 8008200:	2300      	movne	r3, #0
 8008202:	b2db      	uxtb	r3, r3
 8008204:	461a      	mov	r2, r3
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008214:	2b00      	cmp	r3, #0
 8008216:	bf14      	ite	ne
 8008218:	2301      	movne	r3, #1
 800821a:	2300      	moveq	r3, #0
 800821c:	b2db      	uxtb	r3, r3
 800821e:	461a      	mov	r2, r3
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800823c:	2b00      	cmp	r3, #0
 800823e:	bf14      	ite	ne
 8008240:	2301      	movne	r3, #1
 8008242:	2300      	moveq	r3, #0
 8008244:	b2db      	uxtb	r3, r3
 8008246:	461a      	mov	r2, r3
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008256:	2b00      	cmp	r3, #0
 8008258:	bf14      	ite	ne
 800825a:	2301      	movne	r3, #1
 800825c:	2300      	moveq	r3, #0
 800825e:	b2db      	uxtb	r3, r3
 8008260:	461a      	mov	r2, r3
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	699b      	ldr	r3, [r3, #24]
 800826c:	f003 0302 	and.w	r3, r3, #2
 8008270:	2b00      	cmp	r3, #0
 8008272:	bf14      	ite	ne
 8008274:	2301      	movne	r3, #1
 8008276:	2300      	moveq	r3, #0
 8008278:	b2db      	uxtb	r3, r3
 800827a:	461a      	mov	r2, r3
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	699b      	ldr	r3, [r3, #24]
 8008288:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800828c:	2b00      	cmp	r3, #0
 800828e:	bf0c      	ite	eq
 8008290:	2301      	moveq	r3, #1
 8008292:	2300      	movne	r3, #0
 8008294:	b2db      	uxtb	r3, r3
 8008296:	461a      	mov	r2, r3
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	699b      	ldr	r3, [r3, #24]
 80082a4:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	699b      	ldr	r3, [r3, #24]
 80082b2:	0c1b      	lsrs	r3, r3, #16
 80082b4:	b29a      	uxth	r2, r3
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	699b      	ldr	r3, [r3, #24]
 80082c0:	f003 0304 	and.w	r3, r3, #4
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	bf14      	ite	ne
 80082c8:	2301      	movne	r3, #1
 80082ca:	2300      	moveq	r3, #0
 80082cc:	b2db      	uxtb	r3, r3
 80082ce:	461a      	mov	r2, r3
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	699b      	ldr	r3, [r3, #24]
 80082dc:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	bf14      	ite	ne
 80082e4:	2301      	movne	r3, #1
 80082e6:	2300      	moveq	r3, #0
 80082e8:	b2db      	uxtb	r3, r3
 80082ea:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 80082f2:	2300      	movs	r3, #0
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	370c      	adds	r7, #12
 80082f8:	46bd      	mov	sp, r7
 80082fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fe:	4770      	bx	lr

08008300 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b082      	sub	sp, #8
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
 8008308:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d101      	bne.n	8008314 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8008310:	2301      	movs	r3, #1
 8008312:	e00b      	b.n	800832c <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800831a:	2b10      	cmp	r3, #16
 800831c:	d105      	bne.n	800832a <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 800831e:	6839      	ldr	r1, [r7, #0]
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f000 f86f 	bl	8008404 <ETH_SetMACConfig>

    return HAL_OK;
 8008326:	2300      	movs	r3, #0
 8008328:	e000      	b.n	800832c <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 800832a:	2301      	movs	r3, #1
  }
}
 800832c:	4618      	mov	r0, r3
 800832e:	3708      	adds	r7, #8
 8008330:	46bd      	mov	sp, r7
 8008332:	bd80      	pop	{r7, pc}

08008334 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b084      	sub	sp, #16
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	691b      	ldr	r3, [r3, #16]
 8008342:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	f023 031c 	bic.w	r3, r3, #28
 800834a:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800834c:	f001 fcde 	bl	8009d0c <HAL_RCC_GetHCLKFreq>
 8008350:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	4a14      	ldr	r2, [pc, #80]	@ (80083a8 <HAL_ETH_SetMDIOClockRange+0x74>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d804      	bhi.n	8008364 <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	f043 0308 	orr.w	r3, r3, #8
 8008360:	60fb      	str	r3, [r7, #12]
 8008362:	e019      	b.n	8008398 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 8008364:	68bb      	ldr	r3, [r7, #8]
 8008366:	4a11      	ldr	r2, [pc, #68]	@ (80083ac <HAL_ETH_SetMDIOClockRange+0x78>)
 8008368:	4293      	cmp	r3, r2
 800836a:	d204      	bcs.n	8008376 <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	f043 030c 	orr.w	r3, r3, #12
 8008372:	60fb      	str	r3, [r7, #12]
 8008374:	e010      	b.n	8008398 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	4a0d      	ldr	r2, [pc, #52]	@ (80083b0 <HAL_ETH_SetMDIOClockRange+0x7c>)
 800837a:	4293      	cmp	r3, r2
 800837c:	d90c      	bls.n	8008398 <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	4a0c      	ldr	r2, [pc, #48]	@ (80083b4 <HAL_ETH_SetMDIOClockRange+0x80>)
 8008382:	4293      	cmp	r3, r2
 8008384:	d804      	bhi.n	8008390 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	f043 0304 	orr.w	r3, r3, #4
 800838c:	60fb      	str	r3, [r7, #12]
 800838e:	e003      	b.n	8008398 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	f043 0310 	orr.w	r3, r3, #16
 8008396:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	68fa      	ldr	r2, [r7, #12]
 800839e:	611a      	str	r2, [r3, #16]
}
 80083a0:	bf00      	nop
 80083a2:	3710      	adds	r7, #16
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd80      	pop	{r7, pc}
 80083a8:	02160ebf 	.word	0x02160ebf
 80083ac:	03938700 	.word	0x03938700
 80083b0:	05f5e0ff 	.word	0x05f5e0ff
 80083b4:	08f0d17f 	.word	0x08f0d17f

080083b8 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b084      	sub	sp, #16
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80083c0:	2300      	movs	r3, #0
 80083c2:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80083cc:	699b      	ldr	r3, [r3, #24]
 80083ce:	687a      	ldr	r2, [r7, #4]
 80083d0:	6812      	ldr	r2, [r2, #0]
 80083d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80083d6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80083da:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80083e4:	699b      	ldr	r3, [r3, #24]
 80083e6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80083e8:	2001      	movs	r0, #1
 80083ea:	f7fe fdc5 	bl	8006f78 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681a      	ldr	r2, [r3, #0]
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80083f8:	6193      	str	r3, [r2, #24]
}
 80083fa:	bf00      	nop
 80083fc:	3710      	adds	r7, #16
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}
	...

08008404 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b084      	sub	sp, #16
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
 800840c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8008416:	68fa      	ldr	r2, [r7, #12]
 8008418:	4b53      	ldr	r3, [pc, #332]	@ (8008568 <ETH_SetMACConfig+0x164>)
 800841a:	4013      	ands	r3, r2
 800841c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	7b9b      	ldrb	r3, [r3, #14]
 8008422:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8008424:	683a      	ldr	r2, [r7, #0]
 8008426:	7c12      	ldrb	r2, [r2, #16]
 8008428:	2a00      	cmp	r2, #0
 800842a:	d102      	bne.n	8008432 <ETH_SetMACConfig+0x2e>
 800842c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8008430:	e000      	b.n	8008434 <ETH_SetMACConfig+0x30>
 8008432:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8008434:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8008436:	683a      	ldr	r2, [r7, #0]
 8008438:	7c52      	ldrb	r2, [r2, #17]
 800843a:	2a00      	cmp	r2, #0
 800843c:	d102      	bne.n	8008444 <ETH_SetMACConfig+0x40>
 800843e:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8008442:	e000      	b.n	8008446 <ETH_SetMACConfig+0x42>
 8008444:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8008446:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800844c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	7fdb      	ldrb	r3, [r3, #31]
 8008452:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8008454:	431a      	orrs	r2, r3
                        macconf->Speed |
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800845a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800845c:	683a      	ldr	r2, [r7, #0]
 800845e:	7f92      	ldrb	r2, [r2, #30]
 8008460:	2a00      	cmp	r2, #0
 8008462:	d102      	bne.n	800846a <ETH_SetMACConfig+0x66>
 8008464:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8008468:	e000      	b.n	800846c <ETH_SetMACConfig+0x68>
 800846a:	2200      	movs	r2, #0
                        macconf->Speed |
 800846c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	7f1b      	ldrb	r3, [r3, #28]
 8008472:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8008474:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800847a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	791b      	ldrb	r3, [r3, #4]
 8008480:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8008482:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8008484:	683a      	ldr	r2, [r7, #0]
 8008486:	f892 2020 	ldrb.w	r2, [r2, #32]
 800848a:	2a00      	cmp	r2, #0
 800848c:	d102      	bne.n	8008494 <ETH_SetMACConfig+0x90>
 800848e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008492:	e000      	b.n	8008496 <ETH_SetMACConfig+0x92>
 8008494:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8008496:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	7bdb      	ldrb	r3, [r3, #15]
 800849c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800849e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80084a4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80084ac:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80084ae:	4313      	orrs	r3, r2
 80084b0:	68fa      	ldr	r2, [r7, #12]
 80084b2:	4313      	orrs	r3, r2
 80084b4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	68fa      	ldr	r2, [r7, #12]
 80084bc:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80084c6:	2001      	movs	r0, #1
 80084c8:	f7fe fd56 	bl	8006f78 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	68fa      	ldr	r2, [r7, #12]
 80084d2:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	699b      	ldr	r3, [r3, #24]
 80084da:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80084dc:	68fa      	ldr	r2, [r7, #12]
 80084de:	f64f 7341 	movw	r3, #65345	@ 0xff41
 80084e2:	4013      	ands	r3, r2
 80084e4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80084ea:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80084ec:	683a      	ldr	r2, [r7, #0]
 80084ee:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80084f2:	2a00      	cmp	r2, #0
 80084f4:	d101      	bne.n	80084fa <ETH_SetMACConfig+0xf6>
 80084f6:	2280      	movs	r2, #128	@ 0x80
 80084f8:	e000      	b.n	80084fc <ETH_SetMACConfig+0xf8>
 80084fa:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80084fc:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8008502:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8008504:	683a      	ldr	r2, [r7, #0]
 8008506:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 800850a:	2a01      	cmp	r2, #1
 800850c:	d101      	bne.n	8008512 <ETH_SetMACConfig+0x10e>
 800850e:	2208      	movs	r2, #8
 8008510:	e000      	b.n	8008514 <ETH_SetMACConfig+0x110>
 8008512:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8008514:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8008516:	683a      	ldr	r2, [r7, #0]
 8008518:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 800851c:	2a01      	cmp	r2, #1
 800851e:	d101      	bne.n	8008524 <ETH_SetMACConfig+0x120>
 8008520:	2204      	movs	r2, #4
 8008522:	e000      	b.n	8008526 <ETH_SetMACConfig+0x122>
 8008524:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8008526:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8008528:	683a      	ldr	r2, [r7, #0]
 800852a:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 800852e:	2a01      	cmp	r2, #1
 8008530:	d101      	bne.n	8008536 <ETH_SetMACConfig+0x132>
 8008532:	2202      	movs	r2, #2
 8008534:	e000      	b.n	8008538 <ETH_SetMACConfig+0x134>
 8008536:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8008538:	4313      	orrs	r3, r2
 800853a:	68fa      	ldr	r2, [r7, #12]
 800853c:	4313      	orrs	r3, r2
 800853e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	68fa      	ldr	r2, [r7, #12]
 8008546:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	699b      	ldr	r3, [r3, #24]
 800854e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8008550:	2001      	movs	r0, #1
 8008552:	f7fe fd11 	bl	8006f78 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	68fa      	ldr	r2, [r7, #12]
 800855c:	619a      	str	r2, [r3, #24]
}
 800855e:	bf00      	nop
 8008560:	3710      	adds	r7, #16
 8008562:	46bd      	mov	sp, r7
 8008564:	bd80      	pop	{r7, pc}
 8008566:	bf00      	nop
 8008568:	fd20810f 	.word	0xfd20810f

0800856c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b084      	sub	sp, #16
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
 8008574:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800857e:	699b      	ldr	r3, [r3, #24]
 8008580:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8008582:	68fa      	ldr	r2, [r7, #12]
 8008584:	4b3d      	ldr	r3, [pc, #244]	@ (800867c <ETH_SetDMAConfig+0x110>)
 8008586:	4013      	ands	r3, r2
 8008588:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	7b1b      	ldrb	r3, [r3, #12]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d102      	bne.n	8008598 <ETH_SetDMAConfig+0x2c>
 8008592:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8008596:	e000      	b.n	800859a <ETH_SetDMAConfig+0x2e>
 8008598:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	7b5b      	ldrb	r3, [r3, #13]
 800859e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80085a0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80085a2:	683a      	ldr	r2, [r7, #0]
 80085a4:	7f52      	ldrb	r2, [r2, #29]
 80085a6:	2a00      	cmp	r2, #0
 80085a8:	d102      	bne.n	80085b0 <ETH_SetDMAConfig+0x44>
 80085aa:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80085ae:	e000      	b.n	80085b2 <ETH_SetDMAConfig+0x46>
 80085b0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80085b2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	7b9b      	ldrb	r3, [r3, #14]
 80085b8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80085ba:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80085c0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	7f1b      	ldrb	r3, [r3, #28]
 80085c6:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80085c8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	7f9b      	ldrb	r3, [r3, #30]
 80085ce:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80085d0:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80085d6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80085de:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80085e0:	4313      	orrs	r3, r2
 80085e2:	68fa      	ldr	r2, [r7, #12]
 80085e4:	4313      	orrs	r3, r2
 80085e6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80085f0:	461a      	mov	r2, r3
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80085fe:	699b      	ldr	r3, [r3, #24]
 8008600:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8008602:	2001      	movs	r0, #1
 8008604:	f7fe fcb8 	bl	8006f78 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008610:	461a      	mov	r2, r3
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	791b      	ldrb	r3, [r3, #4]
 800861a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8008620:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8008626:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800862c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8008634:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8008636:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800863c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800863e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8008644:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8008646:	687a      	ldr	r2, [r7, #4]
 8008648:	6812      	ldr	r2, [r2, #0]
 800864a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800864e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8008652:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8008660:	2001      	movs	r0, #1
 8008662:	f7fe fc89 	bl	8006f78 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800866e:	461a      	mov	r2, r3
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	6013      	str	r3, [r2, #0]
}
 8008674:	bf00      	nop
 8008676:	3710      	adds	r7, #16
 8008678:	46bd      	mov	sp, r7
 800867a:	bd80      	pop	{r7, pc}
 800867c:	f8de3f23 	.word	0xf8de3f23

08008680 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b0a6      	sub	sp, #152	@ 0x98
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8008688:	2301      	movs	r3, #1
 800868a:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 800868e:	2301      	movs	r3, #1
 8008690:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8008694:	2300      	movs	r3, #0
 8008696:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8008698:	2300      	movs	r3, #0
 800869a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800869e:	2301      	movs	r3, #1
 80086a0:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80086a4:	2300      	movs	r3, #0
 80086a6:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80086aa:	2301      	movs	r3, #1
 80086ac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 80086b0:	2301      	movs	r3, #1
 80086b2:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80086b6:	2300      	movs	r3, #0
 80086b8:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80086bc:	2300      	movs	r3, #0
 80086be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80086c2:	2300      	movs	r3, #0
 80086c4:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80086c6:	2300      	movs	r3, #0
 80086c8:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80086cc:	2300      	movs	r3, #0
 80086ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80086d0:	2300      	movs	r3, #0
 80086d2:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80086d6:	2300      	movs	r3, #0
 80086d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80086dc:	2300      	movs	r3, #0
 80086de:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80086e2:	2300      	movs	r3, #0
 80086e4:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80086e8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80086ec:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80086ee:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80086f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80086f4:	2300      	movs	r3, #0
 80086f6:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80086fa:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80086fe:	4619      	mov	r1, r3
 8008700:	6878      	ldr	r0, [r7, #4]
 8008702:	f7ff fe7f 	bl	8008404 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8008706:	2301      	movs	r3, #1
 8008708:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800870a:	2301      	movs	r3, #1
 800870c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800870e:	2301      	movs	r3, #1
 8008710:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8008714:	2301      	movs	r3, #1
 8008716:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8008718:	2300      	movs	r3, #0
 800871a:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800871c:	2300      	movs	r3, #0
 800871e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8008722:	2300      	movs	r3, #0
 8008724:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8008728:	2300      	movs	r3, #0
 800872a:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800872c:	2301      	movs	r3, #1
 800872e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8008732:	2301      	movs	r3, #1
 8008734:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8008736:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800873a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800873c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8008740:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8008742:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008746:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8008748:	2301      	movs	r3, #1
 800874a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800874e:	2300      	movs	r3, #0
 8008750:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8008752:	2300      	movs	r3, #0
 8008754:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8008756:	f107 0308 	add.w	r3, r7, #8
 800875a:	4619      	mov	r1, r3
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f7ff ff05 	bl	800856c <ETH_SetDMAConfig>
}
 8008762:	bf00      	nop
 8008764:	3798      	adds	r7, #152	@ 0x98
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}
	...

0800876c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800876c:	b480      	push	{r7}
 800876e:	b087      	sub	sp, #28
 8008770:	af00      	add	r7, sp, #0
 8008772:	60f8      	str	r0, [r7, #12]
 8008774:	60b9      	str	r1, [r7, #8]
 8008776:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	3305      	adds	r3, #5
 800877c:	781b      	ldrb	r3, [r3, #0]
 800877e:	021b      	lsls	r3, r3, #8
 8008780:	687a      	ldr	r2, [r7, #4]
 8008782:	3204      	adds	r2, #4
 8008784:	7812      	ldrb	r2, [r2, #0]
 8008786:	4313      	orrs	r3, r2
 8008788:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800878a:	68ba      	ldr	r2, [r7, #8]
 800878c:	4b11      	ldr	r3, [pc, #68]	@ (80087d4 <ETH_MACAddressConfig+0x68>)
 800878e:	4413      	add	r3, r2
 8008790:	461a      	mov	r2, r3
 8008792:	697b      	ldr	r3, [r7, #20]
 8008794:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	3303      	adds	r3, #3
 800879a:	781b      	ldrb	r3, [r3, #0]
 800879c:	061a      	lsls	r2, r3, #24
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	3302      	adds	r3, #2
 80087a2:	781b      	ldrb	r3, [r3, #0]
 80087a4:	041b      	lsls	r3, r3, #16
 80087a6:	431a      	orrs	r2, r3
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	3301      	adds	r3, #1
 80087ac:	781b      	ldrb	r3, [r3, #0]
 80087ae:	021b      	lsls	r3, r3, #8
 80087b0:	4313      	orrs	r3, r2
 80087b2:	687a      	ldr	r2, [r7, #4]
 80087b4:	7812      	ldrb	r2, [r2, #0]
 80087b6:	4313      	orrs	r3, r2
 80087b8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80087ba:	68ba      	ldr	r2, [r7, #8]
 80087bc:	4b06      	ldr	r3, [pc, #24]	@ (80087d8 <ETH_MACAddressConfig+0x6c>)
 80087be:	4413      	add	r3, r2
 80087c0:	461a      	mov	r2, r3
 80087c2:	697b      	ldr	r3, [r7, #20]
 80087c4:	6013      	str	r3, [r2, #0]
}
 80087c6:	bf00      	nop
 80087c8:	371c      	adds	r7, #28
 80087ca:	46bd      	mov	sp, r7
 80087cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d0:	4770      	bx	lr
 80087d2:	bf00      	nop
 80087d4:	40028040 	.word	0x40028040
 80087d8:	40028044 	.word	0x40028044

080087dc <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80087dc:	b480      	push	{r7}
 80087de:	b085      	sub	sp, #20
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80087e4:	2300      	movs	r3, #0
 80087e6:	60fb      	str	r3, [r7, #12]
 80087e8:	e03e      	b.n	8008868 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	68d9      	ldr	r1, [r3, #12]
 80087ee:	68fa      	ldr	r2, [r7, #12]
 80087f0:	4613      	mov	r3, r2
 80087f2:	009b      	lsls	r3, r3, #2
 80087f4:	4413      	add	r3, r2
 80087f6:	00db      	lsls	r3, r3, #3
 80087f8:	440b      	add	r3, r1
 80087fa:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	2200      	movs	r2, #0
 8008800:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8008802:	68bb      	ldr	r3, [r7, #8]
 8008804:	2200      	movs	r2, #0
 8008806:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	2200      	movs	r2, #0
 800880c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800880e:	68bb      	ldr	r3, [r7, #8]
 8008810:	2200      	movs	r2, #0
 8008812:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8008814:	68b9      	ldr	r1, [r7, #8]
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	68fa      	ldr	r2, [r7, #12]
 800881a:	3206      	adds	r2, #6
 800881c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	2b02      	cmp	r3, #2
 8008830:	d80c      	bhi.n	800884c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	68d9      	ldr	r1, [r3, #12]
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	1c5a      	adds	r2, r3, #1
 800883a:	4613      	mov	r3, r2
 800883c:	009b      	lsls	r3, r3, #2
 800883e:	4413      	add	r3, r2
 8008840:	00db      	lsls	r3, r3, #3
 8008842:	440b      	add	r3, r1
 8008844:	461a      	mov	r2, r3
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	60da      	str	r2, [r3, #12]
 800884a:	e004      	b.n	8008856 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	68db      	ldr	r3, [r3, #12]
 8008850:	461a      	mov	r2, r3
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8008856:	68bb      	ldr	r3, [r7, #8]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 800885e:	68bb      	ldr	r3, [r7, #8]
 8008860:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	3301      	adds	r3, #1
 8008866:	60fb      	str	r3, [r7, #12]
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	2b03      	cmp	r3, #3
 800886c:	d9bd      	bls.n	80087ea <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2200      	movs	r2, #0
 8008872:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	68da      	ldr	r2, [r3, #12]
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008880:	611a      	str	r2, [r3, #16]
}
 8008882:	bf00      	nop
 8008884:	3714      	adds	r7, #20
 8008886:	46bd      	mov	sp, r7
 8008888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888c:	4770      	bx	lr

0800888e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800888e:	b480      	push	{r7}
 8008890:	b085      	sub	sp, #20
 8008892:	af00      	add	r7, sp, #0
 8008894:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8008896:	2300      	movs	r3, #0
 8008898:	60fb      	str	r3, [r7, #12]
 800889a:	e048      	b.n	800892e <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	6919      	ldr	r1, [r3, #16]
 80088a0:	68fa      	ldr	r2, [r7, #12]
 80088a2:	4613      	mov	r3, r2
 80088a4:	009b      	lsls	r3, r3, #2
 80088a6:	4413      	add	r3, r2
 80088a8:	00db      	lsls	r3, r3, #3
 80088aa:	440b      	add	r3, r1
 80088ac:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80088ae:	68bb      	ldr	r3, [r7, #8]
 80088b0:	2200      	movs	r2, #0
 80088b2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	2200      	movs	r2, #0
 80088b8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	2200      	movs	r2, #0
 80088be:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	2200      	movs	r2, #0
 80088c4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80088c6:	68bb      	ldr	r3, [r7, #8]
 80088c8:	2200      	movs	r2, #0
 80088ca:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80088cc:	68bb      	ldr	r3, [r7, #8]
 80088ce:	2200      	movs	r2, #0
 80088d0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80088d2:	68bb      	ldr	r3, [r7, #8]
 80088d4:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80088d8:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	695b      	ldr	r3, [r3, #20]
 80088de:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80088e2:	68bb      	ldr	r3, [r7, #8]
 80088e4:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80088e6:	68bb      	ldr	r3, [r7, #8]
 80088e8:	685b      	ldr	r3, [r3, #4]
 80088ea:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80088f2:	68b9      	ldr	r1, [r7, #8]
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	68fa      	ldr	r2, [r7, #12]
 80088f8:	3212      	adds	r2, #18
 80088fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	2b02      	cmp	r3, #2
 8008902:	d80c      	bhi.n	800891e <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	6919      	ldr	r1, [r3, #16]
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	1c5a      	adds	r2, r3, #1
 800890c:	4613      	mov	r3, r2
 800890e:	009b      	lsls	r3, r3, #2
 8008910:	4413      	add	r3, r2
 8008912:	00db      	lsls	r3, r3, #3
 8008914:	440b      	add	r3, r1
 8008916:	461a      	mov	r2, r3
 8008918:	68bb      	ldr	r3, [r7, #8]
 800891a:	60da      	str	r2, [r3, #12]
 800891c:	e004      	b.n	8008928 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	691b      	ldr	r3, [r3, #16]
 8008922:	461a      	mov	r2, r3
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	3301      	adds	r3, #1
 800892c:	60fb      	str	r3, [r7, #12]
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	2b03      	cmp	r3, #3
 8008932:	d9b3      	bls.n	800889c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2200      	movs	r2, #0
 8008938:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2200      	movs	r2, #0
 800893e:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2200      	movs	r2, #0
 8008944:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2200      	movs	r2, #0
 800894a:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2200      	movs	r2, #0
 8008950:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	691a      	ldr	r2, [r3, #16]
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800895e:	60da      	str	r2, [r3, #12]
}
 8008960:	bf00      	nop
 8008962:	3714      	adds	r7, #20
 8008964:	46bd      	mov	sp, r7
 8008966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896a:	4770      	bx	lr

0800896c <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 800896c:	b480      	push	{r7}
 800896e:	b091      	sub	sp, #68	@ 0x44
 8008970:	af00      	add	r7, sp, #0
 8008972:	60f8      	str	r0, [r7, #12]
 8008974:	60b9      	str	r1, [r7, #8]
 8008976:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	3318      	adds	r3, #24
 800897c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800897e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008980:	691b      	ldr	r3, [r3, #16]
 8008982:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8008984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008986:	691b      	ldr	r3, [r3, #16]
 8008988:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 800898a:	2300      	movs	r3, #0
 800898c:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800898e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008990:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008992:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008996:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	689b      	ldr	r3, [r3, #8]
 800899c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 800899e:	2300      	movs	r3, #0
 80089a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80089a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80089aa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80089ae:	d007      	beq.n	80089c0 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80089b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80089b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80089b4:	3304      	adds	r3, #4
 80089b6:	009b      	lsls	r3, r3, #2
 80089b8:	4413      	add	r3, r2
 80089ba:	685b      	ldr	r3, [r3, #4]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d001      	beq.n	80089c4 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80089c0:	2302      	movs	r3, #2
 80089c2:	e115      	b.n	8008bf0 <ETH_Prepare_Tx_Descriptors+0x284>
  }


  descnbr += 1U;
 80089c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089c6:	3301      	adds	r3, #1
 80089c8:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80089ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	461a      	mov	r2, r3
 80089d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089d2:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80089d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089d6:	685b      	ldr	r3, [r3, #4]
 80089d8:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 80089dc:	f023 031f 	bic.w	r3, r3, #31
 80089e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80089e2:	6852      	ldr	r2, [r2, #4]
 80089e4:	431a      	orrs	r2, r3
 80089e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089e8:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f003 0301 	and.w	r3, r3, #1
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d008      	beq.n	8008a08 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 80089f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	695b      	ldr	r3, [r3, #20]
 8008a02:	431a      	orrs	r2, r3
 8008a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a06:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f003 0320 	and.w	r3, r3, #32
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d008      	beq.n	8008a26 <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8008a14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008a1c:	68bb      	ldr	r3, [r7, #8]
 8008a1e:	691b      	ldr	r3, [r3, #16]
 8008a20:	431a      	orrs	r2, r3
 8008a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a24:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f003 0304 	and.w	r3, r3, #4
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d005      	beq.n	8008a3e <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8008a32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a3c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8008a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a48:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8008a4a:	e084      	b.n	8008b56 <ETH_Prepare_Tx_Descriptors+0x1ea>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8008a4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8008a54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a56:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d006      	beq.n	8008a6c <ETH_Prepare_Tx_Descriptors+0x100>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8008a5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008a66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a68:	601a      	str	r2, [r3, #0]
 8008a6a:	e005      	b.n	8008a78 <ETH_Prepare_Tx_Descriptors+0x10c>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8008a6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8008a74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a76:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8008a78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a7a:	3301      	adds	r3, #1
 8008a7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a80:	2b03      	cmp	r3, #3
 8008a82:	d902      	bls.n	8008a8a <ETH_Prepare_Tx_Descriptors+0x11e>
 8008a84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a86:	3b04      	subs	r3, #4
 8008a88:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8008a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a8c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008a8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a92:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8008a94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008a9c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008aa0:	d007      	beq.n	8008ab2 <ETH_Prepare_Tx_Descriptors+0x146>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8008aa2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008aa4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008aa6:	3304      	adds	r3, #4
 8008aa8:	009b      	lsls	r3, r3, #2
 8008aaa:	4413      	add	r3, r2
 8008aac:	685b      	ldr	r3, [r3, #4]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d029      	beq.n	8008b06 <ETH_Prepare_Tx_Descriptors+0x19a>
    {
      descidx = firstdescidx;
 8008ab2:	6a3b      	ldr	r3, [r7, #32]
 8008ab4:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8008ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ab8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008aba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008abe:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008ac4:	e019      	b.n	8008afa <ETH_Prepare_Tx_Descriptors+0x18e>
  __ASM volatile ("dmb 0xF":::"memory");
 8008ac6:	f3bf 8f5f 	dmb	sy
}
 8008aca:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8008acc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8008ad4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ad6:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8008ad8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ada:	3301      	adds	r3, #1
 8008adc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008ade:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ae0:	2b03      	cmp	r3, #3
 8008ae2:	d902      	bls.n	8008aea <ETH_Prepare_Tx_Descriptors+0x17e>
 8008ae4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ae6:	3b04      	subs	r3, #4
 8008ae8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8008aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aec:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008aee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008af2:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8008af4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008af6:	3301      	adds	r3, #1
 8008af8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008afa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008afc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008afe:	429a      	cmp	r2, r3
 8008b00:	d3e1      	bcc.n	8008ac6 <ETH_Prepare_Tx_Descriptors+0x15a>
      }

      return HAL_ETH_ERROR_BUSY;
 8008b02:	2302      	movs	r3, #2
 8008b04:	e074      	b.n	8008bf0 <ETH_Prepare_Tx_Descriptors+0x284>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8008b06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8008b0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b10:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 8008b12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b14:	3301      	adds	r3, #1
 8008b16:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8008b18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b1a:	689b      	ldr	r3, [r3, #8]
 8008b1c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8008b1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	461a      	mov	r2, r3
 8008b24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b26:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8008b28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b2a:	685b      	ldr	r3, [r3, #4]
 8008b2c:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 8008b30:	f023 031f 	bic.w	r3, r3, #31
 8008b34:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008b36:	6852      	ldr	r2, [r2, #4]
 8008b38:	431a      	orrs	r2, r3
 8008b3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b3c:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8008b3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b40:	3301      	adds	r3, #1
 8008b42:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8008b44:	f3bf 8f5f 	dmb	sy
}
 8008b48:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8008b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8008b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b54:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8008b56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b58:	689b      	ldr	r3, [r3, #8]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	f47f af76 	bne.w	8008a4c <ETH_Prepare_Tx_Descriptors+0xe0>
  }

  if (ItMode != ((uint32_t)RESET))
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d006      	beq.n	8008b74 <ETH_Prepare_Tx_Descriptors+0x208>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8008b66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008b6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b70:	601a      	str	r2, [r3, #0]
 8008b72:	e005      	b.n	8008b80 <ETH_Prepare_Tx_Descriptors+0x214>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8008b74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8008b7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b7e:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8008b80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008b88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b8a:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8008b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b8e:	6a3a      	ldr	r2, [r7, #32]
 8008b90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b94:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8008b96:	f3bf 8f5f 	dmb	sy
}
 8008b9a:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8008b9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8008ba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ba6:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8008ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008baa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008bac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008bae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008bb0:	3304      	adds	r3, #4
 8008bb2:	009b      	lsls	r3, r3, #2
 8008bb4:	440b      	add	r3, r1
 8008bb6:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8008bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bba:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008bbc:	611a      	str	r2, [r3, #16]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8008bbe:	f3ef 8310 	mrs	r3, PRIMASK
 8008bc2:	613b      	str	r3, [r7, #16]
  return(result);
 8008bc4:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8008bc6:	61fb      	str	r3, [r7, #28]
 8008bc8:	2301      	movs	r3, #1
 8008bca:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008bcc:	697b      	ldr	r3, [r7, #20]
 8008bce:	f383 8810 	msr	PRIMASK, r3
}
 8008bd2:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8008bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bd6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008bd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bda:	4413      	add	r3, r2
 8008bdc:	1c5a      	adds	r2, r3, #1
 8008bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008be0:	629a      	str	r2, [r3, #40]	@ 0x28
 8008be2:	69fb      	ldr	r3, [r7, #28]
 8008be4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008be6:	69bb      	ldr	r3, [r7, #24]
 8008be8:	f383 8810 	msr	PRIMASK, r3
}
 8008bec:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8008bee:	2300      	movs	r3, #0
}
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	3744      	adds	r7, #68	@ 0x44
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfa:	4770      	bx	lr

08008bfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b089      	sub	sp, #36	@ 0x24
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
 8008c04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008c06:	2300      	movs	r3, #0
 8008c08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008c0e:	2300      	movs	r3, #0
 8008c10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008c12:	2300      	movs	r3, #0
 8008c14:	61fb      	str	r3, [r7, #28]
 8008c16:	e16b      	b.n	8008ef0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008c18:	2201      	movs	r2, #1
 8008c1a:	69fb      	ldr	r3, [r7, #28]
 8008c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8008c20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	697a      	ldr	r2, [r7, #20]
 8008c28:	4013      	ands	r3, r2
 8008c2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008c2c:	693a      	ldr	r2, [r7, #16]
 8008c2e:	697b      	ldr	r3, [r7, #20]
 8008c30:	429a      	cmp	r2, r3
 8008c32:	f040 815a 	bne.w	8008eea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	685b      	ldr	r3, [r3, #4]
 8008c3a:	f003 0303 	and.w	r3, r3, #3
 8008c3e:	2b01      	cmp	r3, #1
 8008c40:	d005      	beq.n	8008c4e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	685b      	ldr	r3, [r3, #4]
 8008c46:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008c4a:	2b02      	cmp	r3, #2
 8008c4c:	d130      	bne.n	8008cb0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	689b      	ldr	r3, [r3, #8]
 8008c52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008c54:	69fb      	ldr	r3, [r7, #28]
 8008c56:	005b      	lsls	r3, r3, #1
 8008c58:	2203      	movs	r2, #3
 8008c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8008c5e:	43db      	mvns	r3, r3
 8008c60:	69ba      	ldr	r2, [r7, #24]
 8008c62:	4013      	ands	r3, r2
 8008c64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	68da      	ldr	r2, [r3, #12]
 8008c6a:	69fb      	ldr	r3, [r7, #28]
 8008c6c:	005b      	lsls	r3, r3, #1
 8008c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8008c72:	69ba      	ldr	r2, [r7, #24]
 8008c74:	4313      	orrs	r3, r2
 8008c76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	69ba      	ldr	r2, [r7, #24]
 8008c7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	685b      	ldr	r3, [r3, #4]
 8008c82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008c84:	2201      	movs	r2, #1
 8008c86:	69fb      	ldr	r3, [r7, #28]
 8008c88:	fa02 f303 	lsl.w	r3, r2, r3
 8008c8c:	43db      	mvns	r3, r3
 8008c8e:	69ba      	ldr	r2, [r7, #24]
 8008c90:	4013      	ands	r3, r2
 8008c92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	685b      	ldr	r3, [r3, #4]
 8008c98:	091b      	lsrs	r3, r3, #4
 8008c9a:	f003 0201 	and.w	r2, r3, #1
 8008c9e:	69fb      	ldr	r3, [r7, #28]
 8008ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8008ca4:	69ba      	ldr	r2, [r7, #24]
 8008ca6:	4313      	orrs	r3, r2
 8008ca8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	69ba      	ldr	r2, [r7, #24]
 8008cae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	685b      	ldr	r3, [r3, #4]
 8008cb4:	f003 0303 	and.w	r3, r3, #3
 8008cb8:	2b03      	cmp	r3, #3
 8008cba:	d017      	beq.n	8008cec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	68db      	ldr	r3, [r3, #12]
 8008cc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008cc2:	69fb      	ldr	r3, [r7, #28]
 8008cc4:	005b      	lsls	r3, r3, #1
 8008cc6:	2203      	movs	r2, #3
 8008cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8008ccc:	43db      	mvns	r3, r3
 8008cce:	69ba      	ldr	r2, [r7, #24]
 8008cd0:	4013      	ands	r3, r2
 8008cd2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	689a      	ldr	r2, [r3, #8]
 8008cd8:	69fb      	ldr	r3, [r7, #28]
 8008cda:	005b      	lsls	r3, r3, #1
 8008cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8008ce0:	69ba      	ldr	r2, [r7, #24]
 8008ce2:	4313      	orrs	r3, r2
 8008ce4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	69ba      	ldr	r2, [r7, #24]
 8008cea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	685b      	ldr	r3, [r3, #4]
 8008cf0:	f003 0303 	and.w	r3, r3, #3
 8008cf4:	2b02      	cmp	r3, #2
 8008cf6:	d123      	bne.n	8008d40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008cf8:	69fb      	ldr	r3, [r7, #28]
 8008cfa:	08da      	lsrs	r2, r3, #3
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	3208      	adds	r2, #8
 8008d00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008d06:	69fb      	ldr	r3, [r7, #28]
 8008d08:	f003 0307 	and.w	r3, r3, #7
 8008d0c:	009b      	lsls	r3, r3, #2
 8008d0e:	220f      	movs	r2, #15
 8008d10:	fa02 f303 	lsl.w	r3, r2, r3
 8008d14:	43db      	mvns	r3, r3
 8008d16:	69ba      	ldr	r2, [r7, #24]
 8008d18:	4013      	ands	r3, r2
 8008d1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	691a      	ldr	r2, [r3, #16]
 8008d20:	69fb      	ldr	r3, [r7, #28]
 8008d22:	f003 0307 	and.w	r3, r3, #7
 8008d26:	009b      	lsls	r3, r3, #2
 8008d28:	fa02 f303 	lsl.w	r3, r2, r3
 8008d2c:	69ba      	ldr	r2, [r7, #24]
 8008d2e:	4313      	orrs	r3, r2
 8008d30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008d32:	69fb      	ldr	r3, [r7, #28]
 8008d34:	08da      	lsrs	r2, r3, #3
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	3208      	adds	r2, #8
 8008d3a:	69b9      	ldr	r1, [r7, #24]
 8008d3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008d46:	69fb      	ldr	r3, [r7, #28]
 8008d48:	005b      	lsls	r3, r3, #1
 8008d4a:	2203      	movs	r2, #3
 8008d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8008d50:	43db      	mvns	r3, r3
 8008d52:	69ba      	ldr	r2, [r7, #24]
 8008d54:	4013      	ands	r3, r2
 8008d56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	685b      	ldr	r3, [r3, #4]
 8008d5c:	f003 0203 	and.w	r2, r3, #3
 8008d60:	69fb      	ldr	r3, [r7, #28]
 8008d62:	005b      	lsls	r3, r3, #1
 8008d64:	fa02 f303 	lsl.w	r3, r2, r3
 8008d68:	69ba      	ldr	r2, [r7, #24]
 8008d6a:	4313      	orrs	r3, r2
 8008d6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	69ba      	ldr	r2, [r7, #24]
 8008d72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	685b      	ldr	r3, [r3, #4]
 8008d78:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	f000 80b4 	beq.w	8008eea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008d82:	2300      	movs	r3, #0
 8008d84:	60fb      	str	r3, [r7, #12]
 8008d86:	4b60      	ldr	r3, [pc, #384]	@ (8008f08 <HAL_GPIO_Init+0x30c>)
 8008d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d8a:	4a5f      	ldr	r2, [pc, #380]	@ (8008f08 <HAL_GPIO_Init+0x30c>)
 8008d8c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008d90:	6453      	str	r3, [r2, #68]	@ 0x44
 8008d92:	4b5d      	ldr	r3, [pc, #372]	@ (8008f08 <HAL_GPIO_Init+0x30c>)
 8008d94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008d9a:	60fb      	str	r3, [r7, #12]
 8008d9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008d9e:	4a5b      	ldr	r2, [pc, #364]	@ (8008f0c <HAL_GPIO_Init+0x310>)
 8008da0:	69fb      	ldr	r3, [r7, #28]
 8008da2:	089b      	lsrs	r3, r3, #2
 8008da4:	3302      	adds	r3, #2
 8008da6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008daa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008dac:	69fb      	ldr	r3, [r7, #28]
 8008dae:	f003 0303 	and.w	r3, r3, #3
 8008db2:	009b      	lsls	r3, r3, #2
 8008db4:	220f      	movs	r2, #15
 8008db6:	fa02 f303 	lsl.w	r3, r2, r3
 8008dba:	43db      	mvns	r3, r3
 8008dbc:	69ba      	ldr	r2, [r7, #24]
 8008dbe:	4013      	ands	r3, r2
 8008dc0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	4a52      	ldr	r2, [pc, #328]	@ (8008f10 <HAL_GPIO_Init+0x314>)
 8008dc6:	4293      	cmp	r3, r2
 8008dc8:	d02b      	beq.n	8008e22 <HAL_GPIO_Init+0x226>
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	4a51      	ldr	r2, [pc, #324]	@ (8008f14 <HAL_GPIO_Init+0x318>)
 8008dce:	4293      	cmp	r3, r2
 8008dd0:	d025      	beq.n	8008e1e <HAL_GPIO_Init+0x222>
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	4a50      	ldr	r2, [pc, #320]	@ (8008f18 <HAL_GPIO_Init+0x31c>)
 8008dd6:	4293      	cmp	r3, r2
 8008dd8:	d01f      	beq.n	8008e1a <HAL_GPIO_Init+0x21e>
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	4a4f      	ldr	r2, [pc, #316]	@ (8008f1c <HAL_GPIO_Init+0x320>)
 8008dde:	4293      	cmp	r3, r2
 8008de0:	d019      	beq.n	8008e16 <HAL_GPIO_Init+0x21a>
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	4a4e      	ldr	r2, [pc, #312]	@ (8008f20 <HAL_GPIO_Init+0x324>)
 8008de6:	4293      	cmp	r3, r2
 8008de8:	d013      	beq.n	8008e12 <HAL_GPIO_Init+0x216>
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	4a4d      	ldr	r2, [pc, #308]	@ (8008f24 <HAL_GPIO_Init+0x328>)
 8008dee:	4293      	cmp	r3, r2
 8008df0:	d00d      	beq.n	8008e0e <HAL_GPIO_Init+0x212>
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	4a4c      	ldr	r2, [pc, #304]	@ (8008f28 <HAL_GPIO_Init+0x32c>)
 8008df6:	4293      	cmp	r3, r2
 8008df8:	d007      	beq.n	8008e0a <HAL_GPIO_Init+0x20e>
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	4a4b      	ldr	r2, [pc, #300]	@ (8008f2c <HAL_GPIO_Init+0x330>)
 8008dfe:	4293      	cmp	r3, r2
 8008e00:	d101      	bne.n	8008e06 <HAL_GPIO_Init+0x20a>
 8008e02:	2307      	movs	r3, #7
 8008e04:	e00e      	b.n	8008e24 <HAL_GPIO_Init+0x228>
 8008e06:	2308      	movs	r3, #8
 8008e08:	e00c      	b.n	8008e24 <HAL_GPIO_Init+0x228>
 8008e0a:	2306      	movs	r3, #6
 8008e0c:	e00a      	b.n	8008e24 <HAL_GPIO_Init+0x228>
 8008e0e:	2305      	movs	r3, #5
 8008e10:	e008      	b.n	8008e24 <HAL_GPIO_Init+0x228>
 8008e12:	2304      	movs	r3, #4
 8008e14:	e006      	b.n	8008e24 <HAL_GPIO_Init+0x228>
 8008e16:	2303      	movs	r3, #3
 8008e18:	e004      	b.n	8008e24 <HAL_GPIO_Init+0x228>
 8008e1a:	2302      	movs	r3, #2
 8008e1c:	e002      	b.n	8008e24 <HAL_GPIO_Init+0x228>
 8008e1e:	2301      	movs	r3, #1
 8008e20:	e000      	b.n	8008e24 <HAL_GPIO_Init+0x228>
 8008e22:	2300      	movs	r3, #0
 8008e24:	69fa      	ldr	r2, [r7, #28]
 8008e26:	f002 0203 	and.w	r2, r2, #3
 8008e2a:	0092      	lsls	r2, r2, #2
 8008e2c:	4093      	lsls	r3, r2
 8008e2e:	69ba      	ldr	r2, [r7, #24]
 8008e30:	4313      	orrs	r3, r2
 8008e32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008e34:	4935      	ldr	r1, [pc, #212]	@ (8008f0c <HAL_GPIO_Init+0x310>)
 8008e36:	69fb      	ldr	r3, [r7, #28]
 8008e38:	089b      	lsrs	r3, r3, #2
 8008e3a:	3302      	adds	r3, #2
 8008e3c:	69ba      	ldr	r2, [r7, #24]
 8008e3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008e42:	4b3b      	ldr	r3, [pc, #236]	@ (8008f30 <HAL_GPIO_Init+0x334>)
 8008e44:	689b      	ldr	r3, [r3, #8]
 8008e46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008e48:	693b      	ldr	r3, [r7, #16]
 8008e4a:	43db      	mvns	r3, r3
 8008e4c:	69ba      	ldr	r2, [r7, #24]
 8008e4e:	4013      	ands	r3, r2
 8008e50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	685b      	ldr	r3, [r3, #4]
 8008e56:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d003      	beq.n	8008e66 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8008e5e:	69ba      	ldr	r2, [r7, #24]
 8008e60:	693b      	ldr	r3, [r7, #16]
 8008e62:	4313      	orrs	r3, r2
 8008e64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008e66:	4a32      	ldr	r2, [pc, #200]	@ (8008f30 <HAL_GPIO_Init+0x334>)
 8008e68:	69bb      	ldr	r3, [r7, #24]
 8008e6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008e6c:	4b30      	ldr	r3, [pc, #192]	@ (8008f30 <HAL_GPIO_Init+0x334>)
 8008e6e:	68db      	ldr	r3, [r3, #12]
 8008e70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008e72:	693b      	ldr	r3, [r7, #16]
 8008e74:	43db      	mvns	r3, r3
 8008e76:	69ba      	ldr	r2, [r7, #24]
 8008e78:	4013      	ands	r3, r2
 8008e7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	685b      	ldr	r3, [r3, #4]
 8008e80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d003      	beq.n	8008e90 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8008e88:	69ba      	ldr	r2, [r7, #24]
 8008e8a:	693b      	ldr	r3, [r7, #16]
 8008e8c:	4313      	orrs	r3, r2
 8008e8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008e90:	4a27      	ldr	r2, [pc, #156]	@ (8008f30 <HAL_GPIO_Init+0x334>)
 8008e92:	69bb      	ldr	r3, [r7, #24]
 8008e94:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8008e96:	4b26      	ldr	r3, [pc, #152]	@ (8008f30 <HAL_GPIO_Init+0x334>)
 8008e98:	685b      	ldr	r3, [r3, #4]
 8008e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008e9c:	693b      	ldr	r3, [r7, #16]
 8008e9e:	43db      	mvns	r3, r3
 8008ea0:	69ba      	ldr	r2, [r7, #24]
 8008ea2:	4013      	ands	r3, r2
 8008ea4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	685b      	ldr	r3, [r3, #4]
 8008eaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d003      	beq.n	8008eba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8008eb2:	69ba      	ldr	r2, [r7, #24]
 8008eb4:	693b      	ldr	r3, [r7, #16]
 8008eb6:	4313      	orrs	r3, r2
 8008eb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008eba:	4a1d      	ldr	r2, [pc, #116]	@ (8008f30 <HAL_GPIO_Init+0x334>)
 8008ebc:	69bb      	ldr	r3, [r7, #24]
 8008ebe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008ec0:	4b1b      	ldr	r3, [pc, #108]	@ (8008f30 <HAL_GPIO_Init+0x334>)
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008ec6:	693b      	ldr	r3, [r7, #16]
 8008ec8:	43db      	mvns	r3, r3
 8008eca:	69ba      	ldr	r2, [r7, #24]
 8008ecc:	4013      	ands	r3, r2
 8008ece:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	685b      	ldr	r3, [r3, #4]
 8008ed4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d003      	beq.n	8008ee4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8008edc:	69ba      	ldr	r2, [r7, #24]
 8008ede:	693b      	ldr	r3, [r7, #16]
 8008ee0:	4313      	orrs	r3, r2
 8008ee2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008ee4:	4a12      	ldr	r2, [pc, #72]	@ (8008f30 <HAL_GPIO_Init+0x334>)
 8008ee6:	69bb      	ldr	r3, [r7, #24]
 8008ee8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008eea:	69fb      	ldr	r3, [r7, #28]
 8008eec:	3301      	adds	r3, #1
 8008eee:	61fb      	str	r3, [r7, #28]
 8008ef0:	69fb      	ldr	r3, [r7, #28]
 8008ef2:	2b0f      	cmp	r3, #15
 8008ef4:	f67f ae90 	bls.w	8008c18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008ef8:	bf00      	nop
 8008efa:	bf00      	nop
 8008efc:	3724      	adds	r7, #36	@ 0x24
 8008efe:	46bd      	mov	sp, r7
 8008f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f04:	4770      	bx	lr
 8008f06:	bf00      	nop
 8008f08:	40023800 	.word	0x40023800
 8008f0c:	40013800 	.word	0x40013800
 8008f10:	40020000 	.word	0x40020000
 8008f14:	40020400 	.word	0x40020400
 8008f18:	40020800 	.word	0x40020800
 8008f1c:	40020c00 	.word	0x40020c00
 8008f20:	40021000 	.word	0x40021000
 8008f24:	40021400 	.word	0x40021400
 8008f28:	40021800 	.word	0x40021800
 8008f2c:	40021c00 	.word	0x40021c00
 8008f30:	40013c00 	.word	0x40013c00

08008f34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008f34:	b480      	push	{r7}
 8008f36:	b083      	sub	sp, #12
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
 8008f3c:	460b      	mov	r3, r1
 8008f3e:	807b      	strh	r3, [r7, #2]
 8008f40:	4613      	mov	r3, r2
 8008f42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008f44:	787b      	ldrb	r3, [r7, #1]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d003      	beq.n	8008f52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008f4a:	887a      	ldrh	r2, [r7, #2]
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008f50:	e003      	b.n	8008f5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008f52:	887b      	ldrh	r3, [r7, #2]
 8008f54:	041a      	lsls	r2, r3, #16
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	619a      	str	r2, [r3, #24]
}
 8008f5a:	bf00      	nop
 8008f5c:	370c      	adds	r7, #12
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f64:	4770      	bx	lr

08008f66 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008f66:	b480      	push	{r7}
 8008f68:	b085      	sub	sp, #20
 8008f6a:	af00      	add	r7, sp, #0
 8008f6c:	6078      	str	r0, [r7, #4]
 8008f6e:	460b      	mov	r3, r1
 8008f70:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	695b      	ldr	r3, [r3, #20]
 8008f76:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008f78:	887a      	ldrh	r2, [r7, #2]
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	4013      	ands	r3, r2
 8008f7e:	041a      	lsls	r2, r3, #16
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	43d9      	mvns	r1, r3
 8008f84:	887b      	ldrh	r3, [r7, #2]
 8008f86:	400b      	ands	r3, r1
 8008f88:	431a      	orrs	r2, r3
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	619a      	str	r2, [r3, #24]
}
 8008f8e:	bf00      	nop
 8008f90:	3714      	adds	r7, #20
 8008f92:	46bd      	mov	sp, r7
 8008f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f98:	4770      	bx	lr
	...

08008f9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b084      	sub	sp, #16
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d101      	bne.n	8008fae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008faa:	2301      	movs	r3, #1
 8008fac:	e12b      	b.n	8009206 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008fb4:	b2db      	uxtb	r3, r3
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d106      	bne.n	8008fc8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f7fd fb20 	bl	8006608 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2224      	movs	r2, #36	@ 0x24
 8008fcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	681a      	ldr	r2, [r3, #0]
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f022 0201 	bic.w	r2, r2, #1
 8008fde:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	681a      	ldr	r2, [r3, #0]
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008fee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	681a      	ldr	r2, [r3, #0]
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008ffe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009000:	f000 fe90 	bl	8009d24 <HAL_RCC_GetPCLK1Freq>
 8009004:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	685b      	ldr	r3, [r3, #4]
 800900a:	4a81      	ldr	r2, [pc, #516]	@ (8009210 <HAL_I2C_Init+0x274>)
 800900c:	4293      	cmp	r3, r2
 800900e:	d807      	bhi.n	8009020 <HAL_I2C_Init+0x84>
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	4a80      	ldr	r2, [pc, #512]	@ (8009214 <HAL_I2C_Init+0x278>)
 8009014:	4293      	cmp	r3, r2
 8009016:	bf94      	ite	ls
 8009018:	2301      	movls	r3, #1
 800901a:	2300      	movhi	r3, #0
 800901c:	b2db      	uxtb	r3, r3
 800901e:	e006      	b.n	800902e <HAL_I2C_Init+0x92>
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	4a7d      	ldr	r2, [pc, #500]	@ (8009218 <HAL_I2C_Init+0x27c>)
 8009024:	4293      	cmp	r3, r2
 8009026:	bf94      	ite	ls
 8009028:	2301      	movls	r3, #1
 800902a:	2300      	movhi	r3, #0
 800902c:	b2db      	uxtb	r3, r3
 800902e:	2b00      	cmp	r3, #0
 8009030:	d001      	beq.n	8009036 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8009032:	2301      	movs	r3, #1
 8009034:	e0e7      	b.n	8009206 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	4a78      	ldr	r2, [pc, #480]	@ (800921c <HAL_I2C_Init+0x280>)
 800903a:	fba2 2303 	umull	r2, r3, r2, r3
 800903e:	0c9b      	lsrs	r3, r3, #18
 8009040:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	685b      	ldr	r3, [r3, #4]
 8009048:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	68ba      	ldr	r2, [r7, #8]
 8009052:	430a      	orrs	r2, r1
 8009054:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	6a1b      	ldr	r3, [r3, #32]
 800905c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	685b      	ldr	r3, [r3, #4]
 8009064:	4a6a      	ldr	r2, [pc, #424]	@ (8009210 <HAL_I2C_Init+0x274>)
 8009066:	4293      	cmp	r3, r2
 8009068:	d802      	bhi.n	8009070 <HAL_I2C_Init+0xd4>
 800906a:	68bb      	ldr	r3, [r7, #8]
 800906c:	3301      	adds	r3, #1
 800906e:	e009      	b.n	8009084 <HAL_I2C_Init+0xe8>
 8009070:	68bb      	ldr	r3, [r7, #8]
 8009072:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8009076:	fb02 f303 	mul.w	r3, r2, r3
 800907a:	4a69      	ldr	r2, [pc, #420]	@ (8009220 <HAL_I2C_Init+0x284>)
 800907c:	fba2 2303 	umull	r2, r3, r2, r3
 8009080:	099b      	lsrs	r3, r3, #6
 8009082:	3301      	adds	r3, #1
 8009084:	687a      	ldr	r2, [r7, #4]
 8009086:	6812      	ldr	r2, [r2, #0]
 8009088:	430b      	orrs	r3, r1
 800908a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	69db      	ldr	r3, [r3, #28]
 8009092:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8009096:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	685b      	ldr	r3, [r3, #4]
 800909e:	495c      	ldr	r1, [pc, #368]	@ (8009210 <HAL_I2C_Init+0x274>)
 80090a0:	428b      	cmp	r3, r1
 80090a2:	d819      	bhi.n	80090d8 <HAL_I2C_Init+0x13c>
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	1e59      	subs	r1, r3, #1
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	685b      	ldr	r3, [r3, #4]
 80090ac:	005b      	lsls	r3, r3, #1
 80090ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80090b2:	1c59      	adds	r1, r3, #1
 80090b4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80090b8:	400b      	ands	r3, r1
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d00a      	beq.n	80090d4 <HAL_I2C_Init+0x138>
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	1e59      	subs	r1, r3, #1
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	685b      	ldr	r3, [r3, #4]
 80090c6:	005b      	lsls	r3, r3, #1
 80090c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80090cc:	3301      	adds	r3, #1
 80090ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80090d2:	e051      	b.n	8009178 <HAL_I2C_Init+0x1dc>
 80090d4:	2304      	movs	r3, #4
 80090d6:	e04f      	b.n	8009178 <HAL_I2C_Init+0x1dc>
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	689b      	ldr	r3, [r3, #8]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d111      	bne.n	8009104 <HAL_I2C_Init+0x168>
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	1e58      	subs	r0, r3, #1
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	6859      	ldr	r1, [r3, #4]
 80090e8:	460b      	mov	r3, r1
 80090ea:	005b      	lsls	r3, r3, #1
 80090ec:	440b      	add	r3, r1
 80090ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80090f2:	3301      	adds	r3, #1
 80090f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	bf0c      	ite	eq
 80090fc:	2301      	moveq	r3, #1
 80090fe:	2300      	movne	r3, #0
 8009100:	b2db      	uxtb	r3, r3
 8009102:	e012      	b.n	800912a <HAL_I2C_Init+0x18e>
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	1e58      	subs	r0, r3, #1
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	6859      	ldr	r1, [r3, #4]
 800910c:	460b      	mov	r3, r1
 800910e:	009b      	lsls	r3, r3, #2
 8009110:	440b      	add	r3, r1
 8009112:	0099      	lsls	r1, r3, #2
 8009114:	440b      	add	r3, r1
 8009116:	fbb0 f3f3 	udiv	r3, r0, r3
 800911a:	3301      	adds	r3, #1
 800911c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009120:	2b00      	cmp	r3, #0
 8009122:	bf0c      	ite	eq
 8009124:	2301      	moveq	r3, #1
 8009126:	2300      	movne	r3, #0
 8009128:	b2db      	uxtb	r3, r3
 800912a:	2b00      	cmp	r3, #0
 800912c:	d001      	beq.n	8009132 <HAL_I2C_Init+0x196>
 800912e:	2301      	movs	r3, #1
 8009130:	e022      	b.n	8009178 <HAL_I2C_Init+0x1dc>
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	689b      	ldr	r3, [r3, #8]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d10e      	bne.n	8009158 <HAL_I2C_Init+0x1bc>
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	1e58      	subs	r0, r3, #1
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	6859      	ldr	r1, [r3, #4]
 8009142:	460b      	mov	r3, r1
 8009144:	005b      	lsls	r3, r3, #1
 8009146:	440b      	add	r3, r1
 8009148:	fbb0 f3f3 	udiv	r3, r0, r3
 800914c:	3301      	adds	r3, #1
 800914e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009152:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009156:	e00f      	b.n	8009178 <HAL_I2C_Init+0x1dc>
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	1e58      	subs	r0, r3, #1
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6859      	ldr	r1, [r3, #4]
 8009160:	460b      	mov	r3, r1
 8009162:	009b      	lsls	r3, r3, #2
 8009164:	440b      	add	r3, r1
 8009166:	0099      	lsls	r1, r3, #2
 8009168:	440b      	add	r3, r1
 800916a:	fbb0 f3f3 	udiv	r3, r0, r3
 800916e:	3301      	adds	r3, #1
 8009170:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009174:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009178:	6879      	ldr	r1, [r7, #4]
 800917a:	6809      	ldr	r1, [r1, #0]
 800917c:	4313      	orrs	r3, r2
 800917e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	69da      	ldr	r2, [r3, #28]
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6a1b      	ldr	r3, [r3, #32]
 8009192:	431a      	orrs	r2, r3
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	430a      	orrs	r2, r1
 800919a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	689b      	ldr	r3, [r3, #8]
 80091a2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80091a6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80091aa:	687a      	ldr	r2, [r7, #4]
 80091ac:	6911      	ldr	r1, [r2, #16]
 80091ae:	687a      	ldr	r2, [r7, #4]
 80091b0:	68d2      	ldr	r2, [r2, #12]
 80091b2:	4311      	orrs	r1, r2
 80091b4:	687a      	ldr	r2, [r7, #4]
 80091b6:	6812      	ldr	r2, [r2, #0]
 80091b8:	430b      	orrs	r3, r1
 80091ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	68db      	ldr	r3, [r3, #12]
 80091c2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	695a      	ldr	r2, [r3, #20]
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	699b      	ldr	r3, [r3, #24]
 80091ce:	431a      	orrs	r2, r3
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	430a      	orrs	r2, r1
 80091d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	681a      	ldr	r2, [r3, #0]
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	f042 0201 	orr.w	r2, r2, #1
 80091e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2200      	movs	r2, #0
 80091ec:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2220      	movs	r2, #32
 80091f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	2200      	movs	r2, #0
 80091fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2200      	movs	r2, #0
 8009200:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8009204:	2300      	movs	r3, #0
}
 8009206:	4618      	mov	r0, r3
 8009208:	3710      	adds	r7, #16
 800920a:	46bd      	mov	sp, r7
 800920c:	bd80      	pop	{r7, pc}
 800920e:	bf00      	nop
 8009210:	000186a0 	.word	0x000186a0
 8009214:	001e847f 	.word	0x001e847f
 8009218:	003d08ff 	.word	0x003d08ff
 800921c:	431bde83 	.word	0x431bde83
 8009220:	10624dd3 	.word	0x10624dd3

08009224 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b086      	sub	sp, #24
 8009228:	af02      	add	r7, sp, #8
 800922a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d101      	bne.n	8009236 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8009232:	2301      	movs	r3, #1
 8009234:	e101      	b.n	800943a <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8009242:	b2db      	uxtb	r3, r3
 8009244:	2b00      	cmp	r3, #0
 8009246:	d106      	bne.n	8009256 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2200      	movs	r2, #0
 800924c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8009250:	6878      	ldr	r0, [r7, #4]
 8009252:	f7fd fb7d 	bl	8006950 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	2203      	movs	r2, #3
 800925a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800925e:	68bb      	ldr	r3, [r7, #8]
 8009260:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009264:	d102      	bne.n	800926c <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2200      	movs	r2, #0
 800926a:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	4618      	mov	r0, r3
 8009272:	f002 f8a9 	bl	800b3c8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	6818      	ldr	r0, [r3, #0]
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	7c1a      	ldrb	r2, [r3, #16]
 800927e:	f88d 2000 	strb.w	r2, [sp]
 8009282:	3304      	adds	r3, #4
 8009284:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009286:	f002 f83b 	bl	800b300 <USB_CoreInit>
 800928a:	4603      	mov	r3, r0
 800928c:	2b00      	cmp	r3, #0
 800928e:	d005      	beq.n	800929c <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2202      	movs	r2, #2
 8009294:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8009298:	2301      	movs	r3, #1
 800929a:	e0ce      	b.n	800943a <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	2100      	movs	r1, #0
 80092a2:	4618      	mov	r0, r3
 80092a4:	f002 f8a1 	bl	800b3ea <USB_SetCurrentMode>
 80092a8:	4603      	mov	r3, r0
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d005      	beq.n	80092ba <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2202      	movs	r2, #2
 80092b2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80092b6:	2301      	movs	r3, #1
 80092b8:	e0bf      	b.n	800943a <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80092ba:	2300      	movs	r3, #0
 80092bc:	73fb      	strb	r3, [r7, #15]
 80092be:	e04a      	b.n	8009356 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80092c0:	7bfa      	ldrb	r2, [r7, #15]
 80092c2:	6879      	ldr	r1, [r7, #4]
 80092c4:	4613      	mov	r3, r2
 80092c6:	00db      	lsls	r3, r3, #3
 80092c8:	4413      	add	r3, r2
 80092ca:	009b      	lsls	r3, r3, #2
 80092cc:	440b      	add	r3, r1
 80092ce:	3315      	adds	r3, #21
 80092d0:	2201      	movs	r2, #1
 80092d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80092d4:	7bfa      	ldrb	r2, [r7, #15]
 80092d6:	6879      	ldr	r1, [r7, #4]
 80092d8:	4613      	mov	r3, r2
 80092da:	00db      	lsls	r3, r3, #3
 80092dc:	4413      	add	r3, r2
 80092de:	009b      	lsls	r3, r3, #2
 80092e0:	440b      	add	r3, r1
 80092e2:	3314      	adds	r3, #20
 80092e4:	7bfa      	ldrb	r2, [r7, #15]
 80092e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80092e8:	7bfa      	ldrb	r2, [r7, #15]
 80092ea:	7bfb      	ldrb	r3, [r7, #15]
 80092ec:	b298      	uxth	r0, r3
 80092ee:	6879      	ldr	r1, [r7, #4]
 80092f0:	4613      	mov	r3, r2
 80092f2:	00db      	lsls	r3, r3, #3
 80092f4:	4413      	add	r3, r2
 80092f6:	009b      	lsls	r3, r3, #2
 80092f8:	440b      	add	r3, r1
 80092fa:	332e      	adds	r3, #46	@ 0x2e
 80092fc:	4602      	mov	r2, r0
 80092fe:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8009300:	7bfa      	ldrb	r2, [r7, #15]
 8009302:	6879      	ldr	r1, [r7, #4]
 8009304:	4613      	mov	r3, r2
 8009306:	00db      	lsls	r3, r3, #3
 8009308:	4413      	add	r3, r2
 800930a:	009b      	lsls	r3, r3, #2
 800930c:	440b      	add	r3, r1
 800930e:	3318      	adds	r3, #24
 8009310:	2200      	movs	r2, #0
 8009312:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8009314:	7bfa      	ldrb	r2, [r7, #15]
 8009316:	6879      	ldr	r1, [r7, #4]
 8009318:	4613      	mov	r3, r2
 800931a:	00db      	lsls	r3, r3, #3
 800931c:	4413      	add	r3, r2
 800931e:	009b      	lsls	r3, r3, #2
 8009320:	440b      	add	r3, r1
 8009322:	331c      	adds	r3, #28
 8009324:	2200      	movs	r2, #0
 8009326:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8009328:	7bfa      	ldrb	r2, [r7, #15]
 800932a:	6879      	ldr	r1, [r7, #4]
 800932c:	4613      	mov	r3, r2
 800932e:	00db      	lsls	r3, r3, #3
 8009330:	4413      	add	r3, r2
 8009332:	009b      	lsls	r3, r3, #2
 8009334:	440b      	add	r3, r1
 8009336:	3320      	adds	r3, #32
 8009338:	2200      	movs	r2, #0
 800933a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800933c:	7bfa      	ldrb	r2, [r7, #15]
 800933e:	6879      	ldr	r1, [r7, #4]
 8009340:	4613      	mov	r3, r2
 8009342:	00db      	lsls	r3, r3, #3
 8009344:	4413      	add	r3, r2
 8009346:	009b      	lsls	r3, r3, #2
 8009348:	440b      	add	r3, r1
 800934a:	3324      	adds	r3, #36	@ 0x24
 800934c:	2200      	movs	r2, #0
 800934e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009350:	7bfb      	ldrb	r3, [r7, #15]
 8009352:	3301      	adds	r3, #1
 8009354:	73fb      	strb	r3, [r7, #15]
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	791b      	ldrb	r3, [r3, #4]
 800935a:	7bfa      	ldrb	r2, [r7, #15]
 800935c:	429a      	cmp	r2, r3
 800935e:	d3af      	bcc.n	80092c0 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009360:	2300      	movs	r3, #0
 8009362:	73fb      	strb	r3, [r7, #15]
 8009364:	e044      	b.n	80093f0 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8009366:	7bfa      	ldrb	r2, [r7, #15]
 8009368:	6879      	ldr	r1, [r7, #4]
 800936a:	4613      	mov	r3, r2
 800936c:	00db      	lsls	r3, r3, #3
 800936e:	4413      	add	r3, r2
 8009370:	009b      	lsls	r3, r3, #2
 8009372:	440b      	add	r3, r1
 8009374:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8009378:	2200      	movs	r2, #0
 800937a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800937c:	7bfa      	ldrb	r2, [r7, #15]
 800937e:	6879      	ldr	r1, [r7, #4]
 8009380:	4613      	mov	r3, r2
 8009382:	00db      	lsls	r3, r3, #3
 8009384:	4413      	add	r3, r2
 8009386:	009b      	lsls	r3, r3, #2
 8009388:	440b      	add	r3, r1
 800938a:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800938e:	7bfa      	ldrb	r2, [r7, #15]
 8009390:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8009392:	7bfa      	ldrb	r2, [r7, #15]
 8009394:	6879      	ldr	r1, [r7, #4]
 8009396:	4613      	mov	r3, r2
 8009398:	00db      	lsls	r3, r3, #3
 800939a:	4413      	add	r3, r2
 800939c:	009b      	lsls	r3, r3, #2
 800939e:	440b      	add	r3, r1
 80093a0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80093a4:	2200      	movs	r2, #0
 80093a6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80093a8:	7bfa      	ldrb	r2, [r7, #15]
 80093aa:	6879      	ldr	r1, [r7, #4]
 80093ac:	4613      	mov	r3, r2
 80093ae:	00db      	lsls	r3, r3, #3
 80093b0:	4413      	add	r3, r2
 80093b2:	009b      	lsls	r3, r3, #2
 80093b4:	440b      	add	r3, r1
 80093b6:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80093ba:	2200      	movs	r2, #0
 80093bc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80093be:	7bfa      	ldrb	r2, [r7, #15]
 80093c0:	6879      	ldr	r1, [r7, #4]
 80093c2:	4613      	mov	r3, r2
 80093c4:	00db      	lsls	r3, r3, #3
 80093c6:	4413      	add	r3, r2
 80093c8:	009b      	lsls	r3, r3, #2
 80093ca:	440b      	add	r3, r1
 80093cc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80093d0:	2200      	movs	r2, #0
 80093d2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80093d4:	7bfa      	ldrb	r2, [r7, #15]
 80093d6:	6879      	ldr	r1, [r7, #4]
 80093d8:	4613      	mov	r3, r2
 80093da:	00db      	lsls	r3, r3, #3
 80093dc:	4413      	add	r3, r2
 80093de:	009b      	lsls	r3, r3, #2
 80093e0:	440b      	add	r3, r1
 80093e2:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80093e6:	2200      	movs	r2, #0
 80093e8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80093ea:	7bfb      	ldrb	r3, [r7, #15]
 80093ec:	3301      	adds	r3, #1
 80093ee:	73fb      	strb	r3, [r7, #15]
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	791b      	ldrb	r3, [r3, #4]
 80093f4:	7bfa      	ldrb	r2, [r7, #15]
 80093f6:	429a      	cmp	r2, r3
 80093f8:	d3b5      	bcc.n	8009366 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6818      	ldr	r0, [r3, #0]
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	7c1a      	ldrb	r2, [r3, #16]
 8009402:	f88d 2000 	strb.w	r2, [sp]
 8009406:	3304      	adds	r3, #4
 8009408:	cb0e      	ldmia	r3, {r1, r2, r3}
 800940a:	f002 f83b 	bl	800b484 <USB_DevInit>
 800940e:	4603      	mov	r3, r0
 8009410:	2b00      	cmp	r3, #0
 8009412:	d005      	beq.n	8009420 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2202      	movs	r2, #2
 8009418:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800941c:	2301      	movs	r3, #1
 800941e:	e00c      	b.n	800943a <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2200      	movs	r2, #0
 8009424:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2201      	movs	r2, #1
 800942a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	4618      	mov	r0, r3
 8009434:	f002 fa03 	bl	800b83e <USB_DevDisconnect>

  return HAL_OK;
 8009438:	2300      	movs	r3, #0
}
 800943a:	4618      	mov	r0, r3
 800943c:	3710      	adds	r7, #16
 800943e:	46bd      	mov	sp, r7
 8009440:	bd80      	pop	{r7, pc}
	...

08009444 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b086      	sub	sp, #24
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d101      	bne.n	8009456 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009452:	2301      	movs	r3, #1
 8009454:	e267      	b.n	8009926 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	f003 0301 	and.w	r3, r3, #1
 800945e:	2b00      	cmp	r3, #0
 8009460:	d075      	beq.n	800954e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8009462:	4b88      	ldr	r3, [pc, #544]	@ (8009684 <HAL_RCC_OscConfig+0x240>)
 8009464:	689b      	ldr	r3, [r3, #8]
 8009466:	f003 030c 	and.w	r3, r3, #12
 800946a:	2b04      	cmp	r3, #4
 800946c:	d00c      	beq.n	8009488 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800946e:	4b85      	ldr	r3, [pc, #532]	@ (8009684 <HAL_RCC_OscConfig+0x240>)
 8009470:	689b      	ldr	r3, [r3, #8]
 8009472:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8009476:	2b08      	cmp	r3, #8
 8009478:	d112      	bne.n	80094a0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800947a:	4b82      	ldr	r3, [pc, #520]	@ (8009684 <HAL_RCC_OscConfig+0x240>)
 800947c:	685b      	ldr	r3, [r3, #4]
 800947e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009482:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009486:	d10b      	bne.n	80094a0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009488:	4b7e      	ldr	r3, [pc, #504]	@ (8009684 <HAL_RCC_OscConfig+0x240>)
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009490:	2b00      	cmp	r3, #0
 8009492:	d05b      	beq.n	800954c <HAL_RCC_OscConfig+0x108>
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	685b      	ldr	r3, [r3, #4]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d157      	bne.n	800954c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800949c:	2301      	movs	r3, #1
 800949e:	e242      	b.n	8009926 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	685b      	ldr	r3, [r3, #4]
 80094a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80094a8:	d106      	bne.n	80094b8 <HAL_RCC_OscConfig+0x74>
 80094aa:	4b76      	ldr	r3, [pc, #472]	@ (8009684 <HAL_RCC_OscConfig+0x240>)
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	4a75      	ldr	r2, [pc, #468]	@ (8009684 <HAL_RCC_OscConfig+0x240>)
 80094b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80094b4:	6013      	str	r3, [r2, #0]
 80094b6:	e01d      	b.n	80094f4 <HAL_RCC_OscConfig+0xb0>
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	685b      	ldr	r3, [r3, #4]
 80094bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80094c0:	d10c      	bne.n	80094dc <HAL_RCC_OscConfig+0x98>
 80094c2:	4b70      	ldr	r3, [pc, #448]	@ (8009684 <HAL_RCC_OscConfig+0x240>)
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	4a6f      	ldr	r2, [pc, #444]	@ (8009684 <HAL_RCC_OscConfig+0x240>)
 80094c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80094cc:	6013      	str	r3, [r2, #0]
 80094ce:	4b6d      	ldr	r3, [pc, #436]	@ (8009684 <HAL_RCC_OscConfig+0x240>)
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	4a6c      	ldr	r2, [pc, #432]	@ (8009684 <HAL_RCC_OscConfig+0x240>)
 80094d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80094d8:	6013      	str	r3, [r2, #0]
 80094da:	e00b      	b.n	80094f4 <HAL_RCC_OscConfig+0xb0>
 80094dc:	4b69      	ldr	r3, [pc, #420]	@ (8009684 <HAL_RCC_OscConfig+0x240>)
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	4a68      	ldr	r2, [pc, #416]	@ (8009684 <HAL_RCC_OscConfig+0x240>)
 80094e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80094e6:	6013      	str	r3, [r2, #0]
 80094e8:	4b66      	ldr	r3, [pc, #408]	@ (8009684 <HAL_RCC_OscConfig+0x240>)
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	4a65      	ldr	r2, [pc, #404]	@ (8009684 <HAL_RCC_OscConfig+0x240>)
 80094ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80094f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	685b      	ldr	r3, [r3, #4]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d013      	beq.n	8009524 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80094fc:	f7fd fd30 	bl	8006f60 <HAL_GetTick>
 8009500:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009502:	e008      	b.n	8009516 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009504:	f7fd fd2c 	bl	8006f60 <HAL_GetTick>
 8009508:	4602      	mov	r2, r0
 800950a:	693b      	ldr	r3, [r7, #16]
 800950c:	1ad3      	subs	r3, r2, r3
 800950e:	2b64      	cmp	r3, #100	@ 0x64
 8009510:	d901      	bls.n	8009516 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009512:	2303      	movs	r3, #3
 8009514:	e207      	b.n	8009926 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009516:	4b5b      	ldr	r3, [pc, #364]	@ (8009684 <HAL_RCC_OscConfig+0x240>)
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800951e:	2b00      	cmp	r3, #0
 8009520:	d0f0      	beq.n	8009504 <HAL_RCC_OscConfig+0xc0>
 8009522:	e014      	b.n	800954e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009524:	f7fd fd1c 	bl	8006f60 <HAL_GetTick>
 8009528:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800952a:	e008      	b.n	800953e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800952c:	f7fd fd18 	bl	8006f60 <HAL_GetTick>
 8009530:	4602      	mov	r2, r0
 8009532:	693b      	ldr	r3, [r7, #16]
 8009534:	1ad3      	subs	r3, r2, r3
 8009536:	2b64      	cmp	r3, #100	@ 0x64
 8009538:	d901      	bls.n	800953e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800953a:	2303      	movs	r3, #3
 800953c:	e1f3      	b.n	8009926 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800953e:	4b51      	ldr	r3, [pc, #324]	@ (8009684 <HAL_RCC_OscConfig+0x240>)
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009546:	2b00      	cmp	r3, #0
 8009548:	d1f0      	bne.n	800952c <HAL_RCC_OscConfig+0xe8>
 800954a:	e000      	b.n	800954e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800954c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f003 0302 	and.w	r3, r3, #2
 8009556:	2b00      	cmp	r3, #0
 8009558:	d063      	beq.n	8009622 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800955a:	4b4a      	ldr	r3, [pc, #296]	@ (8009684 <HAL_RCC_OscConfig+0x240>)
 800955c:	689b      	ldr	r3, [r3, #8]
 800955e:	f003 030c 	and.w	r3, r3, #12
 8009562:	2b00      	cmp	r3, #0
 8009564:	d00b      	beq.n	800957e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009566:	4b47      	ldr	r3, [pc, #284]	@ (8009684 <HAL_RCC_OscConfig+0x240>)
 8009568:	689b      	ldr	r3, [r3, #8]
 800956a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800956e:	2b08      	cmp	r3, #8
 8009570:	d11c      	bne.n	80095ac <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009572:	4b44      	ldr	r3, [pc, #272]	@ (8009684 <HAL_RCC_OscConfig+0x240>)
 8009574:	685b      	ldr	r3, [r3, #4]
 8009576:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800957a:	2b00      	cmp	r3, #0
 800957c:	d116      	bne.n	80095ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800957e:	4b41      	ldr	r3, [pc, #260]	@ (8009684 <HAL_RCC_OscConfig+0x240>)
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	f003 0302 	and.w	r3, r3, #2
 8009586:	2b00      	cmp	r3, #0
 8009588:	d005      	beq.n	8009596 <HAL_RCC_OscConfig+0x152>
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	68db      	ldr	r3, [r3, #12]
 800958e:	2b01      	cmp	r3, #1
 8009590:	d001      	beq.n	8009596 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009592:	2301      	movs	r3, #1
 8009594:	e1c7      	b.n	8009926 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009596:	4b3b      	ldr	r3, [pc, #236]	@ (8009684 <HAL_RCC_OscConfig+0x240>)
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	691b      	ldr	r3, [r3, #16]
 80095a2:	00db      	lsls	r3, r3, #3
 80095a4:	4937      	ldr	r1, [pc, #220]	@ (8009684 <HAL_RCC_OscConfig+0x240>)
 80095a6:	4313      	orrs	r3, r2
 80095a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80095aa:	e03a      	b.n	8009622 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	68db      	ldr	r3, [r3, #12]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d020      	beq.n	80095f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80095b4:	4b34      	ldr	r3, [pc, #208]	@ (8009688 <HAL_RCC_OscConfig+0x244>)
 80095b6:	2201      	movs	r2, #1
 80095b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095ba:	f7fd fcd1 	bl	8006f60 <HAL_GetTick>
 80095be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80095c0:	e008      	b.n	80095d4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80095c2:	f7fd fccd 	bl	8006f60 <HAL_GetTick>
 80095c6:	4602      	mov	r2, r0
 80095c8:	693b      	ldr	r3, [r7, #16]
 80095ca:	1ad3      	subs	r3, r2, r3
 80095cc:	2b02      	cmp	r3, #2
 80095ce:	d901      	bls.n	80095d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80095d0:	2303      	movs	r3, #3
 80095d2:	e1a8      	b.n	8009926 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80095d4:	4b2b      	ldr	r3, [pc, #172]	@ (8009684 <HAL_RCC_OscConfig+0x240>)
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f003 0302 	and.w	r3, r3, #2
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d0f0      	beq.n	80095c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80095e0:	4b28      	ldr	r3, [pc, #160]	@ (8009684 <HAL_RCC_OscConfig+0x240>)
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	691b      	ldr	r3, [r3, #16]
 80095ec:	00db      	lsls	r3, r3, #3
 80095ee:	4925      	ldr	r1, [pc, #148]	@ (8009684 <HAL_RCC_OscConfig+0x240>)
 80095f0:	4313      	orrs	r3, r2
 80095f2:	600b      	str	r3, [r1, #0]
 80095f4:	e015      	b.n	8009622 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80095f6:	4b24      	ldr	r3, [pc, #144]	@ (8009688 <HAL_RCC_OscConfig+0x244>)
 80095f8:	2200      	movs	r2, #0
 80095fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095fc:	f7fd fcb0 	bl	8006f60 <HAL_GetTick>
 8009600:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009602:	e008      	b.n	8009616 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009604:	f7fd fcac 	bl	8006f60 <HAL_GetTick>
 8009608:	4602      	mov	r2, r0
 800960a:	693b      	ldr	r3, [r7, #16]
 800960c:	1ad3      	subs	r3, r2, r3
 800960e:	2b02      	cmp	r3, #2
 8009610:	d901      	bls.n	8009616 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009612:	2303      	movs	r3, #3
 8009614:	e187      	b.n	8009926 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009616:	4b1b      	ldr	r3, [pc, #108]	@ (8009684 <HAL_RCC_OscConfig+0x240>)
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	f003 0302 	and.w	r3, r3, #2
 800961e:	2b00      	cmp	r3, #0
 8009620:	d1f0      	bne.n	8009604 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	f003 0308 	and.w	r3, r3, #8
 800962a:	2b00      	cmp	r3, #0
 800962c:	d036      	beq.n	800969c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	695b      	ldr	r3, [r3, #20]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d016      	beq.n	8009664 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009636:	4b15      	ldr	r3, [pc, #84]	@ (800968c <HAL_RCC_OscConfig+0x248>)
 8009638:	2201      	movs	r2, #1
 800963a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800963c:	f7fd fc90 	bl	8006f60 <HAL_GetTick>
 8009640:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009642:	e008      	b.n	8009656 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009644:	f7fd fc8c 	bl	8006f60 <HAL_GetTick>
 8009648:	4602      	mov	r2, r0
 800964a:	693b      	ldr	r3, [r7, #16]
 800964c:	1ad3      	subs	r3, r2, r3
 800964e:	2b02      	cmp	r3, #2
 8009650:	d901      	bls.n	8009656 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009652:	2303      	movs	r3, #3
 8009654:	e167      	b.n	8009926 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009656:	4b0b      	ldr	r3, [pc, #44]	@ (8009684 <HAL_RCC_OscConfig+0x240>)
 8009658:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800965a:	f003 0302 	and.w	r3, r3, #2
 800965e:	2b00      	cmp	r3, #0
 8009660:	d0f0      	beq.n	8009644 <HAL_RCC_OscConfig+0x200>
 8009662:	e01b      	b.n	800969c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009664:	4b09      	ldr	r3, [pc, #36]	@ (800968c <HAL_RCC_OscConfig+0x248>)
 8009666:	2200      	movs	r2, #0
 8009668:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800966a:	f7fd fc79 	bl	8006f60 <HAL_GetTick>
 800966e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009670:	e00e      	b.n	8009690 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009672:	f7fd fc75 	bl	8006f60 <HAL_GetTick>
 8009676:	4602      	mov	r2, r0
 8009678:	693b      	ldr	r3, [r7, #16]
 800967a:	1ad3      	subs	r3, r2, r3
 800967c:	2b02      	cmp	r3, #2
 800967e:	d907      	bls.n	8009690 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009680:	2303      	movs	r3, #3
 8009682:	e150      	b.n	8009926 <HAL_RCC_OscConfig+0x4e2>
 8009684:	40023800 	.word	0x40023800
 8009688:	42470000 	.word	0x42470000
 800968c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009690:	4b88      	ldr	r3, [pc, #544]	@ (80098b4 <HAL_RCC_OscConfig+0x470>)
 8009692:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009694:	f003 0302 	and.w	r3, r3, #2
 8009698:	2b00      	cmp	r3, #0
 800969a:	d1ea      	bne.n	8009672 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	f003 0304 	and.w	r3, r3, #4
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	f000 8097 	beq.w	80097d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80096aa:	2300      	movs	r3, #0
 80096ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80096ae:	4b81      	ldr	r3, [pc, #516]	@ (80098b4 <HAL_RCC_OscConfig+0x470>)
 80096b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d10f      	bne.n	80096da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80096ba:	2300      	movs	r3, #0
 80096bc:	60bb      	str	r3, [r7, #8]
 80096be:	4b7d      	ldr	r3, [pc, #500]	@ (80098b4 <HAL_RCC_OscConfig+0x470>)
 80096c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096c2:	4a7c      	ldr	r2, [pc, #496]	@ (80098b4 <HAL_RCC_OscConfig+0x470>)
 80096c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80096c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80096ca:	4b7a      	ldr	r3, [pc, #488]	@ (80098b4 <HAL_RCC_OscConfig+0x470>)
 80096cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80096d2:	60bb      	str	r3, [r7, #8]
 80096d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80096d6:	2301      	movs	r3, #1
 80096d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80096da:	4b77      	ldr	r3, [pc, #476]	@ (80098b8 <HAL_RCC_OscConfig+0x474>)
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d118      	bne.n	8009718 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80096e6:	4b74      	ldr	r3, [pc, #464]	@ (80098b8 <HAL_RCC_OscConfig+0x474>)
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	4a73      	ldr	r2, [pc, #460]	@ (80098b8 <HAL_RCC_OscConfig+0x474>)
 80096ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80096f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80096f2:	f7fd fc35 	bl	8006f60 <HAL_GetTick>
 80096f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80096f8:	e008      	b.n	800970c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80096fa:	f7fd fc31 	bl	8006f60 <HAL_GetTick>
 80096fe:	4602      	mov	r2, r0
 8009700:	693b      	ldr	r3, [r7, #16]
 8009702:	1ad3      	subs	r3, r2, r3
 8009704:	2b02      	cmp	r3, #2
 8009706:	d901      	bls.n	800970c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8009708:	2303      	movs	r3, #3
 800970a:	e10c      	b.n	8009926 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800970c:	4b6a      	ldr	r3, [pc, #424]	@ (80098b8 <HAL_RCC_OscConfig+0x474>)
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009714:	2b00      	cmp	r3, #0
 8009716:	d0f0      	beq.n	80096fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	689b      	ldr	r3, [r3, #8]
 800971c:	2b01      	cmp	r3, #1
 800971e:	d106      	bne.n	800972e <HAL_RCC_OscConfig+0x2ea>
 8009720:	4b64      	ldr	r3, [pc, #400]	@ (80098b4 <HAL_RCC_OscConfig+0x470>)
 8009722:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009724:	4a63      	ldr	r2, [pc, #396]	@ (80098b4 <HAL_RCC_OscConfig+0x470>)
 8009726:	f043 0301 	orr.w	r3, r3, #1
 800972a:	6713      	str	r3, [r2, #112]	@ 0x70
 800972c:	e01c      	b.n	8009768 <HAL_RCC_OscConfig+0x324>
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	689b      	ldr	r3, [r3, #8]
 8009732:	2b05      	cmp	r3, #5
 8009734:	d10c      	bne.n	8009750 <HAL_RCC_OscConfig+0x30c>
 8009736:	4b5f      	ldr	r3, [pc, #380]	@ (80098b4 <HAL_RCC_OscConfig+0x470>)
 8009738:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800973a:	4a5e      	ldr	r2, [pc, #376]	@ (80098b4 <HAL_RCC_OscConfig+0x470>)
 800973c:	f043 0304 	orr.w	r3, r3, #4
 8009740:	6713      	str	r3, [r2, #112]	@ 0x70
 8009742:	4b5c      	ldr	r3, [pc, #368]	@ (80098b4 <HAL_RCC_OscConfig+0x470>)
 8009744:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009746:	4a5b      	ldr	r2, [pc, #364]	@ (80098b4 <HAL_RCC_OscConfig+0x470>)
 8009748:	f043 0301 	orr.w	r3, r3, #1
 800974c:	6713      	str	r3, [r2, #112]	@ 0x70
 800974e:	e00b      	b.n	8009768 <HAL_RCC_OscConfig+0x324>
 8009750:	4b58      	ldr	r3, [pc, #352]	@ (80098b4 <HAL_RCC_OscConfig+0x470>)
 8009752:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009754:	4a57      	ldr	r2, [pc, #348]	@ (80098b4 <HAL_RCC_OscConfig+0x470>)
 8009756:	f023 0301 	bic.w	r3, r3, #1
 800975a:	6713      	str	r3, [r2, #112]	@ 0x70
 800975c:	4b55      	ldr	r3, [pc, #340]	@ (80098b4 <HAL_RCC_OscConfig+0x470>)
 800975e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009760:	4a54      	ldr	r2, [pc, #336]	@ (80098b4 <HAL_RCC_OscConfig+0x470>)
 8009762:	f023 0304 	bic.w	r3, r3, #4
 8009766:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	689b      	ldr	r3, [r3, #8]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d015      	beq.n	800979c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009770:	f7fd fbf6 	bl	8006f60 <HAL_GetTick>
 8009774:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009776:	e00a      	b.n	800978e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009778:	f7fd fbf2 	bl	8006f60 <HAL_GetTick>
 800977c:	4602      	mov	r2, r0
 800977e:	693b      	ldr	r3, [r7, #16]
 8009780:	1ad3      	subs	r3, r2, r3
 8009782:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009786:	4293      	cmp	r3, r2
 8009788:	d901      	bls.n	800978e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800978a:	2303      	movs	r3, #3
 800978c:	e0cb      	b.n	8009926 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800978e:	4b49      	ldr	r3, [pc, #292]	@ (80098b4 <HAL_RCC_OscConfig+0x470>)
 8009790:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009792:	f003 0302 	and.w	r3, r3, #2
 8009796:	2b00      	cmp	r3, #0
 8009798:	d0ee      	beq.n	8009778 <HAL_RCC_OscConfig+0x334>
 800979a:	e014      	b.n	80097c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800979c:	f7fd fbe0 	bl	8006f60 <HAL_GetTick>
 80097a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80097a2:	e00a      	b.n	80097ba <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80097a4:	f7fd fbdc 	bl	8006f60 <HAL_GetTick>
 80097a8:	4602      	mov	r2, r0
 80097aa:	693b      	ldr	r3, [r7, #16]
 80097ac:	1ad3      	subs	r3, r2, r3
 80097ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80097b2:	4293      	cmp	r3, r2
 80097b4:	d901      	bls.n	80097ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80097b6:	2303      	movs	r3, #3
 80097b8:	e0b5      	b.n	8009926 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80097ba:	4b3e      	ldr	r3, [pc, #248]	@ (80098b4 <HAL_RCC_OscConfig+0x470>)
 80097bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80097be:	f003 0302 	and.w	r3, r3, #2
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d1ee      	bne.n	80097a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80097c6:	7dfb      	ldrb	r3, [r7, #23]
 80097c8:	2b01      	cmp	r3, #1
 80097ca:	d105      	bne.n	80097d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80097cc:	4b39      	ldr	r3, [pc, #228]	@ (80098b4 <HAL_RCC_OscConfig+0x470>)
 80097ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097d0:	4a38      	ldr	r2, [pc, #224]	@ (80098b4 <HAL_RCC_OscConfig+0x470>)
 80097d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80097d6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	699b      	ldr	r3, [r3, #24]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	f000 80a1 	beq.w	8009924 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80097e2:	4b34      	ldr	r3, [pc, #208]	@ (80098b4 <HAL_RCC_OscConfig+0x470>)
 80097e4:	689b      	ldr	r3, [r3, #8]
 80097e6:	f003 030c 	and.w	r3, r3, #12
 80097ea:	2b08      	cmp	r3, #8
 80097ec:	d05c      	beq.n	80098a8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	699b      	ldr	r3, [r3, #24]
 80097f2:	2b02      	cmp	r3, #2
 80097f4:	d141      	bne.n	800987a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80097f6:	4b31      	ldr	r3, [pc, #196]	@ (80098bc <HAL_RCC_OscConfig+0x478>)
 80097f8:	2200      	movs	r2, #0
 80097fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80097fc:	f7fd fbb0 	bl	8006f60 <HAL_GetTick>
 8009800:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009802:	e008      	b.n	8009816 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009804:	f7fd fbac 	bl	8006f60 <HAL_GetTick>
 8009808:	4602      	mov	r2, r0
 800980a:	693b      	ldr	r3, [r7, #16]
 800980c:	1ad3      	subs	r3, r2, r3
 800980e:	2b02      	cmp	r3, #2
 8009810:	d901      	bls.n	8009816 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8009812:	2303      	movs	r3, #3
 8009814:	e087      	b.n	8009926 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009816:	4b27      	ldr	r3, [pc, #156]	@ (80098b4 <HAL_RCC_OscConfig+0x470>)
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800981e:	2b00      	cmp	r3, #0
 8009820:	d1f0      	bne.n	8009804 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	69da      	ldr	r2, [r3, #28]
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	6a1b      	ldr	r3, [r3, #32]
 800982a:	431a      	orrs	r2, r3
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009830:	019b      	lsls	r3, r3, #6
 8009832:	431a      	orrs	r2, r3
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009838:	085b      	lsrs	r3, r3, #1
 800983a:	3b01      	subs	r3, #1
 800983c:	041b      	lsls	r3, r3, #16
 800983e:	431a      	orrs	r2, r3
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009844:	061b      	lsls	r3, r3, #24
 8009846:	491b      	ldr	r1, [pc, #108]	@ (80098b4 <HAL_RCC_OscConfig+0x470>)
 8009848:	4313      	orrs	r3, r2
 800984a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800984c:	4b1b      	ldr	r3, [pc, #108]	@ (80098bc <HAL_RCC_OscConfig+0x478>)
 800984e:	2201      	movs	r2, #1
 8009850:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009852:	f7fd fb85 	bl	8006f60 <HAL_GetTick>
 8009856:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009858:	e008      	b.n	800986c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800985a:	f7fd fb81 	bl	8006f60 <HAL_GetTick>
 800985e:	4602      	mov	r2, r0
 8009860:	693b      	ldr	r3, [r7, #16]
 8009862:	1ad3      	subs	r3, r2, r3
 8009864:	2b02      	cmp	r3, #2
 8009866:	d901      	bls.n	800986c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009868:	2303      	movs	r3, #3
 800986a:	e05c      	b.n	8009926 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800986c:	4b11      	ldr	r3, [pc, #68]	@ (80098b4 <HAL_RCC_OscConfig+0x470>)
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009874:	2b00      	cmp	r3, #0
 8009876:	d0f0      	beq.n	800985a <HAL_RCC_OscConfig+0x416>
 8009878:	e054      	b.n	8009924 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800987a:	4b10      	ldr	r3, [pc, #64]	@ (80098bc <HAL_RCC_OscConfig+0x478>)
 800987c:	2200      	movs	r2, #0
 800987e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009880:	f7fd fb6e 	bl	8006f60 <HAL_GetTick>
 8009884:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009886:	e008      	b.n	800989a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009888:	f7fd fb6a 	bl	8006f60 <HAL_GetTick>
 800988c:	4602      	mov	r2, r0
 800988e:	693b      	ldr	r3, [r7, #16]
 8009890:	1ad3      	subs	r3, r2, r3
 8009892:	2b02      	cmp	r3, #2
 8009894:	d901      	bls.n	800989a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8009896:	2303      	movs	r3, #3
 8009898:	e045      	b.n	8009926 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800989a:	4b06      	ldr	r3, [pc, #24]	@ (80098b4 <HAL_RCC_OscConfig+0x470>)
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d1f0      	bne.n	8009888 <HAL_RCC_OscConfig+0x444>
 80098a6:	e03d      	b.n	8009924 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	699b      	ldr	r3, [r3, #24]
 80098ac:	2b01      	cmp	r3, #1
 80098ae:	d107      	bne.n	80098c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80098b0:	2301      	movs	r3, #1
 80098b2:	e038      	b.n	8009926 <HAL_RCC_OscConfig+0x4e2>
 80098b4:	40023800 	.word	0x40023800
 80098b8:	40007000 	.word	0x40007000
 80098bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80098c0:	4b1b      	ldr	r3, [pc, #108]	@ (8009930 <HAL_RCC_OscConfig+0x4ec>)
 80098c2:	685b      	ldr	r3, [r3, #4]
 80098c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	699b      	ldr	r3, [r3, #24]
 80098ca:	2b01      	cmp	r3, #1
 80098cc:	d028      	beq.n	8009920 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80098d8:	429a      	cmp	r2, r3
 80098da:	d121      	bne.n	8009920 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80098e6:	429a      	cmp	r2, r3
 80098e8:	d11a      	bne.n	8009920 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80098ea:	68fa      	ldr	r2, [r7, #12]
 80098ec:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80098f0:	4013      	ands	r3, r2
 80098f2:	687a      	ldr	r2, [r7, #4]
 80098f4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80098f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80098f8:	4293      	cmp	r3, r2
 80098fa:	d111      	bne.n	8009920 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009906:	085b      	lsrs	r3, r3, #1
 8009908:	3b01      	subs	r3, #1
 800990a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800990c:	429a      	cmp	r2, r3
 800990e:	d107      	bne.n	8009920 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800991a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800991c:	429a      	cmp	r2, r3
 800991e:	d001      	beq.n	8009924 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8009920:	2301      	movs	r3, #1
 8009922:	e000      	b.n	8009926 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8009924:	2300      	movs	r3, #0
}
 8009926:	4618      	mov	r0, r3
 8009928:	3718      	adds	r7, #24
 800992a:	46bd      	mov	sp, r7
 800992c:	bd80      	pop	{r7, pc}
 800992e:	bf00      	nop
 8009930:	40023800 	.word	0x40023800

08009934 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009934:	b580      	push	{r7, lr}
 8009936:	b084      	sub	sp, #16
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
 800993c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d101      	bne.n	8009948 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009944:	2301      	movs	r3, #1
 8009946:	e0cc      	b.n	8009ae2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009948:	4b68      	ldr	r3, [pc, #416]	@ (8009aec <HAL_RCC_ClockConfig+0x1b8>)
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	f003 0307 	and.w	r3, r3, #7
 8009950:	683a      	ldr	r2, [r7, #0]
 8009952:	429a      	cmp	r2, r3
 8009954:	d90c      	bls.n	8009970 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009956:	4b65      	ldr	r3, [pc, #404]	@ (8009aec <HAL_RCC_ClockConfig+0x1b8>)
 8009958:	683a      	ldr	r2, [r7, #0]
 800995a:	b2d2      	uxtb	r2, r2
 800995c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800995e:	4b63      	ldr	r3, [pc, #396]	@ (8009aec <HAL_RCC_ClockConfig+0x1b8>)
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	f003 0307 	and.w	r3, r3, #7
 8009966:	683a      	ldr	r2, [r7, #0]
 8009968:	429a      	cmp	r2, r3
 800996a:	d001      	beq.n	8009970 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800996c:	2301      	movs	r3, #1
 800996e:	e0b8      	b.n	8009ae2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	f003 0302 	and.w	r3, r3, #2
 8009978:	2b00      	cmp	r3, #0
 800997a:	d020      	beq.n	80099be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	f003 0304 	and.w	r3, r3, #4
 8009984:	2b00      	cmp	r3, #0
 8009986:	d005      	beq.n	8009994 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009988:	4b59      	ldr	r3, [pc, #356]	@ (8009af0 <HAL_RCC_ClockConfig+0x1bc>)
 800998a:	689b      	ldr	r3, [r3, #8]
 800998c:	4a58      	ldr	r2, [pc, #352]	@ (8009af0 <HAL_RCC_ClockConfig+0x1bc>)
 800998e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8009992:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	f003 0308 	and.w	r3, r3, #8
 800999c:	2b00      	cmp	r3, #0
 800999e:	d005      	beq.n	80099ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80099a0:	4b53      	ldr	r3, [pc, #332]	@ (8009af0 <HAL_RCC_ClockConfig+0x1bc>)
 80099a2:	689b      	ldr	r3, [r3, #8]
 80099a4:	4a52      	ldr	r2, [pc, #328]	@ (8009af0 <HAL_RCC_ClockConfig+0x1bc>)
 80099a6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80099aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80099ac:	4b50      	ldr	r3, [pc, #320]	@ (8009af0 <HAL_RCC_ClockConfig+0x1bc>)
 80099ae:	689b      	ldr	r3, [r3, #8]
 80099b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	689b      	ldr	r3, [r3, #8]
 80099b8:	494d      	ldr	r1, [pc, #308]	@ (8009af0 <HAL_RCC_ClockConfig+0x1bc>)
 80099ba:	4313      	orrs	r3, r2
 80099bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	f003 0301 	and.w	r3, r3, #1
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d044      	beq.n	8009a54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	685b      	ldr	r3, [r3, #4]
 80099ce:	2b01      	cmp	r3, #1
 80099d0:	d107      	bne.n	80099e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80099d2:	4b47      	ldr	r3, [pc, #284]	@ (8009af0 <HAL_RCC_ClockConfig+0x1bc>)
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d119      	bne.n	8009a12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80099de:	2301      	movs	r3, #1
 80099e0:	e07f      	b.n	8009ae2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	685b      	ldr	r3, [r3, #4]
 80099e6:	2b02      	cmp	r3, #2
 80099e8:	d003      	beq.n	80099f2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80099ee:	2b03      	cmp	r3, #3
 80099f0:	d107      	bne.n	8009a02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80099f2:	4b3f      	ldr	r3, [pc, #252]	@ (8009af0 <HAL_RCC_ClockConfig+0x1bc>)
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d109      	bne.n	8009a12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80099fe:	2301      	movs	r3, #1
 8009a00:	e06f      	b.n	8009ae2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009a02:	4b3b      	ldr	r3, [pc, #236]	@ (8009af0 <HAL_RCC_ClockConfig+0x1bc>)
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	f003 0302 	and.w	r3, r3, #2
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d101      	bne.n	8009a12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009a0e:	2301      	movs	r3, #1
 8009a10:	e067      	b.n	8009ae2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009a12:	4b37      	ldr	r3, [pc, #220]	@ (8009af0 <HAL_RCC_ClockConfig+0x1bc>)
 8009a14:	689b      	ldr	r3, [r3, #8]
 8009a16:	f023 0203 	bic.w	r2, r3, #3
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	685b      	ldr	r3, [r3, #4]
 8009a1e:	4934      	ldr	r1, [pc, #208]	@ (8009af0 <HAL_RCC_ClockConfig+0x1bc>)
 8009a20:	4313      	orrs	r3, r2
 8009a22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009a24:	f7fd fa9c 	bl	8006f60 <HAL_GetTick>
 8009a28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009a2a:	e00a      	b.n	8009a42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009a2c:	f7fd fa98 	bl	8006f60 <HAL_GetTick>
 8009a30:	4602      	mov	r2, r0
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	1ad3      	subs	r3, r2, r3
 8009a36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009a3a:	4293      	cmp	r3, r2
 8009a3c:	d901      	bls.n	8009a42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009a3e:	2303      	movs	r3, #3
 8009a40:	e04f      	b.n	8009ae2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009a42:	4b2b      	ldr	r3, [pc, #172]	@ (8009af0 <HAL_RCC_ClockConfig+0x1bc>)
 8009a44:	689b      	ldr	r3, [r3, #8]
 8009a46:	f003 020c 	and.w	r2, r3, #12
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	685b      	ldr	r3, [r3, #4]
 8009a4e:	009b      	lsls	r3, r3, #2
 8009a50:	429a      	cmp	r2, r3
 8009a52:	d1eb      	bne.n	8009a2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009a54:	4b25      	ldr	r3, [pc, #148]	@ (8009aec <HAL_RCC_ClockConfig+0x1b8>)
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	f003 0307 	and.w	r3, r3, #7
 8009a5c:	683a      	ldr	r2, [r7, #0]
 8009a5e:	429a      	cmp	r2, r3
 8009a60:	d20c      	bcs.n	8009a7c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009a62:	4b22      	ldr	r3, [pc, #136]	@ (8009aec <HAL_RCC_ClockConfig+0x1b8>)
 8009a64:	683a      	ldr	r2, [r7, #0]
 8009a66:	b2d2      	uxtb	r2, r2
 8009a68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009a6a:	4b20      	ldr	r3, [pc, #128]	@ (8009aec <HAL_RCC_ClockConfig+0x1b8>)
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	f003 0307 	and.w	r3, r3, #7
 8009a72:	683a      	ldr	r2, [r7, #0]
 8009a74:	429a      	cmp	r2, r3
 8009a76:	d001      	beq.n	8009a7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009a78:	2301      	movs	r3, #1
 8009a7a:	e032      	b.n	8009ae2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	f003 0304 	and.w	r3, r3, #4
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d008      	beq.n	8009a9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009a88:	4b19      	ldr	r3, [pc, #100]	@ (8009af0 <HAL_RCC_ClockConfig+0x1bc>)
 8009a8a:	689b      	ldr	r3, [r3, #8]
 8009a8c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	68db      	ldr	r3, [r3, #12]
 8009a94:	4916      	ldr	r1, [pc, #88]	@ (8009af0 <HAL_RCC_ClockConfig+0x1bc>)
 8009a96:	4313      	orrs	r3, r2
 8009a98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	f003 0308 	and.w	r3, r3, #8
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d009      	beq.n	8009aba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009aa6:	4b12      	ldr	r3, [pc, #72]	@ (8009af0 <HAL_RCC_ClockConfig+0x1bc>)
 8009aa8:	689b      	ldr	r3, [r3, #8]
 8009aaa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	691b      	ldr	r3, [r3, #16]
 8009ab2:	00db      	lsls	r3, r3, #3
 8009ab4:	490e      	ldr	r1, [pc, #56]	@ (8009af0 <HAL_RCC_ClockConfig+0x1bc>)
 8009ab6:	4313      	orrs	r3, r2
 8009ab8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8009aba:	f000 f821 	bl	8009b00 <HAL_RCC_GetSysClockFreq>
 8009abe:	4602      	mov	r2, r0
 8009ac0:	4b0b      	ldr	r3, [pc, #44]	@ (8009af0 <HAL_RCC_ClockConfig+0x1bc>)
 8009ac2:	689b      	ldr	r3, [r3, #8]
 8009ac4:	091b      	lsrs	r3, r3, #4
 8009ac6:	f003 030f 	and.w	r3, r3, #15
 8009aca:	490a      	ldr	r1, [pc, #40]	@ (8009af4 <HAL_RCC_ClockConfig+0x1c0>)
 8009acc:	5ccb      	ldrb	r3, [r1, r3]
 8009ace:	fa22 f303 	lsr.w	r3, r2, r3
 8009ad2:	4a09      	ldr	r2, [pc, #36]	@ (8009af8 <HAL_RCC_ClockConfig+0x1c4>)
 8009ad4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8009ad6:	4b09      	ldr	r3, [pc, #36]	@ (8009afc <HAL_RCC_ClockConfig+0x1c8>)
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	4618      	mov	r0, r3
 8009adc:	f7fd f9fc 	bl	8006ed8 <HAL_InitTick>

  return HAL_OK;
 8009ae0:	2300      	movs	r3, #0
}
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	3710      	adds	r7, #16
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	bd80      	pop	{r7, pc}
 8009aea:	bf00      	nop
 8009aec:	40023c00 	.word	0x40023c00
 8009af0:	40023800 	.word	0x40023800
 8009af4:	080232f0 	.word	0x080232f0
 8009af8:	200008f0 	.word	0x200008f0
 8009afc:	200008f4 	.word	0x200008f4

08009b00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009b00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009b04:	b094      	sub	sp, #80	@ 0x50
 8009b06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8009b08:	2300      	movs	r3, #0
 8009b0a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8009b10:	2300      	movs	r3, #0
 8009b12:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8009b14:	2300      	movs	r3, #0
 8009b16:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009b18:	4b79      	ldr	r3, [pc, #484]	@ (8009d00 <HAL_RCC_GetSysClockFreq+0x200>)
 8009b1a:	689b      	ldr	r3, [r3, #8]
 8009b1c:	f003 030c 	and.w	r3, r3, #12
 8009b20:	2b08      	cmp	r3, #8
 8009b22:	d00d      	beq.n	8009b40 <HAL_RCC_GetSysClockFreq+0x40>
 8009b24:	2b08      	cmp	r3, #8
 8009b26:	f200 80e1 	bhi.w	8009cec <HAL_RCC_GetSysClockFreq+0x1ec>
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d002      	beq.n	8009b34 <HAL_RCC_GetSysClockFreq+0x34>
 8009b2e:	2b04      	cmp	r3, #4
 8009b30:	d003      	beq.n	8009b3a <HAL_RCC_GetSysClockFreq+0x3a>
 8009b32:	e0db      	b.n	8009cec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009b34:	4b73      	ldr	r3, [pc, #460]	@ (8009d04 <HAL_RCC_GetSysClockFreq+0x204>)
 8009b36:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8009b38:	e0db      	b.n	8009cf2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009b3a:	4b73      	ldr	r3, [pc, #460]	@ (8009d08 <HAL_RCC_GetSysClockFreq+0x208>)
 8009b3c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8009b3e:	e0d8      	b.n	8009cf2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009b40:	4b6f      	ldr	r3, [pc, #444]	@ (8009d00 <HAL_RCC_GetSysClockFreq+0x200>)
 8009b42:	685b      	ldr	r3, [r3, #4]
 8009b44:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009b48:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009b4a:	4b6d      	ldr	r3, [pc, #436]	@ (8009d00 <HAL_RCC_GetSysClockFreq+0x200>)
 8009b4c:	685b      	ldr	r3, [r3, #4]
 8009b4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d063      	beq.n	8009c1e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009b56:	4b6a      	ldr	r3, [pc, #424]	@ (8009d00 <HAL_RCC_GetSysClockFreq+0x200>)
 8009b58:	685b      	ldr	r3, [r3, #4]
 8009b5a:	099b      	lsrs	r3, r3, #6
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009b60:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8009b62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b68:	633b      	str	r3, [r7, #48]	@ 0x30
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b6e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8009b72:	4622      	mov	r2, r4
 8009b74:	462b      	mov	r3, r5
 8009b76:	f04f 0000 	mov.w	r0, #0
 8009b7a:	f04f 0100 	mov.w	r1, #0
 8009b7e:	0159      	lsls	r1, r3, #5
 8009b80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009b84:	0150      	lsls	r0, r2, #5
 8009b86:	4602      	mov	r2, r0
 8009b88:	460b      	mov	r3, r1
 8009b8a:	4621      	mov	r1, r4
 8009b8c:	1a51      	subs	r1, r2, r1
 8009b8e:	6139      	str	r1, [r7, #16]
 8009b90:	4629      	mov	r1, r5
 8009b92:	eb63 0301 	sbc.w	r3, r3, r1
 8009b96:	617b      	str	r3, [r7, #20]
 8009b98:	f04f 0200 	mov.w	r2, #0
 8009b9c:	f04f 0300 	mov.w	r3, #0
 8009ba0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009ba4:	4659      	mov	r1, fp
 8009ba6:	018b      	lsls	r3, r1, #6
 8009ba8:	4651      	mov	r1, sl
 8009baa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009bae:	4651      	mov	r1, sl
 8009bb0:	018a      	lsls	r2, r1, #6
 8009bb2:	4651      	mov	r1, sl
 8009bb4:	ebb2 0801 	subs.w	r8, r2, r1
 8009bb8:	4659      	mov	r1, fp
 8009bba:	eb63 0901 	sbc.w	r9, r3, r1
 8009bbe:	f04f 0200 	mov.w	r2, #0
 8009bc2:	f04f 0300 	mov.w	r3, #0
 8009bc6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009bca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009bce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009bd2:	4690      	mov	r8, r2
 8009bd4:	4699      	mov	r9, r3
 8009bd6:	4623      	mov	r3, r4
 8009bd8:	eb18 0303 	adds.w	r3, r8, r3
 8009bdc:	60bb      	str	r3, [r7, #8]
 8009bde:	462b      	mov	r3, r5
 8009be0:	eb49 0303 	adc.w	r3, r9, r3
 8009be4:	60fb      	str	r3, [r7, #12]
 8009be6:	f04f 0200 	mov.w	r2, #0
 8009bea:	f04f 0300 	mov.w	r3, #0
 8009bee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8009bf2:	4629      	mov	r1, r5
 8009bf4:	024b      	lsls	r3, r1, #9
 8009bf6:	4621      	mov	r1, r4
 8009bf8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8009bfc:	4621      	mov	r1, r4
 8009bfe:	024a      	lsls	r2, r1, #9
 8009c00:	4610      	mov	r0, r2
 8009c02:	4619      	mov	r1, r3
 8009c04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009c06:	2200      	movs	r2, #0
 8009c08:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009c0a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009c0c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009c10:	f7f7 f958 	bl	8000ec4 <__aeabi_uldivmod>
 8009c14:	4602      	mov	r2, r0
 8009c16:	460b      	mov	r3, r1
 8009c18:	4613      	mov	r3, r2
 8009c1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009c1c:	e058      	b.n	8009cd0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009c1e:	4b38      	ldr	r3, [pc, #224]	@ (8009d00 <HAL_RCC_GetSysClockFreq+0x200>)
 8009c20:	685b      	ldr	r3, [r3, #4]
 8009c22:	099b      	lsrs	r3, r3, #6
 8009c24:	2200      	movs	r2, #0
 8009c26:	4618      	mov	r0, r3
 8009c28:	4611      	mov	r1, r2
 8009c2a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8009c2e:	623b      	str	r3, [r7, #32]
 8009c30:	2300      	movs	r3, #0
 8009c32:	627b      	str	r3, [r7, #36]	@ 0x24
 8009c34:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8009c38:	4642      	mov	r2, r8
 8009c3a:	464b      	mov	r3, r9
 8009c3c:	f04f 0000 	mov.w	r0, #0
 8009c40:	f04f 0100 	mov.w	r1, #0
 8009c44:	0159      	lsls	r1, r3, #5
 8009c46:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009c4a:	0150      	lsls	r0, r2, #5
 8009c4c:	4602      	mov	r2, r0
 8009c4e:	460b      	mov	r3, r1
 8009c50:	4641      	mov	r1, r8
 8009c52:	ebb2 0a01 	subs.w	sl, r2, r1
 8009c56:	4649      	mov	r1, r9
 8009c58:	eb63 0b01 	sbc.w	fp, r3, r1
 8009c5c:	f04f 0200 	mov.w	r2, #0
 8009c60:	f04f 0300 	mov.w	r3, #0
 8009c64:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8009c68:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8009c6c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8009c70:	ebb2 040a 	subs.w	r4, r2, sl
 8009c74:	eb63 050b 	sbc.w	r5, r3, fp
 8009c78:	f04f 0200 	mov.w	r2, #0
 8009c7c:	f04f 0300 	mov.w	r3, #0
 8009c80:	00eb      	lsls	r3, r5, #3
 8009c82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009c86:	00e2      	lsls	r2, r4, #3
 8009c88:	4614      	mov	r4, r2
 8009c8a:	461d      	mov	r5, r3
 8009c8c:	4643      	mov	r3, r8
 8009c8e:	18e3      	adds	r3, r4, r3
 8009c90:	603b      	str	r3, [r7, #0]
 8009c92:	464b      	mov	r3, r9
 8009c94:	eb45 0303 	adc.w	r3, r5, r3
 8009c98:	607b      	str	r3, [r7, #4]
 8009c9a:	f04f 0200 	mov.w	r2, #0
 8009c9e:	f04f 0300 	mov.w	r3, #0
 8009ca2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009ca6:	4629      	mov	r1, r5
 8009ca8:	028b      	lsls	r3, r1, #10
 8009caa:	4621      	mov	r1, r4
 8009cac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009cb0:	4621      	mov	r1, r4
 8009cb2:	028a      	lsls	r2, r1, #10
 8009cb4:	4610      	mov	r0, r2
 8009cb6:	4619      	mov	r1, r3
 8009cb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009cba:	2200      	movs	r2, #0
 8009cbc:	61bb      	str	r3, [r7, #24]
 8009cbe:	61fa      	str	r2, [r7, #28]
 8009cc0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009cc4:	f7f7 f8fe 	bl	8000ec4 <__aeabi_uldivmod>
 8009cc8:	4602      	mov	r2, r0
 8009cca:	460b      	mov	r3, r1
 8009ccc:	4613      	mov	r3, r2
 8009cce:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8009cd0:	4b0b      	ldr	r3, [pc, #44]	@ (8009d00 <HAL_RCC_GetSysClockFreq+0x200>)
 8009cd2:	685b      	ldr	r3, [r3, #4]
 8009cd4:	0c1b      	lsrs	r3, r3, #16
 8009cd6:	f003 0303 	and.w	r3, r3, #3
 8009cda:	3301      	adds	r3, #1
 8009cdc:	005b      	lsls	r3, r3, #1
 8009cde:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8009ce0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009ce2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009ce4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ce8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8009cea:	e002      	b.n	8009cf2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009cec:	4b05      	ldr	r3, [pc, #20]	@ (8009d04 <HAL_RCC_GetSysClockFreq+0x204>)
 8009cee:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8009cf0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009cf2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	3750      	adds	r7, #80	@ 0x50
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009cfe:	bf00      	nop
 8009d00:	40023800 	.word	0x40023800
 8009d04:	00f42400 	.word	0x00f42400
 8009d08:	007a1200 	.word	0x007a1200

08009d0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009d0c:	b480      	push	{r7}
 8009d0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009d10:	4b03      	ldr	r3, [pc, #12]	@ (8009d20 <HAL_RCC_GetHCLKFreq+0x14>)
 8009d12:	681b      	ldr	r3, [r3, #0]
}
 8009d14:	4618      	mov	r0, r3
 8009d16:	46bd      	mov	sp, r7
 8009d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1c:	4770      	bx	lr
 8009d1e:	bf00      	nop
 8009d20:	200008f0 	.word	0x200008f0

08009d24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009d28:	f7ff fff0 	bl	8009d0c <HAL_RCC_GetHCLKFreq>
 8009d2c:	4602      	mov	r2, r0
 8009d2e:	4b05      	ldr	r3, [pc, #20]	@ (8009d44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009d30:	689b      	ldr	r3, [r3, #8]
 8009d32:	0a9b      	lsrs	r3, r3, #10
 8009d34:	f003 0307 	and.w	r3, r3, #7
 8009d38:	4903      	ldr	r1, [pc, #12]	@ (8009d48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009d3a:	5ccb      	ldrb	r3, [r1, r3]
 8009d3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009d40:	4618      	mov	r0, r3
 8009d42:	bd80      	pop	{r7, pc}
 8009d44:	40023800 	.word	0x40023800
 8009d48:	08023300 	.word	0x08023300

08009d4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009d50:	f7ff ffdc 	bl	8009d0c <HAL_RCC_GetHCLKFreq>
 8009d54:	4602      	mov	r2, r0
 8009d56:	4b05      	ldr	r3, [pc, #20]	@ (8009d6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8009d58:	689b      	ldr	r3, [r3, #8]
 8009d5a:	0b5b      	lsrs	r3, r3, #13
 8009d5c:	f003 0307 	and.w	r3, r3, #7
 8009d60:	4903      	ldr	r1, [pc, #12]	@ (8009d70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009d62:	5ccb      	ldrb	r3, [r1, r3]
 8009d64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009d68:	4618      	mov	r0, r3
 8009d6a:	bd80      	pop	{r7, pc}
 8009d6c:	40023800 	.word	0x40023800
 8009d70:	08023300 	.word	0x08023300

08009d74 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b082      	sub	sp, #8
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d101      	bne.n	8009d86 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009d82:	2301      	movs	r3, #1
 8009d84:	e07b      	b.n	8009e7e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d108      	bne.n	8009da0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	685b      	ldr	r3, [r3, #4]
 8009d92:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009d96:	d009      	beq.n	8009dac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	61da      	str	r2, [r3, #28]
 8009d9e:	e005      	b.n	8009dac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	2200      	movs	r2, #0
 8009da4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	2200      	movs	r2, #0
 8009daa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	2200      	movs	r2, #0
 8009db0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009db8:	b2db      	uxtb	r3, r3
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d106      	bne.n	8009dcc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009dc6:	6878      	ldr	r0, [r7, #4]
 8009dc8:	f7fc fc66 	bl	8006698 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2202      	movs	r2, #2
 8009dd0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	681a      	ldr	r2, [r3, #0]
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009de2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	685b      	ldr	r3, [r3, #4]
 8009de8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	689b      	ldr	r3, [r3, #8]
 8009df0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8009df4:	431a      	orrs	r2, r3
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	68db      	ldr	r3, [r3, #12]
 8009dfa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009dfe:	431a      	orrs	r2, r3
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	691b      	ldr	r3, [r3, #16]
 8009e04:	f003 0302 	and.w	r3, r3, #2
 8009e08:	431a      	orrs	r2, r3
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	695b      	ldr	r3, [r3, #20]
 8009e0e:	f003 0301 	and.w	r3, r3, #1
 8009e12:	431a      	orrs	r2, r3
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	699b      	ldr	r3, [r3, #24]
 8009e18:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009e1c:	431a      	orrs	r2, r3
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	69db      	ldr	r3, [r3, #28]
 8009e22:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009e26:	431a      	orrs	r2, r3
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	6a1b      	ldr	r3, [r3, #32]
 8009e2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e30:	ea42 0103 	orr.w	r1, r2, r3
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e38:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	430a      	orrs	r2, r1
 8009e42:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	699b      	ldr	r3, [r3, #24]
 8009e48:	0c1b      	lsrs	r3, r3, #16
 8009e4a:	f003 0104 	and.w	r1, r3, #4
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e52:	f003 0210 	and.w	r2, r3, #16
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	430a      	orrs	r2, r1
 8009e5c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	69da      	ldr	r2, [r3, #28]
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009e6c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	2200      	movs	r2, #0
 8009e72:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2201      	movs	r2, #1
 8009e78:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8009e7c:	2300      	movs	r3, #0
}
 8009e7e:	4618      	mov	r0, r3
 8009e80:	3708      	adds	r7, #8
 8009e82:	46bd      	mov	sp, r7
 8009e84:	bd80      	pop	{r7, pc}

08009e86 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009e86:	b580      	push	{r7, lr}
 8009e88:	b082      	sub	sp, #8
 8009e8a:	af00      	add	r7, sp, #0
 8009e8c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d101      	bne.n	8009e98 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009e94:	2301      	movs	r3, #1
 8009e96:	e041      	b.n	8009f1c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009e9e:	b2db      	uxtb	r3, r3
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d106      	bne.n	8009eb2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009eac:	6878      	ldr	r0, [r7, #4]
 8009eae:	f7fc fc3b 	bl	8006728 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	2202      	movs	r2, #2
 8009eb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681a      	ldr	r2, [r3, #0]
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	3304      	adds	r3, #4
 8009ec2:	4619      	mov	r1, r3
 8009ec4:	4610      	mov	r0, r2
 8009ec6:	f000 fbd1 	bl	800a66c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	2201      	movs	r2, #1
 8009ece:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	2201      	movs	r2, #1
 8009ed6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2201      	movs	r2, #1
 8009ede:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	2201      	movs	r2, #1
 8009ee6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	2201      	movs	r2, #1
 8009eee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	2201      	movs	r2, #1
 8009ef6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	2201      	movs	r2, #1
 8009efe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	2201      	movs	r2, #1
 8009f06:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	2201      	movs	r2, #1
 8009f0e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	2201      	movs	r2, #1
 8009f16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009f1a:	2300      	movs	r3, #0
}
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	3708      	adds	r7, #8
 8009f20:	46bd      	mov	sp, r7
 8009f22:	bd80      	pop	{r7, pc}

08009f24 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009f24:	b480      	push	{r7}
 8009f26:	b085      	sub	sp, #20
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009f32:	b2db      	uxtb	r3, r3
 8009f34:	2b01      	cmp	r3, #1
 8009f36:	d001      	beq.n	8009f3c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009f38:	2301      	movs	r3, #1
 8009f3a:	e04e      	b.n	8009fda <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2202      	movs	r2, #2
 8009f40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	68da      	ldr	r2, [r3, #12]
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	f042 0201 	orr.w	r2, r2, #1
 8009f52:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	4a23      	ldr	r2, [pc, #140]	@ (8009fe8 <HAL_TIM_Base_Start_IT+0xc4>)
 8009f5a:	4293      	cmp	r3, r2
 8009f5c:	d022      	beq.n	8009fa4 <HAL_TIM_Base_Start_IT+0x80>
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009f66:	d01d      	beq.n	8009fa4 <HAL_TIM_Base_Start_IT+0x80>
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	4a1f      	ldr	r2, [pc, #124]	@ (8009fec <HAL_TIM_Base_Start_IT+0xc8>)
 8009f6e:	4293      	cmp	r3, r2
 8009f70:	d018      	beq.n	8009fa4 <HAL_TIM_Base_Start_IT+0x80>
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	4a1e      	ldr	r2, [pc, #120]	@ (8009ff0 <HAL_TIM_Base_Start_IT+0xcc>)
 8009f78:	4293      	cmp	r3, r2
 8009f7a:	d013      	beq.n	8009fa4 <HAL_TIM_Base_Start_IT+0x80>
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	4a1c      	ldr	r2, [pc, #112]	@ (8009ff4 <HAL_TIM_Base_Start_IT+0xd0>)
 8009f82:	4293      	cmp	r3, r2
 8009f84:	d00e      	beq.n	8009fa4 <HAL_TIM_Base_Start_IT+0x80>
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	4a1b      	ldr	r2, [pc, #108]	@ (8009ff8 <HAL_TIM_Base_Start_IT+0xd4>)
 8009f8c:	4293      	cmp	r3, r2
 8009f8e:	d009      	beq.n	8009fa4 <HAL_TIM_Base_Start_IT+0x80>
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	4a19      	ldr	r2, [pc, #100]	@ (8009ffc <HAL_TIM_Base_Start_IT+0xd8>)
 8009f96:	4293      	cmp	r3, r2
 8009f98:	d004      	beq.n	8009fa4 <HAL_TIM_Base_Start_IT+0x80>
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	4a18      	ldr	r2, [pc, #96]	@ (800a000 <HAL_TIM_Base_Start_IT+0xdc>)
 8009fa0:	4293      	cmp	r3, r2
 8009fa2:	d111      	bne.n	8009fc8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	689b      	ldr	r3, [r3, #8]
 8009faa:	f003 0307 	and.w	r3, r3, #7
 8009fae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	2b06      	cmp	r3, #6
 8009fb4:	d010      	beq.n	8009fd8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	681a      	ldr	r2, [r3, #0]
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	f042 0201 	orr.w	r2, r2, #1
 8009fc4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009fc6:	e007      	b.n	8009fd8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	681a      	ldr	r2, [r3, #0]
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	f042 0201 	orr.w	r2, r2, #1
 8009fd6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009fd8:	2300      	movs	r3, #0
}
 8009fda:	4618      	mov	r0, r3
 8009fdc:	3714      	adds	r7, #20
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe4:	4770      	bx	lr
 8009fe6:	bf00      	nop
 8009fe8:	40010000 	.word	0x40010000
 8009fec:	40000400 	.word	0x40000400
 8009ff0:	40000800 	.word	0x40000800
 8009ff4:	40000c00 	.word	0x40000c00
 8009ff8:	40010400 	.word	0x40010400
 8009ffc:	40014000 	.word	0x40014000
 800a000:	40001800 	.word	0x40001800

0800a004 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800a004:	b480      	push	{r7}
 800a006:	b083      	sub	sp, #12
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	68da      	ldr	r2, [r3, #12]
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	f022 0201 	bic.w	r2, r2, #1
 800a01a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	6a1a      	ldr	r2, [r3, #32]
 800a022:	f241 1311 	movw	r3, #4369	@ 0x1111
 800a026:	4013      	ands	r3, r2
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d10f      	bne.n	800a04c <HAL_TIM_Base_Stop_IT+0x48>
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	6a1a      	ldr	r2, [r3, #32]
 800a032:	f240 4344 	movw	r3, #1092	@ 0x444
 800a036:	4013      	ands	r3, r2
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d107      	bne.n	800a04c <HAL_TIM_Base_Stop_IT+0x48>
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	681a      	ldr	r2, [r3, #0]
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	f022 0201 	bic.w	r2, r2, #1
 800a04a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2201      	movs	r2, #1
 800a050:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800a054:	2300      	movs	r3, #0
}
 800a056:	4618      	mov	r0, r3
 800a058:	370c      	adds	r7, #12
 800a05a:	46bd      	mov	sp, r7
 800a05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a060:	4770      	bx	lr

0800a062 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a062:	b580      	push	{r7, lr}
 800a064:	b082      	sub	sp, #8
 800a066:	af00      	add	r7, sp, #0
 800a068:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d101      	bne.n	800a074 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a070:	2301      	movs	r3, #1
 800a072:	e041      	b.n	800a0f8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a07a:	b2db      	uxtb	r3, r3
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d106      	bne.n	800a08e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2200      	movs	r2, #0
 800a084:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a088:	6878      	ldr	r0, [r7, #4]
 800a08a:	f000 f839 	bl	800a100 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	2202      	movs	r2, #2
 800a092:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681a      	ldr	r2, [r3, #0]
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	3304      	adds	r3, #4
 800a09e:	4619      	mov	r1, r3
 800a0a0:	4610      	mov	r0, r2
 800a0a2:	f000 fae3 	bl	800a66c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2201      	movs	r2, #1
 800a0aa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2201      	movs	r2, #1
 800a0b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	2201      	movs	r2, #1
 800a0ba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	2201      	movs	r2, #1
 800a0c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	2201      	movs	r2, #1
 800a0ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	2201      	movs	r2, #1
 800a0d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	2201      	movs	r2, #1
 800a0da:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	2201      	movs	r2, #1
 800a0e2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	2201      	movs	r2, #1
 800a0ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2201      	movs	r2, #1
 800a0f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a0f6:	2300      	movs	r3, #0
}
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	3708      	adds	r7, #8
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	bd80      	pop	{r7, pc}

0800a100 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a100:	b480      	push	{r7}
 800a102:	b083      	sub	sp, #12
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a108:	bf00      	nop
 800a10a:	370c      	adds	r7, #12
 800a10c:	46bd      	mov	sp, r7
 800a10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a112:	4770      	bx	lr

0800a114 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b084      	sub	sp, #16
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	68db      	ldr	r3, [r3, #12]
 800a122:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	691b      	ldr	r3, [r3, #16]
 800a12a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a12c:	68bb      	ldr	r3, [r7, #8]
 800a12e:	f003 0302 	and.w	r3, r3, #2
 800a132:	2b00      	cmp	r3, #0
 800a134:	d020      	beq.n	800a178 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	f003 0302 	and.w	r3, r3, #2
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d01b      	beq.n	800a178 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	f06f 0202 	mvn.w	r2, #2
 800a148:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2201      	movs	r2, #1
 800a14e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	699b      	ldr	r3, [r3, #24]
 800a156:	f003 0303 	and.w	r3, r3, #3
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d003      	beq.n	800a166 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a15e:	6878      	ldr	r0, [r7, #4]
 800a160:	f000 fa65 	bl	800a62e <HAL_TIM_IC_CaptureCallback>
 800a164:	e005      	b.n	800a172 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a166:	6878      	ldr	r0, [r7, #4]
 800a168:	f000 fa57 	bl	800a61a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a16c:	6878      	ldr	r0, [r7, #4]
 800a16e:	f000 fa68 	bl	800a642 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	2200      	movs	r2, #0
 800a176:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a178:	68bb      	ldr	r3, [r7, #8]
 800a17a:	f003 0304 	and.w	r3, r3, #4
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d020      	beq.n	800a1c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	f003 0304 	and.w	r3, r3, #4
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d01b      	beq.n	800a1c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	f06f 0204 	mvn.w	r2, #4
 800a194:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	2202      	movs	r2, #2
 800a19a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	699b      	ldr	r3, [r3, #24]
 800a1a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d003      	beq.n	800a1b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a1aa:	6878      	ldr	r0, [r7, #4]
 800a1ac:	f000 fa3f 	bl	800a62e <HAL_TIM_IC_CaptureCallback>
 800a1b0:	e005      	b.n	800a1be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a1b2:	6878      	ldr	r0, [r7, #4]
 800a1b4:	f000 fa31 	bl	800a61a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a1b8:	6878      	ldr	r0, [r7, #4]
 800a1ba:	f000 fa42 	bl	800a642 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a1c4:	68bb      	ldr	r3, [r7, #8]
 800a1c6:	f003 0308 	and.w	r3, r3, #8
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d020      	beq.n	800a210 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	f003 0308 	and.w	r3, r3, #8
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d01b      	beq.n	800a210 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	f06f 0208 	mvn.w	r2, #8
 800a1e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	2204      	movs	r2, #4
 800a1e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	69db      	ldr	r3, [r3, #28]
 800a1ee:	f003 0303 	and.w	r3, r3, #3
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d003      	beq.n	800a1fe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a1f6:	6878      	ldr	r0, [r7, #4]
 800a1f8:	f000 fa19 	bl	800a62e <HAL_TIM_IC_CaptureCallback>
 800a1fc:	e005      	b.n	800a20a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a1fe:	6878      	ldr	r0, [r7, #4]
 800a200:	f000 fa0b 	bl	800a61a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a204:	6878      	ldr	r0, [r7, #4]
 800a206:	f000 fa1c 	bl	800a642 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	2200      	movs	r2, #0
 800a20e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a210:	68bb      	ldr	r3, [r7, #8]
 800a212:	f003 0310 	and.w	r3, r3, #16
 800a216:	2b00      	cmp	r3, #0
 800a218:	d020      	beq.n	800a25c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	f003 0310 	and.w	r3, r3, #16
 800a220:	2b00      	cmp	r3, #0
 800a222:	d01b      	beq.n	800a25c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	f06f 0210 	mvn.w	r2, #16
 800a22c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	2208      	movs	r2, #8
 800a232:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	69db      	ldr	r3, [r3, #28]
 800a23a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d003      	beq.n	800a24a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a242:	6878      	ldr	r0, [r7, #4]
 800a244:	f000 f9f3 	bl	800a62e <HAL_TIM_IC_CaptureCallback>
 800a248:	e005      	b.n	800a256 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a24a:	6878      	ldr	r0, [r7, #4]
 800a24c:	f000 f9e5 	bl	800a61a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a250:	6878      	ldr	r0, [r7, #4]
 800a252:	f000 f9f6 	bl	800a642 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	2200      	movs	r2, #0
 800a25a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a25c:	68bb      	ldr	r3, [r7, #8]
 800a25e:	f003 0301 	and.w	r3, r3, #1
 800a262:	2b00      	cmp	r3, #0
 800a264:	d00c      	beq.n	800a280 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	f003 0301 	and.w	r3, r3, #1
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d007      	beq.n	800a280 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	f06f 0201 	mvn.w	r2, #1
 800a278:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a27a:	6878      	ldr	r0, [r7, #4]
 800a27c:	f000 f9c3 	bl	800a606 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800a280:	68bb      	ldr	r3, [r7, #8]
 800a282:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a286:	2b00      	cmp	r3, #0
 800a288:	d00c      	beq.n	800a2a4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a290:	2b00      	cmp	r3, #0
 800a292:	d007      	beq.n	800a2a4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800a29c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a29e:	6878      	ldr	r0, [r7, #4]
 800a2a0:	f000 fd60 	bl	800ad64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a2a4:	68bb      	ldr	r3, [r7, #8]
 800a2a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d00c      	beq.n	800a2c8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d007      	beq.n	800a2c8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a2c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a2c2:	6878      	ldr	r0, [r7, #4]
 800a2c4:	f000 f9c7 	bl	800a656 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a2c8:	68bb      	ldr	r3, [r7, #8]
 800a2ca:	f003 0320 	and.w	r3, r3, #32
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d00c      	beq.n	800a2ec <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	f003 0320 	and.w	r3, r3, #32
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d007      	beq.n	800a2ec <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	f06f 0220 	mvn.w	r2, #32
 800a2e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a2e6:	6878      	ldr	r0, [r7, #4]
 800a2e8:	f000 fd32 	bl	800ad50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a2ec:	bf00      	nop
 800a2ee:	3710      	adds	r7, #16
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	bd80      	pop	{r7, pc}

0800a2f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b086      	sub	sp, #24
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	60f8      	str	r0, [r7, #12]
 800a2fc:	60b9      	str	r1, [r7, #8]
 800a2fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a300:	2300      	movs	r3, #0
 800a302:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a30a:	2b01      	cmp	r3, #1
 800a30c:	d101      	bne.n	800a312 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a30e:	2302      	movs	r3, #2
 800a310:	e0ae      	b.n	800a470 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	2201      	movs	r2, #1
 800a316:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	2b0c      	cmp	r3, #12
 800a31e:	f200 809f 	bhi.w	800a460 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800a322:	a201      	add	r2, pc, #4	@ (adr r2, 800a328 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a328:	0800a35d 	.word	0x0800a35d
 800a32c:	0800a461 	.word	0x0800a461
 800a330:	0800a461 	.word	0x0800a461
 800a334:	0800a461 	.word	0x0800a461
 800a338:	0800a39d 	.word	0x0800a39d
 800a33c:	0800a461 	.word	0x0800a461
 800a340:	0800a461 	.word	0x0800a461
 800a344:	0800a461 	.word	0x0800a461
 800a348:	0800a3df 	.word	0x0800a3df
 800a34c:	0800a461 	.word	0x0800a461
 800a350:	0800a461 	.word	0x0800a461
 800a354:	0800a461 	.word	0x0800a461
 800a358:	0800a41f 	.word	0x0800a41f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	68b9      	ldr	r1, [r7, #8]
 800a362:	4618      	mov	r0, r3
 800a364:	f000 fa2e 	bl	800a7c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	699a      	ldr	r2, [r3, #24]
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	f042 0208 	orr.w	r2, r2, #8
 800a376:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	699a      	ldr	r2, [r3, #24]
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	f022 0204 	bic.w	r2, r2, #4
 800a386:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	6999      	ldr	r1, [r3, #24]
 800a38e:	68bb      	ldr	r3, [r7, #8]
 800a390:	691a      	ldr	r2, [r3, #16]
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	430a      	orrs	r2, r1
 800a398:	619a      	str	r2, [r3, #24]
      break;
 800a39a:	e064      	b.n	800a466 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	68b9      	ldr	r1, [r7, #8]
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	f000 fa7e 	bl	800a8a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	699a      	ldr	r2, [r3, #24]
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a3b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	699a      	ldr	r2, [r3, #24]
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a3c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	6999      	ldr	r1, [r3, #24]
 800a3ce:	68bb      	ldr	r3, [r7, #8]
 800a3d0:	691b      	ldr	r3, [r3, #16]
 800a3d2:	021a      	lsls	r2, r3, #8
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	430a      	orrs	r2, r1
 800a3da:	619a      	str	r2, [r3, #24]
      break;
 800a3dc:	e043      	b.n	800a466 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	68b9      	ldr	r1, [r7, #8]
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	f000 fad3 	bl	800a990 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	69da      	ldr	r2, [r3, #28]
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	f042 0208 	orr.w	r2, r2, #8
 800a3f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	69da      	ldr	r2, [r3, #28]
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	f022 0204 	bic.w	r2, r2, #4
 800a408:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	69d9      	ldr	r1, [r3, #28]
 800a410:	68bb      	ldr	r3, [r7, #8]
 800a412:	691a      	ldr	r2, [r3, #16]
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	430a      	orrs	r2, r1
 800a41a:	61da      	str	r2, [r3, #28]
      break;
 800a41c:	e023      	b.n	800a466 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	68b9      	ldr	r1, [r7, #8]
 800a424:	4618      	mov	r0, r3
 800a426:	f000 fb27 	bl	800aa78 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	69da      	ldr	r2, [r3, #28]
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a438:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	69da      	ldr	r2, [r3, #28]
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a448:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	69d9      	ldr	r1, [r3, #28]
 800a450:	68bb      	ldr	r3, [r7, #8]
 800a452:	691b      	ldr	r3, [r3, #16]
 800a454:	021a      	lsls	r2, r3, #8
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	430a      	orrs	r2, r1
 800a45c:	61da      	str	r2, [r3, #28]
      break;
 800a45e:	e002      	b.n	800a466 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800a460:	2301      	movs	r3, #1
 800a462:	75fb      	strb	r3, [r7, #23]
      break;
 800a464:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	2200      	movs	r2, #0
 800a46a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a46e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a470:	4618      	mov	r0, r3
 800a472:	3718      	adds	r7, #24
 800a474:	46bd      	mov	sp, r7
 800a476:	bd80      	pop	{r7, pc}

0800a478 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b084      	sub	sp, #16
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
 800a480:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a482:	2300      	movs	r3, #0
 800a484:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a48c:	2b01      	cmp	r3, #1
 800a48e:	d101      	bne.n	800a494 <HAL_TIM_ConfigClockSource+0x1c>
 800a490:	2302      	movs	r3, #2
 800a492:	e0b4      	b.n	800a5fe <HAL_TIM_ConfigClockSource+0x186>
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2201      	movs	r2, #1
 800a498:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2202      	movs	r2, #2
 800a4a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	689b      	ldr	r3, [r3, #8]
 800a4aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a4ac:	68bb      	ldr	r3, [r7, #8]
 800a4ae:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800a4b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a4b4:	68bb      	ldr	r3, [r7, #8]
 800a4b6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a4ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	68ba      	ldr	r2, [r7, #8]
 800a4c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a4c4:	683b      	ldr	r3, [r7, #0]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a4cc:	d03e      	beq.n	800a54c <HAL_TIM_ConfigClockSource+0xd4>
 800a4ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a4d2:	f200 8087 	bhi.w	800a5e4 <HAL_TIM_ConfigClockSource+0x16c>
 800a4d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a4da:	f000 8086 	beq.w	800a5ea <HAL_TIM_ConfigClockSource+0x172>
 800a4de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a4e2:	d87f      	bhi.n	800a5e4 <HAL_TIM_ConfigClockSource+0x16c>
 800a4e4:	2b70      	cmp	r3, #112	@ 0x70
 800a4e6:	d01a      	beq.n	800a51e <HAL_TIM_ConfigClockSource+0xa6>
 800a4e8:	2b70      	cmp	r3, #112	@ 0x70
 800a4ea:	d87b      	bhi.n	800a5e4 <HAL_TIM_ConfigClockSource+0x16c>
 800a4ec:	2b60      	cmp	r3, #96	@ 0x60
 800a4ee:	d050      	beq.n	800a592 <HAL_TIM_ConfigClockSource+0x11a>
 800a4f0:	2b60      	cmp	r3, #96	@ 0x60
 800a4f2:	d877      	bhi.n	800a5e4 <HAL_TIM_ConfigClockSource+0x16c>
 800a4f4:	2b50      	cmp	r3, #80	@ 0x50
 800a4f6:	d03c      	beq.n	800a572 <HAL_TIM_ConfigClockSource+0xfa>
 800a4f8:	2b50      	cmp	r3, #80	@ 0x50
 800a4fa:	d873      	bhi.n	800a5e4 <HAL_TIM_ConfigClockSource+0x16c>
 800a4fc:	2b40      	cmp	r3, #64	@ 0x40
 800a4fe:	d058      	beq.n	800a5b2 <HAL_TIM_ConfigClockSource+0x13a>
 800a500:	2b40      	cmp	r3, #64	@ 0x40
 800a502:	d86f      	bhi.n	800a5e4 <HAL_TIM_ConfigClockSource+0x16c>
 800a504:	2b30      	cmp	r3, #48	@ 0x30
 800a506:	d064      	beq.n	800a5d2 <HAL_TIM_ConfigClockSource+0x15a>
 800a508:	2b30      	cmp	r3, #48	@ 0x30
 800a50a:	d86b      	bhi.n	800a5e4 <HAL_TIM_ConfigClockSource+0x16c>
 800a50c:	2b20      	cmp	r3, #32
 800a50e:	d060      	beq.n	800a5d2 <HAL_TIM_ConfigClockSource+0x15a>
 800a510:	2b20      	cmp	r3, #32
 800a512:	d867      	bhi.n	800a5e4 <HAL_TIM_ConfigClockSource+0x16c>
 800a514:	2b00      	cmp	r3, #0
 800a516:	d05c      	beq.n	800a5d2 <HAL_TIM_ConfigClockSource+0x15a>
 800a518:	2b10      	cmp	r3, #16
 800a51a:	d05a      	beq.n	800a5d2 <HAL_TIM_ConfigClockSource+0x15a>
 800a51c:	e062      	b.n	800a5e4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a522:	683b      	ldr	r3, [r7, #0]
 800a524:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a526:	683b      	ldr	r3, [r7, #0]
 800a528:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a52a:	683b      	ldr	r3, [r7, #0]
 800a52c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a52e:	f000 fb73 	bl	800ac18 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	689b      	ldr	r3, [r3, #8]
 800a538:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a53a:	68bb      	ldr	r3, [r7, #8]
 800a53c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a540:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	68ba      	ldr	r2, [r7, #8]
 800a548:	609a      	str	r2, [r3, #8]
      break;
 800a54a:	e04f      	b.n	800a5ec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a550:	683b      	ldr	r3, [r7, #0]
 800a552:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a554:	683b      	ldr	r3, [r7, #0]
 800a556:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a558:	683b      	ldr	r3, [r7, #0]
 800a55a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a55c:	f000 fb5c 	bl	800ac18 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	689a      	ldr	r2, [r3, #8]
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a56e:	609a      	str	r2, [r3, #8]
      break;
 800a570:	e03c      	b.n	800a5ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a576:	683b      	ldr	r3, [r7, #0]
 800a578:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a57a:	683b      	ldr	r3, [r7, #0]
 800a57c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a57e:	461a      	mov	r2, r3
 800a580:	f000 fad0 	bl	800ab24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	2150      	movs	r1, #80	@ 0x50
 800a58a:	4618      	mov	r0, r3
 800a58c:	f000 fb29 	bl	800abe2 <TIM_ITRx_SetConfig>
      break;
 800a590:	e02c      	b.n	800a5ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a596:	683b      	ldr	r3, [r7, #0]
 800a598:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a59a:	683b      	ldr	r3, [r7, #0]
 800a59c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a59e:	461a      	mov	r2, r3
 800a5a0:	f000 faef 	bl	800ab82 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	2160      	movs	r1, #96	@ 0x60
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	f000 fb19 	bl	800abe2 <TIM_ITRx_SetConfig>
      break;
 800a5b0:	e01c      	b.n	800a5ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a5b6:	683b      	ldr	r3, [r7, #0]
 800a5b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a5ba:	683b      	ldr	r3, [r7, #0]
 800a5bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a5be:	461a      	mov	r2, r3
 800a5c0:	f000 fab0 	bl	800ab24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	2140      	movs	r1, #64	@ 0x40
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	f000 fb09 	bl	800abe2 <TIM_ITRx_SetConfig>
      break;
 800a5d0:	e00c      	b.n	800a5ec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681a      	ldr	r2, [r3, #0]
 800a5d6:	683b      	ldr	r3, [r7, #0]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	4619      	mov	r1, r3
 800a5dc:	4610      	mov	r0, r2
 800a5de:	f000 fb00 	bl	800abe2 <TIM_ITRx_SetConfig>
      break;
 800a5e2:	e003      	b.n	800a5ec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a5e4:	2301      	movs	r3, #1
 800a5e6:	73fb      	strb	r3, [r7, #15]
      break;
 800a5e8:	e000      	b.n	800a5ec <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a5ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	2201      	movs	r2, #1
 800a5f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a5fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5fe:	4618      	mov	r0, r3
 800a600:	3710      	adds	r7, #16
 800a602:	46bd      	mov	sp, r7
 800a604:	bd80      	pop	{r7, pc}

0800a606 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a606:	b480      	push	{r7}
 800a608:	b083      	sub	sp, #12
 800a60a:	af00      	add	r7, sp, #0
 800a60c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800a60e:	bf00      	nop
 800a610:	370c      	adds	r7, #12
 800a612:	46bd      	mov	sp, r7
 800a614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a618:	4770      	bx	lr

0800a61a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a61a:	b480      	push	{r7}
 800a61c:	b083      	sub	sp, #12
 800a61e:	af00      	add	r7, sp, #0
 800a620:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a622:	bf00      	nop
 800a624:	370c      	adds	r7, #12
 800a626:	46bd      	mov	sp, r7
 800a628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62c:	4770      	bx	lr

0800a62e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a62e:	b480      	push	{r7}
 800a630:	b083      	sub	sp, #12
 800a632:	af00      	add	r7, sp, #0
 800a634:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a636:	bf00      	nop
 800a638:	370c      	adds	r7, #12
 800a63a:	46bd      	mov	sp, r7
 800a63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a640:	4770      	bx	lr

0800a642 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a642:	b480      	push	{r7}
 800a644:	b083      	sub	sp, #12
 800a646:	af00      	add	r7, sp, #0
 800a648:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a64a:	bf00      	nop
 800a64c:	370c      	adds	r7, #12
 800a64e:	46bd      	mov	sp, r7
 800a650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a654:	4770      	bx	lr

0800a656 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a656:	b480      	push	{r7}
 800a658:	b083      	sub	sp, #12
 800a65a:	af00      	add	r7, sp, #0
 800a65c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a65e:	bf00      	nop
 800a660:	370c      	adds	r7, #12
 800a662:	46bd      	mov	sp, r7
 800a664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a668:	4770      	bx	lr
	...

0800a66c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a66c:	b480      	push	{r7}
 800a66e:	b085      	sub	sp, #20
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
 800a674:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	4a46      	ldr	r2, [pc, #280]	@ (800a798 <TIM_Base_SetConfig+0x12c>)
 800a680:	4293      	cmp	r3, r2
 800a682:	d013      	beq.n	800a6ac <TIM_Base_SetConfig+0x40>
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a68a:	d00f      	beq.n	800a6ac <TIM_Base_SetConfig+0x40>
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	4a43      	ldr	r2, [pc, #268]	@ (800a79c <TIM_Base_SetConfig+0x130>)
 800a690:	4293      	cmp	r3, r2
 800a692:	d00b      	beq.n	800a6ac <TIM_Base_SetConfig+0x40>
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	4a42      	ldr	r2, [pc, #264]	@ (800a7a0 <TIM_Base_SetConfig+0x134>)
 800a698:	4293      	cmp	r3, r2
 800a69a:	d007      	beq.n	800a6ac <TIM_Base_SetConfig+0x40>
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	4a41      	ldr	r2, [pc, #260]	@ (800a7a4 <TIM_Base_SetConfig+0x138>)
 800a6a0:	4293      	cmp	r3, r2
 800a6a2:	d003      	beq.n	800a6ac <TIM_Base_SetConfig+0x40>
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	4a40      	ldr	r2, [pc, #256]	@ (800a7a8 <TIM_Base_SetConfig+0x13c>)
 800a6a8:	4293      	cmp	r3, r2
 800a6aa:	d108      	bne.n	800a6be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a6b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a6b4:	683b      	ldr	r3, [r7, #0]
 800a6b6:	685b      	ldr	r3, [r3, #4]
 800a6b8:	68fa      	ldr	r2, [r7, #12]
 800a6ba:	4313      	orrs	r3, r2
 800a6bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	4a35      	ldr	r2, [pc, #212]	@ (800a798 <TIM_Base_SetConfig+0x12c>)
 800a6c2:	4293      	cmp	r3, r2
 800a6c4:	d02b      	beq.n	800a71e <TIM_Base_SetConfig+0xb2>
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a6cc:	d027      	beq.n	800a71e <TIM_Base_SetConfig+0xb2>
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	4a32      	ldr	r2, [pc, #200]	@ (800a79c <TIM_Base_SetConfig+0x130>)
 800a6d2:	4293      	cmp	r3, r2
 800a6d4:	d023      	beq.n	800a71e <TIM_Base_SetConfig+0xb2>
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	4a31      	ldr	r2, [pc, #196]	@ (800a7a0 <TIM_Base_SetConfig+0x134>)
 800a6da:	4293      	cmp	r3, r2
 800a6dc:	d01f      	beq.n	800a71e <TIM_Base_SetConfig+0xb2>
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	4a30      	ldr	r2, [pc, #192]	@ (800a7a4 <TIM_Base_SetConfig+0x138>)
 800a6e2:	4293      	cmp	r3, r2
 800a6e4:	d01b      	beq.n	800a71e <TIM_Base_SetConfig+0xb2>
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	4a2f      	ldr	r2, [pc, #188]	@ (800a7a8 <TIM_Base_SetConfig+0x13c>)
 800a6ea:	4293      	cmp	r3, r2
 800a6ec:	d017      	beq.n	800a71e <TIM_Base_SetConfig+0xb2>
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	4a2e      	ldr	r2, [pc, #184]	@ (800a7ac <TIM_Base_SetConfig+0x140>)
 800a6f2:	4293      	cmp	r3, r2
 800a6f4:	d013      	beq.n	800a71e <TIM_Base_SetConfig+0xb2>
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	4a2d      	ldr	r2, [pc, #180]	@ (800a7b0 <TIM_Base_SetConfig+0x144>)
 800a6fa:	4293      	cmp	r3, r2
 800a6fc:	d00f      	beq.n	800a71e <TIM_Base_SetConfig+0xb2>
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	4a2c      	ldr	r2, [pc, #176]	@ (800a7b4 <TIM_Base_SetConfig+0x148>)
 800a702:	4293      	cmp	r3, r2
 800a704:	d00b      	beq.n	800a71e <TIM_Base_SetConfig+0xb2>
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	4a2b      	ldr	r2, [pc, #172]	@ (800a7b8 <TIM_Base_SetConfig+0x14c>)
 800a70a:	4293      	cmp	r3, r2
 800a70c:	d007      	beq.n	800a71e <TIM_Base_SetConfig+0xb2>
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	4a2a      	ldr	r2, [pc, #168]	@ (800a7bc <TIM_Base_SetConfig+0x150>)
 800a712:	4293      	cmp	r3, r2
 800a714:	d003      	beq.n	800a71e <TIM_Base_SetConfig+0xb2>
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	4a29      	ldr	r2, [pc, #164]	@ (800a7c0 <TIM_Base_SetConfig+0x154>)
 800a71a:	4293      	cmp	r3, r2
 800a71c:	d108      	bne.n	800a730 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a724:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a726:	683b      	ldr	r3, [r7, #0]
 800a728:	68db      	ldr	r3, [r3, #12]
 800a72a:	68fa      	ldr	r2, [r7, #12]
 800a72c:	4313      	orrs	r3, r2
 800a72e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a736:	683b      	ldr	r3, [r7, #0]
 800a738:	695b      	ldr	r3, [r3, #20]
 800a73a:	4313      	orrs	r3, r2
 800a73c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	68fa      	ldr	r2, [r7, #12]
 800a742:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a744:	683b      	ldr	r3, [r7, #0]
 800a746:	689a      	ldr	r2, [r3, #8]
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a74c:	683b      	ldr	r3, [r7, #0]
 800a74e:	681a      	ldr	r2, [r3, #0]
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	4a10      	ldr	r2, [pc, #64]	@ (800a798 <TIM_Base_SetConfig+0x12c>)
 800a758:	4293      	cmp	r3, r2
 800a75a:	d003      	beq.n	800a764 <TIM_Base_SetConfig+0xf8>
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	4a12      	ldr	r2, [pc, #72]	@ (800a7a8 <TIM_Base_SetConfig+0x13c>)
 800a760:	4293      	cmp	r3, r2
 800a762:	d103      	bne.n	800a76c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a764:	683b      	ldr	r3, [r7, #0]
 800a766:	691a      	ldr	r2, [r3, #16]
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	2201      	movs	r2, #1
 800a770:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	691b      	ldr	r3, [r3, #16]
 800a776:	f003 0301 	and.w	r3, r3, #1
 800a77a:	2b01      	cmp	r3, #1
 800a77c:	d105      	bne.n	800a78a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	691b      	ldr	r3, [r3, #16]
 800a782:	f023 0201 	bic.w	r2, r3, #1
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	611a      	str	r2, [r3, #16]
  }
}
 800a78a:	bf00      	nop
 800a78c:	3714      	adds	r7, #20
 800a78e:	46bd      	mov	sp, r7
 800a790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a794:	4770      	bx	lr
 800a796:	bf00      	nop
 800a798:	40010000 	.word	0x40010000
 800a79c:	40000400 	.word	0x40000400
 800a7a0:	40000800 	.word	0x40000800
 800a7a4:	40000c00 	.word	0x40000c00
 800a7a8:	40010400 	.word	0x40010400
 800a7ac:	40014000 	.word	0x40014000
 800a7b0:	40014400 	.word	0x40014400
 800a7b4:	40014800 	.word	0x40014800
 800a7b8:	40001800 	.word	0x40001800
 800a7bc:	40001c00 	.word	0x40001c00
 800a7c0:	40002000 	.word	0x40002000

0800a7c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a7c4:	b480      	push	{r7}
 800a7c6:	b087      	sub	sp, #28
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
 800a7cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	6a1b      	ldr	r3, [r3, #32]
 800a7d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	6a1b      	ldr	r3, [r3, #32]
 800a7d8:	f023 0201 	bic.w	r2, r3, #1
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	685b      	ldr	r3, [r3, #4]
 800a7e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	699b      	ldr	r3, [r3, #24]
 800a7ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a7f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	f023 0303 	bic.w	r3, r3, #3
 800a7fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a7fc:	683b      	ldr	r3, [r7, #0]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	68fa      	ldr	r2, [r7, #12]
 800a802:	4313      	orrs	r3, r2
 800a804:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a806:	697b      	ldr	r3, [r7, #20]
 800a808:	f023 0302 	bic.w	r3, r3, #2
 800a80c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a80e:	683b      	ldr	r3, [r7, #0]
 800a810:	689b      	ldr	r3, [r3, #8]
 800a812:	697a      	ldr	r2, [r7, #20]
 800a814:	4313      	orrs	r3, r2
 800a816:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	4a20      	ldr	r2, [pc, #128]	@ (800a89c <TIM_OC1_SetConfig+0xd8>)
 800a81c:	4293      	cmp	r3, r2
 800a81e:	d003      	beq.n	800a828 <TIM_OC1_SetConfig+0x64>
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	4a1f      	ldr	r2, [pc, #124]	@ (800a8a0 <TIM_OC1_SetConfig+0xdc>)
 800a824:	4293      	cmp	r3, r2
 800a826:	d10c      	bne.n	800a842 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a828:	697b      	ldr	r3, [r7, #20]
 800a82a:	f023 0308 	bic.w	r3, r3, #8
 800a82e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a830:	683b      	ldr	r3, [r7, #0]
 800a832:	68db      	ldr	r3, [r3, #12]
 800a834:	697a      	ldr	r2, [r7, #20]
 800a836:	4313      	orrs	r3, r2
 800a838:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a83a:	697b      	ldr	r3, [r7, #20]
 800a83c:	f023 0304 	bic.w	r3, r3, #4
 800a840:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	4a15      	ldr	r2, [pc, #84]	@ (800a89c <TIM_OC1_SetConfig+0xd8>)
 800a846:	4293      	cmp	r3, r2
 800a848:	d003      	beq.n	800a852 <TIM_OC1_SetConfig+0x8e>
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	4a14      	ldr	r2, [pc, #80]	@ (800a8a0 <TIM_OC1_SetConfig+0xdc>)
 800a84e:	4293      	cmp	r3, r2
 800a850:	d111      	bne.n	800a876 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a852:	693b      	ldr	r3, [r7, #16]
 800a854:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a858:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a85a:	693b      	ldr	r3, [r7, #16]
 800a85c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a860:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	695b      	ldr	r3, [r3, #20]
 800a866:	693a      	ldr	r2, [r7, #16]
 800a868:	4313      	orrs	r3, r2
 800a86a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a86c:	683b      	ldr	r3, [r7, #0]
 800a86e:	699b      	ldr	r3, [r3, #24]
 800a870:	693a      	ldr	r2, [r7, #16]
 800a872:	4313      	orrs	r3, r2
 800a874:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	693a      	ldr	r2, [r7, #16]
 800a87a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	68fa      	ldr	r2, [r7, #12]
 800a880:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a882:	683b      	ldr	r3, [r7, #0]
 800a884:	685a      	ldr	r2, [r3, #4]
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	697a      	ldr	r2, [r7, #20]
 800a88e:	621a      	str	r2, [r3, #32]
}
 800a890:	bf00      	nop
 800a892:	371c      	adds	r7, #28
 800a894:	46bd      	mov	sp, r7
 800a896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89a:	4770      	bx	lr
 800a89c:	40010000 	.word	0x40010000
 800a8a0:	40010400 	.word	0x40010400

0800a8a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a8a4:	b480      	push	{r7}
 800a8a6:	b087      	sub	sp, #28
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
 800a8ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	6a1b      	ldr	r3, [r3, #32]
 800a8b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	6a1b      	ldr	r3, [r3, #32]
 800a8b8:	f023 0210 	bic.w	r2, r3, #16
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	685b      	ldr	r3, [r3, #4]
 800a8c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	699b      	ldr	r3, [r3, #24]
 800a8ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a8d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a8da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a8dc:	683b      	ldr	r3, [r7, #0]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	021b      	lsls	r3, r3, #8
 800a8e2:	68fa      	ldr	r2, [r7, #12]
 800a8e4:	4313      	orrs	r3, r2
 800a8e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a8e8:	697b      	ldr	r3, [r7, #20]
 800a8ea:	f023 0320 	bic.w	r3, r3, #32
 800a8ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a8f0:	683b      	ldr	r3, [r7, #0]
 800a8f2:	689b      	ldr	r3, [r3, #8]
 800a8f4:	011b      	lsls	r3, r3, #4
 800a8f6:	697a      	ldr	r2, [r7, #20]
 800a8f8:	4313      	orrs	r3, r2
 800a8fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	4a22      	ldr	r2, [pc, #136]	@ (800a988 <TIM_OC2_SetConfig+0xe4>)
 800a900:	4293      	cmp	r3, r2
 800a902:	d003      	beq.n	800a90c <TIM_OC2_SetConfig+0x68>
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	4a21      	ldr	r2, [pc, #132]	@ (800a98c <TIM_OC2_SetConfig+0xe8>)
 800a908:	4293      	cmp	r3, r2
 800a90a:	d10d      	bne.n	800a928 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a90c:	697b      	ldr	r3, [r7, #20]
 800a90e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a912:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a914:	683b      	ldr	r3, [r7, #0]
 800a916:	68db      	ldr	r3, [r3, #12]
 800a918:	011b      	lsls	r3, r3, #4
 800a91a:	697a      	ldr	r2, [r7, #20]
 800a91c:	4313      	orrs	r3, r2
 800a91e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a920:	697b      	ldr	r3, [r7, #20]
 800a922:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a926:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	4a17      	ldr	r2, [pc, #92]	@ (800a988 <TIM_OC2_SetConfig+0xe4>)
 800a92c:	4293      	cmp	r3, r2
 800a92e:	d003      	beq.n	800a938 <TIM_OC2_SetConfig+0x94>
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	4a16      	ldr	r2, [pc, #88]	@ (800a98c <TIM_OC2_SetConfig+0xe8>)
 800a934:	4293      	cmp	r3, r2
 800a936:	d113      	bne.n	800a960 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a938:	693b      	ldr	r3, [r7, #16]
 800a93a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a93e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a940:	693b      	ldr	r3, [r7, #16]
 800a942:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a946:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a948:	683b      	ldr	r3, [r7, #0]
 800a94a:	695b      	ldr	r3, [r3, #20]
 800a94c:	009b      	lsls	r3, r3, #2
 800a94e:	693a      	ldr	r2, [r7, #16]
 800a950:	4313      	orrs	r3, r2
 800a952:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a954:	683b      	ldr	r3, [r7, #0]
 800a956:	699b      	ldr	r3, [r3, #24]
 800a958:	009b      	lsls	r3, r3, #2
 800a95a:	693a      	ldr	r2, [r7, #16]
 800a95c:	4313      	orrs	r3, r2
 800a95e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	693a      	ldr	r2, [r7, #16]
 800a964:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	68fa      	ldr	r2, [r7, #12]
 800a96a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a96c:	683b      	ldr	r3, [r7, #0]
 800a96e:	685a      	ldr	r2, [r3, #4]
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	697a      	ldr	r2, [r7, #20]
 800a978:	621a      	str	r2, [r3, #32]
}
 800a97a:	bf00      	nop
 800a97c:	371c      	adds	r7, #28
 800a97e:	46bd      	mov	sp, r7
 800a980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a984:	4770      	bx	lr
 800a986:	bf00      	nop
 800a988:	40010000 	.word	0x40010000
 800a98c:	40010400 	.word	0x40010400

0800a990 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a990:	b480      	push	{r7}
 800a992:	b087      	sub	sp, #28
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
 800a998:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	6a1b      	ldr	r3, [r3, #32]
 800a99e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	6a1b      	ldr	r3, [r3, #32]
 800a9a4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	685b      	ldr	r3, [r3, #4]
 800a9b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	69db      	ldr	r3, [r3, #28]
 800a9b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a9be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	f023 0303 	bic.w	r3, r3, #3
 800a9c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a9c8:	683b      	ldr	r3, [r7, #0]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	68fa      	ldr	r2, [r7, #12]
 800a9ce:	4313      	orrs	r3, r2
 800a9d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a9d2:	697b      	ldr	r3, [r7, #20]
 800a9d4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a9d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a9da:	683b      	ldr	r3, [r7, #0]
 800a9dc:	689b      	ldr	r3, [r3, #8]
 800a9de:	021b      	lsls	r3, r3, #8
 800a9e0:	697a      	ldr	r2, [r7, #20]
 800a9e2:	4313      	orrs	r3, r2
 800a9e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	4a21      	ldr	r2, [pc, #132]	@ (800aa70 <TIM_OC3_SetConfig+0xe0>)
 800a9ea:	4293      	cmp	r3, r2
 800a9ec:	d003      	beq.n	800a9f6 <TIM_OC3_SetConfig+0x66>
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	4a20      	ldr	r2, [pc, #128]	@ (800aa74 <TIM_OC3_SetConfig+0xe4>)
 800a9f2:	4293      	cmp	r3, r2
 800a9f4:	d10d      	bne.n	800aa12 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a9f6:	697b      	ldr	r3, [r7, #20]
 800a9f8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a9fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a9fe:	683b      	ldr	r3, [r7, #0]
 800aa00:	68db      	ldr	r3, [r3, #12]
 800aa02:	021b      	lsls	r3, r3, #8
 800aa04:	697a      	ldr	r2, [r7, #20]
 800aa06:	4313      	orrs	r3, r2
 800aa08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800aa0a:	697b      	ldr	r3, [r7, #20]
 800aa0c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800aa10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	4a16      	ldr	r2, [pc, #88]	@ (800aa70 <TIM_OC3_SetConfig+0xe0>)
 800aa16:	4293      	cmp	r3, r2
 800aa18:	d003      	beq.n	800aa22 <TIM_OC3_SetConfig+0x92>
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	4a15      	ldr	r2, [pc, #84]	@ (800aa74 <TIM_OC3_SetConfig+0xe4>)
 800aa1e:	4293      	cmp	r3, r2
 800aa20:	d113      	bne.n	800aa4a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800aa22:	693b      	ldr	r3, [r7, #16]
 800aa24:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800aa28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800aa2a:	693b      	ldr	r3, [r7, #16]
 800aa2c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800aa30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800aa32:	683b      	ldr	r3, [r7, #0]
 800aa34:	695b      	ldr	r3, [r3, #20]
 800aa36:	011b      	lsls	r3, r3, #4
 800aa38:	693a      	ldr	r2, [r7, #16]
 800aa3a:	4313      	orrs	r3, r2
 800aa3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	699b      	ldr	r3, [r3, #24]
 800aa42:	011b      	lsls	r3, r3, #4
 800aa44:	693a      	ldr	r2, [r7, #16]
 800aa46:	4313      	orrs	r3, r2
 800aa48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	693a      	ldr	r2, [r7, #16]
 800aa4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	68fa      	ldr	r2, [r7, #12]
 800aa54:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800aa56:	683b      	ldr	r3, [r7, #0]
 800aa58:	685a      	ldr	r2, [r3, #4]
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	697a      	ldr	r2, [r7, #20]
 800aa62:	621a      	str	r2, [r3, #32]
}
 800aa64:	bf00      	nop
 800aa66:	371c      	adds	r7, #28
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6e:	4770      	bx	lr
 800aa70:	40010000 	.word	0x40010000
 800aa74:	40010400 	.word	0x40010400

0800aa78 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800aa78:	b480      	push	{r7}
 800aa7a:	b087      	sub	sp, #28
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
 800aa80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	6a1b      	ldr	r3, [r3, #32]
 800aa86:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	6a1b      	ldr	r3, [r3, #32]
 800aa8c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	685b      	ldr	r3, [r3, #4]
 800aa98:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	69db      	ldr	r3, [r3, #28]
 800aa9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aaa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800aaae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aab0:	683b      	ldr	r3, [r7, #0]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	021b      	lsls	r3, r3, #8
 800aab6:	68fa      	ldr	r2, [r7, #12]
 800aab8:	4313      	orrs	r3, r2
 800aaba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800aabc:	693b      	ldr	r3, [r7, #16]
 800aabe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800aac2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800aac4:	683b      	ldr	r3, [r7, #0]
 800aac6:	689b      	ldr	r3, [r3, #8]
 800aac8:	031b      	lsls	r3, r3, #12
 800aaca:	693a      	ldr	r2, [r7, #16]
 800aacc:	4313      	orrs	r3, r2
 800aace:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	4a12      	ldr	r2, [pc, #72]	@ (800ab1c <TIM_OC4_SetConfig+0xa4>)
 800aad4:	4293      	cmp	r3, r2
 800aad6:	d003      	beq.n	800aae0 <TIM_OC4_SetConfig+0x68>
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	4a11      	ldr	r2, [pc, #68]	@ (800ab20 <TIM_OC4_SetConfig+0xa8>)
 800aadc:	4293      	cmp	r3, r2
 800aade:	d109      	bne.n	800aaf4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800aae0:	697b      	ldr	r3, [r7, #20]
 800aae2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800aae6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800aae8:	683b      	ldr	r3, [r7, #0]
 800aaea:	695b      	ldr	r3, [r3, #20]
 800aaec:	019b      	lsls	r3, r3, #6
 800aaee:	697a      	ldr	r2, [r7, #20]
 800aaf0:	4313      	orrs	r3, r2
 800aaf2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	697a      	ldr	r2, [r7, #20]
 800aaf8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	68fa      	ldr	r2, [r7, #12]
 800aafe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ab00:	683b      	ldr	r3, [r7, #0]
 800ab02:	685a      	ldr	r2, [r3, #4]
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	693a      	ldr	r2, [r7, #16]
 800ab0c:	621a      	str	r2, [r3, #32]
}
 800ab0e:	bf00      	nop
 800ab10:	371c      	adds	r7, #28
 800ab12:	46bd      	mov	sp, r7
 800ab14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab18:	4770      	bx	lr
 800ab1a:	bf00      	nop
 800ab1c:	40010000 	.word	0x40010000
 800ab20:	40010400 	.word	0x40010400

0800ab24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ab24:	b480      	push	{r7}
 800ab26:	b087      	sub	sp, #28
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	60f8      	str	r0, [r7, #12]
 800ab2c:	60b9      	str	r1, [r7, #8]
 800ab2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	6a1b      	ldr	r3, [r3, #32]
 800ab34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	6a1b      	ldr	r3, [r3, #32]
 800ab3a:	f023 0201 	bic.w	r2, r3, #1
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	699b      	ldr	r3, [r3, #24]
 800ab46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ab48:	693b      	ldr	r3, [r7, #16]
 800ab4a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ab4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	011b      	lsls	r3, r3, #4
 800ab54:	693a      	ldr	r2, [r7, #16]
 800ab56:	4313      	orrs	r3, r2
 800ab58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ab5a:	697b      	ldr	r3, [r7, #20]
 800ab5c:	f023 030a 	bic.w	r3, r3, #10
 800ab60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ab62:	697a      	ldr	r2, [r7, #20]
 800ab64:	68bb      	ldr	r3, [r7, #8]
 800ab66:	4313      	orrs	r3, r2
 800ab68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	693a      	ldr	r2, [r7, #16]
 800ab6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	697a      	ldr	r2, [r7, #20]
 800ab74:	621a      	str	r2, [r3, #32]
}
 800ab76:	bf00      	nop
 800ab78:	371c      	adds	r7, #28
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab80:	4770      	bx	lr

0800ab82 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ab82:	b480      	push	{r7}
 800ab84:	b087      	sub	sp, #28
 800ab86:	af00      	add	r7, sp, #0
 800ab88:	60f8      	str	r0, [r7, #12]
 800ab8a:	60b9      	str	r1, [r7, #8]
 800ab8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	6a1b      	ldr	r3, [r3, #32]
 800ab92:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	6a1b      	ldr	r3, [r3, #32]
 800ab98:	f023 0210 	bic.w	r2, r3, #16
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	699b      	ldr	r3, [r3, #24]
 800aba4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800aba6:	693b      	ldr	r3, [r7, #16]
 800aba8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800abac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	031b      	lsls	r3, r3, #12
 800abb2:	693a      	ldr	r2, [r7, #16]
 800abb4:	4313      	orrs	r3, r2
 800abb6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800abb8:	697b      	ldr	r3, [r7, #20]
 800abba:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800abbe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800abc0:	68bb      	ldr	r3, [r7, #8]
 800abc2:	011b      	lsls	r3, r3, #4
 800abc4:	697a      	ldr	r2, [r7, #20]
 800abc6:	4313      	orrs	r3, r2
 800abc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	693a      	ldr	r2, [r7, #16]
 800abce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	697a      	ldr	r2, [r7, #20]
 800abd4:	621a      	str	r2, [r3, #32]
}
 800abd6:	bf00      	nop
 800abd8:	371c      	adds	r7, #28
 800abda:	46bd      	mov	sp, r7
 800abdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe0:	4770      	bx	lr

0800abe2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800abe2:	b480      	push	{r7}
 800abe4:	b085      	sub	sp, #20
 800abe6:	af00      	add	r7, sp, #0
 800abe8:	6078      	str	r0, [r7, #4]
 800abea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	689b      	ldr	r3, [r3, #8]
 800abf0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800abf8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800abfa:	683a      	ldr	r2, [r7, #0]
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	4313      	orrs	r3, r2
 800ac00:	f043 0307 	orr.w	r3, r3, #7
 800ac04:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	68fa      	ldr	r2, [r7, #12]
 800ac0a:	609a      	str	r2, [r3, #8]
}
 800ac0c:	bf00      	nop
 800ac0e:	3714      	adds	r7, #20
 800ac10:	46bd      	mov	sp, r7
 800ac12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac16:	4770      	bx	lr

0800ac18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ac18:	b480      	push	{r7}
 800ac1a:	b087      	sub	sp, #28
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	60f8      	str	r0, [r7, #12]
 800ac20:	60b9      	str	r1, [r7, #8]
 800ac22:	607a      	str	r2, [r7, #4]
 800ac24:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	689b      	ldr	r3, [r3, #8]
 800ac2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ac2c:	697b      	ldr	r3, [r7, #20]
 800ac2e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ac32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ac34:	683b      	ldr	r3, [r7, #0]
 800ac36:	021a      	lsls	r2, r3, #8
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	431a      	orrs	r2, r3
 800ac3c:	68bb      	ldr	r3, [r7, #8]
 800ac3e:	4313      	orrs	r3, r2
 800ac40:	697a      	ldr	r2, [r7, #20]
 800ac42:	4313      	orrs	r3, r2
 800ac44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	697a      	ldr	r2, [r7, #20]
 800ac4a:	609a      	str	r2, [r3, #8]
}
 800ac4c:	bf00      	nop
 800ac4e:	371c      	adds	r7, #28
 800ac50:	46bd      	mov	sp, r7
 800ac52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac56:	4770      	bx	lr

0800ac58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ac58:	b480      	push	{r7}
 800ac5a:	b085      	sub	sp, #20
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
 800ac60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ac68:	2b01      	cmp	r3, #1
 800ac6a:	d101      	bne.n	800ac70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ac6c:	2302      	movs	r3, #2
 800ac6e:	e05a      	b.n	800ad26 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2201      	movs	r2, #1
 800ac74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	2202      	movs	r2, #2
 800ac7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	685b      	ldr	r3, [r3, #4]
 800ac86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	689b      	ldr	r3, [r3, #8]
 800ac8e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ac96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ac98:	683b      	ldr	r3, [r7, #0]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	68fa      	ldr	r2, [r7, #12]
 800ac9e:	4313      	orrs	r3, r2
 800aca0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	68fa      	ldr	r2, [r7, #12]
 800aca8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	4a21      	ldr	r2, [pc, #132]	@ (800ad34 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800acb0:	4293      	cmp	r3, r2
 800acb2:	d022      	beq.n	800acfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800acbc:	d01d      	beq.n	800acfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	4a1d      	ldr	r2, [pc, #116]	@ (800ad38 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800acc4:	4293      	cmp	r3, r2
 800acc6:	d018      	beq.n	800acfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	4a1b      	ldr	r2, [pc, #108]	@ (800ad3c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800acce:	4293      	cmp	r3, r2
 800acd0:	d013      	beq.n	800acfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	4a1a      	ldr	r2, [pc, #104]	@ (800ad40 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800acd8:	4293      	cmp	r3, r2
 800acda:	d00e      	beq.n	800acfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	4a18      	ldr	r2, [pc, #96]	@ (800ad44 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800ace2:	4293      	cmp	r3, r2
 800ace4:	d009      	beq.n	800acfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	4a17      	ldr	r2, [pc, #92]	@ (800ad48 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800acec:	4293      	cmp	r3, r2
 800acee:	d004      	beq.n	800acfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	4a15      	ldr	r2, [pc, #84]	@ (800ad4c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800acf6:	4293      	cmp	r3, r2
 800acf8:	d10c      	bne.n	800ad14 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800acfa:	68bb      	ldr	r3, [r7, #8]
 800acfc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ad00:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ad02:	683b      	ldr	r3, [r7, #0]
 800ad04:	685b      	ldr	r3, [r3, #4]
 800ad06:	68ba      	ldr	r2, [r7, #8]
 800ad08:	4313      	orrs	r3, r2
 800ad0a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	68ba      	ldr	r2, [r7, #8]
 800ad12:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	2201      	movs	r2, #1
 800ad18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	2200      	movs	r2, #0
 800ad20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ad24:	2300      	movs	r3, #0
}
 800ad26:	4618      	mov	r0, r3
 800ad28:	3714      	adds	r7, #20
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad30:	4770      	bx	lr
 800ad32:	bf00      	nop
 800ad34:	40010000 	.word	0x40010000
 800ad38:	40000400 	.word	0x40000400
 800ad3c:	40000800 	.word	0x40000800
 800ad40:	40000c00 	.word	0x40000c00
 800ad44:	40010400 	.word	0x40010400
 800ad48:	40014000 	.word	0x40014000
 800ad4c:	40001800 	.word	0x40001800

0800ad50 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ad50:	b480      	push	{r7}
 800ad52:	b083      	sub	sp, #12
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ad58:	bf00      	nop
 800ad5a:	370c      	adds	r7, #12
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad62:	4770      	bx	lr

0800ad64 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ad64:	b480      	push	{r7}
 800ad66:	b083      	sub	sp, #12
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ad6c:	bf00      	nop
 800ad6e:	370c      	adds	r7, #12
 800ad70:	46bd      	mov	sp, r7
 800ad72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad76:	4770      	bx	lr

0800ad78 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b082      	sub	sp, #8
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d101      	bne.n	800ad8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ad86:	2301      	movs	r3, #1
 800ad88:	e042      	b.n	800ae10 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ad90:	b2db      	uxtb	r3, r3
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d106      	bne.n	800ada4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	2200      	movs	r2, #0
 800ad9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ad9e:	6878      	ldr	r0, [r7, #4]
 800ada0:	f7fb fd56 	bl	8006850 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	2224      	movs	r2, #36	@ 0x24
 800ada8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	68da      	ldr	r2, [r3, #12]
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800adba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800adbc:	6878      	ldr	r0, [r7, #4]
 800adbe:	f000 f82b 	bl	800ae18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	691a      	ldr	r2, [r3, #16]
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800add0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	695a      	ldr	r2, [r3, #20]
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ade0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	68da      	ldr	r2, [r3, #12]
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800adf0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	2200      	movs	r2, #0
 800adf6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	2220      	movs	r2, #32
 800adfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	2220      	movs	r2, #32
 800ae04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800ae0e:	2300      	movs	r3, #0
}
 800ae10:	4618      	mov	r0, r3
 800ae12:	3708      	adds	r7, #8
 800ae14:	46bd      	mov	sp, r7
 800ae16:	bd80      	pop	{r7, pc}

0800ae18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ae18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ae1c:	b0c0      	sub	sp, #256	@ 0x100
 800ae1e:	af00      	add	r7, sp, #0
 800ae20:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ae24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	691b      	ldr	r3, [r3, #16]
 800ae2c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800ae30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ae34:	68d9      	ldr	r1, [r3, #12]
 800ae36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ae3a:	681a      	ldr	r2, [r3, #0]
 800ae3c:	ea40 0301 	orr.w	r3, r0, r1
 800ae40:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ae42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ae46:	689a      	ldr	r2, [r3, #8]
 800ae48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ae4c:	691b      	ldr	r3, [r3, #16]
 800ae4e:	431a      	orrs	r2, r3
 800ae50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ae54:	695b      	ldr	r3, [r3, #20]
 800ae56:	431a      	orrs	r2, r3
 800ae58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ae5c:	69db      	ldr	r3, [r3, #28]
 800ae5e:	4313      	orrs	r3, r2
 800ae60:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800ae64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	68db      	ldr	r3, [r3, #12]
 800ae6c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800ae70:	f021 010c 	bic.w	r1, r1, #12
 800ae74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ae78:	681a      	ldr	r2, [r3, #0]
 800ae7a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800ae7e:	430b      	orrs	r3, r1
 800ae80:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ae82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	695b      	ldr	r3, [r3, #20]
 800ae8a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800ae8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ae92:	6999      	ldr	r1, [r3, #24]
 800ae94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ae98:	681a      	ldr	r2, [r3, #0]
 800ae9a:	ea40 0301 	orr.w	r3, r0, r1
 800ae9e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800aea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aea4:	681a      	ldr	r2, [r3, #0]
 800aea6:	4b8f      	ldr	r3, [pc, #572]	@ (800b0e4 <UART_SetConfig+0x2cc>)
 800aea8:	429a      	cmp	r2, r3
 800aeaa:	d005      	beq.n	800aeb8 <UART_SetConfig+0xa0>
 800aeac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aeb0:	681a      	ldr	r2, [r3, #0]
 800aeb2:	4b8d      	ldr	r3, [pc, #564]	@ (800b0e8 <UART_SetConfig+0x2d0>)
 800aeb4:	429a      	cmp	r2, r3
 800aeb6:	d104      	bne.n	800aec2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800aeb8:	f7fe ff48 	bl	8009d4c <HAL_RCC_GetPCLK2Freq>
 800aebc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800aec0:	e003      	b.n	800aeca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800aec2:	f7fe ff2f 	bl	8009d24 <HAL_RCC_GetPCLK1Freq>
 800aec6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aeca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aece:	69db      	ldr	r3, [r3, #28]
 800aed0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800aed4:	f040 810c 	bne.w	800b0f0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800aed8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800aedc:	2200      	movs	r2, #0
 800aede:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800aee2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800aee6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800aeea:	4622      	mov	r2, r4
 800aeec:	462b      	mov	r3, r5
 800aeee:	1891      	adds	r1, r2, r2
 800aef0:	65b9      	str	r1, [r7, #88]	@ 0x58
 800aef2:	415b      	adcs	r3, r3
 800aef4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800aef6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800aefa:	4621      	mov	r1, r4
 800aefc:	eb12 0801 	adds.w	r8, r2, r1
 800af00:	4629      	mov	r1, r5
 800af02:	eb43 0901 	adc.w	r9, r3, r1
 800af06:	f04f 0200 	mov.w	r2, #0
 800af0a:	f04f 0300 	mov.w	r3, #0
 800af0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800af12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800af16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800af1a:	4690      	mov	r8, r2
 800af1c:	4699      	mov	r9, r3
 800af1e:	4623      	mov	r3, r4
 800af20:	eb18 0303 	adds.w	r3, r8, r3
 800af24:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800af28:	462b      	mov	r3, r5
 800af2a:	eb49 0303 	adc.w	r3, r9, r3
 800af2e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800af32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800af36:	685b      	ldr	r3, [r3, #4]
 800af38:	2200      	movs	r2, #0
 800af3a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800af3e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800af42:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800af46:	460b      	mov	r3, r1
 800af48:	18db      	adds	r3, r3, r3
 800af4a:	653b      	str	r3, [r7, #80]	@ 0x50
 800af4c:	4613      	mov	r3, r2
 800af4e:	eb42 0303 	adc.w	r3, r2, r3
 800af52:	657b      	str	r3, [r7, #84]	@ 0x54
 800af54:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800af58:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800af5c:	f7f5 ffb2 	bl	8000ec4 <__aeabi_uldivmod>
 800af60:	4602      	mov	r2, r0
 800af62:	460b      	mov	r3, r1
 800af64:	4b61      	ldr	r3, [pc, #388]	@ (800b0ec <UART_SetConfig+0x2d4>)
 800af66:	fba3 2302 	umull	r2, r3, r3, r2
 800af6a:	095b      	lsrs	r3, r3, #5
 800af6c:	011c      	lsls	r4, r3, #4
 800af6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800af72:	2200      	movs	r2, #0
 800af74:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800af78:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800af7c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800af80:	4642      	mov	r2, r8
 800af82:	464b      	mov	r3, r9
 800af84:	1891      	adds	r1, r2, r2
 800af86:	64b9      	str	r1, [r7, #72]	@ 0x48
 800af88:	415b      	adcs	r3, r3
 800af8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800af8c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800af90:	4641      	mov	r1, r8
 800af92:	eb12 0a01 	adds.w	sl, r2, r1
 800af96:	4649      	mov	r1, r9
 800af98:	eb43 0b01 	adc.w	fp, r3, r1
 800af9c:	f04f 0200 	mov.w	r2, #0
 800afa0:	f04f 0300 	mov.w	r3, #0
 800afa4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800afa8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800afac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800afb0:	4692      	mov	sl, r2
 800afb2:	469b      	mov	fp, r3
 800afb4:	4643      	mov	r3, r8
 800afb6:	eb1a 0303 	adds.w	r3, sl, r3
 800afba:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800afbe:	464b      	mov	r3, r9
 800afc0:	eb4b 0303 	adc.w	r3, fp, r3
 800afc4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800afc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800afcc:	685b      	ldr	r3, [r3, #4]
 800afce:	2200      	movs	r2, #0
 800afd0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800afd4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800afd8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800afdc:	460b      	mov	r3, r1
 800afde:	18db      	adds	r3, r3, r3
 800afe0:	643b      	str	r3, [r7, #64]	@ 0x40
 800afe2:	4613      	mov	r3, r2
 800afe4:	eb42 0303 	adc.w	r3, r2, r3
 800afe8:	647b      	str	r3, [r7, #68]	@ 0x44
 800afea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800afee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800aff2:	f7f5 ff67 	bl	8000ec4 <__aeabi_uldivmod>
 800aff6:	4602      	mov	r2, r0
 800aff8:	460b      	mov	r3, r1
 800affa:	4611      	mov	r1, r2
 800affc:	4b3b      	ldr	r3, [pc, #236]	@ (800b0ec <UART_SetConfig+0x2d4>)
 800affe:	fba3 2301 	umull	r2, r3, r3, r1
 800b002:	095b      	lsrs	r3, r3, #5
 800b004:	2264      	movs	r2, #100	@ 0x64
 800b006:	fb02 f303 	mul.w	r3, r2, r3
 800b00a:	1acb      	subs	r3, r1, r3
 800b00c:	00db      	lsls	r3, r3, #3
 800b00e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800b012:	4b36      	ldr	r3, [pc, #216]	@ (800b0ec <UART_SetConfig+0x2d4>)
 800b014:	fba3 2302 	umull	r2, r3, r3, r2
 800b018:	095b      	lsrs	r3, r3, #5
 800b01a:	005b      	lsls	r3, r3, #1
 800b01c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800b020:	441c      	add	r4, r3
 800b022:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b026:	2200      	movs	r2, #0
 800b028:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b02c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800b030:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800b034:	4642      	mov	r2, r8
 800b036:	464b      	mov	r3, r9
 800b038:	1891      	adds	r1, r2, r2
 800b03a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800b03c:	415b      	adcs	r3, r3
 800b03e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b040:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800b044:	4641      	mov	r1, r8
 800b046:	1851      	adds	r1, r2, r1
 800b048:	6339      	str	r1, [r7, #48]	@ 0x30
 800b04a:	4649      	mov	r1, r9
 800b04c:	414b      	adcs	r3, r1
 800b04e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b050:	f04f 0200 	mov.w	r2, #0
 800b054:	f04f 0300 	mov.w	r3, #0
 800b058:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800b05c:	4659      	mov	r1, fp
 800b05e:	00cb      	lsls	r3, r1, #3
 800b060:	4651      	mov	r1, sl
 800b062:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b066:	4651      	mov	r1, sl
 800b068:	00ca      	lsls	r2, r1, #3
 800b06a:	4610      	mov	r0, r2
 800b06c:	4619      	mov	r1, r3
 800b06e:	4603      	mov	r3, r0
 800b070:	4642      	mov	r2, r8
 800b072:	189b      	adds	r3, r3, r2
 800b074:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b078:	464b      	mov	r3, r9
 800b07a:	460a      	mov	r2, r1
 800b07c:	eb42 0303 	adc.w	r3, r2, r3
 800b080:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b088:	685b      	ldr	r3, [r3, #4]
 800b08a:	2200      	movs	r2, #0
 800b08c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800b090:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800b094:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800b098:	460b      	mov	r3, r1
 800b09a:	18db      	adds	r3, r3, r3
 800b09c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b09e:	4613      	mov	r3, r2
 800b0a0:	eb42 0303 	adc.w	r3, r2, r3
 800b0a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b0a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800b0aa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800b0ae:	f7f5 ff09 	bl	8000ec4 <__aeabi_uldivmod>
 800b0b2:	4602      	mov	r2, r0
 800b0b4:	460b      	mov	r3, r1
 800b0b6:	4b0d      	ldr	r3, [pc, #52]	@ (800b0ec <UART_SetConfig+0x2d4>)
 800b0b8:	fba3 1302 	umull	r1, r3, r3, r2
 800b0bc:	095b      	lsrs	r3, r3, #5
 800b0be:	2164      	movs	r1, #100	@ 0x64
 800b0c0:	fb01 f303 	mul.w	r3, r1, r3
 800b0c4:	1ad3      	subs	r3, r2, r3
 800b0c6:	00db      	lsls	r3, r3, #3
 800b0c8:	3332      	adds	r3, #50	@ 0x32
 800b0ca:	4a08      	ldr	r2, [pc, #32]	@ (800b0ec <UART_SetConfig+0x2d4>)
 800b0cc:	fba2 2303 	umull	r2, r3, r2, r3
 800b0d0:	095b      	lsrs	r3, r3, #5
 800b0d2:	f003 0207 	and.w	r2, r3, #7
 800b0d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	4422      	add	r2, r4
 800b0de:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b0e0:	e106      	b.n	800b2f0 <UART_SetConfig+0x4d8>
 800b0e2:	bf00      	nop
 800b0e4:	40011000 	.word	0x40011000
 800b0e8:	40011400 	.word	0x40011400
 800b0ec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b0f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b0f4:	2200      	movs	r2, #0
 800b0f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b0fa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800b0fe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800b102:	4642      	mov	r2, r8
 800b104:	464b      	mov	r3, r9
 800b106:	1891      	adds	r1, r2, r2
 800b108:	6239      	str	r1, [r7, #32]
 800b10a:	415b      	adcs	r3, r3
 800b10c:	627b      	str	r3, [r7, #36]	@ 0x24
 800b10e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b112:	4641      	mov	r1, r8
 800b114:	1854      	adds	r4, r2, r1
 800b116:	4649      	mov	r1, r9
 800b118:	eb43 0501 	adc.w	r5, r3, r1
 800b11c:	f04f 0200 	mov.w	r2, #0
 800b120:	f04f 0300 	mov.w	r3, #0
 800b124:	00eb      	lsls	r3, r5, #3
 800b126:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b12a:	00e2      	lsls	r2, r4, #3
 800b12c:	4614      	mov	r4, r2
 800b12e:	461d      	mov	r5, r3
 800b130:	4643      	mov	r3, r8
 800b132:	18e3      	adds	r3, r4, r3
 800b134:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b138:	464b      	mov	r3, r9
 800b13a:	eb45 0303 	adc.w	r3, r5, r3
 800b13e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b142:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b146:	685b      	ldr	r3, [r3, #4]
 800b148:	2200      	movs	r2, #0
 800b14a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b14e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800b152:	f04f 0200 	mov.w	r2, #0
 800b156:	f04f 0300 	mov.w	r3, #0
 800b15a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800b15e:	4629      	mov	r1, r5
 800b160:	008b      	lsls	r3, r1, #2
 800b162:	4621      	mov	r1, r4
 800b164:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b168:	4621      	mov	r1, r4
 800b16a:	008a      	lsls	r2, r1, #2
 800b16c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800b170:	f7f5 fea8 	bl	8000ec4 <__aeabi_uldivmod>
 800b174:	4602      	mov	r2, r0
 800b176:	460b      	mov	r3, r1
 800b178:	4b60      	ldr	r3, [pc, #384]	@ (800b2fc <UART_SetConfig+0x4e4>)
 800b17a:	fba3 2302 	umull	r2, r3, r3, r2
 800b17e:	095b      	lsrs	r3, r3, #5
 800b180:	011c      	lsls	r4, r3, #4
 800b182:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b186:	2200      	movs	r2, #0
 800b188:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b18c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800b190:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800b194:	4642      	mov	r2, r8
 800b196:	464b      	mov	r3, r9
 800b198:	1891      	adds	r1, r2, r2
 800b19a:	61b9      	str	r1, [r7, #24]
 800b19c:	415b      	adcs	r3, r3
 800b19e:	61fb      	str	r3, [r7, #28]
 800b1a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b1a4:	4641      	mov	r1, r8
 800b1a6:	1851      	adds	r1, r2, r1
 800b1a8:	6139      	str	r1, [r7, #16]
 800b1aa:	4649      	mov	r1, r9
 800b1ac:	414b      	adcs	r3, r1
 800b1ae:	617b      	str	r3, [r7, #20]
 800b1b0:	f04f 0200 	mov.w	r2, #0
 800b1b4:	f04f 0300 	mov.w	r3, #0
 800b1b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b1bc:	4659      	mov	r1, fp
 800b1be:	00cb      	lsls	r3, r1, #3
 800b1c0:	4651      	mov	r1, sl
 800b1c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b1c6:	4651      	mov	r1, sl
 800b1c8:	00ca      	lsls	r2, r1, #3
 800b1ca:	4610      	mov	r0, r2
 800b1cc:	4619      	mov	r1, r3
 800b1ce:	4603      	mov	r3, r0
 800b1d0:	4642      	mov	r2, r8
 800b1d2:	189b      	adds	r3, r3, r2
 800b1d4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b1d8:	464b      	mov	r3, r9
 800b1da:	460a      	mov	r2, r1
 800b1dc:	eb42 0303 	adc.w	r3, r2, r3
 800b1e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b1e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b1e8:	685b      	ldr	r3, [r3, #4]
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b1ee:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800b1f0:	f04f 0200 	mov.w	r2, #0
 800b1f4:	f04f 0300 	mov.w	r3, #0
 800b1f8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800b1fc:	4649      	mov	r1, r9
 800b1fe:	008b      	lsls	r3, r1, #2
 800b200:	4641      	mov	r1, r8
 800b202:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b206:	4641      	mov	r1, r8
 800b208:	008a      	lsls	r2, r1, #2
 800b20a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800b20e:	f7f5 fe59 	bl	8000ec4 <__aeabi_uldivmod>
 800b212:	4602      	mov	r2, r0
 800b214:	460b      	mov	r3, r1
 800b216:	4611      	mov	r1, r2
 800b218:	4b38      	ldr	r3, [pc, #224]	@ (800b2fc <UART_SetConfig+0x4e4>)
 800b21a:	fba3 2301 	umull	r2, r3, r3, r1
 800b21e:	095b      	lsrs	r3, r3, #5
 800b220:	2264      	movs	r2, #100	@ 0x64
 800b222:	fb02 f303 	mul.w	r3, r2, r3
 800b226:	1acb      	subs	r3, r1, r3
 800b228:	011b      	lsls	r3, r3, #4
 800b22a:	3332      	adds	r3, #50	@ 0x32
 800b22c:	4a33      	ldr	r2, [pc, #204]	@ (800b2fc <UART_SetConfig+0x4e4>)
 800b22e:	fba2 2303 	umull	r2, r3, r2, r3
 800b232:	095b      	lsrs	r3, r3, #5
 800b234:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b238:	441c      	add	r4, r3
 800b23a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b23e:	2200      	movs	r2, #0
 800b240:	673b      	str	r3, [r7, #112]	@ 0x70
 800b242:	677a      	str	r2, [r7, #116]	@ 0x74
 800b244:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800b248:	4642      	mov	r2, r8
 800b24a:	464b      	mov	r3, r9
 800b24c:	1891      	adds	r1, r2, r2
 800b24e:	60b9      	str	r1, [r7, #8]
 800b250:	415b      	adcs	r3, r3
 800b252:	60fb      	str	r3, [r7, #12]
 800b254:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b258:	4641      	mov	r1, r8
 800b25a:	1851      	adds	r1, r2, r1
 800b25c:	6039      	str	r1, [r7, #0]
 800b25e:	4649      	mov	r1, r9
 800b260:	414b      	adcs	r3, r1
 800b262:	607b      	str	r3, [r7, #4]
 800b264:	f04f 0200 	mov.w	r2, #0
 800b268:	f04f 0300 	mov.w	r3, #0
 800b26c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b270:	4659      	mov	r1, fp
 800b272:	00cb      	lsls	r3, r1, #3
 800b274:	4651      	mov	r1, sl
 800b276:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b27a:	4651      	mov	r1, sl
 800b27c:	00ca      	lsls	r2, r1, #3
 800b27e:	4610      	mov	r0, r2
 800b280:	4619      	mov	r1, r3
 800b282:	4603      	mov	r3, r0
 800b284:	4642      	mov	r2, r8
 800b286:	189b      	adds	r3, r3, r2
 800b288:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b28a:	464b      	mov	r3, r9
 800b28c:	460a      	mov	r2, r1
 800b28e:	eb42 0303 	adc.w	r3, r2, r3
 800b292:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b298:	685b      	ldr	r3, [r3, #4]
 800b29a:	2200      	movs	r2, #0
 800b29c:	663b      	str	r3, [r7, #96]	@ 0x60
 800b29e:	667a      	str	r2, [r7, #100]	@ 0x64
 800b2a0:	f04f 0200 	mov.w	r2, #0
 800b2a4:	f04f 0300 	mov.w	r3, #0
 800b2a8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800b2ac:	4649      	mov	r1, r9
 800b2ae:	008b      	lsls	r3, r1, #2
 800b2b0:	4641      	mov	r1, r8
 800b2b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b2b6:	4641      	mov	r1, r8
 800b2b8:	008a      	lsls	r2, r1, #2
 800b2ba:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800b2be:	f7f5 fe01 	bl	8000ec4 <__aeabi_uldivmod>
 800b2c2:	4602      	mov	r2, r0
 800b2c4:	460b      	mov	r3, r1
 800b2c6:	4b0d      	ldr	r3, [pc, #52]	@ (800b2fc <UART_SetConfig+0x4e4>)
 800b2c8:	fba3 1302 	umull	r1, r3, r3, r2
 800b2cc:	095b      	lsrs	r3, r3, #5
 800b2ce:	2164      	movs	r1, #100	@ 0x64
 800b2d0:	fb01 f303 	mul.w	r3, r1, r3
 800b2d4:	1ad3      	subs	r3, r2, r3
 800b2d6:	011b      	lsls	r3, r3, #4
 800b2d8:	3332      	adds	r3, #50	@ 0x32
 800b2da:	4a08      	ldr	r2, [pc, #32]	@ (800b2fc <UART_SetConfig+0x4e4>)
 800b2dc:	fba2 2303 	umull	r2, r3, r2, r3
 800b2e0:	095b      	lsrs	r3, r3, #5
 800b2e2:	f003 020f 	and.w	r2, r3, #15
 800b2e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	4422      	add	r2, r4
 800b2ee:	609a      	str	r2, [r3, #8]
}
 800b2f0:	bf00      	nop
 800b2f2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b2fc:	51eb851f 	.word	0x51eb851f

0800b300 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b300:	b084      	sub	sp, #16
 800b302:	b580      	push	{r7, lr}
 800b304:	b084      	sub	sp, #16
 800b306:	af00      	add	r7, sp, #0
 800b308:	6078      	str	r0, [r7, #4]
 800b30a:	f107 001c 	add.w	r0, r7, #28
 800b30e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b312:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800b316:	2b01      	cmp	r3, #1
 800b318:	d123      	bne.n	800b362 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b31e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	68db      	ldr	r3, [r3, #12]
 800b32a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800b32e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b332:	687a      	ldr	r2, [r7, #4]
 800b334:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	68db      	ldr	r3, [r3, #12]
 800b33a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b342:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b346:	2b01      	cmp	r3, #1
 800b348:	d105      	bne.n	800b356 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	68db      	ldr	r3, [r3, #12]
 800b34e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b356:	6878      	ldr	r0, [r7, #4]
 800b358:	f000 faa0 	bl	800b89c <USB_CoreReset>
 800b35c:	4603      	mov	r3, r0
 800b35e:	73fb      	strb	r3, [r7, #15]
 800b360:	e01b      	b.n	800b39a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	68db      	ldr	r3, [r3, #12]
 800b366:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b36e:	6878      	ldr	r0, [r7, #4]
 800b370:	f000 fa94 	bl	800b89c <USB_CoreReset>
 800b374:	4603      	mov	r3, r0
 800b376:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b378:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d106      	bne.n	800b38e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b384:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	639a      	str	r2, [r3, #56]	@ 0x38
 800b38c:	e005      	b.n	800b39a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b392:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b39a:	7fbb      	ldrb	r3, [r7, #30]
 800b39c:	2b01      	cmp	r3, #1
 800b39e:	d10b      	bne.n	800b3b8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	689b      	ldr	r3, [r3, #8]
 800b3a4:	f043 0206 	orr.w	r2, r3, #6
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	689b      	ldr	r3, [r3, #8]
 800b3b0:	f043 0220 	orr.w	r2, r3, #32
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b3b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	3710      	adds	r7, #16
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b3c4:	b004      	add	sp, #16
 800b3c6:	4770      	bx	lr

0800b3c8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b3c8:	b480      	push	{r7}
 800b3ca:	b083      	sub	sp, #12
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	689b      	ldr	r3, [r3, #8]
 800b3d4:	f023 0201 	bic.w	r2, r3, #1
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b3dc:	2300      	movs	r3, #0
}
 800b3de:	4618      	mov	r0, r3
 800b3e0:	370c      	adds	r7, #12
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e8:	4770      	bx	lr

0800b3ea <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b3ea:	b580      	push	{r7, lr}
 800b3ec:	b084      	sub	sp, #16
 800b3ee:	af00      	add	r7, sp, #0
 800b3f0:	6078      	str	r0, [r7, #4]
 800b3f2:	460b      	mov	r3, r1
 800b3f4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	68db      	ldr	r3, [r3, #12]
 800b3fe:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b406:	78fb      	ldrb	r3, [r7, #3]
 800b408:	2b01      	cmp	r3, #1
 800b40a:	d115      	bne.n	800b438 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	68db      	ldr	r3, [r3, #12]
 800b410:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800b418:	200a      	movs	r0, #10
 800b41a:	f7fb fdad 	bl	8006f78 <HAL_Delay>
      ms += 10U;
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	330a      	adds	r3, #10
 800b422:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800b424:	6878      	ldr	r0, [r7, #4]
 800b426:	f000 fa2b 	bl	800b880 <USB_GetMode>
 800b42a:	4603      	mov	r3, r0
 800b42c:	2b01      	cmp	r3, #1
 800b42e:	d01e      	beq.n	800b46e <USB_SetCurrentMode+0x84>
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	2bc7      	cmp	r3, #199	@ 0xc7
 800b434:	d9f0      	bls.n	800b418 <USB_SetCurrentMode+0x2e>
 800b436:	e01a      	b.n	800b46e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b438:	78fb      	ldrb	r3, [r7, #3]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d115      	bne.n	800b46a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	68db      	ldr	r3, [r3, #12]
 800b442:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800b44a:	200a      	movs	r0, #10
 800b44c:	f7fb fd94 	bl	8006f78 <HAL_Delay>
      ms += 10U;
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	330a      	adds	r3, #10
 800b454:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800b456:	6878      	ldr	r0, [r7, #4]
 800b458:	f000 fa12 	bl	800b880 <USB_GetMode>
 800b45c:	4603      	mov	r3, r0
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d005      	beq.n	800b46e <USB_SetCurrentMode+0x84>
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	2bc7      	cmp	r3, #199	@ 0xc7
 800b466:	d9f0      	bls.n	800b44a <USB_SetCurrentMode+0x60>
 800b468:	e001      	b.n	800b46e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b46a:	2301      	movs	r3, #1
 800b46c:	e005      	b.n	800b47a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	2bc8      	cmp	r3, #200	@ 0xc8
 800b472:	d101      	bne.n	800b478 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b474:	2301      	movs	r3, #1
 800b476:	e000      	b.n	800b47a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b478:	2300      	movs	r3, #0
}
 800b47a:	4618      	mov	r0, r3
 800b47c:	3710      	adds	r7, #16
 800b47e:	46bd      	mov	sp, r7
 800b480:	bd80      	pop	{r7, pc}
	...

0800b484 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b484:	b084      	sub	sp, #16
 800b486:	b580      	push	{r7, lr}
 800b488:	b086      	sub	sp, #24
 800b48a:	af00      	add	r7, sp, #0
 800b48c:	6078      	str	r0, [r7, #4]
 800b48e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800b492:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b496:	2300      	movs	r3, #0
 800b498:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b49e:	2300      	movs	r3, #0
 800b4a0:	613b      	str	r3, [r7, #16]
 800b4a2:	e009      	b.n	800b4b8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b4a4:	687a      	ldr	r2, [r7, #4]
 800b4a6:	693b      	ldr	r3, [r7, #16]
 800b4a8:	3340      	adds	r3, #64	@ 0x40
 800b4aa:	009b      	lsls	r3, r3, #2
 800b4ac:	4413      	add	r3, r2
 800b4ae:	2200      	movs	r2, #0
 800b4b0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b4b2:	693b      	ldr	r3, [r7, #16]
 800b4b4:	3301      	adds	r3, #1
 800b4b6:	613b      	str	r3, [r7, #16]
 800b4b8:	693b      	ldr	r3, [r7, #16]
 800b4ba:	2b0e      	cmp	r3, #14
 800b4bc:	d9f2      	bls.n	800b4a4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b4be:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d11c      	bne.n	800b500 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b4cc:	685b      	ldr	r3, [r3, #4]
 800b4ce:	68fa      	ldr	r2, [r7, #12]
 800b4d0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b4d4:	f043 0302 	orr.w	r3, r3, #2
 800b4d8:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b4de:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b4ea:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b4f6:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	639a      	str	r2, [r3, #56]	@ 0x38
 800b4fe:	e00b      	b.n	800b518 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b504:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b510:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b51e:	461a      	mov	r2, r3
 800b520:	2300      	movs	r3, #0
 800b522:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b524:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800b528:	2b01      	cmp	r3, #1
 800b52a:	d10d      	bne.n	800b548 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b52c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b530:	2b00      	cmp	r3, #0
 800b532:	d104      	bne.n	800b53e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b534:	2100      	movs	r1, #0
 800b536:	6878      	ldr	r0, [r7, #4]
 800b538:	f000 f968 	bl	800b80c <USB_SetDevSpeed>
 800b53c:	e008      	b.n	800b550 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b53e:	2101      	movs	r1, #1
 800b540:	6878      	ldr	r0, [r7, #4]
 800b542:	f000 f963 	bl	800b80c <USB_SetDevSpeed>
 800b546:	e003      	b.n	800b550 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b548:	2103      	movs	r1, #3
 800b54a:	6878      	ldr	r0, [r7, #4]
 800b54c:	f000 f95e 	bl	800b80c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b550:	2110      	movs	r1, #16
 800b552:	6878      	ldr	r0, [r7, #4]
 800b554:	f000 f8fa 	bl	800b74c <USB_FlushTxFifo>
 800b558:	4603      	mov	r3, r0
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d001      	beq.n	800b562 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800b55e:	2301      	movs	r3, #1
 800b560:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b562:	6878      	ldr	r0, [r7, #4]
 800b564:	f000 f924 	bl	800b7b0 <USB_FlushRxFifo>
 800b568:	4603      	mov	r3, r0
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d001      	beq.n	800b572 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800b56e:	2301      	movs	r3, #1
 800b570:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b578:	461a      	mov	r2, r3
 800b57a:	2300      	movs	r3, #0
 800b57c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b584:	461a      	mov	r2, r3
 800b586:	2300      	movs	r3, #0
 800b588:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b590:	461a      	mov	r2, r3
 800b592:	2300      	movs	r3, #0
 800b594:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b596:	2300      	movs	r3, #0
 800b598:	613b      	str	r3, [r7, #16]
 800b59a:	e043      	b.n	800b624 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b59c:	693b      	ldr	r3, [r7, #16]
 800b59e:	015a      	lsls	r2, r3, #5
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	4413      	add	r3, r2
 800b5a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b5ae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b5b2:	d118      	bne.n	800b5e6 <USB_DevInit+0x162>
    {
      if (i == 0U)
 800b5b4:	693b      	ldr	r3, [r7, #16]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d10a      	bne.n	800b5d0 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b5ba:	693b      	ldr	r3, [r7, #16]
 800b5bc:	015a      	lsls	r2, r3, #5
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	4413      	add	r3, r2
 800b5c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b5c6:	461a      	mov	r2, r3
 800b5c8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800b5cc:	6013      	str	r3, [r2, #0]
 800b5ce:	e013      	b.n	800b5f8 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b5d0:	693b      	ldr	r3, [r7, #16]
 800b5d2:	015a      	lsls	r2, r3, #5
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	4413      	add	r3, r2
 800b5d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b5dc:	461a      	mov	r2, r3
 800b5de:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800b5e2:	6013      	str	r3, [r2, #0]
 800b5e4:	e008      	b.n	800b5f8 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b5e6:	693b      	ldr	r3, [r7, #16]
 800b5e8:	015a      	lsls	r2, r3, #5
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	4413      	add	r3, r2
 800b5ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b5f2:	461a      	mov	r2, r3
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b5f8:	693b      	ldr	r3, [r7, #16]
 800b5fa:	015a      	lsls	r2, r3, #5
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	4413      	add	r3, r2
 800b600:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b604:	461a      	mov	r2, r3
 800b606:	2300      	movs	r3, #0
 800b608:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b60a:	693b      	ldr	r3, [r7, #16]
 800b60c:	015a      	lsls	r2, r3, #5
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	4413      	add	r3, r2
 800b612:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b616:	461a      	mov	r2, r3
 800b618:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800b61c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b61e:	693b      	ldr	r3, [r7, #16]
 800b620:	3301      	adds	r3, #1
 800b622:	613b      	str	r3, [r7, #16]
 800b624:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b628:	461a      	mov	r2, r3
 800b62a:	693b      	ldr	r3, [r7, #16]
 800b62c:	4293      	cmp	r3, r2
 800b62e:	d3b5      	bcc.n	800b59c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b630:	2300      	movs	r3, #0
 800b632:	613b      	str	r3, [r7, #16]
 800b634:	e043      	b.n	800b6be <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b636:	693b      	ldr	r3, [r7, #16]
 800b638:	015a      	lsls	r2, r3, #5
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	4413      	add	r3, r2
 800b63e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b648:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b64c:	d118      	bne.n	800b680 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800b64e:	693b      	ldr	r3, [r7, #16]
 800b650:	2b00      	cmp	r3, #0
 800b652:	d10a      	bne.n	800b66a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b654:	693b      	ldr	r3, [r7, #16]
 800b656:	015a      	lsls	r2, r3, #5
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	4413      	add	r3, r2
 800b65c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b660:	461a      	mov	r2, r3
 800b662:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800b666:	6013      	str	r3, [r2, #0]
 800b668:	e013      	b.n	800b692 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b66a:	693b      	ldr	r3, [r7, #16]
 800b66c:	015a      	lsls	r2, r3, #5
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	4413      	add	r3, r2
 800b672:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b676:	461a      	mov	r2, r3
 800b678:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800b67c:	6013      	str	r3, [r2, #0]
 800b67e:	e008      	b.n	800b692 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b680:	693b      	ldr	r3, [r7, #16]
 800b682:	015a      	lsls	r2, r3, #5
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	4413      	add	r3, r2
 800b688:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b68c:	461a      	mov	r2, r3
 800b68e:	2300      	movs	r3, #0
 800b690:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b692:	693b      	ldr	r3, [r7, #16]
 800b694:	015a      	lsls	r2, r3, #5
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	4413      	add	r3, r2
 800b69a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b69e:	461a      	mov	r2, r3
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b6a4:	693b      	ldr	r3, [r7, #16]
 800b6a6:	015a      	lsls	r2, r3, #5
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	4413      	add	r3, r2
 800b6ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b6b0:	461a      	mov	r2, r3
 800b6b2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800b6b6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b6b8:	693b      	ldr	r3, [r7, #16]
 800b6ba:	3301      	adds	r3, #1
 800b6bc:	613b      	str	r3, [r7, #16]
 800b6be:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b6c2:	461a      	mov	r2, r3
 800b6c4:	693b      	ldr	r3, [r7, #16]
 800b6c6:	4293      	cmp	r3, r2
 800b6c8:	d3b5      	bcc.n	800b636 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b6d0:	691b      	ldr	r3, [r3, #16]
 800b6d2:	68fa      	ldr	r2, [r7, #12]
 800b6d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b6d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b6dc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	2200      	movs	r2, #0
 800b6e2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800b6ea:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b6ec:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d105      	bne.n	800b700 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	699b      	ldr	r3, [r3, #24]
 800b6f8:	f043 0210 	orr.w	r2, r3, #16
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	699a      	ldr	r2, [r3, #24]
 800b704:	4b10      	ldr	r3, [pc, #64]	@ (800b748 <USB_DevInit+0x2c4>)
 800b706:	4313      	orrs	r3, r2
 800b708:	687a      	ldr	r2, [r7, #4]
 800b70a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b70c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800b710:	2b00      	cmp	r3, #0
 800b712:	d005      	beq.n	800b720 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	699b      	ldr	r3, [r3, #24]
 800b718:	f043 0208 	orr.w	r2, r3, #8
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b720:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b724:	2b01      	cmp	r3, #1
 800b726:	d107      	bne.n	800b738 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	699b      	ldr	r3, [r3, #24]
 800b72c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b730:	f043 0304 	orr.w	r3, r3, #4
 800b734:	687a      	ldr	r2, [r7, #4]
 800b736:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b738:	7dfb      	ldrb	r3, [r7, #23]
}
 800b73a:	4618      	mov	r0, r3
 800b73c:	3718      	adds	r7, #24
 800b73e:	46bd      	mov	sp, r7
 800b740:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b744:	b004      	add	sp, #16
 800b746:	4770      	bx	lr
 800b748:	803c3800 	.word	0x803c3800

0800b74c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b74c:	b480      	push	{r7}
 800b74e:	b085      	sub	sp, #20
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]
 800b754:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b756:	2300      	movs	r3, #0
 800b758:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	3301      	adds	r3, #1
 800b75e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b766:	d901      	bls.n	800b76c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b768:	2303      	movs	r3, #3
 800b76a:	e01b      	b.n	800b7a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	691b      	ldr	r3, [r3, #16]
 800b770:	2b00      	cmp	r3, #0
 800b772:	daf2      	bge.n	800b75a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b774:	2300      	movs	r3, #0
 800b776:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b778:	683b      	ldr	r3, [r7, #0]
 800b77a:	019b      	lsls	r3, r3, #6
 800b77c:	f043 0220 	orr.w	r2, r3, #32
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	3301      	adds	r3, #1
 800b788:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b790:	d901      	bls.n	800b796 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800b792:	2303      	movs	r3, #3
 800b794:	e006      	b.n	800b7a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	691b      	ldr	r3, [r3, #16]
 800b79a:	f003 0320 	and.w	r3, r3, #32
 800b79e:	2b20      	cmp	r3, #32
 800b7a0:	d0f0      	beq.n	800b784 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b7a2:	2300      	movs	r3, #0
}
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	3714      	adds	r7, #20
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ae:	4770      	bx	lr

0800b7b0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b7b0:	b480      	push	{r7}
 800b7b2:	b085      	sub	sp, #20
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	3301      	adds	r3, #1
 800b7c0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b7c8:	d901      	bls.n	800b7ce <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b7ca:	2303      	movs	r3, #3
 800b7cc:	e018      	b.n	800b800 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	691b      	ldr	r3, [r3, #16]
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	daf2      	bge.n	800b7bc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	2210      	movs	r2, #16
 800b7de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	3301      	adds	r3, #1
 800b7e4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b7ec:	d901      	bls.n	800b7f2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b7ee:	2303      	movs	r3, #3
 800b7f0:	e006      	b.n	800b800 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	691b      	ldr	r3, [r3, #16]
 800b7f6:	f003 0310 	and.w	r3, r3, #16
 800b7fa:	2b10      	cmp	r3, #16
 800b7fc:	d0f0      	beq.n	800b7e0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b7fe:	2300      	movs	r3, #0
}
 800b800:	4618      	mov	r0, r3
 800b802:	3714      	adds	r7, #20
 800b804:	46bd      	mov	sp, r7
 800b806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80a:	4770      	bx	lr

0800b80c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b80c:	b480      	push	{r7}
 800b80e:	b085      	sub	sp, #20
 800b810:	af00      	add	r7, sp, #0
 800b812:	6078      	str	r0, [r7, #4]
 800b814:	460b      	mov	r3, r1
 800b816:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b822:	681a      	ldr	r2, [r3, #0]
 800b824:	78fb      	ldrb	r3, [r7, #3]
 800b826:	68f9      	ldr	r1, [r7, #12]
 800b828:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b82c:	4313      	orrs	r3, r2
 800b82e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b830:	2300      	movs	r3, #0
}
 800b832:	4618      	mov	r0, r3
 800b834:	3714      	adds	r7, #20
 800b836:	46bd      	mov	sp, r7
 800b838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83c:	4770      	bx	lr

0800b83e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800b83e:	b480      	push	{r7}
 800b840:	b085      	sub	sp, #20
 800b842:	af00      	add	r7, sp, #0
 800b844:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	68fa      	ldr	r2, [r7, #12]
 800b854:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b858:	f023 0303 	bic.w	r3, r3, #3
 800b85c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b864:	685b      	ldr	r3, [r3, #4]
 800b866:	68fa      	ldr	r2, [r7, #12]
 800b868:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b86c:	f043 0302 	orr.w	r3, r3, #2
 800b870:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b872:	2300      	movs	r3, #0
}
 800b874:	4618      	mov	r0, r3
 800b876:	3714      	adds	r7, #20
 800b878:	46bd      	mov	sp, r7
 800b87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87e:	4770      	bx	lr

0800b880 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800b880:	b480      	push	{r7}
 800b882:	b083      	sub	sp, #12
 800b884:	af00      	add	r7, sp, #0
 800b886:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	695b      	ldr	r3, [r3, #20]
 800b88c:	f003 0301 	and.w	r3, r3, #1
}
 800b890:	4618      	mov	r0, r3
 800b892:	370c      	adds	r7, #12
 800b894:	46bd      	mov	sp, r7
 800b896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89a:	4770      	bx	lr

0800b89c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b89c:	b480      	push	{r7}
 800b89e:	b085      	sub	sp, #20
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	3301      	adds	r3, #1
 800b8ac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b8b4:	d901      	bls.n	800b8ba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b8b6:	2303      	movs	r3, #3
 800b8b8:	e01b      	b.n	800b8f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	691b      	ldr	r3, [r3, #16]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	daf2      	bge.n	800b8a8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	691b      	ldr	r3, [r3, #16]
 800b8ca:	f043 0201 	orr.w	r2, r3, #1
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	3301      	adds	r3, #1
 800b8d6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b8de:	d901      	bls.n	800b8e4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b8e0:	2303      	movs	r3, #3
 800b8e2:	e006      	b.n	800b8f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	691b      	ldr	r3, [r3, #16]
 800b8e8:	f003 0301 	and.w	r3, r3, #1
 800b8ec:	2b01      	cmp	r3, #1
 800b8ee:	d0f0      	beq.n	800b8d2 <USB_CoreReset+0x36>

  return HAL_OK;
 800b8f0:	2300      	movs	r3, #0
}
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	3714      	adds	r7, #20
 800b8f6:	46bd      	mov	sp, r7
 800b8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fc:	4770      	bx	lr
	...

0800b900 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800b900:	b580      	push	{r7, lr}
 800b902:	b084      	sub	sp, #16
 800b904:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800b906:	4b87      	ldr	r3, [pc, #540]	@ (800bb24 <MX_LWIP_Init+0x224>)
 800b908:	22c0      	movs	r2, #192	@ 0xc0
 800b90a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800b90c:	4b85      	ldr	r3, [pc, #532]	@ (800bb24 <MX_LWIP_Init+0x224>)
 800b90e:	22a8      	movs	r2, #168	@ 0xa8
 800b910:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800b912:	4b84      	ldr	r3, [pc, #528]	@ (800bb24 <MX_LWIP_Init+0x224>)
 800b914:	2201      	movs	r2, #1
 800b916:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 156;
 800b918:	4b82      	ldr	r3, [pc, #520]	@ (800bb24 <MX_LWIP_Init+0x224>)
 800b91a:	229c      	movs	r2, #156	@ 0x9c
 800b91c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800b91e:	4b82      	ldr	r3, [pc, #520]	@ (800bb28 <MX_LWIP_Init+0x228>)
 800b920:	22ff      	movs	r2, #255	@ 0xff
 800b922:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800b924:	4b80      	ldr	r3, [pc, #512]	@ (800bb28 <MX_LWIP_Init+0x228>)
 800b926:	22ff      	movs	r2, #255	@ 0xff
 800b928:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800b92a:	4b7f      	ldr	r3, [pc, #508]	@ (800bb28 <MX_LWIP_Init+0x228>)
 800b92c:	22ff      	movs	r2, #255	@ 0xff
 800b92e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800b930:	4b7d      	ldr	r3, [pc, #500]	@ (800bb28 <MX_LWIP_Init+0x228>)
 800b932:	2200      	movs	r2, #0
 800b934:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800b936:	4b7d      	ldr	r3, [pc, #500]	@ (800bb2c <MX_LWIP_Init+0x22c>)
 800b938:	22c0      	movs	r2, #192	@ 0xc0
 800b93a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800b93c:	4b7b      	ldr	r3, [pc, #492]	@ (800bb2c <MX_LWIP_Init+0x22c>)
 800b93e:	22a8      	movs	r2, #168	@ 0xa8
 800b940:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 800b942:	4b7a      	ldr	r3, [pc, #488]	@ (800bb2c <MX_LWIP_Init+0x22c>)
 800b944:	2201      	movs	r2, #1
 800b946:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 800b948:	4b78      	ldr	r3, [pc, #480]	@ (800bb2c <MX_LWIP_Init+0x22c>)
 800b94a:	2201      	movs	r2, #1
 800b94c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack without RTOS */
  lwip_init();
 800b94e:	f000 ffc2 	bl	800c8d6 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800b952:	4b74      	ldr	r3, [pc, #464]	@ (800bb24 <MX_LWIP_Init+0x224>)
 800b954:	781b      	ldrb	r3, [r3, #0]
 800b956:	061a      	lsls	r2, r3, #24
 800b958:	4b72      	ldr	r3, [pc, #456]	@ (800bb24 <MX_LWIP_Init+0x224>)
 800b95a:	785b      	ldrb	r3, [r3, #1]
 800b95c:	041b      	lsls	r3, r3, #16
 800b95e:	431a      	orrs	r2, r3
 800b960:	4b70      	ldr	r3, [pc, #448]	@ (800bb24 <MX_LWIP_Init+0x224>)
 800b962:	789b      	ldrb	r3, [r3, #2]
 800b964:	021b      	lsls	r3, r3, #8
 800b966:	4313      	orrs	r3, r2
 800b968:	4a6e      	ldr	r2, [pc, #440]	@ (800bb24 <MX_LWIP_Init+0x224>)
 800b96a:	78d2      	ldrb	r2, [r2, #3]
 800b96c:	4313      	orrs	r3, r2
 800b96e:	061a      	lsls	r2, r3, #24
 800b970:	4b6c      	ldr	r3, [pc, #432]	@ (800bb24 <MX_LWIP_Init+0x224>)
 800b972:	781b      	ldrb	r3, [r3, #0]
 800b974:	0619      	lsls	r1, r3, #24
 800b976:	4b6b      	ldr	r3, [pc, #428]	@ (800bb24 <MX_LWIP_Init+0x224>)
 800b978:	785b      	ldrb	r3, [r3, #1]
 800b97a:	041b      	lsls	r3, r3, #16
 800b97c:	4319      	orrs	r1, r3
 800b97e:	4b69      	ldr	r3, [pc, #420]	@ (800bb24 <MX_LWIP_Init+0x224>)
 800b980:	789b      	ldrb	r3, [r3, #2]
 800b982:	021b      	lsls	r3, r3, #8
 800b984:	430b      	orrs	r3, r1
 800b986:	4967      	ldr	r1, [pc, #412]	@ (800bb24 <MX_LWIP_Init+0x224>)
 800b988:	78c9      	ldrb	r1, [r1, #3]
 800b98a:	430b      	orrs	r3, r1
 800b98c:	021b      	lsls	r3, r3, #8
 800b98e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b992:	431a      	orrs	r2, r3
 800b994:	4b63      	ldr	r3, [pc, #396]	@ (800bb24 <MX_LWIP_Init+0x224>)
 800b996:	781b      	ldrb	r3, [r3, #0]
 800b998:	0619      	lsls	r1, r3, #24
 800b99a:	4b62      	ldr	r3, [pc, #392]	@ (800bb24 <MX_LWIP_Init+0x224>)
 800b99c:	785b      	ldrb	r3, [r3, #1]
 800b99e:	041b      	lsls	r3, r3, #16
 800b9a0:	4319      	orrs	r1, r3
 800b9a2:	4b60      	ldr	r3, [pc, #384]	@ (800bb24 <MX_LWIP_Init+0x224>)
 800b9a4:	789b      	ldrb	r3, [r3, #2]
 800b9a6:	021b      	lsls	r3, r3, #8
 800b9a8:	430b      	orrs	r3, r1
 800b9aa:	495e      	ldr	r1, [pc, #376]	@ (800bb24 <MX_LWIP_Init+0x224>)
 800b9ac:	78c9      	ldrb	r1, [r1, #3]
 800b9ae:	430b      	orrs	r3, r1
 800b9b0:	0a1b      	lsrs	r3, r3, #8
 800b9b2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800b9b6:	431a      	orrs	r2, r3
 800b9b8:	4b5a      	ldr	r3, [pc, #360]	@ (800bb24 <MX_LWIP_Init+0x224>)
 800b9ba:	781b      	ldrb	r3, [r3, #0]
 800b9bc:	0619      	lsls	r1, r3, #24
 800b9be:	4b59      	ldr	r3, [pc, #356]	@ (800bb24 <MX_LWIP_Init+0x224>)
 800b9c0:	785b      	ldrb	r3, [r3, #1]
 800b9c2:	041b      	lsls	r3, r3, #16
 800b9c4:	4319      	orrs	r1, r3
 800b9c6:	4b57      	ldr	r3, [pc, #348]	@ (800bb24 <MX_LWIP_Init+0x224>)
 800b9c8:	789b      	ldrb	r3, [r3, #2]
 800b9ca:	021b      	lsls	r3, r3, #8
 800b9cc:	430b      	orrs	r3, r1
 800b9ce:	4955      	ldr	r1, [pc, #340]	@ (800bb24 <MX_LWIP_Init+0x224>)
 800b9d0:	78c9      	ldrb	r1, [r1, #3]
 800b9d2:	430b      	orrs	r3, r1
 800b9d4:	0e1b      	lsrs	r3, r3, #24
 800b9d6:	4313      	orrs	r3, r2
 800b9d8:	4a55      	ldr	r2, [pc, #340]	@ (800bb30 <MX_LWIP_Init+0x230>)
 800b9da:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800b9dc:	4b52      	ldr	r3, [pc, #328]	@ (800bb28 <MX_LWIP_Init+0x228>)
 800b9de:	781b      	ldrb	r3, [r3, #0]
 800b9e0:	061a      	lsls	r2, r3, #24
 800b9e2:	4b51      	ldr	r3, [pc, #324]	@ (800bb28 <MX_LWIP_Init+0x228>)
 800b9e4:	785b      	ldrb	r3, [r3, #1]
 800b9e6:	041b      	lsls	r3, r3, #16
 800b9e8:	431a      	orrs	r2, r3
 800b9ea:	4b4f      	ldr	r3, [pc, #316]	@ (800bb28 <MX_LWIP_Init+0x228>)
 800b9ec:	789b      	ldrb	r3, [r3, #2]
 800b9ee:	021b      	lsls	r3, r3, #8
 800b9f0:	4313      	orrs	r3, r2
 800b9f2:	4a4d      	ldr	r2, [pc, #308]	@ (800bb28 <MX_LWIP_Init+0x228>)
 800b9f4:	78d2      	ldrb	r2, [r2, #3]
 800b9f6:	4313      	orrs	r3, r2
 800b9f8:	061a      	lsls	r2, r3, #24
 800b9fa:	4b4b      	ldr	r3, [pc, #300]	@ (800bb28 <MX_LWIP_Init+0x228>)
 800b9fc:	781b      	ldrb	r3, [r3, #0]
 800b9fe:	0619      	lsls	r1, r3, #24
 800ba00:	4b49      	ldr	r3, [pc, #292]	@ (800bb28 <MX_LWIP_Init+0x228>)
 800ba02:	785b      	ldrb	r3, [r3, #1]
 800ba04:	041b      	lsls	r3, r3, #16
 800ba06:	4319      	orrs	r1, r3
 800ba08:	4b47      	ldr	r3, [pc, #284]	@ (800bb28 <MX_LWIP_Init+0x228>)
 800ba0a:	789b      	ldrb	r3, [r3, #2]
 800ba0c:	021b      	lsls	r3, r3, #8
 800ba0e:	430b      	orrs	r3, r1
 800ba10:	4945      	ldr	r1, [pc, #276]	@ (800bb28 <MX_LWIP_Init+0x228>)
 800ba12:	78c9      	ldrb	r1, [r1, #3]
 800ba14:	430b      	orrs	r3, r1
 800ba16:	021b      	lsls	r3, r3, #8
 800ba18:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ba1c:	431a      	orrs	r2, r3
 800ba1e:	4b42      	ldr	r3, [pc, #264]	@ (800bb28 <MX_LWIP_Init+0x228>)
 800ba20:	781b      	ldrb	r3, [r3, #0]
 800ba22:	0619      	lsls	r1, r3, #24
 800ba24:	4b40      	ldr	r3, [pc, #256]	@ (800bb28 <MX_LWIP_Init+0x228>)
 800ba26:	785b      	ldrb	r3, [r3, #1]
 800ba28:	041b      	lsls	r3, r3, #16
 800ba2a:	4319      	orrs	r1, r3
 800ba2c:	4b3e      	ldr	r3, [pc, #248]	@ (800bb28 <MX_LWIP_Init+0x228>)
 800ba2e:	789b      	ldrb	r3, [r3, #2]
 800ba30:	021b      	lsls	r3, r3, #8
 800ba32:	430b      	orrs	r3, r1
 800ba34:	493c      	ldr	r1, [pc, #240]	@ (800bb28 <MX_LWIP_Init+0x228>)
 800ba36:	78c9      	ldrb	r1, [r1, #3]
 800ba38:	430b      	orrs	r3, r1
 800ba3a:	0a1b      	lsrs	r3, r3, #8
 800ba3c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800ba40:	431a      	orrs	r2, r3
 800ba42:	4b39      	ldr	r3, [pc, #228]	@ (800bb28 <MX_LWIP_Init+0x228>)
 800ba44:	781b      	ldrb	r3, [r3, #0]
 800ba46:	0619      	lsls	r1, r3, #24
 800ba48:	4b37      	ldr	r3, [pc, #220]	@ (800bb28 <MX_LWIP_Init+0x228>)
 800ba4a:	785b      	ldrb	r3, [r3, #1]
 800ba4c:	041b      	lsls	r3, r3, #16
 800ba4e:	4319      	orrs	r1, r3
 800ba50:	4b35      	ldr	r3, [pc, #212]	@ (800bb28 <MX_LWIP_Init+0x228>)
 800ba52:	789b      	ldrb	r3, [r3, #2]
 800ba54:	021b      	lsls	r3, r3, #8
 800ba56:	430b      	orrs	r3, r1
 800ba58:	4933      	ldr	r1, [pc, #204]	@ (800bb28 <MX_LWIP_Init+0x228>)
 800ba5a:	78c9      	ldrb	r1, [r1, #3]
 800ba5c:	430b      	orrs	r3, r1
 800ba5e:	0e1b      	lsrs	r3, r3, #24
 800ba60:	4313      	orrs	r3, r2
 800ba62:	4a34      	ldr	r2, [pc, #208]	@ (800bb34 <MX_LWIP_Init+0x234>)
 800ba64:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800ba66:	4b31      	ldr	r3, [pc, #196]	@ (800bb2c <MX_LWIP_Init+0x22c>)
 800ba68:	781b      	ldrb	r3, [r3, #0]
 800ba6a:	061a      	lsls	r2, r3, #24
 800ba6c:	4b2f      	ldr	r3, [pc, #188]	@ (800bb2c <MX_LWIP_Init+0x22c>)
 800ba6e:	785b      	ldrb	r3, [r3, #1]
 800ba70:	041b      	lsls	r3, r3, #16
 800ba72:	431a      	orrs	r2, r3
 800ba74:	4b2d      	ldr	r3, [pc, #180]	@ (800bb2c <MX_LWIP_Init+0x22c>)
 800ba76:	789b      	ldrb	r3, [r3, #2]
 800ba78:	021b      	lsls	r3, r3, #8
 800ba7a:	4313      	orrs	r3, r2
 800ba7c:	4a2b      	ldr	r2, [pc, #172]	@ (800bb2c <MX_LWIP_Init+0x22c>)
 800ba7e:	78d2      	ldrb	r2, [r2, #3]
 800ba80:	4313      	orrs	r3, r2
 800ba82:	061a      	lsls	r2, r3, #24
 800ba84:	4b29      	ldr	r3, [pc, #164]	@ (800bb2c <MX_LWIP_Init+0x22c>)
 800ba86:	781b      	ldrb	r3, [r3, #0]
 800ba88:	0619      	lsls	r1, r3, #24
 800ba8a:	4b28      	ldr	r3, [pc, #160]	@ (800bb2c <MX_LWIP_Init+0x22c>)
 800ba8c:	785b      	ldrb	r3, [r3, #1]
 800ba8e:	041b      	lsls	r3, r3, #16
 800ba90:	4319      	orrs	r1, r3
 800ba92:	4b26      	ldr	r3, [pc, #152]	@ (800bb2c <MX_LWIP_Init+0x22c>)
 800ba94:	789b      	ldrb	r3, [r3, #2]
 800ba96:	021b      	lsls	r3, r3, #8
 800ba98:	430b      	orrs	r3, r1
 800ba9a:	4924      	ldr	r1, [pc, #144]	@ (800bb2c <MX_LWIP_Init+0x22c>)
 800ba9c:	78c9      	ldrb	r1, [r1, #3]
 800ba9e:	430b      	orrs	r3, r1
 800baa0:	021b      	lsls	r3, r3, #8
 800baa2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800baa6:	431a      	orrs	r2, r3
 800baa8:	4b20      	ldr	r3, [pc, #128]	@ (800bb2c <MX_LWIP_Init+0x22c>)
 800baaa:	781b      	ldrb	r3, [r3, #0]
 800baac:	0619      	lsls	r1, r3, #24
 800baae:	4b1f      	ldr	r3, [pc, #124]	@ (800bb2c <MX_LWIP_Init+0x22c>)
 800bab0:	785b      	ldrb	r3, [r3, #1]
 800bab2:	041b      	lsls	r3, r3, #16
 800bab4:	4319      	orrs	r1, r3
 800bab6:	4b1d      	ldr	r3, [pc, #116]	@ (800bb2c <MX_LWIP_Init+0x22c>)
 800bab8:	789b      	ldrb	r3, [r3, #2]
 800baba:	021b      	lsls	r3, r3, #8
 800babc:	430b      	orrs	r3, r1
 800babe:	491b      	ldr	r1, [pc, #108]	@ (800bb2c <MX_LWIP_Init+0x22c>)
 800bac0:	78c9      	ldrb	r1, [r1, #3]
 800bac2:	430b      	orrs	r3, r1
 800bac4:	0a1b      	lsrs	r3, r3, #8
 800bac6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800baca:	431a      	orrs	r2, r3
 800bacc:	4b17      	ldr	r3, [pc, #92]	@ (800bb2c <MX_LWIP_Init+0x22c>)
 800bace:	781b      	ldrb	r3, [r3, #0]
 800bad0:	0619      	lsls	r1, r3, #24
 800bad2:	4b16      	ldr	r3, [pc, #88]	@ (800bb2c <MX_LWIP_Init+0x22c>)
 800bad4:	785b      	ldrb	r3, [r3, #1]
 800bad6:	041b      	lsls	r3, r3, #16
 800bad8:	4319      	orrs	r1, r3
 800bada:	4b14      	ldr	r3, [pc, #80]	@ (800bb2c <MX_LWIP_Init+0x22c>)
 800badc:	789b      	ldrb	r3, [r3, #2]
 800bade:	021b      	lsls	r3, r3, #8
 800bae0:	430b      	orrs	r3, r1
 800bae2:	4912      	ldr	r1, [pc, #72]	@ (800bb2c <MX_LWIP_Init+0x22c>)
 800bae4:	78c9      	ldrb	r1, [r1, #3]
 800bae6:	430b      	orrs	r3, r1
 800bae8:	0e1b      	lsrs	r3, r3, #24
 800baea:	4313      	orrs	r3, r2
 800baec:	4a12      	ldr	r2, [pc, #72]	@ (800bb38 <MX_LWIP_Init+0x238>)
 800baee:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800baf0:	4b12      	ldr	r3, [pc, #72]	@ (800bb3c <MX_LWIP_Init+0x23c>)
 800baf2:	9302      	str	r3, [sp, #8]
 800baf4:	4b12      	ldr	r3, [pc, #72]	@ (800bb40 <MX_LWIP_Init+0x240>)
 800baf6:	9301      	str	r3, [sp, #4]
 800baf8:	2300      	movs	r3, #0
 800bafa:	9300      	str	r3, [sp, #0]
 800bafc:	4b0e      	ldr	r3, [pc, #56]	@ (800bb38 <MX_LWIP_Init+0x238>)
 800bafe:	4a0d      	ldr	r2, [pc, #52]	@ (800bb34 <MX_LWIP_Init+0x234>)
 800bb00:	490b      	ldr	r1, [pc, #44]	@ (800bb30 <MX_LWIP_Init+0x230>)
 800bb02:	4810      	ldr	r0, [pc, #64]	@ (800bb44 <MX_LWIP_Init+0x244>)
 800bb04:	f001 fbd4 	bl	800d2b0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800bb08:	480e      	ldr	r0, [pc, #56]	@ (800bb44 <MX_LWIP_Init+0x244>)
 800bb0a:	f001 fd83 	bl	800d614 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 800bb0e:	480d      	ldr	r0, [pc, #52]	@ (800bb44 <MX_LWIP_Init+0x244>)
 800bb10:	f001 fd90 	bl	800d634 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800bb14:	490c      	ldr	r1, [pc, #48]	@ (800bb48 <MX_LWIP_Init+0x248>)
 800bb16:	480b      	ldr	r0, [pc, #44]	@ (800bb44 <MX_LWIP_Init+0x244>)
 800bb18:	f001 fe8e 	bl	800d838 <netif_set_link_callback>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800bb1c:	bf00      	nop
 800bb1e:	46bd      	mov	sp, r7
 800bb20:	bd80      	pop	{r7, pc}
 800bb22:	bf00      	nop
 800bb24:	2000e6a4 	.word	0x2000e6a4
 800bb28:	2000e6a8 	.word	0x2000e6a8
 800bb2c:	2000e6ac 	.word	0x2000e6ac
 800bb30:	2000e698 	.word	0x2000e698
 800bb34:	2000e69c 	.word	0x2000e69c
 800bb38:	2000e6a0 	.word	0x2000e6a0
 800bb3c:	08016ae5 	.word	0x08016ae5
 800bb40:	0800be69 	.word	0x0800be69
 800bb44:	2000e664 	.word	0x2000e664
 800bb48:	0800bb9d 	.word	0x0800bb9d

0800bb4c <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b082      	sub	sp, #8
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 800bb54:	f7fb fa04 	bl	8006f60 <HAL_GetTick>
 800bb58:	4602      	mov	r2, r0
 800bb5a:	4b08      	ldr	r3, [pc, #32]	@ (800bb7c <Ethernet_Link_Periodic_Handle+0x30>)
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	1ad3      	subs	r3, r2, r3
 800bb60:	2b63      	cmp	r3, #99	@ 0x63
 800bb62:	d907      	bls.n	800bb74 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 800bb64:	f7fb f9fc 	bl	8006f60 <HAL_GetTick>
 800bb68:	4603      	mov	r3, r0
 800bb6a:	4a04      	ldr	r2, [pc, #16]	@ (800bb7c <Ethernet_Link_Periodic_Handle+0x30>)
 800bb6c:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 800bb6e:	6878      	ldr	r0, [r7, #4]
 800bb70:	f000 fabe 	bl	800c0f0 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 800bb74:	bf00      	nop
 800bb76:	3708      	adds	r7, #8
 800bb78:	46bd      	mov	sp, r7
 800bb7a:	bd80      	pop	{r7, pc}
 800bb7c:	2000e660 	.word	0x2000e660

0800bb80 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 800bb80:	b580      	push	{r7, lr}
 800bb82:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 800bb84:	4804      	ldr	r0, [pc, #16]	@ (800bb98 <MX_LWIP_Process+0x18>)
 800bb86:	f000 f94f 	bl	800be28 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 800bb8a:	f008 f82d 	bl	8013be8 <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 800bb8e:	4802      	ldr	r0, [pc, #8]	@ (800bb98 <MX_LWIP_Process+0x18>)
 800bb90:	f7ff ffdc 	bl	800bb4c <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 800bb94:	bf00      	nop
 800bb96:	bd80      	pop	{r7, pc}
 800bb98:	2000e664 	.word	0x2000e664

0800bb9c <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800bb9c:	b480      	push	{r7}
 800bb9e:	b083      	sub	sp, #12
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800bba4:	bf00      	nop
 800bba6:	370c      	adds	r7, #12
 800bba8:	46bd      	mov	sp, r7
 800bbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbae:	4770      	bx	lr

0800bbb0 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	b084      	sub	sp, #16
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800bbb8:	2300      	movs	r3, #0
 800bbba:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800bbbc:	4b44      	ldr	r3, [pc, #272]	@ (800bcd0 <low_level_init+0x120>)
 800bbbe:	4a45      	ldr	r2, [pc, #276]	@ (800bcd4 <low_level_init+0x124>)
 800bbc0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x50;
 800bbc2:	2350      	movs	r3, #80	@ 0x50
 800bbc4:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x39;
 800bbc6:	2339      	movs	r3, #57	@ 0x39
 800bbc8:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0x64;
 800bbca:	2364      	movs	r3, #100	@ 0x64
 800bbcc:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0xFD;
 800bbce:	23fd      	movs	r3, #253	@ 0xfd
 800bbd0:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x60;
 800bbd2:	2360      	movs	r3, #96	@ 0x60
 800bbd4:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800bbda:	4a3d      	ldr	r2, [pc, #244]	@ (800bcd0 <low_level_init+0x120>)
 800bbdc:	f107 0308 	add.w	r3, r7, #8
 800bbe0:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800bbe2:	4b3b      	ldr	r3, [pc, #236]	@ (800bcd0 <low_level_init+0x120>)
 800bbe4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800bbe8:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800bbea:	4b39      	ldr	r3, [pc, #228]	@ (800bcd0 <low_level_init+0x120>)
 800bbec:	4a3a      	ldr	r2, [pc, #232]	@ (800bcd8 <low_level_init+0x128>)
 800bbee:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800bbf0:	4b37      	ldr	r3, [pc, #220]	@ (800bcd0 <low_level_init+0x120>)
 800bbf2:	4a3a      	ldr	r2, [pc, #232]	@ (800bcdc <low_level_init+0x12c>)
 800bbf4:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1024;
 800bbf6:	4b36      	ldr	r3, [pc, #216]	@ (800bcd0 <low_level_init+0x120>)
 800bbf8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800bbfc:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800bbfe:	4834      	ldr	r0, [pc, #208]	@ (800bcd0 <low_level_init+0x120>)
 800bc00:	f7fb fec8 	bl	8007994 <HAL_ETH_Init>
 800bc04:	4603      	mov	r3, r0
 800bc06:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800bc08:	2238      	movs	r2, #56	@ 0x38
 800bc0a:	2100      	movs	r1, #0
 800bc0c:	4834      	ldr	r0, [pc, #208]	@ (800bce0 <low_level_init+0x130>)
 800bc0e:	f00c f87e 	bl	8017d0e <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800bc12:	4b33      	ldr	r3, [pc, #204]	@ (800bce0 <low_level_init+0x130>)
 800bc14:	2221      	movs	r2, #33	@ 0x21
 800bc16:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800bc18:	4b31      	ldr	r3, [pc, #196]	@ (800bce0 <low_level_init+0x130>)
 800bc1a:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800bc1e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800bc20:	4b2f      	ldr	r3, [pc, #188]	@ (800bce0 <low_level_init+0x130>)
 800bc22:	2200      	movs	r2, #0
 800bc24:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800bc26:	482f      	ldr	r0, [pc, #188]	@ (800bce4 <low_level_init+0x134>)
 800bc28:	f001 fa0a 	bl	800d040 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	2206      	movs	r2, #6
 800bc30:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800bc34:	4b26      	ldr	r3, [pc, #152]	@ (800bcd0 <low_level_init+0x120>)
 800bc36:	685b      	ldr	r3, [r3, #4]
 800bc38:	781a      	ldrb	r2, [r3, #0]
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800bc40:	4b23      	ldr	r3, [pc, #140]	@ (800bcd0 <low_level_init+0x120>)
 800bc42:	685b      	ldr	r3, [r3, #4]
 800bc44:	785a      	ldrb	r2, [r3, #1]
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800bc4c:	4b20      	ldr	r3, [pc, #128]	@ (800bcd0 <low_level_init+0x120>)
 800bc4e:	685b      	ldr	r3, [r3, #4]
 800bc50:	789a      	ldrb	r2, [r3, #2]
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800bc58:	4b1d      	ldr	r3, [pc, #116]	@ (800bcd0 <low_level_init+0x120>)
 800bc5a:	685b      	ldr	r3, [r3, #4]
 800bc5c:	78da      	ldrb	r2, [r3, #3]
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800bc64:	4b1a      	ldr	r3, [pc, #104]	@ (800bcd0 <low_level_init+0x120>)
 800bc66:	685b      	ldr	r3, [r3, #4]
 800bc68:	791a      	ldrb	r2, [r3, #4]
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800bc70:	4b17      	ldr	r3, [pc, #92]	@ (800bcd0 <low_level_init+0x120>)
 800bc72:	685b      	ldr	r3, [r3, #4]
 800bc74:	795a      	ldrb	r2, [r3, #5]
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800bc82:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800bc8a:	f043 030a 	orr.w	r3, r3, #10
 800bc8e:	b2da      	uxtb	r2, r3
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800bc96:	4914      	ldr	r1, [pc, #80]	@ (800bce8 <low_level_init+0x138>)
 800bc98:	4814      	ldr	r0, [pc, #80]	@ (800bcec <low_level_init+0x13c>)
 800bc9a:	f7fa fff4 	bl	8006c86 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 800bc9e:	4813      	ldr	r0, [pc, #76]	@ (800bcec <low_level_init+0x13c>)
 800bca0:	f7fb f823 	bl	8006cea <LAN8742_Init>
 800bca4:	4603      	mov	r3, r0
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d006      	beq.n	800bcb8 <low_level_init+0x108>
  {
    netif_set_link_down(netif);
 800bcaa:	6878      	ldr	r0, [r7, #4]
 800bcac:	f001 fd94 	bl	800d7d8 <netif_set_link_down>
    netif_set_down(netif);
 800bcb0:	6878      	ldr	r0, [r7, #4]
 800bcb2:	f001 fd2b 	bl	800d70c <netif_set_down>
 800bcb6:	e008      	b.n	800bcca <low_level_init+0x11a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 800bcb8:	7bfb      	ldrb	r3, [r7, #15]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d103      	bne.n	800bcc6 <low_level_init+0x116>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 800bcbe:	6878      	ldr	r0, [r7, #4]
 800bcc0:	f000 fa16 	bl	800c0f0 <ethernet_link_check_state>
 800bcc4:	e001      	b.n	800bcca <low_level_init+0x11a>
  }
  else
  {
    Error_Handler();
 800bcc6:	f7f9 fbef 	bl	80054a8 <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800bcca:	3710      	adds	r7, #16
 800bccc:	46bd      	mov	sp, r7
 800bcce:	bd80      	pop	{r7, pc}
 800bcd0:	2001197c 	.word	0x2001197c
 800bcd4:	40028000 	.word	0x40028000
 800bcd8:	200118dc 	.word	0x200118dc
 800bcdc:	2001183c 	.word	0x2001183c
 800bce0:	20011a2c 	.word	0x20011a2c
 800bce4:	08023308 	.word	0x08023308
 800bce8:	200008fc 	.word	0x200008fc
 800bcec:	20011a64 	.word	0x20011a64

0800bcf0 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800bcf0:	b580      	push	{r7, lr}
 800bcf2:	b092      	sub	sp, #72	@ 0x48
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	6078      	str	r0, [r7, #4]
 800bcf8:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 800bcfe:	2300      	movs	r3, #0
 800bd00:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 800bd02:	2300      	movs	r3, #0
 800bd04:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800bd08:	f107 030c 	add.w	r3, r7, #12
 800bd0c:	2230      	movs	r2, #48	@ 0x30
 800bd0e:	2100      	movs	r1, #0
 800bd10:	4618      	mov	r0, r3
 800bd12:	f00b fffc 	bl	8017d0e <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800bd16:	f107 030c 	add.w	r3, r7, #12
 800bd1a:	2230      	movs	r2, #48	@ 0x30
 800bd1c:	2100      	movs	r1, #0
 800bd1e:	4618      	mov	r0, r3
 800bd20:	f00b fff5 	bl	8017d0e <memset>

  for(q = p; q != NULL; q = q->next)
 800bd24:	683b      	ldr	r3, [r7, #0]
 800bd26:	643b      	str	r3, [r7, #64]	@ 0x40
 800bd28:	e045      	b.n	800bdb6 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800bd2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bd2c:	2b03      	cmp	r3, #3
 800bd2e:	d902      	bls.n	800bd36 <low_level_output+0x46>
      return ERR_IF;
 800bd30:	f06f 030b 	mvn.w	r3, #11
 800bd34:	e055      	b.n	800bde2 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 800bd36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bd38:	6859      	ldr	r1, [r3, #4]
 800bd3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bd3c:	4613      	mov	r3, r2
 800bd3e:	005b      	lsls	r3, r3, #1
 800bd40:	4413      	add	r3, r2
 800bd42:	009b      	lsls	r3, r3, #2
 800bd44:	3348      	adds	r3, #72	@ 0x48
 800bd46:	443b      	add	r3, r7
 800bd48:	3b3c      	subs	r3, #60	@ 0x3c
 800bd4a:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800bd4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bd4e:	895b      	ldrh	r3, [r3, #10]
 800bd50:	4619      	mov	r1, r3
 800bd52:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bd54:	4613      	mov	r3, r2
 800bd56:	005b      	lsls	r3, r3, #1
 800bd58:	4413      	add	r3, r2
 800bd5a:	009b      	lsls	r3, r3, #2
 800bd5c:	3348      	adds	r3, #72	@ 0x48
 800bd5e:	443b      	add	r3, r7
 800bd60:	3b38      	subs	r3, #56	@ 0x38
 800bd62:	6019      	str	r1, [r3, #0]

    if(i>0)
 800bd64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d011      	beq.n	800bd8e <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800bd6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bd6c:	1e5a      	subs	r2, r3, #1
 800bd6e:	f107 000c 	add.w	r0, r7, #12
 800bd72:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800bd74:	460b      	mov	r3, r1
 800bd76:	005b      	lsls	r3, r3, #1
 800bd78:	440b      	add	r3, r1
 800bd7a:	009b      	lsls	r3, r3, #2
 800bd7c:	18c1      	adds	r1, r0, r3
 800bd7e:	4613      	mov	r3, r2
 800bd80:	005b      	lsls	r3, r3, #1
 800bd82:	4413      	add	r3, r2
 800bd84:	009b      	lsls	r3, r3, #2
 800bd86:	3348      	adds	r3, #72	@ 0x48
 800bd88:	443b      	add	r3, r7
 800bd8a:	3b34      	subs	r3, #52	@ 0x34
 800bd8c:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800bd8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d109      	bne.n	800bdaa <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800bd96:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bd98:	4613      	mov	r3, r2
 800bd9a:	005b      	lsls	r3, r3, #1
 800bd9c:	4413      	add	r3, r2
 800bd9e:	009b      	lsls	r3, r3, #2
 800bda0:	3348      	adds	r3, #72	@ 0x48
 800bda2:	443b      	add	r3, r7
 800bda4:	3b34      	subs	r3, #52	@ 0x34
 800bda6:	2200      	movs	r2, #0
 800bda8:	601a      	str	r2, [r3, #0]
    }

    i++;
 800bdaa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bdac:	3301      	adds	r3, #1
 800bdae:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 800bdb0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	643b      	str	r3, [r7, #64]	@ 0x40
 800bdb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d1b6      	bne.n	800bd2a <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800bdbc:	683b      	ldr	r3, [r7, #0]
 800bdbe:	891b      	ldrh	r3, [r3, #8]
 800bdc0:	461a      	mov	r2, r3
 800bdc2:	4b0a      	ldr	r3, [pc, #40]	@ (800bdec <low_level_output+0xfc>)
 800bdc4:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800bdc6:	4a09      	ldr	r2, [pc, #36]	@ (800bdec <low_level_output+0xfc>)
 800bdc8:	f107 030c 	add.w	r3, r7, #12
 800bdcc:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800bdce:	4a07      	ldr	r2, [pc, #28]	@ (800bdec <low_level_output+0xfc>)
 800bdd0:	683b      	ldr	r3, [r7, #0]
 800bdd2:	6353      	str	r3, [r2, #52]	@ 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800bdd4:	2214      	movs	r2, #20
 800bdd6:	4905      	ldr	r1, [pc, #20]	@ (800bdec <low_level_output+0xfc>)
 800bdd8:	4805      	ldr	r0, [pc, #20]	@ (800bdf0 <low_level_output+0x100>)
 800bdda:	f7fb ff2f 	bl	8007c3c <HAL_ETH_Transmit>

  return errval;
 800bdde:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800bde2:	4618      	mov	r0, r3
 800bde4:	3748      	adds	r7, #72	@ 0x48
 800bde6:	46bd      	mov	sp, r7
 800bde8:	bd80      	pop	{r7, pc}
 800bdea:	bf00      	nop
 800bdec:	20011a2c 	.word	0x20011a2c
 800bdf0:	2001197c 	.word	0x2001197c

0800bdf4 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800bdf4:	b580      	push	{r7, lr}
 800bdf6:	b084      	sub	sp, #16
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800be00:	4b07      	ldr	r3, [pc, #28]	@ (800be20 <low_level_input+0x2c>)
 800be02:	781b      	ldrb	r3, [r3, #0]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d105      	bne.n	800be14 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800be08:	f107 030c 	add.w	r3, r7, #12
 800be0c:	4619      	mov	r1, r3
 800be0e:	4805      	ldr	r0, [pc, #20]	@ (800be24 <low_level_input+0x30>)
 800be10:	f7fb ffa8 	bl	8007d64 <HAL_ETH_ReadData>
  }

  return p;
 800be14:	68fb      	ldr	r3, [r7, #12]
}
 800be16:	4618      	mov	r0, r3
 800be18:	3710      	adds	r7, #16
 800be1a:	46bd      	mov	sp, r7
 800be1c:	bd80      	pop	{r7, pc}
 800be1e:	bf00      	nop
 800be20:	20011838 	.word	0x20011838
 800be24:	2001197c 	.word	0x2001197c

0800be28 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	b084      	sub	sp, #16
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800be30:	2300      	movs	r3, #0
 800be32:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 800be34:	6878      	ldr	r0, [r7, #4]
 800be36:	f7ff ffdd 	bl	800bdf4 <low_level_input>
 800be3a:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d00a      	beq.n	800be58 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	691b      	ldr	r3, [r3, #16]
 800be46:	6879      	ldr	r1, [r7, #4]
 800be48:	68f8      	ldr	r0, [r7, #12]
 800be4a:	4798      	blx	r3
 800be4c:	4603      	mov	r3, r0
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d002      	beq.n	800be58 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 800be52:	68f8      	ldr	r0, [r7, #12]
 800be54:	f002 f870 	bl	800df38 <pbuf_free>
      }
    }
  } while(p!=NULL);
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d1ea      	bne.n	800be34 <ethernetif_input+0xc>
}
 800be5e:	bf00      	nop
 800be60:	bf00      	nop
 800be62:	3710      	adds	r7, #16
 800be64:	46bd      	mov	sp, r7
 800be66:	bd80      	pop	{r7, pc}

0800be68 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800be68:	b580      	push	{r7, lr}
 800be6a:	b082      	sub	sp, #8
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	2b00      	cmp	r3, #0
 800be74:	d106      	bne.n	800be84 <ethernetif_init+0x1c>
 800be76:	4b0e      	ldr	r3, [pc, #56]	@ (800beb0 <ethernetif_init+0x48>)
 800be78:	f240 126f 	movw	r2, #367	@ 0x16f
 800be7c:	490d      	ldr	r1, [pc, #52]	@ (800beb4 <ethernetif_init+0x4c>)
 800be7e:	480e      	ldr	r0, [pc, #56]	@ (800beb8 <ethernetif_init+0x50>)
 800be80:	f00b fea4 	bl	8017bcc <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	2273      	movs	r2, #115	@ 0x73
 800be88:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	2274      	movs	r2, #116	@ 0x74
 800be90:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	4a09      	ldr	r2, [pc, #36]	@ (800bebc <ethernetif_init+0x54>)
 800be98:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	4a08      	ldr	r2, [pc, #32]	@ (800bec0 <ethernetif_init+0x58>)
 800be9e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800bea0:	6878      	ldr	r0, [r7, #4]
 800bea2:	f7ff fe85 	bl	800bbb0 <low_level_init>

  return ERR_OK;
 800bea6:	2300      	movs	r3, #0
}
 800bea8:	4618      	mov	r0, r3
 800beaa:	3708      	adds	r7, #8
 800beac:	46bd      	mov	sp, r7
 800beae:	bd80      	pop	{r7, pc}
 800beb0:	08020864 	.word	0x08020864
 800beb4:	08020880 	.word	0x08020880
 800beb8:	08020890 	.word	0x08020890
 800bebc:	08014f9d 	.word	0x08014f9d
 800bec0:	0800bcf1 	.word	0x0800bcf1

0800bec4 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800bec4:	b580      	push	{r7, lr}
 800bec6:	b084      	sub	sp, #16
 800bec8:	af00      	add	r7, sp, #0
 800beca:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800bed0:	68f9      	ldr	r1, [r7, #12]
 800bed2:	4807      	ldr	r0, [pc, #28]	@ (800bef0 <pbuf_free_custom+0x2c>)
 800bed4:	f001 f996 	bl	800d204 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800bed8:	4b06      	ldr	r3, [pc, #24]	@ (800bef4 <pbuf_free_custom+0x30>)
 800beda:	781b      	ldrb	r3, [r3, #0]
 800bedc:	2b01      	cmp	r3, #1
 800bede:	d102      	bne.n	800bee6 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800bee0:	4b04      	ldr	r3, [pc, #16]	@ (800bef4 <pbuf_free_custom+0x30>)
 800bee2:	2200      	movs	r2, #0
 800bee4:	701a      	strb	r2, [r3, #0]
  }
}
 800bee6:	bf00      	nop
 800bee8:	3710      	adds	r7, #16
 800beea:	46bd      	mov	sp, r7
 800beec:	bd80      	pop	{r7, pc}
 800beee:	bf00      	nop
 800bef0:	08023308 	.word	0x08023308
 800bef4:	20011838 	.word	0x20011838

0800bef8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800bef8:	b580      	push	{r7, lr}
 800befa:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800befc:	f7fb f830 	bl	8006f60 <HAL_GetTick>
 800bf00:	4603      	mov	r3, r0
}
 800bf02:	4618      	mov	r0, r3
 800bf04:	bd80      	pop	{r7, pc}
	...

0800bf08 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b08e      	sub	sp, #56	@ 0x38
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bf10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bf14:	2200      	movs	r2, #0
 800bf16:	601a      	str	r2, [r3, #0]
 800bf18:	605a      	str	r2, [r3, #4]
 800bf1a:	609a      	str	r2, [r3, #8]
 800bf1c:	60da      	str	r2, [r3, #12]
 800bf1e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	4a46      	ldr	r2, [pc, #280]	@ (800c040 <HAL_ETH_MspInit+0x138>)
 800bf26:	4293      	cmp	r3, r2
 800bf28:	f040 8085 	bne.w	800c036 <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800bf2c:	2300      	movs	r3, #0
 800bf2e:	623b      	str	r3, [r7, #32]
 800bf30:	4b44      	ldr	r3, [pc, #272]	@ (800c044 <HAL_ETH_MspInit+0x13c>)
 800bf32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf34:	4a43      	ldr	r2, [pc, #268]	@ (800c044 <HAL_ETH_MspInit+0x13c>)
 800bf36:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800bf3a:	6313      	str	r3, [r2, #48]	@ 0x30
 800bf3c:	4b41      	ldr	r3, [pc, #260]	@ (800c044 <HAL_ETH_MspInit+0x13c>)
 800bf3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bf44:	623b      	str	r3, [r7, #32]
 800bf46:	6a3b      	ldr	r3, [r7, #32]
 800bf48:	2300      	movs	r3, #0
 800bf4a:	61fb      	str	r3, [r7, #28]
 800bf4c:	4b3d      	ldr	r3, [pc, #244]	@ (800c044 <HAL_ETH_MspInit+0x13c>)
 800bf4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf50:	4a3c      	ldr	r2, [pc, #240]	@ (800c044 <HAL_ETH_MspInit+0x13c>)
 800bf52:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800bf56:	6313      	str	r3, [r2, #48]	@ 0x30
 800bf58:	4b3a      	ldr	r3, [pc, #232]	@ (800c044 <HAL_ETH_MspInit+0x13c>)
 800bf5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf5c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800bf60:	61fb      	str	r3, [r7, #28]
 800bf62:	69fb      	ldr	r3, [r7, #28]
 800bf64:	2300      	movs	r3, #0
 800bf66:	61bb      	str	r3, [r7, #24]
 800bf68:	4b36      	ldr	r3, [pc, #216]	@ (800c044 <HAL_ETH_MspInit+0x13c>)
 800bf6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf6c:	4a35      	ldr	r2, [pc, #212]	@ (800c044 <HAL_ETH_MspInit+0x13c>)
 800bf6e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800bf72:	6313      	str	r3, [r2, #48]	@ 0x30
 800bf74:	4b33      	ldr	r3, [pc, #204]	@ (800c044 <HAL_ETH_MspInit+0x13c>)
 800bf76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf78:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bf7c:	61bb      	str	r3, [r7, #24]
 800bf7e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800bf80:	2300      	movs	r3, #0
 800bf82:	617b      	str	r3, [r7, #20]
 800bf84:	4b2f      	ldr	r3, [pc, #188]	@ (800c044 <HAL_ETH_MspInit+0x13c>)
 800bf86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf88:	4a2e      	ldr	r2, [pc, #184]	@ (800c044 <HAL_ETH_MspInit+0x13c>)
 800bf8a:	f043 0304 	orr.w	r3, r3, #4
 800bf8e:	6313      	str	r3, [r2, #48]	@ 0x30
 800bf90:	4b2c      	ldr	r3, [pc, #176]	@ (800c044 <HAL_ETH_MspInit+0x13c>)
 800bf92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf94:	f003 0304 	and.w	r3, r3, #4
 800bf98:	617b      	str	r3, [r7, #20]
 800bf9a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	613b      	str	r3, [r7, #16]
 800bfa0:	4b28      	ldr	r3, [pc, #160]	@ (800c044 <HAL_ETH_MspInit+0x13c>)
 800bfa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bfa4:	4a27      	ldr	r2, [pc, #156]	@ (800c044 <HAL_ETH_MspInit+0x13c>)
 800bfa6:	f043 0301 	orr.w	r3, r3, #1
 800bfaa:	6313      	str	r3, [r2, #48]	@ 0x30
 800bfac:	4b25      	ldr	r3, [pc, #148]	@ (800c044 <HAL_ETH_MspInit+0x13c>)
 800bfae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bfb0:	f003 0301 	and.w	r3, r3, #1
 800bfb4:	613b      	str	r3, [r7, #16]
 800bfb6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800bfb8:	2300      	movs	r3, #0
 800bfba:	60fb      	str	r3, [r7, #12]
 800bfbc:	4b21      	ldr	r3, [pc, #132]	@ (800c044 <HAL_ETH_MspInit+0x13c>)
 800bfbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bfc0:	4a20      	ldr	r2, [pc, #128]	@ (800c044 <HAL_ETH_MspInit+0x13c>)
 800bfc2:	f043 0302 	orr.w	r3, r3, #2
 800bfc6:	6313      	str	r3, [r2, #48]	@ 0x30
 800bfc8:	4b1e      	ldr	r3, [pc, #120]	@ (800c044 <HAL_ETH_MspInit+0x13c>)
 800bfca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bfcc:	f003 0302 	and.w	r3, r3, #2
 800bfd0:	60fb      	str	r3, [r7, #12]
 800bfd2:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800bfd4:	2332      	movs	r3, #50	@ 0x32
 800bfd6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bfd8:	2302      	movs	r3, #2
 800bfda:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bfdc:	2300      	movs	r3, #0
 800bfde:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bfe0:	2303      	movs	r3, #3
 800bfe2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800bfe4:	230b      	movs	r3, #11
 800bfe6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800bfe8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bfec:	4619      	mov	r1, r3
 800bfee:	4816      	ldr	r0, [pc, #88]	@ (800c048 <HAL_ETH_MspInit+0x140>)
 800bff0:	f7fc fe04 	bl	8008bfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800bff4:	2386      	movs	r3, #134	@ 0x86
 800bff6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bff8:	2302      	movs	r3, #2
 800bffa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bffc:	2300      	movs	r3, #0
 800bffe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c000:	2303      	movs	r3, #3
 800c002:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c004:	230b      	movs	r3, #11
 800c006:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c008:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c00c:	4619      	mov	r1, r3
 800c00e:	480f      	ldr	r0, [pc, #60]	@ (800c04c <HAL_ETH_MspInit+0x144>)
 800c010:	f7fc fdf4 	bl	8008bfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 800c014:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 800c018:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c01a:	2302      	movs	r3, #2
 800c01c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c01e:	2300      	movs	r3, #0
 800c020:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c022:	2303      	movs	r3, #3
 800c024:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c026:	230b      	movs	r3, #11
 800c028:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c02a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c02e:	4619      	mov	r1, r3
 800c030:	4807      	ldr	r0, [pc, #28]	@ (800c050 <HAL_ETH_MspInit+0x148>)
 800c032:	f7fc fde3 	bl	8008bfc <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800c036:	bf00      	nop
 800c038:	3738      	adds	r7, #56	@ 0x38
 800c03a:	46bd      	mov	sp, r7
 800c03c:	bd80      	pop	{r7, pc}
 800c03e:	bf00      	nop
 800c040:	40028000 	.word	0x40028000
 800c044:	40023800 	.word	0x40023800
 800c048:	40020800 	.word	0x40020800
 800c04c:	40020000 	.word	0x40020000
 800c050:	40020400 	.word	0x40020400

0800c054 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800c054:	b580      	push	{r7, lr}
 800c056:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800c058:	4802      	ldr	r0, [pc, #8]	@ (800c064 <ETH_PHY_IO_Init+0x10>)
 800c05a:	f7fc f96b 	bl	8008334 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800c05e:	2300      	movs	r3, #0
}
 800c060:	4618      	mov	r0, r3
 800c062:	bd80      	pop	{r7, pc}
 800c064:	2001197c 	.word	0x2001197c

0800c068 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800c068:	b480      	push	{r7}
 800c06a:	af00      	add	r7, sp, #0
  return 0;
 800c06c:	2300      	movs	r3, #0
}
 800c06e:	4618      	mov	r0, r3
 800c070:	46bd      	mov	sp, r7
 800c072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c076:	4770      	bx	lr

0800c078 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800c078:	b580      	push	{r7, lr}
 800c07a:	b084      	sub	sp, #16
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	60f8      	str	r0, [r7, #12]
 800c080:	60b9      	str	r1, [r7, #8]
 800c082:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	68ba      	ldr	r2, [r7, #8]
 800c088:	68f9      	ldr	r1, [r7, #12]
 800c08a:	4807      	ldr	r0, [pc, #28]	@ (800c0a8 <ETH_PHY_IO_ReadReg+0x30>)
 800c08c:	f7fb ffad 	bl	8007fea <HAL_ETH_ReadPHYRegister>
 800c090:	4603      	mov	r3, r0
 800c092:	2b00      	cmp	r3, #0
 800c094:	d002      	beq.n	800c09c <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800c096:	f04f 33ff 	mov.w	r3, #4294967295
 800c09a:	e000      	b.n	800c09e <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800c09c:	2300      	movs	r3, #0
}
 800c09e:	4618      	mov	r0, r3
 800c0a0:	3710      	adds	r7, #16
 800c0a2:	46bd      	mov	sp, r7
 800c0a4:	bd80      	pop	{r7, pc}
 800c0a6:	bf00      	nop
 800c0a8:	2001197c 	.word	0x2001197c

0800c0ac <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	b084      	sub	sp, #16
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	60f8      	str	r0, [r7, #12]
 800c0b4:	60b9      	str	r1, [r7, #8]
 800c0b6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	68ba      	ldr	r2, [r7, #8]
 800c0bc:	68f9      	ldr	r1, [r7, #12]
 800c0be:	4807      	ldr	r0, [pc, #28]	@ (800c0dc <ETH_PHY_IO_WriteReg+0x30>)
 800c0c0:	f7fb ffde 	bl	8008080 <HAL_ETH_WritePHYRegister>
 800c0c4:	4603      	mov	r3, r0
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d002      	beq.n	800c0d0 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800c0ca:	f04f 33ff 	mov.w	r3, #4294967295
 800c0ce:	e000      	b.n	800c0d2 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800c0d0:	2300      	movs	r3, #0
}
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	3710      	adds	r7, #16
 800c0d6:	46bd      	mov	sp, r7
 800c0d8:	bd80      	pop	{r7, pc}
 800c0da:	bf00      	nop
 800c0dc:	2001197c 	.word	0x2001197c

0800c0e0 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800c0e0:	b580      	push	{r7, lr}
 800c0e2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800c0e4:	f7fa ff3c 	bl	8006f60 <HAL_GetTick>
 800c0e8:	4603      	mov	r3, r0
}
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	bd80      	pop	{r7, pc}
	...

0800c0f0 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	b0a0      	sub	sp, #128	@ 0x80
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800c0f8:	f107 030c 	add.w	r3, r7, #12
 800c0fc:	2264      	movs	r2, #100	@ 0x64
 800c0fe:	2100      	movs	r1, #0
 800c100:	4618      	mov	r0, r3
 800c102:	f00b fe04 	bl	8017d0e <memset>
  int32_t PHYLinkState = 0;
 800c106:	2300      	movs	r3, #0
 800c108:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800c10a:	2300      	movs	r3, #0
 800c10c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c10e:	2300      	movs	r3, #0
 800c110:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c112:	2300      	movs	r3, #0
 800c114:	677b      	str	r3, [r7, #116]	@ 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800c116:	483a      	ldr	r0, [pc, #232]	@ (800c200 <ethernet_link_check_state+0x110>)
 800c118:	f7fa fe34 	bl	8006d84 <LAN8742_GetLinkState>
 800c11c:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c124:	089b      	lsrs	r3, r3, #2
 800c126:	f003 0301 	and.w	r3, r3, #1
 800c12a:	b2db      	uxtb	r3, r3
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d00c      	beq.n	800c14a <ethernet_link_check_state+0x5a>
 800c130:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c132:	2b01      	cmp	r3, #1
 800c134:	dc09      	bgt.n	800c14a <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 800c136:	4833      	ldr	r0, [pc, #204]	@ (800c204 <ethernet_link_check_state+0x114>)
 800c138:	f7fb fd27 	bl	8007b8a <HAL_ETH_Stop>
    netif_set_down(netif);
 800c13c:	6878      	ldr	r0, [r7, #4]
 800c13e:	f001 fae5 	bl	800d70c <netif_set_down>
    netif_set_link_down(netif);
 800c142:	6878      	ldr	r0, [r7, #4]
 800c144:	f001 fb48 	bl	800d7d8 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 800c148:	e055      	b.n	800c1f6 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c150:	f003 0304 	and.w	r3, r3, #4
 800c154:	2b00      	cmp	r3, #0
 800c156:	d14e      	bne.n	800c1f6 <ethernet_link_check_state+0x106>
 800c158:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c15a:	2b01      	cmp	r3, #1
 800c15c:	dd4b      	ble.n	800c1f6 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 800c15e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c160:	3b02      	subs	r3, #2
 800c162:	2b03      	cmp	r3, #3
 800c164:	d82a      	bhi.n	800c1bc <ethernet_link_check_state+0xcc>
 800c166:	a201      	add	r2, pc, #4	@ (adr r2, 800c16c <ethernet_link_check_state+0x7c>)
 800c168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c16c:	0800c17d 	.word	0x0800c17d
 800c170:	0800c18f 	.word	0x0800c18f
 800c174:	0800c19f 	.word	0x0800c19f
 800c178:	0800c1af 	.word	0x0800c1af
      duplex = ETH_FULLDUPLEX_MODE;
 800c17c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c180:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800c182:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c186:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800c188:	2301      	movs	r3, #1
 800c18a:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800c18c:	e017      	b.n	800c1be <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800c18e:	2300      	movs	r3, #0
 800c190:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800c192:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c196:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800c198:	2301      	movs	r3, #1
 800c19a:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800c19c:	e00f      	b.n	800c1be <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 800c19e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c1a2:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800c1a8:	2301      	movs	r3, #1
 800c1aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800c1ac:	e007      	b.n	800c1be <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800c1b6:	2301      	movs	r3, #1
 800c1b8:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800c1ba:	e000      	b.n	800c1be <ethernet_link_check_state+0xce>
      break;
 800c1bc:	bf00      	nop
    if(linkchanged)
 800c1be:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d018      	beq.n	800c1f6 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800c1c4:	f107 030c 	add.w	r3, r7, #12
 800c1c8:	4619      	mov	r1, r3
 800c1ca:	480e      	ldr	r0, [pc, #56]	@ (800c204 <ethernet_link_check_state+0x114>)
 800c1cc:	f7fb ffa1 	bl	8008112 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800c1d0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c1d2:	627b      	str	r3, [r7, #36]	@ 0x24
      MACConf.Speed = speed;
 800c1d4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c1d6:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800c1d8:	f107 030c 	add.w	r3, r7, #12
 800c1dc:	4619      	mov	r1, r3
 800c1de:	4809      	ldr	r0, [pc, #36]	@ (800c204 <ethernet_link_check_state+0x114>)
 800c1e0:	f7fc f88e 	bl	8008300 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 800c1e4:	4807      	ldr	r0, [pc, #28]	@ (800c204 <ethernet_link_check_state+0x114>)
 800c1e6:	f7fb fc71 	bl	8007acc <HAL_ETH_Start>
      netif_set_up(netif);
 800c1ea:	6878      	ldr	r0, [r7, #4]
 800c1ec:	f001 fa22 	bl	800d634 <netif_set_up>
      netif_set_link_up(netif);
 800c1f0:	6878      	ldr	r0, [r7, #4]
 800c1f2:	f001 fabd 	bl	800d770 <netif_set_link_up>
}
 800c1f6:	bf00      	nop
 800c1f8:	3780      	adds	r7, #128	@ 0x80
 800c1fa:	46bd      	mov	sp, r7
 800c1fc:	bd80      	pop	{r7, pc}
 800c1fe:	bf00      	nop
 800c200:	20011a64 	.word	0x20011a64
 800c204:	2001197c 	.word	0x2001197c

0800c208 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800c208:	b580      	push	{r7, lr}
 800c20a:	b086      	sub	sp, #24
 800c20c:	af02      	add	r7, sp, #8
 800c20e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800c210:	4812      	ldr	r0, [pc, #72]	@ (800c25c <HAL_ETH_RxAllocateCallback+0x54>)
 800c212:	f000 ff89 	bl	800d128 <memp_malloc_pool>
 800c216:	60f8      	str	r0, [r7, #12]
  if (p)
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d014      	beq.n	800c248 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	f103 0220 	add.w	r2, r3, #32
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	4a0d      	ldr	r2, [pc, #52]	@ (800c260 <HAL_ETH_RxAllocateCallback+0x58>)
 800c22c:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800c236:	9201      	str	r2, [sp, #4]
 800c238:	9300      	str	r3, [sp, #0]
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	2241      	movs	r2, #65	@ 0x41
 800c23e:	2100      	movs	r1, #0
 800c240:	2000      	movs	r0, #0
 800c242:	f001 fcbf 	bl	800dbc4 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800c246:	e005      	b.n	800c254 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800c248:	4b06      	ldr	r3, [pc, #24]	@ (800c264 <HAL_ETH_RxAllocateCallback+0x5c>)
 800c24a:	2201      	movs	r2, #1
 800c24c:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	2200      	movs	r2, #0
 800c252:	601a      	str	r2, [r3, #0]
}
 800c254:	bf00      	nop
 800c256:	3710      	adds	r7, #16
 800c258:	46bd      	mov	sp, r7
 800c25a:	bd80      	pop	{r7, pc}
 800c25c:	08023308 	.word	0x08023308
 800c260:	0800bec5 	.word	0x0800bec5
 800c264:	20011838 	.word	0x20011838

0800c268 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800c268:	b480      	push	{r7}
 800c26a:	b089      	sub	sp, #36	@ 0x24
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	60f8      	str	r0, [r7, #12]
 800c270:	60b9      	str	r1, [r7, #8]
 800c272:	607a      	str	r2, [r7, #4]
 800c274:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800c27a:	68bb      	ldr	r3, [r7, #8]
 800c27c:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800c27e:	2300      	movs	r3, #0
 800c280:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	3b20      	subs	r3, #32
 800c286:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800c288:	69fb      	ldr	r3, [r7, #28]
 800c28a:	2200      	movs	r2, #0
 800c28c:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800c28e:	69fb      	ldr	r3, [r7, #28]
 800c290:	2200      	movs	r2, #0
 800c292:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800c294:	69fb      	ldr	r3, [r7, #28]
 800c296:	887a      	ldrh	r2, [r7, #2]
 800c298:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800c29a:	69bb      	ldr	r3, [r7, #24]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d103      	bne.n	800c2aa <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800c2a2:	69bb      	ldr	r3, [r7, #24]
 800c2a4:	69fa      	ldr	r2, [r7, #28]
 800c2a6:	601a      	str	r2, [r3, #0]
 800c2a8:	e003      	b.n	800c2b2 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800c2aa:	697b      	ldr	r3, [r7, #20]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	69fa      	ldr	r2, [r7, #28]
 800c2b0:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800c2b2:	697b      	ldr	r3, [r7, #20]
 800c2b4:	69fa      	ldr	r2, [r7, #28]
 800c2b6:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800c2b8:	69bb      	ldr	r3, [r7, #24]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	61fb      	str	r3, [r7, #28]
 800c2be:	e009      	b.n	800c2d4 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800c2c0:	69fb      	ldr	r3, [r7, #28]
 800c2c2:	891a      	ldrh	r2, [r3, #8]
 800c2c4:	887b      	ldrh	r3, [r7, #2]
 800c2c6:	4413      	add	r3, r2
 800c2c8:	b29a      	uxth	r2, r3
 800c2ca:	69fb      	ldr	r3, [r7, #28]
 800c2cc:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800c2ce:	69fb      	ldr	r3, [r7, #28]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	61fb      	str	r3, [r7, #28]
 800c2d4:	69fb      	ldr	r3, [r7, #28]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d1f2      	bne.n	800c2c0 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 800c2da:	bf00      	nop
 800c2dc:	bf00      	nop
 800c2de:	3724      	adds	r7, #36	@ 0x24
 800c2e0:	46bd      	mov	sp, r7
 800c2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e6:	4770      	bx	lr

0800c2e8 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800c2e8:	b480      	push	{r7}
 800c2ea:	b083      	sub	sp, #12
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	4603      	mov	r3, r0
 800c2f0:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800c2f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c2f6:	021b      	lsls	r3, r3, #8
 800c2f8:	b21a      	sxth	r2, r3
 800c2fa:	88fb      	ldrh	r3, [r7, #6]
 800c2fc:	0a1b      	lsrs	r3, r3, #8
 800c2fe:	b29b      	uxth	r3, r3
 800c300:	b21b      	sxth	r3, r3
 800c302:	4313      	orrs	r3, r2
 800c304:	b21b      	sxth	r3, r3
 800c306:	b29b      	uxth	r3, r3
}
 800c308:	4618      	mov	r0, r3
 800c30a:	370c      	adds	r7, #12
 800c30c:	46bd      	mov	sp, r7
 800c30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c312:	4770      	bx	lr

0800c314 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800c314:	b480      	push	{r7}
 800c316:	b083      	sub	sp, #12
 800c318:	af00      	add	r7, sp, #0
 800c31a:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	061a      	lsls	r2, r3, #24
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	021b      	lsls	r3, r3, #8
 800c324:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800c328:	431a      	orrs	r2, r3
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	0a1b      	lsrs	r3, r3, #8
 800c32e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800c332:	431a      	orrs	r2, r3
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	0e1b      	lsrs	r3, r3, #24
 800c338:	4313      	orrs	r3, r2
}
 800c33a:	4618      	mov	r0, r3
 800c33c:	370c      	adds	r7, #12
 800c33e:	46bd      	mov	sp, r7
 800c340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c344:	4770      	bx	lr

0800c346 <dns_init>:
 * Initialize the resolver: set up the UDP pcb and configure the default server
 * (if DNS_SERVER_ADDRESS is set).
 */
void
dns_init(void)
{
 800c346:	b480      	push	{r7}
 800c348:	af00      	add	r7, sp, #0
#endif

#if DNS_LOCAL_HOSTLIST
  dns_init_local();
#endif
}
 800c34a:	bf00      	nop
 800c34c:	46bd      	mov	sp, r7
 800c34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c352:	4770      	bx	lr

0800c354 <dns_tmr>:
 * The DNS resolver client timer - handle retries and timeouts and should
 * be called every DNS_TMR_INTERVAL milliseconds (every second by default).
 */
void
dns_tmr(void)
{
 800c354:	b580      	push	{r7, lr}
 800c356:	af00      	add	r7, sp, #0
  LWIP_DEBUGF(DNS_DEBUG, ("dns_tmr: dns_check_entries\n"));
  dns_check_entries();
 800c358:	f000 faa8 	bl	800c8ac <dns_check_entries>
}
 800c35c:	bf00      	nop
 800c35e:	bd80      	pop	{r7, pc}

0800c360 <dns_send>:
 * @param idx the DNS table entry index for which to send a request
 * @return ERR_OK if packet is sent; an err_t indicating the problem otherwise
 */
static err_t
dns_send(u8_t idx)
{
 800c360:	b580      	push	{r7, lr}
 800c362:	b090      	sub	sp, #64	@ 0x40
 800c364:	af00      	add	r7, sp, #0
 800c366:	4603      	mov	r3, r0
 800c368:	71fb      	strb	r3, [r7, #7]
  struct pbuf *p;
  u16_t query_idx, copy_len;
  const char *hostname, *hostname_part;
  u8_t n;
  u8_t pcb_idx;
  struct dns_table_entry *entry = &dns_table[idx];
 800c36a:	79fa      	ldrb	r2, [r7, #7]
 800c36c:	4613      	mov	r3, r2
 800c36e:	011b      	lsls	r3, r3, #4
 800c370:	4413      	add	r3, r2
 800c372:	011b      	lsls	r3, r3, #4
 800c374:	4a6c      	ldr	r2, [pc, #432]	@ (800c528 <dns_send+0x1c8>)
 800c376:	4413      	add	r3, r2
 800c378:	633b      	str	r3, [r7, #48]	@ 0x30

  LWIP_DEBUGF(DNS_DEBUG, ("dns_send: dns_servers[%"U16_F"] \"%s\": request\n",
                          (u16_t)(entry->server_idx), entry->name));
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 800c37a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c37c:	7adb      	ldrb	r3, [r3, #11]
 800c37e:	2b01      	cmp	r3, #1
 800c380:	d906      	bls.n	800c390 <dns_send+0x30>
 800c382:	4b6a      	ldr	r3, [pc, #424]	@ (800c52c <dns_send+0x1cc>)
 800c384:	f240 22fa 	movw	r2, #762	@ 0x2fa
 800c388:	4969      	ldr	r1, [pc, #420]	@ (800c530 <dns_send+0x1d0>)
 800c38a:	486a      	ldr	r0, [pc, #424]	@ (800c534 <dns_send+0x1d4>)
 800c38c:	f00b fc1e 	bl	8017bcc <iprintf>
  if (ip_addr_isany_val(dns_servers[entry->server_idx])
 800c390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c392:	7adb      	ldrb	r3, [r3, #11]
 800c394:	461a      	mov	r2, r3
 800c396:	4b68      	ldr	r3, [pc, #416]	@ (800c538 <dns_send+0x1d8>)
 800c398:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d109      	bne.n	800c3b4 <dns_send+0x54>
      && !entry->is_mdns
#endif
     ) {
    /* DNS server not valid anymore, e.g. PPP netif has been shut down */
    /* call specified callback function if provided */
    dns_call_found(idx, NULL);
 800c3a0:	79fb      	ldrb	r3, [r7, #7]
 800c3a2:	2100      	movs	r1, #0
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	f000 f8cb 	bl	800c540 <dns_call_found>
    /* flush this entry */
    entry->state = DNS_STATE_UNUSED;
 800c3aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3ac:	2200      	movs	r2, #0
 800c3ae:	729a      	strb	r2, [r3, #10]
    return ERR_OK;
 800c3b0:	2300      	movs	r3, #0
 800c3b2:	e0b4      	b.n	800c51e <dns_send+0x1be>
  }

  /* if here, we have either a new query or a retry on a previous query to process */
  p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(SIZEOF_DNS_HDR + strlen(entry->name) + 2 +
 800c3b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3b6:	3310      	adds	r3, #16
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	f7f3 ff13 	bl	80001e4 <strlen>
 800c3be:	4603      	mov	r3, r0
 800c3c0:	b29b      	uxth	r3, r3
 800c3c2:	3312      	adds	r3, #18
 800c3c4:	b29b      	uxth	r3, r3
 800c3c6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800c3ca:	4619      	mov	r1, r3
 800c3cc:	2036      	movs	r0, #54	@ 0x36
 800c3ce:	f001 facf 	bl	800d970 <pbuf_alloc>
 800c3d2:	62f8      	str	r0, [r7, #44]	@ 0x2c
                                         SIZEOF_DNS_QUERY), PBUF_RAM);
  if (p != NULL) {
 800c3d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	f000 8095 	beq.w	800c506 <dns_send+0x1a6>
    const ip_addr_t *dst;
    u16_t dst_port;
    /* fill dns header */
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 800c3dc:	f107 0310 	add.w	r3, r7, #16
 800c3e0:	220c      	movs	r2, #12
 800c3e2:	2100      	movs	r1, #0
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	f00b fc92 	bl	8017d0e <memset>
    hdr.id = lwip_htons(entry->txid);
 800c3ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3ec:	891b      	ldrh	r3, [r3, #8]
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	f7ff ff7a 	bl	800c2e8 <lwip_htons>
 800c3f4:	4603      	mov	r3, r0
 800c3f6:	823b      	strh	r3, [r7, #16]
    hdr.flags1 = DNS_FLAG1_RD;
 800c3f8:	2301      	movs	r3, #1
 800c3fa:	74bb      	strb	r3, [r7, #18]
    hdr.numquestions = PP_HTONS(1);
 800c3fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c400:	82bb      	strh	r3, [r7, #20]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 800c402:	f107 0310 	add.w	r3, r7, #16
 800c406:	220c      	movs	r2, #12
 800c408:	4619      	mov	r1, r3
 800c40a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c40c:	f002 f83c 	bl	800e488 <pbuf_take>
    hostname = entry->name;
 800c410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c412:	3310      	adds	r3, #16
 800c414:	63bb      	str	r3, [r7, #56]	@ 0x38
    --hostname;
 800c416:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c418:	3b01      	subs	r3, #1
 800c41a:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* convert hostname into suitable query format. */
    query_idx = SIZEOF_DNS_HDR;
 800c41c:	230c      	movs	r3, #12
 800c41e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    do {
      ++hostname;
 800c420:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c422:	3301      	adds	r3, #1
 800c424:	63bb      	str	r3, [r7, #56]	@ 0x38
      hostname_part = hostname;
 800c426:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c428:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 800c42a:	2300      	movs	r3, #0
 800c42c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c430:	e007      	b.n	800c442 <dns_send+0xe2>
        ++n;
 800c432:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c436:	3301      	adds	r3, #1
 800c438:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 800c43c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c43e:	3301      	adds	r3, #1
 800c440:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c442:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c444:	781b      	ldrb	r3, [r3, #0]
 800c446:	2b2e      	cmp	r3, #46	@ 0x2e
 800c448:	d003      	beq.n	800c452 <dns_send+0xf2>
 800c44a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c44c:	781b      	ldrb	r3, [r3, #0]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d1ef      	bne.n	800c432 <dns_send+0xd2>
      }
      copy_len = (u16_t)(hostname - hostname_part);
 800c452:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c456:	1ad3      	subs	r3, r2, r3
 800c458:	84fb      	strh	r3, [r7, #38]	@ 0x26
      if (query_idx + n + 1 > 0xFFFF) {
 800c45a:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 800c45c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c460:	4413      	add	r3, r2
 800c462:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800c466:	4293      	cmp	r3, r2
 800c468:	dc53      	bgt.n	800c512 <dns_send+0x1b2>
        /* u16_t overflow */
        goto overflow_return;
      }
      pbuf_put_at(p, query_idx, n);
 800c46a:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800c46e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800c470:	4619      	mov	r1, r3
 800c472:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c474:	f002 f936 	bl	800e6e4 <pbuf_put_at>
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 800c478:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800c47a:	3301      	adds	r3, #1
 800c47c:	b29b      	uxth	r3, r3
 800c47e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800c480:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c482:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c484:	f002 f892 	bl	800e5ac <pbuf_take_at>
      query_idx = (u16_t)(query_idx + n + 1);
 800c488:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c48c:	b29a      	uxth	r2, r3
 800c48e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800c490:	4413      	add	r3, r2
 800c492:	b29b      	uxth	r3, r3
 800c494:	3301      	adds	r3, #1
 800c496:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    } while (*hostname != 0);
 800c498:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c49a:	781b      	ldrb	r3, [r3, #0]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d1bf      	bne.n	800c420 <dns_send+0xc0>
    pbuf_put_at(p, query_idx, 0);
 800c4a0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800c4a2:	2200      	movs	r2, #0
 800c4a4:	4619      	mov	r1, r3
 800c4a6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c4a8:	f002 f91c 	bl	800e6e4 <pbuf_put_at>
    query_idx++;
 800c4ac:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800c4ae:	3301      	adds	r3, #1
 800c4b0:	87bb      	strh	r3, [r7, #60]	@ 0x3c

    /* fill dns query */
    if (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype)) {
      qry.type = PP_HTONS(DNS_RRTYPE_AAAA);
    } else {
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 800c4b2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c4b6:	81bb      	strh	r3, [r7, #12]
    }
    qry.cls = PP_HTONS(DNS_RRCLASS_IN);
 800c4b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c4bc:	81fb      	strh	r3, [r7, #14]
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 800c4be:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800c4c0:	f107 010c 	add.w	r1, r7, #12
 800c4c4:	2204      	movs	r2, #4
 800c4c6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c4c8:	f002 f870 	bl	800e5ac <pbuf_take_at>

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
    pcb_idx = entry->pcb_idx;
 800c4cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4ce:	7bdb      	ldrb	r3, [r3, #15]
 800c4d0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
      }
#endif
    } else
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
    {
      dst_port = DNS_SERVER_PORT;
 800c4d4:	2335      	movs	r3, #53	@ 0x35
 800c4d6:	847b      	strh	r3, [r7, #34]	@ 0x22
      dst = &dns_servers[entry->server_idx];
 800c4d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4da:	7adb      	ldrb	r3, [r3, #11]
 800c4dc:	009b      	lsls	r3, r3, #2
 800c4de:	4a16      	ldr	r2, [pc, #88]	@ (800c538 <dns_send+0x1d8>)
 800c4e0:	4413      	add	r3, r2
 800c4e2:	61fb      	str	r3, [r7, #28]
    }
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 800c4e4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800c4e8:	4a14      	ldr	r2, [pc, #80]	@ (800c53c <dns_send+0x1dc>)
 800c4ea:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800c4ee:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c4f0:	69fa      	ldr	r2, [r7, #28]
 800c4f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c4f4:	f007 fdb0 	bl	8014058 <udp_sendto>
 800c4f8:	4603      	mov	r3, r0
 800c4fa:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

    /* free pbuf */
    pbuf_free(p);
 800c4fe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c500:	f001 fd1a 	bl	800df38 <pbuf_free>
 800c504:	e002      	b.n	800c50c <dns_send+0x1ac>
  } else {
    err = ERR_MEM;
 800c506:	23ff      	movs	r3, #255	@ 0xff
 800c508:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  }

  return err;
 800c50c:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800c510:	e005      	b.n	800c51e <dns_send+0x1be>
        goto overflow_return;
 800c512:	bf00      	nop
overflow_return:
  pbuf_free(p);
 800c514:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c516:	f001 fd0f 	bl	800df38 <pbuf_free>
  return ERR_VAL;
 800c51a:	f06f 0305 	mvn.w	r3, #5
}
 800c51e:	4618      	mov	r0, r3
 800c520:	3740      	adds	r7, #64	@ 0x40
 800c522:	46bd      	mov	sp, r7
 800c524:	bd80      	pop	{r7, pc}
 800c526:	bf00      	nop
 800c528:	20011a94 	.word	0x20011a94
 800c52c:	080208b8 	.word	0x080208b8
 800c530:	080208e8 	.word	0x080208e8
 800c534:	08020900 	.word	0x08020900
 800c538:	20011f04 	.word	0x20011f04
 800c53c:	20011a84 	.word	0x20011a84

0800c540 <dns_call_found>:
 * @param idx dns table index of the entry that is resolved or removed
 * @param addr IP address for the hostname (or NULL on error or memory shortage)
 */
static void
dns_call_found(u8_t idx, ip_addr_t *addr)
{
 800c540:	b590      	push	{r4, r7, lr}
 800c542:	b085      	sub	sp, #20
 800c544:	af00      	add	r7, sp, #0
 800c546:	4603      	mov	r3, r0
 800c548:	6039      	str	r1, [r7, #0]
 800c54a:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800c54c:	2300      	movs	r3, #0
 800c54e:	73fb      	strb	r3, [r7, #15]
 800c550:	e03d      	b.n	800c5ce <dns_call_found+0x8e>
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
 800c552:	7bfa      	ldrb	r2, [r7, #15]
 800c554:	4957      	ldr	r1, [pc, #348]	@ (800c6b4 <dns_call_found+0x174>)
 800c556:	4613      	mov	r3, r2
 800c558:	005b      	lsls	r3, r3, #1
 800c55a:	4413      	add	r3, r2
 800c55c:	009b      	lsls	r3, r3, #2
 800c55e:	440b      	add	r3, r1
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	2b00      	cmp	r3, #0
 800c564:	d030      	beq.n	800c5c8 <dns_call_found+0x88>
 800c566:	7bfa      	ldrb	r2, [r7, #15]
 800c568:	4952      	ldr	r1, [pc, #328]	@ (800c6b4 <dns_call_found+0x174>)
 800c56a:	4613      	mov	r3, r2
 800c56c:	005b      	lsls	r3, r3, #1
 800c56e:	4413      	add	r3, r2
 800c570:	009b      	lsls	r3, r3, #2
 800c572:	440b      	add	r3, r1
 800c574:	3308      	adds	r3, #8
 800c576:	781b      	ldrb	r3, [r3, #0]
 800c578:	79fa      	ldrb	r2, [r7, #7]
 800c57a:	429a      	cmp	r2, r3
 800c57c:	d124      	bne.n	800c5c8 <dns_call_found+0x88>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 800c57e:	7bfa      	ldrb	r2, [r7, #15]
 800c580:	494c      	ldr	r1, [pc, #304]	@ (800c6b4 <dns_call_found+0x174>)
 800c582:	4613      	mov	r3, r2
 800c584:	005b      	lsls	r3, r3, #1
 800c586:	4413      	add	r3, r2
 800c588:	009b      	lsls	r3, r3, #2
 800c58a:	440b      	add	r3, r1
 800c58c:	681c      	ldr	r4, [r3, #0]
 800c58e:	79fa      	ldrb	r2, [r7, #7]
 800c590:	4613      	mov	r3, r2
 800c592:	011b      	lsls	r3, r3, #4
 800c594:	4413      	add	r3, r2
 800c596:	011b      	lsls	r3, r3, #4
 800c598:	3310      	adds	r3, #16
 800c59a:	4a47      	ldr	r2, [pc, #284]	@ (800c6b8 <dns_call_found+0x178>)
 800c59c:	1898      	adds	r0, r3, r2
 800c59e:	7bfa      	ldrb	r2, [r7, #15]
 800c5a0:	4944      	ldr	r1, [pc, #272]	@ (800c6b4 <dns_call_found+0x174>)
 800c5a2:	4613      	mov	r3, r2
 800c5a4:	005b      	lsls	r3, r3, #1
 800c5a6:	4413      	add	r3, r2
 800c5a8:	009b      	lsls	r3, r3, #2
 800c5aa:	440b      	add	r3, r1
 800c5ac:	3304      	adds	r3, #4
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	461a      	mov	r2, r3
 800c5b2:	6839      	ldr	r1, [r7, #0]
 800c5b4:	47a0      	blx	r4
      /* flush this entry */
      dns_requests[i].found = NULL;
 800c5b6:	7bfa      	ldrb	r2, [r7, #15]
 800c5b8:	493e      	ldr	r1, [pc, #248]	@ (800c6b4 <dns_call_found+0x174>)
 800c5ba:	4613      	mov	r3, r2
 800c5bc:	005b      	lsls	r3, r3, #1
 800c5be:	4413      	add	r3, r2
 800c5c0:	009b      	lsls	r3, r3, #2
 800c5c2:	440b      	add	r3, r1
 800c5c4:	2200      	movs	r2, #0
 800c5c6:	601a      	str	r2, [r3, #0]
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800c5c8:	7bfb      	ldrb	r3, [r7, #15]
 800c5ca:	3301      	adds	r3, #1
 800c5cc:	73fb      	strb	r3, [r7, #15]
 800c5ce:	7bfb      	ldrb	r3, [r7, #15]
 800c5d0:	2b03      	cmp	r3, #3
 800c5d2:	d9be      	bls.n	800c552 <dns_call_found+0x12>
  }
  dns_requests[idx].found = NULL;
#endif
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
  /* close the pcb used unless other request are using it */
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800c5d4:	2300      	movs	r3, #0
 800c5d6:	73fb      	strb	r3, [r7, #15]
 800c5d8:	e031      	b.n	800c63e <dns_call_found+0xfe>
    if (i == idx) {
 800c5da:	7bfa      	ldrb	r2, [r7, #15]
 800c5dc:	79fb      	ldrb	r3, [r7, #7]
 800c5de:	429a      	cmp	r2, r3
 800c5e0:	d029      	beq.n	800c636 <dns_call_found+0xf6>
      continue; /* only check other requests */
    }
    if (dns_table[i].state == DNS_STATE_ASKING) {
 800c5e2:	7bfa      	ldrb	r2, [r7, #15]
 800c5e4:	4934      	ldr	r1, [pc, #208]	@ (800c6b8 <dns_call_found+0x178>)
 800c5e6:	4613      	mov	r3, r2
 800c5e8:	011b      	lsls	r3, r3, #4
 800c5ea:	4413      	add	r3, r2
 800c5ec:	011b      	lsls	r3, r3, #4
 800c5ee:	440b      	add	r3, r1
 800c5f0:	330a      	adds	r3, #10
 800c5f2:	781b      	ldrb	r3, [r3, #0]
 800c5f4:	2b02      	cmp	r3, #2
 800c5f6:	d11f      	bne.n	800c638 <dns_call_found+0xf8>
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 800c5f8:	7bfa      	ldrb	r2, [r7, #15]
 800c5fa:	492f      	ldr	r1, [pc, #188]	@ (800c6b8 <dns_call_found+0x178>)
 800c5fc:	4613      	mov	r3, r2
 800c5fe:	011b      	lsls	r3, r3, #4
 800c600:	4413      	add	r3, r2
 800c602:	011b      	lsls	r3, r3, #4
 800c604:	440b      	add	r3, r1
 800c606:	330f      	adds	r3, #15
 800c608:	7819      	ldrb	r1, [r3, #0]
 800c60a:	79fa      	ldrb	r2, [r7, #7]
 800c60c:	482a      	ldr	r0, [pc, #168]	@ (800c6b8 <dns_call_found+0x178>)
 800c60e:	4613      	mov	r3, r2
 800c610:	011b      	lsls	r3, r3, #4
 800c612:	4413      	add	r3, r2
 800c614:	011b      	lsls	r3, r3, #4
 800c616:	4403      	add	r3, r0
 800c618:	330f      	adds	r3, #15
 800c61a:	781b      	ldrb	r3, [r3, #0]
 800c61c:	4299      	cmp	r1, r3
 800c61e:	d10b      	bne.n	800c638 <dns_call_found+0xf8>
        /* another request is still using the same pcb */
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 800c620:	79fa      	ldrb	r2, [r7, #7]
 800c622:	4925      	ldr	r1, [pc, #148]	@ (800c6b8 <dns_call_found+0x178>)
 800c624:	4613      	mov	r3, r2
 800c626:	011b      	lsls	r3, r3, #4
 800c628:	4413      	add	r3, r2
 800c62a:	011b      	lsls	r3, r3, #4
 800c62c:	440b      	add	r3, r1
 800c62e:	330f      	adds	r3, #15
 800c630:	2204      	movs	r2, #4
 800c632:	701a      	strb	r2, [r3, #0]
        break;
 800c634:	e006      	b.n	800c644 <dns_call_found+0x104>
      continue; /* only check other requests */
 800c636:	bf00      	nop
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800c638:	7bfb      	ldrb	r3, [r7, #15]
 800c63a:	3301      	adds	r3, #1
 800c63c:	73fb      	strb	r3, [r7, #15]
 800c63e:	7bfb      	ldrb	r3, [r7, #15]
 800c640:	2b03      	cmp	r3, #3
 800c642:	d9ca      	bls.n	800c5da <dns_call_found+0x9a>
      }
    }
  }
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
 800c644:	79fa      	ldrb	r2, [r7, #7]
 800c646:	491c      	ldr	r1, [pc, #112]	@ (800c6b8 <dns_call_found+0x178>)
 800c648:	4613      	mov	r3, r2
 800c64a:	011b      	lsls	r3, r3, #4
 800c64c:	4413      	add	r3, r2
 800c64e:	011b      	lsls	r3, r3, #4
 800c650:	440b      	add	r3, r1
 800c652:	330f      	adds	r3, #15
 800c654:	781b      	ldrb	r3, [r3, #0]
 800c656:	2b03      	cmp	r3, #3
 800c658:	d827      	bhi.n	800c6aa <dns_call_found+0x16a>
    /* if we come here, the pcb is not used any more and can be removed */
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 800c65a:	79fa      	ldrb	r2, [r7, #7]
 800c65c:	4916      	ldr	r1, [pc, #88]	@ (800c6b8 <dns_call_found+0x178>)
 800c65e:	4613      	mov	r3, r2
 800c660:	011b      	lsls	r3, r3, #4
 800c662:	4413      	add	r3, r2
 800c664:	011b      	lsls	r3, r3, #4
 800c666:	440b      	add	r3, r1
 800c668:	330f      	adds	r3, #15
 800c66a:	781b      	ldrb	r3, [r3, #0]
 800c66c:	461a      	mov	r2, r3
 800c66e:	4b13      	ldr	r3, [pc, #76]	@ (800c6bc <dns_call_found+0x17c>)
 800c670:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c674:	4618      	mov	r0, r3
 800c676:	f007 ffbb 	bl	80145f0 <udp_remove>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 800c67a:	79fa      	ldrb	r2, [r7, #7]
 800c67c:	490e      	ldr	r1, [pc, #56]	@ (800c6b8 <dns_call_found+0x178>)
 800c67e:	4613      	mov	r3, r2
 800c680:	011b      	lsls	r3, r3, #4
 800c682:	4413      	add	r3, r2
 800c684:	011b      	lsls	r3, r3, #4
 800c686:	440b      	add	r3, r1
 800c688:	330f      	adds	r3, #15
 800c68a:	781b      	ldrb	r3, [r3, #0]
 800c68c:	4619      	mov	r1, r3
 800c68e:	4b0b      	ldr	r3, [pc, #44]	@ (800c6bc <dns_call_found+0x17c>)
 800c690:	2200      	movs	r2, #0
 800c692:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
    dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 800c696:	79fa      	ldrb	r2, [r7, #7]
 800c698:	4907      	ldr	r1, [pc, #28]	@ (800c6b8 <dns_call_found+0x178>)
 800c69a:	4613      	mov	r3, r2
 800c69c:	011b      	lsls	r3, r3, #4
 800c69e:	4413      	add	r3, r2
 800c6a0:	011b      	lsls	r3, r3, #4
 800c6a2:	440b      	add	r3, r1
 800c6a4:	330f      	adds	r3, #15
 800c6a6:	2204      	movs	r2, #4
 800c6a8:	701a      	strb	r2, [r3, #0]
  }
#endif
}
 800c6aa:	bf00      	nop
 800c6ac:	3714      	adds	r7, #20
 800c6ae:	46bd      	mov	sp, r7
 800c6b0:	bd90      	pop	{r4, r7, pc}
 800c6b2:	bf00      	nop
 800c6b4:	20011ed4 	.word	0x20011ed4
 800c6b8:	20011a94 	.word	0x20011a94
 800c6bc:	20011a84 	.word	0x20011a84

0800c6c0 <dns_create_txid>:

/* Create a query transmission ID that is unique for all outstanding queries */
static u16_t
dns_create_txid(void)
{
 800c6c0:	b580      	push	{r7, lr}
 800c6c2:	b082      	sub	sp, #8
 800c6c4:	af00      	add	r7, sp, #0
  u16_t txid;
  u8_t i;

again:
  txid = (u16_t)DNS_RAND_TXID();
 800c6c6:	f00a faef 	bl	8016ca8 <rand>
 800c6ca:	4603      	mov	r3, r0
 800c6cc:	80bb      	strh	r3, [r7, #4]

  /* check whether the ID is unique */
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	71fb      	strb	r3, [r7, #7]
 800c6d2:	e01a      	b.n	800c70a <dns_create_txid+0x4a>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 800c6d4:	79fa      	ldrb	r2, [r7, #7]
 800c6d6:	4911      	ldr	r1, [pc, #68]	@ (800c71c <dns_create_txid+0x5c>)
 800c6d8:	4613      	mov	r3, r2
 800c6da:	011b      	lsls	r3, r3, #4
 800c6dc:	4413      	add	r3, r2
 800c6de:	011b      	lsls	r3, r3, #4
 800c6e0:	440b      	add	r3, r1
 800c6e2:	330a      	adds	r3, #10
 800c6e4:	781b      	ldrb	r3, [r3, #0]
 800c6e6:	2b02      	cmp	r3, #2
 800c6e8:	d10c      	bne.n	800c704 <dns_create_txid+0x44>
        (dns_table[i].txid == txid)) {
 800c6ea:	79fa      	ldrb	r2, [r7, #7]
 800c6ec:	490b      	ldr	r1, [pc, #44]	@ (800c71c <dns_create_txid+0x5c>)
 800c6ee:	4613      	mov	r3, r2
 800c6f0:	011b      	lsls	r3, r3, #4
 800c6f2:	4413      	add	r3, r2
 800c6f4:	011b      	lsls	r3, r3, #4
 800c6f6:	440b      	add	r3, r1
 800c6f8:	3308      	adds	r3, #8
 800c6fa:	881b      	ldrh	r3, [r3, #0]
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 800c6fc:	88ba      	ldrh	r2, [r7, #4]
 800c6fe:	429a      	cmp	r2, r3
 800c700:	d100      	bne.n	800c704 <dns_create_txid+0x44>
      /* ID already used by another pending query */
      goto again;
 800c702:	e7e0      	b.n	800c6c6 <dns_create_txid+0x6>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 800c704:	79fb      	ldrb	r3, [r7, #7]
 800c706:	3301      	adds	r3, #1
 800c708:	71fb      	strb	r3, [r7, #7]
 800c70a:	79fb      	ldrb	r3, [r7, #7]
 800c70c:	2b03      	cmp	r3, #3
 800c70e:	d9e1      	bls.n	800c6d4 <dns_create_txid+0x14>
    }
  }

  return txid;
 800c710:	88bb      	ldrh	r3, [r7, #4]
}
 800c712:	4618      	mov	r0, r3
 800c714:	3708      	adds	r7, #8
 800c716:	46bd      	mov	sp, r7
 800c718:	bd80      	pop	{r7, pc}
 800c71a:	bf00      	nop
 800c71c:	20011a94 	.word	0x20011a94

0800c720 <dns_backupserver_available>:
/**
 * Check whether there are other backup DNS servers available to try
 */
static u8_t
dns_backupserver_available(struct dns_table_entry *pentry)
{
 800c720:	b480      	push	{r7}
 800c722:	b085      	sub	sp, #20
 800c724:	af00      	add	r7, sp, #0
 800c726:	6078      	str	r0, [r7, #4]
  u8_t ret = 0;
 800c728:	2300      	movs	r3, #0
 800c72a:	73fb      	strb	r3, [r7, #15]

  if (pentry) {
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d00d      	beq.n	800c74e <dns_backupserver_available+0x2e>
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	7adb      	ldrb	r3, [r3, #11]
 800c736:	2b00      	cmp	r3, #0
 800c738:	d109      	bne.n	800c74e <dns_backupserver_available+0x2e>
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	7adb      	ldrb	r3, [r3, #11]
 800c73e:	3301      	adds	r3, #1
 800c740:	4a06      	ldr	r2, [pc, #24]	@ (800c75c <dns_backupserver_available+0x3c>)
 800c742:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c746:	2b00      	cmp	r3, #0
 800c748:	d001      	beq.n	800c74e <dns_backupserver_available+0x2e>
      ret = 1;
 800c74a:	2301      	movs	r3, #1
 800c74c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800c74e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c750:	4618      	mov	r0, r3
 800c752:	3714      	adds	r7, #20
 800c754:	46bd      	mov	sp, r7
 800c756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c75a:	4770      	bx	lr
 800c75c:	20011f04 	.word	0x20011f04

0800c760 <dns_check_entry>:
 *
 * @param i index of the dns_table entry to check
 */
static void
dns_check_entry(u8_t i)
{
 800c760:	b580      	push	{r7, lr}
 800c762:	b084      	sub	sp, #16
 800c764:	af00      	add	r7, sp, #0
 800c766:	4603      	mov	r3, r0
 800c768:	71fb      	strb	r3, [r7, #7]
  err_t err;
  struct dns_table_entry *entry = &dns_table[i];
 800c76a:	79fa      	ldrb	r2, [r7, #7]
 800c76c:	4613      	mov	r3, r2
 800c76e:	011b      	lsls	r3, r3, #4
 800c770:	4413      	add	r3, r2
 800c772:	011b      	lsls	r3, r3, #4
 800c774:	4a48      	ldr	r2, [pc, #288]	@ (800c898 <dns_check_entry+0x138>)
 800c776:	4413      	add	r3, r2
 800c778:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 800c77a:	79fb      	ldrb	r3, [r7, #7]
 800c77c:	2b03      	cmp	r3, #3
 800c77e:	d906      	bls.n	800c78e <dns_check_entry+0x2e>
 800c780:	4b46      	ldr	r3, [pc, #280]	@ (800c89c <dns_check_entry+0x13c>)
 800c782:	f240 421c 	movw	r2, #1052	@ 0x41c
 800c786:	4946      	ldr	r1, [pc, #280]	@ (800c8a0 <dns_check_entry+0x140>)
 800c788:	4846      	ldr	r0, [pc, #280]	@ (800c8a4 <dns_check_entry+0x144>)
 800c78a:	f00b fa1f 	bl	8017bcc <iprintf>

  switch (entry->state) {
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	7a9b      	ldrb	r3, [r3, #10]
 800c792:	2b03      	cmp	r3, #3
 800c794:	d86f      	bhi.n	800c876 <dns_check_entry+0x116>
 800c796:	a201      	add	r2, pc, #4	@ (adr r2, 800c79c <dns_check_entry+0x3c>)
 800c798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c79c:	0800c887 	.word	0x0800c887
 800c7a0:	0800c7ad 	.word	0x0800c7ad
 800c7a4:	0800c7df 	.word	0x0800c7df
 800c7a8:	0800c855 	.word	0x0800c855
    case DNS_STATE_NEW:
      /* initialize new entry */
      entry->txid = dns_create_txid();
 800c7ac:	f7ff ff88 	bl	800c6c0 <dns_create_txid>
 800c7b0:	4603      	mov	r3, r0
 800c7b2:	461a      	mov	r2, r3
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	811a      	strh	r2, [r3, #8]
      entry->state = DNS_STATE_ASKING;
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	2202      	movs	r2, #2
 800c7bc:	729a      	strb	r2, [r3, #10]
      entry->server_idx = 0;
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	2200      	movs	r2, #0
 800c7c2:	72da      	strb	r2, [r3, #11]
      entry->tmr = 1;
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	2201      	movs	r2, #1
 800c7c8:	731a      	strb	r2, [r3, #12]
      entry->retries = 0;
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	2200      	movs	r2, #0
 800c7ce:	735a      	strb	r2, [r3, #13]

      /* send DNS packet for this entry */
      err = dns_send(i);
 800c7d0:	79fb      	ldrb	r3, [r7, #7]
 800c7d2:	4618      	mov	r0, r3
 800c7d4:	f7ff fdc4 	bl	800c360 <dns_send>
 800c7d8:	4603      	mov	r3, r0
 800c7da:	72fb      	strb	r3, [r7, #11]
      if (err != ERR_OK) {
        LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                    ("dns_send returned error: %s\n", lwip_strerr(err)));
      }
      break;
 800c7dc:	e058      	b.n	800c890 <dns_check_entry+0x130>
    case DNS_STATE_ASKING:
      if (--entry->tmr == 0) {
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	7b1b      	ldrb	r3, [r3, #12]
 800c7e2:	3b01      	subs	r3, #1
 800c7e4:	b2da      	uxtb	r2, r3
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	731a      	strb	r2, [r3, #12]
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	7b1b      	ldrb	r3, [r3, #12]
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d14b      	bne.n	800c88a <dns_check_entry+0x12a>
        if (++entry->retries == DNS_MAX_RETRIES) {
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	7b5b      	ldrb	r3, [r3, #13]
 800c7f6:	3301      	adds	r3, #1
 800c7f8:	b2da      	uxtb	r2, r3
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	735a      	strb	r2, [r3, #13]
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	7b5b      	ldrb	r3, [r3, #13]
 800c802:	2b04      	cmp	r3, #4
 800c804:	d11b      	bne.n	800c83e <dns_check_entry+0xde>
          if (dns_backupserver_available(entry)
 800c806:	68f8      	ldr	r0, [r7, #12]
 800c808:	f7ff ff8a 	bl	800c720 <dns_backupserver_available>
 800c80c:	4603      	mov	r3, r0
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d00c      	beq.n	800c82c <dns_check_entry+0xcc>
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
              && !entry->is_mdns
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
             ) {
            /* change of server */
            entry->server_idx++;
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	7adb      	ldrb	r3, [r3, #11]
 800c816:	3301      	adds	r3, #1
 800c818:	b2da      	uxtb	r2, r3
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	72da      	strb	r2, [r3, #11]
            entry->tmr = 1;
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	2201      	movs	r2, #1
 800c822:	731a      	strb	r2, [r3, #12]
            entry->retries = 0;
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	2200      	movs	r2, #0
 800c828:	735a      	strb	r2, [r3, #13]
 800c82a:	e00c      	b.n	800c846 <dns_check_entry+0xe6>
          } else {
            LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": timeout\n", entry->name));
            /* call specified callback function if provided */
            dns_call_found(i, NULL);
 800c82c:	79fb      	ldrb	r3, [r7, #7]
 800c82e:	2100      	movs	r1, #0
 800c830:	4618      	mov	r0, r3
 800c832:	f7ff fe85 	bl	800c540 <dns_call_found>
            /* flush this entry */
            entry->state = DNS_STATE_UNUSED;
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	2200      	movs	r2, #0
 800c83a:	729a      	strb	r2, [r3, #10]
            break;
 800c83c:	e028      	b.n	800c890 <dns_check_entry+0x130>
          }
        } else {
          /* wait longer for the next retry */
          entry->tmr = entry->retries;
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	7b5a      	ldrb	r2, [r3, #13]
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	731a      	strb	r2, [r3, #12]
        }

        /* send DNS packet for this entry */
        err = dns_send(i);
 800c846:	79fb      	ldrb	r3, [r7, #7]
 800c848:	4618      	mov	r0, r3
 800c84a:	f7ff fd89 	bl	800c360 <dns_send>
 800c84e:	4603      	mov	r3, r0
 800c850:	72fb      	strb	r3, [r7, #11]
        if (err != ERR_OK) {
          LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                      ("dns_send returned error: %s\n", lwip_strerr(err)));
        }
      }
      break;
 800c852:	e01a      	b.n	800c88a <dns_check_entry+0x12a>
    case DNS_STATE_DONE:
      /* if the time to live is nul */
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d008      	beq.n	800c86e <dns_check_entry+0x10e>
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	1e5a      	subs	r2, r3, #1
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	601a      	str	r2, [r3, #0]
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d10f      	bne.n	800c88e <dns_check_entry+0x12e>
        LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": flush\n", entry->name));
        /* flush this entry, there cannot be any related pending entries in this state */
        entry->state = DNS_STATE_UNUSED;
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	2200      	movs	r2, #0
 800c872:	729a      	strb	r2, [r3, #10]
      }
      break;
 800c874:	e00b      	b.n	800c88e <dns_check_entry+0x12e>
    case DNS_STATE_UNUSED:
      /* nothing to do */
      break;
    default:
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 800c876:	4b09      	ldr	r3, [pc, #36]	@ (800c89c <dns_check_entry+0x13c>)
 800c878:	f240 425b 	movw	r2, #1115	@ 0x45b
 800c87c:	490a      	ldr	r1, [pc, #40]	@ (800c8a8 <dns_check_entry+0x148>)
 800c87e:	4809      	ldr	r0, [pc, #36]	@ (800c8a4 <dns_check_entry+0x144>)
 800c880:	f00b f9a4 	bl	8017bcc <iprintf>
      break;
 800c884:	e004      	b.n	800c890 <dns_check_entry+0x130>
      break;
 800c886:	bf00      	nop
 800c888:	e002      	b.n	800c890 <dns_check_entry+0x130>
      break;
 800c88a:	bf00      	nop
 800c88c:	e000      	b.n	800c890 <dns_check_entry+0x130>
      break;
 800c88e:	bf00      	nop
  }
}
 800c890:	bf00      	nop
 800c892:	3710      	adds	r7, #16
 800c894:	46bd      	mov	sp, r7
 800c896:	bd80      	pop	{r7, pc}
 800c898:	20011a94 	.word	0x20011a94
 800c89c:	080208b8 	.word	0x080208b8
 800c8a0:	08020928 	.word	0x08020928
 800c8a4:	08020900 	.word	0x08020900
 800c8a8:	08020944 	.word	0x08020944

0800c8ac <dns_check_entries>:
/**
 * Call dns_check_entry for each entry in dns_table - check all entries.
 */
static void
dns_check_entries(void)
{
 800c8ac:	b580      	push	{r7, lr}
 800c8ae:	b082      	sub	sp, #8
 800c8b0:	af00      	add	r7, sp, #0
  u8_t i;

  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 800c8b2:	2300      	movs	r3, #0
 800c8b4:	71fb      	strb	r3, [r7, #7]
 800c8b6:	e006      	b.n	800c8c6 <dns_check_entries+0x1a>
    dns_check_entry(i);
 800c8b8:	79fb      	ldrb	r3, [r7, #7]
 800c8ba:	4618      	mov	r0, r3
 800c8bc:	f7ff ff50 	bl	800c760 <dns_check_entry>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 800c8c0:	79fb      	ldrb	r3, [r7, #7]
 800c8c2:	3301      	adds	r3, #1
 800c8c4:	71fb      	strb	r3, [r7, #7]
 800c8c6:	79fb      	ldrb	r3, [r7, #7]
 800c8c8:	2b03      	cmp	r3, #3
 800c8ca:	d9f5      	bls.n	800c8b8 <dns_check_entries+0xc>
  }
}
 800c8cc:	bf00      	nop
 800c8ce:	bf00      	nop
 800c8d0:	3708      	adds	r7, #8
 800c8d2:	46bd      	mov	sp, r7
 800c8d4:	bd80      	pop	{r7, pc}

0800c8d6 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800c8d6:	b580      	push	{r7, lr}
 800c8d8:	b082      	sub	sp, #8
 800c8da:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800c8dc:	2300      	movs	r3, #0
 800c8de:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800c8e0:	f000 f8d6 	bl	800ca90 <mem_init>
  memp_init();
 800c8e4:	f000 fbdc 	bl	800d0a0 <memp_init>
  pbuf_init();
  netif_init();
 800c8e8:	f000 fcda 	bl	800d2a0 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800c8ec:	f007 f9be 	bl	8013c6c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800c8f0:	f001 ff1a 	bl	800e728 <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
 800c8f4:	f7ff fd27 	bl	800c346 <dns_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800c8f8:	f007 f92e 	bl	8013b58 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800c8fc:	bf00      	nop
 800c8fe:	3708      	adds	r7, #8
 800c900:	46bd      	mov	sp, r7
 800c902:	bd80      	pop	{r7, pc}

0800c904 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800c904:	b480      	push	{r7}
 800c906:	b083      	sub	sp, #12
 800c908:	af00      	add	r7, sp, #0
 800c90a:	4603      	mov	r3, r0
 800c90c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800c90e:	4b05      	ldr	r3, [pc, #20]	@ (800c924 <ptr_to_mem+0x20>)
 800c910:	681a      	ldr	r2, [r3, #0]
 800c912:	88fb      	ldrh	r3, [r7, #6]
 800c914:	4413      	add	r3, r2
}
 800c916:	4618      	mov	r0, r3
 800c918:	370c      	adds	r7, #12
 800c91a:	46bd      	mov	sp, r7
 800c91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c920:	4770      	bx	lr
 800c922:	bf00      	nop
 800c924:	20012338 	.word	0x20012338

0800c928 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800c928:	b480      	push	{r7}
 800c92a:	b083      	sub	sp, #12
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800c930:	4b05      	ldr	r3, [pc, #20]	@ (800c948 <mem_to_ptr+0x20>)
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	687a      	ldr	r2, [r7, #4]
 800c936:	1ad3      	subs	r3, r2, r3
 800c938:	b29b      	uxth	r3, r3
}
 800c93a:	4618      	mov	r0, r3
 800c93c:	370c      	adds	r7, #12
 800c93e:	46bd      	mov	sp, r7
 800c940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c944:	4770      	bx	lr
 800c946:	bf00      	nop
 800c948:	20012338 	.word	0x20012338

0800c94c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800c94c:	b590      	push	{r4, r7, lr}
 800c94e:	b085      	sub	sp, #20
 800c950:	af00      	add	r7, sp, #0
 800c952:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800c954:	4b45      	ldr	r3, [pc, #276]	@ (800ca6c <plug_holes+0x120>)
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	687a      	ldr	r2, [r7, #4]
 800c95a:	429a      	cmp	r2, r3
 800c95c:	d206      	bcs.n	800c96c <plug_holes+0x20>
 800c95e:	4b44      	ldr	r3, [pc, #272]	@ (800ca70 <plug_holes+0x124>)
 800c960:	f240 12df 	movw	r2, #479	@ 0x1df
 800c964:	4943      	ldr	r1, [pc, #268]	@ (800ca74 <plug_holes+0x128>)
 800c966:	4844      	ldr	r0, [pc, #272]	@ (800ca78 <plug_holes+0x12c>)
 800c968:	f00b f930 	bl	8017bcc <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800c96c:	4b43      	ldr	r3, [pc, #268]	@ (800ca7c <plug_holes+0x130>)
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	687a      	ldr	r2, [r7, #4]
 800c972:	429a      	cmp	r2, r3
 800c974:	d306      	bcc.n	800c984 <plug_holes+0x38>
 800c976:	4b3e      	ldr	r3, [pc, #248]	@ (800ca70 <plug_holes+0x124>)
 800c978:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800c97c:	4940      	ldr	r1, [pc, #256]	@ (800ca80 <plug_holes+0x134>)
 800c97e:	483e      	ldr	r0, [pc, #248]	@ (800ca78 <plug_holes+0x12c>)
 800c980:	f00b f924 	bl	8017bcc <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	791b      	ldrb	r3, [r3, #4]
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d006      	beq.n	800c99a <plug_holes+0x4e>
 800c98c:	4b38      	ldr	r3, [pc, #224]	@ (800ca70 <plug_holes+0x124>)
 800c98e:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800c992:	493c      	ldr	r1, [pc, #240]	@ (800ca84 <plug_holes+0x138>)
 800c994:	4838      	ldr	r0, [pc, #224]	@ (800ca78 <plug_holes+0x12c>)
 800c996:	f00b f919 	bl	8017bcc <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	881b      	ldrh	r3, [r3, #0]
 800c99e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c9a2:	d906      	bls.n	800c9b2 <plug_holes+0x66>
 800c9a4:	4b32      	ldr	r3, [pc, #200]	@ (800ca70 <plug_holes+0x124>)
 800c9a6:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800c9aa:	4937      	ldr	r1, [pc, #220]	@ (800ca88 <plug_holes+0x13c>)
 800c9ac:	4832      	ldr	r0, [pc, #200]	@ (800ca78 <plug_holes+0x12c>)
 800c9ae:	f00b f90d 	bl	8017bcc <iprintf>

  nmem = ptr_to_mem(mem->next);
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	881b      	ldrh	r3, [r3, #0]
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	f7ff ffa4 	bl	800c904 <ptr_to_mem>
 800c9bc:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800c9be:	687a      	ldr	r2, [r7, #4]
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	429a      	cmp	r2, r3
 800c9c4:	d024      	beq.n	800ca10 <plug_holes+0xc4>
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	791b      	ldrb	r3, [r3, #4]
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d120      	bne.n	800ca10 <plug_holes+0xc4>
 800c9ce:	4b2b      	ldr	r3, [pc, #172]	@ (800ca7c <plug_holes+0x130>)
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	68fa      	ldr	r2, [r7, #12]
 800c9d4:	429a      	cmp	r2, r3
 800c9d6:	d01b      	beq.n	800ca10 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800c9d8:	4b2c      	ldr	r3, [pc, #176]	@ (800ca8c <plug_holes+0x140>)
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	68fa      	ldr	r2, [r7, #12]
 800c9de:	429a      	cmp	r2, r3
 800c9e0:	d102      	bne.n	800c9e8 <plug_holes+0x9c>
      lfree = mem;
 800c9e2:	4a2a      	ldr	r2, [pc, #168]	@ (800ca8c <plug_holes+0x140>)
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	881a      	ldrh	r2, [r3, #0]
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	881b      	ldrh	r3, [r3, #0]
 800c9f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c9f8:	d00a      	beq.n	800ca10 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	881b      	ldrh	r3, [r3, #0]
 800c9fe:	4618      	mov	r0, r3
 800ca00:	f7ff ff80 	bl	800c904 <ptr_to_mem>
 800ca04:	4604      	mov	r4, r0
 800ca06:	6878      	ldr	r0, [r7, #4]
 800ca08:	f7ff ff8e 	bl	800c928 <mem_to_ptr>
 800ca0c:	4603      	mov	r3, r0
 800ca0e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	885b      	ldrh	r3, [r3, #2]
 800ca14:	4618      	mov	r0, r3
 800ca16:	f7ff ff75 	bl	800c904 <ptr_to_mem>
 800ca1a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800ca1c:	68ba      	ldr	r2, [r7, #8]
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	429a      	cmp	r2, r3
 800ca22:	d01f      	beq.n	800ca64 <plug_holes+0x118>
 800ca24:	68bb      	ldr	r3, [r7, #8]
 800ca26:	791b      	ldrb	r3, [r3, #4]
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d11b      	bne.n	800ca64 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800ca2c:	4b17      	ldr	r3, [pc, #92]	@ (800ca8c <plug_holes+0x140>)
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	687a      	ldr	r2, [r7, #4]
 800ca32:	429a      	cmp	r2, r3
 800ca34:	d102      	bne.n	800ca3c <plug_holes+0xf0>
      lfree = pmem;
 800ca36:	4a15      	ldr	r2, [pc, #84]	@ (800ca8c <plug_holes+0x140>)
 800ca38:	68bb      	ldr	r3, [r7, #8]
 800ca3a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	881a      	ldrh	r2, [r3, #0]
 800ca40:	68bb      	ldr	r3, [r7, #8]
 800ca42:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	881b      	ldrh	r3, [r3, #0]
 800ca48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ca4c:	d00a      	beq.n	800ca64 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	881b      	ldrh	r3, [r3, #0]
 800ca52:	4618      	mov	r0, r3
 800ca54:	f7ff ff56 	bl	800c904 <ptr_to_mem>
 800ca58:	4604      	mov	r4, r0
 800ca5a:	68b8      	ldr	r0, [r7, #8]
 800ca5c:	f7ff ff64 	bl	800c928 <mem_to_ptr>
 800ca60:	4603      	mov	r3, r0
 800ca62:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800ca64:	bf00      	nop
 800ca66:	3714      	adds	r7, #20
 800ca68:	46bd      	mov	sp, r7
 800ca6a:	bd90      	pop	{r4, r7, pc}
 800ca6c:	20012338 	.word	0x20012338
 800ca70:	08020964 	.word	0x08020964
 800ca74:	08020994 	.word	0x08020994
 800ca78:	080209ac 	.word	0x080209ac
 800ca7c:	2001233c 	.word	0x2001233c
 800ca80:	080209d4 	.word	0x080209d4
 800ca84:	080209f0 	.word	0x080209f0
 800ca88:	08020a0c 	.word	0x08020a0c
 800ca8c:	20012340 	.word	0x20012340

0800ca90 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800ca90:	b580      	push	{r7, lr}
 800ca92:	b082      	sub	sp, #8
 800ca94:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800ca96:	4b18      	ldr	r3, [pc, #96]	@ (800caf8 <mem_init+0x68>)
 800ca98:	3303      	adds	r3, #3
 800ca9a:	f023 0303 	bic.w	r3, r3, #3
 800ca9e:	461a      	mov	r2, r3
 800caa0:	4b16      	ldr	r3, [pc, #88]	@ (800cafc <mem_init+0x6c>)
 800caa2:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800caa4:	4b15      	ldr	r3, [pc, #84]	@ (800cafc <mem_init+0x6c>)
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800cab0:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	2200      	movs	r2, #0
 800cab6:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	2200      	movs	r2, #0
 800cabc:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800cabe:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800cac2:	f7ff ff1f 	bl	800c904 <ptr_to_mem>
 800cac6:	4603      	mov	r3, r0
 800cac8:	4a0d      	ldr	r2, [pc, #52]	@ (800cb00 <mem_init+0x70>)
 800caca:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800cacc:	4b0c      	ldr	r3, [pc, #48]	@ (800cb00 <mem_init+0x70>)
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	2201      	movs	r2, #1
 800cad2:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800cad4:	4b0a      	ldr	r3, [pc, #40]	@ (800cb00 <mem_init+0x70>)
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800cadc:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800cade:	4b08      	ldr	r3, [pc, #32]	@ (800cb00 <mem_init+0x70>)
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800cae6:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800cae8:	4b04      	ldr	r3, [pc, #16]	@ (800cafc <mem_init+0x6c>)
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	4a05      	ldr	r2, [pc, #20]	@ (800cb04 <mem_init+0x74>)
 800caee:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800caf0:	bf00      	nop
 800caf2:	3708      	adds	r7, #8
 800caf4:	46bd      	mov	sp, r7
 800caf6:	bd80      	pop	{r7, pc}
 800caf8:	20011f24 	.word	0x20011f24
 800cafc:	20012338 	.word	0x20012338
 800cb00:	2001233c 	.word	0x2001233c
 800cb04:	20012340 	.word	0x20012340

0800cb08 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	b086      	sub	sp, #24
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800cb10:	6878      	ldr	r0, [r7, #4]
 800cb12:	f7ff ff09 	bl	800c928 <mem_to_ptr>
 800cb16:	4603      	mov	r3, r0
 800cb18:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	881b      	ldrh	r3, [r3, #0]
 800cb1e:	4618      	mov	r0, r3
 800cb20:	f7ff fef0 	bl	800c904 <ptr_to_mem>
 800cb24:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	885b      	ldrh	r3, [r3, #2]
 800cb2a:	4618      	mov	r0, r3
 800cb2c:	f7ff feea 	bl	800c904 <ptr_to_mem>
 800cb30:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	881b      	ldrh	r3, [r3, #0]
 800cb36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cb3a:	d818      	bhi.n	800cb6e <mem_link_valid+0x66>
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	885b      	ldrh	r3, [r3, #2]
 800cb40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cb44:	d813      	bhi.n	800cb6e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800cb4a:	8afa      	ldrh	r2, [r7, #22]
 800cb4c:	429a      	cmp	r2, r3
 800cb4e:	d004      	beq.n	800cb5a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	881b      	ldrh	r3, [r3, #0]
 800cb54:	8afa      	ldrh	r2, [r7, #22]
 800cb56:	429a      	cmp	r2, r3
 800cb58:	d109      	bne.n	800cb6e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800cb5a:	4b08      	ldr	r3, [pc, #32]	@ (800cb7c <mem_link_valid+0x74>)
 800cb5c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800cb5e:	693a      	ldr	r2, [r7, #16]
 800cb60:	429a      	cmp	r2, r3
 800cb62:	d006      	beq.n	800cb72 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800cb64:	693b      	ldr	r3, [r7, #16]
 800cb66:	885b      	ldrh	r3, [r3, #2]
 800cb68:	8afa      	ldrh	r2, [r7, #22]
 800cb6a:	429a      	cmp	r2, r3
 800cb6c:	d001      	beq.n	800cb72 <mem_link_valid+0x6a>
    return 0;
 800cb6e:	2300      	movs	r3, #0
 800cb70:	e000      	b.n	800cb74 <mem_link_valid+0x6c>
  }
  return 1;
 800cb72:	2301      	movs	r3, #1
}
 800cb74:	4618      	mov	r0, r3
 800cb76:	3718      	adds	r7, #24
 800cb78:	46bd      	mov	sp, r7
 800cb7a:	bd80      	pop	{r7, pc}
 800cb7c:	2001233c 	.word	0x2001233c

0800cb80 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800cb80:	b580      	push	{r7, lr}
 800cb82:	b084      	sub	sp, #16
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d04c      	beq.n	800cc28 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	f003 0303 	and.w	r3, r3, #3
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d007      	beq.n	800cba8 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800cb98:	4b25      	ldr	r3, [pc, #148]	@ (800cc30 <mem_free+0xb0>)
 800cb9a:	f240 2273 	movw	r2, #627	@ 0x273
 800cb9e:	4925      	ldr	r1, [pc, #148]	@ (800cc34 <mem_free+0xb4>)
 800cba0:	4825      	ldr	r0, [pc, #148]	@ (800cc38 <mem_free+0xb8>)
 800cba2:	f00b f813 	bl	8017bcc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800cba6:	e040      	b.n	800cc2a <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	3b08      	subs	r3, #8
 800cbac:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800cbae:	4b23      	ldr	r3, [pc, #140]	@ (800cc3c <mem_free+0xbc>)
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	68fa      	ldr	r2, [r7, #12]
 800cbb4:	429a      	cmp	r2, r3
 800cbb6:	d306      	bcc.n	800cbc6 <mem_free+0x46>
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	f103 020c 	add.w	r2, r3, #12
 800cbbe:	4b20      	ldr	r3, [pc, #128]	@ (800cc40 <mem_free+0xc0>)
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	429a      	cmp	r2, r3
 800cbc4:	d907      	bls.n	800cbd6 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800cbc6:	4b1a      	ldr	r3, [pc, #104]	@ (800cc30 <mem_free+0xb0>)
 800cbc8:	f240 227f 	movw	r2, #639	@ 0x27f
 800cbcc:	491d      	ldr	r1, [pc, #116]	@ (800cc44 <mem_free+0xc4>)
 800cbce:	481a      	ldr	r0, [pc, #104]	@ (800cc38 <mem_free+0xb8>)
 800cbd0:	f00a fffc 	bl	8017bcc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800cbd4:	e029      	b.n	800cc2a <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	791b      	ldrb	r3, [r3, #4]
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d107      	bne.n	800cbee <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800cbde:	4b14      	ldr	r3, [pc, #80]	@ (800cc30 <mem_free+0xb0>)
 800cbe0:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800cbe4:	4918      	ldr	r1, [pc, #96]	@ (800cc48 <mem_free+0xc8>)
 800cbe6:	4814      	ldr	r0, [pc, #80]	@ (800cc38 <mem_free+0xb8>)
 800cbe8:	f00a fff0 	bl	8017bcc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800cbec:	e01d      	b.n	800cc2a <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800cbee:	68f8      	ldr	r0, [r7, #12]
 800cbf0:	f7ff ff8a 	bl	800cb08 <mem_link_valid>
 800cbf4:	4603      	mov	r3, r0
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d107      	bne.n	800cc0a <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800cbfa:	4b0d      	ldr	r3, [pc, #52]	@ (800cc30 <mem_free+0xb0>)
 800cbfc:	f240 2295 	movw	r2, #661	@ 0x295
 800cc00:	4912      	ldr	r1, [pc, #72]	@ (800cc4c <mem_free+0xcc>)
 800cc02:	480d      	ldr	r0, [pc, #52]	@ (800cc38 <mem_free+0xb8>)
 800cc04:	f00a ffe2 	bl	8017bcc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800cc08:	e00f      	b.n	800cc2a <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	2200      	movs	r2, #0
 800cc0e:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800cc10:	4b0f      	ldr	r3, [pc, #60]	@ (800cc50 <mem_free+0xd0>)
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	68fa      	ldr	r2, [r7, #12]
 800cc16:	429a      	cmp	r2, r3
 800cc18:	d202      	bcs.n	800cc20 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800cc1a:	4a0d      	ldr	r2, [pc, #52]	@ (800cc50 <mem_free+0xd0>)
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800cc20:	68f8      	ldr	r0, [r7, #12]
 800cc22:	f7ff fe93 	bl	800c94c <plug_holes>
 800cc26:	e000      	b.n	800cc2a <mem_free+0xaa>
    return;
 800cc28:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800cc2a:	3710      	adds	r7, #16
 800cc2c:	46bd      	mov	sp, r7
 800cc2e:	bd80      	pop	{r7, pc}
 800cc30:	08020964 	.word	0x08020964
 800cc34:	08020a38 	.word	0x08020a38
 800cc38:	080209ac 	.word	0x080209ac
 800cc3c:	20012338 	.word	0x20012338
 800cc40:	2001233c 	.word	0x2001233c
 800cc44:	08020a5c 	.word	0x08020a5c
 800cc48:	08020a78 	.word	0x08020a78
 800cc4c:	08020aa0 	.word	0x08020aa0
 800cc50:	20012340 	.word	0x20012340

0800cc54 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800cc54:	b580      	push	{r7, lr}
 800cc56:	b088      	sub	sp, #32
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	6078      	str	r0, [r7, #4]
 800cc5c:	460b      	mov	r3, r1
 800cc5e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800cc60:	887b      	ldrh	r3, [r7, #2]
 800cc62:	3303      	adds	r3, #3
 800cc64:	b29b      	uxth	r3, r3
 800cc66:	f023 0303 	bic.w	r3, r3, #3
 800cc6a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800cc6c:	8bfb      	ldrh	r3, [r7, #30]
 800cc6e:	2b0b      	cmp	r3, #11
 800cc70:	d801      	bhi.n	800cc76 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800cc72:	230c      	movs	r3, #12
 800cc74:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800cc76:	8bfb      	ldrh	r3, [r7, #30]
 800cc78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cc7c:	d803      	bhi.n	800cc86 <mem_trim+0x32>
 800cc7e:	8bfa      	ldrh	r2, [r7, #30]
 800cc80:	887b      	ldrh	r3, [r7, #2]
 800cc82:	429a      	cmp	r2, r3
 800cc84:	d201      	bcs.n	800cc8a <mem_trim+0x36>
    return NULL;
 800cc86:	2300      	movs	r3, #0
 800cc88:	e0cc      	b.n	800ce24 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800cc8a:	4b68      	ldr	r3, [pc, #416]	@ (800ce2c <mem_trim+0x1d8>)
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	687a      	ldr	r2, [r7, #4]
 800cc90:	429a      	cmp	r2, r3
 800cc92:	d304      	bcc.n	800cc9e <mem_trim+0x4a>
 800cc94:	4b66      	ldr	r3, [pc, #408]	@ (800ce30 <mem_trim+0x1dc>)
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	687a      	ldr	r2, [r7, #4]
 800cc9a:	429a      	cmp	r2, r3
 800cc9c:	d306      	bcc.n	800ccac <mem_trim+0x58>
 800cc9e:	4b65      	ldr	r3, [pc, #404]	@ (800ce34 <mem_trim+0x1e0>)
 800cca0:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800cca4:	4964      	ldr	r1, [pc, #400]	@ (800ce38 <mem_trim+0x1e4>)
 800cca6:	4865      	ldr	r0, [pc, #404]	@ (800ce3c <mem_trim+0x1e8>)
 800cca8:	f00a ff90 	bl	8017bcc <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800ccac:	4b5f      	ldr	r3, [pc, #380]	@ (800ce2c <mem_trim+0x1d8>)
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	687a      	ldr	r2, [r7, #4]
 800ccb2:	429a      	cmp	r2, r3
 800ccb4:	d304      	bcc.n	800ccc0 <mem_trim+0x6c>
 800ccb6:	4b5e      	ldr	r3, [pc, #376]	@ (800ce30 <mem_trim+0x1dc>)
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	687a      	ldr	r2, [r7, #4]
 800ccbc:	429a      	cmp	r2, r3
 800ccbe:	d301      	bcc.n	800ccc4 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	e0af      	b.n	800ce24 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	3b08      	subs	r3, #8
 800ccc8:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800ccca:	69b8      	ldr	r0, [r7, #24]
 800cccc:	f7ff fe2c 	bl	800c928 <mem_to_ptr>
 800ccd0:	4603      	mov	r3, r0
 800ccd2:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800ccd4:	69bb      	ldr	r3, [r7, #24]
 800ccd6:	881a      	ldrh	r2, [r3, #0]
 800ccd8:	8afb      	ldrh	r3, [r7, #22]
 800ccda:	1ad3      	subs	r3, r2, r3
 800ccdc:	b29b      	uxth	r3, r3
 800ccde:	3b08      	subs	r3, #8
 800cce0:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800cce2:	8bfa      	ldrh	r2, [r7, #30]
 800cce4:	8abb      	ldrh	r3, [r7, #20]
 800cce6:	429a      	cmp	r2, r3
 800cce8:	d906      	bls.n	800ccf8 <mem_trim+0xa4>
 800ccea:	4b52      	ldr	r3, [pc, #328]	@ (800ce34 <mem_trim+0x1e0>)
 800ccec:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800ccf0:	4953      	ldr	r1, [pc, #332]	@ (800ce40 <mem_trim+0x1ec>)
 800ccf2:	4852      	ldr	r0, [pc, #328]	@ (800ce3c <mem_trim+0x1e8>)
 800ccf4:	f00a ff6a 	bl	8017bcc <iprintf>
  if (newsize > size) {
 800ccf8:	8bfa      	ldrh	r2, [r7, #30]
 800ccfa:	8abb      	ldrh	r3, [r7, #20]
 800ccfc:	429a      	cmp	r2, r3
 800ccfe:	d901      	bls.n	800cd04 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800cd00:	2300      	movs	r3, #0
 800cd02:	e08f      	b.n	800ce24 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800cd04:	8bfa      	ldrh	r2, [r7, #30]
 800cd06:	8abb      	ldrh	r3, [r7, #20]
 800cd08:	429a      	cmp	r2, r3
 800cd0a:	d101      	bne.n	800cd10 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	e089      	b.n	800ce24 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800cd10:	69bb      	ldr	r3, [r7, #24]
 800cd12:	881b      	ldrh	r3, [r3, #0]
 800cd14:	4618      	mov	r0, r3
 800cd16:	f7ff fdf5 	bl	800c904 <ptr_to_mem>
 800cd1a:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800cd1c:	693b      	ldr	r3, [r7, #16]
 800cd1e:	791b      	ldrb	r3, [r3, #4]
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d13f      	bne.n	800cda4 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800cd24:	69bb      	ldr	r3, [r7, #24]
 800cd26:	881b      	ldrh	r3, [r3, #0]
 800cd28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cd2c:	d106      	bne.n	800cd3c <mem_trim+0xe8>
 800cd2e:	4b41      	ldr	r3, [pc, #260]	@ (800ce34 <mem_trim+0x1e0>)
 800cd30:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800cd34:	4943      	ldr	r1, [pc, #268]	@ (800ce44 <mem_trim+0x1f0>)
 800cd36:	4841      	ldr	r0, [pc, #260]	@ (800ce3c <mem_trim+0x1e8>)
 800cd38:	f00a ff48 	bl	8017bcc <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800cd3c:	693b      	ldr	r3, [r7, #16]
 800cd3e:	881b      	ldrh	r3, [r3, #0]
 800cd40:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800cd42:	8afa      	ldrh	r2, [r7, #22]
 800cd44:	8bfb      	ldrh	r3, [r7, #30]
 800cd46:	4413      	add	r3, r2
 800cd48:	b29b      	uxth	r3, r3
 800cd4a:	3308      	adds	r3, #8
 800cd4c:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800cd4e:	4b3e      	ldr	r3, [pc, #248]	@ (800ce48 <mem_trim+0x1f4>)
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	693a      	ldr	r2, [r7, #16]
 800cd54:	429a      	cmp	r2, r3
 800cd56:	d106      	bne.n	800cd66 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800cd58:	89fb      	ldrh	r3, [r7, #14]
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	f7ff fdd2 	bl	800c904 <ptr_to_mem>
 800cd60:	4603      	mov	r3, r0
 800cd62:	4a39      	ldr	r2, [pc, #228]	@ (800ce48 <mem_trim+0x1f4>)
 800cd64:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800cd66:	89fb      	ldrh	r3, [r7, #14]
 800cd68:	4618      	mov	r0, r3
 800cd6a:	f7ff fdcb 	bl	800c904 <ptr_to_mem>
 800cd6e:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800cd70:	693b      	ldr	r3, [r7, #16]
 800cd72:	2200      	movs	r2, #0
 800cd74:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800cd76:	693b      	ldr	r3, [r7, #16]
 800cd78:	89ba      	ldrh	r2, [r7, #12]
 800cd7a:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800cd7c:	693b      	ldr	r3, [r7, #16]
 800cd7e:	8afa      	ldrh	r2, [r7, #22]
 800cd80:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800cd82:	69bb      	ldr	r3, [r7, #24]
 800cd84:	89fa      	ldrh	r2, [r7, #14]
 800cd86:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800cd88:	693b      	ldr	r3, [r7, #16]
 800cd8a:	881b      	ldrh	r3, [r3, #0]
 800cd8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cd90:	d047      	beq.n	800ce22 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800cd92:	693b      	ldr	r3, [r7, #16]
 800cd94:	881b      	ldrh	r3, [r3, #0]
 800cd96:	4618      	mov	r0, r3
 800cd98:	f7ff fdb4 	bl	800c904 <ptr_to_mem>
 800cd9c:	4602      	mov	r2, r0
 800cd9e:	89fb      	ldrh	r3, [r7, #14]
 800cda0:	8053      	strh	r3, [r2, #2]
 800cda2:	e03e      	b.n	800ce22 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800cda4:	8bfb      	ldrh	r3, [r7, #30]
 800cda6:	f103 0214 	add.w	r2, r3, #20
 800cdaa:	8abb      	ldrh	r3, [r7, #20]
 800cdac:	429a      	cmp	r2, r3
 800cdae:	d838      	bhi.n	800ce22 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800cdb0:	8afa      	ldrh	r2, [r7, #22]
 800cdb2:	8bfb      	ldrh	r3, [r7, #30]
 800cdb4:	4413      	add	r3, r2
 800cdb6:	b29b      	uxth	r3, r3
 800cdb8:	3308      	adds	r3, #8
 800cdba:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800cdbc:	69bb      	ldr	r3, [r7, #24]
 800cdbe:	881b      	ldrh	r3, [r3, #0]
 800cdc0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cdc4:	d106      	bne.n	800cdd4 <mem_trim+0x180>
 800cdc6:	4b1b      	ldr	r3, [pc, #108]	@ (800ce34 <mem_trim+0x1e0>)
 800cdc8:	f240 3216 	movw	r2, #790	@ 0x316
 800cdcc:	491d      	ldr	r1, [pc, #116]	@ (800ce44 <mem_trim+0x1f0>)
 800cdce:	481b      	ldr	r0, [pc, #108]	@ (800ce3c <mem_trim+0x1e8>)
 800cdd0:	f00a fefc 	bl	8017bcc <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800cdd4:	89fb      	ldrh	r3, [r7, #14]
 800cdd6:	4618      	mov	r0, r3
 800cdd8:	f7ff fd94 	bl	800c904 <ptr_to_mem>
 800cddc:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800cdde:	4b1a      	ldr	r3, [pc, #104]	@ (800ce48 <mem_trim+0x1f4>)
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	693a      	ldr	r2, [r7, #16]
 800cde4:	429a      	cmp	r2, r3
 800cde6:	d202      	bcs.n	800cdee <mem_trim+0x19a>
      lfree = mem2;
 800cde8:	4a17      	ldr	r2, [pc, #92]	@ (800ce48 <mem_trim+0x1f4>)
 800cdea:	693b      	ldr	r3, [r7, #16]
 800cdec:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800cdee:	693b      	ldr	r3, [r7, #16]
 800cdf0:	2200      	movs	r2, #0
 800cdf2:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800cdf4:	69bb      	ldr	r3, [r7, #24]
 800cdf6:	881a      	ldrh	r2, [r3, #0]
 800cdf8:	693b      	ldr	r3, [r7, #16]
 800cdfa:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800cdfc:	693b      	ldr	r3, [r7, #16]
 800cdfe:	8afa      	ldrh	r2, [r7, #22]
 800ce00:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800ce02:	69bb      	ldr	r3, [r7, #24]
 800ce04:	89fa      	ldrh	r2, [r7, #14]
 800ce06:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800ce08:	693b      	ldr	r3, [r7, #16]
 800ce0a:	881b      	ldrh	r3, [r3, #0]
 800ce0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ce10:	d007      	beq.n	800ce22 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800ce12:	693b      	ldr	r3, [r7, #16]
 800ce14:	881b      	ldrh	r3, [r3, #0]
 800ce16:	4618      	mov	r0, r3
 800ce18:	f7ff fd74 	bl	800c904 <ptr_to_mem>
 800ce1c:	4602      	mov	r2, r0
 800ce1e:	89fb      	ldrh	r3, [r7, #14]
 800ce20:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800ce22:	687b      	ldr	r3, [r7, #4]
}
 800ce24:	4618      	mov	r0, r3
 800ce26:	3720      	adds	r7, #32
 800ce28:	46bd      	mov	sp, r7
 800ce2a:	bd80      	pop	{r7, pc}
 800ce2c:	20012338 	.word	0x20012338
 800ce30:	2001233c 	.word	0x2001233c
 800ce34:	08020964 	.word	0x08020964
 800ce38:	08020ad4 	.word	0x08020ad4
 800ce3c:	080209ac 	.word	0x080209ac
 800ce40:	08020aec 	.word	0x08020aec
 800ce44:	08020b0c 	.word	0x08020b0c
 800ce48:	20012340 	.word	0x20012340

0800ce4c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800ce4c:	b580      	push	{r7, lr}
 800ce4e:	b088      	sub	sp, #32
 800ce50:	af00      	add	r7, sp, #0
 800ce52:	4603      	mov	r3, r0
 800ce54:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800ce56:	88fb      	ldrh	r3, [r7, #6]
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d101      	bne.n	800ce60 <mem_malloc+0x14>
    return NULL;
 800ce5c:	2300      	movs	r3, #0
 800ce5e:	e0d9      	b.n	800d014 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800ce60:	88fb      	ldrh	r3, [r7, #6]
 800ce62:	3303      	adds	r3, #3
 800ce64:	b29b      	uxth	r3, r3
 800ce66:	f023 0303 	bic.w	r3, r3, #3
 800ce6a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800ce6c:	8bbb      	ldrh	r3, [r7, #28]
 800ce6e:	2b0b      	cmp	r3, #11
 800ce70:	d801      	bhi.n	800ce76 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800ce72:	230c      	movs	r3, #12
 800ce74:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800ce76:	8bbb      	ldrh	r3, [r7, #28]
 800ce78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ce7c:	d803      	bhi.n	800ce86 <mem_malloc+0x3a>
 800ce7e:	8bba      	ldrh	r2, [r7, #28]
 800ce80:	88fb      	ldrh	r3, [r7, #6]
 800ce82:	429a      	cmp	r2, r3
 800ce84:	d201      	bcs.n	800ce8a <mem_malloc+0x3e>
    return NULL;
 800ce86:	2300      	movs	r3, #0
 800ce88:	e0c4      	b.n	800d014 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800ce8a:	4b64      	ldr	r3, [pc, #400]	@ (800d01c <mem_malloc+0x1d0>)
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	4618      	mov	r0, r3
 800ce90:	f7ff fd4a 	bl	800c928 <mem_to_ptr>
 800ce94:	4603      	mov	r3, r0
 800ce96:	83fb      	strh	r3, [r7, #30]
 800ce98:	e0b4      	b.n	800d004 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800ce9a:	8bfb      	ldrh	r3, [r7, #30]
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	f7ff fd31 	bl	800c904 <ptr_to_mem>
 800cea2:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800cea4:	697b      	ldr	r3, [r7, #20]
 800cea6:	791b      	ldrb	r3, [r3, #4]
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	f040 80a4 	bne.w	800cff6 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800ceae:	697b      	ldr	r3, [r7, #20]
 800ceb0:	881b      	ldrh	r3, [r3, #0]
 800ceb2:	461a      	mov	r2, r3
 800ceb4:	8bfb      	ldrh	r3, [r7, #30]
 800ceb6:	1ad3      	subs	r3, r2, r3
 800ceb8:	f1a3 0208 	sub.w	r2, r3, #8
 800cebc:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800cebe:	429a      	cmp	r2, r3
 800cec0:	f0c0 8099 	bcc.w	800cff6 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800cec4:	697b      	ldr	r3, [r7, #20]
 800cec6:	881b      	ldrh	r3, [r3, #0]
 800cec8:	461a      	mov	r2, r3
 800ceca:	8bfb      	ldrh	r3, [r7, #30]
 800cecc:	1ad3      	subs	r3, r2, r3
 800cece:	f1a3 0208 	sub.w	r2, r3, #8
 800ced2:	8bbb      	ldrh	r3, [r7, #28]
 800ced4:	3314      	adds	r3, #20
 800ced6:	429a      	cmp	r2, r3
 800ced8:	d333      	bcc.n	800cf42 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800ceda:	8bfa      	ldrh	r2, [r7, #30]
 800cedc:	8bbb      	ldrh	r3, [r7, #28]
 800cede:	4413      	add	r3, r2
 800cee0:	b29b      	uxth	r3, r3
 800cee2:	3308      	adds	r3, #8
 800cee4:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800cee6:	8a7b      	ldrh	r3, [r7, #18]
 800cee8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ceec:	d106      	bne.n	800cefc <mem_malloc+0xb0>
 800ceee:	4b4c      	ldr	r3, [pc, #304]	@ (800d020 <mem_malloc+0x1d4>)
 800cef0:	f240 3287 	movw	r2, #903	@ 0x387
 800cef4:	494b      	ldr	r1, [pc, #300]	@ (800d024 <mem_malloc+0x1d8>)
 800cef6:	484c      	ldr	r0, [pc, #304]	@ (800d028 <mem_malloc+0x1dc>)
 800cef8:	f00a fe68 	bl	8017bcc <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800cefc:	8a7b      	ldrh	r3, [r7, #18]
 800cefe:	4618      	mov	r0, r3
 800cf00:	f7ff fd00 	bl	800c904 <ptr_to_mem>
 800cf04:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	2200      	movs	r2, #0
 800cf0a:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800cf0c:	697b      	ldr	r3, [r7, #20]
 800cf0e:	881a      	ldrh	r2, [r3, #0]
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	8bfa      	ldrh	r2, [r7, #30]
 800cf18:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800cf1a:	697b      	ldr	r3, [r7, #20]
 800cf1c:	8a7a      	ldrh	r2, [r7, #18]
 800cf1e:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800cf20:	697b      	ldr	r3, [r7, #20]
 800cf22:	2201      	movs	r2, #1
 800cf24:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	881b      	ldrh	r3, [r3, #0]
 800cf2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cf2e:	d00b      	beq.n	800cf48 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	881b      	ldrh	r3, [r3, #0]
 800cf34:	4618      	mov	r0, r3
 800cf36:	f7ff fce5 	bl	800c904 <ptr_to_mem>
 800cf3a:	4602      	mov	r2, r0
 800cf3c:	8a7b      	ldrh	r3, [r7, #18]
 800cf3e:	8053      	strh	r3, [r2, #2]
 800cf40:	e002      	b.n	800cf48 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800cf42:	697b      	ldr	r3, [r7, #20]
 800cf44:	2201      	movs	r2, #1
 800cf46:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800cf48:	4b34      	ldr	r3, [pc, #208]	@ (800d01c <mem_malloc+0x1d0>)
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	697a      	ldr	r2, [r7, #20]
 800cf4e:	429a      	cmp	r2, r3
 800cf50:	d127      	bne.n	800cfa2 <mem_malloc+0x156>
          struct mem *cur = lfree;
 800cf52:	4b32      	ldr	r3, [pc, #200]	@ (800d01c <mem_malloc+0x1d0>)
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800cf58:	e005      	b.n	800cf66 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800cf5a:	69bb      	ldr	r3, [r7, #24]
 800cf5c:	881b      	ldrh	r3, [r3, #0]
 800cf5e:	4618      	mov	r0, r3
 800cf60:	f7ff fcd0 	bl	800c904 <ptr_to_mem>
 800cf64:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800cf66:	69bb      	ldr	r3, [r7, #24]
 800cf68:	791b      	ldrb	r3, [r3, #4]
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d004      	beq.n	800cf78 <mem_malloc+0x12c>
 800cf6e:	4b2f      	ldr	r3, [pc, #188]	@ (800d02c <mem_malloc+0x1e0>)
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	69ba      	ldr	r2, [r7, #24]
 800cf74:	429a      	cmp	r2, r3
 800cf76:	d1f0      	bne.n	800cf5a <mem_malloc+0x10e>
          }
          lfree = cur;
 800cf78:	4a28      	ldr	r2, [pc, #160]	@ (800d01c <mem_malloc+0x1d0>)
 800cf7a:	69bb      	ldr	r3, [r7, #24]
 800cf7c:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800cf7e:	4b27      	ldr	r3, [pc, #156]	@ (800d01c <mem_malloc+0x1d0>)
 800cf80:	681a      	ldr	r2, [r3, #0]
 800cf82:	4b2a      	ldr	r3, [pc, #168]	@ (800d02c <mem_malloc+0x1e0>)
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	429a      	cmp	r2, r3
 800cf88:	d00b      	beq.n	800cfa2 <mem_malloc+0x156>
 800cf8a:	4b24      	ldr	r3, [pc, #144]	@ (800d01c <mem_malloc+0x1d0>)
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	791b      	ldrb	r3, [r3, #4]
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d006      	beq.n	800cfa2 <mem_malloc+0x156>
 800cf94:	4b22      	ldr	r3, [pc, #136]	@ (800d020 <mem_malloc+0x1d4>)
 800cf96:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800cf9a:	4925      	ldr	r1, [pc, #148]	@ (800d030 <mem_malloc+0x1e4>)
 800cf9c:	4822      	ldr	r0, [pc, #136]	@ (800d028 <mem_malloc+0x1dc>)
 800cf9e:	f00a fe15 	bl	8017bcc <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800cfa2:	8bba      	ldrh	r2, [r7, #28]
 800cfa4:	697b      	ldr	r3, [r7, #20]
 800cfa6:	4413      	add	r3, r2
 800cfa8:	3308      	adds	r3, #8
 800cfaa:	4a20      	ldr	r2, [pc, #128]	@ (800d02c <mem_malloc+0x1e0>)
 800cfac:	6812      	ldr	r2, [r2, #0]
 800cfae:	4293      	cmp	r3, r2
 800cfb0:	d906      	bls.n	800cfc0 <mem_malloc+0x174>
 800cfb2:	4b1b      	ldr	r3, [pc, #108]	@ (800d020 <mem_malloc+0x1d4>)
 800cfb4:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800cfb8:	491e      	ldr	r1, [pc, #120]	@ (800d034 <mem_malloc+0x1e8>)
 800cfba:	481b      	ldr	r0, [pc, #108]	@ (800d028 <mem_malloc+0x1dc>)
 800cfbc:	f00a fe06 	bl	8017bcc <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800cfc0:	697b      	ldr	r3, [r7, #20]
 800cfc2:	f003 0303 	and.w	r3, r3, #3
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d006      	beq.n	800cfd8 <mem_malloc+0x18c>
 800cfca:	4b15      	ldr	r3, [pc, #84]	@ (800d020 <mem_malloc+0x1d4>)
 800cfcc:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800cfd0:	4919      	ldr	r1, [pc, #100]	@ (800d038 <mem_malloc+0x1ec>)
 800cfd2:	4815      	ldr	r0, [pc, #84]	@ (800d028 <mem_malloc+0x1dc>)
 800cfd4:	f00a fdfa 	bl	8017bcc <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800cfd8:	697b      	ldr	r3, [r7, #20]
 800cfda:	f003 0303 	and.w	r3, r3, #3
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d006      	beq.n	800cff0 <mem_malloc+0x1a4>
 800cfe2:	4b0f      	ldr	r3, [pc, #60]	@ (800d020 <mem_malloc+0x1d4>)
 800cfe4:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800cfe8:	4914      	ldr	r1, [pc, #80]	@ (800d03c <mem_malloc+0x1f0>)
 800cfea:	480f      	ldr	r0, [pc, #60]	@ (800d028 <mem_malloc+0x1dc>)
 800cfec:	f00a fdee 	bl	8017bcc <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800cff0:	697b      	ldr	r3, [r7, #20]
 800cff2:	3308      	adds	r3, #8
 800cff4:	e00e      	b.n	800d014 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800cff6:	8bfb      	ldrh	r3, [r7, #30]
 800cff8:	4618      	mov	r0, r3
 800cffa:	f7ff fc83 	bl	800c904 <ptr_to_mem>
 800cffe:	4603      	mov	r3, r0
 800d000:	881b      	ldrh	r3, [r3, #0]
 800d002:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800d004:	8bfa      	ldrh	r2, [r7, #30]
 800d006:	8bbb      	ldrh	r3, [r7, #28]
 800d008:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 800d00c:	429a      	cmp	r2, r3
 800d00e:	f4ff af44 	bcc.w	800ce9a <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800d012:	2300      	movs	r3, #0
}
 800d014:	4618      	mov	r0, r3
 800d016:	3720      	adds	r7, #32
 800d018:	46bd      	mov	sp, r7
 800d01a:	bd80      	pop	{r7, pc}
 800d01c:	20012340 	.word	0x20012340
 800d020:	08020964 	.word	0x08020964
 800d024:	08020b0c 	.word	0x08020b0c
 800d028:	080209ac 	.word	0x080209ac
 800d02c:	2001233c 	.word	0x2001233c
 800d030:	08020b20 	.word	0x08020b20
 800d034:	08020b3c 	.word	0x08020b3c
 800d038:	08020b6c 	.word	0x08020b6c
 800d03c:	08020b9c 	.word	0x08020b9c

0800d040 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800d040:	b480      	push	{r7}
 800d042:	b085      	sub	sp, #20
 800d044:	af00      	add	r7, sp, #0
 800d046:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	689b      	ldr	r3, [r3, #8]
 800d04c:	2200      	movs	r2, #0
 800d04e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	685b      	ldr	r3, [r3, #4]
 800d054:	3303      	adds	r3, #3
 800d056:	f023 0303 	bic.w	r3, r3, #3
 800d05a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800d05c:	2300      	movs	r3, #0
 800d05e:	60fb      	str	r3, [r7, #12]
 800d060:	e011      	b.n	800d086 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	689b      	ldr	r3, [r3, #8]
 800d066:	681a      	ldr	r2, [r3, #0]
 800d068:	68bb      	ldr	r3, [r7, #8]
 800d06a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	689b      	ldr	r3, [r3, #8]
 800d070:	68ba      	ldr	r2, [r7, #8]
 800d072:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	881b      	ldrh	r3, [r3, #0]
 800d078:	461a      	mov	r2, r3
 800d07a:	68bb      	ldr	r3, [r7, #8]
 800d07c:	4413      	add	r3, r2
 800d07e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	3301      	adds	r3, #1
 800d084:	60fb      	str	r3, [r7, #12]
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	885b      	ldrh	r3, [r3, #2]
 800d08a:	461a      	mov	r2, r3
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	4293      	cmp	r3, r2
 800d090:	dbe7      	blt.n	800d062 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800d092:	bf00      	nop
 800d094:	bf00      	nop
 800d096:	3714      	adds	r7, #20
 800d098:	46bd      	mov	sp, r7
 800d09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d09e:	4770      	bx	lr

0800d0a0 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800d0a0:	b580      	push	{r7, lr}
 800d0a2:	b082      	sub	sp, #8
 800d0a4:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800d0a6:	2300      	movs	r3, #0
 800d0a8:	80fb      	strh	r3, [r7, #6]
 800d0aa:	e009      	b.n	800d0c0 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800d0ac:	88fb      	ldrh	r3, [r7, #6]
 800d0ae:	4a08      	ldr	r2, [pc, #32]	@ (800d0d0 <memp_init+0x30>)
 800d0b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d0b4:	4618      	mov	r0, r3
 800d0b6:	f7ff ffc3 	bl	800d040 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800d0ba:	88fb      	ldrh	r3, [r7, #6]
 800d0bc:	3301      	adds	r3, #1
 800d0be:	80fb      	strh	r3, [r7, #6]
 800d0c0:	88fb      	ldrh	r3, [r7, #6]
 800d0c2:	2b08      	cmp	r3, #8
 800d0c4:	d9f2      	bls.n	800d0ac <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800d0c6:	bf00      	nop
 800d0c8:	bf00      	nop
 800d0ca:	3708      	adds	r7, #8
 800d0cc:	46bd      	mov	sp, r7
 800d0ce:	bd80      	pop	{r7, pc}
 800d0d0:	08023380 	.word	0x08023380

0800d0d4 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800d0d4:	b580      	push	{r7, lr}
 800d0d6:	b084      	sub	sp, #16
 800d0d8:	af00      	add	r7, sp, #0
 800d0da:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	689b      	ldr	r3, [r3, #8]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d012      	beq.n	800d110 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	689b      	ldr	r3, [r3, #8]
 800d0ee:	68fa      	ldr	r2, [r7, #12]
 800d0f0:	6812      	ldr	r2, [r2, #0]
 800d0f2:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	f003 0303 	and.w	r3, r3, #3
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d006      	beq.n	800d10c <do_memp_malloc_pool+0x38>
 800d0fe:	4b07      	ldr	r3, [pc, #28]	@ (800d11c <do_memp_malloc_pool+0x48>)
 800d100:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800d104:	4906      	ldr	r1, [pc, #24]	@ (800d120 <do_memp_malloc_pool+0x4c>)
 800d106:	4807      	ldr	r0, [pc, #28]	@ (800d124 <do_memp_malloc_pool+0x50>)
 800d108:	f00a fd60 	bl	8017bcc <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	e000      	b.n	800d112 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800d110:	2300      	movs	r3, #0
}
 800d112:	4618      	mov	r0, r3
 800d114:	3710      	adds	r7, #16
 800d116:	46bd      	mov	sp, r7
 800d118:	bd80      	pop	{r7, pc}
 800d11a:	bf00      	nop
 800d11c:	08020bc0 	.word	0x08020bc0
 800d120:	08020bf0 	.word	0x08020bf0
 800d124:	08020c14 	.word	0x08020c14

0800d128 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800d128:	b580      	push	{r7, lr}
 800d12a:	b082      	sub	sp, #8
 800d12c:	af00      	add	r7, sp, #0
 800d12e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	2b00      	cmp	r3, #0
 800d134:	d106      	bne.n	800d144 <memp_malloc_pool+0x1c>
 800d136:	4b0a      	ldr	r3, [pc, #40]	@ (800d160 <memp_malloc_pool+0x38>)
 800d138:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 800d13c:	4909      	ldr	r1, [pc, #36]	@ (800d164 <memp_malloc_pool+0x3c>)
 800d13e:	480a      	ldr	r0, [pc, #40]	@ (800d168 <memp_malloc_pool+0x40>)
 800d140:	f00a fd44 	bl	8017bcc <iprintf>
  if (desc == NULL) {
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	2b00      	cmp	r3, #0
 800d148:	d101      	bne.n	800d14e <memp_malloc_pool+0x26>
    return NULL;
 800d14a:	2300      	movs	r3, #0
 800d14c:	e003      	b.n	800d156 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800d14e:	6878      	ldr	r0, [r7, #4]
 800d150:	f7ff ffc0 	bl	800d0d4 <do_memp_malloc_pool>
 800d154:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800d156:	4618      	mov	r0, r3
 800d158:	3708      	adds	r7, #8
 800d15a:	46bd      	mov	sp, r7
 800d15c:	bd80      	pop	{r7, pc}
 800d15e:	bf00      	nop
 800d160:	08020bc0 	.word	0x08020bc0
 800d164:	08020c3c 	.word	0x08020c3c
 800d168:	08020c14 	.word	0x08020c14

0800d16c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800d16c:	b580      	push	{r7, lr}
 800d16e:	b084      	sub	sp, #16
 800d170:	af00      	add	r7, sp, #0
 800d172:	4603      	mov	r3, r0
 800d174:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800d176:	79fb      	ldrb	r3, [r7, #7]
 800d178:	2b08      	cmp	r3, #8
 800d17a:	d908      	bls.n	800d18e <memp_malloc+0x22>
 800d17c:	4b0a      	ldr	r3, [pc, #40]	@ (800d1a8 <memp_malloc+0x3c>)
 800d17e:	f240 1257 	movw	r2, #343	@ 0x157
 800d182:	490a      	ldr	r1, [pc, #40]	@ (800d1ac <memp_malloc+0x40>)
 800d184:	480a      	ldr	r0, [pc, #40]	@ (800d1b0 <memp_malloc+0x44>)
 800d186:	f00a fd21 	bl	8017bcc <iprintf>
 800d18a:	2300      	movs	r3, #0
 800d18c:	e008      	b.n	800d1a0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800d18e:	79fb      	ldrb	r3, [r7, #7]
 800d190:	4a08      	ldr	r2, [pc, #32]	@ (800d1b4 <memp_malloc+0x48>)
 800d192:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d196:	4618      	mov	r0, r3
 800d198:	f7ff ff9c 	bl	800d0d4 <do_memp_malloc_pool>
 800d19c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800d19e:	68fb      	ldr	r3, [r7, #12]
}
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	3710      	adds	r7, #16
 800d1a4:	46bd      	mov	sp, r7
 800d1a6:	bd80      	pop	{r7, pc}
 800d1a8:	08020bc0 	.word	0x08020bc0
 800d1ac:	08020c50 	.word	0x08020c50
 800d1b0:	08020c14 	.word	0x08020c14
 800d1b4:	08023380 	.word	0x08023380

0800d1b8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800d1b8:	b580      	push	{r7, lr}
 800d1ba:	b084      	sub	sp, #16
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	6078      	str	r0, [r7, #4]
 800d1c0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800d1c2:	683b      	ldr	r3, [r7, #0]
 800d1c4:	f003 0303 	and.w	r3, r3, #3
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d006      	beq.n	800d1da <do_memp_free_pool+0x22>
 800d1cc:	4b0a      	ldr	r3, [pc, #40]	@ (800d1f8 <do_memp_free_pool+0x40>)
 800d1ce:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800d1d2:	490a      	ldr	r1, [pc, #40]	@ (800d1fc <do_memp_free_pool+0x44>)
 800d1d4:	480a      	ldr	r0, [pc, #40]	@ (800d200 <do_memp_free_pool+0x48>)
 800d1d6:	f00a fcf9 	bl	8017bcc <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800d1da:	683b      	ldr	r3, [r7, #0]
 800d1dc:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	689b      	ldr	r3, [r3, #8]
 800d1e2:	681a      	ldr	r2, [r3, #0]
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	689b      	ldr	r3, [r3, #8]
 800d1ec:	68fa      	ldr	r2, [r7, #12]
 800d1ee:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800d1f0:	bf00      	nop
 800d1f2:	3710      	adds	r7, #16
 800d1f4:	46bd      	mov	sp, r7
 800d1f6:	bd80      	pop	{r7, pc}
 800d1f8:	08020bc0 	.word	0x08020bc0
 800d1fc:	08020c70 	.word	0x08020c70
 800d200:	08020c14 	.word	0x08020c14

0800d204 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800d204:	b580      	push	{r7, lr}
 800d206:	b082      	sub	sp, #8
 800d208:	af00      	add	r7, sp, #0
 800d20a:	6078      	str	r0, [r7, #4]
 800d20c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	2b00      	cmp	r3, #0
 800d212:	d106      	bne.n	800d222 <memp_free_pool+0x1e>
 800d214:	4b0a      	ldr	r3, [pc, #40]	@ (800d240 <memp_free_pool+0x3c>)
 800d216:	f240 1295 	movw	r2, #405	@ 0x195
 800d21a:	490a      	ldr	r1, [pc, #40]	@ (800d244 <memp_free_pool+0x40>)
 800d21c:	480a      	ldr	r0, [pc, #40]	@ (800d248 <memp_free_pool+0x44>)
 800d21e:	f00a fcd5 	bl	8017bcc <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	2b00      	cmp	r3, #0
 800d226:	d007      	beq.n	800d238 <memp_free_pool+0x34>
 800d228:	683b      	ldr	r3, [r7, #0]
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d004      	beq.n	800d238 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800d22e:	6839      	ldr	r1, [r7, #0]
 800d230:	6878      	ldr	r0, [r7, #4]
 800d232:	f7ff ffc1 	bl	800d1b8 <do_memp_free_pool>
 800d236:	e000      	b.n	800d23a <memp_free_pool+0x36>
    return;
 800d238:	bf00      	nop
}
 800d23a:	3708      	adds	r7, #8
 800d23c:	46bd      	mov	sp, r7
 800d23e:	bd80      	pop	{r7, pc}
 800d240:	08020bc0 	.word	0x08020bc0
 800d244:	08020c3c 	.word	0x08020c3c
 800d248:	08020c14 	.word	0x08020c14

0800d24c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800d24c:	b580      	push	{r7, lr}
 800d24e:	b082      	sub	sp, #8
 800d250:	af00      	add	r7, sp, #0
 800d252:	4603      	mov	r3, r0
 800d254:	6039      	str	r1, [r7, #0]
 800d256:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800d258:	79fb      	ldrb	r3, [r7, #7]
 800d25a:	2b08      	cmp	r3, #8
 800d25c:	d907      	bls.n	800d26e <memp_free+0x22>
 800d25e:	4b0c      	ldr	r3, [pc, #48]	@ (800d290 <memp_free+0x44>)
 800d260:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800d264:	490b      	ldr	r1, [pc, #44]	@ (800d294 <memp_free+0x48>)
 800d266:	480c      	ldr	r0, [pc, #48]	@ (800d298 <memp_free+0x4c>)
 800d268:	f00a fcb0 	bl	8017bcc <iprintf>
 800d26c:	e00c      	b.n	800d288 <memp_free+0x3c>

  if (mem == NULL) {
 800d26e:	683b      	ldr	r3, [r7, #0]
 800d270:	2b00      	cmp	r3, #0
 800d272:	d008      	beq.n	800d286 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800d274:	79fb      	ldrb	r3, [r7, #7]
 800d276:	4a09      	ldr	r2, [pc, #36]	@ (800d29c <memp_free+0x50>)
 800d278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d27c:	6839      	ldr	r1, [r7, #0]
 800d27e:	4618      	mov	r0, r3
 800d280:	f7ff ff9a 	bl	800d1b8 <do_memp_free_pool>
 800d284:	e000      	b.n	800d288 <memp_free+0x3c>
    return;
 800d286:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800d288:	3708      	adds	r7, #8
 800d28a:	46bd      	mov	sp, r7
 800d28c:	bd80      	pop	{r7, pc}
 800d28e:	bf00      	nop
 800d290:	08020bc0 	.word	0x08020bc0
 800d294:	08020c90 	.word	0x08020c90
 800d298:	08020c14 	.word	0x08020c14
 800d29c:	08023380 	.word	0x08023380

0800d2a0 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800d2a0:	b480      	push	{r7}
 800d2a2:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800d2a4:	bf00      	nop
 800d2a6:	46bd      	mov	sp, r7
 800d2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ac:	4770      	bx	lr
	...

0800d2b0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800d2b0:	b580      	push	{r7, lr}
 800d2b2:	b086      	sub	sp, #24
 800d2b4:	af00      	add	r7, sp, #0
 800d2b6:	60f8      	str	r0, [r7, #12]
 800d2b8:	60b9      	str	r1, [r7, #8]
 800d2ba:	607a      	str	r2, [r7, #4]
 800d2bc:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d108      	bne.n	800d2d6 <netif_add+0x26>
 800d2c4:	4b57      	ldr	r3, [pc, #348]	@ (800d424 <netif_add+0x174>)
 800d2c6:	f240 1227 	movw	r2, #295	@ 0x127
 800d2ca:	4957      	ldr	r1, [pc, #348]	@ (800d428 <netif_add+0x178>)
 800d2cc:	4857      	ldr	r0, [pc, #348]	@ (800d42c <netif_add+0x17c>)
 800d2ce:	f00a fc7d 	bl	8017bcc <iprintf>
 800d2d2:	2300      	movs	r3, #0
 800d2d4:	e0a2      	b.n	800d41c <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800d2d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d108      	bne.n	800d2ee <netif_add+0x3e>
 800d2dc:	4b51      	ldr	r3, [pc, #324]	@ (800d424 <netif_add+0x174>)
 800d2de:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800d2e2:	4953      	ldr	r1, [pc, #332]	@ (800d430 <netif_add+0x180>)
 800d2e4:	4851      	ldr	r0, [pc, #324]	@ (800d42c <netif_add+0x17c>)
 800d2e6:	f00a fc71 	bl	8017bcc <iprintf>
 800d2ea:	2300      	movs	r3, #0
 800d2ec:	e096      	b.n	800d41c <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800d2ee:	68bb      	ldr	r3, [r7, #8]
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d101      	bne.n	800d2f8 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800d2f4:	4b4f      	ldr	r3, [pc, #316]	@ (800d434 <netif_add+0x184>)
 800d2f6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d101      	bne.n	800d302 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800d2fe:	4b4d      	ldr	r3, [pc, #308]	@ (800d434 <netif_add+0x184>)
 800d300:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800d302:	683b      	ldr	r3, [r7, #0]
 800d304:	2b00      	cmp	r3, #0
 800d306:	d101      	bne.n	800d30c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800d308:	4b4a      	ldr	r3, [pc, #296]	@ (800d434 <netif_add+0x184>)
 800d30a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	2200      	movs	r2, #0
 800d310:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	2200      	movs	r2, #0
 800d316:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	2200      	movs	r2, #0
 800d31c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	4a45      	ldr	r2, [pc, #276]	@ (800d438 <netif_add+0x188>)
 800d322:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	2200      	movs	r2, #0
 800d328:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	2200      	movs	r2, #0
 800d32e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	2200      	movs	r2, #0
 800d336:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	6a3a      	ldr	r2, [r7, #32]
 800d33c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800d33e:	4b3f      	ldr	r3, [pc, #252]	@ (800d43c <netif_add+0x18c>)
 800d340:	781a      	ldrb	r2, [r3, #0]
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d34c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800d34e:	683b      	ldr	r3, [r7, #0]
 800d350:	687a      	ldr	r2, [r7, #4]
 800d352:	68b9      	ldr	r1, [r7, #8]
 800d354:	68f8      	ldr	r0, [r7, #12]
 800d356:	f000 f913 	bl	800d580 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800d35a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d35c:	68f8      	ldr	r0, [r7, #12]
 800d35e:	4798      	blx	r3
 800d360:	4603      	mov	r3, r0
 800d362:	2b00      	cmp	r3, #0
 800d364:	d001      	beq.n	800d36a <netif_add+0xba>
    return NULL;
 800d366:	2300      	movs	r3, #0
 800d368:	e058      	b.n	800d41c <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d370:	2bff      	cmp	r3, #255	@ 0xff
 800d372:	d103      	bne.n	800d37c <netif_add+0xcc>
        netif->num = 0;
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	2200      	movs	r2, #0
 800d378:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 800d37c:	2300      	movs	r3, #0
 800d37e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800d380:	4b2f      	ldr	r3, [pc, #188]	@ (800d440 <netif_add+0x190>)
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	617b      	str	r3, [r7, #20]
 800d386:	e02b      	b.n	800d3e0 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800d388:	697a      	ldr	r2, [r7, #20]
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	429a      	cmp	r2, r3
 800d38e:	d106      	bne.n	800d39e <netif_add+0xee>
 800d390:	4b24      	ldr	r3, [pc, #144]	@ (800d424 <netif_add+0x174>)
 800d392:	f240 128b 	movw	r2, #395	@ 0x18b
 800d396:	492b      	ldr	r1, [pc, #172]	@ (800d444 <netif_add+0x194>)
 800d398:	4824      	ldr	r0, [pc, #144]	@ (800d42c <netif_add+0x17c>)
 800d39a:	f00a fc17 	bl	8017bcc <iprintf>
        num_netifs++;
 800d39e:	693b      	ldr	r3, [r7, #16]
 800d3a0:	3301      	adds	r3, #1
 800d3a2:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800d3a4:	693b      	ldr	r3, [r7, #16]
 800d3a6:	2bff      	cmp	r3, #255	@ 0xff
 800d3a8:	dd06      	ble.n	800d3b8 <netif_add+0x108>
 800d3aa:	4b1e      	ldr	r3, [pc, #120]	@ (800d424 <netif_add+0x174>)
 800d3ac:	f240 128d 	movw	r2, #397	@ 0x18d
 800d3b0:	4925      	ldr	r1, [pc, #148]	@ (800d448 <netif_add+0x198>)
 800d3b2:	481e      	ldr	r0, [pc, #120]	@ (800d42c <netif_add+0x17c>)
 800d3b4:	f00a fc0a 	bl	8017bcc <iprintf>
        if (netif2->num == netif->num) {
 800d3b8:	697b      	ldr	r3, [r7, #20]
 800d3ba:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d3c4:	429a      	cmp	r2, r3
 800d3c6:	d108      	bne.n	800d3da <netif_add+0x12a>
          netif->num++;
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d3ce:	3301      	adds	r3, #1
 800d3d0:	b2da      	uxtb	r2, r3
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 800d3d8:	e005      	b.n	800d3e6 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800d3da:	697b      	ldr	r3, [r7, #20]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	617b      	str	r3, [r7, #20]
 800d3e0:	697b      	ldr	r3, [r7, #20]
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d1d0      	bne.n	800d388 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800d3e6:	697b      	ldr	r3, [r7, #20]
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d1be      	bne.n	800d36a <netif_add+0xba>
  }
  if (netif->num == 254) {
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d3f2:	2bfe      	cmp	r3, #254	@ 0xfe
 800d3f4:	d103      	bne.n	800d3fe <netif_add+0x14e>
    netif_num = 0;
 800d3f6:	4b11      	ldr	r3, [pc, #68]	@ (800d43c <netif_add+0x18c>)
 800d3f8:	2200      	movs	r2, #0
 800d3fa:	701a      	strb	r2, [r3, #0]
 800d3fc:	e006      	b.n	800d40c <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d404:	3301      	adds	r3, #1
 800d406:	b2da      	uxtb	r2, r3
 800d408:	4b0c      	ldr	r3, [pc, #48]	@ (800d43c <netif_add+0x18c>)
 800d40a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800d40c:	4b0c      	ldr	r3, [pc, #48]	@ (800d440 <netif_add+0x190>)
 800d40e:	681a      	ldr	r2, [r3, #0]
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800d414:	4a0a      	ldr	r2, [pc, #40]	@ (800d440 <netif_add+0x190>)
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800d41a:	68fb      	ldr	r3, [r7, #12]
}
 800d41c:	4618      	mov	r0, r3
 800d41e:	3718      	adds	r7, #24
 800d420:	46bd      	mov	sp, r7
 800d422:	bd80      	pop	{r7, pc}
 800d424:	08020cac 	.word	0x08020cac
 800d428:	08020d40 	.word	0x08020d40
 800d42c:	08020cfc 	.word	0x08020cfc
 800d430:	08020d5c 	.word	0x08020d5c
 800d434:	080233ec 	.word	0x080233ec
 800d438:	0800d85b 	.word	0x0800d85b
 800d43c:	20015248 	.word	0x20015248
 800d440:	20015240 	.word	0x20015240
 800d444:	08020d80 	.word	0x08020d80
 800d448:	08020d94 	.word	0x08020d94

0800d44c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d44c:	b580      	push	{r7, lr}
 800d44e:	b082      	sub	sp, #8
 800d450:	af00      	add	r7, sp, #0
 800d452:	6078      	str	r0, [r7, #4]
 800d454:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800d456:	6839      	ldr	r1, [r7, #0]
 800d458:	6878      	ldr	r0, [r7, #4]
 800d45a:	f002 fcaf 	bl	800fdbc <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800d45e:	6839      	ldr	r1, [r7, #0]
 800d460:	6878      	ldr	r0, [r7, #4]
 800d462:	f007 f91f 	bl	80146a4 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800d466:	bf00      	nop
 800d468:	3708      	adds	r7, #8
 800d46a:	46bd      	mov	sp, r7
 800d46c:	bd80      	pop	{r7, pc}
	...

0800d470 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800d470:	b580      	push	{r7, lr}
 800d472:	b086      	sub	sp, #24
 800d474:	af00      	add	r7, sp, #0
 800d476:	60f8      	str	r0, [r7, #12]
 800d478:	60b9      	str	r1, [r7, #8]
 800d47a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800d47c:	68bb      	ldr	r3, [r7, #8]
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d106      	bne.n	800d490 <netif_do_set_ipaddr+0x20>
 800d482:	4b1d      	ldr	r3, [pc, #116]	@ (800d4f8 <netif_do_set_ipaddr+0x88>)
 800d484:	f240 12cb 	movw	r2, #459	@ 0x1cb
 800d488:	491c      	ldr	r1, [pc, #112]	@ (800d4fc <netif_do_set_ipaddr+0x8c>)
 800d48a:	481d      	ldr	r0, [pc, #116]	@ (800d500 <netif_do_set_ipaddr+0x90>)
 800d48c:	f00a fb9e 	bl	8017bcc <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	2b00      	cmp	r3, #0
 800d494:	d106      	bne.n	800d4a4 <netif_do_set_ipaddr+0x34>
 800d496:	4b18      	ldr	r3, [pc, #96]	@ (800d4f8 <netif_do_set_ipaddr+0x88>)
 800d498:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800d49c:	4917      	ldr	r1, [pc, #92]	@ (800d4fc <netif_do_set_ipaddr+0x8c>)
 800d49e:	4818      	ldr	r0, [pc, #96]	@ (800d500 <netif_do_set_ipaddr+0x90>)
 800d4a0:	f00a fb94 	bl	8017bcc <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800d4a4:	68bb      	ldr	r3, [r7, #8]
 800d4a6:	681a      	ldr	r2, [r3, #0]
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	3304      	adds	r3, #4
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	429a      	cmp	r2, r3
 800d4b0:	d01c      	beq.n	800d4ec <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800d4b2:	68bb      	ldr	r3, [r7, #8]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	3304      	adds	r3, #4
 800d4bc:	681a      	ldr	r2, [r3, #0]
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800d4c2:	f107 0314 	add.w	r3, r7, #20
 800d4c6:	4619      	mov	r1, r3
 800d4c8:	6878      	ldr	r0, [r7, #4]
 800d4ca:	f7ff ffbf 	bl	800d44c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800d4ce:	68bb      	ldr	r3, [r7, #8]
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d002      	beq.n	800d4da <netif_do_set_ipaddr+0x6a>
 800d4d4:	68bb      	ldr	r3, [r7, #8]
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	e000      	b.n	800d4dc <netif_do_set_ipaddr+0x6c>
 800d4da:	2300      	movs	r3, #0
 800d4dc:	68fa      	ldr	r2, [r7, #12]
 800d4de:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800d4e0:	2101      	movs	r1, #1
 800d4e2:	68f8      	ldr	r0, [r7, #12]
 800d4e4:	f000 f8d2 	bl	800d68c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800d4e8:	2301      	movs	r3, #1
 800d4ea:	e000      	b.n	800d4ee <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800d4ec:	2300      	movs	r3, #0
}
 800d4ee:	4618      	mov	r0, r3
 800d4f0:	3718      	adds	r7, #24
 800d4f2:	46bd      	mov	sp, r7
 800d4f4:	bd80      	pop	{r7, pc}
 800d4f6:	bf00      	nop
 800d4f8:	08020cac 	.word	0x08020cac
 800d4fc:	08020dc4 	.word	0x08020dc4
 800d500:	08020cfc 	.word	0x08020cfc

0800d504 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800d504:	b480      	push	{r7}
 800d506:	b085      	sub	sp, #20
 800d508:	af00      	add	r7, sp, #0
 800d50a:	60f8      	str	r0, [r7, #12]
 800d50c:	60b9      	str	r1, [r7, #8]
 800d50e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800d510:	68bb      	ldr	r3, [r7, #8]
 800d512:	681a      	ldr	r2, [r3, #0]
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	3308      	adds	r3, #8
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	429a      	cmp	r2, r3
 800d51c:	d00a      	beq.n	800d534 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800d51e:	68bb      	ldr	r3, [r7, #8]
 800d520:	2b00      	cmp	r3, #0
 800d522:	d002      	beq.n	800d52a <netif_do_set_netmask+0x26>
 800d524:	68bb      	ldr	r3, [r7, #8]
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	e000      	b.n	800d52c <netif_do_set_netmask+0x28>
 800d52a:	2300      	movs	r3, #0
 800d52c:	68fa      	ldr	r2, [r7, #12]
 800d52e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800d530:	2301      	movs	r3, #1
 800d532:	e000      	b.n	800d536 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800d534:	2300      	movs	r3, #0
}
 800d536:	4618      	mov	r0, r3
 800d538:	3714      	adds	r7, #20
 800d53a:	46bd      	mov	sp, r7
 800d53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d540:	4770      	bx	lr

0800d542 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800d542:	b480      	push	{r7}
 800d544:	b085      	sub	sp, #20
 800d546:	af00      	add	r7, sp, #0
 800d548:	60f8      	str	r0, [r7, #12]
 800d54a:	60b9      	str	r1, [r7, #8]
 800d54c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800d54e:	68bb      	ldr	r3, [r7, #8]
 800d550:	681a      	ldr	r2, [r3, #0]
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	330c      	adds	r3, #12
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	429a      	cmp	r2, r3
 800d55a:	d00a      	beq.n	800d572 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800d55c:	68bb      	ldr	r3, [r7, #8]
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d002      	beq.n	800d568 <netif_do_set_gw+0x26>
 800d562:	68bb      	ldr	r3, [r7, #8]
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	e000      	b.n	800d56a <netif_do_set_gw+0x28>
 800d568:	2300      	movs	r3, #0
 800d56a:	68fa      	ldr	r2, [r7, #12]
 800d56c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800d56e:	2301      	movs	r3, #1
 800d570:	e000      	b.n	800d574 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800d572:	2300      	movs	r3, #0
}
 800d574:	4618      	mov	r0, r3
 800d576:	3714      	adds	r7, #20
 800d578:	46bd      	mov	sp, r7
 800d57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d57e:	4770      	bx	lr

0800d580 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800d580:	b580      	push	{r7, lr}
 800d582:	b088      	sub	sp, #32
 800d584:	af00      	add	r7, sp, #0
 800d586:	60f8      	str	r0, [r7, #12]
 800d588:	60b9      	str	r1, [r7, #8]
 800d58a:	607a      	str	r2, [r7, #4]
 800d58c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800d58e:	2300      	movs	r3, #0
 800d590:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800d592:	2300      	movs	r3, #0
 800d594:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800d596:	68bb      	ldr	r3, [r7, #8]
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d101      	bne.n	800d5a0 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800d59c:	4b1c      	ldr	r3, [pc, #112]	@ (800d610 <netif_set_addr+0x90>)
 800d59e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d101      	bne.n	800d5aa <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800d5a6:	4b1a      	ldr	r3, [pc, #104]	@ (800d610 <netif_set_addr+0x90>)
 800d5a8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800d5aa:	683b      	ldr	r3, [r7, #0]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d101      	bne.n	800d5b4 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800d5b0:	4b17      	ldr	r3, [pc, #92]	@ (800d610 <netif_set_addr+0x90>)
 800d5b2:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800d5b4:	68bb      	ldr	r3, [r7, #8]
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d003      	beq.n	800d5c2 <netif_set_addr+0x42>
 800d5ba:	68bb      	ldr	r3, [r7, #8]
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d101      	bne.n	800d5c6 <netif_set_addr+0x46>
 800d5c2:	2301      	movs	r3, #1
 800d5c4:	e000      	b.n	800d5c8 <netif_set_addr+0x48>
 800d5c6:	2300      	movs	r3, #0
 800d5c8:	617b      	str	r3, [r7, #20]
  if (remove) {
 800d5ca:	697b      	ldr	r3, [r7, #20]
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d006      	beq.n	800d5de <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800d5d0:	f107 0310 	add.w	r3, r7, #16
 800d5d4:	461a      	mov	r2, r3
 800d5d6:	68b9      	ldr	r1, [r7, #8]
 800d5d8:	68f8      	ldr	r0, [r7, #12]
 800d5da:	f7ff ff49 	bl	800d470 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800d5de:	69fa      	ldr	r2, [r7, #28]
 800d5e0:	6879      	ldr	r1, [r7, #4]
 800d5e2:	68f8      	ldr	r0, [r7, #12]
 800d5e4:	f7ff ff8e 	bl	800d504 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800d5e8:	69ba      	ldr	r2, [r7, #24]
 800d5ea:	6839      	ldr	r1, [r7, #0]
 800d5ec:	68f8      	ldr	r0, [r7, #12]
 800d5ee:	f7ff ffa8 	bl	800d542 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800d5f2:	697b      	ldr	r3, [r7, #20]
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d106      	bne.n	800d606 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800d5f8:	f107 0310 	add.w	r3, r7, #16
 800d5fc:	461a      	mov	r2, r3
 800d5fe:	68b9      	ldr	r1, [r7, #8]
 800d600:	68f8      	ldr	r0, [r7, #12]
 800d602:	f7ff ff35 	bl	800d470 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800d606:	bf00      	nop
 800d608:	3720      	adds	r7, #32
 800d60a:	46bd      	mov	sp, r7
 800d60c:	bd80      	pop	{r7, pc}
 800d60e:	bf00      	nop
 800d610:	080233ec 	.word	0x080233ec

0800d614 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800d614:	b480      	push	{r7}
 800d616:	b083      	sub	sp, #12
 800d618:	af00      	add	r7, sp, #0
 800d61a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800d61c:	4a04      	ldr	r2, [pc, #16]	@ (800d630 <netif_set_default+0x1c>)
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800d622:	bf00      	nop
 800d624:	370c      	adds	r7, #12
 800d626:	46bd      	mov	sp, r7
 800d628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d62c:	4770      	bx	lr
 800d62e:	bf00      	nop
 800d630:	20015244 	.word	0x20015244

0800d634 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800d634:	b580      	push	{r7, lr}
 800d636:	b082      	sub	sp, #8
 800d638:	af00      	add	r7, sp, #0
 800d63a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d107      	bne.n	800d652 <netif_set_up+0x1e>
 800d642:	4b0f      	ldr	r3, [pc, #60]	@ (800d680 <netif_set_up+0x4c>)
 800d644:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800d648:	490e      	ldr	r1, [pc, #56]	@ (800d684 <netif_set_up+0x50>)
 800d64a:	480f      	ldr	r0, [pc, #60]	@ (800d688 <netif_set_up+0x54>)
 800d64c:	f00a fabe 	bl	8017bcc <iprintf>
 800d650:	e013      	b.n	800d67a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d658:	f003 0301 	and.w	r3, r3, #1
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d10c      	bne.n	800d67a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d666:	f043 0301 	orr.w	r3, r3, #1
 800d66a:	b2da      	uxtb	r2, r3
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800d672:	2103      	movs	r1, #3
 800d674:	6878      	ldr	r0, [r7, #4]
 800d676:	f000 f809 	bl	800d68c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800d67a:	3708      	adds	r7, #8
 800d67c:	46bd      	mov	sp, r7
 800d67e:	bd80      	pop	{r7, pc}
 800d680:	08020cac 	.word	0x08020cac
 800d684:	08020e34 	.word	0x08020e34
 800d688:	08020cfc 	.word	0x08020cfc

0800d68c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800d68c:	b580      	push	{r7, lr}
 800d68e:	b082      	sub	sp, #8
 800d690:	af00      	add	r7, sp, #0
 800d692:	6078      	str	r0, [r7, #4]
 800d694:	460b      	mov	r3, r1
 800d696:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d106      	bne.n	800d6ac <netif_issue_reports+0x20>
 800d69e:	4b18      	ldr	r3, [pc, #96]	@ (800d700 <netif_issue_reports+0x74>)
 800d6a0:	f240 326d 	movw	r2, #877	@ 0x36d
 800d6a4:	4917      	ldr	r1, [pc, #92]	@ (800d704 <netif_issue_reports+0x78>)
 800d6a6:	4818      	ldr	r0, [pc, #96]	@ (800d708 <netif_issue_reports+0x7c>)
 800d6a8:	f00a fa90 	bl	8017bcc <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d6b2:	f003 0304 	and.w	r3, r3, #4
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d01e      	beq.n	800d6f8 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d6c0:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d017      	beq.n	800d6f8 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800d6c8:	78fb      	ldrb	r3, [r7, #3]
 800d6ca:	f003 0301 	and.w	r3, r3, #1
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d013      	beq.n	800d6fa <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	3304      	adds	r3, #4
 800d6d6:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d00e      	beq.n	800d6fa <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d6e2:	f003 0308 	and.w	r3, r3, #8
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d007      	beq.n	800d6fa <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	3304      	adds	r3, #4
 800d6ee:	4619      	mov	r1, r3
 800d6f0:	6878      	ldr	r0, [r7, #4]
 800d6f2:	f007 ff41 	bl	8015578 <etharp_request>
 800d6f6:	e000      	b.n	800d6fa <netif_issue_reports+0x6e>
    return;
 800d6f8:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800d6fa:	3708      	adds	r7, #8
 800d6fc:	46bd      	mov	sp, r7
 800d6fe:	bd80      	pop	{r7, pc}
 800d700:	08020cac 	.word	0x08020cac
 800d704:	08020e50 	.word	0x08020e50
 800d708:	08020cfc 	.word	0x08020cfc

0800d70c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800d70c:	b580      	push	{r7, lr}
 800d70e:	b082      	sub	sp, #8
 800d710:	af00      	add	r7, sp, #0
 800d712:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	2b00      	cmp	r3, #0
 800d718:	d107      	bne.n	800d72a <netif_set_down+0x1e>
 800d71a:	4b12      	ldr	r3, [pc, #72]	@ (800d764 <netif_set_down+0x58>)
 800d71c:	f240 329b 	movw	r2, #923	@ 0x39b
 800d720:	4911      	ldr	r1, [pc, #68]	@ (800d768 <netif_set_down+0x5c>)
 800d722:	4812      	ldr	r0, [pc, #72]	@ (800d76c <netif_set_down+0x60>)
 800d724:	f00a fa52 	bl	8017bcc <iprintf>
 800d728:	e019      	b.n	800d75e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d730:	f003 0301 	and.w	r3, r3, #1
 800d734:	2b00      	cmp	r3, #0
 800d736:	d012      	beq.n	800d75e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d73e:	f023 0301 	bic.w	r3, r3, #1
 800d742:	b2da      	uxtb	r2, r3
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d750:	f003 0308 	and.w	r3, r3, #8
 800d754:	2b00      	cmp	r3, #0
 800d756:	d002      	beq.n	800d75e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800d758:	6878      	ldr	r0, [r7, #4]
 800d75a:	f007 facb 	bl	8014cf4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800d75e:	3708      	adds	r7, #8
 800d760:	46bd      	mov	sp, r7
 800d762:	bd80      	pop	{r7, pc}
 800d764:	08020cac 	.word	0x08020cac
 800d768:	08020e74 	.word	0x08020e74
 800d76c:	08020cfc 	.word	0x08020cfc

0800d770 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800d770:	b580      	push	{r7, lr}
 800d772:	b082      	sub	sp, #8
 800d774:	af00      	add	r7, sp, #0
 800d776:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d107      	bne.n	800d78e <netif_set_link_up+0x1e>
 800d77e:	4b13      	ldr	r3, [pc, #76]	@ (800d7cc <netif_set_link_up+0x5c>)
 800d780:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800d784:	4912      	ldr	r1, [pc, #72]	@ (800d7d0 <netif_set_link_up+0x60>)
 800d786:	4813      	ldr	r0, [pc, #76]	@ (800d7d4 <netif_set_link_up+0x64>)
 800d788:	f00a fa20 	bl	8017bcc <iprintf>
 800d78c:	e01b      	b.n	800d7c6 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d794:	f003 0304 	and.w	r3, r3, #4
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d114      	bne.n	800d7c6 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d7a2:	f043 0304 	orr.w	r3, r3, #4
 800d7a6:	b2da      	uxtb	r2, r3
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800d7ae:	2103      	movs	r1, #3
 800d7b0:	6878      	ldr	r0, [r7, #4]
 800d7b2:	f7ff ff6b 	bl	800d68c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	69db      	ldr	r3, [r3, #28]
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d003      	beq.n	800d7c6 <netif_set_link_up+0x56>
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	69db      	ldr	r3, [r3, #28]
 800d7c2:	6878      	ldr	r0, [r7, #4]
 800d7c4:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800d7c6:	3708      	adds	r7, #8
 800d7c8:	46bd      	mov	sp, r7
 800d7ca:	bd80      	pop	{r7, pc}
 800d7cc:	08020cac 	.word	0x08020cac
 800d7d0:	08020e94 	.word	0x08020e94
 800d7d4:	08020cfc 	.word	0x08020cfc

0800d7d8 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800d7d8:	b580      	push	{r7, lr}
 800d7da:	b082      	sub	sp, #8
 800d7dc:	af00      	add	r7, sp, #0
 800d7de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d107      	bne.n	800d7f6 <netif_set_link_down+0x1e>
 800d7e6:	4b11      	ldr	r3, [pc, #68]	@ (800d82c <netif_set_link_down+0x54>)
 800d7e8:	f240 4206 	movw	r2, #1030	@ 0x406
 800d7ec:	4910      	ldr	r1, [pc, #64]	@ (800d830 <netif_set_link_down+0x58>)
 800d7ee:	4811      	ldr	r0, [pc, #68]	@ (800d834 <netif_set_link_down+0x5c>)
 800d7f0:	f00a f9ec 	bl	8017bcc <iprintf>
 800d7f4:	e017      	b.n	800d826 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d7fc:	f003 0304 	and.w	r3, r3, #4
 800d800:	2b00      	cmp	r3, #0
 800d802:	d010      	beq.n	800d826 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d80a:	f023 0304 	bic.w	r3, r3, #4
 800d80e:	b2da      	uxtb	r2, r3
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	69db      	ldr	r3, [r3, #28]
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d003      	beq.n	800d826 <netif_set_link_down+0x4e>
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	69db      	ldr	r3, [r3, #28]
 800d822:	6878      	ldr	r0, [r7, #4]
 800d824:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800d826:	3708      	adds	r7, #8
 800d828:	46bd      	mov	sp, r7
 800d82a:	bd80      	pop	{r7, pc}
 800d82c:	08020cac 	.word	0x08020cac
 800d830:	08020eb8 	.word	0x08020eb8
 800d834:	08020cfc 	.word	0x08020cfc

0800d838 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800d838:	b480      	push	{r7}
 800d83a:	b083      	sub	sp, #12
 800d83c:	af00      	add	r7, sp, #0
 800d83e:	6078      	str	r0, [r7, #4]
 800d840:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	2b00      	cmp	r3, #0
 800d846:	d002      	beq.n	800d84e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	683a      	ldr	r2, [r7, #0]
 800d84c:	61da      	str	r2, [r3, #28]
  }
}
 800d84e:	bf00      	nop
 800d850:	370c      	adds	r7, #12
 800d852:	46bd      	mov	sp, r7
 800d854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d858:	4770      	bx	lr

0800d85a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800d85a:	b480      	push	{r7}
 800d85c:	b085      	sub	sp, #20
 800d85e:	af00      	add	r7, sp, #0
 800d860:	60f8      	str	r0, [r7, #12]
 800d862:	60b9      	str	r1, [r7, #8]
 800d864:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800d866:	f06f 030b 	mvn.w	r3, #11
}
 800d86a:	4618      	mov	r0, r3
 800d86c:	3714      	adds	r7, #20
 800d86e:	46bd      	mov	sp, r7
 800d870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d874:	4770      	bx	lr
	...

0800d878 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800d878:	b480      	push	{r7}
 800d87a:	b085      	sub	sp, #20
 800d87c:	af00      	add	r7, sp, #0
 800d87e:	4603      	mov	r3, r0
 800d880:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800d882:	79fb      	ldrb	r3, [r7, #7]
 800d884:	2b00      	cmp	r3, #0
 800d886:	d013      	beq.n	800d8b0 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800d888:	4b0d      	ldr	r3, [pc, #52]	@ (800d8c0 <netif_get_by_index+0x48>)
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	60fb      	str	r3, [r7, #12]
 800d88e:	e00c      	b.n	800d8aa <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d896:	3301      	adds	r3, #1
 800d898:	b2db      	uxtb	r3, r3
 800d89a:	79fa      	ldrb	r2, [r7, #7]
 800d89c:	429a      	cmp	r2, r3
 800d89e:	d101      	bne.n	800d8a4 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	e006      	b.n	800d8b2 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	60fb      	str	r3, [r7, #12]
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d1ef      	bne.n	800d890 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800d8b0:	2300      	movs	r3, #0
}
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	3714      	adds	r7, #20
 800d8b6:	46bd      	mov	sp, r7
 800d8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8bc:	4770      	bx	lr
 800d8be:	bf00      	nop
 800d8c0:	20015240 	.word	0x20015240

0800d8c4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800d8c4:	b580      	push	{r7, lr}
 800d8c6:	b082      	sub	sp, #8
 800d8c8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800d8ca:	4b0c      	ldr	r3, [pc, #48]	@ (800d8fc <pbuf_free_ooseq+0x38>)
 800d8cc:	2200      	movs	r2, #0
 800d8ce:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800d8d0:	4b0b      	ldr	r3, [pc, #44]	@ (800d900 <pbuf_free_ooseq+0x3c>)
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	607b      	str	r3, [r7, #4]
 800d8d6:	e00a      	b.n	800d8ee <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d003      	beq.n	800d8e8 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800d8e0:	6878      	ldr	r0, [r7, #4]
 800d8e2:	f002 faa9 	bl	800fe38 <tcp_free_ooseq>
      return;
 800d8e6:	e005      	b.n	800d8f4 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	68db      	ldr	r3, [r3, #12]
 800d8ec:	607b      	str	r3, [r7, #4]
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d1f1      	bne.n	800d8d8 <pbuf_free_ooseq+0x14>
    }
  }
}
 800d8f4:	3708      	adds	r7, #8
 800d8f6:	46bd      	mov	sp, r7
 800d8f8:	bd80      	pop	{r7, pc}
 800d8fa:	bf00      	nop
 800d8fc:	20015249 	.word	0x20015249
 800d900:	20015258 	.word	0x20015258

0800d904 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800d904:	b480      	push	{r7}
 800d906:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800d908:	4b03      	ldr	r3, [pc, #12]	@ (800d918 <pbuf_pool_is_empty+0x14>)
 800d90a:	2201      	movs	r2, #1
 800d90c:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800d90e:	bf00      	nop
 800d910:	46bd      	mov	sp, r7
 800d912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d916:	4770      	bx	lr
 800d918:	20015249 	.word	0x20015249

0800d91c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800d91c:	b480      	push	{r7}
 800d91e:	b085      	sub	sp, #20
 800d920:	af00      	add	r7, sp, #0
 800d922:	60f8      	str	r0, [r7, #12]
 800d924:	60b9      	str	r1, [r7, #8]
 800d926:	4611      	mov	r1, r2
 800d928:	461a      	mov	r2, r3
 800d92a:	460b      	mov	r3, r1
 800d92c:	80fb      	strh	r3, [r7, #6]
 800d92e:	4613      	mov	r3, r2
 800d930:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	2200      	movs	r2, #0
 800d936:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	68ba      	ldr	r2, [r7, #8]
 800d93c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	88fa      	ldrh	r2, [r7, #6]
 800d942:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	88ba      	ldrh	r2, [r7, #4]
 800d948:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800d94a:	8b3b      	ldrh	r3, [r7, #24]
 800d94c:	b2da      	uxtb	r2, r3
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	7f3a      	ldrb	r2, [r7, #28]
 800d956:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	2201      	movs	r2, #1
 800d95c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	2200      	movs	r2, #0
 800d962:	73da      	strb	r2, [r3, #15]
}
 800d964:	bf00      	nop
 800d966:	3714      	adds	r7, #20
 800d968:	46bd      	mov	sp, r7
 800d96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d96e:	4770      	bx	lr

0800d970 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800d970:	b580      	push	{r7, lr}
 800d972:	b08c      	sub	sp, #48	@ 0x30
 800d974:	af02      	add	r7, sp, #8
 800d976:	4603      	mov	r3, r0
 800d978:	71fb      	strb	r3, [r7, #7]
 800d97a:	460b      	mov	r3, r1
 800d97c:	80bb      	strh	r3, [r7, #4]
 800d97e:	4613      	mov	r3, r2
 800d980:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800d982:	79fb      	ldrb	r3, [r7, #7]
 800d984:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800d986:	887b      	ldrh	r3, [r7, #2]
 800d988:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800d98c:	d07f      	beq.n	800da8e <pbuf_alloc+0x11e>
 800d98e:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800d992:	f300 80c8 	bgt.w	800db26 <pbuf_alloc+0x1b6>
 800d996:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800d99a:	d010      	beq.n	800d9be <pbuf_alloc+0x4e>
 800d99c:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800d9a0:	f300 80c1 	bgt.w	800db26 <pbuf_alloc+0x1b6>
 800d9a4:	2b01      	cmp	r3, #1
 800d9a6:	d002      	beq.n	800d9ae <pbuf_alloc+0x3e>
 800d9a8:	2b41      	cmp	r3, #65	@ 0x41
 800d9aa:	f040 80bc 	bne.w	800db26 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800d9ae:	887a      	ldrh	r2, [r7, #2]
 800d9b0:	88bb      	ldrh	r3, [r7, #4]
 800d9b2:	4619      	mov	r1, r3
 800d9b4:	2000      	movs	r0, #0
 800d9b6:	f000 f8d1 	bl	800db5c <pbuf_alloc_reference>
 800d9ba:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 800d9bc:	e0bd      	b.n	800db3a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800d9be:	2300      	movs	r3, #0
 800d9c0:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800d9c2:	2300      	movs	r3, #0
 800d9c4:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800d9c6:	88bb      	ldrh	r3, [r7, #4]
 800d9c8:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800d9ca:	2008      	movs	r0, #8
 800d9cc:	f7ff fbce 	bl	800d16c <memp_malloc>
 800d9d0:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800d9d2:	693b      	ldr	r3, [r7, #16]
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d109      	bne.n	800d9ec <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800d9d8:	f7ff ff94 	bl	800d904 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800d9dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d002      	beq.n	800d9e8 <pbuf_alloc+0x78>
            pbuf_free(p);
 800d9e2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d9e4:	f000 faa8 	bl	800df38 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800d9e8:	2300      	movs	r3, #0
 800d9ea:	e0a7      	b.n	800db3c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800d9ec:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d9ee:	3303      	adds	r3, #3
 800d9f0:	b29b      	uxth	r3, r3
 800d9f2:	f023 0303 	bic.w	r3, r3, #3
 800d9f6:	b29b      	uxth	r3, r3
 800d9f8:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 800d9fc:	b29b      	uxth	r3, r3
 800d9fe:	8b7a      	ldrh	r2, [r7, #26]
 800da00:	4293      	cmp	r3, r2
 800da02:	bf28      	it	cs
 800da04:	4613      	movcs	r3, r2
 800da06:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800da08:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800da0a:	3310      	adds	r3, #16
 800da0c:	693a      	ldr	r2, [r7, #16]
 800da0e:	4413      	add	r3, r2
 800da10:	3303      	adds	r3, #3
 800da12:	f023 0303 	bic.w	r3, r3, #3
 800da16:	4618      	mov	r0, r3
 800da18:	89f9      	ldrh	r1, [r7, #14]
 800da1a:	8b7a      	ldrh	r2, [r7, #26]
 800da1c:	2300      	movs	r3, #0
 800da1e:	9301      	str	r3, [sp, #4]
 800da20:	887b      	ldrh	r3, [r7, #2]
 800da22:	9300      	str	r3, [sp, #0]
 800da24:	460b      	mov	r3, r1
 800da26:	4601      	mov	r1, r0
 800da28:	6938      	ldr	r0, [r7, #16]
 800da2a:	f7ff ff77 	bl	800d91c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800da2e:	693b      	ldr	r3, [r7, #16]
 800da30:	685b      	ldr	r3, [r3, #4]
 800da32:	f003 0303 	and.w	r3, r3, #3
 800da36:	2b00      	cmp	r3, #0
 800da38:	d006      	beq.n	800da48 <pbuf_alloc+0xd8>
 800da3a:	4b42      	ldr	r3, [pc, #264]	@ (800db44 <pbuf_alloc+0x1d4>)
 800da3c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800da40:	4941      	ldr	r1, [pc, #260]	@ (800db48 <pbuf_alloc+0x1d8>)
 800da42:	4842      	ldr	r0, [pc, #264]	@ (800db4c <pbuf_alloc+0x1dc>)
 800da44:	f00a f8c2 	bl	8017bcc <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800da48:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800da4a:	3303      	adds	r3, #3
 800da4c:	f023 0303 	bic.w	r3, r3, #3
 800da50:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 800da54:	d106      	bne.n	800da64 <pbuf_alloc+0xf4>
 800da56:	4b3b      	ldr	r3, [pc, #236]	@ (800db44 <pbuf_alloc+0x1d4>)
 800da58:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800da5c:	493c      	ldr	r1, [pc, #240]	@ (800db50 <pbuf_alloc+0x1e0>)
 800da5e:	483b      	ldr	r0, [pc, #236]	@ (800db4c <pbuf_alloc+0x1dc>)
 800da60:	f00a f8b4 	bl	8017bcc <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800da64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da66:	2b00      	cmp	r3, #0
 800da68:	d102      	bne.n	800da70 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800da6a:	693b      	ldr	r3, [r7, #16]
 800da6c:	627b      	str	r3, [r7, #36]	@ 0x24
 800da6e:	e002      	b.n	800da76 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800da70:	69fb      	ldr	r3, [r7, #28]
 800da72:	693a      	ldr	r2, [r7, #16]
 800da74:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800da76:	693b      	ldr	r3, [r7, #16]
 800da78:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800da7a:	8b7a      	ldrh	r2, [r7, #26]
 800da7c:	89fb      	ldrh	r3, [r7, #14]
 800da7e:	1ad3      	subs	r3, r2, r3
 800da80:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800da82:	2300      	movs	r3, #0
 800da84:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800da86:	8b7b      	ldrh	r3, [r7, #26]
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d19e      	bne.n	800d9ca <pbuf_alloc+0x5a>
      break;
 800da8c:	e055      	b.n	800db3a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800da8e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800da90:	3303      	adds	r3, #3
 800da92:	b29b      	uxth	r3, r3
 800da94:	f023 0303 	bic.w	r3, r3, #3
 800da98:	b29a      	uxth	r2, r3
 800da9a:	88bb      	ldrh	r3, [r7, #4]
 800da9c:	3303      	adds	r3, #3
 800da9e:	b29b      	uxth	r3, r3
 800daa0:	f023 0303 	bic.w	r3, r3, #3
 800daa4:	b29b      	uxth	r3, r3
 800daa6:	4413      	add	r3, r2
 800daa8:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800daaa:	8b3b      	ldrh	r3, [r7, #24]
 800daac:	3310      	adds	r3, #16
 800daae:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800dab0:	8b3a      	ldrh	r2, [r7, #24]
 800dab2:	88bb      	ldrh	r3, [r7, #4]
 800dab4:	3303      	adds	r3, #3
 800dab6:	f023 0303 	bic.w	r3, r3, #3
 800daba:	429a      	cmp	r2, r3
 800dabc:	d306      	bcc.n	800dacc <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800dabe:	8afa      	ldrh	r2, [r7, #22]
 800dac0:	88bb      	ldrh	r3, [r7, #4]
 800dac2:	3303      	adds	r3, #3
 800dac4:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800dac8:	429a      	cmp	r2, r3
 800daca:	d201      	bcs.n	800dad0 <pbuf_alloc+0x160>
        return NULL;
 800dacc:	2300      	movs	r3, #0
 800dace:	e035      	b.n	800db3c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800dad0:	8afb      	ldrh	r3, [r7, #22]
 800dad2:	4618      	mov	r0, r3
 800dad4:	f7ff f9ba 	bl	800ce4c <mem_malloc>
 800dad8:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800dada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d101      	bne.n	800dae4 <pbuf_alloc+0x174>
        return NULL;
 800dae0:	2300      	movs	r3, #0
 800dae2:	e02b      	b.n	800db3c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800dae4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800dae6:	3310      	adds	r3, #16
 800dae8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800daea:	4413      	add	r3, r2
 800daec:	3303      	adds	r3, #3
 800daee:	f023 0303 	bic.w	r3, r3, #3
 800daf2:	4618      	mov	r0, r3
 800daf4:	88b9      	ldrh	r1, [r7, #4]
 800daf6:	88ba      	ldrh	r2, [r7, #4]
 800daf8:	2300      	movs	r3, #0
 800dafa:	9301      	str	r3, [sp, #4]
 800dafc:	887b      	ldrh	r3, [r7, #2]
 800dafe:	9300      	str	r3, [sp, #0]
 800db00:	460b      	mov	r3, r1
 800db02:	4601      	mov	r1, r0
 800db04:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800db06:	f7ff ff09 	bl	800d91c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800db0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db0c:	685b      	ldr	r3, [r3, #4]
 800db0e:	f003 0303 	and.w	r3, r3, #3
 800db12:	2b00      	cmp	r3, #0
 800db14:	d010      	beq.n	800db38 <pbuf_alloc+0x1c8>
 800db16:	4b0b      	ldr	r3, [pc, #44]	@ (800db44 <pbuf_alloc+0x1d4>)
 800db18:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800db1c:	490d      	ldr	r1, [pc, #52]	@ (800db54 <pbuf_alloc+0x1e4>)
 800db1e:	480b      	ldr	r0, [pc, #44]	@ (800db4c <pbuf_alloc+0x1dc>)
 800db20:	f00a f854 	bl	8017bcc <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800db24:	e008      	b.n	800db38 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800db26:	4b07      	ldr	r3, [pc, #28]	@ (800db44 <pbuf_alloc+0x1d4>)
 800db28:	f240 1227 	movw	r2, #295	@ 0x127
 800db2c:	490a      	ldr	r1, [pc, #40]	@ (800db58 <pbuf_alloc+0x1e8>)
 800db2e:	4807      	ldr	r0, [pc, #28]	@ (800db4c <pbuf_alloc+0x1dc>)
 800db30:	f00a f84c 	bl	8017bcc <iprintf>
      return NULL;
 800db34:	2300      	movs	r3, #0
 800db36:	e001      	b.n	800db3c <pbuf_alloc+0x1cc>
      break;
 800db38:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800db3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800db3c:	4618      	mov	r0, r3
 800db3e:	3728      	adds	r7, #40	@ 0x28
 800db40:	46bd      	mov	sp, r7
 800db42:	bd80      	pop	{r7, pc}
 800db44:	08020edc 	.word	0x08020edc
 800db48:	08020f0c 	.word	0x08020f0c
 800db4c:	08020f3c 	.word	0x08020f3c
 800db50:	08020f64 	.word	0x08020f64
 800db54:	08020f98 	.word	0x08020f98
 800db58:	08020fc4 	.word	0x08020fc4

0800db5c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800db5c:	b580      	push	{r7, lr}
 800db5e:	b086      	sub	sp, #24
 800db60:	af02      	add	r7, sp, #8
 800db62:	6078      	str	r0, [r7, #4]
 800db64:	460b      	mov	r3, r1
 800db66:	807b      	strh	r3, [r7, #2]
 800db68:	4613      	mov	r3, r2
 800db6a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800db6c:	883b      	ldrh	r3, [r7, #0]
 800db6e:	2b41      	cmp	r3, #65	@ 0x41
 800db70:	d009      	beq.n	800db86 <pbuf_alloc_reference+0x2a>
 800db72:	883b      	ldrh	r3, [r7, #0]
 800db74:	2b01      	cmp	r3, #1
 800db76:	d006      	beq.n	800db86 <pbuf_alloc_reference+0x2a>
 800db78:	4b0f      	ldr	r3, [pc, #60]	@ (800dbb8 <pbuf_alloc_reference+0x5c>)
 800db7a:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800db7e:	490f      	ldr	r1, [pc, #60]	@ (800dbbc <pbuf_alloc_reference+0x60>)
 800db80:	480f      	ldr	r0, [pc, #60]	@ (800dbc0 <pbuf_alloc_reference+0x64>)
 800db82:	f00a f823 	bl	8017bcc <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800db86:	2007      	movs	r0, #7
 800db88:	f7ff faf0 	bl	800d16c <memp_malloc>
 800db8c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	2b00      	cmp	r3, #0
 800db92:	d101      	bne.n	800db98 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800db94:	2300      	movs	r3, #0
 800db96:	e00b      	b.n	800dbb0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800db98:	8879      	ldrh	r1, [r7, #2]
 800db9a:	887a      	ldrh	r2, [r7, #2]
 800db9c:	2300      	movs	r3, #0
 800db9e:	9301      	str	r3, [sp, #4]
 800dba0:	883b      	ldrh	r3, [r7, #0]
 800dba2:	9300      	str	r3, [sp, #0]
 800dba4:	460b      	mov	r3, r1
 800dba6:	6879      	ldr	r1, [r7, #4]
 800dba8:	68f8      	ldr	r0, [r7, #12]
 800dbaa:	f7ff feb7 	bl	800d91c <pbuf_init_alloced_pbuf>
  return p;
 800dbae:	68fb      	ldr	r3, [r7, #12]
}
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	3710      	adds	r7, #16
 800dbb4:	46bd      	mov	sp, r7
 800dbb6:	bd80      	pop	{r7, pc}
 800dbb8:	08020edc 	.word	0x08020edc
 800dbbc:	08020fe0 	.word	0x08020fe0
 800dbc0:	08020f3c 	.word	0x08020f3c

0800dbc4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800dbc4:	b580      	push	{r7, lr}
 800dbc6:	b088      	sub	sp, #32
 800dbc8:	af02      	add	r7, sp, #8
 800dbca:	607b      	str	r3, [r7, #4]
 800dbcc:	4603      	mov	r3, r0
 800dbce:	73fb      	strb	r3, [r7, #15]
 800dbd0:	460b      	mov	r3, r1
 800dbd2:	81bb      	strh	r3, [r7, #12]
 800dbd4:	4613      	mov	r3, r2
 800dbd6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800dbd8:	7bfb      	ldrb	r3, [r7, #15]
 800dbda:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800dbdc:	8a7b      	ldrh	r3, [r7, #18]
 800dbde:	3303      	adds	r3, #3
 800dbe0:	f023 0203 	bic.w	r2, r3, #3
 800dbe4:	89bb      	ldrh	r3, [r7, #12]
 800dbe6:	441a      	add	r2, r3
 800dbe8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dbea:	429a      	cmp	r2, r3
 800dbec:	d901      	bls.n	800dbf2 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800dbee:	2300      	movs	r3, #0
 800dbf0:	e018      	b.n	800dc24 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800dbf2:	6a3b      	ldr	r3, [r7, #32]
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d007      	beq.n	800dc08 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800dbf8:	8a7b      	ldrh	r3, [r7, #18]
 800dbfa:	3303      	adds	r3, #3
 800dbfc:	f023 0303 	bic.w	r3, r3, #3
 800dc00:	6a3a      	ldr	r2, [r7, #32]
 800dc02:	4413      	add	r3, r2
 800dc04:	617b      	str	r3, [r7, #20]
 800dc06:	e001      	b.n	800dc0c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800dc08:	2300      	movs	r3, #0
 800dc0a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800dc0c:	6878      	ldr	r0, [r7, #4]
 800dc0e:	89b9      	ldrh	r1, [r7, #12]
 800dc10:	89ba      	ldrh	r2, [r7, #12]
 800dc12:	2302      	movs	r3, #2
 800dc14:	9301      	str	r3, [sp, #4]
 800dc16:	897b      	ldrh	r3, [r7, #10]
 800dc18:	9300      	str	r3, [sp, #0]
 800dc1a:	460b      	mov	r3, r1
 800dc1c:	6979      	ldr	r1, [r7, #20]
 800dc1e:	f7ff fe7d 	bl	800d91c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800dc22:	687b      	ldr	r3, [r7, #4]
}
 800dc24:	4618      	mov	r0, r3
 800dc26:	3718      	adds	r7, #24
 800dc28:	46bd      	mov	sp, r7
 800dc2a:	bd80      	pop	{r7, pc}

0800dc2c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800dc2c:	b580      	push	{r7, lr}
 800dc2e:	b084      	sub	sp, #16
 800dc30:	af00      	add	r7, sp, #0
 800dc32:	6078      	str	r0, [r7, #4]
 800dc34:	460b      	mov	r3, r1
 800dc36:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d106      	bne.n	800dc4c <pbuf_realloc+0x20>
 800dc3e:	4b3a      	ldr	r3, [pc, #232]	@ (800dd28 <pbuf_realloc+0xfc>)
 800dc40:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800dc44:	4939      	ldr	r1, [pc, #228]	@ (800dd2c <pbuf_realloc+0x100>)
 800dc46:	483a      	ldr	r0, [pc, #232]	@ (800dd30 <pbuf_realloc+0x104>)
 800dc48:	f009 ffc0 	bl	8017bcc <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	891b      	ldrh	r3, [r3, #8]
 800dc50:	887a      	ldrh	r2, [r7, #2]
 800dc52:	429a      	cmp	r2, r3
 800dc54:	d263      	bcs.n	800dd1e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	891a      	ldrh	r2, [r3, #8]
 800dc5a:	887b      	ldrh	r3, [r7, #2]
 800dc5c:	1ad3      	subs	r3, r2, r3
 800dc5e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800dc60:	887b      	ldrh	r3, [r7, #2]
 800dc62:	817b      	strh	r3, [r7, #10]
  q = p;
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800dc68:	e018      	b.n	800dc9c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	895b      	ldrh	r3, [r3, #10]
 800dc6e:	897a      	ldrh	r2, [r7, #10]
 800dc70:	1ad3      	subs	r3, r2, r3
 800dc72:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	891a      	ldrh	r2, [r3, #8]
 800dc78:	893b      	ldrh	r3, [r7, #8]
 800dc7a:	1ad3      	subs	r3, r2, r3
 800dc7c:	b29a      	uxth	r2, r3
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d106      	bne.n	800dc9c <pbuf_realloc+0x70>
 800dc8e:	4b26      	ldr	r3, [pc, #152]	@ (800dd28 <pbuf_realloc+0xfc>)
 800dc90:	f240 12af 	movw	r2, #431	@ 0x1af
 800dc94:	4927      	ldr	r1, [pc, #156]	@ (800dd34 <pbuf_realloc+0x108>)
 800dc96:	4826      	ldr	r0, [pc, #152]	@ (800dd30 <pbuf_realloc+0x104>)
 800dc98:	f009 ff98 	bl	8017bcc <iprintf>
  while (rem_len > q->len) {
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	895b      	ldrh	r3, [r3, #10]
 800dca0:	897a      	ldrh	r2, [r7, #10]
 800dca2:	429a      	cmp	r2, r3
 800dca4:	d8e1      	bhi.n	800dc6a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	7b1b      	ldrb	r3, [r3, #12]
 800dcaa:	f003 030f 	and.w	r3, r3, #15
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d121      	bne.n	800dcf6 <pbuf_realloc+0xca>
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	895b      	ldrh	r3, [r3, #10]
 800dcb6:	897a      	ldrh	r2, [r7, #10]
 800dcb8:	429a      	cmp	r2, r3
 800dcba:	d01c      	beq.n	800dcf6 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	7b5b      	ldrb	r3, [r3, #13]
 800dcc0:	f003 0302 	and.w	r3, r3, #2
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d116      	bne.n	800dcf6 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	685a      	ldr	r2, [r3, #4]
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	1ad3      	subs	r3, r2, r3
 800dcd0:	b29a      	uxth	r2, r3
 800dcd2:	897b      	ldrh	r3, [r7, #10]
 800dcd4:	4413      	add	r3, r2
 800dcd6:	b29b      	uxth	r3, r3
 800dcd8:	4619      	mov	r1, r3
 800dcda:	68f8      	ldr	r0, [r7, #12]
 800dcdc:	f7fe ffba 	bl	800cc54 <mem_trim>
 800dce0:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d106      	bne.n	800dcf6 <pbuf_realloc+0xca>
 800dce8:	4b0f      	ldr	r3, [pc, #60]	@ (800dd28 <pbuf_realloc+0xfc>)
 800dcea:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800dcee:	4912      	ldr	r1, [pc, #72]	@ (800dd38 <pbuf_realloc+0x10c>)
 800dcf0:	480f      	ldr	r0, [pc, #60]	@ (800dd30 <pbuf_realloc+0x104>)
 800dcf2:	f009 ff6b 	bl	8017bcc <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	897a      	ldrh	r2, [r7, #10]
 800dcfa:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	895a      	ldrh	r2, [r3, #10]
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d004      	beq.n	800dd16 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	4618      	mov	r0, r3
 800dd12:	f000 f911 	bl	800df38 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	2200      	movs	r2, #0
 800dd1a:	601a      	str	r2, [r3, #0]
 800dd1c:	e000      	b.n	800dd20 <pbuf_realloc+0xf4>
    return;
 800dd1e:	bf00      	nop

}
 800dd20:	3710      	adds	r7, #16
 800dd22:	46bd      	mov	sp, r7
 800dd24:	bd80      	pop	{r7, pc}
 800dd26:	bf00      	nop
 800dd28:	08020edc 	.word	0x08020edc
 800dd2c:	08020ff4 	.word	0x08020ff4
 800dd30:	08020f3c 	.word	0x08020f3c
 800dd34:	0802100c 	.word	0x0802100c
 800dd38:	08021024 	.word	0x08021024

0800dd3c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800dd3c:	b580      	push	{r7, lr}
 800dd3e:	b086      	sub	sp, #24
 800dd40:	af00      	add	r7, sp, #0
 800dd42:	60f8      	str	r0, [r7, #12]
 800dd44:	60b9      	str	r1, [r7, #8]
 800dd46:	4613      	mov	r3, r2
 800dd48:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d106      	bne.n	800dd5e <pbuf_add_header_impl+0x22>
 800dd50:	4b2b      	ldr	r3, [pc, #172]	@ (800de00 <pbuf_add_header_impl+0xc4>)
 800dd52:	f240 12df 	movw	r2, #479	@ 0x1df
 800dd56:	492b      	ldr	r1, [pc, #172]	@ (800de04 <pbuf_add_header_impl+0xc8>)
 800dd58:	482b      	ldr	r0, [pc, #172]	@ (800de08 <pbuf_add_header_impl+0xcc>)
 800dd5a:	f009 ff37 	bl	8017bcc <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d003      	beq.n	800dd6c <pbuf_add_header_impl+0x30>
 800dd64:	68bb      	ldr	r3, [r7, #8]
 800dd66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dd6a:	d301      	bcc.n	800dd70 <pbuf_add_header_impl+0x34>
    return 1;
 800dd6c:	2301      	movs	r3, #1
 800dd6e:	e043      	b.n	800ddf8 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800dd70:	68bb      	ldr	r3, [r7, #8]
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d101      	bne.n	800dd7a <pbuf_add_header_impl+0x3e>
    return 0;
 800dd76:	2300      	movs	r3, #0
 800dd78:	e03e      	b.n	800ddf8 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800dd7a:	68bb      	ldr	r3, [r7, #8]
 800dd7c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	891a      	ldrh	r2, [r3, #8]
 800dd82:	8a7b      	ldrh	r3, [r7, #18]
 800dd84:	4413      	add	r3, r2
 800dd86:	b29b      	uxth	r3, r3
 800dd88:	8a7a      	ldrh	r2, [r7, #18]
 800dd8a:	429a      	cmp	r2, r3
 800dd8c:	d901      	bls.n	800dd92 <pbuf_add_header_impl+0x56>
    return 1;
 800dd8e:	2301      	movs	r3, #1
 800dd90:	e032      	b.n	800ddf8 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	7b1b      	ldrb	r3, [r3, #12]
 800dd96:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800dd98:	8a3b      	ldrh	r3, [r7, #16]
 800dd9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d00c      	beq.n	800ddbc <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	685a      	ldr	r2, [r3, #4]
 800dda6:	68bb      	ldr	r3, [r7, #8]
 800dda8:	425b      	negs	r3, r3
 800ddaa:	4413      	add	r3, r2
 800ddac:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	3310      	adds	r3, #16
 800ddb2:	697a      	ldr	r2, [r7, #20]
 800ddb4:	429a      	cmp	r2, r3
 800ddb6:	d20d      	bcs.n	800ddd4 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800ddb8:	2301      	movs	r3, #1
 800ddba:	e01d      	b.n	800ddf8 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800ddbc:	79fb      	ldrb	r3, [r7, #7]
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d006      	beq.n	800ddd0 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	685a      	ldr	r2, [r3, #4]
 800ddc6:	68bb      	ldr	r3, [r7, #8]
 800ddc8:	425b      	negs	r3, r3
 800ddca:	4413      	add	r3, r2
 800ddcc:	617b      	str	r3, [r7, #20]
 800ddce:	e001      	b.n	800ddd4 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800ddd0:	2301      	movs	r3, #1
 800ddd2:	e011      	b.n	800ddf8 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	697a      	ldr	r2, [r7, #20]
 800ddd8:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	895a      	ldrh	r2, [r3, #10]
 800ddde:	8a7b      	ldrh	r3, [r7, #18]
 800dde0:	4413      	add	r3, r2
 800dde2:	b29a      	uxth	r2, r3
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	891a      	ldrh	r2, [r3, #8]
 800ddec:	8a7b      	ldrh	r3, [r7, #18]
 800ddee:	4413      	add	r3, r2
 800ddf0:	b29a      	uxth	r2, r3
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	811a      	strh	r2, [r3, #8]


  return 0;
 800ddf6:	2300      	movs	r3, #0
}
 800ddf8:	4618      	mov	r0, r3
 800ddfa:	3718      	adds	r7, #24
 800ddfc:	46bd      	mov	sp, r7
 800ddfe:	bd80      	pop	{r7, pc}
 800de00:	08020edc 	.word	0x08020edc
 800de04:	08021040 	.word	0x08021040
 800de08:	08020f3c 	.word	0x08020f3c

0800de0c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800de0c:	b580      	push	{r7, lr}
 800de0e:	b082      	sub	sp, #8
 800de10:	af00      	add	r7, sp, #0
 800de12:	6078      	str	r0, [r7, #4]
 800de14:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800de16:	2200      	movs	r2, #0
 800de18:	6839      	ldr	r1, [r7, #0]
 800de1a:	6878      	ldr	r0, [r7, #4]
 800de1c:	f7ff ff8e 	bl	800dd3c <pbuf_add_header_impl>
 800de20:	4603      	mov	r3, r0
}
 800de22:	4618      	mov	r0, r3
 800de24:	3708      	adds	r7, #8
 800de26:	46bd      	mov	sp, r7
 800de28:	bd80      	pop	{r7, pc}
	...

0800de2c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800de2c:	b580      	push	{r7, lr}
 800de2e:	b084      	sub	sp, #16
 800de30:	af00      	add	r7, sp, #0
 800de32:	6078      	str	r0, [r7, #4]
 800de34:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d106      	bne.n	800de4a <pbuf_remove_header+0x1e>
 800de3c:	4b20      	ldr	r3, [pc, #128]	@ (800dec0 <pbuf_remove_header+0x94>)
 800de3e:	f240 224b 	movw	r2, #587	@ 0x24b
 800de42:	4920      	ldr	r1, [pc, #128]	@ (800dec4 <pbuf_remove_header+0x98>)
 800de44:	4820      	ldr	r0, [pc, #128]	@ (800dec8 <pbuf_remove_header+0x9c>)
 800de46:	f009 fec1 	bl	8017bcc <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d003      	beq.n	800de58 <pbuf_remove_header+0x2c>
 800de50:	683b      	ldr	r3, [r7, #0]
 800de52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800de56:	d301      	bcc.n	800de5c <pbuf_remove_header+0x30>
    return 1;
 800de58:	2301      	movs	r3, #1
 800de5a:	e02c      	b.n	800deb6 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800de5c:	683b      	ldr	r3, [r7, #0]
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d101      	bne.n	800de66 <pbuf_remove_header+0x3a>
    return 0;
 800de62:	2300      	movs	r3, #0
 800de64:	e027      	b.n	800deb6 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800de66:	683b      	ldr	r3, [r7, #0]
 800de68:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	895b      	ldrh	r3, [r3, #10]
 800de6e:	89fa      	ldrh	r2, [r7, #14]
 800de70:	429a      	cmp	r2, r3
 800de72:	d908      	bls.n	800de86 <pbuf_remove_header+0x5a>
 800de74:	4b12      	ldr	r3, [pc, #72]	@ (800dec0 <pbuf_remove_header+0x94>)
 800de76:	f240 2255 	movw	r2, #597	@ 0x255
 800de7a:	4914      	ldr	r1, [pc, #80]	@ (800decc <pbuf_remove_header+0xa0>)
 800de7c:	4812      	ldr	r0, [pc, #72]	@ (800dec8 <pbuf_remove_header+0x9c>)
 800de7e:	f009 fea5 	bl	8017bcc <iprintf>
 800de82:	2301      	movs	r3, #1
 800de84:	e017      	b.n	800deb6 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	685b      	ldr	r3, [r3, #4]
 800de8a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	685a      	ldr	r2, [r3, #4]
 800de90:	683b      	ldr	r3, [r7, #0]
 800de92:	441a      	add	r2, r3
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	895a      	ldrh	r2, [r3, #10]
 800de9c:	89fb      	ldrh	r3, [r7, #14]
 800de9e:	1ad3      	subs	r3, r2, r3
 800dea0:	b29a      	uxth	r2, r3
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	891a      	ldrh	r2, [r3, #8]
 800deaa:	89fb      	ldrh	r3, [r7, #14]
 800deac:	1ad3      	subs	r3, r2, r3
 800deae:	b29a      	uxth	r2, r3
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800deb4:	2300      	movs	r3, #0
}
 800deb6:	4618      	mov	r0, r3
 800deb8:	3710      	adds	r7, #16
 800deba:	46bd      	mov	sp, r7
 800debc:	bd80      	pop	{r7, pc}
 800debe:	bf00      	nop
 800dec0:	08020edc 	.word	0x08020edc
 800dec4:	08021040 	.word	0x08021040
 800dec8:	08020f3c 	.word	0x08020f3c
 800decc:	0802104c 	.word	0x0802104c

0800ded0 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800ded0:	b580      	push	{r7, lr}
 800ded2:	b082      	sub	sp, #8
 800ded4:	af00      	add	r7, sp, #0
 800ded6:	6078      	str	r0, [r7, #4]
 800ded8:	460b      	mov	r3, r1
 800deda:	807b      	strh	r3, [r7, #2]
 800dedc:	4613      	mov	r3, r2
 800dede:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800dee0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	da08      	bge.n	800defa <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800dee8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800deec:	425b      	negs	r3, r3
 800deee:	4619      	mov	r1, r3
 800def0:	6878      	ldr	r0, [r7, #4]
 800def2:	f7ff ff9b 	bl	800de2c <pbuf_remove_header>
 800def6:	4603      	mov	r3, r0
 800def8:	e007      	b.n	800df0a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800defa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800defe:	787a      	ldrb	r2, [r7, #1]
 800df00:	4619      	mov	r1, r3
 800df02:	6878      	ldr	r0, [r7, #4]
 800df04:	f7ff ff1a 	bl	800dd3c <pbuf_add_header_impl>
 800df08:	4603      	mov	r3, r0
  }
}
 800df0a:	4618      	mov	r0, r3
 800df0c:	3708      	adds	r7, #8
 800df0e:	46bd      	mov	sp, r7
 800df10:	bd80      	pop	{r7, pc}

0800df12 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800df12:	b580      	push	{r7, lr}
 800df14:	b082      	sub	sp, #8
 800df16:	af00      	add	r7, sp, #0
 800df18:	6078      	str	r0, [r7, #4]
 800df1a:	460b      	mov	r3, r1
 800df1c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800df1e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800df22:	2201      	movs	r2, #1
 800df24:	4619      	mov	r1, r3
 800df26:	6878      	ldr	r0, [r7, #4]
 800df28:	f7ff ffd2 	bl	800ded0 <pbuf_header_impl>
 800df2c:	4603      	mov	r3, r0
}
 800df2e:	4618      	mov	r0, r3
 800df30:	3708      	adds	r7, #8
 800df32:	46bd      	mov	sp, r7
 800df34:	bd80      	pop	{r7, pc}
	...

0800df38 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800df38:	b580      	push	{r7, lr}
 800df3a:	b086      	sub	sp, #24
 800df3c:	af00      	add	r7, sp, #0
 800df3e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	2b00      	cmp	r3, #0
 800df44:	d10b      	bne.n	800df5e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d106      	bne.n	800df5a <pbuf_free+0x22>
 800df4c:	4b38      	ldr	r3, [pc, #224]	@ (800e030 <pbuf_free+0xf8>)
 800df4e:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800df52:	4938      	ldr	r1, [pc, #224]	@ (800e034 <pbuf_free+0xfc>)
 800df54:	4838      	ldr	r0, [pc, #224]	@ (800e038 <pbuf_free+0x100>)
 800df56:	f009 fe39 	bl	8017bcc <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800df5a:	2300      	movs	r3, #0
 800df5c:	e063      	b.n	800e026 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800df5e:	2300      	movs	r3, #0
 800df60:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800df62:	e05c      	b.n	800e01e <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	7b9b      	ldrb	r3, [r3, #14]
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d106      	bne.n	800df7a <pbuf_free+0x42>
 800df6c:	4b30      	ldr	r3, [pc, #192]	@ (800e030 <pbuf_free+0xf8>)
 800df6e:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800df72:	4932      	ldr	r1, [pc, #200]	@ (800e03c <pbuf_free+0x104>)
 800df74:	4830      	ldr	r0, [pc, #192]	@ (800e038 <pbuf_free+0x100>)
 800df76:	f009 fe29 	bl	8017bcc <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	7b9b      	ldrb	r3, [r3, #14]
 800df7e:	3b01      	subs	r3, #1
 800df80:	b2da      	uxtb	r2, r3
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	739a      	strb	r2, [r3, #14]
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	7b9b      	ldrb	r3, [r3, #14]
 800df8a:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800df8c:	7dbb      	ldrb	r3, [r7, #22]
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d143      	bne.n	800e01a <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	7b1b      	ldrb	r3, [r3, #12]
 800df9c:	f003 030f 	and.w	r3, r3, #15
 800dfa0:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	7b5b      	ldrb	r3, [r3, #13]
 800dfa6:	f003 0302 	and.w	r3, r3, #2
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d011      	beq.n	800dfd2 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800dfb2:	68bb      	ldr	r3, [r7, #8]
 800dfb4:	691b      	ldr	r3, [r3, #16]
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d106      	bne.n	800dfc8 <pbuf_free+0x90>
 800dfba:	4b1d      	ldr	r3, [pc, #116]	@ (800e030 <pbuf_free+0xf8>)
 800dfbc:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800dfc0:	491f      	ldr	r1, [pc, #124]	@ (800e040 <pbuf_free+0x108>)
 800dfc2:	481d      	ldr	r0, [pc, #116]	@ (800e038 <pbuf_free+0x100>)
 800dfc4:	f009 fe02 	bl	8017bcc <iprintf>
        pc->custom_free_function(p);
 800dfc8:	68bb      	ldr	r3, [r7, #8]
 800dfca:	691b      	ldr	r3, [r3, #16]
 800dfcc:	6878      	ldr	r0, [r7, #4]
 800dfce:	4798      	blx	r3
 800dfd0:	e01d      	b.n	800e00e <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800dfd2:	7bfb      	ldrb	r3, [r7, #15]
 800dfd4:	2b02      	cmp	r3, #2
 800dfd6:	d104      	bne.n	800dfe2 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800dfd8:	6879      	ldr	r1, [r7, #4]
 800dfda:	2008      	movs	r0, #8
 800dfdc:	f7ff f936 	bl	800d24c <memp_free>
 800dfe0:	e015      	b.n	800e00e <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800dfe2:	7bfb      	ldrb	r3, [r7, #15]
 800dfe4:	2b01      	cmp	r3, #1
 800dfe6:	d104      	bne.n	800dff2 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800dfe8:	6879      	ldr	r1, [r7, #4]
 800dfea:	2007      	movs	r0, #7
 800dfec:	f7ff f92e 	bl	800d24c <memp_free>
 800dff0:	e00d      	b.n	800e00e <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800dff2:	7bfb      	ldrb	r3, [r7, #15]
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d103      	bne.n	800e000 <pbuf_free+0xc8>
          mem_free(p);
 800dff8:	6878      	ldr	r0, [r7, #4]
 800dffa:	f7fe fdc1 	bl	800cb80 <mem_free>
 800dffe:	e006      	b.n	800e00e <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800e000:	4b0b      	ldr	r3, [pc, #44]	@ (800e030 <pbuf_free+0xf8>)
 800e002:	f240 320f 	movw	r2, #783	@ 0x30f
 800e006:	490f      	ldr	r1, [pc, #60]	@ (800e044 <pbuf_free+0x10c>)
 800e008:	480b      	ldr	r0, [pc, #44]	@ (800e038 <pbuf_free+0x100>)
 800e00a:	f009 fddf 	bl	8017bcc <iprintf>
        }
      }
      count++;
 800e00e:	7dfb      	ldrb	r3, [r7, #23]
 800e010:	3301      	adds	r3, #1
 800e012:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800e014:	693b      	ldr	r3, [r7, #16]
 800e016:	607b      	str	r3, [r7, #4]
 800e018:	e001      	b.n	800e01e <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800e01a:	2300      	movs	r3, #0
 800e01c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	2b00      	cmp	r3, #0
 800e022:	d19f      	bne.n	800df64 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800e024:	7dfb      	ldrb	r3, [r7, #23]
}
 800e026:	4618      	mov	r0, r3
 800e028:	3718      	adds	r7, #24
 800e02a:	46bd      	mov	sp, r7
 800e02c:	bd80      	pop	{r7, pc}
 800e02e:	bf00      	nop
 800e030:	08020edc 	.word	0x08020edc
 800e034:	08021040 	.word	0x08021040
 800e038:	08020f3c 	.word	0x08020f3c
 800e03c:	0802106c 	.word	0x0802106c
 800e040:	08021084 	.word	0x08021084
 800e044:	080210a8 	.word	0x080210a8

0800e048 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800e048:	b480      	push	{r7}
 800e04a:	b085      	sub	sp, #20
 800e04c:	af00      	add	r7, sp, #0
 800e04e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800e050:	2300      	movs	r3, #0
 800e052:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800e054:	e005      	b.n	800e062 <pbuf_clen+0x1a>
    ++len;
 800e056:	89fb      	ldrh	r3, [r7, #14]
 800e058:	3301      	adds	r3, #1
 800e05a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	2b00      	cmp	r3, #0
 800e066:	d1f6      	bne.n	800e056 <pbuf_clen+0xe>
  }
  return len;
 800e068:	89fb      	ldrh	r3, [r7, #14]
}
 800e06a:	4618      	mov	r0, r3
 800e06c:	3714      	adds	r7, #20
 800e06e:	46bd      	mov	sp, r7
 800e070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e074:	4770      	bx	lr
	...

0800e078 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800e078:	b580      	push	{r7, lr}
 800e07a:	b082      	sub	sp, #8
 800e07c:	af00      	add	r7, sp, #0
 800e07e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	2b00      	cmp	r3, #0
 800e084:	d010      	beq.n	800e0a8 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	7b9b      	ldrb	r3, [r3, #14]
 800e08a:	3301      	adds	r3, #1
 800e08c:	b2da      	uxtb	r2, r3
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	7b9b      	ldrb	r3, [r3, #14]
 800e096:	2b00      	cmp	r3, #0
 800e098:	d106      	bne.n	800e0a8 <pbuf_ref+0x30>
 800e09a:	4b05      	ldr	r3, [pc, #20]	@ (800e0b0 <pbuf_ref+0x38>)
 800e09c:	f240 3242 	movw	r2, #834	@ 0x342
 800e0a0:	4904      	ldr	r1, [pc, #16]	@ (800e0b4 <pbuf_ref+0x3c>)
 800e0a2:	4805      	ldr	r0, [pc, #20]	@ (800e0b8 <pbuf_ref+0x40>)
 800e0a4:	f009 fd92 	bl	8017bcc <iprintf>
  }
}
 800e0a8:	bf00      	nop
 800e0aa:	3708      	adds	r7, #8
 800e0ac:	46bd      	mov	sp, r7
 800e0ae:	bd80      	pop	{r7, pc}
 800e0b0:	08020edc 	.word	0x08020edc
 800e0b4:	080210bc 	.word	0x080210bc
 800e0b8:	08020f3c 	.word	0x08020f3c

0800e0bc <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800e0bc:	b580      	push	{r7, lr}
 800e0be:	b084      	sub	sp, #16
 800e0c0:	af00      	add	r7, sp, #0
 800e0c2:	6078      	str	r0, [r7, #4]
 800e0c4:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d002      	beq.n	800e0d2 <pbuf_cat+0x16>
 800e0cc:	683b      	ldr	r3, [r7, #0]
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d107      	bne.n	800e0e2 <pbuf_cat+0x26>
 800e0d2:	4b20      	ldr	r3, [pc, #128]	@ (800e154 <pbuf_cat+0x98>)
 800e0d4:	f240 3259 	movw	r2, #857	@ 0x359
 800e0d8:	491f      	ldr	r1, [pc, #124]	@ (800e158 <pbuf_cat+0x9c>)
 800e0da:	4820      	ldr	r0, [pc, #128]	@ (800e15c <pbuf_cat+0xa0>)
 800e0dc:	f009 fd76 	bl	8017bcc <iprintf>
 800e0e0:	e034      	b.n	800e14c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	60fb      	str	r3, [r7, #12]
 800e0e6:	e00a      	b.n	800e0fe <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	891a      	ldrh	r2, [r3, #8]
 800e0ec:	683b      	ldr	r3, [r7, #0]
 800e0ee:	891b      	ldrh	r3, [r3, #8]
 800e0f0:	4413      	add	r3, r2
 800e0f2:	b29a      	uxth	r2, r3
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	60fb      	str	r3, [r7, #12]
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	2b00      	cmp	r3, #0
 800e104:	d1f0      	bne.n	800e0e8 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	891a      	ldrh	r2, [r3, #8]
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	895b      	ldrh	r3, [r3, #10]
 800e10e:	429a      	cmp	r2, r3
 800e110:	d006      	beq.n	800e120 <pbuf_cat+0x64>
 800e112:	4b10      	ldr	r3, [pc, #64]	@ (800e154 <pbuf_cat+0x98>)
 800e114:	f240 3262 	movw	r2, #866	@ 0x362
 800e118:	4911      	ldr	r1, [pc, #68]	@ (800e160 <pbuf_cat+0xa4>)
 800e11a:	4810      	ldr	r0, [pc, #64]	@ (800e15c <pbuf_cat+0xa0>)
 800e11c:	f009 fd56 	bl	8017bcc <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	2b00      	cmp	r3, #0
 800e126:	d006      	beq.n	800e136 <pbuf_cat+0x7a>
 800e128:	4b0a      	ldr	r3, [pc, #40]	@ (800e154 <pbuf_cat+0x98>)
 800e12a:	f240 3263 	movw	r2, #867	@ 0x363
 800e12e:	490d      	ldr	r1, [pc, #52]	@ (800e164 <pbuf_cat+0xa8>)
 800e130:	480a      	ldr	r0, [pc, #40]	@ (800e15c <pbuf_cat+0xa0>)
 800e132:	f009 fd4b 	bl	8017bcc <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	891a      	ldrh	r2, [r3, #8]
 800e13a:	683b      	ldr	r3, [r7, #0]
 800e13c:	891b      	ldrh	r3, [r3, #8]
 800e13e:	4413      	add	r3, r2
 800e140:	b29a      	uxth	r2, r3
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	683a      	ldr	r2, [r7, #0]
 800e14a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800e14c:	3710      	adds	r7, #16
 800e14e:	46bd      	mov	sp, r7
 800e150:	bd80      	pop	{r7, pc}
 800e152:	bf00      	nop
 800e154:	08020edc 	.word	0x08020edc
 800e158:	080210d0 	.word	0x080210d0
 800e15c:	08020f3c 	.word	0x08020f3c
 800e160:	08021108 	.word	0x08021108
 800e164:	08021138 	.word	0x08021138

0800e168 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800e168:	b580      	push	{r7, lr}
 800e16a:	b082      	sub	sp, #8
 800e16c:	af00      	add	r7, sp, #0
 800e16e:	6078      	str	r0, [r7, #4]
 800e170:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800e172:	6839      	ldr	r1, [r7, #0]
 800e174:	6878      	ldr	r0, [r7, #4]
 800e176:	f7ff ffa1 	bl	800e0bc <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800e17a:	6838      	ldr	r0, [r7, #0]
 800e17c:	f7ff ff7c 	bl	800e078 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800e180:	bf00      	nop
 800e182:	3708      	adds	r7, #8
 800e184:	46bd      	mov	sp, r7
 800e186:	bd80      	pop	{r7, pc}

0800e188 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800e188:	b580      	push	{r7, lr}
 800e18a:	b086      	sub	sp, #24
 800e18c:	af00      	add	r7, sp, #0
 800e18e:	6078      	str	r0, [r7, #4]
 800e190:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800e192:	2300      	movs	r3, #0
 800e194:	617b      	str	r3, [r7, #20]
 800e196:	2300      	movs	r3, #0
 800e198:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d008      	beq.n	800e1b2 <pbuf_copy+0x2a>
 800e1a0:	683b      	ldr	r3, [r7, #0]
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d005      	beq.n	800e1b2 <pbuf_copy+0x2a>
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	891a      	ldrh	r2, [r3, #8]
 800e1aa:	683b      	ldr	r3, [r7, #0]
 800e1ac:	891b      	ldrh	r3, [r3, #8]
 800e1ae:	429a      	cmp	r2, r3
 800e1b0:	d209      	bcs.n	800e1c6 <pbuf_copy+0x3e>
 800e1b2:	4b57      	ldr	r3, [pc, #348]	@ (800e310 <pbuf_copy+0x188>)
 800e1b4:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800e1b8:	4956      	ldr	r1, [pc, #344]	@ (800e314 <pbuf_copy+0x18c>)
 800e1ba:	4857      	ldr	r0, [pc, #348]	@ (800e318 <pbuf_copy+0x190>)
 800e1bc:	f009 fd06 	bl	8017bcc <iprintf>
 800e1c0:	f06f 030f 	mvn.w	r3, #15
 800e1c4:	e09f      	b.n	800e306 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	895b      	ldrh	r3, [r3, #10]
 800e1ca:	461a      	mov	r2, r3
 800e1cc:	697b      	ldr	r3, [r7, #20]
 800e1ce:	1ad2      	subs	r2, r2, r3
 800e1d0:	683b      	ldr	r3, [r7, #0]
 800e1d2:	895b      	ldrh	r3, [r3, #10]
 800e1d4:	4619      	mov	r1, r3
 800e1d6:	693b      	ldr	r3, [r7, #16]
 800e1d8:	1acb      	subs	r3, r1, r3
 800e1da:	429a      	cmp	r2, r3
 800e1dc:	d306      	bcc.n	800e1ec <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800e1de:	683b      	ldr	r3, [r7, #0]
 800e1e0:	895b      	ldrh	r3, [r3, #10]
 800e1e2:	461a      	mov	r2, r3
 800e1e4:	693b      	ldr	r3, [r7, #16]
 800e1e6:	1ad3      	subs	r3, r2, r3
 800e1e8:	60fb      	str	r3, [r7, #12]
 800e1ea:	e005      	b.n	800e1f8 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	895b      	ldrh	r3, [r3, #10]
 800e1f0:	461a      	mov	r2, r3
 800e1f2:	697b      	ldr	r3, [r7, #20]
 800e1f4:	1ad3      	subs	r3, r2, r3
 800e1f6:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	685a      	ldr	r2, [r3, #4]
 800e1fc:	697b      	ldr	r3, [r7, #20]
 800e1fe:	18d0      	adds	r0, r2, r3
 800e200:	683b      	ldr	r3, [r7, #0]
 800e202:	685a      	ldr	r2, [r3, #4]
 800e204:	693b      	ldr	r3, [r7, #16]
 800e206:	4413      	add	r3, r2
 800e208:	68fa      	ldr	r2, [r7, #12]
 800e20a:	4619      	mov	r1, r3
 800e20c:	f009 fe35 	bl	8017e7a <memcpy>
    offset_to += len;
 800e210:	697a      	ldr	r2, [r7, #20]
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	4413      	add	r3, r2
 800e216:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800e218:	693a      	ldr	r2, [r7, #16]
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	4413      	add	r3, r2
 800e21e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	895b      	ldrh	r3, [r3, #10]
 800e224:	461a      	mov	r2, r3
 800e226:	697b      	ldr	r3, [r7, #20]
 800e228:	4293      	cmp	r3, r2
 800e22a:	d906      	bls.n	800e23a <pbuf_copy+0xb2>
 800e22c:	4b38      	ldr	r3, [pc, #224]	@ (800e310 <pbuf_copy+0x188>)
 800e22e:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800e232:	493a      	ldr	r1, [pc, #232]	@ (800e31c <pbuf_copy+0x194>)
 800e234:	4838      	ldr	r0, [pc, #224]	@ (800e318 <pbuf_copy+0x190>)
 800e236:	f009 fcc9 	bl	8017bcc <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800e23a:	683b      	ldr	r3, [r7, #0]
 800e23c:	895b      	ldrh	r3, [r3, #10]
 800e23e:	461a      	mov	r2, r3
 800e240:	693b      	ldr	r3, [r7, #16]
 800e242:	4293      	cmp	r3, r2
 800e244:	d906      	bls.n	800e254 <pbuf_copy+0xcc>
 800e246:	4b32      	ldr	r3, [pc, #200]	@ (800e310 <pbuf_copy+0x188>)
 800e248:	f240 32da 	movw	r2, #986	@ 0x3da
 800e24c:	4934      	ldr	r1, [pc, #208]	@ (800e320 <pbuf_copy+0x198>)
 800e24e:	4832      	ldr	r0, [pc, #200]	@ (800e318 <pbuf_copy+0x190>)
 800e250:	f009 fcbc 	bl	8017bcc <iprintf>
    if (offset_from >= p_from->len) {
 800e254:	683b      	ldr	r3, [r7, #0]
 800e256:	895b      	ldrh	r3, [r3, #10]
 800e258:	461a      	mov	r2, r3
 800e25a:	693b      	ldr	r3, [r7, #16]
 800e25c:	4293      	cmp	r3, r2
 800e25e:	d304      	bcc.n	800e26a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800e260:	2300      	movs	r3, #0
 800e262:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800e264:	683b      	ldr	r3, [r7, #0]
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	895b      	ldrh	r3, [r3, #10]
 800e26e:	461a      	mov	r2, r3
 800e270:	697b      	ldr	r3, [r7, #20]
 800e272:	4293      	cmp	r3, r2
 800e274:	d114      	bne.n	800e2a0 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800e276:	2300      	movs	r3, #0
 800e278:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	2b00      	cmp	r3, #0
 800e284:	d10c      	bne.n	800e2a0 <pbuf_copy+0x118>
 800e286:	683b      	ldr	r3, [r7, #0]
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d009      	beq.n	800e2a0 <pbuf_copy+0x118>
 800e28c:	4b20      	ldr	r3, [pc, #128]	@ (800e310 <pbuf_copy+0x188>)
 800e28e:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800e292:	4924      	ldr	r1, [pc, #144]	@ (800e324 <pbuf_copy+0x19c>)
 800e294:	4820      	ldr	r0, [pc, #128]	@ (800e318 <pbuf_copy+0x190>)
 800e296:	f009 fc99 	bl	8017bcc <iprintf>
 800e29a:	f06f 030f 	mvn.w	r3, #15
 800e29e:	e032      	b.n	800e306 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800e2a0:	683b      	ldr	r3, [r7, #0]
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d013      	beq.n	800e2ce <pbuf_copy+0x146>
 800e2a6:	683b      	ldr	r3, [r7, #0]
 800e2a8:	895a      	ldrh	r2, [r3, #10]
 800e2aa:	683b      	ldr	r3, [r7, #0]
 800e2ac:	891b      	ldrh	r3, [r3, #8]
 800e2ae:	429a      	cmp	r2, r3
 800e2b0:	d10d      	bne.n	800e2ce <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800e2b2:	683b      	ldr	r3, [r7, #0]
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d009      	beq.n	800e2ce <pbuf_copy+0x146>
 800e2ba:	4b15      	ldr	r3, [pc, #84]	@ (800e310 <pbuf_copy+0x188>)
 800e2bc:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800e2c0:	4919      	ldr	r1, [pc, #100]	@ (800e328 <pbuf_copy+0x1a0>)
 800e2c2:	4815      	ldr	r0, [pc, #84]	@ (800e318 <pbuf_copy+0x190>)
 800e2c4:	f009 fc82 	bl	8017bcc <iprintf>
 800e2c8:	f06f 0305 	mvn.w	r3, #5
 800e2cc:	e01b      	b.n	800e306 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d013      	beq.n	800e2fc <pbuf_copy+0x174>
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	895a      	ldrh	r2, [r3, #10]
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	891b      	ldrh	r3, [r3, #8]
 800e2dc:	429a      	cmp	r2, r3
 800e2de:	d10d      	bne.n	800e2fc <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d009      	beq.n	800e2fc <pbuf_copy+0x174>
 800e2e8:	4b09      	ldr	r3, [pc, #36]	@ (800e310 <pbuf_copy+0x188>)
 800e2ea:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800e2ee:	490e      	ldr	r1, [pc, #56]	@ (800e328 <pbuf_copy+0x1a0>)
 800e2f0:	4809      	ldr	r0, [pc, #36]	@ (800e318 <pbuf_copy+0x190>)
 800e2f2:	f009 fc6b 	bl	8017bcc <iprintf>
 800e2f6:	f06f 0305 	mvn.w	r3, #5
 800e2fa:	e004      	b.n	800e306 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800e2fc:	683b      	ldr	r3, [r7, #0]
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	f47f af61 	bne.w	800e1c6 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800e304:	2300      	movs	r3, #0
}
 800e306:	4618      	mov	r0, r3
 800e308:	3718      	adds	r7, #24
 800e30a:	46bd      	mov	sp, r7
 800e30c:	bd80      	pop	{r7, pc}
 800e30e:	bf00      	nop
 800e310:	08020edc 	.word	0x08020edc
 800e314:	08021184 	.word	0x08021184
 800e318:	08020f3c 	.word	0x08020f3c
 800e31c:	080211b4 	.word	0x080211b4
 800e320:	080211cc 	.word	0x080211cc
 800e324:	080211e8 	.word	0x080211e8
 800e328:	080211f8 	.word	0x080211f8

0800e32c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800e32c:	b580      	push	{r7, lr}
 800e32e:	b088      	sub	sp, #32
 800e330:	af00      	add	r7, sp, #0
 800e332:	60f8      	str	r0, [r7, #12]
 800e334:	60b9      	str	r1, [r7, #8]
 800e336:	4611      	mov	r1, r2
 800e338:	461a      	mov	r2, r3
 800e33a:	460b      	mov	r3, r1
 800e33c:	80fb      	strh	r3, [r7, #6]
 800e33e:	4613      	mov	r3, r2
 800e340:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800e342:	2300      	movs	r3, #0
 800e344:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800e346:	2300      	movs	r3, #0
 800e348:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d108      	bne.n	800e362 <pbuf_copy_partial+0x36>
 800e350:	4b2b      	ldr	r3, [pc, #172]	@ (800e400 <pbuf_copy_partial+0xd4>)
 800e352:	f240 420a 	movw	r2, #1034	@ 0x40a
 800e356:	492b      	ldr	r1, [pc, #172]	@ (800e404 <pbuf_copy_partial+0xd8>)
 800e358:	482b      	ldr	r0, [pc, #172]	@ (800e408 <pbuf_copy_partial+0xdc>)
 800e35a:	f009 fc37 	bl	8017bcc <iprintf>
 800e35e:	2300      	movs	r3, #0
 800e360:	e04a      	b.n	800e3f8 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800e362:	68bb      	ldr	r3, [r7, #8]
 800e364:	2b00      	cmp	r3, #0
 800e366:	d108      	bne.n	800e37a <pbuf_copy_partial+0x4e>
 800e368:	4b25      	ldr	r3, [pc, #148]	@ (800e400 <pbuf_copy_partial+0xd4>)
 800e36a:	f240 420b 	movw	r2, #1035	@ 0x40b
 800e36e:	4927      	ldr	r1, [pc, #156]	@ (800e40c <pbuf_copy_partial+0xe0>)
 800e370:	4825      	ldr	r0, [pc, #148]	@ (800e408 <pbuf_copy_partial+0xdc>)
 800e372:	f009 fc2b 	bl	8017bcc <iprintf>
 800e376:	2300      	movs	r3, #0
 800e378:	e03e      	b.n	800e3f8 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	61fb      	str	r3, [r7, #28]
 800e37e:	e034      	b.n	800e3ea <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800e380:	88bb      	ldrh	r3, [r7, #4]
 800e382:	2b00      	cmp	r3, #0
 800e384:	d00a      	beq.n	800e39c <pbuf_copy_partial+0x70>
 800e386:	69fb      	ldr	r3, [r7, #28]
 800e388:	895b      	ldrh	r3, [r3, #10]
 800e38a:	88ba      	ldrh	r2, [r7, #4]
 800e38c:	429a      	cmp	r2, r3
 800e38e:	d305      	bcc.n	800e39c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800e390:	69fb      	ldr	r3, [r7, #28]
 800e392:	895b      	ldrh	r3, [r3, #10]
 800e394:	88ba      	ldrh	r2, [r7, #4]
 800e396:	1ad3      	subs	r3, r2, r3
 800e398:	80bb      	strh	r3, [r7, #4]
 800e39a:	e023      	b.n	800e3e4 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800e39c:	69fb      	ldr	r3, [r7, #28]
 800e39e:	895a      	ldrh	r2, [r3, #10]
 800e3a0:	88bb      	ldrh	r3, [r7, #4]
 800e3a2:	1ad3      	subs	r3, r2, r3
 800e3a4:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800e3a6:	8b3a      	ldrh	r2, [r7, #24]
 800e3a8:	88fb      	ldrh	r3, [r7, #6]
 800e3aa:	429a      	cmp	r2, r3
 800e3ac:	d901      	bls.n	800e3b2 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800e3ae:	88fb      	ldrh	r3, [r7, #6]
 800e3b0:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800e3b2:	8b7b      	ldrh	r3, [r7, #26]
 800e3b4:	68ba      	ldr	r2, [r7, #8]
 800e3b6:	18d0      	adds	r0, r2, r3
 800e3b8:	69fb      	ldr	r3, [r7, #28]
 800e3ba:	685a      	ldr	r2, [r3, #4]
 800e3bc:	88bb      	ldrh	r3, [r7, #4]
 800e3be:	4413      	add	r3, r2
 800e3c0:	8b3a      	ldrh	r2, [r7, #24]
 800e3c2:	4619      	mov	r1, r3
 800e3c4:	f009 fd59 	bl	8017e7a <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800e3c8:	8afa      	ldrh	r2, [r7, #22]
 800e3ca:	8b3b      	ldrh	r3, [r7, #24]
 800e3cc:	4413      	add	r3, r2
 800e3ce:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800e3d0:	8b7a      	ldrh	r2, [r7, #26]
 800e3d2:	8b3b      	ldrh	r3, [r7, #24]
 800e3d4:	4413      	add	r3, r2
 800e3d6:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800e3d8:	88fa      	ldrh	r2, [r7, #6]
 800e3da:	8b3b      	ldrh	r3, [r7, #24]
 800e3dc:	1ad3      	subs	r3, r2, r3
 800e3de:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800e3e0:	2300      	movs	r3, #0
 800e3e2:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800e3e4:	69fb      	ldr	r3, [r7, #28]
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	61fb      	str	r3, [r7, #28]
 800e3ea:	88fb      	ldrh	r3, [r7, #6]
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d002      	beq.n	800e3f6 <pbuf_copy_partial+0xca>
 800e3f0:	69fb      	ldr	r3, [r7, #28]
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d1c4      	bne.n	800e380 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800e3f6:	8afb      	ldrh	r3, [r7, #22]
}
 800e3f8:	4618      	mov	r0, r3
 800e3fa:	3720      	adds	r7, #32
 800e3fc:	46bd      	mov	sp, r7
 800e3fe:	bd80      	pop	{r7, pc}
 800e400:	08020edc 	.word	0x08020edc
 800e404:	08021224 	.word	0x08021224
 800e408:	08020f3c 	.word	0x08020f3c
 800e40c:	08021244 	.word	0x08021244

0800e410 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 800e410:	b480      	push	{r7}
 800e412:	b087      	sub	sp, #28
 800e414:	af00      	add	r7, sp, #0
 800e416:	60f8      	str	r0, [r7, #12]
 800e418:	460b      	mov	r3, r1
 800e41a:	607a      	str	r2, [r7, #4]
 800e41c:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 800e41e:	897b      	ldrh	r3, [r7, #10]
 800e420:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 800e426:	e007      	b.n	800e438 <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 800e428:	693b      	ldr	r3, [r7, #16]
 800e42a:	895b      	ldrh	r3, [r3, #10]
 800e42c:	8afa      	ldrh	r2, [r7, #22]
 800e42e:	1ad3      	subs	r3, r2, r3
 800e430:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 800e432:	693b      	ldr	r3, [r7, #16]
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 800e438:	693b      	ldr	r3, [r7, #16]
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d004      	beq.n	800e448 <pbuf_skip_const+0x38>
 800e43e:	693b      	ldr	r3, [r7, #16]
 800e440:	895b      	ldrh	r3, [r3, #10]
 800e442:	8afa      	ldrh	r2, [r7, #22]
 800e444:	429a      	cmp	r2, r3
 800e446:	d2ef      	bcs.n	800e428 <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d002      	beq.n	800e454 <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	8afa      	ldrh	r2, [r7, #22]
 800e452:	801a      	strh	r2, [r3, #0]
  }
  return q;
 800e454:	693b      	ldr	r3, [r7, #16]
}
 800e456:	4618      	mov	r0, r3
 800e458:	371c      	adds	r7, #28
 800e45a:	46bd      	mov	sp, r7
 800e45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e460:	4770      	bx	lr

0800e462 <pbuf_skip>:
 * @param out_offset resulting offset in the returned pbuf
 * @return the pbuf in the queue where the offset is
 */
struct pbuf *
pbuf_skip(struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 800e462:	b580      	push	{r7, lr}
 800e464:	b086      	sub	sp, #24
 800e466:	af00      	add	r7, sp, #0
 800e468:	60f8      	str	r0, [r7, #12]
 800e46a:	460b      	mov	r3, r1
 800e46c:	607a      	str	r2, [r7, #4]
 800e46e:	817b      	strh	r3, [r7, #10]
  const struct pbuf *out = pbuf_skip_const(in, in_offset, out_offset);
 800e470:	897b      	ldrh	r3, [r7, #10]
 800e472:	687a      	ldr	r2, [r7, #4]
 800e474:	4619      	mov	r1, r3
 800e476:	68f8      	ldr	r0, [r7, #12]
 800e478:	f7ff ffca 	bl	800e410 <pbuf_skip_const>
 800e47c:	6178      	str	r0, [r7, #20]
  return LWIP_CONST_CAST(struct pbuf *, out);
 800e47e:	697b      	ldr	r3, [r7, #20]
}
 800e480:	4618      	mov	r0, r3
 800e482:	3718      	adds	r7, #24
 800e484:	46bd      	mov	sp, r7
 800e486:	bd80      	pop	{r7, pc}

0800e488 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 800e488:	b580      	push	{r7, lr}
 800e48a:	b088      	sub	sp, #32
 800e48c:	af00      	add	r7, sp, #0
 800e48e:	60f8      	str	r0, [r7, #12]
 800e490:	60b9      	str	r1, [r7, #8]
 800e492:	4613      	mov	r3, r2
 800e494:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 800e496:	88fb      	ldrh	r3, [r7, #6]
 800e498:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 800e49a:	2300      	movs	r3, #0
 800e49c:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d109      	bne.n	800e4b8 <pbuf_take+0x30>
 800e4a4:	4b3a      	ldr	r3, [pc, #232]	@ (800e590 <pbuf_take+0x108>)
 800e4a6:	f240 42b3 	movw	r2, #1203	@ 0x4b3
 800e4aa:	493a      	ldr	r1, [pc, #232]	@ (800e594 <pbuf_take+0x10c>)
 800e4ac:	483a      	ldr	r0, [pc, #232]	@ (800e598 <pbuf_take+0x110>)
 800e4ae:	f009 fb8d 	bl	8017bcc <iprintf>
 800e4b2:	f06f 030f 	mvn.w	r3, #15
 800e4b6:	e067      	b.n	800e588 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800e4b8:	68bb      	ldr	r3, [r7, #8]
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d109      	bne.n	800e4d2 <pbuf_take+0x4a>
 800e4be:	4b34      	ldr	r3, [pc, #208]	@ (800e590 <pbuf_take+0x108>)
 800e4c0:	f240 42b4 	movw	r2, #1204	@ 0x4b4
 800e4c4:	4935      	ldr	r1, [pc, #212]	@ (800e59c <pbuf_take+0x114>)
 800e4c6:	4834      	ldr	r0, [pc, #208]	@ (800e598 <pbuf_take+0x110>)
 800e4c8:	f009 fb80 	bl	8017bcc <iprintf>
 800e4cc:	f06f 030f 	mvn.w	r3, #15
 800e4d0:	e05a      	b.n	800e588 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	891b      	ldrh	r3, [r3, #8]
 800e4d6:	88fa      	ldrh	r2, [r7, #6]
 800e4d8:	429a      	cmp	r2, r3
 800e4da:	d909      	bls.n	800e4f0 <pbuf_take+0x68>
 800e4dc:	4b2c      	ldr	r3, [pc, #176]	@ (800e590 <pbuf_take+0x108>)
 800e4de:	f240 42b5 	movw	r2, #1205	@ 0x4b5
 800e4e2:	492f      	ldr	r1, [pc, #188]	@ (800e5a0 <pbuf_take+0x118>)
 800e4e4:	482c      	ldr	r0, [pc, #176]	@ (800e598 <pbuf_take+0x110>)
 800e4e6:	f009 fb71 	bl	8017bcc <iprintf>
 800e4ea:	f04f 33ff 	mov.w	r3, #4294967295
 800e4ee:	e04b      	b.n	800e588 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d007      	beq.n	800e506 <pbuf_take+0x7e>
 800e4f6:	68bb      	ldr	r3, [r7, #8]
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d004      	beq.n	800e506 <pbuf_take+0x7e>
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	891b      	ldrh	r3, [r3, #8]
 800e500:	88fa      	ldrh	r2, [r7, #6]
 800e502:	429a      	cmp	r2, r3
 800e504:	d902      	bls.n	800e50c <pbuf_take+0x84>
    return ERR_ARG;
 800e506:	f06f 030f 	mvn.w	r3, #15
 800e50a:	e03d      	b.n	800e588 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	61fb      	str	r3, [r7, #28]
 800e510:	e028      	b.n	800e564 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 800e512:	69fb      	ldr	r3, [r7, #28]
 800e514:	2b00      	cmp	r3, #0
 800e516:	d106      	bne.n	800e526 <pbuf_take+0x9e>
 800e518:	4b1d      	ldr	r3, [pc, #116]	@ (800e590 <pbuf_take+0x108>)
 800e51a:	f240 42bd 	movw	r2, #1213	@ 0x4bd
 800e51e:	4921      	ldr	r1, [pc, #132]	@ (800e5a4 <pbuf_take+0x11c>)
 800e520:	481d      	ldr	r0, [pc, #116]	@ (800e598 <pbuf_take+0x110>)
 800e522:	f009 fb53 	bl	8017bcc <iprintf>
    buf_copy_len = total_copy_len;
 800e526:	697b      	ldr	r3, [r7, #20]
 800e528:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 800e52a:	69fb      	ldr	r3, [r7, #28]
 800e52c:	895b      	ldrh	r3, [r3, #10]
 800e52e:	461a      	mov	r2, r3
 800e530:	69bb      	ldr	r3, [r7, #24]
 800e532:	4293      	cmp	r3, r2
 800e534:	d902      	bls.n	800e53c <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 800e536:	69fb      	ldr	r3, [r7, #28]
 800e538:	895b      	ldrh	r3, [r3, #10]
 800e53a:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 800e53c:	69fb      	ldr	r3, [r7, #28]
 800e53e:	6858      	ldr	r0, [r3, #4]
 800e540:	68ba      	ldr	r2, [r7, #8]
 800e542:	693b      	ldr	r3, [r7, #16]
 800e544:	4413      	add	r3, r2
 800e546:	69ba      	ldr	r2, [r7, #24]
 800e548:	4619      	mov	r1, r3
 800e54a:	f009 fc96 	bl	8017e7a <memcpy>
    total_copy_len -= buf_copy_len;
 800e54e:	697a      	ldr	r2, [r7, #20]
 800e550:	69bb      	ldr	r3, [r7, #24]
 800e552:	1ad3      	subs	r3, r2, r3
 800e554:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 800e556:	693a      	ldr	r2, [r7, #16]
 800e558:	69bb      	ldr	r3, [r7, #24]
 800e55a:	4413      	add	r3, r2
 800e55c:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 800e55e:	69fb      	ldr	r3, [r7, #28]
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	61fb      	str	r3, [r7, #28]
 800e564:	697b      	ldr	r3, [r7, #20]
 800e566:	2b00      	cmp	r3, #0
 800e568:	d1d3      	bne.n	800e512 <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 800e56a:	697b      	ldr	r3, [r7, #20]
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d103      	bne.n	800e578 <pbuf_take+0xf0>
 800e570:	88fb      	ldrh	r3, [r7, #6]
 800e572:	693a      	ldr	r2, [r7, #16]
 800e574:	429a      	cmp	r2, r3
 800e576:	d006      	beq.n	800e586 <pbuf_take+0xfe>
 800e578:	4b05      	ldr	r3, [pc, #20]	@ (800e590 <pbuf_take+0x108>)
 800e57a:	f44f 6299 	mov.w	r2, #1224	@ 0x4c8
 800e57e:	490a      	ldr	r1, [pc, #40]	@ (800e5a8 <pbuf_take+0x120>)
 800e580:	4805      	ldr	r0, [pc, #20]	@ (800e598 <pbuf_take+0x110>)
 800e582:	f009 fb23 	bl	8017bcc <iprintf>
  return ERR_OK;
 800e586:	2300      	movs	r3, #0
}
 800e588:	4618      	mov	r0, r3
 800e58a:	3720      	adds	r7, #32
 800e58c:	46bd      	mov	sp, r7
 800e58e:	bd80      	pop	{r7, pc}
 800e590:	08020edc 	.word	0x08020edc
 800e594:	080212b4 	.word	0x080212b4
 800e598:	08020f3c 	.word	0x08020f3c
 800e59c:	080212cc 	.word	0x080212cc
 800e5a0:	080212e8 	.word	0x080212e8
 800e5a4:	08021308 	.word	0x08021308
 800e5a8:	08021320 	.word	0x08021320

0800e5ac <pbuf_take_at>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
 800e5ac:	b580      	push	{r7, lr}
 800e5ae:	b088      	sub	sp, #32
 800e5b0:	af00      	add	r7, sp, #0
 800e5b2:	60f8      	str	r0, [r7, #12]
 800e5b4:	60b9      	str	r1, [r7, #8]
 800e5b6:	4611      	mov	r1, r2
 800e5b8:	461a      	mov	r2, r3
 800e5ba:	460b      	mov	r3, r1
 800e5bc:	80fb      	strh	r3, [r7, #6]
 800e5be:	4613      	mov	r3, r2
 800e5c0:	80bb      	strh	r3, [r7, #4]
  u16_t target_offset;
  struct pbuf *q = pbuf_skip(buf, offset, &target_offset);
 800e5c2:	f107 0210 	add.w	r2, r7, #16
 800e5c6:	88bb      	ldrh	r3, [r7, #4]
 800e5c8:	4619      	mov	r1, r3
 800e5ca:	68f8      	ldr	r0, [r7, #12]
 800e5cc:	f7ff ff49 	bl	800e462 <pbuf_skip>
 800e5d0:	61f8      	str	r0, [r7, #28]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
 800e5d2:	69fb      	ldr	r3, [r7, #28]
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d047      	beq.n	800e668 <pbuf_take_at+0xbc>
 800e5d8:	69fb      	ldr	r3, [r7, #28]
 800e5da:	891b      	ldrh	r3, [r3, #8]
 800e5dc:	461a      	mov	r2, r3
 800e5de:	8a3b      	ldrh	r3, [r7, #16]
 800e5e0:	4619      	mov	r1, r3
 800e5e2:	88fb      	ldrh	r3, [r7, #6]
 800e5e4:	440b      	add	r3, r1
 800e5e6:	429a      	cmp	r2, r3
 800e5e8:	db3e      	blt.n	800e668 <pbuf_take_at+0xbc>
    u16_t remaining_len = len;
 800e5ea:	88fb      	ldrh	r3, [r7, #6]
 800e5ec:	837b      	strh	r3, [r7, #26]
    const u8_t *src_ptr = (const u8_t *)dataptr;
 800e5ee:	68bb      	ldr	r3, [r7, #8]
 800e5f0:	617b      	str	r3, [r7, #20]
    /* copy the part that goes into the first pbuf */
    u16_t first_copy_len;
    LWIP_ASSERT("check pbuf_skip result", target_offset < q->len);
 800e5f2:	69fb      	ldr	r3, [r7, #28]
 800e5f4:	895a      	ldrh	r2, [r3, #10]
 800e5f6:	8a3b      	ldrh	r3, [r7, #16]
 800e5f8:	429a      	cmp	r2, r3
 800e5fa:	d806      	bhi.n	800e60a <pbuf_take_at+0x5e>
 800e5fc:	4b1d      	ldr	r3, [pc, #116]	@ (800e674 <pbuf_take_at+0xc8>)
 800e5fe:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 800e602:	491d      	ldr	r1, [pc, #116]	@ (800e678 <pbuf_take_at+0xcc>)
 800e604:	481d      	ldr	r0, [pc, #116]	@ (800e67c <pbuf_take_at+0xd0>)
 800e606:	f009 fae1 	bl	8017bcc <iprintf>
    first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
 800e60a:	69fb      	ldr	r3, [r7, #28]
 800e60c:	895b      	ldrh	r3, [r3, #10]
 800e60e:	461a      	mov	r2, r3
 800e610:	8a3b      	ldrh	r3, [r7, #16]
 800e612:	1ad2      	subs	r2, r2, r3
 800e614:	88fb      	ldrh	r3, [r7, #6]
 800e616:	429a      	cmp	r2, r3
 800e618:	da05      	bge.n	800e626 <pbuf_take_at+0x7a>
 800e61a:	69fb      	ldr	r3, [r7, #28]
 800e61c:	895a      	ldrh	r2, [r3, #10]
 800e61e:	8a3b      	ldrh	r3, [r7, #16]
 800e620:	1ad3      	subs	r3, r2, r3
 800e622:	b29b      	uxth	r3, r3
 800e624:	e000      	b.n	800e628 <pbuf_take_at+0x7c>
 800e626:	88fb      	ldrh	r3, [r7, #6]
 800e628:	827b      	strh	r3, [r7, #18]
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 800e62a:	69fb      	ldr	r3, [r7, #28]
 800e62c:	685b      	ldr	r3, [r3, #4]
 800e62e:	8a3a      	ldrh	r2, [r7, #16]
 800e630:	4413      	add	r3, r2
 800e632:	8a7a      	ldrh	r2, [r7, #18]
 800e634:	68b9      	ldr	r1, [r7, #8]
 800e636:	4618      	mov	r0, r3
 800e638:	f009 fc1f 	bl	8017e7a <memcpy>
    remaining_len = (u16_t)(remaining_len - first_copy_len);
 800e63c:	8b7a      	ldrh	r2, [r7, #26]
 800e63e:	8a7b      	ldrh	r3, [r7, #18]
 800e640:	1ad3      	subs	r3, r2, r3
 800e642:	837b      	strh	r3, [r7, #26]
    src_ptr += first_copy_len;
 800e644:	8a7b      	ldrh	r3, [r7, #18]
 800e646:	697a      	ldr	r2, [r7, #20]
 800e648:	4413      	add	r3, r2
 800e64a:	617b      	str	r3, [r7, #20]
    if (remaining_len > 0) {
 800e64c:	8b7b      	ldrh	r3, [r7, #26]
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d008      	beq.n	800e664 <pbuf_take_at+0xb8>
      return pbuf_take(q->next, src_ptr, remaining_len);
 800e652:	69fb      	ldr	r3, [r7, #28]
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	8b7a      	ldrh	r2, [r7, #26]
 800e658:	6979      	ldr	r1, [r7, #20]
 800e65a:	4618      	mov	r0, r3
 800e65c:	f7ff ff14 	bl	800e488 <pbuf_take>
 800e660:	4603      	mov	r3, r0
 800e662:	e003      	b.n	800e66c <pbuf_take_at+0xc0>
    }
    return ERR_OK;
 800e664:	2300      	movs	r3, #0
 800e666:	e001      	b.n	800e66c <pbuf_take_at+0xc0>
  }
  return ERR_MEM;
 800e668:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e66c:	4618      	mov	r0, r3
 800e66e:	3720      	adds	r7, #32
 800e670:	46bd      	mov	sp, r7
 800e672:	bd80      	pop	{r7, pc}
 800e674:	08020edc 	.word	0x08020edc
 800e678:	08021338 	.word	0x08021338
 800e67c:	08020f3c 	.word	0x08020f3c

0800e680 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800e680:	b580      	push	{r7, lr}
 800e682:	b084      	sub	sp, #16
 800e684:	af00      	add	r7, sp, #0
 800e686:	4603      	mov	r3, r0
 800e688:	603a      	str	r2, [r7, #0]
 800e68a:	71fb      	strb	r3, [r7, #7]
 800e68c:	460b      	mov	r3, r1
 800e68e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800e690:	683b      	ldr	r3, [r7, #0]
 800e692:	8919      	ldrh	r1, [r3, #8]
 800e694:	88ba      	ldrh	r2, [r7, #4]
 800e696:	79fb      	ldrb	r3, [r7, #7]
 800e698:	4618      	mov	r0, r3
 800e69a:	f7ff f969 	bl	800d970 <pbuf_alloc>
 800e69e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d101      	bne.n	800e6aa <pbuf_clone+0x2a>
    return NULL;
 800e6a6:	2300      	movs	r3, #0
 800e6a8:	e011      	b.n	800e6ce <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800e6aa:	6839      	ldr	r1, [r7, #0]
 800e6ac:	68f8      	ldr	r0, [r7, #12]
 800e6ae:	f7ff fd6b 	bl	800e188 <pbuf_copy>
 800e6b2:	4603      	mov	r3, r0
 800e6b4:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800e6b6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d006      	beq.n	800e6cc <pbuf_clone+0x4c>
 800e6be:	4b06      	ldr	r3, [pc, #24]	@ (800e6d8 <pbuf_clone+0x58>)
 800e6c0:	f240 5224 	movw	r2, #1316	@ 0x524
 800e6c4:	4905      	ldr	r1, [pc, #20]	@ (800e6dc <pbuf_clone+0x5c>)
 800e6c6:	4806      	ldr	r0, [pc, #24]	@ (800e6e0 <pbuf_clone+0x60>)
 800e6c8:	f009 fa80 	bl	8017bcc <iprintf>
  return q;
 800e6cc:	68fb      	ldr	r3, [r7, #12]
}
 800e6ce:	4618      	mov	r0, r3
 800e6d0:	3710      	adds	r7, #16
 800e6d2:	46bd      	mov	sp, r7
 800e6d4:	bd80      	pop	{r7, pc}
 800e6d6:	bf00      	nop
 800e6d8:	08020edc 	.word	0x08020edc
 800e6dc:	08021350 	.word	0x08021350
 800e6e0:	08020f3c 	.word	0x08020f3c

0800e6e4 <pbuf_put_at>:
 * @param offset offset into p of the byte to write
 * @param data byte to write at an offset into p
 */
void
pbuf_put_at(struct pbuf *p, u16_t offset, u8_t data)
{
 800e6e4:	b580      	push	{r7, lr}
 800e6e6:	b084      	sub	sp, #16
 800e6e8:	af00      	add	r7, sp, #0
 800e6ea:	6078      	str	r0, [r7, #4]
 800e6ec:	460b      	mov	r3, r1
 800e6ee:	807b      	strh	r3, [r7, #2]
 800e6f0:	4613      	mov	r3, r2
 800e6f2:	707b      	strb	r3, [r7, #1]
  u16_t q_idx;
  struct pbuf *q = pbuf_skip(p, offset, &q_idx);
 800e6f4:	f107 020a 	add.w	r2, r7, #10
 800e6f8:	887b      	ldrh	r3, [r7, #2]
 800e6fa:	4619      	mov	r1, r3
 800e6fc:	6878      	ldr	r0, [r7, #4]
 800e6fe:	f7ff feb0 	bl	800e462 <pbuf_skip>
 800e702:	60f8      	str	r0, [r7, #12]

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	2b00      	cmp	r3, #0
 800e708:	d00a      	beq.n	800e720 <pbuf_put_at+0x3c>
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	895a      	ldrh	r2, [r3, #10]
 800e70e:	897b      	ldrh	r3, [r7, #10]
 800e710:	429a      	cmp	r2, r3
 800e712:	d905      	bls.n	800e720 <pbuf_put_at+0x3c>
    ((u8_t *)q->payload)[q_idx] = data;
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	685b      	ldr	r3, [r3, #4]
 800e718:	897a      	ldrh	r2, [r7, #10]
 800e71a:	4413      	add	r3, r2
 800e71c:	787a      	ldrb	r2, [r7, #1]
 800e71e:	701a      	strb	r2, [r3, #0]
  }
}
 800e720:	bf00      	nop
 800e722:	3710      	adds	r7, #16
 800e724:	46bd      	mov	sp, r7
 800e726:	bd80      	pop	{r7, pc}

0800e728 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800e728:	b580      	push	{r7, lr}
 800e72a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800e72c:	f008 fabc 	bl	8016ca8 <rand>
 800e730:	4603      	mov	r3, r0
 800e732:	b29b      	uxth	r3, r3
 800e734:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800e738:	b29b      	uxth	r3, r3
 800e73a:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800e73e:	b29a      	uxth	r2, r3
 800e740:	4b01      	ldr	r3, [pc, #4]	@ (800e748 <tcp_init+0x20>)
 800e742:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800e744:	bf00      	nop
 800e746:	bd80      	pop	{r7, pc}
 800e748:	20000910 	.word	0x20000910

0800e74c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800e74c:	b580      	push	{r7, lr}
 800e74e:	b082      	sub	sp, #8
 800e750:	af00      	add	r7, sp, #0
 800e752:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	7d1b      	ldrb	r3, [r3, #20]
 800e758:	2b01      	cmp	r3, #1
 800e75a:	d105      	bne.n	800e768 <tcp_free+0x1c>
 800e75c:	4b06      	ldr	r3, [pc, #24]	@ (800e778 <tcp_free+0x2c>)
 800e75e:	22d4      	movs	r2, #212	@ 0xd4
 800e760:	4906      	ldr	r1, [pc, #24]	@ (800e77c <tcp_free+0x30>)
 800e762:	4807      	ldr	r0, [pc, #28]	@ (800e780 <tcp_free+0x34>)
 800e764:	f009 fa32 	bl	8017bcc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800e768:	6879      	ldr	r1, [r7, #4]
 800e76a:	2001      	movs	r0, #1
 800e76c:	f7fe fd6e 	bl	800d24c <memp_free>
}
 800e770:	bf00      	nop
 800e772:	3708      	adds	r7, #8
 800e774:	46bd      	mov	sp, r7
 800e776:	bd80      	pop	{r7, pc}
 800e778:	080213dc 	.word	0x080213dc
 800e77c:	0802140c 	.word	0x0802140c
 800e780:	08021420 	.word	0x08021420

0800e784 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800e784:	b580      	push	{r7, lr}
 800e786:	b082      	sub	sp, #8
 800e788:	af00      	add	r7, sp, #0
 800e78a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	7d1b      	ldrb	r3, [r3, #20]
 800e790:	2b01      	cmp	r3, #1
 800e792:	d105      	bne.n	800e7a0 <tcp_free_listen+0x1c>
 800e794:	4b06      	ldr	r3, [pc, #24]	@ (800e7b0 <tcp_free_listen+0x2c>)
 800e796:	22df      	movs	r2, #223	@ 0xdf
 800e798:	4906      	ldr	r1, [pc, #24]	@ (800e7b4 <tcp_free_listen+0x30>)
 800e79a:	4807      	ldr	r0, [pc, #28]	@ (800e7b8 <tcp_free_listen+0x34>)
 800e79c:	f009 fa16 	bl	8017bcc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800e7a0:	6879      	ldr	r1, [r7, #4]
 800e7a2:	2002      	movs	r0, #2
 800e7a4:	f7fe fd52 	bl	800d24c <memp_free>
}
 800e7a8:	bf00      	nop
 800e7aa:	3708      	adds	r7, #8
 800e7ac:	46bd      	mov	sp, r7
 800e7ae:	bd80      	pop	{r7, pc}
 800e7b0:	080213dc 	.word	0x080213dc
 800e7b4:	08021448 	.word	0x08021448
 800e7b8:	08021420 	.word	0x08021420

0800e7bc <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800e7bc:	b580      	push	{r7, lr}
 800e7be:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800e7c0:	f000 fea4 	bl	800f50c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800e7c4:	4b07      	ldr	r3, [pc, #28]	@ (800e7e4 <tcp_tmr+0x28>)
 800e7c6:	781b      	ldrb	r3, [r3, #0]
 800e7c8:	3301      	adds	r3, #1
 800e7ca:	b2da      	uxtb	r2, r3
 800e7cc:	4b05      	ldr	r3, [pc, #20]	@ (800e7e4 <tcp_tmr+0x28>)
 800e7ce:	701a      	strb	r2, [r3, #0]
 800e7d0:	4b04      	ldr	r3, [pc, #16]	@ (800e7e4 <tcp_tmr+0x28>)
 800e7d2:	781b      	ldrb	r3, [r3, #0]
 800e7d4:	f003 0301 	and.w	r3, r3, #1
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d001      	beq.n	800e7e0 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800e7dc:	f000 fb54 	bl	800ee88 <tcp_slowtmr>
  }
}
 800e7e0:	bf00      	nop
 800e7e2:	bd80      	pop	{r7, pc}
 800e7e4:	20015261 	.word	0x20015261

0800e7e8 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800e7e8:	b580      	push	{r7, lr}
 800e7ea:	b084      	sub	sp, #16
 800e7ec:	af00      	add	r7, sp, #0
 800e7ee:	6078      	str	r0, [r7, #4]
 800e7f0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800e7f2:	683b      	ldr	r3, [r7, #0]
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d105      	bne.n	800e804 <tcp_remove_listener+0x1c>
 800e7f8:	4b0d      	ldr	r3, [pc, #52]	@ (800e830 <tcp_remove_listener+0x48>)
 800e7fa:	22ff      	movs	r2, #255	@ 0xff
 800e7fc:	490d      	ldr	r1, [pc, #52]	@ (800e834 <tcp_remove_listener+0x4c>)
 800e7fe:	480e      	ldr	r0, [pc, #56]	@ (800e838 <tcp_remove_listener+0x50>)
 800e800:	f009 f9e4 	bl	8017bcc <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	60fb      	str	r3, [r7, #12]
 800e808:	e00a      	b.n	800e820 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e80e:	683a      	ldr	r2, [r7, #0]
 800e810:	429a      	cmp	r2, r3
 800e812:	d102      	bne.n	800e81a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	2200      	movs	r2, #0
 800e818:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	68db      	ldr	r3, [r3, #12]
 800e81e:	60fb      	str	r3, [r7, #12]
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	2b00      	cmp	r3, #0
 800e824:	d1f1      	bne.n	800e80a <tcp_remove_listener+0x22>
    }
  }
}
 800e826:	bf00      	nop
 800e828:	bf00      	nop
 800e82a:	3710      	adds	r7, #16
 800e82c:	46bd      	mov	sp, r7
 800e82e:	bd80      	pop	{r7, pc}
 800e830:	080213dc 	.word	0x080213dc
 800e834:	08021464 	.word	0x08021464
 800e838:	08021420 	.word	0x08021420

0800e83c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800e83c:	b580      	push	{r7, lr}
 800e83e:	b084      	sub	sp, #16
 800e840:	af00      	add	r7, sp, #0
 800e842:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	2b00      	cmp	r3, #0
 800e848:	d106      	bne.n	800e858 <tcp_listen_closed+0x1c>
 800e84a:	4b14      	ldr	r3, [pc, #80]	@ (800e89c <tcp_listen_closed+0x60>)
 800e84c:	f240 1211 	movw	r2, #273	@ 0x111
 800e850:	4913      	ldr	r1, [pc, #76]	@ (800e8a0 <tcp_listen_closed+0x64>)
 800e852:	4814      	ldr	r0, [pc, #80]	@ (800e8a4 <tcp_listen_closed+0x68>)
 800e854:	f009 f9ba 	bl	8017bcc <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	7d1b      	ldrb	r3, [r3, #20]
 800e85c:	2b01      	cmp	r3, #1
 800e85e:	d006      	beq.n	800e86e <tcp_listen_closed+0x32>
 800e860:	4b0e      	ldr	r3, [pc, #56]	@ (800e89c <tcp_listen_closed+0x60>)
 800e862:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800e866:	4910      	ldr	r1, [pc, #64]	@ (800e8a8 <tcp_listen_closed+0x6c>)
 800e868:	480e      	ldr	r0, [pc, #56]	@ (800e8a4 <tcp_listen_closed+0x68>)
 800e86a:	f009 f9af 	bl	8017bcc <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800e86e:	2301      	movs	r3, #1
 800e870:	60fb      	str	r3, [r7, #12]
 800e872:	e00b      	b.n	800e88c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800e874:	4a0d      	ldr	r2, [pc, #52]	@ (800e8ac <tcp_listen_closed+0x70>)
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	6879      	ldr	r1, [r7, #4]
 800e880:	4618      	mov	r0, r3
 800e882:	f7ff ffb1 	bl	800e7e8 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	3301      	adds	r3, #1
 800e88a:	60fb      	str	r3, [r7, #12]
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	2b03      	cmp	r3, #3
 800e890:	d9f0      	bls.n	800e874 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800e892:	bf00      	nop
 800e894:	bf00      	nop
 800e896:	3710      	adds	r7, #16
 800e898:	46bd      	mov	sp, r7
 800e89a:	bd80      	pop	{r7, pc}
 800e89c:	080213dc 	.word	0x080213dc
 800e8a0:	0802148c 	.word	0x0802148c
 800e8a4:	08021420 	.word	0x08021420
 800e8a8:	08021498 	.word	0x08021498
 800e8ac:	080233bc 	.word	0x080233bc

0800e8b0 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800e8b0:	b5b0      	push	{r4, r5, r7, lr}
 800e8b2:	b088      	sub	sp, #32
 800e8b4:	af04      	add	r7, sp, #16
 800e8b6:	6078      	str	r0, [r7, #4]
 800e8b8:	460b      	mov	r3, r1
 800e8ba:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d106      	bne.n	800e8d0 <tcp_close_shutdown+0x20>
 800e8c2:	4b63      	ldr	r3, [pc, #396]	@ (800ea50 <tcp_close_shutdown+0x1a0>)
 800e8c4:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800e8c8:	4962      	ldr	r1, [pc, #392]	@ (800ea54 <tcp_close_shutdown+0x1a4>)
 800e8ca:	4863      	ldr	r0, [pc, #396]	@ (800ea58 <tcp_close_shutdown+0x1a8>)
 800e8cc:	f009 f97e 	bl	8017bcc <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800e8d0:	78fb      	ldrb	r3, [r7, #3]
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d066      	beq.n	800e9a4 <tcp_close_shutdown+0xf4>
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	7d1b      	ldrb	r3, [r3, #20]
 800e8da:	2b04      	cmp	r3, #4
 800e8dc:	d003      	beq.n	800e8e6 <tcp_close_shutdown+0x36>
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	7d1b      	ldrb	r3, [r3, #20]
 800e8e2:	2b07      	cmp	r3, #7
 800e8e4:	d15e      	bne.n	800e9a4 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d104      	bne.n	800e8f8 <tcp_close_shutdown+0x48>
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e8f2:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800e8f6:	d055      	beq.n	800e9a4 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	8b5b      	ldrh	r3, [r3, #26]
 800e8fc:	f003 0310 	and.w	r3, r3, #16
 800e900:	2b00      	cmp	r3, #0
 800e902:	d106      	bne.n	800e912 <tcp_close_shutdown+0x62>
 800e904:	4b52      	ldr	r3, [pc, #328]	@ (800ea50 <tcp_close_shutdown+0x1a0>)
 800e906:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800e90a:	4954      	ldr	r1, [pc, #336]	@ (800ea5c <tcp_close_shutdown+0x1ac>)
 800e90c:	4852      	ldr	r0, [pc, #328]	@ (800ea58 <tcp_close_shutdown+0x1a8>)
 800e90e:	f009 f95d 	bl	8017bcc <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800e91a:	687d      	ldr	r5, [r7, #4]
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	3304      	adds	r3, #4
 800e920:	687a      	ldr	r2, [r7, #4]
 800e922:	8ad2      	ldrh	r2, [r2, #22]
 800e924:	6879      	ldr	r1, [r7, #4]
 800e926:	8b09      	ldrh	r1, [r1, #24]
 800e928:	9102      	str	r1, [sp, #8]
 800e92a:	9201      	str	r2, [sp, #4]
 800e92c:	9300      	str	r3, [sp, #0]
 800e92e:	462b      	mov	r3, r5
 800e930:	4622      	mov	r2, r4
 800e932:	4601      	mov	r1, r0
 800e934:	6878      	ldr	r0, [r7, #4]
 800e936:	f004 fe8d 	bl	8013654 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800e93a:	6878      	ldr	r0, [r7, #4]
 800e93c:	f001 f8c8 	bl	800fad0 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800e940:	4b47      	ldr	r3, [pc, #284]	@ (800ea60 <tcp_close_shutdown+0x1b0>)
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	687a      	ldr	r2, [r7, #4]
 800e946:	429a      	cmp	r2, r3
 800e948:	d105      	bne.n	800e956 <tcp_close_shutdown+0xa6>
 800e94a:	4b45      	ldr	r3, [pc, #276]	@ (800ea60 <tcp_close_shutdown+0x1b0>)
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	68db      	ldr	r3, [r3, #12]
 800e950:	4a43      	ldr	r2, [pc, #268]	@ (800ea60 <tcp_close_shutdown+0x1b0>)
 800e952:	6013      	str	r3, [r2, #0]
 800e954:	e013      	b.n	800e97e <tcp_close_shutdown+0xce>
 800e956:	4b42      	ldr	r3, [pc, #264]	@ (800ea60 <tcp_close_shutdown+0x1b0>)
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	60fb      	str	r3, [r7, #12]
 800e95c:	e00c      	b.n	800e978 <tcp_close_shutdown+0xc8>
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	68db      	ldr	r3, [r3, #12]
 800e962:	687a      	ldr	r2, [r7, #4]
 800e964:	429a      	cmp	r2, r3
 800e966:	d104      	bne.n	800e972 <tcp_close_shutdown+0xc2>
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	68da      	ldr	r2, [r3, #12]
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	60da      	str	r2, [r3, #12]
 800e970:	e005      	b.n	800e97e <tcp_close_shutdown+0xce>
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	68db      	ldr	r3, [r3, #12]
 800e976:	60fb      	str	r3, [r7, #12]
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d1ef      	bne.n	800e95e <tcp_close_shutdown+0xae>
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	2200      	movs	r2, #0
 800e982:	60da      	str	r2, [r3, #12]
 800e984:	4b37      	ldr	r3, [pc, #220]	@ (800ea64 <tcp_close_shutdown+0x1b4>)
 800e986:	2201      	movs	r2, #1
 800e988:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800e98a:	4b37      	ldr	r3, [pc, #220]	@ (800ea68 <tcp_close_shutdown+0x1b8>)
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	687a      	ldr	r2, [r7, #4]
 800e990:	429a      	cmp	r2, r3
 800e992:	d102      	bne.n	800e99a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800e994:	f003 fd5c 	bl	8012450 <tcp_trigger_input_pcb_close>
 800e998:	e002      	b.n	800e9a0 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800e99a:	6878      	ldr	r0, [r7, #4]
 800e99c:	f7ff fed6 	bl	800e74c <tcp_free>
      }
      return ERR_OK;
 800e9a0:	2300      	movs	r3, #0
 800e9a2:	e050      	b.n	800ea46 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	7d1b      	ldrb	r3, [r3, #20]
 800e9a8:	2b02      	cmp	r3, #2
 800e9aa:	d03b      	beq.n	800ea24 <tcp_close_shutdown+0x174>
 800e9ac:	2b02      	cmp	r3, #2
 800e9ae:	dc44      	bgt.n	800ea3a <tcp_close_shutdown+0x18a>
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d002      	beq.n	800e9ba <tcp_close_shutdown+0x10a>
 800e9b4:	2b01      	cmp	r3, #1
 800e9b6:	d02a      	beq.n	800ea0e <tcp_close_shutdown+0x15e>
 800e9b8:	e03f      	b.n	800ea3a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	8adb      	ldrh	r3, [r3, #22]
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d021      	beq.n	800ea06 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e9c2:	4b2a      	ldr	r3, [pc, #168]	@ (800ea6c <tcp_close_shutdown+0x1bc>)
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	687a      	ldr	r2, [r7, #4]
 800e9c8:	429a      	cmp	r2, r3
 800e9ca:	d105      	bne.n	800e9d8 <tcp_close_shutdown+0x128>
 800e9cc:	4b27      	ldr	r3, [pc, #156]	@ (800ea6c <tcp_close_shutdown+0x1bc>)
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	68db      	ldr	r3, [r3, #12]
 800e9d2:	4a26      	ldr	r2, [pc, #152]	@ (800ea6c <tcp_close_shutdown+0x1bc>)
 800e9d4:	6013      	str	r3, [r2, #0]
 800e9d6:	e013      	b.n	800ea00 <tcp_close_shutdown+0x150>
 800e9d8:	4b24      	ldr	r3, [pc, #144]	@ (800ea6c <tcp_close_shutdown+0x1bc>)
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	60bb      	str	r3, [r7, #8]
 800e9de:	e00c      	b.n	800e9fa <tcp_close_shutdown+0x14a>
 800e9e0:	68bb      	ldr	r3, [r7, #8]
 800e9e2:	68db      	ldr	r3, [r3, #12]
 800e9e4:	687a      	ldr	r2, [r7, #4]
 800e9e6:	429a      	cmp	r2, r3
 800e9e8:	d104      	bne.n	800e9f4 <tcp_close_shutdown+0x144>
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	68da      	ldr	r2, [r3, #12]
 800e9ee:	68bb      	ldr	r3, [r7, #8]
 800e9f0:	60da      	str	r2, [r3, #12]
 800e9f2:	e005      	b.n	800ea00 <tcp_close_shutdown+0x150>
 800e9f4:	68bb      	ldr	r3, [r7, #8]
 800e9f6:	68db      	ldr	r3, [r3, #12]
 800e9f8:	60bb      	str	r3, [r7, #8]
 800e9fa:	68bb      	ldr	r3, [r7, #8]
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d1ef      	bne.n	800e9e0 <tcp_close_shutdown+0x130>
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	2200      	movs	r2, #0
 800ea04:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800ea06:	6878      	ldr	r0, [r7, #4]
 800ea08:	f7ff fea0 	bl	800e74c <tcp_free>
      break;
 800ea0c:	e01a      	b.n	800ea44 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800ea0e:	6878      	ldr	r0, [r7, #4]
 800ea10:	f7ff ff14 	bl	800e83c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800ea14:	6879      	ldr	r1, [r7, #4]
 800ea16:	4816      	ldr	r0, [pc, #88]	@ (800ea70 <tcp_close_shutdown+0x1c0>)
 800ea18:	f001 f8aa 	bl	800fb70 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800ea1c:	6878      	ldr	r0, [r7, #4]
 800ea1e:	f7ff feb1 	bl	800e784 <tcp_free_listen>
      break;
 800ea22:	e00f      	b.n	800ea44 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800ea24:	6879      	ldr	r1, [r7, #4]
 800ea26:	480e      	ldr	r0, [pc, #56]	@ (800ea60 <tcp_close_shutdown+0x1b0>)
 800ea28:	f001 f8a2 	bl	800fb70 <tcp_pcb_remove>
 800ea2c:	4b0d      	ldr	r3, [pc, #52]	@ (800ea64 <tcp_close_shutdown+0x1b4>)
 800ea2e:	2201      	movs	r2, #1
 800ea30:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800ea32:	6878      	ldr	r0, [r7, #4]
 800ea34:	f7ff fe8a 	bl	800e74c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800ea38:	e004      	b.n	800ea44 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800ea3a:	6878      	ldr	r0, [r7, #4]
 800ea3c:	f000 f81a 	bl	800ea74 <tcp_close_shutdown_fin>
 800ea40:	4603      	mov	r3, r0
 800ea42:	e000      	b.n	800ea46 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800ea44:	2300      	movs	r3, #0
}
 800ea46:	4618      	mov	r0, r3
 800ea48:	3710      	adds	r7, #16
 800ea4a:	46bd      	mov	sp, r7
 800ea4c:	bdb0      	pop	{r4, r5, r7, pc}
 800ea4e:	bf00      	nop
 800ea50:	080213dc 	.word	0x080213dc
 800ea54:	080214b0 	.word	0x080214b0
 800ea58:	08021420 	.word	0x08021420
 800ea5c:	080214d0 	.word	0x080214d0
 800ea60:	20015258 	.word	0x20015258
 800ea64:	20015260 	.word	0x20015260
 800ea68:	20015298 	.word	0x20015298
 800ea6c:	20015250 	.word	0x20015250
 800ea70:	20015254 	.word	0x20015254

0800ea74 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800ea74:	b580      	push	{r7, lr}
 800ea76:	b084      	sub	sp, #16
 800ea78:	af00      	add	r7, sp, #0
 800ea7a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d106      	bne.n	800ea90 <tcp_close_shutdown_fin+0x1c>
 800ea82:	4b2e      	ldr	r3, [pc, #184]	@ (800eb3c <tcp_close_shutdown_fin+0xc8>)
 800ea84:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800ea88:	492d      	ldr	r1, [pc, #180]	@ (800eb40 <tcp_close_shutdown_fin+0xcc>)
 800ea8a:	482e      	ldr	r0, [pc, #184]	@ (800eb44 <tcp_close_shutdown_fin+0xd0>)
 800ea8c:	f009 f89e 	bl	8017bcc <iprintf>

  switch (pcb->state) {
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	7d1b      	ldrb	r3, [r3, #20]
 800ea94:	2b07      	cmp	r3, #7
 800ea96:	d020      	beq.n	800eada <tcp_close_shutdown_fin+0x66>
 800ea98:	2b07      	cmp	r3, #7
 800ea9a:	dc2b      	bgt.n	800eaf4 <tcp_close_shutdown_fin+0x80>
 800ea9c:	2b03      	cmp	r3, #3
 800ea9e:	d002      	beq.n	800eaa6 <tcp_close_shutdown_fin+0x32>
 800eaa0:	2b04      	cmp	r3, #4
 800eaa2:	d00d      	beq.n	800eac0 <tcp_close_shutdown_fin+0x4c>
 800eaa4:	e026      	b.n	800eaf4 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800eaa6:	6878      	ldr	r0, [r7, #4]
 800eaa8:	f003 fee2 	bl	8012870 <tcp_send_fin>
 800eaac:	4603      	mov	r3, r0
 800eaae:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800eab0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d11f      	bne.n	800eaf8 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	2205      	movs	r2, #5
 800eabc:	751a      	strb	r2, [r3, #20]
      }
      break;
 800eabe:	e01b      	b.n	800eaf8 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800eac0:	6878      	ldr	r0, [r7, #4]
 800eac2:	f003 fed5 	bl	8012870 <tcp_send_fin>
 800eac6:	4603      	mov	r3, r0
 800eac8:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800eaca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d114      	bne.n	800eafc <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	2205      	movs	r2, #5
 800ead6:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ead8:	e010      	b.n	800eafc <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800eada:	6878      	ldr	r0, [r7, #4]
 800eadc:	f003 fec8 	bl	8012870 <tcp_send_fin>
 800eae0:	4603      	mov	r3, r0
 800eae2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800eae4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d109      	bne.n	800eb00 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	2209      	movs	r2, #9
 800eaf0:	751a      	strb	r2, [r3, #20]
      }
      break;
 800eaf2:	e005      	b.n	800eb00 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800eaf4:	2300      	movs	r3, #0
 800eaf6:	e01c      	b.n	800eb32 <tcp_close_shutdown_fin+0xbe>
      break;
 800eaf8:	bf00      	nop
 800eafa:	e002      	b.n	800eb02 <tcp_close_shutdown_fin+0x8e>
      break;
 800eafc:	bf00      	nop
 800eafe:	e000      	b.n	800eb02 <tcp_close_shutdown_fin+0x8e>
      break;
 800eb00:	bf00      	nop
  }

  if (err == ERR_OK) {
 800eb02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d103      	bne.n	800eb12 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800eb0a:	6878      	ldr	r0, [r7, #4]
 800eb0c:	f003 ffee 	bl	8012aec <tcp_output>
 800eb10:	e00d      	b.n	800eb2e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800eb12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eb16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb1a:	d108      	bne.n	800eb2e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	8b5b      	ldrh	r3, [r3, #26]
 800eb20:	f043 0308 	orr.w	r3, r3, #8
 800eb24:	b29a      	uxth	r2, r3
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800eb2a:	2300      	movs	r3, #0
 800eb2c:	e001      	b.n	800eb32 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800eb2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800eb32:	4618      	mov	r0, r3
 800eb34:	3710      	adds	r7, #16
 800eb36:	46bd      	mov	sp, r7
 800eb38:	bd80      	pop	{r7, pc}
 800eb3a:	bf00      	nop
 800eb3c:	080213dc 	.word	0x080213dc
 800eb40:	0802148c 	.word	0x0802148c
 800eb44:	08021420 	.word	0x08021420

0800eb48 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800eb48:	b580      	push	{r7, lr}
 800eb4a:	b082      	sub	sp, #8
 800eb4c:	af00      	add	r7, sp, #0
 800eb4e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d109      	bne.n	800eb6a <tcp_close+0x22>
 800eb56:	4b0f      	ldr	r3, [pc, #60]	@ (800eb94 <tcp_close+0x4c>)
 800eb58:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800eb5c:	490e      	ldr	r1, [pc, #56]	@ (800eb98 <tcp_close+0x50>)
 800eb5e:	480f      	ldr	r0, [pc, #60]	@ (800eb9c <tcp_close+0x54>)
 800eb60:	f009 f834 	bl	8017bcc <iprintf>
 800eb64:	f06f 030f 	mvn.w	r3, #15
 800eb68:	e00f      	b.n	800eb8a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	7d1b      	ldrb	r3, [r3, #20]
 800eb6e:	2b01      	cmp	r3, #1
 800eb70:	d006      	beq.n	800eb80 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	8b5b      	ldrh	r3, [r3, #26]
 800eb76:	f043 0310 	orr.w	r3, r3, #16
 800eb7a:	b29a      	uxth	r2, r3
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800eb80:	2101      	movs	r1, #1
 800eb82:	6878      	ldr	r0, [r7, #4]
 800eb84:	f7ff fe94 	bl	800e8b0 <tcp_close_shutdown>
 800eb88:	4603      	mov	r3, r0
}
 800eb8a:	4618      	mov	r0, r3
 800eb8c:	3708      	adds	r7, #8
 800eb8e:	46bd      	mov	sp, r7
 800eb90:	bd80      	pop	{r7, pc}
 800eb92:	bf00      	nop
 800eb94:	080213dc 	.word	0x080213dc
 800eb98:	080214ec 	.word	0x080214ec
 800eb9c:	08021420 	.word	0x08021420

0800eba0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800eba0:	b580      	push	{r7, lr}
 800eba2:	b08e      	sub	sp, #56	@ 0x38
 800eba4:	af04      	add	r7, sp, #16
 800eba6:	6078      	str	r0, [r7, #4]
 800eba8:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d107      	bne.n	800ebc0 <tcp_abandon+0x20>
 800ebb0:	4b52      	ldr	r3, [pc, #328]	@ (800ecfc <tcp_abandon+0x15c>)
 800ebb2:	f240 223d 	movw	r2, #573	@ 0x23d
 800ebb6:	4952      	ldr	r1, [pc, #328]	@ (800ed00 <tcp_abandon+0x160>)
 800ebb8:	4852      	ldr	r0, [pc, #328]	@ (800ed04 <tcp_abandon+0x164>)
 800ebba:	f009 f807 	bl	8017bcc <iprintf>
 800ebbe:	e099      	b.n	800ecf4 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	7d1b      	ldrb	r3, [r3, #20]
 800ebc4:	2b01      	cmp	r3, #1
 800ebc6:	d106      	bne.n	800ebd6 <tcp_abandon+0x36>
 800ebc8:	4b4c      	ldr	r3, [pc, #304]	@ (800ecfc <tcp_abandon+0x15c>)
 800ebca:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800ebce:	494e      	ldr	r1, [pc, #312]	@ (800ed08 <tcp_abandon+0x168>)
 800ebd0:	484c      	ldr	r0, [pc, #304]	@ (800ed04 <tcp_abandon+0x164>)
 800ebd2:	f008 fffb 	bl	8017bcc <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	7d1b      	ldrb	r3, [r3, #20]
 800ebda:	2b0a      	cmp	r3, #10
 800ebdc:	d107      	bne.n	800ebee <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800ebde:	6879      	ldr	r1, [r7, #4]
 800ebe0:	484a      	ldr	r0, [pc, #296]	@ (800ed0c <tcp_abandon+0x16c>)
 800ebe2:	f000 ffc5 	bl	800fb70 <tcp_pcb_remove>
    tcp_free(pcb);
 800ebe6:	6878      	ldr	r0, [r7, #4]
 800ebe8:	f7ff fdb0 	bl	800e74c <tcp_free>
 800ebec:	e082      	b.n	800ecf4 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800ebee:	2300      	movs	r3, #0
 800ebf0:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 800ebf2:	2300      	movs	r3, #0
 800ebf4:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ebfa:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ec00:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ec08:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	691b      	ldr	r3, [r3, #16]
 800ec0e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	7d1b      	ldrb	r3, [r3, #20]
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d126      	bne.n	800ec66 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	8adb      	ldrh	r3, [r3, #22]
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d02e      	beq.n	800ec7e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800ec20:	4b3b      	ldr	r3, [pc, #236]	@ (800ed10 <tcp_abandon+0x170>)
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	687a      	ldr	r2, [r7, #4]
 800ec26:	429a      	cmp	r2, r3
 800ec28:	d105      	bne.n	800ec36 <tcp_abandon+0x96>
 800ec2a:	4b39      	ldr	r3, [pc, #228]	@ (800ed10 <tcp_abandon+0x170>)
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	68db      	ldr	r3, [r3, #12]
 800ec30:	4a37      	ldr	r2, [pc, #220]	@ (800ed10 <tcp_abandon+0x170>)
 800ec32:	6013      	str	r3, [r2, #0]
 800ec34:	e013      	b.n	800ec5e <tcp_abandon+0xbe>
 800ec36:	4b36      	ldr	r3, [pc, #216]	@ (800ed10 <tcp_abandon+0x170>)
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	61fb      	str	r3, [r7, #28]
 800ec3c:	e00c      	b.n	800ec58 <tcp_abandon+0xb8>
 800ec3e:	69fb      	ldr	r3, [r7, #28]
 800ec40:	68db      	ldr	r3, [r3, #12]
 800ec42:	687a      	ldr	r2, [r7, #4]
 800ec44:	429a      	cmp	r2, r3
 800ec46:	d104      	bne.n	800ec52 <tcp_abandon+0xb2>
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	68da      	ldr	r2, [r3, #12]
 800ec4c:	69fb      	ldr	r3, [r7, #28]
 800ec4e:	60da      	str	r2, [r3, #12]
 800ec50:	e005      	b.n	800ec5e <tcp_abandon+0xbe>
 800ec52:	69fb      	ldr	r3, [r7, #28]
 800ec54:	68db      	ldr	r3, [r3, #12]
 800ec56:	61fb      	str	r3, [r7, #28]
 800ec58:	69fb      	ldr	r3, [r7, #28]
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d1ef      	bne.n	800ec3e <tcp_abandon+0x9e>
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	2200      	movs	r2, #0
 800ec62:	60da      	str	r2, [r3, #12]
 800ec64:	e00b      	b.n	800ec7e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800ec66:	683b      	ldr	r3, [r7, #0]
 800ec68:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	8adb      	ldrh	r3, [r3, #22]
 800ec6e:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800ec70:	6879      	ldr	r1, [r7, #4]
 800ec72:	4828      	ldr	r0, [pc, #160]	@ (800ed14 <tcp_abandon+0x174>)
 800ec74:	f000 ff7c 	bl	800fb70 <tcp_pcb_remove>
 800ec78:	4b27      	ldr	r3, [pc, #156]	@ (800ed18 <tcp_abandon+0x178>)
 800ec7a:	2201      	movs	r2, #1
 800ec7c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d004      	beq.n	800ec90 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ec8a:	4618      	mov	r0, r3
 800ec8c:	f000 fd1e 	bl	800f6cc <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d004      	beq.n	800eca2 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ec9c:	4618      	mov	r0, r3
 800ec9e:	f000 fd15 	bl	800f6cc <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d004      	beq.n	800ecb4 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ecae:	4618      	mov	r0, r3
 800ecb0:	f000 fd0c 	bl	800f6cc <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800ecb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d00e      	beq.n	800ecd8 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800ecba:	6879      	ldr	r1, [r7, #4]
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	3304      	adds	r3, #4
 800ecc0:	687a      	ldr	r2, [r7, #4]
 800ecc2:	8b12      	ldrh	r2, [r2, #24]
 800ecc4:	9202      	str	r2, [sp, #8]
 800ecc6:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800ecc8:	9201      	str	r2, [sp, #4]
 800ecca:	9300      	str	r3, [sp, #0]
 800eccc:	460b      	mov	r3, r1
 800ecce:	697a      	ldr	r2, [r7, #20]
 800ecd0:	69b9      	ldr	r1, [r7, #24]
 800ecd2:	6878      	ldr	r0, [r7, #4]
 800ecd4:	f004 fcbe 	bl	8013654 <tcp_rst>
    }
    last_state = pcb->state;
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	7d1b      	ldrb	r3, [r3, #20]
 800ecdc:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800ecde:	6878      	ldr	r0, [r7, #4]
 800ece0:	f7ff fd34 	bl	800e74c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800ece4:	693b      	ldr	r3, [r7, #16]
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d004      	beq.n	800ecf4 <tcp_abandon+0x154>
 800ecea:	693b      	ldr	r3, [r7, #16]
 800ecec:	f06f 010c 	mvn.w	r1, #12
 800ecf0:	68f8      	ldr	r0, [r7, #12]
 800ecf2:	4798      	blx	r3
  }
}
 800ecf4:	3728      	adds	r7, #40	@ 0x28
 800ecf6:	46bd      	mov	sp, r7
 800ecf8:	bd80      	pop	{r7, pc}
 800ecfa:	bf00      	nop
 800ecfc:	080213dc 	.word	0x080213dc
 800ed00:	08021520 	.word	0x08021520
 800ed04:	08021420 	.word	0x08021420
 800ed08:	0802153c 	.word	0x0802153c
 800ed0c:	2001525c 	.word	0x2001525c
 800ed10:	20015250 	.word	0x20015250
 800ed14:	20015258 	.word	0x20015258
 800ed18:	20015260 	.word	0x20015260

0800ed1c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800ed1c:	b580      	push	{r7, lr}
 800ed1e:	b082      	sub	sp, #8
 800ed20:	af00      	add	r7, sp, #0
 800ed22:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800ed24:	2101      	movs	r1, #1
 800ed26:	6878      	ldr	r0, [r7, #4]
 800ed28:	f7ff ff3a 	bl	800eba0 <tcp_abandon>
}
 800ed2c:	bf00      	nop
 800ed2e:	3708      	adds	r7, #8
 800ed30:	46bd      	mov	sp, r7
 800ed32:	bd80      	pop	{r7, pc}

0800ed34 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800ed34:	b580      	push	{r7, lr}
 800ed36:	b084      	sub	sp, #16
 800ed38:	af00      	add	r7, sp, #0
 800ed3a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d106      	bne.n	800ed50 <tcp_update_rcv_ann_wnd+0x1c>
 800ed42:	4b25      	ldr	r3, [pc, #148]	@ (800edd8 <tcp_update_rcv_ann_wnd+0xa4>)
 800ed44:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800ed48:	4924      	ldr	r1, [pc, #144]	@ (800eddc <tcp_update_rcv_ann_wnd+0xa8>)
 800ed4a:	4825      	ldr	r0, [pc, #148]	@ (800ede0 <tcp_update_rcv_ann_wnd+0xac>)
 800ed4c:	f008 ff3e 	bl	8017bcc <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ed54:	687a      	ldr	r2, [r7, #4]
 800ed56:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800ed58:	4413      	add	r3, r2
 800ed5a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed60:	687a      	ldr	r2, [r7, #4]
 800ed62:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 800ed64:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 800ed68:	bf28      	it	cs
 800ed6a:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 800ed6e:	b292      	uxth	r2, r2
 800ed70:	4413      	add	r3, r2
 800ed72:	68fa      	ldr	r2, [r7, #12]
 800ed74:	1ad3      	subs	r3, r2, r3
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	db08      	blt.n	800ed8c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed86:	68fa      	ldr	r2, [r7, #12]
 800ed88:	1ad3      	subs	r3, r2, r3
 800ed8a:	e020      	b.n	800edce <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed94:	1ad3      	subs	r3, r2, r3
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	dd03      	ble.n	800eda2 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	2200      	movs	r2, #0
 800ed9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800eda0:	e014      	b.n	800edcc <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800edaa:	1ad3      	subs	r3, r2, r3
 800edac:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800edae:	68bb      	ldr	r3, [r7, #8]
 800edb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800edb4:	d306      	bcc.n	800edc4 <tcp_update_rcv_ann_wnd+0x90>
 800edb6:	4b08      	ldr	r3, [pc, #32]	@ (800edd8 <tcp_update_rcv_ann_wnd+0xa4>)
 800edb8:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800edbc:	4909      	ldr	r1, [pc, #36]	@ (800ede4 <tcp_update_rcv_ann_wnd+0xb0>)
 800edbe:	4808      	ldr	r0, [pc, #32]	@ (800ede0 <tcp_update_rcv_ann_wnd+0xac>)
 800edc0:	f008 ff04 	bl	8017bcc <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800edc4:	68bb      	ldr	r3, [r7, #8]
 800edc6:	b29a      	uxth	r2, r3
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 800edcc:	2300      	movs	r3, #0
  }
}
 800edce:	4618      	mov	r0, r3
 800edd0:	3710      	adds	r7, #16
 800edd2:	46bd      	mov	sp, r7
 800edd4:	bd80      	pop	{r7, pc}
 800edd6:	bf00      	nop
 800edd8:	080213dc 	.word	0x080213dc
 800eddc:	08021638 	.word	0x08021638
 800ede0:	08021420 	.word	0x08021420
 800ede4:	0802165c 	.word	0x0802165c

0800ede8 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800ede8:	b580      	push	{r7, lr}
 800edea:	b084      	sub	sp, #16
 800edec:	af00      	add	r7, sp, #0
 800edee:	6078      	str	r0, [r7, #4]
 800edf0:	460b      	mov	r3, r1
 800edf2:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d107      	bne.n	800ee0a <tcp_recved+0x22>
 800edfa:	4b1f      	ldr	r3, [pc, #124]	@ (800ee78 <tcp_recved+0x90>)
 800edfc:	f240 32cf 	movw	r2, #975	@ 0x3cf
 800ee00:	491e      	ldr	r1, [pc, #120]	@ (800ee7c <tcp_recved+0x94>)
 800ee02:	481f      	ldr	r0, [pc, #124]	@ (800ee80 <tcp_recved+0x98>)
 800ee04:	f008 fee2 	bl	8017bcc <iprintf>
 800ee08:	e032      	b.n	800ee70 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	7d1b      	ldrb	r3, [r3, #20]
 800ee0e:	2b01      	cmp	r3, #1
 800ee10:	d106      	bne.n	800ee20 <tcp_recved+0x38>
 800ee12:	4b19      	ldr	r3, [pc, #100]	@ (800ee78 <tcp_recved+0x90>)
 800ee14:	f240 32d2 	movw	r2, #978	@ 0x3d2
 800ee18:	491a      	ldr	r1, [pc, #104]	@ (800ee84 <tcp_recved+0x9c>)
 800ee1a:	4819      	ldr	r0, [pc, #100]	@ (800ee80 <tcp_recved+0x98>)
 800ee1c:	f008 fed6 	bl	8017bcc <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800ee24:	887b      	ldrh	r3, [r7, #2]
 800ee26:	4413      	add	r3, r2
 800ee28:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800ee2a:	89fb      	ldrh	r3, [r7, #14]
 800ee2c:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800ee30:	d804      	bhi.n	800ee3c <tcp_recved+0x54>
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ee36:	89fa      	ldrh	r2, [r7, #14]
 800ee38:	429a      	cmp	r2, r3
 800ee3a:	d204      	bcs.n	800ee46 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800ee42:	851a      	strh	r2, [r3, #40]	@ 0x28
 800ee44:	e002      	b.n	800ee4c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	89fa      	ldrh	r2, [r7, #14]
 800ee4a:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800ee4c:	6878      	ldr	r0, [r7, #4]
 800ee4e:	f7ff ff71 	bl	800ed34 <tcp_update_rcv_ann_wnd>
 800ee52:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800ee54:	68bb      	ldr	r3, [r7, #8]
 800ee56:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800ee5a:	d309      	bcc.n	800ee70 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	8b5b      	ldrh	r3, [r3, #26]
 800ee60:	f043 0302 	orr.w	r3, r3, #2
 800ee64:	b29a      	uxth	r2, r3
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ee6a:	6878      	ldr	r0, [r7, #4]
 800ee6c:	f003 fe3e 	bl	8012aec <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800ee70:	3710      	adds	r7, #16
 800ee72:	46bd      	mov	sp, r7
 800ee74:	bd80      	pop	{r7, pc}
 800ee76:	bf00      	nop
 800ee78:	080213dc 	.word	0x080213dc
 800ee7c:	08021678 	.word	0x08021678
 800ee80:	08021420 	.word	0x08021420
 800ee84:	08021690 	.word	0x08021690

0800ee88 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800ee88:	b5b0      	push	{r4, r5, r7, lr}
 800ee8a:	b090      	sub	sp, #64	@ 0x40
 800ee8c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800ee8e:	2300      	movs	r3, #0
 800ee90:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 800ee94:	4b95      	ldr	r3, [pc, #596]	@ (800f0ec <tcp_slowtmr+0x264>)
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	3301      	adds	r3, #1
 800ee9a:	4a94      	ldr	r2, [pc, #592]	@ (800f0ec <tcp_slowtmr+0x264>)
 800ee9c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800ee9e:	4b94      	ldr	r3, [pc, #592]	@ (800f0f0 <tcp_slowtmr+0x268>)
 800eea0:	781b      	ldrb	r3, [r3, #0]
 800eea2:	3301      	adds	r3, #1
 800eea4:	b2da      	uxtb	r2, r3
 800eea6:	4b92      	ldr	r3, [pc, #584]	@ (800f0f0 <tcp_slowtmr+0x268>)
 800eea8:	701a      	strb	r2, [r3, #0]
 800eeaa:	e000      	b.n	800eeae <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 800eeac:	bf00      	nop
  prev = NULL;
 800eeae:	2300      	movs	r3, #0
 800eeb0:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 800eeb2:	4b90      	ldr	r3, [pc, #576]	@ (800f0f4 <tcp_slowtmr+0x26c>)
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800eeb8:	e29f      	b.n	800f3fa <tcp_slowtmr+0x572>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800eeba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eebc:	7d1b      	ldrb	r3, [r3, #20]
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d106      	bne.n	800eed0 <tcp_slowtmr+0x48>
 800eec2:	4b8d      	ldr	r3, [pc, #564]	@ (800f0f8 <tcp_slowtmr+0x270>)
 800eec4:	f240 42be 	movw	r2, #1214	@ 0x4be
 800eec8:	498c      	ldr	r1, [pc, #560]	@ (800f0fc <tcp_slowtmr+0x274>)
 800eeca:	488d      	ldr	r0, [pc, #564]	@ (800f100 <tcp_slowtmr+0x278>)
 800eecc:	f008 fe7e 	bl	8017bcc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800eed0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eed2:	7d1b      	ldrb	r3, [r3, #20]
 800eed4:	2b01      	cmp	r3, #1
 800eed6:	d106      	bne.n	800eee6 <tcp_slowtmr+0x5e>
 800eed8:	4b87      	ldr	r3, [pc, #540]	@ (800f0f8 <tcp_slowtmr+0x270>)
 800eeda:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 800eede:	4989      	ldr	r1, [pc, #548]	@ (800f104 <tcp_slowtmr+0x27c>)
 800eee0:	4887      	ldr	r0, [pc, #540]	@ (800f100 <tcp_slowtmr+0x278>)
 800eee2:	f008 fe73 	bl	8017bcc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800eee6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eee8:	7d1b      	ldrb	r3, [r3, #20]
 800eeea:	2b0a      	cmp	r3, #10
 800eeec:	d106      	bne.n	800eefc <tcp_slowtmr+0x74>
 800eeee:	4b82      	ldr	r3, [pc, #520]	@ (800f0f8 <tcp_slowtmr+0x270>)
 800eef0:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 800eef4:	4984      	ldr	r1, [pc, #528]	@ (800f108 <tcp_slowtmr+0x280>)
 800eef6:	4882      	ldr	r0, [pc, #520]	@ (800f100 <tcp_slowtmr+0x278>)
 800eef8:	f008 fe68 	bl	8017bcc <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800eefc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eefe:	7f9a      	ldrb	r2, [r3, #30]
 800ef00:	4b7b      	ldr	r3, [pc, #492]	@ (800f0f0 <tcp_slowtmr+0x268>)
 800ef02:	781b      	ldrb	r3, [r3, #0]
 800ef04:	429a      	cmp	r2, r3
 800ef06:	d105      	bne.n	800ef14 <tcp_slowtmr+0x8c>
      prev = pcb;
 800ef08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef0a:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800ef0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef0e:	68db      	ldr	r3, [r3, #12]
 800ef10:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 800ef12:	e272      	b.n	800f3fa <tcp_slowtmr+0x572>
    pcb->last_timer = tcp_timer_ctr;
 800ef14:	4b76      	ldr	r3, [pc, #472]	@ (800f0f0 <tcp_slowtmr+0x268>)
 800ef16:	781a      	ldrb	r2, [r3, #0]
 800ef18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef1a:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 800ef1c:	2300      	movs	r3, #0
 800ef1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 800ef22:	2300      	movs	r3, #0
 800ef24:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800ef28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef2a:	7d1b      	ldrb	r3, [r3, #20]
 800ef2c:	2b02      	cmp	r3, #2
 800ef2e:	d10a      	bne.n	800ef46 <tcp_slowtmr+0xbe>
 800ef30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef32:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ef36:	2b05      	cmp	r3, #5
 800ef38:	d905      	bls.n	800ef46 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800ef3a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ef3e:	3301      	adds	r3, #1
 800ef40:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ef44:	e11e      	b.n	800f184 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800ef46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef48:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ef4c:	2b0b      	cmp	r3, #11
 800ef4e:	d905      	bls.n	800ef5c <tcp_slowtmr+0xd4>
      ++pcb_remove;
 800ef50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ef54:	3301      	adds	r3, #1
 800ef56:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ef5a:	e113      	b.n	800f184 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 800ef5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef5e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d075      	beq.n	800f052 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800ef66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d006      	beq.n	800ef7c <tcp_slowtmr+0xf4>
 800ef6e:	4b62      	ldr	r3, [pc, #392]	@ (800f0f8 <tcp_slowtmr+0x270>)
 800ef70:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 800ef74:	4965      	ldr	r1, [pc, #404]	@ (800f10c <tcp_slowtmr+0x284>)
 800ef76:	4862      	ldr	r0, [pc, #392]	@ (800f100 <tcp_slowtmr+0x278>)
 800ef78:	f008 fe28 	bl	8017bcc <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800ef7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d106      	bne.n	800ef92 <tcp_slowtmr+0x10a>
 800ef84:	4b5c      	ldr	r3, [pc, #368]	@ (800f0f8 <tcp_slowtmr+0x270>)
 800ef86:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 800ef8a:	4961      	ldr	r1, [pc, #388]	@ (800f110 <tcp_slowtmr+0x288>)
 800ef8c:	485c      	ldr	r0, [pc, #368]	@ (800f100 <tcp_slowtmr+0x278>)
 800ef8e:	f008 fe1d 	bl	8017bcc <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800ef92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef94:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800ef98:	2b0b      	cmp	r3, #11
 800ef9a:	d905      	bls.n	800efa8 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 800ef9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800efa0:	3301      	adds	r3, #1
 800efa2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800efa6:	e0ed      	b.n	800f184 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800efa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800efaa:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800efae:	3b01      	subs	r3, #1
 800efb0:	4a58      	ldr	r2, [pc, #352]	@ (800f114 <tcp_slowtmr+0x28c>)
 800efb2:	5cd3      	ldrb	r3, [r2, r3]
 800efb4:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800efb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800efb8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800efbc:	7c7a      	ldrb	r2, [r7, #17]
 800efbe:	429a      	cmp	r2, r3
 800efc0:	d907      	bls.n	800efd2 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 800efc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800efc4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800efc8:	3301      	adds	r3, #1
 800efca:	b2da      	uxtb	r2, r3
 800efcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800efce:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 800efd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800efd4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800efd8:	7c7a      	ldrb	r2, [r7, #17]
 800efda:	429a      	cmp	r2, r3
 800efdc:	f200 80d2 	bhi.w	800f184 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 800efe0:	2301      	movs	r3, #1
 800efe2:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 800efe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800efe6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800efea:	2b00      	cmp	r3, #0
 800efec:	d108      	bne.n	800f000 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800efee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800eff0:	f004 fc24 	bl	801383c <tcp_zero_window_probe>
 800eff4:	4603      	mov	r3, r0
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d014      	beq.n	800f024 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 800effa:	2300      	movs	r3, #0
 800effc:	623b      	str	r3, [r7, #32]
 800effe:	e011      	b.n	800f024 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800f000:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f002:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f006:	4619      	mov	r1, r3
 800f008:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f00a:	f003 fae9 	bl	80125e0 <tcp_split_unsent_seg>
 800f00e:	4603      	mov	r3, r0
 800f010:	2b00      	cmp	r3, #0
 800f012:	d107      	bne.n	800f024 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 800f014:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f016:	f003 fd69 	bl	8012aec <tcp_output>
 800f01a:	4603      	mov	r3, r0
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d101      	bne.n	800f024 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 800f020:	2300      	movs	r3, #0
 800f022:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 800f024:	6a3b      	ldr	r3, [r7, #32]
 800f026:	2b00      	cmp	r3, #0
 800f028:	f000 80ac 	beq.w	800f184 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 800f02c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f02e:	2200      	movs	r2, #0
 800f030:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800f034:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f036:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800f03a:	2b06      	cmp	r3, #6
 800f03c:	f200 80a2 	bhi.w	800f184 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 800f040:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f042:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800f046:	3301      	adds	r3, #1
 800f048:	b2da      	uxtb	r2, r3
 800f04a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f04c:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 800f050:	e098      	b.n	800f184 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800f052:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f054:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800f058:	2b00      	cmp	r3, #0
 800f05a:	db0f      	blt.n	800f07c <tcp_slowtmr+0x1f4>
 800f05c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f05e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800f062:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800f066:	4293      	cmp	r3, r2
 800f068:	d008      	beq.n	800f07c <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 800f06a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f06c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800f070:	b29b      	uxth	r3, r3
 800f072:	3301      	adds	r3, #1
 800f074:	b29b      	uxth	r3, r3
 800f076:	b21a      	sxth	r2, r3
 800f078:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f07a:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 800f07c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f07e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800f082:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f084:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800f088:	429a      	cmp	r2, r3
 800f08a:	db7b      	blt.n	800f184 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800f08c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f08e:	f004 f821 	bl	80130d4 <tcp_rexmit_rto_prepare>
 800f092:	4603      	mov	r3, r0
 800f094:	2b00      	cmp	r3, #0
 800f096:	d007      	beq.n	800f0a8 <tcp_slowtmr+0x220>
 800f098:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f09a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d171      	bne.n	800f184 <tcp_slowtmr+0x2fc>
 800f0a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d06d      	beq.n	800f184 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 800f0a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0aa:	7d1b      	ldrb	r3, [r3, #20]
 800f0ac:	2b02      	cmp	r3, #2
 800f0ae:	d03a      	beq.n	800f126 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800f0b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0b2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800f0b6:	2b0c      	cmp	r3, #12
 800f0b8:	bf28      	it	cs
 800f0ba:	230c      	movcs	r3, #12
 800f0bc:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800f0be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0c0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800f0c4:	10db      	asrs	r3, r3, #3
 800f0c6:	b21b      	sxth	r3, r3
 800f0c8:	461a      	mov	r2, r3
 800f0ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0cc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800f0d0:	4413      	add	r3, r2
 800f0d2:	7efa      	ldrb	r2, [r7, #27]
 800f0d4:	4910      	ldr	r1, [pc, #64]	@ (800f118 <tcp_slowtmr+0x290>)
 800f0d6:	5c8a      	ldrb	r2, [r1, r2]
 800f0d8:	4093      	lsls	r3, r2
 800f0da:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800f0dc:	697b      	ldr	r3, [r7, #20]
 800f0de:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800f0e2:	4293      	cmp	r3, r2
 800f0e4:	dc1a      	bgt.n	800f11c <tcp_slowtmr+0x294>
 800f0e6:	697b      	ldr	r3, [r7, #20]
 800f0e8:	b21a      	sxth	r2, r3
 800f0ea:	e019      	b.n	800f120 <tcp_slowtmr+0x298>
 800f0ec:	2001524c 	.word	0x2001524c
 800f0f0:	20015262 	.word	0x20015262
 800f0f4:	20015258 	.word	0x20015258
 800f0f8:	080213dc 	.word	0x080213dc
 800f0fc:	08021720 	.word	0x08021720
 800f100:	08021420 	.word	0x08021420
 800f104:	0802174c 	.word	0x0802174c
 800f108:	08021778 	.word	0x08021778
 800f10c:	080217a8 	.word	0x080217a8
 800f110:	080217dc 	.word	0x080217dc
 800f114:	080233b4 	.word	0x080233b4
 800f118:	080233a4 	.word	0x080233a4
 800f11c:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800f120:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f122:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 800f126:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f128:	2200      	movs	r2, #0
 800f12a:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800f12c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f12e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800f132:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f134:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800f138:	4293      	cmp	r3, r2
 800f13a:	bf28      	it	cs
 800f13c:	4613      	movcs	r3, r2
 800f13e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800f140:	8a7b      	ldrh	r3, [r7, #18]
 800f142:	085b      	lsrs	r3, r3, #1
 800f144:	b29a      	uxth	r2, r3
 800f146:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f148:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800f14c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f14e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800f152:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f154:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f156:	005b      	lsls	r3, r3, #1
 800f158:	b29b      	uxth	r3, r3
 800f15a:	429a      	cmp	r2, r3
 800f15c:	d206      	bcs.n	800f16c <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800f15e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f160:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f162:	005b      	lsls	r3, r3, #1
 800f164:	b29a      	uxth	r2, r3
 800f166:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f168:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 800f16c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f16e:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800f170:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f172:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 800f176:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f178:	2200      	movs	r2, #0
 800f17a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 800f17e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f180:	f004 f818 	bl	80131b4 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 800f184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f186:	7d1b      	ldrb	r3, [r3, #20]
 800f188:	2b06      	cmp	r3, #6
 800f18a:	d111      	bne.n	800f1b0 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 800f18c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f18e:	8b5b      	ldrh	r3, [r3, #26]
 800f190:	f003 0310 	and.w	r3, r3, #16
 800f194:	2b00      	cmp	r3, #0
 800f196:	d00b      	beq.n	800f1b0 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f198:	4b9d      	ldr	r3, [pc, #628]	@ (800f410 <tcp_slowtmr+0x588>)
 800f19a:	681a      	ldr	r2, [r3, #0]
 800f19c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f19e:	6a1b      	ldr	r3, [r3, #32]
 800f1a0:	1ad3      	subs	r3, r2, r3
 800f1a2:	2b28      	cmp	r3, #40	@ 0x28
 800f1a4:	d904      	bls.n	800f1b0 <tcp_slowtmr+0x328>
          ++pcb_remove;
 800f1a6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f1aa:	3301      	adds	r3, #1
 800f1ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800f1b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f1b2:	7a5b      	ldrb	r3, [r3, #9]
 800f1b4:	f003 0308 	and.w	r3, r3, #8
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d04c      	beq.n	800f256 <tcp_slowtmr+0x3ce>
        ((pcb->state == ESTABLISHED) ||
 800f1bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f1be:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800f1c0:	2b04      	cmp	r3, #4
 800f1c2:	d003      	beq.n	800f1cc <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 800f1c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f1c6:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800f1c8:	2b07      	cmp	r3, #7
 800f1ca:	d144      	bne.n	800f256 <tcp_slowtmr+0x3ce>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f1cc:	4b90      	ldr	r3, [pc, #576]	@ (800f410 <tcp_slowtmr+0x588>)
 800f1ce:	681a      	ldr	r2, [r3, #0]
 800f1d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f1d2:	6a1b      	ldr	r3, [r3, #32]
 800f1d4:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800f1d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f1d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f1dc:	f503 2324 	add.w	r3, r3, #671744	@ 0xa4000
 800f1e0:	f603 43b8 	addw	r3, r3, #3256	@ 0xcb8
 800f1e4:	498b      	ldr	r1, [pc, #556]	@ (800f414 <tcp_slowtmr+0x58c>)
 800f1e6:	fba1 1303 	umull	r1, r3, r1, r3
 800f1ea:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f1ec:	429a      	cmp	r2, r3
 800f1ee:	d90a      	bls.n	800f206 <tcp_slowtmr+0x37e>
        ++pcb_remove;
 800f1f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f1f4:	3301      	adds	r3, #1
 800f1f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 800f1fa:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f1fe:	3301      	adds	r3, #1
 800f200:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800f204:	e027      	b.n	800f256 <tcp_slowtmr+0x3ce>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f206:	4b82      	ldr	r3, [pc, #520]	@ (800f410 <tcp_slowtmr+0x588>)
 800f208:	681a      	ldr	r2, [r3, #0]
 800f20a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f20c:	6a1b      	ldr	r3, [r3, #32]
 800f20e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800f210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f212:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800f216:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f218:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800f21c:	4618      	mov	r0, r3
 800f21e:	4b7e      	ldr	r3, [pc, #504]	@ (800f418 <tcp_slowtmr+0x590>)
 800f220:	fb00 f303 	mul.w	r3, r0, r3
 800f224:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800f226:	497b      	ldr	r1, [pc, #492]	@ (800f414 <tcp_slowtmr+0x58c>)
 800f228:	fba1 1303 	umull	r1, r3, r1, r3
 800f22c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f22e:	429a      	cmp	r2, r3
 800f230:	d911      	bls.n	800f256 <tcp_slowtmr+0x3ce>
        err = tcp_keepalive(pcb);
 800f232:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f234:	f004 fac2 	bl	80137bc <tcp_keepalive>
 800f238:	4603      	mov	r3, r0
 800f23a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 800f23e:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800f242:	2b00      	cmp	r3, #0
 800f244:	d107      	bne.n	800f256 <tcp_slowtmr+0x3ce>
          pcb->keep_cnt_sent++;
 800f246:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f248:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800f24c:	3301      	adds	r3, #1
 800f24e:	b2da      	uxtb	r2, r3
 800f250:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f252:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 800f256:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f258:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d011      	beq.n	800f282 <tcp_slowtmr+0x3fa>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800f25e:	4b6c      	ldr	r3, [pc, #432]	@ (800f410 <tcp_slowtmr+0x588>)
 800f260:	681a      	ldr	r2, [r3, #0]
 800f262:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f264:	6a1b      	ldr	r3, [r3, #32]
 800f266:	1ad2      	subs	r2, r2, r3
 800f268:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f26a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800f26e:	4619      	mov	r1, r3
 800f270:	460b      	mov	r3, r1
 800f272:	005b      	lsls	r3, r3, #1
 800f274:	440b      	add	r3, r1
 800f276:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800f278:	429a      	cmp	r2, r3
 800f27a:	d302      	bcc.n	800f282 <tcp_slowtmr+0x3fa>
      tcp_free_ooseq(pcb);
 800f27c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f27e:	f000 fddb 	bl	800fe38 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 800f282:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f284:	7d1b      	ldrb	r3, [r3, #20]
 800f286:	2b03      	cmp	r3, #3
 800f288:	d10b      	bne.n	800f2a2 <tcp_slowtmr+0x41a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f28a:	4b61      	ldr	r3, [pc, #388]	@ (800f410 <tcp_slowtmr+0x588>)
 800f28c:	681a      	ldr	r2, [r3, #0]
 800f28e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f290:	6a1b      	ldr	r3, [r3, #32]
 800f292:	1ad3      	subs	r3, r2, r3
 800f294:	2b28      	cmp	r3, #40	@ 0x28
 800f296:	d904      	bls.n	800f2a2 <tcp_slowtmr+0x41a>
        ++pcb_remove;
 800f298:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f29c:	3301      	adds	r3, #1
 800f29e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 800f2a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f2a4:	7d1b      	ldrb	r3, [r3, #20]
 800f2a6:	2b09      	cmp	r3, #9
 800f2a8:	d10b      	bne.n	800f2c2 <tcp_slowtmr+0x43a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800f2aa:	4b59      	ldr	r3, [pc, #356]	@ (800f410 <tcp_slowtmr+0x588>)
 800f2ac:	681a      	ldr	r2, [r3, #0]
 800f2ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f2b0:	6a1b      	ldr	r3, [r3, #32]
 800f2b2:	1ad3      	subs	r3, r2, r3
 800f2b4:	2bf0      	cmp	r3, #240	@ 0xf0
 800f2b6:	d904      	bls.n	800f2c2 <tcp_slowtmr+0x43a>
        ++pcb_remove;
 800f2b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f2bc:	3301      	adds	r3, #1
 800f2be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 800f2c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d060      	beq.n	800f38c <tcp_slowtmr+0x504>
      tcp_err_fn err_fn = pcb->errf;
 800f2ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f2cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f2d0:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 800f2d2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f2d4:	f000 fbfc 	bl	800fad0 <tcp_pcb_purge>
      if (prev != NULL) {
 800f2d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d010      	beq.n	800f300 <tcp_slowtmr+0x478>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800f2de:	4b4f      	ldr	r3, [pc, #316]	@ (800f41c <tcp_slowtmr+0x594>)
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f2e4:	429a      	cmp	r2, r3
 800f2e6:	d106      	bne.n	800f2f6 <tcp_slowtmr+0x46e>
 800f2e8:	4b4d      	ldr	r3, [pc, #308]	@ (800f420 <tcp_slowtmr+0x598>)
 800f2ea:	f240 526d 	movw	r2, #1389	@ 0x56d
 800f2ee:	494d      	ldr	r1, [pc, #308]	@ (800f424 <tcp_slowtmr+0x59c>)
 800f2f0:	484d      	ldr	r0, [pc, #308]	@ (800f428 <tcp_slowtmr+0x5a0>)
 800f2f2:	f008 fc6b 	bl	8017bcc <iprintf>
        prev->next = pcb->next;
 800f2f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f2f8:	68da      	ldr	r2, [r3, #12]
 800f2fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2fc:	60da      	str	r2, [r3, #12]
 800f2fe:	e00f      	b.n	800f320 <tcp_slowtmr+0x498>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800f300:	4b46      	ldr	r3, [pc, #280]	@ (800f41c <tcp_slowtmr+0x594>)
 800f302:	681b      	ldr	r3, [r3, #0]
 800f304:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f306:	429a      	cmp	r2, r3
 800f308:	d006      	beq.n	800f318 <tcp_slowtmr+0x490>
 800f30a:	4b45      	ldr	r3, [pc, #276]	@ (800f420 <tcp_slowtmr+0x598>)
 800f30c:	f240 5271 	movw	r2, #1393	@ 0x571
 800f310:	4946      	ldr	r1, [pc, #280]	@ (800f42c <tcp_slowtmr+0x5a4>)
 800f312:	4845      	ldr	r0, [pc, #276]	@ (800f428 <tcp_slowtmr+0x5a0>)
 800f314:	f008 fc5a 	bl	8017bcc <iprintf>
        tcp_active_pcbs = pcb->next;
 800f318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f31a:	68db      	ldr	r3, [r3, #12]
 800f31c:	4a3f      	ldr	r2, [pc, #252]	@ (800f41c <tcp_slowtmr+0x594>)
 800f31e:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 800f320:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f324:	2b00      	cmp	r3, #0
 800f326:	d013      	beq.n	800f350 <tcp_slowtmr+0x4c8>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800f328:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f32a:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800f32c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f32e:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800f330:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800f332:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f334:	3304      	adds	r3, #4
 800f336:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f338:	8ad2      	ldrh	r2, [r2, #22]
 800f33a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f33c:	8b09      	ldrh	r1, [r1, #24]
 800f33e:	9102      	str	r1, [sp, #8]
 800f340:	9201      	str	r2, [sp, #4]
 800f342:	9300      	str	r3, [sp, #0]
 800f344:	462b      	mov	r3, r5
 800f346:	4622      	mov	r2, r4
 800f348:	4601      	mov	r1, r0
 800f34a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f34c:	f004 f982 	bl	8013654 <tcp_rst>
      err_arg = pcb->callback_arg;
 800f350:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f352:	691b      	ldr	r3, [r3, #16]
 800f354:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800f356:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f358:	7d1b      	ldrb	r3, [r3, #20]
 800f35a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800f35c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f35e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800f360:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f362:	68db      	ldr	r3, [r3, #12]
 800f364:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800f366:	6838      	ldr	r0, [r7, #0]
 800f368:	f7ff f9f0 	bl	800e74c <tcp_free>
      tcp_active_pcbs_changed = 0;
 800f36c:	4b30      	ldr	r3, [pc, #192]	@ (800f430 <tcp_slowtmr+0x5a8>)
 800f36e:	2200      	movs	r2, #0
 800f370:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	2b00      	cmp	r3, #0
 800f376:	d004      	beq.n	800f382 <tcp_slowtmr+0x4fa>
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	f06f 010c 	mvn.w	r1, #12
 800f37e:	68b8      	ldr	r0, [r7, #8]
 800f380:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800f382:	4b2b      	ldr	r3, [pc, #172]	@ (800f430 <tcp_slowtmr+0x5a8>)
 800f384:	781b      	ldrb	r3, [r3, #0]
 800f386:	2b00      	cmp	r3, #0
 800f388:	d037      	beq.n	800f3fa <tcp_slowtmr+0x572>
        goto tcp_slowtmr_start;
 800f38a:	e590      	b.n	800eeae <tcp_slowtmr+0x26>
      prev = pcb;
 800f38c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f38e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800f390:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f392:	68db      	ldr	r3, [r3, #12]
 800f394:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 800f396:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f398:	7f1b      	ldrb	r3, [r3, #28]
 800f39a:	3301      	adds	r3, #1
 800f39c:	b2da      	uxtb	r2, r3
 800f39e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3a0:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800f3a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3a4:	7f1a      	ldrb	r2, [r3, #28]
 800f3a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3a8:	7f5b      	ldrb	r3, [r3, #29]
 800f3aa:	429a      	cmp	r2, r3
 800f3ac:	d325      	bcc.n	800f3fa <tcp_slowtmr+0x572>
        prev->polltmr = 0;
 800f3ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3b0:	2200      	movs	r2, #0
 800f3b2:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 800f3b4:	4b1e      	ldr	r3, [pc, #120]	@ (800f430 <tcp_slowtmr+0x5a8>)
 800f3b6:	2200      	movs	r2, #0
 800f3b8:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800f3ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d00b      	beq.n	800f3dc <tcp_slowtmr+0x554>
 800f3c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f3ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f3cc:	6912      	ldr	r2, [r2, #16]
 800f3ce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f3d0:	4610      	mov	r0, r2
 800f3d2:	4798      	blx	r3
 800f3d4:	4603      	mov	r3, r0
 800f3d6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800f3da:	e002      	b.n	800f3e2 <tcp_slowtmr+0x55a>
 800f3dc:	2300      	movs	r3, #0
 800f3de:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 800f3e2:	4b13      	ldr	r3, [pc, #76]	@ (800f430 <tcp_slowtmr+0x5a8>)
 800f3e4:	781b      	ldrb	r3, [r3, #0]
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	f47f ad60 	bne.w	800eeac <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800f3ec:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d102      	bne.n	800f3fa <tcp_slowtmr+0x572>
          tcp_output(prev);
 800f3f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f3f6:	f003 fb79 	bl	8012aec <tcp_output>
  while (pcb != NULL) {
 800f3fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	f47f ad5c 	bne.w	800eeba <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800f402:	2300      	movs	r3, #0
 800f404:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 800f406:	4b0b      	ldr	r3, [pc, #44]	@ (800f434 <tcp_slowtmr+0x5ac>)
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800f40c:	e067      	b.n	800f4de <tcp_slowtmr+0x656>
 800f40e:	bf00      	nop
 800f410:	2001524c 	.word	0x2001524c
 800f414:	10624dd3 	.word	0x10624dd3
 800f418:	000124f8 	.word	0x000124f8
 800f41c:	20015258 	.word	0x20015258
 800f420:	080213dc 	.word	0x080213dc
 800f424:	08021814 	.word	0x08021814
 800f428:	08021420 	.word	0x08021420
 800f42c:	08021840 	.word	0x08021840
 800f430:	20015260 	.word	0x20015260
 800f434:	2001525c 	.word	0x2001525c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f438:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f43a:	7d1b      	ldrb	r3, [r3, #20]
 800f43c:	2b0a      	cmp	r3, #10
 800f43e:	d006      	beq.n	800f44e <tcp_slowtmr+0x5c6>
 800f440:	4b2b      	ldr	r3, [pc, #172]	@ (800f4f0 <tcp_slowtmr+0x668>)
 800f442:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 800f446:	492b      	ldr	r1, [pc, #172]	@ (800f4f4 <tcp_slowtmr+0x66c>)
 800f448:	482b      	ldr	r0, [pc, #172]	@ (800f4f8 <tcp_slowtmr+0x670>)
 800f44a:	f008 fbbf 	bl	8017bcc <iprintf>
    pcb_remove = 0;
 800f44e:	2300      	movs	r3, #0
 800f450:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800f454:	4b29      	ldr	r3, [pc, #164]	@ (800f4fc <tcp_slowtmr+0x674>)
 800f456:	681a      	ldr	r2, [r3, #0]
 800f458:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f45a:	6a1b      	ldr	r3, [r3, #32]
 800f45c:	1ad3      	subs	r3, r2, r3
 800f45e:	2bf0      	cmp	r3, #240	@ 0xf0
 800f460:	d904      	bls.n	800f46c <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 800f462:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f466:	3301      	adds	r3, #1
 800f468:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800f46c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f470:	2b00      	cmp	r3, #0
 800f472:	d02f      	beq.n	800f4d4 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800f474:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f476:	f000 fb2b 	bl	800fad0 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800f47a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d010      	beq.n	800f4a2 <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800f480:	4b1f      	ldr	r3, [pc, #124]	@ (800f500 <tcp_slowtmr+0x678>)
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f486:	429a      	cmp	r2, r3
 800f488:	d106      	bne.n	800f498 <tcp_slowtmr+0x610>
 800f48a:	4b19      	ldr	r3, [pc, #100]	@ (800f4f0 <tcp_slowtmr+0x668>)
 800f48c:	f240 52af 	movw	r2, #1455	@ 0x5af
 800f490:	491c      	ldr	r1, [pc, #112]	@ (800f504 <tcp_slowtmr+0x67c>)
 800f492:	4819      	ldr	r0, [pc, #100]	@ (800f4f8 <tcp_slowtmr+0x670>)
 800f494:	f008 fb9a 	bl	8017bcc <iprintf>
        prev->next = pcb->next;
 800f498:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f49a:	68da      	ldr	r2, [r3, #12]
 800f49c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f49e:	60da      	str	r2, [r3, #12]
 800f4a0:	e00f      	b.n	800f4c2 <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800f4a2:	4b17      	ldr	r3, [pc, #92]	@ (800f500 <tcp_slowtmr+0x678>)
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f4a8:	429a      	cmp	r2, r3
 800f4aa:	d006      	beq.n	800f4ba <tcp_slowtmr+0x632>
 800f4ac:	4b10      	ldr	r3, [pc, #64]	@ (800f4f0 <tcp_slowtmr+0x668>)
 800f4ae:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800f4b2:	4915      	ldr	r1, [pc, #84]	@ (800f508 <tcp_slowtmr+0x680>)
 800f4b4:	4810      	ldr	r0, [pc, #64]	@ (800f4f8 <tcp_slowtmr+0x670>)
 800f4b6:	f008 fb89 	bl	8017bcc <iprintf>
        tcp_tw_pcbs = pcb->next;
 800f4ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4bc:	68db      	ldr	r3, [r3, #12]
 800f4be:	4a10      	ldr	r2, [pc, #64]	@ (800f500 <tcp_slowtmr+0x678>)
 800f4c0:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800f4c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4c4:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800f4c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4c8:	68db      	ldr	r3, [r3, #12]
 800f4ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800f4cc:	69f8      	ldr	r0, [r7, #28]
 800f4ce:	f7ff f93d 	bl	800e74c <tcp_free>
 800f4d2:	e004      	b.n	800f4de <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 800f4d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4d6:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800f4d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4da:	68db      	ldr	r3, [r3, #12]
 800f4dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800f4de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d1a9      	bne.n	800f438 <tcp_slowtmr+0x5b0>
    }
  }
}
 800f4e4:	bf00      	nop
 800f4e6:	bf00      	nop
 800f4e8:	3730      	adds	r7, #48	@ 0x30
 800f4ea:	46bd      	mov	sp, r7
 800f4ec:	bdb0      	pop	{r4, r5, r7, pc}
 800f4ee:	bf00      	nop
 800f4f0:	080213dc 	.word	0x080213dc
 800f4f4:	0802186c 	.word	0x0802186c
 800f4f8:	08021420 	.word	0x08021420
 800f4fc:	2001524c 	.word	0x2001524c
 800f500:	2001525c 	.word	0x2001525c
 800f504:	0802189c 	.word	0x0802189c
 800f508:	080218c4 	.word	0x080218c4

0800f50c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800f50c:	b580      	push	{r7, lr}
 800f50e:	b082      	sub	sp, #8
 800f510:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800f512:	4b2d      	ldr	r3, [pc, #180]	@ (800f5c8 <tcp_fasttmr+0xbc>)
 800f514:	781b      	ldrb	r3, [r3, #0]
 800f516:	3301      	adds	r3, #1
 800f518:	b2da      	uxtb	r2, r3
 800f51a:	4b2b      	ldr	r3, [pc, #172]	@ (800f5c8 <tcp_fasttmr+0xbc>)
 800f51c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800f51e:	4b2b      	ldr	r3, [pc, #172]	@ (800f5cc <tcp_fasttmr+0xc0>)
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800f524:	e048      	b.n	800f5b8 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	7f9a      	ldrb	r2, [r3, #30]
 800f52a:	4b27      	ldr	r3, [pc, #156]	@ (800f5c8 <tcp_fasttmr+0xbc>)
 800f52c:	781b      	ldrb	r3, [r3, #0]
 800f52e:	429a      	cmp	r2, r3
 800f530:	d03f      	beq.n	800f5b2 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800f532:	4b25      	ldr	r3, [pc, #148]	@ (800f5c8 <tcp_fasttmr+0xbc>)
 800f534:	781a      	ldrb	r2, [r3, #0]
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	8b5b      	ldrh	r3, [r3, #26]
 800f53e:	f003 0301 	and.w	r3, r3, #1
 800f542:	2b00      	cmp	r3, #0
 800f544:	d010      	beq.n	800f568 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	8b5b      	ldrh	r3, [r3, #26]
 800f54a:	f043 0302 	orr.w	r3, r3, #2
 800f54e:	b29a      	uxth	r2, r3
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800f554:	6878      	ldr	r0, [r7, #4]
 800f556:	f003 fac9 	bl	8012aec <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	8b5b      	ldrh	r3, [r3, #26]
 800f55e:	f023 0303 	bic.w	r3, r3, #3
 800f562:	b29a      	uxth	r2, r3
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	8b5b      	ldrh	r3, [r3, #26]
 800f56c:	f003 0308 	and.w	r3, r3, #8
 800f570:	2b00      	cmp	r3, #0
 800f572:	d009      	beq.n	800f588 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	8b5b      	ldrh	r3, [r3, #26]
 800f578:	f023 0308 	bic.w	r3, r3, #8
 800f57c:	b29a      	uxth	r2, r3
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800f582:	6878      	ldr	r0, [r7, #4]
 800f584:	f7ff fa76 	bl	800ea74 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	68db      	ldr	r3, [r3, #12]
 800f58c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f592:	2b00      	cmp	r3, #0
 800f594:	d00a      	beq.n	800f5ac <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800f596:	4b0e      	ldr	r3, [pc, #56]	@ (800f5d0 <tcp_fasttmr+0xc4>)
 800f598:	2200      	movs	r2, #0
 800f59a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800f59c:	6878      	ldr	r0, [r7, #4]
 800f59e:	f000 f819 	bl	800f5d4 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800f5a2:	4b0b      	ldr	r3, [pc, #44]	@ (800f5d0 <tcp_fasttmr+0xc4>)
 800f5a4:	781b      	ldrb	r3, [r3, #0]
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d000      	beq.n	800f5ac <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800f5aa:	e7b8      	b.n	800f51e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800f5ac:	683b      	ldr	r3, [r7, #0]
 800f5ae:	607b      	str	r3, [r7, #4]
 800f5b0:	e002      	b.n	800f5b8 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	68db      	ldr	r3, [r3, #12]
 800f5b6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d1b3      	bne.n	800f526 <tcp_fasttmr+0x1a>
    }
  }
}
 800f5be:	bf00      	nop
 800f5c0:	bf00      	nop
 800f5c2:	3708      	adds	r7, #8
 800f5c4:	46bd      	mov	sp, r7
 800f5c6:	bd80      	pop	{r7, pc}
 800f5c8:	20015262 	.word	0x20015262
 800f5cc:	20015258 	.word	0x20015258
 800f5d0:	20015260 	.word	0x20015260

0800f5d4 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800f5d4:	b590      	push	{r4, r7, lr}
 800f5d6:	b085      	sub	sp, #20
 800f5d8:	af00      	add	r7, sp, #0
 800f5da:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d109      	bne.n	800f5f6 <tcp_process_refused_data+0x22>
 800f5e2:	4b37      	ldr	r3, [pc, #220]	@ (800f6c0 <tcp_process_refused_data+0xec>)
 800f5e4:	f240 6209 	movw	r2, #1545	@ 0x609
 800f5e8:	4936      	ldr	r1, [pc, #216]	@ (800f6c4 <tcp_process_refused_data+0xf0>)
 800f5ea:	4837      	ldr	r0, [pc, #220]	@ (800f6c8 <tcp_process_refused_data+0xf4>)
 800f5ec:	f008 faee 	bl	8017bcc <iprintf>
 800f5f0:	f06f 030f 	mvn.w	r3, #15
 800f5f4:	e060      	b.n	800f6b8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f5fa:	7b5b      	ldrb	r3, [r3, #13]
 800f5fc:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f602:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	2200      	movs	r2, #0
 800f608:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f610:	2b00      	cmp	r3, #0
 800f612:	d00b      	beq.n	800f62c <tcp_process_refused_data+0x58>
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	6918      	ldr	r0, [r3, #16]
 800f61e:	2300      	movs	r3, #0
 800f620:	68ba      	ldr	r2, [r7, #8]
 800f622:	6879      	ldr	r1, [r7, #4]
 800f624:	47a0      	blx	r4
 800f626:	4603      	mov	r3, r0
 800f628:	73fb      	strb	r3, [r7, #15]
 800f62a:	e007      	b.n	800f63c <tcp_process_refused_data+0x68>
 800f62c:	2300      	movs	r3, #0
 800f62e:	68ba      	ldr	r2, [r7, #8]
 800f630:	6879      	ldr	r1, [r7, #4]
 800f632:	2000      	movs	r0, #0
 800f634:	f000 f8a4 	bl	800f780 <tcp_recv_null>
 800f638:	4603      	mov	r3, r0
 800f63a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800f63c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f640:	2b00      	cmp	r3, #0
 800f642:	d12a      	bne.n	800f69a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800f644:	7bbb      	ldrb	r3, [r7, #14]
 800f646:	f003 0320 	and.w	r3, r3, #32
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d033      	beq.n	800f6b6 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f652:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800f656:	d005      	beq.n	800f664 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f65c:	3301      	adds	r3, #1
 800f65e:	b29a      	uxth	r2, r3
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d00b      	beq.n	800f686 <tcp_process_refused_data+0xb2>
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	6918      	ldr	r0, [r3, #16]
 800f678:	2300      	movs	r3, #0
 800f67a:	2200      	movs	r2, #0
 800f67c:	6879      	ldr	r1, [r7, #4]
 800f67e:	47a0      	blx	r4
 800f680:	4603      	mov	r3, r0
 800f682:	73fb      	strb	r3, [r7, #15]
 800f684:	e001      	b.n	800f68a <tcp_process_refused_data+0xb6>
 800f686:	2300      	movs	r3, #0
 800f688:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800f68a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f68e:	f113 0f0d 	cmn.w	r3, #13
 800f692:	d110      	bne.n	800f6b6 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800f694:	f06f 030c 	mvn.w	r3, #12
 800f698:	e00e      	b.n	800f6b8 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800f69a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f69e:	f113 0f0d 	cmn.w	r3, #13
 800f6a2:	d102      	bne.n	800f6aa <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800f6a4:	f06f 030c 	mvn.w	r3, #12
 800f6a8:	e006      	b.n	800f6b8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	68ba      	ldr	r2, [r7, #8]
 800f6ae:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 800f6b0:	f06f 0304 	mvn.w	r3, #4
 800f6b4:	e000      	b.n	800f6b8 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800f6b6:	2300      	movs	r3, #0
}
 800f6b8:	4618      	mov	r0, r3
 800f6ba:	3714      	adds	r7, #20
 800f6bc:	46bd      	mov	sp, r7
 800f6be:	bd90      	pop	{r4, r7, pc}
 800f6c0:	080213dc 	.word	0x080213dc
 800f6c4:	080218ec 	.word	0x080218ec
 800f6c8:	08021420 	.word	0x08021420

0800f6cc <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800f6cc:	b580      	push	{r7, lr}
 800f6ce:	b084      	sub	sp, #16
 800f6d0:	af00      	add	r7, sp, #0
 800f6d2:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800f6d4:	e007      	b.n	800f6e6 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800f6dc:	6878      	ldr	r0, [r7, #4]
 800f6de:	f000 f80a 	bl	800f6f6 <tcp_seg_free>
    seg = next;
 800f6e2:	68fb      	ldr	r3, [r7, #12]
 800f6e4:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d1f4      	bne.n	800f6d6 <tcp_segs_free+0xa>
  }
}
 800f6ec:	bf00      	nop
 800f6ee:	bf00      	nop
 800f6f0:	3710      	adds	r7, #16
 800f6f2:	46bd      	mov	sp, r7
 800f6f4:	bd80      	pop	{r7, pc}

0800f6f6 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800f6f6:	b580      	push	{r7, lr}
 800f6f8:	b082      	sub	sp, #8
 800f6fa:	af00      	add	r7, sp, #0
 800f6fc:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	2b00      	cmp	r3, #0
 800f702:	d00c      	beq.n	800f71e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	685b      	ldr	r3, [r3, #4]
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d004      	beq.n	800f716 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	685b      	ldr	r3, [r3, #4]
 800f710:	4618      	mov	r0, r3
 800f712:	f7fe fc11 	bl	800df38 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800f716:	6879      	ldr	r1, [r7, #4]
 800f718:	2003      	movs	r0, #3
 800f71a:	f7fd fd97 	bl	800d24c <memp_free>
  }
}
 800f71e:	bf00      	nop
 800f720:	3708      	adds	r7, #8
 800f722:	46bd      	mov	sp, r7
 800f724:	bd80      	pop	{r7, pc}
	...

0800f728 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800f728:	b580      	push	{r7, lr}
 800f72a:	b084      	sub	sp, #16
 800f72c:	af00      	add	r7, sp, #0
 800f72e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	2b00      	cmp	r3, #0
 800f734:	d106      	bne.n	800f744 <tcp_seg_copy+0x1c>
 800f736:	4b0f      	ldr	r3, [pc, #60]	@ (800f774 <tcp_seg_copy+0x4c>)
 800f738:	f240 6282 	movw	r2, #1666	@ 0x682
 800f73c:	490e      	ldr	r1, [pc, #56]	@ (800f778 <tcp_seg_copy+0x50>)
 800f73e:	480f      	ldr	r0, [pc, #60]	@ (800f77c <tcp_seg_copy+0x54>)
 800f740:	f008 fa44 	bl	8017bcc <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800f744:	2003      	movs	r0, #3
 800f746:	f7fd fd11 	bl	800d16c <memp_malloc>
 800f74a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800f74c:	68fb      	ldr	r3, [r7, #12]
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d101      	bne.n	800f756 <tcp_seg_copy+0x2e>
    return NULL;
 800f752:	2300      	movs	r3, #0
 800f754:	e00a      	b.n	800f76c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800f756:	2210      	movs	r2, #16
 800f758:	6879      	ldr	r1, [r7, #4]
 800f75a:	68f8      	ldr	r0, [r7, #12]
 800f75c:	f008 fb8d 	bl	8017e7a <memcpy>
  pbuf_ref(cseg->p);
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	685b      	ldr	r3, [r3, #4]
 800f764:	4618      	mov	r0, r3
 800f766:	f7fe fc87 	bl	800e078 <pbuf_ref>
  return cseg;
 800f76a:	68fb      	ldr	r3, [r7, #12]
}
 800f76c:	4618      	mov	r0, r3
 800f76e:	3710      	adds	r7, #16
 800f770:	46bd      	mov	sp, r7
 800f772:	bd80      	pop	{r7, pc}
 800f774:	080213dc 	.word	0x080213dc
 800f778:	08021930 	.word	0x08021930
 800f77c:	08021420 	.word	0x08021420

0800f780 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800f780:	b580      	push	{r7, lr}
 800f782:	b084      	sub	sp, #16
 800f784:	af00      	add	r7, sp, #0
 800f786:	60f8      	str	r0, [r7, #12]
 800f788:	60b9      	str	r1, [r7, #8]
 800f78a:	607a      	str	r2, [r7, #4]
 800f78c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800f78e:	68bb      	ldr	r3, [r7, #8]
 800f790:	2b00      	cmp	r3, #0
 800f792:	d109      	bne.n	800f7a8 <tcp_recv_null+0x28>
 800f794:	4b12      	ldr	r3, [pc, #72]	@ (800f7e0 <tcp_recv_null+0x60>)
 800f796:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800f79a:	4912      	ldr	r1, [pc, #72]	@ (800f7e4 <tcp_recv_null+0x64>)
 800f79c:	4812      	ldr	r0, [pc, #72]	@ (800f7e8 <tcp_recv_null+0x68>)
 800f79e:	f008 fa15 	bl	8017bcc <iprintf>
 800f7a2:	f06f 030f 	mvn.w	r3, #15
 800f7a6:	e016      	b.n	800f7d6 <tcp_recv_null+0x56>

  if (p != NULL) {
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d009      	beq.n	800f7c2 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	891b      	ldrh	r3, [r3, #8]
 800f7b2:	4619      	mov	r1, r3
 800f7b4:	68b8      	ldr	r0, [r7, #8]
 800f7b6:	f7ff fb17 	bl	800ede8 <tcp_recved>
    pbuf_free(p);
 800f7ba:	6878      	ldr	r0, [r7, #4]
 800f7bc:	f7fe fbbc 	bl	800df38 <pbuf_free>
 800f7c0:	e008      	b.n	800f7d4 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800f7c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d104      	bne.n	800f7d4 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800f7ca:	68b8      	ldr	r0, [r7, #8]
 800f7cc:	f7ff f9bc 	bl	800eb48 <tcp_close>
 800f7d0:	4603      	mov	r3, r0
 800f7d2:	e000      	b.n	800f7d6 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800f7d4:	2300      	movs	r3, #0
}
 800f7d6:	4618      	mov	r0, r3
 800f7d8:	3710      	adds	r7, #16
 800f7da:	46bd      	mov	sp, r7
 800f7dc:	bd80      	pop	{r7, pc}
 800f7de:	bf00      	nop
 800f7e0:	080213dc 	.word	0x080213dc
 800f7e4:	0802194c 	.word	0x0802194c
 800f7e8:	08021420 	.word	0x08021420

0800f7ec <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800f7ec:	b580      	push	{r7, lr}
 800f7ee:	b086      	sub	sp, #24
 800f7f0:	af00      	add	r7, sp, #0
 800f7f2:	4603      	mov	r3, r0
 800f7f4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800f7f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	db01      	blt.n	800f802 <tcp_kill_prio+0x16>
 800f7fe:	79fb      	ldrb	r3, [r7, #7]
 800f800:	e000      	b.n	800f804 <tcp_kill_prio+0x18>
 800f802:	237f      	movs	r3, #127	@ 0x7f
 800f804:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800f806:	7afb      	ldrb	r3, [r7, #11]
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d034      	beq.n	800f876 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800f80c:	7afb      	ldrb	r3, [r7, #11]
 800f80e:	3b01      	subs	r3, #1
 800f810:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800f812:	2300      	movs	r3, #0
 800f814:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f816:	2300      	movs	r3, #0
 800f818:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f81a:	4b19      	ldr	r3, [pc, #100]	@ (800f880 <tcp_kill_prio+0x94>)
 800f81c:	681b      	ldr	r3, [r3, #0]
 800f81e:	617b      	str	r3, [r7, #20]
 800f820:	e01f      	b.n	800f862 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800f822:	697b      	ldr	r3, [r7, #20]
 800f824:	7d5b      	ldrb	r3, [r3, #21]
 800f826:	7afa      	ldrb	r2, [r7, #11]
 800f828:	429a      	cmp	r2, r3
 800f82a:	d80c      	bhi.n	800f846 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800f82c:	697b      	ldr	r3, [r7, #20]
 800f82e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800f830:	7afa      	ldrb	r2, [r7, #11]
 800f832:	429a      	cmp	r2, r3
 800f834:	d112      	bne.n	800f85c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800f836:	4b13      	ldr	r3, [pc, #76]	@ (800f884 <tcp_kill_prio+0x98>)
 800f838:	681a      	ldr	r2, [r3, #0]
 800f83a:	697b      	ldr	r3, [r7, #20]
 800f83c:	6a1b      	ldr	r3, [r3, #32]
 800f83e:	1ad3      	subs	r3, r2, r3
 800f840:	68fa      	ldr	r2, [r7, #12]
 800f842:	429a      	cmp	r2, r3
 800f844:	d80a      	bhi.n	800f85c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800f846:	4b0f      	ldr	r3, [pc, #60]	@ (800f884 <tcp_kill_prio+0x98>)
 800f848:	681a      	ldr	r2, [r3, #0]
 800f84a:	697b      	ldr	r3, [r7, #20]
 800f84c:	6a1b      	ldr	r3, [r3, #32]
 800f84e:	1ad3      	subs	r3, r2, r3
 800f850:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800f852:	697b      	ldr	r3, [r7, #20]
 800f854:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800f856:	697b      	ldr	r3, [r7, #20]
 800f858:	7d5b      	ldrb	r3, [r3, #21]
 800f85a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f85c:	697b      	ldr	r3, [r7, #20]
 800f85e:	68db      	ldr	r3, [r3, #12]
 800f860:	617b      	str	r3, [r7, #20]
 800f862:	697b      	ldr	r3, [r7, #20]
 800f864:	2b00      	cmp	r3, #0
 800f866:	d1dc      	bne.n	800f822 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800f868:	693b      	ldr	r3, [r7, #16]
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d004      	beq.n	800f878 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800f86e:	6938      	ldr	r0, [r7, #16]
 800f870:	f7ff fa54 	bl	800ed1c <tcp_abort>
 800f874:	e000      	b.n	800f878 <tcp_kill_prio+0x8c>
    return;
 800f876:	bf00      	nop
  }
}
 800f878:	3718      	adds	r7, #24
 800f87a:	46bd      	mov	sp, r7
 800f87c:	bd80      	pop	{r7, pc}
 800f87e:	bf00      	nop
 800f880:	20015258 	.word	0x20015258
 800f884:	2001524c 	.word	0x2001524c

0800f888 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800f888:	b580      	push	{r7, lr}
 800f88a:	b086      	sub	sp, #24
 800f88c:	af00      	add	r7, sp, #0
 800f88e:	4603      	mov	r3, r0
 800f890:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800f892:	79fb      	ldrb	r3, [r7, #7]
 800f894:	2b08      	cmp	r3, #8
 800f896:	d009      	beq.n	800f8ac <tcp_kill_state+0x24>
 800f898:	79fb      	ldrb	r3, [r7, #7]
 800f89a:	2b09      	cmp	r3, #9
 800f89c:	d006      	beq.n	800f8ac <tcp_kill_state+0x24>
 800f89e:	4b1a      	ldr	r3, [pc, #104]	@ (800f908 <tcp_kill_state+0x80>)
 800f8a0:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 800f8a4:	4919      	ldr	r1, [pc, #100]	@ (800f90c <tcp_kill_state+0x84>)
 800f8a6:	481a      	ldr	r0, [pc, #104]	@ (800f910 <tcp_kill_state+0x88>)
 800f8a8:	f008 f990 	bl	8017bcc <iprintf>

  inactivity = 0;
 800f8ac:	2300      	movs	r3, #0
 800f8ae:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f8b0:	2300      	movs	r3, #0
 800f8b2:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f8b4:	4b17      	ldr	r3, [pc, #92]	@ (800f914 <tcp_kill_state+0x8c>)
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	617b      	str	r3, [r7, #20]
 800f8ba:	e017      	b.n	800f8ec <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800f8bc:	697b      	ldr	r3, [r7, #20]
 800f8be:	7d1b      	ldrb	r3, [r3, #20]
 800f8c0:	79fa      	ldrb	r2, [r7, #7]
 800f8c2:	429a      	cmp	r2, r3
 800f8c4:	d10f      	bne.n	800f8e6 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f8c6:	4b14      	ldr	r3, [pc, #80]	@ (800f918 <tcp_kill_state+0x90>)
 800f8c8:	681a      	ldr	r2, [r3, #0]
 800f8ca:	697b      	ldr	r3, [r7, #20]
 800f8cc:	6a1b      	ldr	r3, [r3, #32]
 800f8ce:	1ad3      	subs	r3, r2, r3
 800f8d0:	68fa      	ldr	r2, [r7, #12]
 800f8d2:	429a      	cmp	r2, r3
 800f8d4:	d807      	bhi.n	800f8e6 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800f8d6:	4b10      	ldr	r3, [pc, #64]	@ (800f918 <tcp_kill_state+0x90>)
 800f8d8:	681a      	ldr	r2, [r3, #0]
 800f8da:	697b      	ldr	r3, [r7, #20]
 800f8dc:	6a1b      	ldr	r3, [r3, #32]
 800f8de:	1ad3      	subs	r3, r2, r3
 800f8e0:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800f8e2:	697b      	ldr	r3, [r7, #20]
 800f8e4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f8e6:	697b      	ldr	r3, [r7, #20]
 800f8e8:	68db      	ldr	r3, [r3, #12]
 800f8ea:	617b      	str	r3, [r7, #20]
 800f8ec:	697b      	ldr	r3, [r7, #20]
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	d1e4      	bne.n	800f8bc <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800f8f2:	693b      	ldr	r3, [r7, #16]
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d003      	beq.n	800f900 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800f8f8:	2100      	movs	r1, #0
 800f8fa:	6938      	ldr	r0, [r7, #16]
 800f8fc:	f7ff f950 	bl	800eba0 <tcp_abandon>
  }
}
 800f900:	bf00      	nop
 800f902:	3718      	adds	r7, #24
 800f904:	46bd      	mov	sp, r7
 800f906:	bd80      	pop	{r7, pc}
 800f908:	080213dc 	.word	0x080213dc
 800f90c:	08021968 	.word	0x08021968
 800f910:	08021420 	.word	0x08021420
 800f914:	20015258 	.word	0x20015258
 800f918:	2001524c 	.word	0x2001524c

0800f91c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800f91c:	b580      	push	{r7, lr}
 800f91e:	b084      	sub	sp, #16
 800f920:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800f922:	2300      	movs	r3, #0
 800f924:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800f926:	2300      	movs	r3, #0
 800f928:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f92a:	4b12      	ldr	r3, [pc, #72]	@ (800f974 <tcp_kill_timewait+0x58>)
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	60fb      	str	r3, [r7, #12]
 800f930:	e012      	b.n	800f958 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f932:	4b11      	ldr	r3, [pc, #68]	@ (800f978 <tcp_kill_timewait+0x5c>)
 800f934:	681a      	ldr	r2, [r3, #0]
 800f936:	68fb      	ldr	r3, [r7, #12]
 800f938:	6a1b      	ldr	r3, [r3, #32]
 800f93a:	1ad3      	subs	r3, r2, r3
 800f93c:	687a      	ldr	r2, [r7, #4]
 800f93e:	429a      	cmp	r2, r3
 800f940:	d807      	bhi.n	800f952 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800f942:	4b0d      	ldr	r3, [pc, #52]	@ (800f978 <tcp_kill_timewait+0x5c>)
 800f944:	681a      	ldr	r2, [r3, #0]
 800f946:	68fb      	ldr	r3, [r7, #12]
 800f948:	6a1b      	ldr	r3, [r3, #32]
 800f94a:	1ad3      	subs	r3, r2, r3
 800f94c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800f94e:	68fb      	ldr	r3, [r7, #12]
 800f950:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f952:	68fb      	ldr	r3, [r7, #12]
 800f954:	68db      	ldr	r3, [r3, #12]
 800f956:	60fb      	str	r3, [r7, #12]
 800f958:	68fb      	ldr	r3, [r7, #12]
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d1e9      	bne.n	800f932 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800f95e:	68bb      	ldr	r3, [r7, #8]
 800f960:	2b00      	cmp	r3, #0
 800f962:	d002      	beq.n	800f96a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800f964:	68b8      	ldr	r0, [r7, #8]
 800f966:	f7ff f9d9 	bl	800ed1c <tcp_abort>
  }
}
 800f96a:	bf00      	nop
 800f96c:	3710      	adds	r7, #16
 800f96e:	46bd      	mov	sp, r7
 800f970:	bd80      	pop	{r7, pc}
 800f972:	bf00      	nop
 800f974:	2001525c 	.word	0x2001525c
 800f978:	2001524c 	.word	0x2001524c

0800f97c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800f97c:	b580      	push	{r7, lr}
 800f97e:	b082      	sub	sp, #8
 800f980:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800f982:	4b10      	ldr	r3, [pc, #64]	@ (800f9c4 <tcp_handle_closepend+0x48>)
 800f984:	681b      	ldr	r3, [r3, #0]
 800f986:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800f988:	e014      	b.n	800f9b4 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	68db      	ldr	r3, [r3, #12]
 800f98e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	8b5b      	ldrh	r3, [r3, #26]
 800f994:	f003 0308 	and.w	r3, r3, #8
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d009      	beq.n	800f9b0 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	8b5b      	ldrh	r3, [r3, #26]
 800f9a0:	f023 0308 	bic.w	r3, r3, #8
 800f9a4:	b29a      	uxth	r2, r3
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800f9aa:	6878      	ldr	r0, [r7, #4]
 800f9ac:	f7ff f862 	bl	800ea74 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800f9b0:	683b      	ldr	r3, [r7, #0]
 800f9b2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d1e7      	bne.n	800f98a <tcp_handle_closepend+0xe>
  }
}
 800f9ba:	bf00      	nop
 800f9bc:	bf00      	nop
 800f9be:	3708      	adds	r7, #8
 800f9c0:	46bd      	mov	sp, r7
 800f9c2:	bd80      	pop	{r7, pc}
 800f9c4:	20015258 	.word	0x20015258

0800f9c8 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800f9c8:	b580      	push	{r7, lr}
 800f9ca:	b084      	sub	sp, #16
 800f9cc:	af00      	add	r7, sp, #0
 800f9ce:	4603      	mov	r3, r0
 800f9d0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f9d2:	2001      	movs	r0, #1
 800f9d4:	f7fd fbca 	bl	800d16c <memp_malloc>
 800f9d8:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800f9da:	68fb      	ldr	r3, [r7, #12]
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d126      	bne.n	800fa2e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800f9e0:	f7ff ffcc 	bl	800f97c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800f9e4:	f7ff ff9a 	bl	800f91c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f9e8:	2001      	movs	r0, #1
 800f9ea:	f7fd fbbf 	bl	800d16c <memp_malloc>
 800f9ee:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800f9f0:	68fb      	ldr	r3, [r7, #12]
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d11b      	bne.n	800fa2e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800f9f6:	2009      	movs	r0, #9
 800f9f8:	f7ff ff46 	bl	800f888 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f9fc:	2001      	movs	r0, #1
 800f9fe:	f7fd fbb5 	bl	800d16c <memp_malloc>
 800fa02:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d111      	bne.n	800fa2e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800fa0a:	2008      	movs	r0, #8
 800fa0c:	f7ff ff3c 	bl	800f888 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fa10:	2001      	movs	r0, #1
 800fa12:	f7fd fbab 	bl	800d16c <memp_malloc>
 800fa16:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800fa18:	68fb      	ldr	r3, [r7, #12]
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d107      	bne.n	800fa2e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800fa1e:	79fb      	ldrb	r3, [r7, #7]
 800fa20:	4618      	mov	r0, r3
 800fa22:	f7ff fee3 	bl	800f7ec <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800fa26:	2001      	movs	r0, #1
 800fa28:	f7fd fba0 	bl	800d16c <memp_malloc>
 800fa2c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800fa2e:	68fb      	ldr	r3, [r7, #12]
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d03f      	beq.n	800fab4 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800fa34:	229c      	movs	r2, #156	@ 0x9c
 800fa36:	2100      	movs	r1, #0
 800fa38:	68f8      	ldr	r0, [r7, #12]
 800fa3a:	f008 f968 	bl	8017d0e <memset>
    pcb->prio = prio;
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	79fa      	ldrb	r2, [r7, #7]
 800fa42:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800fa44:	68fb      	ldr	r3, [r7, #12]
 800fa46:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800fa4a:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800fa4e:	68fb      	ldr	r3, [r7, #12]
 800fa50:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800fa54:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800fa56:	68fb      	ldr	r3, [r7, #12]
 800fa58:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800fa5a:	68fb      	ldr	r3, [r7, #12]
 800fa5c:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800fa5e:	68fb      	ldr	r3, [r7, #12]
 800fa60:	22ff      	movs	r2, #255	@ 0xff
 800fa62:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800fa64:	68fb      	ldr	r3, [r7, #12]
 800fa66:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800fa6a:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800fa6c:	68fb      	ldr	r3, [r7, #12]
 800fa6e:	2206      	movs	r2, #6
 800fa70:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800fa74:	68fb      	ldr	r3, [r7, #12]
 800fa76:	2206      	movs	r2, #6
 800fa78:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 800fa7a:	68fb      	ldr	r3, [r7, #12]
 800fa7c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800fa80:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 800fa82:	68fb      	ldr	r3, [r7, #12]
 800fa84:	2201      	movs	r2, #1
 800fa86:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 800fa8a:	4b0d      	ldr	r3, [pc, #52]	@ (800fac0 <tcp_alloc+0xf8>)
 800fa8c:	681a      	ldr	r2, [r3, #0]
 800fa8e:	68fb      	ldr	r3, [r7, #12]
 800fa90:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800fa92:	4b0c      	ldr	r3, [pc, #48]	@ (800fac4 <tcp_alloc+0xfc>)
 800fa94:	781a      	ldrb	r2, [r3, #0]
 800fa96:	68fb      	ldr	r3, [r7, #12]
 800fa98:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800faa0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800faa4:	68fb      	ldr	r3, [r7, #12]
 800faa6:	4a08      	ldr	r2, [pc, #32]	@ (800fac8 <tcp_alloc+0x100>)
 800faa8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	4a07      	ldr	r2, [pc, #28]	@ (800facc <tcp_alloc+0x104>)
 800fab0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800fab4:	68fb      	ldr	r3, [r7, #12]
}
 800fab6:	4618      	mov	r0, r3
 800fab8:	3710      	adds	r7, #16
 800faba:	46bd      	mov	sp, r7
 800fabc:	bd80      	pop	{r7, pc}
 800fabe:	bf00      	nop
 800fac0:	2001524c 	.word	0x2001524c
 800fac4:	20015262 	.word	0x20015262
 800fac8:	0800f781 	.word	0x0800f781
 800facc:	006ddd00 	.word	0x006ddd00

0800fad0 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800fad0:	b580      	push	{r7, lr}
 800fad2:	b082      	sub	sp, #8
 800fad4:	af00      	add	r7, sp, #0
 800fad6:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d107      	bne.n	800faee <tcp_pcb_purge+0x1e>
 800fade:	4b21      	ldr	r3, [pc, #132]	@ (800fb64 <tcp_pcb_purge+0x94>)
 800fae0:	f640 0251 	movw	r2, #2129	@ 0x851
 800fae4:	4920      	ldr	r1, [pc, #128]	@ (800fb68 <tcp_pcb_purge+0x98>)
 800fae6:	4821      	ldr	r0, [pc, #132]	@ (800fb6c <tcp_pcb_purge+0x9c>)
 800fae8:	f008 f870 	bl	8017bcc <iprintf>
 800faec:	e037      	b.n	800fb5e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	7d1b      	ldrb	r3, [r3, #20]
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	d033      	beq.n	800fb5e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800fafa:	2b0a      	cmp	r3, #10
 800fafc:	d02f      	beq.n	800fb5e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800fb02:	2b01      	cmp	r3, #1
 800fb04:	d02b      	beq.n	800fb5e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d007      	beq.n	800fb1e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fb12:	4618      	mov	r0, r3
 800fb14:	f7fe fa10 	bl	800df38 <pbuf_free>
      pcb->refused_data = NULL;
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	2200      	movs	r2, #0
 800fb1c:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d002      	beq.n	800fb2c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800fb26:	6878      	ldr	r0, [r7, #4]
 800fb28:	f000 f986 	bl	800fe38 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800fb32:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fb38:	4618      	mov	r0, r3
 800fb3a:	f7ff fdc7 	bl	800f6cc <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fb42:	4618      	mov	r0, r3
 800fb44:	f7ff fdc2 	bl	800f6cc <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	2200      	movs	r2, #0
 800fb4c:	66da      	str	r2, [r3, #108]	@ 0x6c
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	2200      	movs	r2, #0
 800fb5a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800fb5e:	3708      	adds	r7, #8
 800fb60:	46bd      	mov	sp, r7
 800fb62:	bd80      	pop	{r7, pc}
 800fb64:	080213dc 	.word	0x080213dc
 800fb68:	08021a28 	.word	0x08021a28
 800fb6c:	08021420 	.word	0x08021420

0800fb70 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800fb70:	b580      	push	{r7, lr}
 800fb72:	b084      	sub	sp, #16
 800fb74:	af00      	add	r7, sp, #0
 800fb76:	6078      	str	r0, [r7, #4]
 800fb78:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800fb7a:	683b      	ldr	r3, [r7, #0]
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	d106      	bne.n	800fb8e <tcp_pcb_remove+0x1e>
 800fb80:	4b3e      	ldr	r3, [pc, #248]	@ (800fc7c <tcp_pcb_remove+0x10c>)
 800fb82:	f640 0283 	movw	r2, #2179	@ 0x883
 800fb86:	493e      	ldr	r1, [pc, #248]	@ (800fc80 <tcp_pcb_remove+0x110>)
 800fb88:	483e      	ldr	r0, [pc, #248]	@ (800fc84 <tcp_pcb_remove+0x114>)
 800fb8a:	f008 f81f 	bl	8017bcc <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	d106      	bne.n	800fba2 <tcp_pcb_remove+0x32>
 800fb94:	4b39      	ldr	r3, [pc, #228]	@ (800fc7c <tcp_pcb_remove+0x10c>)
 800fb96:	f640 0284 	movw	r2, #2180	@ 0x884
 800fb9a:	493b      	ldr	r1, [pc, #236]	@ (800fc88 <tcp_pcb_remove+0x118>)
 800fb9c:	4839      	ldr	r0, [pc, #228]	@ (800fc84 <tcp_pcb_remove+0x114>)
 800fb9e:	f008 f815 	bl	8017bcc <iprintf>

  TCP_RMV(pcblist, pcb);
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	681b      	ldr	r3, [r3, #0]
 800fba6:	683a      	ldr	r2, [r7, #0]
 800fba8:	429a      	cmp	r2, r3
 800fbaa:	d105      	bne.n	800fbb8 <tcp_pcb_remove+0x48>
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	681b      	ldr	r3, [r3, #0]
 800fbb0:	68da      	ldr	r2, [r3, #12]
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	601a      	str	r2, [r3, #0]
 800fbb6:	e013      	b.n	800fbe0 <tcp_pcb_remove+0x70>
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	681b      	ldr	r3, [r3, #0]
 800fbbc:	60fb      	str	r3, [r7, #12]
 800fbbe:	e00c      	b.n	800fbda <tcp_pcb_remove+0x6a>
 800fbc0:	68fb      	ldr	r3, [r7, #12]
 800fbc2:	68db      	ldr	r3, [r3, #12]
 800fbc4:	683a      	ldr	r2, [r7, #0]
 800fbc6:	429a      	cmp	r2, r3
 800fbc8:	d104      	bne.n	800fbd4 <tcp_pcb_remove+0x64>
 800fbca:	683b      	ldr	r3, [r7, #0]
 800fbcc:	68da      	ldr	r2, [r3, #12]
 800fbce:	68fb      	ldr	r3, [r7, #12]
 800fbd0:	60da      	str	r2, [r3, #12]
 800fbd2:	e005      	b.n	800fbe0 <tcp_pcb_remove+0x70>
 800fbd4:	68fb      	ldr	r3, [r7, #12]
 800fbd6:	68db      	ldr	r3, [r3, #12]
 800fbd8:	60fb      	str	r3, [r7, #12]
 800fbda:	68fb      	ldr	r3, [r7, #12]
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d1ef      	bne.n	800fbc0 <tcp_pcb_remove+0x50>
 800fbe0:	683b      	ldr	r3, [r7, #0]
 800fbe2:	2200      	movs	r2, #0
 800fbe4:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800fbe6:	6838      	ldr	r0, [r7, #0]
 800fbe8:	f7ff ff72 	bl	800fad0 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800fbec:	683b      	ldr	r3, [r7, #0]
 800fbee:	7d1b      	ldrb	r3, [r3, #20]
 800fbf0:	2b0a      	cmp	r3, #10
 800fbf2:	d013      	beq.n	800fc1c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800fbf4:	683b      	ldr	r3, [r7, #0]
 800fbf6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800fbf8:	2b01      	cmp	r3, #1
 800fbfa:	d00f      	beq.n	800fc1c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800fbfc:	683b      	ldr	r3, [r7, #0]
 800fbfe:	8b5b      	ldrh	r3, [r3, #26]
 800fc00:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d009      	beq.n	800fc1c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800fc08:	683b      	ldr	r3, [r7, #0]
 800fc0a:	8b5b      	ldrh	r3, [r3, #26]
 800fc0c:	f043 0302 	orr.w	r3, r3, #2
 800fc10:	b29a      	uxth	r2, r3
 800fc12:	683b      	ldr	r3, [r7, #0]
 800fc14:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800fc16:	6838      	ldr	r0, [r7, #0]
 800fc18:	f002 ff68 	bl	8012aec <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800fc1c:	683b      	ldr	r3, [r7, #0]
 800fc1e:	7d1b      	ldrb	r3, [r3, #20]
 800fc20:	2b01      	cmp	r3, #1
 800fc22:	d020      	beq.n	800fc66 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800fc24:	683b      	ldr	r3, [r7, #0]
 800fc26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d006      	beq.n	800fc3a <tcp_pcb_remove+0xca>
 800fc2c:	4b13      	ldr	r3, [pc, #76]	@ (800fc7c <tcp_pcb_remove+0x10c>)
 800fc2e:	f640 0293 	movw	r2, #2195	@ 0x893
 800fc32:	4916      	ldr	r1, [pc, #88]	@ (800fc8c <tcp_pcb_remove+0x11c>)
 800fc34:	4813      	ldr	r0, [pc, #76]	@ (800fc84 <tcp_pcb_remove+0x114>)
 800fc36:	f007 ffc9 	bl	8017bcc <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800fc3a:	683b      	ldr	r3, [r7, #0]
 800fc3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	d006      	beq.n	800fc50 <tcp_pcb_remove+0xe0>
 800fc42:	4b0e      	ldr	r3, [pc, #56]	@ (800fc7c <tcp_pcb_remove+0x10c>)
 800fc44:	f640 0294 	movw	r2, #2196	@ 0x894
 800fc48:	4911      	ldr	r1, [pc, #68]	@ (800fc90 <tcp_pcb_remove+0x120>)
 800fc4a:	480e      	ldr	r0, [pc, #56]	@ (800fc84 <tcp_pcb_remove+0x114>)
 800fc4c:	f007 ffbe 	bl	8017bcc <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800fc50:	683b      	ldr	r3, [r7, #0]
 800fc52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	d006      	beq.n	800fc66 <tcp_pcb_remove+0xf6>
 800fc58:	4b08      	ldr	r3, [pc, #32]	@ (800fc7c <tcp_pcb_remove+0x10c>)
 800fc5a:	f640 0296 	movw	r2, #2198	@ 0x896
 800fc5e:	490d      	ldr	r1, [pc, #52]	@ (800fc94 <tcp_pcb_remove+0x124>)
 800fc60:	4808      	ldr	r0, [pc, #32]	@ (800fc84 <tcp_pcb_remove+0x114>)
 800fc62:	f007 ffb3 	bl	8017bcc <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800fc66:	683b      	ldr	r3, [r7, #0]
 800fc68:	2200      	movs	r2, #0
 800fc6a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800fc6c:	683b      	ldr	r3, [r7, #0]
 800fc6e:	2200      	movs	r2, #0
 800fc70:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800fc72:	bf00      	nop
 800fc74:	3710      	adds	r7, #16
 800fc76:	46bd      	mov	sp, r7
 800fc78:	bd80      	pop	{r7, pc}
 800fc7a:	bf00      	nop
 800fc7c:	080213dc 	.word	0x080213dc
 800fc80:	08021a44 	.word	0x08021a44
 800fc84:	08021420 	.word	0x08021420
 800fc88:	08021a60 	.word	0x08021a60
 800fc8c:	08021a80 	.word	0x08021a80
 800fc90:	08021a98 	.word	0x08021a98
 800fc94:	08021ab4 	.word	0x08021ab4

0800fc98 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800fc98:	b580      	push	{r7, lr}
 800fc9a:	b082      	sub	sp, #8
 800fc9c:	af00      	add	r7, sp, #0
 800fc9e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d106      	bne.n	800fcb4 <tcp_next_iss+0x1c>
 800fca6:	4b0a      	ldr	r3, [pc, #40]	@ (800fcd0 <tcp_next_iss+0x38>)
 800fca8:	f640 02af 	movw	r2, #2223	@ 0x8af
 800fcac:	4909      	ldr	r1, [pc, #36]	@ (800fcd4 <tcp_next_iss+0x3c>)
 800fcae:	480a      	ldr	r0, [pc, #40]	@ (800fcd8 <tcp_next_iss+0x40>)
 800fcb0:	f007 ff8c 	bl	8017bcc <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800fcb4:	4b09      	ldr	r3, [pc, #36]	@ (800fcdc <tcp_next_iss+0x44>)
 800fcb6:	681a      	ldr	r2, [r3, #0]
 800fcb8:	4b09      	ldr	r3, [pc, #36]	@ (800fce0 <tcp_next_iss+0x48>)
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	4413      	add	r3, r2
 800fcbe:	4a07      	ldr	r2, [pc, #28]	@ (800fcdc <tcp_next_iss+0x44>)
 800fcc0:	6013      	str	r3, [r2, #0]
  return iss;
 800fcc2:	4b06      	ldr	r3, [pc, #24]	@ (800fcdc <tcp_next_iss+0x44>)
 800fcc4:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800fcc6:	4618      	mov	r0, r3
 800fcc8:	3708      	adds	r7, #8
 800fcca:	46bd      	mov	sp, r7
 800fccc:	bd80      	pop	{r7, pc}
 800fcce:	bf00      	nop
 800fcd0:	080213dc 	.word	0x080213dc
 800fcd4:	08021acc 	.word	0x08021acc
 800fcd8:	08021420 	.word	0x08021420
 800fcdc:	20000914 	.word	0x20000914
 800fce0:	2001524c 	.word	0x2001524c

0800fce4 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800fce4:	b580      	push	{r7, lr}
 800fce6:	b086      	sub	sp, #24
 800fce8:	af00      	add	r7, sp, #0
 800fcea:	4603      	mov	r3, r0
 800fcec:	60b9      	str	r1, [r7, #8]
 800fcee:	607a      	str	r2, [r7, #4]
 800fcf0:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	d106      	bne.n	800fd06 <tcp_eff_send_mss_netif+0x22>
 800fcf8:	4b14      	ldr	r3, [pc, #80]	@ (800fd4c <tcp_eff_send_mss_netif+0x68>)
 800fcfa:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800fcfe:	4914      	ldr	r1, [pc, #80]	@ (800fd50 <tcp_eff_send_mss_netif+0x6c>)
 800fd00:	4814      	ldr	r0, [pc, #80]	@ (800fd54 <tcp_eff_send_mss_netif+0x70>)
 800fd02:	f007 ff63 	bl	8017bcc <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800fd06:	68bb      	ldr	r3, [r7, #8]
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d101      	bne.n	800fd10 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800fd0c:	89fb      	ldrh	r3, [r7, #14]
 800fd0e:	e019      	b.n	800fd44 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800fd10:	68bb      	ldr	r3, [r7, #8]
 800fd12:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800fd14:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800fd16:	8afb      	ldrh	r3, [r7, #22]
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d012      	beq.n	800fd42 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800fd1c:	2328      	movs	r3, #40	@ 0x28
 800fd1e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800fd20:	8afa      	ldrh	r2, [r7, #22]
 800fd22:	8abb      	ldrh	r3, [r7, #20]
 800fd24:	429a      	cmp	r2, r3
 800fd26:	d904      	bls.n	800fd32 <tcp_eff_send_mss_netif+0x4e>
 800fd28:	8afa      	ldrh	r2, [r7, #22]
 800fd2a:	8abb      	ldrh	r3, [r7, #20]
 800fd2c:	1ad3      	subs	r3, r2, r3
 800fd2e:	b29b      	uxth	r3, r3
 800fd30:	e000      	b.n	800fd34 <tcp_eff_send_mss_netif+0x50>
 800fd32:	2300      	movs	r3, #0
 800fd34:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800fd36:	8a7a      	ldrh	r2, [r7, #18]
 800fd38:	89fb      	ldrh	r3, [r7, #14]
 800fd3a:	4293      	cmp	r3, r2
 800fd3c:	bf28      	it	cs
 800fd3e:	4613      	movcs	r3, r2
 800fd40:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800fd42:	89fb      	ldrh	r3, [r7, #14]
}
 800fd44:	4618      	mov	r0, r3
 800fd46:	3718      	adds	r7, #24
 800fd48:	46bd      	mov	sp, r7
 800fd4a:	bd80      	pop	{r7, pc}
 800fd4c:	080213dc 	.word	0x080213dc
 800fd50:	08021ae8 	.word	0x08021ae8
 800fd54:	08021420 	.word	0x08021420

0800fd58 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800fd58:	b580      	push	{r7, lr}
 800fd5a:	b084      	sub	sp, #16
 800fd5c:	af00      	add	r7, sp, #0
 800fd5e:	6078      	str	r0, [r7, #4]
 800fd60:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800fd62:	683b      	ldr	r3, [r7, #0]
 800fd64:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	d119      	bne.n	800fda0 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800fd6c:	4b10      	ldr	r3, [pc, #64]	@ (800fdb0 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800fd6e:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800fd72:	4910      	ldr	r1, [pc, #64]	@ (800fdb4 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800fd74:	4810      	ldr	r0, [pc, #64]	@ (800fdb8 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800fd76:	f007 ff29 	bl	8017bcc <iprintf>

  while (pcb != NULL) {
 800fd7a:	e011      	b.n	800fda0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800fd7c:	68fb      	ldr	r3, [r7, #12]
 800fd7e:	681a      	ldr	r2, [r3, #0]
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	429a      	cmp	r2, r3
 800fd86:	d108      	bne.n	800fd9a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800fd88:	68fb      	ldr	r3, [r7, #12]
 800fd8a:	68db      	ldr	r3, [r3, #12]
 800fd8c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800fd8e:	68f8      	ldr	r0, [r7, #12]
 800fd90:	f7fe ffc4 	bl	800ed1c <tcp_abort>
      pcb = next;
 800fd94:	68bb      	ldr	r3, [r7, #8]
 800fd96:	60fb      	str	r3, [r7, #12]
 800fd98:	e002      	b.n	800fda0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800fd9a:	68fb      	ldr	r3, [r7, #12]
 800fd9c:	68db      	ldr	r3, [r3, #12]
 800fd9e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800fda0:	68fb      	ldr	r3, [r7, #12]
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d1ea      	bne.n	800fd7c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800fda6:	bf00      	nop
 800fda8:	bf00      	nop
 800fdaa:	3710      	adds	r7, #16
 800fdac:	46bd      	mov	sp, r7
 800fdae:	bd80      	pop	{r7, pc}
 800fdb0:	080213dc 	.word	0x080213dc
 800fdb4:	08021b10 	.word	0x08021b10
 800fdb8:	08021420 	.word	0x08021420

0800fdbc <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800fdbc:	b580      	push	{r7, lr}
 800fdbe:	b084      	sub	sp, #16
 800fdc0:	af00      	add	r7, sp, #0
 800fdc2:	6078      	str	r0, [r7, #4]
 800fdc4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d02a      	beq.n	800fe22 <tcp_netif_ip_addr_changed+0x66>
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	681b      	ldr	r3, [r3, #0]
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d026      	beq.n	800fe22 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800fdd4:	4b15      	ldr	r3, [pc, #84]	@ (800fe2c <tcp_netif_ip_addr_changed+0x70>)
 800fdd6:	681b      	ldr	r3, [r3, #0]
 800fdd8:	4619      	mov	r1, r3
 800fdda:	6878      	ldr	r0, [r7, #4]
 800fddc:	f7ff ffbc 	bl	800fd58 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800fde0:	4b13      	ldr	r3, [pc, #76]	@ (800fe30 <tcp_netif_ip_addr_changed+0x74>)
 800fde2:	681b      	ldr	r3, [r3, #0]
 800fde4:	4619      	mov	r1, r3
 800fde6:	6878      	ldr	r0, [r7, #4]
 800fde8:	f7ff ffb6 	bl	800fd58 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800fdec:	683b      	ldr	r3, [r7, #0]
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d017      	beq.n	800fe22 <tcp_netif_ip_addr_changed+0x66>
 800fdf2:	683b      	ldr	r3, [r7, #0]
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	d013      	beq.n	800fe22 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800fdfa:	4b0e      	ldr	r3, [pc, #56]	@ (800fe34 <tcp_netif_ip_addr_changed+0x78>)
 800fdfc:	681b      	ldr	r3, [r3, #0]
 800fdfe:	60fb      	str	r3, [r7, #12]
 800fe00:	e00c      	b.n	800fe1c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800fe02:	68fb      	ldr	r3, [r7, #12]
 800fe04:	681a      	ldr	r2, [r3, #0]
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	681b      	ldr	r3, [r3, #0]
 800fe0a:	429a      	cmp	r2, r3
 800fe0c:	d103      	bne.n	800fe16 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800fe0e:	683b      	ldr	r3, [r7, #0]
 800fe10:	681a      	ldr	r2, [r3, #0]
 800fe12:	68fb      	ldr	r3, [r7, #12]
 800fe14:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800fe16:	68fb      	ldr	r3, [r7, #12]
 800fe18:	68db      	ldr	r3, [r3, #12]
 800fe1a:	60fb      	str	r3, [r7, #12]
 800fe1c:	68fb      	ldr	r3, [r7, #12]
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d1ef      	bne.n	800fe02 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800fe22:	bf00      	nop
 800fe24:	3710      	adds	r7, #16
 800fe26:	46bd      	mov	sp, r7
 800fe28:	bd80      	pop	{r7, pc}
 800fe2a:	bf00      	nop
 800fe2c:	20015258 	.word	0x20015258
 800fe30:	20015250 	.word	0x20015250
 800fe34:	20015254 	.word	0x20015254

0800fe38 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800fe38:	b580      	push	{r7, lr}
 800fe3a:	b082      	sub	sp, #8
 800fe3c:	af00      	add	r7, sp, #0
 800fe3e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d007      	beq.n	800fe58 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fe4c:	4618      	mov	r0, r3
 800fe4e:	f7ff fc3d 	bl	800f6cc <tcp_segs_free>
    pcb->ooseq = NULL;
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	2200      	movs	r2, #0
 800fe56:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800fe58:	bf00      	nop
 800fe5a:	3708      	adds	r7, #8
 800fe5c:	46bd      	mov	sp, r7
 800fe5e:	bd80      	pop	{r7, pc}

0800fe60 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800fe60:	b590      	push	{r4, r7, lr}
 800fe62:	b08d      	sub	sp, #52	@ 0x34
 800fe64:	af04      	add	r7, sp, #16
 800fe66:	6078      	str	r0, [r7, #4]
 800fe68:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	d105      	bne.n	800fe7c <tcp_input+0x1c>
 800fe70:	4b9b      	ldr	r3, [pc, #620]	@ (80100e0 <tcp_input+0x280>)
 800fe72:	2283      	movs	r2, #131	@ 0x83
 800fe74:	499b      	ldr	r1, [pc, #620]	@ (80100e4 <tcp_input+0x284>)
 800fe76:	489c      	ldr	r0, [pc, #624]	@ (80100e8 <tcp_input+0x288>)
 800fe78:	f007 fea8 	bl	8017bcc <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	685b      	ldr	r3, [r3, #4]
 800fe80:	4a9a      	ldr	r2, [pc, #616]	@ (80100ec <tcp_input+0x28c>)
 800fe82:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	895b      	ldrh	r3, [r3, #10]
 800fe88:	2b13      	cmp	r3, #19
 800fe8a:	f240 83d1 	bls.w	8010630 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800fe8e:	4b98      	ldr	r3, [pc, #608]	@ (80100f0 <tcp_input+0x290>)
 800fe90:	695b      	ldr	r3, [r3, #20]
 800fe92:	4a97      	ldr	r2, [pc, #604]	@ (80100f0 <tcp_input+0x290>)
 800fe94:	6812      	ldr	r2, [r2, #0]
 800fe96:	4611      	mov	r1, r2
 800fe98:	4618      	mov	r0, r3
 800fe9a:	f005 ffa3 	bl	8015de4 <ip4_addr_isbroadcast_u32>
 800fe9e:	4603      	mov	r3, r0
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	f040 83c7 	bne.w	8010634 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800fea6:	4b92      	ldr	r3, [pc, #584]	@ (80100f0 <tcp_input+0x290>)
 800fea8:	695b      	ldr	r3, [r3, #20]
 800feaa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800feae:	2be0      	cmp	r3, #224	@ 0xe0
 800feb0:	f000 83c0 	beq.w	8010634 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800feb4:	4b8d      	ldr	r3, [pc, #564]	@ (80100ec <tcp_input+0x28c>)
 800feb6:	681b      	ldr	r3, [r3, #0]
 800feb8:	899b      	ldrh	r3, [r3, #12]
 800feba:	b29b      	uxth	r3, r3
 800febc:	4618      	mov	r0, r3
 800febe:	f7fc fa13 	bl	800c2e8 <lwip_htons>
 800fec2:	4603      	mov	r3, r0
 800fec4:	0b1b      	lsrs	r3, r3, #12
 800fec6:	b29b      	uxth	r3, r3
 800fec8:	b2db      	uxtb	r3, r3
 800feca:	009b      	lsls	r3, r3, #2
 800fecc:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800fece:	7cbb      	ldrb	r3, [r7, #18]
 800fed0:	2b13      	cmp	r3, #19
 800fed2:	f240 83b1 	bls.w	8010638 <tcp_input+0x7d8>
 800fed6:	7cbb      	ldrb	r3, [r7, #18]
 800fed8:	b29a      	uxth	r2, r3
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	891b      	ldrh	r3, [r3, #8]
 800fede:	429a      	cmp	r2, r3
 800fee0:	f200 83aa 	bhi.w	8010638 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800fee4:	7cbb      	ldrb	r3, [r7, #18]
 800fee6:	b29b      	uxth	r3, r3
 800fee8:	3b14      	subs	r3, #20
 800feea:	b29a      	uxth	r2, r3
 800feec:	4b81      	ldr	r3, [pc, #516]	@ (80100f4 <tcp_input+0x294>)
 800feee:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800fef0:	4b81      	ldr	r3, [pc, #516]	@ (80100f8 <tcp_input+0x298>)
 800fef2:	2200      	movs	r2, #0
 800fef4:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	895a      	ldrh	r2, [r3, #10]
 800fefa:	7cbb      	ldrb	r3, [r7, #18]
 800fefc:	b29b      	uxth	r3, r3
 800fefe:	429a      	cmp	r2, r3
 800ff00:	d309      	bcc.n	800ff16 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800ff02:	4b7c      	ldr	r3, [pc, #496]	@ (80100f4 <tcp_input+0x294>)
 800ff04:	881a      	ldrh	r2, [r3, #0]
 800ff06:	4b7d      	ldr	r3, [pc, #500]	@ (80100fc <tcp_input+0x29c>)
 800ff08:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800ff0a:	7cbb      	ldrb	r3, [r7, #18]
 800ff0c:	4619      	mov	r1, r3
 800ff0e:	6878      	ldr	r0, [r7, #4]
 800ff10:	f7fd ff8c 	bl	800de2c <pbuf_remove_header>
 800ff14:	e04e      	b.n	800ffb4 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	681b      	ldr	r3, [r3, #0]
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d105      	bne.n	800ff2a <tcp_input+0xca>
 800ff1e:	4b70      	ldr	r3, [pc, #448]	@ (80100e0 <tcp_input+0x280>)
 800ff20:	22c2      	movs	r2, #194	@ 0xc2
 800ff22:	4977      	ldr	r1, [pc, #476]	@ (8010100 <tcp_input+0x2a0>)
 800ff24:	4870      	ldr	r0, [pc, #448]	@ (80100e8 <tcp_input+0x288>)
 800ff26:	f007 fe51 	bl	8017bcc <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800ff2a:	2114      	movs	r1, #20
 800ff2c:	6878      	ldr	r0, [r7, #4]
 800ff2e:	f7fd ff7d 	bl	800de2c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	895a      	ldrh	r2, [r3, #10]
 800ff36:	4b71      	ldr	r3, [pc, #452]	@ (80100fc <tcp_input+0x29c>)
 800ff38:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800ff3a:	4b6e      	ldr	r3, [pc, #440]	@ (80100f4 <tcp_input+0x294>)
 800ff3c:	881a      	ldrh	r2, [r3, #0]
 800ff3e:	4b6f      	ldr	r3, [pc, #444]	@ (80100fc <tcp_input+0x29c>)
 800ff40:	881b      	ldrh	r3, [r3, #0]
 800ff42:	1ad3      	subs	r3, r2, r3
 800ff44:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800ff46:	4b6d      	ldr	r3, [pc, #436]	@ (80100fc <tcp_input+0x29c>)
 800ff48:	881b      	ldrh	r3, [r3, #0]
 800ff4a:	4619      	mov	r1, r3
 800ff4c:	6878      	ldr	r0, [r7, #4]
 800ff4e:	f7fd ff6d 	bl	800de2c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	681b      	ldr	r3, [r3, #0]
 800ff56:	895b      	ldrh	r3, [r3, #10]
 800ff58:	8a3a      	ldrh	r2, [r7, #16]
 800ff5a:	429a      	cmp	r2, r3
 800ff5c:	f200 836e 	bhi.w	801063c <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	685b      	ldr	r3, [r3, #4]
 800ff66:	4a64      	ldr	r2, [pc, #400]	@ (80100f8 <tcp_input+0x298>)
 800ff68:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	681b      	ldr	r3, [r3, #0]
 800ff6e:	8a3a      	ldrh	r2, [r7, #16]
 800ff70:	4611      	mov	r1, r2
 800ff72:	4618      	mov	r0, r3
 800ff74:	f7fd ff5a 	bl	800de2c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	891a      	ldrh	r2, [r3, #8]
 800ff7c:	8a3b      	ldrh	r3, [r7, #16]
 800ff7e:	1ad3      	subs	r3, r2, r3
 800ff80:	b29a      	uxth	r2, r3
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	895b      	ldrh	r3, [r3, #10]
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	d005      	beq.n	800ff9a <tcp_input+0x13a>
 800ff8e:	4b54      	ldr	r3, [pc, #336]	@ (80100e0 <tcp_input+0x280>)
 800ff90:	22df      	movs	r2, #223	@ 0xdf
 800ff92:	495c      	ldr	r1, [pc, #368]	@ (8010104 <tcp_input+0x2a4>)
 800ff94:	4854      	ldr	r0, [pc, #336]	@ (80100e8 <tcp_input+0x288>)
 800ff96:	f007 fe19 	bl	8017bcc <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	891a      	ldrh	r2, [r3, #8]
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	681b      	ldr	r3, [r3, #0]
 800ffa2:	891b      	ldrh	r3, [r3, #8]
 800ffa4:	429a      	cmp	r2, r3
 800ffa6:	d005      	beq.n	800ffb4 <tcp_input+0x154>
 800ffa8:	4b4d      	ldr	r3, [pc, #308]	@ (80100e0 <tcp_input+0x280>)
 800ffaa:	22e0      	movs	r2, #224	@ 0xe0
 800ffac:	4956      	ldr	r1, [pc, #344]	@ (8010108 <tcp_input+0x2a8>)
 800ffae:	484e      	ldr	r0, [pc, #312]	@ (80100e8 <tcp_input+0x288>)
 800ffb0:	f007 fe0c 	bl	8017bcc <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800ffb4:	4b4d      	ldr	r3, [pc, #308]	@ (80100ec <tcp_input+0x28c>)
 800ffb6:	681b      	ldr	r3, [r3, #0]
 800ffb8:	881b      	ldrh	r3, [r3, #0]
 800ffba:	b29b      	uxth	r3, r3
 800ffbc:	4a4b      	ldr	r2, [pc, #300]	@ (80100ec <tcp_input+0x28c>)
 800ffbe:	6814      	ldr	r4, [r2, #0]
 800ffc0:	4618      	mov	r0, r3
 800ffc2:	f7fc f991 	bl	800c2e8 <lwip_htons>
 800ffc6:	4603      	mov	r3, r0
 800ffc8:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800ffca:	4b48      	ldr	r3, [pc, #288]	@ (80100ec <tcp_input+0x28c>)
 800ffcc:	681b      	ldr	r3, [r3, #0]
 800ffce:	885b      	ldrh	r3, [r3, #2]
 800ffd0:	b29b      	uxth	r3, r3
 800ffd2:	4a46      	ldr	r2, [pc, #280]	@ (80100ec <tcp_input+0x28c>)
 800ffd4:	6814      	ldr	r4, [r2, #0]
 800ffd6:	4618      	mov	r0, r3
 800ffd8:	f7fc f986 	bl	800c2e8 <lwip_htons>
 800ffdc:	4603      	mov	r3, r0
 800ffde:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800ffe0:	4b42      	ldr	r3, [pc, #264]	@ (80100ec <tcp_input+0x28c>)
 800ffe2:	681b      	ldr	r3, [r3, #0]
 800ffe4:	685b      	ldr	r3, [r3, #4]
 800ffe6:	4a41      	ldr	r2, [pc, #260]	@ (80100ec <tcp_input+0x28c>)
 800ffe8:	6814      	ldr	r4, [r2, #0]
 800ffea:	4618      	mov	r0, r3
 800ffec:	f7fc f992 	bl	800c314 <lwip_htonl>
 800fff0:	4603      	mov	r3, r0
 800fff2:	6063      	str	r3, [r4, #4]
 800fff4:	6863      	ldr	r3, [r4, #4]
 800fff6:	4a45      	ldr	r2, [pc, #276]	@ (801010c <tcp_input+0x2ac>)
 800fff8:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800fffa:	4b3c      	ldr	r3, [pc, #240]	@ (80100ec <tcp_input+0x28c>)
 800fffc:	681b      	ldr	r3, [r3, #0]
 800fffe:	689b      	ldr	r3, [r3, #8]
 8010000:	4a3a      	ldr	r2, [pc, #232]	@ (80100ec <tcp_input+0x28c>)
 8010002:	6814      	ldr	r4, [r2, #0]
 8010004:	4618      	mov	r0, r3
 8010006:	f7fc f985 	bl	800c314 <lwip_htonl>
 801000a:	4603      	mov	r3, r0
 801000c:	60a3      	str	r3, [r4, #8]
 801000e:	68a3      	ldr	r3, [r4, #8]
 8010010:	4a3f      	ldr	r2, [pc, #252]	@ (8010110 <tcp_input+0x2b0>)
 8010012:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8010014:	4b35      	ldr	r3, [pc, #212]	@ (80100ec <tcp_input+0x28c>)
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	89db      	ldrh	r3, [r3, #14]
 801001a:	b29b      	uxth	r3, r3
 801001c:	4a33      	ldr	r2, [pc, #204]	@ (80100ec <tcp_input+0x28c>)
 801001e:	6814      	ldr	r4, [r2, #0]
 8010020:	4618      	mov	r0, r3
 8010022:	f7fc f961 	bl	800c2e8 <lwip_htons>
 8010026:	4603      	mov	r3, r0
 8010028:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 801002a:	4b30      	ldr	r3, [pc, #192]	@ (80100ec <tcp_input+0x28c>)
 801002c:	681b      	ldr	r3, [r3, #0]
 801002e:	899b      	ldrh	r3, [r3, #12]
 8010030:	b29b      	uxth	r3, r3
 8010032:	4618      	mov	r0, r3
 8010034:	f7fc f958 	bl	800c2e8 <lwip_htons>
 8010038:	4603      	mov	r3, r0
 801003a:	b2db      	uxtb	r3, r3
 801003c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010040:	b2da      	uxtb	r2, r3
 8010042:	4b34      	ldr	r3, [pc, #208]	@ (8010114 <tcp_input+0x2b4>)
 8010044:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	891a      	ldrh	r2, [r3, #8]
 801004a:	4b33      	ldr	r3, [pc, #204]	@ (8010118 <tcp_input+0x2b8>)
 801004c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 801004e:	4b31      	ldr	r3, [pc, #196]	@ (8010114 <tcp_input+0x2b4>)
 8010050:	781b      	ldrb	r3, [r3, #0]
 8010052:	f003 0303 	and.w	r3, r3, #3
 8010056:	2b00      	cmp	r3, #0
 8010058:	d00c      	beq.n	8010074 <tcp_input+0x214>
    tcplen++;
 801005a:	4b2f      	ldr	r3, [pc, #188]	@ (8010118 <tcp_input+0x2b8>)
 801005c:	881b      	ldrh	r3, [r3, #0]
 801005e:	3301      	adds	r3, #1
 8010060:	b29a      	uxth	r2, r3
 8010062:	4b2d      	ldr	r3, [pc, #180]	@ (8010118 <tcp_input+0x2b8>)
 8010064:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	891a      	ldrh	r2, [r3, #8]
 801006a:	4b2b      	ldr	r3, [pc, #172]	@ (8010118 <tcp_input+0x2b8>)
 801006c:	881b      	ldrh	r3, [r3, #0]
 801006e:	429a      	cmp	r2, r3
 8010070:	f200 82e6 	bhi.w	8010640 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8010074:	2300      	movs	r3, #0
 8010076:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010078:	4b28      	ldr	r3, [pc, #160]	@ (801011c <tcp_input+0x2bc>)
 801007a:	681b      	ldr	r3, [r3, #0]
 801007c:	61fb      	str	r3, [r7, #28]
 801007e:	e09d      	b.n	80101bc <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8010080:	69fb      	ldr	r3, [r7, #28]
 8010082:	7d1b      	ldrb	r3, [r3, #20]
 8010084:	2b00      	cmp	r3, #0
 8010086:	d105      	bne.n	8010094 <tcp_input+0x234>
 8010088:	4b15      	ldr	r3, [pc, #84]	@ (80100e0 <tcp_input+0x280>)
 801008a:	22fb      	movs	r2, #251	@ 0xfb
 801008c:	4924      	ldr	r1, [pc, #144]	@ (8010120 <tcp_input+0x2c0>)
 801008e:	4816      	ldr	r0, [pc, #88]	@ (80100e8 <tcp_input+0x288>)
 8010090:	f007 fd9c 	bl	8017bcc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8010094:	69fb      	ldr	r3, [r7, #28]
 8010096:	7d1b      	ldrb	r3, [r3, #20]
 8010098:	2b0a      	cmp	r3, #10
 801009a:	d105      	bne.n	80100a8 <tcp_input+0x248>
 801009c:	4b10      	ldr	r3, [pc, #64]	@ (80100e0 <tcp_input+0x280>)
 801009e:	22fc      	movs	r2, #252	@ 0xfc
 80100a0:	4920      	ldr	r1, [pc, #128]	@ (8010124 <tcp_input+0x2c4>)
 80100a2:	4811      	ldr	r0, [pc, #68]	@ (80100e8 <tcp_input+0x288>)
 80100a4:	f007 fd92 	bl	8017bcc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80100a8:	69fb      	ldr	r3, [r7, #28]
 80100aa:	7d1b      	ldrb	r3, [r3, #20]
 80100ac:	2b01      	cmp	r3, #1
 80100ae:	d105      	bne.n	80100bc <tcp_input+0x25c>
 80100b0:	4b0b      	ldr	r3, [pc, #44]	@ (80100e0 <tcp_input+0x280>)
 80100b2:	22fd      	movs	r2, #253	@ 0xfd
 80100b4:	491c      	ldr	r1, [pc, #112]	@ (8010128 <tcp_input+0x2c8>)
 80100b6:	480c      	ldr	r0, [pc, #48]	@ (80100e8 <tcp_input+0x288>)
 80100b8:	f007 fd88 	bl	8017bcc <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80100bc:	69fb      	ldr	r3, [r7, #28]
 80100be:	7a1b      	ldrb	r3, [r3, #8]
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d033      	beq.n	801012c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80100c4:	69fb      	ldr	r3, [r7, #28]
 80100c6:	7a1a      	ldrb	r2, [r3, #8]
 80100c8:	4b09      	ldr	r3, [pc, #36]	@ (80100f0 <tcp_input+0x290>)
 80100ca:	685b      	ldr	r3, [r3, #4]
 80100cc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80100d0:	3301      	adds	r3, #1
 80100d2:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80100d4:	429a      	cmp	r2, r3
 80100d6:	d029      	beq.n	801012c <tcp_input+0x2cc>
      prev = pcb;
 80100d8:	69fb      	ldr	r3, [r7, #28]
 80100da:	61bb      	str	r3, [r7, #24]
      continue;
 80100dc:	e06b      	b.n	80101b6 <tcp_input+0x356>
 80100de:	bf00      	nop
 80100e0:	08021b44 	.word	0x08021b44
 80100e4:	08021b78 	.word	0x08021b78
 80100e8:	08021b90 	.word	0x08021b90
 80100ec:	20015274 	.word	0x20015274
 80100f0:	20011f0c 	.word	0x20011f0c
 80100f4:	20015278 	.word	0x20015278
 80100f8:	2001527c 	.word	0x2001527c
 80100fc:	2001527a 	.word	0x2001527a
 8010100:	08021bb8 	.word	0x08021bb8
 8010104:	08021bc8 	.word	0x08021bc8
 8010108:	08021bd4 	.word	0x08021bd4
 801010c:	20015284 	.word	0x20015284
 8010110:	20015288 	.word	0x20015288
 8010114:	20015290 	.word	0x20015290
 8010118:	2001528e 	.word	0x2001528e
 801011c:	20015258 	.word	0x20015258
 8010120:	08021bf4 	.word	0x08021bf4
 8010124:	08021c1c 	.word	0x08021c1c
 8010128:	08021c48 	.word	0x08021c48
    }

    if (pcb->remote_port == tcphdr->src &&
 801012c:	69fb      	ldr	r3, [r7, #28]
 801012e:	8b1a      	ldrh	r2, [r3, #24]
 8010130:	4b72      	ldr	r3, [pc, #456]	@ (80102fc <tcp_input+0x49c>)
 8010132:	681b      	ldr	r3, [r3, #0]
 8010134:	881b      	ldrh	r3, [r3, #0]
 8010136:	b29b      	uxth	r3, r3
 8010138:	429a      	cmp	r2, r3
 801013a:	d13a      	bne.n	80101b2 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 801013c:	69fb      	ldr	r3, [r7, #28]
 801013e:	8ada      	ldrh	r2, [r3, #22]
 8010140:	4b6e      	ldr	r3, [pc, #440]	@ (80102fc <tcp_input+0x49c>)
 8010142:	681b      	ldr	r3, [r3, #0]
 8010144:	885b      	ldrh	r3, [r3, #2]
 8010146:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8010148:	429a      	cmp	r2, r3
 801014a:	d132      	bne.n	80101b2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801014c:	69fb      	ldr	r3, [r7, #28]
 801014e:	685a      	ldr	r2, [r3, #4]
 8010150:	4b6b      	ldr	r3, [pc, #428]	@ (8010300 <tcp_input+0x4a0>)
 8010152:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8010154:	429a      	cmp	r2, r3
 8010156:	d12c      	bne.n	80101b2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010158:	69fb      	ldr	r3, [r7, #28]
 801015a:	681a      	ldr	r2, [r3, #0]
 801015c:	4b68      	ldr	r3, [pc, #416]	@ (8010300 <tcp_input+0x4a0>)
 801015e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010160:	429a      	cmp	r2, r3
 8010162:	d126      	bne.n	80101b2 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8010164:	69fb      	ldr	r3, [r7, #28]
 8010166:	68db      	ldr	r3, [r3, #12]
 8010168:	69fa      	ldr	r2, [r7, #28]
 801016a:	429a      	cmp	r2, r3
 801016c:	d106      	bne.n	801017c <tcp_input+0x31c>
 801016e:	4b65      	ldr	r3, [pc, #404]	@ (8010304 <tcp_input+0x4a4>)
 8010170:	f240 120d 	movw	r2, #269	@ 0x10d
 8010174:	4964      	ldr	r1, [pc, #400]	@ (8010308 <tcp_input+0x4a8>)
 8010176:	4865      	ldr	r0, [pc, #404]	@ (801030c <tcp_input+0x4ac>)
 8010178:	f007 fd28 	bl	8017bcc <iprintf>
      if (prev != NULL) {
 801017c:	69bb      	ldr	r3, [r7, #24]
 801017e:	2b00      	cmp	r3, #0
 8010180:	d00a      	beq.n	8010198 <tcp_input+0x338>
        prev->next = pcb->next;
 8010182:	69fb      	ldr	r3, [r7, #28]
 8010184:	68da      	ldr	r2, [r3, #12]
 8010186:	69bb      	ldr	r3, [r7, #24]
 8010188:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 801018a:	4b61      	ldr	r3, [pc, #388]	@ (8010310 <tcp_input+0x4b0>)
 801018c:	681a      	ldr	r2, [r3, #0]
 801018e:	69fb      	ldr	r3, [r7, #28]
 8010190:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8010192:	4a5f      	ldr	r2, [pc, #380]	@ (8010310 <tcp_input+0x4b0>)
 8010194:	69fb      	ldr	r3, [r7, #28]
 8010196:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8010198:	69fb      	ldr	r3, [r7, #28]
 801019a:	68db      	ldr	r3, [r3, #12]
 801019c:	69fa      	ldr	r2, [r7, #28]
 801019e:	429a      	cmp	r2, r3
 80101a0:	d111      	bne.n	80101c6 <tcp_input+0x366>
 80101a2:	4b58      	ldr	r3, [pc, #352]	@ (8010304 <tcp_input+0x4a4>)
 80101a4:	f240 1215 	movw	r2, #277	@ 0x115
 80101a8:	495a      	ldr	r1, [pc, #360]	@ (8010314 <tcp_input+0x4b4>)
 80101aa:	4858      	ldr	r0, [pc, #352]	@ (801030c <tcp_input+0x4ac>)
 80101ac:	f007 fd0e 	bl	8017bcc <iprintf>
      break;
 80101b0:	e009      	b.n	80101c6 <tcp_input+0x366>
    }
    prev = pcb;
 80101b2:	69fb      	ldr	r3, [r7, #28]
 80101b4:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80101b6:	69fb      	ldr	r3, [r7, #28]
 80101b8:	68db      	ldr	r3, [r3, #12]
 80101ba:	61fb      	str	r3, [r7, #28]
 80101bc:	69fb      	ldr	r3, [r7, #28]
 80101be:	2b00      	cmp	r3, #0
 80101c0:	f47f af5e 	bne.w	8010080 <tcp_input+0x220>
 80101c4:	e000      	b.n	80101c8 <tcp_input+0x368>
      break;
 80101c6:	bf00      	nop
  }

  if (pcb == NULL) {
 80101c8:	69fb      	ldr	r3, [r7, #28]
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	f040 80aa 	bne.w	8010324 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80101d0:	4b51      	ldr	r3, [pc, #324]	@ (8010318 <tcp_input+0x4b8>)
 80101d2:	681b      	ldr	r3, [r3, #0]
 80101d4:	61fb      	str	r3, [r7, #28]
 80101d6:	e03f      	b.n	8010258 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80101d8:	69fb      	ldr	r3, [r7, #28]
 80101da:	7d1b      	ldrb	r3, [r3, #20]
 80101dc:	2b0a      	cmp	r3, #10
 80101de:	d006      	beq.n	80101ee <tcp_input+0x38e>
 80101e0:	4b48      	ldr	r3, [pc, #288]	@ (8010304 <tcp_input+0x4a4>)
 80101e2:	f240 121f 	movw	r2, #287	@ 0x11f
 80101e6:	494d      	ldr	r1, [pc, #308]	@ (801031c <tcp_input+0x4bc>)
 80101e8:	4848      	ldr	r0, [pc, #288]	@ (801030c <tcp_input+0x4ac>)
 80101ea:	f007 fcef 	bl	8017bcc <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80101ee:	69fb      	ldr	r3, [r7, #28]
 80101f0:	7a1b      	ldrb	r3, [r3, #8]
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d009      	beq.n	801020a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80101f6:	69fb      	ldr	r3, [r7, #28]
 80101f8:	7a1a      	ldrb	r2, [r3, #8]
 80101fa:	4b41      	ldr	r3, [pc, #260]	@ (8010300 <tcp_input+0x4a0>)
 80101fc:	685b      	ldr	r3, [r3, #4]
 80101fe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010202:	3301      	adds	r3, #1
 8010204:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010206:	429a      	cmp	r2, r3
 8010208:	d122      	bne.n	8010250 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 801020a:	69fb      	ldr	r3, [r7, #28]
 801020c:	8b1a      	ldrh	r2, [r3, #24]
 801020e:	4b3b      	ldr	r3, [pc, #236]	@ (80102fc <tcp_input+0x49c>)
 8010210:	681b      	ldr	r3, [r3, #0]
 8010212:	881b      	ldrh	r3, [r3, #0]
 8010214:	b29b      	uxth	r3, r3
 8010216:	429a      	cmp	r2, r3
 8010218:	d11b      	bne.n	8010252 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 801021a:	69fb      	ldr	r3, [r7, #28]
 801021c:	8ada      	ldrh	r2, [r3, #22]
 801021e:	4b37      	ldr	r3, [pc, #220]	@ (80102fc <tcp_input+0x49c>)
 8010220:	681b      	ldr	r3, [r3, #0]
 8010222:	885b      	ldrh	r3, [r3, #2]
 8010224:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8010226:	429a      	cmp	r2, r3
 8010228:	d113      	bne.n	8010252 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801022a:	69fb      	ldr	r3, [r7, #28]
 801022c:	685a      	ldr	r2, [r3, #4]
 801022e:	4b34      	ldr	r3, [pc, #208]	@ (8010300 <tcp_input+0x4a0>)
 8010230:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8010232:	429a      	cmp	r2, r3
 8010234:	d10d      	bne.n	8010252 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010236:	69fb      	ldr	r3, [r7, #28]
 8010238:	681a      	ldr	r2, [r3, #0]
 801023a:	4b31      	ldr	r3, [pc, #196]	@ (8010300 <tcp_input+0x4a0>)
 801023c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801023e:	429a      	cmp	r2, r3
 8010240:	d107      	bne.n	8010252 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8010242:	69f8      	ldr	r0, [r7, #28]
 8010244:	f000 fb56 	bl	80108f4 <tcp_timewait_input>
        }
        pbuf_free(p);
 8010248:	6878      	ldr	r0, [r7, #4]
 801024a:	f7fd fe75 	bl	800df38 <pbuf_free>
        return;
 801024e:	e1fd      	b.n	801064c <tcp_input+0x7ec>
        continue;
 8010250:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010252:	69fb      	ldr	r3, [r7, #28]
 8010254:	68db      	ldr	r3, [r3, #12]
 8010256:	61fb      	str	r3, [r7, #28]
 8010258:	69fb      	ldr	r3, [r7, #28]
 801025a:	2b00      	cmp	r3, #0
 801025c:	d1bc      	bne.n	80101d8 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 801025e:	2300      	movs	r3, #0
 8010260:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010262:	4b2f      	ldr	r3, [pc, #188]	@ (8010320 <tcp_input+0x4c0>)
 8010264:	681b      	ldr	r3, [r3, #0]
 8010266:	617b      	str	r3, [r7, #20]
 8010268:	e02a      	b.n	80102c0 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801026a:	697b      	ldr	r3, [r7, #20]
 801026c:	7a1b      	ldrb	r3, [r3, #8]
 801026e:	2b00      	cmp	r3, #0
 8010270:	d00c      	beq.n	801028c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010272:	697b      	ldr	r3, [r7, #20]
 8010274:	7a1a      	ldrb	r2, [r3, #8]
 8010276:	4b22      	ldr	r3, [pc, #136]	@ (8010300 <tcp_input+0x4a0>)
 8010278:	685b      	ldr	r3, [r3, #4]
 801027a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801027e:	3301      	adds	r3, #1
 8010280:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8010282:	429a      	cmp	r2, r3
 8010284:	d002      	beq.n	801028c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8010286:	697b      	ldr	r3, [r7, #20]
 8010288:	61bb      	str	r3, [r7, #24]
        continue;
 801028a:	e016      	b.n	80102ba <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 801028c:	697b      	ldr	r3, [r7, #20]
 801028e:	8ada      	ldrh	r2, [r3, #22]
 8010290:	4b1a      	ldr	r3, [pc, #104]	@ (80102fc <tcp_input+0x49c>)
 8010292:	681b      	ldr	r3, [r3, #0]
 8010294:	885b      	ldrh	r3, [r3, #2]
 8010296:	b29b      	uxth	r3, r3
 8010298:	429a      	cmp	r2, r3
 801029a:	d10c      	bne.n	80102b6 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801029c:	697b      	ldr	r3, [r7, #20]
 801029e:	681a      	ldr	r2, [r3, #0]
 80102a0:	4b17      	ldr	r3, [pc, #92]	@ (8010300 <tcp_input+0x4a0>)
 80102a2:	695b      	ldr	r3, [r3, #20]
 80102a4:	429a      	cmp	r2, r3
 80102a6:	d00f      	beq.n	80102c8 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80102a8:	697b      	ldr	r3, [r7, #20]
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d00d      	beq.n	80102ca <tcp_input+0x46a>
 80102ae:	697b      	ldr	r3, [r7, #20]
 80102b0:	681b      	ldr	r3, [r3, #0]
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	d009      	beq.n	80102ca <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80102b6:	697b      	ldr	r3, [r7, #20]
 80102b8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80102ba:	697b      	ldr	r3, [r7, #20]
 80102bc:	68db      	ldr	r3, [r3, #12]
 80102be:	617b      	str	r3, [r7, #20]
 80102c0:	697b      	ldr	r3, [r7, #20]
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	d1d1      	bne.n	801026a <tcp_input+0x40a>
 80102c6:	e000      	b.n	80102ca <tcp_input+0x46a>
            break;
 80102c8:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80102ca:	697b      	ldr	r3, [r7, #20]
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	d029      	beq.n	8010324 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80102d0:	69bb      	ldr	r3, [r7, #24]
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	d00a      	beq.n	80102ec <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80102d6:	697b      	ldr	r3, [r7, #20]
 80102d8:	68da      	ldr	r2, [r3, #12]
 80102da:	69bb      	ldr	r3, [r7, #24]
 80102dc:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80102de:	4b10      	ldr	r3, [pc, #64]	@ (8010320 <tcp_input+0x4c0>)
 80102e0:	681a      	ldr	r2, [r3, #0]
 80102e2:	697b      	ldr	r3, [r7, #20]
 80102e4:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80102e6:	4a0e      	ldr	r2, [pc, #56]	@ (8010320 <tcp_input+0x4c0>)
 80102e8:	697b      	ldr	r3, [r7, #20]
 80102ea:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80102ec:	6978      	ldr	r0, [r7, #20]
 80102ee:	f000 fa03 	bl	80106f8 <tcp_listen_input>
      }
      pbuf_free(p);
 80102f2:	6878      	ldr	r0, [r7, #4]
 80102f4:	f7fd fe20 	bl	800df38 <pbuf_free>
      return;
 80102f8:	e1a8      	b.n	801064c <tcp_input+0x7ec>
 80102fa:	bf00      	nop
 80102fc:	20015274 	.word	0x20015274
 8010300:	20011f0c 	.word	0x20011f0c
 8010304:	08021b44 	.word	0x08021b44
 8010308:	08021c70 	.word	0x08021c70
 801030c:	08021b90 	.word	0x08021b90
 8010310:	20015258 	.word	0x20015258
 8010314:	08021c9c 	.word	0x08021c9c
 8010318:	2001525c 	.word	0x2001525c
 801031c:	08021cc8 	.word	0x08021cc8
 8010320:	20015254 	.word	0x20015254
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8010324:	69fb      	ldr	r3, [r7, #28]
 8010326:	2b00      	cmp	r3, #0
 8010328:	f000 8158 	beq.w	80105dc <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 801032c:	4b95      	ldr	r3, [pc, #596]	@ (8010584 <tcp_input+0x724>)
 801032e:	2200      	movs	r2, #0
 8010330:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	891a      	ldrh	r2, [r3, #8]
 8010336:	4b93      	ldr	r3, [pc, #588]	@ (8010584 <tcp_input+0x724>)
 8010338:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 801033a:	4a92      	ldr	r2, [pc, #584]	@ (8010584 <tcp_input+0x724>)
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8010340:	4b91      	ldr	r3, [pc, #580]	@ (8010588 <tcp_input+0x728>)
 8010342:	681b      	ldr	r3, [r3, #0]
 8010344:	4a8f      	ldr	r2, [pc, #572]	@ (8010584 <tcp_input+0x724>)
 8010346:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8010348:	4b90      	ldr	r3, [pc, #576]	@ (801058c <tcp_input+0x72c>)
 801034a:	2200      	movs	r2, #0
 801034c:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 801034e:	4b90      	ldr	r3, [pc, #576]	@ (8010590 <tcp_input+0x730>)
 8010350:	2200      	movs	r2, #0
 8010352:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8010354:	4b8f      	ldr	r3, [pc, #572]	@ (8010594 <tcp_input+0x734>)
 8010356:	2200      	movs	r2, #0
 8010358:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 801035a:	4b8f      	ldr	r3, [pc, #572]	@ (8010598 <tcp_input+0x738>)
 801035c:	781b      	ldrb	r3, [r3, #0]
 801035e:	f003 0308 	and.w	r3, r3, #8
 8010362:	2b00      	cmp	r3, #0
 8010364:	d006      	beq.n	8010374 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	7b5b      	ldrb	r3, [r3, #13]
 801036a:	f043 0301 	orr.w	r3, r3, #1
 801036e:	b2da      	uxtb	r2, r3
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8010374:	69fb      	ldr	r3, [r7, #28]
 8010376:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010378:	2b00      	cmp	r3, #0
 801037a:	d017      	beq.n	80103ac <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801037c:	69f8      	ldr	r0, [r7, #28]
 801037e:	f7ff f929 	bl	800f5d4 <tcp_process_refused_data>
 8010382:	4603      	mov	r3, r0
 8010384:	f113 0f0d 	cmn.w	r3, #13
 8010388:	d007      	beq.n	801039a <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801038a:	69fb      	ldr	r3, [r7, #28]
 801038c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801038e:	2b00      	cmp	r3, #0
 8010390:	d00c      	beq.n	80103ac <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8010392:	4b82      	ldr	r3, [pc, #520]	@ (801059c <tcp_input+0x73c>)
 8010394:	881b      	ldrh	r3, [r3, #0]
 8010396:	2b00      	cmp	r3, #0
 8010398:	d008      	beq.n	80103ac <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 801039a:	69fb      	ldr	r3, [r7, #28]
 801039c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801039e:	2b00      	cmp	r3, #0
 80103a0:	f040 80e3 	bne.w	801056a <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80103a4:	69f8      	ldr	r0, [r7, #28]
 80103a6:	f003 f9a7 	bl	80136f8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80103aa:	e0de      	b.n	801056a <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 80103ac:	4a7c      	ldr	r2, [pc, #496]	@ (80105a0 <tcp_input+0x740>)
 80103ae:	69fb      	ldr	r3, [r7, #28]
 80103b0:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80103b2:	69f8      	ldr	r0, [r7, #28]
 80103b4:	f000 fb18 	bl	80109e8 <tcp_process>
 80103b8:	4603      	mov	r3, r0
 80103ba:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80103bc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80103c0:	f113 0f0d 	cmn.w	r3, #13
 80103c4:	f000 80d3 	beq.w	801056e <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 80103c8:	4b71      	ldr	r3, [pc, #452]	@ (8010590 <tcp_input+0x730>)
 80103ca:	781b      	ldrb	r3, [r3, #0]
 80103cc:	f003 0308 	and.w	r3, r3, #8
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d015      	beq.n	8010400 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80103d4:	69fb      	ldr	r3, [r7, #28]
 80103d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d008      	beq.n	80103f0 <tcp_input+0x590>
 80103de:	69fb      	ldr	r3, [r7, #28]
 80103e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80103e4:	69fa      	ldr	r2, [r7, #28]
 80103e6:	6912      	ldr	r2, [r2, #16]
 80103e8:	f06f 010d 	mvn.w	r1, #13
 80103ec:	4610      	mov	r0, r2
 80103ee:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80103f0:	69f9      	ldr	r1, [r7, #28]
 80103f2:	486c      	ldr	r0, [pc, #432]	@ (80105a4 <tcp_input+0x744>)
 80103f4:	f7ff fbbc 	bl	800fb70 <tcp_pcb_remove>
        tcp_free(pcb);
 80103f8:	69f8      	ldr	r0, [r7, #28]
 80103fa:	f7fe f9a7 	bl	800e74c <tcp_free>
 80103fe:	e0da      	b.n	80105b6 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8010400:	2300      	movs	r3, #0
 8010402:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8010404:	4b63      	ldr	r3, [pc, #396]	@ (8010594 <tcp_input+0x734>)
 8010406:	881b      	ldrh	r3, [r3, #0]
 8010408:	2b00      	cmp	r3, #0
 801040a:	d01d      	beq.n	8010448 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 801040c:	4b61      	ldr	r3, [pc, #388]	@ (8010594 <tcp_input+0x734>)
 801040e:	881b      	ldrh	r3, [r3, #0]
 8010410:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8010412:	69fb      	ldr	r3, [r7, #28]
 8010414:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010418:	2b00      	cmp	r3, #0
 801041a:	d00a      	beq.n	8010432 <tcp_input+0x5d2>
 801041c:	69fb      	ldr	r3, [r7, #28]
 801041e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010422:	69fa      	ldr	r2, [r7, #28]
 8010424:	6910      	ldr	r0, [r2, #16]
 8010426:	89fa      	ldrh	r2, [r7, #14]
 8010428:	69f9      	ldr	r1, [r7, #28]
 801042a:	4798      	blx	r3
 801042c:	4603      	mov	r3, r0
 801042e:	74fb      	strb	r3, [r7, #19]
 8010430:	e001      	b.n	8010436 <tcp_input+0x5d6>
 8010432:	2300      	movs	r3, #0
 8010434:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8010436:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801043a:	f113 0f0d 	cmn.w	r3, #13
 801043e:	f000 8098 	beq.w	8010572 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8010442:	4b54      	ldr	r3, [pc, #336]	@ (8010594 <tcp_input+0x734>)
 8010444:	2200      	movs	r2, #0
 8010446:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8010448:	69f8      	ldr	r0, [r7, #28]
 801044a:	f000 f915 	bl	8010678 <tcp_input_delayed_close>
 801044e:	4603      	mov	r3, r0
 8010450:	2b00      	cmp	r3, #0
 8010452:	f040 8090 	bne.w	8010576 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8010456:	4b4d      	ldr	r3, [pc, #308]	@ (801058c <tcp_input+0x72c>)
 8010458:	681b      	ldr	r3, [r3, #0]
 801045a:	2b00      	cmp	r3, #0
 801045c:	d041      	beq.n	80104e2 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801045e:	69fb      	ldr	r3, [r7, #28]
 8010460:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010462:	2b00      	cmp	r3, #0
 8010464:	d006      	beq.n	8010474 <tcp_input+0x614>
 8010466:	4b50      	ldr	r3, [pc, #320]	@ (80105a8 <tcp_input+0x748>)
 8010468:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 801046c:	494f      	ldr	r1, [pc, #316]	@ (80105ac <tcp_input+0x74c>)
 801046e:	4850      	ldr	r0, [pc, #320]	@ (80105b0 <tcp_input+0x750>)
 8010470:	f007 fbac 	bl	8017bcc <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8010474:	69fb      	ldr	r3, [r7, #28]
 8010476:	8b5b      	ldrh	r3, [r3, #26]
 8010478:	f003 0310 	and.w	r3, r3, #16
 801047c:	2b00      	cmp	r3, #0
 801047e:	d008      	beq.n	8010492 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8010480:	4b42      	ldr	r3, [pc, #264]	@ (801058c <tcp_input+0x72c>)
 8010482:	681b      	ldr	r3, [r3, #0]
 8010484:	4618      	mov	r0, r3
 8010486:	f7fd fd57 	bl	800df38 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801048a:	69f8      	ldr	r0, [r7, #28]
 801048c:	f7fe fc46 	bl	800ed1c <tcp_abort>
            goto aborted;
 8010490:	e091      	b.n	80105b6 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8010492:	69fb      	ldr	r3, [r7, #28]
 8010494:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010498:	2b00      	cmp	r3, #0
 801049a:	d00c      	beq.n	80104b6 <tcp_input+0x656>
 801049c:	69fb      	ldr	r3, [r7, #28]
 801049e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80104a2:	69fb      	ldr	r3, [r7, #28]
 80104a4:	6918      	ldr	r0, [r3, #16]
 80104a6:	4b39      	ldr	r3, [pc, #228]	@ (801058c <tcp_input+0x72c>)
 80104a8:	681a      	ldr	r2, [r3, #0]
 80104aa:	2300      	movs	r3, #0
 80104ac:	69f9      	ldr	r1, [r7, #28]
 80104ae:	47a0      	blx	r4
 80104b0:	4603      	mov	r3, r0
 80104b2:	74fb      	strb	r3, [r7, #19]
 80104b4:	e008      	b.n	80104c8 <tcp_input+0x668>
 80104b6:	4b35      	ldr	r3, [pc, #212]	@ (801058c <tcp_input+0x72c>)
 80104b8:	681a      	ldr	r2, [r3, #0]
 80104ba:	2300      	movs	r3, #0
 80104bc:	69f9      	ldr	r1, [r7, #28]
 80104be:	2000      	movs	r0, #0
 80104c0:	f7ff f95e 	bl	800f780 <tcp_recv_null>
 80104c4:	4603      	mov	r3, r0
 80104c6:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80104c8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80104cc:	f113 0f0d 	cmn.w	r3, #13
 80104d0:	d053      	beq.n	801057a <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80104d2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	d003      	beq.n	80104e2 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80104da:	4b2c      	ldr	r3, [pc, #176]	@ (801058c <tcp_input+0x72c>)
 80104dc:	681a      	ldr	r2, [r3, #0]
 80104de:	69fb      	ldr	r3, [r7, #28]
 80104e0:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80104e2:	4b2b      	ldr	r3, [pc, #172]	@ (8010590 <tcp_input+0x730>)
 80104e4:	781b      	ldrb	r3, [r3, #0]
 80104e6:	f003 0320 	and.w	r3, r3, #32
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d030      	beq.n	8010550 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 80104ee:	69fb      	ldr	r3, [r7, #28]
 80104f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	d009      	beq.n	801050a <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80104f6:	69fb      	ldr	r3, [r7, #28]
 80104f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80104fa:	7b5a      	ldrb	r2, [r3, #13]
 80104fc:	69fb      	ldr	r3, [r7, #28]
 80104fe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010500:	f042 0220 	orr.w	r2, r2, #32
 8010504:	b2d2      	uxtb	r2, r2
 8010506:	735a      	strb	r2, [r3, #13]
 8010508:	e022      	b.n	8010550 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801050a:	69fb      	ldr	r3, [r7, #28]
 801050c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801050e:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8010512:	d005      	beq.n	8010520 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8010514:	69fb      	ldr	r3, [r7, #28]
 8010516:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010518:	3301      	adds	r3, #1
 801051a:	b29a      	uxth	r2, r3
 801051c:	69fb      	ldr	r3, [r7, #28]
 801051e:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8010520:	69fb      	ldr	r3, [r7, #28]
 8010522:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010526:	2b00      	cmp	r3, #0
 8010528:	d00b      	beq.n	8010542 <tcp_input+0x6e2>
 801052a:	69fb      	ldr	r3, [r7, #28]
 801052c:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8010530:	69fb      	ldr	r3, [r7, #28]
 8010532:	6918      	ldr	r0, [r3, #16]
 8010534:	2300      	movs	r3, #0
 8010536:	2200      	movs	r2, #0
 8010538:	69f9      	ldr	r1, [r7, #28]
 801053a:	47a0      	blx	r4
 801053c:	4603      	mov	r3, r0
 801053e:	74fb      	strb	r3, [r7, #19]
 8010540:	e001      	b.n	8010546 <tcp_input+0x6e6>
 8010542:	2300      	movs	r3, #0
 8010544:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8010546:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801054a:	f113 0f0d 	cmn.w	r3, #13
 801054e:	d016      	beq.n	801057e <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8010550:	4b13      	ldr	r3, [pc, #76]	@ (80105a0 <tcp_input+0x740>)
 8010552:	2200      	movs	r2, #0
 8010554:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8010556:	69f8      	ldr	r0, [r7, #28]
 8010558:	f000 f88e 	bl	8010678 <tcp_input_delayed_close>
 801055c:	4603      	mov	r3, r0
 801055e:	2b00      	cmp	r3, #0
 8010560:	d128      	bne.n	80105b4 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8010562:	69f8      	ldr	r0, [r7, #28]
 8010564:	f002 fac2 	bl	8012aec <tcp_output>
 8010568:	e025      	b.n	80105b6 <tcp_input+0x756>
        goto aborted;
 801056a:	bf00      	nop
 801056c:	e023      	b.n	80105b6 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 801056e:	bf00      	nop
 8010570:	e021      	b.n	80105b6 <tcp_input+0x756>
              goto aborted;
 8010572:	bf00      	nop
 8010574:	e01f      	b.n	80105b6 <tcp_input+0x756>
          goto aborted;
 8010576:	bf00      	nop
 8010578:	e01d      	b.n	80105b6 <tcp_input+0x756>
            goto aborted;
 801057a:	bf00      	nop
 801057c:	e01b      	b.n	80105b6 <tcp_input+0x756>
              goto aborted;
 801057e:	bf00      	nop
 8010580:	e019      	b.n	80105b6 <tcp_input+0x756>
 8010582:	bf00      	nop
 8010584:	20015264 	.word	0x20015264
 8010588:	20015274 	.word	0x20015274
 801058c:	20015294 	.word	0x20015294
 8010590:	20015291 	.word	0x20015291
 8010594:	2001528c 	.word	0x2001528c
 8010598:	20015290 	.word	0x20015290
 801059c:	2001528e 	.word	0x2001528e
 80105a0:	20015298 	.word	0x20015298
 80105a4:	20015258 	.word	0x20015258
 80105a8:	08021b44 	.word	0x08021b44
 80105ac:	08021cf8 	.word	0x08021cf8
 80105b0:	08021b90 	.word	0x08021b90
          goto aborted;
 80105b4:	bf00      	nop
    tcp_input_pcb = NULL;
 80105b6:	4b27      	ldr	r3, [pc, #156]	@ (8010654 <tcp_input+0x7f4>)
 80105b8:	2200      	movs	r2, #0
 80105ba:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80105bc:	4b26      	ldr	r3, [pc, #152]	@ (8010658 <tcp_input+0x7f8>)
 80105be:	2200      	movs	r2, #0
 80105c0:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80105c2:	4b26      	ldr	r3, [pc, #152]	@ (801065c <tcp_input+0x7fc>)
 80105c4:	685b      	ldr	r3, [r3, #4]
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	d03f      	beq.n	801064a <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 80105ca:	4b24      	ldr	r3, [pc, #144]	@ (801065c <tcp_input+0x7fc>)
 80105cc:	685b      	ldr	r3, [r3, #4]
 80105ce:	4618      	mov	r0, r3
 80105d0:	f7fd fcb2 	bl	800df38 <pbuf_free>
      inseg.p = NULL;
 80105d4:	4b21      	ldr	r3, [pc, #132]	@ (801065c <tcp_input+0x7fc>)
 80105d6:	2200      	movs	r2, #0
 80105d8:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80105da:	e036      	b.n	801064a <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80105dc:	4b20      	ldr	r3, [pc, #128]	@ (8010660 <tcp_input+0x800>)
 80105de:	681b      	ldr	r3, [r3, #0]
 80105e0:	899b      	ldrh	r3, [r3, #12]
 80105e2:	b29b      	uxth	r3, r3
 80105e4:	4618      	mov	r0, r3
 80105e6:	f7fb fe7f 	bl	800c2e8 <lwip_htons>
 80105ea:	4603      	mov	r3, r0
 80105ec:	b2db      	uxtb	r3, r3
 80105ee:	f003 0304 	and.w	r3, r3, #4
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d118      	bne.n	8010628 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80105f6:	4b1b      	ldr	r3, [pc, #108]	@ (8010664 <tcp_input+0x804>)
 80105f8:	6819      	ldr	r1, [r3, #0]
 80105fa:	4b1b      	ldr	r3, [pc, #108]	@ (8010668 <tcp_input+0x808>)
 80105fc:	881b      	ldrh	r3, [r3, #0]
 80105fe:	461a      	mov	r2, r3
 8010600:	4b1a      	ldr	r3, [pc, #104]	@ (801066c <tcp_input+0x80c>)
 8010602:	681b      	ldr	r3, [r3, #0]
 8010604:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010606:	4b16      	ldr	r3, [pc, #88]	@ (8010660 <tcp_input+0x800>)
 8010608:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801060a:	885b      	ldrh	r3, [r3, #2]
 801060c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801060e:	4a14      	ldr	r2, [pc, #80]	@ (8010660 <tcp_input+0x800>)
 8010610:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010612:	8812      	ldrh	r2, [r2, #0]
 8010614:	b292      	uxth	r2, r2
 8010616:	9202      	str	r2, [sp, #8]
 8010618:	9301      	str	r3, [sp, #4]
 801061a:	4b15      	ldr	r3, [pc, #84]	@ (8010670 <tcp_input+0x810>)
 801061c:	9300      	str	r3, [sp, #0]
 801061e:	4b15      	ldr	r3, [pc, #84]	@ (8010674 <tcp_input+0x814>)
 8010620:	4602      	mov	r2, r0
 8010622:	2000      	movs	r0, #0
 8010624:	f003 f816 	bl	8013654 <tcp_rst>
    pbuf_free(p);
 8010628:	6878      	ldr	r0, [r7, #4]
 801062a:	f7fd fc85 	bl	800df38 <pbuf_free>
  return;
 801062e:	e00c      	b.n	801064a <tcp_input+0x7ea>
    goto dropped;
 8010630:	bf00      	nop
 8010632:	e006      	b.n	8010642 <tcp_input+0x7e2>
    goto dropped;
 8010634:	bf00      	nop
 8010636:	e004      	b.n	8010642 <tcp_input+0x7e2>
    goto dropped;
 8010638:	bf00      	nop
 801063a:	e002      	b.n	8010642 <tcp_input+0x7e2>
      goto dropped;
 801063c:	bf00      	nop
 801063e:	e000      	b.n	8010642 <tcp_input+0x7e2>
      goto dropped;
 8010640:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8010642:	6878      	ldr	r0, [r7, #4]
 8010644:	f7fd fc78 	bl	800df38 <pbuf_free>
 8010648:	e000      	b.n	801064c <tcp_input+0x7ec>
  return;
 801064a:	bf00      	nop
}
 801064c:	3724      	adds	r7, #36	@ 0x24
 801064e:	46bd      	mov	sp, r7
 8010650:	bd90      	pop	{r4, r7, pc}
 8010652:	bf00      	nop
 8010654:	20015298 	.word	0x20015298
 8010658:	20015294 	.word	0x20015294
 801065c:	20015264 	.word	0x20015264
 8010660:	20015274 	.word	0x20015274
 8010664:	20015288 	.word	0x20015288
 8010668:	2001528e 	.word	0x2001528e
 801066c:	20015284 	.word	0x20015284
 8010670:	20011f1c 	.word	0x20011f1c
 8010674:	20011f20 	.word	0x20011f20

08010678 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8010678:	b580      	push	{r7, lr}
 801067a:	b082      	sub	sp, #8
 801067c:	af00      	add	r7, sp, #0
 801067e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	2b00      	cmp	r3, #0
 8010684:	d106      	bne.n	8010694 <tcp_input_delayed_close+0x1c>
 8010686:	4b17      	ldr	r3, [pc, #92]	@ (80106e4 <tcp_input_delayed_close+0x6c>)
 8010688:	f240 225a 	movw	r2, #602	@ 0x25a
 801068c:	4916      	ldr	r1, [pc, #88]	@ (80106e8 <tcp_input_delayed_close+0x70>)
 801068e:	4817      	ldr	r0, [pc, #92]	@ (80106ec <tcp_input_delayed_close+0x74>)
 8010690:	f007 fa9c 	bl	8017bcc <iprintf>

  if (recv_flags & TF_CLOSED) {
 8010694:	4b16      	ldr	r3, [pc, #88]	@ (80106f0 <tcp_input_delayed_close+0x78>)
 8010696:	781b      	ldrb	r3, [r3, #0]
 8010698:	f003 0310 	and.w	r3, r3, #16
 801069c:	2b00      	cmp	r3, #0
 801069e:	d01c      	beq.n	80106da <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	8b5b      	ldrh	r3, [r3, #26]
 80106a4:	f003 0310 	and.w	r3, r3, #16
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d10d      	bne.n	80106c8 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d008      	beq.n	80106c8 <tcp_input_delayed_close+0x50>
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80106bc:	687a      	ldr	r2, [r7, #4]
 80106be:	6912      	ldr	r2, [r2, #16]
 80106c0:	f06f 010e 	mvn.w	r1, #14
 80106c4:	4610      	mov	r0, r2
 80106c6:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80106c8:	6879      	ldr	r1, [r7, #4]
 80106ca:	480a      	ldr	r0, [pc, #40]	@ (80106f4 <tcp_input_delayed_close+0x7c>)
 80106cc:	f7ff fa50 	bl	800fb70 <tcp_pcb_remove>
    tcp_free(pcb);
 80106d0:	6878      	ldr	r0, [r7, #4]
 80106d2:	f7fe f83b 	bl	800e74c <tcp_free>
    return 1;
 80106d6:	2301      	movs	r3, #1
 80106d8:	e000      	b.n	80106dc <tcp_input_delayed_close+0x64>
  }
  return 0;
 80106da:	2300      	movs	r3, #0
}
 80106dc:	4618      	mov	r0, r3
 80106de:	3708      	adds	r7, #8
 80106e0:	46bd      	mov	sp, r7
 80106e2:	bd80      	pop	{r7, pc}
 80106e4:	08021b44 	.word	0x08021b44
 80106e8:	08021d14 	.word	0x08021d14
 80106ec:	08021b90 	.word	0x08021b90
 80106f0:	20015291 	.word	0x20015291
 80106f4:	20015258 	.word	0x20015258

080106f8 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80106f8:	b590      	push	{r4, r7, lr}
 80106fa:	b08b      	sub	sp, #44	@ 0x2c
 80106fc:	af04      	add	r7, sp, #16
 80106fe:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8010700:	4b6f      	ldr	r3, [pc, #444]	@ (80108c0 <tcp_listen_input+0x1c8>)
 8010702:	781b      	ldrb	r3, [r3, #0]
 8010704:	f003 0304 	and.w	r3, r3, #4
 8010708:	2b00      	cmp	r3, #0
 801070a:	f040 80d2 	bne.w	80108b2 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	2b00      	cmp	r3, #0
 8010712:	d106      	bne.n	8010722 <tcp_listen_input+0x2a>
 8010714:	4b6b      	ldr	r3, [pc, #428]	@ (80108c4 <tcp_listen_input+0x1cc>)
 8010716:	f240 2281 	movw	r2, #641	@ 0x281
 801071a:	496b      	ldr	r1, [pc, #428]	@ (80108c8 <tcp_listen_input+0x1d0>)
 801071c:	486b      	ldr	r0, [pc, #428]	@ (80108cc <tcp_listen_input+0x1d4>)
 801071e:	f007 fa55 	bl	8017bcc <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8010722:	4b67      	ldr	r3, [pc, #412]	@ (80108c0 <tcp_listen_input+0x1c8>)
 8010724:	781b      	ldrb	r3, [r3, #0]
 8010726:	f003 0310 	and.w	r3, r3, #16
 801072a:	2b00      	cmp	r3, #0
 801072c:	d019      	beq.n	8010762 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801072e:	4b68      	ldr	r3, [pc, #416]	@ (80108d0 <tcp_listen_input+0x1d8>)
 8010730:	6819      	ldr	r1, [r3, #0]
 8010732:	4b68      	ldr	r3, [pc, #416]	@ (80108d4 <tcp_listen_input+0x1dc>)
 8010734:	881b      	ldrh	r3, [r3, #0]
 8010736:	461a      	mov	r2, r3
 8010738:	4b67      	ldr	r3, [pc, #412]	@ (80108d8 <tcp_listen_input+0x1e0>)
 801073a:	681b      	ldr	r3, [r3, #0]
 801073c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801073e:	4b67      	ldr	r3, [pc, #412]	@ (80108dc <tcp_listen_input+0x1e4>)
 8010740:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010742:	885b      	ldrh	r3, [r3, #2]
 8010744:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010746:	4a65      	ldr	r2, [pc, #404]	@ (80108dc <tcp_listen_input+0x1e4>)
 8010748:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801074a:	8812      	ldrh	r2, [r2, #0]
 801074c:	b292      	uxth	r2, r2
 801074e:	9202      	str	r2, [sp, #8]
 8010750:	9301      	str	r3, [sp, #4]
 8010752:	4b63      	ldr	r3, [pc, #396]	@ (80108e0 <tcp_listen_input+0x1e8>)
 8010754:	9300      	str	r3, [sp, #0]
 8010756:	4b63      	ldr	r3, [pc, #396]	@ (80108e4 <tcp_listen_input+0x1ec>)
 8010758:	4602      	mov	r2, r0
 801075a:	6878      	ldr	r0, [r7, #4]
 801075c:	f002 ff7a 	bl	8013654 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8010760:	e0a9      	b.n	80108b6 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8010762:	4b57      	ldr	r3, [pc, #348]	@ (80108c0 <tcp_listen_input+0x1c8>)
 8010764:	781b      	ldrb	r3, [r3, #0]
 8010766:	f003 0302 	and.w	r3, r3, #2
 801076a:	2b00      	cmp	r3, #0
 801076c:	f000 80a3 	beq.w	80108b6 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	7d5b      	ldrb	r3, [r3, #21]
 8010774:	4618      	mov	r0, r3
 8010776:	f7ff f927 	bl	800f9c8 <tcp_alloc>
 801077a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 801077c:	697b      	ldr	r3, [r7, #20]
 801077e:	2b00      	cmp	r3, #0
 8010780:	d111      	bne.n	80107a6 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	699b      	ldr	r3, [r3, #24]
 8010786:	2b00      	cmp	r3, #0
 8010788:	d00a      	beq.n	80107a0 <tcp_listen_input+0xa8>
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	699b      	ldr	r3, [r3, #24]
 801078e:	687a      	ldr	r2, [r7, #4]
 8010790:	6910      	ldr	r0, [r2, #16]
 8010792:	f04f 32ff 	mov.w	r2, #4294967295
 8010796:	2100      	movs	r1, #0
 8010798:	4798      	blx	r3
 801079a:	4603      	mov	r3, r0
 801079c:	73bb      	strb	r3, [r7, #14]
      return;
 801079e:	e08b      	b.n	80108b8 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80107a0:	23f0      	movs	r3, #240	@ 0xf0
 80107a2:	73bb      	strb	r3, [r7, #14]
      return;
 80107a4:	e088      	b.n	80108b8 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80107a6:	4b50      	ldr	r3, [pc, #320]	@ (80108e8 <tcp_listen_input+0x1f0>)
 80107a8:	695a      	ldr	r2, [r3, #20]
 80107aa:	697b      	ldr	r3, [r7, #20]
 80107ac:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80107ae:	4b4e      	ldr	r3, [pc, #312]	@ (80108e8 <tcp_listen_input+0x1f0>)
 80107b0:	691a      	ldr	r2, [r3, #16]
 80107b2:	697b      	ldr	r3, [r7, #20]
 80107b4:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	8ada      	ldrh	r2, [r3, #22]
 80107ba:	697b      	ldr	r3, [r7, #20]
 80107bc:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80107be:	4b47      	ldr	r3, [pc, #284]	@ (80108dc <tcp_listen_input+0x1e4>)
 80107c0:	681b      	ldr	r3, [r3, #0]
 80107c2:	881b      	ldrh	r3, [r3, #0]
 80107c4:	b29a      	uxth	r2, r3
 80107c6:	697b      	ldr	r3, [r7, #20]
 80107c8:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80107ca:	697b      	ldr	r3, [r7, #20]
 80107cc:	2203      	movs	r2, #3
 80107ce:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80107d0:	4b41      	ldr	r3, [pc, #260]	@ (80108d8 <tcp_listen_input+0x1e0>)
 80107d2:	681b      	ldr	r3, [r3, #0]
 80107d4:	1c5a      	adds	r2, r3, #1
 80107d6:	697b      	ldr	r3, [r7, #20]
 80107d8:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80107da:	697b      	ldr	r3, [r7, #20]
 80107dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80107de:	697b      	ldr	r3, [r7, #20]
 80107e0:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 80107e2:	6978      	ldr	r0, [r7, #20]
 80107e4:	f7ff fa58 	bl	800fc98 <tcp_next_iss>
 80107e8:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80107ea:	697b      	ldr	r3, [r7, #20]
 80107ec:	693a      	ldr	r2, [r7, #16]
 80107ee:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 80107f0:	697b      	ldr	r3, [r7, #20]
 80107f2:	693a      	ldr	r2, [r7, #16]
 80107f4:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 80107f6:	697b      	ldr	r3, [r7, #20]
 80107f8:	693a      	ldr	r2, [r7, #16]
 80107fa:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 80107fc:	697b      	ldr	r3, [r7, #20]
 80107fe:	693a      	ldr	r2, [r7, #16]
 8010800:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8010802:	4b35      	ldr	r3, [pc, #212]	@ (80108d8 <tcp_listen_input+0x1e0>)
 8010804:	681b      	ldr	r3, [r3, #0]
 8010806:	1e5a      	subs	r2, r3, #1
 8010808:	697b      	ldr	r3, [r7, #20]
 801080a:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	691a      	ldr	r2, [r3, #16]
 8010810:	697b      	ldr	r3, [r7, #20]
 8010812:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8010814:	697b      	ldr	r3, [r7, #20]
 8010816:	687a      	ldr	r2, [r7, #4]
 8010818:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	7a5b      	ldrb	r3, [r3, #9]
 801081e:	f003 030c 	and.w	r3, r3, #12
 8010822:	b2da      	uxtb	r2, r3
 8010824:	697b      	ldr	r3, [r7, #20]
 8010826:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	7a1a      	ldrb	r2, [r3, #8]
 801082c:	697b      	ldr	r3, [r7, #20]
 801082e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8010830:	4b2e      	ldr	r3, [pc, #184]	@ (80108ec <tcp_listen_input+0x1f4>)
 8010832:	681a      	ldr	r2, [r3, #0]
 8010834:	697b      	ldr	r3, [r7, #20]
 8010836:	60da      	str	r2, [r3, #12]
 8010838:	4a2c      	ldr	r2, [pc, #176]	@ (80108ec <tcp_listen_input+0x1f4>)
 801083a:	697b      	ldr	r3, [r7, #20]
 801083c:	6013      	str	r3, [r2, #0]
 801083e:	f003 f8cb 	bl	80139d8 <tcp_timer_needed>
 8010842:	4b2b      	ldr	r3, [pc, #172]	@ (80108f0 <tcp_listen_input+0x1f8>)
 8010844:	2201      	movs	r2, #1
 8010846:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8010848:	6978      	ldr	r0, [r7, #20]
 801084a:	f001 fd8b 	bl	8012364 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801084e:	4b23      	ldr	r3, [pc, #140]	@ (80108dc <tcp_listen_input+0x1e4>)
 8010850:	681b      	ldr	r3, [r3, #0]
 8010852:	89db      	ldrh	r3, [r3, #14]
 8010854:	b29a      	uxth	r2, r3
 8010856:	697b      	ldr	r3, [r7, #20]
 8010858:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 801085c:	697b      	ldr	r3, [r7, #20]
 801085e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8010862:	697b      	ldr	r3, [r7, #20]
 8010864:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8010868:	697b      	ldr	r3, [r7, #20]
 801086a:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 801086c:	697b      	ldr	r3, [r7, #20]
 801086e:	3304      	adds	r3, #4
 8010870:	4618      	mov	r0, r3
 8010872:	f005 f821 	bl	80158b8 <ip4_route>
 8010876:	4601      	mov	r1, r0
 8010878:	697b      	ldr	r3, [r7, #20]
 801087a:	3304      	adds	r3, #4
 801087c:	461a      	mov	r2, r3
 801087e:	4620      	mov	r0, r4
 8010880:	f7ff fa30 	bl	800fce4 <tcp_eff_send_mss_netif>
 8010884:	4603      	mov	r3, r0
 8010886:	461a      	mov	r2, r3
 8010888:	697b      	ldr	r3, [r7, #20]
 801088a:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 801088c:	2112      	movs	r1, #18
 801088e:	6978      	ldr	r0, [r7, #20]
 8010890:	f002 f83e 	bl	8012910 <tcp_enqueue_flags>
 8010894:	4603      	mov	r3, r0
 8010896:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8010898:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801089c:	2b00      	cmp	r3, #0
 801089e:	d004      	beq.n	80108aa <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80108a0:	2100      	movs	r1, #0
 80108a2:	6978      	ldr	r0, [r7, #20]
 80108a4:	f7fe f97c 	bl	800eba0 <tcp_abandon>
      return;
 80108a8:	e006      	b.n	80108b8 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 80108aa:	6978      	ldr	r0, [r7, #20]
 80108ac:	f002 f91e 	bl	8012aec <tcp_output>
  return;
 80108b0:	e001      	b.n	80108b6 <tcp_listen_input+0x1be>
    return;
 80108b2:	bf00      	nop
 80108b4:	e000      	b.n	80108b8 <tcp_listen_input+0x1c0>
  return;
 80108b6:	bf00      	nop
}
 80108b8:	371c      	adds	r7, #28
 80108ba:	46bd      	mov	sp, r7
 80108bc:	bd90      	pop	{r4, r7, pc}
 80108be:	bf00      	nop
 80108c0:	20015290 	.word	0x20015290
 80108c4:	08021b44 	.word	0x08021b44
 80108c8:	08021d3c 	.word	0x08021d3c
 80108cc:	08021b90 	.word	0x08021b90
 80108d0:	20015288 	.word	0x20015288
 80108d4:	2001528e 	.word	0x2001528e
 80108d8:	20015284 	.word	0x20015284
 80108dc:	20015274 	.word	0x20015274
 80108e0:	20011f1c 	.word	0x20011f1c
 80108e4:	20011f20 	.word	0x20011f20
 80108e8:	20011f0c 	.word	0x20011f0c
 80108ec:	20015258 	.word	0x20015258
 80108f0:	20015260 	.word	0x20015260

080108f4 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80108f4:	b580      	push	{r7, lr}
 80108f6:	b086      	sub	sp, #24
 80108f8:	af04      	add	r7, sp, #16
 80108fa:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80108fc:	4b2f      	ldr	r3, [pc, #188]	@ (80109bc <tcp_timewait_input+0xc8>)
 80108fe:	781b      	ldrb	r3, [r3, #0]
 8010900:	f003 0304 	and.w	r3, r3, #4
 8010904:	2b00      	cmp	r3, #0
 8010906:	d153      	bne.n	80109b0 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	2b00      	cmp	r3, #0
 801090c:	d106      	bne.n	801091c <tcp_timewait_input+0x28>
 801090e:	4b2c      	ldr	r3, [pc, #176]	@ (80109c0 <tcp_timewait_input+0xcc>)
 8010910:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8010914:	492b      	ldr	r1, [pc, #172]	@ (80109c4 <tcp_timewait_input+0xd0>)
 8010916:	482c      	ldr	r0, [pc, #176]	@ (80109c8 <tcp_timewait_input+0xd4>)
 8010918:	f007 f958 	bl	8017bcc <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 801091c:	4b27      	ldr	r3, [pc, #156]	@ (80109bc <tcp_timewait_input+0xc8>)
 801091e:	781b      	ldrb	r3, [r3, #0]
 8010920:	f003 0302 	and.w	r3, r3, #2
 8010924:	2b00      	cmp	r3, #0
 8010926:	d02a      	beq.n	801097e <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8010928:	4b28      	ldr	r3, [pc, #160]	@ (80109cc <tcp_timewait_input+0xd8>)
 801092a:	681a      	ldr	r2, [r3, #0]
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010930:	1ad3      	subs	r3, r2, r3
 8010932:	2b00      	cmp	r3, #0
 8010934:	db2d      	blt.n	8010992 <tcp_timewait_input+0x9e>
 8010936:	4b25      	ldr	r3, [pc, #148]	@ (80109cc <tcp_timewait_input+0xd8>)
 8010938:	681a      	ldr	r2, [r3, #0]
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801093e:	6879      	ldr	r1, [r7, #4]
 8010940:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8010942:	440b      	add	r3, r1
 8010944:	1ad3      	subs	r3, r2, r3
 8010946:	2b00      	cmp	r3, #0
 8010948:	dc23      	bgt.n	8010992 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801094a:	4b21      	ldr	r3, [pc, #132]	@ (80109d0 <tcp_timewait_input+0xdc>)
 801094c:	6819      	ldr	r1, [r3, #0]
 801094e:	4b21      	ldr	r3, [pc, #132]	@ (80109d4 <tcp_timewait_input+0xe0>)
 8010950:	881b      	ldrh	r3, [r3, #0]
 8010952:	461a      	mov	r2, r3
 8010954:	4b1d      	ldr	r3, [pc, #116]	@ (80109cc <tcp_timewait_input+0xd8>)
 8010956:	681b      	ldr	r3, [r3, #0]
 8010958:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801095a:	4b1f      	ldr	r3, [pc, #124]	@ (80109d8 <tcp_timewait_input+0xe4>)
 801095c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801095e:	885b      	ldrh	r3, [r3, #2]
 8010960:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010962:	4a1d      	ldr	r2, [pc, #116]	@ (80109d8 <tcp_timewait_input+0xe4>)
 8010964:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010966:	8812      	ldrh	r2, [r2, #0]
 8010968:	b292      	uxth	r2, r2
 801096a:	9202      	str	r2, [sp, #8]
 801096c:	9301      	str	r3, [sp, #4]
 801096e:	4b1b      	ldr	r3, [pc, #108]	@ (80109dc <tcp_timewait_input+0xe8>)
 8010970:	9300      	str	r3, [sp, #0]
 8010972:	4b1b      	ldr	r3, [pc, #108]	@ (80109e0 <tcp_timewait_input+0xec>)
 8010974:	4602      	mov	r2, r0
 8010976:	6878      	ldr	r0, [r7, #4]
 8010978:	f002 fe6c 	bl	8013654 <tcp_rst>
      return;
 801097c:	e01b      	b.n	80109b6 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 801097e:	4b0f      	ldr	r3, [pc, #60]	@ (80109bc <tcp_timewait_input+0xc8>)
 8010980:	781b      	ldrb	r3, [r3, #0]
 8010982:	f003 0301 	and.w	r3, r3, #1
 8010986:	2b00      	cmp	r3, #0
 8010988:	d003      	beq.n	8010992 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 801098a:	4b16      	ldr	r3, [pc, #88]	@ (80109e4 <tcp_timewait_input+0xf0>)
 801098c:	681a      	ldr	r2, [r3, #0]
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8010992:	4b10      	ldr	r3, [pc, #64]	@ (80109d4 <tcp_timewait_input+0xe0>)
 8010994:	881b      	ldrh	r3, [r3, #0]
 8010996:	2b00      	cmp	r3, #0
 8010998:	d00c      	beq.n	80109b4 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	8b5b      	ldrh	r3, [r3, #26]
 801099e:	f043 0302 	orr.w	r3, r3, #2
 80109a2:	b29a      	uxth	r2, r3
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80109a8:	6878      	ldr	r0, [r7, #4]
 80109aa:	f002 f89f 	bl	8012aec <tcp_output>
  }
  return;
 80109ae:	e001      	b.n	80109b4 <tcp_timewait_input+0xc0>
    return;
 80109b0:	bf00      	nop
 80109b2:	e000      	b.n	80109b6 <tcp_timewait_input+0xc2>
  return;
 80109b4:	bf00      	nop
}
 80109b6:	3708      	adds	r7, #8
 80109b8:	46bd      	mov	sp, r7
 80109ba:	bd80      	pop	{r7, pc}
 80109bc:	20015290 	.word	0x20015290
 80109c0:	08021b44 	.word	0x08021b44
 80109c4:	08021d5c 	.word	0x08021d5c
 80109c8:	08021b90 	.word	0x08021b90
 80109cc:	20015284 	.word	0x20015284
 80109d0:	20015288 	.word	0x20015288
 80109d4:	2001528e 	.word	0x2001528e
 80109d8:	20015274 	.word	0x20015274
 80109dc:	20011f1c 	.word	0x20011f1c
 80109e0:	20011f20 	.word	0x20011f20
 80109e4:	2001524c 	.word	0x2001524c

080109e8 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80109e8:	b590      	push	{r4, r7, lr}
 80109ea:	b08d      	sub	sp, #52	@ 0x34
 80109ec:	af04      	add	r7, sp, #16
 80109ee:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80109f0:	2300      	movs	r3, #0
 80109f2:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80109f4:	2300      	movs	r3, #0
 80109f6:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	d106      	bne.n	8010a0c <tcp_process+0x24>
 80109fe:	4b9d      	ldr	r3, [pc, #628]	@ (8010c74 <tcp_process+0x28c>)
 8010a00:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8010a04:	499c      	ldr	r1, [pc, #624]	@ (8010c78 <tcp_process+0x290>)
 8010a06:	489d      	ldr	r0, [pc, #628]	@ (8010c7c <tcp_process+0x294>)
 8010a08:	f007 f8e0 	bl	8017bcc <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8010a0c:	4b9c      	ldr	r3, [pc, #624]	@ (8010c80 <tcp_process+0x298>)
 8010a0e:	781b      	ldrb	r3, [r3, #0]
 8010a10:	f003 0304 	and.w	r3, r3, #4
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d04e      	beq.n	8010ab6 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	7d1b      	ldrb	r3, [r3, #20]
 8010a1c:	2b02      	cmp	r3, #2
 8010a1e:	d108      	bne.n	8010a32 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010a24:	4b97      	ldr	r3, [pc, #604]	@ (8010c84 <tcp_process+0x29c>)
 8010a26:	681b      	ldr	r3, [r3, #0]
 8010a28:	429a      	cmp	r2, r3
 8010a2a:	d123      	bne.n	8010a74 <tcp_process+0x8c>
        acceptable = 1;
 8010a2c:	2301      	movs	r3, #1
 8010a2e:	76fb      	strb	r3, [r7, #27]
 8010a30:	e020      	b.n	8010a74 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010a36:	4b94      	ldr	r3, [pc, #592]	@ (8010c88 <tcp_process+0x2a0>)
 8010a38:	681b      	ldr	r3, [r3, #0]
 8010a3a:	429a      	cmp	r2, r3
 8010a3c:	d102      	bne.n	8010a44 <tcp_process+0x5c>
        acceptable = 1;
 8010a3e:	2301      	movs	r3, #1
 8010a40:	76fb      	strb	r3, [r7, #27]
 8010a42:	e017      	b.n	8010a74 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010a44:	4b90      	ldr	r3, [pc, #576]	@ (8010c88 <tcp_process+0x2a0>)
 8010a46:	681a      	ldr	r2, [r3, #0]
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010a4c:	1ad3      	subs	r3, r2, r3
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	db10      	blt.n	8010a74 <tcp_process+0x8c>
 8010a52:	4b8d      	ldr	r3, [pc, #564]	@ (8010c88 <tcp_process+0x2a0>)
 8010a54:	681a      	ldr	r2, [r3, #0]
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010a5a:	6879      	ldr	r1, [r7, #4]
 8010a5c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8010a5e:	440b      	add	r3, r1
 8010a60:	1ad3      	subs	r3, r2, r3
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	dc06      	bgt.n	8010a74 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	8b5b      	ldrh	r3, [r3, #26]
 8010a6a:	f043 0302 	orr.w	r3, r3, #2
 8010a6e:	b29a      	uxth	r2, r3
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8010a74:	7efb      	ldrb	r3, [r7, #27]
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	d01b      	beq.n	8010ab2 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	7d1b      	ldrb	r3, [r3, #20]
 8010a7e:	2b00      	cmp	r3, #0
 8010a80:	d106      	bne.n	8010a90 <tcp_process+0xa8>
 8010a82:	4b7c      	ldr	r3, [pc, #496]	@ (8010c74 <tcp_process+0x28c>)
 8010a84:	f44f 724e 	mov.w	r2, #824	@ 0x338
 8010a88:	4980      	ldr	r1, [pc, #512]	@ (8010c8c <tcp_process+0x2a4>)
 8010a8a:	487c      	ldr	r0, [pc, #496]	@ (8010c7c <tcp_process+0x294>)
 8010a8c:	f007 f89e 	bl	8017bcc <iprintf>
      recv_flags |= TF_RESET;
 8010a90:	4b7f      	ldr	r3, [pc, #508]	@ (8010c90 <tcp_process+0x2a8>)
 8010a92:	781b      	ldrb	r3, [r3, #0]
 8010a94:	f043 0308 	orr.w	r3, r3, #8
 8010a98:	b2da      	uxtb	r2, r3
 8010a9a:	4b7d      	ldr	r3, [pc, #500]	@ (8010c90 <tcp_process+0x2a8>)
 8010a9c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	8b5b      	ldrh	r3, [r3, #26]
 8010aa2:	f023 0301 	bic.w	r3, r3, #1
 8010aa6:	b29a      	uxth	r2, r3
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8010aac:	f06f 030d 	mvn.w	r3, #13
 8010ab0:	e37a      	b.n	80111a8 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8010ab2:	2300      	movs	r3, #0
 8010ab4:	e378      	b.n	80111a8 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8010ab6:	4b72      	ldr	r3, [pc, #456]	@ (8010c80 <tcp_process+0x298>)
 8010ab8:	781b      	ldrb	r3, [r3, #0]
 8010aba:	f003 0302 	and.w	r3, r3, #2
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	d010      	beq.n	8010ae4 <tcp_process+0xfc>
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	7d1b      	ldrb	r3, [r3, #20]
 8010ac6:	2b02      	cmp	r3, #2
 8010ac8:	d00c      	beq.n	8010ae4 <tcp_process+0xfc>
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	7d1b      	ldrb	r3, [r3, #20]
 8010ace:	2b03      	cmp	r3, #3
 8010ad0:	d008      	beq.n	8010ae4 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	8b5b      	ldrh	r3, [r3, #26]
 8010ad6:	f043 0302 	orr.w	r3, r3, #2
 8010ada:	b29a      	uxth	r2, r3
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8010ae0:	2300      	movs	r3, #0
 8010ae2:	e361      	b.n	80111a8 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	8b5b      	ldrh	r3, [r3, #26]
 8010ae8:	f003 0310 	and.w	r3, r3, #16
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	d103      	bne.n	8010af8 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8010af0:	4b68      	ldr	r3, [pc, #416]	@ (8010c94 <tcp_process+0x2ac>)
 8010af2:	681a      	ldr	r2, [r3, #0]
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	2200      	movs	r2, #0
 8010afc:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	2200      	movs	r2, #0
 8010b04:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 8010b08:	6878      	ldr	r0, [r7, #4]
 8010b0a:	f001 fc2b 	bl	8012364 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	7d1b      	ldrb	r3, [r3, #20]
 8010b12:	3b02      	subs	r3, #2
 8010b14:	2b07      	cmp	r3, #7
 8010b16:	f200 8337 	bhi.w	8011188 <tcp_process+0x7a0>
 8010b1a:	a201      	add	r2, pc, #4	@ (adr r2, 8010b20 <tcp_process+0x138>)
 8010b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b20:	08010b41 	.word	0x08010b41
 8010b24:	08010d71 	.word	0x08010d71
 8010b28:	08010ee9 	.word	0x08010ee9
 8010b2c:	08010f13 	.word	0x08010f13
 8010b30:	08011037 	.word	0x08011037
 8010b34:	08010ee9 	.word	0x08010ee9
 8010b38:	080110c3 	.word	0x080110c3
 8010b3c:	08011153 	.word	0x08011153
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8010b40:	4b4f      	ldr	r3, [pc, #316]	@ (8010c80 <tcp_process+0x298>)
 8010b42:	781b      	ldrb	r3, [r3, #0]
 8010b44:	f003 0310 	and.w	r3, r3, #16
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	f000 80e4 	beq.w	8010d16 <tcp_process+0x32e>
 8010b4e:	4b4c      	ldr	r3, [pc, #304]	@ (8010c80 <tcp_process+0x298>)
 8010b50:	781b      	ldrb	r3, [r3, #0]
 8010b52:	f003 0302 	and.w	r3, r3, #2
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	f000 80dd 	beq.w	8010d16 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010b60:	1c5a      	adds	r2, r3, #1
 8010b62:	4b48      	ldr	r3, [pc, #288]	@ (8010c84 <tcp_process+0x29c>)
 8010b64:	681b      	ldr	r3, [r3, #0]
 8010b66:	429a      	cmp	r2, r3
 8010b68:	f040 80d5 	bne.w	8010d16 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8010b6c:	4b46      	ldr	r3, [pc, #280]	@ (8010c88 <tcp_process+0x2a0>)
 8010b6e:	681b      	ldr	r3, [r3, #0]
 8010b70:	1c5a      	adds	r2, r3, #1
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 8010b7e:	4b41      	ldr	r3, [pc, #260]	@ (8010c84 <tcp_process+0x29c>)
 8010b80:	681a      	ldr	r2, [r3, #0]
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8010b86:	4b44      	ldr	r3, [pc, #272]	@ (8010c98 <tcp_process+0x2b0>)
 8010b88:	681b      	ldr	r3, [r3, #0]
 8010b8a:	89db      	ldrh	r3, [r3, #14]
 8010b8c:	b29a      	uxth	r2, r3
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8010ba0:	4b39      	ldr	r3, [pc, #228]	@ (8010c88 <tcp_process+0x2a0>)
 8010ba2:	681b      	ldr	r3, [r3, #0]
 8010ba4:	1e5a      	subs	r2, r3, #1
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	2204      	movs	r2, #4
 8010bae:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	3304      	adds	r3, #4
 8010bb8:	4618      	mov	r0, r3
 8010bba:	f004 fe7d 	bl	80158b8 <ip4_route>
 8010bbe:	4601      	mov	r1, r0
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	3304      	adds	r3, #4
 8010bc4:	461a      	mov	r2, r3
 8010bc6:	4620      	mov	r0, r4
 8010bc8:	f7ff f88c 	bl	800fce4 <tcp_eff_send_mss_netif>
 8010bcc:	4603      	mov	r3, r0
 8010bce:	461a      	mov	r2, r3
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010bd8:	009a      	lsls	r2, r3, #2
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010bde:	005b      	lsls	r3, r3, #1
 8010be0:	f241 111c 	movw	r1, #4380	@ 0x111c
 8010be4:	428b      	cmp	r3, r1
 8010be6:	bf38      	it	cc
 8010be8:	460b      	movcc	r3, r1
 8010bea:	429a      	cmp	r2, r3
 8010bec:	d204      	bcs.n	8010bf8 <tcp_process+0x210>
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010bf2:	009b      	lsls	r3, r3, #2
 8010bf4:	b29b      	uxth	r3, r3
 8010bf6:	e00d      	b.n	8010c14 <tcp_process+0x22c>
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010bfc:	005b      	lsls	r3, r3, #1
 8010bfe:	f241 121c 	movw	r2, #4380	@ 0x111c
 8010c02:	4293      	cmp	r3, r2
 8010c04:	d904      	bls.n	8010c10 <tcp_process+0x228>
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010c0a:	005b      	lsls	r3, r3, #1
 8010c0c:	b29b      	uxth	r3, r3
 8010c0e:	e001      	b.n	8010c14 <tcp_process+0x22c>
 8010c10:	f241 131c 	movw	r3, #4380	@ 0x111c
 8010c14:	687a      	ldr	r2, [r7, #4]
 8010c16:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	d106      	bne.n	8010c32 <tcp_process+0x24a>
 8010c24:	4b13      	ldr	r3, [pc, #76]	@ (8010c74 <tcp_process+0x28c>)
 8010c26:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 8010c2a:	491c      	ldr	r1, [pc, #112]	@ (8010c9c <tcp_process+0x2b4>)
 8010c2c:	4813      	ldr	r0, [pc, #76]	@ (8010c7c <tcp_process+0x294>)
 8010c2e:	f006 ffcd 	bl	8017bcc <iprintf>
        --pcb->snd_queuelen;
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010c38:	3b01      	subs	r3, #1
 8010c3a:	b29a      	uxth	r2, r3
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010c46:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8010c48:	69fb      	ldr	r3, [r7, #28]
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	d12a      	bne.n	8010ca4 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010c52:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8010c54:	69fb      	ldr	r3, [r7, #28]
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d106      	bne.n	8010c68 <tcp_process+0x280>
 8010c5a:	4b06      	ldr	r3, [pc, #24]	@ (8010c74 <tcp_process+0x28c>)
 8010c5c:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8010c60:	490f      	ldr	r1, [pc, #60]	@ (8010ca0 <tcp_process+0x2b8>)
 8010c62:	4806      	ldr	r0, [pc, #24]	@ (8010c7c <tcp_process+0x294>)
 8010c64:	f006 ffb2 	bl	8017bcc <iprintf>
          pcb->unsent = rseg->next;
 8010c68:	69fb      	ldr	r3, [r7, #28]
 8010c6a:	681a      	ldr	r2, [r3, #0]
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	66da      	str	r2, [r3, #108]	@ 0x6c
 8010c70:	e01c      	b.n	8010cac <tcp_process+0x2c4>
 8010c72:	bf00      	nop
 8010c74:	08021b44 	.word	0x08021b44
 8010c78:	08021d7c 	.word	0x08021d7c
 8010c7c:	08021b90 	.word	0x08021b90
 8010c80:	20015290 	.word	0x20015290
 8010c84:	20015288 	.word	0x20015288
 8010c88:	20015284 	.word	0x20015284
 8010c8c:	08021d98 	.word	0x08021d98
 8010c90:	20015291 	.word	0x20015291
 8010c94:	2001524c 	.word	0x2001524c
 8010c98:	20015274 	.word	0x20015274
 8010c9c:	08021db8 	.word	0x08021db8
 8010ca0:	08021dd0 	.word	0x08021dd0
        } else {
          pcb->unacked = rseg->next;
 8010ca4:	69fb      	ldr	r3, [r7, #28]
 8010ca6:	681a      	ldr	r2, [r3, #0]
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 8010cac:	69f8      	ldr	r0, [r7, #28]
 8010cae:	f7fe fd22 	bl	800f6f6 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	d104      	bne.n	8010cc4 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010cc0:	861a      	strh	r2, [r3, #48]	@ 0x30
 8010cc2:	e006      	b.n	8010cd2 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	2200      	movs	r2, #0
 8010cc8:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	2200      	movs	r2, #0
 8010cce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	d00a      	beq.n	8010cf2 <tcp_process+0x30a>
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010ce2:	687a      	ldr	r2, [r7, #4]
 8010ce4:	6910      	ldr	r0, [r2, #16]
 8010ce6:	2200      	movs	r2, #0
 8010ce8:	6879      	ldr	r1, [r7, #4]
 8010cea:	4798      	blx	r3
 8010cec:	4603      	mov	r3, r0
 8010cee:	76bb      	strb	r3, [r7, #26]
 8010cf0:	e001      	b.n	8010cf6 <tcp_process+0x30e>
 8010cf2:	2300      	movs	r3, #0
 8010cf4:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8010cf6:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010cfa:	f113 0f0d 	cmn.w	r3, #13
 8010cfe:	d102      	bne.n	8010d06 <tcp_process+0x31e>
          return ERR_ABRT;
 8010d00:	f06f 030c 	mvn.w	r3, #12
 8010d04:	e250      	b.n	80111a8 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	8b5b      	ldrh	r3, [r3, #26]
 8010d0a:	f043 0302 	orr.w	r3, r3, #2
 8010d0e:	b29a      	uxth	r2, r3
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8010d14:	e23a      	b.n	801118c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8010d16:	4b98      	ldr	r3, [pc, #608]	@ (8010f78 <tcp_process+0x590>)
 8010d18:	781b      	ldrb	r3, [r3, #0]
 8010d1a:	f003 0310 	and.w	r3, r3, #16
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	f000 8234 	beq.w	801118c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010d24:	4b95      	ldr	r3, [pc, #596]	@ (8010f7c <tcp_process+0x594>)
 8010d26:	6819      	ldr	r1, [r3, #0]
 8010d28:	4b95      	ldr	r3, [pc, #596]	@ (8010f80 <tcp_process+0x598>)
 8010d2a:	881b      	ldrh	r3, [r3, #0]
 8010d2c:	461a      	mov	r2, r3
 8010d2e:	4b95      	ldr	r3, [pc, #596]	@ (8010f84 <tcp_process+0x59c>)
 8010d30:	681b      	ldr	r3, [r3, #0]
 8010d32:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010d34:	4b94      	ldr	r3, [pc, #592]	@ (8010f88 <tcp_process+0x5a0>)
 8010d36:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010d38:	885b      	ldrh	r3, [r3, #2]
 8010d3a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010d3c:	4a92      	ldr	r2, [pc, #584]	@ (8010f88 <tcp_process+0x5a0>)
 8010d3e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010d40:	8812      	ldrh	r2, [r2, #0]
 8010d42:	b292      	uxth	r2, r2
 8010d44:	9202      	str	r2, [sp, #8]
 8010d46:	9301      	str	r3, [sp, #4]
 8010d48:	4b90      	ldr	r3, [pc, #576]	@ (8010f8c <tcp_process+0x5a4>)
 8010d4a:	9300      	str	r3, [sp, #0]
 8010d4c:	4b90      	ldr	r3, [pc, #576]	@ (8010f90 <tcp_process+0x5a8>)
 8010d4e:	4602      	mov	r2, r0
 8010d50:	6878      	ldr	r0, [r7, #4]
 8010d52:	f002 fc7f 	bl	8013654 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8010d5c:	2b05      	cmp	r3, #5
 8010d5e:	f200 8215 	bhi.w	801118c <tcp_process+0x7a4>
          pcb->rtime = 0;
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	2200      	movs	r2, #0
 8010d66:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 8010d68:	6878      	ldr	r0, [r7, #4]
 8010d6a:	f002 fa4b 	bl	8013204 <tcp_rexmit_rto>
      break;
 8010d6e:	e20d      	b.n	801118c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8010d70:	4b81      	ldr	r3, [pc, #516]	@ (8010f78 <tcp_process+0x590>)
 8010d72:	781b      	ldrb	r3, [r3, #0]
 8010d74:	f003 0310 	and.w	r3, r3, #16
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	f000 80a1 	beq.w	8010ec0 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010d7e:	4b7f      	ldr	r3, [pc, #508]	@ (8010f7c <tcp_process+0x594>)
 8010d80:	681a      	ldr	r2, [r3, #0]
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010d86:	1ad3      	subs	r3, r2, r3
 8010d88:	3b01      	subs	r3, #1
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	db7e      	blt.n	8010e8c <tcp_process+0x4a4>
 8010d8e:	4b7b      	ldr	r3, [pc, #492]	@ (8010f7c <tcp_process+0x594>)
 8010d90:	681a      	ldr	r2, [r3, #0]
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010d96:	1ad3      	subs	r3, r2, r3
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	dc77      	bgt.n	8010e8c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	2204      	movs	r2, #4
 8010da0:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	d102      	bne.n	8010db0 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8010daa:	23fa      	movs	r3, #250	@ 0xfa
 8010dac:	76bb      	strb	r3, [r7, #26]
 8010dae:	e01d      	b.n	8010dec <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010db4:	699b      	ldr	r3, [r3, #24]
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d106      	bne.n	8010dc8 <tcp_process+0x3e0>
 8010dba:	4b76      	ldr	r3, [pc, #472]	@ (8010f94 <tcp_process+0x5ac>)
 8010dbc:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 8010dc0:	4975      	ldr	r1, [pc, #468]	@ (8010f98 <tcp_process+0x5b0>)
 8010dc2:	4876      	ldr	r0, [pc, #472]	@ (8010f9c <tcp_process+0x5b4>)
 8010dc4:	f006 ff02 	bl	8017bcc <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010dcc:	699b      	ldr	r3, [r3, #24]
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	d00a      	beq.n	8010de8 <tcp_process+0x400>
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010dd6:	699b      	ldr	r3, [r3, #24]
 8010dd8:	687a      	ldr	r2, [r7, #4]
 8010dda:	6910      	ldr	r0, [r2, #16]
 8010ddc:	2200      	movs	r2, #0
 8010dde:	6879      	ldr	r1, [r7, #4]
 8010de0:	4798      	blx	r3
 8010de2:	4603      	mov	r3, r0
 8010de4:	76bb      	strb	r3, [r7, #26]
 8010de6:	e001      	b.n	8010dec <tcp_process+0x404>
 8010de8:	23f0      	movs	r3, #240	@ 0xf0
 8010dea:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8010dec:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	d00a      	beq.n	8010e0a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8010df4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010df8:	f113 0f0d 	cmn.w	r3, #13
 8010dfc:	d002      	beq.n	8010e04 <tcp_process+0x41c>
              tcp_abort(pcb);
 8010dfe:	6878      	ldr	r0, [r7, #4]
 8010e00:	f7fd ff8c 	bl	800ed1c <tcp_abort>
            }
            return ERR_ABRT;
 8010e04:	f06f 030c 	mvn.w	r3, #12
 8010e08:	e1ce      	b.n	80111a8 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8010e0a:	6878      	ldr	r0, [r7, #4]
 8010e0c:	f000 fae0 	bl	80113d0 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8010e10:	4b63      	ldr	r3, [pc, #396]	@ (8010fa0 <tcp_process+0x5b8>)
 8010e12:	881b      	ldrh	r3, [r3, #0]
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	d005      	beq.n	8010e24 <tcp_process+0x43c>
            recv_acked--;
 8010e18:	4b61      	ldr	r3, [pc, #388]	@ (8010fa0 <tcp_process+0x5b8>)
 8010e1a:	881b      	ldrh	r3, [r3, #0]
 8010e1c:	3b01      	subs	r3, #1
 8010e1e:	b29a      	uxth	r2, r3
 8010e20:	4b5f      	ldr	r3, [pc, #380]	@ (8010fa0 <tcp_process+0x5b8>)
 8010e22:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010e28:	009a      	lsls	r2, r3, #2
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010e2e:	005b      	lsls	r3, r3, #1
 8010e30:	f241 111c 	movw	r1, #4380	@ 0x111c
 8010e34:	428b      	cmp	r3, r1
 8010e36:	bf38      	it	cc
 8010e38:	460b      	movcc	r3, r1
 8010e3a:	429a      	cmp	r2, r3
 8010e3c:	d204      	bcs.n	8010e48 <tcp_process+0x460>
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010e42:	009b      	lsls	r3, r3, #2
 8010e44:	b29b      	uxth	r3, r3
 8010e46:	e00d      	b.n	8010e64 <tcp_process+0x47c>
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010e4c:	005b      	lsls	r3, r3, #1
 8010e4e:	f241 121c 	movw	r2, #4380	@ 0x111c
 8010e52:	4293      	cmp	r3, r2
 8010e54:	d904      	bls.n	8010e60 <tcp_process+0x478>
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010e5a:	005b      	lsls	r3, r3, #1
 8010e5c:	b29b      	uxth	r3, r3
 8010e5e:	e001      	b.n	8010e64 <tcp_process+0x47c>
 8010e60:	f241 131c 	movw	r3, #4380	@ 0x111c
 8010e64:	687a      	ldr	r2, [r7, #4]
 8010e66:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8010e6a:	4b4e      	ldr	r3, [pc, #312]	@ (8010fa4 <tcp_process+0x5bc>)
 8010e6c:	781b      	ldrb	r3, [r3, #0]
 8010e6e:	f003 0320 	and.w	r3, r3, #32
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	d037      	beq.n	8010ee6 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	8b5b      	ldrh	r3, [r3, #26]
 8010e7a:	f043 0302 	orr.w	r3, r3, #2
 8010e7e:	b29a      	uxth	r2, r3
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	2207      	movs	r2, #7
 8010e88:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8010e8a:	e02c      	b.n	8010ee6 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010e8c:	4b3b      	ldr	r3, [pc, #236]	@ (8010f7c <tcp_process+0x594>)
 8010e8e:	6819      	ldr	r1, [r3, #0]
 8010e90:	4b3b      	ldr	r3, [pc, #236]	@ (8010f80 <tcp_process+0x598>)
 8010e92:	881b      	ldrh	r3, [r3, #0]
 8010e94:	461a      	mov	r2, r3
 8010e96:	4b3b      	ldr	r3, [pc, #236]	@ (8010f84 <tcp_process+0x59c>)
 8010e98:	681b      	ldr	r3, [r3, #0]
 8010e9a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010e9c:	4b3a      	ldr	r3, [pc, #232]	@ (8010f88 <tcp_process+0x5a0>)
 8010e9e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010ea0:	885b      	ldrh	r3, [r3, #2]
 8010ea2:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010ea4:	4a38      	ldr	r2, [pc, #224]	@ (8010f88 <tcp_process+0x5a0>)
 8010ea6:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010ea8:	8812      	ldrh	r2, [r2, #0]
 8010eaa:	b292      	uxth	r2, r2
 8010eac:	9202      	str	r2, [sp, #8]
 8010eae:	9301      	str	r3, [sp, #4]
 8010eb0:	4b36      	ldr	r3, [pc, #216]	@ (8010f8c <tcp_process+0x5a4>)
 8010eb2:	9300      	str	r3, [sp, #0]
 8010eb4:	4b36      	ldr	r3, [pc, #216]	@ (8010f90 <tcp_process+0x5a8>)
 8010eb6:	4602      	mov	r2, r0
 8010eb8:	6878      	ldr	r0, [r7, #4]
 8010eba:	f002 fbcb 	bl	8013654 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8010ebe:	e167      	b.n	8011190 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8010ec0:	4b2d      	ldr	r3, [pc, #180]	@ (8010f78 <tcp_process+0x590>)
 8010ec2:	781b      	ldrb	r3, [r3, #0]
 8010ec4:	f003 0302 	and.w	r3, r3, #2
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	f000 8161 	beq.w	8011190 <tcp_process+0x7a8>
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010ed2:	1e5a      	subs	r2, r3, #1
 8010ed4:	4b2b      	ldr	r3, [pc, #172]	@ (8010f84 <tcp_process+0x59c>)
 8010ed6:	681b      	ldr	r3, [r3, #0]
 8010ed8:	429a      	cmp	r2, r3
 8010eda:	f040 8159 	bne.w	8011190 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8010ede:	6878      	ldr	r0, [r7, #4]
 8010ee0:	f002 f9b2 	bl	8013248 <tcp_rexmit>
      break;
 8010ee4:	e154      	b.n	8011190 <tcp_process+0x7a8>
 8010ee6:	e153      	b.n	8011190 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8010ee8:	6878      	ldr	r0, [r7, #4]
 8010eea:	f000 fa71 	bl	80113d0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8010eee:	4b2d      	ldr	r3, [pc, #180]	@ (8010fa4 <tcp_process+0x5bc>)
 8010ef0:	781b      	ldrb	r3, [r3, #0]
 8010ef2:	f003 0320 	and.w	r3, r3, #32
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	f000 814c 	beq.w	8011194 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	8b5b      	ldrh	r3, [r3, #26]
 8010f00:	f043 0302 	orr.w	r3, r3, #2
 8010f04:	b29a      	uxth	r2, r3
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	2207      	movs	r2, #7
 8010f0e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010f10:	e140      	b.n	8011194 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8010f12:	6878      	ldr	r0, [r7, #4]
 8010f14:	f000 fa5c 	bl	80113d0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8010f18:	4b22      	ldr	r3, [pc, #136]	@ (8010fa4 <tcp_process+0x5bc>)
 8010f1a:	781b      	ldrb	r3, [r3, #0]
 8010f1c:	f003 0320 	and.w	r3, r3, #32
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d071      	beq.n	8011008 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010f24:	4b14      	ldr	r3, [pc, #80]	@ (8010f78 <tcp_process+0x590>)
 8010f26:	781b      	ldrb	r3, [r3, #0]
 8010f28:	f003 0310 	and.w	r3, r3, #16
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	d060      	beq.n	8010ff2 <tcp_process+0x60a>
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010f34:	4b11      	ldr	r3, [pc, #68]	@ (8010f7c <tcp_process+0x594>)
 8010f36:	681b      	ldr	r3, [r3, #0]
 8010f38:	429a      	cmp	r2, r3
 8010f3a:	d15a      	bne.n	8010ff2 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d156      	bne.n	8010ff2 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	8b5b      	ldrh	r3, [r3, #26]
 8010f48:	f043 0302 	orr.w	r3, r3, #2
 8010f4c:	b29a      	uxth	r2, r3
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8010f52:	6878      	ldr	r0, [r7, #4]
 8010f54:	f7fe fdbc 	bl	800fad0 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8010f58:	4b13      	ldr	r3, [pc, #76]	@ (8010fa8 <tcp_process+0x5c0>)
 8010f5a:	681b      	ldr	r3, [r3, #0]
 8010f5c:	687a      	ldr	r2, [r7, #4]
 8010f5e:	429a      	cmp	r2, r3
 8010f60:	d105      	bne.n	8010f6e <tcp_process+0x586>
 8010f62:	4b11      	ldr	r3, [pc, #68]	@ (8010fa8 <tcp_process+0x5c0>)
 8010f64:	681b      	ldr	r3, [r3, #0]
 8010f66:	68db      	ldr	r3, [r3, #12]
 8010f68:	4a0f      	ldr	r2, [pc, #60]	@ (8010fa8 <tcp_process+0x5c0>)
 8010f6a:	6013      	str	r3, [r2, #0]
 8010f6c:	e02e      	b.n	8010fcc <tcp_process+0x5e4>
 8010f6e:	4b0e      	ldr	r3, [pc, #56]	@ (8010fa8 <tcp_process+0x5c0>)
 8010f70:	681b      	ldr	r3, [r3, #0]
 8010f72:	617b      	str	r3, [r7, #20]
 8010f74:	e027      	b.n	8010fc6 <tcp_process+0x5de>
 8010f76:	bf00      	nop
 8010f78:	20015290 	.word	0x20015290
 8010f7c:	20015288 	.word	0x20015288
 8010f80:	2001528e 	.word	0x2001528e
 8010f84:	20015284 	.word	0x20015284
 8010f88:	20015274 	.word	0x20015274
 8010f8c:	20011f1c 	.word	0x20011f1c
 8010f90:	20011f20 	.word	0x20011f20
 8010f94:	08021b44 	.word	0x08021b44
 8010f98:	08021de4 	.word	0x08021de4
 8010f9c:	08021b90 	.word	0x08021b90
 8010fa0:	2001528c 	.word	0x2001528c
 8010fa4:	20015291 	.word	0x20015291
 8010fa8:	20015258 	.word	0x20015258
 8010fac:	697b      	ldr	r3, [r7, #20]
 8010fae:	68db      	ldr	r3, [r3, #12]
 8010fb0:	687a      	ldr	r2, [r7, #4]
 8010fb2:	429a      	cmp	r2, r3
 8010fb4:	d104      	bne.n	8010fc0 <tcp_process+0x5d8>
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	68da      	ldr	r2, [r3, #12]
 8010fba:	697b      	ldr	r3, [r7, #20]
 8010fbc:	60da      	str	r2, [r3, #12]
 8010fbe:	e005      	b.n	8010fcc <tcp_process+0x5e4>
 8010fc0:	697b      	ldr	r3, [r7, #20]
 8010fc2:	68db      	ldr	r3, [r3, #12]
 8010fc4:	617b      	str	r3, [r7, #20]
 8010fc6:	697b      	ldr	r3, [r7, #20]
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	d1ef      	bne.n	8010fac <tcp_process+0x5c4>
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	2200      	movs	r2, #0
 8010fd0:	60da      	str	r2, [r3, #12]
 8010fd2:	4b77      	ldr	r3, [pc, #476]	@ (80111b0 <tcp_process+0x7c8>)
 8010fd4:	2201      	movs	r2, #1
 8010fd6:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	220a      	movs	r2, #10
 8010fdc:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8010fde:	4b75      	ldr	r3, [pc, #468]	@ (80111b4 <tcp_process+0x7cc>)
 8010fe0:	681a      	ldr	r2, [r3, #0]
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	60da      	str	r2, [r3, #12]
 8010fe6:	4a73      	ldr	r2, [pc, #460]	@ (80111b4 <tcp_process+0x7cc>)
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	6013      	str	r3, [r2, #0]
 8010fec:	f002 fcf4 	bl	80139d8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8010ff0:	e0d2      	b.n	8011198 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	8b5b      	ldrh	r3, [r3, #26]
 8010ff6:	f043 0302 	orr.w	r3, r3, #2
 8010ffa:	b29a      	uxth	r2, r3
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	2208      	movs	r2, #8
 8011004:	751a      	strb	r2, [r3, #20]
      break;
 8011006:	e0c7      	b.n	8011198 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011008:	4b6b      	ldr	r3, [pc, #428]	@ (80111b8 <tcp_process+0x7d0>)
 801100a:	781b      	ldrb	r3, [r3, #0]
 801100c:	f003 0310 	and.w	r3, r3, #16
 8011010:	2b00      	cmp	r3, #0
 8011012:	f000 80c1 	beq.w	8011198 <tcp_process+0x7b0>
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801101a:	4b68      	ldr	r3, [pc, #416]	@ (80111bc <tcp_process+0x7d4>)
 801101c:	681b      	ldr	r3, [r3, #0]
 801101e:	429a      	cmp	r2, r3
 8011020:	f040 80ba 	bne.w	8011198 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011028:	2b00      	cmp	r3, #0
 801102a:	f040 80b5 	bne.w	8011198 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	2206      	movs	r2, #6
 8011032:	751a      	strb	r2, [r3, #20]
      break;
 8011034:	e0b0      	b.n	8011198 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8011036:	6878      	ldr	r0, [r7, #4]
 8011038:	f000 f9ca 	bl	80113d0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801103c:	4b60      	ldr	r3, [pc, #384]	@ (80111c0 <tcp_process+0x7d8>)
 801103e:	781b      	ldrb	r3, [r3, #0]
 8011040:	f003 0320 	and.w	r3, r3, #32
 8011044:	2b00      	cmp	r3, #0
 8011046:	f000 80a9 	beq.w	801119c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	8b5b      	ldrh	r3, [r3, #26]
 801104e:	f043 0302 	orr.w	r3, r3, #2
 8011052:	b29a      	uxth	r2, r3
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8011058:	6878      	ldr	r0, [r7, #4]
 801105a:	f7fe fd39 	bl	800fad0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801105e:	4b59      	ldr	r3, [pc, #356]	@ (80111c4 <tcp_process+0x7dc>)
 8011060:	681b      	ldr	r3, [r3, #0]
 8011062:	687a      	ldr	r2, [r7, #4]
 8011064:	429a      	cmp	r2, r3
 8011066:	d105      	bne.n	8011074 <tcp_process+0x68c>
 8011068:	4b56      	ldr	r3, [pc, #344]	@ (80111c4 <tcp_process+0x7dc>)
 801106a:	681b      	ldr	r3, [r3, #0]
 801106c:	68db      	ldr	r3, [r3, #12]
 801106e:	4a55      	ldr	r2, [pc, #340]	@ (80111c4 <tcp_process+0x7dc>)
 8011070:	6013      	str	r3, [r2, #0]
 8011072:	e013      	b.n	801109c <tcp_process+0x6b4>
 8011074:	4b53      	ldr	r3, [pc, #332]	@ (80111c4 <tcp_process+0x7dc>)
 8011076:	681b      	ldr	r3, [r3, #0]
 8011078:	613b      	str	r3, [r7, #16]
 801107a:	e00c      	b.n	8011096 <tcp_process+0x6ae>
 801107c:	693b      	ldr	r3, [r7, #16]
 801107e:	68db      	ldr	r3, [r3, #12]
 8011080:	687a      	ldr	r2, [r7, #4]
 8011082:	429a      	cmp	r2, r3
 8011084:	d104      	bne.n	8011090 <tcp_process+0x6a8>
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	68da      	ldr	r2, [r3, #12]
 801108a:	693b      	ldr	r3, [r7, #16]
 801108c:	60da      	str	r2, [r3, #12]
 801108e:	e005      	b.n	801109c <tcp_process+0x6b4>
 8011090:	693b      	ldr	r3, [r7, #16]
 8011092:	68db      	ldr	r3, [r3, #12]
 8011094:	613b      	str	r3, [r7, #16]
 8011096:	693b      	ldr	r3, [r7, #16]
 8011098:	2b00      	cmp	r3, #0
 801109a:	d1ef      	bne.n	801107c <tcp_process+0x694>
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	2200      	movs	r2, #0
 80110a0:	60da      	str	r2, [r3, #12]
 80110a2:	4b43      	ldr	r3, [pc, #268]	@ (80111b0 <tcp_process+0x7c8>)
 80110a4:	2201      	movs	r2, #1
 80110a6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	220a      	movs	r2, #10
 80110ac:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80110ae:	4b41      	ldr	r3, [pc, #260]	@ (80111b4 <tcp_process+0x7cc>)
 80110b0:	681a      	ldr	r2, [r3, #0]
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	60da      	str	r2, [r3, #12]
 80110b6:	4a3f      	ldr	r2, [pc, #252]	@ (80111b4 <tcp_process+0x7cc>)
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	6013      	str	r3, [r2, #0]
 80110bc:	f002 fc8c 	bl	80139d8 <tcp_timer_needed>
      }
      break;
 80110c0:	e06c      	b.n	801119c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80110c2:	6878      	ldr	r0, [r7, #4]
 80110c4:	f000 f984 	bl	80113d0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80110c8:	4b3b      	ldr	r3, [pc, #236]	@ (80111b8 <tcp_process+0x7d0>)
 80110ca:	781b      	ldrb	r3, [r3, #0]
 80110cc:	f003 0310 	and.w	r3, r3, #16
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	d065      	beq.n	80111a0 <tcp_process+0x7b8>
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80110d8:	4b38      	ldr	r3, [pc, #224]	@ (80111bc <tcp_process+0x7d4>)
 80110da:	681b      	ldr	r3, [r3, #0]
 80110dc:	429a      	cmp	r2, r3
 80110de:	d15f      	bne.n	80111a0 <tcp_process+0x7b8>
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	d15b      	bne.n	80111a0 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80110e8:	6878      	ldr	r0, [r7, #4]
 80110ea:	f7fe fcf1 	bl	800fad0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80110ee:	4b35      	ldr	r3, [pc, #212]	@ (80111c4 <tcp_process+0x7dc>)
 80110f0:	681b      	ldr	r3, [r3, #0]
 80110f2:	687a      	ldr	r2, [r7, #4]
 80110f4:	429a      	cmp	r2, r3
 80110f6:	d105      	bne.n	8011104 <tcp_process+0x71c>
 80110f8:	4b32      	ldr	r3, [pc, #200]	@ (80111c4 <tcp_process+0x7dc>)
 80110fa:	681b      	ldr	r3, [r3, #0]
 80110fc:	68db      	ldr	r3, [r3, #12]
 80110fe:	4a31      	ldr	r2, [pc, #196]	@ (80111c4 <tcp_process+0x7dc>)
 8011100:	6013      	str	r3, [r2, #0]
 8011102:	e013      	b.n	801112c <tcp_process+0x744>
 8011104:	4b2f      	ldr	r3, [pc, #188]	@ (80111c4 <tcp_process+0x7dc>)
 8011106:	681b      	ldr	r3, [r3, #0]
 8011108:	60fb      	str	r3, [r7, #12]
 801110a:	e00c      	b.n	8011126 <tcp_process+0x73e>
 801110c:	68fb      	ldr	r3, [r7, #12]
 801110e:	68db      	ldr	r3, [r3, #12]
 8011110:	687a      	ldr	r2, [r7, #4]
 8011112:	429a      	cmp	r2, r3
 8011114:	d104      	bne.n	8011120 <tcp_process+0x738>
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	68da      	ldr	r2, [r3, #12]
 801111a:	68fb      	ldr	r3, [r7, #12]
 801111c:	60da      	str	r2, [r3, #12]
 801111e:	e005      	b.n	801112c <tcp_process+0x744>
 8011120:	68fb      	ldr	r3, [r7, #12]
 8011122:	68db      	ldr	r3, [r3, #12]
 8011124:	60fb      	str	r3, [r7, #12]
 8011126:	68fb      	ldr	r3, [r7, #12]
 8011128:	2b00      	cmp	r3, #0
 801112a:	d1ef      	bne.n	801110c <tcp_process+0x724>
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	2200      	movs	r2, #0
 8011130:	60da      	str	r2, [r3, #12]
 8011132:	4b1f      	ldr	r3, [pc, #124]	@ (80111b0 <tcp_process+0x7c8>)
 8011134:	2201      	movs	r2, #1
 8011136:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	220a      	movs	r2, #10
 801113c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801113e:	4b1d      	ldr	r3, [pc, #116]	@ (80111b4 <tcp_process+0x7cc>)
 8011140:	681a      	ldr	r2, [r3, #0]
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	60da      	str	r2, [r3, #12]
 8011146:	4a1b      	ldr	r2, [pc, #108]	@ (80111b4 <tcp_process+0x7cc>)
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	6013      	str	r3, [r2, #0]
 801114c:	f002 fc44 	bl	80139d8 <tcp_timer_needed>
      }
      break;
 8011150:	e026      	b.n	80111a0 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8011152:	6878      	ldr	r0, [r7, #4]
 8011154:	f000 f93c 	bl	80113d0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011158:	4b17      	ldr	r3, [pc, #92]	@ (80111b8 <tcp_process+0x7d0>)
 801115a:	781b      	ldrb	r3, [r3, #0]
 801115c:	f003 0310 	and.w	r3, r3, #16
 8011160:	2b00      	cmp	r3, #0
 8011162:	d01f      	beq.n	80111a4 <tcp_process+0x7bc>
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011168:	4b14      	ldr	r3, [pc, #80]	@ (80111bc <tcp_process+0x7d4>)
 801116a:	681b      	ldr	r3, [r3, #0]
 801116c:	429a      	cmp	r2, r3
 801116e:	d119      	bne.n	80111a4 <tcp_process+0x7bc>
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011174:	2b00      	cmp	r3, #0
 8011176:	d115      	bne.n	80111a4 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8011178:	4b11      	ldr	r3, [pc, #68]	@ (80111c0 <tcp_process+0x7d8>)
 801117a:	781b      	ldrb	r3, [r3, #0]
 801117c:	f043 0310 	orr.w	r3, r3, #16
 8011180:	b2da      	uxtb	r2, r3
 8011182:	4b0f      	ldr	r3, [pc, #60]	@ (80111c0 <tcp_process+0x7d8>)
 8011184:	701a      	strb	r2, [r3, #0]
      }
      break;
 8011186:	e00d      	b.n	80111a4 <tcp_process+0x7bc>
    default:
      break;
 8011188:	bf00      	nop
 801118a:	e00c      	b.n	80111a6 <tcp_process+0x7be>
      break;
 801118c:	bf00      	nop
 801118e:	e00a      	b.n	80111a6 <tcp_process+0x7be>
      break;
 8011190:	bf00      	nop
 8011192:	e008      	b.n	80111a6 <tcp_process+0x7be>
      break;
 8011194:	bf00      	nop
 8011196:	e006      	b.n	80111a6 <tcp_process+0x7be>
      break;
 8011198:	bf00      	nop
 801119a:	e004      	b.n	80111a6 <tcp_process+0x7be>
      break;
 801119c:	bf00      	nop
 801119e:	e002      	b.n	80111a6 <tcp_process+0x7be>
      break;
 80111a0:	bf00      	nop
 80111a2:	e000      	b.n	80111a6 <tcp_process+0x7be>
      break;
 80111a4:	bf00      	nop
  }
  return ERR_OK;
 80111a6:	2300      	movs	r3, #0
}
 80111a8:	4618      	mov	r0, r3
 80111aa:	3724      	adds	r7, #36	@ 0x24
 80111ac:	46bd      	mov	sp, r7
 80111ae:	bd90      	pop	{r4, r7, pc}
 80111b0:	20015260 	.word	0x20015260
 80111b4:	2001525c 	.word	0x2001525c
 80111b8:	20015290 	.word	0x20015290
 80111bc:	20015288 	.word	0x20015288
 80111c0:	20015291 	.word	0x20015291
 80111c4:	20015258 	.word	0x20015258

080111c8 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80111c8:	b590      	push	{r4, r7, lr}
 80111ca:	b085      	sub	sp, #20
 80111cc:	af00      	add	r7, sp, #0
 80111ce:	6078      	str	r0, [r7, #4]
 80111d0:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	2b00      	cmp	r3, #0
 80111d6:	d106      	bne.n	80111e6 <tcp_oos_insert_segment+0x1e>
 80111d8:	4b3b      	ldr	r3, [pc, #236]	@ (80112c8 <tcp_oos_insert_segment+0x100>)
 80111da:	f240 421f 	movw	r2, #1055	@ 0x41f
 80111de:	493b      	ldr	r1, [pc, #236]	@ (80112cc <tcp_oos_insert_segment+0x104>)
 80111e0:	483b      	ldr	r0, [pc, #236]	@ (80112d0 <tcp_oos_insert_segment+0x108>)
 80111e2:	f006 fcf3 	bl	8017bcc <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	68db      	ldr	r3, [r3, #12]
 80111ea:	899b      	ldrh	r3, [r3, #12]
 80111ec:	b29b      	uxth	r3, r3
 80111ee:	4618      	mov	r0, r3
 80111f0:	f7fb f87a 	bl	800c2e8 <lwip_htons>
 80111f4:	4603      	mov	r3, r0
 80111f6:	b2db      	uxtb	r3, r3
 80111f8:	f003 0301 	and.w	r3, r3, #1
 80111fc:	2b00      	cmp	r3, #0
 80111fe:	d028      	beq.n	8011252 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8011200:	6838      	ldr	r0, [r7, #0]
 8011202:	f7fe fa63 	bl	800f6cc <tcp_segs_free>
    next = NULL;
 8011206:	2300      	movs	r3, #0
 8011208:	603b      	str	r3, [r7, #0]
 801120a:	e056      	b.n	80112ba <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801120c:	683b      	ldr	r3, [r7, #0]
 801120e:	68db      	ldr	r3, [r3, #12]
 8011210:	899b      	ldrh	r3, [r3, #12]
 8011212:	b29b      	uxth	r3, r3
 8011214:	4618      	mov	r0, r3
 8011216:	f7fb f867 	bl	800c2e8 <lwip_htons>
 801121a:	4603      	mov	r3, r0
 801121c:	b2db      	uxtb	r3, r3
 801121e:	f003 0301 	and.w	r3, r3, #1
 8011222:	2b00      	cmp	r3, #0
 8011224:	d00d      	beq.n	8011242 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	68db      	ldr	r3, [r3, #12]
 801122a:	899b      	ldrh	r3, [r3, #12]
 801122c:	b29c      	uxth	r4, r3
 801122e:	2001      	movs	r0, #1
 8011230:	f7fb f85a 	bl	800c2e8 <lwip_htons>
 8011234:	4603      	mov	r3, r0
 8011236:	461a      	mov	r2, r3
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	68db      	ldr	r3, [r3, #12]
 801123c:	4322      	orrs	r2, r4
 801123e:	b292      	uxth	r2, r2
 8011240:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8011242:	683b      	ldr	r3, [r7, #0]
 8011244:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8011246:	683b      	ldr	r3, [r7, #0]
 8011248:	681b      	ldr	r3, [r3, #0]
 801124a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 801124c:	68f8      	ldr	r0, [r7, #12]
 801124e:	f7fe fa52 	bl	800f6f6 <tcp_seg_free>
    while (next &&
 8011252:	683b      	ldr	r3, [r7, #0]
 8011254:	2b00      	cmp	r3, #0
 8011256:	d00e      	beq.n	8011276 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	891b      	ldrh	r3, [r3, #8]
 801125c:	461a      	mov	r2, r3
 801125e:	4b1d      	ldr	r3, [pc, #116]	@ (80112d4 <tcp_oos_insert_segment+0x10c>)
 8011260:	681b      	ldr	r3, [r3, #0]
 8011262:	441a      	add	r2, r3
 8011264:	683b      	ldr	r3, [r7, #0]
 8011266:	68db      	ldr	r3, [r3, #12]
 8011268:	685b      	ldr	r3, [r3, #4]
 801126a:	6839      	ldr	r1, [r7, #0]
 801126c:	8909      	ldrh	r1, [r1, #8]
 801126e:	440b      	add	r3, r1
 8011270:	1ad3      	subs	r3, r2, r3
    while (next &&
 8011272:	2b00      	cmp	r3, #0
 8011274:	daca      	bge.n	801120c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8011276:	683b      	ldr	r3, [r7, #0]
 8011278:	2b00      	cmp	r3, #0
 801127a:	d01e      	beq.n	80112ba <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	891b      	ldrh	r3, [r3, #8]
 8011280:	461a      	mov	r2, r3
 8011282:	4b14      	ldr	r3, [pc, #80]	@ (80112d4 <tcp_oos_insert_segment+0x10c>)
 8011284:	681b      	ldr	r3, [r3, #0]
 8011286:	441a      	add	r2, r3
 8011288:	683b      	ldr	r3, [r7, #0]
 801128a:	68db      	ldr	r3, [r3, #12]
 801128c:	685b      	ldr	r3, [r3, #4]
 801128e:	1ad3      	subs	r3, r2, r3
    if (next &&
 8011290:	2b00      	cmp	r3, #0
 8011292:	dd12      	ble.n	80112ba <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8011294:	683b      	ldr	r3, [r7, #0]
 8011296:	68db      	ldr	r3, [r3, #12]
 8011298:	685b      	ldr	r3, [r3, #4]
 801129a:	b29a      	uxth	r2, r3
 801129c:	4b0d      	ldr	r3, [pc, #52]	@ (80112d4 <tcp_oos_insert_segment+0x10c>)
 801129e:	681b      	ldr	r3, [r3, #0]
 80112a0:	b29b      	uxth	r3, r3
 80112a2:	1ad3      	subs	r3, r2, r3
 80112a4:	b29a      	uxth	r2, r3
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	685a      	ldr	r2, [r3, #4]
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	891b      	ldrh	r3, [r3, #8]
 80112b2:	4619      	mov	r1, r3
 80112b4:	4610      	mov	r0, r2
 80112b6:	f7fc fcb9 	bl	800dc2c <pbuf_realloc>
    }
  }
  cseg->next = next;
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	683a      	ldr	r2, [r7, #0]
 80112be:	601a      	str	r2, [r3, #0]
}
 80112c0:	bf00      	nop
 80112c2:	3714      	adds	r7, #20
 80112c4:	46bd      	mov	sp, r7
 80112c6:	bd90      	pop	{r4, r7, pc}
 80112c8:	08021b44 	.word	0x08021b44
 80112cc:	08021e04 	.word	0x08021e04
 80112d0:	08021b90 	.word	0x08021b90
 80112d4:	20015284 	.word	0x20015284

080112d8 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80112d8:	b5b0      	push	{r4, r5, r7, lr}
 80112da:	b086      	sub	sp, #24
 80112dc:	af00      	add	r7, sp, #0
 80112de:	60f8      	str	r0, [r7, #12]
 80112e0:	60b9      	str	r1, [r7, #8]
 80112e2:	607a      	str	r2, [r7, #4]
 80112e4:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80112e6:	e03e      	b.n	8011366 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80112e8:	68bb      	ldr	r3, [r7, #8]
 80112ea:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80112ec:	68bb      	ldr	r3, [r7, #8]
 80112ee:	681b      	ldr	r3, [r3, #0]
 80112f0:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80112f2:	697b      	ldr	r3, [r7, #20]
 80112f4:	685b      	ldr	r3, [r3, #4]
 80112f6:	4618      	mov	r0, r3
 80112f8:	f7fc fea6 	bl	800e048 <pbuf_clen>
 80112fc:	4603      	mov	r3, r0
 80112fe:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8011300:	68fb      	ldr	r3, [r7, #12]
 8011302:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011306:	8a7a      	ldrh	r2, [r7, #18]
 8011308:	429a      	cmp	r2, r3
 801130a:	d906      	bls.n	801131a <tcp_free_acked_segments+0x42>
 801130c:	4b2a      	ldr	r3, [pc, #168]	@ (80113b8 <tcp_free_acked_segments+0xe0>)
 801130e:	f240 4257 	movw	r2, #1111	@ 0x457
 8011312:	492a      	ldr	r1, [pc, #168]	@ (80113bc <tcp_free_acked_segments+0xe4>)
 8011314:	482a      	ldr	r0, [pc, #168]	@ (80113c0 <tcp_free_acked_segments+0xe8>)
 8011316:	f006 fc59 	bl	8017bcc <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801131a:	68fb      	ldr	r3, [r7, #12]
 801131c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8011320:	8a7b      	ldrh	r3, [r7, #18]
 8011322:	1ad3      	subs	r3, r2, r3
 8011324:	b29a      	uxth	r2, r3
 8011326:	68fb      	ldr	r3, [r7, #12]
 8011328:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801132c:	697b      	ldr	r3, [r7, #20]
 801132e:	891a      	ldrh	r2, [r3, #8]
 8011330:	4b24      	ldr	r3, [pc, #144]	@ (80113c4 <tcp_free_acked_segments+0xec>)
 8011332:	881b      	ldrh	r3, [r3, #0]
 8011334:	4413      	add	r3, r2
 8011336:	b29a      	uxth	r2, r3
 8011338:	4b22      	ldr	r3, [pc, #136]	@ (80113c4 <tcp_free_acked_segments+0xec>)
 801133a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 801133c:	6978      	ldr	r0, [r7, #20]
 801133e:	f7fe f9da 	bl	800f6f6 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8011342:	68fb      	ldr	r3, [r7, #12]
 8011344:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011348:	2b00      	cmp	r3, #0
 801134a:	d00c      	beq.n	8011366 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 801134c:	68bb      	ldr	r3, [r7, #8]
 801134e:	2b00      	cmp	r3, #0
 8011350:	d109      	bne.n	8011366 <tcp_free_acked_segments+0x8e>
 8011352:	683b      	ldr	r3, [r7, #0]
 8011354:	2b00      	cmp	r3, #0
 8011356:	d106      	bne.n	8011366 <tcp_free_acked_segments+0x8e>
 8011358:	4b17      	ldr	r3, [pc, #92]	@ (80113b8 <tcp_free_acked_segments+0xe0>)
 801135a:	f240 4261 	movw	r2, #1121	@ 0x461
 801135e:	491a      	ldr	r1, [pc, #104]	@ (80113c8 <tcp_free_acked_segments+0xf0>)
 8011360:	4817      	ldr	r0, [pc, #92]	@ (80113c0 <tcp_free_acked_segments+0xe8>)
 8011362:	f006 fc33 	bl	8017bcc <iprintf>
  while (seg_list != NULL &&
 8011366:	68bb      	ldr	r3, [r7, #8]
 8011368:	2b00      	cmp	r3, #0
 801136a:	d020      	beq.n	80113ae <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 801136c:	68bb      	ldr	r3, [r7, #8]
 801136e:	68db      	ldr	r3, [r3, #12]
 8011370:	685b      	ldr	r3, [r3, #4]
 8011372:	4618      	mov	r0, r3
 8011374:	f7fa ffce 	bl	800c314 <lwip_htonl>
 8011378:	4604      	mov	r4, r0
 801137a:	68bb      	ldr	r3, [r7, #8]
 801137c:	891b      	ldrh	r3, [r3, #8]
 801137e:	461d      	mov	r5, r3
 8011380:	68bb      	ldr	r3, [r7, #8]
 8011382:	68db      	ldr	r3, [r3, #12]
 8011384:	899b      	ldrh	r3, [r3, #12]
 8011386:	b29b      	uxth	r3, r3
 8011388:	4618      	mov	r0, r3
 801138a:	f7fa ffad 	bl	800c2e8 <lwip_htons>
 801138e:	4603      	mov	r3, r0
 8011390:	b2db      	uxtb	r3, r3
 8011392:	f003 0303 	and.w	r3, r3, #3
 8011396:	2b00      	cmp	r3, #0
 8011398:	d001      	beq.n	801139e <tcp_free_acked_segments+0xc6>
 801139a:	2301      	movs	r3, #1
 801139c:	e000      	b.n	80113a0 <tcp_free_acked_segments+0xc8>
 801139e:	2300      	movs	r3, #0
 80113a0:	442b      	add	r3, r5
 80113a2:	18e2      	adds	r2, r4, r3
 80113a4:	4b09      	ldr	r3, [pc, #36]	@ (80113cc <tcp_free_acked_segments+0xf4>)
 80113a6:	681b      	ldr	r3, [r3, #0]
 80113a8:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	dd9c      	ble.n	80112e8 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80113ae:	68bb      	ldr	r3, [r7, #8]
}
 80113b0:	4618      	mov	r0, r3
 80113b2:	3718      	adds	r7, #24
 80113b4:	46bd      	mov	sp, r7
 80113b6:	bdb0      	pop	{r4, r5, r7, pc}
 80113b8:	08021b44 	.word	0x08021b44
 80113bc:	08021e2c 	.word	0x08021e2c
 80113c0:	08021b90 	.word	0x08021b90
 80113c4:	2001528c 	.word	0x2001528c
 80113c8:	08021e54 	.word	0x08021e54
 80113cc:	20015288 	.word	0x20015288

080113d0 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80113d0:	b5b0      	push	{r4, r5, r7, lr}
 80113d2:	b094      	sub	sp, #80	@ 0x50
 80113d4:	af00      	add	r7, sp, #0
 80113d6:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80113d8:	2300      	movs	r3, #0
 80113da:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	2b00      	cmp	r3, #0
 80113e0:	d106      	bne.n	80113f0 <tcp_receive+0x20>
 80113e2:	4b91      	ldr	r3, [pc, #580]	@ (8011628 <tcp_receive+0x258>)
 80113e4:	f240 427b 	movw	r2, #1147	@ 0x47b
 80113e8:	4990      	ldr	r1, [pc, #576]	@ (801162c <tcp_receive+0x25c>)
 80113ea:	4891      	ldr	r0, [pc, #580]	@ (8011630 <tcp_receive+0x260>)
 80113ec:	f006 fbee 	bl	8017bcc <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	7d1b      	ldrb	r3, [r3, #20]
 80113f4:	2b03      	cmp	r3, #3
 80113f6:	d806      	bhi.n	8011406 <tcp_receive+0x36>
 80113f8:	4b8b      	ldr	r3, [pc, #556]	@ (8011628 <tcp_receive+0x258>)
 80113fa:	f240 427c 	movw	r2, #1148	@ 0x47c
 80113fe:	498d      	ldr	r1, [pc, #564]	@ (8011634 <tcp_receive+0x264>)
 8011400:	488b      	ldr	r0, [pc, #556]	@ (8011630 <tcp_receive+0x260>)
 8011402:	f006 fbe3 	bl	8017bcc <iprintf>

  if (flags & TCP_ACK) {
 8011406:	4b8c      	ldr	r3, [pc, #560]	@ (8011638 <tcp_receive+0x268>)
 8011408:	781b      	ldrb	r3, [r3, #0]
 801140a:	f003 0310 	and.w	r3, r3, #16
 801140e:	2b00      	cmp	r3, #0
 8011410:	f000 8264 	beq.w	80118dc <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801141a:	461a      	mov	r2, r3
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011420:	4413      	add	r3, r2
 8011422:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8011428:	4b84      	ldr	r3, [pc, #528]	@ (801163c <tcp_receive+0x26c>)
 801142a:	681b      	ldr	r3, [r3, #0]
 801142c:	1ad3      	subs	r3, r2, r3
 801142e:	2b00      	cmp	r3, #0
 8011430:	db1b      	blt.n	801146a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8011436:	4b81      	ldr	r3, [pc, #516]	@ (801163c <tcp_receive+0x26c>)
 8011438:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801143a:	429a      	cmp	r2, r3
 801143c:	d106      	bne.n	801144c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8011442:	4b7f      	ldr	r3, [pc, #508]	@ (8011640 <tcp_receive+0x270>)
 8011444:	681b      	ldr	r3, [r3, #0]
 8011446:	1ad3      	subs	r3, r2, r3
 8011448:	2b00      	cmp	r3, #0
 801144a:	db0e      	blt.n	801146a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8011450:	4b7b      	ldr	r3, [pc, #492]	@ (8011640 <tcp_receive+0x270>)
 8011452:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011454:	429a      	cmp	r2, r3
 8011456:	d125      	bne.n	80114a4 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8011458:	4b7a      	ldr	r3, [pc, #488]	@ (8011644 <tcp_receive+0x274>)
 801145a:	681b      	ldr	r3, [r3, #0]
 801145c:	89db      	ldrh	r3, [r3, #14]
 801145e:	b29a      	uxth	r2, r3
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8011466:	429a      	cmp	r2, r3
 8011468:	d91c      	bls.n	80114a4 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801146a:	4b76      	ldr	r3, [pc, #472]	@ (8011644 <tcp_receive+0x274>)
 801146c:	681b      	ldr	r3, [r3, #0]
 801146e:	89db      	ldrh	r3, [r3, #14]
 8011470:	b29a      	uxth	r2, r3
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8011484:	429a      	cmp	r2, r3
 8011486:	d205      	bcs.n	8011494 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 8011494:	4b69      	ldr	r3, [pc, #420]	@ (801163c <tcp_receive+0x26c>)
 8011496:	681a      	ldr	r2, [r3, #0]
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 801149c:	4b68      	ldr	r3, [pc, #416]	@ (8011640 <tcp_receive+0x270>)
 801149e:	681a      	ldr	r2, [r3, #0]
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80114a4:	4b66      	ldr	r3, [pc, #408]	@ (8011640 <tcp_receive+0x270>)
 80114a6:	681a      	ldr	r2, [r3, #0]
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80114ac:	1ad3      	subs	r3, r2, r3
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	dc58      	bgt.n	8011564 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80114b2:	4b65      	ldr	r3, [pc, #404]	@ (8011648 <tcp_receive+0x278>)
 80114b4:	881b      	ldrh	r3, [r3, #0]
 80114b6:	2b00      	cmp	r3, #0
 80114b8:	d14b      	bne.n	8011552 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80114be:	687a      	ldr	r2, [r7, #4]
 80114c0:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 80114c4:	4413      	add	r3, r2
 80114c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80114c8:	429a      	cmp	r2, r3
 80114ca:	d142      	bne.n	8011552 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	db3d      	blt.n	8011552 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80114da:	4b59      	ldr	r3, [pc, #356]	@ (8011640 <tcp_receive+0x270>)
 80114dc:	681b      	ldr	r3, [r3, #0]
 80114de:	429a      	cmp	r2, r3
 80114e0:	d137      	bne.n	8011552 <tcp_receive+0x182>
              found_dupack = 1;
 80114e2:	2301      	movs	r3, #1
 80114e4:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80114ec:	2bff      	cmp	r3, #255	@ 0xff
 80114ee:	d007      	beq.n	8011500 <tcp_receive+0x130>
                ++pcb->dupacks;
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80114f6:	3301      	adds	r3, #1
 80114f8:	b2da      	uxtb	r2, r3
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8011506:	2b03      	cmp	r3, #3
 8011508:	d91b      	bls.n	8011542 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011514:	4413      	add	r3, r2
 8011516:	b29a      	uxth	r2, r3
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801151e:	429a      	cmp	r2, r3
 8011520:	d30a      	bcc.n	8011538 <tcp_receive+0x168>
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801152c:	4413      	add	r3, r2
 801152e:	b29a      	uxth	r2, r3
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8011536:	e004      	b.n	8011542 <tcp_receive+0x172>
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801153e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8011548:	2b02      	cmp	r3, #2
 801154a:	d902      	bls.n	8011552 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 801154c:	6878      	ldr	r0, [r7, #4]
 801154e:	f001 fee7 	bl	8013320 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8011552:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011554:	2b00      	cmp	r3, #0
 8011556:	f040 8161 	bne.w	801181c <tcp_receive+0x44c>
        pcb->dupacks = 0;
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	2200      	movs	r2, #0
 801155e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8011562:	e15b      	b.n	801181c <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011564:	4b36      	ldr	r3, [pc, #216]	@ (8011640 <tcp_receive+0x270>)
 8011566:	681a      	ldr	r2, [r3, #0]
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801156c:	1ad3      	subs	r3, r2, r3
 801156e:	3b01      	subs	r3, #1
 8011570:	2b00      	cmp	r3, #0
 8011572:	f2c0 814e 	blt.w	8011812 <tcp_receive+0x442>
 8011576:	4b32      	ldr	r3, [pc, #200]	@ (8011640 <tcp_receive+0x270>)
 8011578:	681a      	ldr	r2, [r3, #0]
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801157e:	1ad3      	subs	r3, r2, r3
 8011580:	2b00      	cmp	r3, #0
 8011582:	f300 8146 	bgt.w	8011812 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	8b5b      	ldrh	r3, [r3, #26]
 801158a:	f003 0304 	and.w	r3, r3, #4
 801158e:	2b00      	cmp	r3, #0
 8011590:	d010      	beq.n	80115b4 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	8b5b      	ldrh	r3, [r3, #26]
 8011596:	f023 0304 	bic.w	r3, r3, #4
 801159a:	b29a      	uxth	r2, r3
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	2200      	movs	r2, #0
 80115b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	2200      	movs	r2, #0
 80115b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80115c2:	10db      	asrs	r3, r3, #3
 80115c4:	b21b      	sxth	r3, r3
 80115c6:	b29a      	uxth	r2, r3
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80115ce:	b29b      	uxth	r3, r3
 80115d0:	4413      	add	r3, r2
 80115d2:	b29b      	uxth	r3, r3
 80115d4:	b21a      	sxth	r2, r3
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80115dc:	4b18      	ldr	r3, [pc, #96]	@ (8011640 <tcp_receive+0x270>)
 80115de:	681b      	ldr	r3, [r3, #0]
 80115e0:	b29a      	uxth	r2, r3
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80115e6:	b29b      	uxth	r3, r3
 80115e8:	1ad3      	subs	r3, r2, r3
 80115ea:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	2200      	movs	r2, #0
 80115f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 80115f4:	4b12      	ldr	r3, [pc, #72]	@ (8011640 <tcp_receive+0x270>)
 80115f6:	681a      	ldr	r2, [r3, #0]
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	7d1b      	ldrb	r3, [r3, #20]
 8011600:	2b03      	cmp	r3, #3
 8011602:	f240 8097 	bls.w	8011734 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8011612:	429a      	cmp	r2, r3
 8011614:	d245      	bcs.n	80116a2 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	8b5b      	ldrh	r3, [r3, #26]
 801161a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801161e:	2b00      	cmp	r3, #0
 8011620:	d014      	beq.n	801164c <tcp_receive+0x27c>
 8011622:	2301      	movs	r3, #1
 8011624:	e013      	b.n	801164e <tcp_receive+0x27e>
 8011626:	bf00      	nop
 8011628:	08021b44 	.word	0x08021b44
 801162c:	08021e74 	.word	0x08021e74
 8011630:	08021b90 	.word	0x08021b90
 8011634:	08021e90 	.word	0x08021e90
 8011638:	20015290 	.word	0x20015290
 801163c:	20015284 	.word	0x20015284
 8011640:	20015288 	.word	0x20015288
 8011644:	20015274 	.word	0x20015274
 8011648:	2001528e 	.word	0x2001528e
 801164c:	2302      	movs	r3, #2
 801164e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8011652:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8011656:	b29a      	uxth	r2, r3
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801165c:	fb12 f303 	smulbb	r3, r2, r3
 8011660:	b29b      	uxth	r3, r3
 8011662:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8011664:	4293      	cmp	r3, r2
 8011666:	bf28      	it	cs
 8011668:	4613      	movcs	r3, r2
 801166a:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8011672:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8011674:	4413      	add	r3, r2
 8011676:	b29a      	uxth	r2, r3
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801167e:	429a      	cmp	r2, r3
 8011680:	d309      	bcc.n	8011696 <tcp_receive+0x2c6>
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8011688:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801168a:	4413      	add	r3, r2
 801168c:	b29a      	uxth	r2, r3
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8011694:	e04e      	b.n	8011734 <tcp_receive+0x364>
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801169c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80116a0:	e048      	b.n	8011734 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80116a8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80116aa:	4413      	add	r3, r2
 80116ac:	b29a      	uxth	r2, r3
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80116b4:	429a      	cmp	r2, r3
 80116b6:	d309      	bcc.n	80116cc <tcp_receive+0x2fc>
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80116be:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80116c0:	4413      	add	r3, r2
 80116c2:	b29a      	uxth	r2, r3
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80116ca:	e004      	b.n	80116d6 <tcp_receive+0x306>
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80116d2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80116e2:	429a      	cmp	r2, r3
 80116e4:	d326      	bcc.n	8011734 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80116f2:	1ad3      	subs	r3, r2, r3
 80116f4:	b29a      	uxth	r2, r3
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011706:	4413      	add	r3, r2
 8011708:	b29a      	uxth	r2, r3
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8011710:	429a      	cmp	r2, r3
 8011712:	d30a      	bcc.n	801172a <tcp_receive+0x35a>
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801171e:	4413      	add	r3, r2
 8011720:	b29a      	uxth	r2, r3
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8011728:	e004      	b.n	8011734 <tcp_receive+0x364>
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011730:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801173c:	4a98      	ldr	r2, [pc, #608]	@ (80119a0 <tcp_receive+0x5d0>)
 801173e:	6878      	ldr	r0, [r7, #4]
 8011740:	f7ff fdca 	bl	80112d8 <tcp_free_acked_segments>
 8011744:	4602      	mov	r2, r0
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011752:	4a94      	ldr	r2, [pc, #592]	@ (80119a4 <tcp_receive+0x5d4>)
 8011754:	6878      	ldr	r0, [r7, #4]
 8011756:	f7ff fdbf 	bl	80112d8 <tcp_free_acked_segments>
 801175a:	4602      	mov	r2, r0
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011764:	2b00      	cmp	r3, #0
 8011766:	d104      	bne.n	8011772 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801176e:	861a      	strh	r2, [r3, #48]	@ 0x30
 8011770:	e002      	b.n	8011778 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	2200      	movs	r2, #0
 8011776:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	2200      	movs	r2, #0
 801177c:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011782:	2b00      	cmp	r3, #0
 8011784:	d103      	bne.n	801178e <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	2200      	movs	r2, #0
 801178a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8011794:	4b84      	ldr	r3, [pc, #528]	@ (80119a8 <tcp_receive+0x5d8>)
 8011796:	881b      	ldrh	r3, [r3, #0]
 8011798:	4413      	add	r3, r2
 801179a:	b29a      	uxth	r2, r3
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	8b5b      	ldrh	r3, [r3, #26]
 80117a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	d035      	beq.n	801181a <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	d118      	bne.n	80117e8 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	d00c      	beq.n	80117d8 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80117c6:	68db      	ldr	r3, [r3, #12]
 80117c8:	685b      	ldr	r3, [r3, #4]
 80117ca:	4618      	mov	r0, r3
 80117cc:	f7fa fda2 	bl	800c314 <lwip_htonl>
 80117d0:	4603      	mov	r3, r0
 80117d2:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	dc20      	bgt.n	801181a <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	8b5b      	ldrh	r3, [r3, #26]
 80117dc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80117e0:	b29a      	uxth	r2, r3
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80117e6:	e018      	b.n	801181a <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80117f0:	68db      	ldr	r3, [r3, #12]
 80117f2:	685b      	ldr	r3, [r3, #4]
 80117f4:	4618      	mov	r0, r3
 80117f6:	f7fa fd8d 	bl	800c314 <lwip_htonl>
 80117fa:	4603      	mov	r3, r0
 80117fc:	1ae3      	subs	r3, r4, r3
 80117fe:	2b00      	cmp	r3, #0
 8011800:	dc0b      	bgt.n	801181a <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	8b5b      	ldrh	r3, [r3, #26]
 8011806:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801180a:	b29a      	uxth	r2, r3
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011810:	e003      	b.n	801181a <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8011812:	6878      	ldr	r0, [r7, #4]
 8011814:	f001 ff70 	bl	80136f8 <tcp_send_empty_ack>
 8011818:	e000      	b.n	801181c <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801181a:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011820:	2b00      	cmp	r3, #0
 8011822:	d05b      	beq.n	80118dc <tcp_receive+0x50c>
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011828:	4b60      	ldr	r3, [pc, #384]	@ (80119ac <tcp_receive+0x5dc>)
 801182a:	681b      	ldr	r3, [r3, #0]
 801182c:	1ad3      	subs	r3, r2, r3
 801182e:	2b00      	cmp	r3, #0
 8011830:	da54      	bge.n	80118dc <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8011832:	4b5f      	ldr	r3, [pc, #380]	@ (80119b0 <tcp_receive+0x5e0>)
 8011834:	681b      	ldr	r3, [r3, #0]
 8011836:	b29a      	uxth	r2, r3
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801183c:	b29b      	uxth	r3, r3
 801183e:	1ad3      	subs	r3, r2, r3
 8011840:	b29b      	uxth	r3, r3
 8011842:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8011846:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8011850:	10db      	asrs	r3, r3, #3
 8011852:	b21b      	sxth	r3, r3
 8011854:	b29b      	uxth	r3, r3
 8011856:	1ad3      	subs	r3, r2, r3
 8011858:	b29b      	uxth	r3, r3
 801185a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8011864:	b29a      	uxth	r2, r3
 8011866:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 801186a:	4413      	add	r3, r2
 801186c:	b29b      	uxth	r3, r3
 801186e:	b21a      	sxth	r2, r3
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8011874:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8011878:	2b00      	cmp	r3, #0
 801187a:	da05      	bge.n	8011888 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 801187c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8011880:	425b      	negs	r3, r3
 8011882:	b29b      	uxth	r3, r3
 8011884:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8011888:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8011892:	109b      	asrs	r3, r3, #2
 8011894:	b21b      	sxth	r3, r3
 8011896:	b29b      	uxth	r3, r3
 8011898:	1ad3      	subs	r3, r2, r3
 801189a:	b29b      	uxth	r3, r3
 801189c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80118a6:	b29a      	uxth	r2, r3
 80118a8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80118ac:	4413      	add	r3, r2
 80118ae:	b29b      	uxth	r3, r3
 80118b0:	b21a      	sxth	r2, r3
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80118bc:	10db      	asrs	r3, r3, #3
 80118be:	b21b      	sxth	r3, r3
 80118c0:	b29a      	uxth	r2, r3
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80118c8:	b29b      	uxth	r3, r3
 80118ca:	4413      	add	r3, r2
 80118cc:	b29b      	uxth	r3, r3
 80118ce:	b21a      	sxth	r2, r3
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	2200      	movs	r2, #0
 80118da:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80118dc:	4b35      	ldr	r3, [pc, #212]	@ (80119b4 <tcp_receive+0x5e4>)
 80118de:	881b      	ldrh	r3, [r3, #0]
 80118e0:	2b00      	cmp	r3, #0
 80118e2:	f000 84df 	beq.w	80122a4 <tcp_receive+0xed4>
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	7d1b      	ldrb	r3, [r3, #20]
 80118ea:	2b06      	cmp	r3, #6
 80118ec:	f200 84da 	bhi.w	80122a4 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80118f4:	4b30      	ldr	r3, [pc, #192]	@ (80119b8 <tcp_receive+0x5e8>)
 80118f6:	681b      	ldr	r3, [r3, #0]
 80118f8:	1ad3      	subs	r3, r2, r3
 80118fa:	3b01      	subs	r3, #1
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	f2c0 808f 	blt.w	8011a20 <tcp_receive+0x650>
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011906:	4b2b      	ldr	r3, [pc, #172]	@ (80119b4 <tcp_receive+0x5e4>)
 8011908:	881b      	ldrh	r3, [r3, #0]
 801190a:	4619      	mov	r1, r3
 801190c:	4b2a      	ldr	r3, [pc, #168]	@ (80119b8 <tcp_receive+0x5e8>)
 801190e:	681b      	ldr	r3, [r3, #0]
 8011910:	440b      	add	r3, r1
 8011912:	1ad3      	subs	r3, r2, r3
 8011914:	3301      	adds	r3, #1
 8011916:	2b00      	cmp	r3, #0
 8011918:	f300 8082 	bgt.w	8011a20 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 801191c:	4b27      	ldr	r3, [pc, #156]	@ (80119bc <tcp_receive+0x5ec>)
 801191e:	685b      	ldr	r3, [r3, #4]
 8011920:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011926:	4b24      	ldr	r3, [pc, #144]	@ (80119b8 <tcp_receive+0x5e8>)
 8011928:	681b      	ldr	r3, [r3, #0]
 801192a:	1ad3      	subs	r3, r2, r3
 801192c:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801192e:	4b23      	ldr	r3, [pc, #140]	@ (80119bc <tcp_receive+0x5ec>)
 8011930:	685b      	ldr	r3, [r3, #4]
 8011932:	2b00      	cmp	r3, #0
 8011934:	d106      	bne.n	8011944 <tcp_receive+0x574>
 8011936:	4b22      	ldr	r3, [pc, #136]	@ (80119c0 <tcp_receive+0x5f0>)
 8011938:	f240 5294 	movw	r2, #1428	@ 0x594
 801193c:	4921      	ldr	r1, [pc, #132]	@ (80119c4 <tcp_receive+0x5f4>)
 801193e:	4822      	ldr	r0, [pc, #136]	@ (80119c8 <tcp_receive+0x5f8>)
 8011940:	f006 f944 	bl	8017bcc <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8011944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011946:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801194a:	4293      	cmp	r3, r2
 801194c:	d906      	bls.n	801195c <tcp_receive+0x58c>
 801194e:	4b1c      	ldr	r3, [pc, #112]	@ (80119c0 <tcp_receive+0x5f0>)
 8011950:	f240 5295 	movw	r2, #1429	@ 0x595
 8011954:	491d      	ldr	r1, [pc, #116]	@ (80119cc <tcp_receive+0x5fc>)
 8011956:	481c      	ldr	r0, [pc, #112]	@ (80119c8 <tcp_receive+0x5f8>)
 8011958:	f006 f938 	bl	8017bcc <iprintf>
      off = (u16_t)off32;
 801195c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801195e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8011962:	4b16      	ldr	r3, [pc, #88]	@ (80119bc <tcp_receive+0x5ec>)
 8011964:	685b      	ldr	r3, [r3, #4]
 8011966:	891b      	ldrh	r3, [r3, #8]
 8011968:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801196c:	429a      	cmp	r2, r3
 801196e:	d906      	bls.n	801197e <tcp_receive+0x5ae>
 8011970:	4b13      	ldr	r3, [pc, #76]	@ (80119c0 <tcp_receive+0x5f0>)
 8011972:	f240 5297 	movw	r2, #1431	@ 0x597
 8011976:	4916      	ldr	r1, [pc, #88]	@ (80119d0 <tcp_receive+0x600>)
 8011978:	4813      	ldr	r0, [pc, #76]	@ (80119c8 <tcp_receive+0x5f8>)
 801197a:	f006 f927 	bl	8017bcc <iprintf>
      inseg.len -= off;
 801197e:	4b0f      	ldr	r3, [pc, #60]	@ (80119bc <tcp_receive+0x5ec>)
 8011980:	891a      	ldrh	r2, [r3, #8]
 8011982:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011986:	1ad3      	subs	r3, r2, r3
 8011988:	b29a      	uxth	r2, r3
 801198a:	4b0c      	ldr	r3, [pc, #48]	@ (80119bc <tcp_receive+0x5ec>)
 801198c:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801198e:	4b0b      	ldr	r3, [pc, #44]	@ (80119bc <tcp_receive+0x5ec>)
 8011990:	685b      	ldr	r3, [r3, #4]
 8011992:	891a      	ldrh	r2, [r3, #8]
 8011994:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011998:	1ad3      	subs	r3, r2, r3
 801199a:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 801199c:	e02a      	b.n	80119f4 <tcp_receive+0x624>
 801199e:	bf00      	nop
 80119a0:	08021eac 	.word	0x08021eac
 80119a4:	08021eb4 	.word	0x08021eb4
 80119a8:	2001528c 	.word	0x2001528c
 80119ac:	20015288 	.word	0x20015288
 80119b0:	2001524c 	.word	0x2001524c
 80119b4:	2001528e 	.word	0x2001528e
 80119b8:	20015284 	.word	0x20015284
 80119bc:	20015264 	.word	0x20015264
 80119c0:	08021b44 	.word	0x08021b44
 80119c4:	08021ebc 	.word	0x08021ebc
 80119c8:	08021b90 	.word	0x08021b90
 80119cc:	08021ecc 	.word	0x08021ecc
 80119d0:	08021edc 	.word	0x08021edc
        off -= p->len;
 80119d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80119d6:	895b      	ldrh	r3, [r3, #10]
 80119d8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80119dc:	1ad3      	subs	r3, r2, r3
 80119de:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80119e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80119e4:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80119e6:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80119e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80119ea:	2200      	movs	r2, #0
 80119ec:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80119ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80119f0:	681b      	ldr	r3, [r3, #0]
 80119f2:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 80119f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80119f6:	895b      	ldrh	r3, [r3, #10]
 80119f8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80119fc:	429a      	cmp	r2, r3
 80119fe:	d8e9      	bhi.n	80119d4 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8011a00:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011a04:	4619      	mov	r1, r3
 8011a06:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8011a08:	f7fc fa10 	bl	800de2c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011a10:	4a90      	ldr	r2, [pc, #576]	@ (8011c54 <tcp_receive+0x884>)
 8011a12:	6013      	str	r3, [r2, #0]
 8011a14:	4b90      	ldr	r3, [pc, #576]	@ (8011c58 <tcp_receive+0x888>)
 8011a16:	68db      	ldr	r3, [r3, #12]
 8011a18:	4a8e      	ldr	r2, [pc, #568]	@ (8011c54 <tcp_receive+0x884>)
 8011a1a:	6812      	ldr	r2, [r2, #0]
 8011a1c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8011a1e:	e00d      	b.n	8011a3c <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8011a20:	4b8c      	ldr	r3, [pc, #560]	@ (8011c54 <tcp_receive+0x884>)
 8011a22:	681a      	ldr	r2, [r3, #0]
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011a28:	1ad3      	subs	r3, r2, r3
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	da06      	bge.n	8011a3c <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	8b5b      	ldrh	r3, [r3, #26]
 8011a32:	f043 0302 	orr.w	r3, r3, #2
 8011a36:	b29a      	uxth	r2, r3
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011a3c:	4b85      	ldr	r3, [pc, #532]	@ (8011c54 <tcp_receive+0x884>)
 8011a3e:	681a      	ldr	r2, [r3, #0]
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011a44:	1ad3      	subs	r3, r2, r3
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	f2c0 8427 	blt.w	801229a <tcp_receive+0xeca>
 8011a4c:	4b81      	ldr	r3, [pc, #516]	@ (8011c54 <tcp_receive+0x884>)
 8011a4e:	681a      	ldr	r2, [r3, #0]
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011a54:	6879      	ldr	r1, [r7, #4]
 8011a56:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8011a58:	440b      	add	r3, r1
 8011a5a:	1ad3      	subs	r3, r2, r3
 8011a5c:	3301      	adds	r3, #1
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	f300 841b 	bgt.w	801229a <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011a68:	4b7a      	ldr	r3, [pc, #488]	@ (8011c54 <tcp_receive+0x884>)
 8011a6a:	681b      	ldr	r3, [r3, #0]
 8011a6c:	429a      	cmp	r2, r3
 8011a6e:	f040 8298 	bne.w	8011fa2 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8011a72:	4b79      	ldr	r3, [pc, #484]	@ (8011c58 <tcp_receive+0x888>)
 8011a74:	891c      	ldrh	r4, [r3, #8]
 8011a76:	4b78      	ldr	r3, [pc, #480]	@ (8011c58 <tcp_receive+0x888>)
 8011a78:	68db      	ldr	r3, [r3, #12]
 8011a7a:	899b      	ldrh	r3, [r3, #12]
 8011a7c:	b29b      	uxth	r3, r3
 8011a7e:	4618      	mov	r0, r3
 8011a80:	f7fa fc32 	bl	800c2e8 <lwip_htons>
 8011a84:	4603      	mov	r3, r0
 8011a86:	b2db      	uxtb	r3, r3
 8011a88:	f003 0303 	and.w	r3, r3, #3
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	d001      	beq.n	8011a94 <tcp_receive+0x6c4>
 8011a90:	2301      	movs	r3, #1
 8011a92:	e000      	b.n	8011a96 <tcp_receive+0x6c6>
 8011a94:	2300      	movs	r3, #0
 8011a96:	4423      	add	r3, r4
 8011a98:	b29a      	uxth	r2, r3
 8011a9a:	4b70      	ldr	r3, [pc, #448]	@ (8011c5c <tcp_receive+0x88c>)
 8011a9c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8011aa2:	4b6e      	ldr	r3, [pc, #440]	@ (8011c5c <tcp_receive+0x88c>)
 8011aa4:	881b      	ldrh	r3, [r3, #0]
 8011aa6:	429a      	cmp	r2, r3
 8011aa8:	d274      	bcs.n	8011b94 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011aaa:	4b6b      	ldr	r3, [pc, #428]	@ (8011c58 <tcp_receive+0x888>)
 8011aac:	68db      	ldr	r3, [r3, #12]
 8011aae:	899b      	ldrh	r3, [r3, #12]
 8011ab0:	b29b      	uxth	r3, r3
 8011ab2:	4618      	mov	r0, r3
 8011ab4:	f7fa fc18 	bl	800c2e8 <lwip_htons>
 8011ab8:	4603      	mov	r3, r0
 8011aba:	b2db      	uxtb	r3, r3
 8011abc:	f003 0301 	and.w	r3, r3, #1
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d01e      	beq.n	8011b02 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8011ac4:	4b64      	ldr	r3, [pc, #400]	@ (8011c58 <tcp_receive+0x888>)
 8011ac6:	68db      	ldr	r3, [r3, #12]
 8011ac8:	899b      	ldrh	r3, [r3, #12]
 8011aca:	b29b      	uxth	r3, r3
 8011acc:	b21b      	sxth	r3, r3
 8011ace:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8011ad2:	b21c      	sxth	r4, r3
 8011ad4:	4b60      	ldr	r3, [pc, #384]	@ (8011c58 <tcp_receive+0x888>)
 8011ad6:	68db      	ldr	r3, [r3, #12]
 8011ad8:	899b      	ldrh	r3, [r3, #12]
 8011ada:	b29b      	uxth	r3, r3
 8011adc:	4618      	mov	r0, r3
 8011ade:	f7fa fc03 	bl	800c2e8 <lwip_htons>
 8011ae2:	4603      	mov	r3, r0
 8011ae4:	b2db      	uxtb	r3, r3
 8011ae6:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8011aea:	b29b      	uxth	r3, r3
 8011aec:	4618      	mov	r0, r3
 8011aee:	f7fa fbfb 	bl	800c2e8 <lwip_htons>
 8011af2:	4603      	mov	r3, r0
 8011af4:	b21b      	sxth	r3, r3
 8011af6:	4323      	orrs	r3, r4
 8011af8:	b21a      	sxth	r2, r3
 8011afa:	4b57      	ldr	r3, [pc, #348]	@ (8011c58 <tcp_receive+0x888>)
 8011afc:	68db      	ldr	r3, [r3, #12]
 8011afe:	b292      	uxth	r2, r2
 8011b00:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8011b06:	4b54      	ldr	r3, [pc, #336]	@ (8011c58 <tcp_receive+0x888>)
 8011b08:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011b0a:	4b53      	ldr	r3, [pc, #332]	@ (8011c58 <tcp_receive+0x888>)
 8011b0c:	68db      	ldr	r3, [r3, #12]
 8011b0e:	899b      	ldrh	r3, [r3, #12]
 8011b10:	b29b      	uxth	r3, r3
 8011b12:	4618      	mov	r0, r3
 8011b14:	f7fa fbe8 	bl	800c2e8 <lwip_htons>
 8011b18:	4603      	mov	r3, r0
 8011b1a:	b2db      	uxtb	r3, r3
 8011b1c:	f003 0302 	and.w	r3, r3, #2
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	d005      	beq.n	8011b30 <tcp_receive+0x760>
            inseg.len -= 1;
 8011b24:	4b4c      	ldr	r3, [pc, #304]	@ (8011c58 <tcp_receive+0x888>)
 8011b26:	891b      	ldrh	r3, [r3, #8]
 8011b28:	3b01      	subs	r3, #1
 8011b2a:	b29a      	uxth	r2, r3
 8011b2c:	4b4a      	ldr	r3, [pc, #296]	@ (8011c58 <tcp_receive+0x888>)
 8011b2e:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8011b30:	4b49      	ldr	r3, [pc, #292]	@ (8011c58 <tcp_receive+0x888>)
 8011b32:	685b      	ldr	r3, [r3, #4]
 8011b34:	4a48      	ldr	r2, [pc, #288]	@ (8011c58 <tcp_receive+0x888>)
 8011b36:	8912      	ldrh	r2, [r2, #8]
 8011b38:	4611      	mov	r1, r2
 8011b3a:	4618      	mov	r0, r3
 8011b3c:	f7fc f876 	bl	800dc2c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8011b40:	4b45      	ldr	r3, [pc, #276]	@ (8011c58 <tcp_receive+0x888>)
 8011b42:	891c      	ldrh	r4, [r3, #8]
 8011b44:	4b44      	ldr	r3, [pc, #272]	@ (8011c58 <tcp_receive+0x888>)
 8011b46:	68db      	ldr	r3, [r3, #12]
 8011b48:	899b      	ldrh	r3, [r3, #12]
 8011b4a:	b29b      	uxth	r3, r3
 8011b4c:	4618      	mov	r0, r3
 8011b4e:	f7fa fbcb 	bl	800c2e8 <lwip_htons>
 8011b52:	4603      	mov	r3, r0
 8011b54:	b2db      	uxtb	r3, r3
 8011b56:	f003 0303 	and.w	r3, r3, #3
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	d001      	beq.n	8011b62 <tcp_receive+0x792>
 8011b5e:	2301      	movs	r3, #1
 8011b60:	e000      	b.n	8011b64 <tcp_receive+0x794>
 8011b62:	2300      	movs	r3, #0
 8011b64:	4423      	add	r3, r4
 8011b66:	b29a      	uxth	r2, r3
 8011b68:	4b3c      	ldr	r3, [pc, #240]	@ (8011c5c <tcp_receive+0x88c>)
 8011b6a:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011b6c:	4b3b      	ldr	r3, [pc, #236]	@ (8011c5c <tcp_receive+0x88c>)
 8011b6e:	881b      	ldrh	r3, [r3, #0]
 8011b70:	461a      	mov	r2, r3
 8011b72:	4b38      	ldr	r3, [pc, #224]	@ (8011c54 <tcp_receive+0x884>)
 8011b74:	681b      	ldr	r3, [r3, #0]
 8011b76:	441a      	add	r2, r3
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011b7c:	6879      	ldr	r1, [r7, #4]
 8011b7e:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8011b80:	440b      	add	r3, r1
 8011b82:	429a      	cmp	r2, r3
 8011b84:	d006      	beq.n	8011b94 <tcp_receive+0x7c4>
 8011b86:	4b36      	ldr	r3, [pc, #216]	@ (8011c60 <tcp_receive+0x890>)
 8011b88:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 8011b8c:	4935      	ldr	r1, [pc, #212]	@ (8011c64 <tcp_receive+0x894>)
 8011b8e:	4836      	ldr	r0, [pc, #216]	@ (8011c68 <tcp_receive+0x898>)
 8011b90:	f006 f81c 	bl	8017bcc <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	f000 80e6 	beq.w	8011d6a <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011b9e:	4b2e      	ldr	r3, [pc, #184]	@ (8011c58 <tcp_receive+0x888>)
 8011ba0:	68db      	ldr	r3, [r3, #12]
 8011ba2:	899b      	ldrh	r3, [r3, #12]
 8011ba4:	b29b      	uxth	r3, r3
 8011ba6:	4618      	mov	r0, r3
 8011ba8:	f7fa fb9e 	bl	800c2e8 <lwip_htons>
 8011bac:	4603      	mov	r3, r0
 8011bae:	b2db      	uxtb	r3, r3
 8011bb0:	f003 0301 	and.w	r3, r3, #1
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	d010      	beq.n	8011bda <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8011bb8:	e00a      	b.n	8011bd0 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011bbe:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011bc4:	681a      	ldr	r2, [r3, #0]
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 8011bca:	68f8      	ldr	r0, [r7, #12]
 8011bcc:	f7fd fd93 	bl	800f6f6 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011bd4:	2b00      	cmp	r3, #0
 8011bd6:	d1f0      	bne.n	8011bba <tcp_receive+0x7ea>
 8011bd8:	e0c7      	b.n	8011d6a <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011bde:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8011be0:	e051      	b.n	8011c86 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011be2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011be4:	68db      	ldr	r3, [r3, #12]
 8011be6:	899b      	ldrh	r3, [r3, #12]
 8011be8:	b29b      	uxth	r3, r3
 8011bea:	4618      	mov	r0, r3
 8011bec:	f7fa fb7c 	bl	800c2e8 <lwip_htons>
 8011bf0:	4603      	mov	r3, r0
 8011bf2:	b2db      	uxtb	r3, r3
 8011bf4:	f003 0301 	and.w	r3, r3, #1
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	d03c      	beq.n	8011c76 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8011bfc:	4b16      	ldr	r3, [pc, #88]	@ (8011c58 <tcp_receive+0x888>)
 8011bfe:	68db      	ldr	r3, [r3, #12]
 8011c00:	899b      	ldrh	r3, [r3, #12]
 8011c02:	b29b      	uxth	r3, r3
 8011c04:	4618      	mov	r0, r3
 8011c06:	f7fa fb6f 	bl	800c2e8 <lwip_htons>
 8011c0a:	4603      	mov	r3, r0
 8011c0c:	b2db      	uxtb	r3, r3
 8011c0e:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011c12:	2b00      	cmp	r3, #0
 8011c14:	d12f      	bne.n	8011c76 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8011c16:	4b10      	ldr	r3, [pc, #64]	@ (8011c58 <tcp_receive+0x888>)
 8011c18:	68db      	ldr	r3, [r3, #12]
 8011c1a:	899b      	ldrh	r3, [r3, #12]
 8011c1c:	b29c      	uxth	r4, r3
 8011c1e:	2001      	movs	r0, #1
 8011c20:	f7fa fb62 	bl	800c2e8 <lwip_htons>
 8011c24:	4603      	mov	r3, r0
 8011c26:	461a      	mov	r2, r3
 8011c28:	4b0b      	ldr	r3, [pc, #44]	@ (8011c58 <tcp_receive+0x888>)
 8011c2a:	68db      	ldr	r3, [r3, #12]
 8011c2c:	4322      	orrs	r2, r4
 8011c2e:	b292      	uxth	r2, r2
 8011c30:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8011c32:	4b09      	ldr	r3, [pc, #36]	@ (8011c58 <tcp_receive+0x888>)
 8011c34:	891c      	ldrh	r4, [r3, #8]
 8011c36:	4b08      	ldr	r3, [pc, #32]	@ (8011c58 <tcp_receive+0x888>)
 8011c38:	68db      	ldr	r3, [r3, #12]
 8011c3a:	899b      	ldrh	r3, [r3, #12]
 8011c3c:	b29b      	uxth	r3, r3
 8011c3e:	4618      	mov	r0, r3
 8011c40:	f7fa fb52 	bl	800c2e8 <lwip_htons>
 8011c44:	4603      	mov	r3, r0
 8011c46:	b2db      	uxtb	r3, r3
 8011c48:	f003 0303 	and.w	r3, r3, #3
 8011c4c:	2b00      	cmp	r3, #0
 8011c4e:	d00d      	beq.n	8011c6c <tcp_receive+0x89c>
 8011c50:	2301      	movs	r3, #1
 8011c52:	e00c      	b.n	8011c6e <tcp_receive+0x89e>
 8011c54:	20015284 	.word	0x20015284
 8011c58:	20015264 	.word	0x20015264
 8011c5c:	2001528e 	.word	0x2001528e
 8011c60:	08021b44 	.word	0x08021b44
 8011c64:	08021eec 	.word	0x08021eec
 8011c68:	08021b90 	.word	0x08021b90
 8011c6c:	2300      	movs	r3, #0
 8011c6e:	4423      	add	r3, r4
 8011c70:	b29a      	uxth	r2, r3
 8011c72:	4b98      	ldr	r3, [pc, #608]	@ (8011ed4 <tcp_receive+0xb04>)
 8011c74:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8011c76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011c78:	613b      	str	r3, [r7, #16]
              next = next->next;
 8011c7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011c7c:	681b      	ldr	r3, [r3, #0]
 8011c7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 8011c80:	6938      	ldr	r0, [r7, #16]
 8011c82:	f7fd fd38 	bl	800f6f6 <tcp_seg_free>
            while (next &&
 8011c86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	d00e      	beq.n	8011caa <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8011c8c:	4b91      	ldr	r3, [pc, #580]	@ (8011ed4 <tcp_receive+0xb04>)
 8011c8e:	881b      	ldrh	r3, [r3, #0]
 8011c90:	461a      	mov	r2, r3
 8011c92:	4b91      	ldr	r3, [pc, #580]	@ (8011ed8 <tcp_receive+0xb08>)
 8011c94:	681b      	ldr	r3, [r3, #0]
 8011c96:	441a      	add	r2, r3
 8011c98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011c9a:	68db      	ldr	r3, [r3, #12]
 8011c9c:	685b      	ldr	r3, [r3, #4]
 8011c9e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8011ca0:	8909      	ldrh	r1, [r1, #8]
 8011ca2:	440b      	add	r3, r1
 8011ca4:	1ad3      	subs	r3, r2, r3
            while (next &&
 8011ca6:	2b00      	cmp	r3, #0
 8011ca8:	da9b      	bge.n	8011be2 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8011caa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011cac:	2b00      	cmp	r3, #0
 8011cae:	d059      	beq.n	8011d64 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8011cb0:	4b88      	ldr	r3, [pc, #544]	@ (8011ed4 <tcp_receive+0xb04>)
 8011cb2:	881b      	ldrh	r3, [r3, #0]
 8011cb4:	461a      	mov	r2, r3
 8011cb6:	4b88      	ldr	r3, [pc, #544]	@ (8011ed8 <tcp_receive+0xb08>)
 8011cb8:	681b      	ldr	r3, [r3, #0]
 8011cba:	441a      	add	r2, r3
 8011cbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011cbe:	68db      	ldr	r3, [r3, #12]
 8011cc0:	685b      	ldr	r3, [r3, #4]
 8011cc2:	1ad3      	subs	r3, r2, r3
            if (next &&
 8011cc4:	2b00      	cmp	r3, #0
 8011cc6:	dd4d      	ble.n	8011d64 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8011cc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011cca:	68db      	ldr	r3, [r3, #12]
 8011ccc:	685b      	ldr	r3, [r3, #4]
 8011cce:	b29a      	uxth	r2, r3
 8011cd0:	4b81      	ldr	r3, [pc, #516]	@ (8011ed8 <tcp_receive+0xb08>)
 8011cd2:	681b      	ldr	r3, [r3, #0]
 8011cd4:	b29b      	uxth	r3, r3
 8011cd6:	1ad3      	subs	r3, r2, r3
 8011cd8:	b29a      	uxth	r2, r3
 8011cda:	4b80      	ldr	r3, [pc, #512]	@ (8011edc <tcp_receive+0xb0c>)
 8011cdc:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011cde:	4b7f      	ldr	r3, [pc, #508]	@ (8011edc <tcp_receive+0xb0c>)
 8011ce0:	68db      	ldr	r3, [r3, #12]
 8011ce2:	899b      	ldrh	r3, [r3, #12]
 8011ce4:	b29b      	uxth	r3, r3
 8011ce6:	4618      	mov	r0, r3
 8011ce8:	f7fa fafe 	bl	800c2e8 <lwip_htons>
 8011cec:	4603      	mov	r3, r0
 8011cee:	b2db      	uxtb	r3, r3
 8011cf0:	f003 0302 	and.w	r3, r3, #2
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	d005      	beq.n	8011d04 <tcp_receive+0x934>
                inseg.len -= 1;
 8011cf8:	4b78      	ldr	r3, [pc, #480]	@ (8011edc <tcp_receive+0xb0c>)
 8011cfa:	891b      	ldrh	r3, [r3, #8]
 8011cfc:	3b01      	subs	r3, #1
 8011cfe:	b29a      	uxth	r2, r3
 8011d00:	4b76      	ldr	r3, [pc, #472]	@ (8011edc <tcp_receive+0xb0c>)
 8011d02:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8011d04:	4b75      	ldr	r3, [pc, #468]	@ (8011edc <tcp_receive+0xb0c>)
 8011d06:	685b      	ldr	r3, [r3, #4]
 8011d08:	4a74      	ldr	r2, [pc, #464]	@ (8011edc <tcp_receive+0xb0c>)
 8011d0a:	8912      	ldrh	r2, [r2, #8]
 8011d0c:	4611      	mov	r1, r2
 8011d0e:	4618      	mov	r0, r3
 8011d10:	f7fb ff8c 	bl	800dc2c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8011d14:	4b71      	ldr	r3, [pc, #452]	@ (8011edc <tcp_receive+0xb0c>)
 8011d16:	891c      	ldrh	r4, [r3, #8]
 8011d18:	4b70      	ldr	r3, [pc, #448]	@ (8011edc <tcp_receive+0xb0c>)
 8011d1a:	68db      	ldr	r3, [r3, #12]
 8011d1c:	899b      	ldrh	r3, [r3, #12]
 8011d1e:	b29b      	uxth	r3, r3
 8011d20:	4618      	mov	r0, r3
 8011d22:	f7fa fae1 	bl	800c2e8 <lwip_htons>
 8011d26:	4603      	mov	r3, r0
 8011d28:	b2db      	uxtb	r3, r3
 8011d2a:	f003 0303 	and.w	r3, r3, #3
 8011d2e:	2b00      	cmp	r3, #0
 8011d30:	d001      	beq.n	8011d36 <tcp_receive+0x966>
 8011d32:	2301      	movs	r3, #1
 8011d34:	e000      	b.n	8011d38 <tcp_receive+0x968>
 8011d36:	2300      	movs	r3, #0
 8011d38:	4423      	add	r3, r4
 8011d3a:	b29a      	uxth	r2, r3
 8011d3c:	4b65      	ldr	r3, [pc, #404]	@ (8011ed4 <tcp_receive+0xb04>)
 8011d3e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8011d40:	4b64      	ldr	r3, [pc, #400]	@ (8011ed4 <tcp_receive+0xb04>)
 8011d42:	881b      	ldrh	r3, [r3, #0]
 8011d44:	461a      	mov	r2, r3
 8011d46:	4b64      	ldr	r3, [pc, #400]	@ (8011ed8 <tcp_receive+0xb08>)
 8011d48:	681b      	ldr	r3, [r3, #0]
 8011d4a:	441a      	add	r2, r3
 8011d4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011d4e:	68db      	ldr	r3, [r3, #12]
 8011d50:	685b      	ldr	r3, [r3, #4]
 8011d52:	429a      	cmp	r2, r3
 8011d54:	d006      	beq.n	8011d64 <tcp_receive+0x994>
 8011d56:	4b62      	ldr	r3, [pc, #392]	@ (8011ee0 <tcp_receive+0xb10>)
 8011d58:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 8011d5c:	4961      	ldr	r1, [pc, #388]	@ (8011ee4 <tcp_receive+0xb14>)
 8011d5e:	4862      	ldr	r0, [pc, #392]	@ (8011ee8 <tcp_receive+0xb18>)
 8011d60:	f005 ff34 	bl	8017bcc <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8011d68:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8011d6a:	4b5a      	ldr	r3, [pc, #360]	@ (8011ed4 <tcp_receive+0xb04>)
 8011d6c:	881b      	ldrh	r3, [r3, #0]
 8011d6e:	461a      	mov	r2, r3
 8011d70:	4b59      	ldr	r3, [pc, #356]	@ (8011ed8 <tcp_receive+0xb08>)
 8011d72:	681b      	ldr	r3, [r3, #0]
 8011d74:	441a      	add	r2, r3
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8011d7e:	4b55      	ldr	r3, [pc, #340]	@ (8011ed4 <tcp_receive+0xb04>)
 8011d80:	881b      	ldrh	r3, [r3, #0]
 8011d82:	429a      	cmp	r2, r3
 8011d84:	d206      	bcs.n	8011d94 <tcp_receive+0x9c4>
 8011d86:	4b56      	ldr	r3, [pc, #344]	@ (8011ee0 <tcp_receive+0xb10>)
 8011d88:	f240 6207 	movw	r2, #1543	@ 0x607
 8011d8c:	4957      	ldr	r1, [pc, #348]	@ (8011eec <tcp_receive+0xb1c>)
 8011d8e:	4856      	ldr	r0, [pc, #344]	@ (8011ee8 <tcp_receive+0xb18>)
 8011d90:	f005 ff1c 	bl	8017bcc <iprintf>
        pcb->rcv_wnd -= tcplen;
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8011d98:	4b4e      	ldr	r3, [pc, #312]	@ (8011ed4 <tcp_receive+0xb04>)
 8011d9a:	881b      	ldrh	r3, [r3, #0]
 8011d9c:	1ad3      	subs	r3, r2, r3
 8011d9e:	b29a      	uxth	r2, r3
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8011da4:	6878      	ldr	r0, [r7, #4]
 8011da6:	f7fc ffc5 	bl	800ed34 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8011daa:	4b4c      	ldr	r3, [pc, #304]	@ (8011edc <tcp_receive+0xb0c>)
 8011dac:	685b      	ldr	r3, [r3, #4]
 8011dae:	891b      	ldrh	r3, [r3, #8]
 8011db0:	2b00      	cmp	r3, #0
 8011db2:	d006      	beq.n	8011dc2 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8011db4:	4b49      	ldr	r3, [pc, #292]	@ (8011edc <tcp_receive+0xb0c>)
 8011db6:	685b      	ldr	r3, [r3, #4]
 8011db8:	4a4d      	ldr	r2, [pc, #308]	@ (8011ef0 <tcp_receive+0xb20>)
 8011dba:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8011dbc:	4b47      	ldr	r3, [pc, #284]	@ (8011edc <tcp_receive+0xb0c>)
 8011dbe:	2200      	movs	r2, #0
 8011dc0:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011dc2:	4b46      	ldr	r3, [pc, #280]	@ (8011edc <tcp_receive+0xb0c>)
 8011dc4:	68db      	ldr	r3, [r3, #12]
 8011dc6:	899b      	ldrh	r3, [r3, #12]
 8011dc8:	b29b      	uxth	r3, r3
 8011dca:	4618      	mov	r0, r3
 8011dcc:	f7fa fa8c 	bl	800c2e8 <lwip_htons>
 8011dd0:	4603      	mov	r3, r0
 8011dd2:	b2db      	uxtb	r3, r3
 8011dd4:	f003 0301 	and.w	r3, r3, #1
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	f000 80b8 	beq.w	8011f4e <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8011dde:	4b45      	ldr	r3, [pc, #276]	@ (8011ef4 <tcp_receive+0xb24>)
 8011de0:	781b      	ldrb	r3, [r3, #0]
 8011de2:	f043 0320 	orr.w	r3, r3, #32
 8011de6:	b2da      	uxtb	r2, r3
 8011de8:	4b42      	ldr	r3, [pc, #264]	@ (8011ef4 <tcp_receive+0xb24>)
 8011dea:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8011dec:	e0af      	b.n	8011f4e <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011df2:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011df8:	68db      	ldr	r3, [r3, #12]
 8011dfa:	685b      	ldr	r3, [r3, #4]
 8011dfc:	4a36      	ldr	r2, [pc, #216]	@ (8011ed8 <tcp_receive+0xb08>)
 8011dfe:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8011e00:	68bb      	ldr	r3, [r7, #8]
 8011e02:	891b      	ldrh	r3, [r3, #8]
 8011e04:	461c      	mov	r4, r3
 8011e06:	68bb      	ldr	r3, [r7, #8]
 8011e08:	68db      	ldr	r3, [r3, #12]
 8011e0a:	899b      	ldrh	r3, [r3, #12]
 8011e0c:	b29b      	uxth	r3, r3
 8011e0e:	4618      	mov	r0, r3
 8011e10:	f7fa fa6a 	bl	800c2e8 <lwip_htons>
 8011e14:	4603      	mov	r3, r0
 8011e16:	b2db      	uxtb	r3, r3
 8011e18:	f003 0303 	and.w	r3, r3, #3
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	d001      	beq.n	8011e24 <tcp_receive+0xa54>
 8011e20:	2301      	movs	r3, #1
 8011e22:	e000      	b.n	8011e26 <tcp_receive+0xa56>
 8011e24:	2300      	movs	r3, #0
 8011e26:	191a      	adds	r2, r3, r4
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011e2c:	441a      	add	r2, r3
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011e36:	461c      	mov	r4, r3
 8011e38:	68bb      	ldr	r3, [r7, #8]
 8011e3a:	891b      	ldrh	r3, [r3, #8]
 8011e3c:	461d      	mov	r5, r3
 8011e3e:	68bb      	ldr	r3, [r7, #8]
 8011e40:	68db      	ldr	r3, [r3, #12]
 8011e42:	899b      	ldrh	r3, [r3, #12]
 8011e44:	b29b      	uxth	r3, r3
 8011e46:	4618      	mov	r0, r3
 8011e48:	f7fa fa4e 	bl	800c2e8 <lwip_htons>
 8011e4c:	4603      	mov	r3, r0
 8011e4e:	b2db      	uxtb	r3, r3
 8011e50:	f003 0303 	and.w	r3, r3, #3
 8011e54:	2b00      	cmp	r3, #0
 8011e56:	d001      	beq.n	8011e5c <tcp_receive+0xa8c>
 8011e58:	2301      	movs	r3, #1
 8011e5a:	e000      	b.n	8011e5e <tcp_receive+0xa8e>
 8011e5c:	2300      	movs	r3, #0
 8011e5e:	442b      	add	r3, r5
 8011e60:	429c      	cmp	r4, r3
 8011e62:	d206      	bcs.n	8011e72 <tcp_receive+0xaa2>
 8011e64:	4b1e      	ldr	r3, [pc, #120]	@ (8011ee0 <tcp_receive+0xb10>)
 8011e66:	f240 622b 	movw	r2, #1579	@ 0x62b
 8011e6a:	4923      	ldr	r1, [pc, #140]	@ (8011ef8 <tcp_receive+0xb28>)
 8011e6c:	481e      	ldr	r0, [pc, #120]	@ (8011ee8 <tcp_receive+0xb18>)
 8011e6e:	f005 fead 	bl	8017bcc <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8011e72:	68bb      	ldr	r3, [r7, #8]
 8011e74:	891b      	ldrh	r3, [r3, #8]
 8011e76:	461c      	mov	r4, r3
 8011e78:	68bb      	ldr	r3, [r7, #8]
 8011e7a:	68db      	ldr	r3, [r3, #12]
 8011e7c:	899b      	ldrh	r3, [r3, #12]
 8011e7e:	b29b      	uxth	r3, r3
 8011e80:	4618      	mov	r0, r3
 8011e82:	f7fa fa31 	bl	800c2e8 <lwip_htons>
 8011e86:	4603      	mov	r3, r0
 8011e88:	b2db      	uxtb	r3, r3
 8011e8a:	f003 0303 	and.w	r3, r3, #3
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	d001      	beq.n	8011e96 <tcp_receive+0xac6>
 8011e92:	2301      	movs	r3, #1
 8011e94:	e000      	b.n	8011e98 <tcp_receive+0xac8>
 8011e96:	2300      	movs	r3, #0
 8011e98:	1919      	adds	r1, r3, r4
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8011e9e:	b28b      	uxth	r3, r1
 8011ea0:	1ad3      	subs	r3, r2, r3
 8011ea2:	b29a      	uxth	r2, r3
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8011ea8:	6878      	ldr	r0, [r7, #4]
 8011eaa:	f7fc ff43 	bl	800ed34 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8011eae:	68bb      	ldr	r3, [r7, #8]
 8011eb0:	685b      	ldr	r3, [r3, #4]
 8011eb2:	891b      	ldrh	r3, [r3, #8]
 8011eb4:	2b00      	cmp	r3, #0
 8011eb6:	d028      	beq.n	8011f0a <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8011eb8:	4b0d      	ldr	r3, [pc, #52]	@ (8011ef0 <tcp_receive+0xb20>)
 8011eba:	681b      	ldr	r3, [r3, #0]
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	d01d      	beq.n	8011efc <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8011ec0:	4b0b      	ldr	r3, [pc, #44]	@ (8011ef0 <tcp_receive+0xb20>)
 8011ec2:	681a      	ldr	r2, [r3, #0]
 8011ec4:	68bb      	ldr	r3, [r7, #8]
 8011ec6:	685b      	ldr	r3, [r3, #4]
 8011ec8:	4619      	mov	r1, r3
 8011eca:	4610      	mov	r0, r2
 8011ecc:	f7fc f8f6 	bl	800e0bc <pbuf_cat>
 8011ed0:	e018      	b.n	8011f04 <tcp_receive+0xb34>
 8011ed2:	bf00      	nop
 8011ed4:	2001528e 	.word	0x2001528e
 8011ed8:	20015284 	.word	0x20015284
 8011edc:	20015264 	.word	0x20015264
 8011ee0:	08021b44 	.word	0x08021b44
 8011ee4:	08021f24 	.word	0x08021f24
 8011ee8:	08021b90 	.word	0x08021b90
 8011eec:	08021f60 	.word	0x08021f60
 8011ef0:	20015294 	.word	0x20015294
 8011ef4:	20015291 	.word	0x20015291
 8011ef8:	08021f80 	.word	0x08021f80
            } else {
              recv_data = cseg->p;
 8011efc:	68bb      	ldr	r3, [r7, #8]
 8011efe:	685b      	ldr	r3, [r3, #4]
 8011f00:	4a70      	ldr	r2, [pc, #448]	@ (80120c4 <tcp_receive+0xcf4>)
 8011f02:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8011f04:	68bb      	ldr	r3, [r7, #8]
 8011f06:	2200      	movs	r2, #0
 8011f08:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8011f0a:	68bb      	ldr	r3, [r7, #8]
 8011f0c:	68db      	ldr	r3, [r3, #12]
 8011f0e:	899b      	ldrh	r3, [r3, #12]
 8011f10:	b29b      	uxth	r3, r3
 8011f12:	4618      	mov	r0, r3
 8011f14:	f7fa f9e8 	bl	800c2e8 <lwip_htons>
 8011f18:	4603      	mov	r3, r0
 8011f1a:	b2db      	uxtb	r3, r3
 8011f1c:	f003 0301 	and.w	r3, r3, #1
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	d00d      	beq.n	8011f40 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8011f24:	4b68      	ldr	r3, [pc, #416]	@ (80120c8 <tcp_receive+0xcf8>)
 8011f26:	781b      	ldrb	r3, [r3, #0]
 8011f28:	f043 0320 	orr.w	r3, r3, #32
 8011f2c:	b2da      	uxtb	r2, r3
 8011f2e:	4b66      	ldr	r3, [pc, #408]	@ (80120c8 <tcp_receive+0xcf8>)
 8011f30:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	7d1b      	ldrb	r3, [r3, #20]
 8011f36:	2b04      	cmp	r3, #4
 8011f38:	d102      	bne.n	8011f40 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	2207      	movs	r2, #7
 8011f3e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8011f40:	68bb      	ldr	r3, [r7, #8]
 8011f42:	681a      	ldr	r2, [r3, #0]
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 8011f48:	68b8      	ldr	r0, [r7, #8]
 8011f4a:	f7fd fbd4 	bl	800f6f6 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011f52:	2b00      	cmp	r3, #0
 8011f54:	d008      	beq.n	8011f68 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011f5a:	68db      	ldr	r3, [r3, #12]
 8011f5c:	685a      	ldr	r2, [r3, #4]
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 8011f62:	429a      	cmp	r2, r3
 8011f64:	f43f af43 	beq.w	8011dee <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	8b5b      	ldrh	r3, [r3, #26]
 8011f6c:	f003 0301 	and.w	r3, r3, #1
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	d00e      	beq.n	8011f92 <tcp_receive+0xbc2>
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	8b5b      	ldrh	r3, [r3, #26]
 8011f78:	f023 0301 	bic.w	r3, r3, #1
 8011f7c:	b29a      	uxth	r2, r3
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	835a      	strh	r2, [r3, #26]
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	8b5b      	ldrh	r3, [r3, #26]
 8011f86:	f043 0302 	orr.w	r3, r3, #2
 8011f8a:	b29a      	uxth	r2, r3
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011f90:	e187      	b.n	80122a2 <tcp_receive+0xed2>
        tcp_ack(pcb);
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	8b5b      	ldrh	r3, [r3, #26]
 8011f96:	f043 0301 	orr.w	r3, r3, #1
 8011f9a:	b29a      	uxth	r2, r3
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011fa0:	e17f      	b.n	80122a2 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	d106      	bne.n	8011fb8 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8011faa:	4848      	ldr	r0, [pc, #288]	@ (80120cc <tcp_receive+0xcfc>)
 8011fac:	f7fd fbbc 	bl	800f728 <tcp_seg_copy>
 8011fb0:	4602      	mov	r2, r0
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	675a      	str	r2, [r3, #116]	@ 0x74
 8011fb6:	e16c      	b.n	8012292 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8011fb8:	2300      	movs	r3, #0
 8011fba:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011fc0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011fc2:	e156      	b.n	8012272 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 8011fc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011fc6:	68db      	ldr	r3, [r3, #12]
 8011fc8:	685a      	ldr	r2, [r3, #4]
 8011fca:	4b41      	ldr	r3, [pc, #260]	@ (80120d0 <tcp_receive+0xd00>)
 8011fcc:	681b      	ldr	r3, [r3, #0]
 8011fce:	429a      	cmp	r2, r3
 8011fd0:	d11d      	bne.n	801200e <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8011fd2:	4b3e      	ldr	r3, [pc, #248]	@ (80120cc <tcp_receive+0xcfc>)
 8011fd4:	891a      	ldrh	r2, [r3, #8]
 8011fd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011fd8:	891b      	ldrh	r3, [r3, #8]
 8011fda:	429a      	cmp	r2, r3
 8011fdc:	f240 814e 	bls.w	801227c <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011fe0:	483a      	ldr	r0, [pc, #232]	@ (80120cc <tcp_receive+0xcfc>)
 8011fe2:	f7fd fba1 	bl	800f728 <tcp_seg_copy>
 8011fe6:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8011fe8:	697b      	ldr	r3, [r7, #20]
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	f000 8148 	beq.w	8012280 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 8011ff0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011ff2:	2b00      	cmp	r3, #0
 8011ff4:	d003      	beq.n	8011ffe <tcp_receive+0xc2e>
                    prev->next = cseg;
 8011ff6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011ff8:	697a      	ldr	r2, [r7, #20]
 8011ffa:	601a      	str	r2, [r3, #0]
 8011ffc:	e002      	b.n	8012004 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	697a      	ldr	r2, [r7, #20]
 8012002:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8012004:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8012006:	6978      	ldr	r0, [r7, #20]
 8012008:	f7ff f8de 	bl	80111c8 <tcp_oos_insert_segment>
                }
                break;
 801200c:	e138      	b.n	8012280 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801200e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012010:	2b00      	cmp	r3, #0
 8012012:	d117      	bne.n	8012044 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8012014:	4b2e      	ldr	r3, [pc, #184]	@ (80120d0 <tcp_receive+0xd00>)
 8012016:	681a      	ldr	r2, [r3, #0]
 8012018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801201a:	68db      	ldr	r3, [r3, #12]
 801201c:	685b      	ldr	r3, [r3, #4]
 801201e:	1ad3      	subs	r3, r2, r3
 8012020:	2b00      	cmp	r3, #0
 8012022:	da57      	bge.n	80120d4 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012024:	4829      	ldr	r0, [pc, #164]	@ (80120cc <tcp_receive+0xcfc>)
 8012026:	f7fd fb7f 	bl	800f728 <tcp_seg_copy>
 801202a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 801202c:	69bb      	ldr	r3, [r7, #24]
 801202e:	2b00      	cmp	r3, #0
 8012030:	f000 8128 	beq.w	8012284 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	69ba      	ldr	r2, [r7, #24]
 8012038:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 801203a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801203c:	69b8      	ldr	r0, [r7, #24]
 801203e:	f7ff f8c3 	bl	80111c8 <tcp_oos_insert_segment>
                  }
                  break;
 8012042:	e11f      	b.n	8012284 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8012044:	4b22      	ldr	r3, [pc, #136]	@ (80120d0 <tcp_receive+0xd00>)
 8012046:	681a      	ldr	r2, [r3, #0]
 8012048:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801204a:	68db      	ldr	r3, [r3, #12]
 801204c:	685b      	ldr	r3, [r3, #4]
 801204e:	1ad3      	subs	r3, r2, r3
 8012050:	3b01      	subs	r3, #1
 8012052:	2b00      	cmp	r3, #0
 8012054:	db3e      	blt.n	80120d4 <tcp_receive+0xd04>
 8012056:	4b1e      	ldr	r3, [pc, #120]	@ (80120d0 <tcp_receive+0xd00>)
 8012058:	681a      	ldr	r2, [r3, #0]
 801205a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801205c:	68db      	ldr	r3, [r3, #12]
 801205e:	685b      	ldr	r3, [r3, #4]
 8012060:	1ad3      	subs	r3, r2, r3
 8012062:	3301      	adds	r3, #1
 8012064:	2b00      	cmp	r3, #0
 8012066:	dc35      	bgt.n	80120d4 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012068:	4818      	ldr	r0, [pc, #96]	@ (80120cc <tcp_receive+0xcfc>)
 801206a:	f7fd fb5d 	bl	800f728 <tcp_seg_copy>
 801206e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8012070:	69fb      	ldr	r3, [r7, #28]
 8012072:	2b00      	cmp	r3, #0
 8012074:	f000 8108 	beq.w	8012288 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8012078:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801207a:	68db      	ldr	r3, [r3, #12]
 801207c:	685b      	ldr	r3, [r3, #4]
 801207e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012080:	8912      	ldrh	r2, [r2, #8]
 8012082:	441a      	add	r2, r3
 8012084:	4b12      	ldr	r3, [pc, #72]	@ (80120d0 <tcp_receive+0xd00>)
 8012086:	681b      	ldr	r3, [r3, #0]
 8012088:	1ad3      	subs	r3, r2, r3
 801208a:	2b00      	cmp	r3, #0
 801208c:	dd12      	ble.n	80120b4 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801208e:	4b10      	ldr	r3, [pc, #64]	@ (80120d0 <tcp_receive+0xd00>)
 8012090:	681b      	ldr	r3, [r3, #0]
 8012092:	b29a      	uxth	r2, r3
 8012094:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012096:	68db      	ldr	r3, [r3, #12]
 8012098:	685b      	ldr	r3, [r3, #4]
 801209a:	b29b      	uxth	r3, r3
 801209c:	1ad3      	subs	r3, r2, r3
 801209e:	b29a      	uxth	r2, r3
 80120a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80120a2:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80120a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80120a6:	685a      	ldr	r2, [r3, #4]
 80120a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80120aa:	891b      	ldrh	r3, [r3, #8]
 80120ac:	4619      	mov	r1, r3
 80120ae:	4610      	mov	r0, r2
 80120b0:	f7fb fdbc 	bl	800dc2c <pbuf_realloc>
                    }
                    prev->next = cseg;
 80120b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80120b6:	69fa      	ldr	r2, [r7, #28]
 80120b8:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80120ba:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80120bc:	69f8      	ldr	r0, [r7, #28]
 80120be:	f7ff f883 	bl	80111c8 <tcp_oos_insert_segment>
                  }
                  break;
 80120c2:	e0e1      	b.n	8012288 <tcp_receive+0xeb8>
 80120c4:	20015294 	.word	0x20015294
 80120c8:	20015291 	.word	0x20015291
 80120cc:	20015264 	.word	0x20015264
 80120d0:	20015284 	.word	0x20015284
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80120d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80120d6:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80120d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80120da:	681b      	ldr	r3, [r3, #0]
 80120dc:	2b00      	cmp	r3, #0
 80120de:	f040 80c5 	bne.w	801226c <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80120e2:	4b7f      	ldr	r3, [pc, #508]	@ (80122e0 <tcp_receive+0xf10>)
 80120e4:	681a      	ldr	r2, [r3, #0]
 80120e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80120e8:	68db      	ldr	r3, [r3, #12]
 80120ea:	685b      	ldr	r3, [r3, #4]
 80120ec:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	f340 80bc 	ble.w	801226c <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80120f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80120f6:	68db      	ldr	r3, [r3, #12]
 80120f8:	899b      	ldrh	r3, [r3, #12]
 80120fa:	b29b      	uxth	r3, r3
 80120fc:	4618      	mov	r0, r3
 80120fe:	f7fa f8f3 	bl	800c2e8 <lwip_htons>
 8012102:	4603      	mov	r3, r0
 8012104:	b2db      	uxtb	r3, r3
 8012106:	f003 0301 	and.w	r3, r3, #1
 801210a:	2b00      	cmp	r3, #0
 801210c:	f040 80be 	bne.w	801228c <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8012110:	4874      	ldr	r0, [pc, #464]	@ (80122e4 <tcp_receive+0xf14>)
 8012112:	f7fd fb09 	bl	800f728 <tcp_seg_copy>
 8012116:	4602      	mov	r2, r0
 8012118:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801211a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801211c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801211e:	681b      	ldr	r3, [r3, #0]
 8012120:	2b00      	cmp	r3, #0
 8012122:	f000 80b5 	beq.w	8012290 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8012126:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012128:	68db      	ldr	r3, [r3, #12]
 801212a:	685b      	ldr	r3, [r3, #4]
 801212c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801212e:	8912      	ldrh	r2, [r2, #8]
 8012130:	441a      	add	r2, r3
 8012132:	4b6b      	ldr	r3, [pc, #428]	@ (80122e0 <tcp_receive+0xf10>)
 8012134:	681b      	ldr	r3, [r3, #0]
 8012136:	1ad3      	subs	r3, r2, r3
 8012138:	2b00      	cmp	r3, #0
 801213a:	dd12      	ble.n	8012162 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801213c:	4b68      	ldr	r3, [pc, #416]	@ (80122e0 <tcp_receive+0xf10>)
 801213e:	681b      	ldr	r3, [r3, #0]
 8012140:	b29a      	uxth	r2, r3
 8012142:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012144:	68db      	ldr	r3, [r3, #12]
 8012146:	685b      	ldr	r3, [r3, #4]
 8012148:	b29b      	uxth	r3, r3
 801214a:	1ad3      	subs	r3, r2, r3
 801214c:	b29a      	uxth	r2, r3
 801214e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012150:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8012152:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012154:	685a      	ldr	r2, [r3, #4]
 8012156:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012158:	891b      	ldrh	r3, [r3, #8]
 801215a:	4619      	mov	r1, r3
 801215c:	4610      	mov	r0, r2
 801215e:	f7fb fd65 	bl	800dc2c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8012162:	4b61      	ldr	r3, [pc, #388]	@ (80122e8 <tcp_receive+0xf18>)
 8012164:	881b      	ldrh	r3, [r3, #0]
 8012166:	461a      	mov	r2, r3
 8012168:	4b5d      	ldr	r3, [pc, #372]	@ (80122e0 <tcp_receive+0xf10>)
 801216a:	681b      	ldr	r3, [r3, #0]
 801216c:	441a      	add	r2, r3
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012172:	6879      	ldr	r1, [r7, #4]
 8012174:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8012176:	440b      	add	r3, r1
 8012178:	1ad3      	subs	r3, r2, r3
 801217a:	2b00      	cmp	r3, #0
 801217c:	f340 8088 	ble.w	8012290 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8012180:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012182:	681b      	ldr	r3, [r3, #0]
 8012184:	68db      	ldr	r3, [r3, #12]
 8012186:	899b      	ldrh	r3, [r3, #12]
 8012188:	b29b      	uxth	r3, r3
 801218a:	4618      	mov	r0, r3
 801218c:	f7fa f8ac 	bl	800c2e8 <lwip_htons>
 8012190:	4603      	mov	r3, r0
 8012192:	b2db      	uxtb	r3, r3
 8012194:	f003 0301 	and.w	r3, r3, #1
 8012198:	2b00      	cmp	r3, #0
 801219a:	d021      	beq.n	80121e0 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801219c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801219e:	681b      	ldr	r3, [r3, #0]
 80121a0:	68db      	ldr	r3, [r3, #12]
 80121a2:	899b      	ldrh	r3, [r3, #12]
 80121a4:	b29b      	uxth	r3, r3
 80121a6:	b21b      	sxth	r3, r3
 80121a8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80121ac:	b21c      	sxth	r4, r3
 80121ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80121b0:	681b      	ldr	r3, [r3, #0]
 80121b2:	68db      	ldr	r3, [r3, #12]
 80121b4:	899b      	ldrh	r3, [r3, #12]
 80121b6:	b29b      	uxth	r3, r3
 80121b8:	4618      	mov	r0, r3
 80121ba:	f7fa f895 	bl	800c2e8 <lwip_htons>
 80121be:	4603      	mov	r3, r0
 80121c0:	b2db      	uxtb	r3, r3
 80121c2:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80121c6:	b29b      	uxth	r3, r3
 80121c8:	4618      	mov	r0, r3
 80121ca:	f7fa f88d 	bl	800c2e8 <lwip_htons>
 80121ce:	4603      	mov	r3, r0
 80121d0:	b21b      	sxth	r3, r3
 80121d2:	4323      	orrs	r3, r4
 80121d4:	b21a      	sxth	r2, r3
 80121d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80121d8:	681b      	ldr	r3, [r3, #0]
 80121da:	68db      	ldr	r3, [r3, #12]
 80121dc:	b292      	uxth	r2, r2
 80121de:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80121e4:	b29a      	uxth	r2, r3
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80121ea:	4413      	add	r3, r2
 80121ec:	b299      	uxth	r1, r3
 80121ee:	4b3c      	ldr	r3, [pc, #240]	@ (80122e0 <tcp_receive+0xf10>)
 80121f0:	681b      	ldr	r3, [r3, #0]
 80121f2:	b29a      	uxth	r2, r3
 80121f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80121f6:	681b      	ldr	r3, [r3, #0]
 80121f8:	1a8a      	subs	r2, r1, r2
 80121fa:	b292      	uxth	r2, r2
 80121fc:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80121fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012200:	681b      	ldr	r3, [r3, #0]
 8012202:	685a      	ldr	r2, [r3, #4]
 8012204:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012206:	681b      	ldr	r3, [r3, #0]
 8012208:	891b      	ldrh	r3, [r3, #8]
 801220a:	4619      	mov	r1, r3
 801220c:	4610      	mov	r0, r2
 801220e:	f7fb fd0d 	bl	800dc2c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8012212:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012214:	681b      	ldr	r3, [r3, #0]
 8012216:	891c      	ldrh	r4, [r3, #8]
 8012218:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801221a:	681b      	ldr	r3, [r3, #0]
 801221c:	68db      	ldr	r3, [r3, #12]
 801221e:	899b      	ldrh	r3, [r3, #12]
 8012220:	b29b      	uxth	r3, r3
 8012222:	4618      	mov	r0, r3
 8012224:	f7fa f860 	bl	800c2e8 <lwip_htons>
 8012228:	4603      	mov	r3, r0
 801222a:	b2db      	uxtb	r3, r3
 801222c:	f003 0303 	and.w	r3, r3, #3
 8012230:	2b00      	cmp	r3, #0
 8012232:	d001      	beq.n	8012238 <tcp_receive+0xe68>
 8012234:	2301      	movs	r3, #1
 8012236:	e000      	b.n	801223a <tcp_receive+0xe6a>
 8012238:	2300      	movs	r3, #0
 801223a:	4423      	add	r3, r4
 801223c:	b29a      	uxth	r2, r3
 801223e:	4b2a      	ldr	r3, [pc, #168]	@ (80122e8 <tcp_receive+0xf18>)
 8012240:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8012242:	4b29      	ldr	r3, [pc, #164]	@ (80122e8 <tcp_receive+0xf18>)
 8012244:	881b      	ldrh	r3, [r3, #0]
 8012246:	461a      	mov	r2, r3
 8012248:	4b25      	ldr	r3, [pc, #148]	@ (80122e0 <tcp_receive+0xf10>)
 801224a:	681b      	ldr	r3, [r3, #0]
 801224c:	441a      	add	r2, r3
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012252:	6879      	ldr	r1, [r7, #4]
 8012254:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8012256:	440b      	add	r3, r1
 8012258:	429a      	cmp	r2, r3
 801225a:	d019      	beq.n	8012290 <tcp_receive+0xec0>
 801225c:	4b23      	ldr	r3, [pc, #140]	@ (80122ec <tcp_receive+0xf1c>)
 801225e:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 8012262:	4923      	ldr	r1, [pc, #140]	@ (80122f0 <tcp_receive+0xf20>)
 8012264:	4823      	ldr	r0, [pc, #140]	@ (80122f4 <tcp_receive+0xf24>)
 8012266:	f005 fcb1 	bl	8017bcc <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801226a:	e011      	b.n	8012290 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801226c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801226e:	681b      	ldr	r3, [r3, #0]
 8012270:	63bb      	str	r3, [r7, #56]	@ 0x38
 8012272:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012274:	2b00      	cmp	r3, #0
 8012276:	f47f aea5 	bne.w	8011fc4 <tcp_receive+0xbf4>
 801227a:	e00a      	b.n	8012292 <tcp_receive+0xec2>
                break;
 801227c:	bf00      	nop
 801227e:	e008      	b.n	8012292 <tcp_receive+0xec2>
                break;
 8012280:	bf00      	nop
 8012282:	e006      	b.n	8012292 <tcp_receive+0xec2>
                  break;
 8012284:	bf00      	nop
 8012286:	e004      	b.n	8012292 <tcp_receive+0xec2>
                  break;
 8012288:	bf00      	nop
 801228a:	e002      	b.n	8012292 <tcp_receive+0xec2>
                  break;
 801228c:	bf00      	nop
 801228e:	e000      	b.n	8012292 <tcp_receive+0xec2>
                break;
 8012290:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8012292:	6878      	ldr	r0, [r7, #4]
 8012294:	f001 fa30 	bl	80136f8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8012298:	e003      	b.n	80122a2 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801229a:	6878      	ldr	r0, [r7, #4]
 801229c:	f001 fa2c 	bl	80136f8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80122a0:	e01a      	b.n	80122d8 <tcp_receive+0xf08>
 80122a2:	e019      	b.n	80122d8 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80122a4:	4b0e      	ldr	r3, [pc, #56]	@ (80122e0 <tcp_receive+0xf10>)
 80122a6:	681a      	ldr	r2, [r3, #0]
 80122a8:	687b      	ldr	r3, [r7, #4]
 80122aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80122ac:	1ad3      	subs	r3, r2, r3
 80122ae:	2b00      	cmp	r3, #0
 80122b0:	db0a      	blt.n	80122c8 <tcp_receive+0xef8>
 80122b2:	4b0b      	ldr	r3, [pc, #44]	@ (80122e0 <tcp_receive+0xf10>)
 80122b4:	681a      	ldr	r2, [r3, #0]
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80122ba:	6879      	ldr	r1, [r7, #4]
 80122bc:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80122be:	440b      	add	r3, r1
 80122c0:	1ad3      	subs	r3, r2, r3
 80122c2:	3301      	adds	r3, #1
 80122c4:	2b00      	cmp	r3, #0
 80122c6:	dd07      	ble.n	80122d8 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	8b5b      	ldrh	r3, [r3, #26]
 80122cc:	f043 0302 	orr.w	r3, r3, #2
 80122d0:	b29a      	uxth	r2, r3
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80122d6:	e7ff      	b.n	80122d8 <tcp_receive+0xf08>
 80122d8:	bf00      	nop
 80122da:	3750      	adds	r7, #80	@ 0x50
 80122dc:	46bd      	mov	sp, r7
 80122de:	bdb0      	pop	{r4, r5, r7, pc}
 80122e0:	20015284 	.word	0x20015284
 80122e4:	20015264 	.word	0x20015264
 80122e8:	2001528e 	.word	0x2001528e
 80122ec:	08021b44 	.word	0x08021b44
 80122f0:	08021eec 	.word	0x08021eec
 80122f4:	08021b90 	.word	0x08021b90

080122f8 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80122f8:	b480      	push	{r7}
 80122fa:	b083      	sub	sp, #12
 80122fc:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80122fe:	4b15      	ldr	r3, [pc, #84]	@ (8012354 <tcp_get_next_optbyte+0x5c>)
 8012300:	881b      	ldrh	r3, [r3, #0]
 8012302:	1c5a      	adds	r2, r3, #1
 8012304:	b291      	uxth	r1, r2
 8012306:	4a13      	ldr	r2, [pc, #76]	@ (8012354 <tcp_get_next_optbyte+0x5c>)
 8012308:	8011      	strh	r1, [r2, #0]
 801230a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801230c:	4b12      	ldr	r3, [pc, #72]	@ (8012358 <tcp_get_next_optbyte+0x60>)
 801230e:	681b      	ldr	r3, [r3, #0]
 8012310:	2b00      	cmp	r3, #0
 8012312:	d004      	beq.n	801231e <tcp_get_next_optbyte+0x26>
 8012314:	4b11      	ldr	r3, [pc, #68]	@ (801235c <tcp_get_next_optbyte+0x64>)
 8012316:	881b      	ldrh	r3, [r3, #0]
 8012318:	88fa      	ldrh	r2, [r7, #6]
 801231a:	429a      	cmp	r2, r3
 801231c:	d208      	bcs.n	8012330 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801231e:	4b10      	ldr	r3, [pc, #64]	@ (8012360 <tcp_get_next_optbyte+0x68>)
 8012320:	681b      	ldr	r3, [r3, #0]
 8012322:	3314      	adds	r3, #20
 8012324:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8012326:	88fb      	ldrh	r3, [r7, #6]
 8012328:	683a      	ldr	r2, [r7, #0]
 801232a:	4413      	add	r3, r2
 801232c:	781b      	ldrb	r3, [r3, #0]
 801232e:	e00b      	b.n	8012348 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8012330:	88fb      	ldrh	r3, [r7, #6]
 8012332:	b2da      	uxtb	r2, r3
 8012334:	4b09      	ldr	r3, [pc, #36]	@ (801235c <tcp_get_next_optbyte+0x64>)
 8012336:	881b      	ldrh	r3, [r3, #0]
 8012338:	b2db      	uxtb	r3, r3
 801233a:	1ad3      	subs	r3, r2, r3
 801233c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801233e:	4b06      	ldr	r3, [pc, #24]	@ (8012358 <tcp_get_next_optbyte+0x60>)
 8012340:	681a      	ldr	r2, [r3, #0]
 8012342:	797b      	ldrb	r3, [r7, #5]
 8012344:	4413      	add	r3, r2
 8012346:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012348:	4618      	mov	r0, r3
 801234a:	370c      	adds	r7, #12
 801234c:	46bd      	mov	sp, r7
 801234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012352:	4770      	bx	lr
 8012354:	20015280 	.word	0x20015280
 8012358:	2001527c 	.word	0x2001527c
 801235c:	2001527a 	.word	0x2001527a
 8012360:	20015274 	.word	0x20015274

08012364 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8012364:	b580      	push	{r7, lr}
 8012366:	b084      	sub	sp, #16
 8012368:	af00      	add	r7, sp, #0
 801236a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	2b00      	cmp	r3, #0
 8012370:	d106      	bne.n	8012380 <tcp_parseopt+0x1c>
 8012372:	4b32      	ldr	r3, [pc, #200]	@ (801243c <tcp_parseopt+0xd8>)
 8012374:	f240 727d 	movw	r2, #1917	@ 0x77d
 8012378:	4931      	ldr	r1, [pc, #196]	@ (8012440 <tcp_parseopt+0xdc>)
 801237a:	4832      	ldr	r0, [pc, #200]	@ (8012444 <tcp_parseopt+0xe0>)
 801237c:	f005 fc26 	bl	8017bcc <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8012380:	4b31      	ldr	r3, [pc, #196]	@ (8012448 <tcp_parseopt+0xe4>)
 8012382:	881b      	ldrh	r3, [r3, #0]
 8012384:	2b00      	cmp	r3, #0
 8012386:	d056      	beq.n	8012436 <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8012388:	4b30      	ldr	r3, [pc, #192]	@ (801244c <tcp_parseopt+0xe8>)
 801238a:	2200      	movs	r2, #0
 801238c:	801a      	strh	r2, [r3, #0]
 801238e:	e046      	b.n	801241e <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8012390:	f7ff ffb2 	bl	80122f8 <tcp_get_next_optbyte>
 8012394:	4603      	mov	r3, r0
 8012396:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8012398:	7bfb      	ldrb	r3, [r7, #15]
 801239a:	2b02      	cmp	r3, #2
 801239c:	d006      	beq.n	80123ac <tcp_parseopt+0x48>
 801239e:	2b02      	cmp	r3, #2
 80123a0:	dc2a      	bgt.n	80123f8 <tcp_parseopt+0x94>
 80123a2:	2b00      	cmp	r3, #0
 80123a4:	d042      	beq.n	801242c <tcp_parseopt+0xc8>
 80123a6:	2b01      	cmp	r3, #1
 80123a8:	d038      	beq.n	801241c <tcp_parseopt+0xb8>
 80123aa:	e025      	b.n	80123f8 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80123ac:	f7ff ffa4 	bl	80122f8 <tcp_get_next_optbyte>
 80123b0:	4603      	mov	r3, r0
 80123b2:	2b04      	cmp	r3, #4
 80123b4:	d13c      	bne.n	8012430 <tcp_parseopt+0xcc>
 80123b6:	4b25      	ldr	r3, [pc, #148]	@ (801244c <tcp_parseopt+0xe8>)
 80123b8:	881b      	ldrh	r3, [r3, #0]
 80123ba:	3301      	adds	r3, #1
 80123bc:	4a22      	ldr	r2, [pc, #136]	@ (8012448 <tcp_parseopt+0xe4>)
 80123be:	8812      	ldrh	r2, [r2, #0]
 80123c0:	4293      	cmp	r3, r2
 80123c2:	da35      	bge.n	8012430 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80123c4:	f7ff ff98 	bl	80122f8 <tcp_get_next_optbyte>
 80123c8:	4603      	mov	r3, r0
 80123ca:	021b      	lsls	r3, r3, #8
 80123cc:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80123ce:	f7ff ff93 	bl	80122f8 <tcp_get_next_optbyte>
 80123d2:	4603      	mov	r3, r0
 80123d4:	461a      	mov	r2, r3
 80123d6:	89bb      	ldrh	r3, [r7, #12]
 80123d8:	4313      	orrs	r3, r2
 80123da:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80123dc:	89bb      	ldrh	r3, [r7, #12]
 80123de:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 80123e2:	d804      	bhi.n	80123ee <tcp_parseopt+0x8a>
 80123e4:	89bb      	ldrh	r3, [r7, #12]
 80123e6:	2b00      	cmp	r3, #0
 80123e8:	d001      	beq.n	80123ee <tcp_parseopt+0x8a>
 80123ea:	89ba      	ldrh	r2, [r7, #12]
 80123ec:	e001      	b.n	80123f2 <tcp_parseopt+0x8e>
 80123ee:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 80123f6:	e012      	b.n	801241e <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80123f8:	f7ff ff7e 	bl	80122f8 <tcp_get_next_optbyte>
 80123fc:	4603      	mov	r3, r0
 80123fe:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8012400:	7afb      	ldrb	r3, [r7, #11]
 8012402:	2b01      	cmp	r3, #1
 8012404:	d916      	bls.n	8012434 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8012406:	7afb      	ldrb	r3, [r7, #11]
 8012408:	b29a      	uxth	r2, r3
 801240a:	4b10      	ldr	r3, [pc, #64]	@ (801244c <tcp_parseopt+0xe8>)
 801240c:	881b      	ldrh	r3, [r3, #0]
 801240e:	4413      	add	r3, r2
 8012410:	b29b      	uxth	r3, r3
 8012412:	3b02      	subs	r3, #2
 8012414:	b29a      	uxth	r2, r3
 8012416:	4b0d      	ldr	r3, [pc, #52]	@ (801244c <tcp_parseopt+0xe8>)
 8012418:	801a      	strh	r2, [r3, #0]
 801241a:	e000      	b.n	801241e <tcp_parseopt+0xba>
          break;
 801241c:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801241e:	4b0b      	ldr	r3, [pc, #44]	@ (801244c <tcp_parseopt+0xe8>)
 8012420:	881a      	ldrh	r2, [r3, #0]
 8012422:	4b09      	ldr	r3, [pc, #36]	@ (8012448 <tcp_parseopt+0xe4>)
 8012424:	881b      	ldrh	r3, [r3, #0]
 8012426:	429a      	cmp	r2, r3
 8012428:	d3b2      	bcc.n	8012390 <tcp_parseopt+0x2c>
 801242a:	e004      	b.n	8012436 <tcp_parseopt+0xd2>
          return;
 801242c:	bf00      	nop
 801242e:	e002      	b.n	8012436 <tcp_parseopt+0xd2>
            return;
 8012430:	bf00      	nop
 8012432:	e000      	b.n	8012436 <tcp_parseopt+0xd2>
            return;
 8012434:	bf00      	nop
      }
    }
  }
}
 8012436:	3710      	adds	r7, #16
 8012438:	46bd      	mov	sp, r7
 801243a:	bd80      	pop	{r7, pc}
 801243c:	08021b44 	.word	0x08021b44
 8012440:	08021fa8 	.word	0x08021fa8
 8012444:	08021b90 	.word	0x08021b90
 8012448:	20015278 	.word	0x20015278
 801244c:	20015280 	.word	0x20015280

08012450 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8012450:	b480      	push	{r7}
 8012452:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8012454:	4b05      	ldr	r3, [pc, #20]	@ (801246c <tcp_trigger_input_pcb_close+0x1c>)
 8012456:	781b      	ldrb	r3, [r3, #0]
 8012458:	f043 0310 	orr.w	r3, r3, #16
 801245c:	b2da      	uxtb	r2, r3
 801245e:	4b03      	ldr	r3, [pc, #12]	@ (801246c <tcp_trigger_input_pcb_close+0x1c>)
 8012460:	701a      	strb	r2, [r3, #0]
}
 8012462:	bf00      	nop
 8012464:	46bd      	mov	sp, r7
 8012466:	f85d 7b04 	ldr.w	r7, [sp], #4
 801246a:	4770      	bx	lr
 801246c:	20015291 	.word	0x20015291

08012470 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8012470:	b580      	push	{r7, lr}
 8012472:	b084      	sub	sp, #16
 8012474:	af00      	add	r7, sp, #0
 8012476:	60f8      	str	r0, [r7, #12]
 8012478:	60b9      	str	r1, [r7, #8]
 801247a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801247c:	68fb      	ldr	r3, [r7, #12]
 801247e:	2b00      	cmp	r3, #0
 8012480:	d00a      	beq.n	8012498 <tcp_route+0x28>
 8012482:	68fb      	ldr	r3, [r7, #12]
 8012484:	7a1b      	ldrb	r3, [r3, #8]
 8012486:	2b00      	cmp	r3, #0
 8012488:	d006      	beq.n	8012498 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801248a:	68fb      	ldr	r3, [r7, #12]
 801248c:	7a1b      	ldrb	r3, [r3, #8]
 801248e:	4618      	mov	r0, r3
 8012490:	f7fb f9f2 	bl	800d878 <netif_get_by_index>
 8012494:	4603      	mov	r3, r0
 8012496:	e003      	b.n	80124a0 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8012498:	6878      	ldr	r0, [r7, #4]
 801249a:	f003 fa0d 	bl	80158b8 <ip4_route>
 801249e:	4603      	mov	r3, r0
  }
}
 80124a0:	4618      	mov	r0, r3
 80124a2:	3710      	adds	r7, #16
 80124a4:	46bd      	mov	sp, r7
 80124a6:	bd80      	pop	{r7, pc}

080124a8 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80124a8:	b590      	push	{r4, r7, lr}
 80124aa:	b087      	sub	sp, #28
 80124ac:	af00      	add	r7, sp, #0
 80124ae:	60f8      	str	r0, [r7, #12]
 80124b0:	60b9      	str	r1, [r7, #8]
 80124b2:	603b      	str	r3, [r7, #0]
 80124b4:	4613      	mov	r3, r2
 80124b6:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80124b8:	68fb      	ldr	r3, [r7, #12]
 80124ba:	2b00      	cmp	r3, #0
 80124bc:	d105      	bne.n	80124ca <tcp_create_segment+0x22>
 80124be:	4b43      	ldr	r3, [pc, #268]	@ (80125cc <tcp_create_segment+0x124>)
 80124c0:	22a3      	movs	r2, #163	@ 0xa3
 80124c2:	4943      	ldr	r1, [pc, #268]	@ (80125d0 <tcp_create_segment+0x128>)
 80124c4:	4843      	ldr	r0, [pc, #268]	@ (80125d4 <tcp_create_segment+0x12c>)
 80124c6:	f005 fb81 	bl	8017bcc <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80124ca:	68bb      	ldr	r3, [r7, #8]
 80124cc:	2b00      	cmp	r3, #0
 80124ce:	d105      	bne.n	80124dc <tcp_create_segment+0x34>
 80124d0:	4b3e      	ldr	r3, [pc, #248]	@ (80125cc <tcp_create_segment+0x124>)
 80124d2:	22a4      	movs	r2, #164	@ 0xa4
 80124d4:	4940      	ldr	r1, [pc, #256]	@ (80125d8 <tcp_create_segment+0x130>)
 80124d6:	483f      	ldr	r0, [pc, #252]	@ (80125d4 <tcp_create_segment+0x12c>)
 80124d8:	f005 fb78 	bl	8017bcc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80124dc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80124e0:	009b      	lsls	r3, r3, #2
 80124e2:	b2db      	uxtb	r3, r3
 80124e4:	f003 0304 	and.w	r3, r3, #4
 80124e8:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80124ea:	2003      	movs	r0, #3
 80124ec:	f7fa fe3e 	bl	800d16c <memp_malloc>
 80124f0:	6138      	str	r0, [r7, #16]
 80124f2:	693b      	ldr	r3, [r7, #16]
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	d104      	bne.n	8012502 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80124f8:	68b8      	ldr	r0, [r7, #8]
 80124fa:	f7fb fd1d 	bl	800df38 <pbuf_free>
    return NULL;
 80124fe:	2300      	movs	r3, #0
 8012500:	e060      	b.n	80125c4 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 8012502:	693b      	ldr	r3, [r7, #16]
 8012504:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8012508:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801250a:	693b      	ldr	r3, [r7, #16]
 801250c:	2200      	movs	r2, #0
 801250e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8012510:	693b      	ldr	r3, [r7, #16]
 8012512:	68ba      	ldr	r2, [r7, #8]
 8012514:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8012516:	68bb      	ldr	r3, [r7, #8]
 8012518:	891a      	ldrh	r2, [r3, #8]
 801251a:	7dfb      	ldrb	r3, [r7, #23]
 801251c:	b29b      	uxth	r3, r3
 801251e:	429a      	cmp	r2, r3
 8012520:	d205      	bcs.n	801252e <tcp_create_segment+0x86>
 8012522:	4b2a      	ldr	r3, [pc, #168]	@ (80125cc <tcp_create_segment+0x124>)
 8012524:	22b0      	movs	r2, #176	@ 0xb0
 8012526:	492d      	ldr	r1, [pc, #180]	@ (80125dc <tcp_create_segment+0x134>)
 8012528:	482a      	ldr	r0, [pc, #168]	@ (80125d4 <tcp_create_segment+0x12c>)
 801252a:	f005 fb4f 	bl	8017bcc <iprintf>
  seg->len = p->tot_len - optlen;
 801252e:	68bb      	ldr	r3, [r7, #8]
 8012530:	891a      	ldrh	r2, [r3, #8]
 8012532:	7dfb      	ldrb	r3, [r7, #23]
 8012534:	b29b      	uxth	r3, r3
 8012536:	1ad3      	subs	r3, r2, r3
 8012538:	b29a      	uxth	r2, r3
 801253a:	693b      	ldr	r3, [r7, #16]
 801253c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801253e:	2114      	movs	r1, #20
 8012540:	68b8      	ldr	r0, [r7, #8]
 8012542:	f7fb fc63 	bl	800de0c <pbuf_add_header>
 8012546:	4603      	mov	r3, r0
 8012548:	2b00      	cmp	r3, #0
 801254a:	d004      	beq.n	8012556 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 801254c:	6938      	ldr	r0, [r7, #16]
 801254e:	f7fd f8d2 	bl	800f6f6 <tcp_seg_free>
    return NULL;
 8012552:	2300      	movs	r3, #0
 8012554:	e036      	b.n	80125c4 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8012556:	693b      	ldr	r3, [r7, #16]
 8012558:	685b      	ldr	r3, [r3, #4]
 801255a:	685a      	ldr	r2, [r3, #4]
 801255c:	693b      	ldr	r3, [r7, #16]
 801255e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8012560:	68fb      	ldr	r3, [r7, #12]
 8012562:	8ada      	ldrh	r2, [r3, #22]
 8012564:	693b      	ldr	r3, [r7, #16]
 8012566:	68dc      	ldr	r4, [r3, #12]
 8012568:	4610      	mov	r0, r2
 801256a:	f7f9 febd 	bl	800c2e8 <lwip_htons>
 801256e:	4603      	mov	r3, r0
 8012570:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8012572:	68fb      	ldr	r3, [r7, #12]
 8012574:	8b1a      	ldrh	r2, [r3, #24]
 8012576:	693b      	ldr	r3, [r7, #16]
 8012578:	68dc      	ldr	r4, [r3, #12]
 801257a:	4610      	mov	r0, r2
 801257c:	f7f9 feb4 	bl	800c2e8 <lwip_htons>
 8012580:	4603      	mov	r3, r0
 8012582:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8012584:	693b      	ldr	r3, [r7, #16]
 8012586:	68dc      	ldr	r4, [r3, #12]
 8012588:	6838      	ldr	r0, [r7, #0]
 801258a:	f7f9 fec3 	bl	800c314 <lwip_htonl>
 801258e:	4603      	mov	r3, r0
 8012590:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8012592:	7dfb      	ldrb	r3, [r7, #23]
 8012594:	089b      	lsrs	r3, r3, #2
 8012596:	b2db      	uxtb	r3, r3
 8012598:	3305      	adds	r3, #5
 801259a:	b29b      	uxth	r3, r3
 801259c:	031b      	lsls	r3, r3, #12
 801259e:	b29a      	uxth	r2, r3
 80125a0:	79fb      	ldrb	r3, [r7, #7]
 80125a2:	b29b      	uxth	r3, r3
 80125a4:	4313      	orrs	r3, r2
 80125a6:	b29a      	uxth	r2, r3
 80125a8:	693b      	ldr	r3, [r7, #16]
 80125aa:	68dc      	ldr	r4, [r3, #12]
 80125ac:	4610      	mov	r0, r2
 80125ae:	f7f9 fe9b 	bl	800c2e8 <lwip_htons>
 80125b2:	4603      	mov	r3, r0
 80125b4:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80125b6:	693b      	ldr	r3, [r7, #16]
 80125b8:	68db      	ldr	r3, [r3, #12]
 80125ba:	2200      	movs	r2, #0
 80125bc:	749a      	strb	r2, [r3, #18]
 80125be:	2200      	movs	r2, #0
 80125c0:	74da      	strb	r2, [r3, #19]
  return seg;
 80125c2:	693b      	ldr	r3, [r7, #16]
}
 80125c4:	4618      	mov	r0, r3
 80125c6:	371c      	adds	r7, #28
 80125c8:	46bd      	mov	sp, r7
 80125ca:	bd90      	pop	{r4, r7, pc}
 80125cc:	08021fc4 	.word	0x08021fc4
 80125d0:	08021ff8 	.word	0x08021ff8
 80125d4:	08022018 	.word	0x08022018
 80125d8:	08022040 	.word	0x08022040
 80125dc:	08022064 	.word	0x08022064

080125e0 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80125e0:	b590      	push	{r4, r7, lr}
 80125e2:	b08b      	sub	sp, #44	@ 0x2c
 80125e4:	af02      	add	r7, sp, #8
 80125e6:	6078      	str	r0, [r7, #4]
 80125e8:	460b      	mov	r3, r1
 80125ea:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80125ec:	2300      	movs	r3, #0
 80125ee:	61fb      	str	r3, [r7, #28]
 80125f0:	2300      	movs	r3, #0
 80125f2:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80125f4:	2300      	movs	r3, #0
 80125f6:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	2b00      	cmp	r3, #0
 80125fc:	d106      	bne.n	801260c <tcp_split_unsent_seg+0x2c>
 80125fe:	4b95      	ldr	r3, [pc, #596]	@ (8012854 <tcp_split_unsent_seg+0x274>)
 8012600:	f240 324b 	movw	r2, #843	@ 0x34b
 8012604:	4994      	ldr	r1, [pc, #592]	@ (8012858 <tcp_split_unsent_seg+0x278>)
 8012606:	4895      	ldr	r0, [pc, #596]	@ (801285c <tcp_split_unsent_seg+0x27c>)
 8012608:	f005 fae0 	bl	8017bcc <iprintf>

  useg = pcb->unsent;
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012610:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8012612:	697b      	ldr	r3, [r7, #20]
 8012614:	2b00      	cmp	r3, #0
 8012616:	d102      	bne.n	801261e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8012618:	f04f 33ff 	mov.w	r3, #4294967295
 801261c:	e116      	b.n	801284c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801261e:	887b      	ldrh	r3, [r7, #2]
 8012620:	2b00      	cmp	r3, #0
 8012622:	d109      	bne.n	8012638 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8012624:	4b8b      	ldr	r3, [pc, #556]	@ (8012854 <tcp_split_unsent_seg+0x274>)
 8012626:	f240 3253 	movw	r2, #851	@ 0x353
 801262a:	498d      	ldr	r1, [pc, #564]	@ (8012860 <tcp_split_unsent_seg+0x280>)
 801262c:	488b      	ldr	r0, [pc, #556]	@ (801285c <tcp_split_unsent_seg+0x27c>)
 801262e:	f005 facd 	bl	8017bcc <iprintf>
    return ERR_VAL;
 8012632:	f06f 0305 	mvn.w	r3, #5
 8012636:	e109      	b.n	801284c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8012638:	697b      	ldr	r3, [r7, #20]
 801263a:	891b      	ldrh	r3, [r3, #8]
 801263c:	887a      	ldrh	r2, [r7, #2]
 801263e:	429a      	cmp	r2, r3
 8012640:	d301      	bcc.n	8012646 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8012642:	2300      	movs	r3, #0
 8012644:	e102      	b.n	801284c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801264a:	887a      	ldrh	r2, [r7, #2]
 801264c:	429a      	cmp	r2, r3
 801264e:	d906      	bls.n	801265e <tcp_split_unsent_seg+0x7e>
 8012650:	4b80      	ldr	r3, [pc, #512]	@ (8012854 <tcp_split_unsent_seg+0x274>)
 8012652:	f240 325b 	movw	r2, #859	@ 0x35b
 8012656:	4983      	ldr	r1, [pc, #524]	@ (8012864 <tcp_split_unsent_seg+0x284>)
 8012658:	4880      	ldr	r0, [pc, #512]	@ (801285c <tcp_split_unsent_seg+0x27c>)
 801265a:	f005 fab7 	bl	8017bcc <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801265e:	697b      	ldr	r3, [r7, #20]
 8012660:	891b      	ldrh	r3, [r3, #8]
 8012662:	2b00      	cmp	r3, #0
 8012664:	d106      	bne.n	8012674 <tcp_split_unsent_seg+0x94>
 8012666:	4b7b      	ldr	r3, [pc, #492]	@ (8012854 <tcp_split_unsent_seg+0x274>)
 8012668:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 801266c:	497e      	ldr	r1, [pc, #504]	@ (8012868 <tcp_split_unsent_seg+0x288>)
 801266e:	487b      	ldr	r0, [pc, #492]	@ (801285c <tcp_split_unsent_seg+0x27c>)
 8012670:	f005 faac 	bl	8017bcc <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8012674:	697b      	ldr	r3, [r7, #20]
 8012676:	7a9b      	ldrb	r3, [r3, #10]
 8012678:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801267a:	7bfb      	ldrb	r3, [r7, #15]
 801267c:	009b      	lsls	r3, r3, #2
 801267e:	b2db      	uxtb	r3, r3
 8012680:	f003 0304 	and.w	r3, r3, #4
 8012684:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8012686:	697b      	ldr	r3, [r7, #20]
 8012688:	891a      	ldrh	r2, [r3, #8]
 801268a:	887b      	ldrh	r3, [r7, #2]
 801268c:	1ad3      	subs	r3, r2, r3
 801268e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8012690:	7bbb      	ldrb	r3, [r7, #14]
 8012692:	b29a      	uxth	r2, r3
 8012694:	89bb      	ldrh	r3, [r7, #12]
 8012696:	4413      	add	r3, r2
 8012698:	b29b      	uxth	r3, r3
 801269a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801269e:	4619      	mov	r1, r3
 80126a0:	2036      	movs	r0, #54	@ 0x36
 80126a2:	f7fb f965 	bl	800d970 <pbuf_alloc>
 80126a6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80126a8:	693b      	ldr	r3, [r7, #16]
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	f000 80b7 	beq.w	801281e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80126b0:	697b      	ldr	r3, [r7, #20]
 80126b2:	685b      	ldr	r3, [r3, #4]
 80126b4:	891a      	ldrh	r2, [r3, #8]
 80126b6:	697b      	ldr	r3, [r7, #20]
 80126b8:	891b      	ldrh	r3, [r3, #8]
 80126ba:	1ad3      	subs	r3, r2, r3
 80126bc:	b29a      	uxth	r2, r3
 80126be:	887b      	ldrh	r3, [r7, #2]
 80126c0:	4413      	add	r3, r2
 80126c2:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80126c4:	697b      	ldr	r3, [r7, #20]
 80126c6:	6858      	ldr	r0, [r3, #4]
 80126c8:	693b      	ldr	r3, [r7, #16]
 80126ca:	685a      	ldr	r2, [r3, #4]
 80126cc:	7bbb      	ldrb	r3, [r7, #14]
 80126ce:	18d1      	adds	r1, r2, r3
 80126d0:	897b      	ldrh	r3, [r7, #10]
 80126d2:	89ba      	ldrh	r2, [r7, #12]
 80126d4:	f7fb fe2a 	bl	800e32c <pbuf_copy_partial>
 80126d8:	4603      	mov	r3, r0
 80126da:	461a      	mov	r2, r3
 80126dc:	89bb      	ldrh	r3, [r7, #12]
 80126de:	4293      	cmp	r3, r2
 80126e0:	f040 809f 	bne.w	8012822 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80126e4:	697b      	ldr	r3, [r7, #20]
 80126e6:	68db      	ldr	r3, [r3, #12]
 80126e8:	899b      	ldrh	r3, [r3, #12]
 80126ea:	b29b      	uxth	r3, r3
 80126ec:	4618      	mov	r0, r3
 80126ee:	f7f9 fdfb 	bl	800c2e8 <lwip_htons>
 80126f2:	4603      	mov	r3, r0
 80126f4:	b2db      	uxtb	r3, r3
 80126f6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80126fa:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80126fc:	2300      	movs	r3, #0
 80126fe:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8012700:	7efb      	ldrb	r3, [r7, #27]
 8012702:	f003 0308 	and.w	r3, r3, #8
 8012706:	2b00      	cmp	r3, #0
 8012708:	d007      	beq.n	801271a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801270a:	7efb      	ldrb	r3, [r7, #27]
 801270c:	f023 0308 	bic.w	r3, r3, #8
 8012710:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8012712:	7ebb      	ldrb	r3, [r7, #26]
 8012714:	f043 0308 	orr.w	r3, r3, #8
 8012718:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801271a:	7efb      	ldrb	r3, [r7, #27]
 801271c:	f003 0301 	and.w	r3, r3, #1
 8012720:	2b00      	cmp	r3, #0
 8012722:	d007      	beq.n	8012734 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8012724:	7efb      	ldrb	r3, [r7, #27]
 8012726:	f023 0301 	bic.w	r3, r3, #1
 801272a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801272c:	7ebb      	ldrb	r3, [r7, #26]
 801272e:	f043 0301 	orr.w	r3, r3, #1
 8012732:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8012734:	697b      	ldr	r3, [r7, #20]
 8012736:	68db      	ldr	r3, [r3, #12]
 8012738:	685b      	ldr	r3, [r3, #4]
 801273a:	4618      	mov	r0, r3
 801273c:	f7f9 fdea 	bl	800c314 <lwip_htonl>
 8012740:	4602      	mov	r2, r0
 8012742:	887b      	ldrh	r3, [r7, #2]
 8012744:	18d1      	adds	r1, r2, r3
 8012746:	7eba      	ldrb	r2, [r7, #26]
 8012748:	7bfb      	ldrb	r3, [r7, #15]
 801274a:	9300      	str	r3, [sp, #0]
 801274c:	460b      	mov	r3, r1
 801274e:	6939      	ldr	r1, [r7, #16]
 8012750:	6878      	ldr	r0, [r7, #4]
 8012752:	f7ff fea9 	bl	80124a8 <tcp_create_segment>
 8012756:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8012758:	69fb      	ldr	r3, [r7, #28]
 801275a:	2b00      	cmp	r3, #0
 801275c:	d063      	beq.n	8012826 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801275e:	697b      	ldr	r3, [r7, #20]
 8012760:	685b      	ldr	r3, [r3, #4]
 8012762:	4618      	mov	r0, r3
 8012764:	f7fb fc70 	bl	800e048 <pbuf_clen>
 8012768:	4603      	mov	r3, r0
 801276a:	461a      	mov	r2, r3
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012772:	1a9b      	subs	r3, r3, r2
 8012774:	b29a      	uxth	r2, r3
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801277c:	697b      	ldr	r3, [r7, #20]
 801277e:	6858      	ldr	r0, [r3, #4]
 8012780:	697b      	ldr	r3, [r7, #20]
 8012782:	685b      	ldr	r3, [r3, #4]
 8012784:	891a      	ldrh	r2, [r3, #8]
 8012786:	89bb      	ldrh	r3, [r7, #12]
 8012788:	1ad3      	subs	r3, r2, r3
 801278a:	b29b      	uxth	r3, r3
 801278c:	4619      	mov	r1, r3
 801278e:	f7fb fa4d 	bl	800dc2c <pbuf_realloc>
  useg->len -= remainder;
 8012792:	697b      	ldr	r3, [r7, #20]
 8012794:	891a      	ldrh	r2, [r3, #8]
 8012796:	89bb      	ldrh	r3, [r7, #12]
 8012798:	1ad3      	subs	r3, r2, r3
 801279a:	b29a      	uxth	r2, r3
 801279c:	697b      	ldr	r3, [r7, #20]
 801279e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80127a0:	697b      	ldr	r3, [r7, #20]
 80127a2:	68db      	ldr	r3, [r3, #12]
 80127a4:	899b      	ldrh	r3, [r3, #12]
 80127a6:	b29c      	uxth	r4, r3
 80127a8:	7efb      	ldrb	r3, [r7, #27]
 80127aa:	b29b      	uxth	r3, r3
 80127ac:	4618      	mov	r0, r3
 80127ae:	f7f9 fd9b 	bl	800c2e8 <lwip_htons>
 80127b2:	4603      	mov	r3, r0
 80127b4:	461a      	mov	r2, r3
 80127b6:	697b      	ldr	r3, [r7, #20]
 80127b8:	68db      	ldr	r3, [r3, #12]
 80127ba:	4322      	orrs	r2, r4
 80127bc:	b292      	uxth	r2, r2
 80127be:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80127c0:	697b      	ldr	r3, [r7, #20]
 80127c2:	685b      	ldr	r3, [r3, #4]
 80127c4:	4618      	mov	r0, r3
 80127c6:	f7fb fc3f 	bl	800e048 <pbuf_clen>
 80127ca:	4603      	mov	r3, r0
 80127cc:	461a      	mov	r2, r3
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80127d4:	4413      	add	r3, r2
 80127d6:	b29a      	uxth	r2, r3
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80127de:	69fb      	ldr	r3, [r7, #28]
 80127e0:	685b      	ldr	r3, [r3, #4]
 80127e2:	4618      	mov	r0, r3
 80127e4:	f7fb fc30 	bl	800e048 <pbuf_clen>
 80127e8:	4603      	mov	r3, r0
 80127ea:	461a      	mov	r2, r3
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80127f2:	4413      	add	r3, r2
 80127f4:	b29a      	uxth	r2, r3
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80127fc:	697b      	ldr	r3, [r7, #20]
 80127fe:	681a      	ldr	r2, [r3, #0]
 8012800:	69fb      	ldr	r3, [r7, #28]
 8012802:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8012804:	697b      	ldr	r3, [r7, #20]
 8012806:	69fa      	ldr	r2, [r7, #28]
 8012808:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801280a:	69fb      	ldr	r3, [r7, #28]
 801280c:	681b      	ldr	r3, [r3, #0]
 801280e:	2b00      	cmp	r3, #0
 8012810:	d103      	bne.n	801281a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	2200      	movs	r2, #0
 8012816:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801281a:	2300      	movs	r3, #0
 801281c:	e016      	b.n	801284c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801281e:	bf00      	nop
 8012820:	e002      	b.n	8012828 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8012822:	bf00      	nop
 8012824:	e000      	b.n	8012828 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8012826:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8012828:	69fb      	ldr	r3, [r7, #28]
 801282a:	2b00      	cmp	r3, #0
 801282c:	d006      	beq.n	801283c <tcp_split_unsent_seg+0x25c>
 801282e:	4b09      	ldr	r3, [pc, #36]	@ (8012854 <tcp_split_unsent_seg+0x274>)
 8012830:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8012834:	490d      	ldr	r1, [pc, #52]	@ (801286c <tcp_split_unsent_seg+0x28c>)
 8012836:	4809      	ldr	r0, [pc, #36]	@ (801285c <tcp_split_unsent_seg+0x27c>)
 8012838:	f005 f9c8 	bl	8017bcc <iprintf>
  if (p != NULL) {
 801283c:	693b      	ldr	r3, [r7, #16]
 801283e:	2b00      	cmp	r3, #0
 8012840:	d002      	beq.n	8012848 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8012842:	6938      	ldr	r0, [r7, #16]
 8012844:	f7fb fb78 	bl	800df38 <pbuf_free>
  }

  return ERR_MEM;
 8012848:	f04f 33ff 	mov.w	r3, #4294967295
}
 801284c:	4618      	mov	r0, r3
 801284e:	3724      	adds	r7, #36	@ 0x24
 8012850:	46bd      	mov	sp, r7
 8012852:	bd90      	pop	{r4, r7, pc}
 8012854:	08021fc4 	.word	0x08021fc4
 8012858:	08022358 	.word	0x08022358
 801285c:	08022018 	.word	0x08022018
 8012860:	0802237c 	.word	0x0802237c
 8012864:	080223a0 	.word	0x080223a0
 8012868:	080223b0 	.word	0x080223b0
 801286c:	080223c0 	.word	0x080223c0

08012870 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8012870:	b590      	push	{r4, r7, lr}
 8012872:	b085      	sub	sp, #20
 8012874:	af00      	add	r7, sp, #0
 8012876:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	2b00      	cmp	r3, #0
 801287c:	d106      	bne.n	801288c <tcp_send_fin+0x1c>
 801287e:	4b21      	ldr	r3, [pc, #132]	@ (8012904 <tcp_send_fin+0x94>)
 8012880:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 8012884:	4920      	ldr	r1, [pc, #128]	@ (8012908 <tcp_send_fin+0x98>)
 8012886:	4821      	ldr	r0, [pc, #132]	@ (801290c <tcp_send_fin+0x9c>)
 8012888:	f005 f9a0 	bl	8017bcc <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012890:	2b00      	cmp	r3, #0
 8012892:	d02e      	beq.n	80128f2 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012898:	60fb      	str	r3, [r7, #12]
 801289a:	e002      	b.n	80128a2 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801289c:	68fb      	ldr	r3, [r7, #12]
 801289e:	681b      	ldr	r3, [r3, #0]
 80128a0:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80128a2:	68fb      	ldr	r3, [r7, #12]
 80128a4:	681b      	ldr	r3, [r3, #0]
 80128a6:	2b00      	cmp	r3, #0
 80128a8:	d1f8      	bne.n	801289c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80128aa:	68fb      	ldr	r3, [r7, #12]
 80128ac:	68db      	ldr	r3, [r3, #12]
 80128ae:	899b      	ldrh	r3, [r3, #12]
 80128b0:	b29b      	uxth	r3, r3
 80128b2:	4618      	mov	r0, r3
 80128b4:	f7f9 fd18 	bl	800c2e8 <lwip_htons>
 80128b8:	4603      	mov	r3, r0
 80128ba:	b2db      	uxtb	r3, r3
 80128bc:	f003 0307 	and.w	r3, r3, #7
 80128c0:	2b00      	cmp	r3, #0
 80128c2:	d116      	bne.n	80128f2 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80128c4:	68fb      	ldr	r3, [r7, #12]
 80128c6:	68db      	ldr	r3, [r3, #12]
 80128c8:	899b      	ldrh	r3, [r3, #12]
 80128ca:	b29c      	uxth	r4, r3
 80128cc:	2001      	movs	r0, #1
 80128ce:	f7f9 fd0b 	bl	800c2e8 <lwip_htons>
 80128d2:	4603      	mov	r3, r0
 80128d4:	461a      	mov	r2, r3
 80128d6:	68fb      	ldr	r3, [r7, #12]
 80128d8:	68db      	ldr	r3, [r3, #12]
 80128da:	4322      	orrs	r2, r4
 80128dc:	b292      	uxth	r2, r2
 80128de:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	8b5b      	ldrh	r3, [r3, #26]
 80128e4:	f043 0320 	orr.w	r3, r3, #32
 80128e8:	b29a      	uxth	r2, r3
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80128ee:	2300      	movs	r3, #0
 80128f0:	e004      	b.n	80128fc <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80128f2:	2101      	movs	r1, #1
 80128f4:	6878      	ldr	r0, [r7, #4]
 80128f6:	f000 f80b 	bl	8012910 <tcp_enqueue_flags>
 80128fa:	4603      	mov	r3, r0
}
 80128fc:	4618      	mov	r0, r3
 80128fe:	3714      	adds	r7, #20
 8012900:	46bd      	mov	sp, r7
 8012902:	bd90      	pop	{r4, r7, pc}
 8012904:	08021fc4 	.word	0x08021fc4
 8012908:	080223cc 	.word	0x080223cc
 801290c:	08022018 	.word	0x08022018

08012910 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8012910:	b580      	push	{r7, lr}
 8012912:	b08a      	sub	sp, #40	@ 0x28
 8012914:	af02      	add	r7, sp, #8
 8012916:	6078      	str	r0, [r7, #4]
 8012918:	460b      	mov	r3, r1
 801291a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801291c:	2300      	movs	r3, #0
 801291e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8012920:	2300      	movs	r3, #0
 8012922:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8012924:	78fb      	ldrb	r3, [r7, #3]
 8012926:	f003 0303 	and.w	r3, r3, #3
 801292a:	2b00      	cmp	r3, #0
 801292c:	d106      	bne.n	801293c <tcp_enqueue_flags+0x2c>
 801292e:	4b67      	ldr	r3, [pc, #412]	@ (8012acc <tcp_enqueue_flags+0x1bc>)
 8012930:	f240 4211 	movw	r2, #1041	@ 0x411
 8012934:	4966      	ldr	r1, [pc, #408]	@ (8012ad0 <tcp_enqueue_flags+0x1c0>)
 8012936:	4867      	ldr	r0, [pc, #412]	@ (8012ad4 <tcp_enqueue_flags+0x1c4>)
 8012938:	f005 f948 	bl	8017bcc <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	2b00      	cmp	r3, #0
 8012940:	d106      	bne.n	8012950 <tcp_enqueue_flags+0x40>
 8012942:	4b62      	ldr	r3, [pc, #392]	@ (8012acc <tcp_enqueue_flags+0x1bc>)
 8012944:	f240 4213 	movw	r2, #1043	@ 0x413
 8012948:	4963      	ldr	r1, [pc, #396]	@ (8012ad8 <tcp_enqueue_flags+0x1c8>)
 801294a:	4862      	ldr	r0, [pc, #392]	@ (8012ad4 <tcp_enqueue_flags+0x1c4>)
 801294c:	f005 f93e 	bl	8017bcc <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8012950:	78fb      	ldrb	r3, [r7, #3]
 8012952:	f003 0302 	and.w	r3, r3, #2
 8012956:	2b00      	cmp	r3, #0
 8012958:	d001      	beq.n	801295e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801295a:	2301      	movs	r3, #1
 801295c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801295e:	7ffb      	ldrb	r3, [r7, #31]
 8012960:	009b      	lsls	r3, r3, #2
 8012962:	b2db      	uxtb	r3, r3
 8012964:	f003 0304 	and.w	r3, r3, #4
 8012968:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801296a:	7dfb      	ldrb	r3, [r7, #23]
 801296c:	b29b      	uxth	r3, r3
 801296e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8012972:	4619      	mov	r1, r3
 8012974:	2036      	movs	r0, #54	@ 0x36
 8012976:	f7fa fffb 	bl	800d970 <pbuf_alloc>
 801297a:	6138      	str	r0, [r7, #16]
 801297c:	693b      	ldr	r3, [r7, #16]
 801297e:	2b00      	cmp	r3, #0
 8012980:	d109      	bne.n	8012996 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	8b5b      	ldrh	r3, [r3, #26]
 8012986:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801298a:	b29a      	uxth	r2, r3
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8012990:	f04f 33ff 	mov.w	r3, #4294967295
 8012994:	e095      	b.n	8012ac2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8012996:	693b      	ldr	r3, [r7, #16]
 8012998:	895a      	ldrh	r2, [r3, #10]
 801299a:	7dfb      	ldrb	r3, [r7, #23]
 801299c:	b29b      	uxth	r3, r3
 801299e:	429a      	cmp	r2, r3
 80129a0:	d206      	bcs.n	80129b0 <tcp_enqueue_flags+0xa0>
 80129a2:	4b4a      	ldr	r3, [pc, #296]	@ (8012acc <tcp_enqueue_flags+0x1bc>)
 80129a4:	f240 4239 	movw	r2, #1081	@ 0x439
 80129a8:	494c      	ldr	r1, [pc, #304]	@ (8012adc <tcp_enqueue_flags+0x1cc>)
 80129aa:	484a      	ldr	r0, [pc, #296]	@ (8012ad4 <tcp_enqueue_flags+0x1c4>)
 80129ac:	f005 f90e 	bl	8017bcc <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 80129b4:	78fa      	ldrb	r2, [r7, #3]
 80129b6:	7ffb      	ldrb	r3, [r7, #31]
 80129b8:	9300      	str	r3, [sp, #0]
 80129ba:	460b      	mov	r3, r1
 80129bc:	6939      	ldr	r1, [r7, #16]
 80129be:	6878      	ldr	r0, [r7, #4]
 80129c0:	f7ff fd72 	bl	80124a8 <tcp_create_segment>
 80129c4:	60f8      	str	r0, [r7, #12]
 80129c6:	68fb      	ldr	r3, [r7, #12]
 80129c8:	2b00      	cmp	r3, #0
 80129ca:	d109      	bne.n	80129e0 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	8b5b      	ldrh	r3, [r3, #26]
 80129d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80129d4:	b29a      	uxth	r2, r3
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80129da:	f04f 33ff 	mov.w	r3, #4294967295
 80129de:	e070      	b.n	8012ac2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80129e0:	68fb      	ldr	r3, [r7, #12]
 80129e2:	68db      	ldr	r3, [r3, #12]
 80129e4:	f003 0303 	and.w	r3, r3, #3
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	d006      	beq.n	80129fa <tcp_enqueue_flags+0xea>
 80129ec:	4b37      	ldr	r3, [pc, #220]	@ (8012acc <tcp_enqueue_flags+0x1bc>)
 80129ee:	f240 4242 	movw	r2, #1090	@ 0x442
 80129f2:	493b      	ldr	r1, [pc, #236]	@ (8012ae0 <tcp_enqueue_flags+0x1d0>)
 80129f4:	4837      	ldr	r0, [pc, #220]	@ (8012ad4 <tcp_enqueue_flags+0x1c4>)
 80129f6:	f005 f8e9 	bl	8017bcc <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80129fa:	68fb      	ldr	r3, [r7, #12]
 80129fc:	891b      	ldrh	r3, [r3, #8]
 80129fe:	2b00      	cmp	r3, #0
 8012a00:	d006      	beq.n	8012a10 <tcp_enqueue_flags+0x100>
 8012a02:	4b32      	ldr	r3, [pc, #200]	@ (8012acc <tcp_enqueue_flags+0x1bc>)
 8012a04:	f240 4243 	movw	r2, #1091	@ 0x443
 8012a08:	4936      	ldr	r1, [pc, #216]	@ (8012ae4 <tcp_enqueue_flags+0x1d4>)
 8012a0a:	4832      	ldr	r0, [pc, #200]	@ (8012ad4 <tcp_enqueue_flags+0x1c4>)
 8012a0c:	f005 f8de 	bl	8017bcc <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8012a10:	687b      	ldr	r3, [r7, #4]
 8012a12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012a14:	2b00      	cmp	r3, #0
 8012a16:	d103      	bne.n	8012a20 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	68fa      	ldr	r2, [r7, #12]
 8012a1c:	66da      	str	r2, [r3, #108]	@ 0x6c
 8012a1e:	e00d      	b.n	8012a3c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012a24:	61bb      	str	r3, [r7, #24]
 8012a26:	e002      	b.n	8012a2e <tcp_enqueue_flags+0x11e>
 8012a28:	69bb      	ldr	r3, [r7, #24]
 8012a2a:	681b      	ldr	r3, [r3, #0]
 8012a2c:	61bb      	str	r3, [r7, #24]
 8012a2e:	69bb      	ldr	r3, [r7, #24]
 8012a30:	681b      	ldr	r3, [r3, #0]
 8012a32:	2b00      	cmp	r3, #0
 8012a34:	d1f8      	bne.n	8012a28 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8012a36:	69bb      	ldr	r3, [r7, #24]
 8012a38:	68fa      	ldr	r2, [r7, #12]
 8012a3a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	2200      	movs	r2, #0
 8012a40:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8012a44:	78fb      	ldrb	r3, [r7, #3]
 8012a46:	f003 0302 	and.w	r3, r3, #2
 8012a4a:	2b00      	cmp	r3, #0
 8012a4c:	d104      	bne.n	8012a58 <tcp_enqueue_flags+0x148>
 8012a4e:	78fb      	ldrb	r3, [r7, #3]
 8012a50:	f003 0301 	and.w	r3, r3, #1
 8012a54:	2b00      	cmp	r3, #0
 8012a56:	d004      	beq.n	8012a62 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012a5c:	1c5a      	adds	r2, r3, #1
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8012a62:	78fb      	ldrb	r3, [r7, #3]
 8012a64:	f003 0301 	and.w	r3, r3, #1
 8012a68:	2b00      	cmp	r3, #0
 8012a6a:	d006      	beq.n	8012a7a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	8b5b      	ldrh	r3, [r3, #26]
 8012a70:	f043 0320 	orr.w	r3, r3, #32
 8012a74:	b29a      	uxth	r2, r3
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8012a7a:	68fb      	ldr	r3, [r7, #12]
 8012a7c:	685b      	ldr	r3, [r3, #4]
 8012a7e:	4618      	mov	r0, r3
 8012a80:	f7fb fae2 	bl	800e048 <pbuf_clen>
 8012a84:	4603      	mov	r3, r0
 8012a86:	461a      	mov	r2, r3
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012a8e:	4413      	add	r3, r2
 8012a90:	b29a      	uxth	r2, r3
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012a9e:	2b00      	cmp	r3, #0
 8012aa0:	d00e      	beq.n	8012ac0 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012aa6:	2b00      	cmp	r3, #0
 8012aa8:	d10a      	bne.n	8012ac0 <tcp_enqueue_flags+0x1b0>
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012aae:	2b00      	cmp	r3, #0
 8012ab0:	d106      	bne.n	8012ac0 <tcp_enqueue_flags+0x1b0>
 8012ab2:	4b06      	ldr	r3, [pc, #24]	@ (8012acc <tcp_enqueue_flags+0x1bc>)
 8012ab4:	f240 4265 	movw	r2, #1125	@ 0x465
 8012ab8:	490b      	ldr	r1, [pc, #44]	@ (8012ae8 <tcp_enqueue_flags+0x1d8>)
 8012aba:	4806      	ldr	r0, [pc, #24]	@ (8012ad4 <tcp_enqueue_flags+0x1c4>)
 8012abc:	f005 f886 	bl	8017bcc <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8012ac0:	2300      	movs	r3, #0
}
 8012ac2:	4618      	mov	r0, r3
 8012ac4:	3720      	adds	r7, #32
 8012ac6:	46bd      	mov	sp, r7
 8012ac8:	bd80      	pop	{r7, pc}
 8012aca:	bf00      	nop
 8012acc:	08021fc4 	.word	0x08021fc4
 8012ad0:	080223e8 	.word	0x080223e8
 8012ad4:	08022018 	.word	0x08022018
 8012ad8:	08022440 	.word	0x08022440
 8012adc:	08022460 	.word	0x08022460
 8012ae0:	0802249c 	.word	0x0802249c
 8012ae4:	080224b4 	.word	0x080224b4
 8012ae8:	080224e0 	.word	0x080224e0

08012aec <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8012aec:	b5b0      	push	{r4, r5, r7, lr}
 8012aee:	b08a      	sub	sp, #40	@ 0x28
 8012af0:	af00      	add	r7, sp, #0
 8012af2:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	d106      	bne.n	8012b08 <tcp_output+0x1c>
 8012afa:	4b8a      	ldr	r3, [pc, #552]	@ (8012d24 <tcp_output+0x238>)
 8012afc:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8012b00:	4989      	ldr	r1, [pc, #548]	@ (8012d28 <tcp_output+0x23c>)
 8012b02:	488a      	ldr	r0, [pc, #552]	@ (8012d2c <tcp_output+0x240>)
 8012b04:	f005 f862 	bl	8017bcc <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	7d1b      	ldrb	r3, [r3, #20]
 8012b0c:	2b01      	cmp	r3, #1
 8012b0e:	d106      	bne.n	8012b1e <tcp_output+0x32>
 8012b10:	4b84      	ldr	r3, [pc, #528]	@ (8012d24 <tcp_output+0x238>)
 8012b12:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 8012b16:	4986      	ldr	r1, [pc, #536]	@ (8012d30 <tcp_output+0x244>)
 8012b18:	4884      	ldr	r0, [pc, #528]	@ (8012d2c <tcp_output+0x240>)
 8012b1a:	f005 f857 	bl	8017bcc <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8012b1e:	4b85      	ldr	r3, [pc, #532]	@ (8012d34 <tcp_output+0x248>)
 8012b20:	681b      	ldr	r3, [r3, #0]
 8012b22:	687a      	ldr	r2, [r7, #4]
 8012b24:	429a      	cmp	r2, r3
 8012b26:	d101      	bne.n	8012b2c <tcp_output+0x40>
    return ERR_OK;
 8012b28:	2300      	movs	r3, #0
 8012b2a:	e1ce      	b.n	8012eca <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8012b38:	4293      	cmp	r3, r2
 8012b3a:	bf28      	it	cs
 8012b3c:	4613      	movcs	r3, r2
 8012b3e:	b29b      	uxth	r3, r3
 8012b40:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012b46:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 8012b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b4a:	2b00      	cmp	r3, #0
 8012b4c:	d10b      	bne.n	8012b66 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	8b5b      	ldrh	r3, [r3, #26]
 8012b52:	f003 0302 	and.w	r3, r3, #2
 8012b56:	2b00      	cmp	r3, #0
 8012b58:	f000 81aa 	beq.w	8012eb0 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8012b5c:	6878      	ldr	r0, [r7, #4]
 8012b5e:	f000 fdcb 	bl	80136f8 <tcp_send_empty_ack>
 8012b62:	4603      	mov	r3, r0
 8012b64:	e1b1      	b.n	8012eca <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8012b66:	6879      	ldr	r1, [r7, #4]
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	3304      	adds	r3, #4
 8012b6c:	461a      	mov	r2, r3
 8012b6e:	6878      	ldr	r0, [r7, #4]
 8012b70:	f7ff fc7e 	bl	8012470 <tcp_route>
 8012b74:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8012b76:	697b      	ldr	r3, [r7, #20]
 8012b78:	2b00      	cmp	r3, #0
 8012b7a:	d102      	bne.n	8012b82 <tcp_output+0x96>
    return ERR_RTE;
 8012b7c:	f06f 0303 	mvn.w	r3, #3
 8012b80:	e1a3      	b.n	8012eca <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8012b82:	687b      	ldr	r3, [r7, #4]
 8012b84:	2b00      	cmp	r3, #0
 8012b86:	d003      	beq.n	8012b90 <tcp_output+0xa4>
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	681b      	ldr	r3, [r3, #0]
 8012b8c:	2b00      	cmp	r3, #0
 8012b8e:	d111      	bne.n	8012bb4 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8012b90:	697b      	ldr	r3, [r7, #20]
 8012b92:	2b00      	cmp	r3, #0
 8012b94:	d002      	beq.n	8012b9c <tcp_output+0xb0>
 8012b96:	697b      	ldr	r3, [r7, #20]
 8012b98:	3304      	adds	r3, #4
 8012b9a:	e000      	b.n	8012b9e <tcp_output+0xb2>
 8012b9c:	2300      	movs	r3, #0
 8012b9e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8012ba0:	693b      	ldr	r3, [r7, #16]
 8012ba2:	2b00      	cmp	r3, #0
 8012ba4:	d102      	bne.n	8012bac <tcp_output+0xc0>
      return ERR_RTE;
 8012ba6:	f06f 0303 	mvn.w	r3, #3
 8012baa:	e18e      	b.n	8012eca <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8012bac:	693b      	ldr	r3, [r7, #16]
 8012bae:	681a      	ldr	r2, [r3, #0]
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8012bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012bb6:	68db      	ldr	r3, [r3, #12]
 8012bb8:	685b      	ldr	r3, [r3, #4]
 8012bba:	4618      	mov	r0, r3
 8012bbc:	f7f9 fbaa 	bl	800c314 <lwip_htonl>
 8012bc0:	4602      	mov	r2, r0
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012bc6:	1ad3      	subs	r3, r2, r3
 8012bc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012bca:	8912      	ldrh	r2, [r2, #8]
 8012bcc:	4413      	add	r3, r2
 8012bce:	69ba      	ldr	r2, [r7, #24]
 8012bd0:	429a      	cmp	r2, r3
 8012bd2:	d227      	bcs.n	8012c24 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8012bda:	461a      	mov	r2, r3
 8012bdc:	69bb      	ldr	r3, [r7, #24]
 8012bde:	4293      	cmp	r3, r2
 8012be0:	d114      	bne.n	8012c0c <tcp_output+0x120>
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012be6:	2b00      	cmp	r3, #0
 8012be8:	d110      	bne.n	8012c0c <tcp_output+0x120>
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8012bf0:	2b00      	cmp	r3, #0
 8012bf2:	d10b      	bne.n	8012c0c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8012bf4:	687b      	ldr	r3, [r7, #4]
 8012bf6:	2200      	movs	r2, #0
 8012bf8:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	2201      	movs	r2, #1
 8012c00:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	2200      	movs	r2, #0
 8012c08:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	8b5b      	ldrh	r3, [r3, #26]
 8012c10:	f003 0302 	and.w	r3, r3, #2
 8012c14:	2b00      	cmp	r3, #0
 8012c16:	f000 814d 	beq.w	8012eb4 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8012c1a:	6878      	ldr	r0, [r7, #4]
 8012c1c:	f000 fd6c 	bl	80136f8 <tcp_send_empty_ack>
 8012c20:	4603      	mov	r3, r0
 8012c22:	e152      	b.n	8012eca <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	2200      	movs	r2, #0
 8012c28:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012c30:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8012c32:	6a3b      	ldr	r3, [r7, #32]
 8012c34:	2b00      	cmp	r3, #0
 8012c36:	f000 811c 	beq.w	8012e72 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8012c3a:	e002      	b.n	8012c42 <tcp_output+0x156>
 8012c3c:	6a3b      	ldr	r3, [r7, #32]
 8012c3e:	681b      	ldr	r3, [r3, #0]
 8012c40:	623b      	str	r3, [r7, #32]
 8012c42:	6a3b      	ldr	r3, [r7, #32]
 8012c44:	681b      	ldr	r3, [r3, #0]
 8012c46:	2b00      	cmp	r3, #0
 8012c48:	d1f8      	bne.n	8012c3c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8012c4a:	e112      	b.n	8012e72 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8012c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012c4e:	68db      	ldr	r3, [r3, #12]
 8012c50:	899b      	ldrh	r3, [r3, #12]
 8012c52:	b29b      	uxth	r3, r3
 8012c54:	4618      	mov	r0, r3
 8012c56:	f7f9 fb47 	bl	800c2e8 <lwip_htons>
 8012c5a:	4603      	mov	r3, r0
 8012c5c:	b2db      	uxtb	r3, r3
 8012c5e:	f003 0304 	and.w	r3, r3, #4
 8012c62:	2b00      	cmp	r3, #0
 8012c64:	d006      	beq.n	8012c74 <tcp_output+0x188>
 8012c66:	4b2f      	ldr	r3, [pc, #188]	@ (8012d24 <tcp_output+0x238>)
 8012c68:	f240 5236 	movw	r2, #1334	@ 0x536
 8012c6c:	4932      	ldr	r1, [pc, #200]	@ (8012d38 <tcp_output+0x24c>)
 8012c6e:	482f      	ldr	r0, [pc, #188]	@ (8012d2c <tcp_output+0x240>)
 8012c70:	f004 ffac 	bl	8017bcc <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	d01f      	beq.n	8012cbc <tcp_output+0x1d0>
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	8b5b      	ldrh	r3, [r3, #26]
 8012c80:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8012c84:	2b00      	cmp	r3, #0
 8012c86:	d119      	bne.n	8012cbc <tcp_output+0x1d0>
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	d00b      	beq.n	8012ca8 <tcp_output+0x1bc>
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012c94:	681b      	ldr	r3, [r3, #0]
 8012c96:	2b00      	cmp	r3, #0
 8012c98:	d110      	bne.n	8012cbc <tcp_output+0x1d0>
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012c9e:	891a      	ldrh	r2, [r3, #8]
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012ca4:	429a      	cmp	r2, r3
 8012ca6:	d209      	bcs.n	8012cbc <tcp_output+0x1d0>
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8012cae:	2b00      	cmp	r3, #0
 8012cb0:	d004      	beq.n	8012cbc <tcp_output+0x1d0>
 8012cb2:	687b      	ldr	r3, [r7, #4]
 8012cb4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012cb8:	2b08      	cmp	r3, #8
 8012cba:	d901      	bls.n	8012cc0 <tcp_output+0x1d4>
 8012cbc:	2301      	movs	r3, #1
 8012cbe:	e000      	b.n	8012cc2 <tcp_output+0x1d6>
 8012cc0:	2300      	movs	r3, #0
 8012cc2:	2b00      	cmp	r3, #0
 8012cc4:	d106      	bne.n	8012cd4 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	8b5b      	ldrh	r3, [r3, #26]
 8012cca:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012cce:	2b00      	cmp	r3, #0
 8012cd0:	f000 80e4 	beq.w	8012e9c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	7d1b      	ldrb	r3, [r3, #20]
 8012cd8:	2b02      	cmp	r3, #2
 8012cda:	d00d      	beq.n	8012cf8 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8012cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012cde:	68db      	ldr	r3, [r3, #12]
 8012ce0:	899b      	ldrh	r3, [r3, #12]
 8012ce2:	b29c      	uxth	r4, r3
 8012ce4:	2010      	movs	r0, #16
 8012ce6:	f7f9 faff 	bl	800c2e8 <lwip_htons>
 8012cea:	4603      	mov	r3, r0
 8012cec:	461a      	mov	r2, r3
 8012cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012cf0:	68db      	ldr	r3, [r3, #12]
 8012cf2:	4322      	orrs	r2, r4
 8012cf4:	b292      	uxth	r2, r2
 8012cf6:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8012cf8:	697a      	ldr	r2, [r7, #20]
 8012cfa:	6879      	ldr	r1, [r7, #4]
 8012cfc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012cfe:	f000 f909 	bl	8012f14 <tcp_output_segment>
 8012d02:	4603      	mov	r3, r0
 8012d04:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8012d06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012d0a:	2b00      	cmp	r3, #0
 8012d0c:	d016      	beq.n	8012d3c <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	8b5b      	ldrh	r3, [r3, #26]
 8012d12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012d16:	b29a      	uxth	r2, r3
 8012d18:	687b      	ldr	r3, [r7, #4]
 8012d1a:	835a      	strh	r2, [r3, #26]
      return err;
 8012d1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012d20:	e0d3      	b.n	8012eca <tcp_output+0x3de>
 8012d22:	bf00      	nop
 8012d24:	08021fc4 	.word	0x08021fc4
 8012d28:	08022508 	.word	0x08022508
 8012d2c:	08022018 	.word	0x08022018
 8012d30:	08022520 	.word	0x08022520
 8012d34:	20015298 	.word	0x20015298
 8012d38:	08022548 	.word	0x08022548
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8012d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d3e:	681a      	ldr	r2, [r3, #0]
 8012d40:	687b      	ldr	r3, [r7, #4]
 8012d42:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 8012d44:	687b      	ldr	r3, [r7, #4]
 8012d46:	7d1b      	ldrb	r3, [r3, #20]
 8012d48:	2b02      	cmp	r3, #2
 8012d4a:	d006      	beq.n	8012d5a <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	8b5b      	ldrh	r3, [r3, #26]
 8012d50:	f023 0303 	bic.w	r3, r3, #3
 8012d54:	b29a      	uxth	r2, r3
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8012d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d5c:	68db      	ldr	r3, [r3, #12]
 8012d5e:	685b      	ldr	r3, [r3, #4]
 8012d60:	4618      	mov	r0, r3
 8012d62:	f7f9 fad7 	bl	800c314 <lwip_htonl>
 8012d66:	4604      	mov	r4, r0
 8012d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d6a:	891b      	ldrh	r3, [r3, #8]
 8012d6c:	461d      	mov	r5, r3
 8012d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d70:	68db      	ldr	r3, [r3, #12]
 8012d72:	899b      	ldrh	r3, [r3, #12]
 8012d74:	b29b      	uxth	r3, r3
 8012d76:	4618      	mov	r0, r3
 8012d78:	f7f9 fab6 	bl	800c2e8 <lwip_htons>
 8012d7c:	4603      	mov	r3, r0
 8012d7e:	b2db      	uxtb	r3, r3
 8012d80:	f003 0303 	and.w	r3, r3, #3
 8012d84:	2b00      	cmp	r3, #0
 8012d86:	d001      	beq.n	8012d8c <tcp_output+0x2a0>
 8012d88:	2301      	movs	r3, #1
 8012d8a:	e000      	b.n	8012d8e <tcp_output+0x2a2>
 8012d8c:	2300      	movs	r3, #0
 8012d8e:	442b      	add	r3, r5
 8012d90:	4423      	add	r3, r4
 8012d92:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012d94:	687b      	ldr	r3, [r7, #4]
 8012d96:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8012d98:	68bb      	ldr	r3, [r7, #8]
 8012d9a:	1ad3      	subs	r3, r2, r3
 8012d9c:	2b00      	cmp	r3, #0
 8012d9e:	da02      	bge.n	8012da6 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	68ba      	ldr	r2, [r7, #8]
 8012da4:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8012da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012da8:	891b      	ldrh	r3, [r3, #8]
 8012daa:	461c      	mov	r4, r3
 8012dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012dae:	68db      	ldr	r3, [r3, #12]
 8012db0:	899b      	ldrh	r3, [r3, #12]
 8012db2:	b29b      	uxth	r3, r3
 8012db4:	4618      	mov	r0, r3
 8012db6:	f7f9 fa97 	bl	800c2e8 <lwip_htons>
 8012dba:	4603      	mov	r3, r0
 8012dbc:	b2db      	uxtb	r3, r3
 8012dbe:	f003 0303 	and.w	r3, r3, #3
 8012dc2:	2b00      	cmp	r3, #0
 8012dc4:	d001      	beq.n	8012dca <tcp_output+0x2de>
 8012dc6:	2301      	movs	r3, #1
 8012dc8:	e000      	b.n	8012dcc <tcp_output+0x2e0>
 8012dca:	2300      	movs	r3, #0
 8012dcc:	4423      	add	r3, r4
 8012dce:	2b00      	cmp	r3, #0
 8012dd0:	d049      	beq.n	8012e66 <tcp_output+0x37a>
      seg->next = NULL;
 8012dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012dd4:	2200      	movs	r2, #0
 8012dd6:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8012dd8:	687b      	ldr	r3, [r7, #4]
 8012dda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012ddc:	2b00      	cmp	r3, #0
 8012dde:	d105      	bne.n	8012dec <tcp_output+0x300>
        pcb->unacked = seg;
 8012de0:	687b      	ldr	r3, [r7, #4]
 8012de2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012de4:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 8012de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012de8:	623b      	str	r3, [r7, #32]
 8012dea:	e03f      	b.n	8012e6c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8012dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012dee:	68db      	ldr	r3, [r3, #12]
 8012df0:	685b      	ldr	r3, [r3, #4]
 8012df2:	4618      	mov	r0, r3
 8012df4:	f7f9 fa8e 	bl	800c314 <lwip_htonl>
 8012df8:	4604      	mov	r4, r0
 8012dfa:	6a3b      	ldr	r3, [r7, #32]
 8012dfc:	68db      	ldr	r3, [r3, #12]
 8012dfe:	685b      	ldr	r3, [r3, #4]
 8012e00:	4618      	mov	r0, r3
 8012e02:	f7f9 fa87 	bl	800c314 <lwip_htonl>
 8012e06:	4603      	mov	r3, r0
 8012e08:	1ae3      	subs	r3, r4, r3
 8012e0a:	2b00      	cmp	r3, #0
 8012e0c:	da24      	bge.n	8012e58 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8012e0e:	687b      	ldr	r3, [r7, #4]
 8012e10:	3370      	adds	r3, #112	@ 0x70
 8012e12:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012e14:	e002      	b.n	8012e1c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8012e16:	69fb      	ldr	r3, [r7, #28]
 8012e18:	681b      	ldr	r3, [r3, #0]
 8012e1a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012e1c:	69fb      	ldr	r3, [r7, #28]
 8012e1e:	681b      	ldr	r3, [r3, #0]
 8012e20:	2b00      	cmp	r3, #0
 8012e22:	d011      	beq.n	8012e48 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012e24:	69fb      	ldr	r3, [r7, #28]
 8012e26:	681b      	ldr	r3, [r3, #0]
 8012e28:	68db      	ldr	r3, [r3, #12]
 8012e2a:	685b      	ldr	r3, [r3, #4]
 8012e2c:	4618      	mov	r0, r3
 8012e2e:	f7f9 fa71 	bl	800c314 <lwip_htonl>
 8012e32:	4604      	mov	r4, r0
 8012e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e36:	68db      	ldr	r3, [r3, #12]
 8012e38:	685b      	ldr	r3, [r3, #4]
 8012e3a:	4618      	mov	r0, r3
 8012e3c:	f7f9 fa6a 	bl	800c314 <lwip_htonl>
 8012e40:	4603      	mov	r3, r0
 8012e42:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8012e44:	2b00      	cmp	r3, #0
 8012e46:	dbe6      	blt.n	8012e16 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8012e48:	69fb      	ldr	r3, [r7, #28]
 8012e4a:	681a      	ldr	r2, [r3, #0]
 8012e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e4e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8012e50:	69fb      	ldr	r3, [r7, #28]
 8012e52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012e54:	601a      	str	r2, [r3, #0]
 8012e56:	e009      	b.n	8012e6c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8012e58:	6a3b      	ldr	r3, [r7, #32]
 8012e5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012e5c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8012e5e:	6a3b      	ldr	r3, [r7, #32]
 8012e60:	681b      	ldr	r3, [r3, #0]
 8012e62:	623b      	str	r3, [r7, #32]
 8012e64:	e002      	b.n	8012e6c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8012e66:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012e68:	f7fc fc45 	bl	800f6f6 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8012e6c:	687b      	ldr	r3, [r7, #4]
 8012e6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012e70:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 8012e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e74:	2b00      	cmp	r3, #0
 8012e76:	d012      	beq.n	8012e9e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8012e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e7a:	68db      	ldr	r3, [r3, #12]
 8012e7c:	685b      	ldr	r3, [r3, #4]
 8012e7e:	4618      	mov	r0, r3
 8012e80:	f7f9 fa48 	bl	800c314 <lwip_htonl>
 8012e84:	4602      	mov	r2, r0
 8012e86:	687b      	ldr	r3, [r7, #4]
 8012e88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012e8a:	1ad3      	subs	r3, r2, r3
 8012e8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012e8e:	8912      	ldrh	r2, [r2, #8]
 8012e90:	4413      	add	r3, r2
  while (seg != NULL &&
 8012e92:	69ba      	ldr	r2, [r7, #24]
 8012e94:	429a      	cmp	r2, r3
 8012e96:	f4bf aed9 	bcs.w	8012c4c <tcp_output+0x160>
 8012e9a:	e000      	b.n	8012e9e <tcp_output+0x3b2>
      break;
 8012e9c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012ea2:	2b00      	cmp	r3, #0
 8012ea4:	d108      	bne.n	8012eb8 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	2200      	movs	r2, #0
 8012eaa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8012eae:	e004      	b.n	8012eba <tcp_output+0x3ce>
    goto output_done;
 8012eb0:	bf00      	nop
 8012eb2:	e002      	b.n	8012eba <tcp_output+0x3ce>
    goto output_done;
 8012eb4:	bf00      	nop
 8012eb6:	e000      	b.n	8012eba <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8012eb8:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	8b5b      	ldrh	r3, [r3, #26]
 8012ebe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8012ec2:	b29a      	uxth	r2, r3
 8012ec4:	687b      	ldr	r3, [r7, #4]
 8012ec6:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8012ec8:	2300      	movs	r3, #0
}
 8012eca:	4618      	mov	r0, r3
 8012ecc:	3728      	adds	r7, #40	@ 0x28
 8012ece:	46bd      	mov	sp, r7
 8012ed0:	bdb0      	pop	{r4, r5, r7, pc}
 8012ed2:	bf00      	nop

08012ed4 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8012ed4:	b580      	push	{r7, lr}
 8012ed6:	b082      	sub	sp, #8
 8012ed8:	af00      	add	r7, sp, #0
 8012eda:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	2b00      	cmp	r3, #0
 8012ee0:	d106      	bne.n	8012ef0 <tcp_output_segment_busy+0x1c>
 8012ee2:	4b09      	ldr	r3, [pc, #36]	@ (8012f08 <tcp_output_segment_busy+0x34>)
 8012ee4:	f240 529a 	movw	r2, #1434	@ 0x59a
 8012ee8:	4908      	ldr	r1, [pc, #32]	@ (8012f0c <tcp_output_segment_busy+0x38>)
 8012eea:	4809      	ldr	r0, [pc, #36]	@ (8012f10 <tcp_output_segment_busy+0x3c>)
 8012eec:	f004 fe6e 	bl	8017bcc <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8012ef0:	687b      	ldr	r3, [r7, #4]
 8012ef2:	685b      	ldr	r3, [r3, #4]
 8012ef4:	7b9b      	ldrb	r3, [r3, #14]
 8012ef6:	2b01      	cmp	r3, #1
 8012ef8:	d001      	beq.n	8012efe <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8012efa:	2301      	movs	r3, #1
 8012efc:	e000      	b.n	8012f00 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8012efe:	2300      	movs	r3, #0
}
 8012f00:	4618      	mov	r0, r3
 8012f02:	3708      	adds	r7, #8
 8012f04:	46bd      	mov	sp, r7
 8012f06:	bd80      	pop	{r7, pc}
 8012f08:	08021fc4 	.word	0x08021fc4
 8012f0c:	08022560 	.word	0x08022560
 8012f10:	08022018 	.word	0x08022018

08012f14 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8012f14:	b5b0      	push	{r4, r5, r7, lr}
 8012f16:	b08c      	sub	sp, #48	@ 0x30
 8012f18:	af04      	add	r7, sp, #16
 8012f1a:	60f8      	str	r0, [r7, #12]
 8012f1c:	60b9      	str	r1, [r7, #8]
 8012f1e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8012f20:	68fb      	ldr	r3, [r7, #12]
 8012f22:	2b00      	cmp	r3, #0
 8012f24:	d106      	bne.n	8012f34 <tcp_output_segment+0x20>
 8012f26:	4b64      	ldr	r3, [pc, #400]	@ (80130b8 <tcp_output_segment+0x1a4>)
 8012f28:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 8012f2c:	4963      	ldr	r1, [pc, #396]	@ (80130bc <tcp_output_segment+0x1a8>)
 8012f2e:	4864      	ldr	r0, [pc, #400]	@ (80130c0 <tcp_output_segment+0x1ac>)
 8012f30:	f004 fe4c 	bl	8017bcc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8012f34:	68bb      	ldr	r3, [r7, #8]
 8012f36:	2b00      	cmp	r3, #0
 8012f38:	d106      	bne.n	8012f48 <tcp_output_segment+0x34>
 8012f3a:	4b5f      	ldr	r3, [pc, #380]	@ (80130b8 <tcp_output_segment+0x1a4>)
 8012f3c:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8012f40:	4960      	ldr	r1, [pc, #384]	@ (80130c4 <tcp_output_segment+0x1b0>)
 8012f42:	485f      	ldr	r0, [pc, #380]	@ (80130c0 <tcp_output_segment+0x1ac>)
 8012f44:	f004 fe42 	bl	8017bcc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	2b00      	cmp	r3, #0
 8012f4c:	d106      	bne.n	8012f5c <tcp_output_segment+0x48>
 8012f4e:	4b5a      	ldr	r3, [pc, #360]	@ (80130b8 <tcp_output_segment+0x1a4>)
 8012f50:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 8012f54:	495c      	ldr	r1, [pc, #368]	@ (80130c8 <tcp_output_segment+0x1b4>)
 8012f56:	485a      	ldr	r0, [pc, #360]	@ (80130c0 <tcp_output_segment+0x1ac>)
 8012f58:	f004 fe38 	bl	8017bcc <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8012f5c:	68f8      	ldr	r0, [r7, #12]
 8012f5e:	f7ff ffb9 	bl	8012ed4 <tcp_output_segment_busy>
 8012f62:	4603      	mov	r3, r0
 8012f64:	2b00      	cmp	r3, #0
 8012f66:	d001      	beq.n	8012f6c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8012f68:	2300      	movs	r3, #0
 8012f6a:	e0a1      	b.n	80130b0 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8012f6c:	68bb      	ldr	r3, [r7, #8]
 8012f6e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012f70:	68fb      	ldr	r3, [r7, #12]
 8012f72:	68dc      	ldr	r4, [r3, #12]
 8012f74:	4610      	mov	r0, r2
 8012f76:	f7f9 f9cd 	bl	800c314 <lwip_htonl>
 8012f7a:	4603      	mov	r3, r0
 8012f7c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8012f7e:	68bb      	ldr	r3, [r7, #8]
 8012f80:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8012f82:	68fb      	ldr	r3, [r7, #12]
 8012f84:	68dc      	ldr	r4, [r3, #12]
 8012f86:	4610      	mov	r0, r2
 8012f88:	f7f9 f9ae 	bl	800c2e8 <lwip_htons>
 8012f8c:	4603      	mov	r3, r0
 8012f8e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012f90:	68bb      	ldr	r3, [r7, #8]
 8012f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012f94:	68ba      	ldr	r2, [r7, #8]
 8012f96:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8012f98:	441a      	add	r2, r3
 8012f9a:	68bb      	ldr	r3, [r7, #8]
 8012f9c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8012f9e:	68fb      	ldr	r3, [r7, #12]
 8012fa0:	68db      	ldr	r3, [r3, #12]
 8012fa2:	3314      	adds	r3, #20
 8012fa4:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8012fa6:	68fb      	ldr	r3, [r7, #12]
 8012fa8:	7a9b      	ldrb	r3, [r3, #10]
 8012faa:	f003 0301 	and.w	r3, r3, #1
 8012fae:	2b00      	cmp	r3, #0
 8012fb0:	d015      	beq.n	8012fde <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8012fb2:	68bb      	ldr	r3, [r7, #8]
 8012fb4:	3304      	adds	r3, #4
 8012fb6:	461a      	mov	r2, r3
 8012fb8:	6879      	ldr	r1, [r7, #4]
 8012fba:	f44f 7006 	mov.w	r0, #536	@ 0x218
 8012fbe:	f7fc fe91 	bl	800fce4 <tcp_eff_send_mss_netif>
 8012fc2:	4603      	mov	r3, r0
 8012fc4:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8012fc6:	8b7b      	ldrh	r3, [r7, #26]
 8012fc8:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 8012fcc:	4618      	mov	r0, r3
 8012fce:	f7f9 f9a1 	bl	800c314 <lwip_htonl>
 8012fd2:	4602      	mov	r2, r0
 8012fd4:	69fb      	ldr	r3, [r7, #28]
 8012fd6:	601a      	str	r2, [r3, #0]
    opts += 1;
 8012fd8:	69fb      	ldr	r3, [r7, #28]
 8012fda:	3304      	adds	r3, #4
 8012fdc:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8012fde:	68bb      	ldr	r3, [r7, #8]
 8012fe0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8012fe4:	2b00      	cmp	r3, #0
 8012fe6:	da02      	bge.n	8012fee <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8012fe8:	68bb      	ldr	r3, [r7, #8]
 8012fea:	2200      	movs	r2, #0
 8012fec:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 8012fee:	68bb      	ldr	r3, [r7, #8]
 8012ff0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012ff2:	2b00      	cmp	r3, #0
 8012ff4:	d10c      	bne.n	8013010 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8012ff6:	4b35      	ldr	r3, [pc, #212]	@ (80130cc <tcp_output_segment+0x1b8>)
 8012ff8:	681a      	ldr	r2, [r3, #0]
 8012ffa:	68bb      	ldr	r3, [r7, #8]
 8012ffc:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8012ffe:	68fb      	ldr	r3, [r7, #12]
 8013000:	68db      	ldr	r3, [r3, #12]
 8013002:	685b      	ldr	r3, [r3, #4]
 8013004:	4618      	mov	r0, r3
 8013006:	f7f9 f985 	bl	800c314 <lwip_htonl>
 801300a:	4602      	mov	r2, r0
 801300c:	68bb      	ldr	r3, [r7, #8]
 801300e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8013010:	68fb      	ldr	r3, [r7, #12]
 8013012:	68da      	ldr	r2, [r3, #12]
 8013014:	68fb      	ldr	r3, [r7, #12]
 8013016:	685b      	ldr	r3, [r3, #4]
 8013018:	685b      	ldr	r3, [r3, #4]
 801301a:	1ad3      	subs	r3, r2, r3
 801301c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801301e:	68fb      	ldr	r3, [r7, #12]
 8013020:	685b      	ldr	r3, [r3, #4]
 8013022:	8959      	ldrh	r1, [r3, #10]
 8013024:	68fb      	ldr	r3, [r7, #12]
 8013026:	685b      	ldr	r3, [r3, #4]
 8013028:	8b3a      	ldrh	r2, [r7, #24]
 801302a:	1a8a      	subs	r2, r1, r2
 801302c:	b292      	uxth	r2, r2
 801302e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8013030:	68fb      	ldr	r3, [r7, #12]
 8013032:	685b      	ldr	r3, [r3, #4]
 8013034:	8919      	ldrh	r1, [r3, #8]
 8013036:	68fb      	ldr	r3, [r7, #12]
 8013038:	685b      	ldr	r3, [r3, #4]
 801303a:	8b3a      	ldrh	r2, [r7, #24]
 801303c:	1a8a      	subs	r2, r1, r2
 801303e:	b292      	uxth	r2, r2
 8013040:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8013042:	68fb      	ldr	r3, [r7, #12]
 8013044:	685b      	ldr	r3, [r3, #4]
 8013046:	68fa      	ldr	r2, [r7, #12]
 8013048:	68d2      	ldr	r2, [r2, #12]
 801304a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801304c:	68fb      	ldr	r3, [r7, #12]
 801304e:	68db      	ldr	r3, [r3, #12]
 8013050:	2200      	movs	r2, #0
 8013052:	741a      	strb	r2, [r3, #16]
 8013054:	2200      	movs	r2, #0
 8013056:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8013058:	68fb      	ldr	r3, [r7, #12]
 801305a:	68da      	ldr	r2, [r3, #12]
 801305c:	68fb      	ldr	r3, [r7, #12]
 801305e:	7a9b      	ldrb	r3, [r3, #10]
 8013060:	f003 0301 	and.w	r3, r3, #1
 8013064:	2b00      	cmp	r3, #0
 8013066:	d001      	beq.n	801306c <tcp_output_segment+0x158>
 8013068:	2318      	movs	r3, #24
 801306a:	e000      	b.n	801306e <tcp_output_segment+0x15a>
 801306c:	2314      	movs	r3, #20
 801306e:	4413      	add	r3, r2
 8013070:	69fa      	ldr	r2, [r7, #28]
 8013072:	429a      	cmp	r2, r3
 8013074:	d006      	beq.n	8013084 <tcp_output_segment+0x170>
 8013076:	4b10      	ldr	r3, [pc, #64]	@ (80130b8 <tcp_output_segment+0x1a4>)
 8013078:	f240 621c 	movw	r2, #1564	@ 0x61c
 801307c:	4914      	ldr	r1, [pc, #80]	@ (80130d0 <tcp_output_segment+0x1bc>)
 801307e:	4810      	ldr	r0, [pc, #64]	@ (80130c0 <tcp_output_segment+0x1ac>)
 8013080:	f004 fda4 	bl	8017bcc <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8013084:	68fb      	ldr	r3, [r7, #12]
 8013086:	6858      	ldr	r0, [r3, #4]
 8013088:	68b9      	ldr	r1, [r7, #8]
 801308a:	68bb      	ldr	r3, [r7, #8]
 801308c:	1d1c      	adds	r4, r3, #4
 801308e:	68bb      	ldr	r3, [r7, #8]
 8013090:	7add      	ldrb	r5, [r3, #11]
 8013092:	68bb      	ldr	r3, [r7, #8]
 8013094:	7a9b      	ldrb	r3, [r3, #10]
 8013096:	687a      	ldr	r2, [r7, #4]
 8013098:	9202      	str	r2, [sp, #8]
 801309a:	2206      	movs	r2, #6
 801309c:	9201      	str	r2, [sp, #4]
 801309e:	9300      	str	r3, [sp, #0]
 80130a0:	462b      	mov	r3, r5
 80130a2:	4622      	mov	r2, r4
 80130a4:	f002 fdc6 	bl	8015c34 <ip4_output_if>
 80130a8:	4603      	mov	r3, r0
 80130aa:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80130ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80130b0:	4618      	mov	r0, r3
 80130b2:	3720      	adds	r7, #32
 80130b4:	46bd      	mov	sp, r7
 80130b6:	bdb0      	pop	{r4, r5, r7, pc}
 80130b8:	08021fc4 	.word	0x08021fc4
 80130bc:	08022588 	.word	0x08022588
 80130c0:	08022018 	.word	0x08022018
 80130c4:	080225a8 	.word	0x080225a8
 80130c8:	080225c8 	.word	0x080225c8
 80130cc:	2001524c 	.word	0x2001524c
 80130d0:	080225ec 	.word	0x080225ec

080130d4 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80130d4:	b5b0      	push	{r4, r5, r7, lr}
 80130d6:	b084      	sub	sp, #16
 80130d8:	af00      	add	r7, sp, #0
 80130da:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	2b00      	cmp	r3, #0
 80130e0:	d106      	bne.n	80130f0 <tcp_rexmit_rto_prepare+0x1c>
 80130e2:	4b31      	ldr	r3, [pc, #196]	@ (80131a8 <tcp_rexmit_rto_prepare+0xd4>)
 80130e4:	f240 6263 	movw	r2, #1635	@ 0x663
 80130e8:	4930      	ldr	r1, [pc, #192]	@ (80131ac <tcp_rexmit_rto_prepare+0xd8>)
 80130ea:	4831      	ldr	r0, [pc, #196]	@ (80131b0 <tcp_rexmit_rto_prepare+0xdc>)
 80130ec:	f004 fd6e 	bl	8017bcc <iprintf>

  if (pcb->unacked == NULL) {
 80130f0:	687b      	ldr	r3, [r7, #4]
 80130f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80130f4:	2b00      	cmp	r3, #0
 80130f6:	d102      	bne.n	80130fe <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80130f8:	f06f 0305 	mvn.w	r3, #5
 80130fc:	e050      	b.n	80131a0 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013102:	60fb      	str	r3, [r7, #12]
 8013104:	e00b      	b.n	801311e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8013106:	68f8      	ldr	r0, [r7, #12]
 8013108:	f7ff fee4 	bl	8012ed4 <tcp_output_segment_busy>
 801310c:	4603      	mov	r3, r0
 801310e:	2b00      	cmp	r3, #0
 8013110:	d002      	beq.n	8013118 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8013112:	f06f 0305 	mvn.w	r3, #5
 8013116:	e043      	b.n	80131a0 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8013118:	68fb      	ldr	r3, [r7, #12]
 801311a:	681b      	ldr	r3, [r3, #0]
 801311c:	60fb      	str	r3, [r7, #12]
 801311e:	68fb      	ldr	r3, [r7, #12]
 8013120:	681b      	ldr	r3, [r3, #0]
 8013122:	2b00      	cmp	r3, #0
 8013124:	d1ef      	bne.n	8013106 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8013126:	68f8      	ldr	r0, [r7, #12]
 8013128:	f7ff fed4 	bl	8012ed4 <tcp_output_segment_busy>
 801312c:	4603      	mov	r3, r0
 801312e:	2b00      	cmp	r3, #0
 8013130:	d002      	beq.n	8013138 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8013132:	f06f 0305 	mvn.w	r3, #5
 8013136:	e033      	b.n	80131a0 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 801313c:	68fb      	ldr	r3, [r7, #12]
 801313e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8013148:	687b      	ldr	r3, [r7, #4]
 801314a:	2200      	movs	r2, #0
 801314c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	8b5b      	ldrh	r3, [r3, #26]
 8013152:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8013156:	b29a      	uxth	r2, r3
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801315c:	68fb      	ldr	r3, [r7, #12]
 801315e:	68db      	ldr	r3, [r3, #12]
 8013160:	685b      	ldr	r3, [r3, #4]
 8013162:	4618      	mov	r0, r3
 8013164:	f7f9 f8d6 	bl	800c314 <lwip_htonl>
 8013168:	4604      	mov	r4, r0
 801316a:	68fb      	ldr	r3, [r7, #12]
 801316c:	891b      	ldrh	r3, [r3, #8]
 801316e:	461d      	mov	r5, r3
 8013170:	68fb      	ldr	r3, [r7, #12]
 8013172:	68db      	ldr	r3, [r3, #12]
 8013174:	899b      	ldrh	r3, [r3, #12]
 8013176:	b29b      	uxth	r3, r3
 8013178:	4618      	mov	r0, r3
 801317a:	f7f9 f8b5 	bl	800c2e8 <lwip_htons>
 801317e:	4603      	mov	r3, r0
 8013180:	b2db      	uxtb	r3, r3
 8013182:	f003 0303 	and.w	r3, r3, #3
 8013186:	2b00      	cmp	r3, #0
 8013188:	d001      	beq.n	801318e <tcp_rexmit_rto_prepare+0xba>
 801318a:	2301      	movs	r3, #1
 801318c:	e000      	b.n	8013190 <tcp_rexmit_rto_prepare+0xbc>
 801318e:	2300      	movs	r3, #0
 8013190:	442b      	add	r3, r5
 8013192:	18e2      	adds	r2, r4, r3
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8013198:	687b      	ldr	r3, [r7, #4]
 801319a:	2200      	movs	r2, #0
 801319c:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 801319e:	2300      	movs	r3, #0
}
 80131a0:	4618      	mov	r0, r3
 80131a2:	3710      	adds	r7, #16
 80131a4:	46bd      	mov	sp, r7
 80131a6:	bdb0      	pop	{r4, r5, r7, pc}
 80131a8:	08021fc4 	.word	0x08021fc4
 80131ac:	08022600 	.word	0x08022600
 80131b0:	08022018 	.word	0x08022018

080131b4 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80131b4:	b580      	push	{r7, lr}
 80131b6:	b082      	sub	sp, #8
 80131b8:	af00      	add	r7, sp, #0
 80131ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80131bc:	687b      	ldr	r3, [r7, #4]
 80131be:	2b00      	cmp	r3, #0
 80131c0:	d106      	bne.n	80131d0 <tcp_rexmit_rto_commit+0x1c>
 80131c2:	4b0d      	ldr	r3, [pc, #52]	@ (80131f8 <tcp_rexmit_rto_commit+0x44>)
 80131c4:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 80131c8:	490c      	ldr	r1, [pc, #48]	@ (80131fc <tcp_rexmit_rto_commit+0x48>)
 80131ca:	480d      	ldr	r0, [pc, #52]	@ (8013200 <tcp_rexmit_rto_commit+0x4c>)
 80131cc:	f004 fcfe 	bl	8017bcc <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80131d0:	687b      	ldr	r3, [r7, #4]
 80131d2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80131d6:	2bff      	cmp	r3, #255	@ 0xff
 80131d8:	d007      	beq.n	80131ea <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80131e0:	3301      	adds	r3, #1
 80131e2:	b2da      	uxtb	r2, r3
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80131ea:	6878      	ldr	r0, [r7, #4]
 80131ec:	f7ff fc7e 	bl	8012aec <tcp_output>
}
 80131f0:	bf00      	nop
 80131f2:	3708      	adds	r7, #8
 80131f4:	46bd      	mov	sp, r7
 80131f6:	bd80      	pop	{r7, pc}
 80131f8:	08021fc4 	.word	0x08021fc4
 80131fc:	08022624 	.word	0x08022624
 8013200:	08022018 	.word	0x08022018

08013204 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8013204:	b580      	push	{r7, lr}
 8013206:	b082      	sub	sp, #8
 8013208:	af00      	add	r7, sp, #0
 801320a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	2b00      	cmp	r3, #0
 8013210:	d106      	bne.n	8013220 <tcp_rexmit_rto+0x1c>
 8013212:	4b0a      	ldr	r3, [pc, #40]	@ (801323c <tcp_rexmit_rto+0x38>)
 8013214:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 8013218:	4909      	ldr	r1, [pc, #36]	@ (8013240 <tcp_rexmit_rto+0x3c>)
 801321a:	480a      	ldr	r0, [pc, #40]	@ (8013244 <tcp_rexmit_rto+0x40>)
 801321c:	f004 fcd6 	bl	8017bcc <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8013220:	6878      	ldr	r0, [r7, #4]
 8013222:	f7ff ff57 	bl	80130d4 <tcp_rexmit_rto_prepare>
 8013226:	4603      	mov	r3, r0
 8013228:	2b00      	cmp	r3, #0
 801322a:	d102      	bne.n	8013232 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801322c:	6878      	ldr	r0, [r7, #4]
 801322e:	f7ff ffc1 	bl	80131b4 <tcp_rexmit_rto_commit>
  }
}
 8013232:	bf00      	nop
 8013234:	3708      	adds	r7, #8
 8013236:	46bd      	mov	sp, r7
 8013238:	bd80      	pop	{r7, pc}
 801323a:	bf00      	nop
 801323c:	08021fc4 	.word	0x08021fc4
 8013240:	08022648 	.word	0x08022648
 8013244:	08022018 	.word	0x08022018

08013248 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8013248:	b590      	push	{r4, r7, lr}
 801324a:	b085      	sub	sp, #20
 801324c:	af00      	add	r7, sp, #0
 801324e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8013250:	687b      	ldr	r3, [r7, #4]
 8013252:	2b00      	cmp	r3, #0
 8013254:	d106      	bne.n	8013264 <tcp_rexmit+0x1c>
 8013256:	4b2f      	ldr	r3, [pc, #188]	@ (8013314 <tcp_rexmit+0xcc>)
 8013258:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 801325c:	492e      	ldr	r1, [pc, #184]	@ (8013318 <tcp_rexmit+0xd0>)
 801325e:	482f      	ldr	r0, [pc, #188]	@ (801331c <tcp_rexmit+0xd4>)
 8013260:	f004 fcb4 	bl	8017bcc <iprintf>

  if (pcb->unacked == NULL) {
 8013264:	687b      	ldr	r3, [r7, #4]
 8013266:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013268:	2b00      	cmp	r3, #0
 801326a:	d102      	bne.n	8013272 <tcp_rexmit+0x2a>
    return ERR_VAL;
 801326c:	f06f 0305 	mvn.w	r3, #5
 8013270:	e04c      	b.n	801330c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8013272:	687b      	ldr	r3, [r7, #4]
 8013274:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013276:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8013278:	68b8      	ldr	r0, [r7, #8]
 801327a:	f7ff fe2b 	bl	8012ed4 <tcp_output_segment_busy>
 801327e:	4603      	mov	r3, r0
 8013280:	2b00      	cmp	r3, #0
 8013282:	d002      	beq.n	801328a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8013284:	f06f 0305 	mvn.w	r3, #5
 8013288:	e040      	b.n	801330c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801328a:	68bb      	ldr	r3, [r7, #8]
 801328c:	681a      	ldr	r2, [r3, #0]
 801328e:	687b      	ldr	r3, [r7, #4]
 8013290:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 8013292:	687b      	ldr	r3, [r7, #4]
 8013294:	336c      	adds	r3, #108	@ 0x6c
 8013296:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8013298:	e002      	b.n	80132a0 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801329a:	68fb      	ldr	r3, [r7, #12]
 801329c:	681b      	ldr	r3, [r3, #0]
 801329e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80132a0:	68fb      	ldr	r3, [r7, #12]
 80132a2:	681b      	ldr	r3, [r3, #0]
 80132a4:	2b00      	cmp	r3, #0
 80132a6:	d011      	beq.n	80132cc <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80132a8:	68fb      	ldr	r3, [r7, #12]
 80132aa:	681b      	ldr	r3, [r3, #0]
 80132ac:	68db      	ldr	r3, [r3, #12]
 80132ae:	685b      	ldr	r3, [r3, #4]
 80132b0:	4618      	mov	r0, r3
 80132b2:	f7f9 f82f 	bl	800c314 <lwip_htonl>
 80132b6:	4604      	mov	r4, r0
 80132b8:	68bb      	ldr	r3, [r7, #8]
 80132ba:	68db      	ldr	r3, [r3, #12]
 80132bc:	685b      	ldr	r3, [r3, #4]
 80132be:	4618      	mov	r0, r3
 80132c0:	f7f9 f828 	bl	800c314 <lwip_htonl>
 80132c4:	4603      	mov	r3, r0
 80132c6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80132c8:	2b00      	cmp	r3, #0
 80132ca:	dbe6      	blt.n	801329a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80132cc:	68fb      	ldr	r3, [r7, #12]
 80132ce:	681a      	ldr	r2, [r3, #0]
 80132d0:	68bb      	ldr	r3, [r7, #8]
 80132d2:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80132d4:	68fb      	ldr	r3, [r7, #12]
 80132d6:	68ba      	ldr	r2, [r7, #8]
 80132d8:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80132da:	68bb      	ldr	r3, [r7, #8]
 80132dc:	681b      	ldr	r3, [r3, #0]
 80132de:	2b00      	cmp	r3, #0
 80132e0:	d103      	bne.n	80132ea <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	2200      	movs	r2, #0
 80132e6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80132ea:	687b      	ldr	r3, [r7, #4]
 80132ec:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80132f0:	2bff      	cmp	r3, #255	@ 0xff
 80132f2:	d007      	beq.n	8013304 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80132fa:	3301      	adds	r3, #1
 80132fc:	b2da      	uxtb	r2, r3
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8013304:	687b      	ldr	r3, [r7, #4]
 8013306:	2200      	movs	r2, #0
 8013308:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801330a:	2300      	movs	r3, #0
}
 801330c:	4618      	mov	r0, r3
 801330e:	3714      	adds	r7, #20
 8013310:	46bd      	mov	sp, r7
 8013312:	bd90      	pop	{r4, r7, pc}
 8013314:	08021fc4 	.word	0x08021fc4
 8013318:	08022664 	.word	0x08022664
 801331c:	08022018 	.word	0x08022018

08013320 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8013320:	b580      	push	{r7, lr}
 8013322:	b082      	sub	sp, #8
 8013324:	af00      	add	r7, sp, #0
 8013326:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	2b00      	cmp	r3, #0
 801332c:	d106      	bne.n	801333c <tcp_rexmit_fast+0x1c>
 801332e:	4b2a      	ldr	r3, [pc, #168]	@ (80133d8 <tcp_rexmit_fast+0xb8>)
 8013330:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 8013334:	4929      	ldr	r1, [pc, #164]	@ (80133dc <tcp_rexmit_fast+0xbc>)
 8013336:	482a      	ldr	r0, [pc, #168]	@ (80133e0 <tcp_rexmit_fast+0xc0>)
 8013338:	f004 fc48 	bl	8017bcc <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013340:	2b00      	cmp	r3, #0
 8013342:	d044      	beq.n	80133ce <tcp_rexmit_fast+0xae>
 8013344:	687b      	ldr	r3, [r7, #4]
 8013346:	8b5b      	ldrh	r3, [r3, #26]
 8013348:	f003 0304 	and.w	r3, r3, #4
 801334c:	2b00      	cmp	r3, #0
 801334e:	d13e      	bne.n	80133ce <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8013350:	6878      	ldr	r0, [r7, #4]
 8013352:	f7ff ff79 	bl	8013248 <tcp_rexmit>
 8013356:	4603      	mov	r3, r0
 8013358:	2b00      	cmp	r3, #0
 801335a:	d138      	bne.n	80133ce <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801335c:	687b      	ldr	r3, [r7, #4]
 801335e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8013368:	4293      	cmp	r3, r2
 801336a:	bf28      	it	cs
 801336c:	4613      	movcs	r3, r2
 801336e:	b29b      	uxth	r3, r3
 8013370:	0fda      	lsrs	r2, r3, #31
 8013372:	4413      	add	r3, r2
 8013374:	105b      	asrs	r3, r3, #1
 8013376:	b29a      	uxth	r2, r3
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8013384:	461a      	mov	r2, r3
 8013386:	687b      	ldr	r3, [r7, #4]
 8013388:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801338a:	005b      	lsls	r3, r3, #1
 801338c:	429a      	cmp	r2, r3
 801338e:	d206      	bcs.n	801339e <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013394:	005b      	lsls	r3, r3, #1
 8013396:	b29a      	uxth	r2, r3
 8013398:	687b      	ldr	r3, [r7, #4]
 801339a:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801339e:	687b      	ldr	r3, [r7, #4]
 80133a0:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80133a8:	4619      	mov	r1, r3
 80133aa:	0049      	lsls	r1, r1, #1
 80133ac:	440b      	add	r3, r1
 80133ae:	b29b      	uxth	r3, r3
 80133b0:	4413      	add	r3, r2
 80133b2:	b29a      	uxth	r2, r3
 80133b4:	687b      	ldr	r3, [r7, #4]
 80133b6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	8b5b      	ldrh	r3, [r3, #26]
 80133be:	f043 0304 	orr.w	r3, r3, #4
 80133c2:	b29a      	uxth	r2, r3
 80133c4:	687b      	ldr	r3, [r7, #4]
 80133c6:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	2200      	movs	r2, #0
 80133cc:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 80133ce:	bf00      	nop
 80133d0:	3708      	adds	r7, #8
 80133d2:	46bd      	mov	sp, r7
 80133d4:	bd80      	pop	{r7, pc}
 80133d6:	bf00      	nop
 80133d8:	08021fc4 	.word	0x08021fc4
 80133dc:	0802267c 	.word	0x0802267c
 80133e0:	08022018 	.word	0x08022018

080133e4 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80133e4:	b580      	push	{r7, lr}
 80133e6:	b086      	sub	sp, #24
 80133e8:	af00      	add	r7, sp, #0
 80133ea:	60f8      	str	r0, [r7, #12]
 80133ec:	607b      	str	r3, [r7, #4]
 80133ee:	460b      	mov	r3, r1
 80133f0:	817b      	strh	r3, [r7, #10]
 80133f2:	4613      	mov	r3, r2
 80133f4:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80133f6:	897a      	ldrh	r2, [r7, #10]
 80133f8:	893b      	ldrh	r3, [r7, #8]
 80133fa:	4413      	add	r3, r2
 80133fc:	b29b      	uxth	r3, r3
 80133fe:	3314      	adds	r3, #20
 8013400:	b29b      	uxth	r3, r3
 8013402:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8013406:	4619      	mov	r1, r3
 8013408:	2022      	movs	r0, #34	@ 0x22
 801340a:	f7fa fab1 	bl	800d970 <pbuf_alloc>
 801340e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8013410:	697b      	ldr	r3, [r7, #20]
 8013412:	2b00      	cmp	r3, #0
 8013414:	d04d      	beq.n	80134b2 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8013416:	897b      	ldrh	r3, [r7, #10]
 8013418:	3313      	adds	r3, #19
 801341a:	697a      	ldr	r2, [r7, #20]
 801341c:	8952      	ldrh	r2, [r2, #10]
 801341e:	4293      	cmp	r3, r2
 8013420:	db06      	blt.n	8013430 <tcp_output_alloc_header_common+0x4c>
 8013422:	4b26      	ldr	r3, [pc, #152]	@ (80134bc <tcp_output_alloc_header_common+0xd8>)
 8013424:	f240 7223 	movw	r2, #1827	@ 0x723
 8013428:	4925      	ldr	r1, [pc, #148]	@ (80134c0 <tcp_output_alloc_header_common+0xdc>)
 801342a:	4826      	ldr	r0, [pc, #152]	@ (80134c4 <tcp_output_alloc_header_common+0xe0>)
 801342c:	f004 fbce 	bl	8017bcc <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8013430:	697b      	ldr	r3, [r7, #20]
 8013432:	685b      	ldr	r3, [r3, #4]
 8013434:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8013436:	8c3b      	ldrh	r3, [r7, #32]
 8013438:	4618      	mov	r0, r3
 801343a:	f7f8 ff55 	bl	800c2e8 <lwip_htons>
 801343e:	4603      	mov	r3, r0
 8013440:	461a      	mov	r2, r3
 8013442:	693b      	ldr	r3, [r7, #16]
 8013444:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8013446:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013448:	4618      	mov	r0, r3
 801344a:	f7f8 ff4d 	bl	800c2e8 <lwip_htons>
 801344e:	4603      	mov	r3, r0
 8013450:	461a      	mov	r2, r3
 8013452:	693b      	ldr	r3, [r7, #16]
 8013454:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8013456:	693b      	ldr	r3, [r7, #16]
 8013458:	687a      	ldr	r2, [r7, #4]
 801345a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801345c:	68f8      	ldr	r0, [r7, #12]
 801345e:	f7f8 ff59 	bl	800c314 <lwip_htonl>
 8013462:	4602      	mov	r2, r0
 8013464:	693b      	ldr	r3, [r7, #16]
 8013466:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8013468:	897b      	ldrh	r3, [r7, #10]
 801346a:	089b      	lsrs	r3, r3, #2
 801346c:	b29b      	uxth	r3, r3
 801346e:	3305      	adds	r3, #5
 8013470:	b29b      	uxth	r3, r3
 8013472:	031b      	lsls	r3, r3, #12
 8013474:	b29a      	uxth	r2, r3
 8013476:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801347a:	b29b      	uxth	r3, r3
 801347c:	4313      	orrs	r3, r2
 801347e:	b29b      	uxth	r3, r3
 8013480:	4618      	mov	r0, r3
 8013482:	f7f8 ff31 	bl	800c2e8 <lwip_htons>
 8013486:	4603      	mov	r3, r0
 8013488:	461a      	mov	r2, r3
 801348a:	693b      	ldr	r3, [r7, #16]
 801348c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801348e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8013490:	4618      	mov	r0, r3
 8013492:	f7f8 ff29 	bl	800c2e8 <lwip_htons>
 8013496:	4603      	mov	r3, r0
 8013498:	461a      	mov	r2, r3
 801349a:	693b      	ldr	r3, [r7, #16]
 801349c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801349e:	693b      	ldr	r3, [r7, #16]
 80134a0:	2200      	movs	r2, #0
 80134a2:	741a      	strb	r2, [r3, #16]
 80134a4:	2200      	movs	r2, #0
 80134a6:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80134a8:	693b      	ldr	r3, [r7, #16]
 80134aa:	2200      	movs	r2, #0
 80134ac:	749a      	strb	r2, [r3, #18]
 80134ae:	2200      	movs	r2, #0
 80134b0:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80134b2:	697b      	ldr	r3, [r7, #20]
}
 80134b4:	4618      	mov	r0, r3
 80134b6:	3718      	adds	r7, #24
 80134b8:	46bd      	mov	sp, r7
 80134ba:	bd80      	pop	{r7, pc}
 80134bc:	08021fc4 	.word	0x08021fc4
 80134c0:	0802269c 	.word	0x0802269c
 80134c4:	08022018 	.word	0x08022018

080134c8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80134c8:	b5b0      	push	{r4, r5, r7, lr}
 80134ca:	b08a      	sub	sp, #40	@ 0x28
 80134cc:	af04      	add	r7, sp, #16
 80134ce:	60f8      	str	r0, [r7, #12]
 80134d0:	607b      	str	r3, [r7, #4]
 80134d2:	460b      	mov	r3, r1
 80134d4:	817b      	strh	r3, [r7, #10]
 80134d6:	4613      	mov	r3, r2
 80134d8:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80134da:	68fb      	ldr	r3, [r7, #12]
 80134dc:	2b00      	cmp	r3, #0
 80134de:	d106      	bne.n	80134ee <tcp_output_alloc_header+0x26>
 80134e0:	4b15      	ldr	r3, [pc, #84]	@ (8013538 <tcp_output_alloc_header+0x70>)
 80134e2:	f240 7242 	movw	r2, #1858	@ 0x742
 80134e6:	4915      	ldr	r1, [pc, #84]	@ (801353c <tcp_output_alloc_header+0x74>)
 80134e8:	4815      	ldr	r0, [pc, #84]	@ (8013540 <tcp_output_alloc_header+0x78>)
 80134ea:	f004 fb6f 	bl	8017bcc <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80134ee:	68fb      	ldr	r3, [r7, #12]
 80134f0:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80134f2:	68fb      	ldr	r3, [r7, #12]
 80134f4:	8adb      	ldrh	r3, [r3, #22]
 80134f6:	68fa      	ldr	r2, [r7, #12]
 80134f8:	8b12      	ldrh	r2, [r2, #24]
 80134fa:	68f9      	ldr	r1, [r7, #12]
 80134fc:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 80134fe:	893d      	ldrh	r5, [r7, #8]
 8013500:	897c      	ldrh	r4, [r7, #10]
 8013502:	9103      	str	r1, [sp, #12]
 8013504:	2110      	movs	r1, #16
 8013506:	9102      	str	r1, [sp, #8]
 8013508:	9201      	str	r2, [sp, #4]
 801350a:	9300      	str	r3, [sp, #0]
 801350c:	687b      	ldr	r3, [r7, #4]
 801350e:	462a      	mov	r2, r5
 8013510:	4621      	mov	r1, r4
 8013512:	f7ff ff67 	bl	80133e4 <tcp_output_alloc_header_common>
 8013516:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8013518:	697b      	ldr	r3, [r7, #20]
 801351a:	2b00      	cmp	r3, #0
 801351c:	d006      	beq.n	801352c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801351e:	68fb      	ldr	r3, [r7, #12]
 8013520:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013522:	68fa      	ldr	r2, [r7, #12]
 8013524:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8013526:	441a      	add	r2, r3
 8013528:	68fb      	ldr	r3, [r7, #12]
 801352a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 801352c:	697b      	ldr	r3, [r7, #20]
}
 801352e:	4618      	mov	r0, r3
 8013530:	3718      	adds	r7, #24
 8013532:	46bd      	mov	sp, r7
 8013534:	bdb0      	pop	{r4, r5, r7, pc}
 8013536:	bf00      	nop
 8013538:	08021fc4 	.word	0x08021fc4
 801353c:	080226cc 	.word	0x080226cc
 8013540:	08022018 	.word	0x08022018

08013544 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8013544:	b580      	push	{r7, lr}
 8013546:	b088      	sub	sp, #32
 8013548:	af00      	add	r7, sp, #0
 801354a:	60f8      	str	r0, [r7, #12]
 801354c:	60b9      	str	r1, [r7, #8]
 801354e:	4611      	mov	r1, r2
 8013550:	461a      	mov	r2, r3
 8013552:	460b      	mov	r3, r1
 8013554:	71fb      	strb	r3, [r7, #7]
 8013556:	4613      	mov	r3, r2
 8013558:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801355a:	2300      	movs	r3, #0
 801355c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801355e:	68bb      	ldr	r3, [r7, #8]
 8013560:	2b00      	cmp	r3, #0
 8013562:	d106      	bne.n	8013572 <tcp_output_fill_options+0x2e>
 8013564:	4b12      	ldr	r3, [pc, #72]	@ (80135b0 <tcp_output_fill_options+0x6c>)
 8013566:	f240 7256 	movw	r2, #1878	@ 0x756
 801356a:	4912      	ldr	r1, [pc, #72]	@ (80135b4 <tcp_output_fill_options+0x70>)
 801356c:	4812      	ldr	r0, [pc, #72]	@ (80135b8 <tcp_output_fill_options+0x74>)
 801356e:	f004 fb2d 	bl	8017bcc <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8013572:	68bb      	ldr	r3, [r7, #8]
 8013574:	685b      	ldr	r3, [r3, #4]
 8013576:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8013578:	69bb      	ldr	r3, [r7, #24]
 801357a:	3314      	adds	r3, #20
 801357c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801357e:	8bfb      	ldrh	r3, [r7, #30]
 8013580:	009b      	lsls	r3, r3, #2
 8013582:	461a      	mov	r2, r3
 8013584:	79fb      	ldrb	r3, [r7, #7]
 8013586:	009b      	lsls	r3, r3, #2
 8013588:	f003 0304 	and.w	r3, r3, #4
 801358c:	4413      	add	r3, r2
 801358e:	3314      	adds	r3, #20
 8013590:	69ba      	ldr	r2, [r7, #24]
 8013592:	4413      	add	r3, r2
 8013594:	697a      	ldr	r2, [r7, #20]
 8013596:	429a      	cmp	r2, r3
 8013598:	d006      	beq.n	80135a8 <tcp_output_fill_options+0x64>
 801359a:	4b05      	ldr	r3, [pc, #20]	@ (80135b0 <tcp_output_fill_options+0x6c>)
 801359c:	f240 7275 	movw	r2, #1909	@ 0x775
 80135a0:	4906      	ldr	r1, [pc, #24]	@ (80135bc <tcp_output_fill_options+0x78>)
 80135a2:	4805      	ldr	r0, [pc, #20]	@ (80135b8 <tcp_output_fill_options+0x74>)
 80135a4:	f004 fb12 	bl	8017bcc <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80135a8:	bf00      	nop
 80135aa:	3720      	adds	r7, #32
 80135ac:	46bd      	mov	sp, r7
 80135ae:	bd80      	pop	{r7, pc}
 80135b0:	08021fc4 	.word	0x08021fc4
 80135b4:	080226f4 	.word	0x080226f4
 80135b8:	08022018 	.word	0x08022018
 80135bc:	080225ec 	.word	0x080225ec

080135c0 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80135c0:	b580      	push	{r7, lr}
 80135c2:	b08a      	sub	sp, #40	@ 0x28
 80135c4:	af04      	add	r7, sp, #16
 80135c6:	60f8      	str	r0, [r7, #12]
 80135c8:	60b9      	str	r1, [r7, #8]
 80135ca:	607a      	str	r2, [r7, #4]
 80135cc:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80135ce:	68bb      	ldr	r3, [r7, #8]
 80135d0:	2b00      	cmp	r3, #0
 80135d2:	d106      	bne.n	80135e2 <tcp_output_control_segment+0x22>
 80135d4:	4b1c      	ldr	r3, [pc, #112]	@ (8013648 <tcp_output_control_segment+0x88>)
 80135d6:	f240 7287 	movw	r2, #1927	@ 0x787
 80135da:	491c      	ldr	r1, [pc, #112]	@ (801364c <tcp_output_control_segment+0x8c>)
 80135dc:	481c      	ldr	r0, [pc, #112]	@ (8013650 <tcp_output_control_segment+0x90>)
 80135de:	f004 faf5 	bl	8017bcc <iprintf>

  netif = tcp_route(pcb, src, dst);
 80135e2:	683a      	ldr	r2, [r7, #0]
 80135e4:	6879      	ldr	r1, [r7, #4]
 80135e6:	68f8      	ldr	r0, [r7, #12]
 80135e8:	f7fe ff42 	bl	8012470 <tcp_route>
 80135ec:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80135ee:	693b      	ldr	r3, [r7, #16]
 80135f0:	2b00      	cmp	r3, #0
 80135f2:	d102      	bne.n	80135fa <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80135f4:	23fc      	movs	r3, #252	@ 0xfc
 80135f6:	75fb      	strb	r3, [r7, #23]
 80135f8:	e01c      	b.n	8013634 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80135fa:	68fb      	ldr	r3, [r7, #12]
 80135fc:	2b00      	cmp	r3, #0
 80135fe:	d006      	beq.n	801360e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8013600:	68fb      	ldr	r3, [r7, #12]
 8013602:	7adb      	ldrb	r3, [r3, #11]
 8013604:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8013606:	68fb      	ldr	r3, [r7, #12]
 8013608:	7a9b      	ldrb	r3, [r3, #10]
 801360a:	757b      	strb	r3, [r7, #21]
 801360c:	e003      	b.n	8013616 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801360e:	23ff      	movs	r3, #255	@ 0xff
 8013610:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8013612:	2300      	movs	r3, #0
 8013614:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8013616:	7dba      	ldrb	r2, [r7, #22]
 8013618:	693b      	ldr	r3, [r7, #16]
 801361a:	9302      	str	r3, [sp, #8]
 801361c:	2306      	movs	r3, #6
 801361e:	9301      	str	r3, [sp, #4]
 8013620:	7d7b      	ldrb	r3, [r7, #21]
 8013622:	9300      	str	r3, [sp, #0]
 8013624:	4613      	mov	r3, r2
 8013626:	683a      	ldr	r2, [r7, #0]
 8013628:	6879      	ldr	r1, [r7, #4]
 801362a:	68b8      	ldr	r0, [r7, #8]
 801362c:	f002 fb02 	bl	8015c34 <ip4_output_if>
 8013630:	4603      	mov	r3, r0
 8013632:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8013634:	68b8      	ldr	r0, [r7, #8]
 8013636:	f7fa fc7f 	bl	800df38 <pbuf_free>
  return err;
 801363a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801363e:	4618      	mov	r0, r3
 8013640:	3718      	adds	r7, #24
 8013642:	46bd      	mov	sp, r7
 8013644:	bd80      	pop	{r7, pc}
 8013646:	bf00      	nop
 8013648:	08021fc4 	.word	0x08021fc4
 801364c:	0802271c 	.word	0x0802271c
 8013650:	08022018 	.word	0x08022018

08013654 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8013654:	b590      	push	{r4, r7, lr}
 8013656:	b08b      	sub	sp, #44	@ 0x2c
 8013658:	af04      	add	r7, sp, #16
 801365a:	60f8      	str	r0, [r7, #12]
 801365c:	60b9      	str	r1, [r7, #8]
 801365e:	607a      	str	r2, [r7, #4]
 8013660:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8013662:	683b      	ldr	r3, [r7, #0]
 8013664:	2b00      	cmp	r3, #0
 8013666:	d106      	bne.n	8013676 <tcp_rst+0x22>
 8013668:	4b1f      	ldr	r3, [pc, #124]	@ (80136e8 <tcp_rst+0x94>)
 801366a:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 801366e:	491f      	ldr	r1, [pc, #124]	@ (80136ec <tcp_rst+0x98>)
 8013670:	481f      	ldr	r0, [pc, #124]	@ (80136f0 <tcp_rst+0x9c>)
 8013672:	f004 faab 	bl	8017bcc <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8013676:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013678:	2b00      	cmp	r3, #0
 801367a:	d106      	bne.n	801368a <tcp_rst+0x36>
 801367c:	4b1a      	ldr	r3, [pc, #104]	@ (80136e8 <tcp_rst+0x94>)
 801367e:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 8013682:	491c      	ldr	r1, [pc, #112]	@ (80136f4 <tcp_rst+0xa0>)
 8013684:	481a      	ldr	r0, [pc, #104]	@ (80136f0 <tcp_rst+0x9c>)
 8013686:	f004 faa1 	bl	8017bcc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801368a:	2300      	movs	r3, #0
 801368c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801368e:	f246 0308 	movw	r3, #24584	@ 0x6008
 8013692:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8013694:	7dfb      	ldrb	r3, [r7, #23]
 8013696:	b29c      	uxth	r4, r3
 8013698:	68b8      	ldr	r0, [r7, #8]
 801369a:	f7f8 fe3b 	bl	800c314 <lwip_htonl>
 801369e:	4602      	mov	r2, r0
 80136a0:	8abb      	ldrh	r3, [r7, #20]
 80136a2:	9303      	str	r3, [sp, #12]
 80136a4:	2314      	movs	r3, #20
 80136a6:	9302      	str	r3, [sp, #8]
 80136a8:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80136aa:	9301      	str	r3, [sp, #4]
 80136ac:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80136ae:	9300      	str	r3, [sp, #0]
 80136b0:	4613      	mov	r3, r2
 80136b2:	2200      	movs	r2, #0
 80136b4:	4621      	mov	r1, r4
 80136b6:	6878      	ldr	r0, [r7, #4]
 80136b8:	f7ff fe94 	bl	80133e4 <tcp_output_alloc_header_common>
 80136bc:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80136be:	693b      	ldr	r3, [r7, #16]
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	d00c      	beq.n	80136de <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80136c4:	7dfb      	ldrb	r3, [r7, #23]
 80136c6:	2200      	movs	r2, #0
 80136c8:	6939      	ldr	r1, [r7, #16]
 80136ca:	68f8      	ldr	r0, [r7, #12]
 80136cc:	f7ff ff3a 	bl	8013544 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80136d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80136d2:	683a      	ldr	r2, [r7, #0]
 80136d4:	6939      	ldr	r1, [r7, #16]
 80136d6:	68f8      	ldr	r0, [r7, #12]
 80136d8:	f7ff ff72 	bl	80135c0 <tcp_output_control_segment>
 80136dc:	e000      	b.n	80136e0 <tcp_rst+0x8c>
    return;
 80136de:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80136e0:	371c      	adds	r7, #28
 80136e2:	46bd      	mov	sp, r7
 80136e4:	bd90      	pop	{r4, r7, pc}
 80136e6:	bf00      	nop
 80136e8:	08021fc4 	.word	0x08021fc4
 80136ec:	08022748 	.word	0x08022748
 80136f0:	08022018 	.word	0x08022018
 80136f4:	08022764 	.word	0x08022764

080136f8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80136f8:	b590      	push	{r4, r7, lr}
 80136fa:	b087      	sub	sp, #28
 80136fc:	af00      	add	r7, sp, #0
 80136fe:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8013700:	2300      	movs	r3, #0
 8013702:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8013704:	2300      	movs	r3, #0
 8013706:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8013708:	687b      	ldr	r3, [r7, #4]
 801370a:	2b00      	cmp	r3, #0
 801370c:	d106      	bne.n	801371c <tcp_send_empty_ack+0x24>
 801370e:	4b28      	ldr	r3, [pc, #160]	@ (80137b0 <tcp_send_empty_ack+0xb8>)
 8013710:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 8013714:	4927      	ldr	r1, [pc, #156]	@ (80137b4 <tcp_send_empty_ack+0xbc>)
 8013716:	4828      	ldr	r0, [pc, #160]	@ (80137b8 <tcp_send_empty_ack+0xc0>)
 8013718:	f004 fa58 	bl	8017bcc <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801371c:	7dfb      	ldrb	r3, [r7, #23]
 801371e:	009b      	lsls	r3, r3, #2
 8013720:	b2db      	uxtb	r3, r3
 8013722:	f003 0304 	and.w	r3, r3, #4
 8013726:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8013728:	7d7b      	ldrb	r3, [r7, #21]
 801372a:	b29c      	uxth	r4, r3
 801372c:	687b      	ldr	r3, [r7, #4]
 801372e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013730:	4618      	mov	r0, r3
 8013732:	f7f8 fdef 	bl	800c314 <lwip_htonl>
 8013736:	4603      	mov	r3, r0
 8013738:	2200      	movs	r2, #0
 801373a:	4621      	mov	r1, r4
 801373c:	6878      	ldr	r0, [r7, #4]
 801373e:	f7ff fec3 	bl	80134c8 <tcp_output_alloc_header>
 8013742:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013744:	693b      	ldr	r3, [r7, #16]
 8013746:	2b00      	cmp	r3, #0
 8013748:	d109      	bne.n	801375e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801374a:	687b      	ldr	r3, [r7, #4]
 801374c:	8b5b      	ldrh	r3, [r3, #26]
 801374e:	f043 0303 	orr.w	r3, r3, #3
 8013752:	b29a      	uxth	r2, r3
 8013754:	687b      	ldr	r3, [r7, #4]
 8013756:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8013758:	f06f 0301 	mvn.w	r3, #1
 801375c:	e023      	b.n	80137a6 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801375e:	7dbb      	ldrb	r3, [r7, #22]
 8013760:	7dfa      	ldrb	r2, [r7, #23]
 8013762:	6939      	ldr	r1, [r7, #16]
 8013764:	6878      	ldr	r0, [r7, #4]
 8013766:	f7ff feed 	bl	8013544 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801376a:	687a      	ldr	r2, [r7, #4]
 801376c:	687b      	ldr	r3, [r7, #4]
 801376e:	3304      	adds	r3, #4
 8013770:	6939      	ldr	r1, [r7, #16]
 8013772:	6878      	ldr	r0, [r7, #4]
 8013774:	f7ff ff24 	bl	80135c0 <tcp_output_control_segment>
 8013778:	4603      	mov	r3, r0
 801377a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801377c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013780:	2b00      	cmp	r3, #0
 8013782:	d007      	beq.n	8013794 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	8b5b      	ldrh	r3, [r3, #26]
 8013788:	f043 0303 	orr.w	r3, r3, #3
 801378c:	b29a      	uxth	r2, r3
 801378e:	687b      	ldr	r3, [r7, #4]
 8013790:	835a      	strh	r2, [r3, #26]
 8013792:	e006      	b.n	80137a2 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	8b5b      	ldrh	r3, [r3, #26]
 8013798:	f023 0303 	bic.w	r3, r3, #3
 801379c:	b29a      	uxth	r2, r3
 801379e:	687b      	ldr	r3, [r7, #4]
 80137a0:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80137a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80137a6:	4618      	mov	r0, r3
 80137a8:	371c      	adds	r7, #28
 80137aa:	46bd      	mov	sp, r7
 80137ac:	bd90      	pop	{r4, r7, pc}
 80137ae:	bf00      	nop
 80137b0:	08021fc4 	.word	0x08021fc4
 80137b4:	08022780 	.word	0x08022780
 80137b8:	08022018 	.word	0x08022018

080137bc <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80137bc:	b590      	push	{r4, r7, lr}
 80137be:	b087      	sub	sp, #28
 80137c0:	af00      	add	r7, sp, #0
 80137c2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80137c4:	2300      	movs	r3, #0
 80137c6:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80137c8:	687b      	ldr	r3, [r7, #4]
 80137ca:	2b00      	cmp	r3, #0
 80137cc:	d106      	bne.n	80137dc <tcp_keepalive+0x20>
 80137ce:	4b18      	ldr	r3, [pc, #96]	@ (8013830 <tcp_keepalive+0x74>)
 80137d0:	f640 0224 	movw	r2, #2084	@ 0x824
 80137d4:	4917      	ldr	r1, [pc, #92]	@ (8013834 <tcp_keepalive+0x78>)
 80137d6:	4818      	ldr	r0, [pc, #96]	@ (8013838 <tcp_keepalive+0x7c>)
 80137d8:	f004 f9f8 	bl	8017bcc <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80137dc:	7dfb      	ldrb	r3, [r7, #23]
 80137de:	b29c      	uxth	r4, r3
 80137e0:	687b      	ldr	r3, [r7, #4]
 80137e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80137e4:	3b01      	subs	r3, #1
 80137e6:	4618      	mov	r0, r3
 80137e8:	f7f8 fd94 	bl	800c314 <lwip_htonl>
 80137ec:	4603      	mov	r3, r0
 80137ee:	2200      	movs	r2, #0
 80137f0:	4621      	mov	r1, r4
 80137f2:	6878      	ldr	r0, [r7, #4]
 80137f4:	f7ff fe68 	bl	80134c8 <tcp_output_alloc_header>
 80137f8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80137fa:	693b      	ldr	r3, [r7, #16]
 80137fc:	2b00      	cmp	r3, #0
 80137fe:	d102      	bne.n	8013806 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8013800:	f04f 33ff 	mov.w	r3, #4294967295
 8013804:	e010      	b.n	8013828 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013806:	7dfb      	ldrb	r3, [r7, #23]
 8013808:	2200      	movs	r2, #0
 801380a:	6939      	ldr	r1, [r7, #16]
 801380c:	6878      	ldr	r0, [r7, #4]
 801380e:	f7ff fe99 	bl	8013544 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013812:	687a      	ldr	r2, [r7, #4]
 8013814:	687b      	ldr	r3, [r7, #4]
 8013816:	3304      	adds	r3, #4
 8013818:	6939      	ldr	r1, [r7, #16]
 801381a:	6878      	ldr	r0, [r7, #4]
 801381c:	f7ff fed0 	bl	80135c0 <tcp_output_control_segment>
 8013820:	4603      	mov	r3, r0
 8013822:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013824:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013828:	4618      	mov	r0, r3
 801382a:	371c      	adds	r7, #28
 801382c:	46bd      	mov	sp, r7
 801382e:	bd90      	pop	{r4, r7, pc}
 8013830:	08021fc4 	.word	0x08021fc4
 8013834:	080227a0 	.word	0x080227a0
 8013838:	08022018 	.word	0x08022018

0801383c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801383c:	b590      	push	{r4, r7, lr}
 801383e:	b08b      	sub	sp, #44	@ 0x2c
 8013840:	af00      	add	r7, sp, #0
 8013842:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013844:	2300      	movs	r3, #0
 8013846:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801384a:	687b      	ldr	r3, [r7, #4]
 801384c:	2b00      	cmp	r3, #0
 801384e:	d106      	bne.n	801385e <tcp_zero_window_probe+0x22>
 8013850:	4b4c      	ldr	r3, [pc, #304]	@ (8013984 <tcp_zero_window_probe+0x148>)
 8013852:	f640 024f 	movw	r2, #2127	@ 0x84f
 8013856:	494c      	ldr	r1, [pc, #304]	@ (8013988 <tcp_zero_window_probe+0x14c>)
 8013858:	484c      	ldr	r0, [pc, #304]	@ (801398c <tcp_zero_window_probe+0x150>)
 801385a:	f004 f9b7 	bl	8017bcc <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801385e:	687b      	ldr	r3, [r7, #4]
 8013860:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013862:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8013864:	6a3b      	ldr	r3, [r7, #32]
 8013866:	2b00      	cmp	r3, #0
 8013868:	d101      	bne.n	801386e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801386a:	2300      	movs	r3, #0
 801386c:	e086      	b.n	801397c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801386e:	687b      	ldr	r3, [r7, #4]
 8013870:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8013874:	2bff      	cmp	r3, #255	@ 0xff
 8013876:	d007      	beq.n	8013888 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8013878:	687b      	ldr	r3, [r7, #4]
 801387a:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 801387e:	3301      	adds	r3, #1
 8013880:	b2da      	uxtb	r2, r3
 8013882:	687b      	ldr	r3, [r7, #4]
 8013884:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8013888:	6a3b      	ldr	r3, [r7, #32]
 801388a:	68db      	ldr	r3, [r3, #12]
 801388c:	899b      	ldrh	r3, [r3, #12]
 801388e:	b29b      	uxth	r3, r3
 8013890:	4618      	mov	r0, r3
 8013892:	f7f8 fd29 	bl	800c2e8 <lwip_htons>
 8013896:	4603      	mov	r3, r0
 8013898:	b2db      	uxtb	r3, r3
 801389a:	f003 0301 	and.w	r3, r3, #1
 801389e:	2b00      	cmp	r3, #0
 80138a0:	d005      	beq.n	80138ae <tcp_zero_window_probe+0x72>
 80138a2:	6a3b      	ldr	r3, [r7, #32]
 80138a4:	891b      	ldrh	r3, [r3, #8]
 80138a6:	2b00      	cmp	r3, #0
 80138a8:	d101      	bne.n	80138ae <tcp_zero_window_probe+0x72>
 80138aa:	2301      	movs	r3, #1
 80138ac:	e000      	b.n	80138b0 <tcp_zero_window_probe+0x74>
 80138ae:	2300      	movs	r3, #0
 80138b0:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80138b2:	7ffb      	ldrb	r3, [r7, #31]
 80138b4:	2b00      	cmp	r3, #0
 80138b6:	bf0c      	ite	eq
 80138b8:	2301      	moveq	r3, #1
 80138ba:	2300      	movne	r3, #0
 80138bc:	b2db      	uxtb	r3, r3
 80138be:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80138c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80138c4:	b299      	uxth	r1, r3
 80138c6:	6a3b      	ldr	r3, [r7, #32]
 80138c8:	68db      	ldr	r3, [r3, #12]
 80138ca:	685b      	ldr	r3, [r3, #4]
 80138cc:	8bba      	ldrh	r2, [r7, #28]
 80138ce:	6878      	ldr	r0, [r7, #4]
 80138d0:	f7ff fdfa 	bl	80134c8 <tcp_output_alloc_header>
 80138d4:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80138d6:	69bb      	ldr	r3, [r7, #24]
 80138d8:	2b00      	cmp	r3, #0
 80138da:	d102      	bne.n	80138e2 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80138dc:	f04f 33ff 	mov.w	r3, #4294967295
 80138e0:	e04c      	b.n	801397c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80138e2:	69bb      	ldr	r3, [r7, #24]
 80138e4:	685b      	ldr	r3, [r3, #4]
 80138e6:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80138e8:	7ffb      	ldrb	r3, [r7, #31]
 80138ea:	2b00      	cmp	r3, #0
 80138ec:	d011      	beq.n	8013912 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80138ee:	697b      	ldr	r3, [r7, #20]
 80138f0:	899b      	ldrh	r3, [r3, #12]
 80138f2:	b29b      	uxth	r3, r3
 80138f4:	b21b      	sxth	r3, r3
 80138f6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80138fa:	b21c      	sxth	r4, r3
 80138fc:	2011      	movs	r0, #17
 80138fe:	f7f8 fcf3 	bl	800c2e8 <lwip_htons>
 8013902:	4603      	mov	r3, r0
 8013904:	b21b      	sxth	r3, r3
 8013906:	4323      	orrs	r3, r4
 8013908:	b21b      	sxth	r3, r3
 801390a:	b29a      	uxth	r2, r3
 801390c:	697b      	ldr	r3, [r7, #20]
 801390e:	819a      	strh	r2, [r3, #12]
 8013910:	e010      	b.n	8013934 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8013912:	69bb      	ldr	r3, [r7, #24]
 8013914:	685b      	ldr	r3, [r3, #4]
 8013916:	3314      	adds	r3, #20
 8013918:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801391a:	6a3b      	ldr	r3, [r7, #32]
 801391c:	6858      	ldr	r0, [r3, #4]
 801391e:	6a3b      	ldr	r3, [r7, #32]
 8013920:	685b      	ldr	r3, [r3, #4]
 8013922:	891a      	ldrh	r2, [r3, #8]
 8013924:	6a3b      	ldr	r3, [r7, #32]
 8013926:	891b      	ldrh	r3, [r3, #8]
 8013928:	1ad3      	subs	r3, r2, r3
 801392a:	b29b      	uxth	r3, r3
 801392c:	2201      	movs	r2, #1
 801392e:	6939      	ldr	r1, [r7, #16]
 8013930:	f7fa fcfc 	bl	800e32c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8013934:	6a3b      	ldr	r3, [r7, #32]
 8013936:	68db      	ldr	r3, [r3, #12]
 8013938:	685b      	ldr	r3, [r3, #4]
 801393a:	4618      	mov	r0, r3
 801393c:	f7f8 fcea 	bl	800c314 <lwip_htonl>
 8013940:	4603      	mov	r3, r0
 8013942:	3301      	adds	r3, #1
 8013944:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8013946:	687b      	ldr	r3, [r7, #4]
 8013948:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801394a:	68fb      	ldr	r3, [r7, #12]
 801394c:	1ad3      	subs	r3, r2, r3
 801394e:	2b00      	cmp	r3, #0
 8013950:	da02      	bge.n	8013958 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8013952:	687b      	ldr	r3, [r7, #4]
 8013954:	68fa      	ldr	r2, [r7, #12]
 8013956:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013958:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801395c:	2200      	movs	r2, #0
 801395e:	69b9      	ldr	r1, [r7, #24]
 8013960:	6878      	ldr	r0, [r7, #4]
 8013962:	f7ff fdef 	bl	8013544 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013966:	687a      	ldr	r2, [r7, #4]
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	3304      	adds	r3, #4
 801396c:	69b9      	ldr	r1, [r7, #24]
 801396e:	6878      	ldr	r0, [r7, #4]
 8013970:	f7ff fe26 	bl	80135c0 <tcp_output_control_segment>
 8013974:	4603      	mov	r3, r0
 8013976:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013978:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801397c:	4618      	mov	r0, r3
 801397e:	372c      	adds	r7, #44	@ 0x2c
 8013980:	46bd      	mov	sp, r7
 8013982:	bd90      	pop	{r4, r7, pc}
 8013984:	08021fc4 	.word	0x08021fc4
 8013988:	080227bc 	.word	0x080227bc
 801398c:	08022018 	.word	0x08022018

08013990 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8013990:	b580      	push	{r7, lr}
 8013992:	b082      	sub	sp, #8
 8013994:	af00      	add	r7, sp, #0
 8013996:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8013998:	f7fa ff10 	bl	800e7bc <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801399c:	4b0a      	ldr	r3, [pc, #40]	@ (80139c8 <tcpip_tcp_timer+0x38>)
 801399e:	681b      	ldr	r3, [r3, #0]
 80139a0:	2b00      	cmp	r3, #0
 80139a2:	d103      	bne.n	80139ac <tcpip_tcp_timer+0x1c>
 80139a4:	4b09      	ldr	r3, [pc, #36]	@ (80139cc <tcpip_tcp_timer+0x3c>)
 80139a6:	681b      	ldr	r3, [r3, #0]
 80139a8:	2b00      	cmp	r3, #0
 80139aa:	d005      	beq.n	80139b8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80139ac:	2200      	movs	r2, #0
 80139ae:	4908      	ldr	r1, [pc, #32]	@ (80139d0 <tcpip_tcp_timer+0x40>)
 80139b0:	20fa      	movs	r0, #250	@ 0xfa
 80139b2:	f000 f8f3 	bl	8013b9c <sys_timeout>
 80139b6:	e003      	b.n	80139c0 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80139b8:	4b06      	ldr	r3, [pc, #24]	@ (80139d4 <tcpip_tcp_timer+0x44>)
 80139ba:	2200      	movs	r2, #0
 80139bc:	601a      	str	r2, [r3, #0]
  }
}
 80139be:	bf00      	nop
 80139c0:	bf00      	nop
 80139c2:	3708      	adds	r7, #8
 80139c4:	46bd      	mov	sp, r7
 80139c6:	bd80      	pop	{r7, pc}
 80139c8:	20015258 	.word	0x20015258
 80139cc:	2001525c 	.word	0x2001525c
 80139d0:	08013991 	.word	0x08013991
 80139d4:	200152a4 	.word	0x200152a4

080139d8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80139d8:	b580      	push	{r7, lr}
 80139da:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80139dc:	4b0a      	ldr	r3, [pc, #40]	@ (8013a08 <tcp_timer_needed+0x30>)
 80139de:	681b      	ldr	r3, [r3, #0]
 80139e0:	2b00      	cmp	r3, #0
 80139e2:	d10f      	bne.n	8013a04 <tcp_timer_needed+0x2c>
 80139e4:	4b09      	ldr	r3, [pc, #36]	@ (8013a0c <tcp_timer_needed+0x34>)
 80139e6:	681b      	ldr	r3, [r3, #0]
 80139e8:	2b00      	cmp	r3, #0
 80139ea:	d103      	bne.n	80139f4 <tcp_timer_needed+0x1c>
 80139ec:	4b08      	ldr	r3, [pc, #32]	@ (8013a10 <tcp_timer_needed+0x38>)
 80139ee:	681b      	ldr	r3, [r3, #0]
 80139f0:	2b00      	cmp	r3, #0
 80139f2:	d007      	beq.n	8013a04 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80139f4:	4b04      	ldr	r3, [pc, #16]	@ (8013a08 <tcp_timer_needed+0x30>)
 80139f6:	2201      	movs	r2, #1
 80139f8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80139fa:	2200      	movs	r2, #0
 80139fc:	4905      	ldr	r1, [pc, #20]	@ (8013a14 <tcp_timer_needed+0x3c>)
 80139fe:	20fa      	movs	r0, #250	@ 0xfa
 8013a00:	f000 f8cc 	bl	8013b9c <sys_timeout>
  }
}
 8013a04:	bf00      	nop
 8013a06:	bd80      	pop	{r7, pc}
 8013a08:	200152a4 	.word	0x200152a4
 8013a0c:	20015258 	.word	0x20015258
 8013a10:	2001525c 	.word	0x2001525c
 8013a14:	08013991 	.word	0x08013991

08013a18 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8013a18:	b580      	push	{r7, lr}
 8013a1a:	b086      	sub	sp, #24
 8013a1c:	af00      	add	r7, sp, #0
 8013a1e:	60f8      	str	r0, [r7, #12]
 8013a20:	60b9      	str	r1, [r7, #8]
 8013a22:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8013a24:	2006      	movs	r0, #6
 8013a26:	f7f9 fba1 	bl	800d16c <memp_malloc>
 8013a2a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8013a2c:	693b      	ldr	r3, [r7, #16]
 8013a2e:	2b00      	cmp	r3, #0
 8013a30:	d109      	bne.n	8013a46 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8013a32:	693b      	ldr	r3, [r7, #16]
 8013a34:	2b00      	cmp	r3, #0
 8013a36:	d151      	bne.n	8013adc <sys_timeout_abs+0xc4>
 8013a38:	4b2a      	ldr	r3, [pc, #168]	@ (8013ae4 <sys_timeout_abs+0xcc>)
 8013a3a:	22be      	movs	r2, #190	@ 0xbe
 8013a3c:	492a      	ldr	r1, [pc, #168]	@ (8013ae8 <sys_timeout_abs+0xd0>)
 8013a3e:	482b      	ldr	r0, [pc, #172]	@ (8013aec <sys_timeout_abs+0xd4>)
 8013a40:	f004 f8c4 	bl	8017bcc <iprintf>
    return;
 8013a44:	e04a      	b.n	8013adc <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8013a46:	693b      	ldr	r3, [r7, #16]
 8013a48:	2200      	movs	r2, #0
 8013a4a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8013a4c:	693b      	ldr	r3, [r7, #16]
 8013a4e:	68ba      	ldr	r2, [r7, #8]
 8013a50:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8013a52:	693b      	ldr	r3, [r7, #16]
 8013a54:	687a      	ldr	r2, [r7, #4]
 8013a56:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8013a58:	693b      	ldr	r3, [r7, #16]
 8013a5a:	68fa      	ldr	r2, [r7, #12]
 8013a5c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8013a5e:	4b24      	ldr	r3, [pc, #144]	@ (8013af0 <sys_timeout_abs+0xd8>)
 8013a60:	681b      	ldr	r3, [r3, #0]
 8013a62:	2b00      	cmp	r3, #0
 8013a64:	d103      	bne.n	8013a6e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8013a66:	4a22      	ldr	r2, [pc, #136]	@ (8013af0 <sys_timeout_abs+0xd8>)
 8013a68:	693b      	ldr	r3, [r7, #16]
 8013a6a:	6013      	str	r3, [r2, #0]
    return;
 8013a6c:	e037      	b.n	8013ade <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8013a6e:	693b      	ldr	r3, [r7, #16]
 8013a70:	685a      	ldr	r2, [r3, #4]
 8013a72:	4b1f      	ldr	r3, [pc, #124]	@ (8013af0 <sys_timeout_abs+0xd8>)
 8013a74:	681b      	ldr	r3, [r3, #0]
 8013a76:	685b      	ldr	r3, [r3, #4]
 8013a78:	1ad3      	subs	r3, r2, r3
 8013a7a:	0fdb      	lsrs	r3, r3, #31
 8013a7c:	f003 0301 	and.w	r3, r3, #1
 8013a80:	b2db      	uxtb	r3, r3
 8013a82:	2b00      	cmp	r3, #0
 8013a84:	d007      	beq.n	8013a96 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8013a86:	4b1a      	ldr	r3, [pc, #104]	@ (8013af0 <sys_timeout_abs+0xd8>)
 8013a88:	681a      	ldr	r2, [r3, #0]
 8013a8a:	693b      	ldr	r3, [r7, #16]
 8013a8c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8013a8e:	4a18      	ldr	r2, [pc, #96]	@ (8013af0 <sys_timeout_abs+0xd8>)
 8013a90:	693b      	ldr	r3, [r7, #16]
 8013a92:	6013      	str	r3, [r2, #0]
 8013a94:	e023      	b.n	8013ade <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8013a96:	4b16      	ldr	r3, [pc, #88]	@ (8013af0 <sys_timeout_abs+0xd8>)
 8013a98:	681b      	ldr	r3, [r3, #0]
 8013a9a:	617b      	str	r3, [r7, #20]
 8013a9c:	e01a      	b.n	8013ad4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8013a9e:	697b      	ldr	r3, [r7, #20]
 8013aa0:	681b      	ldr	r3, [r3, #0]
 8013aa2:	2b00      	cmp	r3, #0
 8013aa4:	d00b      	beq.n	8013abe <sys_timeout_abs+0xa6>
 8013aa6:	693b      	ldr	r3, [r7, #16]
 8013aa8:	685a      	ldr	r2, [r3, #4]
 8013aaa:	697b      	ldr	r3, [r7, #20]
 8013aac:	681b      	ldr	r3, [r3, #0]
 8013aae:	685b      	ldr	r3, [r3, #4]
 8013ab0:	1ad3      	subs	r3, r2, r3
 8013ab2:	0fdb      	lsrs	r3, r3, #31
 8013ab4:	f003 0301 	and.w	r3, r3, #1
 8013ab8:	b2db      	uxtb	r3, r3
 8013aba:	2b00      	cmp	r3, #0
 8013abc:	d007      	beq.n	8013ace <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8013abe:	697b      	ldr	r3, [r7, #20]
 8013ac0:	681a      	ldr	r2, [r3, #0]
 8013ac2:	693b      	ldr	r3, [r7, #16]
 8013ac4:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8013ac6:	697b      	ldr	r3, [r7, #20]
 8013ac8:	693a      	ldr	r2, [r7, #16]
 8013aca:	601a      	str	r2, [r3, #0]
        break;
 8013acc:	e007      	b.n	8013ade <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8013ace:	697b      	ldr	r3, [r7, #20]
 8013ad0:	681b      	ldr	r3, [r3, #0]
 8013ad2:	617b      	str	r3, [r7, #20]
 8013ad4:	697b      	ldr	r3, [r7, #20]
 8013ad6:	2b00      	cmp	r3, #0
 8013ad8:	d1e1      	bne.n	8013a9e <sys_timeout_abs+0x86>
 8013ada:	e000      	b.n	8013ade <sys_timeout_abs+0xc6>
    return;
 8013adc:	bf00      	nop
      }
    }
  }
}
 8013ade:	3718      	adds	r7, #24
 8013ae0:	46bd      	mov	sp, r7
 8013ae2:	bd80      	pop	{r7, pc}
 8013ae4:	080227e0 	.word	0x080227e0
 8013ae8:	08022814 	.word	0x08022814
 8013aec:	08022854 	.word	0x08022854
 8013af0:	2001529c 	.word	0x2001529c

08013af4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8013af4:	b580      	push	{r7, lr}
 8013af6:	b086      	sub	sp, #24
 8013af8:	af00      	add	r7, sp, #0
 8013afa:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8013afc:	687b      	ldr	r3, [r7, #4]
 8013afe:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8013b00:	697b      	ldr	r3, [r7, #20]
 8013b02:	685b      	ldr	r3, [r3, #4]
 8013b04:	4798      	blx	r3

  now = sys_now();
 8013b06:	f7f8 f9f7 	bl	800bef8 <sys_now>
 8013b0a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8013b0c:	697b      	ldr	r3, [r7, #20]
 8013b0e:	681a      	ldr	r2, [r3, #0]
 8013b10:	4b0f      	ldr	r3, [pc, #60]	@ (8013b50 <lwip_cyclic_timer+0x5c>)
 8013b12:	681b      	ldr	r3, [r3, #0]
 8013b14:	4413      	add	r3, r2
 8013b16:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8013b18:	68fa      	ldr	r2, [r7, #12]
 8013b1a:	693b      	ldr	r3, [r7, #16]
 8013b1c:	1ad3      	subs	r3, r2, r3
 8013b1e:	0fdb      	lsrs	r3, r3, #31
 8013b20:	f003 0301 	and.w	r3, r3, #1
 8013b24:	b2db      	uxtb	r3, r3
 8013b26:	2b00      	cmp	r3, #0
 8013b28:	d009      	beq.n	8013b3e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8013b2a:	697b      	ldr	r3, [r7, #20]
 8013b2c:	681a      	ldr	r2, [r3, #0]
 8013b2e:	693b      	ldr	r3, [r7, #16]
 8013b30:	4413      	add	r3, r2
 8013b32:	687a      	ldr	r2, [r7, #4]
 8013b34:	4907      	ldr	r1, [pc, #28]	@ (8013b54 <lwip_cyclic_timer+0x60>)
 8013b36:	4618      	mov	r0, r3
 8013b38:	f7ff ff6e 	bl	8013a18 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8013b3c:	e004      	b.n	8013b48 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8013b3e:	687a      	ldr	r2, [r7, #4]
 8013b40:	4904      	ldr	r1, [pc, #16]	@ (8013b54 <lwip_cyclic_timer+0x60>)
 8013b42:	68f8      	ldr	r0, [r7, #12]
 8013b44:	f7ff ff68 	bl	8013a18 <sys_timeout_abs>
}
 8013b48:	bf00      	nop
 8013b4a:	3718      	adds	r7, #24
 8013b4c:	46bd      	mov	sp, r7
 8013b4e:	bd80      	pop	{r7, pc}
 8013b50:	200152a0 	.word	0x200152a0
 8013b54:	08013af5 	.word	0x08013af5

08013b58 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8013b58:	b580      	push	{r7, lr}
 8013b5a:	b082      	sub	sp, #8
 8013b5c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8013b5e:	2301      	movs	r3, #1
 8013b60:	607b      	str	r3, [r7, #4]
 8013b62:	e00e      	b.n	8013b82 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8013b64:	4a0b      	ldr	r2, [pc, #44]	@ (8013b94 <sys_timeouts_init+0x3c>)
 8013b66:	687b      	ldr	r3, [r7, #4]
 8013b68:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	00db      	lsls	r3, r3, #3
 8013b70:	4a08      	ldr	r2, [pc, #32]	@ (8013b94 <sys_timeouts_init+0x3c>)
 8013b72:	4413      	add	r3, r2
 8013b74:	461a      	mov	r2, r3
 8013b76:	4908      	ldr	r1, [pc, #32]	@ (8013b98 <sys_timeouts_init+0x40>)
 8013b78:	f000 f810 	bl	8013b9c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8013b7c:	687b      	ldr	r3, [r7, #4]
 8013b7e:	3301      	adds	r3, #1
 8013b80:	607b      	str	r3, [r7, #4]
 8013b82:	687b      	ldr	r3, [r7, #4]
 8013b84:	2b03      	cmp	r3, #3
 8013b86:	d9ed      	bls.n	8013b64 <sys_timeouts_init+0xc>
  }
}
 8013b88:	bf00      	nop
 8013b8a:	bf00      	nop
 8013b8c:	3708      	adds	r7, #8
 8013b8e:	46bd      	mov	sp, r7
 8013b90:	bd80      	pop	{r7, pc}
 8013b92:	bf00      	nop
 8013b94:	080233cc 	.word	0x080233cc
 8013b98:	08013af5 	.word	0x08013af5

08013b9c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8013b9c:	b580      	push	{r7, lr}
 8013b9e:	b086      	sub	sp, #24
 8013ba0:	af00      	add	r7, sp, #0
 8013ba2:	60f8      	str	r0, [r7, #12]
 8013ba4:	60b9      	str	r1, [r7, #8]
 8013ba6:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8013ba8:	68fb      	ldr	r3, [r7, #12]
 8013baa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013bae:	d306      	bcc.n	8013bbe <sys_timeout+0x22>
 8013bb0:	4b0a      	ldr	r3, [pc, #40]	@ (8013bdc <sys_timeout+0x40>)
 8013bb2:	f240 1229 	movw	r2, #297	@ 0x129
 8013bb6:	490a      	ldr	r1, [pc, #40]	@ (8013be0 <sys_timeout+0x44>)
 8013bb8:	480a      	ldr	r0, [pc, #40]	@ (8013be4 <sys_timeout+0x48>)
 8013bba:	f004 f807 	bl	8017bcc <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8013bbe:	f7f8 f99b 	bl	800bef8 <sys_now>
 8013bc2:	4602      	mov	r2, r0
 8013bc4:	68fb      	ldr	r3, [r7, #12]
 8013bc6:	4413      	add	r3, r2
 8013bc8:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8013bca:	687a      	ldr	r2, [r7, #4]
 8013bcc:	68b9      	ldr	r1, [r7, #8]
 8013bce:	6978      	ldr	r0, [r7, #20]
 8013bd0:	f7ff ff22 	bl	8013a18 <sys_timeout_abs>
#endif
}
 8013bd4:	bf00      	nop
 8013bd6:	3718      	adds	r7, #24
 8013bd8:	46bd      	mov	sp, r7
 8013bda:	bd80      	pop	{r7, pc}
 8013bdc:	080227e0 	.word	0x080227e0
 8013be0:	0802287c 	.word	0x0802287c
 8013be4:	08022854 	.word	0x08022854

08013be8 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8013be8:	b580      	push	{r7, lr}
 8013bea:	b084      	sub	sp, #16
 8013bec:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8013bee:	f7f8 f983 	bl	800bef8 <sys_now>
 8013bf2:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 8013bf4:	4b1a      	ldr	r3, [pc, #104]	@ (8013c60 <sys_check_timeouts+0x78>)
 8013bf6:	781b      	ldrb	r3, [r3, #0]
 8013bf8:	b2db      	uxtb	r3, r3
 8013bfa:	2b00      	cmp	r3, #0
 8013bfc:	d001      	beq.n	8013c02 <sys_check_timeouts+0x1a>
 8013bfe:	f7f9 fe61 	bl	800d8c4 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 8013c02:	4b18      	ldr	r3, [pc, #96]	@ (8013c64 <sys_check_timeouts+0x7c>)
 8013c04:	681b      	ldr	r3, [r3, #0]
 8013c06:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8013c08:	68bb      	ldr	r3, [r7, #8]
 8013c0a:	2b00      	cmp	r3, #0
 8013c0c:	d022      	beq.n	8013c54 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8013c0e:	68bb      	ldr	r3, [r7, #8]
 8013c10:	685b      	ldr	r3, [r3, #4]
 8013c12:	68fa      	ldr	r2, [r7, #12]
 8013c14:	1ad3      	subs	r3, r2, r3
 8013c16:	0fdb      	lsrs	r3, r3, #31
 8013c18:	f003 0301 	and.w	r3, r3, #1
 8013c1c:	b2db      	uxtb	r3, r3
 8013c1e:	2b00      	cmp	r3, #0
 8013c20:	d11a      	bne.n	8013c58 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8013c22:	68bb      	ldr	r3, [r7, #8]
 8013c24:	681b      	ldr	r3, [r3, #0]
 8013c26:	4a0f      	ldr	r2, [pc, #60]	@ (8013c64 <sys_check_timeouts+0x7c>)
 8013c28:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8013c2a:	68bb      	ldr	r3, [r7, #8]
 8013c2c:	689b      	ldr	r3, [r3, #8]
 8013c2e:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8013c30:	68bb      	ldr	r3, [r7, #8]
 8013c32:	68db      	ldr	r3, [r3, #12]
 8013c34:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8013c36:	68bb      	ldr	r3, [r7, #8]
 8013c38:	685b      	ldr	r3, [r3, #4]
 8013c3a:	4a0b      	ldr	r2, [pc, #44]	@ (8013c68 <sys_check_timeouts+0x80>)
 8013c3c:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8013c3e:	68b9      	ldr	r1, [r7, #8]
 8013c40:	2006      	movs	r0, #6
 8013c42:	f7f9 fb03 	bl	800d24c <memp_free>
    if (handler != NULL) {
 8013c46:	687b      	ldr	r3, [r7, #4]
 8013c48:	2b00      	cmp	r3, #0
 8013c4a:	d0d3      	beq.n	8013bf4 <sys_check_timeouts+0xc>
      handler(arg);
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	6838      	ldr	r0, [r7, #0]
 8013c50:	4798      	blx	r3
  do {
 8013c52:	e7cf      	b.n	8013bf4 <sys_check_timeouts+0xc>
      return;
 8013c54:	bf00      	nop
 8013c56:	e000      	b.n	8013c5a <sys_check_timeouts+0x72>
      return;
 8013c58:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8013c5a:	3710      	adds	r7, #16
 8013c5c:	46bd      	mov	sp, r7
 8013c5e:	bd80      	pop	{r7, pc}
 8013c60:	20015249 	.word	0x20015249
 8013c64:	2001529c 	.word	0x2001529c
 8013c68:	200152a0 	.word	0x200152a0

08013c6c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8013c6c:	b580      	push	{r7, lr}
 8013c6e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8013c70:	f003 f81a 	bl	8016ca8 <rand>
 8013c74:	4603      	mov	r3, r0
 8013c76:	b29b      	uxth	r3, r3
 8013c78:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8013c7c:	b29b      	uxth	r3, r3
 8013c7e:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8013c82:	b29a      	uxth	r2, r3
 8013c84:	4b01      	ldr	r3, [pc, #4]	@ (8013c8c <udp_init+0x20>)
 8013c86:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8013c88:	bf00      	nop
 8013c8a:	bd80      	pop	{r7, pc}
 8013c8c:	20000918 	.word	0x20000918

08013c90 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8013c90:	b480      	push	{r7}
 8013c92:	b083      	sub	sp, #12
 8013c94:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8013c96:	2300      	movs	r3, #0
 8013c98:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8013c9a:	4b17      	ldr	r3, [pc, #92]	@ (8013cf8 <udp_new_port+0x68>)
 8013c9c:	881b      	ldrh	r3, [r3, #0]
 8013c9e:	1c5a      	adds	r2, r3, #1
 8013ca0:	b291      	uxth	r1, r2
 8013ca2:	4a15      	ldr	r2, [pc, #84]	@ (8013cf8 <udp_new_port+0x68>)
 8013ca4:	8011      	strh	r1, [r2, #0]
 8013ca6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013caa:	4293      	cmp	r3, r2
 8013cac:	d103      	bne.n	8013cb6 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8013cae:	4b12      	ldr	r3, [pc, #72]	@ (8013cf8 <udp_new_port+0x68>)
 8013cb0:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8013cb4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013cb6:	4b11      	ldr	r3, [pc, #68]	@ (8013cfc <udp_new_port+0x6c>)
 8013cb8:	681b      	ldr	r3, [r3, #0]
 8013cba:	603b      	str	r3, [r7, #0]
 8013cbc:	e011      	b.n	8013ce2 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8013cbe:	683b      	ldr	r3, [r7, #0]
 8013cc0:	8a5a      	ldrh	r2, [r3, #18]
 8013cc2:	4b0d      	ldr	r3, [pc, #52]	@ (8013cf8 <udp_new_port+0x68>)
 8013cc4:	881b      	ldrh	r3, [r3, #0]
 8013cc6:	429a      	cmp	r2, r3
 8013cc8:	d108      	bne.n	8013cdc <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8013cca:	88fb      	ldrh	r3, [r7, #6]
 8013ccc:	3301      	adds	r3, #1
 8013cce:	80fb      	strh	r3, [r7, #6]
 8013cd0:	88fb      	ldrh	r3, [r7, #6]
 8013cd2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8013cd6:	d3e0      	bcc.n	8013c9a <udp_new_port+0xa>
        return 0;
 8013cd8:	2300      	movs	r3, #0
 8013cda:	e007      	b.n	8013cec <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013cdc:	683b      	ldr	r3, [r7, #0]
 8013cde:	68db      	ldr	r3, [r3, #12]
 8013ce0:	603b      	str	r3, [r7, #0]
 8013ce2:	683b      	ldr	r3, [r7, #0]
 8013ce4:	2b00      	cmp	r3, #0
 8013ce6:	d1ea      	bne.n	8013cbe <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8013ce8:	4b03      	ldr	r3, [pc, #12]	@ (8013cf8 <udp_new_port+0x68>)
 8013cea:	881b      	ldrh	r3, [r3, #0]
}
 8013cec:	4618      	mov	r0, r3
 8013cee:	370c      	adds	r7, #12
 8013cf0:	46bd      	mov	sp, r7
 8013cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cf6:	4770      	bx	lr
 8013cf8:	20000918 	.word	0x20000918
 8013cfc:	200152a8 	.word	0x200152a8

08013d00 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8013d00:	b580      	push	{r7, lr}
 8013d02:	b084      	sub	sp, #16
 8013d04:	af00      	add	r7, sp, #0
 8013d06:	60f8      	str	r0, [r7, #12]
 8013d08:	60b9      	str	r1, [r7, #8]
 8013d0a:	4613      	mov	r3, r2
 8013d0c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8013d0e:	68fb      	ldr	r3, [r7, #12]
 8013d10:	2b00      	cmp	r3, #0
 8013d12:	d105      	bne.n	8013d20 <udp_input_local_match+0x20>
 8013d14:	4b27      	ldr	r3, [pc, #156]	@ (8013db4 <udp_input_local_match+0xb4>)
 8013d16:	2287      	movs	r2, #135	@ 0x87
 8013d18:	4927      	ldr	r1, [pc, #156]	@ (8013db8 <udp_input_local_match+0xb8>)
 8013d1a:	4828      	ldr	r0, [pc, #160]	@ (8013dbc <udp_input_local_match+0xbc>)
 8013d1c:	f003 ff56 	bl	8017bcc <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8013d20:	68bb      	ldr	r3, [r7, #8]
 8013d22:	2b00      	cmp	r3, #0
 8013d24:	d105      	bne.n	8013d32 <udp_input_local_match+0x32>
 8013d26:	4b23      	ldr	r3, [pc, #140]	@ (8013db4 <udp_input_local_match+0xb4>)
 8013d28:	2288      	movs	r2, #136	@ 0x88
 8013d2a:	4925      	ldr	r1, [pc, #148]	@ (8013dc0 <udp_input_local_match+0xc0>)
 8013d2c:	4823      	ldr	r0, [pc, #140]	@ (8013dbc <udp_input_local_match+0xbc>)
 8013d2e:	f003 ff4d 	bl	8017bcc <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013d32:	68fb      	ldr	r3, [r7, #12]
 8013d34:	7a1b      	ldrb	r3, [r3, #8]
 8013d36:	2b00      	cmp	r3, #0
 8013d38:	d00b      	beq.n	8013d52 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013d3a:	68fb      	ldr	r3, [r7, #12]
 8013d3c:	7a1a      	ldrb	r2, [r3, #8]
 8013d3e:	4b21      	ldr	r3, [pc, #132]	@ (8013dc4 <udp_input_local_match+0xc4>)
 8013d40:	685b      	ldr	r3, [r3, #4]
 8013d42:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8013d46:	3301      	adds	r3, #1
 8013d48:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013d4a:	429a      	cmp	r2, r3
 8013d4c:	d001      	beq.n	8013d52 <udp_input_local_match+0x52>
    return 0;
 8013d4e:	2300      	movs	r3, #0
 8013d50:	e02b      	b.n	8013daa <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8013d52:	79fb      	ldrb	r3, [r7, #7]
 8013d54:	2b00      	cmp	r3, #0
 8013d56:	d018      	beq.n	8013d8a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013d58:	68fb      	ldr	r3, [r7, #12]
 8013d5a:	2b00      	cmp	r3, #0
 8013d5c:	d013      	beq.n	8013d86 <udp_input_local_match+0x86>
 8013d5e:	68fb      	ldr	r3, [r7, #12]
 8013d60:	681b      	ldr	r3, [r3, #0]
 8013d62:	2b00      	cmp	r3, #0
 8013d64:	d00f      	beq.n	8013d86 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013d66:	4b17      	ldr	r3, [pc, #92]	@ (8013dc4 <udp_input_local_match+0xc4>)
 8013d68:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d6e:	d00a      	beq.n	8013d86 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8013d70:	68fb      	ldr	r3, [r7, #12]
 8013d72:	681a      	ldr	r2, [r3, #0]
 8013d74:	4b13      	ldr	r3, [pc, #76]	@ (8013dc4 <udp_input_local_match+0xc4>)
 8013d76:	695b      	ldr	r3, [r3, #20]
 8013d78:	405a      	eors	r2, r3
 8013d7a:	68bb      	ldr	r3, [r7, #8]
 8013d7c:	3308      	adds	r3, #8
 8013d7e:	681b      	ldr	r3, [r3, #0]
 8013d80:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013d82:	2b00      	cmp	r3, #0
 8013d84:	d110      	bne.n	8013da8 <udp_input_local_match+0xa8>
          return 1;
 8013d86:	2301      	movs	r3, #1
 8013d88:	e00f      	b.n	8013daa <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8013d8a:	68fb      	ldr	r3, [r7, #12]
 8013d8c:	2b00      	cmp	r3, #0
 8013d8e:	d009      	beq.n	8013da4 <udp_input_local_match+0xa4>
 8013d90:	68fb      	ldr	r3, [r7, #12]
 8013d92:	681b      	ldr	r3, [r3, #0]
 8013d94:	2b00      	cmp	r3, #0
 8013d96:	d005      	beq.n	8013da4 <udp_input_local_match+0xa4>
 8013d98:	68fb      	ldr	r3, [r7, #12]
 8013d9a:	681a      	ldr	r2, [r3, #0]
 8013d9c:	4b09      	ldr	r3, [pc, #36]	@ (8013dc4 <udp_input_local_match+0xc4>)
 8013d9e:	695b      	ldr	r3, [r3, #20]
 8013da0:	429a      	cmp	r2, r3
 8013da2:	d101      	bne.n	8013da8 <udp_input_local_match+0xa8>
        return 1;
 8013da4:	2301      	movs	r3, #1
 8013da6:	e000      	b.n	8013daa <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8013da8:	2300      	movs	r3, #0
}
 8013daa:	4618      	mov	r0, r3
 8013dac:	3710      	adds	r7, #16
 8013dae:	46bd      	mov	sp, r7
 8013db0:	bd80      	pop	{r7, pc}
 8013db2:	bf00      	nop
 8013db4:	080228c8 	.word	0x080228c8
 8013db8:	080228f8 	.word	0x080228f8
 8013dbc:	0802291c 	.word	0x0802291c
 8013dc0:	08022944 	.word	0x08022944
 8013dc4:	20011f0c 	.word	0x20011f0c

08013dc8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8013dc8:	b590      	push	{r4, r7, lr}
 8013dca:	b08d      	sub	sp, #52	@ 0x34
 8013dcc:	af02      	add	r7, sp, #8
 8013dce:	6078      	str	r0, [r7, #4]
 8013dd0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8013dd2:	2300      	movs	r3, #0
 8013dd4:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8013dd6:	687b      	ldr	r3, [r7, #4]
 8013dd8:	2b00      	cmp	r3, #0
 8013dda:	d105      	bne.n	8013de8 <udp_input+0x20>
 8013ddc:	4b7c      	ldr	r3, [pc, #496]	@ (8013fd0 <udp_input+0x208>)
 8013dde:	22cf      	movs	r2, #207	@ 0xcf
 8013de0:	497c      	ldr	r1, [pc, #496]	@ (8013fd4 <udp_input+0x20c>)
 8013de2:	487d      	ldr	r0, [pc, #500]	@ (8013fd8 <udp_input+0x210>)
 8013de4:	f003 fef2 	bl	8017bcc <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8013de8:	683b      	ldr	r3, [r7, #0]
 8013dea:	2b00      	cmp	r3, #0
 8013dec:	d105      	bne.n	8013dfa <udp_input+0x32>
 8013dee:	4b78      	ldr	r3, [pc, #480]	@ (8013fd0 <udp_input+0x208>)
 8013df0:	22d0      	movs	r2, #208	@ 0xd0
 8013df2:	497a      	ldr	r1, [pc, #488]	@ (8013fdc <udp_input+0x214>)
 8013df4:	4878      	ldr	r0, [pc, #480]	@ (8013fd8 <udp_input+0x210>)
 8013df6:	f003 fee9 	bl	8017bcc <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8013dfa:	687b      	ldr	r3, [r7, #4]
 8013dfc:	895b      	ldrh	r3, [r3, #10]
 8013dfe:	2b07      	cmp	r3, #7
 8013e00:	d803      	bhi.n	8013e0a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8013e02:	6878      	ldr	r0, [r7, #4]
 8013e04:	f7fa f898 	bl	800df38 <pbuf_free>
    goto end;
 8013e08:	e0de      	b.n	8013fc8 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8013e0a:	687b      	ldr	r3, [r7, #4]
 8013e0c:	685b      	ldr	r3, [r3, #4]
 8013e0e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8013e10:	4b73      	ldr	r3, [pc, #460]	@ (8013fe0 <udp_input+0x218>)
 8013e12:	695b      	ldr	r3, [r3, #20]
 8013e14:	4a72      	ldr	r2, [pc, #456]	@ (8013fe0 <udp_input+0x218>)
 8013e16:	6812      	ldr	r2, [r2, #0]
 8013e18:	4611      	mov	r1, r2
 8013e1a:	4618      	mov	r0, r3
 8013e1c:	f001 ffe2 	bl	8015de4 <ip4_addr_isbroadcast_u32>
 8013e20:	4603      	mov	r3, r0
 8013e22:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8013e24:	697b      	ldr	r3, [r7, #20]
 8013e26:	881b      	ldrh	r3, [r3, #0]
 8013e28:	b29b      	uxth	r3, r3
 8013e2a:	4618      	mov	r0, r3
 8013e2c:	f7f8 fa5c 	bl	800c2e8 <lwip_htons>
 8013e30:	4603      	mov	r3, r0
 8013e32:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8013e34:	697b      	ldr	r3, [r7, #20]
 8013e36:	885b      	ldrh	r3, [r3, #2]
 8013e38:	b29b      	uxth	r3, r3
 8013e3a:	4618      	mov	r0, r3
 8013e3c:	f7f8 fa54 	bl	800c2e8 <lwip_htons>
 8013e40:	4603      	mov	r3, r0
 8013e42:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8013e44:	2300      	movs	r3, #0
 8013e46:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 8013e48:	2300      	movs	r3, #0
 8013e4a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8013e4c:	2300      	movs	r3, #0
 8013e4e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013e50:	4b64      	ldr	r3, [pc, #400]	@ (8013fe4 <udp_input+0x21c>)
 8013e52:	681b      	ldr	r3, [r3, #0]
 8013e54:	627b      	str	r3, [r7, #36]	@ 0x24
 8013e56:	e054      	b.n	8013f02 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8013e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e5a:	8a5b      	ldrh	r3, [r3, #18]
 8013e5c:	89fa      	ldrh	r2, [r7, #14]
 8013e5e:	429a      	cmp	r2, r3
 8013e60:	d14a      	bne.n	8013ef8 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8013e62:	7cfb      	ldrb	r3, [r7, #19]
 8013e64:	461a      	mov	r2, r3
 8013e66:	6839      	ldr	r1, [r7, #0]
 8013e68:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013e6a:	f7ff ff49 	bl	8013d00 <udp_input_local_match>
 8013e6e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8013e70:	2b00      	cmp	r3, #0
 8013e72:	d041      	beq.n	8013ef8 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8013e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e76:	7c1b      	ldrb	r3, [r3, #16]
 8013e78:	f003 0304 	and.w	r3, r3, #4
 8013e7c:	2b00      	cmp	r3, #0
 8013e7e:	d11d      	bne.n	8013ebc <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8013e80:	69fb      	ldr	r3, [r7, #28]
 8013e82:	2b00      	cmp	r3, #0
 8013e84:	d102      	bne.n	8013e8c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8013e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e88:	61fb      	str	r3, [r7, #28]
 8013e8a:	e017      	b.n	8013ebc <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8013e8c:	7cfb      	ldrb	r3, [r7, #19]
 8013e8e:	2b00      	cmp	r3, #0
 8013e90:	d014      	beq.n	8013ebc <udp_input+0xf4>
 8013e92:	4b53      	ldr	r3, [pc, #332]	@ (8013fe0 <udp_input+0x218>)
 8013e94:	695b      	ldr	r3, [r3, #20]
 8013e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013e9a:	d10f      	bne.n	8013ebc <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8013e9c:	69fb      	ldr	r3, [r7, #28]
 8013e9e:	681a      	ldr	r2, [r3, #0]
 8013ea0:	683b      	ldr	r3, [r7, #0]
 8013ea2:	3304      	adds	r3, #4
 8013ea4:	681b      	ldr	r3, [r3, #0]
 8013ea6:	429a      	cmp	r2, r3
 8013ea8:	d008      	beq.n	8013ebc <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8013eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013eac:	681a      	ldr	r2, [r3, #0]
 8013eae:	683b      	ldr	r3, [r7, #0]
 8013eb0:	3304      	adds	r3, #4
 8013eb2:	681b      	ldr	r3, [r3, #0]
 8013eb4:	429a      	cmp	r2, r3
 8013eb6:	d101      	bne.n	8013ebc <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8013eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013eba:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8013ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ebe:	8a9b      	ldrh	r3, [r3, #20]
 8013ec0:	8a3a      	ldrh	r2, [r7, #16]
 8013ec2:	429a      	cmp	r2, r3
 8013ec4:	d118      	bne.n	8013ef8 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ec8:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8013eca:	2b00      	cmp	r3, #0
 8013ecc:	d005      	beq.n	8013eda <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8013ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ed0:	685a      	ldr	r2, [r3, #4]
 8013ed2:	4b43      	ldr	r3, [pc, #268]	@ (8013fe0 <udp_input+0x218>)
 8013ed4:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013ed6:	429a      	cmp	r2, r3
 8013ed8:	d10e      	bne.n	8013ef8 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8013eda:	6a3b      	ldr	r3, [r7, #32]
 8013edc:	2b00      	cmp	r3, #0
 8013ede:	d014      	beq.n	8013f0a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8013ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ee2:	68da      	ldr	r2, [r3, #12]
 8013ee4:	6a3b      	ldr	r3, [r7, #32]
 8013ee6:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8013ee8:	4b3e      	ldr	r3, [pc, #248]	@ (8013fe4 <udp_input+0x21c>)
 8013eea:	681a      	ldr	r2, [r3, #0]
 8013eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013eee:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8013ef0:	4a3c      	ldr	r2, [pc, #240]	@ (8013fe4 <udp_input+0x21c>)
 8013ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ef4:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8013ef6:	e008      	b.n	8013f0a <udp_input+0x142>
      }
    }

    prev = pcb;
 8013ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013efa:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013efe:	68db      	ldr	r3, [r3, #12]
 8013f00:	627b      	str	r3, [r7, #36]	@ 0x24
 8013f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f04:	2b00      	cmp	r3, #0
 8013f06:	d1a7      	bne.n	8013e58 <udp_input+0x90>
 8013f08:	e000      	b.n	8013f0c <udp_input+0x144>
        break;
 8013f0a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8013f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f0e:	2b00      	cmp	r3, #0
 8013f10:	d101      	bne.n	8013f16 <udp_input+0x14e>
    pcb = uncon_pcb;
 8013f12:	69fb      	ldr	r3, [r7, #28]
 8013f14:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8013f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f18:	2b00      	cmp	r3, #0
 8013f1a:	d002      	beq.n	8013f22 <udp_input+0x15a>
    for_us = 1;
 8013f1c:	2301      	movs	r3, #1
 8013f1e:	76fb      	strb	r3, [r7, #27]
 8013f20:	e00a      	b.n	8013f38 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8013f22:	683b      	ldr	r3, [r7, #0]
 8013f24:	3304      	adds	r3, #4
 8013f26:	681a      	ldr	r2, [r3, #0]
 8013f28:	4b2d      	ldr	r3, [pc, #180]	@ (8013fe0 <udp_input+0x218>)
 8013f2a:	695b      	ldr	r3, [r3, #20]
 8013f2c:	429a      	cmp	r2, r3
 8013f2e:	bf0c      	ite	eq
 8013f30:	2301      	moveq	r3, #1
 8013f32:	2300      	movne	r3, #0
 8013f34:	b2db      	uxtb	r3, r3
 8013f36:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8013f38:	7efb      	ldrb	r3, [r7, #27]
 8013f3a:	2b00      	cmp	r3, #0
 8013f3c:	d041      	beq.n	8013fc2 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8013f3e:	2108      	movs	r1, #8
 8013f40:	6878      	ldr	r0, [r7, #4]
 8013f42:	f7f9 ff73 	bl	800de2c <pbuf_remove_header>
 8013f46:	4603      	mov	r3, r0
 8013f48:	2b00      	cmp	r3, #0
 8013f4a:	d00a      	beq.n	8013f62 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8013f4c:	4b20      	ldr	r3, [pc, #128]	@ (8013fd0 <udp_input+0x208>)
 8013f4e:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8013f52:	4925      	ldr	r1, [pc, #148]	@ (8013fe8 <udp_input+0x220>)
 8013f54:	4820      	ldr	r0, [pc, #128]	@ (8013fd8 <udp_input+0x210>)
 8013f56:	f003 fe39 	bl	8017bcc <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8013f5a:	6878      	ldr	r0, [r7, #4]
 8013f5c:	f7f9 ffec 	bl	800df38 <pbuf_free>
      goto end;
 8013f60:	e032      	b.n	8013fc8 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8013f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f64:	2b00      	cmp	r3, #0
 8013f66:	d012      	beq.n	8013f8e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8013f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f6a:	699b      	ldr	r3, [r3, #24]
 8013f6c:	2b00      	cmp	r3, #0
 8013f6e:	d00a      	beq.n	8013f86 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8013f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f72:	699c      	ldr	r4, [r3, #24]
 8013f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f76:	69d8      	ldr	r0, [r3, #28]
 8013f78:	8a3b      	ldrh	r3, [r7, #16]
 8013f7a:	9300      	str	r3, [sp, #0]
 8013f7c:	4b1b      	ldr	r3, [pc, #108]	@ (8013fec <udp_input+0x224>)
 8013f7e:	687a      	ldr	r2, [r7, #4]
 8013f80:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013f82:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8013f84:	e021      	b.n	8013fca <udp_input+0x202>
        pbuf_free(p);
 8013f86:	6878      	ldr	r0, [r7, #4]
 8013f88:	f7f9 ffd6 	bl	800df38 <pbuf_free>
        goto end;
 8013f8c:	e01c      	b.n	8013fc8 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8013f8e:	7cfb      	ldrb	r3, [r7, #19]
 8013f90:	2b00      	cmp	r3, #0
 8013f92:	d112      	bne.n	8013fba <udp_input+0x1f2>
 8013f94:	4b12      	ldr	r3, [pc, #72]	@ (8013fe0 <udp_input+0x218>)
 8013f96:	695b      	ldr	r3, [r3, #20]
 8013f98:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8013f9c:	2be0      	cmp	r3, #224	@ 0xe0
 8013f9e:	d00c      	beq.n	8013fba <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8013fa0:	4b0f      	ldr	r3, [pc, #60]	@ (8013fe0 <udp_input+0x218>)
 8013fa2:	899b      	ldrh	r3, [r3, #12]
 8013fa4:	3308      	adds	r3, #8
 8013fa6:	b29b      	uxth	r3, r3
 8013fa8:	b21b      	sxth	r3, r3
 8013faa:	4619      	mov	r1, r3
 8013fac:	6878      	ldr	r0, [r7, #4]
 8013fae:	f7f9 ffb0 	bl	800df12 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8013fb2:	2103      	movs	r1, #3
 8013fb4:	6878      	ldr	r0, [r7, #4]
 8013fb6:	f001 fbf5 	bl	80157a4 <icmp_dest_unreach>
      pbuf_free(p);
 8013fba:	6878      	ldr	r0, [r7, #4]
 8013fbc:	f7f9 ffbc 	bl	800df38 <pbuf_free>
  return;
 8013fc0:	e003      	b.n	8013fca <udp_input+0x202>
    pbuf_free(p);
 8013fc2:	6878      	ldr	r0, [r7, #4]
 8013fc4:	f7f9 ffb8 	bl	800df38 <pbuf_free>
  return;
 8013fc8:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8013fca:	372c      	adds	r7, #44	@ 0x2c
 8013fcc:	46bd      	mov	sp, r7
 8013fce:	bd90      	pop	{r4, r7, pc}
 8013fd0:	080228c8 	.word	0x080228c8
 8013fd4:	0802296c 	.word	0x0802296c
 8013fd8:	0802291c 	.word	0x0802291c
 8013fdc:	08022984 	.word	0x08022984
 8013fe0:	20011f0c 	.word	0x20011f0c
 8013fe4:	200152a8 	.word	0x200152a8
 8013fe8:	080229a0 	.word	0x080229a0
 8013fec:	20011f1c 	.word	0x20011f1c

08013ff0 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 8013ff0:	b580      	push	{r7, lr}
 8013ff2:	b082      	sub	sp, #8
 8013ff4:	af00      	add	r7, sp, #0
 8013ff6:	6078      	str	r0, [r7, #4]
 8013ff8:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 8013ffa:	687b      	ldr	r3, [r7, #4]
 8013ffc:	2b00      	cmp	r3, #0
 8013ffe:	d109      	bne.n	8014014 <udp_send+0x24>
 8014000:	4b11      	ldr	r3, [pc, #68]	@ (8014048 <udp_send+0x58>)
 8014002:	f240 12d5 	movw	r2, #469	@ 0x1d5
 8014006:	4911      	ldr	r1, [pc, #68]	@ (801404c <udp_send+0x5c>)
 8014008:	4811      	ldr	r0, [pc, #68]	@ (8014050 <udp_send+0x60>)
 801400a:	f003 fddf 	bl	8017bcc <iprintf>
 801400e:	f06f 030f 	mvn.w	r3, #15
 8014012:	e015      	b.n	8014040 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 8014014:	683b      	ldr	r3, [r7, #0]
 8014016:	2b00      	cmp	r3, #0
 8014018:	d109      	bne.n	801402e <udp_send+0x3e>
 801401a:	4b0b      	ldr	r3, [pc, #44]	@ (8014048 <udp_send+0x58>)
 801401c:	f44f 72eb 	mov.w	r2, #470	@ 0x1d6
 8014020:	490c      	ldr	r1, [pc, #48]	@ (8014054 <udp_send+0x64>)
 8014022:	480b      	ldr	r0, [pc, #44]	@ (8014050 <udp_send+0x60>)
 8014024:	f003 fdd2 	bl	8017bcc <iprintf>
 8014028:	f06f 030f 	mvn.w	r3, #15
 801402c:	e008      	b.n	8014040 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 801402e:	687b      	ldr	r3, [r7, #4]
 8014030:	1d1a      	adds	r2, r3, #4
 8014032:	687b      	ldr	r3, [r7, #4]
 8014034:	8a9b      	ldrh	r3, [r3, #20]
 8014036:	6839      	ldr	r1, [r7, #0]
 8014038:	6878      	ldr	r0, [r7, #4]
 801403a:	f000 f80d 	bl	8014058 <udp_sendto>
 801403e:	4603      	mov	r3, r0
}
 8014040:	4618      	mov	r0, r3
 8014042:	3708      	adds	r7, #8
 8014044:	46bd      	mov	sp, r7
 8014046:	bd80      	pop	{r7, pc}
 8014048:	080228c8 	.word	0x080228c8
 801404c:	080229bc 	.word	0x080229bc
 8014050:	0802291c 	.word	0x0802291c
 8014054:	080229d4 	.word	0x080229d4

08014058 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8014058:	b580      	push	{r7, lr}
 801405a:	b088      	sub	sp, #32
 801405c:	af02      	add	r7, sp, #8
 801405e:	60f8      	str	r0, [r7, #12]
 8014060:	60b9      	str	r1, [r7, #8]
 8014062:	607a      	str	r2, [r7, #4]
 8014064:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8014066:	68fb      	ldr	r3, [r7, #12]
 8014068:	2b00      	cmp	r3, #0
 801406a:	d109      	bne.n	8014080 <udp_sendto+0x28>
 801406c:	4b23      	ldr	r3, [pc, #140]	@ (80140fc <udp_sendto+0xa4>)
 801406e:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8014072:	4923      	ldr	r1, [pc, #140]	@ (8014100 <udp_sendto+0xa8>)
 8014074:	4823      	ldr	r0, [pc, #140]	@ (8014104 <udp_sendto+0xac>)
 8014076:	f003 fda9 	bl	8017bcc <iprintf>
 801407a:	f06f 030f 	mvn.w	r3, #15
 801407e:	e038      	b.n	80140f2 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8014080:	68bb      	ldr	r3, [r7, #8]
 8014082:	2b00      	cmp	r3, #0
 8014084:	d109      	bne.n	801409a <udp_sendto+0x42>
 8014086:	4b1d      	ldr	r3, [pc, #116]	@ (80140fc <udp_sendto+0xa4>)
 8014088:	f240 2219 	movw	r2, #537	@ 0x219
 801408c:	491e      	ldr	r1, [pc, #120]	@ (8014108 <udp_sendto+0xb0>)
 801408e:	481d      	ldr	r0, [pc, #116]	@ (8014104 <udp_sendto+0xac>)
 8014090:	f003 fd9c 	bl	8017bcc <iprintf>
 8014094:	f06f 030f 	mvn.w	r3, #15
 8014098:	e02b      	b.n	80140f2 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801409a:	687b      	ldr	r3, [r7, #4]
 801409c:	2b00      	cmp	r3, #0
 801409e:	d109      	bne.n	80140b4 <udp_sendto+0x5c>
 80140a0:	4b16      	ldr	r3, [pc, #88]	@ (80140fc <udp_sendto+0xa4>)
 80140a2:	f240 221a 	movw	r2, #538	@ 0x21a
 80140a6:	4919      	ldr	r1, [pc, #100]	@ (801410c <udp_sendto+0xb4>)
 80140a8:	4816      	ldr	r0, [pc, #88]	@ (8014104 <udp_sendto+0xac>)
 80140aa:	f003 fd8f 	bl	8017bcc <iprintf>
 80140ae:	f06f 030f 	mvn.w	r3, #15
 80140b2:	e01e      	b.n	80140f2 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 80140b4:	68fb      	ldr	r3, [r7, #12]
 80140b6:	7a1b      	ldrb	r3, [r3, #8]
 80140b8:	2b00      	cmp	r3, #0
 80140ba:	d006      	beq.n	80140ca <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 80140bc:	68fb      	ldr	r3, [r7, #12]
 80140be:	7a1b      	ldrb	r3, [r3, #8]
 80140c0:	4618      	mov	r0, r3
 80140c2:	f7f9 fbd9 	bl	800d878 <netif_get_by_index>
 80140c6:	6178      	str	r0, [r7, #20]
 80140c8:	e003      	b.n	80140d2 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 80140ca:	6878      	ldr	r0, [r7, #4]
 80140cc:	f001 fbf4 	bl	80158b8 <ip4_route>
 80140d0:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 80140d2:	697b      	ldr	r3, [r7, #20]
 80140d4:	2b00      	cmp	r3, #0
 80140d6:	d102      	bne.n	80140de <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 80140d8:	f06f 0303 	mvn.w	r3, #3
 80140dc:	e009      	b.n	80140f2 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 80140de:	887a      	ldrh	r2, [r7, #2]
 80140e0:	697b      	ldr	r3, [r7, #20]
 80140e2:	9300      	str	r3, [sp, #0]
 80140e4:	4613      	mov	r3, r2
 80140e6:	687a      	ldr	r2, [r7, #4]
 80140e8:	68b9      	ldr	r1, [r7, #8]
 80140ea:	68f8      	ldr	r0, [r7, #12]
 80140ec:	f000 f810 	bl	8014110 <udp_sendto_if>
 80140f0:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80140f2:	4618      	mov	r0, r3
 80140f4:	3718      	adds	r7, #24
 80140f6:	46bd      	mov	sp, r7
 80140f8:	bd80      	pop	{r7, pc}
 80140fa:	bf00      	nop
 80140fc:	080228c8 	.word	0x080228c8
 8014100:	080229ec 	.word	0x080229ec
 8014104:	0802291c 	.word	0x0802291c
 8014108:	08022a04 	.word	0x08022a04
 801410c:	08022a20 	.word	0x08022a20

08014110 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8014110:	b580      	push	{r7, lr}
 8014112:	b088      	sub	sp, #32
 8014114:	af02      	add	r7, sp, #8
 8014116:	60f8      	str	r0, [r7, #12]
 8014118:	60b9      	str	r1, [r7, #8]
 801411a:	607a      	str	r2, [r7, #4]
 801411c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801411e:	68fb      	ldr	r3, [r7, #12]
 8014120:	2b00      	cmp	r3, #0
 8014122:	d109      	bne.n	8014138 <udp_sendto_if+0x28>
 8014124:	4b2e      	ldr	r3, [pc, #184]	@ (80141e0 <udp_sendto_if+0xd0>)
 8014126:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801412a:	492e      	ldr	r1, [pc, #184]	@ (80141e4 <udp_sendto_if+0xd4>)
 801412c:	482e      	ldr	r0, [pc, #184]	@ (80141e8 <udp_sendto_if+0xd8>)
 801412e:	f003 fd4d 	bl	8017bcc <iprintf>
 8014132:	f06f 030f 	mvn.w	r3, #15
 8014136:	e04f      	b.n	80141d8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8014138:	68bb      	ldr	r3, [r7, #8]
 801413a:	2b00      	cmp	r3, #0
 801413c:	d109      	bne.n	8014152 <udp_sendto_if+0x42>
 801413e:	4b28      	ldr	r3, [pc, #160]	@ (80141e0 <udp_sendto_if+0xd0>)
 8014140:	f240 2281 	movw	r2, #641	@ 0x281
 8014144:	4929      	ldr	r1, [pc, #164]	@ (80141ec <udp_sendto_if+0xdc>)
 8014146:	4828      	ldr	r0, [pc, #160]	@ (80141e8 <udp_sendto_if+0xd8>)
 8014148:	f003 fd40 	bl	8017bcc <iprintf>
 801414c:	f06f 030f 	mvn.w	r3, #15
 8014150:	e042      	b.n	80141d8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	2b00      	cmp	r3, #0
 8014156:	d109      	bne.n	801416c <udp_sendto_if+0x5c>
 8014158:	4b21      	ldr	r3, [pc, #132]	@ (80141e0 <udp_sendto_if+0xd0>)
 801415a:	f240 2282 	movw	r2, #642	@ 0x282
 801415e:	4924      	ldr	r1, [pc, #144]	@ (80141f0 <udp_sendto_if+0xe0>)
 8014160:	4821      	ldr	r0, [pc, #132]	@ (80141e8 <udp_sendto_if+0xd8>)
 8014162:	f003 fd33 	bl	8017bcc <iprintf>
 8014166:	f06f 030f 	mvn.w	r3, #15
 801416a:	e035      	b.n	80141d8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801416c:	6a3b      	ldr	r3, [r7, #32]
 801416e:	2b00      	cmp	r3, #0
 8014170:	d109      	bne.n	8014186 <udp_sendto_if+0x76>
 8014172:	4b1b      	ldr	r3, [pc, #108]	@ (80141e0 <udp_sendto_if+0xd0>)
 8014174:	f240 2283 	movw	r2, #643	@ 0x283
 8014178:	491e      	ldr	r1, [pc, #120]	@ (80141f4 <udp_sendto_if+0xe4>)
 801417a:	481b      	ldr	r0, [pc, #108]	@ (80141e8 <udp_sendto_if+0xd8>)
 801417c:	f003 fd26 	bl	8017bcc <iprintf>
 8014180:	f06f 030f 	mvn.w	r3, #15
 8014184:	e028      	b.n	80141d8 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014186:	68fb      	ldr	r3, [r7, #12]
 8014188:	2b00      	cmp	r3, #0
 801418a:	d009      	beq.n	80141a0 <udp_sendto_if+0x90>
 801418c:	68fb      	ldr	r3, [r7, #12]
 801418e:	681b      	ldr	r3, [r3, #0]
 8014190:	2b00      	cmp	r3, #0
 8014192:	d005      	beq.n	80141a0 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8014194:	68fb      	ldr	r3, [r7, #12]
 8014196:	681b      	ldr	r3, [r3, #0]
 8014198:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801419c:	2be0      	cmp	r3, #224	@ 0xe0
 801419e:	d103      	bne.n	80141a8 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 80141a0:	6a3b      	ldr	r3, [r7, #32]
 80141a2:	3304      	adds	r3, #4
 80141a4:	617b      	str	r3, [r7, #20]
 80141a6:	e00b      	b.n	80141c0 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 80141a8:	68fb      	ldr	r3, [r7, #12]
 80141aa:	681a      	ldr	r2, [r3, #0]
 80141ac:	6a3b      	ldr	r3, [r7, #32]
 80141ae:	3304      	adds	r3, #4
 80141b0:	681b      	ldr	r3, [r3, #0]
 80141b2:	429a      	cmp	r2, r3
 80141b4:	d002      	beq.n	80141bc <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 80141b6:	f06f 0303 	mvn.w	r3, #3
 80141ba:	e00d      	b.n	80141d8 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 80141bc:	68fb      	ldr	r3, [r7, #12]
 80141be:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 80141c0:	887a      	ldrh	r2, [r7, #2]
 80141c2:	697b      	ldr	r3, [r7, #20]
 80141c4:	9301      	str	r3, [sp, #4]
 80141c6:	6a3b      	ldr	r3, [r7, #32]
 80141c8:	9300      	str	r3, [sp, #0]
 80141ca:	4613      	mov	r3, r2
 80141cc:	687a      	ldr	r2, [r7, #4]
 80141ce:	68b9      	ldr	r1, [r7, #8]
 80141d0:	68f8      	ldr	r0, [r7, #12]
 80141d2:	f000 f811 	bl	80141f8 <udp_sendto_if_src>
 80141d6:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80141d8:	4618      	mov	r0, r3
 80141da:	3718      	adds	r7, #24
 80141dc:	46bd      	mov	sp, r7
 80141de:	bd80      	pop	{r7, pc}
 80141e0:	080228c8 	.word	0x080228c8
 80141e4:	08022a3c 	.word	0x08022a3c
 80141e8:	0802291c 	.word	0x0802291c
 80141ec:	08022a58 	.word	0x08022a58
 80141f0:	08022a74 	.word	0x08022a74
 80141f4:	08022a94 	.word	0x08022a94

080141f8 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 80141f8:	b580      	push	{r7, lr}
 80141fa:	b08c      	sub	sp, #48	@ 0x30
 80141fc:	af04      	add	r7, sp, #16
 80141fe:	60f8      	str	r0, [r7, #12]
 8014200:	60b9      	str	r1, [r7, #8]
 8014202:	607a      	str	r2, [r7, #4]
 8014204:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8014206:	68fb      	ldr	r3, [r7, #12]
 8014208:	2b00      	cmp	r3, #0
 801420a:	d109      	bne.n	8014220 <udp_sendto_if_src+0x28>
 801420c:	4b65      	ldr	r3, [pc, #404]	@ (80143a4 <udp_sendto_if_src+0x1ac>)
 801420e:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8014212:	4965      	ldr	r1, [pc, #404]	@ (80143a8 <udp_sendto_if_src+0x1b0>)
 8014214:	4865      	ldr	r0, [pc, #404]	@ (80143ac <udp_sendto_if_src+0x1b4>)
 8014216:	f003 fcd9 	bl	8017bcc <iprintf>
 801421a:	f06f 030f 	mvn.w	r3, #15
 801421e:	e0bc      	b.n	801439a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8014220:	68bb      	ldr	r3, [r7, #8]
 8014222:	2b00      	cmp	r3, #0
 8014224:	d109      	bne.n	801423a <udp_sendto_if_src+0x42>
 8014226:	4b5f      	ldr	r3, [pc, #380]	@ (80143a4 <udp_sendto_if_src+0x1ac>)
 8014228:	f240 22d2 	movw	r2, #722	@ 0x2d2
 801422c:	4960      	ldr	r1, [pc, #384]	@ (80143b0 <udp_sendto_if_src+0x1b8>)
 801422e:	485f      	ldr	r0, [pc, #380]	@ (80143ac <udp_sendto_if_src+0x1b4>)
 8014230:	f003 fccc 	bl	8017bcc <iprintf>
 8014234:	f06f 030f 	mvn.w	r3, #15
 8014238:	e0af      	b.n	801439a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801423a:	687b      	ldr	r3, [r7, #4]
 801423c:	2b00      	cmp	r3, #0
 801423e:	d109      	bne.n	8014254 <udp_sendto_if_src+0x5c>
 8014240:	4b58      	ldr	r3, [pc, #352]	@ (80143a4 <udp_sendto_if_src+0x1ac>)
 8014242:	f240 22d3 	movw	r2, #723	@ 0x2d3
 8014246:	495b      	ldr	r1, [pc, #364]	@ (80143b4 <udp_sendto_if_src+0x1bc>)
 8014248:	4858      	ldr	r0, [pc, #352]	@ (80143ac <udp_sendto_if_src+0x1b4>)
 801424a:	f003 fcbf 	bl	8017bcc <iprintf>
 801424e:	f06f 030f 	mvn.w	r3, #15
 8014252:	e0a2      	b.n	801439a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8014254:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014256:	2b00      	cmp	r3, #0
 8014258:	d109      	bne.n	801426e <udp_sendto_if_src+0x76>
 801425a:	4b52      	ldr	r3, [pc, #328]	@ (80143a4 <udp_sendto_if_src+0x1ac>)
 801425c:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 8014260:	4955      	ldr	r1, [pc, #340]	@ (80143b8 <udp_sendto_if_src+0x1c0>)
 8014262:	4852      	ldr	r0, [pc, #328]	@ (80143ac <udp_sendto_if_src+0x1b4>)
 8014264:	f003 fcb2 	bl	8017bcc <iprintf>
 8014268:	f06f 030f 	mvn.w	r3, #15
 801426c:	e095      	b.n	801439a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801426e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014270:	2b00      	cmp	r3, #0
 8014272:	d109      	bne.n	8014288 <udp_sendto_if_src+0x90>
 8014274:	4b4b      	ldr	r3, [pc, #300]	@ (80143a4 <udp_sendto_if_src+0x1ac>)
 8014276:	f240 22d5 	movw	r2, #725	@ 0x2d5
 801427a:	4950      	ldr	r1, [pc, #320]	@ (80143bc <udp_sendto_if_src+0x1c4>)
 801427c:	484b      	ldr	r0, [pc, #300]	@ (80143ac <udp_sendto_if_src+0x1b4>)
 801427e:	f003 fca5 	bl	8017bcc <iprintf>
 8014282:	f06f 030f 	mvn.w	r3, #15
 8014286:	e088      	b.n	801439a <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8014288:	68fb      	ldr	r3, [r7, #12]
 801428a:	8a5b      	ldrh	r3, [r3, #18]
 801428c:	2b00      	cmp	r3, #0
 801428e:	d10f      	bne.n	80142b0 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8014290:	68f9      	ldr	r1, [r7, #12]
 8014292:	68fb      	ldr	r3, [r7, #12]
 8014294:	8a5b      	ldrh	r3, [r3, #18]
 8014296:	461a      	mov	r2, r3
 8014298:	68f8      	ldr	r0, [r7, #12]
 801429a:	f000 f893 	bl	80143c4 <udp_bind>
 801429e:	4603      	mov	r3, r0
 80142a0:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 80142a2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80142a6:	2b00      	cmp	r3, #0
 80142a8:	d002      	beq.n	80142b0 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 80142aa:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80142ae:	e074      	b.n	801439a <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 80142b0:	68bb      	ldr	r3, [r7, #8]
 80142b2:	891b      	ldrh	r3, [r3, #8]
 80142b4:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 80142b8:	4293      	cmp	r3, r2
 80142ba:	d902      	bls.n	80142c2 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 80142bc:	f04f 33ff 	mov.w	r3, #4294967295
 80142c0:	e06b      	b.n	801439a <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 80142c2:	2108      	movs	r1, #8
 80142c4:	68b8      	ldr	r0, [r7, #8]
 80142c6:	f7f9 fda1 	bl	800de0c <pbuf_add_header>
 80142ca:	4603      	mov	r3, r0
 80142cc:	2b00      	cmp	r3, #0
 80142ce:	d015      	beq.n	80142fc <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 80142d0:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80142d4:	2108      	movs	r1, #8
 80142d6:	2022      	movs	r0, #34	@ 0x22
 80142d8:	f7f9 fb4a 	bl	800d970 <pbuf_alloc>
 80142dc:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 80142de:	69fb      	ldr	r3, [r7, #28]
 80142e0:	2b00      	cmp	r3, #0
 80142e2:	d102      	bne.n	80142ea <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 80142e4:	f04f 33ff 	mov.w	r3, #4294967295
 80142e8:	e057      	b.n	801439a <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 80142ea:	68bb      	ldr	r3, [r7, #8]
 80142ec:	891b      	ldrh	r3, [r3, #8]
 80142ee:	2b00      	cmp	r3, #0
 80142f0:	d006      	beq.n	8014300 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 80142f2:	68b9      	ldr	r1, [r7, #8]
 80142f4:	69f8      	ldr	r0, [r7, #28]
 80142f6:	f7f9 ff37 	bl	800e168 <pbuf_chain>
 80142fa:	e001      	b.n	8014300 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 80142fc:	68bb      	ldr	r3, [r7, #8]
 80142fe:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8014300:	69fb      	ldr	r3, [r7, #28]
 8014302:	895b      	ldrh	r3, [r3, #10]
 8014304:	2b07      	cmp	r3, #7
 8014306:	d806      	bhi.n	8014316 <udp_sendto_if_src+0x11e>
 8014308:	4b26      	ldr	r3, [pc, #152]	@ (80143a4 <udp_sendto_if_src+0x1ac>)
 801430a:	f240 320d 	movw	r2, #781	@ 0x30d
 801430e:	492c      	ldr	r1, [pc, #176]	@ (80143c0 <udp_sendto_if_src+0x1c8>)
 8014310:	4826      	ldr	r0, [pc, #152]	@ (80143ac <udp_sendto_if_src+0x1b4>)
 8014312:	f003 fc5b 	bl	8017bcc <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8014316:	69fb      	ldr	r3, [r7, #28]
 8014318:	685b      	ldr	r3, [r3, #4]
 801431a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801431c:	68fb      	ldr	r3, [r7, #12]
 801431e:	8a5b      	ldrh	r3, [r3, #18]
 8014320:	4618      	mov	r0, r3
 8014322:	f7f7 ffe1 	bl	800c2e8 <lwip_htons>
 8014326:	4603      	mov	r3, r0
 8014328:	461a      	mov	r2, r3
 801432a:	697b      	ldr	r3, [r7, #20]
 801432c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801432e:	887b      	ldrh	r3, [r7, #2]
 8014330:	4618      	mov	r0, r3
 8014332:	f7f7 ffd9 	bl	800c2e8 <lwip_htons>
 8014336:	4603      	mov	r3, r0
 8014338:	461a      	mov	r2, r3
 801433a:	697b      	ldr	r3, [r7, #20]
 801433c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801433e:	697b      	ldr	r3, [r7, #20]
 8014340:	2200      	movs	r2, #0
 8014342:	719a      	strb	r2, [r3, #6]
 8014344:	2200      	movs	r2, #0
 8014346:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8014348:	69fb      	ldr	r3, [r7, #28]
 801434a:	891b      	ldrh	r3, [r3, #8]
 801434c:	4618      	mov	r0, r3
 801434e:	f7f7 ffcb 	bl	800c2e8 <lwip_htons>
 8014352:	4603      	mov	r3, r0
 8014354:	461a      	mov	r2, r3
 8014356:	697b      	ldr	r3, [r7, #20]
 8014358:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801435a:	2311      	movs	r3, #17
 801435c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801435e:	68fb      	ldr	r3, [r7, #12]
 8014360:	7adb      	ldrb	r3, [r3, #11]
 8014362:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8014364:	68fb      	ldr	r3, [r7, #12]
 8014366:	7a9b      	ldrb	r3, [r3, #10]
 8014368:	7cb9      	ldrb	r1, [r7, #18]
 801436a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801436c:	9202      	str	r2, [sp, #8]
 801436e:	7cfa      	ldrb	r2, [r7, #19]
 8014370:	9201      	str	r2, [sp, #4]
 8014372:	9300      	str	r3, [sp, #0]
 8014374:	460b      	mov	r3, r1
 8014376:	687a      	ldr	r2, [r7, #4]
 8014378:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801437a:	69f8      	ldr	r0, [r7, #28]
 801437c:	f001 fc84 	bl	8015c88 <ip4_output_if_src>
 8014380:	4603      	mov	r3, r0
 8014382:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8014384:	69fa      	ldr	r2, [r7, #28]
 8014386:	68bb      	ldr	r3, [r7, #8]
 8014388:	429a      	cmp	r2, r3
 801438a:	d004      	beq.n	8014396 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 801438c:	69f8      	ldr	r0, [r7, #28]
 801438e:	f7f9 fdd3 	bl	800df38 <pbuf_free>
    q = NULL;
 8014392:	2300      	movs	r3, #0
 8014394:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8014396:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801439a:	4618      	mov	r0, r3
 801439c:	3720      	adds	r7, #32
 801439e:	46bd      	mov	sp, r7
 80143a0:	bd80      	pop	{r7, pc}
 80143a2:	bf00      	nop
 80143a4:	080228c8 	.word	0x080228c8
 80143a8:	08022ab4 	.word	0x08022ab4
 80143ac:	0802291c 	.word	0x0802291c
 80143b0:	08022ad4 	.word	0x08022ad4
 80143b4:	08022af4 	.word	0x08022af4
 80143b8:	08022b18 	.word	0x08022b18
 80143bc:	08022b3c 	.word	0x08022b3c
 80143c0:	08022b60 	.word	0x08022b60

080143c4 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80143c4:	b580      	push	{r7, lr}
 80143c6:	b086      	sub	sp, #24
 80143c8:	af00      	add	r7, sp, #0
 80143ca:	60f8      	str	r0, [r7, #12]
 80143cc:	60b9      	str	r1, [r7, #8]
 80143ce:	4613      	mov	r3, r2
 80143d0:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80143d2:	68bb      	ldr	r3, [r7, #8]
 80143d4:	2b00      	cmp	r3, #0
 80143d6:	d101      	bne.n	80143dc <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80143d8:	4b39      	ldr	r3, [pc, #228]	@ (80144c0 <udp_bind+0xfc>)
 80143da:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80143dc:	68fb      	ldr	r3, [r7, #12]
 80143de:	2b00      	cmp	r3, #0
 80143e0:	d109      	bne.n	80143f6 <udp_bind+0x32>
 80143e2:	4b38      	ldr	r3, [pc, #224]	@ (80144c4 <udp_bind+0x100>)
 80143e4:	f240 32b7 	movw	r2, #951	@ 0x3b7
 80143e8:	4937      	ldr	r1, [pc, #220]	@ (80144c8 <udp_bind+0x104>)
 80143ea:	4838      	ldr	r0, [pc, #224]	@ (80144cc <udp_bind+0x108>)
 80143ec:	f003 fbee 	bl	8017bcc <iprintf>
 80143f0:	f06f 030f 	mvn.w	r3, #15
 80143f4:	e060      	b.n	80144b8 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80143f6:	2300      	movs	r3, #0
 80143f8:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80143fa:	4b35      	ldr	r3, [pc, #212]	@ (80144d0 <udp_bind+0x10c>)
 80143fc:	681b      	ldr	r3, [r3, #0]
 80143fe:	617b      	str	r3, [r7, #20]
 8014400:	e009      	b.n	8014416 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8014402:	68fa      	ldr	r2, [r7, #12]
 8014404:	697b      	ldr	r3, [r7, #20]
 8014406:	429a      	cmp	r2, r3
 8014408:	d102      	bne.n	8014410 <udp_bind+0x4c>
      rebind = 1;
 801440a:	2301      	movs	r3, #1
 801440c:	74fb      	strb	r3, [r7, #19]
      break;
 801440e:	e005      	b.n	801441c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014410:	697b      	ldr	r3, [r7, #20]
 8014412:	68db      	ldr	r3, [r3, #12]
 8014414:	617b      	str	r3, [r7, #20]
 8014416:	697b      	ldr	r3, [r7, #20]
 8014418:	2b00      	cmp	r3, #0
 801441a:	d1f2      	bne.n	8014402 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801441c:	88fb      	ldrh	r3, [r7, #6]
 801441e:	2b00      	cmp	r3, #0
 8014420:	d109      	bne.n	8014436 <udp_bind+0x72>
    port = udp_new_port();
 8014422:	f7ff fc35 	bl	8013c90 <udp_new_port>
 8014426:	4603      	mov	r3, r0
 8014428:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801442a:	88fb      	ldrh	r3, [r7, #6]
 801442c:	2b00      	cmp	r3, #0
 801442e:	d12c      	bne.n	801448a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8014430:	f06f 0307 	mvn.w	r3, #7
 8014434:	e040      	b.n	80144b8 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014436:	4b26      	ldr	r3, [pc, #152]	@ (80144d0 <udp_bind+0x10c>)
 8014438:	681b      	ldr	r3, [r3, #0]
 801443a:	617b      	str	r3, [r7, #20]
 801443c:	e022      	b.n	8014484 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801443e:	68fa      	ldr	r2, [r7, #12]
 8014440:	697b      	ldr	r3, [r7, #20]
 8014442:	429a      	cmp	r2, r3
 8014444:	d01b      	beq.n	801447e <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8014446:	697b      	ldr	r3, [r7, #20]
 8014448:	8a5b      	ldrh	r3, [r3, #18]
 801444a:	88fa      	ldrh	r2, [r7, #6]
 801444c:	429a      	cmp	r2, r3
 801444e:	d116      	bne.n	801447e <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8014450:	697b      	ldr	r3, [r7, #20]
 8014452:	681a      	ldr	r2, [r3, #0]
 8014454:	68bb      	ldr	r3, [r7, #8]
 8014456:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8014458:	429a      	cmp	r2, r3
 801445a:	d00d      	beq.n	8014478 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801445c:	68bb      	ldr	r3, [r7, #8]
 801445e:	2b00      	cmp	r3, #0
 8014460:	d00a      	beq.n	8014478 <udp_bind+0xb4>
 8014462:	68bb      	ldr	r3, [r7, #8]
 8014464:	681b      	ldr	r3, [r3, #0]
 8014466:	2b00      	cmp	r3, #0
 8014468:	d006      	beq.n	8014478 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801446a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801446c:	2b00      	cmp	r3, #0
 801446e:	d003      	beq.n	8014478 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8014470:	697b      	ldr	r3, [r7, #20]
 8014472:	681b      	ldr	r3, [r3, #0]
 8014474:	2b00      	cmp	r3, #0
 8014476:	d102      	bne.n	801447e <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8014478:	f06f 0307 	mvn.w	r3, #7
 801447c:	e01c      	b.n	80144b8 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801447e:	697b      	ldr	r3, [r7, #20]
 8014480:	68db      	ldr	r3, [r3, #12]
 8014482:	617b      	str	r3, [r7, #20]
 8014484:	697b      	ldr	r3, [r7, #20]
 8014486:	2b00      	cmp	r3, #0
 8014488:	d1d9      	bne.n	801443e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801448a:	68bb      	ldr	r3, [r7, #8]
 801448c:	2b00      	cmp	r3, #0
 801448e:	d002      	beq.n	8014496 <udp_bind+0xd2>
 8014490:	68bb      	ldr	r3, [r7, #8]
 8014492:	681b      	ldr	r3, [r3, #0]
 8014494:	e000      	b.n	8014498 <udp_bind+0xd4>
 8014496:	2300      	movs	r3, #0
 8014498:	68fa      	ldr	r2, [r7, #12]
 801449a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801449c:	68fb      	ldr	r3, [r7, #12]
 801449e:	88fa      	ldrh	r2, [r7, #6]
 80144a0:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80144a2:	7cfb      	ldrb	r3, [r7, #19]
 80144a4:	2b00      	cmp	r3, #0
 80144a6:	d106      	bne.n	80144b6 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80144a8:	4b09      	ldr	r3, [pc, #36]	@ (80144d0 <udp_bind+0x10c>)
 80144aa:	681a      	ldr	r2, [r3, #0]
 80144ac:	68fb      	ldr	r3, [r7, #12]
 80144ae:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80144b0:	4a07      	ldr	r2, [pc, #28]	@ (80144d0 <udp_bind+0x10c>)
 80144b2:	68fb      	ldr	r3, [r7, #12]
 80144b4:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80144b6:	2300      	movs	r3, #0
}
 80144b8:	4618      	mov	r0, r3
 80144ba:	3718      	adds	r7, #24
 80144bc:	46bd      	mov	sp, r7
 80144be:	bd80      	pop	{r7, pc}
 80144c0:	080233ec 	.word	0x080233ec
 80144c4:	080228c8 	.word	0x080228c8
 80144c8:	08022b90 	.word	0x08022b90
 80144cc:	0802291c 	.word	0x0802291c
 80144d0:	200152a8 	.word	0x200152a8

080144d4 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80144d4:	b580      	push	{r7, lr}
 80144d6:	b086      	sub	sp, #24
 80144d8:	af00      	add	r7, sp, #0
 80144da:	60f8      	str	r0, [r7, #12]
 80144dc:	60b9      	str	r1, [r7, #8]
 80144de:	4613      	mov	r3, r2
 80144e0:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 80144e2:	68fb      	ldr	r3, [r7, #12]
 80144e4:	2b00      	cmp	r3, #0
 80144e6:	d109      	bne.n	80144fc <udp_connect+0x28>
 80144e8:	4b2c      	ldr	r3, [pc, #176]	@ (801459c <udp_connect+0xc8>)
 80144ea:	f240 4235 	movw	r2, #1077	@ 0x435
 80144ee:	492c      	ldr	r1, [pc, #176]	@ (80145a0 <udp_connect+0xcc>)
 80144f0:	482c      	ldr	r0, [pc, #176]	@ (80145a4 <udp_connect+0xd0>)
 80144f2:	f003 fb6b 	bl	8017bcc <iprintf>
 80144f6:	f06f 030f 	mvn.w	r3, #15
 80144fa:	e04b      	b.n	8014594 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 80144fc:	68bb      	ldr	r3, [r7, #8]
 80144fe:	2b00      	cmp	r3, #0
 8014500:	d109      	bne.n	8014516 <udp_connect+0x42>
 8014502:	4b26      	ldr	r3, [pc, #152]	@ (801459c <udp_connect+0xc8>)
 8014504:	f240 4236 	movw	r2, #1078	@ 0x436
 8014508:	4927      	ldr	r1, [pc, #156]	@ (80145a8 <udp_connect+0xd4>)
 801450a:	4826      	ldr	r0, [pc, #152]	@ (80145a4 <udp_connect+0xd0>)
 801450c:	f003 fb5e 	bl	8017bcc <iprintf>
 8014510:	f06f 030f 	mvn.w	r3, #15
 8014514:	e03e      	b.n	8014594 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8014516:	68fb      	ldr	r3, [r7, #12]
 8014518:	8a5b      	ldrh	r3, [r3, #18]
 801451a:	2b00      	cmp	r3, #0
 801451c:	d10f      	bne.n	801453e <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801451e:	68f9      	ldr	r1, [r7, #12]
 8014520:	68fb      	ldr	r3, [r7, #12]
 8014522:	8a5b      	ldrh	r3, [r3, #18]
 8014524:	461a      	mov	r2, r3
 8014526:	68f8      	ldr	r0, [r7, #12]
 8014528:	f7ff ff4c 	bl	80143c4 <udp_bind>
 801452c:	4603      	mov	r3, r0
 801452e:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8014530:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014534:	2b00      	cmp	r3, #0
 8014536:	d002      	beq.n	801453e <udp_connect+0x6a>
      return err;
 8014538:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801453c:	e02a      	b.n	8014594 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801453e:	68bb      	ldr	r3, [r7, #8]
 8014540:	2b00      	cmp	r3, #0
 8014542:	d002      	beq.n	801454a <udp_connect+0x76>
 8014544:	68bb      	ldr	r3, [r7, #8]
 8014546:	681b      	ldr	r3, [r3, #0]
 8014548:	e000      	b.n	801454c <udp_connect+0x78>
 801454a:	2300      	movs	r3, #0
 801454c:	68fa      	ldr	r2, [r7, #12]
 801454e:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8014550:	68fb      	ldr	r3, [r7, #12]
 8014552:	88fa      	ldrh	r2, [r7, #6]
 8014554:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8014556:	68fb      	ldr	r3, [r7, #12]
 8014558:	7c1b      	ldrb	r3, [r3, #16]
 801455a:	f043 0304 	orr.w	r3, r3, #4
 801455e:	b2da      	uxtb	r2, r3
 8014560:	68fb      	ldr	r3, [r7, #12]
 8014562:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014564:	4b11      	ldr	r3, [pc, #68]	@ (80145ac <udp_connect+0xd8>)
 8014566:	681b      	ldr	r3, [r3, #0]
 8014568:	617b      	str	r3, [r7, #20]
 801456a:	e008      	b.n	801457e <udp_connect+0xaa>
    if (pcb == ipcb) {
 801456c:	68fa      	ldr	r2, [r7, #12]
 801456e:	697b      	ldr	r3, [r7, #20]
 8014570:	429a      	cmp	r2, r3
 8014572:	d101      	bne.n	8014578 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8014574:	2300      	movs	r3, #0
 8014576:	e00d      	b.n	8014594 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014578:	697b      	ldr	r3, [r7, #20]
 801457a:	68db      	ldr	r3, [r3, #12]
 801457c:	617b      	str	r3, [r7, #20]
 801457e:	697b      	ldr	r3, [r7, #20]
 8014580:	2b00      	cmp	r3, #0
 8014582:	d1f3      	bne.n	801456c <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8014584:	4b09      	ldr	r3, [pc, #36]	@ (80145ac <udp_connect+0xd8>)
 8014586:	681a      	ldr	r2, [r3, #0]
 8014588:	68fb      	ldr	r3, [r7, #12]
 801458a:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 801458c:	4a07      	ldr	r2, [pc, #28]	@ (80145ac <udp_connect+0xd8>)
 801458e:	68fb      	ldr	r3, [r7, #12]
 8014590:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8014592:	2300      	movs	r3, #0
}
 8014594:	4618      	mov	r0, r3
 8014596:	3718      	adds	r7, #24
 8014598:	46bd      	mov	sp, r7
 801459a:	bd80      	pop	{r7, pc}
 801459c:	080228c8 	.word	0x080228c8
 80145a0:	08022ba8 	.word	0x08022ba8
 80145a4:	0802291c 	.word	0x0802291c
 80145a8:	08022bc4 	.word	0x08022bc4
 80145ac:	200152a8 	.word	0x200152a8

080145b0 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80145b0:	b580      	push	{r7, lr}
 80145b2:	b084      	sub	sp, #16
 80145b4:	af00      	add	r7, sp, #0
 80145b6:	60f8      	str	r0, [r7, #12]
 80145b8:	60b9      	str	r1, [r7, #8]
 80145ba:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80145bc:	68fb      	ldr	r3, [r7, #12]
 80145be:	2b00      	cmp	r3, #0
 80145c0:	d107      	bne.n	80145d2 <udp_recv+0x22>
 80145c2:	4b08      	ldr	r3, [pc, #32]	@ (80145e4 <udp_recv+0x34>)
 80145c4:	f240 428a 	movw	r2, #1162	@ 0x48a
 80145c8:	4907      	ldr	r1, [pc, #28]	@ (80145e8 <udp_recv+0x38>)
 80145ca:	4808      	ldr	r0, [pc, #32]	@ (80145ec <udp_recv+0x3c>)
 80145cc:	f003 fafe 	bl	8017bcc <iprintf>
 80145d0:	e005      	b.n	80145de <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 80145d2:	68fb      	ldr	r3, [r7, #12]
 80145d4:	68ba      	ldr	r2, [r7, #8]
 80145d6:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 80145d8:	68fb      	ldr	r3, [r7, #12]
 80145da:	687a      	ldr	r2, [r7, #4]
 80145dc:	61da      	str	r2, [r3, #28]
}
 80145de:	3710      	adds	r7, #16
 80145e0:	46bd      	mov	sp, r7
 80145e2:	bd80      	pop	{r7, pc}
 80145e4:	080228c8 	.word	0x080228c8
 80145e8:	08022bfc 	.word	0x08022bfc
 80145ec:	0802291c 	.word	0x0802291c

080145f0 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 80145f0:	b580      	push	{r7, lr}
 80145f2:	b084      	sub	sp, #16
 80145f4:	af00      	add	r7, sp, #0
 80145f6:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 80145f8:	687b      	ldr	r3, [r7, #4]
 80145fa:	2b00      	cmp	r3, #0
 80145fc:	d107      	bne.n	801460e <udp_remove+0x1e>
 80145fe:	4b19      	ldr	r3, [pc, #100]	@ (8014664 <udp_remove+0x74>)
 8014600:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 8014604:	4918      	ldr	r1, [pc, #96]	@ (8014668 <udp_remove+0x78>)
 8014606:	4819      	ldr	r0, [pc, #100]	@ (801466c <udp_remove+0x7c>)
 8014608:	f003 fae0 	bl	8017bcc <iprintf>
 801460c:	e026      	b.n	801465c <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801460e:	4b18      	ldr	r3, [pc, #96]	@ (8014670 <udp_remove+0x80>)
 8014610:	681b      	ldr	r3, [r3, #0]
 8014612:	687a      	ldr	r2, [r7, #4]
 8014614:	429a      	cmp	r2, r3
 8014616:	d105      	bne.n	8014624 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8014618:	4b15      	ldr	r3, [pc, #84]	@ (8014670 <udp_remove+0x80>)
 801461a:	681b      	ldr	r3, [r3, #0]
 801461c:	68db      	ldr	r3, [r3, #12]
 801461e:	4a14      	ldr	r2, [pc, #80]	@ (8014670 <udp_remove+0x80>)
 8014620:	6013      	str	r3, [r2, #0]
 8014622:	e017      	b.n	8014654 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8014624:	4b12      	ldr	r3, [pc, #72]	@ (8014670 <udp_remove+0x80>)
 8014626:	681b      	ldr	r3, [r3, #0]
 8014628:	60fb      	str	r3, [r7, #12]
 801462a:	e010      	b.n	801464e <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801462c:	68fb      	ldr	r3, [r7, #12]
 801462e:	68db      	ldr	r3, [r3, #12]
 8014630:	2b00      	cmp	r3, #0
 8014632:	d009      	beq.n	8014648 <udp_remove+0x58>
 8014634:	68fb      	ldr	r3, [r7, #12]
 8014636:	68db      	ldr	r3, [r3, #12]
 8014638:	687a      	ldr	r2, [r7, #4]
 801463a:	429a      	cmp	r2, r3
 801463c:	d104      	bne.n	8014648 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801463e:	687b      	ldr	r3, [r7, #4]
 8014640:	68da      	ldr	r2, [r3, #12]
 8014642:	68fb      	ldr	r3, [r7, #12]
 8014644:	60da      	str	r2, [r3, #12]
        break;
 8014646:	e005      	b.n	8014654 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8014648:	68fb      	ldr	r3, [r7, #12]
 801464a:	68db      	ldr	r3, [r3, #12]
 801464c:	60fb      	str	r3, [r7, #12]
 801464e:	68fb      	ldr	r3, [r7, #12]
 8014650:	2b00      	cmp	r3, #0
 8014652:	d1eb      	bne.n	801462c <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8014654:	6879      	ldr	r1, [r7, #4]
 8014656:	2000      	movs	r0, #0
 8014658:	f7f8 fdf8 	bl	800d24c <memp_free>
}
 801465c:	3710      	adds	r7, #16
 801465e:	46bd      	mov	sp, r7
 8014660:	bd80      	pop	{r7, pc}
 8014662:	bf00      	nop
 8014664:	080228c8 	.word	0x080228c8
 8014668:	08022c14 	.word	0x08022c14
 801466c:	0802291c 	.word	0x0802291c
 8014670:	200152a8 	.word	0x200152a8

08014674 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8014674:	b580      	push	{r7, lr}
 8014676:	b082      	sub	sp, #8
 8014678:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801467a:	2000      	movs	r0, #0
 801467c:	f7f8 fd76 	bl	800d16c <memp_malloc>
 8014680:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8014682:	687b      	ldr	r3, [r7, #4]
 8014684:	2b00      	cmp	r3, #0
 8014686:	d007      	beq.n	8014698 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8014688:	2220      	movs	r2, #32
 801468a:	2100      	movs	r1, #0
 801468c:	6878      	ldr	r0, [r7, #4]
 801468e:	f003 fb3e 	bl	8017d0e <memset>
    pcb->ttl = UDP_TTL;
 8014692:	687b      	ldr	r3, [r7, #4]
 8014694:	22ff      	movs	r2, #255	@ 0xff
 8014696:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8014698:	687b      	ldr	r3, [r7, #4]
}
 801469a:	4618      	mov	r0, r3
 801469c:	3708      	adds	r7, #8
 801469e:	46bd      	mov	sp, r7
 80146a0:	bd80      	pop	{r7, pc}
	...

080146a4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80146a4:	b480      	push	{r7}
 80146a6:	b085      	sub	sp, #20
 80146a8:	af00      	add	r7, sp, #0
 80146aa:	6078      	str	r0, [r7, #4]
 80146ac:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80146ae:	687b      	ldr	r3, [r7, #4]
 80146b0:	2b00      	cmp	r3, #0
 80146b2:	d01e      	beq.n	80146f2 <udp_netif_ip_addr_changed+0x4e>
 80146b4:	687b      	ldr	r3, [r7, #4]
 80146b6:	681b      	ldr	r3, [r3, #0]
 80146b8:	2b00      	cmp	r3, #0
 80146ba:	d01a      	beq.n	80146f2 <udp_netif_ip_addr_changed+0x4e>
 80146bc:	683b      	ldr	r3, [r7, #0]
 80146be:	2b00      	cmp	r3, #0
 80146c0:	d017      	beq.n	80146f2 <udp_netif_ip_addr_changed+0x4e>
 80146c2:	683b      	ldr	r3, [r7, #0]
 80146c4:	681b      	ldr	r3, [r3, #0]
 80146c6:	2b00      	cmp	r3, #0
 80146c8:	d013      	beq.n	80146f2 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80146ca:	4b0d      	ldr	r3, [pc, #52]	@ (8014700 <udp_netif_ip_addr_changed+0x5c>)
 80146cc:	681b      	ldr	r3, [r3, #0]
 80146ce:	60fb      	str	r3, [r7, #12]
 80146d0:	e00c      	b.n	80146ec <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80146d2:	68fb      	ldr	r3, [r7, #12]
 80146d4:	681a      	ldr	r2, [r3, #0]
 80146d6:	687b      	ldr	r3, [r7, #4]
 80146d8:	681b      	ldr	r3, [r3, #0]
 80146da:	429a      	cmp	r2, r3
 80146dc:	d103      	bne.n	80146e6 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80146de:	683b      	ldr	r3, [r7, #0]
 80146e0:	681a      	ldr	r2, [r3, #0]
 80146e2:	68fb      	ldr	r3, [r7, #12]
 80146e4:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80146e6:	68fb      	ldr	r3, [r7, #12]
 80146e8:	68db      	ldr	r3, [r3, #12]
 80146ea:	60fb      	str	r3, [r7, #12]
 80146ec:	68fb      	ldr	r3, [r7, #12]
 80146ee:	2b00      	cmp	r3, #0
 80146f0:	d1ef      	bne.n	80146d2 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80146f2:	bf00      	nop
 80146f4:	3714      	adds	r7, #20
 80146f6:	46bd      	mov	sp, r7
 80146f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146fc:	4770      	bx	lr
 80146fe:	bf00      	nop
 8014700:	200152a8 	.word	0x200152a8

08014704 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8014704:	b580      	push	{r7, lr}
 8014706:	b082      	sub	sp, #8
 8014708:	af00      	add	r7, sp, #0
 801470a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801470c:	4915      	ldr	r1, [pc, #84]	@ (8014764 <etharp_free_entry+0x60>)
 801470e:	687a      	ldr	r2, [r7, #4]
 8014710:	4613      	mov	r3, r2
 8014712:	005b      	lsls	r3, r3, #1
 8014714:	4413      	add	r3, r2
 8014716:	00db      	lsls	r3, r3, #3
 8014718:	440b      	add	r3, r1
 801471a:	681b      	ldr	r3, [r3, #0]
 801471c:	2b00      	cmp	r3, #0
 801471e:	d013      	beq.n	8014748 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8014720:	4910      	ldr	r1, [pc, #64]	@ (8014764 <etharp_free_entry+0x60>)
 8014722:	687a      	ldr	r2, [r7, #4]
 8014724:	4613      	mov	r3, r2
 8014726:	005b      	lsls	r3, r3, #1
 8014728:	4413      	add	r3, r2
 801472a:	00db      	lsls	r3, r3, #3
 801472c:	440b      	add	r3, r1
 801472e:	681b      	ldr	r3, [r3, #0]
 8014730:	4618      	mov	r0, r3
 8014732:	f7f9 fc01 	bl	800df38 <pbuf_free>
    arp_table[i].q = NULL;
 8014736:	490b      	ldr	r1, [pc, #44]	@ (8014764 <etharp_free_entry+0x60>)
 8014738:	687a      	ldr	r2, [r7, #4]
 801473a:	4613      	mov	r3, r2
 801473c:	005b      	lsls	r3, r3, #1
 801473e:	4413      	add	r3, r2
 8014740:	00db      	lsls	r3, r3, #3
 8014742:	440b      	add	r3, r1
 8014744:	2200      	movs	r2, #0
 8014746:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8014748:	4906      	ldr	r1, [pc, #24]	@ (8014764 <etharp_free_entry+0x60>)
 801474a:	687a      	ldr	r2, [r7, #4]
 801474c:	4613      	mov	r3, r2
 801474e:	005b      	lsls	r3, r3, #1
 8014750:	4413      	add	r3, r2
 8014752:	00db      	lsls	r3, r3, #3
 8014754:	440b      	add	r3, r1
 8014756:	3314      	adds	r3, #20
 8014758:	2200      	movs	r2, #0
 801475a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801475c:	bf00      	nop
 801475e:	3708      	adds	r7, #8
 8014760:	46bd      	mov	sp, r7
 8014762:	bd80      	pop	{r7, pc}
 8014764:	200152ac 	.word	0x200152ac

08014768 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8014768:	b580      	push	{r7, lr}
 801476a:	b082      	sub	sp, #8
 801476c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801476e:	2300      	movs	r3, #0
 8014770:	607b      	str	r3, [r7, #4]
 8014772:	e096      	b.n	80148a2 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8014774:	494f      	ldr	r1, [pc, #316]	@ (80148b4 <etharp_tmr+0x14c>)
 8014776:	687a      	ldr	r2, [r7, #4]
 8014778:	4613      	mov	r3, r2
 801477a:	005b      	lsls	r3, r3, #1
 801477c:	4413      	add	r3, r2
 801477e:	00db      	lsls	r3, r3, #3
 8014780:	440b      	add	r3, r1
 8014782:	3314      	adds	r3, #20
 8014784:	781b      	ldrb	r3, [r3, #0]
 8014786:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8014788:	78fb      	ldrb	r3, [r7, #3]
 801478a:	2b00      	cmp	r3, #0
 801478c:	f000 8086 	beq.w	801489c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8014790:	4948      	ldr	r1, [pc, #288]	@ (80148b4 <etharp_tmr+0x14c>)
 8014792:	687a      	ldr	r2, [r7, #4]
 8014794:	4613      	mov	r3, r2
 8014796:	005b      	lsls	r3, r3, #1
 8014798:	4413      	add	r3, r2
 801479a:	00db      	lsls	r3, r3, #3
 801479c:	440b      	add	r3, r1
 801479e:	3312      	adds	r3, #18
 80147a0:	881b      	ldrh	r3, [r3, #0]
 80147a2:	3301      	adds	r3, #1
 80147a4:	b298      	uxth	r0, r3
 80147a6:	4943      	ldr	r1, [pc, #268]	@ (80148b4 <etharp_tmr+0x14c>)
 80147a8:	687a      	ldr	r2, [r7, #4]
 80147aa:	4613      	mov	r3, r2
 80147ac:	005b      	lsls	r3, r3, #1
 80147ae:	4413      	add	r3, r2
 80147b0:	00db      	lsls	r3, r3, #3
 80147b2:	440b      	add	r3, r1
 80147b4:	3312      	adds	r3, #18
 80147b6:	4602      	mov	r2, r0
 80147b8:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80147ba:	493e      	ldr	r1, [pc, #248]	@ (80148b4 <etharp_tmr+0x14c>)
 80147bc:	687a      	ldr	r2, [r7, #4]
 80147be:	4613      	mov	r3, r2
 80147c0:	005b      	lsls	r3, r3, #1
 80147c2:	4413      	add	r3, r2
 80147c4:	00db      	lsls	r3, r3, #3
 80147c6:	440b      	add	r3, r1
 80147c8:	3312      	adds	r3, #18
 80147ca:	881b      	ldrh	r3, [r3, #0]
 80147cc:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80147d0:	d215      	bcs.n	80147fe <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80147d2:	4938      	ldr	r1, [pc, #224]	@ (80148b4 <etharp_tmr+0x14c>)
 80147d4:	687a      	ldr	r2, [r7, #4]
 80147d6:	4613      	mov	r3, r2
 80147d8:	005b      	lsls	r3, r3, #1
 80147da:	4413      	add	r3, r2
 80147dc:	00db      	lsls	r3, r3, #3
 80147de:	440b      	add	r3, r1
 80147e0:	3314      	adds	r3, #20
 80147e2:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80147e4:	2b01      	cmp	r3, #1
 80147e6:	d10e      	bne.n	8014806 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80147e8:	4932      	ldr	r1, [pc, #200]	@ (80148b4 <etharp_tmr+0x14c>)
 80147ea:	687a      	ldr	r2, [r7, #4]
 80147ec:	4613      	mov	r3, r2
 80147ee:	005b      	lsls	r3, r3, #1
 80147f0:	4413      	add	r3, r2
 80147f2:	00db      	lsls	r3, r3, #3
 80147f4:	440b      	add	r3, r1
 80147f6:	3312      	adds	r3, #18
 80147f8:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80147fa:	2b04      	cmp	r3, #4
 80147fc:	d903      	bls.n	8014806 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80147fe:	6878      	ldr	r0, [r7, #4]
 8014800:	f7ff ff80 	bl	8014704 <etharp_free_entry>
 8014804:	e04a      	b.n	801489c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8014806:	492b      	ldr	r1, [pc, #172]	@ (80148b4 <etharp_tmr+0x14c>)
 8014808:	687a      	ldr	r2, [r7, #4]
 801480a:	4613      	mov	r3, r2
 801480c:	005b      	lsls	r3, r3, #1
 801480e:	4413      	add	r3, r2
 8014810:	00db      	lsls	r3, r3, #3
 8014812:	440b      	add	r3, r1
 8014814:	3314      	adds	r3, #20
 8014816:	781b      	ldrb	r3, [r3, #0]
 8014818:	2b03      	cmp	r3, #3
 801481a:	d10a      	bne.n	8014832 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801481c:	4925      	ldr	r1, [pc, #148]	@ (80148b4 <etharp_tmr+0x14c>)
 801481e:	687a      	ldr	r2, [r7, #4]
 8014820:	4613      	mov	r3, r2
 8014822:	005b      	lsls	r3, r3, #1
 8014824:	4413      	add	r3, r2
 8014826:	00db      	lsls	r3, r3, #3
 8014828:	440b      	add	r3, r1
 801482a:	3314      	adds	r3, #20
 801482c:	2204      	movs	r2, #4
 801482e:	701a      	strb	r2, [r3, #0]
 8014830:	e034      	b.n	801489c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8014832:	4920      	ldr	r1, [pc, #128]	@ (80148b4 <etharp_tmr+0x14c>)
 8014834:	687a      	ldr	r2, [r7, #4]
 8014836:	4613      	mov	r3, r2
 8014838:	005b      	lsls	r3, r3, #1
 801483a:	4413      	add	r3, r2
 801483c:	00db      	lsls	r3, r3, #3
 801483e:	440b      	add	r3, r1
 8014840:	3314      	adds	r3, #20
 8014842:	781b      	ldrb	r3, [r3, #0]
 8014844:	2b04      	cmp	r3, #4
 8014846:	d10a      	bne.n	801485e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8014848:	491a      	ldr	r1, [pc, #104]	@ (80148b4 <etharp_tmr+0x14c>)
 801484a:	687a      	ldr	r2, [r7, #4]
 801484c:	4613      	mov	r3, r2
 801484e:	005b      	lsls	r3, r3, #1
 8014850:	4413      	add	r3, r2
 8014852:	00db      	lsls	r3, r3, #3
 8014854:	440b      	add	r3, r1
 8014856:	3314      	adds	r3, #20
 8014858:	2202      	movs	r2, #2
 801485a:	701a      	strb	r2, [r3, #0]
 801485c:	e01e      	b.n	801489c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801485e:	4915      	ldr	r1, [pc, #84]	@ (80148b4 <etharp_tmr+0x14c>)
 8014860:	687a      	ldr	r2, [r7, #4]
 8014862:	4613      	mov	r3, r2
 8014864:	005b      	lsls	r3, r3, #1
 8014866:	4413      	add	r3, r2
 8014868:	00db      	lsls	r3, r3, #3
 801486a:	440b      	add	r3, r1
 801486c:	3314      	adds	r3, #20
 801486e:	781b      	ldrb	r3, [r3, #0]
 8014870:	2b01      	cmp	r3, #1
 8014872:	d113      	bne.n	801489c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8014874:	490f      	ldr	r1, [pc, #60]	@ (80148b4 <etharp_tmr+0x14c>)
 8014876:	687a      	ldr	r2, [r7, #4]
 8014878:	4613      	mov	r3, r2
 801487a:	005b      	lsls	r3, r3, #1
 801487c:	4413      	add	r3, r2
 801487e:	00db      	lsls	r3, r3, #3
 8014880:	440b      	add	r3, r1
 8014882:	3308      	adds	r3, #8
 8014884:	6818      	ldr	r0, [r3, #0]
 8014886:	687a      	ldr	r2, [r7, #4]
 8014888:	4613      	mov	r3, r2
 801488a:	005b      	lsls	r3, r3, #1
 801488c:	4413      	add	r3, r2
 801488e:	00db      	lsls	r3, r3, #3
 8014890:	4a08      	ldr	r2, [pc, #32]	@ (80148b4 <etharp_tmr+0x14c>)
 8014892:	4413      	add	r3, r2
 8014894:	3304      	adds	r3, #4
 8014896:	4619      	mov	r1, r3
 8014898:	f000 fe6e 	bl	8015578 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801489c:	687b      	ldr	r3, [r7, #4]
 801489e:	3301      	adds	r3, #1
 80148a0:	607b      	str	r3, [r7, #4]
 80148a2:	687b      	ldr	r3, [r7, #4]
 80148a4:	2b09      	cmp	r3, #9
 80148a6:	f77f af65 	ble.w	8014774 <etharp_tmr+0xc>
      }
    }
  }
}
 80148aa:	bf00      	nop
 80148ac:	bf00      	nop
 80148ae:	3708      	adds	r7, #8
 80148b0:	46bd      	mov	sp, r7
 80148b2:	bd80      	pop	{r7, pc}
 80148b4:	200152ac 	.word	0x200152ac

080148b8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80148b8:	b580      	push	{r7, lr}
 80148ba:	b08a      	sub	sp, #40	@ 0x28
 80148bc:	af00      	add	r7, sp, #0
 80148be:	60f8      	str	r0, [r7, #12]
 80148c0:	460b      	mov	r3, r1
 80148c2:	607a      	str	r2, [r7, #4]
 80148c4:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80148c6:	230a      	movs	r3, #10
 80148c8:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80148ca:	230a      	movs	r3, #10
 80148cc:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80148ce:	230a      	movs	r3, #10
 80148d0:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 80148d2:	2300      	movs	r3, #0
 80148d4:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80148d6:	230a      	movs	r3, #10
 80148d8:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80148da:	2300      	movs	r3, #0
 80148dc:	83bb      	strh	r3, [r7, #28]
 80148de:	2300      	movs	r3, #0
 80148e0:	837b      	strh	r3, [r7, #26]
 80148e2:	2300      	movs	r3, #0
 80148e4:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80148e6:	2300      	movs	r3, #0
 80148e8:	843b      	strh	r3, [r7, #32]
 80148ea:	e0ae      	b.n	8014a4a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80148ec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80148f0:	49a6      	ldr	r1, [pc, #664]	@ (8014b8c <etharp_find_entry+0x2d4>)
 80148f2:	4613      	mov	r3, r2
 80148f4:	005b      	lsls	r3, r3, #1
 80148f6:	4413      	add	r3, r2
 80148f8:	00db      	lsls	r3, r3, #3
 80148fa:	440b      	add	r3, r1
 80148fc:	3314      	adds	r3, #20
 80148fe:	781b      	ldrb	r3, [r3, #0]
 8014900:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8014902:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8014906:	2b0a      	cmp	r3, #10
 8014908:	d105      	bne.n	8014916 <etharp_find_entry+0x5e>
 801490a:	7dfb      	ldrb	r3, [r7, #23]
 801490c:	2b00      	cmp	r3, #0
 801490e:	d102      	bne.n	8014916 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8014910:	8c3b      	ldrh	r3, [r7, #32]
 8014912:	847b      	strh	r3, [r7, #34]	@ 0x22
 8014914:	e095      	b.n	8014a42 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8014916:	7dfb      	ldrb	r3, [r7, #23]
 8014918:	2b00      	cmp	r3, #0
 801491a:	f000 8092 	beq.w	8014a42 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801491e:	7dfb      	ldrb	r3, [r7, #23]
 8014920:	2b01      	cmp	r3, #1
 8014922:	d009      	beq.n	8014938 <etharp_find_entry+0x80>
 8014924:	7dfb      	ldrb	r3, [r7, #23]
 8014926:	2b01      	cmp	r3, #1
 8014928:	d806      	bhi.n	8014938 <etharp_find_entry+0x80>
 801492a:	4b99      	ldr	r3, [pc, #612]	@ (8014b90 <etharp_find_entry+0x2d8>)
 801492c:	f240 1223 	movw	r2, #291	@ 0x123
 8014930:	4998      	ldr	r1, [pc, #608]	@ (8014b94 <etharp_find_entry+0x2dc>)
 8014932:	4899      	ldr	r0, [pc, #612]	@ (8014b98 <etharp_find_entry+0x2e0>)
 8014934:	f003 f94a 	bl	8017bcc <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8014938:	68fb      	ldr	r3, [r7, #12]
 801493a:	2b00      	cmp	r3, #0
 801493c:	d020      	beq.n	8014980 <etharp_find_entry+0xc8>
 801493e:	68fb      	ldr	r3, [r7, #12]
 8014940:	6819      	ldr	r1, [r3, #0]
 8014942:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014946:	4891      	ldr	r0, [pc, #580]	@ (8014b8c <etharp_find_entry+0x2d4>)
 8014948:	4613      	mov	r3, r2
 801494a:	005b      	lsls	r3, r3, #1
 801494c:	4413      	add	r3, r2
 801494e:	00db      	lsls	r3, r3, #3
 8014950:	4403      	add	r3, r0
 8014952:	3304      	adds	r3, #4
 8014954:	681b      	ldr	r3, [r3, #0]
 8014956:	4299      	cmp	r1, r3
 8014958:	d112      	bne.n	8014980 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801495a:	687b      	ldr	r3, [r7, #4]
 801495c:	2b00      	cmp	r3, #0
 801495e:	d00c      	beq.n	801497a <etharp_find_entry+0xc2>
 8014960:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014964:	4989      	ldr	r1, [pc, #548]	@ (8014b8c <etharp_find_entry+0x2d4>)
 8014966:	4613      	mov	r3, r2
 8014968:	005b      	lsls	r3, r3, #1
 801496a:	4413      	add	r3, r2
 801496c:	00db      	lsls	r3, r3, #3
 801496e:	440b      	add	r3, r1
 8014970:	3308      	adds	r3, #8
 8014972:	681b      	ldr	r3, [r3, #0]
 8014974:	687a      	ldr	r2, [r7, #4]
 8014976:	429a      	cmp	r2, r3
 8014978:	d102      	bne.n	8014980 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801497a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801497e:	e100      	b.n	8014b82 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8014980:	7dfb      	ldrb	r3, [r7, #23]
 8014982:	2b01      	cmp	r3, #1
 8014984:	d140      	bne.n	8014a08 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8014986:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801498a:	4980      	ldr	r1, [pc, #512]	@ (8014b8c <etharp_find_entry+0x2d4>)
 801498c:	4613      	mov	r3, r2
 801498e:	005b      	lsls	r3, r3, #1
 8014990:	4413      	add	r3, r2
 8014992:	00db      	lsls	r3, r3, #3
 8014994:	440b      	add	r3, r1
 8014996:	681b      	ldr	r3, [r3, #0]
 8014998:	2b00      	cmp	r3, #0
 801499a:	d01a      	beq.n	80149d2 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801499c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80149a0:	497a      	ldr	r1, [pc, #488]	@ (8014b8c <etharp_find_entry+0x2d4>)
 80149a2:	4613      	mov	r3, r2
 80149a4:	005b      	lsls	r3, r3, #1
 80149a6:	4413      	add	r3, r2
 80149a8:	00db      	lsls	r3, r3, #3
 80149aa:	440b      	add	r3, r1
 80149ac:	3312      	adds	r3, #18
 80149ae:	881b      	ldrh	r3, [r3, #0]
 80149b0:	8bba      	ldrh	r2, [r7, #28]
 80149b2:	429a      	cmp	r2, r3
 80149b4:	d845      	bhi.n	8014a42 <etharp_find_entry+0x18a>
            old_queue = i;
 80149b6:	8c3b      	ldrh	r3, [r7, #32]
 80149b8:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80149ba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80149be:	4973      	ldr	r1, [pc, #460]	@ (8014b8c <etharp_find_entry+0x2d4>)
 80149c0:	4613      	mov	r3, r2
 80149c2:	005b      	lsls	r3, r3, #1
 80149c4:	4413      	add	r3, r2
 80149c6:	00db      	lsls	r3, r3, #3
 80149c8:	440b      	add	r3, r1
 80149ca:	3312      	adds	r3, #18
 80149cc:	881b      	ldrh	r3, [r3, #0]
 80149ce:	83bb      	strh	r3, [r7, #28]
 80149d0:	e037      	b.n	8014a42 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80149d2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80149d6:	496d      	ldr	r1, [pc, #436]	@ (8014b8c <etharp_find_entry+0x2d4>)
 80149d8:	4613      	mov	r3, r2
 80149da:	005b      	lsls	r3, r3, #1
 80149dc:	4413      	add	r3, r2
 80149de:	00db      	lsls	r3, r3, #3
 80149e0:	440b      	add	r3, r1
 80149e2:	3312      	adds	r3, #18
 80149e4:	881b      	ldrh	r3, [r3, #0]
 80149e6:	8b7a      	ldrh	r2, [r7, #26]
 80149e8:	429a      	cmp	r2, r3
 80149ea:	d82a      	bhi.n	8014a42 <etharp_find_entry+0x18a>
            old_pending = i;
 80149ec:	8c3b      	ldrh	r3, [r7, #32]
 80149ee:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 80149f0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80149f4:	4965      	ldr	r1, [pc, #404]	@ (8014b8c <etharp_find_entry+0x2d4>)
 80149f6:	4613      	mov	r3, r2
 80149f8:	005b      	lsls	r3, r3, #1
 80149fa:	4413      	add	r3, r2
 80149fc:	00db      	lsls	r3, r3, #3
 80149fe:	440b      	add	r3, r1
 8014a00:	3312      	adds	r3, #18
 8014a02:	881b      	ldrh	r3, [r3, #0]
 8014a04:	837b      	strh	r3, [r7, #26]
 8014a06:	e01c      	b.n	8014a42 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8014a08:	7dfb      	ldrb	r3, [r7, #23]
 8014a0a:	2b01      	cmp	r3, #1
 8014a0c:	d919      	bls.n	8014a42 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8014a0e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014a12:	495e      	ldr	r1, [pc, #376]	@ (8014b8c <etharp_find_entry+0x2d4>)
 8014a14:	4613      	mov	r3, r2
 8014a16:	005b      	lsls	r3, r3, #1
 8014a18:	4413      	add	r3, r2
 8014a1a:	00db      	lsls	r3, r3, #3
 8014a1c:	440b      	add	r3, r1
 8014a1e:	3312      	adds	r3, #18
 8014a20:	881b      	ldrh	r3, [r3, #0]
 8014a22:	8b3a      	ldrh	r2, [r7, #24]
 8014a24:	429a      	cmp	r2, r3
 8014a26:	d80c      	bhi.n	8014a42 <etharp_find_entry+0x18a>
            old_stable = i;
 8014a28:	8c3b      	ldrh	r3, [r7, #32]
 8014a2a:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 8014a2c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014a30:	4956      	ldr	r1, [pc, #344]	@ (8014b8c <etharp_find_entry+0x2d4>)
 8014a32:	4613      	mov	r3, r2
 8014a34:	005b      	lsls	r3, r3, #1
 8014a36:	4413      	add	r3, r2
 8014a38:	00db      	lsls	r3, r3, #3
 8014a3a:	440b      	add	r3, r1
 8014a3c:	3312      	adds	r3, #18
 8014a3e:	881b      	ldrh	r3, [r3, #0]
 8014a40:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014a42:	8c3b      	ldrh	r3, [r7, #32]
 8014a44:	3301      	adds	r3, #1
 8014a46:	b29b      	uxth	r3, r3
 8014a48:	843b      	strh	r3, [r7, #32]
 8014a4a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014a4e:	2b09      	cmp	r3, #9
 8014a50:	f77f af4c 	ble.w	80148ec <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8014a54:	7afb      	ldrb	r3, [r7, #11]
 8014a56:	f003 0302 	and.w	r3, r3, #2
 8014a5a:	2b00      	cmp	r3, #0
 8014a5c:	d108      	bne.n	8014a70 <etharp_find_entry+0x1b8>
 8014a5e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8014a62:	2b0a      	cmp	r3, #10
 8014a64:	d107      	bne.n	8014a76 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8014a66:	7afb      	ldrb	r3, [r7, #11]
 8014a68:	f003 0301 	and.w	r3, r3, #1
 8014a6c:	2b00      	cmp	r3, #0
 8014a6e:	d102      	bne.n	8014a76 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8014a70:	f04f 33ff 	mov.w	r3, #4294967295
 8014a74:	e085      	b.n	8014b82 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8014a76:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8014a7a:	2b09      	cmp	r3, #9
 8014a7c:	dc02      	bgt.n	8014a84 <etharp_find_entry+0x1cc>
    i = empty;
 8014a7e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014a80:	843b      	strh	r3, [r7, #32]
 8014a82:	e039      	b.n	8014af8 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8014a84:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8014a88:	2b09      	cmp	r3, #9
 8014a8a:	dc14      	bgt.n	8014ab6 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8014a8c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8014a8e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8014a90:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014a94:	493d      	ldr	r1, [pc, #244]	@ (8014b8c <etharp_find_entry+0x2d4>)
 8014a96:	4613      	mov	r3, r2
 8014a98:	005b      	lsls	r3, r3, #1
 8014a9a:	4413      	add	r3, r2
 8014a9c:	00db      	lsls	r3, r3, #3
 8014a9e:	440b      	add	r3, r1
 8014aa0:	681b      	ldr	r3, [r3, #0]
 8014aa2:	2b00      	cmp	r3, #0
 8014aa4:	d018      	beq.n	8014ad8 <etharp_find_entry+0x220>
 8014aa6:	4b3a      	ldr	r3, [pc, #232]	@ (8014b90 <etharp_find_entry+0x2d8>)
 8014aa8:	f240 126d 	movw	r2, #365	@ 0x16d
 8014aac:	493b      	ldr	r1, [pc, #236]	@ (8014b9c <etharp_find_entry+0x2e4>)
 8014aae:	483a      	ldr	r0, [pc, #232]	@ (8014b98 <etharp_find_entry+0x2e0>)
 8014ab0:	f003 f88c 	bl	8017bcc <iprintf>
 8014ab4:	e010      	b.n	8014ad8 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8014ab6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8014aba:	2b09      	cmp	r3, #9
 8014abc:	dc02      	bgt.n	8014ac4 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8014abe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8014ac0:	843b      	strh	r3, [r7, #32]
 8014ac2:	e009      	b.n	8014ad8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8014ac4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8014ac8:	2b09      	cmp	r3, #9
 8014aca:	dc02      	bgt.n	8014ad2 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8014acc:	8bfb      	ldrh	r3, [r7, #30]
 8014ace:	843b      	strh	r3, [r7, #32]
 8014ad0:	e002      	b.n	8014ad8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8014ad2:	f04f 33ff 	mov.w	r3, #4294967295
 8014ad6:	e054      	b.n	8014b82 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014ad8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014adc:	2b09      	cmp	r3, #9
 8014ade:	dd06      	ble.n	8014aee <etharp_find_entry+0x236>
 8014ae0:	4b2b      	ldr	r3, [pc, #172]	@ (8014b90 <etharp_find_entry+0x2d8>)
 8014ae2:	f240 127f 	movw	r2, #383	@ 0x17f
 8014ae6:	492e      	ldr	r1, [pc, #184]	@ (8014ba0 <etharp_find_entry+0x2e8>)
 8014ae8:	482b      	ldr	r0, [pc, #172]	@ (8014b98 <etharp_find_entry+0x2e0>)
 8014aea:	f003 f86f 	bl	8017bcc <iprintf>
    etharp_free_entry(i);
 8014aee:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014af2:	4618      	mov	r0, r3
 8014af4:	f7ff fe06 	bl	8014704 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014af8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014afc:	2b09      	cmp	r3, #9
 8014afe:	dd06      	ble.n	8014b0e <etharp_find_entry+0x256>
 8014b00:	4b23      	ldr	r3, [pc, #140]	@ (8014b90 <etharp_find_entry+0x2d8>)
 8014b02:	f240 1283 	movw	r2, #387	@ 0x183
 8014b06:	4926      	ldr	r1, [pc, #152]	@ (8014ba0 <etharp_find_entry+0x2e8>)
 8014b08:	4823      	ldr	r0, [pc, #140]	@ (8014b98 <etharp_find_entry+0x2e0>)
 8014b0a:	f003 f85f 	bl	8017bcc <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8014b0e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014b12:	491e      	ldr	r1, [pc, #120]	@ (8014b8c <etharp_find_entry+0x2d4>)
 8014b14:	4613      	mov	r3, r2
 8014b16:	005b      	lsls	r3, r3, #1
 8014b18:	4413      	add	r3, r2
 8014b1a:	00db      	lsls	r3, r3, #3
 8014b1c:	440b      	add	r3, r1
 8014b1e:	3314      	adds	r3, #20
 8014b20:	781b      	ldrb	r3, [r3, #0]
 8014b22:	2b00      	cmp	r3, #0
 8014b24:	d006      	beq.n	8014b34 <etharp_find_entry+0x27c>
 8014b26:	4b1a      	ldr	r3, [pc, #104]	@ (8014b90 <etharp_find_entry+0x2d8>)
 8014b28:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 8014b2c:	491d      	ldr	r1, [pc, #116]	@ (8014ba4 <etharp_find_entry+0x2ec>)
 8014b2e:	481a      	ldr	r0, [pc, #104]	@ (8014b98 <etharp_find_entry+0x2e0>)
 8014b30:	f003 f84c 	bl	8017bcc <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8014b34:	68fb      	ldr	r3, [r7, #12]
 8014b36:	2b00      	cmp	r3, #0
 8014b38:	d00b      	beq.n	8014b52 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8014b3a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014b3e:	68fb      	ldr	r3, [r7, #12]
 8014b40:	6819      	ldr	r1, [r3, #0]
 8014b42:	4812      	ldr	r0, [pc, #72]	@ (8014b8c <etharp_find_entry+0x2d4>)
 8014b44:	4613      	mov	r3, r2
 8014b46:	005b      	lsls	r3, r3, #1
 8014b48:	4413      	add	r3, r2
 8014b4a:	00db      	lsls	r3, r3, #3
 8014b4c:	4403      	add	r3, r0
 8014b4e:	3304      	adds	r3, #4
 8014b50:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8014b52:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014b56:	490d      	ldr	r1, [pc, #52]	@ (8014b8c <etharp_find_entry+0x2d4>)
 8014b58:	4613      	mov	r3, r2
 8014b5a:	005b      	lsls	r3, r3, #1
 8014b5c:	4413      	add	r3, r2
 8014b5e:	00db      	lsls	r3, r3, #3
 8014b60:	440b      	add	r3, r1
 8014b62:	3312      	adds	r3, #18
 8014b64:	2200      	movs	r2, #0
 8014b66:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8014b68:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014b6c:	4907      	ldr	r1, [pc, #28]	@ (8014b8c <etharp_find_entry+0x2d4>)
 8014b6e:	4613      	mov	r3, r2
 8014b70:	005b      	lsls	r3, r3, #1
 8014b72:	4413      	add	r3, r2
 8014b74:	00db      	lsls	r3, r3, #3
 8014b76:	440b      	add	r3, r1
 8014b78:	3308      	adds	r3, #8
 8014b7a:	687a      	ldr	r2, [r7, #4]
 8014b7c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8014b7e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8014b82:	4618      	mov	r0, r3
 8014b84:	3728      	adds	r7, #40	@ 0x28
 8014b86:	46bd      	mov	sp, r7
 8014b88:	bd80      	pop	{r7, pc}
 8014b8a:	bf00      	nop
 8014b8c:	200152ac 	.word	0x200152ac
 8014b90:	08022c2c 	.word	0x08022c2c
 8014b94:	08022c64 	.word	0x08022c64
 8014b98:	08022ca4 	.word	0x08022ca4
 8014b9c:	08022ccc 	.word	0x08022ccc
 8014ba0:	08022ce4 	.word	0x08022ce4
 8014ba4:	08022cf8 	.word	0x08022cf8

08014ba8 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8014ba8:	b580      	push	{r7, lr}
 8014baa:	b088      	sub	sp, #32
 8014bac:	af02      	add	r7, sp, #8
 8014bae:	60f8      	str	r0, [r7, #12]
 8014bb0:	60b9      	str	r1, [r7, #8]
 8014bb2:	607a      	str	r2, [r7, #4]
 8014bb4:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8014bb6:	68fb      	ldr	r3, [r7, #12]
 8014bb8:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8014bbc:	2b06      	cmp	r3, #6
 8014bbe:	d006      	beq.n	8014bce <etharp_update_arp_entry+0x26>
 8014bc0:	4b48      	ldr	r3, [pc, #288]	@ (8014ce4 <etharp_update_arp_entry+0x13c>)
 8014bc2:	f240 12a9 	movw	r2, #425	@ 0x1a9
 8014bc6:	4948      	ldr	r1, [pc, #288]	@ (8014ce8 <etharp_update_arp_entry+0x140>)
 8014bc8:	4848      	ldr	r0, [pc, #288]	@ (8014cec <etharp_update_arp_entry+0x144>)
 8014bca:	f002 ffff 	bl	8017bcc <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8014bce:	68bb      	ldr	r3, [r7, #8]
 8014bd0:	2b00      	cmp	r3, #0
 8014bd2:	d012      	beq.n	8014bfa <etharp_update_arp_entry+0x52>
 8014bd4:	68bb      	ldr	r3, [r7, #8]
 8014bd6:	681b      	ldr	r3, [r3, #0]
 8014bd8:	2b00      	cmp	r3, #0
 8014bda:	d00e      	beq.n	8014bfa <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014bdc:	68bb      	ldr	r3, [r7, #8]
 8014bde:	681b      	ldr	r3, [r3, #0]
 8014be0:	68f9      	ldr	r1, [r7, #12]
 8014be2:	4618      	mov	r0, r3
 8014be4:	f001 f8fe 	bl	8015de4 <ip4_addr_isbroadcast_u32>
 8014be8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8014bea:	2b00      	cmp	r3, #0
 8014bec:	d105      	bne.n	8014bfa <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8014bee:	68bb      	ldr	r3, [r7, #8]
 8014bf0:	681b      	ldr	r3, [r3, #0]
 8014bf2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014bf6:	2be0      	cmp	r3, #224	@ 0xe0
 8014bf8:	d102      	bne.n	8014c00 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014bfa:	f06f 030f 	mvn.w	r3, #15
 8014bfe:	e06c      	b.n	8014cda <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8014c00:	78fb      	ldrb	r3, [r7, #3]
 8014c02:	68fa      	ldr	r2, [r7, #12]
 8014c04:	4619      	mov	r1, r3
 8014c06:	68b8      	ldr	r0, [r7, #8]
 8014c08:	f7ff fe56 	bl	80148b8 <etharp_find_entry>
 8014c0c:	4603      	mov	r3, r0
 8014c0e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8014c10:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014c14:	2b00      	cmp	r3, #0
 8014c16:	da02      	bge.n	8014c1e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8014c18:	8afb      	ldrh	r3, [r7, #22]
 8014c1a:	b25b      	sxtb	r3, r3
 8014c1c:	e05d      	b.n	8014cda <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8014c1e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014c22:	4933      	ldr	r1, [pc, #204]	@ (8014cf0 <etharp_update_arp_entry+0x148>)
 8014c24:	4613      	mov	r3, r2
 8014c26:	005b      	lsls	r3, r3, #1
 8014c28:	4413      	add	r3, r2
 8014c2a:	00db      	lsls	r3, r3, #3
 8014c2c:	440b      	add	r3, r1
 8014c2e:	3314      	adds	r3, #20
 8014c30:	2202      	movs	r2, #2
 8014c32:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8014c34:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014c38:	492d      	ldr	r1, [pc, #180]	@ (8014cf0 <etharp_update_arp_entry+0x148>)
 8014c3a:	4613      	mov	r3, r2
 8014c3c:	005b      	lsls	r3, r3, #1
 8014c3e:	4413      	add	r3, r2
 8014c40:	00db      	lsls	r3, r3, #3
 8014c42:	440b      	add	r3, r1
 8014c44:	3308      	adds	r3, #8
 8014c46:	68fa      	ldr	r2, [r7, #12]
 8014c48:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8014c4a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014c4e:	4613      	mov	r3, r2
 8014c50:	005b      	lsls	r3, r3, #1
 8014c52:	4413      	add	r3, r2
 8014c54:	00db      	lsls	r3, r3, #3
 8014c56:	3308      	adds	r3, #8
 8014c58:	4a25      	ldr	r2, [pc, #148]	@ (8014cf0 <etharp_update_arp_entry+0x148>)
 8014c5a:	4413      	add	r3, r2
 8014c5c:	3304      	adds	r3, #4
 8014c5e:	2206      	movs	r2, #6
 8014c60:	6879      	ldr	r1, [r7, #4]
 8014c62:	4618      	mov	r0, r3
 8014c64:	f003 f909 	bl	8017e7a <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8014c68:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014c6c:	4920      	ldr	r1, [pc, #128]	@ (8014cf0 <etharp_update_arp_entry+0x148>)
 8014c6e:	4613      	mov	r3, r2
 8014c70:	005b      	lsls	r3, r3, #1
 8014c72:	4413      	add	r3, r2
 8014c74:	00db      	lsls	r3, r3, #3
 8014c76:	440b      	add	r3, r1
 8014c78:	3312      	adds	r3, #18
 8014c7a:	2200      	movs	r2, #0
 8014c7c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8014c7e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014c82:	491b      	ldr	r1, [pc, #108]	@ (8014cf0 <etharp_update_arp_entry+0x148>)
 8014c84:	4613      	mov	r3, r2
 8014c86:	005b      	lsls	r3, r3, #1
 8014c88:	4413      	add	r3, r2
 8014c8a:	00db      	lsls	r3, r3, #3
 8014c8c:	440b      	add	r3, r1
 8014c8e:	681b      	ldr	r3, [r3, #0]
 8014c90:	2b00      	cmp	r3, #0
 8014c92:	d021      	beq.n	8014cd8 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8014c94:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014c98:	4915      	ldr	r1, [pc, #84]	@ (8014cf0 <etharp_update_arp_entry+0x148>)
 8014c9a:	4613      	mov	r3, r2
 8014c9c:	005b      	lsls	r3, r3, #1
 8014c9e:	4413      	add	r3, r2
 8014ca0:	00db      	lsls	r3, r3, #3
 8014ca2:	440b      	add	r3, r1
 8014ca4:	681b      	ldr	r3, [r3, #0]
 8014ca6:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8014ca8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014cac:	4910      	ldr	r1, [pc, #64]	@ (8014cf0 <etharp_update_arp_entry+0x148>)
 8014cae:	4613      	mov	r3, r2
 8014cb0:	005b      	lsls	r3, r3, #1
 8014cb2:	4413      	add	r3, r2
 8014cb4:	00db      	lsls	r3, r3, #3
 8014cb6:	440b      	add	r3, r1
 8014cb8:	2200      	movs	r2, #0
 8014cba:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8014cbc:	68fb      	ldr	r3, [r7, #12]
 8014cbe:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8014cc2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8014cc6:	9300      	str	r3, [sp, #0]
 8014cc8:	687b      	ldr	r3, [r7, #4]
 8014cca:	6939      	ldr	r1, [r7, #16]
 8014ccc:	68f8      	ldr	r0, [r7, #12]
 8014cce:	f001 ff97 	bl	8016c00 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8014cd2:	6938      	ldr	r0, [r7, #16]
 8014cd4:	f7f9 f930 	bl	800df38 <pbuf_free>
  }
  return ERR_OK;
 8014cd8:	2300      	movs	r3, #0
}
 8014cda:	4618      	mov	r0, r3
 8014cdc:	3718      	adds	r7, #24
 8014cde:	46bd      	mov	sp, r7
 8014ce0:	bd80      	pop	{r7, pc}
 8014ce2:	bf00      	nop
 8014ce4:	08022c2c 	.word	0x08022c2c
 8014ce8:	08022d24 	.word	0x08022d24
 8014cec:	08022ca4 	.word	0x08022ca4
 8014cf0:	200152ac 	.word	0x200152ac

08014cf4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8014cf4:	b580      	push	{r7, lr}
 8014cf6:	b084      	sub	sp, #16
 8014cf8:	af00      	add	r7, sp, #0
 8014cfa:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014cfc:	2300      	movs	r3, #0
 8014cfe:	60fb      	str	r3, [r7, #12]
 8014d00:	e01e      	b.n	8014d40 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8014d02:	4913      	ldr	r1, [pc, #76]	@ (8014d50 <etharp_cleanup_netif+0x5c>)
 8014d04:	68fa      	ldr	r2, [r7, #12]
 8014d06:	4613      	mov	r3, r2
 8014d08:	005b      	lsls	r3, r3, #1
 8014d0a:	4413      	add	r3, r2
 8014d0c:	00db      	lsls	r3, r3, #3
 8014d0e:	440b      	add	r3, r1
 8014d10:	3314      	adds	r3, #20
 8014d12:	781b      	ldrb	r3, [r3, #0]
 8014d14:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8014d16:	7afb      	ldrb	r3, [r7, #11]
 8014d18:	2b00      	cmp	r3, #0
 8014d1a:	d00e      	beq.n	8014d3a <etharp_cleanup_netif+0x46>
 8014d1c:	490c      	ldr	r1, [pc, #48]	@ (8014d50 <etharp_cleanup_netif+0x5c>)
 8014d1e:	68fa      	ldr	r2, [r7, #12]
 8014d20:	4613      	mov	r3, r2
 8014d22:	005b      	lsls	r3, r3, #1
 8014d24:	4413      	add	r3, r2
 8014d26:	00db      	lsls	r3, r3, #3
 8014d28:	440b      	add	r3, r1
 8014d2a:	3308      	adds	r3, #8
 8014d2c:	681b      	ldr	r3, [r3, #0]
 8014d2e:	687a      	ldr	r2, [r7, #4]
 8014d30:	429a      	cmp	r2, r3
 8014d32:	d102      	bne.n	8014d3a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8014d34:	68f8      	ldr	r0, [r7, #12]
 8014d36:	f7ff fce5 	bl	8014704 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014d3a:	68fb      	ldr	r3, [r7, #12]
 8014d3c:	3301      	adds	r3, #1
 8014d3e:	60fb      	str	r3, [r7, #12]
 8014d40:	68fb      	ldr	r3, [r7, #12]
 8014d42:	2b09      	cmp	r3, #9
 8014d44:	dddd      	ble.n	8014d02 <etharp_cleanup_netif+0xe>
    }
  }
}
 8014d46:	bf00      	nop
 8014d48:	bf00      	nop
 8014d4a:	3710      	adds	r7, #16
 8014d4c:	46bd      	mov	sp, r7
 8014d4e:	bd80      	pop	{r7, pc}
 8014d50:	200152ac 	.word	0x200152ac

08014d54 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8014d54:	b5b0      	push	{r4, r5, r7, lr}
 8014d56:	b08a      	sub	sp, #40	@ 0x28
 8014d58:	af04      	add	r7, sp, #16
 8014d5a:	6078      	str	r0, [r7, #4]
 8014d5c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8014d5e:	683b      	ldr	r3, [r7, #0]
 8014d60:	2b00      	cmp	r3, #0
 8014d62:	d107      	bne.n	8014d74 <etharp_input+0x20>
 8014d64:	4b3d      	ldr	r3, [pc, #244]	@ (8014e5c <etharp_input+0x108>)
 8014d66:	f240 228a 	movw	r2, #650	@ 0x28a
 8014d6a:	493d      	ldr	r1, [pc, #244]	@ (8014e60 <etharp_input+0x10c>)
 8014d6c:	483d      	ldr	r0, [pc, #244]	@ (8014e64 <etharp_input+0x110>)
 8014d6e:	f002 ff2d 	bl	8017bcc <iprintf>
 8014d72:	e06f      	b.n	8014e54 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8014d74:	687b      	ldr	r3, [r7, #4]
 8014d76:	685b      	ldr	r3, [r3, #4]
 8014d78:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8014d7a:	693b      	ldr	r3, [r7, #16]
 8014d7c:	881b      	ldrh	r3, [r3, #0]
 8014d7e:	b29b      	uxth	r3, r3
 8014d80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8014d84:	d10c      	bne.n	8014da0 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8014d86:	693b      	ldr	r3, [r7, #16]
 8014d88:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8014d8a:	2b06      	cmp	r3, #6
 8014d8c:	d108      	bne.n	8014da0 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8014d8e:	693b      	ldr	r3, [r7, #16]
 8014d90:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8014d92:	2b04      	cmp	r3, #4
 8014d94:	d104      	bne.n	8014da0 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8014d96:	693b      	ldr	r3, [r7, #16]
 8014d98:	885b      	ldrh	r3, [r3, #2]
 8014d9a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8014d9c:	2b08      	cmp	r3, #8
 8014d9e:	d003      	beq.n	8014da8 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8014da0:	6878      	ldr	r0, [r7, #4]
 8014da2:	f7f9 f8c9 	bl	800df38 <pbuf_free>
    return;
 8014da6:	e055      	b.n	8014e54 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8014da8:	693b      	ldr	r3, [r7, #16]
 8014daa:	330e      	adds	r3, #14
 8014dac:	681b      	ldr	r3, [r3, #0]
 8014dae:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8014db0:	693b      	ldr	r3, [r7, #16]
 8014db2:	3318      	adds	r3, #24
 8014db4:	681b      	ldr	r3, [r3, #0]
 8014db6:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014db8:	683b      	ldr	r3, [r7, #0]
 8014dba:	3304      	adds	r3, #4
 8014dbc:	681b      	ldr	r3, [r3, #0]
 8014dbe:	2b00      	cmp	r3, #0
 8014dc0:	d102      	bne.n	8014dc8 <etharp_input+0x74>
    for_us = 0;
 8014dc2:	2300      	movs	r3, #0
 8014dc4:	75fb      	strb	r3, [r7, #23]
 8014dc6:	e009      	b.n	8014ddc <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8014dc8:	68ba      	ldr	r2, [r7, #8]
 8014dca:	683b      	ldr	r3, [r7, #0]
 8014dcc:	3304      	adds	r3, #4
 8014dce:	681b      	ldr	r3, [r3, #0]
 8014dd0:	429a      	cmp	r2, r3
 8014dd2:	bf0c      	ite	eq
 8014dd4:	2301      	moveq	r3, #1
 8014dd6:	2300      	movne	r3, #0
 8014dd8:	b2db      	uxtb	r3, r3
 8014dda:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8014ddc:	693b      	ldr	r3, [r7, #16]
 8014dde:	f103 0208 	add.w	r2, r3, #8
 8014de2:	7dfb      	ldrb	r3, [r7, #23]
 8014de4:	2b00      	cmp	r3, #0
 8014de6:	d001      	beq.n	8014dec <etharp_input+0x98>
 8014de8:	2301      	movs	r3, #1
 8014dea:	e000      	b.n	8014dee <etharp_input+0x9a>
 8014dec:	2302      	movs	r3, #2
 8014dee:	f107 010c 	add.w	r1, r7, #12
 8014df2:	6838      	ldr	r0, [r7, #0]
 8014df4:	f7ff fed8 	bl	8014ba8 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8014df8:	693b      	ldr	r3, [r7, #16]
 8014dfa:	88db      	ldrh	r3, [r3, #6]
 8014dfc:	b29b      	uxth	r3, r3
 8014dfe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8014e02:	d003      	beq.n	8014e0c <etharp_input+0xb8>
 8014e04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014e08:	d01e      	beq.n	8014e48 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8014e0a:	e020      	b.n	8014e4e <etharp_input+0xfa>
      if (for_us) {
 8014e0c:	7dfb      	ldrb	r3, [r7, #23]
 8014e0e:	2b00      	cmp	r3, #0
 8014e10:	d01c      	beq.n	8014e4c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8014e12:	683b      	ldr	r3, [r7, #0]
 8014e14:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8014e18:	693b      	ldr	r3, [r7, #16]
 8014e1a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8014e1e:	683b      	ldr	r3, [r7, #0]
 8014e20:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 8014e24:	683b      	ldr	r3, [r7, #0]
 8014e26:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8014e28:	693a      	ldr	r2, [r7, #16]
 8014e2a:	3208      	adds	r2, #8
        etharp_raw(netif,
 8014e2c:	2102      	movs	r1, #2
 8014e2e:	9103      	str	r1, [sp, #12]
 8014e30:	f107 010c 	add.w	r1, r7, #12
 8014e34:	9102      	str	r1, [sp, #8]
 8014e36:	9201      	str	r2, [sp, #4]
 8014e38:	9300      	str	r3, [sp, #0]
 8014e3a:	462b      	mov	r3, r5
 8014e3c:	4622      	mov	r2, r4
 8014e3e:	4601      	mov	r1, r0
 8014e40:	6838      	ldr	r0, [r7, #0]
 8014e42:	f000 faeb 	bl	801541c <etharp_raw>
      break;
 8014e46:	e001      	b.n	8014e4c <etharp_input+0xf8>
      break;
 8014e48:	bf00      	nop
 8014e4a:	e000      	b.n	8014e4e <etharp_input+0xfa>
      break;
 8014e4c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8014e4e:	6878      	ldr	r0, [r7, #4]
 8014e50:	f7f9 f872 	bl	800df38 <pbuf_free>
}
 8014e54:	3718      	adds	r7, #24
 8014e56:	46bd      	mov	sp, r7
 8014e58:	bdb0      	pop	{r4, r5, r7, pc}
 8014e5a:	bf00      	nop
 8014e5c:	08022c2c 	.word	0x08022c2c
 8014e60:	08022d7c 	.word	0x08022d7c
 8014e64:	08022ca4 	.word	0x08022ca4

08014e68 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8014e68:	b580      	push	{r7, lr}
 8014e6a:	b086      	sub	sp, #24
 8014e6c:	af02      	add	r7, sp, #8
 8014e6e:	60f8      	str	r0, [r7, #12]
 8014e70:	60b9      	str	r1, [r7, #8]
 8014e72:	4613      	mov	r3, r2
 8014e74:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8014e76:	79fa      	ldrb	r2, [r7, #7]
 8014e78:	4944      	ldr	r1, [pc, #272]	@ (8014f8c <etharp_output_to_arp_index+0x124>)
 8014e7a:	4613      	mov	r3, r2
 8014e7c:	005b      	lsls	r3, r3, #1
 8014e7e:	4413      	add	r3, r2
 8014e80:	00db      	lsls	r3, r3, #3
 8014e82:	440b      	add	r3, r1
 8014e84:	3314      	adds	r3, #20
 8014e86:	781b      	ldrb	r3, [r3, #0]
 8014e88:	2b01      	cmp	r3, #1
 8014e8a:	d806      	bhi.n	8014e9a <etharp_output_to_arp_index+0x32>
 8014e8c:	4b40      	ldr	r3, [pc, #256]	@ (8014f90 <etharp_output_to_arp_index+0x128>)
 8014e8e:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8014e92:	4940      	ldr	r1, [pc, #256]	@ (8014f94 <etharp_output_to_arp_index+0x12c>)
 8014e94:	4840      	ldr	r0, [pc, #256]	@ (8014f98 <etharp_output_to_arp_index+0x130>)
 8014e96:	f002 fe99 	bl	8017bcc <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8014e9a:	79fa      	ldrb	r2, [r7, #7]
 8014e9c:	493b      	ldr	r1, [pc, #236]	@ (8014f8c <etharp_output_to_arp_index+0x124>)
 8014e9e:	4613      	mov	r3, r2
 8014ea0:	005b      	lsls	r3, r3, #1
 8014ea2:	4413      	add	r3, r2
 8014ea4:	00db      	lsls	r3, r3, #3
 8014ea6:	440b      	add	r3, r1
 8014ea8:	3314      	adds	r3, #20
 8014eaa:	781b      	ldrb	r3, [r3, #0]
 8014eac:	2b02      	cmp	r3, #2
 8014eae:	d153      	bne.n	8014f58 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8014eb0:	79fa      	ldrb	r2, [r7, #7]
 8014eb2:	4936      	ldr	r1, [pc, #216]	@ (8014f8c <etharp_output_to_arp_index+0x124>)
 8014eb4:	4613      	mov	r3, r2
 8014eb6:	005b      	lsls	r3, r3, #1
 8014eb8:	4413      	add	r3, r2
 8014eba:	00db      	lsls	r3, r3, #3
 8014ebc:	440b      	add	r3, r1
 8014ebe:	3312      	adds	r3, #18
 8014ec0:	881b      	ldrh	r3, [r3, #0]
 8014ec2:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 8014ec6:	d919      	bls.n	8014efc <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8014ec8:	79fa      	ldrb	r2, [r7, #7]
 8014eca:	4613      	mov	r3, r2
 8014ecc:	005b      	lsls	r3, r3, #1
 8014ece:	4413      	add	r3, r2
 8014ed0:	00db      	lsls	r3, r3, #3
 8014ed2:	4a2e      	ldr	r2, [pc, #184]	@ (8014f8c <etharp_output_to_arp_index+0x124>)
 8014ed4:	4413      	add	r3, r2
 8014ed6:	3304      	adds	r3, #4
 8014ed8:	4619      	mov	r1, r3
 8014eda:	68f8      	ldr	r0, [r7, #12]
 8014edc:	f000 fb4c 	bl	8015578 <etharp_request>
 8014ee0:	4603      	mov	r3, r0
 8014ee2:	2b00      	cmp	r3, #0
 8014ee4:	d138      	bne.n	8014f58 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014ee6:	79fa      	ldrb	r2, [r7, #7]
 8014ee8:	4928      	ldr	r1, [pc, #160]	@ (8014f8c <etharp_output_to_arp_index+0x124>)
 8014eea:	4613      	mov	r3, r2
 8014eec:	005b      	lsls	r3, r3, #1
 8014eee:	4413      	add	r3, r2
 8014ef0:	00db      	lsls	r3, r3, #3
 8014ef2:	440b      	add	r3, r1
 8014ef4:	3314      	adds	r3, #20
 8014ef6:	2203      	movs	r2, #3
 8014ef8:	701a      	strb	r2, [r3, #0]
 8014efa:	e02d      	b.n	8014f58 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8014efc:	79fa      	ldrb	r2, [r7, #7]
 8014efe:	4923      	ldr	r1, [pc, #140]	@ (8014f8c <etharp_output_to_arp_index+0x124>)
 8014f00:	4613      	mov	r3, r2
 8014f02:	005b      	lsls	r3, r3, #1
 8014f04:	4413      	add	r3, r2
 8014f06:	00db      	lsls	r3, r3, #3
 8014f08:	440b      	add	r3, r1
 8014f0a:	3312      	adds	r3, #18
 8014f0c:	881b      	ldrh	r3, [r3, #0]
 8014f0e:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8014f12:	d321      	bcc.n	8014f58 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8014f14:	79fa      	ldrb	r2, [r7, #7]
 8014f16:	4613      	mov	r3, r2
 8014f18:	005b      	lsls	r3, r3, #1
 8014f1a:	4413      	add	r3, r2
 8014f1c:	00db      	lsls	r3, r3, #3
 8014f1e:	4a1b      	ldr	r2, [pc, #108]	@ (8014f8c <etharp_output_to_arp_index+0x124>)
 8014f20:	4413      	add	r3, r2
 8014f22:	1d19      	adds	r1, r3, #4
 8014f24:	79fa      	ldrb	r2, [r7, #7]
 8014f26:	4613      	mov	r3, r2
 8014f28:	005b      	lsls	r3, r3, #1
 8014f2a:	4413      	add	r3, r2
 8014f2c:	00db      	lsls	r3, r3, #3
 8014f2e:	3308      	adds	r3, #8
 8014f30:	4a16      	ldr	r2, [pc, #88]	@ (8014f8c <etharp_output_to_arp_index+0x124>)
 8014f32:	4413      	add	r3, r2
 8014f34:	3304      	adds	r3, #4
 8014f36:	461a      	mov	r2, r3
 8014f38:	68f8      	ldr	r0, [r7, #12]
 8014f3a:	f000 fafb 	bl	8015534 <etharp_request_dst>
 8014f3e:	4603      	mov	r3, r0
 8014f40:	2b00      	cmp	r3, #0
 8014f42:	d109      	bne.n	8014f58 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014f44:	79fa      	ldrb	r2, [r7, #7]
 8014f46:	4911      	ldr	r1, [pc, #68]	@ (8014f8c <etharp_output_to_arp_index+0x124>)
 8014f48:	4613      	mov	r3, r2
 8014f4a:	005b      	lsls	r3, r3, #1
 8014f4c:	4413      	add	r3, r2
 8014f4e:	00db      	lsls	r3, r3, #3
 8014f50:	440b      	add	r3, r1
 8014f52:	3314      	adds	r3, #20
 8014f54:	2203      	movs	r2, #3
 8014f56:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8014f58:	68fb      	ldr	r3, [r7, #12]
 8014f5a:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 8014f5e:	79fa      	ldrb	r2, [r7, #7]
 8014f60:	4613      	mov	r3, r2
 8014f62:	005b      	lsls	r3, r3, #1
 8014f64:	4413      	add	r3, r2
 8014f66:	00db      	lsls	r3, r3, #3
 8014f68:	3308      	adds	r3, #8
 8014f6a:	4a08      	ldr	r2, [pc, #32]	@ (8014f8c <etharp_output_to_arp_index+0x124>)
 8014f6c:	4413      	add	r3, r2
 8014f6e:	3304      	adds	r3, #4
 8014f70:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8014f74:	9200      	str	r2, [sp, #0]
 8014f76:	460a      	mov	r2, r1
 8014f78:	68b9      	ldr	r1, [r7, #8]
 8014f7a:	68f8      	ldr	r0, [r7, #12]
 8014f7c:	f001 fe40 	bl	8016c00 <ethernet_output>
 8014f80:	4603      	mov	r3, r0
}
 8014f82:	4618      	mov	r0, r3
 8014f84:	3710      	adds	r7, #16
 8014f86:	46bd      	mov	sp, r7
 8014f88:	bd80      	pop	{r7, pc}
 8014f8a:	bf00      	nop
 8014f8c:	200152ac 	.word	0x200152ac
 8014f90:	08022c2c 	.word	0x08022c2c
 8014f94:	08022d9c 	.word	0x08022d9c
 8014f98:	08022ca4 	.word	0x08022ca4

08014f9c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8014f9c:	b580      	push	{r7, lr}
 8014f9e:	b08a      	sub	sp, #40	@ 0x28
 8014fa0:	af02      	add	r7, sp, #8
 8014fa2:	60f8      	str	r0, [r7, #12]
 8014fa4:	60b9      	str	r1, [r7, #8]
 8014fa6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8014fa8:	687b      	ldr	r3, [r7, #4]
 8014faa:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8014fac:	68fb      	ldr	r3, [r7, #12]
 8014fae:	2b00      	cmp	r3, #0
 8014fb0:	d106      	bne.n	8014fc0 <etharp_output+0x24>
 8014fb2:	4b73      	ldr	r3, [pc, #460]	@ (8015180 <etharp_output+0x1e4>)
 8014fb4:	f240 321e 	movw	r2, #798	@ 0x31e
 8014fb8:	4972      	ldr	r1, [pc, #456]	@ (8015184 <etharp_output+0x1e8>)
 8014fba:	4873      	ldr	r0, [pc, #460]	@ (8015188 <etharp_output+0x1ec>)
 8014fbc:	f002 fe06 	bl	8017bcc <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8014fc0:	68bb      	ldr	r3, [r7, #8]
 8014fc2:	2b00      	cmp	r3, #0
 8014fc4:	d106      	bne.n	8014fd4 <etharp_output+0x38>
 8014fc6:	4b6e      	ldr	r3, [pc, #440]	@ (8015180 <etharp_output+0x1e4>)
 8014fc8:	f240 321f 	movw	r2, #799	@ 0x31f
 8014fcc:	496f      	ldr	r1, [pc, #444]	@ (801518c <etharp_output+0x1f0>)
 8014fce:	486e      	ldr	r0, [pc, #440]	@ (8015188 <etharp_output+0x1ec>)
 8014fd0:	f002 fdfc 	bl	8017bcc <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8014fd4:	687b      	ldr	r3, [r7, #4]
 8014fd6:	2b00      	cmp	r3, #0
 8014fd8:	d106      	bne.n	8014fe8 <etharp_output+0x4c>
 8014fda:	4b69      	ldr	r3, [pc, #420]	@ (8015180 <etharp_output+0x1e4>)
 8014fdc:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8014fe0:	496b      	ldr	r1, [pc, #428]	@ (8015190 <etharp_output+0x1f4>)
 8014fe2:	4869      	ldr	r0, [pc, #420]	@ (8015188 <etharp_output+0x1ec>)
 8014fe4:	f002 fdf2 	bl	8017bcc <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8014fe8:	687b      	ldr	r3, [r7, #4]
 8014fea:	681b      	ldr	r3, [r3, #0]
 8014fec:	68f9      	ldr	r1, [r7, #12]
 8014fee:	4618      	mov	r0, r3
 8014ff0:	f000 fef8 	bl	8015de4 <ip4_addr_isbroadcast_u32>
 8014ff4:	4603      	mov	r3, r0
 8014ff6:	2b00      	cmp	r3, #0
 8014ff8:	d002      	beq.n	8015000 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8014ffa:	4b66      	ldr	r3, [pc, #408]	@ (8015194 <etharp_output+0x1f8>)
 8014ffc:	61fb      	str	r3, [r7, #28]
 8014ffe:	e0af      	b.n	8015160 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8015000:	687b      	ldr	r3, [r7, #4]
 8015002:	681b      	ldr	r3, [r3, #0]
 8015004:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8015008:	2be0      	cmp	r3, #224	@ 0xe0
 801500a:	d118      	bne.n	801503e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801500c:	2301      	movs	r3, #1
 801500e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8015010:	2300      	movs	r3, #0
 8015012:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8015014:	235e      	movs	r3, #94	@ 0x5e
 8015016:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8015018:	687b      	ldr	r3, [r7, #4]
 801501a:	3301      	adds	r3, #1
 801501c:	781b      	ldrb	r3, [r3, #0]
 801501e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8015022:	b2db      	uxtb	r3, r3
 8015024:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8015026:	687b      	ldr	r3, [r7, #4]
 8015028:	3302      	adds	r3, #2
 801502a:	781b      	ldrb	r3, [r3, #0]
 801502c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801502e:	687b      	ldr	r3, [r7, #4]
 8015030:	3303      	adds	r3, #3
 8015032:	781b      	ldrb	r3, [r3, #0]
 8015034:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8015036:	f107 0310 	add.w	r3, r7, #16
 801503a:	61fb      	str	r3, [r7, #28]
 801503c:	e090      	b.n	8015160 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801503e:	687b      	ldr	r3, [r7, #4]
 8015040:	681a      	ldr	r2, [r3, #0]
 8015042:	68fb      	ldr	r3, [r7, #12]
 8015044:	3304      	adds	r3, #4
 8015046:	681b      	ldr	r3, [r3, #0]
 8015048:	405a      	eors	r2, r3
 801504a:	68fb      	ldr	r3, [r7, #12]
 801504c:	3308      	adds	r3, #8
 801504e:	681b      	ldr	r3, [r3, #0]
 8015050:	4013      	ands	r3, r2
 8015052:	2b00      	cmp	r3, #0
 8015054:	d012      	beq.n	801507c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8015056:	687b      	ldr	r3, [r7, #4]
 8015058:	681b      	ldr	r3, [r3, #0]
 801505a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801505c:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 8015060:	4293      	cmp	r3, r2
 8015062:	d00b      	beq.n	801507c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8015064:	68fb      	ldr	r3, [r7, #12]
 8015066:	330c      	adds	r3, #12
 8015068:	681b      	ldr	r3, [r3, #0]
 801506a:	2b00      	cmp	r3, #0
 801506c:	d003      	beq.n	8015076 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801506e:	68fb      	ldr	r3, [r7, #12]
 8015070:	330c      	adds	r3, #12
 8015072:	61bb      	str	r3, [r7, #24]
 8015074:	e002      	b.n	801507c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8015076:	f06f 0303 	mvn.w	r3, #3
 801507a:	e07d      	b.n	8015178 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801507c:	4b46      	ldr	r3, [pc, #280]	@ (8015198 <etharp_output+0x1fc>)
 801507e:	781b      	ldrb	r3, [r3, #0]
 8015080:	4619      	mov	r1, r3
 8015082:	4a46      	ldr	r2, [pc, #280]	@ (801519c <etharp_output+0x200>)
 8015084:	460b      	mov	r3, r1
 8015086:	005b      	lsls	r3, r3, #1
 8015088:	440b      	add	r3, r1
 801508a:	00db      	lsls	r3, r3, #3
 801508c:	4413      	add	r3, r2
 801508e:	3314      	adds	r3, #20
 8015090:	781b      	ldrb	r3, [r3, #0]
 8015092:	2b01      	cmp	r3, #1
 8015094:	d925      	bls.n	80150e2 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8015096:	4b40      	ldr	r3, [pc, #256]	@ (8015198 <etharp_output+0x1fc>)
 8015098:	781b      	ldrb	r3, [r3, #0]
 801509a:	4619      	mov	r1, r3
 801509c:	4a3f      	ldr	r2, [pc, #252]	@ (801519c <etharp_output+0x200>)
 801509e:	460b      	mov	r3, r1
 80150a0:	005b      	lsls	r3, r3, #1
 80150a2:	440b      	add	r3, r1
 80150a4:	00db      	lsls	r3, r3, #3
 80150a6:	4413      	add	r3, r2
 80150a8:	3308      	adds	r3, #8
 80150aa:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80150ac:	68fa      	ldr	r2, [r7, #12]
 80150ae:	429a      	cmp	r2, r3
 80150b0:	d117      	bne.n	80150e2 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80150b2:	69bb      	ldr	r3, [r7, #24]
 80150b4:	681a      	ldr	r2, [r3, #0]
 80150b6:	4b38      	ldr	r3, [pc, #224]	@ (8015198 <etharp_output+0x1fc>)
 80150b8:	781b      	ldrb	r3, [r3, #0]
 80150ba:	4618      	mov	r0, r3
 80150bc:	4937      	ldr	r1, [pc, #220]	@ (801519c <etharp_output+0x200>)
 80150be:	4603      	mov	r3, r0
 80150c0:	005b      	lsls	r3, r3, #1
 80150c2:	4403      	add	r3, r0
 80150c4:	00db      	lsls	r3, r3, #3
 80150c6:	440b      	add	r3, r1
 80150c8:	3304      	adds	r3, #4
 80150ca:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80150cc:	429a      	cmp	r2, r3
 80150ce:	d108      	bne.n	80150e2 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80150d0:	4b31      	ldr	r3, [pc, #196]	@ (8015198 <etharp_output+0x1fc>)
 80150d2:	781b      	ldrb	r3, [r3, #0]
 80150d4:	461a      	mov	r2, r3
 80150d6:	68b9      	ldr	r1, [r7, #8]
 80150d8:	68f8      	ldr	r0, [r7, #12]
 80150da:	f7ff fec5 	bl	8014e68 <etharp_output_to_arp_index>
 80150de:	4603      	mov	r3, r0
 80150e0:	e04a      	b.n	8015178 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80150e2:	2300      	movs	r3, #0
 80150e4:	75fb      	strb	r3, [r7, #23]
 80150e6:	e031      	b.n	801514c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80150e8:	7dfa      	ldrb	r2, [r7, #23]
 80150ea:	492c      	ldr	r1, [pc, #176]	@ (801519c <etharp_output+0x200>)
 80150ec:	4613      	mov	r3, r2
 80150ee:	005b      	lsls	r3, r3, #1
 80150f0:	4413      	add	r3, r2
 80150f2:	00db      	lsls	r3, r3, #3
 80150f4:	440b      	add	r3, r1
 80150f6:	3314      	adds	r3, #20
 80150f8:	781b      	ldrb	r3, [r3, #0]
 80150fa:	2b01      	cmp	r3, #1
 80150fc:	d923      	bls.n	8015146 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80150fe:	7dfa      	ldrb	r2, [r7, #23]
 8015100:	4926      	ldr	r1, [pc, #152]	@ (801519c <etharp_output+0x200>)
 8015102:	4613      	mov	r3, r2
 8015104:	005b      	lsls	r3, r3, #1
 8015106:	4413      	add	r3, r2
 8015108:	00db      	lsls	r3, r3, #3
 801510a:	440b      	add	r3, r1
 801510c:	3308      	adds	r3, #8
 801510e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8015110:	68fa      	ldr	r2, [r7, #12]
 8015112:	429a      	cmp	r2, r3
 8015114:	d117      	bne.n	8015146 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8015116:	69bb      	ldr	r3, [r7, #24]
 8015118:	6819      	ldr	r1, [r3, #0]
 801511a:	7dfa      	ldrb	r2, [r7, #23]
 801511c:	481f      	ldr	r0, [pc, #124]	@ (801519c <etharp_output+0x200>)
 801511e:	4613      	mov	r3, r2
 8015120:	005b      	lsls	r3, r3, #1
 8015122:	4413      	add	r3, r2
 8015124:	00db      	lsls	r3, r3, #3
 8015126:	4403      	add	r3, r0
 8015128:	3304      	adds	r3, #4
 801512a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801512c:	4299      	cmp	r1, r3
 801512e:	d10a      	bne.n	8015146 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8015130:	4a19      	ldr	r2, [pc, #100]	@ (8015198 <etharp_output+0x1fc>)
 8015132:	7dfb      	ldrb	r3, [r7, #23]
 8015134:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8015136:	7dfb      	ldrb	r3, [r7, #23]
 8015138:	461a      	mov	r2, r3
 801513a:	68b9      	ldr	r1, [r7, #8]
 801513c:	68f8      	ldr	r0, [r7, #12]
 801513e:	f7ff fe93 	bl	8014e68 <etharp_output_to_arp_index>
 8015142:	4603      	mov	r3, r0
 8015144:	e018      	b.n	8015178 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8015146:	7dfb      	ldrb	r3, [r7, #23]
 8015148:	3301      	adds	r3, #1
 801514a:	75fb      	strb	r3, [r7, #23]
 801514c:	7dfb      	ldrb	r3, [r7, #23]
 801514e:	2b09      	cmp	r3, #9
 8015150:	d9ca      	bls.n	80150e8 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8015152:	68ba      	ldr	r2, [r7, #8]
 8015154:	69b9      	ldr	r1, [r7, #24]
 8015156:	68f8      	ldr	r0, [r7, #12]
 8015158:	f000 f822 	bl	80151a0 <etharp_query>
 801515c:	4603      	mov	r3, r0
 801515e:	e00b      	b.n	8015178 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8015160:	68fb      	ldr	r3, [r7, #12]
 8015162:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8015166:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801516a:	9300      	str	r3, [sp, #0]
 801516c:	69fb      	ldr	r3, [r7, #28]
 801516e:	68b9      	ldr	r1, [r7, #8]
 8015170:	68f8      	ldr	r0, [r7, #12]
 8015172:	f001 fd45 	bl	8016c00 <ethernet_output>
 8015176:	4603      	mov	r3, r0
}
 8015178:	4618      	mov	r0, r3
 801517a:	3720      	adds	r7, #32
 801517c:	46bd      	mov	sp, r7
 801517e:	bd80      	pop	{r7, pc}
 8015180:	08022c2c 	.word	0x08022c2c
 8015184:	08022d7c 	.word	0x08022d7c
 8015188:	08022ca4 	.word	0x08022ca4
 801518c:	08022dcc 	.word	0x08022dcc
 8015190:	08022d6c 	.word	0x08022d6c
 8015194:	080233f0 	.word	0x080233f0
 8015198:	2001539c 	.word	0x2001539c
 801519c:	200152ac 	.word	0x200152ac

080151a0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80151a0:	b580      	push	{r7, lr}
 80151a2:	b08c      	sub	sp, #48	@ 0x30
 80151a4:	af02      	add	r7, sp, #8
 80151a6:	60f8      	str	r0, [r7, #12]
 80151a8:	60b9      	str	r1, [r7, #8]
 80151aa:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80151ac:	68fb      	ldr	r3, [r7, #12]
 80151ae:	3326      	adds	r3, #38	@ 0x26
 80151b0:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80151b2:	23ff      	movs	r3, #255	@ 0xff
 80151b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 80151b8:	2300      	movs	r3, #0
 80151ba:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80151bc:	68bb      	ldr	r3, [r7, #8]
 80151be:	681b      	ldr	r3, [r3, #0]
 80151c0:	68f9      	ldr	r1, [r7, #12]
 80151c2:	4618      	mov	r0, r3
 80151c4:	f000 fe0e 	bl	8015de4 <ip4_addr_isbroadcast_u32>
 80151c8:	4603      	mov	r3, r0
 80151ca:	2b00      	cmp	r3, #0
 80151cc:	d10c      	bne.n	80151e8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80151ce:	68bb      	ldr	r3, [r7, #8]
 80151d0:	681b      	ldr	r3, [r3, #0]
 80151d2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80151d6:	2be0      	cmp	r3, #224	@ 0xe0
 80151d8:	d006      	beq.n	80151e8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80151da:	68bb      	ldr	r3, [r7, #8]
 80151dc:	2b00      	cmp	r3, #0
 80151de:	d003      	beq.n	80151e8 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80151e0:	68bb      	ldr	r3, [r7, #8]
 80151e2:	681b      	ldr	r3, [r3, #0]
 80151e4:	2b00      	cmp	r3, #0
 80151e6:	d102      	bne.n	80151ee <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80151e8:	f06f 030f 	mvn.w	r3, #15
 80151ec:	e101      	b.n	80153f2 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80151ee:	68fa      	ldr	r2, [r7, #12]
 80151f0:	2101      	movs	r1, #1
 80151f2:	68b8      	ldr	r0, [r7, #8]
 80151f4:	f7ff fb60 	bl	80148b8 <etharp_find_entry>
 80151f8:	4603      	mov	r3, r0
 80151fa:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80151fc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015200:	2b00      	cmp	r3, #0
 8015202:	da02      	bge.n	801520a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8015204:	8a7b      	ldrh	r3, [r7, #18]
 8015206:	b25b      	sxtb	r3, r3
 8015208:	e0f3      	b.n	80153f2 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801520a:	8a7b      	ldrh	r3, [r7, #18]
 801520c:	2b7e      	cmp	r3, #126	@ 0x7e
 801520e:	d906      	bls.n	801521e <etharp_query+0x7e>
 8015210:	4b7a      	ldr	r3, [pc, #488]	@ (80153fc <etharp_query+0x25c>)
 8015212:	f240 32c1 	movw	r2, #961	@ 0x3c1
 8015216:	497a      	ldr	r1, [pc, #488]	@ (8015400 <etharp_query+0x260>)
 8015218:	487a      	ldr	r0, [pc, #488]	@ (8015404 <etharp_query+0x264>)
 801521a:	f002 fcd7 	bl	8017bcc <iprintf>
  i = (netif_addr_idx_t)i_err;
 801521e:	8a7b      	ldrh	r3, [r7, #18]
 8015220:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8015222:	7c7a      	ldrb	r2, [r7, #17]
 8015224:	4978      	ldr	r1, [pc, #480]	@ (8015408 <etharp_query+0x268>)
 8015226:	4613      	mov	r3, r2
 8015228:	005b      	lsls	r3, r3, #1
 801522a:	4413      	add	r3, r2
 801522c:	00db      	lsls	r3, r3, #3
 801522e:	440b      	add	r3, r1
 8015230:	3314      	adds	r3, #20
 8015232:	781b      	ldrb	r3, [r3, #0]
 8015234:	2b00      	cmp	r3, #0
 8015236:	d115      	bne.n	8015264 <etharp_query+0xc4>
    is_new_entry = 1;
 8015238:	2301      	movs	r3, #1
 801523a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801523c:	7c7a      	ldrb	r2, [r7, #17]
 801523e:	4972      	ldr	r1, [pc, #456]	@ (8015408 <etharp_query+0x268>)
 8015240:	4613      	mov	r3, r2
 8015242:	005b      	lsls	r3, r3, #1
 8015244:	4413      	add	r3, r2
 8015246:	00db      	lsls	r3, r3, #3
 8015248:	440b      	add	r3, r1
 801524a:	3314      	adds	r3, #20
 801524c:	2201      	movs	r2, #1
 801524e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8015250:	7c7a      	ldrb	r2, [r7, #17]
 8015252:	496d      	ldr	r1, [pc, #436]	@ (8015408 <etharp_query+0x268>)
 8015254:	4613      	mov	r3, r2
 8015256:	005b      	lsls	r3, r3, #1
 8015258:	4413      	add	r3, r2
 801525a:	00db      	lsls	r3, r3, #3
 801525c:	440b      	add	r3, r1
 801525e:	3308      	adds	r3, #8
 8015260:	68fa      	ldr	r2, [r7, #12]
 8015262:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8015264:	7c7a      	ldrb	r2, [r7, #17]
 8015266:	4968      	ldr	r1, [pc, #416]	@ (8015408 <etharp_query+0x268>)
 8015268:	4613      	mov	r3, r2
 801526a:	005b      	lsls	r3, r3, #1
 801526c:	4413      	add	r3, r2
 801526e:	00db      	lsls	r3, r3, #3
 8015270:	440b      	add	r3, r1
 8015272:	3314      	adds	r3, #20
 8015274:	781b      	ldrb	r3, [r3, #0]
 8015276:	2b01      	cmp	r3, #1
 8015278:	d011      	beq.n	801529e <etharp_query+0xfe>
 801527a:	7c7a      	ldrb	r2, [r7, #17]
 801527c:	4962      	ldr	r1, [pc, #392]	@ (8015408 <etharp_query+0x268>)
 801527e:	4613      	mov	r3, r2
 8015280:	005b      	lsls	r3, r3, #1
 8015282:	4413      	add	r3, r2
 8015284:	00db      	lsls	r3, r3, #3
 8015286:	440b      	add	r3, r1
 8015288:	3314      	adds	r3, #20
 801528a:	781b      	ldrb	r3, [r3, #0]
 801528c:	2b01      	cmp	r3, #1
 801528e:	d806      	bhi.n	801529e <etharp_query+0xfe>
 8015290:	4b5a      	ldr	r3, [pc, #360]	@ (80153fc <etharp_query+0x25c>)
 8015292:	f240 32cd 	movw	r2, #973	@ 0x3cd
 8015296:	495d      	ldr	r1, [pc, #372]	@ (801540c <etharp_query+0x26c>)
 8015298:	485a      	ldr	r0, [pc, #360]	@ (8015404 <etharp_query+0x264>)
 801529a:	f002 fc97 	bl	8017bcc <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801529e:	6a3b      	ldr	r3, [r7, #32]
 80152a0:	2b00      	cmp	r3, #0
 80152a2:	d102      	bne.n	80152aa <etharp_query+0x10a>
 80152a4:	687b      	ldr	r3, [r7, #4]
 80152a6:	2b00      	cmp	r3, #0
 80152a8:	d10c      	bne.n	80152c4 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80152aa:	68b9      	ldr	r1, [r7, #8]
 80152ac:	68f8      	ldr	r0, [r7, #12]
 80152ae:	f000 f963 	bl	8015578 <etharp_request>
 80152b2:	4603      	mov	r3, r0
 80152b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80152b8:	687b      	ldr	r3, [r7, #4]
 80152ba:	2b00      	cmp	r3, #0
 80152bc:	d102      	bne.n	80152c4 <etharp_query+0x124>
      return result;
 80152be:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80152c2:	e096      	b.n	80153f2 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80152c4:	687b      	ldr	r3, [r7, #4]
 80152c6:	2b00      	cmp	r3, #0
 80152c8:	d106      	bne.n	80152d8 <etharp_query+0x138>
 80152ca:	4b4c      	ldr	r3, [pc, #304]	@ (80153fc <etharp_query+0x25c>)
 80152cc:	f240 32e1 	movw	r2, #993	@ 0x3e1
 80152d0:	494f      	ldr	r1, [pc, #316]	@ (8015410 <etharp_query+0x270>)
 80152d2:	484c      	ldr	r0, [pc, #304]	@ (8015404 <etharp_query+0x264>)
 80152d4:	f002 fc7a 	bl	8017bcc <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80152d8:	7c7a      	ldrb	r2, [r7, #17]
 80152da:	494b      	ldr	r1, [pc, #300]	@ (8015408 <etharp_query+0x268>)
 80152dc:	4613      	mov	r3, r2
 80152de:	005b      	lsls	r3, r3, #1
 80152e0:	4413      	add	r3, r2
 80152e2:	00db      	lsls	r3, r3, #3
 80152e4:	440b      	add	r3, r1
 80152e6:	3314      	adds	r3, #20
 80152e8:	781b      	ldrb	r3, [r3, #0]
 80152ea:	2b01      	cmp	r3, #1
 80152ec:	d917      	bls.n	801531e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80152ee:	4a49      	ldr	r2, [pc, #292]	@ (8015414 <etharp_query+0x274>)
 80152f0:	7c7b      	ldrb	r3, [r7, #17]
 80152f2:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80152f4:	7c7a      	ldrb	r2, [r7, #17]
 80152f6:	4613      	mov	r3, r2
 80152f8:	005b      	lsls	r3, r3, #1
 80152fa:	4413      	add	r3, r2
 80152fc:	00db      	lsls	r3, r3, #3
 80152fe:	3308      	adds	r3, #8
 8015300:	4a41      	ldr	r2, [pc, #260]	@ (8015408 <etharp_query+0x268>)
 8015302:	4413      	add	r3, r2
 8015304:	3304      	adds	r3, #4
 8015306:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801530a:	9200      	str	r2, [sp, #0]
 801530c:	697a      	ldr	r2, [r7, #20]
 801530e:	6879      	ldr	r1, [r7, #4]
 8015310:	68f8      	ldr	r0, [r7, #12]
 8015312:	f001 fc75 	bl	8016c00 <ethernet_output>
 8015316:	4603      	mov	r3, r0
 8015318:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801531c:	e067      	b.n	80153ee <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801531e:	7c7a      	ldrb	r2, [r7, #17]
 8015320:	4939      	ldr	r1, [pc, #228]	@ (8015408 <etharp_query+0x268>)
 8015322:	4613      	mov	r3, r2
 8015324:	005b      	lsls	r3, r3, #1
 8015326:	4413      	add	r3, r2
 8015328:	00db      	lsls	r3, r3, #3
 801532a:	440b      	add	r3, r1
 801532c:	3314      	adds	r3, #20
 801532e:	781b      	ldrb	r3, [r3, #0]
 8015330:	2b01      	cmp	r3, #1
 8015332:	d15c      	bne.n	80153ee <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8015334:	2300      	movs	r3, #0
 8015336:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8015338:	687b      	ldr	r3, [r7, #4]
 801533a:	61fb      	str	r3, [r7, #28]
    while (p) {
 801533c:	e01c      	b.n	8015378 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801533e:	69fb      	ldr	r3, [r7, #28]
 8015340:	895a      	ldrh	r2, [r3, #10]
 8015342:	69fb      	ldr	r3, [r7, #28]
 8015344:	891b      	ldrh	r3, [r3, #8]
 8015346:	429a      	cmp	r2, r3
 8015348:	d10a      	bne.n	8015360 <etharp_query+0x1c0>
 801534a:	69fb      	ldr	r3, [r7, #28]
 801534c:	681b      	ldr	r3, [r3, #0]
 801534e:	2b00      	cmp	r3, #0
 8015350:	d006      	beq.n	8015360 <etharp_query+0x1c0>
 8015352:	4b2a      	ldr	r3, [pc, #168]	@ (80153fc <etharp_query+0x25c>)
 8015354:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8015358:	492f      	ldr	r1, [pc, #188]	@ (8015418 <etharp_query+0x278>)
 801535a:	482a      	ldr	r0, [pc, #168]	@ (8015404 <etharp_query+0x264>)
 801535c:	f002 fc36 	bl	8017bcc <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8015360:	69fb      	ldr	r3, [r7, #28]
 8015362:	7b1b      	ldrb	r3, [r3, #12]
 8015364:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015368:	2b00      	cmp	r3, #0
 801536a:	d002      	beq.n	8015372 <etharp_query+0x1d2>
        copy_needed = 1;
 801536c:	2301      	movs	r3, #1
 801536e:	61bb      	str	r3, [r7, #24]
        break;
 8015370:	e005      	b.n	801537e <etharp_query+0x1de>
      }
      p = p->next;
 8015372:	69fb      	ldr	r3, [r7, #28]
 8015374:	681b      	ldr	r3, [r3, #0]
 8015376:	61fb      	str	r3, [r7, #28]
    while (p) {
 8015378:	69fb      	ldr	r3, [r7, #28]
 801537a:	2b00      	cmp	r3, #0
 801537c:	d1df      	bne.n	801533e <etharp_query+0x19e>
    }
    if (copy_needed) {
 801537e:	69bb      	ldr	r3, [r7, #24]
 8015380:	2b00      	cmp	r3, #0
 8015382:	d007      	beq.n	8015394 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8015384:	687a      	ldr	r2, [r7, #4]
 8015386:	f44f 7120 	mov.w	r1, #640	@ 0x280
 801538a:	200e      	movs	r0, #14
 801538c:	f7f9 f978 	bl	800e680 <pbuf_clone>
 8015390:	61f8      	str	r0, [r7, #28]
 8015392:	e004      	b.n	801539e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8015394:	687b      	ldr	r3, [r7, #4]
 8015396:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8015398:	69f8      	ldr	r0, [r7, #28]
 801539a:	f7f8 fe6d 	bl	800e078 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801539e:	69fb      	ldr	r3, [r7, #28]
 80153a0:	2b00      	cmp	r3, #0
 80153a2:	d021      	beq.n	80153e8 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80153a4:	7c7a      	ldrb	r2, [r7, #17]
 80153a6:	4918      	ldr	r1, [pc, #96]	@ (8015408 <etharp_query+0x268>)
 80153a8:	4613      	mov	r3, r2
 80153aa:	005b      	lsls	r3, r3, #1
 80153ac:	4413      	add	r3, r2
 80153ae:	00db      	lsls	r3, r3, #3
 80153b0:	440b      	add	r3, r1
 80153b2:	681b      	ldr	r3, [r3, #0]
 80153b4:	2b00      	cmp	r3, #0
 80153b6:	d00a      	beq.n	80153ce <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80153b8:	7c7a      	ldrb	r2, [r7, #17]
 80153ba:	4913      	ldr	r1, [pc, #76]	@ (8015408 <etharp_query+0x268>)
 80153bc:	4613      	mov	r3, r2
 80153be:	005b      	lsls	r3, r3, #1
 80153c0:	4413      	add	r3, r2
 80153c2:	00db      	lsls	r3, r3, #3
 80153c4:	440b      	add	r3, r1
 80153c6:	681b      	ldr	r3, [r3, #0]
 80153c8:	4618      	mov	r0, r3
 80153ca:	f7f8 fdb5 	bl	800df38 <pbuf_free>
      }
      arp_table[i].q = p;
 80153ce:	7c7a      	ldrb	r2, [r7, #17]
 80153d0:	490d      	ldr	r1, [pc, #52]	@ (8015408 <etharp_query+0x268>)
 80153d2:	4613      	mov	r3, r2
 80153d4:	005b      	lsls	r3, r3, #1
 80153d6:	4413      	add	r3, r2
 80153d8:	00db      	lsls	r3, r3, #3
 80153da:	440b      	add	r3, r1
 80153dc:	69fa      	ldr	r2, [r7, #28]
 80153de:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80153e0:	2300      	movs	r3, #0
 80153e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80153e6:	e002      	b.n	80153ee <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80153e8:	23ff      	movs	r3, #255	@ 0xff
 80153ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 80153ee:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80153f2:	4618      	mov	r0, r3
 80153f4:	3728      	adds	r7, #40	@ 0x28
 80153f6:	46bd      	mov	sp, r7
 80153f8:	bd80      	pop	{r7, pc}
 80153fa:	bf00      	nop
 80153fc:	08022c2c 	.word	0x08022c2c
 8015400:	08022dd8 	.word	0x08022dd8
 8015404:	08022ca4 	.word	0x08022ca4
 8015408:	200152ac 	.word	0x200152ac
 801540c:	08022de8 	.word	0x08022de8
 8015410:	08022dcc 	.word	0x08022dcc
 8015414:	2001539c 	.word	0x2001539c
 8015418:	08022e10 	.word	0x08022e10

0801541c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801541c:	b580      	push	{r7, lr}
 801541e:	b08a      	sub	sp, #40	@ 0x28
 8015420:	af02      	add	r7, sp, #8
 8015422:	60f8      	str	r0, [r7, #12]
 8015424:	60b9      	str	r1, [r7, #8]
 8015426:	607a      	str	r2, [r7, #4]
 8015428:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801542a:	2300      	movs	r3, #0
 801542c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801542e:	68fb      	ldr	r3, [r7, #12]
 8015430:	2b00      	cmp	r3, #0
 8015432:	d106      	bne.n	8015442 <etharp_raw+0x26>
 8015434:	4b3a      	ldr	r3, [pc, #232]	@ (8015520 <etharp_raw+0x104>)
 8015436:	f240 4257 	movw	r2, #1111	@ 0x457
 801543a:	493a      	ldr	r1, [pc, #232]	@ (8015524 <etharp_raw+0x108>)
 801543c:	483a      	ldr	r0, [pc, #232]	@ (8015528 <etharp_raw+0x10c>)
 801543e:	f002 fbc5 	bl	8017bcc <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8015442:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8015446:	211c      	movs	r1, #28
 8015448:	200e      	movs	r0, #14
 801544a:	f7f8 fa91 	bl	800d970 <pbuf_alloc>
 801544e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8015450:	69bb      	ldr	r3, [r7, #24]
 8015452:	2b00      	cmp	r3, #0
 8015454:	d102      	bne.n	801545c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8015456:	f04f 33ff 	mov.w	r3, #4294967295
 801545a:	e05d      	b.n	8015518 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801545c:	69bb      	ldr	r3, [r7, #24]
 801545e:	895b      	ldrh	r3, [r3, #10]
 8015460:	2b1b      	cmp	r3, #27
 8015462:	d806      	bhi.n	8015472 <etharp_raw+0x56>
 8015464:	4b2e      	ldr	r3, [pc, #184]	@ (8015520 <etharp_raw+0x104>)
 8015466:	f240 4262 	movw	r2, #1122	@ 0x462
 801546a:	4930      	ldr	r1, [pc, #192]	@ (801552c <etharp_raw+0x110>)
 801546c:	482e      	ldr	r0, [pc, #184]	@ (8015528 <etharp_raw+0x10c>)
 801546e:	f002 fbad 	bl	8017bcc <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8015472:	69bb      	ldr	r3, [r7, #24]
 8015474:	685b      	ldr	r3, [r3, #4]
 8015476:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8015478:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801547a:	4618      	mov	r0, r3
 801547c:	f7f6 ff34 	bl	800c2e8 <lwip_htons>
 8015480:	4603      	mov	r3, r0
 8015482:	461a      	mov	r2, r3
 8015484:	697b      	ldr	r3, [r7, #20]
 8015486:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8015488:	68fb      	ldr	r3, [r7, #12]
 801548a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801548e:	2b06      	cmp	r3, #6
 8015490:	d006      	beq.n	80154a0 <etharp_raw+0x84>
 8015492:	4b23      	ldr	r3, [pc, #140]	@ (8015520 <etharp_raw+0x104>)
 8015494:	f240 4269 	movw	r2, #1129	@ 0x469
 8015498:	4925      	ldr	r1, [pc, #148]	@ (8015530 <etharp_raw+0x114>)
 801549a:	4823      	ldr	r0, [pc, #140]	@ (8015528 <etharp_raw+0x10c>)
 801549c:	f002 fb96 	bl	8017bcc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80154a0:	697b      	ldr	r3, [r7, #20]
 80154a2:	3308      	adds	r3, #8
 80154a4:	2206      	movs	r2, #6
 80154a6:	6839      	ldr	r1, [r7, #0]
 80154a8:	4618      	mov	r0, r3
 80154aa:	f002 fce6 	bl	8017e7a <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80154ae:	697b      	ldr	r3, [r7, #20]
 80154b0:	3312      	adds	r3, #18
 80154b2:	2206      	movs	r2, #6
 80154b4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80154b6:	4618      	mov	r0, r3
 80154b8:	f002 fcdf 	bl	8017e7a <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80154bc:	697b      	ldr	r3, [r7, #20]
 80154be:	330e      	adds	r3, #14
 80154c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80154c2:	6812      	ldr	r2, [r2, #0]
 80154c4:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80154c6:	697b      	ldr	r3, [r7, #20]
 80154c8:	3318      	adds	r3, #24
 80154ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80154cc:	6812      	ldr	r2, [r2, #0]
 80154ce:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80154d0:	697b      	ldr	r3, [r7, #20]
 80154d2:	2200      	movs	r2, #0
 80154d4:	701a      	strb	r2, [r3, #0]
 80154d6:	2200      	movs	r2, #0
 80154d8:	f042 0201 	orr.w	r2, r2, #1
 80154dc:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80154de:	697b      	ldr	r3, [r7, #20]
 80154e0:	2200      	movs	r2, #0
 80154e2:	f042 0208 	orr.w	r2, r2, #8
 80154e6:	709a      	strb	r2, [r3, #2]
 80154e8:	2200      	movs	r2, #0
 80154ea:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80154ec:	697b      	ldr	r3, [r7, #20]
 80154ee:	2206      	movs	r2, #6
 80154f0:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80154f2:	697b      	ldr	r3, [r7, #20]
 80154f4:	2204      	movs	r2, #4
 80154f6:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80154f8:	f640 0306 	movw	r3, #2054	@ 0x806
 80154fc:	9300      	str	r3, [sp, #0]
 80154fe:	687b      	ldr	r3, [r7, #4]
 8015500:	68ba      	ldr	r2, [r7, #8]
 8015502:	69b9      	ldr	r1, [r7, #24]
 8015504:	68f8      	ldr	r0, [r7, #12]
 8015506:	f001 fb7b 	bl	8016c00 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801550a:	69b8      	ldr	r0, [r7, #24]
 801550c:	f7f8 fd14 	bl	800df38 <pbuf_free>
  p = NULL;
 8015510:	2300      	movs	r3, #0
 8015512:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8015514:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015518:	4618      	mov	r0, r3
 801551a:	3720      	adds	r7, #32
 801551c:	46bd      	mov	sp, r7
 801551e:	bd80      	pop	{r7, pc}
 8015520:	08022c2c 	.word	0x08022c2c
 8015524:	08022d7c 	.word	0x08022d7c
 8015528:	08022ca4 	.word	0x08022ca4
 801552c:	08022e2c 	.word	0x08022e2c
 8015530:	08022e60 	.word	0x08022e60

08015534 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8015534:	b580      	push	{r7, lr}
 8015536:	b088      	sub	sp, #32
 8015538:	af04      	add	r7, sp, #16
 801553a:	60f8      	str	r0, [r7, #12]
 801553c:	60b9      	str	r1, [r7, #8]
 801553e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8015540:	68fb      	ldr	r3, [r7, #12]
 8015542:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8015546:	68fb      	ldr	r3, [r7, #12]
 8015548:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 801554c:	68fb      	ldr	r3, [r7, #12]
 801554e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8015550:	2201      	movs	r2, #1
 8015552:	9203      	str	r2, [sp, #12]
 8015554:	68ba      	ldr	r2, [r7, #8]
 8015556:	9202      	str	r2, [sp, #8]
 8015558:	4a06      	ldr	r2, [pc, #24]	@ (8015574 <etharp_request_dst+0x40>)
 801555a:	9201      	str	r2, [sp, #4]
 801555c:	9300      	str	r3, [sp, #0]
 801555e:	4603      	mov	r3, r0
 8015560:	687a      	ldr	r2, [r7, #4]
 8015562:	68f8      	ldr	r0, [r7, #12]
 8015564:	f7ff ff5a 	bl	801541c <etharp_raw>
 8015568:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801556a:	4618      	mov	r0, r3
 801556c:	3710      	adds	r7, #16
 801556e:	46bd      	mov	sp, r7
 8015570:	bd80      	pop	{r7, pc}
 8015572:	bf00      	nop
 8015574:	080233f8 	.word	0x080233f8

08015578 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8015578:	b580      	push	{r7, lr}
 801557a:	b082      	sub	sp, #8
 801557c:	af00      	add	r7, sp, #0
 801557e:	6078      	str	r0, [r7, #4]
 8015580:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8015582:	4a05      	ldr	r2, [pc, #20]	@ (8015598 <etharp_request+0x20>)
 8015584:	6839      	ldr	r1, [r7, #0]
 8015586:	6878      	ldr	r0, [r7, #4]
 8015588:	f7ff ffd4 	bl	8015534 <etharp_request_dst>
 801558c:	4603      	mov	r3, r0
}
 801558e:	4618      	mov	r0, r3
 8015590:	3708      	adds	r7, #8
 8015592:	46bd      	mov	sp, r7
 8015594:	bd80      	pop	{r7, pc}
 8015596:	bf00      	nop
 8015598:	080233f0 	.word	0x080233f0

0801559c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801559c:	b580      	push	{r7, lr}
 801559e:	b08e      	sub	sp, #56	@ 0x38
 80155a0:	af04      	add	r7, sp, #16
 80155a2:	6078      	str	r0, [r7, #4]
 80155a4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80155a6:	4b79      	ldr	r3, [pc, #484]	@ (801578c <icmp_input+0x1f0>)
 80155a8:	689b      	ldr	r3, [r3, #8]
 80155aa:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80155ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80155ae:	781b      	ldrb	r3, [r3, #0]
 80155b0:	f003 030f 	and.w	r3, r3, #15
 80155b4:	b2db      	uxtb	r3, r3
 80155b6:	009b      	lsls	r3, r3, #2
 80155b8:	b2db      	uxtb	r3, r3
 80155ba:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 80155bc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80155be:	2b13      	cmp	r3, #19
 80155c0:	f240 80cd 	bls.w	801575e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80155c4:	687b      	ldr	r3, [r7, #4]
 80155c6:	895b      	ldrh	r3, [r3, #10]
 80155c8:	2b03      	cmp	r3, #3
 80155ca:	f240 80ca 	bls.w	8015762 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80155ce:	687b      	ldr	r3, [r7, #4]
 80155d0:	685b      	ldr	r3, [r3, #4]
 80155d2:	781b      	ldrb	r3, [r3, #0]
 80155d4:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80155d8:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80155dc:	2b00      	cmp	r3, #0
 80155de:	f000 80b7 	beq.w	8015750 <icmp_input+0x1b4>
 80155e2:	2b08      	cmp	r3, #8
 80155e4:	f040 80b7 	bne.w	8015756 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80155e8:	4b69      	ldr	r3, [pc, #420]	@ (8015790 <icmp_input+0x1f4>)
 80155ea:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80155ec:	4b67      	ldr	r3, [pc, #412]	@ (801578c <icmp_input+0x1f0>)
 80155ee:	695b      	ldr	r3, [r3, #20]
 80155f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80155f4:	2be0      	cmp	r3, #224	@ 0xe0
 80155f6:	f000 80bb 	beq.w	8015770 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80155fa:	4b64      	ldr	r3, [pc, #400]	@ (801578c <icmp_input+0x1f0>)
 80155fc:	695b      	ldr	r3, [r3, #20]
 80155fe:	4a63      	ldr	r2, [pc, #396]	@ (801578c <icmp_input+0x1f0>)
 8015600:	6812      	ldr	r2, [r2, #0]
 8015602:	4611      	mov	r1, r2
 8015604:	4618      	mov	r0, r3
 8015606:	f000 fbed 	bl	8015de4 <ip4_addr_isbroadcast_u32>
 801560a:	4603      	mov	r3, r0
 801560c:	2b00      	cmp	r3, #0
 801560e:	f040 80b1 	bne.w	8015774 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8015612:	687b      	ldr	r3, [r7, #4]
 8015614:	891b      	ldrh	r3, [r3, #8]
 8015616:	2b07      	cmp	r3, #7
 8015618:	f240 80a5 	bls.w	8015766 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801561c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801561e:	330e      	adds	r3, #14
 8015620:	4619      	mov	r1, r3
 8015622:	6878      	ldr	r0, [r7, #4]
 8015624:	f7f8 fbf2 	bl	800de0c <pbuf_add_header>
 8015628:	4603      	mov	r3, r0
 801562a:	2b00      	cmp	r3, #0
 801562c:	d04b      	beq.n	80156c6 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801562e:	687b      	ldr	r3, [r7, #4]
 8015630:	891a      	ldrh	r2, [r3, #8]
 8015632:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8015634:	4413      	add	r3, r2
 8015636:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8015638:	687b      	ldr	r3, [r7, #4]
 801563a:	891b      	ldrh	r3, [r3, #8]
 801563c:	8b7a      	ldrh	r2, [r7, #26]
 801563e:	429a      	cmp	r2, r3
 8015640:	f0c0 809a 	bcc.w	8015778 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8015644:	8b7b      	ldrh	r3, [r7, #26]
 8015646:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801564a:	4619      	mov	r1, r3
 801564c:	200e      	movs	r0, #14
 801564e:	f7f8 f98f 	bl	800d970 <pbuf_alloc>
 8015652:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8015654:	697b      	ldr	r3, [r7, #20]
 8015656:	2b00      	cmp	r3, #0
 8015658:	f000 8090 	beq.w	801577c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801565c:	697b      	ldr	r3, [r7, #20]
 801565e:	895b      	ldrh	r3, [r3, #10]
 8015660:	461a      	mov	r2, r3
 8015662:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8015664:	3308      	adds	r3, #8
 8015666:	429a      	cmp	r2, r3
 8015668:	d203      	bcs.n	8015672 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801566a:	6978      	ldr	r0, [r7, #20]
 801566c:	f7f8 fc64 	bl	800df38 <pbuf_free>
          goto icmperr;
 8015670:	e085      	b.n	801577e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8015672:	697b      	ldr	r3, [r7, #20]
 8015674:	685b      	ldr	r3, [r3, #4]
 8015676:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8015678:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801567a:	4618      	mov	r0, r3
 801567c:	f002 fbfd 	bl	8017e7a <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8015680:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8015682:	4619      	mov	r1, r3
 8015684:	6978      	ldr	r0, [r7, #20]
 8015686:	f7f8 fbd1 	bl	800de2c <pbuf_remove_header>
 801568a:	4603      	mov	r3, r0
 801568c:	2b00      	cmp	r3, #0
 801568e:	d009      	beq.n	80156a4 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8015690:	4b40      	ldr	r3, [pc, #256]	@ (8015794 <icmp_input+0x1f8>)
 8015692:	22b6      	movs	r2, #182	@ 0xb6
 8015694:	4940      	ldr	r1, [pc, #256]	@ (8015798 <icmp_input+0x1fc>)
 8015696:	4841      	ldr	r0, [pc, #260]	@ (801579c <icmp_input+0x200>)
 8015698:	f002 fa98 	bl	8017bcc <iprintf>
          pbuf_free(r);
 801569c:	6978      	ldr	r0, [r7, #20]
 801569e:	f7f8 fc4b 	bl	800df38 <pbuf_free>
          goto icmperr;
 80156a2:	e06c      	b.n	801577e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80156a4:	6879      	ldr	r1, [r7, #4]
 80156a6:	6978      	ldr	r0, [r7, #20]
 80156a8:	f7f8 fd6e 	bl	800e188 <pbuf_copy>
 80156ac:	4603      	mov	r3, r0
 80156ae:	2b00      	cmp	r3, #0
 80156b0:	d003      	beq.n	80156ba <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80156b2:	6978      	ldr	r0, [r7, #20]
 80156b4:	f7f8 fc40 	bl	800df38 <pbuf_free>
          goto icmperr;
 80156b8:	e061      	b.n	801577e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 80156ba:	6878      	ldr	r0, [r7, #4]
 80156bc:	f7f8 fc3c 	bl	800df38 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80156c0:	697b      	ldr	r3, [r7, #20]
 80156c2:	607b      	str	r3, [r7, #4]
 80156c4:	e00f      	b.n	80156e6 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80156c6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80156c8:	330e      	adds	r3, #14
 80156ca:	4619      	mov	r1, r3
 80156cc:	6878      	ldr	r0, [r7, #4]
 80156ce:	f7f8 fbad 	bl	800de2c <pbuf_remove_header>
 80156d2:	4603      	mov	r3, r0
 80156d4:	2b00      	cmp	r3, #0
 80156d6:	d006      	beq.n	80156e6 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80156d8:	4b2e      	ldr	r3, [pc, #184]	@ (8015794 <icmp_input+0x1f8>)
 80156da:	22c7      	movs	r2, #199	@ 0xc7
 80156dc:	4930      	ldr	r1, [pc, #192]	@ (80157a0 <icmp_input+0x204>)
 80156de:	482f      	ldr	r0, [pc, #188]	@ (801579c <icmp_input+0x200>)
 80156e0:	f002 fa74 	bl	8017bcc <iprintf>
          goto icmperr;
 80156e4:	e04b      	b.n	801577e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80156e6:	687b      	ldr	r3, [r7, #4]
 80156e8:	685b      	ldr	r3, [r3, #4]
 80156ea:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80156ec:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80156ee:	4619      	mov	r1, r3
 80156f0:	6878      	ldr	r0, [r7, #4]
 80156f2:	f7f8 fb8b 	bl	800de0c <pbuf_add_header>
 80156f6:	4603      	mov	r3, r0
 80156f8:	2b00      	cmp	r3, #0
 80156fa:	d12b      	bne.n	8015754 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80156fc:	687b      	ldr	r3, [r7, #4]
 80156fe:	685b      	ldr	r3, [r3, #4]
 8015700:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8015702:	69fb      	ldr	r3, [r7, #28]
 8015704:	681a      	ldr	r2, [r3, #0]
 8015706:	68fb      	ldr	r3, [r7, #12]
 8015708:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801570a:	4b20      	ldr	r3, [pc, #128]	@ (801578c <icmp_input+0x1f0>)
 801570c:	691a      	ldr	r2, [r3, #16]
 801570e:	68fb      	ldr	r3, [r7, #12]
 8015710:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8015712:	693b      	ldr	r3, [r7, #16]
 8015714:	2200      	movs	r2, #0
 8015716:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8015718:	693b      	ldr	r3, [r7, #16]
 801571a:	2200      	movs	r2, #0
 801571c:	709a      	strb	r2, [r3, #2]
 801571e:	2200      	movs	r2, #0
 8015720:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8015722:	68fb      	ldr	r3, [r7, #12]
 8015724:	22ff      	movs	r2, #255	@ 0xff
 8015726:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8015728:	68fb      	ldr	r3, [r7, #12]
 801572a:	2200      	movs	r2, #0
 801572c:	729a      	strb	r2, [r3, #10]
 801572e:	2200      	movs	r2, #0
 8015730:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8015732:	683b      	ldr	r3, [r7, #0]
 8015734:	9302      	str	r3, [sp, #8]
 8015736:	2301      	movs	r3, #1
 8015738:	9301      	str	r3, [sp, #4]
 801573a:	2300      	movs	r3, #0
 801573c:	9300      	str	r3, [sp, #0]
 801573e:	23ff      	movs	r3, #255	@ 0xff
 8015740:	2200      	movs	r2, #0
 8015742:	69f9      	ldr	r1, [r7, #28]
 8015744:	6878      	ldr	r0, [r7, #4]
 8015746:	f000 fa75 	bl	8015c34 <ip4_output_if>
 801574a:	4603      	mov	r3, r0
 801574c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801574e:	e001      	b.n	8015754 <icmp_input+0x1b8>
      break;
 8015750:	bf00      	nop
 8015752:	e000      	b.n	8015756 <icmp_input+0x1ba>
      break;
 8015754:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8015756:	6878      	ldr	r0, [r7, #4]
 8015758:	f7f8 fbee 	bl	800df38 <pbuf_free>
  return;
 801575c:	e013      	b.n	8015786 <icmp_input+0x1ea>
    goto lenerr;
 801575e:	bf00      	nop
 8015760:	e002      	b.n	8015768 <icmp_input+0x1cc>
    goto lenerr;
 8015762:	bf00      	nop
 8015764:	e000      	b.n	8015768 <icmp_input+0x1cc>
        goto lenerr;
 8015766:	bf00      	nop
lenerr:
  pbuf_free(p);
 8015768:	6878      	ldr	r0, [r7, #4]
 801576a:	f7f8 fbe5 	bl	800df38 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801576e:	e00a      	b.n	8015786 <icmp_input+0x1ea>
        goto icmperr;
 8015770:	bf00      	nop
 8015772:	e004      	b.n	801577e <icmp_input+0x1e2>
        goto icmperr;
 8015774:	bf00      	nop
 8015776:	e002      	b.n	801577e <icmp_input+0x1e2>
          goto icmperr;
 8015778:	bf00      	nop
 801577a:	e000      	b.n	801577e <icmp_input+0x1e2>
          goto icmperr;
 801577c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801577e:	6878      	ldr	r0, [r7, #4]
 8015780:	f7f8 fbda 	bl	800df38 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8015784:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8015786:	3728      	adds	r7, #40	@ 0x28
 8015788:	46bd      	mov	sp, r7
 801578a:	bd80      	pop	{r7, pc}
 801578c:	20011f0c 	.word	0x20011f0c
 8015790:	20011f20 	.word	0x20011f20
 8015794:	08022ea4 	.word	0x08022ea4
 8015798:	08022edc 	.word	0x08022edc
 801579c:	08022f14 	.word	0x08022f14
 80157a0:	08022f3c 	.word	0x08022f3c

080157a4 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80157a4:	b580      	push	{r7, lr}
 80157a6:	b082      	sub	sp, #8
 80157a8:	af00      	add	r7, sp, #0
 80157aa:	6078      	str	r0, [r7, #4]
 80157ac:	460b      	mov	r3, r1
 80157ae:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80157b0:	78fb      	ldrb	r3, [r7, #3]
 80157b2:	461a      	mov	r2, r3
 80157b4:	2103      	movs	r1, #3
 80157b6:	6878      	ldr	r0, [r7, #4]
 80157b8:	f000 f814 	bl	80157e4 <icmp_send_response>
}
 80157bc:	bf00      	nop
 80157be:	3708      	adds	r7, #8
 80157c0:	46bd      	mov	sp, r7
 80157c2:	bd80      	pop	{r7, pc}

080157c4 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80157c4:	b580      	push	{r7, lr}
 80157c6:	b082      	sub	sp, #8
 80157c8:	af00      	add	r7, sp, #0
 80157ca:	6078      	str	r0, [r7, #4]
 80157cc:	460b      	mov	r3, r1
 80157ce:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80157d0:	78fb      	ldrb	r3, [r7, #3]
 80157d2:	461a      	mov	r2, r3
 80157d4:	210b      	movs	r1, #11
 80157d6:	6878      	ldr	r0, [r7, #4]
 80157d8:	f000 f804 	bl	80157e4 <icmp_send_response>
}
 80157dc:	bf00      	nop
 80157de:	3708      	adds	r7, #8
 80157e0:	46bd      	mov	sp, r7
 80157e2:	bd80      	pop	{r7, pc}

080157e4 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80157e4:	b580      	push	{r7, lr}
 80157e6:	b08c      	sub	sp, #48	@ 0x30
 80157e8:	af04      	add	r7, sp, #16
 80157ea:	6078      	str	r0, [r7, #4]
 80157ec:	460b      	mov	r3, r1
 80157ee:	70fb      	strb	r3, [r7, #3]
 80157f0:	4613      	mov	r3, r2
 80157f2:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80157f4:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80157f8:	2124      	movs	r1, #36	@ 0x24
 80157fa:	2022      	movs	r0, #34	@ 0x22
 80157fc:	f7f8 f8b8 	bl	800d970 <pbuf_alloc>
 8015800:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8015802:	69fb      	ldr	r3, [r7, #28]
 8015804:	2b00      	cmp	r3, #0
 8015806:	d04c      	beq.n	80158a2 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8015808:	69fb      	ldr	r3, [r7, #28]
 801580a:	895b      	ldrh	r3, [r3, #10]
 801580c:	2b23      	cmp	r3, #35	@ 0x23
 801580e:	d806      	bhi.n	801581e <icmp_send_response+0x3a>
 8015810:	4b26      	ldr	r3, [pc, #152]	@ (80158ac <icmp_send_response+0xc8>)
 8015812:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8015816:	4926      	ldr	r1, [pc, #152]	@ (80158b0 <icmp_send_response+0xcc>)
 8015818:	4826      	ldr	r0, [pc, #152]	@ (80158b4 <icmp_send_response+0xd0>)
 801581a:	f002 f9d7 	bl	8017bcc <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801581e:	687b      	ldr	r3, [r7, #4]
 8015820:	685b      	ldr	r3, [r3, #4]
 8015822:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8015824:	69fb      	ldr	r3, [r7, #28]
 8015826:	685b      	ldr	r3, [r3, #4]
 8015828:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801582a:	697b      	ldr	r3, [r7, #20]
 801582c:	78fa      	ldrb	r2, [r7, #3]
 801582e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8015830:	697b      	ldr	r3, [r7, #20]
 8015832:	78ba      	ldrb	r2, [r7, #2]
 8015834:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8015836:	697b      	ldr	r3, [r7, #20]
 8015838:	2200      	movs	r2, #0
 801583a:	711a      	strb	r2, [r3, #4]
 801583c:	2200      	movs	r2, #0
 801583e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8015840:	697b      	ldr	r3, [r7, #20]
 8015842:	2200      	movs	r2, #0
 8015844:	719a      	strb	r2, [r3, #6]
 8015846:	2200      	movs	r2, #0
 8015848:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801584a:	69fb      	ldr	r3, [r7, #28]
 801584c:	685b      	ldr	r3, [r3, #4]
 801584e:	f103 0008 	add.w	r0, r3, #8
 8015852:	687b      	ldr	r3, [r7, #4]
 8015854:	685b      	ldr	r3, [r3, #4]
 8015856:	221c      	movs	r2, #28
 8015858:	4619      	mov	r1, r3
 801585a:	f002 fb0e 	bl	8017e7a <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801585e:	69bb      	ldr	r3, [r7, #24]
 8015860:	68db      	ldr	r3, [r3, #12]
 8015862:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8015864:	f107 030c 	add.w	r3, r7, #12
 8015868:	4618      	mov	r0, r3
 801586a:	f000 f825 	bl	80158b8 <ip4_route>
 801586e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8015870:	693b      	ldr	r3, [r7, #16]
 8015872:	2b00      	cmp	r3, #0
 8015874:	d011      	beq.n	801589a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8015876:	697b      	ldr	r3, [r7, #20]
 8015878:	2200      	movs	r2, #0
 801587a:	709a      	strb	r2, [r3, #2]
 801587c:	2200      	movs	r2, #0
 801587e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8015880:	f107 020c 	add.w	r2, r7, #12
 8015884:	693b      	ldr	r3, [r7, #16]
 8015886:	9302      	str	r3, [sp, #8]
 8015888:	2301      	movs	r3, #1
 801588a:	9301      	str	r3, [sp, #4]
 801588c:	2300      	movs	r3, #0
 801588e:	9300      	str	r3, [sp, #0]
 8015890:	23ff      	movs	r3, #255	@ 0xff
 8015892:	2100      	movs	r1, #0
 8015894:	69f8      	ldr	r0, [r7, #28]
 8015896:	f000 f9cd 	bl	8015c34 <ip4_output_if>
  }
  pbuf_free(q);
 801589a:	69f8      	ldr	r0, [r7, #28]
 801589c:	f7f8 fb4c 	bl	800df38 <pbuf_free>
 80158a0:	e000      	b.n	80158a4 <icmp_send_response+0xc0>
    return;
 80158a2:	bf00      	nop
}
 80158a4:	3720      	adds	r7, #32
 80158a6:	46bd      	mov	sp, r7
 80158a8:	bd80      	pop	{r7, pc}
 80158aa:	bf00      	nop
 80158ac:	08022ea4 	.word	0x08022ea4
 80158b0:	08022f70 	.word	0x08022f70
 80158b4:	08022f14 	.word	0x08022f14

080158b8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80158b8:	b480      	push	{r7}
 80158ba:	b085      	sub	sp, #20
 80158bc:	af00      	add	r7, sp, #0
 80158be:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80158c0:	4b33      	ldr	r3, [pc, #204]	@ (8015990 <ip4_route+0xd8>)
 80158c2:	681b      	ldr	r3, [r3, #0]
 80158c4:	60fb      	str	r3, [r7, #12]
 80158c6:	e036      	b.n	8015936 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80158c8:	68fb      	ldr	r3, [r7, #12]
 80158ca:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80158ce:	f003 0301 	and.w	r3, r3, #1
 80158d2:	b2db      	uxtb	r3, r3
 80158d4:	2b00      	cmp	r3, #0
 80158d6:	d02b      	beq.n	8015930 <ip4_route+0x78>
 80158d8:	68fb      	ldr	r3, [r7, #12]
 80158da:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80158de:	089b      	lsrs	r3, r3, #2
 80158e0:	f003 0301 	and.w	r3, r3, #1
 80158e4:	b2db      	uxtb	r3, r3
 80158e6:	2b00      	cmp	r3, #0
 80158e8:	d022      	beq.n	8015930 <ip4_route+0x78>
 80158ea:	68fb      	ldr	r3, [r7, #12]
 80158ec:	3304      	adds	r3, #4
 80158ee:	681b      	ldr	r3, [r3, #0]
 80158f0:	2b00      	cmp	r3, #0
 80158f2:	d01d      	beq.n	8015930 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80158f4:	687b      	ldr	r3, [r7, #4]
 80158f6:	681a      	ldr	r2, [r3, #0]
 80158f8:	68fb      	ldr	r3, [r7, #12]
 80158fa:	3304      	adds	r3, #4
 80158fc:	681b      	ldr	r3, [r3, #0]
 80158fe:	405a      	eors	r2, r3
 8015900:	68fb      	ldr	r3, [r7, #12]
 8015902:	3308      	adds	r3, #8
 8015904:	681b      	ldr	r3, [r3, #0]
 8015906:	4013      	ands	r3, r2
 8015908:	2b00      	cmp	r3, #0
 801590a:	d101      	bne.n	8015910 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801590c:	68fb      	ldr	r3, [r7, #12]
 801590e:	e038      	b.n	8015982 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8015910:	68fb      	ldr	r3, [r7, #12]
 8015912:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8015916:	f003 0302 	and.w	r3, r3, #2
 801591a:	2b00      	cmp	r3, #0
 801591c:	d108      	bne.n	8015930 <ip4_route+0x78>
 801591e:	687b      	ldr	r3, [r7, #4]
 8015920:	681a      	ldr	r2, [r3, #0]
 8015922:	68fb      	ldr	r3, [r7, #12]
 8015924:	330c      	adds	r3, #12
 8015926:	681b      	ldr	r3, [r3, #0]
 8015928:	429a      	cmp	r2, r3
 801592a:	d101      	bne.n	8015930 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801592c:	68fb      	ldr	r3, [r7, #12]
 801592e:	e028      	b.n	8015982 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8015930:	68fb      	ldr	r3, [r7, #12]
 8015932:	681b      	ldr	r3, [r3, #0]
 8015934:	60fb      	str	r3, [r7, #12]
 8015936:	68fb      	ldr	r3, [r7, #12]
 8015938:	2b00      	cmp	r3, #0
 801593a:	d1c5      	bne.n	80158c8 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801593c:	4b15      	ldr	r3, [pc, #84]	@ (8015994 <ip4_route+0xdc>)
 801593e:	681b      	ldr	r3, [r3, #0]
 8015940:	2b00      	cmp	r3, #0
 8015942:	d01a      	beq.n	801597a <ip4_route+0xc2>
 8015944:	4b13      	ldr	r3, [pc, #76]	@ (8015994 <ip4_route+0xdc>)
 8015946:	681b      	ldr	r3, [r3, #0]
 8015948:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801594c:	f003 0301 	and.w	r3, r3, #1
 8015950:	2b00      	cmp	r3, #0
 8015952:	d012      	beq.n	801597a <ip4_route+0xc2>
 8015954:	4b0f      	ldr	r3, [pc, #60]	@ (8015994 <ip4_route+0xdc>)
 8015956:	681b      	ldr	r3, [r3, #0]
 8015958:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801595c:	f003 0304 	and.w	r3, r3, #4
 8015960:	2b00      	cmp	r3, #0
 8015962:	d00a      	beq.n	801597a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8015964:	4b0b      	ldr	r3, [pc, #44]	@ (8015994 <ip4_route+0xdc>)
 8015966:	681b      	ldr	r3, [r3, #0]
 8015968:	3304      	adds	r3, #4
 801596a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801596c:	2b00      	cmp	r3, #0
 801596e:	d004      	beq.n	801597a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8015970:	687b      	ldr	r3, [r7, #4]
 8015972:	681b      	ldr	r3, [r3, #0]
 8015974:	b2db      	uxtb	r3, r3
 8015976:	2b7f      	cmp	r3, #127	@ 0x7f
 8015978:	d101      	bne.n	801597e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801597a:	2300      	movs	r3, #0
 801597c:	e001      	b.n	8015982 <ip4_route+0xca>
  }

  return netif_default;
 801597e:	4b05      	ldr	r3, [pc, #20]	@ (8015994 <ip4_route+0xdc>)
 8015980:	681b      	ldr	r3, [r3, #0]
}
 8015982:	4618      	mov	r0, r3
 8015984:	3714      	adds	r7, #20
 8015986:	46bd      	mov	sp, r7
 8015988:	f85d 7b04 	ldr.w	r7, [sp], #4
 801598c:	4770      	bx	lr
 801598e:	bf00      	nop
 8015990:	20015240 	.word	0x20015240
 8015994:	20015244 	.word	0x20015244

08015998 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8015998:	b580      	push	{r7, lr}
 801599a:	b082      	sub	sp, #8
 801599c:	af00      	add	r7, sp, #0
 801599e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80159a0:	687b      	ldr	r3, [r7, #4]
 80159a2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80159a6:	f003 0301 	and.w	r3, r3, #1
 80159aa:	b2db      	uxtb	r3, r3
 80159ac:	2b00      	cmp	r3, #0
 80159ae:	d016      	beq.n	80159de <ip4_input_accept+0x46>
 80159b0:	687b      	ldr	r3, [r7, #4]
 80159b2:	3304      	adds	r3, #4
 80159b4:	681b      	ldr	r3, [r3, #0]
 80159b6:	2b00      	cmp	r3, #0
 80159b8:	d011      	beq.n	80159de <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80159ba:	4b0b      	ldr	r3, [pc, #44]	@ (80159e8 <ip4_input_accept+0x50>)
 80159bc:	695a      	ldr	r2, [r3, #20]
 80159be:	687b      	ldr	r3, [r7, #4]
 80159c0:	3304      	adds	r3, #4
 80159c2:	681b      	ldr	r3, [r3, #0]
 80159c4:	429a      	cmp	r2, r3
 80159c6:	d008      	beq.n	80159da <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80159c8:	4b07      	ldr	r3, [pc, #28]	@ (80159e8 <ip4_input_accept+0x50>)
 80159ca:	695b      	ldr	r3, [r3, #20]
 80159cc:	6879      	ldr	r1, [r7, #4]
 80159ce:	4618      	mov	r0, r3
 80159d0:	f000 fa08 	bl	8015de4 <ip4_addr_isbroadcast_u32>
 80159d4:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80159d6:	2b00      	cmp	r3, #0
 80159d8:	d001      	beq.n	80159de <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80159da:	2301      	movs	r3, #1
 80159dc:	e000      	b.n	80159e0 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80159de:	2300      	movs	r3, #0
}
 80159e0:	4618      	mov	r0, r3
 80159e2:	3708      	adds	r7, #8
 80159e4:	46bd      	mov	sp, r7
 80159e6:	bd80      	pop	{r7, pc}
 80159e8:	20011f0c 	.word	0x20011f0c

080159ec <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80159ec:	b580      	push	{r7, lr}
 80159ee:	b086      	sub	sp, #24
 80159f0:	af00      	add	r7, sp, #0
 80159f2:	6078      	str	r0, [r7, #4]
 80159f4:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80159f6:	687b      	ldr	r3, [r7, #4]
 80159f8:	685b      	ldr	r3, [r3, #4]
 80159fa:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 80159fc:	697b      	ldr	r3, [r7, #20]
 80159fe:	781b      	ldrb	r3, [r3, #0]
 8015a00:	091b      	lsrs	r3, r3, #4
 8015a02:	b2db      	uxtb	r3, r3
 8015a04:	2b04      	cmp	r3, #4
 8015a06:	d004      	beq.n	8015a12 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8015a08:	6878      	ldr	r0, [r7, #4]
 8015a0a:	f7f8 fa95 	bl	800df38 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8015a0e:	2300      	movs	r3, #0
 8015a10:	e107      	b.n	8015c22 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8015a12:	697b      	ldr	r3, [r7, #20]
 8015a14:	781b      	ldrb	r3, [r3, #0]
 8015a16:	f003 030f 	and.w	r3, r3, #15
 8015a1a:	b2db      	uxtb	r3, r3
 8015a1c:	009b      	lsls	r3, r3, #2
 8015a1e:	b2db      	uxtb	r3, r3
 8015a20:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8015a22:	697b      	ldr	r3, [r7, #20]
 8015a24:	885b      	ldrh	r3, [r3, #2]
 8015a26:	b29b      	uxth	r3, r3
 8015a28:	4618      	mov	r0, r3
 8015a2a:	f7f6 fc5d 	bl	800c2e8 <lwip_htons>
 8015a2e:	4603      	mov	r3, r0
 8015a30:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8015a32:	687b      	ldr	r3, [r7, #4]
 8015a34:	891b      	ldrh	r3, [r3, #8]
 8015a36:	89ba      	ldrh	r2, [r7, #12]
 8015a38:	429a      	cmp	r2, r3
 8015a3a:	d204      	bcs.n	8015a46 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8015a3c:	89bb      	ldrh	r3, [r7, #12]
 8015a3e:	4619      	mov	r1, r3
 8015a40:	6878      	ldr	r0, [r7, #4]
 8015a42:	f7f8 f8f3 	bl	800dc2c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8015a46:	687b      	ldr	r3, [r7, #4]
 8015a48:	895b      	ldrh	r3, [r3, #10]
 8015a4a:	89fa      	ldrh	r2, [r7, #14]
 8015a4c:	429a      	cmp	r2, r3
 8015a4e:	d807      	bhi.n	8015a60 <ip4_input+0x74>
 8015a50:	687b      	ldr	r3, [r7, #4]
 8015a52:	891b      	ldrh	r3, [r3, #8]
 8015a54:	89ba      	ldrh	r2, [r7, #12]
 8015a56:	429a      	cmp	r2, r3
 8015a58:	d802      	bhi.n	8015a60 <ip4_input+0x74>
 8015a5a:	89fb      	ldrh	r3, [r7, #14]
 8015a5c:	2b13      	cmp	r3, #19
 8015a5e:	d804      	bhi.n	8015a6a <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8015a60:	6878      	ldr	r0, [r7, #4]
 8015a62:	f7f8 fa69 	bl	800df38 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8015a66:	2300      	movs	r3, #0
 8015a68:	e0db      	b.n	8015c22 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8015a6a:	697b      	ldr	r3, [r7, #20]
 8015a6c:	691b      	ldr	r3, [r3, #16]
 8015a6e:	4a6f      	ldr	r2, [pc, #444]	@ (8015c2c <ip4_input+0x240>)
 8015a70:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8015a72:	697b      	ldr	r3, [r7, #20]
 8015a74:	68db      	ldr	r3, [r3, #12]
 8015a76:	4a6d      	ldr	r2, [pc, #436]	@ (8015c2c <ip4_input+0x240>)
 8015a78:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015a7a:	4b6c      	ldr	r3, [pc, #432]	@ (8015c2c <ip4_input+0x240>)
 8015a7c:	695b      	ldr	r3, [r3, #20]
 8015a7e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8015a82:	2be0      	cmp	r3, #224	@ 0xe0
 8015a84:	d112      	bne.n	8015aac <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8015a86:	683b      	ldr	r3, [r7, #0]
 8015a88:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8015a8c:	f003 0301 	and.w	r3, r3, #1
 8015a90:	b2db      	uxtb	r3, r3
 8015a92:	2b00      	cmp	r3, #0
 8015a94:	d007      	beq.n	8015aa6 <ip4_input+0xba>
 8015a96:	683b      	ldr	r3, [r7, #0]
 8015a98:	3304      	adds	r3, #4
 8015a9a:	681b      	ldr	r3, [r3, #0]
 8015a9c:	2b00      	cmp	r3, #0
 8015a9e:	d002      	beq.n	8015aa6 <ip4_input+0xba>
      netif = inp;
 8015aa0:	683b      	ldr	r3, [r7, #0]
 8015aa2:	613b      	str	r3, [r7, #16]
 8015aa4:	e02a      	b.n	8015afc <ip4_input+0x110>
    } else {
      netif = NULL;
 8015aa6:	2300      	movs	r3, #0
 8015aa8:	613b      	str	r3, [r7, #16]
 8015aaa:	e027      	b.n	8015afc <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8015aac:	6838      	ldr	r0, [r7, #0]
 8015aae:	f7ff ff73 	bl	8015998 <ip4_input_accept>
 8015ab2:	4603      	mov	r3, r0
 8015ab4:	2b00      	cmp	r3, #0
 8015ab6:	d002      	beq.n	8015abe <ip4_input+0xd2>
      netif = inp;
 8015ab8:	683b      	ldr	r3, [r7, #0]
 8015aba:	613b      	str	r3, [r7, #16]
 8015abc:	e01e      	b.n	8015afc <ip4_input+0x110>
    } else {
      netif = NULL;
 8015abe:	2300      	movs	r3, #0
 8015ac0:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8015ac2:	4b5a      	ldr	r3, [pc, #360]	@ (8015c2c <ip4_input+0x240>)
 8015ac4:	695b      	ldr	r3, [r3, #20]
 8015ac6:	b2db      	uxtb	r3, r3
 8015ac8:	2b7f      	cmp	r3, #127	@ 0x7f
 8015aca:	d017      	beq.n	8015afc <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8015acc:	4b58      	ldr	r3, [pc, #352]	@ (8015c30 <ip4_input+0x244>)
 8015ace:	681b      	ldr	r3, [r3, #0]
 8015ad0:	613b      	str	r3, [r7, #16]
 8015ad2:	e00e      	b.n	8015af2 <ip4_input+0x106>
          if (netif == inp) {
 8015ad4:	693a      	ldr	r2, [r7, #16]
 8015ad6:	683b      	ldr	r3, [r7, #0]
 8015ad8:	429a      	cmp	r2, r3
 8015ada:	d006      	beq.n	8015aea <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8015adc:	6938      	ldr	r0, [r7, #16]
 8015ade:	f7ff ff5b 	bl	8015998 <ip4_input_accept>
 8015ae2:	4603      	mov	r3, r0
 8015ae4:	2b00      	cmp	r3, #0
 8015ae6:	d108      	bne.n	8015afa <ip4_input+0x10e>
 8015ae8:	e000      	b.n	8015aec <ip4_input+0x100>
            continue;
 8015aea:	bf00      	nop
        NETIF_FOREACH(netif) {
 8015aec:	693b      	ldr	r3, [r7, #16]
 8015aee:	681b      	ldr	r3, [r3, #0]
 8015af0:	613b      	str	r3, [r7, #16]
 8015af2:	693b      	ldr	r3, [r7, #16]
 8015af4:	2b00      	cmp	r3, #0
 8015af6:	d1ed      	bne.n	8015ad4 <ip4_input+0xe8>
 8015af8:	e000      	b.n	8015afc <ip4_input+0x110>
            break;
 8015afa:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015afc:	4b4b      	ldr	r3, [pc, #300]	@ (8015c2c <ip4_input+0x240>)
 8015afe:	691b      	ldr	r3, [r3, #16]
 8015b00:	6839      	ldr	r1, [r7, #0]
 8015b02:	4618      	mov	r0, r3
 8015b04:	f000 f96e 	bl	8015de4 <ip4_addr_isbroadcast_u32>
 8015b08:	4603      	mov	r3, r0
 8015b0a:	2b00      	cmp	r3, #0
 8015b0c:	d105      	bne.n	8015b1a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8015b0e:	4b47      	ldr	r3, [pc, #284]	@ (8015c2c <ip4_input+0x240>)
 8015b10:	691b      	ldr	r3, [r3, #16]
 8015b12:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015b16:	2be0      	cmp	r3, #224	@ 0xe0
 8015b18:	d104      	bne.n	8015b24 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8015b1a:	6878      	ldr	r0, [r7, #4]
 8015b1c:	f7f8 fa0c 	bl	800df38 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8015b20:	2300      	movs	r3, #0
 8015b22:	e07e      	b.n	8015c22 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8015b24:	693b      	ldr	r3, [r7, #16]
 8015b26:	2b00      	cmp	r3, #0
 8015b28:	d104      	bne.n	8015b34 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8015b2a:	6878      	ldr	r0, [r7, #4]
 8015b2c:	f7f8 fa04 	bl	800df38 <pbuf_free>
    return ERR_OK;
 8015b30:	2300      	movs	r3, #0
 8015b32:	e076      	b.n	8015c22 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8015b34:	697b      	ldr	r3, [r7, #20]
 8015b36:	88db      	ldrh	r3, [r3, #6]
 8015b38:	b29b      	uxth	r3, r3
 8015b3a:	461a      	mov	r2, r3
 8015b3c:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8015b40:	4013      	ands	r3, r2
 8015b42:	2b00      	cmp	r3, #0
 8015b44:	d00b      	beq.n	8015b5e <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8015b46:	6878      	ldr	r0, [r7, #4]
 8015b48:	f000 fc92 	bl	8016470 <ip4_reass>
 8015b4c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8015b4e:	687b      	ldr	r3, [r7, #4]
 8015b50:	2b00      	cmp	r3, #0
 8015b52:	d101      	bne.n	8015b58 <ip4_input+0x16c>
      return ERR_OK;
 8015b54:	2300      	movs	r3, #0
 8015b56:	e064      	b.n	8015c22 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8015b58:	687b      	ldr	r3, [r7, #4]
 8015b5a:	685b      	ldr	r3, [r3, #4]
 8015b5c:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8015b5e:	4a33      	ldr	r2, [pc, #204]	@ (8015c2c <ip4_input+0x240>)
 8015b60:	693b      	ldr	r3, [r7, #16]
 8015b62:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8015b64:	4a31      	ldr	r2, [pc, #196]	@ (8015c2c <ip4_input+0x240>)
 8015b66:	683b      	ldr	r3, [r7, #0]
 8015b68:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8015b6a:	4a30      	ldr	r2, [pc, #192]	@ (8015c2c <ip4_input+0x240>)
 8015b6c:	697b      	ldr	r3, [r7, #20]
 8015b6e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8015b70:	697b      	ldr	r3, [r7, #20]
 8015b72:	781b      	ldrb	r3, [r3, #0]
 8015b74:	f003 030f 	and.w	r3, r3, #15
 8015b78:	b2db      	uxtb	r3, r3
 8015b7a:	009b      	lsls	r3, r3, #2
 8015b7c:	b2db      	uxtb	r3, r3
 8015b7e:	461a      	mov	r2, r3
 8015b80:	4b2a      	ldr	r3, [pc, #168]	@ (8015c2c <ip4_input+0x240>)
 8015b82:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8015b84:	89fb      	ldrh	r3, [r7, #14]
 8015b86:	4619      	mov	r1, r3
 8015b88:	6878      	ldr	r0, [r7, #4]
 8015b8a:	f7f8 f94f 	bl	800de2c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8015b8e:	697b      	ldr	r3, [r7, #20]
 8015b90:	7a5b      	ldrb	r3, [r3, #9]
 8015b92:	2b11      	cmp	r3, #17
 8015b94:	d006      	beq.n	8015ba4 <ip4_input+0x1b8>
 8015b96:	2b11      	cmp	r3, #17
 8015b98:	dc13      	bgt.n	8015bc2 <ip4_input+0x1d6>
 8015b9a:	2b01      	cmp	r3, #1
 8015b9c:	d00c      	beq.n	8015bb8 <ip4_input+0x1cc>
 8015b9e:	2b06      	cmp	r3, #6
 8015ba0:	d005      	beq.n	8015bae <ip4_input+0x1c2>
 8015ba2:	e00e      	b.n	8015bc2 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8015ba4:	6839      	ldr	r1, [r7, #0]
 8015ba6:	6878      	ldr	r0, [r7, #4]
 8015ba8:	f7fe f90e 	bl	8013dc8 <udp_input>
        break;
 8015bac:	e026      	b.n	8015bfc <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8015bae:	6839      	ldr	r1, [r7, #0]
 8015bb0:	6878      	ldr	r0, [r7, #4]
 8015bb2:	f7fa f955 	bl	800fe60 <tcp_input>
        break;
 8015bb6:	e021      	b.n	8015bfc <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8015bb8:	6839      	ldr	r1, [r7, #0]
 8015bba:	6878      	ldr	r0, [r7, #4]
 8015bbc:	f7ff fcee 	bl	801559c <icmp_input>
        break;
 8015bc0:	e01c      	b.n	8015bfc <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015bc2:	4b1a      	ldr	r3, [pc, #104]	@ (8015c2c <ip4_input+0x240>)
 8015bc4:	695b      	ldr	r3, [r3, #20]
 8015bc6:	6939      	ldr	r1, [r7, #16]
 8015bc8:	4618      	mov	r0, r3
 8015bca:	f000 f90b 	bl	8015de4 <ip4_addr_isbroadcast_u32>
 8015bce:	4603      	mov	r3, r0
 8015bd0:	2b00      	cmp	r3, #0
 8015bd2:	d10f      	bne.n	8015bf4 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015bd4:	4b15      	ldr	r3, [pc, #84]	@ (8015c2c <ip4_input+0x240>)
 8015bd6:	695b      	ldr	r3, [r3, #20]
 8015bd8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015bdc:	2be0      	cmp	r3, #224	@ 0xe0
 8015bde:	d009      	beq.n	8015bf4 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8015be0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8015be4:	4619      	mov	r1, r3
 8015be6:	6878      	ldr	r0, [r7, #4]
 8015be8:	f7f8 f993 	bl	800df12 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8015bec:	2102      	movs	r1, #2
 8015bee:	6878      	ldr	r0, [r7, #4]
 8015bf0:	f7ff fdd8 	bl	80157a4 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8015bf4:	6878      	ldr	r0, [r7, #4]
 8015bf6:	f7f8 f99f 	bl	800df38 <pbuf_free>
        break;
 8015bfa:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8015bfc:	4b0b      	ldr	r3, [pc, #44]	@ (8015c2c <ip4_input+0x240>)
 8015bfe:	2200      	movs	r2, #0
 8015c00:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8015c02:	4b0a      	ldr	r3, [pc, #40]	@ (8015c2c <ip4_input+0x240>)
 8015c04:	2200      	movs	r2, #0
 8015c06:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8015c08:	4b08      	ldr	r3, [pc, #32]	@ (8015c2c <ip4_input+0x240>)
 8015c0a:	2200      	movs	r2, #0
 8015c0c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8015c0e:	4b07      	ldr	r3, [pc, #28]	@ (8015c2c <ip4_input+0x240>)
 8015c10:	2200      	movs	r2, #0
 8015c12:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8015c14:	4b05      	ldr	r3, [pc, #20]	@ (8015c2c <ip4_input+0x240>)
 8015c16:	2200      	movs	r2, #0
 8015c18:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8015c1a:	4b04      	ldr	r3, [pc, #16]	@ (8015c2c <ip4_input+0x240>)
 8015c1c:	2200      	movs	r2, #0
 8015c1e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8015c20:	2300      	movs	r3, #0
}
 8015c22:	4618      	mov	r0, r3
 8015c24:	3718      	adds	r7, #24
 8015c26:	46bd      	mov	sp, r7
 8015c28:	bd80      	pop	{r7, pc}
 8015c2a:	bf00      	nop
 8015c2c:	20011f0c 	.word	0x20011f0c
 8015c30:	20015240 	.word	0x20015240

08015c34 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8015c34:	b580      	push	{r7, lr}
 8015c36:	b08a      	sub	sp, #40	@ 0x28
 8015c38:	af04      	add	r7, sp, #16
 8015c3a:	60f8      	str	r0, [r7, #12]
 8015c3c:	60b9      	str	r1, [r7, #8]
 8015c3e:	607a      	str	r2, [r7, #4]
 8015c40:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8015c42:	68bb      	ldr	r3, [r7, #8]
 8015c44:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8015c46:	687b      	ldr	r3, [r7, #4]
 8015c48:	2b00      	cmp	r3, #0
 8015c4a:	d009      	beq.n	8015c60 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8015c4c:	68bb      	ldr	r3, [r7, #8]
 8015c4e:	2b00      	cmp	r3, #0
 8015c50:	d003      	beq.n	8015c5a <ip4_output_if+0x26>
 8015c52:	68bb      	ldr	r3, [r7, #8]
 8015c54:	681b      	ldr	r3, [r3, #0]
 8015c56:	2b00      	cmp	r3, #0
 8015c58:	d102      	bne.n	8015c60 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8015c5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015c5c:	3304      	adds	r3, #4
 8015c5e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8015c60:	78fa      	ldrb	r2, [r7, #3]
 8015c62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015c64:	9302      	str	r3, [sp, #8]
 8015c66:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8015c6a:	9301      	str	r3, [sp, #4]
 8015c6c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015c70:	9300      	str	r3, [sp, #0]
 8015c72:	4613      	mov	r3, r2
 8015c74:	687a      	ldr	r2, [r7, #4]
 8015c76:	6979      	ldr	r1, [r7, #20]
 8015c78:	68f8      	ldr	r0, [r7, #12]
 8015c7a:	f000 f805 	bl	8015c88 <ip4_output_if_src>
 8015c7e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8015c80:	4618      	mov	r0, r3
 8015c82:	3718      	adds	r7, #24
 8015c84:	46bd      	mov	sp, r7
 8015c86:	bd80      	pop	{r7, pc}

08015c88 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8015c88:	b580      	push	{r7, lr}
 8015c8a:	b088      	sub	sp, #32
 8015c8c:	af00      	add	r7, sp, #0
 8015c8e:	60f8      	str	r0, [r7, #12]
 8015c90:	60b9      	str	r1, [r7, #8]
 8015c92:	607a      	str	r2, [r7, #4]
 8015c94:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8015c96:	68fb      	ldr	r3, [r7, #12]
 8015c98:	7b9b      	ldrb	r3, [r3, #14]
 8015c9a:	2b01      	cmp	r3, #1
 8015c9c:	d006      	beq.n	8015cac <ip4_output_if_src+0x24>
 8015c9e:	4b4b      	ldr	r3, [pc, #300]	@ (8015dcc <ip4_output_if_src+0x144>)
 8015ca0:	f44f 7255 	mov.w	r2, #852	@ 0x354
 8015ca4:	494a      	ldr	r1, [pc, #296]	@ (8015dd0 <ip4_output_if_src+0x148>)
 8015ca6:	484b      	ldr	r0, [pc, #300]	@ (8015dd4 <ip4_output_if_src+0x14c>)
 8015ca8:	f001 ff90 	bl	8017bcc <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8015cac:	687b      	ldr	r3, [r7, #4]
 8015cae:	2b00      	cmp	r3, #0
 8015cb0:	d060      	beq.n	8015d74 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8015cb2:	2314      	movs	r3, #20
 8015cb4:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8015cb6:	2114      	movs	r1, #20
 8015cb8:	68f8      	ldr	r0, [r7, #12]
 8015cba:	f7f8 f8a7 	bl	800de0c <pbuf_add_header>
 8015cbe:	4603      	mov	r3, r0
 8015cc0:	2b00      	cmp	r3, #0
 8015cc2:	d002      	beq.n	8015cca <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015cc4:	f06f 0301 	mvn.w	r3, #1
 8015cc8:	e07c      	b.n	8015dc4 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8015cca:	68fb      	ldr	r3, [r7, #12]
 8015ccc:	685b      	ldr	r3, [r3, #4]
 8015cce:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8015cd0:	68fb      	ldr	r3, [r7, #12]
 8015cd2:	895b      	ldrh	r3, [r3, #10]
 8015cd4:	2b13      	cmp	r3, #19
 8015cd6:	d806      	bhi.n	8015ce6 <ip4_output_if_src+0x5e>
 8015cd8:	4b3c      	ldr	r3, [pc, #240]	@ (8015dcc <ip4_output_if_src+0x144>)
 8015cda:	f44f 7262 	mov.w	r2, #904	@ 0x388
 8015cde:	493e      	ldr	r1, [pc, #248]	@ (8015dd8 <ip4_output_if_src+0x150>)
 8015ce0:	483c      	ldr	r0, [pc, #240]	@ (8015dd4 <ip4_output_if_src+0x14c>)
 8015ce2:	f001 ff73 	bl	8017bcc <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8015ce6:	69fb      	ldr	r3, [r7, #28]
 8015ce8:	78fa      	ldrb	r2, [r7, #3]
 8015cea:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8015cec:	69fb      	ldr	r3, [r7, #28]
 8015cee:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8015cf2:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8015cf4:	687b      	ldr	r3, [r7, #4]
 8015cf6:	681a      	ldr	r2, [r3, #0]
 8015cf8:	69fb      	ldr	r3, [r7, #28]
 8015cfa:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8015cfc:	8b7b      	ldrh	r3, [r7, #26]
 8015cfe:	089b      	lsrs	r3, r3, #2
 8015d00:	b29b      	uxth	r3, r3
 8015d02:	b2db      	uxtb	r3, r3
 8015d04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015d08:	b2da      	uxtb	r2, r3
 8015d0a:	69fb      	ldr	r3, [r7, #28]
 8015d0c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8015d0e:	69fb      	ldr	r3, [r7, #28]
 8015d10:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8015d14:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8015d16:	68fb      	ldr	r3, [r7, #12]
 8015d18:	891b      	ldrh	r3, [r3, #8]
 8015d1a:	4618      	mov	r0, r3
 8015d1c:	f7f6 fae4 	bl	800c2e8 <lwip_htons>
 8015d20:	4603      	mov	r3, r0
 8015d22:	461a      	mov	r2, r3
 8015d24:	69fb      	ldr	r3, [r7, #28]
 8015d26:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8015d28:	69fb      	ldr	r3, [r7, #28]
 8015d2a:	2200      	movs	r2, #0
 8015d2c:	719a      	strb	r2, [r3, #6]
 8015d2e:	2200      	movs	r2, #0
 8015d30:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8015d32:	4b2a      	ldr	r3, [pc, #168]	@ (8015ddc <ip4_output_if_src+0x154>)
 8015d34:	881b      	ldrh	r3, [r3, #0]
 8015d36:	4618      	mov	r0, r3
 8015d38:	f7f6 fad6 	bl	800c2e8 <lwip_htons>
 8015d3c:	4603      	mov	r3, r0
 8015d3e:	461a      	mov	r2, r3
 8015d40:	69fb      	ldr	r3, [r7, #28]
 8015d42:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8015d44:	4b25      	ldr	r3, [pc, #148]	@ (8015ddc <ip4_output_if_src+0x154>)
 8015d46:	881b      	ldrh	r3, [r3, #0]
 8015d48:	3301      	adds	r3, #1
 8015d4a:	b29a      	uxth	r2, r3
 8015d4c:	4b23      	ldr	r3, [pc, #140]	@ (8015ddc <ip4_output_if_src+0x154>)
 8015d4e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8015d50:	68bb      	ldr	r3, [r7, #8]
 8015d52:	2b00      	cmp	r3, #0
 8015d54:	d104      	bne.n	8015d60 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8015d56:	4b22      	ldr	r3, [pc, #136]	@ (8015de0 <ip4_output_if_src+0x158>)
 8015d58:	681a      	ldr	r2, [r3, #0]
 8015d5a:	69fb      	ldr	r3, [r7, #28]
 8015d5c:	60da      	str	r2, [r3, #12]
 8015d5e:	e003      	b.n	8015d68 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8015d60:	68bb      	ldr	r3, [r7, #8]
 8015d62:	681a      	ldr	r2, [r3, #0]
 8015d64:	69fb      	ldr	r3, [r7, #28]
 8015d66:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8015d68:	69fb      	ldr	r3, [r7, #28]
 8015d6a:	2200      	movs	r2, #0
 8015d6c:	729a      	strb	r2, [r3, #10]
 8015d6e:	2200      	movs	r2, #0
 8015d70:	72da      	strb	r2, [r3, #11]
 8015d72:	e00f      	b.n	8015d94 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8015d74:	68fb      	ldr	r3, [r7, #12]
 8015d76:	895b      	ldrh	r3, [r3, #10]
 8015d78:	2b13      	cmp	r3, #19
 8015d7a:	d802      	bhi.n	8015d82 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015d7c:	f06f 0301 	mvn.w	r3, #1
 8015d80:	e020      	b.n	8015dc4 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8015d82:	68fb      	ldr	r3, [r7, #12]
 8015d84:	685b      	ldr	r3, [r3, #4]
 8015d86:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8015d88:	69fb      	ldr	r3, [r7, #28]
 8015d8a:	691b      	ldr	r3, [r3, #16]
 8015d8c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8015d8e:	f107 0314 	add.w	r3, r7, #20
 8015d92:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8015d94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015d96:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8015d98:	2b00      	cmp	r3, #0
 8015d9a:	d00c      	beq.n	8015db6 <ip4_output_if_src+0x12e>
 8015d9c:	68fb      	ldr	r3, [r7, #12]
 8015d9e:	891a      	ldrh	r2, [r3, #8]
 8015da0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015da2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8015da4:	429a      	cmp	r2, r3
 8015da6:	d906      	bls.n	8015db6 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8015da8:	687a      	ldr	r2, [r7, #4]
 8015daa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8015dac:	68f8      	ldr	r0, [r7, #12]
 8015dae:	f000 fd53 	bl	8016858 <ip4_frag>
 8015db2:	4603      	mov	r3, r0
 8015db4:	e006      	b.n	8015dc4 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8015db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015db8:	695b      	ldr	r3, [r3, #20]
 8015dba:	687a      	ldr	r2, [r7, #4]
 8015dbc:	68f9      	ldr	r1, [r7, #12]
 8015dbe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015dc0:	4798      	blx	r3
 8015dc2:	4603      	mov	r3, r0
}
 8015dc4:	4618      	mov	r0, r3
 8015dc6:	3720      	adds	r7, #32
 8015dc8:	46bd      	mov	sp, r7
 8015dca:	bd80      	pop	{r7, pc}
 8015dcc:	08022f9c 	.word	0x08022f9c
 8015dd0:	08022fd0 	.word	0x08022fd0
 8015dd4:	08022fdc 	.word	0x08022fdc
 8015dd8:	08023004 	.word	0x08023004
 8015ddc:	2001539e 	.word	0x2001539e
 8015de0:	080233ec 	.word	0x080233ec

08015de4 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8015de4:	b480      	push	{r7}
 8015de6:	b085      	sub	sp, #20
 8015de8:	af00      	add	r7, sp, #0
 8015dea:	6078      	str	r0, [r7, #4]
 8015dec:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8015dee:	687b      	ldr	r3, [r7, #4]
 8015df0:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8015df2:	687b      	ldr	r3, [r7, #4]
 8015df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015df8:	d002      	beq.n	8015e00 <ip4_addr_isbroadcast_u32+0x1c>
 8015dfa:	687b      	ldr	r3, [r7, #4]
 8015dfc:	2b00      	cmp	r3, #0
 8015dfe:	d101      	bne.n	8015e04 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8015e00:	2301      	movs	r3, #1
 8015e02:	e02a      	b.n	8015e5a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8015e04:	683b      	ldr	r3, [r7, #0]
 8015e06:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8015e0a:	f003 0302 	and.w	r3, r3, #2
 8015e0e:	2b00      	cmp	r3, #0
 8015e10:	d101      	bne.n	8015e16 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8015e12:	2300      	movs	r3, #0
 8015e14:	e021      	b.n	8015e5a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8015e16:	683b      	ldr	r3, [r7, #0]
 8015e18:	3304      	adds	r3, #4
 8015e1a:	681b      	ldr	r3, [r3, #0]
 8015e1c:	687a      	ldr	r2, [r7, #4]
 8015e1e:	429a      	cmp	r2, r3
 8015e20:	d101      	bne.n	8015e26 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8015e22:	2300      	movs	r3, #0
 8015e24:	e019      	b.n	8015e5a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8015e26:	68fa      	ldr	r2, [r7, #12]
 8015e28:	683b      	ldr	r3, [r7, #0]
 8015e2a:	3304      	adds	r3, #4
 8015e2c:	681b      	ldr	r3, [r3, #0]
 8015e2e:	405a      	eors	r2, r3
 8015e30:	683b      	ldr	r3, [r7, #0]
 8015e32:	3308      	adds	r3, #8
 8015e34:	681b      	ldr	r3, [r3, #0]
 8015e36:	4013      	ands	r3, r2
 8015e38:	2b00      	cmp	r3, #0
 8015e3a:	d10d      	bne.n	8015e58 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015e3c:	683b      	ldr	r3, [r7, #0]
 8015e3e:	3308      	adds	r3, #8
 8015e40:	681b      	ldr	r3, [r3, #0]
 8015e42:	43da      	mvns	r2, r3
 8015e44:	687b      	ldr	r3, [r7, #4]
 8015e46:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8015e48:	683b      	ldr	r3, [r7, #0]
 8015e4a:	3308      	adds	r3, #8
 8015e4c:	681b      	ldr	r3, [r3, #0]
 8015e4e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015e50:	429a      	cmp	r2, r3
 8015e52:	d101      	bne.n	8015e58 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8015e54:	2301      	movs	r3, #1
 8015e56:	e000      	b.n	8015e5a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8015e58:	2300      	movs	r3, #0
  }
}
 8015e5a:	4618      	mov	r0, r3
 8015e5c:	3714      	adds	r7, #20
 8015e5e:	46bd      	mov	sp, r7
 8015e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e64:	4770      	bx	lr
	...

08015e68 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8015e68:	b580      	push	{r7, lr}
 8015e6a:	b084      	sub	sp, #16
 8015e6c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8015e6e:	2300      	movs	r3, #0
 8015e70:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8015e72:	4b12      	ldr	r3, [pc, #72]	@ (8015ebc <ip_reass_tmr+0x54>)
 8015e74:	681b      	ldr	r3, [r3, #0]
 8015e76:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8015e78:	e018      	b.n	8015eac <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8015e7a:	68fb      	ldr	r3, [r7, #12]
 8015e7c:	7fdb      	ldrb	r3, [r3, #31]
 8015e7e:	2b00      	cmp	r3, #0
 8015e80:	d00b      	beq.n	8015e9a <ip_reass_tmr+0x32>
      r->timer--;
 8015e82:	68fb      	ldr	r3, [r7, #12]
 8015e84:	7fdb      	ldrb	r3, [r3, #31]
 8015e86:	3b01      	subs	r3, #1
 8015e88:	b2da      	uxtb	r2, r3
 8015e8a:	68fb      	ldr	r3, [r7, #12]
 8015e8c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8015e8e:	68fb      	ldr	r3, [r7, #12]
 8015e90:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8015e92:	68fb      	ldr	r3, [r7, #12]
 8015e94:	681b      	ldr	r3, [r3, #0]
 8015e96:	60fb      	str	r3, [r7, #12]
 8015e98:	e008      	b.n	8015eac <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8015e9a:	68fb      	ldr	r3, [r7, #12]
 8015e9c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8015e9e:	68fb      	ldr	r3, [r7, #12]
 8015ea0:	681b      	ldr	r3, [r3, #0]
 8015ea2:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8015ea4:	68b9      	ldr	r1, [r7, #8]
 8015ea6:	6878      	ldr	r0, [r7, #4]
 8015ea8:	f000 f80a 	bl	8015ec0 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8015eac:	68fb      	ldr	r3, [r7, #12]
 8015eae:	2b00      	cmp	r3, #0
 8015eb0:	d1e3      	bne.n	8015e7a <ip_reass_tmr+0x12>
    }
  }
}
 8015eb2:	bf00      	nop
 8015eb4:	bf00      	nop
 8015eb6:	3710      	adds	r7, #16
 8015eb8:	46bd      	mov	sp, r7
 8015eba:	bd80      	pop	{r7, pc}
 8015ebc:	200153a0 	.word	0x200153a0

08015ec0 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015ec0:	b580      	push	{r7, lr}
 8015ec2:	b088      	sub	sp, #32
 8015ec4:	af00      	add	r7, sp, #0
 8015ec6:	6078      	str	r0, [r7, #4]
 8015ec8:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8015eca:	2300      	movs	r3, #0
 8015ecc:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8015ece:	683a      	ldr	r2, [r7, #0]
 8015ed0:	687b      	ldr	r3, [r7, #4]
 8015ed2:	429a      	cmp	r2, r3
 8015ed4:	d105      	bne.n	8015ee2 <ip_reass_free_complete_datagram+0x22>
 8015ed6:	4b45      	ldr	r3, [pc, #276]	@ (8015fec <ip_reass_free_complete_datagram+0x12c>)
 8015ed8:	22ab      	movs	r2, #171	@ 0xab
 8015eda:	4945      	ldr	r1, [pc, #276]	@ (8015ff0 <ip_reass_free_complete_datagram+0x130>)
 8015edc:	4845      	ldr	r0, [pc, #276]	@ (8015ff4 <ip_reass_free_complete_datagram+0x134>)
 8015ede:	f001 fe75 	bl	8017bcc <iprintf>
  if (prev != NULL) {
 8015ee2:	683b      	ldr	r3, [r7, #0]
 8015ee4:	2b00      	cmp	r3, #0
 8015ee6:	d00a      	beq.n	8015efe <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8015ee8:	683b      	ldr	r3, [r7, #0]
 8015eea:	681b      	ldr	r3, [r3, #0]
 8015eec:	687a      	ldr	r2, [r7, #4]
 8015eee:	429a      	cmp	r2, r3
 8015ef0:	d005      	beq.n	8015efe <ip_reass_free_complete_datagram+0x3e>
 8015ef2:	4b3e      	ldr	r3, [pc, #248]	@ (8015fec <ip_reass_free_complete_datagram+0x12c>)
 8015ef4:	22ad      	movs	r2, #173	@ 0xad
 8015ef6:	4940      	ldr	r1, [pc, #256]	@ (8015ff8 <ip_reass_free_complete_datagram+0x138>)
 8015ef8:	483e      	ldr	r0, [pc, #248]	@ (8015ff4 <ip_reass_free_complete_datagram+0x134>)
 8015efa:	f001 fe67 	bl	8017bcc <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8015efe:	687b      	ldr	r3, [r7, #4]
 8015f00:	685b      	ldr	r3, [r3, #4]
 8015f02:	685b      	ldr	r3, [r3, #4]
 8015f04:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8015f06:	697b      	ldr	r3, [r7, #20]
 8015f08:	889b      	ldrh	r3, [r3, #4]
 8015f0a:	b29b      	uxth	r3, r3
 8015f0c:	2b00      	cmp	r3, #0
 8015f0e:	d12a      	bne.n	8015f66 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8015f10:	687b      	ldr	r3, [r7, #4]
 8015f12:	685b      	ldr	r3, [r3, #4]
 8015f14:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8015f16:	697b      	ldr	r3, [r7, #20]
 8015f18:	681a      	ldr	r2, [r3, #0]
 8015f1a:	687b      	ldr	r3, [r7, #4]
 8015f1c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8015f1e:	69bb      	ldr	r3, [r7, #24]
 8015f20:	6858      	ldr	r0, [r3, #4]
 8015f22:	687b      	ldr	r3, [r7, #4]
 8015f24:	3308      	adds	r3, #8
 8015f26:	2214      	movs	r2, #20
 8015f28:	4619      	mov	r1, r3
 8015f2a:	f001 ffa6 	bl	8017e7a <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8015f2e:	2101      	movs	r1, #1
 8015f30:	69b8      	ldr	r0, [r7, #24]
 8015f32:	f7ff fc47 	bl	80157c4 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8015f36:	69b8      	ldr	r0, [r7, #24]
 8015f38:	f7f8 f886 	bl	800e048 <pbuf_clen>
 8015f3c:	4603      	mov	r3, r0
 8015f3e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015f40:	8bfa      	ldrh	r2, [r7, #30]
 8015f42:	8a7b      	ldrh	r3, [r7, #18]
 8015f44:	4413      	add	r3, r2
 8015f46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015f4a:	db05      	blt.n	8015f58 <ip_reass_free_complete_datagram+0x98>
 8015f4c:	4b27      	ldr	r3, [pc, #156]	@ (8015fec <ip_reass_free_complete_datagram+0x12c>)
 8015f4e:	22bc      	movs	r2, #188	@ 0xbc
 8015f50:	492a      	ldr	r1, [pc, #168]	@ (8015ffc <ip_reass_free_complete_datagram+0x13c>)
 8015f52:	4828      	ldr	r0, [pc, #160]	@ (8015ff4 <ip_reass_free_complete_datagram+0x134>)
 8015f54:	f001 fe3a 	bl	8017bcc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8015f58:	8bfa      	ldrh	r2, [r7, #30]
 8015f5a:	8a7b      	ldrh	r3, [r7, #18]
 8015f5c:	4413      	add	r3, r2
 8015f5e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8015f60:	69b8      	ldr	r0, [r7, #24]
 8015f62:	f7f7 ffe9 	bl	800df38 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8015f66:	687b      	ldr	r3, [r7, #4]
 8015f68:	685b      	ldr	r3, [r3, #4]
 8015f6a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8015f6c:	e01f      	b.n	8015fae <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8015f6e:	69bb      	ldr	r3, [r7, #24]
 8015f70:	685b      	ldr	r3, [r3, #4]
 8015f72:	617b      	str	r3, [r7, #20]
    pcur = p;
 8015f74:	69bb      	ldr	r3, [r7, #24]
 8015f76:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8015f78:	697b      	ldr	r3, [r7, #20]
 8015f7a:	681b      	ldr	r3, [r3, #0]
 8015f7c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8015f7e:	68f8      	ldr	r0, [r7, #12]
 8015f80:	f7f8 f862 	bl	800e048 <pbuf_clen>
 8015f84:	4603      	mov	r3, r0
 8015f86:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015f88:	8bfa      	ldrh	r2, [r7, #30]
 8015f8a:	8a7b      	ldrh	r3, [r7, #18]
 8015f8c:	4413      	add	r3, r2
 8015f8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015f92:	db05      	blt.n	8015fa0 <ip_reass_free_complete_datagram+0xe0>
 8015f94:	4b15      	ldr	r3, [pc, #84]	@ (8015fec <ip_reass_free_complete_datagram+0x12c>)
 8015f96:	22cc      	movs	r2, #204	@ 0xcc
 8015f98:	4918      	ldr	r1, [pc, #96]	@ (8015ffc <ip_reass_free_complete_datagram+0x13c>)
 8015f9a:	4816      	ldr	r0, [pc, #88]	@ (8015ff4 <ip_reass_free_complete_datagram+0x134>)
 8015f9c:	f001 fe16 	bl	8017bcc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8015fa0:	8bfa      	ldrh	r2, [r7, #30]
 8015fa2:	8a7b      	ldrh	r3, [r7, #18]
 8015fa4:	4413      	add	r3, r2
 8015fa6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8015fa8:	68f8      	ldr	r0, [r7, #12]
 8015faa:	f7f7 ffc5 	bl	800df38 <pbuf_free>
  while (p != NULL) {
 8015fae:	69bb      	ldr	r3, [r7, #24]
 8015fb0:	2b00      	cmp	r3, #0
 8015fb2:	d1dc      	bne.n	8015f6e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8015fb4:	6839      	ldr	r1, [r7, #0]
 8015fb6:	6878      	ldr	r0, [r7, #4]
 8015fb8:	f000 f8c2 	bl	8016140 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8015fbc:	4b10      	ldr	r3, [pc, #64]	@ (8016000 <ip_reass_free_complete_datagram+0x140>)
 8015fbe:	881b      	ldrh	r3, [r3, #0]
 8015fc0:	8bfa      	ldrh	r2, [r7, #30]
 8015fc2:	429a      	cmp	r2, r3
 8015fc4:	d905      	bls.n	8015fd2 <ip_reass_free_complete_datagram+0x112>
 8015fc6:	4b09      	ldr	r3, [pc, #36]	@ (8015fec <ip_reass_free_complete_datagram+0x12c>)
 8015fc8:	22d2      	movs	r2, #210	@ 0xd2
 8015fca:	490e      	ldr	r1, [pc, #56]	@ (8016004 <ip_reass_free_complete_datagram+0x144>)
 8015fcc:	4809      	ldr	r0, [pc, #36]	@ (8015ff4 <ip_reass_free_complete_datagram+0x134>)
 8015fce:	f001 fdfd 	bl	8017bcc <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8015fd2:	4b0b      	ldr	r3, [pc, #44]	@ (8016000 <ip_reass_free_complete_datagram+0x140>)
 8015fd4:	881a      	ldrh	r2, [r3, #0]
 8015fd6:	8bfb      	ldrh	r3, [r7, #30]
 8015fd8:	1ad3      	subs	r3, r2, r3
 8015fda:	b29a      	uxth	r2, r3
 8015fdc:	4b08      	ldr	r3, [pc, #32]	@ (8016000 <ip_reass_free_complete_datagram+0x140>)
 8015fde:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8015fe0:	8bfb      	ldrh	r3, [r7, #30]
}
 8015fe2:	4618      	mov	r0, r3
 8015fe4:	3720      	adds	r7, #32
 8015fe6:	46bd      	mov	sp, r7
 8015fe8:	bd80      	pop	{r7, pc}
 8015fea:	bf00      	nop
 8015fec:	08023034 	.word	0x08023034
 8015ff0:	08023070 	.word	0x08023070
 8015ff4:	0802307c 	.word	0x0802307c
 8015ff8:	080230a4 	.word	0x080230a4
 8015ffc:	080230b8 	.word	0x080230b8
 8016000:	200153a4 	.word	0x200153a4
 8016004:	080230d8 	.word	0x080230d8

08016008 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8016008:	b580      	push	{r7, lr}
 801600a:	b08a      	sub	sp, #40	@ 0x28
 801600c:	af00      	add	r7, sp, #0
 801600e:	6078      	str	r0, [r7, #4]
 8016010:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8016012:	2300      	movs	r3, #0
 8016014:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8016016:	2300      	movs	r3, #0
 8016018:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801601a:	2300      	movs	r3, #0
 801601c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801601e:	2300      	movs	r3, #0
 8016020:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8016022:	2300      	movs	r3, #0
 8016024:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8016026:	4b28      	ldr	r3, [pc, #160]	@ (80160c8 <ip_reass_remove_oldest_datagram+0xc0>)
 8016028:	681b      	ldr	r3, [r3, #0]
 801602a:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801602c:	e030      	b.n	8016090 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801602e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016030:	695a      	ldr	r2, [r3, #20]
 8016032:	687b      	ldr	r3, [r7, #4]
 8016034:	68db      	ldr	r3, [r3, #12]
 8016036:	429a      	cmp	r2, r3
 8016038:	d10c      	bne.n	8016054 <ip_reass_remove_oldest_datagram+0x4c>
 801603a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801603c:	699a      	ldr	r2, [r3, #24]
 801603e:	687b      	ldr	r3, [r7, #4]
 8016040:	691b      	ldr	r3, [r3, #16]
 8016042:	429a      	cmp	r2, r3
 8016044:	d106      	bne.n	8016054 <ip_reass_remove_oldest_datagram+0x4c>
 8016046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016048:	899a      	ldrh	r2, [r3, #12]
 801604a:	687b      	ldr	r3, [r7, #4]
 801604c:	889b      	ldrh	r3, [r3, #4]
 801604e:	b29b      	uxth	r3, r3
 8016050:	429a      	cmp	r2, r3
 8016052:	d014      	beq.n	801607e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8016054:	693b      	ldr	r3, [r7, #16]
 8016056:	3301      	adds	r3, #1
 8016058:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801605a:	6a3b      	ldr	r3, [r7, #32]
 801605c:	2b00      	cmp	r3, #0
 801605e:	d104      	bne.n	801606a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8016060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016062:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8016064:	69fb      	ldr	r3, [r7, #28]
 8016066:	61bb      	str	r3, [r7, #24]
 8016068:	e009      	b.n	801607e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801606a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801606c:	7fda      	ldrb	r2, [r3, #31]
 801606e:	6a3b      	ldr	r3, [r7, #32]
 8016070:	7fdb      	ldrb	r3, [r3, #31]
 8016072:	429a      	cmp	r2, r3
 8016074:	d803      	bhi.n	801607e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8016076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016078:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801607a:	69fb      	ldr	r3, [r7, #28]
 801607c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801607e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016080:	681b      	ldr	r3, [r3, #0]
 8016082:	2b00      	cmp	r3, #0
 8016084:	d001      	beq.n	801608a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8016086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016088:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801608a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801608c:	681b      	ldr	r3, [r3, #0]
 801608e:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8016090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016092:	2b00      	cmp	r3, #0
 8016094:	d1cb      	bne.n	801602e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8016096:	6a3b      	ldr	r3, [r7, #32]
 8016098:	2b00      	cmp	r3, #0
 801609a:	d008      	beq.n	80160ae <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801609c:	69b9      	ldr	r1, [r7, #24]
 801609e:	6a38      	ldr	r0, [r7, #32]
 80160a0:	f7ff ff0e 	bl	8015ec0 <ip_reass_free_complete_datagram>
 80160a4:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80160a6:	697a      	ldr	r2, [r7, #20]
 80160a8:	68fb      	ldr	r3, [r7, #12]
 80160aa:	4413      	add	r3, r2
 80160ac:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80160ae:	697a      	ldr	r2, [r7, #20]
 80160b0:	683b      	ldr	r3, [r7, #0]
 80160b2:	429a      	cmp	r2, r3
 80160b4:	da02      	bge.n	80160bc <ip_reass_remove_oldest_datagram+0xb4>
 80160b6:	693b      	ldr	r3, [r7, #16]
 80160b8:	2b01      	cmp	r3, #1
 80160ba:	dcac      	bgt.n	8016016 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80160bc:	697b      	ldr	r3, [r7, #20]
}
 80160be:	4618      	mov	r0, r3
 80160c0:	3728      	adds	r7, #40	@ 0x28
 80160c2:	46bd      	mov	sp, r7
 80160c4:	bd80      	pop	{r7, pc}
 80160c6:	bf00      	nop
 80160c8:	200153a0 	.word	0x200153a0

080160cc <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80160cc:	b580      	push	{r7, lr}
 80160ce:	b084      	sub	sp, #16
 80160d0:	af00      	add	r7, sp, #0
 80160d2:	6078      	str	r0, [r7, #4]
 80160d4:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80160d6:	2004      	movs	r0, #4
 80160d8:	f7f7 f848 	bl	800d16c <memp_malloc>
 80160dc:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80160de:	68fb      	ldr	r3, [r7, #12]
 80160e0:	2b00      	cmp	r3, #0
 80160e2:	d110      	bne.n	8016106 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80160e4:	6839      	ldr	r1, [r7, #0]
 80160e6:	6878      	ldr	r0, [r7, #4]
 80160e8:	f7ff ff8e 	bl	8016008 <ip_reass_remove_oldest_datagram>
 80160ec:	4602      	mov	r2, r0
 80160ee:	683b      	ldr	r3, [r7, #0]
 80160f0:	4293      	cmp	r3, r2
 80160f2:	dc03      	bgt.n	80160fc <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80160f4:	2004      	movs	r0, #4
 80160f6:	f7f7 f839 	bl	800d16c <memp_malloc>
 80160fa:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80160fc:	68fb      	ldr	r3, [r7, #12]
 80160fe:	2b00      	cmp	r3, #0
 8016100:	d101      	bne.n	8016106 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8016102:	2300      	movs	r3, #0
 8016104:	e016      	b.n	8016134 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8016106:	2220      	movs	r2, #32
 8016108:	2100      	movs	r1, #0
 801610a:	68f8      	ldr	r0, [r7, #12]
 801610c:	f001 fdff 	bl	8017d0e <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8016110:	68fb      	ldr	r3, [r7, #12]
 8016112:	220f      	movs	r2, #15
 8016114:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8016116:	4b09      	ldr	r3, [pc, #36]	@ (801613c <ip_reass_enqueue_new_datagram+0x70>)
 8016118:	681a      	ldr	r2, [r3, #0]
 801611a:	68fb      	ldr	r3, [r7, #12]
 801611c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801611e:	4a07      	ldr	r2, [pc, #28]	@ (801613c <ip_reass_enqueue_new_datagram+0x70>)
 8016120:	68fb      	ldr	r3, [r7, #12]
 8016122:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8016124:	68fb      	ldr	r3, [r7, #12]
 8016126:	3308      	adds	r3, #8
 8016128:	2214      	movs	r2, #20
 801612a:	6879      	ldr	r1, [r7, #4]
 801612c:	4618      	mov	r0, r3
 801612e:	f001 fea4 	bl	8017e7a <memcpy>
  return ipr;
 8016132:	68fb      	ldr	r3, [r7, #12]
}
 8016134:	4618      	mov	r0, r3
 8016136:	3710      	adds	r7, #16
 8016138:	46bd      	mov	sp, r7
 801613a:	bd80      	pop	{r7, pc}
 801613c:	200153a0 	.word	0x200153a0

08016140 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8016140:	b580      	push	{r7, lr}
 8016142:	b082      	sub	sp, #8
 8016144:	af00      	add	r7, sp, #0
 8016146:	6078      	str	r0, [r7, #4]
 8016148:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801614a:	4b10      	ldr	r3, [pc, #64]	@ (801618c <ip_reass_dequeue_datagram+0x4c>)
 801614c:	681b      	ldr	r3, [r3, #0]
 801614e:	687a      	ldr	r2, [r7, #4]
 8016150:	429a      	cmp	r2, r3
 8016152:	d104      	bne.n	801615e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8016154:	687b      	ldr	r3, [r7, #4]
 8016156:	681b      	ldr	r3, [r3, #0]
 8016158:	4a0c      	ldr	r2, [pc, #48]	@ (801618c <ip_reass_dequeue_datagram+0x4c>)
 801615a:	6013      	str	r3, [r2, #0]
 801615c:	e00d      	b.n	801617a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801615e:	683b      	ldr	r3, [r7, #0]
 8016160:	2b00      	cmp	r3, #0
 8016162:	d106      	bne.n	8016172 <ip_reass_dequeue_datagram+0x32>
 8016164:	4b0a      	ldr	r3, [pc, #40]	@ (8016190 <ip_reass_dequeue_datagram+0x50>)
 8016166:	f240 1245 	movw	r2, #325	@ 0x145
 801616a:	490a      	ldr	r1, [pc, #40]	@ (8016194 <ip_reass_dequeue_datagram+0x54>)
 801616c:	480a      	ldr	r0, [pc, #40]	@ (8016198 <ip_reass_dequeue_datagram+0x58>)
 801616e:	f001 fd2d 	bl	8017bcc <iprintf>
    prev->next = ipr->next;
 8016172:	687b      	ldr	r3, [r7, #4]
 8016174:	681a      	ldr	r2, [r3, #0]
 8016176:	683b      	ldr	r3, [r7, #0]
 8016178:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801617a:	6879      	ldr	r1, [r7, #4]
 801617c:	2004      	movs	r0, #4
 801617e:	f7f7 f865 	bl	800d24c <memp_free>
}
 8016182:	bf00      	nop
 8016184:	3708      	adds	r7, #8
 8016186:	46bd      	mov	sp, r7
 8016188:	bd80      	pop	{r7, pc}
 801618a:	bf00      	nop
 801618c:	200153a0 	.word	0x200153a0
 8016190:	08023034 	.word	0x08023034
 8016194:	080230fc 	.word	0x080230fc
 8016198:	0802307c 	.word	0x0802307c

0801619c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801619c:	b580      	push	{r7, lr}
 801619e:	b08c      	sub	sp, #48	@ 0x30
 80161a0:	af00      	add	r7, sp, #0
 80161a2:	60f8      	str	r0, [r7, #12]
 80161a4:	60b9      	str	r1, [r7, #8]
 80161a6:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80161a8:	2300      	movs	r3, #0
 80161aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80161ac:	2301      	movs	r3, #1
 80161ae:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80161b0:	68bb      	ldr	r3, [r7, #8]
 80161b2:	685b      	ldr	r3, [r3, #4]
 80161b4:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80161b6:	69fb      	ldr	r3, [r7, #28]
 80161b8:	885b      	ldrh	r3, [r3, #2]
 80161ba:	b29b      	uxth	r3, r3
 80161bc:	4618      	mov	r0, r3
 80161be:	f7f6 f893 	bl	800c2e8 <lwip_htons>
 80161c2:	4603      	mov	r3, r0
 80161c4:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80161c6:	69fb      	ldr	r3, [r7, #28]
 80161c8:	781b      	ldrb	r3, [r3, #0]
 80161ca:	f003 030f 	and.w	r3, r3, #15
 80161ce:	b2db      	uxtb	r3, r3
 80161d0:	009b      	lsls	r3, r3, #2
 80161d2:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80161d4:	7e7b      	ldrb	r3, [r7, #25]
 80161d6:	b29b      	uxth	r3, r3
 80161d8:	8b7a      	ldrh	r2, [r7, #26]
 80161da:	429a      	cmp	r2, r3
 80161dc:	d202      	bcs.n	80161e4 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80161de:	f04f 33ff 	mov.w	r3, #4294967295
 80161e2:	e135      	b.n	8016450 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80161e4:	7e7b      	ldrb	r3, [r7, #25]
 80161e6:	b29b      	uxth	r3, r3
 80161e8:	8b7a      	ldrh	r2, [r7, #26]
 80161ea:	1ad3      	subs	r3, r2, r3
 80161ec:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80161ee:	69fb      	ldr	r3, [r7, #28]
 80161f0:	88db      	ldrh	r3, [r3, #6]
 80161f2:	b29b      	uxth	r3, r3
 80161f4:	4618      	mov	r0, r3
 80161f6:	f7f6 f877 	bl	800c2e8 <lwip_htons>
 80161fa:	4603      	mov	r3, r0
 80161fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016200:	b29b      	uxth	r3, r3
 8016202:	00db      	lsls	r3, r3, #3
 8016204:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8016206:	68bb      	ldr	r3, [r7, #8]
 8016208:	685b      	ldr	r3, [r3, #4]
 801620a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 801620c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801620e:	2200      	movs	r2, #0
 8016210:	701a      	strb	r2, [r3, #0]
 8016212:	2200      	movs	r2, #0
 8016214:	705a      	strb	r2, [r3, #1]
 8016216:	2200      	movs	r2, #0
 8016218:	709a      	strb	r2, [r3, #2]
 801621a:	2200      	movs	r2, #0
 801621c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801621e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016220:	8afa      	ldrh	r2, [r7, #22]
 8016222:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8016224:	8afa      	ldrh	r2, [r7, #22]
 8016226:	8b7b      	ldrh	r3, [r7, #26]
 8016228:	4413      	add	r3, r2
 801622a:	b29a      	uxth	r2, r3
 801622c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801622e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8016230:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016232:	88db      	ldrh	r3, [r3, #6]
 8016234:	b29b      	uxth	r3, r3
 8016236:	8afa      	ldrh	r2, [r7, #22]
 8016238:	429a      	cmp	r2, r3
 801623a:	d902      	bls.n	8016242 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801623c:	f04f 33ff 	mov.w	r3, #4294967295
 8016240:	e106      	b.n	8016450 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8016242:	68fb      	ldr	r3, [r7, #12]
 8016244:	685b      	ldr	r3, [r3, #4]
 8016246:	627b      	str	r3, [r7, #36]	@ 0x24
 8016248:	e068      	b.n	801631c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801624a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801624c:	685b      	ldr	r3, [r3, #4]
 801624e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8016250:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016252:	889b      	ldrh	r3, [r3, #4]
 8016254:	b29a      	uxth	r2, r3
 8016256:	693b      	ldr	r3, [r7, #16]
 8016258:	889b      	ldrh	r3, [r3, #4]
 801625a:	b29b      	uxth	r3, r3
 801625c:	429a      	cmp	r2, r3
 801625e:	d235      	bcs.n	80162cc <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8016260:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016262:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016264:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8016266:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016268:	2b00      	cmp	r3, #0
 801626a:	d020      	beq.n	80162ae <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801626c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801626e:	889b      	ldrh	r3, [r3, #4]
 8016270:	b29a      	uxth	r2, r3
 8016272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016274:	88db      	ldrh	r3, [r3, #6]
 8016276:	b29b      	uxth	r3, r3
 8016278:	429a      	cmp	r2, r3
 801627a:	d307      	bcc.n	801628c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801627c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801627e:	88db      	ldrh	r3, [r3, #6]
 8016280:	b29a      	uxth	r2, r3
 8016282:	693b      	ldr	r3, [r7, #16]
 8016284:	889b      	ldrh	r3, [r3, #4]
 8016286:	b29b      	uxth	r3, r3
 8016288:	429a      	cmp	r2, r3
 801628a:	d902      	bls.n	8016292 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801628c:	f04f 33ff 	mov.w	r3, #4294967295
 8016290:	e0de      	b.n	8016450 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8016292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016294:	68ba      	ldr	r2, [r7, #8]
 8016296:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8016298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801629a:	88db      	ldrh	r3, [r3, #6]
 801629c:	b29a      	uxth	r2, r3
 801629e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80162a0:	889b      	ldrh	r3, [r3, #4]
 80162a2:	b29b      	uxth	r3, r3
 80162a4:	429a      	cmp	r2, r3
 80162a6:	d03d      	beq.n	8016324 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80162a8:	2300      	movs	r3, #0
 80162aa:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80162ac:	e03a      	b.n	8016324 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80162ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80162b0:	88db      	ldrh	r3, [r3, #6]
 80162b2:	b29a      	uxth	r2, r3
 80162b4:	693b      	ldr	r3, [r7, #16]
 80162b6:	889b      	ldrh	r3, [r3, #4]
 80162b8:	b29b      	uxth	r3, r3
 80162ba:	429a      	cmp	r2, r3
 80162bc:	d902      	bls.n	80162c4 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80162be:	f04f 33ff 	mov.w	r3, #4294967295
 80162c2:	e0c5      	b.n	8016450 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80162c4:	68fb      	ldr	r3, [r7, #12]
 80162c6:	68ba      	ldr	r2, [r7, #8]
 80162c8:	605a      	str	r2, [r3, #4]
      break;
 80162ca:	e02b      	b.n	8016324 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80162cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80162ce:	889b      	ldrh	r3, [r3, #4]
 80162d0:	b29a      	uxth	r2, r3
 80162d2:	693b      	ldr	r3, [r7, #16]
 80162d4:	889b      	ldrh	r3, [r3, #4]
 80162d6:	b29b      	uxth	r3, r3
 80162d8:	429a      	cmp	r2, r3
 80162da:	d102      	bne.n	80162e2 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80162dc:	f04f 33ff 	mov.w	r3, #4294967295
 80162e0:	e0b6      	b.n	8016450 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80162e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80162e4:	889b      	ldrh	r3, [r3, #4]
 80162e6:	b29a      	uxth	r2, r3
 80162e8:	693b      	ldr	r3, [r7, #16]
 80162ea:	88db      	ldrh	r3, [r3, #6]
 80162ec:	b29b      	uxth	r3, r3
 80162ee:	429a      	cmp	r2, r3
 80162f0:	d202      	bcs.n	80162f8 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80162f2:	f04f 33ff 	mov.w	r3, #4294967295
 80162f6:	e0ab      	b.n	8016450 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80162f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80162fa:	2b00      	cmp	r3, #0
 80162fc:	d009      	beq.n	8016312 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80162fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016300:	88db      	ldrh	r3, [r3, #6]
 8016302:	b29a      	uxth	r2, r3
 8016304:	693b      	ldr	r3, [r7, #16]
 8016306:	889b      	ldrh	r3, [r3, #4]
 8016308:	b29b      	uxth	r3, r3
 801630a:	429a      	cmp	r2, r3
 801630c:	d001      	beq.n	8016312 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801630e:	2300      	movs	r3, #0
 8016310:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8016312:	693b      	ldr	r3, [r7, #16]
 8016314:	681b      	ldr	r3, [r3, #0]
 8016316:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 8016318:	693b      	ldr	r3, [r7, #16]
 801631a:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 801631c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801631e:	2b00      	cmp	r3, #0
 8016320:	d193      	bne.n	801624a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8016322:	e000      	b.n	8016326 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8016324:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8016326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016328:	2b00      	cmp	r3, #0
 801632a:	d12d      	bne.n	8016388 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801632c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801632e:	2b00      	cmp	r3, #0
 8016330:	d01c      	beq.n	801636c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8016332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016334:	88db      	ldrh	r3, [r3, #6]
 8016336:	b29a      	uxth	r2, r3
 8016338:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801633a:	889b      	ldrh	r3, [r3, #4]
 801633c:	b29b      	uxth	r3, r3
 801633e:	429a      	cmp	r2, r3
 8016340:	d906      	bls.n	8016350 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8016342:	4b45      	ldr	r3, [pc, #276]	@ (8016458 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016344:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 8016348:	4944      	ldr	r1, [pc, #272]	@ (801645c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801634a:	4845      	ldr	r0, [pc, #276]	@ (8016460 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801634c:	f001 fc3e 	bl	8017bcc <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8016350:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016352:	68ba      	ldr	r2, [r7, #8]
 8016354:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8016356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016358:	88db      	ldrh	r3, [r3, #6]
 801635a:	b29a      	uxth	r2, r3
 801635c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801635e:	889b      	ldrh	r3, [r3, #4]
 8016360:	b29b      	uxth	r3, r3
 8016362:	429a      	cmp	r2, r3
 8016364:	d010      	beq.n	8016388 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8016366:	2300      	movs	r3, #0
 8016368:	623b      	str	r3, [r7, #32]
 801636a:	e00d      	b.n	8016388 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801636c:	68fb      	ldr	r3, [r7, #12]
 801636e:	685b      	ldr	r3, [r3, #4]
 8016370:	2b00      	cmp	r3, #0
 8016372:	d006      	beq.n	8016382 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8016374:	4b38      	ldr	r3, [pc, #224]	@ (8016458 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016376:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 801637a:	493a      	ldr	r1, [pc, #232]	@ (8016464 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801637c:	4838      	ldr	r0, [pc, #224]	@ (8016460 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801637e:	f001 fc25 	bl	8017bcc <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8016382:	68fb      	ldr	r3, [r7, #12]
 8016384:	68ba      	ldr	r2, [r7, #8]
 8016386:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8016388:	687b      	ldr	r3, [r7, #4]
 801638a:	2b00      	cmp	r3, #0
 801638c:	d105      	bne.n	801639a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801638e:	68fb      	ldr	r3, [r7, #12]
 8016390:	7f9b      	ldrb	r3, [r3, #30]
 8016392:	f003 0301 	and.w	r3, r3, #1
 8016396:	2b00      	cmp	r3, #0
 8016398:	d059      	beq.n	801644e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801639a:	6a3b      	ldr	r3, [r7, #32]
 801639c:	2b00      	cmp	r3, #0
 801639e:	d04f      	beq.n	8016440 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80163a0:	68fb      	ldr	r3, [r7, #12]
 80163a2:	685b      	ldr	r3, [r3, #4]
 80163a4:	2b00      	cmp	r3, #0
 80163a6:	d006      	beq.n	80163b6 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80163a8:	68fb      	ldr	r3, [r7, #12]
 80163aa:	685b      	ldr	r3, [r3, #4]
 80163ac:	685b      	ldr	r3, [r3, #4]
 80163ae:	889b      	ldrh	r3, [r3, #4]
 80163b0:	b29b      	uxth	r3, r3
 80163b2:	2b00      	cmp	r3, #0
 80163b4:	d002      	beq.n	80163bc <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80163b6:	2300      	movs	r3, #0
 80163b8:	623b      	str	r3, [r7, #32]
 80163ba:	e041      	b.n	8016440 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80163bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80163be:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 80163c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80163c2:	681b      	ldr	r3, [r3, #0]
 80163c4:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 80163c6:	e012      	b.n	80163ee <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80163c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80163ca:	685b      	ldr	r3, [r3, #4]
 80163cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 80163ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80163d0:	88db      	ldrh	r3, [r3, #6]
 80163d2:	b29a      	uxth	r2, r3
 80163d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80163d6:	889b      	ldrh	r3, [r3, #4]
 80163d8:	b29b      	uxth	r3, r3
 80163da:	429a      	cmp	r2, r3
 80163dc:	d002      	beq.n	80163e4 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80163de:	2300      	movs	r3, #0
 80163e0:	623b      	str	r3, [r7, #32]
            break;
 80163e2:	e007      	b.n	80163f4 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80163e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80163e6:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 80163e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80163ea:	681b      	ldr	r3, [r3, #0]
 80163ec:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 80163ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80163f0:	2b00      	cmp	r3, #0
 80163f2:	d1e9      	bne.n	80163c8 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80163f4:	6a3b      	ldr	r3, [r7, #32]
 80163f6:	2b00      	cmp	r3, #0
 80163f8:	d022      	beq.n	8016440 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80163fa:	68fb      	ldr	r3, [r7, #12]
 80163fc:	685b      	ldr	r3, [r3, #4]
 80163fe:	2b00      	cmp	r3, #0
 8016400:	d106      	bne.n	8016410 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8016402:	4b15      	ldr	r3, [pc, #84]	@ (8016458 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016404:	f240 12df 	movw	r2, #479	@ 0x1df
 8016408:	4917      	ldr	r1, [pc, #92]	@ (8016468 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801640a:	4815      	ldr	r0, [pc, #84]	@ (8016460 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801640c:	f001 fbde 	bl	8017bcc <iprintf>
          LWIP_ASSERT("sanity check",
 8016410:	68fb      	ldr	r3, [r7, #12]
 8016412:	685b      	ldr	r3, [r3, #4]
 8016414:	685b      	ldr	r3, [r3, #4]
 8016416:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016418:	429a      	cmp	r2, r3
 801641a:	d106      	bne.n	801642a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801641c:	4b0e      	ldr	r3, [pc, #56]	@ (8016458 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801641e:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8016422:	4911      	ldr	r1, [pc, #68]	@ (8016468 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8016424:	480e      	ldr	r0, [pc, #56]	@ (8016460 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016426:	f001 fbd1 	bl	8017bcc <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801642a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801642c:	681b      	ldr	r3, [r3, #0]
 801642e:	2b00      	cmp	r3, #0
 8016430:	d006      	beq.n	8016440 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8016432:	4b09      	ldr	r3, [pc, #36]	@ (8016458 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016434:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8016438:	490c      	ldr	r1, [pc, #48]	@ (801646c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801643a:	4809      	ldr	r0, [pc, #36]	@ (8016460 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801643c:	f001 fbc6 	bl	8017bcc <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8016440:	6a3b      	ldr	r3, [r7, #32]
 8016442:	2b00      	cmp	r3, #0
 8016444:	bf14      	ite	ne
 8016446:	2301      	movne	r3, #1
 8016448:	2300      	moveq	r3, #0
 801644a:	b2db      	uxtb	r3, r3
 801644c:	e000      	b.n	8016450 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801644e:	2300      	movs	r3, #0
}
 8016450:	4618      	mov	r0, r3
 8016452:	3730      	adds	r7, #48	@ 0x30
 8016454:	46bd      	mov	sp, r7
 8016456:	bd80      	pop	{r7, pc}
 8016458:	08023034 	.word	0x08023034
 801645c:	08023118 	.word	0x08023118
 8016460:	0802307c 	.word	0x0802307c
 8016464:	08023138 	.word	0x08023138
 8016468:	08023170 	.word	0x08023170
 801646c:	08023180 	.word	0x08023180

08016470 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8016470:	b580      	push	{r7, lr}
 8016472:	b08e      	sub	sp, #56	@ 0x38
 8016474:	af00      	add	r7, sp, #0
 8016476:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8016478:	687b      	ldr	r3, [r7, #4]
 801647a:	685b      	ldr	r3, [r3, #4]
 801647c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801647e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016480:	781b      	ldrb	r3, [r3, #0]
 8016482:	f003 030f 	and.w	r3, r3, #15
 8016486:	b2db      	uxtb	r3, r3
 8016488:	009b      	lsls	r3, r3, #2
 801648a:	b2db      	uxtb	r3, r3
 801648c:	2b14      	cmp	r3, #20
 801648e:	f040 8171 	bne.w	8016774 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8016492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016494:	88db      	ldrh	r3, [r3, #6]
 8016496:	b29b      	uxth	r3, r3
 8016498:	4618      	mov	r0, r3
 801649a:	f7f5 ff25 	bl	800c2e8 <lwip_htons>
 801649e:	4603      	mov	r3, r0
 80164a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80164a4:	b29b      	uxth	r3, r3
 80164a6:	00db      	lsls	r3, r3, #3
 80164a8:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80164aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80164ac:	885b      	ldrh	r3, [r3, #2]
 80164ae:	b29b      	uxth	r3, r3
 80164b0:	4618      	mov	r0, r3
 80164b2:	f7f5 ff19 	bl	800c2e8 <lwip_htons>
 80164b6:	4603      	mov	r3, r0
 80164b8:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80164ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80164bc:	781b      	ldrb	r3, [r3, #0]
 80164be:	f003 030f 	and.w	r3, r3, #15
 80164c2:	b2db      	uxtb	r3, r3
 80164c4:	009b      	lsls	r3, r3, #2
 80164c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 80164ca:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80164ce:	b29b      	uxth	r3, r3
 80164d0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80164d2:	429a      	cmp	r2, r3
 80164d4:	f0c0 8150 	bcc.w	8016778 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80164d8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80164dc:	b29b      	uxth	r3, r3
 80164de:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80164e0:	1ad3      	subs	r3, r2, r3
 80164e2:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80164e4:	6878      	ldr	r0, [r7, #4]
 80164e6:	f7f7 fdaf 	bl	800e048 <pbuf_clen>
 80164ea:	4603      	mov	r3, r0
 80164ec:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80164ee:	4b8c      	ldr	r3, [pc, #560]	@ (8016720 <ip4_reass+0x2b0>)
 80164f0:	881b      	ldrh	r3, [r3, #0]
 80164f2:	461a      	mov	r2, r3
 80164f4:	8c3b      	ldrh	r3, [r7, #32]
 80164f6:	4413      	add	r3, r2
 80164f8:	2b0a      	cmp	r3, #10
 80164fa:	dd10      	ble.n	801651e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80164fc:	8c3b      	ldrh	r3, [r7, #32]
 80164fe:	4619      	mov	r1, r3
 8016500:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016502:	f7ff fd81 	bl	8016008 <ip_reass_remove_oldest_datagram>
 8016506:	4603      	mov	r3, r0
 8016508:	2b00      	cmp	r3, #0
 801650a:	f000 8137 	beq.w	801677c <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801650e:	4b84      	ldr	r3, [pc, #528]	@ (8016720 <ip4_reass+0x2b0>)
 8016510:	881b      	ldrh	r3, [r3, #0]
 8016512:	461a      	mov	r2, r3
 8016514:	8c3b      	ldrh	r3, [r7, #32]
 8016516:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8016518:	2b0a      	cmp	r3, #10
 801651a:	f300 812f 	bgt.w	801677c <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801651e:	4b81      	ldr	r3, [pc, #516]	@ (8016724 <ip4_reass+0x2b4>)
 8016520:	681b      	ldr	r3, [r3, #0]
 8016522:	633b      	str	r3, [r7, #48]	@ 0x30
 8016524:	e015      	b.n	8016552 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8016526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016528:	695a      	ldr	r2, [r3, #20]
 801652a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801652c:	68db      	ldr	r3, [r3, #12]
 801652e:	429a      	cmp	r2, r3
 8016530:	d10c      	bne.n	801654c <ip4_reass+0xdc>
 8016532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016534:	699a      	ldr	r2, [r3, #24]
 8016536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016538:	691b      	ldr	r3, [r3, #16]
 801653a:	429a      	cmp	r2, r3
 801653c:	d106      	bne.n	801654c <ip4_reass+0xdc>
 801653e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016540:	899a      	ldrh	r2, [r3, #12]
 8016542:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016544:	889b      	ldrh	r3, [r3, #4]
 8016546:	b29b      	uxth	r3, r3
 8016548:	429a      	cmp	r2, r3
 801654a:	d006      	beq.n	801655a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801654c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801654e:	681b      	ldr	r3, [r3, #0]
 8016550:	633b      	str	r3, [r7, #48]	@ 0x30
 8016552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016554:	2b00      	cmp	r3, #0
 8016556:	d1e6      	bne.n	8016526 <ip4_reass+0xb6>
 8016558:	e000      	b.n	801655c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801655a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801655c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801655e:	2b00      	cmp	r3, #0
 8016560:	d109      	bne.n	8016576 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8016562:	8c3b      	ldrh	r3, [r7, #32]
 8016564:	4619      	mov	r1, r3
 8016566:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016568:	f7ff fdb0 	bl	80160cc <ip_reass_enqueue_new_datagram>
 801656c:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801656e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016570:	2b00      	cmp	r3, #0
 8016572:	d11c      	bne.n	80165ae <ip4_reass+0x13e>
      goto nullreturn;
 8016574:	e105      	b.n	8016782 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8016576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016578:	88db      	ldrh	r3, [r3, #6]
 801657a:	b29b      	uxth	r3, r3
 801657c:	4618      	mov	r0, r3
 801657e:	f7f5 feb3 	bl	800c2e8 <lwip_htons>
 8016582:	4603      	mov	r3, r0
 8016584:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016588:	2b00      	cmp	r3, #0
 801658a:	d110      	bne.n	80165ae <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801658c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801658e:	89db      	ldrh	r3, [r3, #14]
 8016590:	4618      	mov	r0, r3
 8016592:	f7f5 fea9 	bl	800c2e8 <lwip_htons>
 8016596:	4603      	mov	r3, r0
 8016598:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801659c:	2b00      	cmp	r3, #0
 801659e:	d006      	beq.n	80165ae <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80165a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80165a2:	3308      	adds	r3, #8
 80165a4:	2214      	movs	r2, #20
 80165a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80165a8:	4618      	mov	r0, r3
 80165aa:	f001 fc66 	bl	8017e7a <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80165ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80165b0:	88db      	ldrh	r3, [r3, #6]
 80165b2:	b29b      	uxth	r3, r3
 80165b4:	f003 0320 	and.w	r3, r3, #32
 80165b8:	2b00      	cmp	r3, #0
 80165ba:	bf0c      	ite	eq
 80165bc:	2301      	moveq	r3, #1
 80165be:	2300      	movne	r3, #0
 80165c0:	b2db      	uxtb	r3, r3
 80165c2:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80165c4:	69fb      	ldr	r3, [r7, #28]
 80165c6:	2b00      	cmp	r3, #0
 80165c8:	d00e      	beq.n	80165e8 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80165ca:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80165cc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80165ce:	4413      	add	r3, r2
 80165d0:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80165d2:	8b7a      	ldrh	r2, [r7, #26]
 80165d4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80165d6:	429a      	cmp	r2, r3
 80165d8:	f0c0 80a0 	bcc.w	801671c <ip4_reass+0x2ac>
 80165dc:	8b7b      	ldrh	r3, [r7, #26]
 80165de:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 80165e2:	4293      	cmp	r3, r2
 80165e4:	f200 809a 	bhi.w	801671c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80165e8:	69fa      	ldr	r2, [r7, #28]
 80165ea:	6879      	ldr	r1, [r7, #4]
 80165ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80165ee:	f7ff fdd5 	bl	801619c <ip_reass_chain_frag_into_datagram_and_validate>
 80165f2:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80165f4:	697b      	ldr	r3, [r7, #20]
 80165f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80165fa:	f000 809b 	beq.w	8016734 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80165fe:	4b48      	ldr	r3, [pc, #288]	@ (8016720 <ip4_reass+0x2b0>)
 8016600:	881a      	ldrh	r2, [r3, #0]
 8016602:	8c3b      	ldrh	r3, [r7, #32]
 8016604:	4413      	add	r3, r2
 8016606:	b29a      	uxth	r2, r3
 8016608:	4b45      	ldr	r3, [pc, #276]	@ (8016720 <ip4_reass+0x2b0>)
 801660a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801660c:	69fb      	ldr	r3, [r7, #28]
 801660e:	2b00      	cmp	r3, #0
 8016610:	d00d      	beq.n	801662e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8016612:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8016614:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8016616:	4413      	add	r3, r2
 8016618:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801661a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801661c:	8a7a      	ldrh	r2, [r7, #18]
 801661e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8016620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016622:	7f9b      	ldrb	r3, [r3, #30]
 8016624:	f043 0301 	orr.w	r3, r3, #1
 8016628:	b2da      	uxtb	r2, r3
 801662a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801662c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801662e:	697b      	ldr	r3, [r7, #20]
 8016630:	2b01      	cmp	r3, #1
 8016632:	d171      	bne.n	8016718 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8016634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016636:	8b9b      	ldrh	r3, [r3, #28]
 8016638:	3314      	adds	r3, #20
 801663a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801663c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801663e:	685b      	ldr	r3, [r3, #4]
 8016640:	685b      	ldr	r3, [r3, #4]
 8016642:	681b      	ldr	r3, [r3, #0]
 8016644:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8016646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016648:	685b      	ldr	r3, [r3, #4]
 801664a:	685b      	ldr	r3, [r3, #4]
 801664c:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801664e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016650:	3308      	adds	r3, #8
 8016652:	2214      	movs	r2, #20
 8016654:	4619      	mov	r1, r3
 8016656:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016658:	f001 fc0f 	bl	8017e7a <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801665c:	8a3b      	ldrh	r3, [r7, #16]
 801665e:	4618      	mov	r0, r3
 8016660:	f7f5 fe42 	bl	800c2e8 <lwip_htons>
 8016664:	4603      	mov	r3, r0
 8016666:	461a      	mov	r2, r3
 8016668:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801666a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801666c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801666e:	2200      	movs	r2, #0
 8016670:	719a      	strb	r2, [r3, #6]
 8016672:	2200      	movs	r2, #0
 8016674:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8016676:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016678:	2200      	movs	r2, #0
 801667a:	729a      	strb	r2, [r3, #10]
 801667c:	2200      	movs	r2, #0
 801667e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8016680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016682:	685b      	ldr	r3, [r3, #4]
 8016684:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8016686:	e00d      	b.n	80166a4 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8016688:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801668a:	685b      	ldr	r3, [r3, #4]
 801668c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801668e:	2114      	movs	r1, #20
 8016690:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8016692:	f7f7 fbcb 	bl	800de2c <pbuf_remove_header>
      pbuf_cat(p, r);
 8016696:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8016698:	6878      	ldr	r0, [r7, #4]
 801669a:	f7f7 fd0f 	bl	800e0bc <pbuf_cat>
      r = iprh->next_pbuf;
 801669e:	68fb      	ldr	r3, [r7, #12]
 80166a0:	681b      	ldr	r3, [r3, #0]
 80166a2:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 80166a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80166a6:	2b00      	cmp	r3, #0
 80166a8:	d1ee      	bne.n	8016688 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80166aa:	4b1e      	ldr	r3, [pc, #120]	@ (8016724 <ip4_reass+0x2b4>)
 80166ac:	681b      	ldr	r3, [r3, #0]
 80166ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80166b0:	429a      	cmp	r2, r3
 80166b2:	d102      	bne.n	80166ba <ip4_reass+0x24a>
      ipr_prev = NULL;
 80166b4:	2300      	movs	r3, #0
 80166b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80166b8:	e010      	b.n	80166dc <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80166ba:	4b1a      	ldr	r3, [pc, #104]	@ (8016724 <ip4_reass+0x2b4>)
 80166bc:	681b      	ldr	r3, [r3, #0]
 80166be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80166c0:	e007      	b.n	80166d2 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80166c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80166c4:	681b      	ldr	r3, [r3, #0]
 80166c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80166c8:	429a      	cmp	r2, r3
 80166ca:	d006      	beq.n	80166da <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80166cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80166ce:	681b      	ldr	r3, [r3, #0]
 80166d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80166d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80166d4:	2b00      	cmp	r3, #0
 80166d6:	d1f4      	bne.n	80166c2 <ip4_reass+0x252>
 80166d8:	e000      	b.n	80166dc <ip4_reass+0x26c>
          break;
 80166da:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80166dc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80166de:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80166e0:	f7ff fd2e 	bl	8016140 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80166e4:	6878      	ldr	r0, [r7, #4]
 80166e6:	f7f7 fcaf 	bl	800e048 <pbuf_clen>
 80166ea:	4603      	mov	r3, r0
 80166ec:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80166ee:	4b0c      	ldr	r3, [pc, #48]	@ (8016720 <ip4_reass+0x2b0>)
 80166f0:	881b      	ldrh	r3, [r3, #0]
 80166f2:	8c3a      	ldrh	r2, [r7, #32]
 80166f4:	429a      	cmp	r2, r3
 80166f6:	d906      	bls.n	8016706 <ip4_reass+0x296>
 80166f8:	4b0b      	ldr	r3, [pc, #44]	@ (8016728 <ip4_reass+0x2b8>)
 80166fa:	f240 229b 	movw	r2, #667	@ 0x29b
 80166fe:	490b      	ldr	r1, [pc, #44]	@ (801672c <ip4_reass+0x2bc>)
 8016700:	480b      	ldr	r0, [pc, #44]	@ (8016730 <ip4_reass+0x2c0>)
 8016702:	f001 fa63 	bl	8017bcc <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8016706:	4b06      	ldr	r3, [pc, #24]	@ (8016720 <ip4_reass+0x2b0>)
 8016708:	881a      	ldrh	r2, [r3, #0]
 801670a:	8c3b      	ldrh	r3, [r7, #32]
 801670c:	1ad3      	subs	r3, r2, r3
 801670e:	b29a      	uxth	r2, r3
 8016710:	4b03      	ldr	r3, [pc, #12]	@ (8016720 <ip4_reass+0x2b0>)
 8016712:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8016714:	687b      	ldr	r3, [r7, #4]
 8016716:	e038      	b.n	801678a <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8016718:	2300      	movs	r3, #0
 801671a:	e036      	b.n	801678a <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801671c:	bf00      	nop
 801671e:	e00a      	b.n	8016736 <ip4_reass+0x2c6>
 8016720:	200153a4 	.word	0x200153a4
 8016724:	200153a0 	.word	0x200153a0
 8016728:	08023034 	.word	0x08023034
 801672c:	080231a4 	.word	0x080231a4
 8016730:	0802307c 	.word	0x0802307c
    goto nullreturn_ipr;
 8016734:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8016736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016738:	2b00      	cmp	r3, #0
 801673a:	d106      	bne.n	801674a <ip4_reass+0x2da>
 801673c:	4b15      	ldr	r3, [pc, #84]	@ (8016794 <ip4_reass+0x324>)
 801673e:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 8016742:	4915      	ldr	r1, [pc, #84]	@ (8016798 <ip4_reass+0x328>)
 8016744:	4815      	ldr	r0, [pc, #84]	@ (801679c <ip4_reass+0x32c>)
 8016746:	f001 fa41 	bl	8017bcc <iprintf>
  if (ipr->p == NULL) {
 801674a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801674c:	685b      	ldr	r3, [r3, #4]
 801674e:	2b00      	cmp	r3, #0
 8016750:	d116      	bne.n	8016780 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8016752:	4b13      	ldr	r3, [pc, #76]	@ (80167a0 <ip4_reass+0x330>)
 8016754:	681b      	ldr	r3, [r3, #0]
 8016756:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016758:	429a      	cmp	r2, r3
 801675a:	d006      	beq.n	801676a <ip4_reass+0x2fa>
 801675c:	4b0d      	ldr	r3, [pc, #52]	@ (8016794 <ip4_reass+0x324>)
 801675e:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8016762:	4910      	ldr	r1, [pc, #64]	@ (80167a4 <ip4_reass+0x334>)
 8016764:	480d      	ldr	r0, [pc, #52]	@ (801679c <ip4_reass+0x32c>)
 8016766:	f001 fa31 	bl	8017bcc <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801676a:	2100      	movs	r1, #0
 801676c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801676e:	f7ff fce7 	bl	8016140 <ip_reass_dequeue_datagram>
 8016772:	e006      	b.n	8016782 <ip4_reass+0x312>
    goto nullreturn;
 8016774:	bf00      	nop
 8016776:	e004      	b.n	8016782 <ip4_reass+0x312>
    goto nullreturn;
 8016778:	bf00      	nop
 801677a:	e002      	b.n	8016782 <ip4_reass+0x312>
      goto nullreturn;
 801677c:	bf00      	nop
 801677e:	e000      	b.n	8016782 <ip4_reass+0x312>
  }

nullreturn:
 8016780:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8016782:	6878      	ldr	r0, [r7, #4]
 8016784:	f7f7 fbd8 	bl	800df38 <pbuf_free>
  return NULL;
 8016788:	2300      	movs	r3, #0
}
 801678a:	4618      	mov	r0, r3
 801678c:	3738      	adds	r7, #56	@ 0x38
 801678e:	46bd      	mov	sp, r7
 8016790:	bd80      	pop	{r7, pc}
 8016792:	bf00      	nop
 8016794:	08023034 	.word	0x08023034
 8016798:	080231c0 	.word	0x080231c0
 801679c:	0802307c 	.word	0x0802307c
 80167a0:	200153a0 	.word	0x200153a0
 80167a4:	080231cc 	.word	0x080231cc

080167a8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80167a8:	b580      	push	{r7, lr}
 80167aa:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80167ac:	2005      	movs	r0, #5
 80167ae:	f7f6 fcdd 	bl	800d16c <memp_malloc>
 80167b2:	4603      	mov	r3, r0
}
 80167b4:	4618      	mov	r0, r3
 80167b6:	bd80      	pop	{r7, pc}

080167b8 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80167b8:	b580      	push	{r7, lr}
 80167ba:	b082      	sub	sp, #8
 80167bc:	af00      	add	r7, sp, #0
 80167be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80167c0:	687b      	ldr	r3, [r7, #4]
 80167c2:	2b00      	cmp	r3, #0
 80167c4:	d106      	bne.n	80167d4 <ip_frag_free_pbuf_custom_ref+0x1c>
 80167c6:	4b07      	ldr	r3, [pc, #28]	@ (80167e4 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80167c8:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 80167cc:	4906      	ldr	r1, [pc, #24]	@ (80167e8 <ip_frag_free_pbuf_custom_ref+0x30>)
 80167ce:	4807      	ldr	r0, [pc, #28]	@ (80167ec <ip_frag_free_pbuf_custom_ref+0x34>)
 80167d0:	f001 f9fc 	bl	8017bcc <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80167d4:	6879      	ldr	r1, [r7, #4]
 80167d6:	2005      	movs	r0, #5
 80167d8:	f7f6 fd38 	bl	800d24c <memp_free>
}
 80167dc:	bf00      	nop
 80167de:	3708      	adds	r7, #8
 80167e0:	46bd      	mov	sp, r7
 80167e2:	bd80      	pop	{r7, pc}
 80167e4:	08023034 	.word	0x08023034
 80167e8:	080231ec 	.word	0x080231ec
 80167ec:	0802307c 	.word	0x0802307c

080167f0 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80167f0:	b580      	push	{r7, lr}
 80167f2:	b084      	sub	sp, #16
 80167f4:	af00      	add	r7, sp, #0
 80167f6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80167f8:	687b      	ldr	r3, [r7, #4]
 80167fa:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80167fc:	68fb      	ldr	r3, [r7, #12]
 80167fe:	2b00      	cmp	r3, #0
 8016800:	d106      	bne.n	8016810 <ipfrag_free_pbuf_custom+0x20>
 8016802:	4b11      	ldr	r3, [pc, #68]	@ (8016848 <ipfrag_free_pbuf_custom+0x58>)
 8016804:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8016808:	4910      	ldr	r1, [pc, #64]	@ (801684c <ipfrag_free_pbuf_custom+0x5c>)
 801680a:	4811      	ldr	r0, [pc, #68]	@ (8016850 <ipfrag_free_pbuf_custom+0x60>)
 801680c:	f001 f9de 	bl	8017bcc <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8016810:	68fa      	ldr	r2, [r7, #12]
 8016812:	687b      	ldr	r3, [r7, #4]
 8016814:	429a      	cmp	r2, r3
 8016816:	d006      	beq.n	8016826 <ipfrag_free_pbuf_custom+0x36>
 8016818:	4b0b      	ldr	r3, [pc, #44]	@ (8016848 <ipfrag_free_pbuf_custom+0x58>)
 801681a:	f240 22cf 	movw	r2, #719	@ 0x2cf
 801681e:	490d      	ldr	r1, [pc, #52]	@ (8016854 <ipfrag_free_pbuf_custom+0x64>)
 8016820:	480b      	ldr	r0, [pc, #44]	@ (8016850 <ipfrag_free_pbuf_custom+0x60>)
 8016822:	f001 f9d3 	bl	8017bcc <iprintf>
  if (pcr->original != NULL) {
 8016826:	68fb      	ldr	r3, [r7, #12]
 8016828:	695b      	ldr	r3, [r3, #20]
 801682a:	2b00      	cmp	r3, #0
 801682c:	d004      	beq.n	8016838 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801682e:	68fb      	ldr	r3, [r7, #12]
 8016830:	695b      	ldr	r3, [r3, #20]
 8016832:	4618      	mov	r0, r3
 8016834:	f7f7 fb80 	bl	800df38 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8016838:	68f8      	ldr	r0, [r7, #12]
 801683a:	f7ff ffbd 	bl	80167b8 <ip_frag_free_pbuf_custom_ref>
}
 801683e:	bf00      	nop
 8016840:	3710      	adds	r7, #16
 8016842:	46bd      	mov	sp, r7
 8016844:	bd80      	pop	{r7, pc}
 8016846:	bf00      	nop
 8016848:	08023034 	.word	0x08023034
 801684c:	080231f8 	.word	0x080231f8
 8016850:	0802307c 	.word	0x0802307c
 8016854:	08023204 	.word	0x08023204

08016858 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8016858:	b580      	push	{r7, lr}
 801685a:	b094      	sub	sp, #80	@ 0x50
 801685c:	af02      	add	r7, sp, #8
 801685e:	60f8      	str	r0, [r7, #12]
 8016860:	60b9      	str	r1, [r7, #8]
 8016862:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8016864:	2300      	movs	r3, #0
 8016866:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801686a:	68bb      	ldr	r3, [r7, #8]
 801686c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801686e:	3b14      	subs	r3, #20
 8016870:	2b00      	cmp	r3, #0
 8016872:	da00      	bge.n	8016876 <ip4_frag+0x1e>
 8016874:	3307      	adds	r3, #7
 8016876:	10db      	asrs	r3, r3, #3
 8016878:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801687a:	2314      	movs	r3, #20
 801687c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801687e:	68fb      	ldr	r3, [r7, #12]
 8016880:	685b      	ldr	r3, [r3, #4]
 8016882:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 8016884:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016886:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8016888:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801688a:	781b      	ldrb	r3, [r3, #0]
 801688c:	f003 030f 	and.w	r3, r3, #15
 8016890:	b2db      	uxtb	r3, r3
 8016892:	009b      	lsls	r3, r3, #2
 8016894:	b2db      	uxtb	r3, r3
 8016896:	2b14      	cmp	r3, #20
 8016898:	d002      	beq.n	80168a0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801689a:	f06f 0305 	mvn.w	r3, #5
 801689e:	e110      	b.n	8016ac2 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80168a0:	68fb      	ldr	r3, [r7, #12]
 80168a2:	895b      	ldrh	r3, [r3, #10]
 80168a4:	2b13      	cmp	r3, #19
 80168a6:	d809      	bhi.n	80168bc <ip4_frag+0x64>
 80168a8:	4b88      	ldr	r3, [pc, #544]	@ (8016acc <ip4_frag+0x274>)
 80168aa:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 80168ae:	4988      	ldr	r1, [pc, #544]	@ (8016ad0 <ip4_frag+0x278>)
 80168b0:	4888      	ldr	r0, [pc, #544]	@ (8016ad4 <ip4_frag+0x27c>)
 80168b2:	f001 f98b 	bl	8017bcc <iprintf>
 80168b6:	f06f 0305 	mvn.w	r3, #5
 80168ba:	e102      	b.n	8016ac2 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80168bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80168be:	88db      	ldrh	r3, [r3, #6]
 80168c0:	b29b      	uxth	r3, r3
 80168c2:	4618      	mov	r0, r3
 80168c4:	f7f5 fd10 	bl	800c2e8 <lwip_htons>
 80168c8:	4603      	mov	r3, r0
 80168ca:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 80168cc:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80168ce:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80168d2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80168d6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80168d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80168dc:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80168de:	68fb      	ldr	r3, [r7, #12]
 80168e0:	891b      	ldrh	r3, [r3, #8]
 80168e2:	3b14      	subs	r3, #20
 80168e4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 80168e8:	e0e1      	b.n	8016aae <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80168ea:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80168ec:	00db      	lsls	r3, r3, #3
 80168ee:	b29b      	uxth	r3, r3
 80168f0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80168f4:	4293      	cmp	r3, r2
 80168f6:	bf28      	it	cs
 80168f8:	4613      	movcs	r3, r2
 80168fa:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80168fc:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8016900:	2114      	movs	r1, #20
 8016902:	200e      	movs	r0, #14
 8016904:	f7f7 f834 	bl	800d970 <pbuf_alloc>
 8016908:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 801690a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801690c:	2b00      	cmp	r3, #0
 801690e:	f000 80d5 	beq.w	8016abc <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8016912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016914:	895b      	ldrh	r3, [r3, #10]
 8016916:	2b13      	cmp	r3, #19
 8016918:	d806      	bhi.n	8016928 <ip4_frag+0xd0>
 801691a:	4b6c      	ldr	r3, [pc, #432]	@ (8016acc <ip4_frag+0x274>)
 801691c:	f44f 7249 	mov.w	r2, #804	@ 0x324
 8016920:	496d      	ldr	r1, [pc, #436]	@ (8016ad8 <ip4_frag+0x280>)
 8016922:	486c      	ldr	r0, [pc, #432]	@ (8016ad4 <ip4_frag+0x27c>)
 8016924:	f001 f952 	bl	8017bcc <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8016928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801692a:	685b      	ldr	r3, [r3, #4]
 801692c:	2214      	movs	r2, #20
 801692e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8016930:	4618      	mov	r0, r3
 8016932:	f001 faa2 	bl	8017e7a <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8016936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016938:	685b      	ldr	r3, [r3, #4]
 801693a:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 801693c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801693e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 8016942:	e064      	b.n	8016a0e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8016944:	68fb      	ldr	r3, [r7, #12]
 8016946:	895a      	ldrh	r2, [r3, #10]
 8016948:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801694a:	1ad3      	subs	r3, r2, r3
 801694c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801694e:	68fb      	ldr	r3, [r7, #12]
 8016950:	895b      	ldrh	r3, [r3, #10]
 8016952:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8016954:	429a      	cmp	r2, r3
 8016956:	d906      	bls.n	8016966 <ip4_frag+0x10e>
 8016958:	4b5c      	ldr	r3, [pc, #368]	@ (8016acc <ip4_frag+0x274>)
 801695a:	f240 322d 	movw	r2, #813	@ 0x32d
 801695e:	495f      	ldr	r1, [pc, #380]	@ (8016adc <ip4_frag+0x284>)
 8016960:	485c      	ldr	r0, [pc, #368]	@ (8016ad4 <ip4_frag+0x27c>)
 8016962:	f001 f933 	bl	8017bcc <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8016966:	8bfa      	ldrh	r2, [r7, #30]
 8016968:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801696c:	4293      	cmp	r3, r2
 801696e:	bf28      	it	cs
 8016970:	4613      	movcs	r3, r2
 8016972:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8016976:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801697a:	2b00      	cmp	r3, #0
 801697c:	d105      	bne.n	801698a <ip4_frag+0x132>
        poff = 0;
 801697e:	2300      	movs	r3, #0
 8016980:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8016982:	68fb      	ldr	r3, [r7, #12]
 8016984:	681b      	ldr	r3, [r3, #0]
 8016986:	60fb      	str	r3, [r7, #12]
        continue;
 8016988:	e041      	b.n	8016a0e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801698a:	f7ff ff0d 	bl	80167a8 <ip_frag_alloc_pbuf_custom_ref>
 801698e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8016990:	69bb      	ldr	r3, [r7, #24]
 8016992:	2b00      	cmp	r3, #0
 8016994:	d103      	bne.n	801699e <ip4_frag+0x146>
        pbuf_free(rambuf);
 8016996:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8016998:	f7f7 face 	bl	800df38 <pbuf_free>
        goto memerr;
 801699c:	e08f      	b.n	8016abe <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801699e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80169a0:	68fb      	ldr	r3, [r7, #12]
 80169a2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80169a4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80169a6:	4413      	add	r3, r2
 80169a8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 80169ac:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80169b0:	9201      	str	r2, [sp, #4]
 80169b2:	9300      	str	r3, [sp, #0]
 80169b4:	4603      	mov	r3, r0
 80169b6:	2241      	movs	r2, #65	@ 0x41
 80169b8:	2000      	movs	r0, #0
 80169ba:	f7f7 f903 	bl	800dbc4 <pbuf_alloced_custom>
 80169be:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80169c0:	697b      	ldr	r3, [r7, #20]
 80169c2:	2b00      	cmp	r3, #0
 80169c4:	d106      	bne.n	80169d4 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80169c6:	69b8      	ldr	r0, [r7, #24]
 80169c8:	f7ff fef6 	bl	80167b8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80169cc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80169ce:	f7f7 fab3 	bl	800df38 <pbuf_free>
        goto memerr;
 80169d2:	e074      	b.n	8016abe <ip4_frag+0x266>
      }
      pbuf_ref(p);
 80169d4:	68f8      	ldr	r0, [r7, #12]
 80169d6:	f7f7 fb4f 	bl	800e078 <pbuf_ref>
      pcr->original = p;
 80169da:	69bb      	ldr	r3, [r7, #24]
 80169dc:	68fa      	ldr	r2, [r7, #12]
 80169de:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80169e0:	69bb      	ldr	r3, [r7, #24]
 80169e2:	4a3f      	ldr	r2, [pc, #252]	@ (8016ae0 <ip4_frag+0x288>)
 80169e4:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80169e6:	6979      	ldr	r1, [r7, #20]
 80169e8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80169ea:	f7f7 fb67 	bl	800e0bc <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80169ee:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 80169f2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80169f6:	1ad3      	subs	r3, r2, r3
 80169f8:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 80169fc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8016a00:	2b00      	cmp	r3, #0
 8016a02:	d004      	beq.n	8016a0e <ip4_frag+0x1b6>
        poff = 0;
 8016a04:	2300      	movs	r3, #0
 8016a06:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8016a08:	68fb      	ldr	r3, [r7, #12]
 8016a0a:	681b      	ldr	r3, [r3, #0]
 8016a0c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8016a0e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8016a12:	2b00      	cmp	r3, #0
 8016a14:	d196      	bne.n	8016944 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8016a16:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8016a18:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8016a1c:	4413      	add	r3, r2
 8016a1e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8016a20:	68bb      	ldr	r3, [r7, #8]
 8016a22:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8016a24:	f1a3 0213 	sub.w	r2, r3, #19
 8016a28:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8016a2c:	429a      	cmp	r2, r3
 8016a2e:	bfcc      	ite	gt
 8016a30:	2301      	movgt	r3, #1
 8016a32:	2300      	movle	r3, #0
 8016a34:	b2db      	uxtb	r3, r3
 8016a36:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8016a38:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8016a3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016a40:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 8016a42:	6a3b      	ldr	r3, [r7, #32]
 8016a44:	2b00      	cmp	r3, #0
 8016a46:	d002      	beq.n	8016a4e <ip4_frag+0x1f6>
 8016a48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016a4a:	2b00      	cmp	r3, #0
 8016a4c:	d003      	beq.n	8016a56 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8016a4e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8016a50:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8016a54:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8016a56:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8016a58:	4618      	mov	r0, r3
 8016a5a:	f7f5 fc45 	bl	800c2e8 <lwip_htons>
 8016a5e:	4603      	mov	r3, r0
 8016a60:	461a      	mov	r2, r3
 8016a62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016a64:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8016a66:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8016a68:	3314      	adds	r3, #20
 8016a6a:	b29b      	uxth	r3, r3
 8016a6c:	4618      	mov	r0, r3
 8016a6e:	f7f5 fc3b 	bl	800c2e8 <lwip_htons>
 8016a72:	4603      	mov	r3, r0
 8016a74:	461a      	mov	r2, r3
 8016a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016a78:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8016a7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016a7c:	2200      	movs	r2, #0
 8016a7e:	729a      	strb	r2, [r3, #10]
 8016a80:	2200      	movs	r2, #0
 8016a82:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8016a84:	68bb      	ldr	r3, [r7, #8]
 8016a86:	695b      	ldr	r3, [r3, #20]
 8016a88:	687a      	ldr	r2, [r7, #4]
 8016a8a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8016a8c:	68b8      	ldr	r0, [r7, #8]
 8016a8e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8016a90:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8016a92:	f7f7 fa51 	bl	800df38 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8016a96:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8016a9a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8016a9c:	1ad3      	subs	r3, r2, r3
 8016a9e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 8016aa2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8016aa6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8016aa8:	4413      	add	r3, r2
 8016aaa:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 8016aae:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8016ab2:	2b00      	cmp	r3, #0
 8016ab4:	f47f af19 	bne.w	80168ea <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8016ab8:	2300      	movs	r3, #0
 8016aba:	e002      	b.n	8016ac2 <ip4_frag+0x26a>
      goto memerr;
 8016abc:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8016abe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8016ac2:	4618      	mov	r0, r3
 8016ac4:	3748      	adds	r7, #72	@ 0x48
 8016ac6:	46bd      	mov	sp, r7
 8016ac8:	bd80      	pop	{r7, pc}
 8016aca:	bf00      	nop
 8016acc:	08023034 	.word	0x08023034
 8016ad0:	08023210 	.word	0x08023210
 8016ad4:	0802307c 	.word	0x0802307c
 8016ad8:	0802322c 	.word	0x0802322c
 8016adc:	0802324c 	.word	0x0802324c
 8016ae0:	080167f1 	.word	0x080167f1

08016ae4 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8016ae4:	b580      	push	{r7, lr}
 8016ae6:	b086      	sub	sp, #24
 8016ae8:	af00      	add	r7, sp, #0
 8016aea:	6078      	str	r0, [r7, #4]
 8016aec:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8016aee:	230e      	movs	r3, #14
 8016af0:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8016af2:	687b      	ldr	r3, [r7, #4]
 8016af4:	895b      	ldrh	r3, [r3, #10]
 8016af6:	2b0e      	cmp	r3, #14
 8016af8:	d96e      	bls.n	8016bd8 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8016afa:	687b      	ldr	r3, [r7, #4]
 8016afc:	7bdb      	ldrb	r3, [r3, #15]
 8016afe:	2b00      	cmp	r3, #0
 8016b00:	d106      	bne.n	8016b10 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8016b02:	683b      	ldr	r3, [r7, #0]
 8016b04:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8016b08:	3301      	adds	r3, #1
 8016b0a:	b2da      	uxtb	r2, r3
 8016b0c:	687b      	ldr	r3, [r7, #4]
 8016b0e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8016b10:	687b      	ldr	r3, [r7, #4]
 8016b12:	685b      	ldr	r3, [r3, #4]
 8016b14:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8016b16:	693b      	ldr	r3, [r7, #16]
 8016b18:	7b1a      	ldrb	r2, [r3, #12]
 8016b1a:	7b5b      	ldrb	r3, [r3, #13]
 8016b1c:	021b      	lsls	r3, r3, #8
 8016b1e:	4313      	orrs	r3, r2
 8016b20:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8016b22:	693b      	ldr	r3, [r7, #16]
 8016b24:	781b      	ldrb	r3, [r3, #0]
 8016b26:	f003 0301 	and.w	r3, r3, #1
 8016b2a:	2b00      	cmp	r3, #0
 8016b2c:	d023      	beq.n	8016b76 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8016b2e:	693b      	ldr	r3, [r7, #16]
 8016b30:	781b      	ldrb	r3, [r3, #0]
 8016b32:	2b01      	cmp	r3, #1
 8016b34:	d10f      	bne.n	8016b56 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8016b36:	693b      	ldr	r3, [r7, #16]
 8016b38:	785b      	ldrb	r3, [r3, #1]
 8016b3a:	2b00      	cmp	r3, #0
 8016b3c:	d11b      	bne.n	8016b76 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8016b3e:	693b      	ldr	r3, [r7, #16]
 8016b40:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8016b42:	2b5e      	cmp	r3, #94	@ 0x5e
 8016b44:	d117      	bne.n	8016b76 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8016b46:	687b      	ldr	r3, [r7, #4]
 8016b48:	7b5b      	ldrb	r3, [r3, #13]
 8016b4a:	f043 0310 	orr.w	r3, r3, #16
 8016b4e:	b2da      	uxtb	r2, r3
 8016b50:	687b      	ldr	r3, [r7, #4]
 8016b52:	735a      	strb	r2, [r3, #13]
 8016b54:	e00f      	b.n	8016b76 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8016b56:	693b      	ldr	r3, [r7, #16]
 8016b58:	2206      	movs	r2, #6
 8016b5a:	4928      	ldr	r1, [pc, #160]	@ (8016bfc <ethernet_input+0x118>)
 8016b5c:	4618      	mov	r0, r3
 8016b5e:	f001 f8ac 	bl	8017cba <memcmp>
 8016b62:	4603      	mov	r3, r0
 8016b64:	2b00      	cmp	r3, #0
 8016b66:	d106      	bne.n	8016b76 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8016b68:	687b      	ldr	r3, [r7, #4]
 8016b6a:	7b5b      	ldrb	r3, [r3, #13]
 8016b6c:	f043 0308 	orr.w	r3, r3, #8
 8016b70:	b2da      	uxtb	r2, r3
 8016b72:	687b      	ldr	r3, [r7, #4]
 8016b74:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8016b76:	89fb      	ldrh	r3, [r7, #14]
 8016b78:	2b08      	cmp	r3, #8
 8016b7a:	d003      	beq.n	8016b84 <ethernet_input+0xa0>
 8016b7c:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8016b80:	d014      	beq.n	8016bac <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8016b82:	e032      	b.n	8016bea <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016b84:	683b      	ldr	r3, [r7, #0]
 8016b86:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8016b8a:	f003 0308 	and.w	r3, r3, #8
 8016b8e:	2b00      	cmp	r3, #0
 8016b90:	d024      	beq.n	8016bdc <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8016b92:	8afb      	ldrh	r3, [r7, #22]
 8016b94:	4619      	mov	r1, r3
 8016b96:	6878      	ldr	r0, [r7, #4]
 8016b98:	f7f7 f948 	bl	800de2c <pbuf_remove_header>
 8016b9c:	4603      	mov	r3, r0
 8016b9e:	2b00      	cmp	r3, #0
 8016ba0:	d11e      	bne.n	8016be0 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8016ba2:	6839      	ldr	r1, [r7, #0]
 8016ba4:	6878      	ldr	r0, [r7, #4]
 8016ba6:	f7fe ff21 	bl	80159ec <ip4_input>
      break;
 8016baa:	e013      	b.n	8016bd4 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016bac:	683b      	ldr	r3, [r7, #0]
 8016bae:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8016bb2:	f003 0308 	and.w	r3, r3, #8
 8016bb6:	2b00      	cmp	r3, #0
 8016bb8:	d014      	beq.n	8016be4 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8016bba:	8afb      	ldrh	r3, [r7, #22]
 8016bbc:	4619      	mov	r1, r3
 8016bbe:	6878      	ldr	r0, [r7, #4]
 8016bc0:	f7f7 f934 	bl	800de2c <pbuf_remove_header>
 8016bc4:	4603      	mov	r3, r0
 8016bc6:	2b00      	cmp	r3, #0
 8016bc8:	d10e      	bne.n	8016be8 <ethernet_input+0x104>
        etharp_input(p, netif);
 8016bca:	6839      	ldr	r1, [r7, #0]
 8016bcc:	6878      	ldr	r0, [r7, #4]
 8016bce:	f7fe f8c1 	bl	8014d54 <etharp_input>
      break;
 8016bd2:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8016bd4:	2300      	movs	r3, #0
 8016bd6:	e00c      	b.n	8016bf2 <ethernet_input+0x10e>
    goto free_and_return;
 8016bd8:	bf00      	nop
 8016bda:	e006      	b.n	8016bea <ethernet_input+0x106>
        goto free_and_return;
 8016bdc:	bf00      	nop
 8016bde:	e004      	b.n	8016bea <ethernet_input+0x106>
        goto free_and_return;
 8016be0:	bf00      	nop
 8016be2:	e002      	b.n	8016bea <ethernet_input+0x106>
        goto free_and_return;
 8016be4:	bf00      	nop
 8016be6:	e000      	b.n	8016bea <ethernet_input+0x106>
        goto free_and_return;
 8016be8:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8016bea:	6878      	ldr	r0, [r7, #4]
 8016bec:	f7f7 f9a4 	bl	800df38 <pbuf_free>
  return ERR_OK;
 8016bf0:	2300      	movs	r3, #0
}
 8016bf2:	4618      	mov	r0, r3
 8016bf4:	3718      	adds	r7, #24
 8016bf6:	46bd      	mov	sp, r7
 8016bf8:	bd80      	pop	{r7, pc}
 8016bfa:	bf00      	nop
 8016bfc:	080233f0 	.word	0x080233f0

08016c00 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8016c00:	b580      	push	{r7, lr}
 8016c02:	b086      	sub	sp, #24
 8016c04:	af00      	add	r7, sp, #0
 8016c06:	60f8      	str	r0, [r7, #12]
 8016c08:	60b9      	str	r1, [r7, #8]
 8016c0a:	607a      	str	r2, [r7, #4]
 8016c0c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8016c0e:	8c3b      	ldrh	r3, [r7, #32]
 8016c10:	4618      	mov	r0, r3
 8016c12:	f7f5 fb69 	bl	800c2e8 <lwip_htons>
 8016c16:	4603      	mov	r3, r0
 8016c18:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8016c1a:	210e      	movs	r1, #14
 8016c1c:	68b8      	ldr	r0, [r7, #8]
 8016c1e:	f7f7 f8f5 	bl	800de0c <pbuf_add_header>
 8016c22:	4603      	mov	r3, r0
 8016c24:	2b00      	cmp	r3, #0
 8016c26:	d125      	bne.n	8016c74 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8016c28:	68bb      	ldr	r3, [r7, #8]
 8016c2a:	685b      	ldr	r3, [r3, #4]
 8016c2c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8016c2e:	693b      	ldr	r3, [r7, #16]
 8016c30:	8afa      	ldrh	r2, [r7, #22]
 8016c32:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8016c34:	693b      	ldr	r3, [r7, #16]
 8016c36:	2206      	movs	r2, #6
 8016c38:	6839      	ldr	r1, [r7, #0]
 8016c3a:	4618      	mov	r0, r3
 8016c3c:	f001 f91d 	bl	8017e7a <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8016c40:	693b      	ldr	r3, [r7, #16]
 8016c42:	3306      	adds	r3, #6
 8016c44:	2206      	movs	r2, #6
 8016c46:	6879      	ldr	r1, [r7, #4]
 8016c48:	4618      	mov	r0, r3
 8016c4a:	f001 f916 	bl	8017e7a <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8016c4e:	68fb      	ldr	r3, [r7, #12]
 8016c50:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8016c54:	2b06      	cmp	r3, #6
 8016c56:	d006      	beq.n	8016c66 <ethernet_output+0x66>
 8016c58:	4b0a      	ldr	r3, [pc, #40]	@ (8016c84 <ethernet_output+0x84>)
 8016c5a:	f44f 7299 	mov.w	r2, #306	@ 0x132
 8016c5e:	490a      	ldr	r1, [pc, #40]	@ (8016c88 <ethernet_output+0x88>)
 8016c60:	480a      	ldr	r0, [pc, #40]	@ (8016c8c <ethernet_output+0x8c>)
 8016c62:	f000 ffb3 	bl	8017bcc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8016c66:	68fb      	ldr	r3, [r7, #12]
 8016c68:	699b      	ldr	r3, [r3, #24]
 8016c6a:	68b9      	ldr	r1, [r7, #8]
 8016c6c:	68f8      	ldr	r0, [r7, #12]
 8016c6e:	4798      	blx	r3
 8016c70:	4603      	mov	r3, r0
 8016c72:	e002      	b.n	8016c7a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8016c74:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8016c76:	f06f 0301 	mvn.w	r3, #1
}
 8016c7a:	4618      	mov	r0, r3
 8016c7c:	3718      	adds	r7, #24
 8016c7e:	46bd      	mov	sp, r7
 8016c80:	bd80      	pop	{r7, pc}
 8016c82:	bf00      	nop
 8016c84:	0802325c 	.word	0x0802325c
 8016c88:	08023294 	.word	0x08023294
 8016c8c:	080232c8 	.word	0x080232c8

08016c90 <atof>:
 8016c90:	2100      	movs	r1, #0
 8016c92:	f000 be49 	b.w	8017928 <strtod>

08016c96 <atoi>:
 8016c96:	220a      	movs	r2, #10
 8016c98:	2100      	movs	r1, #0
 8016c9a:	f000 becb 	b.w	8017a34 <strtol>

08016c9e <atol>:
 8016c9e:	220a      	movs	r2, #10
 8016ca0:	2100      	movs	r1, #0
 8016ca2:	f000 bec7 	b.w	8017a34 <strtol>
	...

08016ca8 <rand>:
 8016ca8:	4b16      	ldr	r3, [pc, #88]	@ (8016d04 <rand+0x5c>)
 8016caa:	b510      	push	{r4, lr}
 8016cac:	681c      	ldr	r4, [r3, #0]
 8016cae:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016cb0:	b9b3      	cbnz	r3, 8016ce0 <rand+0x38>
 8016cb2:	2018      	movs	r0, #24
 8016cb4:	f001 fc9a 	bl	80185ec <malloc>
 8016cb8:	4602      	mov	r2, r0
 8016cba:	6320      	str	r0, [r4, #48]	@ 0x30
 8016cbc:	b920      	cbnz	r0, 8016cc8 <rand+0x20>
 8016cbe:	4b12      	ldr	r3, [pc, #72]	@ (8016d08 <rand+0x60>)
 8016cc0:	4812      	ldr	r0, [pc, #72]	@ (8016d0c <rand+0x64>)
 8016cc2:	2152      	movs	r1, #82	@ 0x52
 8016cc4:	f001 f8f0 	bl	8017ea8 <__assert_func>
 8016cc8:	4911      	ldr	r1, [pc, #68]	@ (8016d10 <rand+0x68>)
 8016cca:	4b12      	ldr	r3, [pc, #72]	@ (8016d14 <rand+0x6c>)
 8016ccc:	e9c0 1300 	strd	r1, r3, [r0]
 8016cd0:	4b11      	ldr	r3, [pc, #68]	@ (8016d18 <rand+0x70>)
 8016cd2:	6083      	str	r3, [r0, #8]
 8016cd4:	230b      	movs	r3, #11
 8016cd6:	8183      	strh	r3, [r0, #12]
 8016cd8:	2100      	movs	r1, #0
 8016cda:	2001      	movs	r0, #1
 8016cdc:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8016ce0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8016ce2:	480e      	ldr	r0, [pc, #56]	@ (8016d1c <rand+0x74>)
 8016ce4:	690b      	ldr	r3, [r1, #16]
 8016ce6:	694c      	ldr	r4, [r1, #20]
 8016ce8:	4a0d      	ldr	r2, [pc, #52]	@ (8016d20 <rand+0x78>)
 8016cea:	4358      	muls	r0, r3
 8016cec:	fb02 0004 	mla	r0, r2, r4, r0
 8016cf0:	fba3 3202 	umull	r3, r2, r3, r2
 8016cf4:	3301      	adds	r3, #1
 8016cf6:	eb40 0002 	adc.w	r0, r0, r2
 8016cfa:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8016cfe:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8016d02:	bd10      	pop	{r4, pc}
 8016d04:	20000a94 	.word	0x20000a94
 8016d08:	080233fe 	.word	0x080233fe
 8016d0c:	08023415 	.word	0x08023415
 8016d10:	abcd330e 	.word	0xabcd330e
 8016d14:	e66d1234 	.word	0xe66d1234
 8016d18:	0005deec 	.word	0x0005deec
 8016d1c:	5851f42d 	.word	0x5851f42d
 8016d20:	4c957f2d 	.word	0x4c957f2d

08016d24 <sulp>:
 8016d24:	b570      	push	{r4, r5, r6, lr}
 8016d26:	4604      	mov	r4, r0
 8016d28:	460d      	mov	r5, r1
 8016d2a:	ec45 4b10 	vmov	d0, r4, r5
 8016d2e:	4616      	mov	r6, r2
 8016d30:	f002 f890 	bl	8018e54 <__ulp>
 8016d34:	ec51 0b10 	vmov	r0, r1, d0
 8016d38:	b17e      	cbz	r6, 8016d5a <sulp+0x36>
 8016d3a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8016d3e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8016d42:	2b00      	cmp	r3, #0
 8016d44:	dd09      	ble.n	8016d5a <sulp+0x36>
 8016d46:	051b      	lsls	r3, r3, #20
 8016d48:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8016d4c:	2400      	movs	r4, #0
 8016d4e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8016d52:	4622      	mov	r2, r4
 8016d54:	462b      	mov	r3, r5
 8016d56:	f7e9 fc5f 	bl	8000618 <__aeabi_dmul>
 8016d5a:	ec41 0b10 	vmov	d0, r0, r1
 8016d5e:	bd70      	pop	{r4, r5, r6, pc}

08016d60 <_strtod_l>:
 8016d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d64:	b09f      	sub	sp, #124	@ 0x7c
 8016d66:	460c      	mov	r4, r1
 8016d68:	9217      	str	r2, [sp, #92]	@ 0x5c
 8016d6a:	2200      	movs	r2, #0
 8016d6c:	921a      	str	r2, [sp, #104]	@ 0x68
 8016d6e:	9005      	str	r0, [sp, #20]
 8016d70:	f04f 0a00 	mov.w	sl, #0
 8016d74:	f04f 0b00 	mov.w	fp, #0
 8016d78:	460a      	mov	r2, r1
 8016d7a:	9219      	str	r2, [sp, #100]	@ 0x64
 8016d7c:	7811      	ldrb	r1, [r2, #0]
 8016d7e:	292b      	cmp	r1, #43	@ 0x2b
 8016d80:	d04a      	beq.n	8016e18 <_strtod_l+0xb8>
 8016d82:	d838      	bhi.n	8016df6 <_strtod_l+0x96>
 8016d84:	290d      	cmp	r1, #13
 8016d86:	d832      	bhi.n	8016dee <_strtod_l+0x8e>
 8016d88:	2908      	cmp	r1, #8
 8016d8a:	d832      	bhi.n	8016df2 <_strtod_l+0x92>
 8016d8c:	2900      	cmp	r1, #0
 8016d8e:	d03b      	beq.n	8016e08 <_strtod_l+0xa8>
 8016d90:	2200      	movs	r2, #0
 8016d92:	920e      	str	r2, [sp, #56]	@ 0x38
 8016d94:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8016d96:	782a      	ldrb	r2, [r5, #0]
 8016d98:	2a30      	cmp	r2, #48	@ 0x30
 8016d9a:	f040 80b2 	bne.w	8016f02 <_strtod_l+0x1a2>
 8016d9e:	786a      	ldrb	r2, [r5, #1]
 8016da0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8016da4:	2a58      	cmp	r2, #88	@ 0x58
 8016da6:	d16e      	bne.n	8016e86 <_strtod_l+0x126>
 8016da8:	9302      	str	r3, [sp, #8]
 8016daa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016dac:	9301      	str	r3, [sp, #4]
 8016dae:	ab1a      	add	r3, sp, #104	@ 0x68
 8016db0:	9300      	str	r3, [sp, #0]
 8016db2:	4a8f      	ldr	r2, [pc, #572]	@ (8016ff0 <_strtod_l+0x290>)
 8016db4:	9805      	ldr	r0, [sp, #20]
 8016db6:	ab1b      	add	r3, sp, #108	@ 0x6c
 8016db8:	a919      	add	r1, sp, #100	@ 0x64
 8016dba:	f001 f945 	bl	8018048 <__gethex>
 8016dbe:	f010 060f 	ands.w	r6, r0, #15
 8016dc2:	4604      	mov	r4, r0
 8016dc4:	d005      	beq.n	8016dd2 <_strtod_l+0x72>
 8016dc6:	2e06      	cmp	r6, #6
 8016dc8:	d128      	bne.n	8016e1c <_strtod_l+0xbc>
 8016dca:	3501      	adds	r5, #1
 8016dcc:	2300      	movs	r3, #0
 8016dce:	9519      	str	r5, [sp, #100]	@ 0x64
 8016dd0:	930e      	str	r3, [sp, #56]	@ 0x38
 8016dd2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8016dd4:	2b00      	cmp	r3, #0
 8016dd6:	f040 858e 	bne.w	80178f6 <_strtod_l+0xb96>
 8016dda:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016ddc:	b1cb      	cbz	r3, 8016e12 <_strtod_l+0xb2>
 8016dde:	4652      	mov	r2, sl
 8016de0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8016de4:	ec43 2b10 	vmov	d0, r2, r3
 8016de8:	b01f      	add	sp, #124	@ 0x7c
 8016dea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016dee:	2920      	cmp	r1, #32
 8016df0:	d1ce      	bne.n	8016d90 <_strtod_l+0x30>
 8016df2:	3201      	adds	r2, #1
 8016df4:	e7c1      	b.n	8016d7a <_strtod_l+0x1a>
 8016df6:	292d      	cmp	r1, #45	@ 0x2d
 8016df8:	d1ca      	bne.n	8016d90 <_strtod_l+0x30>
 8016dfa:	2101      	movs	r1, #1
 8016dfc:	910e      	str	r1, [sp, #56]	@ 0x38
 8016dfe:	1c51      	adds	r1, r2, #1
 8016e00:	9119      	str	r1, [sp, #100]	@ 0x64
 8016e02:	7852      	ldrb	r2, [r2, #1]
 8016e04:	2a00      	cmp	r2, #0
 8016e06:	d1c5      	bne.n	8016d94 <_strtod_l+0x34>
 8016e08:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8016e0a:	9419      	str	r4, [sp, #100]	@ 0x64
 8016e0c:	2b00      	cmp	r3, #0
 8016e0e:	f040 8570 	bne.w	80178f2 <_strtod_l+0xb92>
 8016e12:	4652      	mov	r2, sl
 8016e14:	465b      	mov	r3, fp
 8016e16:	e7e5      	b.n	8016de4 <_strtod_l+0x84>
 8016e18:	2100      	movs	r1, #0
 8016e1a:	e7ef      	b.n	8016dfc <_strtod_l+0x9c>
 8016e1c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8016e1e:	b13a      	cbz	r2, 8016e30 <_strtod_l+0xd0>
 8016e20:	2135      	movs	r1, #53	@ 0x35
 8016e22:	a81c      	add	r0, sp, #112	@ 0x70
 8016e24:	f002 f910 	bl	8019048 <__copybits>
 8016e28:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8016e2a:	9805      	ldr	r0, [sp, #20]
 8016e2c:	f001 fce6 	bl	80187fc <_Bfree>
 8016e30:	3e01      	subs	r6, #1
 8016e32:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8016e34:	2e04      	cmp	r6, #4
 8016e36:	d806      	bhi.n	8016e46 <_strtod_l+0xe6>
 8016e38:	e8df f006 	tbb	[pc, r6]
 8016e3c:	201d0314 	.word	0x201d0314
 8016e40:	14          	.byte	0x14
 8016e41:	00          	.byte	0x00
 8016e42:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8016e46:	05e1      	lsls	r1, r4, #23
 8016e48:	bf48      	it	mi
 8016e4a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8016e4e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8016e52:	0d1b      	lsrs	r3, r3, #20
 8016e54:	051b      	lsls	r3, r3, #20
 8016e56:	2b00      	cmp	r3, #0
 8016e58:	d1bb      	bne.n	8016dd2 <_strtod_l+0x72>
 8016e5a:	f000 ffd9 	bl	8017e10 <__errno>
 8016e5e:	2322      	movs	r3, #34	@ 0x22
 8016e60:	6003      	str	r3, [r0, #0]
 8016e62:	e7b6      	b.n	8016dd2 <_strtod_l+0x72>
 8016e64:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8016e68:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8016e6c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8016e70:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8016e74:	e7e7      	b.n	8016e46 <_strtod_l+0xe6>
 8016e76:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8016ff8 <_strtod_l+0x298>
 8016e7a:	e7e4      	b.n	8016e46 <_strtod_l+0xe6>
 8016e7c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8016e80:	f04f 3aff 	mov.w	sl, #4294967295
 8016e84:	e7df      	b.n	8016e46 <_strtod_l+0xe6>
 8016e86:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016e88:	1c5a      	adds	r2, r3, #1
 8016e8a:	9219      	str	r2, [sp, #100]	@ 0x64
 8016e8c:	785b      	ldrb	r3, [r3, #1]
 8016e8e:	2b30      	cmp	r3, #48	@ 0x30
 8016e90:	d0f9      	beq.n	8016e86 <_strtod_l+0x126>
 8016e92:	2b00      	cmp	r3, #0
 8016e94:	d09d      	beq.n	8016dd2 <_strtod_l+0x72>
 8016e96:	2301      	movs	r3, #1
 8016e98:	2700      	movs	r7, #0
 8016e9a:	9308      	str	r3, [sp, #32]
 8016e9c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016e9e:	930c      	str	r3, [sp, #48]	@ 0x30
 8016ea0:	970b      	str	r7, [sp, #44]	@ 0x2c
 8016ea2:	46b9      	mov	r9, r7
 8016ea4:	220a      	movs	r2, #10
 8016ea6:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8016ea8:	7805      	ldrb	r5, [r0, #0]
 8016eaa:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8016eae:	b2d9      	uxtb	r1, r3
 8016eb0:	2909      	cmp	r1, #9
 8016eb2:	d928      	bls.n	8016f06 <_strtod_l+0x1a6>
 8016eb4:	494f      	ldr	r1, [pc, #316]	@ (8016ff4 <_strtod_l+0x294>)
 8016eb6:	2201      	movs	r2, #1
 8016eb8:	f000 ff3e 	bl	8017d38 <strncmp>
 8016ebc:	2800      	cmp	r0, #0
 8016ebe:	d032      	beq.n	8016f26 <_strtod_l+0x1c6>
 8016ec0:	2000      	movs	r0, #0
 8016ec2:	462a      	mov	r2, r5
 8016ec4:	900a      	str	r0, [sp, #40]	@ 0x28
 8016ec6:	464d      	mov	r5, r9
 8016ec8:	4603      	mov	r3, r0
 8016eca:	2a65      	cmp	r2, #101	@ 0x65
 8016ecc:	d001      	beq.n	8016ed2 <_strtod_l+0x172>
 8016ece:	2a45      	cmp	r2, #69	@ 0x45
 8016ed0:	d114      	bne.n	8016efc <_strtod_l+0x19c>
 8016ed2:	b91d      	cbnz	r5, 8016edc <_strtod_l+0x17c>
 8016ed4:	9a08      	ldr	r2, [sp, #32]
 8016ed6:	4302      	orrs	r2, r0
 8016ed8:	d096      	beq.n	8016e08 <_strtod_l+0xa8>
 8016eda:	2500      	movs	r5, #0
 8016edc:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8016ede:	1c62      	adds	r2, r4, #1
 8016ee0:	9219      	str	r2, [sp, #100]	@ 0x64
 8016ee2:	7862      	ldrb	r2, [r4, #1]
 8016ee4:	2a2b      	cmp	r2, #43	@ 0x2b
 8016ee6:	d07a      	beq.n	8016fde <_strtod_l+0x27e>
 8016ee8:	2a2d      	cmp	r2, #45	@ 0x2d
 8016eea:	d07e      	beq.n	8016fea <_strtod_l+0x28a>
 8016eec:	f04f 0c00 	mov.w	ip, #0
 8016ef0:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8016ef4:	2909      	cmp	r1, #9
 8016ef6:	f240 8085 	bls.w	8017004 <_strtod_l+0x2a4>
 8016efa:	9419      	str	r4, [sp, #100]	@ 0x64
 8016efc:	f04f 0800 	mov.w	r8, #0
 8016f00:	e0a5      	b.n	801704e <_strtod_l+0x2ee>
 8016f02:	2300      	movs	r3, #0
 8016f04:	e7c8      	b.n	8016e98 <_strtod_l+0x138>
 8016f06:	f1b9 0f08 	cmp.w	r9, #8
 8016f0a:	bfd8      	it	le
 8016f0c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8016f0e:	f100 0001 	add.w	r0, r0, #1
 8016f12:	bfda      	itte	le
 8016f14:	fb02 3301 	mlale	r3, r2, r1, r3
 8016f18:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8016f1a:	fb02 3707 	mlagt	r7, r2, r7, r3
 8016f1e:	f109 0901 	add.w	r9, r9, #1
 8016f22:	9019      	str	r0, [sp, #100]	@ 0x64
 8016f24:	e7bf      	b.n	8016ea6 <_strtod_l+0x146>
 8016f26:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016f28:	1c5a      	adds	r2, r3, #1
 8016f2a:	9219      	str	r2, [sp, #100]	@ 0x64
 8016f2c:	785a      	ldrb	r2, [r3, #1]
 8016f2e:	f1b9 0f00 	cmp.w	r9, #0
 8016f32:	d03b      	beq.n	8016fac <_strtod_l+0x24c>
 8016f34:	900a      	str	r0, [sp, #40]	@ 0x28
 8016f36:	464d      	mov	r5, r9
 8016f38:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8016f3c:	2b09      	cmp	r3, #9
 8016f3e:	d912      	bls.n	8016f66 <_strtod_l+0x206>
 8016f40:	2301      	movs	r3, #1
 8016f42:	e7c2      	b.n	8016eca <_strtod_l+0x16a>
 8016f44:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016f46:	1c5a      	adds	r2, r3, #1
 8016f48:	9219      	str	r2, [sp, #100]	@ 0x64
 8016f4a:	785a      	ldrb	r2, [r3, #1]
 8016f4c:	3001      	adds	r0, #1
 8016f4e:	2a30      	cmp	r2, #48	@ 0x30
 8016f50:	d0f8      	beq.n	8016f44 <_strtod_l+0x1e4>
 8016f52:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8016f56:	2b08      	cmp	r3, #8
 8016f58:	f200 84d2 	bhi.w	8017900 <_strtod_l+0xba0>
 8016f5c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016f5e:	900a      	str	r0, [sp, #40]	@ 0x28
 8016f60:	2000      	movs	r0, #0
 8016f62:	930c      	str	r3, [sp, #48]	@ 0x30
 8016f64:	4605      	mov	r5, r0
 8016f66:	3a30      	subs	r2, #48	@ 0x30
 8016f68:	f100 0301 	add.w	r3, r0, #1
 8016f6c:	d018      	beq.n	8016fa0 <_strtod_l+0x240>
 8016f6e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8016f70:	4419      	add	r1, r3
 8016f72:	910a      	str	r1, [sp, #40]	@ 0x28
 8016f74:	462e      	mov	r6, r5
 8016f76:	f04f 0e0a 	mov.w	lr, #10
 8016f7a:	1c71      	adds	r1, r6, #1
 8016f7c:	eba1 0c05 	sub.w	ip, r1, r5
 8016f80:	4563      	cmp	r3, ip
 8016f82:	dc15      	bgt.n	8016fb0 <_strtod_l+0x250>
 8016f84:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8016f88:	182b      	adds	r3, r5, r0
 8016f8a:	2b08      	cmp	r3, #8
 8016f8c:	f105 0501 	add.w	r5, r5, #1
 8016f90:	4405      	add	r5, r0
 8016f92:	dc1a      	bgt.n	8016fca <_strtod_l+0x26a>
 8016f94:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8016f96:	230a      	movs	r3, #10
 8016f98:	fb03 2301 	mla	r3, r3, r1, r2
 8016f9c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016f9e:	2300      	movs	r3, #0
 8016fa0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8016fa2:	1c51      	adds	r1, r2, #1
 8016fa4:	9119      	str	r1, [sp, #100]	@ 0x64
 8016fa6:	7852      	ldrb	r2, [r2, #1]
 8016fa8:	4618      	mov	r0, r3
 8016faa:	e7c5      	b.n	8016f38 <_strtod_l+0x1d8>
 8016fac:	4648      	mov	r0, r9
 8016fae:	e7ce      	b.n	8016f4e <_strtod_l+0x1ee>
 8016fb0:	2e08      	cmp	r6, #8
 8016fb2:	dc05      	bgt.n	8016fc0 <_strtod_l+0x260>
 8016fb4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8016fb6:	fb0e f606 	mul.w	r6, lr, r6
 8016fba:	960b      	str	r6, [sp, #44]	@ 0x2c
 8016fbc:	460e      	mov	r6, r1
 8016fbe:	e7dc      	b.n	8016f7a <_strtod_l+0x21a>
 8016fc0:	2910      	cmp	r1, #16
 8016fc2:	bfd8      	it	le
 8016fc4:	fb0e f707 	mulle.w	r7, lr, r7
 8016fc8:	e7f8      	b.n	8016fbc <_strtod_l+0x25c>
 8016fca:	2b0f      	cmp	r3, #15
 8016fcc:	bfdc      	itt	le
 8016fce:	230a      	movle	r3, #10
 8016fd0:	fb03 2707 	mlale	r7, r3, r7, r2
 8016fd4:	e7e3      	b.n	8016f9e <_strtod_l+0x23e>
 8016fd6:	2300      	movs	r3, #0
 8016fd8:	930a      	str	r3, [sp, #40]	@ 0x28
 8016fda:	2301      	movs	r3, #1
 8016fdc:	e77a      	b.n	8016ed4 <_strtod_l+0x174>
 8016fde:	f04f 0c00 	mov.w	ip, #0
 8016fe2:	1ca2      	adds	r2, r4, #2
 8016fe4:	9219      	str	r2, [sp, #100]	@ 0x64
 8016fe6:	78a2      	ldrb	r2, [r4, #2]
 8016fe8:	e782      	b.n	8016ef0 <_strtod_l+0x190>
 8016fea:	f04f 0c01 	mov.w	ip, #1
 8016fee:	e7f8      	b.n	8016fe2 <_strtod_l+0x282>
 8016ff0:	080235d0 	.word	0x080235d0
 8016ff4:	0802346d 	.word	0x0802346d
 8016ff8:	7ff00000 	.word	0x7ff00000
 8016ffc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8016ffe:	1c51      	adds	r1, r2, #1
 8017000:	9119      	str	r1, [sp, #100]	@ 0x64
 8017002:	7852      	ldrb	r2, [r2, #1]
 8017004:	2a30      	cmp	r2, #48	@ 0x30
 8017006:	d0f9      	beq.n	8016ffc <_strtod_l+0x29c>
 8017008:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 801700c:	2908      	cmp	r1, #8
 801700e:	f63f af75 	bhi.w	8016efc <_strtod_l+0x19c>
 8017012:	3a30      	subs	r2, #48	@ 0x30
 8017014:	9209      	str	r2, [sp, #36]	@ 0x24
 8017016:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8017018:	920f      	str	r2, [sp, #60]	@ 0x3c
 801701a:	f04f 080a 	mov.w	r8, #10
 801701e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8017020:	1c56      	adds	r6, r2, #1
 8017022:	9619      	str	r6, [sp, #100]	@ 0x64
 8017024:	7852      	ldrb	r2, [r2, #1]
 8017026:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 801702a:	f1be 0f09 	cmp.w	lr, #9
 801702e:	d939      	bls.n	80170a4 <_strtod_l+0x344>
 8017030:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8017032:	1a76      	subs	r6, r6, r1
 8017034:	2e08      	cmp	r6, #8
 8017036:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 801703a:	dc03      	bgt.n	8017044 <_strtod_l+0x2e4>
 801703c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801703e:	4588      	cmp	r8, r1
 8017040:	bfa8      	it	ge
 8017042:	4688      	movge	r8, r1
 8017044:	f1bc 0f00 	cmp.w	ip, #0
 8017048:	d001      	beq.n	801704e <_strtod_l+0x2ee>
 801704a:	f1c8 0800 	rsb	r8, r8, #0
 801704e:	2d00      	cmp	r5, #0
 8017050:	d14e      	bne.n	80170f0 <_strtod_l+0x390>
 8017052:	9908      	ldr	r1, [sp, #32]
 8017054:	4308      	orrs	r0, r1
 8017056:	f47f aebc 	bne.w	8016dd2 <_strtod_l+0x72>
 801705a:	2b00      	cmp	r3, #0
 801705c:	f47f aed4 	bne.w	8016e08 <_strtod_l+0xa8>
 8017060:	2a69      	cmp	r2, #105	@ 0x69
 8017062:	d028      	beq.n	80170b6 <_strtod_l+0x356>
 8017064:	dc25      	bgt.n	80170b2 <_strtod_l+0x352>
 8017066:	2a49      	cmp	r2, #73	@ 0x49
 8017068:	d025      	beq.n	80170b6 <_strtod_l+0x356>
 801706a:	2a4e      	cmp	r2, #78	@ 0x4e
 801706c:	f47f aecc 	bne.w	8016e08 <_strtod_l+0xa8>
 8017070:	499a      	ldr	r1, [pc, #616]	@ (80172dc <_strtod_l+0x57c>)
 8017072:	a819      	add	r0, sp, #100	@ 0x64
 8017074:	f001 fa0a 	bl	801848c <__match>
 8017078:	2800      	cmp	r0, #0
 801707a:	f43f aec5 	beq.w	8016e08 <_strtod_l+0xa8>
 801707e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8017080:	781b      	ldrb	r3, [r3, #0]
 8017082:	2b28      	cmp	r3, #40	@ 0x28
 8017084:	d12e      	bne.n	80170e4 <_strtod_l+0x384>
 8017086:	4996      	ldr	r1, [pc, #600]	@ (80172e0 <_strtod_l+0x580>)
 8017088:	aa1c      	add	r2, sp, #112	@ 0x70
 801708a:	a819      	add	r0, sp, #100	@ 0x64
 801708c:	f001 fa12 	bl	80184b4 <__hexnan>
 8017090:	2805      	cmp	r0, #5
 8017092:	d127      	bne.n	80170e4 <_strtod_l+0x384>
 8017094:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8017096:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 801709a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 801709e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80170a2:	e696      	b.n	8016dd2 <_strtod_l+0x72>
 80170a4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80170a6:	fb08 2101 	mla	r1, r8, r1, r2
 80170aa:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80170ae:	9209      	str	r2, [sp, #36]	@ 0x24
 80170b0:	e7b5      	b.n	801701e <_strtod_l+0x2be>
 80170b2:	2a6e      	cmp	r2, #110	@ 0x6e
 80170b4:	e7da      	b.n	801706c <_strtod_l+0x30c>
 80170b6:	498b      	ldr	r1, [pc, #556]	@ (80172e4 <_strtod_l+0x584>)
 80170b8:	a819      	add	r0, sp, #100	@ 0x64
 80170ba:	f001 f9e7 	bl	801848c <__match>
 80170be:	2800      	cmp	r0, #0
 80170c0:	f43f aea2 	beq.w	8016e08 <_strtod_l+0xa8>
 80170c4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80170c6:	4988      	ldr	r1, [pc, #544]	@ (80172e8 <_strtod_l+0x588>)
 80170c8:	3b01      	subs	r3, #1
 80170ca:	a819      	add	r0, sp, #100	@ 0x64
 80170cc:	9319      	str	r3, [sp, #100]	@ 0x64
 80170ce:	f001 f9dd 	bl	801848c <__match>
 80170d2:	b910      	cbnz	r0, 80170da <_strtod_l+0x37a>
 80170d4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80170d6:	3301      	adds	r3, #1
 80170d8:	9319      	str	r3, [sp, #100]	@ 0x64
 80170da:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 80172f8 <_strtod_l+0x598>
 80170de:	f04f 0a00 	mov.w	sl, #0
 80170e2:	e676      	b.n	8016dd2 <_strtod_l+0x72>
 80170e4:	4881      	ldr	r0, [pc, #516]	@ (80172ec <_strtod_l+0x58c>)
 80170e6:	f000 fed7 	bl	8017e98 <nan>
 80170ea:	ec5b ab10 	vmov	sl, fp, d0
 80170ee:	e670      	b.n	8016dd2 <_strtod_l+0x72>
 80170f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80170f2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80170f4:	eba8 0303 	sub.w	r3, r8, r3
 80170f8:	f1b9 0f00 	cmp.w	r9, #0
 80170fc:	bf08      	it	eq
 80170fe:	46a9      	moveq	r9, r5
 8017100:	2d10      	cmp	r5, #16
 8017102:	9309      	str	r3, [sp, #36]	@ 0x24
 8017104:	462c      	mov	r4, r5
 8017106:	bfa8      	it	ge
 8017108:	2410      	movge	r4, #16
 801710a:	f7e9 fa0b 	bl	8000524 <__aeabi_ui2d>
 801710e:	2d09      	cmp	r5, #9
 8017110:	4682      	mov	sl, r0
 8017112:	468b      	mov	fp, r1
 8017114:	dc13      	bgt.n	801713e <_strtod_l+0x3de>
 8017116:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017118:	2b00      	cmp	r3, #0
 801711a:	f43f ae5a 	beq.w	8016dd2 <_strtod_l+0x72>
 801711e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017120:	dd78      	ble.n	8017214 <_strtod_l+0x4b4>
 8017122:	2b16      	cmp	r3, #22
 8017124:	dc5f      	bgt.n	80171e6 <_strtod_l+0x486>
 8017126:	4972      	ldr	r1, [pc, #456]	@ (80172f0 <_strtod_l+0x590>)
 8017128:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801712c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017130:	4652      	mov	r2, sl
 8017132:	465b      	mov	r3, fp
 8017134:	f7e9 fa70 	bl	8000618 <__aeabi_dmul>
 8017138:	4682      	mov	sl, r0
 801713a:	468b      	mov	fp, r1
 801713c:	e649      	b.n	8016dd2 <_strtod_l+0x72>
 801713e:	4b6c      	ldr	r3, [pc, #432]	@ (80172f0 <_strtod_l+0x590>)
 8017140:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8017144:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8017148:	f7e9 fa66 	bl	8000618 <__aeabi_dmul>
 801714c:	4682      	mov	sl, r0
 801714e:	4638      	mov	r0, r7
 8017150:	468b      	mov	fp, r1
 8017152:	f7e9 f9e7 	bl	8000524 <__aeabi_ui2d>
 8017156:	4602      	mov	r2, r0
 8017158:	460b      	mov	r3, r1
 801715a:	4650      	mov	r0, sl
 801715c:	4659      	mov	r1, fp
 801715e:	f7e9 f8a5 	bl	80002ac <__adddf3>
 8017162:	2d0f      	cmp	r5, #15
 8017164:	4682      	mov	sl, r0
 8017166:	468b      	mov	fp, r1
 8017168:	ddd5      	ble.n	8017116 <_strtod_l+0x3b6>
 801716a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801716c:	1b2c      	subs	r4, r5, r4
 801716e:	441c      	add	r4, r3
 8017170:	2c00      	cmp	r4, #0
 8017172:	f340 8093 	ble.w	801729c <_strtod_l+0x53c>
 8017176:	f014 030f 	ands.w	r3, r4, #15
 801717a:	d00a      	beq.n	8017192 <_strtod_l+0x432>
 801717c:	495c      	ldr	r1, [pc, #368]	@ (80172f0 <_strtod_l+0x590>)
 801717e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8017182:	4652      	mov	r2, sl
 8017184:	465b      	mov	r3, fp
 8017186:	e9d1 0100 	ldrd	r0, r1, [r1]
 801718a:	f7e9 fa45 	bl	8000618 <__aeabi_dmul>
 801718e:	4682      	mov	sl, r0
 8017190:	468b      	mov	fp, r1
 8017192:	f034 040f 	bics.w	r4, r4, #15
 8017196:	d073      	beq.n	8017280 <_strtod_l+0x520>
 8017198:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 801719c:	dd49      	ble.n	8017232 <_strtod_l+0x4d2>
 801719e:	2400      	movs	r4, #0
 80171a0:	46a0      	mov	r8, r4
 80171a2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80171a4:	46a1      	mov	r9, r4
 80171a6:	9a05      	ldr	r2, [sp, #20]
 80171a8:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 80172f8 <_strtod_l+0x598>
 80171ac:	2322      	movs	r3, #34	@ 0x22
 80171ae:	6013      	str	r3, [r2, #0]
 80171b0:	f04f 0a00 	mov.w	sl, #0
 80171b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80171b6:	2b00      	cmp	r3, #0
 80171b8:	f43f ae0b 	beq.w	8016dd2 <_strtod_l+0x72>
 80171bc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80171be:	9805      	ldr	r0, [sp, #20]
 80171c0:	f001 fb1c 	bl	80187fc <_Bfree>
 80171c4:	9805      	ldr	r0, [sp, #20]
 80171c6:	4649      	mov	r1, r9
 80171c8:	f001 fb18 	bl	80187fc <_Bfree>
 80171cc:	9805      	ldr	r0, [sp, #20]
 80171ce:	4641      	mov	r1, r8
 80171d0:	f001 fb14 	bl	80187fc <_Bfree>
 80171d4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80171d6:	9805      	ldr	r0, [sp, #20]
 80171d8:	f001 fb10 	bl	80187fc <_Bfree>
 80171dc:	9805      	ldr	r0, [sp, #20]
 80171de:	4621      	mov	r1, r4
 80171e0:	f001 fb0c 	bl	80187fc <_Bfree>
 80171e4:	e5f5      	b.n	8016dd2 <_strtod_l+0x72>
 80171e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80171e8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80171ec:	4293      	cmp	r3, r2
 80171ee:	dbbc      	blt.n	801716a <_strtod_l+0x40a>
 80171f0:	4c3f      	ldr	r4, [pc, #252]	@ (80172f0 <_strtod_l+0x590>)
 80171f2:	f1c5 050f 	rsb	r5, r5, #15
 80171f6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80171fa:	4652      	mov	r2, sl
 80171fc:	465b      	mov	r3, fp
 80171fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017202:	f7e9 fa09 	bl	8000618 <__aeabi_dmul>
 8017206:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017208:	1b5d      	subs	r5, r3, r5
 801720a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801720e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8017212:	e78f      	b.n	8017134 <_strtod_l+0x3d4>
 8017214:	3316      	adds	r3, #22
 8017216:	dba8      	blt.n	801716a <_strtod_l+0x40a>
 8017218:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801721a:	eba3 0808 	sub.w	r8, r3, r8
 801721e:	4b34      	ldr	r3, [pc, #208]	@ (80172f0 <_strtod_l+0x590>)
 8017220:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8017224:	e9d8 2300 	ldrd	r2, r3, [r8]
 8017228:	4650      	mov	r0, sl
 801722a:	4659      	mov	r1, fp
 801722c:	f7e9 fb1e 	bl	800086c <__aeabi_ddiv>
 8017230:	e782      	b.n	8017138 <_strtod_l+0x3d8>
 8017232:	2300      	movs	r3, #0
 8017234:	4f2f      	ldr	r7, [pc, #188]	@ (80172f4 <_strtod_l+0x594>)
 8017236:	1124      	asrs	r4, r4, #4
 8017238:	4650      	mov	r0, sl
 801723a:	4659      	mov	r1, fp
 801723c:	461e      	mov	r6, r3
 801723e:	2c01      	cmp	r4, #1
 8017240:	dc21      	bgt.n	8017286 <_strtod_l+0x526>
 8017242:	b10b      	cbz	r3, 8017248 <_strtod_l+0x4e8>
 8017244:	4682      	mov	sl, r0
 8017246:	468b      	mov	fp, r1
 8017248:	492a      	ldr	r1, [pc, #168]	@ (80172f4 <_strtod_l+0x594>)
 801724a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 801724e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8017252:	4652      	mov	r2, sl
 8017254:	465b      	mov	r3, fp
 8017256:	e9d1 0100 	ldrd	r0, r1, [r1]
 801725a:	f7e9 f9dd 	bl	8000618 <__aeabi_dmul>
 801725e:	4b26      	ldr	r3, [pc, #152]	@ (80172f8 <_strtod_l+0x598>)
 8017260:	460a      	mov	r2, r1
 8017262:	400b      	ands	r3, r1
 8017264:	4925      	ldr	r1, [pc, #148]	@ (80172fc <_strtod_l+0x59c>)
 8017266:	428b      	cmp	r3, r1
 8017268:	4682      	mov	sl, r0
 801726a:	d898      	bhi.n	801719e <_strtod_l+0x43e>
 801726c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8017270:	428b      	cmp	r3, r1
 8017272:	bf86      	itte	hi
 8017274:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8017300 <_strtod_l+0x5a0>
 8017278:	f04f 3aff 	movhi.w	sl, #4294967295
 801727c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8017280:	2300      	movs	r3, #0
 8017282:	9308      	str	r3, [sp, #32]
 8017284:	e076      	b.n	8017374 <_strtod_l+0x614>
 8017286:	07e2      	lsls	r2, r4, #31
 8017288:	d504      	bpl.n	8017294 <_strtod_l+0x534>
 801728a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801728e:	f7e9 f9c3 	bl	8000618 <__aeabi_dmul>
 8017292:	2301      	movs	r3, #1
 8017294:	3601      	adds	r6, #1
 8017296:	1064      	asrs	r4, r4, #1
 8017298:	3708      	adds	r7, #8
 801729a:	e7d0      	b.n	801723e <_strtod_l+0x4de>
 801729c:	d0f0      	beq.n	8017280 <_strtod_l+0x520>
 801729e:	4264      	negs	r4, r4
 80172a0:	f014 020f 	ands.w	r2, r4, #15
 80172a4:	d00a      	beq.n	80172bc <_strtod_l+0x55c>
 80172a6:	4b12      	ldr	r3, [pc, #72]	@ (80172f0 <_strtod_l+0x590>)
 80172a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80172ac:	4650      	mov	r0, sl
 80172ae:	4659      	mov	r1, fp
 80172b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80172b4:	f7e9 fada 	bl	800086c <__aeabi_ddiv>
 80172b8:	4682      	mov	sl, r0
 80172ba:	468b      	mov	fp, r1
 80172bc:	1124      	asrs	r4, r4, #4
 80172be:	d0df      	beq.n	8017280 <_strtod_l+0x520>
 80172c0:	2c1f      	cmp	r4, #31
 80172c2:	dd1f      	ble.n	8017304 <_strtod_l+0x5a4>
 80172c4:	2400      	movs	r4, #0
 80172c6:	46a0      	mov	r8, r4
 80172c8:	940b      	str	r4, [sp, #44]	@ 0x2c
 80172ca:	46a1      	mov	r9, r4
 80172cc:	9a05      	ldr	r2, [sp, #20]
 80172ce:	2322      	movs	r3, #34	@ 0x22
 80172d0:	f04f 0a00 	mov.w	sl, #0
 80172d4:	f04f 0b00 	mov.w	fp, #0
 80172d8:	6013      	str	r3, [r2, #0]
 80172da:	e76b      	b.n	80171b4 <_strtod_l+0x454>
 80172dc:	08023478 	.word	0x08023478
 80172e0:	080235bc 	.word	0x080235bc
 80172e4:	0802346f 	.word	0x0802346f
 80172e8:	08023472 	.word	0x08023472
 80172ec:	080234be 	.word	0x080234be
 80172f0:	08023748 	.word	0x08023748
 80172f4:	08023720 	.word	0x08023720
 80172f8:	7ff00000 	.word	0x7ff00000
 80172fc:	7ca00000 	.word	0x7ca00000
 8017300:	7fefffff 	.word	0x7fefffff
 8017304:	f014 0310 	ands.w	r3, r4, #16
 8017308:	bf18      	it	ne
 801730a:	236a      	movne	r3, #106	@ 0x6a
 801730c:	4ea9      	ldr	r6, [pc, #676]	@ (80175b4 <_strtod_l+0x854>)
 801730e:	9308      	str	r3, [sp, #32]
 8017310:	4650      	mov	r0, sl
 8017312:	4659      	mov	r1, fp
 8017314:	2300      	movs	r3, #0
 8017316:	07e7      	lsls	r7, r4, #31
 8017318:	d504      	bpl.n	8017324 <_strtod_l+0x5c4>
 801731a:	e9d6 2300 	ldrd	r2, r3, [r6]
 801731e:	f7e9 f97b 	bl	8000618 <__aeabi_dmul>
 8017322:	2301      	movs	r3, #1
 8017324:	1064      	asrs	r4, r4, #1
 8017326:	f106 0608 	add.w	r6, r6, #8
 801732a:	d1f4      	bne.n	8017316 <_strtod_l+0x5b6>
 801732c:	b10b      	cbz	r3, 8017332 <_strtod_l+0x5d2>
 801732e:	4682      	mov	sl, r0
 8017330:	468b      	mov	fp, r1
 8017332:	9b08      	ldr	r3, [sp, #32]
 8017334:	b1b3      	cbz	r3, 8017364 <_strtod_l+0x604>
 8017336:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801733a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 801733e:	2b00      	cmp	r3, #0
 8017340:	4659      	mov	r1, fp
 8017342:	dd0f      	ble.n	8017364 <_strtod_l+0x604>
 8017344:	2b1f      	cmp	r3, #31
 8017346:	dd56      	ble.n	80173f6 <_strtod_l+0x696>
 8017348:	2b34      	cmp	r3, #52	@ 0x34
 801734a:	bfde      	ittt	le
 801734c:	f04f 33ff 	movle.w	r3, #4294967295
 8017350:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8017354:	4093      	lslle	r3, r2
 8017356:	f04f 0a00 	mov.w	sl, #0
 801735a:	bfcc      	ite	gt
 801735c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8017360:	ea03 0b01 	andle.w	fp, r3, r1
 8017364:	2200      	movs	r2, #0
 8017366:	2300      	movs	r3, #0
 8017368:	4650      	mov	r0, sl
 801736a:	4659      	mov	r1, fp
 801736c:	f7e9 fbbc 	bl	8000ae8 <__aeabi_dcmpeq>
 8017370:	2800      	cmp	r0, #0
 8017372:	d1a7      	bne.n	80172c4 <_strtod_l+0x564>
 8017374:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017376:	9300      	str	r3, [sp, #0]
 8017378:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801737a:	9805      	ldr	r0, [sp, #20]
 801737c:	462b      	mov	r3, r5
 801737e:	464a      	mov	r2, r9
 8017380:	f001 faa4 	bl	80188cc <__s2b>
 8017384:	900b      	str	r0, [sp, #44]	@ 0x2c
 8017386:	2800      	cmp	r0, #0
 8017388:	f43f af09 	beq.w	801719e <_strtod_l+0x43e>
 801738c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801738e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017390:	2a00      	cmp	r2, #0
 8017392:	eba3 0308 	sub.w	r3, r3, r8
 8017396:	bfa8      	it	ge
 8017398:	2300      	movge	r3, #0
 801739a:	9312      	str	r3, [sp, #72]	@ 0x48
 801739c:	2400      	movs	r4, #0
 801739e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80173a2:	9316      	str	r3, [sp, #88]	@ 0x58
 80173a4:	46a0      	mov	r8, r4
 80173a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80173a8:	9805      	ldr	r0, [sp, #20]
 80173aa:	6859      	ldr	r1, [r3, #4]
 80173ac:	f001 f9e6 	bl	801877c <_Balloc>
 80173b0:	4681      	mov	r9, r0
 80173b2:	2800      	cmp	r0, #0
 80173b4:	f43f aef7 	beq.w	80171a6 <_strtod_l+0x446>
 80173b8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80173ba:	691a      	ldr	r2, [r3, #16]
 80173bc:	3202      	adds	r2, #2
 80173be:	f103 010c 	add.w	r1, r3, #12
 80173c2:	0092      	lsls	r2, r2, #2
 80173c4:	300c      	adds	r0, #12
 80173c6:	f000 fd58 	bl	8017e7a <memcpy>
 80173ca:	ec4b ab10 	vmov	d0, sl, fp
 80173ce:	9805      	ldr	r0, [sp, #20]
 80173d0:	aa1c      	add	r2, sp, #112	@ 0x70
 80173d2:	a91b      	add	r1, sp, #108	@ 0x6c
 80173d4:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80173d8:	f001 fdac 	bl	8018f34 <__d2b>
 80173dc:	901a      	str	r0, [sp, #104]	@ 0x68
 80173de:	2800      	cmp	r0, #0
 80173e0:	f43f aee1 	beq.w	80171a6 <_strtod_l+0x446>
 80173e4:	9805      	ldr	r0, [sp, #20]
 80173e6:	2101      	movs	r1, #1
 80173e8:	f001 fb06 	bl	80189f8 <__i2b>
 80173ec:	4680      	mov	r8, r0
 80173ee:	b948      	cbnz	r0, 8017404 <_strtod_l+0x6a4>
 80173f0:	f04f 0800 	mov.w	r8, #0
 80173f4:	e6d7      	b.n	80171a6 <_strtod_l+0x446>
 80173f6:	f04f 32ff 	mov.w	r2, #4294967295
 80173fa:	fa02 f303 	lsl.w	r3, r2, r3
 80173fe:	ea03 0a0a 	and.w	sl, r3, sl
 8017402:	e7af      	b.n	8017364 <_strtod_l+0x604>
 8017404:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8017406:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8017408:	2d00      	cmp	r5, #0
 801740a:	bfab      	itete	ge
 801740c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 801740e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8017410:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8017412:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8017414:	bfac      	ite	ge
 8017416:	18ef      	addge	r7, r5, r3
 8017418:	1b5e      	sublt	r6, r3, r5
 801741a:	9b08      	ldr	r3, [sp, #32]
 801741c:	1aed      	subs	r5, r5, r3
 801741e:	4415      	add	r5, r2
 8017420:	4b65      	ldr	r3, [pc, #404]	@ (80175b8 <_strtod_l+0x858>)
 8017422:	3d01      	subs	r5, #1
 8017424:	429d      	cmp	r5, r3
 8017426:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 801742a:	da50      	bge.n	80174ce <_strtod_l+0x76e>
 801742c:	1b5b      	subs	r3, r3, r5
 801742e:	2b1f      	cmp	r3, #31
 8017430:	eba2 0203 	sub.w	r2, r2, r3
 8017434:	f04f 0101 	mov.w	r1, #1
 8017438:	dc3d      	bgt.n	80174b6 <_strtod_l+0x756>
 801743a:	fa01 f303 	lsl.w	r3, r1, r3
 801743e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8017440:	2300      	movs	r3, #0
 8017442:	9310      	str	r3, [sp, #64]	@ 0x40
 8017444:	18bd      	adds	r5, r7, r2
 8017446:	9b08      	ldr	r3, [sp, #32]
 8017448:	42af      	cmp	r7, r5
 801744a:	4416      	add	r6, r2
 801744c:	441e      	add	r6, r3
 801744e:	463b      	mov	r3, r7
 8017450:	bfa8      	it	ge
 8017452:	462b      	movge	r3, r5
 8017454:	42b3      	cmp	r3, r6
 8017456:	bfa8      	it	ge
 8017458:	4633      	movge	r3, r6
 801745a:	2b00      	cmp	r3, #0
 801745c:	bfc2      	ittt	gt
 801745e:	1aed      	subgt	r5, r5, r3
 8017460:	1af6      	subgt	r6, r6, r3
 8017462:	1aff      	subgt	r7, r7, r3
 8017464:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8017466:	2b00      	cmp	r3, #0
 8017468:	dd16      	ble.n	8017498 <_strtod_l+0x738>
 801746a:	4641      	mov	r1, r8
 801746c:	9805      	ldr	r0, [sp, #20]
 801746e:	461a      	mov	r2, r3
 8017470:	f001 fb7a 	bl	8018b68 <__pow5mult>
 8017474:	4680      	mov	r8, r0
 8017476:	2800      	cmp	r0, #0
 8017478:	d0ba      	beq.n	80173f0 <_strtod_l+0x690>
 801747a:	4601      	mov	r1, r0
 801747c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801747e:	9805      	ldr	r0, [sp, #20]
 8017480:	f001 fad0 	bl	8018a24 <__multiply>
 8017484:	900a      	str	r0, [sp, #40]	@ 0x28
 8017486:	2800      	cmp	r0, #0
 8017488:	f43f ae8d 	beq.w	80171a6 <_strtod_l+0x446>
 801748c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801748e:	9805      	ldr	r0, [sp, #20]
 8017490:	f001 f9b4 	bl	80187fc <_Bfree>
 8017494:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017496:	931a      	str	r3, [sp, #104]	@ 0x68
 8017498:	2d00      	cmp	r5, #0
 801749a:	dc1d      	bgt.n	80174d8 <_strtod_l+0x778>
 801749c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801749e:	2b00      	cmp	r3, #0
 80174a0:	dd23      	ble.n	80174ea <_strtod_l+0x78a>
 80174a2:	4649      	mov	r1, r9
 80174a4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80174a6:	9805      	ldr	r0, [sp, #20]
 80174a8:	f001 fb5e 	bl	8018b68 <__pow5mult>
 80174ac:	4681      	mov	r9, r0
 80174ae:	b9e0      	cbnz	r0, 80174ea <_strtod_l+0x78a>
 80174b0:	f04f 0900 	mov.w	r9, #0
 80174b4:	e677      	b.n	80171a6 <_strtod_l+0x446>
 80174b6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80174ba:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80174be:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80174c2:	35e2      	adds	r5, #226	@ 0xe2
 80174c4:	fa01 f305 	lsl.w	r3, r1, r5
 80174c8:	9310      	str	r3, [sp, #64]	@ 0x40
 80174ca:	9113      	str	r1, [sp, #76]	@ 0x4c
 80174cc:	e7ba      	b.n	8017444 <_strtod_l+0x6e4>
 80174ce:	2300      	movs	r3, #0
 80174d0:	9310      	str	r3, [sp, #64]	@ 0x40
 80174d2:	2301      	movs	r3, #1
 80174d4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80174d6:	e7b5      	b.n	8017444 <_strtod_l+0x6e4>
 80174d8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80174da:	9805      	ldr	r0, [sp, #20]
 80174dc:	462a      	mov	r2, r5
 80174de:	f001 fb9d 	bl	8018c1c <__lshift>
 80174e2:	901a      	str	r0, [sp, #104]	@ 0x68
 80174e4:	2800      	cmp	r0, #0
 80174e6:	d1d9      	bne.n	801749c <_strtod_l+0x73c>
 80174e8:	e65d      	b.n	80171a6 <_strtod_l+0x446>
 80174ea:	2e00      	cmp	r6, #0
 80174ec:	dd07      	ble.n	80174fe <_strtod_l+0x79e>
 80174ee:	4649      	mov	r1, r9
 80174f0:	9805      	ldr	r0, [sp, #20]
 80174f2:	4632      	mov	r2, r6
 80174f4:	f001 fb92 	bl	8018c1c <__lshift>
 80174f8:	4681      	mov	r9, r0
 80174fa:	2800      	cmp	r0, #0
 80174fc:	d0d8      	beq.n	80174b0 <_strtod_l+0x750>
 80174fe:	2f00      	cmp	r7, #0
 8017500:	dd08      	ble.n	8017514 <_strtod_l+0x7b4>
 8017502:	4641      	mov	r1, r8
 8017504:	9805      	ldr	r0, [sp, #20]
 8017506:	463a      	mov	r2, r7
 8017508:	f001 fb88 	bl	8018c1c <__lshift>
 801750c:	4680      	mov	r8, r0
 801750e:	2800      	cmp	r0, #0
 8017510:	f43f ae49 	beq.w	80171a6 <_strtod_l+0x446>
 8017514:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8017516:	9805      	ldr	r0, [sp, #20]
 8017518:	464a      	mov	r2, r9
 801751a:	f001 fc07 	bl	8018d2c <__mdiff>
 801751e:	4604      	mov	r4, r0
 8017520:	2800      	cmp	r0, #0
 8017522:	f43f ae40 	beq.w	80171a6 <_strtod_l+0x446>
 8017526:	68c3      	ldr	r3, [r0, #12]
 8017528:	930f      	str	r3, [sp, #60]	@ 0x3c
 801752a:	2300      	movs	r3, #0
 801752c:	60c3      	str	r3, [r0, #12]
 801752e:	4641      	mov	r1, r8
 8017530:	f001 fbe0 	bl	8018cf4 <__mcmp>
 8017534:	2800      	cmp	r0, #0
 8017536:	da45      	bge.n	80175c4 <_strtod_l+0x864>
 8017538:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801753a:	ea53 030a 	orrs.w	r3, r3, sl
 801753e:	d16b      	bne.n	8017618 <_strtod_l+0x8b8>
 8017540:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017544:	2b00      	cmp	r3, #0
 8017546:	d167      	bne.n	8017618 <_strtod_l+0x8b8>
 8017548:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801754c:	0d1b      	lsrs	r3, r3, #20
 801754e:	051b      	lsls	r3, r3, #20
 8017550:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8017554:	d960      	bls.n	8017618 <_strtod_l+0x8b8>
 8017556:	6963      	ldr	r3, [r4, #20]
 8017558:	b913      	cbnz	r3, 8017560 <_strtod_l+0x800>
 801755a:	6923      	ldr	r3, [r4, #16]
 801755c:	2b01      	cmp	r3, #1
 801755e:	dd5b      	ble.n	8017618 <_strtod_l+0x8b8>
 8017560:	4621      	mov	r1, r4
 8017562:	2201      	movs	r2, #1
 8017564:	9805      	ldr	r0, [sp, #20]
 8017566:	f001 fb59 	bl	8018c1c <__lshift>
 801756a:	4641      	mov	r1, r8
 801756c:	4604      	mov	r4, r0
 801756e:	f001 fbc1 	bl	8018cf4 <__mcmp>
 8017572:	2800      	cmp	r0, #0
 8017574:	dd50      	ble.n	8017618 <_strtod_l+0x8b8>
 8017576:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801757a:	9a08      	ldr	r2, [sp, #32]
 801757c:	0d1b      	lsrs	r3, r3, #20
 801757e:	051b      	lsls	r3, r3, #20
 8017580:	2a00      	cmp	r2, #0
 8017582:	d06a      	beq.n	801765a <_strtod_l+0x8fa>
 8017584:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8017588:	d867      	bhi.n	801765a <_strtod_l+0x8fa>
 801758a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 801758e:	f67f ae9d 	bls.w	80172cc <_strtod_l+0x56c>
 8017592:	4b0a      	ldr	r3, [pc, #40]	@ (80175bc <_strtod_l+0x85c>)
 8017594:	4650      	mov	r0, sl
 8017596:	4659      	mov	r1, fp
 8017598:	2200      	movs	r2, #0
 801759a:	f7e9 f83d 	bl	8000618 <__aeabi_dmul>
 801759e:	4b08      	ldr	r3, [pc, #32]	@ (80175c0 <_strtod_l+0x860>)
 80175a0:	400b      	ands	r3, r1
 80175a2:	4682      	mov	sl, r0
 80175a4:	468b      	mov	fp, r1
 80175a6:	2b00      	cmp	r3, #0
 80175a8:	f47f ae08 	bne.w	80171bc <_strtod_l+0x45c>
 80175ac:	9a05      	ldr	r2, [sp, #20]
 80175ae:	2322      	movs	r3, #34	@ 0x22
 80175b0:	6013      	str	r3, [r2, #0]
 80175b2:	e603      	b.n	80171bc <_strtod_l+0x45c>
 80175b4:	080235e8 	.word	0x080235e8
 80175b8:	fffffc02 	.word	0xfffffc02
 80175bc:	39500000 	.word	0x39500000
 80175c0:	7ff00000 	.word	0x7ff00000
 80175c4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80175c8:	d165      	bne.n	8017696 <_strtod_l+0x936>
 80175ca:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80175cc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80175d0:	b35a      	cbz	r2, 801762a <_strtod_l+0x8ca>
 80175d2:	4a9f      	ldr	r2, [pc, #636]	@ (8017850 <_strtod_l+0xaf0>)
 80175d4:	4293      	cmp	r3, r2
 80175d6:	d12b      	bne.n	8017630 <_strtod_l+0x8d0>
 80175d8:	9b08      	ldr	r3, [sp, #32]
 80175da:	4651      	mov	r1, sl
 80175dc:	b303      	cbz	r3, 8017620 <_strtod_l+0x8c0>
 80175de:	4b9d      	ldr	r3, [pc, #628]	@ (8017854 <_strtod_l+0xaf4>)
 80175e0:	465a      	mov	r2, fp
 80175e2:	4013      	ands	r3, r2
 80175e4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80175e8:	f04f 32ff 	mov.w	r2, #4294967295
 80175ec:	d81b      	bhi.n	8017626 <_strtod_l+0x8c6>
 80175ee:	0d1b      	lsrs	r3, r3, #20
 80175f0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80175f4:	fa02 f303 	lsl.w	r3, r2, r3
 80175f8:	4299      	cmp	r1, r3
 80175fa:	d119      	bne.n	8017630 <_strtod_l+0x8d0>
 80175fc:	4b96      	ldr	r3, [pc, #600]	@ (8017858 <_strtod_l+0xaf8>)
 80175fe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8017600:	429a      	cmp	r2, r3
 8017602:	d102      	bne.n	801760a <_strtod_l+0x8aa>
 8017604:	3101      	adds	r1, #1
 8017606:	f43f adce 	beq.w	80171a6 <_strtod_l+0x446>
 801760a:	4b92      	ldr	r3, [pc, #584]	@ (8017854 <_strtod_l+0xaf4>)
 801760c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801760e:	401a      	ands	r2, r3
 8017610:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8017614:	f04f 0a00 	mov.w	sl, #0
 8017618:	9b08      	ldr	r3, [sp, #32]
 801761a:	2b00      	cmp	r3, #0
 801761c:	d1b9      	bne.n	8017592 <_strtod_l+0x832>
 801761e:	e5cd      	b.n	80171bc <_strtod_l+0x45c>
 8017620:	f04f 33ff 	mov.w	r3, #4294967295
 8017624:	e7e8      	b.n	80175f8 <_strtod_l+0x898>
 8017626:	4613      	mov	r3, r2
 8017628:	e7e6      	b.n	80175f8 <_strtod_l+0x898>
 801762a:	ea53 030a 	orrs.w	r3, r3, sl
 801762e:	d0a2      	beq.n	8017576 <_strtod_l+0x816>
 8017630:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8017632:	b1db      	cbz	r3, 801766c <_strtod_l+0x90c>
 8017634:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8017636:	4213      	tst	r3, r2
 8017638:	d0ee      	beq.n	8017618 <_strtod_l+0x8b8>
 801763a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801763c:	9a08      	ldr	r2, [sp, #32]
 801763e:	4650      	mov	r0, sl
 8017640:	4659      	mov	r1, fp
 8017642:	b1bb      	cbz	r3, 8017674 <_strtod_l+0x914>
 8017644:	f7ff fb6e 	bl	8016d24 <sulp>
 8017648:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801764c:	ec53 2b10 	vmov	r2, r3, d0
 8017650:	f7e8 fe2c 	bl	80002ac <__adddf3>
 8017654:	4682      	mov	sl, r0
 8017656:	468b      	mov	fp, r1
 8017658:	e7de      	b.n	8017618 <_strtod_l+0x8b8>
 801765a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 801765e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8017662:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8017666:	f04f 3aff 	mov.w	sl, #4294967295
 801766a:	e7d5      	b.n	8017618 <_strtod_l+0x8b8>
 801766c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801766e:	ea13 0f0a 	tst.w	r3, sl
 8017672:	e7e1      	b.n	8017638 <_strtod_l+0x8d8>
 8017674:	f7ff fb56 	bl	8016d24 <sulp>
 8017678:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801767c:	ec53 2b10 	vmov	r2, r3, d0
 8017680:	f7e8 fe12 	bl	80002a8 <__aeabi_dsub>
 8017684:	2200      	movs	r2, #0
 8017686:	2300      	movs	r3, #0
 8017688:	4682      	mov	sl, r0
 801768a:	468b      	mov	fp, r1
 801768c:	f7e9 fa2c 	bl	8000ae8 <__aeabi_dcmpeq>
 8017690:	2800      	cmp	r0, #0
 8017692:	d0c1      	beq.n	8017618 <_strtod_l+0x8b8>
 8017694:	e61a      	b.n	80172cc <_strtod_l+0x56c>
 8017696:	4641      	mov	r1, r8
 8017698:	4620      	mov	r0, r4
 801769a:	f001 fca3 	bl	8018fe4 <__ratio>
 801769e:	ec57 6b10 	vmov	r6, r7, d0
 80176a2:	2200      	movs	r2, #0
 80176a4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80176a8:	4630      	mov	r0, r6
 80176aa:	4639      	mov	r1, r7
 80176ac:	f7e9 fa30 	bl	8000b10 <__aeabi_dcmple>
 80176b0:	2800      	cmp	r0, #0
 80176b2:	d06f      	beq.n	8017794 <_strtod_l+0xa34>
 80176b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80176b6:	2b00      	cmp	r3, #0
 80176b8:	d17a      	bne.n	80177b0 <_strtod_l+0xa50>
 80176ba:	f1ba 0f00 	cmp.w	sl, #0
 80176be:	d158      	bne.n	8017772 <_strtod_l+0xa12>
 80176c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80176c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80176c6:	2b00      	cmp	r3, #0
 80176c8:	d15a      	bne.n	8017780 <_strtod_l+0xa20>
 80176ca:	4b64      	ldr	r3, [pc, #400]	@ (801785c <_strtod_l+0xafc>)
 80176cc:	2200      	movs	r2, #0
 80176ce:	4630      	mov	r0, r6
 80176d0:	4639      	mov	r1, r7
 80176d2:	f7e9 fa13 	bl	8000afc <__aeabi_dcmplt>
 80176d6:	2800      	cmp	r0, #0
 80176d8:	d159      	bne.n	801778e <_strtod_l+0xa2e>
 80176da:	4630      	mov	r0, r6
 80176dc:	4639      	mov	r1, r7
 80176de:	4b60      	ldr	r3, [pc, #384]	@ (8017860 <_strtod_l+0xb00>)
 80176e0:	2200      	movs	r2, #0
 80176e2:	f7e8 ff99 	bl	8000618 <__aeabi_dmul>
 80176e6:	4606      	mov	r6, r0
 80176e8:	460f      	mov	r7, r1
 80176ea:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80176ee:	9606      	str	r6, [sp, #24]
 80176f0:	9307      	str	r3, [sp, #28]
 80176f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80176f6:	4d57      	ldr	r5, [pc, #348]	@ (8017854 <_strtod_l+0xaf4>)
 80176f8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80176fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80176fe:	401d      	ands	r5, r3
 8017700:	4b58      	ldr	r3, [pc, #352]	@ (8017864 <_strtod_l+0xb04>)
 8017702:	429d      	cmp	r5, r3
 8017704:	f040 80b2 	bne.w	801786c <_strtod_l+0xb0c>
 8017708:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801770a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 801770e:	ec4b ab10 	vmov	d0, sl, fp
 8017712:	f001 fb9f 	bl	8018e54 <__ulp>
 8017716:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801771a:	ec51 0b10 	vmov	r0, r1, d0
 801771e:	f7e8 ff7b 	bl	8000618 <__aeabi_dmul>
 8017722:	4652      	mov	r2, sl
 8017724:	465b      	mov	r3, fp
 8017726:	f7e8 fdc1 	bl	80002ac <__adddf3>
 801772a:	460b      	mov	r3, r1
 801772c:	4949      	ldr	r1, [pc, #292]	@ (8017854 <_strtod_l+0xaf4>)
 801772e:	4a4e      	ldr	r2, [pc, #312]	@ (8017868 <_strtod_l+0xb08>)
 8017730:	4019      	ands	r1, r3
 8017732:	4291      	cmp	r1, r2
 8017734:	4682      	mov	sl, r0
 8017736:	d942      	bls.n	80177be <_strtod_l+0xa5e>
 8017738:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801773a:	4b47      	ldr	r3, [pc, #284]	@ (8017858 <_strtod_l+0xaf8>)
 801773c:	429a      	cmp	r2, r3
 801773e:	d103      	bne.n	8017748 <_strtod_l+0x9e8>
 8017740:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017742:	3301      	adds	r3, #1
 8017744:	f43f ad2f 	beq.w	80171a6 <_strtod_l+0x446>
 8017748:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8017858 <_strtod_l+0xaf8>
 801774c:	f04f 3aff 	mov.w	sl, #4294967295
 8017750:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8017752:	9805      	ldr	r0, [sp, #20]
 8017754:	f001 f852 	bl	80187fc <_Bfree>
 8017758:	9805      	ldr	r0, [sp, #20]
 801775a:	4649      	mov	r1, r9
 801775c:	f001 f84e 	bl	80187fc <_Bfree>
 8017760:	9805      	ldr	r0, [sp, #20]
 8017762:	4641      	mov	r1, r8
 8017764:	f001 f84a 	bl	80187fc <_Bfree>
 8017768:	9805      	ldr	r0, [sp, #20]
 801776a:	4621      	mov	r1, r4
 801776c:	f001 f846 	bl	80187fc <_Bfree>
 8017770:	e619      	b.n	80173a6 <_strtod_l+0x646>
 8017772:	f1ba 0f01 	cmp.w	sl, #1
 8017776:	d103      	bne.n	8017780 <_strtod_l+0xa20>
 8017778:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801777a:	2b00      	cmp	r3, #0
 801777c:	f43f ada6 	beq.w	80172cc <_strtod_l+0x56c>
 8017780:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8017830 <_strtod_l+0xad0>
 8017784:	4f35      	ldr	r7, [pc, #212]	@ (801785c <_strtod_l+0xafc>)
 8017786:	ed8d 7b06 	vstr	d7, [sp, #24]
 801778a:	2600      	movs	r6, #0
 801778c:	e7b1      	b.n	80176f2 <_strtod_l+0x992>
 801778e:	4f34      	ldr	r7, [pc, #208]	@ (8017860 <_strtod_l+0xb00>)
 8017790:	2600      	movs	r6, #0
 8017792:	e7aa      	b.n	80176ea <_strtod_l+0x98a>
 8017794:	4b32      	ldr	r3, [pc, #200]	@ (8017860 <_strtod_l+0xb00>)
 8017796:	4630      	mov	r0, r6
 8017798:	4639      	mov	r1, r7
 801779a:	2200      	movs	r2, #0
 801779c:	f7e8 ff3c 	bl	8000618 <__aeabi_dmul>
 80177a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80177a2:	4606      	mov	r6, r0
 80177a4:	460f      	mov	r7, r1
 80177a6:	2b00      	cmp	r3, #0
 80177a8:	d09f      	beq.n	80176ea <_strtod_l+0x98a>
 80177aa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80177ae:	e7a0      	b.n	80176f2 <_strtod_l+0x992>
 80177b0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8017838 <_strtod_l+0xad8>
 80177b4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80177b8:	ec57 6b17 	vmov	r6, r7, d7
 80177bc:	e799      	b.n	80176f2 <_strtod_l+0x992>
 80177be:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80177c2:	9b08      	ldr	r3, [sp, #32]
 80177c4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80177c8:	2b00      	cmp	r3, #0
 80177ca:	d1c1      	bne.n	8017750 <_strtod_l+0x9f0>
 80177cc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80177d0:	0d1b      	lsrs	r3, r3, #20
 80177d2:	051b      	lsls	r3, r3, #20
 80177d4:	429d      	cmp	r5, r3
 80177d6:	d1bb      	bne.n	8017750 <_strtod_l+0x9f0>
 80177d8:	4630      	mov	r0, r6
 80177da:	4639      	mov	r1, r7
 80177dc:	f7e9 fb8a 	bl	8000ef4 <__aeabi_d2lz>
 80177e0:	f7e8 feec 	bl	80005bc <__aeabi_l2d>
 80177e4:	4602      	mov	r2, r0
 80177e6:	460b      	mov	r3, r1
 80177e8:	4630      	mov	r0, r6
 80177ea:	4639      	mov	r1, r7
 80177ec:	f7e8 fd5c 	bl	80002a8 <__aeabi_dsub>
 80177f0:	460b      	mov	r3, r1
 80177f2:	4602      	mov	r2, r0
 80177f4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80177f8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80177fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80177fe:	ea46 060a 	orr.w	r6, r6, sl
 8017802:	431e      	orrs	r6, r3
 8017804:	d06f      	beq.n	80178e6 <_strtod_l+0xb86>
 8017806:	a30e      	add	r3, pc, #56	@ (adr r3, 8017840 <_strtod_l+0xae0>)
 8017808:	e9d3 2300 	ldrd	r2, r3, [r3]
 801780c:	f7e9 f976 	bl	8000afc <__aeabi_dcmplt>
 8017810:	2800      	cmp	r0, #0
 8017812:	f47f acd3 	bne.w	80171bc <_strtod_l+0x45c>
 8017816:	a30c      	add	r3, pc, #48	@ (adr r3, 8017848 <_strtod_l+0xae8>)
 8017818:	e9d3 2300 	ldrd	r2, r3, [r3]
 801781c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8017820:	f7e9 f98a 	bl	8000b38 <__aeabi_dcmpgt>
 8017824:	2800      	cmp	r0, #0
 8017826:	d093      	beq.n	8017750 <_strtod_l+0x9f0>
 8017828:	e4c8      	b.n	80171bc <_strtod_l+0x45c>
 801782a:	bf00      	nop
 801782c:	f3af 8000 	nop.w
 8017830:	00000000 	.word	0x00000000
 8017834:	bff00000 	.word	0xbff00000
 8017838:	00000000 	.word	0x00000000
 801783c:	3ff00000 	.word	0x3ff00000
 8017840:	94a03595 	.word	0x94a03595
 8017844:	3fdfffff 	.word	0x3fdfffff
 8017848:	35afe535 	.word	0x35afe535
 801784c:	3fe00000 	.word	0x3fe00000
 8017850:	000fffff 	.word	0x000fffff
 8017854:	7ff00000 	.word	0x7ff00000
 8017858:	7fefffff 	.word	0x7fefffff
 801785c:	3ff00000 	.word	0x3ff00000
 8017860:	3fe00000 	.word	0x3fe00000
 8017864:	7fe00000 	.word	0x7fe00000
 8017868:	7c9fffff 	.word	0x7c9fffff
 801786c:	9b08      	ldr	r3, [sp, #32]
 801786e:	b323      	cbz	r3, 80178ba <_strtod_l+0xb5a>
 8017870:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8017874:	d821      	bhi.n	80178ba <_strtod_l+0xb5a>
 8017876:	a328      	add	r3, pc, #160	@ (adr r3, 8017918 <_strtod_l+0xbb8>)
 8017878:	e9d3 2300 	ldrd	r2, r3, [r3]
 801787c:	4630      	mov	r0, r6
 801787e:	4639      	mov	r1, r7
 8017880:	f7e9 f946 	bl	8000b10 <__aeabi_dcmple>
 8017884:	b1a0      	cbz	r0, 80178b0 <_strtod_l+0xb50>
 8017886:	4639      	mov	r1, r7
 8017888:	4630      	mov	r0, r6
 801788a:	f7e9 f99d 	bl	8000bc8 <__aeabi_d2uiz>
 801788e:	2801      	cmp	r0, #1
 8017890:	bf38      	it	cc
 8017892:	2001      	movcc	r0, #1
 8017894:	f7e8 fe46 	bl	8000524 <__aeabi_ui2d>
 8017898:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801789a:	4606      	mov	r6, r0
 801789c:	460f      	mov	r7, r1
 801789e:	b9fb      	cbnz	r3, 80178e0 <_strtod_l+0xb80>
 80178a0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80178a4:	9014      	str	r0, [sp, #80]	@ 0x50
 80178a6:	9315      	str	r3, [sp, #84]	@ 0x54
 80178a8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80178ac:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80178b0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80178b2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80178b6:	1b5b      	subs	r3, r3, r5
 80178b8:	9311      	str	r3, [sp, #68]	@ 0x44
 80178ba:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80178be:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80178c2:	f001 fac7 	bl	8018e54 <__ulp>
 80178c6:	4650      	mov	r0, sl
 80178c8:	ec53 2b10 	vmov	r2, r3, d0
 80178cc:	4659      	mov	r1, fp
 80178ce:	f7e8 fea3 	bl	8000618 <__aeabi_dmul>
 80178d2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80178d6:	f7e8 fce9 	bl	80002ac <__adddf3>
 80178da:	4682      	mov	sl, r0
 80178dc:	468b      	mov	fp, r1
 80178de:	e770      	b.n	80177c2 <_strtod_l+0xa62>
 80178e0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80178e4:	e7e0      	b.n	80178a8 <_strtod_l+0xb48>
 80178e6:	a30e      	add	r3, pc, #56	@ (adr r3, 8017920 <_strtod_l+0xbc0>)
 80178e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80178ec:	f7e9 f906 	bl	8000afc <__aeabi_dcmplt>
 80178f0:	e798      	b.n	8017824 <_strtod_l+0xac4>
 80178f2:	2300      	movs	r3, #0
 80178f4:	930e      	str	r3, [sp, #56]	@ 0x38
 80178f6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80178f8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80178fa:	6013      	str	r3, [r2, #0]
 80178fc:	f7ff ba6d 	b.w	8016dda <_strtod_l+0x7a>
 8017900:	2a65      	cmp	r2, #101	@ 0x65
 8017902:	f43f ab68 	beq.w	8016fd6 <_strtod_l+0x276>
 8017906:	2a45      	cmp	r2, #69	@ 0x45
 8017908:	f43f ab65 	beq.w	8016fd6 <_strtod_l+0x276>
 801790c:	2301      	movs	r3, #1
 801790e:	f7ff bba0 	b.w	8017052 <_strtod_l+0x2f2>
 8017912:	bf00      	nop
 8017914:	f3af 8000 	nop.w
 8017918:	ffc00000 	.word	0xffc00000
 801791c:	41dfffff 	.word	0x41dfffff
 8017920:	94a03595 	.word	0x94a03595
 8017924:	3fcfffff 	.word	0x3fcfffff

08017928 <strtod>:
 8017928:	460a      	mov	r2, r1
 801792a:	4601      	mov	r1, r0
 801792c:	4802      	ldr	r0, [pc, #8]	@ (8017938 <strtod+0x10>)
 801792e:	4b03      	ldr	r3, [pc, #12]	@ (801793c <strtod+0x14>)
 8017930:	6800      	ldr	r0, [r0, #0]
 8017932:	f7ff ba15 	b.w	8016d60 <_strtod_l>
 8017936:	bf00      	nop
 8017938:	20000a94 	.word	0x20000a94
 801793c:	20000928 	.word	0x20000928

08017940 <_strtol_l.isra.0>:
 8017940:	2b24      	cmp	r3, #36	@ 0x24
 8017942:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017946:	4686      	mov	lr, r0
 8017948:	4690      	mov	r8, r2
 801794a:	d801      	bhi.n	8017950 <_strtol_l.isra.0+0x10>
 801794c:	2b01      	cmp	r3, #1
 801794e:	d106      	bne.n	801795e <_strtol_l.isra.0+0x1e>
 8017950:	f000 fa5e 	bl	8017e10 <__errno>
 8017954:	2316      	movs	r3, #22
 8017956:	6003      	str	r3, [r0, #0]
 8017958:	2000      	movs	r0, #0
 801795a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801795e:	4834      	ldr	r0, [pc, #208]	@ (8017a30 <_strtol_l.isra.0+0xf0>)
 8017960:	460d      	mov	r5, r1
 8017962:	462a      	mov	r2, r5
 8017964:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017968:	5d06      	ldrb	r6, [r0, r4]
 801796a:	f016 0608 	ands.w	r6, r6, #8
 801796e:	d1f8      	bne.n	8017962 <_strtol_l.isra.0+0x22>
 8017970:	2c2d      	cmp	r4, #45	@ 0x2d
 8017972:	d110      	bne.n	8017996 <_strtol_l.isra.0+0x56>
 8017974:	782c      	ldrb	r4, [r5, #0]
 8017976:	2601      	movs	r6, #1
 8017978:	1c95      	adds	r5, r2, #2
 801797a:	f033 0210 	bics.w	r2, r3, #16
 801797e:	d115      	bne.n	80179ac <_strtol_l.isra.0+0x6c>
 8017980:	2c30      	cmp	r4, #48	@ 0x30
 8017982:	d10d      	bne.n	80179a0 <_strtol_l.isra.0+0x60>
 8017984:	782a      	ldrb	r2, [r5, #0]
 8017986:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801798a:	2a58      	cmp	r2, #88	@ 0x58
 801798c:	d108      	bne.n	80179a0 <_strtol_l.isra.0+0x60>
 801798e:	786c      	ldrb	r4, [r5, #1]
 8017990:	3502      	adds	r5, #2
 8017992:	2310      	movs	r3, #16
 8017994:	e00a      	b.n	80179ac <_strtol_l.isra.0+0x6c>
 8017996:	2c2b      	cmp	r4, #43	@ 0x2b
 8017998:	bf04      	itt	eq
 801799a:	782c      	ldrbeq	r4, [r5, #0]
 801799c:	1c95      	addeq	r5, r2, #2
 801799e:	e7ec      	b.n	801797a <_strtol_l.isra.0+0x3a>
 80179a0:	2b00      	cmp	r3, #0
 80179a2:	d1f6      	bne.n	8017992 <_strtol_l.isra.0+0x52>
 80179a4:	2c30      	cmp	r4, #48	@ 0x30
 80179a6:	bf14      	ite	ne
 80179a8:	230a      	movne	r3, #10
 80179aa:	2308      	moveq	r3, #8
 80179ac:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80179b0:	f10c 3cff 	add.w	ip, ip, #4294967295
 80179b4:	2200      	movs	r2, #0
 80179b6:	fbbc f9f3 	udiv	r9, ip, r3
 80179ba:	4610      	mov	r0, r2
 80179bc:	fb03 ca19 	mls	sl, r3, r9, ip
 80179c0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80179c4:	2f09      	cmp	r7, #9
 80179c6:	d80f      	bhi.n	80179e8 <_strtol_l.isra.0+0xa8>
 80179c8:	463c      	mov	r4, r7
 80179ca:	42a3      	cmp	r3, r4
 80179cc:	dd1b      	ble.n	8017a06 <_strtol_l.isra.0+0xc6>
 80179ce:	1c57      	adds	r7, r2, #1
 80179d0:	d007      	beq.n	80179e2 <_strtol_l.isra.0+0xa2>
 80179d2:	4581      	cmp	r9, r0
 80179d4:	d314      	bcc.n	8017a00 <_strtol_l.isra.0+0xc0>
 80179d6:	d101      	bne.n	80179dc <_strtol_l.isra.0+0x9c>
 80179d8:	45a2      	cmp	sl, r4
 80179da:	db11      	blt.n	8017a00 <_strtol_l.isra.0+0xc0>
 80179dc:	fb00 4003 	mla	r0, r0, r3, r4
 80179e0:	2201      	movs	r2, #1
 80179e2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80179e6:	e7eb      	b.n	80179c0 <_strtol_l.isra.0+0x80>
 80179e8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80179ec:	2f19      	cmp	r7, #25
 80179ee:	d801      	bhi.n	80179f4 <_strtol_l.isra.0+0xb4>
 80179f0:	3c37      	subs	r4, #55	@ 0x37
 80179f2:	e7ea      	b.n	80179ca <_strtol_l.isra.0+0x8a>
 80179f4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80179f8:	2f19      	cmp	r7, #25
 80179fa:	d804      	bhi.n	8017a06 <_strtol_l.isra.0+0xc6>
 80179fc:	3c57      	subs	r4, #87	@ 0x57
 80179fe:	e7e4      	b.n	80179ca <_strtol_l.isra.0+0x8a>
 8017a00:	f04f 32ff 	mov.w	r2, #4294967295
 8017a04:	e7ed      	b.n	80179e2 <_strtol_l.isra.0+0xa2>
 8017a06:	1c53      	adds	r3, r2, #1
 8017a08:	d108      	bne.n	8017a1c <_strtol_l.isra.0+0xdc>
 8017a0a:	2322      	movs	r3, #34	@ 0x22
 8017a0c:	f8ce 3000 	str.w	r3, [lr]
 8017a10:	4660      	mov	r0, ip
 8017a12:	f1b8 0f00 	cmp.w	r8, #0
 8017a16:	d0a0      	beq.n	801795a <_strtol_l.isra.0+0x1a>
 8017a18:	1e69      	subs	r1, r5, #1
 8017a1a:	e006      	b.n	8017a2a <_strtol_l.isra.0+0xea>
 8017a1c:	b106      	cbz	r6, 8017a20 <_strtol_l.isra.0+0xe0>
 8017a1e:	4240      	negs	r0, r0
 8017a20:	f1b8 0f00 	cmp.w	r8, #0
 8017a24:	d099      	beq.n	801795a <_strtol_l.isra.0+0x1a>
 8017a26:	2a00      	cmp	r2, #0
 8017a28:	d1f6      	bne.n	8017a18 <_strtol_l.isra.0+0xd8>
 8017a2a:	f8c8 1000 	str.w	r1, [r8]
 8017a2e:	e794      	b.n	801795a <_strtol_l.isra.0+0x1a>
 8017a30:	08023611 	.word	0x08023611

08017a34 <strtol>:
 8017a34:	4613      	mov	r3, r2
 8017a36:	460a      	mov	r2, r1
 8017a38:	4601      	mov	r1, r0
 8017a3a:	4802      	ldr	r0, [pc, #8]	@ (8017a44 <strtol+0x10>)
 8017a3c:	6800      	ldr	r0, [r0, #0]
 8017a3e:	f7ff bf7f 	b.w	8017940 <_strtol_l.isra.0>
 8017a42:	bf00      	nop
 8017a44:	20000a94 	.word	0x20000a94

08017a48 <std>:
 8017a48:	2300      	movs	r3, #0
 8017a4a:	b510      	push	{r4, lr}
 8017a4c:	4604      	mov	r4, r0
 8017a4e:	e9c0 3300 	strd	r3, r3, [r0]
 8017a52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017a56:	6083      	str	r3, [r0, #8]
 8017a58:	8181      	strh	r1, [r0, #12]
 8017a5a:	6643      	str	r3, [r0, #100]	@ 0x64
 8017a5c:	81c2      	strh	r2, [r0, #14]
 8017a5e:	6183      	str	r3, [r0, #24]
 8017a60:	4619      	mov	r1, r3
 8017a62:	2208      	movs	r2, #8
 8017a64:	305c      	adds	r0, #92	@ 0x5c
 8017a66:	f000 f952 	bl	8017d0e <memset>
 8017a6a:	4b0d      	ldr	r3, [pc, #52]	@ (8017aa0 <std+0x58>)
 8017a6c:	6263      	str	r3, [r4, #36]	@ 0x24
 8017a6e:	4b0d      	ldr	r3, [pc, #52]	@ (8017aa4 <std+0x5c>)
 8017a70:	62a3      	str	r3, [r4, #40]	@ 0x28
 8017a72:	4b0d      	ldr	r3, [pc, #52]	@ (8017aa8 <std+0x60>)
 8017a74:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8017a76:	4b0d      	ldr	r3, [pc, #52]	@ (8017aac <std+0x64>)
 8017a78:	6323      	str	r3, [r4, #48]	@ 0x30
 8017a7a:	4b0d      	ldr	r3, [pc, #52]	@ (8017ab0 <std+0x68>)
 8017a7c:	6224      	str	r4, [r4, #32]
 8017a7e:	429c      	cmp	r4, r3
 8017a80:	d006      	beq.n	8017a90 <std+0x48>
 8017a82:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8017a86:	4294      	cmp	r4, r2
 8017a88:	d002      	beq.n	8017a90 <std+0x48>
 8017a8a:	33d0      	adds	r3, #208	@ 0xd0
 8017a8c:	429c      	cmp	r4, r3
 8017a8e:	d105      	bne.n	8017a9c <std+0x54>
 8017a90:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8017a94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017a98:	f000 b9e4 	b.w	8017e64 <__retarget_lock_init_recursive>
 8017a9c:	bd10      	pop	{r4, pc}
 8017a9e:	bf00      	nop
 8017aa0:	08017c35 	.word	0x08017c35
 8017aa4:	08017c57 	.word	0x08017c57
 8017aa8:	08017c8f 	.word	0x08017c8f
 8017aac:	08017cb3 	.word	0x08017cb3
 8017ab0:	200153a8 	.word	0x200153a8

08017ab4 <stdio_exit_handler>:
 8017ab4:	4a02      	ldr	r2, [pc, #8]	@ (8017ac0 <stdio_exit_handler+0xc>)
 8017ab6:	4903      	ldr	r1, [pc, #12]	@ (8017ac4 <stdio_exit_handler+0x10>)
 8017ab8:	4803      	ldr	r0, [pc, #12]	@ (8017ac8 <stdio_exit_handler+0x14>)
 8017aba:	f000 b869 	b.w	8017b90 <_fwalk_sglue>
 8017abe:	bf00      	nop
 8017ac0:	2000091c 	.word	0x2000091c
 8017ac4:	08019a3d 	.word	0x08019a3d
 8017ac8:	20000a98 	.word	0x20000a98

08017acc <cleanup_stdio>:
 8017acc:	6841      	ldr	r1, [r0, #4]
 8017ace:	4b0c      	ldr	r3, [pc, #48]	@ (8017b00 <cleanup_stdio+0x34>)
 8017ad0:	4299      	cmp	r1, r3
 8017ad2:	b510      	push	{r4, lr}
 8017ad4:	4604      	mov	r4, r0
 8017ad6:	d001      	beq.n	8017adc <cleanup_stdio+0x10>
 8017ad8:	f001 ffb0 	bl	8019a3c <_fflush_r>
 8017adc:	68a1      	ldr	r1, [r4, #8]
 8017ade:	4b09      	ldr	r3, [pc, #36]	@ (8017b04 <cleanup_stdio+0x38>)
 8017ae0:	4299      	cmp	r1, r3
 8017ae2:	d002      	beq.n	8017aea <cleanup_stdio+0x1e>
 8017ae4:	4620      	mov	r0, r4
 8017ae6:	f001 ffa9 	bl	8019a3c <_fflush_r>
 8017aea:	68e1      	ldr	r1, [r4, #12]
 8017aec:	4b06      	ldr	r3, [pc, #24]	@ (8017b08 <cleanup_stdio+0x3c>)
 8017aee:	4299      	cmp	r1, r3
 8017af0:	d004      	beq.n	8017afc <cleanup_stdio+0x30>
 8017af2:	4620      	mov	r0, r4
 8017af4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017af8:	f001 bfa0 	b.w	8019a3c <_fflush_r>
 8017afc:	bd10      	pop	{r4, pc}
 8017afe:	bf00      	nop
 8017b00:	200153a8 	.word	0x200153a8
 8017b04:	20015410 	.word	0x20015410
 8017b08:	20015478 	.word	0x20015478

08017b0c <global_stdio_init.part.0>:
 8017b0c:	b510      	push	{r4, lr}
 8017b0e:	4b0b      	ldr	r3, [pc, #44]	@ (8017b3c <global_stdio_init.part.0+0x30>)
 8017b10:	4c0b      	ldr	r4, [pc, #44]	@ (8017b40 <global_stdio_init.part.0+0x34>)
 8017b12:	4a0c      	ldr	r2, [pc, #48]	@ (8017b44 <global_stdio_init.part.0+0x38>)
 8017b14:	601a      	str	r2, [r3, #0]
 8017b16:	4620      	mov	r0, r4
 8017b18:	2200      	movs	r2, #0
 8017b1a:	2104      	movs	r1, #4
 8017b1c:	f7ff ff94 	bl	8017a48 <std>
 8017b20:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8017b24:	2201      	movs	r2, #1
 8017b26:	2109      	movs	r1, #9
 8017b28:	f7ff ff8e 	bl	8017a48 <std>
 8017b2c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8017b30:	2202      	movs	r2, #2
 8017b32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017b36:	2112      	movs	r1, #18
 8017b38:	f7ff bf86 	b.w	8017a48 <std>
 8017b3c:	200154e0 	.word	0x200154e0
 8017b40:	200153a8 	.word	0x200153a8
 8017b44:	08017ab5 	.word	0x08017ab5

08017b48 <__sfp_lock_acquire>:
 8017b48:	4801      	ldr	r0, [pc, #4]	@ (8017b50 <__sfp_lock_acquire+0x8>)
 8017b4a:	f000 b98c 	b.w	8017e66 <__retarget_lock_acquire_recursive>
 8017b4e:	bf00      	nop
 8017b50:	200154e9 	.word	0x200154e9

08017b54 <__sfp_lock_release>:
 8017b54:	4801      	ldr	r0, [pc, #4]	@ (8017b5c <__sfp_lock_release+0x8>)
 8017b56:	f000 b987 	b.w	8017e68 <__retarget_lock_release_recursive>
 8017b5a:	bf00      	nop
 8017b5c:	200154e9 	.word	0x200154e9

08017b60 <__sinit>:
 8017b60:	b510      	push	{r4, lr}
 8017b62:	4604      	mov	r4, r0
 8017b64:	f7ff fff0 	bl	8017b48 <__sfp_lock_acquire>
 8017b68:	6a23      	ldr	r3, [r4, #32]
 8017b6a:	b11b      	cbz	r3, 8017b74 <__sinit+0x14>
 8017b6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017b70:	f7ff bff0 	b.w	8017b54 <__sfp_lock_release>
 8017b74:	4b04      	ldr	r3, [pc, #16]	@ (8017b88 <__sinit+0x28>)
 8017b76:	6223      	str	r3, [r4, #32]
 8017b78:	4b04      	ldr	r3, [pc, #16]	@ (8017b8c <__sinit+0x2c>)
 8017b7a:	681b      	ldr	r3, [r3, #0]
 8017b7c:	2b00      	cmp	r3, #0
 8017b7e:	d1f5      	bne.n	8017b6c <__sinit+0xc>
 8017b80:	f7ff ffc4 	bl	8017b0c <global_stdio_init.part.0>
 8017b84:	e7f2      	b.n	8017b6c <__sinit+0xc>
 8017b86:	bf00      	nop
 8017b88:	08017acd 	.word	0x08017acd
 8017b8c:	200154e0 	.word	0x200154e0

08017b90 <_fwalk_sglue>:
 8017b90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017b94:	4607      	mov	r7, r0
 8017b96:	4688      	mov	r8, r1
 8017b98:	4614      	mov	r4, r2
 8017b9a:	2600      	movs	r6, #0
 8017b9c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017ba0:	f1b9 0901 	subs.w	r9, r9, #1
 8017ba4:	d505      	bpl.n	8017bb2 <_fwalk_sglue+0x22>
 8017ba6:	6824      	ldr	r4, [r4, #0]
 8017ba8:	2c00      	cmp	r4, #0
 8017baa:	d1f7      	bne.n	8017b9c <_fwalk_sglue+0xc>
 8017bac:	4630      	mov	r0, r6
 8017bae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017bb2:	89ab      	ldrh	r3, [r5, #12]
 8017bb4:	2b01      	cmp	r3, #1
 8017bb6:	d907      	bls.n	8017bc8 <_fwalk_sglue+0x38>
 8017bb8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017bbc:	3301      	adds	r3, #1
 8017bbe:	d003      	beq.n	8017bc8 <_fwalk_sglue+0x38>
 8017bc0:	4629      	mov	r1, r5
 8017bc2:	4638      	mov	r0, r7
 8017bc4:	47c0      	blx	r8
 8017bc6:	4306      	orrs	r6, r0
 8017bc8:	3568      	adds	r5, #104	@ 0x68
 8017bca:	e7e9      	b.n	8017ba0 <_fwalk_sglue+0x10>

08017bcc <iprintf>:
 8017bcc:	b40f      	push	{r0, r1, r2, r3}
 8017bce:	b507      	push	{r0, r1, r2, lr}
 8017bd0:	4906      	ldr	r1, [pc, #24]	@ (8017bec <iprintf+0x20>)
 8017bd2:	ab04      	add	r3, sp, #16
 8017bd4:	6808      	ldr	r0, [r1, #0]
 8017bd6:	f853 2b04 	ldr.w	r2, [r3], #4
 8017bda:	6881      	ldr	r1, [r0, #8]
 8017bdc:	9301      	str	r3, [sp, #4]
 8017bde:	f001 fc05 	bl	80193ec <_vfiprintf_r>
 8017be2:	b003      	add	sp, #12
 8017be4:	f85d eb04 	ldr.w	lr, [sp], #4
 8017be8:	b004      	add	sp, #16
 8017bea:	4770      	bx	lr
 8017bec:	20000a94 	.word	0x20000a94

08017bf0 <siprintf>:
 8017bf0:	b40e      	push	{r1, r2, r3}
 8017bf2:	b510      	push	{r4, lr}
 8017bf4:	b09d      	sub	sp, #116	@ 0x74
 8017bf6:	ab1f      	add	r3, sp, #124	@ 0x7c
 8017bf8:	9002      	str	r0, [sp, #8]
 8017bfa:	9006      	str	r0, [sp, #24]
 8017bfc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8017c00:	480a      	ldr	r0, [pc, #40]	@ (8017c2c <siprintf+0x3c>)
 8017c02:	9107      	str	r1, [sp, #28]
 8017c04:	9104      	str	r1, [sp, #16]
 8017c06:	490a      	ldr	r1, [pc, #40]	@ (8017c30 <siprintf+0x40>)
 8017c08:	f853 2b04 	ldr.w	r2, [r3], #4
 8017c0c:	9105      	str	r1, [sp, #20]
 8017c0e:	2400      	movs	r4, #0
 8017c10:	a902      	add	r1, sp, #8
 8017c12:	6800      	ldr	r0, [r0, #0]
 8017c14:	9301      	str	r3, [sp, #4]
 8017c16:	941b      	str	r4, [sp, #108]	@ 0x6c
 8017c18:	f001 fac2 	bl	80191a0 <_svfiprintf_r>
 8017c1c:	9b02      	ldr	r3, [sp, #8]
 8017c1e:	701c      	strb	r4, [r3, #0]
 8017c20:	b01d      	add	sp, #116	@ 0x74
 8017c22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017c26:	b003      	add	sp, #12
 8017c28:	4770      	bx	lr
 8017c2a:	bf00      	nop
 8017c2c:	20000a94 	.word	0x20000a94
 8017c30:	ffff0208 	.word	0xffff0208

08017c34 <__sread>:
 8017c34:	b510      	push	{r4, lr}
 8017c36:	460c      	mov	r4, r1
 8017c38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017c3c:	f000 f8c4 	bl	8017dc8 <_read_r>
 8017c40:	2800      	cmp	r0, #0
 8017c42:	bfab      	itete	ge
 8017c44:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8017c46:	89a3      	ldrhlt	r3, [r4, #12]
 8017c48:	181b      	addge	r3, r3, r0
 8017c4a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8017c4e:	bfac      	ite	ge
 8017c50:	6563      	strge	r3, [r4, #84]	@ 0x54
 8017c52:	81a3      	strhlt	r3, [r4, #12]
 8017c54:	bd10      	pop	{r4, pc}

08017c56 <__swrite>:
 8017c56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017c5a:	461f      	mov	r7, r3
 8017c5c:	898b      	ldrh	r3, [r1, #12]
 8017c5e:	05db      	lsls	r3, r3, #23
 8017c60:	4605      	mov	r5, r0
 8017c62:	460c      	mov	r4, r1
 8017c64:	4616      	mov	r6, r2
 8017c66:	d505      	bpl.n	8017c74 <__swrite+0x1e>
 8017c68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017c6c:	2302      	movs	r3, #2
 8017c6e:	2200      	movs	r2, #0
 8017c70:	f000 f898 	bl	8017da4 <_lseek_r>
 8017c74:	89a3      	ldrh	r3, [r4, #12]
 8017c76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017c7a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8017c7e:	81a3      	strh	r3, [r4, #12]
 8017c80:	4632      	mov	r2, r6
 8017c82:	463b      	mov	r3, r7
 8017c84:	4628      	mov	r0, r5
 8017c86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017c8a:	f000 b8af 	b.w	8017dec <_write_r>

08017c8e <__sseek>:
 8017c8e:	b510      	push	{r4, lr}
 8017c90:	460c      	mov	r4, r1
 8017c92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017c96:	f000 f885 	bl	8017da4 <_lseek_r>
 8017c9a:	1c43      	adds	r3, r0, #1
 8017c9c:	89a3      	ldrh	r3, [r4, #12]
 8017c9e:	bf15      	itete	ne
 8017ca0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8017ca2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8017ca6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8017caa:	81a3      	strheq	r3, [r4, #12]
 8017cac:	bf18      	it	ne
 8017cae:	81a3      	strhne	r3, [r4, #12]
 8017cb0:	bd10      	pop	{r4, pc}

08017cb2 <__sclose>:
 8017cb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017cb6:	f000 b865 	b.w	8017d84 <_close_r>

08017cba <memcmp>:
 8017cba:	b510      	push	{r4, lr}
 8017cbc:	3901      	subs	r1, #1
 8017cbe:	4402      	add	r2, r0
 8017cc0:	4290      	cmp	r0, r2
 8017cc2:	d101      	bne.n	8017cc8 <memcmp+0xe>
 8017cc4:	2000      	movs	r0, #0
 8017cc6:	e005      	b.n	8017cd4 <memcmp+0x1a>
 8017cc8:	7803      	ldrb	r3, [r0, #0]
 8017cca:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8017cce:	42a3      	cmp	r3, r4
 8017cd0:	d001      	beq.n	8017cd6 <memcmp+0x1c>
 8017cd2:	1b18      	subs	r0, r3, r4
 8017cd4:	bd10      	pop	{r4, pc}
 8017cd6:	3001      	adds	r0, #1
 8017cd8:	e7f2      	b.n	8017cc0 <memcmp+0x6>

08017cda <memmove>:
 8017cda:	4288      	cmp	r0, r1
 8017cdc:	b510      	push	{r4, lr}
 8017cde:	eb01 0402 	add.w	r4, r1, r2
 8017ce2:	d902      	bls.n	8017cea <memmove+0x10>
 8017ce4:	4284      	cmp	r4, r0
 8017ce6:	4623      	mov	r3, r4
 8017ce8:	d807      	bhi.n	8017cfa <memmove+0x20>
 8017cea:	1e43      	subs	r3, r0, #1
 8017cec:	42a1      	cmp	r1, r4
 8017cee:	d008      	beq.n	8017d02 <memmove+0x28>
 8017cf0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017cf4:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017cf8:	e7f8      	b.n	8017cec <memmove+0x12>
 8017cfa:	4402      	add	r2, r0
 8017cfc:	4601      	mov	r1, r0
 8017cfe:	428a      	cmp	r2, r1
 8017d00:	d100      	bne.n	8017d04 <memmove+0x2a>
 8017d02:	bd10      	pop	{r4, pc}
 8017d04:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017d08:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017d0c:	e7f7      	b.n	8017cfe <memmove+0x24>

08017d0e <memset>:
 8017d0e:	4402      	add	r2, r0
 8017d10:	4603      	mov	r3, r0
 8017d12:	4293      	cmp	r3, r2
 8017d14:	d100      	bne.n	8017d18 <memset+0xa>
 8017d16:	4770      	bx	lr
 8017d18:	f803 1b01 	strb.w	r1, [r3], #1
 8017d1c:	e7f9      	b.n	8017d12 <memset+0x4>

08017d1e <strchr>:
 8017d1e:	b2c9      	uxtb	r1, r1
 8017d20:	4603      	mov	r3, r0
 8017d22:	4618      	mov	r0, r3
 8017d24:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017d28:	b112      	cbz	r2, 8017d30 <strchr+0x12>
 8017d2a:	428a      	cmp	r2, r1
 8017d2c:	d1f9      	bne.n	8017d22 <strchr+0x4>
 8017d2e:	4770      	bx	lr
 8017d30:	2900      	cmp	r1, #0
 8017d32:	bf18      	it	ne
 8017d34:	2000      	movne	r0, #0
 8017d36:	4770      	bx	lr

08017d38 <strncmp>:
 8017d38:	b510      	push	{r4, lr}
 8017d3a:	b16a      	cbz	r2, 8017d58 <strncmp+0x20>
 8017d3c:	3901      	subs	r1, #1
 8017d3e:	1884      	adds	r4, r0, r2
 8017d40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017d44:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8017d48:	429a      	cmp	r2, r3
 8017d4a:	d103      	bne.n	8017d54 <strncmp+0x1c>
 8017d4c:	42a0      	cmp	r0, r4
 8017d4e:	d001      	beq.n	8017d54 <strncmp+0x1c>
 8017d50:	2a00      	cmp	r2, #0
 8017d52:	d1f5      	bne.n	8017d40 <strncmp+0x8>
 8017d54:	1ad0      	subs	r0, r2, r3
 8017d56:	bd10      	pop	{r4, pc}
 8017d58:	4610      	mov	r0, r2
 8017d5a:	e7fc      	b.n	8017d56 <strncmp+0x1e>

08017d5c <strncpy>:
 8017d5c:	b510      	push	{r4, lr}
 8017d5e:	3901      	subs	r1, #1
 8017d60:	4603      	mov	r3, r0
 8017d62:	b132      	cbz	r2, 8017d72 <strncpy+0x16>
 8017d64:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8017d68:	f803 4b01 	strb.w	r4, [r3], #1
 8017d6c:	3a01      	subs	r2, #1
 8017d6e:	2c00      	cmp	r4, #0
 8017d70:	d1f7      	bne.n	8017d62 <strncpy+0x6>
 8017d72:	441a      	add	r2, r3
 8017d74:	2100      	movs	r1, #0
 8017d76:	4293      	cmp	r3, r2
 8017d78:	d100      	bne.n	8017d7c <strncpy+0x20>
 8017d7a:	bd10      	pop	{r4, pc}
 8017d7c:	f803 1b01 	strb.w	r1, [r3], #1
 8017d80:	e7f9      	b.n	8017d76 <strncpy+0x1a>
	...

08017d84 <_close_r>:
 8017d84:	b538      	push	{r3, r4, r5, lr}
 8017d86:	4d06      	ldr	r5, [pc, #24]	@ (8017da0 <_close_r+0x1c>)
 8017d88:	2300      	movs	r3, #0
 8017d8a:	4604      	mov	r4, r0
 8017d8c:	4608      	mov	r0, r1
 8017d8e:	602b      	str	r3, [r5, #0]
 8017d90:	f7ee fed2 	bl	8006b38 <_close>
 8017d94:	1c43      	adds	r3, r0, #1
 8017d96:	d102      	bne.n	8017d9e <_close_r+0x1a>
 8017d98:	682b      	ldr	r3, [r5, #0]
 8017d9a:	b103      	cbz	r3, 8017d9e <_close_r+0x1a>
 8017d9c:	6023      	str	r3, [r4, #0]
 8017d9e:	bd38      	pop	{r3, r4, r5, pc}
 8017da0:	200154e4 	.word	0x200154e4

08017da4 <_lseek_r>:
 8017da4:	b538      	push	{r3, r4, r5, lr}
 8017da6:	4d07      	ldr	r5, [pc, #28]	@ (8017dc4 <_lseek_r+0x20>)
 8017da8:	4604      	mov	r4, r0
 8017daa:	4608      	mov	r0, r1
 8017dac:	4611      	mov	r1, r2
 8017dae:	2200      	movs	r2, #0
 8017db0:	602a      	str	r2, [r5, #0]
 8017db2:	461a      	mov	r2, r3
 8017db4:	f7ee fee7 	bl	8006b86 <_lseek>
 8017db8:	1c43      	adds	r3, r0, #1
 8017dba:	d102      	bne.n	8017dc2 <_lseek_r+0x1e>
 8017dbc:	682b      	ldr	r3, [r5, #0]
 8017dbe:	b103      	cbz	r3, 8017dc2 <_lseek_r+0x1e>
 8017dc0:	6023      	str	r3, [r4, #0]
 8017dc2:	bd38      	pop	{r3, r4, r5, pc}
 8017dc4:	200154e4 	.word	0x200154e4

08017dc8 <_read_r>:
 8017dc8:	b538      	push	{r3, r4, r5, lr}
 8017dca:	4d07      	ldr	r5, [pc, #28]	@ (8017de8 <_read_r+0x20>)
 8017dcc:	4604      	mov	r4, r0
 8017dce:	4608      	mov	r0, r1
 8017dd0:	4611      	mov	r1, r2
 8017dd2:	2200      	movs	r2, #0
 8017dd4:	602a      	str	r2, [r5, #0]
 8017dd6:	461a      	mov	r2, r3
 8017dd8:	f7ee fe75 	bl	8006ac6 <_read>
 8017ddc:	1c43      	adds	r3, r0, #1
 8017dde:	d102      	bne.n	8017de6 <_read_r+0x1e>
 8017de0:	682b      	ldr	r3, [r5, #0]
 8017de2:	b103      	cbz	r3, 8017de6 <_read_r+0x1e>
 8017de4:	6023      	str	r3, [r4, #0]
 8017de6:	bd38      	pop	{r3, r4, r5, pc}
 8017de8:	200154e4 	.word	0x200154e4

08017dec <_write_r>:
 8017dec:	b538      	push	{r3, r4, r5, lr}
 8017dee:	4d07      	ldr	r5, [pc, #28]	@ (8017e0c <_write_r+0x20>)
 8017df0:	4604      	mov	r4, r0
 8017df2:	4608      	mov	r0, r1
 8017df4:	4611      	mov	r1, r2
 8017df6:	2200      	movs	r2, #0
 8017df8:	602a      	str	r2, [r5, #0]
 8017dfa:	461a      	mov	r2, r3
 8017dfc:	f7ee fe80 	bl	8006b00 <_write>
 8017e00:	1c43      	adds	r3, r0, #1
 8017e02:	d102      	bne.n	8017e0a <_write_r+0x1e>
 8017e04:	682b      	ldr	r3, [r5, #0]
 8017e06:	b103      	cbz	r3, 8017e0a <_write_r+0x1e>
 8017e08:	6023      	str	r3, [r4, #0]
 8017e0a:	bd38      	pop	{r3, r4, r5, pc}
 8017e0c:	200154e4 	.word	0x200154e4

08017e10 <__errno>:
 8017e10:	4b01      	ldr	r3, [pc, #4]	@ (8017e18 <__errno+0x8>)
 8017e12:	6818      	ldr	r0, [r3, #0]
 8017e14:	4770      	bx	lr
 8017e16:	bf00      	nop
 8017e18:	20000a94 	.word	0x20000a94

08017e1c <__libc_init_array>:
 8017e1c:	b570      	push	{r4, r5, r6, lr}
 8017e1e:	4d0d      	ldr	r5, [pc, #52]	@ (8017e54 <__libc_init_array+0x38>)
 8017e20:	4c0d      	ldr	r4, [pc, #52]	@ (8017e58 <__libc_init_array+0x3c>)
 8017e22:	1b64      	subs	r4, r4, r5
 8017e24:	10a4      	asrs	r4, r4, #2
 8017e26:	2600      	movs	r6, #0
 8017e28:	42a6      	cmp	r6, r4
 8017e2a:	d109      	bne.n	8017e40 <__libc_init_array+0x24>
 8017e2c:	4d0b      	ldr	r5, [pc, #44]	@ (8017e5c <__libc_init_array+0x40>)
 8017e2e:	4c0c      	ldr	r4, [pc, #48]	@ (8017e60 <__libc_init_array+0x44>)
 8017e30:	f002 fb34 	bl	801a49c <_init>
 8017e34:	1b64      	subs	r4, r4, r5
 8017e36:	10a4      	asrs	r4, r4, #2
 8017e38:	2600      	movs	r6, #0
 8017e3a:	42a6      	cmp	r6, r4
 8017e3c:	d105      	bne.n	8017e4a <__libc_init_array+0x2e>
 8017e3e:	bd70      	pop	{r4, r5, r6, pc}
 8017e40:	f855 3b04 	ldr.w	r3, [r5], #4
 8017e44:	4798      	blx	r3
 8017e46:	3601      	adds	r6, #1
 8017e48:	e7ee      	b.n	8017e28 <__libc_init_array+0xc>
 8017e4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8017e4e:	4798      	blx	r3
 8017e50:	3601      	adds	r6, #1
 8017e52:	e7f2      	b.n	8017e3a <__libc_init_array+0x1e>
 8017e54:	08023868 	.word	0x08023868
 8017e58:	08023868 	.word	0x08023868
 8017e5c:	08023868 	.word	0x08023868
 8017e60:	0802386c 	.word	0x0802386c

08017e64 <__retarget_lock_init_recursive>:
 8017e64:	4770      	bx	lr

08017e66 <__retarget_lock_acquire_recursive>:
 8017e66:	4770      	bx	lr

08017e68 <__retarget_lock_release_recursive>:
 8017e68:	4770      	bx	lr

08017e6a <strcpy>:
 8017e6a:	4603      	mov	r3, r0
 8017e6c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017e70:	f803 2b01 	strb.w	r2, [r3], #1
 8017e74:	2a00      	cmp	r2, #0
 8017e76:	d1f9      	bne.n	8017e6c <strcpy+0x2>
 8017e78:	4770      	bx	lr

08017e7a <memcpy>:
 8017e7a:	440a      	add	r2, r1
 8017e7c:	4291      	cmp	r1, r2
 8017e7e:	f100 33ff 	add.w	r3, r0, #4294967295
 8017e82:	d100      	bne.n	8017e86 <memcpy+0xc>
 8017e84:	4770      	bx	lr
 8017e86:	b510      	push	{r4, lr}
 8017e88:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017e8c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017e90:	4291      	cmp	r1, r2
 8017e92:	d1f9      	bne.n	8017e88 <memcpy+0xe>
 8017e94:	bd10      	pop	{r4, pc}
	...

08017e98 <nan>:
 8017e98:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8017ea0 <nan+0x8>
 8017e9c:	4770      	bx	lr
 8017e9e:	bf00      	nop
 8017ea0:	00000000 	.word	0x00000000
 8017ea4:	7ff80000 	.word	0x7ff80000

08017ea8 <__assert_func>:
 8017ea8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017eaa:	4614      	mov	r4, r2
 8017eac:	461a      	mov	r2, r3
 8017eae:	4b09      	ldr	r3, [pc, #36]	@ (8017ed4 <__assert_func+0x2c>)
 8017eb0:	681b      	ldr	r3, [r3, #0]
 8017eb2:	4605      	mov	r5, r0
 8017eb4:	68d8      	ldr	r0, [r3, #12]
 8017eb6:	b14c      	cbz	r4, 8017ecc <__assert_func+0x24>
 8017eb8:	4b07      	ldr	r3, [pc, #28]	@ (8017ed8 <__assert_func+0x30>)
 8017eba:	9100      	str	r1, [sp, #0]
 8017ebc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017ec0:	4906      	ldr	r1, [pc, #24]	@ (8017edc <__assert_func+0x34>)
 8017ec2:	462b      	mov	r3, r5
 8017ec4:	f001 fde2 	bl	8019a8c <fiprintf>
 8017ec8:	f001 fe96 	bl	8019bf8 <abort>
 8017ecc:	4b04      	ldr	r3, [pc, #16]	@ (8017ee0 <__assert_func+0x38>)
 8017ece:	461c      	mov	r4, r3
 8017ed0:	e7f3      	b.n	8017eba <__assert_func+0x12>
 8017ed2:	bf00      	nop
 8017ed4:	20000a94 	.word	0x20000a94
 8017ed8:	08023483 	.word	0x08023483
 8017edc:	08023490 	.word	0x08023490
 8017ee0:	080234be 	.word	0x080234be

08017ee4 <_free_r>:
 8017ee4:	b538      	push	{r3, r4, r5, lr}
 8017ee6:	4605      	mov	r5, r0
 8017ee8:	2900      	cmp	r1, #0
 8017eea:	d041      	beq.n	8017f70 <_free_r+0x8c>
 8017eec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017ef0:	1f0c      	subs	r4, r1, #4
 8017ef2:	2b00      	cmp	r3, #0
 8017ef4:	bfb8      	it	lt
 8017ef6:	18e4      	addlt	r4, r4, r3
 8017ef8:	f000 fc34 	bl	8018764 <__malloc_lock>
 8017efc:	4a1d      	ldr	r2, [pc, #116]	@ (8017f74 <_free_r+0x90>)
 8017efe:	6813      	ldr	r3, [r2, #0]
 8017f00:	b933      	cbnz	r3, 8017f10 <_free_r+0x2c>
 8017f02:	6063      	str	r3, [r4, #4]
 8017f04:	6014      	str	r4, [r2, #0]
 8017f06:	4628      	mov	r0, r5
 8017f08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017f0c:	f000 bc30 	b.w	8018770 <__malloc_unlock>
 8017f10:	42a3      	cmp	r3, r4
 8017f12:	d908      	bls.n	8017f26 <_free_r+0x42>
 8017f14:	6820      	ldr	r0, [r4, #0]
 8017f16:	1821      	adds	r1, r4, r0
 8017f18:	428b      	cmp	r3, r1
 8017f1a:	bf01      	itttt	eq
 8017f1c:	6819      	ldreq	r1, [r3, #0]
 8017f1e:	685b      	ldreq	r3, [r3, #4]
 8017f20:	1809      	addeq	r1, r1, r0
 8017f22:	6021      	streq	r1, [r4, #0]
 8017f24:	e7ed      	b.n	8017f02 <_free_r+0x1e>
 8017f26:	461a      	mov	r2, r3
 8017f28:	685b      	ldr	r3, [r3, #4]
 8017f2a:	b10b      	cbz	r3, 8017f30 <_free_r+0x4c>
 8017f2c:	42a3      	cmp	r3, r4
 8017f2e:	d9fa      	bls.n	8017f26 <_free_r+0x42>
 8017f30:	6811      	ldr	r1, [r2, #0]
 8017f32:	1850      	adds	r0, r2, r1
 8017f34:	42a0      	cmp	r0, r4
 8017f36:	d10b      	bne.n	8017f50 <_free_r+0x6c>
 8017f38:	6820      	ldr	r0, [r4, #0]
 8017f3a:	4401      	add	r1, r0
 8017f3c:	1850      	adds	r0, r2, r1
 8017f3e:	4283      	cmp	r3, r0
 8017f40:	6011      	str	r1, [r2, #0]
 8017f42:	d1e0      	bne.n	8017f06 <_free_r+0x22>
 8017f44:	6818      	ldr	r0, [r3, #0]
 8017f46:	685b      	ldr	r3, [r3, #4]
 8017f48:	6053      	str	r3, [r2, #4]
 8017f4a:	4408      	add	r0, r1
 8017f4c:	6010      	str	r0, [r2, #0]
 8017f4e:	e7da      	b.n	8017f06 <_free_r+0x22>
 8017f50:	d902      	bls.n	8017f58 <_free_r+0x74>
 8017f52:	230c      	movs	r3, #12
 8017f54:	602b      	str	r3, [r5, #0]
 8017f56:	e7d6      	b.n	8017f06 <_free_r+0x22>
 8017f58:	6820      	ldr	r0, [r4, #0]
 8017f5a:	1821      	adds	r1, r4, r0
 8017f5c:	428b      	cmp	r3, r1
 8017f5e:	bf04      	itt	eq
 8017f60:	6819      	ldreq	r1, [r3, #0]
 8017f62:	685b      	ldreq	r3, [r3, #4]
 8017f64:	6063      	str	r3, [r4, #4]
 8017f66:	bf04      	itt	eq
 8017f68:	1809      	addeq	r1, r1, r0
 8017f6a:	6021      	streq	r1, [r4, #0]
 8017f6c:	6054      	str	r4, [r2, #4]
 8017f6e:	e7ca      	b.n	8017f06 <_free_r+0x22>
 8017f70:	bd38      	pop	{r3, r4, r5, pc}
 8017f72:	bf00      	nop
 8017f74:	200154f0 	.word	0x200154f0

08017f78 <rshift>:
 8017f78:	6903      	ldr	r3, [r0, #16]
 8017f7a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8017f7e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017f82:	ea4f 1261 	mov.w	r2, r1, asr #5
 8017f86:	f100 0414 	add.w	r4, r0, #20
 8017f8a:	dd45      	ble.n	8018018 <rshift+0xa0>
 8017f8c:	f011 011f 	ands.w	r1, r1, #31
 8017f90:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8017f94:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8017f98:	d10c      	bne.n	8017fb4 <rshift+0x3c>
 8017f9a:	f100 0710 	add.w	r7, r0, #16
 8017f9e:	4629      	mov	r1, r5
 8017fa0:	42b1      	cmp	r1, r6
 8017fa2:	d334      	bcc.n	801800e <rshift+0x96>
 8017fa4:	1a9b      	subs	r3, r3, r2
 8017fa6:	009b      	lsls	r3, r3, #2
 8017fa8:	1eea      	subs	r2, r5, #3
 8017faa:	4296      	cmp	r6, r2
 8017fac:	bf38      	it	cc
 8017fae:	2300      	movcc	r3, #0
 8017fb0:	4423      	add	r3, r4
 8017fb2:	e015      	b.n	8017fe0 <rshift+0x68>
 8017fb4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8017fb8:	f1c1 0820 	rsb	r8, r1, #32
 8017fbc:	40cf      	lsrs	r7, r1
 8017fbe:	f105 0e04 	add.w	lr, r5, #4
 8017fc2:	46a1      	mov	r9, r4
 8017fc4:	4576      	cmp	r6, lr
 8017fc6:	46f4      	mov	ip, lr
 8017fc8:	d815      	bhi.n	8017ff6 <rshift+0x7e>
 8017fca:	1a9a      	subs	r2, r3, r2
 8017fcc:	0092      	lsls	r2, r2, #2
 8017fce:	3a04      	subs	r2, #4
 8017fd0:	3501      	adds	r5, #1
 8017fd2:	42ae      	cmp	r6, r5
 8017fd4:	bf38      	it	cc
 8017fd6:	2200      	movcc	r2, #0
 8017fd8:	18a3      	adds	r3, r4, r2
 8017fda:	50a7      	str	r7, [r4, r2]
 8017fdc:	b107      	cbz	r7, 8017fe0 <rshift+0x68>
 8017fde:	3304      	adds	r3, #4
 8017fe0:	1b1a      	subs	r2, r3, r4
 8017fe2:	42a3      	cmp	r3, r4
 8017fe4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8017fe8:	bf08      	it	eq
 8017fea:	2300      	moveq	r3, #0
 8017fec:	6102      	str	r2, [r0, #16]
 8017fee:	bf08      	it	eq
 8017ff0:	6143      	streq	r3, [r0, #20]
 8017ff2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017ff6:	f8dc c000 	ldr.w	ip, [ip]
 8017ffa:	fa0c fc08 	lsl.w	ip, ip, r8
 8017ffe:	ea4c 0707 	orr.w	r7, ip, r7
 8018002:	f849 7b04 	str.w	r7, [r9], #4
 8018006:	f85e 7b04 	ldr.w	r7, [lr], #4
 801800a:	40cf      	lsrs	r7, r1
 801800c:	e7da      	b.n	8017fc4 <rshift+0x4c>
 801800e:	f851 cb04 	ldr.w	ip, [r1], #4
 8018012:	f847 cf04 	str.w	ip, [r7, #4]!
 8018016:	e7c3      	b.n	8017fa0 <rshift+0x28>
 8018018:	4623      	mov	r3, r4
 801801a:	e7e1      	b.n	8017fe0 <rshift+0x68>

0801801c <__hexdig_fun>:
 801801c:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8018020:	2b09      	cmp	r3, #9
 8018022:	d802      	bhi.n	801802a <__hexdig_fun+0xe>
 8018024:	3820      	subs	r0, #32
 8018026:	b2c0      	uxtb	r0, r0
 8018028:	4770      	bx	lr
 801802a:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801802e:	2b05      	cmp	r3, #5
 8018030:	d801      	bhi.n	8018036 <__hexdig_fun+0x1a>
 8018032:	3847      	subs	r0, #71	@ 0x47
 8018034:	e7f7      	b.n	8018026 <__hexdig_fun+0xa>
 8018036:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801803a:	2b05      	cmp	r3, #5
 801803c:	d801      	bhi.n	8018042 <__hexdig_fun+0x26>
 801803e:	3827      	subs	r0, #39	@ 0x27
 8018040:	e7f1      	b.n	8018026 <__hexdig_fun+0xa>
 8018042:	2000      	movs	r0, #0
 8018044:	4770      	bx	lr
	...

08018048 <__gethex>:
 8018048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801804c:	b085      	sub	sp, #20
 801804e:	468a      	mov	sl, r1
 8018050:	9302      	str	r3, [sp, #8]
 8018052:	680b      	ldr	r3, [r1, #0]
 8018054:	9001      	str	r0, [sp, #4]
 8018056:	4690      	mov	r8, r2
 8018058:	1c9c      	adds	r4, r3, #2
 801805a:	46a1      	mov	r9, r4
 801805c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8018060:	2830      	cmp	r0, #48	@ 0x30
 8018062:	d0fa      	beq.n	801805a <__gethex+0x12>
 8018064:	eba9 0303 	sub.w	r3, r9, r3
 8018068:	f1a3 0b02 	sub.w	fp, r3, #2
 801806c:	f7ff ffd6 	bl	801801c <__hexdig_fun>
 8018070:	4605      	mov	r5, r0
 8018072:	2800      	cmp	r0, #0
 8018074:	d168      	bne.n	8018148 <__gethex+0x100>
 8018076:	49a0      	ldr	r1, [pc, #640]	@ (80182f8 <__gethex+0x2b0>)
 8018078:	2201      	movs	r2, #1
 801807a:	4648      	mov	r0, r9
 801807c:	f7ff fe5c 	bl	8017d38 <strncmp>
 8018080:	4607      	mov	r7, r0
 8018082:	2800      	cmp	r0, #0
 8018084:	d167      	bne.n	8018156 <__gethex+0x10e>
 8018086:	f899 0001 	ldrb.w	r0, [r9, #1]
 801808a:	4626      	mov	r6, r4
 801808c:	f7ff ffc6 	bl	801801c <__hexdig_fun>
 8018090:	2800      	cmp	r0, #0
 8018092:	d062      	beq.n	801815a <__gethex+0x112>
 8018094:	4623      	mov	r3, r4
 8018096:	7818      	ldrb	r0, [r3, #0]
 8018098:	2830      	cmp	r0, #48	@ 0x30
 801809a:	4699      	mov	r9, r3
 801809c:	f103 0301 	add.w	r3, r3, #1
 80180a0:	d0f9      	beq.n	8018096 <__gethex+0x4e>
 80180a2:	f7ff ffbb 	bl	801801c <__hexdig_fun>
 80180a6:	fab0 f580 	clz	r5, r0
 80180aa:	096d      	lsrs	r5, r5, #5
 80180ac:	f04f 0b01 	mov.w	fp, #1
 80180b0:	464a      	mov	r2, r9
 80180b2:	4616      	mov	r6, r2
 80180b4:	3201      	adds	r2, #1
 80180b6:	7830      	ldrb	r0, [r6, #0]
 80180b8:	f7ff ffb0 	bl	801801c <__hexdig_fun>
 80180bc:	2800      	cmp	r0, #0
 80180be:	d1f8      	bne.n	80180b2 <__gethex+0x6a>
 80180c0:	498d      	ldr	r1, [pc, #564]	@ (80182f8 <__gethex+0x2b0>)
 80180c2:	2201      	movs	r2, #1
 80180c4:	4630      	mov	r0, r6
 80180c6:	f7ff fe37 	bl	8017d38 <strncmp>
 80180ca:	2800      	cmp	r0, #0
 80180cc:	d13f      	bne.n	801814e <__gethex+0x106>
 80180ce:	b944      	cbnz	r4, 80180e2 <__gethex+0x9a>
 80180d0:	1c74      	adds	r4, r6, #1
 80180d2:	4622      	mov	r2, r4
 80180d4:	4616      	mov	r6, r2
 80180d6:	3201      	adds	r2, #1
 80180d8:	7830      	ldrb	r0, [r6, #0]
 80180da:	f7ff ff9f 	bl	801801c <__hexdig_fun>
 80180de:	2800      	cmp	r0, #0
 80180e0:	d1f8      	bne.n	80180d4 <__gethex+0x8c>
 80180e2:	1ba4      	subs	r4, r4, r6
 80180e4:	00a7      	lsls	r7, r4, #2
 80180e6:	7833      	ldrb	r3, [r6, #0]
 80180e8:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80180ec:	2b50      	cmp	r3, #80	@ 0x50
 80180ee:	d13e      	bne.n	801816e <__gethex+0x126>
 80180f0:	7873      	ldrb	r3, [r6, #1]
 80180f2:	2b2b      	cmp	r3, #43	@ 0x2b
 80180f4:	d033      	beq.n	801815e <__gethex+0x116>
 80180f6:	2b2d      	cmp	r3, #45	@ 0x2d
 80180f8:	d034      	beq.n	8018164 <__gethex+0x11c>
 80180fa:	1c71      	adds	r1, r6, #1
 80180fc:	2400      	movs	r4, #0
 80180fe:	7808      	ldrb	r0, [r1, #0]
 8018100:	f7ff ff8c 	bl	801801c <__hexdig_fun>
 8018104:	1e43      	subs	r3, r0, #1
 8018106:	b2db      	uxtb	r3, r3
 8018108:	2b18      	cmp	r3, #24
 801810a:	d830      	bhi.n	801816e <__gethex+0x126>
 801810c:	f1a0 0210 	sub.w	r2, r0, #16
 8018110:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8018114:	f7ff ff82 	bl	801801c <__hexdig_fun>
 8018118:	f100 3cff 	add.w	ip, r0, #4294967295
 801811c:	fa5f fc8c 	uxtb.w	ip, ip
 8018120:	f1bc 0f18 	cmp.w	ip, #24
 8018124:	f04f 030a 	mov.w	r3, #10
 8018128:	d91e      	bls.n	8018168 <__gethex+0x120>
 801812a:	b104      	cbz	r4, 801812e <__gethex+0xe6>
 801812c:	4252      	negs	r2, r2
 801812e:	4417      	add	r7, r2
 8018130:	f8ca 1000 	str.w	r1, [sl]
 8018134:	b1ed      	cbz	r5, 8018172 <__gethex+0x12a>
 8018136:	f1bb 0f00 	cmp.w	fp, #0
 801813a:	bf0c      	ite	eq
 801813c:	2506      	moveq	r5, #6
 801813e:	2500      	movne	r5, #0
 8018140:	4628      	mov	r0, r5
 8018142:	b005      	add	sp, #20
 8018144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018148:	2500      	movs	r5, #0
 801814a:	462c      	mov	r4, r5
 801814c:	e7b0      	b.n	80180b0 <__gethex+0x68>
 801814e:	2c00      	cmp	r4, #0
 8018150:	d1c7      	bne.n	80180e2 <__gethex+0x9a>
 8018152:	4627      	mov	r7, r4
 8018154:	e7c7      	b.n	80180e6 <__gethex+0x9e>
 8018156:	464e      	mov	r6, r9
 8018158:	462f      	mov	r7, r5
 801815a:	2501      	movs	r5, #1
 801815c:	e7c3      	b.n	80180e6 <__gethex+0x9e>
 801815e:	2400      	movs	r4, #0
 8018160:	1cb1      	adds	r1, r6, #2
 8018162:	e7cc      	b.n	80180fe <__gethex+0xb6>
 8018164:	2401      	movs	r4, #1
 8018166:	e7fb      	b.n	8018160 <__gethex+0x118>
 8018168:	fb03 0002 	mla	r0, r3, r2, r0
 801816c:	e7ce      	b.n	801810c <__gethex+0xc4>
 801816e:	4631      	mov	r1, r6
 8018170:	e7de      	b.n	8018130 <__gethex+0xe8>
 8018172:	eba6 0309 	sub.w	r3, r6, r9
 8018176:	3b01      	subs	r3, #1
 8018178:	4629      	mov	r1, r5
 801817a:	2b07      	cmp	r3, #7
 801817c:	dc0a      	bgt.n	8018194 <__gethex+0x14c>
 801817e:	9801      	ldr	r0, [sp, #4]
 8018180:	f000 fafc 	bl	801877c <_Balloc>
 8018184:	4604      	mov	r4, r0
 8018186:	b940      	cbnz	r0, 801819a <__gethex+0x152>
 8018188:	4b5c      	ldr	r3, [pc, #368]	@ (80182fc <__gethex+0x2b4>)
 801818a:	4602      	mov	r2, r0
 801818c:	21e4      	movs	r1, #228	@ 0xe4
 801818e:	485c      	ldr	r0, [pc, #368]	@ (8018300 <__gethex+0x2b8>)
 8018190:	f7ff fe8a 	bl	8017ea8 <__assert_func>
 8018194:	3101      	adds	r1, #1
 8018196:	105b      	asrs	r3, r3, #1
 8018198:	e7ef      	b.n	801817a <__gethex+0x132>
 801819a:	f100 0a14 	add.w	sl, r0, #20
 801819e:	2300      	movs	r3, #0
 80181a0:	4655      	mov	r5, sl
 80181a2:	469b      	mov	fp, r3
 80181a4:	45b1      	cmp	r9, r6
 80181a6:	d337      	bcc.n	8018218 <__gethex+0x1d0>
 80181a8:	f845 bb04 	str.w	fp, [r5], #4
 80181ac:	eba5 050a 	sub.w	r5, r5, sl
 80181b0:	10ad      	asrs	r5, r5, #2
 80181b2:	6125      	str	r5, [r4, #16]
 80181b4:	4658      	mov	r0, fp
 80181b6:	f000 fbd3 	bl	8018960 <__hi0bits>
 80181ba:	016d      	lsls	r5, r5, #5
 80181bc:	f8d8 6000 	ldr.w	r6, [r8]
 80181c0:	1a2d      	subs	r5, r5, r0
 80181c2:	42b5      	cmp	r5, r6
 80181c4:	dd54      	ble.n	8018270 <__gethex+0x228>
 80181c6:	1bad      	subs	r5, r5, r6
 80181c8:	4629      	mov	r1, r5
 80181ca:	4620      	mov	r0, r4
 80181cc:	f000 ff5f 	bl	801908e <__any_on>
 80181d0:	4681      	mov	r9, r0
 80181d2:	b178      	cbz	r0, 80181f4 <__gethex+0x1ac>
 80181d4:	1e6b      	subs	r3, r5, #1
 80181d6:	1159      	asrs	r1, r3, #5
 80181d8:	f003 021f 	and.w	r2, r3, #31
 80181dc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80181e0:	f04f 0901 	mov.w	r9, #1
 80181e4:	fa09 f202 	lsl.w	r2, r9, r2
 80181e8:	420a      	tst	r2, r1
 80181ea:	d003      	beq.n	80181f4 <__gethex+0x1ac>
 80181ec:	454b      	cmp	r3, r9
 80181ee:	dc36      	bgt.n	801825e <__gethex+0x216>
 80181f0:	f04f 0902 	mov.w	r9, #2
 80181f4:	4629      	mov	r1, r5
 80181f6:	4620      	mov	r0, r4
 80181f8:	f7ff febe 	bl	8017f78 <rshift>
 80181fc:	442f      	add	r7, r5
 80181fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018202:	42bb      	cmp	r3, r7
 8018204:	da42      	bge.n	801828c <__gethex+0x244>
 8018206:	9801      	ldr	r0, [sp, #4]
 8018208:	4621      	mov	r1, r4
 801820a:	f000 faf7 	bl	80187fc <_Bfree>
 801820e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8018210:	2300      	movs	r3, #0
 8018212:	6013      	str	r3, [r2, #0]
 8018214:	25a3      	movs	r5, #163	@ 0xa3
 8018216:	e793      	b.n	8018140 <__gethex+0xf8>
 8018218:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 801821c:	2a2e      	cmp	r2, #46	@ 0x2e
 801821e:	d012      	beq.n	8018246 <__gethex+0x1fe>
 8018220:	2b20      	cmp	r3, #32
 8018222:	d104      	bne.n	801822e <__gethex+0x1e6>
 8018224:	f845 bb04 	str.w	fp, [r5], #4
 8018228:	f04f 0b00 	mov.w	fp, #0
 801822c:	465b      	mov	r3, fp
 801822e:	7830      	ldrb	r0, [r6, #0]
 8018230:	9303      	str	r3, [sp, #12]
 8018232:	f7ff fef3 	bl	801801c <__hexdig_fun>
 8018236:	9b03      	ldr	r3, [sp, #12]
 8018238:	f000 000f 	and.w	r0, r0, #15
 801823c:	4098      	lsls	r0, r3
 801823e:	ea4b 0b00 	orr.w	fp, fp, r0
 8018242:	3304      	adds	r3, #4
 8018244:	e7ae      	b.n	80181a4 <__gethex+0x15c>
 8018246:	45b1      	cmp	r9, r6
 8018248:	d8ea      	bhi.n	8018220 <__gethex+0x1d8>
 801824a:	492b      	ldr	r1, [pc, #172]	@ (80182f8 <__gethex+0x2b0>)
 801824c:	9303      	str	r3, [sp, #12]
 801824e:	2201      	movs	r2, #1
 8018250:	4630      	mov	r0, r6
 8018252:	f7ff fd71 	bl	8017d38 <strncmp>
 8018256:	9b03      	ldr	r3, [sp, #12]
 8018258:	2800      	cmp	r0, #0
 801825a:	d1e1      	bne.n	8018220 <__gethex+0x1d8>
 801825c:	e7a2      	b.n	80181a4 <__gethex+0x15c>
 801825e:	1ea9      	subs	r1, r5, #2
 8018260:	4620      	mov	r0, r4
 8018262:	f000 ff14 	bl	801908e <__any_on>
 8018266:	2800      	cmp	r0, #0
 8018268:	d0c2      	beq.n	80181f0 <__gethex+0x1a8>
 801826a:	f04f 0903 	mov.w	r9, #3
 801826e:	e7c1      	b.n	80181f4 <__gethex+0x1ac>
 8018270:	da09      	bge.n	8018286 <__gethex+0x23e>
 8018272:	1b75      	subs	r5, r6, r5
 8018274:	4621      	mov	r1, r4
 8018276:	9801      	ldr	r0, [sp, #4]
 8018278:	462a      	mov	r2, r5
 801827a:	f000 fccf 	bl	8018c1c <__lshift>
 801827e:	1b7f      	subs	r7, r7, r5
 8018280:	4604      	mov	r4, r0
 8018282:	f100 0a14 	add.w	sl, r0, #20
 8018286:	f04f 0900 	mov.w	r9, #0
 801828a:	e7b8      	b.n	80181fe <__gethex+0x1b6>
 801828c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8018290:	42bd      	cmp	r5, r7
 8018292:	dd6f      	ble.n	8018374 <__gethex+0x32c>
 8018294:	1bed      	subs	r5, r5, r7
 8018296:	42ae      	cmp	r6, r5
 8018298:	dc34      	bgt.n	8018304 <__gethex+0x2bc>
 801829a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801829e:	2b02      	cmp	r3, #2
 80182a0:	d022      	beq.n	80182e8 <__gethex+0x2a0>
 80182a2:	2b03      	cmp	r3, #3
 80182a4:	d024      	beq.n	80182f0 <__gethex+0x2a8>
 80182a6:	2b01      	cmp	r3, #1
 80182a8:	d115      	bne.n	80182d6 <__gethex+0x28e>
 80182aa:	42ae      	cmp	r6, r5
 80182ac:	d113      	bne.n	80182d6 <__gethex+0x28e>
 80182ae:	2e01      	cmp	r6, #1
 80182b0:	d10b      	bne.n	80182ca <__gethex+0x282>
 80182b2:	9a02      	ldr	r2, [sp, #8]
 80182b4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80182b8:	6013      	str	r3, [r2, #0]
 80182ba:	2301      	movs	r3, #1
 80182bc:	6123      	str	r3, [r4, #16]
 80182be:	f8ca 3000 	str.w	r3, [sl]
 80182c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80182c4:	2562      	movs	r5, #98	@ 0x62
 80182c6:	601c      	str	r4, [r3, #0]
 80182c8:	e73a      	b.n	8018140 <__gethex+0xf8>
 80182ca:	1e71      	subs	r1, r6, #1
 80182cc:	4620      	mov	r0, r4
 80182ce:	f000 fede 	bl	801908e <__any_on>
 80182d2:	2800      	cmp	r0, #0
 80182d4:	d1ed      	bne.n	80182b2 <__gethex+0x26a>
 80182d6:	9801      	ldr	r0, [sp, #4]
 80182d8:	4621      	mov	r1, r4
 80182da:	f000 fa8f 	bl	80187fc <_Bfree>
 80182de:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80182e0:	2300      	movs	r3, #0
 80182e2:	6013      	str	r3, [r2, #0]
 80182e4:	2550      	movs	r5, #80	@ 0x50
 80182e6:	e72b      	b.n	8018140 <__gethex+0xf8>
 80182e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80182ea:	2b00      	cmp	r3, #0
 80182ec:	d1f3      	bne.n	80182d6 <__gethex+0x28e>
 80182ee:	e7e0      	b.n	80182b2 <__gethex+0x26a>
 80182f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80182f2:	2b00      	cmp	r3, #0
 80182f4:	d1dd      	bne.n	80182b2 <__gethex+0x26a>
 80182f6:	e7ee      	b.n	80182d6 <__gethex+0x28e>
 80182f8:	0802346d 	.word	0x0802346d
 80182fc:	080234bf 	.word	0x080234bf
 8018300:	080234d0 	.word	0x080234d0
 8018304:	1e6f      	subs	r7, r5, #1
 8018306:	f1b9 0f00 	cmp.w	r9, #0
 801830a:	d130      	bne.n	801836e <__gethex+0x326>
 801830c:	b127      	cbz	r7, 8018318 <__gethex+0x2d0>
 801830e:	4639      	mov	r1, r7
 8018310:	4620      	mov	r0, r4
 8018312:	f000 febc 	bl	801908e <__any_on>
 8018316:	4681      	mov	r9, r0
 8018318:	117a      	asrs	r2, r7, #5
 801831a:	2301      	movs	r3, #1
 801831c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8018320:	f007 071f 	and.w	r7, r7, #31
 8018324:	40bb      	lsls	r3, r7
 8018326:	4213      	tst	r3, r2
 8018328:	4629      	mov	r1, r5
 801832a:	4620      	mov	r0, r4
 801832c:	bf18      	it	ne
 801832e:	f049 0902 	orrne.w	r9, r9, #2
 8018332:	f7ff fe21 	bl	8017f78 <rshift>
 8018336:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801833a:	1b76      	subs	r6, r6, r5
 801833c:	2502      	movs	r5, #2
 801833e:	f1b9 0f00 	cmp.w	r9, #0
 8018342:	d047      	beq.n	80183d4 <__gethex+0x38c>
 8018344:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018348:	2b02      	cmp	r3, #2
 801834a:	d015      	beq.n	8018378 <__gethex+0x330>
 801834c:	2b03      	cmp	r3, #3
 801834e:	d017      	beq.n	8018380 <__gethex+0x338>
 8018350:	2b01      	cmp	r3, #1
 8018352:	d109      	bne.n	8018368 <__gethex+0x320>
 8018354:	f019 0f02 	tst.w	r9, #2
 8018358:	d006      	beq.n	8018368 <__gethex+0x320>
 801835a:	f8da 3000 	ldr.w	r3, [sl]
 801835e:	ea49 0903 	orr.w	r9, r9, r3
 8018362:	f019 0f01 	tst.w	r9, #1
 8018366:	d10e      	bne.n	8018386 <__gethex+0x33e>
 8018368:	f045 0510 	orr.w	r5, r5, #16
 801836c:	e032      	b.n	80183d4 <__gethex+0x38c>
 801836e:	f04f 0901 	mov.w	r9, #1
 8018372:	e7d1      	b.n	8018318 <__gethex+0x2d0>
 8018374:	2501      	movs	r5, #1
 8018376:	e7e2      	b.n	801833e <__gethex+0x2f6>
 8018378:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801837a:	f1c3 0301 	rsb	r3, r3, #1
 801837e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8018380:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018382:	2b00      	cmp	r3, #0
 8018384:	d0f0      	beq.n	8018368 <__gethex+0x320>
 8018386:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801838a:	f104 0314 	add.w	r3, r4, #20
 801838e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8018392:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8018396:	f04f 0c00 	mov.w	ip, #0
 801839a:	4618      	mov	r0, r3
 801839c:	f853 2b04 	ldr.w	r2, [r3], #4
 80183a0:	f1b2 3fff 	cmp.w	r2, #4294967295
 80183a4:	d01b      	beq.n	80183de <__gethex+0x396>
 80183a6:	3201      	adds	r2, #1
 80183a8:	6002      	str	r2, [r0, #0]
 80183aa:	2d02      	cmp	r5, #2
 80183ac:	f104 0314 	add.w	r3, r4, #20
 80183b0:	d13c      	bne.n	801842c <__gethex+0x3e4>
 80183b2:	f8d8 2000 	ldr.w	r2, [r8]
 80183b6:	3a01      	subs	r2, #1
 80183b8:	42b2      	cmp	r2, r6
 80183ba:	d109      	bne.n	80183d0 <__gethex+0x388>
 80183bc:	1171      	asrs	r1, r6, #5
 80183be:	2201      	movs	r2, #1
 80183c0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80183c4:	f006 061f 	and.w	r6, r6, #31
 80183c8:	fa02 f606 	lsl.w	r6, r2, r6
 80183cc:	421e      	tst	r6, r3
 80183ce:	d13a      	bne.n	8018446 <__gethex+0x3fe>
 80183d0:	f045 0520 	orr.w	r5, r5, #32
 80183d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80183d6:	601c      	str	r4, [r3, #0]
 80183d8:	9b02      	ldr	r3, [sp, #8]
 80183da:	601f      	str	r7, [r3, #0]
 80183dc:	e6b0      	b.n	8018140 <__gethex+0xf8>
 80183de:	4299      	cmp	r1, r3
 80183e0:	f843 cc04 	str.w	ip, [r3, #-4]
 80183e4:	d8d9      	bhi.n	801839a <__gethex+0x352>
 80183e6:	68a3      	ldr	r3, [r4, #8]
 80183e8:	459b      	cmp	fp, r3
 80183ea:	db17      	blt.n	801841c <__gethex+0x3d4>
 80183ec:	6861      	ldr	r1, [r4, #4]
 80183ee:	9801      	ldr	r0, [sp, #4]
 80183f0:	3101      	adds	r1, #1
 80183f2:	f000 f9c3 	bl	801877c <_Balloc>
 80183f6:	4681      	mov	r9, r0
 80183f8:	b918      	cbnz	r0, 8018402 <__gethex+0x3ba>
 80183fa:	4b1a      	ldr	r3, [pc, #104]	@ (8018464 <__gethex+0x41c>)
 80183fc:	4602      	mov	r2, r0
 80183fe:	2184      	movs	r1, #132	@ 0x84
 8018400:	e6c5      	b.n	801818e <__gethex+0x146>
 8018402:	6922      	ldr	r2, [r4, #16]
 8018404:	3202      	adds	r2, #2
 8018406:	f104 010c 	add.w	r1, r4, #12
 801840a:	0092      	lsls	r2, r2, #2
 801840c:	300c      	adds	r0, #12
 801840e:	f7ff fd34 	bl	8017e7a <memcpy>
 8018412:	4621      	mov	r1, r4
 8018414:	9801      	ldr	r0, [sp, #4]
 8018416:	f000 f9f1 	bl	80187fc <_Bfree>
 801841a:	464c      	mov	r4, r9
 801841c:	6923      	ldr	r3, [r4, #16]
 801841e:	1c5a      	adds	r2, r3, #1
 8018420:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8018424:	6122      	str	r2, [r4, #16]
 8018426:	2201      	movs	r2, #1
 8018428:	615a      	str	r2, [r3, #20]
 801842a:	e7be      	b.n	80183aa <__gethex+0x362>
 801842c:	6922      	ldr	r2, [r4, #16]
 801842e:	455a      	cmp	r2, fp
 8018430:	dd0b      	ble.n	801844a <__gethex+0x402>
 8018432:	2101      	movs	r1, #1
 8018434:	4620      	mov	r0, r4
 8018436:	f7ff fd9f 	bl	8017f78 <rshift>
 801843a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801843e:	3701      	adds	r7, #1
 8018440:	42bb      	cmp	r3, r7
 8018442:	f6ff aee0 	blt.w	8018206 <__gethex+0x1be>
 8018446:	2501      	movs	r5, #1
 8018448:	e7c2      	b.n	80183d0 <__gethex+0x388>
 801844a:	f016 061f 	ands.w	r6, r6, #31
 801844e:	d0fa      	beq.n	8018446 <__gethex+0x3fe>
 8018450:	4453      	add	r3, sl
 8018452:	f1c6 0620 	rsb	r6, r6, #32
 8018456:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801845a:	f000 fa81 	bl	8018960 <__hi0bits>
 801845e:	42b0      	cmp	r0, r6
 8018460:	dbe7      	blt.n	8018432 <__gethex+0x3ea>
 8018462:	e7f0      	b.n	8018446 <__gethex+0x3fe>
 8018464:	080234bf 	.word	0x080234bf

08018468 <L_shift>:
 8018468:	f1c2 0208 	rsb	r2, r2, #8
 801846c:	0092      	lsls	r2, r2, #2
 801846e:	b570      	push	{r4, r5, r6, lr}
 8018470:	f1c2 0620 	rsb	r6, r2, #32
 8018474:	6843      	ldr	r3, [r0, #4]
 8018476:	6804      	ldr	r4, [r0, #0]
 8018478:	fa03 f506 	lsl.w	r5, r3, r6
 801847c:	432c      	orrs	r4, r5
 801847e:	40d3      	lsrs	r3, r2
 8018480:	6004      	str	r4, [r0, #0]
 8018482:	f840 3f04 	str.w	r3, [r0, #4]!
 8018486:	4288      	cmp	r0, r1
 8018488:	d3f4      	bcc.n	8018474 <L_shift+0xc>
 801848a:	bd70      	pop	{r4, r5, r6, pc}

0801848c <__match>:
 801848c:	b530      	push	{r4, r5, lr}
 801848e:	6803      	ldr	r3, [r0, #0]
 8018490:	3301      	adds	r3, #1
 8018492:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018496:	b914      	cbnz	r4, 801849e <__match+0x12>
 8018498:	6003      	str	r3, [r0, #0]
 801849a:	2001      	movs	r0, #1
 801849c:	bd30      	pop	{r4, r5, pc}
 801849e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80184a2:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80184a6:	2d19      	cmp	r5, #25
 80184a8:	bf98      	it	ls
 80184aa:	3220      	addls	r2, #32
 80184ac:	42a2      	cmp	r2, r4
 80184ae:	d0f0      	beq.n	8018492 <__match+0x6>
 80184b0:	2000      	movs	r0, #0
 80184b2:	e7f3      	b.n	801849c <__match+0x10>

080184b4 <__hexnan>:
 80184b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80184b8:	680b      	ldr	r3, [r1, #0]
 80184ba:	6801      	ldr	r1, [r0, #0]
 80184bc:	115e      	asrs	r6, r3, #5
 80184be:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80184c2:	f013 031f 	ands.w	r3, r3, #31
 80184c6:	b087      	sub	sp, #28
 80184c8:	bf18      	it	ne
 80184ca:	3604      	addne	r6, #4
 80184cc:	2500      	movs	r5, #0
 80184ce:	1f37      	subs	r7, r6, #4
 80184d0:	4682      	mov	sl, r0
 80184d2:	4690      	mov	r8, r2
 80184d4:	9301      	str	r3, [sp, #4]
 80184d6:	f846 5c04 	str.w	r5, [r6, #-4]
 80184da:	46b9      	mov	r9, r7
 80184dc:	463c      	mov	r4, r7
 80184de:	9502      	str	r5, [sp, #8]
 80184e0:	46ab      	mov	fp, r5
 80184e2:	784a      	ldrb	r2, [r1, #1]
 80184e4:	1c4b      	adds	r3, r1, #1
 80184e6:	9303      	str	r3, [sp, #12]
 80184e8:	b342      	cbz	r2, 801853c <__hexnan+0x88>
 80184ea:	4610      	mov	r0, r2
 80184ec:	9105      	str	r1, [sp, #20]
 80184ee:	9204      	str	r2, [sp, #16]
 80184f0:	f7ff fd94 	bl	801801c <__hexdig_fun>
 80184f4:	2800      	cmp	r0, #0
 80184f6:	d151      	bne.n	801859c <__hexnan+0xe8>
 80184f8:	9a04      	ldr	r2, [sp, #16]
 80184fa:	9905      	ldr	r1, [sp, #20]
 80184fc:	2a20      	cmp	r2, #32
 80184fe:	d818      	bhi.n	8018532 <__hexnan+0x7e>
 8018500:	9b02      	ldr	r3, [sp, #8]
 8018502:	459b      	cmp	fp, r3
 8018504:	dd13      	ble.n	801852e <__hexnan+0x7a>
 8018506:	454c      	cmp	r4, r9
 8018508:	d206      	bcs.n	8018518 <__hexnan+0x64>
 801850a:	2d07      	cmp	r5, #7
 801850c:	dc04      	bgt.n	8018518 <__hexnan+0x64>
 801850e:	462a      	mov	r2, r5
 8018510:	4649      	mov	r1, r9
 8018512:	4620      	mov	r0, r4
 8018514:	f7ff ffa8 	bl	8018468 <L_shift>
 8018518:	4544      	cmp	r4, r8
 801851a:	d952      	bls.n	80185c2 <__hexnan+0x10e>
 801851c:	2300      	movs	r3, #0
 801851e:	f1a4 0904 	sub.w	r9, r4, #4
 8018522:	f844 3c04 	str.w	r3, [r4, #-4]
 8018526:	f8cd b008 	str.w	fp, [sp, #8]
 801852a:	464c      	mov	r4, r9
 801852c:	461d      	mov	r5, r3
 801852e:	9903      	ldr	r1, [sp, #12]
 8018530:	e7d7      	b.n	80184e2 <__hexnan+0x2e>
 8018532:	2a29      	cmp	r2, #41	@ 0x29
 8018534:	d157      	bne.n	80185e6 <__hexnan+0x132>
 8018536:	3102      	adds	r1, #2
 8018538:	f8ca 1000 	str.w	r1, [sl]
 801853c:	f1bb 0f00 	cmp.w	fp, #0
 8018540:	d051      	beq.n	80185e6 <__hexnan+0x132>
 8018542:	454c      	cmp	r4, r9
 8018544:	d206      	bcs.n	8018554 <__hexnan+0xa0>
 8018546:	2d07      	cmp	r5, #7
 8018548:	dc04      	bgt.n	8018554 <__hexnan+0xa0>
 801854a:	462a      	mov	r2, r5
 801854c:	4649      	mov	r1, r9
 801854e:	4620      	mov	r0, r4
 8018550:	f7ff ff8a 	bl	8018468 <L_shift>
 8018554:	4544      	cmp	r4, r8
 8018556:	d936      	bls.n	80185c6 <__hexnan+0x112>
 8018558:	f1a8 0204 	sub.w	r2, r8, #4
 801855c:	4623      	mov	r3, r4
 801855e:	f853 1b04 	ldr.w	r1, [r3], #4
 8018562:	f842 1f04 	str.w	r1, [r2, #4]!
 8018566:	429f      	cmp	r7, r3
 8018568:	d2f9      	bcs.n	801855e <__hexnan+0xaa>
 801856a:	1b3b      	subs	r3, r7, r4
 801856c:	f023 0303 	bic.w	r3, r3, #3
 8018570:	3304      	adds	r3, #4
 8018572:	3401      	adds	r4, #1
 8018574:	3e03      	subs	r6, #3
 8018576:	42b4      	cmp	r4, r6
 8018578:	bf88      	it	hi
 801857a:	2304      	movhi	r3, #4
 801857c:	4443      	add	r3, r8
 801857e:	2200      	movs	r2, #0
 8018580:	f843 2b04 	str.w	r2, [r3], #4
 8018584:	429f      	cmp	r7, r3
 8018586:	d2fb      	bcs.n	8018580 <__hexnan+0xcc>
 8018588:	683b      	ldr	r3, [r7, #0]
 801858a:	b91b      	cbnz	r3, 8018594 <__hexnan+0xe0>
 801858c:	4547      	cmp	r7, r8
 801858e:	d128      	bne.n	80185e2 <__hexnan+0x12e>
 8018590:	2301      	movs	r3, #1
 8018592:	603b      	str	r3, [r7, #0]
 8018594:	2005      	movs	r0, #5
 8018596:	b007      	add	sp, #28
 8018598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801859c:	3501      	adds	r5, #1
 801859e:	2d08      	cmp	r5, #8
 80185a0:	f10b 0b01 	add.w	fp, fp, #1
 80185a4:	dd06      	ble.n	80185b4 <__hexnan+0x100>
 80185a6:	4544      	cmp	r4, r8
 80185a8:	d9c1      	bls.n	801852e <__hexnan+0x7a>
 80185aa:	2300      	movs	r3, #0
 80185ac:	f844 3c04 	str.w	r3, [r4, #-4]
 80185b0:	2501      	movs	r5, #1
 80185b2:	3c04      	subs	r4, #4
 80185b4:	6822      	ldr	r2, [r4, #0]
 80185b6:	f000 000f 	and.w	r0, r0, #15
 80185ba:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80185be:	6020      	str	r0, [r4, #0]
 80185c0:	e7b5      	b.n	801852e <__hexnan+0x7a>
 80185c2:	2508      	movs	r5, #8
 80185c4:	e7b3      	b.n	801852e <__hexnan+0x7a>
 80185c6:	9b01      	ldr	r3, [sp, #4]
 80185c8:	2b00      	cmp	r3, #0
 80185ca:	d0dd      	beq.n	8018588 <__hexnan+0xd4>
 80185cc:	f1c3 0320 	rsb	r3, r3, #32
 80185d0:	f04f 32ff 	mov.w	r2, #4294967295
 80185d4:	40da      	lsrs	r2, r3
 80185d6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80185da:	4013      	ands	r3, r2
 80185dc:	f846 3c04 	str.w	r3, [r6, #-4]
 80185e0:	e7d2      	b.n	8018588 <__hexnan+0xd4>
 80185e2:	3f04      	subs	r7, #4
 80185e4:	e7d0      	b.n	8018588 <__hexnan+0xd4>
 80185e6:	2004      	movs	r0, #4
 80185e8:	e7d5      	b.n	8018596 <__hexnan+0xe2>
	...

080185ec <malloc>:
 80185ec:	4b02      	ldr	r3, [pc, #8]	@ (80185f8 <malloc+0xc>)
 80185ee:	4601      	mov	r1, r0
 80185f0:	6818      	ldr	r0, [r3, #0]
 80185f2:	f000 b825 	b.w	8018640 <_malloc_r>
 80185f6:	bf00      	nop
 80185f8:	20000a94 	.word	0x20000a94

080185fc <sbrk_aligned>:
 80185fc:	b570      	push	{r4, r5, r6, lr}
 80185fe:	4e0f      	ldr	r6, [pc, #60]	@ (801863c <sbrk_aligned+0x40>)
 8018600:	460c      	mov	r4, r1
 8018602:	6831      	ldr	r1, [r6, #0]
 8018604:	4605      	mov	r5, r0
 8018606:	b911      	cbnz	r1, 801860e <sbrk_aligned+0x12>
 8018608:	f001 fae6 	bl	8019bd8 <_sbrk_r>
 801860c:	6030      	str	r0, [r6, #0]
 801860e:	4621      	mov	r1, r4
 8018610:	4628      	mov	r0, r5
 8018612:	f001 fae1 	bl	8019bd8 <_sbrk_r>
 8018616:	1c43      	adds	r3, r0, #1
 8018618:	d103      	bne.n	8018622 <sbrk_aligned+0x26>
 801861a:	f04f 34ff 	mov.w	r4, #4294967295
 801861e:	4620      	mov	r0, r4
 8018620:	bd70      	pop	{r4, r5, r6, pc}
 8018622:	1cc4      	adds	r4, r0, #3
 8018624:	f024 0403 	bic.w	r4, r4, #3
 8018628:	42a0      	cmp	r0, r4
 801862a:	d0f8      	beq.n	801861e <sbrk_aligned+0x22>
 801862c:	1a21      	subs	r1, r4, r0
 801862e:	4628      	mov	r0, r5
 8018630:	f001 fad2 	bl	8019bd8 <_sbrk_r>
 8018634:	3001      	adds	r0, #1
 8018636:	d1f2      	bne.n	801861e <sbrk_aligned+0x22>
 8018638:	e7ef      	b.n	801861a <sbrk_aligned+0x1e>
 801863a:	bf00      	nop
 801863c:	200154ec 	.word	0x200154ec

08018640 <_malloc_r>:
 8018640:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018644:	1ccd      	adds	r5, r1, #3
 8018646:	f025 0503 	bic.w	r5, r5, #3
 801864a:	3508      	adds	r5, #8
 801864c:	2d0c      	cmp	r5, #12
 801864e:	bf38      	it	cc
 8018650:	250c      	movcc	r5, #12
 8018652:	2d00      	cmp	r5, #0
 8018654:	4606      	mov	r6, r0
 8018656:	db01      	blt.n	801865c <_malloc_r+0x1c>
 8018658:	42a9      	cmp	r1, r5
 801865a:	d904      	bls.n	8018666 <_malloc_r+0x26>
 801865c:	230c      	movs	r3, #12
 801865e:	6033      	str	r3, [r6, #0]
 8018660:	2000      	movs	r0, #0
 8018662:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018666:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801873c <_malloc_r+0xfc>
 801866a:	f000 f87b 	bl	8018764 <__malloc_lock>
 801866e:	f8d8 3000 	ldr.w	r3, [r8]
 8018672:	461c      	mov	r4, r3
 8018674:	bb44      	cbnz	r4, 80186c8 <_malloc_r+0x88>
 8018676:	4629      	mov	r1, r5
 8018678:	4630      	mov	r0, r6
 801867a:	f7ff ffbf 	bl	80185fc <sbrk_aligned>
 801867e:	1c43      	adds	r3, r0, #1
 8018680:	4604      	mov	r4, r0
 8018682:	d158      	bne.n	8018736 <_malloc_r+0xf6>
 8018684:	f8d8 4000 	ldr.w	r4, [r8]
 8018688:	4627      	mov	r7, r4
 801868a:	2f00      	cmp	r7, #0
 801868c:	d143      	bne.n	8018716 <_malloc_r+0xd6>
 801868e:	2c00      	cmp	r4, #0
 8018690:	d04b      	beq.n	801872a <_malloc_r+0xea>
 8018692:	6823      	ldr	r3, [r4, #0]
 8018694:	4639      	mov	r1, r7
 8018696:	4630      	mov	r0, r6
 8018698:	eb04 0903 	add.w	r9, r4, r3
 801869c:	f001 fa9c 	bl	8019bd8 <_sbrk_r>
 80186a0:	4581      	cmp	r9, r0
 80186a2:	d142      	bne.n	801872a <_malloc_r+0xea>
 80186a4:	6821      	ldr	r1, [r4, #0]
 80186a6:	1a6d      	subs	r5, r5, r1
 80186a8:	4629      	mov	r1, r5
 80186aa:	4630      	mov	r0, r6
 80186ac:	f7ff ffa6 	bl	80185fc <sbrk_aligned>
 80186b0:	3001      	adds	r0, #1
 80186b2:	d03a      	beq.n	801872a <_malloc_r+0xea>
 80186b4:	6823      	ldr	r3, [r4, #0]
 80186b6:	442b      	add	r3, r5
 80186b8:	6023      	str	r3, [r4, #0]
 80186ba:	f8d8 3000 	ldr.w	r3, [r8]
 80186be:	685a      	ldr	r2, [r3, #4]
 80186c0:	bb62      	cbnz	r2, 801871c <_malloc_r+0xdc>
 80186c2:	f8c8 7000 	str.w	r7, [r8]
 80186c6:	e00f      	b.n	80186e8 <_malloc_r+0xa8>
 80186c8:	6822      	ldr	r2, [r4, #0]
 80186ca:	1b52      	subs	r2, r2, r5
 80186cc:	d420      	bmi.n	8018710 <_malloc_r+0xd0>
 80186ce:	2a0b      	cmp	r2, #11
 80186d0:	d917      	bls.n	8018702 <_malloc_r+0xc2>
 80186d2:	1961      	adds	r1, r4, r5
 80186d4:	42a3      	cmp	r3, r4
 80186d6:	6025      	str	r5, [r4, #0]
 80186d8:	bf18      	it	ne
 80186da:	6059      	strne	r1, [r3, #4]
 80186dc:	6863      	ldr	r3, [r4, #4]
 80186de:	bf08      	it	eq
 80186e0:	f8c8 1000 	streq.w	r1, [r8]
 80186e4:	5162      	str	r2, [r4, r5]
 80186e6:	604b      	str	r3, [r1, #4]
 80186e8:	4630      	mov	r0, r6
 80186ea:	f000 f841 	bl	8018770 <__malloc_unlock>
 80186ee:	f104 000b 	add.w	r0, r4, #11
 80186f2:	1d23      	adds	r3, r4, #4
 80186f4:	f020 0007 	bic.w	r0, r0, #7
 80186f8:	1ac2      	subs	r2, r0, r3
 80186fa:	bf1c      	itt	ne
 80186fc:	1a1b      	subne	r3, r3, r0
 80186fe:	50a3      	strne	r3, [r4, r2]
 8018700:	e7af      	b.n	8018662 <_malloc_r+0x22>
 8018702:	6862      	ldr	r2, [r4, #4]
 8018704:	42a3      	cmp	r3, r4
 8018706:	bf0c      	ite	eq
 8018708:	f8c8 2000 	streq.w	r2, [r8]
 801870c:	605a      	strne	r2, [r3, #4]
 801870e:	e7eb      	b.n	80186e8 <_malloc_r+0xa8>
 8018710:	4623      	mov	r3, r4
 8018712:	6864      	ldr	r4, [r4, #4]
 8018714:	e7ae      	b.n	8018674 <_malloc_r+0x34>
 8018716:	463c      	mov	r4, r7
 8018718:	687f      	ldr	r7, [r7, #4]
 801871a:	e7b6      	b.n	801868a <_malloc_r+0x4a>
 801871c:	461a      	mov	r2, r3
 801871e:	685b      	ldr	r3, [r3, #4]
 8018720:	42a3      	cmp	r3, r4
 8018722:	d1fb      	bne.n	801871c <_malloc_r+0xdc>
 8018724:	2300      	movs	r3, #0
 8018726:	6053      	str	r3, [r2, #4]
 8018728:	e7de      	b.n	80186e8 <_malloc_r+0xa8>
 801872a:	230c      	movs	r3, #12
 801872c:	6033      	str	r3, [r6, #0]
 801872e:	4630      	mov	r0, r6
 8018730:	f000 f81e 	bl	8018770 <__malloc_unlock>
 8018734:	e794      	b.n	8018660 <_malloc_r+0x20>
 8018736:	6005      	str	r5, [r0, #0]
 8018738:	e7d6      	b.n	80186e8 <_malloc_r+0xa8>
 801873a:	bf00      	nop
 801873c:	200154f0 	.word	0x200154f0

08018740 <__ascii_mbtowc>:
 8018740:	b082      	sub	sp, #8
 8018742:	b901      	cbnz	r1, 8018746 <__ascii_mbtowc+0x6>
 8018744:	a901      	add	r1, sp, #4
 8018746:	b142      	cbz	r2, 801875a <__ascii_mbtowc+0x1a>
 8018748:	b14b      	cbz	r3, 801875e <__ascii_mbtowc+0x1e>
 801874a:	7813      	ldrb	r3, [r2, #0]
 801874c:	600b      	str	r3, [r1, #0]
 801874e:	7812      	ldrb	r2, [r2, #0]
 8018750:	1e10      	subs	r0, r2, #0
 8018752:	bf18      	it	ne
 8018754:	2001      	movne	r0, #1
 8018756:	b002      	add	sp, #8
 8018758:	4770      	bx	lr
 801875a:	4610      	mov	r0, r2
 801875c:	e7fb      	b.n	8018756 <__ascii_mbtowc+0x16>
 801875e:	f06f 0001 	mvn.w	r0, #1
 8018762:	e7f8      	b.n	8018756 <__ascii_mbtowc+0x16>

08018764 <__malloc_lock>:
 8018764:	4801      	ldr	r0, [pc, #4]	@ (801876c <__malloc_lock+0x8>)
 8018766:	f7ff bb7e 	b.w	8017e66 <__retarget_lock_acquire_recursive>
 801876a:	bf00      	nop
 801876c:	200154e8 	.word	0x200154e8

08018770 <__malloc_unlock>:
 8018770:	4801      	ldr	r0, [pc, #4]	@ (8018778 <__malloc_unlock+0x8>)
 8018772:	f7ff bb79 	b.w	8017e68 <__retarget_lock_release_recursive>
 8018776:	bf00      	nop
 8018778:	200154e8 	.word	0x200154e8

0801877c <_Balloc>:
 801877c:	b570      	push	{r4, r5, r6, lr}
 801877e:	69c6      	ldr	r6, [r0, #28]
 8018780:	4604      	mov	r4, r0
 8018782:	460d      	mov	r5, r1
 8018784:	b976      	cbnz	r6, 80187a4 <_Balloc+0x28>
 8018786:	2010      	movs	r0, #16
 8018788:	f7ff ff30 	bl	80185ec <malloc>
 801878c:	4602      	mov	r2, r0
 801878e:	61e0      	str	r0, [r4, #28]
 8018790:	b920      	cbnz	r0, 801879c <_Balloc+0x20>
 8018792:	4b18      	ldr	r3, [pc, #96]	@ (80187f4 <_Balloc+0x78>)
 8018794:	4818      	ldr	r0, [pc, #96]	@ (80187f8 <_Balloc+0x7c>)
 8018796:	216b      	movs	r1, #107	@ 0x6b
 8018798:	f7ff fb86 	bl	8017ea8 <__assert_func>
 801879c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80187a0:	6006      	str	r6, [r0, #0]
 80187a2:	60c6      	str	r6, [r0, #12]
 80187a4:	69e6      	ldr	r6, [r4, #28]
 80187a6:	68f3      	ldr	r3, [r6, #12]
 80187a8:	b183      	cbz	r3, 80187cc <_Balloc+0x50>
 80187aa:	69e3      	ldr	r3, [r4, #28]
 80187ac:	68db      	ldr	r3, [r3, #12]
 80187ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80187b2:	b9b8      	cbnz	r0, 80187e4 <_Balloc+0x68>
 80187b4:	2101      	movs	r1, #1
 80187b6:	fa01 f605 	lsl.w	r6, r1, r5
 80187ba:	1d72      	adds	r2, r6, #5
 80187bc:	0092      	lsls	r2, r2, #2
 80187be:	4620      	mov	r0, r4
 80187c0:	f001 fa21 	bl	8019c06 <_calloc_r>
 80187c4:	b160      	cbz	r0, 80187e0 <_Balloc+0x64>
 80187c6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80187ca:	e00e      	b.n	80187ea <_Balloc+0x6e>
 80187cc:	2221      	movs	r2, #33	@ 0x21
 80187ce:	2104      	movs	r1, #4
 80187d0:	4620      	mov	r0, r4
 80187d2:	f001 fa18 	bl	8019c06 <_calloc_r>
 80187d6:	69e3      	ldr	r3, [r4, #28]
 80187d8:	60f0      	str	r0, [r6, #12]
 80187da:	68db      	ldr	r3, [r3, #12]
 80187dc:	2b00      	cmp	r3, #0
 80187de:	d1e4      	bne.n	80187aa <_Balloc+0x2e>
 80187e0:	2000      	movs	r0, #0
 80187e2:	bd70      	pop	{r4, r5, r6, pc}
 80187e4:	6802      	ldr	r2, [r0, #0]
 80187e6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80187ea:	2300      	movs	r3, #0
 80187ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80187f0:	e7f7      	b.n	80187e2 <_Balloc+0x66>
 80187f2:	bf00      	nop
 80187f4:	080233fe 	.word	0x080233fe
 80187f8:	08023530 	.word	0x08023530

080187fc <_Bfree>:
 80187fc:	b570      	push	{r4, r5, r6, lr}
 80187fe:	69c6      	ldr	r6, [r0, #28]
 8018800:	4605      	mov	r5, r0
 8018802:	460c      	mov	r4, r1
 8018804:	b976      	cbnz	r6, 8018824 <_Bfree+0x28>
 8018806:	2010      	movs	r0, #16
 8018808:	f7ff fef0 	bl	80185ec <malloc>
 801880c:	4602      	mov	r2, r0
 801880e:	61e8      	str	r0, [r5, #28]
 8018810:	b920      	cbnz	r0, 801881c <_Bfree+0x20>
 8018812:	4b09      	ldr	r3, [pc, #36]	@ (8018838 <_Bfree+0x3c>)
 8018814:	4809      	ldr	r0, [pc, #36]	@ (801883c <_Bfree+0x40>)
 8018816:	218f      	movs	r1, #143	@ 0x8f
 8018818:	f7ff fb46 	bl	8017ea8 <__assert_func>
 801881c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018820:	6006      	str	r6, [r0, #0]
 8018822:	60c6      	str	r6, [r0, #12]
 8018824:	b13c      	cbz	r4, 8018836 <_Bfree+0x3a>
 8018826:	69eb      	ldr	r3, [r5, #28]
 8018828:	6862      	ldr	r2, [r4, #4]
 801882a:	68db      	ldr	r3, [r3, #12]
 801882c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018830:	6021      	str	r1, [r4, #0]
 8018832:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8018836:	bd70      	pop	{r4, r5, r6, pc}
 8018838:	080233fe 	.word	0x080233fe
 801883c:	08023530 	.word	0x08023530

08018840 <__multadd>:
 8018840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018844:	690d      	ldr	r5, [r1, #16]
 8018846:	4607      	mov	r7, r0
 8018848:	460c      	mov	r4, r1
 801884a:	461e      	mov	r6, r3
 801884c:	f101 0c14 	add.w	ip, r1, #20
 8018850:	2000      	movs	r0, #0
 8018852:	f8dc 3000 	ldr.w	r3, [ip]
 8018856:	b299      	uxth	r1, r3
 8018858:	fb02 6101 	mla	r1, r2, r1, r6
 801885c:	0c1e      	lsrs	r6, r3, #16
 801885e:	0c0b      	lsrs	r3, r1, #16
 8018860:	fb02 3306 	mla	r3, r2, r6, r3
 8018864:	b289      	uxth	r1, r1
 8018866:	3001      	adds	r0, #1
 8018868:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801886c:	4285      	cmp	r5, r0
 801886e:	f84c 1b04 	str.w	r1, [ip], #4
 8018872:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8018876:	dcec      	bgt.n	8018852 <__multadd+0x12>
 8018878:	b30e      	cbz	r6, 80188be <__multadd+0x7e>
 801887a:	68a3      	ldr	r3, [r4, #8]
 801887c:	42ab      	cmp	r3, r5
 801887e:	dc19      	bgt.n	80188b4 <__multadd+0x74>
 8018880:	6861      	ldr	r1, [r4, #4]
 8018882:	4638      	mov	r0, r7
 8018884:	3101      	adds	r1, #1
 8018886:	f7ff ff79 	bl	801877c <_Balloc>
 801888a:	4680      	mov	r8, r0
 801888c:	b928      	cbnz	r0, 801889a <__multadd+0x5a>
 801888e:	4602      	mov	r2, r0
 8018890:	4b0c      	ldr	r3, [pc, #48]	@ (80188c4 <__multadd+0x84>)
 8018892:	480d      	ldr	r0, [pc, #52]	@ (80188c8 <__multadd+0x88>)
 8018894:	21ba      	movs	r1, #186	@ 0xba
 8018896:	f7ff fb07 	bl	8017ea8 <__assert_func>
 801889a:	6922      	ldr	r2, [r4, #16]
 801889c:	3202      	adds	r2, #2
 801889e:	f104 010c 	add.w	r1, r4, #12
 80188a2:	0092      	lsls	r2, r2, #2
 80188a4:	300c      	adds	r0, #12
 80188a6:	f7ff fae8 	bl	8017e7a <memcpy>
 80188aa:	4621      	mov	r1, r4
 80188ac:	4638      	mov	r0, r7
 80188ae:	f7ff ffa5 	bl	80187fc <_Bfree>
 80188b2:	4644      	mov	r4, r8
 80188b4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80188b8:	3501      	adds	r5, #1
 80188ba:	615e      	str	r6, [r3, #20]
 80188bc:	6125      	str	r5, [r4, #16]
 80188be:	4620      	mov	r0, r4
 80188c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80188c4:	080234bf 	.word	0x080234bf
 80188c8:	08023530 	.word	0x08023530

080188cc <__s2b>:
 80188cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80188d0:	460c      	mov	r4, r1
 80188d2:	4615      	mov	r5, r2
 80188d4:	461f      	mov	r7, r3
 80188d6:	2209      	movs	r2, #9
 80188d8:	3308      	adds	r3, #8
 80188da:	4606      	mov	r6, r0
 80188dc:	fb93 f3f2 	sdiv	r3, r3, r2
 80188e0:	2100      	movs	r1, #0
 80188e2:	2201      	movs	r2, #1
 80188e4:	429a      	cmp	r2, r3
 80188e6:	db09      	blt.n	80188fc <__s2b+0x30>
 80188e8:	4630      	mov	r0, r6
 80188ea:	f7ff ff47 	bl	801877c <_Balloc>
 80188ee:	b940      	cbnz	r0, 8018902 <__s2b+0x36>
 80188f0:	4602      	mov	r2, r0
 80188f2:	4b19      	ldr	r3, [pc, #100]	@ (8018958 <__s2b+0x8c>)
 80188f4:	4819      	ldr	r0, [pc, #100]	@ (801895c <__s2b+0x90>)
 80188f6:	21d3      	movs	r1, #211	@ 0xd3
 80188f8:	f7ff fad6 	bl	8017ea8 <__assert_func>
 80188fc:	0052      	lsls	r2, r2, #1
 80188fe:	3101      	adds	r1, #1
 8018900:	e7f0      	b.n	80188e4 <__s2b+0x18>
 8018902:	9b08      	ldr	r3, [sp, #32]
 8018904:	6143      	str	r3, [r0, #20]
 8018906:	2d09      	cmp	r5, #9
 8018908:	f04f 0301 	mov.w	r3, #1
 801890c:	6103      	str	r3, [r0, #16]
 801890e:	dd16      	ble.n	801893e <__s2b+0x72>
 8018910:	f104 0909 	add.w	r9, r4, #9
 8018914:	46c8      	mov	r8, r9
 8018916:	442c      	add	r4, r5
 8018918:	f818 3b01 	ldrb.w	r3, [r8], #1
 801891c:	4601      	mov	r1, r0
 801891e:	3b30      	subs	r3, #48	@ 0x30
 8018920:	220a      	movs	r2, #10
 8018922:	4630      	mov	r0, r6
 8018924:	f7ff ff8c 	bl	8018840 <__multadd>
 8018928:	45a0      	cmp	r8, r4
 801892a:	d1f5      	bne.n	8018918 <__s2b+0x4c>
 801892c:	f1a5 0408 	sub.w	r4, r5, #8
 8018930:	444c      	add	r4, r9
 8018932:	1b2d      	subs	r5, r5, r4
 8018934:	1963      	adds	r3, r4, r5
 8018936:	42bb      	cmp	r3, r7
 8018938:	db04      	blt.n	8018944 <__s2b+0x78>
 801893a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801893e:	340a      	adds	r4, #10
 8018940:	2509      	movs	r5, #9
 8018942:	e7f6      	b.n	8018932 <__s2b+0x66>
 8018944:	f814 3b01 	ldrb.w	r3, [r4], #1
 8018948:	4601      	mov	r1, r0
 801894a:	3b30      	subs	r3, #48	@ 0x30
 801894c:	220a      	movs	r2, #10
 801894e:	4630      	mov	r0, r6
 8018950:	f7ff ff76 	bl	8018840 <__multadd>
 8018954:	e7ee      	b.n	8018934 <__s2b+0x68>
 8018956:	bf00      	nop
 8018958:	080234bf 	.word	0x080234bf
 801895c:	08023530 	.word	0x08023530

08018960 <__hi0bits>:
 8018960:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8018964:	4603      	mov	r3, r0
 8018966:	bf36      	itet	cc
 8018968:	0403      	lslcc	r3, r0, #16
 801896a:	2000      	movcs	r0, #0
 801896c:	2010      	movcc	r0, #16
 801896e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8018972:	bf3c      	itt	cc
 8018974:	021b      	lslcc	r3, r3, #8
 8018976:	3008      	addcc	r0, #8
 8018978:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801897c:	bf3c      	itt	cc
 801897e:	011b      	lslcc	r3, r3, #4
 8018980:	3004      	addcc	r0, #4
 8018982:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8018986:	bf3c      	itt	cc
 8018988:	009b      	lslcc	r3, r3, #2
 801898a:	3002      	addcc	r0, #2
 801898c:	2b00      	cmp	r3, #0
 801898e:	db05      	blt.n	801899c <__hi0bits+0x3c>
 8018990:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8018994:	f100 0001 	add.w	r0, r0, #1
 8018998:	bf08      	it	eq
 801899a:	2020      	moveq	r0, #32
 801899c:	4770      	bx	lr

0801899e <__lo0bits>:
 801899e:	6803      	ldr	r3, [r0, #0]
 80189a0:	4602      	mov	r2, r0
 80189a2:	f013 0007 	ands.w	r0, r3, #7
 80189a6:	d00b      	beq.n	80189c0 <__lo0bits+0x22>
 80189a8:	07d9      	lsls	r1, r3, #31
 80189aa:	d421      	bmi.n	80189f0 <__lo0bits+0x52>
 80189ac:	0798      	lsls	r0, r3, #30
 80189ae:	bf49      	itett	mi
 80189b0:	085b      	lsrmi	r3, r3, #1
 80189b2:	089b      	lsrpl	r3, r3, #2
 80189b4:	2001      	movmi	r0, #1
 80189b6:	6013      	strmi	r3, [r2, #0]
 80189b8:	bf5c      	itt	pl
 80189ba:	6013      	strpl	r3, [r2, #0]
 80189bc:	2002      	movpl	r0, #2
 80189be:	4770      	bx	lr
 80189c0:	b299      	uxth	r1, r3
 80189c2:	b909      	cbnz	r1, 80189c8 <__lo0bits+0x2a>
 80189c4:	0c1b      	lsrs	r3, r3, #16
 80189c6:	2010      	movs	r0, #16
 80189c8:	b2d9      	uxtb	r1, r3
 80189ca:	b909      	cbnz	r1, 80189d0 <__lo0bits+0x32>
 80189cc:	3008      	adds	r0, #8
 80189ce:	0a1b      	lsrs	r3, r3, #8
 80189d0:	0719      	lsls	r1, r3, #28
 80189d2:	bf04      	itt	eq
 80189d4:	091b      	lsreq	r3, r3, #4
 80189d6:	3004      	addeq	r0, #4
 80189d8:	0799      	lsls	r1, r3, #30
 80189da:	bf04      	itt	eq
 80189dc:	089b      	lsreq	r3, r3, #2
 80189de:	3002      	addeq	r0, #2
 80189e0:	07d9      	lsls	r1, r3, #31
 80189e2:	d403      	bmi.n	80189ec <__lo0bits+0x4e>
 80189e4:	085b      	lsrs	r3, r3, #1
 80189e6:	f100 0001 	add.w	r0, r0, #1
 80189ea:	d003      	beq.n	80189f4 <__lo0bits+0x56>
 80189ec:	6013      	str	r3, [r2, #0]
 80189ee:	4770      	bx	lr
 80189f0:	2000      	movs	r0, #0
 80189f2:	4770      	bx	lr
 80189f4:	2020      	movs	r0, #32
 80189f6:	4770      	bx	lr

080189f8 <__i2b>:
 80189f8:	b510      	push	{r4, lr}
 80189fa:	460c      	mov	r4, r1
 80189fc:	2101      	movs	r1, #1
 80189fe:	f7ff febd 	bl	801877c <_Balloc>
 8018a02:	4602      	mov	r2, r0
 8018a04:	b928      	cbnz	r0, 8018a12 <__i2b+0x1a>
 8018a06:	4b05      	ldr	r3, [pc, #20]	@ (8018a1c <__i2b+0x24>)
 8018a08:	4805      	ldr	r0, [pc, #20]	@ (8018a20 <__i2b+0x28>)
 8018a0a:	f240 1145 	movw	r1, #325	@ 0x145
 8018a0e:	f7ff fa4b 	bl	8017ea8 <__assert_func>
 8018a12:	2301      	movs	r3, #1
 8018a14:	6144      	str	r4, [r0, #20]
 8018a16:	6103      	str	r3, [r0, #16]
 8018a18:	bd10      	pop	{r4, pc}
 8018a1a:	bf00      	nop
 8018a1c:	080234bf 	.word	0x080234bf
 8018a20:	08023530 	.word	0x08023530

08018a24 <__multiply>:
 8018a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a28:	4617      	mov	r7, r2
 8018a2a:	690a      	ldr	r2, [r1, #16]
 8018a2c:	693b      	ldr	r3, [r7, #16]
 8018a2e:	429a      	cmp	r2, r3
 8018a30:	bfa8      	it	ge
 8018a32:	463b      	movge	r3, r7
 8018a34:	4689      	mov	r9, r1
 8018a36:	bfa4      	itt	ge
 8018a38:	460f      	movge	r7, r1
 8018a3a:	4699      	movge	r9, r3
 8018a3c:	693d      	ldr	r5, [r7, #16]
 8018a3e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8018a42:	68bb      	ldr	r3, [r7, #8]
 8018a44:	6879      	ldr	r1, [r7, #4]
 8018a46:	eb05 060a 	add.w	r6, r5, sl
 8018a4a:	42b3      	cmp	r3, r6
 8018a4c:	b085      	sub	sp, #20
 8018a4e:	bfb8      	it	lt
 8018a50:	3101      	addlt	r1, #1
 8018a52:	f7ff fe93 	bl	801877c <_Balloc>
 8018a56:	b930      	cbnz	r0, 8018a66 <__multiply+0x42>
 8018a58:	4602      	mov	r2, r0
 8018a5a:	4b41      	ldr	r3, [pc, #260]	@ (8018b60 <__multiply+0x13c>)
 8018a5c:	4841      	ldr	r0, [pc, #260]	@ (8018b64 <__multiply+0x140>)
 8018a5e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8018a62:	f7ff fa21 	bl	8017ea8 <__assert_func>
 8018a66:	f100 0414 	add.w	r4, r0, #20
 8018a6a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8018a6e:	4623      	mov	r3, r4
 8018a70:	2200      	movs	r2, #0
 8018a72:	4573      	cmp	r3, lr
 8018a74:	d320      	bcc.n	8018ab8 <__multiply+0x94>
 8018a76:	f107 0814 	add.w	r8, r7, #20
 8018a7a:	f109 0114 	add.w	r1, r9, #20
 8018a7e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8018a82:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8018a86:	9302      	str	r3, [sp, #8]
 8018a88:	1beb      	subs	r3, r5, r7
 8018a8a:	3b15      	subs	r3, #21
 8018a8c:	f023 0303 	bic.w	r3, r3, #3
 8018a90:	3304      	adds	r3, #4
 8018a92:	3715      	adds	r7, #21
 8018a94:	42bd      	cmp	r5, r7
 8018a96:	bf38      	it	cc
 8018a98:	2304      	movcc	r3, #4
 8018a9a:	9301      	str	r3, [sp, #4]
 8018a9c:	9b02      	ldr	r3, [sp, #8]
 8018a9e:	9103      	str	r1, [sp, #12]
 8018aa0:	428b      	cmp	r3, r1
 8018aa2:	d80c      	bhi.n	8018abe <__multiply+0x9a>
 8018aa4:	2e00      	cmp	r6, #0
 8018aa6:	dd03      	ble.n	8018ab0 <__multiply+0x8c>
 8018aa8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8018aac:	2b00      	cmp	r3, #0
 8018aae:	d055      	beq.n	8018b5c <__multiply+0x138>
 8018ab0:	6106      	str	r6, [r0, #16]
 8018ab2:	b005      	add	sp, #20
 8018ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018ab8:	f843 2b04 	str.w	r2, [r3], #4
 8018abc:	e7d9      	b.n	8018a72 <__multiply+0x4e>
 8018abe:	f8b1 a000 	ldrh.w	sl, [r1]
 8018ac2:	f1ba 0f00 	cmp.w	sl, #0
 8018ac6:	d01f      	beq.n	8018b08 <__multiply+0xe4>
 8018ac8:	46c4      	mov	ip, r8
 8018aca:	46a1      	mov	r9, r4
 8018acc:	2700      	movs	r7, #0
 8018ace:	f85c 2b04 	ldr.w	r2, [ip], #4
 8018ad2:	f8d9 3000 	ldr.w	r3, [r9]
 8018ad6:	fa1f fb82 	uxth.w	fp, r2
 8018ada:	b29b      	uxth	r3, r3
 8018adc:	fb0a 330b 	mla	r3, sl, fp, r3
 8018ae0:	443b      	add	r3, r7
 8018ae2:	f8d9 7000 	ldr.w	r7, [r9]
 8018ae6:	0c12      	lsrs	r2, r2, #16
 8018ae8:	0c3f      	lsrs	r7, r7, #16
 8018aea:	fb0a 7202 	mla	r2, sl, r2, r7
 8018aee:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8018af2:	b29b      	uxth	r3, r3
 8018af4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018af8:	4565      	cmp	r5, ip
 8018afa:	f849 3b04 	str.w	r3, [r9], #4
 8018afe:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8018b02:	d8e4      	bhi.n	8018ace <__multiply+0xaa>
 8018b04:	9b01      	ldr	r3, [sp, #4]
 8018b06:	50e7      	str	r7, [r4, r3]
 8018b08:	9b03      	ldr	r3, [sp, #12]
 8018b0a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8018b0e:	3104      	adds	r1, #4
 8018b10:	f1b9 0f00 	cmp.w	r9, #0
 8018b14:	d020      	beq.n	8018b58 <__multiply+0x134>
 8018b16:	6823      	ldr	r3, [r4, #0]
 8018b18:	4647      	mov	r7, r8
 8018b1a:	46a4      	mov	ip, r4
 8018b1c:	f04f 0a00 	mov.w	sl, #0
 8018b20:	f8b7 b000 	ldrh.w	fp, [r7]
 8018b24:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8018b28:	fb09 220b 	mla	r2, r9, fp, r2
 8018b2c:	4452      	add	r2, sl
 8018b2e:	b29b      	uxth	r3, r3
 8018b30:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018b34:	f84c 3b04 	str.w	r3, [ip], #4
 8018b38:	f857 3b04 	ldr.w	r3, [r7], #4
 8018b3c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8018b40:	f8bc 3000 	ldrh.w	r3, [ip]
 8018b44:	fb09 330a 	mla	r3, r9, sl, r3
 8018b48:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8018b4c:	42bd      	cmp	r5, r7
 8018b4e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8018b52:	d8e5      	bhi.n	8018b20 <__multiply+0xfc>
 8018b54:	9a01      	ldr	r2, [sp, #4]
 8018b56:	50a3      	str	r3, [r4, r2]
 8018b58:	3404      	adds	r4, #4
 8018b5a:	e79f      	b.n	8018a9c <__multiply+0x78>
 8018b5c:	3e01      	subs	r6, #1
 8018b5e:	e7a1      	b.n	8018aa4 <__multiply+0x80>
 8018b60:	080234bf 	.word	0x080234bf
 8018b64:	08023530 	.word	0x08023530

08018b68 <__pow5mult>:
 8018b68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018b6c:	4615      	mov	r5, r2
 8018b6e:	f012 0203 	ands.w	r2, r2, #3
 8018b72:	4607      	mov	r7, r0
 8018b74:	460e      	mov	r6, r1
 8018b76:	d007      	beq.n	8018b88 <__pow5mult+0x20>
 8018b78:	4c25      	ldr	r4, [pc, #148]	@ (8018c10 <__pow5mult+0xa8>)
 8018b7a:	3a01      	subs	r2, #1
 8018b7c:	2300      	movs	r3, #0
 8018b7e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8018b82:	f7ff fe5d 	bl	8018840 <__multadd>
 8018b86:	4606      	mov	r6, r0
 8018b88:	10ad      	asrs	r5, r5, #2
 8018b8a:	d03d      	beq.n	8018c08 <__pow5mult+0xa0>
 8018b8c:	69fc      	ldr	r4, [r7, #28]
 8018b8e:	b97c      	cbnz	r4, 8018bb0 <__pow5mult+0x48>
 8018b90:	2010      	movs	r0, #16
 8018b92:	f7ff fd2b 	bl	80185ec <malloc>
 8018b96:	4602      	mov	r2, r0
 8018b98:	61f8      	str	r0, [r7, #28]
 8018b9a:	b928      	cbnz	r0, 8018ba8 <__pow5mult+0x40>
 8018b9c:	4b1d      	ldr	r3, [pc, #116]	@ (8018c14 <__pow5mult+0xac>)
 8018b9e:	481e      	ldr	r0, [pc, #120]	@ (8018c18 <__pow5mult+0xb0>)
 8018ba0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8018ba4:	f7ff f980 	bl	8017ea8 <__assert_func>
 8018ba8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018bac:	6004      	str	r4, [r0, #0]
 8018bae:	60c4      	str	r4, [r0, #12]
 8018bb0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8018bb4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8018bb8:	b94c      	cbnz	r4, 8018bce <__pow5mult+0x66>
 8018bba:	f240 2171 	movw	r1, #625	@ 0x271
 8018bbe:	4638      	mov	r0, r7
 8018bc0:	f7ff ff1a 	bl	80189f8 <__i2b>
 8018bc4:	2300      	movs	r3, #0
 8018bc6:	f8c8 0008 	str.w	r0, [r8, #8]
 8018bca:	4604      	mov	r4, r0
 8018bcc:	6003      	str	r3, [r0, #0]
 8018bce:	f04f 0900 	mov.w	r9, #0
 8018bd2:	07eb      	lsls	r3, r5, #31
 8018bd4:	d50a      	bpl.n	8018bec <__pow5mult+0x84>
 8018bd6:	4631      	mov	r1, r6
 8018bd8:	4622      	mov	r2, r4
 8018bda:	4638      	mov	r0, r7
 8018bdc:	f7ff ff22 	bl	8018a24 <__multiply>
 8018be0:	4631      	mov	r1, r6
 8018be2:	4680      	mov	r8, r0
 8018be4:	4638      	mov	r0, r7
 8018be6:	f7ff fe09 	bl	80187fc <_Bfree>
 8018bea:	4646      	mov	r6, r8
 8018bec:	106d      	asrs	r5, r5, #1
 8018bee:	d00b      	beq.n	8018c08 <__pow5mult+0xa0>
 8018bf0:	6820      	ldr	r0, [r4, #0]
 8018bf2:	b938      	cbnz	r0, 8018c04 <__pow5mult+0x9c>
 8018bf4:	4622      	mov	r2, r4
 8018bf6:	4621      	mov	r1, r4
 8018bf8:	4638      	mov	r0, r7
 8018bfa:	f7ff ff13 	bl	8018a24 <__multiply>
 8018bfe:	6020      	str	r0, [r4, #0]
 8018c00:	f8c0 9000 	str.w	r9, [r0]
 8018c04:	4604      	mov	r4, r0
 8018c06:	e7e4      	b.n	8018bd2 <__pow5mult+0x6a>
 8018c08:	4630      	mov	r0, r6
 8018c0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018c0e:	bf00      	nop
 8018c10:	08023714 	.word	0x08023714
 8018c14:	080233fe 	.word	0x080233fe
 8018c18:	08023530 	.word	0x08023530

08018c1c <__lshift>:
 8018c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018c20:	460c      	mov	r4, r1
 8018c22:	6849      	ldr	r1, [r1, #4]
 8018c24:	6923      	ldr	r3, [r4, #16]
 8018c26:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8018c2a:	68a3      	ldr	r3, [r4, #8]
 8018c2c:	4607      	mov	r7, r0
 8018c2e:	4691      	mov	r9, r2
 8018c30:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8018c34:	f108 0601 	add.w	r6, r8, #1
 8018c38:	42b3      	cmp	r3, r6
 8018c3a:	db0b      	blt.n	8018c54 <__lshift+0x38>
 8018c3c:	4638      	mov	r0, r7
 8018c3e:	f7ff fd9d 	bl	801877c <_Balloc>
 8018c42:	4605      	mov	r5, r0
 8018c44:	b948      	cbnz	r0, 8018c5a <__lshift+0x3e>
 8018c46:	4602      	mov	r2, r0
 8018c48:	4b28      	ldr	r3, [pc, #160]	@ (8018cec <__lshift+0xd0>)
 8018c4a:	4829      	ldr	r0, [pc, #164]	@ (8018cf0 <__lshift+0xd4>)
 8018c4c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8018c50:	f7ff f92a 	bl	8017ea8 <__assert_func>
 8018c54:	3101      	adds	r1, #1
 8018c56:	005b      	lsls	r3, r3, #1
 8018c58:	e7ee      	b.n	8018c38 <__lshift+0x1c>
 8018c5a:	2300      	movs	r3, #0
 8018c5c:	f100 0114 	add.w	r1, r0, #20
 8018c60:	f100 0210 	add.w	r2, r0, #16
 8018c64:	4618      	mov	r0, r3
 8018c66:	4553      	cmp	r3, sl
 8018c68:	db33      	blt.n	8018cd2 <__lshift+0xb6>
 8018c6a:	6920      	ldr	r0, [r4, #16]
 8018c6c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8018c70:	f104 0314 	add.w	r3, r4, #20
 8018c74:	f019 091f 	ands.w	r9, r9, #31
 8018c78:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8018c7c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8018c80:	d02b      	beq.n	8018cda <__lshift+0xbe>
 8018c82:	f1c9 0e20 	rsb	lr, r9, #32
 8018c86:	468a      	mov	sl, r1
 8018c88:	2200      	movs	r2, #0
 8018c8a:	6818      	ldr	r0, [r3, #0]
 8018c8c:	fa00 f009 	lsl.w	r0, r0, r9
 8018c90:	4310      	orrs	r0, r2
 8018c92:	f84a 0b04 	str.w	r0, [sl], #4
 8018c96:	f853 2b04 	ldr.w	r2, [r3], #4
 8018c9a:	459c      	cmp	ip, r3
 8018c9c:	fa22 f20e 	lsr.w	r2, r2, lr
 8018ca0:	d8f3      	bhi.n	8018c8a <__lshift+0x6e>
 8018ca2:	ebac 0304 	sub.w	r3, ip, r4
 8018ca6:	3b15      	subs	r3, #21
 8018ca8:	f023 0303 	bic.w	r3, r3, #3
 8018cac:	3304      	adds	r3, #4
 8018cae:	f104 0015 	add.w	r0, r4, #21
 8018cb2:	4560      	cmp	r0, ip
 8018cb4:	bf88      	it	hi
 8018cb6:	2304      	movhi	r3, #4
 8018cb8:	50ca      	str	r2, [r1, r3]
 8018cba:	b10a      	cbz	r2, 8018cc0 <__lshift+0xa4>
 8018cbc:	f108 0602 	add.w	r6, r8, #2
 8018cc0:	3e01      	subs	r6, #1
 8018cc2:	4638      	mov	r0, r7
 8018cc4:	612e      	str	r6, [r5, #16]
 8018cc6:	4621      	mov	r1, r4
 8018cc8:	f7ff fd98 	bl	80187fc <_Bfree>
 8018ccc:	4628      	mov	r0, r5
 8018cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018cd2:	f842 0f04 	str.w	r0, [r2, #4]!
 8018cd6:	3301      	adds	r3, #1
 8018cd8:	e7c5      	b.n	8018c66 <__lshift+0x4a>
 8018cda:	3904      	subs	r1, #4
 8018cdc:	f853 2b04 	ldr.w	r2, [r3], #4
 8018ce0:	f841 2f04 	str.w	r2, [r1, #4]!
 8018ce4:	459c      	cmp	ip, r3
 8018ce6:	d8f9      	bhi.n	8018cdc <__lshift+0xc0>
 8018ce8:	e7ea      	b.n	8018cc0 <__lshift+0xa4>
 8018cea:	bf00      	nop
 8018cec:	080234bf 	.word	0x080234bf
 8018cf0:	08023530 	.word	0x08023530

08018cf4 <__mcmp>:
 8018cf4:	690a      	ldr	r2, [r1, #16]
 8018cf6:	4603      	mov	r3, r0
 8018cf8:	6900      	ldr	r0, [r0, #16]
 8018cfa:	1a80      	subs	r0, r0, r2
 8018cfc:	b530      	push	{r4, r5, lr}
 8018cfe:	d10e      	bne.n	8018d1e <__mcmp+0x2a>
 8018d00:	3314      	adds	r3, #20
 8018d02:	3114      	adds	r1, #20
 8018d04:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8018d08:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8018d0c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8018d10:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8018d14:	4295      	cmp	r5, r2
 8018d16:	d003      	beq.n	8018d20 <__mcmp+0x2c>
 8018d18:	d205      	bcs.n	8018d26 <__mcmp+0x32>
 8018d1a:	f04f 30ff 	mov.w	r0, #4294967295
 8018d1e:	bd30      	pop	{r4, r5, pc}
 8018d20:	42a3      	cmp	r3, r4
 8018d22:	d3f3      	bcc.n	8018d0c <__mcmp+0x18>
 8018d24:	e7fb      	b.n	8018d1e <__mcmp+0x2a>
 8018d26:	2001      	movs	r0, #1
 8018d28:	e7f9      	b.n	8018d1e <__mcmp+0x2a>
	...

08018d2c <__mdiff>:
 8018d2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d30:	4689      	mov	r9, r1
 8018d32:	4606      	mov	r6, r0
 8018d34:	4611      	mov	r1, r2
 8018d36:	4648      	mov	r0, r9
 8018d38:	4614      	mov	r4, r2
 8018d3a:	f7ff ffdb 	bl	8018cf4 <__mcmp>
 8018d3e:	1e05      	subs	r5, r0, #0
 8018d40:	d112      	bne.n	8018d68 <__mdiff+0x3c>
 8018d42:	4629      	mov	r1, r5
 8018d44:	4630      	mov	r0, r6
 8018d46:	f7ff fd19 	bl	801877c <_Balloc>
 8018d4a:	4602      	mov	r2, r0
 8018d4c:	b928      	cbnz	r0, 8018d5a <__mdiff+0x2e>
 8018d4e:	4b3f      	ldr	r3, [pc, #252]	@ (8018e4c <__mdiff+0x120>)
 8018d50:	f240 2137 	movw	r1, #567	@ 0x237
 8018d54:	483e      	ldr	r0, [pc, #248]	@ (8018e50 <__mdiff+0x124>)
 8018d56:	f7ff f8a7 	bl	8017ea8 <__assert_func>
 8018d5a:	2301      	movs	r3, #1
 8018d5c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8018d60:	4610      	mov	r0, r2
 8018d62:	b003      	add	sp, #12
 8018d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018d68:	bfbc      	itt	lt
 8018d6a:	464b      	movlt	r3, r9
 8018d6c:	46a1      	movlt	r9, r4
 8018d6e:	4630      	mov	r0, r6
 8018d70:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8018d74:	bfba      	itte	lt
 8018d76:	461c      	movlt	r4, r3
 8018d78:	2501      	movlt	r5, #1
 8018d7a:	2500      	movge	r5, #0
 8018d7c:	f7ff fcfe 	bl	801877c <_Balloc>
 8018d80:	4602      	mov	r2, r0
 8018d82:	b918      	cbnz	r0, 8018d8c <__mdiff+0x60>
 8018d84:	4b31      	ldr	r3, [pc, #196]	@ (8018e4c <__mdiff+0x120>)
 8018d86:	f240 2145 	movw	r1, #581	@ 0x245
 8018d8a:	e7e3      	b.n	8018d54 <__mdiff+0x28>
 8018d8c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8018d90:	6926      	ldr	r6, [r4, #16]
 8018d92:	60c5      	str	r5, [r0, #12]
 8018d94:	f109 0310 	add.w	r3, r9, #16
 8018d98:	f109 0514 	add.w	r5, r9, #20
 8018d9c:	f104 0e14 	add.w	lr, r4, #20
 8018da0:	f100 0b14 	add.w	fp, r0, #20
 8018da4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8018da8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8018dac:	9301      	str	r3, [sp, #4]
 8018dae:	46d9      	mov	r9, fp
 8018db0:	f04f 0c00 	mov.w	ip, #0
 8018db4:	9b01      	ldr	r3, [sp, #4]
 8018db6:	f85e 0b04 	ldr.w	r0, [lr], #4
 8018dba:	f853 af04 	ldr.w	sl, [r3, #4]!
 8018dbe:	9301      	str	r3, [sp, #4]
 8018dc0:	fa1f f38a 	uxth.w	r3, sl
 8018dc4:	4619      	mov	r1, r3
 8018dc6:	b283      	uxth	r3, r0
 8018dc8:	1acb      	subs	r3, r1, r3
 8018dca:	0c00      	lsrs	r0, r0, #16
 8018dcc:	4463      	add	r3, ip
 8018dce:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8018dd2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8018dd6:	b29b      	uxth	r3, r3
 8018dd8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8018ddc:	4576      	cmp	r6, lr
 8018dde:	f849 3b04 	str.w	r3, [r9], #4
 8018de2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8018de6:	d8e5      	bhi.n	8018db4 <__mdiff+0x88>
 8018de8:	1b33      	subs	r3, r6, r4
 8018dea:	3b15      	subs	r3, #21
 8018dec:	f023 0303 	bic.w	r3, r3, #3
 8018df0:	3415      	adds	r4, #21
 8018df2:	3304      	adds	r3, #4
 8018df4:	42a6      	cmp	r6, r4
 8018df6:	bf38      	it	cc
 8018df8:	2304      	movcc	r3, #4
 8018dfa:	441d      	add	r5, r3
 8018dfc:	445b      	add	r3, fp
 8018dfe:	461e      	mov	r6, r3
 8018e00:	462c      	mov	r4, r5
 8018e02:	4544      	cmp	r4, r8
 8018e04:	d30e      	bcc.n	8018e24 <__mdiff+0xf8>
 8018e06:	f108 0103 	add.w	r1, r8, #3
 8018e0a:	1b49      	subs	r1, r1, r5
 8018e0c:	f021 0103 	bic.w	r1, r1, #3
 8018e10:	3d03      	subs	r5, #3
 8018e12:	45a8      	cmp	r8, r5
 8018e14:	bf38      	it	cc
 8018e16:	2100      	movcc	r1, #0
 8018e18:	440b      	add	r3, r1
 8018e1a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8018e1e:	b191      	cbz	r1, 8018e46 <__mdiff+0x11a>
 8018e20:	6117      	str	r7, [r2, #16]
 8018e22:	e79d      	b.n	8018d60 <__mdiff+0x34>
 8018e24:	f854 1b04 	ldr.w	r1, [r4], #4
 8018e28:	46e6      	mov	lr, ip
 8018e2a:	0c08      	lsrs	r0, r1, #16
 8018e2c:	fa1c fc81 	uxtah	ip, ip, r1
 8018e30:	4471      	add	r1, lr
 8018e32:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8018e36:	b289      	uxth	r1, r1
 8018e38:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8018e3c:	f846 1b04 	str.w	r1, [r6], #4
 8018e40:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8018e44:	e7dd      	b.n	8018e02 <__mdiff+0xd6>
 8018e46:	3f01      	subs	r7, #1
 8018e48:	e7e7      	b.n	8018e1a <__mdiff+0xee>
 8018e4a:	bf00      	nop
 8018e4c:	080234bf 	.word	0x080234bf
 8018e50:	08023530 	.word	0x08023530

08018e54 <__ulp>:
 8018e54:	b082      	sub	sp, #8
 8018e56:	ed8d 0b00 	vstr	d0, [sp]
 8018e5a:	9a01      	ldr	r2, [sp, #4]
 8018e5c:	4b0f      	ldr	r3, [pc, #60]	@ (8018e9c <__ulp+0x48>)
 8018e5e:	4013      	ands	r3, r2
 8018e60:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8018e64:	2b00      	cmp	r3, #0
 8018e66:	dc08      	bgt.n	8018e7a <__ulp+0x26>
 8018e68:	425b      	negs	r3, r3
 8018e6a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8018e6e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8018e72:	da04      	bge.n	8018e7e <__ulp+0x2a>
 8018e74:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8018e78:	4113      	asrs	r3, r2
 8018e7a:	2200      	movs	r2, #0
 8018e7c:	e008      	b.n	8018e90 <__ulp+0x3c>
 8018e7e:	f1a2 0314 	sub.w	r3, r2, #20
 8018e82:	2b1e      	cmp	r3, #30
 8018e84:	bfda      	itte	le
 8018e86:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8018e8a:	40da      	lsrle	r2, r3
 8018e8c:	2201      	movgt	r2, #1
 8018e8e:	2300      	movs	r3, #0
 8018e90:	4619      	mov	r1, r3
 8018e92:	4610      	mov	r0, r2
 8018e94:	ec41 0b10 	vmov	d0, r0, r1
 8018e98:	b002      	add	sp, #8
 8018e9a:	4770      	bx	lr
 8018e9c:	7ff00000 	.word	0x7ff00000

08018ea0 <__b2d>:
 8018ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018ea4:	6906      	ldr	r6, [r0, #16]
 8018ea6:	f100 0814 	add.w	r8, r0, #20
 8018eaa:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8018eae:	1f37      	subs	r7, r6, #4
 8018eb0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8018eb4:	4610      	mov	r0, r2
 8018eb6:	f7ff fd53 	bl	8018960 <__hi0bits>
 8018eba:	f1c0 0320 	rsb	r3, r0, #32
 8018ebe:	280a      	cmp	r0, #10
 8018ec0:	600b      	str	r3, [r1, #0]
 8018ec2:	491b      	ldr	r1, [pc, #108]	@ (8018f30 <__b2d+0x90>)
 8018ec4:	dc15      	bgt.n	8018ef2 <__b2d+0x52>
 8018ec6:	f1c0 0c0b 	rsb	ip, r0, #11
 8018eca:	fa22 f30c 	lsr.w	r3, r2, ip
 8018ece:	45b8      	cmp	r8, r7
 8018ed0:	ea43 0501 	orr.w	r5, r3, r1
 8018ed4:	bf34      	ite	cc
 8018ed6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8018eda:	2300      	movcs	r3, #0
 8018edc:	3015      	adds	r0, #21
 8018ede:	fa02 f000 	lsl.w	r0, r2, r0
 8018ee2:	fa23 f30c 	lsr.w	r3, r3, ip
 8018ee6:	4303      	orrs	r3, r0
 8018ee8:	461c      	mov	r4, r3
 8018eea:	ec45 4b10 	vmov	d0, r4, r5
 8018eee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018ef2:	45b8      	cmp	r8, r7
 8018ef4:	bf3a      	itte	cc
 8018ef6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8018efa:	f1a6 0708 	subcc.w	r7, r6, #8
 8018efe:	2300      	movcs	r3, #0
 8018f00:	380b      	subs	r0, #11
 8018f02:	d012      	beq.n	8018f2a <__b2d+0x8a>
 8018f04:	f1c0 0120 	rsb	r1, r0, #32
 8018f08:	fa23 f401 	lsr.w	r4, r3, r1
 8018f0c:	4082      	lsls	r2, r0
 8018f0e:	4322      	orrs	r2, r4
 8018f10:	4547      	cmp	r7, r8
 8018f12:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8018f16:	bf8c      	ite	hi
 8018f18:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8018f1c:	2200      	movls	r2, #0
 8018f1e:	4083      	lsls	r3, r0
 8018f20:	40ca      	lsrs	r2, r1
 8018f22:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8018f26:	4313      	orrs	r3, r2
 8018f28:	e7de      	b.n	8018ee8 <__b2d+0x48>
 8018f2a:	ea42 0501 	orr.w	r5, r2, r1
 8018f2e:	e7db      	b.n	8018ee8 <__b2d+0x48>
 8018f30:	3ff00000 	.word	0x3ff00000

08018f34 <__d2b>:
 8018f34:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8018f38:	460f      	mov	r7, r1
 8018f3a:	2101      	movs	r1, #1
 8018f3c:	ec59 8b10 	vmov	r8, r9, d0
 8018f40:	4616      	mov	r6, r2
 8018f42:	f7ff fc1b 	bl	801877c <_Balloc>
 8018f46:	4604      	mov	r4, r0
 8018f48:	b930      	cbnz	r0, 8018f58 <__d2b+0x24>
 8018f4a:	4602      	mov	r2, r0
 8018f4c:	4b23      	ldr	r3, [pc, #140]	@ (8018fdc <__d2b+0xa8>)
 8018f4e:	4824      	ldr	r0, [pc, #144]	@ (8018fe0 <__d2b+0xac>)
 8018f50:	f240 310f 	movw	r1, #783	@ 0x30f
 8018f54:	f7fe ffa8 	bl	8017ea8 <__assert_func>
 8018f58:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8018f5c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018f60:	b10d      	cbz	r5, 8018f66 <__d2b+0x32>
 8018f62:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8018f66:	9301      	str	r3, [sp, #4]
 8018f68:	f1b8 0300 	subs.w	r3, r8, #0
 8018f6c:	d023      	beq.n	8018fb6 <__d2b+0x82>
 8018f6e:	4668      	mov	r0, sp
 8018f70:	9300      	str	r3, [sp, #0]
 8018f72:	f7ff fd14 	bl	801899e <__lo0bits>
 8018f76:	e9dd 1200 	ldrd	r1, r2, [sp]
 8018f7a:	b1d0      	cbz	r0, 8018fb2 <__d2b+0x7e>
 8018f7c:	f1c0 0320 	rsb	r3, r0, #32
 8018f80:	fa02 f303 	lsl.w	r3, r2, r3
 8018f84:	430b      	orrs	r3, r1
 8018f86:	40c2      	lsrs	r2, r0
 8018f88:	6163      	str	r3, [r4, #20]
 8018f8a:	9201      	str	r2, [sp, #4]
 8018f8c:	9b01      	ldr	r3, [sp, #4]
 8018f8e:	61a3      	str	r3, [r4, #24]
 8018f90:	2b00      	cmp	r3, #0
 8018f92:	bf0c      	ite	eq
 8018f94:	2201      	moveq	r2, #1
 8018f96:	2202      	movne	r2, #2
 8018f98:	6122      	str	r2, [r4, #16]
 8018f9a:	b1a5      	cbz	r5, 8018fc6 <__d2b+0x92>
 8018f9c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8018fa0:	4405      	add	r5, r0
 8018fa2:	603d      	str	r5, [r7, #0]
 8018fa4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8018fa8:	6030      	str	r0, [r6, #0]
 8018faa:	4620      	mov	r0, r4
 8018fac:	b003      	add	sp, #12
 8018fae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018fb2:	6161      	str	r1, [r4, #20]
 8018fb4:	e7ea      	b.n	8018f8c <__d2b+0x58>
 8018fb6:	a801      	add	r0, sp, #4
 8018fb8:	f7ff fcf1 	bl	801899e <__lo0bits>
 8018fbc:	9b01      	ldr	r3, [sp, #4]
 8018fbe:	6163      	str	r3, [r4, #20]
 8018fc0:	3020      	adds	r0, #32
 8018fc2:	2201      	movs	r2, #1
 8018fc4:	e7e8      	b.n	8018f98 <__d2b+0x64>
 8018fc6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8018fca:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8018fce:	6038      	str	r0, [r7, #0]
 8018fd0:	6918      	ldr	r0, [r3, #16]
 8018fd2:	f7ff fcc5 	bl	8018960 <__hi0bits>
 8018fd6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8018fda:	e7e5      	b.n	8018fa8 <__d2b+0x74>
 8018fdc:	080234bf 	.word	0x080234bf
 8018fe0:	08023530 	.word	0x08023530

08018fe4 <__ratio>:
 8018fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018fe8:	b085      	sub	sp, #20
 8018fea:	e9cd 1000 	strd	r1, r0, [sp]
 8018fee:	a902      	add	r1, sp, #8
 8018ff0:	f7ff ff56 	bl	8018ea0 <__b2d>
 8018ff4:	9800      	ldr	r0, [sp, #0]
 8018ff6:	a903      	add	r1, sp, #12
 8018ff8:	ec55 4b10 	vmov	r4, r5, d0
 8018ffc:	f7ff ff50 	bl	8018ea0 <__b2d>
 8019000:	9b01      	ldr	r3, [sp, #4]
 8019002:	6919      	ldr	r1, [r3, #16]
 8019004:	9b00      	ldr	r3, [sp, #0]
 8019006:	691b      	ldr	r3, [r3, #16]
 8019008:	1ac9      	subs	r1, r1, r3
 801900a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801900e:	1a9b      	subs	r3, r3, r2
 8019010:	ec5b ab10 	vmov	sl, fp, d0
 8019014:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8019018:	2b00      	cmp	r3, #0
 801901a:	bfce      	itee	gt
 801901c:	462a      	movgt	r2, r5
 801901e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8019022:	465a      	movle	r2, fp
 8019024:	462f      	mov	r7, r5
 8019026:	46d9      	mov	r9, fp
 8019028:	bfcc      	ite	gt
 801902a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801902e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8019032:	464b      	mov	r3, r9
 8019034:	4652      	mov	r2, sl
 8019036:	4620      	mov	r0, r4
 8019038:	4639      	mov	r1, r7
 801903a:	f7e7 fc17 	bl	800086c <__aeabi_ddiv>
 801903e:	ec41 0b10 	vmov	d0, r0, r1
 8019042:	b005      	add	sp, #20
 8019044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019048 <__copybits>:
 8019048:	3901      	subs	r1, #1
 801904a:	b570      	push	{r4, r5, r6, lr}
 801904c:	1149      	asrs	r1, r1, #5
 801904e:	6914      	ldr	r4, [r2, #16]
 8019050:	3101      	adds	r1, #1
 8019052:	f102 0314 	add.w	r3, r2, #20
 8019056:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801905a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801905e:	1f05      	subs	r5, r0, #4
 8019060:	42a3      	cmp	r3, r4
 8019062:	d30c      	bcc.n	801907e <__copybits+0x36>
 8019064:	1aa3      	subs	r3, r4, r2
 8019066:	3b11      	subs	r3, #17
 8019068:	f023 0303 	bic.w	r3, r3, #3
 801906c:	3211      	adds	r2, #17
 801906e:	42a2      	cmp	r2, r4
 8019070:	bf88      	it	hi
 8019072:	2300      	movhi	r3, #0
 8019074:	4418      	add	r0, r3
 8019076:	2300      	movs	r3, #0
 8019078:	4288      	cmp	r0, r1
 801907a:	d305      	bcc.n	8019088 <__copybits+0x40>
 801907c:	bd70      	pop	{r4, r5, r6, pc}
 801907e:	f853 6b04 	ldr.w	r6, [r3], #4
 8019082:	f845 6f04 	str.w	r6, [r5, #4]!
 8019086:	e7eb      	b.n	8019060 <__copybits+0x18>
 8019088:	f840 3b04 	str.w	r3, [r0], #4
 801908c:	e7f4      	b.n	8019078 <__copybits+0x30>

0801908e <__any_on>:
 801908e:	f100 0214 	add.w	r2, r0, #20
 8019092:	6900      	ldr	r0, [r0, #16]
 8019094:	114b      	asrs	r3, r1, #5
 8019096:	4298      	cmp	r0, r3
 8019098:	b510      	push	{r4, lr}
 801909a:	db11      	blt.n	80190c0 <__any_on+0x32>
 801909c:	dd0a      	ble.n	80190b4 <__any_on+0x26>
 801909e:	f011 011f 	ands.w	r1, r1, #31
 80190a2:	d007      	beq.n	80190b4 <__any_on+0x26>
 80190a4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80190a8:	fa24 f001 	lsr.w	r0, r4, r1
 80190ac:	fa00 f101 	lsl.w	r1, r0, r1
 80190b0:	428c      	cmp	r4, r1
 80190b2:	d10b      	bne.n	80190cc <__any_on+0x3e>
 80190b4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80190b8:	4293      	cmp	r3, r2
 80190ba:	d803      	bhi.n	80190c4 <__any_on+0x36>
 80190bc:	2000      	movs	r0, #0
 80190be:	bd10      	pop	{r4, pc}
 80190c0:	4603      	mov	r3, r0
 80190c2:	e7f7      	b.n	80190b4 <__any_on+0x26>
 80190c4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80190c8:	2900      	cmp	r1, #0
 80190ca:	d0f5      	beq.n	80190b8 <__any_on+0x2a>
 80190cc:	2001      	movs	r0, #1
 80190ce:	e7f6      	b.n	80190be <__any_on+0x30>

080190d0 <__ascii_wctomb>:
 80190d0:	4603      	mov	r3, r0
 80190d2:	4608      	mov	r0, r1
 80190d4:	b141      	cbz	r1, 80190e8 <__ascii_wctomb+0x18>
 80190d6:	2aff      	cmp	r2, #255	@ 0xff
 80190d8:	d904      	bls.n	80190e4 <__ascii_wctomb+0x14>
 80190da:	228a      	movs	r2, #138	@ 0x8a
 80190dc:	601a      	str	r2, [r3, #0]
 80190de:	f04f 30ff 	mov.w	r0, #4294967295
 80190e2:	4770      	bx	lr
 80190e4:	700a      	strb	r2, [r1, #0]
 80190e6:	2001      	movs	r0, #1
 80190e8:	4770      	bx	lr

080190ea <__ssputs_r>:
 80190ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80190ee:	688e      	ldr	r6, [r1, #8]
 80190f0:	461f      	mov	r7, r3
 80190f2:	42be      	cmp	r6, r7
 80190f4:	680b      	ldr	r3, [r1, #0]
 80190f6:	4682      	mov	sl, r0
 80190f8:	460c      	mov	r4, r1
 80190fa:	4690      	mov	r8, r2
 80190fc:	d82d      	bhi.n	801915a <__ssputs_r+0x70>
 80190fe:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8019102:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8019106:	d026      	beq.n	8019156 <__ssputs_r+0x6c>
 8019108:	6965      	ldr	r5, [r4, #20]
 801910a:	6909      	ldr	r1, [r1, #16]
 801910c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019110:	eba3 0901 	sub.w	r9, r3, r1
 8019114:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8019118:	1c7b      	adds	r3, r7, #1
 801911a:	444b      	add	r3, r9
 801911c:	106d      	asrs	r5, r5, #1
 801911e:	429d      	cmp	r5, r3
 8019120:	bf38      	it	cc
 8019122:	461d      	movcc	r5, r3
 8019124:	0553      	lsls	r3, r2, #21
 8019126:	d527      	bpl.n	8019178 <__ssputs_r+0x8e>
 8019128:	4629      	mov	r1, r5
 801912a:	f7ff fa89 	bl	8018640 <_malloc_r>
 801912e:	4606      	mov	r6, r0
 8019130:	b360      	cbz	r0, 801918c <__ssputs_r+0xa2>
 8019132:	6921      	ldr	r1, [r4, #16]
 8019134:	464a      	mov	r2, r9
 8019136:	f7fe fea0 	bl	8017e7a <memcpy>
 801913a:	89a3      	ldrh	r3, [r4, #12]
 801913c:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8019140:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019144:	81a3      	strh	r3, [r4, #12]
 8019146:	6126      	str	r6, [r4, #16]
 8019148:	6165      	str	r5, [r4, #20]
 801914a:	444e      	add	r6, r9
 801914c:	eba5 0509 	sub.w	r5, r5, r9
 8019150:	6026      	str	r6, [r4, #0]
 8019152:	60a5      	str	r5, [r4, #8]
 8019154:	463e      	mov	r6, r7
 8019156:	42be      	cmp	r6, r7
 8019158:	d900      	bls.n	801915c <__ssputs_r+0x72>
 801915a:	463e      	mov	r6, r7
 801915c:	6820      	ldr	r0, [r4, #0]
 801915e:	4632      	mov	r2, r6
 8019160:	4641      	mov	r1, r8
 8019162:	f7fe fdba 	bl	8017cda <memmove>
 8019166:	68a3      	ldr	r3, [r4, #8]
 8019168:	1b9b      	subs	r3, r3, r6
 801916a:	60a3      	str	r3, [r4, #8]
 801916c:	6823      	ldr	r3, [r4, #0]
 801916e:	4433      	add	r3, r6
 8019170:	6023      	str	r3, [r4, #0]
 8019172:	2000      	movs	r0, #0
 8019174:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019178:	462a      	mov	r2, r5
 801917a:	f000 fd58 	bl	8019c2e <_realloc_r>
 801917e:	4606      	mov	r6, r0
 8019180:	2800      	cmp	r0, #0
 8019182:	d1e0      	bne.n	8019146 <__ssputs_r+0x5c>
 8019184:	6921      	ldr	r1, [r4, #16]
 8019186:	4650      	mov	r0, sl
 8019188:	f7fe feac 	bl	8017ee4 <_free_r>
 801918c:	230c      	movs	r3, #12
 801918e:	f8ca 3000 	str.w	r3, [sl]
 8019192:	89a3      	ldrh	r3, [r4, #12]
 8019194:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019198:	81a3      	strh	r3, [r4, #12]
 801919a:	f04f 30ff 	mov.w	r0, #4294967295
 801919e:	e7e9      	b.n	8019174 <__ssputs_r+0x8a>

080191a0 <_svfiprintf_r>:
 80191a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80191a4:	4698      	mov	r8, r3
 80191a6:	898b      	ldrh	r3, [r1, #12]
 80191a8:	061b      	lsls	r3, r3, #24
 80191aa:	b09d      	sub	sp, #116	@ 0x74
 80191ac:	4607      	mov	r7, r0
 80191ae:	460d      	mov	r5, r1
 80191b0:	4614      	mov	r4, r2
 80191b2:	d510      	bpl.n	80191d6 <_svfiprintf_r+0x36>
 80191b4:	690b      	ldr	r3, [r1, #16]
 80191b6:	b973      	cbnz	r3, 80191d6 <_svfiprintf_r+0x36>
 80191b8:	2140      	movs	r1, #64	@ 0x40
 80191ba:	f7ff fa41 	bl	8018640 <_malloc_r>
 80191be:	6028      	str	r0, [r5, #0]
 80191c0:	6128      	str	r0, [r5, #16]
 80191c2:	b930      	cbnz	r0, 80191d2 <_svfiprintf_r+0x32>
 80191c4:	230c      	movs	r3, #12
 80191c6:	603b      	str	r3, [r7, #0]
 80191c8:	f04f 30ff 	mov.w	r0, #4294967295
 80191cc:	b01d      	add	sp, #116	@ 0x74
 80191ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80191d2:	2340      	movs	r3, #64	@ 0x40
 80191d4:	616b      	str	r3, [r5, #20]
 80191d6:	2300      	movs	r3, #0
 80191d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80191da:	2320      	movs	r3, #32
 80191dc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80191e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80191e4:	2330      	movs	r3, #48	@ 0x30
 80191e6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8019384 <_svfiprintf_r+0x1e4>
 80191ea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80191ee:	f04f 0901 	mov.w	r9, #1
 80191f2:	4623      	mov	r3, r4
 80191f4:	469a      	mov	sl, r3
 80191f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80191fa:	b10a      	cbz	r2, 8019200 <_svfiprintf_r+0x60>
 80191fc:	2a25      	cmp	r2, #37	@ 0x25
 80191fe:	d1f9      	bne.n	80191f4 <_svfiprintf_r+0x54>
 8019200:	ebba 0b04 	subs.w	fp, sl, r4
 8019204:	d00b      	beq.n	801921e <_svfiprintf_r+0x7e>
 8019206:	465b      	mov	r3, fp
 8019208:	4622      	mov	r2, r4
 801920a:	4629      	mov	r1, r5
 801920c:	4638      	mov	r0, r7
 801920e:	f7ff ff6c 	bl	80190ea <__ssputs_r>
 8019212:	3001      	adds	r0, #1
 8019214:	f000 80a7 	beq.w	8019366 <_svfiprintf_r+0x1c6>
 8019218:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801921a:	445a      	add	r2, fp
 801921c:	9209      	str	r2, [sp, #36]	@ 0x24
 801921e:	f89a 3000 	ldrb.w	r3, [sl]
 8019222:	2b00      	cmp	r3, #0
 8019224:	f000 809f 	beq.w	8019366 <_svfiprintf_r+0x1c6>
 8019228:	2300      	movs	r3, #0
 801922a:	f04f 32ff 	mov.w	r2, #4294967295
 801922e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019232:	f10a 0a01 	add.w	sl, sl, #1
 8019236:	9304      	str	r3, [sp, #16]
 8019238:	9307      	str	r3, [sp, #28]
 801923a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801923e:	931a      	str	r3, [sp, #104]	@ 0x68
 8019240:	4654      	mov	r4, sl
 8019242:	2205      	movs	r2, #5
 8019244:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019248:	484e      	ldr	r0, [pc, #312]	@ (8019384 <_svfiprintf_r+0x1e4>)
 801924a:	f7e6 ffd9 	bl	8000200 <memchr>
 801924e:	9a04      	ldr	r2, [sp, #16]
 8019250:	b9d8      	cbnz	r0, 801928a <_svfiprintf_r+0xea>
 8019252:	06d0      	lsls	r0, r2, #27
 8019254:	bf44      	itt	mi
 8019256:	2320      	movmi	r3, #32
 8019258:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801925c:	0711      	lsls	r1, r2, #28
 801925e:	bf44      	itt	mi
 8019260:	232b      	movmi	r3, #43	@ 0x2b
 8019262:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8019266:	f89a 3000 	ldrb.w	r3, [sl]
 801926a:	2b2a      	cmp	r3, #42	@ 0x2a
 801926c:	d015      	beq.n	801929a <_svfiprintf_r+0xfa>
 801926e:	9a07      	ldr	r2, [sp, #28]
 8019270:	4654      	mov	r4, sl
 8019272:	2000      	movs	r0, #0
 8019274:	f04f 0c0a 	mov.w	ip, #10
 8019278:	4621      	mov	r1, r4
 801927a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801927e:	3b30      	subs	r3, #48	@ 0x30
 8019280:	2b09      	cmp	r3, #9
 8019282:	d94b      	bls.n	801931c <_svfiprintf_r+0x17c>
 8019284:	b1b0      	cbz	r0, 80192b4 <_svfiprintf_r+0x114>
 8019286:	9207      	str	r2, [sp, #28]
 8019288:	e014      	b.n	80192b4 <_svfiprintf_r+0x114>
 801928a:	eba0 0308 	sub.w	r3, r0, r8
 801928e:	fa09 f303 	lsl.w	r3, r9, r3
 8019292:	4313      	orrs	r3, r2
 8019294:	9304      	str	r3, [sp, #16]
 8019296:	46a2      	mov	sl, r4
 8019298:	e7d2      	b.n	8019240 <_svfiprintf_r+0xa0>
 801929a:	9b03      	ldr	r3, [sp, #12]
 801929c:	1d19      	adds	r1, r3, #4
 801929e:	681b      	ldr	r3, [r3, #0]
 80192a0:	9103      	str	r1, [sp, #12]
 80192a2:	2b00      	cmp	r3, #0
 80192a4:	bfbb      	ittet	lt
 80192a6:	425b      	neglt	r3, r3
 80192a8:	f042 0202 	orrlt.w	r2, r2, #2
 80192ac:	9307      	strge	r3, [sp, #28]
 80192ae:	9307      	strlt	r3, [sp, #28]
 80192b0:	bfb8      	it	lt
 80192b2:	9204      	strlt	r2, [sp, #16]
 80192b4:	7823      	ldrb	r3, [r4, #0]
 80192b6:	2b2e      	cmp	r3, #46	@ 0x2e
 80192b8:	d10a      	bne.n	80192d0 <_svfiprintf_r+0x130>
 80192ba:	7863      	ldrb	r3, [r4, #1]
 80192bc:	2b2a      	cmp	r3, #42	@ 0x2a
 80192be:	d132      	bne.n	8019326 <_svfiprintf_r+0x186>
 80192c0:	9b03      	ldr	r3, [sp, #12]
 80192c2:	1d1a      	adds	r2, r3, #4
 80192c4:	681b      	ldr	r3, [r3, #0]
 80192c6:	9203      	str	r2, [sp, #12]
 80192c8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80192cc:	3402      	adds	r4, #2
 80192ce:	9305      	str	r3, [sp, #20]
 80192d0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8019394 <_svfiprintf_r+0x1f4>
 80192d4:	7821      	ldrb	r1, [r4, #0]
 80192d6:	2203      	movs	r2, #3
 80192d8:	4650      	mov	r0, sl
 80192da:	f7e6 ff91 	bl	8000200 <memchr>
 80192de:	b138      	cbz	r0, 80192f0 <_svfiprintf_r+0x150>
 80192e0:	9b04      	ldr	r3, [sp, #16]
 80192e2:	eba0 000a 	sub.w	r0, r0, sl
 80192e6:	2240      	movs	r2, #64	@ 0x40
 80192e8:	4082      	lsls	r2, r0
 80192ea:	4313      	orrs	r3, r2
 80192ec:	3401      	adds	r4, #1
 80192ee:	9304      	str	r3, [sp, #16]
 80192f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80192f4:	4824      	ldr	r0, [pc, #144]	@ (8019388 <_svfiprintf_r+0x1e8>)
 80192f6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80192fa:	2206      	movs	r2, #6
 80192fc:	f7e6 ff80 	bl	8000200 <memchr>
 8019300:	2800      	cmp	r0, #0
 8019302:	d036      	beq.n	8019372 <_svfiprintf_r+0x1d2>
 8019304:	4b21      	ldr	r3, [pc, #132]	@ (801938c <_svfiprintf_r+0x1ec>)
 8019306:	bb1b      	cbnz	r3, 8019350 <_svfiprintf_r+0x1b0>
 8019308:	9b03      	ldr	r3, [sp, #12]
 801930a:	3307      	adds	r3, #7
 801930c:	f023 0307 	bic.w	r3, r3, #7
 8019310:	3308      	adds	r3, #8
 8019312:	9303      	str	r3, [sp, #12]
 8019314:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019316:	4433      	add	r3, r6
 8019318:	9309      	str	r3, [sp, #36]	@ 0x24
 801931a:	e76a      	b.n	80191f2 <_svfiprintf_r+0x52>
 801931c:	fb0c 3202 	mla	r2, ip, r2, r3
 8019320:	460c      	mov	r4, r1
 8019322:	2001      	movs	r0, #1
 8019324:	e7a8      	b.n	8019278 <_svfiprintf_r+0xd8>
 8019326:	2300      	movs	r3, #0
 8019328:	3401      	adds	r4, #1
 801932a:	9305      	str	r3, [sp, #20]
 801932c:	4619      	mov	r1, r3
 801932e:	f04f 0c0a 	mov.w	ip, #10
 8019332:	4620      	mov	r0, r4
 8019334:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019338:	3a30      	subs	r2, #48	@ 0x30
 801933a:	2a09      	cmp	r2, #9
 801933c:	d903      	bls.n	8019346 <_svfiprintf_r+0x1a6>
 801933e:	2b00      	cmp	r3, #0
 8019340:	d0c6      	beq.n	80192d0 <_svfiprintf_r+0x130>
 8019342:	9105      	str	r1, [sp, #20]
 8019344:	e7c4      	b.n	80192d0 <_svfiprintf_r+0x130>
 8019346:	fb0c 2101 	mla	r1, ip, r1, r2
 801934a:	4604      	mov	r4, r0
 801934c:	2301      	movs	r3, #1
 801934e:	e7f0      	b.n	8019332 <_svfiprintf_r+0x192>
 8019350:	ab03      	add	r3, sp, #12
 8019352:	9300      	str	r3, [sp, #0]
 8019354:	462a      	mov	r2, r5
 8019356:	4b0e      	ldr	r3, [pc, #56]	@ (8019390 <_svfiprintf_r+0x1f0>)
 8019358:	a904      	add	r1, sp, #16
 801935a:	4638      	mov	r0, r7
 801935c:	f3af 8000 	nop.w
 8019360:	1c42      	adds	r2, r0, #1
 8019362:	4606      	mov	r6, r0
 8019364:	d1d6      	bne.n	8019314 <_svfiprintf_r+0x174>
 8019366:	89ab      	ldrh	r3, [r5, #12]
 8019368:	065b      	lsls	r3, r3, #25
 801936a:	f53f af2d 	bmi.w	80191c8 <_svfiprintf_r+0x28>
 801936e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019370:	e72c      	b.n	80191cc <_svfiprintf_r+0x2c>
 8019372:	ab03      	add	r3, sp, #12
 8019374:	9300      	str	r3, [sp, #0]
 8019376:	462a      	mov	r2, r5
 8019378:	4b05      	ldr	r3, [pc, #20]	@ (8019390 <_svfiprintf_r+0x1f0>)
 801937a:	a904      	add	r1, sp, #16
 801937c:	4638      	mov	r0, r7
 801937e:	f000 f9bb 	bl	80196f8 <_printf_i>
 8019382:	e7ed      	b.n	8019360 <_svfiprintf_r+0x1c0>
 8019384:	08023589 	.word	0x08023589
 8019388:	08023593 	.word	0x08023593
 801938c:	00000000 	.word	0x00000000
 8019390:	080190eb 	.word	0x080190eb
 8019394:	0802358f 	.word	0x0802358f

08019398 <__sfputc_r>:
 8019398:	6893      	ldr	r3, [r2, #8]
 801939a:	3b01      	subs	r3, #1
 801939c:	2b00      	cmp	r3, #0
 801939e:	b410      	push	{r4}
 80193a0:	6093      	str	r3, [r2, #8]
 80193a2:	da08      	bge.n	80193b6 <__sfputc_r+0x1e>
 80193a4:	6994      	ldr	r4, [r2, #24]
 80193a6:	42a3      	cmp	r3, r4
 80193a8:	db01      	blt.n	80193ae <__sfputc_r+0x16>
 80193aa:	290a      	cmp	r1, #10
 80193ac:	d103      	bne.n	80193b6 <__sfputc_r+0x1e>
 80193ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80193b2:	f000 bb7d 	b.w	8019ab0 <__swbuf_r>
 80193b6:	6813      	ldr	r3, [r2, #0]
 80193b8:	1c58      	adds	r0, r3, #1
 80193ba:	6010      	str	r0, [r2, #0]
 80193bc:	7019      	strb	r1, [r3, #0]
 80193be:	4608      	mov	r0, r1
 80193c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80193c4:	4770      	bx	lr

080193c6 <__sfputs_r>:
 80193c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80193c8:	4606      	mov	r6, r0
 80193ca:	460f      	mov	r7, r1
 80193cc:	4614      	mov	r4, r2
 80193ce:	18d5      	adds	r5, r2, r3
 80193d0:	42ac      	cmp	r4, r5
 80193d2:	d101      	bne.n	80193d8 <__sfputs_r+0x12>
 80193d4:	2000      	movs	r0, #0
 80193d6:	e007      	b.n	80193e8 <__sfputs_r+0x22>
 80193d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80193dc:	463a      	mov	r2, r7
 80193de:	4630      	mov	r0, r6
 80193e0:	f7ff ffda 	bl	8019398 <__sfputc_r>
 80193e4:	1c43      	adds	r3, r0, #1
 80193e6:	d1f3      	bne.n	80193d0 <__sfputs_r+0xa>
 80193e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080193ec <_vfiprintf_r>:
 80193ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80193f0:	460d      	mov	r5, r1
 80193f2:	b09d      	sub	sp, #116	@ 0x74
 80193f4:	4614      	mov	r4, r2
 80193f6:	4698      	mov	r8, r3
 80193f8:	4606      	mov	r6, r0
 80193fa:	b118      	cbz	r0, 8019404 <_vfiprintf_r+0x18>
 80193fc:	6a03      	ldr	r3, [r0, #32]
 80193fe:	b90b      	cbnz	r3, 8019404 <_vfiprintf_r+0x18>
 8019400:	f7fe fbae 	bl	8017b60 <__sinit>
 8019404:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8019406:	07d9      	lsls	r1, r3, #31
 8019408:	d405      	bmi.n	8019416 <_vfiprintf_r+0x2a>
 801940a:	89ab      	ldrh	r3, [r5, #12]
 801940c:	059a      	lsls	r2, r3, #22
 801940e:	d402      	bmi.n	8019416 <_vfiprintf_r+0x2a>
 8019410:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8019412:	f7fe fd28 	bl	8017e66 <__retarget_lock_acquire_recursive>
 8019416:	89ab      	ldrh	r3, [r5, #12]
 8019418:	071b      	lsls	r3, r3, #28
 801941a:	d501      	bpl.n	8019420 <_vfiprintf_r+0x34>
 801941c:	692b      	ldr	r3, [r5, #16]
 801941e:	b99b      	cbnz	r3, 8019448 <_vfiprintf_r+0x5c>
 8019420:	4629      	mov	r1, r5
 8019422:	4630      	mov	r0, r6
 8019424:	f000 fb82 	bl	8019b2c <__swsetup_r>
 8019428:	b170      	cbz	r0, 8019448 <_vfiprintf_r+0x5c>
 801942a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801942c:	07dc      	lsls	r4, r3, #31
 801942e:	d504      	bpl.n	801943a <_vfiprintf_r+0x4e>
 8019430:	f04f 30ff 	mov.w	r0, #4294967295
 8019434:	b01d      	add	sp, #116	@ 0x74
 8019436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801943a:	89ab      	ldrh	r3, [r5, #12]
 801943c:	0598      	lsls	r0, r3, #22
 801943e:	d4f7      	bmi.n	8019430 <_vfiprintf_r+0x44>
 8019440:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8019442:	f7fe fd11 	bl	8017e68 <__retarget_lock_release_recursive>
 8019446:	e7f3      	b.n	8019430 <_vfiprintf_r+0x44>
 8019448:	2300      	movs	r3, #0
 801944a:	9309      	str	r3, [sp, #36]	@ 0x24
 801944c:	2320      	movs	r3, #32
 801944e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8019452:	f8cd 800c 	str.w	r8, [sp, #12]
 8019456:	2330      	movs	r3, #48	@ 0x30
 8019458:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8019608 <_vfiprintf_r+0x21c>
 801945c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8019460:	f04f 0901 	mov.w	r9, #1
 8019464:	4623      	mov	r3, r4
 8019466:	469a      	mov	sl, r3
 8019468:	f813 2b01 	ldrb.w	r2, [r3], #1
 801946c:	b10a      	cbz	r2, 8019472 <_vfiprintf_r+0x86>
 801946e:	2a25      	cmp	r2, #37	@ 0x25
 8019470:	d1f9      	bne.n	8019466 <_vfiprintf_r+0x7a>
 8019472:	ebba 0b04 	subs.w	fp, sl, r4
 8019476:	d00b      	beq.n	8019490 <_vfiprintf_r+0xa4>
 8019478:	465b      	mov	r3, fp
 801947a:	4622      	mov	r2, r4
 801947c:	4629      	mov	r1, r5
 801947e:	4630      	mov	r0, r6
 8019480:	f7ff ffa1 	bl	80193c6 <__sfputs_r>
 8019484:	3001      	adds	r0, #1
 8019486:	f000 80a7 	beq.w	80195d8 <_vfiprintf_r+0x1ec>
 801948a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801948c:	445a      	add	r2, fp
 801948e:	9209      	str	r2, [sp, #36]	@ 0x24
 8019490:	f89a 3000 	ldrb.w	r3, [sl]
 8019494:	2b00      	cmp	r3, #0
 8019496:	f000 809f 	beq.w	80195d8 <_vfiprintf_r+0x1ec>
 801949a:	2300      	movs	r3, #0
 801949c:	f04f 32ff 	mov.w	r2, #4294967295
 80194a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80194a4:	f10a 0a01 	add.w	sl, sl, #1
 80194a8:	9304      	str	r3, [sp, #16]
 80194aa:	9307      	str	r3, [sp, #28]
 80194ac:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80194b0:	931a      	str	r3, [sp, #104]	@ 0x68
 80194b2:	4654      	mov	r4, sl
 80194b4:	2205      	movs	r2, #5
 80194b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80194ba:	4853      	ldr	r0, [pc, #332]	@ (8019608 <_vfiprintf_r+0x21c>)
 80194bc:	f7e6 fea0 	bl	8000200 <memchr>
 80194c0:	9a04      	ldr	r2, [sp, #16]
 80194c2:	b9d8      	cbnz	r0, 80194fc <_vfiprintf_r+0x110>
 80194c4:	06d1      	lsls	r1, r2, #27
 80194c6:	bf44      	itt	mi
 80194c8:	2320      	movmi	r3, #32
 80194ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80194ce:	0713      	lsls	r3, r2, #28
 80194d0:	bf44      	itt	mi
 80194d2:	232b      	movmi	r3, #43	@ 0x2b
 80194d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80194d8:	f89a 3000 	ldrb.w	r3, [sl]
 80194dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80194de:	d015      	beq.n	801950c <_vfiprintf_r+0x120>
 80194e0:	9a07      	ldr	r2, [sp, #28]
 80194e2:	4654      	mov	r4, sl
 80194e4:	2000      	movs	r0, #0
 80194e6:	f04f 0c0a 	mov.w	ip, #10
 80194ea:	4621      	mov	r1, r4
 80194ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80194f0:	3b30      	subs	r3, #48	@ 0x30
 80194f2:	2b09      	cmp	r3, #9
 80194f4:	d94b      	bls.n	801958e <_vfiprintf_r+0x1a2>
 80194f6:	b1b0      	cbz	r0, 8019526 <_vfiprintf_r+0x13a>
 80194f8:	9207      	str	r2, [sp, #28]
 80194fa:	e014      	b.n	8019526 <_vfiprintf_r+0x13a>
 80194fc:	eba0 0308 	sub.w	r3, r0, r8
 8019500:	fa09 f303 	lsl.w	r3, r9, r3
 8019504:	4313      	orrs	r3, r2
 8019506:	9304      	str	r3, [sp, #16]
 8019508:	46a2      	mov	sl, r4
 801950a:	e7d2      	b.n	80194b2 <_vfiprintf_r+0xc6>
 801950c:	9b03      	ldr	r3, [sp, #12]
 801950e:	1d19      	adds	r1, r3, #4
 8019510:	681b      	ldr	r3, [r3, #0]
 8019512:	9103      	str	r1, [sp, #12]
 8019514:	2b00      	cmp	r3, #0
 8019516:	bfbb      	ittet	lt
 8019518:	425b      	neglt	r3, r3
 801951a:	f042 0202 	orrlt.w	r2, r2, #2
 801951e:	9307      	strge	r3, [sp, #28]
 8019520:	9307      	strlt	r3, [sp, #28]
 8019522:	bfb8      	it	lt
 8019524:	9204      	strlt	r2, [sp, #16]
 8019526:	7823      	ldrb	r3, [r4, #0]
 8019528:	2b2e      	cmp	r3, #46	@ 0x2e
 801952a:	d10a      	bne.n	8019542 <_vfiprintf_r+0x156>
 801952c:	7863      	ldrb	r3, [r4, #1]
 801952e:	2b2a      	cmp	r3, #42	@ 0x2a
 8019530:	d132      	bne.n	8019598 <_vfiprintf_r+0x1ac>
 8019532:	9b03      	ldr	r3, [sp, #12]
 8019534:	1d1a      	adds	r2, r3, #4
 8019536:	681b      	ldr	r3, [r3, #0]
 8019538:	9203      	str	r2, [sp, #12]
 801953a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801953e:	3402      	adds	r4, #2
 8019540:	9305      	str	r3, [sp, #20]
 8019542:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8019618 <_vfiprintf_r+0x22c>
 8019546:	7821      	ldrb	r1, [r4, #0]
 8019548:	2203      	movs	r2, #3
 801954a:	4650      	mov	r0, sl
 801954c:	f7e6 fe58 	bl	8000200 <memchr>
 8019550:	b138      	cbz	r0, 8019562 <_vfiprintf_r+0x176>
 8019552:	9b04      	ldr	r3, [sp, #16]
 8019554:	eba0 000a 	sub.w	r0, r0, sl
 8019558:	2240      	movs	r2, #64	@ 0x40
 801955a:	4082      	lsls	r2, r0
 801955c:	4313      	orrs	r3, r2
 801955e:	3401      	adds	r4, #1
 8019560:	9304      	str	r3, [sp, #16]
 8019562:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019566:	4829      	ldr	r0, [pc, #164]	@ (801960c <_vfiprintf_r+0x220>)
 8019568:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801956c:	2206      	movs	r2, #6
 801956e:	f7e6 fe47 	bl	8000200 <memchr>
 8019572:	2800      	cmp	r0, #0
 8019574:	d03f      	beq.n	80195f6 <_vfiprintf_r+0x20a>
 8019576:	4b26      	ldr	r3, [pc, #152]	@ (8019610 <_vfiprintf_r+0x224>)
 8019578:	bb1b      	cbnz	r3, 80195c2 <_vfiprintf_r+0x1d6>
 801957a:	9b03      	ldr	r3, [sp, #12]
 801957c:	3307      	adds	r3, #7
 801957e:	f023 0307 	bic.w	r3, r3, #7
 8019582:	3308      	adds	r3, #8
 8019584:	9303      	str	r3, [sp, #12]
 8019586:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019588:	443b      	add	r3, r7
 801958a:	9309      	str	r3, [sp, #36]	@ 0x24
 801958c:	e76a      	b.n	8019464 <_vfiprintf_r+0x78>
 801958e:	fb0c 3202 	mla	r2, ip, r2, r3
 8019592:	460c      	mov	r4, r1
 8019594:	2001      	movs	r0, #1
 8019596:	e7a8      	b.n	80194ea <_vfiprintf_r+0xfe>
 8019598:	2300      	movs	r3, #0
 801959a:	3401      	adds	r4, #1
 801959c:	9305      	str	r3, [sp, #20]
 801959e:	4619      	mov	r1, r3
 80195a0:	f04f 0c0a 	mov.w	ip, #10
 80195a4:	4620      	mov	r0, r4
 80195a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80195aa:	3a30      	subs	r2, #48	@ 0x30
 80195ac:	2a09      	cmp	r2, #9
 80195ae:	d903      	bls.n	80195b8 <_vfiprintf_r+0x1cc>
 80195b0:	2b00      	cmp	r3, #0
 80195b2:	d0c6      	beq.n	8019542 <_vfiprintf_r+0x156>
 80195b4:	9105      	str	r1, [sp, #20]
 80195b6:	e7c4      	b.n	8019542 <_vfiprintf_r+0x156>
 80195b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80195bc:	4604      	mov	r4, r0
 80195be:	2301      	movs	r3, #1
 80195c0:	e7f0      	b.n	80195a4 <_vfiprintf_r+0x1b8>
 80195c2:	ab03      	add	r3, sp, #12
 80195c4:	9300      	str	r3, [sp, #0]
 80195c6:	462a      	mov	r2, r5
 80195c8:	4b12      	ldr	r3, [pc, #72]	@ (8019614 <_vfiprintf_r+0x228>)
 80195ca:	a904      	add	r1, sp, #16
 80195cc:	4630      	mov	r0, r6
 80195ce:	f3af 8000 	nop.w
 80195d2:	4607      	mov	r7, r0
 80195d4:	1c78      	adds	r0, r7, #1
 80195d6:	d1d6      	bne.n	8019586 <_vfiprintf_r+0x19a>
 80195d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80195da:	07d9      	lsls	r1, r3, #31
 80195dc:	d405      	bmi.n	80195ea <_vfiprintf_r+0x1fe>
 80195de:	89ab      	ldrh	r3, [r5, #12]
 80195e0:	059a      	lsls	r2, r3, #22
 80195e2:	d402      	bmi.n	80195ea <_vfiprintf_r+0x1fe>
 80195e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80195e6:	f7fe fc3f 	bl	8017e68 <__retarget_lock_release_recursive>
 80195ea:	89ab      	ldrh	r3, [r5, #12]
 80195ec:	065b      	lsls	r3, r3, #25
 80195ee:	f53f af1f 	bmi.w	8019430 <_vfiprintf_r+0x44>
 80195f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80195f4:	e71e      	b.n	8019434 <_vfiprintf_r+0x48>
 80195f6:	ab03      	add	r3, sp, #12
 80195f8:	9300      	str	r3, [sp, #0]
 80195fa:	462a      	mov	r2, r5
 80195fc:	4b05      	ldr	r3, [pc, #20]	@ (8019614 <_vfiprintf_r+0x228>)
 80195fe:	a904      	add	r1, sp, #16
 8019600:	4630      	mov	r0, r6
 8019602:	f000 f879 	bl	80196f8 <_printf_i>
 8019606:	e7e4      	b.n	80195d2 <_vfiprintf_r+0x1e6>
 8019608:	08023589 	.word	0x08023589
 801960c:	08023593 	.word	0x08023593
 8019610:	00000000 	.word	0x00000000
 8019614:	080193c7 	.word	0x080193c7
 8019618:	0802358f 	.word	0x0802358f

0801961c <_printf_common>:
 801961c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019620:	4616      	mov	r6, r2
 8019622:	4698      	mov	r8, r3
 8019624:	688a      	ldr	r2, [r1, #8]
 8019626:	690b      	ldr	r3, [r1, #16]
 8019628:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801962c:	4293      	cmp	r3, r2
 801962e:	bfb8      	it	lt
 8019630:	4613      	movlt	r3, r2
 8019632:	6033      	str	r3, [r6, #0]
 8019634:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8019638:	4607      	mov	r7, r0
 801963a:	460c      	mov	r4, r1
 801963c:	b10a      	cbz	r2, 8019642 <_printf_common+0x26>
 801963e:	3301      	adds	r3, #1
 8019640:	6033      	str	r3, [r6, #0]
 8019642:	6823      	ldr	r3, [r4, #0]
 8019644:	0699      	lsls	r1, r3, #26
 8019646:	bf42      	ittt	mi
 8019648:	6833      	ldrmi	r3, [r6, #0]
 801964a:	3302      	addmi	r3, #2
 801964c:	6033      	strmi	r3, [r6, #0]
 801964e:	6825      	ldr	r5, [r4, #0]
 8019650:	f015 0506 	ands.w	r5, r5, #6
 8019654:	d106      	bne.n	8019664 <_printf_common+0x48>
 8019656:	f104 0a19 	add.w	sl, r4, #25
 801965a:	68e3      	ldr	r3, [r4, #12]
 801965c:	6832      	ldr	r2, [r6, #0]
 801965e:	1a9b      	subs	r3, r3, r2
 8019660:	42ab      	cmp	r3, r5
 8019662:	dc26      	bgt.n	80196b2 <_printf_common+0x96>
 8019664:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8019668:	6822      	ldr	r2, [r4, #0]
 801966a:	3b00      	subs	r3, #0
 801966c:	bf18      	it	ne
 801966e:	2301      	movne	r3, #1
 8019670:	0692      	lsls	r2, r2, #26
 8019672:	d42b      	bmi.n	80196cc <_printf_common+0xb0>
 8019674:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8019678:	4641      	mov	r1, r8
 801967a:	4638      	mov	r0, r7
 801967c:	47c8      	blx	r9
 801967e:	3001      	adds	r0, #1
 8019680:	d01e      	beq.n	80196c0 <_printf_common+0xa4>
 8019682:	6823      	ldr	r3, [r4, #0]
 8019684:	6922      	ldr	r2, [r4, #16]
 8019686:	f003 0306 	and.w	r3, r3, #6
 801968a:	2b04      	cmp	r3, #4
 801968c:	bf02      	ittt	eq
 801968e:	68e5      	ldreq	r5, [r4, #12]
 8019690:	6833      	ldreq	r3, [r6, #0]
 8019692:	1aed      	subeq	r5, r5, r3
 8019694:	68a3      	ldr	r3, [r4, #8]
 8019696:	bf0c      	ite	eq
 8019698:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801969c:	2500      	movne	r5, #0
 801969e:	4293      	cmp	r3, r2
 80196a0:	bfc4      	itt	gt
 80196a2:	1a9b      	subgt	r3, r3, r2
 80196a4:	18ed      	addgt	r5, r5, r3
 80196a6:	2600      	movs	r6, #0
 80196a8:	341a      	adds	r4, #26
 80196aa:	42b5      	cmp	r5, r6
 80196ac:	d11a      	bne.n	80196e4 <_printf_common+0xc8>
 80196ae:	2000      	movs	r0, #0
 80196b0:	e008      	b.n	80196c4 <_printf_common+0xa8>
 80196b2:	2301      	movs	r3, #1
 80196b4:	4652      	mov	r2, sl
 80196b6:	4641      	mov	r1, r8
 80196b8:	4638      	mov	r0, r7
 80196ba:	47c8      	blx	r9
 80196bc:	3001      	adds	r0, #1
 80196be:	d103      	bne.n	80196c8 <_printf_common+0xac>
 80196c0:	f04f 30ff 	mov.w	r0, #4294967295
 80196c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80196c8:	3501      	adds	r5, #1
 80196ca:	e7c6      	b.n	801965a <_printf_common+0x3e>
 80196cc:	18e1      	adds	r1, r4, r3
 80196ce:	1c5a      	adds	r2, r3, #1
 80196d0:	2030      	movs	r0, #48	@ 0x30
 80196d2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80196d6:	4422      	add	r2, r4
 80196d8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80196dc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80196e0:	3302      	adds	r3, #2
 80196e2:	e7c7      	b.n	8019674 <_printf_common+0x58>
 80196e4:	2301      	movs	r3, #1
 80196e6:	4622      	mov	r2, r4
 80196e8:	4641      	mov	r1, r8
 80196ea:	4638      	mov	r0, r7
 80196ec:	47c8      	blx	r9
 80196ee:	3001      	adds	r0, #1
 80196f0:	d0e6      	beq.n	80196c0 <_printf_common+0xa4>
 80196f2:	3601      	adds	r6, #1
 80196f4:	e7d9      	b.n	80196aa <_printf_common+0x8e>
	...

080196f8 <_printf_i>:
 80196f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80196fc:	7e0f      	ldrb	r7, [r1, #24]
 80196fe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8019700:	2f78      	cmp	r7, #120	@ 0x78
 8019702:	4691      	mov	r9, r2
 8019704:	4680      	mov	r8, r0
 8019706:	460c      	mov	r4, r1
 8019708:	469a      	mov	sl, r3
 801970a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801970e:	d807      	bhi.n	8019720 <_printf_i+0x28>
 8019710:	2f62      	cmp	r7, #98	@ 0x62
 8019712:	d80a      	bhi.n	801972a <_printf_i+0x32>
 8019714:	2f00      	cmp	r7, #0
 8019716:	f000 80d1 	beq.w	80198bc <_printf_i+0x1c4>
 801971a:	2f58      	cmp	r7, #88	@ 0x58
 801971c:	f000 80b8 	beq.w	8019890 <_printf_i+0x198>
 8019720:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8019724:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8019728:	e03a      	b.n	80197a0 <_printf_i+0xa8>
 801972a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801972e:	2b15      	cmp	r3, #21
 8019730:	d8f6      	bhi.n	8019720 <_printf_i+0x28>
 8019732:	a101      	add	r1, pc, #4	@ (adr r1, 8019738 <_printf_i+0x40>)
 8019734:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8019738:	08019791 	.word	0x08019791
 801973c:	080197a5 	.word	0x080197a5
 8019740:	08019721 	.word	0x08019721
 8019744:	08019721 	.word	0x08019721
 8019748:	08019721 	.word	0x08019721
 801974c:	08019721 	.word	0x08019721
 8019750:	080197a5 	.word	0x080197a5
 8019754:	08019721 	.word	0x08019721
 8019758:	08019721 	.word	0x08019721
 801975c:	08019721 	.word	0x08019721
 8019760:	08019721 	.word	0x08019721
 8019764:	080198a3 	.word	0x080198a3
 8019768:	080197cf 	.word	0x080197cf
 801976c:	0801985d 	.word	0x0801985d
 8019770:	08019721 	.word	0x08019721
 8019774:	08019721 	.word	0x08019721
 8019778:	080198c5 	.word	0x080198c5
 801977c:	08019721 	.word	0x08019721
 8019780:	080197cf 	.word	0x080197cf
 8019784:	08019721 	.word	0x08019721
 8019788:	08019721 	.word	0x08019721
 801978c:	08019865 	.word	0x08019865
 8019790:	6833      	ldr	r3, [r6, #0]
 8019792:	1d1a      	adds	r2, r3, #4
 8019794:	681b      	ldr	r3, [r3, #0]
 8019796:	6032      	str	r2, [r6, #0]
 8019798:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801979c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80197a0:	2301      	movs	r3, #1
 80197a2:	e09c      	b.n	80198de <_printf_i+0x1e6>
 80197a4:	6833      	ldr	r3, [r6, #0]
 80197a6:	6820      	ldr	r0, [r4, #0]
 80197a8:	1d19      	adds	r1, r3, #4
 80197aa:	6031      	str	r1, [r6, #0]
 80197ac:	0606      	lsls	r6, r0, #24
 80197ae:	d501      	bpl.n	80197b4 <_printf_i+0xbc>
 80197b0:	681d      	ldr	r5, [r3, #0]
 80197b2:	e003      	b.n	80197bc <_printf_i+0xc4>
 80197b4:	0645      	lsls	r5, r0, #25
 80197b6:	d5fb      	bpl.n	80197b0 <_printf_i+0xb8>
 80197b8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80197bc:	2d00      	cmp	r5, #0
 80197be:	da03      	bge.n	80197c8 <_printf_i+0xd0>
 80197c0:	232d      	movs	r3, #45	@ 0x2d
 80197c2:	426d      	negs	r5, r5
 80197c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80197c8:	4858      	ldr	r0, [pc, #352]	@ (801992c <_printf_i+0x234>)
 80197ca:	230a      	movs	r3, #10
 80197cc:	e011      	b.n	80197f2 <_printf_i+0xfa>
 80197ce:	6821      	ldr	r1, [r4, #0]
 80197d0:	6833      	ldr	r3, [r6, #0]
 80197d2:	0608      	lsls	r0, r1, #24
 80197d4:	f853 5b04 	ldr.w	r5, [r3], #4
 80197d8:	d402      	bmi.n	80197e0 <_printf_i+0xe8>
 80197da:	0649      	lsls	r1, r1, #25
 80197dc:	bf48      	it	mi
 80197de:	b2ad      	uxthmi	r5, r5
 80197e0:	2f6f      	cmp	r7, #111	@ 0x6f
 80197e2:	4852      	ldr	r0, [pc, #328]	@ (801992c <_printf_i+0x234>)
 80197e4:	6033      	str	r3, [r6, #0]
 80197e6:	bf14      	ite	ne
 80197e8:	230a      	movne	r3, #10
 80197ea:	2308      	moveq	r3, #8
 80197ec:	2100      	movs	r1, #0
 80197ee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80197f2:	6866      	ldr	r6, [r4, #4]
 80197f4:	60a6      	str	r6, [r4, #8]
 80197f6:	2e00      	cmp	r6, #0
 80197f8:	db05      	blt.n	8019806 <_printf_i+0x10e>
 80197fa:	6821      	ldr	r1, [r4, #0]
 80197fc:	432e      	orrs	r6, r5
 80197fe:	f021 0104 	bic.w	r1, r1, #4
 8019802:	6021      	str	r1, [r4, #0]
 8019804:	d04b      	beq.n	801989e <_printf_i+0x1a6>
 8019806:	4616      	mov	r6, r2
 8019808:	fbb5 f1f3 	udiv	r1, r5, r3
 801980c:	fb03 5711 	mls	r7, r3, r1, r5
 8019810:	5dc7      	ldrb	r7, [r0, r7]
 8019812:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8019816:	462f      	mov	r7, r5
 8019818:	42bb      	cmp	r3, r7
 801981a:	460d      	mov	r5, r1
 801981c:	d9f4      	bls.n	8019808 <_printf_i+0x110>
 801981e:	2b08      	cmp	r3, #8
 8019820:	d10b      	bne.n	801983a <_printf_i+0x142>
 8019822:	6823      	ldr	r3, [r4, #0]
 8019824:	07df      	lsls	r7, r3, #31
 8019826:	d508      	bpl.n	801983a <_printf_i+0x142>
 8019828:	6923      	ldr	r3, [r4, #16]
 801982a:	6861      	ldr	r1, [r4, #4]
 801982c:	4299      	cmp	r1, r3
 801982e:	bfde      	ittt	le
 8019830:	2330      	movle	r3, #48	@ 0x30
 8019832:	f806 3c01 	strble.w	r3, [r6, #-1]
 8019836:	f106 36ff 	addle.w	r6, r6, #4294967295
 801983a:	1b92      	subs	r2, r2, r6
 801983c:	6122      	str	r2, [r4, #16]
 801983e:	f8cd a000 	str.w	sl, [sp]
 8019842:	464b      	mov	r3, r9
 8019844:	aa03      	add	r2, sp, #12
 8019846:	4621      	mov	r1, r4
 8019848:	4640      	mov	r0, r8
 801984a:	f7ff fee7 	bl	801961c <_printf_common>
 801984e:	3001      	adds	r0, #1
 8019850:	d14a      	bne.n	80198e8 <_printf_i+0x1f0>
 8019852:	f04f 30ff 	mov.w	r0, #4294967295
 8019856:	b004      	add	sp, #16
 8019858:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801985c:	6823      	ldr	r3, [r4, #0]
 801985e:	f043 0320 	orr.w	r3, r3, #32
 8019862:	6023      	str	r3, [r4, #0]
 8019864:	4832      	ldr	r0, [pc, #200]	@ (8019930 <_printf_i+0x238>)
 8019866:	2778      	movs	r7, #120	@ 0x78
 8019868:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801986c:	6823      	ldr	r3, [r4, #0]
 801986e:	6831      	ldr	r1, [r6, #0]
 8019870:	061f      	lsls	r7, r3, #24
 8019872:	f851 5b04 	ldr.w	r5, [r1], #4
 8019876:	d402      	bmi.n	801987e <_printf_i+0x186>
 8019878:	065f      	lsls	r7, r3, #25
 801987a:	bf48      	it	mi
 801987c:	b2ad      	uxthmi	r5, r5
 801987e:	6031      	str	r1, [r6, #0]
 8019880:	07d9      	lsls	r1, r3, #31
 8019882:	bf44      	itt	mi
 8019884:	f043 0320 	orrmi.w	r3, r3, #32
 8019888:	6023      	strmi	r3, [r4, #0]
 801988a:	b11d      	cbz	r5, 8019894 <_printf_i+0x19c>
 801988c:	2310      	movs	r3, #16
 801988e:	e7ad      	b.n	80197ec <_printf_i+0xf4>
 8019890:	4826      	ldr	r0, [pc, #152]	@ (801992c <_printf_i+0x234>)
 8019892:	e7e9      	b.n	8019868 <_printf_i+0x170>
 8019894:	6823      	ldr	r3, [r4, #0]
 8019896:	f023 0320 	bic.w	r3, r3, #32
 801989a:	6023      	str	r3, [r4, #0]
 801989c:	e7f6      	b.n	801988c <_printf_i+0x194>
 801989e:	4616      	mov	r6, r2
 80198a0:	e7bd      	b.n	801981e <_printf_i+0x126>
 80198a2:	6833      	ldr	r3, [r6, #0]
 80198a4:	6825      	ldr	r5, [r4, #0]
 80198a6:	6961      	ldr	r1, [r4, #20]
 80198a8:	1d18      	adds	r0, r3, #4
 80198aa:	6030      	str	r0, [r6, #0]
 80198ac:	062e      	lsls	r6, r5, #24
 80198ae:	681b      	ldr	r3, [r3, #0]
 80198b0:	d501      	bpl.n	80198b6 <_printf_i+0x1be>
 80198b2:	6019      	str	r1, [r3, #0]
 80198b4:	e002      	b.n	80198bc <_printf_i+0x1c4>
 80198b6:	0668      	lsls	r0, r5, #25
 80198b8:	d5fb      	bpl.n	80198b2 <_printf_i+0x1ba>
 80198ba:	8019      	strh	r1, [r3, #0]
 80198bc:	2300      	movs	r3, #0
 80198be:	6123      	str	r3, [r4, #16]
 80198c0:	4616      	mov	r6, r2
 80198c2:	e7bc      	b.n	801983e <_printf_i+0x146>
 80198c4:	6833      	ldr	r3, [r6, #0]
 80198c6:	1d1a      	adds	r2, r3, #4
 80198c8:	6032      	str	r2, [r6, #0]
 80198ca:	681e      	ldr	r6, [r3, #0]
 80198cc:	6862      	ldr	r2, [r4, #4]
 80198ce:	2100      	movs	r1, #0
 80198d0:	4630      	mov	r0, r6
 80198d2:	f7e6 fc95 	bl	8000200 <memchr>
 80198d6:	b108      	cbz	r0, 80198dc <_printf_i+0x1e4>
 80198d8:	1b80      	subs	r0, r0, r6
 80198da:	6060      	str	r0, [r4, #4]
 80198dc:	6863      	ldr	r3, [r4, #4]
 80198de:	6123      	str	r3, [r4, #16]
 80198e0:	2300      	movs	r3, #0
 80198e2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80198e6:	e7aa      	b.n	801983e <_printf_i+0x146>
 80198e8:	6923      	ldr	r3, [r4, #16]
 80198ea:	4632      	mov	r2, r6
 80198ec:	4649      	mov	r1, r9
 80198ee:	4640      	mov	r0, r8
 80198f0:	47d0      	blx	sl
 80198f2:	3001      	adds	r0, #1
 80198f4:	d0ad      	beq.n	8019852 <_printf_i+0x15a>
 80198f6:	6823      	ldr	r3, [r4, #0]
 80198f8:	079b      	lsls	r3, r3, #30
 80198fa:	d413      	bmi.n	8019924 <_printf_i+0x22c>
 80198fc:	68e0      	ldr	r0, [r4, #12]
 80198fe:	9b03      	ldr	r3, [sp, #12]
 8019900:	4298      	cmp	r0, r3
 8019902:	bfb8      	it	lt
 8019904:	4618      	movlt	r0, r3
 8019906:	e7a6      	b.n	8019856 <_printf_i+0x15e>
 8019908:	2301      	movs	r3, #1
 801990a:	4632      	mov	r2, r6
 801990c:	4649      	mov	r1, r9
 801990e:	4640      	mov	r0, r8
 8019910:	47d0      	blx	sl
 8019912:	3001      	adds	r0, #1
 8019914:	d09d      	beq.n	8019852 <_printf_i+0x15a>
 8019916:	3501      	adds	r5, #1
 8019918:	68e3      	ldr	r3, [r4, #12]
 801991a:	9903      	ldr	r1, [sp, #12]
 801991c:	1a5b      	subs	r3, r3, r1
 801991e:	42ab      	cmp	r3, r5
 8019920:	dcf2      	bgt.n	8019908 <_printf_i+0x210>
 8019922:	e7eb      	b.n	80198fc <_printf_i+0x204>
 8019924:	2500      	movs	r5, #0
 8019926:	f104 0619 	add.w	r6, r4, #25
 801992a:	e7f5      	b.n	8019918 <_printf_i+0x220>
 801992c:	0802359a 	.word	0x0802359a
 8019930:	080235ab 	.word	0x080235ab

08019934 <__sflush_r>:
 8019934:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8019938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801993c:	0716      	lsls	r6, r2, #28
 801993e:	4605      	mov	r5, r0
 8019940:	460c      	mov	r4, r1
 8019942:	d454      	bmi.n	80199ee <__sflush_r+0xba>
 8019944:	684b      	ldr	r3, [r1, #4]
 8019946:	2b00      	cmp	r3, #0
 8019948:	dc02      	bgt.n	8019950 <__sflush_r+0x1c>
 801994a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801994c:	2b00      	cmp	r3, #0
 801994e:	dd48      	ble.n	80199e2 <__sflush_r+0xae>
 8019950:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8019952:	2e00      	cmp	r6, #0
 8019954:	d045      	beq.n	80199e2 <__sflush_r+0xae>
 8019956:	2300      	movs	r3, #0
 8019958:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801995c:	682f      	ldr	r7, [r5, #0]
 801995e:	6a21      	ldr	r1, [r4, #32]
 8019960:	602b      	str	r3, [r5, #0]
 8019962:	d030      	beq.n	80199c6 <__sflush_r+0x92>
 8019964:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8019966:	89a3      	ldrh	r3, [r4, #12]
 8019968:	0759      	lsls	r1, r3, #29
 801996a:	d505      	bpl.n	8019978 <__sflush_r+0x44>
 801996c:	6863      	ldr	r3, [r4, #4]
 801996e:	1ad2      	subs	r2, r2, r3
 8019970:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8019972:	b10b      	cbz	r3, 8019978 <__sflush_r+0x44>
 8019974:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8019976:	1ad2      	subs	r2, r2, r3
 8019978:	2300      	movs	r3, #0
 801997a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801997c:	6a21      	ldr	r1, [r4, #32]
 801997e:	4628      	mov	r0, r5
 8019980:	47b0      	blx	r6
 8019982:	1c43      	adds	r3, r0, #1
 8019984:	89a3      	ldrh	r3, [r4, #12]
 8019986:	d106      	bne.n	8019996 <__sflush_r+0x62>
 8019988:	6829      	ldr	r1, [r5, #0]
 801998a:	291d      	cmp	r1, #29
 801998c:	d82b      	bhi.n	80199e6 <__sflush_r+0xb2>
 801998e:	4a2a      	ldr	r2, [pc, #168]	@ (8019a38 <__sflush_r+0x104>)
 8019990:	40ca      	lsrs	r2, r1
 8019992:	07d6      	lsls	r6, r2, #31
 8019994:	d527      	bpl.n	80199e6 <__sflush_r+0xb2>
 8019996:	2200      	movs	r2, #0
 8019998:	6062      	str	r2, [r4, #4]
 801999a:	04d9      	lsls	r1, r3, #19
 801999c:	6922      	ldr	r2, [r4, #16]
 801999e:	6022      	str	r2, [r4, #0]
 80199a0:	d504      	bpl.n	80199ac <__sflush_r+0x78>
 80199a2:	1c42      	adds	r2, r0, #1
 80199a4:	d101      	bne.n	80199aa <__sflush_r+0x76>
 80199a6:	682b      	ldr	r3, [r5, #0]
 80199a8:	b903      	cbnz	r3, 80199ac <__sflush_r+0x78>
 80199aa:	6560      	str	r0, [r4, #84]	@ 0x54
 80199ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80199ae:	602f      	str	r7, [r5, #0]
 80199b0:	b1b9      	cbz	r1, 80199e2 <__sflush_r+0xae>
 80199b2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80199b6:	4299      	cmp	r1, r3
 80199b8:	d002      	beq.n	80199c0 <__sflush_r+0x8c>
 80199ba:	4628      	mov	r0, r5
 80199bc:	f7fe fa92 	bl	8017ee4 <_free_r>
 80199c0:	2300      	movs	r3, #0
 80199c2:	6363      	str	r3, [r4, #52]	@ 0x34
 80199c4:	e00d      	b.n	80199e2 <__sflush_r+0xae>
 80199c6:	2301      	movs	r3, #1
 80199c8:	4628      	mov	r0, r5
 80199ca:	47b0      	blx	r6
 80199cc:	4602      	mov	r2, r0
 80199ce:	1c50      	adds	r0, r2, #1
 80199d0:	d1c9      	bne.n	8019966 <__sflush_r+0x32>
 80199d2:	682b      	ldr	r3, [r5, #0]
 80199d4:	2b00      	cmp	r3, #0
 80199d6:	d0c6      	beq.n	8019966 <__sflush_r+0x32>
 80199d8:	2b1d      	cmp	r3, #29
 80199da:	d001      	beq.n	80199e0 <__sflush_r+0xac>
 80199dc:	2b16      	cmp	r3, #22
 80199de:	d11e      	bne.n	8019a1e <__sflush_r+0xea>
 80199e0:	602f      	str	r7, [r5, #0]
 80199e2:	2000      	movs	r0, #0
 80199e4:	e022      	b.n	8019a2c <__sflush_r+0xf8>
 80199e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80199ea:	b21b      	sxth	r3, r3
 80199ec:	e01b      	b.n	8019a26 <__sflush_r+0xf2>
 80199ee:	690f      	ldr	r7, [r1, #16]
 80199f0:	2f00      	cmp	r7, #0
 80199f2:	d0f6      	beq.n	80199e2 <__sflush_r+0xae>
 80199f4:	0793      	lsls	r3, r2, #30
 80199f6:	680e      	ldr	r6, [r1, #0]
 80199f8:	bf08      	it	eq
 80199fa:	694b      	ldreq	r3, [r1, #20]
 80199fc:	600f      	str	r7, [r1, #0]
 80199fe:	bf18      	it	ne
 8019a00:	2300      	movne	r3, #0
 8019a02:	eba6 0807 	sub.w	r8, r6, r7
 8019a06:	608b      	str	r3, [r1, #8]
 8019a08:	f1b8 0f00 	cmp.w	r8, #0
 8019a0c:	dde9      	ble.n	80199e2 <__sflush_r+0xae>
 8019a0e:	6a21      	ldr	r1, [r4, #32]
 8019a10:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8019a12:	4643      	mov	r3, r8
 8019a14:	463a      	mov	r2, r7
 8019a16:	4628      	mov	r0, r5
 8019a18:	47b0      	blx	r6
 8019a1a:	2800      	cmp	r0, #0
 8019a1c:	dc08      	bgt.n	8019a30 <__sflush_r+0xfc>
 8019a1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019a22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019a26:	81a3      	strh	r3, [r4, #12]
 8019a28:	f04f 30ff 	mov.w	r0, #4294967295
 8019a2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019a30:	4407      	add	r7, r0
 8019a32:	eba8 0800 	sub.w	r8, r8, r0
 8019a36:	e7e7      	b.n	8019a08 <__sflush_r+0xd4>
 8019a38:	20400001 	.word	0x20400001

08019a3c <_fflush_r>:
 8019a3c:	b538      	push	{r3, r4, r5, lr}
 8019a3e:	690b      	ldr	r3, [r1, #16]
 8019a40:	4605      	mov	r5, r0
 8019a42:	460c      	mov	r4, r1
 8019a44:	b913      	cbnz	r3, 8019a4c <_fflush_r+0x10>
 8019a46:	2500      	movs	r5, #0
 8019a48:	4628      	mov	r0, r5
 8019a4a:	bd38      	pop	{r3, r4, r5, pc}
 8019a4c:	b118      	cbz	r0, 8019a56 <_fflush_r+0x1a>
 8019a4e:	6a03      	ldr	r3, [r0, #32]
 8019a50:	b90b      	cbnz	r3, 8019a56 <_fflush_r+0x1a>
 8019a52:	f7fe f885 	bl	8017b60 <__sinit>
 8019a56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019a5a:	2b00      	cmp	r3, #0
 8019a5c:	d0f3      	beq.n	8019a46 <_fflush_r+0xa>
 8019a5e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8019a60:	07d0      	lsls	r0, r2, #31
 8019a62:	d404      	bmi.n	8019a6e <_fflush_r+0x32>
 8019a64:	0599      	lsls	r1, r3, #22
 8019a66:	d402      	bmi.n	8019a6e <_fflush_r+0x32>
 8019a68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8019a6a:	f7fe f9fc 	bl	8017e66 <__retarget_lock_acquire_recursive>
 8019a6e:	4628      	mov	r0, r5
 8019a70:	4621      	mov	r1, r4
 8019a72:	f7ff ff5f 	bl	8019934 <__sflush_r>
 8019a76:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8019a78:	07da      	lsls	r2, r3, #31
 8019a7a:	4605      	mov	r5, r0
 8019a7c:	d4e4      	bmi.n	8019a48 <_fflush_r+0xc>
 8019a7e:	89a3      	ldrh	r3, [r4, #12]
 8019a80:	059b      	lsls	r3, r3, #22
 8019a82:	d4e1      	bmi.n	8019a48 <_fflush_r+0xc>
 8019a84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8019a86:	f7fe f9ef 	bl	8017e68 <__retarget_lock_release_recursive>
 8019a8a:	e7dd      	b.n	8019a48 <_fflush_r+0xc>

08019a8c <fiprintf>:
 8019a8c:	b40e      	push	{r1, r2, r3}
 8019a8e:	b503      	push	{r0, r1, lr}
 8019a90:	4601      	mov	r1, r0
 8019a92:	ab03      	add	r3, sp, #12
 8019a94:	4805      	ldr	r0, [pc, #20]	@ (8019aac <fiprintf+0x20>)
 8019a96:	f853 2b04 	ldr.w	r2, [r3], #4
 8019a9a:	6800      	ldr	r0, [r0, #0]
 8019a9c:	9301      	str	r3, [sp, #4]
 8019a9e:	f7ff fca5 	bl	80193ec <_vfiprintf_r>
 8019aa2:	b002      	add	sp, #8
 8019aa4:	f85d eb04 	ldr.w	lr, [sp], #4
 8019aa8:	b003      	add	sp, #12
 8019aaa:	4770      	bx	lr
 8019aac:	20000a94 	.word	0x20000a94

08019ab0 <__swbuf_r>:
 8019ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019ab2:	460e      	mov	r6, r1
 8019ab4:	4614      	mov	r4, r2
 8019ab6:	4605      	mov	r5, r0
 8019ab8:	b118      	cbz	r0, 8019ac2 <__swbuf_r+0x12>
 8019aba:	6a03      	ldr	r3, [r0, #32]
 8019abc:	b90b      	cbnz	r3, 8019ac2 <__swbuf_r+0x12>
 8019abe:	f7fe f84f 	bl	8017b60 <__sinit>
 8019ac2:	69a3      	ldr	r3, [r4, #24]
 8019ac4:	60a3      	str	r3, [r4, #8]
 8019ac6:	89a3      	ldrh	r3, [r4, #12]
 8019ac8:	071a      	lsls	r2, r3, #28
 8019aca:	d501      	bpl.n	8019ad0 <__swbuf_r+0x20>
 8019acc:	6923      	ldr	r3, [r4, #16]
 8019ace:	b943      	cbnz	r3, 8019ae2 <__swbuf_r+0x32>
 8019ad0:	4621      	mov	r1, r4
 8019ad2:	4628      	mov	r0, r5
 8019ad4:	f000 f82a 	bl	8019b2c <__swsetup_r>
 8019ad8:	b118      	cbz	r0, 8019ae2 <__swbuf_r+0x32>
 8019ada:	f04f 37ff 	mov.w	r7, #4294967295
 8019ade:	4638      	mov	r0, r7
 8019ae0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019ae2:	6823      	ldr	r3, [r4, #0]
 8019ae4:	6922      	ldr	r2, [r4, #16]
 8019ae6:	1a98      	subs	r0, r3, r2
 8019ae8:	6963      	ldr	r3, [r4, #20]
 8019aea:	b2f6      	uxtb	r6, r6
 8019aec:	4283      	cmp	r3, r0
 8019aee:	4637      	mov	r7, r6
 8019af0:	dc05      	bgt.n	8019afe <__swbuf_r+0x4e>
 8019af2:	4621      	mov	r1, r4
 8019af4:	4628      	mov	r0, r5
 8019af6:	f7ff ffa1 	bl	8019a3c <_fflush_r>
 8019afa:	2800      	cmp	r0, #0
 8019afc:	d1ed      	bne.n	8019ada <__swbuf_r+0x2a>
 8019afe:	68a3      	ldr	r3, [r4, #8]
 8019b00:	3b01      	subs	r3, #1
 8019b02:	60a3      	str	r3, [r4, #8]
 8019b04:	6823      	ldr	r3, [r4, #0]
 8019b06:	1c5a      	adds	r2, r3, #1
 8019b08:	6022      	str	r2, [r4, #0]
 8019b0a:	701e      	strb	r6, [r3, #0]
 8019b0c:	6962      	ldr	r2, [r4, #20]
 8019b0e:	1c43      	adds	r3, r0, #1
 8019b10:	429a      	cmp	r2, r3
 8019b12:	d004      	beq.n	8019b1e <__swbuf_r+0x6e>
 8019b14:	89a3      	ldrh	r3, [r4, #12]
 8019b16:	07db      	lsls	r3, r3, #31
 8019b18:	d5e1      	bpl.n	8019ade <__swbuf_r+0x2e>
 8019b1a:	2e0a      	cmp	r6, #10
 8019b1c:	d1df      	bne.n	8019ade <__swbuf_r+0x2e>
 8019b1e:	4621      	mov	r1, r4
 8019b20:	4628      	mov	r0, r5
 8019b22:	f7ff ff8b 	bl	8019a3c <_fflush_r>
 8019b26:	2800      	cmp	r0, #0
 8019b28:	d0d9      	beq.n	8019ade <__swbuf_r+0x2e>
 8019b2a:	e7d6      	b.n	8019ada <__swbuf_r+0x2a>

08019b2c <__swsetup_r>:
 8019b2c:	b538      	push	{r3, r4, r5, lr}
 8019b2e:	4b29      	ldr	r3, [pc, #164]	@ (8019bd4 <__swsetup_r+0xa8>)
 8019b30:	4605      	mov	r5, r0
 8019b32:	6818      	ldr	r0, [r3, #0]
 8019b34:	460c      	mov	r4, r1
 8019b36:	b118      	cbz	r0, 8019b40 <__swsetup_r+0x14>
 8019b38:	6a03      	ldr	r3, [r0, #32]
 8019b3a:	b90b      	cbnz	r3, 8019b40 <__swsetup_r+0x14>
 8019b3c:	f7fe f810 	bl	8017b60 <__sinit>
 8019b40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019b44:	0719      	lsls	r1, r3, #28
 8019b46:	d422      	bmi.n	8019b8e <__swsetup_r+0x62>
 8019b48:	06da      	lsls	r2, r3, #27
 8019b4a:	d407      	bmi.n	8019b5c <__swsetup_r+0x30>
 8019b4c:	2209      	movs	r2, #9
 8019b4e:	602a      	str	r2, [r5, #0]
 8019b50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019b54:	81a3      	strh	r3, [r4, #12]
 8019b56:	f04f 30ff 	mov.w	r0, #4294967295
 8019b5a:	e033      	b.n	8019bc4 <__swsetup_r+0x98>
 8019b5c:	0758      	lsls	r0, r3, #29
 8019b5e:	d512      	bpl.n	8019b86 <__swsetup_r+0x5a>
 8019b60:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8019b62:	b141      	cbz	r1, 8019b76 <__swsetup_r+0x4a>
 8019b64:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8019b68:	4299      	cmp	r1, r3
 8019b6a:	d002      	beq.n	8019b72 <__swsetup_r+0x46>
 8019b6c:	4628      	mov	r0, r5
 8019b6e:	f7fe f9b9 	bl	8017ee4 <_free_r>
 8019b72:	2300      	movs	r3, #0
 8019b74:	6363      	str	r3, [r4, #52]	@ 0x34
 8019b76:	89a3      	ldrh	r3, [r4, #12]
 8019b78:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8019b7c:	81a3      	strh	r3, [r4, #12]
 8019b7e:	2300      	movs	r3, #0
 8019b80:	6063      	str	r3, [r4, #4]
 8019b82:	6923      	ldr	r3, [r4, #16]
 8019b84:	6023      	str	r3, [r4, #0]
 8019b86:	89a3      	ldrh	r3, [r4, #12]
 8019b88:	f043 0308 	orr.w	r3, r3, #8
 8019b8c:	81a3      	strh	r3, [r4, #12]
 8019b8e:	6923      	ldr	r3, [r4, #16]
 8019b90:	b94b      	cbnz	r3, 8019ba6 <__swsetup_r+0x7a>
 8019b92:	89a3      	ldrh	r3, [r4, #12]
 8019b94:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8019b98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8019b9c:	d003      	beq.n	8019ba6 <__swsetup_r+0x7a>
 8019b9e:	4621      	mov	r1, r4
 8019ba0:	4628      	mov	r0, r5
 8019ba2:	f000 f898 	bl	8019cd6 <__smakebuf_r>
 8019ba6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019baa:	f013 0201 	ands.w	r2, r3, #1
 8019bae:	d00a      	beq.n	8019bc6 <__swsetup_r+0x9a>
 8019bb0:	2200      	movs	r2, #0
 8019bb2:	60a2      	str	r2, [r4, #8]
 8019bb4:	6962      	ldr	r2, [r4, #20]
 8019bb6:	4252      	negs	r2, r2
 8019bb8:	61a2      	str	r2, [r4, #24]
 8019bba:	6922      	ldr	r2, [r4, #16]
 8019bbc:	b942      	cbnz	r2, 8019bd0 <__swsetup_r+0xa4>
 8019bbe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8019bc2:	d1c5      	bne.n	8019b50 <__swsetup_r+0x24>
 8019bc4:	bd38      	pop	{r3, r4, r5, pc}
 8019bc6:	0799      	lsls	r1, r3, #30
 8019bc8:	bf58      	it	pl
 8019bca:	6962      	ldrpl	r2, [r4, #20]
 8019bcc:	60a2      	str	r2, [r4, #8]
 8019bce:	e7f4      	b.n	8019bba <__swsetup_r+0x8e>
 8019bd0:	2000      	movs	r0, #0
 8019bd2:	e7f7      	b.n	8019bc4 <__swsetup_r+0x98>
 8019bd4:	20000a94 	.word	0x20000a94

08019bd8 <_sbrk_r>:
 8019bd8:	b538      	push	{r3, r4, r5, lr}
 8019bda:	4d06      	ldr	r5, [pc, #24]	@ (8019bf4 <_sbrk_r+0x1c>)
 8019bdc:	2300      	movs	r3, #0
 8019bde:	4604      	mov	r4, r0
 8019be0:	4608      	mov	r0, r1
 8019be2:	602b      	str	r3, [r5, #0]
 8019be4:	f7ec ffdc 	bl	8006ba0 <_sbrk>
 8019be8:	1c43      	adds	r3, r0, #1
 8019bea:	d102      	bne.n	8019bf2 <_sbrk_r+0x1a>
 8019bec:	682b      	ldr	r3, [r5, #0]
 8019bee:	b103      	cbz	r3, 8019bf2 <_sbrk_r+0x1a>
 8019bf0:	6023      	str	r3, [r4, #0]
 8019bf2:	bd38      	pop	{r3, r4, r5, pc}
 8019bf4:	200154e4 	.word	0x200154e4

08019bf8 <abort>:
 8019bf8:	b508      	push	{r3, lr}
 8019bfa:	2006      	movs	r0, #6
 8019bfc:	f000 f8d0 	bl	8019da0 <raise>
 8019c00:	2001      	movs	r0, #1
 8019c02:	f7ec ff55 	bl	8006ab0 <_exit>

08019c06 <_calloc_r>:
 8019c06:	b570      	push	{r4, r5, r6, lr}
 8019c08:	fba1 5402 	umull	r5, r4, r1, r2
 8019c0c:	b934      	cbnz	r4, 8019c1c <_calloc_r+0x16>
 8019c0e:	4629      	mov	r1, r5
 8019c10:	f7fe fd16 	bl	8018640 <_malloc_r>
 8019c14:	4606      	mov	r6, r0
 8019c16:	b928      	cbnz	r0, 8019c24 <_calloc_r+0x1e>
 8019c18:	4630      	mov	r0, r6
 8019c1a:	bd70      	pop	{r4, r5, r6, pc}
 8019c1c:	220c      	movs	r2, #12
 8019c1e:	6002      	str	r2, [r0, #0]
 8019c20:	2600      	movs	r6, #0
 8019c22:	e7f9      	b.n	8019c18 <_calloc_r+0x12>
 8019c24:	462a      	mov	r2, r5
 8019c26:	4621      	mov	r1, r4
 8019c28:	f7fe f871 	bl	8017d0e <memset>
 8019c2c:	e7f4      	b.n	8019c18 <_calloc_r+0x12>

08019c2e <_realloc_r>:
 8019c2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019c32:	4607      	mov	r7, r0
 8019c34:	4614      	mov	r4, r2
 8019c36:	460d      	mov	r5, r1
 8019c38:	b921      	cbnz	r1, 8019c44 <_realloc_r+0x16>
 8019c3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019c3e:	4611      	mov	r1, r2
 8019c40:	f7fe bcfe 	b.w	8018640 <_malloc_r>
 8019c44:	b92a      	cbnz	r2, 8019c52 <_realloc_r+0x24>
 8019c46:	f7fe f94d 	bl	8017ee4 <_free_r>
 8019c4a:	4625      	mov	r5, r4
 8019c4c:	4628      	mov	r0, r5
 8019c4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019c52:	f000 f8e3 	bl	8019e1c <_malloc_usable_size_r>
 8019c56:	4284      	cmp	r4, r0
 8019c58:	4606      	mov	r6, r0
 8019c5a:	d802      	bhi.n	8019c62 <_realloc_r+0x34>
 8019c5c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8019c60:	d8f4      	bhi.n	8019c4c <_realloc_r+0x1e>
 8019c62:	4621      	mov	r1, r4
 8019c64:	4638      	mov	r0, r7
 8019c66:	f7fe fceb 	bl	8018640 <_malloc_r>
 8019c6a:	4680      	mov	r8, r0
 8019c6c:	b908      	cbnz	r0, 8019c72 <_realloc_r+0x44>
 8019c6e:	4645      	mov	r5, r8
 8019c70:	e7ec      	b.n	8019c4c <_realloc_r+0x1e>
 8019c72:	42b4      	cmp	r4, r6
 8019c74:	4622      	mov	r2, r4
 8019c76:	4629      	mov	r1, r5
 8019c78:	bf28      	it	cs
 8019c7a:	4632      	movcs	r2, r6
 8019c7c:	f7fe f8fd 	bl	8017e7a <memcpy>
 8019c80:	4629      	mov	r1, r5
 8019c82:	4638      	mov	r0, r7
 8019c84:	f7fe f92e 	bl	8017ee4 <_free_r>
 8019c88:	e7f1      	b.n	8019c6e <_realloc_r+0x40>

08019c8a <__swhatbuf_r>:
 8019c8a:	b570      	push	{r4, r5, r6, lr}
 8019c8c:	460c      	mov	r4, r1
 8019c8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019c92:	2900      	cmp	r1, #0
 8019c94:	b096      	sub	sp, #88	@ 0x58
 8019c96:	4615      	mov	r5, r2
 8019c98:	461e      	mov	r6, r3
 8019c9a:	da0d      	bge.n	8019cb8 <__swhatbuf_r+0x2e>
 8019c9c:	89a3      	ldrh	r3, [r4, #12]
 8019c9e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8019ca2:	f04f 0100 	mov.w	r1, #0
 8019ca6:	bf14      	ite	ne
 8019ca8:	2340      	movne	r3, #64	@ 0x40
 8019caa:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8019cae:	2000      	movs	r0, #0
 8019cb0:	6031      	str	r1, [r6, #0]
 8019cb2:	602b      	str	r3, [r5, #0]
 8019cb4:	b016      	add	sp, #88	@ 0x58
 8019cb6:	bd70      	pop	{r4, r5, r6, pc}
 8019cb8:	466a      	mov	r2, sp
 8019cba:	f000 f879 	bl	8019db0 <_fstat_r>
 8019cbe:	2800      	cmp	r0, #0
 8019cc0:	dbec      	blt.n	8019c9c <__swhatbuf_r+0x12>
 8019cc2:	9901      	ldr	r1, [sp, #4]
 8019cc4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8019cc8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8019ccc:	4259      	negs	r1, r3
 8019cce:	4159      	adcs	r1, r3
 8019cd0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8019cd4:	e7eb      	b.n	8019cae <__swhatbuf_r+0x24>

08019cd6 <__smakebuf_r>:
 8019cd6:	898b      	ldrh	r3, [r1, #12]
 8019cd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019cda:	079d      	lsls	r5, r3, #30
 8019cdc:	4606      	mov	r6, r0
 8019cde:	460c      	mov	r4, r1
 8019ce0:	d507      	bpl.n	8019cf2 <__smakebuf_r+0x1c>
 8019ce2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8019ce6:	6023      	str	r3, [r4, #0]
 8019ce8:	6123      	str	r3, [r4, #16]
 8019cea:	2301      	movs	r3, #1
 8019cec:	6163      	str	r3, [r4, #20]
 8019cee:	b003      	add	sp, #12
 8019cf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019cf2:	ab01      	add	r3, sp, #4
 8019cf4:	466a      	mov	r2, sp
 8019cf6:	f7ff ffc8 	bl	8019c8a <__swhatbuf_r>
 8019cfa:	9f00      	ldr	r7, [sp, #0]
 8019cfc:	4605      	mov	r5, r0
 8019cfe:	4639      	mov	r1, r7
 8019d00:	4630      	mov	r0, r6
 8019d02:	f7fe fc9d 	bl	8018640 <_malloc_r>
 8019d06:	b948      	cbnz	r0, 8019d1c <__smakebuf_r+0x46>
 8019d08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019d0c:	059a      	lsls	r2, r3, #22
 8019d0e:	d4ee      	bmi.n	8019cee <__smakebuf_r+0x18>
 8019d10:	f023 0303 	bic.w	r3, r3, #3
 8019d14:	f043 0302 	orr.w	r3, r3, #2
 8019d18:	81a3      	strh	r3, [r4, #12]
 8019d1a:	e7e2      	b.n	8019ce2 <__smakebuf_r+0xc>
 8019d1c:	89a3      	ldrh	r3, [r4, #12]
 8019d1e:	6020      	str	r0, [r4, #0]
 8019d20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019d24:	81a3      	strh	r3, [r4, #12]
 8019d26:	9b01      	ldr	r3, [sp, #4]
 8019d28:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8019d2c:	b15b      	cbz	r3, 8019d46 <__smakebuf_r+0x70>
 8019d2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019d32:	4630      	mov	r0, r6
 8019d34:	f000 f84e 	bl	8019dd4 <_isatty_r>
 8019d38:	b128      	cbz	r0, 8019d46 <__smakebuf_r+0x70>
 8019d3a:	89a3      	ldrh	r3, [r4, #12]
 8019d3c:	f023 0303 	bic.w	r3, r3, #3
 8019d40:	f043 0301 	orr.w	r3, r3, #1
 8019d44:	81a3      	strh	r3, [r4, #12]
 8019d46:	89a3      	ldrh	r3, [r4, #12]
 8019d48:	431d      	orrs	r5, r3
 8019d4a:	81a5      	strh	r5, [r4, #12]
 8019d4c:	e7cf      	b.n	8019cee <__smakebuf_r+0x18>

08019d4e <_raise_r>:
 8019d4e:	291f      	cmp	r1, #31
 8019d50:	b538      	push	{r3, r4, r5, lr}
 8019d52:	4605      	mov	r5, r0
 8019d54:	460c      	mov	r4, r1
 8019d56:	d904      	bls.n	8019d62 <_raise_r+0x14>
 8019d58:	2316      	movs	r3, #22
 8019d5a:	6003      	str	r3, [r0, #0]
 8019d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8019d60:	bd38      	pop	{r3, r4, r5, pc}
 8019d62:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8019d64:	b112      	cbz	r2, 8019d6c <_raise_r+0x1e>
 8019d66:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019d6a:	b94b      	cbnz	r3, 8019d80 <_raise_r+0x32>
 8019d6c:	4628      	mov	r0, r5
 8019d6e:	f000 f853 	bl	8019e18 <_getpid_r>
 8019d72:	4622      	mov	r2, r4
 8019d74:	4601      	mov	r1, r0
 8019d76:	4628      	mov	r0, r5
 8019d78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019d7c:	f000 b83a 	b.w	8019df4 <_kill_r>
 8019d80:	2b01      	cmp	r3, #1
 8019d82:	d00a      	beq.n	8019d9a <_raise_r+0x4c>
 8019d84:	1c59      	adds	r1, r3, #1
 8019d86:	d103      	bne.n	8019d90 <_raise_r+0x42>
 8019d88:	2316      	movs	r3, #22
 8019d8a:	6003      	str	r3, [r0, #0]
 8019d8c:	2001      	movs	r0, #1
 8019d8e:	e7e7      	b.n	8019d60 <_raise_r+0x12>
 8019d90:	2100      	movs	r1, #0
 8019d92:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8019d96:	4620      	mov	r0, r4
 8019d98:	4798      	blx	r3
 8019d9a:	2000      	movs	r0, #0
 8019d9c:	e7e0      	b.n	8019d60 <_raise_r+0x12>
	...

08019da0 <raise>:
 8019da0:	4b02      	ldr	r3, [pc, #8]	@ (8019dac <raise+0xc>)
 8019da2:	4601      	mov	r1, r0
 8019da4:	6818      	ldr	r0, [r3, #0]
 8019da6:	f7ff bfd2 	b.w	8019d4e <_raise_r>
 8019daa:	bf00      	nop
 8019dac:	20000a94 	.word	0x20000a94

08019db0 <_fstat_r>:
 8019db0:	b538      	push	{r3, r4, r5, lr}
 8019db2:	4d07      	ldr	r5, [pc, #28]	@ (8019dd0 <_fstat_r+0x20>)
 8019db4:	2300      	movs	r3, #0
 8019db6:	4604      	mov	r4, r0
 8019db8:	4608      	mov	r0, r1
 8019dba:	4611      	mov	r1, r2
 8019dbc:	602b      	str	r3, [r5, #0]
 8019dbe:	f7ec fec7 	bl	8006b50 <_fstat>
 8019dc2:	1c43      	adds	r3, r0, #1
 8019dc4:	d102      	bne.n	8019dcc <_fstat_r+0x1c>
 8019dc6:	682b      	ldr	r3, [r5, #0]
 8019dc8:	b103      	cbz	r3, 8019dcc <_fstat_r+0x1c>
 8019dca:	6023      	str	r3, [r4, #0]
 8019dcc:	bd38      	pop	{r3, r4, r5, pc}
 8019dce:	bf00      	nop
 8019dd0:	200154e4 	.word	0x200154e4

08019dd4 <_isatty_r>:
 8019dd4:	b538      	push	{r3, r4, r5, lr}
 8019dd6:	4d06      	ldr	r5, [pc, #24]	@ (8019df0 <_isatty_r+0x1c>)
 8019dd8:	2300      	movs	r3, #0
 8019dda:	4604      	mov	r4, r0
 8019ddc:	4608      	mov	r0, r1
 8019dde:	602b      	str	r3, [r5, #0]
 8019de0:	f7ec fec6 	bl	8006b70 <_isatty>
 8019de4:	1c43      	adds	r3, r0, #1
 8019de6:	d102      	bne.n	8019dee <_isatty_r+0x1a>
 8019de8:	682b      	ldr	r3, [r5, #0]
 8019dea:	b103      	cbz	r3, 8019dee <_isatty_r+0x1a>
 8019dec:	6023      	str	r3, [r4, #0]
 8019dee:	bd38      	pop	{r3, r4, r5, pc}
 8019df0:	200154e4 	.word	0x200154e4

08019df4 <_kill_r>:
 8019df4:	b538      	push	{r3, r4, r5, lr}
 8019df6:	4d07      	ldr	r5, [pc, #28]	@ (8019e14 <_kill_r+0x20>)
 8019df8:	2300      	movs	r3, #0
 8019dfa:	4604      	mov	r4, r0
 8019dfc:	4608      	mov	r0, r1
 8019dfe:	4611      	mov	r1, r2
 8019e00:	602b      	str	r3, [r5, #0]
 8019e02:	f7ec fe43 	bl	8006a8c <_kill>
 8019e06:	1c43      	adds	r3, r0, #1
 8019e08:	d102      	bne.n	8019e10 <_kill_r+0x1c>
 8019e0a:	682b      	ldr	r3, [r5, #0]
 8019e0c:	b103      	cbz	r3, 8019e10 <_kill_r+0x1c>
 8019e0e:	6023      	str	r3, [r4, #0]
 8019e10:	bd38      	pop	{r3, r4, r5, pc}
 8019e12:	bf00      	nop
 8019e14:	200154e4 	.word	0x200154e4

08019e18 <_getpid_r>:
 8019e18:	f7ec be30 	b.w	8006a7c <_getpid>

08019e1c <_malloc_usable_size_r>:
 8019e1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019e20:	1f18      	subs	r0, r3, #4
 8019e22:	2b00      	cmp	r3, #0
 8019e24:	bfbc      	itt	lt
 8019e26:	580b      	ldrlt	r3, [r1, r0]
 8019e28:	18c0      	addlt	r0, r0, r3
 8019e2a:	4770      	bx	lr

08019e2c <sqrt>:
 8019e2c:	b538      	push	{r3, r4, r5, lr}
 8019e2e:	ed2d 8b02 	vpush	{d8}
 8019e32:	ec55 4b10 	vmov	r4, r5, d0
 8019e36:	f000 fa15 	bl	801a264 <__ieee754_sqrt>
 8019e3a:	4622      	mov	r2, r4
 8019e3c:	462b      	mov	r3, r5
 8019e3e:	4620      	mov	r0, r4
 8019e40:	4629      	mov	r1, r5
 8019e42:	eeb0 8a40 	vmov.f32	s16, s0
 8019e46:	eef0 8a60 	vmov.f32	s17, s1
 8019e4a:	f7e6 fe7f 	bl	8000b4c <__aeabi_dcmpun>
 8019e4e:	b990      	cbnz	r0, 8019e76 <sqrt+0x4a>
 8019e50:	2200      	movs	r2, #0
 8019e52:	2300      	movs	r3, #0
 8019e54:	4620      	mov	r0, r4
 8019e56:	4629      	mov	r1, r5
 8019e58:	f7e6 fe50 	bl	8000afc <__aeabi_dcmplt>
 8019e5c:	b158      	cbz	r0, 8019e76 <sqrt+0x4a>
 8019e5e:	f7fd ffd7 	bl	8017e10 <__errno>
 8019e62:	2321      	movs	r3, #33	@ 0x21
 8019e64:	6003      	str	r3, [r0, #0]
 8019e66:	2200      	movs	r2, #0
 8019e68:	2300      	movs	r3, #0
 8019e6a:	4610      	mov	r0, r2
 8019e6c:	4619      	mov	r1, r3
 8019e6e:	f7e6 fcfd 	bl	800086c <__aeabi_ddiv>
 8019e72:	ec41 0b18 	vmov	d8, r0, r1
 8019e76:	eeb0 0a48 	vmov.f32	s0, s16
 8019e7a:	eef0 0a68 	vmov.f32	s1, s17
 8019e7e:	ecbd 8b02 	vpop	{d8}
 8019e82:	bd38      	pop	{r3, r4, r5, pc}
 8019e84:	0000      	movs	r0, r0
	...

08019e88 <atan>:
 8019e88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e8c:	ec55 4b10 	vmov	r4, r5, d0
 8019e90:	4bbf      	ldr	r3, [pc, #764]	@ (801a190 <atan+0x308>)
 8019e92:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8019e96:	429e      	cmp	r6, r3
 8019e98:	46ab      	mov	fp, r5
 8019e9a:	d918      	bls.n	8019ece <atan+0x46>
 8019e9c:	4bbd      	ldr	r3, [pc, #756]	@ (801a194 <atan+0x30c>)
 8019e9e:	429e      	cmp	r6, r3
 8019ea0:	d801      	bhi.n	8019ea6 <atan+0x1e>
 8019ea2:	d109      	bne.n	8019eb8 <atan+0x30>
 8019ea4:	b144      	cbz	r4, 8019eb8 <atan+0x30>
 8019ea6:	4622      	mov	r2, r4
 8019ea8:	462b      	mov	r3, r5
 8019eaa:	4620      	mov	r0, r4
 8019eac:	4629      	mov	r1, r5
 8019eae:	f7e6 f9fd 	bl	80002ac <__adddf3>
 8019eb2:	4604      	mov	r4, r0
 8019eb4:	460d      	mov	r5, r1
 8019eb6:	e006      	b.n	8019ec6 <atan+0x3e>
 8019eb8:	f1bb 0f00 	cmp.w	fp, #0
 8019ebc:	f340 812b 	ble.w	801a116 <atan+0x28e>
 8019ec0:	a597      	add	r5, pc, #604	@ (adr r5, 801a120 <atan+0x298>)
 8019ec2:	e9d5 4500 	ldrd	r4, r5, [r5]
 8019ec6:	ec45 4b10 	vmov	d0, r4, r5
 8019eca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019ece:	4bb2      	ldr	r3, [pc, #712]	@ (801a198 <atan+0x310>)
 8019ed0:	429e      	cmp	r6, r3
 8019ed2:	d813      	bhi.n	8019efc <atan+0x74>
 8019ed4:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8019ed8:	429e      	cmp	r6, r3
 8019eda:	d80c      	bhi.n	8019ef6 <atan+0x6e>
 8019edc:	a392      	add	r3, pc, #584	@ (adr r3, 801a128 <atan+0x2a0>)
 8019ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ee2:	4620      	mov	r0, r4
 8019ee4:	4629      	mov	r1, r5
 8019ee6:	f7e6 f9e1 	bl	80002ac <__adddf3>
 8019eea:	4bac      	ldr	r3, [pc, #688]	@ (801a19c <atan+0x314>)
 8019eec:	2200      	movs	r2, #0
 8019eee:	f7e6 fe23 	bl	8000b38 <__aeabi_dcmpgt>
 8019ef2:	2800      	cmp	r0, #0
 8019ef4:	d1e7      	bne.n	8019ec6 <atan+0x3e>
 8019ef6:	f04f 3aff 	mov.w	sl, #4294967295
 8019efa:	e029      	b.n	8019f50 <atan+0xc8>
 8019efc:	f000 f95c 	bl	801a1b8 <fabs>
 8019f00:	4ba7      	ldr	r3, [pc, #668]	@ (801a1a0 <atan+0x318>)
 8019f02:	429e      	cmp	r6, r3
 8019f04:	ec55 4b10 	vmov	r4, r5, d0
 8019f08:	f200 80bc 	bhi.w	801a084 <atan+0x1fc>
 8019f0c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8019f10:	429e      	cmp	r6, r3
 8019f12:	f200 809e 	bhi.w	801a052 <atan+0x1ca>
 8019f16:	4622      	mov	r2, r4
 8019f18:	462b      	mov	r3, r5
 8019f1a:	4620      	mov	r0, r4
 8019f1c:	4629      	mov	r1, r5
 8019f1e:	f7e6 f9c5 	bl	80002ac <__adddf3>
 8019f22:	4b9e      	ldr	r3, [pc, #632]	@ (801a19c <atan+0x314>)
 8019f24:	2200      	movs	r2, #0
 8019f26:	f7e6 f9bf 	bl	80002a8 <__aeabi_dsub>
 8019f2a:	2200      	movs	r2, #0
 8019f2c:	4606      	mov	r6, r0
 8019f2e:	460f      	mov	r7, r1
 8019f30:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8019f34:	4620      	mov	r0, r4
 8019f36:	4629      	mov	r1, r5
 8019f38:	f7e6 f9b8 	bl	80002ac <__adddf3>
 8019f3c:	4602      	mov	r2, r0
 8019f3e:	460b      	mov	r3, r1
 8019f40:	4630      	mov	r0, r6
 8019f42:	4639      	mov	r1, r7
 8019f44:	f7e6 fc92 	bl	800086c <__aeabi_ddiv>
 8019f48:	f04f 0a00 	mov.w	sl, #0
 8019f4c:	4604      	mov	r4, r0
 8019f4e:	460d      	mov	r5, r1
 8019f50:	4622      	mov	r2, r4
 8019f52:	462b      	mov	r3, r5
 8019f54:	4620      	mov	r0, r4
 8019f56:	4629      	mov	r1, r5
 8019f58:	f7e6 fb5e 	bl	8000618 <__aeabi_dmul>
 8019f5c:	4602      	mov	r2, r0
 8019f5e:	460b      	mov	r3, r1
 8019f60:	4680      	mov	r8, r0
 8019f62:	4689      	mov	r9, r1
 8019f64:	f7e6 fb58 	bl	8000618 <__aeabi_dmul>
 8019f68:	a371      	add	r3, pc, #452	@ (adr r3, 801a130 <atan+0x2a8>)
 8019f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f6e:	4606      	mov	r6, r0
 8019f70:	460f      	mov	r7, r1
 8019f72:	f7e6 fb51 	bl	8000618 <__aeabi_dmul>
 8019f76:	a370      	add	r3, pc, #448	@ (adr r3, 801a138 <atan+0x2b0>)
 8019f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f7c:	f7e6 f996 	bl	80002ac <__adddf3>
 8019f80:	4632      	mov	r2, r6
 8019f82:	463b      	mov	r3, r7
 8019f84:	f7e6 fb48 	bl	8000618 <__aeabi_dmul>
 8019f88:	a36d      	add	r3, pc, #436	@ (adr r3, 801a140 <atan+0x2b8>)
 8019f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f8e:	f7e6 f98d 	bl	80002ac <__adddf3>
 8019f92:	4632      	mov	r2, r6
 8019f94:	463b      	mov	r3, r7
 8019f96:	f7e6 fb3f 	bl	8000618 <__aeabi_dmul>
 8019f9a:	a36b      	add	r3, pc, #428	@ (adr r3, 801a148 <atan+0x2c0>)
 8019f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019fa0:	f7e6 f984 	bl	80002ac <__adddf3>
 8019fa4:	4632      	mov	r2, r6
 8019fa6:	463b      	mov	r3, r7
 8019fa8:	f7e6 fb36 	bl	8000618 <__aeabi_dmul>
 8019fac:	a368      	add	r3, pc, #416	@ (adr r3, 801a150 <atan+0x2c8>)
 8019fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019fb2:	f7e6 f97b 	bl	80002ac <__adddf3>
 8019fb6:	4632      	mov	r2, r6
 8019fb8:	463b      	mov	r3, r7
 8019fba:	f7e6 fb2d 	bl	8000618 <__aeabi_dmul>
 8019fbe:	a366      	add	r3, pc, #408	@ (adr r3, 801a158 <atan+0x2d0>)
 8019fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019fc4:	f7e6 f972 	bl	80002ac <__adddf3>
 8019fc8:	4642      	mov	r2, r8
 8019fca:	464b      	mov	r3, r9
 8019fcc:	f7e6 fb24 	bl	8000618 <__aeabi_dmul>
 8019fd0:	a363      	add	r3, pc, #396	@ (adr r3, 801a160 <atan+0x2d8>)
 8019fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019fd6:	4680      	mov	r8, r0
 8019fd8:	4689      	mov	r9, r1
 8019fda:	4630      	mov	r0, r6
 8019fdc:	4639      	mov	r1, r7
 8019fde:	f7e6 fb1b 	bl	8000618 <__aeabi_dmul>
 8019fe2:	a361      	add	r3, pc, #388	@ (adr r3, 801a168 <atan+0x2e0>)
 8019fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019fe8:	f7e6 f95e 	bl	80002a8 <__aeabi_dsub>
 8019fec:	4632      	mov	r2, r6
 8019fee:	463b      	mov	r3, r7
 8019ff0:	f7e6 fb12 	bl	8000618 <__aeabi_dmul>
 8019ff4:	a35e      	add	r3, pc, #376	@ (adr r3, 801a170 <atan+0x2e8>)
 8019ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ffa:	f7e6 f955 	bl	80002a8 <__aeabi_dsub>
 8019ffe:	4632      	mov	r2, r6
 801a000:	463b      	mov	r3, r7
 801a002:	f7e6 fb09 	bl	8000618 <__aeabi_dmul>
 801a006:	a35c      	add	r3, pc, #368	@ (adr r3, 801a178 <atan+0x2f0>)
 801a008:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a00c:	f7e6 f94c 	bl	80002a8 <__aeabi_dsub>
 801a010:	4632      	mov	r2, r6
 801a012:	463b      	mov	r3, r7
 801a014:	f7e6 fb00 	bl	8000618 <__aeabi_dmul>
 801a018:	a359      	add	r3, pc, #356	@ (adr r3, 801a180 <atan+0x2f8>)
 801a01a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a01e:	f7e6 f943 	bl	80002a8 <__aeabi_dsub>
 801a022:	4632      	mov	r2, r6
 801a024:	463b      	mov	r3, r7
 801a026:	f7e6 faf7 	bl	8000618 <__aeabi_dmul>
 801a02a:	4602      	mov	r2, r0
 801a02c:	460b      	mov	r3, r1
 801a02e:	4640      	mov	r0, r8
 801a030:	4649      	mov	r1, r9
 801a032:	f7e6 f93b 	bl	80002ac <__adddf3>
 801a036:	4622      	mov	r2, r4
 801a038:	462b      	mov	r3, r5
 801a03a:	f7e6 faed 	bl	8000618 <__aeabi_dmul>
 801a03e:	f1ba 3fff 	cmp.w	sl, #4294967295
 801a042:	4602      	mov	r2, r0
 801a044:	460b      	mov	r3, r1
 801a046:	d148      	bne.n	801a0da <atan+0x252>
 801a048:	4620      	mov	r0, r4
 801a04a:	4629      	mov	r1, r5
 801a04c:	f7e6 f92c 	bl	80002a8 <__aeabi_dsub>
 801a050:	e72f      	b.n	8019eb2 <atan+0x2a>
 801a052:	4b52      	ldr	r3, [pc, #328]	@ (801a19c <atan+0x314>)
 801a054:	2200      	movs	r2, #0
 801a056:	4620      	mov	r0, r4
 801a058:	4629      	mov	r1, r5
 801a05a:	f7e6 f925 	bl	80002a8 <__aeabi_dsub>
 801a05e:	4b4f      	ldr	r3, [pc, #316]	@ (801a19c <atan+0x314>)
 801a060:	4606      	mov	r6, r0
 801a062:	460f      	mov	r7, r1
 801a064:	2200      	movs	r2, #0
 801a066:	4620      	mov	r0, r4
 801a068:	4629      	mov	r1, r5
 801a06a:	f7e6 f91f 	bl	80002ac <__adddf3>
 801a06e:	4602      	mov	r2, r0
 801a070:	460b      	mov	r3, r1
 801a072:	4630      	mov	r0, r6
 801a074:	4639      	mov	r1, r7
 801a076:	f7e6 fbf9 	bl	800086c <__aeabi_ddiv>
 801a07a:	f04f 0a01 	mov.w	sl, #1
 801a07e:	4604      	mov	r4, r0
 801a080:	460d      	mov	r5, r1
 801a082:	e765      	b.n	8019f50 <atan+0xc8>
 801a084:	4b47      	ldr	r3, [pc, #284]	@ (801a1a4 <atan+0x31c>)
 801a086:	429e      	cmp	r6, r3
 801a088:	d21c      	bcs.n	801a0c4 <atan+0x23c>
 801a08a:	4b47      	ldr	r3, [pc, #284]	@ (801a1a8 <atan+0x320>)
 801a08c:	2200      	movs	r2, #0
 801a08e:	4620      	mov	r0, r4
 801a090:	4629      	mov	r1, r5
 801a092:	f7e6 f909 	bl	80002a8 <__aeabi_dsub>
 801a096:	4b44      	ldr	r3, [pc, #272]	@ (801a1a8 <atan+0x320>)
 801a098:	4606      	mov	r6, r0
 801a09a:	460f      	mov	r7, r1
 801a09c:	2200      	movs	r2, #0
 801a09e:	4620      	mov	r0, r4
 801a0a0:	4629      	mov	r1, r5
 801a0a2:	f7e6 fab9 	bl	8000618 <__aeabi_dmul>
 801a0a6:	4b3d      	ldr	r3, [pc, #244]	@ (801a19c <atan+0x314>)
 801a0a8:	2200      	movs	r2, #0
 801a0aa:	f7e6 f8ff 	bl	80002ac <__adddf3>
 801a0ae:	4602      	mov	r2, r0
 801a0b0:	460b      	mov	r3, r1
 801a0b2:	4630      	mov	r0, r6
 801a0b4:	4639      	mov	r1, r7
 801a0b6:	f7e6 fbd9 	bl	800086c <__aeabi_ddiv>
 801a0ba:	f04f 0a02 	mov.w	sl, #2
 801a0be:	4604      	mov	r4, r0
 801a0c0:	460d      	mov	r5, r1
 801a0c2:	e745      	b.n	8019f50 <atan+0xc8>
 801a0c4:	4622      	mov	r2, r4
 801a0c6:	462b      	mov	r3, r5
 801a0c8:	4938      	ldr	r1, [pc, #224]	@ (801a1ac <atan+0x324>)
 801a0ca:	2000      	movs	r0, #0
 801a0cc:	f7e6 fbce 	bl	800086c <__aeabi_ddiv>
 801a0d0:	f04f 0a03 	mov.w	sl, #3
 801a0d4:	4604      	mov	r4, r0
 801a0d6:	460d      	mov	r5, r1
 801a0d8:	e73a      	b.n	8019f50 <atan+0xc8>
 801a0da:	4b35      	ldr	r3, [pc, #212]	@ (801a1b0 <atan+0x328>)
 801a0dc:	4e35      	ldr	r6, [pc, #212]	@ (801a1b4 <atan+0x32c>)
 801a0de:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801a0e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a0e6:	f7e6 f8df 	bl	80002a8 <__aeabi_dsub>
 801a0ea:	4622      	mov	r2, r4
 801a0ec:	462b      	mov	r3, r5
 801a0ee:	f7e6 f8db 	bl	80002a8 <__aeabi_dsub>
 801a0f2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801a0f6:	4602      	mov	r2, r0
 801a0f8:	460b      	mov	r3, r1
 801a0fa:	e9d6 0100 	ldrd	r0, r1, [r6]
 801a0fe:	f7e6 f8d3 	bl	80002a8 <__aeabi_dsub>
 801a102:	f1bb 0f00 	cmp.w	fp, #0
 801a106:	4604      	mov	r4, r0
 801a108:	460d      	mov	r5, r1
 801a10a:	f6bf aedc 	bge.w	8019ec6 <atan+0x3e>
 801a10e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801a112:	461d      	mov	r5, r3
 801a114:	e6d7      	b.n	8019ec6 <atan+0x3e>
 801a116:	a51c      	add	r5, pc, #112	@ (adr r5, 801a188 <atan+0x300>)
 801a118:	e9d5 4500 	ldrd	r4, r5, [r5]
 801a11c:	e6d3      	b.n	8019ec6 <atan+0x3e>
 801a11e:	bf00      	nop
 801a120:	54442d18 	.word	0x54442d18
 801a124:	3ff921fb 	.word	0x3ff921fb
 801a128:	8800759c 	.word	0x8800759c
 801a12c:	7e37e43c 	.word	0x7e37e43c
 801a130:	e322da11 	.word	0xe322da11
 801a134:	3f90ad3a 	.word	0x3f90ad3a
 801a138:	24760deb 	.word	0x24760deb
 801a13c:	3fa97b4b 	.word	0x3fa97b4b
 801a140:	a0d03d51 	.word	0xa0d03d51
 801a144:	3fb10d66 	.word	0x3fb10d66
 801a148:	c54c206e 	.word	0xc54c206e
 801a14c:	3fb745cd 	.word	0x3fb745cd
 801a150:	920083ff 	.word	0x920083ff
 801a154:	3fc24924 	.word	0x3fc24924
 801a158:	5555550d 	.word	0x5555550d
 801a15c:	3fd55555 	.word	0x3fd55555
 801a160:	2c6a6c2f 	.word	0x2c6a6c2f
 801a164:	bfa2b444 	.word	0xbfa2b444
 801a168:	52defd9a 	.word	0x52defd9a
 801a16c:	3fadde2d 	.word	0x3fadde2d
 801a170:	af749a6d 	.word	0xaf749a6d
 801a174:	3fb3b0f2 	.word	0x3fb3b0f2
 801a178:	fe231671 	.word	0xfe231671
 801a17c:	3fbc71c6 	.word	0x3fbc71c6
 801a180:	9998ebc4 	.word	0x9998ebc4
 801a184:	3fc99999 	.word	0x3fc99999
 801a188:	54442d18 	.word	0x54442d18
 801a18c:	bff921fb 	.word	0xbff921fb
 801a190:	440fffff 	.word	0x440fffff
 801a194:	7ff00000 	.word	0x7ff00000
 801a198:	3fdbffff 	.word	0x3fdbffff
 801a19c:	3ff00000 	.word	0x3ff00000
 801a1a0:	3ff2ffff 	.word	0x3ff2ffff
 801a1a4:	40038000 	.word	0x40038000
 801a1a8:	3ff80000 	.word	0x3ff80000
 801a1ac:	bff00000 	.word	0xbff00000
 801a1b0:	08023810 	.word	0x08023810
 801a1b4:	08023830 	.word	0x08023830

0801a1b8 <fabs>:
 801a1b8:	ec51 0b10 	vmov	r0, r1, d0
 801a1bc:	4602      	mov	r2, r0
 801a1be:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801a1c2:	ec43 2b10 	vmov	d0, r2, r3
 801a1c6:	4770      	bx	lr

0801a1c8 <fmax>:
 801a1c8:	b508      	push	{r3, lr}
 801a1ca:	ed2d 8b04 	vpush	{d8-d9}
 801a1ce:	eeb0 8a40 	vmov.f32	s16, s0
 801a1d2:	eef0 8a60 	vmov.f32	s17, s1
 801a1d6:	eeb0 9a41 	vmov.f32	s18, s2
 801a1da:	eef0 9a61 	vmov.f32	s19, s3
 801a1de:	f000 f81d 	bl	801a21c <__fpclassifyd>
 801a1e2:	b950      	cbnz	r0, 801a1fa <fmax+0x32>
 801a1e4:	eeb0 8a49 	vmov.f32	s16, s18
 801a1e8:	eef0 8a69 	vmov.f32	s17, s19
 801a1ec:	eeb0 0a48 	vmov.f32	s0, s16
 801a1f0:	eef0 0a68 	vmov.f32	s1, s17
 801a1f4:	ecbd 8b04 	vpop	{d8-d9}
 801a1f8:	bd08      	pop	{r3, pc}
 801a1fa:	eeb0 0a49 	vmov.f32	s0, s18
 801a1fe:	eef0 0a69 	vmov.f32	s1, s19
 801a202:	f000 f80b 	bl	801a21c <__fpclassifyd>
 801a206:	2800      	cmp	r0, #0
 801a208:	d0f0      	beq.n	801a1ec <fmax+0x24>
 801a20a:	ec53 2b19 	vmov	r2, r3, d9
 801a20e:	ec51 0b18 	vmov	r0, r1, d8
 801a212:	f7e6 fc91 	bl	8000b38 <__aeabi_dcmpgt>
 801a216:	2800      	cmp	r0, #0
 801a218:	d0e4      	beq.n	801a1e4 <fmax+0x1c>
 801a21a:	e7e7      	b.n	801a1ec <fmax+0x24>

0801a21c <__fpclassifyd>:
 801a21c:	ec51 0b10 	vmov	r0, r1, d0
 801a220:	460b      	mov	r3, r1
 801a222:	f031 4100 	bics.w	r1, r1, #2147483648	@ 0x80000000
 801a226:	b510      	push	{r4, lr}
 801a228:	d104      	bne.n	801a234 <__fpclassifyd+0x18>
 801a22a:	2800      	cmp	r0, #0
 801a22c:	bf0c      	ite	eq
 801a22e:	2002      	moveq	r0, #2
 801a230:	2003      	movne	r0, #3
 801a232:	bd10      	pop	{r4, pc}
 801a234:	4a09      	ldr	r2, [pc, #36]	@ (801a25c <__fpclassifyd+0x40>)
 801a236:	f5a1 1480 	sub.w	r4, r1, #1048576	@ 0x100000
 801a23a:	4294      	cmp	r4, r2
 801a23c:	d908      	bls.n	801a250 <__fpclassifyd+0x34>
 801a23e:	4a08      	ldr	r2, [pc, #32]	@ (801a260 <__fpclassifyd+0x44>)
 801a240:	4213      	tst	r3, r2
 801a242:	d007      	beq.n	801a254 <__fpclassifyd+0x38>
 801a244:	4291      	cmp	r1, r2
 801a246:	d107      	bne.n	801a258 <__fpclassifyd+0x3c>
 801a248:	fab0 f080 	clz	r0, r0
 801a24c:	0940      	lsrs	r0, r0, #5
 801a24e:	e7f0      	b.n	801a232 <__fpclassifyd+0x16>
 801a250:	2004      	movs	r0, #4
 801a252:	e7ee      	b.n	801a232 <__fpclassifyd+0x16>
 801a254:	2003      	movs	r0, #3
 801a256:	e7ec      	b.n	801a232 <__fpclassifyd+0x16>
 801a258:	2000      	movs	r0, #0
 801a25a:	e7ea      	b.n	801a232 <__fpclassifyd+0x16>
 801a25c:	7fdfffff 	.word	0x7fdfffff
 801a260:	7ff00000 	.word	0x7ff00000

0801a264 <__ieee754_sqrt>:
 801a264:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a268:	4a66      	ldr	r2, [pc, #408]	@ (801a404 <__ieee754_sqrt+0x1a0>)
 801a26a:	ec55 4b10 	vmov	r4, r5, d0
 801a26e:	43aa      	bics	r2, r5
 801a270:	462b      	mov	r3, r5
 801a272:	4621      	mov	r1, r4
 801a274:	d110      	bne.n	801a298 <__ieee754_sqrt+0x34>
 801a276:	4622      	mov	r2, r4
 801a278:	4620      	mov	r0, r4
 801a27a:	4629      	mov	r1, r5
 801a27c:	f7e6 f9cc 	bl	8000618 <__aeabi_dmul>
 801a280:	4602      	mov	r2, r0
 801a282:	460b      	mov	r3, r1
 801a284:	4620      	mov	r0, r4
 801a286:	4629      	mov	r1, r5
 801a288:	f7e6 f810 	bl	80002ac <__adddf3>
 801a28c:	4604      	mov	r4, r0
 801a28e:	460d      	mov	r5, r1
 801a290:	ec45 4b10 	vmov	d0, r4, r5
 801a294:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a298:	2d00      	cmp	r5, #0
 801a29a:	dc0e      	bgt.n	801a2ba <__ieee754_sqrt+0x56>
 801a29c:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 801a2a0:	4322      	orrs	r2, r4
 801a2a2:	d0f5      	beq.n	801a290 <__ieee754_sqrt+0x2c>
 801a2a4:	b19d      	cbz	r5, 801a2ce <__ieee754_sqrt+0x6a>
 801a2a6:	4622      	mov	r2, r4
 801a2a8:	4620      	mov	r0, r4
 801a2aa:	4629      	mov	r1, r5
 801a2ac:	f7e5 fffc 	bl	80002a8 <__aeabi_dsub>
 801a2b0:	4602      	mov	r2, r0
 801a2b2:	460b      	mov	r3, r1
 801a2b4:	f7e6 fada 	bl	800086c <__aeabi_ddiv>
 801a2b8:	e7e8      	b.n	801a28c <__ieee754_sqrt+0x28>
 801a2ba:	152a      	asrs	r2, r5, #20
 801a2bc:	d115      	bne.n	801a2ea <__ieee754_sqrt+0x86>
 801a2be:	2000      	movs	r0, #0
 801a2c0:	e009      	b.n	801a2d6 <__ieee754_sqrt+0x72>
 801a2c2:	0acb      	lsrs	r3, r1, #11
 801a2c4:	3a15      	subs	r2, #21
 801a2c6:	0549      	lsls	r1, r1, #21
 801a2c8:	2b00      	cmp	r3, #0
 801a2ca:	d0fa      	beq.n	801a2c2 <__ieee754_sqrt+0x5e>
 801a2cc:	e7f7      	b.n	801a2be <__ieee754_sqrt+0x5a>
 801a2ce:	462a      	mov	r2, r5
 801a2d0:	e7fa      	b.n	801a2c8 <__ieee754_sqrt+0x64>
 801a2d2:	005b      	lsls	r3, r3, #1
 801a2d4:	3001      	adds	r0, #1
 801a2d6:	02dc      	lsls	r4, r3, #11
 801a2d8:	d5fb      	bpl.n	801a2d2 <__ieee754_sqrt+0x6e>
 801a2da:	1e44      	subs	r4, r0, #1
 801a2dc:	1b12      	subs	r2, r2, r4
 801a2de:	f1c0 0420 	rsb	r4, r0, #32
 801a2e2:	fa21 f404 	lsr.w	r4, r1, r4
 801a2e6:	4323      	orrs	r3, r4
 801a2e8:	4081      	lsls	r1, r0
 801a2ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801a2ee:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 801a2f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801a2f6:	07d2      	lsls	r2, r2, #31
 801a2f8:	bf5c      	itt	pl
 801a2fa:	005b      	lslpl	r3, r3, #1
 801a2fc:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 801a300:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801a304:	bf58      	it	pl
 801a306:	0049      	lslpl	r1, r1, #1
 801a308:	2600      	movs	r6, #0
 801a30a:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 801a30e:	107f      	asrs	r7, r7, #1
 801a310:	0049      	lsls	r1, r1, #1
 801a312:	2016      	movs	r0, #22
 801a314:	4632      	mov	r2, r6
 801a316:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 801a31a:	1915      	adds	r5, r2, r4
 801a31c:	429d      	cmp	r5, r3
 801a31e:	bfde      	ittt	le
 801a320:	192a      	addle	r2, r5, r4
 801a322:	1b5b      	suble	r3, r3, r5
 801a324:	1936      	addle	r6, r6, r4
 801a326:	0fcd      	lsrs	r5, r1, #31
 801a328:	3801      	subs	r0, #1
 801a32a:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 801a32e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801a332:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801a336:	d1f0      	bne.n	801a31a <__ieee754_sqrt+0xb6>
 801a338:	4605      	mov	r5, r0
 801a33a:	2420      	movs	r4, #32
 801a33c:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 801a340:	4293      	cmp	r3, r2
 801a342:	eb0c 0e00 	add.w	lr, ip, r0
 801a346:	dc02      	bgt.n	801a34e <__ieee754_sqrt+0xea>
 801a348:	d113      	bne.n	801a372 <__ieee754_sqrt+0x10e>
 801a34a:	458e      	cmp	lr, r1
 801a34c:	d811      	bhi.n	801a372 <__ieee754_sqrt+0x10e>
 801a34e:	f1be 0f00 	cmp.w	lr, #0
 801a352:	eb0e 000c 	add.w	r0, lr, ip
 801a356:	da3f      	bge.n	801a3d8 <__ieee754_sqrt+0x174>
 801a358:	2800      	cmp	r0, #0
 801a35a:	db3d      	blt.n	801a3d8 <__ieee754_sqrt+0x174>
 801a35c:	f102 0801 	add.w	r8, r2, #1
 801a360:	1a9b      	subs	r3, r3, r2
 801a362:	458e      	cmp	lr, r1
 801a364:	bf88      	it	hi
 801a366:	f103 33ff 	addhi.w	r3, r3, #4294967295
 801a36a:	eba1 010e 	sub.w	r1, r1, lr
 801a36e:	4465      	add	r5, ip
 801a370:	4642      	mov	r2, r8
 801a372:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 801a376:	3c01      	subs	r4, #1
 801a378:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 801a37c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801a380:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 801a384:	d1dc      	bne.n	801a340 <__ieee754_sqrt+0xdc>
 801a386:	4319      	orrs	r1, r3
 801a388:	d01b      	beq.n	801a3c2 <__ieee754_sqrt+0x15e>
 801a38a:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 801a408 <__ieee754_sqrt+0x1a4>
 801a38e:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 801a40c <__ieee754_sqrt+0x1a8>
 801a392:	e9da 0100 	ldrd	r0, r1, [sl]
 801a396:	e9db 2300 	ldrd	r2, r3, [fp]
 801a39a:	f7e5 ff85 	bl	80002a8 <__aeabi_dsub>
 801a39e:	e9da 8900 	ldrd	r8, r9, [sl]
 801a3a2:	4602      	mov	r2, r0
 801a3a4:	460b      	mov	r3, r1
 801a3a6:	4640      	mov	r0, r8
 801a3a8:	4649      	mov	r1, r9
 801a3aa:	f7e6 fbb1 	bl	8000b10 <__aeabi_dcmple>
 801a3ae:	b140      	cbz	r0, 801a3c2 <__ieee754_sqrt+0x15e>
 801a3b0:	f1b5 3fff 	cmp.w	r5, #4294967295
 801a3b4:	e9da 0100 	ldrd	r0, r1, [sl]
 801a3b8:	e9db 2300 	ldrd	r2, r3, [fp]
 801a3bc:	d10e      	bne.n	801a3dc <__ieee754_sqrt+0x178>
 801a3be:	3601      	adds	r6, #1
 801a3c0:	4625      	mov	r5, r4
 801a3c2:	1073      	asrs	r3, r6, #1
 801a3c4:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 801a3c8:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 801a3cc:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 801a3d0:	086b      	lsrs	r3, r5, #1
 801a3d2:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 801a3d6:	e759      	b.n	801a28c <__ieee754_sqrt+0x28>
 801a3d8:	4690      	mov	r8, r2
 801a3da:	e7c1      	b.n	801a360 <__ieee754_sqrt+0xfc>
 801a3dc:	f7e5 ff66 	bl	80002ac <__adddf3>
 801a3e0:	e9da 8900 	ldrd	r8, r9, [sl]
 801a3e4:	4602      	mov	r2, r0
 801a3e6:	460b      	mov	r3, r1
 801a3e8:	4640      	mov	r0, r8
 801a3ea:	4649      	mov	r1, r9
 801a3ec:	f7e6 fb86 	bl	8000afc <__aeabi_dcmplt>
 801a3f0:	b120      	cbz	r0, 801a3fc <__ieee754_sqrt+0x198>
 801a3f2:	1cab      	adds	r3, r5, #2
 801a3f4:	bf08      	it	eq
 801a3f6:	3601      	addeq	r6, #1
 801a3f8:	3502      	adds	r5, #2
 801a3fa:	e7e2      	b.n	801a3c2 <__ieee754_sqrt+0x15e>
 801a3fc:	1c6b      	adds	r3, r5, #1
 801a3fe:	f023 0501 	bic.w	r5, r3, #1
 801a402:	e7de      	b.n	801a3c2 <__ieee754_sqrt+0x15e>
 801a404:	7ff00000 	.word	0x7ff00000
 801a408:	08023858 	.word	0x08023858
 801a40c:	08023850 	.word	0x08023850

0801a410 <round>:
 801a410:	ec51 0b10 	vmov	r0, r1, d0
 801a414:	b570      	push	{r4, r5, r6, lr}
 801a416:	f3c1 540a 	ubfx	r4, r1, #20, #11
 801a41a:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 801a41e:	2a13      	cmp	r2, #19
 801a420:	460b      	mov	r3, r1
 801a422:	4605      	mov	r5, r0
 801a424:	dc1b      	bgt.n	801a45e <round+0x4e>
 801a426:	2a00      	cmp	r2, #0
 801a428:	da0b      	bge.n	801a442 <round+0x32>
 801a42a:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 801a42e:	3201      	adds	r2, #1
 801a430:	bf04      	itt	eq
 801a432:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 801a436:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 801a43a:	2200      	movs	r2, #0
 801a43c:	4619      	mov	r1, r3
 801a43e:	4610      	mov	r0, r2
 801a440:	e015      	b.n	801a46e <round+0x5e>
 801a442:	4c15      	ldr	r4, [pc, #84]	@ (801a498 <round+0x88>)
 801a444:	4114      	asrs	r4, r2
 801a446:	ea04 0601 	and.w	r6, r4, r1
 801a44a:	4306      	orrs	r6, r0
 801a44c:	d00f      	beq.n	801a46e <round+0x5e>
 801a44e:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 801a452:	fa41 f202 	asr.w	r2, r1, r2
 801a456:	4413      	add	r3, r2
 801a458:	ea23 0304 	bic.w	r3, r3, r4
 801a45c:	e7ed      	b.n	801a43a <round+0x2a>
 801a45e:	2a33      	cmp	r2, #51	@ 0x33
 801a460:	dd08      	ble.n	801a474 <round+0x64>
 801a462:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 801a466:	d102      	bne.n	801a46e <round+0x5e>
 801a468:	4602      	mov	r2, r0
 801a46a:	f7e5 ff1f 	bl	80002ac <__adddf3>
 801a46e:	ec41 0b10 	vmov	d0, r0, r1
 801a472:	bd70      	pop	{r4, r5, r6, pc}
 801a474:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 801a478:	f04f 34ff 	mov.w	r4, #4294967295
 801a47c:	40f4      	lsrs	r4, r6
 801a47e:	4204      	tst	r4, r0
 801a480:	d0f5      	beq.n	801a46e <round+0x5e>
 801a482:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 801a486:	2201      	movs	r2, #1
 801a488:	408a      	lsls	r2, r1
 801a48a:	1952      	adds	r2, r2, r5
 801a48c:	bf28      	it	cs
 801a48e:	3301      	addcs	r3, #1
 801a490:	ea22 0204 	bic.w	r2, r2, r4
 801a494:	e7d2      	b.n	801a43c <round+0x2c>
 801a496:	bf00      	nop
 801a498:	000fffff 	.word	0x000fffff

0801a49c <_init>:
 801a49c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a49e:	bf00      	nop
 801a4a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a4a2:	bc08      	pop	{r3}
 801a4a4:	469e      	mov	lr, r3
 801a4a6:	4770      	bx	lr

0801a4a8 <_fini>:
 801a4a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a4aa:	bf00      	nop
 801a4ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a4ae:	bc08      	pop	{r3}
 801a4b0:	469e      	mov	lr, r3
 801a4b2:	4770      	bx	lr
